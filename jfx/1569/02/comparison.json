{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-\n@@ -34,5 +33,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -60,1 +57,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -71,1 +68,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/DefaultExceptionHandlerTest.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-\n@@ -34,5 +33,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -65,1 +62,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -70,1 +67,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/ExceptionHandlerTest.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import com.sun.javafx.PlatformUtil;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -34,2 +34,1 @@\n-\n-import static org.junit.Assert.fail;\n+import com.sun.javafx.PlatformUtil;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/gtk\/Gtk2RemovalCommon.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,12 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import static test.util.Util.runAndWait;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import javafx.application.Platform;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -32,14 +44,0 @@\n-import javafx.application.Platform;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.concurrent.CountDownLatch;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assume.assumeTrue;\n-import static test.util.Util.runAndWait;\n@@ -53,1 +51,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -63,1 +61,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -77,1 +75,1 @@\n-            assertTrue(\"The content was not a raw image\", content instanceof Pixels);\n+            assertTrue(content instanceof Pixels, \"The content was not a raw image\");\n@@ -80,2 +78,2 @@\n-            assertEquals(\"The raw image width\", 64, pixels.getWidth());\n-            assertEquals(\"The raw image height\", 64, pixels.getHeight());\n+            assertEquals(64, pixels.getWidth(), \"The raw image width\");\n+            assertEquals(64, pixels.getHeight(), \"The raw image height\");\n@@ -93,1 +91,1 @@\n-            assertNull(\"The content was not null\", content);\n+            assertNull(content, \"The content was not null\");\n@@ -104,1 +102,1 @@\n-            assertNull(\"The content was not null\", content);\n+            assertNull(content, \"The content was not null\");\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/mac\/MacPasteboardTest.java","additions":20,"deletions":22,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,3 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -28,3 +31,0 @@\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -55,1 +55,1 @@\n-    @Before\n+    @BeforeEach\n@@ -75,1 +75,1 @@\n-        Assert.assertEquals(8, settings.bitsPerPixel);\n+        assertEquals(8, settings.bitsPerPixel);\n@@ -79,1 +79,1 @@\n-        Assert.assertEquals(16, settings.bitsPerPixel);\n+        assertEquals(16, settings.bitsPerPixel);\n@@ -83,1 +83,1 @@\n-        Assert.assertEquals(32, settings.bitsPerPixel);\n+        assertEquals(32, settings.bitsPerPixel);\n@@ -88,1 +88,1 @@\n-        Assert.assertEquals(32, settings.bitsPerPixel);\n+        assertEquals(32, settings.bitsPerPixel);\n@@ -98,1 +98,1 @@\n-        Assert.assertEquals(0, settings.rotate);\n+        assertEquals(0, settings.rotate);\n@@ -102,1 +102,1 @@\n-        Assert.assertEquals(1, settings.rotate);\n+        assertEquals(1, settings.rotate);\n@@ -106,1 +106,1 @@\n-        Assert.assertEquals(2, settings.rotate);\n+        assertEquals(2, settings.rotate);\n@@ -110,1 +110,1 @@\n-        Assert.assertEquals(3, settings.rotate);\n+        assertEquals(3, settings.rotate);\n@@ -115,1 +115,1 @@\n-        Assert.assertEquals(0, settings.rotate);\n+        assertEquals(0, settings.rotate);\n@@ -127,1 +127,1 @@\n-        Assert.assertEquals(0, settings.grayscale);\n+        assertEquals(0, settings.grayscale);\n@@ -131,1 +131,1 @@\n-        Assert.assertEquals(0, settings.grayscale);\n+        assertEquals(0, settings.grayscale);\n@@ -137,1 +137,1 @@\n-        Assert.assertEquals(0x1, settings.grayscale);\n+        assertEquals(0x1, settings.grayscale);\n@@ -141,1 +141,1 @@\n-        Assert.assertEquals(0x2, settings.grayscale);\n+        assertEquals(0x2, settings.grayscale);\n@@ -152,1 +152,1 @@\n-        Assert.assertEquals(false, settings.noWait);\n+        assertEquals(false, settings.noWait);\n@@ -156,1 +156,1 @@\n-        Assert.assertEquals(true, settings.noWait);\n+        assertEquals(true, settings.noWait);\n@@ -166,1 +166,1 @@\n-        Assert.assertEquals(1, settings.waveformMode);\n+        assertEquals(1, settings.waveformMode);\n@@ -170,1 +170,1 @@\n-        Assert.assertEquals(2, settings.waveformMode);\n+        assertEquals(2, settings.waveformMode);\n@@ -174,1 +174,1 @@\n-        Assert.assertEquals(3, settings.waveformMode);\n+        assertEquals(3, settings.waveformMode);\n@@ -178,1 +178,1 @@\n-        Assert.assertEquals(4, settings.waveformMode);\n+        assertEquals(4, settings.waveformMode);\n@@ -183,1 +183,1 @@\n-        Assert.assertEquals(257, settings.waveformMode);\n+        assertEquals(257, settings.waveformMode);\n@@ -187,1 +187,1 @@\n-        Assert.assertEquals(257, settings.waveformMode);\n+        assertEquals(257, settings.waveformMode);\n@@ -198,1 +198,1 @@\n-        Assert.assertEquals(0, settings.flags);\n+        assertEquals(0, settings.flags);\n@@ -202,1 +202,1 @@\n-        Assert.assertEquals(0x01, settings.flags);\n+        assertEquals(0x01, settings.flags);\n@@ -213,1 +213,1 @@\n-        Assert.assertEquals(0, settings.flags);\n+        assertEquals(0, settings.flags);\n@@ -217,1 +217,1 @@\n-        Assert.assertEquals(0x02, settings.flags);\n+        assertEquals(0x02, settings.flags);\n@@ -228,1 +228,1 @@\n-        Assert.assertEquals(0, settings.flags);\n+        assertEquals(0, settings.flags);\n@@ -232,1 +232,1 @@\n-        Assert.assertEquals(0x2000, settings.flags);\n+        assertEquals(0x2000, settings.flags);\n@@ -243,1 +243,1 @@\n-        Assert.assertEquals(0, settings.flags);\n+        assertEquals(0, settings.flags);\n@@ -247,1 +247,1 @@\n-        Assert.assertEquals(0x4000, settings.flags);\n+        assertEquals(0x4000, settings.flags);\n@@ -260,1 +260,1 @@\n-        Assert.assertEquals(0x01 | 0x02 | 0x2000 | 0x4000, settings.flags);\n+        assertEquals(0x01 | 0x02 | 0x2000 | 0x4000, settings.flags);\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/monocle\/EPDSettingsTest.java","additions":35,"deletions":35,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -28,3 +28,0 @@\n-import com.sun.glass.ui.monocle.FramebufferShim;\n-import org.junit.Test;\n-\n@@ -32,0 +29,2 @@\n+import org.junit.jupiter.api.Test;\n+import com.sun.glass.ui.monocle.FramebufferShim;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/monocle\/FramebufferTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,0 @@\n-import com.sun.glass.ui.monocle.FramebufferY8Shim;\n-import com.sun.glass.ui.monocle.FramebufferY8SuperShim;\n@@ -40,4 +38,6 @@\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import com.sun.glass.ui.monocle.FramebufferY8Shim;\n+import com.sun.glass.ui.monocle.FramebufferY8SuperShim;\n@@ -77,1 +77,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -128,1 +128,1 @@\n-            Assert.assertArrayEquals(oldBuffer.array(), newBuffer.array());\n+            Assertions.assertArrayEquals(oldBuffer.array(), newBuffer.array());\n@@ -130,1 +130,1 @@\n-            Assert.assertEquals(oldBuffer, newBuffer);\n+            Assertions.assertEquals(oldBuffer, newBuffer);\n@@ -180,1 +180,1 @@\n-        Assert.assertArrayEquals(oldStream.toByteArray(), newStream.toByteArray());\n+        Assertions.assertArrayEquals(oldStream.toByteArray(), newStream.toByteArray());\n@@ -356,1 +356,1 @@\n-    @Ignore(\"Saves the source ARGB32 buffer as a PNG image\")\n+    @Disabled(\"Saves the source ARGB32 buffer as a PNG image\")\n@@ -377,1 +377,1 @@\n-    @Ignore(\"Saves the target Y8 buffer as a PNG image\")\n+    @Disabled(\"Saves the target Y8 buffer as a PNG image\")\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/monocle\/FramebufferY8Test.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,0 @@\n-import com.sun.glass.ui.monocle.IntSetShim;\n-import org.junit.Assert;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-\n@@ -37,0 +31,1 @@\n+import java.util.List;\n@@ -38,4 +33,4 @@\n-import java.util.stream.Collectors;\n-\n-@RunWith(Parameterized.class)\n-public class IntSetTest {\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import com.sun.glass.ui.monocle.IntSetShim;\n@@ -43,1 +38,1 @@\n-    private Integer[] array;\n+public final class IntSetTest {\n@@ -45,14 +40,2 @@\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n-        Integer[][] sets = {\n-                { 1 },\n-                { 1, 2 },\n-                { 1, 2, 3},\n-                { 1, 1 },\n-                { 1, 1, 1 },\n-                { 1, 1, 2 },\n-        };\n-        return Arrays.asList(sets).stream()\n-                .map(d -> new Object[] { d })\n-                .collect(Collectors.toList());\n-    }\n+    \/\/ junit5 parameterized test gets confused by Integer[]\n+    private static record Parameter(Integer[] array) { }\n@@ -60,2 +43,9 @@\n-    public IntSetTest(Integer[] array) {\n-        this.array = array;\n+    private static Collection<Parameter> parameters() {\n+        return List.of(\n+            new Parameter(new Integer[] { 1 }),\n+            new Parameter(new Integer[] { 1, 2 }),\n+            new Parameter(new Integer[] { 1, 2, 3 }),\n+            new Parameter(new Integer[] { 1, 1 }),\n+            new Parameter(new Integer[] { 1, 1, 1 }),\n+            new Parameter(new Integer[] { 1, 1, 2 })\n+        );\n@@ -78,2 +68,1 @@\n-        Assert.assertArrayEquals(\n-                \"Expected: \" + expected + \", found \" + actual,\n+        Assertions.assertArrayEquals(\n@@ -81,1 +70,2 @@\n-                getIntSetAsArray(actual));\n+                getIntSetAsArray(actual),\n+                \"Expected: \" + expected + \", found \" + actual);\n@@ -84,2 +74,4 @@\n-    @Test\n-    public void testAddInOrderRemoveInOrder() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testAddInOrderRemoveInOrder(Parameter p) {\n+        Integer[] array = p.array;\n@@ -101,2 +93,4 @@\n-    @Test\n-    public void testAddInOrderRemoveInReverse() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testAddInOrderRemoveInReverse(Parameter p) {\n+        Integer[] array = p.array;\n@@ -118,2 +112,4 @@\n-    @Test\n-    public void testAddInReverseRemoveInOrder() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testAddInReverseRemoveInOrder(Parameter p) {\n+        Integer[] array = p.array;\n@@ -135,2 +131,4 @@\n-    @Test\n-    public void testAddInReverseRemoveInReverse() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testAddInReverseRemoveInReverse(Parameter p) {\n+        Integer[] array = p.array;\n@@ -151,1 +149,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/monocle\/IntSetTest.java","additions":37,"deletions":40,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -31,4 +31,4 @@\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -56,1 +56,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -64,1 +64,1 @@\n-        Assert.assertEquals(0, startupLatch.getCount());\n+        Assertions.assertEquals(0, startupLatch.getCount());\n@@ -67,1 +67,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -74,3 +74,3 @@\n-        Assert.assertEquals(150, width);\n-        Assert.assertEquals(250, height);\n-        Assert.assertEquals(32, depth);\n+        Assertions.assertEquals(150, width);\n+        Assertions.assertEquals(250, height);\n+        Assertions.assertEquals(32, depth);\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/monocle\/headless\/HeadlessGeometry1Test.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -31,4 +31,4 @@\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -56,1 +56,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -64,1 +64,1 @@\n-        Assert.assertEquals(0, startupLatch.getCount());\n+        Assertions.assertEquals(0, startupLatch.getCount());\n@@ -67,1 +67,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -74,3 +74,3 @@\n-        Assert.assertEquals(150, width);\n-        Assert.assertEquals(250, height);\n-        Assert.assertEquals(16, depth);\n+        Assertions.assertEquals(150, width);\n+        Assertions.assertEquals(250, height);\n+        Assertions.assertEquals(16, depth);\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/monocle\/headless\/HeadlessGeometry2Test.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -33,2 +33,3 @@\n-import org.junit.AfterClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -41,1 +42,2 @@\n-    @Test (timeout=15000)\n+    @Test\n+    @Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -51,1 +53,1 @@\n-                    assertEquals(\"Runnable executed out of order\", 2, startupLatch.getCount());\n+                    assertEquals(2, startupLatch.getCount(), \"Runnable executed out of order\");\n@@ -62,1 +64,1 @@\n-                assertEquals(\"Runnable executed out of order\", 1, startupLatch.getCount());\n+                assertEquals(1, startupLatch.getCount(), \"Runnable executed out of order\");\n@@ -79,1 +81,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/ConcurrentStartupTest.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,2 @@\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -33,1 +32,0 @@\n-\n@@ -38,5 +36,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -68,1 +64,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -73,1 +69,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -114,1 +110,1 @@\n-        assertTrue(\"Did not get the expected NoSuchMethodException\", nsme);\n+        assertTrue(nsme, \"Did not get the expected NoSuchMethodException\");\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/HostServicesTest.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-import junit.framework.Assert;\n+import org.junit.jupiter.api.Assertions;\n@@ -45,1 +45,1 @@\n-                Assert.fail(\"Error: No Exception was thrown - expected IllegalStateException\");\n+                Assertions.fail(\"Error: No Exception was thrown - expected IllegalStateException\");\n@@ -55,1 +55,1 @@\n-            Assert.fail(\"Error: No Exception was thrown - expected IllegalStateException\");\n+            Assertions.fail(\"Error: No Exception was thrown - expected IllegalStateException\");\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/InitializeJavaFXBase.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,4 @@\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -33,1 +35,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -38,1 +40,2 @@\n-    @Test (timeout = 15000)\n+    @Test\n+    @Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/InitializeJavaFXLaunch1Test.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,4 @@\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -33,1 +35,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -38,1 +40,2 @@\n-    @Test (timeout = 15000)\n+    @Test\n+    @Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/InitializeJavaFXLaunch2Test.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import javafx.application.Application;\n-import javafx.stage.Stage;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -32,1 +31,2 @@\n-import static org.junit.Assert.assertTrue;\n+import javafx.application.Application;\n+import javafx.stage.Stage;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/InitializeJavaFXLaunchBase.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,4 @@\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -33,1 +35,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -38,1 +40,2 @@\n-    @Test (timeout = 15000)\n+    @Test\n+    @Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/InitializeJavaFXStartup1Test.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,4 @@\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -33,1 +35,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -38,1 +40,2 @@\n-    @Test (timeout = 15000)\n+    @Test\n+    @Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -40,1 +43,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/InitializeJavaFXStartup2Test.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/ListenerError1Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/ListenerError2Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/ListenerException1Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/ListenerException2Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/ListenerExitTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/ListenerIdle1Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/ListenerIdle2Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,2 +28,6 @@\n-import com.sun.javafx.application.PlatformImpl;\n-import com.sun.javafx.application.PlatformImplShim;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.util.Util.TIMEOUT;\n@@ -38,1 +42,2 @@\n-import junit.framework.AssertionFailedError;\n+import com.sun.javafx.application.PlatformImpl;\n+import com.sun.javafx.application.PlatformImplShim;\n@@ -41,3 +46,0 @@\n-import static org.junit.Assert.*;\n-import static test.util.Util.TIMEOUT;\n-\n@@ -87,1 +89,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for Platform to start\");\n+                fail(\"Timeout waiting for Platform to start\");\n@@ -90,3 +92,1 @@\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n+            fail(ex);\n@@ -146,1 +146,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for exit notification\");\n+                fail(\"Timeout waiting for exit notification\");\n@@ -149,3 +149,1 @@\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n+            fail(ex);\n@@ -206,1 +204,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for runLater, throwableType = \"\n+                fail(\"Timeout waiting for runLater, throwableType = \"\n@@ -210,1 +208,1 @@\n-            throw new AssertionFailedError(\"Unexpected exception waiting for runLater, throwableType = \"\n+            fail(\"Unexpected exception waiting for runLater, throwableType = \"\n@@ -218,1 +216,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for exit notification\");\n+                fail(\"Timeout waiting for exit notification\");\n@@ -221,3 +219,1 @@\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n+            fail(ex);\n@@ -235,1 +231,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/ListenerTestCommon.java","additions":16,"deletions":21,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,6 @@\n-import com.sun.javafx.application.PlatformImpl;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.util.Util.TIMEOUT;\n@@ -47,5 +52,5 @@\n-import junit.framework.AssertionFailedError;\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.application.PlatformImpl;\n@@ -54,3 +59,0 @@\n-import static org.junit.Assert.*;\n-import static test.util.Util.TIMEOUT;\n-\n@@ -65,1 +67,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -79,1 +81,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for Application to launch\");\n+                fail(\"Timeout waiting for Application to launch\");\n@@ -82,3 +84,1 @@\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n+            fail(ex);\n@@ -93,1 +93,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -100,1 +100,1 @@\n-    @After\n+    @AfterEach\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/NullCCLTest.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,3 @@\n-import org.junit.Test;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -35,1 +37,2 @@\n-    @Test (timeout = 15000)\n+    @Test\n+    @Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/PlatformExit1Test.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,3 @@\n-import org.junit.Test;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -35,1 +37,2 @@\n-    @Test (timeout = 15000)\n+    @Test\n+    @Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/PlatformExit2Test.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,3 @@\n-import org.junit.Test;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -36,1 +38,2 @@\n-    @Test (timeout = 15000)\n+    @Test\n+    @Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/PlatformExit3Test.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,3 @@\n-import org.junit.Test;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -36,1 +38,2 @@\n-    @Test (timeout = 15000)\n+    @Test\n+    @Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/PlatformExit4Test.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -31,1 +30,0 @@\n-\n@@ -33,3 +31,1 @@\n-\n-import org.junit.BeforeClass;\n-\n+import org.junit.jupiter.api.BeforeAll;\n@@ -37,1 +33,0 @@\n-\n@@ -52,1 +47,1 @@\n-    @BeforeClass\n+    @BeforeAll\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/PlatformExitCommon.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -29,1 +30,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -37,1 +39,2 @@\n-    @Test (timeout = 5000)\n+    @Test\n+    @Timeout(value=5000, unit=TimeUnit.MILLISECONDS)\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/PlatformExitSimpleTest.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,5 @@\n-import com.sun.javafx.application.PlatformImplShim;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.util.Util.TIMEOUT;\n@@ -37,1 +41,1 @@\n-import junit.framework.AssertionFailedError;\n+import com.sun.javafx.application.PlatformImplShim;\n@@ -40,3 +44,0 @@\n-import static org.junit.Assert.*;\n-import static test.util.Util.TIMEOUT;\n-\n@@ -93,1 +94,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for Toolkit to start\");\n+                fail(\"Timeout waiting for Toolkit to start\");\n@@ -106,1 +107,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for runLater with Exception\");\n+                fail(\"Timeout waiting for runLater with Exception\");\n@@ -146,1 +147,1 @@\n-                    throw new AssertionFailedError(\"Timeout waiting for Platform to exit\");\n+                    fail(\"Timeout waiting for Platform to exit\");\n@@ -153,1 +154,1 @@\n-                fail(\"Unexpected exception: \" + ex);\n+                fail(ex);\n@@ -167,1 +168,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/PlatformStartupCommon.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/PlatformStartupExplicitTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/PlatformStartupImplicitTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,2 @@\n-import org.junit.Test;\n-import org.junit.AfterClass;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Test;\n@@ -50,1 +50,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/PlatformStartupMemoryLeakTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -32,1 +31,0 @@\n-\n@@ -36,5 +34,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -61,1 +57,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -66,1 +62,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/RunLaterTest.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,2 @@\n-import com.sun.javafx.application.PlatformImpl;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.util.Util.TIMEOUT;\n@@ -39,4 +40,5 @@\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.application.PlatformImpl;\n@@ -45,3 +47,0 @@\n-import static org.junit.Assert.*;\n-import static test.util.Util.TIMEOUT;\n-\n@@ -56,1 +55,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -68,1 +67,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -73,1 +72,1 @@\n-    @After\n+    @AfterEach\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SceneGraphHTMLEditorTest.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SceneGraphThread1Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SceneGraphThread2Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SceneGraphThread3Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SceneGraphThread4Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,3 +28,4 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -49,1 +50,0 @@\n-import junit.framework.AssertionFailedError;\n@@ -124,1 +124,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for Application to launch\");\n+                fail(\"Timeout waiting for Application to launch\");\n@@ -146,1 +146,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for Application to finish\");\n+                fail(\"Timeout waiting for Application to finish\");\n@@ -150,8 +150,1 @@\n-            if (t instanceof RuntimeException) {\n-                throw (RuntimeException)t;\n-            }\n-            else if (t instanceof Error) {\n-                throw (Error)t;\n-            } else {\n-                throw new RuntimeException(t);\n-            }\n+            fail(t);\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SceneGraphThreadCommon.java","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,5 @@\n-import com.sun.javafx.application.PlatformImplShim;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.util.Util.TIMEOUT;\n@@ -37,1 +41,1 @@\n-import junit.framework.AssertionFailedError;\n+import com.sun.javafx.application.PlatformImplShim;\n@@ -40,3 +44,0 @@\n-import static org.junit.Assert.*;\n-import static test.util.Util.TIMEOUT;\n-\n@@ -130,1 +131,1 @@\n-                throw new AssertionFailedError(\"Unexpected call to stop method\");\n+                fail(\"Unexpected call to stop method\");\n@@ -168,1 +169,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for Application to launch and initialize\");\n+                fail(\"Timeout waiting for Application to launch and initialize\");\n@@ -172,1 +173,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for Application to start\");\n+                fail(\"Timeout waiting for Application to start\");\n@@ -189,1 +190,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for runLater, throwableType = \"\n+                fail(\"Timeout waiting for runLater, throwableType = \"\n@@ -220,1 +221,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for Application to stop\");\n+                fail(\"Timeout waiting for Application to stop\");\n@@ -224,1 +225,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for Platform to exit\");\n+                fail(\"Timeout waiting for Platform to exit\");\n@@ -228,1 +229,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for launch to return\");\n+                fail(\"Timeout waiting for launch to return\");\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SingleExitCommon.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SingleExitExplicit1Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SingleExitExplicit2Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SingleExitExplicitError1Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SingleExitExplicitError2Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SingleExitExplicitException1Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SingleExitExplicitException2Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SingleExitImplicitErrorTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SingleExitImplicitExceptionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SingleExitImplicitTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SingleNoShowExplicit1Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SingleNoShowExplicit2Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SingleNoShowExplicitError1Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SingleNoShowExplicitError2Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SingleNoShowExplicitException1Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SingleNoShowExplicitException2Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SingleNoShowImplicitErrorTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SingleNoShowImplicitExceptionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SingleNoShowImplicitTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -30,0 +31,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -31,3 +33,3 @@\n-import org.junit.AfterClass;\n-import org.junit.Test;\n-import junit.framework.AssertionFailedError;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -37,1 +39,2 @@\n-    @Test (timeout=15000)\n+    @Test\n+    @Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -51,1 +54,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -73,1 +76,1 @@\n-                throw new AssertionFailedError (\"Static latch couldn't be read\");\n+                fail(\"Static latch couldn't be read\");\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/StaticStartupTest.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,5 @@\n-import com.sun.javafx.application.PlatformImplShim;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.util.Util.TIMEOUT;\n@@ -30,1 +34,0 @@\n-import javax.swing.SwingUtilities;\n@@ -35,0 +38,2 @@\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n@@ -40,2 +45,1 @@\n-import javax.swing.JFrame;\n-import junit.framework.AssertionFailedError;\n+import com.sun.javafx.application.PlatformImplShim;\n@@ -44,3 +48,0 @@\n-import static org.junit.Assert.*;\n-import static test.util.Util.TIMEOUT;\n-\n@@ -121,1 +122,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for JFXPanel to launch and initialize\");\n+                fail(\"Timeout waiting for JFXPanel to launch and initialize\");\n@@ -132,3 +133,1 @@\n-                AssertionFailedError err = new AssertionFailedError(\"Exception while disposing JFrame\");\n-                err.initCause(ex.getCause());\n-                throw err;\n+                fail(ex);\n@@ -154,1 +153,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for Platform to exit\");\n+                fail(\"Timeout waiting for Platform to exit\");\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SwingExitCommon.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SwingExitExplicit1Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SwingExitExplicit2Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SwingExitImplicitTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,11 +28,2 @@\n-import com.sun.javafx.application.PlatformImplShim;\n-import javafx.application.Platform;\n-import javafx.embed.swing.JFXPanel;\n-import javafx.scene.Group;\n-import javafx.scene.Scene;\n-import javafx.scene.paint.Color;\n-import junit.framework.AssertionFailedError;\n-import test.util.Util;\n-\n-import javax.swing.JFrame;\n-import javax.swing.SwingUtilities;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -45,3 +36,10 @@\n-\n-import org.junit.Test;\n-import org.junit.Assert;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+import javafx.application.Platform;\n+import javafx.embed.swing.JFXPanel;\n+import javafx.scene.Group;\n+import javafx.scene.Scene;\n+import javafx.scene.paint.Color;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.application.PlatformImplShim;\n+import test.util.Util;\n@@ -99,1 +97,1 @@\n-            throw new AssertionFailedError(\"Timeout waiting for JFXPanel to launch and initialize\");\n+            fail(\"Timeout waiting for JFXPanel to launch and initialize\");\n@@ -112,1 +110,1 @@\n-            throw new AssertionFailedError(\"Timeout waiting for Platform.exit()\");\n+            fail(\"Timeout waiting for Platform.exit()\");\n@@ -118,2 +116,1 @@\n-        Assert.assertEquals(\"Platform.exit() caused FX to exit, while JFXPanel is alive\",\n-                            1, exitLatch.getCount());\n+        assertEquals(1, exitLatch.getCount(), \"Platform.exit() caused FX to exit, while JFXPanel is alive\");\n@@ -128,1 +125,1 @@\n-            throw new AssertionFailedError(\"Exception while disposing JFrame\");\n+            fail(ex);\n@@ -133,2 +130,1 @@\n-        Assert.assertEquals(\"FX is not exited, when the last JFXPanel is disposed\",\n-                            0, exitLatch.getCount());\n+       assertEquals(0, exitLatch.getCount(), \"FX is not exited, when the last JFXPanel is disposed\");\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/SwingNoExit.java","additions":18,"deletions":22,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/TaskbarApp1Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/TaskbarApp2Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/TaskbarApp3Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/TaskbarApp4Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/TaskbarApp5Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,7 @@\n-import com.sun.javafx.application.PlatformImpl;\n-import com.sun.javafx.application.PlatformImplShim;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.util.Util.TIMEOUT;\n@@ -33,5 +38,2 @@\n-import junit.framework.AssertionFailedError;\n-\n-import static org.junit.Assert.*;\n-import static test.util.Util.TIMEOUT;\n-\n+import com.sun.javafx.application.PlatformImpl;\n+import com.sun.javafx.application.PlatformImplShim;\n@@ -58,1 +60,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for Platform to start\");\n+                fail(\"Timeout waiting for Platform to start\");\n@@ -61,3 +63,1 @@\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n+            fail(ex);\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/application\/TaskbarAppCommon.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -43,1 +43,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/css\/StylesheetWithSecurityManagerTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -31,1 +31,0 @@\n-\n@@ -34,1 +33,0 @@\n-\n@@ -43,5 +41,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -84,1 +80,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -90,1 +86,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -103,1 +99,1 @@\n-        assertTrue(\"Timeout waiting for runLater\", rDone.await(TIMEOUT, TimeUnit.MILLISECONDS));\n+        assertTrue(rDone.await(TIMEOUT, TimeUnit.MILLISECONDS), \"Timeout waiting for runLater\");\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/font\/freetype\/PangoTest.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,2 +27,1 @@\n-import static org.junit.Assert.fail;\n-\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -33,1 +32,0 @@\n-\n@@ -41,6 +39,4 @@\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -87,1 +83,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -92,1 +88,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -97,1 +93,1 @@\n-    @After\n+    @AfterEach\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/iio\/LoadCorruptJPEGTest.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.util.Util.TIMEOUT;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n@@ -39,5 +44,0 @@\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.junit.Test;\n-import static org.junit.Assert.fail;\n-import static test.util.Util.TIMEOUT;\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/image\/impl\/ImageRaceTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,1 @@\n-import static org.junit.Assert.assertEquals;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -30,0 +29,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -32,1 +32,0 @@\n-\n@@ -42,5 +41,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -70,1 +68,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -76,1 +74,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -81,1 +79,2 @@\n-    @Test(timeout = 15000)\n+    @Test\n+    @Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/RT36296Test.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import static org.junit.Assume.assumeTrue;\n@@ -30,1 +29,2 @@\n-\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import javafx.scene.text.Font;\n@@ -32,1 +32,0 @@\n-\n@@ -40,2 +39,0 @@\n-import javafx.scene.text.Font;\n-\n@@ -189,1 +186,1 @@\n-        assumeTrue(\"Arial font missing\", arialFont.getName().equals(\"Arial\"));\n+        assumeTrue(arialFont.getName().equals(\"Arial\"), \"Arial font missing\");\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/text\/TextHitInfoTest.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import static org.junit.Assume.assumeTrue;\n@@ -31,1 +30,1 @@\n-\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -34,1 +33,1 @@\n-\n+import javafx.scene.text.Font;\n@@ -39,1 +38,0 @@\n-\n@@ -52,2 +50,0 @@\n-import javafx.scene.text.Font;\n-\n@@ -590,1 +586,1 @@\n-        assumeTrue(\"Arial font missing\", arialFont.getName().equals(\"Arial\"));\n+        assumeTrue(arialFont.getName().equals(\"Arial\"), \"Arial font missing\");\n@@ -594,1 +590,1 @@\n-        assumeTrue(\"Tahoma font missing\", arialFont.getName().equals(\"Tahoma\"));\n+        assumeTrue(arialFont.getName().equals(\"Tahoma\"), \"Tahoma font missing\");\n@@ -598,1 +594,1 @@\n-        assumeTrue(\"Platform is not Mac\", PlatformUtil.isMac());\n+        assumeTrue(PlatformUtil.isMac(), \"Platform is not Mac\");\n@@ -602,1 +598,1 @@\n-        assumeTrue(\"Platform is not Windows\", PlatformUtil.isWindows());\n+        assumeTrue(PlatformUtil.isWindows(), \"Platform is not Windows\");\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/text\/TextLayoutTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-\n@@ -36,5 +35,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -70,1 +67,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -75,1 +72,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/tk\/quantum\/CloseWindowTest.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,6 +28,5 @@\n-import com.sun.javafx.menu.MenuBase;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import test.util.Util;\n-import test.util.memory.JMemoryBuddy;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -36,0 +35,2 @@\n+import java.util.List;\n+import java.util.Objects;\n@@ -39,7 +40,0 @@\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-\n-import com.sun.javafx.tk.quantum.GlassSystemMenuShim;\n-import com.sun.javafx.scene.control.GlobalMenuAdapter;\n-import java.util.List;\n-import java.util.Objects;\n@@ -48,0 +42,1 @@\n+import javafx.scene.Scene;\n@@ -54,1 +49,0 @@\n-import javafx.scene.Scene;\n@@ -56,6 +50,8 @@\n-\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assume.assumeTrue;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.menu.MenuBase;\n+import com.sun.javafx.scene.control.GlobalMenuAdapter;\n+import com.sun.javafx.tk.quantum.GlassSystemMenuShim;\n+import test.util.Util;\n+import test.util.memory.JMemoryBuddy;\n@@ -64,1 +60,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -74,1 +70,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -218,1 +214,1 @@\n-        assumeTrue(\"SystemMenu only supported on MacOS\", gsmh.isSupported());\n+        assumeTrue(gsmh.isSupported(), \"SystemMenu only supported on MacOS\");\n@@ -235,1 +231,1 @@\n-                    assertTrue(\"Too many references\", strongCount < 2);\n+                    assertTrue(strongCount < 2, \"Too many references\");\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/tk\/quantum\/SystemMenuBarTest.java","additions":20,"deletions":24,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-\n@@ -40,5 +39,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -84,1 +81,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -89,1 +86,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/tk\/quantum\/ViewPainterLeakTest.java","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-\n@@ -35,5 +34,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -69,1 +66,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -74,1 +71,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/tk\/quantum\/WindowSceneInitDisposeTest.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n-import static org.junit.Assert.assertEquals;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n@@ -44,0 +44,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -49,1 +50,0 @@\n-\n@@ -55,1 +55,0 @@\n-\n@@ -80,6 +79,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -975,1 +972,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -982,1 +979,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -996,1 +993,2 @@\n-    @Test(timeout = 600000)\n+    @Test\n+    @Timeout(value=600000, unit=TimeUnit.MILLISECONDS)\n@@ -1002,1 +1000,2 @@\n-    @Test(timeout = 900000)\n+    @Test\n+    @Timeout(value=900000, unit=TimeUnit.MILLISECONDS)\n@@ -1008,1 +1007,2 @@\n-    @Test(timeout = 900000)\n+    @Test\n+    @Timeout(value=900000, unit=TimeUnit.MILLISECONDS)\n@@ -1018,1 +1018,1 @@\n-        Assert.assertFalse(\"Detected a problem.\", doChecksFailed);\n+        assertFalse(doChecksFailed, \"Detected a problem.\");\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/marlin\/ClipShapeTest.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,3 +27,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -31,1 +30,1 @@\n-\n+import java.util.concurrent.TimeUnit;\n@@ -47,5 +46,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -103,1 +101,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -109,1 +107,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -114,1 +112,2 @@\n-    @Test(timeout = 10000)\n+    @Test\n+    @Timeout(value=10000, unit=TimeUnit.MILLISECONDS)\n@@ -116,1 +115,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/marlin\/DashedRectTest.java","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -27,3 +27,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -37,1 +36,1 @@\n-\n+import java.util.concurrent.TimeUnit;\n@@ -43,1 +42,0 @@\n-\n@@ -57,5 +55,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -129,1 +126,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -135,1 +132,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -140,1 +137,2 @@\n-    @Test(timeout = 10000)\n+    @Test\n+    @Timeout(value=10000, unit=TimeUnit.MILLISECONDS)\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/marlin\/HugePolygonClipTest.java","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n@@ -32,0 +32,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -36,1 +37,0 @@\n-\n@@ -51,6 +51,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -140,1 +138,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -146,1 +144,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -151,1 +149,2 @@\n-    @Test(timeout = 15000)\n+    @Test\n+    @Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -205,1 +204,1 @@\n-        Assert.assertFalse(\"DoChecks detected a problem.\", doChecksFailed);\n+        assertFalse(doChecksFailed, \"DoChecks detected a problem.\");\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/marlin\/QPathTest.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,3 +27,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -32,0 +31,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -33,1 +33,0 @@\n-\n@@ -48,5 +47,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -101,1 +99,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -109,1 +107,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -114,1 +112,2 @@\n-    @Test(timeout = 10000)\n+    @Test\n+    @Timeout(value=10000, unit=TimeUnit.MILLISECONDS)\n@@ -136,1 +135,2 @@\n-    @Test(timeout = 10000)\n+    @Test\n+    @Timeout(value=10000, unit=TimeUnit.MILLISECONDS)\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/marlin\/ScaleClipTest.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -34,0 +35,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -49,4 +51,4 @@\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -77,1 +79,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -89,1 +91,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -95,1 +97,2 @@\n-    @Test(timeout = 15000)\n+    @Test\n+    @Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -129,1 +132,1 @@\n-            Assert.fail(\"ArrayIndexOutOfBoundsException thrown !\");\n+            fail(\"ArrayIndexOutOfBoundsException thrown !\");\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/marlin\/ScaleX0Test.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assume.assumeTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -34,1 +33,1 @@\n-\n+import java.util.concurrent.TimeUnit;\n@@ -47,6 +46,5 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -57,1 +55,0 @@\n-\n@@ -64,0 +61,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -263,1 +261,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -269,1 +267,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -274,1 +272,1 @@\n-    @Before\n+    @BeforeEach\n@@ -280,1 +278,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -297,1 +295,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -316,1 +314,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -335,1 +333,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -355,1 +353,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/prism\/impl\/PNTMeshVertexBufferLengthTest.java","additions":20,"deletions":22,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -31,1 +30,0 @@\n-\n@@ -48,5 +46,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -91,1 +87,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -97,1 +93,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/prism\/impl\/ps\/ShapeCacheTest.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n-import com.sun.javafx.PlatformUtil;\n-\n-import java.io.File;\n@@ -32,0 +29,3 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import java.io.File;\n@@ -33,3 +33,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assume.assumeTrue;\n-import org.junit.Test;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import com.sun.javafx.PlatformUtil;\n@@ -42,0 +43,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -43,1 +45,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -81,1 +83,1 @@\n-        assertEquals(\"Process did not exit cleanly\", 0, retVal);\n+        assertEquals(0, retVal, \"Process did not exit cleanly\");\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/webkit\/LocalStorageAccessTest.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.io.File;\n@@ -30,0 +29,2 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import java.io.File;\n@@ -31,2 +32,3 @@\n-import static org.junit.Assert.assertEquals;\n-import org.junit.Test;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -39,0 +41,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -40,1 +43,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -74,1 +77,1 @@\n-        assertEquals(\"Process did not exit cleanly\", 0, retVal);\n+        assertEquals(0, retVal, \"Process did not exit cleanly\");\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/webkit\/MainThreadTest.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n-import static org.junit.Assume.assumeTrue;\n-\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -35,1 +34,0 @@\n-\n@@ -49,5 +47,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -55,1 +51,0 @@\n-\n@@ -142,1 +137,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -147,1 +142,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/accessibility\/virtualflow\/VirtualFlowMemoryLeakTest.java","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -34,1 +34,3 @@\n-import org.junit.Test;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -39,0 +41,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -45,1 +48,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/css\/imagecacheleaktest\/ImageCacheLeakTest.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -32,2 +33,1 @@\n-import org.junit.Test;\n-import junit.framework.Assert;\n+import org.junit.jupiter.api.Test;\n@@ -55,1 +55,1 @@\n-            Assert.fail(\"FX image conversion wrong cast \" + cex);\n+            fail(\"FX image conversion wrong cast \" + cex);\n@@ -74,1 +74,1 @@\n-            Assert.fail(\"FX image conversion wrong cast \" + cex);\n+            fail(\"FX image conversion wrong cast \" + cex);\n@@ -93,1 +93,1 @@\n-            Assert.fail(\"FX image conversion wrong cast \" + cex);\n+            fail(\"FX image conversion wrong cast \" + cex);\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/embed\/swing\/FXImageConversionTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,4 @@\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n@@ -31,7 +35,3 @@\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n-import javax.swing.*;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -44,1 +44,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -93,1 +93,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/embed\/swing\/JFXPanelEmbeddedWindowTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-\n@@ -35,1 +34,0 @@\n-\n@@ -42,7 +40,5 @@\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -63,2 +59,2 @@\n-            Assert.assertTrue(Platform.isFxApplicationThread());\n-            Assert.assertNotNull(primaryStage);\n+            Assertions.assertTrue(Platform.isFxApplicationThread());\n+            Assertions.assertNotNull(primaryStage);\n@@ -70,1 +66,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -73,1 +69,1 @@\n-        Assert.assertEquals(0, launchLatch.getCount());\n+        Assertions.assertEquals(0, launchLatch.getCount());\n@@ -76,1 +72,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -81,1 +77,1 @@\n-    @After\n+    @AfterEach\n@@ -135,1 +131,1 @@\n-        Assert.assertTrue(firstPressedEventLatch.await(5000, TimeUnit.MILLISECONDS));\n+        Assertions.assertTrue(firstPressedEventLatch.await(5000, TimeUnit.MILLISECONDS));\n@@ -139,1 +135,1 @@\n-        Assert.assertEquals(1, pressedEventCounter[0]);\n+        Assertions.assertEquals(1, pressedEventCounter[0]);\n@@ -157,1 +153,1 @@\n-        Assert.assertTrue(firstPressedEventLatch.await(5000, TimeUnit.MILLISECONDS));\n+        Assertions.assertTrue(firstPressedEventLatch.await(5000, TimeUnit.MILLISECONDS));\n@@ -182,2 +178,1 @@\n-        Assert.assertTrue(\"Timeout waiting for setScene to complete\",\n-                completionLatch.await(5000, TimeUnit.MILLISECONDS));\n+        Assertions.assertTrue(completionLatch.await(5000, TimeUnit.MILLISECONDS), \"Timeout waiting for setScene to complete\");\n@@ -210,2 +205,1 @@\n-        Assert.assertTrue(\"Timeout waiting for setScene to complete\",\n-                completionLatch.await(5000, TimeUnit.MILLISECONDS));\n+        Assertions.assertTrue(completionLatch.await(5000, TimeUnit.MILLISECONDS), \"Timeout waiting for setScene to complete\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/embed\/swing\/JFXPanelTest.java","additions":17,"deletions":23,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -34,1 +33,0 @@\n-\n@@ -42,5 +40,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -68,1 +64,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -74,1 +70,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/embed\/swing\/SwingFXUtilsTest.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n@@ -41,3 +41,3 @@\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -58,1 +58,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -63,1 +63,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/embed\/swing\/SwingNodeContentMemoryLeakTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -32,0 +31,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -34,1 +34,0 @@\n-\n@@ -37,3 +36,0 @@\n-\n-import java.lang.reflect.InvocationTargetException;\n-\n@@ -45,5 +41,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -60,1 +54,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -65,1 +59,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/embed\/swing\/SwingNodeDnDMemoryLeakTest.java","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -40,3 +40,3 @@\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -56,1 +56,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -61,1 +61,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/embed\/swing\/SwingNodeMemoryLeakTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-\n@@ -39,1 +38,0 @@\n-\n@@ -46,6 +44,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -60,1 +56,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -70,1 +66,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -79,2 +75,2 @@\n-        Assert.assertEquals(2 * request.width, 2 * result.x + result.width);\n-        Assert.assertEquals(2 * request.height, 2 * result.y + result.height);\n+        Assertions.assertEquals(2 * request.width, 2 * result.x + result.width);\n+        Assertions.assertEquals(2 * request.height, 2 * result.y + result.height);\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/embed\/swing\/SwingNodeScaleTest.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n-import static org.junit.Assert.assertTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -32,1 +31,0 @@\n-\n@@ -41,6 +39,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -80,1 +76,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -85,1 +81,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -93,2 +89,2 @@\n-        Assert.assertNull(\"Label1 should have no background\", label1.getBackground());\n-        Assert.assertNull(\"Label2 should have no background\", label2.getBackground());\n+        Assertions.assertNull(label1.getBackground(), \"Label1 should have no background\");\n+        Assertions.assertNull(label2.getBackground(), \"Label2 should have no background\");\n@@ -101,2 +97,1 @@\n-        assertTrue(\"Timeout waiting for Stage to show after hide\",\n-                   startupLatch.await(15, TimeUnit.SECONDS));\n+        assertTrue(startupLatch.await(15, TimeUnit.SECONDS), \"Timeout waiting for Stage to show after hide\");\n@@ -104,2 +99,2 @@\n-        Assert.assertNull(\"Label1 should have no background\", label1.getBackground());\n-        Assert.assertNull(\"Label2 should have no background\", label2.getBackground());\n+        Assertions.assertNull(label1.getBackground(), \"Label1 should have no background\");\n+        Assertions.assertNull(label2.getBackground(), \"Label2 should have no background\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/CssStyleHelperTest.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-\n+import java.util.concurrent.TimeUnit;\n@@ -37,6 +37,5 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -45,0 +44,1 @@\n+@Timeout(value=20000, unit=TimeUnit.MILLISECONDS)\n@@ -65,1 +65,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -70,1 +70,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -75,1 +75,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -78,1 +78,1 @@\n-            Assert.assertNotNull(ImageCursor.getBestSize(10, 20));\n+            Assertions.assertNotNull(ImageCursor.getBestSize(10, 20));\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/ImageCursorGetBestSizeTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-\n@@ -37,5 +36,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -72,1 +69,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -77,1 +74,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/InitialNodesMemoryLeakTest.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-\n@@ -37,6 +36,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n-import junit.framework.Assert;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -79,1 +76,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -84,1 +81,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -112,2 +109,2 @@\n-                    Assert.assertTrue(w[fI] > 1);\n-                    Assert.assertTrue(h[fI] > 1);\n+                    Assertions.assertTrue(w[fI] > 1);\n+                    Assertions.assertTrue(h[fI] > 1);\n@@ -133,4 +130,2 @@\n-            Assert.assertEquals(\"Wrong scene \" + i + \" width\", w[i],\n-                                    childStage[i].getScene().getWidth(), 0.1);\n-            Assert.assertEquals(\"Wrong scene \" + i + \" height\", h[i],\n-                                    childStage[i].getScene().getHeight(), 0.1);\n+            Assertions.assertEquals(w[i], childStage[i].getScene().getWidth(), 0.1, \"Wrong scene \" + i + \" width\");\n+            Assertions.assertEquals(h[i], childStage[i].getScene().getHeight(), 0.1, \"Wrong scene \" + i + \" height\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/NewSceneSizeTest.java","additions":10,"deletions":15,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n-import static org.junit.Assert.assertTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -33,1 +32,0 @@\n-\n@@ -41,5 +39,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -89,1 +85,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -94,1 +90,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -163,1 +159,1 @@\n-        assertTrue(\"Time to add\/remove \" + loopCount + \" nodes in a large Scene is more than 800 mSec (\" + bestMillis.get() + \")\", bestMillis.get() <= 800);\n+        assertTrue(bestMillis.get() <= 800, \"Time to add\/remove \" + loopCount + \" nodes in a large Scene is more than 800 mSec (\" + bestMillis.get() + \")\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/NodeTreeShowingTest.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n-import static org.junit.Assert.assertTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -31,1 +30,0 @@\n-\n@@ -41,5 +39,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -84,1 +80,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -89,1 +85,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -116,1 +112,1 @@\n-            assertTrue(\"Time to add 500 Nodes is more than 800 mSec\", (endTime - startTime) < 800);\n+            assertTrue((endTime - startTime) < 800, \"Time to add 500 Nodes is more than 800 mSec\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/QuadraticCssTimeTest.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -27,2 +27,1 @@\n-import static org.junit.Assume.assumeTrue;\n-\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -31,1 +30,0 @@\n-\n@@ -39,6 +37,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +42,0 @@\n-\n@@ -86,1 +81,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -91,1 +86,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -104,2 +99,2 @@\n-        Assert.assertTrue(stage.isShowing());\n-        Assert.assertTrue(stage.isFullScreen());\n+        Assertions.assertTrue(stage.isShowing());\n+        Assertions.assertTrue(stage.isFullScreen());\n@@ -123,1 +118,1 @@\n-        Assert.assertFalse(stage.isFullScreen());\n+        Assertions.assertFalse(stage.isFullScreen());\n@@ -127,2 +122,2 @@\n-        Assert.assertEquals(\"Scene got wrong width\", w, stage.getScene().getWidth(), 0.1);\n-        Assert.assertEquals(\"Scene got wrong height\", h, stage.getScene().getHeight(), 0.1);\n+        Assertions.assertEquals(w, stage.getScene().getWidth(), 0.1, \"Scene got wrong width\");\n+        Assertions.assertEquals(h, stage.getScene().getHeight(), 0.1, \"Scene got wrong height\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/RestoreSceneSizeTest.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,7 @@\n-import java.util.concurrent.TimeUnit;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.util.Util.TIMEOUT;\n@@ -30,1 +36,1 @@\n-import javafx.scene.paint.Color;\n+import java.util.concurrent.TimeUnit;\n@@ -37,0 +43,1 @@\n+import javafx.scene.paint.Color;\n@@ -39,6 +46,5 @@\n-import junit.framework.AssertionFailedError;\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -47,3 +53,0 @@\n-import static org.junit.Assert.*;\n-import static test.util.Util.TIMEOUT;\n-\n@@ -61,1 +64,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -66,1 +69,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -75,1 +78,1 @@\n-    @Before\n+    @BeforeEach\n@@ -82,1 +85,1 @@\n-    @After\n+    @AfterEach\n@@ -113,1 +116,1 @@\n-    @Test (expected=IllegalStateException.class)\n+    @Test\n@@ -115,1 +118,2 @@\n-        assertFalse(Platform.isFxApplicationThread());\n+        assertThrows(IllegalStateException.class, () -> {\n+            assertFalse(Platform.isFxApplicationThread());\n@@ -117,1 +121,1 @@\n-        Util.runAndWait(() -> tmpScene = new Scene(new Group(), 200, 100));\n+            Util.runAndWait(() -> tmpScene = new Scene(new Group(), 200, 100));\n@@ -119,2 +123,3 @@\n-        \/\/ Should throw IllegalStateException\n-        tmpScene.snapshot(null);\n+            \/\/ Should throw IllegalStateException\n+            tmpScene.snapshot(null);\n+        });\n@@ -125,1 +130,1 @@\n-    @Test (expected=IllegalStateException.class)\n+    @Test\n@@ -127,1 +132,2 @@\n-        assertFalse(Platform.isFxApplicationThread());\n+        assertThrows(IllegalStateException.class, () -> {\n+            assertFalse(Platform.isFxApplicationThread());\n@@ -129,1 +135,1 @@\n-        Util.runAndWait(() -> tmpScene = new Scene(new Group(), 200, 100));\n+            Util.runAndWait(() -> tmpScene = new Scene(new Group(), 200, 100));\n@@ -131,4 +137,5 @@\n-        \/\/ Should throw IllegalStateException\n-        tmpScene.snapshot(p -> {\n-            throw new AssertionFailedError(\"Should never get here\");\n-        }, null);\n+            \/\/ Should throw IllegalStateException\n+            tmpScene.snapshot(p -> {\n+                throw new RuntimeException(\"Should never get here\");\n+            }, null);\n+        });\n@@ -139,1 +146,1 @@\n-    @Test (expected=IllegalStateException.class)\n+    @Test\n@@ -141,1 +148,2 @@\n-        assertFalse(Platform.isFxApplicationThread());\n+        assertThrows(IllegalStateException.class, () -> {\n+            assertFalse(Platform.isFxApplicationThread());\n@@ -143,1 +151,1 @@\n-        tmpNode = new Rectangle(10, 10);\n+            tmpNode = new Rectangle(10, 10);\n@@ -145,2 +153,3 @@\n-        \/\/ Should throw IllegalStateException\n-        tmpNode.snapshot(null, null);\n+            \/\/ Should throw IllegalStateException\n+            tmpNode.snapshot(null, null);\n+        });\n@@ -151,1 +160,1 @@\n-    @Test (expected=IllegalStateException.class)\n+    @Test\n@@ -153,1 +162,2 @@\n-        assertFalse(Platform.isFxApplicationThread());\n+        assertThrows(IllegalStateException.class, () -> {\n+            assertFalse(Platform.isFxApplicationThread());\n@@ -155,1 +165,1 @@\n-        tmpNode = new Rectangle(10, 10);\n+            tmpNode = new Rectangle(10, 10);\n@@ -157,4 +167,5 @@\n-        \/\/ Should throw IllegalStateException\n-        tmpNode.snapshot(p -> {\n-            throw new AssertionFailedError(\"Should never get here\");\n-        }, null, null);\n+            \/\/ Should throw IllegalStateException\n+            tmpNode.snapshot(p -> {\n+                throw new RuntimeException(\"Should never get here\");\n+            }, null, null);\n+        });\n@@ -195,1 +206,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for snapshot callback\");\n+                fail(\"Timeout waiting for snapshot callback\");\n@@ -198,3 +209,1 @@\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n+            fail(ex);\n@@ -235,1 +244,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for snapshot callback\");\n+                fail(\"Timeout waiting for snapshot callback\");\n@@ -238,3 +247,1 @@\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n+            fail(ex);\n@@ -258,1 +265,1 @@\n-                throw new AssertionFailedError(\"Should never get here\");\n+                throw new RuntimeException(\"Should never get here\");\n@@ -269,1 +276,1 @@\n-                throw new AssertionFailedError(\"Snapshot callback unexpectedly called\");\n+                fail(\"Snapshot callback unexpectedly called\");\n@@ -272,3 +279,1 @@\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n+            fail(ex);\n@@ -281,1 +286,1 @@\n-    @Test (expected=NullPointerException.class)\n+    @Test\n@@ -283,3 +288,5 @@\n-        Util.runAndWait(() -> {\n-            tmpScene = new Scene(new Group(), 200, 100);\n-            tmpScene.snapshot(null, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Util.runAndWait(() -> {\n+                tmpScene = new Scene(new Group(), 200, 100);\n+                tmpScene.snapshot(null, null);\n+            });\n@@ -321,1 +328,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for snapshot callback\");\n+                fail(\"Timeout waiting for snapshot callback\");\n@@ -324,3 +331,1 @@\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n+            fail(ex);\n@@ -361,1 +366,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for snapshot callback\");\n+                fail(\"Timeout waiting for snapshot callback\");\n@@ -364,3 +369,1 @@\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n+            fail(ex);\n@@ -384,1 +387,1 @@\n-                throw new AssertionFailedError(\"Should never get here\");\n+                throw new RuntimeException(\"Should never get here\");\n@@ -395,1 +398,1 @@\n-                throw new AssertionFailedError(\"Snapshot callback unexpectedly called\");\n+                fail(\"Snapshot callback unexpectedly called\");\n@@ -398,3 +401,1 @@\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n+            fail(ex);\n@@ -407,1 +408,1 @@\n-    @Test (expected=NullPointerException.class)\n+    @Test\n@@ -409,3 +410,5 @@\n-        Util.runAndWait(() -> {\n-            tmpNode = new Rectangle(10, 10);\n-            tmpNode.snapshot(null, null, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Util.runAndWait(() -> {\n+                tmpNode = new Rectangle(10, 10);\n+                tmpNode.snapshot(null, null, null);\n+            });\n@@ -417,1 +420,1 @@\n-    @Test (expected=IllegalArgumentException.class)\n+    @Test\n@@ -419,1 +422,3 @@\n-        WritableImage wimg = new WritableImage(0, 0);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            WritableImage wimg = new WritableImage(0, 0);\n+        });\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/Snapshot1Test.java","additions":81,"deletions":76,"binary":false,"changes":157,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,6 @@\n-import java.util.ArrayList;\n-import java.util.Collection;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.util.stream.Stream;\n@@ -45,8 +48,6 @@\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -55,2 +56,0 @@\n-import static org.junit.Assert.*;\n-\n@@ -60,2 +59,1 @@\n-@RunWith(Parameterized.class)\n-public class Snapshot2Test extends SnapshotCommon {\n+public final class Snapshot2Test extends SnapshotCommon {\n@@ -63,1 +61,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -68,1 +66,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -73,7 +71,0 @@\n-    \/\/ Flag indicating snapshot should be taken on a live scene, that is a\n-    \/\/ scene attached to the primary stage\n-    private final boolean live;\n-\n-    \/\/ Flag indicating to use an existing image\n-    private final boolean useImage;\n-\n@@ -85,25 +76,16 @@\n-    private static Collection params = null;\n-\n-    private static final Object[] pLive = { Boolean.FALSE, Boolean.TRUE };\n-    private static final Object[] pUseImage = { Boolean.FALSE, Boolean.TRUE };\n-\n-    @Parameters\n-    public static Collection getParams() {\n-        if (params == null) {\n-            params = new ArrayList();\n-            for (Object o0 : pLive) {\n-                for (Object o1 : pUseImage) {\n-                    params.add(new Object[] { o0, o1 });\n-                }\n-            }\n-        }\n-        return params;\n-    }\n-\n-    public Snapshot2Test(Boolean live, Boolean useImage) {\n-        this.live = live;\n-        this.useImage = useImage;\n-    }\n-\n-    @Before\n-    public void setupEach() {\n+    private static Stream<Arguments> parameters() {\n+        return Stream.of(\n+            Arguments.of(false, false),\n+            Arguments.of(false, true),\n+            Arguments.of(true, false),\n+            Arguments.of(true, true)\n+        );\n+    }\n+\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    \/**\n+     * @param live Flag indicating snapshot should be taken on a live scene, that is a scene attached to the primary stage\n+     * @param useImage Flag indicating to use an existing image\n+     *\/\n+    public void setupEach(boolean live, boolean useImage) {\n@@ -115,1 +97,1 @@\n-    @After\n+    @AfterEach\n@@ -126,1 +108,1 @@\n-    private void setupEmptyScene() {\n+    private void setupEmptyScene(boolean live) {\n@@ -141,3 +123,5 @@\n-    @Test\n-    public void testSnapshotEmptySceneImm() {\n-        setupEmptyScene();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotEmptySceneImm(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        setupEmptyScene(live);\n@@ -158,3 +142,5 @@\n-    @Test\n-    public void testSnapshotEmptySceneDefer() {\n-        setupEmptyScene();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotEmptySceneDefer(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        setupEmptyScene(live);\n@@ -177,2 +163,2 @@\n-    private void doTestSnapshotEmptyNodeImm(final SnapshotParameters snapshotParams) {\n-        setupEmptyScene();\n+    private void doTestSnapshotEmptyNodeImm(boolean live, boolean useImage, final SnapshotParameters snapshotParams) {\n+        setupEmptyScene(live);\n@@ -192,3 +178,5 @@\n-    @Test\n-    public void testSnapshotEmptyNodeImmNoParams() {\n-        doTestSnapshotEmptyNodeDefer(null);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotEmptyNodeImmNoParams(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestSnapshotEmptyNodeDefer(live, useImage, null);\n@@ -197,3 +185,5 @@\n-    @Test\n-    public void testSnapshotEmptyNodeImm() {\n-        doTestSnapshotEmptyNodeDefer(new SnapshotParameters());\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotEmptyNodeImm(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestSnapshotEmptyNodeDefer(live, useImage, new SnapshotParameters());\n@@ -202,2 +192,2 @@\n-    private void doTestSnapshotEmptyNodeDefer(final SnapshotParameters snapshotParams) {\n-        setupEmptyScene();\n+    private void doTestSnapshotEmptyNodeDefer(boolean live, boolean useImage, final SnapshotParameters snapshotParams) {\n+        setupEmptyScene(live);\n@@ -220,3 +210,5 @@\n-    @Test\n-    public void testSnapshotEmptyNodeDeferNoParams() {\n-        doTestSnapshotEmptyNodeImm(null);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotEmptyNodeDeferNoParams(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestSnapshotEmptyNodeImm(live, useImage, null);\n@@ -225,3 +217,5 @@\n-    @Test\n-    public void testSnapshotEmptyNodeDefer() {\n-        doTestSnapshotEmptyNodeImm(new SnapshotParameters());\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotEmptyNodeDefer(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestSnapshotEmptyNodeImm(live, useImage, new SnapshotParameters());\n@@ -235,1 +229,1 @@\n-    private void setupSimpleScene() {\n+    private void setupSimpleScene(boolean live) {\n@@ -251,1 +245,1 @@\n-    private void setupImageScene(int width, int height) {\n+    private void setupImageScene(boolean live, int width, int height) {\n@@ -291,3 +285,5 @@\n-    @Test\n-    public void testSnapshotSimpleSceneImm() {\n-        setupSimpleScene();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotSimpleSceneImm(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        setupSimpleScene(live);\n@@ -308,3 +304,5 @@\n-    @Test\n-    public void testSnapshotSimpleSceneDefer() {\n-        setupSimpleScene();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotSimpleSceneDefer(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        setupSimpleScene(live);\n@@ -328,3 +326,5 @@\n-    @Test\n-    public void testSnapshotSimpleNodeImm() {\n-        setupSimpleScene();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotSimpleNodeImm(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        setupSimpleScene(live);\n@@ -345,3 +345,5 @@\n-    @Test\n-    public void testSnapshotSimpleNodeDefer() {\n-        setupSimpleScene();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotSimpleNodeDefer(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        setupSimpleScene(live);\n@@ -367,2 +369,2 @@\n-    private void doTestTiledSnapshotImm(int w, int h) {\n-        setupImageScene(w, h);\n+    private void doTestTiledSnapshotImm(boolean live, boolean useImage, int w, int h) {\n+        setupImageScene(live, w, h);\n@@ -382,2 +384,2 @@\n-    private void doTestTiledSnapshotDefer(int w, int h) {\n-        setupImageScene(w, h);\n+    private void doTestTiledSnapshotDefer(boolean live, boolean useImage, int w, int h) {\n+        setupImageScene(live, w, h);\n@@ -426,3 +428,5 @@\n-    @Test\n-    public void testSnapshot2x1TilesSameSizeImm() {\n-        doTestTiledSnapshotImm(4100, 10);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshot2x1TilesSameSizeImm(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestTiledSnapshotImm(live, useImage, 4100, 10);\n@@ -431,3 +435,5 @@\n-    @Test\n-    public void testSnapshot2x1TilesDifferentSizeImm() {\n-        doTestTiledSnapshotImm(4099, 10);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshot2x1TilesDifferentSizeImm(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestTiledSnapshotImm(live, useImage, 4099, 10);\n@@ -436,3 +442,5 @@\n-    @Test\n-    public void testSnapshot1x2TilesSameSizeImm() {\n-        doTestTiledSnapshotImm(10, 4100);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshot1x2TilesSameSizeImm(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestTiledSnapshotImm(live, useImage, 10, 4100);\n@@ -441,3 +449,5 @@\n-    @Test\n-    public void testSnapshot1x2TilesDifferentSizeImm() {\n-        doTestTiledSnapshotImm(10, 4099);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshot1x2TilesDifferentSizeImm(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestTiledSnapshotImm(live, useImage, 10, 4099);\n@@ -446,3 +456,5 @@\n-    @Test\n-    public void testSnapshot2x2TilesSameSizeImm() {\n-        doTestTiledSnapshotImm(4100, 4100);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshot2x2TilesSameSizeImm(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestTiledSnapshotImm(live, useImage, 4100, 4100);\n@@ -451,3 +463,5 @@\n-    @Test\n-    public void testSnapshot2x2TilesDifferentSizeImm() {\n-        doTestTiledSnapshotImm(4099, 4099);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshot2x2TilesDifferentSizeImm(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestTiledSnapshotImm(live, useImage, 4099, 4099);\n@@ -456,3 +470,5 @@\n-    @Test\n-    public void testSnapshot2x2TilesSameHeightImm() {\n-        doTestTiledSnapshotImm(4099, 4100);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshot2x2TilesSameHeightImm(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestTiledSnapshotImm(live, useImage, 4099, 4100);\n@@ -461,3 +477,5 @@\n-    @Test\n-    public void testSnapshot2x2TilesSameWidthImm() {\n-        doTestTiledSnapshotImm(4100, 4099);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshot2x2TilesSameWidthImm(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestTiledSnapshotImm(live, useImage, 4100, 4099);\n@@ -466,3 +484,5 @@\n-    @Test\n-    public void testSnapshot2x1TilesSameSizeDefer() {\n-        doTestTiledSnapshotDefer(4100, 10);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshot2x1TilesSameSizeDefer(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestTiledSnapshotDefer(live, useImage, 4100, 10);\n@@ -471,3 +491,5 @@\n-    @Test\n-    public void testSnapshot2x1TilesDifferentSizeDefer() {\n-        doTestTiledSnapshotDefer(4099, 10);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshot2x1TilesDifferentSizeDefer(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestTiledSnapshotDefer(live, useImage, 4099, 10);\n@@ -476,3 +498,5 @@\n-    @Test\n-    public void testSnapshot1x2TilesSameSizeDefer() {\n-        doTestTiledSnapshotDefer(10, 4100);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshot1x2TilesSameSizeDefer(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestTiledSnapshotDefer(live, useImage, 10, 4100);\n@@ -481,3 +505,5 @@\n-    @Test\n-    public void testSnapshot1x2TilesDifferentSizeDefer() {\n-        doTestTiledSnapshotDefer(10, 4099);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshot1x2TilesDifferentSizeDefer(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestTiledSnapshotDefer(live, useImage, 10, 4099);\n@@ -486,3 +512,5 @@\n-    @Test\n-    public void testSnapshot2x2TilesSameSizeDefer() {\n-        doTestTiledSnapshotDefer(4100, 4100);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshot2x2TilesSameSizeDefer(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestTiledSnapshotDefer(live, useImage, 4100, 4100);\n@@ -491,3 +519,5 @@\n-    @Test\n-    public void testSnapshot2x2TilesDifferentSizeDefer() {\n-        doTestTiledSnapshotDefer(4099, 4099);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshot2x2TilesDifferentSizeDefer(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestTiledSnapshotDefer(live, useImage, 4099, 4099);\n@@ -496,3 +526,5 @@\n-    @Test\n-    public void testSnapshot2x2TilesSameHeightDefer() {\n-        doTestTiledSnapshotDefer(4099, 4100);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshot2x2TilesSameHeightDefer(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestTiledSnapshotDefer(live, useImage, 4099, 4100);\n@@ -501,3 +533,5 @@\n-    @Test\n-    public void testSnapshot2x2TilesSameWidthDefer() {\n-        doTestTiledSnapshotDefer(4100, 4099);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshot2x2TilesSameWidthDefer(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestTiledSnapshotDefer(live, useImage, 4100, 4099);\n@@ -508,2 +542,2 @@\n-    private void doTestSnapshotScaleNodeImm(int xScale, int yScale) {\n-        setupSimpleScene();\n+    private void doTestSnapshotScaleNodeImm(boolean live, boolean useImage, int xScale, int yScale) {\n+        setupSimpleScene(live);\n@@ -527,2 +561,2 @@\n-    private void doTestSnapshotScaleNodeDefer(int xScale, int yScale) {\n-        setupSimpleScene();\n+    private void doTestSnapshotScaleNodeDefer(boolean live, boolean useImage, int xScale, int yScale) {\n+        setupSimpleScene(live);\n@@ -549,3 +583,5 @@\n-    @Test\n-    public void testSnapshotScaleNodeImm() {\n-        doTestSnapshotScaleNodeImm(3, 3);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotScaleNodeImm(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestSnapshotScaleNodeImm(live, useImage, 3, 3);\n@@ -554,3 +590,5 @@\n-    @Test\n-    public void testSnapshotScaleNodeDefer() {\n-        doTestSnapshotScaleNodeDefer(3, 3);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotScaleNodeDefer(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestSnapshotScaleNodeDefer(live, useImage, 3, 3);\n@@ -559,3 +597,5 @@\n-    @Test\n-    public void testSnapshotBigXScaleNodeImm() {\n-        doTestSnapshotScaleNodeImm(100, 1);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotBigXScaleNodeImm(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestSnapshotScaleNodeImm(live, useImage, 100, 1);\n@@ -564,3 +604,5 @@\n-    @Test\n-    public void testSnapshotBigXScaleNodeDefer() {\n-        doTestSnapshotScaleNodeDefer(100, 1);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotBigXScaleNodeDefer(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestSnapshotScaleNodeDefer(live, useImage, 100, 1);\n@@ -569,3 +611,5 @@\n-    @Test\n-    public void testSnapshotBigYScaleNodeImm() {\n-        doTestSnapshotScaleNodeImm(1, 200);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotBigYScaleNodeImm(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestSnapshotScaleNodeImm(live, useImage, 1, 200);\n@@ -574,3 +618,5 @@\n-    @Test\n-    public void testSnapshotBigYScaleNodeDefer() {\n-        doTestSnapshotScaleNodeDefer(1, 200);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotBigYScaleNodeDefer(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        doTestSnapshotScaleNodeDefer(live, useImage, 1, 200);\n@@ -581,3 +627,5 @@\n-    @Test\n-    public void testSnapshotRotateNodeImm() {\n-        setupSimpleScene();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotRotateNodeImm(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        setupSimpleScene(live);\n@@ -602,3 +650,5 @@\n-    @Test\n-    public void testSnapshotRotateNodeDefer() {\n-        setupSimpleScene();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotRotateNodeDefer(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        setupSimpleScene(live);\n@@ -632,3 +682,5 @@\n-    @Test\n-    public void testSnapshotViewportNodeImm() {\n-        setupSimpleScene();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotViewportNodeImm(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        setupSimpleScene(live);\n@@ -652,3 +704,5 @@\n-    @Test\n-    public void testSnapshotViewportNodeDefer() {\n-        setupSimpleScene();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotViewportNodeDefer(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        setupSimpleScene(live);\n@@ -682,3 +736,5 @@\n-    @Test\n-    public void testSnapshotUpdateNodeDefer() {\n-        setupSimpleScene();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshotUpdateNodeDefer(boolean live, boolean useImage) {\n+        setupEach(live, useImage);\n+        setupSimpleScene(live);\n@@ -711,1 +767,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/Snapshot2Test.java","additions":233,"deletions":178,"binary":false,"changes":411,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -32,1 +33,0 @@\n-\n@@ -35,1 +35,0 @@\n-\n@@ -48,2 +47,0 @@\n-\n-import junit.framework.AssertionFailedError;\n@@ -149,1 +146,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for snapshot callback\");\n+                fail(\"Timeout waiting for snapshot callback\");\n@@ -152,3 +149,1 @@\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n+            fail(ex);\n@@ -158,9 +153,1 @@\n-            if (testError[0] instanceof Error) {\n-                throw (Error)testError[0];\n-            } else if (testError[0] instanceof RuntimeException) {\n-                throw (RuntimeException)testError[0];\n-            } else {\n-                AssertionFailedError err = new AssertionFailedError(\"Unknown execution exception\");\n-                err.initCause(testError[0].getCause());\n-                throw err;\n-            }\n+            fail(testError[0]);\n@@ -201,1 +188,1 @@\n-                throw new AssertionFailedError(\"Timeout waiting for snapshot callback\");\n+                fail(\"Timeout waiting for snapshot callback\");\n@@ -204,3 +191,1 @@\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            err.initCause(ex);\n-            throw err;\n+            fail(ex);\n@@ -210,9 +195,1 @@\n-            if (testError[0] instanceof Error) {\n-                throw (Error)testError[0];\n-            } else if (testError[0] instanceof RuntimeException) {\n-                throw (RuntimeException)testError[0];\n-            } else {\n-                AssertionFailedError err = new AssertionFailedError(\"Unknown execution exception\");\n-                err.initCause(testError[0].getCause());\n-                throw err;\n-            }\n+            fail(testError[0]);\n@@ -221,1 +198,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/SnapshotCommon.java","additions":11,"deletions":35,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import static org.junit.Assert.assertTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -33,1 +32,0 @@\n-\n@@ -39,5 +37,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -50,1 +46,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -60,1 +56,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -84,1 +80,1 @@\n-                assertTrue(\"Timeout waiting test stage\", showingLatch.await(15, TimeUnit.SECONDS));\n+                assertTrue(showingLatch.await(15, TimeUnit.SECONDS), \"Timeout waiting test stage\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/StyleMemoryLeakTest.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -27,3 +27,2 @@\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assume.assumeTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -31,1 +30,0 @@\n-\n@@ -47,5 +45,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -53,2 +50,0 @@\n-\n-import junit.framework.Assert;\n@@ -98,1 +93,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -106,1 +101,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -120,4 +115,2 @@\n-        Assert.assertEquals(\"Wrong render scale\", scale,\n-                stage.getRenderScaleY(), 0.0001);\n-\n-        Assert.assertNotNull(alert);\n+        Assertions.assertEquals(scale, stage.getRenderScaleY(), 0.0001, \"Wrong render scale\");\n+        Assertions.assertNotNull(alert);\n@@ -128,1 +121,1 @@\n-            Assert.assertEquals(\"Wrong text\", \"Check\", ((Text) box.lookup(\".text\")).getText());\n+            Assertions.assertEquals(\"Check\", ((Text) box.lookup(\".text\")).getText(), \"Wrong text\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/UIRenderDialogTest.java","additions":11,"deletions":18,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -27,2 +27,1 @@\n-import static org.junit.Assume.assumeTrue;\n-\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -30,1 +29,0 @@\n-\n@@ -42,6 +40,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -49,1 +45,0 @@\n-\n@@ -78,1 +73,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -86,1 +81,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -95,2 +90,1 @@\n-        Assert.assertEquals(\"Wrong render scale\", scale,\n-                stage.getRenderScaleY(), 0.0001);\n+        Assertions.assertEquals(scale, stage.getRenderScaleY(), 0.0001, \"Wrong render scale\");\n@@ -100,1 +94,1 @@\n-            Assert.assertEquals(\"Wrong text\", \"Check\", ((Text) box.lookup(\".text\")).getText());\n+            Assertions.assertEquals(\"Check\", ((Text) box.lookup(\".text\")).getText(), \"Wrong text\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/UIRenderSceneTest.java","additions":9,"deletions":15,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n-import static org.junit.Assume.assumeTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -30,1 +30,0 @@\n-\n@@ -40,5 +39,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -46,2 +43,0 @@\n-\n-import junit.framework.Assert;\n@@ -56,1 +51,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -64,1 +59,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -73,1 +68,1 @@\n-        Assert.assertEquals(\"Wrong render scale\", scale, stage.getRenderScaleY(), 0.0001);\n+        assertEquals(scale, stage.getRenderScaleY(), 0.0001, \"Wrong render scale\");\n@@ -78,4 +73,4 @@\n-                Assert.assertEquals(\"Top inset not snapped to pixel\", 0, ((sp.snappedTopInset() * scale) + epsilon) % 1, 0.0001);\n-                Assert.assertEquals(\"Bottom inset not snapped to pixel\", 0, ((sp.snappedBottomInset() * scale) + epsilon) % 1, 0.0001);\n-                Assert.assertEquals(\"Left inset not snapped to pixel\", 0, ((sp.snappedLeftInset() * scale) + epsilon) % 1, 0.0001);\n-                Assert.assertEquals(\"Right inset not snapped to pixel\", 0, ((sp.snappedRightInset() * scale) + epsilon) % 1, 0.0001);\n+                assertEquals(0, ((sp.snappedTopInset() * scale) + epsilon) % 1, 0.0001, \"Top inset not snapped to pixel\");\n+                assertEquals(0, ((sp.snappedBottomInset() * scale) + epsilon) % 1, 0.0001, \"Bottom inset not snapped to pixel\");\n+                assertEquals(0, ((sp.snappedLeftInset() * scale) + epsilon) % 1, 0.0001, \"Left inset not snapped to pixel\");\n+                assertEquals(0, ((sp.snappedRightInset() * scale) + epsilon) % 1, 0.0001, \"Right inset not snapped to pixel\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/UIRenderSnapToPixelTest.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -37,3 +37,3 @@\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -66,1 +66,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -72,1 +72,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/control\/AccordionTitlePaneLeakTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-\n@@ -39,6 +38,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -76,1 +73,1 @@\n-        Assert.assertEquals(\"No error should be thrown\", \"\", out.toString());\n+        Assertions.assertEquals(\"\", out.toString(), \"No error should be thrown\");\n@@ -93,1 +90,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -98,1 +95,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/control\/MenuButtonSkinBaseNPETest.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import static org.junit.Assert.assertTrue;\n-\n@@ -33,1 +31,0 @@\n-\n@@ -41,6 +38,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -52,1 +47,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -59,1 +54,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -75,1 +70,1 @@\n-                Assert.assertEquals(\"size is wrong\", 1, indicator.getChildrenUnmodifiable().size());\n+                Assertions.assertEquals(1, indicator.getChildrenUnmodifiable().size(), \"size is wrong\");\n@@ -86,1 +81,1 @@\n-                Assert.assertTrue(\"Timeout waiting for setOnShown\", showingLatch.await(15, TimeUnit.SECONDS));\n+                Assertions.assertTrue(showingLatch.await(15, TimeUnit.SECONDS), \"Timeout waiting for setOnShown\");\n@@ -112,1 +107,1 @@\n-                assertTrue(\"Timeout waiting test stage\", showingLatch.await(15, TimeUnit.SECONDS));\n+                Assertions.assertTrue(showingLatch.await(15, TimeUnit.SECONDS), \"Timeout waiting test stage\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/control\/ProgressIndicatorLeakTest.java","additions":10,"deletions":15,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-\n@@ -39,5 +38,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -79,1 +76,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -84,1 +81,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/control\/TabPaneHeaderLeakTest.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -45,6 +45,6 @@\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -90,1 +90,1 @@\n-        Assert.assertEquals(1, lineChart.getData().size());\n+        Assertions.assertEquals(1, lineChart.getData().size());\n@@ -96,1 +96,1 @@\n-        Assert.assertEquals(1, lineChart.getData().size());\n+        Assertions.assertEquals(1, lineChart.getData().size());\n@@ -104,1 +104,1 @@\n-            Assert.assertEquals(0, lineChart.getData().size());\n+            Assertions.assertEquals(0, lineChart.getData().size());\n@@ -112,1 +112,1 @@\n-        Assert.assertEquals(1, areaChart.getData().size());\n+        Assertions.assertEquals(1, areaChart.getData().size());\n@@ -118,1 +118,1 @@\n-        Assert.assertEquals(1, areaChart.getData().size());\n+        Assertions.assertEquals(1, areaChart.getData().size());\n@@ -126,1 +126,1 @@\n-            Assert.assertEquals(0, areaChart.getData().size());\n+            Assertions.assertEquals(0, areaChart.getData().size());\n@@ -133,1 +133,1 @@\n-        Assert.assertEquals(1, bubbleChart.getData().size());\n+        Assertions.assertEquals(1, bubbleChart.getData().size());\n@@ -139,1 +139,1 @@\n-        Assert.assertEquals(1, bubbleChart.getData().size());\n+        Assertions.assertEquals(1, bubbleChart.getData().size());\n@@ -147,1 +147,1 @@\n-            Assert.assertEquals(0, bubbleChart.getData().size());\n+            Assertions.assertEquals(0, bubbleChart.getData().size());\n@@ -154,1 +154,1 @@\n-        Assert.assertEquals(1, scatterChart.getData().size());\n+        Assertions.assertEquals(1, scatterChart.getData().size());\n@@ -160,1 +160,1 @@\n-        Assert.assertEquals(1, scatterChart.getData().size());\n+        Assertions.assertEquals(1, scatterChart.getData().size());\n@@ -168,1 +168,1 @@\n-            Assert.assertEquals(0, scatterChart.getData().size());\n+            Assertions.assertEquals(0, scatterChart.getData().size());\n@@ -175,1 +175,1 @@\n-        Assert.assertEquals(1, stackedAreaChart.getData().size());\n+        Assertions.assertEquals(1, stackedAreaChart.getData().size());\n@@ -181,1 +181,1 @@\n-        Assert.assertEquals(1, stackedAreaChart.getData().size());\n+        Assertions.assertEquals(1, stackedAreaChart.getData().size());\n@@ -189,1 +189,1 @@\n-            Assert.assertEquals(0, stackedAreaChart.getData().size());\n+            Assertions.assertEquals(0, stackedAreaChart.getData().size());\n@@ -196,1 +196,1 @@\n-        Assert.assertEquals(1, stackedBarChart.getData().size());\n+        Assertions.assertEquals(1, stackedBarChart.getData().size());\n@@ -202,1 +202,1 @@\n-        Assert.assertEquals(1, stackedBarChart.getData().size());\n+        Assertions.assertEquals(1, stackedBarChart.getData().size());\n@@ -210,1 +210,1 @@\n-            Assert.assertEquals(0, stackedBarChart.getData().size());\n+            Assertions.assertEquals(0, stackedBarChart.getData().size());\n@@ -215,1 +215,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -220,1 +220,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -225,1 +225,1 @@\n-    @Before\n+    @BeforeEach\n@@ -238,1 +238,1 @@\n-    @After\n+    @AfterEach\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/control\/XYChartExceptionOnAddingRemovedSeriesTest.java","additions":28,"deletions":28,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-\n@@ -48,7 +47,5 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -86,1 +83,1 @@\n-    @Before\n+    @BeforeEach\n@@ -124,1 +121,1 @@\n-        Assert.assertEquals(\"No error should be thrown\", \"\", out.toString());\n+        Assertions.assertEquals(\"\", out.toString(), \"No error should be thrown\");\n@@ -153,1 +150,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -158,1 +155,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/image\/WritableImageFromBufferTest.java","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,4 +27,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assume.assumeTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -37,1 +36,0 @@\n-\n@@ -41,5 +39,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -47,1 +43,0 @@\n-\n@@ -71,1 +66,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -79,1 +74,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/input\/ClipboardTest.java","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assume.assumeTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -32,1 +31,0 @@\n-\n@@ -38,5 +36,3 @@\n-\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -55,1 +51,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -63,1 +59,1 @@\n-    @Before\n+    @BeforeEach\n@@ -74,1 +70,1 @@\n-                assertEquals(FAIL_MESSAGE, dotProduct(direction), sampledBlue, DELTA);\n+                assertEquals(dotProduct(direction), sampledBlue, DELTA, FAIL_MESSAGE);\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/lighting3D\/DirectionalLightTest.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-\n@@ -39,3 +38,1 @@\n-\n-import org.junit.AfterClass;\n-\n+import org.junit.jupiter.api.AfterAll;\n@@ -96,1 +93,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/lighting3D\/LightingTest.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assume.assumeTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -32,1 +31,0 @@\n-\n@@ -37,5 +35,3 @@\n-\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -58,1 +54,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -66,1 +62,1 @@\n-    @Before\n+    @BeforeEach\n@@ -81,1 +77,1 @@\n-                assertEquals(FAIL_MESSAGE + \" for \" + x, calculateLambertTerm(x), sampledBlue, DELTA);\n+                assertEquals(calculateLambertTerm(x), sampledBlue, DELTA, FAIL_MESSAGE + \" for \" + x);\n@@ -107,1 +103,1 @@\n-        assertEquals(FAIL_MESSAGE, lambertCenter * attn, sampledBlue, DELTA);\n+        assertEquals(lambertCenter * attn, sampledBlue, DELTA, FAIL_MESSAGE);\n@@ -111,1 +107,1 @@\n-        assertEquals(FAIL_MESSAGE, lambertSample * attn, sampledBlue, DELTA);\n+        assertEquals(lambertSample * attn, sampledBlue, DELTA, FAIL_MESSAGE);\n@@ -122,1 +118,1 @@\n-            assertEquals(FAIL_MESSAGE + \", should be in range\", 1, sampledBlue, DELTA);\n+            assertEquals(1, sampledBlue, DELTA, FAIL_MESSAGE + \", should be in range\");\n@@ -125,1 +121,1 @@\n-            assertEquals(FAIL_MESSAGE + \", should be out of range\", 0, sampledBlue, DELTA);\n+            assertEquals(0, sampledBlue, DELTA, FAIL_MESSAGE + \", should be out of range\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/lighting3D\/PointLightAttenuationTest.java","additions":13,"deletions":17,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assume.assumeTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -32,1 +31,0 @@\n-\n@@ -37,5 +35,3 @@\n-\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -61,1 +57,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -69,1 +65,1 @@\n-    @Before\n+    @BeforeEach\n@@ -86,1 +82,1 @@\n-                assertEquals(FAIL_MESSAGE, calculateLambertTerm(innerX) * spotFactor, sampledBlue, DELTA);\n+                assertEquals(calculateLambertTerm(innerX) * spotFactor, sampledBlue, DELTA, FAIL_MESSAGE);\n@@ -91,1 +87,1 @@\n-                assertEquals(FAIL_MESSAGE, calculateLambertTerm(middleX) * spotFactor, sampledBlue, DELTA);\n+                assertEquals(calculateLambertTerm(middleX) * spotFactor, sampledBlue, DELTA, FAIL_MESSAGE);\n@@ -96,1 +92,1 @@\n-                assertEquals(FAIL_MESSAGE, calculateLambertTerm(outerX) * spotFactor, sampledBlue, DELTA);\n+                assertEquals(calculateLambertTerm(outerX) * spotFactor, sampledBlue, DELTA, FAIL_MESSAGE);\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/lighting3D\/SpotLightAttenuationTest.java","additions":11,"deletions":15,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-\n@@ -40,5 +39,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -80,1 +77,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -85,1 +82,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/shape\/ShapeViewOrderLeakTest.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import static org.junit.Assert.fail;\n-import static org.junit.Assume.assumeTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -36,2 +36,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -48,1 +49,1 @@\n-    @Before\n+    @BeforeEach\n@@ -54,1 +55,2 @@\n-    @Test (timeout = 15000)\n+    @Test\n+    @Timeout(value=15)\n@@ -59,1 +61,2 @@\n-    @Test (timeout = 15000)\n+    @Test\n+    @Timeout(value=15)\n@@ -64,1 +67,2 @@\n-    @Test (timeout = 20000)\n+    @Test\n+    @Timeout(value=20)\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/shape\/meshmanagercacheleaktest\/MeshManagerCacheLeakTest.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,7 @@\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n-\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.TimeUnit;\n+import javafx.application.Application;\n@@ -34,1 +36,0 @@\n-import javafx.stage.Stage;\n@@ -39,6 +40,5 @@\n-import javafx.application.Application;\n-\n-import java.io.OutputStream;\n-import java.io.PrintStream;\n-import java.util.Timer;\n-import java.util.TimerTask;\n+import javafx.stage.Stage;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -46,0 +46,1 @@\n+@Timeout(value=120000, unit=TimeUnit.MILLISECONDS)\n@@ -78,1 +79,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -87,1 +88,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -103,1 +104,1 @@\n-    @Test(timeout=120000)\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/text\/ArabicWrappingTest.java","additions":17,"deletions":16,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,3 +35,3 @@\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -44,1 +44,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -59,2 +59,2 @@\n-        Assert.assertNotNull(p);\n-        Assert.assertEquals(0, p.length);\n+        Assertions.assertNotNull(p);\n+        Assertions.assertEquals(0, p.length);\n@@ -67,1 +67,1 @@\n-            Assert.assertNotNull(p);\n+            Assertions.assertNotNull(p);\n@@ -71,1 +71,1 @@\n-            Assert.assertTrue(b.getWidth() > w);\n+            Assertions.assertTrue(b.getWidth() > w);\n@@ -75,1 +75,1 @@\n-            Assert.assertTrue(b.getHeight() > 0.0);\n+            Assertions.assertTrue(b.getHeight() > 0.0);\n@@ -81,2 +81,2 @@\n-        Assert.assertEquals(b1, b2);\n-        Assert.assertTrue(b1.getHeight() > 0.0);\n+        Assertions.assertEquals(b1, b2);\n+        Assertions.assertTrue(b1.getHeight() > 0.0);\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/text\/TextFlowNodeTest.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,4 @@\n-import com.sun.javafx.application.PlatformImpl;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -38,4 +41,3 @@\n-\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.application.PlatformImpl;\n@@ -45,1 +47,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -133,1 +135,1 @@\n-        assertEquals(empty, text.getCaretShape()); \/\/initially empty\n+        assertArrayEquals(empty, text.getCaretShape()); \/\/initially empty\n@@ -139,1 +141,1 @@\n-        assertEquals(empty, text.getCaretShape()); \/\/empty after -1\n+        assertArrayEquals(empty, text.getCaretShape()); \/\/empty after -1\n@@ -147,1 +149,1 @@\n-        assertEquals(empty, text.getCaretShape()); \/\/empty after setText\n+        assertArrayEquals(empty, text.getCaretShape()); \/\/empty after setText\n@@ -183,1 +185,1 @@\n-        assertEquals(empty, text.getCaretShape());\n+        assertArrayEquals(empty, text.getCaretShape());\n@@ -186,1 +188,1 @@\n-        assertEquals(empty, text.getCaretShape());\n+        assertArrayEquals(empty, text.getCaretShape());\n@@ -208,1 +210,1 @@\n-        assertEquals(empty, text.getSelectionShape()); \/\/initially null\n+        assertArrayEquals(empty, text.getSelectionShape()); \/\/initially null\n@@ -211,1 +213,1 @@\n-        assertEquals(empty, text.getSelectionShape()); \/\/set start, but not end\n+        assertArrayEquals(empty, text.getSelectionShape()); \/\/set start, but not end\n@@ -218,1 +220,1 @@\n-        assertEquals(empty, text.getSelectionShape());; \/\/no start\n+        assertArrayEquals(empty, text.getSelectionShape());; \/\/no start\n@@ -225,1 +227,1 @@\n-        assertEquals(empty, text.getSelectionShape()); \/\/no end\n+        assertArrayEquals(empty, text.getSelectionShape()); \/\/no end\n@@ -233,1 +235,1 @@\n-        assertEquals(empty, text.getSelectionShape()); \/\/end > start\n+        assertArrayEquals(empty, text.getSelectionShape()); \/\/end > start\n@@ -241,1 +243,1 @@\n-        assertEquals(empty, text.getSelectionShape()); \/\/end == start\n+        assertArrayEquals(empty, text.getSelectionShape()); \/\/end == start\n@@ -249,1 +251,1 @@\n-        assertEquals(empty, text.getSelectionShape()); \/\/end > length\n+        assertArrayEquals(empty, text.getSelectionShape()); \/\/end > length\n@@ -257,1 +259,1 @@\n-        assertEquals(empty, text.getSelectionShape()); \/\/start > length\n+        assertArrayEquals(empty, text.getSelectionShape()); \/\/start > length\n@@ -260,1 +262,1 @@\n-        assertEquals(empty, text.getSelectionShape()); \/\/setText resets\n+        assertArrayEquals(empty, text.getSelectionShape()); \/\/setText resets\n@@ -266,1 +268,1 @@\n-        assertEquals(empty, text.getSelectionShape());\n+        assertArrayEquals(empty, text.getSelectionShape());\n@@ -278,1 +280,1 @@\n-        assertEquals(empty, text.getSelectionShape());\n+        assertArrayEquals(empty, text.getSelectionShape());\n@@ -290,1 +292,1 @@\n-        assertEquals(empty, text.getSelectionShape());\n+        assertArrayEquals(empty, text.getSelectionShape());\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/text\/TextNodeTest.java","additions":26,"deletions":24,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,4 +29,3 @@\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -34,1 +33,0 @@\n-\n@@ -43,7 +41,5 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -106,1 +102,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -111,1 +107,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -116,1 +112,1 @@\n-    @Before\n+    @BeforeEach\n@@ -125,1 +121,1 @@\n-    @Ignore(\"JDK-8269067\")\n+    @Disabled(\"JDK-8269067\")\n@@ -149,1 +145,1 @@\n-        assertTrue(\"Timeout when waiting for focus change \", Util.await(webViewStateLatch));\n+        assertTrue(Util.await(webViewStateLatch), \"Timeout when waiting for focus change \");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/CSSFilterTest.java","additions":14,"deletions":18,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,4 +29,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -34,1 +33,0 @@\n-\n@@ -40,6 +38,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -72,1 +68,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -76,1 +72,1 @@\n-        assertTrue(\"Timeout waiting for FX runtime to start\", Util.await(launchLatch));\n+        assertTrue(Util.await(launchLatch), \"Timeout waiting for FX runtime to start\");\n@@ -79,1 +75,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -84,1 +80,1 @@\n-    @Before\n+    @BeforeEach\n@@ -128,1 +124,1 @@\n-        assertTrue(\"Timeout when waiting for focus change \", Util.await(webViewStateLatch));\n+        assertTrue(Util.await(webViewStateLatch), \"Timeout when waiting for focus change \");\n@@ -132,4 +128,6 @@\n-            assertEquals(\"Rect top-left corner\", redColor, (int) webView.getEngine().executeScript(\n-                \"document.getElementById('canvas').getContext('2d').getImageData(1, 1, 1, 1).data[0]\"));\n-            assertEquals(\"Rect bottom-right corner\", redColor, (int) webView.getEngine().executeScript(\n-                \"document.getElementById('canvas').getContext('2d').getImageData(99, 99, 1, 1).data[0]\"));\n+            assertEquals(redColor, (int) webView.getEngine().executeScript(\n+                \"document.getElementById('canvas').getContext('2d').getImageData(1, 1, 1, 1).data[0]\"),\n+                \"Rect top-left corner\");\n+            assertEquals(redColor, (int) webView.getEngine().executeScript(\n+                \"document.getElementById('canvas').getContext('2d').getImageData(99, 99, 1, 1).data[0]\"),\n+                \"Rect bottom-right corner\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/CanvasTest.java","additions":19,"deletions":21,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,4 +29,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -35,1 +34,0 @@\n-\n@@ -48,7 +46,5 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -56,1 +52,0 @@\n-\n@@ -97,1 +92,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -102,1 +97,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -107,1 +102,1 @@\n-    @Before\n+    @BeforeEach\n@@ -131,1 +126,2 @@\n-    @Test @Ignore(\"JDK-8202542\")\n+    @Test\n+    @Disabled(\"JDK-8202542\")\n@@ -172,2 +168,2 @@\n-        assertTrue(\"Timeout when waiting for focus change \", Util.await(editorStateLatch));\n-        assertEquals(\"Focus Change with design mode enabled \", \"red\", result.get());\n+        assertTrue(Util.await(editorStateLatch), \"Timeout when waiting for focus change \");\n+        assertEquals(\"red\", result.get(), \"Focus Change with design mode enabled \");\n@@ -222,1 +218,1 @@\n-        assertTrue(\"Timeout when waiting for focus change \", Util.await(editorStateLatch));\n+        assertTrue(Util.await(editorStateLatch), \"Timeout when waiting for focus change \");\n@@ -305,1 +301,1 @@\n-        assertTrue(\"Timeout when waiting for focus change \", Util.await(editorStateLatch));\n+        assertTrue(Util.await(editorStateLatch), \"Timeout when waiting for focus change \");\n@@ -307,1 +303,1 @@\n-        assertEquals(\"document.body.style.fontWeight must be bold \", \"bold\", result.get());\n+        assertEquals(\"bold\", result.get(), \"document.body.style.fontWeight must be bold \");\n@@ -338,2 +334,3 @@\n-                            assertTrue(\"fontFamilyComboBox must be ComboBox\",\n-                                comboBox instanceof ComboBox);\n+                            assertTrue(\n+                                comboBox instanceof ComboBox,\n+                                \"fontFamilyComboBox must be ComboBox\");\n@@ -341,2 +338,3 @@\n-                            assertNotNull(\"fontFamilyComboBox must not be null\",\n-                                fontFamilyComboBox);\n+                            assertNotNull(\n+                                fontFamilyComboBox,\n+                                \"fontFamilyComboBox must not be null\");\n@@ -355,4 +353,3 @@\n-        assertTrue(\"Timeout when waiting for focus change \", Util.await(editorStateLatch));\n-        assertNotNull(\"result must have a valid reference \", result.get());\n-        assertTrue(\"font-family must be 'WebKit Layout Test 2' \", result.get().\n-            contains(\"font-family: &quot;WebKit Layout Tests 2&quot;\"));\n+        assertTrue(Util.await(editorStateLatch), \"Timeout when waiting for focus change \");\n+        assertNotNull(result.get(), \"result must have a valid reference \");\n+        assertTrue(result.get().contains(\"font-family: &quot;WebKit Layout Tests 2&quot;\"), \"font-family must be 'WebKit Layout Test 2' \");\n@@ -398,1 +395,1 @@\n-        assertTrue(\"Timeout while waiting for test html text setup\", Util.await(editorStateLatch));\n+        assertTrue(Util.await(editorStateLatch), \"Timeout while waiting for test html text setup\");\n@@ -412,1 +409,1 @@\n-        assertEquals(\"Expected and Actual HTML text does not match. \", expectedHtmlText, actualHtmlText);\n+        assertEquals(expectedHtmlText, actualHtmlText, \"Expected and Actual HTML text does not match. \");\n@@ -448,1 +445,1 @@\n-        assertTrue(\"Timeout while waiting for test html text setup\", Util.await(editorStateLatch));\n+        assertTrue(Util.await(editorStateLatch), \"Timeout while waiting for test html text setup\");\n@@ -462,1 +459,1 @@\n-        assertEquals(\"Expected and Actual HTML text does not match. \", expectedHtmlText, actualHtmlText);\n+        assertEquals(expectedHtmlText, actualHtmlText, \"Expected and Actual HTML text does not match. \");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/HTMLEditorTest.java","additions":32,"deletions":35,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,4 +29,3 @@\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -34,1 +33,0 @@\n-\n@@ -44,6 +42,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -52,1 +48,0 @@\n-\n@@ -109,1 +104,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -114,1 +109,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -119,1 +114,1 @@\n-    @Before\n+    @BeforeEach\n@@ -159,1 +154,1 @@\n-        assertTrue(\"Timeout when waiting for focus change \", Util.await(webViewStateLatch));\n+        assertTrue(Util.await(webViewStateLatch), \"Timeout when waiting for focus change \");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/PageFillTest.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,4 +29,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -34,1 +33,0 @@\n-\n@@ -43,6 +41,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -75,1 +71,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -80,1 +76,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -85,1 +81,1 @@\n-    @Before\n+    @BeforeEach\n@@ -134,1 +130,1 @@\n-        assertTrue(\"Timeout when waiting for focus change \", Util.await(webViewStateLatch));\n+        assertTrue(Util.await(webViewStateLatch), \"Timeout when waiting for focus change \");\n@@ -142,3 +138,3 @@\n-            assertEquals(\"Color should be opaque red:\", redColor, pr.getColor(0, 0));\n-            assertEquals(\"Color should be opaque red:\", redColor, pr.getColor(30, 30));\n-            assertEquals(\"Color should be opaque red:\", redColor, pr.getColor(49, 49));\n+            assertEquals(redColor, pr.getColor(0, 0), \"Color should be opaque red:\");\n+            assertEquals(redColor, pr.getColor(30, 30), \"Color should be opaque red:\");\n+            assertEquals(redColor, pr.getColor(49, 49), \"Color should be opaque red:\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/SVGTest.java","additions":15,"deletions":19,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -29,3 +29,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -41,4 +41,4 @@\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -82,1 +82,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -87,1 +87,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -92,1 +92,1 @@\n-    @Before\n+    @BeforeEach\n@@ -148,1 +148,1 @@\n-        assertTrue(\"Timeout when waiting for focus change \", Util.await(webViewStateLatch));\n+        assertTrue(Util.await(webViewStateLatch), \"Timeout when waiting for focus change \");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/StraightLineTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,4 +29,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -35,1 +34,0 @@\n-\n@@ -41,6 +39,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -72,1 +68,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -77,1 +73,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -82,1 +78,1 @@\n-    @Before\n+    @BeforeEach\n@@ -94,1 +90,1 @@\n-        assertNotNull(\"Resource was null\", resource);\n+        assertNotNull(resource, \"Resource was null\");\n@@ -108,1 +104,1 @@\n-        assertTrue(\"Timeout waiting for succeeded state\", Util.await(webViewStateLatch));\n+        assertTrue(Util.await(webViewStateLatch), \"Timeout waiting for succeeded state\");\n@@ -112,1 +108,1 @@\n-                assertEquals(\"Unknown intersection ratio\", \"?\", getIntersectionRatio()));\n+                assertEquals(\"?\", getIntersectionRatio(), \"Unknown intersection ratio\"));\n@@ -118,1 +114,1 @@\n-                assertEquals(\"Intersection ratio\", \"0.5\", getIntersectionRatio()));\n+                assertEquals(\"0.5\", getIntersectionRatio(), \"Intersection ratio\"));\n@@ -123,1 +119,1 @@\n-        assertNotNull(\"InnerText was null\", object);\n+        assertNotNull(object, \"InnerText was null\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/WebIObserverTest.java","additions":16,"deletions":20,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,4 +29,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -34,1 +33,0 @@\n-\n@@ -41,6 +39,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -49,1 +45,0 @@\n-\n@@ -76,1 +71,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -81,1 +76,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -86,1 +81,1 @@\n-    @Before\n+    @BeforeEach\n@@ -134,1 +129,1 @@\n-        assertTrue(\"Timeout when waiting for focus change \", Util.await(webViewStateLatch));\n+        assertTrue(Util.await(webViewStateLatch), \"Timeout when waiting for focus change \");\n@@ -146,1 +141,1 @@\n-            assertEquals(\"WebPage should display pass: \", \"Pass\", webView.getEngine().executeScript(\"document.getElementById('test').innerHTML\"));\n+            assertEquals(\"Pass\", webView.getEngine().executeScript(\"document.getElementById('test').innerHTML\"), \"WebPage should display pass: \");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/WebPageTest.java","additions":13,"deletions":18,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import static org.junit.Assume.assumeTrue;\n-\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -33,1 +32,0 @@\n-\n@@ -44,6 +42,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -66,1 +62,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -71,1 +67,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -84,2 +80,2 @@\n-        Assert.assertTrue(\"Primary stage X location should be >\" + minX, stage.getX() > minX);\n-        Assert.assertTrue(\"Primary stage Y location should be >\" + minY, stage.getY() > minY);\n+        Assertions.assertTrue(stage.getX() > minX, \"Primary stage X location should be >\" + minX);\n+        Assertions.assertTrue(stage.getY() > minY, \"Primary stage Y location should be >\" + minY);\n@@ -91,2 +87,2 @@\n-        Assert.assertTrue(\"Child stage X location should be >\" + minX, childStage.getX() > minX);\n-        Assert.assertTrue(\"Child stage Y location should be >\" + minY, childStage.getY() > minY);\n+        Assertions.assertTrue(childStage.getX() > minX, \"Child stage X location should be >\" + minX);\n+        Assertions.assertTrue(childStage.getY() > minY, \"Child stage Y location should be >\" + minY);\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/ChildStageLocationTest.java","additions":12,"deletions":16,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-\n@@ -35,6 +34,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -74,1 +71,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -79,1 +76,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -87,3 +84,3 @@\n-        Assert.assertTrue(stage.isShowing());\n-        Assert.assertTrue(childStage.isShowing());\n-        Assert.assertFalse(stage.isIconified());\n+        Assertions.assertTrue(stage.isShowing());\n+        Assertions.assertTrue(childStage.isShowing());\n+        Assertions.assertFalse(stage.isIconified());\n@@ -98,2 +95,2 @@\n-        Assert.assertEquals(\"Child window was moved\", x, childStage.getX(), 0.1);\n-        Assert.assertEquals(\"Child window was moved\", y, childStage.getY(), 0.1);\n+        Assertions.assertEquals(x, childStage.getX(), 0.1, \"Child window was moved\");\n+        Assertions.assertEquals(y, childStage.getY(), 0.1, \"Child window was moved\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/DeiconifiedWithChildTest.java","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,3 @@\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -51,1 +51,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/FocusedWindowMonocleTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,3 @@\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -35,1 +35,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -45,1 +45,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/FocusedWindowNativeTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-\n@@ -36,3 +35,1 @@\n-\n-import org.junit.Assert;\n-\n+import org.junit.jupiter.api.Assertions;\n@@ -67,2 +64,1 @@\n-        Assert.assertTrue(\"Timeout waiting for closedFocusedStage to show`\",\n-                latch.await(15, TimeUnit.MILLISECONDS));\n+        Assertions.assertTrue(latch.await(15, TimeUnit.MILLISECONDS), \"Timeout waiting for closedFocusedStage to show`\");\n@@ -75,2 +71,1 @@\n-        Assert.assertTrue(\"Timeout waiting for closedFocusedStage to hide`\",\n-                hideLatch.await(15, TimeUnit.MILLISECONDS));\n+        Assertions.assertTrue(hideLatch.await(15, TimeUnit.MILLISECONDS), \"Timeout waiting for closedFocusedStage to hide`\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/FocusedWindowTestBase.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-\n@@ -35,6 +34,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -61,1 +58,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -66,1 +63,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -74,3 +71,3 @@\n-        Assert.assertTrue(stage.isShowing());\n-        Assert.assertEquals(\"Stage height\", INIT_SIZE, stage.getHeight(), .1d);\n-        Assert.assertEquals(\"Stage width\", INIT_SIZE, stage.getWidth(), .1d);\n+        Assertions.assertTrue(stage.isShowing());\n+        Assertions.assertEquals(INIT_SIZE, stage.getHeight(), .1d, \"Stage height\");\n+        Assertions.assertEquals(INIT_SIZE, stage.getWidth(), .1d, \"Stage width\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/InitialSizeTest.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-\n@@ -45,6 +44,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -68,1 +65,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -73,1 +70,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -80,2 +77,2 @@\n-        Assert.assertTrue(\"Wrong window width\", alert.getWidth() >= alert.getDialogPane().getWidth());\n-        Assert.assertTrue(\"Wrong window height\", alert.getHeight() >= alert.getDialogPane().getHeight());\n+        Assertions.assertTrue(alert.getWidth() >= alert.getDialogPane().getWidth(), \"Wrong window width\");\n+        Assertions.assertTrue(alert.getHeight() >= alert.getDialogPane().getHeight(), \"Wrong window height\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/MakeResizableAndResizeTest.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -35,4 +35,4 @@\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -61,1 +61,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -66,1 +66,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -76,1 +76,1 @@\n-        Assert.assertTrue(\"Stage has moved to desktop top corner\", movedToTopCorner);\n+        Assertions.assertTrue(movedToTopCorner, \"Stage has moved to desktop top corner\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/MaximizeUndecorated.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,2 @@\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assume.assumeTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -32,1 +31,1 @@\n-\n+import java.util.concurrent.TimeUnit;\n@@ -41,7 +40,6 @@\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -50,0 +48,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -58,1 +57,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -65,1 +64,1 @@\n-        assertNotNull(\"Primary screen is null\", primaryScreen);\n+        assertNotNull(primaryScreen, \"Primary screen is null\");\n@@ -67,1 +66,1 @@\n-        assertNotNull(\"List of screens is null\", screens);\n+        assertNotNull(screens, \"List of screens is null\");\n@@ -75,1 +74,1 @@\n-        assertNotNull(\"Secondary screen is null\", otherScreen);\n+        assertNotNull(otherScreen, \"Secondary screen is null\");\n@@ -78,1 +77,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -83,1 +82,1 @@\n-    @Before\n+    @BeforeEach\n@@ -88,1 +87,1 @@\n-    @After\n+    @AfterEach\n@@ -99,1 +98,1 @@\n-        assertNotNull(\"Stage is null\", stage);\n+        assertNotNull(stage, \"Stage is null\");\n@@ -122,1 +121,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -127,1 +126,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -132,1 +131,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -137,1 +136,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -141,1 +140,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/MultipleScreensTest.java","additions":23,"deletions":25,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -35,3 +36,4 @@\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -40,0 +42,1 @@\n+@Timeout(value=20000, unit=TimeUnit.MILLISECONDS)\n@@ -60,1 +63,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -67,1 +70,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -72,1 +75,1 @@\n-                Assert.assertFalse(Platform.isNestedLoopRunning());\n+                Assertions.assertFalse(Platform.isNestedLoopRunning());\n@@ -76,1 +79,1 @@\n-                Assert.assertTrue(Platform.isNestedLoopRunning());\n+                Assertions.assertTrue(Platform.isNestedLoopRunning());\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/NestedEventLoopPlatformExitTest.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -35,1 +35,0 @@\n-\n@@ -42,5 +41,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -85,1 +82,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -90,1 +87,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -97,1 +94,1 @@\n-    @Test (expected=IllegalStateException.class)\n+    @Test\n@@ -99,2 +96,4 @@\n-        assertFalse(Platform.isFxApplicationThread());\n-        Platform.enterNestedEventLoop(new Object());\n+        assertThrows(IllegalStateException.class, () -> {\n+            assertFalse(Platform.isFxApplicationThread());\n+            Platform.enterNestedEventLoop(new Object());\n+        });\n@@ -127,1 +126,1 @@\n-    @Test (expected=IllegalArgumentException.class)\n+    @Test\n@@ -129,6 +128,8 @@\n-        final Object key = new Object();\n-        Util.runAndWait(\n-                () -> Platform.enterNestedEventLoop(key),\n-                () -> Platform.enterNestedEventLoop(key),\n-                () -> Platform.exitNestedEventLoop(key, null)\n-        );\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final Object key = new Object();\n+            Util.runAndWait(\n+                    () -> Platform.enterNestedEventLoop(key),\n+                    () -> Platform.enterNestedEventLoop(key),\n+                    () -> Platform.exitNestedEventLoop(key, null)\n+            );\n+        });\n@@ -138,1 +139,1 @@\n-    @Test (expected=NullPointerException.class)\n+    @Test\n@@ -140,1 +141,2 @@\n-        Util.runAndWait(\n+        assertThrows(NullPointerException.class, () -> {\n+            Util.runAndWait(\n@@ -142,1 +144,2 @@\n-        );\n+            );\n+        });\n@@ -146,1 +149,1 @@\n-    @Test (expected=NullPointerException.class)\n+    @Test\n@@ -148,1 +151,2 @@\n-        Util.runAndWait(\n+        assertThrows(NullPointerException.class, () -> {\n+            Util.runAndWait(\n@@ -152,1 +156,2 @@\n-        );\n+            );\n+        });\n@@ -156,1 +161,1 @@\n-    @Test (expected=IllegalArgumentException.class)\n+    @Test\n@@ -158,1 +163,2 @@\n-        Util.runAndWait(\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Util.runAndWait(\n@@ -162,1 +168,2 @@\n-        );\n+            );\n+        });\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/NestedEventLoopTest.java","additions":39,"deletions":32,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -27,2 +27,1 @@\n-import static org.junit.Assume.assumeTrue;\n-\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -31,1 +30,0 @@\n-\n@@ -39,6 +37,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +42,0 @@\n-\n@@ -80,1 +75,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -85,1 +80,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -96,2 +91,2 @@\n-        Assert.assertTrue(stage.isShowing());\n-        Assert.assertFalse(stage.isFullScreen());\n+        Assertions.assertTrue(stage.isShowing());\n+        Assertions.assertFalse(stage.isFullScreen());\n@@ -104,1 +99,1 @@\n-        Assert.assertTrue(stage.isFullScreen());\n+        Assertions.assertTrue(stage.isFullScreen());\n@@ -124,2 +119,2 @@\n-        Assert.assertEquals(\"Window was moved\", x, stage.getX(), 0.1);\n-        Assert.assertEquals(\"Window was moved\", y, stage.getY(), 0.1);\n+        Assertions.assertEquals(x, stage.getX(), 0.1, \"Window was moved\");\n+        Assertions.assertEquals(y, stage.getY(), 0.1, \"Window was moved\");\n@@ -134,2 +129,2 @@\n-        Assert.assertTrue(stage.isShowing());\n-        Assert.assertFalse(stage.isMaximized());\n+        Assertions.assertTrue(stage.isShowing());\n+        Assertions.assertFalse(stage.isMaximized());\n@@ -142,1 +137,1 @@\n-        Assert.assertTrue(stage.isMaximized());\n+        Assertions.assertTrue(stage.isMaximized());\n@@ -162,2 +157,2 @@\n-        Assert.assertEquals(\"Window was moved\", x, stage.getX(), 0.1);\n-        Assert.assertEquals(\"Window was moved\", y, stage.getY(), 0.1);\n+        Assertions.assertEquals(x, stage.getX(), 0.1, \"Window was moved\");\n+        Assertions.assertEquals(y, stage.getY(), 0.1, \"Window was moved\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/RestoreStagePositionTest.java","additions":17,"deletions":22,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,3 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assume.assumeTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -33,1 +32,0 @@\n-\n@@ -38,5 +36,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -58,1 +54,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -75,1 +71,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -83,1 +79,1 @@\n-        assertFalse(\"Screens list is empty\", screens.size() == 0);\n+        assertFalse(screens.size() == 0, \"Screens list is empty\");\n@@ -98,1 +94,1 @@\n-        assertFalse(\"Screens list is empty in listener\", screensSizeIsZero);\n+        assertFalse(screensSizeIsZero, \"Screens list is empty in listener\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/ScreenTest.java","additions":11,"deletions":15,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,6 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-import static org.junit.Assume.assumeNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -35,2 +35,0 @@\n-\n-import java.util.Arrays;\n@@ -39,0 +37,1 @@\n+import java.util.List;\n@@ -43,1 +42,0 @@\n-\n@@ -59,11 +57,7 @@\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-import junit.framework.AssertionFailedError;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -75,2 +69,1 @@\n-@RunWith(Parameterized.class)\n-public class ShowAndWaitTest {\n+public final class ShowAndWaitTest {\n@@ -133,1 +126,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -138,1 +131,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -143,3 +136,0 @@\n-    \/\/ Modality of the secondary stage(s) for a particular tests\n-    final Modality modality;\n-\n@@ -154,11 +144,7 @@\n-    @Parameters\n-    public static Collection getParams() {\n-        return Arrays.asList(new Object[][] {\n-            { Modality.NONE },\n-            { Modality.WINDOW_MODAL },\n-            { Modality.APPLICATION_MODAL },\n-        });\n-    }\n-\n-    public ShowAndWaitTest(Modality modality) {\n-        this.modality = modality;\n+    \/\/ Modality of the secondary stage(s) for a particular tests\n+    private static Collection<Modality> parameters() {\n+        return List.of(\n+            Modality.NONE,\n+            Modality.WINDOW_MODAL,\n+            Modality.APPLICATION_MODAL\n+        );\n@@ -167,1 +153,1 @@\n-    @Before\n+    @BeforeEach\n@@ -173,1 +159,1 @@\n-    @After\n+    @AfterEach\n@@ -198,1 +184,1 @@\n-    public void ensureTest1() {\n+    public void ensureTest1(Modality modality) {\n@@ -200,1 +186,1 @@\n-            test1();\n+            test1(modality);\n@@ -204,2 +190,3 @@\n-    @Test\n-    public void test1() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void test1(Modality modality) {\n@@ -218,1 +205,1 @@\n-            try {\n+            assertThrows(IllegalStateException.class, () -> {\n@@ -220,3 +207,1 @@\n-                throw new AssertionFailedError(\"Expected IllegalStateException was not thrown\");\n-            } catch (IllegalStateException ex) {\n-            }\n+            });\n@@ -230,8 +215,11 @@\n-    @Test (expected=IllegalStateException.class)\n-    public void testConstructWrongThread() {\n-        ensureTest1();\n-        assertFalse(Platform.isFxApplicationThread());\n-\n-        \/\/ The following should throw IllegalStateException\n-        tmpStage1 = new TestStage(modality);\n-        stages.add(tmpStage1);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testConstructWrongThread(Modality modality) {\n+        assertThrows(IllegalStateException.class, () -> {\n+            ensureTest1(modality);\n+            assertFalse(Platform.isFxApplicationThread());\n+\n+            \/\/ The following should throw IllegalStateException\n+            tmpStage1 = new TestStage(modality);\n+            stages.add(tmpStage1);\n+        });\n@@ -243,11 +231,13 @@\n-    @Test (expected=IllegalStateException.class)\n-    public void testShowWaitWrongThread() {\n-        ensureTest1();\n-        assertFalse(Platform.isFxApplicationThread());\n-        Util.runAndWait(() -> {\n-            tmpStage1 = new TestStage(modality);\n-            stages.add(tmpStage1);\n-            assertFalse(StageShim.isPrimary(tmpStage1));\n-            assertFalse(tmpStage1.isShowing());\n-        });\n-        assertNotNull(tmpStage1);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testShowWaitWrongThread(Modality modality) {\n+        assertThrows(IllegalStateException.class, () -> {\n+            ensureTest1(modality);\n+            assertFalse(Platform.isFxApplicationThread());\n+            Util.runAndWait(() -> {\n+                tmpStage1 = new TestStage(modality);\n+                stages.add(tmpStage1);\n+                assertFalse(StageShim.isPrimary(tmpStage1));\n+                assertFalse(tmpStage1.isShowing());\n+            });\n+            assertNotNull(tmpStage1);\n@@ -255,2 +245,3 @@\n-        \/\/ The following should throw IllegalStateException\n-        tmpStage1.showAndWait();\n+            \/\/ The following should throw IllegalStateException\n+            tmpStage1.showAndWait();\n+        });\n@@ -260,10 +251,12 @@\n-    @Test (expected=IllegalStateException.class)\n-    public void testVisibleThrow() {\n-        ensureTest1();\n-        Util.runAndWait(() -> {\n-            tmpStage1 = new TestStage(modality);\n-            stages.add(tmpStage1);\n-            assertFalse(StageShim.isPrimary(tmpStage1));\n-            assertFalse(tmpStage1.isShowing());\n-            tmpStage1.show();\n-            assertTrue(tmpStage1.isShowing());\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testVisibleThrow(Modality modality) {\n+        assertThrows(IllegalStateException.class, () -> {\n+            ensureTest1(modality);\n+            Util.runAndWait(() -> {\n+                tmpStage1 = new TestStage(modality);\n+                stages.add(tmpStage1);\n+                assertFalse(StageShim.isPrimary(tmpStage1));\n+                assertFalse(tmpStage1.isShowing());\n+                tmpStage1.show();\n+                assertTrue(tmpStage1.isShowing());\n@@ -271,6 +264,7 @@\n-            try {\n-                \/\/ The following should throw IllegalStateException\n-                tmpStage1.showAndWait();\n-            } finally {\n-                tmpStage1.hide();\n-            }\n+                try {\n+                    \/\/ The following should throw IllegalStateException\n+                    tmpStage1.showAndWait();\n+                } finally {\n+                    tmpStage1.hide();\n+                }\n+            });\n@@ -281,3 +275,4 @@\n-    @Test\n-    public void testNotBlocking() {\n-        ensureTest1();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testNotBlocking(Modality modality) {\n+        ensureTest1(modality);\n@@ -316,3 +311,4 @@\n-    @Test\n-    public void testSingle() {\n-        ensureTest1();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSingle(Modality modality) {\n+        ensureTest1(modality);\n@@ -360,3 +356,4 @@\n-    @Test\n-    public void testSingle_Chained() {\n-        ensureTest1();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSingle_Chained(Modality modality) {\n+        ensureTest1(modality);\n@@ -400,3 +397,4 @@\n-    @Test\n-    public void testTwoNested() {\n-        ensureTest1();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTwoNested(Modality modality) {\n+        ensureTest1(modality);\n@@ -465,3 +463,4 @@\n-    @Test\n-    public void testTwoInterleaved() {\n-        ensureTest1();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTwoInterleaved(Modality modality) {\n+        ensureTest1(modality);\n@@ -530,3 +529,4 @@\n-    @Test\n-    public void testMultipleNested() {\n-        ensureTest1();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testMultipleNested(Modality modality) {\n+        ensureTest1(modality);\n@@ -595,3 +595,4 @@\n-    @Test\n-    public void testMultipleInterleaved() {\n-        ensureTest1();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testMultipleInterleaved(Modality modality) {\n+        ensureTest1(modality);\n@@ -660,3 +661,4 @@\n-    @Test\n-    public void testTimeline() throws Throwable {\n-        ensureTest1();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTimeline(Modality modality) throws Throwable {\n+        ensureTest1(modality);\n@@ -706,3 +708,4 @@\n-    @Test\n-    public void testTimelineDialog() throws Throwable {\n-        ensureTest1();\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTimelineDialog(Modality modality) throws Throwable {\n+        ensureTest1(modality);\n@@ -754,3 +757,4 @@\n-    @Test\n-    public void testTimelinePrint() throws Throwable {\n-        assumeNotNull(PrinterJob.createPrinterJob());\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTimelinePrint(Modality modality) throws Throwable {\n+        Assumptions.assumeTrue(PrinterJob.createPrinterJob() != null);\n@@ -758,1 +762,1 @@\n-        ensureTest1();\n+        ensureTest1(modality);\n@@ -806,1 +810,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/ShowAndWaitTest.java","additions":121,"deletions":118,"binary":false,"changes":239,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n-import static org.junit.Assume.assumeTrue;\n-\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -32,1 +31,0 @@\n-\n@@ -41,6 +39,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -48,1 +44,0 @@\n-\n@@ -81,1 +76,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -86,1 +81,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -97,2 +92,2 @@\n-        Assert.assertTrue(stage.isShowing());\n-        Assert.assertFalse(stage.isFullScreen());\n+        Assertions.assertTrue(stage.isShowing());\n+        Assertions.assertFalse(stage.isFullScreen());\n@@ -113,1 +108,1 @@\n-        Assert.assertEquals(\"Window was moved once\", minY, stage.getY(), 0.1);\n+        Assertions.assertEquals(minY, stage.getY(), 0.1, \"Window was moved once\");\n@@ -120,1 +115,1 @@\n-        Assert.assertEquals(\"Window was moved twice\", minY, stage.getY(), 0.1);\n+        Assertions.assertEquals(minY, stage.getY(), 0.1, \"Window was moved twice\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/StageAtTopPositionTest.java","additions":11,"deletions":16,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.launchertest.Constants.ERROR_NONE;\n+import static test.launchertest.Constants.ERROR_UNEXPECTED_EXCEPTION;\n@@ -29,5 +33,3 @@\n-import junit.framework.AssertionFailedError;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n-import static test.launchertest.Constants.*;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -38,0 +40,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -43,1 +46,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -63,1 +66,1 @@\n-                    throw new AssertionFailedError(testAppName\n+                    fail(testAppName\n@@ -70,1 +73,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(testAppName\n@@ -74,1 +77,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(testAppName\n@@ -78,1 +81,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(testAppName\n@@ -82,1 +85,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/launchertest\/JarLauncherTest.java","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -28,1 +28,3 @@\n-import com.sun.javafx.PlatformUtil;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import static test.launchertest.Constants.*;\n@@ -31,8 +33,6 @@\n-import junit.framework.AssertionFailedError;\n-import org.junit.runners.Parameterized.Parameters;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.Test;\n-\n-import static test.launchertest.Constants.*;\n-import static org.junit.Assume.*;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import com.sun.javafx.PlatformUtil;\n@@ -43,2 +43,2 @@\n-@RunWith(Parameterized.class)\n-public class MainLauncherTest {\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n+public final class MainLauncherTest {\n@@ -49,2 +49,0 @@\n-    private static Collection params = null;\n-\n@@ -52,2 +50,2 @@\n-        final String appName;\n-        final String pldrName;\n+        final String testAppName;\n+        final String testPldrName;\n@@ -55,1 +53,1 @@\n-        final int exitCode;\n+        final int testExitCode;\n@@ -74,2 +72,2 @@\n-            this.appName = pkgName + \".\" + appName;\n-            this.pldrName = pldrName == null ? null : pkgName + \".\" +  pldrName;\n+            this.testAppName = pkgName + \".\" + appName;\n+            this.testPldrName = pldrName == null ? null : pkgName + \".\" +  pldrName;\n@@ -77,1 +75,1 @@\n-            this.exitCode = exitCode;\n+            this.testExitCode = exitCode;\n@@ -81,25 +79,27 @@\n-    private static final TestData[] testData = {\n-        new TestData(\"TestApp\"),\n-        new TestData(\"TestAppNoMain\"),\n-        new TestData(\"TestNotApplication\"),\n-        new TestData(\"TestStartupApp1\", ERROR_NONE),\n-        new TestData(\"TestStartupApp2\", ERROR_NONE),\n-        new TestData(\"TestStartupAppNoMain\", ERROR_NONE),\n-        new TestData(\"TestStartupJFXPanel\", ERROR_NONE),\n-        new TestData(\"TestStartupNotApplication\", ERROR_NONE),\n-        new TestData(\"TestAppThreadCheck\", ERROR_NONE),\n-        new TestData(\"TestAppNoMainThreadCheck\", ERROR_NONE),\n-        new TestData(\"TestNotApplicationThreadCheck\", ERROR_NONE),\n-        new TestData(\"TestAppThreadCheck\", \"TestPreloader\", ERROR_NONE),\n-        new TestData(\"TestAppNoMainThreadCheck\", \"TestPreloader\", ERROR_NONE),\n-        new TestData(\"TestAppCCL\", ERROR_NONE),\n-        new TestData(\"TestAppCCL1\", ERROR_NONE),\n-        new TestData(\"TestAppCCL2\", ERROR_NONE),\n-        new TestData(\"TestAppNoMainCCL\", ERROR_NONE),\n-        new TestData(\"TestAppNoMainCCL2\", ERROR_NONE),\n-        new TestData(\"TestAppNoMainCCL3\", ERROR_NONE),\n-        new TestData(\"TestNotApplicationCCL\", ERROR_NONE),\n-        new TestData(\"TestHeadlessApp\", true, ERROR_NONE),\n-        new TestData(\"TestAWTAppDaemon\", ERROR_NONE),\n-        new TestData(\"TestAppDaemon\", ERROR_NONE),\n-        new TestData(\"TestAppPlatformExitAWT\", ERROR_NONE),\n+    private static Collection<TestData> parameters() {\n+        return List.of(\n+            new TestData(\"TestApp\"),\n+            new TestData(\"TestAppNoMain\"),\n+            new TestData(\"TestNotApplication\"),\n+            new TestData(\"TestStartupApp1\", ERROR_NONE),\n+            new TestData(\"TestStartupApp2\", ERROR_NONE),\n+            new TestData(\"TestStartupAppNoMain\", ERROR_NONE),\n+            new TestData(\"TestStartupJFXPanel\", ERROR_NONE),\n+            new TestData(\"TestStartupNotApplication\", ERROR_NONE),\n+            new TestData(\"TestAppThreadCheck\", ERROR_NONE),\n+            new TestData(\"TestAppNoMainThreadCheck\", ERROR_NONE),\n+            new TestData(\"TestNotApplicationThreadCheck\", ERROR_NONE),\n+            new TestData(\"TestAppThreadCheck\", \"TestPreloader\", ERROR_NONE),\n+            new TestData(\"TestAppNoMainThreadCheck\", \"TestPreloader\", ERROR_NONE),\n+            new TestData(\"TestAppCCL\", ERROR_NONE),\n+            new TestData(\"TestAppCCL1\", ERROR_NONE),\n+            new TestData(\"TestAppCCL2\", ERROR_NONE),\n+            new TestData(\"TestAppNoMainCCL\", ERROR_NONE),\n+            new TestData(\"TestAppNoMainCCL2\", ERROR_NONE),\n+            new TestData(\"TestAppNoMainCCL3\", ERROR_NONE),\n+            new TestData(\"TestNotApplicationCCL\", ERROR_NONE),\n+            new TestData(\"TestHeadlessApp\", true, ERROR_NONE),\n+            new TestData(\"TestAWTAppDaemon\", ERROR_NONE),\n+            new TestData(\"TestAppDaemon\", ERROR_NONE),\n+            new TestData(\"TestAppPlatformExitAWT\", ERROR_NONE)\n+        );\n@@ -108,26 +108,4 @@\n-    @Parameters\n-    public static Collection getParams() {\n-        if (params == null) {\n-            params = new ArrayList();\n-            for (TestData data : testData) {\n-                params.add(new TestData[] { data });\n-            }\n-        }\n-        return params;\n-    }\n-\n-    private final String testAppName;\n-    private final String testPldrName;\n-    private final boolean headless;\n-    private final int testExitCode;\n-\n-    public MainLauncherTest(TestData testData) {\n-        this.testAppName = testData.appName;\n-        this.testPldrName = testData.pldrName;\n-        this.headless = testData.headless;\n-        this.testExitCode = testData.exitCode;\n-    }\n-\n-    @Test (timeout = 15000)\n-    public void testMainLauncher() throws Exception {\n-        if (headless) {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testMainLauncher(TestData d) throws Exception {\n+        if (d.headless) {\n@@ -140,2 +118,2 @@\n-                        testAppName,\n-                        testPldrName,\n+                        d.testAppName,\n+                        d.testPldrName,\n@@ -147,1 +125,1 @@\n-        if (headless) {\n+        if (d.headless) {\n@@ -158,2 +136,2 @@\n-                if (retVal != testExitCode) {\n-                    throw new AssertionFailedError(testAppName\n+                if (retVal != d.testExitCode) {\n+                    fail(d.testAppName\n@@ -161,1 +139,1 @@\n-                            + testExitCode + \" was:\" + retVal);\n+                            + d.testExitCode + \" was:\" + retVal);\n@@ -165,1 +143,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -168,1 +146,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -171,1 +149,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -175,1 +153,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -178,1 +156,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -181,1 +159,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -185,1 +163,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -188,1 +166,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -192,1 +170,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -196,1 +174,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -199,1 +177,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -202,1 +180,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -205,1 +183,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -208,1 +186,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -211,1 +189,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -215,1 +193,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -218,1 +196,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -221,1 +199,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -224,1 +202,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -227,1 +205,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -231,1 +209,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -234,1 +212,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -237,1 +215,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -240,1 +218,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -243,1 +221,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -247,1 +225,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -251,1 +229,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -255,1 +233,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(d.testAppName\n@@ -259,1 +237,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/launchertest\/MainLauncherTest.java","additions":82,"deletions":105,"binary":false,"changes":187,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,7 @@\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.launchertest.Constants.ERROR_ASSERTION_FAILURE;\n+import static test.launchertest.Constants.ERROR_NONE;\n+import static test.launchertest.Constants.ERROR_TOOLKIT_IS_RUNNING;\n+import static test.launchertest.Constants.ERROR_TOOLKIT_NOT_RUNNING;\n+import static test.launchertest.Constants.ERROR_UNEXPECTED_EXCEPTION;\n@@ -30,5 +37,3 @@\n-import junit.framework.AssertionFailedError;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n-import static test.launchertest.Constants.*;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -39,0 +44,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -83,1 +89,1 @@\n-                    throw new AssertionFailedError(testAppName\n+                    fail(testAppName\n@@ -90,1 +96,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(testAppName\n@@ -94,1 +100,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(testAppName\n@@ -97,1 +103,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(testAppName\n@@ -101,1 +107,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(testAppName\n@@ -105,1 +111,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(testAppName\n@@ -109,1 +115,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(testAppName\n@@ -114,2 +120,1 @@\n-\n-    @Test (timeout = 15000)\n+    @Test\n@@ -120,1 +125,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -125,1 +130,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -130,1 +135,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -135,1 +140,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -140,1 +145,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -145,1 +150,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -150,1 +155,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -155,1 +160,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -160,1 +165,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -165,1 +170,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -170,1 +175,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -175,1 +180,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -180,1 +185,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -185,1 +190,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -190,1 +195,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -195,1 +200,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -200,1 +205,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -205,1 +210,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -210,1 +215,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -215,1 +220,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -220,1 +225,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -225,1 +230,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -230,1 +235,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -235,1 +240,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -240,1 +245,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -245,1 +250,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -250,1 +255,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -255,1 +260,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -260,1 +265,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -265,1 +270,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -270,1 +275,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -275,1 +280,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -280,1 +285,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -285,1 +290,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -290,1 +295,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -295,1 +300,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -300,1 +305,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -304,1 +309,2 @@\n-    @Test (timeout = 15000)\n+\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/launchertest\/ModuleLauncherTest.java","additions":59,"deletions":53,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.launchertest.Constants.ERROR_NONE;\n+import static test.launchertest.Constants.ERROR_TIMEOUT;\n+import static test.launchertest.Constants.ERROR_UNEXPECTED_EXCEPTION;\n@@ -32,2 +36,3 @@\n-import junit.framework.AssertionFailedError;\n-import org.junit.Test;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -36,2 +41,0 @@\n-import static test.launchertest.Constants.*;\n-\n@@ -41,0 +44,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -47,1 +51,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -66,1 +70,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(testAppName\n@@ -70,1 +74,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(testAppName\n@@ -74,1 +78,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(testAppName\n@@ -78,1 +82,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(testAppName\n@@ -91,1 +95,1 @@\n-            throw new AssertionFailedError(testAppName + \": tried to use JNI after Java was detached\");\n+            fail(testAppName + \": tried to use JNI after Java was detached\");\n@@ -94,1 +98,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/launchertest\/PlatformExitTest.java","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import static test.launchertest.Constants.ERROR_NONE;\n@@ -31,4 +32,0 @@\n-import javax.swing.JDialog;\n-import javax.swing.SwingUtilities;\n-\n-import static test.launchertest.Constants.*;\n","filename":"tests\/system\/src\/test\/java\/test\/launchertest\/TestAppDaemon.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,6 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -38,1 +38,1 @@\n-\n+import java.util.concurrent.TimeUnit;\n@@ -45,7 +45,5 @@\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n-import junit.framework.AssertionFailedError;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -55,0 +53,1 @@\n+@Timeout(value=20000, unit=TimeUnit.MILLISECONDS)\n@@ -188,1 +187,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -211,1 +210,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -216,1 +215,1 @@\n-    @After\n+    @AfterEach\n@@ -255,3 +254,1 @@\n-                AssertionFailedError err = new AssertionFailedError(\"Unknown execution exception\");\n-                err.initCause(encounteredException.getCause());\n-                throw err;\n+                fail(encounteredException);\n@@ -264,1 +261,2 @@\n-    @Test(timeout = 20000) public void testJsCallbackLeak() throws Exception {\n+    @Test\n+    public void testJsCallbackLeak() throws Exception {\n@@ -307,1 +305,1 @@\n-            throw new AssertionFailedError(\"Unexpected exception: \" + ex);\n+            fail(ex);\n@@ -331,1 +329,1 @@\n-        assertTrue(\"All Stages are null\", isAllStagesNull());\n+        assertTrue(isAllStagesNull(), \"All Stages are null\");\n@@ -334,1 +332,2 @@\n-    @Test(timeout = 20000) public void testJsCallbackFunction() throws Exception {\n+    @Test\n+    public void testJsCallbackFunction() throws Exception {\n@@ -377,1 +376,1 @@\n-            throw new AssertionFailedError(\"Unexpected exception: \" + ex);\n+            fail(ex);\n@@ -392,1 +391,1 @@\n-        assertTrue(\"All Button Callback return true\", isAllCallbackStatusTrue());\n+        assertTrue(isAllCallbackStatusTrue(), \"All Button Callback return true\");\n@@ -395,1 +394,2 @@\n-    @Test(timeout = 20000) public void testJsCallbackReleaseFunction() throws Exception {\n+    @Test\n+    public void testJsCallbackReleaseFunction() throws Exception {\n@@ -446,1 +446,1 @@\n-            throw new AssertionFailedError(\"Unexpected exception: \" + ex);\n+            fail(ex);\n@@ -464,1 +464,2 @@\n-    @Test(timeout = 20000) public void testJsCallbackConsoleFunction() throws Exception {\n+    @Test\n+    public void testJsCallbackConsoleFunction() throws Exception {\n@@ -509,1 +510,1 @@\n-            throw new AssertionFailedError(\"Unexpected exception: \" + ex);\n+            fail(ex);\n@@ -517,1 +518,2 @@\n-    @Test(timeout = 20000) public void testJsCallbackStrongRefPrimitiveArrayFunction() throws Exception {\n+    @Test\n+    public void testJsCallbackStrongRefPrimitiveArrayFunction() throws Exception {\n@@ -562,1 +564,1 @@\n-            throw new AssertionFailedError(\"Unexpected exception: \" + ex);\n+            fail(ex);\n@@ -577,1 +579,1 @@\n-        assertTrue(\"All Button Callback return true\", isAllCallbackStatusTrue());\n+        assertTrue(isAllCallbackStatusTrue(), \"All Button Callback return true\");\n@@ -580,1 +582,2 @@\n-    @Test(timeout = 20000) public void testJsCallbackLocalPrimitiveArrayFunctionWithGC() throws Exception {\n+    @Test\n+    public void testJsCallbackLocalPrimitiveArrayFunctionWithGC() throws Exception {\n@@ -627,1 +630,1 @@\n-            throw new AssertionFailedError(\"Unexpected exception: \" + ex);\n+            fail(ex);\n@@ -647,1 +650,1 @@\n-            throw new AssertionFailedError(\"Unexpected exception: \" + ex);\n+            fail(ex);\n@@ -653,1 +656,2 @@\n-    @Test(timeout = 20000) public void testJsCallbackStrongRefObjectArrayFunction() throws Exception {\n+    @Test\n+    public void testJsCallbackStrongRefObjectArrayFunction() throws Exception {\n@@ -698,1 +702,1 @@\n-            throw new AssertionFailedError(\"Unexpected exception: \" + ex);\n+            fail(ex);\n@@ -713,1 +717,1 @@\n-        assertTrue(\"All Button Callback return true\", isAllCallbackStatusTrue());\n+        assertTrue(isAllCallbackStatusTrue(), \"All Button Callback return true\");\n@@ -717,1 +721,2 @@\n-    @Test(timeout = 20000) public void testJsCallbackLocalObjectArrayFunctionWithGC() throws Exception {\n+    @Test\n+    public void testJsCallbackLocalObjectArrayFunctionWithGC() throws Exception {\n@@ -763,1 +768,1 @@\n-            throw new AssertionFailedError(\"Unexpected exception: \" + ex);\n+            fail(ex);\n@@ -783,1 +788,1 @@\n-            throw new AssertionFailedError(\"Unexpected exception: \" + ex);\n+            fail(ex);\n","filename":"tests\/system\/src\/test\/java\/test\/memoryleak\/JSCallbackMemoryTest.java","additions":48,"deletions":43,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n-import static org.junit.Assume.assumeTrue;\n-import org.junit.Test;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/renderlock\/RenderLock1Test.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,6 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-import static org.junit.Assume.assumeTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -35,1 +35,0 @@\n-\n@@ -39,1 +38,0 @@\n-\n@@ -54,4 +52,2 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n@@ -59,1 +55,0 @@\n-\n@@ -111,1 +106,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -122,1 +117,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/renderlock\/RenderLockCommon.java","additions":11,"deletions":16,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -30,4 +30,4 @@\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,2 @@\n-    @Before public void initDevice() {\n+    @BeforeEach\n+    public void initDevice() {\n@@ -45,1 +46,2 @@\n-    @After public void destroyDevice() throws InterruptedException {\n+    @AfterEach\n+    public void destroyDevice() throws InterruptedException {\n@@ -87,2 +89,1 @@\n-        Assert.assertEquals(\"Expected two typed events\", 2,\n-                             TestLogShim.getLog().stream().filter(s -> s.startsWith(\"Key typed\")).count());\n+        Assertions.assertEquals(2, TestLogShim.getLog().stream().filter(s -> s.startsWith(\"Key typed\")).count(), \"Expected two typed events\");\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/CreateDeviceTest.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-import org.junit.Test;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -35,1 +35,1 @@\n-public class DoubleClickTest extends ParameterizedTestBase {\n+public final class DoubleClickTest extends ParameterizedTestBase {\n@@ -37,6 +37,1 @@\n-    public DoubleClickTest(TestTouchDevice device) {\n-        super(device);\n-    }\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n+    private static Collection<TestTouchDevice> parameters() {\n@@ -48,2 +43,4 @@\n-    @Test\n-    public void testDoubleClick1() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testDoubleClick1(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -68,2 +65,4 @@\n-    @Test\n-    public void testDoubleClick2() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testDoubleClick2(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -90,1 +89,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/DoubleClickTest.java","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-import org.junit.Test;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -42,1 +42,1 @@\n-public class DragAndDropTest extends ParameterizedTestBase {\n+public final class DragAndDropTest extends ParameterizedTestBase {\n@@ -44,7 +44,1 @@\n-    public DragAndDropTest(TestTouchDevice device) {\n-        super(device);\n-    }\n-\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n+    private static Collection<TestTouchDevice> parameters() {\n@@ -54,2 +48,4 @@\n-    @Test\n-    public void testDragOneNodeToAnother() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testDragOneNodeToAnother(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -97,1 +93,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/DragAndDropTest.java","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -31,6 +31,5 @@\n-import org.junit.Assert;\n-import org.junit.Assume;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -50,1 +49,1 @@\n-public class DragTouchInAndOutAWindowTest extends ParameterizedTestBase {\n+public final class DragTouchInAndOutAWindowTest extends ParameterizedTestBase {\n@@ -52,6 +51,1 @@\n-    public DragTouchInAndOutAWindowTest(TestTouchDevice device) {\n-        super(device);\n-    }\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n+    private static Collection<TestTouchDevice> parameters() {\n@@ -62,2 +56,4 @@\n-    @Before\n-    public void setUpScreen() throws Exception {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    private void setUpScreen(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -81,2 +77,4 @@\n-    @Test\n-    public void singleTouch_dragPointIntoTheWindow() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void singleTouch_dragPointIntoTheWindow(TestTouchDevice device) throws Exception {\n+        setUpScreen(device);\n@@ -106,3 +104,3 @@\n-        Assert.assertEquals(0, TestLogShim.countLogContaining(\"TouchPoint: PRESSED\"));\n-        Assert.assertEquals(0, TestLogShim.countLogContaining(\"TouchPoint: MOVED\"));\n-        Assert.assertEquals(0, TestLogShim.countLogContaining(\"TouchPoint: RELEASED\"));\n+        Assertions.assertEquals(0, TestLogShim.countLogContaining(\"TouchPoint: PRESSED\"));\n+        Assertions.assertEquals(0, TestLogShim.countLogContaining(\"TouchPoint: MOVED\"));\n+        Assertions.assertEquals(0, TestLogShim.countLogContaining(\"TouchPoint: RELEASED\"));\n@@ -111,1 +109,0 @@\n-    @Test\n@@ -119,1 +116,4 @@\n-    public void singleTouch_dragPointoutsideAwindow() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void singleTouch_dragPointoutsideAwindow(TestTouchDevice device) throws Exception {\n+        setUpScreen(device);\n@@ -142,1 +142,0 @@\n-     @Test\n@@ -149,1 +148,4 @@\n-    public void singleTouch_dragPointInandOutAwindow() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void singleTouch_dragPointInandOutAwindow(TestTouchDevice device) throws Exception {\n+        setUpScreen(device);\n@@ -181,1 +183,0 @@\n-     @Test\n@@ -188,2 +189,5 @@\n-    public void multiTouch_dragPointInandOutAwindow() throws Exception {\n-        Assume.assumeTrue(device.getPointCount() >= 2);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void multiTouch_dragPointInandOutAwindow(TestTouchDevice device) throws Exception {\n+        Assumptions.assumeTrue(device.getPointCount() >= 2);\n+        setUpScreen(device);\n@@ -223,3 +227,3 @@\n-        Assert.assertEquals(0, TestLogShim.countLogContaining(\"TouchPoint: PRESSED\"));\n-        Assert.assertEquals(0, TestLogShim.countLogContaining(\"TouchPoint: MOVED\"));\n-        Assert.assertEquals(0, TestLogShim.countLogContaining(\"TouchPoint: RELEASED\"));\n+        Assertions.assertEquals(0, TestLogShim.countLogContaining(\"TouchPoint: PRESSED\"));\n+        Assertions.assertEquals(0, TestLogShim.countLogContaining(\"TouchPoint: MOVED\"));\n+        Assertions.assertEquals(0, TestLogShim.countLogContaining(\"TouchPoint: RELEASED\"));\n@@ -227,2 +231,1 @@\n-    @Ignore(\"RT-38482\")\n-    @Test\n+\n@@ -234,2 +237,6 @@\n-    public void multiTouch_dragTwoPointsIntoTheWindow() throws Exception {\n-        Assume.assumeTrue(device.getPointCount() >= 2);\n+    @Disabled(\"RT-38482\")\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void multiTouch_dragTwoPointsIntoTheWindow(TestTouchDevice device) throws Exception {\n+        Assumptions.assumeTrue(device.getPointCount() >= 2);\n+        setUpScreen(device);\n@@ -257,1 +264,1 @@\n-        Assert.assertTrue(x1 < width && x2 < width);\n+        Assertions.assertTrue(x1 < width && x2 < width);\n@@ -287,2 +294,2 @@\n-        Assert.assertEquals(1, TestLogShim.countLogContaining(\"TouchPoint: PRESSED\"));\n-        Assert.assertEquals(1, TestLogShim.countLogContaining(\"TouchPoint: RELEASED\"));\n+        Assertions.assertEquals(1, TestLogShim.countLogContaining(\"TouchPoint: PRESSED\"));\n+        Assertions.assertEquals(1, TestLogShim.countLogContaining(\"TouchPoint: RELEASED\"));\n@@ -291,1 +298,1 @@\n-        Assert.assertEquals(0, TestLogShim.countLogContaining(\"TouchPoint: MOVED\"));\n+        Assertions.assertEquals(0, TestLogShim.countLogContaining(\"TouchPoint: MOVED\"));\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/DragTouchInAndOutAWindowTest.java","additions":45,"deletions":38,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -29,3 +29,3 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -36,1 +36,1 @@\n-public class FuzzyTapTest extends ParameterizedTestBase {\n+public final class FuzzyTapTest extends ParameterizedTestBase {\n@@ -38,6 +38,1 @@\n-    public FuzzyTapTest(TestTouchDevice device) {\n-        super(device);\n-    }\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n+    private static Collection<TestTouchDevice> parameters() {\n@@ -48,2 +43,4 @@\n-    @Test\n-    public void tap1() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tap1(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -62,2 +59,2 @@\n-        Assert.assertEquals(0, TestLogShim.countLogContaining(\"Mouse dragged:\"));\n-        Assert.assertEquals(0, TestLogShim.countLogContaining(\"Touch moved:\"));\n+        Assertions.assertEquals(0, TestLogShim.countLogContaining(\"Mouse dragged:\"));\n+        Assertions.assertEquals(0, TestLogShim.countLogContaining(\"Touch moved:\"));\n@@ -67,2 +64,4 @@\n-    @Test\n-    public void tap1a() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tap1a(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -82,2 +81,2 @@\n-        Assert.assertEquals(0, TestLogShim.countLogContaining(\"Mouse dragged:\"));\n-        Assert.assertEquals(0, TestLogShim.countLogContaining(\"Touch moved:\"));\n+        Assertions.assertEquals(0, TestLogShim.countLogContaining(\"Mouse dragged:\"));\n+        Assertions.assertEquals(0, TestLogShim.countLogContaining(\"Touch moved:\"));\n@@ -87,2 +86,4 @@\n-    @Test\n-    public void tap2() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tap2(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -103,1 +104,1 @@\n-        Assert.assertEquals(1, TestLogShim.countLogContaining(\"Mouse clicked:\"));\n+        Assertions.assertEquals(1, TestLogShim.countLogContaining(\"Mouse clicked:\"));\n@@ -107,2 +108,4 @@\n-    @Test\n-    public void tap2a() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tap2a(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -127,1 +130,1 @@\n-        Assert.assertEquals(1, TestLogShim.countLogContaining(\"Mouse clicked: \" + x1 + \", \" + y1));\n+        Assertions.assertEquals(1, TestLogShim.countLogContaining(\"Mouse clicked: \" + x1 + \", \" + y1));\n@@ -131,2 +134,4 @@\n-    @Test\n-    public void tap3b() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tap3b(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -162,1 +167,1 @@\n-        Assert.assertEquals(1, TestLogShim.countLogContaining(\"Mouse clicked: \" + x2 + \", \" + y2));\n+        Assertions.assertEquals(1, TestLogShim.countLogContaining(\"Mouse clicked: \" + x2 + \", \" + y2));\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/FuzzyTapTest.java","additions":32,"deletions":27,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -31,5 +31,4 @@\n-import org.junit.Assume;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runners.Parameterized;\n-import junit.framework.Assert;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -40,1 +39,1 @@\n-public class InputDevicePropertyTest  extends ParameterizedTestBase {\n+public final class InputDevicePropertyTest extends ParameterizedTestBase {\n@@ -42,6 +41,1 @@\n-    public InputDevicePropertyTest(TestTouchDevice device) {\n-        super(device);\n-    }\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n+    private static Collection<TestTouchDevice> parameters() {\n@@ -51,3 +45,5 @@\n-    @Before\n-    public void checkPlatform() throws Exception {\n-        Assume.assumeTrue(TestApplication.isMonocle() || TestApplication.isLens());\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void checkPlatform(TestTouchDevice device) throws Exception {\n+        Assumptions.assumeTrue(TestApplication.isMonocle() || TestApplication.isLens());\n+        createDevice(device, null);\n@@ -56,3 +52,5 @@\n-    @Test\n-    public void testTouch() throws Exception {\n-        TestRunnable.invokeAndWait(() -> Assert.assertTrue(Platform.isSupported(ConditionalFeature.INPUT_TOUCH)));\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTouch(TestTouchDevice device) throws Exception {\n+        checkPlatform(device);\n+        TestRunnable.invokeAndWait(() -> Assertions.assertTrue(Platform.isSupported(ConditionalFeature.INPUT_TOUCH)));\n@@ -61,3 +59,5 @@\n-    @Test\n-    public void testMultiTouch() throws Exception {\n-        TestRunnable.invokeAndWait(() -> Assert.assertEquals(device.getPointCount() > 1,\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testMultiTouch(TestTouchDevice device) throws Exception {\n+        checkPlatform(device);\n+        TestRunnable.invokeAndWait(() -> Assertions.assertEquals(device.getPointCount() > 1,\n@@ -68,3 +68,5 @@\n-    @Test\n-    public void testPointer() throws Exception {\n-        TestRunnable.invokeAndWait(() -> Assert.assertFalse(\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testPointer(TestTouchDevice device) throws Exception {\n+        checkPlatform(device);\n+        TestRunnable.invokeAndWait(() -> Assertions.assertFalse(\n@@ -73,1 +75,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/InputDevicePropertyTest.java","additions":26,"deletions":25,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -35,4 +35,4 @@\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TestName;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n@@ -40,2 +40,0 @@\n-import junit.framework.AssertionFailedError;\n-\n@@ -45,5 +43,2 @@\n-    @Rule\n-    public TestName name = new TestName();\n-\n-    @Before\n-    public void setUpScreen() throws Exception {\n+    @BeforeEach\n+    public void setUpScreen(TestInfo t) throws Exception {\n@@ -51,1 +46,2 @@\n-        TestLogShim.log(name.getMethodName());\n+        \/\/ get test name from the junit5\n+        TestLogShim.log(t.getDisplayName());\n@@ -87,1 +83,1 @@\n-            throw new AssertionFailedError(\"Disabled window should not receive mouse events!\");\n+            Assertions.fail(\"Disabled window should not receive mouse events!\");\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/ModalDialogTest.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -27,3 +27,3 @@\n-import org.junit.Assert;\n-import org.junit.Assume;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.Test;\n@@ -137,1 +137,1 @@\n-        Assume.assumeTrue(TestApplication.isMonocle());\n+        Assumptions.assumeTrue(TestApplication.isMonocle());\n@@ -143,3 +143,1 @@\n-                Assert.assertEquals(\"Code for character \"\n-                                    + ((int) ch) + \" ('\" + ch + \"')\",\n-                                    expectedCode, code);\n+                Assertions.assertEquals(expectedCode, code, \"Code for character \" + ((int) ch) + \" ('\" + ch + \"')\");\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/MonocleApplicationTest.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,6 +28,5 @@\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TestName;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n@@ -39,1 +38,0 @@\n-    @Rule public TestName name = new TestName();\n@@ -41,1 +39,2 @@\n-    @Before public void setUpScreen() throws Exception {\n+    @BeforeEach\n+    public void setUpScreen(TestInfo t) throws Exception {\n@@ -43,1 +42,2 @@\n-        TestLogShim.log(name.getMethodName());\n+        \/\/ get test name from the junit5\n+        TestLogShim.log(t.getDisplayName());\n@@ -63,1 +63,2 @@\n-    @After public void destroyDevice() throws Exception {\n+    @AfterEach\n+    public void destroyDevice() throws Exception {\n@@ -105,4 +106,3 @@\n-        Assert.assertTrue(\"Took \" + t + \"ms to send 3000 events, of which \"\n-                          + TestLogShim.countLogContaining(\"moved\")\n-                          + \" were received\",\n-                          t < 6000l * TestApplication.getTimeScale());\n+        Assertions.assertTrue(\n+            t < 6000l * TestApplication.getTimeScale(),\n+            \"Took \" + t + \"ms to send 3000 events, of which \" + TestLogShim.countLogContaining(\"moved\") + \" were received\");\n@@ -113,1 +113,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/MouseLagTest.java","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-import org.junit.Test;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -36,1 +36,1 @@\n-public class MultiTouch2Test extends ParameterizedTestBase {\n+public final class MultiTouch2Test extends ParameterizedTestBase {\n@@ -38,6 +38,1 @@\n-    public MultiTouch2Test(TestTouchDevice device) {\n-        super(device);\n-    }\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n+    private static Collection<TestTouchDevice> parameters() {\n@@ -47,2 +42,4 @@\n-    @Test\n-    public void twoFingerTap() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void twoFingerTap(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -74,2 +71,4 @@\n-    @Test\n-    public void pressTwoFingersReleaseOne() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void pressTwoFingersReleaseOne(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -116,3 +115,4 @@\n-    @Test\n-\/\/    @Ignore(\"RT-35546\")\n-    public void twoFingerDrag() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void twoFingerDrag(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -183,2 +183,4 @@\n-    @Test\n-    public void pressReleasePressTest() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void pressReleasePressTest(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -229,2 +231,4 @@\n-    @Test\n-    public void twoFingerDragSingleFingerTap() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void twoFingerDragSingleFingerTap(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -277,2 +281,4 @@\n-    @Test\n-    public void twoFingersPressDragOne() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void twoFingersPressDragOne(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/MultiTouch2Test.java","additions":28,"deletions":22,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-import org.junit.Test;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -36,1 +36,1 @@\n-public class MultiTouch3Test extends ParameterizedTestBase {\n+public final class MultiTouch3Test extends ParameterizedTestBase {\n@@ -38,6 +38,1 @@\n-    public MultiTouch3Test(TestTouchDevice device) {\n-        super(device);\n-    }\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n+    private static Collection<TestTouchDevice> parameters() {\n@@ -47,2 +42,0 @@\n-    @Test\n-\/\/    @Ignore(\"RT-35546\")\n@@ -56,1 +49,4 @@\n-    public void touchSequence() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void touchSequence(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/MultiTouch3Test.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -30,9 +30,3 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.internal.AssumptionViolatedException;\n-import org.junit.rules.TestName;\n-import org.junit.rules.TestWatchman;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.model.FrameworkMethod;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.TestInfo;\n@@ -42,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -45,2 +38,2 @@\n-    protected final TestTouchDevice device;\n-    protected final Rectangle2D stageBounds;\n+    protected TestTouchDevice device;\n+    private String testName;\n@@ -51,0 +44,3 @@\n+    \/**\n+     * There seems to be no need to handle assumptions this way in junit5.\n+     *\n@@ -64,0 +60,1 @@\n+    *\/\n@@ -65,6 +62,4 @@\n-    @Rule public TestName name = new TestName();\n-\n-\n-    public ParameterizedTestBase(TestTouchDevice device, Rectangle2D stageBounds) {\n-        this.device = device;\n-        this.stageBounds = stageBounds;\n+    \/\/ gets test name from the junit5 system\n+    @BeforeEach\n+    void getTestName(TestInfo t) {\n+        testName = t.getDisplayName();\n@@ -73,6 +68,4 @@\n-    public ParameterizedTestBase(TestTouchDevice device) {\n-        this(device, null);\n-    }\n-\n-    @Before\n-    public void createDevice() throws Exception {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    protected void createDevice(TestTouchDevice device, Rectangle2D stageBounds) throws Exception {\n+        this.device = device;\n@@ -80,1 +73,1 @@\n-        TestLogShim.log(\"Starting \" + name.getMethodName() + \"[\" + device + \"]\");\n+        TestLogShim.log(\"Starting \" + testName + \"[\" + device + \"]\");\n@@ -95,1 +88,1 @@\n-    @After\n+    @AfterEach\n@@ -108,1 +101,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/ParameterizedTestBase.java","additions":19,"deletions":27,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -32,3 +32,3 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -40,1 +40,1 @@\n-public class RapidTapTest extends ParameterizedTestBase {\n+public final class RapidTapTest extends ParameterizedTestBase {\n@@ -42,6 +42,1 @@\n-    public RapidTapTest(TestTouchDevice device) {\n-        super(device);\n-    }\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n+    private static Collection<TestTouchDevice> parameters() {\n@@ -52,2 +47,4 @@\n-    @Test\n-    public void tapTwentyTimes() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tapTwentyTimes(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -63,1 +60,1 @@\n-            Assert.assertEquals(20, TestLogShim.countLogContaining(\n+            Assertions.assertEquals(20, TestLogShim.countLogContaining(\n@@ -65,1 +62,1 @@\n-            Assert.assertEquals(20, TestLogShim.countLogContaining(\n+            Assertions.assertEquals(20, TestLogShim.countLogContaining(\n@@ -67,1 +64,1 @@\n-            Assert.assertEquals(20,\n+            Assertions.assertEquals(20,\n@@ -69,1 +66,1 @@\n-            Assert.assertEquals(20,\n+            Assertions.assertEquals(20,\n@@ -71,1 +68,1 @@\n-            Assert.assertEquals(20,\n+            Assertions.assertEquals(20,\n@@ -77,2 +74,4 @@\n-    @Test\n-    public void tapTwentyTimesUnderStress() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tapTwentyTimesUnderStress(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -103,5 +102,5 @@\n-                Assert.assertEquals(20, TestLogShim.countLogContaining(\"TouchPoint: PRESSED\"));\n-                Assert.assertEquals(20, TestLogShim.countLogContaining(\"TouchPoint: RELEASED\"));\n-                Assert.assertEquals(20, TestLogShim.countLogContaining(\"Mouse pressed\"));\n-                Assert.assertEquals(20, TestLogShim.countLogContaining(\"Mouse released\"));\n-                Assert.assertEquals(20, TestLogShim.countLogContaining(\"Mouse clicked\"));\n+                Assertions.assertEquals(20, TestLogShim.countLogContaining(\"TouchPoint: PRESSED\"));\n+                Assertions.assertEquals(20, TestLogShim.countLogContaining(\"TouchPoint: RELEASED\"));\n+                Assertions.assertEquals(20, TestLogShim.countLogContaining(\"Mouse pressed\"));\n+                Assertions.assertEquals(20, TestLogShim.countLogContaining(\"Mouse released\"));\n+                Assertions.assertEquals(20, TestLogShim.countLogContaining(\"Mouse clicked\"));\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/RapidTapTest.java","additions":23,"deletions":24,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -40,4 +40,3 @@\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TestName;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n@@ -52,4 +51,2 @@\n-    @Rule public TestName name = new TestName();\n-\n-    @Before\n-    public void setUpScreen() throws Exception {\n+    @BeforeEach\n+    public void setUpScreen(TestInfo t) throws Exception {\n@@ -57,1 +54,2 @@\n-        TestLogShim.log(name.getMethodName());\n+        \/\/ get test name from the junit5\n+        TestLogShim.log(t.getDisplayName());\n@@ -64,1 +62,1 @@\n-            assertTrue(\"Ctrl should be down\",evt.isControlDown());\n+            assertTrue(evt.isControlDown(), \"Ctrl should be down\");\n@@ -67,1 +65,1 @@\n-            assertTrue(\"Shift should be down\",evt.isShiftDown());\n+            assertTrue(evt.isShiftDown(), \"Shift should be down\");\n@@ -70,1 +68,1 @@\n-            assertTrue(\"Alt should be down\",evt.isAltDown());\n+            assertTrue(evt.isAltDown(), \"Alt should be down\");\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/RobotTest.java","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -29,7 +29,6 @@\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Assume;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -45,1 +44,1 @@\n-public class RotateTest extends ParameterizedTestBase {\n+public final class RotateTest extends ParameterizedTestBase {\n@@ -56,6 +55,1 @@\n-    public RotateTest(TestTouchDevice device) {\n-        super(device);\n-    }\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n+    private static Collection<TestTouchDevice> parameters() {\n@@ -65,2 +59,5 @@\n-    @Before\n-    public void init() {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void init(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n+        \n@@ -68,1 +65,2 @@\n-        Assume.assumeTrue(Boolean.getBoolean(\"com.sun.javafx.gestures.rotate\"));\n+        Assumptions.assumeTrue(Boolean.getBoolean(\"com.sun.javafx.gestures.rotate\"));\n+\n@@ -74,1 +72,1 @@\n-    @After\n+    @AfterEach\n@@ -128,1 +126,1 @@\n-        Assume.assumeTrue(getDistance(previousX, previousY, newX1, newY1 )\n+        Assumptions.assumeTrue(getDistance(previousX, previousY, newX1, newY1 )\n@@ -145,2 +143,2 @@\n-            Assert.assertEquals(0, TestLogShim.countLogContaining(\"Rotation started\"));\n-            Assert.assertEquals(0, TestLogShim.countLogContaining(\"Rotation, angle\"));\n+            Assertions.assertEquals(0, TestLogShim.countLogContaining(\"Rotation started\"));\n+            Assertions.assertEquals(0, TestLogShim.countLogContaining(\"Rotation, angle\"));\n@@ -194,1 +192,1 @@\n-            Assert.assertEquals(1, TestLogShim.countLogContaining(\"Rotation \"\n+            Assertions.assertEquals(1, TestLogShim.countLogContaining(\"Rotation \"\n@@ -199,1 +197,1 @@\n-            Assert.assertEquals(0, TestLogShim.countLogContaining(\"Rotation finished, \"\n+            Assertions.assertEquals(0, TestLogShim.countLogContaining(\"Rotation finished, \"\n@@ -231,2 +229,4 @@\n-    @Test\n-    public void testSmallStepRightNoRotateSent() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSmallStepRightNoRotateSent(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -240,2 +240,4 @@\n-    @Test\n-    public void testRotateRightByFewSmallSteps() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testRotateRightByFewSmallSteps(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -248,2 +250,4 @@\n-    @Test\n-    public void testRotateRight() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testRotateRight(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -256,2 +260,4 @@\n-    @Test\n-    public void testRotateRightBigSteps() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testRotateRightBigSteps(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -264,3 +270,5 @@\n-    @Test\n-    @Ignore \/\/RT-36616\n-    public void testRotateRightOneBigStep() throws Exception {\n+    @Disabled \/\/RT-36616\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testRotateRightOneBigStep(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -274,2 +282,4 @@\n-    @Test\n-    public void testSmallStepLeftNoRotateSent() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSmallStepLeftNoRotateSent(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -283,2 +293,4 @@\n-    @Test\n-    public void testRotateLeftByFewSmallSteps() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testRotateLeftByFewSmallSteps(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -291,2 +303,4 @@\n-    @Test\n-    public void testRotateLeft() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testRotateLeft(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -299,2 +313,4 @@\n-    @Test\n-    public void testRotateLeftBigSteps() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testRotateLeftBigSteps(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -307,3 +323,5 @@\n-    @Test\n-    @Ignore \/\/RT-36616\n-    public void testRotateLeftOneBigStep() throws Exception {\n+    @Disabled \/\/RT-36616\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testRotateLeftOneBigStep(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -316,2 +334,4 @@\n-    @Test\n-    public void testRotateRightFrom45Degrees() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testRotateRightFrom45Degrees(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -324,2 +344,4 @@\n-    @Test\n-    public void testRotateLeftFrom45Degrees() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testRotateLeftFrom45Degrees(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -332,2 +354,4 @@\n-    @Test\n-    public void testRotateRightFromMinus45Degrees() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testRotateRightFromMinus45Degrees(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -340,2 +364,4 @@\n-    @Test\n-    public void testRotateLeftFromMinus45Degrees() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testRotateLeftFromMinus45Degrees(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -348,2 +374,4 @@\n-    @Test\n-    public void testRotateRightFrom140Degrees() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testRotateRightFrom140Degrees(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -356,2 +384,4 @@\n-    @Test\n-    public void testRotateLeftFrom140Degrees() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testRotateLeftFrom140Degrees(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -364,2 +394,4 @@\n-    @Test\n-    public void testRotateRightFromMinus140Degrees() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testRotateRightFromMinus140Degrees(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -372,2 +404,4 @@\n-    @Test\n-    public void testRotateLeftFromMinus140Degrees() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testRotateLeftFromMinus140Degrees(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -376,1 +410,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/RotateTest.java","additions":95,"deletions":62,"binary":false,"changes":157,"status":"modified"},{"patch":"@@ -28,3 +28,4 @@\n-import org.junit.Assert;\n-import org.junit.Assume;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -39,4 +40,0 @@\n-    public ScrollTest(TestTouchDevice device) {\n-        super(device);\n-    }\n-\n@@ -51,2 +48,4 @@\n-    @Test\n-    public void testScrollUp() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testScrollUp(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -61,2 +60,4 @@\n-    @Test\n-    public void testScrollRight() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testScrollRight(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -71,2 +72,4 @@\n-    @Test\n-    public void testScrollDown() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testScrollDown(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -81,2 +84,4 @@\n-    @Test\n-    public void testScrollLeft() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testScrollLeft(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -91,2 +96,4 @@\n-    @Test\n-    public void testScrollUpAndRight() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testScrollUpAndRight(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -101,2 +108,4 @@\n-    @Test\n-    public void testScrollDownAndRight() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testScrollDownAndRight(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -111,2 +120,4 @@\n-    @Test\n-    public void testScrollDownAndLeft() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testScrollDownAndLeft(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -121,2 +132,4 @@\n-    @Test\n-    public void testScrollUpAndLeft() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testScrollUpAndLeft(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -131,3 +144,5 @@\n-    @Test\n-    public void testTwoFingersScrollUp() throws Exception {\n-        Assume.assumeTrue(device.getPointCount() >= 2);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTwoFingersScrollUp(TestTouchDevice device) throws Exception {\n+        Assumptions.assumeTrue(device.getPointCount() >= 2);\n+        init(device);\n@@ -143,3 +158,5 @@\n-    @Test\n-    public void testTwoFingersScrollTwice() throws Exception {\n-        Assume.assumeTrue(device.getPointCount() >= 2);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTwoFingersScrollTwice(TestTouchDevice device) throws Exception {\n+        Assumptions.assumeTrue(device.getPointCount() >= 2);\n+        init(device);\n@@ -156,3 +173,5 @@\n-    @Test\n-    public void testTwoFingersScroll1() throws Exception {\n-        Assume.assumeTrue(device.getPointCount() >= 2);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTwoFingersScroll1(TestTouchDevice device) throws Exception {\n+        Assumptions.assumeTrue(device.getPointCount() >= 2);\n+        init(device);\n@@ -170,4 +189,5 @@\n-    @Test\n-    public void testTwoFingersScroll2()\n-            throws Exception {\n-        Assume.assumeTrue(device.getPointCount() >= 2);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTwoFingersScroll2(TestTouchDevice device) throws Exception {\n+        Assumptions.assumeTrue(device.getPointCount() >= 2);\n+        init(device);\n@@ -187,4 +207,5 @@\n-    @Test\n-    public void testTwoFingersScroll3()\n-            throws Exception {\n-        Assume.assumeTrue(device.getPointCount() >= 2);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTwoFingersScroll3(TestTouchDevice device) throws Exception {\n+        Assumptions.assumeTrue(device.getPointCount() >= 2);\n+        init(device);\n@@ -204,3 +225,5 @@\n-    @Test\n-    public void testTwoFingersAsymmetricScroll() throws Exception {\n-        Assume.assumeTrue(device.getPointCount() >= 2);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testTwoFingersAsymmetricScroll(TestTouchDevice device) throws Exception {\n+        Assumptions.assumeTrue(device.getPointCount() >= 2);\n+        init(device);\n@@ -210,1 +233,1 @@\n-        Assert.assertTrue(paramsValid(0, deltaY1, numOfIterations,\n+        Assertions.assertTrue(paramsValid(0, deltaY1, numOfIterations,\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/ScrollTest.java","additions":67,"deletions":44,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -29,5 +29,3 @@\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Assume;\n-import org.junit.Before;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n@@ -43,0 +41,1 @@\n+    protected TestTouchDevice device;\n@@ -52,6 +51,1 @@\n-    public ScrollTestBase(TestTouchDevice device) {\n-        super(device);\n-    }\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n+    public static Collection<TestTouchDevice> parameters() {\n@@ -61,3 +55,5 @@\n-    @Before\n-    public void init() {\n-        Assume.assumeTrue(TestApplication.isMonocle());\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void init(TestTouchDevice device) throws Exception {\n+        this.device = device;\n+        Assumptions.assumeTrue(TestApplication.isMonocle());\n@@ -65,1 +61,4 @@\n-        Assume.assumeTrue(Boolean.getBoolean(\"com.sun.javafx.gestures.scroll\"));\n+        Assumptions.assumeTrue(Boolean.getBoolean(\"com.sun.javafx.gestures.scroll\"));\n+\n+        createDevice(device, null);\n+\n@@ -72,1 +71,1 @@\n-    @After\n+    @AfterEach\n@@ -102,1 +101,1 @@\n-        Assert.assertEquals(0, device.getPressedPoints());\n+        Assertions.assertEquals(0, device.getPressedPoints());\n@@ -110,1 +109,1 @@\n-        Assert.assertEquals(1, device.getPressedPoints());\n+        Assertions.assertEquals(1, device.getPressedPoints());\n@@ -130,2 +129,2 @@\n-        Assert.assertEquals(1, device.getPressedPoints());\n-        Assert.assertTrue(paramsValid(deltaX, deltaY, numOfIterations,\n+        Assertions.assertEquals(1, device.getPressedPoints());\n+        Assertions.assertTrue(paramsValid(deltaX, deltaY, numOfIterations,\n@@ -157,2 +156,2 @@\n-                Assert.assertEquals(0, TestLogShim.countLogContaining(\"Scroll started\"));\n-                Assert.assertEquals(0, TestLogShim.countLogContaining(\"Scroll, DeltaX:\"));\n+                Assertions.assertEquals(0, TestLogShim.countLogContaining(\"Scroll started\"));\n+                Assertions.assertEquals(0, TestLogShim.countLogContaining(\"Scroll, DeltaX:\"));\n@@ -220,2 +219,2 @@\n-        Assert.assertEquals(2, device.getPressedPoints());\n-        Assert.assertTrue(paramsValid(deltaX, deltaY, numOfIterations,\n+        Assertions.assertEquals(2, device.getPressedPoints());\n+        Assertions.assertTrue(paramsValid(deltaX, deltaY, numOfIterations,\n@@ -252,1 +251,1 @@\n-                Assert.assertEquals(0, TestLogShim.countLogContaining(\"Scroll \" +\n+                Assertions.assertEquals(0, TestLogShim.countLogContaining(\"Scroll \" +\n@@ -254,1 +253,1 @@\n-                Assert.assertEquals(0, TestLogShim.countLogContaining(\"Scroll, DeltaX:\"));\n+                Assertions.assertEquals(0, TestLogShim.countLogContaining(\"Scroll, DeltaX:\"));\n@@ -320,1 +319,1 @@\n-        Assert.assertEquals(1, device.getPressedPoints());\n+        Assertions.assertEquals(1, device.getPressedPoints());\n@@ -342,1 +341,1 @@\n-        Assert.assertEquals(expectedValue, TestLogShim.countLogContaining(expectedLog));\n+        Assertions.assertEquals(expectedValue, TestLogShim.countLogContaining(expectedLog));\n@@ -353,1 +352,1 @@\n-        Assert.assertEquals(2, device.getPressedPoints());\n+        Assertions.assertEquals(2, device.getPressedPoints());\n@@ -375,1 +374,1 @@\n-        Assert.assertEquals(expectedValue, TestLogShim.countLogContaining(expectedLog));\n+        Assertions.assertEquals(expectedValue, TestLogShim.countLogContaining(expectedLog));\n@@ -382,1 +381,1 @@\n-        Assert.assertEquals(2, device.getPressedPoints());\n+        Assertions.assertEquals(2, device.getPressedPoints());\n@@ -405,1 +404,1 @@\n-        Assert.assertEquals(expectedValue, TestLogShim.countLogContaining(expectedLog));\n+        Assertions.assertEquals(expectedValue, TestLogShim.countLogContaining(expectedLog));\n@@ -412,1 +411,1 @@\n-        Assert.assertEquals(0, device.getPressedPoints());\n+        Assertions.assertEquals(0, device.getPressedPoints());\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/ScrollTestBase.java","additions":32,"deletions":33,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -28,4 +28,4 @@\n-import org.junit.Assume;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -41,5 +41,1 @@\n-    public ScrollThresholdTest(TestTouchDevice device) {\n-        super(device);\n-    }\n-\n-    @BeforeClass\n+    @BeforeAll\n@@ -49,1 +45,1 @@\n-        Assume.assumeTrue(threshold > 1);\n+        Assumptions.assumeTrue(threshold > 1);\n@@ -54,1 +50,2 @@\n-    @Before\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n@@ -56,3 +53,3 @@\n-    public void init() {\n-        super.init();\n-        Assume.assumeTrue(device.getTapRadius() < getScrollThreshold());\n+    public void init(TestTouchDevice device) throws Exception {\n+        super.init(device);\n+        Assumptions.assumeTrue(device.getTapRadius() < getScrollThreshold());\n@@ -65,2 +62,4 @@\n-    @Test\n-    public void testMoveUpCheckThreshold() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testMoveUpCheckThreshold(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -77,2 +76,4 @@\n-    @Test\n-    public void testMoveDownCheckThreshold() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testMoveDownCheckThreshold(TestTouchDevice device) throws Exception {\n+        init(device);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/ScrollThresholdTest.java","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -30,7 +30,6 @@\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Assume;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TestName;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n@@ -43,1 +42,0 @@\n-    @Rule public TestName name = new TestName();\n@@ -45,1 +43,2 @@\n-    @Before public void setUpScreen() throws Exception {\n+    @BeforeEach\n+    public void setUpScreen(TestInfo t) throws Exception {\n@@ -47,1 +46,2 @@\n-        TestLogShim.log(name.getMethodName());\n+        \/\/ get test name from the junit5\n+        TestLogShim.log(t.getDisplayName());\n@@ -68,1 +68,2 @@\n-    @After public void destroyDevice() throws Exception {\n+    @AfterEach\n+    public void destroyDevice() throws Exception {\n@@ -135,1 +136,1 @@\n-                Assert.assertEquals(3, TestLogShim.countLogContaining(\"Scroll: 1\"));\n+                Assertions.assertEquals(3, TestLogShim.countLogContaining(\"Scroll: 1\"));\n@@ -149,1 +150,1 @@\n-                Assert.assertEquals(3, TestLogShim.countLogContaining(\"Scroll: -1\"));\n+                Assertions.assertEquals(3, TestLogShim.countLogContaining(\"Scroll: -1\"));\n@@ -178,1 +179,1 @@\n-        Assume.assumeTrue(TestApplication.isMonocle());\n+        Assumptions.assumeTrue(TestApplication.isMonocle());\n@@ -224,1 +225,1 @@\n-        Assert.assertTrue(TestLogShim.countLogContaining(\"Mouse dragged\") <= (x2 - x1) \/ 10);\n+        Assertions.assertTrue(TestLogShim.countLogContaining(\"Mouse dragged\") <= (x2 - x1) \/ 10);\n@@ -229,1 +230,1 @@\n-        Assume.assumeTrue(TestApplication.isMonocle());\n+        Assumptions.assumeTrue(TestApplication.isMonocle());\n@@ -268,1 +269,1 @@\n-        Assert.assertTrue(TestLogShim.countLogContaining(\"Mouse moved\") <= (x2 - x1) \/ 10);\n+        Assertions.assertTrue(TestLogShim.countLogContaining(\"Mouse moved\") <= (x2 - x1) \/ 10);\n@@ -270,3 +271,3 @@\n-        Assert.assertEquals(0, TestLogShim.countLogContaining(\"Mouse pressed\"));\n-        Assert.assertEquals(0, TestLogShim.countLogContaining(\"Mouse released\"));\n-        Assert.assertEquals(0, TestLogShim.countLogContaining(\"Mouse clicked\"));\n+        Assertions.assertEquals(0, TestLogShim.countLogContaining(\"Mouse pressed\"));\n+        Assertions.assertEquals(0, TestLogShim.countLogContaining(\"Mouse released\"));\n+        Assertions.assertEquals(0, TestLogShim.countLogContaining(\"Mouse clicked\"));\n@@ -320,1 +321,1 @@\n-        Assume.assumeTrue(TestApplication.isMonocle());\n+        Assumptions.assumeTrue(TestApplication.isMonocle());\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/SimpleMouseTest.java","additions":22,"deletions":21,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -33,4 +33,4 @@\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -41,1 +41,1 @@\n-public class SingleTouchNonFullScreenTest extends ParameterizedTestBase {\n+public final class SingleTouchNonFullScreenTest extends ParameterizedTestBase {\n@@ -75,10 +75,2 @@\n-    public SingleTouchNonFullScreenTest(TestTouchDevice device, TestCase testCase)\n-    {\n-        super(device, testCase.stageBounds);\n-        this.testCase = testCase;\n-        TestLogShim.format(\"Starting test with %s, %s\", device, testCase);\n-    }\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n-        List<Object[]> params = new ArrayList<>();\n+    private static Collection<Arguments> parameters() {\n+        List<Arguments> params = new ArrayList<>();\n@@ -88,1 +80,1 @@\n-                params.add(new Object[]{device, testCase});\n+                params.add(Arguments.of(device, testCase));\n@@ -94,2 +86,7 @@\n-    @Before\n-    public void addListener() throws Exception {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void init(TestTouchDevice device, TestCase testCase) throws Exception {\n+        this.testCase = testCase;\n+        TestLogShim.format(\"Starting test with %s, %s\", device, testCase);\n+        createDevice(device, testCase.stageBounds);\n+\n@@ -120,2 +117,4 @@\n-    @Test\n-    public void tap() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tap(TestTouchDevice device, TestCase testCase) throws Exception {\n+        init(device, testCase);\n@@ -125,2 +124,2 @@\n-        final int relX1 = x1 - (int) stageBounds.getMinX();\n-        final int relY1 = y1 - (int) stageBounds.getMinY();\n+        final int relX1 = x1 - (int) testCase.stageBounds.getMinX();\n+        final int relY1 = y1 - (int) testCase.stageBounds.getMinY();\n@@ -142,4 +141,6 @@\n-        Assert.assertEquals(\"Expected only one touch point\", 0,\n-                            TestLogShim.getLog().stream()\n-                            .filter(s -> s.startsWith(\"Touch points count\"))\n-                            .filter(s -> !s.startsWith(\"Touch points count: [1]\")).count());\n+        Assertions.assertEquals(\n+            0,\n+            TestLogShim.getLog().stream()\n+                .filter(s -> s.startsWith(\"Touch points count\"))\n+                .filter(s -> !s.startsWith(\"Touch points count: [1]\")).count(),\n+            \"Expected only one touch point\");\n@@ -151,2 +152,4 @@\n-    @Test\n-    public void tapAndDrag() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tapAndDrag(TestTouchDevice device, TestCase testCase) throws Exception {\n+        init(device, testCase);\n@@ -157,4 +160,4 @@\n-        final int relX1 = x1 - (int) stageBounds.getMinX();\n-        final int relY1 = y1 - (int) stageBounds.getMinY();\n-        final int relX2 = x2 - (int) stageBounds.getMinX();\n-        final int relY2 = y2 - (int) stageBounds.getMinY();\n+        final int relX1 = x1 - (int) testCase.stageBounds.getMinX();\n+        final int relY1 = y1 - (int) testCase.stageBounds.getMinY();\n+        final int relX2 = x2 - (int) testCase.stageBounds.getMinX();\n+        final int relY2 = y2 - (int) testCase.stageBounds.getMinY();\n@@ -181,4 +184,6 @@\n-        Assert.assertEquals(\"Expected only one touch point\", 0,\n-                            TestLogShim.getLog().stream()\n-                            .filter(s -> s.startsWith(\"Touch points count\"))\n-                            .filter(s -> !s.startsWith(\"Touch points count: [1]\")).count());\n+        Assertions.assertEquals(\n+            0,\n+            TestLogShim.getLog().stream()\n+                .filter(s -> s.startsWith(\"Touch points count\"))\n+                .filter(s -> !s.startsWith(\"Touch points count: [1]\")).count(),\n+                \"Expected only one touch point\");\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/SingleTouchNonFullScreenTest.java","additions":41,"deletions":36,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -32,5 +32,5 @@\n-import org.junit.Assert;\n-import org.junit.Assume;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -42,1 +42,1 @@\n-public class SingleTouchTest extends ParameterizedTestBase {\n+public final class SingleTouchTest extends ParameterizedTestBase {\n@@ -44,6 +44,1 @@\n-    public SingleTouchTest(TestTouchDevice device) {\n-        super(device);\n-    }\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n+    private static Collection<TestTouchDevice> parameters() {\n@@ -56,2 +51,4 @@\n-    @Test\n-    public void tap() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tap(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -73,4 +70,6 @@\n-        Assert.assertEquals(\"Expected only one touch point\", 0,\n-                            TestLogShim.getLog().stream()\n-                            .filter(s -> s.startsWith(\"Touch points count\"))\n-                            .filter(s -> !s.startsWith(\"Touch points count: [1]\")).count());\n+        Assertions.assertEquals(\n+            0,\n+            TestLogShim.getLog().stream()\n+                .filter(s -> s.startsWith(\"Touch points count\"))\n+                .filter(s -> !s.startsWith(\"Touch points count: [1]\")).count(),\n+            \"Expected only one touch point\");\n@@ -82,2 +81,4 @@\n-    @Test\n-    public void tapHoldRelease() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tapHoldRelease(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -103,2 +104,2 @@\n-        Assert.assertEquals(0, TestLogShim.countLogContaining(\"Mouse pressed:\"));\n-        Assert.assertEquals(0, TestLogShim.countLogContaining(\"Touch pressed:\"));\n+        Assertions.assertEquals(0, TestLogShim.countLogContaining(\"Mouse pressed:\"));\n+        Assertions.assertEquals(0, TestLogShim.countLogContaining(\"Touch pressed:\"));\n@@ -106,4 +107,6 @@\n-        Assert.assertEquals(\"Expected only one touch point\", 0,\n-                            TestLogShim.getLog().stream()\n-                            .filter(s -> s.startsWith(\"Touch points count\"))\n-                            .filter(s -> !s.startsWith(\"Touch points count: [1]\")).count());\n+        Assertions.assertEquals(\n+            0,\n+            TestLogShim.getLog().stream()\n+                .filter(s -> s.startsWith(\"Touch points count\"))\n+                .filter(s -> !s.startsWith(\"Touch points count: [1]\")).count(),\n+            \"Expected only one touch point\");\n@@ -115,2 +118,4 @@\n-    @Test\n-    public void tapAndDrag1() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tapAndDrag1(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -138,4 +143,6 @@\n-        Assert.assertEquals(\"Expected only one touch point\", 0,\n-                            TestLogShim.getLog().stream()\n-                            .filter(s -> s.startsWith(\"Touch points count\"))\n-                            .filter(s -> !s.startsWith(\"Touch points count: [1]\")).count());\n+        Assertions.assertEquals(\n+            0,\n+            TestLogShim.getLog().stream()\n+                .filter(s -> s.startsWith(\"Touch points count\"))\n+                .filter(s -> !s.startsWith(\"Touch points count: [1]\")).count(),\n+            \"Expected only one touch point\");\n@@ -147,2 +154,4 @@\n-    @Test\n-    public void tapAndDrag2() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tapAndDrag2(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -169,4 +178,6 @@\n-        Assert.assertEquals(\"Expected only one touch point\", 0,\n-                            TestLogShim.getLog().stream()\n-                            .filter(s -> s.startsWith(\"Touch points count\"))\n-                            .filter(s -> !s.startsWith(\"Touch points count: [1]\")).count());\n+        Assertions.assertEquals(\n+            0,\n+            TestLogShim.getLog().stream()\n+                .filter(s -> s.startsWith(\"Touch points count\"))\n+                .filter(s -> !s.startsWith(\"Touch points count: [1]\")).count(),\n+            \"Expected only one touch point\");\n@@ -178,2 +189,4 @@\n-    @Test\n-    public void tapAndDrag3() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tapAndDrag3(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -200,4 +213,6 @@\n-        Assert.assertEquals(\"Expected only one touch point\", 0,\n-                            TestLogShim.getLog().stream()\n-                            .filter(s -> s.startsWith(\"Touch points count\"))\n-                            .filter(s -> !s.startsWith(\"Touch points count: [1]\")).count());\n+        Assertions.assertEquals(\n+            0,\n+            TestLogShim.getLog().stream()\n+                .filter(s -> s.startsWith(\"Touch points count\"))\n+                .filter(s -> !s.startsWith(\"Touch points count: [1]\")).count(),\n+            \"Expected only one touch point\");\n@@ -209,3 +224,5 @@\n-    @Test\n-    public void tapWithTinyDrag() throws Exception {\n-        Assume.assumeTrue(device.getTapRadius() > 1);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tapWithTinyDrag(TestTouchDevice device) throws Exception {\n+        Assumptions.assumeTrue(device.getTapRadius() > 1);\n+        createDevice(device, null);\n@@ -230,2 +247,2 @@\n-        Assert.assertEquals(0l, TestLogShim.countLogContaining(\"Mouse dragged\"));\n-        Assert.assertEquals(0l, TestLogShim.countLogContaining(\"Touch moved\"));\n+        Assertions.assertEquals(0l, TestLogShim.countLogContaining(\"Mouse dragged\"));\n+        Assertions.assertEquals(0l, TestLogShim.countLogContaining(\"Touch moved\"));\n@@ -233,4 +250,6 @@\n-        Assert.assertEquals(\"Expected only one touch point\", 0,\n-                            TestLogShim.getLog().stream()\n-                            .filter(s -> s.startsWith(\"Touch points count\"))\n-                            .filter(s -> !s.startsWith(\"Touch points count: [1]\")).count());\n+        Assertions.assertEquals(\n+            0,\n+            TestLogShim.getLog().stream()\n+                .filter(s -> s.startsWith(\"Touch points count\"))\n+                .filter(s -> !s.startsWith(\"Touch points count: [1]\")).count(),\n+            \"Expected only one touch point\");\n@@ -242,3 +261,5 @@\n-    @Test\n-    public void tapDragReleaseTapAgain() throws Exception {\n-        Assume.assumeTrue(device.getTapRadius() < width * 0.2);\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tapDragReleaseTapAgain(TestTouchDevice device) throws Exception {\n+        Assumptions.assumeTrue(device.getTapRadius() < width * 0.2);\n+        createDevice(device, null);\n@@ -280,3 +301,5 @@\n-    @Ignore(\"RT-37283\")\n-    @Test\n-    public void testChangeSceneDuringTap() throws Exception {\n+    @Disabled(\"RT-37283\")\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testChangeSceneDuringTap(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -298,1 +321,1 @@\n-        Assert.assertEquals(1, TestLogShim.countLogContaining(\"Mouse clicked: \" + x1 +\", \" + y1));\n+        Assertions.assertEquals(1, TestLogShim.countLogContaining(\"Mouse clicked: \" + x1 +\", \" + y1));\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/SingleTouchTest.java","additions":83,"deletions":60,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -30,5 +30,4 @@\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -39,1 +38,1 @@\n-public class SwipeSimpleTest extends ParameterizedTestBase {\n+public final class SwipeSimpleTest extends ParameterizedTestBase {\n@@ -49,6 +48,1 @@\n-    public SwipeSimpleTest(TestTouchDevice device) {\n-        super(device);\n-    }\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n+    private static Collection<TestTouchDevice> parameters() {\n@@ -63,1 +57,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -68,2 +62,4 @@\n-    @Before\n-    public void addListener() throws Exception {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void init(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n@@ -81,1 +77,1 @@\n-        Assert.assertTrue(points.length > 1);\n+        Assertions.assertTrue(points.length > 1);\n@@ -101,1 +97,1 @@\n-            Assert.assertEquals(0, TestLogShim.countLogContaining(\"SWIPE\"));\n+            Assertions.assertEquals(0, TestLogShim.countLogContaining(\"SWIPE\"));\n@@ -105,2 +101,4 @@\n-    @Test\n-    public void testSwipeRight1() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSwipeRight1(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -112,2 +110,4 @@\n-    @Test\n-    public void testSwipeRight2() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSwipeRight2(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -119,2 +119,4 @@\n-    @Test\n-    public void testSwipeRight3() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSwipeRight3(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -126,2 +128,4 @@\n-    @Test\n-    public void testSwipeRight4() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSwipeRight4(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -133,2 +137,4 @@\n-    @Test\n-    public void testSwipeLeft1() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSwipeLeft1(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -140,2 +146,4 @@\n-    @Test\n-    public void testSwipeLeft2() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSwipeLeft2(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -147,2 +155,4 @@\n-    @Test\n-    public void testSwipeLeft3() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSwipeLeft3(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -154,2 +164,4 @@\n-    @Test\n-    public void testSwipeLeft4() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSwipeLeft4(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -161,2 +173,4 @@\n-    @Test\n-    public void testSwipeUp1() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSwipeUp1(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -168,2 +182,4 @@\n-    @Test\n-    public void testSwipeUp2() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSwipeUp2(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -175,2 +191,4 @@\n-    @Test\n-    public void testSwipeUp3() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSwipeUp3(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -182,2 +200,4 @@\n-    @Test\n-    public void testSwipeDown1() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSwipeDown1(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -189,2 +209,4 @@\n-    @Test\n-    public void testSwipeDown2() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSwipeDown2(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -196,2 +218,4 @@\n-    @Test\n-    public void testSwipeDown3() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSwipeDown3(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -203,2 +227,4 @@\n-    @Test\n-    public void testNoSwipeUp() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testNoSwipeUp(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -210,2 +236,4 @@\n-    @Test\n-    public void testNoSwipeRight() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testNoSwipeRight(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -217,2 +245,4 @@\n-    @Test\n-    public void testSwipeUp4Points() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSwipeUp4Points(TestTouchDevice device) throws Exception {\n+        init(device);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/SwipeSimpleTest.java","additions":81,"deletions":51,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -35,6 +35,6 @@\n-import org.junit.Assert;\n-import org.junit.Assume;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -47,1 +47,1 @@\n-public class SwipeTest extends ParameterizedTestBase {\n+public final class SwipeTest extends ParameterizedTestBase {\n@@ -120,15 +120,2 @@\n-    public SwipeTest(TestTouchDevice device, SwipeTestCase testCase) throws Exception {\n-        super(device);\n-        this.testCase = testCase;\n-        TestLogShim.format(\"Starting test with %s, %s\", device, testCase);\n-        TestApplication.getStage();\n-        TestRunnable.invokeAndWait(() -> {\n-            Assume.assumeTrue(\n-                    TestApplication.isMonocle() || TestApplication.isLens());\n-            Assume.assumeTrue(PlatformUtil.isEmbedded());\n-        });\n-    }\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n-        List<Object[]> params = new ArrayList<>();\n+    private static Collection<Arguments> parameters() {\n+        List<Arguments> params = new ArrayList<>();\n@@ -138,1 +125,1 @@\n-                params.add(new Object[] { device, testCase });\n+                params.add(Arguments.of(device, testCase));\n@@ -144,2 +131,13 @@\n-    @Before\n-    public void addListener() throws Exception {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void init(TestTouchDevice device, SwipeTestCase testCase) throws Exception {\n+        this.testCase = testCase;\n+        TestLogShim.format(\"Starting test with %s, %s\", device, testCase);\n+        TestApplication.getStage();\n+        TestRunnable.invokeAndWait(() -> {\n+            Assumptions.assumeTrue(TestApplication.isMonocle() || TestApplication.isLens());\n+            Assumptions.assumeTrue(PlatformUtil.isEmbedded());\n+        });\n+\n+        createDevice(device, null);\n+\n@@ -168,1 +166,3 @@\n-    private CountDownLatch generatePoints(int p,\n+    private CountDownLatch generatePoints(\n+                                TestTouchDevice device,\n+                                int p,\n@@ -216,3 +216,5 @@\n-    @Test\n-    @Ignore(\"RT-37709\")\n-    public void testSwipe() throws Exception {\n+    @Disabled(\"RT-37709\")\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSwipe(TestTouchDevice device, SwipeTestCase testCase) throws Exception {\n+        init(device, testCase);\n@@ -225,1 +227,1 @@\n-        generatePoints(p, x, y,\n+        generatePoints(device, p, x, y,\n@@ -241,1 +243,1 @@\n-            Assert.assertEquals(0, TestLogShim.countLogContaining(\"SWIPE\"));\n+            Assertions.assertEquals(0, TestLogShim.countLogContaining(\"SWIPE\"));\n@@ -244,1 +246,1 @@\n-            Assert.assertEquals(1, TestLogShim.countLogContaining(\"SWIPE\"));\n+            Assertions.assertEquals(1, TestLogShim.countLogContaining(\"SWIPE\"));\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/SwipeTest.java","additions":34,"deletions":32,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -28,2 +28,6 @@\n-import com.sun.glass.ui.monocle.TestLogShim;\n-import com.sun.glass.ui.monocle.TouchInputShim;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n@@ -45,8 +49,3 @@\n-import org.junit.Assert;\n-\n-import java.util.List;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.Semaphore;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-import java.util.function.Consumer;\n+import org.junit.jupiter.api.Assertions;\n+import com.sun.glass.ui.monocle.TestLogShim;\n+import com.sun.glass.ui.monocle.TouchInputShim;\n@@ -205,1 +204,1 @@\n-            Assert.fail(\"Unexpected exception: \" + ex);\n+            Assertions.fail(ex);\n@@ -362,1 +361,1 @@\n-            Assert.assertTrue(released.tryAcquire(3, TimeUnit.SECONDS));\n+            Assertions.assertTrue(released.tryAcquire(3, TimeUnit.SECONDS));\n@@ -369,2 +368,2 @@\n-                Assert.assertEquals(targetX, (int) robot.getMouseX());\n-                Assert.assertEquals(targetY, (int) robot.getMouseY());\n+                Assertions.assertEquals(targetX, (int) robot.getMouseX());\n+                Assertions.assertEquals(targetY, (int) robot.getMouseY());\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/TestApplication.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -36,4 +36,3 @@\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -45,1 +44,1 @@\n-public class TouchButtonTest extends ParameterizedTestBase {\n+public final class TouchButtonTest extends ParameterizedTestBase {\n@@ -51,6 +50,1 @@\n-    public TouchButtonTest(TestTouchDevice device) {\n-        super(device);\n-    }\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n+    private static Collection<TestTouchDevice> parameters() {\n@@ -78,2 +72,5 @@\n-    @Before\n-    public void createButtons() throws Exception {\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void init(TestTouchDevice device) throws Exception {\n+        this.device = device;\n+        createDevice(device, null);\n@@ -101,2 +98,4 @@\n-    @Test\n-    public void tapOnButton() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tapOnButton(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -109,2 +108,4 @@\n-    @Test\n-    public void tapOn2Buttons() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tapOn2Buttons(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -123,2 +124,4 @@\n-    @Test\n-    public void tapOutAndInButton() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tapOutAndInButton(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -132,2 +135,4 @@\n-    @Test\n-    public void tapOutInAndOutButton() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tapOutInAndOutButton(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -145,2 +150,4 @@\n-    @Test\n-    public void tapInAndOutLoop() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tapInAndOutLoop(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -179,2 +186,4 @@\n-    @Test\n-    public void tapAndDrag() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tapAndDrag(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -216,3 +225,5 @@\n-    @Ignore(\"RT-34625\")\n-    @Test\n-    public void tapAndDrag_fail() throws Exception {\n+    @Disabled(\"RT-34625\")\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tapAndDrag_fail(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -243,2 +254,4 @@\n-    @Test\n-    public void tapping_oneButtonOnScreen () throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void tapping_oneButtonOnScreen(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -330,1 +343,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/TouchButtonTest.java","additions":43,"deletions":31,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -31,4 +31,4 @@\n-import org.junit.Assert;\n-import org.junit.Assume;\n-import org.junit.Test;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -40,1 +40,1 @@\n-public class TouchEventLookaheadTest extends ParameterizedTestBase {\n+public final class TouchEventLookaheadTest extends ParameterizedTestBase {\n@@ -42,6 +42,1 @@\n-    public TouchEventLookaheadTest(TestTouchDevice device) {\n-        super(device);\n-    }\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n+    private static Collection<TestTouchDevice> parameters() {\n@@ -52,3 +47,5 @@\n-    @Test\n-    public void mergeMoves() throws Exception {\n-        Assume.assumeTrue(TestApplication.isMonocle());\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void mergeMoves(TestTouchDevice device) throws Exception {\n+        Assumptions.assumeTrue(TestApplication.isMonocle());\n+        createDevice(device, null);\n@@ -95,2 +92,2 @@\n-        Assert.assertTrue(TestLogShim.countLogContaining(\"Mouse dragged\") <= 3);\n-        Assert.assertTrue(TestLogShim.countLogContaining(\"Touch moved\") <= 3);\n+        Assertions.assertTrue(TestLogShim.countLogContaining(\"Mouse dragged\") <= 3);\n+        Assertions.assertTrue(TestLogShim.countLogContaining(\"Touch moved\") <= 3);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/TouchEventLookaheadTest.java","additions":13,"deletions":16,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n-import org.junit.Test;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -37,1 +37,1 @@\n-public class TouchExceptionTest extends ParameterizedTestBase {\n+public final class TouchExceptionTest extends ParameterizedTestBase {\n@@ -39,6 +39,1 @@\n-    public TouchExceptionTest(TestTouchDevice device) {\n-        super(device);\n-    }\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n+    private static Collection<TestTouchDevice> parameters() {\n@@ -49,2 +44,4 @@\n-    @Test\n-    public void testRuntimeException() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testRuntimeException(TestTouchDevice device) throws Exception {\n+        createDevice(device, null);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/TouchExceptionTest.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -30,6 +30,5 @@\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TestName;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n@@ -41,1 +40,0 @@\n-    @Rule public TestName name = new TestName();\n@@ -43,1 +41,2 @@\n-    @Before public void setUpScreen() throws Exception {\n+    @BeforeEach\n+    public void setUpScreen(TestInfo t) throws Exception {\n@@ -45,1 +44,2 @@\n-        TestLogShim.log(name.getMethodName());\n+        \/\/ get test name from the junit5\n+        TestLogShim.log(t.getDisplayName());\n@@ -85,1 +85,2 @@\n-    @After public void destroyDevice() throws Exception {\n+    @AfterEach\n+    public void destroyDevice() throws Exception {\n@@ -148,2 +149,1 @@\n-        Assert.assertTrue(\"Took \" + t + \"ms to send 3000 events\",\n-                          t < (long) (3000l * TestApplication.getTimeScale()));\n+        Assertions.assertTrue(t < (long) (3000l * TestApplication.getTimeScale()), \"Took \" + t + \"ms to send 3000 events\");\n@@ -227,2 +227,1 @@\n-        Assert.assertTrue(\"Took \" + t + \"ms to send 3000 events\",\n-                          t < (long) (3000l * TestApplication.getTimeScale()));\n+        Assertions.assertTrue(t < (long) (3000l * TestApplication.getTimeScale()), \"Took \" + t + \"ms to send 3000 events\");\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/TouchLagTest.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -30,4 +30,4 @@\n-import org.junit.Assert;\n-import org.junit.Assume;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n@@ -48,1 +48,1 @@\n-        Assume.assumeTrue(TestApplication.isMonocle());\n+        Assumptions.assumeTrue(TestApplication.isMonocle());\n@@ -99,1 +99,1 @@\n-        Assert.assertEquals(0, TestLogShim.countLog(\"Touch Pressed: 208, 195\"));\n+        Assertions.assertEquals(0, TestLogShim.countLog(\"Touch Pressed: 208, 195\"));\n@@ -104,1 +104,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/TouchPipelineTest.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.After;\n-import org.junit.Before;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n@@ -81,1 +81,1 @@\n-    @Before\n+    @BeforeEach\n@@ -90,1 +90,1 @@\n-    @After\n+    @AfterEach\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/TouchTestBase.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,4 +28,4 @@\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n@@ -52,1 +52,1 @@\n-    @After\n+    @AfterEach\n@@ -239,1 +239,1 @@\n-        Assert.assertEquals(0l, TestLogShim.countLogContaining(\"Key typed\"));\n+        Assertions.assertEquals(0l, TestLogShim.countLogContaining(\"Key typed\"));\n@@ -252,1 +252,1 @@\n-        Assert.assertEquals(0l, TestLogShim.countLogContaining(\"Key typed\"));\n+        Assertions.assertEquals(0l, TestLogShim.countLogContaining(\"Key typed\"));\n@@ -269,1 +269,1 @@\n-        Assert.assertEquals(0l, TestLogShim.countLogContaining(\"Key typed\"));\n+        Assertions.assertEquals(0l, TestLogShim.countLogContaining(\"Key typed\"));\n@@ -290,1 +290,1 @@\n-        Assert.assertEquals(0l, TestLogShim.countLogContaining(\"Key typed\"));\n+        Assertions.assertEquals(0l, TestLogShim.countLogContaining(\"Key typed\"));\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/USKeyboardTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,5 +29,4 @@\n-import org.junit.Assert;\n-import org.junit.Assume;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -39,1 +38,1 @@\n-public class ZoomTest extends ParameterizedTestBase {\n+public final class ZoomTest extends ParameterizedTestBase {\n@@ -41,6 +40,1 @@\n-    public ZoomTest(TestTouchDevice device) {\n-        super(device);\n-    }\n-\n-    @Parameterized.Parameters\n-    public static Collection<Object[]> data() {\n+    private static Collection<TestTouchDevice> parameters() {\n@@ -50,3 +44,6 @@\n-    @Before\n-    public void verifyZoomEnabled() {\n-        Assume.assumeTrue(Boolean.getBoolean(\"com.sun.javafx.gestures.zoom\"));\n+    \/\/ @BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void init(TestTouchDevice device) throws Exception {\n+        \/\/ verify zoom enabled\n+        Assumptions.assumeTrue(Boolean.getBoolean(\"com.sun.javafx.gestures.zoom\"));\n+        createDevice(device, null);\n@@ -58,1 +55,1 @@\n-        Assert.assertEquals(0, device.getPressedPoints());\n+        Assertions.assertEquals(0, device.getPressedPoints());\n@@ -72,2 +69,4 @@\n-    @Test\n-    public void testZoomInSmallStepBigStep() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testZoomInSmallStepBigStep(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -87,1 +86,1 @@\n-        Assume.assumeTrue(((y2 - y1) * threshold) > smallStep);\n+        Assumptions.assumeTrue(((y2 - y1) * threshold) > smallStep);\n@@ -108,1 +107,1 @@\n-        Assert.assertEquals(0, TestLogShim.countLogContaining(\"Zoom started\"));\n+        Assertions.assertEquals(0, TestLogShim.countLogContaining(\"Zoom started\"));\n@@ -159,1 +158,1 @@\n-        Assert.assertEquals(1, TestLogShim.countLogContaining(\"Mouse clicked: \"\n+        Assertions.assertEquals(1, TestLogShim.countLogContaining(\"Mouse clicked: \"\n@@ -167,2 +166,4 @@\n-    @Test\n-    public void testZoomIn() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testZoomIn(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -238,1 +239,1 @@\n-        Assert.assertEquals(1, TestLogShim.countLogContaining(\"Mouse clicked: \"\n+        Assertions.assertEquals(1, TestLogShim.countLogContaining(\"Mouse clicked: \"\n@@ -246,2 +247,4 @@\n-    @Test\n-    public void testZoomOut() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testZoomOut(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -336,1 +339,1 @@\n-        Assert.assertEquals(1, TestLogShim.countLogContaining(\"Mouse clicked: \"\n+        Assertions.assertEquals(1, TestLogShim.countLogContaining(\"Mouse clicked: \"\n@@ -346,2 +349,4 @@\n-    @Test\n-    public void testZoomOutSmallStepBigStep() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testZoomOutSmallStepBigStep(TestTouchDevice device) throws Exception {\n+        init(device);\n@@ -361,1 +366,1 @@\n-        Assume.assumeTrue(((y2 - y1) * threshold) > smallStep);\n+        Assumptions.assumeTrue(((y2 - y1) * threshold) > smallStep);\n@@ -384,1 +389,1 @@\n-        Assert.assertEquals(0, TestLogShim.countLogContaining(\"Zoom started\"));\n+        Assertions.assertEquals(0, TestLogShim.countLogContaining(\"Zoom started\"));\n@@ -454,1 +459,1 @@\n-        Assert.assertEquals(1, TestLogShim.countLogContaining(\"Mouse clicked: \"\n+        Assertions.assertEquals(1, TestLogShim.countLogContaining(\"Mouse clicked: \"\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/ZoomTest.java","additions":37,"deletions":32,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import test.robot.com.sun.glass.ui.monocle.TestApplication;\n-import test.robot.com.sun.glass.ui.monocle.UInput;\n-import org.junit.Assume;\n-\n@@ -34,0 +30,3 @@\n+import org.junit.jupiter.api.Assumptions;\n+import test.robot.com.sun.glass.ui.monocle.TestApplication;\n+import test.robot.com.sun.glass.ui.monocle.UInput;\n@@ -64,1 +63,1 @@\n-        Assume.assumeTrue(TestApplication.isMonocle());\n+        Assumptions.assumeTrue(TestApplication.isMonocle());\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/input\/devices\/DellP2714TDevice.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,0 @@\n-import test.robot.com.sun.glass.ui.monocle.TestApplication;\n-import com.sun.glass.ui.monocle.TestLogShim;\n-import test.robot.com.sun.glass.ui.monocle.UInput;\n-import org.junit.Assume;\n-\n@@ -35,0 +30,4 @@\n+import org.junit.jupiter.api.Assumptions;\n+import com.sun.glass.ui.monocle.TestLogShim;\n+import test.robot.com.sun.glass.ui.monocle.TestApplication;\n+import test.robot.com.sun.glass.ui.monocle.UInput;\n@@ -79,1 +78,1 @@\n-        Assume.assumeTrue(TestApplication.isMonocle());\n+        Assumptions.assumeTrue(TestApplication.isMonocle());\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/input\/devices\/EGalaxMultiTouchDeviceBase.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import org.junit.jupiter.api.Assumptions;\n@@ -30,1 +31,0 @@\n-import org.junit.Assume;\n@@ -46,1 +46,1 @@\n-        Assume.assumeTrue(TestApplication.isMonocle());\n+        Assumptions.assumeTrue(TestApplication.isMonocle());\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/input\/devices\/EGalaxSingleTouchDeviceBase.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import org.junit.jupiter.api.Assumptions;\n@@ -30,1 +31,0 @@\n-import org.junit.Assume;\n@@ -46,1 +46,1 @@\n-        Assume.assumeTrue(TestApplication.isMonocle());\n+        Assumptions.assumeTrue(TestApplication.isMonocle());\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/input\/devices\/SamsungLMS700KF07004Device.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import org.junit.jupiter.api.Assumptions;\n@@ -30,1 +31,0 @@\n-import org.junit.Assume;\n@@ -45,1 +45,1 @@\n-        Assume.assumeTrue(TestApplication.isMonocle());\n+        Assumptions.assumeTrue(TestApplication.isMonocle());\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/input\/devices\/SingleTouchDevice2.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -78,2 +78,2 @@\n-    public static Collection<Object[]> getTouchDeviceParameters(int minPoints) {\n-        Collection c = getTouchDevices().stream()\n+    public static Collection<TestTouchDevice> getTouchDeviceParameters(int minPoints) {\n+        return getTouchDevices().stream()\n@@ -81,1 +81,0 @@\n-                .map(d -> new Object[] { d })\n@@ -83,1 +82,0 @@\n-        return c;\n@@ -85,1 +83,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/input\/devices\/TestTouchDevices.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import test.robot.com.sun.glass.ui.monocle.TestApplication;\n-import test.robot.com.sun.glass.ui.monocle.UInput;\n-import org.junit.Assume;\n-\n@@ -34,0 +30,3 @@\n+import org.junit.jupiter.api.Assumptions;\n+import test.robot.com.sun.glass.ui.monocle.TestApplication;\n+import test.robot.com.sun.glass.ui.monocle.UInput;\n@@ -53,1 +52,1 @@\n-        Assume.assumeTrue(TestApplication.isMonocle());\n+        Assumptions.assumeTrue(TestApplication.isMonocle());\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/glass\/ui\/monocle\/input\/devices\/TouchRevolutionFusionDevice.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/prism\/NGNodeDirtyFlagTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,5 +28,5 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assume.assumeTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -36,0 +36,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -46,2 +47,3 @@\n-import org.junit.After;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -54,0 +56,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -99,1 +102,1 @@\n-    @After\n+    @AfterEach\n@@ -236,1 +239,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -241,1 +244,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -246,1 +249,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -251,1 +254,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -256,1 +259,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -261,1 +264,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -266,1 +269,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -271,1 +274,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -276,1 +279,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -281,1 +284,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -286,1 +289,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -291,1 +294,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -295,1 +298,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/helloworld\/CustomSecurityManagerTest.java","additions":23,"deletions":21,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -33,1 +34,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -39,0 +41,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -46,1 +49,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -64,1 +67,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -83,1 +86,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -115,1 +118,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/helloworld\/RectangleTest.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,5 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assume.assumeTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -36,1 +36,0 @@\n-\n@@ -40,5 +39,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +43,0 @@\n-\n@@ -58,1 +54,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -68,1 +64,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -85,1 +81,1 @@\n-    @Test(expected = IllegalStateException.class)\n+    @Test\n@@ -87,2 +83,4 @@\n-        \/\/ This should throw an exception\n-        Optional<Boolean> capsLockState = Platform.isKeyLocked(KeyCode.CAPS);\n+        assertThrows(IllegalStateException.class, () -> {\n+            \/\/ This should throw an exception\n+            Optional<Boolean> capsLockState = Platform.isKeyLocked(KeyCode.CAPS);\n+        });\n@@ -91,1 +89,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -93,3 +91,5 @@\n-        Util.runAndWait(() -> {\n-            \/\/ This should throw an exception\n-            Optional<Boolean> capsLockState = Platform.isKeyLocked(KeyCode.A);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Util.runAndWait(() -> {\n+                \/\/ This should throw an exception\n+                Optional<Boolean> capsLockState = Platform.isKeyLocked(KeyCode.A);\n+            });\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/application\/KeyLockedTest.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -28,4 +28,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-import static org.junit.Assume.assumeTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -51,3 +51,3 @@\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -72,1 +72,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -83,2 +83,1 @@\n-        assertTrue(\"Timeout waiting for Application to launch\",\n-                launchLatch.await(5 * TIMEOUT, TimeUnit.MILLISECONDS));\n+        assertTrue(launchLatch.await(5 * TIMEOUT, TimeUnit.MILLISECONDS), \"Timeout waiting for Application to launch\");\n@@ -103,1 +102,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/embed\/swing\/JFXPanelHiDPITest.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -28,4 +28,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-import static org.junit.Assume.assumeTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -46,3 +46,3 @@\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -64,1 +64,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -78,2 +78,1 @@\n-        assertTrue(\"Timeout waiting for Application to launch\",\n-                launchLatch.await(5 * TIMEOUT, TimeUnit.MILLISECONDS));\n+        assertTrue(launchLatch.await(5 * TIMEOUT, TimeUnit.MILLISECONDS), \"Timeout waiting for Application to launch\");\n@@ -82,1 +81,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/embed\/swing\/JFXPanelScaledTest.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,14 +27,0 @@\n-import com.sun.javafx.PlatformUtil;\n-import org.junit.Assume;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.AfterClass;\n-import org.junit.Test;\n-\n-import javafx.embed.swing.JFXPanel;\n-\n-import javax.swing.JFrame;\n-import javax.swing.JMenuBar;\n-import javax.swing.JMenu;\n-import javax.swing.JMenuItem;\n-import javax.swing.SwingUtilities;\n@@ -45,0 +31,12 @@\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.SwingUtilities;\n+import javafx.embed.swing.JFXPanel;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.PlatformUtil;\n@@ -51,1 +49,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -53,1 +51,1 @@\n-        Assume.assumeTrue(PlatformUtil.isMac());\n+        Assumptions.assumeTrue(PlatformUtil.isMac());\n@@ -94,1 +92,1 @@\n-        Assert.assertTrue(\"It seems FX initialization is deadlocked\", stop);\n+        Assertions.assertTrue(stop, \"It seems FX initialization is deadlocked\");\n@@ -97,1 +95,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/embed\/swing\/JFXPanelTest.java","additions":17,"deletions":19,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -40,4 +40,4 @@\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -53,1 +53,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -72,1 +72,1 @@\n-        Assert.assertFalse(\"Extra MouseEvent generated\", clickCount > 5);\n+        Assertions.assertFalse(clickCount > 5, \"Extra MouseEvent generated\");\n@@ -76,4 +76,3 @@\n-        Assert.assertTrue(String.format(\n-            \"unexpected error: waiting timeout %d ms elapsed for\",\n-            ms),\n-            latch.await(ms, TimeUnit.MILLISECONDS));\n+        Assertions.assertTrue(\n+            latch.await(ms, TimeUnit.MILLISECONDS),\n+            String.format(\"unexpected error: waiting timeout %d ms elapsed for\", ms));\n@@ -111,1 +110,1 @@\n-            Assert.fail(\"Exception while waiting for latch\");\n+            Assertions.fail(\"Exception while waiting for latch\");\n@@ -116,1 +115,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -118,1 +117,1 @@\n-        Assert.assertNotNull(frame);\n+        Assertions.assertNotNull(frame);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/embed\/swing\/NonFocusableJFXPanelTest.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import javafx.application.Platform;\n-import javafx.scene.Scene;\n-import javafx.scene.layout.Region;\n-\n@@ -37,4 +33,0 @@\n-\n-import javax.swing.JFrame;\n-import javax.swing.SwingUtilities;\n-\n@@ -43,1 +35,2 @@\n-\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n@@ -45,0 +38,1 @@\n+import javafx.application.Platform;\n@@ -46,4 +40,5 @@\n-import junit.framework.Assert;\n-\n-import org.junit.Test;\n-import org.junit.Ignore;\n+import javafx.scene.Scene;\n+import javafx.scene.layout.Region;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -55,1 +50,1 @@\n-@Ignore(\"RT-29515\")\n+@Disabled(\"RT-29515\")\n@@ -94,1 +89,1 @@\n-            Assert.fail(\"unexpected error: couldn't create java.awt.Robot: \" + ex);\n+            Assertions.fail(ex);\n@@ -98,1 +93,1 @@\n-        Assert.assertEquals(color, Color.GREEN);\n+        Assertions.assertEquals(color, Color.GREEN);\n@@ -107,1 +102,1 @@\n-            Assert.fail(\"unexpected error: waiting timeout \" + ms + \"ms elapsed for \" + latch);\n+            Assertions.fail(\"unexpected error: waiting timeout \" + ms + \"ms elapsed for \" + latch);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/embed\/swing\/RT23603Test.java","additions":13,"deletions":18,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -28,3 +28,5 @@\n-import static org.junit.Assume.assumeTrue;\n-import org.junit.Test;\n-import junit.framework.Assert;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -35,0 +37,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -37,1 +40,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -40,1 +43,1 @@\n-        Assert.assertTrue(RT30650GUI.test());\n+        Assertions.assertTrue(RT30650GUI.test());\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/embed\/swing\/RT30650Test.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -29,0 +29,5 @@\n+import java.util.concurrent.TimeUnit;\n+import javax.swing.JLabel;\n+import javax.swing.JMenuItem;\n+import javax.swing.JPopupMenu;\n+import javax.swing.SwingUtilities;\n@@ -34,6 +39,3 @@\n-import javax.swing.JLabel;\n-import javax.swing.JMenuItem;\n-import javax.swing.JPopupMenu;\n-import javax.swing.SwingUtilities;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -48,0 +50,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -61,2 +64,2 @@\n-    @Ignore(\"JDK-8153542\")\n-    @Test(timeout = 15000)\n+    @Disabled(\"JDK-8153542\")\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/embed\/swing\/RT32570Test.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-\n@@ -39,1 +38,0 @@\n-\n@@ -46,5 +44,3 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n@@ -67,1 +63,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -83,1 +79,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -211,2 +207,3 @@\n-            Assert.assertEquals(\"JDialog is not above JavaFX stage\",\n-                    java.awt.Color.BLUE, robot.getPixelColor(checkLoc, checkLoc));\n+            Assertions.assertEquals(\n+                java.awt.Color.BLUE, robot.getPixelColor(checkLoc, checkLoc),\n+                \"JDialog is not above JavaFX stage\");\n@@ -214,2 +211,3 @@\n-            Assert.assertFalse(\"JDialog is above JavaFX stage\",\n-                    java.awt.Color.BLUE.equals(robot.getPixelColor(checkLoc, checkLoc)));\n+            Assertions.assertFalse(\n+                java.awt.Color.BLUE.equals(robot.getPixelColor(checkLoc, checkLoc)),\n+                \"JDialog is above JavaFX stage\");\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/embed\/swing\/SwingNodeBase.java","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -28,4 +28,1 @@\n-import org.junit.Test;\n-import test.util.Util;\n-\n-import javax.swing.SwingUtilities;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -34,0 +31,5 @@\n+import java.util.concurrent.TimeUnit;\n+import javax.swing.SwingUtilities;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import test.util.Util;\n@@ -35,2 +37,1 @@\n-import static org.junit.Assume.assumeTrue;\n-\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -39,1 +40,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -50,1 +51,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -65,1 +66,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -78,1 +79,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -88,1 +89,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -99,1 +100,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -117,1 +118,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/embed\/swing\/SwingNodeJDialogTest.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,0 @@\n-import javafx.application.Platform;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import test.util.Util;\n-import javax.swing.SwingUtilities;\n@@ -35,0 +30,5 @@\n+import javax.swing.SwingUtilities;\n+import javafx.application.Platform;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import test.util.Util;\n@@ -39,1 +39,1 @@\n-    @Ignore(\"JDK-8190329\")\n+    @Disabled(\"JDK-8190329\")\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/embed\/swing\/SwingNodePlatformExitCrashTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,2 +27,1 @@\n-import static org.junit.Assume.assumeTrue;\n-\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -31,1 +30,0 @@\n-\n@@ -41,6 +39,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -48,1 +44,0 @@\n-\n@@ -83,1 +78,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -88,1 +83,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -96,1 +91,1 @@\n-        Assert.assertTrue(stage.isResizable());\n+        Assertions.assertTrue(stage.isResizable());\n@@ -124,1 +119,1 @@\n-        Assert.assertTrue(\"Window is not resized\", w && h);\n+        Assertions.assertTrue(w && h, \"Window is not resized\");\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/AfterModalClosedTest.java","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -29,3 +29,0 @@\n-\n-import com.sun.javafx.scene.control.ContextMenuContentShim;\n-\n@@ -33,0 +30,1 @@\n+import javafx.application.Platform;\n@@ -35,0 +33,1 @@\n+import javafx.scene.Scene;\n@@ -41,1 +40,0 @@\n-import javafx.application.Platform;\n@@ -43,1 +41,0 @@\n-import javafx.scene.Scene;\n@@ -47,6 +44,5 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import com.sun.javafx.scene.control.ContextMenuContentShim;\n@@ -131,2 +127,2 @@\n-        Assert.assertFalse(ContextMenuContentShim.isContextMenuUpArrowVisible(popup));\n-        Assert.assertTrue(ContextMenuContentShim.isContextMenuDownArrowVisible(popup));\n+        Assertions.assertFalse(ContextMenuContentShim.isContextMenuUpArrowVisible(popup));\n+        Assertions.assertTrue(ContextMenuContentShim.isContextMenuDownArrowVisible(popup));\n@@ -139,2 +135,2 @@\n-        Assert.assertTrue(ContextMenuContentShim.isContextMenuUpArrowVisible(popup));\n-        Assert.assertTrue(ContextMenuContentShim.isContextMenuDownArrowVisible(popup));\n+        Assertions.assertTrue(ContextMenuContentShim.isContextMenuUpArrowVisible(popup));\n+        Assertions.assertTrue(ContextMenuContentShim.isContextMenuDownArrowVisible(popup));\n@@ -146,2 +142,2 @@\n-        Assert.assertFalse(ContextMenuContentShim.isContextMenuUpArrowVisible(popup));\n-        Assert.assertFalse(ContextMenuContentShim.isContextMenuDownArrowVisible(popup));\n+        Assertions.assertFalse(ContextMenuContentShim.isContextMenuUpArrowVisible(popup));\n+        Assertions.assertFalse(ContextMenuContentShim.isContextMenuDownArrowVisible(popup));\n@@ -150,1 +146,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -155,1 +151,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/ChoiceBoxScrollUpOnCollectionChangeTest.java","additions":15,"deletions":19,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -38,6 +38,6 @@\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -111,1 +111,1 @@\n-        Assert.assertEquals(\"ColorPicker palette should be shown once.\", 1, onShownCount);\n+        Assertions.assertEquals(1, onShownCount, \"ColorPicker palette should be shown once.\");\n@@ -115,1 +115,1 @@\n-        Assert.assertEquals(\"ColorPicker palette should be clicked once.\", 1, onActionCount);\n+        Assertions.assertEquals(1, onActionCount, \"ColorPicker palette should be clicked once.\");\n@@ -120,1 +120,1 @@\n-        Assert.assertEquals(\"ColorPicker palette should have been shown two times.\", 2, onShownCount);\n+        Assertions.assertEquals(2, onShownCount, \"ColorPicker palette should have been shown two times.\");\n@@ -124,1 +124,1 @@\n-        Assert.assertEquals(\"ColorPicker palette have been clicked two times.\", 2, onActionCount);\n+        Assertions.assertEquals(2, onActionCount, \"ColorPicker palette have been clicked two times.\");\n@@ -128,1 +128,1 @@\n-        Assert.assertEquals(\"ColorPicker palette should have been shown three times.\", 3, onShownCount);\n+        Assertions.assertEquals(3, onShownCount, \"ColorPicker palette should have been shown three times.\");\n@@ -139,1 +139,1 @@\n-        Assert.assertEquals(\"ColorPicker palette should have been clicked three times.\", 3, onActionCount);\n+        Assertions.assertEquals(3, onActionCount, \"ColorPicker palette should have been clicked three times.\");\n@@ -142,1 +142,1 @@\n-    @After\n+    @AfterEach\n@@ -151,1 +151,1 @@\n-    @Before\n+    @BeforeEach\n@@ -167,1 +167,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -172,1 +172,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/ColorPickerTest.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-\n@@ -40,8 +39,6 @@\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -113,4 +110,6 @@\n-        Assert.assertEquals(\"ComboBox popup list should have been displayed \" +\n-            (ITEM_COUNT + 1) + \" times.\", (ITEM_COUNT + 1), onShownCount);\n-        Assert.assertEquals(\"ComboBox choice should have been selected \" +\n-            ITEM_COUNT + \" times.\", ITEM_COUNT, onSelectedCount);\n+        Assertions.assertEquals(\n+            (ITEM_COUNT + 1), onShownCount,\n+            \"ComboBox popup list should have been displayed \" + (ITEM_COUNT + 1) + \" times.\");\n+        Assertions.assertEquals(\n+            ITEM_COUNT, onSelectedCount,\n+            \"ComboBox choice should have been selected \" + ITEM_COUNT + \" times.\");\n@@ -156,4 +155,6 @@\n-        Assert.assertEquals(\"ComboBox popup list should be displayed \" +\n-            ITEM_COUNT + \" times.\", ITEM_COUNT, onShownCount);\n-        Assert.assertEquals(\"ComboBox choice should have been selected \" +\n-            ITEM_COUNT + \" times.\", ITEM_COUNT, onSelectedCount);\n+        Assertions.assertEquals(\n+            ITEM_COUNT, onShownCount,\n+            \"ComboBox popup list should be displayed \" + ITEM_COUNT + \" times.\");\n+        Assertions.assertEquals(\n+            ITEM_COUNT, onSelectedCount,\n+            \"ComboBox choice should have been selected \" + ITEM_COUNT + \" times.\");\n@@ -162,1 +163,1 @@\n-    @After\n+    @AfterEach\n@@ -169,1 +170,1 @@\n-    @Before\n+    @BeforeEach\n@@ -182,1 +183,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -187,1 +188,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/ComboBoxTest.java","additions":22,"deletions":21,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -29,1 +30,0 @@\n-\n@@ -33,0 +33,1 @@\n+import javafx.scene.Parent;\n@@ -37,1 +38,0 @@\n-import javafx.scene.Parent;\n@@ -42,8 +42,6 @@\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -51,1 +49,0 @@\n-\n@@ -54,2 +51,0 @@\n-import static org.junit.Assume.assumeTrue;\n-\n@@ -126,1 +121,1 @@\n-        Assert.assertEquals(0, onHiddenLatch.getCount());\n+        Assertions.assertEquals(0, onHiddenLatch.getCount());\n@@ -129,1 +124,1 @@\n-    @After\n+    @AfterEach\n@@ -137,1 +132,1 @@\n-    @Before\n+    @BeforeEach\n@@ -149,1 +144,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -154,1 +149,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/ContextMenuNPETest.java","additions":13,"deletions":18,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -27,2 +27,1 @@\n-import static org.junit.Assume.assumeTrue;\n-\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -30,1 +29,0 @@\n-\n@@ -41,8 +39,6 @@\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -50,1 +46,0 @@\n-\n@@ -120,1 +115,1 @@\n-        Assert.assertEquals(\"DatePicker calendar popup should be shown once.\", 1, onShownCount);\n+        Assertions.assertEquals(1, onShownCount, \"DatePicker calendar popup should be shown once.\");\n@@ -124,1 +119,1 @@\n-        Assert.assertEquals(\"DatePicker calendar popup should be clicked once.\", 1, onActionCount);\n+        Assertions.assertEquals(1, onActionCount, \"DatePicker calendar popup should be clicked once.\");\n@@ -129,1 +124,1 @@\n-        Assert.assertEquals(\"DatePicker calendar popup should have been shown two times.\", 2, onShownCount);\n+        Assertions.assertEquals(2, onShownCount, \"DatePicker calendar popup should have been shown two times.\");\n@@ -133,1 +128,1 @@\n-        Assert.assertEquals(\"DatePicker calendar popup have been clicked two times.\", 2, onActionCount);\n+        Assertions.assertEquals(2, onActionCount, \"DatePicker calendar popup have been clicked two times.\");\n@@ -137,1 +132,1 @@\n-        Assert.assertEquals(\"DatePicker calendar popup should have been shown three times.\", 3, onShownCount);\n+        Assertions.assertEquals(3, onShownCount, \"DatePicker calendar popup should have been shown three times.\");\n@@ -148,1 +143,1 @@\n-        Assert.assertEquals(\"DatePicker calendar popup should have been clicked three times.\", 3, onActionCount);\n+        Assertions.assertEquals(3, onActionCount, \"DatePicker calendar popup should have been clicked three times.\");\n@@ -151,1 +146,1 @@\n-    @After\n+    @AfterEach\n@@ -160,1 +155,1 @@\n-    @Before\n+    @BeforeEach\n@@ -176,1 +171,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -181,1 +176,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/DatePickerTest.java","additions":17,"deletions":22,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.util.concurrent.CountDownLatch;\n@@ -30,1 +29,1 @@\n-\n+import java.util.concurrent.CountDownLatch;\n@@ -32,0 +31,2 @@\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n@@ -38,1 +39,0 @@\n-import javafx.application.Platform;\n@@ -40,1 +40,0 @@\n-import javafx.scene.Scene;\n@@ -43,8 +42,6 @@\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -149,1 +146,1 @@\n-        Assert.assertNotEquals(oldDate, newDate);\n+        Assertions.assertNotEquals(oldDate, newDate);\n@@ -161,1 +158,1 @@\n-        Assert.assertFalse(LocalDate.now().isEqual(datePicker.getValue()));\n+        Assertions.assertFalse(LocalDate.now().isEqual(datePicker.getValue()));\n@@ -164,1 +161,1 @@\n-    @After\n+    @AfterEach\n@@ -175,1 +172,1 @@\n-    @Before\n+    @BeforeEach\n@@ -204,1 +201,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -209,1 +206,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/DatePickerUpdateOnAlertCloseTest.java","additions":15,"deletions":18,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,4 @@\n-import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n-import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n@@ -37,0 +39,1 @@\n+import javafx.scene.layout.HBox;\n@@ -39,2 +42,0 @@\n-import javafx.scene.layout.HBox;\n-import javafx.scene.layout.VBox;\n@@ -42,0 +43,1 @@\n+import javafx.scene.layout.VBox;\n@@ -44,3 +46,4 @@\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n@@ -48,1 +51,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -54,0 +56,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -81,1 +84,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/JDK8183100Test.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-\n+import java.util.concurrent.TimeUnit;\n@@ -35,6 +35,5 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -43,1 +42,1 @@\n-\n+@Timeout(value=120000, unit=TimeUnit.MILLISECONDS)\n@@ -58,1 +57,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -63,1 +62,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -68,1 +67,1 @@\n-    @Test(timeout = 120000)\n+    @Test\n@@ -122,2 +121,2 @@\n-        Assert.assertEquals(x, (int) robot.getMouseX());\n-        Assert.assertEquals(y, (int) robot.getMouseY());\n+        Assertions.assertEquals(x, (int) robot.getMouseX());\n+        Assertions.assertEquals(y, (int) robot.getMouseY());\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/MouseLocationOnScreenTest.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n-import static org.junit.Assert.fail;\n-\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -35,1 +34,0 @@\n-\n@@ -51,8 +49,6 @@\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -190,4 +186,4 @@\n-        Assert.assertEquals(exp.getRed(), act.getRed(), COMPARE_DELTA);\n-        Assert.assertEquals(exp.getBlue(), act.getBlue(), COMPARE_DELTA);\n-        Assert.assertEquals(exp.getGreen(), act.getGreen(), COMPARE_DELTA);\n-        Assert.assertEquals(exp.getOpacity(), act.getOpacity(), COMPARE_DELTA);\n+        Assertions.assertEquals(exp.getRed(), act.getRed(), COMPARE_DELTA);\n+        Assertions.assertEquals(exp.getBlue(), act.getBlue(), COMPARE_DELTA);\n+        Assertions.assertEquals(exp.getGreen(), act.getGreen(), COMPARE_DELTA);\n+        Assertions.assertEquals(exp.getOpacity(), act.getOpacity(), COMPARE_DELTA);\n@@ -289,1 +285,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -294,1 +290,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -299,1 +295,1 @@\n-    @Before\n+    @BeforeEach\n@@ -304,1 +300,1 @@\n-    @After\n+    @AfterEach\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/PixelBufferDrawTest.java","additions":15,"deletions":19,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-\n@@ -33,1 +32,0 @@\n-\n@@ -59,10 +57,8 @@\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.Assume;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -70,2 +66,0 @@\n-\n-import junit.framework.AssertionFailedError;\n@@ -143,1 +137,1 @@\n-    @Before\n+    @BeforeEach\n@@ -199,2 +193,3 @@\n-        Assert.assertEquals(\"letter 'a' should be \" + keyAction.name().toLowerCase() +\n-                \" by Robot\", \"a\", textField.getText());\n+        Assertions.assertEquals(\n+            \"a\", textField.getText(),\n+            \"letter 'a' should be \" + keyAction.name().toLowerCase() + \" by Robot\");\n@@ -205,1 +200,1 @@\n-        try {\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n@@ -207,4 +202,1 @@\n-        } catch (IllegalStateException e) {\n-            return;\n-        }\n-        Assert.fail(\"Expected IllegalStateException\");\n+        });\n@@ -215,7 +207,2 @@\n-        Util.runAndWait(() -> {\n-            try {\n-                robot.keyPress(null);\n-            } catch (NullPointerException e) {\n-                return;\n-            }\n-            Assert.fail(\"Expected NullPointerException\");\n+        Assertions.assertThrows(NullPointerException.class, () -> {\n+            robot.keyPress(null);\n@@ -227,1 +214,1 @@\n-        try {\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n@@ -229,4 +216,1 @@\n-        } catch (IllegalStateException e) {\n-            return;\n-        }\n-        Assert.fail(\"Expected IllegalStateException\");\n+        });\n@@ -238,1 +222,1 @@\n-            try {\n+            Assertions.assertThrows(NullPointerException.class, () -> {\n@@ -240,4 +224,1 @@\n-            } catch (NullPointerException e) {\n-                return;\n-            }\n-            Assert.fail(\"Expected NullPointerException\");\n+            });\n@@ -278,2 +259,2 @@\n-        Assert.assertEquals(x, (int) mousePosition.get().getX());\n-        Assert.assertEquals(y, (int) mousePosition.get().getY());\n+        Assertions.assertEquals(x, (int) mousePosition.get().getX());\n+        Assertions.assertEquals(y, (int) mousePosition.get().getY());\n@@ -284,1 +265,1 @@\n-        try {\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n@@ -286,4 +267,1 @@\n-        } catch (IllegalStateException e) {\n-            return;\n-        }\n-        Assert.fail(\"Expected IllegalStateException\");\n+        });\n@@ -295,1 +273,1 @@\n-            try {\n+            Assertions.assertThrows(NullPointerException.class, () -> {\n@@ -297,4 +275,1 @@\n-            } catch (NullPointerException e) {\n-                return;\n-            }\n-            Assert.fail(\"Expected NullPointerException\");\n+            });\n@@ -429,2 +404,3 @@\n-        Assert.assertEquals(mouseButton + \" mouse button should be \" + mouseAction.name().toLowerCase() + \" by Robot\",\n-                expectedText, button.getText());\n+        Assertions.assertEquals(\n+            expectedText, button.getText(),\n+            mouseButton + \" mouse button should be \" + mouseAction.name().toLowerCase() + \" by Robot\");\n@@ -435,1 +411,1 @@\n-        try {\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n@@ -437,4 +413,1 @@\n-        } catch (IllegalStateException e) {\n-            return;\n-        }\n-        Assert.fail(\"Expected IllegalStateException\");\n+        });\n@@ -446,1 +419,1 @@\n-            try {\n+            Assertions.assertThrows(NullPointerException.class, () -> {\n@@ -448,4 +421,1 @@\n-            } catch (NullPointerException e) {\n-                return;\n-            }\n-            Assert.fail(\"Expected NullPointerException\");\n+            });\n@@ -457,1 +427,1 @@\n-        try {\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n@@ -459,4 +429,1 @@\n-        } catch (IllegalStateException e) {\n-            return;\n-        }\n-        Assert.fail(\"Expected IllegalStateException\");\n+        });\n@@ -468,1 +435,1 @@\n-            try {\n+            Assertions.assertThrows(NullPointerException.class, () -> {\n@@ -470,4 +437,1 @@\n-            } catch (NullPointerException e) {\n-                return;\n-            }\n-            Assert.fail(\"Expected NullPointerException\");\n+            });\n@@ -479,1 +443,1 @@\n-        try {\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n@@ -481,4 +445,1 @@\n-        } catch (IllegalStateException e) {\n-            return;\n-        }\n-        Assert.fail(\"Expected IllegalStateException\");\n+        });\n@@ -490,1 +451,1 @@\n-            try {\n+            Assertions.assertThrows(NullPointerException.class, () -> {\n@@ -492,4 +453,1 @@\n-            } catch (NullPointerException e) {\n-                return;\n-            }\n-            Assert.fail(\"Expected NullPointerException\");\n+            });\n@@ -500,1 +458,1 @@\n-    @Ignore(\"Flaky - see JDK-8215376\")\n+    @Disabled(\"Flaky - see JDK-8215376\")\n@@ -506,1 +464,1 @@\n-    @Ignore(\"Flaky - see JDK-8215376\")\n+    @Disabled(\"Flaky - see JDK-8215376\")\n@@ -512,1 +470,1 @@\n-    @Ignore(\"Flaky - see JDK-8215376\")\n+    @Disabled(\"Flaky - see JDK-8215376\")\n@@ -514,1 +472,1 @@\n-        Assume.assumeTrue(!PlatformUtil.isMac() ); \/\/ See JDK-8215376\n+        Assumptions.assumeTrue(!PlatformUtil.isMac() ); \/\/ See JDK-8215376\n@@ -519,1 +477,1 @@\n-    @Ignore(\"Flaky - see JDK-8215376\")\n+    @Disabled(\"Flaky - see JDK-8215376\")\n@@ -521,1 +479,1 @@\n-        Assume.assumeTrue(!PlatformUtil.isMac()); \/\/ See JDK-8215376\n+        Assumptions.assumeTrue(!PlatformUtil.isMac()); \/\/ See JDK-8215376\n@@ -526,1 +484,1 @@\n-    @Ignore(\"Flaky - see JDK-8215376\")\n+    @Disabled(\"Flaky - see JDK-8215376\")\n@@ -528,1 +486,1 @@\n-        Assume.assumeTrue(!PlatformUtil.isMac()); \/\/ See JDK-8215376\n+        Assumptions.assumeTrue(!PlatformUtil.isMac()); \/\/ See JDK-8215376\n@@ -577,1 +535,1 @@\n-        Assume.assumeTrue(!PlatformUtil.isMac()); \/\/ See JDK-8214580\n+        Assumptions.assumeTrue(!PlatformUtil.isMac()); \/\/ See JDK-8214580\n@@ -621,2 +579,3 @@\n-        Assert.assertEquals(\"mouse wheel should be scrolled \" + amount + \" vertical units by Robot\",\n-                \"Scrolled \" + amount, button.getText());\n+        Assertions.assertEquals(\n+            \"Scrolled \" + amount, button.getText(),\n+            \"mouse wheel should be scrolled \" + amount + \" vertical units by Robot\");\n@@ -627,1 +586,1 @@\n-        try {\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n@@ -629,4 +588,1 @@\n-        } catch (IllegalStateException e) {\n-            return;\n-        }\n-        Assert.fail(\"Expected IllegalStateException\");\n+        });\n@@ -706,1 +662,1 @@\n-        try {\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n@@ -708,4 +664,1 @@\n-        } catch (IllegalStateException e) {\n-            return;\n-        }\n-        Assert.fail(\"Expected IllegalStateException\");\n+        });\n@@ -717,1 +670,1 @@\n-            try {\n+            Assertions.assertThrows(NullPointerException.class, () -> {\n@@ -719,4 +672,1 @@\n-            } catch (NullPointerException e) {\n-                return;\n-            }\n-            Assert.fail(\"Expected NullPointerException\");\n+            });\n@@ -766,2 +716,2 @@\n-        Assert.assertEquals((double) shouldBeWidth, screenCaptureNotScaledToFit.get().getWidth(), 0.0001);\n-        Assert.assertEquals((double) shouldBeHeight, screenCaptureNotScaledToFit.get().getHeight(), 0.0001);\n+        Assertions.assertEquals((double) shouldBeWidth, screenCaptureNotScaledToFit.get().getWidth(), 0.0001);\n+        Assertions.assertEquals((double) shouldBeHeight, screenCaptureNotScaledToFit.get().getHeight(), 0.0001);\n@@ -779,2 +729,2 @@\n-        Assert.assertEquals((double) WIDTH, screenCaptureScaledToFit.get().getWidth(), 0.0001);\n-        Assert.assertEquals((double) HEIGHT, screenCaptureScaledToFit.get().getHeight(), 0.0001);\n+        Assertions.assertEquals((double) WIDTH, screenCaptureScaledToFit.get().getWidth(), 0.0001);\n+        Assertions.assertEquals((double) HEIGHT, screenCaptureScaledToFit.get().getHeight(), 0.0001);\n@@ -791,1 +741,1 @@\n-        try {\n+        Assertions.assertThrows(IllegalStateException.class, () -> {\n@@ -793,4 +743,1 @@\n-        } catch (IllegalStateException e) {\n-            return;\n-        }\n-        Assert.fail(\"Expected IllegalStateException\");\n+        });\n@@ -802,1 +749,1 @@\n-            try {\n+            Assertions.assertThrows(NullPointerException.class, () -> {\n@@ -804,4 +751,1 @@\n-            } catch (NullPointerException e) {\n-                return;\n-            }\n-            Assert.fail(\"Expected NullPointerException\");\n+            });\n@@ -824,1 +768,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -829,1 +773,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -834,1 +778,1 @@\n-    @After\n+    @AfterEach\n@@ -847,1 +791,1 @@\n-            throw new AssertionFailedError(\"expected: \" + colorToString(expected)\n+            Assertions.fail(\"expected: \" + colorToString(expected)\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/RobotTest.java","additions":71,"deletions":127,"binary":false,"changes":198,"status":"modified"},{"patch":"@@ -28,0 +28,5 @@\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.color.ColorSpace;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.swing.SwingUtilities;\n@@ -40,5 +45,2 @@\n-\n-import java.awt.color.ColorSpace;\n-import java.awt.GraphicsEnvironment;\n-import javax.swing.SwingUtilities;\n-\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -48,6 +50,0 @@\n-\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import org.junit.Test;\n-import static org.junit.Assume.assumeTrue;\n-\n@@ -220,1 +216,2 @@\n-    @Test(timeout = 15000)\n+    @Test\n+    @Timeout(value=15)\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/SRGBTest.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assume.assumeTrue;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -40,4 +40,4 @@\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -105,6 +105,3 @@\n-        Assert.assertTrue(\"MOUSE_EXITED should be received when scene is \" +\n-            \" changed.\", mouseExited);\n-        Assert.assertTrue(\"scene.windowProperty() listener should be received\" +\n-            \"on scene change.\", windowChanged);\n-        Assert.assertTrue(\"MOUSE_EXITED should have been received before \" +\n-            \"scene.windowProperty().\", mouseWindowEventOrder);\n+        Assertions.assertTrue(mouseExited, \"MOUSE_EXITED should be received when scene is changed.\");\n+        Assertions.assertTrue(windowChanged, \"scene.windowProperty() listener should be received on scene change.\");\n+        Assertions.assertTrue(mouseWindowEventOrder, \"MOUSE_EXITED should have been received before scene.windowProperty().\");\n@@ -126,1 +123,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -132,1 +129,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/SceneChangeEventsTest.java","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -38,4 +38,4 @@\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -73,1 +73,1 @@\n-        Assert.assertTrue(slider.getTooltip().getConsumeAutoHidingEvents());\n+        Assertions.assertTrue(slider.getTooltip().getConsumeAutoHidingEvents());\n@@ -79,1 +79,1 @@\n-        Assert.assertTrue(slider.getTooltip().getConsumeAutoHidingEvents());\n+        Assertions.assertTrue(slider.getTooltip().getConsumeAutoHidingEvents());\n@@ -160,1 +160,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -165,1 +165,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/SliderTooltipNPETest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-\n@@ -41,8 +40,6 @@\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -83,1 +80,1 @@\n-            Assert.assertEquals(expectedTabCount[i], tabPane.getTabs().size());\n+            Assertions.assertEquals(expectedTabCount[i], tabPane.getTabs().size());\n@@ -107,1 +104,1 @@\n-    @After\n+    @AfterEach\n@@ -115,1 +112,1 @@\n-    @Before\n+    @BeforeEach\n@@ -124,1 +121,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -129,1 +126,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TabContextMenuCloseButtonTest.java","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n-import static org.junit.Assert.fail;\n-import static org.junit.Assume.assumeTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -42,6 +42,6 @@\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -147,3 +147,4 @@\n-        Assert.assertEquals(\"Expected \" + expectedTab.getText() + \" to be \"\n-            + \"first tab after reordering.\", expectedTab.getText(), selectedTab.getText());\n-        Assert.assertTrue(\"Incorrect permutation change received\", listenerTestResult);\n+        Assertions.assertEquals(\n+            expectedTab.getText(), selectedTab.getText(),\n+            \"Expected \" + expectedTab.getText() + \" to be first tab after reordering.\");\n+        Assertions.assertTrue(listenerTestResult, \"Incorrect permutation change received\");\n@@ -162,3 +163,4 @@\n-        Assert.assertEquals(\"Expected \" + expectedTab.getText() + \" to be \"\n-            + \"first tab after reordering.\", expectedTab.getText(), selectedTab.getText());\n-        Assert.assertTrue(\"Incorrect permutation change received\", listenerTestResult);\n+        Assertions.assertEquals(\n+            expectedTab.getText(), selectedTab.getText(),\n+            \"Expected \" + expectedTab.getText() + \" to be first tab after reordering.\");\n+        Assertions.assertTrue(listenerTestResult, \"Incorrect permutation change received\");\n@@ -177,3 +179,4 @@\n-        Assert.assertEquals(\"Expected \" + expectedTab.getText() + \" to be \"\n-            + \"first tab after reordering.\", expectedTab.getText(), selectedTab.getText());\n-        Assert.assertTrue(\"Incorrect permutation change received\", listenerTestResult);\n+        Assertions.assertEquals(\n+            expectedTab.getText(), selectedTab.getText(),\n+            \"Expected \" + expectedTab.getText() + \" to be first tab after reordering.\");\n+        Assertions.assertTrue(listenerTestResult, \"Incorrect permutation change received\");\n@@ -192,3 +195,4 @@\n-        Assert.assertEquals(\"Expected \" + expectedTab.getText() + \" to be \"\n-            + \"first tab after reordering.\", expectedTab.getText(), selectedTab.getText());\n-        Assert.assertTrue(\"Incorrect permutation change received\", listenerTestResult);\n+        Assertions.assertEquals(\n+            expectedTab.getText(), selectedTab.getText(),\n+            \"Expected \" + expectedTab.getText() + \" to be first tab after reordering.\");\n+        Assertions.assertTrue(listenerTestResult, \"Incorrect permutation change received\");\n@@ -206,3 +210,4 @@\n-        Assert.assertEquals(\"Expected \" + expectedTab.getText() + \" to remain \"\n-            + \"first tab.\", expectedTab.getText(), selectedTab.getText());\n-        Assert.assertTrue(\"Change event should not be received\", listenerTestResult);\n+        Assertions.assertEquals(\n+            expectedTab.getText(), selectedTab.getText(),\n+            \"Expected \" + expectedTab.getText() + \" to remain first tab.\");\n+        Assertions.assertTrue(listenerTestResult, \"Change event should not be received\");\n@@ -220,3 +225,4 @@\n-        Assert.assertEquals(\"Expected \" + expectedTab.getText() + \" to remain \"\n-            + \"first tab.\", expectedTab.getText(), selectedTab.getText());\n-        Assert.assertTrue(\"Change event should not be received\", listenerTestResult);\n+        Assertions.assertEquals(\n+            expectedTab.getText(), selectedTab.getText(),\n+            \"Expected \" + expectedTab.getText() + \" to remain first tab.\");\n+        Assertions.assertTrue(listenerTestResult, \"Change event should not be received\");\n@@ -234,3 +240,4 @@\n-        Assert.assertEquals(\"Expected \" + expectedTab.getText() + \" to remain \"\n-            + \"first tab.\", expectedTab.getText(), selectedTab.getText());\n-        Assert.assertTrue(\"Change event should not be received\", listenerTestResult);\n+        Assertions.assertEquals(\n+            expectedTab.getText(), selectedTab.getText(),\n+            \"Expected \" + expectedTab.getText() + \" to remain first tab.\");\n+        Assertions.assertTrue(listenerTestResult, \"Change event should not be received\");\n@@ -248,3 +255,4 @@\n-        Assert.assertEquals(\"Expected \" + expectedTab.getText() + \" to remain \"\n-            + \"first tab.\", expectedTab.getText(), selectedTab.getText());\n-        Assert.assertTrue(\"Change event should not be received\", listenerTestResult);\n+        Assertions.assertEquals(\n+            expectedTab.getText(), selectedTab.getText(),\n+            \"Expected \" + expectedTab.getText() + \" to remain first tab.\");\n+        Assertions.assertTrue(listenerTestResult, \"Change event should not be received\");\n@@ -343,1 +351,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -348,1 +356,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -353,1 +361,1 @@\n-    @Before\n+    @BeforeEach\n@@ -377,1 +385,1 @@\n-    @After\n+    @AfterEach\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TabPaneDragPolicyTest.java","additions":44,"deletions":36,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-\n@@ -43,8 +42,6 @@\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -184,2 +181,2 @@\n-        Assert.assertFalse(\"Tabs should not be reordered.\", isTabListReorderd);\n-        Assert.assertEquals(tabOrder, currentTabOrder);\n+        Assertions.assertFalse(isTabListReorderd, \"Tabs should not be reordered.\");\n+        Assertions.assertEquals(tabOrder, currentTabOrder);\n@@ -205,1 +202,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -210,1 +207,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -215,1 +212,1 @@\n-    @Before\n+    @BeforeEach\n@@ -241,1 +238,1 @@\n-    @After\n+    @AfterEach\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TabPaneReorderTest.java","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import javafx.geometry.Point3D;\n+import javafx.scene.Node;\n@@ -36,0 +38,1 @@\n+import javafx.scene.input.PickResult;\n@@ -44,6 +47,6 @@\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -52,4 +55,0 @@\n-import javafx.scene.input.PickResult;\n-import javafx.scene.Node;\n-import javafx.geometry.Point3D;\n-\n@@ -276,1 +275,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex);\n+                Assertions.assertEquals(charIndex, insertionIndex);\n@@ -278,1 +277,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex - 1);\n+                Assertions.assertEquals(charIndex, insertionIndex - 1);\n@@ -280,1 +279,1 @@\n-            Assert.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n+            Assertions.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n@@ -297,1 +296,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex);\n+                Assertions.assertEquals(charIndex, insertionIndex);\n@@ -299,1 +298,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex - 2);\n+                Assertions.assertEquals(charIndex, insertionIndex - 2);\n@@ -301,1 +300,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex - 1);\n+                Assertions.assertEquals(charIndex, insertionIndex - 1);\n@@ -303,1 +302,1 @@\n-            Assert.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n+            Assertions.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n@@ -320,1 +319,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex);\n+                Assertions.assertEquals(charIndex, insertionIndex);\n@@ -322,1 +321,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex - 2);\n+                Assertions.assertEquals(charIndex, insertionIndex - 2);\n@@ -324,1 +323,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex - 1);\n+                Assertions.assertEquals(charIndex, insertionIndex - 1);\n@@ -326,1 +325,1 @@\n-            Assert.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n+            Assertions.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n@@ -343,1 +342,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex);\n+                Assertions.assertEquals(charIndex, insertionIndex);\n@@ -345,1 +344,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex - 2);\n+                Assertions.assertEquals(charIndex, insertionIndex - 2);\n@@ -348,1 +347,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex - 1);\n+                Assertions.assertEquals(charIndex, insertionIndex - 1);\n@@ -350,1 +349,1 @@\n-            Assert.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n+            Assertions.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n@@ -368,1 +367,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex);\n+                    Assertions.assertEquals(charIndex, insertionIndex);\n@@ -370,1 +369,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex - 2);\n+                    Assertions.assertEquals(charIndex, insertionIndex - 2);\n@@ -372,1 +371,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex - 1);\n+                    Assertions.assertEquals(charIndex, insertionIndex - 1);\n@@ -374,1 +373,1 @@\n-                Assert.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n+                Assertions.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n@@ -393,1 +392,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex);\n+                    Assertions.assertEquals(charIndex, insertionIndex);\n@@ -395,1 +394,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex - 2);\n+                    Assertions.assertEquals(charIndex, insertionIndex - 2);\n@@ -397,1 +396,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex - 1);\n+                    Assertions.assertEquals(charIndex, insertionIndex - 1);\n@@ -399,1 +398,1 @@\n-                Assert.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n+                Assertions.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n@@ -418,1 +417,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex);\n+                    Assertions.assertEquals(charIndex, insertionIndex);\n@@ -420,1 +419,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex - 2);\n+                    Assertions.assertEquals(charIndex, insertionIndex - 2);\n@@ -422,1 +421,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex - 1);\n+                    Assertions.assertEquals(charIndex, insertionIndex - 1);\n@@ -424,1 +423,1 @@\n-                Assert.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n+                Assertions.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n@@ -443,1 +442,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex);\n+                    Assertions.assertEquals(charIndex, insertionIndex);\n@@ -445,1 +444,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex - 2);\n+                    Assertions.assertEquals(charIndex, insertionIndex - 2);\n@@ -447,1 +446,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex - 1);\n+                    Assertions.assertEquals(charIndex, insertionIndex - 1);\n@@ -449,1 +448,1 @@\n-                Assert.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n+                Assertions.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n@@ -467,1 +466,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex);\n+                    Assertions.assertEquals(charIndex, insertionIndex);\n@@ -469,1 +468,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex - 2);\n+                    Assertions.assertEquals(charIndex, insertionIndex - 2);\n@@ -471,1 +470,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex - 1);\n+                    Assertions.assertEquals(charIndex, insertionIndex - 1);\n@@ -473,1 +472,1 @@\n-                Assert.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n+                Assertions.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n@@ -491,1 +490,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex);\n+                    Assertions.assertEquals(charIndex, insertionIndex);\n@@ -493,1 +492,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex - 2);\n+                    Assertions.assertEquals(charIndex, insertionIndex - 2);\n@@ -495,1 +494,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex - 1);\n+                    Assertions.assertEquals(charIndex, insertionIndex - 1);\n@@ -497,1 +496,1 @@\n-                Assert.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n+                Assertions.assertTrue(charIndex < Math.max(textOneLength, textTwoLength));\n@@ -517,1 +516,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex);\n+                    Assertions.assertEquals(charIndex, insertionIndex);\n@@ -519,1 +518,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex - 2);\n+                    Assertions.assertEquals(charIndex, insertionIndex - 2);\n@@ -521,1 +520,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex - 1);\n+                    Assertions.assertEquals(charIndex, insertionIndex - 1);\n@@ -523,1 +522,1 @@\n-                Assert.assertTrue(charIndex < Math.max(textThreeLength, Math.max(textOneLength, textTwoLength)));\n+                Assertions.assertTrue(charIndex < Math.max(textThreeLength, Math.max(textOneLength, textTwoLength)));\n@@ -553,1 +552,1 @@\n-    @After\n+    @AfterEach\n@@ -560,1 +559,1 @@\n-    @Before\n+    @BeforeEach\n@@ -567,1 +566,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -576,1 +575,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TextCharacterIndexTest.java","additions":56,"deletions":57,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -43,6 +43,6 @@\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -192,2 +192,2 @@\n-        Assert.assertTrue(isLeading);\n-        Assert.assertEquals(charIndex, insertionIndex);\n+        Assertions.assertTrue(isLeading);\n+        Assertions.assertEquals(charIndex, insertionIndex);\n@@ -196,2 +196,2 @@\n-        Assert.assertFalse(isLeading);\n-        Assert.assertEquals(charIndex, insertionIndex - 2);\n+        Assertions.assertFalse(isLeading);\n+        Assertions.assertEquals(charIndex, insertionIndex - 2);\n@@ -210,1 +210,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex);\n+                Assertions.assertEquals(charIndex, insertionIndex);\n@@ -212,1 +212,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex - 2);\n+                Assertions.assertEquals(charIndex, insertionIndex - 2);\n@@ -228,1 +228,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex);\n+                Assertions.assertEquals(charIndex, insertionIndex);\n@@ -230,1 +230,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex - 1);\n+                Assertions.assertEquals(charIndex, insertionIndex - 1);\n@@ -232,1 +232,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex - 2);\n+                Assertions.assertEquals(charIndex, insertionIndex - 2);\n@@ -249,1 +249,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex);\n+                Assertions.assertEquals(charIndex, insertionIndex);\n@@ -251,1 +251,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex - 2);\n+                Assertions.assertEquals(charIndex, insertionIndex - 2);\n@@ -253,1 +253,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex - 1);\n+                Assertions.assertEquals(charIndex, insertionIndex - 1);\n@@ -268,1 +268,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex);\n+                Assertions.assertEquals(charIndex, insertionIndex);\n@@ -270,1 +270,1 @@\n-                Assert.assertEquals(charIndex, insertionIndex - 1);\n+                Assertions.assertEquals(charIndex, insertionIndex - 1);\n@@ -285,1 +285,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex);\n+                    Assertions.assertEquals(charIndex, insertionIndex);\n@@ -287,1 +287,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex - 2);\n+                    Assertions.assertEquals(charIndex, insertionIndex - 2);\n@@ -289,1 +289,1 @@\n-                    Assert.assertEquals(charIndex, insertionIndex - 1);\n+                    Assertions.assertEquals(charIndex, insertionIndex - 1);\n@@ -311,1 +311,1 @@\n-        Assert.assertTrue(insertionIndex >= 0);\n+        Assertions.assertTrue(insertionIndex >= 0);\n@@ -313,1 +313,1 @@\n-        Assert.assertTrue(s != null);\n+        Assertions.assertTrue(s != null);\n@@ -320,1 +320,1 @@\n-    @After\n+    @AfterEach\n@@ -327,1 +327,1 @@\n-    @Before\n+    @BeforeEach\n@@ -334,1 +334,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -344,1 +344,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TextFlowSurrogatePairInsertionIndexTest.java","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -41,4 +41,4 @@\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -81,2 +81,2 @@\n-            Assert.assertTrue(b.getWidth() > 10);\n-            Assert.assertTrue(b.getHeight() > 10);\n+            Assertions.assertTrue(b.getWidth() > 10);\n+            Assertions.assertTrue(b.getHeight() > 10);\n@@ -90,1 +90,1 @@\n-                Assert.assertTrue(h.getInsertionIndex() >= 0);\n+                Assertions.assertTrue(h.getInsertionIndex() >= 0);\n@@ -92,1 +92,1 @@\n-                Assert.assertTrue(s != null);\n+                Assertions.assertTrue(s != null);\n@@ -97,1 +97,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -107,1 +107,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TextSurrogatePairInsertionIndexTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-\n@@ -43,7 +42,5 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -88,2 +85,2 @@\n-        Assert.assertEquals(Color.WHITE, whitePixelColor);\n-        Assert.assertFalse(whitePixelColor.equals(lastWhitePixelColor));\n+        Assertions.assertEquals(Color.WHITE, whitePixelColor);\n+        Assertions.assertFalse(whitePixelColor.equals(lastWhitePixelColor));\n@@ -102,2 +99,2 @@\n-        Assert.assertEquals(Color.WHITE, whitePixelColor);\n-        Assert.assertEquals(whitePixelColor, lastWhitePixelColor);\n+        Assertions.assertEquals(Color.WHITE, whitePixelColor);\n+        Assertions.assertEquals(whitePixelColor, lastWhitePixelColor);\n@@ -106,1 +103,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -111,1 +108,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -116,1 +113,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/canvas\/ImageSmoothingDrawTest.java","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-\n+import java.util.concurrent.TimeUnit;\n@@ -42,6 +42,5 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -51,0 +50,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -63,1 +63,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -69,4 +69,2 @@\n-        Assert.assertEquals(\"Dialog width should remain the same\", DIALOG_WIDTH, dialog.getDialogPane().getWidth(),\n-                0.0);\n-        Assert.assertEquals(\"Dialog height should remain the same\", DIALOG_HEIGHT, dialog.getDialogPane().getHeight(),\n-                0.0);\n+        Assertions.assertEquals(DIALOG_WIDTH, dialog.getDialogPane().getWidth(), 0.0, \"Dialog width should remain the same\");\n+        Assertions.assertEquals(DIALOG_HEIGHT, dialog.getDialogPane().getHeight(), 0.0, \"Dialog height should remain the same\");\n@@ -91,1 +89,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -96,1 +94,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/dialog\/DialogRepeatedShowHideTest.java","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-\n+import java.util.concurrent.TimeUnit;\n@@ -41,6 +41,5 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -50,0 +49,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -61,1 +61,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -68,2 +68,2 @@\n-            Assert.assertEquals(dialog2.getDialogPane().getWidth(), dialog.getDialogPane().getWidth(), 2.0);\n-            Assert.assertEquals(dialog2.getDialogPane().getHeight(), dialog.getDialogPane().getHeight(), 2.0);\n+            Assertions.assertEquals(dialog2.getDialogPane().getWidth(), dialog.getDialogPane().getWidth(), 2.0);\n+            Assertions.assertEquals(dialog2.getDialogPane().getHeight(), dialog.getDialogPane().getHeight(), 2.0);\n@@ -91,1 +91,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -96,1 +96,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/dialog\/DialogWithOwnerSizingTest.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,3 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.util.concurrent.TimeUnit;\n@@ -36,3 +39,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -44,0 +46,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -75,1 +78,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -155,1 +158,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -226,1 +229,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -297,1 +300,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/layout\/LayoutTest.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import java.util.concurrent.TimeUnit;\n@@ -29,4 +31,3 @@\n-import org.junit.Ignore;\n-import org.junit.Test;\n-\n-import static org.junit.Assume.assumeTrue;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -36,0 +37,1 @@\n+@Timeout(value=20000, unit=TimeUnit.MILLISECONDS)\n@@ -50,1 +52,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -56,1 +58,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -64,1 +66,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -72,1 +74,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -80,1 +82,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -88,1 +90,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -96,1 +98,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -104,1 +106,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -112,1 +114,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -120,1 +122,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -128,1 +130,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -136,1 +138,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -145,1 +147,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -154,1 +156,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -163,1 +165,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -186,1 +188,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -197,1 +199,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -207,1 +209,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -217,1 +219,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -227,1 +229,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -246,1 +248,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -252,1 +254,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -260,1 +262,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -268,1 +270,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -276,1 +278,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -282,1 +284,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -288,1 +290,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -294,1 +296,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -300,1 +302,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -306,1 +308,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -312,1 +314,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -320,1 +322,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -336,1 +338,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -347,1 +349,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -383,1 +385,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -419,1 +421,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -455,1 +457,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -491,1 +493,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -507,1 +509,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -536,1 +538,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -565,1 +567,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -594,1 +596,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -623,2 +625,2 @@\n-    @Ignore(\"RT-33446\")\n-    @Test(timeout = 20000)\n+    @Disabled(\"RT-33446\")\n+    @Test\n@@ -653,2 +655,2 @@\n-    @Ignore(\"RT-33446\")\n-    @Test(timeout = 20000)\n+    @Disabled(\"RT-33446\")\n+    @Test\n@@ -683,2 +685,2 @@\n-    @Ignore(\"RT-33446\")\n-    @Test(timeout = 20000)\n+    @Disabled(\"RT-33446\")\n+    @Test\n@@ -713,2 +715,2 @@\n-    @Ignore(\"RT-33446\")\n-    @Test(timeout = 20000)\n+    @Disabled(\"RT-33446\")\n+    @Test\n@@ -743,2 +745,2 @@\n-    @Ignore(\"RT-33446\")\n-    @Test(timeout = 20000)\n+    @Disabled(\"RT-33446\")\n+    @Test\n@@ -777,1 +779,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -789,1 +791,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/layout\/RegionBackgroundFillUITest.java","additions":61,"deletions":59,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -27,1 +27,2 @@\n-import static org.junit.Assume.assumeTrue;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import java.util.concurrent.TimeUnit;\n@@ -30,2 +31,3 @@\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -39,0 +41,1 @@\n+@Timeout(value=20000, unit=TimeUnit.MILLISECONDS)\n@@ -41,1 +44,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -50,1 +53,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -60,1 +63,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -70,1 +73,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -80,1 +83,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -90,1 +93,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -100,1 +103,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -110,1 +113,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -120,1 +123,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -133,1 +136,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -146,1 +149,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -159,1 +162,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -173,1 +176,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -190,1 +193,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -200,1 +203,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -210,1 +213,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -220,1 +223,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -229,1 +232,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -240,1 +243,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -251,1 +254,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -262,1 +265,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -273,1 +276,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -284,1 +287,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -295,1 +298,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -306,1 +309,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -317,1 +320,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -328,1 +331,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -339,1 +342,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -352,1 +355,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -368,1 +371,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -379,1 +382,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -391,1 +394,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -401,1 +404,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -409,1 +412,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -419,1 +422,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -429,2 +432,2 @@\n-    @Ignore(\"RT-33411: Doesn't work at present because of Prism bug where the gaps between rows are inconsistent\")\n-    @Test(timeout = 20000)\n+    @Disabled(\"RT-33411: Doesn't work at present because of Prism bug where the gaps between rows are inconsistent\")\n+    @Test\n@@ -439,1 +442,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -449,2 +452,2 @@\n-    @Ignore(\"RT-33411: Doesn't work at present because of Prism bug where the gaps between rows are inconsistent\")\n-    @Test(timeout = 20000)\n+    @Disabled(\"RT-33411: Doesn't work at present because of Prism bug where the gaps between rows are inconsistent\")\n+    @Test\n@@ -460,1 +463,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -469,1 +472,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -478,1 +481,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -487,1 +490,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -496,1 +499,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -505,1 +508,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -514,1 +517,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -523,1 +526,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -533,1 +536,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -543,1 +546,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -553,1 +556,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -563,1 +566,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -574,1 +577,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -585,1 +588,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -596,1 +599,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -607,1 +610,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -618,1 +621,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -629,1 +632,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -640,1 +643,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -651,1 +654,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -662,1 +665,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -673,1 +676,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -686,1 +689,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -703,1 +706,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -715,1 +718,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n@@ -727,1 +730,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/layout\/RegionBackgroundImageUITest.java","additions":72,"deletions":69,"binary":false,"changes":141,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,3 @@\n-import org.junit.Test;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -31,0 +33,1 @@\n+@Timeout(value=20000, unit=TimeUnit.MILLISECONDS)\n@@ -68,1 +71,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/layout\/RegionBorderImageUITest.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/layout\/RegionBorderStrokeUITest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/layout\/RegionShapeUITest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import org.junit.jupiter.api.BeforeEach;\n@@ -65,0 +66,1 @@\n+    @BeforeEach\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/layout\/RegionUITestBase.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -49,4 +49,4 @@\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -100,1 +100,1 @@\n-        Assert.assertNotEquals(oldPosition, newPosition, 0.1);\n+        Assertions.assertNotEquals(oldPosition, newPosition, 0.1);\n@@ -103,1 +103,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -108,1 +108,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/tableview\/TableViewClickOnTroughTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -40,4 +40,4 @@\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -90,2 +90,1 @@\n-        Assert.assertTrue(\"resizeColumnToFitContent failed\",\n-            (wid1 != table.getColumns().get(1).getWidth()));\n+        Assertions.assertTrue((wid1 != table.getColumns().get(1).getWidth()), \"resizeColumnToFitContent failed\");\n@@ -103,1 +102,1 @@\n-        Assert.assertEquals(message, colsWidthBeforeResize, colsWidthAfterResize, tolerance + EPSILON);\n+        Assertions.assertEquals(colsWidthBeforeResize, colsWidthAfterResize, tolerance + EPSILON, message);\n@@ -106,1 +105,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -111,1 +110,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/tableview\/TableViewResizeColumnToFitContentTest.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -41,4 +41,4 @@\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -91,2 +91,1 @@\n-        Assert.assertTrue(\"resizeColumnToFitContent failed\",\n-                (wid1 != treeTableView.getColumns().get(1).getWidth()));\n+        Assertions.assertTrue((wid1 != treeTableView.getColumns().get(1).getWidth()), \"resizeColumnToFitContent failed\");\n@@ -104,1 +103,1 @@\n-        Assert.assertEquals(message, colsWidthBeforeResize, colsWidthAfterResize, tolerance + EPSILON);\n+        Assertions.assertEquals(colsWidthBeforeResize, colsWidthAfterResize, tolerance + EPSILON, message);\n@@ -107,1 +106,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -112,1 +111,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/treetableview\/TreeTableViewResizeColumnToFitContentTest.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-\n+import java.util.concurrent.TimeUnit;\n@@ -37,6 +37,5 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -46,0 +45,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -54,1 +54,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -57,1 +57,1 @@\n-        Assert.assertTrue(\"Last Window Should be Focused\", lastWindow.isFocused());\n+        Assertions.assertTrue(lastWindow.isFocused(), \"Last Window Should be Focused\");\n@@ -60,1 +60,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -65,1 +65,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/CheckWindowOrderTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,5 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assume.assumeTrue;\n-\n-\n@@ -35,1 +30,0 @@\n-\n@@ -45,1 +39,6 @@\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -47,6 +46,0 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n@@ -118,1 +111,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -124,1 +117,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -129,1 +122,1 @@\n-    @Before\n+    @BeforeEach\n@@ -152,2 +145,1 @@\n-        assertTrue(button.getText() + \" action not fired\",\n-                   button.latch.await(5, TimeUnit.SECONDS));\n+        Assertions.assertTrue(button.latch.await(5, TimeUnit.SECONDS), button.getText() + \" action not fired\");\n@@ -159,1 +151,1 @@\n-            assumeTrue(Boolean.getBoolean(\"unstable.test\")); \/\/ JDK-8321624\n+            Assumptions.assumeTrue(Boolean.getBoolean(\"unstable.test\")); \/\/ JDK-8321624\n@@ -164,4 +156,4 @@\n-            assertEquals(STAGE1_X, stage1.getX(), 1.0);\n-            assertEquals(STAGE1_Y, stage1.getY(), 1.0);\n-            assertEquals(STAGE2_X, stage2.getX(), 1.0);\n-            assertEquals(STAGE2_Y, stage2.getY(), 1.0);\n+            Assertions.assertEquals(STAGE1_X, stage1.getX(), 1.0);\n+            Assertions.assertEquals(STAGE1_Y, stage1.getY(), 1.0);\n+            Assertions.assertEquals(STAGE2_X, stage2.getX(), 1.0);\n+            Assertions.assertEquals(STAGE2_Y, stage2.getY(), 1.0);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/DualWindowTest.java","additions":15,"deletions":23,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-\n+import java.util.concurrent.TimeUnit;\n@@ -41,6 +41,5 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -50,0 +49,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -61,1 +61,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -66,1 +66,1 @@\n-        Assert.assertTrue(\"Stage 1 should be focused\", stage.isFocused());\n+        Assertions.assertTrue(stage.isFocused(), \"Stage 1 should be focused\");\n@@ -77,1 +77,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -82,1 +82,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/FocusParentWindowOnChildCloseTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,4 @@\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import static test.util.Util.TIMEOUT;\n@@ -36,2 +40,3 @@\n-import org.junit.Test;\n-import test.robot.testharness.VisualTestBase;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -39,5 +44,1 @@\n-\n-import static org.junit.Assume.assumeTrue;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertFalse;\n-import static test.util.Util.TIMEOUT;\n+import test.robot.testharness.VisualTestBase;\n@@ -48,0 +49,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -77,2 +79,1 @@\n-        assertTrue(\"Timeout waiting for bottom stage to be shown\",\n-            bottomShownLatch.await(TIMEOUT, TimeUnit.MILLISECONDS));\n+        Assertions.assertTrue(bottomShownLatch.await(TIMEOUT, TimeUnit.MILLISECONDS), \"Timeout waiting for bottom stage to be shown\");\n@@ -94,2 +95,1 @@\n-        assertTrue(\"Timeout waiting for top stage to be shown\",\n-            topShownLatch.await(TIMEOUT, TimeUnit.MILLISECONDS));\n+        Assertions.assertTrue(topShownLatch.await(TIMEOUT, TimeUnit.MILLISECONDS), \"Timeout waiting for top stage to be shown\");\n@@ -127,1 +127,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -133,1 +133,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -138,1 +138,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -143,1 +143,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -147,1 +147,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/IconifyTest.java","additions":16,"deletions":17,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -39,5 +39,5 @@\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -86,2 +86,2 @@\n-            Assert.assertNotNull(stage);\n-            Assert.assertNotNull(button);\n+            Assertions.assertNotNull(stage);\n+            Assertions.assertNotNull(button);\n@@ -115,1 +115,1 @@\n-            Assert.assertTrue(buttonLatch.await(3, TimeUnit.SECONDS));\n+            Assertions.assertTrue(buttonLatch.await(3, TimeUnit.SECONDS));\n@@ -129,1 +129,1 @@\n-            Assert.assertTrue(buttonLatch.await(3, TimeUnit.SECONDS));\n+            Assertions.assertTrue(buttonLatch.await(3, TimeUnit.SECONDS));\n@@ -144,1 +144,1 @@\n-            Assert.assertTrue(buttonLatch.await(3, TimeUnit.SECONDS));\n+            Assertions.assertTrue(buttonLatch.await(3, TimeUnit.SECONDS));\n@@ -152,1 +152,1 @@\n-            Assert.assertTrue(buttonLatch.await(3, TimeUnit.SECONDS));\n+            Assertions.assertTrue(buttonLatch.await(3, TimeUnit.SECONDS));\n@@ -163,1 +163,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -171,1 +171,1 @@\n-    @After\n+    @AfterEach\n@@ -178,1 +178,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/SetSceneScalingTest.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assume.assumeTrue;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -39,1 +39,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -74,2 +74,1 @@\n-        assertTrue(\"Timeout waiting for bottom stage to be shown\",\n-            bottomShownLatch.await(TIMEOUT, TimeUnit.MILLISECONDS));\n+        assertTrue(bottomShownLatch.await(TIMEOUT, TimeUnit.MILLISECONDS), \"Timeout waiting for bottom stage to be shown\");\n@@ -98,2 +97,1 @@\n-            assertTrue(\"Timeout waiting for top stage to be shown\",\n-                topShownLatch.await(TIMEOUT, TimeUnit.MILLISECONDS));\n+            assertTrue(topShownLatch.await(TIMEOUT, TimeUnit.MILLISECONDS), \"Timeout waiting for top stage to be shown\");\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageAttributesTest.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-\n+import java.util.concurrent.TimeUnit;\n@@ -39,5 +39,4 @@\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -46,0 +45,1 @@\n+@Timeout(value=25000, unit=TimeUnit.MILLISECONDS)\n@@ -53,1 +53,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -58,1 +58,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -63,1 +63,1 @@\n-    @Test(timeout = 25000)\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/WrongStageFocusWithApplicationModalityTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -27,5 +27,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assume.assumeTrue;\n-\n-import com.sun.javafx.PlatformUtil;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -33,1 +30,0 @@\n-\n@@ -44,6 +40,5 @@\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -52,1 +47,1 @@\n-\n+import com.sun.javafx.PlatformUtil;\n@@ -186,1 +181,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -191,1 +186,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -196,1 +191,1 @@\n-    @Before\n+    @BeforeEach\n@@ -201,1 +196,1 @@\n-    @After\n+    @AfterEach\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/web\/PointerEventTest.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -43,3 +43,4 @@\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -97,1 +98,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -102,1 +103,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -108,1 +109,3 @@\n-    @Test(timeout = 20000) public void testTooltipLeak() throws Exception {\n+    @Test\n+    @Timeout(value=20)\n+    public void testTooltipLeak() throws Exception {\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/web\/TooltipFXTest.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -37,1 +38,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -43,0 +45,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -115,1 +118,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -120,1 +123,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -124,1 +127,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/painttest\/ImagePaintTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -40,1 +41,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -46,0 +48,1 @@\n+@Timeout(value=20000, unit=TimeUnit.MILLISECONDS)\n@@ -53,1 +56,1 @@\n-    @Test(timeout = 20000)\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/scenegraph\/JDK8130122Test.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -35,1 +36,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -41,0 +43,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -48,1 +51,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -106,1 +109,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/scenegraph\/ViewOrderTest.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import java.util.concurrent.TimeUnit;\n@@ -43,2 +45,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -47,2 +50,1 @@\n-import static org.junit.Assume.assumeTrue;\n-\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -58,1 +60,1 @@\n-    @Before\n+    @BeforeEach\n@@ -63,1 +65,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/test3d\/AABalanceFlipTest.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,3 +28,3 @@\n-import static org.junit.Assume.assumeTrue;\n-import java.util.ArrayList;\n-import java.util.Collection;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n@@ -45,4 +45,4 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -55,2 +55,2 @@\n-@RunWith(Parameterized.class)\n-public class MeshCompareTest extends VisualTestBase {\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n+public final class MeshCompareTest extends VisualTestBase {\n@@ -58,13 +58,2 @@\n-    private static Collection params = null;\n-\n-    private static final Object[] pNumLights = { 0, 1, 2, 3 };\n-\n-    @Parameterized.Parameters\n-    public static Collection getParams() {\n-        if (params == null) {\n-            params = new ArrayList();\n-            for (Object o1 : pNumLights) {\n-                params.add(new Object[]{o1});\n-            }\n-        }\n-        return params;\n+    public static List<Integer> parameters() {\n+        return List.of(0, 1, 2, 3);\n@@ -89,6 +78,0 @@\n-    private int numLights;\n-\n-    public MeshCompareTest(int numLights) {\n-        this.numLights = numLights;\n-    }\n-\n@@ -242,1 +225,1 @@\n-    private Scene buildScene() {\n+    private Scene buildScene(int numLights) {\n@@ -292,1 +275,1 @@\n-    @Before\n+    @BeforeEach\n@@ -301,2 +284,3 @@\n-    @Test(timeout = 15000)\n-    public void testSnapshot3D() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshot3D(int numLights) {\n@@ -308,1 +292,1 @@\n-            testScene = buildScene();\n+            testScene = buildScene(numLights);\n@@ -325,1 +309,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/test3d\/MeshCompareTest.java","additions":17,"deletions":34,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import java.util.concurrent.TimeUnit;\n@@ -36,2 +38,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -40,2 +43,0 @@\n-import static org.junit.Assume.assumeTrue;\n-\n@@ -45,0 +46,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -53,1 +55,1 @@\n-    @Before\n+    @BeforeEach\n@@ -58,1 +60,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/test3d\/NearAndFarClipTest.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,7 +28,2 @@\n-import static org.junit.Assume.assumeTrue;\n-\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import com.sun.javafx.PlatformUtil;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import java.util.concurrent.TimeUnit;\n@@ -46,0 +41,5 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import com.sun.javafx.PlatformUtil;\n@@ -57,0 +57,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -73,1 +74,1 @@\n-    @Before\n+    @BeforeEach\n@@ -94,1 +95,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -104,1 +105,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -113,1 +114,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -122,1 +123,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -131,1 +132,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -140,1 +141,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -154,1 +155,1 @@\n-    @After\n+    @AfterEach\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/test3d\/PointLightIlluminationTest.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import java.util.concurrent.TimeUnit;\n@@ -38,2 +40,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -42,2 +45,0 @@\n-import static org.junit.Assume.assumeTrue;\n-\n@@ -48,0 +49,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -55,1 +57,1 @@\n-    @Before\n+    @BeforeEach\n@@ -60,1 +62,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/test3d\/RT35019Test.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -29,1 +30,2 @@\n-import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n@@ -44,4 +46,5 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -50,2 +53,0 @@\n-import static org.junit.Assume.assumeTrue;\n-\n@@ -55,4 +56,2 @@\n-@RunWith(Parameterized.class)\n-public class Snapshot3DTest extends VisualTestBase {\n-\n-    private static Collection params = null;\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n+public final class Snapshot3DTest extends VisualTestBase {\n@@ -63,8 +62,5 @@\n-    @Parameterized.Parameters\n-    public static Collection getParams() {\n-        if (params == null) {\n-            params = new ArrayList();\n-            for (Object o0 : pUseSphere) {\n-                for (Object o1 : pNumLights) {\n-                    params.add(new Object[] { o0, o1 });\n-                }\n+    private static List<Arguments> parameters() {\n+        List<Arguments> params = new ArrayList();\n+        for (Object o0 : pUseSphere) {\n+            for (Object o1 : pNumLights) {\n+                params.add(Arguments.of(o0, o1));\n@@ -91,2 +87,7 @@\n-    private boolean createSphere;\n-    private int numLights;\n+\/\/    private boolean createSphere;\n+\/\/    private int numLights;\n+\/\/\n+\/\/    public Snapshot3DTest(boolean createSphere, int numLights) {\n+\/\/        this.createSphere = createSphere;\n+\/\/        this.numLights = numLights;\n+\/\/    }\n@@ -94,6 +95,1 @@\n-    public Snapshot3DTest(boolean createSphere, int numLights) {\n-        this.createSphere = createSphere;\n-        this.numLights = numLights;\n-    }\n-\n-    private Scene buildScene() {\n+    private Scene buildScene(boolean createSphere, int numLights) {\n@@ -153,1 +149,1 @@\n-    @Before\n+    @BeforeEach\n@@ -162,2 +158,3 @@\n-    @Test(timeout = 15000)\n-    public void testSnapshot3D() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testSnapshot3D(boolean createSphere, int numLights) {\n@@ -169,1 +166,1 @@\n-            testScene = buildScene();\n+            testScene = buildScene(createSphere, numLights);\n@@ -185,1 +182,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/test3d\/Snapshot3DTest.java","additions":29,"deletions":33,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import java.util.concurrent.TimeUnit;\n@@ -38,2 +40,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -42,2 +45,0 @@\n-import static org.junit.Assume.assumeTrue;\n-\n@@ -47,0 +48,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -61,1 +63,1 @@\n-    @Before\n+    @BeforeEach\n@@ -66,1 +68,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -91,1 +93,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -124,1 +126,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -159,1 +161,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/test3d\/TriangleMeshPNTValidationTest.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import java.util.concurrent.TimeUnit;\n@@ -39,2 +41,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -43,2 +46,0 @@\n-import static org.junit.Assume.assumeTrue;\n-\n@@ -48,0 +49,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -62,1 +64,1 @@\n-    @Before\n+    @BeforeEach\n@@ -67,1 +69,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -90,1 +92,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -122,1 +124,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -150,1 +152,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -186,1 +188,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -221,1 +223,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -246,1 +248,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -279,1 +281,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -312,1 +314,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -356,1 +358,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -387,1 +389,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -434,1 +436,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n@@ -474,1 +476,1 @@\n-    @Test(timeout = 15000)\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/test3d\/TriangleMeshValidationTest.java","additions":21,"deletions":19,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,4 +27,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -34,1 +34,0 @@\n-\n@@ -43,7 +42,4 @@\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-\n-import junit.framework.AssertionFailedError;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n@@ -90,1 +86,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -96,1 +92,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -101,1 +97,1 @@\n-    @Before\n+    @BeforeEach\n@@ -107,1 +103,1 @@\n-    @After\n+    @AfterEach\n@@ -146,1 +142,1 @@\n-            throw new AssertionFailedError(\"Unexpected exception: \" + ex);\n+            fail(ex);\n@@ -172,1 +168,1 @@\n-            throw new AssertionFailedError(\"expected:\" + colorToString(expected)\n+            fail(\"expected:\" + colorToString(expected)\n@@ -191,1 +187,1 @@\n-            throw new AssertionFailedError(\"not expected:\" + colorToString(notExpected)\n+            fail(\"not expected:\" + colorToString(notExpected)\n@@ -212,1 +208,1 @@\n-            throw new AssertionFailedError(\"Unexpected exception: \" + ex);\n+            fail(\"Unexpected exception: \" + ex);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/testharness\/VisualTestBase.java","additions":17,"deletions":21,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,8 @@\n-import com.sun.javafx.PlatformUtil;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import static test.sandbox.Constants.ERROR_NONE;\n+import static test.sandbox.Constants.ERROR_NO_SECURITY_EXCEPTION;\n+import static test.sandbox.Constants.ERROR_SECURITY_EXCEPTION;\n+import static test.sandbox.Constants.ERROR_TIMEOUT;\n+import static test.sandbox.Constants.ERROR_UNEXPECTED_EXCEPTION;\n@@ -30,8 +37,6 @@\n-import junit.framework.AssertionFailedError;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.Ignore;\n-\n-import static org.junit.Assert.*;\n-import static org.junit.Assume.*;\n-import static test.sandbox.Constants.*;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import com.sun.javafx.PlatformUtil;\n@@ -43,0 +48,1 @@\n+@Timeout(value=25000, unit=TimeUnit.MILLISECONDS)\n@@ -79,2 +85,1 @@\n-                assertEquals(testAppName + \": Unexpected 'success' exit code;\",\n-                        exitCode, retVal);\n+                assertEquals(exitCode, retVal, testAppName + \": Unexpected 'success' exit code;\");\n@@ -84,1 +89,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(testAppName\n@@ -88,1 +93,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(testAppName\n@@ -91,1 +96,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(testAppName\n@@ -94,1 +99,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(testAppName\n@@ -97,1 +102,1 @@\n-                throw new AssertionFailedError(testAppName\n+                fail(testAppName\n@@ -101,1 +106,1 @@\n-                throw new AssertionFailedError(testAppName\n+               fail(testAppName\n@@ -106,1 +111,1 @@\n-    @Before\n+    @BeforeEach\n@@ -115,1 +120,1 @@\n-    @Test (timeout = 25000)\n+    @Test\n@@ -120,1 +125,1 @@\n-    @Test (timeout = 25000)\n+    @Test\n@@ -125,2 +130,2 @@\n-    @Ignore(\"JDK-8202451\")\n-    @Test (timeout = 25000)\n+    @Disabled(\"JDK-8202451\")\n+    @Test\n@@ -131,2 +136,2 @@\n-    @Ignore(\"JDK-8202451\")\n-    @Test (timeout = 25000)\n+    @Disabled(\"JDK-8202451\")\n+    @Test\n@@ -137,1 +142,1 @@\n-    @Test (timeout = 25000)\n+    @Test\n","filename":"tests\/system\/src\/test\/java\/test\/sandbox\/SandboxAppTest.java","additions":31,"deletions":26,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,9 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.shutdowntest.Constants.ERROR_NONE;\n+import static test.shutdowntest.Constants.ERROR_SOCKET;\n+import static test.shutdowntest.Constants.SOCKET_HANDSHAKE;\n+import static test.shutdowntest.Constants.STATUS_ILLEGAL_STATE;\n+import static test.shutdowntest.Constants.STATUS_OK;\n+import static test.shutdowntest.Constants.STATUS_RUNNABLE_EXECUTED;\n+import static test.shutdowntest.Constants.STATUS_UNEXPECTED_EXCEPTION;\n@@ -32,4 +41,3 @@\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n-import static test.shutdowntest.Constants.*;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -40,0 +48,1 @@\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n@@ -47,1 +56,1 @@\n-    @Test (timeout = 15000)\n+    @Test\n@@ -74,1 +83,1 @@\n-        assertEquals(\"Socket handshake failed,\", SOCKET_HANDSHAKE, handshake);\n+        assertEquals(SOCKET_HANDSHAKE, handshake, \"Socket handshake failed,\");\n","filename":"tests\/system\/src\/test\/java\/test\/shutdowntest\/ShutdownHookTest.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -49,2 +50,1 @@\n-import org.junit.Assert;\n-import junit.framework.AssertionFailedError;\n+import org.junit.jupiter.api.Assertions;\n@@ -73,3 +73,1 @@\n-                AssertionFailedError err = new AssertionFailedError(\"Unknown exception\");\n-                err.initCause(testError.getCause());\n-                throw err;\n+                fail(testError);\n@@ -78,2 +76,1 @@\n-            AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-            throw err;\n+            fail(\"Unexpected exception\");\n@@ -120,3 +117,1 @@\n-                AssertionFailedError err = new AssertionFailedError(\"Unexpected exception\");\n-                err.initCause(ex);\n-                throw err;\n+                fail(ex);\n@@ -131,3 +126,1 @@\n-                    AssertionFailedError err = new AssertionFailedError(\"Unknown execution exception\");\n-                    err.initCause(testError[0].getCause());\n-                    throw err;\n+                    fail(testError[0].getCause());\n@@ -173,1 +166,1 @@\n-            throw new AssertionFailedError(\"Exceeded timeout limit of \" + TIMEOUT + \" msec\");\n+            fail(\"Exceeded timeout limit of \" + TIMEOUT + \" msec\");\n@@ -352,1 +345,1 @@\n-            Assert.assertTrue(msg, startupLatch.await(timeoutSeconds, TimeUnit.SECONDS));\n+            Assertions.assertTrue(startupLatch.await(timeoutSeconds, TimeUnit.SECONDS), msg);\n@@ -354,1 +347,1 @@\n-            throw new AssertionError(e);\n+            fail(e);\n@@ -371,1 +364,1 @@\n-            Assert.assertTrue(msg, startupLatch.await(STARTUP_TIMEOUT, TimeUnit.SECONDS));\n+            Assertions.assertTrue(startupLatch.await(STARTUP_TIMEOUT, TimeUnit.SECONDS), msg);\n@@ -373,1 +366,1 @@\n-            throw new AssertionError(e);\n+            fail(e);\n@@ -396,1 +389,1 @@\n-            Assert.assertTrue(\"Timeout: \" + msg, latch.await(seconds, TimeUnit.SECONDS));\n+            Assertions.assertTrue(latch.await(seconds, TimeUnit.SECONDS), \"Timeout: \" + msg);\n@@ -398,1 +391,1 @@\n-            throw new AssertionError(e);\n+            fail(e);\n","filename":"tests\/system\/src\/test\/java\/test\/util\/Util.java","additions":13,"deletions":20,"binary":false,"changes":33,"status":"modified"}]}