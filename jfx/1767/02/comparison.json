{"files":[{"patch":"@@ -339,0 +339,5 @@\n+        TreeItem<T> root = getSkinnable().getRoot();\n+        if (root == null || root.getValue() == null) {\n+            requestRebuildCells();\n+        }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TreeTableViewSkin.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,160 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.scene.treetableview;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.geometry.Bounds;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+\n+import javafx.scene.control.Button;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTableRow;\n+import javafx.scene.control.TreeTableView;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+import javafx.stage.WindowEvent;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import test.util.Util;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TreeTableViewChangeRootTest {\n+\n+    static Robot robot;\n+    static volatile Stage stage;\n+    static volatile Scene scene;\n+    static final int SCENE_WIDTH = 600;\n+    static final int SCENE_HEIGHT = 500;\n+    static final CountDownLatch startupLatch = new CountDownLatch(1);\n+    static TreeTableView<String> tree;\n+    static Button changeRootButton;\n+\n+    @BeforeAll\n+    public static void initFX() {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterAll\n+    public static void exit() {\n+        Util.shutdown();\n+    }\n+\n+    @Test\n+    public void testChangeRoot() {\n+        Node buttonNode = scene.lookup(\".button\");\n+        Bounds bounds = buttonNode.localToScreen(buttonNode.getBoundsInLocal());\n+        double x = bounds.getMinX() + bounds.getWidth() \/ 2;\n+        double y = bounds.getMinY() + bounds.getHeight() \/ 2;\n+\n+        Util.runAndWait(() -> {\n+            robot.mouseMove((int) x, (int) y);\n+            robot.mousePress(MouseButton.PRIMARY);\n+            robot.mouseRelease(MouseButton.PRIMARY);\n+        });\n+\n+        Util.sleep(500);\n+\n+        Util.runAndWait(() -> {\n+\n+            Node disclosure = scene.lookup(\".tree-disclosure-node\");\n+            if (disclosure == null) {\n+                throw new IllegalStateException(\"Disclosure node not found.\");\n+            }\n+\n+            Bounds dbounds = disclosure.localToScreen(disclosure.getBoundsInLocal());\n+            double dx = dbounds.getMinX() + dbounds.getWidth() \/ 2;\n+            double dy = dbounds.getMinY() + dbounds.getHeight() \/ 2;\n+\n+            robot.mouseMove((int) dx, (int) dy);\n+            robot.mousePress(MouseButton.PRIMARY);\n+            robot.mouseRelease(MouseButton.PRIMARY);\n+        });\n+\n+        Util.sleep(1000);\n+\n+        Set<Node> renderedRows = tree.lookupAll(\".tree-table-row-cell\");\n+        List<String> rendered = renderedRows.stream()\n+                .filter(n -> n instanceof TreeTableRow<?>)\n+                .map(n -> ((TreeTableRow<?>) n).getItem())\n+                .filter(Objects::nonNull)\n+                .map(Object::toString)\n+                .toList();\n+\n+        assertTrue(rendered.containsAll(List.of(\"V0\", \"V1\", \"V2\", \"V3\", \"V4\")),\n+                \"Rows should contain 5 children after expanding the root\");\n+    }\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage primaryStage) {\n+            robot = new Robot();\n+            stage = primaryStage;\n+            tree = new TreeTableView<>();\n+            tree.setShowRoot(true);\n+\n+            TreeTableColumn<String, String> column = new TreeTableColumn<>(\"Name\");\n+            column.setCellValueFactory(param -> new SimpleStringProperty(param.getValue().getValue()));\n+            column.setPrefWidth(300);\n+            tree.getColumns().add(column);\n+\n+            changeRootButton = new Button(\"Change Root\");\n+            changeRootButton.setOnAction(e -> {\n+                TreeItem<String> newRoot = new TreeItem<>();\n+                for (int i = 0; i < 5; i++) {\n+                    newRoot.getChildren().add(new TreeItem<>(\"V\" + i));\n+                }\n+                tree.setRoot(newRoot);\n+            });\n+\n+            VBox layout = new VBox(10, changeRootButton, tree);\n+            scene = new Scene(layout, SCENE_WIDTH, SCENE_HEIGHT);\n+            stage.setScene(scene);\n+            stage.initStyle(StageStyle.UNDECORATED);\n+            stage.setAlwaysOnTop(true);\n+            stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> Platform.runLater(startupLatch::countDown));\n+            stage.show();\n+\n+            \/\/ Pre-populate with 1 item to start\n+            TreeItem<String> initialRoot = new TreeItem<>();\n+            initialRoot.getChildren().add(new TreeItem<>(\"V0\"));\n+            tree.setRoot(initialRoot);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/treetableview\/TreeTableViewChangeRootTest.java","additions":160,"deletions":0,"binary":false,"changes":160,"status":"added"}]}