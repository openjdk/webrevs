{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,15 @@\n+\/\/ See JDK-8328603. For some streams if we let AVFoundation to decide\n+\/\/ the format and decided format is not supported video will not be outputed\n+\/\/ after we force AVFoundation to supported format (FALLBACK_VO_FORMAT).\n+\/\/ Not sure why it happens, but if we provide supported by JavaFX Media format\n+\/\/ list to AVFoundation will use one of them and no video issue is no longer\n+\/\/ reproducible. We will still have fallback to FALLBACK_VO_FORMAT even if it\n+\/\/ is in the list of prefered formats.\n+\/\/ Uncomment to force list of supported formats by JavaFX.\n+\/\/ Note: This array should match CVVideoFrame::IsFormatSupported().\n+#define VO_FORMATS @{(id)kCVPixelBufferPixelFormatTypeKey: @[@(kCVPixelFormatType_422YpCbCr8),\\\n+                                                           @(kCVPixelFormatType_420YpCbCr8Planar),\\\n+                                                           @(kCVPixelFormatType_32BGRA)]}\n+\/\/ Uncomment to let AVFoundation decide the format...\n+\/\/#define VO_FORMATS @{}\n+\n@@ -57,0 +72,1 @@\n+\/\/ #define FORCED_VO_FORMAT kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange \/\/ Unsupported, use to test fallback\n@@ -271,1 +287,1 @@\n-                             @{}]; \/\/ let AVFoundation decide the format...\n+                             VO_FORMATS];\n@@ -754,1 +770,0 @@\n-    NSURLResponse *response = loadingRequest.response;\n","filename":"modules\/javafx.media\/src\/main\/native\/jfxmedia\/platform\/osx\/avf\/AVFMediaPlayer.mm","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"}]}