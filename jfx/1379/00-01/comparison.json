{"files":[{"patch":"@@ -6436,0 +6436,10 @@\n+    \/**\n+     * Node orientation describes the flow of visual data within a node.\n+     * In the English speaking world, visual data normally flows from\n+     * left-to-right. In an Arabic or Hebrew world, visual data flows\n+     * from right-to-left. This is consistent with the reading order\n+     * of text in both worlds.\n+     *\n+     * @defaultValue {@code NodeOrientation.INHERIT}\n+     * @since JavaFX 8.0\n+     *\/\n@@ -6449,2 +6459,0 @@\n-    private static final NodeOrientation DEFAULT_NODE_ORIENTATION = NodeOrientation.INHERIT;\n-\n@@ -6456,1 +6464,1 @@\n-        return nodeOrientation == null ? DEFAULT_NODE_ORIENTATION : nodeOrientation.get();\n+        return nodeOrientation == null ? NodeOrientation.INHERIT : nodeOrientation.get();\n@@ -6458,10 +6466,1 @@\n-    \/**\n-     * Node orientation describes the flow of visual data within a node.\n-     * In the English speaking world, visual data normally flows from\n-     * left-to-right. In an Arabic or Hebrew world, visual data flows\n-     * from right-to-left. This is consistent with the reading order\n-     * of text in both worlds.\n-     *\n-     * @defaultValue {@code NodeOrientation.INHERIT}\n-     * @since JavaFX 8.0\n-     *\/\n+\n@@ -6470,1 +6469,1 @@\n-            nodeOrientation = new StyleableObjectProperty<NodeOrientation>(DEFAULT_NODE_ORIENTATION) {\n+            nodeOrientation = new StyleableObjectProperty<NodeOrientation>(NodeOrientation.INHERIT) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -6245,1 +6245,1 @@\n-    private static final NodeOrientation DEFAULT_NODE_ORIENTATION =\n+    private static final NodeOrientation defaultNodeOrientation =\n@@ -6247,4 +6247,1 @@\n-                (PrivilegedAction<Boolean>) () -> Boolean.getBoolean(\"javafx.scene.nodeOrientation.RTL\"))\n-                    ? NodeOrientation.RIGHT_TO_LEFT : NodeOrientation.INHERIT;\n-\n-\n+                (PrivilegedAction<Boolean>) () -> Boolean.getBoolean(\"javafx.scene.nodeOrientation.RTL\")) ? NodeOrientation.RIGHT_TO_LEFT : NodeOrientation.INHERIT;\n@@ -6252,0 +6249,11 @@\n+    \/**\n+     * Node orientation describes the flow of visual data within a node.\n+     * In the English speaking world, visual data normally flows from\n+     * left-to-right. In an Arabic or Hebrew world, visual data flows\n+     * from right-to-left. This is consistent with the reading order\n+     * of text in both worlds.\n+     *\n+     * @defaultValue if the system property {@code javafx.scene.nodeOrientation.RTL} is {@code true},\n+     *     {@code NodeOrientation.RIGHT_TO_LEFT}, otherwise {@code NodeOrientation.INHERIT}\n+     * @since JavaFX 8.0\n+     *\/\n@@ -6262,1 +6270,1 @@\n-        return nodeOrientation == null ? DEFAULT_NODE_ORIENTATION : nodeOrientation.get();\n+        return nodeOrientation == null ? defaultNodeOrientation : nodeOrientation.get();\n@@ -6265,11 +6273,0 @@\n-    \/**\n-     * Node orientation describes the flow of visual data within a node.\n-     * In the English speaking world, visual data normally flows from\n-     * left-to-right. In an Arabic or Hebrew world, visual data flows\n-     * from right-to-left. This is consistent with the reading order\n-     * of text in both worlds.\n-     *\n-     * @defaultValue if the system property {@code javafx.scene.nodeOrientation.RTL} is {@code true},\n-     *     {@code NodeOrientation.RIGHT_TO_LEFT}, otherwise {@code NodeOrientation.INHERIT}\n-     * @since JavaFX 8.0\n-     *\/\n@@ -6278,1 +6275,1 @@\n-            nodeOrientation = new StyleableObjectProperty<NodeOrientation>(DEFAULT_NODE_ORIENTATION) {\n+            nodeOrientation = new StyleableObjectProperty<NodeOrientation>(defaultNodeOrientation) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Scene.java","additions":15,"deletions":18,"binary":false,"changes":33,"status":"modified"}]}