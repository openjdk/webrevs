{"files":[{"patch":"@@ -233,1 +233,1 @@\n-New code should be formatted consistently in accordance with the above guidelines. However, please do not reformat existing code as part of a bug fix. The makes more changes for code reviewers to track and review, and can lead to merge conflicts. If you want to reformat a class, do that in a separate pull request (which will need its own unique JBS bug ID).\n+New code should be formatted consistently in accordance with the above guidelines. However, please do not reformat existing code as part of a bug fix. This makes more changes for code reviewers to track and review, and can lead to merge conflicts.\n","filename":"CONTRIBUTING.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9,2 +9,2 @@\n-__Project Co-Lead__: Kevin Rushforth (kcr) <br>\n-__Project Co-Lead__: Johan Vos (jvos)\n+__Project Co-Lead__: Kevin Rushforth (OpenJDK ID: `kcr`; GitHub ID: `kevinrushforth`) <br>\n+__Project Co-Lead__: Johan Vos (OpenJDK ID: `jvos`; GitHub ID: `johanvos`)\n@@ -14,1 +14,1 @@\n-The [List of Reviewers](https:\/\/openjdk.java.net\/census#openjfx) is on the OpenJDK Census.\n+The [List of Reviewers](https:\/\/openjdk.org\/census#openjfx) is on the OpenJDK Census.\n@@ -40,1 +40,1 @@\n-We define a formal \"Reviewer\" role, similar to the JDK project. A [Reviewer](https:\/\/openjdk.java.net\/census#openjfx) is responsible for reviewing code changes and helping to determine whether a change is suitable for including into OpenJFX. We expect Reviewers to feel responsible not just for their piece, but for the quality of the JavaFX library as a whole. In other words, the role of Reviewer is one of stewardship. See the following section for what constitutes a good review.\n+We define a formal \"Reviewer\" role, similar to the JDK project. A [Reviewer](https:\/\/openjdk.org\/census#openjfx) is responsible for reviewing code changes and helping to determine whether a change is suitable for including into OpenJFX. We expect Reviewers to feel responsible not just for their piece, but for the quality of the JavaFX library as a whole. In other words, the role of Reviewer is one of stewardship. See the following section for what constitutes a good review.\n@@ -48,1 +48,1 @@\n-All fixes must be reviewed by at least one reviewer with the \"Reviewer\" role (aka a \"R\"eviewer). We have a different code review threshold for different types of changes. If there is disagreement as to whether a fix is low-impact or high-impact, then it is considered high-impact. In other words we will always err on the side of quality by \"rounding up\" to the next higher category. The contributor can say whether they think something is low-impact or high-impact, but It is up to a Reviewer to confirm this. A Reviewer either adds a comment indicating that they think a single review is sufficient, or else issues the Skara `\/reviewers 2` command requesting a second reviewer (a Reviewer can request more than 2 reviewers in some cases where a fix might be especially risky or cut across multiple functional areas).\n+All fixes must be reviewed by at least one reviewer with the \"Reviewer\" role (aka a \"R\"eviewer). We have a different code review threshold for different types of changes. If there is disagreement as to whether a fix is low-impact or high-impact, then it is considered high-impact. In other words we will always err on the side of quality by \"rounding up\" to the next higher category. The contributor can say whether they think something is low-impact or high-impact, but it is up to a Reviewer to confirm this. A Reviewer either adds a comment indicating that they think a single review is sufficient, or else issues the Skara `\/reviewers 2` command requesting a second reviewer (a Reviewer can request more than 2 reviewers in some cases where a fix might be especially risky or cut across multiple functional areas).\n@@ -56,4 +56,7 @@\n-* Determine whether this needs 2 reviewers and whether it needs a CSR; issue the `\/reviewers 2` or `\/csr` command as needed\n-* If you want to indicate your approval, but still feel additional reviewers are needed, you may increase the number of reviewers (e.g., from 2 to 3)\n-* If you want an area expert to review a PR, indicate this in a comment of the form: `Reviewers: @PERSON1 @PERSON2`; the requested reviewers can indicate whether or not they plan to review it\n-* If you want to ensure that you have the opportunity to review this PR yourself, add a comment of the form: `@PRAUTHOR Wait for me to review this PR`, optionally add any concerns you might have\n+* Determine whether this needs 2 reviewers and whether it needs a CSR; issue the `\/reviewers 2` or `\/csr` command as needed (note that `\/reviewers 2` requires approval from 2 total reviewers, at least one of which has the Reviewer role; if you really feel that a review from a second \"R\"eviewer is needed, use the command `\/reviewers 2 reviewers`)\n+    * If you want to indicate your approval, but still feel additional reviewers are needed, you may increase the number of reviewers (e.g., from 2 to 3)\n+    * If you want an area expert to review a PR, indicate this in a comment of the form: `Reviewers: @PERSON1 @PERSON2`; the requested reviewers can indicate whether or not they plan to review it\n+    * If you want to ensure that you have the opportunity to review this PR yourself, add a comment of the form: `@PRAUTHOR Wait for me to review this PR`, optionally add any concerns you might have\n+* Check that the PR target branch is correct\n+    * An ordinary (non-backport) PR must target the `master` branch in almost all cases\n+    * A backport PR (which will have the `backport` label) must target the current stabilization branch; a Reviewer should check that the bug being fixed meets the criteria for the current phase of stabilization\n@@ -64,0 +67,3 @@\n+* Carefully consider the risk of regression\n+* Carefully consider any compatibility concerns\n+* Check whether it adds any new public or protected API, even implicitly (such as a public method that overrides a protected method, or a class that is moved from a non-exported to an exported package); if it does, indicate that it needs a CSR\n@@ -65,2 +71,0 @@\n-* Consider the risk of regression\n-* Consider any compatibility concerns\n@@ -68,2 +72,1 @@\n-* Make sure that the PR has executed the GHA tests and that they all pass; if they aren't being run, ask the PR author to enable GHA workflows\n-* If the PR source branch hasn't synced up from master in a long time, or if there is an upstream commit not in the source branch that might interfere with the PR, ask the PR author to merge the latest upstream master.\n+* Make sure that the PR has executed the GitHub Actions (GHA) tests; if they aren't being run, ask the PR author to enable GHA workflows; if the test fails on some platforms, check whether it is a real bug (sometimes a job fails becau se of GHA infrastucture changes or we see a spurious GHA failure)\n@@ -71,0 +74,1 @@\n+* If the PR source branch hasn't synced up from master in a long time, or if there is an upstream commit not in the source branch that might interfere with the PR, consider asking the PR author to merge the latest upstream master, so we will get an up-to-date GHA run\n@@ -76,4 +80,4 @@\n-* All substantive feedback has been addressed, especially any objections from one with a Reviewer role.\n-* All Reviewers who have requested the chance to review have done so (or indicated that they are OK with it going in without their review). In rare cases a Project Lead may override this.\n-* The PR has been \"rfr\" (as indicated by Skara) for at least 1 business day (24 hours), not including weekends or major holidays. This is to allow sufficient time for those reviewers who might be in other time zones the chance to review if they have concerns. This is measured from the time that Skara has most recently added the \"rfr\" label (for example, for a PR that was previously in Draft mode, wait for at least 24 hours after the PR has been taken out of Draft and marked \"rfr\"). In rare cases (e.g., a build breakage) a Reviewer might give the OK to integrate without waiting for 24 hours.\n-* Verify the commit message. The Skara tooling adds a comment near the top of the PR with the commit message that will be used. You can add a summary to the commit message with the `\/summary` command. You can add additional contributors with the `\/contributor` command. Commands are issued by adding a comment to the PR that starts with a slash `\/` character.\n+* All substantive feedback has been addressed, especially any objections from one with a Reviewer role\n+    * If you have pushed any changes in response to a Reviewer's substantive comments, wait for them to re-review the latest version of your PR with those changes (to ensure they are satisfied with the way you addressed them)\n+* All Reviewers who have requested the chance to review have done so (or indicated that they are OK with it going in without their review). In rare cases a Project Lead may override this\n+* The PR has been \"rfr\" (as indicated by Skara) for at least 1 business day (at least 24 hours, not including weekends or major holidays). This is to allow sufficient time for those reviewers who might be in other time zones the chance to review if they have concerns. This is measured from the time that Skara has most recently added the \"rfr\" label (for example, for a PR that was previously in Draft mode, wait for at least 1 business day after the PR has been taken out of Draft and marked \"rfr\"). In rare cases (e.g., a build breakage) a Reviewer might give the OK to integrate without waiting for 1 business day.\n","filename":"README-code-reviews.md","additions":21,"deletions":17,"binary":false,"changes":38,"status":"modified"}]}