{"files":[{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.javafx.event;\n+\n+import javafx.event.Event;\n+import javafx.event.EventTarget;\n+\n+\/**\n+ * Provides access to private methods in Event.\n+ *\/\n+public class EventHelper {\n+    static {\n+        \/\/ copied from com.sun.javafx.util.Utils in javafx.graphics;\n+        try {\n+            Class<?> c = Event.class;\n+            Class.forName(c.getName(), true, c.getClassLoader());\n+        } catch (ClassNotFoundException e) {\n+            throw new AssertionError(e); \/\/ Can't happen\n+        }\n+    }\n+\n+    public interface Accessor {\n+        public void propagateConsume(Event ev);\n+    }\n+\n+    private static Accessor accessor;\n+\n+    private EventHelper() {\n+    }\n+\n+    public static void setAccessor(Accessor a) {\n+        if (accessor != null) {\n+            throw new IllegalStateException();\n+        }\n+        accessor = a;\n+    }\n+\n+    \/**\n+     * Causes the {@link Event#consume()} of cloned events to invoke the same\n+     * method in the original event, and vice versa.\n+     *\n+     * @param ev the event\n+     *\/\n+    public static void propagateConsume(Event ev) {\n+        accessor.propagateConsume(ev);\n+    }\n+}\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/event\/EventHelper.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -28,3 +28,0 @@\n-import java.util.EventObject;\n-\n-import com.sun.javafx.event.EventUtil;\n@@ -32,0 +29,1 @@\n+import java.util.EventObject;\n@@ -33,0 +31,3 @@\n+import javafx.beans.property.SimpleBooleanProperty;\n+import com.sun.javafx.event.EventHelper;\n+import com.sun.javafx.event.EventUtil;\n@@ -57,0 +58,2 @@\n+    static { initHelper(); }\n+\n@@ -71,1 +74,2 @@\n-    protected boolean consumed;\n+    private transient SimpleBooleanProperty consumed;\n+    private transient boolean propagateConsume;\n@@ -135,1 +139,5 @@\n-        newEvent.consumed = false;\n+        newEvent.consumed = null;\n+\n+        if (propagateConsume) {\n+            newEvent.consumedProperty().bindBidirectional(consumedProperty());\n+        }\n@@ -147,2 +155,2 @@\n-    public boolean isConsumed() {\n-        return consumed;\n+    public final boolean isConsumed() {\n+        return consumed == null ? false : consumed.get();\n@@ -154,2 +162,9 @@\n-    public void consume() {\n-        consumed = true;\n+    public final void consume() {\n+        consumedProperty().set(true);\n+    }\n+\n+    private final SimpleBooleanProperty consumedProperty() {\n+        if(consumed == null) {\n+            consumed = new SimpleBooleanProperty();\n+        }\n+        return consumed;\n@@ -201,0 +216,9 @@\n+\n+    private static void initHelper() {\n+        EventHelper.setAccessor(new EventHelper.Accessor() {\n+            @Override\n+            public void propagateConsume(Event ev) {\n+                ev.propagateConsume = true;\n+            }\n+        });\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/event\/Event.java","additions":33,"deletions":9,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -159,1 +159,0 @@\n-        EventHandler<ActionEvent> onAction = textField.getOnAction();\n@@ -167,1 +166,1 @@\n-        if (onAction != null || actionEvent.isConsumed()) {\n+        if (actionEvent.isConsumed()) {\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/TextFieldBehavior.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-\n+import com.sun.javafx.event.EventHelper;\n@@ -197,3 +197,9 @@\n-                textField.fireEvent(ke.copyFor(textField, textField));\n-\n-                if (ke.getCode() == KeyCode.ENTER) return;\n+                KeyEvent ev = ke.copyFor(textField, textField);\n+                EventHelper.propagateConsume(ev);\n+                textField.fireEvent(ev);\n+\n+                if (ke.getCode() == KeyCode.ENTER) {\n+                    if (!ev.isConsumed()) {\n+                        return;\n+                    }\n+                }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/SpinnerSkin.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"}]}