{"files":[{"patch":"@@ -39,1 +39,1 @@\n-            MTLResourceFactory.releaseTexture(mtlContext, pTexture);\n+            MTLResourceFactory.releaseTexture(pTexture);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/mtl\/MTLRTTextureData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-        return createTexture(formatHint, usageHint, wrapMode, w,h, false);\n+        return createTexture(formatHint, usageHint, wrapMode, w, h, false);\n@@ -417,2 +417,2 @@\n-    static void releaseTexture(MTLContext context, long resource) {\n-        nReleaseTexture(context.getContextHandle(), resource);\n+    static void releaseTexture(long resource) {\n+        nReleaseTexture(resource);\n@@ -426,1 +426,1 @@\n-    static native void nReleaseTexture(long context, long pTexture);\n+    static native void nReleaseTexture(long pTexture);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/mtl\/MTLResourceFactory.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-                nUpdateInt(context.getContextHandle(), getNativeHandle(), buf, arr,\n+                nUpdateInt(getNativeHandle(), buf, arr,\n@@ -111,1 +111,1 @@\n-                nUpdateFloat(context.getContextHandle(), getNativeHandle(), buf, arr,\n+                nUpdateFloat(getNativeHandle(), buf, arr,\n@@ -123,1 +123,1 @@\n-                nUpdate(context.getContextHandle(), getNativeHandle(), buf, arr,\n+                nUpdate(getNativeHandle(), buf, arr,\n@@ -146,1 +146,1 @@\n-                nUpdate(context.getContextHandle(), getNativeHandle(), null, arr32Bit,\n+                nUpdate(getNativeHandle(), null, arr32Bit,\n@@ -170,1 +170,1 @@\n-                nUpdate(context.getContextHandle(), getNativeHandle(), null, arr32Bit,\n+                nUpdate(getNativeHandle(), null, arr32Bit,\n@@ -198,2 +198,1 @@\n-        nUpdateYUV422(this.context.getContextHandle(),\n-                      this.getNativeHandle(),\n+        nUpdateYUV422(this.getNativeHandle(),\n@@ -210,2 +209,1 @@\n-    private static native void nUpdate(long contextHandle, long pResource,\n-                                       ByteBuffer buf, byte[] pixels,\n+    private static native void nUpdate(long pResource, ByteBuffer buf, byte[] pixels,\n@@ -215,2 +213,1 @@\n-    private static native void nUpdateFloat(long contextHandle, long pResource,\n-                                            FloatBuffer buf, float[] pixels,\n+    private static native void nUpdateFloat(long pResource, FloatBuffer buf, float[] pixels,\n@@ -220,2 +217,1 @@\n-    private static native void nUpdateInt(long contextHandle, long pResource,\n-                                          IntBuffer buf, int[] pixels,\n+    private static native void nUpdateInt(long pResource, IntBuffer buf, int[] pixels,\n@@ -225,4 +221,3 @@\n-    private static native void nUpdateYUV422(long contextHandle, long pResource,\n-                                       byte[] pixels,\n-                                       int dstx, int dsty, int srcx, int srcy,\n-                                       int w, int h, int stride);\n+    private static native void nUpdateYUV422(long pResource, byte[] pixels,\n+                                             int dstx, int dsty, int srcx, int srcy,\n+                                             int w, int h, int stride);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/mtl\/MTLTexture.java","additions":12,"deletions":17,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-            MTLResourceFactory.releaseTexture(mtlContext, pTexture);\n+            MTLResourceFactory.releaseTexture(pTexture);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/mtl\/MTLTextureData.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -193,0 +193,3 @@\n+- (void) blit:(id<MTLTexture>)src srcX0:(int)srcX0 srcY0:(int)srcY0 srcX1:(int)srcX1 srcY1:(int)srcY1\n+       dstTex:(id<MTLTexture>)dst dstX0:(int)dstX0 dstY0:(int)dstY0 dstX1:(int)dstX1 dstY1:(int)dstY1;\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-mtl\/MetalContext.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -850,0 +850,27 @@\n+- (void) blit:(id<MTLTexture>)src srcX0:(int)srcX0 srcY0:(int)srcY0 srcX1:(int)srcX1 srcY1:(int)srcY1\n+       dstTex:(id<MTLTexture>)dst dstX0:(int)dstX0 dstY0:(int)dstY0 dstX1:(int)dstX1 dstY1:(int)dstY1\n+{\n+    [self endCurrentRenderEncoder];\n+\n+    id<MTLCommandBuffer> commandBuffer = [self getCurrentCommandBuffer];\n+    @autoreleasepool {\n+        id<MTLBlitCommandEncoder> blitEncoder = [commandBuffer blitCommandEncoder];\n+        if (src.usage == MTLTextureUsageRenderTarget) {\n+            [blitEncoder synchronizeTexture:src slice:0 level:0];\n+        }\n+        if (dst.usage == MTLTextureUsageRenderTarget) {\n+            [blitEncoder synchronizeTexture:dst slice:0 level:0];\n+        }\n+        [blitEncoder copyFromTexture:src\n+                         sourceSlice:(NSUInteger)0\n+                         sourceLevel:(NSUInteger)0\n+                        sourceOrigin:MTLOriginMake(0, 0, 0)\n+                          sourceSize:MTLSizeMake(src.width, src.height, src.depth)\n+                           toTexture:dst\n+                    destinationSlice:(NSUInteger)0\n+                    destinationLevel:(NSUInteger)0\n+                   destinationOrigin:MTLOriginMake(0, 0, 0)];\n+        [blitEncoder endEncoding];\n+    }\n+}\n+\n@@ -1435,22 +1462,2 @@\n-    [pCtx endCurrentRenderEncoder];\n-\n-    id<MTLCommandBuffer> commandBuffer = [pCtx getCurrentCommandBuffer];\n-    @autoreleasepool {\n-        id<MTLBlitCommandEncoder> blitEncoder = [commandBuffer blitCommandEncoder];\n-        if (src.usage == MTLTextureUsageRenderTarget) {\n-            [blitEncoder synchronizeTexture:src slice:0 level:0];\n-        }\n-        if (dst.usage == MTLTextureUsageRenderTarget) {\n-            [blitEncoder synchronizeTexture:dst slice:0 level:0];\n-        }\n-        [blitEncoder copyFromTexture:src\n-                         sourceSlice:(NSUInteger)0\n-                         sourceLevel:(NSUInteger)0\n-                        sourceOrigin:MTLOriginMake(0, 0, 0)\n-                          sourceSize:MTLSizeMake(src.width, src.height, src.depth)\n-                           toTexture:dst\n-                    destinationSlice:(NSUInteger)0\n-                    destinationLevel:(NSUInteger)0\n-                   destinationOrigin:MTLOriginMake(0, 0, 0)];\n-        [blitEncoder endEncoding];\n-    }\n+    [pCtx blit:src srcX0:srcX0 srcY0:srcY0 srcX1:srcX1 srcY1:srcY1\n+        dstTex:dst dstX0:dstX0 dstY0:dstY0 dstX1:dstX1 dstY1:dstY1];\n@@ -1540,1 +1547,1 @@\n- * Signature: (JJ)V\n+ * Signature: (J)V\n@@ -1543,1 +1550,1 @@\n-    (JNIEnv *env, jclass class, jlong pContext, jlong pTexture)\n+    (JNIEnv *env, jclass class, jlong pTexture)\n@@ -1545,1 +1552,0 @@\n-    MetalContext* context = (MetalContext*)jlong_to_ptr(pContext);\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-mtl\/MetalContext.m","additions":31,"deletions":25,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -195,4 +195,0 @@\n-    NSError* error;\n-\n-    id<MTLFunction> kernelFunction = [shaderLib newFunctionWithName:funcName];\n-\n@@ -200,1 +196,3 @@\n-        uyvy422ToRGBAState =  [[context getDevice] newComputePipelineStateWithFunction:kernelFunction\n+        NSError* error;\n+        id<MTLFunction> kernelFunction = [self getFunction:funcName];\n+        uyvy422ToRGBAState = [[context getDevice] newComputePipelineStateWithFunction:kernelFunction\n@@ -202,1 +200,0 @@\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-mtl\/MetalPipelineManager.m","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -46,5 +46,0 @@\n-- (NSUInteger) getContentWidth;\n-- (NSUInteger) getContentHeight;\n-- (NSUInteger) getPhysicalWidth;\n-- (NSUInteger) getPhysicalHeight;\n-\n@@ -69,0 +64,4 @@\n+- (void) initRTT:(int*)arr;\n+- (void) readPixels:(int*)pDst;\n+- (void) readPixelsFromRTT:(int*)pDst;\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-mtl\/MetalRTTexture.h","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -136,0 +136,26 @@\n+- (void) initRTT:(int*)arr\n+{\n+    id<MTLTexture> tex = [self getTexture];\n+    MTLRegion region = {{0, 0, 0}, {tex.width, tex.height, 1}};\n+    [tex replaceRegion:region\n+           mipmapLevel:0\n+             withBytes:arr\n+           bytesPerRow:tex.width * 4];\n+}\n+\n+- (void) readPixels:(int*)pDst\n+{\n+    int* texContent = (int*)[[self getPixelBuffer] contents];\n+    for (NSUInteger i = 0; i < contentHeight; i++) {\n+        for (NSUInteger j = 0; j < contentWidth; j++) {\n+            pDst[i * contentWidth + j] = texContent[i * physicalWidth + j];\n+        }\n+    }\n+}\n+\n+- (void) readPixelsFromRTT:(int*)pDst\n+{\n+    int *texContent = (int*)[[self getPixelBuffer] contents];\n+    memcpy(pDst, texContent, contentWidth * contentHeight * 4);\n+}\n+\n@@ -142,5 +168,0 @@\n-- (NSUInteger) getPhysicalWidth  { return physicalWidth;  }\n-- (NSUInteger) getPhysicalHeight { return physicalHeight; }\n-- (NSUInteger) getContentWidth   { return contentWidth;   }\n-- (NSUInteger) getContentHeight  { return contentHeight;  }\n-\n@@ -213,5 +234,1 @@\n-    id<MTLTexture> tex = [rtt getTexture];\n-\n-    jint* arr = (*env)->GetIntArrayElements(env, pixData, NULL);\n-\n-    MTLRegion region = {{0,0,0}, {tex.width, tex.height, 1}};\n+    int* arr = (*env)->GetIntArrayElements(env, pixData, NULL);\n@@ -219,4 +236,1 @@\n-    [tex replaceRegion:region\n-           mipmapLevel:0\n-             withBytes:arr\n-           bytesPerRow:tex.width * 4];\n+    [rtt initRTT:arr];\n@@ -236,4 +250,0 @@\n-    int *texContent = (int*)[[rtt getPixelBuffer] contents];\n-    NSUInteger cw = [rtt getContentWidth];\n-    NSUInteger ch = [rtt getContentHeight];\n-\n@@ -241,1 +251,1 @@\n-    memcpy(pDst, texContent, cw * ch * 4);\n+    [rtt readPixelsFromRTT:pDst];\n@@ -253,6 +263,0 @@\n-    int* texContent = (int*)[[rtt getPixelBuffer] contents];\n-    NSUInteger pw = [rtt getPhysicalWidth];\n-    NSUInteger ph = [rtt getPhysicalHeight];\n-    NSUInteger cw = [rtt getContentWidth];\n-    NSUInteger ch = [rtt getContentHeight];\n-\n@@ -260,5 +264,3 @@\n-    for (NSUInteger i = 0; i < ch; i++) {\n-        for (NSUInteger j = 0; j < cw; j++) {\n-            pDst[i * cw + j] = texContent[i * pw + j];\n-        }\n-    }\n+\n+    [rtt readPixels:pDst];\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-mtl\/MetalRTTexture.m","additions":32,"deletions":30,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -66,0 +66,18 @@\n+- (void) updateTexture:(void*)pixels\n+                  dstX:(int)dstX\n+                  dstY:(int)dstY\n+                  srcX:(int)srcX\n+                  srcY:(int)srcY\n+                 width:(int)w\n+                height:(int)h\n+            scanStride:(int)scanStride;\n+\n+- (void) updateTextureYUV422:(char*)pixels\n+                        dstX:(int)dstX\n+                        dstY:(int)dstY\n+                        srcX:(int)srcX\n+                        srcY:(int)srcY\n+                       width:(int)w\n+                      height:(int)h\n+                  scanStride:(int)scanStride;\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-mtl\/MetalTexture.h","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+\/\/ ** HELPER METHODS **\n+\n@@ -43,0 +45,36 @@\n+static NSMutableDictionary *getBufferAndOffset(MetalContext* context, unsigned int length)\n+{\n+    NSMutableDictionary<NSNumber *, id<MTLBuffer>> *bufferOffsetDict = [NSMutableDictionary dictionary];\n+    id<MTLBuffer> pixelMTLBuf = nil;\n+    int offset = [[context getDataRingBuffer] reserveBytes:length];\n+    if (offset < 0) {\n+        pixelMTLBuf = [context getTransientBufferWithLength:length];\n+        offset = 0;\n+    } else {\n+        pixelMTLBuf = [[context getDataRingBuffer] getBuffer];\n+    }\n+\n+    [bufferOffsetDict setObject:pixelMTLBuf forKey:@(offset)];\n+    return bufferOffsetDict;\n+}\n+\n+static NSMutableDictionary *copyPixelDataToRingBuffer(MetalContext* context, void* pixels,\n+    int srcx, int srcy, int w, int h, int scanStride, MTLPixelFormat pixelFormat)\n+{\n+    unsigned int pixelSize = getPixelSize(pixelFormat);\n+    unsigned int length = pixelSize * w * h;\n+    NSMutableDictionary<NSNumber *, id<MTLBuffer>> *bufferOffsetDict = getBufferAndOffset(context, length);\n+    NSNumber *offset = [[bufferOffsetDict allKeys] firstObject];\n+    id<MTLBuffer> dstBuf = [[bufferOffsetDict allValues] firstObject];\n+\n+    void *dstBufOffset = dstBuf.contents + [offset intValue];\n+    unsigned int rowLength = pixelSize * w;\n+    void *pixelsSrcOffset = pixels + srcy * scanStride + srcx * pixelSize;\n+\n+    for (int i = 0; i < h; i++) {\n+        memcpy(dstBufOffset + (rowLength * i), pixelsSrcOffset + (scanStride * i), rowLength);\n+    }\n+\n+    return bufferOffsetDict;\n+}\n+\n@@ -131,0 +169,99 @@\n+- (void) updateTexture:(void*)pixels\n+                  dstX:(int)dstX\n+                  dstY:(int)dstY\n+                  srcX:(int)srcX\n+                  srcY:(int)srcY\n+                 width:(int)w\n+                height:(int)h\n+            scanStride:(int)scanStride\n+{\n+    NSMutableDictionary* bufferOffsetDict = copyPixelDataToRingBuffer(context, pixels, srcX, srcY,\n+                                                                    w, h, scanStride, pixelFormat);\n+    int offset = [[[bufferOffsetDict allKeys] firstObject] intValue];\n+    id<MTLBuffer> pixelMTLBuf = [[bufferOffsetDict allValues] firstObject];\n+\n+    [context endCurrentRenderEncoder];\n+    id<MTLCommandBuffer> commandBuffer = [context getCurrentCommandBuffer];\n+    @autoreleasepool {\n+        id<MTLBlitCommandEncoder> blitEncoder = [commandBuffer blitCommandEncoder];\n+\n+        [blitEncoder copyFromBuffer:pixelMTLBuf\n+                       sourceOffset:(NSUInteger)offset\n+                  sourceBytesPerRow:(NSUInteger)w * getPixelSize(pixelFormat)\n+                sourceBytesPerImage:(NSUInteger)0 \/\/ 0 for 2D image\n+                         sourceSize:MTLSizeMake(w, h, 1)\n+                          toTexture:texture\n+                   destinationSlice:(NSUInteger)0\n+                   destinationLevel:(NSUInteger)0\n+                  destinationOrigin:MTLOriginMake(dstX, dstY, 0)];\n+\n+        if (texture.usage == MTLTextureUsageRenderTarget) {\n+            [blitEncoder synchronizeTexture:texture slice:0 level:0];\n+        }\n+\n+        if ([self isMipmapped]) {\n+            [blitEncoder generateMipmapsForTexture:texture];\n+        }\n+\n+        [blitEncoder endEncoding];\n+    }\n+}\n+\n+- (void) updateTextureYUV422:(char*)pixels\n+                        dstX:(int)dstX\n+                        dstY:(int)dstY\n+                        srcX:(int)srcX\n+                        srcY:(int)srcY\n+                       width:(int)w\n+                      height:(int)h\n+                  scanStride:(int)scanStride\n+{\n+    id<MTLTexture> tex = [self getTexture];\n+    @autoreleasepool {\n+        id<MTLDevice> device = [context getDevice];\n+\n+        id<MTLBuffer> srcBuff = [[device newBufferWithLength:(w * h * 2)\n+                                                     options:MTLResourceStorageModeManaged] autorelease];\n+        for (int row = 0; row < h; row++) {\n+            \/\/ Copy each row in srcBuff\n+            memcpy(srcBuff.contents + (row * w * 2), pixels, w * 2);\n+            pixels += (w * 2);\n+            pixels += scanStride - (w * 2);\n+        }\n+\n+        [srcBuff didModifyRange:NSMakeRange(0, srcBuff.length)];\n+\n+        [context endCurrentRenderEncoder];\n+\n+        MTLSize threadgroupSize = MTLSizeMake(2, 1, 1);\n+\n+        MTLSize threadgroupCount;\n+        threadgroupCount.width  = w \/ threadgroupSize.width;\n+        threadgroupCount.height = h \/ threadgroupSize.height;\n+        threadgroupCount.depth  = 1;\n+\n+        id<MTLComputePipelineState> computePipelineState =\n+            [[context getPipelineManager] getComputePipelineStateWithFunc:@\"uyvy422_to_rgba\"];\n+\n+        id<MTLCommandBuffer> commandBuffer = [context getCurrentCommandBuffer];\n+\n+        id<MTLComputeCommandEncoder> computeEncoder = [commandBuffer computeCommandEncoder];\n+\n+        [computeEncoder setComputePipelineState:computePipelineState];\n+\n+        [computeEncoder setBuffer:srcBuff\n+                           offset:0\n+                          atIndex:0];\n+\n+        [computeEncoder setTexture:tex\n+                           atIndex:0];\n+\n+        [computeEncoder dispatchThreadgroups:threadgroupCount\n+                       threadsPerThreadgroup:threadgroupSize];\n+\n+        [computeEncoder endEncoding];\n+\n+        [context commitCurrentCommandBuffer];\n+    }\n+}\n+\n@@ -157,38 +294,0 @@\n-\/\/ ** HELPER METHODS **\n-\n-static NSMutableDictionary *getBufferAndOffset(MetalContext* context, unsigned int length)\n-{\n-    NSMutableDictionary<NSNumber *, id<MTLBuffer>> *bufferOffsetDict = [NSMutableDictionary dictionary];\n-    id<MTLBuffer> pixelMTLBuf = nil;\n-    int offset = [[context getDataRingBuffer] reserveBytes:length];\n-    if (offset < 0) {\n-        pixelMTLBuf = [context getTransientBufferWithLength:length];\n-        offset = 0;\n-    } else {\n-        pixelMTLBuf = [[context getDataRingBuffer] getBuffer];\n-    }\n-\n-    [bufferOffsetDict setObject:pixelMTLBuf forKey:@(offset)];\n-    return bufferOffsetDict;\n-}\n-\n-static NSMutableDictionary *copyPixelDataToRingBuffer(MetalContext* context, void* pixels,\n-    int srcx, int srcy, int w, int h, int scanStride, MTLPixelFormat pixelFormat)\n-{\n-    unsigned int pixelSize = getPixelSize(pixelFormat);\n-    unsigned int length = pixelSize * w * h;\n-    NSMutableDictionary<NSNumber *, id<MTLBuffer>> *bufferOffsetDict = getBufferAndOffset(context, length);\n-    NSNumber *offset = [[bufferOffsetDict allKeys] firstObject];\n-    id<MTLBuffer> dstBuf = [[bufferOffsetDict allValues] firstObject];\n-\n-    void *dstBufOffset = dstBuf.contents + [offset intValue];\n-    unsigned int rowLength = pixelSize * w;\n-    void *pixelsSrcOffset = pixels + srcy * scanStride + srcx * pixelSize;\n-\n-    for (int i = 0; i < h; i++) {\n-        memcpy(dstBufOffset + (rowLength * i), pixelsSrcOffset + (scanStride * i), rowLength);\n-    }\n-\n-    return bufferOffsetDict;\n-}\n-\n@@ -201,1 +300,1 @@\n- * Signature: (JJLjava\/nio\/ByteBuffer;[BIIIIIII)J\n+ * Signature: (JLjava\/nio\/ByteBuffer;[BIIIIIII)J\n@@ -204,1 +303,1 @@\n-    (JNIEnv *env, jclass jClass, jlong ctx, jlong nTexturePtr, jobject buf,\n+    (JNIEnv *env, jclass jClass, jlong nTexturePtr, jobject buf,\n@@ -206,1 +305,1 @@\n-    jint w, jint h, jint scanStride)\n+    jint width, jint height, jint scanStride)\n@@ -208,1 +307,0 @@\n-    MetalContext* context = (MetalContext*)jlong_to_ptr(ctx);\n@@ -220,7 +318,8 @@\n-    id<MTLTexture> tex = [mtlTex getTexture];\n-    MTLPixelFormat pixelFormat = [mtlTex getPixelFormat];\n-\n-    NSMutableDictionary* bufferOffsetDict = copyPixelDataToRingBuffer(context, pixels, srcx, srcy,\n-                                                                    w, h, scanStride, pixelFormat);\n-    int offset = [[[bufferOffsetDict allKeys] firstObject] intValue];\n-    id<MTLBuffer> pixelMTLBuf = [[bufferOffsetDict allValues] firstObject];\n+    [mtlTex updateTexture:pixels\n+                     dstX:dstx\n+                     dstY:dsty\n+                     srcX:srcx\n+                     srcY:srcy\n+                    width:width\n+                   height:height\n+               scanStride:scanStride];\n@@ -232,26 +331,0 @@\n-    [context endCurrentRenderEncoder];\n-    id<MTLCommandBuffer> commandBuffer = [context getCurrentCommandBuffer];\n-    @autoreleasepool {\n-        id<MTLBlitCommandEncoder> blitEncoder = [commandBuffer blitCommandEncoder];\n-\n-        [blitEncoder copyFromBuffer:pixelMTLBuf\n-                       sourceOffset:(NSUInteger)offset\n-                  sourceBytesPerRow:(NSUInteger)w * getPixelSize(pixelFormat)\n-                sourceBytesPerImage:(NSUInteger)0 \/\/ 0 for 2D image\n-                         sourceSize:MTLSizeMake(w, h, 1)\n-                          toTexture:tex\n-                   destinationSlice:(NSUInteger)0\n-                   destinationLevel:(NSUInteger)0\n-                  destinationOrigin:MTLOriginMake(dstx, dsty, 0)];\n-\n-        if (tex.usage == MTLTextureUsageRenderTarget) {\n-            [blitEncoder synchronizeTexture:tex slice:0 level:0];\n-        }\n-\n-        if ([mtlTex isMipmapped]) {\n-            [blitEncoder generateMipmapsForTexture:tex];\n-        }\n-\n-        [blitEncoder endEncoding];\n-    }\n-\n@@ -265,1 +338,1 @@\n- * Signature: (JJLjava\/nio\/FloatBuffer;[FIIIIIII)J\n+ * Signature: (JLjava\/nio\/FloatBuffer;[FIIIIIII)J\n@@ -268,1 +341,1 @@\n-    (JNIEnv *env, jclass jClass, jlong ctx, jlong nTexturePtr, jobject buf,\n+    (JNIEnv *env, jclass jClass, jlong nTexturePtr, jobject buf,\n@@ -270,1 +343,1 @@\n-    jint w, jint h, jint scanStride)\n+    jint width, jint height, jint scanStride)\n@@ -272,1 +345,0 @@\n-    MetalContext* context = (MetalContext*)jlong_to_ptr(ctx);\n@@ -284,7 +356,8 @@\n-    id<MTLTexture> texture = [mtlTex getTexture];\n-    MTLPixelFormat pixelFormat = [mtlTex getPixelFormat];\n-\n-    NSMutableDictionary* bufferOffsetDict = copyPixelDataToRingBuffer(context, pixels, srcx, srcy,\n-                                                                    w, h, scanStride, pixelFormat);\n-    int offset = [[[bufferOffsetDict allKeys] firstObject] intValue];\n-    id<MTLBuffer> pixelMTLBuf = [[bufferOffsetDict allValues] firstObject];\n+    [mtlTex updateTexture:pixels\n+                     dstX:dstx\n+                     dstY:dsty\n+                     srcX:srcx\n+                     srcY:srcy\n+                    width:width\n+                   height:height\n+               scanStride:scanStride];\n@@ -295,27 +368,0 @@\n-\n-    [context endCurrentRenderEncoder];\n-    id<MTLCommandBuffer> commandBuffer = [context getCurrentCommandBuffer];\n-\n-    @autoreleasepool {\n-        id<MTLBlitCommandEncoder> blitEncoder = [commandBuffer blitCommandEncoder];\n-\n-        [blitEncoder copyFromBuffer:pixelMTLBuf\n-                       sourceOffset:(NSUInteger)offset\n-                  sourceBytesPerRow:(NSUInteger)w * getPixelSize(pixelFormat)\n-                sourceBytesPerImage:(NSUInteger)0 \/\/ 0 for 2D image\n-                         sourceSize:MTLSizeMake(w, h, 1)\n-                          toTexture:texture\n-                   destinationSlice:(NSUInteger)0\n-                   destinationLevel:(NSUInteger)0\n-                  destinationOrigin:MTLOriginMake(dstx, dsty, 0)];\n-\n-        if ([mtlTex isMipmapped]) {\n-            [blitEncoder generateMipmapsForTexture:texture];\n-        }\n-        if (texture.usage == MTLTextureUsageRenderTarget) {\n-            [blitEncoder synchronizeTexture:texture slice:0 level:0];\n-        }\n-\n-        [blitEncoder endEncoding];\n-    }\n-\n@@ -329,1 +375,1 @@\n- * Signature: (JJLjava\/nio\/IntBuffer;[IIIIIIII)J\n+ * Signature: (JLjava\/nio\/IntBuffer;[IIIIIIII)J\n@@ -332,1 +378,1 @@\n-    (JNIEnv *env, jclass jClass, jlong ctx, jlong nTexturePtr, jobject buf,\n+    (JNIEnv *env, jclass jClass, jlong nTexturePtr, jobject buf,\n@@ -334,1 +380,1 @@\n-    jint w, jint h, jint scanStride)\n+    jint width, jint height, jint scanStride)\n@@ -336,1 +382,0 @@\n-    MetalContext* context = (MetalContext*)jlong_to_ptr(ctx);\n@@ -348,7 +393,8 @@\n-    id<MTLTexture> texture = [mtlTex getTexture];\n-    MTLPixelFormat pixelFormat = [mtlTex getPixelFormat];\n-\n-    NSMutableDictionary* bufferOffsetDict = copyPixelDataToRingBuffer(context, pixels, srcx, srcy,\n-                                                                    w, h, scanStride, pixelFormat);\n-    int offset = [[[bufferOffsetDict allKeys] firstObject] intValue];\n-    id<MTLBuffer> pixelMTLBuf = [[bufferOffsetDict allValues] firstObject];\n+    [mtlTex updateTexture:pixels\n+                     dstX:dstx\n+                     dstY:dsty\n+                     srcX:srcx\n+                     srcY:srcy\n+                    width:width\n+                   height:height\n+               scanStride:scanStride];\n@@ -358,29 +404,1 @@\n-    }\n-\n-    [context endCurrentRenderEncoder];\n-    id<MTLCommandBuffer> commandBuffer = [context getCurrentCommandBuffer];\n-\n-    @autoreleasepool {\n-        id<MTLBlitCommandEncoder> blitEncoder = [commandBuffer blitCommandEncoder];\n-\n-        [blitEncoder copyFromBuffer:pixelMTLBuf\n-                       sourceOffset:(NSUInteger)offset\n-                  sourceBytesPerRow:(NSUInteger)w * getPixelSize(pixelFormat)\n-                sourceBytesPerImage:(NSUInteger)0 \/\/ 0 for 2D image\n-                         sourceSize:MTLSizeMake(w, h, 1)\n-                          toTexture:texture\n-                   destinationSlice:(NSUInteger)0\n-                   destinationLevel:(NSUInteger)0\n-                  destinationOrigin:MTLOriginMake(dstx, dsty, 0)];\n-\n-        if ([mtlTex isMipmapped]) {\n-            [blitEncoder generateMipmapsForTexture:texture];\n-        }\n-        if (texture.usage == MTLTextureUsageRenderTarget) {\n-            [blitEncoder synchronizeTexture:texture slice:0 level:0];\n-        }\n-\n-        [blitEncoder endEncoding];\n-    }\n-\n-    \/\/ TODO: MTL: add error detection and return appropriate jlong\n+    }\/\/ TODO: MTL: add error detection and return appropriate jlong\n@@ -393,1 +411,1 @@\n- * Signature: (JJ[BIIIIIII)J\n+ * Signature: (J[BIIIIIII)J\n@@ -396,1 +414,1 @@\n-    (JNIEnv *env, jclass jClass, jlong ctx, jlong nTexturePtr, jbyteArray pixData,\n+    (JNIEnv *env, jclass jClass, jlong nTexturePtr, jbyteArray pixData,\n@@ -399,1 +417,0 @@\n-    MetalContext* context = (MetalContext*)jlong_to_ptr(ctx);\n@@ -401,2 +418,0 @@\n-\n-    id<MTLTexture> tex = [mtlTex getTexture];\n@@ -404,48 +419,0 @@\n-    jbyte* p = pixels;\n-\n-    @autoreleasepool {\n-        id<MTLDevice> device = [context getDevice];\n-\n-        id<MTLBuffer> srcBuff = [[device newBufferWithLength:(w * h * 2)\n-                                                     options:MTLResourceStorageModeManaged] autorelease];\n-        for (int row = 0; row < h; row++) {\n-            \/\/ Copy each row in srcBuff\n-            memcpy(srcBuff.contents + (row * w * 2), (char*) pixels, w * 2);\n-            pixels += (w * 2);\n-            pixels += scanStride - (w * 2);\n-        }\n-\n-        [srcBuff didModifyRange:NSMakeRange(0, srcBuff.length)];\n-\n-        [context endCurrentRenderEncoder];\n-\n-        MTLSize threadgroupSize = MTLSizeMake(2, 1, 1);\n-\n-        MTLSize threadgroupCount;\n-        threadgroupCount.width  = w \/ threadgroupSize.width;\n-        threadgroupCount.height = h \/ threadgroupSize.height;\n-        threadgroupCount.depth  = 1;\n-\n-        id<MTLComputePipelineState> computePipelineState =\n-            [[context getPipelineManager] getComputePipelineStateWithFunc:@\"uyvy422_to_rgba\"];\n-\n-        id<MTLCommandBuffer> commandBuffer = [context getCurrentCommandBuffer];\n-\n-        id<MTLComputeCommandEncoder> computeEncoder = [commandBuffer computeCommandEncoder];\n-\n-        [computeEncoder setComputePipelineState:computePipelineState];\n-\n-        [computeEncoder setBuffer:srcBuff\n-                           offset:0\n-                          atIndex:0];\n-\n-        [computeEncoder setTexture:tex\n-                           atIndex:0];\n-\n-        [computeEncoder dispatchThreadgroups:threadgroupCount\n-                       threadsPerThreadgroup:threadgroupSize];\n-\n-        [computeEncoder endEncoding];\n-\n-        [context commitCurrentCommandBuffer];\n-    }\n@@ -453,1 +420,8 @@\n-    pixels = p;\n+    [mtlTex updateTextureYUV422:(char*)pixels\n+                           dstX:dstx\n+                           dstY:dsty\n+                           srcX:srcx\n+                           srcY:srcy\n+                          width:w\n+                         height:h\n+                     scanStride:scanStride];\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-mtl\/MetalTexture.m","additions":181,"deletions":207,"binary":false,"changes":388,"status":"modified"}]}