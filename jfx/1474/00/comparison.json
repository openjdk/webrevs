{"files":[{"patch":"@@ -549,6 +549,31 @@\n-\/\/ Defines the compiler warning levels to use. If empty, then no warnings are generated. If\n-\/\/ not empty, then the expected syntax is as a space or comma separated list of names, such\n-\/\/ as defined in the javac documentation.\n-defineProperty(\"LINT\", \"none\")\n-ext.IS_LINT = LINT != \"none\"\n-\n+\/\/ Define the compiler lint warnings to enable.\n+\/\/\n+\/\/ We define a separate set of options for normal classes, test classes\n+\/\/ (including shims), and tool classes (including JSLC).\n+\/\/ A project (module) can add project-specific lint options for each\n+\/\/ category if desired.\n+\/\/ extraLintOptions\n+\/\/ extraToolLintOptions\n+\/\/ extraTestLintOptions\n+\/\/\n+\/\/ The lint options can be overriden on the command line. If set to the\n+\/\/ empty string, then no lint warnings are enabled; even project-specific\n+\/\/ lint options are disabled. If not empty, then it is parsed as a space\n+\/\/ or comma separated list of names. See the javac documentation for a list\n+\/\/ of valid lint options.\n+\n+def defaultLintOptions =\n+        \"removal\" + \",\" +\n+        \"missing-explicit-ctor\"\n+defineProperty(\"LINT\", defaultLintOptions)\n+ext.IS_LINT = LINT != \"\"\n+\n+def defaultToolLintOptions = \"\"\n+defineProperty(\"TOOL_LINT\", defaultToolLintOptions)\n+ext.IS_TOOL_LINT = TOOL_LINT != \"\"\n+\n+def defaultTestLintOptions = \"\"\n+defineProperty(\"TEST_LINT\", defaultTestLintOptions)\n+ext.IS_TEST_LINT = TEST_LINT != \"\"\n+\n+\/\/ Doclint options (all enabled by default)\n@@ -2162,0 +2187,5 @@\n+\/\/ TODO: the following is an example of enabling module-specific lint opts\n+\/\/    project.ext.extraLintOptions =\n+\/\/        \"deprecation\" + \",\" +\n+\/\/        \"divzero\"\n+\n@@ -4046,0 +4076,14 @@\n+void setupLintOptions(Task compile, String lintOpts, String extraLintOpts) {\n+    lintOpts.split(\"[, ]\").each { s ->\n+        compile.options.compilerArgs += \"-Xlint:$s\"\n+    }\n+\n+    if (extraLintOpts != \"\") {\n+        extraLintOpts.split(\"[, ]\").each { s ->\n+            compile.options.compilerArgs += \"-Xlint:$s\"\n+        }\n+    }\n+\n+    compile.options.compilerArgs += [ \"-Xmaxwarns\", \"1000\" ]\n+}\n+\n@@ -4074,2 +4118,0 @@\n-        compile.options.warnings = IS_LINT\n-\n@@ -4077,0 +4119,1 @@\n+        compile.options.compilerArgs += [ \"-Xmaxerrs\", \"1000\" ]\n@@ -4081,4 +4124,23 @@\n-        \/\/ Add in the -Xlint options\n-        if (IS_LINT) {\n-            LINT.split(\"[, ]\").each { s ->\n-                compile.options.compilerArgs += \"-Xlint:$s\"\n+        if (compile.name == \"compileJava\" ||\n+            compile.name == \"compileFullJava\" ||\n+            compile.name.startsWith(\"compileJavaDOMBinding\")) {\n+\n+            \/\/ Add in the -Xlint options\n+            compile.options.warnings = IS_LINT\n+            if (IS_LINT) {\n+                def extraLintOpts = project.hasProperty(\"extraLintOptions\") ?\n+                                    project.ext.extraLintOptions : \"\"\n+                setupLintOptions(compile, LINT, extraLintOpts);\n+\n+                \/\/ TODO: enable the following once we are lint clean\n+                \/\/compile.options.compilerArgs += \"-Werror\"\n+            }\n+        } else if (compile.name == \"compileJslcJava\" ||\n+            compile.name == \"compileToolJava\") {\n+\n+            \/\/ Add in the -Xlint options\n+            compile.options.warnings = IS_TOOL_LINT\n+            if (IS_TOOL_LINT) {\n+                def extraLintOpts = project.hasProperty(\"extraToolLintOptions\") ?\n+                                    project.ext.extraToolLintOptions : \"\"\n+                setupLintOptions(compile, TOOL_LINT, extraLintOpts);\n@@ -4086,0 +4148,13 @@\n+        } else if (compile.name == \"compileShimsJava\" ||\n+            compile.name.startsWith(\"compileTest\")) {\n+\n+            \/\/ Add in the -Xlint options\n+            compile.options.warnings = IS_TEST_LINT\n+            if (IS_TEST_LINT) {\n+                def extraLintOpts = project.hasProperty(\"extraTestLintOptions\") ?\n+                                    project.ext.extraTestLintOptions : \"\"\n+                setupLintOptions(compile, TEST_LINT, extraLintOpts);\n+            }\n+        } else {\n+            logger.warn(\"Unknown compilation task: ${compile.name}\")\n+            compile.options.warnings = false\n","filename":"build.gradle","additions":87,"deletions":12,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -96,0 +96,1 @@\n+    @SuppressWarnings(\"removal\")\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/util\/converter\/CurrencyStringConverter.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -72,0 +72,1 @@\n+    @SuppressWarnings(\"removal\")\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/util\/converter\/PercentageStringConverter.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -231,0 +231,1 @@\n+    @SuppressWarnings(\"removal\")\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/SelectorPartitioning.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,3 @@\n+\/\/ FIXME: We must replace the terminally deprecated sun.misc.Unsafe\n+\/\/ memory access methods; see JDK-8334137\n+@SuppressWarnings(\"removal\")\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/MaskMarlinAlphaConsumer.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,0 +37,3 @@\n+\/\/ FIXME: We must replace the terminally deprecated sun.misc.Unsafe\n+\/\/ memory access methods; see JDK-8334137\n+@SuppressWarnings(\"removal\")\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/OffHeapArray.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,0 +31,3 @@\n+\/\/ FIXME: We must replace the terminally deprecated sun.misc.Unsafe\n+\/\/ memory access methods; see JDK-8334137\n+@SuppressWarnings(\"removal\")\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/Renderer.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,0 +31,3 @@\n+\/\/ FIXME: We must replace the terminally deprecated sun.misc.Unsafe\n+\/\/ memory access methods; see JDK-8334137\n+@SuppressWarnings(\"removal\")\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/RendererNoAA.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+@SuppressWarnings(\"removal\")\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/CompoundSelector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4252,0 +4252,1 @@\n+    @SuppressWarnings(\"removal\")\n@@ -4295,0 +4296,1 @@\n+    @SuppressWarnings(\"removal\")\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/CssParser.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+    @SuppressWarnings(\"removal\")\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/Match.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+        @SuppressWarnings(\"removal\")\n@@ -148,0 +149,1 @@\n+    @SuppressWarnings(\"removal\")\n@@ -164,0 +166,1 @@\n+    @SuppressWarnings(\"removal\")\n@@ -178,0 +181,1 @@\n+    @SuppressWarnings(\"removal\")\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/Selector.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+@SuppressWarnings(\"removal\")\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/SimpleSelector.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}