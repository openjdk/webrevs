{"files":[{"patch":"@@ -3,1 +3,1 @@\n-org.eclipse.jdt.core.compiler.codegen.targetPlatform=17\n+org.eclipse.jdt.core.compiler.codegen.targetPlatform=21\n","filename":"tests\/manual\/monkey\/.settings\/org.eclipse.jdt.core.prefs","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-The tool requires JDK 17+ and JavaFX 20+.\n+The tool requires JDK 21+ and JavaFX 21+.\n","filename":"tests\/manual\/monkey\/README.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-This build requires javafx.home property, pointing to JavaFX SDK (20+) directory, e.g.:\n+This build requires javafx.home property, pointing to JavaFX SDK (21+) directory, e.g.:\n@@ -11,0 +11,1 @@\n+\t<property name=\"javafx.home\" value=\"..\/..\/..\/build\/sdk\" \/>\n@@ -42,2 +43,2 @@\n-\t\t\tsource=\"17\"\n-\t\t\ttarget=\"17\"\n+\t\t\tsource=\"21\"\n+\t\t\ttarget=\"21\"\n","filename":"tests\/manual\/monkey\/build.xml","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"filename":"tests\/manual\/monkey\/doc\/screenshot.png","binary":true,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,2 @@\n+import com.oracle.tools.fx.monkey.tools.EmbeddedFxTextArea;\n+import com.oracle.tools.fx.monkey.tools.EmbeddedJTextAreaWindow;\n@@ -149,0 +151,2 @@\n+        FX.item(b, \"FX TextArea Embedded in JFXPanel\", this::openJFXPanel);\n+        FX.item(b, \"JTextArea\/JTextField Embedded in SwingNode\", this::openJTextArea);\n@@ -150,1 +154,1 @@\n-        FX.item(b, \"Native-to-ascii\", this::openNative2Ascii);\n+        FX.item(b, \"Native to ASCII\", this::openNative2Ascii);\n@@ -259,0 +263,12 @@\n+    private void openJTextArea() {\n+        SingleInstance.openSingleInstance(\n+            \"JTextArea\",\n+            \"JTextArea\/JTextField Embedded in SwingNode\",\n+            EmbeddedJTextAreaWindow::new\n+        );\n+    }\n+\n+    private void openJFXPanel() {\n+        EmbeddedFxTextArea.start();\n+    }\n+\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/MainWindow.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import com.oracle.tools.fx.monkey.tools.ClipboardViewer;\n@@ -37,0 +36,3 @@\n+            new DemoPage(\"AreaChart\", AreaChartPage::new),\n+            new DemoPage(\"BarChart\", BarChartPage::new),\n+            new DemoPage(\"BubbleChart\", BubbleChartPage::new),\n@@ -39,1 +41,1 @@\n-            new DemoPage(\"Canvas\", CanvasPage::new),\n+            \/\/ TODO new DemoPage(\"Canvas\", CanvasPage::new),\n@@ -42,1 +44,0 @@\n-            new DemoPage(\"Clipboard\", ClipboardViewer::new),\n@@ -47,1 +48,1 @@\n-            new DemoPage(\"HtmlEditor\", HtmlEditorPage::new),\n+            new DemoPage(\"HTMLEditor\", HTMLEditor_Page::new),\n@@ -51,0 +52,1 @@\n+            new DemoPage(\"LineChart\", LineChartPage::new),\n@@ -53,2 +55,2 @@\n-            \/\/ TODO MenuButton\n-            \/\/ TODO Pagination\n+            new DemoPage(\"MenuButton\", MenuButtonPage::new),\n+            new DemoPage(\"Pagination\", PaginationPage::new),\n@@ -58,0 +60,1 @@\n+            \/\/ TODO RadioButton\n@@ -59,1 +62,1 @@\n-            \/\/ TODO ScrollPane\n+            new DemoPage(\"ScrollPane\", ScrollPanePage::new),\n@@ -64,0 +67,2 @@\n+            new DemoPage(\"StackedAreaChart\", StackedAreaChartPage::new),\n+            new DemoPage(\"StackedBarChart\", StackedBarChartPage::new),\n@@ -65,1 +70,1 @@\n-            \/\/ TODO TabPane\n+            new DemoPage(\"TabPane\", TabPanePage::new),\n@@ -72,1 +77,2 @@\n-            \/\/ TODO ToolBar\n+            new DemoPage(\"ToolBar\", ToolBarPage::new),\n+            new DemoPage(\"Tooltip\", TooltipPage::new),\n@@ -78,1 +84,0 @@\n-            new DemoPage(\"X\/Y Charts\", XYChartPage::new),\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/Pages.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.options;\n+\n+import javafx.geometry.Insets;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.layout.BorderPane;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.NamedValue;\n+\n+\/**\n+ * Action Selector Executes Simple Actions (Runnable's).\n+ *\/\n+public class ActionSelector extends BorderPane {\n+    private final ComboBox<NamedValue<Runnable>> field;\n+\n+    public ActionSelector(String name) {\n+        FX.name(this, name);\n+\n+        field = new ComboBox<>();\n+        field.setMaxWidth(Double.MAX_VALUE);\n+        FX.name(field, \"value\");\n+\n+        field.getSelectionModel().selectedItemProperty().addListener((s, pr, c) -> {\n+            Runnable r = c.getValue();\n+            try {\n+                r.run();\n+            } catch (Throwable e) {\n+                e.printStackTrace();\n+            }\n+        });\n+\n+        setCenter(field);\n+    }\n+\n+    public Runnable getValue() {\n+        NamedValue<Runnable> v = field.getSelectionModel().getSelectedItem();\n+        return v == null ? null : v.getValue();\n+    }\n+\n+    public void clearChoices() {\n+        field.getItems().clear();\n+    }\n+\n+    public void addChoice(String name, Runnable item) {\n+        field.getItems().add(new NamedValue<>(name, item));\n+    }\n+\n+    public void select(int ix) {\n+        if ((ix >= 0) && (ix < field.getItems().size())) {\n+            field.getSelectionModel().select(ix);\n+        }\n+    }\n+\n+    public void selectFirst() {\n+        select(0);\n+    }\n+\n+    public void addButton(String text, Runnable r) {\n+        Button b = FX.button(text, r);\n+        setRight(b);\n+        setMargin(b, new Insets(0, 0, 0, 2));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/ActionSelector.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.options;\n+\n+import javafx.beans.property.Property;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.scene.control.CheckBox;\n+import com.oracle.tools.fx.monkey.util.FX;\n+\n+\/**\n+ * Boolean Option Bound to a Property.\n+ *\/\n+public class BooleanOption extends CheckBox {\n+    private final SimpleBooleanProperty property = new SimpleBooleanProperty();\n+\n+    public BooleanOption(String name, String text, Property<Boolean> p) {\n+        FX.name(this, name);\n+        if (p != null) {\n+            property.bindBidirectional(p);\n+        }\n+\n+        setText(text);\n+        selectedProperty().bindBidirectional(property);\n+    }\n+\n+    public BooleanOption(String name, String text, Runnable onChange) {\n+        this(name, text, (Property)null);\n+\n+        property.addListener((src, prev, cur) -> {\n+            try {\n+                onChange.run();\n+            } catch (Throwable e) {\n+                e.printStackTrace();\n+            }\n+        });\n+    }\n+\n+    public boolean getValue() {\n+        return property.get();\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/BooleanOption.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.options;\n+\n+import javafx.beans.property.ObjectProperty;\n+import javafx.scene.layout.Border;\n+import javafx.scene.layout.BorderStroke;\n+import javafx.scene.layout.BorderStrokeStyle;\n+import javafx.scene.layout.BorderWidths;\n+import javafx.scene.layout.CornerRadii;\n+import javafx.scene.paint.Color;\n+\n+\/**\n+ * Border Option Bound to a Property.\n+ *\/\n+public class BorderOption extends ObjectOption<Border> {\n+    public BorderOption(String name, ObjectProperty<Border> p) {\n+        super(name, p);\n+\n+        addChoice(\"<null>\", null);\n+        addChoice(\"EMPTY\", Border.EMPTY);\n+        addChoice(\"Empty (1)\", createBorder(Color.TRANSPARENT, 1, null));\n+        addChoice(\"Empty (2)\", createBorder(Color.TRANSPARENT, 2, null));\n+        addChoice(\"Empty (5)\", createBorder(Color.TRANSPARENT, 5, null));\n+        addChoice(\"Empty (10)\", createBorder(Color.TRANSPARENT, 10, null));\n+        addChoice(\"Empty (100)\", createBorder(Color.TRANSPARENT, 100, null));\n+        addChoice(\"Red (1)\", createBorder(Color.RED, 1, null));\n+        addChoice(\"Green (20)\", createBorder(Color.GREEN, 20, null));\n+        addChoice(\"Rounded\", createBorder(Color.ORANGE, 1, 5.0));\n+\n+        selectInitialValue();\n+    }\n+\n+    private static Border createBorder(Color color, double width, Double radius) {\n+        BorderStrokeStyle style = BorderStrokeStyle.SOLID;\n+        CornerRadii radii = radius == null ? null : new CornerRadii(radius);\n+        BorderWidths widths = new BorderWidths(width);\n+\n+        BorderStroke[] strokes = {\n+            new BorderStroke(color, style, radii, widths)\n+        };\n+        return new Border(strokes);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/BorderOption.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.options;\n+\n+import javafx.beans.property.Property;\n+import javafx.scene.paint.Color;\n+\n+\/**\n+ * Color Option Bound to a Property.\n+ *\/\n+public class ColorOption extends ObjectOption<Color> {\n+    public ColorOption(String name, Property<Color> p) {\n+        super(name, p);\n+\n+        addChoice(\"Red\", Color.RED);\n+        addChoice(\"Green\", Color.GREEN);\n+        addChoice(\"Blue\", Color.BLUE);\n+        addChoice(\"Black\", Color.BLACK);\n+        addChoice(\"White\", Color.WHITE);\n+        addChoice(\"<null>\", null);\n+        selectInitialValue();\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/ColorOption.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.options;\n+\n+import javafx.beans.property.Property;\n+import com.oracle.tools.fx.monkey.util.Formats;\n+\n+\/**\n+ * Double Option Bound to a Property.\n+ *\/\n+public class DoubleOption extends ObjectOption<Number> {\n+    public DoubleOption(String name, Property<Number> p) {\n+        super(name, p);\n+    }\n+\n+    public static DoubleOption of(String name, Property<Number> p, double ... values) {\n+        DoubleOption d = new DoubleOption(name, p);\n+        for (double v : values) {\n+            String text = Formats.formatDouble(v);\n+            d.addChoice(text, v);\n+        }\n+        d.selectInitialValue();\n+        return d;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/DoubleOption.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.options;\n+\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.scene.control.Spinner;\n+import com.oracle.tools.fx.monkey.util.FX;\n+\n+\/**\n+ *\n+ *\/\n+public class DoubleSpinner extends Spinner<Double> {\n+    private final SimpleDoubleProperty property = new SimpleDoubleProperty();\n+\n+    public DoubleSpinner(String name, DoubleProperty p, double min, double max, double amountToStepBy) {\n+        super(min, max, p.get(), amountToStepBy);\n+\n+        FX.name(this, name);\n+        setEditable(true);\n+\n+        property.bindBidirectional(p);\n+        valueProperty().addListener((s, pr, val) -> {\n+            property.set(val);\n+        });\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/DoubleSpinner.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.options;\n+\n+import javafx.beans.property.ObjectProperty;\n+import javafx.util.Duration;\n+\n+\/**\n+ * Duration Option.\n+ *\/\n+public class DurationOption extends ObjectOption<Duration> {\n+    public DurationOption(String name, ObjectProperty<Duration> p) {\n+        super(name, p);\n+\n+        addChoice(\"<null>\", null);\n+        addChoice(\"0\", Duration.millis(0));\n+        addChoice(\"1 ms\", Duration.millis(1));\n+        addChoice(\"10 ms\", Duration.millis(10));\n+        addChoice(\"100 ms\", Duration.millis(100));\n+        addChoice(\"1 s\", Duration.seconds(1));\n+        addChoice(\"10 s\", Duration.seconds(10));\n+        addChoice(\"INDEFINITE\", Duration.INDEFINITE);\n+\n+        selectInitialValue();\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/DurationOption.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.options;\n+\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import javafx.beans.property.ObjectProperty;\n+\n+\/**\n+ * Enum Option Bound to a Property.\n+ *\/\n+public class EnumOption<T extends Enum> extends ObjectOption<T> {\n+    public EnumOption(String name, boolean allowNull, Class<T> type, ObjectProperty<T> p) {\n+        super(name, p);\n+\n+        T[] values = type.getEnumConstants();\n+        Arrays.sort(values, new Comparator<T>() {\n+            @Override\n+            public int compare(T a, T b) {\n+                return a.toString().compareTo(b.toString());\n+            }\n+        });\n+\n+        if (allowNull) {\n+            addChoice(\"<null>\", null);\n+        }\n+        for (T v : values) {\n+            addChoice(v.toString(), v);\n+        }\n+\n+        selectInitialValue();\n+    }\n+\n+    public EnumOption(String name, Class<T> type, ObjectProperty<T> p) {\n+        this(name, true, type, p);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/EnumOption.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.options;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.geometry.Insets;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.text.Font;\n+import com.oracle.tools.fx.monkey.util.FX;\n+\n+\/**\n+ * Font Option Bound to a Property.\n+ *\/\n+\/\/ TODO allow null? use logical fonts?\n+\/\/ TODO names of families?\n+\/\/ TODO filtered list\n+public class FontOption extends BorderPane {\n+    private final SimpleObjectProperty<Font> property = new SimpleObjectProperty<>();\n+    private final ComboBox<String> fontField = new ComboBox<>();\n+    private final ComboBox<Double> sizeField = new ComboBox<>();\n+\n+    public FontOption(String name, boolean allowNull, ObjectProperty<Font> p) {\n+        FX.name(this, name);\n+        if (p != null) {\n+            property.bindBidirectional(p);\n+        }\n+\n+        FX.name(fontField, name + \"_FONT\");\n+        fontField.getItems().setAll(collectFonts(allowNull));\n+        fontField.getSelectionModel().selectedItemProperty().addListener((x) -> {\n+            update();\n+        });\n+\n+        FX.name(sizeField, name + \"_SIZE\");\n+        sizeField.getItems().setAll(\n+            1.0,\n+            2.5,\n+            6.0,\n+            8.0,\n+            10.0,\n+            11.0,\n+            12.0,\n+            16.0,\n+            24.0,\n+            32.0,\n+            48.0,\n+            72.0,\n+            144.0,\n+            480.0\n+        );\n+        sizeField.getSelectionModel().selectedItemProperty().addListener((x) -> {\n+            update();\n+        });\n+\n+        setCenter(fontField);\n+        setRight(sizeField);\n+        setMargin(sizeField, new Insets(0, 0, 0, 2));\n+\n+        setFont(property.get());\n+    }\n+\n+    public SimpleObjectProperty<Font> getProperty() {\n+        return property;\n+    }\n+\n+    protected void update() {\n+        Font f = getFont();\n+        property.set(f);\n+    }\n+\n+    public void select(String name) {\n+        fontField.getSelectionModel().select(name);\n+    }\n+\n+    public Font getFont() {\n+        String name = fontField.getSelectionModel().getSelectedItem();\n+        if (name == null) {\n+            return null;\n+        }\n+        Double size = sizeField.getSelectionModel().getSelectedItem();\n+        if (size == null) {\n+            size = 12.0;\n+        }\n+        return new Font(name, size);\n+    }\n+\n+    private void setFont(Font f) {\n+        String name;\n+        double size;\n+        if (f == null) {\n+            name = null;\n+            size = 12.0;\n+        } else {\n+            name = f.getName();\n+            size = f.getSize();\n+        }\n+        fontField.getSelectionModel().select(name);\n+        sizeField.getSelectionModel().select(size);\n+    }\n+\n+    protected List<String> collectFonts(boolean allowNull) {\n+        ArrayList<String> rv = new ArrayList<>();\n+        if (allowNull) {\n+            rv.add(null);\n+        }\n+        rv.addAll(Font.getFontNames());\n+        return rv;\n+    }\n+\n+    public void selectSystemFont() {\n+        FX.select(fontField, \"System Regular\"); \/\/ windows?\n+        FX.select(sizeField, 12.0);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/FontOption.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.options;\n+\n+import javafx.beans.property.ObjectProperty;\n+import javafx.scene.Node;\n+import javafx.scene.paint.Color;\n+import com.oracle.tools.fx.monkey.util.ImageTools;\n+\n+\/**\n+ * Graphic Option.\n+ *\/\n+public class GraphicOption extends ObjectOption<Node> {\n+    public GraphicOption(String name, ObjectProperty<Node> p) {\n+        super(name, p);\n+\n+        addChoice(\"<null>\", null);\n+        addChoice(\"1x1\", ImageTools.createImageView(Color.RED, 1, 1));\n+        addChoice(\"Small\", ImageTools.createImageView(Color.ORANGE, 16, 16));\n+        addChoice(\"Wide\", ImageTools.createImageView(Color.GREEN, 128, 16));\n+        addChoice(\"Tall\", ImageTools.createImageView(Color.BLUE, 16, 128));\n+        addChoice(\"Large\", ImageTools.createImageView(Color.SALMON, 256, 256));\n+\n+        selectInitialValue();\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/GraphicOption.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.options;\n+\n+import javafx.beans.property.ObjectProperty;\n+import javafx.geometry.Insets;\n+\n+\/**\n+ * Insets Option Bound to a Property.\n+ *\/\n+public class InsetsOption extends ObjectOption<Insets> {\n+    public InsetsOption(String name, boolean allowNull, ObjectProperty<Insets> p) {\n+        super(name, p);\n+\n+        if (allowNull) {\n+            addChoice(\"<null>\", null);\n+        }\n+        addChoice(\"0\", new Insets(0));\n+        addChoice(\"10\", new Insets(10));\n+        addChoice(\"100\", new Insets(100));\n+        addChoice(\"10, 20, 40, 80\", new Insets(10, 20, 40, 80));\n+\n+        selectInitialValue();\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/InsetsOption.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.options;\n+\n+import javafx.beans.property.IntegerProperty;\n+import javafx.beans.property.SimpleIntegerProperty;\n+import javafx.scene.control.Spinner;\n+import com.oracle.tools.fx.monkey.util.FX;\n+\n+\/**\n+ * Int Option Bound to a Property.\n+ *\/\n+public class IntOption extends Spinner<Integer> {\n+    private final SimpleIntegerProperty property = new SimpleIntegerProperty();\n+\n+    public IntOption(String name, int min, int max, IntegerProperty p) {\n+        super(min, max, p.get());\n+\n+        FX.name(this, name);\n+        setEditable(true);\n+\n+        property.bindBidirectional(p);\n+\n+        valueProperty().addListener((s, pr, val) -> {\n+            property.set(val);\n+        });\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/IntOption.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.options;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+import javafx.beans.property.Property;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.scene.control.ComboBox;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.NamedValue;\n+\n+\/**\n+ * Object Selector Bound to a Property.\n+ *\/\n+public class ObjectOption<T> extends ComboBox<NamedValue<T>> {\n+    private final SimpleObjectProperty<T> property = new SimpleObjectProperty<>();\n+\n+    public ObjectOption(String name, Property<T> p) {\n+        FX.name(this, name);\n+        property.bindBidirectional(p);\n+\n+        \/\/ TODO add the current value to choices and select it\n+\n+        getSelectionModel().selectedItemProperty().addListener((s, pr, c) -> {\n+            T v = c.getValue();\n+            property.set(v);\n+        });\n+    }\n+\n+    public void clearChoices() {\n+        getItems().clear();\n+    }\n+\n+    public void addChoice(String name, T item) {\n+        getItems().add(new NamedValue<>(name, item));\n+    }\n+\n+    public void addChoiceSupplier(String name, Supplier<T> gen) {\n+        getItems().add(new NamedValue<>(name, null) {\n+            @Override\n+            public T getValue() {\n+                return gen.get();\n+            }\n+        });\n+    }\n+\n+    \/**\n+     * Selects the property value, adding it to the list of items under \"<INITIAL>\" name.\n+     *\/\n+    public void selectInitialValue() {\n+        T value = property.get();\n+        List<NamedValue<T>> items = getItems();\n+        int sz = items.size();\n+        for (int i = 0; i < sz; i++) {\n+            NamedValue<T> item = items.get(i);\n+            if (Objects.equals(value, item.getValue())) {\n+                select(i);\n+                return;\n+            }\n+        }\n+\n+        String text = \"<INITIAL \" + value + \">\";\n+        items.add(new NamedValue<T>(text, value));\n+        select(sz);\n+    }\n+\n+    \/**\n+     * Selects the given index.  Does nothing if the index is outside of the valid range.\n+     * @param ix\n+     *\/\n+    public void select(int ix) {\n+        if ((ix >= 0) && (ix < getItems().size())) {\n+            getSelectionModel().select(ix);\n+        }\n+    }\n+\n+    public void selectFirst() {\n+        select(0);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/ObjectOption.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.options;\n+\n+import javafx.beans.property.Property;\n+import javafx.scene.paint.Color;\n+import javafx.scene.paint.CycleMethod;\n+import javafx.scene.paint.LinearGradient;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.paint.Stop;\n+\n+\/**\n+ * Paint Option Bound to a Property.\n+ *\/\n+public class PaintOption extends ObjectOption<Paint> {\n+    public PaintOption(String name, Property<Paint> p) {\n+        super(name, p);\n+\n+        addChoice(\"Red\", Color.RED);\n+        addChoice(\"Green\", Color.GREEN);\n+        addChoice(\"Blue\", Color.BLUE);\n+        addChoice(\"Black\", Color.BLACK);\n+        addChoice(\"White\", Color.WHITE);\n+        \/\/ TODO image\n+        \/\/ TODO linear gradient\n+        addChoiceSupplier(\"Linear Gradient\", () -> {\n+            double startX = 0;\n+            double startY = 0;\n+            double endX = 1;\n+            double endY = 1;\n+            boolean proportional = true;\n+            CycleMethod cycleMethod = CycleMethod.REPEAT;\n+            Stop[] stops = {\n+                new Stop(0, Color.WHITE),\n+                new Stop(1, Color.BLACK)\n+            };\n+            return new LinearGradient(\n+                startX,\n+                startY,\n+                endX,\n+                endY,\n+                proportional,\n+                cycleMethod,\n+                stops\n+            );\n+        });\n+        \/\/ TODO radial gradient\n+        addChoice(\"<null>\", null);\n+        selectInitialValue();\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/PaintOption.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,326 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.options;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import javafx.collections.ObservableList;\n+import javafx.scene.Node;\n+import javafx.scene.layout.Priority;\n+import javafx.scene.layout.Region;\n+import com.oracle.tools.fx.monkey.util.ObjectSelector;\n+\n+\/**\n+ * Pane content Options.\n+ *\/\n+public class PaneContentOptions {\n+    public static Node createOptions(ObservableList<Node> children, Supplier<Builder> b) {\n+        ObjectSelector<List<Node>> s = new ObjectSelector<>(\"children\", (cs) -> {\n+            children.setAll(cs);\n+        });\n+        s.addChoiceSupplier(\"progressive max\", () -> {\n+            return b.get().\n+                d().max(30).\n+                d().max(31).\n+                d().max(32).\n+                d().max(33).\n+                d().max(34).\n+                d().max(35).\n+                d().max(36).\n+                d().max(37).\n+                d().max(38).\n+                d().max(39).\n+                d().max(40).\n+                d().max(41).\n+                d().max(30).\n+                build();\n+        });\n+        s.addChoiceSupplier(\"progressive min\", () -> {\n+            return b.get().\n+                d().min(30).\n+                d().min(31).\n+                d().min(32).\n+                d().min(33).\n+                d().min(34).\n+                d().min(35).\n+                d().min(36).\n+                d().min(37).\n+                d().min(38).\n+                d().min(39).\n+                d().min(40).\n+                d().min(41).\n+                d().min(30).\n+                build();\n+        });\n+        s.addChoiceSupplier(\"fractional prefs\", () -> {\n+            return b.get().\n+                d().pref(25.3).\n+                d().pref(25.3).\n+                d().pref(25.4).\n+                d().pref(25.3).max(100).\n+                d().pref(25.3).max(101).\n+                d().pref(25.4).\n+                build();\n+        });\n+        s.addChoiceSupplier(\"fill + max\", () -> {\n+            return b.get().\n+                d().fill().\n+                d().max(200).\n+                build();\n+        });\n+        s.addChoiceSupplier(\"pref only\", () -> {\n+            return b.get().\n+                d().pref(100).\n+                d().pref(150).\n+                d().pref(200).\n+                d().pref(250).\n+                build();\n+        });\n+        s.addChoiceSupplier(\"all set: min, pref, max\", () -> {\n+            return b.get().\n+                d().\n+                d().min(20).pref(30).max(50).\n+                d().pref(200).\n+                d().pref(300).max(400).\n+                d().\n+                build();\n+        });\n+        s.addChoiceSupplier(\"min width\", () -> {\n+            return b.get().\n+                d().\n+                d().\n+                d().\n+                d().min(300).\n+                build();\n+        });\n+        s.addChoiceSupplier(\"max width progressive\", () -> {\n+            return b.get().\n+                d().max(30).fill().\n+                d().max(31).fill().\n+                d().max(32).fill().\n+                d().max(33).fill().\n+                d().max(34).fill().\n+                d().max(35).fill().\n+                d().max(36).fill().\n+                d().max(37).fill().\n+                d().max(38).fill().\n+                d().max(39).fill().\n+                build();\n+        });\n+        s.addChoiceSupplier(\"min width (beginning)\", () -> {\n+            return b.get().\n+                d().min(300).\n+                d().min(300).\n+                d().\n+                d().\n+                d().\n+                d().\n+                build();\n+        });\n+        s.addChoiceSupplier(\"max width (beginning)\", () -> {\n+            return b.get().\n+                d().max(300).\n+                d().max(300).\n+                d().\n+                d().\n+                d().\n+                d().\n+                build();\n+        });\n+        s.addChoiceSupplier(\"fixed width (beginning)\", () -> {\n+            return b.get().\n+                d().min(100).max(100).\n+                d().min(100).max(100).\n+                d().\n+                d().\n+                d().\n+                d().\n+                build();\n+        });\n+        s.addChoiceSupplier(\"min width (middle)\", () -> {\n+            return b.get().\n+                d().\n+                d().\n+                d().min(300).\n+                d().min(300).\n+                d().\n+                d().\n+                build();\n+        });\n+        s.addChoiceSupplier(\"max width (middle)\", () -> {\n+            return b.get().\n+                d().\n+                d().\n+                d().max(300).\n+                d().max(300).\n+                d().\n+                d().\n+                build();\n+        });\n+        s.addChoiceSupplier(\"fixed width (middle)\", () -> {\n+            return b.get().\n+                d().\n+                d().\n+                d().min(100).max(100).\n+                d().min(100).max(100).\n+                d().\n+                d().\n+                build();\n+        });\n+        s.addChoiceSupplier(\"min width (end)\", () -> {\n+            return b.get().\n+                d().\n+                d().\n+                d().\n+                d().\n+                d().min(300).\n+                d().min(300).\n+                build();\n+        });\n+        s.addChoiceSupplier(\"max width (end)\", () -> {\n+            return b.get().\n+                d().\n+                d().\n+                d().\n+                d().\n+                d().max(300).\n+                d().max(300).\n+                build();\n+        });\n+        s.addChoiceSupplier(\"fixed width (end)\", () -> {\n+            return b.get().\n+                d().\n+                d().\n+                d().\n+                d().\n+                d().min(100).max(100).\n+                d().min(100).max(100).\n+                build();\n+        });\n+        s.addChoiceSupplier(\"all fixed\", () -> {\n+            return b.get().\n+                d().min(70).max(70).\n+                d().min(70).max(70).\n+                d().min(70).max(70).\n+                d().min(70).max(70).\n+                build();\n+        });\n+        s.addChoiceSupplier(\"all max\", () -> {\n+            return b.get().\n+                d().max(70).\n+                d().max(70).\n+                d().max(70).\n+                d().max(70).\n+                build();\n+        });\n+        s.addChoiceSupplier(\"16 items, pref=30\", () -> {\n+            return b.get().\n+                d().pref(30).\n+                d().pref(30).\n+                d().pref(30).\n+                d().pref(30).\n+                d().pref(30).\n+                d().pref(30).\n+                d().pref(30).\n+                d().pref(30).\n+                d().pref(30).\n+                d().pref(30).\n+                d().pref(30).\n+                d().pref(30).\n+                d().pref(30).\n+                d().pref(30).\n+                d().pref(30).\n+                d().pref(30).\n+                build();\n+        });\n+        s.addChoiceSupplier(\"various\", () -> {\n+            return b.get().\n+                d().pref(100).\n+                d().pref(200).\n+                d().pref(300).\n+                d().min(100).max(100).\n+                d().pref(100).\n+                d().min(100).\n+                d().max(100).\n+                d().pref(300).\n+                d().\n+                build();\n+        });\n+        s.selectFirst();\n+        return s;\n+    }\n+\n+    public static abstract class Builder {\n+        protected abstract void setMin(Region r, double v);\n+\n+        protected abstract void setPref(Region r, double v);\n+\n+        protected abstract void setMax(Region r, double v);\n+\n+        protected abstract void setGrow(Node n, Priority p);\n+\n+        private final Function<List<Node>, Region> creator;\n+        private final ArrayList<Node> children = new ArrayList<>();\n+\n+        public Builder(Function<List<Node>, Region> creator) {\n+            this.creator = creator;\n+        }\n+\n+        public Builder d() {\n+            creator.apply(children);\n+            return this;\n+        }\n+\n+        public Builder max(double v) {\n+            setMax(last(), v);\n+            return this;\n+        }\n+\n+        public Builder min(double v) {\n+            setMin(last(), v);\n+            return this;\n+        }\n+\n+        public Builder pref(double v) {\n+            setPref(last(), v);\n+            return this;\n+        }\n+\n+        public Builder fill() {\n+            setGrow(last(), Priority.ALWAYS);\n+            return this;\n+        }\n+\n+        private Region last() {\n+            return (Region)children.get(children.size() - 1);\n+        }\n+\n+        public List<Node> build() {\n+            return children;\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/PaneContentOptions.java","additions":326,"deletions":0,"binary":false,"changes":326,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.options;\n+\n+import javafx.beans.property.StringProperty;\n+import com.oracle.tools.fx.monkey.util.TextTemplates;\n+import com.oracle.tools.fx.monkey.util.Utils;\n+\n+\/**\n+ * Prompt Text Option Bound to a Property.\n+ *\/\n+public class PromptTextOption extends TextChoiceOption {\n+    \/\/ TOOD or move it under some kind of template?\n+    public PromptTextOption(String name, boolean allowEditButton, StringProperty p) {\n+        super(name, allowEditButton, p);\n+        Utils.fromPairs(TextTemplates.singleLineTextPairs(), (k, v) -> addChoice(k, v));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/PromptTextOption.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -0,0 +1,174 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.options;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.geometry.Insets;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.layout.BorderPane;\n+import javafx.util.StringConverter;\n+import com.oracle.tools.fx.monkey.util.EnterTextDialog;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.NamedValue;\n+\n+\/**\n+ * Text Choice Option Bound to a Property.\n+ *\/\n+public class TextChoiceOption extends BorderPane {\n+    private final SimpleStringProperty property = new SimpleStringProperty();\n+    private final ComboBox<Object> field;\n+\n+    public TextChoiceOption(String name, boolean allowEditButton, StringProperty p) {\n+        FX.name(this, name);\n+        if (p != null) {\n+            property.bindBidirectional(p);\n+        }\n+\n+        field = new ComboBox<>();\n+        field.setMaxWidth(Double.MAX_VALUE);\n+        field.setConverter(new StringConverter<Object>() {\n+            @Override\n+            public String toString(Object x) {\n+                return toDisplay(x);\n+            }\n+\n+            @Override\n+            public Object fromString(String text) {\n+                return text;\n+            }\n+        });\n+        field.getSelectionModel().selectedItemProperty().addListener((pr) -> {\n+            String text = getSelectedText();\n+            property.set(text);\n+        });\n+\n+        if (allowEditButton) {\n+            Button editButton = FX.button(\"Edit\", EnterTextDialog.getRunnable(this, property));\n+            setRight(editButton);\n+            setMargin(editButton, new Insets(0, 0, 0, 2));\n+        }\n+\n+        setCenter(field);\n+        setMaxWidth(Double.MAX_VALUE);\n+    }\n+\n+    public SimpleStringProperty property() {\n+        return property;\n+    }\n+\n+    public void clearChoices() {\n+        field.getItems().clear();\n+    }\n+\n+    public void addChoice(String name, String item) {\n+        field.getItems().add(new NamedValue<>(name, item));\n+    }\n+\n+    public void addChoiceSupplier(String name, Supplier<String> gen) {\n+        field.getItems().add(new NamedValue<>(name, null) {\n+            @Override\n+            public String getValue() {\n+                return gen.get();\n+            }\n+        });\n+    }\n+\n+    public void select(String item) {\n+        int ix = indexOf(item);\n+        if (ix >= 0) {\n+            field.getSelectionModel().select(ix);\n+        }\n+    }\n+\n+    private int indexOf(String item) {\n+        List<Object> list = field.getItems();\n+        int sz = list.size();\n+        for (int i = 0; i < sz; i++) {\n+            Object x = list.get(i);\n+            if (eq(item, x)) {\n+                return i;\n+            } else if (x instanceof NamedValue p) {\n+                if (eq(item, p.getDisplay()) || eq(item, p.getValue())) {\n+                    return i;\n+                }\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    private static boolean eq(Object a, Object b) {\n+        if (a == null) {\n+            return (b == null);\n+        } else {\n+            return a.equals(b);\n+        }\n+    }\n+\n+    public void selectFirst() {\n+        field.getSelectionModel().selectFirst();\n+    }\n+\n+    private String toDisplay(Object x) {\n+        if (x == null) {\n+            return null;\n+        } else if (x instanceof NamedValue p) {\n+            return p.getDisplay();\n+        } else {\n+            return x.toString();\n+        }\n+    }\n+\n+    private String toValue(Object x) {\n+        if (x == null) {\n+            return null;\n+        } else if (x instanceof NamedValue p) {\n+            return (String)p.getValue();\n+        } else {\n+            return x.toString();\n+        }\n+    }\n+\n+    public String getSelectedText() {\n+        Object v = field.getSelectionModel().getSelectedItem();\n+        return toValue(v);\n+    }\n+\n+    public void removeChoice(String name) {\n+        int ix = 0;\n+        for (Object x: field.getItems()) {\n+            String s = toDisplay(x);\n+            if (Objects.equals(name, s)) {\n+                field.getItems().remove(ix);\n+                return;\n+            }\n+            ix++;\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/TextChoiceOption.java","additions":174,"deletions":0,"binary":false,"changes":174,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.options;\n+\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.geometry.Insets;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.BorderPane;\n+import com.oracle.tools.fx.monkey.util.EnterTextDialog;\n+import com.oracle.tools.fx.monkey.util.FX;\n+\n+\/**\n+ * Simple Text Option Bound to a Property.\n+ * Presents a text field with an Edit button for mode complex text.\n+ *\/\n+\/\/ TODO combo box for history?\n+\/\/ TODO highlight special characters?\n+public class TextOption extends BorderPane {\n+    private final SimpleStringProperty property = new SimpleStringProperty();\n+    private final TextField textField;\n+\n+    public TextOption(String name, StringProperty p) {\n+        this(name);\n+        property.bindBidirectional(p);\n+    }\n+\n+    public TextOption(String name, ObjectProperty<String> p) {\n+        this(name);\n+        property.bindBidirectional(p);\n+    }\n+\n+    private TextOption(String name) {\n+        FX.name(this, name);\n+\n+        textField = new TextField();\n+        textField.setMaxWidth(Double.MAX_VALUE);\n+        textField.setOnAction((ev) -> {\n+            String v = textField.getText();\n+            property.set(v);\n+        });\n+\n+        Button editButton = FX.button(\"Edit\", EnterTextDialog.getRunnable(this, property));\n+\n+        setCenter(textField);\n+        setRight(editButton);\n+        setMargin(editButton, new Insets(0, 0, 0, 2));\n+        setMaxWidth(Double.MAX_VALUE);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/TextOption.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+import javafx.scene.control.skin.AccordionSkin;\n+import com.oracle.tools.fx.monkey.sheets.ControlPropertySheet;\n@@ -31,0 +33,1 @@\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n@@ -34,0 +37,1 @@\n+import com.oracle.tools.fx.monkey.util.Utils;\n@@ -38,2 +42,2 @@\n-public class AccordionPage extends TestPaneBase {\n-    private final Accordion accordion;\n+public class AccordionPage extends TestPaneBase implements HasSkinnable {\n+    private final Accordion control;\n@@ -42,1 +46,1 @@\n-        FX.name(this, \"AccordionPage\");\n+        super(\"AccordionPage\");\n@@ -44,1 +48,1 @@\n-        accordion = new Accordion();\n+        control = new Accordion();\n@@ -47,2 +51,2 @@\n-        Button addButton = new Button(\"Add Pane\");\n-        addButton.setOnAction((ev) -> addPane());\n+        \/\/ TODO MenuButtons with more options\n+        Button addButton = FX.button(\"Add Pane\", this::addPane);\n@@ -50,2 +54,1 @@\n-        Button removeButton = new Button(\"Remove Pane\");\n-        removeButton.setOnAction((ev) -> removePane());\n+        Button removeButton = FX.button(\"Remove\", this::removePane);\n@@ -54,2 +57,3 @@\n-        op.add(addButton);\n-        op.add(removeButton);\n+        op.section(\"Accordion\");\n+        op.option(\"Panes:\", Utils.buttons(addButton, removeButton));\n+        ControlPropertySheet.appendTo(op, control);\n@@ -57,1 +61,1 @@\n-        setContent(accordion);\n+        setContent(control);\n@@ -64,2 +68,1 @@\n-        Button b = new Button(name);\n-        b.setOnAction((ev) -> {\n+        Button b = FX.button(name, () -> {\n@@ -69,1 +72,1 @@\n-        accordion.getPanes().add(p);\n+        control.getPanes().add(p);\n@@ -73,1 +76,1 @@\n-        int sz = accordion.getPanes().size();\n+        int sz = control.getPanes().size();\n@@ -75,1 +78,1 @@\n-            accordion.getPanes().remove(0);\n+            control.getPanes().remove(0);\n@@ -78,0 +81,10 @@\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new AccordionSkin(control));\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/AccordionPage.java","additions":30,"deletions":17,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.scene.chart.AreaChart;\n+import javafx.scene.chart.XYChart;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.sheets.XYChartPropertySheet;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+\n+\/**\n+ * Area Chart Page.\n+ *\/\n+public class AreaChartPage extends XYChartPageBase {\n+    private final AreaChart<Number, Number> chart;\n+\n+    public AreaChartPage() {\n+        super(\"AreaChartPage\");\n+\n+        chart = new AreaChart<>(createNumberAxis(\"X Axis\"), createNumberAxis(\"Y Axis\"));\n+        chart.setTitle(\"Area Chart\");\n+        addSeries();\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"AreaChart\");\n+        op.option(new BooleanOption(\"createSymbols\", \"create symbols\", chart.createSymbolsProperty()));\n+        XYChartPropertySheet.appendTo(this, op, chart);\n+\n+        setContent(chart);\n+        setOptions(op);\n+    }\n+\n+    @Override\n+    public XYChart<?, Number> chart() {\n+        return chart;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/AreaChartPage.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.scene.chart.BarChart;\n+import javafx.scene.chart.XYChart;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n+import com.oracle.tools.fx.monkey.sheets.XYChartPropertySheet;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+\n+\/**\n+ * Bar Chart Page.\n+ *\/\n+public class BarChartPage extends XYChartPageBase {\n+    private final BarChart<String, Number> chart;\n+\n+    public BarChartPage() {\n+        super(\"BarChartPage\");\n+\n+        chart = new BarChart<>(createCategoryAxis(\"X Axis\"), createNumberAxis(\"Y Axis\"));\n+        chart.setTitle(\"Bar Chart\");\n+        addSeries();\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"BarChart\");\n+        op.option(\"Bar Gap:\", Options.gaps(\"barGap\", chart.barGapProperty()));\n+        op.option(\"Category Gap:\", Options.gaps(\"categoryGap\", chart.categoryGapProperty()));\n+        XYChartPropertySheet.appendTo(this, op, chart);\n+\n+        setContent(chart);\n+        setOptions(op);\n+    }\n+\n+    @Override\n+    public XYChart<?, Number> chart() {\n+        return chart;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/BarChartPage.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -1,452 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.oracle.tools.fx.monkey.pages;\n-\n-import javafx.geometry.Insets;\n-import javafx.scene.Node;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.CheckBox;\n-import javafx.scene.control.ComboBox;\n-import javafx.scene.control.ContextMenu;\n-import javafx.scene.control.MenuItem;\n-import javafx.scene.control.SeparatorMenuItem;\n-import javafx.scene.layout.Background;\n-import javafx.scene.layout.BorderPane;\n-import javafx.scene.layout.Pane;\n-import javafx.scene.layout.Priority;\n-import javafx.scene.layout.Region;\n-import javafx.scene.paint.Color;\n-import com.oracle.tools.fx.monkey.util.FX;\n-import com.oracle.tools.fx.monkey.util.OptionPane;\n-import com.oracle.tools.fx.monkey.util.TestPaneBase;\n-\n-\/**\n- * HBox\/VBox page base class.\n- *\/\n-public abstract class BoxPageBase extends TestPaneBase {\n-    enum Demo {\n-        PMAX(\"progressive max\"),\n-        PMIN(\"progressive min\"),\n-        BUG_8264591(\"8264591 fractional prefs\"),\n-        FILL_MAX(\"fill + max\"),\n-        PREF(\"pref only\"),\n-        ALL(\"all set: min, pref, max\"),\n-        MIN_WIDTH(\"min width\"),\n-        MAX_WIDTH(\"max width progressive\"),\n-        MIN_WIDTH2(\"min width (middle)\"),\n-        MAX_WIDTH2(\"max width (middle)\"),\n-        MIN_WIDTH3(\"min width (beginning)\"),\n-        MAX_WIDTH3(\"max width (beginning)\"),\n-        FIXED_MIDDLE(\"fixed in the middle\"),\n-        ALL_FIXED(\"all fixed\"),\n-        ALL_MAX(\"all with maximum width\"),\n-        MIN_IN_CENTER(\"min widths set in middle columns\"),\n-        MAX_IN_CENTER(\"max widths set in middle columns\"),\n-        VARIOUS(\"various\"),\n-        MANY_COLUMNS(\"many columns\"),\n-        MANY_COLUMNS_SAME(\"many columns, same pref\"),\n-        ;\n-        private final String text;\n-        Demo(String text) { this.text = text; }\n-        public String toString() { return text; }\n-    }\n-\n-    public enum Cmd {\n-        COL,\n-        MIN,\n-        PREF,\n-        MAX,\n-        FILL,\n-    }\n-\n-    protected abstract Pane createPane();\n-\n-    protected abstract void setMin(Region r, double v);\n-\n-    protected abstract void setPref(Region r, double v);\n-\n-    protected abstract void setMax(Region r, double v);\n-\n-    protected abstract void setGrow(Node n, Priority p);\n-\n-    protected abstract Region createRegion();\n-\n-    protected final Cmd COL = Cmd.COL;\n-    protected final Cmd MIN = Cmd.MIN;\n-    protected final Cmd PREF = Cmd.PREF;\n-    protected final Cmd MAX = Cmd.MAX;\n-    protected final Cmd FILL = Cmd.FILL;\n-\n-    protected final ComboBox<Demo> demoSelector;\n-    protected final CheckBox snap;\n-    protected final CheckBox grow;\n-    protected Pane box;\n-\n-    public BoxPageBase(String name) {\n-        FX.name(this, name);\n-\n-        \/\/ selector\n-        demoSelector = new ComboBox<>();\n-        FX.name(demoSelector, \"demoSelector\");\n-        demoSelector.getItems().addAll(Demo.values());\n-        demoSelector.setEditable(false);\n-        demoSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            updatePane();\n-        });\n-\n-        Button addButton = new Button(\"Add Item\");\n-        addButton.setOnAction((ev) -> {\n-            addItem(box);\n-        });\n-\n-        Button clearButton = new Button(\"Clear Items\");\n-        clearButton.setOnAction((ev) -> {\n-            box.getChildren().clear();\n-        });\n-\n-        snap = new CheckBox(\"snap\");\n-        FX.name(snap, \"snap\");\n-\n-        grow = new CheckBox(\"grow\");\n-        FX.name(grow, \"grow\");\n-        grow.selectedProperty().addListener((s, p, on) -> {\n-            setGrow(on);\n-        });\n-\n-        \/\/ layout\n-\n-        OptionPane op = new OptionPane();\n-        op.label(\"Configuration:\");\n-        op.option(demoSelector);\n-        op.option(addButton);\n-        op.option(clearButton);\n-        op.option(snap);\n-        op.option(grow);\n-        setOptions(op);\n-\n-        FX.selectFirst(demoSelector);\n-    }\n-\n-    protected Object[] createSpec(Demo d) {\n-        switch (d) {\n-        case PMAX:\n-            return new Object[] {\n-                COL, MAX, 30,\n-                COL, MAX, 31,\n-                COL, MAX, 32,\n-                COL, MAX, 33,\n-                COL, MAX, 34,\n-                COL, MAX, 35,\n-                COL, MAX, 36,\n-                COL, MAX, 37,\n-                COL, MAX, 38,\n-                COL, MAX, 39,\n-                COL, MAX, 40,\n-                COL, MAX, 41,\n-                COL, MAX, 30,\n-            };\n-        case PMIN:\n-            return new Object[] {\n-                COL, MIN, 30,\n-                COL, MIN, 31,\n-                COL, MIN, 32,\n-                COL, MIN, 33,\n-                COL, MIN, 34,\n-                COL, MIN, 35,\n-                COL, MIN, 36,\n-                COL, MIN, 37,\n-                COL, MIN, 38,\n-                COL, MIN, 39,\n-                COL, MIN, 40,\n-                COL, MIN, 41,\n-                COL, MIN, 30,\n-            };\n-        case ALL:\n-            return new Object[] {\n-                COL,\n-                COL, MIN, 20, PREF, 20, MAX, 20,\n-                COL, PREF, 200,\n-                COL, PREF, 300, MAX, 400,\n-                COL\n-            };\n-        case BUG_8264591:\n-            return new Object[] {\n-                COL, PREF, 25.3,\n-                COL, PREF, 25.3,\n-                COL, PREF, 25.4,\n-                COL, PREF, 25.3, MAX, 100,\n-                COL, PREF, 25.3, MAX, 101,\n-                COL, PREF, 25.4\n-            };\n-        case FILL_MAX:\n-            return new Object[] {\n-                COL, FILL,\n-                COL, MAX, 200\n-            };\n-        case PREF:\n-            return new Object[] {\n-                COL, PREF, 100,\n-                COL, PREF, 200,\n-                COL, PREF, 300,\n-                COL, PREF, 400\n-            };\n-        case MIN_WIDTH:\n-            return new Object[] {\n-                COL,\n-                COL,\n-                COL,\n-                COL, MIN, 300\n-            };\n-        case MAX_WIDTH:\n-            return new Object[] {\n-                COL, MAX, 30, FILL,\n-                COL, MAX, 31, FILL,\n-                COL, MAX, 32, FILL,\n-                COL, MAX, 33, FILL,\n-                COL, MAX, 34, FILL,\n-                COL, MAX, 35, FILL,\n-                COL, MAX, 36, FILL,\n-                COL, MAX, 37, FILL,\n-                COL, MAX, 38, FILL,\n-            };\n-        case MIN_WIDTH2:\n-            return new Object[] {\n-                COL,\n-                COL,\n-                COL, MIN, 300,\n-                COL\n-            };\n-        case MAX_WIDTH2:\n-            return new Object[] {\n-                COL,\n-                COL,\n-                COL, MAX, 100,\n-                COL\n-            };\n-        case MIN_WIDTH3:\n-            return new Object[] {\n-                COL, MIN, 300,\n-                COL,\n-                COL,\n-                COL\n-            };\n-        case MAX_WIDTH3:\n-            return new Object[] {\n-                COL, MAX, 100,\n-                COL,\n-                COL,\n-                COL\n-            };\n-        case MIN_IN_CENTER:\n-            return new Object[] {\n-                COL,\n-                COL, MIN, 20,\n-                COL, MIN, 30,\n-                COL, MIN, 40,\n-                COL, MIN, 50,\n-                COL, MIN, 60,\n-                COL\n-            };\n-        case MAX_IN_CENTER:\n-            return new Object[] {\n-                COL,\n-                COL, MAX, 20,\n-                COL, MAX, 30,\n-                COL, MAX, 40,\n-                COL, MAX, 50,\n-                COL, MAX, 60,\n-                COL\n-            };\n-        case FIXED_MIDDLE:\n-            return new Object[] {\n-                COL,\n-                COL,\n-                COL,\n-                COL, MIN, 100, MAX, 100,\n-                COL, MIN, 100, MAX, 100,\n-                COL,\n-                COL,\n-                COL\n-            };\n-        case ALL_FIXED:\n-            return new Object[] {\n-                COL, MIN, 50, MAX, 50,\n-                COL, MIN, 50, MAX, 50,\n-                COL, MIN, 50, MAX, 50\n-            };\n-        case ALL_MAX:\n-            return new Object[] {\n-                COL, MAX, 50,\n-                COL, MAX, 50,\n-                COL, MAX, 50\n-            };\n-        case VARIOUS:\n-            return new Object[] {\n-                COL, PREF, 100,\n-                COL, PREF, 200,\n-                COL, PREF, 300,\n-                COL, MIN, 100, MAX, 100,\n-                COL, PREF, 100,\n-                COL, MIN, 100,\n-                COL, MAX, 100,\n-                COL, PREF, 400,\n-                COL\n-            };\n-        case MANY_COLUMNS:\n-            return new Object[] {\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL,\n-                COL\n-            };\n-        case MANY_COLUMNS_SAME:\n-            return new Object[] {\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30,\n-                COL, PREF, 30\n-            };\n-        default:\n-            throw new Error(\"?\" + d);\n-        }\n-    }\n-\n-    protected Pane createPane(Demo demo, Object[] spec) {\n-        Pane box = createPane();\n-        if ((demo == null) || (spec == null)) {\n-            return box;\n-        }\n-\n-        box.setSnapToPixel(snap.isSelected());\n-        snap.selectedProperty().bindBidirectional(box.snapToPixelProperty());\n-        Region region = null;\n-\n-        for (int i = 0; i < spec.length;) {\n-            Object x = spec[i++];\n-            if (x instanceof Cmd cmd) {\n-                switch (cmd) {\n-                case COL:\n-                    {\n-                        Region c = addItem(box);\n-                        setGrow(c, grow.isSelected() ? Priority.ALWAYS : Priority.NEVER);\n-                        region = c;\n-                    }\n-                    break;\n-                case MAX:\n-                    {\n-                        double w = number(spec[i++]);\n-                        setMax(region, w);\n-                    }\n-                    break;\n-                case MIN:\n-                    {\n-                        double w = number(spec[i++]);\n-                        setMin(region, w);\n-                    }\n-                    break;\n-                case PREF:\n-                    {\n-                        double w = number(spec[i++]);\n-                        setPref(region, w);\n-                    }\n-                    break;\n-                case FILL:\n-                    {\n-                        setGrow(region, Priority.ALWAYS);\n-                    }\n-                    break;\n-                default:\n-                    throw new Error(\"?\" + cmd);\n-                }\n-            } else {\n-                throw new Error(\"?\" + x);\n-            }\n-        }\n-\n-        box.setPadding(new Insets(0, 0, 10, 0));\n-        box.setBackground(Background.fill(Color.DARKGRAY));\n-\n-        return box;\n-    }\n-\n-    protected void setGrow(boolean on) {\n-        Priority p = on ? Priority.ALWAYS : Priority.NEVER;\n-        for (Node n: box.getChildren()) {\n-            setGrow(n, p);\n-        }\n-    }\n-\n-    protected static double number(Object x) {\n-        return ((Number)x).doubleValue();\n-    }\n-\n-    protected Region addItem(Pane box) {\n-        boolean even = (box.getChildren().size() % 2) == 0;\n-        Background bg = Background.fill(even ? Color.GRAY : Color.LIGHTGRAY);\n-        Region r = createRegion();\n-        r.setBackground(bg);\n-        box.getChildren().add(r);\n-        return r;\n-    }\n-\n-    protected void updatePane() {\n-        Demo d = demoSelector.getSelectionModel().getSelectedItem();\n-        Object[] spec = createSpec(d);\n-        box = createPane(d, spec);\n-\n-        BorderPane bp = new BorderPane(box);\n-        bp.setPadding(new Insets(0, 10, 0, 0));\n-\n-        setContent(bp);\n-    }\n-}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/BoxPageBase.java","additions":0,"deletions":452,"binary":false,"changes":452,"status":"deleted"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.scene.chart.BubbleChart;\n+import javafx.scene.chart.XYChart;\n+import com.oracle.tools.fx.monkey.sheets.XYChartPropertySheet;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+\n+\/**\n+ * Bubble Chart Page.\n+ *\/\n+public class BubbleChartPage extends XYChartPageBase {\n+    private final BubbleChart<Number, Number> chart;\n+\n+    public BubbleChartPage() {\n+        super(\"BubbleChartPage\");\n+\n+        chart = new BubbleChart<>(createNumberAxis(\"X Axis\"), createNumberAxis(\"Y Axis\"));\n+        chart.setTitle(\"Bubble Chart\");\n+        addSeries();\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"BubbleChart\");\n+        op.label(\"no specific properties\");\n+        XYChartPropertySheet.appendTo(this, op, chart);\n+\n+        setContent(chart);\n+        setOptions(op);\n+    }\n+\n+    @Override\n+    public XYChart<?, Number> chart() {\n+        return chart;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/BubbleChartPage.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,0 @@\n-import com.oracle.tools.fx.monkey.util.FX;\n-import com.oracle.tools.fx.monkey.util.TestPaneBase;\n@@ -34,0 +32,1 @@\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n@@ -42,1 +41,1 @@\n-        FX.name(this, \"CanvasPage\");\n+        super(\"CanvasPage\");\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/CanvasPage.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,7 @@\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import javafx.collections.ObservableList;\n+import javafx.scene.Node;\n@@ -28,2 +35,4 @@\n-import com.oracle.tools.fx.monkey.util.FX;\n-import com.oracle.tools.fx.monkey.util.ItemSelector;\n+import javafx.scene.control.skin.ChoiceBoxSkin;\n+import com.oracle.tools.fx.monkey.sheets.ControlPropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.ObjectSelector;\n@@ -31,0 +40,1 @@\n+import com.oracle.tools.fx.monkey.util.SequenceNumber;\n@@ -34,1 +44,1 @@\n- * ChoiceBox Page\n+ * ChoiceBox Page.\n@@ -36,2 +46,2 @@\n-public class ChoiceBoxPage extends TestPaneBase {\n-    private ChoiceBox<String> control;\n+public class ChoiceBoxPage extends TestPaneBase implements HasSkinnable {\n+    private ChoiceBox<Object> control;\n@@ -40,1 +50,1 @@\n-        FX.name(this, \"ChoiceBoxPage\");\n+        super(\"ChoiceBoxPage\");\n@@ -44,9 +54,6 @@\n-        ItemSelector<String[]> itemSelector = new ItemSelector<>(\n-            \"itemSelector\",\n-            (t) -> control.getItems().setAll(t),\n-            \"0\", mk(0),\n-            \"1\", mk(1),\n-            \"2\", mk(2),\n-            \"5\", mk(5),\n-            \"100\", mk(100),\n-            \"1_000\", mk(1_000));\n+        OptionPane op = new OptionPane();\n+        op.section(\"ChoiceBox\");\n+        op.option(\"Converter: TODO\", null); \/\/ TODO\n+        op.option(\"Items:\", createItemsOption(\"items\", control.getItems()));\n+        op.option(\"Selection Model:\", createSelectionModelOptions(\"selectionModel\"));\n+        op.option(\"Value: TODO\", null); \/\/ TODO\n@@ -54,5 +61,1 @@\n-        \/\/ TODO converter\n-\n-        OptionPane p = new OptionPane();\n-        p.label(\"Items:\");\n-        p.option(itemSelector.node());\n+        ControlPropertySheet.appendTo(op, control);\n@@ -61,1 +64,1 @@\n-        setOptions(p);\n+        setOptions(op);\n@@ -71,0 +74,65 @@\n+\n+    \/\/ TODO duplicate code in ListView and some other classes - move to utils?\n+    private String newItem(Object n) {\n+        return n + \".\" + SequenceNumber.next();\n+    }\n+\n+    private String newVariableItem(Object n) {\n+        int rows = 1 << new Random().nextInt(5);\n+        StringBuilder sb = new StringBuilder();\n+        for (int i = 0; i < rows; i++) {\n+            if (i > 0) {\n+                sb.append('\\n');\n+            }\n+            sb.append(i);\n+        }\n+        return n + \".\" + SequenceNumber.next() + \".\" + sb;\n+    }\n+\n+    private Supplier<List<Object>> createItems(int count, Function<Integer, Object> gen) {\n+        return () -> {\n+            ArrayList<Object> rv = new ArrayList<>(count);\n+            for (int i = 0; i < count; i++) {\n+                Object v = gen.apply(i);\n+                rv.add(v);\n+            }\n+            return rv;\n+        };\n+    }\n+\n+    private Node createItemsOption(String name, ObservableList<Object> items) {\n+        ObjectSelector<List<Object>> s = new ObjectSelector<>(name, (v) -> {\n+            items.setAll(v);\n+        });\n+        s.addChoiceSupplier(\"1 Row\", createItems(1, this::newItem));\n+        s.addChoiceSupplier(\"10 Rows\", createItems(10, this::newItem));\n+        s.addChoiceSupplier(\"200 Rows\", createItems(200, this::newItem));\n+        \/\/s.addChoiceSupplier(\"10,000 Rows\", createItems(10_000, this::newItem));\n+        s.addChoiceSupplier(\"10 Variable Height Rows\", createItems(10, this::newVariableItem));\n+        s.addChoiceSupplier(\"200 Variable HeightRows\", createItems(200, this::newVariableItem));\n+        s.addChoice(\"<empty>\", List.of());\n+        s.selectFirst();\n+        return s;\n+    }\n+\n+    \/\/ TODO may be move to common?\n+    private Node createSelectionModelOptions(String name) {\n+        var original = control.getSelectionModel();\n+        ObjectSelector<Boolean> s = new ObjectSelector<>(name, (v) -> {\n+            control.setSelectionModel(v == null ? null : original);\n+        });\n+        s.addChoice(\"Single\", Boolean.FALSE);\n+        s.addChoice(\"<null>\", null);\n+        s.selectFirst();\n+        return s;\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new ChoiceBoxSkin(control));\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ChoiceBoxPage.java","additions":90,"deletions":22,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,4 +27,0 @@\n-import javafx.geometry.Point2D;\n-import javafx.scene.control.Alert;\n-import javafx.scene.control.Alert.AlertType;\n-import javafx.scene.control.Button;\n@@ -32,0 +28,1 @@\n+import javafx.scene.control.skin.ColorPickerSkin;\n@@ -33,2 +30,2 @@\n-import javafx.stage.StageStyle;\n-import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.sheets.ComboBoxBasePropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n@@ -39,1 +36,1 @@\n- * ColorPicker Page\n+ * ColorPicker Page.\n@@ -41,5 +38,2 @@\n-public class ColorPickerPage extends TestPaneBase {\n-    private final Button button;\n-    private ColorPicker picker1;\n-    private ColorPicker picker2;\n-    private Alert dialog;\n+public class ColorPickerPage extends TestPaneBase implements HasSkinnable {\n+    private ColorPicker control;\n@@ -48,1 +42,1 @@\n-        FX.name(this, \"ColorPickerPage\");\n+        super(\"ColorPickerPage\");\n@@ -50,19 +44,3 @@\n-        button = new Button(\"Show in Alert\");\n-\n-        picker1 = new ColorPicker(Color.BLUE);\n-        picker1.valueProperty().addListener(event -> {\n-            dialog.close();\n-        });\n-\n-        button.setOnAction(event -> {\n-            Point2D p = button.localToScreen(0, button.getHeight());\n-\n-            dialog = new Alert(AlertType.INFORMATION);\n-            dialog.initStyle(StageStyle.UNDECORATED);\n-            dialog.initOwner(getWindow());\n-            dialog.getDialogPane().setContent(picker1);\n-            dialog.setX(p.getX());\n-            dialog.setY(p.getY());\n-            dialog.show();\n-\n-            Object v = picker1.getValue();\n+        control = new ColorPicker(Color.YELLOW);\n+        control.setOnAction((ev) -> {\n+            Object v = control.getValue();\n@@ -72,5 +50,3 @@\n-        picker2 = new ColorPicker(Color.YELLOW);\n-        picker2.setOnAction((ev) -> {\n-            Object v = picker2.getValue();\n-            System.out.println(v);\n-        });\n+        OptionPane op = new OptionPane();\n+        op.section(\"ColorPicker\");\n+        ComboBoxBasePropertySheet.appendTo(op, control);\n@@ -78,2 +54,8 @@\n-        OptionPane p = new OptionPane();\n-        p.option(button);\n+        setContent(control);\n+        setOptions(op);\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n@@ -81,2 +63,3 @@\n-        setContent(picker2);\n-        setOptions(p);\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new ColorPickerSkin(control));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ColorPickerPage.java","additions":25,"deletions":42,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,8 @@\n-import javafx.animation.KeyFrame;\n-import javafx.animation.Timeline;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.collections.ObservableList;\n+import javafx.scene.Node;\n@@ -30,1 +36,0 @@\n-import javafx.scene.control.CheckBox;\n@@ -32,4 +37,1 @@\n-import javafx.scene.control.Label;\n-import javafx.scene.control.Tooltip;\n-import javafx.scene.layout.VBox;\n-import javafx.util.Duration;\n+import javafx.scene.control.skin.ComboBoxListViewSkin;\n@@ -37,0 +39,3 @@\n+import com.oracle.tools.fx.monkey.options.ObjectOption;\n+import com.oracle.tools.fx.monkey.sheets.ComboBoxBasePropertySheet;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n@@ -38,0 +43,2 @@\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.ObjectSelector;\n@@ -39,0 +46,1 @@\n+import com.oracle.tools.fx.monkey.util.SequenceNumber;\n@@ -40,0 +48,1 @@\n+import com.oracle.tools.fx.monkey.util.Utils;\n@@ -42,1 +51,1 @@\n- * ComboBox Page\n+ * ComboBox Page.\n@@ -44,3 +53,2 @@\n-public class ComboBoxPage extends TestPaneBase {\n-    private final ComboBox<String> control;\n-    private final Label itemCountField;\n+public class ComboBoxPage extends TestPaneBase implements HasSkinnable {\n+    private final ComboBox<Object> control;\n@@ -49,3 +57,1 @@\n-        FX.name(this, \"ComboBoxPage\");\n-\n-        itemCountField = new Label(\"<default>\");\n+        super(\"ComboBoxPage\");\n@@ -54,1 +60,0 @@\n-        control.getItems().setAll(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\");\n@@ -56,2 +61,40 @@\n-        VBox b = new VBox();\n-        b.getChildren().add(control);\n+        Button addButton = FX.button(\"Add Item\", () -> {\n+            control.getItems().add(newItem(\"\"));\n+        });\n+\n+        Button clearButton = FX.button(\"Clear Items\", () -> {\n+            control.getItems().clear();\n+        });\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"ComboBox\");\n+        op.option(\"Button Cell: TODO\", null); \/\/ TODO\n+        op.option(\"Cell Factory: TODO\", null); \/\/ TODO\n+        op.option(\"Converter:\", createConverterOptions(\"converter\", control.converterProperty()));\n+        op.option(\"Items:\", createItemsOptions(\"items\", control.getItems()));\n+        op.option(Utils.buttons(addButton, clearButton));\n+        op.option(\"Placeholder:\", Options.placeholderNode(\"placeholder\", control.placeholderProperty()));\n+        op.option(\"Selection Model:\", createSelectionModelOptions(\"selectionModel\"));\n+\n+        op.section(\"ComboBoxBase\");\n+        ComboBoxBasePropertySheet.appendTo(op, control);\n+\n+        setContent(control);\n+        setOptions(op);\n+    }\n+\n+    private Node createSelectionModelOptions(String name) {\n+        var original = control.getSelectionModel();\n+        ObjectSelector<Boolean> s = new ObjectSelector<>(name, (v) -> {\n+            control.setSelectionModel(v == null ? null : original);\n+        });\n+        s.addChoice(\"Single\", Boolean.FALSE);\n+        s.addChoice(\"<null>\", null);\n+        s.selectFirst();\n+        return s;\n+    }\n+\n+    \/\/ TODO common code with ListViewPage - move to utils?\n+    private String newItem(Object n) {\n+        return n + \".\" + SequenceNumber.next();\n+    }\n@@ -59,3 +102,44 @@\n-        Button setConverterButton = new Button(\"Set Converter\");\n-        setConverterButton.setOnAction((ev) -> {\n-            control.setConverter(new StringConverter() {\n+    private String newVariableItem(Object n) {\n+        int rows = 1 << new Random().nextInt(5);\n+        StringBuilder sb = new StringBuilder();\n+        for (int i = 0; i < rows; i++) {\n+            if (i > 0) {\n+                sb.append('\\n');\n+            }\n+            sb.append(i);\n+        }\n+        return n + \".\" + SequenceNumber.next() + \".\" + sb;\n+    }\n+\n+\n+    private Supplier<List<Object>> createItems(int count, Function<Integer, Object> gen) {\n+        return () -> {\n+            ArrayList<Object> rv = new ArrayList<>(count);\n+            for (int i = 0; i < count; i++) {\n+                Object v = gen.apply(i);\n+                rv.add(v);\n+            }\n+            return rv;\n+        };\n+    }\n+\n+    private Node createItemsOptions(String name, ObservableList<Object> items) {\n+        ObjectSelector<List<Object>> s = new ObjectSelector<>(name, (v) -> {\n+            items.setAll(v);\n+        });\n+        s.addChoice(\"<empty>\", List.of());\n+        s.addChoiceSupplier(\"1 Row\", createItems(1, this::newItem));\n+        s.addChoiceSupplier(\"10 Rows\", createItems(10, this::newItem));\n+        s.addChoiceSupplier(\"200 Rows\", createItems(200, this::newItem));\n+        s.addChoiceSupplier(\"10,000 Rows\", createItems(10_000, this::newItem));\n+        s.addChoiceSupplier(\"10 Variable Height Rows\", createItems(10, this::newVariableItem));\n+        s.addChoiceSupplier(\"200 Variable HeightRows\", createItems(200, this::newVariableItem));\n+        s.selectFirst();\n+        return s;\n+    }\n+\n+    private Node createConverterOptions(String name, ObjectProperty<StringConverter<Object>> p) {\n+        var original = p.get();\n+        ObjectOption<StringConverter<Object>> op = new ObjectOption<>(name, p);\n+        op.addChoiceSupplier(\"Quoted\", () -> {\n+            return new StringConverter<Object>() {\n@@ -63,2 +147,2 @@\n-                public String toString(Object t) {\n-                    return \"toString-\" + t;\n+                public String toString(Object x) {\n+                    return \"\\\"\" + x + \"\\\"\";\n@@ -68,2 +152,2 @@\n-                public Object fromString(String t) {\n-                    return \"fromString\" + t;\n+                public Object fromString(String s) {\n+                    return s;\n@@ -71,16 +155,1 @@\n-            });\n-        });\n-\n-        Button changeCountButton = new Button(\"Change Visible Row Count\");\n-        changeCountButton.setTooltip(new Tooltip(\"starts a timer to change row count 3 times\"));\n-        changeCountButton.setOnAction((x) -> {\n-            new Timeline(\n-                new KeyFrame(Duration.seconds(2.0), (ev) -> {\n-                    changeItemCount(2);\n-                }),\n-                new KeyFrame(Duration.seconds(4.0), (ev) -> {\n-                    changeItemCount(20);\n-                }),\n-                new KeyFrame(Duration.seconds(6.0), (ev) -> {\n-                    changeItemCount(2);\n-                })).play();\n+            };\n@@ -88,0 +157,5 @@\n+        op.addChoice(\"<default>\", original);\n+        op.addChoice(\"<null>\", null);\n+        op.selectInitialValue();\n+        return op;\n+    }\n@@ -89,15 +163,3 @@\n-        CheckBox editable = new CheckBox(\"editable\");\n-        FX.name(editable, \"editable\");\n-        editable.selectedProperty().bindBidirectional(control.editableProperty());\n-\n-        OptionPane op = new OptionPane();\n-        \/\/ TODO data?\n-        op.option(editable);\n-        \/\/ TODO converter selector\n-        op.option(setConverterButton);\n-        op.label(\"Visible Row Count:\");\n-        op.option(itemCountField);\n-        op.option(changeCountButton);\n-\n-        setContent(b);\n-        setOptions(op);\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n@@ -106,3 +168,3 @@\n-    protected void changeItemCount(int x) {\n-        control.setVisibleRowCount(x);\n-        itemCountField.setText(String.valueOf(x));\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new ComboBoxListViewSkin<>(control));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ComboBoxPage.java","additions":121,"deletions":59,"binary":false,"changes":180,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import javafx.geometry.Point2D;\n-import javafx.scene.control.Alert;\n-import javafx.scene.control.Alert.AlertType;\n-import javafx.scene.control.Button;\n@@ -33,2 +29,3 @@\n-import javafx.stage.StageStyle;\n-import com.oracle.tools.fx.monkey.util.FX;\n+import javafx.scene.control.skin.DatePickerSkin;\n+import com.oracle.tools.fx.monkey.sheets.ComboBoxBasePropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n@@ -39,1 +36,1 @@\n- * DatePicker Page\n+ * DatePicker Page.\n@@ -41,5 +38,2 @@\n-public class DatePickerPage extends TestPaneBase {\n-    private final Button button;\n-    private DatePicker datePicker;\n-    private DatePicker datePicker2;\n-    private Alert dialog;\n+public class DatePickerPage extends TestPaneBase implements HasSkinnable {\n+    private DatePicker control;\n@@ -48,1 +42,1 @@\n-        FX.name(this, \"DatePickerPage\");\n+        super(\"DatePickerPage\");\n@@ -50,1 +44,1 @@\n-        button = new Button(\"Show in Alert\");\n+        control = new DatePicker(LocalDate.now());\n@@ -52,4 +46,3 @@\n-        datePicker = new DatePicker(LocalDate.now());\n-        datePicker.valueProperty().addListener(event -> {\n-            dialog.close();\n-        });\n+        OptionPane op = new OptionPane();\n+        op.section(\"DatePicker\");\n+        ComboBoxBasePropertySheet.appendTo(op, control);\n@@ -57,16 +50,3 @@\n-        button.setOnAction(event -> {\n-            Point2D p = button.localToScreen(0, button.getHeight());\n-\n-            dialog = new Alert(AlertType.INFORMATION);\n-            dialog.initStyle(StageStyle.UNDECORATED);\n-            dialog.initOwner(getWindow());\n-            dialog.getDialogPane().setContent(datePicker);\n-            dialog.setX(p.getX());\n-            dialog.setY(p.getY());\n-            dialog.show();\n-\n-            LocalDate v = datePicker.getValue();\n-            System.out.println(v);\n-        });\n-\n-        datePicker2 = new DatePicker(LocalDate.now());\n+        setContent(control);\n+        setOptions(op);\n+    }\n@@ -74,2 +54,4 @@\n-        OptionPane p = new OptionPane();\n-        p.option(button);\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n@@ -77,2 +59,3 @@\n-        setContent(datePicker2);\n-        setOptions(p);\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new DatePickerSkin(control));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/DatePickerPage.java","additions":22,"deletions":39,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+    @Override\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/DemoPage.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,3 @@\n+import java.util.List;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n@@ -28,0 +31,1 @@\n+import javafx.scene.control.Button;\n@@ -29,2 +33,2 @@\n-import javafx.scene.control.MenuItem;\n-import javafx.scene.control.SeparatorMenuItem;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BorderPane;\n@@ -32,1 +36,0 @@\n-import javafx.scene.layout.Pane;\n@@ -35,0 +38,10 @@\n+import javafx.scene.paint.Color;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.PaneContentOptions;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n+import com.oracle.tools.fx.monkey.sheets.RegionPropertySheet;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import com.oracle.tools.fx.monkey.util.Utils;\n@@ -38,0 +51,1 @@\n+ * @see VBoxPage\n@@ -39,1 +53,3 @@\n-public class HBoxPage extends BoxPageBase {\n+public class HBoxPage extends TestPaneBase {\n+    private final HBox box;\n+\n@@ -42,1 +58,0 @@\n-    }\n@@ -44,4 +59,1 @@\n-    @Override\n-    protected void setGrow(Node n, Priority p) {\n-        HBox.setHgrow(n, p);\n-    }\n+        box = new HBox();\n@@ -49,4 +61,4 @@\n-    @Override\n-    protected Pane createPane() {\n-        return new HBox();\n-    }\n+        \/\/ TODO menu button\n+        Button addButton = FX.button(\"Add Item\", () -> {\n+            addItem(box.getChildren());\n+        });\n@@ -54,4 +66,11 @@\n-    @Override\n-    protected void setMin(Region r, double v) {\n-        r.setMinWidth(v);\n-    }\n+        Button clearButton = FX.button(\"Clear Items\", () -> {\n+            box.getChildren().clear();\n+        });\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"HBox\");\n+        op.option(\"Alignment:\", new EnumOption<Pos>(\"alignment\", Pos.class, box.alignmentProperty()));\n+        op.option(\"Children:\", PaneContentOptions.createOptions(box.getChildren(), this::createBuilder));\n+        op.option(Utils.buttons(addButton, clearButton));\n+        op.option(new BooleanOption(\"fillHeight\", \"fill height\", box.fillHeightProperty()));\n+        op.option(\"Spacing:\", Options.spacing(\"spacing\", box.spacingProperty()));\n@@ -59,3 +78,6 @@\n-    @Override\n-    protected void setPref(Region r, double v) {\n-        r.setPrefWidth(v);\n+        RegionPropertySheet.appendTo(op, box);\n+\n+        BorderPane bp = new BorderPane(box);\n+        bp.setPadding(new Insets(0, 10, 0, 0));\n+        setContent(bp);\n+        setOptions(op);\n@@ -64,3 +86,7 @@\n-    @Override\n-    protected void setMax(Region r, double v) {\n-        r.setMaxWidth(v);\n+    private Region addItem(List<Node> children) {\n+        boolean even = (children.size() % 2) == 0;\n+        Background bg = Background.fill(even ? Color.GRAY : Color.LIGHTGRAY);\n+        Region r = createRegion();\n+        r.setBackground(bg);\n+        children.add(r);\n+        return r;\n@@ -69,2 +95,1 @@\n-    @Override\n-    protected Region createRegion() {\n+    private Region createRegion() {\n@@ -74,1 +99,0 @@\n-        ContextMenu m = new ContextMenu();\n@@ -76,6 +100,6 @@\n-            m.getItems().setAll(\n-                new MenuItem(\"width=\" + r.getWidth()),\n-                new SeparatorMenuItem(),\n-                new MenuItem(\"min width=\" + r.getMinWidth()),\n-                new MenuItem(\"pref width=\" + r.getPrefWidth()),\n-                new MenuItem(\"max width=\" + r.getMaxWidth()));\n+            ContextMenu m = new ContextMenu();\n+            FX.item(m, \"width=\" + r.getWidth());\n+            FX.separator(m);\n+            FX.item(m, \"min width=\" + r.getMinWidth());\n+            FX.item(m, \"pref width=\" + r.getPrefWidth());\n+            FX.item(m, \"max width=\" + r.getMaxWidth());\n@@ -86,0 +110,24 @@\n+\n+    private PaneContentOptions.Builder createBuilder() {\n+        return new PaneContentOptions.Builder(this::addItem) {\n+            @Override\n+            protected void setGrow(Node n, Priority p) {\n+                HBox.setHgrow(n, p);\n+            }\n+\n+            @Override\n+            protected void setMin(Region r, double v) {\n+                r.setMinWidth(v);\n+            }\n+\n+            @Override\n+            protected void setPref(Region r, double v) {\n+                r.setPrefWidth(v);\n+            }\n+\n+            @Override\n+            protected void setMax(Region r, double v) {\n+                r.setMaxWidth(v);\n+            }\n+        };\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/HBoxPage.java","additions":81,"deletions":33,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.scene.Node;\n+import javafx.scene.web.HTMLEditor;\n+import javafx.scene.web.HTMLEditorSkin;\n+import com.oracle.tools.fx.monkey.options.TextChoiceOption;\n+import com.oracle.tools.fx.monkey.sheets.ControlPropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * HTMLEditor Page.\n+ *\/\n+public class HTMLEditor_Page extends TestPaneBase implements HasSkinnable {\n+    private final HTMLEditor control;\n+\n+    public HTMLEditor_Page() {\n+        super(\"HTMLEditorPage\");\n+\n+        control = new HTMLEditor();\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"HTMLEditor\");\n+        op.option(\"HTML Text:\", createHtmlTextOption());\n+        ControlPropertySheet.appendTo(op, control);\n+\n+        setOptions(op);\n+        setContent(control);\n+        \/\/ TODO set html text\n+    }\n+\n+    private Node createHtmlTextOption() {\n+        TextChoiceOption op = new TextChoiceOption(\"htmlText\", true, null);\n+        op.addChoice(\"Simple\", \"<html><body><h1>Simple HTML<\/h1>This is a <b>test<\/b>.<\/body><\/html>\");\n+        op.addChoice(\"<empty HTML>\", \"<html><body\/><\/html>\");\n+        op.addChoice(\"<null>\", null);\n+        op.property().addListener((s, p, htmlText) -> {\n+            control.setHtmlText(htmlText);\n+        });\n+        return op;\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new HTMLEditorSkin(control));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/HTMLEditor_Page.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.oracle.tools.fx.monkey.pages;\n-\n-import com.oracle.tools.fx.monkey.util.FX;\n-import com.oracle.tools.fx.monkey.util.TestPaneBase;\n-import javafx.scene.web.HTMLEditor;\n-\n-\/**\n- *\n- *\/\n-public class HtmlEditorPage extends TestPaneBase {\n-    public HtmlEditorPage() {\n-        FX.name(this, \"HtmlEditorPage\");\n-        HTMLEditor ed = new HTMLEditor();\n-        setContent(ed);\n-    }\n-}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/HtmlEditorPage.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,4 @@\n-import com.oracle.tools.fx.monkey.util.FX;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.skin.LabelSkin;\n+import com.oracle.tools.fx.monkey.sheets.LabeledPropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n@@ -30,10 +33,0 @@\n-import javafx.geometry.Pos;\n-import javafx.scene.control.ComboBox;\n-import javafx.scene.control.ContentDisplay;\n-import javafx.scene.control.Label;\n-import javafx.scene.image.Image;\n-import javafx.scene.image.ImageView;\n-import javafx.scene.image.PixelWriter;\n-import javafx.scene.image.WritableImage;\n-import javafx.scene.layout.HBox;\n-import javafx.scene.paint.Color;\n@@ -42,1 +35,1 @@\n- *\n+ * Label Page.\n@@ -44,20 +37,2 @@\n-public class LabelPage extends TestPaneBase {\n-    enum Demo {\n-        TEXT_ONLY(\"text only\"),\n-        TEXT_GRAPHIC_LEFT(\"text + graphic left\"),\n-        TEXT_GRAPHIC_RIGHT(\"text + graphic right\"),\n-        TEXT_GRAPHIC_TOP(\"text + graphic top\"),\n-        TEXT_GRAPHIC_BOTTOM(\"text + graphic bottom\"),\n-        TEXT_GRAPHIC_TEXT_ONLY(\"text + graphic (text only)\"),\n-        TEXT_GRAPHIC_GRAPHIC_ONLY(\"text + graphic (graphic only)\"),\n-        GRAPHIC(\"graphic\"),\n-        ;\n-        private final String text;\n-        Demo(String text) { this.text = text; }\n-        public String toString() { return text; }\n-    }\n-\n-    private final ComboBox<Demo> label1Selector;\n-    private final ComboBox<Demo> label2Selector;\n-    private final ComboBox<Pos> alignmentSelector;\n-    private final Image im;\n+public class LabelPage extends TestPaneBase implements HasSkinnable {\n+    private final Label control;\n@@ -66,3 +41,1 @@\n-        FX.name(this, \"LabelPage\");\n-\n-        im = createImage();\n+        super(\"LabelPage\");\n@@ -70,7 +43,1 @@\n-        label1Selector = new ComboBox<>();\n-        FX.name(label1Selector, \"label1Selector\");\n-        label1Selector.getItems().addAll(Demo.values());\n-        label1Selector.setEditable(false);\n-        label1Selector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            updateControl();\n-        });\n+        control = new Label();\n@@ -78,7 +45,4 @@\n-        label2Selector = new ComboBox<>();\n-        FX.name(label2Selector, \"label2Selector\");\n-        label2Selector.getItems().addAll(Demo.values());\n-        label2Selector.setEditable(false);\n-        label2Selector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            updateControl();\n-        });\n+        \/\/ JDK-8092102\n+\/\/        control.textTruncatedProperty().addListener((s,p,c) -> {\n+\/\/            System.err.println(\"truncated: \" + c);\n+\/\/        });\n@@ -86,7 +50,2 @@\n-        alignmentSelector = new ComboBox<>();\n-        FX.name(alignmentSelector, \"alignmentSelector\");\n-        alignmentSelector.getItems().addAll(Pos.values());\n-        alignmentSelector.setEditable(false);\n-        alignmentSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            updateControl();\n-        });\n+        OptionPane op = new OptionPane();\n+        LabeledPropertySheet.appendTo(op, \"Label\", true, control);\n@@ -94,11 +53,2 @@\n-        OptionPane p = new OptionPane();\n-        p.label(\"Label 1:\");\n-        p.option(label1Selector);\n-        p.label(\"Label 2:\");\n-        p.option(label2Selector);\n-        p.label(\"HBox Alignment:\");\n-        p.option(alignmentSelector);\n-        setOptions(p);\n-\n-        FX.select(label1Selector, Demo.TEXT_ONLY);\n-        FX.select(label2Selector, Demo.TEXT_ONLY);\n+        setContent(control);\n+        setOptions(op);\n@@ -107,76 +57,3 @@\n-    protected void updateControl() {\n-        Demo d1 = FX.getSelectedItem(label1Selector);\n-        Label label1 = create(d1);\n-\n-        Demo d2 = FX.getSelectedItem(label2Selector);\n-        Label label2 = create(d2);\n-\n-        HBox b = new HBox(label1, label2);\n-        Pos a = FX.getSelectedItem(alignmentSelector);\n-        if (a != null) {\n-            b.setAlignment(a);\n-        }\n-        setContent(b);\n-    }\n-\n-    protected Label create(Demo d) {\n-        if(d == null) {\n-            return new Label();\n-        }\n-\n-        switch(d) {\n-        case TEXT_GRAPHIC_LEFT:\n-            {\n-                Label t = new Label(\"text + graphic left\");\n-                t.setGraphic(new ImageView(im));\n-                t.setContentDisplay(ContentDisplay.LEFT);\n-                return t;\n-            }\n-        case TEXT_GRAPHIC_RIGHT:\n-            {\n-                Label t = new Label(\"text + graphic right\");\n-                t.setGraphic(new ImageView(im));\n-                t.setContentDisplay(ContentDisplay.RIGHT);\n-                return t;\n-            }\n-        case TEXT_ONLY:\n-            {\n-                return new Label(\"text only\");\n-            }\n-        case TEXT_GRAPHIC_TOP:\n-            {\n-                Label t = new Label(\"text + graphic top\");\n-                t.setGraphic(new ImageView(im));\n-                t.setContentDisplay(ContentDisplay.TOP);\n-                return t;\n-            }\n-        case TEXT_GRAPHIC_BOTTOM:\n-            {\n-                Label t = new Label(\"text + graphic bottom\");\n-                t.setGraphic(new ImageView(im));\n-                t.setContentDisplay(ContentDisplay.BOTTOM);\n-                return t;\n-            }\n-        case TEXT_GRAPHIC_TEXT_ONLY:\n-            {\n-                Label t = new Label(\"text + graphic text only\");\n-                t.setGraphic(new ImageView(im));\n-                t.setContentDisplay(ContentDisplay.TEXT_ONLY);\n-                return t;\n-            }\n-        case TEXT_GRAPHIC_GRAPHIC_ONLY:\n-            {\n-                Label t = new Label(\"text + graphic (graphic only)\");\n-                t.setGraphic(new ImageView(im));\n-                t.setContentDisplay(ContentDisplay.GRAPHIC_ONLY);\n-                return t;\n-            }\n-        case GRAPHIC:\n-            {\n-                Label t = new Label();\n-                t.setGraphic(new ImageView(im));\n-                return t;\n-            }\n-        default:\n-            return new Label(\"??\" + d);\n-        }\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n@@ -185,15 +62,3 @@\n-    private static Image createImage() {\n-        int w = 24;\n-        int h = 16;\n-        Color c = Color.GREEN;\n-\n-        WritableImage im = new WritableImage(w, h);\n-        PixelWriter wr = im.getPixelWriter();\n-\n-        for (int y = 0; y < h; y++) {\n-            for (int x = 0; x < w; x++) {\n-                wr.setColor(x, y, c);\n-            }\n-        }\n-\n-        return im;\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new LabelSkin(control));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/LabelPage.java","additions":24,"deletions":159,"binary":false,"changes":183,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.scene.chart.LineChart;\n+import javafx.scene.chart.XYChart;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.sheets.XYChartPropertySheet;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+\n+\/**\n+ * Line Chart Page.\n+ *\/\n+public class LineChartPage extends XYChartPageBase {\n+    private final LineChart<Number, Number> chart;\n+\n+    public LineChartPage() {\n+        super(\"LineChartPage\");\n+\n+        chart = new LineChart<>(createNumberAxis(\"X Axis\"), createNumberAxis(\"Y Axis\"));\n+        chart.setTitle(\"Line Chart\");\n+        addSeries();\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"LineChart\");\n+        op.option(new BooleanOption(\"createSymbols\", \"create symbols\", chart.createSymbolsProperty()));\n+        XYChartPropertySheet.appendTo(this, op, chart);\n+\n+        setContent(chart);\n+        setOptions(op);\n+    }\n+\n+    @Override\n+    public XYChart<?, Number> chart() {\n+        return chart;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/LineChartPage.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,2 @@\n-import java.security.MessageDigest;\n-import java.security.NoSuchAlgorithmException;\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -31,1 +31,2 @@\n-import javafx.collections.FXCollections;\n+import java.util.function.Supplier;\n+import javafx.beans.property.ObjectProperty;\n@@ -33,0 +34,1 @@\n+import javafx.geometry.Orientation;\n@@ -35,2 +37,0 @@\n-import javafx.scene.canvas.Canvas;\n-import javafx.scene.canvas.GraphicsContext;\n@@ -38,2 +38,0 @@\n-import javafx.scene.control.CheckBox;\n-import javafx.scene.control.ComboBox;\n@@ -43,1 +41,0 @@\n-import javafx.scene.control.MultipleSelectionModel;\n@@ -49,1 +46,0 @@\n-import javafx.scene.image.Image;\n@@ -52,2 +48,0 @@\n-import javafx.scene.paint.Color;\n-import javafx.scene.text.Text;\n@@ -55,0 +49,5 @@\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.ObjectOption;\n+import com.oracle.tools.fx.monkey.sheets.ControlPropertySheet;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n@@ -57,0 +56,2 @@\n+import com.oracle.tools.fx.monkey.util.ImageTools;\n+import com.oracle.tools.fx.monkey.util.ObjectSelector;\n@@ -60,0 +61,1 @@\n+import com.oracle.tools.fx.monkey.util.Utils;\n@@ -62,1 +64,1 @@\n- * ListView page\n+ * ListView Page.\n@@ -65,45 +67,0 @@\n-    enum Data {\n-        EMPTY(\"Empty\"),\n-        LARGE(\"Large\"),\n-        SMALL(\"Small\"),\n-        VARIABLE(\"Variable Height\"),\n-        ;\n-\n-        private final String text;\n-        Data(String text) { this.text = text; }\n-        public String toString() { return text; }\n-    }\n-\n-    public enum Selection {\n-        SINGLE(\"single selection\"),\n-        MULTIPLE(\"multiple selection\"),\n-        NULL(\"null selection model\");\n-\n-        private final String text;\n-\n-        Selection(String text) {\n-            this.text = text;\n-        }\n-\n-        public String toString() {\n-            return text;\n-        }\n-    }\n-\n-    public enum Cmd {\n-        ROWS,\n-        VARIABLE_ROWS,\n-    }\n-\n-    private enum Cells {\n-        DEFAULT,\n-        EDITABLE_TEXT_FIELD,\n-        LARGE_ICON,\n-        VARIABLE,\n-    }\n-\n-    private final ComboBox<Data> dataSelector;\n-    private final ComboBox<Cells> cellFactorySelector;\n-    private final ComboBox<Selection> selectionSelector;\n-    private final CheckBox nullFocusModel;\n-    private final CheckBox editable;\n@@ -111,2 +68,0 @@\n-    private FocusModel<Object> defaultFocusModel;\n-    private MultipleSelectionModel<Object> defaultSelectionModel;\n@@ -115,1 +70,1 @@\n-        FX.name(this, \"ListViewPage\");\n+        super(\"ListViewPage\");\n@@ -120,40 +75,2 @@\n-            if (\"update\".equals(ev.getNewValue())) {\n-                int ix = ev.getIndex();\n-                ev.getSource().getItems().set(ix, \"UPDATED!\");\n-                System.out.println(\"committing the value `UPDATED!`\");\n-            } else {\n-                System.out.println(\"discarding the new value: \" + ev.getNewValue());\n-            }\n-        });\n-        defaultFocusModel = control.getFocusModel();\n-        defaultSelectionModel = control.getSelectionModel();\n-        setContent(new BorderPane(control));\n-\n-        dataSelector = new ComboBox<>();\n-        FX.name(dataSelector, \"demoSelector\");\n-        dataSelector.getItems().addAll(Data.values());\n-        dataSelector.setEditable(false);\n-        onChange(dataSelector, true, () -> {\n-            updateData();\n-        });\n-\n-        cellFactorySelector = new ComboBox<>();\n-        FX.name(cellFactorySelector, \"cellSelector\");\n-        cellFactorySelector.getItems().addAll(Cells.values());\n-        cellFactorySelector.setEditable(false);\n-        cellFactorySelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            updateCellFactory();\n-        });\n-\n-        selectionSelector = new ComboBox<>();\n-        FX.name(selectionSelector, \"selectionSelector\");\n-        selectionSelector.getItems().addAll(Selection.values());\n-        selectionSelector.setEditable(false);\n-        onChange(selectionSelector, true, () -> {\n-            updateSelectionModel();\n-        });\n-\n-        nullFocusModel = new CheckBox(\"null focus model\");\n-        FX.name(nullFocusModel, \"nullFocusModel\");\n-        onChange(nullFocusModel, true, () -> {\n-            updateFocusModel();\n+            int ix = ev.getIndex();\n+            ev.getSource().getItems().set(ix, ev.getNewValue());\n@@ -162,2 +79,1 @@\n-        Button addButton = new Button(\"Add Item\");\n-        addButton.setOnAction((ev) -> {\n+        Button addButton = FX.button(\"Add Item\", () -> {\n@@ -167,2 +83,1 @@\n-        Button clearButton = new Button(\"Clear Items\");\n-        clearButton.setOnAction((ev) -> {\n+        Button clearButton = FX.button(\"Clear Items\", () -> {\n@@ -172,2 +87,1 @@\n-        Button jumpButton = new Button(\"Jump w\/VirtualFlow\");\n-        jumpButton.setOnAction((ev) -> {\n+        Button jumpButton = FX.button(\"Jump w\/VirtualFlow\", () -> {\n@@ -177,2 +91,1 @@\n-        Button refresh = new Button(\"Refresh\");\n-        refresh.setOnAction((ev) -> {\n+        Button refresh = FX.button(\"Refresh\", () -> {\n@@ -182,8 +95,0 @@\n-        editable = new CheckBox(\"editable\");\n-        editable.setOnAction((ev) -> {\n-            updateEditable();\n-        });\n-        FX.name(editable, \"editable\");\n-\n-        \/\/ layout\n-\n@@ -191,10 +96,12 @@\n-        op.label(\"Data:\");\n-        op.option(dataSelector);\n-        op.option(addButton);\n-        op.option(clearButton);\n-        op.option(editable);\n-        op.label(\"Cell Factory:\");\n-        op.option(cellFactorySelector);\n-        op.label(\"Selection Model:\");\n-        op.option(selectionSelector);\n-        op.option(nullFocusModel);\n+        op.section(\"ListView\");\n+        op.option(\"Cell Factory:\", createCellFactoryOptions());\n+        op.option(new BooleanOption(\"editable\", \"editable\", control.editableProperty()));\n+        op.option(\"Fixed Cell Size:\", Options.fixedSizeOption(\"fixedCellSize\", control.fixedCellSizeProperty()));\n+        op.option(\"Focus Model:\", createFocusModelOptions(\"focusModel\", control.focusModelProperty()));\n+        op.option(\"Items:\", createItemsOptions(\"items\", control.getItems()));\n+        op.option(Utils.buttons(addButton, clearButton));\n+        op.option(\"Orientation:\", new EnumOption<Orientation>(\"orientation\", Orientation.class, control.orientationProperty()));\n+        op.option(\"Placeholder:\", Options.placeholderNode(\"placeholder\", control.placeholderProperty()));\n+        op.option(\"Selection Model:\", createSelectionModelOptions(\"selectionModel\"));\n+\n+        op.separator();\n@@ -203,0 +110,1 @@\n+        ControlPropertySheet.appendTo(op, control);\n@@ -204,87 +112,1 @@\n-\n-        dataSelector.getSelectionModel().selectFirst();\n-        selectionSelector.getSelectionModel().select(Selection.MULTIPLE);\n-    }\n-\n-    protected void updateData() {\n-        Data d = dataSelector.getSelectionModel().getSelectedItem();\n-        ObservableList<Object> items = createData(d);\n-        control.setItems(items);\n-    }\n-\n-    private ObservableList<Object> createData(Data d) {\n-        ObservableList<Object> items = FXCollections.observableArrayList();\n-        if (d != null) {\n-            switch (d) {\n-            case EMPTY:\n-                break;\n-            case LARGE:\n-                createItems(items, 10_000, this::newItem);\n-                break;\n-            case SMALL:\n-                createItems(items, 3, this::newItem);\n-                break;\n-            case VARIABLE:\n-                createItems(items, 500, this::newVariableItem);\n-                break;\n-            default:\n-                throw new Error(\"?\" + d);\n-            }\n-        }\n-        return items;\n-    }\n-\n-    private void createItems(ObservableList<Object> items, int count, Function<Integer, Object> gen) {\n-        for (int i = 0; i < count; i++) {\n-            Object v = gen.apply(i);\n-            items.add(v);\n-        }\n-    }\n-\n-    protected void updateFocusModel() {\n-        FocusModel<Object> m;\n-        if (nullFocusModel.isSelected()) {\n-            m = null;\n-        } else {\n-            m = defaultFocusModel;\n-        }\n-        control.setFocusModel(m);\n-    }\n-\n-    protected void updateSelectionModel() {\n-        MultipleSelectionModel<Object> sm = defaultSelectionModel;\n-        SelectionMode selectionMode = SelectionMode.SINGLE;\n-        Selection sel = selectionSelector.getSelectionModel().getSelectedItem();\n-        if (sel != null) {\n-            switch (sel) {\n-            case MULTIPLE:\n-                selectionMode = SelectionMode.MULTIPLE;\n-                break;\n-            case NULL:\n-                sm = null;\n-                break;\n-            case SINGLE:\n-                break;\n-            default:\n-                throw new Error(\"?\" + sel);\n-            }\n-        }\n-\n-        control.getSelectionModel().setSelectionMode(selectionMode);\n-        control.setSelectionModel(sm);\n-    }\n-\n-    protected String newItem(Object n) {\n-        return n + \".\" + SequenceNumber.next();\n-    }\n-\n-    protected String newVariableItem(Object n) {\n-        int rows = 1 << new Random().nextInt(5);\n-        StringBuilder sb = new StringBuilder();\n-        for (int i = 0; i < rows; i++) {\n-            if (i > 0) {\n-                sb.append('\\n');\n-            }\n-            sb.append(i);\n-        }\n-        return n + \".\" + SequenceNumber.next() + \".\" + sb;\n+        setContent(new BorderPane(control));\n@@ -293,1 +115,1 @@\n-    protected void jump() {\n+    private void jump() {\n@@ -329,4 +151,48 @@\n-    private void updateCellFactory() {\n-        Cells t = cellFactorySelector.getSelectionModel().getSelectedItem();\n-        Callback<ListView<Object>, ListCell<Object>> f = getCellFactory(t);\n-        control.setCellFactory(f);\n+    private Node createCellFactoryOptions() {\n+        var original = control.getCellFactory();\n+        ObjectOption<Callback> op = new ObjectOption(\"cellFactory\", control.cellFactoryProperty());\n+        op.addChoice(\"<default>\", original);\n+        op.addChoiceSupplier(\"TextFieldListCell\", () -> TextFieldListCell.forListView());\n+        op.addChoiceSupplier(\"Large Icon\", () -> {\n+            return (r) -> {\n+                return new ListCell<Object>() {\n+                    @Override\n+                    protected void updateItem(Object item, boolean empty) {\n+                        super.updateItem(item, empty);\n+                        if (item == null) {\n+                            super.setText(null);\n+                            super.setGraphic(null);\n+                        } else {\n+                            String s = item.toString();\n+                            super.setText(s);\n+                            Node n = new ImageView(ImageTools.createImage(s, 256, 256));\n+                            super.setGraphic(n);\n+                        }\n+                    }\n+                };\n+            };\n+        });\n+        op.addChoiceSupplier(\"ListViewSkin\", () -> {\n+            return (r) -> new ListCell<Object>() {\n+                @Override\n+                public void updateItem(Object item, boolean empty) {\n+                    super.updateItem(item, empty);\n+                    if (empty) {\n+                        setText(null);\n+                        setGraphic(null);\n+                    } else if (item instanceof Node) {\n+                        setText(null);\n+                        Node currentNode = getGraphic();\n+                        Node newNode = (Node)item;\n+                        if (currentNode == null || !currentNode.equals(newNode)) {\n+                            setGraphic(newNode);\n+                        }\n+                    } else {\n+                        setText(item == null ? \"null\" : item.toString());\n+                        setGraphic(null);\n+                    }\n+                }\n+            };\n+        });\n+        op.addChoice(\"<null>\", null);\n+        return op;\n@@ -335,14 +201,7 @@\n-    private static Image createImage(String s) {\n-        byte[] hash;\n-        try {\n-            hash = MessageDigest.getInstance(\"sha-256\").digest(s.getBytes());\n-        } catch (NoSuchAlgorithmException e) {\n-            e.printStackTrace();\n-            hash = new byte[3];\n-        }\n-        Color color = Color.rgb(hash[0] & 0xff, hash[1] & 0xff, hash[2] & 0xff);\n-        Canvas c = new Canvas(512, 512);\n-        GraphicsContext g = c.getGraphicsContext2D();\n-        g.setFill(color);\n-        g.fillRect(0, 0, c.getWidth(), c.getHeight());\n-        return c.snapshot(null, null);\n+    private Node createFocusModelOptions(String name, ObjectProperty<FocusModel<Object>> p) {\n+        var original = control.getFocusModel();\n+        ObjectOption<FocusModel<Object>> s = new ObjectOption<>(name, p);\n+        s.addChoice(\"<default>\", original);\n+        s.addChoice(\"<null>\", null);\n+        s.selectFirst();\n+        return s;\n@@ -351,39 +210,23 @@\n-    private Callback getCellFactory(Cells t) {\n-        if (t != null) {\n-            switch (t) {\n-            case EDITABLE_TEXT_FIELD:\n-                return TextFieldListCell.forListView();\n-            case LARGE_ICON:\n-                return (r) -> {\n-                    return new ListCell<Object>() {\n-                        @Override\n-                        protected void updateItem(Object item, boolean empty) {\n-                            super.updateItem(item, empty);\n-                            if (item == null) {\n-                                super.setText(null);\n-                                super.setGraphic(null);\n-                            } else {\n-                                String s = item.toString();\n-                                super.setText(s);\n-                                Node n = new ImageView(createImage(s));\n-                                super.setGraphic(n);\n-                            }\n-                        }\n-                    };\n-                };\n-            case VARIABLE:\n-                return (r) -> {\n-                    return new ListCell<Object>() {\n-                        @Override\n-                        protected void updateItem(Object item, boolean empty) {\n-                            super.updateItem(item, empty);\n-                            String s =\n-                                \"111111111111111111111111111111111111111111111\" +\n-                                \"11111111111111111111111111111111111111111\\n2\\n3\\n\";\n-                            Text t = new Text(s);\n-                            t.wrappingWidthProperty().bind(widthProperty());\n-                            setPrefHeight(USE_COMPUTED_SIZE);\n-                            setGraphic(t);\n-                        }\n-                    };\n-                };\n+    private Node createSelectionModelOptions(String name) {\n+        var original = control.getSelectionModel();\n+        ObjectSelector<Boolean> s = new ObjectSelector<>(name, (v) -> {\n+            control.setSelectionModel(v == null ? null : original);\n+            original.setSelectionMode(Boolean.TRUE.equals(v) ? SelectionMode.MULTIPLE : SelectionMode.SINGLE);\n+        });\n+        s.addChoice(\"Single\", Boolean.FALSE);\n+        s.addChoice(\"Multiple\", Boolean.TRUE);\n+        s.addChoice(\"<null>\", null);\n+        s.selectFirst();\n+        return s;\n+    }\n+\n+    private String newItem(Object n) {\n+        return n + \".\" + SequenceNumber.next();\n+    }\n+\n+    private String newVariableItem(Object n) {\n+        int rows = 1 << new Random().nextInt(5);\n+        StringBuilder sb = new StringBuilder();\n+        for (int i = 0; i < rows; i++) {\n+            if (i > 0) {\n+                sb.append('\\n');\n@@ -391,0 +234,1 @@\n+            sb.append(i);\n@@ -392,0 +236,2 @@\n+        return n + \".\" + SequenceNumber.next() + \".\" + sb;\n+    }\n@@ -393,19 +239,6 @@\n-        \/\/ ListViewSkin\n-        return (r) -> new ListCell<Object>() {\n-            @Override\n-            public void updateItem(Object item, boolean empty) {\n-                super.updateItem(item, empty);\n-                if (empty) {\n-                    setText(null);\n-                    setGraphic(null);\n-                } else if (item instanceof Node) {\n-                    setText(null);\n-                    Node currentNode = getGraphic();\n-                    Node newNode = (Node)item;\n-                    if (currentNode == null || !currentNode.equals(newNode)) {\n-                        setGraphic(newNode);\n-                    }\n-                } else {\n-                    setText(item == null ? \"null\" : item.toString());\n-                    setGraphic(null);\n-                }\n+    private Supplier<List<Object>> createItems(int count, Function<Integer, Object> gen) {\n+        return () -> {\n+            ArrayList<Object> rv = new ArrayList<>(count);\n+            for (int i = 0; i < count; i++) {\n+                Object v = gen.apply(i);\n+                rv.add(v);\n@@ -413,0 +246,1 @@\n+            return rv;\n@@ -416,6 +250,13 @@\n-    protected void updateEditable() {\n-        boolean on = editable.isSelected();\n-        control.setEditable(on);\n-        if (on) {\n-            cellFactorySelector.getSelectionModel().select(Cells.EDITABLE_TEXT_FIELD);\n-        }\n+    private Node createItemsOptions(String name, ObservableList<Object> items) {\n+        ObjectSelector<List<Object>> s = new ObjectSelector<>(name, (v) -> {\n+            items.setAll(v);\n+        });\n+        s.addChoiceSupplier(\"1 Row\", createItems(1, this::newItem));\n+        s.addChoiceSupplier(\"10 Rows\", createItems(10, this::newItem));\n+        s.addChoiceSupplier(\"200 Rows\", createItems(200, this::newItem));\n+        s.addChoiceSupplier(\"10,000 Rows\", createItems(10_000, this::newItem));\n+        s.addChoiceSupplier(\"10 Variable Height Rows\", createItems(10, this::newVariableItem));\n+        s.addChoiceSupplier(\"200 Variable HeightRows\", createItems(200, this::newVariableItem));\n+        s.addChoice(\"<empty>\", List.of());\n+        s.selectFirst();\n+        return s;\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ListViewPage.java","additions":138,"deletions":297,"binary":false,"changes":435,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import javafx.collections.ObservableList;\n+import javafx.geometry.Side;\n+import javafx.scene.Node;\n+import javafx.scene.control.MenuButton;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.skin.MenuButtonSkin;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.sheets.LabeledPropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.ObjectSelector;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * MenuButton Page.\n+ *\/\n+public class MenuButtonPage extends TestPaneBase implements HasSkinnable {\n+    private final MenuButton control;\n+\n+    public MenuButtonPage() {\n+        super(\"MenuButtonPage\");\n+\n+        control = new MenuButton();\n+\n+        control.setText(\"Menu Button\");\n+        control.getItems().add(new MenuItem(\"Edit\"));\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"MenuButton\");\n+        op.option(\"Items:\", createItemsOptions(\"items\", control.getItems()));\n+        op.option(\"Popup Side:\", new EnumOption<Side>(\"popupSide\", true, Side.class, control.popupSideProperty()));\n+        LabeledPropertySheet.appendTo(op, \"ButtonBase\", false, control);\n+\n+        setContent(control);\n+        setOptions(op);\n+    }\n+\n+    private Supplier<List<MenuItem>> mk(int count) {\n+        return () -> {\n+            ArrayList<MenuItem> rv = new ArrayList(count);\n+            for (int i = 0; i < count; i++) {\n+                rv.add(new MenuItem(\"Item_\" + (i + 1)));\n+            }\n+            return rv;\n+        };\n+    }\n+\n+    private Node createItemsOptions(String name, ObservableList<MenuItem> items) {\n+        ObjectSelector<List<MenuItem>> s = new ObjectSelector<>(name, items::setAll);\n+        s.addChoiceSupplier(\"1 Item\", mk(1));\n+        s.addChoiceSupplier(\"10 Items\", mk(10));\n+        s.addChoiceSupplier(\"1,000 Items\", mk(1000));\n+        s.addChoiceSupplier(\"<empty>\", mk(0));\n+        s.selectFirst();\n+        return s;\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new MenuButtonSkin(control));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/MenuButtonPage.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.beans.property.ObjectProperty;\n+import javafx.scene.Node;\n+import javafx.scene.control.Pagination;\n+import javafx.scene.control.skin.PaginationSkin;\n+import javafx.scene.image.ImageView;\n+import javafx.util.Callback;\n+import com.oracle.tools.fx.monkey.options.IntOption;\n+import com.oracle.tools.fx.monkey.options.ObjectOption;\n+import com.oracle.tools.fx.monkey.sheets.ControlPropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.ImageTools;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * Pagination Control Page.\n+ *\/\n+public class PaginationPage extends TestPaneBase implements HasSkinnable {\n+    private final Pagination control;\n+\n+    public PaginationPage() {\n+        super(\"PaginationPage\");\n+\n+        control = new Pagination();\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"Pagination\");\n+        op.option(\"Current Page Index:\", new IntOption(\"currentPageIndex\", 0, Integer.MAX_VALUE, control.currentPageIndexProperty()));\n+        op.option(\"Max Page Indicator Count:\", new IntOption(\"maxPageIndicatorCount\", 0, Integer.MAX_VALUE, control.maxPageIndicatorCountProperty()));\n+        \/\/ TODO INDETERMINATE\n+        op.option(\"Page Count:\", new IntOption(\"pageCount\", 1, Integer.MAX_VALUE, control.pageCountProperty()));\n+        op.option(\"Page Factory:\", createPageFactoryOptions(\"pageFactory\", control.pageFactoryProperty()));\n+\n+        ControlPropertySheet.appendTo(op, control);\n+\n+        setContent(control);\n+        setOptions(op);\n+    }\n+\n+    private Callback<Integer, Node> createImagesFactory() {\n+        return (ix) -> {\n+            String s = String.valueOf(ix);\n+            return new ImageView(ImageTools.createImage(s, 256, 256));\n+        };\n+    }\n+\n+    private Node createPageFactoryOptions(String name, ObjectProperty<Callback<Integer, Node>> p) {\n+        ObjectOption<Callback<Integer, Node>> op = new ObjectOption<>(name, p);\n+        op.addChoice(\"Images\", createImagesFactory());\n+        op.addChoice(\"<null>\", null);\n+        return op;\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new PaginationSkin(control));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/PaginationPage.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * PasswordField page uses the fact that PasswordField is a TextField.\n+ * PasswordField Page uses the fact that PasswordField is a TextField.\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/PasswordFieldPage.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import javafx.collections.FXCollections;\n@@ -32,0 +31,1 @@\n+import javafx.scene.Node;\n@@ -34,2 +34,0 @@\n-import javafx.scene.control.CheckBox;\n-import javafx.scene.control.ComboBox;\n@@ -37,1 +35,4 @@\n-import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.DoubleOption;\n+import com.oracle.tools.fx.monkey.sheets.ChartPropertySheet;\n+import com.oracle.tools.fx.monkey.util.ObjectSelector;\n@@ -45,14 +46,1 @@\n-    public enum Model {\n-        SMALL(\"Small\"),\n-        LARGE(\"Large\"),\n-        EMPTY(\"Empty\"),\n-        ;\n-        private final String text;\n-        Model(String text) { this.text = text; }\n-        public String toString() { return text; }\n-    }\n-\n-    private final ObservableList<PieChart.Data> data;\n-    private final ComboBox<Model> modelSelector;\n-    private PieChart chart;\n-    protected static Random rnd = new Random();\n+    private final PieChart chart;\n@@ -61,1 +49,1 @@\n-        FX.name(this, \"PieChartPage\");\n+        super(\"PieChartPage\");\n@@ -63,10 +51,1 @@\n-        data = FXCollections.observableArrayList();\n-        chart = new PieChart(data);\n-\n-        modelSelector = new ComboBox<>();\n-        FX.name(modelSelector, \"modelSelector\");\n-        modelSelector.getItems().addAll(Model.values());\n-        modelSelector.setEditable(false);\n-        modelSelector.getSelectionModel().selectedItemProperty().addListener((x) -> {\n-            updateChart();\n-        });\n+        chart = new PieChart();\n@@ -74,9 +53,10 @@\n-        CheckBox animated = new CheckBox(\"animation\");\n-        FX.name(animated, \"animated\");\n-        animated.selectedProperty().bindBidirectional(chart.animatedProperty());\n-\n-        OptionPane p = new OptionPane();\n-        p.label(\"Model:\");\n-        p.option(modelSelector);\n-        p.option(animated);\n-        setOptions(p);\n+        OptionPane op = new OptionPane();\n+        op.section(\"PieChart\");\n+        op.option(new BooleanOption(\"clockwise\", \"clockwise\", chart.clockwiseProperty()));\n+        op.option(\"Data:\", createDataOptions(\"data\", chart.getData()));\n+        \/\/ TODO add\/remove buttons\n+        op.option(\"Label Line Length:\", DoubleOption.of(\"labelLineLength\", chart.labelLineLengthProperty(), -100, 0, 100));\n+        op.option(new BooleanOption(\"labelsVisible\", \"labels visible\", chart.labelsVisibleProperty()));\n+        \/\/ TODO make this editable spinner?\n+        op.option(\"Start Angle:\", DoubleOption.of(\"startAngle\", chart.startAngleProperty(), -100, 0, 30, 45, 90, 120, 180, 270, 360));\n+        ChartPropertySheet.appendTo(op, chart);\n@@ -86,1 +66,0 @@\n-        setContent(bp);\n@@ -88,7 +67,2 @@\n-        modelSelector.getSelectionModel().selectFirst();\n-    }\n-\n-    protected void updateChart() {\n-        Model m = modelSelector.getSelectionModel().getSelectedItem();\n-        List<PieChart.Data> d = createData(m);\n-        chart.getData().setAll(d);\n+        setContent(bp);\n+        setOptions(op);\n@@ -97,13 +71,6 @@\n-    private List<PieChart.Data> createData(Model m) {\n-        ArrayList<PieChart.Data> a = new ArrayList<>();\n-        switch (m) {\n-        case SMALL:\n-            addRandom(a, 30);\n-            break;\n-        case LARGE:\n-            addRandom(a, 3000);\n-            break;\n-        case EMPTY:\n-            break;\n-        default:\n-            throw new Error(\"?\" + m);\n+    private List<PieChart.Data> createData(int max) {\n+        Random rnd = new Random();\n+        int sz = rnd.nextInt(max);\n+        ArrayList<Data> a = new ArrayList<>(sz);\n+        for (int i = 0; i < sz; i++) {\n+            a.add(new PieChart.Data(\"N\" + i, rnd.nextDouble()));\n@@ -114,6 +81,10 @@\n-    private void addRandom(ArrayList<Data> a, int max) {\n-        Random r = new Random();\n-        int sz = r.nextInt(max);\n-        for (int i = 0; i < sz; i++) {\n-            a.add(new PieChart.Data(\"N\" + i, r.nextDouble()));\n-        }\n+    private Node createDataOptions(String name, ObservableList<PieChart.Data> data) {\n+        ObjectSelector<List<PieChart.Data>> s = new ObjectSelector<>(name, (v) -> {\n+            data.setAll(v);\n+        });\n+        s.addChoiceSupplier(\"<30 Elements\", () -> createData(30));\n+        s.addChoiceSupplier(\"<100 Elements\", () -> createData(100));\n+        s.addChoiceSupplier(\"<3,000 Elements\", () -> createData(3_000));\n+        s.addChoice(\"<empty>\", List.of());\n+        s.selectFirst();\n+        return s;\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/PieChartPage.java","additions":37,"deletions":66,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.scene.chart.ScatterChart;\n+import javafx.scene.chart.XYChart;\n+import com.oracle.tools.fx.monkey.sheets.XYChartPropertySheet;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+\n+\/**\n+ * Scatter Chart Page.\n+ *\/\n+public class ScatterChartPage extends XYChartPageBase {\n+    private final ScatterChart<Number, Number> chart;\n+\n+    public ScatterChartPage() {\n+        super(\"ScatterChartPage\");\n+\n+        chart = new ScatterChart<>(createNumberAxis(\"X Axis\"), createNumberAxis(\"Y Axis\"));\n+        chart.setTitle(\"Scatter Chart\");\n+        addSeries();\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"ScatterChart\");\n+        op.label(\"no specific properties\");\n+        XYChartPropertySheet.appendTo(this, op, chart);\n+\n+        setContent(chart);\n+        setOptions(op);\n+    }\n+\n+    @Override\n+    public XYChart<?, Number> chart() {\n+        return chart;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ScatterChartPage.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,3 +27,0 @@\n-import com.oracle.tools.fx.monkey.util.FX;\n-import com.oracle.tools.fx.monkey.util.OptionPane;\n-import com.oracle.tools.fx.monkey.util.TestPaneBase;\n@@ -33,0 +30,1 @@\n+import javafx.scene.control.skin.ScrollBarSkin;\n@@ -34,0 +32,4 @@\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n@@ -36,1 +38,1 @@\n- * ScrollBar Page\n+ * ScrollBar Page.\n@@ -38,2 +40,2 @@\n-public class ScrollBarPage extends TestPaneBase {\n-    private ScrollBar scroll;\n+public class ScrollBarPage extends TestPaneBase implements HasSkinnable {\n+    private ScrollBar control;\n@@ -46,1 +48,1 @@\n-        FX.name(this, \"ScrollBarPage\");\n+        super(\"ScrollBarPage\");\n@@ -48,1 +50,1 @@\n-        scroll = new ScrollBar();\n+        control = new ScrollBar();\n@@ -55,1 +57,1 @@\n-            scroll.setMin(v);\n+            control.setMin(v);\n@@ -63,1 +65,1 @@\n-            scroll.setValue(v);\n+            control.setValue(v);\n@@ -71,1 +73,1 @@\n-            scroll.setVisibleAmount(v);\n+            control.setVisibleAmount(v);\n@@ -79,1 +81,1 @@\n-            scroll.setMax(v);\n+            control.setMax(v);\n@@ -83,8 +85,4 @@\n-        p.label(\"Min:\");\n-        p.option(min);\n-        p.label(\"Value:\");\n-        p.option(val);\n-        p.label(\"Visible:\");\n-        p.option(visible);\n-        p.label(\"Max:\");\n-        p.option(max);\n+        p.option(\"Min:\", min);\n+        p.option(\"Value:\", val);\n+        p.option(\"Visible:\", visible);\n+        p.option(\"Max:\", max);\n@@ -94,1 +92,1 @@\n-        scroll.minProperty().addListener((s, pr, c) -> {\n+        control.minProperty().addListener((s, pr, c) -> {\n@@ -97,1 +95,1 @@\n-        scroll.valueProperty().addListener((s, pr, c) -> {\n+        control.valueProperty().addListener((s, pr, c) -> {\n@@ -100,1 +98,1 @@\n-        scroll.visibleAmountProperty().addListener((s, pr, c) -> {\n+        control.visibleAmountProperty().addListener((s, pr, c) -> {\n@@ -103,1 +101,1 @@\n-        scroll.maxProperty().addListener((s, pr, c) -> {\n+        control.maxProperty().addListener((s, pr, c) -> {\n@@ -107,1 +105,1 @@\n-        VBox b = new VBox(scroll, status);\n+        VBox b = new VBox(control, status);\n@@ -119,1 +117,1 @@\n-    protected int parse(ComboBox<Long> c) {\n+    private int parse(ComboBox<Long> c) {\n@@ -124,1 +122,1 @@\n-    protected void updateStatus() {\n+    private void updateStatus() {\n@@ -126,4 +124,4 @@\n-            \"min=\" + scroll.getMin() +\n-            \" value=\" + scroll.getValue() +\n-            \" visible=\" + scroll.getVisibleAmount() +\n-            \" max=\" + scroll.getMax()\n+            \"min=\" + control.getMin() +\n+            \" value=\" + control.getValue() +\n+            \" visible=\" + control.getVisibleAmount() +\n+            \" max=\" + control.getMax()\n@@ -132,0 +130,10 @@\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new ScrollBarSkin(control));\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ScrollBarPage.java","additions":40,"deletions":32,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.util.function.Supplier;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.scene.Node;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.ScrollPane.ScrollBarPolicy;\n+import javafx.scene.control.skin.ScrollPaneSkin;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.ObjectOption;\n+import com.oracle.tools.fx.monkey.sheets.ControlPropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.ImageTools;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * ScrollPane Page.\n+ *\/\n+public class ScrollPanePage extends TestPaneBase implements HasSkinnable {\n+    private final ScrollPane control;\n+\n+    public ScrollPanePage() {\n+        super(\"ScrollPanePage\");\n+\n+        control = new ScrollPane();\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"ScrollPane\");\n+        op.option(\"Content:\", createContentOptions(\"content\", control.contentProperty()));\n+        op.option(new BooleanOption(\"fitToHeight\", \"fit to height\", control.fitToHeightProperty()));\n+        op.option(new BooleanOption(\"fitToWidth\", \"fit to width\", control.fitToHeightProperty()));\n+        op.option(\"HBar Policy:\", new EnumOption<ScrollBarPolicy>(\"hbarPolicy\", true, ScrollBarPolicy.class, control.hbarPolicyProperty()));\n+        op.option(\"HMax: TODO\", null); \/\/ TODO\n+        op.option(\"HMin: TODO\", null); \/\/ TODO\n+        op.option(\"HValue: TODO\", null); \/\/ TODO\n+        op.option(\"Min Viewport Height: TODO\", null); \/\/ TODO\n+        op.option(\"Min Viewport Width: TODO\", null); \/\/ TODO\n+        op.option(new BooleanOption(\"pannable\", \"pannable\", control.pannableProperty()));\n+        op.option(\"Pref Viewport Height: TODO\", null); \/\/ TODO\n+        op.option(\"Pref Viewport Width: TODO\", null); \/\/ TODO\n+        op.option(\"VBar Policy:\", new EnumOption<ScrollBarPolicy>(\"vbarPolicy\", true, ScrollBarPolicy.class, control.vbarPolicyProperty()));\n+        op.option(\"Viewport Bounds: TODO\", null); \/\/ TODO\n+        op.option(\"VMax: TODO\", null); \/\/ TODO\n+        op.option(\"VMin: TODO\", null); \/\/ TODO\n+        op.option(\"VValue: TODO\", null); \/\/ TODO\n+        ControlPropertySheet.appendTo(op, control);\n+\n+        setContent(control);\n+        setOptions(op);\n+    }\n+\n+\/\/        new Dimension2D(50, 50),\n+\/\/        new Dimension2D(100, 100),\n+\/\/        new Dimension2D(1000, 1000),\n+\/\/        new Dimension2D(5000, 5000),\n+\/\/        new Dimension2D(5000, 50)\n+\n+\/\/    private void updatePrefSize(Dimension2D d) {\n+\/\/        double w = d.getWidth();\n+\/\/        double h = d.getHeight();\n+\/\/        content.setPrefSize(w, h);\n+\/\/        String s = \"Preferred size: \" + w + \" x \" + h;\n+\/\/        content.setText(s);\n+\/\/    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new ScrollPaneSkin(control));\n+    }\n+\n+    private Supplier<Node> mk(int w, int h) {\n+        return () -> {\n+            \/\/ TODO maybe a Rectangle with a gradient paint and\/or grid?\n+            String s = w + \"x\" + h;\n+            Image im = ImageTools.createImage(s, w, h);\n+            return new ImageView(im);\n+        };\n+    }\n+\n+    private Node createContentOptions(String name, ObjectProperty<Node> p) {\n+        ObjectOption<Node> op = new ObjectOption<>(name, p);\n+        op.addChoiceSupplier(\"50 x 50\", mk(50, 50));\n+        op.addChoiceSupplier(\"100 x 100\", mk(100, 100));\n+        op.addChoiceSupplier(\"1,000 x 1,000\", mk(1_000, 1_000));\n+        op.addChoiceSupplier(\"1,000 x 50\", mk(1_000, 50));\n+        op.addChoiceSupplier(\"50 x 1,000\", mk(50, 1_000));\n+        op.addChoice(\"<null>\", null);\n+        op.select(3);\n+        return op;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ScrollPanePage.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,0 @@\n-import com.oracle.tools.fx.monkey.util.FX;\n-import com.oracle.tools.fx.monkey.util.OptionPane;\n-import com.oracle.tools.fx.monkey.util.TestPaneBase;\n@@ -36,0 +33,3 @@\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n@@ -38,1 +38,1 @@\n- * Spinner Page\n+ * Spinner Page.\n@@ -40,0 +40,1 @@\n+\/\/ TODO convert to final control (use value factory)\n@@ -53,1 +54,1 @@\n-        public String toString() { return text; }\n+        @Override public String toString() { return text; }\n@@ -62,1 +63,1 @@\n-        FX.name(this, \"SpinnerPage\");\n+        super(\"SpinnerPage\");\n@@ -89,2 +90,1 @@\n-        p.label(\"Mode:\");\n-        p.option(modeChoice);\n+        p.option(\"Mode:\", modeChoice);\n@@ -92,2 +92,1 @@\n-        p.label(\"Converter:\");\n-        p.option(converterChoice);\n+        p.option(\"Converter:\", converterChoice);\n@@ -100,1 +99,1 @@\n-    protected void updateControl() {\n+    private void updateControl() {\n@@ -123,1 +122,1 @@\n-    protected StringConverter<Number> createConverter(Converter c) {\n+    private StringConverter<Number> createConverter(Converter c) {\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/SpinnerPage.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.scene.chart.StackedAreaChart;\n+import javafx.scene.chart.XYChart;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.sheets.XYChartPropertySheet;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+\n+\/**\n+ * Stacked Area Chart Page.\n+ *\/\n+public class StackedAreaChartPage extends XYChartPageBase {\n+    private final StackedAreaChart<Number, Number> chart;\n+\n+    public StackedAreaChartPage() {\n+        super(\"StackedAreaChartPage\");\n+\n+        chart = new StackedAreaChart<>(createNumberAxis(\"X Axis\"), createNumberAxis(\"Y Axis\"));\n+        chart.setTitle(\"Stacked Area Chart\");\n+        addSeries();\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"StackedAreaChart\");\n+        op.option(new BooleanOption(\"createSymbols\", \"create symbols\", chart.createSymbolsProperty()));\n+        XYChartPropertySheet.appendTo(this, op, chart);\n+\n+        setContent(chart);\n+        setOptions(op);\n+    }\n+\n+    @Override\n+    public XYChart<?, Number> chart() {\n+        return chart;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/StackedAreaChartPage.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.scene.chart.StackedBarChart;\n+import javafx.scene.chart.XYChart;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n+import com.oracle.tools.fx.monkey.sheets.XYChartPropertySheet;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+\n+\/**\n+ * Stacked Bar Chart Page.\n+ *\/\n+public class StackedBarChartPage extends XYChartPageBase {\n+    private final StackedBarChart<String, Number> chart;\n+\n+    public StackedBarChartPage() {\n+        super(\"StackedBarChartPage\");\n+\n+        chart = new StackedBarChart<>(createCategoryAxis(\"X Axis\"), createNumberAxis(\"Y Axis\"));\n+        chart.setTitle(\"Stacked Bar Chart\");\n+        addSeries();\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"StackedBarChart\");\n+        op.option(\"Category Bar Gap:\", Options.gaps(\"categoryBarGap\", chart.categoryGapProperty()));\n+        XYChartPropertySheet.appendTo(this, op, chart);\n+\n+        setContent(chart);\n+        setOptions(op);\n+    }\n+\n+    @Override\n+    public XYChart<?, Number> chart() {\n+        return chart;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/StackedBarChartPage.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.geometry.Side;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.TabPane.TabClosingPolicy;\n+import javafx.scene.control.TabPane.TabDragPolicy;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.skin.TabPaneSkin;\n+import javafx.scene.layout.VBox;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.sheets.ControlPropertySheet;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.ObjectSelector;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * TabPane Page.\n+ *\/\n+public class TabPanePage extends TestPaneBase implements HasSkinnable {\n+    private final TabPane control;\n+\n+    public TabPanePage() {\n+        super(\"TabPanePage\");\n+\n+        control = new TabPane();\n+        \/\/ TODO graphic, other Tab propertis in the context menu\n+        control.getTabs().addAll(\n+            new Tab(\"One\", mkContent(\"Tab One Content\")),\n+            new Tab(\"Two\", mkContent(\"Tab Two Content\")),\n+            new Tab(\"Three\", mkContent(\"Tab Three Content\")),\n+            new Tab(\"Four\", mkContent(\"Tab Four Content\"))\n+        );\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"TabPane\");\n+        op.option(new BooleanOption(\"rotateGraphic\", \"rotate graphic\", control.rotateGraphicProperty()));\n+        op.option(\"Selection Model:\", createSelectionModelOptions(\"selectionModel\"));\n+        op.option(\"Side:\", new EnumOption<Side>(\"side\", true, Side.class, control.sideProperty()));\n+        op.option(\"Tab Closing Policy:\", new EnumOption<TabClosingPolicy>(\"tabClosingPolicy\", true, TabClosingPolicy.class, control.tabClosingPolicyProperty()));\n+        op.option(\"Tab Drag Policy:\", new EnumOption<TabDragPolicy>(\"tabDragPolicy\", true, TabDragPolicy.class, control.tabDragPolicyProperty()));\n+        op.option(\"Tab Max Height\", Options.tabPaneConstraints(\"tabMaxHeight\", control.tabMaxHeightProperty()));\n+        op.option(\"Tab Max Width\", Options.tabPaneConstraints(\"tabMaxWidth\", control.tabMaxWidthProperty()));\n+        op.option(\"Tab Min Height\", Options.tabPaneConstraints(\"tabMinHeight\", control.tabMinHeightProperty()));\n+        op.option(\"Tab Min Width\", Options.tabPaneConstraints(\"tabMinWidth\", control.tabMinWidthProperty()));\n+\n+        ControlPropertySheet.appendTo(op, control);\n+\n+        setContent(control);\n+        setOptions(op);\n+    }\n+\n+    private Node mkContent(String text) {\n+        Label label = new Label(text);\n+\n+        TextField textField = new TextField();\n+        textField.setPromptText(\"focus here\");\n+\n+        Button button = new Button(\"OK\");\n+\n+        VBox b = new VBox(5);\n+        b.setPadding(new Insets(0, 20, 0, 20));\n+        b.setAlignment(Pos.CENTER);\n+        b.getChildren().add(label);\n+        b.getChildren().add(textField);\n+        b.getChildren().add(button);\n+        return b;\n+    }\n+\n+    private Node createSelectionModelOptions(String name) {\n+        var original = control.getSelectionModel();\n+        ObjectSelector<Boolean> s = new ObjectSelector<>(name, (v) -> {\n+            control.setSelectionModel(v == null ? null : original);\n+        });\n+        s.addChoice(\"Single\", Boolean.FALSE);\n+        s.addChoice(\"<null>\", null);\n+        s.selectFirst();\n+        return s;\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new TabPaneSkin(control));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TabPanePage.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.util.ArrayList;\n@@ -28,3 +29,2 @@\n-import java.util.function.Consumer;\n-import javafx.beans.property.SimpleStringProperty;\n-import javafx.beans.value.ObservableValue;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n@@ -33,1 +33,0 @@\n-import javafx.collections.transformation.FilteredList;\n@@ -35,2 +34,0 @@\n-import javafx.scene.canvas.Canvas;\n-import javafx.scene.canvas.GraphicsContext;\n@@ -38,2 +35,0 @@\n-import javafx.scene.control.CheckBox;\n-import javafx.scene.control.ComboBox;\n@@ -41,1 +36,0 @@\n-import javafx.scene.control.MenuItem;\n@@ -44,1 +38,0 @@\n-import javafx.scene.control.TableCell;\n@@ -46,1 +39,0 @@\n-import javafx.scene.control.TableColumn.CellDataFeatures;\n@@ -48,0 +40,1 @@\n+import javafx.scene.control.TableRow;\n@@ -50,0 +43,1 @@\n+import javafx.scene.control.cell.TextFieldTableCell;\n@@ -51,2 +45,1 @@\n-import javafx.scene.layout.BorderPane;\n-import javafx.scene.layout.Pane;\n+import javafx.scene.layout.Background;\n@@ -54,1 +47,0 @@\n-import javafx.scene.text.Text;\n@@ -56,0 +48,6 @@\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.ObjectOption;\n+import com.oracle.tools.fx.monkey.sheets.ControlPropertySheet;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n+import com.oracle.tools.fx.monkey.util.ColumnBuilder;\n+import com.oracle.tools.fx.monkey.util.DataRow;\n@@ -58,0 +56,1 @@\n+import com.oracle.tools.fx.monkey.util.ObjectSelector;\n@@ -59,1 +58,0 @@\n-import com.oracle.tools.fx.monkey.util.SequenceNumber;\n@@ -61,0 +59,1 @@\n+import com.oracle.tools.fx.monkey.util.Utils;\n@@ -63,1 +62,1 @@\n- * TableView page\n+ * TableView Page.\n@@ -66,96 +65,1 @@\n-    private enum Demo {\n-        ALL(\"all set: min, pref, max\"),\n-        PREF(\"pref only\"),\n-        VARIABLE(\"variable cell height\"),\n-        EMPTY(\"empty with pref\"),\n-        MIN_WIDTH(\"min width\"),\n-        MAX_WIDTH(\"max width\"),\n-        MIN_WIDTH2(\"min width (middle)\"),\n-        MAX_WIDTH2(\"max width (middle)\"),\n-        MIN_WIDTH3(\"min width (beginning)\"),\n-        MAX_WIDTH3(\"max width (beginning)\"),\n-        FIXED_MIDDLE(\"fixed in the middle\"),\n-        ALL_FIXED(\"all fixed\"),\n-        ALL_MAX(\"all with maximum width\"),\n-        MIN_IN_CENTER(\"min widths set in middle columns\"),\n-        MAX_IN_CENTER(\"max widths set in middle columns\"),\n-        NO_NESTED(\"no nested columns\"),\n-        NESTED(\"nested columns\"),\n-        THOUSAND(\"1,000 rows\"),\n-        MILLION(\"10,000,000 rows\"),\n-        MANY_COLUMNS(\"many columns\"),\n-        MANY_COLUMNS_SAME(\"many columns, same pref\");\n-\n-        private final String text;\n-        Demo(String text) { this.text = text; }\n-        public String toString() { return text; }\n-    }\n-\n-    private enum ResizePolicy {\n-        AUTO_RESIZE_FLEX_NEXT_COLUMN,\n-        AUTO_RESIZE_FLEX_LAST_COLUMN,\n-        AUTO_RESIZE_NEXT_COLUMN,\n-        AUTO_RESIZE_SUBSEQUENT_COLUMNS,\n-        AUTO_RESIZE_LAST_COLUMN,\n-        AUTO_RESIZE_ALL_COLUMNS,\n-        UNCONSTRAINED_RESIZE_POLICY,\n-        CONSTRAINED_RESIZE_POLICY,\n-        USER_DEFINED_EQUAL_WIDTHS,\n-    }\n-\n-    private enum CellValue {\n-        VALUE,\n-        NULL,\n-        MIN_MAX,\n-        QUOTED,\n-    }\n-\n-    private enum Cells {\n-        DEFAULT,\n-        GRAPHICS,\n-        VARIABLE,\n-    }\n-\n-    private enum Selection {\n-        SINGLE_ROW(\"single row selection\"),\n-        MULTIPLE_ROW(\"multiple row selection\"),\n-        SINGLE_CELL(\"single cell selection\"),\n-        MULTIPLE_CELL(\"multiple cell selection\"),\n-        NULL(\"null selection model\");\n-\n-        private final String text;\n-        Selection(String text) { this.text = text; }\n-        public String toString() { return text; }\n-    }\n-\n-    private enum Filter {\n-        NONE(\"<NONE>\"),\n-        SKIP1S(\"skip 11s\"),\n-        SKIP2S(\"skip 22s\");\n-\n-        private final String text;\n-        Filter(String text) { this.text = text; }\n-        public String toString() { return text; }\n-    }\n-\n-    private enum Cmd {\n-        ROWS,\n-        COL,\n-        MIN,\n-        PREF,\n-        MAX,\n-        COMBINE,\n-        COL_WITH_GRAPHIC\n-    }\n-\n-    private final ComboBox<Demo> demoSelector;\n-    private final ComboBox<CellValue> cellValueSelector;\n-    private final ComboBox<Cells> cellFactorySelector;\n-    private final ComboBox<ResizePolicy> policySelector;\n-    private final ComboBox<Selection> selectionSelector;\n-    private final ComboBox<Filter> filterSelector;\n-    private final CheckBox nullFocusModel;\n-    private final CheckBox hideColumn;\n-    private final CheckBox fixedHeight;\n-    private final CheckBox menuButtonVisible;\n-    private TableView<String> control;\n+    private final TableView<DataRow> control;\n@@ -164,49 +68,1 @@\n-        FX.name(this, \"TableViewPage\");\n-\n-        demoSelector = new ComboBox<>();\n-        FX.name(demoSelector, \"demoSelector\");\n-        demoSelector.getItems().addAll(Demo.values());\n-        demoSelector.setEditable(false);\n-        demoSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            updatePane();\n-        });\n-\n-        cellValueSelector = new ComboBox<>();\n-        FX.name(cellValueSelector, \"cellValueSelector\");\n-        cellValueSelector.getItems().addAll(CellValue.values());\n-        cellValueSelector.setEditable(false);\n-        cellValueSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            updateCellValueFactory();\n-        });\n-\n-        cellFactorySelector = new ComboBox<>();\n-        FX.name(cellFactorySelector, \"cellSelector\");\n-        cellFactorySelector.getItems().addAll(Cells.values());\n-        cellFactorySelector.setEditable(false);\n-        cellFactorySelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            updateCellFactory();\n-        });\n-\n-        policySelector = new ComboBox<>();\n-        FX.name(policySelector, \"policySelector\");\n-        policySelector.getItems().addAll(ResizePolicy.values());\n-        policySelector.setEditable(false);\n-        policySelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            updatePane();\n-        });\n-\n-        selectionSelector = new ComboBox<>();\n-        FX.name(selectionSelector, \"selectionSelector\");\n-        selectionSelector.getItems().addAll(Selection.values());\n-        selectionSelector.setEditable(false);\n-        selectionSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            updatePane();\n-        });\n-\n-        filterSelector = new ComboBox<>();\n-        FX.name(filterSelector, \"filterSelector\");\n-        filterSelector.getItems().addAll(Filter.values());\n-        filterSelector.setEditable(false);\n-        filterSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            updatePane();\n-        });\n+        super(\"TableViewPage\");\n@@ -214,5 +70,1 @@\n-        nullFocusModel = new CheckBox(\"null focus model\");\n-        FX.name(nullFocusModel, \"nullFocusModel\");\n-        nullFocusModel.selectedProperty().addListener((s, p, c) -> {\n-            updatePane();\n-        });\n+        control = new TableView<>();\n@@ -220,3 +72,2 @@\n-        Button addButton = new Button(\"Add Data Item\");\n-        addButton.setOnAction((ev) -> {\n-            control.getItems().add(newItem());\n+        Button addDataItemButton = FX.button(\"Add Data Item\", () -> {\n+            control.getItems().add(new DataRow());\n@@ -225,2 +76,1 @@\n-        Button clearButton = new Button(\"Clear Data Items\");\n-        clearButton.setOnAction((ev) -> {\n+        Button clearDataItemsButton = FX.button(\"Clear Data Items\", () -> {\n@@ -231,3 +81,4 @@\n-            menuItem(\"at the beginning\", () -> addColumn(0)),\n-            menuItem(\"in the middle\", () -> addColumn(1)),\n-            menuItem(\"at the end\", () -> addColumn(2)));\n+            FX.menuItem(\"at the beginning\", () -> addColumn(0)),\n+            FX.menuItem(\"in the middle\", () -> addColumn(1)),\n+            FX.menuItem(\"at the end\", () -> addColumn(2))\n+        );\n@@ -237,3 +88,5 @@\n-            menuItem(\"at the beginning\", () -> removeColumn(0)),\n-            menuItem(\"in the middle\", () -> removeColumn(1)),\n-            menuItem(\"at the end\", () -> removeColumn(2)));\n+            FX.menuItem(\"at the beginning\", () -> removeColumn(0)),\n+            FX.menuItem(\"in the middle\", () -> removeColumn(1)),\n+            FX.menuItem(\"at the end\", () -> removeColumn(2)),\n+            FX.menuItem(\"all\", () -> removeAllColumns())\n+        );\n@@ -242,14 +95,1 @@\n-        hideColumn = new CheckBox(\"hide middle column\");\n-        FX.name(hideColumn, \"hideColumn\");\n-        hideColumn.selectedProperty().addListener((s, p, c) -> {\n-            hideMiddleColumn(c);\n-        });\n-\n-        fixedHeight = new CheckBox(\"fixed height\");\n-        FX.name(fixedHeight, \"fixedHeight\");\n-        fixedHeight.selectedProperty().addListener((s, p, c) -> {\n-            updatePane();\n-        });\n-\n-        Button refresh = new Button(\"Refresh\");\n-        refresh.setOnAction((ev) -> {\n+        Button refresh = FX.button(\"Refresh\", () -> {\n@@ -259,3 +99,0 @@\n-        menuButtonVisible = new CheckBox(\"menu button visible\");\n-        FX.name(menuButtonVisible, \"menuButton\");\n-\n@@ -265,19 +102,27 @@\n-        op.label(\"Data:\");\n-        op.option(demoSelector);\n-        op.option(addButton);\n-        op.option(clearButton);\n-        op.option(addColumnButton);\n-        op.option(removeColumnButton);\n-        op.label(\"Filter:\");\n-        op.option(filterSelector);\n-        op.label(\"Cell Value:\");\n-        op.option(cellValueSelector);\n-        op.label(\"Cell Factory:\");\n-        op.option(cellFactorySelector);\n-        op.label(\"Column Resize Policy:\");\n-        op.option(policySelector);\n-        op.label(\"Selection Model:\");\n-        op.option(selectionSelector);\n-        op.option(nullFocusModel);\n-        op.option(hideColumn);\n-        op.option(fixedHeight);\n+        op.section(\"TableView\");\n+\n+        op.option(\"Columns:\", createColumnsSelector(\"columns\", control.getColumns()));\n+        op.option(Utils.buttons(addColumnButton, removeColumnButton));\n+        op.option(\"Column Resize Policy:\", createColumnResizePolicy(\"columnResizePolicy\", control.columnResizePolicyProperty()));\n+        op.option(new BooleanOption(\"editable\", \"editable\", control.editableProperty()));\n+        op.option(\"Fixed Cell Size:\", Options.fixedSizeOption(\"fixedCellSize\", control.fixedCellSizeProperty()));\n+        op.option(\"Focus Model:\", createFocusModelOptions(\"focusModel\", control.focusModelProperty()));\n+        op.option(\"Items:\", createItemsOptions(\"items\", control.getItems()));\n+        op.option(Utils.buttons(addDataItemButton, clearDataItemsButton));\n+        op.option(\"Placeholder:\", Options.placeholderNode(\"placeholder\", control.placeholderProperty()));\n+        op.option(\"Row Factory:\", createRowFactoryOptions(\"rowFactory\", control.rowFactoryProperty()));\n+        op.option(\"Selection Model:\", createSelectionModelOptions(\"selectionModel\"));\n+        op.option(\"Sort Policy: TODO\", null); \/\/ TODO\n+        op.option(new BooleanOption(\"tableMenuButtonVisible\", \"table menu button visible\", control.tableMenuButtonVisibleProperty()));\n+\n+        \/\/ TODO\n+\/\/        op.label(\"Filter:\");\n+\/\/        op.option(filterSelector);\n+\/\/        op.label(\"Cell Value:\");\n+\/\/        op.option(cellValueSelector);\n+\/\/        op.label(\"Cell Factory:\");\n+\/\/        op.option(cellFactorySelector);\n+\/\/        op.label(\"Selection Model:\");\n+\/\/        op.option(selectionSelector);\n+\n+        op.separator();\n@@ -285,2 +130,0 @@\n-        op.option(menuButtonVisible);\n-        setOptions(op);\n@@ -288,7 +131,2 @@\n-        FX.selectFirst(demoSelector);\n-        FX.selectFirst(cellValueSelector);\n-        FX.selectFirst(cellFactorySelector);\n-        FX.selectFirst(policySelector);\n-        FX.select(selectionSelector, Selection.MULTIPLE_CELL);\n-        FX.selectFirst(filterSelector);\n-    }\n+        \/\/ currently selected column option sheet\n+        \/\/TableColumnOptions.appendTo(op, currentColumn);\n@@ -296,4 +134,5 @@\n-    protected MenuItem menuItem(String text, Runnable r) {\n-        MenuItem m = new MenuItem(text);\n-        m.setOnAction((ev) -> r.run());\n-        return m;\n+        \/\/ control option sheet\n+        ControlPropertySheet.appendTo(op, control);\n+\n+        setContent(control);\n+        setOptions(op);\n@@ -302,2 +141,2 @@\n-    protected void addColumn(int where) {\n-        TableColumn<String, String> c = new TableColumn<>();\n+    private void addColumn(int where) {\n+        TableColumn<DataRow, Object> c = newColumn();\n@@ -305,1 +144,1 @@\n-        c.setCellValueFactory((f) -> new SimpleStringProperty(describe(c)));\n+        \/\/c.setCellValueFactory((f) -> new SimpleStringProperty(describe(c)));\n@@ -328,1 +167,1 @@\n-    protected void removeColumn(int where) {\n+    private void removeColumn(int where) {\n@@ -349,54 +188,2 @@\n-    protected Callback<ResizeFeatures, Boolean> wrap(Callback<ResizeFeatures, Boolean> policy) {\n-        return new Callback<ResizeFeatures, Boolean>() {\n-            @Override\n-            public Boolean call(ResizeFeatures f) {\n-                Boolean rv = policy.call(f);\n-                int ix = f.getTable().getColumns().indexOf(f.getColumn());\n-                System.out.println(\n-                    \"col=\" + (ix < 0 ? f.getColumn() : ix) +\n-                    \" delta=\" + f.getDelta() +\n-                    \" w=\" + f.getTable().getWidth() +\n-                    \" rv=\" + rv\n-                );\n-                return rv;\n-            }\n-        };\n-    }\n-\n-    protected String describe(TableColumn c) {\n-        StringBuilder sb = new StringBuilder();\n-        if (c.getMinWidth() != 10.0) {\n-            sb.append(\"m\");\n-        }\n-        if (c.getPrefWidth() != 80.0) {\n-            sb.append(\"p\");\n-        }\n-        if (c.getMaxWidth() != 5000.0) {\n-            sb.append(\"X\");\n-        }\n-        return sb.toString();\n-    }\n-\n-    protected Callback<ResizeFeatures, Boolean> createPolicy(ResizePolicy p) {\n-        switch (p) {\n-        case AUTO_RESIZE_FLEX_NEXT_COLUMN:\n-            return TableView.CONSTRAINED_RESIZE_POLICY_FLEX_NEXT_COLUMN;\n-        case AUTO_RESIZE_FLEX_LAST_COLUMN:\n-            return TableView.CONSTRAINED_RESIZE_POLICY_FLEX_LAST_COLUMN;\n-        case AUTO_RESIZE_ALL_COLUMNS:\n-            return TableView.CONSTRAINED_RESIZE_POLICY_ALL_COLUMNS;\n-        case AUTO_RESIZE_LAST_COLUMN:\n-            return TableView.CONSTRAINED_RESIZE_POLICY_LAST_COLUMN;\n-        case AUTO_RESIZE_NEXT_COLUMN:\n-            return TableView.CONSTRAINED_RESIZE_POLICY_NEXT_COLUMN;\n-        case AUTO_RESIZE_SUBSEQUENT_COLUMNS:\n-            return TableView.CONSTRAINED_RESIZE_POLICY_SUBSEQUENT_COLUMNS;\n-        case CONSTRAINED_RESIZE_POLICY:\n-            return TableView.CONSTRAINED_RESIZE_POLICY;\n-        case UNCONSTRAINED_RESIZE_POLICY:\n-            return TableView.UNCONSTRAINED_RESIZE_POLICY;\n-        case USER_DEFINED_EQUAL_WIDTHS:\n-            return new UserDefinedResizePolicy();\n-        default:\n-            throw new Error(\"?\" + p);\n-        }\n+    private void removeAllColumns() {\n+        control.getColumns().clear();\n@@ -405,428 +192,55 @@\n-    protected Object[] createSpec(Demo d) {\n-        switch (d) {\n-        case ALL:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL,\n-                Cmd.COL, Cmd.MIN, 30, Cmd.MAX, 30,\n-                Cmd.COL, Cmd.PREF, 200,\n-                Cmd.COL, Cmd.PREF, 300, Cmd.MAX, 400,\n-                Cmd.COL, Cmd.MIN, 40,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL\n-            };\n-        case PREF:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL, Cmd.PREF, 100,\n-                Cmd.COL, Cmd.PREF, 200,\n-                Cmd.COL, Cmd.PREF, 300,\n-                Cmd.COL, Cmd.PREF, 400\n-            };\n-        case VARIABLE:\n-            return new Object[] {\n-                Cmd.ROWS, 10_000,\n-                Cmd.COL_WITH_GRAPHIC,\n-                Cmd.COL_WITH_GRAPHIC,\n-                Cmd.COL_WITH_GRAPHIC\n-            };\n-        case EMPTY:\n-            return new Object[] {\n-                Cmd.COL, Cmd.PREF, 100,\n-                Cmd.COL, Cmd.PREF, 200,\n-                Cmd.COL, Cmd.PREF, 300\n-            };\n-        case MIN_WIDTH:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL, Cmd.MIN, 300\n-            };\n-        case MAX_WIDTH:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL, Cmd.MAX, 100\n-            };\n-        case MIN_WIDTH2:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL, Cmd.MIN, 300,\n-                Cmd.COL\n-            };\n-        case MAX_WIDTH2:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL, Cmd.MAX, 100,\n-                Cmd.COL\n-            };\n-        case MIN_WIDTH3:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL, Cmd.MIN, 300,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL\n-            };\n-        case MAX_WIDTH3:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL, Cmd.MAX, 100,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL\n-            };\n-        case MIN_IN_CENTER:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL,\n-                Cmd.COL, Cmd.MIN, 20,\n-                Cmd.COL, Cmd.MIN, 30,\n-                Cmd.COL, Cmd.MIN, 40,\n-                Cmd.COL, Cmd.MIN, 50,\n-                Cmd.COL, Cmd.MIN, 60,\n-                Cmd.COL\n-            };\n-        case MAX_IN_CENTER:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL,\n-                Cmd.COL, Cmd.MAX, 20,\n-                Cmd.COL, Cmd.MAX, 30,\n-                Cmd.COL, Cmd.MAX, 40,\n-                Cmd.COL, Cmd.MAX, 50,\n-                Cmd.COL, Cmd.MAX, 60,\n-                Cmd.COL\n-            };\n-        case FIXED_MIDDLE:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL, Cmd.MIN, 100, Cmd.MAX, 100,\n-                Cmd.COL, Cmd.MIN, 100, Cmd.MAX, 100,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL\n-            };\n-        case ALL_FIXED:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL, Cmd.MIN, 50, Cmd.MAX, 50,\n-                Cmd.COL, Cmd.MIN, 50, Cmd.MAX, 50,\n-                Cmd.COL, Cmd.MIN, 50, Cmd.MAX, 50\n-            };\n-        case ALL_MAX:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL, Cmd.MAX, 50,\n-                Cmd.COL, Cmd.MAX, 50,\n-                Cmd.COL, Cmd.MAX, 50\n-            };\n-       case NO_NESTED:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL, Cmd.PREF, 100,\n-                Cmd.COL, Cmd.PREF, 200,\n-                Cmd.COL, Cmd.PREF, 300,\n-                Cmd.COL, Cmd.MIN, 100, Cmd.MAX, 100,\n-                Cmd.COL, Cmd.PREF, 100,\n-                Cmd.COL, Cmd.MIN, 100,\n-                Cmd.COL, Cmd.MAX, 100,\n-                Cmd.COL, Cmd.PREF, 400,\n-                Cmd.COL\n-            };\n-        case NESTED:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL, Cmd.PREF, 100,\n-                Cmd.COL, Cmd.PREF, 200,\n-                Cmd.COL, Cmd.PREF, 300,\n-                Cmd.COL, Cmd.MIN, 100, Cmd.MAX, 100,\n-                Cmd.COL, Cmd.PREF, 100,\n-                Cmd.COL, Cmd.MIN, 100,\n-                Cmd.COL, Cmd.MAX, 100,\n-                Cmd.COL, Cmd.PREF, 400,\n-                Cmd.COL,\n-                Cmd.COMBINE, 0, 3,\n-                Cmd.COMBINE, 1, 2\n-            };\n-        case MANY_COLUMNS:\n-            return new Object[] {\n-                Cmd.ROWS, 300,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL\n-            };\n-        case MANY_COLUMNS_SAME:\n-            return new Object[] {\n-                Cmd.ROWS, 300,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30\n-            };\n-        case MILLION:\n-            return new Object[] {\n-                Cmd.ROWS, 10_000_000,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL\n-            };\n-        case THOUSAND:\n-            return new Object[] {\n-                Cmd.ROWS, 1_000,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL\n-            };\n-        default:\n-            throw new Error(\"?\" + d);\n-        }\n-    }\n-\n-    protected void updatePane() {\n-        Demo d = demoSelector.getSelectionModel().getSelectedItem();\n-        ResizePolicy p = policySelector.getSelectionModel().getSelectedItem();\n-        Object[] spec = createSpec(d);\n-\n-        Pane n = createPane(d, p, spec);\n-        setContent(n);\n-    }\n-\n-    protected void combineColumns(TableView<String> t, int ix, int count, int name) {\n-        TableColumn<String, ?> tc = new TableColumn<>();\n-        tc.setText(\"N\" + name);\n-\n-        for (int i = 0; i < count; i++) {\n-            TableColumn<String, ?> c = t.getColumns().remove(ix);\n-            tc.getColumns().add(c);\n-        }\n-        t.getColumns().add(ix, tc);\n-    }\n-\n-    protected Pane createPane(Demo demo, ResizePolicy policy, Object[] spec) {\n-        if ((demo == null) || (spec == null) || (policy == null)) {\n-            return new BorderPane();\n-        }\n-\n-        boolean cellSelection = false;\n-        boolean nullSelectionModel = false;\n-        SelectionMode selectionMode = SelectionMode.SINGLE;\n-        Selection sel = selectionSelector.getSelectionModel().getSelectedItem();\n-        if (sel != null) {\n-            switch (sel) {\n-            case MULTIPLE_CELL:\n-                selectionMode = SelectionMode.MULTIPLE;\n-                cellSelection = true;\n-                break;\n-            case MULTIPLE_ROW:\n-                selectionMode = SelectionMode.MULTIPLE;\n-                break;\n-            case NULL:\n-                nullSelectionModel = true;\n-                break;\n-            case SINGLE_CELL:\n-                cellSelection = true;\n-                break;\n-            case SINGLE_ROW:\n-                break;\n-            default:\n-                throw new Error(\"?\" + sel);\n-            }\n-        }\n-\n-        control = new TableView<>();\n-        control.getSelectionModel().setCellSelectionEnabled(cellSelection);\n-        control.getSelectionModel().setSelectionMode(selectionMode);\n-        if (nullSelectionModel) {\n-            control.setSelectionModel(null);\n-        }\n-        if (nullFocusModel.isSelected()) {\n-            control.setFocusModel(null);\n-        }\n-        if (fixedHeight.isSelected()) {\n-            control.setFixedCellSize(20);\n-        }\n-\n-        control.setTableMenuButtonVisible(menuButtonVisible.isSelected());\n-        menuButtonVisible.selectedProperty().bindBidirectional(control.tableMenuButtonVisibleProperty());\n-\n-        Callback<ResizeFeatures, Boolean> p = createPolicy(policy);\n-        control.setColumnResizePolicy(p);\n-\n-        TableColumn<String, String> lastColumn = null;\n-        int id = 1;\n-\n-        for (int i = 0; i < spec.length;) {\n-            Object x = spec[i++];\n-            if (x instanceof Cmd cmd) {\n-                switch (cmd) {\n-                case COL:\n-                    {\n-                        TableColumn<String, String> c = new TableColumn<>();\n-                        control.getColumns().add(c);\n-                        c.setText(\"C\" + control.getColumns().size());\n-                        c.setCellValueFactory((f) -> new SimpleStringProperty(describe(c)));\n-                        lastColumn = c;\n-                    }\n-                    break;\n-                case COL_WITH_GRAPHIC:\n-                    {\n-                        TableColumn<String, String> c = new TableColumn<>();\n-                        control.getColumns().add(c);\n-                        c.setText(\"C\" + control.getColumns().size());\n-                        c.setCellValueFactory((f) -> new SimpleStringProperty(describe(c)));\n-                        c.setCellFactory((r) -> {\n-                            return new TableCell<>() {\n-                                @Override\n-                                protected void updateItem(String item, boolean empty) {\n-                                    super.updateItem(item, empty);\n-                                    Text t = new Text(\n-                                        \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n2\\n3\\n\");\n-                                    t.wrappingWidthProperty().bind(widthProperty());\n-                                    setPrefHeight(USE_COMPUTED_SIZE);\n-                                    setGraphic(t);\n-                                }\n-                            };\n-                        });\n-                        lastColumn = c;\n-                    }\n-                    break;\n-                case MAX:\n-                    {\n-                        int w = (int)(spec[i++]);\n-                        lastColumn.setMaxWidth(w);\n-                    }\n-                    break;\n-                case MIN:\n-                    {\n-                        int w = (int)(spec[i++]);\n-                        lastColumn.setMinWidth(w);\n-                    }\n-                    break;\n-                case PREF:\n-                    {\n-                        int w = (int)(spec[i++]);\n-                        lastColumn.setPrefWidth(w);\n-                    }\n-                    break;\n-                case ROWS:\n-                    {\n-                        int n = (int)(spec[i++]);\n-                        for (int j = 0; j < n; j++) {\n-                            control.getItems().add(newItem());\n-                        }\n-                    }\n-                    break;\n-                case COMBINE:\n-                    int ix = (int)(spec[i++]);\n-                    int ct = (int)(spec[i++]);\n-                    combineColumns(control, ix, ct, id++);\n-                    break;\n-                default:\n-                    throw new Error(\"?\" + cmd);\n-                }\n-            } else {\n-                throw new Error(\"?\" + x);\n-            }\n-        }\n-\n-        hideMiddleColumn(hideColumn.isSelected());\n-\n-        updateCellValueFactory();\n-        updateCellFactory();\n-\n-        Filter f = filterSelector.getSelectionModel().getSelectedItem();\n-        if (f == Filter.NONE) {\n-            f = null;\n-        }\n-        if (f != null) {\n-            ObservableList<String> items = FXCollections.observableArrayList();\n-            items.addAll(control.getItems());\n-            FilteredList<String> filteredList = new FilteredList<>(items);\n-            switch(f) {\n-            case SKIP1S:\n-                filteredList.setPredicate((s) -> {\n-                    if (s == null) {\n-                        return true;\n-                    }\n-                    return !s.contains(\"11\");\n-                });\n-                break;\n-            case SKIP2S:\n-                filteredList.setPredicate((s) -> {\n-                    if (s == null) {\n-                        return true;\n-                    }\n-                    return !s.contains(\"22\");\n-                });\n-                break;\n-            default:\n-                throw new Error(\"?\" + f);\n-            }\n-            control.setItems(filteredList);\n-        }\n-\n-        BorderPane bp = new BorderPane();\n-        bp.setCenter(control);\n-        return bp;\n-    }\n-\n-    protected void hideMiddleColumn(boolean on) {\n-        if (on) {\n-            int ct = control.getColumns().size();\n-            if (ct > 0) {\n-                control.getColumns().get(ct \/ 2).setVisible(false);\n-            }\n-        } else {\n-            for (TableColumn c: control.getColumns()) {\n-                c.setVisible(true);\n-            }\n-        }\n-    }\n-\n-    protected String newItem() {\n-        return SequenceNumber.next();\n-    }\n+\/\/                case COL_WITH_GRAPHIC:\n+\/\/                    {\n+\/\/                        TableColumn<Object, String> c = new TableColumn<>();\n+\/\/                        tableView.getColumns().add(c);\n+\/\/                        c.setText(\"C\" + tableView.getColumns().size());\n+\/\/                        c.setCellValueFactory((f) -> new SimpleStringProperty(describe(c)));\n+\/\/                        c.setCellFactory((r) -> {\n+\/\/                            return new TableCell<>() {\n+\/\/                                @Override\n+\/\/                                protected void updateItem(String item, boolean empty) {\n+\/\/                                    super.updateItem(item, empty);\n+\/\/                                    Text t = new Text(\n+\/\/                                        \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n2\\n3\\n\");\n+\/\/                                    t.wrappingWidthProperty().bind(widthProperty());\n+\/\/                                    setPrefHeight(USE_COMPUTED_SIZE);\n+\/\/                                    setGraphic(t);\n+\/\/                                }\n+\/\/                            };\n+\/\/                        });\n+\/\/                        lastColumn = c;\n+\/\/                    }\n+\n+    \/\/ FIX move to column menu\n+\/\/    void filter() {\n+\/\/        Filter f = filterSelector.getSelectionModel().getSelectedItem();\n+\/\/        if (f == Filter.NONE) {\n+\/\/            f = null;\n+\/\/        }\n+\/\/        if (f != null) {\n+\/\/            ObservableList<Object> items = FXCollections.observableArrayList();\n+\/\/            items.addAll(tableView.getItems());\n+\/\/            FilteredList<Object> filteredList = new FilteredList<>(items);\n+\/\/            switch(f) {\n+\/\/            case SKIP1S:\n+\/\/                filteredList.setPredicate((s) -> {\n+\/\/                    if (s == null) {\n+\/\/                        return true;\n+\/\/                    }\n+\/\/                    return !((String)s).contains(\"11\");\n+\/\/                });\n+\/\/                break;\n+\/\/            case SKIP2S:\n+\/\/                filteredList.setPredicate((s) -> {\n+\/\/                    if (s == null) {\n+\/\/                        return true;\n+\/\/                    }\n+\/\/                    return !((String)s).contains(\"22\");\n+\/\/                });\n+\/\/                break;\n+\/\/            default:\n+\/\/                throw new Error(\"?\" + f);\n+\/\/            }\n+\/\/            \/\/tableView.setItems(filteredList);\n+\/\/        }\n+\/\/    }\n@@ -844,18 +258,104 @@\n-    private Callback<CellDataFeatures<String, String>, ObservableValue<String>> getValueFactory(CellValue t) {\n-        if (t != null) {\n-            switch (t) {\n-            case MIN_MAX:\n-                return (f) -> {\n-                    String s = describe(f.getTableColumn());\n-                    return new SimpleStringProperty(s);\n-                };\n-            case QUOTED:\n-                return (f) -> {\n-                    String s = '\"' + f.getValue() + '\"';\n-                    return new SimpleStringProperty(s);\n-                };\n-            case VALUE:\n-                return (f) -> {\n-                    String s = f.getValue();\n-                    return new SimpleStringProperty(s);\n-                };\n+    \/\/ FIX move to column menu\n+\/\/    private Callback<CellDataFeatures<Object, String>, ObservableValue<String>> getValueFactory(CellValue t) {\n+\/\/        if (t != null) {\n+\/\/            switch (t) {\n+\/\/            case MIN_MAX:\n+\/\/                return (f) -> {\n+\/\/                    String s = describe(f.getTableColumn());\n+\/\/                    return new SimpleStringProperty(s);\n+\/\/                };\n+\/\/            case QUOTED:\n+\/\/                return (f) -> {\n+\/\/                    String s = \"\\\"\" + f.getValue() + '\"';\n+\/\/                    return new SimpleStringProperty(s);\n+\/\/                };\n+\/\/            case VALUE:\n+\/\/                return (f) -> {\n+\/\/                    String s = String.valueOf(f.getValue());\n+\/\/                    return new SimpleStringProperty(s);\n+\/\/                };\n+\/\/            }\n+\/\/        }\n+\/\/        return null;\n+\/\/    }\n+\n+\/\/    private Node getIcon(String text) {\n+\/\/        if (text.contains(\"0\")) {\n+\/\/            return icon(Color.RED);\n+\/\/        } else if (text.contains(\"1\")) {\n+\/\/            return icon(Color.GREEN);\n+\/\/        }\n+\/\/        return null;\n+\/\/    }\n+\/\/\n+\/\/    private Node icon(Color color) {\n+\/\/        Canvas c = new Canvas(16, 16);\n+\/\/        GraphicsContext g = c.getGraphicsContext2D();\n+\/\/        g.setFill(color);\n+\/\/        g.fillRect(0, 0, c.getWidth(), c.getHeight());\n+\/\/        return c;\n+\/\/    }\n+\n+    \/\/ FIX move to column menu\n+\/\/    private Callback getCellFactory(Cells t) {\n+\/\/        if (t != null) {\n+\/\/            switch (t) {\n+\/\/            case NULL:\n+\/\/                return null;\n+\/\/            case GRAPHICS:\n+\/\/                return (r) -> {\n+\/\/                    return new TableCell<String,String>() {\n+\/\/                        @Override\n+\/\/                        protected void updateItem(String item, boolean empty) {\n+\/\/                            super.updateItem(item, empty);\n+\/\/                            if (item == null) {\n+\/\/                                super.setText(null);\n+\/\/                                super.setGraphic(null);\n+\/\/                            } else {\n+\/\/                                String s = item.toString();\n+\/\/                                super.setText(s);\n+\/\/                                Node n = getIcon(s);\n+\/\/                                super.setGraphic(n);\n+\/\/                            }\n+\/\/                        }\n+\/\/                    };\n+\/\/                };\n+\/\/            case VARIABLE:\n+\/\/                return (r) -> {\n+\/\/                    return new TableCell<String,String>() {\n+\/\/                        @Override\n+\/\/                        protected void updateItem(String item, boolean empty) {\n+\/\/                            super.updateItem(item, empty);\n+\/\/                            String s =\n+\/\/                                \"111111111111111111111111111111111111111111111\" +\n+\/\/                                \"11111111111111111111111111111111111111111\\n2\\n3\\n\";\n+\/\/                            Text t = new Text(s);\n+\/\/                            t.wrappingWidthProperty().bind(widthProperty());\n+\/\/                            setPrefHeight(USE_COMPUTED_SIZE);\n+\/\/                            setGraphic(t);\n+\/\/                        }\n+\/\/                    };\n+\/\/                };\n+\/\/            }\n+\/\/        }\n+\/\/        return TableColumn.DEFAULT_CELL_FACTORY;\n+\/\/    }\n+\n+    \/**\n+     * a user-defined policy demonstrates that we can indeed create a custom policy using the new API.\n+     * this policy simply sizes all columns equally.\n+     *\/\n+    static class UserDefinedResizePolicy\n+        extends ConstrainedColumnResizeBase\n+        implements Callback<TableView.ResizeFeatures, Boolean>\n+    {\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public Boolean call(ResizeFeatures rf) {\n+            List<? extends TableColumnBase<?, ?>> visibleLeafColumns = rf.getTable().getVisibleLeafColumns();\n+            int sz = visibleLeafColumns.size();\n+            \/\/ using added public method getContentWidth()\n+            double w = rf.getContentWidth() \/ sz;\n+            for (TableColumnBase<?, ?> c: visibleLeafColumns) {\n+                \/\/ using added public method setColumnWidth()\n+                rf.setColumnWidth(c, w);\n@@ -863,0 +363,1 @@\n+            return false;\n@@ -864,1 +365,0 @@\n-        return null;\n@@ -867,7 +367,71 @@\n-    private Node getIcon(String text) {\n-        if (text.contains(\"0\")) {\n-            return icon(Color.RED);\n-        } else if (text.contains(\"1\")) {\n-            return icon(Color.GREEN);\n-        }\n-        return null;\n+    private Node createColumnsSelector(String name, ObservableList<TableColumn<DataRow, ?>> columns) {\n+        ObjectSelector<List<TableColumn<DataRow, ?>>> s = new ObjectSelector<>(name, (v) -> {\n+            columns.setAll(v);\n+        });\n+        s.addChoice(\"With All Constraints\", columnBuilder().\n+            col(\"Fixed\").min(70).max(70).\n+            col(\"MinPrefMax\").min(50).pref(200).max(300).\n+            col(\"Min\").min(50).\n+            col(\"Pref\").pref(200).\n+            col(\"Max\").max(150).\n+            col(\"Std\").\n+            asList()\n+        );\n+        s.addChoiceSupplier(\"20 Equal\", () -> {\n+            var cs = columnBuilder();\n+            for (int i = 1; i < 20; i++) {\n+                cs.col(\"C\" + i);\n+            }\n+            return cs.asList();\n+        });\n+        s.addChoiceSupplier(\"20 Equal, Pref=30\", () -> {\n+            var cs = columnBuilder();\n+            for (int i = 1; i < 20; i++) {\n+                cs.col(\"C\" + i).pref(30);\n+            }\n+            return cs.asList();\n+        });\n+        s.addChoice(\"Fixed in the Middle\", columnBuilder().\n+            col(\"C1\").\n+            col(\"C2\").\n+            col(\"C3\").\n+            col(\"Fixed4\").fixed(100).\n+            col(\"Fixed5\").fixed(100).\n+            col(\"Fixed6\").fixed(100).\n+            col(\"C7\").\n+            col(\"C8\").\n+            col(\"C9\").\n+            asList()\n+        );\n+        s.addChoice(\"5 Fixed\", columnBuilder().\n+            col(\"Fixed1\").fixed(50).\n+            col(\"Fixed2\").fixed(50).\n+            col(\"Fixed3\").fixed(50).\n+            col(\"Fixed4\").fixed(50).\n+            col(\"Fixed5\").fixed(50).\n+            asList()\n+        );\n+        s.addChoice(\"5 Max\", columnBuilder().\n+            col(\"Max1\").max(90).\n+            col(\"Max2\").max(90).\n+            col(\"Max3\").max(90).\n+            col(\"Max4\").max(90).\n+            col(\"Max5\").max(90).\n+            asList()\n+        );\n+        s.addChoice(\"Nested Columns\", columnBuilder().\n+            col(\"Pref100\").pref(100).\n+            col(\"Pref200\").pref(200).\n+            col(\"Pref300\").pref(300).\n+            col(\"Fixed100\").fixed(100).\n+            col(\"Pref100\").pref(100).\n+            col(\"Min100\").min(100).\n+            col(\"Max100\").max(100).\n+            col(\"Pref400\").pref(400).\n+            col(\"C\").\n+            combine(0, 3).\n+            combine(1, 2).\n+            asList()\n+        );\n+        s.addChoice(\"<empty>\", FXCollections.observableArrayList());\n+        return s;\n@@ -876,6 +440,2 @@\n-    private Node icon(Color color) {\n-        Canvas c = new Canvas(16, 16);\n-        GraphicsContext g = c.getGraphicsContext2D();\n-        g.setFill(color);\n-        g.fillRect(0, 0, c.getWidth(), c.getHeight());\n-        return c;\n+    private ColumnBuilder<TableColumn<DataRow, ?>> columnBuilder() {\n+        return new ColumnBuilder<>(this::newColumn);\n@@ -884,37 +444,7 @@\n-    private Callback getCellFactory(Cells t) {\n-        if (t != null) {\n-            switch (t) {\n-            case GRAPHICS:\n-                return (r) -> {\n-                    return new TableCell<String,String>() {\n-                        @Override\n-                        protected void updateItem(String item, boolean empty) {\n-                            super.updateItem(item, empty);\n-                            if (item == null) {\n-                                super.setText(null);\n-                                super.setGraphic(null);\n-                            } else {\n-                                String s = item.toString();\n-                                super.setText(s);\n-                                Node n = getIcon(s);\n-                                super.setGraphic(n);\n-                            }\n-                        }\n-                    };\n-                };\n-            case VARIABLE:\n-                return (r) -> {\n-                    return new TableCell<String,String>() {\n-                        @Override\n-                        protected void updateItem(String item, boolean empty) {\n-                            super.updateItem(item, empty);\n-                            String s =\n-                                \"111111111111111111111111111111111111111111111\" +\n-                                \"11111111111111111111111111111111111111111\\n2\\n3\\n\";\n-                            Text t = new Text(s);\n-                            t.wrappingWidthProperty().bind(widthProperty());\n-                            setPrefHeight(USE_COMPUTED_SIZE);\n-                            setGraphic(t);\n-                        }\n-                    };\n-                };\n+    private TableColumn<DataRow, Object> newColumn() {\n+        TableColumn<DataRow, Object> tc = new TableColumn();\n+        tc.setCellFactory(TextFieldTableCell.<DataRow, Object>forTableColumn(DataRow.converter()));\n+        tc.setCellValueFactory((cdf) -> {\n+            Object v = cdf.getValue();\n+            if (v instanceof DataRow r) {\n+                return r.getValue(tc);\n@@ -922,2 +452,3 @@\n-        }\n-        return TableColumn.DEFAULT_CELL_FACTORY;\n+            return new SimpleObjectProperty(v);\n+        });\n+        return tc;\n@@ -926,6 +457,18 @@\n-    private void updateColumns(Consumer<TableColumn<String, String>> handler) {\n-        if (control != null) {\n-            for (TableColumn<String, ?> c: control.getColumns()) {\n-                handler.accept((TableColumn<String, String>)c);\n-            }\n-        }\n+    private Node createColumnResizePolicy(String name, ObjectProperty<Callback<ResizeFeatures, Boolean>> p) {\n+        ObjectOption<Callback<ResizeFeatures, Boolean>> s = new ObjectOption<>(name, p);\n+        s.addChoice(\"AUTO_RESIZE_FLEX_NEXT_COLUMN\", TableView.CONSTRAINED_RESIZE_POLICY_FLEX_NEXT_COLUMN);\n+        s.addChoice(\"AUTO_RESIZE_FLEX_LAST_COLUMN\", TableView.CONSTRAINED_RESIZE_POLICY_FLEX_LAST_COLUMN);\n+        s.addChoice(\"AUTO_RESIZE_ALL_COLUMNS\", TableView.CONSTRAINED_RESIZE_POLICY_ALL_COLUMNS);\n+        s.addChoice(\"AUTO_RESIZE_LAST_COLUMN\", TableView.CONSTRAINED_RESIZE_POLICY_LAST_COLUMN);\n+        s.addChoice(\"AUTO_RESIZE_NEXT_COLUMN\", TableView.CONSTRAINED_RESIZE_POLICY_NEXT_COLUMN);\n+        s.addChoice(\"AUTO_RESIZE_SUBSEQUENT_COLUMNS\", TableView.CONSTRAINED_RESIZE_POLICY_SUBSEQUENT_COLUMNS);\n+        s.addChoice(\"UNCONSTRAINED_RESIZE_POLICY\", TableView.UNCONSTRAINED_RESIZE_POLICY);\n+        s.addChoice(\"user defined, equal width\", new UserDefinedResizePolicy());\n+        return s;\n+    }\n+\n+    private Node createFocusModelOptions(String name, ObjectProperty<TableView.TableViewFocusModel<DataRow>> p) {\n+        ObjectOption<TableView.TableViewFocusModel<DataRow>> s = new ObjectOption<>(name, p);\n+        s.addChoiceSupplier(\"<default>\", () -> new TableView.TableViewFocusModel(control));\n+        s.addChoice(\"<null>\", null);\n+        return s;\n@@ -934,3 +477,1 @@\n-    private void updateCellValueFactory() {\n-        CellValue t = cellValueSelector.getSelectionModel().getSelectedItem();\n-        Callback<CellDataFeatures<String, String>, ObservableValue<String>> f = getValueFactory(t);\n+    private static record SelectionChoice(boolean isNull, boolean isMultiple, boolean isCells) { }\n@@ -938,2 +479,6 @@\n-        updateColumns((c) -> {\n-            c.setCellValueFactory(f);\n+    private Node createSelectionModelOptions(String name) {\n+        var original = control.getSelectionModel();\n+        ObjectSelector<SelectionChoice> s = new ObjectSelector<>(name, (v) -> {\n+            control.setSelectionModel(v.isNull() ? null : original);\n+            original.setSelectionMode(v.isMultiple() ? SelectionMode.MULTIPLE : SelectionMode.SINGLE);\n+            original.setCellSelectionEnabled(v.isCells());\n@@ -941,0 +486,7 @@\n+        s.addChoice(\"Single Row\", new SelectionChoice(false, false, false));\n+        s.addChoice(\"Multiple Rows\", new SelectionChoice(false, true, false));\n+        s.addChoice(\"Single Cell\", new SelectionChoice(false, false, true));\n+        s.addChoice(\"Multiple Cells\", new SelectionChoice(false, true, true));\n+        s.addChoice(\"<null>\", new SelectionChoice(true, false, false));\n+        s.selectFirst();\n+        return s;\n@@ -943,3 +495,7 @@\n-    private void updateCellFactory() {\n-        Cells t = cellFactorySelector.getSelectionModel().getSelectedItem();\n-        Callback<TableColumn<String, String>, TableCell<String, String>> f = getCellFactory(t);\n+    private List<DataRow> createRows(int count) {\n+        ArrayList<DataRow> rv = new ArrayList<>(count);\n+        for (int i = 0; i < count; i++) {\n+            rv.add(new DataRow());\n+        }\n+        return rv;\n+    }\n@@ -947,2 +503,3 @@\n-        updateColumns((c) -> {\n-            c.setCellFactory(f);\n+    private Node createItemsOptions(String name, ObservableList<DataRow> items) {\n+        ObjectSelector<List<DataRow>> s = new ObjectSelector<>(name, (v) -> {\n+            items.setAll(v);\n@@ -950,0 +507,7 @@\n+        s.addChoiceSupplier(\"1 Row\", () -> createRows(1));\n+        s.addChoiceSupplier(\"10 Rows\", () -> createRows(10));\n+        s.addChoiceSupplier(\"100 Rows\", () -> createRows(100));\n+        s.addChoiceSupplier(\"1,000 Rows\", () -> createRows(1000));\n+        s.addChoiceSupplier(\"10,000 Rows\", () -> createRows(10_000));\n+        s.addChoiceSupplier(\"<empty>\", () -> createRows(0));\n+        return s;\n@@ -952,7 +516,7 @@\n-    \/**\n-     * a user-defined policy demonstrates that we can indeed create a custom policy using the new API.\n-     * this policy simply sizes all columns equally.\n-     *\/\n-    protected static class UserDefinedResizePolicy\n-        extends ConstrainedColumnResizeBase\n-        implements Callback<TableView.ResizeFeatures, Boolean> {\n+    private Callback<TableView<DataRow>, TableRow<DataRow>> createRowFactory(Color c) {\n+        return (v) -> {\n+            TableRow<DataRow> row = new TableRow<>();\n+            row.setBackground(Background.fill(c));\n+            return row;\n+        };\n+    }\n@@ -960,13 +524,9 @@\n-        @SuppressWarnings(\"unchecked\")\n-        @Override\n-        public Boolean call(ResizeFeatures rf) {\n-            List<? extends TableColumnBase<?, ?>> visibleLeafColumns = rf.getTable().getVisibleLeafColumns();\n-            int sz = visibleLeafColumns.size();\n-            \/\/ using added public method getContentWidth()\n-            double w = rf.getContentWidth() \/ sz;\n-            for (TableColumnBase<?, ?> c: visibleLeafColumns) {\n-                \/\/ using added public method setColumnWidth()\n-                rf.setColumnWidth(c, w);\n-            }\n-            return false;\n-        }\n+    private Node createRowFactoryOptions(String name, ObjectProperty<Callback<TableView<DataRow>, TableRow<DataRow>>> p) {\n+        Callback<TableView<DataRow>, TableRow<DataRow>> defaultValue = p.get();\n+        ObjectOption<Callback<TableView<DataRow>, TableRow<DataRow>>> s = new ObjectOption<>(name, p);\n+        s.addChoice(\"<default>\", defaultValue);\n+        s.addChoice(\"Red Background\", createRowFactory(Color.RED));\n+        s.addChoice(\"Green Background\", createRowFactory(Color.GREEN));\n+        s.addChoice(\"<null>\", null);\n+        s.selectFirst();\n+        return s;\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TableViewPage.java","additions":380,"deletions":820,"binary":false,"changes":1200,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,6 @@\n-import com.oracle.tools.fx.monkey.util.FX;\n-import com.oracle.tools.fx.monkey.util.FontSelector;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.skin.TextAreaSkin;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.IntOption;\n+import com.oracle.tools.fx.monkey.sheets.TextInputControlPropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n@@ -30,1 +34,0 @@\n-import com.oracle.tools.fx.monkey.util.Templates;\n@@ -32,3 +35,0 @@\n-import com.oracle.tools.fx.monkey.util.TextSelector;\n-import javafx.scene.control.CheckBox;\n-import javafx.scene.control.TextArea;\n@@ -37,1 +37,1 @@\n- * TextArea Page\n+ * TextArea Page.\n@@ -39,1 +39,1 @@\n-public class TextAreaPage extends TestPaneBase {\n+public class TextAreaPage extends TestPaneBase implements HasSkinnable {\n@@ -41,1 +41,0 @@\n-    private final TextSelector textSelector;\n@@ -44,1 +43,1 @@\n-        FX.name(this, \"TextAreaPage\");\n+        super(\"TextAreaPage\");\n@@ -47,15 +46,0 @@\n-        control.setPromptText(\"<prompt>\");\n-\n-        textSelector = TextSelector.fromPairs(\n-            \"textSelector\",\n-            (t) -> control.setText(t),\n-            Templates.multiLineTextPairs()\n-        );\n-\n-        FontSelector fontSelector = new FontSelector(\"font\", control::setFont);\n-\n-        CheckBox wrap = new CheckBox(\"wrap text\");\n-        FX.name(wrap, \"wrapText\");\n-        wrap.selectedProperty().addListener((s, p, on) -> {\n-            control.setWrapText(on);\n-        });\n@@ -63,18 +47,8 @@\n-        CheckBox editable = new CheckBox(\"editable\");\n-        FX.name(editable, \"editable\");\n-        editable.selectedProperty().bindBidirectional(control.editableProperty());\n-\n-        TextSelector promptChoice = Templates.promptChoice(\"promptChoice\", control::setPromptText);\n-        promptChoice.addPair(\"Multiline\", \"1\\n2\\n3\\n4\");\n-\n-        OptionPane p = new OptionPane();\n-        p.label(\"Text:\");\n-        p.option(textSelector.node());\n-        p.label(\"Font:\");\n-        p.option(fontSelector.fontNode());\n-        p.label(\"Font Size:\");\n-        p.option(fontSelector.sizeNode());\n-        p.option(wrap);\n-        p.option(editable);\n-        p.label(\"Prompt:\");\n-        p.option(promptChoice.node());\n+        OptionPane op = new OptionPane();\n+        op.section(\"TextArea\");\n+        op.option(\"Preferred Column Count:\", new IntOption(\"prefColumnCount\", -1, Integer.MAX_VALUE, control.prefColumnCountProperty()));\n+        op.option(\"Preferred Row Count:\", new IntOption(\"prefRowCount\", -1, Integer.MAX_VALUE, control.prefRowCountProperty()));\n+        op.option(\"Scroll Left: TODO\", null); \/\/ TODO\n+        op.option(\"Scroll Top: TODO\", null); \/\/ TODO\n+        op.option(new BooleanOption(\"wrapText\", \"wrap text\", control.wrapTextProperty()));\n+        TextInputControlPropertySheet.appendTo(op, true, control);\n@@ -83,1 +57,7 @@\n-        setOptions(p);\n+        setOptions(op);\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n@@ -85,3 +65,3 @@\n-        textSelector.selectFirst();\n-        fontSelector.selectSystemFont();\n-        promptChoice.select(null);\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new TextAreaSkin(control));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextAreaPage.java","additions":28,"deletions":48,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import javafx.scene.control.ComboBox;\n@@ -32,0 +31,4 @@\n+import javafx.scene.control.skin.TextFieldSkin;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.IntOption;\n+import com.oracle.tools.fx.monkey.sheets.TextInputControlPropertySheet;\n@@ -33,1 +36,1 @@\n-import com.oracle.tools.fx.monkey.util.FontSelector;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n@@ -35,2 +38,0 @@\n-import com.oracle.tools.fx.monkey.util.PosSelector;\n-import com.oracle.tools.fx.monkey.util.Templates;\n@@ -38,1 +39,0 @@\n-import com.oracle.tools.fx.monkey.util.TextSelector;\n@@ -41,1 +41,1 @@\n- * TextField Page\n+ * TextField Page.\n@@ -43,1 +43,1 @@\n-public class TextFieldPage extends TestPaneBase {\n+public class TextFieldPage extends TestPaneBase implements HasSkinnable {\n@@ -45,1 +45,0 @@\n-    private final TextSelector textSelector;\n@@ -52,39 +51,3 @@\n-    protected TextFieldPage(TextField control, String name) {\n-        FX.name(this, \"TextFieldPage\");\n-\n-        this.control = control;\n-        control.setAlignment(Pos.CENTER_LEFT);\n-\n-        textSelector = TextSelector.fromPairs(\n-            \"textSelector\",\n-            (t) -> {\n-                control.setText(t);\n-            },\n-            Templates.singleLineTextPairs()\n-        );\n-\n-        FontSelector fontSelector = new FontSelector(\"font\", control::setFont);\n-\n-        PosSelector posSelector = new PosSelector(control::setAlignment);\n-\n-        TextSelector promptChoice = Templates.promptChoice(\"promptChoice\", control::setPromptText);\n-\n-        ComboBox<Integer> prefColumnCount = new ComboBox<>();\n-        FX.name(prefColumnCount, \"prefColumnCount\");\n-        prefColumnCount.getItems().setAll(\n-            null,\n-            1,\n-            5,\n-            10,\n-            100,\n-            1000\n-        );\n-        prefColumnCount.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            Integer ct = prefColumnCount.getSelectionModel().getSelectedItem();\n-            int count = ct == null ? TextField.DEFAULT_PREF_COLUMN_COUNT : ct;\n-            control.setPrefColumnCount(count);\n-        });\n-\n-        CheckBox editable = new CheckBox(\"editable\");\n-        FX.name(editable, \"editable\");\n-        editable.selectedProperty().bindBidirectional(control.editableProperty());\n+    protected TextFieldPage(TextField f, String name) {\n+        super(name);\n+        this.control = f;\n@@ -93,1 +56,1 @@\n-        FX.name(inScroll, \"scroll\");\n+        FX.name(inScroll, \"inScrollPane\");\n@@ -97,13 +60,3 @@\n-        op.label(\"Text:\");\n-        op.option(textSelector.node());\n-        op.option(editable);\n-        op.label(\"Font:\");\n-        op.option(fontSelector.fontNode());\n-        op.label(\"Size:\");\n-        op.option(fontSelector.sizeNode());\n-        op.label(\"Alignment:\");\n-        op.option(posSelector.node());\n-        op.label(\"Prompt:\");\n-        op.option(promptChoice.node());\n-        op.label(\"Preferred Column Count:\");\n-        op.option(prefColumnCount);\n+        op.option(\"Alignment:\", new EnumOption<>(\"alignment\", false, Pos.class, control.alignmentProperty()));\n+        op.option(\"Preferred Column Count:\", new IntOption(\"prefColumnCount\", -1, Integer.MAX_VALUE, control.prefColumnCountProperty()));\n+        op.separator();\n@@ -112,0 +65,2 @@\n+        TextInputControlPropertySheet.appendTo(op, false, control);\n+\n@@ -114,3 +69,0 @@\n-\n-        posSelector.select(Pos.BASELINE_RIGHT);\n-        fontSelector.selectSystemFont();\n@@ -127,0 +79,10 @@\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new TextFieldSkin(control));\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextFieldPage.java","additions":27,"deletions":65,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import javafx.geometry.Orientation;\n@@ -30,1 +29,0 @@\n-import javafx.scene.Group;\n@@ -33,1 +31,0 @@\n-import javafx.scene.control.CheckBox;\n@@ -35,2 +32,0 @@\n-import javafx.scene.control.Separator;\n-import javafx.scene.control.TextField;\n@@ -39,3 +34,0 @@\n-import javafx.scene.paint.Color;\n-import javafx.scene.shape.Path;\n-import javafx.scene.shape.PathElement;\n@@ -45,0 +37,1 @@\n+import javafx.scene.text.TextAlignment;\n@@ -46,0 +39,6 @@\n+import com.oracle.tools.fx.monkey.options.ActionSelector;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.FontOption;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n+import com.oracle.tools.fx.monkey.sheets.RegionPropertySheet;\n@@ -47,2 +46,0 @@\n-import com.oracle.tools.fx.monkey.util.FX;\n-import com.oracle.tools.fx.monkey.util.FontSelector;\n@@ -50,0 +47,1 @@\n+import com.oracle.tools.fx.monkey.util.ShowCaretPaths;\n@@ -51,1 +49,0 @@\n-import com.oracle.tools.fx.monkey.util.Templates;\n@@ -53,1 +50,1 @@\n-import com.oracle.tools.fx.monkey.util.TextSelector;\n+import com.oracle.tools.fx.monkey.util.TextTemplates;\n@@ -57,1 +54,1 @@\n- * TextFlow Page\n+ * TextFlow Page.\n@@ -60,6 +57,4 @@\n-    private final TextSelector textSelector;\n-    private final TextField styleField;\n-    private final FontSelector fontSelector;\n-    private final CheckBox showChars;\n-    private final CheckBox showCaretPath;\n-    private final TextFlow control;\n+    private final ActionSelector contentOption;\n+    private final FontOption fontOption;\n+    private final BooleanOption showChars;\n+    private final BooleanOption showCaretPaths;\n@@ -69,4 +64,1 @@\n-    private final Path caretPath;\n-    private String currentText;\n-    private static final String INLINE = \"\\u0000_INLINE\";\n-    private static final String RICH_TEXT = \"\\u0000_RICH\";\n+    private final TextFlow textFlow;\n@@ -75,1 +67,1 @@\n-        FX.name(this, \"TextFlowPage\");\n+        super(\"TextFlowPage\");\n@@ -77,11 +69,2 @@\n-        control = new TextFlow();\n-        control.addEventHandler(MouseEvent.ANY, this::handleMouseEvent);\n-\n-        styleField = new TextField();\n-        styleField.setOnAction((ev) -> {\n-            String s = styleField.getText();\n-            if (Utils.isBlank(s)) {\n-                s = null;\n-            }\n-            control.setStyle(s);\n-        });\n+        textFlow = new TextFlow();\n+        textFlow.addEventHandler(MouseEvent.ANY, this::handleMouseEvent);\n@@ -95,23 +78,4 @@\n-        caretPath = new Path();\n-        caretPath.setStrokeWidth(1);\n-        caretPath.setStroke(Color.RED);\n-        caretPath.setManaged(false);\n-\n-        textSelector = TextSelector.fromPairs(\n-            \"textSelector\",\n-            (t) -> updateText(),\n-            Utils.combine(\n-                Templates.multiLineTextPairs(),\n-                \"Inline Nodes\", INLINE,\n-                \"Rich Text\", RICH_TEXT,\n-                \"Accadian\", Templates.AKKADIAN\n-            )\n-        );\n-\n-        fontSelector = new FontSelector(\"font\", (f) -> updateControl());\n-\n-        Button editButton = new Button(\"Enter Text\");\n-        editButton.setOnAction((ev) -> {\n-            new EnterTextDialog(this, (s) -> {\n-                currentText = s;\n-                updateControl();\n+        contentOption = new ActionSelector(\"content\");\n+        contentOption.addButton(\"Edit\", () -> {\n+            new EnterTextDialog(this, getText(), (s) -> {\n+                setContent(s);\n@@ -120,5 +84,12 @@\n-\n-        showChars = new CheckBox(\"show characters\");\n-        FX.name(showChars, \"showChars\");\n-        showChars.selectedProperty().addListener((p) -> {\n-            updateControl();\n+        Utils.fromPairs(TextTemplates.multiLineTextPairs(), (k,v) -> contentOption.addChoice(k, () -> setContent(v)));\n+        contentOption.addChoice(\"Inline Nodes\", () -> setContent(mkInlineNodes()));\n+        contentOption.addChoice(\"Rich Text\", () -> setContent(createRichText()));\n+        contentOption.addChoice(\"Rich Text (Complex)\", () -> setContent(createRichTextComplex()));\n+        contentOption.addChoice(\"Accadian\", () -> setContent(TextTemplates.AKKADIAN));\n+\n+        fontOption = new FontOption(\"font\", false, null);\n+        fontOption.getProperty().addListener((s,p,v) -> {\n+            Runnable r = contentOption.getValue();\n+            if (r != null) {\n+                r.run();\n+            }\n@@ -127,5 +98,3 @@\n-        showCaretPath = new CheckBox(\"show caret path\");\n-        FX.name(showCaretPath, \"showCaretPath\");\n-        showCaretPath.selectedProperty().addListener((p) -> {\n-            updateControl();\n-        });\n+        showChars = new BooleanOption(\"showChars\", \"show characters\", () -> updateShowCharacters());\n+\n+        showCaretPaths = new BooleanOption(\"showCaretPaths\", \"show caret paths\", () -> updateShowCaretPaths());\n@@ -134,7 +103,8 @@\n-        op.label(\"Text:\");\n-        op.option(textSelector.node());\n-        op.option(editButton);\n-        op.label(\"Font:\");\n-        op.option(fontSelector.fontNode());\n-        op.label(\"Font Size:\");\n-        op.option(fontSelector.sizeNode());\n+        op.section(\"TextFlow\");\n+        op.option(\"Content:\", contentOption);\n+        op.option(\"Font:\", fontOption);\n+        op.option(\"Line Spacing:\", Options.lineSpacing(\"lineSpacing\", textFlow.lineSpacingProperty()));\n+        op.option(\"Tab Size:\", Options.tabSize(\"tabSize\", textFlow.tabSizeProperty()));\n+        op.option(\"Text Alignment:\", new EnumOption<>(\"textAlignment\", TextAlignment.class, textFlow.textAlignmentProperty()));\n+\n+        op.separator();\n@@ -142,12 +112,6 @@\n-        op.option(showCaretPath);\n-        op.label(\"Direct Style:\");\n-        op.option(styleField);\n-        \/\/\n-        op.option(new Separator(Orientation.HORIZONTAL));\n-        op.label(\"Pick Result:\");\n-        op.option(pickResult);\n-        op.label(\"Text.hitTest:\");\n-        op.option(hitInfo2);\n-        op.label(\"TextFlow.hitTest:\");\n-        op.option(hitInfo);\n-        op.label(\"Note: \" + (FX.isMac() ? \"⌘\" : \"ctrl\") + \"-click for caret shape\");\n+        op.option(showCaretPaths);\n+\n+        op.separator();\n+        op.option(\"Pick Result:\", pickResult);\n+        op.option(\"Text.hitTest:\", hitInfo2);\n+        op.option(\"TextFlow.hitTest:\", hitInfo);\n@@ -155,1 +119,3 @@\n-        setContent(control);\n+        RegionPropertySheet.appendTo(op, textFlow);\n+\n+        setContent(textFlow);\n@@ -158,2 +124,1 @@\n-        fontSelector.selectSystemFont();\n-        textSelector.selectFirst();\n+        fontOption.selectSystemFont();\n@@ -162,3 +127,3 @@\n-    private void updateText() {\n-        currentText = textSelector.getSelectedText();\n-        updateControl();\n+    private void setContent(String text) {\n+        Font f = getFont();\n+        textFlow.getChildren().setAll(t(text, f));\n@@ -167,4 +132,3 @@\n-    private void updateControl() {\n-        Font f = fontSelector.getFont();\n-        Node[] ts = createTextArray(currentText, f);\n-        control.getChildren().setAll(ts);\n+    private void setContent(Node[] content) {\n+        textFlow.getChildren().setAll(content);\n+    }\n@@ -172,2 +136,3 @@\n-        caretPath.getElements().clear();\n-        control.getChildren().add(caretPath);\n+    private Font getFont() {\n+        return fontOption.getFont();\n+    }\n@@ -175,4 +140,10 @@\n-        if (showChars.isSelected()) {\n-            Group g = ShowCharacterRuns.createFor(control);\n-            control.getChildren().add(g);\n-        }\n+    private Node[] mkInlineNodes() {\n+        Font f = getFont();\n+        return new Node[] {\n+            t(\"Inline Nodes:\", f),\n+            new Button(\"Left\"),\n+            t(\" \", f),\n+            new Button(\"Right\"),\n+            t(\"trailing\", f)\n+        };\n+    }\n@@ -180,7 +151,15 @@\n-        if (showCaretPath.isSelected()) {\n-            int len = FX.getTextLength(control);\n-            for (int i = 0; i < len; i++) {\n-                PathElement[] es = control.caretShape(i, true);\n-                caretPath.getElements().addAll(es);\n-            }\n-        }\n+    private Node[] createRichText() {\n+        Font f = getFont();\n+        return new Node[] {\n+            t(\"Rich Text: \", f),\n+            t(\"BOLD \", f, \"-fx-font-weight:bold;\"),\n+            t(\"BOLD \", f, \"-fx-font-weight:bold;\"),\n+            t(\"BOLD \", f, \"-fx-font-weight:bold;\"),\n+            t(\"italic \", f, \"-fx-font-style:italic;\"),\n+            t(\"underline \", f, \"-fx-underline:true;\"),\n+            t(\"The quick brown fox jumped over the lazy dog \", f),\n+            t(\"The quick brown fox jumped over the lazy dog \", f),\n+            t(\"The quick brown fox jumped over the lazy dog \", f),\n+            t(TextTemplates.RIGHT_TO_LEFT, f),\n+            t(TextTemplates.RIGHT_TO_LEFT, f)\n+        };\n@@ -189,23 +168,12 @@\n-    private Node[] createTextArray(String text, Font f) {\n-        if (INLINE.equals(text)) {\n-            return new Node[] {\n-                t(\"Inline Nodes:\", f),\n-                new Button(\"Left\"),\n-                t(\" \", f),\n-                new Button(\"Right\"),\n-                t(\"trailing\", f)\n-            };\n-        } else if (RICH_TEXT.equals(text)) {\n-            return new Node[] {\n-                t(\"Rich Text: \", f),\n-                t(\"BOLD \", f, \"-fx-font-weight:bold;\"),\n-                t(\"BOLD \", f, \"-fx-font-weight:bold;\"),\n-                t(\"BOLD \", f, \"-fx-font-weight:900;\"),\n-                t(\"italic \", f, \"-fx-font-style:italic;\"),\n-                t(\"underline \", f, \"-fx-underline:true;\"),\n-                t(Templates.TWO_EMOJIS, f),\n-                t(Templates.CLUSTERS, f)\n-            };\n-        } else {\n-            return new Node[] { t(text, f) };\n-        }\n+    private Node[] createRichTextComplex() {\n+        Font f = getFont();\n+        return new Node[] {\n+            t(\"Rich Text: \", f),\n+            t(\"BOLD \", f, \"-fx-font-weight:bold;\"),\n+            t(\"BOLD \", f, \"-fx-font-weight:100; -fx-scale-x:200%;\"),\n+            t(\"BOLD \", f, \"-fx-font-weight:900;\"),\n+            t(\"italic \", f, \"-fx-font-style:italic;\"),\n+            t(\"underline \", f, \"-fx-underline:true;\"),\n+            t(TextTemplates.TWO_EMOJIS, f),\n+            t(TextTemplates.CLUSTERS, f)\n+        };\n@@ -244,1 +212,1 @@\n-        HitInfo h = control.hitTest(p);\n+        HitInfo h = textFlow.hitTest(p);\n@@ -246,0 +214,1 @@\n+    }\n@@ -247,3 +216,8 @@\n-        if (ev.getEventType() == MouseEvent.MOUSE_CLICKED) {\n-            if (ev.isShortcutDown()) {\n-                showCaretShape(new Point2D(ev.getX(), ev.getY()));\n+    private String getText() {\n+        StringBuilder sb = new StringBuilder();\n+        for (Node n : textFlow.getChildrenUnmodifiable()) {\n+            if (n instanceof Text t) {\n+                sb.append(t.getText());\n+            } else {\n+                \/\/ inline node is treated as a single character\n+                sb.append(' ');\n@@ -252,0 +226,1 @@\n+        return sb.toString();\n@@ -254,5 +229,14 @@\n-    private void showCaretShape(Point2D p) {\n-        HitInfo h = control.hitTest(p);\n-        System.out.println(\"hit=\" + h);\n-        PathElement[] pe = control.caretShape(h.getCharIndex(), h.isLeading());\n-        caretPath.getElements().setAll(pe);\n+    private void updateShowCaretPaths() {\n+        if (showCaretPaths.getValue()) {\n+            ShowCaretPaths.createFor(textFlow);\n+        } else {\n+            ShowCaretPaths.remove(textFlow);\n+        }\n+    }\n+\n+    private void updateShowCharacters() {\n+        if (showChars.getValue()) {\n+            ShowCharacterRuns.createFor(textFlow);\n+        } else {\n+            ShowCharacterRuns.remove(textFlow);\n+        }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextFlowPage.java","additions":127,"deletions":143,"binary":false,"changes":270,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import javafx.geometry.VPos;\n@@ -29,2 +30,1 @@\n-import javafx.scene.control.Button;\n-import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Label;\n@@ -33,1 +33,0 @@\n-import javafx.scene.control.TextField;\n@@ -35,1 +34,0 @@\n-import javafx.scene.input.PickResult;\n@@ -37,4 +35,1 @@\n-import javafx.scene.paint.Color;\n-import javafx.scene.shape.Path;\n-import javafx.scene.shape.PathElement;\n-import javafx.scene.text.Font;\n+import javafx.scene.text.FontSmoothingType;\n@@ -43,3 +38,9 @@\n-import com.oracle.tools.fx.monkey.util.EnterTextDialog;\n-import com.oracle.tools.fx.monkey.util.FX;\n-import com.oracle.tools.fx.monkey.util.FontSelector;\n+import javafx.scene.text.TextAlignment;\n+import javafx.scene.text.TextBoundsType;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.FontOption;\n+import com.oracle.tools.fx.monkey.options.IntOption;\n+import com.oracle.tools.fx.monkey.options.PaintOption;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n+import com.oracle.tools.fx.monkey.sheets.ShapePropertySheet;\n@@ -48,1 +49,0 @@\n-import com.oracle.tools.fx.monkey.util.Templates;\n@@ -50,2 +50,0 @@\n-import com.oracle.tools.fx.monkey.util.TextSelector;\n-import com.oracle.tools.fx.monkey.util.Utils;\n@@ -54,1 +52,1 @@\n- * Text Page\n+ * Text Page.\n@@ -57,4 +55,1 @@\n-    private final TextSelector textSelector;\n-    private final TextField styleField;\n-    private final FontSelector fontSelector;\n-    private final CheckBox showChars;\n+    private final Text text;\n@@ -62,4 +57,3 @@\n-    private final CheckBox wrap;\n-    private final Path caretPath;\n-    private Text control;\n-    private String currentText;\n+    private final BooleanOption showChars;\n+    private final BooleanOption wrap;\n+    private final Label hitInfo;\n@@ -68,43 +62,10 @@\n-        FX.name(this, \"TextPage\");\n-\n-        styleField = new TextField();\n-        styleField.setOnAction((ev) -> {\n-            String s = styleField.getText();\n-            if (Utils.isBlank(s)) {\n-                s = null;\n-            }\n-            control.setStyle(s);\n-        });\n-\n-        caretPath = new Path();\n-        caretPath.setStrokeWidth(1);\n-        caretPath.setStroke(Color.RED);\n-        caretPath.setManaged(false);\n-\n-        textSelector = TextSelector.fromPairs(\n-            \"textSelector\",\n-            (t) -> updateText(),\n-            Templates.multiLineTextPairs()\n-        );\n-\n-        fontSelector = new FontSelector(\"font\", (f) -> updateControl());\n-\n-        Button editButton = new Button(\"Enter Text\");\n-        editButton.setOnAction((ev) -> {\n-            new EnterTextDialog(this, (s) -> {\n-                currentText = s;\n-                updateControl();\n-            }).show();\n-        });\n-\n-        showChars = new CheckBox(\"show characters\");\n-        FX.name(showChars, \"showChars\");\n-        showChars.selectedProperty().addListener((p) -> {\n-            updateControl();\n-        });\n-\n-        wrap = new CheckBox(\"wrap width\");\n-        FX.name(wrap, \"wrap\");\n-        wrap.selectedProperty().addListener((p) -> {\n-            updateWrap(wrap.selectedProperty().get());\n-        });\n+        super(\"TextPage\");\n+\n+        text = new Text();\n+        text.addEventHandler(MouseEvent.ANY, this::handleMouseEvent);\n+\n+        hitInfo = new Label();\n+\n+        showChars = new BooleanOption(\"showChars\", \"show characters\", () -> updateShowCharacters());\n+\n+        wrap = new BooleanOption(\"wrap\", \"wrap width\", () -> updateWrap());\n@@ -113,7 +74,18 @@\n-        op.label(\"Text:\");\n-        op.option(textSelector.node());\n-        op.option(editButton);\n-        op.label(\"Font:\");\n-        op.option(fontSelector.fontNode());\n-        op.label(\"Font Size:\");\n-        op.option(fontSelector.sizeNode());\n+        op.section(\"Text\");\n+        op.option(\"Bounds Type:\", new EnumOption<>(\"boundsType\", TextBoundsType.class, text.boundsTypeProperty()));\n+        op.option(new BooleanOption(\"caretBias\", \"caret bias (leading)\", text.caretBiasProperty()));\n+        op.option(\"Caret Position:\", new IntOption(\"caretPosition\", -1, Integer.MAX_VALUE, text.caretPositionProperty()));\n+        op.option(\"Font:\", new FontOption(\"font\", false, text.fontProperty()));\n+        op.option(\"Font Smoothing:\", new EnumOption<>(\"fontSmoothing\", FontSmoothingType.class, text.fontSmoothingTypeProperty()));\n+        op.option(\"Line Spacing:\", Options.lineSpacing(\"lineSpacing\", text.lineSpacingProperty()));\n+        op.option(\"Selection Start:\", new IntOption(\"selectionStart\", -1, Integer.MAX_VALUE, text.selectionStartProperty()));\n+        op.option(\"Selection End:\", new IntOption(\"selectionEnd\", -1, Integer.MAX_VALUE, text.selectionEndProperty()));\n+        op.option(\"Selection Fill:\", new PaintOption(\"selectionFill\", text.selectionFillProperty()));\n+        op.option(new BooleanOption(\"strikeThrough\", \"strike through\", text.strikethroughProperty()));\n+        op.option(\"Tab Size:\", Options.tabSize(\"tabSize\", text.tabSizeProperty()));\n+        op.option(\"Text:\", Options.textOption(\"textSelector\", true, true, text.textProperty()));\n+        op.option(\"Text Alignment:\", new EnumOption<>(\"textAlignment\", TextAlignment.class, text.textAlignmentProperty()));\n+        op.option(\"Text Origin:\", new EnumOption<VPos>(\"textOrigin\", VPos.class, text.textOriginProperty()));\n+        op.option(new BooleanOption(\"underline\", \"underline\", text.underlineProperty()));\n+\n+        op.separator();\n@@ -122,3 +94,3 @@\n-        op.label(\"Note: \" + (FX.isMac() ? \"⌘\" : \"ctrl\") + \"-click for caret shape\");\n-        op.label(\"Direct Style:\");\n-        op.option(styleField);\n+        op.option(\"Text.hitTest:\", hitInfo);\n+\n+        ShapePropertySheet.appendTo(op, text);\n@@ -131,0 +103,1 @@\n+        scroll.setContent(new Group(text));\n@@ -135,7 +108,2 @@\n-        textSelector.selectFirst();\n-        fontSelector.selectSystemFont();\n-    }\n-\n-    private void updateText() {\n-        currentText = textSelector.getSelectedText();\n-        updateControl();\n+        updateWrap();\n+        updateShowCharacters();\n@@ -144,14 +112,5 @@\n-    private void updateControl() {\n-        Font f = fontSelector.getFont();\n-\n-        control = new Text(currentText);\n-        control.setFont(f);\n-\n-        Group group = new Group(control, caretPath);\n-        scroll.setContent(group);\n-\n-        updateWrap(wrap.isSelected());\n-\n-        if (showChars.isSelected()) {\n-            Group g = ShowCharacterRuns.createFor(control);\n-            group.getChildren().add(g);\n+    private void updateShowCharacters() {\n+        if (showChars.getValue()) {\n+            ShowCharacterRuns.createFor(text);\n+        } else {\n+            ShowCharacterRuns.remove(text);\n@@ -159,11 +118,0 @@\n-\n-        control.addEventHandler(MouseEvent.MOUSE_PRESSED, (ev) -> {\n-            PickResult p = ev.getPickResult();\n-            \/\/System.out.println(p);\n-        });\n-\n-        control.addEventHandler(MouseEvent.MOUSE_CLICKED, (ev) -> {\n-            if(ev.isShortcutDown()) {\n-                showCaretShape(new Point2D(ev.getX(), ev.getY()));\n-            }\n-        });\n@@ -172,3 +120,3 @@\n-    private void updateWrap(boolean on) {\n-        if (on) {\n-            control.wrappingWidthProperty().bind(scroll.viewportBoundsProperty().map((b) -> b.getWidth()));\n+    private void updateWrap() {\n+        if (wrap.getValue()) {\n+            text.wrappingWidthProperty().bind(scroll.viewportBoundsProperty().map((b) -> b.getWidth()));\n@@ -176,2 +124,2 @@\n-            control.wrappingWidthProperty().unbind();\n-            control.setWrappingWidth(0);\n+            text.wrappingWidthProperty().unbind();\n+            text.setWrappingWidth(0);\n@@ -181,5 +129,4 @@\n-    private void showCaretShape(Point2D p) {\n-        HitInfo h = control.hitTest(p);\n-        System.out.println(\"hit=\" + h);\n-        PathElement[] pe = control.caretShape(h.getCharIndex(), h.isLeading());\n-        caretPath.getElements().setAll(pe);\n+    private void handleMouseEvent(MouseEvent ev) {\n+        Point2D p = new Point2D(ev.getX(), ev.getY());\n+        HitInfo h = text.hitTest(p);\n+        hitInfo.setText(String.valueOf(h));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextPage.java","additions":66,"deletions":119,"binary":false,"changes":185,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import java.util.function.Supplier;\n+import javafx.beans.property.ObjectProperty;\n@@ -29,1 +29,0 @@\n-import javafx.scene.control.CheckBox;\n@@ -33,0 +32,1 @@\n+import javafx.scene.control.skin.TitledPaneSkin;\n@@ -35,2 +35,4 @@\n-import com.oracle.tools.fx.monkey.util.FX;\n-import com.oracle.tools.fx.monkey.util.ItemSelector;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.ObjectOption;\n+import com.oracle.tools.fx.monkey.sheets.LabeledPropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n@@ -38,1 +40,0 @@\n-import com.oracle.tools.fx.monkey.util.Templates;\n@@ -40,1 +41,0 @@\n-import com.oracle.tools.fx.monkey.util.TextSelector;\n@@ -43,1 +43,1 @@\n- * TitledPane Page\n+ * TitledPane Page.\n@@ -45,4 +45,1 @@\n-public class TitledPanePage extends TestPaneBase {\n-    private final TextSelector textSelector;\n-    private final ItemSelector<Supplier<Node>> contentSelector;\n-    private final CheckBox snap;\n+public class TitledPanePage extends TestPaneBase implements HasSkinnable {\n@@ -52,21 +49,1 @@\n-        FX.name(this, \"TitledPane\");\n-\n-        textSelector = TextSelector.fromPairs(\n-            \"textSelector\",\n-            (t) -> update(),\n-            Templates.multiLineTextPairs()\n-        );\n-        textSelector.removeChoice(\"Writing Systems\");\n-\n-        contentSelector = new ItemSelector<Supplier<Node>>(\n-            \"contentSelector\",\n-            (g) -> update(),\n-            new Object[] {\n-                \"null\", null,\n-                \"AnchorPane\", mk(() -> makeAnchorPane()),\n-                \"Label\", mk(() -> new Label(\"Label\"))\n-            }\n-        );\n-\n-        snap = new CheckBox(\"snap\");\n-        FX.name(snap, \"snap\");\n+        super(\"TitledPane\");\n@@ -76,2 +53,0 @@\n-        snap.selectedProperty().bindBidirectional(control.snapToPixelProperty());\n-\n@@ -79,5 +54,6 @@\n-        op.label(\"Text:\");\n-        op.option(textSelector.node());\n-        op.label(\"Content:\");\n-        op.option(contentSelector.node());\n-        op.option(snap);\n+        op.section(\"TitledPane\");\n+        op.option(new BooleanOption(\"animated\", \"animated\", control.animatedProperty()));\n+        op.option(new BooleanOption(\"collapsible\", \"collapsible\", control.collapsibleProperty()));\n+        op.option(\"Content:\", createContentOptions(\"content\", control.contentProperty()));\n+        op.option(new BooleanOption(\"expanded\", \"expanded\", control.expandedProperty()));\n+        LabeledPropertySheet.appendTo(op, \"Labeled\", false, control);\n@@ -87,10 +63,0 @@\n-\n-        update();\n-    }\n-\n-    protected void update() {\n-        Supplier<Node> gen = contentSelector.getSelectedItem();\n-        Node n = (gen == null) ? null : gen.get();\n-\n-        control.setText(textSelector.getSelectedText());\n-        control.setContent(n);\n@@ -99,5 +65,1 @@\n-    protected Supplier<Node> mk(Supplier<Node> gen) {\n-        return gen;\n-    }\n-\n-    protected Node makeAnchorPane() {\n+    private Node makeAnchorPane() {\n@@ -112,0 +74,19 @@\n+\n+    private Node createContentOptions(String name, ObjectProperty<Node> p) {\n+        ObjectOption<Node> s = new ObjectOption<>(name, p);\n+        s.addChoiceSupplier(\"Label\", () -> new Label(\"Label\"));\n+        s.addChoiceSupplier(\"AnchorPane\", () -> makeAnchorPane());\n+        s.addChoiceSupplier(\"<null>\", () -> null);\n+        s.selectFirst();\n+        return s;\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new TitledPaneSkin(control));\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TitledPanePage.java","additions":36,"deletions":55,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -0,0 +1,175 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.util.List;\n+import javafx.beans.property.Property;\n+import javafx.collections.ObservableList;\n+import javafx.geometry.Orientation;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonBase;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.SplitMenuButton;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TextInputControl;\n+import javafx.scene.control.ToolBar;\n+import javafx.scene.layout.Region;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.sheets.ControlPropertySheet;\n+import com.oracle.tools.fx.monkey.util.EnterTextDialog;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.ObjectSelector;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import com.oracle.tools.fx.monkey.util.Utils;\n+\n+\/**\n+ * ToolBar Page.\n+ *\/\n+public class ToolBarPage extends TestPaneBase {\n+    private final ToolBar control;\n+    private int seq;\n+\n+    public ToolBarPage() {\n+        super(\"ToolBarPage\");\n+\n+        control = new ToolBar();\n+\n+        SplitMenuButton addButton = new SplitMenuButton(\n+            FX.menuItem(\"Button\", () -> add(button())),\n+            FX.menuItem(\"Label\", () -> add(label(\"Label\"))),\n+            FX.menuItem(\"TextField\", () -> add(textField(20)))\n+        );\n+        addButton.setText(\"Add\");\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"ToolBar\");\n+        op.option(\"Items:\", createItemsOptions(\"items\", control.getItems()));\n+        op.option(Utils.buttons(addButton));\n+        op.option(\"Orientation:\", new EnumOption<>(\"orientation\", Orientation.class, control.orientationProperty()));\n+        \/\/ TODO this control needs spacing property (in the skin)\n+        ControlPropertySheet.appendTo(op, control);\n+\n+        setContent(control);\n+        setOptions(op);\n+    }\n+\n+    private void add(Node n) {\n+        control.getItems().add(n);\n+    }\n+\n+    private Node createItemsOptions(String name, ObservableList<Node> items) {\n+        ObjectSelector<List<Node>> s = new ObjectSelector<>(name, (v) -> {\n+            items.setAll(v);\n+        });\n+        s.addChoiceSupplier(\"Buttons\", () -> {\n+            return List.of(\n+                button(),\n+                button(),\n+                button(),\n+                button(),\n+                button(),\n+                button(),\n+                button(),\n+                button()\n+            );\n+        });\n+        s.addChoiceSupplier(\"Mixed\", () -> {\n+            return List.of(\n+                button(),\n+                label(\"Find:\"),\n+                textField(20),\n+                button(),\n+                button(),\n+                button(),\n+                button(),\n+                button(),\n+                button(),\n+                button()\n+            );\n+        });\n+        s.addChoice(\"<empty>\", List.of());\n+        s.selectFirst();\n+        return s;\n+    }\n+\n+    private Node button() {\n+        Button n = new Button(\"Button \" + (++seq));\n+        setContextMenu(n);\n+        return n;\n+    }\n+\n+    private Node label(String text) {\n+        Label n = new Label(text);\n+        setContextMenu(n);\n+        return n;\n+    }\n+\n+    private Node textField(int cols) {\n+        TextField n = new TextField();\n+        setContextMenu(n);\n+        n.setPrefColumnCount(cols);\n+        return n;\n+    }\n+\n+    private Property<String> getTextProperty(Node n) {\n+        if(n instanceof Label label) {\n+            return label.textProperty();\n+        } else if(n instanceof ButtonBase b) {\n+            return b.textProperty();\n+        } else if(n instanceof TextInputControl c) {\n+            return c.textProperty();\n+        }\n+        return null;\n+    }\n+\n+    private void setContextMenu(Region n) {\n+        n.setOnContextMenuRequested((ev) -> {\n+            ContextMenu m = new ContextMenu();\n+            FX.item(m, \"Remove\", () -> {\n+                control.getItems().remove(n);\n+            });\n+\n+            FX.separator(m);\n+\n+            FX.item(m, \"Edit Text\", EnterTextDialog.getRunnable(n, getTextProperty(n)));\n+\n+            FX.separator(m);\n+\n+            FX.item(m, \"Pref(50)\", () -> {\n+                n.setPrefWidth(50);\n+            });\n+            FX.item(m, \"Pref(200)\", () -> {\n+                n.setPrefWidth(200);\n+            });\n+            FX.item(m, \"Pref(500)\", () -> {\n+                n.setPrefWidth(500);\n+            });\n+            m.show(n, ev.getScreenX(), ev.getScreenY());\n+        });\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ToolBarPage.java","additions":175,"deletions":0,"binary":false,"changes":175,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.geometry.Pos;\n+import javafx.scene.Node;\n+import javafx.scene.control.ContentDisplay;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.OverrunStyle;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.paint.Color;\n+import javafx.scene.text.TextAlignment;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.DoubleSpinner;\n+import com.oracle.tools.fx.monkey.options.DurationOption;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.ObjectOption;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n+import com.oracle.tools.fx.monkey.util.ImageTools;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * Tooltip Page.\n+ *\/\n+public class TooltipPage extends TestPaneBase {\n+    private final Tooltip control; \/\/ TODO not a control, but a PopupWindow\n+\n+    public TooltipPage() {\n+        super(\"TooltipPage\");\n+\n+        control = new Tooltip(\"This is a tooltip with some default text, to be settable later.\");\n+\n+        ObjectOption<Node> graphic = new ObjectOption<>(\"graphic\", control.graphicProperty());\n+        graphic.addChoice(\"<null>\", null);\n+        graphic.addChoice(\"Image\", ImageTools.createImageView(Color.RED, 256, 256));\n+        graphic.addChoiceSupplier(\"Interactive Content\", this::createInteractiveContent);\n+\n+        Label content = new Label(\"Hover to show the tooltip\");\n+        content.setMaxSize(Double.MAX_VALUE, Double.MAX_VALUE);\n+        Tooltip.install(content, control);\n+        content.setAlignment(Pos.CENTER);\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"Tooltip\");\n+        op.option(\"Content Display:\", new EnumOption<>(\"contentDisplay\", ContentDisplay.class, control.contentDisplayProperty()));\n+        op.option(\"Font: TODO\", null); \/\/ TODO font\n+        op.option(\"Graphic:\", graphic);\n+        op.option(\"Graphic Text Gap:\", new DoubleSpinner(\"graphicTextGap\", control.graphicTextGapProperty(), 0, 100, 0.1));\n+        op.option(\"Hide Delay:\", new DurationOption(\"hideDelay\", control.hideDelayProperty()));\n+        op.option(\"Show Delay:\", new DurationOption(\"showDelay\", control.showDelayProperty()));\n+        op.option(\"Show Duration:\", new DurationOption(\"showDuration\", control.showDurationProperty()));\n+        op.option(\"Text:\", Options.textOption(\"text\", true, true, control.textProperty()));\n+        op.option(\"Text Alignment:\", new EnumOption<>(\"textAlignment\", TextAlignment.class, control.textAlignmentProperty()));\n+        op.option(\"Text Overrun:\", new EnumOption<>(\"textOverrun\", OverrunStyle.class, control.textOverrunProperty()));\n+        op.option(new BooleanOption(\"wrapText\", \"wrap text\", control.wrapTextProperty()));\n+\n+        \/\/ TODO popup window\n+\n+        setContent(new BorderPane(content));\n+        setOptions(op);\n+    }\n+\n+    \/\/ TODO tooltip cannot be interactive: the default behavior is to move it away from underneath the mouse pointer!\n+    private Node createInteractiveContent() {\n+        boolean autoHide = control.isAutoHide();\n+        control.setAutoHide(false);\n+\n+        TextField f = new TextField();\n+        return f;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TooltipPage.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,6 @@\n-import java.util.function.Consumer;\n-import javafx.beans.property.SimpleStringProperty;\n+import java.util.function.Supplier;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.Node;\n@@ -31,2 +35,0 @@\n-import javafx.scene.control.CheckBox;\n-import javafx.scene.control.ComboBox;\n@@ -35,0 +37,1 @@\n+import javafx.scene.control.SplitMenuButton;\n@@ -37,1 +40,1 @@\n-import javafx.scene.control.TreeTableCell;\n+import javafx.scene.control.TreeSortMode;\n@@ -39,0 +42,1 @@\n+import javafx.scene.control.TreeTableRow;\n@@ -43,2 +47,1 @@\n-import javafx.scene.layout.BorderPane;\n-import javafx.scene.layout.Pane;\n+import javafx.scene.layout.Background;\n@@ -46,2 +49,0 @@\n-import javafx.scene.shape.Rectangle;\n-import javafx.scene.text.Text;\n@@ -49,0 +50,7 @@\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.ObjectOption;\n+import com.oracle.tools.fx.monkey.sheets.ControlPropertySheet;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n+import com.oracle.tools.fx.monkey.util.ColumnBuilder;\n+import com.oracle.tools.fx.monkey.util.DataRow;\n@@ -51,1 +59,1 @@\n-import com.oracle.tools.fx.monkey.util.ItemSelector;\n+import com.oracle.tools.fx.monkey.util.ObjectSelector;\n@@ -55,0 +63,1 @@\n+import com.oracle.tools.fx.monkey.util.Utils;\n@@ -57,1 +66,1 @@\n- * TreeTableView page\n+ * TreeTableView Page.\n@@ -60,84 +69,1 @@\n-    enum Data {\n-        \/\/CELL_TYPES(\"various cell types\"), \/\/ FIX\n-        PREF(\"pref only\"),\n-        VARIABLE(\"variable cell height\"),\n-        ALL(\"all set: min, pref, max\"),\n-        EMPTY(\"empty with pref\"),\n-        MIN_WIDTH(\"min width\"),\n-        MAX_WIDTH(\"max width\"),\n-        MIN_WIDTH2(\"min width (middle)\"),\n-        MAX_WIDTH2(\"max width (middle)\"),\n-        MIN_WIDTH3(\"min width (beginning)\"),\n-        MAX_WIDTH3(\"max width (beginning)\"),\n-        FIXED_MIDDLE(\"fixed in the middle\"),\n-        ALL_FIXED(\"all fixed\"),\n-        ALL_MAX(\"all with maximum width\"),\n-        MIN_IN_CENTER(\"min widths set in middle columns\"),\n-        MAX_IN_CENTER(\"max widths set in middle columns\"),\n-        NO_NESTED(\"no nested columns\"),\n-        NESTED(\"nested columns\"),\n-        THOUSAND(\"1,000 rows\"),\n-        MILLION(\"10,000,000 rows\"),\n-        MANY_COLUMNS(\"many columns\"),\n-        MANY_COLUMNS_SAME(\"many columns, same pref\");\n-\n-        private final String text;\n-        Data(String text) { this.text = text; }\n-        public String toString() { return text; }\n-    }\n-\n-    public enum ResizePolicy {\n-        AUTO_RESIZE_FLEX_NEXT_COLUMN,\n-        AUTO_RESIZE_FLEX_LAST_COLUMN,\n-        AUTO_RESIZE_NEXT_COLUMN,\n-        AUTO_RESIZE_SUBSEQUENT_COLUMNS,\n-        AUTO_RESIZE_LAST_COLUMN,\n-        AUTO_RESIZE_ALL_COLUMNS,\n-        UNCONSTRAINED_RESIZE_POLICY,\n-        CONSTRAINED_RESIZE_POLICY,\n-        USER_DEFINED_EQUAL_WIDTHS,\n-    }\n-\n-    public enum Selection {\n-        SINGLE_ROW(\"single row selection\"),\n-        MULTIPLE_ROW(\"multiple row selection\"),\n-        SINGLE_CELL(\"single cell selection\"),\n-        MULTIPLE_CELL(\"multiple cell selection\"),\n-        NULL(\"null selection model\");\n-\n-        private final String text;\n-        Selection(String text) { this.text = text; }\n-        public String toString() { return text; }\n-    }\n-\n-    public enum Cmd {\n-        ROWS,\n-        COL,\n-        MIN,\n-        PREF,\n-        MAX,\n-        COMBINE,\n-        COL_WITH_GRAPHIC,\n-\/\/        COL_CHECKBOX,\n-\/\/        COL_CHOICE_BOX,\n-\/\/        COL_COMBO_BOX,\n-\/\/        COL_TEXT_FIELD,\n-    }\n-\n-    private enum Cells {\n-        DEFAULT,\n-        EDITABLE_TEXT_FIELD,\n-    }\n-\n-    private final ComboBox<Data> dataSelector;\n-    private final ComboBox<ResizePolicy> policySelector;\n-    private final ComboBox<Selection> selectionSelector;\n-    private final CheckBox nullFocusModel;\n-    private final CheckBox addGraphics;\n-    private final CheckBox addSubNodes;\n-    private final ItemSelector<Double> fixedSize;\n-    private final CheckBox menuButtonVisible;\n-    private final CheckBox editable;\n-    private final ComboBox<Cells> cellFactorySelector;\n-    private TreeTableView<String> control;\n-    private Callback<TreeTableColumn<String, String>, TreeTableCell<String, String>> defaultCellFactory;\n+    private final TreeTableView<DataRow> control;\n@@ -146,18 +72,1 @@\n-        FX.name(this, \"TreeTableViewPage\");\n-\n-        \/\/ selector\n-        dataSelector = new ComboBox<>();\n-        FX.name(dataSelector, \"dataSelector\");\n-        dataSelector.getItems().addAll(Data.values());\n-        dataSelector.setEditable(false);\n-        onChange(dataSelector, false, () -> {\n-            updatePane();\n-        });\n-\n-        policySelector = new ComboBox<>();\n-        FX.name(policySelector, \"policySelector\");\n-        policySelector.getItems().addAll(ResizePolicy.values());\n-        policySelector.setEditable(false);\n-        onChange(policySelector, false, () -> {\n-            updatePane();\n-        });\n+        super(\"TreeTableViewPage\");\n@@ -165,13 +74,1 @@\n-        selectionSelector = new ComboBox<>();\n-        FX.name(selectionSelector, \"selectionSelector\");\n-        selectionSelector.getItems().addAll(Selection.values());\n-        selectionSelector.setEditable(false);\n-        onChange(selectionSelector, false, () -> {\n-            updatePane();\n-        });\n-\n-        nullFocusModel = new CheckBox(\"null focus model\");\n-        FX.name(nullFocusModel, \"nullFocusModel\");\n-        onChange(nullFocusModel, false, () -> {\n-            updatePane();\n-        });\n+        control = new TreeTableView<>();\n@@ -179,5 +76,2 @@\n-        addGraphics = new CheckBox(\"add graphics\");\n-        addGraphics.setId(\"addGraphics\");\n-        onChange(addGraphics, false, () -> {\n-            updatePane();\n-        });\n+        Button addDataItemButton = FX.button(\"Add Data Item\", this::addDataItem);\n+        addDataItemButton.setDisable(true); \/\/ FIX\n@@ -185,8 +79,1 @@\n-        addSubNodes = new CheckBox(\"add sub-nodes\");\n-        addSubNodes.setId(\"addSubNodes\");\n-        onChange(addSubNodes, false, () -> {\n-            updatePane();\n-        });\n-\n-        Button clearButton = new Button(\"Clear Items\");\n-        clearButton.setOnAction((ev) -> {\n+        Button clearDataItemsButton = FX.button(\"Clear Data Items\", () -> {\n@@ -197,14 +84,4 @@\n-        Button refresh = new Button(\"Refresh\");\n-        refresh.setOnAction((ev) -> {\n-            control.refresh();\n-        });\n-\n-        fixedSize = new ItemSelector<Double>(\n-            \"fixedSize\",\n-            (x) -> {\n-                control.setFixedCellSize(x);\n-            },\n-            \"<none>\", 0.0,\n-            \"18\", 18.0,\n-            \"24\", 24.0,\n-            \"66\", 66.0\n+        SplitMenuButton addColumnButton = new SplitMenuButton(\n+            FX.menuItem(\"at the beginning\", () -> addColumn(0)),\n+            FX.menuItem(\"in the middle\", () -> addColumn(1)),\n+            FX.menuItem(\"at the end\", () -> addColumn(2))\n@@ -212,0 +89,1 @@\n+        addColumnButton.setText(\"Add Column\");\n@@ -213,2 +91,7 @@\n-        menuButtonVisible = new CheckBox(\"menu button visible\");\n-        FX.name(menuButtonVisible, \"menuButton\");\n+        SplitMenuButton removeColumnButton = new SplitMenuButton(\n+            FX.menuItem(\"at the beginning\", () -> removeColumn(0)),\n+            FX.menuItem(\"in the middle\", () -> removeColumn(1)),\n+            FX.menuItem(\"at the end\", () -> removeColumn(2)),\n+            FX.menuItem(\"all\", () -> removeAllColumns())\n+        );\n+        removeColumnButton.setText(\"Remove Column\");\n@@ -216,12 +99,2 @@\n-        editable = new CheckBox(\"editable\");\n-        editable.setOnAction((ev) -> {\n-            updateEditable();\n-        });\n-        FX.name(editable, \"editable\");\n-\n-        cellFactorySelector = new ComboBox<>();\n-        FX.name(cellFactorySelector, \"cellSelector\");\n-        cellFactorySelector.getItems().addAll(Cells.values());\n-        cellFactorySelector.setEditable(false);\n-        cellFactorySelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            updatePane();\n+        Button refresh = FX.button(\"Refresh\", () -> {\n+            control.refresh();\n@@ -230,2 +103,0 @@\n-        \/\/ layout\n-\n@@ -233,13 +104,24 @@\n-        op.label(\"Data:\");\n-        op.option(dataSelector);\n-        op.option(clearButton);\n-        op.option(editable);\n-        op.label(\"Column Resize Policy:\");\n-        op.option(policySelector);\n-        op.label(\"Selection Model:\");\n-        op.option(selectionSelector);\n-        op.option(nullFocusModel);\n-        op.label(\"Fixed Cell Size:\");\n-        op.option(fixedSize.node());\n-        op.label(\"Cell Factory:\");\n-        op.option(cellFactorySelector);\n+        op.section(\"TreeTableView\");\n+        op.option(\"Columns:\", createColumnsSelector(\"columns\", control.getColumns()));\n+        op.option(Utils.buttons(addColumnButton, removeColumnButton));\n+        op.option(\"Column Resize Policy:\", createColumnResizePolicy(\"columnResizePolicy\", control.columnResizePolicyProperty()));\n+        op.option(new BooleanOption(\"editable\", \"editable\", control.editableProperty()));\n+        op.option(\"Fixed Cell Size:\", Options.fixedSizeOption(\"fixedCellSize\", control.fixedCellSizeProperty()));\n+        op.option(\"Focus Model:\", createFocusModelOptions(\"focusModel\", control.focusModelProperty()));\n+        op.option(\"Placeholder:\", Options.placeholderNode(\"placeholder\", control.placeholderProperty()));\n+        op.option(\"Root:\", createRootOptions(\"root\", control.rootProperty()));\n+        op.option(Utils.buttons(addDataItemButton, clearDataItemsButton));\n+        op.option(\"Row Factory:\", createRowFactoryOptions(\"rowFactory\", control.rowFactoryProperty()));\n+        op.option(\"Selection Model:\", createSelectionModelOptions(\"selectionModel\"));\n+        op.option(new BooleanOption(\"showRoot\", \"show root\", control.showRootProperty()));\n+        op.option(\"Sort Mode:\", new EnumOption(\"sortMode\", TreeSortMode.class, control.sortModeProperty()));\n+        op.option(\"Sort Policy: TODO\", null); \/\/ TODO\n+        op.option(new BooleanOption(\"tableMenuButtonVisible\", \"table menu button visible\", control.tableMenuButtonVisibleProperty()));\n+        op.option(\"Tree Column: TODO\", null); \/\/ TODO\n+        ControlPropertySheet.appendTo(op, control);\n+\n+        \/\/ TODO op.option(\"Cell Factory:\", cellFactorySelector);\n+        \/\/op.option(addGraphics);\n+        \/\/op.option(addSubNodes);\n+\n+        op.separator();\n@@ -247,4 +129,0 @@\n-        op.option(menuButtonVisible);\n-        op.option(addGraphics);\n-        op.option(addSubNodes);\n-        setOptions(op);\n@@ -252,20 +130,2 @@\n-        dataSelector.getSelectionModel().selectFirst();\n-        policySelector.getSelectionModel().selectFirst();\n-        selectionSelector.getSelectionModel().select(Selection.MULTIPLE_CELL);\n-    }\n-\n-    protected Callback<ResizeFeatures, Boolean> wrap(Callback<ResizeFeatures, Boolean> policy) {\n-        return new Callback<ResizeFeatures, Boolean>() {\n-            @Override\n-            public Boolean call(ResizeFeatures f) {\n-                Boolean rv = policy.call(f);\n-                int ix = f.getTable().getColumns().indexOf(f.getColumn());\n-                System.out.println(\n-                    \"col=\" + (ix < 0 ? f.getColumn() : ix) +\n-                    \" delta=\" + f.getDelta() +\n-                    \" w=\" + f.getTable().getWidth() +\n-                    \" rv=\" + rv\n-                );\n-                return rv;\n-            }\n-        };\n+        setContent(control);\n+        setOptions(op);\n@@ -274,7 +134,17 @@\n-    protected String describe(TreeTableColumn c) {\n-        StringBuilder sb = new StringBuilder();\n-        if (c.getMinWidth() != 10.0) {\n-            sb.append(\"m\");\n-        }\n-        if (c.getPrefWidth() != 80.0) {\n-            sb.append(\"p\");\n+    private void addColumn(int where) {\n+        TreeTableColumn<DataRow, Object> c = newColumn();\n+        c.setText(\"C\" + System.currentTimeMillis());\n+\n+        int ct = control.getColumns().size();\n+        int ix;\n+        switch (where) {\n+        case 0:\n+            ix = 0;\n+            break;\n+        case 1:\n+            ix = ct \/ 2;\n+            break;\n+        case 2:\n+        default:\n+            ix = ct;\n+            break;\n@@ -282,2 +152,4 @@\n-        if (c.getMaxWidth() != 5000.0) {\n-            sb.append(\"X\");\n+        if ((ct == 0) || (ix >= ct)) {\n+            control.getColumns().add(c);\n+        } else {\n+            control.getColumns().add(ix, c);\n@@ -285,1 +157,0 @@\n-        return sb.toString();\n@@ -288,20 +159,11 @@\n-    protected Callback<ResizeFeatures, Boolean> createPolicy(ResizePolicy p) {\n-        switch (p) {\n-        case AUTO_RESIZE_FLEX_NEXT_COLUMN:\n-            return TreeTableView.CONSTRAINED_RESIZE_POLICY_FLEX_NEXT_COLUMN;\n-        case AUTO_RESIZE_FLEX_LAST_COLUMN:\n-            return TreeTableView.CONSTRAINED_RESIZE_POLICY_FLEX_LAST_COLUMN;\n-        case AUTO_RESIZE_ALL_COLUMNS:\n-            return TreeTableView.CONSTRAINED_RESIZE_POLICY_ALL_COLUMNS;\n-        case AUTO_RESIZE_LAST_COLUMN:\n-            return TreeTableView.CONSTRAINED_RESIZE_POLICY_LAST_COLUMN;\n-        case AUTO_RESIZE_NEXT_COLUMN:\n-            return TreeTableView.CONSTRAINED_RESIZE_POLICY_NEXT_COLUMN;\n-        case AUTO_RESIZE_SUBSEQUENT_COLUMNS:\n-            return TreeTableView.CONSTRAINED_RESIZE_POLICY_SUBSEQUENT_COLUMNS;\n-        case CONSTRAINED_RESIZE_POLICY:\n-            return TreeTableView.CONSTRAINED_RESIZE_POLICY;\n-        case UNCONSTRAINED_RESIZE_POLICY:\n-            return TreeTableView.UNCONSTRAINED_RESIZE_POLICY;\n-        case USER_DEFINED_EQUAL_WIDTHS:\n-            return new UserDefinedResizePolicy();\n+    private void removeColumn(int where) {\n+        int ct = control.getColumns().size();\n+        int ix;\n+        switch (where) {\n+        case 0:\n+            ix = 0;\n+            break;\n+        case 1:\n+            ix = ct \/ 2;\n+            break;\n+        case 2:\n@@ -309,1 +171,2 @@\n-            throw new Error(\"?\" + p);\n+            ix = ct - 1;\n+            break;\n@@ -311,1 +174,0 @@\n-    }\n@@ -313,229 +175,2 @@\n-    protected Object[] createSpec(Data d) {\n-        switch (d) {\n-        case ALL:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL,\n-                Cmd.COL, Cmd.MIN, 20, Cmd.PREF, 20, Cmd.MAX, 20,\n-                Cmd.COL, Cmd.PREF, 200,\n-                Cmd.COL, Cmd.PREF, 300, Cmd.MAX, 400,\n-                Cmd.COL\n-            };\n-\/\/ FIX\n-\/\/        case CELL_TYPES:\n-\/\/            return new Object[] {\n-\/\/                Cmd.ROWS, 300,\n-\/\/                Cmd.COL,\n-\/\/                Cmd.COL_CHECKBOX,\n-\/\/                Cmd.COL_CHOICE_BOX,\n-\/\/                Cmd.COL_COMBO_BOX,\n-\/\/                Cmd.COL_TEXT_FIELD,\n-\/\/                Cmd.COL_WITH_GRAPHIC\n-\/\/            };\n-        case PREF:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL, Cmd.PREF, 100,\n-                Cmd.COL, Cmd.PREF, 200,\n-                Cmd.COL, Cmd.PREF, 300,\n-                Cmd.COL, Cmd.PREF, 400\n-            };\n-        case VARIABLE:\n-            return new Object[] {\n-                Cmd.ROWS, 10_000,\n-                Cmd.COL_WITH_GRAPHIC,\n-                Cmd.COL_WITH_GRAPHIC,\n-                Cmd.COL_WITH_GRAPHIC\n-            };\n-        case EMPTY:\n-            return new Object[] {\n-                Cmd.COL, Cmd.PREF, 100,\n-                Cmd.COL, Cmd.PREF, 200,\n-                Cmd.COL, Cmd.PREF, 300\n-            };\n-        case MIN_WIDTH:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL, Cmd.MIN, 300\n-            };\n-        case MAX_WIDTH:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL, Cmd.MAX, 100\n-            };\n-        case MIN_WIDTH2:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL, Cmd.MIN, 300,\n-                Cmd.COL\n-            };\n-        case MAX_WIDTH2:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL, Cmd.MAX, 100,\n-                Cmd.COL\n-            };\n-        case MIN_WIDTH3:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL, Cmd.MIN, 300,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL\n-            };\n-        case MAX_WIDTH3:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL, Cmd.MAX, 100,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL\n-            };\n-        case MIN_IN_CENTER:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL,\n-                Cmd.COL, Cmd.MIN, 20,\n-                Cmd.COL, Cmd.MIN, 30,\n-                Cmd.COL, Cmd.MIN, 40,\n-                Cmd.COL, Cmd.MIN, 50,\n-                Cmd.COL, Cmd.MIN, 60,\n-                Cmd.COL\n-            };\n-        case MAX_IN_CENTER:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL,\n-                Cmd.COL, Cmd.MAX, 20,\n-                Cmd.COL, Cmd.MAX, 30,\n-                Cmd.COL, Cmd.MAX, 40,\n-                Cmd.COL, Cmd.MAX, 50,\n-                Cmd.COL, Cmd.MAX, 60,\n-                Cmd.COL\n-            };\n-        case FIXED_MIDDLE:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL, Cmd.MIN, 100, Cmd.MAX, 100,\n-                Cmd.COL, Cmd.MIN, 100, Cmd.MAX, 100,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL\n-            };\n-        case ALL_FIXED:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL, Cmd.MIN, 50, Cmd.MAX, 50,\n-                Cmd.COL, Cmd.MIN, 50, Cmd.MAX, 50,\n-                Cmd.COL, Cmd.MIN, 50, Cmd.MAX, 50\n-            };\n-        case ALL_MAX:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL, Cmd.MAX, 50,\n-                Cmd.COL, Cmd.MAX, 50,\n-                Cmd.COL, Cmd.MAX, 50\n-            };\n-       case NO_NESTED:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL, Cmd.PREF, 100,\n-                Cmd.COL, Cmd.PREF, 200,\n-                Cmd.COL, Cmd.PREF, 300,\n-                Cmd.COL, Cmd.MIN, 100, Cmd.MAX, 100,\n-                Cmd.COL, Cmd.PREF, 100,\n-                Cmd.COL, Cmd.MIN, 100,\n-                Cmd.COL, Cmd.MAX, 100,\n-                Cmd.COL, Cmd.PREF, 400,\n-                Cmd.COL\n-            };\n-        case NESTED:\n-            return new Object[] {\n-                Cmd.ROWS, 3,\n-                Cmd.COL, Cmd.PREF, 100,\n-                Cmd.COL, Cmd.PREF, 200,\n-                Cmd.COL, Cmd.PREF, 300,\n-                Cmd.COL, Cmd.MIN, 100, Cmd.MAX, 100,\n-                Cmd.COL, Cmd.PREF, 100,\n-                Cmd.COL, Cmd.MIN, 100,\n-                Cmd.COL, Cmd.MAX, 100,\n-                Cmd.COL, Cmd.PREF, 400,\n-                Cmd.COL,\n-                Cmd.COMBINE, 0, 3,\n-                Cmd.COMBINE, 1, 2\n-            };\n-        case MANY_COLUMNS:\n-            return new Object[] {\n-                Cmd.ROWS, 300,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL\n-            };\n-        case MANY_COLUMNS_SAME:\n-            return new Object[] {\n-                Cmd.ROWS, 300,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30,\n-                Cmd.COL, Cmd.PREF, 30\n-            };\n-        case MILLION:\n-            return new Object[] {\n-                Cmd.ROWS, 10_000_000,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL\n-            };\n-        case THOUSAND:\n-            return new Object[] {\n-                Cmd.ROWS, 1_000,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL,\n-                Cmd.COL\n-            };\n-        default:\n-            throw new Error(\"?\" + d);\n+        if ((ct >= 0) && (ix < ct)) {\n+            control.getColumns().remove(ix);\n@@ -545,18 +180,2 @@\n-    protected void updatePane() {\n-        Data d = dataSelector.getSelectionModel().getSelectedItem();\n-        ResizePolicy p = policySelector.getSelectionModel().getSelectedItem();\n-        Object[] spec = createSpec(d);\n-\n-        Pane n = createPane(d, p, spec);\n-        setContent(n);\n-    }\n-\n-    protected void combineColumns(TreeTableView<String> t, int ix, int count, int name) {\n-        TreeTableColumn<String, ?> tc = new TreeTableColumn<>();\n-        tc.setText(\"N\" + name);\n-\n-        for (int i = 0; i < count; i++) {\n-            TreeTableColumn<String, ?> c = t.getColumns().remove(ix);\n-            tc.getColumns().add(c);\n-        }\n-        t.getColumns().add(ix, tc);\n+    private void removeAllColumns() {\n+        control.getColumns().clear();\n@@ -565,85 +184,9 @@\n-    protected Pane createPane(Data demo, ResizePolicy policy, Object[] spec) {\n-        if ((demo == null) || (spec == null) || (policy == null)) {\n-            return new BorderPane();\n-        }\n-\n-        boolean cellSelection = false;\n-        boolean nullSelectionModel = false;\n-        SelectionMode selectionMode = SelectionMode.SINGLE;\n-        Selection sel = selectionSelector.getSelectionModel().getSelectedItem();\n-        if (sel != null) {\n-            switch (sel) {\n-            case MULTIPLE_CELL:\n-                selectionMode = SelectionMode.MULTIPLE;\n-                cellSelection = true;\n-                break;\n-            case MULTIPLE_ROW:\n-                selectionMode = SelectionMode.MULTIPLE;\n-                break;\n-            case NULL:\n-                nullSelectionModel = true;\n-                break;\n-            case SINGLE_CELL:\n-                cellSelection = true;\n-                break;\n-            case SINGLE_ROW:\n-                break;\n-            default:\n-                throw new Error(\"?\" + sel);\n-            }\n-        }\n-\n-        control = new TreeTableView<>(new TreeItem<>(null));\n-        control.getSelectionModel().setCellSelectionEnabled(cellSelection);\n-        control.getSelectionModel().setSelectionMode(selectionMode);\n-        if (nullSelectionModel) {\n-            control.setSelectionModel(null);\n-        }\n-        if (nullFocusModel.isSelected()) {\n-            control.setFocusModel(null);\n-        }\n-        control.setFixedCellSize(fixedSize.getSelectedItem());\n-\n-        control.setTableMenuButtonVisible(menuButtonVisible.isSelected());\n-        menuButtonVisible.selectedProperty().bindBidirectional(control.tableMenuButtonVisibleProperty());\n-\n-        Callback<ResizeFeatures, Boolean> p = createPolicy(policy);\n-        control.setColumnResizePolicy(p);\n-\n-        TreeTableColumn<String, String> lastColumn = null;\n-        int id = 1;\n-\n-        for (int i = 0; i < spec.length;) {\n-            Object x = spec[i++];\n-            if (x instanceof Cmd cmd) {\n-                switch (cmd) {\n-                case COL:\n-                    lastColumn = makeColumn((c) -> {\n-                        c.setCellValueFactory((f) -> new SimpleStringProperty(describe(c)));\n-                    });\n-                    break;\n-                case COL_WITH_GRAPHIC:\n-                    lastColumn = makeColumn((c) -> {\n-                        c.setCellValueFactory((f) -> new SimpleStringProperty(describe(c)));\n-                        c.setCellFactory((r) -> {\n-                            return new TreeTableCell<>() {\n-                                @Override\n-                                protected void updateItem(String item, boolean empty) {\n-                                    super.updateItem(item, empty);\n-                                    if (empty) {\n-                                        setGraphic(null);\n-                                    } else {\n-                                        Text t = new Text(\"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n2\\n3\\n\");\n-                                        t.wrappingWidthProperty().bind(widthProperty());\n-                                        setGraphic(t);\n-                                    }\n-                                    setPrefHeight(USE_COMPUTED_SIZE);\n-                                }\n-                            };\n-                        });\n-                    });\n-                    break;\n-\/\/                case COL_CHECKBOX:\n-\/\/                    lastColumn = makeColumn((c) -> { });\n-\/\/                    break;\n-\/\/                case COL_CHOICE_BOX:\n+\/\/    protected Pane createPane(Data demo, ResizePolicy policy, Object[] spec) {\n+\/\/        TreeTableColumn<String, String> lastColumn = null;\n+\/\/        int id = 1;\n+\/\/\n+\/\/        for (int i = 0; i < spec.length;) {\n+\/\/            Object x = spec[i++];\n+\/\/            if (x instanceof Cmd cmd) {\n+\/\/                switch (cmd) {\n+\/\/                case COL_WITH_GRAPHIC:\n@@ -651,0 +194,17 @@\n+\/\/                        c.setCellValueFactory((f) -> new SimpleStringProperty(describe(c)));\n+\/\/                        c.setCellFactory((r) -> {\n+\/\/                            return new TreeTableCell<>() {\n+\/\/                                @Override\n+\/\/                                protected void updateItem(String item, boolean empty) {\n+\/\/                                    super.updateItem(item, empty);\n+\/\/                                    if (empty) {\n+\/\/                                        setGraphic(null);\n+\/\/                                    } else {\n+\/\/                                        Text t = new Text(\"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n2\\n3\\n\");\n+\/\/                                        t.wrappingWidthProperty().bind(widthProperty());\n+\/\/                                        setGraphic(t);\n+\/\/                                    }\n+\/\/                                    setPrefHeight(USE_COMPUTED_SIZE);\n+\/\/                                }\n+\/\/                            };\n+\/\/                        });\n@@ -652,101 +212,46 @@\n-\/\/                    break;\n-\/\/                case COL_COMBO_BOX:\n-\/\/                    lastColumn = makeColumn((c) -> {\n-\/\/                    });\n-\/\/                    break;\n-\/\/                case COL_TEXT_FIELD:\n-\/\/                    lastColumn = makeColumn((c) -> {\n-\/\/                    });\n-\/\/                    break;\n-                case MAX:\n-                    {\n-                        int w = (int)(spec[i++]);\n-                        lastColumn.setMaxWidth(w);\n-                    }\n-                    break;\n-                case MIN:\n-                    {\n-                        int w = (int)(spec[i++]);\n-                        lastColumn.setMinWidth(w);\n-                    }\n-                    break;\n-                case PREF:\n-                    {\n-                        int w = (int)(spec[i++]);\n-                        lastColumn.setPrefWidth(w);\n-                    }\n-                    break;\n-                case ROWS:\n-                    {\n-                        int n = (int)(spec[i++]);\n-                        TreeItem subNodeTreeItem = null;\n-                        for (int j = 0; j < n; j++) {\n-                            TreeItem treeItem = new TreeItem(newItem());\n-                            if (addSubNodes.isSelected()) {\n-                                subNodeTreeItem = new TreeItem(newItem());\n-                                treeItem.getChildren().add(subNodeTreeItem);\n-                            }\n-                            if (addGraphics.isSelected()) {\n-                                treeItem.setGraphic(new Rectangle(10, 10, Color.RED));\n-                                if (subNodeTreeItem != null) {\n-                                    subNodeTreeItem.setGraphic(new Rectangle(10, 10));\n-                                }\n-                            }\n-                            control.getRoot().getChildren().add(treeItem);\n-                        }\n-                    }\n-                    break;\n-                case COMBINE:\n-                    int ix = (int)(spec[i++]);\n-                    int ct = (int)(spec[i++]);\n-                    combineColumns(control, ix, ct, id++);\n-                    break;\n-                default:\n-                    throw new Error(\"?\" + cmd);\n-                }\n-            } else {\n-                throw new Error(\"?\" + x);\n-            }\n-        }\n-\n-        BorderPane bp = new BorderPane();\n-        bp.setCenter(control);\n-        return bp;\n-    }\n-\n-    protected TreeTableColumn<String, String> makeColumn(Consumer<TreeTableColumn<String, String>> updater) {\n-        TreeTableColumn<String, String> c = new TreeTableColumn<>();\n-        control.getColumns().add(c);\n-        c.setText(\"C\" + control.getColumns().size());\n-        updater.accept(c);\n-\n-        if (defaultCellFactory == null) {\n-            defaultCellFactory = c.getCellFactory();\n-        }\n-\n-        Cells t = cellFactorySelector.getSelectionModel().getSelectedItem();\n-        Callback<TreeTableColumn<String, String>, TreeTableCell<String, String>> f = getCellFactory(t);\n-        c.setCellFactory(f);\n-\n-        c.setOnEditCommit((ev) -> {\n-            if (\"update\".equals(ev.getNewValue())) {\n-                var item = ev.getRowValue();\n-                item.setValue(\"UPDATED!\");\n-                System.out.println(\"committing the value `UPDATED!`\");\n-            } else {\n-                System.out.println(\"discarding the new value: \" + ev.getNewValue());\n-            }\n-        });\n-\n-        return c;\n-    }\n-\n-    private Callback<TreeTableColumn<String, String>, TreeTableCell<String, String>> getCellFactory(Cells t) {\n-        if (t != null) {\n-            switch (t) {\n-            case EDITABLE_TEXT_FIELD:\n-                return TextFieldTreeTableCell.forTreeTableColumn();\n-            }\n-        }\n-        return defaultCellFactory;\n-    }\n+\/\/                case ROWS:\n+\/\/                    {\n+\/\/                        int n = (int)(spec[i++]);\n+\/\/                        TreeItem subNodeTreeItem = null;\n+\/\/                        for (int j = 0; j < n; j++) {\n+\/\/                            TreeItem treeItem = new TreeItem(newItem());\n+\/\/                            if (addSubNodes.isSelected()) {\n+\/\/                                subNodeTreeItem = new TreeItem(newItem());\n+\/\/                                treeItem.getChildren().add(subNodeTreeItem);\n+\/\/                            }\n+\/\/                            if (addGraphics.isSelected()) {\n+\/\/                                treeItem.setGraphic(new Rectangle(10, 10, Color.RED));\n+\/\/                                if (subNodeTreeItem != null) {\n+\/\/                                    subNodeTreeItem.setGraphic(new Rectangle(10, 10));\n+\/\/                                }\n+\/\/                            }\n+\/\/                            control.getRoot().getChildren().add(treeItem);\n+\/\/                        }\n+\/\/                    }\n+\n+\/\/    protected TreeTableColumn<String, String> makeColumn(Consumer<TreeTableColumn<String, String>> updater) {\n+\/\/        TreeTableColumn<String, String> c = new TreeTableColumn<>();\n+\/\/        control.getColumns().add(c);\n+\/\/        c.setText(\"C\" + control.getColumns().size());\n+\/\/        updater.accept(c);\n+\/\/\n+\/\/        if (defaultCellFactory == null) {\n+\/\/            defaultCellFactory = c.getCellFactory();\n+\/\/        }\n+\/\/\n+\/\/        Cells t = cellFactorySelector.getSelectionModel().getSelectedItem();\n+\/\/        Callback<TreeTableColumn<String, String>, TreeTableCell<String, String>> f = getCellFactory(t);\n+\/\/        c.setCellFactory(f);\n+\/\/\n+\/\/        c.setOnEditCommit((ev) -> {\n+\/\/            if (\"update\".equals(ev.getNewValue())) {\n+\/\/                var item = ev.getRowValue();\n+\/\/                item.setValue(\"UPDATED!\");\n+\/\/                System.out.println(\"committing the value `UPDATED!`\");\n+\/\/            } else {\n+\/\/                System.out.println(\"discarding the new value: \" + ev.getNewValue());\n+\/\/            }\n+\/\/        });\n+\/\/\n+\/\/        return c;\n+\/\/    }\n@@ -768,8 +273,0 @@\n-    protected void updateEditable() {\n-        boolean on = editable.isSelected();\n-        control.setEditable(on);\n-        if (on) {\n-            cellFactorySelector.getSelectionModel().select(Cells.EDITABLE_TEXT_FIELD);\n-        }\n-    }\n-\n@@ -782,2 +279,2 @@\n-        implements Callback<TreeTableView.ResizeFeatures, Boolean> {\n-\n+        implements Callback<TreeTableView.ResizeFeatures, Boolean>\n+    {\n@@ -798,0 +295,170 @@\n+\n+    private TreeTableColumn<DataRow, Object> newColumn() {\n+        TreeTableColumn<DataRow, Object> tc = new TreeTableColumn();\n+        tc.setCellFactory(TextFieldTreeTableCell.<DataRow, Object>forTreeTableColumn(DataRow.converter()));\n+        tc.setCellValueFactory((cdf) -> {\n+            Object v = cdf.getValue().getValue();\n+            if (v instanceof DataRow r) {\n+                return r.getValue(tc);\n+            }\n+            return new SimpleObjectProperty(v);\n+        });\n+        return tc;\n+    }\n+\n+    private ColumnBuilder<TreeTableColumn<DataRow, ?>> columnBuilder() {\n+        return new ColumnBuilder<>(this::newColumn);\n+    }\n+\n+    private Node createColumnsSelector(String name, ObservableList<TreeTableColumn<DataRow, ?>> columns) {\n+        ObjectSelector<List<TreeTableColumn<DataRow, ?>>> s = new ObjectSelector<>(name, (v) -> {\n+            columns.setAll(v);\n+        });\n+        s.addChoice(\"With All Constraints\", columnBuilder().\n+            col(\"Fixed\").min(70).max(70).\n+            col(\"MinPrefMax\").min(50).pref(200).max(300).\n+            col(\"Min\").min(50).\n+            col(\"Pref\").pref(200).\n+            col(\"Max\").max(150).\n+            col(\"Std\").\n+            asList()\n+        );\n+        s.addChoiceSupplier(\"20 Equal\", () -> {\n+            var cs = columnBuilder();\n+            for(int i=1; i<20; i++) {\n+                cs.col(\"C\" + i);\n+            }\n+            return cs.asList();\n+        });\n+        s.addChoiceSupplier(\"20 Equal, Pref=30\", () -> {\n+            var cs = columnBuilder();\n+            for(int i=1; i<20; i++) {\n+                cs.col(\"C\" + i).pref(30);\n+            }\n+            return cs.asList();\n+        });\n+        s.addChoice(\"Fixed in the Middle\", columnBuilder().\n+            col(\"C1\").\n+            col(\"C2\").\n+            col(\"C3\").\n+            col(\"Fixed4\").fixed(100).\n+            col(\"Fixed5\").fixed(100).\n+            col(\"Fixed6\").fixed(100).\n+            col(\"C7\").\n+            col(\"C8\").\n+            col(\"C9\").\n+            asList()\n+        );\n+        s.addChoice(\"5 Fixed\", columnBuilder().\n+            col(\"Fixed1\").fixed(50).\n+            col(\"Fixed2\").fixed(50).\n+            col(\"Fixed3\").fixed(50).\n+            col(\"Fixed4\").fixed(50).\n+            col(\"Fixed5\").fixed(50).\n+            asList()\n+        );\n+        s.addChoice(\"5 Max\", columnBuilder().\n+            col(\"Max1\").max(90).\n+            col(\"Max2\").max(90).\n+            col(\"Max3\").max(90).\n+            col(\"Max4\").max(90).\n+            col(\"Max5\").max(90).\n+            asList()\n+        );\n+        s.addChoice(\"Nested Columns\", columnBuilder().\n+            col(\"Pref100\").pref(100).\n+            col(\"Pref200\").pref(200).\n+            col(\"Pref300\").pref(300).\n+            col(\"Fixed100\").fixed(100).\n+            col(\"Pref100\").pref(100).\n+            col(\"Min100\").min(100).\n+            col(\"Max100\").max(100).\n+            col(\"Pref400\").pref(400).\n+            col(\"C\").\n+            combine(0, 3).\n+            combine(1, 2).\n+            asList()\n+        );\n+        s.addChoice(\"<empty>\", FXCollections.observableArrayList());\n+        return s;\n+    }\n+\n+    private Node createColumnResizePolicy(String name, ObjectProperty<Callback<ResizeFeatures, Boolean>> p) {\n+        ObjectOption<Callback<ResizeFeatures, Boolean>> s = new ObjectOption<>(name, p);\n+        s.addChoice(\"AUTO_RESIZE_FLEX_NEXT_COLUMN\", TreeTableView.CONSTRAINED_RESIZE_POLICY_FLEX_NEXT_COLUMN);\n+        s.addChoice(\"AUTO_RESIZE_FLEX_LAST_COLUMN\", TreeTableView.CONSTRAINED_RESIZE_POLICY_FLEX_LAST_COLUMN);\n+        s.addChoice(\"AUTO_RESIZE_ALL_COLUMNS\", TreeTableView.CONSTRAINED_RESIZE_POLICY_ALL_COLUMNS);\n+        s.addChoice(\"AUTO_RESIZE_LAST_COLUMN\", TreeTableView.CONSTRAINED_RESIZE_POLICY_LAST_COLUMN);\n+        s.addChoice(\"AUTO_RESIZE_NEXT_COLUMN\", TreeTableView.CONSTRAINED_RESIZE_POLICY_NEXT_COLUMN);\n+        s.addChoice(\"AUTO_RESIZE_SUBSEQUENT_COLUMNS\", TreeTableView.CONSTRAINED_RESIZE_POLICY_SUBSEQUENT_COLUMNS);\n+        s.addChoice(\"UNCONSTRAINED_RESIZE_POLICY\", TreeTableView.UNCONSTRAINED_RESIZE_POLICY);\n+        s.addChoice(\"user defined, equal width\", new UserDefinedResizePolicy());\n+        return s;\n+    }\n+\n+    private Node createFocusModelOptions(String name, ObjectProperty<TreeTableView.TreeTableViewFocusModel<DataRow>> p) {\n+        ObjectOption<TreeTableView.TreeTableViewFocusModel<DataRow>> s = new ObjectOption<>(name, p);\n+        s.addChoiceSupplier(\"<default>\", () -> new TreeTableView.TreeTableViewFocusModel(control));\n+        s.addChoice(\"<null>\", null);\n+        return s;\n+    }\n+\n+    private Callback<TreeTableView<DataRow>, TreeTableRow<DataRow>> createRowFactory(Color c) {\n+        return (v) -> {\n+            TreeTableRow<DataRow> row = new TreeTableRow<>();\n+            row.setBackground(Background.fill(c));\n+            return row;\n+        };\n+    }\n+\n+    private Node createRowFactoryOptions(String name, ObjectProperty<Callback<TreeTableView<DataRow>, TreeTableRow<DataRow>>> p) {\n+        Callback<TreeTableView<DataRow>, TreeTableRow<DataRow>> defaultValue = p.get();\n+        ObjectOption<Callback<TreeTableView<DataRow>, TreeTableRow<DataRow>>> s = new ObjectOption<>(name, p);\n+        s.addChoice(\"<default>\", defaultValue);\n+        s.addChoice(\"Red Background\", createRowFactory(Color.RED));\n+        s.addChoice(\"Green Background\", createRowFactory(Color.GREEN));\n+        s.addChoice(\"<null>\", null);\n+        s.selectFirst();\n+        return s;\n+    }\n+\n+    private static record SelectionChoice(boolean isNull, boolean isMultiple, boolean isCells) { }\n+\n+    private Node createSelectionModelOptions(String name) {\n+        var original = control.getSelectionModel();\n+        ObjectSelector<SelectionChoice> s = new ObjectSelector<>(name, (v) -> {\n+            control.setSelectionModel(v.isNull() ? null : original);\n+            original.setSelectionMode(v.isMultiple() ? SelectionMode.MULTIPLE : SelectionMode.SINGLE);\n+            original.setCellSelectionEnabled(v.isCells());\n+        });\n+        s.addChoice(\"Single Row\", new SelectionChoice(false, false, false));\n+        s.addChoice(\"Multiple Rows\", new SelectionChoice(false, true, false));\n+        s.addChoice(\"Single Cell\", new SelectionChoice(false, false, true));\n+        s.addChoice(\"Multiple Cells\", new SelectionChoice(false, true, true));\n+        s.addChoice(\"<null>\", new SelectionChoice(true, false, false));\n+        s.selectFirst();\n+        return s;\n+    }\n+\n+    private Supplier<TreeItem<DataRow>> mk(int count) {\n+        return () -> {\n+            TreeItem<DataRow> root = new TreeItem<>();\n+            for (int i = 0; i < count; i++) {\n+                root.getChildren().add(new TreeItem<>(new DataRow()));\n+            }\n+            return root;\n+        };\n+    }\n+\n+    private Node createRootOptions(String name, ObjectProperty<TreeItem<DataRow>> p) {\n+        ObjectOption<TreeItem<DataRow>> s = new ObjectOption(name, p);\n+        s.addChoiceSupplier(\"1 Row\", mk(1));\n+        s.addChoiceSupplier(\"10 Rows\", mk(10));\n+        s.addChoiceSupplier(\"1_000 Rows\", mk(1_000));\n+        s.addChoice(\"<null>\", null);\n+        return s;\n+    }\n+\n+    private void addDataItem() {\n+        \/\/ TODO\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TreeTableViewPage.java","additions":349,"deletions":682,"binary":false,"changes":1031,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,3 @@\n+import java.util.function.Supplier;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.scene.Node;\n@@ -30,3 +33,2 @@\n-import javafx.scene.control.ComboBox;\n-import javafx.scene.control.Tooltip;\n-import javafx.scene.control.TreeCell;\n+import javafx.scene.control.FocusModel;\n+import javafx.scene.control.SelectionMode;\n@@ -37,0 +39,1 @@\n+import javafx.scene.control.skin.TreeViewSkin;\n@@ -38,0 +41,4 @@\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.ObjectOption;\n+import com.oracle.tools.fx.monkey.sheets.ControlPropertySheet;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n@@ -39,0 +46,2 @@\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.ObjectSelector;\n@@ -41,0 +50,1 @@\n+import com.oracle.tools.fx.monkey.util.Utils;\n@@ -43,1 +53,1 @@\n- * TreeView Page\n+ * TreeView Page.\n@@ -45,11 +55,3 @@\n-public class TreeViewPage extends TestPaneBase {\n-    private enum Cells {\n-        DEFAULT,\n-        EDITABLE_TEXT_FIELD,\n-    }\n-\n-    private final TreeView<String> control;\n-    private final CheckBox editable;\n-    private final ComboBox<Cells> cellFactorySelector;\n-    private int childNum;\n-    private Callback<TreeView<String>, TreeCell<String>> defaultCellFactory;\n+public class TreeViewPage extends TestPaneBase implements HasSkinnable {\n+    private final TreeView<Object> control;\n+    private int seq;\n@@ -58,1 +60,1 @@\n-        FX.name(this, \"TreeViewPage\");\n+        super(\"TreeViewPage\");\n@@ -62,2 +64,0 @@\n-        control.setCellFactory(CheckBoxTreeCell.<String>forTreeView());\n-        control.setTooltip(new Tooltip(\"edit to 'update' to commit the change\"));\n@@ -65,2 +65,1 @@\n-        setContent(control);\n-        defaultCellFactory = control.getCellFactory();\n+\n@@ -68,7 +67,2 @@\n-            if (\"update\".equals(ev.getNewValue())) {\n-                TreeItem<String> item = ev.getTreeItem();\n-                item.setValue(\"UPDATED!\");\n-                System.out.println(\"committing the value `UPDATED!`\");\n-            } else {\n-                System.out.println(\"discarding the new value: \" + ev.getNewValue());\n-            }\n+            TreeItem<Object> item = ev.getTreeItem();\n+            item.setValue(ev.getNewValue());\n@@ -83,2 +77,1 @@\n-        Button addButton = new Button(\"Add\");\n-        addButton.setOnAction((ev) -> {\n+        Button addButton = FX.button(\"Add\", () -> {\n@@ -88,18 +81,1 @@\n-        Button removeButton = new Button(\"Remove\");\n-        removeButton.setOnAction((ev) -> {\n-            removeChild();\n-        });\n-\n-        editable = new CheckBox(\"editable\");\n-        editable.setOnAction((ev) -> {\n-            updateEditable();\n-        });\n-        FX.name(editable, \"editable\");\n-\n-        cellFactorySelector = new ComboBox<>();\n-        FX.name(cellFactorySelector, \"cellSelector\");\n-        cellFactorySelector.getItems().addAll(Cells.values());\n-        cellFactorySelector.setEditable(false);\n-        cellFactorySelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            updateCellFactory();\n-        });\n+        Button removeButton = FX.button(\"Remove\", this::removeChild);\n@@ -108,1 +84,10 @@\n-        op.option(addButton);\n+        op.section(\"TreeView\");\n+        op.option(\"Cell Factory:\", createCellFactoryOptions());\n+        op.option(new BooleanOption(\"editable\", \"editable\", control.editableProperty()));\n+        op.option(\"Fixed Cell Size:\", Options.fixedSizeOption(\"fixedCellSize\", control.fixedCellSizeProperty()));\n+        op.option(\"Focus Model:\", createFocusModelOptions(\"focusModel\", control.focusModelProperty()));\n+        op.option(\"Root:\", createRootOptions(\"root\", control.rootProperty()));\n+        op.option(Utils.buttons(addButton, removeButton));\n+        op.option(\"Selection Model:\", createSelectionModelOptions(\"selectionModel\"));\n+        op.option(new BooleanOption(\"showRoot\", \"show root\", control.showRootProperty()));\n+        op.separator();\n@@ -111,5 +96,1 @@\n-        op.option(removeButton);\n-        op.option(editable);\n-        op.label(\"Cell Factory:\");\n-        op.option(cellFactorySelector);\n-        setOptions(op);\n+        ControlPropertySheet.appendTo(op, control);\n@@ -117,26 +98,2 @@\n-        control.getSelectionModel().select(control.getRoot());\n-        FX.selectFirst(cellFactorySelector);\n-    }\n-\n-    protected void updateEditable() {\n-        boolean on = editable.isSelected();\n-        control.setEditable(on);\n-        if (on) {\n-            cellFactorySelector.getSelectionModel().select(Cells.EDITABLE_TEXT_FIELD);\n-        }\n-    }\n-\n-    protected void updateCellFactory() {\n-        Cells t = cellFactorySelector.getSelectionModel().getSelectedItem();\n-        var f = getCellFactory(t);\n-        control.setCellFactory(f);\n-    }\n-\n-    private Callback<TreeView<String>, TreeCell<String>> getCellFactory(Cells t) {\n-        if (t != null) {\n-            switch (t) {\n-            case EDITABLE_TEXT_FIELD:\n-                return TextFieldTreeCell.forTreeView();\n-            }\n-        }\n-        return defaultCellFactory;\n+        setContent(control);\n+        setOptions(op);\n@@ -146,1 +103,1 @@\n-        CheckBoxTreeItem<String> item = new CheckBoxTreeItem<>(\"child \" + childNum++);\n+        CheckBoxTreeItem<Object> item = new CheckBoxTreeItem<>(\"child \" + seq++);\n@@ -157,1 +114,1 @@\n-        TreeItem<String> sel = control.getSelectionModel().getSelectedItem();\n+        TreeItem<Object> sel = control.getSelectionModel().getSelectedItem();\n@@ -159,1 +116,1 @@\n-            TreeItem<String> parent = sel.getParent();\n+            TreeItem<Object> parent = sel.getParent();\n@@ -165,0 +122,62 @@\n+\n+    private Node createFocusModelOptions(String name, ObjectProperty<FocusModel<TreeItem<Object>>> p) {\n+        var original = p.get();\n+        ObjectOption<FocusModel<TreeItem<Object>>> s = new ObjectOption<>(name, p);\n+        s.addChoice(\"<default>\", original);\n+        s.addChoice(\"<null>\", null);\n+        s.selectFirst();\n+        return s;\n+    }\n+\n+    private Supplier<TreeItem<Object>> mk(int count) {\n+        return () -> {\n+            TreeItem<Object> root = new TreeItem<>(\"ROOT\");\n+            for (int i = 0; i < count; i++) {\n+                root.getChildren().add(new TreeItem<>(String.valueOf(\"Item_\" + (seq++))));\n+            }\n+            return root;\n+        };\n+    }\n+\n+    private Node createRootOptions(String name, ObjectProperty<TreeItem<Object>> p) {\n+        ObjectOption<TreeItem<Object>> s = new ObjectOption(name, p);\n+        s.addChoiceSupplier(\"1 Row\", mk(1));\n+        s.addChoiceSupplier(\"10 Rows\", mk(10));\n+        s.addChoiceSupplier(\"1,000 Rows\", mk(1_000));\n+        s.addChoice(\"<null>\", null);\n+        return s;\n+    }\n+\n+    private Node createCellFactoryOptions() {\n+        var original = control.getCellFactory();\n+        ObjectOption<Callback> s = new ObjectOption(\"cellFactory\", control.cellFactoryProperty());\n+        s.addChoice(\"<default>\", original);\n+        s.addChoiceSupplier(\"CheckBoxTreeCell\", () -> CheckBoxTreeCell.<Object>forTreeView());\n+        s.addChoiceSupplier(\"TextFieldTreeCell\", () -> TextFieldTreeCell.forTreeView());\n+        s.addChoice(\"<null>\", null);\n+        s.selectFirst();\n+        return s;\n+    }\n+\n+    private Node createSelectionModelOptions(String name) {\n+        var original = control.getSelectionModel();\n+        ObjectSelector<Boolean> s = new ObjectSelector<>(name, (v) -> {\n+            control.setSelectionModel(v == null ? null : original);\n+            original.setSelectionMode(Boolean.TRUE.equals(v) ? SelectionMode.MULTIPLE : SelectionMode.SINGLE);\n+        });\n+        s.addChoice(\"Single\", Boolean.FALSE);\n+        s.addChoice(\"Multiple\", Boolean.TRUE);\n+        s.addChoice(\"<null>\", null);\n+        s.selectFirst();\n+        return s;\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new TreeViewSkin(control));\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TreeViewPage.java","additions":102,"deletions":83,"binary":false,"changes":185,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,3 @@\n+import java.util.List;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n@@ -28,0 +31,1 @@\n+import javafx.scene.control.Button;\n@@ -29,3 +33,2 @@\n-import javafx.scene.control.MenuItem;\n-import javafx.scene.control.SeparatorMenuItem;\n-import javafx.scene.layout.Pane;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BorderPane;\n@@ -35,0 +38,10 @@\n+import javafx.scene.paint.Color;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.PaneContentOptions;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n+import com.oracle.tools.fx.monkey.sheets.RegionPropertySheet;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import com.oracle.tools.fx.monkey.util.Utils;\n@@ -38,0 +51,1 @@\n+ * @see HBoxPage\n@@ -39,1 +53,3 @@\n-public class VBoxPage extends BoxPageBase {\n+public class VBoxPage extends TestPaneBase {\n+    private final VBox box;\n+\n@@ -42,1 +58,0 @@\n-    }\n@@ -44,3 +59,1 @@\n-    protected void setGrow(Node n, Priority p) {\n-        VBox.setVgrow(n, p);\n-    }\n+        box = new VBox();\n@@ -48,4 +61,4 @@\n-    @Override\n-    protected Pane createPane() {\n-        return new VBox();\n-    }\n+        \/\/ TODO menu button\n+        Button addButton = FX.button(\"Add Item\", () -> {\n+            addItem(box.getChildren());\n+        });\n@@ -53,4 +66,12 @@\n-    @Override\n-    protected void setMin(Region r, double v) {\n-        r.setMinHeight(v);\n-    }\n+        Button clearButton = FX.button(\"Clear Items\", () -> {\n+            box.getChildren().clear();\n+        });\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"VBox\");\n+        op.option(\"Alignment:\", new EnumOption<Pos>(\"alignment\", Pos.class, box.alignmentProperty()));\n+        op.option(\"Children:\", PaneContentOptions.createOptions(box.getChildren(), this::createBuilder));\n+        op.option(Utils.buttons(addButton, clearButton));\n+        op.option(new BooleanOption(\"fillHWidth\", \"fill width\", box.fillWidthProperty()));\n+        op.option(\"Spacing:\", Options.spacing(\"spacing\", box.spacingProperty()));\n+        RegionPropertySheet.appendTo(op, box);\n@@ -58,3 +79,4 @@\n-    @Override\n-    protected void setPref(Region r, double v) {\n-        r.setPrefHeight(v);\n+        BorderPane bp = new BorderPane(box);\n+        bp.setPadding(new Insets(0, 10, 0, 0));\n+        setContent(bp);\n+        setOptions(op);\n@@ -63,3 +85,7 @@\n-    @Override\n-    protected void setMax(Region r, double v) {\n-        r.setMaxHeight(v);\n+    private Region addItem(List<Node> children) {\n+        boolean even = (children.size() % 2) == 0;\n+        Background bg = Background.fill(even ? Color.GRAY : Color.LIGHTGRAY);\n+        Region r = createRegion();\n+        r.setBackground(bg);\n+        children.add(r);\n+        return r;\n@@ -68,2 +94,1 @@\n-    @Override\n-    protected Region createRegion() {\n+    private Region createRegion() {\n@@ -73,1 +98,1 @@\n-        ContextMenu m = new ContextMenu();\n+\n@@ -75,6 +100,6 @@\n-            m.getItems().setAll(\n-                new MenuItem(\"height=\" + r.getHeight()),\n-                new SeparatorMenuItem(),\n-                new MenuItem(\"min height=\" + r.getMinHeight()),\n-                new MenuItem(\"pref height=\" + r.getPrefHeight()),\n-                new MenuItem(\"max height=\" + r.getMaxHeight()));\n+            ContextMenu m = new ContextMenu();\n+            FX.item(m, \"height=\" + r.getHeight());\n+            FX.separator(m);\n+            FX.item(m, \"min height=\" + r.getMinHeight());\n+            FX.item(m, \"pref height=\" + r.getPrefHeight());\n+            FX.item(m, \"max height=\" + r.getMaxHeight());\n@@ -85,0 +110,24 @@\n+\n+    private PaneContentOptions.Builder createBuilder() {\n+        return new PaneContentOptions.Builder(this::addItem) {\n+            @Override\n+            protected void setGrow(Node n, Priority p) {\n+                VBox.setVgrow(n, p);\n+            }\n+\n+            @Override\n+            protected void setMin(Region r, double v) {\n+                r.setMinHeight(v);\n+            }\n+\n+            @Override\n+            protected void setPref(Region r, double v) {\n+                r.setPrefHeight(v);\n+            }\n+\n+            @Override\n+            protected void setMax(Region r, double v) {\n+                r.setMaxHeight(v);\n+            }\n+        };\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/VBoxPage.java","additions":81,"deletions":32,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import javafx.scene.text.FontSmoothingType;\n@@ -31,0 +32,6 @@\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.ColorOption;\n+import com.oracle.tools.fx.monkey.options.DoubleOption;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.sheets.NodePropertySheet;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n@@ -40,1 +47,1 @@\n-    private final WebView view;\n+    private final WebView webView;\n@@ -44,4 +51,1 @@\n-        addressField = new TextField();\n-        addressField.setOnAction((ev) -> {\n-            handleUrlEntered();\n-        });\n+        super(\"WebViewPage\");\n@@ -49,3 +53,2 @@\n-        view = new WebView();\n-\n-        engine = view.getEngine();\n+        webView = new WebView();\n+        engine = webView.getEngine();\n@@ -53,1 +56,1 @@\n-            System.err.println(ev);\n+            System.err.println(\"onError:\" + ev);\n@@ -56,1 +59,1 @@\n-            System.err.println(ev);\n+            System.err.println(\"onStatusChanged:\" + ev);\n@@ -59,1 +62,6 @@\n-            System.err.println(c);\n+            System.err.println(\"state:\" + c);\n+        });\n+\n+        addressField = new TextField(\"https:\/\/\");\n+        addressField.setOnAction((ev) -> {\n+            handleUrlEntered();\n@@ -63,4 +71,13 @@\n-        op.label(\"Data:\");\n-        \/\/ TODO\n-        \/\/op.option(modelSelector);\n-        setOptions(op);\n+        op.section(\"WebView\");\n+        op.option(new BooleanOption(\"contextMenuEnabled\", \"context menu enabled\", webView.contextMenuEnabledProperty()));\n+        op.option(\"Font Scale:\", DoubleOption.of(\"fontScale\", webView.fontScaleProperty(), 0.2, 0.5, 0.75, 1.0, 1.5, 2.0, 4.0));\n+        op.option(\"Font Smoothing:\", new EnumOption<>(\"fontSmoothing\", FontSmoothingType.class, webView.fontSmoothingTypeProperty()));\n+        op.option(\"Max Height\", Options.tabPaneConstraints(\"maxHeight\", webView.maxHeightProperty()));\n+        op.option(\"Max Width\", Options.tabPaneConstraints(\"maxWidth\", webView.maxWidthProperty()));\n+        op.option(\"Min Height\", Options.tabPaneConstraints(\"minHeight\", webView.minHeightProperty()));\n+        op.option(\"Min Width\", Options.tabPaneConstraints(\"minWidth\", webView.minWidthProperty()));\n+        op.option(\"Page Fill:\", new ColorOption(\"textFill\", webView.pageFillProperty()));\n+        op.option(\"Pref Height\", Options.tabPaneConstraints(\"prefHeight\", webView.prefHeightProperty()));\n+        op.option(\"Pref Width\", Options.tabPaneConstraints(\"prefWidth\", webView.prefWidthProperty()));\n+        op.option(\"Zoom:\", DoubleOption.of(\"zoom\", webView.zoomProperty(), 0.2, 0.5, 0.75, 1.0, 1.5, 2.0, 4.0));\n+        NodePropertySheet.appendTo(op, webView);\n@@ -70,1 +87,3 @@\n-        bp.setCenter(view);\n+        bp.setCenter(webView);\n+\n+        setOptions(op);\n@@ -76,2 +95,2 @@\n-        if (Utils.isBlank(url)) {\n-            return;\n+        if (!Utils.isBlank(url)) {\n+            engine.load(url);\n@@ -79,2 +98,0 @@\n-\n-        engine.load(url);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/WebViewPage.java","additions":38,"deletions":21,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -1,281 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.oracle.tools.fx.monkey.pages;\n-\n-import java.util.Random;\n-import javafx.collections.ObservableList;\n-import javafx.scene.chart.AreaChart;\n-import javafx.scene.chart.BarChart;\n-import javafx.scene.chart.BubbleChart;\n-import javafx.scene.chart.CategoryAxis;\n-import javafx.scene.chart.LineChart;\n-import javafx.scene.chart.NumberAxis;\n-import javafx.scene.chart.ScatterChart;\n-import javafx.scene.chart.StackedAreaChart;\n-import javafx.scene.chart.StackedBarChart;\n-import javafx.scene.chart.XYChart;\n-import javafx.scene.chart.XYChart.Series;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.ComboBox;\n-import javafx.scene.layout.BorderPane;\n-import com.oracle.tools.fx.monkey.util.FX;\n-import com.oracle.tools.fx.monkey.util.OptionPane;\n-import com.oracle.tools.fx.monkey.util.TestPaneBase;\n-\n-\/**\n- * Tests various XYCharts\n- *\/\n-public class XYChartPage extends TestPaneBase {\n-    public enum Mode {\n-        AREA,\n-        BAR,\n-        BUBBLE,\n-        LINE,\n-        SCATTER,\n-        STACKED_AREA,\n-        STACKED_BAR,\n-    }\n-\n-    private ComboBox<Mode> modeSelector;\n-    private XYChart<?, Number> chart;\n-    protected static Random rnd = new Random();\n-\n-    public XYChartPage() {\n-        FX.name(this, \"XYChartPage\");\n-\n-        modeSelector = new ComboBox<>();\n-        FX.name(modeSelector, \"modeSelector\");\n-        modeSelector.getItems().addAll(Mode.values());\n-        modeSelector.setEditable(false);\n-        modeSelector.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            updateChart();\n-        });\n-\n-        Button addButton = new Button(\"Add Series\");\n-        addButton.setOnAction((ev) -> addSeries());\n-\n-        Button removeButton = new Button(\"Remove Series\");\n-        removeButton.setOnAction((ev) -> removeSeries());\n-\n-        Button addRemoveButton = new Button(\"Add\/Remove Series\");\n-        addRemoveButton.setOnAction((ev) -> addRemoveSeries());\n-\n-        Button addPointButton = new Button(\"Add Point\");\n-        addPointButton.setOnAction((ev) -> addPoint());\n-\n-        Button removePointButton = new Button(\"Remove Point\");\n-        removePointButton.setOnAction((ev) -> removePoint());\n-\n-        Button clearPointsButton = new Button(\"Clear Points\");\n-        clearPointsButton.setOnAction((ev) -> clearPoints());\n-\n-        OptionPane p = new OptionPane();\n-        p.label(\"Chart Type:\");\n-        p.option(modeSelector);\n-        p.option(addButton);\n-        p.option(removeButton);\n-        p.option(addRemoveButton);\n-        p.option(addPointButton);\n-        p.option(removePointButton);\n-        p.option(clearPointsButton);\n-        setOptions(p);\n-\n-        modeSelector.getSelectionModel().selectFirst();\n-    }\n-\n-    private void updateChart() {\n-        Mode m = modeSelector.getSelectionModel().getSelectedItem();\n-        chart = createChart(m);\n-\n-        BorderPane bp = new BorderPane();\n-        bp.setCenter(chart);\n-        setContent(bp);\n-\n-        addSeries();\n-    }\n-\n-    private void addSeries() {\n-        if (chart != null) {\n-            if (chart instanceof BarChart b) {\n-                Series s = createBarSeries();\n-                b.getData().add(s);\n-            } else if (chart instanceof StackedBarChart b) {\n-                Series s = createBarSeries();\n-                b.getData().add(s);\n-            } else {\n-                Series s = createNumberSeries();\n-                chart.getData().add(s);\n-            }\n-        }\n-    }\n-\n-    private void removeSeries() {\n-        if (chart != null) {\n-            if (chart.getData().size() > 0) {\n-                chart.getData().remove(0);\n-            }\n-        }\n-    }\n-\n-    private void addRemoveSeries() {\n-        if (chart != null) {\n-            if (chart.getData().size() > 0) {\n-                var first = chart.getData().remove(0);\n-                chart.getData().add((Series)first);\n-            }\n-        }\n-    }\n-\n-    private XYChart<?, Number> createChart(Mode m) {\n-        NumberAxis xAxis = new NumberAxis();\n-        xAxis.setLabel(\"X\");\n-\n-        NumberAxis yAxis = new NumberAxis();\n-        yAxis.setLabel(\"Y\");\n-\n-        switch (m) {\n-        case AREA:\n-            {\n-                AreaChart<Number, Number> chart = new AreaChart<>(xAxis, yAxis);\n-                chart.setTitle(\"Area Chart\");\n-                return chart;\n-            }\n-        case BAR:\n-            {\n-                CategoryAxis x = new CategoryAxis();\n-                BarChart<String, Number> chart = new BarChart<>(x, yAxis);\n-                chart.setTitle(\"Bar Chart\");\n-                return chart;\n-            }\n-        case BUBBLE:\n-            {\n-                BubbleChart<Number, Number> chart = new BubbleChart<>(xAxis, yAxis);\n-                chart.setTitle(\"Bubble Chart\");\n-                return chart;\n-            }\n-        case LINE:\n-            {\n-                LineChart<Number, Number> chart = new LineChart<>(xAxis, yAxis);\n-                chart.setTitle(\"Line Chart\");\n-                return chart;\n-            }\n-        case SCATTER:\n-            {\n-                ScatterChart<Number, Number> chart = new ScatterChart<>(xAxis, yAxis);\n-                chart.setTitle(\"Scatter Chart\");\n-                return chart;\n-            }\n-        case STACKED_AREA:\n-            {\n-                StackedAreaChart<Number, Number> chart = new StackedAreaChart<>(xAxis, yAxis);\n-                chart.setTitle(\"Stacked Area Chart\");\n-                return chart;\n-            }\n-        case STACKED_BAR:\n-            {\n-                CategoryAxis x = new CategoryAxis();\n-                StackedBarChart<String, Number> chart = new StackedBarChart<>(x, yAxis);\n-                chart.setTitle(\"Stacked Bar Chart\");\n-                return chart;\n-            }\n-        }\n-\n-        return null;\n-    }\n-\n-    private Series<Number, Number> createNumberSeries() {\n-        String name = Long.toString(System.currentTimeMillis(), 16);\n-\n-        XYChart.Series s = new XYChart.Series();\n-        s.setName(name);\n-        for (int i = 0; i < 12; i++) {\n-            int v = rnd.nextInt(50);\n-            s.getData().add(new XYChart.Data(i, v));\n-        }\n-        return s;\n-    }\n-\n-    private Series<String, Number> createBarSeries() {\n-        String name = Long.toString(System.currentTimeMillis(), 16);\n-\n-        XYChart.Series s = new XYChart.Series();\n-        s.setName(name);\n-        for (int i = 0; i < 12; i++) {\n-            int v = rnd.nextInt(50);\n-            s.getData().add(new XYChart.Data(\"c\" + i, v));\n-        }\n-        return s;\n-    }\n-\n-    private void addPoint() {\n-        var list = chart.getData();\n-        if (list.size() == 0) {\n-            chart.getData().add(new XYChart.Series());\n-        }\n-        XYChart.Series s = list.get(0);\n-        int sz = s.getData().size();\n-        boolean atIndexZero = rnd.nextBoolean();\n-\n-        if (chart instanceof BarChart b) {\n-            int v = rnd.nextInt(50);\n-            add(s.getData(), atIndexZero, new XYChart.Data(\"c\" + sz, v));\n-        } else if (chart instanceof StackedBarChart b) {\n-            int v = rnd.nextInt(50);\n-            add(s.getData(), atIndexZero, new XYChart.Data(\"c\" + sz, v));\n-        } else {\n-            int i = rnd.nextInt(100);\n-            int v = rnd.nextInt(50);\n-            add(s.getData(), atIndexZero, new XYChart.Data(i, v));\n-        }\n-    }\n-\n-    private void add(ObservableList list, boolean atIndexZero, XYChart.Data d) {\n-        if (atIndexZero) {\n-            list.add(0, d);\n-        } else {\n-            list.add(d);\n-        }\n-    }\n-\n-    private void removePoint() {\n-        var list = chart.getData();\n-        if (list.size() > 0) {\n-            XYChart.Series s = list.get(0);\n-            int sz = s.getData().size();\n-            if (sz > 0) {\n-                int ix = rnd.nextBoolean() ? 0 : sz - 1;\n-                s.getData().remove(ix);\n-            }\n-        }\n-    }\n-\n-    private void clearPoints() {\n-        var list = chart.getData();\n-        if (list.size() > 0) {\n-            XYChart.Series s = list.get(0);\n-            s.getData().clear();\n-        }\n-    }\n-}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/XYChartPage.java","additions":0,"deletions":281,"binary":false,"changes":281,"status":"deleted"},{"patch":"@@ -0,0 +1,207 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.util.Random;\n+import javafx.collections.ObservableList;\n+import javafx.scene.chart.BarChart;\n+import javafx.scene.chart.CategoryAxis;\n+import javafx.scene.chart.NumberAxis;\n+import javafx.scene.chart.StackedBarChart;\n+import javafx.scene.chart.XYChart;\n+import javafx.scene.chart.XYChart.Series;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * Base Class For XYCharts.\n+ *\/\n+public abstract class XYChartPageBase extends TestPaneBase {\n+\n+    public abstract XYChart<?, Number> chart();\n+\n+    protected static final Random rnd = new Random();\n+    private int seq;\n+\n+    public XYChartPageBase(String name) {\n+        super(name);\n+    }\n+\n+    protected CategoryAxis createCategoryAxis(String text) {\n+        CategoryAxis a = new CategoryAxis();\n+        a.setLabel(text);\n+        return a;\n+    }\n+\n+    protected NumberAxis createNumberAxis(String text) {\n+        NumberAxis a = new NumberAxis();\n+        a.setLabel(text);\n+        return a;\n+    }\n+\n+    protected Series<Number, Number> createNumberSeries() {\n+        String name = \"S\" + (seq++);\n+        XYChart.Series s = new XYChart.Series();\n+        s.setName(name);\n+        for (int i = 0; i < 12; i++) {\n+            int v = rnd.nextInt(50);\n+            s.getData().add(new XYChart.Data(i, v));\n+        }\n+        return s;\n+    }\n+\n+    protected Series<String, Number> createBarSeries() {\n+        String name = \"S\" + (seq++);\n+        XYChart.Series s = new XYChart.Series();\n+        s.setName(name);\n+        for (int i = 0; i < 12; i++) {\n+            int v = rnd.nextInt(50);\n+            s.getData().add(new XYChart.Data(\"c\" + i, v));\n+        }\n+        return s;\n+    }\n+\n+    public final void addSeries() {\n+        if (chart() instanceof BarChart b) {\n+            Series s = createBarSeries();\n+            b.getData().add(s);\n+        } else if (chart() instanceof StackedBarChart b) {\n+            Series s = createBarSeries();\n+            b.getData().add(s);\n+        } else {\n+            Series s = createNumberSeries();\n+            chart().getData().add(s);\n+        }\n+    }\n+\n+    public final void removeSeries() {\n+        if (chart().getData().size() > 0) {\n+            chart().getData().remove(0);\n+        }\n+    }\n+\n+    public final void addRemoveSeries() {\n+        var data = chart().getData();\n+        if (data.size() > 0) {\n+            var first = data.remove(0);\n+            chart().getData().add((Series)first);\n+        }\n+    }\n+\n+    public final void addPoint() {\n+        var list = chart().getData();\n+        if (list.size() == 0) {\n+            chart().getData().add(new XYChart.Series());\n+        }\n+        XYChart.Series s = list.get(0);\n+        int sz = s.getData().size();\n+        boolean atIndexZero = rnd.nextBoolean();\n+\n+        if (chart() instanceof BarChart b) {\n+            int v = rnd.nextInt(50);\n+            add(s.getData(), atIndexZero, new XYChart.Data(\"c\" + sz, v));\n+        } else if (chart() instanceof StackedBarChart b) {\n+            int v = rnd.nextInt(50);\n+            add(s.getData(), atIndexZero, new XYChart.Data(\"c\" + sz, v));\n+        } else {\n+            int i = rnd.nextInt(100);\n+            int v = rnd.nextInt(50);\n+            add(s.getData(), atIndexZero, new XYChart.Data(i, v));\n+        }\n+    }\n+\n+    public final void removePoint() {\n+        var data = chart().getData();\n+        if (data.size() > 0) {\n+            XYChart.Series s = data.get(0);\n+            int sz = s.getData().size();\n+            if (sz > 0) {\n+                int ix = rnd.nextBoolean() ? 0 : sz - 1;\n+                s.getData().remove(ix);\n+            }\n+        }\n+    }\n+\n+    public final void clearPoints() {\n+        var data = chart().getData();\n+        if (data.size() > 0) {\n+            XYChart.Series s = data.get(0);\n+            s.getData().clear();\n+        }\n+    }\n+\n+    public final void changePointX() {\n+        var data = chart().getData();\n+        if (data.size() == 0) {\n+            return;\n+        }\n+        XYChart.Series s = data.get(0);\n+        int sz = s.getData().size();\n+        if(sz < 3) {\n+            return;\n+        }\n+\n+        if (chart() instanceof BarChart b) {\n+            int v = rnd.nextInt(50);\n+            ((XYChart.Data)s.getData().get(1)).setXValue(\"c\" + v);\n+        } else if (chart() instanceof StackedBarChart b) {\n+            int v = rnd.nextInt(50);\n+            ((XYChart.Data)s.getData().get(1)).setXValue(\"c\" + v);\n+        } else {\n+            int v = rnd.nextInt(50);\n+            ((XYChart.Data)s.getData().get(1)).setXValue(v);\n+        }\n+    }\n+\n+    public final void changePointY() {\n+        var list = chart().getData();\n+        if (list.size() == 0) {\n+            return;\n+        }\n+        XYChart.Series s = list.get(0);\n+        int sz = s.getData().size();\n+        if(sz < 3) {\n+            return;\n+        }\n+\n+        if (chart() instanceof BarChart b) {\n+            int v = rnd.nextInt(50);\n+            ((XYChart.Data)s.getData().get(1)).setYValue(v);\n+        } else if (chart() instanceof StackedBarChart b) {\n+            int v = rnd.nextInt(50);\n+            ((XYChart.Data)s.getData().get(1)).setYValue(v);\n+        } else {\n+            int v = rnd.nextInt(50);\n+            ((XYChart.Data)s.getData().get(1)).setYValue(v);\n+        }\n+    }\n+\n+    private void add(ObservableList list, boolean atIndexZero, XYChart.Data d) {\n+        if (atIndexZero) {\n+            list.add(0, d);\n+        } else {\n+            list.add(d);\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/XYChartPageBase.java","additions":207,"deletions":0,"binary":false,"changes":207,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.List;\n@@ -36,0 +37,1 @@\n+import javafx.scene.control.Accordion;\n@@ -43,0 +45,1 @@\n+import javafx.scene.control.TitledPane;\n@@ -217,16 +220,3 @@\n-    public static void storeNode(Node n) {\n-        if (n instanceof ListView lv) {\n-            storeListView(lv);\n-            return;\n-        } else if (n instanceof ComboBox cb) {\n-            storeComboBox(cb);\n-            return;\n-        } else if (n instanceof CheckBox cb) {\n-            storeCheckBox(cb);\n-            return;\n-        } else if (n instanceof SplitPane sp) {\n-            storeSplitPane(sp);\n-            return;\n-        } else if (n instanceof ScrollPane sp) {\n-            storeNode(sp.getContent());\n-            return;\n+    private static List<? extends Node> getChildren(Node n) {\n+        if(n instanceof Accordion a) {\n+            return a.getPanes();\n@@ -236,3 +226,1 @@\n-            for (Node ch: p.getChildrenUnmodifiable()) {\n-                storeNode(ch);\n-            }\n+            return p.getChildrenUnmodifiable();\n@@ -240,1 +228,0 @@\n-    }\n@@ -242,22 +229,1 @@\n-    public static void restoreNode(Node n) {\n-        if (checkNoScene(n)) {\n-            return;\n-        }\n-\n-        if (n instanceof ListView lv) {\n-            restoreListView(lv);\n-        } else if (n instanceof ComboBox cb) {\n-            restoreComboBox(cb);\n-        } else if (n instanceof CheckBox cb) {\n-            restoreCheckBox(cb);\n-        } else if (n instanceof SplitPane sp) {\n-            restoreSplitPane(sp);\n-        } else if (n instanceof ScrollPane sp) {\n-            restoreNode(sp.getContent());\n-        }\n-\n-        if (n instanceof Parent p) {\n-            for (Node ch: p.getChildrenUnmodifiable()) {\n-                restoreNode(ch);\n-            }\n-        }\n+        return null;\n@@ -491,0 +457,55 @@\n+\n+    public static void storeNode(Node n) {\n+        if (n instanceof ListView lv) {\n+            storeListView(lv);\n+            return;\n+        } else if (n instanceof ComboBox cb) {\n+            storeComboBox(cb);\n+            return;\n+        } else if (n instanceof CheckBox cb) {\n+            storeCheckBox(cb);\n+            return;\n+        } else if (n instanceof SplitPane sp) {\n+            storeSplitPane(sp);\n+            return;\n+        } else if (n instanceof ScrollPane sp) {\n+            storeNode(sp.getContent());\n+            return;\n+        } else if(n instanceof TitledPane tp) {\n+            storeNode(tp.getContent());\n+        }\n+\n+        List<? extends Node> children = getChildren(n);\n+        if(children != null) {\n+            for (Node ch: children) {\n+                storeNode(ch);\n+            }\n+        }\n+    }\n+\n+    public static void restoreNode(Node n) {\n+        if (checkNoScene(n)) {\n+            return;\n+        }\n+\n+        if (n instanceof ListView lv) {\n+            restoreListView(lv);\n+        } else if (n instanceof ComboBox cb) {\n+            restoreComboBox(cb);\n+        } else if (n instanceof CheckBox cb) {\n+            restoreCheckBox(cb);\n+        } else if (n instanceof SplitPane sp) {\n+            restoreSplitPane(sp);\n+        } else if (n instanceof ScrollPane sp) {\n+            restoreNode(sp.getContent());\n+        } else if(n instanceof TitledPane tp) {\n+            restoreNode(tp.getContent());\n+        }\n+\n+        List<? extends Node> children = getChildren(n);\n+        if(children != null) {\n+            for (Node ch: children) {\n+                restoreNode(ch);\n+            }\n+        }\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/settings\/FxSettingsSchema.java","additions":63,"deletions":42,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/settings\/ISettingsProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -130,0 +130,1 @@\n+    @Override\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/settings\/SStream.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.sheets;\n+\n+import javafx.geometry.Side;\n+import javafx.scene.chart.Chart;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+\n+\/**\n+ * Chart Property Sheet.\n+ *\/\n+public class ChartPropertySheet {\n+    public static void appendTo(OptionPane op, Chart chart) {\n+        op.section(\"Chart\");\n+        op.option(new BooleanOption(\"animated\", \"animated\", chart.animatedProperty()));\n+        op.option(\"Legend Side:\", new EnumOption<Side>(\"legendSide\", true, Side.class, chart.legendSideProperty()));\n+        op.option(new BooleanOption(\"legendVisible\", \"legend visible\", chart.legendVisibleProperty()));\n+        op.option(\"Title:\", Options.textOption(\"text\", false, true, chart.titleProperty()));\n+        op.option(\"Title Side:\", new EnumOption<Side>(\"titleSide\", true, Side.class, chart.titleSideProperty()));\n+\n+        RegionPropertySheet.appendTo(op, chart);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/ChartPropertySheet.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.sheets;\n+\n+import javafx.scene.control.ComboBoxBase;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.PromptTextOption;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+\n+\/**\n+ *\n+ *\/\n+public class ComboBoxBasePropertySheet {\n+    public static void appendTo(OptionPane op, ComboBoxBase<?> n) {\n+        op.option(new BooleanOption(\"editable\", \"editable\", n.editableProperty()));\n+        op.option(\"Prompt Text:\", new PromptTextOption(\"promptText\", true, n.promptTextProperty()));\n+        op.option(\"Value: TODO\", null); \/\/ TODO\n+\n+        ControlPropertySheet.appendTo(op, n);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/ComboBoxBasePropertySheet.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.sheets;\n+\n+import javafx.scene.control.Control;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+\n+\/**\n+ * Control Property Sheet.\n+ *\/\n+public class ControlPropertySheet {\n+    public static void appendTo(OptionPane op, Control control) {\n+        op.section(\"Control\");\n+        op.option(\"Context Menu: TODO\", null);\n+        \/\/ TODO context menu\n+        op.option(\"Tooltip: TODO\", null);\n+        \/\/ TODO tooltip\n+\n+        \/\/ region\n+        RegionPropertySheet.appendTo(op, control);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/ControlPropertySheet.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.sheets;\n+\n+import javafx.geometry.Pos;\n+import javafx.scene.control.ContentDisplay;\n+import javafx.scene.control.Labeled;\n+import javafx.scene.control.OverrunStyle;\n+import javafx.scene.text.TextAlignment;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.PaintOption;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.FontOption;\n+import com.oracle.tools.fx.monkey.options.GraphicOption;\n+import com.oracle.tools.fx.monkey.options.InsetsOption;\n+import com.oracle.tools.fx.monkey.options.TextOption;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+\n+\/**\n+ * Labeled Control Property Sheet.\n+ *\/\n+public class LabeledPropertySheet {\n+    public static void appendTo(OptionPane op, String section, boolean multiLine, Labeled n) {\n+        op.section(section);\n+        op.option(\"Alignment:\", new EnumOption<>(\"alignment\", Pos.class, n.alignmentProperty()));\n+        op.option(\"Content Display:\", new EnumOption<>(\"contentDisplay\", ContentDisplay.class, n.contentDisplayProperty()));\n+        op.option(\"Ellipsis String:\", new TextOption(\"ellipsisString\", n.ellipsisStringProperty()));\n+        op.option(\"Font:\", new FontOption(\"font\", false, n.fontProperty()));\n+        op.option(\"Graphic:\", new GraphicOption(\"graphic\", n.graphicProperty()));\n+        op.option(\"Padding:\", new InsetsOption(\"padding\", false, n.paddingProperty()));\n+        op.option(\"Line Spacing:\", Options.lineSpacing(\"lineSpacing\", n.lineSpacingProperty()));\n+        op.option(\"Text:\", Options.textOption(\"text\", multiLine, true, n.textProperty()));\n+        op.option(\"Text Alignment:\", new EnumOption<>(\"textAlignment\", TextAlignment.class, n.textAlignmentProperty()));\n+        op.option(\"Text Fill:\", new PaintOption(\"textFill\", n.textFillProperty()));\n+        op.option(\"Text Overrun:\", new EnumOption<>(\"textOverrun\", OverrunStyle.class, n.textOverrunProperty()));\n+        op.option(new BooleanOption(\"mnemonicParsing\", \"mnemonic parsing\", n.mnemonicParsingProperty()));\n+        op.option(new BooleanOption(\"underline\", \"underline\", n.underlineProperty()));\n+        op.option(new BooleanOption(\"wrapText\", \"wrap text\", n.wrapTextProperty()));\n+\n+        ControlPropertySheet.appendTo(op, n);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/LabeledPropertySheet.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.sheets;\n+\n+import javafx.geometry.NodeOrientation;\n+import javafx.scene.AccessibleRole;\n+import javafx.scene.CacheHint;\n+import javafx.scene.Node;\n+import javafx.scene.effect.BlendMode;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.DoubleSpinner;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.TextOption;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+\n+\/**\n+ * Node Property Sheet.\n+ *\/\n+public class NodePropertySheet {\n+    public static void appendTo(OptionPane op, Node n) {\n+        op.section(\"Node\");\n+        op.option(\"Accessible Help:\", new TextOption(\"accessibleHelp\", n.accessibleHelpProperty()));\n+        op.option(\"Accessible Role:\", new EnumOption<>(\"accessibleRole\", AccessibleRole.class, n.accessibleRoleProperty()));\n+        op.option(\"Accessible Role Description:\", new TextOption(\"accessibleRoleDescription\", n.accessibleRoleDescriptionProperty()));\n+        op.option(\"Accessible Text:\", new TextOption(\"accessibleText\", n.accessibleTextProperty()));\n+        op.option(\"Blend Mode:\", new EnumOption<>(\"blendMode\", BlendMode.class, n.blendModeProperty()));\n+        op.option(new BooleanOption(\"cache\", \"cache\", n.cacheProperty()));\n+        op.option(\"Cache Hint:\", new EnumOption<>(\"cacheHint\", CacheHint.class, n.cacheHintProperty()));\n+        op.option(\"Clip: TODO\", null); \/\/ TODO\n+        op.option(\"Cursor: TODO\", null); \/\/ TODO\n+        op.option(\"Depth Test:\", new EnumOption<>(\"depthText\", CacheHint.class, n.cacheHintProperty()));\n+        op.option(new BooleanOption(\"disable\", \"disable\", n.disableProperty()));\n+        op.option(\"Effect: TODO\", null); \/\/ TODO\n+        op.option(new BooleanOption(\"focusTraversable\", \"focus traversable\", n.focusTraversableProperty()));\n+        op.option(\"Id:\", new TextOption(\"id\", n.idProperty()));\n+        op.option(\"Input Method Requests: TODO\", null); \/\/ TODO\n+        op.option(\"Layout X: TODO\", null); \/\/ TODO\n+        op.option(\"Layout Y: TODO\", null); \/\/ TODO\n+        op.option(new BooleanOption(\"managed\", \"managed\", n.managedProperty()));\n+        op.option(new BooleanOption(\"mouseTransparent\", \"mouse transparent\", n.mouseTransparentProperty()));\n+        op.option(\"Node Orientation:\", new EnumOption<>(\"nodeOrientation\", NodeOrientation.class, n.nodeOrientationProperty()));\n+        \/\/op.option(\"On Various Events: TODO\", null); \/\/ TODO own section?\n+        op.option(\"Opacity:\", new DoubleSpinner(\"opacity\", n.opacityProperty(), -0.1, 1.1, 0.1));\n+        op.option(new BooleanOption(\"pickOnBounds\", \"pick on bounds\", n.pickOnBoundsProperty()));\n+        op.option(\"Rotate: TODO\", null); \/\/ TODO\n+        op.option(\"Rotation Axis: TODO\", null); \/\/ TODO\n+        op.option(\"Scale X: TODO\", null); \/\/ TODO\n+        op.option(\"Scale Y: TODO\", null); \/\/ TODO\n+        op.option(\"Scale Z: TODO\", null); \/\/ TODO\n+        op.option(\"Style:\", new TextOption(\"style\", n.styleProperty()));\n+        op.option(\"Translate X: TODO\", null); \/\/ TODO\n+        op.option(\"Translate Y: TODO\", null); \/\/ TODO\n+        op.option(\"Translate Z: TODO\", null); \/\/ TODO\n+        op.option(\"User Data: TODO\", null); \/\/ TODO\n+        op.option(\"View Order: TODO\", null); \/\/ TODO\n+        op.option(new BooleanOption(\"visible\", \"visible\", n.visibleProperty()));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/NodePropertySheet.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,150 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.sheets;\n+\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.IntegerProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.Property;\n+import javafx.beans.property.StringProperty;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.Region;\n+import javafx.scene.paint.Color;\n+import com.oracle.tools.fx.monkey.options.DoubleOption;\n+import com.oracle.tools.fx.monkey.options.IntOption;\n+import com.oracle.tools.fx.monkey.options.ObjectOption;\n+import com.oracle.tools.fx.monkey.options.TextChoiceOption;\n+import com.oracle.tools.fx.monkey.util.TextTemplates;\n+import com.oracle.tools.fx.monkey.util.Utils;\n+\n+\/**\n+ * Convenience Methods.\n+ *\/\n+public class Options {\n+    \/**\n+     * Returns the text choice option initialized with common single- or multi-line strings.\n+     * @param name\n+     * @param multiLine\n+     * @param allowEditButton\n+     * @param prop\n+     * @return\n+     *\/\n+    public static Node textOption(String name, boolean multiLine, boolean allowEditButton, StringProperty prop) {\n+        TextChoiceOption op = new TextChoiceOption(name, true, prop);\n+        Object[] pairs = multiLine ? TextTemplates.multiLineTextPairs() : TextTemplates.singleLineTextPairs();\n+        Utils.fromPairs(pairs, (k,v) -> op.addChoice(k, v));\n+        op.selectFirst();\n+        return op;\n+    }\n+\n+    public static Node fixedSizeOption(String name, DoubleProperty p) {\n+        return DoubleOption.of(name, p, 0, 20, 33.4, 50, 100);\n+    }\n+\n+    public static Node spacing(String name, DoubleProperty p) {\n+        return DoubleOption.of(name, p, 0, 0.333, 0.5, 1, 2, 10, 20, 33.4, 50, 100);\n+    }\n+\n+    public static Node gaps(String name, DoubleProperty p) {\n+        return DoubleOption.of(name, p, 0, 1, 1.5, 4, 10, 20, 33.33, 100);\n+    }\n+\n+    public static Node tabPaneConstraints(String name, DoubleProperty p) {\n+        DoubleOption d = new DoubleOption(name, p);\n+        d.addChoice(\"0\", Double.valueOf(0));\n+        d.addChoice(\"10\", 10.0);\n+        d.addChoice(\"33.3\", 33.3);\n+        d.addChoice(\"100\", 100.0);\n+        d.addChoice(\"Double.MAX_VALUE\", Double.MAX_VALUE);\n+        d.addChoice(\"Double.POSITIVE_INFINITY\", Double.POSITIVE_INFINITY);\n+        d.addChoice(\"Double.NaN\", Double.NaN);\n+        d.selectInitialValue();\n+        return d;\n+    }\n+\n+    public static Node forRegion(String name, Property<Number> p) {\n+        DoubleOption d = new DoubleOption(name, p);\n+        d.addChoice(\"USE_COMPUTED_SIZE (-1)\", Region.USE_COMPUTED_SIZE);\n+        d.addChoice(\"USE_PREF_SIZE (-∞)\", Region.USE_PREF_SIZE);\n+        d.addChoice(\"0\", Double.valueOf(0));\n+        d.addChoice(\"10\", 10.0);\n+        d.addChoice(\"33.3\", 33.3);\n+        d.addChoice(\"100\", 100.0);\n+        d.addChoice(\"Double.MAX_VALUE\", Double.MAX_VALUE);\n+        d.addChoice(\"Double.MIN_VALUE\", Double.MIN_VALUE);\n+        d.addChoice(\"Double.POSITIVE_INFINITY\", Double.POSITIVE_INFINITY);\n+        d.addChoice(\"Double.NaN\", Double.NaN);\n+        d.selectInitialValue();\n+        return d;\n+    }\n+\n+    public static Node lineSpacing(String name, Property<Number> p) {\n+        return DoubleOption.of(name, p, 0, 0.5, 1, 2, 3.14, 10, 33.33, 100);\n+    }\n+\n+    public static Node background(Node owner, String name, Property<Background> p) {\n+        ObjectOption<Background> op = new ObjectOption<>(name, p);\n+        op.addChoiceSupplier(\"Black\", () -> {\n+            return Background.fill(Color.BLACK);\n+        });\n+        op.addChoiceSupplier(\"Red\", () -> {\n+            return Background.fill(Color.RED);\n+        });\n+        op.addChoiceSupplier(\"White\", () -> {\n+            return Background.fill(Color.WHITE);\n+        });\n+        \/\/ TODO let background property track focused and focusWithin properties to change the bg\n+        \/\/ also make sure to removeListener when the background is set to another value\n+\/\/        op.addChoiceSupplier(\"Focus(Green), NoFocus(Gray)\", () -> {\n+\/\/            BooleanBinding b = Bindings.createBooleanBinding(\n+\/\/                () -> {\n+\/\/                },\n+\/\/                owner.focusTraversableProperty(),\n+\/\/                owner.focusedProperty(),\n+\/\/                owner.focusWithinProperty()\n+\/\/            );\n+\/\/            Background bg = new Background();\n+\/\/        });\n+        op.addChoice(\"<null>\", null);\n+        op.selectInitialValue();\n+        return op;\n+    }\n+\n+    public static Node tabSize(String name, IntegerProperty p) {\n+        return new IntOption(name, 0, Integer.MAX_VALUE, p);\n+    }\n+\n+    public static Node placeholderNode(String name, ObjectProperty<Node> p) {\n+        ObjectOption<Node> op = new ObjectOption<>(name, p);\n+        op.addChoiceSupplier(\"Button\", () -> new Button(\"Placeholder\"));\n+        op.addChoiceSupplier(\"Label\", () -> new Label(\"Placeholder\"));\n+        op.addChoice(\"<null>\", null);\n+        op.selectInitialValue();\n+        return op;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/Options.java","additions":150,"deletions":0,"binary":false,"changes":150,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.sheets;\n+\n+import javafx.scene.layout.Region;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.BorderOption;\n+import com.oracle.tools.fx.monkey.options.InsetsOption;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+\n+\/**\n+ * Region Property Sheet.\n+ *\/\n+public class RegionPropertySheet {\n+    public static void appendTo(OptionPane op, Region r) {\n+        op.section(\"Region\");\n+        op.option(\"Background:\", Options.background(r, \"background\", r.backgroundProperty()));\n+        op.option(\"Border:\", new BorderOption(\"border\", r.borderProperty()));\n+        op.option(new BooleanOption(\"cacheShape\", \"cache shape\", r.cacheShapeProperty()));\n+        op.option(new BooleanOption(\"centerShape\", \"center shape\", r.centerShapeProperty()));\n+        op.option(\"Max Height:\", Options.forRegion(\"maxHeight\", r.maxHeightProperty()));\n+        op.option(\"Max Width:\", Options.forRegion(\"maxWidth\", r.maxWidthProperty()));\n+        op.option(\"Min Height:\", Options.forRegion(\"minHeight\", r.minHeightProperty()));\n+        op.option(\"Min Width:\", Options.forRegion(\"minWidth\", r.minWidthProperty()));\n+        op.option(\"Opaque Insets:\", new InsetsOption(\"opaqueInsets\", true, r.opaqueInsetsProperty()));\n+        op.option(\"Padding:\", new InsetsOption(\"padding\", false, r.paddingProperty()));\n+        op.option(\"Pref Height:\", Options.forRegion(\"prefHeight\", r.prefHeightProperty()));\n+        op.option(\"Pref Width:\", Options.forRegion(\"prefWidth\", r.prefWidthProperty()));\n+        op.option(new BooleanOption(\"scaleShape\", \"scale shape\", r.scaleShapeProperty()));\n+        op.option(\"Shape: TODO\", null); \/\/ TODO\n+        op.option(new BooleanOption(\"snapToPixel\", \"snap to pixel\", r.snapToPixelProperty()));\n+\n+        NodePropertySheet.appendTo(op, r);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/RegionPropertySheet.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.sheets;\n+\n+import javafx.scene.shape.Shape;\n+import javafx.scene.shape.StrokeLineCap;\n+import javafx.scene.shape.StrokeLineJoin;\n+import javafx.scene.shape.StrokeType;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.DoubleSpinner;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.PaintOption;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+\n+\/**\n+ * Shape Properties Sheet\n+ *\/\n+public class ShapePropertySheet {\n+    public static void appendTo(OptionPane op, Shape n) {\n+        op.section(\"Shape\");\n+        op.option(\"Fill:\", new PaintOption(\"fill\", n.fillProperty()));\n+        op.option(new BooleanOption(\"smooth\", \"smooth\", n.smoothProperty()));\n+        op.option(\"Stroke:\", new PaintOption(\"stroke\", n.strokeProperty()));\n+        op.option(\"Stroke Dash Offset:\", new DoubleSpinner(\"strokeWidth\", n.strokeDashOffsetProperty(), 0, 100, 0.1));\n+        op.option(\"Stroke Line Cap:\", new EnumOption<>(\"strokeLineCap\", StrokeLineCap.class, n.strokeLineCapProperty()));\n+        op.option(\"Stroke Line Join:\", new EnumOption<>(\"strokeLineJoin\", StrokeLineJoin.class, n.strokeLineJoinProperty()));\n+        op.option(\"Stroke Miter Limit:\", new DoubleSpinner(\"strokeWidth\", n.strokeMiterLimitProperty(), 0, 100, 0.1));\n+        op.option(\"Stroke Type:\", new EnumOption<>(\"strokeType\", StrokeType.class, n.strokeTypeProperty()));\n+        op.option(\"Stroke width:\", new DoubleSpinner(\"strokeWidth\", n.strokeWidthProperty(), 0, 100, 0.1));\n+\n+        NodePropertySheet.appendTo(op, n);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/ShapePropertySheet.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.sheets;\n+\n+import javafx.beans.property.ObjectProperty;\n+import javafx.scene.control.TableColumn;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+\n+\/**\n+ * TreeTableView\/TableView (Selected) Column Property Sheet\n+ *\/\n+\/\/ TODO this is not used\n+public class TableColumnPropertySheet {\n+\/\/    public TableColumnOptions(String name, ObjectProperty<TableColumn> p) {\n+\/\/        super(name, (v) -> {\n+\/\/            var col = p.get();\n+\/\/            if(col != null) {\n+\/\/                col.set\n+\/\/            }\n+\/\/            updateValue(v);\n+\/\/        });\n+\/\/        disableProperty().bind(Bindings.createBooleanBinding(() -> {\n+\/\/            return p.get() == null;\n+\/\/        }, p));\n+\/\/\n+\/\/        this.currentColumn = p;\n+\/\/    }\n+\n+    public static void appendTo(OptionPane op, ObjectProperty<TableColumn> currentColumn) {\n+        op.section(\"Current Column\");\n+        op.option(\"Cell Factory: TODO\", null); \/\/ TODO\n+        op.option(\"Cell Value Factory: TODO\", null); \/\/ TODO\n+        op.option(\"Comparator: TODO\", null); \/\/ TODO\n+        op.option(\"Context Menu: TODO\", null); \/\/ TODO\n+        \/\/op.option(new BooleanOption(\"editable\", \"editable\", null)); \/\/ FIX how to set properties dynamically? Optional?\n+        op.option(\"Graphic: TODO\", null); \/\/ TODO\n+        op.option(\"Id: TODO\", null); \/\/ TODO\n+        op.option(\"Max Width: TODO\", null); \/\/ TODO\n+        op.option(\"Min Width: TODO\", null); \/\/ TODO\n+        op.option(\"Pref Width: TODO\", null); \/\/ TODO\n+        op.option(\"reorderable: TODO\", null); \/\/ TODO\n+        op.option(\"resizeable: TODO\", null); \/\/ TODO\n+        op.option(\"Sort Type: TODO\", null); \/\/ TODO\n+        op.option(\"sortable: TODO\", null); \/\/ TODO\n+        op.option(\"Sort Node: TODO\", null); \/\/ TODO\n+        op.option(\"Style: TODO\", null); \/\/ TODO\n+        op.option(\"Text: TODO\", null); \/\/ TODO\n+        op.option(\"User Data: TODO\", null); \/\/ TODO\n+        op.option(\"visible: TODO\", null); \/\/ TODO\n+        op.option(\": TODO\", null); \/\/ TODO\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/TableColumnPropertySheet.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.sheets;\n+\n+import javafx.scene.control.TextInputControl;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.FontOption;\n+import com.oracle.tools.fx.monkey.options.PromptTextOption;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+\n+\/**\n+ * Text Input Control Property Sheet.\n+ *\/\n+public class TextInputControlPropertySheet {\n+    public static void appendTo(OptionPane op, boolean multiLine, TextInputControl control) {\n+        op.section(\"TextInputControl\");\n+        op.option(new BooleanOption(\"editable\", \"editable\", control.editableProperty()));\n+        op.option(\"Font:\", new FontOption(\"font\", false, control.fontProperty()));\n+        op.option(\"Prompt Text:\", new PromptTextOption(\"promptText\", true, control.promptTextProperty()));\n+        op.option(\"Text:\", Options.textOption(\"text\", multiLine, true, control.textProperty()));\n+        op.option(\"Text Formatter: TODO\", null); \/\/ TODO\n+\n+        ControlPropertySheet.appendTo(op, control);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/TextInputControlPropertySheet.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.sheets;\n+\n+import javafx.scene.chart.XYChart;\n+import javafx.scene.control.Button;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.pages.XYChartPageBase;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.Utils;\n+\n+\/**\n+ * XYChart Property Sheet.\n+ *\/\n+public class XYChartPropertySheet {\n+    public static void appendTo(XYChartPageBase owner, OptionPane op, XYChart<?,Number> chart) {\n+        op.section(\"XYChart\");\n+        op.option(new BooleanOption(\"alternativeColumnFillVisible\", \"alternative column fill visible\", chart.alternativeColumnFillVisibleProperty()));\n+        op.option(new BooleanOption(\"alternativeRowFillVisible\", \"alternative row fill visible\", chart.alternativeRowFillVisibleProperty()));\n+        op.option(\"Data:\", Utils.buttons(\n+            FX.button(\"Add Series\", \"Adds random series to the chart\", owner::addSeries),\n+            FX.button(\"Remove\", \"Removes first series from the chart\", owner::removeSeries),\n+            FX.button(\"Add\/Remove\", \"Removes the first series then immediately adds that series back\", owner::addRemoveSeries)\n+        ));\n+        op.option(Utils.buttons(\n+            FX.button(\"Add Point\", \"Randomly adds a point random point to the first series\", owner::addPoint),\n+            FX.button(\"Remove\", \"Randomly removes a point from the first series\", owner::removePoint),\n+            FX.button(\"ΔX\", \"Changes the X value of a point\", owner::changePointX),\n+            FX.button(\"ΔY\", \"Changes the Y value of a point\", owner::changePointY),\n+            FX.button(\"Clear\", \"Removes all the points in the first series\", owner::clearPoints)\n+        ));\n+        \/\/ TODO context menu?\n+        op.option(new BooleanOption(\"horizontalGridLinesVisible\", \"horizontal grid lines visible\", chart.horizontalGridLinesVisibleProperty()));\n+        op.option(new BooleanOption(\"horizontalZeroLineVisible\", \"horizontal zero line visible\", chart.horizontalZeroLineVisibleProperty()));\n+        op.option(new BooleanOption(\"verticalGridLinesVisible\", \"vertical grid lines visible\", chart.verticalGridLinesVisibleProperty()));\n+        op.option(new BooleanOption(\"verticalZeroLineVisible\", \"vertical zero line visible\", chart.verticalZeroLineVisibleProperty()));\n+\n+        ChartPropertySheet.appendTo(op, chart);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/XYChartPropertySheet.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.SelectionMode;\n@@ -39,0 +41,1 @@\n+import javafx.scene.control.TreeTablePosition;\n@@ -41,0 +44,1 @@\n+import javafx.scene.input.ClipboardContent;\n@@ -60,0 +64,2 @@\n+        control.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);\n+        \/\/ TODO disable column reordering\n@@ -107,0 +113,1 @@\n+        FX.setPopupMenu(control, this::createPopupMenu);\n@@ -108,2 +115,1 @@\n-        Button addButton = new Button(\"Reload\");\n-        addButton.setOnAction((ev) -> reload());\n+        Button addButton = FX.button(\"Reload\", this::reload);\n@@ -119,0 +125,32 @@\n+    private ContextMenu createPopupMenu() {\n+        ContextMenu m = new ContextMenu();\n+        FX.item(m, \"Copy\", this::copy);\n+        return m;\n+    }\n+\n+    private void copy() {\n+        StringBuilder sb = null;\n+        List<TreeTablePosition<Entry, ?>> sel = control.getSelectionModel().getSelectedCells();\n+        for (TreeTablePosition<Entry, ?> p : sel) {\n+            Entry en = p.getTreeItem().getValue();\n+            if (en != null) {\n+                int col = p.getColumn();\n+\n+                if (sb == null) {\n+                    sb = new StringBuilder();\n+                }\n+\n+                String s = (col == 0) ? en.text.get() : en.text2.get();\n+                sb.append(s);\n+                sb.append(\"\\n\");\n+            }\n+        }\n+\n+        if (sb != null) {\n+            String text = sb.toString();\n+            ClipboardContent cc = new ClipboardContent();\n+            cc.putString(text);\n+            Clipboard.getSystemClipboard().setContent(cc);\n+        }\n+    }\n+\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/ClipboardViewer.java","additions":41,"deletions":3,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.util.Arrays;\n@@ -37,0 +36,1 @@\n+import javafx.scene.control.TextArea;\n@@ -41,0 +41,1 @@\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -47,0 +48,1 @@\n+    private final TextArea cssField;\n@@ -66,0 +68,3 @@\n+        cssField = new TextArea();\n+        cssField.setId(\"CssPlaygroundPaneCss\");\n+\n@@ -68,2 +73,1 @@\n-        Button fsLarger = new Button(\"+\");\n-        fsLarger.setOnAction((ev) -> fontSize(true));\n+        Button fsLarger = FX.button(\"+\", () -> fontSize(true));\n@@ -71,2 +75,1 @@\n-        Button fsSmaller = new Button(\"-\");\n-        fsSmaller.setOnAction((ev) -> fontSize(false));\n+        Button fsSmaller = FX.button(\"-\", () -> fontSize(false));\n@@ -81,0 +84,2 @@\n+        Button updateButton = FX.button(\"Update\", this::update);\n+\n@@ -91,1 +96,6 @@\n-        setCenter(p);\n+        r++;\n+        p.add(new Label(\"Custom CSS:\"), 0, r);\n+        p.add(updateButton, 1, r);\n+\n+        setTop(p);\n+        setCenter(cssField);\n@@ -141,0 +151,2 @@\n+        String css = cssField.getText();\n+\n@@ -151,0 +163,4 @@\n+\n+        sb.append(css);\n+        sb.append(\"\\n\");\n+\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/CssPlaygroundPane.java","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.tools;\n+\n+import java.awt.BorderLayout;\n+import java.awt.ComponentOrientation;\n+import java.awt.EventQueue;\n+import java.awt.GridLayout;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.WindowConstants;\n+import javafx.application.Platform;\n+import javafx.embed.swing.JFXPanel;\n+import javafx.geometry.NodeOrientation;\n+import javafx.scene.Scene;\n+import javafx.scene.control.TextArea;\n+\n+\/**\n+ * https:\/\/bugs.openjdk.org\/browse\/JDK-8317836\n+ *\/\n+public class EmbeddedFxTextArea {\n+    private static JFXPanel jfxPanel;\n+    private static TextArea textArea;\n+\n+    enum CompOri {\n+        UNKNOWN(ComponentOrientation.UNKNOWN),\n+        LEFT_TO_RIGHT(ComponentOrientation.LEFT_TO_RIGHT),\n+        RIGHT_TO_LEFT(ComponentOrientation.RIGHT_TO_LEFT);\n+\n+        public final ComponentOrientation ori;\n+\n+        CompOri(ComponentOrientation ori) {\n+            this.ori = ori;\n+        }\n+    }\n+\n+    public static void start() {\n+        Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n+            @Override\n+            public void uncaughtException(Thread t, Throwable e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        EventQueue.invokeLater(EmbeddedFxTextArea::initSwing);\n+    }\n+\n+    private static void initSwing() {\n+        JFrame frame = new JFrame();\n+\n+        jfxPanel = new JFXPanel();\n+\n+        Platform.runLater(EmbeddedFxTextArea::initFX);\n+\n+        JComboBox<CompOri> rtl = new JComboBox<CompOri>(new CompOri[] {\n+            CompOri.UNKNOWN,\n+            CompOri.LEFT_TO_RIGHT,\n+            CompOri.RIGHT_TO_LEFT\n+        });\n+        rtl.addActionListener((ev) -> {\n+            CompOri v = (CompOri)rtl.getSelectedItem();\n+            if (v != null) {\n+                ComponentOrientation ori = v.ori;\n+                frame.applyComponentOrientation(ori);\n+                frame.validate();\n+                frame.repaint();\n+            }\n+        });\n+\n+        JComboBox<NodeOrientation> rtl2 = new JComboBox<NodeOrientation>(new NodeOrientation[] {\n+            NodeOrientation.INHERIT,\n+            NodeOrientation.LEFT_TO_RIGHT,\n+            NodeOrientation.RIGHT_TO_LEFT\n+        });\n+        rtl2.addActionListener((ev) -> {\n+            NodeOrientation ori = (NodeOrientation)rtl2.getSelectedItem();\n+            Platform.runLater(() -> {\n+                textArea.setNodeOrientation(ori);\n+            });\n+        });\n+\n+        JPanel tb = new JPanel(new GridLayout(2, 2));\n+        tb.add(new JLabel(\"JFrame.componentOrientation:\"));\n+        tb.add(rtl);\n+        tb.add(new JLabel(\"FX.nodeOrientation\"));\n+        tb.add(rtl2);\n+\n+        JPanel p = new JPanel(new BorderLayout());\n+        p.add(jfxPanel, BorderLayout.CENTER);\n+        p.add(tb, BorderLayout.NORTH);\n+\n+        frame.setContentPane(p);\n+        frame.setSize(800, 500);\n+        frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+        frame.setTitle(\"FX TextArea Embedded in JFXPanel\");\n+        frame.setVisible(true);\n+    }\n+\n+    private static void initFX() {\n+        textArea = new TextArea(\"Arabic: العربية\\nHebrew: עברית\");\n+        textArea.setStyle(\"-fx-font-size:200%;\");\n+        jfxPanel.setScene(new Scene(textArea));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/EmbeddedFxTextArea.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.tools;\n+\n+import java.awt.BorderLayout;\n+import java.awt.ComponentOrientation;\n+import java.awt.EventQueue;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextArea;\n+import javax.swing.JTextField;\n+import javax.swing.border.EmptyBorder;\n+import javafx.embed.swing.SwingNode;\n+import javafx.geometry.NodeOrientation;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ToolBar;\n+import javafx.scene.layout.BorderPane;\n+\n+\/**\n+ * JTextArea tool for comparison with FX.\n+ *\/\n+public class EmbeddedJTextAreaWindow extends BorderPane {\n+    private final SwingNode swingNode;\n+    private JTextArea textArea;\n+    private JTextField textField;\n+\n+    public EmbeddedJTextAreaWindow() {\n+        swingNode = new SwingNode();\n+\n+        CheckBox rtl = new CheckBox(\"right-to-left (Swing ComponentOrientation)\");\n+        rtl.selectedProperty().addListener((s, p, c) -> {\n+            EventQueue.invokeLater(() -> {\n+                ComponentOrientation ori = c ? ComponentOrientation.RIGHT_TO_LEFT : ComponentOrientation.LEFT_TO_RIGHT;\n+                textArea.setComponentOrientation(ori);\n+                textField.setComponentOrientation(ori);\n+            });\n+        });\n+\n+        CheckBox rtl2 = new CheckBox(\"right-to-left (FX Scene.NodeOrientation)\");\n+        rtl2.selectedProperty().addListener((s, p, c) -> {\n+            \/\/ ha ha mirror images the text area, including text!\n+            NodeOrientation v = (c) ? NodeOrientation.RIGHT_TO_LEFT : NodeOrientation.LEFT_TO_RIGHT;\n+            getScene().setNodeOrientation(v);\n+        });\n+\n+        ToolBar tb = new ToolBar(rtl, rtl2);\n+\n+        setTop(tb);\n+        setCenter(swingNode);\n+\n+        EventQueue.invokeLater(() -> {\n+            textArea = new JTextArea(\"Arabic: العربية\\nHebrew: עברית\");\n+            textField = new JTextField(\"Arabic: العربية Hebrew: עברית\");\n+            JPanel p = new JPanel(new BorderLayout());\n+            JScrollPane sp = new JScrollPane(textArea);\n+            p.add(sp, BorderLayout.CENTER);\n+            p.add(textField, BorderLayout.SOUTH);\n+            p.setBorder(new EmptyBorder(10, 10, 10, 10));\n+            swingNode.setContent(p);\n+        });\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/EmbeddedJTextAreaWindow.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,2 +50,1 @@\n-        Button clearButton = new Button(\"Clear\");\n-        clearButton.setOnAction((ev) -> clear());\n+        Button clearButton = FX.button(\"Clear\", this::clear);\n@@ -69,1 +68,1 @@\n-        sb.append(\", character=\").append(ev.getCharacter());\n+        sb.append(\", character=\").append(fmt(ev.getCharacter()));\n@@ -122,0 +121,26 @@\n+\n+    private static String fmt(String s) {\n+        if (s == null) {\n+            return \"<null>\";\n+        } else if (s.length() == 1) {\n+            char c = s.charAt(0);\n+            if (c > 0x20) {\n+                return s;\n+            }\n+        }\n+\n+        StringBuilder sb = new StringBuilder();\n+        sb.append('<');\n+        for (int i = 0; i < s.length(); i++) {\n+            char c = s.charAt(i);\n+            sb.append(\"\\\\u\");\n+            sb.append(hex(c >> 4));\n+            sb.append(hex(c));\n+        }\n+        sb.append('>');\n+        return sb.toString();\n+    }\n+\n+    private static char hex(int nibble) {\n+        return \"0123456789ABCDEF\".charAt(nibble & 0x0f);\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/KeyboardEventViewer.java","additions":29,"deletions":4,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -103,2 +103,2 @@\n-        p.setHgrow(n, Priority.ALWAYS);\n-        p.setVgrow(n, Priority.ALWAYS);\n+        GridPane.setHgrow(n, Priority.ALWAYS);\n+        GridPane.setVgrow(n, Priority.ALWAYS);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/Native2AsciiPane.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import javafx.scene.control.TableColumnBase;\n+\n+\/**\n+ * Column Builder.\n+ *\/\n+public class ColumnBuilder<T extends TableColumnBase<?, ?>> {\n+    private final Supplier<TableColumnBase> generator;\n+    private final ArrayList<T> columns = new ArrayList<>();\n+    private T last;\n+    private int id;\n+\n+    public ColumnBuilder(Supplier<TableColumnBase> generator) {\n+        this.generator = generator;\n+    }\n+\n+    public ColumnBuilder<T> col(String name) {\n+        last = (T)generator.get();\n+        last.setText(name);\n+        columns.add(last);\n+        return this;\n+    }\n+\n+    public ColumnBuilder<T> min(double width) {\n+        last.setMinWidth(width);\n+        return this;\n+    }\n+\n+    public ColumnBuilder<T> max(double width) {\n+        last.setMaxWidth(width);\n+        return this;\n+    }\n+\n+    public ColumnBuilder<T> pref(double width) {\n+        last.setPrefWidth(width);\n+        return this;\n+    }\n+\n+    public ColumnBuilder<T> fixed(double width) {\n+        last.setMinWidth(width);\n+        last.setMaxWidth(width);\n+        return this;\n+    }\n+\n+    public ColumnBuilder<T> combine(int index, int count) {\n+        var tc = generator.get();\n+        tc.setText(\"N\" + (++id));\n+\n+        for (int i = 0; i < count; i++) {\n+            T c = columns.remove(index);\n+            tc.getColumns().add(c);\n+        }\n+        columns.add(index, (T)tc);\n+        return this;\n+    }\n+\n+    public List<T> asList() {\n+        return columns;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/ColumnBuilder.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import java.util.HashMap;\n+import java.util.Random;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.util.StringConverter;\n+\n+\/**\n+ * Elastic Data Row (With Randomly Generated Values)\n+ *\/\n+public class DataRow {\n+    private final HashMap<Object, ObjectProperty> values = new HashMap();\n+    private static StringConverter<Object> converter;\n+\n+    public DataRow() {\n+    }\n+\n+    public ObjectProperty getValue(Object key) {\n+        ObjectProperty rv = values.get(key);\n+        if (rv == null) {\n+            Object v = createValue();\n+            rv = new SimpleObjectProperty(v);\n+            values.put(key, rv);\n+        }\n+        return rv;\n+    }\n+\n+    private Object createValue() {\n+        \/\/ TODO doubles, longs, strings, integers, boolean\n+        return String.valueOf(new Random().nextInt());\n+    }\n+\n+    public static StringConverter<Object> converter() {\n+        if (converter == null) {\n+            converter = new StringConverter<>() {\n+                @Override\n+                public String toString(Object x) {\n+                    return x == null ? null : x.toString();\n+                }\n+\n+                @Override\n+                public Object fromString(String s) {\n+                    return s;\n+                }\n+            };\n+        }\n+        return converter;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/DataRow.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+import javafx.beans.property.Property;\n+import javafx.event.ActionEvent;\n+import javafx.event.EventHandler;\n@@ -30,0 +33,1 @@\n+import javafx.scene.Node;\n@@ -43,1 +47,1 @@\n-    public EnterTextDialog(Object owner, Consumer<String> onEdit) {\n+    public EnterTextDialog(Object owner, String initialText, Consumer<String> onEdit) {\n@@ -47,1 +51,1 @@\n-        textField = new TextArea();\n+        textField = new TextArea(initialText);\n@@ -49,2 +53,1 @@\n-        Button ok = new Button(\"OK\");\n-        ok.setOnAction((ev) -> {\n+        Button ok = FX.button(\"OK\", () -> {\n@@ -74,0 +77,12 @@\n+\n+    public static Runnable getRunnable(Node owner, Property<String> p) {\n+        if (p == null) {\n+            return null;\n+        }\n+        return () -> {\n+            String text = p.getValue();\n+            new EnterTextDialog(owner, text, (v) -> {\n+                p.setValue(v);\n+            }).show();\n+        };\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/EnterTextDialog.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import java.util.function.Supplier;\n+import javafx.application.Platform;\n+import javafx.event.EventHandler;\n@@ -30,0 +33,1 @@\n+import javafx.scene.control.Button;\n@@ -31,0 +35,2 @@\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.Control;\n@@ -37,0 +43,1 @@\n+import javafx.scene.control.Tooltip;\n@@ -38,0 +45,1 @@\n+import javafx.scene.input.MouseEvent;\n@@ -61,0 +69,8 @@\n+    public static final MenuItem menuItem(String text, Runnable r) {\n+        MenuItem m = new MenuItem(text);\n+        if (r != null) {\n+            m.setOnAction((ev) -> r.run());\n+        }\n+        return m;\n+    }\n+\n@@ -102,0 +118,6 @@\n+    public static final SeparatorMenuItem separator(ContextMenu m) {\n+        SeparatorMenuItem s = new SeparatorMenuItem();\n+        m.getItems().add(s);\n+        return s;\n+    }\n+\n@@ -110,0 +132,14 @@\n+    public static MenuItem item(ContextMenu cm, String text, Runnable action) {\n+        MenuItem mi = new MenuItem(text);\n+        applyMnemonic(mi);\n+        if (action != null) {\n+            mi.setOnAction((ev) -> action.run());\n+        }\n+        cm.getItems().add(mi);\n+        return mi;\n+    }\n+\n+    public static final void item(ContextMenu m, String name) {\n+        item(m, name, null);\n+    }\n+\n@@ -196,0 +232,63 @@\n+\n+    \/**\n+     * attach a popup menu to a node.\n+     * WARNING: sometimes, as the case is with TableView\/FxTable header,\n+     * the requested node gets created by the skin at some later time.\n+     * In this case, additional dance must be performed, see for example\n+     * FxTable.setHeaderPopupMenu()\n+     *\/\n+    \/\/ https:\/\/github.com\/andy-goryachev\/MP3Player\/blob\/8b0ff12460e19850b783b961f214eacf5e1cdaf8\/src\/goryachev\/fx\/FX.java#L1251\n+    public static void setPopupMenu(Node owner, Supplier<ContextMenu> generator) {\n+        if (owner == null) {\n+            throw new NullPointerException(\"cannot attach popup menu to null\");\n+        }\n+\n+        owner.setOnContextMenuRequested((ev) -> {\n+            if (generator != null) {\n+                ContextMenu m = generator.get();\n+                if (m != null) {\n+                    if (m.getItems().size() > 0) {\n+                        Platform.runLater(() -> {\n+                            \/\/ javafx does not dismiss the popup when the user\n+                            \/\/ clicks on the owner node\n+                            EventHandler<MouseEvent> li = new EventHandler<MouseEvent>() {\n+                                @Override\n+                                public void handle(MouseEvent event) {\n+                                    m.hide();\n+                                    owner.removeEventFilter(MouseEvent.MOUSE_PRESSED, this);\n+                                    event.consume();\n+                                }\n+                            };\n+\n+                            owner.addEventFilter(MouseEvent.MOUSE_PRESSED, li);\n+                            m.show(owner, ev.getScreenX(), ev.getScreenY());\n+                        });\n+                        ev.consume();\n+                    }\n+                }\n+            }\n+            ev.consume();\n+        });\n+    }\n+\n+    public static void tooltip(Control n, String text) {\n+        if (text != null) {\n+            n.setTooltip(new Tooltip(text));\n+        }\n+    }\n+\n+    public static Button button(String text, String tooltip, Runnable r) {\n+        Button b = button(text, r);\n+        tooltip(b, tooltip);\n+        return b;\n+    }\n+\n+    public static Button button(String text, Runnable r) {\n+        Button b = new Button(text);\n+        if (r == null) {\n+            b.setDisable(true);\n+        } else {\n+            b.setOnAction((ev) -> r.run());\n+        }\n+        return b;\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/FX.java","additions":100,"deletions":1,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -1,112 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.oracle.tools.fx.monkey.util;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.function.Consumer;\n-import javafx.scene.Node;\n-import javafx.scene.control.ComboBox;\n-import javafx.scene.text.Font;\n-\n-\/**\n- * Font Selector.\n- *\/\n-public class FontSelector {\n-    private final ComboBox<String> fontField = new ComboBox<>();\n-    private final ComboBox<Integer> sizeField;\n-\n-    public FontSelector(String id, Consumer<Font> client) {\n-        FX.name(fontField, id + \"_FONT\");\n-        fontField.getItems().setAll(collectFonts());\n-        fontField.getSelectionModel().selectedItemProperty().addListener((p) -> {\n-            update(client);\n-        });\n-\n-        sizeField = new ComboBox<>();\n-        FX.name(sizeField, id + \"_SIZE\");\n-        sizeField.getItems().setAll(\n-            1,\n-            2,\n-            3,\n-            4,\n-            5,\n-            6,\n-            7,\n-            8,\n-            9,\n-            10,\n-            11,\n-            12,\n-            24,\n-            48,\n-            72,\n-            144\n-        );\n-        sizeField.getSelectionModel().selectedItemProperty().addListener((x) -> {\n-            update(client);\n-        });\n-    }\n-\n-    protected void update(Consumer<Font> client) {\n-        Font f = getFont();\n-        client.accept(f);\n-    }\n-\n-    public Node fontNode() {\n-        return fontField;\n-    }\n-\n-    public Node sizeNode() {\n-        return sizeField;\n-    }\n-\n-    public void select(String name) {\n-        fontField.getSelectionModel().select(name);\n-    }\n-\n-    public Font getFont() {\n-        String name = fontField.getSelectionModel().getSelectedItem();\n-        if (name == null) {\n-            return null;\n-        }\n-        Integer size = sizeField.getSelectionModel().getSelectedItem();\n-        if (size == null) {\n-            size = 12;\n-        }\n-        return new Font(name, size);\n-    }\n-\n-    protected List<String> collectFonts() {\n-        ArrayList<String> rv = new ArrayList<>(Font.getFontNames());\n-        \/\/rv.add(0, null);\n-        return rv;\n-    }\n-\n-    public void selectSystemFont() {\n-        FX.select(fontField, \"System Regular\"); \/\/ windows?\n-        FX.select(sizeField, 12);\n-    }\n-}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/FontSelector.java","additions":0,"deletions":112,"binary":false,"changes":112,"status":"deleted"},{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+\/**\n+ * Various formatting methods.\n+ *\/\n+public class Formats {\n+    public static String formatDouble(Number value) {\n+        if (value == null) {\n+            return \"null\";\n+        }\n+        double v = value.doubleValue();\n+        if (v == Math.rint(v)) {\n+            return String.valueOf(value.longValue());\n+        }\n+        return String.valueOf(v);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/Formats.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import javafx.scene.canvas.Canvas;\n+import javafx.scene.canvas.GraphicsContext;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n+import javafx.scene.image.PixelWriter;\n+import javafx.scene.image.WritableImage;\n+import javafx.scene.paint.Color;\n+\n+\/**\n+ * Image Tools.\n+ *\/\n+public class ImageTools {\n+    public static ImageView createImageView(Color c, int w, int h) {\n+        Image im = createImage(c, w, h);\n+        return new ImageView(im);\n+    }\n+\n+    public static Image createImage(Color c, int w, int h) {\n+        WritableImage im = new WritableImage(w, h);\n+        PixelWriter wr = im.getPixelWriter();\n+\n+        for (int y = 0; y < h; y++) {\n+            for (int x = 0; x < w; x++) {\n+                wr.setColor(x, y, c);\n+            }\n+        }\n+\n+        return im;\n+    }\n+\n+    public static Image createImage(String s, int w, int h) {\n+        byte[] hash;\n+        try {\n+            hash = MessageDigest.getInstance(\"sha-256\").digest(s.getBytes());\n+        } catch (NoSuchAlgorithmException e) {\n+            e.printStackTrace();\n+            hash = new byte[3];\n+        }\n+        Color color = Color.rgb(hash[0] & 0xff, hash[1] & 0xff, hash[2] & 0xff);\n+        Canvas c = new Canvas(w, h);\n+        GraphicsContext g = c.getGraphicsContext2D();\n+        g.setFill(color);\n+        g.fillRect(0, 0, w, h);\n+        return c.snapshot(null, null);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/ImageTools.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -1,147 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.oracle.tools.fx.monkey.util;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.function.Consumer;\n-import java.util.function.Supplier;\n-import javafx.scene.Node;\n-import javafx.scene.control.ComboBox;\n-import javafx.util.StringConverter;\n-\n-\/**\n- * General purpose item selector.\n- *\/\n-public class ItemSelector<T> {\n-    public static record Pair(String display, Object value) { }\n-\n-    private final ComboBox<Pair> field = new ComboBox<>();\n-\n-    public ItemSelector(String id, Consumer<T> client, Object... displayValuePairs) {\n-        FX.name(field, \"PosSelector\");\n-        field.getItems().setAll(toPairs(displayValuePairs));\n-        field.setConverter(new StringConverter<Pair>() {\n-            @Override\n-            public String toString(Pair x) {\n-                return toDisplay(x);\n-            }\n-\n-            @Override\n-            public Pair fromString(String text) {\n-                return null;\n-            }\n-        });\n-\n-        field.getSelectionModel().selectFirst();\n-\n-        field.getSelectionModel().selectedItemProperty().addListener((p) -> {\n-            Object v = field.getSelectionModel().getSelectedItem();\n-            T text = toValue(v);\n-            client.accept(text);\n-        });\n-    }\n-\n-    public T getSelectedItem() {\n-        Object x = field.getSelectionModel().getSelectedItem();\n-        T v = toValue(x);\n-        return v;\n-    }\n-\n-    private Pair[] toPairs(Object[] pairs) {\n-        ArrayList<Pair> a = new ArrayList<>();\n-        for (int i = 0; i < pairs.length; ) {\n-            String display = (String)pairs[i++];\n-            T value = (T)pairs[i++];\n-            a.add(new Pair(display, value));\n-        }\n-        return a.toArray(new Pair[a.size()]);\n-    }\n-\n-    public Node node() {\n-        return field;\n-    }\n-\n-    public void select(Object item) {\n-        int ix = indexOf(item);\n-        if (ix >= 0) {\n-            field.getSelectionModel().select(ix);\n-        }\n-    }\n-\n-    private int indexOf(Object item) {\n-        List<Pair> list = field.getItems();\n-        int sz = list.size();\n-        for (int i = 0; i < sz; i++) {\n-            Object x = list.get(i);\n-            if (eq(item, x)) {\n-                return i;\n-            } else if (x instanceof Pair p) {\n-                if (eq(item, p.display()) || eq(item, p.value())) {\n-                    return i;\n-                }\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    private static boolean eq(Object a, Object b) {\n-        if (a == null) {\n-            return (b == null);\n-        } else {\n-            return a.equals(b);\n-        }\n-    }\n-\n-    public void selectFirst() {\n-        field.getSelectionModel().selectFirst();\n-    }\n-\n-    protected String toDisplay(Object x) {\n-        if (x == null) {\n-            return null;\n-        } else if (x instanceof Pair p) {\n-            return p.display();\n-        } else {\n-            return x.toString();\n-        }\n-    }\n-\n-    protected T toValue(Object x) {\n-        if (x instanceof Pair p) {\n-            return (T)p.value();\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    public void add(String display, T value) {\n-        field.getItems().add(new Pair(display, value));\n-    }\n-\n-    public void add(String display, Supplier<T> value) {\n-        field.getItems().add(new Pair(display, value));\n-    }\n-}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/ItemSelector.java","additions":0,"deletions":147,"binary":false,"changes":147,"status":"deleted"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import java.util.Objects;\n+\n+\/**\n+ * Named value.\n+ * @param <V> the type of the value\n+ *\/\n+public class NamedValue<V> {\n+    private final String display;\n+    private final V value;\n+\n+    \/**\n+     * Constructor.\n+     * @param display the display name\n+     * @param value the value\n+     *\/\n+    public NamedValue(String display, V value) {\n+        Objects.nonNull(display);\n+        this.display = display;\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return display;\n+    }\n+\n+    public String getDisplay() {\n+        return display;\n+    }\n+\n+    public V getValue() {\n+        return value;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int h = NamedValue.class.hashCode();\n+        h = 31 * h + display.hashCode();\n+        h = 31 * h + (value != null ? value.hashCode() : 0);\n+        return h;\n+    }\n+\n+     @Override\n+     public boolean equals(Object x) {\n+         if(x == this) {\n+             return true;\n+         } else if(x instanceof NamedValue v) {\n+             return\n+                 Objects.equals(display, v.display) &&\n+                 Objects.equals(value, v.value);\n+         }\n+         return false;\n+     }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/NamedValue.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import javafx.scene.control.ComboBox;\n+\n+\/**\n+ * Unidirectional Object Selector.\n+ *\/\n+public class ObjectSelector<T> extends ComboBox<NamedValue<T>> {\n+    public ObjectSelector(String name, Consumer<T> client) {\n+        FX.name(this, name);\n+\n+        getSelectionModel().selectedItemProperty().addListener((s, pr, c) -> {\n+            T v = c.getValue();\n+            try {\n+                client.accept(v);\n+            } catch (Throwable e) {\n+                e.printStackTrace();\n+            }\n+        });\n+    }\n+\n+    public void clearChoices() {\n+        getItems().clear();\n+    }\n+\n+    public void addChoice(String name, T item) {\n+        getItems().add(new NamedValue<>(name, item));\n+    }\n+\n+    public void addChoiceSupplier(String name, Supplier<T> gen) {\n+        getItems().add(new NamedValue<>(name, null) {\n+            @Override\n+            public T getValue() {\n+                return gen.get();\n+            }\n+        });\n+    }\n+\n+    public void select(int ix) {\n+        if ((ix >= 0) && (ix < getItems().size())) {\n+            getSelectionModel().select(ix);\n+        }\n+    }\n+\n+    public void selectFirst() {\n+        select(0);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/ObjectSelector.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -27,0 +27,1 @@\n+import java.util.List;\n@@ -28,0 +29,1 @@\n+import javafx.geometry.Orientation;\n@@ -29,0 +31,1 @@\n+import javafx.scene.control.Accordion;\n@@ -30,0 +33,2 @@\n+import javafx.scene.control.Separator;\n+import javafx.scene.control.TitledPane;\n@@ -35,4 +40,1 @@\n-public class OptionPane extends GridPane {\n-    private int row;\n-    private int column;\n-    private static final Insets MARGIN = new Insets(1, 4, 0, 4);\n+public class OptionPane extends Accordion {\n@@ -41,0 +43,1 @@\n+        FX.name(this, \"OptionPane\");\n@@ -44,1 +47,1 @@\n-        add(new Label(text));\n+        lastSection().add(new Label(text));\n@@ -48,1 +51,8 @@\n-        add(n);\n+        lastSection().add(n);\n+    }\n+\n+    public void option(String text, Node n) {\n+        lastSection().add(new Label(text));\n+        if (n != null) {\n+            lastSection().add(n);\n+        }\n@@ -52,4 +62,54 @@\n-        add(n, column, row++);\n-        setMargin(n, MARGIN);\n-        setFillHeight(n, Boolean.TRUE);\n-        setFillWidth(n, Boolean.TRUE);\n+        lastSection().add(n);\n+    }\n+\n+    public void separator() {\n+        lastSection().add(new Separator(Orientation.HORIZONTAL));\n+    }\n+\n+    public void section(String name) {\n+        section(name, new OptionGridPane());\n+    }\n+\n+    public void section(String name, OptionGridPane content) {\n+        TitledPane t = new TitledPane(name, content);\n+        getPanes().add(t);\n+\n+        List<TitledPane> panes = getPanes();\n+        if (panes.size() == 1) {\n+            setExpandedPane(panes.get(0));\n+        }\n+    }\n+\n+    private OptionGridPane lastSection() {\n+        List<TitledPane> panes = getPanes();\n+        if (panes.size() == 0) {\n+            section(\"Properties\");\n+        }\n+        TitledPane t = panes.get(panes.size() - 1);\n+        return (OptionGridPane)t.getContent();\n+    }\n+\n+    private static class OptionGridPane extends GridPane {\n+        private int row;\n+        private int column;\n+        private static final Insets MARGIN = new Insets(1, 4, 0, 4);\n+        private static final Insets PADDING = new Insets(0, 0, 2, 0);\n+\n+        public OptionGridPane() {\n+            setPadding(PADDING);\n+        }\n+\n+        public void label(String text) {\n+            add(new Label(text));\n+        }\n+\n+        public void option(Node n) {\n+            add(n);\n+        }\n+\n+        public void add(Node n) {\n+            add(n, column, row++);\n+            setMargin(n, MARGIN);\n+            setFillHeight(n, Boolean.TRUE);\n+            setFillWidth(n, Boolean.TRUE);\n+        }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/OptionPane.java","additions":70,"deletions":10,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.oracle.tools.fx.monkey.util;\n-\n-import java.util.function.Consumer;\n-import javafx.geometry.Pos;\n-import javafx.scene.Node;\n-import javafx.scene.control.ComboBox;\n-\n-\/**\n- * Alignment Option Selector.\n- *\/\n-public class PosSelector {\n-    private final ComboBox<Pos> field = new ComboBox<>();\n-\n-    public PosSelector(Consumer<Pos> client) {\n-        FX.name(field, \"PosSelector\");\n-        field.getItems().setAll(Pos.values());\n-        field.getSelectionModel().selectedItemProperty().addListener((p) -> {\n-            Pos v = field.getSelectionModel().getSelectedItem();\n-            client.accept(v);\n-        });\n-    }\n-\n-    public Node node() {\n-        return field;\n-    }\n-\n-    public void select(Pos v) {\n-        field.getSelectionModel().select(v);\n-    }\n-}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/PosSelector.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import javafx.scene.Node;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Path;\n+import javafx.scene.shape.PathElement;\n+import javafx.scene.text.TextFlow;\n+\n+\/**\n+ * Shows caret paths for each text position.\n+ *\/\n+public class ShowCaretPaths extends Path {\n+    public ShowCaretPaths() {\n+        setStrokeWidth(1);\n+        setStroke(Color.RED);\n+        setManaged(false);\n+    }\n+\n+    \/**\n+     * Creates ShowCaretPaths Node for the given TextFlow node.\n+     * The Text node must be a child of a Group.\n+     * @param owner the Text node to show character runs for\n+     *\/\n+    public static void createFor(TextFlow owner) {\n+        ShowCaretPaths p = new ShowCaretPaths();\n+        int len = FX.getTextLength(owner);\n+        for (int i = 0; i < len; i++) {\n+            PathElement[] es = owner.caretShape(i, true);\n+            p.getElements().addAll(es);\n+        }\n+        owner.getChildren().add(p);\n+    }\n+\n+    public static void remove(Pane p) {\n+        for (Node ch : p.getChildren()) {\n+            if (ch instanceof ShowCaretPaths) {\n+                p.getChildren().remove(ch);\n+                return;\n+            }\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/ShowCaretPaths.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import java.util.List;\n+import javafx.application.Platform;\n@@ -31,0 +33,1 @@\n+import javafx.scene.Parent;\n@@ -46,10 +49,28 @@\n-    public static Group createFor(Text textNode) {\n-        ShowCharacterRuns r = new ShowCharacterRuns();\n-        int len = textNode.getText().length();\n-        for (int i = 0; i < len; i++) {\n-            PathElement[] caret = textNode.caretShape(i, true);\n-            if (caret.length == 4) {\n-                caret = new PathElement[] {\n-                    caret[0],\n-                    caret[1]\n-                };\n+    \/**\n+     * Creates ShowCharacterRuns Node for the given Text node.\n+     * The Text node must be a child of a Group.\n+     * @param owner the Text node to show character runs for\n+     *\/\n+    public static void createFor(Text owner) {\n+        Platform.runLater(() -> {\n+            List<Node> cs = getChildren(owner);\n+            ShowCharacterRuns r = new ShowCharacterRuns();\n+            int len = owner.getText().length();\n+            for (int i = 0; i < len; i++) {\n+                PathElement[] caret = owner.caretShape(i, true);\n+                if (caret.length == 4) {\n+                    caret = new PathElement[] {\n+                        caret[0],\n+                        caret[1]\n+                    };\n+                }\n+\n+                Bounds caretBounds = new Path(caret).getLayoutBounds();\n+                double x = caretBounds.getMaxX();\n+                double y = (caretBounds.getMinY() + caretBounds.getMaxY()) \/ 2;\n+                HitInfo hit = owner.hitTest(new Point2D(x, y));\n+                Path p = new Path(owner.rangeShape(hit.getCharIndex(), hit.getCharIndex() + 1));\n+                Color c = color(i);\n+                p.setFill(c);\n+                p.setStroke(c);\n+                r.getChildren().add(p);\n@@ -57,0 +78,3 @@\n+            cs.add(r);\n+        });\n+    }\n@@ -58,12 +82,30 @@\n-            Bounds caretBounds = new Path(caret).getLayoutBounds();\n-            double x = caretBounds.getMaxX();\n-            double y = (caretBounds.getMinY() + caretBounds.getMaxY()) \/ 2;\n-            HitInfo hit = textNode.hitTest(new Point2D(x, y));\n-            Path cs = new Path(textNode.rangeShape(hit.getCharIndex(), hit.getCharIndex() + 1));\n-            \/\/System.err.println(i + \" \" + cs); \/\/ FIX\n-            Color c = color(i);\n-            cs.setFill(c);\n-            cs.setStroke(c);\n-            r.getChildren().add(cs);\n-        }\n-        return r;\n+    \/**\n+     * Creates ShowCharacterRuns Node for the given TextFlow node.\n+     * The Text node must be a child of a Group.\n+     * @param owner the Text node to show character runs for\n+     *\/\n+    public static void createFor(TextFlow owner) {\n+        Platform.runLater(() -> {\n+            ShowCharacterRuns r = new ShowCharacterRuns();\n+            int len = FX.getTextLength(owner);\n+            for (int i = 0; i < len; i++) {\n+                PathElement[] caret = owner.caretShape(i, true);\n+                if (caret.length == 4) {\n+                    caret = new PathElement[] {\n+                        caret[0],\n+                        caret[1]\n+                    };\n+                }\n+\n+                Bounds caretBounds = new Path(caret).getLayoutBounds();\n+                double x = caretBounds.getMaxX();\n+                double y = (caretBounds.getMinY() + caretBounds.getMaxY()) \/ 2;\n+                HitInfo hit = owner.hitTest(new Point2D(x, y));\n+                Path cs = new Path(owner.rangeShape(hit.getCharIndex(), hit.getCharIndex() + 1));\n+                Color c = color(i);\n+                cs.setFill(c);\n+                cs.setStroke(c);\n+                r.getChildren().add(cs);\n+            }\n+            owner.getChildren().add(r);\n+        });\n@@ -72,10 +114,6 @@\n-    public static Group createFor(TextFlow textNode) {\n-        ShowCharacterRuns r = new ShowCharacterRuns();\n-        int len = getTextLength(textNode);\n-        for (int i = 0; i < len; i++) {\n-            PathElement[] caret = textNode.caretShape(i, true);\n-            if (caret.length == 4) {\n-                caret = new PathElement[] {\n-                    caret[0],\n-                    caret[1]\n-                };\n+    public static void remove(Node owner) {\n+        List<Node> cs = getChildren(owner);\n+        for (Node ch : cs) {\n+            if (ch instanceof ShowCharacterRuns r) {\n+                cs.remove(r);\n+                return;\n@@ -83,0 +121,2 @@\n+        }\n+    }\n@@ -84,10 +124,7 @@\n-            Bounds caretBounds = new Path(caret).getLayoutBounds();\n-            double x = caretBounds.getMaxX();\n-            double y = (caretBounds.getMinY() + caretBounds.getMaxY()) \/ 2;\n-            HitInfo hit = textNode.hitTest(new Point2D(x, y));\n-            Path cs = new Path(textNode.rangeShape(hit.getCharIndex(), hit.getCharIndex() + 1));\n-            System.err.println(i + \" \" + cs); \/\/ FIX\n-            Color c = color(i);\n-            cs.setFill(c);\n-            cs.setStroke(c);\n-            r.getChildren().add(cs);\n+    private static List<Node> getChildren(Node n) {\n+        if (n instanceof TextFlow f) {\n+            return f.getChildren();\n+        }\n+        Parent p = n.getParent();\n+        if (p instanceof Group g) {\n+            return g.getChildren();\n@@ -95,1 +132,1 @@\n-        return r;\n+        return null;\n@@ -108,11 +145,0 @@\n-\n-    \/** TextFlow.getTextLength() *\/\n-    private static int getTextLength(TextFlow f) {\n-        int len = 0;\n-        for (Node n: f.getChildrenUnmodifiable()) {\n-            if (n instanceof Text t) {\n-                len += t.getText().length();\n-            }\n-        }\n-        return len;\n-    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/ShowCharacterRuns.java","additions":81,"deletions":55,"binary":false,"changes":136,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,3 @@\n-    public TestPaneBase() {\n+    public TestPaneBase(String name) {\n+        FX.name(this, name);\n+\n@@ -80,5 +82,1 @@\n-        Button b = new Button(name);\n-        b.setOnAction((ev) -> {\n-            action.run();\n-        });\n-\n+        Button b = FX.button(name, action);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/TestPaneBase.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,153 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.oracle.tools.fx.monkey.util;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.function.Consumer;\n-import javafx.scene.Node;\n-import javafx.scene.control.ComboBox;\n-import javafx.util.StringConverter;\n-\n-\/**\n- * General purpose text selector.\n- *\/\n-public class TextSelector {\n-    public static record Pair(String display, String value) { }\n-\n-    private final ComboBox<Object> field = new ComboBox<>();\n-\n-    public TextSelector(String id, Consumer<String> client, Object... items) {\n-        FX.name(field, id);\n-        field.getItems().setAll(items);\n-        field.setConverter(new StringConverter<Object>() {\n-            @Override\n-            public String toString(Object x) {\n-                return toDisplay(x);\n-            }\n-\n-            @Override\n-            public Object fromString(String text) {\n-                return text;\n-            }\n-        });\n-        field.getSelectionModel().selectedItemProperty().addListener((p) -> {\n-            String text = getSelectedText();\n-            client.accept(text);\n-        });\n-    }\n-\n-    public static TextSelector fromPairs(String id, Consumer<String> client, Object... pairs) {\n-        ArrayList<Pair> a = new ArrayList<>();\n-        for (int i = 0; i < pairs.length;) {\n-            String display = (String)pairs[i++];\n-            String value = (String)pairs[i++];\n-            a.add(new Pair(display, value));\n-        }\n-\n-        return new TextSelector(id, client, a.toArray());\n-    }\n-\n-    public Node node() {\n-        return field;\n-    }\n-\n-    public void select(Object item) {\n-        int ix = indexOf(item);\n-        if (ix >= 0) {\n-            field.getSelectionModel().select(ix);\n-        }\n-    }\n-\n-    private int indexOf(Object item) {\n-        List<Object> list = field.getItems();\n-        int sz = list.size();\n-        for (int i = 0; i < sz; i++) {\n-            Object x = list.get(i);\n-            if (eq(item, x)) {\n-                return i;\n-            } else if (x instanceof Pair p) {\n-                if (eq(item, p.display()) || eq(item, p.value())) {\n-                    return i;\n-                }\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    private static boolean eq(Object a, Object b) {\n-        if (a == null) {\n-            return (b == null);\n-        } else {\n-            return a.equals(b);\n-        }\n-    }\n-\n-    public void selectFirst() {\n-        field.getSelectionModel().selectFirst();\n-    }\n-\n-    protected String toDisplay(Object x) {\n-        if (x == null) {\n-            return null;\n-        } else if (x instanceof Pair p) {\n-            return p.display();\n-        } else {\n-            return x.toString();\n-        }\n-    }\n-\n-    protected String toValue(Object x) {\n-        if (x == null) {\n-            return null;\n-        } else if (x instanceof Pair p) {\n-            return p.value();\n-        } else {\n-            return x.toString();\n-        }\n-    }\n-\n-    public void addPair(String display, String value) {\n-        field.getItems().add(new Pair(display, value));\n-    }\n-\n-    public String getSelectedText() {\n-        Object v = field.getSelectionModel().getSelectedItem();\n-        return toValue(v);\n-    }\n-\n-    public void removeChoice(String name) {\n-        int ix = 0;\n-        for (Object x: field.getItems()) {\n-            String s = toDisplay(x);\n-            if (Objects.equals(name, s)) {\n-                field.getItems().remove(ix);\n-                return;\n-            }\n-            ix++;\n-        }\n-    }\n-}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/TextSelector.java","additions":0,"deletions":153,"binary":false,"changes":153,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.util.function.Consumer;\n@@ -33,1 +32,1 @@\n-public class Templates {\n+public class TextTemplates {\n@@ -37,11 +36,1 @@\n-\n-    public static TextSelector promptChoice(String id, Consumer<String> client) {\n-        return TextSelector.fromPairs(\n-            id,\n-            client,\n-            \"null\", null,\n-            \"Short\", \"yo\",\n-            \"Long\", \"<beg-0123456789012345678901234567890123456789-|-0123456789012345678901234567890123456789-end>\",\n-            \"RTL\", \"العربية\"\n-        );\n-    }\n+    public static final String RIGHT_TO_LEFT = \"العربية\" + \"העברעאיש (עברית) איז אַ סעמיטישע שפּראַך. מען שרייבט העברעאיש מיט די 22 אותיות פוHello, world!נעם אלף בית לשון קודש. די\";\n@@ -51,0 +40,1 @@\n+            \"Short\", \"short\",\n@@ -52,4 +42,1 @@\n-            \"Short\", \"yo\",\n-            \"Empty\", \"\",\n-            \"null\", null,\n-            \"Right-to-Left\", \"العربية\" + \"העברעאיש (עברית) איז אַ סעמיטישע שפּראַך. מען שרייבט העברעאיש מיט די 22 אותיות פונעם אלף בית לשון קודש. די\",\n+            \"Right-to-Left\", RIGHT_TO_LEFT,\n@@ -57,1 +44,0 @@\n-            \/\/\"Writing Systems (Clean)\", WritingSystemsDemo.getText(false),\n@@ -65,1 +51,4 @@\n-        };\n+            \"Single Newline\", \"\\n\",\n+            \"<empty>\", \"\",\n+            \"<null>\", null,\n+       };\n@@ -70,0 +59,1 @@\n+            \"Short\", \"short\",\n@@ -71,3 +61,0 @@\n-            \"Short\", \"yo\",\n-            \"Empty\", \"\",\n-            \"null\", null,\n@@ -80,1 +67,0 @@\n-            \"Single Newline\", \"\\n\",\n@@ -83,0 +69,2 @@\n+            \"<empty>\", \"\",\n+            \"<null>\", null,\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/TextTemplates.java","additions":12,"deletions":24,"binary":false,"changes":36,"previous_filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/Templates.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,5 @@\n+import java.util.function.BiConsumer;\n+import javafx.scene.Node;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+\n@@ -31,8 +36,0 @@\n-    public static Object[] combine(Object[] src, Object ... pairs) {\n-        int sz = src.length + pairs.length;\n-        Object[] rv = new Object[sz];\n-        System.arraycopy(src, 0, rv, 0, src.length);\n-        System.arraycopy(pairs, 0, rv, src.length, pairs.length);\n-        return rv;\n-    }\n-\n@@ -45,0 +42,14 @@\n+\n+    public static void fromPairs(Object[] pairs, BiConsumer<String, String> client) {\n+        for (int i = 0; i < pairs.length;) {\n+            String k = (String)pairs[i++];\n+            String v = (String)pairs[i++];\n+            client.accept(k, v);\n+        }\n+    }\n+\n+    public static Pane buttons(Node ... nodes) {\n+        HBox b = new HBox(nodes);\n+        b.setSpacing(2);\n+        return b;\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/Utils.java","additions":20,"deletions":9,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+        \"Aramaic\", \"Classical Syriac: ܐܪܡܝܐ, Old Aramaic: 𐤀𐤓𐤌𐤉𐤀; Imperial Aramaic: 𐡀𐡓𐡌𐡉𐡀; Jewish Babylonian Aramaic: אֲרָמִית‎\",\n@@ -38,0 +39,1 @@\n+        \"Azerbaijanis\", \"آذربایجانلیلار\",\n@@ -50,0 +52,1 @@\n+        \"Dhivehi\", \"ދިވެހި\",\n@@ -59,0 +62,1 @@\n+        \"Hausa\", \"هَرْشٜن هَوْسَ\",\n@@ -65,0 +69,1 @@\n+        \"Kashmiri\", \"كٲشُرकॉशुर𑆑𑆳𑆯𑆶𑆫𑇀\",\n@@ -67,0 +72,1 @@\n+        \"Khowar\", \"کھووار زبان\",\n@@ -69,0 +75,1 @@\n+        \"Kurdish\", \"Kurdî \/ کوردی\",\n@@ -80,1 +87,0 @@\n-        \"Punjabi\", \"ਪੰਜਾਬੀپن٘جابی\",\n@@ -82,0 +88,2 @@\n+        \"Pashto\", \"پښتو\",\n+        \"Punjabi\", \"ਪੰਜਾਬੀپن٘جابی\",\n@@ -86,0 +94,1 @@\n+        \"Sindhi\", \"سِنڌِي‎ • सिन्धी\",\n@@ -89,1 +98,1 @@\n-        \"Tamil\", \"Tamiḻ\",\n+        \"Tamil\", \"தமிழ்\",\n@@ -99,0 +108,1 @@\n+        \"Yiddish\", \"ייִדיש יידיש  אידיש\"\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/WritingSystemsDemo.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"}]}