{"files":[{"patch":"@@ -33,1 +33,1 @@\n- *\n+ * Double option based on Spinner.\n@@ -38,2 +38,2 @@\n-    public DoubleSpinner(String name, DoubleProperty p, double min, double max, double amountToStepBy) {\n-        super(min, max, p.get(), amountToStepBy);\n+    public DoubleSpinner(String name, double min, double max, double amountToStepBy, DoubleProperty p) {\n+        super(min, max, p == null ? min : p.get(), amountToStepBy);\n@@ -44,1 +44,4 @@\n-        property.bindBidirectional(p);\n+        if (p != null) {\n+            property.bindBidirectional(p);\n+        }\n+\n@@ -49,0 +52,4 @@\n+\n+    public DoubleSpinner(String name, double min, double max, double amountToStepBy) {\n+        this(name, min, max, amountToStepBy, null);\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/DoubleSpinner.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-        super(min, max, p.get());\n+        super(min, max, p == null ? min : p.get());\n@@ -44,1 +44,3 @@\n-        property.bindBidirectional(p);\n+        if (p != null) {\n+            property.bindBidirectional(p);\n+        }\n@@ -50,0 +52,5 @@\n+\n+    public IntOption(String name, int min, int max, int value) {\n+        this(name, min, max, null);\n+        getValueFactory().setValue(value);\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/IntOption.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.oracle.tools.fx.monkey.options;\n-\n-import javafx.beans.property.StringProperty;\n-import com.oracle.tools.fx.monkey.util.TextTemplates;\n-import com.oracle.tools.fx.monkey.util.Utils;\n-\n-\/**\n- * Prompt Text Option Bound to a Property.\n- *\/\n-public class PromptTextOption extends TextChoiceOption {\n-    \/\/ TOOD or move it under some kind of template?\n-    public PromptTextOption(String name, boolean allowEditButton, StringProperty p) {\n-        super(name, allowEditButton, p);\n-        Utils.fromPairs(TextTemplates.singleLineTextPairs(), (k, v) -> addChoice(k, v));\n-    }\n-}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/PromptTextOption.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"},{"patch":"@@ -28,0 +28,1 @@\n+import java.text.Format;\n@@ -29,2 +30,5 @@\n-import javafx.scene.control.CheckBox;\n-import javafx.scene.control.ComboBox;\n+import javafx.beans.binding.Bindings;\n+import javafx.beans.binding.IntegerBinding;\n+import javafx.beans.property.ReadOnlyProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.collections.FXCollections;\n@@ -32,0 +36,1 @@\n+import javafx.scene.control.SpinnerValueFactory;\n@@ -33,1 +38,6 @@\n-import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.DoubleSpinner;\n+import com.oracle.tools.fx.monkey.options.DurationOption;\n+import com.oracle.tools.fx.monkey.sheets.ControlPropertySheet;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n+import com.oracle.tools.fx.monkey.util.ObjectSelector;\n@@ -40,1 +50,0 @@\n-\/\/ TODO convert to final control (use value factory)\n@@ -43,1 +52,0 @@\n-        DOUBLE,\n@@ -45,0 +53,3 @@\n+        DOUBLE,\n+        LIST,\n+        NULL\n@@ -46,1 +57,0 @@\n-\n@@ -48,7 +58,4 @@\n-        NULL(\"null\"),\n-        PERCENT(\"0.##%\"),\n-        QUOTED(\"\\\"quoted\\\"\"),\n-        ;\n-        private final String text;\n-        Converter(String text) { this.text = text; }\n-        @Override public String toString() { return text; }\n+        NULL,\n+        NUMBER,\n+        PERCENT,\n+        QUOTED\n@@ -57,4 +64,11 @@\n-    private final ComboBox<Mode> modeChoice;\n-    private final ComboBox<Converter> converterChoice;\n-    private final CheckBox editable;\n-    private Spinner<Number> control;\n+    private final Spinner<Object> control;\n+    private final SimpleBooleanProperty wrapAround = new SimpleBooleanProperty();\n+    private final ObjectSelector<Mode> mode;\n+    private final ObjectSelector<Converter> converter;\n+    private final BooleanOption wrapOption;\n+    private final DoubleSpinner minOption;\n+    private final DoubleSpinner maxOption;\n+    private final DoubleSpinner stepOption;\n+    private static final Format NUMBER = new DecimalFormat(\"0.##\");\n+    private static final Format PERCENT = new DecimalFormat(\"0.##%\");\n+    private static final Format QUOTED = new DecimalFormat(\"\\\".##\\\"\");\n@@ -65,6 +79,4 @@\n-        modeChoice = new ComboBox<>();\n-        FX.name(modeChoice, \"modeChoice\");\n-        modeChoice.getItems().addAll(Mode.values());\n-        modeChoice.setEditable(false);\n-        modeChoice.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            updateControl();\n+        control = new Spinner<Object>();\n+        control.valueProperty().addListener((s,p,c) -> {\n+            \/\/ TODO show in UI?\n+            System.out.println(\"Value=\" + c);\n@@ -73,7 +85,33 @@\n-        converterChoice = new ComboBox<>();\n-        FX.name(converterChoice, \"converterChoice\");\n-        converterChoice.getItems().addAll(Converter.values());\n-        converterChoice.setEditable(false);\n-        converterChoice.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-            updateControl();\n-        });\n+        wrapOption = new BooleanOption(\"wrapAround\", \"wrap around\", wrapAround);\n+\n+        mode = createModeOptions(\"mode\");\n+\n+        converter = createConverterOptions(\"converter\");\n+\n+        minOption = new DoubleSpinner(\"min\", Integer.MIN_VALUE, Integer.MAX_VALUE, 0);\n+\n+        maxOption = new DoubleSpinner(\"max\", Integer.MIN_VALUE, Integer.MAX_VALUE, 100);\n+\n+        stepOption = new DoubleSpinner(\"step\", Integer.MIN_VALUE, Integer.MAX_VALUE, 1);\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"Spinner\");\n+        op.option(new BooleanOption(\"editable\", \"editable\", control.editableProperty()));\n+        op.option(\"Initial Delay:\", new DurationOption(\"initialDelay\", control.initialDelayProperty()));\n+        op.option(\"Prompt Text:\", Options.promptText(\"promptText\", true, control.promptTextProperty()));\n+        op.option(\"Repeat Delay:\", new DurationOption(\"repeatDelay\", control.repeatDelayProperty()));\n+        op.option(\"Value Factory:\", mode);\n+        op.separator();\n+        op.option(\"Converter:\", converter);\n+        op.option(wrapOption);\n+        op.option(\"Min:\", minOption);\n+        op.option(\"Max:\", maxOption);\n+        op.option(\"Amount to Step By:\", stepOption);\n+        ControlPropertySheet.appendTo(op, control);\n+\n+        setContent(control);\n+        setOptions(op);\n+        \n+        mode.selectFirst();\n+        converter.selectFirst();\n+    }\n@@ -81,5 +119,21 @@\n-        editable = new CheckBox(\"editable\");\n-        FX.name(editable, \"editable\");\n-        editable.selectedProperty().addListener((s, p, c) -> {\n-            if (control != null) {\n-                control.setEditable(c);\n+    private StringConverter<Object> createConverter(Converter c, Mode mode) {\n+        if (c != null) {\n+            switch (c) {\n+            case PERCENT:\n+                switch(mode) {\n+                case DOUBLE:\n+                case INTEGER:\n+                    return new SConverter(mode, PERCENT);\n+                }\n+            case QUOTED:\n+                switch(mode) {\n+                case DOUBLE:\n+                case INTEGER:\n+                    return new SConverter(mode, QUOTED);\n+                }\n+            case NUMBER:\n+                switch(mode) {\n+                case DOUBLE:\n+                case INTEGER:\n+                    return new SConverter(mode, NUMBER);\n+                }\n@@ -87,1 +141,12 @@\n-        });\n+        }\n+        return null;\n+    }\n+\n+    private ObjectSelector<Mode> createModeOptions(String name) {\n+        ObjectSelector<Mode> op = new ObjectSelector<>(name, this::handleModeChange);\n+        op.addChoice(\"Integer\", Mode.INTEGER);\n+        op.addChoice(\"Double\", Mode.DOUBLE);\n+        op.addChoice(\"List\", Mode.LIST);\n+        op.addChoice(\"<null>\", Mode.NULL);\n+        return op;\n+    }\n@@ -89,4 +154,8 @@\n-        OptionPane p = new OptionPane();\n-        p.option(\"Mode:\", modeChoice);\n-        p.option(editable);\n-        p.option(\"Converter:\", converterChoice);\n+    private ObjectSelector<Converter> createConverterOptions(String name) {\n+        ObjectSelector<Converter> op = new ObjectSelector<>(name, this::handleConverterChange);\n+        op.addChoice(\"<null>\", Converter.NULL);\n+        op.addChoice(\"Number (0.##)\", Converter.NUMBER);\n+        op.addChoice(\"Percent (0.##%)\", Converter.PERCENT);\n+        op.addChoice(\"\\\"Quoted\\\"\", Converter.QUOTED);\n+        return op;\n+    }\n@@ -94,3 +163,8 @@\n-        setOptions(p);\n-        updateControl();\n-        FX.select(modeChoice, Mode.DOUBLE);\n+    private IntegerBinding toIntBinding(ReadOnlyProperty<Double> p) {\n+        return Bindings.createIntegerBinding(\n+            () -> {\n+                Double v = p.getValue();\n+                return v == null ? 0 : v.intValue();\n+            },\n+            p\n+        );\n@@ -99,4 +173,3 @@\n-    private void updateControl() {\n-        Mode m = modeChoice.getSelectionModel().getSelectedItem();\n-        if (m == null) {\n-            m = Mode.DOUBLE;\n+    private void handleModeChange(Mode mode) {\n+        if (mode == null) {\n+            mode = Mode.NULL;\n@@ -105,1 +178,4 @@\n-        switch (m) {\n+        SpinnerValueFactory f;\n+        boolean disableConverter;\n+\n+        switch (mode) {\n@@ -107,1 +183,9 @@\n-            control = new Spinner(-10.5, 10.5, 0.5);\n+            {\n+                SpinnerValueFactory.DoubleSpinnerValueFactory df =\n+                    new SpinnerValueFactory.DoubleSpinnerValueFactory(0, 100, 50, 1);\n+                df.minProperty().bind(minOption.valueProperty());\n+                df.maxProperty().bind(maxOption.valueProperty());\n+                df.amountToStepByProperty().bind(stepOption.valueProperty());\n+                f = df;\n+                disableConverter = false;\n+            }\n@@ -110,1 +194,29 @@\n-            control = new Spinner(-10, 10, 0);\n+            {\n+                SpinnerValueFactory.IntegerSpinnerValueFactory df =\n+                    new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 100, 50, 1);\n+                df.minProperty().bind(toIntBinding(minOption.valueProperty()));\n+                df.maxProperty().bind(toIntBinding(maxOption.valueProperty()));\n+                df.amountToStepByProperty().bind(toIntBinding(stepOption.valueProperty()));\n+                f = df;\n+                disableConverter = false;\n+            }\n+            break;\n+        case LIST:\n+            f = new SpinnerValueFactory.ListSpinnerValueFactory(FXCollections.observableArrayList(\n+                null,\n+                \"one\",\n+                \"two\",\n+                \"three\",\n+                \"four\",\n+                \"five\",\n+                \"six\",\n+                \"seven\",\n+                \"eight\",\n+                \"nine\",\n+                \"ten\"));\n+            disableConverter = true;\n+            break;\n+        case NULL:\n+        default:\n+            f = null;\n+            disableConverter = true;\n@@ -114,4 +226,1 @@\n-        Converter c = converterChoice.getSelectionModel().getSelectedItem();\n-        StringConverter<Number> conv = createConverter(c);\n-        control.getValueFactory().setConverter(conv);\n-        control.setEditable(editable.isSelected());\n+        control.setValueFactory(f);\n@@ -119,1 +228,14 @@\n-        setContent(control);\n+        if (f == null) {\n+            wrapOption.setDisable(true);\n+        } else {\n+            f.wrapAroundProperty().bind(wrapAround);\n+            wrapOption.setDisable(false);\n+        }\n+\n+        Converter c = converter.getSelectedValue();\n+        handleConverterChange(c);\n+\n+        converter.setDisable(disableConverter);\n+        minOption.setDisable(disableConverter);\n+        maxOption.setDisable(disableConverter);\n+        stepOption.setDisable(disableConverter);\n@@ -122,47 +244,51 @@\n-    private StringConverter<Number> createConverter(Converter c) {\n-        if (c != null) {\n-            switch (c) {\n-            case PERCENT:\n-                return new StringConverter<Number>() {\n-                    private final DecimalFormat f = new DecimalFormat(\"0.##%\");\n-\n-                    @Override\n-                    public String toString(Number v) {\n-                        return v == null ? \"\" : f.format(v);\n-                    }\n-\n-                    @Override\n-                    public Number fromString(String s) {\n-                        if (s == null) {\n-                            return null;\n-                        }\n-\n-                        try {\n-                            return f.parse(s);\n-                        } catch (ParseException e) {\n-                            throw new RuntimeException(e);\n-                        }\n-                    }\n-                };\n-            case QUOTED:\n-                return new StringConverter<Number>() {\n-                    private final DecimalFormat f = new DecimalFormat(\"\\\".##\\\"\");\n-\n-                    @Override\n-                    public String toString(Number v) {\n-                        return v == null ? \"\" : f.format(v);\n-                    }\n-\n-                    @Override\n-                    public Number fromString(String s) {\n-                        if (s == null) {\n-                            return null;\n-                        }\n-\n-                        try {\n-                            return f.parse(s);\n-                        } catch (ParseException e) {\n-                            throw new RuntimeException(e);\n-                        }\n-                    }\n-                };\n+    private void handleConverterChange(Converter c) {\n+        Mode m = mode.getSelectedValue();\n+        StringConverter<Object> conv = createConverter(c, m);\n+        if (control.getValueFactory() != null) {\n+            control.getValueFactory().setConverter(conv);\n+        }\n+    }\n+\n+    \/\/ string converter\n+    static class SConverter extends StringConverter<Object> {\n+        private final Mode mode;\n+        private final Format format;\n+\n+        public SConverter(Mode c, Format f) {\n+            this.mode = c;\n+            this.format = f;\n+        }\n+\n+        @Override\n+        public String toString(Object v) {\n+            return v == null ? \"\" : format.format(v);\n+        }\n+\n+        @Override\n+        public Object fromString(String s) {\n+            if (s == null) {\n+                return null;\n+            }\n+\n+            Object v;\n+            try {\n+                v = format.parseObject(s);\n+            } catch (ParseException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n+            switch (mode) {\n+            case DOUBLE:\n+                if(v instanceof Number n) {\n+                    return n.doubleValue();\n+                }\n+                throw new RuntimeException(\"Not a double: \" + v);\n+            case INTEGER:\n+                if(v instanceof Number n) {\n+                    return n.intValue();\n+                }\n+                throw new RuntimeException(\"Not an integer: \" + v);\n+            case LIST:\n+            case NULL:\n+            default:\n+                return s;\n@@ -171,1 +297,0 @@\n-        return null;\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/SpinnerPage.java","additions":228,"deletions":103,"binary":false,"changes":331,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-        op.option(\"Graphic Text Gap:\", new DoubleSpinner(\"graphicTextGap\", control.graphicTextGapProperty(), 0, 100, 0.1));\n+        op.option(\"Graphic Text Gap:\", new DoubleSpinner(\"graphicTextGap\", 0, 100, 0.1, control.graphicTextGapProperty()));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TooltipPage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import javafx.application.Platform;\n@@ -277,2 +278,6 @@\n-                \/\/ FIX getting smaller and smaller\n-                \/\/ sp.setDividerPositions(divs);\n+\n+                \/\/ FIX some kind of a bug, the dividers move slightly each time\n+                sp.setDividerPositions(divs);\n+                Platform.runLater(() -> {\n+                    sp.setDividerPositions(divs);\n+                });\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/settings\/FxSettingsSchema.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import com.oracle.tools.fx.monkey.options.PromptTextOption;\n@@ -33,1 +32,1 @@\n- *\n+ * ComboBoxBase Property Sheet.\n@@ -38,1 +37,1 @@\n-        op.option(\"Prompt Text:\", new PromptTextOption(\"promptText\", true, n.promptTextProperty()));\n+        op.option(\"Prompt Text:\", Options.promptText(\"promptText\", true, n.promptTextProperty()));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/ComboBoxBasePropertySheet.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-        op.option(\"Opacity:\", new DoubleSpinner(\"opacity\", n.opacityProperty(), -0.1, 1.1, 0.1));\n+        op.option(\"Opacity:\", new DoubleSpinner(\"opacity\", -0.1, 1.1, 0.1, n.opacityProperty()));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/NodePropertySheet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import com.oracle.tools.fx.monkey.util.ObjectSelector;\n@@ -150,0 +151,16 @@\n+\n+    public static TextChoiceOption promptText(String name, boolean allowEditButton, StringProperty p) {\n+        TextChoiceOption op = new TextChoiceOption(name, allowEditButton, p);\n+        Utils.fromPairs(TextTemplates.singleLineTextPairs(), (k, v) -> op.addChoice(k, v));\n+        return op;\n+    }\n+\n+    public static ObjectSelector<Runnable> selector(String name) {\n+        return new ObjectSelector<Runnable>(name, (r) -> {\n+            try {\n+                r.run();\n+            } catch (Throwable e) {\n+                e.printStackTrace();\n+            }\n+        });\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/Options.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-        op.option(\"Stroke Dash Offset:\", new DoubleSpinner(\"strokeWidth\", n.strokeDashOffsetProperty(), 0, 100, 0.1));\n+        op.option(\"Stroke Dash Offset:\", new DoubleSpinner(\"strokeWidth\", 0, 100, 0.1, n.strokeDashOffsetProperty()));\n@@ -49,1 +49,1 @@\n-        op.option(\"Stroke Miter Limit:\", new DoubleSpinner(\"strokeWidth\", n.strokeMiterLimitProperty(), 0, 100, 0.1));\n+        op.option(\"Stroke Miter Limit:\", new DoubleSpinner(\"strokeWidth\", 0, 100, 0.1, n.strokeMiterLimitProperty()));\n@@ -51,1 +51,1 @@\n-        op.option(\"Stroke width:\", new DoubleSpinner(\"strokeWidth\", n.strokeWidthProperty(), 0, 100, 0.1));\n+        op.option(\"Stroke width:\", new DoubleSpinner(\"strokeWidth\", 0, 100, 0.1, n.strokeWidthProperty()));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/ShapePropertySheet.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import com.oracle.tools.fx.monkey.options.PromptTextOption;\n@@ -41,1 +40,1 @@\n-        op.option(\"Prompt Text:\", new PromptTextOption(\"promptText\", true, control.promptTextProperty()));\n+        op.option(\"Prompt Text:\", Options.promptText(\"promptText\", true, control.promptTextProperty()));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/TextInputControlPropertySheet.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -74,0 +74,5 @@\n+\n+    public T getSelectedValue() {\n+        NamedValue<T> v = getSelectionModel().getSelectedItem();\n+        return v == null ? null : v.getValue();\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/ObjectSelector.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}