{"files":[{"patch":"@@ -27,1 +27,1 @@\n-version=jfx24\n+version=jfx25\n","filename":".jcheck\/conf","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-jfx.release.major.version=24\n+jfx.release.major.version=25\n","filename":"build.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-    private static final String FEATURE = \"24\";\n+    private static final String FEATURE = \"25\";\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/runtime\/VersionInfoTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,0 +111,4 @@\n+    protected void disposeMetadata() {\n+        metadata.clear();\n+    }\n+\n@@ -133,0 +137,4 @@\n+    protected long getStreamLength() {\n+        return locator.getContentLength();\n+    }\n+\n","filename":"modules\/javafx.media\/src\/main\/java\/com\/sun\/media\/jfxmediaimpl\/MetadataParserImpl.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,5 @@\n+    \/\/ Max tag size cannot be more than 256 MB\n+    private static final int MAX_TAG_SIZE = 256 * 1024 * 1024;\n+    \/\/ Max frame size cannot be more than 16 MB\n+    private static final int MAX_FRAME_SIZE = 16 * 1024 * 1024;\n+\n@@ -49,0 +54,1 @@\n+    private int tagSize = 0;\n@@ -85,1 +91,0 @@\n-                int tagSize = 0;\n@@ -91,0 +96,4 @@\n+                if (!validateTagSize()) {\n+                    return; \/\/ Abort parser if tag size is invalid.\n+                }\n+\n@@ -111,0 +120,8 @@\n+                    if (!validateFrameSize(frameSize)) {\n+                        \/\/ Dispose any parsed or partially parsed metadata\n+                        disposeMetadata();\n+                        setParseRawMetadata(false);\n+                        disposeRawMetadata();\n+                        return; \/\/ Abort parser if frame size is invalid.\n+                    }\n+\n@@ -242,0 +259,24 @@\n+    \/\/ Tag size should be <= MAX_TAG_SIZE and stream length.\n+    private boolean validateTagSize() {\n+        long streamLength = getStreamLength(); \/\/ Can be -1 if unknown\n+        if ((streamLength > 0 && tagSize > streamLength) ||\n+                tagSize > MAX_TAG_SIZE) {\n+            Logger.logMsg(Logger.ERROR, \"Unexpected ID3 tag size(\"\n+                    + tagSize +\"). ID3 metadata will be ignored.\");\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    \/\/ Frame size should be <= MAX_FRAME_SIZE and tag size.\n+    private boolean validateFrameSize(int frameSize) {\n+        if (frameSize > tagSize || frameSize > MAX_FRAME_SIZE) {\n+            Logger.logMsg(Logger.ERROR, \"Unexpected ID3 frame size(\"\n+                    + frameSize +\"). ID3 metadata will be ignored.\");\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n","filename":"modules\/javafx.media\/src\/main\/java\/com\/sun\/media\/jfxmediaimpl\/platform\/java\/ID3MetadataParser.java","additions":43,"deletions":2,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+\/\/ MAX_HEADER_SIZE is valid max size for H.264 and AAC, however AAC header is actually smaller.\n@@ -638,1 +639,5 @@\n-    if (data == NULL || size < 3)\n+    \/\/ PES header 6 bytes + optional extension + payload\n+    \/\/ We should have at least 7 bytes (header + 1 byte for payload)\n+    if (data == NULL || size < 7)\n+    {\n+        gst_buffer_unmap(pBuffer, &info);\n@@ -640,0 +645,1 @@\n+    }\n@@ -643,1 +649,3 @@\n-        if ((data[6] & 0x80) == 0x80) \/\/ Optional PES header\n+        \/\/ Check for optional PES header and make sure we have enough bytes\n+        \/\/ to continue parsing optional PES header which is 3 bytes.\n+        if ((data[6] & 0x80) == 0x80 && size >= 9) \/\/ Optional PES header\n@@ -648,1 +656,2 @@\n-            if ((data[7] & 0x80) == 0x80) \/\/ Get PTS\n+            \/\/ Make sure we have enough bytes to read PTS\n+            if ((data[7] & 0x80) == 0x80 && size >= 14) \/\/ Get PTS\n@@ -697,2 +706,11 @@\n-            size -= (PES_HEADER_SIZE + PES_OPTIONAL_HEADER_SIZE + optional_remaining_header_size);\n-            offset = (PES_HEADER_SIZE + PES_OPTIONAL_HEADER_SIZE + optional_remaining_header_size);\n+            if ((PES_HEADER_SIZE + PES_OPTIONAL_HEADER_SIZE + optional_remaining_header_size) < size)\n+            {\n+                size -= (PES_HEADER_SIZE + PES_OPTIONAL_HEADER_SIZE + optional_remaining_header_size);\n+                offset = (PES_HEADER_SIZE + PES_OPTIONAL_HEADER_SIZE + optional_remaining_header_size);\n+            }\n+            else\n+            {\n+                \/\/ Something wrong.\n+                gst_buffer_unmap(pBuffer, &info);\n+                return;\n+            }\n@@ -702,0 +720,1 @@\n+            \/\/ Skip 6 bytes of PES header\n@@ -1554,1 +1573,8 @@\n-                    codec_data_size = info.size;\n+                    codec_data_size = (gint)info.size;\n+        }\n+\n+        \/\/ Make sure header has reasonable size\n+        if (codec_data_size < 0 || codec_data_size > MAX_HEADER_SIZE)\n+        {\n+            gst_buffer_unmap(codec_data, &info);\n+            return FALSE;\n@@ -2074,1 +2100,1 @@\n-                    header_size = dshowwrapper_get_avc_config(codec_data_info.data, codec_data_info.size, header, MAX_HEADER_SIZE, &decoder->lengthSizeMinusOne);\n+                    header_size = (gint)dshowwrapper_get_avc_config(codec_data_info.data, codec_data_info.size, header, MAX_HEADER_SIZE, &decoder->lengthSizeMinusOne);\n@@ -2081,0 +2107,1 @@\n+        \/\/ dshowwrapper_get_avc_config() will make sure that (header_size <= MAX_HEADER_SIZE)\n","filename":"modules\/javafx.media\/src\/main\/native\/gstreamer\/plugins\/dshowwrapper\/dshowwrapper.cpp","additions":34,"deletions":7,"binary":false,"changes":41,"status":"modified"}]}