{"files":[{"patch":"@@ -55,6 +55,0 @@\n-    \/\/ TODO: JDK-8344114: Consider removing this obsolete method\n-    \/*\n-     * Indicates permission to load an embedded font\n-     *\/\n-    public boolean hasPermission();\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/font\/FontFactory.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -53,3 +53,0 @@\n-        if (!hasTempPermission()) {\n-            tracker = FontTracker.getTracker();\n-        }\n@@ -234,10 +231,0 @@\n-    \/\/ TODO: JDK-8344114: Consider removing this obsolete method\n-    \/**\n-     * Used with the byte count tracker for fonts created from streams.\n-     * If a thread can create temp files anyway, there is no point in counting\n-     * font bytes.\n-     *\/\n-    static boolean hasTempPermission() {\n-        return true;\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/font\/FontFileWriter.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1370,33 +1370,0 @@\n-        if (!hasPermission()) {\n-            return new PGFont[] { createFont(DEFAULT_FULLNAME, size) } ;\n-        }\n-        if (FontFileWriter.hasTempPermission()) {\n-            return loadEmbeddedFont0(name, fontStream, size, register, loadAll);\n-        }\n-\n-        \/\/ Otherwise, be extra conscious of pending temp file creation and\n-        \/\/ resourcefully handle the temp file resources, among other things.\n-        FontFileWriter.FontTracker tracker =\n-            FontFileWriter.FontTracker.getTracker();\n-        boolean acquired = false;\n-        try {\n-            acquired = tracker.acquirePermit();\n-            if (!acquired) {\n-                \/\/ Timed out waiting for resources.\n-                return null;\n-            }\n-            return loadEmbeddedFont0(name, fontStream, size, register, loadAll);\n-        } catch (InterruptedException e) {\n-            \/\/ Interrupted while waiting to acquire a permit.\n-            return null;\n-        } finally {\n-            if (acquired) {\n-                tracker.releasePermit();\n-            }\n-        }\n-    }\n-\n-    private PGFont[] loadEmbeddedFont0(String name, InputStream fontStream,\n-                                       float size,\n-                                       boolean register,\n-                                       boolean loadAll) {\n@@ -1479,3 +1446,0 @@\n-        if (!hasPermission()) {\n-            return new PGFont[] { createFont(DEFAULT_FULLNAME, size) };\n-        }\n@@ -1752,5 +1716,0 @@\n-    @Override\n-    public final boolean hasPermission() {\n-        return true;\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/font\/PrismFontFactory.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -70,4 +70,0 @@\n-            if (!fontFactory.hasPermission()) {\n-                embeddedFontsLoaded = true;\n-                return;\n-            }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/font\/PrismFontLoader.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -93,5 +93,0 @@\n-    @Override\n-    public final boolean hasPermission() {\n-        return prismFontFactory.hasPermission();\n-    }\n-\n@@ -110,6 +105,0 @@\n-        if (!hasPermission()) {\n-            PGFont[] fonts = new PGFont[1];\n-            fonts[0] = createFont(DEFAULT_FULLNAME, size);\n-            return fonts;\n-        }\n-\n@@ -158,6 +147,0 @@\n-        if (!hasPermission()) {\n-            PGFont[] fonts = new PGFont[1];\n-            fonts[0] = createFont(DEFAULT_FULLNAME, size);\n-            return fonts;\n-        }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/j2d\/J2DFontFactory.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"}]}