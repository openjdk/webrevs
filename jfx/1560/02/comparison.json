{"files":[{"patch":"@@ -3,0 +3,1 @@\n+org.eclipse.jdt.core.compiler.codegen.methodParameters=do not generate\n@@ -5,1 +6,1 @@\n-org.eclipse.jdt.core.compiler.compliance=17\n+org.eclipse.jdt.core.compiler.compliance=21\n@@ -14,1 +15,1 @@\n-org.eclipse.jdt.core.compiler.source=17\n+org.eclipse.jdt.core.compiler.source=21\n","filename":"tests\/manual\/monkey\/.settings\/org.eclipse.jdt.core.prefs","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-\t\t\t<compilerarg line=\"--module-path ${javafx.home}\/lib --add-modules javafx.base,javafx.graphics,javafx.controls\"\/>\n+\t\t\t<compilerarg line=\"--module-path ${javafx.home}\/lib --add-modules javafx.base,javafx.graphics,javafx.controls,javafx.swing,javafx.web\"\/>\n","filename":"tests\/manual\/monkey\/build.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey;\n+\n+import javafx.beans.property.SimpleBooleanProperty;\n+\n+\/**\n+ * Application Settings.\n+ *\/\n+public class AppSettings {\n+    public static final SimpleBooleanProperty snapSplitPanes = new SimpleBooleanProperty(true);\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/AppSettings.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey;\n+\n+import javafx.beans.property.SimpleBooleanProperty;\n+\n+\/**\n+ * Various logs (write to stdout).\n+ *\/\n+public class Loggers {\n+    public static final Logger accessibility = new Logger(\"accessibility\");\n+\n+    private static String toJson(long time, String name, Object[] nameValuePairs) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"{\");\n+        kv(sb, \"time\", time);\n+        sb.append(\", \");\n+        kv(sb, \"log\", name);\n+        for(int i=0; i<nameValuePairs.length; ) {\n+            Object k = nameValuePairs[i++];\n+            String ks = escape(k.toString());\n+            Object v = nameValuePairs[i++];\n+            String vs = formatValue(v);\n+            sb.append(\", \");\n+            kv(sb, ks, vs);\n+        }\n+        sb.append(\"}\");\n+        return sb.toString();\n+    }\n+\n+    private static void kv(StringBuilder sb, String name, Object value) {\n+        String v = formatValue(value);\n+        sb.append(name);\n+        sb.append(\":\");\n+        sb.append(v);\n+    }\n+\n+    private static String formatValue(Object v) {\n+        if (v == null) {\n+            return \"null\";\n+        } else if(v instanceof Number) {\n+            return v.toString();\n+        } else {\n+            return escape(v.toString());\n+        }\n+    }\n+\n+    private static String escape(String text) {\n+        int len = text.length();\n+        StringBuilder sb = new StringBuilder(len + 8);\n+        sb.append('\"');\n+        for (int i = 0; i < len; i++) {\n+            char c = text.charAt(i);\n+            String s;\n+            switch(c) {\n+            case '\\b':\n+                s = \"\\\\b\";\n+                break;\n+            case '\\t':\n+                s = \"\\\\t\";\n+                break;\n+            case '\\r':\n+                s = \"\\\\r\";\n+                break;\n+            case '\\n':\n+                s = \"\\\\n\";\n+                break;\n+            case '\\f':\n+                s = \"\\\\f\";\n+                break;\n+            case '\"':\n+                s = \"\\\\\\\"\";\n+                break;\n+            default:\n+                sb.append(c);\n+                continue;\n+            }\n+\n+            sb.append(s);\n+        }\n+        sb.append('\"');\n+        return sb.toString();\n+    }\n+\n+    public static class Logger {\n+        private final String name;\n+        public final SimpleBooleanProperty enabled = new SimpleBooleanProperty();\n+        private volatile boolean isEnabled;\n+\n+        public Logger(String name) {\n+            this.name = name;\n+            enabled.addListener((s, p, on) -> isEnabled = on);\n+        }\n+\n+        public void log(Object... nameValuePairs) {\n+            if (isEnabled) {\n+                String json = toJson(System.currentTimeMillis(), name, nameValuePairs);\n+                System.out.println(json);\n+            }\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/Loggers.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -42,2 +42,0 @@\n-import javafx.scene.control.ToggleGroup;\n-import javafx.scene.input.KeyCombination;\n@@ -130,1 +128,1 @@\n-        MenuBar b = new MenuBar();\n+        MenuBar m = new MenuBar();\n@@ -132,2 +130,2 @@\n-        FX.menu(b, \"_File\");\n-        FX.item(b, \"Quit\", Platform::exit);\n+        FX.menu(m, \"_File\");\n+        FX.item(m, \"Quit\", Platform::exit);\n@@ -135,2 +133,4 @@\n-        FX.menu(b, \"_Page\");\n-        FX.item(b, \"Reload Current Page\", this::reloadCurrentPage);\n+        FX.menu(m, \"_Page\");\n+        FX.item(m, \"Reload Current Page\", this::reloadCurrentPage);\n+        FX.separator(m);\n+        FX.checkItem(m, \"Snapped Split Panes\", AppSettings.snapSplitPanes);\n@@ -138,9 +138,3 @@\n-        FX.menu(b, \"_Skin\");\n-        FX.item(b, \"Set New Skin\", this::newSkin);\n-        FX.item(b, \"<null> Skin\", this::nullSkin);\n-        \/\/ Menu\n-        FX.menu(b, \"_Menu\");\n-        ToggleGroup g = new ToggleGroup();\n-        FX.radio(b, \"RadioMenuItem 1\", KeyCombination.keyCombination(\"Shortcut+1\"), g);\n-        FX.radio(b, \"RadioMenuItem 2\", KeyCombination.keyCombination(\"Shortcut+2\"), g);\n-        FX.radio(b, \"RadioMenuItem 3\", KeyCombination.keyCombination(\"Shortcut+3\"), g);\n+        FX.menu(m, \"_Skin\");\n+        FX.item(m, \"Set New Skin\", this::newSkin);\n+        FX.item(m, \"<null> Skin\", this::nullSkin);\n@@ -148,8 +142,11 @@\n-        FX.menu(b, \"_Tools\");\n-        FX.item(b, \"Clipboard Viewer\", this::openClipboardViewer);\n-        FX.item(b, \"CSS Playground\", this::openCssPlayground);\n-        FX.item(b, \"FX TextArea Embedded in JFXPanel\", this::openJFXPanel);\n-        FX.item(b, \"JTextArea\/JTextField Embedded in SwingNode\", this::openJTextArea);\n-        FX.item(b, \"Keyboard Event Viewer\", this::openKeyboardViewer);\n-        FX.item(b, \"Native to ASCII\", this::openNative2Ascii);\n-        FX.item(b, \"System Info\", this::openSystemInfo);\n+        FX.menu(m, \"_Tools\");\n+        FX.item(m, \"Clipboard Viewer\", this::openClipboardViewer);\n+        FX.item(m, \"CSS Playground\", this::openCssPlayground);\n+        FX.item(m, \"FX TextArea Embedded in JFXPanel\", this::openJFXPanel);\n+        FX.item(m, \"JTextArea\/JTextField Embedded in SwingNode\", this::openJTextArea);\n+        FX.item(m, \"Keyboard Event Viewer\", this::openKeyboardViewer);\n+        FX.item(m, \"Native to ASCII\", this::openNative2Ascii);\n+        FX.item(m, \"System Info\", this::openSystemInfo);\n+        \/\/ Logs\n+        FX.menu(m, \"_Logging\");\n+        FX.checkItem(m, \"Accessibility\", Loggers.accessibility.enabled);\n@@ -157,5 +154,5 @@\n-        FX.menu(b, \"_Window\");\n-        FX.item(b, orientation);\n-        FX.separator(b);\n-        FX.item(b, \"Open Modal Window\", this::openModalWindow);\n-        return b;\n+        FX.menu(m, \"_Window\");\n+        FX.item(m, orientation);\n+        FX.separator(m);\n+        FX.item(m, \"Open Modal Window\", this::openModalWindow);\n+        return m;\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/MainWindow.java","additions":26,"deletions":29,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-            \/\/ TODO Button\n+            new DemoPage(\"Button\", ButtonPage::new),\n@@ -41,2 +41,2 @@\n-            \/\/ TODO new DemoPage(\"Canvas\", CanvasPage::new),\n-            \/\/ TODO CheckBox\n+            new DemoPage(\"Canvas\", CanvasPage::new),\n+            new DemoPage(\"CheckBox\", CheckBoxPage::new),\n@@ -47,0 +47,1 @@\n+            new DemoPage(\"Drag and Drop\", DnDPage::new),\n@@ -49,1 +50,1 @@\n-            \/\/ TODO Hyperlink\n+            new DemoPage(\"Hyperlink\", HyperlinkPage::new),\n@@ -54,1 +55,1 @@\n-            \/\/ TODO MenuBar\n+            new DemoPage(\"MenuBar\", MenuBarPage::new),\n@@ -60,1 +61,2 @@\n-            \/\/ TODO RadioButton\n+            new DemoPage(\"RadioButton\", RadioButtonPage::new),\n+            new DemoPage(\"ScatterChart\", ScatterChartPage::new),\n@@ -64,0 +66,1 @@\n+            new DemoPage(\"Shape\", ShapePage::new),\n@@ -66,0 +69,1 @@\n+            new DemoPage(\"SplitMenuButton\", SplitMenuButtonPage::new),\n@@ -76,1 +80,1 @@\n-            \/\/ TODO ToggleButton\n+            new DemoPage(\"ToggleButton\", ToggleButtonPage::new),\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/Pages.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import com.oracle.tools.fx.monkey.util.BooleanConsumer;\n@@ -48,1 +49,1 @@\n-    public BooleanOption(String name, String text, Runnable onChange) {\n+    public BooleanOption(String name, String text, BooleanConsumer onChange) {\n@@ -53,1 +54,1 @@\n-                onChange.run();\n+                onChange.consume(cur);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/BooleanOption.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.util.List;\n+import java.util.Objects;\n@@ -28,0 +30,4 @@\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.scene.control.ComboBox;\n+import javafx.util.StringConverter;\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -29,0 +35,2 @@\n+import com.oracle.tools.fx.monkey.util.NamedValue;\n+import com.oracle.tools.fx.monkey.util.Utils;\n@@ -33,1 +41,3 @@\n-public class DoubleOption extends ObjectOption<Number> {\n+public class DoubleOption extends ComboBox<Object> {\n+    private final SimpleObjectProperty<Number> property = new SimpleObjectProperty<>();\n+\n@@ -35,1 +45,116 @@\n-        super(name, p);\n+        FX.name(this, name);\n+\n+        property.bindBidirectional(p);\n+\n+        setEditable(true);\n+        setConverter(new StringConverter<Object>() {\n+            @Override\n+            public String toString(Object x) {\n+                if (x instanceof NamedValue n) {\n+                    return n.getDisplay();\n+                }\n+                return String.valueOf(getValue(x));\n+            }\n+\n+            @Override\n+            public Object fromString(String s) {\n+                return parseValue(s);\n+            }\n+        });\n+        setOnAction((ev) -> {\n+            Object x = getValue();\n+            Number n = getValue(x);\n+            if (n != null) {\n+                property.set(n);\n+            }\n+        });\n+        property.addListener((s, old, cur) -> {\n+            select(cur, false);\n+        });\n+    }\n+\n+    private Number parseValue(String s) {\n+        if (Utils.isBlank(s)) {\n+            return null;\n+        }\n+        NamedValue<Number> n = find(s);\n+        if (n == null) {\n+            try {\n+                return Double.parseDouble(s);\n+            } catch (NumberFormatException e) {\n+                e.printStackTrace();\n+            }\n+            return null;\n+        }\n+        return n.getValue();\n+    }\n+\n+    private NamedValue<Number> find(String s) {\n+        for (Object x: getItems()) {\n+            if (x instanceof NamedValue n) {\n+                if (s.equals(n.getDisplay())) {\n+                    return n;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    \/**\n+     * Selects the property value, adding it to the list of items under \"<INITIAL>\" name.\n+     *\/\n+    public void selectInitialValue() {\n+        Number value = property.get();\n+        select(value, true);\n+    }\n+\n+    private void select(Number value, boolean initial) {\n+        List<Object> items = getItems();\n+        int sz = items.size();\n+        for (int i = 0; i < sz; i++) {\n+            Object x = items.get(i);\n+            Number v = getValue(x);\n+            if (Objects.equals(value, v)) {\n+                select(i);\n+                return;\n+            }\n+        }\n+\n+        Object v;\n+        if (initial) {\n+            String text = \"<INITIAL \" + value + \">\";\n+            v = new NamedValue<Number>(text, value);\n+        } else {\n+            v = value;\n+        }\n+        items.add(v);\n+        select(sz);\n+    }\n+\n+    private Number getValue(Object x) {\n+        if (x == null) {\n+            return null;\n+        } else if (x instanceof Number n) {\n+            return n;\n+        } else if (x instanceof NamedValue n) {\n+            return getValue(n.getValue());\n+        }\n+        throw new Error(\"?\" + x);\n+    }\n+\n+    \/**\n+     * Selects the given index.  Does nothing if the index is outside of the valid range.\n+     * @param ix\n+     *\/\n+    public void select(int ix) {\n+        if ((ix >= 0) && (ix < getItems().size())) {\n+            getSelectionModel().select(ix);\n+        }\n+    }\n+\n+    public void addChoice(String name, Number item) {\n+        getItems().add(new NamedValue<>(name, item));\n+    }\n+\n+    public void addChoice(Number item) {\n+        getItems().add(item);\n@@ -38,1 +163,1 @@\n-    public static DoubleOption of(String name, Property<Number> p, double ... values) {\n+    public static DoubleOption of(String name, Property<Number> p, double... values) {\n@@ -40,1 +165,1 @@\n-        for (double v : values) {\n+        for (double v: values) {\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/DoubleOption.java","additions":129,"deletions":4,"binary":false,"changes":133,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Collections;\n@@ -33,1 +34,2 @@\n-import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Priority;\n@@ -40,4 +42,1 @@\n-\/\/ TODO allow null? use logical fonts?\n-\/\/ TODO names of families?\n-\/\/ TODO filtered list\n-public class FontOption extends BorderPane {\n+public class FontOption extends HBox {\n@@ -46,0 +45,1 @@\n+    private final ComboBox<String> styleField = new ComboBox<>();\n@@ -57,0 +57,7 @@\n+            String fam = fontField.getSelectionModel().getSelectedItem();\n+            updateStyles(fam);\n+            update();\n+        });\n+\n+        FX.name(styleField, name + \"_STYLE\");\n+        styleField.getSelectionModel().selectedItemProperty().addListener((x) -> {\n@@ -81,2 +88,2 @@\n-        setCenter(fontField);\n-        setRight(sizeField);\n+        getChildren().setAll(fontField, styleField, sizeField);\n+        setHgrow(fontField, Priority.ALWAYS);\n@@ -92,5 +99,0 @@\n-    protected void update() {\n-        Font f = getFont();\n-        property.set(f);\n-    }\n-\n@@ -106,0 +108,4 @@\n+        String style = styleField.getSelectionModel().getSelectedItem();\n+        if (!isBlank(style)) {\n+            name = name + \" \" + style;\n+        }\n@@ -113,0 +119,32 @@\n+    private static boolean isBlank(String s) {\n+        return s == null ? true : s.trim().length() == 0;\n+    }\n+\n+    protected void updateStyles(String family) {\n+        String st = styleField.getSelectionModel().getSelectedItem();\n+        if (st == null) {\n+            st = \"\";\n+        }\n+\n+        List<String> ss = Font.getFontNames(family);\n+        for (int i = 0; i < ss.size(); i++) {\n+            String s = ss.get(i);\n+            if (s.startsWith(family)) {\n+                s = s.substring(family.length()).trim();\n+                ss.set(i, s);\n+            }\n+        }\n+        Collections.sort(ss);\n+\n+        styleField.getItems().setAll(ss);\n+        int ix = ss.indexOf(st);\n+        if (ix >= 0) {\n+            styleField.getSelectionModel().select(ix);\n+        }\n+    }\n+\n+    protected void update() {\n+        Font f = getFont();\n+        property.set(f);\n+    }\n+\n@@ -115,0 +153,1 @@\n+        String style;\n@@ -118,0 +157,1 @@\n+            style = null;\n@@ -120,1 +160,2 @@\n-            name = f.getName();\n+            name = f.getFamily();\n+            style = f.getStyle();\n@@ -124,0 +165,1 @@\n+        styleField.getSelectionModel().select(style);\n@@ -132,1 +174,1 @@\n-        rv.addAll(Font.getFontNames());\n+        rv.addAll(Font.getFamilies());\n@@ -137,1 +179,2 @@\n-        FX.select(fontField, \"System Regular\"); \/\/ windows?\n+        FX.select(fontField, \"System\");\n+        FX.select(styleField, \"\");\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/FontOption.java","additions":58,"deletions":15,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import javafx.scene.paint.Color;\n@@ -40,5 +39,6 @@\n-        addChoice(\"1x1\", ImageTools.createImageView(Color.RED, 1, 1));\n-        addChoice(\"Small\", ImageTools.createImageView(Color.ORANGE, 16, 16));\n-        addChoice(\"Wide\", ImageTools.createImageView(Color.GREEN, 128, 16));\n-        addChoice(\"Tall\", ImageTools.createImageView(Color.BLUE, 16, 128));\n-        addChoice(\"Large\", ImageTools.createImageView(Color.SALMON, 256, 256));\n+        addChoice(\"1x1\", ImageTools.createImageView(1, 1));\n+        addChoice(\"Small\", ImageTools.createImageView(16, 16));\n+        addChoice(\"Wide\", ImageTools.createImageView(128, 16));\n+        addChoice(\"Tall\", ImageTools.createImageView(16, 128));\n+        addChoice(\"Large\", ImageTools.createImageView(256, 256));\n+        \/\/ TODO include active content (see tooltip)\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/GraphicOption.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import com.oracle.tools.fx.monkey.util.Utils;\n@@ -50,1 +51,3 @@\n-            property.set(v);\n+            if (!Utils.eq(v, property.getValue())) {\n+                property.set(v);\n+            }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/ObjectOption.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.options;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.StringJoiner;\n+import javafx.collections.ObservableList;\n+import javafx.geometry.Insets;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.layout.BorderPane;\n+import com.oracle.tools.fx.monkey.util.EnterTextDialog;\n+import com.oracle.tools.fx.monkey.util.FX;\n+\n+\/**\n+ * Style Class (Observable List of Strings) Option.\n+ * This can be later extracted into a generic option for list of strings.\n+ *\/\n+\/\/ TODO instead of combo box, use r\/o text field + menu button (edit \/ revert)\n+public class StyleClassOption extends BorderPane {\n+    private final ComboBox<String> combo;\n+    private final ObservableList<String> list;\n+\n+    public StyleClassOption(String name, ObservableList<String> list) {\n+        this.list = list;\n+\n+        FX.name(this, name);\n+\n+        combo = new ComboBox<>();\n+        combo.getItems().add(listToString(list));\n+        combo.getSelectionModel().select(0);\n+\n+        Button editButton = FX.button(\"Edit\", () -> {\n+            String text = listToString(list);\n+            EnterTextDialog d = new EnterTextDialog(this, text, (s) -> {\n+                setList(s);\n+            });\n+            d.setInstructions(\"Whitespace-delimited list of style class names:\");\n+            d.show();\n+        });\n+\n+        setCenter(combo);\n+        setRight(editButton);\n+        setMargin(editButton, new Insets(0, 0, 0, 2));\n+        setMaxWidth(Double.MAX_VALUE);\n+\n+        combo.getSelectionModel().selectedItemProperty().addListener((s, pr, val) -> {\n+            setList(val);\n+        });\n+    }\n+\n+    private static String listToString(Collection<String> items) {\n+        if ((items == null) || items.isEmpty()) {\n+            return null;\n+        }\n+        StringJoiner sj = new StringJoiner(\" \");\n+        for (String s: items) {\n+            sj.add(s);\n+        }\n+        return sj.toString();\n+    }\n+\n+    private static List<String> parseList(String text) {\n+        if (text == null) {\n+            return List.of();\n+        }\n+        return List.of(text.split(\"\\\\s+\"));\n+    }\n+\n+    private void setList(String text) {\n+        List<String> items = parseList(text);\n+        list.setAll(items);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/StyleClassOption.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -62,4 +62,5 @@\n-        textField.setOnAction((ev) -> {\n-            String v = textField.getText();\n-            property.set(v);\n-        });\n+        textField.textProperty().bindBidirectional(property);\n+\/\/        setOnAction((ev) -> {\n+\/\/            String v = textField.getText();\n+\/\/            property.set(v);\n+\/\/        });\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/TextOption.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -31,0 +32,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -48,1 +50,8 @@\n-        control = new Accordion();\n+        control = new Accordion() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/AccordionPage.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -29,0 +30,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -42,1 +44,8 @@\n-        chart = new AreaChart<>(createNumberAxis(\"X Axis\"), createNumberAxis(\"Y Axis\"));\n+        chart = new AreaChart<>(createNumberAxis(\"X Axis\"), createNumberAxis(\"Y Axis\")) {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/AreaChartPage.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,0 +27,4 @@\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.Node;\n@@ -29,0 +33,4 @@\n+import javafx.scene.chart.XYChart.Series;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.input.PickResult;\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -30,0 +38,1 @@\n+import com.oracle.tools.fx.monkey.sheets.PropertiesMonitor;\n@@ -31,0 +40,1 @@\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -42,1 +52,8 @@\n-        chart = new BarChart<>(createCategoryAxis(\"X Axis\"), createNumberAxis(\"Y Axis\"));\n+        chart = new BarChart<>(createCategoryAxis(\"X Axis\"), createNumberAxis(\"Y Axis\")) {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n@@ -44,0 +61,1 @@\n+        FX.setPopupMenu(chart, this::createMenu);\n@@ -56,0 +74,81 @@\n+    ContextMenu createMenu(PickResult p) {\n+        Node nd = p.getIntersectedNode();\n+\n+        Series<String, Number> s = findSeries(nd);\n+        XYChart.Data<String, Number> d = findData(s, nd);\n+        \/\/ FIX this is incorrect - styles remain after modifying the list\n+        \/\/ we may need to iterate over all the data (?) and query data.getNode() perhaps?\n+        \/\/ or maybe add a listener to each node??\n+        \/\/System.out.println(\"s=\" + s + \" d=\" + d + \" p=\" + p);\/\/ FIX\n+\n+        ContextMenu m = new ContextMenu();\n+\n+\/\/        if ((s != null) && (d != null)) {\n+\/\/            FX.item(m, \"Delete Point\", () -> {\n+\/\/                s.getData().remove(d);\n+\/\/            });\n+\/\/            FX.separator(m);\n+\/\/        }\n+\n+        FX.item(m, \"Add Duplicate Category\", this::addDuplicateCategory);\n+        FX.item(m, \"Add Series with Duplicate Category\", this::addDuplicateSeries);\n+        FX.separator(m);\n+        FX.item(m, \"Properties...\", () -> PropertiesMonitor.open(nd));\n+        return m;\n+    }\n+\n+    private Series<String,Number> findSeries(Node n) {\n+        try {\n+            if (n != null) {\n+                for (String s: n.getStyleClass()) {\n+                    if (s.startsWith(\"series\")) {\n+                        s = s.substring(\"series\".length());\n+                        int ix = Integer.parseInt(s);\n+                        return chart.getData().get(ix);\n+                    }\n+                }\n+            }\n+        } catch (Exception ignore) {\n+        }\n+        return null;\n+    }\n+\n+    private XYChart.Data<String,Number> findData(Series<String,Number> series, Node n) {\n+        if (series != null) {\n+            try {\n+                if (n != null) {\n+                    for (String s: n.getStyleClass()) {\n+                        if (s.startsWith(\"data\")) {\n+                            s = s.substring(\"data\".length());\n+                            int ix = Integer.parseInt(s);\n+                            return series.getData().get(ix);\n+                        }\n+                    }\n+                }\n+            } catch (Exception ignore) {\n+            }\n+        }\n+        return null;\n+    }\n+\n+    void addDuplicateCategory() {\n+        var d = chart.getData();\n+        if (d.size() > 0) {\n+            var dd = d.get(0).getData();\n+            if (dd.size() > 0) {\n+                var v = dd.get(0);\n+                dd.add(new XYChart.Data(v.getXValue(), randomValue()));\n+            }\n+        }\n+    }\n+\n+    void addDuplicateSeries() {\n+        ObservableList<XYChart.Data<String, Number>> list = FXCollections.observableArrayList();\n+        list.add(new XYChart.Data<>(\"1\", randomValue()));\n+        list.add(new XYChart.Data<>(\"1\", randomValue()));\n+        list.add(new XYChart.Data<>(\"2\", randomValue()));\n+        if (chart.getData().size() > 0) {\n+            chart.getData().getFirst().setData(list);\n+        }\n+    }\n+\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/BarChartPage.java","additions":100,"deletions":1,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -29,0 +30,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -41,1 +43,8 @@\n-        chart = new BubbleChart<>(createNumberAxis(\"X Axis\"), createNumberAxis(\"Y Axis\"));\n+        chart = new BubbleChart<>(createNumberAxis(\"X Axis\"), createNumberAxis(\"Y Axis\")) {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/BubbleChartPage.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.geometry.Insets;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.skin.ButtonSkin;\n+import javafx.scene.layout.HBox;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.sheets.ButtonsPropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * Button Page.\n+ *\/\n+public class ButtonPage extends TestPaneBase implements HasSkinnable {\n+    private final Button control;\n+\n+    public ButtonPage() {\n+        super(\"ButtonPage\");\n+\n+        control = new Button(\"Button\") {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+\n+        OptionPane op = new OptionPane();\n+        ButtonsPropertySheet.appendTo(op, control);\n+\n+        HBox p = new HBox(4, control);\n+        p.setPadding(new Insets(4));\n+\n+        setContent(p);\n+        setOptions(op);\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new ButtonSkin(control));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ButtonPage.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -27,0 +27,3 @@\n+import java.text.SimpleDateFormat;\n+import javafx.beans.value.ChangeListener;\n+import javafx.scene.Node;\n@@ -29,0 +32,2 @@\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.input.PickResult;\n@@ -32,0 +37,4 @@\n+import javafx.stage.Window;\n+import com.oracle.tools.fx.monkey.sheets.PropertiesMonitor;\n+import com.oracle.tools.fx.monkey.tools.AccessibilityPropertyViewer;\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -40,0 +49,1 @@\n+    \/\/ TODO context menu to draw stuff?\n@@ -56,2 +66,1 @@\n-        Font f = Font.font(\"System\", 12);\n-        Canvas c = new Canvas(w, h);\n+        Font f = Font.font(\"System\", 14);\n@@ -59,1 +68,23 @@\n-        GraphicsContext g = c.getGraphicsContext2D();\n+        ChangeListener<Number> li = (s,p,c) -> {\n+            String t = new SimpleDateFormat(\"yyyy\/MM\/dd HH:mm:ss\").format(System.currentTimeMillis());\n+            System.out.println(String.format(\"%s scalex=%f\", t, c));\n+        };\n+\n+        Canvas canvas = new Canvas(w, h);\n+        canvas.sceneProperty().addListener((s, p, v) -> {\n+            if (p != null) {\n+                Window win = p.getWindow();\n+                if (win != null) {\n+                    win.renderScaleXProperty().removeListener(li);\n+                }\n+            }\n+            if (v != null) {\n+                Window win = v.getWindow();\n+                if (win != null) {\n+                    win.renderScaleXProperty().addListener(li);\n+                }\n+            }\n+        });\n+        FX.setPopupMenu(canvas, this::createMenu);\n+\n+        GraphicsContext g = canvas.getGraphicsContext2D();\n@@ -72,1 +103,9 @@\n-        pane.getChildren().setAll(c);\n+        pane.getChildren().setAll(canvas);\n+    }\n+\n+    private ContextMenu createMenu(PickResult pick) {\n+        Node source = pick.getIntersectedNode();\n+        ContextMenu m = new ContextMenu();\n+        FX.item(m, \"Show Properties Monitor...\", () -> PropertiesMonitor.open(source));\n+        FX.item(m, \"Accessibility Attributes...\", () -> AccessibilityPropertyViewer.open(pick));\n+        return m;\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/CanvasPage.java","additions":43,"deletions":4,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.geometry.Insets;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.skin.CheckBoxSkin;\n+import javafx.scene.layout.HBox;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.sheets.ButtonsPropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * CheckBox Page.\n+ *\/\n+public class CheckBoxPage extends TestPaneBase implements HasSkinnable {\n+    private final CheckBox control;\n+\n+    public CheckBoxPage() {\n+        super(\"CheckBoxPage\");\n+\n+        control = new CheckBox(\"CheckBox\") {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+\n+        OptionPane op = new OptionPane();\n+        ButtonsPropertySheet.appendTo(op, control);\n+\n+        HBox p = new HBox(4, control);\n+        p.setPadding(new Insets(4));\n+        setContent(p);\n+        setOptions(op);\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new CheckBoxSkin(control));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/CheckBoxPage.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -33,0 +33,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -36,0 +37,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -52,1 +54,8 @@\n-        control = new ChoiceBox();\n+        control = new ChoiceBox() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ChoiceBoxPage.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -30,0 +31,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -44,1 +46,8 @@\n-        control = new ColorPicker(Color.YELLOW);\n+        control = new ColorPicker(Color.YELLOW) {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ColorPickerPage.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -39,0 +40,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -59,1 +61,9 @@\n-        control = new ComboBox<>();\n+        control = new ComboBox<>() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+        control.setOnAction((ev) -> addItem());\n@@ -97,0 +107,11 @@\n+    private void addItem() {\n+        Object v = control.getValue();\n+        if (!control.getItems().contains(v)) {\n+            System.out.println(\"added: \" + v);\n+            control.getItems().add(0, v);\n+            if (control.getSelectionModel() != null) {\n+                control.getSelectionModel().select(0);\n+            }\n+        }\n+    }\n+\n@@ -157,0 +178,13 @@\n+        op.addChoiceSupplier(\"Number\", () -> {\n+            return new StringConverter<Object>() {\n+                @Override\n+                public String toString(Object x) {\n+                    return x == null ? null : String.valueOf(x);\n+                }\n+\n+                @Override\n+                public Object fromString(String s) {\n+                    return s == null ? null : Double.parseDouble(s);\n+                }\n+            };\n+        });\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ComboBoxPage.java","additions":35,"deletions":1,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -30,0 +31,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -44,1 +46,8 @@\n-        control = new DatePicker(LocalDate.now());\n+        control = new DatePicker(LocalDate.now()) {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/DatePickerPage.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,196 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.util.ArrayList;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Node;\n+import javafx.scene.control.Label;\n+import javafx.scene.image.Image;\n+import javafx.scene.input.ClipboardContent;\n+import javafx.scene.input.DragEvent;\n+import javafx.scene.input.Dragboard;\n+import javafx.scene.input.TransferMode;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.paint.Color;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.DoubleOption;\n+import com.oracle.tools.fx.monkey.options.ObjectOption;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n+import com.oracle.tools.fx.monkey.util.ImageTools;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * Drag and Drop Test Page.\n+ *\/\n+public class DnDPage extends TestPaneBase {\n+    \/\/private static final DataFormat FORMAT = new DataFormat(\"DnDPage\");\n+    private final Label source;\n+    private final Label target;\n+    private final SimpleBooleanProperty acceptsCopy = new SimpleBooleanProperty(true);\n+    private final SimpleBooleanProperty acceptsLink = new SimpleBooleanProperty();\n+    private final SimpleBooleanProperty acceptsMove = new SimpleBooleanProperty();\n+    private final SimpleObjectProperty<Image> dragImage = new SimpleObjectProperty<>();\n+    private final SimpleDoubleProperty offsetX = new SimpleDoubleProperty();\n+    private final SimpleDoubleProperty offsetY = new SimpleDoubleProperty();\n+\n+    public DnDPage() {\n+        super(\"DnDPage\");\n+\n+        source = new Label(\"DRAG ME\");\n+        source.setStyle(\"-fx-font-size: 24; -fx-border-width:1; -fx-border-color:red;\");\n+\n+        target = new Label(\"DROP HERE\");\n+        target.setStyle(\"-fx-font-size: 24; -fx-border-width:1; -fx-border-color:red;\");\n+\n+        HBox hb = new HBox(5, source, target);\n+        hb.setAlignment(Pos.CENTER);\n+        hb.setPadding(new Insets(10));\n+\n+        source.setOnDragDetected((ev) -> {\n+            Dragboard db = source.startDragAndDrop(TransferMode.ANY);\n+            ClipboardContent content = new ClipboardContent();\n+            content.putString(source.getText());\n+            db.setContent(content);\n+\n+            Image im = dragImage.get();\n+            db.setDragView(im);\n+            db.setDragViewOffsetX(offsetX.get());\n+            db.setDragViewOffsetY(offsetY.get());\n+        });\n+\n+        source.setOnDragDone((ev) -> {\n+            print(ev);\n+        });\n+\n+        target.setOnDragOver((ev) -> {\n+            print(ev);\n+            if (ev.getGestureSource() != target && ev.getDragboard().hasString()) {\n+                ArrayList<TransferMode> a = new ArrayList<>();\n+                if (acceptsCopy.get()) {\n+                    a.add(TransferMode.COPY);\n+                }\n+                if (acceptsLink.get()) {\n+                    a.add(TransferMode.LINK);\n+                }\n+                if (acceptsMove.get()) {\n+                    a.add(TransferMode.MOVE);\n+                }\n+                TransferMode[] modes = a.toArray(TransferMode[]::new);\n+                ev.acceptTransferModes(modes);\n+            }\n+        });\n+\n+        target.setOnDragEntered((ev) -> {\n+            print(ev);\n+            target.setBackground(Background.fill(Color.YELLOW));\n+        });\n+\n+        target.setOnDragExited((ev) -> {\n+            print(ev);\n+            target.setBackground(null);\n+        });\n+\n+        target.setOnDragDropped((ev) -> {\n+            print(ev);\n+        });\n+\n+        BorderPane bp = new BorderPane();\n+        bp.setTop(hb);\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"Source\");\n+        op.label(\"Drag View Image:\");\n+        op.option(createImageOption());\n+        op.option(\"Offset X:\", doubleOption(\"offsetX\", offsetX));\n+        op.option(\"Offset Y:\", doubleOption(\"offsetY\", offsetY));\n+        op.section(\"Target\");\n+        op.option(new BooleanOption(\"copy\", \"accepts COPY\", acceptsCopy));\n+        op.option(new BooleanOption(\"link\", \"accepts LINK\", acceptsLink));\n+        op.option(new BooleanOption(\"move\", \"accepts MOVE\", acceptsMove));\n+\n+        setContent(bp);\n+        setOptions(op);\n+    }\n+\n+    private ObjectOption<Image> createImageOption() {\n+        ObjectOption<Image> op = new ObjectOption<>(\"image\", dragImage);\n+        op.addChoice(\"<null>\", null);\n+        op.addChoice(\"1x1\", ImageTools.createImage(1, 1));\n+        op.addChoice(\"16 x 16\", ImageTools.createImage(16, 16));\n+        op.addChoice(\"32 x 32\", ImageTools.createImage(32, 32));\n+        op.addChoice(\"64 x 64\", ImageTools.createImage(64, 64));\n+        op.addChoiceSupplier(\"128 x 16\", () -> ImageTools.createImage(128, 16));\n+        op.addChoiceSupplier(\"16 x 128\", () -> ImageTools.createImage(16, 128));\n+        op.addChoiceSupplier(\"256 x 256\", () -> ImageTools.createImage(256, 256));\n+        op.addChoiceSupplier(\"4096 x 4096\", () -> ImageTools.createImage(4096, 4096));\n+        op.addChoiceSupplier(\"<snapshot>\", () -> {\n+            try {\n+                \/\/ FIX windows throws Errors if this check is not done\n+                if(source.getScene() != null) {\n+                    return source.snapshot(null, null);\n+                }\n+            } catch(Throwable e) {\n+            }\n+            return null;\n+        });\n+        op.selectFirst();\n+        return op;\n+    }\n+\n+    private Node doubleOption(String name, DoubleProperty p) {\n+        DoubleOption d = new DoubleOption(name, p);\n+        d.addChoice(\"0\", Double.valueOf(0));\n+        d.addChoice(\"10\", 10.0);\n+        d.addChoice(\"33.3\", 33.3);\n+        d.addChoice(\"100\", 100.0);\n+        d.addChoice(\"Double.MAX_VALUE\", Double.MAX_VALUE);\n+        d.addChoice(\"Double.MIN_VALUE\", Double.MIN_VALUE);\n+        d.addChoice(\"Double.POSITIVE_INFINITY\", Double.POSITIVE_INFINITY);\n+        d.addChoice(\"NaN\", Double.NaN);\n+        d.selectInitialValue();\n+        return d;\n+    }\n+\n+    private void print(DragEvent ev) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"{event=\" + ev.getEventType());\n+        sb.append(\", screenX=\" + ev.getScreenX());\n+        sb.append(\", screenY=\" + ev.getScreenY());\n+        sb.append(\", sceneX=\" + ev.getSceneX());\n+        sb.append(\", sceneY=\" + ev.getSceneY());\n+        sb.append(\"}\");\n+        String s = sb.toString();\n+        System.out.println(s);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/DnDPage.java","additions":196,"deletions":0,"binary":false,"changes":196,"status":"added"},{"patch":"@@ -30,0 +30,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -39,0 +40,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -59,1 +61,8 @@\n-        box = new HBox();\n+        box = new HBox() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/HBoxPage.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -30,0 +31,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -45,1 +47,8 @@\n-        control = new HTMLEditor();\n+        control = new HTMLEditor() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/HTMLEditor_Page.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.geometry.Insets;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.control.Hyperlink;\n+import javafx.scene.control.skin.HyperlinkSkin;\n+import javafx.scene.layout.HBox;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.sheets.ButtonsPropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * Hyperlink Page.\n+ *\/\n+public class HyperlinkPage extends TestPaneBase implements HasSkinnable {\n+    private final Hyperlink control;\n+\n+    public HyperlinkPage() {\n+        super(\"HyperlinkPage\");\n+\n+        control = new Hyperlink(\"Hyperlink\") {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+\n+        OptionPane op = new OptionPane();\n+        ButtonsPropertySheet.appendTo(op, control);\n+\n+        HBox p = new HBox(4, control);\n+        p.setPadding(new Insets(4));\n+        setContent(p);\n+        setOptions(op);\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new HyperlinkSkin(control));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/HyperlinkPage.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -27,0 +27,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -29,0 +30,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -43,6 +45,8 @@\n-        control = new Label();\n-\n-        \/\/ JDK-8092102\n-\/\/        control.textTruncatedProperty().addListener((s,p,c) -> {\n-\/\/            System.err.println(\"truncated: \" + c);\n-\/\/        });\n+        control = new Label() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/LabelPage.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -29,0 +30,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -42,1 +44,8 @@\n-        chart = new LineChart<>(createNumberAxis(\"X Axis\"), createNumberAxis(\"Y Axis\"));\n+        chart = new LineChart<>(createNumberAxis(\"X Axis\"), createNumberAxis(\"Y Axis\")) {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/LineChartPage.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -49,0 +50,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -72,1 +74,8 @@\n-        control = new ListView<>();\n+        control = new ListView<>() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n@@ -229,0 +238,8 @@\n+        return newItem(n, rows);\n+    }\n+\n+    private String newLargeItem(Object n) {\n+        return newItem(n, 200);\n+    }\n+\n+    private String newItem(Object n, int rows) {\n@@ -239,1 +256,1 @@\n-    private Supplier<List<Object>> createItems(int count, Function<Integer, Object> gen) {\n+    private Supplier<List<Object>> createItems(int count) {\n@@ -243,1 +260,13 @@\n-                Object v = gen.apply(i);\n+                Object v = newItem(i);\n+                rv.add(v);\n+            }\n+            return rv;\n+        };\n+    }\n+\n+    private Supplier<List<Object>> createVariableItems(int count) {\n+        return () -> {\n+            ArrayList<Object> rv = new ArrayList<>(count);\n+            int i = 0;\n+            for ( ; i < count; i++) {\n+                Object v = newVariableItem(i);\n@@ -246,0 +275,1 @@\n+            rv.add(newLargeItem(i));\n@@ -254,6 +284,7 @@\n-        s.addChoiceSupplier(\"1 Row\", createItems(1, this::newItem));\n-        s.addChoiceSupplier(\"10 Rows\", createItems(10, this::newItem));\n-        s.addChoiceSupplier(\"200 Rows\", createItems(200, this::newItem));\n-        s.addChoiceSupplier(\"10,000 Rows\", createItems(10_000, this::newItem));\n-        s.addChoiceSupplier(\"10 Variable Height Rows\", createItems(10, this::newVariableItem));\n-        s.addChoiceSupplier(\"200 Variable HeightRows\", createItems(200, this::newVariableItem));\n+        s.addChoiceSupplier(\"1 Row\", createItems(1));\n+        s.addChoiceSupplier(\"10 Rows\", createItems(10));\n+        s.addChoiceSupplier(\"200 Rows\", createItems(200));\n+        s.addChoiceSupplier(\"10,000 Rows\", createItems(10_000));\n+        s.addChoiceSupplier(\"10 Variable Height Rows\", createVariableItems(10));\n+        s.addChoiceSupplier(\"200 Variable HeightRows\", createVariableItems(200));\n+        s.addChoiceSupplier(\"2,000 Variable HeightRows\", createVariableItems(2000));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ListViewPage.java","additions":40,"deletions":9,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -0,0 +1,160 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import javafx.collections.ObservableList;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckMenuItem;\n+import javafx.scene.control.CustomMenuItem;\n+import javafx.scene.control.Menu;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.RadioMenuItem;\n+import javafx.scene.control.SeparatorMenuItem;\n+import javafx.scene.control.ToggleGroup;\n+import javafx.scene.control.skin.MenuBarSkin;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.sheets.ControlPropertySheet;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.ImageTools;\n+import com.oracle.tools.fx.monkey.util.ObjectSelector;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * MenuBar Page.\n+ *\/\n+public class MenuBarPage extends TestPaneBase implements HasSkinnable {\n+    private final MenuBar control;\n+\n+    public MenuBarPage() {\n+        super(\"MenuButtonPage\");\n+\n+        control = new MenuBar() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"MenuBar\");\n+        op.option(\"Items:\", createItemsOptions(\"items\", control.getMenus()));\n+        op.option(new BooleanOption(\"useSystemMenuBar\", \"use system menu bar\", control.useSystemMenuBarProperty()));\n+        ControlPropertySheet.appendTo(op, control);\n+\n+        setContent(control);\n+        setOptions(op);\n+    }\n+\n+    private Supplier<List<Menu>> mk(int count) {\n+        return () -> {\n+            ArrayList<Menu> rv = new ArrayList(count);\n+            for (int i = 0; i < count; i++) {\n+                Menu m = mkMenu(String.valueOf(i + 1));\n+                rv.add(m);\n+            }\n+            return rv;\n+        };\n+    }\n+\n+    private Menu mkMenu(String name) {\n+        Menu m = new Menu(\"Menu\" + name);\n+        ToggleGroup g = new ToggleGroup();\n+        m.getItems().addAll(\n+            new MenuItem(\"MenuItem 1\"),\n+            new MenuItem(\"MenuItem 2\"),\n+            new MenuItem(\"MenuItem 3\"),\n+            new SeparatorMenuItem(),\n+            radio(\"RadioMenuItem 1\", g),\n+            radio(\"RadioMenuItem 2\", g),\n+            radio(\"RadioMenuItem 3\", g),\n+            new SeparatorMenuItem(),\n+            new CheckMenuItem(\"CheckMenuItem 1\"),\n+            new CheckMenuItem(\"CheckMenuItem 2\"),\n+            new CheckMenuItem(\"CheckMenuItem 3\", ImageTools.createImageView(16, 16)),\n+            new SeparatorMenuItem(),\n+            new CustomMenuItem(new Button(\"CustomMenuItem 1\")),\n+            new CustomMenuItem(new Button(\"CustomMenuItem 2 (auto hide)\"), true),\n+            new CustomMenuItem(new Button(\"CustomMenuItem 3 (auto hide off)\"), false)\n+        );\n+        Menu m2 = FX.menu(m, \"_Submenu\");\n+        FX.item(m2, \"Submenu Item 1\");\n+        FX.item(m2, \"Submenu Item 2\");\n+        FX.item(m2, \"Submenu Item 3\");\n+        FX.item(m2, \"Submenu Item 4\");\n+        return m;\n+    }\n+\n+    private MenuItem radio(String text, ToggleGroup g) {\n+        RadioMenuItem mi = new RadioMenuItem(text);\n+        mi.setToggleGroup(g);\n+        return mi;\n+    }\n+\n+    private Supplier<List<Menu>> createInvisibleDisabled() {\n+        return () -> {\n+            ArrayList<Menu> rv = new ArrayList();\n+            Menu m;\n+            rv.add(m = mkMenu(\"1\"));\n+            rv.add(m = mkMenu(\"2\"));\n+            m.setVisible(false);\n+            rv.add(m = mkMenu(\"3\"));\n+            rv.add(m = mkMenu(\"4\"));\n+            m.setDisable(true);\n+            rv.add(m = mkMenu(\"5\"));\n+            return rv;\n+        };\n+    }\n+\n+    private Node createItemsOptions(String name, ObservableList<Menu> items) {\n+        ObjectSelector<List<Menu>> s = new ObjectSelector<>(name, items::setAll);\n+        s.addChoiceSupplier(\"1 Menu\", mk(1));\n+        s.addChoiceSupplier(\"5 Items\", mk(5));\n+        s.addChoiceSupplier(\"Invisible\/Disabled\", createInvisibleDisabled());\n+        s.addChoiceSupplier(\"<empty>\", mk(0));\n+        s.selectFirst();\n+        return s;\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new MenuBarSkin(control));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/MenuBarPage.java","additions":160,"deletions":0,"binary":false,"changes":160,"status":"added"},{"patch":"@@ -32,0 +32,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -36,0 +37,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -52,1 +54,8 @@\n-        control = new MenuButton();\n+        control = new MenuButton() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n@@ -81,0 +90,1 @@\n+        s.addChoiceSupplier(\"100 Items\", mk(100));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/MenuButtonPage.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -34,0 +35,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -51,1 +53,8 @@\n-        control = new Pagination();\n+        control = new Pagination() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/PaginationPage.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -29,0 +30,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -35,1 +37,8 @@\n-        super(new PasswordField(), \"PasswordFieldPage\");\n+        super(new PasswordField() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        }, \"PasswordFieldPage\");\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/PasswordFieldPage.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -35,0 +36,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -51,1 +53,8 @@\n-        chart = new PieChart();\n+        chart = new PieChart() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/PieChartPage.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.geometry.Insets;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.control.RadioButton;\n+import javafx.scene.control.ToggleGroup;\n+import javafx.scene.control.skin.RadioButtonSkin;\n+import javafx.scene.layout.HBox;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.sheets.ButtonsPropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * RadioButton Page.\n+ *\/\n+public class RadioButtonPage extends TestPaneBase implements HasSkinnable {\n+    private final RadioButton control;\n+\n+    public RadioButtonPage() {\n+        super(\"RadioButtonPage\");\n+\n+        control = new RadioButton(\"Radio Button\") {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+\n+        RadioButton b2 = new RadioButton(\"B2\");\n+        RadioButton b3 = new RadioButton(\"B3\");\n+\n+        ToggleGroup group = new ToggleGroup();\n+        group.getToggles().addAll(b2, b3);\n+\n+        OptionPane op = new OptionPane();\n+        ButtonsPropertySheet.appendTo(op, control, group);\n+\n+        HBox p = new HBox(4, control, b2, b3);\n+        p.setPadding(new Insets(4));\n+        setContent(p);\n+        setOptions(op);\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new RadioButtonSkin(control));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/RadioButtonPage.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -27,0 +27,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -32,0 +33,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -50,1 +52,8 @@\n-        control = new ScrollBar();\n+        control = new ScrollBar() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ScrollBarPage.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -35,0 +36,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -53,1 +55,8 @@\n-        control = new ScrollPane();\n+        control = new ScrollPane() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n@@ -80,14 +89,0 @@\n-\/\/        new Dimension2D(50, 50),\n-\/\/        new Dimension2D(100, 100),\n-\/\/        new Dimension2D(1000, 1000),\n-\/\/        new Dimension2D(5000, 5000),\n-\/\/        new Dimension2D(5000, 50)\n-\n-\/\/    private void updatePrefSize(Dimension2D d) {\n-\/\/        double w = d.getWidth();\n-\/\/        double h = d.getHeight();\n-\/\/        content.setPrefSize(w, h);\n-\/\/        String s = \"Preferred size: \" + w + \" x \" + h;\n-\/\/        content.setText(s);\n-\/\/    }\n-\n@@ -106,4 +101,1 @@\n-            \/\/ TODO maybe a Rectangle with a gradient paint and\/or grid?\n-            String s = w + \"x\" + h;\n-            Image im = ImageTools.createImage(s, w, h);\n-            return new ImageView(im);\n+            return ImageTools.createImageView(w, h);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ScrollPanePage.java","additions":11,"deletions":19,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,358 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.util.function.Supplier;\n+import javafx.beans.binding.Bindings;\n+import javafx.beans.binding.ObjectBinding;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.scene.Node;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Arc;\n+import javafx.scene.shape.Circle;\n+import javafx.scene.shape.ClosePath;\n+import javafx.scene.shape.CubicCurve;\n+import javafx.scene.shape.Ellipse;\n+import javafx.scene.shape.Line;\n+import javafx.scene.shape.LineTo;\n+import javafx.scene.shape.MoveTo;\n+import javafx.scene.shape.Path;\n+import javafx.scene.shape.Polygon;\n+import javafx.scene.shape.Polyline;\n+import javafx.scene.shape.Rectangle;\n+import javafx.scene.shape.Shape;\n+import javafx.scene.shape.StrokeLineCap;\n+import javafx.scene.text.Font;\n+import javafx.scene.text.FontWeight;\n+import javafx.scene.text.Text;\n+import com.oracle.tools.fx.monkey.options.ObjectOption;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * Shape Page.\n+ *\/\n+public class ShapePage extends TestPaneBase {\n+    private final SimpleObjectProperty<Supplier<Shape>> gen1;\n+    private final SimpleObjectProperty<Supplier<Shape>> gen2;\n+    private final CheckBox stroke1;\n+    private final CheckBox stroke2;\n+    private final CheckBox fill1;\n+    private final CheckBox fill2;\n+    private final SimpleObjectProperty<Operation> operation;\n+    private final ObjectBinding<Node[]> nodes;\n+    private final StackPane stack;\n+    private Shape shape1;\n+    private Shape shape2;\n+    private Shape result;\n+    private double originX;\n+    private double originY;\n+    private final Positioner pos1;\n+    private final Positioner pos2;\n+\n+    public ShapePage() {\n+        super(\"ShapePage\");\n+\n+        pos1 = new Positioner();\n+        pos2 = new Positioner();\n+\n+        stack = new StackPane();\n+        stack.setBackground(Background.fill(Color.WHITE));\n+        stack.addEventFilter(MouseEvent.MOUSE_PRESSED, this::handleMousePressed);\n+        stack.addEventFilter(MouseEvent.MOUSE_DRAGGED, this::handleMouseDragged);\n+        FX.setPopupMenu(stack, this::createPopupMenu);\n+\n+        gen1 = new SimpleObjectProperty<>();\n+\n+        gen2 = new SimpleObjectProperty<>();\n+\n+        stroke1 = new CheckBox(\"S\");\n+        FX.name(stroke1, \"stroke1\");\n+        stroke1.setSelected(true);\n+        FX.tooltip(stroke1, \"Enables the stroke on the shape\");\n+\n+        stroke2 = new CheckBox(\"S\");\n+        FX.name(stroke2, \"stroke2\");\n+        stroke2.setSelected(true);\n+        FX.tooltip(stroke2, \"Enables the stroke on the shape\");\n+\n+        fill1 = new CheckBox(\"F\");\n+        FX.name(stroke2, \"fill1\");\n+        FX.tooltip(fill1, \"Enables the fill on the shape\");\n+\n+        fill2 = new CheckBox(\"F\");\n+        FX.name(stroke2, \"fill2\");\n+        FX.tooltip(fill2, \"Enables the fill on the shape\");\n+\n+        operation = new SimpleObjectProperty<>();\n+\n+        nodes = Bindings.createObjectBinding(\n+            this::process,\n+            gen1,\n+            gen2,\n+            stroke1.selectedProperty(),\n+            stroke2.selectedProperty(),\n+            fill1.selectedProperty(),\n+            fill2.selectedProperty(),\n+            operation\n+        );\n+        nodes.addListener((s,p,v) -> {\n+            stack.getChildren().setAll(v);\n+        });\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"Shape\");\n+        op.option(\"Shape 1\", createShapeSelector(\"shape1\", gen1, stroke1, fill1));\n+        op.option(\"Shape 2\", createShapeSelector(\"shape2\", gen2, stroke2, fill2));\n+        op.separator();\n+        op.option(\"Operation:\", createOpSelector(\"op\", operation));\n+\n+        setContent(stack);\n+        setOptions(op);\n+    }\n+\n+    private Node createShapeSelector(String name, ObjectProperty<Supplier<Shape>> p, CheckBox stroke, CheckBox fill) {\n+        ObjectOption<Supplier<Shape>> op = new ObjectOption<>(name, p);\n+        op.addChoice(\"Arc\", () -> {\n+            return new Arc(0, 0, 100, 200, 0, 270);\n+        });\n+        op.addChoice(\"Circle\", () -> {\n+            return new Circle(20, 20, 40);\n+        });\n+        op.addChoice(\"Cubic Curve\", () -> {\n+            return new CubicCurve(0, 0, 100, 60, 200, 0, 300, 80);\n+        });\n+        op.addChoice(\"Ellipse\", () -> {\n+            return new Ellipse(0, 0, 200, 100);\n+        });\n+        op.addChoice(\"Line\", () -> {\n+            return new Line(0, 0, 200, 100);\n+        });\n+        op.addChoice(\"Path (H)\", () -> {\n+            Path t = new Path();\n+            t.getElements().addAll(\n+                new MoveTo(0.0, 0),\n+                new LineTo(100, 10),\n+                new LineTo(110, 45),\n+                new LineTo(10, 50),\n+                new ClosePath()\n+            );\n+            return t;\n+        });\n+        op.addChoice(\"Path (V)\", () -> {\n+            Path t = new Path();\n+            t.getElements().addAll(\n+                new MoveTo(50, 0),\n+                new LineTo(75, 5),\n+                new LineTo(80, 120),\n+                new LineTo(45, 125),\n+                new ClosePath()\n+            );\n+            return t;\n+        });\n+        op.addChoice(\"Polygon\", () -> {\n+            return new Polygon(0, 0, 200, 100, 250, 200, 200, 210, 100, -30, 20, 205);\n+        });\n+        op.addChoice(\"Polyline\", () -> {\n+            return new Polyline(0, 0, 200, 100, 250, 200, 200, 210, 100, -30, 20, 205);\n+        });\n+        \/\/ TODO quad curve, svgpath?\n+        op.addChoice(\"Rectangle\", () -> {\n+            return new Rectangle(0, 0, 400, 200);\n+        });\n+        op.addChoice(\"Text\", () -> {\n+            Text t = new Text(\"Text\");\n+            t.setFont(Font.font(\"System\", FontWeight.BOLD, 48));\n+            return t;\n+        });\n+        op.selectFirst();\n+\n+        return new HBox(op, stroke, fill);\n+    }\n+\n+    private ObjectOption<Operation> createOpSelector(String name, ObjectProperty<Operation> p) {\n+        ObjectOption<Operation> op = new ObjectOption<>(name, p);\n+        op.addChoice(\"Intersect\", Shape::intersect);\n+        op.addChoice(\"Subtract\", Shape::subtract);\n+        op.addChoice(\"Union\", Shape::union);\n+        op.selectFirst();\n+        return op;\n+    }\n+\n+    @FunctionalInterface\n+    private interface Operation {\n+        public Shape op(Shape a, Shape b);\n+    }\n+\n+    private class Positioner {\n+        double tx;\n+        double ty;\n+        double initx;\n+        double inity;\n+\n+        public void set() {\n+            initx = tx;\n+            inity = ty;\n+        }\n+\n+        public void reset() {\n+            tx = 0;\n+            ty = 0;\n+            translate(shape1);\n+            translate(shape2);\n+        }\n+\n+        public void handleEvent(MouseEvent ev, Shape s) {\n+            if (s == null) {\n+                return;\n+            }\n+\n+            tx = initx + ev.getX() - originX;\n+            ty = inity + ev.getY() - originY;\n+            translate(s);\n+\n+            Operation op = operation.get();\n+            if (op != null) {\n+                if (result != null) {\n+                    stack.getChildren().remove(result);\n+                }\n+                result = op.op(shape1, shape2);\n+                init(result);\n+                result.setFill(FX.alpha(Color.BLACK, 0.5));\n+                stack.getChildren().add(result);\n+            }\n+        }\n+\n+        public void translate(Shape s) {\n+            if (s != null) {\n+                s.setTranslateX(tx);\n+                s.setTranslateY(ty);\n+            }\n+        }\n+    }\n+\n+    private Node[] clear() {\n+        shape1 = null;\n+        shape2 = null;\n+        result = null;\n+        return null;\n+    }\n+\n+    Node[] process() {\n+        Supplier<Shape> sup1 = gen1.get();\n+        if (sup1 == null) {\n+            return clear();\n+        }\n+\n+        Supplier<Shape> sup2 = gen2.get();\n+        if (sup2 == null) {\n+            return clear();\n+        }\n+\n+        Operation op = operation.get();\n+        if (op == null) {\n+            return clear();\n+        }\n+\n+        \/\/ shape 1\n+\n+        shape1 = sup1.get();\n+        pos1.translate(shape1);\n+        init(shape1);\n+\n+        if (stroke1.isSelected()) {\n+            shape1.setStroke(Color.RED);\n+            shape1.setStrokeLineCap(StrokeLineCap.ROUND);\n+            shape1.setStrokeWidth(10);\n+        } else {\n+            shape1.setStroke(null);\n+            shape1.setStrokeWidth(0);\n+        }\n+        shape1.setFill(fill1.isSelected() ? FX.alpha(Color.RED, 0.5) : null);\n+\n+        \/\/ shape 2\n+\n+        shape2 = sup2.get();\n+        pos2.translate(shape2);\n+        init(shape2);\n+\n+        if (stroke2.isSelected()) {\n+            shape2.setStroke(Color.GREEN);\n+            shape2.setStrokeLineCap(StrokeLineCap.ROUND);\n+            shape2.setStrokeWidth(10);\n+        } else {\n+            shape2.setStroke(null);\n+            shape2.setStrokeWidth(0);\n+        }\n+        shape2.setFill(fill2.isSelected() ? FX.alpha(Color.GREEN, 0.5) : null);\n+\n+        \/\/ result\n+\n+        result = op.op(shape1, shape2);\n+        init(result);\n+        result.setFill(FX.alpha(Color.BLACK, 0.5));\n+        return new Node[] { shape1, shape2, result };\n+    }\n+\n+    private static void init(Node n) {\n+        \/\/n.setManaged(false);\n+        n.setLayoutX(0);\n+        n.setLayoutY(0);\n+    }\n+\n+    void handleMousePressed(MouseEvent ev) {\n+        originX = ev.getX();\n+        originY = ev.getY();\n+        pos1.set();\n+        pos2.set();\n+    }\n+\n+    void handleMouseDragged(MouseEvent ev) {\n+        if(ev.isShiftDown()) {\n+            pos2.handleEvent(ev, shape2);\n+        } else {\n+            pos1.handleEvent(ev, shape1);\n+        }\n+    }\n+\n+    void reset() {\n+        pos1.reset();\n+        pos2.reset();\n+    }\n+\n+    ContextMenu createPopupMenu() {\n+        ContextMenu m = new ContextMenu();\n+        FX.item(m, \"Reset Transform\", this::reset);\n+        return m;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ShapePage.java","additions":358,"deletions":0,"binary":false,"changes":358,"status":"added"},{"patch":"@@ -35,0 +35,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -38,0 +39,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -79,1 +81,8 @@\n-        control = new Spinner<Object>();\n+        control = new Spinner<Object>() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/SpinnerPage.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import javafx.collections.ObservableList;\n+import javafx.geometry.Side;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.Node;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.SplitMenuButton;\n+import javafx.scene.control.skin.SplitMenuButtonSkin;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.sheets.LabeledPropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.ObjectSelector;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * SplitMenuButton Page.\n+ *\/\n+public class SplitMenuButtonPage extends TestPaneBase implements HasSkinnable {\n+    private final SplitMenuButton control;\n+\n+    public SplitMenuButtonPage() {\n+        super(\"SplitMenuButtonPage\");\n+\n+        control = new SplitMenuButton() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+\n+        control.setText(\"Split Menu Button\");\n+        control.getItems().add(new MenuItem(\"Edit\"));\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"SplitMenuButton\");\n+        op.option(\"Items:\", createItemsOptions(\"items\", control.getItems()));\n+        op.option(\"Popup Side:\", new EnumOption<Side>(\"popupSide\", true, Side.class, control.popupSideProperty()));\n+        LabeledPropertySheet.appendTo(op, \"ButtonBase\", false, control);\n+\n+        setContent(control);\n+        setOptions(op);\n+    }\n+\n+    private Supplier<List<MenuItem>> mk(int count) {\n+        return () -> {\n+            ArrayList<MenuItem> rv = new ArrayList(count);\n+            for (int i = 0; i < count; i++) {\n+                rv.add(new MenuItem(\"Item_\" + (i + 1)));\n+            }\n+            return rv;\n+        };\n+    }\n+\n+    private Node createItemsOptions(String name, ObservableList<MenuItem> items) {\n+        ObjectSelector<List<MenuItem>> s = new ObjectSelector<>(name, items::setAll);\n+        s.addChoiceSupplier(\"1 Item\", mk(1));\n+        s.addChoiceSupplier(\"10 Items\", mk(10));\n+        s.addChoiceSupplier(\"100 Items\", mk(100));\n+        s.addChoiceSupplier(\"1,000 Items\", mk(1000));\n+        s.addChoiceSupplier(\"<empty>\", mk(0));\n+        s.selectFirst();\n+        return s;\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new SplitMenuButtonSkin(control));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/SplitMenuButtonPage.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -27,0 +27,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -29,0 +30,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -42,1 +44,8 @@\n-        chart = new StackedAreaChart<>(createNumberAxis(\"X Axis\"), createNumberAxis(\"Y Axis\"));\n+        chart = new StackedAreaChart<>(createNumberAxis(\"X Axis\"), createNumberAxis(\"Y Axis\")) {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/StackedAreaChartPage.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -29,0 +30,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -42,1 +44,8 @@\n-        chart = new StackedBarChart<>(createCategoryAxis(\"X Axis\"), createNumberAxis(\"Y Axis\"));\n+        chart = new StackedBarChart<>(createCategoryAxis(\"X Axis\"), createNumberAxis(\"Y Axis\")) {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/StackedBarChartPage.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,0 +27,5 @@\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.function.Supplier;\n+import javafx.collections.ObservableList;\n@@ -30,0 +35,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -39,0 +45,2 @@\n+import javafx.scene.image.Image;\n+import javafx.scene.image.ImageView;\n@@ -40,0 +48,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -45,0 +54,1 @@\n+import com.oracle.tools.fx.monkey.util.ImageTools;\n@@ -58,8 +68,10 @@\n-        control = new TabPane();\n-        \/\/ TODO graphic, other Tab propertis in the context menu\n-        control.getTabs().addAll(\n-            new Tab(\"One\", mkContent(\"Tab One Content\")),\n-            new Tab(\"Two\", mkContent(\"Tab Two Content\")),\n-            new Tab(\"Three\", mkContent(\"Tab Three Content\")),\n-            new Tab(\"Four\", mkContent(\"Tab Four Content\"))\n-        );\n+        control = new TabPane() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+\n+        \/\/ TODO other Tab propertis in the context menu\n@@ -69,0 +81,1 @@\n+        op.option(\"Tabs:\", createTabsOption(\"tabs\", control.getTabs()));\n@@ -85,0 +98,53 @@\n+    private Node createTabsOption(String name, ObservableList<Tab> items) {\n+        ObjectSelector<List<Tab>> s = new ObjectSelector<>(name, (v) -> {\n+            items.setAll(v);\n+        });\n+        s.addChoice(\"<empty>\", List.of());\n+        s.addChoiceSupplier(\"1 Tab\", tabs(1, false));\n+        s.addChoiceSupplier(\"2 Tabs\", tabs(2, false));\n+        s.addChoiceSupplier(\"10 Tabs\", tabs(10, false));\n+        s.addChoiceSupplier(\"200 Tabs\", tabs(200, false));\n+        s.addChoiceSupplier(\"1,000 Tabs\", tabs(1_000, false));\n+        s.addChoiceSupplier(\"1 Tab with Graphic\", tabs(1, true));\n+        s.addChoiceSupplier(\"2 Tabs with Graphic\", tabs(2, true));\n+        s.addChoiceSupplier(\"10 Tabs with Graphic\", tabs(10, true));\n+        s.addChoiceSupplier(\"200 Tabs with Graphic\", tabs(200, true));\n+        s.select(2);\n+        return s;\n+    }\n+\n+    private Supplier<List<Tab>> tabs(int count, boolean graphic) {\n+        return () -> {\n+            Random r = new Random();\n+            ArrayList<Tab> ts = new ArrayList<>(count);\n+            for (int i = 0; i < count; i++) {\n+                Node n = mkContent(\"Content_\" + i);\n+                String name = \"T_\" + i;\n+                Tab t = new Tab(name, n);\n+                if (graphic) {\n+                    Image im;\n+                    switch (r.nextInt(5)) {\n+                    case 0:\n+                        im = ImageTools.createImage(name, 70, 20);\n+                        break;\n+                    case 1:\n+                        im = ImageTools.createImage(name, 20, 70);\n+                        break;\n+                    case 3:\n+                        im = ImageTools.createImage(20, 20);\n+                        break;\n+                    default:\n+                        im = null;\n+                        break;\n+                    }\n+\n+                    if (im != null) {\n+                        t.setGraphic(new ImageView(im));\n+                    }\n+                }\n+                ts.add(t);\n+            }\n+            return ts;\n+        };\n+    }\n+\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TabPanePage.java","additions":74,"deletions":8,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -36,0 +37,1 @@\n+import javafx.scene.control.ContextMenu;\n@@ -37,1 +39,0 @@\n-import javafx.scene.control.SplitMenuButton;\n@@ -48,0 +49,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -52,0 +54,1 @@\n+import com.oracle.tools.fx.monkey.sheets.TableColumnPropertySheet;\n@@ -70,1 +73,8 @@\n-        control = new TableView<>();\n+        control = new TableView<>() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n@@ -80,15 +90,0 @@\n-        SplitMenuButton addColumnButton = new SplitMenuButton(\n-            FX.menuItem(\"at the beginning\", () -> addColumn(0)),\n-            FX.menuItem(\"in the middle\", () -> addColumn(1)),\n-            FX.menuItem(\"at the end\", () -> addColumn(2))\n-        );\n-        addColumnButton.setText(\"Add Column\");\n-\n-        SplitMenuButton removeColumnButton = new SplitMenuButton(\n-            FX.menuItem(\"at the beginning\", () -> removeColumn(0)),\n-            FX.menuItem(\"in the middle\", () -> removeColumn(1)),\n-            FX.menuItem(\"at the end\", () -> removeColumn(2)),\n-            FX.menuItem(\"all\", () -> removeAllColumns())\n-        );\n-        removeColumnButton.setText(\"Remove Column\");\n-\n@@ -99,2 +94,0 @@\n-        \/\/ layout\n-\n@@ -103,1 +96,0 @@\n-\n@@ -105,1 +97,0 @@\n-        op.option(Utils.buttons(addColumnButton, removeColumnButton));\n@@ -117,11 +108,0 @@\n-\n-        \/\/ TODO\n-\/\/        op.label(\"Filter:\");\n-\/\/        op.option(filterSelector);\n-\/\/        op.label(\"Cell Value:\");\n-\/\/        op.option(cellValueSelector);\n-\/\/        op.label(\"Cell Factory:\");\n-\/\/        op.option(cellFactorySelector);\n-\/\/        op.label(\"Selection Model:\");\n-\/\/        op.option(selectionSelector);\n-\n@@ -130,5 +110,0 @@\n-\n-        \/\/ currently selected column option sheet\n-        \/\/TableColumnOptions.appendTo(op, currentColumn);\n-\n-        \/\/ control option sheet\n@@ -141,4 +116,11 @@\n-    private void addColumn(int where) {\n-        TableColumn<DataRow, Object> c = newColumn();\n-        c.setText(\"C\" + System.currentTimeMillis());\n-        \/\/c.setCellValueFactory((f) -> new SimpleStringProperty(describe(c)));\n+    private ContextMenu createPopupMenu(TableColumn<?,?> tc) {\n+        ContextMenu m = new ContextMenu();\n+        FX.item(m, \"Add Column Before\", () -> addColumn(tc, false));\n+        FX.item(m, \"Add Column After\", () -> addColumn(tc, true));\n+        FX.separator(m);\n+        FX.item(m, \"Remove Column\", () -> control.getColumns().remove(tc));\n+        FX.item(m, \"Remove All Columns\", () -> control.getColumns().clear());\n+        FX.separator(m);\n+        FX.item(m, \"Properties...\", () -> TableColumnPropertySheet.open(this, tc));\n+        return m;\n+    }\n@@ -146,19 +128,12 @@\n-        int ct = control.getColumns().size();\n-        int ix;\n-        switch (where) {\n-        case 0:\n-            ix = 0;\n-            break;\n-        case 1:\n-            ix = ct \/ 2;\n-            break;\n-        case 2:\n-        default:\n-            ix = ct;\n-            break;\n-        }\n-        if ((ct == 0) || (ix >= ct)) {\n-            control.getColumns().add(c);\n-        } else {\n-            control.getColumns().add(ix, c);\n-        }\n+    private TableColumn<DataRow, Object> newColumn() {\n+        TableColumn<DataRow, Object> tc = new TableColumn();\n+        tc.setCellFactory(TextFieldTableCell.<DataRow, Object>forTableColumn(DataRow.converter()));\n+        tc.setCellValueFactory((cdf) -> {\n+            Object v = cdf.getValue();\n+            if (v instanceof DataRow r) {\n+                return r.getValue(tc);\n+            }\n+            return new SimpleObjectProperty(v);\n+        });\n+        tc.setContextMenu(createPopupMenu(tc));\n+        return tc;\n@@ -167,14 +142,4 @@\n-    private void removeColumn(int where) {\n-        int ct = control.getColumns().size();\n-        int ix;\n-        switch (where) {\n-        case 0:\n-            ix = 0;\n-            break;\n-        case 1:\n-            ix = ct \/ 2;\n-            break;\n-        case 2:\n-        default:\n-            ix = ct - 1;\n-            break;\n+    private void addColumn(TableColumn<?, ?> ref, boolean after) {\n+        int ix = control.getColumns().indexOf(ref);\n+        if (ix < 0) {\n+            return;\n@@ -182,3 +147,2 @@\n-\n-        if ((ct >= 0) && (ix < ct)) {\n-            control.getColumns().remove(ix);\n+        if (after) {\n+            ix++;\n@@ -186,1 +150,0 @@\n-    }\n@@ -188,2 +151,3 @@\n-    private void removeAllColumns() {\n-        control.getColumns().clear();\n+        TableColumn<DataRow, Object> c = newColumn();\n+        c.setText(\"C\" + System.currentTimeMillis());\n+        control.getColumns().add(ix, c);\n@@ -192,56 +156,0 @@\n-\/\/                case COL_WITH_GRAPHIC:\n-\/\/                    {\n-\/\/                        TableColumn<Object, String> c = new TableColumn<>();\n-\/\/                        tableView.getColumns().add(c);\n-\/\/                        c.setText(\"C\" + tableView.getColumns().size());\n-\/\/                        c.setCellValueFactory((f) -> new SimpleStringProperty(describe(c)));\n-\/\/                        c.setCellFactory((r) -> {\n-\/\/                            return new TableCell<>() {\n-\/\/                                @Override\n-\/\/                                protected void updateItem(String item, boolean empty) {\n-\/\/                                    super.updateItem(item, empty);\n-\/\/                                    Text t = new Text(\n-\/\/                                        \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n2\\n3\\n\");\n-\/\/                                    t.wrappingWidthProperty().bind(widthProperty());\n-\/\/                                    setPrefHeight(USE_COMPUTED_SIZE);\n-\/\/                                    setGraphic(t);\n-\/\/                                }\n-\/\/                            };\n-\/\/                        });\n-\/\/                        lastColumn = c;\n-\/\/                    }\n-\n-    \/\/ FIX move to column menu\n-\/\/    void filter() {\n-\/\/        Filter f = filterSelector.getSelectionModel().getSelectedItem();\n-\/\/        if (f == Filter.NONE) {\n-\/\/            f = null;\n-\/\/        }\n-\/\/        if (f != null) {\n-\/\/            ObservableList<Object> items = FXCollections.observableArrayList();\n-\/\/            items.addAll(tableView.getItems());\n-\/\/            FilteredList<Object> filteredList = new FilteredList<>(items);\n-\/\/            switch(f) {\n-\/\/            case SKIP1S:\n-\/\/                filteredList.setPredicate((s) -> {\n-\/\/                    if (s == null) {\n-\/\/                        return true;\n-\/\/                    }\n-\/\/                    return !((String)s).contains(\"11\");\n-\/\/                });\n-\/\/                break;\n-\/\/            case SKIP2S:\n-\/\/                filteredList.setPredicate((s) -> {\n-\/\/                    if (s == null) {\n-\/\/                        return true;\n-\/\/                    }\n-\/\/                    return !((String)s).contains(\"22\");\n-\/\/                });\n-\/\/                break;\n-\/\/            default:\n-\/\/                throw new Error(\"?\" + f);\n-\/\/            }\n-\/\/            \/\/tableView.setItems(filteredList);\n-\/\/        }\n-\/\/    }\n-\n@@ -258,86 +166,0 @@\n-    \/\/ FIX move to column menu\n-\/\/    private Callback<CellDataFeatures<Object, String>, ObservableValue<String>> getValueFactory(CellValue t) {\n-\/\/        if (t != null) {\n-\/\/            switch (t) {\n-\/\/            case MIN_MAX:\n-\/\/                return (f) -> {\n-\/\/                    String s = describe(f.getTableColumn());\n-\/\/                    return new SimpleStringProperty(s);\n-\/\/                };\n-\/\/            case QUOTED:\n-\/\/                return (f) -> {\n-\/\/                    String s = \"\\\"\" + f.getValue() + '\"';\n-\/\/                    return new SimpleStringProperty(s);\n-\/\/                };\n-\/\/            case VALUE:\n-\/\/                return (f) -> {\n-\/\/                    String s = String.valueOf(f.getValue());\n-\/\/                    return new SimpleStringProperty(s);\n-\/\/                };\n-\/\/            }\n-\/\/        }\n-\/\/        return null;\n-\/\/    }\n-\n-\/\/    private Node getIcon(String text) {\n-\/\/        if (text.contains(\"0\")) {\n-\/\/            return icon(Color.RED);\n-\/\/        } else if (text.contains(\"1\")) {\n-\/\/            return icon(Color.GREEN);\n-\/\/        }\n-\/\/        return null;\n-\/\/    }\n-\/\/\n-\/\/    private Node icon(Color color) {\n-\/\/        Canvas c = new Canvas(16, 16);\n-\/\/        GraphicsContext g = c.getGraphicsContext2D();\n-\/\/        g.setFill(color);\n-\/\/        g.fillRect(0, 0, c.getWidth(), c.getHeight());\n-\/\/        return c;\n-\/\/    }\n-\n-    \/\/ FIX move to column menu\n-\/\/    private Callback getCellFactory(Cells t) {\n-\/\/        if (t != null) {\n-\/\/            switch (t) {\n-\/\/            case NULL:\n-\/\/                return null;\n-\/\/            case GRAPHICS:\n-\/\/                return (r) -> {\n-\/\/                    return new TableCell<String,String>() {\n-\/\/                        @Override\n-\/\/                        protected void updateItem(String item, boolean empty) {\n-\/\/                            super.updateItem(item, empty);\n-\/\/                            if (item == null) {\n-\/\/                                super.setText(null);\n-\/\/                                super.setGraphic(null);\n-\/\/                            } else {\n-\/\/                                String s = item.toString();\n-\/\/                                super.setText(s);\n-\/\/                                Node n = getIcon(s);\n-\/\/                                super.setGraphic(n);\n-\/\/                            }\n-\/\/                        }\n-\/\/                    };\n-\/\/                };\n-\/\/            case VARIABLE:\n-\/\/                return (r) -> {\n-\/\/                    return new TableCell<String,String>() {\n-\/\/                        @Override\n-\/\/                        protected void updateItem(String item, boolean empty) {\n-\/\/                            super.updateItem(item, empty);\n-\/\/                            String s =\n-\/\/                                \"111111111111111111111111111111111111111111111\" +\n-\/\/                                \"11111111111111111111111111111111111111111\\n2\\n3\\n\";\n-\/\/                            Text t = new Text(s);\n-\/\/                            t.wrappingWidthProperty().bind(widthProperty());\n-\/\/                            setPrefHeight(USE_COMPUTED_SIZE);\n-\/\/                            setGraphic(t);\n-\/\/                        }\n-\/\/                    };\n-\/\/                };\n-\/\/            }\n-\/\/        }\n-\/\/        return TableColumn.DEFAULT_CELL_FACTORY;\n-\/\/    }\n-\n@@ -367,0 +189,4 @@\n+    private ColumnBuilder<TableColumn<DataRow, ?>> columnBuilder() {\n+        return new ColumnBuilder<>(this::newColumn);\n+    }\n+\n@@ -440,17 +266,0 @@\n-    private ColumnBuilder<TableColumn<DataRow, ?>> columnBuilder() {\n-        return new ColumnBuilder<>(this::newColumn);\n-    }\n-\n-    private TableColumn<DataRow, Object> newColumn() {\n-        TableColumn<DataRow, Object> tc = new TableColumn();\n-        tc.setCellFactory(TextFieldTableCell.<DataRow, Object>forTableColumn(DataRow.converter()));\n-        tc.setCellValueFactory((cdf) -> {\n-            Object v = cdf.getValue();\n-            if (v instanceof DataRow r) {\n-                return r.getValue(tc);\n-            }\n-            return new SimpleObjectProperty(v);\n-        });\n-        return tc;\n-    }\n-\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TableViewPage.java","additions":48,"deletions":239,"binary":false,"changes":287,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -29,3 +30,2 @@\n-import com.oracle.tools.fx.monkey.options.BooleanOption;\n-import com.oracle.tools.fx.monkey.options.IntOption;\n-import com.oracle.tools.fx.monkey.sheets.TextInputControlPropertySheet;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.sheets.TextAreaPropertySheet;\n@@ -45,1 +45,8 @@\n-        control = new TextArea();\n+        control = new TextArea() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n@@ -48,7 +55,1 @@\n-        op.section(\"TextArea\");\n-        op.option(\"Preferred Column Count:\", new IntOption(\"prefColumnCount\", -1, Integer.MAX_VALUE, control.prefColumnCountProperty()));\n-        op.option(\"Preferred Row Count:\", new IntOption(\"prefRowCount\", -1, Integer.MAX_VALUE, control.prefRowCountProperty()));\n-        op.option(\"Scroll Left: TODO\", null); \/\/ TODO\n-        op.option(\"Scroll Top: TODO\", null); \/\/ TODO\n-        op.option(new BooleanOption(\"wrapText\", \"wrap text\", control.wrapTextProperty()));\n-        TextInputControlPropertySheet.appendTo(op, true, control);\n+        TextAreaPropertySheet.appendTo(op, control);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextAreaPage.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import javafx.geometry.Pos;\n+import javafx.scene.AccessibleAttribute;\n@@ -32,3 +32,2 @@\n-import com.oracle.tools.fx.monkey.options.EnumOption;\n-import com.oracle.tools.fx.monkey.options.IntOption;\n-import com.oracle.tools.fx.monkey.sheets.TextInputControlPropertySheet;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.sheets.TextFieldPropertySheet;\n@@ -48,1 +47,8 @@\n-        this(new TextField(), \"TextFieldPage\");\n+        this(new TextField() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        }, \"TextFieldPage\");\n@@ -60,6 +66,4 @@\n-        op.option(\"Alignment:\", new EnumOption<>(\"alignment\", false, Pos.class, control.alignmentProperty()));\n-        op.option(\"Preferred Column Count:\", new IntOption(\"prefColumnCount\", -1, Integer.MAX_VALUE, control.prefColumnCountProperty()));\n-        op.separator();\n-        op.option(inScroll);\n-\n-        TextInputControlPropertySheet.appendTo(op, false, control);\n+        TextFieldPropertySheet.appendTo(op, control, () -> {\n+            op.separator();\n+            op.option(inScroll);\n+        });\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextFieldPage.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -31,0 +32,1 @@\n+import javafx.scene.control.ContextMenu;\n@@ -39,0 +41,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -45,0 +48,1 @@\n+import com.oracle.tools.fx.monkey.tools.AccessibilityPropertyViewer;\n@@ -46,0 +50,1 @@\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -69,1 +74,8 @@\n-        textFlow = new TextFlow();\n+        textFlow = new TextFlow() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n@@ -71,0 +83,1 @@\n+        FX.setPopupMenu(textFlow, this::createPopupMenu);\n@@ -98,1 +111,1 @@\n-        showChars = new BooleanOption(\"showChars\", \"show characters\", () -> updateShowCharacters());\n+        showChars = new BooleanOption(\"showChars\", \"show characters\", (v) -> updateShowCharacters(v));\n@@ -100,1 +113,1 @@\n-        showCaretPaths = new BooleanOption(\"showCaretPaths\", \"show caret paths\", () -> updateShowCaretPaths());\n+        showCaretPaths = new BooleanOption(\"showCaretPaths\", \"show caret paths\", (v) -> updateShowCaretPaths(v));\n@@ -229,2 +242,2 @@\n-    private void updateShowCaretPaths() {\n-        if (showCaretPaths.getValue()) {\n+    private void updateShowCaretPaths(boolean on) {\n+        if (on) {\n@@ -237,2 +250,2 @@\n-    private void updateShowCharacters() {\n-        if (showChars.getValue()) {\n+    private void updateShowCharacters(boolean on) {\n+        if (on) {\n@@ -244,0 +257,6 @@\n+\n+    private ContextMenu createPopupMenu(PickResult pick) {\n+        ContextMenu m = new ContextMenu();\n+        FX.item(m, \"Accessibility Attributes\", () -> AccessibilityPropertyViewer.open(pick));\n+        return m;\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextFlowPage.java","additions":26,"deletions":7,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import javafx.scene.control.ContextMenu;\n@@ -34,0 +35,1 @@\n+import javafx.scene.input.PickResult;\n@@ -47,0 +49,2 @@\n+import com.oracle.tools.fx.monkey.tools.AccessibilityPropertyViewer;\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -66,0 +70,1 @@\n+        FX.setPopupMenu(text, this::createPopupMenu);\n@@ -69,1 +74,1 @@\n-        showChars = new BooleanOption(\"showChars\", \"show characters\", () -> updateShowCharacters());\n+        showChars = new BooleanOption(\"showChars\", \"show characters\", (v) -> updateShowCharacters(v));\n@@ -71,1 +76,1 @@\n-        wrap = new BooleanOption(\"wrap\", \"wrap width\", () -> updateWrap());\n+        wrap = new BooleanOption(\"wrap\", \"wrap width\", (v) -> updateWrap(v));\n@@ -108,2 +113,2 @@\n-        updateWrap();\n-        updateShowCharacters();\n+        updateWrap(false);\n+        updateShowCharacters(false);\n@@ -112,2 +117,2 @@\n-    private void updateShowCharacters() {\n-        if (showChars.getValue()) {\n+    private void updateShowCharacters(boolean on) {\n+        if (on) {\n@@ -120,2 +125,2 @@\n-    private void updateWrap() {\n-        if (wrap.getValue()) {\n+    private void updateWrap(boolean on) {\n+        if (on) {\n@@ -134,0 +139,6 @@\n+\n+    private ContextMenu createPopupMenu(PickResult pick) {\n+        ContextMenu m = new ContextMenu();\n+        FX.item(m, \"Accessibility Attributes\", () -> AccessibilityPropertyViewer.open(pick));\n+        return m;\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextPage.java","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import javafx.geometry.Pos;\n+import javafx.scene.AccessibleAttribute;\n@@ -29,0 +31,1 @@\n+import javafx.scene.control.ComboBox;\n@@ -34,0 +37,1 @@\n+import javafx.scene.layout.Background;\n@@ -35,0 +39,2 @@\n+import javafx.scene.paint.Color;\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -51,1 +57,8 @@\n-        control = new TitledPane();\n+        control = new TitledPane() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n@@ -75,0 +88,18 @@\n+    private Node makeLabel() {\n+        Label t = new Label(\"Label\");\n+        t.setAlignment(Pos.CENTER);\n+        t.setMaxHeight(Double.MAX_VALUE);\n+        t.setMaxWidth(Double.MAX_VALUE);\n+        t.setBackground(Background.fill(Color.LIGHTGOLDENRODYELLOW));\n+        return t;\n+    }\n+\n+    private Node makeComboBox() {\n+        ComboBox<Object> t = new ComboBox<>();\n+        t.setEditable(true);\n+        t.getItems().addAll(\n+            \"is a very long string to make the combo box extra wide\"\n+        );\n+        return t;\n+    }\n+\n@@ -77,1 +108,0 @@\n-        s.addChoiceSupplier(\"Label\", () -> new Label(\"Label\"));\n@@ -79,0 +109,2 @@\n+        s.addChoiceSupplier(\"ComboBox\", () -> makeComboBox());\n+        s.addChoiceSupplier(\"Label\", () -> makeLabel());\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TitledPanePage.java","additions":34,"deletions":2,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.geometry.Insets;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.control.ToggleGroup;\n+import javafx.scene.control.skin.ToggleButtonSkin;\n+import javafx.scene.layout.HBox;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.sheets.ButtonsPropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * ToggleButton Page.\n+ *\/\n+public class ToggleButtonPage extends TestPaneBase implements HasSkinnable {\n+    private final ToggleButton control;\n+\n+    public ToggleButtonPage() {\n+        super(\"ToggleButtonPage\");\n+\n+        control = new ToggleButton(\"Toggle Button\") {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+\n+        ToggleButton b2 = new ToggleButton(\"B2\");\n+        ToggleButton b3 = new ToggleButton(\"B3\");\n+\n+        ToggleGroup group = new ToggleGroup();\n+        group.getToggles().addAll(b2, b3);\n+\n+        OptionPane op = new OptionPane();\n+        ButtonsPropertySheet.appendTo(op, control, group);\n+\n+        HBox p = new HBox(4, control, b2, b3);\n+        p.setPadding(new Insets(4));\n+        setContent(p);\n+        setOptions(op);\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new ToggleButtonSkin(control));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ToggleButtonPage.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -31,0 +31,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -34,0 +35,1 @@\n+import javafx.scene.control.CheckBox;\n@@ -36,0 +38,1 @@\n+import javafx.scene.control.ListView;\n@@ -41,0 +44,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -43,0 +47,1 @@\n+import com.oracle.tools.fx.monkey.sheets.PropertiesMenu;\n@@ -60,1 +65,8 @@\n-        control = new ToolBar();\n+        control = new ToolBar() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n@@ -64,0 +76,1 @@\n+            FX.menuItem(\"CheckBox\", () -> add(checkBox(\"CheckBox\"))),\n@@ -65,1 +78,2 @@\n-            FX.menuItem(\"TextField\", () -> add(textField(20)))\n+            FX.menuItem(\"TextField\", () -> add(textField(20))),\n+            FX.menuItem(\"ListView\", () -> add(listView()))\n@@ -104,1 +118,1 @@\n-                label(\"Find:\"),\n+                label(\"Label\"),\n@@ -108,0 +122,1 @@\n+                checkBox(\"checkbox\"),\n@@ -132,0 +147,6 @@\n+    private Node checkBox(String text) {\n+        CheckBox n = new CheckBox(text);\n+        setContextMenu(n);\n+        return n;\n+    }\n+\n@@ -139,0 +160,10 @@\n+    private Node listView() {\n+        ListView<String> listView = new ListView<>();\n+        for (int i = 0; i < 10; i++) {\n+            listView.getItems().add(\"Item \" + i);\n+        }\n+        listView.setPrefHeight(100);\n+        setContextMenu(listView);\n+        return listView;\n+    }\n+\n@@ -153,4 +184,1 @@\n-            FX.item(m, \"Remove\", () -> {\n-                control.getItems().remove(n);\n-            });\n-\n+            FX.item(m, \"Remove\", () -> control.getItems().remove(n));\n@@ -158,1 +186,0 @@\n-\n@@ -160,1 +187,0 @@\n-\n@@ -162,10 +188,5 @@\n-\n-            FX.item(m, \"Pref(50)\", () -> {\n-                n.setPrefWidth(50);\n-            });\n-            FX.item(m, \"Pref(200)\", () -> {\n-                n.setPrefWidth(200);\n-            });\n-            FX.item(m, \"Pref(500)\", () -> {\n-                n.setPrefWidth(500);\n-            });\n+            FX.item(m, \"Pref(50)\", () -> n.setPrefWidth(50));\n+            FX.item(m, \"Pref(200)\", () -> n.setPrefWidth(200));\n+            FX.item(m, \"Pref(500)\", () -> n.setPrefWidth(500));\n+            FX.separator(m);\n+            FX.item(m, \"Properties...\", () -> PropertiesMenu.openPropertiesDialog(this, n));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ToolBarPage.java","additions":40,"deletions":19,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import javafx.beans.property.ObjectProperty;\n@@ -51,1 +52,1 @@\n-    private final Tooltip control; \/\/ TODO not a control, but a PopupWindow\n+    private final Tooltip tooltip;\n@@ -56,1 +57,4 @@\n-        control = new Tooltip(\"This is a tooltip with some default text, to be settable later.\");\n+        tooltip = new Tooltip(\"This is a tooltip with some default text, to be settable later.\");\n+        tooltip.showDelayProperty().addListener((s, p, c) -> {\n+            System.out.println(\"showDelay=\" + c);\n+        });\n@@ -58,6 +62,1 @@\n-        ObjectOption<Node> graphic = new ObjectOption<>(\"graphic\", control.graphicProperty());\n-        graphic.addChoice(\"<null>\", null);\n-        graphic.addChoice(\"Image\", ImageTools.createImageView(Color.RED, 256, 256));\n-        graphic.addChoiceSupplier(\"Interactive Content\", this::createInteractiveContent);\n-\n-        Label content = new Label(\"Hover to show the tooltip\");\n+        Label content = new Label(\"Hover over this area to show the tooltip\");\n@@ -65,1 +64,1 @@\n-        Tooltip.install(content, control);\n+        Tooltip.install(content, tooltip);\n@@ -70,1 +69,1 @@\n-        op.option(\"Content Display:\", new EnumOption<>(\"contentDisplay\", ContentDisplay.class, control.contentDisplayProperty()));\n+        op.option(\"Content Display:\", new EnumOption<>(\"contentDisplay\", ContentDisplay.class, tooltip.contentDisplayProperty()));\n@@ -72,9 +71,9 @@\n-        op.option(\"Graphic:\", graphic);\n-        op.option(\"Graphic Text Gap:\", new DoubleSpinner(\"graphicTextGap\", 0, 100, 0.1, control.graphicTextGapProperty()));\n-        op.option(\"Hide Delay:\", new DurationOption(\"hideDelay\", control.hideDelayProperty()));\n-        op.option(\"Show Delay:\", new DurationOption(\"showDelay\", control.showDelayProperty()));\n-        op.option(\"Show Duration:\", new DurationOption(\"showDuration\", control.showDurationProperty()));\n-        op.option(\"Text:\", Options.textOption(\"text\", true, true, control.textProperty()));\n-        op.option(\"Text Alignment:\", new EnumOption<>(\"textAlignment\", TextAlignment.class, control.textAlignmentProperty()));\n-        op.option(\"Text Overrun:\", new EnumOption<>(\"textOverrun\", OverrunStyle.class, control.textOverrunProperty()));\n-        op.option(new BooleanOption(\"wrapText\", \"wrap text\", control.wrapTextProperty()));\n+        op.option(\"Graphic:\", createGraphicOptions(\"graphic\", tooltip.graphicProperty()));\n+        op.option(\"Graphic Text Gap:\", new DoubleSpinner(\"graphicTextGap\", 0, 100, 0.1, tooltip.graphicTextGapProperty()));\n+        op.option(\"Hide Delay:\", new DurationOption(\"hideDelay\", tooltip.hideDelayProperty()));\n+        op.option(\"Show Delay:\", new DurationOption(\"showDelay\", tooltip.showDelayProperty()));\n+        op.option(\"Show Duration:\", new DurationOption(\"showDuration\", tooltip.showDurationProperty()));\n+        op.option(\"Text:\", Options.textOption(\"text\", true, true, tooltip.textProperty()));\n+        op.option(\"Text Alignment:\", new EnumOption<>(\"textAlignment\", TextAlignment.class, tooltip.textAlignmentProperty()));\n+        op.option(\"Text Overrun:\", new EnumOption<>(\"textOverrun\", OverrunStyle.class, tooltip.textOverrunProperty()));\n+        op.option(new BooleanOption(\"wrapText\", \"wrap text\", tooltip.wrapTextProperty()));\n@@ -88,0 +87,8 @@\n+    private Node createGraphicOptions(String string, ObjectProperty<Node> graphicProperty) {\n+        ObjectOption<Node> op = new ObjectOption<>(\"graphic\", tooltip.graphicProperty());\n+        op.addChoice(\"<null>\", null);\n+        op.addChoice(\"Image\", ImageTools.createImageView(256, 256));\n+        op.addChoiceSupplier(\"Interactive Content\", this::createInteractiveContent);\n+        return op;\n+    }\n+\n@@ -90,2 +97,2 @@\n-        boolean autoHide = control.isAutoHide();\n-        control.setAutoHide(false);\n+        boolean autoHide = tooltip.isAutoHide();\n+        tooltip.setAutoHide(false);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TooltipPage.java","additions":28,"deletions":21,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -36,0 +37,1 @@\n+import javafx.scene.control.ContextMenu;\n@@ -37,1 +39,0 @@\n-import javafx.scene.control.SplitMenuButton;\n@@ -50,0 +51,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -55,0 +57,1 @@\n+import com.oracle.tools.fx.monkey.sheets.TableColumnPropertySheet;\n@@ -74,1 +77,8 @@\n-        control = new TreeTableView<>();\n+        control = new TreeTableView<>() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n@@ -84,15 +94,0 @@\n-        SplitMenuButton addColumnButton = new SplitMenuButton(\n-            FX.menuItem(\"at the beginning\", () -> addColumn(0)),\n-            FX.menuItem(\"in the middle\", () -> addColumn(1)),\n-            FX.menuItem(\"at the end\", () -> addColumn(2))\n-        );\n-        addColumnButton.setText(\"Add Column\");\n-\n-        SplitMenuButton removeColumnButton = new SplitMenuButton(\n-            FX.menuItem(\"at the beginning\", () -> removeColumn(0)),\n-            FX.menuItem(\"in the middle\", () -> removeColumn(1)),\n-            FX.menuItem(\"at the end\", () -> removeColumn(2)),\n-            FX.menuItem(\"all\", () -> removeAllColumns())\n-        );\n-        removeColumnButton.setText(\"Remove Column\");\n-\n@@ -106,1 +101,0 @@\n-        op.option(Utils.buttons(addColumnButton, removeColumnButton));\n@@ -120,7 +114,0 @@\n-        op.option(\"Tree Column: TODO\", null); \/\/ TODO\n-        ControlPropertySheet.appendTo(op, control);\n-\n-        \/\/ TODO op.option(\"Cell Factory:\", cellFactorySelector);\n-        \/\/op.option(addGraphics);\n-        \/\/op.option(addSubNodes);\n-\n@@ -129,0 +116,1 @@\n+        ControlPropertySheet.appendTo(op, control);\n@@ -134,3 +122,11 @@\n-    private void addColumn(int where) {\n-        TreeTableColumn<DataRow, Object> c = newColumn();\n-        c.setText(\"C\" + System.currentTimeMillis());\n+    private ContextMenu createPopupMenu(TreeTableColumn<?,?> tc) {\n+        ContextMenu m = new ContextMenu();\n+        FX.item(m, \"Add Column Before\", () -> addColumn(tc, false));\n+        FX.item(m, \"Add Column After\", () -> addColumn(tc, true));\n+        FX.separator(m);\n+        FX.item(m, \"Remove Column\", () -> control.getColumns().remove(tc));\n+        FX.item(m, \"Remove All Columns\", () -> control.getColumns().clear());\n+        FX.separator(m);\n+        FX.item(m, \"Properties...\", () -> TableColumnPropertySheet.open(this, tc));\n+        return m;\n+    }\n@@ -138,19 +134,12 @@\n-        int ct = control.getColumns().size();\n-        int ix;\n-        switch (where) {\n-        case 0:\n-            ix = 0;\n-            break;\n-        case 1:\n-            ix = ct \/ 2;\n-            break;\n-        case 2:\n-        default:\n-            ix = ct;\n-            break;\n-        }\n-        if ((ct == 0) || (ix >= ct)) {\n-            control.getColumns().add(c);\n-        } else {\n-            control.getColumns().add(ix, c);\n-        }\n+    private TreeTableColumn<DataRow, Object> newColumn() {\n+        TreeTableColumn<DataRow, Object> tc = new TreeTableColumn();\n+        tc.setCellFactory(TextFieldTreeTableCell.<DataRow, Object>forTreeTableColumn(DataRow.converter()));\n+        tc.setCellValueFactory((cdf) -> {\n+            Object v = cdf.getValue().getValue();\n+            if (v instanceof DataRow r) {\n+                return r.getValue(tc);\n+            }\n+            return new SimpleObjectProperty(v);\n+        });\n+        tc.setContextMenu(createPopupMenu(tc));\n+        return tc;\n@@ -159,14 +148,4 @@\n-    private void removeColumn(int where) {\n-        int ct = control.getColumns().size();\n-        int ix;\n-        switch (where) {\n-        case 0:\n-            ix = 0;\n-            break;\n-        case 1:\n-            ix = ct \/ 2;\n-            break;\n-        case 2:\n-        default:\n-            ix = ct - 1;\n-            break;\n+    private void addColumn(TreeTableColumn<?, ?> ref, boolean after) {\n+        int ix = control.getColumns().indexOf(ref);\n+        if (ix < 0) {\n+            return;\n@@ -174,3 +153,2 @@\n-\n-        if ((ct >= 0) && (ix < ct)) {\n-            control.getColumns().remove(ix);\n+        if (after) {\n+            ix++;\n@@ -178,0 +156,4 @@\n+\n+        TreeTableColumn<DataRow, Object> c = newColumn();\n+        c.setText(\"C\" + System.currentTimeMillis());\n+        control.getColumns().add(ix, c);\n@@ -184,75 +166,0 @@\n-\/\/    protected Pane createPane(Data demo, ResizePolicy policy, Object[] spec) {\n-\/\/        TreeTableColumn<String, String> lastColumn = null;\n-\/\/        int id = 1;\n-\/\/\n-\/\/        for (int i = 0; i < spec.length;) {\n-\/\/            Object x = spec[i++];\n-\/\/            if (x instanceof Cmd cmd) {\n-\/\/                switch (cmd) {\n-\/\/                case COL_WITH_GRAPHIC:\n-\/\/                    lastColumn = makeColumn((c) -> {\n-\/\/                        c.setCellValueFactory((f) -> new SimpleStringProperty(describe(c)));\n-\/\/                        c.setCellFactory((r) -> {\n-\/\/                            return new TreeTableCell<>() {\n-\/\/                                @Override\n-\/\/                                protected void updateItem(String item, boolean empty) {\n-\/\/                                    super.updateItem(item, empty);\n-\/\/                                    if (empty) {\n-\/\/                                        setGraphic(null);\n-\/\/                                    } else {\n-\/\/                                        Text t = new Text(\"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111\\n2\\n3\\n\");\n-\/\/                                        t.wrappingWidthProperty().bind(widthProperty());\n-\/\/                                        setGraphic(t);\n-\/\/                                    }\n-\/\/                                    setPrefHeight(USE_COMPUTED_SIZE);\n-\/\/                                }\n-\/\/                            };\n-\/\/                        });\n-\/\/                    });\n-\/\/                case ROWS:\n-\/\/                    {\n-\/\/                        int n = (int)(spec[i++]);\n-\/\/                        TreeItem subNodeTreeItem = null;\n-\/\/                        for (int j = 0; j < n; j++) {\n-\/\/                            TreeItem treeItem = new TreeItem(newItem());\n-\/\/                            if (addSubNodes.isSelected()) {\n-\/\/                                subNodeTreeItem = new TreeItem(newItem());\n-\/\/                                treeItem.getChildren().add(subNodeTreeItem);\n-\/\/                            }\n-\/\/                            if (addGraphics.isSelected()) {\n-\/\/                                treeItem.setGraphic(new Rectangle(10, 10, Color.RED));\n-\/\/                                if (subNodeTreeItem != null) {\n-\/\/                                    subNodeTreeItem.setGraphic(new Rectangle(10, 10));\n-\/\/                                }\n-\/\/                            }\n-\/\/                            control.getRoot().getChildren().add(treeItem);\n-\/\/                        }\n-\/\/                    }\n-\n-\/\/    protected TreeTableColumn<String, String> makeColumn(Consumer<TreeTableColumn<String, String>> updater) {\n-\/\/        TreeTableColumn<String, String> c = new TreeTableColumn<>();\n-\/\/        control.getColumns().add(c);\n-\/\/        c.setText(\"C\" + control.getColumns().size());\n-\/\/        updater.accept(c);\n-\/\/\n-\/\/        if (defaultCellFactory == null) {\n-\/\/            defaultCellFactory = c.getCellFactory();\n-\/\/        }\n-\/\/\n-\/\/        Cells t = cellFactorySelector.getSelectionModel().getSelectedItem();\n-\/\/        Callback<TreeTableColumn<String, String>, TreeTableCell<String, String>> f = getCellFactory(t);\n-\/\/        c.setCellFactory(f);\n-\/\/\n-\/\/        c.setOnEditCommit((ev) -> {\n-\/\/            if (\"update\".equals(ev.getNewValue())) {\n-\/\/                var item = ev.getRowValue();\n-\/\/                item.setValue(\"UPDATED!\");\n-\/\/                System.out.println(\"committing the value `UPDATED!`\");\n-\/\/            } else {\n-\/\/                System.out.println(\"discarding the new value: \" + ev.getNewValue());\n-\/\/            }\n-\/\/        });\n-\/\/\n-\/\/        return c;\n-\/\/    }\n-\n@@ -296,13 +203,0 @@\n-    private TreeTableColumn<DataRow, Object> newColumn() {\n-        TreeTableColumn<DataRow, Object> tc = new TreeTableColumn();\n-        tc.setCellFactory(TextFieldTreeTableCell.<DataRow, Object>forTreeTableColumn(DataRow.converter()));\n-        tc.setCellValueFactory((cdf) -> {\n-            Object v = cdf.getValue().getValue();\n-            if (v instanceof DataRow r) {\n-                return r.getValue(tc);\n-            }\n-            return new SimpleObjectProperty(v);\n-        });\n-        return tc;\n-    }\n-\n@@ -328,1 +222,1 @@\n-            for(int i=1; i<20; i++) {\n+            for (int i = 1; i < 20; i++) {\n@@ -335,1 +229,1 @@\n-            for(int i=1; i<20; i++) {\n+            for (int i = 1; i < 20; i++) {\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TreeTableViewPage.java","additions":48,"deletions":154,"binary":false,"changes":202,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -41,0 +42,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -62,1 +64,8 @@\n-        control = new TreeView<>(new CheckBoxTreeItem<>(\"root\"));\n+        control = new TreeView<>(new CheckBoxTreeItem<>(\"root\")) {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TreeViewPage.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import javafx.scene.AccessibleAttribute;\n@@ -39,0 +40,1 @@\n+import com.oracle.tools.fx.monkey.Loggers;\n@@ -59,1 +61,8 @@\n-        box = new VBox();\n+        box = new VBox() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/VBoxPage.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    protected static final Random rnd = new Random();\n+    protected static final Random random = new Random();\n@@ -63,0 +63,4 @@\n+    protected double randomValue() {\n+        return random.nextInt(50) - 25;\n+    }\n+\n@@ -68,1 +72,1 @@\n-            int v = rnd.nextInt(50);\n+            double v = randomValue();\n@@ -79,1 +83,1 @@\n-            int v = rnd.nextInt(50);\n+            double v = randomValue();\n@@ -119,1 +123,1 @@\n-        boolean atIndexZero = rnd.nextBoolean();\n+        boolean atIndexZero = random.nextBoolean();\n@@ -122,1 +126,1 @@\n-            int v = rnd.nextInt(50);\n+            double v = randomValue();\n@@ -125,1 +129,1 @@\n-            int v = rnd.nextInt(50);\n+            double v = randomValue();\n@@ -128,2 +132,2 @@\n-            int i = rnd.nextInt(100);\n-            int v = rnd.nextInt(50);\n+            int i = random.nextInt(100);\n+            double v = randomValue();\n@@ -140,1 +144,1 @@\n-                int ix = rnd.nextBoolean() ? 0 : sz - 1;\n+                int ix = random.nextBoolean() ? 0 : sz - 1;\n@@ -166,1 +170,1 @@\n-            int v = rnd.nextInt(50);\n+            double v = randomValue();\n@@ -169,1 +173,1 @@\n-            int v = rnd.nextInt(50);\n+            double v = randomValue();\n@@ -172,1 +176,1 @@\n-            int v = rnd.nextInt(50);\n+            double v = randomValue();\n@@ -189,1 +193,1 @@\n-            int v = rnd.nextInt(50);\n+            double v = randomValue();\n@@ -192,1 +196,1 @@\n-            int v = rnd.nextInt(50);\n+            double v = randomValue();\n@@ -195,1 +199,1 @@\n-            int v = rnd.nextInt(50);\n+            double v = randomValue();\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/XYChartPageBase.java","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.sheets;\n+\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Hyperlink;\n+import javafx.scene.control.RadioButton;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.control.ToggleGroup;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+\n+\/**\n+ * Button(s) property sheet.\n+ *\/\n+public class ButtonsPropertySheet {\n+    public static void appendTo(OptionPane op, Button n) {\n+        op.section(\"Button\");\n+        op.option(new BooleanOption(\"cancelButton\", \"cancel button\", n.cancelButtonProperty()));\n+        op.option(new BooleanOption(\"defaultButton\", \"default button\", n.defaultButtonProperty()));\n+\n+        LabeledPropertySheet.appendTo(op, \"Labeled\", false, n);\n+    }\n+\n+    public static void appendTo(OptionPane op, CheckBox n) {\n+        op.section(\"CheckBox\");\n+        op.option(new BooleanOption(\"allowIndeterminate\", \"allow indeterminate\", n.allowIndeterminateProperty()));\n+        op.option(new BooleanOption(\"indeterminate\", \"indeterminate\", n.indeterminateProperty()));\n+        op.option(new BooleanOption(\"selected\", \"selected\", n.selectedProperty()));\n+\n+        LabeledPropertySheet.appendTo(op, \"Labeled\", false, n);\n+    }\n+\n+    public static void appendTo(OptionPane op, Hyperlink n) {\n+        op.section(\"Hyperlink\");\n+        op.option(new BooleanOption(\"visited\", \"visited\", n.visitedProperty()));\n+\n+        LabeledPropertySheet.appendTo(op, \"Labeled\", false, n);\n+    }\n+\n+    public static void appendTo(OptionPane op, RadioButton n, ToggleGroup g) {\n+        op.section(\"RadioButton\");\n+        op.option(new BooleanOption(\"selectedButton\", \"selected\", n.selectedProperty()));\n+        if (g != null)\n+            op.option(new BooleanOption(\"toggleGroup\", \"part of a toggle group\", (v) -> {\n+                n.setToggleGroup(v ? g : null);\n+            }));\n+\n+        LabeledPropertySheet.appendTo(op, \"Labeled\", false, n);\n+    }\n+\n+    public static void appendTo(OptionPane op, ToggleButton n, ToggleGroup g) {\n+        op.section(\"ToggleButton\");\n+        op.option(new BooleanOption(\"selectedButton\", \"selected\", n.selectedProperty()));\n+        if (g != null) {\n+            op.option(new BooleanOption(\"toggleGroup\", \"part of a toggle group\", (v) -> {\n+                n.setToggleGroup(v ? g : null);\n+            }));\n+        }\n+\n+        LabeledPropertySheet.appendTo(op, \"Labeled\", false, n);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/ButtonsPropertySheet.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -27,0 +27,4 @@\n+import javafx.beans.property.ObjectProperty;\n+import javafx.event.EventHandler;\n+import javafx.scene.Node;\n+import javafx.scene.control.ContextMenu;\n@@ -28,0 +32,7 @@\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.input.PickResult;\n+import com.oracle.tools.fx.monkey.options.ObjectOption;\n+import com.oracle.tools.fx.monkey.tools.AccessibilityPropertyViewer;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.ImageTools;\n@@ -36,5 +47,2 @@\n-        op.option(\"Context Menu: TODO\", null);\n-        \/\/ TODO context menu\n-        op.option(\"Tooltip: TODO\", null);\n-        \/\/ TODO tooltip\n-\n+        op.option(\"Context Menu:\", contextMenuOptions(\"contextMenu\", control));\n+        op.option(\"Tooltip:\", tooltipOption(\"tooltip\", control.tooltipProperty()));\n@@ -44,0 +52,66 @@\n+\n+    public static Node tooltipOption(String name, ObjectProperty<Tooltip> p) {\n+        ObjectOption<Tooltip> op = new ObjectOption<>(name, p);\n+        op.addChoice(\"<null>\", null);\n+        op.addChoiceSupplier(\"simple text\", () -> createSimpleTextTooltip());\n+        op.addChoiceSupplier(\"with image\", () -> createTooltipWithImage());\n+        op.selectInitialValue();\n+        return op;\n+    }\n+\n+    private static Tooltip createSimpleTextTooltip() {\n+        Tooltip t = new Tooltip(\"simple text tooltip\");\n+        return t;\n+    }\n+\n+    private static Tooltip createTooltipWithImage() {\n+        Tooltip t = new Tooltip(\"tooltip with image\");\n+        t.setGraphic(ImageTools.createImageView(128, 96));\n+        return t;\n+    }\n+\n+    public static ObjectOption<ContextMenu> contextMenuOptions(String name, Control c) {\n+        Picker picker = new Picker();\n+        ObjectProperty<ContextMenu> p = c.contextMenuProperty();\n+        c.addEventFilter(ContextMenuEvent.CONTEXT_MENU_REQUESTED, picker);\n+        ObjectOption<ContextMenu> op = new ObjectOption<>(name, p);\n+        op.addChoiceSupplier(\"Standard Context Menu\", () -> createStandardContextMenu(picker));\n+        op.addChoice(\"<null>\", null);\n+        op.selectInitialValue();\n+        return op;\n+    }\n+\n+    private static ContextMenu createStandardContextMenu(Picker picker) {\n+        return new ContextMenu() {\n+            @Override\n+            public void show(Node anchor, double screenX, double screenY) {\n+                PickResult pick = picker.getPickResult();\n+                getItems().clear();\n+                populate(this, pick);\n+                super.show(anchor, screenX, screenY);\n+            }\n+        };\n+    }\n+\n+    private static void populate(ContextMenu m, PickResult pick) {\n+        Node source = pick.getIntersectedNode();\n+        TypeSpecificContextMenu.populate(m, source);\n+        if (m.getItems().size() > 0) {\n+            FX.separator(m);\n+        }\n+        FX.item(m, \"Show Properties Monitor...\", () -> PropertiesMonitor.open(source));\n+        FX.item(m, \"Accessibility Attributes...\", () -> AccessibilityPropertyViewer.open(pick));\n+    }\n+\n+    static class Picker implements EventHandler<ContextMenuEvent> {\n+        private PickResult pick;\n+\n+        @Override\n+        public void handle(ContextMenuEvent ev) {\n+            pick = ev.getPickResult();\n+        }\n+\n+        public PickResult getPickResult() {\n+            return pick;\n+        }\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/ControlPropertySheet.java","additions":79,"deletions":5,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import com.oracle.tools.fx.monkey.options.DoubleOption;\n@@ -35,0 +36,1 @@\n+import com.oracle.tools.fx.monkey.options.StyleClassOption;\n@@ -59,2 +61,2 @@\n-        op.option(\"Layout X: TODO\", null); \/\/ TODO\n-        op.option(\"Layout Y: TODO\", null); \/\/ TODO\n+        op.option(\"Layout X:\", new DoubleOption(\"layoutX\", n.layoutXProperty()));\n+        op.option(\"Layout Y:\", new DoubleOption(\"layoutY\", n.layoutYProperty()));\n@@ -67,1 +69,1 @@\n-        op.option(\"Rotate: TODO\", null); \/\/ TODO\n+        op.option(\"Rotate:\", new DoubleOption(\"rotate\", n.rotateProperty()));\n@@ -69,3 +71,3 @@\n-        op.option(\"Scale X: TODO\", null); \/\/ TODO\n-        op.option(\"Scale Y: TODO\", null); \/\/ TODO\n-        op.option(\"Scale Z: TODO\", null); \/\/ TODO\n+        op.option(\"Scale X:\", new DoubleOption(\"scaleX\", n.scaleXProperty()));\n+        op.option(\"Scale Y:\", new DoubleOption(\"scaleY\", n.scaleYProperty()));\n+        op.option(\"Scale Z:\", new DoubleOption(\"scaleZ\", n.scaleZProperty()));\n@@ -73,3 +75,4 @@\n-        op.option(\"Translate X: TODO\", null); \/\/ TODO\n-        op.option(\"Translate Y: TODO\", null); \/\/ TODO\n-        op.option(\"Translate Z: TODO\", null); \/\/ TODO\n+        op.option(\"Style Class:\", new StyleClassOption(\"styleClass\", n.getStyleClass()));\n+        op.option(\"Translate X:\", new DoubleOption(\"translateX\", n.translateXProperty()));\n+        op.option(\"Translate Y:\", new DoubleOption(\"translateY\", n.translateYProperty()));\n+        op.option(\"Translate Z:\", new DoubleOption(\"translateZ\", n.translateZProperty()));\n@@ -77,1 +80,1 @@\n-        op.option(\"View Order: TODO\", null); \/\/ TODO\n+        op.option(\"View Order:\", new DoubleOption(\"viewOrder\", n.viewOrderProperty()));\n@@ -79,0 +82,2 @@\n+\n+        StyleablePropertySheet.appendTo(op, n);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/NodePropertySheet.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -38,0 +38,5 @@\n+import javafx.scene.paint.CycleMethod;\n+import javafx.scene.paint.ImagePattern;\n+import javafx.scene.paint.LinearGradient;\n+import javafx.scene.paint.RadialGradient;\n+import javafx.scene.paint.Stop;\n@@ -42,0 +47,1 @@\n+import com.oracle.tools.fx.monkey.util.ImageTools;\n@@ -80,4 +86,4 @@\n-        d.addChoice(\"0\", Double.valueOf(0));\n-        d.addChoice(\"10\", 10.0);\n-        d.addChoice(\"33.3\", 33.3);\n-        d.addChoice(\"100\", 100.0);\n+        d.addChoice(0);\n+        d.addChoice(10.0);\n+        d.addChoice(33.3);\n+        d.addChoice(100.0);\n@@ -86,1 +92,1 @@\n-        d.addChoice(\"Double.NaN\", Double.NaN);\n+        d.addChoice(\"NaN\", Double.NaN);\n@@ -102,1 +108,1 @@\n-        d.addChoice(\"Double.NaN\", Double.NaN);\n+        d.addChoice(\"NaN\", Double.NaN);\n@@ -122,12 +128,23 @@\n-        \/\/ TODO let background property track focused and focusWithin properties to change the bg\n-        \/\/ also make sure to removeListener when the background is set to another value\n-\/\/        op.addChoiceSupplier(\"Focus(Green), NoFocus(Gray)\", () -> {\n-\/\/            BooleanBinding b = Bindings.createBooleanBinding(\n-\/\/                () -> {\n-\/\/                },\n-\/\/                owner.focusTraversableProperty(),\n-\/\/                owner.focusedProperty(),\n-\/\/                owner.focusWithinProperty()\n-\/\/            );\n-\/\/            Background bg = new Background();\n-\/\/        });\n+        op.addChoiceSupplier(\"Linear Gradient\", () -> {\n+            LinearGradient g = new LinearGradient(\n+                0, 0, 30, 30, false,\n+                CycleMethod.REFLECT,\n+                new Stop(0, Color.RED), new Stop(30, Color.GREEN)\n+            );\n+            return Background.fill(g);\n+        });\n+        op.addChoiceSupplier(\"Radial Gradient\", () -> {\n+            RadialGradient g = new RadialGradient(\n+                45, 0, 50, 10, 10, false,\n+                CycleMethod.REFLECT,\n+                new Stop(0, Color.RED), new Stop(10, Color.GREEN)\n+            );\n+            return Background.fill(g);\n+        });\n+        op.addChoiceSupplier(\"Image Pattern\", () -> {\n+            ImagePattern g = new ImagePattern(\n+                ImageTools.createImage(50, 50),\n+                0, 0, 50, 50, false\n+            );\n+            return Background.fill(g);\n+        });\n@@ -167,0 +184,15 @@\n+\n+    public static Node forColumnWidth(String name, double defaultValue, DoubleProperty p) {\n+        DoubleOption d = new DoubleOption(name, p);\n+        d.addChoice(\"0\", Double.valueOf(0));\n+        d.addChoice(\"10\", 10.0);\n+        d.addChoice(\"33.3\", 33.3);\n+        d.addChoice(\"100\", 100.0);\n+        d.addChoice(\"Double.MAX_VALUE\", Double.MAX_VALUE);\n+        d.addChoice(\"Double.MIN_VALUE\", Double.MIN_VALUE);\n+        d.addChoice(\"Double.POSITIVE_INFINITY\", Double.POSITIVE_INFINITY);\n+        d.addChoice(\"NaN\", Double.NaN);\n+        d.addChoice(\"<default: \" + defaultValue + \">\", defaultValue);\n+        d.selectInitialValue();\n+        return d;\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/Options.java","additions":50,"deletions":18,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.sheets;\n+\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.Hyperlink;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.RadioButton;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.ToggleButton;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.OptionWindow;\n+\n+\/**\n+ * Properties... menu.\n+ *\/\n+public class PropertiesMenu {\n+    public static void openPropertiesDialog(Object parent, Node n) {\n+        String name;\n+        OptionPane op = new OptionPane();\n+        if(n instanceof Button t) {\n+            name = \"Button\";\n+            ButtonsPropertySheet.appendTo(op, t);\n+        } else if(n instanceof CheckBox t) {\n+            name = \"CheckBox\";\n+            ButtonsPropertySheet.appendTo(op, t);\n+        } else if(n instanceof Hyperlink t) {\n+            name = \"Hyperlink\";\n+            ButtonsPropertySheet.appendTo(op, t);\n+        } else if (n instanceof Label t) {\n+            name = \"Label\";\n+            LabeledPropertySheet.appendTo(op, \"Label\", false, t);\n+        } else if(n instanceof RadioButton t) {\n+            name = \"RadioButton\";\n+            ButtonsPropertySheet.appendTo(op, t, null);\n+        } else if(n instanceof TextArea t) {\n+            name = \"TextArea\";\n+            TextAreaPropertySheet.appendTo(op, t);\n+        } else if(n instanceof TextField t) {\n+            name = \"TextField\";\n+            TextFieldPropertySheet.appendTo(op, t, null);\n+        } else if(n instanceof ToggleButton t) {\n+            name = \"ToggleButton\";\n+            ButtonsPropertySheet.appendTo(op, t, null);\n+        } else {\n+            \/\/ TODO other types\n+            System.err.println(\"property sheet not yet created for:\" + n);\n+            return;\n+        }\n+\n+        OptionWindow.open(parent, \"Properties: \" + name, 500, 800, op);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/PropertiesMenu.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,270 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.sheets;\n+\n+import java.beans.BeanInfo;\n+import java.beans.IntrospectionException;\n+import java.beans.Introspector;\n+import java.beans.PropertyDescriptor;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import javafx.beans.Observable;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.value.ObservableValue;\n+import javafx.collections.ObservableList;\n+import javafx.collections.ObservableSet;\n+import javafx.event.EventDispatcher;\n+import javafx.event.EventHandler;\n+import javafx.scene.Node;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableCell;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTableView;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.paint.Color;\n+import com.oracle.tools.fx.monkey.util.OptionWindow;\n+import com.oracle.tools.fx.monkey.util.Utils;\n+\n+\/**\n+ * Monitors Public Properties\n+ *\/\n+public class PropertiesMonitor extends BorderPane {\n+    private final TreeTableView<Entry> table;\n+\n+    public PropertiesMonitor(Node owner) {\n+        table = new TreeTableView<>();\n+        table.setColumnResizePolicy(TreeTableView.CONSTRAINED_RESIZE_POLICY_FLEX_NEXT_COLUMN);\n+        {\n+            TreeTableColumn<Entry, String> c = new TreeTableColumn<>(\"Name\");\n+            c.setCellFactory((tc) -> createCell());\n+            c.setCellValueFactory((f) -> new SimpleStringProperty(f.getValue().getValue().getName()));\n+            c.setPrefWidth(120);\n+            table.getColumns().add(c);\n+        }\n+        {\n+            TreeTableColumn<Entry, String> c = new TreeTableColumn<>(\"Type\");\n+            c.setCellFactory((tc) -> createCell());\n+            c.setCellValueFactory((f) -> new SimpleStringProperty(f.getValue().getValue().getType()));\n+            c.setPrefWidth(100);\n+            table.getColumns().add(c);\n+        }\n+        {\n+            TreeTableColumn<Entry, Object> c = new TreeTableColumn<>(\"Value\");\n+            c.setCellFactory((tc) -> createCell());\n+            c.setCellValueFactory((f) -> f.getValue().getValue().getValue());\n+            c.setPrefWidth(300);\n+            table.getColumns().add(c);\n+        }\n+        table.setShowRoot(false);\n+        table.setRoot(collectProperties(owner));\n+        setCenter(table);\n+    }\n+\n+    public static void open(Node node) {\n+        if (node != null) {\n+            String name = node.getClass().getSimpleName();\n+            PropertiesMonitor p = new PropertiesMonitor(node);\n+            OptionWindow.open(node, \"Properties: \" + name, 800, 900, p);\n+        }\n+    }\n+\n+    private TreeTableCell createCell() {\n+        return new TreeTableCell<Object, Object>() {\n+            @Override\n+            protected void updateItem(Object item, boolean empty) {\n+                super.updateItem(item, empty);\n+\n+                if (item == null) {\n+                    super.setText(null);\n+                    super.setGraphic(null);\n+                } else if (item instanceof Node) {\n+                    super.setText(null);\n+                    super.setGraphic((Node)item);\n+                } else {\n+                    super.setText(item.toString());\n+                    super.setGraphic(null);\n+                }\n+                Object x = getTableRow().getItem();\n+                if (x instanceof Entry en) {\n+                    boolean hdr = en.isHeader();\n+                    setBackground(hdr ? Background.fill(Color.rgb(0, 0, 0, 0.1)) : null);\n+                    setStyle(hdr ? \"-fx-font-weight:bold;\" : \"-fx-font-weight:normal;\");\n+                }\n+            }\n+        };\n+    }\n+\n+    private static TreeItem<Entry> collectProperties(Node n) {\n+        TreeItem<Entry> root = new TreeItem<>(null);\n+        root.setExpanded(true);\n+        boolean expand = true;\n+        while (n != null) {\n+            collectProperties(root, n, expand);\n+            n = n.getParent();\n+            expand = false;\n+        }\n+        return root;\n+    }\n+\n+    private static void collectProperties(TreeItem<Entry> root, Node n, boolean expand) {\n+        ArrayList<Entry> a = new ArrayList<>();\n+        try {\n+            BeanInfo inf = Introspector.getBeanInfo(n.getClass());\n+            PropertyDescriptor[] ps = inf.getPropertyDescriptors();\n+            for (PropertyDescriptor p: ps) {\n+                Entry en = createEntry(n, p);\n+                if (en != null) {\n+                    a.add(en);\n+                }\n+            }\n+\n+            a.add(new Entry(\"styleClass\", \"ObservableList\", n.getStyleClass()));\n+            a.add(new Entry(\"pseudoClassStates\", \"ObservableSet\", n.getPseudoClassStates()));\n+\n+            Collections.sort(a, new Comparator<Entry>() {\n+                @Override\n+                public int compare(Entry a, Entry b) {\n+                    return a.getName().compareTo(b.getName());\n+                }\n+            });\n+        } catch (IntrospectionException e) {\n+            e.printStackTrace();\n+        }\n+\n+        String type = n.getClass().getSimpleName();\n+        if (Utils.isBlank(type)) {\n+            type = n.getClass().getName();\n+            int ix = type.lastIndexOf('.');\n+            if (ix >= 0) {\n+                type = type.substring(ix + 1);\n+            }\n+        }\n+        TreeItem<Entry> ti = new TreeItem<>(new Entry(type, null, null));\n+        ti.setExpanded(expand);\n+        root.getChildren().add(ti);\n+\n+        for (Entry en: a) {\n+            ti.getChildren().add(new TreeItem<>(en));\n+        }\n+    }\n+\n+    private static Entry createEntry(Node n, PropertyDescriptor pd) {\n+        Class<?> t = pd.getPropertyType();\n+        if (t == null) {\n+            return null;\n+        }\n+        if (t.isAssignableFrom(EventHandler.class)) {\n+            return null;\n+        }\n+        if (t.isAssignableFrom(EventDispatcher.class)) {\n+            return null;\n+        }\n+        String name = pd.getName();\n+        String pname = name + \"Property\";\n+        try {\n+            Method m = n.getClass().getMethod(pname);\n+            if (m != null) {\n+                Object v = m.invoke(n);\n+                if (v instanceof ObservableValue val) {\n+                    Class<?> tp = pd.getPropertyType();\n+                    String type = tp == null ? \"<null>\" : tp.getSimpleName();\n+                    return new Entry(pd.getName(), type, val);\n+                }\n+            }\n+        } catch (Throwable e) {\n+            \/\/ ignore\n+        }\n+        return null;\n+    }\n+\n+    static class Entry {\n+        private final String name;\n+        private final String type;\n+        private final Observable prop;\n+        private SimpleObjectProperty<Object> value;\n+\n+        public Entry(String name, String type, Observable p) {\n+            this.name = name;\n+            this.type = type;\n+            this.prop = p;\n+        }\n+\n+        public boolean isHeader() {\n+            return type == null;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public SimpleObjectProperty<Object> getValue() {\n+            if (value == null) {\n+                value = new SimpleObjectProperty<>();\n+\n+                if (prop != null) {\n+                    if (prop instanceof ObservableValue p) {\n+                        p.addListener((src, prev, c) -> {\n+                            setValue(c);\n+                        });\n+                        Object y = p.getValue();\n+                        setValue(p.getValue());\n+                    } else if (prop instanceof ObservableList p) {\n+                        p.addListener((Observable x) -> {\n+                            setValue(p.toString());\n+                        });\n+                        setValue(p.toString());\n+                    } else if (prop instanceof ObservableSet p) {\n+                        p.addListener((Observable x) -> {\n+                            setValue(p.toString());\n+                        });\n+                        setValue(p.toString());\n+                    }\n+                }\n+            }\n+            return value;\n+        }\n+\n+        private void setValue(Object x) {\n+            if (x instanceof Node) {\n+                \/\/ do not set nodes!\n+                x = x.getClass().getSimpleName();\n+            }\n+            value.set(x);\n+        }\n+\n+        public String getType() {\n+            return type;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return getName();\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/PropertiesMonitor.java","additions":270,"deletions":0,"binary":false,"changes":270,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.sheets;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import javafx.css.CssMetaData;\n+import javafx.css.Styleable;\n+import javafx.scene.Node;\n+import javafx.scene.control.Label;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+\n+\/**\n+ * Styleable Property Sheet.\n+ *\/\n+public class StyleablePropertySheet {\n+    public static void appendTo(OptionPane op, Styleable n) {\n+        op.section(\"Styleable\");\n+\n+        ArrayList<CssMetaData<? extends Styleable, ?>> ss = new ArrayList<>(n.getCssMetaData());\n+        Collections.sort(ss, new Comparator<CssMetaData>() {\n+            @Override\n+            public int compare(CssMetaData a, CssMetaData b) {\n+                return a.getProperty().compareTo(b.getProperty());\n+            }\n+        });\n+\n+        for (CssMetaData md : ss) {\n+            \/\/ TODO\n+            \/\/ Node ed = createOption(n, md);\n+            \/\/ op.option(md.getProperty(), ed);\n+            String val = md.getProperty(); \/\/ + \": \" + md.getStyleableProperty(n).getValue();\n+            op.option(val, null);\n+        }\n+    }\n+\n+    private static Node createOption(Styleable s, CssMetaData md) {\n+        \/\/ TODO move up\n+\/\/        if (!md.isSettable(s))\n+\/\/        {\n+\/\/            return null;\n+\/\/        }\n+        return new Label(String.valueOf(md.getStyleableProperty(s).getValue()));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/StyleablePropertySheet.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -27,1 +27,0 @@\n-import javafx.beans.property.ObjectProperty;\n@@ -29,0 +28,7 @@\n+import javafx.scene.control.TableColumnBase;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.layout.BorderPane;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.GraphicOption;\n+import com.oracle.tools.fx.monkey.options.TextOption;\n@@ -30,0 +36,1 @@\n+import com.oracle.tools.fx.monkey.util.OptionWindow;\n@@ -34,16 +41,9 @@\n-\/\/ TODO this is not used\n-public class TableColumnPropertySheet {\n-\/\/    public TableColumnOptions(String name, ObjectProperty<TableColumn> p) {\n-\/\/        super(name, (v) -> {\n-\/\/            var col = p.get();\n-\/\/            if(col != null) {\n-\/\/                col.set\n-\/\/            }\n-\/\/            updateValue(v);\n-\/\/        });\n-\/\/        disableProperty().bind(Bindings.createBooleanBinding(() -> {\n-\/\/            return p.get() == null;\n-\/\/        }, p));\n-\/\/\n-\/\/        this.currentColumn = p;\n-\/\/    }\n+public class TableColumnPropertySheet extends BorderPane {\n+    protected TableColumnPropertySheet(TableColumnBase<?,?> c) {\n+        OptionPane op = new OptionPane();\n+        if(c instanceof TableColumn tc) {\n+            tableColumnOptions(op, tc);\n+        } else if(c instanceof TreeTableColumn tc) {\n+            treeTableColumnOptions(op, tc);\n+        }\n+        tableColumnBaseOptions(op, c);\n@@ -51,2 +51,18 @@\n-    public static void appendTo(OptionPane op, ObjectProperty<TableColumn> currentColumn) {\n-        op.section(\"Current Column\");\n+        StyleablePropertySheet.appendTo(op, c);\n+        setCenter(op);\n+    }\n+\n+    public static void open(Object parent, TableColumnBase<?, ?> c) {\n+        String name = c.getText();\n+        if (name == null) {\n+            name = \"<null>\";\n+        } else {\n+            name = \" [\" + name + \"]\";\n+        }\n+\n+        TableColumnPropertySheet p = new TableColumnPropertySheet(c);\n+        OptionWindow.open(parent, \"Table Column Properties\" + name, 500, 800, p);\n+    }\n+\n+    private void tableColumnOptions(OptionPane op, TableColumn<?, ?> c) {\n+        op.section(\"TableColumn\");\n@@ -55,0 +71,12 @@\n+        op.option(\"Sort Type:\", new EnumOption(null, TableColumn.SortType.class, c.sortTypeProperty()));\n+    }\n+\n+    private void treeTableColumnOptions(OptionPane op, TreeTableColumn<?, ?> c) {\n+        op.section(\"TreeTableColumn\");\n+        op.option(\"Cell Factory: TODO\", null); \/\/ TODO\n+        op.option(\"Cell Value Factory: TODO\", null); \/\/ TODO\n+        op.option(\"Sort Type:\", new EnumOption(null, TreeTableColumn.SortType.class, c.sortTypeProperty()));\n+    }\n+\n+    private void tableColumnBaseOptions(OptionPane op, TableColumnBase<?, ?> c) {\n+        op.section(\"TableColumnBase\");\n@@ -57,10 +85,9 @@\n-        \/\/op.option(new BooleanOption(\"editable\", \"editable\", null)); \/\/ FIX how to set properties dynamically? Optional?\n-        op.option(\"Graphic: TODO\", null); \/\/ TODO\n-        op.option(\"Id: TODO\", null); \/\/ TODO\n-        op.option(\"Max Width: TODO\", null); \/\/ TODO\n-        op.option(\"Min Width: TODO\", null); \/\/ TODO\n-        op.option(\"Pref Width: TODO\", null); \/\/ TODO\n-        op.option(\"reorderable: TODO\", null); \/\/ TODO\n-        op.option(\"resizeable: TODO\", null); \/\/ TODO\n-        op.option(\"Sort Type: TODO\", null); \/\/ TODO\n-        op.option(\"sortable: TODO\", null); \/\/ TODO\n+        op.option(new BooleanOption(null, \"editable\", c.editableProperty()));\n+        op.option(\"Graphic:\", new GraphicOption(\"graphic\", c.graphicProperty()));\n+        op.option(\"Id:\", new TextOption(\"id\", c.idProperty()));\n+        op.option(\"Max Width:\", Options.forColumnWidth(\"maxWidth\", 5000.0, c.maxWidthProperty()));\n+        op.option(\"Min Width:\", Options.forColumnWidth(\"minWidth\", 10.0, c.minWidthProperty()));\n+        op.option(\"Pref Width:\", Options.forColumnWidth(\"prefWidth\", 80.0, c.prefWidthProperty()));\n+        op.option(new BooleanOption(null, \"reorderable\", c.reorderableProperty()));\n+        op.option(new BooleanOption(null, \"resizeable\", c.resizableProperty()));\n+        op.option(new BooleanOption(null, \"sortable\", c.sortableProperty()));\n@@ -68,2 +95,2 @@\n-        op.option(\"Style: TODO\", null); \/\/ TODO\n-        op.option(\"Text: TODO\", null); \/\/ TODO\n+        op.option(\"Style:\", new TextOption(\"style\", c.styleProperty()));\n+        op.option(\"Text:\", new TextOption(\"text\", c.textProperty()));\n@@ -71,2 +98,1 @@\n-        op.option(\"visible: TODO\", null); \/\/ TODO\n-        op.option(\": TODO\", null); \/\/ TODO\n+        op.option(new BooleanOption(null, \"visible\", c.visibleProperty()));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/TableColumnPropertySheet.java","additions":59,"deletions":33,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.sheets;\n+\n+import javafx.scene.control.TextArea;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.IntOption;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+\n+\/**\n+ * TextArea property sheet.\n+ *\/\n+public class TextAreaPropertySheet {\n+    public static void appendTo(OptionPane op, TextArea control) {\n+        op.section(\"TextArea\");\n+        op.option(\"Preferred Column Count:\", new IntOption(\"prefColumnCount\", -1, Integer.MAX_VALUE, control.prefColumnCountProperty()));\n+        op.option(\"Preferred Row Count:\", new IntOption(\"prefRowCount\", -1, Integer.MAX_VALUE, control.prefRowCountProperty()));\n+        op.option(\"Scroll Left: TODO\", null); \/\/ TODO\n+        op.option(\"Scroll Top: TODO\", null); \/\/ TODO\n+        op.option(new BooleanOption(\"wrapText\", \"wrap text\", control.wrapTextProperty()));\n+\n+        TextInputControlPropertySheet.appendTo(op, true, control);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/TextAreaPropertySheet.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.sheets;\n+\n+import java.util.function.Consumer;\n+import javafx.geometry.Pos;\n+import javafx.scene.control.TextField;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.IntOption;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+\n+\/**\n+ * TextField property sheet.\n+ *\/\n+public class TextFieldPropertySheet {\n+    public static void appendTo(OptionPane op, TextField control, Runnable r) {\n+        op.section(\"TextField\");\n+        op.option(\"Alignment:\", new EnumOption<>(\"alignment\", false, Pos.class, control.alignmentProperty()));\n+        op.option(\"Preferred Column Count:\", new IntOption(\"prefColumnCount\", -1, Integer.MAX_VALUE, control.prefColumnCountProperty()));\n+        if (r != null) {\n+            r.run();\n+        }\n+\n+        TextInputControlPropertySheet.appendTo(op, false, control);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/TextFieldPropertySheet.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.sheets;\n+\n+import java.util.List;\n+import javafx.scene.Node;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.Menu;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.MenuButton;\n+import javafx.scene.control.MenuItem;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.Utils;\n+\n+\/**\n+ * Populates ContextMenu based on the type of the item under cursor.\n+ *\/\n+public class TypeSpecificContextMenu {\n+    public static void populate(ContextMenu m, Node source) {\n+        Menu menu = findMenu(source);\n+        if(menu != null) {\n+            FX.item(m, \"Set Menu Invisible\", () -> menu.setVisible(false));\n+        }\n+        System.out.println(source);\n+    }\n+\n+    \/\/ MenuBarButton is not accessible, so we can't get an instance of Menu directly.\n+    \/\/ Let's find the menu and use its text and items to determine which one we are looking at.\n+    private static Menu findMenu(Node n) {\n+        MenuButton mb = FX.getAncestorOfClass(MenuButton.class, n);\n+        if (mb != null) {\n+            MenuBar bar = FX.getAncestorOfClass(MenuBar.class, mb);\n+            if (bar != null) {\n+                String text = mb.getText();\n+                List<MenuItem> items = mb.getItems();\n+                for (Menu m: bar.getMenus()) {\n+                    if (Utils.eq(text, m.getText()) && Utils.eq(items, m.getItems())) {\n+                        return m;\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/TypeSpecificContextMenu.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -28,1 +28,0 @@\n-import javafx.scene.control.Button;\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/XYChartPropertySheet.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.oracle.tools.fx.monkey.tools;\n+\n+import javafx.geometry.Point2D;\n+import javafx.geometry.Point3D;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.Node;\n+import javafx.scene.input.PickResult;\n+import com.oracle.tools.fx.monkey.util.Utils;\n+\n+public class AccessibilityPropertyViewer {\n+    private final PickResult pick;\n+    private Node node;\n+    private StringBuilder sb;\n+\n+    public AccessibilityPropertyViewer(PickResult pick) {\n+        this.pick = pick;\n+    }\n+\n+    public static void open(PickResult pick) {\n+        Node parent = pick.getIntersectedNode();\n+        String text = new AccessibilityPropertyViewer(pick).generate();\n+        Utils.showTextDialog(parent, \"Accessibility\", \"Accessibility Properties\", text);\n+    }\n+\n+    public String generate() {\n+        node = pick.getIntersectedNode();\n+        Point3D p3 = pick.getIntersectedPoint();\n+        Point2D point = node.localToScreen(p3);\n+\n+        Integer offset = parseInteger(node.queryAccessibleAttribute(AccessibleAttribute.OFFSET_AT_POINT, point));\n+        Integer line = offset == null ? null : parseInteger(node.queryAccessibleAttribute(AccessibleAttribute.LINE_FOR_OFFSET, offset));\n+\n+        sb = new StringBuilder();\n+\n+        sb.append(\"*** Node: \").append(node.getClass().getSimpleName()).append(\"\\n\");\n+\n+        if (offset != null) {\n+            query(AccessibleAttribute.LINE_FOR_OFFSET, offset);\n+        }\n+        if (line != null) {\n+            query(AccessibleAttribute.LINE_START, line);\n+            query(AccessibleAttribute.LINE_END, line);\n+        }\n+        query(AccessibleAttribute.OFFSET_AT_POINT, point);\n+\n+        return sb.toString();\n+    }\n+\n+    private void query(AccessibleAttribute a, Object... params) {\n+        Object v = node.queryAccessibleAttribute(a, params);\n+        if (v == null) {\n+            return;\n+        }\n+\n+        sb.append(a).append(\": \").append(v).append(\"\\n\");\n+    }\n+\n+    private static Integer parseInteger(Object x) {\n+        return (x instanceof Integer n) ? n : null;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/AccessibilityPropertyViewer.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -197,1 +197,1 @@\n-        return x.toString();\n+        return x == null ? null : x.toString();\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/ClipboardViewer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+            \/\/ FIX there is no easy way to add a tooltip to table column!!!\n@@ -74,1 +75,15 @@\n-            c.setCellValueFactory((d) -> new SimpleStringProperty(d.getValue().code));\n+            c.setCellValueFactory((d) -> new SimpleStringProperty(d.getValue().ucode));\n+            c.setPrefWidth(100);\n+            table.getColumns().add(c);\n+        }\n+        {\n+            TableColumn<Entry, String> c = new TableColumn<>();\n+            c.setText(\"Type\");\n+            c.setCellValueFactory((d) -> new SimpleStringProperty(d.getValue().type));\n+            c.setPrefWidth(300);\n+            table.getColumns().add(c);\n+        }\n+        {\n+            TableColumn<Entry, String> c = new TableColumn<>();\n+            c.setText(\"CodePoint\");\n+            c.setCellValueFactory((d) -> new SimpleStringProperty(d.getValue().codePoint));\n@@ -216,1 +231,7 @@\n-            String code = String.format(\"%04X\", (int)c);\n+            int codePoint = -1;\n+            String cp = null;\n+            if (Character.isHighSurrogate(c)) {\n+                codePoint = text.codePointAt(i);\n+                cp = Character.toString(codePoint);\n+            }\n+            String ucode = String.format(\"%04X\", (int)c);\n@@ -218,1 +239,5 @@\n-            Entry en = new Entry(i, String.valueOf(c), code, desc);\n+            if (cp != null) {\n+                desc = String.format(\"%s (U+%06X %s)\", desc, codePoint, Character.getName(codePoint));\n+            }\n+            String type = getType(c);\n+            Entry en = new Entry(i, String.valueOf(c), ucode, desc, cp, type);\n@@ -224,0 +249,68 @@\n+    private String getType(char c) {\n+        int t = Character.getType(c);\n+        switch (t) {\n+        case Character.COMBINING_SPACING_MARK:\n+            return \"COMBINING_SPACING_MARK\";\n+        case Character.CONNECTOR_PUNCTUATION:\n+            return \"CONNECTOR_PUNCTUATION\";\n+        case Character.CONTROL:\n+            return \"CONTROL\";\n+        case Character.CURRENCY_SYMBOL:\n+            return \"CURRENCY_SYMBOL\";\n+        case Character.DASH_PUNCTUATION:\n+            return \"DASH_PUNCTUATION\";\n+        case Character.DECIMAL_DIGIT_NUMBER:\n+            return \"DECIMAL_DIGIT_NUMBER\";\n+        case Character.ENCLOSING_MARK:\n+            return \"ENCLOSING_MARK\";\n+        case Character.END_PUNCTUATION:\n+            return \"END_PUNCTUATION\";\n+        case Character.FINAL_QUOTE_PUNCTUATION:\n+            return \"FINAL_QUOTE_PUNCTUATION\";\n+        case Character.FORMAT:\n+            return \"FORMAT\";\n+        case Character.INITIAL_QUOTE_PUNCTUATION:\n+            return \"INITIAL_QUOTE_PUNCTUATION\";\n+        case Character.LETTER_NUMBER:\n+            return \"LETTER_NUMBER\";\n+        case Character.LINE_SEPARATOR:\n+            return \"LINE_SEPARATOR\";\n+        case Character.LOWERCASE_LETTER:\n+            return \"LOWERCASE_LETTER\";\n+        case Character.MATH_SYMBOL:\n+            return \"MATH_SYMBOL\";\n+        case Character.MODIFIER_LETTER:\n+            return \"MODIFIER_LETTER\";\n+        case Character.MODIFIER_SYMBOL:\n+            return \"MODIFIER_SYMBOL\";\n+        case Character.NON_SPACING_MARK:\n+            return \"NON_SPACING_MARK\";\n+        case Character.OTHER_LETTER:\n+            return \"OTHER_LETTER\";\n+        case Character.OTHER_NUMBER:\n+            return \"OTHER_NUMBER\";\n+        case Character.OTHER_PUNCTUATION:\n+            return \"OTHER_PUNCTUATION\";\n+        case Character.OTHER_SYMBOL:\n+            return \"OTHER_SYMBOL\";\n+        case Character.PARAGRAPH_SEPARATOR:\n+            return \"PARAGRAPH_SEPARATOR\";\n+        case Character.PRIVATE_USE:\n+            return \"PRIVATE_USE\";\n+        case Character.SPACE_SEPARATOR:\n+            return \"SPACE_SEPARATOR\";\n+        case Character.START_PUNCTUATION:\n+            return \"START_PUNCTUATION\";\n+        case Character.SURROGATE:\n+            return \"SURROGATE\";\n+        case Character.TITLECASE_LETTER:\n+            return \"TITLECASE_LETTER\";\n+        case Character.UNASSIGNED:\n+            return \"UNASSIGNED\";\n+        case Character.UPPERCASE_LETTER:\n+            return \"UPPERCASE_LETTER\";\n+        default:\n+            return String.valueOf(t);\n+        }\n+    }\n+\n@@ -227,1 +320,1 @@\n-        public final String code;\n+        public final String ucode;\n@@ -229,0 +322,2 @@\n+        public final String codePoint;\n+        public final String type;\n@@ -230,1 +325,1 @@\n-        public Entry(int index, String character, String code, String description) {\n+        public Entry(int index, String character, String ucode, String description, String codePoint, String type) {\n@@ -233,1 +328,1 @@\n-            this.code = code;\n+            this.ucode = ucode;\n@@ -235,0 +330,2 @@\n+            this.codePoint = codePoint;\n+            this.type = type;\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/Native2AsciiPane.java","additions":103,"deletions":6,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+\/**\n+ * Equivalent of Consumer<Boolean> but with primitive value.\n+ *\/\n+@FunctionalInterface\n+public interface BooleanConsumer {\n+    \/**\n+     * Performs this operation on the given argument.\n+     *\n+     * @param value the input argument\n+     *\/\n+    public void consume(boolean value);\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/BooleanConsumer.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -30,2 +30,0 @@\n-import javafx.event.ActionEvent;\n-import javafx.event.EventHandler;\n@@ -37,0 +35,1 @@\n+import javafx.scene.control.Label;\n@@ -46,0 +45,1 @@\n+    private final BorderPane content;\n@@ -63,3 +63,3 @@\n-        BorderPane p = new BorderPane(textField);\n-        p.setBottom(bp);\n-        setScene(new Scene(p));\n+        content = new BorderPane(textField);\n+        content.setBottom(bp);\n+        setScene(new Scene(content));\n@@ -89,0 +89,6 @@\n+\n+    public void setInstructions(String text) {\n+        Label t = new Label(text);\n+        t.setPadding(new Insets(2, 10, 2, 10));\n+        content.setTop(t);\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/EnterTextDialog.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.function.Function;\n@@ -30,0 +31,1 @@\n+import javafx.beans.property.BooleanProperty;\n@@ -34,0 +36,1 @@\n+import javafx.scene.control.CheckMenuItem;\n@@ -46,0 +49,1 @@\n+import javafx.scene.input.PickResult;\n@@ -47,0 +51,1 @@\n+import javafx.scene.paint.Color;\n@@ -69,4 +74,6 @@\n-    public static final MenuItem menuItem(String text, Runnable r) {\n-        MenuItem m = new MenuItem(text);\n-        if (r != null) {\n-            m.setOnAction((ev) -> r.run());\n+    public static final MenuItem menuItem(String text, Runnable action) {\n+        MenuItem mi = new MenuItem(text);\n+        if (action == null) {\n+            mi.setDisable(true);\n+        } else {\n+            mi.setOnAction((ev) -> action.run());\n@@ -74,1 +81,1 @@\n-        return m;\n+        return mi;\n@@ -80,1 +87,12 @@\n-        mi.setOnAction((ev) -> action.run());\n+        if (action == null) {\n+            mi.setDisable(true);\n+        } else {\n+            mi.setOnAction((ev) -> action.run());\n+        }\n+        lastMenu(b).getItems().add(mi);\n+        return mi;\n+    }\n+\n+    public static CheckMenuItem checkItem(MenuBar b, String name, BooleanProperty prop) {\n+        CheckMenuItem mi = new CheckMenuItem(name);\n+        mi.selectedProperty().bindBidirectional(prop);\n@@ -135,1 +153,3 @@\n-        if (action != null) {\n+        if (action == null) {\n+            mi.setDisable(true);\n+        } else {\n@@ -163,2 +183,2 @@\n-    public static Window getParentWindow(Object nodeOrWindow) {\n-        if (nodeOrWindow == null) {\n+    public static Window getParentWindow(Object x) {\n+        if (x == null) {\n@@ -166,1 +186,1 @@\n-        } else if (nodeOrWindow instanceof Window w) {\n+        } else if (x instanceof Window w) {\n@@ -168,1 +188,1 @@\n-        } else if (nodeOrWindow instanceof Node n) {\n+        } else if (x instanceof Node n) {\n@@ -174,0 +194,3 @@\n+        } else if (x instanceof MenuItem m) {\n+            ContextMenu cm = m.getParentPopup();\n+            return cm == null ? null : cm.getOwnerWindow();\n@@ -175,1 +198,1 @@\n-            throw new Error(\"Node or Window only\");\n+            throw new Error(\"Node, Window, or MenuItem only: \" + x);\n@@ -242,0 +265,8 @@\n+        setPopupMenuLocal(owner, generator);\n+    }\n+\n+    public static void setPopupMenu(Node owner, Function<PickResult,ContextMenu> generator) {\n+        setPopupMenuLocal(owner, generator);\n+    }\n+\n+    private static void setPopupMenuLocal(Node owner, Object generator) {\n@@ -248,1 +279,10 @@\n-                ContextMenu m = generator.get();\n+                ContextMenu m;\n+                if (generator instanceof Supplier sup) {\n+                    m = (ContextMenu)sup.get();\n+                } else if (generator instanceof Function func) {\n+                    PickResult pick = ev.getPickResult();\n+                    m = (ContextMenu)func.apply(pick);\n+                } else {\n+                    m = null;\n+                }\n+\n@@ -269,0 +309,1 @@\n+                ev.consume();\n@@ -270,1 +311,0 @@\n-            ev.consume();\n@@ -295,0 +335,82 @@\n+\n+    public static void style(Node n, String style) {\n+        n.getStyleClass().add(style);\n+    }\n+\n+    public static void style(Node n, String style, boolean on) {\n+        if (on) {\n+            n.getStyleClass().add(style);\n+        } else {\n+            n.getStyleClass().remove(style);\n+        }\n+    }\n+\n+    \/\/ borrowed from\n+    \/\/ https:\/\/github.com\/andy-goryachev\/AppFramework\/blob\/1e9f2197ce510a77ec5f719a2cb7112b0b6cf7be\/src\/goryachev\/fx\/FX.java#L1081\n+    \/\/ with the author's permission\n+    \/** returns a parent of the specified type, or null.  if node is an instance of the specified class, returns node *\/\n+    public static <T> T getAncestorOfClass(Class<T> c, Node node) {\n+        if (Window.class.isAssignableFrom(c)) {\n+            Scene sc = node.getScene();\n+            if (sc != null) {\n+                Window w = sc.getWindow();\n+                while (w != null) {\n+                    if (w.getClass().isAssignableFrom(c)) {\n+                        return (T)w;\n+                    }\n+\n+                    \/\/ the window can be a dialog, check the owner\n+                    if (w instanceof Stage stage) {\n+                        w = stage.getOwner();\n+                    }\n+                }\n+            }\n+            return null;\n+        } else {\n+            while (node != null) {\n+                if (c.isInstance(node)) {\n+                    return (T)node;\n+                }\n+\n+                node = node.getParent();\n+            }\n+        }\n+        return null;\n+    }\n+\n+    \/**\n+     * Creates a new color with the same RGB values and the specified alpha (opacity).\n+     *\n+     * @param c the color to borrow RGB values from\n+     * @param alpha the opacity\n+     * @return the new color instance\n+     *\/\n+    public static Color alpha(Color c, double alpha) {\n+        return new Color(c.getRed(), c.getGreen(), c.getBlue(), alpha);\n+    }\n+\n+    public static Menu menu(Menu menu, String text) {\n+        Menu m = new Menu(text);\n+        applyMnemonic(m);\n+        menu.getItems().add(m);\n+        return m;\n+    }\n+\n+    public static MenuItem item(Menu m, String text) {\n+        MenuItem mi = new MenuItem(text);\n+        applyMnemonic(mi);\n+        m.getItems().add(mi);\n+        return mi;\n+    }\n+\n+    public static MenuItem item(Menu m, String text, Runnable action) {\n+        MenuItem mi = new MenuItem(text);\n+        applyMnemonic(mi);\n+        if (action == null) {\n+            mi.setDisable(true);\n+        } else {\n+            mi.setOnAction((ev) -> action.run());\n+        }\n+        m.getItems().add(mi);\n+        return mi;\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/FX.java","additions":136,"deletions":14,"binary":false,"changes":150,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-import javafx.scene.image.PixelWriter;\n-import javafx.scene.image.WritableImage;\n@@ -41,2 +39,2 @@\n-    public static ImageView createImageView(Color c, int w, int h) {\n-        Image im = createImage(c, w, h);\n+    public static ImageView createImageView(int w, int h) {\n+        Image im = createImage(w, h);\n@@ -46,3 +44,5 @@\n-    public static Image createImage(Color c, int w, int h) {\n-        WritableImage im = new WritableImage(w, h);\n-        PixelWriter wr = im.getPixelWriter();\n+    public static Image createImage(int w, int h) {\n+        Canvas c = new Canvas(w, h);\n+        GraphicsContext g = c.getGraphicsContext2D();\n+        g.setFill(Color.gray(0.97));\n+        g.fillRect(0, 0, w, h);\n@@ -50,4 +50,7 @@\n-        for (int y = 0; y < h; y++) {\n-            for (int x = 0; x < w; x++) {\n-                wr.setColor(x, y, c);\n-            }\n+        g.setStroke(Color.gray(0.9));\n+        g.setLineWidth(1.0);\n+        for (double y = 0.5; y < h; y += 10) {\n+            g.strokeLine(0, y, w, y);\n+        }\n+        for (double x = 0.5; x < w; x += 10) {\n+            g.strokeLine(x, 0, x, h);\n@@ -56,1 +59,12 @@\n-        return im;\n+        g.setStroke(Color.gray(0.7));\n+        for (double y = 0.5; y < h; y += 100) {\n+            g.strokeLine(0, y, w, y);\n+        }\n+        for (double x = 0.5; x < w; x += 100) {\n+            g.strokeLine(x, 0, x, h);\n+        }\n+\n+        g.setStroke(Color.RED);\n+        g.strokeRect(0, 0, w, h);\n+\n+        return c.snapshot(null, null);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/ImageTools.java","additions":26,"deletions":12,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.stream.Collectors;\n@@ -31,1 +32,0 @@\n-import javafx.scene.control.Accordion;\n@@ -36,0 +36,1 @@\n+import javafx.scene.layout.VBox;\n@@ -40,1 +41,1 @@\n-public class OptionPane extends Accordion {\n+public class OptionPane extends VBox {\n@@ -44,0 +45,1 @@\n+        FX.style(this, \"option-pane\");\n@@ -73,0 +75,8 @@\n+    private List<TitledPane> getPanes() {\n+        return getChildren().\n+            stream().\n+            filter((n) -> n instanceof TitledPane).\n+            map((n) -> (TitledPane)n).\n+            collect(Collectors.toList());\n+    }\n+\n@@ -75,6 +85,1 @@\n-        getPanes().add(t);\n-\n-        List<TitledPane> panes = getPanes();\n-        if (panes.size() == 1) {\n-            setExpandedPane(panes.get(0));\n-        }\n+        getChildren().add(t);\n@@ -88,0 +93,1 @@\n+        panes = getPanes();\n@@ -100,0 +106,1 @@\n+            setMaxWidth(Double.MAX_VALUE);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/OptionPane.java","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyEvent;\n+import javafx.stage.Stage;\n+\n+\/**\n+ * Property Sheet Window.\n+ *\/\n+public class OptionWindow extends Stage {\n+    public OptionWindow(Object parent, String title, double width, double height, Node content) {\n+        ScrollPane sp = new ScrollPane(content);\n+        sp.setFitToHeight(true);\n+        sp.setFitToWidth(true);\n+\n+        initOwner(FX.getParentWindow(parent));\n+        setScene(new Scene(sp));\n+        setTitle(title);\n+        addEventHandler(KeyEvent.KEY_RELEASED, this::handleKey);\n+        setWidth(width);\n+        setHeight(height);\n+    }\n+\n+    public static OptionWindow open(Object parent, String title, double width, double height, Node content) {\n+        OptionWindow w = new OptionWindow(parent, title, width, height, content);\n+        w.show();\n+        return w;\n+    }\n+\n+    private void handleKey(KeyEvent ev) {\n+        if (ev.getCode() == KeyCode.ESCAPE) {\n+            hide();\n+            ev.consume();\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/OptionWindow.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -42,0 +42,1 @@\n+import com.oracle.tools.fx.monkey.AppSettings;\n@@ -51,0 +52,1 @@\n+        FX.style(this, name);\n@@ -54,0 +56,1 @@\n+        FX.style(contentPane, \"test-content\");\n@@ -64,0 +67,1 @@\n+        hsplit.snapToPixelProperty().bind(AppSettings.snapSplitPanes);\n@@ -70,0 +74,1 @@\n+        vsplit.snapToPixelProperty().bind(AppSettings.snapSplitPanes);\n@@ -115,0 +120,1 @@\n+            sp.setMinViewportWidth(10);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/TestPaneBase.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+            \"Lorem Ipsum\", loremIpsum(),\n@@ -89,0 +90,15 @@\n+\n+    private static String loremIpsum() {\n+        return\n+            \"\"\"\n+            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pellentesque habitant morbi tristique senectus et netus et malesuada. Nunc eget lorem dolor sed viverra ipsum. Vulputate enim nulla aliquet porttitor lacus. Platea dictumst quisque sagittis purus sit amet volutpat consequat. Vestibulum rhoncus est pellentesque elit ullamcorper dignissim cras tincidunt. Turpis egestas pretium aenean pharetra magna. Ultricies mi quis hendrerit dolor magna eget est lorem ipsum. Vitae et leo duis ut diam quam. Tincidunt nunc pulvinar sapien et. Laoreet sit amet cursus sit amet dictum sit amet.\n+\n+            Ornare suspendisse sed nisi lacus sed viverra tellus. Hac habitasse platea dictumst quisque. Egestas quis ipsum suspendisse ultrices gravida dictum fusce ut placerat. Diam vulputate ut pharetra sit amet aliquam id diam maecenas. At volutpat diam ut venenatis tellus in metus. Imperdiet nulla malesuada pellentesque elit eget gravida cum sociis natoque. Nisl vel pretium lectus quam id leo in vitae. Turpis cursus in hac habitasse platea. Varius vel pharetra vel turpis nunc. Eu volutpat odio facilisis mauris. Dictum fusce ut placerat orci nulla pellentesque. Pulvinar neque laoreet suspendisse interdum. Congue nisi vitae suscipit tellus mauris a diam maecenas. Sapien nec sagittis aliquam malesuada bibendum arcu vitae. Amet nisl purus in mollis nunc sed id semper.\n+\n+            Pretium quam vulputate dignissim suspendisse in est ante in. Non odio euismod lacinia at quis risus. Pellentesque elit eget gravida cum. Malesuada proin libero nunc consequat interdum varius sit amet mattis. Nulla posuere sollicitudin aliquam ultrices sagittis orci a scelerisque. Ullamcorper morbi tincidunt ornare massa. Eu facilisis sed odio morbi quis commodo. Lorem ipsum dolor sit amet consectetur. Et molestie ac feugiat sed. Facilisis mauris sit amet massa vitae tortor. Consectetur adipiscing elit duis tristique sollicitudin. Tempus imperdiet nulla malesuada pellentesque elit eget gravida.\n+\n+            Diam ut venenatis tellus in metus vulputate eu scelerisque felis. Eget nunc scelerisque viverra mauris in. Ac orci phasellus egestas tellus rutrum tellus. Nulla pellentesque dignissim enim sit amet. Congue quisque egestas diam in arcu cursus euismod quis viverra. Augue interdum velit euismod in pellentesque massa placerat. Vitae tempus quam pellentesque nec nam aliquam sem. Nisl vel pretium lectus quam id leo. Facilisi etiam dignissim diam quis. Pharetra convallis posuere morbi leo urna. Nisl nunc mi ipsum faucibus vitae aliquet nec ullamcorper sit. Eleifend mi in nulla posuere sollicitudin aliquam ultrices. Donec ultrices tincidunt arcu non sodales neque sodales ut. Nisi porta lorem mollis aliquam. Vitae aliquet nec ullamcorper sit.\n+\n+            Vitae justo eget magna fermentum iaculis eu non. Sed blandit libero volutpat sed cras. Et ultrices neque ornare aenean euismod elementum nisi quis eleifend. Porta non pulvinar neque laoreet suspendisse interdum consectetur. Orci porta non pulvinar neque laoreet suspendisse interdum. Elementum pulvinar etiam non quam lacus suspendisse faucibus. Eu lobortis elementum nibh tellus molestie nunc non blandit massa. Mi proin sed libero enim sed faucibus turpis in eu. Feugiat vivamus at augue eget arcu. In pellentesque massa placerat duis ultricies lacus sed turpis tincidunt.\n+            \"\"\";\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/TextTemplates.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.util.function.Supplier;\n+import javafx.application.Platform;\n@@ -29,0 +31,4 @@\n+import javafx.scene.Parent;\n+import javafx.scene.Scene;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.layout.BorderPane;\n@@ -31,0 +37,3 @@\n+import javafx.stage.Modality;\n+import javafx.stage.Stage;\n+import javafx.stage.Window;\n@@ -56,0 +65,32 @@\n+\n+    public static boolean eq(Object a, Object b) {\n+        if (a == null) {\n+            return b == null;\n+        }\n+        return a.equals(b);\n+    }\n+\n+    public static void showDialog(Node owner, String windowName, String title, Parent content) {\n+        Window w = FX.getParentWindow(owner);\n+        Stage s = new Stage();\n+        s.initModality(Modality.WINDOW_MODAL);\n+        s.initOwner(w);\n+\n+        FX.name(s, windowName);\n+        s.setTitle(title);\n+        s.setScene(new Scene(content));\n+        s.setWidth(900);\n+        s.setHeight(500);\n+        s.show();\n+    }\n+\n+    public static void showTextDialog(Node owner, String windowName, String title, String text) {\n+        TextArea textField = new TextArea(text);\n+        textField.setEditable(false);\n+        textField.setWrapText(false);\n+\n+        BorderPane p = new BorderPane();\n+        p.setCenter(textField);\n+\n+        showDialog(owner, windowName, title, p);\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/Utils.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"modified"}]}