{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -33,1 +32,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/BooleanTypeTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import static org.junit.Assert.*;\n@@ -34,1 +33,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/CursorTypeTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -40,1 +39,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -127,5 +127,5 @@\n-    void checkColor(String msg, Color c1, Color c2) {\n-        assertEquals(msg + \".red\", c1.getRed(), c2.getRed(), 0.001);\n-        assertEquals(msg + \".blue\", c1.getBlue(), c2.getBlue(), 0.001);\n-        assertEquals(msg + \".green\", c1.getGreen(), c2.getGreen(), 0.001);\n-        assertEquals(msg + \".opacity\", c1.getOpacity(), c2.getOpacity(), 0.001);\n+    void checkColor(Color c1, Color c2, String msg) {\n+        assertEquals(c1.getRed(), c2.getRed(), 0.001, msg + \".red\");\n+        assertEquals(c1.getBlue(), c2.getBlue(), 0.001, msg + \".blue\");\n+        assertEquals(c1.getGreen(), c2.getGreen(), 0.001, msg + \".green\");\n+        assertEquals(c1.getOpacity(), c2.getOpacity(), 0.001, msg + \".opacity\");\n@@ -135,6 +135,6 @@\n-        assertEquals(msg + \"innershadow.offsetX\", o1.getOffsetX(), o2.getOffsetX(), 0.001);\n-        assertEquals(msg + \"innershadow.offsety\", o1.getOffsetY(), o2.getOffsetY(), 0.001);\n-        assertEquals(msg + \"innershadow.choke\", o1.getChoke(), o2.getChoke(), 0.001);\n-        assertEquals(msg + \"innershadow.radius\", o1.getRadius(), o2.getRadius(), 0.001);\n-        checkColor(msg + \"innershadow\", o1.getColor(), o2.getColor());\n-        assertEquals(msg + \"innershadow.blurType\", o1.getBlurType(), o2.getBlurType());\n+        assertEquals(o1.getOffsetX(), o2.getOffsetX(), 0.001, msg + \"innershadow.offsetX\");\n+        assertEquals(o1.getOffsetY(), o2.getOffsetY(), 0.001, msg + \"innershadow.offsety\");\n+        assertEquals(o1.getChoke(), o2.getChoke(), 0.001, msg + \"innershadow.choke\");\n+        assertEquals(o1.getRadius(), o2.getRadius(), 0.001, msg + \"innershadow.radius\");\n+        checkColor(o1.getColor(), o2.getColor(), msg + \"innershadow\");\n+        assertEquals(o1.getBlurType(), o2.getBlurType(), msg + \"innershadow.blurType\");\n@@ -144,6 +144,6 @@\n-        assertEquals(msg + \"DropShadow.offsetX\", o1.getOffsetX(), o2.getOffsetX(), 0.001);\n-        assertEquals(msg + \"DropShadow.offsety\", o1.getOffsetY(), o2.getOffsetY(), 0.001);\n-        assertEquals(msg + \"DropShadow.spread\", o1.getSpread(), o2.getSpread(), 0.001);\n-        assertEquals(msg + \"DropShadow.radius\", o1.getRadius(), o2.getRadius(), 0.001);\n-        checkColor(msg + \"DropShadow\", o1.getColor(), o2.getColor());\n-        assertEquals(msg + \"DropShadow.blurType\", o1.getBlurType(), o2.getBlurType());\n+        assertEquals(o1.getOffsetX(), o2.getOffsetX(), 0.001, msg + \"DropShadow.offsetX\");\n+        assertEquals(o1.getOffsetY(), o2.getOffsetY(), 0.001, msg + \"DropShadow.offsety\");\n+        assertEquals(o1.getSpread(), o2.getSpread(), 0.001, msg + \"DropShadow.spread\");\n+        assertEquals(o1.getRadius(), o2.getRadius(), 0.001, msg + \"DropShadow.radius\");\n+        checkColor(o1.getColor(), o2.getColor(), msg + \"DropShadow\");\n+        assertEquals(o1.getBlurType(), o2.getBlurType(), msg + \"DropShadow.blurType\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/EffectTypeTest.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n@@ -36,1 +34,3 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/EnumTypeTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,3 @@\n-import static org.junit.Assert.assertEquals;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/FontSizeTypeTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import static org.junit.Assert.*;\n@@ -43,4 +42,12 @@\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -73,2 +80,2 @@\n-    @BeforeClass\n-    public static void beforeClass() {\n+    @BeforeAll\n+    public static void beforeAll() {\n@@ -79,2 +86,2 @@\n-    @AfterClass\n-    public static void afterClass() {\n+    @AfterAll\n+    public static void afterAll() {\n@@ -87,1 +94,1 @@\n-    @Before\n+    @BeforeEach\n@@ -774,1 +781,1 @@\n-            assertTrue (iterations+\">\"+pseudoClasses.length, iterations <= pseudoClasses.length);\n+            assertTrue (iterations <= pseudoClasses.length, iterations+\">\"+pseudoClasses.length);\n@@ -780,1 +787,1 @@\n-        assertTrue (pseudoClasses.length+\"!=\"+iterations, pseudoClasses.length == iterations);\n+        assertTrue (pseudoClasses.length == iterations, pseudoClasses.length+\"!=\"+iterations);\n@@ -799,1 +806,1 @@\n-            assertTrue (iterations+\">\"+pseudoClasses.length, iterations <= pseudoClasses.length);\n+            assertTrue (iterations <= pseudoClasses.length, iterations+\">\"+pseudoClasses.length);\n@@ -805,1 +812,1 @@\n-        assertTrue (pseudoClasses.length+\"!=\"+iterations, pseudoClasses.length == iterations);\n+        assertTrue (pseudoClasses.length == iterations, pseudoClasses.length+\"!=\"+iterations);\n@@ -833,1 +840,1 @@\n-        assertTrue (nPseudoClasses+\"!=\"+BitSetShim.size(states), nPseudoClasses == BitSetShim.size(states));\n+        assertTrue (nPseudoClasses == BitSetShim.size(states), nPseudoClasses+\"!=\"+BitSetShim.size(states));\n@@ -861,1 +868,1 @@\n-        assertTrue (nPseudoClasses+\"!=\"+BitSetShim.size(states), nPseudoClasses == BitSetShim.size(states));\n+        assertTrue (nPseudoClasses == BitSetShim.size(states), nPseudoClasses+\"!=\"+BitSetShim.size(states));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/PseudoClassTest.java","additions":24,"deletions":17,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -37,2 +36,2 @@\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/SizeTypeTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,4 +33,5 @@\n-import org.junit.AfterClass;\n-import static org.junit.Assert.assertEquals;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -44,1 +45,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -48,1 +49,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/StringTypeTest.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,3 +46,0 @@\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -58,1 +55,8 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -78,1 +82,1 @@\n-    @Before\n+    @BeforeEach\n@@ -83,1 +87,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -1112,1 +1116,1 @@\n-        assertFalse(\"Exception during CSS processing on BG thread\", err.get());\n+        assertFalse(err.get(), \"Exception during CSS processing on BG thread\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/StyleManagerTest.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -33,1 +32,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -104,1 +104,1 @@\n-            assertEquals(msg, testPairs[n][1], result[n]);\n+            assertEquals(testPairs[n][1], result[n], msg);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/URLTypeTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.junit.Test;\n@@ -35,1 +34,3 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/converters\/URLConverterTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,7 +34,3 @@\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -50,16 +46,0 @@\n-    @BeforeClass\n-    public static void setUpClass() throws Exception {\n-    }\n-\n-    @AfterClass\n-    public static void tearDownClass() throws Exception {\n-    }\n-\n-    @Before\n-    public void setUp() {\n-    }\n-\n-    @After\n-    public void tearDown() {\n-    }\n-\n@@ -73,1 +53,1 @@\n-        assertNotNull(\"Should never turn null\", result);\n+        assertNotNull(result, \"Should never turn null\");\n@@ -75,1 +55,1 @@\n-        assertEquals(\"Creates different instance of FontFactory\", expResult, result);\n+        assertEquals(expResult, result, \"Creates different instance of FontFactory\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/font\/PrismFontFactoryTest.java","additions":6,"deletions":26,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,3 +31,0 @@\n-import static junit.framework.Assert.assertTrue;\n-import static junit.framework.Assert.assertFalse;\n-import static junit.framework.Assert.assertEquals;\n@@ -35,1 +32,4 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/geom\/BaseBoundsTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,5 @@\n-import junit.framework.Assert;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -44,1 +47,1 @@\n-        Assert.assertEquals(10, drc.maxSpace());\n+        assertEquals(10, drc.maxSpace());\n@@ -51,1 +54,1 @@\n-        Assert.assertEquals(3, drc.size());\n+        assertEquals(3, drc.size());\n@@ -60,1 +63,1 @@\n-            Assert.assertEquals(nonIntersecting_3_Regions[i], rb);\n+            assertEquals(nonIntersecting_3_Regions[i], rb);\n@@ -70,1 +73,1 @@\n-            Assert.assertEquals(nonIntersecting_3_Regions[i], rb);\n+            assertEquals(nonIntersecting_3_Regions[i], rb);\n@@ -80,1 +83,1 @@\n-            Assert.assertEquals(nonIntersecting_3_Regions[i], rb);\n+            assertEquals(nonIntersecting_3_Regions[i], rb);\n@@ -96,1 +99,1 @@\n-            Assert.assertEquals(arry[i], rb);\n+            assertEquals(arry[i], rb);\n@@ -104,2 +107,2 @@\n-        Assert.assertTrue(copyDrc != drc);\n-        Assert.assertEquals(copyDrc, drc);\n+        assertTrue(copyDrc != drc);\n+        assertEquals(copyDrc, drc);\n@@ -112,1 +115,1 @@\n-        Assert.assertEquals(new RectBounds(25, 25, 50, 50), dr);\n+        assertEquals(new RectBounds(25, 25, 50, 50), dr);\n@@ -115,1 +118,1 @@\n-    @Test (expected=ArrayIndexOutOfBoundsException.class)\n+    @Test\n@@ -117,3 +120,4 @@\n-        DirtyRegionContainer drc = getDRC_initialized();\n-        RectBounds dr = drc.getDirtyRegion(10);\n-        Assert.fail(\"Expected AIOOBE\");\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+            DirtyRegionContainer drc = getDRC_initialized();\n+            RectBounds dr = drc.getDirtyRegion(10);\n+        });\n@@ -128,1 +132,1 @@\n-        Assert.assertEquals(4, drc.size());\n+        assertEquals(4, drc.size());\n@@ -130,1 +134,1 @@\n-            Assert.assertEquals(nonIntersecting_3_Regions[i], (drc.getDirtyRegion(i)));\n+            assertEquals(nonIntersecting_3_Regions[i], (drc.getDirtyRegion(i)));\n@@ -132,1 +136,1 @@\n-        Assert.assertEquals(drc.getDirtyRegion(drc.size() - 1), newregion);\n+        assertEquals(drc.getDirtyRegion(drc.size() - 1), newregion);\n@@ -141,4 +145,4 @@\n-        Assert.assertEquals(3, drc.size());\n-        Assert.assertEquals(new RectBounds(60, 60, 100, 100), drc.getDirtyRegion(0));\n-        Assert.assertEquals(new RectBounds(25, 25, 50, 50), drc.getDirtyRegion(1));\n-        Assert.assertEquals(new RectBounds(0, 0, 22, 20), drc.getDirtyRegion(2));\n+        assertEquals(3, drc.size());\n+        assertEquals(new RectBounds(60, 60, 100, 100), drc.getDirtyRegion(0));\n+        assertEquals(new RectBounds(25, 25, 50, 50), drc.getDirtyRegion(1));\n+        assertEquals(new RectBounds(0, 0, 22, 20), drc.getDirtyRegion(2));\n@@ -153,3 +157,3 @@\n-        Assert.assertEquals(2, drc.size());\n-        Assert.assertEquals(new RectBounds(60, 60, 100, 100), drc.getDirtyRegion(0));\n-        Assert.assertEquals(new RectBounds(0, 0, 50, 50), drc.getDirtyRegion(1));\n+        assertEquals(2, drc.size());\n+        assertEquals(new RectBounds(60, 60, 100, 100), drc.getDirtyRegion(0));\n+        assertEquals(new RectBounds(0, 0, 50, 50), drc.getDirtyRegion(1));\n@@ -163,2 +167,2 @@\n-        Assert.assertEquals(1, drc.size());\n-        Assert.assertEquals(new RectBounds(0, 0, 100, 100), drc.getDirtyRegion(0));\n+        assertEquals(1, drc.size());\n+        assertEquals(new RectBounds(0, 0, 100, 100), drc.getDirtyRegion(0));\n@@ -174,5 +178,5 @@\n-        Assert.assertEquals(4, drc.size());\n-        Assert.assertEquals(new RectBounds(120, 120, 150, 150), drc.getDirtyRegion(0));\n-        Assert.assertEquals(new RectBounds(25, 25, 50, 50), drc.getDirtyRegion(1));\n-        Assert.assertEquals(new RectBounds(60, 60, 100, 100), drc.getDirtyRegion(2));\n-        Assert.assertEquals(new RectBounds(0, 0, 22, 20), drc.getDirtyRegion(3));\n+        assertEquals(4, drc.size());\n+        assertEquals(new RectBounds(120, 120, 150, 150), drc.getDirtyRegion(0));\n+        assertEquals(new RectBounds(25, 25, 50, 50), drc.getDirtyRegion(1));\n+        assertEquals(new RectBounds(60, 60, 100, 100), drc.getDirtyRegion(2));\n+        assertEquals(new RectBounds(0, 0, 22, 20), drc.getDirtyRegion(3));\n@@ -188,4 +192,4 @@\n-        Assert.assertEquals(3, drc.size());\n-        Assert.assertEquals(new RectBounds(120, 120, 150, 150), drc.getDirtyRegion(0));\n-        Assert.assertEquals(new RectBounds(60, 60, 100, 100), drc.getDirtyRegion(1));\n-        Assert.assertEquals(new RectBounds(0, 0, 50, 50), drc.getDirtyRegion(2));\n+        assertEquals(3, drc.size());\n+        assertEquals(new RectBounds(120, 120, 150, 150), drc.getDirtyRegion(0));\n+        assertEquals(new RectBounds(60, 60, 100, 100), drc.getDirtyRegion(1));\n+        assertEquals(new RectBounds(0, 0, 50, 50), drc.getDirtyRegion(2));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/geom\/DirtyRegionContainerTest.java","additions":41,"deletions":37,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,5 @@\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+\n+import java.util.concurrent.TimeUnit;\n@@ -84,1 +88,2 @@\n-    @Test(timeout=10000)\n+    @Test\n+    @Timeout(value=10000, unit=TimeUnit.MILLISECONDS)\n@@ -90,1 +95,2 @@\n-    @Test(timeout=10000)\n+    @Test\n+    @Timeout(value=10000, unit=TimeUnit.MILLISECONDS)\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/geom\/Path2DGrowTest.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,3 +36,0 @@\n-import static junit.framework.Assert.assertTrue;\n-import static junit.framework.Assert.assertFalse;\n-import static junit.framework.Assert.assertEquals;\n@@ -40,1 +37,4 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/geom\/Path2DTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import static junit.framework.Assert.assertEquals;\n@@ -39,1 +38,3 @@\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/geom\/TransformedShapeTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.junit.Test;\n@@ -32,1 +31,2 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/geom\/Vec3dTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,3 @@\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/geom\/transform\/BaseTransformTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,4 +32,5 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertSame;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n@@ -69,1 +70,1 @@\n-    @BeforeClass\n+    @BeforeAll\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/geom\/transform\/GeneralTransform3DTest.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,9 @@\n-import static org.junit.Assert.*;\n-import org.junit.Test;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -56,1 +63,1 @@\n-        try {\n+        assertThrows(NullPointerException.class, () -> {\n@@ -58,6 +65,1 @@\n-        } catch (NullPointerException ex) {\n-           return; \/\/ PASSED\n-        } catch (IOException ioEx) {\n-            fail(\"unexpected IOException:\" + ioEx.toString());\n-        }\n-        fail(\"expected NPE after constructor invocation with null\");\n+        });\n@@ -74,1 +76,1 @@\n-        try {\n+        assertThrows(EOFException.class, () -> {\n@@ -76,6 +78,1 @@\n-        } catch (EOFException ex) {\n-            return; \/\/ PASSED\n-        } catch (IOException ioEx) {\n-            fail(\"unexpected IOException:\" + ioEx.toString());\n-        }\n-        fail(\"expected EOF exception for streams lesser then 13 bytes\");\n+        });\n@@ -91,1 +88,1 @@\n-        try {\n+        assertThrows(EOFException.class, () -> {\n@@ -93,6 +90,1 @@\n-        } catch (EOFException ex) {\n-            return; \/\/ PASSED\n-        } catch (IOException ioEx) {\n-            fail(\"unexpected IOException:\" + ioEx.toString());\n-        }\n-        fail(\"expected EOF exception for streams lesser then 13 bytes\");\n+        });\n@@ -121,1 +113,2 @@\n-    @Test (timeout=2000)\n+    @Test\n+    @Timeout(value=2000, unit=TimeUnit.MILLISECONDS)\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/iio\/GIFLoaderTest.java","additions":18,"deletions":25,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -35,1 +33,5 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -49,1 +51,1 @@\n-    @Before\n+    @BeforeEach\n@@ -65,2 +67,1 @@\n-            assertEquals(\"Unexpected pixel scale\",\n-                    pixelScale, imageFrame.getPixelScale(), 0.0001f);\n+            assertEquals(pixelScale, imageFrame.getPixelScale(), 0.0001f, \"Unexpected pixel scale\");\n@@ -70,1 +71,1 @@\n-            assertTrue(\"Image size must be at least 8x8\", width >= 8 && height >= 8);\n+            assertTrue(width >= 8 && height >= 8, \"Image size must be at least 8x8\");\n@@ -126,1 +127,1 @@\n-            assertEquals(\"getArgb returns incorrect color\", exColors[i], pix1);\n+            assertEquals(exColors[i], pix1, \"getArgb returns incorrect color\");\n@@ -128,1 +129,1 @@\n-            assertEquals(\"second call to getArgb returns different result\", pix1, pix2);\n+            assertEquals(pix1, pix2, \"second call to getArgb returns different result\");\n@@ -153,2 +154,2 @@\n-        assertEquals(\"width of @2x image is wrong\", exWidth2, imageFrame2.getWidth());\n-        assertEquals(\"height of @2x image is wrong\", exHeight2, imageFrame2.getHeight());\n+        assertEquals(exWidth2, imageFrame2.getWidth(), \"width of @2x image is wrong\");\n+        assertEquals(exHeight2, imageFrame2.getHeight(), \"height of @2x image is wrong\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/iio\/ImageHiDPITest.java","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,5 @@\n-import static org.junit.Assert.*;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -74,5 +77,3 @@\n-                    throw new org.junit.ComparisonFailure(\n-                        \"pixel \" + x + \", \" + y + \" does not match\",\n-                        String.format(\"0x%08X\", expected),\n-                        String.format(\"0x%08X\", actual)\n-                    );\n+                    fail(String.format(\"pixel \" + x + \", \" + y + \" does not match; expected 0x%08X, actual 0x%08X\",\n+                        expected, actual\n+                    ));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/iio\/ImageLoaderScalingTest.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,7 @@\n-import static org.junit.Assert.*;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -69,2 +74,2 @@\n-        assertEquals(\"Unmatched width\", w, img.getWidth());\n-        assertEquals(\"Unmatched height\", h, img.getHeight());\n+        assertEquals(w, img.getWidth(), \"Unmatched width\");\n+        assertEquals(h, img.getHeight(), \"Unmatched height\");\n@@ -77,4 +82,3 @@\n-                    throw new org.junit.ComparisonFailure(\n-                        \"pixel \" + x + \", \" + y + \" does not match\",\n-                        String.format(\"0x%08X\", p1), String.format(\"0x%08X\", p2)\n-                    );\n+                    fail(String.format(\"pixel \" + x + \", \" + y + \" does not match; p1 0x%08X, p2 0x%08X\",\n+                        p1, p2\n+                    ));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/iio\/bmp\/BMPImageLoaderTest.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,4 @@\n-import static org.junit.Assert.*;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -95,5 +97,5 @@\n-        assertTrue(msg, x <= tw);\n-        assertTrue(msg, y <= th);\n-        assertTrue(msg, x > 0);\n-        assertTrue(msg, y > 0);\n-        assertTrue(msg, x == tw || y == th);\n+        assertTrue(x <= tw, msg);\n+        assertTrue(y <= th, msg);\n+        assertTrue(x > 0, msg);\n+        assertTrue(y > 0, msg);\n+        assertTrue(x == tw || y == th, msg);\n@@ -104,1 +106,1 @@\n-            assertTrue(msg, x == Math.floor(th * originalAspect) || x == Math.ceil(th * originalAspect));\n+            assertTrue(x == Math.floor(th * originalAspect) || x == Math.ceil(th * originalAspect), msg);\n@@ -107,1 +109,1 @@\n-            assertTrue(msg, y == Math.floor(tw \/ originalAspect) || y == Math.ceil(tw \/ originalAspect));\n+            assertTrue(y == Math.floor(tw \/ originalAspect) || y == Math.ceil(tw \/ originalAspect), msg);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/iio\/common\/ImageToolsTest.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,5 @@\n-import org.junit.Test;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -49,1 +53,2 @@\n-    @Test(timeout = 1000, expected = IOException.class)\n+    @Test\n+    @Timeout(value=1000, unit=TimeUnit.MILLISECONDS)\n@@ -51,7 +56,8 @@\n-        int[] corruptedIDATLength = {\n-            137, 80, 78, 71, 13, 10, 26, 10, \/\/ signature\n-            0, 0, 0, 13, 0x49, 0x48, 0x44, 0x52, \/\/ IHDR chunk\n-            0, 0, 4, 0, 0, 0, 4, 0, 8, 6, 0, 0, 0, \/\/ IHDR chunk data\n-            0x7f, 0x1d, 0x2b, 0x83, \/\/ IHDR chunk crc\n-            0x80, 0, 0x80, 0, 0x49, 0x44, 0x41, 0x54 \/\/ negative IDAT length\n-        };\n+        assertThrows(IOException.class, () -> {\n+            int[] corruptedIDATLength = {\n+                137, 80, 78, 71, 13, 10, 26, 10, \/\/ signature\n+                0, 0, 0, 13, 0x49, 0x48, 0x44, 0x52, \/\/ IHDR chunk\n+                0, 0, 4, 0, 0, 0, 4, 0, 8, 6, 0, 0, 0, \/\/ IHDR chunk data\n+                0x7f, 0x1d, 0x2b, 0x83, \/\/ IHDR chunk crc\n+                0x80, 0, 0x80, 0, 0x49, 0x44, 0x41, 0x54 \/\/ negative IDAT length\n+            };\n@@ -59,2 +65,3 @@\n-        ByteArrayInputStream stream = ImageTestHelper.constructStreamFromInts(corruptedIDATLength);\n-        testImage(stream);\n+            ByteArrayInputStream stream = ImageTestHelper.constructStreamFromInts(corruptedIDATLength);\n+            testImage(stream);\n+        });\n@@ -63,1 +70,2 @@\n-    @Test(timeout = 1000, expected = IOException.class)\n+    @Test\n+    @Timeout(value=1000, unit=TimeUnit.MILLISECONDS)\n@@ -65,10 +73,11 @@\n-        int[] corruptedIDATLength = {\n-            137, 80, 78, 71, 13, 10, 26, 10, \/\/ signature\n-            0, 0, 0, 13, 0x49, 0x48, 0x44, 0x52, \/\/ IHDR chunk\n-            0, 0, 4, 0, 0, 0, 4, 0, 8, 6, 0, 0, 0, \/\/ IHDR chunk data\n-            0x7f, 0x1d, 0x2b, 0x83, \/\/ IHDR chunk crc\n-            0, 0, 0, 1, 0x49, 0x44, 0x41, 0x54, \/\/ first IDAT\n-            0, \/\/ IDAT chunk data\n-            0, 0, 0, 0, \/\/ IDAT chunk crc\n-            0x80, 0, 0, 0, 0x49, 0x44, 0x41, 0x54, \/\/ second IDAT\n-        };\n+        assertThrows(IOException.class, () -> {\n+            int[] corruptedIDATLength = {\n+                137, 80, 78, 71, 13, 10, 26, 10, \/\/ signature\n+                0, 0, 0, 13, 0x49, 0x48, 0x44, 0x52, \/\/ IHDR chunk\n+                0, 0, 4, 0, 0, 0, 4, 0, 8, 6, 0, 0, 0, \/\/ IHDR chunk data\n+                0x7f, 0x1d, 0x2b, 0x83, \/\/ IHDR chunk crc\n+                0, 0, 0, 1, 0x49, 0x44, 0x41, 0x54, \/\/ first IDAT\n+                0, \/\/ IDAT chunk data\n+                0, 0, 0, 0, \/\/ IDAT chunk crc\n+                0x80, 0, 0, 0, 0x49, 0x44, 0x41, 0x54, \/\/ second IDAT\n+            };\n@@ -76,2 +85,3 @@\n-        ByteArrayInputStream stream = ImageTestHelper.constructStreamFromInts(corruptedIDATLength);\n-        testImage(stream);\n+            ByteArrayInputStream stream = ImageTestHelper.constructStreamFromInts(corruptedIDATLength);\n+            testImage(stream);\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/iio\/png\/PNGImageLoaderTest.java","additions":35,"deletions":25,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,0 @@\n-import static junit.framework.Assert.*;\n@@ -59,1 +58,5 @@\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -481,4 +484,4 @@\n-        assertEquals(\"alpha\", (argb1 >> 24) & 0xff, (argb2 >> 24) & 0xff);\n-        assertEquals(\"red\",   (argb1 >> 16) & 0xff, (argb2 >> 16) & 0xff, delta);\n-        assertEquals(\"green\", (argb1 >>  8) & 0xff, (argb2 >>  8) & 0xff, delta);\n-        assertEquals(\"blue\",  (argb1      ) & 0xff, (argb2      ) & 0xff, delta);\n+        assertEquals((argb1 >> 24) & 0xff, (argb2 >> 24) & 0xff, \"alpha\");\n+        assertEquals((argb1 >> 16) & 0xff, (argb2 >> 16) & 0xff, delta, \"red\");\n+        assertEquals((argb1 >>  8) & 0xff, (argb2 >>  8) & 0xff, delta, \"green\");\n+        assertEquals((argb1      ) & 0xff, (argb2      ) & 0xff, delta, \"blue\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/image\/ConverterTest.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,4 +38,5 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -52,1 +53,1 @@\n-    @Before\n+    @BeforeEach\n@@ -61,1 +62,1 @@\n-    @After\n+    @AfterEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/KeyboardShortcutsTest.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -35,1 +35,2 @@\n-    @Test public void dummy() { }\n+    @Test\n+    public void dummy() { }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/layout\/RegionTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-\n@@ -31,0 +29,1 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/layout\/ScaledMathTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -35,1 +35,2 @@\n-    @Test public void dummy() { }\n+    @Test\n+    public void dummy() { }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/layout\/region\/BackgroundFillConverterTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -35,1 +35,2 @@\n-    @Test public void valuesAreSetCorrectly() {\n+    @Test\n+    public void valuesAreSetCorrectly() {\n@@ -45,1 +46,2 @@\n-    @Test public void hashingReturnsSameObject() {\n+    @Test\n+    public void hashingReturnsSameObject() {\n@@ -58,1 +60,2 @@\n-    @Test public void equality() {\n+    @Test\n+    public void equality() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/layout\/region\/BackgroundFillTest.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -35,1 +35,2 @@\n-    @Test public void dummy() { }\n+    @Test\n+    public void dummy() { }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/layout\/region\/BackgroundImageTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.junit.Test;\n@@ -33,3 +32,0 @@\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n@@ -38,0 +34,4 @@\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n@@ -44,1 +44,2 @@\n-    @Test public void scenario1() {\n+    @Test\n+    public void scenario1() {\n@@ -77,1 +78,2 @@\n-    @Test public void scenario3() {\n+    @Test\n+    public void scenario3() {\n@@ -95,1 +97,2 @@\n-    @Test public void scenario4() {\n+    @Test\n+    public void scenario4() {\n@@ -113,1 +116,2 @@\n-    @Test public void scenario5() {\n+    @Test\n+    public void scenario5() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/layout\/region\/BackgroundRepeatConverterTest.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import test.com.sun.javafx.test.TransformHelper;\n-import javafx.scene.transform.Transform;\n@@ -34,0 +32,1 @@\n+import javafx.scene.transform.Transform;\n@@ -35,1 +34,0 @@\n-import test.javafx.scene.transform.TransformOperationsTest;\n@@ -37,1 +35,2 @@\n-import static org.junit.Assert.*;\n+import test.com.sun.javafx.test.TransformHelper;\n+import test.javafx.scene.transform.TransformOperationsTest;\n@@ -39,1 +38,6 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.provider.Arguments;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n@@ -102,2 +106,3 @@\n-        for (Object o : TransformOperationsTest.getParams()) {\n-            Object[] arr = (Object[]) o;\n+        List<Arguments> arguments = TransformOperationsTest.getParams().toList();\n+        for (Arguments arg : arguments) {\n+            Object[] arr = arg.get();\n@@ -118,2 +123,3 @@\n-        for (Object o : TransformOperationsTest.getParams()) {\n-            Object[] arr = (Object[]) o;\n+        List<Arguments> arguments = TransformOperationsTest.getParams().toList();\n+        for (Arguments arg : arguments) {\n+            Object[] arr = arg.get();\n@@ -131,2 +137,3 @@\n-                assertSame(\"Checking reusing immutable transform to values of #\"\n-                        + counter + \" of TransformOperationsTest\", reuse, returned);\n+                assertSame(reuse, returned,\n+                        \"Checking reusing immutable transform to values of #\"\n+                        + counter + \" of TransformOperationsTest\");\n@@ -148,2 +155,3 @@\n-                assertNotSame(\"Checking reusing immutable transform to values of #\"\n-                        + counter + \" of TransformOperationsTest\", returned2, t);\n+                assertNotSame(returned2, t,\n+                        \"Checking reusing immutable transform to values of #\"\n+                        + counter + \" of TransformOperationsTest\");\n@@ -170,2 +178,3 @@\n-        for (Object o : TransformOperationsTest.getParams()) {\n-            Object[] arr = (Object[]) o;\n+        List<Arguments> arguments = TransformOperationsTest.getParams().toList();\n+        for (Arguments arg : arguments) {\n+            Object[] arr = arg.get();\n@@ -188,1 +197,2 @@\n-                    assertSame(\"Checking state of concatenation of \"\n+                    assertSame(clone, conc,\n+                            \"Checking state of concatenation of \"\n@@ -191,1 +201,1 @@\n-                            \" of TransformOperationsTest\", clone, conc);\n+                            \" of TransformOperationsTest\");\n@@ -213,1 +223,2 @@\n-                assertNotSame(\"Checking state of concatenation of \"\n+                assertNotSame(conc2, t1,\n+                        \"Checking state of concatenation of \"\n@@ -215,2 +226,3 @@\n-                        \" of TransformOperationsTest\", conc2, t1);\n-                assertNotSame(\"Checking state of concatenation of \"\n+                        \" of TransformOperationsTest\");\n+                assertNotSame(conc2, t2,\n+                        \"Checking state of concatenation of \"\n@@ -218,1 +230,1 @@\n-                        \" of TransformOperationsTest\", conc2, t2);\n+                        \" of TransformOperationsTest\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/transform\/TransformUtilsTest.java","additions":34,"deletions":22,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -44,2 +42,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -51,1 +51,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/traversal\/TopMostTraversalEngineTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,3 +33,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n@@ -37,2 +34,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -47,6 +43,8 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -59,1 +57,0 @@\n-@RunWith(Parameterized.class)\n@@ -61,5 +58,0 @@\n-    private final int fromNumber;\n-    private final Direction direction;\n-    private final int toNumber;\n-    private final int toNumberTransformed;\n-\n@@ -91,3 +83,2 @@\n-    @Parameters\n-    public static Collection data() {\n-        return Arrays.asList(new Object[][] {\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n@@ -95,4 +86,4 @@\n-            { 5, Direction.LEFT, 4, 8 },\n-            { 5, Direction.RIGHT, 6, 2 },\n-            { 5, Direction.UP, 2, 4 },\n-            { 5, Direction.DOWN, 8, 6 },\n+            Arguments.of( 5, Direction.LEFT, 4, 8 ),\n+            Arguments.of( 5, Direction.RIGHT, 6, 2 ),\n+            Arguments.of( 5, Direction.UP, 2, 4 ),\n+            Arguments.of( 5, Direction.DOWN, 8, 6 ),\n@@ -101,2 +92,2 @@\n-            \/\/{ 5, Direction.PREVIOUS, 4, 8 },\n-            \/\/{ 5, Direction.NEXT, 6, 2 },\n+            \/\/Arguments.of( 5, Direction.PREVIOUS, 4, 8 ),\n+            \/\/Arguments.of( 5, Direction.NEXT, 6, 2 ),\n@@ -105,2 +96,2 @@\n-            { 5, Direction.PREVIOUS, 4, 4 },\n-            { 5, Direction.NEXT, 6, 6 },\n+            Arguments.of( 5, Direction.PREVIOUS, 4, 4 ),\n+            Arguments.of( 5, Direction.NEXT, 6, 6 ),\n@@ -109,4 +100,4 @@\n-            { 4, Direction.LEFT, 4, 7 },\n-            { 6, Direction.RIGHT, 6, 3 },\n-            { 2, Direction.UP, 2, 1 },\n-            { 8, Direction.DOWN, 8, 9 },\n+            Arguments.of( 4, Direction.LEFT, 4, 7 ),\n+            Arguments.of( 6, Direction.RIGHT, 6, 3 ),\n+            Arguments.of( 2, Direction.UP, 2, 1 ),\n+            Arguments.of( 8, Direction.DOWN, 8, 9 ),\n@@ -115,4 +106,4 @@\n-            \/\/{ 4, Direction.PREVIOUS, 3, 7 },\n-            \/\/{ 1, Direction.PREVIOUS, 9, 4 },\n-            \/\/{ 6, Direction.NEXT, 7, 3 },\n-            \/\/{ 9, Direction.NEXT, 1, 6 },\n+            \/\/Arguments.of( 4, Direction.PREVIOUS, 3, 7 ),\n+            \/\/Arguments.of( 1, Direction.PREVIOUS, 9, 4 ),\n+            \/\/Arguments.of( 6, Direction.NEXT, 7, 3 ),\n+            \/\/Arguments.of( 9, Direction.NEXT, 1, 6 ),\n@@ -121,4 +112,4 @@\n-            { 4, Direction.PREVIOUS, 3, 3 },\n-            { 1, Direction.PREVIOUS, 9, 9 },\n-            { 6, Direction.NEXT, 7, 7 },\n-            { 9, Direction.NEXT, 1, 1 },\n+            Arguments.of( 4, Direction.PREVIOUS, 3, 3 ),\n+            Arguments.of( 1, Direction.PREVIOUS, 9, 9 ),\n+            Arguments.of( 6, Direction.NEXT, 7, 7 ),\n+            Arguments.of( 9, Direction.NEXT, 1, 1 ),\n@@ -127,4 +118,4 @@\n-            { 2, Direction.RIGHT, 3, 2 },\n-            { 8, Direction.LEFT, 7, 8 },\n-            { 4, Direction.UP, 1, 4 },\n-            { 6, Direction.DOWN, 9, 6 },\n+            Arguments.of( 2, Direction.RIGHT, 3, 2 ),\n+            Arguments.of( 8, Direction.LEFT, 7, 8 ),\n+            Arguments.of( 4, Direction.UP, 1, 4 ),\n+            Arguments.of( 6, Direction.DOWN, 9, 6 ),\n@@ -133,4 +124,4 @@\n-            \/\/{ 8, Direction.PREVIOUS, 7, 1 },\n-            \/\/{ 7, Direction.PREVIOUS, 6, 3 },\n-            \/\/{ 2, Direction.NEXT, 3, 9 },\n-            \/\/{ 3, Direction.NEXT, 4, 7 }\n+            \/\/Arguments.of( 8, Direction.PREVIOUS, 7, 1 ),\n+            \/\/Arguments.of( 7, Direction.PREVIOUS, 6, 3 ),\n+            \/\/Arguments.of( 2, Direction.NEXT, 3, 9 ),\n+            \/\/Arguments.of( 3, Direction.NEXT, 4, 7)}\n@@ -139,15 +130,5 @@\n-            { 8, Direction.PREVIOUS, 7, 7 },\n-            { 7, Direction.PREVIOUS, 6, 6 },\n-            { 2, Direction.NEXT, 3, 3 },\n-            { 3, Direction.NEXT, 4, 4 }\n-        });\n-    }\n-\n-    public TraversalTest(final int fromNumber,\n-                         final Direction direction,\n-                         final int toNumber,\n-                         final int toNumberTransformed) {\n-        this.fromNumber = fromNumber;\n-        this.direction = direction;\n-        this.toNumber = toNumber;\n-        this.toNumberTransformed = toNumberTransformed;\n+            Arguments.of( 8, Direction.PREVIOUS, 7, 7 ),\n+            Arguments.of( 7, Direction.PREVIOUS, 6, 6 ),\n+            Arguments.of( 2, Direction.NEXT, 3, 3 ),\n+            Arguments.of( 3, Direction.NEXT, 4, 4)\n+        );\n@@ -156,1 +137,1 @@\n-    @Before\n+    @BeforeEach\n@@ -170,1 +151,1 @@\n-    @After\n+    @AfterEach\n@@ -178,2 +159,6 @@\n-    @Test\n-    public void untransformedTraversalTest() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void untransformedTraversalTest(int fromNumber,\n+                                           Direction direction,\n+                                           int toNumber,\n+                                           int toNumberTransformed) {\n@@ -185,2 +170,6 @@\n-    @Test\n-    public void transformedTraversalTest() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void transformedTraversalTest(int fromNumber,\n+                                         Direction direction,\n+                                         int toNumber,\n+                                         int toNumberTransformed) {\n@@ -193,2 +182,6 @@\n-    @Test\n-    public void traverseListenerTest() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void traverseListenerTest(int fromNumber,\n+                                     Direction direction,\n+                                     int toNumber,\n+                                     int toNumberTransformed) {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/traversal\/TraversalTest.java","additions":65,"deletions":72,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import static org.junit.Assert.assertTrue;\n@@ -35,2 +34,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -45,6 +43,6 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -55,1 +53,0 @@\n-@RunWith(Parameterized.class)\n@@ -57,5 +54,0 @@\n-    private final int fromNumber;\n-    private final Direction direction;\n-    private final int invisibleNumber;\n-    private final int toNumber;\n-\n@@ -75,20 +67,9 @@\n-    @Parameters\n-    public static Collection data() {\n-        return Arrays.asList(new Object[][] {\n-            { 3, Direction.RIGHT, 4, 5},\n-            { 5, Direction.LEFT, 4, 3},\n-            { 4, Direction.NEXT, 5, 6},\n-            { 6, Direction.PREVIOUS, 5, 4},\n-            { 8, Direction.UP, 5, 2 },\n-            { 2, Direction.DOWN, 5, 8 }\n-        });\n-    }\n-\n-    public TraverseInvisibleTest(final int fromNumber,\n-                         final Direction direction,\n-                         final int invisibleNumber,\n-                         final int toNumber) {\n-        this.fromNumber = fromNumber;\n-        this.direction = direction;\n-        this.invisibleNumber = invisibleNumber;\n-        this.toNumber = toNumber;\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( 3, Direction.RIGHT, 4, 5),\n+            Arguments.of( 5, Direction.LEFT, 4, 3),\n+            Arguments.of( 4, Direction.NEXT, 5, 6),\n+            Arguments.of( 6, Direction.PREVIOUS, 5, 4),\n+            Arguments.of( 8, Direction.UP, 5, 2 ),\n+            Arguments.of( 2, Direction.DOWN, 5, 8)\n+        );\n@@ -97,1 +78,1 @@\n-    @Before\n+    @BeforeEach\n@@ -110,1 +91,1 @@\n-    @After\n+    @AfterEach\n@@ -118,2 +99,6 @@\n-    @Test\n-    public void traverseOverInvisible() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void traverseOverInvisible(int fromNumber,\n+                                      Direction direction,\n+                                      int invisibleNumber,\n+                                      int toNumber) {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/traversal\/TraverseInvisibleTest.java","additions":25,"deletions":40,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.junit.Test;\n@@ -39,1 +38,4 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/CacheFilterTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,3 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/ContentBoundsTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,3 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -50,1 +51,1 @@\n-        Assert.assertEquals(1 |(1 << 2), NGNodeShim.cullingBits(bn));\n+        assertEquals(1 |(1 << 2), NGNodeShim.cullingBits(bn));\n@@ -63,1 +64,1 @@\n-        Assert.assertEquals(0, NGNodeShim.cullingBits(bn));\n+        assertEquals(0, NGNodeShim.cullingBits(bn));\n@@ -76,1 +77,1 @@\n-        Assert.assertEquals(2 | (2 << 2), NGNodeShim.cullingBits(bn));\n+        assertEquals(2 | (2 << 2), NGNodeShim.cullingBits(bn));\n@@ -89,1 +90,1 @@\n-        Assert.assertEquals(1 | (1 << 2), NGNodeShim.cullingBits(bn));\n+        assertEquals(1 | (1 << 2), NGNodeShim.cullingBits(bn));\n@@ -102,1 +103,1 @@\n-        Assert.assertEquals(2, NGNodeShim.cullingBits(bn));\n+        assertEquals(2, NGNodeShim.cullingBits(bn));\n@@ -115,1 +116,1 @@\n-        Assert.assertEquals(2, NGNodeShim.cullingBits(bn));\n+        assertEquals(2, NGNodeShim.cullingBits(bn));\n@@ -124,1 +125,1 @@\n-        Assert.assertEquals(0, NGNodeShim.cullingBits(bn));\n+        assertEquals(0, NGNodeShim.cullingBits(bn));\n@@ -136,1 +137,1 @@\n-        Assert.assertEquals(0, NGNodeShim.cullingBits(gbn));\n+        assertEquals(0, NGNodeShim.cullingBits(gbn));\n@@ -138,1 +139,1 @@\n-            Assert.assertEquals(0, NGNodeShim.cullingBits(n));\n+            assertEquals(0, NGNodeShim.cullingBits(n));\n@@ -153,1 +154,1 @@\n-        Assert.assertEquals(1 | (1 << 2), NGNodeShim.cullingBits(gbn));\n+        assertEquals(1 | (1 << 2), NGNodeShim.cullingBits(gbn));\n@@ -156,2 +157,2 @@\n-        Assert.assertEquals(2, NGNodeShim.cullingBits(bn1));\n-        Assert.assertEquals(2 << 2, NGNodeShim.cullingBits(bn2));\n+        assertEquals(2, NGNodeShim.cullingBits(bn1));\n+        assertEquals(2 << 2, NGNodeShim.cullingBits(bn2));\n@@ -171,1 +172,1 @@\n-        Assert.assertEquals(2, NGNodeShim.cullingBits(gbn));\n+        assertEquals(2, NGNodeShim.cullingBits(gbn));\n@@ -174,2 +175,2 @@\n-        Assert.assertEquals(0, NGNodeShim.cullingBits(bn1));\n-        Assert.assertEquals(0, NGNodeShim.cullingBits(bn2));\n+        assertEquals(0, NGNodeShim.cullingBits(bn1));\n+        assertEquals(0, NGNodeShim.cullingBits(bn2));\n@@ -189,1 +190,1 @@\n-        Assert.assertEquals(1 | (1 << 2), NGNodeShim.cullingBits(gbn));\n+        assertEquals(1 | (1 << 2), NGNodeShim.cullingBits(gbn));\n@@ -192,2 +193,2 @@\n-        Assert.assertEquals(1, NGNodeShim.cullingBits(bn1));\n-        Assert.assertEquals(1 << 2, NGNodeShim.cullingBits(bn2));\n+        assertEquals(1, NGNodeShim.cullingBits(bn1));\n+        assertEquals(1 << 2, NGNodeShim.cullingBits(bn2));\n@@ -212,1 +213,1 @@\n-        Assert.assertEquals(1 | (1 << 2), NGNodeShim.cullingBits(gbn));\n+        assertEquals(1 | (1 << 2), NGNodeShim.cullingBits(gbn));\n@@ -215,1 +216,1 @@\n-        Assert.assertEquals(1 | (1 << 2), NGNodeShim.cullingBits(g1bn));\n+        assertEquals(1 | (1 << 2), NGNodeShim.cullingBits(g1bn));\n@@ -218,3 +219,3 @@\n-        Assert.assertEquals(1, NGNodeShim.cullingBits(bn1));\n-        Assert.assertEquals(1 << 2, NGNodeShim.cullingBits(bn2));\n-        Assert.assertEquals(0, NGNodeShim.cullingBits(bn3));\n+        assertEquals(1, NGNodeShim.cullingBits(bn1));\n+        assertEquals(1 << 2, NGNodeShim.cullingBits(bn2));\n+        assertEquals(0, NGNodeShim.cullingBits(bn3));\n@@ -232,2 +233,2 @@\n-        Assert.assertEquals(2 | (1 << 2), NGNodeShim.cullingBits(gbn));\n-        Assert.assertEquals(1 << 2, NGNodeShim.cullingBits(bn1));\n+        assertEquals(2 | (1 << 2), NGNodeShim.cullingBits(gbn));\n+        assertEquals(1 << 2, NGNodeShim.cullingBits(bn1));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/CullingTest.java","additions":29,"deletions":28,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.Collection;\n@@ -31,0 +30,1 @@\n+import java.util.stream.Stream;\n@@ -39,5 +39,4 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import static org.junit.Assert.assertEquals;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -45,1 +44,0 @@\n-@RunWith(Parameterized.class)\n@@ -58,2 +56,1 @@\n-    @Parameterized.Parameters\n-    public static Collection createParameters() {\n+    public static Stream<Arguments> createParameters() {\n@@ -69,1 +66,1 @@\n-        List<Object[]> params = new ArrayList<>();\n+        Stream<Arguments> params = Stream.empty();\n@@ -77,4 +74,7 @@\n-            params.add(new Object[] {new Creator() {\n-                @Override public NGNode create() { return createGroup(createRectangle(0, 0, 100, 100)); }\n-                @Override public String toString() { return \"Group with one Rectangle\"; }\n-            }, polluter});\n+            params = appendArgument(params, Arguments.of(\n+                new Creator() {\n+                    @Override public NGNode create() { return createGroup(createRectangle(0, 0, 100, 100)); }\n+                    @Override public String toString() { return \"Group with one Rectangle\"; }\n+                },\n+                polluter\n+            ));\n@@ -94,4 +94,7 @@\n-            params.add(new Object[] {new Creator() {\n-                @Override public NGNode create() { return createRectangle(0, 0, 100, 100); }\n-                @Override public String toString() { return \"Rectangle\"; }\n-            }, polluter});\n+            params = appendArgument(params, Arguments.of(\n+                new Creator() {\n+                    @Override public NGNode create() { return createRectangle(0, 0, 100, 100); }\n+                    @Override public String toString() { return \"Rectangle\"; }\n+                },\n+                polluter\n+            ));\n@@ -103,4 +106,0 @@\n-    public DirtyRegionClipTest(Creator creator, Polluter polluter) {\n-        super(creator, polluter);\n-    }\n-\n@@ -112,0 +111,4 @@\n+     *\n+     * NOTE: This was a parametrized test initializer with @BeforeEach flag, but\n+     * JUnit5 does not support parametrized classes yet. Make this a @BeforeEach\n+     * method once it does.\n@@ -113,1 +116,1 @@\n-    @Before public void setUp() {\n+    public void setUp(Creator creator) {\n@@ -134,1 +137,5 @@\n-    @Test public void sanityCheck() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void sanityCheck(Creator creator, Polluter polluter) {\n+        setUp(creator); \/\/ NOTE: JUnit5 does not (yet) support parametrized classes. Revert those changes once it does.\n+\n@@ -152,1 +159,5 @@\n-    @Test public void dirtyRegionContainsClip() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void dirtyRegionContainsClip(Creator creator, Polluter polluter) {\n+        setUp(creator); \/\/ NOTE: JUnit5 does not (yet) support parametrized classes. Revert those changes once it does.\n+\n@@ -162,1 +173,5 @@\n-    @Test public void dirtyRegionPartiallyOverlapsClip() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void dirtyRegionPartiallyOverlapsClip(Creator creator, Polluter polluter) {\n+        setUp(creator); \/\/ NOTE: JUnit5 does not (yet) support parametrized classes. Revert those changes once it does.\n+\n@@ -173,1 +188,5 @@\n-    @Test public void dirtyRegionDoesNotContainClip() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void dirtyRegionDoesNotContainClip(Creator creator, Polluter polluter) {\n+        setUp(creator); \/\/ NOTE: JUnit5 does not (yet) support parametrized classes. Revert those changes once it does.\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/DirtyRegionClipTest.java","additions":46,"deletions":27,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.util.Collection;\n@@ -39,0 +38,1 @@\n+import java.util.stream.Stream;\n@@ -52,2 +52,3 @@\n-import org.junit.runners.Parameterized;\n-import static org.junit.Assert.assertEquals;\n+\n+import org.junit.jupiter.params.provider.Arguments;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -72,0 +73,4 @@\n+    protected static Stream<Arguments> appendArgument(Stream<Arguments> stream, Arguments arg) {\n+        return Stream.concat(stream, Stream.of(arg));\n+    }\n+\n@@ -82,2 +87,1 @@\n-    @Parameterized.Parameters\n-    public static Collection createParameters() {\n+    public static Stream<Arguments> createParameters() {\n@@ -204,1 +208,2 @@\n-        List<Object[]> params = new ArrayList<>();\n+        Stream<Arguments> params = Stream.empty();\n+        \/\/List<Object[]> params = new ArrayList<>();\n@@ -219,4 +224,7 @@\n-            params.add(new Object[] {new Creator() {\n-                @Override public NGNode create() { return createGroup(createRectangle(0, 0, 100, 100)); }\n-                @Override public String toString() { return \"Group with one Rectangle\"; }\n-            }, polluter});\n+            params = appendArgument(params, Arguments.of(\n+                new Creator() {\n+                    @Override public NGNode create() { return createGroup(createRectangle(0, 0, 100, 100)); }\n+                    @Override public String toString() { return \"Group with one Rectangle\"; }\n+                },\n+                polluter\n+            ));\n@@ -235,4 +243,7 @@\n-            params.add(new Object[] {new Creator() {\n-                @Override public NGNode create() { return createRectangle(0, 0, 100, 100); }\n-                @Override public String toString() { return \"Rectangle\"; }\n-            }, polluter});\n+            params = appendArgument(params, Arguments.of(\n+                new Creator() {\n+                    @Override public NGNode create() { return createRectangle(0, 0, 100, 100); }\n+                    @Override public String toString() { return \"Rectangle\"; }\n+                },\n+                polluter\n+            ));\n@@ -254,4 +265,7 @@\n-            params.add(new Object[] {new Creator() {\n-                @Override public NGNode create() { return createCircle(50, 50, 50); }\n-                @Override public String toString() { return \"Circle\"; }\n-            }, polluter});\n+            params = appendArgument(params, Arguments.of(\n+                new Creator() {\n+                    @Override public NGNode create() { return createCircle(50, 50, 50); }\n+                    @Override public String toString() { return \"Circle\"; }\n+                },\n+                polluter\n+            ));\n@@ -263,12 +277,0 @@\n-    \/**\n-     * The test node creator. This is called from within the \"setUp\" method in each\n-     * subclass to create the nodes that are going to be tested.\n-     *\/\n-    protected Creator creator;\n-\n-    \/**\n-     * The polluter. Subclasses will use the polluter to make a node dirty at the\n-     * appropriate time in the test method.\n-     *\/\n-    protected Polluter polluter;\n-\n@@ -290,12 +292,0 @@\n-    \/**\n-     * Creates a new DirtyRegionTestBase. Each subclass must have an identical\n-     * constructor which simply passes the creator and polluter to this\n-     * constructor. These instances are passed to the constructor by JUnit,\n-     * so sub classes don't need to worry about creating these instances\n-     * (and in fact must not do so).\n-     *\/\n-    protected DirtyRegionTestBase(Creator creator, Polluter polluter) {\n-        this.creator = creator;\n-        this.polluter = polluter;\n-    }\n-\n@@ -343,1 +333,1 @@\n-        assertEquals(\"creator=\" + creator + \", polluter=\" + polluter, expected, dirtyRegion);\n+        assertEquals(expected, dirtyRegion);\n@@ -431,1 +421,0 @@\n-                \"creator=\" + creator + \", polluter=\" + polluter,\n@@ -446,1 +435,0 @@\n-                \"creator=\" + creator + \", polluter=\" + polluter,\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/DirtyRegionTestBase.java","additions":34,"deletions":46,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,2 +54,3 @@\n-import junit.framework.Assert;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -482,1 +483,1 @@\n-            Assert.assertEquals(expected.getDirtyRegion(i), computed.getDirtyRegion(i));\n+            assertEquals(expected.getDirtyRegion(i), computed.getDirtyRegion(i));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/EffectDirtyRegionTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -35,6 +35,4 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n@@ -53,1 +51,0 @@\n-@RunWith(Parameterized.class)\n@@ -61,8 +58,0 @@\n-    \/**\n-     * Creates a new instance of the GridDirtyRegionTest. Since this is a\n-     * parameterized test, we are passed the node creator and polluter.\n-     *\/\n-    public GridDirtyRegionTest(Creator creator, Polluter polluter) {\n-        super(creator, polluter);\n-    }\n-\n@@ -74,0 +63,4 @@\n+     *\n+     * NOTE: This was a parametrized test initializer with @BeforeEach flag, but\n+     * JUnit5 does not support parametrized classes yet. Make this a @BeforeEach\n+     * method once it does.\n@@ -75,1 +68,1 @@\n-    @Before public void setUp() {\n+    public void setUp(Creator creator) {\n@@ -96,1 +89,5 @@\n-    @Test public void sanityCheck() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void sanityCheck(Creator creator, Polluter polluter) {\n+        setUp(creator); \/\/ NOTE: JUnit5 does not (yet) support parametrized classes. Revert those changes once it does.\n+\n@@ -110,1 +107,5 @@\n-    @Test public void cleanNodesShouldNotContributeToDirtyRegion() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void cleanNodesShouldNotContributeToDirtyRegion(Creator creator, Polluter polluter) {\n+        setUp(creator); \/\/ NOTE: JUnit5 does not (yet) support parametrized classes. Revert those changes once it does.\n+\n@@ -115,1 +116,5 @@\n-    @Test public void cleanChildNodesOnADirtyParentShouldNotContributeToDirtyRegion() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void cleanChildNodesOnADirtyParentShouldNotContributeToDirtyRegion(Creator creator, Polluter polluter) {\n+        setUp(creator); \/\/ NOTE: JUnit5 does not (yet) support parametrized classes. Revert those changes once it does.\n+\n@@ -124,1 +129,5 @@\n-    @Test public void whenOnlyTheRootIsDirtyOnlyTheRootShouldBeAskedToAccumulateDirtyRegions() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void whenOnlyTheRootIsDirtyOnlyTheRootShouldBeAskedToAccumulateDirtyRegions(Creator creator, Polluter polluter) {\n+        setUp(creator); \/\/ NOTE: JUnit5 does not (yet) support parametrized classes. Revert those changes once it does.\n+\n@@ -129,1 +138,5 @@\n-    @Test public void cleanChildNodesOnACleanParentShouldNotContributeToDirtyRegion() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void cleanChildNodesOnACleanParentShouldNotContributeToDirtyRegion(Creator creator, Polluter polluter) {\n+        setUp(creator); \/\/ NOTE: JUnit5 does not (yet) support parametrized classes. Revert those changes once it does.\n+\n@@ -142,1 +155,5 @@\n-    @Test public void whenOnlyASingleChildIsDirtyThenParentAndAllChildrenAreAskedToAccumulateDirtyRegions() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void whenOnlyASingleChildIsDirtyThenParentAndAllChildrenAreAskedToAccumulateDirtyRegions(Creator creator, Polluter polluter) {\n+        setUp(creator); \/\/ NOTE: JUnit5 does not (yet) support parametrized classes. Revert those changes once it does.\n+\n@@ -153,1 +170,5 @@\n-    @Test public void whenOnlyASingleChildIsDirtyThenOnlyParentAndThatChildShouldComputeDirtyRegions() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void whenOnlyASingleChildIsDirtyThenOnlyParentAndThatChildShouldComputeDirtyRegions(Creator creator, Polluter polluter) {\n+        setUp(creator); \/\/ NOTE: JUnit5 does not (yet) support parametrized classes. Revert those changes once it does.\n+\n@@ -165,1 +186,5 @@\n-    @Test public void aDirtyChildNodeShouldFormTheDirtyRegionWhenItIsTheOnlyDirtyNode() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void aDirtyChildNodeShouldFormTheDirtyRegionWhenItIsTheOnlyDirtyNode(Creator creator, Polluter polluter) {\n+        setUp(creator); \/\/ NOTE: JUnit5 does not (yet) support parametrized classes. Revert those changes once it does.\n+\n@@ -170,1 +195,5 @@\n-    @Test public void theUnionOfTwoDirtyChildNodesDirtyRegionsShouldFormTheDirtyRegionWhenTheyAreTheOnlyDirtyNodes() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void theUnionOfTwoDirtyChildNodesDirtyRegionsShouldFormTheDirtyRegionWhenTheyAreTheOnlyDirtyNodes(Creator creator, Polluter polluter) {\n+        setUp(creator); \/\/ NOTE: JUnit5 does not (yet) support parametrized classes. Revert those changes once it does.\n+\n@@ -179,1 +208,5 @@\n-    @Test public void whenTheParentIsDirtyAndSomeChildrenAreDirtyTheParentBoundsShouldFormTheDirtyRegion() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void whenTheParentIsDirtyAndSomeChildrenAreDirtyTheParentBoundsShouldFormTheDirtyRegion(Creator creator, Polluter polluter) {\n+        setUp(creator); \/\/ NOTE: JUnit5 does not (yet) support parametrized classes. Revert those changes once it does.\n+\n@@ -190,1 +223,5 @@\n-    @Test public void anEffectShouldChangeTheTransformedBoundsOfAChild() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void anEffectShouldChangeTheTransformedBoundsOfAChild(Creator creator, Polluter polluter) {\n+        setUp(creator); \/\/ NOTE: JUnit5 does not (yet) support parametrized classes. Revert those changes once it does.\n+\n@@ -203,1 +240,5 @@\n-    @Test public void whenAnEffectIsSetTheChildBecomesDirtyAndTheDirtyRegionIncludesTheEffectBounds() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void whenAnEffectIsSetTheChildBecomesDirtyAndTheDirtyRegionIncludesTheEffectBounds(Creator creator, Polluter polluter) {\n+        setUp(creator); \/\/ NOTE: JUnit5 does not (yet) support parametrized classes. Revert those changes once it does.\n+\n@@ -217,1 +258,5 @@\n-    @Test public void whenAnEffectIsChangedOnTheChildTheDirtyRegionIncludesTheOldAndNewEffectBounds() {\n+    @ParameterizedTest\n+    @MethodSource(\"createParameters\")\n+    public void whenAnEffectIsChangedOnTheChildTheDirtyRegionIncludesTheOldAndNewEffectBounds(Creator creator, Polluter polluter) {\n+        setUp(creator); \/\/ NOTE: JUnit5 does not (yet) support parametrized classes. Revert those changes once it does.\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/GridDirtyRegionTest.java","additions":74,"deletions":29,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.junit.Test;\n@@ -31,2 +30,3 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/GrowableDataBufferTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,6 +32,7 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -45,1 +46,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/NGCircleTest.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,6 +32,7 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -45,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/NGEllipseTest.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,5 +32,6 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -46,1 +47,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/NGImageViewTest.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,9 +41,10 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -56,1 +57,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/NGNodeTest.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,5 +32,6 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -44,1 +45,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/NGRectangleTest.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,3 +40,4 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -47,1 +48,2 @@\n-    @Test public void setOpaqueInsetsInvalidatesOpaqueRegion() {\n+    @Test\n+    public void setOpaqueInsetsInvalidatesOpaqueRegion() {\n@@ -55,1 +57,2 @@\n-    @Test public void updateShapeInvalidatesOpaqueRegion() {\n+    @Test\n+    public void updateShapeInvalidatesOpaqueRegion() {\n@@ -65,1 +68,2 @@\n-    @Test public void updateShapeToSameInstanceInvalidatesOpaqueRegion() {\n+    @Test\n+    public void updateShapeToSameInstanceInvalidatesOpaqueRegion() {\n@@ -82,1 +86,2 @@\n-    @Test public void setSizeInvalidatesOpaqueRegion() {\n+    @Test\n+    public void setSizeInvalidatesOpaqueRegion() {\n@@ -96,1 +101,2 @@\n-    @Test public void updateBackgroundWithSameSizeButTransparentFillInvalidatesOpaqueInsets() {\n+    @Test\n+    public void updateBackgroundWithSameSizeButTransparentFillInvalidatesOpaqueInsets() {\n@@ -108,1 +114,2 @@\n-    @Test public void updateBackgroundWithDifferentSizeBackgroundInvalidatesOpaqueInsets() {\n+    @Test\n+    public void updateBackgroundWithDifferentSizeBackgroundInvalidatesOpaqueInsets() {\n@@ -120,1 +127,2 @@\n-    @Test public void updateBackgroundWithDifferentSizeBackgroundInvalidatesOpaqueInsets2() {\n+    @Test\n+    public void updateBackgroundWithDifferentSizeBackgroundInvalidatesOpaqueInsets2() {\n@@ -132,1 +140,2 @@\n-    @Test public void updateBackgroundWithDifferentSizeBackgroundInvalidatesOpaqueInsets3() {\n+    @Test\n+    public void updateBackgroundWithDifferentSizeBackgroundInvalidatesOpaqueInsets3() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/NGRegionTest.java","additions":21,"deletions":12,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,7 +38,8 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -51,1 +52,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/NGShapeTest.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,3 @@\n-import static org.junit.Assert.assertArrayEquals;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/NGTriangleMeshTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,4 +34,5 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/OcclusionCullingTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -38,5 +38,6 @@\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -68,1 +69,1 @@\n-    @Before\n+    @BeforeEach\n@@ -339,1 +340,1 @@\n-    @Ignore(\"JDK-8265510\")\n+    @Disabled(\"JDK-8265510\")\n@@ -348,1 +349,1 @@\n-    @Ignore(\"JDK-8265510\")\n+    @Disabled(\"JDK-8265510\")\n@@ -357,1 +358,1 @@\n-    @Ignore(\"JDK-8265510\")\n+    @Disabled(\"JDK-8265510\")\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/RenderRootTest.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n@@ -33,2 +30,0 @@\n-import org.junit.Test;\n-\n@@ -41,6 +36,6 @@\n-public abstract class CssMethodsTestBase {\n-    private final Configuration configuration;\n-\n-    public CssMethodsTestBase(final Configuration configuration) {\n-        this.configuration = configuration;\n-    }\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -48,0 +43,1 @@\n+public abstract class CssMethodsTestBase {\n@@ -49,2 +45,4 @@\n-    @Test \/\/ This _must_ be the first test!\n-    public void testCssDefaultSameAsPropertyDefault() {\n+    \/\/ This _must_ be the first test!\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testCssDefaultSameAsPropertyDefault(Configuration configuration) {\n@@ -54,2 +52,3 @@\n-    @Test\n-    public void testCSSPropertyAndCSSPropertyReferenceEachOther() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testCSSPropertyAndCSSPropertyReferenceEachOther(Configuration configuration) {\n@@ -59,2 +58,3 @@\n-    @Test\n-    public void testCssSettable() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testCssSettable(Configuration configuration) {\n@@ -64,2 +64,3 @@\n-    @Test\n-    public void testCssSet() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testCssSet(Configuration configuration) {\n@@ -69,1 +70,1 @@\n-    public static Object[] config(\n+    public static Arguments config(\n@@ -82,1 +83,1 @@\n-    public static Object[] config(\n+    public static Arguments config(\n@@ -97,1 +98,1 @@\n-    public static Object[] config(\n+    public static Arguments config(\n@@ -112,2 +113,2 @@\n-    public static Object[] config(final Configuration configuration) {\n-        return new Object[] { configuration };\n+    public static Arguments config(final Configuration configuration) {\n+        return Arguments.of( configuration );\n@@ -224,1 +225,1 @@\n-        public void cssSettableTest() throws Exception {\n+        public void cssSettableTest() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/test\/CssMethodsTestBase.java","additions":27,"deletions":26,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,7 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.fail;\n-\n-import org.junit.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -36,5 +37,0 @@\n-    private final Configuration configuration;\n-\n-    public ObjectMethodsTestBase(final Configuration configuration) {\n-        this.configuration = configuration;\n-    }\n@@ -42,2 +38,3 @@\n-    @Test\n-    public void testEquals() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testEquals(Configuration configuration) {\n@@ -47,2 +44,3 @@\n-    @Test\n-    public void testHashCode() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testHashCode(Configuration configuration) {\n@@ -52,2 +50,3 @@\n-    @Test\n-    public void testToString() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testToString(Configuration configuration) {\n@@ -57,1 +56,1 @@\n-    public static Object[] equalObjects(final Object... objects) {\n+    public static Arguments equalObjects(final Object... objects) {\n@@ -64,1 +63,1 @@\n-    public static Object[] differentObjects(\n+    public static Arguments differentObjects(\n@@ -72,1 +71,1 @@\n-    public static Object[] differentObjectsEasyHashcode(\n+    public static Arguments differentObjectsEasyHashcode(\n@@ -80,1 +79,1 @@\n-    public static Object[] differentObjectsMediumHashcode(\n+    public static Arguments differentObjectsMediumHashcode(\n@@ -88,2 +87,2 @@\n-    public static Object[] config(final Configuration configuration) {\n-        return new Object[] { configuration };\n+    public static Arguments config(final Configuration configuration) {\n+        return Arguments.of( configuration );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/test\/ObjectMethodsTestBase.java","additions":23,"deletions":24,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import static org.junit.Assert.assertTrue;\n-\n@@ -39,1 +37,3 @@\n-import org.junit.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -46,8 +46,3 @@\n-    private final Configuration configuration;\n-\n-    public OnInvalidateMethodsTestBase(final Configuration configuration) {\n-        this.configuration = configuration;\n-    }\n-\n-    @Test\n-    public void testFireOnInvalidate() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testFireOnInvalidate(Configuration configuration) throws Exception {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/test\/OnInvalidateMethodsTestBase.java","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,6 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -38,8 +42,3 @@\n-    private final Configuration configuration;\n-\n-    public PropertiesTestBase(final Configuration configuration) {\n-        this.configuration = configuration;\n-    }\n-\n-    @Test\n-    public void testGetBean() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testGetBean(Configuration configuration) {\n@@ -49,2 +48,3 @@\n-    @Test\n-    public void testGetName() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testGetName(Configuration configuration) {\n@@ -54,2 +54,3 @@\n-    @Test\n-    public void testBasicAccess() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testBasicAccess(Configuration configuration) {\n@@ -59,2 +60,3 @@\n-    @Test\n-    public void testBinding() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testBinding(Configuration configuration) {\n@@ -67,1 +69,1 @@\n-    public static Object[] config(final Object bean,\n+    public static Arguments config(final Object bean,\n@@ -80,1 +82,1 @@\n-    public static Object[] config(final Object bean,\n+    public static Arguments config(final Object bean,\n@@ -96,1 +98,1 @@\n-    public static Object[] config(final Object beanA,\n+    public static Arguments config(final Object beanA,\n@@ -116,1 +118,1 @@\n-    public static Object[] config(final Object beanA,\n+    public static Arguments config(final Object beanA,\n@@ -138,1 +140,1 @@\n-    public static Object[] config(final Object beanA,\n+    public static Arguments config(final Object beanA,\n@@ -158,2 +160,2 @@\n-    public static Object[] config(final Configuration configuration) {\n-        return new Object[] { configuration };\n+    public static Arguments config(final Configuration configuration) {\n+        return Arguments.of( configuration );\n@@ -264,2 +266,2 @@\n-            Assert.assertSame(beanA, propertyA.getBean());\n-            Assert.assertSame(beanB, propertyB.getBean());\n+            assertSame(beanA, propertyA.getBean());\n+            assertSame(beanB, propertyB.getBean());\n@@ -276,4 +278,4 @@\n-            Assert.assertEquals(propertyAReference.getPropertyName(),\n-                                propertyA.getName());\n-            Assert.assertEquals(propertyBReference.getPropertyName(),\n-                                propertyB.getName());\n+            assertEquals(propertyAReference.getPropertyName(),\n+                         propertyA.getName());\n+            assertEquals(propertyBReference.getPropertyName(),\n+                         propertyB.getName());\n@@ -432,1 +434,1 @@\n-                Assert.fail(\"Listener has not been called!\");\n+                fail(\"Listener has not been called!\");\n@@ -437,1 +439,1 @@\n-                Assert.fail(\"Listener called multiple times!\");\n+                fail(\"Listener called multiple times!\");\n@@ -443,1 +445,1 @@\n-                Assert.fail(\"Listener has been called!\");\n+                fail(\"Listener has been called!\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/test\/PropertiesTestBase.java","additions":35,"deletions":33,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -44,4 +44,4 @@\n-        assertEquals(\"minX\", expected.getMinX(), actual.getMinX(), 1);\n-        assertEquals(\"minY\", expected.getMinY(), actual.getMinY(), 1);\n-        assertEquals(\"maxX\", expected.getMaxX(), actual.getMaxX(), 1);\n-        assertEquals(\"maxY\", expected.getMaxY(), actual.getMaxY(), 1);\n+        assertEquals(expected.getMinX(), actual.getMinX(), 1, \"minX\");\n+        assertEquals(expected.getMinY(), actual.getMinY(), 1, \"minY\");\n+        assertEquals(expected.getMaxX(), actual.getMaxX(), 1, \"maxX\");\n+        assertEquals(expected.getMaxY(), actual.getMaxY(), 1, \"maxY\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/test\/TestHelper.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n@@ -43,0 +41,3 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n@@ -136,12 +137,12 @@\n-        assertEquals(message, reference.getMxx(), matrix.getMxx(), 0.00001);\n-        assertEquals(message, reference.getMxy(), matrix.getMxy(), 0.00001);\n-        assertEquals(message, reference.getMxz(), matrix.getMxz(), 0.00001);\n-        assertEquals(message, reference.getTx(), matrix.getTx(), 0.00001);\n-        assertEquals(message, reference.getMyx(), matrix.getMyx(), 0.00001);\n-        assertEquals(message, reference.getMyy(), matrix.getMyy(), 0.00001);\n-        assertEquals(message, reference.getMyz(), matrix.getMyz(), 0.00001);\n-        assertEquals(message, reference.getTy(), matrix.getTy(), 0.00001);\n-        assertEquals(message, reference.getMzx(), matrix.getMzx(), 0.00001);\n-        assertEquals(message, reference.getMzy(), matrix.getMzy(), 0.00001);\n-        assertEquals(message, reference.getMzz(), matrix.getMzz(), 0.00001);\n-        assertEquals(message, reference.getTz(), matrix.getTz(), 0.00001);\n+        assertEquals(reference.getMxx(), matrix.getMxx(), 0.00001, message);\n+        assertEquals(reference.getMxy(), matrix.getMxy(), 0.00001, message);\n+        assertEquals(reference.getMxz(), matrix.getMxz(), 0.00001, message);\n+        assertEquals(reference.getTx(), matrix.getTx(), 0.00001, message);\n+        assertEquals(reference.getMyx(), matrix.getMyx(), 0.00001, message);\n+        assertEquals(reference.getMyy(), matrix.getMyy(), 0.00001, message);\n+        assertEquals(reference.getMyz(), matrix.getMyz(), 0.00001, message);\n+        assertEquals(reference.getTy(), matrix.getTy(), 0.00001, message);\n+        assertEquals(reference.getMzx(), matrix.getMzx(), 0.00001, message);\n+        assertEquals(reference.getMzy(), matrix.getMzy(), 0.00001, message);\n+        assertEquals(reference.getMzz(), matrix.getMzz(), 0.00001, message);\n+        assertEquals(reference.getTz(), matrix.getTz(), 0.00001, message);\n@@ -636,1 +637,1 @@\n-        assertEquals(message, expectedState3D.getValue(), state3d);\n+        assertEquals(expectedState3D.getValue(), state3d, message);\n@@ -638,1 +639,1 @@\n-            assertEquals(message, TransformHelper.getExpectedState2D(t).getValue(), state2d);\n+            assertEquals(TransformHelper.getExpectedState2D(t).getValue(), state2d, message);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/test\/TransformHelper.java","additions":18,"deletions":17,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -45,2 +45,2 @@\n-        assertTrue(\"expected=\" + expected + \" actual=\" + actual,\n-                   equals(expected, actual));\n+        assertTrue(equals(expected, actual),\n+            \"expected=\" + expected + \" actual=\" + actual);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/test\/ValueComparator.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,3 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -52,1 +53,1 @@\n-        Assert.assertEquals(16, image.getWidth());\n+        assertEquals(16, image.getWidth());\n@@ -54,1 +55,1 @@\n-        Assert.assertEquals(48, image.getWidth());\n+        assertEquals(48, image.getWidth());\n@@ -58,1 +59,1 @@\n-        Assert.assertEquals(32, image.getWidth());\n+        assertEquals(32, image.getWidth());\n@@ -62,1 +63,1 @@\n-        Assert.assertEquals(32, image.getWidth());\n+        assertEquals(32, image.getWidth());\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/tk\/quantum\/WindowStageTest.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -42,1 +41,3 @@\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -50,1 +51,1 @@\n-        assertEquals(\"Array content: \" + Arrays.toString(split),2, split.length);\n+        assertEquals(2, split.length, \"Array content: \" + Arrays.toString(split));\n@@ -57,1 +58,1 @@\n-        assertEquals(\"Array content: \" + Arrays.toString(split),3, split.length);\n+        assertEquals(3, split.length, \"Array content: \" + Arrays.toString(split));\n@@ -65,1 +66,1 @@\n-        assertEquals(\"Array content: \" + Arrays.toString(split),0, split.length);\n+        assertEquals(0, split.length, \"Array content: \" + Arrays.toString(split));\n@@ -70,1 +71,1 @@\n-        assertEquals(\"Array content: \" + Arrays.toString(split),0, split.length);\n+        assertEquals(0, split.length, \"Array content: \" + Arrays.toString(split));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/util\/UtilsTest.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -35,7 +34,0 @@\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n@@ -43,5 +35,6 @@\n-@RunWith(Parameterized.class)\n-public final class Utils_getScreenForPoint_Test {\n-    private final double x;\n-    private final double y;\n-    private final int expectedScreenIndex;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -49,19 +42,1 @@\n-    @Parameters\n-    public static Collection data() {\n-        return Arrays.asList(\n-                new Object[] {\n-                    config(100, 100, 0),\n-                    config(2000, 200, 1),\n-                    config(1920, 0, 0),\n-                    config(1920, 200, 1),\n-                    config(1920, 1100, 0),\n-                    config(2020, 50, 0),\n-                    config(2020, 70, 1),\n-                    config(1970, -50, 0),\n-                    config(2170, -50, 1),\n-                    config(2020, 1150, 1),\n-                    config(2020, 1170, 0),\n-                    config(1970, 1250, 0),\n-                    config(2170, 1250, 1)\n-                });\n-    }\n+public final class Utils_getScreenForPoint_Test {\n@@ -69,5 +44,17 @@\n-    public Utils_getScreenForPoint_Test(\n-            final double x, final double y, final int expectedScreenIndex) {\n-        this.x = x;\n-        this.y = y;\n-        this.expectedScreenIndex = expectedScreenIndex;\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            \/\/ x, y, expectedScreenIndex\n+            Arguments.of(100, 100, 0),\n+            Arguments.of(2000, 200, 1),\n+            Arguments.of(1920, 0, 0),\n+            Arguments.of(1920, 200, 1),\n+            Arguments.of(1920, 1100, 0),\n+            Arguments.of(2020, 50, 0),\n+            Arguments.of(2020, 70, 1),\n+            Arguments.of(1970, -50, 0),\n+            Arguments.of(2170, -50, 1),\n+            Arguments.of(2020, 1150, 1),\n+            Arguments.of(2020, 1170, 0),\n+            Arguments.of(1970, 1250, 0),\n+            Arguments.of(2170, 1250, 1)\n+        );\n@@ -76,1 +63,1 @@\n-    @Before\n+    @BeforeEach\n@@ -84,1 +71,1 @@\n-    @After\n+    @AfterEach\n@@ -89,2 +76,3 @@\n-    @Test\n-    public void test() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void test(double x, double y, int expectedScreenIndex) {\n@@ -92,7 +80,2 @@\n-        Assert.assertEquals(expectedScreenIndex,\n-                            Screen.getScreens().indexOf(selectedScreen));\n-    }\n-\n-    private static Object[] config(final double x, final double y,\n-                                   final int expectedScreenIndex) {\n-        return new Object[] { x, y, expectedScreenIndex };\n+        assertEquals(expectedScreenIndex,\n+                     Screen.getScreens().indexOf(selectedScreen));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/util\/Utils_getScreenForPoint_Test.java","additions":33,"deletions":50,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -36,7 +35,0 @@\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n@@ -44,4 +36,6 @@\n-@RunWith(Parameterized.class)\n-public final class Utils_getScreenForRectangle_Test {\n-    private final Rectangle2D rectangle;\n-    private final int expectedScreenIndex;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -49,19 +43,1 @@\n-    @Parameters\n-    public static Collection data() {\n-        return Arrays.asList(\n-                new Object[] {\n-                    config(100, 100, 100, 100, 0),\n-                    config(2020, 200, 100, 100, 1),\n-                    config(1920 - 75, 200, 100, 100, 0),\n-                    config(1920 - 25, 200, 100, 100, 1),\n-                    config(0, 0, 3360, 1200, 0),\n-                    config(2020, 50, 100, 100, 1),\n-                    config(2020, 70, 100, 100, 1),\n-                    config(1970, -50, 100, 100, 0),\n-                    config(2170, -50, 100, 100, 1),\n-                    config(2020, 1150, 100, 100, 1),\n-                    config(2020, 1170, 100, 100, 0),\n-                    config(1970, 1250, 100, 100, 0),\n-                    config(2170, 1250, 100, 100, 1)\n-                });\n-    }\n+public final class Utils_getScreenForRectangle_Test {\n@@ -69,4 +45,17 @@\n-    public Utils_getScreenForRectangle_Test(\n-            final Rectangle2D rectangle, final int expectedScreenIndex) {\n-        this.rectangle = rectangle;\n-        this.expectedScreenIndex = expectedScreenIndex;\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            \/\/ rectangle, expectedScreenIndex\n+            Arguments.of(new Rectangle2D(100, 100, 100, 100), 0),\n+            Arguments.of(new Rectangle2D(2020, 200, 100, 100), 1),\n+            Arguments.of(new Rectangle2D(1920 - 75, 200, 100, 100), 0),\n+            Arguments.of(new Rectangle2D(1920 - 25, 200, 100, 100), 1),\n+            Arguments.of(new Rectangle2D(0, 0, 3360, 1200), 0),\n+            Arguments.of(new Rectangle2D(2020, 50, 100, 100), 1),\n+            Arguments.of(new Rectangle2D(2020, 70, 100, 100), 1),\n+            Arguments.of(new Rectangle2D(1970, -50, 100, 100), 0),\n+            Arguments.of(new Rectangle2D(2170, -50, 100, 100), 1),\n+            Arguments.of(new Rectangle2D(2020, 1150, 100, 100), 1),\n+            Arguments.of(new Rectangle2D(2020, 1170, 100, 100), 0),\n+            Arguments.of(new Rectangle2D(1970, 1250, 100, 100), 0),\n+            Arguments.of(new Rectangle2D(2170, 1250, 100, 100), 1)\n+        );\n@@ -75,1 +64,1 @@\n-    @Before\n+    @BeforeEach\n@@ -83,1 +72,1 @@\n-    @After\n+    @AfterEach\n@@ -88,2 +77,3 @@\n-    @Test\n-    public void test() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void test(Rectangle2D rectangle, int expectedScreenIndex) {\n@@ -91,11 +81,2 @@\n-        Assert.assertEquals(expectedScreenIndex,\n-                            Screen.getScreens().indexOf(selectedScreen));\n-    }\n-\n-    private static Object[] config(final double x, final double y,\n-                                   final double width, final double height,\n-                                   final int expectedScreenIndex) {\n-        return new Object[] {\n-            new Rectangle2D(x, y, width, height),\n-            expectedScreenIndex\n-        };\n+        assertEquals(expectedScreenIndex,\n+                     Screen.getScreens().indexOf(selectedScreen));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/util\/Utils_getScreenForRectangle_Test.java","additions":33,"deletions":52,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,3 +30,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n@@ -36,1 +33,4 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/util\/WeakReferenceQueueTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,3 +32,4 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n@@ -41,1 +42,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/prism\/StrokedShapeTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n@@ -35,1 +32,4 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/scenario\/SettingsTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -37,1 +35,5 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -44,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/scenario\/animation\/AbstractPrimaryTimerTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import static org.junit.Assert.*;\n@@ -34,2 +33,5 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -44,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/scenario\/animation\/NumberTangentInterpolatorTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import static org.junit.Assert.*;\n@@ -31,2 +30,5 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -38,1 +40,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/scenario\/animation\/SplineInterpolatorTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -42,1 +40,5 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -51,1 +53,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/scenario\/animation\/shared\/FiniteClipEnvelopeTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,4 +30,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n@@ -40,1 +36,5 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -541,1 +541,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (52 == v1.get()) || (-20 == v1.get()));\n+        assertTrue((52 == v1.get()) || (-20 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -544,1 +544,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (60 == v1.get()) || (-60 == v1.get()));\n+        assertTrue((60 == v1.get()) || (-60 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -556,1 +556,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (33 == v1.get()) || (9 == v1.get()));\n+        assertTrue((33 == v1.get()) || (9 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -559,1 +559,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (40 == v1.get()) || (-40 == v1.get()));\n+        assertTrue((40 == v1.get()) || (-40 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -562,1 +562,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (52 == v1.get()) || (20 == v1.get()));\n+        assertTrue((52 == v1.get()) || (20 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -574,1 +574,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (30 == v1.get()) || (-30 == v1.get()));\n+        assertTrue((30 == v1.get()) || (-30 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -577,1 +577,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (33 == v1.get()) || (-9 == v1.get()));\n+        assertTrue((33 == v1.get()) || (-9 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -595,1 +595,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (30 == v1.get()) || (-30 == v1.get()));\n+        assertTrue((30 == v1.get()) || (-30 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -598,1 +598,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (33 == v1.get()) || (9 == v1.get()) || (-9 == v1.get()) || (-33 == v1.get()));\n+        assertTrue((33 == v1.get()) || (9 == v1.get()) || (-9 == v1.get()) || (-33 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -601,1 +601,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (40 == v1.get()) || (-40 == v1.get()));\n+        assertTrue((40 == v1.get()) || (-40 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -604,1 +604,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (52 == v1.get()) || (20 == v1.get()));\n+        assertTrue((52 == v1.get()) || (20 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -616,1 +616,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (30 == v1.get()) || (-30 == v1.get()));\n+        assertTrue((30 == v1.get()) || (-30 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -619,1 +619,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (33 == v1.get()) || (-9 == v1.get()));\n+        assertTrue((33 == v1.get()) || (-9 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -625,1 +625,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (52 == v1.get()) || (-20 == v1.get()));\n+        assertTrue((52 == v1.get()) || (-20 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -628,1 +628,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (60 == v1.get()) || (-60 == v1.get()));\n+        assertTrue((60 == v1.get()) || (-60 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -640,1 +640,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (33 == v1.get()) || (9 == v1.get()));\n+        assertTrue((33 == v1.get()) || (9 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -643,1 +643,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (40 == v1.get()) || (-40 == v1.get()));\n+        assertTrue((40 == v1.get()) || (-40 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -646,1 +646,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (52 == v1.get()) || (-20 == v1.get()) || (20 == v1.get()) || (-52 == v1.get()));\n+        assertTrue((52 == v1.get()) || (-20 == v1.get()) || (20 == v1.get()) || (-52 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -649,1 +649,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (60 == v1.get()) || (-60 == v1.get()));\n+        assertTrue((60 == v1.get()) || (-60 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -658,1 +658,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (30 == v1.get()) || (-30 == v1.get()));\n+        assertTrue((30 == v1.get()) || (-30 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -661,1 +661,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (33 == v1.get()) || (9 == v1.get()) || (-9 == v1.get()) || (-33 == v1.get()));\n+        assertTrue((33 == v1.get()) || (9 == v1.get()) || (-9 == v1.get()) || (-33 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -664,1 +664,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (40 == v1.get()) || (-40 == v1.get()));\n+        assertTrue((40 == v1.get()) || (-40 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -667,1 +667,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (52 == v1.get()) || (-20 == v1.get()) || (20 == v1.get()) || (-52 == v1.get()));\n+        assertTrue((52 == v1.get()) || (-20 == v1.get()) || (20 == v1.get()) || (-52 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -670,1 +670,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (60 == v1.get()) || (-60 == v1.get()));\n+        assertTrue((60 == v1.get()) || (-60 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -688,1 +688,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (52 == v1.get()) || (-20 == v1.get()));\n+        assertTrue((52 == v1.get()) || (-20 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -691,1 +691,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (60 == v1.get()) || (-60 == v1.get()));\n+        assertTrue((60 == v1.get()) || (-60 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -703,1 +703,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (16 == v1.get()) || (-16 == v1.get()));\n+        assertTrue((16 == v1.get()) || (-16 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -706,1 +706,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (40 == v1.get()) || (-40 == v1.get()));\n+        assertTrue((40 == v1.get()) || (-40 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -709,1 +709,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (52 == v1.get()) || (20 == v1.get()));\n+        assertTrue((52 == v1.get()) || (20 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -724,1 +724,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (16 == v1.get()) || (-16 == v1.get()));\n+        assertTrue((16 == v1.get()) || (-16 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -727,1 +727,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (40 == v1.get()) || (-40 == v1.get()));\n+        assertTrue((40 == v1.get()) || (-40 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -730,1 +730,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (52 == v1.get()) || (-20 == v1.get()) || (20 == v1.get()) || (-52 == v1.get()));\n+        assertTrue((52 == v1.get()) || (-20 == v1.get()) || (20 == v1.get()) || (-52 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -733,1 +733,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (60 == v1.get()) || (-60 == v1.get()));\n+        assertTrue((60 == v1.get()) || (-60 == v1.get()), \"v1.get(): \" + v1.get());\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/scenario\/animation\/shared\/GeneralClipInterpolatorTest.java","additions":39,"deletions":39,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -42,1 +40,5 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -51,1 +53,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/scenario\/animation\/shared\/InfiniteClipEnvelopeTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,4 +30,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n@@ -40,1 +36,5 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -373,1 +373,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (33 == v1.get()) || (9 == v1.get()));\n+        assertTrue((33 == v1.get()) || (9 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -376,1 +376,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (40 == v1.get()) || (-40 == v1.get()));\n+        assertTrue((40 == v1.get()) || (-40 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -385,1 +385,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (30 == v1.get()) || (-30 == v1.get()));\n+        assertTrue((30 == v1.get()) || (-30 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -388,1 +388,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (33 == v1.get()) || (-9 == v1.get()));\n+        assertTrue((33 == v1.get()) || (-9 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -400,1 +400,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (30 == v1.get()) || (-30 == v1.get()));\n+        assertTrue((30 == v1.get()) || (-30 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -403,1 +403,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (33 == v1.get()) || (9 == v1.get()) || (-9 == v1.get()) || (-33 == v1.get()));\n+        assertTrue((33 == v1.get()) || (9 == v1.get()) || (-9 == v1.get()) || (-33 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -406,1 +406,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (40 == v1.get()) || (-40 == v1.get()));\n+        assertTrue((40 == v1.get()) || (-40 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -418,1 +418,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (16 == v1.get()) || (-16 == v1.get()));\n+        assertTrue((16 == v1.get()) || (-16 == v1.get()), \"v1.get(): \" + v1.get());\n@@ -421,1 +421,1 @@\n-        assertTrue(\"v1.get(): \" + v1.get(), (40 == v1.get()) || (-40 == v1.get()));\n+        assertTrue((40 == v1.get()) || (-40 == v1.get()), \"v1.get(): \" + v1.get());\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/scenario\/animation\/shared\/SimpleClipInterpolatorTest.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -39,1 +37,6 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -49,1 +52,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/scenario\/animation\/shared\/SingleLoopClipEnvelopeTest.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n@@ -41,2 +38,5 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -61,1 +61,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/scenario\/animation\/shared\/TimelineClipCoreTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.junit.Test;\n@@ -37,1 +36,2 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/scenario\/effect\/rt_5239\/RT_5239Test.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/AnimationMock.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-\n@@ -33,3 +29,7 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -46,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n@@ -52,1 +52,1 @@\n-    @After\n+    @AfterEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/AnimationPulseReceiverTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -37,1 +35,3 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -47,1 +47,1 @@\n-    @Before\n+    @BeforeEach\n@@ -391,2 +391,2 @@\n-        assertEquals(\"A pulse to 10 at rate 0.2 with deltaTicks = 0 should reach 10 * 0.2 = 2\", 2, timeBefore);\n-        assertEquals(\"A pulse to 5 at rate -0.2 with deltaTicks = 4 should reach 4 + 5 * (-0.2) = 3\", 3, timeAfter);\n+        assertEquals(2, timeBefore, \"A pulse to 10 at rate 0.2 with deltaTicks = 0 should reach 10 * 0.2 = 2\");\n+        assertEquals(3, timeAfter, \"A pulse to 5 at rate -0.2 with deltaTicks = 4 should reach 4 + 5 * (-0.2) = 3\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/AnimationSetRateTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,6 +38,8 @@\n-import org.junit.After;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import org.junit.Before;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -62,1 +64,1 @@\n-    @Before\n+    @BeforeEach\n@@ -71,1 +73,1 @@\n-    @After\n+    @AfterEach\n@@ -247,1 +249,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -249,1 +251,3 @@\n-        animation.jumpTo((Duration)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            animation.jumpTo((Duration)null);\n+        });\n@@ -252,1 +256,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -254,1 +258,3 @@\n-        animation.jumpTo(Duration.UNKNOWN);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            animation.jumpTo(Duration.UNKNOWN);\n+        });\n@@ -321,1 +327,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -323,1 +329,3 @@\n-        animation.jumpTo((String)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            animation.jumpTo((String)null);\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/AnimationTest.java","additions":23,"deletions":15,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,4 +33,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n@@ -41,2 +37,6 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -55,1 +55,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/FadeTransitionTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,4 +33,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n@@ -46,2 +42,6 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -60,1 +60,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/FillTransitionTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -37,1 +36,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/InterpolatorTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,4 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-\n@@ -46,1 +42,5 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -133,1 +133,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -135,1 +135,3 @@\n-        new KeyFrame(null, NAME, ACTION, TWO_KEYVALUES_COL);\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyFrame(null, NAME, ACTION, TWO_KEYVALUES_COL);\n+        });\n@@ -138,1 +140,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -140,1 +142,3 @@\n-        new KeyFrame(Duration.millis(-1), NAME, ACTION, TWO_KEYVALUES_COL);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new KeyFrame(Duration.millis(-1), NAME, ACTION, TWO_KEYVALUES_COL);\n+        });\n@@ -143,1 +147,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -145,1 +149,3 @@\n-        new KeyFrame(Duration.UNKNOWN, NAME, ACTION, TWO_KEYVALUES_COL);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new KeyFrame(Duration.UNKNOWN, NAME, ACTION, TWO_KEYVALUES_COL);\n+        });\n@@ -215,1 +221,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -217,1 +223,3 @@\n-        new KeyFrame(null, NAME, ACTION, TWO_KEYVALUES);\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyFrame(null, NAME, ACTION, TWO_KEYVALUES);\n+        });\n@@ -220,1 +228,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -222,1 +230,3 @@\n-        new KeyFrame(Duration.millis(-1), NAME, ACTION, TWO_KEYVALUES);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new KeyFrame(Duration.millis(-1), NAME, ACTION, TWO_KEYVALUES);\n+        });\n@@ -225,1 +235,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -227,1 +237,3 @@\n-        new KeyFrame(Duration.UNKNOWN, NAME, ACTION, TWO_KEYVALUES);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new KeyFrame(Duration.UNKNOWN, NAME, ACTION, TWO_KEYVALUES);\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/KeyFrameTest.java","additions":30,"deletions":18,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -51,1 +50,3 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -80,1 +81,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -82,1 +83,3 @@\n-        new KeyValue(null, true, Interpolator.EASE_BOTH);\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyValue(null, true, Interpolator.EASE_BOTH);\n+        });\n@@ -85,1 +88,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -87,2 +90,4 @@\n-        final BooleanProperty v = new SimpleBooleanProperty();\n-        new KeyValue(v, true, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final BooleanProperty v = new SimpleBooleanProperty();\n+            new KeyValue(v, true, null);\n+        });\n@@ -100,1 +105,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -102,1 +107,3 @@\n-        new KeyValue(null, true);\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyValue(null, true);\n+        });\n@@ -115,1 +122,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -117,1 +124,3 @@\n-        new KeyValue(null, Math.PI, Interpolator.EASE_BOTH);\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyValue(null, Math.PI, Interpolator.EASE_BOTH);\n+        });\n@@ -120,1 +129,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -122,2 +131,4 @@\n-        final DoubleProperty v = new SimpleDoubleProperty();\n-        new KeyValue(v, Math.PI, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final DoubleProperty v = new SimpleDoubleProperty();\n+            new KeyValue(v, Math.PI, null);\n+        });\n@@ -136,1 +147,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -138,1 +149,3 @@\n-        new KeyValue(null, Math.E);\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyValue(null, Math.E);\n+        });\n@@ -151,1 +164,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -153,1 +166,3 @@\n-        new KeyValue((WritableFloatValue)null, (float)Math.E, Interpolator.EASE_BOTH);\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyValue((WritableFloatValue)null, (float)Math.E, Interpolator.EASE_BOTH);\n+        });\n@@ -156,1 +171,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -158,2 +173,4 @@\n-        final FloatProperty v = new SimpleFloatProperty();\n-        new KeyValue(v, (float)Math.E, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final FloatProperty v = new SimpleFloatProperty();\n+            new KeyValue(v, (float)Math.E, null);\n+        });\n@@ -172,1 +189,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -174,1 +191,3 @@\n-        new KeyValue((WritableFloatValue)null, (float)Math.PI);\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyValue((WritableFloatValue)null, (float)Math.PI);\n+        });\n@@ -186,1 +205,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -188,1 +207,3 @@\n-        new KeyValue((WritableIntegerValue)null, 1, Interpolator.EASE_BOTH);\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyValue((WritableIntegerValue)null, 1, Interpolator.EASE_BOTH);\n+        });\n@@ -191,1 +212,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -193,2 +214,4 @@\n-        final IntegerProperty v = new SimpleIntegerProperty();\n-        new KeyValue(v, 1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final IntegerProperty v = new SimpleIntegerProperty();\n+            new KeyValue(v, 1, null);\n+        });\n@@ -206,1 +229,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -208,1 +231,3 @@\n-        new KeyValue((WritableIntegerValue)null, Integer.MIN_VALUE);\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyValue((WritableIntegerValue)null, Integer.MIN_VALUE);\n+        });\n@@ -220,1 +245,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -222,1 +247,3 @@\n-        new KeyValue((WritableLongValue)null, 1L, Interpolator.EASE_BOTH);\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyValue((WritableLongValue)null, 1L, Interpolator.EASE_BOTH);\n+        });\n@@ -225,1 +252,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -227,2 +254,4 @@\n-        final LongProperty v = new SimpleLongProperty();\n-        new KeyValue(v, 1L, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final LongProperty v = new SimpleLongProperty();\n+            new KeyValue(v, 1L, null);\n+        });\n@@ -240,1 +269,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -242,1 +271,3 @@\n-        new KeyValue((WritableLongValue)null, Long.MIN_VALUE);\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyValue((WritableLongValue)null, Long.MIN_VALUE);\n+        });\n@@ -254,1 +285,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -256,1 +287,3 @@\n-        new KeyValue(null, \"Hello World\", Interpolator.EASE_BOTH);\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyValue(null, \"Hello World\", Interpolator.EASE_BOTH);\n+        });\n@@ -259,1 +292,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -261,2 +294,4 @@\n-        final StringProperty v = new SimpleStringProperty();\n-        new KeyValue(v, \"Hello World\", null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final StringProperty v = new SimpleStringProperty();\n+            new KeyValue(v, \"Hello World\", null);\n+        });\n@@ -274,1 +309,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -276,1 +311,3 @@\n-        new KeyValue(null, \"Goodbye World\");\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyValue(null, \"Goodbye World\");\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/KeyValueTest.java","additions":82,"deletions":45,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,3 +38,4 @@\n-import static org.junit.Assert.assertEquals;\n-import org.junit.Before;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -57,1 +58,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/ParallelTransitionPlayTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-\n@@ -41,2 +37,5 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -57,1 +56,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/ParallelTransitionTest.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n@@ -38,2 +36,4 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n@@ -51,1 +51,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/PathTransitionTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n@@ -33,1 +31,3 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/PauseTransitionTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,4 +33,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n@@ -42,2 +38,6 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -56,1 +56,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/RotateTransitionTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,4 +33,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n@@ -41,2 +37,6 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -55,1 +55,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/ScaleTransitionTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,3 +38,4 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -56,1 +57,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/SequentialTransitionPlayTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-\n@@ -41,2 +37,5 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -58,1 +57,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/SequentialTransitionTest.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,4 +33,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n@@ -46,2 +42,6 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -60,1 +60,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/StrokeTransitionTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -42,1 +40,3 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -54,1 +54,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/TimelinePlayTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-\n@@ -40,2 +37,4 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -57,1 +56,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/TimelineTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-\n@@ -40,2 +36,5 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -51,1 +50,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/TransitionTest.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,4 +33,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n@@ -41,2 +37,6 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -55,1 +55,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/TranslateTransitionTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,5 +40,6 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -82,1 +83,1 @@\n-    @Override protected TestServiceFactory setupServiceFactory() {\n+    private TestServiceFactory setupServiceFactory() {\n@@ -94,2 +95,2 @@\n-    @Override public void setup() {\n-        super.setup();\n+    @Override public void setup(TestServiceFactory factory) {\n+        super.setup(factory);\n@@ -106,1 +107,3 @@\n-    @Test public void setCumulativePeriod_MaxIsInfinity_TwoSeconds() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsInfinity_TwoSeconds() {\n+        setup(setupServiceFactory());\n@@ -111,1 +114,3 @@\n-    @Test public void setCumulativePeriod_MaxIsInfinity_Negative() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsInfinity_Negative() {\n+        setup(setupServiceFactory());\n@@ -116,1 +121,3 @@\n-    @Test public void setCumulativePeriod_MaxIsInfinity_NegativeInfinity() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsInfinity_NegativeInfinity() {\n+        setup(setupServiceFactory());\n@@ -121,1 +128,3 @@\n-    @Test public void setCumulativePeriod_MaxIsInfinity_NaN() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsInfinity_NaN() {\n+        setup(setupServiceFactory());\n@@ -126,1 +135,3 @@\n-    @Test public void setCumulativePeriod_MaxIsInfinity_PositiveInfinity() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsInfinity_PositiveInfinity() {\n+        setup(setupServiceFactory());\n@@ -131,1 +142,3 @@\n-    @Test public void setCumulativePeriod_MaxIsInfinity_MAX_VALUE() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsInfinity_MAX_VALUE() {\n+        setup(setupServiceFactory());\n@@ -136,1 +149,3 @@\n-    @Test public void setCumulativePeriod_MaxIsNaN_TwoSeconds() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsNaN_TwoSeconds() {\n+        setup(setupServiceFactory());\n@@ -142,1 +157,3 @@\n-    @Test public void setCumulativePeriod_MaxIsNaN_Negative() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsNaN_Negative() {\n+        setup(setupServiceFactory());\n@@ -148,1 +165,3 @@\n-    @Test public void setCumulativePeriod_MaxIsNaN_NegativeInfinity() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsNaN_NegativeInfinity() {\n+        setup(setupServiceFactory());\n@@ -154,1 +173,3 @@\n-    @Test public void setCumulativePeriod_MaxIsNaN_NaN() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsNaN_NaN() {\n+        setup(setupServiceFactory());\n@@ -160,1 +181,3 @@\n-    @Test public void setCumulativePeriod_MaxIsNaN_PositiveInfinity() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsNaN_PositiveInfinity() {\n+        setup(setupServiceFactory());\n@@ -166,1 +189,3 @@\n-    @Test public void setCumulativePeriod_MaxIsNaN_MAX_VALUE() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsNaN_MAX_VALUE() {\n+        setup(setupServiceFactory());\n@@ -172,1 +197,3 @@\n-    @Test public void setCumulativePeriod_MaxIsNull_TwoSeconds() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsNull_TwoSeconds() {\n+        setup(setupServiceFactory());\n@@ -178,1 +205,3 @@\n-    @Test public void setCumulativePeriod_MaxIsNull_Negative() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsNull_Negative() {\n+        setup(setupServiceFactory());\n@@ -184,1 +213,3 @@\n-    @Test public void setCumulativePeriod_MaxIsNull_NegativeInfinity() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsNull_NegativeInfinity() {\n+        setup(setupServiceFactory());\n@@ -190,1 +221,3 @@\n-    @Test public void setCumulativePeriod_MaxIsNull_NaN() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsNull_NaN() {\n+        setup(setupServiceFactory());\n@@ -196,1 +229,3 @@\n-    @Test public void setCumulativePeriod_MaxIsNull_PositiveInfinity() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsNull_PositiveInfinity() {\n+        setup(setupServiceFactory());\n@@ -202,1 +237,3 @@\n-    @Test public void setCumulativePeriod_MaxIsNull_MAX_VALUE() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsNull_MAX_VALUE() {\n+        setup(setupServiceFactory());\n@@ -208,1 +245,3 @@\n-    @Test public void setCumulativePeriod_MaxIs10_TwoSeconds() {\n+    @Test\n+    public void setCumulativePeriod_MaxIs10_TwoSeconds() {\n+        setup(setupServiceFactory());\n@@ -214,1 +253,3 @@\n-    @Test public void setCumulativePeriod_MaxIs10_TenSeconds() {\n+    @Test\n+    public void setCumulativePeriod_MaxIs10_TenSeconds() {\n+        setup(setupServiceFactory());\n@@ -220,1 +261,3 @@\n-    @Test public void setCumulativePeriod_MaxIs10_TwelveSeconds() {\n+    @Test\n+    public void setCumulativePeriod_MaxIs10_TwelveSeconds() {\n+        setup(setupServiceFactory());\n@@ -226,1 +269,3 @@\n-    @Test public void setCumulativePeriod_MaxIs10_Negative() {\n+    @Test\n+    public void setCumulativePeriod_MaxIs10_Negative() {\n+        setup(setupServiceFactory());\n@@ -232,1 +277,3 @@\n-    @Test public void setCumulativePeriod_MaxIs10_NegativeInfinity() {\n+    @Test\n+    public void setCumulativePeriod_MaxIs10_NegativeInfinity() {\n+        setup(setupServiceFactory());\n@@ -238,1 +285,3 @@\n-    @Test public void setCumulativePeriod_MaxIs10_NaN() {\n+    @Test\n+    public void setCumulativePeriod_MaxIs10_NaN() {\n+        setup(setupServiceFactory());\n@@ -244,1 +293,3 @@\n-    @Test public void setCumulativePeriod_MaxIs10_PositiveInfinity() {\n+    @Test\n+    public void setCumulativePeriod_MaxIs10_PositiveInfinity() {\n+        setup(setupServiceFactory());\n@@ -250,1 +301,3 @@\n-    @Test public void setCumulativePeriod_MaxIs10_MAX_VALUE() {\n+    @Test\n+    public void setCumulativePeriod_MaxIs10_MAX_VALUE() {\n+        setup(setupServiceFactory());\n@@ -256,1 +309,3 @@\n-    @Test public void setCumulativePeriod_MaxIs0_TwoSeconds() {\n+    @Test\n+    public void setCumulativePeriod_MaxIs0_TwoSeconds() {\n+        setup(setupServiceFactory());\n@@ -262,1 +317,3 @@\n-    @Test public void setCumulativePeriod_MaxIs0_TenSeconds() {\n+    @Test\n+    public void setCumulativePeriod_MaxIs0_TenSeconds() {\n+        setup(setupServiceFactory());\n@@ -268,1 +325,3 @@\n-    @Test public void setCumulativePeriod_MaxIs0_TwelveSeconds() {\n+    @Test\n+    public void setCumulativePeriod_MaxIs0_TwelveSeconds() {\n+        setup(setupServiceFactory());\n@@ -274,1 +333,3 @@\n-    @Test public void setCumulativePeriod_MaxIs0_Negative() {\n+    @Test\n+    public void setCumulativePeriod_MaxIs0_Negative() {\n+        setup(setupServiceFactory());\n@@ -280,1 +341,3 @@\n-    @Test public void setCumulativePeriod_MaxIs0_NegativeInfinity() {\n+    @Test\n+    public void setCumulativePeriod_MaxIs0_NegativeInfinity() {\n+        setup(setupServiceFactory());\n@@ -286,1 +349,3 @@\n-    @Test public void setCumulativePeriod_MaxIs0_NaN() {\n+    @Test\n+    public void setCumulativePeriod_MaxIs0_NaN() {\n+        setup(setupServiceFactory());\n@@ -292,1 +357,3 @@\n-    @Test public void setCumulativePeriod_MaxIs0_PositiveInfinity() {\n+    @Test\n+    public void setCumulativePeriod_MaxIs0_PositiveInfinity() {\n+        setup(setupServiceFactory());\n@@ -298,1 +365,3 @@\n-    @Test public void setCumulativePeriod_MaxIs0_MAX_VALUE() {\n+    @Test\n+    public void setCumulativePeriod_MaxIs0_MAX_VALUE() {\n+        setup(setupServiceFactory());\n@@ -304,1 +373,3 @@\n-    @Test public void setCumulativePeriod_MaxIsNegative_TwoSeconds() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsNegative_TwoSeconds() {\n+        setup(setupServiceFactory());\n@@ -310,1 +381,3 @@\n-    @Test public void setCumulativePeriod_MaxIsNegative_TenSeconds() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsNegative_TenSeconds() {\n+        setup(setupServiceFactory());\n@@ -316,1 +389,3 @@\n-    @Test public void setCumulativePeriod_MaxIsNegative_TwelveSeconds() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsNegative_TwelveSeconds() {\n+        setup(setupServiceFactory());\n@@ -322,1 +397,3 @@\n-    @Test public void setCumulativePeriod_MaxIsNegative_Negative() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsNegative_Negative() {\n+        setup(setupServiceFactory());\n@@ -328,1 +405,3 @@\n-    @Test public void setCumulativePeriod_MaxIsNegative_NegativeInfinity() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsNegative_NegativeInfinity() {\n+        setup(setupServiceFactory());\n@@ -334,1 +413,3 @@\n-    @Test public void setCumulativePeriod_MaxIsNegative_NaN() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsNegative_NaN() {\n+        setup(setupServiceFactory());\n@@ -340,1 +421,3 @@\n-    @Test public void setCumulativePeriod_MaxIsNegative_PositiveInfinity() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsNegative_PositiveInfinity() {\n+        setup(setupServiceFactory());\n@@ -346,1 +429,3 @@\n-    @Test public void setCumulativePeriod_MaxIsNegative_MAX_VALUE() {\n+    @Test\n+    public void setCumulativePeriod_MaxIsNegative_MAX_VALUE() {\n+        setup(setupServiceFactory());\n@@ -362,1 +447,3 @@\n-    @Test public void delayIsHonored_Positive() {\n+    @Test\n+    public void delayIsHonored_Positive() {\n+        setup(setupServiceFactory());\n@@ -368,1 +455,3 @@\n-    @Test public void delayIsHonored_Unknown() {\n+    @Test\n+    public void delayIsHonored_Unknown() {\n+        setup(setupServiceFactory());\n@@ -374,1 +463,3 @@\n-    @Test public void delayIsHonored_Infinite() {\n+    @Test\n+    public void delayIsHonored_Infinite() {\n+        setup(setupServiceFactory());\n@@ -380,1 +471,3 @@\n-    @Test public void delayIsHonored_ZERO() {\n+    @Test\n+    public void delayIsHonored_ZERO() {\n+        setup(setupServiceFactory());\n@@ -386,1 +479,3 @@\n-    @Test public void delayIsNotUsedOnSubsequentIteration() {\n+    @Test\n+    public void delayIsNotUsedOnSubsequentIteration() {\n+        setup(setupServiceFactory());\n@@ -394,1 +489,3 @@\n-    @Test public void delayIsUsedOnRestart() {\n+    @Test\n+    public void delayIsUsedOnRestart() {\n+        setup(setupServiceFactory());\n@@ -405,1 +502,3 @@\n-    @Test public void delayIsUsedOnStartFollowingReset() {\n+    @Test\n+    public void delayIsUsedOnStartFollowingReset() {\n+        setup(setupServiceFactory());\n@@ -426,1 +525,3 @@\n-    @Test public void periodDoesNotContributeToDelay() {\n+    @Test\n+    public void periodDoesNotContributeToDelay() {\n+        setup(setupServiceFactory());\n@@ -433,1 +534,3 @@\n-    @Test public void executionTimeLessThanPeriod() {\n+    @Test\n+    public void executionTimeLessThanPeriod() {\n+        setup(setupServiceFactory());\n@@ -441,1 +544,3 @@\n-    @Test public void executionTimeEqualsPeriod() {\n+    @Test\n+    public void executionTimeEqualsPeriod() {\n+        setup(setupServiceFactory());\n@@ -450,1 +555,3 @@\n-    @Test public void executionTimeExceedsPeriod() {\n+    @Test\n+    public void executionTimeExceedsPeriod() {\n+        setup(setupServiceFactory());\n@@ -459,1 +566,3 @@\n-    @Test public void startOfPeriodIsResetAfterReset() {\n+    @Test\n+    public void startOfPeriodIsResetAfterReset() {\n+        setup(setupServiceFactory());\n@@ -473,1 +582,3 @@\n-    @Test public void startOfPeriodIsResetAfterRestart() {\n+    @Test\n+    public void startOfPeriodIsResetAfterRestart() {\n+        setup(setupServiceFactory());\n@@ -492,1 +603,3 @@\n-    @Test public void onFailureCumulativePeriodIsIncreased_EXPONENTIAL_BACKOFF_zero() {\n+    @Test\n+    public void onFailureCumulativePeriodIsIncreased_EXPONENTIAL_BACKOFF_zero() {\n+        setup(setupServiceFactory());\n@@ -500,1 +613,3 @@\n-    @Test public void onFailureCumulativePeriodIsIncreased_EXPONENTIAL_BACKOFF_one() {\n+    @Test\n+    public void onFailureCumulativePeriodIsIncreased_EXPONENTIAL_BACKOFF_one() {\n+        setup(setupServiceFactory());\n@@ -508,1 +623,3 @@\n-    @Test public void onFailureCumulativePeriodIsIncreased_EXPONENTIAL_BACKOFF_indefinite() {\n+    @Test\n+    public void onFailureCumulativePeriodIsIncreased_EXPONENTIAL_BACKOFF_indefinite() {\n+        setup(setupServiceFactory());\n@@ -516,1 +633,3 @@\n-    @Test public void onFailureCumulativePeriodIsIncreased_EXPONENTIAL_BACKOFF_unknown() {\n+    @Test\n+    public void onFailureCumulativePeriodIsIncreased_EXPONENTIAL_BACKOFF_unknown() {\n+        setup(setupServiceFactory());\n@@ -524,1 +643,3 @@\n-    @Test public void onFailureCumulativePeriodIsIncreased_LOGARITHMIC_BACKOFF_zero() {\n+    @Test\n+    public void onFailureCumulativePeriodIsIncreased_LOGARITHMIC_BACKOFF_zero() {\n+        setup(setupServiceFactory());\n@@ -532,1 +653,3 @@\n-    @Test public void onFailureCumulativePeriodIsIncreased_LOGARITHMIC_BACKOFF_one() {\n+    @Test\n+    public void onFailureCumulativePeriodIsIncreased_LOGARITHMIC_BACKOFF_one() {\n+        setup(setupServiceFactory());\n@@ -540,1 +663,3 @@\n-    @Test public void onFailureCumulativePeriodIsIncreased_LOGARITHMIC_BACKOFF_indefinite() {\n+    @Test\n+    public void onFailureCumulativePeriodIsIncreased_LOGARITHMIC_BACKOFF_indefinite() {\n+        setup(setupServiceFactory());\n@@ -548,1 +673,3 @@\n-    @Test public void onFailureCumulativePeriodIsIncreased_LOGARITHMIC_BACKOFF_unknown() {\n+    @Test\n+    public void onFailureCumulativePeriodIsIncreased_LOGARITHMIC_BACKOFF_unknown() {\n+        setup(setupServiceFactory());\n@@ -556,1 +683,3 @@\n-    @Test public void onFailureCumulativePeriodIsIncreased_LINEAR_BACKOFF_zero() {\n+    @Test\n+    public void onFailureCumulativePeriodIsIncreased_LINEAR_BACKOFF_zero() {\n+        setup(setupServiceFactory());\n@@ -564,1 +693,3 @@\n-    @Test public void onFailureCumulativePeriodIsIncreased_LINEAR_BACKOFF_one() {\n+    @Test\n+    public void onFailureCumulativePeriodIsIncreased_LINEAR_BACKOFF_one() {\n+        setup(setupServiceFactory());\n@@ -572,1 +703,3 @@\n-    @Test public void onFailureCumulativePeriodIsIncreased_LINEAR_BACKOFF_indefinite() {\n+    @Test\n+    public void onFailureCumulativePeriodIsIncreased_LINEAR_BACKOFF_indefinite() {\n+        setup(setupServiceFactory());\n@@ -580,1 +713,3 @@\n-    @Test public void onFailureCumulativePeriodIsIncreased_LINEAR_BACKOFF_unknown() {\n+    @Test\n+    public void onFailureCumulativePeriodIsIncreased_LINEAR_BACKOFF_unknown() {\n+        setup(setupServiceFactory());\n@@ -596,1 +731,3 @@\n-    @Test public void cumulativePeriodSetWhenScheduled() {\n+    @Test\n+    public void cumulativePeriodSetWhenScheduled() {\n+        setup(setupServiceFactory());\n@@ -604,1 +741,3 @@\n-    @Test public void cumulativePeriodDoesNotChangeOnSuccessfulRun() {\n+    @Test\n+    public void cumulativePeriodDoesNotChangeOnSuccessfulRun() {\n+        setup(setupServiceFactory());\n@@ -611,1 +750,3 @@\n-    @Test public void cumulativePeriodResetOnSuccessfulRun() {\n+    @Test\n+    public void cumulativePeriodResetOnSuccessfulRun() {\n+        setup(setupServiceFactory());\n@@ -628,1 +769,3 @@\n-    @Test public void cumulativePeriodDoesNotChangeOnCancelRun() {\n+    @Test\n+    public void cumulativePeriodDoesNotChangeOnCancelRun() {\n+        setup(setupServiceFactory());\n@@ -641,1 +784,3 @@\n-    @Test public void restartOnFailure_True() {\n+    @Test\n+    public void restartOnFailure_True() {\n+        setup(setupServiceFactory());\n@@ -659,1 +804,3 @@\n-    @Test public void restartOnFailure_False() {\n+    @Test\n+    public void restartOnFailure_False() {\n+        setup(setupServiceFactory());\n@@ -685,1 +832,3 @@\n-    @Test public void serviceIteratesWhile_CurrentFailureCount_IsLessThan_MaximumFailureCount() {\n+    @Test\n+    public void serviceIteratesWhile_CurrentFailureCount_IsLessThan_MaximumFailureCount() {\n+        setup(setupServiceFactory());\n@@ -707,1 +856,3 @@\n-    @Test public void currentFailureCountIsResetOnRestart() {\n+    @Test\n+    public void currentFailureCountIsResetOnRestart() {\n+        setup(setupServiceFactory());\n@@ -716,1 +867,3 @@\n-    @Test public void currentFailureCountIsResetOnReset() {\n+    @Test\n+    public void currentFailureCountIsResetOnReset() {\n+        setup(setupServiceFactory());\n@@ -725,1 +878,3 @@\n-    @Test public void currentFailureCountIsNotResetOnCancel() {\n+    @Test\n+    public void currentFailureCountIsNotResetOnCancel() {\n+        setup(setupServiceFactory());\n@@ -740,1 +895,3 @@\n-    @Test public void lastValueIsInitiallyNull() {\n+    @Test\n+    public void lastValueIsInitiallyNull() {\n+        setup(setupServiceFactory());\n@@ -744,1 +901,3 @@\n-    @Test public void lastValueIsNullAfterFailedFirstIteration() {\n+    @Test\n+    public void lastValueIsNullAfterFailedFirstIteration() {\n+        setup(setupServiceFactory());\n@@ -750,1 +909,3 @@\n-    @Test public void lastValueIsSetAfterSuccessfulFirstIteration() {\n+    @Test\n+    public void lastValueIsSetAfterSuccessfulFirstIteration() {\n+        setup(setupServiceFactory());\n@@ -756,1 +917,3 @@\n-    @Test public void lastValueIsSetAfterFailedFirstIterationAndSuccessfulSecondIteration() {\n+    @Test\n+    public void lastValueIsSetAfterFailedFirstIterationAndSuccessfulSecondIteration() {\n+        setup(setupServiceFactory());\n@@ -773,1 +936,3 @@\n-    @Test public void lastValueIsUnchangedAfterSuccessfulFirstIterationAndFailedSecondIteration() {\n+    @Test\n+    public void lastValueIsUnchangedAfterSuccessfulFirstIterationAndFailedSecondIteration() {\n+        setup(setupServiceFactory());\n@@ -790,1 +955,3 @@\n-    @Test public void lastValueIsClearedOnReset() {\n+    @Test\n+    public void lastValueIsClearedOnReset() {\n+        setup(setupServiceFactory());\n@@ -799,1 +966,3 @@\n-    @Test public void callingCancelFromOnSucceededEventHandlerShouldStopScheduledService() {\n+    @Test\n+    public void callingCancelFromOnSucceededEventHandlerShouldStopScheduledService() {\n+        setup(setupServiceFactory());\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/concurrent\/ScheduledServiceTest.java","additions":262,"deletions":93,"binary":false,"changes":355,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -33,3 +32,0 @@\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n@@ -37,1 +33,8 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -44,1 +47,0 @@\n-@RunWith(Parameterized.class)\n@@ -46,10 +48,0 @@\n-    @Parameterized.Parameters public static Collection implementations() {\n-        return Arrays.asList(new Object[][]{\n-                { new Exception(\"Exception\") },\n-                { new IllegalArgumentException(\"IAE\") },\n-                { new NullPointerException(\"NPE\") },\n-                { new RuntimeException(\"RuntimeException\") }\n-        });\n-    }\n-\n-    private Exception exception;\n@@ -57,2 +49,7 @@\n-    public ServiceExceptionTest(Exception th) {\n-        this.exception = th;\n+    public static Stream<Arguments> implementations() {\n+        return Stream.of(\n+            setupServiceFactory(new Exception(\"Exception\")),\n+            setupServiceFactory(new IllegalArgumentException(\"IAE\")),\n+            setupServiceFactory(new NullPointerException(\"NPE\")),\n+            setupServiceFactory(new RuntimeException(\"RuntimeException\"))\n+        );\n@@ -61,6 +58,9 @@\n-    @Override protected TestServiceFactory setupServiceFactory() {\n-        return new TestServiceFactory() {\n-            @Override public AbstractTask createTestTask() {\n-                return new EpicFailTask(ServiceExceptionTest.this.exception);\n-            }\n-        };\n+    private static Arguments setupServiceFactory(Exception e) {\n+        return Arguments.of(\n+            new TestServiceFactory() {\n+                @Override public AbstractTask createTestTask() {\n+                    return new EpicFailTask(e);\n+                }\n+            },\n+            e\n+        );\n@@ -78,1 +78,4 @@\n-    @Test public void exceptionShouldBeSet() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void exceptionShouldBeSet(TestServiceFactory factory, Exception exception) {\n+        setup(factory);\n@@ -85,1 +88,4 @@\n-    @Test public void exceptionPropertyNotification() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void exceptionPropertyNotification(TestServiceFactory factory, Exception exception) {\n+        setup(factory);\n@@ -96,1 +102,4 @@\n-    @Test public void valueShouldBeNull() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void valueShouldBeNull(TestServiceFactory factory, Exception exception) {\n+        setup(factory);\n@@ -103,1 +112,4 @@\n-    @Test public void runningShouldBeFalse() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void runningShouldBeFalse(TestServiceFactory factory, Exception exception) {\n+        setup(factory);\n@@ -110,1 +122,4 @@\n-    @Test public void runningPropertyNotification() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void runningPropertyNotification(TestServiceFactory factory, Exception exception) {\n+        setup(factory);\n@@ -118,1 +133,4 @@\n-    @Test public void workDoneShouldBeTen() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void workDoneShouldBeTen(TestServiceFactory factory, Exception exception) {\n+        setup(factory);\n@@ -125,1 +143,4 @@\n-    @Test public void workDonePropertyNotification() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void workDonePropertyNotification(TestServiceFactory factory, Exception exception) {\n+        setup(factory);\n@@ -133,1 +154,4 @@\n-    @Test public void totalWorkShouldBeTwenty() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void totalWorkShouldBeTwenty(TestServiceFactory factory, Exception exception) {\n+        setup(factory);\n@@ -140,1 +164,4 @@\n-    @Test public void totalWorkPropertyNotification() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void totalWorkPropertyNotification(TestServiceFactory factory, Exception exception) {\n+        setup(factory);\n@@ -148,1 +175,4 @@\n-    @Test public void afterRunningProgressShouldBe_FiftyPercent() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void afterRunningProgressShouldBe_FiftyPercent(TestServiceFactory factory, Exception exception) {\n+        setup(factory);\n@@ -155,1 +185,4 @@\n-    @Test public void progressPropertyNotification() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void progressPropertyNotification(TestServiceFactory factory, Exception exception) {\n+        setup(factory);\n@@ -163,1 +196,4 @@\n-    @Test public void stateShouldBe_FAILED() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void stateShouldBe_FAILED(TestServiceFactory factory, Exception exception) {\n+        setup(factory);\n@@ -170,1 +206,4 @@\n-    @Test public void statePropertyNotification() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void statePropertyNotification(TestServiceFactory factory, Exception exception) {\n+        setup(factory);\n@@ -178,1 +217,4 @@\n-    @Test public void messageShouldBeLastSetValue() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void messageShouldBeLastSetValue(TestServiceFactory factory, Exception exception) {\n+        setup(factory);\n@@ -185,1 +227,4 @@\n-    @Test public void messagePropertyNotification() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void messagePropertyNotification(TestServiceFactory factory, Exception exception) {\n+        setup(factory);\n@@ -193,1 +238,4 @@\n-    @Test public void titleShouldBeLastSetValue() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void titleShouldBeLastSetValue(TestServiceFactory factory, Exception exception) {\n+        setup(factory);\n@@ -200,1 +248,4 @@\n-    @Test public void titlePropertyNotification() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void titlePropertyNotification(TestServiceFactory factory, Exception exception) {\n+        setup(factory);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/concurrent\/ServiceExceptionTest.java","additions":94,"deletions":43,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,8 +43,10 @@\n-import org.junit.After;\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -69,1 +71,1 @@\n-    @Override protected TestServiceFactory setupServiceFactory() {\n+    private TestServiceFactory setupServiceFactory() {\n@@ -77,1 +79,2 @@\n-    @Override protected Executor createExecutor() {\n+    @Override\n+    protected Executor createExecutor() {\n@@ -81,1 +84,2 @@\n-    @After public void tearDown() {\n+    @AfterEach\n+    public void tearDown() {\n@@ -159,1 +163,3 @@\n-    @Test public void callingStartInReadyStateSchedulesJob() {\n+    @Test\n+    public void callingStartInReadyStateSchedulesJob() {\n+        setup(setupServiceFactory());\n@@ -165,1 +171,3 @@\n-    @Test public void callingStartInReadyMovesToScheduledState() {\n+    @Test\n+    public void callingStartInReadyMovesToScheduledState() {\n+        setup(setupServiceFactory());\n@@ -171,1 +179,3 @@\n-    @Test public void callingRestartInReadyStateSchedulesJob() {\n+    @Test\n+    public void callingRestartInReadyStateSchedulesJob() {\n+        setup(setupServiceFactory());\n@@ -177,1 +187,3 @@\n-    @Test public void callingRestartInReadyMovesToScheduledState() {\n+    @Test\n+    public void callingRestartInReadyMovesToScheduledState() {\n+        setup(setupServiceFactory());\n@@ -183,1 +195,3 @@\n-    @Test public void callingCancelInReadyStateMovesToCancelledState() {\n+    @Test\n+    public void callingCancelInReadyStateMovesToCancelledState() {\n+        setup(setupServiceFactory());\n@@ -189,1 +203,3 @@\n-    @Test public void callingResetInReadyStateHasNoEffect() {\n+    @Test\n+    public void callingResetInReadyStateHasNoEffect() {\n+        setup(setupServiceFactory());\n@@ -199,1 +215,1 @@\n-    @Test(expected = IllegalStateException.class)\n+    @Test\n@@ -201,2 +217,5 @@\n-        service.start();\n-        service.start();\n+        setup(setupServiceFactory());\n+        assertThrows(IllegalStateException.class, () -> {\n+            service.start();\n+            service.start();\n+        });\n@@ -205,1 +224,3 @@\n-    @Test public void callingCancelInScheduledStateResultsInCancelledState() {\n+    @Test\n+    public void callingCancelInScheduledStateResultsInCancelledState() {\n+        setup(setupServiceFactory());\n@@ -212,1 +233,3 @@\n-    @Test public void callingRestartInScheduledStateShouldCancelAndReschedule() {\n+    @Test\n+    public void callingRestartInScheduledStateShouldCancelAndReschedule() {\n+        setup(setupServiceFactory());\n@@ -227,1 +250,3 @@\n-    @Test public void callingRestartInScheduledStateShouldCancelAndReschedule_RT_20880() {\n+    @Test\n+    public void callingRestartInScheduledStateShouldCancelAndReschedule_RT_20880() {\n+        setup(setupServiceFactory());\n@@ -235,1 +260,1 @@\n-    @Test(expected = IllegalStateException.class)\n+    @Test\n@@ -237,2 +262,5 @@\n-        service.start();\n-        service.reset();\n+        setup(setupServiceFactory());\n+        assertThrows(IllegalStateException.class, () -> {\n+            service.start();\n+            service.reset();\n+        });\n@@ -241,1 +269,3 @@\n-    @Test public void stateChangesToRunningWhenExecutorExecutes() {\n+    @Test\n+    public void stateChangesToRunningWhenExecutorExecutes() {\n+        setup(setupServiceFactory());\n@@ -248,1 +278,3 @@\n-    @Test public void exceptionShouldBeNullInScheduledState() {\n+    @Test\n+    public void exceptionShouldBeNullInScheduledState() {\n+        setup(setupServiceFactory());\n@@ -254,1 +286,3 @@\n-    @Test public void valueShouldBeNullInScheduledState() {\n+    @Test\n+    public void valueShouldBeNullInScheduledState() {\n+        setup(setupServiceFactory());\n@@ -260,1 +294,3 @@\n-    @Test public void runningShouldBeTrueInScheduledState() {\n+    @Test\n+    public void runningShouldBeTrueInScheduledState() {\n+        setup(setupServiceFactory());\n@@ -266,1 +302,3 @@\n-    @Test public void runningPropertyNotificationInScheduledState() {\n+    @Test\n+    public void runningPropertyNotificationInScheduledState() {\n+        setup(setupServiceFactory());\n@@ -273,1 +311,3 @@\n-    @Test public void workDoneShouldBeNegativeOneInitiallyInScheduledState() {\n+    @Test\n+    public void workDoneShouldBeNegativeOneInitiallyInScheduledState() {\n+        setup(setupServiceFactory());\n@@ -279,1 +319,3 @@\n-    @Test public void totalWorkShouldBeNegativeOneAtStartOfScheduledState() {\n+    @Test\n+    public void totalWorkShouldBeNegativeOneAtStartOfScheduledState() {\n+        setup(setupServiceFactory());\n@@ -285,1 +327,3 @@\n-    @Test public void progressShouldBeNegativeOneAtStartOfScheduledState() {\n+    @Test\n+    public void progressShouldBeNegativeOneAtStartOfScheduledState() {\n+        setup(setupServiceFactory());\n@@ -291,1 +335,3 @@\n-    @Test public void messageShouldBeEmptyStringWhenEnteringScheduledState() {\n+    @Test\n+    public void messageShouldBeEmptyStringWhenEnteringScheduledState() {\n+        setup(setupServiceFactory());\n@@ -297,1 +343,3 @@\n-    @Test public void titleShouldBeEmptyStringAtStartOfScheduledState() {\n+    @Test\n+    public void titleShouldBeEmptyStringAtStartOfScheduledState() {\n+        setup(setupServiceFactory());\n@@ -307,1 +355,1 @@\n-    @Test(expected = IllegalStateException.class)\n+    @Test\n@@ -309,3 +357,6 @@\n-        service.start();\n-        executor.executeScheduled();\n-        service.start();\n+        setup(setupServiceFactory());\n+        assertThrows(IllegalStateException.class, () -> {\n+            service.start();\n+            executor.executeScheduled();\n+            service.start();\n+        });\n@@ -314,1 +365,1 @@\n-    @Test(expected = IllegalStateException.class)\n+    @Test\n@@ -316,3 +367,6 @@\n-        service.start();\n-        executor.executeScheduled();\n-        service.reset();\n+        setup(setupServiceFactory());\n+        assertThrows(IllegalStateException.class, () -> {\n+            service.start();\n+            executor.executeScheduled();\n+            service.reset();\n+        });\n@@ -321,1 +375,3 @@\n-    @Test public void callingRestartInRunningStateCancelsAndReschedules() {\n+    @Test\n+    public void callingRestartInRunningStateCancelsAndReschedules() {\n+        setup(setupServiceFactory());\n@@ -329,1 +385,3 @@\n-    @Test public void callingCancelInRunningStateResultsInCancelledState() {\n+    @Test\n+    public void callingCancelInRunningStateResultsInCancelledState() {\n+        setup(setupServiceFactory());\n@@ -337,1 +395,3 @@\n-    @Test public void exceptionShouldBeNullInRunningState() {\n+    @Test\n+    public void exceptionShouldBeNullInRunningState() {\n+        setup(setupServiceFactory());\n@@ -344,1 +404,3 @@\n-    @Test public void valueShouldBeNullInRunningState() {\n+    @Test\n+    public void valueShouldBeNullInRunningState() {\n+        setup(setupServiceFactory());\n@@ -351,1 +413,3 @@\n-    @Test public void runningShouldBeTrueInRunningState() {\n+    @Test\n+    public void runningShouldBeTrueInRunningState() {\n+        setup(setupServiceFactory());\n@@ -358,1 +422,3 @@\n-    @Test public void runningPropertyNotificationInRunningState() {\n+    @Test\n+    public void runningPropertyNotificationInRunningState() {\n+        setup(setupServiceFactory());\n@@ -366,1 +432,3 @@\n-    @Test public void workDoneShouldBeNegativeOneInitiallyInRunningState() {\n+    @Test\n+    public void workDoneShouldBeNegativeOneInitiallyInRunningState() {\n+        setup(setupServiceFactory());\n@@ -373,1 +441,3 @@\n-    @Test public void workDoneShouldAdvanceTo10() {\n+    @Test\n+    public void workDoneShouldAdvanceTo10() {\n+        setup(setupServiceFactory());\n@@ -381,1 +451,3 @@\n-    @Test public void workDonePropertyNotification() {\n+    @Test\n+    public void workDonePropertyNotification() {\n+        setup(setupServiceFactory());\n@@ -390,1 +462,3 @@\n-    @Test public void totalWorkShouldBeNegativeOneAtStartOfRunning() {\n+    @Test\n+    public void totalWorkShouldBeNegativeOneAtStartOfRunning() {\n+        setup(setupServiceFactory());\n@@ -397,1 +471,3 @@\n-    @Test public void totalWorkShouldBeTwenty() {\n+    @Test\n+    public void totalWorkShouldBeTwenty() {\n+        setup(setupServiceFactory());\n@@ -405,1 +481,3 @@\n-    @Test public void totalWorkPropertyNotification() {\n+    @Test\n+    public void totalWorkPropertyNotification() {\n+        setup(setupServiceFactory());\n@@ -414,1 +492,3 @@\n-    @Test public void progressShouldBeNegativeOneAtStartOfRunningState() {\n+    @Test\n+    public void progressShouldBeNegativeOneAtStartOfRunningState() {\n+        setup(setupServiceFactory());\n@@ -421,1 +501,3 @@\n-    @Test public void afterRunningProgressShouldBe_FiftyPercent() {\n+    @Test\n+    public void afterRunningProgressShouldBe_FiftyPercent() {\n+        setup(setupServiceFactory());\n@@ -429,1 +511,3 @@\n-    @Test public void progressPropertyNotification() {\n+    @Test\n+    public void progressPropertyNotification() {\n+        setup(setupServiceFactory());\n@@ -438,1 +522,3 @@\n-    @Test public void messageShouldBeEmptyStringWhenEnteringRunningState() {\n+    @Test\n+    public void messageShouldBeEmptyStringWhenEnteringRunningState() {\n+        setup(setupServiceFactory());\n@@ -445,1 +531,3 @@\n-    @Test public void messageShouldBeLastSetValue() {\n+    @Test\n+    public void messageShouldBeLastSetValue() {\n+        setup(setupServiceFactory());\n@@ -453,1 +541,3 @@\n-    @Test public void messagePropertyNotification() {\n+    @Test\n+    public void messagePropertyNotification() {\n+        setup(setupServiceFactory());\n@@ -462,1 +552,3 @@\n-    @Test public void titleShouldBeEmptyStringAtStartOfRunningState() {\n+    @Test\n+    public void titleShouldBeEmptyStringAtStartOfRunningState() {\n+        setup(setupServiceFactory());\n@@ -469,1 +561,3 @@\n-    @Test public void titleShouldBeLastSetValue() {\n+    @Test\n+    public void titleShouldBeLastSetValue() {\n+        setup(setupServiceFactory());\n@@ -477,1 +571,3 @@\n-    @Test public void titlePropertyNotification() {\n+    @Test\n+    public void titlePropertyNotification() {\n+        setup(setupServiceFactory());\n@@ -490,1 +586,1 @@\n-    @Test(expected = IllegalStateException.class)\n+    @Test\n@@ -492,4 +588,7 @@\n-        service.start();\n-        executor.executeScheduled();\n-        task.fail(new Exception(\"anything\"));\n-        service.start();\n+        setup(setupServiceFactory());\n+        assertThrows(IllegalStateException.class, () -> {\n+            service.start();\n+            executor.executeScheduled();\n+            task.fail(new Exception(\"anything\"));\n+            service.start();\n+        });\n@@ -498,1 +597,3 @@\n-    @Test public void callingResetInFailedStateResetsStateToREADY() {\n+    @Test\n+    public void callingResetInFailedStateResetsStateToREADY() {\n+        setup(setupServiceFactory());\n@@ -508,1 +609,3 @@\n-    @Test public void callingResetInFailedStateResetsValueToNull() {\n+    @Test\n+    public void callingResetInFailedStateResetsValueToNull() {\n+        setup(setupServiceFactory());\n@@ -518,1 +621,3 @@\n-    @Test public void callingResetInFailedStateResetsExceptionToNull() {\n+    @Test\n+    public void callingResetInFailedStateResetsExceptionToNull() {\n+        setup(setupServiceFactory());\n@@ -528,1 +633,3 @@\n-    @Test public void callingResetInFailedStateResetsWorkDoneToNegativeOne() {\n+    @Test\n+    public void callingResetInFailedStateResetsWorkDoneToNegativeOne() {\n+        setup(setupServiceFactory());\n@@ -539,1 +646,3 @@\n-    @Test public void callingResetInFailedStateResetsTotalWorkToNegativeOne() {\n+    @Test\n+    public void callingResetInFailedStateResetsTotalWorkToNegativeOne() {\n+        setup(setupServiceFactory());\n@@ -550,1 +659,3 @@\n-    @Test public void callingResetInFailedStateResetsProgressToNegativeOne() {\n+    @Test\n+    public void callingResetInFailedStateResetsProgressToNegativeOne() {\n+        setup(setupServiceFactory());\n@@ -561,1 +672,3 @@\n-    @Test public void callingResetInFailedStateResetsRunningToFalse() {\n+    @Test\n+    public void callingResetInFailedStateResetsRunningToFalse() {\n+        setup(setupServiceFactory());\n@@ -571,1 +684,3 @@\n-    @Test public void callingResetInFailedStateResetsMessageToEmptyString() {\n+    @Test\n+    public void callingResetInFailedStateResetsMessageToEmptyString() {\n+        setup(setupServiceFactory());\n@@ -582,1 +697,3 @@\n-    @Test public void callingResetInFailedStateResetsTitleToEmptyString() {\n+    @Test\n+    public void callingResetInFailedStateResetsTitleToEmptyString() {\n+        setup(setupServiceFactory());\n@@ -593,1 +710,3 @@\n-    @Test public void callingRestartInFailedStateReschedules() {\n+    @Test\n+    public void callingRestartInFailedStateReschedules() {\n+        setup(setupServiceFactory());\n@@ -602,1 +721,3 @@\n-    @Test public void callingCancelInFailedStateResultsInNoChange() {\n+    @Test\n+    public void callingCancelInFailedStateResultsInNoChange() {\n+        setup(setupServiceFactory());\n@@ -615,1 +736,1 @@\n-    @Test(expected = IllegalStateException.class)\n+    @Test\n@@ -617,5 +738,8 @@\n-        service.start();\n-        executor.executeScheduled();\n-        task.progress(20, 20);\n-        task.complete();\n-        service.start();\n+        setup(setupServiceFactory());\n+        assertThrows(IllegalStateException.class, () -> {\n+            service.start();\n+            executor.executeScheduled();\n+            task.progress(20, 20);\n+            task.complete();\n+            service.start();\n+        });\n@@ -624,1 +748,3 @@\n-    @Test public void callingResetInSucceededStateResetsStateToREADY() {\n+    @Test\n+    public void callingResetInSucceededStateResetsStateToREADY() {\n+        setup(setupServiceFactory());\n@@ -635,1 +761,3 @@\n-    @Test public void callingResetInSucceededStateResetsValueToNull() {\n+    @Test\n+    public void callingResetInSucceededStateResetsValueToNull() {\n+        setup(setupServiceFactory());\n@@ -646,1 +774,3 @@\n-    @Test public void callingResetInSucceededStateResetsExceptionToNull() {\n+    @Test\n+    public void callingResetInSucceededStateResetsExceptionToNull() {\n+        setup(setupServiceFactory());\n@@ -657,1 +787,3 @@\n-    @Test public void callingResetInSucceededStateResetsWorkDoneToNegativeOne() {\n+    @Test\n+    public void callingResetInSucceededStateResetsWorkDoneToNegativeOne() {\n+        setup(setupServiceFactory());\n@@ -668,1 +800,3 @@\n-    @Test public void callingResetInSucceededStateResetsTotalWorkToNegativeOne() {\n+    @Test\n+    public void callingResetInSucceededStateResetsTotalWorkToNegativeOne() {\n+        setup(setupServiceFactory());\n@@ -679,1 +813,3 @@\n-    @Test public void callingResetInSucceededStateResetsProgressToNegativeOne() {\n+    @Test\n+    public void callingResetInSucceededStateResetsProgressToNegativeOne() {\n+        setup(setupServiceFactory());\n@@ -690,1 +826,3 @@\n-    @Test public void callingResetInSucceededStateResetsRunningToFalse() {\n+    @Test\n+    public void callingResetInSucceededStateResetsRunningToFalse() {\n+        setup(setupServiceFactory());\n@@ -701,1 +839,3 @@\n-    @Test public void callingResetInSucceededStateResetsMessageToEmptyString() {\n+    @Test\n+    public void callingResetInSucceededStateResetsMessageToEmptyString() {\n+        setup(setupServiceFactory());\n@@ -713,1 +853,3 @@\n-    @Test public void callingResetInSucceededStateResetsTitleToEmptyString() {\n+    @Test\n+    public void callingResetInSucceededStateResetsTitleToEmptyString() {\n+        setup(setupServiceFactory());\n@@ -725,1 +867,3 @@\n-    @Test public void callingRestartInSucceededStateReschedules() {\n+    @Test\n+    public void callingRestartInSucceededStateReschedules() {\n+        setup(setupServiceFactory());\n@@ -735,1 +879,3 @@\n-    @Test public void callingCancelInSucceededStateResultsInNoChange() {\n+    @Test\n+    public void callingCancelInSucceededStateResultsInNoChange() {\n+        setup(setupServiceFactory());\n@@ -751,1 +897,3 @@\n-    @Test public void onReadyPropertyNameShouldMatchMethodName() {\n+    @Test\n+    public void onReadyPropertyNameShouldMatchMethodName() {\n+        setup(setupServiceFactory());\n@@ -755,1 +903,3 @@\n-    @Test public void onReadyBeanShouldMatchService() {\n+    @Test\n+    public void onReadyBeanShouldMatchService() {\n+        setup(setupServiceFactory());\n@@ -759,1 +909,3 @@\n-    @Test public void onReadyIsInitializedToNull() {\n+    @Test\n+    public void onReadyIsInitializedToNull() {\n+        setup(setupServiceFactory());\n@@ -764,1 +916,3 @@\n-    @Test public void onReadyFilterCalledBefore_onReady() {\n+    @Test\n+    public void onReadyFilterCalledBefore_onReady() {\n+        setup(setupServiceFactory());\n@@ -779,1 +933,3 @@\n-    @Test public void onReadyHandlerCalled() {\n+    @Test\n+    public void onReadyHandlerCalled() {\n+        setup(setupServiceFactory());\n@@ -792,1 +948,3 @@\n-    @Test public void removed_onReadyHandlerNotCalled() {\n+    @Test\n+    public void removed_onReadyHandlerNotCalled() {\n+        setup(setupServiceFactory());\n@@ -808,1 +966,3 @@\n-    @Test public void removed_onReadyFilterNotCalled() {\n+    @Test\n+    public void removed_onReadyFilterNotCalled() {\n+        setup(setupServiceFactory());\n@@ -824,1 +984,3 @@\n-    @Test public void cancelCalledFromOnReady() {\n+    @Test\n+    public void cancelCalledFromOnReady() {\n+        setup(setupServiceFactory());\n@@ -847,1 +1009,3 @@\n-    @Test public void onScheduledPropertyNameShouldMatchMethodName() {\n+    @Test\n+    public void onScheduledPropertyNameShouldMatchMethodName() {\n+        setup(setupServiceFactory());\n@@ -851,1 +1015,3 @@\n-    @Test public void onScheduledBeanShouldMatchService() {\n+    @Test\n+    public void onScheduledBeanShouldMatchService() {\n+        setup(setupServiceFactory());\n@@ -855,1 +1021,3 @@\n-    @Test public void onScheduledIsInitializedToNull() {\n+    @Test\n+    public void onScheduledIsInitializedToNull() {\n+        setup(setupServiceFactory());\n@@ -860,1 +1028,3 @@\n-    @Test public void onScheduledFilterCalledBefore_onScheduled() {\n+    @Test\n+    public void onScheduledFilterCalledBefore_onScheduled() {\n+        setup(setupServiceFactory());\n@@ -873,1 +1043,3 @@\n-    @Test public void scheduledCalledAfterHandler() {\n+    @Test\n+    public void scheduledCalledAfterHandler() {\n+        setup(setupServiceFactory());\n@@ -884,1 +1056,3 @@\n-    @Test public void scheduledCalledAfterHandlerEvenIfConsumed() {\n+    @Test\n+    public void scheduledCalledAfterHandlerEvenIfConsumed() {\n+        setup(setupServiceFactory());\n@@ -898,1 +1072,3 @@\n-    @Test public void onScheduledHandlerCalled() {\n+    @Test\n+    public void onScheduledHandlerCalled() {\n+        setup(setupServiceFactory());\n@@ -908,1 +1084,3 @@\n-    @Test public void removed_onScheduledHandlerNotCalled() {\n+    @Test\n+    public void removed_onScheduledHandlerNotCalled() {\n+        setup(setupServiceFactory());\n@@ -922,1 +1100,3 @@\n-    @Test public void removed_onScheduledFilterNotCalled() {\n+    @Test\n+    public void removed_onScheduledFilterNotCalled() {\n+        setup(setupServiceFactory());\n@@ -936,1 +1116,3 @@\n-    @Test public void cancelCalledFromOnScheduled() {\n+    @Test\n+    public void cancelCalledFromOnScheduled() {\n+        setup(setupServiceFactory());\n@@ -957,1 +1139,3 @@\n-    @Test public void onRunningPropertyNameShouldMatchMethodName() {\n+    @Test\n+    public void onRunningPropertyNameShouldMatchMethodName() {\n+        setup(setupServiceFactory());\n@@ -961,1 +1145,3 @@\n-    @Test public void onRunningBeanShouldMatchService() {\n+    @Test\n+    public void onRunningBeanShouldMatchService() {\n+        setup(setupServiceFactory());\n@@ -965,1 +1151,3 @@\n-    @Test public void onRunningIsInitializedToNull() {\n+    @Test\n+    public void onRunningIsInitializedToNull() {\n+        setup(setupServiceFactory());\n@@ -970,1 +1158,3 @@\n-    @Test public void onRunningFilterCalledBefore_onRunning() {\n+    @Test\n+    public void onRunningFilterCalledBefore_onRunning() {\n+        setup(setupServiceFactory());\n@@ -983,1 +1173,3 @@\n-    @Test public void runningCalledAfterHandler() {\n+    @Test\n+    public void runningCalledAfterHandler() {\n+        setup(setupServiceFactory());\n@@ -994,1 +1186,3 @@\n-    @Test public void runningCalledAfterHandlerEvenIfConsumed() {\n+    @Test\n+    public void runningCalledAfterHandlerEvenIfConsumed() {\n+        setup(setupServiceFactory());\n@@ -1008,1 +1202,3 @@\n-    @Test public void onRunningHandlerCalled() {\n+    @Test\n+    public void onRunningHandlerCalled() {\n+        setup(setupServiceFactory());\n@@ -1018,1 +1214,3 @@\n-    @Test public void removed_onRunningHandlerNotCalled() {\n+    @Test\n+    public void removed_onRunningHandlerNotCalled() {\n+        setup(setupServiceFactory());\n@@ -1032,1 +1230,3 @@\n-    @Test public void removed_onRunningFilterNotCalled() {\n+    @Test\n+    public void removed_onRunningFilterNotCalled() {\n+        setup(setupServiceFactory());\n@@ -1046,1 +1246,3 @@\n-    @Test public void cancelCalledFromOnRunning() {\n+    @Test\n+    public void cancelCalledFromOnRunning() {\n+        setup(setupServiceFactory());\n@@ -1067,1 +1269,3 @@\n-    @Test public void onSucceededPropertyNameShouldMatchMethodName() {\n+    @Test\n+    public void onSucceededPropertyNameShouldMatchMethodName() {\n+        setup(setupServiceFactory());\n@@ -1071,1 +1275,3 @@\n-    @Test public void onSucceededBeanShouldMatchService() {\n+    @Test\n+    public void onSucceededBeanShouldMatchService() {\n+        setup(setupServiceFactory());\n@@ -1075,1 +1281,3 @@\n-    @Test public void onSucceededIsInitializedToNull() {\n+    @Test\n+    public void onSucceededIsInitializedToNull() {\n+        setup(setupServiceFactory());\n@@ -1080,1 +1288,3 @@\n-    @Test public void onSucceededFilterCalledBefore_onSucceeded() {\n+    @Test\n+    public void onSucceededFilterCalledBefore_onSucceeded() {\n+        setup(setupServiceFactory());\n@@ -1094,1 +1304,3 @@\n-    @Test public void succeededCalledAfterHandler() {\n+    @Test\n+    public void succeededCalledAfterHandler() {\n+        setup(setupServiceFactory());\n@@ -1106,1 +1318,3 @@\n-    @Test public void succeededCalledAfterHandlerEvenIfConsumed() {\n+    @Test\n+    public void succeededCalledAfterHandlerEvenIfConsumed() {\n+        setup(setupServiceFactory());\n@@ -1121,1 +1335,3 @@\n-    @Test public void onSucceededHandlerCalled() {\n+    @Test\n+    public void onSucceededHandlerCalled() {\n+        setup(setupServiceFactory());\n@@ -1132,1 +1348,3 @@\n-    @Test public void removed_onSucceededHandlerNotCalled() {\n+    @Test\n+    public void removed_onSucceededHandlerNotCalled() {\n+        setup(setupServiceFactory());\n@@ -1147,1 +1365,3 @@\n-    @Test public void removed_onSucceededFilterNotCalled() {\n+    @Test\n+    public void removed_onSucceededFilterNotCalled() {\n+        setup(setupServiceFactory());\n@@ -1160,1 +1380,3 @@\n-    @Test public void cancelCalledFromOnSucceeded() {\n+    @Test\n+    public void cancelCalledFromOnSucceeded() {\n+        setup(setupServiceFactory());\n@@ -1182,1 +1404,3 @@\n-    @Test public void onCancelledPropertyNameShouldMatchMethodName() {\n+    @Test\n+    public void onCancelledPropertyNameShouldMatchMethodName() {\n+        setup(setupServiceFactory());\n@@ -1186,1 +1410,3 @@\n-    @Test public void onCancelledBeanShouldMatchService() {\n+    @Test\n+    public void onCancelledBeanShouldMatchService() {\n+        setup(setupServiceFactory());\n@@ -1190,1 +1416,3 @@\n-    @Test public void onCancelledIsInitializedToNull() {\n+    @Test\n+    public void onCancelledIsInitializedToNull() {\n+        setup(setupServiceFactory());\n@@ -1195,1 +1423,3 @@\n-    @Test public void onCancelledFilterCalledBefore_onCancelled() {\n+    @Test\n+    public void onCancelledFilterCalledBefore_onCancelled() {\n+        setup(setupServiceFactory());\n@@ -1209,1 +1439,3 @@\n-    @Test public void cancelledCalledAfterHandler() {\n+    @Test\n+    public void cancelledCalledAfterHandler() {\n+        setup(setupServiceFactory());\n@@ -1221,1 +1453,3 @@\n-    @Test public void cancelledCalledAfterHandlerEvenIfConsumed() {\n+    @Test\n+    public void cancelledCalledAfterHandlerEvenIfConsumed() {\n+        setup(setupServiceFactory());\n@@ -1236,1 +1470,3 @@\n-    @Test public void onCancelledHandlerCalled() {\n+    @Test\n+    public void onCancelledHandlerCalled() {\n+        setup(setupServiceFactory());\n@@ -1247,1 +1483,3 @@\n-    @Test public void removed_onCancelledHandlerNotCalled() {\n+    @Test\n+    public void removed_onCancelledHandlerNotCalled() {\n+        setup(setupServiceFactory());\n@@ -1262,1 +1500,3 @@\n-    @Test public void removed_onCancelledFilterNotCalled() {\n+    @Test\n+    public void removed_onCancelledFilterNotCalled() {\n+        setup(setupServiceFactory());\n@@ -1277,1 +1517,3 @@\n-    @Test public void cancelCalledFromOnCancelled() {\n+    @Test\n+    public void cancelCalledFromOnCancelled() {\n+        setup(setupServiceFactory());\n@@ -1293,1 +1535,3 @@\n-    @Test public void cancelCalledFromOnFailed() {\n+    @Test\n+    public void cancelCalledFromOnFailed() {\n+        setup(setupServiceFactory());\n@@ -1315,1 +1559,3 @@\n-    @Test public void onFailedPropertyNameShouldMatchMethodName() {\n+    @Test\n+    public void onFailedPropertyNameShouldMatchMethodName() {\n+        setup(setupServiceFactory());\n@@ -1319,1 +1565,3 @@\n-    @Test public void onFailedBeanShouldMatchService() {\n+    @Test\n+    public void onFailedBeanShouldMatchService() {\n+        setup(setupServiceFactory());\n@@ -1323,1 +1571,3 @@\n-    @Test public void onFailedIsInitializedToNull() {\n+    @Test\n+    public void onFailedIsInitializedToNull() {\n+        setup(setupServiceFactory());\n@@ -1328,1 +1578,3 @@\n-    @Test public void onFailedFilterCalledBefore_onFailed() {\n+    @Test\n+    public void onFailedFilterCalledBefore_onFailed() {\n+        setup(setupServiceFactory());\n@@ -1342,1 +1594,3 @@\n-    @Test public void failedCalledAfterHandler() {\n+    @Test\n+    public void failedCalledAfterHandler() {\n+        setup(setupServiceFactory());\n@@ -1354,1 +1608,3 @@\n-    @Test public void failedCalledAfterHandlerEvenIfConsumed() {\n+    @Test\n+    public void failedCalledAfterHandlerEvenIfConsumed() {\n+        setup(setupServiceFactory());\n@@ -1366,1 +1622,3 @@\n-    @Test public void onFailedHandlerCalled() {\n+    @Test\n+    public void onFailedHandlerCalled() {\n+        setup(setupServiceFactory());\n@@ -1377,1 +1635,3 @@\n-    @Test public void removed_onFailedHandlerNotCalled() {\n+    @Test\n+    public void removed_onFailedHandlerNotCalled() {\n+        setup(setupServiceFactory());\n@@ -1392,1 +1652,3 @@\n-    @Test public void removed_onFailedFilterNotCalled() {\n+    @Test\n+    public void removed_onFailedFilterNotCalled() {\n+        setup(setupServiceFactory());\n@@ -1415,1 +1677,3 @@\n-    @Test public void canCreateServiceOnRandomThread() {\n+    @Test\n+    public void canCreateServiceOnRandomThread() {\n+        setup(setupServiceFactory());\n@@ -1427,1 +1691,3 @@\n-    @Test public void canGetReferencesToPropertiesOnRandomThread() {\n+    @Test\n+    public void canGetReferencesToPropertiesOnRandomThread() {\n+        setup(setupServiceFactory());\n@@ -1455,1 +1721,3 @@\n-    @Test public void canInvokeGettersOnRandomThread() {\n+    @Test\n+    public void canInvokeGettersOnRandomThread() {\n+        setup(setupServiceFactory());\n@@ -1483,1 +1751,3 @@\n-    @Test public void canInvokeSettersOnRandomThread() {\n+    @Test\n+    public void canInvokeSettersOnRandomThread() {\n+        setup(setupServiceFactory());\n@@ -1509,1 +1779,3 @@\n-    @Test public void canInvokeStartOnRandomThread() {\n+    @Test\n+    public void canInvokeStartOnRandomThread() {\n+        setup(setupServiceFactory());\n@@ -1522,1 +1794,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1524,1 +1796,2 @@\n-        assertThrowsException(s -> s.restart());\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> s.restart());\n@@ -1527,1 +1800,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1529,1 +1802,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1534,1 +1808,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1536,3 +1810,3 @@\n-        assertThrowsException(s ->\n-                ServiceShim.setEventHandler(s, WorkerStateEvent.ANY, event -> {\n-        }));\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s ->\n+                ServiceShim.setEventHandler(s, WorkerStateEvent.ANY, event -> { }));\n@@ -1541,1 +1815,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1543,2 +1817,2 @@\n-        assertThrowsException(s -> s.setOnCancelled(event -> {\n-        }));\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> s.setOnCancelled(event -> { }));\n@@ -1547,1 +1821,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1549,1 +1823,2 @@\n-        assertThrowsException(s -> s.setOnFailed(event -> { }));\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> s.setOnFailed(event -> { }));\n@@ -1552,1 +1827,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1554,1 +1829,2 @@\n-        assertThrowsException(s -> s.setOnReady(event -> { }));\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> s.setOnReady(event -> { }));\n@@ -1557,1 +1833,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1559,1 +1835,2 @@\n-        assertThrowsException(s -> s.setOnRunning(event -> { }));\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> s.setOnRunning(event -> { }));\n@@ -1562,1 +1839,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1564,2 +1841,2 @@\n-        assertThrowsException(s -> s.setOnScheduled(event -> {\n-        }));\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> s.setOnScheduled(event -> { }));\n@@ -1568,1 +1845,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1570,1 +1847,2 @@\n-        assertThrowsException(s -> s.setOnSucceeded(event -> { }));\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> s.setOnSucceeded(event -> { }));\n@@ -1573,1 +1851,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1575,1 +1853,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1580,1 +1859,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1582,1 +1861,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1587,1 +1867,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1589,1 +1869,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1594,1 +1875,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1596,1 +1877,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1601,1 +1883,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1603,1 +1885,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1608,1 +1891,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1610,1 +1893,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1615,1 +1899,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1617,1 +1901,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1622,1 +1907,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1624,1 +1909,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1629,1 +1915,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1631,1 +1917,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1636,1 +1923,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1638,1 +1925,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1643,1 +1931,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1645,1 +1933,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1650,1 +1939,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1652,1 +1941,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1657,1 +1947,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1659,1 +1949,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1664,1 +1955,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1666,1 +1957,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1671,1 +1963,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1673,1 +1965,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1678,1 +1971,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1680,1 +1973,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1685,1 +1979,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1687,1 +1981,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1692,1 +1987,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1694,1 +1989,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1699,1 +1995,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1701,1 +1997,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1706,1 +2003,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1708,1 +2005,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1713,1 +2011,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1715,1 +2013,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1720,1 +2019,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1722,1 +2021,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1727,1 +2027,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1729,1 +2029,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1734,1 +2035,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1736,1 +2037,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1741,1 +2043,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1743,1 +2045,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1748,1 +2051,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1750,1 +2053,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1755,1 +2059,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1757,1 +2061,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1762,1 +2067,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1764,1 +2069,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1769,1 +2075,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1771,1 +2077,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1776,1 +2083,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1778,1 +2085,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1783,1 +2091,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1785,1 +2093,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1790,1 +2099,1 @@\n-    @Test (expected = IllegalStateException.class)\n+    @Test\n@@ -1792,1 +2101,2 @@\n-        assertThrowsException(s -> {\n+        setup(setupServiceFactory());\n+        assertThrowsException(IllegalStateException.class, s -> {\n@@ -1797,3 +2107,13 @@\n-    private void assertThrowsException(final ServiceTestExecution c) throws Throwable {\n-        RandomThread random = new RandomThread(() -> {\n-            DoNothingService s = null;\n+    private void assertThrowsException(Class exceptionClass, final ServiceTestExecution c) throws Throwable {\n+        assertThrows(exceptionClass, () -> {\n+            RandomThread random = new RandomThread(() -> {\n+                DoNothingService s = null;\n+                try {\n+                    s = new DoNothingService();\n+                    s.start();\n+                    c.test(s);\n+                } finally {\n+                    if (s != null) s.shutdown();\n+                }\n+            });\n+\n@@ -1801,5 +2121,3 @@\n-                s = new DoNothingService();\n-                s.start();\n-                c.test(s);\n-            } finally {\n-                if (s != null) s.shutdown();\n+                random.test();\n+            } catch (AssertionError er) {\n+                throw er.getCause();\n@@ -1808,6 +2126,0 @@\n-\n-        try {\n-            random.test();\n-        } catch (AssertionError er) {\n-            throw er.getCause();\n-        }\n@@ -1923,1 +2235,3 @@\n-    @Test public void eventFiredOnSubclassWorks() {\n+    @Test\n+    public void eventFiredOnSubclassWorks() {\n+        setup(setupServiceFactory());\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/concurrent\/ServiceLifecycleTest.java","additions":577,"deletions":263,"binary":false,"changes":840,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+\n+import java.util.concurrent.TimeUnit;\n@@ -40,8 +42,10 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assume.assumeTrue;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -54,1 +58,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -76,1 +81,2 @@\n-    @Test public void executorDefaultsToNull() {\n+    @Test\n+    public void executorDefaultsToNull() {\n@@ -86,1 +92,2 @@\n-    @Test public void executorCanBeSet() {\n+    @Test\n+    public void executorCanBeSet() {\n@@ -96,1 +103,2 @@\n-    @Test public void executorCanBeBound() {\n+    @Test\n+    public void executorCanBeBound() {\n@@ -111,1 +119,2 @@\n-    @Test public void executorIsUsed() {\n+    @Test\n+    public void executorIsUsed() {\n@@ -123,1 +132,2 @@\n-    @Test public void stateDefaultsTo_READY() {\n+    @Test\n+    public void stateDefaultsTo_READY() {\n@@ -128,1 +138,2 @@\n-    @Test public void valueDefaultsToNull() {\n+    @Test\n+    public void valueDefaultsToNull() {\n@@ -133,1 +144,2 @@\n-    @Test public void exceptionDefaultsToNull() {\n+    @Test\n+    public void exceptionDefaultsToNull() {\n@@ -138,1 +150,2 @@\n-    @Test public void workDoneDefaultsTo_NegativeOne() {\n+    @Test\n+    public void workDoneDefaultsTo_NegativeOne() {\n@@ -143,1 +156,2 @@\n-    @Test public void totalWorkDefaultsTo_NegativeOne() {\n+    @Test\n+    public void totalWorkDefaultsTo_NegativeOne() {\n@@ -148,1 +162,2 @@\n-    @Test public void progressDefaultsTo_NegativeOne() {\n+    @Test\n+    public void progressDefaultsTo_NegativeOne() {\n@@ -153,1 +168,2 @@\n-    @Test public void runningDefaultsToFalse() {\n+    @Test\n+    public void runningDefaultsToFalse() {\n@@ -158,1 +174,2 @@\n-    @Test public void messageDefaultsToEmptyString() {\n+    @Test\n+    public void messageDefaultsToEmptyString() {\n@@ -163,1 +180,2 @@\n-    @Test public void titleDefaultsToEmptyString() {\n+    @Test\n+    public void titleDefaultsToEmptyString() {\n@@ -175,1 +193,3 @@\n-    @Test(timeout = 2000) public void testManyServicesRunConcurrently() throws Exception {\n+    @Test\n+    @Timeout(value=2000, unit=TimeUnit.MILLISECONDS)\n+    public void testManyServicesRunConcurrently() throws InterruptedException {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/concurrent\/ServiceTest.java","additions":44,"deletions":24,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-import org.junit.Before;\n+\/\/import org.junit.jupiter.api.BeforeEach; NOTE: revert once parametrized classes are added\n@@ -44,1 +44,0 @@\n-    protected abstract TestServiceFactory setupServiceFactory();\n@@ -64,2 +63,5 @@\n-    @Before public void setup() {\n-        factory = setupServiceFactory();\n+    \/\/ NOTE: This should be reverted once parametrized class tests are added to JUnit5\n+    \/\/       For now, tests call this manually\n+    \/\/ @BeforeEach\n+    public void setup(TestServiceFactory factory) {\n+        this.factory = factory;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/concurrent\/ServiceTestBase.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -37,1 +35,6 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -51,1 +54,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -59,1 +63,2 @@\n-    @Test public void cancellingA_READY_TaskShouldChangeStateTo_CANCELLED() {\n+    @Test\n+    public void cancellingA_READY_TaskShouldChangeStateTo_CANCELLED() {\n@@ -70,1 +75,2 @@\n-    @Test public void cancellingA_SCHEDULED_TaskShouldChangeStateTo_CANCELLED() {\n+    @Test\n+    public void cancellingA_SCHEDULED_TaskShouldChangeStateTo_CANCELLED() {\n@@ -87,1 +93,2 @@\n-    @Test public void cancellingA_RUNNING_TaskShouldChangeStateTo_CANCELLED() throws Exception {\n+    @Test\n+    public void cancellingA_RUNNING_TaskShouldChangeStateTo_CANCELLED() throws Exception {\n@@ -105,1 +112,2 @@\n-    @Test public void cancellingA_SUCCEEDED_TaskShouldNotChangeTo_CANCELLED() {\n+    @Test\n+    public void cancellingA_SUCCEEDED_TaskShouldNotChangeTo_CANCELLED() {\n@@ -117,1 +125,2 @@\n-    @Test public void cancellingA_FAILED_TaskShouldNotChangeTo_CANCELLED() {\n+    @Test\n+    public void cancellingA_FAILED_TaskShouldNotChangeTo_CANCELLED() {\n@@ -128,1 +137,2 @@\n-    @Test public void aFreeRunningCancelledTaskReturnValueShouldBeIgnored() throws Exception {\n+    @Test\n+    public void aFreeRunningCancelledTaskReturnValueShouldBeIgnored() throws Exception {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/concurrent\/TaskCancelTest.java","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.junit.Test;\n@@ -39,1 +38,6 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -56,1 +60,2 @@\n-    @Test public void onScheduledPropertyNameShouldMatchMethodName() {\n+    @Test\n+    public void onScheduledPropertyNameShouldMatchMethodName() {\n@@ -61,1 +66,2 @@\n-    @Test public void onScheduledBeanShouldMatchTask() {\n+    @Test\n+    public void onScheduledBeanShouldMatchTask() {\n@@ -66,1 +72,2 @@\n-    @Test public void onScheduledIsInitializedToNull() {\n+    @Test\n+    public void onScheduledIsInitializedToNull() {\n@@ -72,1 +79,2 @@\n-    @Test public void onScheduledCalledWhenSetViaProperty() {\n+    @Test\n+    public void onScheduledCalledWhenSetViaProperty() {\n@@ -82,1 +90,2 @@\n-    @Test public void onScheduledFilterCalledBefore_onScheduled() {\n+    @Test\n+    public void onScheduledFilterCalledBefore_onScheduled() {\n@@ -95,1 +104,2 @@\n-    @Test public void scheduledCalledAfterHandler() {\n+    @Test\n+    public void scheduledCalledAfterHandler() {\n@@ -111,1 +121,2 @@\n-    @Test public void scheduledCalledAfterHandlerEvenIfConsumed() {\n+    @Test\n+    public void scheduledCalledAfterHandlerEvenIfConsumed() {\n@@ -126,1 +137,2 @@\n-    @Test public void onScheduledHandlerCalled() {\n+    @Test\n+    public void onScheduledHandlerCalled() {\n@@ -136,1 +148,2 @@\n-    @Test public void removed_onScheduledHandlerNotCalled() {\n+    @Test\n+    public void removed_onScheduledHandlerNotCalled() {\n@@ -150,1 +163,2 @@\n-    @Test public void removed_onScheduledFilterNotCalled() {\n+    @Test\n+    public void removed_onScheduledFilterNotCalled() {\n@@ -170,1 +184,2 @@\n-    @Test public void onRunningPropertyNameShouldMatchMethodName() {\n+    @Test\n+    public void onRunningPropertyNameShouldMatchMethodName() {\n@@ -175,1 +190,2 @@\n-    @Test public void onRunningBeanShouldMatchTask() {\n+    @Test\n+    public void onRunningBeanShouldMatchTask() {\n@@ -180,1 +196,2 @@\n-    @Test public void onRunningIsInitializedToNull() {\n+    @Test\n+    public void onRunningIsInitializedToNull() {\n@@ -186,1 +203,2 @@\n-    @Test public void onRunningCalledWhenSetViaProperty() {\n+    @Test\n+    public void onRunningCalledWhenSetViaProperty() {\n@@ -196,1 +214,2 @@\n-    @Test public void onRunningFilterCalledBefore_onRunning() {\n+    @Test\n+    public void onRunningFilterCalledBefore_onRunning() {\n@@ -209,1 +228,2 @@\n-    @Test public void runningCalledAfterHandler() {\n+    @Test\n+    public void runningCalledAfterHandler() {\n@@ -224,1 +244,2 @@\n-    @Test public void runningCalledAfterHandlerEvenIfConsumed() {\n+    @Test\n+    public void runningCalledAfterHandlerEvenIfConsumed() {\n@@ -244,1 +265,2 @@\n-    @Test public void onSucceededPropertyNameShouldMatchMethodName() {\n+    @Test\n+    public void onSucceededPropertyNameShouldMatchMethodName() {\n@@ -249,1 +271,2 @@\n-    @Test public void onSucceededBeanShouldMatchTask() {\n+    @Test\n+    public void onSucceededBeanShouldMatchTask() {\n@@ -254,1 +277,2 @@\n-    @Test public void onSucceededIsInitializedToNull() {\n+    @Test\n+    public void onSucceededIsInitializedToNull() {\n@@ -260,1 +284,2 @@\n-    @Test public void onSucceededCalledWhenSetViaProperty() {\n+    @Test\n+    public void onSucceededCalledWhenSetViaProperty() {\n@@ -270,1 +295,2 @@\n-    @Test public void onSucceededFilterCalledBefore_onSucceeded() {\n+    @Test\n+    public void onSucceededFilterCalledBefore_onSucceeded() {\n@@ -282,1 +308,2 @@\n-    @Test public void succeededCalledAfterHandler() {\n+    @Test\n+    public void succeededCalledAfterHandler() {\n@@ -297,1 +324,2 @@\n-    @Test public void succeededCalledAfterHandlerEvenIfConsumed() {\n+    @Test\n+    public void succeededCalledAfterHandlerEvenIfConsumed() {\n@@ -317,1 +345,2 @@\n-    @Test public void onCancelledPropertyNameShouldMatchMethodName() {\n+    @Test\n+    public void onCancelledPropertyNameShouldMatchMethodName() {\n@@ -322,1 +351,2 @@\n-    @Test public void onCancelledBeanShouldMatchTask() {\n+    @Test\n+    public void onCancelledBeanShouldMatchTask() {\n@@ -327,1 +357,2 @@\n-    @Test public void onCancelledIsInitializedToNull() {\n+    @Test\n+    public void onCancelledIsInitializedToNull() {\n@@ -333,1 +364,2 @@\n-    @Test public void onCancelledCalledWhenSetViaProperty() throws Exception {\n+    @Test\n+    public void onCancelledCalledWhenSetViaProperty() throws Exception {\n@@ -346,1 +378,2 @@\n-    @Test public void onCancelledFilterCalledBefore_onCancelled() throws Exception {\n+    @Test\n+    public void onCancelledFilterCalledBefore_onCancelled() throws Exception {\n@@ -361,1 +394,2 @@\n-    @Test public void cancelledCalledAfterHandler() throws Exception {\n+    @Test\n+    public void cancelledCalledAfterHandler() throws Exception {\n@@ -379,1 +413,2 @@\n-    @Test public void cancelledCalledAfterHandlerEvenIfConsumed() throws Exception {\n+    @Test\n+    public void cancelledCalledAfterHandlerEvenIfConsumed() throws Exception {\n@@ -402,1 +437,2 @@\n-    @Test public void onFailedPropertyNameShouldMatchMethodName() {\n+    @Test\n+    public void onFailedPropertyNameShouldMatchMethodName() {\n@@ -407,1 +443,2 @@\n-    @Test public void onFailedBeanShouldMatchTask() {\n+    @Test\n+    public void onFailedBeanShouldMatchTask() {\n@@ -412,1 +449,2 @@\n-    @Test public void onFailedIsInitializedToNull() {\n+    @Test\n+    public void onFailedIsInitializedToNull() {\n@@ -418,1 +456,2 @@\n-    @Test public void onFailedCalledWhenSetViaProperty() {\n+    @Test\n+    public void onFailedCalledWhenSetViaProperty() {\n@@ -428,1 +467,2 @@\n-    @Test public void onFailedFilterCalledBefore_onFailed() {\n+    @Test\n+    public void onFailedFilterCalledBefore_onFailed() {\n@@ -440,1 +480,2 @@\n-    @Test public void failedCalledAfterHandler() {\n+    @Test\n+    public void failedCalledAfterHandler() {\n@@ -455,1 +496,2 @@\n-    @Test public void failedCalledAfterHandlerEvenIfConsumed() {\n+    @Test\n+    public void failedCalledAfterHandlerEvenIfConsumed() {\n@@ -476,1 +518,2 @@\n-    @Test public void eventFiredOnSubclassWorks() {\n+    @Test\n+    public void eventFiredOnSubclassWorks() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/concurrent\/TaskEventTest.java","additions":85,"deletions":42,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -34,4 +33,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n@@ -39,1 +34,6 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n@@ -41,1 +41,0 @@\n-@RunWith(Parameterized.class)\n@@ -43,7 +42,8 @@\n-    @Parameterized.Parameters public static Collection implementations() {\n-        return Arrays.asList(new Object[][]{\n-                {new Exception(\"Exception\")},\n-                {new IllegalArgumentException(\"IAE\")},\n-                {new NullPointerException(\"NPE\")},\n-                {new RuntimeException(\"RuntimeException\")}\n-        });\n+\n+    public static Stream<Arguments> implementations() {\n+        return Stream.of(\n+            Arguments.of(new Exception(\"Exception\")),\n+            Arguments.of(new IllegalArgumentException(\"IAE\")),\n+            Arguments.of(new NullPointerException(\"NPE\")),\n+            Arguments.of(new RuntimeException(\"RuntimeException\"))\n+        );\n@@ -52,1 +52,0 @@\n-    private Exception exception;\n@@ -55,5 +54,1 @@\n-    public TaskExceptionTest(Exception th) {\n-        this.exception = th;\n-    }\n-\n-    @Before public void setup() {\n+    public void setup(Exception exception) {\n@@ -69,1 +64,4 @@\n-    @Test public void afterRunningExceptionShouldBeSet() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void afterRunningExceptionShouldBeSet(Exception exception) {\n+        setup(exception); \/\/ NOTE this should be a @BeforeEach call, restore after JUnit5 adds Parametrized classes\n@@ -74,1 +72,4 @@\n-    @Test public void afterRunningValueShouldBe_Null() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void afterRunningValueShouldBe_Null(Exception exception) {\n+        setup(exception); \/\/ NOTE this should be a @BeforeEach call, restore after JUnit5 adds Parametrized classes\n@@ -79,1 +80,4 @@\n-    @Test public void afterRunningWorkDoneShouldBe_10() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void afterRunningWorkDoneShouldBe_10(Exception exception) {\n+        setup(exception); \/\/ NOTE this should be a @BeforeEach call, restore after JUnit5 adds Parametrized classes\n@@ -84,1 +88,4 @@\n-    @Test public void afterRunningTotalWorkShouldBe_20() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void afterRunningTotalWorkShouldBe_20(Exception exception) {\n+        setup(exception); \/\/ NOTE this should be a @BeforeEach call, restore after JUnit5 adds Parametrized classes\n@@ -89,1 +96,4 @@\n-    @Test public void afterRunningProgressShouldBe_FiftyPercent() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void afterRunningProgressShouldBe_FiftyPercent(Exception exception) {\n+        setup(exception); \/\/ NOTE this should be a @BeforeEach call, restore after JUnit5 adds Parametrized classes\n@@ -94,1 +104,4 @@\n-    @Test public void afterRunningStateShouldBe_FAILED() {\n+    @ParameterizedTest\n+    @MethodSource(\"implementations\")\n+    public void afterRunningStateShouldBe_FAILED(Exception exception) {\n+        setup(exception); \/\/ NOTE this should be a @BeforeEach call, restore after JUnit5 adds Parametrized classes\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/concurrent\/TaskExceptionTest.java","additions":41,"deletions":28,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -34,1 +32,3 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -45,1 +45,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -54,1 +55,2 @@\n-    @Test public void afterRunningWorkDoneShouldBe_20() {\n+    @Test\n+    public void afterRunningWorkDoneShouldBe_20() {\n@@ -59,1 +61,2 @@\n-    @Test public void afterRunningTotalWorkShouldBe_20() {\n+    @Test\n+    public void afterRunningTotalWorkShouldBe_20() {\n@@ -64,1 +67,2 @@\n-    @Test public void afterRunningProgressShouldBe_1() {\n+    @Test\n+    public void afterRunningProgressShouldBe_1() {\n@@ -74,1 +78,2 @@\n-    @Test public void updateProgress_Long_0_100() {\n+    @Test\n+    public void updateProgress_Long_0_100() {\n@@ -81,1 +86,2 @@\n-    @Test public void updateProgress_Long_n1_100() {\n+    @Test\n+    public void updateProgress_Long_n1_100() {\n@@ -88,1 +94,2 @@\n-    @Test public void updateProgress_Long_n10_100() {\n+    @Test\n+    public void updateProgress_Long_n10_100() {\n@@ -95,1 +102,2 @@\n-    @Test public void updateProgress_Long_MIN_VALUE_100() {\n+    @Test\n+    public void updateProgress_Long_MIN_VALUE_100() {\n@@ -102,1 +110,2 @@\n-    @Test public void updateProgress_Long_10_100() {\n+    @Test\n+    public void updateProgress_Long_10_100() {\n@@ -109,1 +118,2 @@\n-    @Test public void updateProgress_Long_100_100() {\n+    @Test\n+    public void updateProgress_Long_100_100() {\n@@ -116,1 +126,2 @@\n-    @Test public void updateProgress_Long_110_100() {\n+    @Test\n+    public void updateProgress_Long_110_100() {\n@@ -123,1 +134,2 @@\n-    @Test public void updateProgress_Long_MAX_VALUE_100() {\n+    @Test\n+    public void updateProgress_Long_MAX_VALUE_100() {\n@@ -130,1 +142,2 @@\n-    @Test public void updateProgress_Long_0_n1() {\n+    @Test\n+    public void updateProgress_Long_0_n1() {\n@@ -137,1 +150,2 @@\n-    @Test public void updateProgress_Long_0_n10() {\n+    @Test\n+    public void updateProgress_Long_0_n10() {\n@@ -144,1 +158,2 @@\n-    @Test public void updateProgress_Long_0_MIN_VALUE() {\n+    @Test\n+    public void updateProgress_Long_0_MIN_VALUE() {\n@@ -151,1 +166,2 @@\n-    @Test public void updateProgress_Long_100_10() {\n+    @Test\n+    public void updateProgress_Long_100_10() {\n@@ -158,1 +174,2 @@\n-    @Test public void updateProgress_Long_100_MAX_VALUE() {\n+    @Test\n+    public void updateProgress_Long_100_MAX_VALUE() {\n@@ -166,1 +183,2 @@\n-    @Test public void updateProgress_Double_Infinity_100() {\n+    @Test\n+    public void updateProgress_Double_Infinity_100() {\n@@ -173,1 +191,2 @@\n-    @Test public void updateProgress_Double_NInfinity_100() {\n+    @Test\n+    public void updateProgress_Double_NInfinity_100() {\n@@ -180,1 +199,2 @@\n-    @Test public void updateProgress_Double_NaN_100() {\n+    @Test\n+    public void updateProgress_Double_NaN_100() {\n@@ -187,1 +207,2 @@\n-    @Test public void updateProgress_Double_0_Infinity() {\n+    @Test\n+    public void updateProgress_Double_0_Infinity() {\n@@ -194,1 +215,2 @@\n-    @Test public void updateProgress_Double_0_NInfinity() {\n+    @Test\n+    public void updateProgress_Double_0_NInfinity() {\n@@ -201,1 +223,2 @@\n-    @Test public void updateProgress_Double_0_NaN() {\n+    @Test\n+    public void updateProgress_Double_0_NaN() {\n@@ -208,1 +231,2 @@\n-    @Test public void updateProgress_Double_Infinity_Infinity() {\n+    @Test\n+    public void updateProgress_Double_Infinity_Infinity() {\n@@ -215,1 +239,2 @@\n-    @Test public void updateProgress_Double_NInfinity_Infinity() {\n+    @Test\n+    public void updateProgress_Double_NInfinity_Infinity() {\n@@ -222,1 +247,2 @@\n-    @Test public void updateProgress_Double_Infinity_NInfinity() {\n+    @Test\n+    public void updateProgress_Double_Infinity_NInfinity() {\n@@ -229,1 +255,2 @@\n-    @Test public void updateProgress_Double_NInfinity_NInfinity() {\n+    @Test\n+    public void updateProgress_Double_NInfinity_NInfinity() {\n@@ -236,1 +263,2 @@\n-    @Test public void updateProgress_Double_Infinity_NaN() {\n+    @Test\n+    public void updateProgress_Double_Infinity_NaN() {\n@@ -243,1 +271,2 @@\n-    @Test public void updateProgress_Double_NInfinity_NaN() {\n+    @Test\n+    public void updateProgress_Double_NInfinity_NaN() {\n@@ -250,1 +279,2 @@\n-    @Test public void updateProgress_Double_NaN_Infinity() {\n+    @Test\n+    public void updateProgress_Double_NaN_Infinity() {\n@@ -257,1 +287,2 @@\n-    @Test public void updateProgress_Double_NaN_NInfinity() {\n+    @Test\n+    public void updateProgress_Double_NaN_NInfinity() {\n@@ -264,1 +295,2 @@\n-    @Test public void updateProgress_Double_NaN_NaN() {\n+    @Test\n+    public void updateProgress_Double_NaN_NaN() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/concurrent\/TaskProgressTest.java","additions":68,"deletions":36,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -37,1 +35,6 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -47,1 +50,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -65,1 +69,2 @@\n-    @Test public void stateShouldBe_READY_ByDefault() {\n+    @Test\n+    public void stateShouldBe_READY_ByDefault() {\n@@ -69,1 +74,2 @@\n-    @Test public void workDoneShouldBe_Indeterminate_ByDefault() {\n+    @Test\n+    public void workDoneShouldBe_Indeterminate_ByDefault() {\n@@ -73,1 +79,2 @@\n-    @Test public void totalWorkShouldBe_Indeterminate_ByDefault() {\n+    @Test\n+    public void totalWorkShouldBe_Indeterminate_ByDefault() {\n@@ -77,1 +84,2 @@\n-    @Test public void progressShouldBe_Indeterminate_ByDefault() {\n+    @Test\n+    public void progressShouldBe_Indeterminate_ByDefault() {\n@@ -81,1 +89,2 @@\n-    @Test public void valueShouldBe_Null_ByDefault() {\n+    @Test\n+    public void valueShouldBe_Null_ByDefault() {\n@@ -85,1 +94,2 @@\n-    @Test public void exceptionShouldBe_Null_ByDefault() {\n+    @Test\n+    public void exceptionShouldBe_Null_ByDefault() {\n@@ -89,1 +99,2 @@\n-    @Test public void runningShouldBe_False_ByDefault() {\n+    @Test\n+    public void runningShouldBe_False_ByDefault() {\n@@ -93,1 +104,2 @@\n-    @Test public void messageShouldBe_EmptyString_ByDefault() {\n+    @Test\n+    public void messageShouldBe_EmptyString_ByDefault() {\n@@ -97,1 +109,2 @@\n-    @Test public void titleShouldBe_EmptyString_ByDefault() {\n+    @Test\n+    public void titleShouldBe_EmptyString_ByDefault() {\n@@ -101,1 +114,2 @@\n-    @Test public void isCancelledShouldBe_False_ByDefault() {\n+    @Test\n+    public void isCancelledShouldBe_False_ByDefault() {\n@@ -105,1 +119,2 @@\n-    @Test public void isDoneShouldBe_False_ByDefault() {\n+    @Test\n+    public void isDoneShouldBe_False_ByDefault() {\n@@ -117,1 +132,2 @@\n-    @Test public void afterRunningStatesShouldHaveBeen_SCHEDULED_RUNNING_SUCCEEDED() {\n+    @Test\n+    public void afterRunningStatesShouldHaveBeen_SCHEDULED_RUNNING_SUCCEEDED() {\n@@ -132,1 +148,2 @@\n-    @Test public void afterRunningWorkDoneShouldBe_Indeterminate() {\n+    @Test\n+    public void afterRunningWorkDoneShouldBe_Indeterminate() {\n@@ -137,1 +154,2 @@\n-    @Test public void afterRunningTotalWorkShouldBe_Indeterminate() {\n+    @Test\n+    public void afterRunningTotalWorkShouldBe_Indeterminate() {\n@@ -142,1 +160,2 @@\n-    @Test public void afterRunningProgressShouldBe_Indeterminate() {\n+    @Test\n+    public void afterRunningProgressShouldBe_Indeterminate() {\n@@ -147,1 +166,2 @@\n-    @Test public void afterRunningValueShouldBe_Finished() {\n+    @Test\n+    public void afterRunningValueShouldBe_Finished() {\n@@ -152,1 +172,2 @@\n-    @Test public void afterRunningExceptionShouldBe_Null() {\n+    @Test\n+    public void afterRunningExceptionShouldBe_Null() {\n@@ -157,1 +178,2 @@\n-    @Test public void afterRunningMessageShouldBe_EmptyString() {\n+    @Test\n+    public void afterRunningMessageShouldBe_EmptyString() {\n@@ -162,1 +184,2 @@\n-    @Test public void afterRunningTitleShouldBe_EmptyString() {\n+    @Test\n+    public void afterRunningTitleShouldBe_EmptyString() {\n@@ -167,1 +190,2 @@\n-    @Test public void afterRunning_isCancelled_ShouldBe_False() {\n+    @Test\n+    public void afterRunning_isCancelled_ShouldBe_False() {\n@@ -172,1 +196,2 @@\n-    @Test public void afterRunning_isDone_ShouldBe_True() {\n+    @Test\n+    public void afterRunning_isDone_ShouldBe_True() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/concurrent\/TaskSimpleTest.java","additions":51,"deletions":26,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,5 +33,5 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n-import static org.junit.Assume.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -55,1 +55,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/concurrent\/TaskSwampEventQueueTest.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,4 +38,0 @@\n-import static org.junit.Assert.*;\n-import static org.junit.Assert.assertEquals;\n-\n-import org.junit.Test;\n@@ -43,0 +39,3 @@\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -49,2 +48,1 @@\n-    private void checkTokens(List<TokenShim> resultTokens, TokenShim... expectedTokens)\n-        throws org.junit.ComparisonFailure {\n+    private void checkTokens(List<TokenShim> resultTokens, TokenShim... expectedTokens) {\n@@ -53,4 +51,4 @@\n-            throw new org.junit.ComparisonFailure(\n-                \"lengths do not match\",\n-                    Arrays.toString(expectedTokens),\n-                resultTokens.toString()\n+            fail(\n+                \"lengths do not match; \" +\n+                \"expected: \" + Arrays.toString(expectedTokens) +\n+                \"actual: \" + resultTokens.toString()\n@@ -59,1 +57,0 @@\n-\n@@ -66,4 +63,4 @@\n-                throw new org.junit.ComparisonFailure(\n-                    \"token \" + n + \" types do not match\",\n-                    Arrays.toString(expectedTokens),\n-                    resultTokens.toString()\n+                fail(\n+                    \"token \" + n + \" types do not match; \" +\n+                    \"expected: \" + Arrays.toString(expectedTokens) +\n+                    \"actual: \" + resultTokens.toString()\n@@ -77,4 +74,4 @@\n-                throw new org.junit.ComparisonFailure(\n-                    \"token \" + n + \" text does not match\",\n-                    Arrays.toString(expectedTokens),\n-                    resultTokens.toString()\n+                fail(\n+                    \"token \" + n + \" text does not match; \" +\n+                    \"expected: \" + Arrays.toString(expectedTokens) +\n+                    \"actual: \" + resultTokens.toString()\n@@ -103,1 +100,1 @@\n-    private void lexDigitsWithUnits(String units, int type) throws org.junit.ComparisonFailure {\n+    private void lexDigitsWithUnits(String units, int type) {\n@@ -326,2 +323,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n@@ -358,2 +355,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n@@ -390,2 +387,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n@@ -422,2 +419,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n@@ -448,2 +445,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n@@ -474,2 +471,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n@@ -502,2 +499,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n@@ -527,2 +524,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n@@ -552,2 +549,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n@@ -579,2 +576,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n@@ -606,2 +603,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n@@ -631,2 +628,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n@@ -670,2 +667,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n@@ -691,2 +688,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n@@ -713,2 +710,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n@@ -735,2 +732,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n@@ -757,2 +754,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n@@ -779,2 +776,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n@@ -801,2 +798,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n@@ -823,2 +820,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n@@ -845,2 +842,2 @@\n-            assertEquals(\"bad line. tok=\"+tok, expected[n].getLine(), tok.getLine());\n-            assertEquals(\"bad offset. tok=\"+tok, expected[n].getOffset(), tok.getOffset());\n+            assertEquals(expected[n].getLine(), tok.getLine(), \"bad line. tok=\"+tok);\n+            assertEquals(expected[n].getOffset(), tok.getOffset(), \"bad offset. tok=\"+tok);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/CssLexerTest.java","additions":60,"deletions":63,"binary":false,"changes":123,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,5 +80,9 @@\n-import org.junit.After;\n-import org.junit.Test;\n-import org.junit.Ignore;\n-\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Disabled;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -114,1 +118,1 @@\n-    @After\n+    @AfterEach\n@@ -277,1 +281,1 @@\n-    @Ignore(\"JDK-8234142\")\n+    @Disabled(\"JDK-8234142\")\n@@ -383,1 +387,1 @@\n-    @Ignore(\"JDK-8234142\")\n+    @Disabled(\"JDK-8234142\")\n@@ -506,1 +510,1 @@\n-    @Ignore(\"JDK-8234142\")\n+    @Disabled(\"JDK-8234142\")\n@@ -630,1 +634,1 @@\n-    @Ignore(\"JDK-8234142\")\n+    @Disabled(\"JDK-8234142\")\n@@ -758,1 +762,1 @@\n-    @Ignore(\"JDK-8234142\")\n+    @Disabled(\"JDK-8234142\")\n@@ -867,1 +871,1 @@\n-    @Ignore(\"JDK-8234142\")\n+    @Disabled(\"JDK-8234142\")\n@@ -970,1 +974,1 @@\n-        assertTrue(actuals.toString(), actuals.isEmpty());\n+        assertTrue(actuals.isEmpty(), actuals.toString());\n@@ -973,1 +977,1 @@\n-    @Ignore(\"JDK-8234142\")\n+    @Disabled(\"JDK-8234142\")\n@@ -1054,1 +1058,1 @@\n-    @Ignore(\"JDK-8234142\")\n+    @Disabled(\"JDK-8234142\")\n@@ -1151,1 +1155,1 @@\n-            assertTrue(\"\" + f.getCanonicalPath() + \" is not a directory\", f.isDirectory());\n+            assertTrue(f.isDirectory(), \"\" + f.getCanonicalPath() + \" is not a directory\");\n@@ -1176,1 +1180,1 @@\n-                    assertNotNull(what, writable);\n+                    assertNotNull(writable, what);\n@@ -1187,1 +1191,1 @@\n-                        assertEquals(what, d1, d2, .001);\n+                        assertEquals(d1, d2, .001, what);\n@@ -1190,1 +1194,1 @@\n-                        assertTrue(what, Arrays.equals((Object[])defaultValue, (Object[])initialValue));\n+                        assertTrue(Arrays.equals((Object[])defaultValue, (Object[])initialValue), what);\n@@ -1192,1 +1196,1 @@\n-                        assertEquals(what, defaultValue, initialValue);\n+                        assertEquals(defaultValue, initialValue, what);\n@@ -1241,1 +1245,1 @@\n-    @Ignore(\"JDK-8234143\") \/\/ Tested CssMetaData#set method, which is deprecated.\n+    @Disabled(\"JDK-8234143\") \/\/ Tested CssMetaData#set method, which is deprecated.\n@@ -1281,1 +1285,1 @@\n-    @Ignore(\"JDK-8234142\")\n+    @Disabled(\"JDK-8234142\")\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/CssMetaDataTest.java","additions":27,"deletions":23,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,2 +53,8 @@\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n@@ -67,1 +73,1 @@\n-        assertNull(\"parseExpr\", result);\n+        assertNull(result, \"parseExpr\");\n@@ -151,1 +157,1 @@\n-        assertNull(\"parseExpr\", result);\n+        assertNull(result, \"parseExpr\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/CssParserTest.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import java.util.Collection;\n@@ -34,0 +33,1 @@\n+import java.util.stream.Stream;\n@@ -41,2 +41,0 @@\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n@@ -44,3 +42,4 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -48,1 +47,0 @@\n-@RunWith(Parameterized.class)\n@@ -65,8 +63,1 @@\n-    public DeclarationTest(Data data) {\n-        this.data = data;\n-    }\n-    private final Data data;\n-\n-\n-    @Parameters\n-    public static Collection data() {\n+    public static Stream<Arguments> data() {\n@@ -126,5 +117,5 @@\n-        return Arrays.asList(new Object[] {\n-            new Object[] { new Data(DECLS[GA1], DECLS[GA2], true) },\n-            new Object[] { new Data(DECLS[GA1], DECLS[YA1], false) },\n-            new Object[] { new Data(DECLS[GA1], DECLS[GI],  false) }\n-        });\n+        return Stream.of(\n+            Arguments.of(new Data(DECLS[GA1], DECLS[GA2], true)),\n+            Arguments.of(new Data(DECLS[GA1], DECLS[YA1], false)),\n+            Arguments.of(new Data(DECLS[GA1], DECLS[GI],  false))\n+        );\n@@ -133,3 +124,3 @@\n-    @Test\n-    public void testEquals() {\n-\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testEquals(Data data) {\n@@ -140,2 +131,1 @@\n-        assertTrue(data.toString(), expected == actual);\n-\n+        assertTrue(expected == actual, data.toString());\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/DeclarationTest.java","additions":16,"deletions":26,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,2 @@\n-import static org.junit.Assert.*;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -53,2 +53,2 @@\n-        assertEquals(\"family\", expResult.getFamily(), result.getFamily());\n-        assertEquals(\"size\", expResult.getSize(), result.getSize(), 0.001);\n+        assertEquals(expResult.getFamily(), result.getFamily(), \"family\");\n+        assertEquals(expResult.getSize(), result.getSize(), 0.001, \"size\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/FontTypeTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import static org.junit.Assert.*;\n-\n@@ -41,5 +39,9 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import static org.junit.Assume.assumeTrue;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -68,1 +70,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -75,1 +77,1 @@\n-    @After\n+    @AfterEach\n@@ -80,1 +82,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/HonorDeveloperSettingsTest.java","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -32,3 +31,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n@@ -39,0 +35,4 @@\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n@@ -61,1 +61,1 @@\n-    @Before\n+    @BeforeEach\n@@ -96,4 +96,4 @@\n-        assertEquals(msg + \"top\", expResult.getTop(), result.getTop(), 0.01);\n-        assertEquals(msg + \"right\", expResult.getRight(), result.getRight(), 0.01);\n-        assertEquals(msg + \"bottom\", expResult.getBottom(), result.getBottom(), 0.01);\n-        assertEquals(msg + \"left\", expResult.getLeft(), result.getLeft(), 0.01);\n+        assertEquals(expResult.getTop(), result.getTop(), 0.01, msg + \"top\");\n+        assertEquals(expResult.getRight(), result.getRight(), 0.01, msg + \"right\");\n+        assertEquals(expResult.getBottom(), result.getBottom(), 0.01, msg + \"bottom\");\n+        assertEquals(expResult.getLeft(), result.getLeft(), 0.01, msg + \"left\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/InsetsTypeTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-\n@@ -42,1 +41,0 @@\n-import static org.junit.Assert.*;\n@@ -44,3 +42,5 @@\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -62,1 +62,1 @@\n-    @Before\n+    @BeforeEach\n@@ -67,1 +67,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/Node_cssStateTransition_Test.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,5 +60,6 @@\n-import static org.junit.Assert.*;\n-\n-import org.junit.After;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -92,1 +93,1 @@\n-        assertNotNull(pname, declaration);\n+        assertNotNull(declaration, pname);\n@@ -101,1 +102,1 @@\n-        assertNotNull(pname, style);\n+        assertNotNull(style, pname);\n@@ -116,1 +117,1 @@\n-    @After\n+    @AfterEach\n@@ -121,1 +122,1 @@\n-    @Ignore(\"JDK-8234241\")\n+    @Disabled(\"JDK-8234241\")\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/Node_cssStyleMap_Test.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,3 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -183,1 +184,1 @@\n-                assertEquals(msg, expResults[i][j], paints[j][0]);\n+                assertEquals(expResults[i][j], paints[j][0], msg);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/PaintTypeTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,4 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-\n@@ -39,2 +35,0 @@\n-import org.junit.Test;\n-\n@@ -50,0 +44,6 @@\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n@@ -409,1 +409,1 @@\n-            org.junit.Assert.fail(parsedValue.toString());\n+            fail(parsedValue.toString());\n@@ -498,1 +498,1 @@\n-            org.junit.Assert.assertEquals(parsedValue, pv);\n+            assertEquals(parsedValue, pv);\n@@ -501,1 +501,1 @@\n-            org.junit.Assert.fail(parsedValue.toString());\n+            fail(parsedValue.toString());\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/ParsedValueTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,5 +45,8 @@\n-import org.junit.AfterClass;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n-import org.junit.BeforeClass;\n-import org.junit.Ignore;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -57,1 +60,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -61,1 +64,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -156,1 +159,1 @@\n-    @Ignore(\"JDK-8234154\")\n+    @Disabled(\"JDK-8234154\")\n@@ -168,1 +171,1 @@\n-    @Ignore(\"JDK-8234154\")\n+    @Disabled(\"JDK-8234154\")\n@@ -179,1 +182,1 @@\n-    @Ignore(\"JDK-8234154\")\n+    @Disabled(\"JDK-8234154\")\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/RuleTest.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -43,2 +43,0 @@\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n@@ -46,3 +44,5 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -50,1 +50,0 @@\n-@RunWith(Parameterized.class)\n@@ -53,2 +52,1 @@\n-    public SelectorPartitioningTest(final Data data) {\n-        this.data = data;\n+    public SelectorPartitioningTest() {\n@@ -57,1 +55,0 @@\n-    private final Data data;\n@@ -124,2 +121,1 @@\n-    @Parameters\n-    public static Collection data() {\n+    public static Stream<Arguments> data() {\n@@ -130,1 +126,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of (\n@@ -132,1 +128,1 @@\n-            new Object[] {new SimpleData(\"*\", null, null, Color.rgb(red += 10, 0, 0))},\n+            Arguments.of(new SimpleData(\"*\", null, null, Color.rgb(red += 10, 0, 0))),\n@@ -134,1 +130,1 @@\n-            new Object[] {new SimpleData(\"A\", null, null, Color.rgb(red += 10, 0, 0))},\n+            Arguments.of(new SimpleData(\"A\", null, null, Color.rgb(red += 10, 0, 0))),\n@@ -136,1 +132,1 @@\n-            new Object[] {new SimpleData(\"A\", \"b\", null, Color.rgb(red += 10, 0, 0))},\n+            Arguments.of(new SimpleData(\"A\", \"b\", null, Color.rgb(red += 10, 0, 0))),\n@@ -138,1 +134,1 @@\n-            new Object[] {new SimpleData(\"A\", null, \"c\", Color.rgb(red += 10, 0, 0))},\n+            Arguments.of(new SimpleData(\"A\", null, \"c\", Color.rgb(red += 10, 0, 0))),\n@@ -140,1 +136,1 @@\n-            new Object[] {new SimpleData(\"A\", \"b\", \"c\", Color.rgb(red += 10, 0, 0))},\n+            Arguments.of(new SimpleData(\"A\", \"b\", \"c\", Color.rgb(red += 10, 0, 0))),\n@@ -142,1 +138,1 @@\n-            new Object[] {new SimpleData(\"*\", \"b\", null, Color.rgb(red += 10, 0, 0))},\n+            Arguments.of(new SimpleData(\"*\", \"b\", null, Color.rgb(red += 10, 0, 0))),\n@@ -144,1 +140,1 @@\n-            new Object[] {new SimpleData(\"*\", null, \"c\", Color.rgb(red += 10, 0, 0))},\n+            Arguments.of(new SimpleData(\"*\", null, \"c\", Color.rgb(red += 10, 0, 0))),\n@@ -146,1 +142,1 @@\n-            new Object[] {new SimpleData(\"*\", \"b\", \"c\", Color.rgb(red += 10, 0, 0))},\n+            Arguments.of(new SimpleData(\"*\", \"b\", \"c\", Color.rgb(red += 10, 0, 0))),\n@@ -148,1 +144,1 @@\n-            new Object[] {\n+            Arguments.of(\n@@ -154,2 +150,2 @@\n-                )},\n-            new Object[] {\n+                )),\n+            Arguments.of(\n@@ -161,2 +157,2 @@\n-                )},\n-            new Object[] {\n+                )),\n+            Arguments.of(\n@@ -170,2 +166,2 @@\n-                )},\n-            new Object[] {\n+                )),\n+            Arguments.of(\n@@ -179,2 +175,2 @@\n-                )},\n-            new Object[] {\n+                )),\n+            Arguments.of(\n@@ -188,2 +184,2 @@\n-                )}\n-        });\n+                ))\n+        );\n@@ -192,2 +188,3 @@\n-    @Test\n-    public void testSelectorPartitionAndMatch() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testSelectorPartitionAndMatch(Data data) {\n@@ -229,3 +226,3 @@\n-        assertEquals(simpleData.selector.toString(), data.color.getRed(), color.getRed(), 0.00001);\n-        assertEquals(simpleData.selector.toString(), data.color.getGreen(), color.getGreen(), 0.00001);\n-        assertEquals(simpleData.selector.toString(), data.color.getBlue(), color.getBlue(), 0.00001);\n+        assertEquals(simpleData.color.getRed(), color.getRed(), 0.00001, simpleData.selector.toString());\n+        assertEquals(simpleData.color.getGreen(), color.getGreen(), 0.00001, simpleData.selector.toString());\n+        assertEquals(simpleData.color.getBlue(), color.getBlue(), 0.00001, simpleData.selector.toString());\n@@ -246,1 +243,1 @@\n-                    assertTrue(s1.toString() + \" != \" + s2.toString(), datum.matches);\n+                    assertTrue(datum.matches, s1.toString() + \" != \" + s2.toString());\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/SelectorPartitioningTest.java","additions":35,"deletions":38,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -34,1 +33,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -57,1 +57,1 @@\n-        assertEquals(\"px\", expResult, result, 0.01);\n+        assertEquals(expResult, result, 0.01, \"px\");\n@@ -62,1 +62,1 @@\n-        assertEquals(\"pt\", expResult, result, 0.01);\n+        assertEquals(expResult, result, 0.01, \"pt\");\n@@ -67,1 +67,1 @@\n-        assertEquals(\"%\", expResult, result, 0.01);\n+        assertEquals(expResult, result, 0.01, \"%\");\n@@ -72,1 +72,1 @@\n-        assertEquals(\"em\", expResult, result, 0.01);\n+        assertEquals(expResult, result, 0.01, \"em\");\n@@ -77,1 +77,1 @@\n-        assertEquals(\"ex\", expResult, result, 0.01);\n+        assertEquals(expResult, result, 0.01, \"ex\");\n@@ -83,1 +83,1 @@\n-        assertEquals(\"cm\", expResult, result, 0.01);\n+        assertEquals(expResult, result, 0.01, \"cm\");\n@@ -88,1 +88,1 @@\n-        assertEquals(\"mm\", expResult, result, 0.01);\n+        assertEquals(expResult, result, 0.01, \"mm\");\n@@ -93,1 +93,1 @@\n-        assertEquals(\"in\", expResult, result, 0.01);\n+        assertEquals(expResult, result, 0.01, \"in\");\n@@ -98,1 +98,1 @@\n-        assertEquals(\"pc\", expResult, result, 0.01);\n+        assertEquals(expResult, result, 0.01, \"pc\");\n@@ -114,1 +114,1 @@\n-        assertEquals(\"px\", expResult, result, 0.01);\n+        assertEquals(expResult, result, 0.01, \"px\");\n@@ -119,1 +119,1 @@\n-        assertEquals(\"pt\", expResult, result, 0.01);\n+        assertEquals(expResult, result, 0.01, \"pt\");\n@@ -124,1 +124,1 @@\n-        assertEquals(\"%\", expResult, result, 0.01);\n+        assertEquals(expResult, result, 0.01, \"%\");\n@@ -129,1 +129,1 @@\n-        assertEquals(\"em\", expResult, result, 0.01);\n+        assertEquals(expResult, result, 0.01, \"em\");\n@@ -134,1 +134,1 @@\n-        assertEquals(\"ex\", expResult, result, 0.01);\n+        assertEquals(expResult, result, 0.01, \"ex\");\n@@ -140,1 +140,1 @@\n-        assertEquals(\"cm\", expResult, result, 0.01);\n+        assertEquals(expResult, result, 0.01, \"cm\");\n@@ -146,1 +146,1 @@\n-        assertEquals(\"mm\", expResult, result, 0.01f);\n+        assertEquals(expResult, result, 0.01f, \"mm\");\n@@ -151,1 +151,1 @@\n-        assertEquals(\"in\", expResult, result, 0.01f);\n+        assertEquals(expResult, result, 0.01f, \"in\");\n@@ -157,1 +157,1 @@\n-        assertEquals(\"pc\", expResult, result, 0.01f);\n+        assertEquals(expResult, result, 0.01f, \"pc\");\n@@ -174,1 +174,1 @@\n-        assertEquals(\"1\/2pi rad to deg\", expResult, result, 0.01);\n+        assertEquals(expResult, result, 0.01, \"1\/2pi rad to deg\");\n@@ -178,1 +178,1 @@\n-        assertEquals(\"100grad to deg\", expResult, result, 0.01);\n+        assertEquals(expResult, result, 0.01, \"100grad to deg\");\n@@ -182,1 +182,1 @@\n-        assertEquals(\".25turn to deg\", expResult, result, 0.01);\n+        assertEquals(expResult, result, 0.01, \".25turn to deg\");\n@@ -195,1 +195,1 @@\n-        assertEquals(\"90s\", expResult, result, 0.01);\n+        assertEquals(expResult, result, 0.01, \"90s\");\n@@ -199,1 +199,1 @@\n-        assertEquals(\"90ms\", expResult, result, 0.01);\n+        assertEquals(expResult, result, 0.01, \"90ms\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/SizeTest.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -37,2 +36,0 @@\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n@@ -40,3 +37,4 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -44,1 +42,0 @@\n-@RunWith(Parameterized.class)\n@@ -61,5 +58,0 @@\n-    public StyleTest(Data data) {\n-        this.data = data;\n-    }\n-    private final Data data;\n-\n@@ -75,2 +67,1 @@\n-    @Parameters\n-    public static Collection data() {\n+    public static Stream<Arguments> data() {\n@@ -78,24 +69,24 @@\n-        return Arrays.asList(new Object[] {\n-            new Object[] { new Data(\"*.style { -fx-fill: red; }\",\n-                                    \"*.style { -fx-fill: red; }\", true) },\n-            new Object[] { new Data(\"*.style { -fx-fill: red; }\",\n-                                    \"*.bad   { -fx-fill: red; }\", false) },\n-            new Object[] { new Data(\"*.style:p { -fx-fill: red; }\",\n-                                    \"*.style:p { -fx-fill: red; }\", true) },\n-            new Object[] { new Data(\"*.style:p { -fx-fill: red; }\",\n-                                    \"*.style:q { -fx-fill: red; }\", false) },\n-            new Object[] { new Data(\"*.style:p { -fx-fill: red; }\",\n-                                    \"*.bad:p   { -fx-fill: red; }\", false) },\n-            new Object[] { new Data(\"*.style#c { -fx-fill: red; }\",\n-                                    \"*.style#c { -fx-fill: red; }\", true) },\n-            new Object[] { new Data(\"*.style#c { -fx-fill: red; }\",\n-                                    \"*.style#d { -fx-fill: red; }\", false) },\n-            new Object[] { new Data(\"*.style#c:p { -fx-fill: red; }\",\n-                                    \"*.style#c:p { -fx-fill: red; }\", true) },\n-            new Object[] { new Data(\"*.style#c:p { -fx-fill: red; }\",\n-                                    \"*.style#c:q { -fx-fill: red; }\", false) },\n-            new Object[] { new Data(\"*.style { -fx-fill: red; }\",\n-                                    \"*.style { -fx-fill: green; }\", false) },\n-            new Object[] { new Data(\"*.style { -fx-border-color: red; }\",\n-                                    \"*.style { -fx-fill: red; }\", false) },\n-        });\n+        return Stream.of(\n+            Arguments.of( new Data(\"*.style { -fx-fill: red; }\",\n+                                   \"*.style { -fx-fill: red; }\", true) ),\n+            Arguments.of( new Data(\"*.style { -fx-fill: red; }\",\n+                                   \"*.bad   { -fx-fill: red; }\", false) ),\n+            Arguments.of( new Data(\"*.style:p { -fx-fill: red; }\",\n+                                   \"*.style:p { -fx-fill: red; }\", true) ),\n+            Arguments.of( new Data(\"*.style:p { -fx-fill: red; }\",\n+                                   \"*.style:q { -fx-fill: red; }\", false) ),\n+            Arguments.of( new Data(\"*.style:p { -fx-fill: red; }\",\n+                                   \"*.bad:p   { -fx-fill: red; }\", false) ),\n+            Arguments.of( new Data(\"*.style#c { -fx-fill: red; }\",\n+                                   \"*.style#c { -fx-fill: red; }\", true) ),\n+            Arguments.of( new Data(\"*.style#c { -fx-fill: red; }\",\n+                                   \"*.style#d { -fx-fill: red; }\", false) ),\n+            Arguments.of( new Data(\"*.style#c:p { -fx-fill: red; }\",\n+                                   \"*.style#c:p { -fx-fill: red; }\", true) ),\n+            Arguments.of( new Data(\"*.style#c:p { -fx-fill: red; }\",\n+                                   \"*.style#c:q { -fx-fill: red; }\", false) ),\n+            Arguments.of( new Data(\"*.style { -fx-fill: red; }\",\n+                                   \"*.style { -fx-fill: green; }\", false) ),\n+            Arguments.of( new Data(\"*.style { -fx-border-color: red; }\",\n+                                   \"*.style { -fx-fill: red; }\", false) )\n+        );\n@@ -104,2 +95,3 @@\n-    @Test\n-    public void testEquals() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testEquals(Data data) {\n@@ -111,1 +103,1 @@\n-        assertTrue(data.toString(), expected == actual);\n+        assertTrue(expected == actual, data.toString());\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/StyleTest.java","additions":35,"deletions":43,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,7 +45,0 @@\n-import org.hamcrest.BaseMatcher;\n-import org.hamcrest.CoreMatchers;\n-import org.hamcrest.Description;\n-import org.hamcrest.Matcher;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n@@ -53,2 +46,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -62,1 +54,9 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import org.hamcrest.BaseMatcher;\n+import org.hamcrest.CoreMatchers;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import static org.hamcrest.MatcherAssert.assertThat;\n@@ -64,1 +64,0 @@\n-@RunWith(Parameterized.class)\n@@ -86,8 +85,1 @@\n-    private final Data data;\n-\n-    public StyleablePropertyFactoryTest(Data data) {\n-        this.data = data;\n-    }\n-\n-    @Parameterized.Parameters\n-    public static Collection<Data[]> data() {\n+    public static Stream<Arguments> data() {\n@@ -95,5 +87,5 @@\n-        return Arrays.asList(new Data[][]{\n-                {new Data(\"myBoolean\", \"-my-boolean: true;\", Boolean.TRUE)},\n-                {new Data(\"myColor\", \"-my-color: red;\", Color.RED)},\n-                {new Data(\"myDuration\", \"-my-duration: 30ms;\", Duration.millis(30))},\n-                {new Data(\"myEffect\", \"-my-effect: innershadow(gaussian, red, 10, .5, 1, 1);\",\n+        return Stream.of(\n+            Arguments.of(new Data(\"myBoolean\", \"-my-boolean: true;\", Boolean.TRUE)),\n+            Arguments.of(new Data(\"myColor\", \"-my-color: red;\", Color.RED)),\n+            Arguments.of(new Data(\"myDuration\", \"-my-duration: 30ms;\", Duration.millis(30))),\n+            Arguments.of(new Data(\"myEffect\", \"-my-effect: innershadow(gaussian, red, 10, .5, 1, 1);\",\n@@ -117,8 +109,8 @@\n-                },\n-                {new Data(\"myPos\", \"-my-pos: bottom-right;\", Pos.BOTTOM_RIGHT)},\n-                {new Data(\"myFont\", \"-my-font: 18 system;\", Font.font(\"system\", 18))},\n-                {new Data(\"myInsets\", \"-my-insets: 1 2 3 4;\", new Insets(1,2,3,4))},\n-                {new Data(\"myInsets\", \"-my-insets: 5;\", new Insets(5,5,5,5))},\n-                {new Data(\"myInsets\", \"-my-insets: 7 8;\", new Insets(7,8,7,8))},\n-                {new Data(\"myInsets\", \"-my-insets: 9 10 11;\", new Insets(9,10,11,10))},\n-                {new Data(\"myPaint\", \"-my-paint: linear-gradient(from 0% 0% to 100% 100%, red 0%, black 100%);\",\n+                ),\n+            Arguments.of(new Data(\"myPos\", \"-my-pos: bottom-right;\", Pos.BOTTOM_RIGHT)),\n+            Arguments.of(new Data(\"myFont\", \"-my-font: 18 system;\", Font.font(\"system\", 18))),\n+            Arguments.of(new Data(\"myInsets\", \"-my-insets: 1 2 3 4;\", new Insets(1,2,3,4))),\n+            Arguments.of(new Data(\"myInsets\", \"-my-insets: 5;\", new Insets(5,5,5,5))),\n+            Arguments.of(new Data(\"myInsets\", \"-my-insets: 7 8;\", new Insets(7,8,7,8))),\n+            Arguments.of(new Data(\"myInsets\", \"-my-insets: 9 10 11;\", new Insets(9,10,11,10))),\n+            Arguments.of(new Data(\"myPaint\", \"-my-paint: linear-gradient(from 0% 0% to 100% 100%, red 0%, black 100%);\",\n@@ -126,7 +118,6 @@\n-                },\n-                {new Data(\"myNumber\", \"-my-number: 2em;\", Font.getDefault().getSize()*2)},\n-                {new Data(\"myString\", \"-my-string: \\\"yaba daba do\\\";\", \"yaba daba do\")},\n-                {new Data(\"myUrl\", \"-my-url: url('http:\/\/www.oracle.com');\", \"http:\/\/www.oracle.com\")},\n-                {new Data(\"mySelected\", \"-my-selected: false;\", Boolean.FALSE)}\n-        });\n-\n+                ),\n+            Arguments.of(new Data(\"myNumber\", \"-my-number: 2em;\", Font.getDefault().getSize()*2)),\n+            Arguments.of(new Data(\"myString\", \"-my-string: \\\"yaba daba do\\\";\", \"yaba daba do\")),\n+            Arguments.of(new Data(\"myUrl\", \"-my-url: url('http:\/\/www.oracle.com');\", \"http:\/\/www.oracle.com\")),\n+            Arguments.of(new Data(\"mySelected\", \"-my-selected: false;\", Boolean.FALSE))\n+        );\n@@ -135,2 +126,3 @@\n-    @Test\n-    public void theTest() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void theTest(Data data) {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/StyleablePropertyFactoryTest.java","additions":34,"deletions":42,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,4 +39,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n@@ -45,2 +41,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -57,6 +52,9 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.fail;\n-import static org.junit.runners.Parameterized.Parameters;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -64,1 +62,0 @@\n-@RunWith(Parameterized.class)\n@@ -67,1 +64,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -86,22 +84,15 @@\n-    private final Data data;\n-    public StyleablePropertyFactory_createMethod_Test(Data data) {\n-        this.data = data;\n-    }\n-\n-    @Parameters\n-    public static Collection<Data[]> data() {\n-\n-        return Arrays.asList(new Data[][] {\n-                { new Data(\"createStyleableBooleanProperty\", StyleConverter.getBooleanConverter(), Boolean.TRUE) },\n-                { new Data(\"createStyleableColorProperty\",   StyleConverter.getColorConverter(), Color.YELLOW)   },\n-                { new Data(\"createStyleableDurationProperty\",   StyleConverter.getDurationConverter(), Duration.millis(30))   },\n-                { new Data(\"createStyleableEffectProperty\",  StyleConverter.getEffectConverter(), new InnerShadow(10d, Color.RED)) },\n-                { new Data(\"createStyleableEnumProperty\", StyleConverter.getEnumConverter(Pos.class), Pos.CENTER) },\n-                { new Data(\"createStyleableFontProperty\", StyleConverter.getFontConverter(), Font.font(18)) },\n-                { new Data(\"createStyleableInsetsProperty\", StyleConverter.getInsetsConverter(), new Insets(1,1,1,1)) },\n-                { new Data(\"createStyleableNumberProperty\", StyleConverter.getSizeConverter(), Double.valueOf(42d)) },\n-                { new Data(\"createStyleablePaintProperty\", StyleConverter.getPaintConverter(), Color.BLUE) },\n-                { new Data(\"createStyleableStringProperty\", StyleConverter.getStringConverter(), \"ABC\") },\n-                { new Data(\"createStyleableUrlProperty\", StyleConverter.getUrlConverter(), \"http:\/\/oracle.com\") }\n-        });\n-\n+    public static Stream<Arguments> data() {\n+\n+        return Stream.of(\n+            Arguments.of( new Data(\"createStyleableBooleanProperty\", StyleConverter.getBooleanConverter(), Boolean.TRUE) ),\n+            Arguments.of( new Data(\"createStyleableColorProperty\",   StyleConverter.getColorConverter(), Color.YELLOW)   ),\n+            Arguments.of( new Data(\"createStyleableDurationProperty\",   StyleConverter.getDurationConverter(), Duration.millis(30))   ),\n+            Arguments.of( new Data(\"createStyleableEffectProperty\",  StyleConverter.getEffectConverter(), new InnerShadow(10d, Color.RED)) ),\n+            Arguments.of( new Data(\"createStyleableEnumProperty\", StyleConverter.getEnumConverter(Pos.class), Pos.CENTER) ),\n+            Arguments.of( new Data(\"createStyleableFontProperty\", StyleConverter.getFontConverter(), Font.font(18)) ),\n+            Arguments.of( new Data(\"createStyleableInsetsProperty\", StyleConverter.getInsetsConverter(), new Insets(1,1,1,1)) ),\n+            Arguments.of( new Data(\"createStyleableNumberProperty\", StyleConverter.getSizeConverter(), Double.valueOf(42d)) ),\n+            Arguments.of( new Data(\"createStyleablePaintProperty\", StyleConverter.getPaintConverter(), Color.BLUE) ),\n+            Arguments.of( new Data(\"createStyleableStringProperty\", StyleConverter.getStringConverter(), \"ABC\") ),\n+            Arguments.of( new Data(\"createStyleableUrlProperty\", StyleConverter.getUrlConverter(), \"http:\/\/oracle.com\") )\n+        );\n@@ -125,1 +116,1 @@\n-        assertEquals(styleable.getProp().getCssMetaData().toString(), Boolean.valueOf(inherits), styleable.getProp().getCssMetaData().isInherits());\n+        assertEquals(Boolean.valueOf(inherits), styleable.getProp().getCssMetaData().isInherits(), styleable.getProp().getCssMetaData().toString());\n@@ -149,2 +140,3 @@\n-    @Test\n-    public void theTest() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void theTest(Data data) {\n@@ -153,1 +145,1 @@\n-            testEnum();\n+            testEnum(data);\n@@ -155,1 +147,1 @@\n-            testOther();\n+            testOther(data);\n@@ -160,1 +152,1 @@\n-    void testEnum() {\n+    void testEnum(Data data) {\n@@ -195,1 +187,1 @@\n-    void testOther() {\n+    void testOther(Data data) {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/StyleablePropertyFactory_createMethod_Test.java","additions":36,"deletions":44,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,3 +74,0 @@\n-import org.junit.*;\n-import static org.junit.Assert.*;\n-import static org.junit.Assert.assertEquals;\n@@ -78,0 +75,5 @@\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -273,3 +275,3 @@\n-                assertEquals(Integer.toString(n),\n-                        RuleShim.getUnobservedDeclarationList(expected),\n-                        RuleShim.getUnobservedDeclarationList(actual));\n+                assertEquals(RuleShim.getUnobservedDeclarationList(expected),\n+                             RuleShim.getUnobservedDeclarationList(actual),\n+                             Integer.toString(n));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/StylesheetTest.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,3 +33,4 @@\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.fail;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/TypeTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,5 @@\n-import static org.junit.Assert.*;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/geometry\/BoundingBoxTest.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,4 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n@@ -34,1 +30,5 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/geometry\/Dimension2DTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,4 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n@@ -34,1 +30,5 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/geometry\/InsetsTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,4 +30,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n@@ -35,1 +31,6 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -91,1 +92,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -93,2 +94,4 @@\n-        Point2D point = new Point2D(1, 2);\n-        point.add(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Point2D point = new Point2D(1, 2);\n+            point.add(null);\n+        });\n@@ -106,1 +109,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -108,2 +111,4 @@\n-        Point2D point = new Point2D(1, 2);\n-        point.subtract(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Point2D point = new Point2D(1, 2);\n+            point.subtract(null);\n+        });\n@@ -147,1 +152,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -149,2 +154,4 @@\n-        Point2D point = new Point2D(1, 2);\n-        point.midpoint(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Point2D point = new Point2D(1, 2);\n+            point.midpoint(null);\n+        });\n@@ -170,1 +177,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -172,2 +179,4 @@\n-        Point2D point = new Point2D(1, 2);\n-        point.angle(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Point2D point = new Point2D(1, 2);\n+            point.angle(null);\n+        });\n@@ -190,1 +199,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -192,2 +201,4 @@\n-        Point2D point = new Point2D(1, 2);\n-        point.angle(null, new Point2D(2, 8));\n+        assertThrows(NullPointerException.class, () -> {\n+            Point2D point = new Point2D(1, 2);\n+            point.angle(null, new Point2D(2, 8));\n+        });\n@@ -196,1 +207,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -198,2 +209,4 @@\n-        Point2D point = new Point2D(2, 3);\n-        point.angle(new Point2D(5, 3), null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Point2D point = new Point2D(2, 3);\n+            point.angle(new Point2D(5, 3), null);\n+        });\n@@ -244,1 +257,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -246,2 +259,4 @@\n-        Point2D point = new Point2D(1, 2);\n-        point.dotProduct(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Point2D point = new Point2D(1, 2);\n+            point.dotProduct(null);\n+        });\n@@ -262,1 +277,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -264,2 +279,4 @@\n-        Point2D point = new Point2D(1, 2);\n-        point.crossProduct(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Point2D point = new Point2D(1, 2);\n+            point.crossProduct(null);\n+        });\n@@ -289,2 +306,2 @@\n-        assertEquals(\"t=0: should return the initial point\", p1, p1.interpolate(p2, 0));\n-        assertEquals(\"t=1: should return the final point\", p2, p1.interpolate(p2, 1));\n+        assertEquals(p1, p1.interpolate(p2, 0), \"t=0: should return the initial point\");\n+        assertEquals(p2, p1.interpolate(p2, 1), \"t=1: should return the final point\");\n@@ -301,2 +318,2 @@\n-        assertEquals(message, expectedX, result.getX(), 1e-15);\n-        assertEquals(message, expectedY, result.getY(), 1e-15);\n+        assertEquals(expectedX, result.getX(), 1e-15, message);\n+        assertEquals(expectedY, result.getY(), 1e-15, message);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/geometry\/Point2DTest.java","additions":51,"deletions":34,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,4 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n@@ -34,1 +30,6 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -85,1 +86,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -87,2 +88,4 @@\n-        Point3D point = new Point3D(1, 2, 3);\n-        point.add(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Point3D point = new Point3D(1, 2, 3);\n+            point.add(null);\n+        });\n@@ -100,1 +103,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -102,2 +105,4 @@\n-        Point3D point = new Point3D(1, 2, 3);\n-        point.subtract(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Point3D point = new Point3D(1, 2, 3);\n+            point.subtract(null);\n+        });\n@@ -141,1 +146,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -143,2 +148,4 @@\n-        Point3D point = new Point3D(1, 2, 3);\n-        point.midpoint(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Point3D point = new Point3D(1, 2, 3);\n+            point.midpoint(null);\n+        });\n@@ -163,1 +170,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -165,2 +172,4 @@\n-        Point3D point = new Point3D(1, 2, 3);\n-        point.angle(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Point3D point = new Point3D(1, 2, 3);\n+            point.angle(null);\n+        });\n@@ -200,1 +209,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -202,2 +211,4 @@\n-        Point3D point = new Point3D(1, 2, 3);\n-        point.angle(null, new Point3D(2, 8, 4));\n+        assertThrows(NullPointerException.class, () -> {\n+            Point3D point = new Point3D(1, 2, 3);\n+            point.angle(null, new Point3D(2, 8, 4));\n+        });\n@@ -206,1 +217,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -208,2 +219,4 @@\n-        Point3D point = new Point3D(1, 2, 3);\n-        point.angle(new Point3D(8, 5, 3), null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Point3D point = new Point3D(1, 2, 3);\n+            point.angle(new Point3D(8, 5, 3), null);\n+        });\n@@ -254,1 +267,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -256,2 +269,4 @@\n-        Point3D point = new Point3D(1, 2, 3);\n-        point.dotProduct(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Point3D point = new Point3D(1, 2, 3);\n+            point.dotProduct(null);\n+        });\n@@ -272,1 +287,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -274,2 +289,4 @@\n-        Point3D point = new Point3D(1, 2, 3);\n-        point.crossProduct(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Point3D point = new Point3D(1, 2, 3);\n+            point.crossProduct(null);\n+        });\n@@ -283,2 +300,2 @@\n-        assertEquals(\"t=0: should return the initial point\", p1, p1.interpolate(p2, 0));\n-        assertEquals(\"t=1: should return the final point\", p2, p1.interpolate(p2, 1));\n+        assertEquals(p1, p1.interpolate(p2, 0), \"t=0: should return the initial point\");\n+        assertEquals(p2, p1.interpolate(p2, 1), \"t=1: should return the final point\");\n@@ -295,3 +312,3 @@\n-        assertEquals(message, expectedX, result.getX(), 1e-15);\n-        assertEquals(message, expectedY, result.getY(), 1e-15);\n-        assertEquals(message, expectedZ, result.getZ(), 1e-15);\n+        assertEquals(expectedX, result.getX(), 1e-15, message);\n+        assertEquals(expectedY, result.getY(), 1e-15, message);\n+        assertEquals(expectedZ, result.getZ(), 1e-15, message);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/geometry\/Point3DTest.java","additions":52,"deletions":35,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import static java.util.Arrays.asList;\n@@ -45,1 +44,0 @@\n-import static junit.framework.Assert.assertEquals;\n@@ -47,1 +45,1 @@\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -52,4 +50,4 @@\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -58,1 +56,0 @@\n-@RunWith(Parameterized.class)\n@@ -61,16 +58,15 @@\n-    @Parameters\n-    public static Collection<Object[]> parameters() {\n-        return asList(new Object[][] {\n-                {TOP_LEFT, TOP, LEFT},\n-                {TOP_CENTER, TOP, HPos.CENTER},\n-                {TOP_RIGHT, TOP, RIGHT},\n-                {CENTER_LEFT, VPos.CENTER, LEFT},\n-                {Pos.CENTER, VPos.CENTER, HPos.CENTER},\n-                {CENTER_RIGHT, VPos.CENTER, RIGHT},\n-                {BOTTOM_LEFT, BOTTOM, LEFT},\n-                {BOTTOM_CENTER, BOTTOM, HPos.CENTER},\n-                {BOTTOM_RIGHT, BOTTOM, RIGHT},\n-                {BASELINE_LEFT, BASELINE, LEFT},\n-                {BASELINE_CENTER, BASELINE, HPos.CENTER},\n-                {BASELINE_RIGHT, BASELINE, RIGHT},\n-         });\n+    public static Stream<Arguments> parameters() {\n+        return Stream.of(\n+            Arguments.of(TOP_LEFT, TOP, LEFT),\n+            Arguments.of(TOP_CENTER, TOP, HPos.CENTER),\n+            Arguments.of(TOP_RIGHT, TOP, RIGHT),\n+            Arguments.of(CENTER_LEFT, VPos.CENTER, LEFT),\n+            Arguments.of(Pos.CENTER, VPos.CENTER, HPos.CENTER),\n+            Arguments.of(CENTER_RIGHT, VPos.CENTER, RIGHT),\n+            Arguments.of(BOTTOM_LEFT, BOTTOM, LEFT),\n+            Arguments.of(BOTTOM_CENTER, BOTTOM, HPos.CENTER),\n+            Arguments.of(BOTTOM_RIGHT, BOTTOM, RIGHT),\n+            Arguments.of(BASELINE_LEFT, BASELINE, LEFT),\n+            Arguments.of(BASELINE_CENTER, BASELINE, HPos.CENTER),\n+            Arguments.of(BASELINE_RIGHT, BASELINE, RIGHT)\n+         );\n@@ -79,11 +75,3 @@\n-    private final Pos pos;\n-    private final VPos vpos;\n-    private final HPos hpos;\n-\n-    public PosTest(Pos pos, VPos vpos, HPos hpos) {\n-        this.pos = pos;\n-        this.vpos = vpos;\n-        this.hpos = hpos;\n-    }\n-\n-    @Test public void shouldHaveVPosAndHPos() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void shouldHaveVPosAndHPos(Pos pos, VPos vpos, HPos hpos) {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/geometry\/PosTest.java","additions":24,"deletions":36,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,4 +30,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n@@ -35,1 +31,6 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -39,1 +40,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -41,1 +42,3 @@\n-        new Rectangle2D(0, 0, -1, 0);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new Rectangle2D(0, 0, -1, 0);\n+        });\n@@ -44,1 +47,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -46,1 +49,3 @@\n-        new Rectangle2D(0, 0, 0, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new Rectangle2D(0, 0, 0, -1);\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/geometry\/Rectangle2DTest.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n@@ -38,0 +33,5 @@\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n@@ -40,1 +40,2 @@\n-  @Test public void dummyTest() {\n+  @Test\n+  public void dummyTest() {\n@@ -46,1 +47,1 @@\n-  @Before\n+  @BeforeEach\n@@ -60,1 +61,2 @@\n-  @Test public void testCopiesSettings() {\n+  @Test\n+  public void testCopiesSettings() {\n@@ -76,1 +78,2 @@\n-  @Test public void testPageRangeSettings() {\n+  @Test\n+  public void testPageRangeSettings() {\n@@ -96,1 +99,2 @@\n-  @Test public void testPrintColorSettings() {\n+  @Test\n+  public void testPrintColorSettings() {\n@@ -121,1 +125,2 @@\n-  @Test public void testPrintResolutions() {\n+  @Test\n+  public void testPrintResolutions() {\n@@ -145,1 +150,2 @@\n-   @Test public void testPrintSides() {\n+   @Test\n+   public void testPrintSides() {\n@@ -174,1 +180,2 @@\n-  @Test public void testPageOrientation() {\n+  @Test\n+  public void testPageOrientation() {\n@@ -195,1 +202,2 @@\n-    @Test public void testPaper() {\n+    @Test\n+    public void testPaper() {\n@@ -238,1 +246,2 @@\n-  @Test public void testPaperSource() {\n+  @Test\n+  public void testPaperSource() {\n@@ -262,1 +271,2 @@\n-  @Test public void testCollationSettings() {\n+  @Test\n+  public void testCollationSettings() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/print\/JobSettingsTest.java","additions":27,"deletions":17,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,3 +42,3 @@\n-import org.junit.Test;\n-import static org.junit.Assert.fail;\n-import static org.junit.Assume.assumeNotNull;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -48,1 +48,2 @@\n-    @Test public void test() {\n+    @Test\n+    public void test() {\n@@ -51,1 +52,1 @@\n-        assumeNotNull(printer);\n+        assumeTrue(printer != null);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/print\/MarginsTest.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,4 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-import org.junit.Test;\n-\n@@ -36,0 +32,4 @@\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n@@ -38,1 +38,2 @@\n-  @Test public void dummyTest() {\n+  @Test\n+  public void dummyTest() {\n@@ -41,1 +42,2 @@\n-  @Test public void createPaperPts() {\n+  @Test\n+  public void createPaperPts() {\n@@ -49,2 +51,2 @@\n-     assertTrue(\"Points width is not as expected\", ptsWid == expectedPtsWid);\n-     assertTrue(\"Points height is not as expected\", ptsHgt == expectedPtsHgt);\n+     assertTrue(ptsWid == expectedPtsWid, \"Points width is not as expected\");\n+     assertTrue(ptsHgt == expectedPtsHgt, \"Points height is not as expected\");\n@@ -53,1 +55,2 @@\n-  @Test public void createPaperInches() {\n+  @Test\n+  public void createPaperInches() {\n@@ -61,2 +64,2 @@\n-     assertTrue(\"Inches width is not as expected\", ptsWid == expectedPtsWid);\n-     assertTrue(\"Inches height is not as expected\", ptsHgt == expectedPtsHgt);\n+     assertTrue(ptsWid == expectedPtsWid, \"Inches width is not as expected\");\n+     assertTrue(ptsHgt == expectedPtsHgt, \"Inches height is not as expected\");\n@@ -65,1 +68,2 @@\n-  @Test public void createPaperMM() {\n+  @Test\n+  public void createPaperMM() {\n@@ -73,2 +77,2 @@\n-     assertEquals(\"MM width is not as expected\", ptsWid, expectedPtsWid, 0.001);\n-     assertEquals(\"MM height is not as expected\", ptsHgt, expectedPtsHgt, 0.001);\n+     assertEquals(ptsWid, expectedPtsWid, 0.001, \"MM width is not as expected\");\n+     assertEquals(ptsHgt, expectedPtsHgt, 0.001, \"MM height is not as expected\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/print\/PaperUnitsTest.java","additions":18,"deletions":14,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n@@ -38,0 +33,5 @@\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n@@ -40,1 +40,2 @@\n-  @Test public void dummyTest() {\n+  @Test\n+  public void dummyTest() {\n@@ -46,1 +47,1 @@\n-  @Before\n+  @BeforeEach\n@@ -60,1 +61,2 @@\n-  @Test public void testPrinter() {\n+  @Test\n+  public void testPrinter() {\n@@ -71,1 +73,2 @@\n-  @Test public void testPrinterProperty() {\n+  @Test\n+  public void testPrinterProperty() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/print\/PrinterJobTest.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -43,3 +41,6 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -52,1 +53,1 @@\n-    @Before\n+    @BeforeEach\n@@ -82,1 +83,1 @@\n-    @Test(expected = ConcurrentModificationException.class)\n+    @Test\n@@ -84,6 +85,7 @@\n-        final KeyCombination altA = KeyCombination.keyCombination(\"Alt + A\");\n-        final KeyCombination altB = KeyCombination.keyCombination(\"Alt + B\");\n-        accelerators.put(altA, () -> {\n-        });\n-        accelerators.put(altB, () -> {\n-        });\n+        assertThrows(ConcurrentModificationException.class, () -> {\n+            final KeyCombination altA = KeyCombination.keyCombination(\"Alt + A\");\n+            final KeyCombination altB = KeyCombination.keyCombination(\"Alt + B\");\n+            accelerators.put(altA, () -> {\n+            });\n+            accelerators.put(altB, () -> {\n+            });\n@@ -91,2 +93,2 @@\n-        final Iterator<Map.Entry<KeyCombination, Runnable>> iterator = accelerators.entrySet().iterator();\n-        iterator.next();\n+            final Iterator<Map.Entry<KeyCombination, Runnable>> iterator = accelerators.entrySet().iterator();\n+            iterator.next();\n@@ -94,3 +96,3 @@\n-        final Iterator<Map.Entry<KeyCombination, Runnable>> iterator1 = accelerators.entrySet().iterator();\n-        iterator1.next();\n-        iterator1.remove();\n+            final Iterator<Map.Entry<KeyCombination, Runnable>> iterator1 = accelerators.entrySet().iterator();\n+            iterator1.next();\n+            iterator1.remove();\n@@ -98,1 +100,2 @@\n-        iterator.next();\n+            iterator.next();\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/AcceleratorsTest.java","additions":23,"deletions":20,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,0 @@\n-import org.junit.Test;\n@@ -52,1 +51,0 @@\n-import static org.junit.Assert.*;\n@@ -56,0 +54,5 @@\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/CameraTest.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,5 +36,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -44,1 +43,2 @@\n-    @Test public void test_cursorFromUppercaseName() {\n+    @Test\n+    public void test_cursorFromUppercaseName() {\n@@ -65,1 +65,2 @@\n-    @Test public void test_cursorFromLowercaseName() {\n+    @Test\n+    public void test_cursorFromLowercaseName() {\n@@ -86,1 +87,2 @@\n-    @Test public void test_cursorFromUrl() {\n+    @Test\n+    public void test_cursorFromUrl() {\n@@ -101,1 +103,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -103,1 +105,3 @@\n-        Cursor.cursor(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Cursor.cursor(null);\n+        });\n@@ -106,1 +110,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -108,1 +112,3 @@\n-        Cursor.cursor(\"file\/\/:cursor.png\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Cursor.cursor(\"file\/\/:cursor.png\");\n+        });\n@@ -111,1 +117,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -113,1 +119,3 @@\n-        Cursor.cursor(\"crosslair\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Cursor.cursor(\"crosslair\");\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/CursorTest.java","additions":23,"deletions":15,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,3 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+\n@@ -37,1 +35,4 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -48,1 +49,2 @@\n-    @Test public void testDepthTestSingleDefault() {\n+    @Test\n+    public void testDepthTestSingleDefault() {\n@@ -57,1 +59,2 @@\n-    @Test public void testDepthTestParentChildDefaults() {\n+    @Test\n+    public void testDepthTestParentChildDefaults() {\n@@ -71,1 +74,2 @@\n-    @Test public void testDepthTestSingleSet() {\n+    @Test\n+    public void testDepthTestSingleSet() {\n@@ -92,1 +96,2 @@\n-    @Test public void testDepthTestParentChildSet() {\n+    @Test\n+    public void testDepthTestParentChildSet() {\n@@ -198,1 +203,2 @@\n-    @Test public void testDepthTestParentChildRemove() {\n+    @Test\n+    public void testDepthTestParentChildRemove() {\n@@ -272,1 +278,2 @@\n-    @Test public void testDepthTestMutliParentChildRemove() {\n+    @Test\n+    public void testDepthTestMutliParentChildRemove() {\n@@ -322,1 +329,2 @@\n-    @Test public void testDepthTestReparent() {\n+    @Test\n+    public void testDepthTestReparent() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/DepthTestTest.java","additions":20,"deletions":12,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -58,5 +58,0 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-import static org.junit.Assert.assertTrue;\n-import org.junit.Test;\n@@ -64,1 +59,5 @@\n-@RunWith(Parameterized.class)\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n@@ -66,39 +65,39 @@\n-    @Parameters\n-    public static Collection getParams() {\n-        return Arrays.asList(new Object[][] {\n-            { ActionEvent.ANY,           actionEvent(),           true},\n-            { ActionEvent.ANY,           focusUngrabEvent(),      false},\n-            { FocusUngrabEvent.ANY,      focusUngrabEvent(),      true},\n-            { FocusUngrabEvent.ANY,      actionEvent(),           false},\n-            { ContextMenuEvent.ANY,      contextMenuEvent(),      true},\n-            { ContextMenuEvent.ANY,      actionEvent(),           false},\n-            { DragEvent.ANY,             dragEvent(),             true },\n-            { DragEvent.ANY,             keyEvent(),              false },\n-            { InputMethodEvent.ANY,      inputMethodEvent(),      true },\n-            { InputMethodEvent.ANY,      keyEvent(),              false },\n-            { KeyEvent.ANY,              keyEvent(),              true },\n-            { KeyEvent.ANY,              inputMethodEvent(),      false },\n-            { MouseDragEvent.ANY,        mouseDragEvent(),        true },\n-            { MouseDragEvent.ANY,        mouseEvent(),            false },\n-            { MouseEvent.ANY,            mouseEvent(),            true },\n-            { MouseEvent.ANY,            mouseDragEvent(),        true },\n-            { MouseEvent.ANY,            keyEvent(),              false },\n-            { RotateEvent.ANY,           rotateEvent(),           true },\n-            { RotateEvent.ANY,           zoomEvent(),             false },\n-            { ZoomEvent.ANY,             zoomEvent(),             true },\n-            { ZoomEvent.ANY,             rotateEvent(),           false },\n-            { ScrollEvent.ANY,           scrollEvent(),           true },\n-            { ScrollEvent.ANY,           swipeEvent(),            false },\n-            { SwipeEvent.ANY,            swipeEvent(),            true },\n-            { SwipeEvent.ANY,            scrollEvent(),           false },\n-            { TouchEvent.ANY,            touchEvent(),            true },\n-            { TouchEvent.ANY,            rotateEvent(),           false },\n-            { TransformChangedEvent.ANY, transformChangedEvent(), true },\n-            { TransformChangedEvent.ANY, mouseEvent(),            false },\n-            { WindowEvent.ANY,           windowEvent(),           true },\n-            { WindowEvent.ANY,           actionEvent(),           false },\n-            { GestureEvent.ANY,          rotateEvent(),           true },\n-            { GestureEvent.ANY,          mouseEvent(),            false },\n-            { InputEvent.ANY,            mouseEvent(),            true },\n-            { InputEvent.ANY,            actionEvent(),           false },\n-        });\n+\n+    public static Stream<Arguments> getParams() {\n+        return Stream.of(\n+            Arguments.of( ActionEvent.ANY,           actionEvent(),           true),\n+            Arguments.of( ActionEvent.ANY,           focusUngrabEvent(),      false),\n+            Arguments.of( FocusUngrabEvent.ANY,      focusUngrabEvent(),      true),\n+            Arguments.of( FocusUngrabEvent.ANY,      actionEvent(),           false),\n+            Arguments.of( ContextMenuEvent.ANY,      contextMenuEvent(),      true),\n+            Arguments.of( ContextMenuEvent.ANY,      actionEvent(),           false),\n+            Arguments.of( DragEvent.ANY,             dragEvent(),             true ),\n+            Arguments.of( DragEvent.ANY,             keyEvent(),              false ),\n+            Arguments.of( InputMethodEvent.ANY,      inputMethodEvent(),      true ),\n+            Arguments.of( InputMethodEvent.ANY,      keyEvent(),              false ),\n+            Arguments.of( KeyEvent.ANY,              keyEvent(),              true ),\n+            Arguments.of( KeyEvent.ANY,              inputMethodEvent(),      false ),\n+            Arguments.of( MouseDragEvent.ANY,        mouseDragEvent(),        true ),\n+            Arguments.of( MouseDragEvent.ANY,        mouseEvent(),            false ),\n+            Arguments.of( MouseEvent.ANY,            mouseEvent(),            true ),\n+            Arguments.of( MouseEvent.ANY,            mouseDragEvent(),        true ),\n+            Arguments.of( MouseEvent.ANY,            keyEvent(),              false ),\n+            Arguments.of( RotateEvent.ANY,           rotateEvent(),           true ),\n+            Arguments.of( RotateEvent.ANY,           zoomEvent(),             false ),\n+            Arguments.of( ZoomEvent.ANY,             zoomEvent(),             true ),\n+            Arguments.of( ZoomEvent.ANY,             rotateEvent(),           false ),\n+            Arguments.of( ScrollEvent.ANY,           scrollEvent(),           true ),\n+            Arguments.of( ScrollEvent.ANY,           swipeEvent(),            false ),\n+            Arguments.of( SwipeEvent.ANY,            swipeEvent(),            true ),\n+            Arguments.of( SwipeEvent.ANY,            scrollEvent(),           false ),\n+            Arguments.of( TouchEvent.ANY,            touchEvent(),            true ),\n+            Arguments.of( TouchEvent.ANY,            rotateEvent(),           false ),\n+            Arguments.of( TransformChangedEvent.ANY, transformChangedEvent(), true ),\n+            Arguments.of( TransformChangedEvent.ANY, mouseEvent(),            false ),\n+            Arguments.of( WindowEvent.ANY,           windowEvent(),           true ),\n+            Arguments.of( WindowEvent.ANY,           actionEvent(),           false ),\n+            Arguments.of( GestureEvent.ANY,          rotateEvent(),           true ),\n+            Arguments.of( GestureEvent.ANY,          mouseEvent(),            false ),\n+            Arguments.of( InputEvent.ANY,            mouseEvent(),            true ),\n+            Arguments.of( InputEvent.ANY,            actionEvent(),           false )\n+        );\n@@ -108,9 +107,0 @@\n-    private EventType type;\n-    private Event event;\n-    private boolean matches;\n-\n-    public EventAnyTest(EventType type, Event event, boolean matches) {\n-        this.type = type;\n-        this.event = event;\n-        this.matches = matches;\n-    }\n@@ -118,2 +108,3 @@\n-    @Test\n-    public void testEventDelivery() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testEventDelivery(EventType type, Event event, boolean matches) {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/EventAnyTest.java","additions":49,"deletions":58,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-\n@@ -37,6 +36,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n@@ -62,3 +55,9 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -75,1 +74,1 @@\n-    @Before\n+    @BeforeEach\n@@ -88,1 +87,1 @@\n-    @After\n+    @AfterEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/FocusTest.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,7 +38,8 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -307,1 +308,1 @@\n-            assertNull(\"unexpected exception\", t);\n+            assertNull(t, \"unexpected exception\");\n@@ -377,1 +378,1 @@\n-            assertNull(\"unexpected exception\", t);\n+            assertNull(t, \"unexpected exception\");\n@@ -429,1 +430,1 @@\n-            assertNull(\"unexpected exception\", t);\n+            assertNull(t, \"unexpected exception\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/GroupTest.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import static org.junit.Assert.fail;\n@@ -35,1 +34,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.fail;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/HashCodeTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertSame;\n@@ -41,4 +39,0 @@\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n@@ -54,0 +48,6 @@\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+\n@@ -60,1 +60,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -68,1 +68,1 @@\n-    @AfterClass\n+    @AfterAll\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/ImageCursorTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -34,7 +33,0 @@\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n@@ -46,1 +38,6 @@\n-@RunWith(Parameterized.class)\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -58,9 +55,0 @@\n-    private final int bestWidth;\n-    private final int bestHeight;\n-    private final float hotspotX;\n-    private final float hotspotY;\n-\n-    private final int expectedIndex;\n-    private final float expectedHotspotX;\n-    private final float expectedHotspotY;\n-\n@@ -74,12 +62,11 @@\n-    @Parameters\n-    public static Collection data() {\n-        return Arrays.asList(new Object[][] {\n-            { 32, 64, 0, 0, 2, 0, 0 },\n-            { 64, 32, 32, 32, 3, 63, 31 },\n-            { 48, 64, 16, 16, 2, 16, 32 },\n-            { 64, 48, 16, 16, 3, 32, 16 },\n-            { 92, 92, 16, 4, 1, 32, 8 },\n-            { 16, 16, 4, 16, 0, 4, 16 },\n-            { 16, 32, 0, 0, 0, 0, 0 },\n-            { 32, 16, 0, 0, 0, 0, 0 }\n-        });\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( 32, 64, 0, 0, 2, 0, 0 ),\n+            Arguments.of( 64, 32, 32, 32, 3, 63, 31 ),\n+            Arguments.of( 48, 64, 16, 16, 2, 16, 32 ),\n+            Arguments.of( 64, 48, 16, 16, 3, 32, 16 ),\n+            Arguments.of( 92, 92, 16, 4, 1, 32, 8 ),\n+            Arguments.of( 16, 16, 4, 16, 0, 4, 16 ),\n+            Arguments.of( 16, 32, 0, 0, 0, 0, 0 ),\n+            Arguments.of( 32, 16, 0, 0, 0, 0, 0 )\n+        );\n@@ -88,1 +75,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -94,1 +81,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -99,19 +86,9 @@\n-    public ImageCursor_findBestImage_Test(final int bestWidth,\n-                                              final int bestHeight,\n-                                              final float hotspotX,\n-                                              final float hotspotY,\n-                                              final int expectedIndex,\n-                                              final float expectedHotspotX,\n-                                              final float expectedHotspotY) {\n-        this.bestWidth = bestWidth;\n-        this.bestHeight = bestHeight;\n-        this.hotspotX = hotspotX;\n-        this.hotspotY = hotspotY;\n-\n-        this.expectedIndex = expectedIndex;\n-        this.expectedHotspotX = expectedHotspotX;\n-        this.expectedHotspotY = expectedHotspotY;\n-    }\n-\n-    @Test\n-    public void findBestImageTest() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void findBestImageTest(int bestWidth,\n+                                  int bestHeight,\n+                                  float hotspotX,\n+                                  float hotspotY,\n+                                  int expectedIndex,\n+                                  float expectedHotspotX,\n+                                  float expectedHotspotY) {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/ImageCursor_findBestImage_Test.java","additions":30,"deletions":53,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertSame;\n@@ -35,2 +32,0 @@\n-import org.junit.Test;\n-\n@@ -43,0 +38,5 @@\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/ImageCursor_getCurrentFrame_Test.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import static org.junit.Assert.*;\n-\n@@ -41,3 +39,5 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -92,1 +92,1 @@\n-    @Before\n+    @BeforeEach\n@@ -98,1 +98,1 @@\n-    @After\n+    @AfterEach\n@@ -126,2 +126,2 @@\n-        assertTrue(\"Scope list should be empty\", scope.isEmpty());\n-        assertTrue(\"Exclusion scope should be empty\", exclusionScope.isEmpty());\n+        assertTrue(scope.isEmpty(), \"Scope list should be empty\");\n+        assertTrue(exclusionScope.isEmpty(), \"Exclusion scope should be empty\");\n@@ -130,4 +130,4 @@\n-        assertTrue(SCOPE_EMPTY_AFFECTED, isAffected(shape1));\n-        assertTrue(SCOPE_EMPTY_AFFECTED, isAffected(shape2));\n-        assertTrue(SCOPE_EMPTY_AFFECTED, isAffected(shape3));\n-        assertTrue(SCOPE_EMPTY_AFFECTED, isAffected(shape4));\n+        assertTrue(isAffected(shape1), SCOPE_EMPTY_AFFECTED);\n+        assertTrue(isAffected(shape2), SCOPE_EMPTY_AFFECTED);\n+        assertTrue(isAffected(shape3), SCOPE_EMPTY_AFFECTED);\n+        assertTrue(isAffected(shape4), SCOPE_EMPTY_AFFECTED);\n@@ -138,2 +138,2 @@\n-        assertTrue(ADD_SCOPE, scope.contains(shape1)); \/\/ shape1\n-        assertFalse(NO_CHANGE_EXC_SCOPE, exclusionScope.contains(shape1));\n+        assertTrue(scope.contains(shape1)); \/\/ shap, ADD_SCOPEe1\n+        assertFalse(exclusionScope.contains(shape1), NO_CHANGE_EXC_SCOPE);\n@@ -141,1 +141,1 @@\n-        assertTrue(CHANGE_DIRTY, isDrawModeDirty(shape1));\n+        assertTrue(isDrawModeDirty(shape1), CHANGE_DIRTY);\n@@ -145,3 +145,3 @@\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape2));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape3));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape4));\n+        assertFalse(isDrawModeDirty(shape2), NO_CHANGE_NOT_DIRTY);\n+        assertFalse(isDrawModeDirty(shape3), NO_CHANGE_NOT_DIRTY);\n+        assertFalse(isDrawModeDirty(shape4), NO_CHANGE_NOT_DIRTY);\n@@ -150,4 +150,4 @@\n-        assertTrue(IN_SCOPE_AFFECTED, isAffected(shape1));\n-        assertFalse(NOT_IN_SCOPE_NOT_AFFECTED, isAffected(shape2));\n-        assertFalse(NOT_IN_SCOPE_NOT_AFFECTED, isAffected(shape3));\n-        assertFalse(NOT_IN_SCOPE_NOT_AFFECTED, isAffected(shape4));\n+        assertTrue(isAffected(shape1), IN_SCOPE_AFFECTED);\n+        assertFalse(isAffected(shape2), NOT_IN_SCOPE_NOT_AFFECTED);\n+        assertFalse(isAffected(shape3), NOT_IN_SCOPE_NOT_AFFECTED);\n+        assertFalse(isAffected(shape4), NOT_IN_SCOPE_NOT_AFFECTED);\n@@ -158,2 +158,2 @@\n-        assertTrue(ADD_SCOPE, scope.contains(parent1)); \/\/ shape1, parent1\n-        assertFalse(NO_CHANGE_EXC_SCOPE, exclusionScope.contains(parent1));\n+        assertTrue(scope.contains(parent1)); \/\/ shape1, paren, ADD_SCOPEt1\n+        assertFalse(exclusionScope.contains(parent1), NO_CHANGE_EXC_SCOPE);\n@@ -161,4 +161,4 @@\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape1));\n-        assertTrue(PARENT_CHANGE_DIRTY, isDrawModeDirty(shape2));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape3));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape4));\n+        assertFalse(isDrawModeDirty(shape1), NO_CHANGE_NOT_DIRTY);\n+        assertTrue(isDrawModeDirty(shape2), PARENT_CHANGE_DIRTY);\n+        assertFalse(isDrawModeDirty(shape3), NO_CHANGE_NOT_DIRTY);\n+        assertFalse(isDrawModeDirty(shape4), NO_CHANGE_NOT_DIRTY);\n@@ -167,4 +167,4 @@\n-        assertTrue(IN_SCOPE_AFFECTED, isAffected(shape1));\n-        assertTrue(PARENT_IN_SCOPE_AFFECTED, isAffected(shape2));\n-        assertFalse(NOT_IN_SCOPE_NOT_AFFECTED, isAffected(shape3));\n-        assertFalse(NOT_IN_SCOPE_NOT_AFFECTED, isAffected(shape4));\n+        assertTrue(isAffected(shape1), IN_SCOPE_AFFECTED);\n+        assertTrue(isAffected(shape2), PARENT_IN_SCOPE_AFFECTED);\n+        assertFalse(isAffected(shape3), NOT_IN_SCOPE_NOT_AFFECTED);\n+        assertFalse(isAffected(shape4), NOT_IN_SCOPE_NOT_AFFECTED);\n@@ -175,2 +175,2 @@\n-        assertFalse(NO_CHANGE_SCOPE, scope.contains(shape2)); \/\/ shape1, parent1\n-        assertTrue(ADD_EXC_SCOPE, exclusionScope.contains(shape2)); \/\/ shape2\n+        assertFalse(scope.contains(shape2)); \/\/ shape1, paren, NO_CHANGE_SCOPEt1\n+        assertTrue(exclusionScope.contains(shape2)); \/\/ shap, ADD_EXC_SCOPEe2\n@@ -178,4 +178,4 @@\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape1));\n-        assertTrue(CHANGE_DIRTY, isDrawModeDirty(shape2));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape3));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape4));\n+        assertFalse(isDrawModeDirty(shape1), NO_CHANGE_NOT_DIRTY);\n+        assertTrue(isDrawModeDirty(shape2), CHANGE_DIRTY);\n+        assertFalse(isDrawModeDirty(shape3), NO_CHANGE_NOT_DIRTY);\n+        assertFalse(isDrawModeDirty(shape4), NO_CHANGE_NOT_DIRTY);\n@@ -184,4 +184,4 @@\n-        assertTrue(IN_SCOPE_AFFECTED, isAffected(shape1));\n-        assertFalse(IN_EXC_SCOPE_NOT_AFFECTED, isAffected(shape2));\n-        assertFalse(NOT_IN_SCOPE_NOT_AFFECTED, isAffected(shape3));\n-        assertFalse(NOT_IN_SCOPE_NOT_AFFECTED, isAffected(shape4));\n+        assertTrue(isAffected(shape1), IN_SCOPE_AFFECTED);\n+        assertFalse(isAffected(shape2), IN_EXC_SCOPE_NOT_AFFECTED);\n+        assertFalse(isAffected(shape3), NOT_IN_SCOPE_NOT_AFFECTED);\n+        assertFalse(isAffected(shape4), NOT_IN_SCOPE_NOT_AFFECTED);\n@@ -192,2 +192,2 @@\n-        assertTrue(ADD_SCOPE, scope.contains(root)); \/\/ shape1, parent1, root\n-        assertFalse(NO_CHANGE_EXC_SCOPE, exclusionScope.contains(root)); \/\/ shape2\n+        assertTrue(scope.contains(root)); \/\/ shape1, parent1, ro, ADD_SCOPEot\n+        assertFalse(exclusionScope.contains(root)); \/\/ shap, NO_CHANGE_EXC_SCOPEe2\n@@ -195,4 +195,4 @@\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape1));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape2));\n-        assertTrue(PARENT_CHANGE_DIRTY, isDrawModeDirty(shape3));\n-        assertTrue(PARENT_CHANGE_DIRTY, isDrawModeDirty(shape4));\n+        assertFalse(isDrawModeDirty(shape1), NO_CHANGE_NOT_DIRTY);\n+        assertFalse(isDrawModeDirty(shape2), NO_CHANGE_NOT_DIRTY);\n+        assertTrue(isDrawModeDirty(shape3), PARENT_CHANGE_DIRTY);\n+        assertTrue(isDrawModeDirty(shape4), PARENT_CHANGE_DIRTY);\n@@ -201,4 +201,4 @@\n-        assertTrue(IN_SCOPE_AFFECTED, isAffected(shape1));\n-        assertFalse(IN_EXC_SCOPE_NOT_AFFECTED, isAffected(shape2));\n-        assertTrue(PARENT_IN_SCOPE_AFFECTED, isAffected(shape3));\n-        assertTrue(PARENT_IN_SCOPE_AFFECTED, isAffected(shape4));\n+        assertTrue(isAffected(shape1), IN_SCOPE_AFFECTED);\n+        assertFalse(isAffected(shape2), IN_EXC_SCOPE_NOT_AFFECTED);\n+        assertTrue(isAffected(shape3), PARENT_IN_SCOPE_AFFECTED);\n+        assertTrue(isAffected(shape4), PARENT_IN_SCOPE_AFFECTED);\n@@ -209,2 +209,2 @@\n-        assertFalse(SILENT_REMOVE_SCOPE, scope.contains(parent1)); \/\/ shape1, root\n-        assertTrue(ADD_EXC_SCOPE, exclusionScope.contains(parent1)); \/\/ shape2, parent1\n+        assertFalse(scope.contains(parent1)); \/\/ shape1, ro, SILENT_REMOVE_SCOPEot\n+        assertTrue(exclusionScope.contains(parent1)); \/\/ shape2, paren, ADD_EXC_SCOPEt1\n@@ -212,4 +212,4 @@\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape1));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape2));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape3));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape4));\n+        assertFalse(isDrawModeDirty(shape1), NO_CHANGE_NOT_DIRTY);\n+        assertFalse(isDrawModeDirty(shape2), NO_CHANGE_NOT_DIRTY);\n+        assertFalse(isDrawModeDirty(shape3), NO_CHANGE_NOT_DIRTY);\n+        assertFalse(isDrawModeDirty(shape4), NO_CHANGE_NOT_DIRTY);\n@@ -218,4 +218,4 @@\n-        assertTrue(IN_SCOPE_AFFECTED, isAffected(shape1));\n-        assertFalse(IN_EXC_SCOPE_NOT_AFFECTED, isAffected(shape2));\n-        assertTrue(PARENT_IN_SCOPE_AFFECTED, isAffected(shape3));\n-        assertTrue(PARENT_IN_SCOPE_AFFECTED, isAffected(shape4));\n+        assertTrue(isAffected(shape1), IN_SCOPE_AFFECTED);\n+        assertFalse(isAffected(shape2), IN_EXC_SCOPE_NOT_AFFECTED);\n+        assertTrue(isAffected(shape3), PARENT_IN_SCOPE_AFFECTED);\n+        assertTrue(isAffected(shape4), PARENT_IN_SCOPE_AFFECTED);\n@@ -226,2 +226,2 @@\n-        assertTrue(ADD_SCOPE, scope.contains(shape2)); \/\/ shape1, root, shape2\n-        assertFalse(SILENT_REMOVE_EXC_SCOPE, exclusionScope.contains(shape2)); \/\/ parent1\n+        assertTrue(scope.contains(shape2)); \/\/ shape1, root, shap, ADD_SCOPEe2\n+        assertFalse(exclusionScope.contains(shape2)); \/\/ paren, SILENT_REMOVE_EXC_SCOPEt1\n@@ -229,4 +229,4 @@\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape1));\n-        assertTrue(CHANGE_DIRTY, isDrawModeDirty(shape2));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape3));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape4));\n+        assertFalse(isDrawModeDirty(shape1), NO_CHANGE_NOT_DIRTY);\n+        assertTrue(isDrawModeDirty(shape2), CHANGE_DIRTY);\n+        assertFalse(isDrawModeDirty(shape3), NO_CHANGE_NOT_DIRTY);\n+        assertFalse(isDrawModeDirty(shape4), NO_CHANGE_NOT_DIRTY);\n@@ -235,4 +235,4 @@\n-        assertTrue(IN_SCOPE_AFFECTED, isAffected(shape1));\n-        assertTrue(IN_SCOPE_AFFECTED, isAffected(shape2));\n-        assertTrue(PARENT_IN_SCOPE_AFFECTED, isAffected(shape3));\n-        assertTrue(PARENT_IN_SCOPE_AFFECTED, isAffected(shape4));\n+        assertTrue(isAffected(shape1), IN_SCOPE_AFFECTED);\n+        assertTrue(isAffected(shape2), IN_SCOPE_AFFECTED);\n+        assertTrue(isAffected(shape3), PARENT_IN_SCOPE_AFFECTED);\n+        assertTrue(isAffected(shape4), PARENT_IN_SCOPE_AFFECTED);\n@@ -243,2 +243,2 @@\n-        assertFalse(REMOVE_SCOPE, scope.contains(shape1)); \/\/ root, shape2\n-        assertFalse(NO_CHANGE_EXC_SCOPE, exclusionScope.contains(shape1)); \/\/ parent1\n+        assertFalse(scope.contains(shape1)); \/\/ root, shap, REMOVE_SCOPEe2\n+        assertFalse(exclusionScope.contains(shape1)); \/\/ paren, NO_CHANGE_EXC_SCOPEt1\n@@ -246,4 +246,4 @@\n-        assertTrue(CHANGE_DIRTY, isDrawModeDirty(shape1));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape2));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape3));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape4));\n+        assertTrue(isDrawModeDirty(shape1), CHANGE_DIRTY);\n+        assertFalse(isDrawModeDirty(shape2), NO_CHANGE_NOT_DIRTY);\n+        assertFalse(isDrawModeDirty(shape3), NO_CHANGE_NOT_DIRTY);\n+        assertFalse(isDrawModeDirty(shape4), NO_CHANGE_NOT_DIRTY);\n@@ -252,4 +252,4 @@\n-        assertFalse(PARENT_IN_EXC_SCOPE_NOT_AFFECTED, isAffected(shape1));\n-        assertTrue(IN_SCOPE_AFFECTED, isAffected(shape2));\n-        assertTrue(PARENT_IN_SCOPE_AFFECTED, isAffected(shape3));\n-        assertTrue(PARENT_IN_SCOPE_AFFECTED, isAffected(shape4));\n+        assertFalse(isAffected(shape1), PARENT_IN_EXC_SCOPE_NOT_AFFECTED);\n+        assertTrue(isAffected(shape2), IN_SCOPE_AFFECTED);\n+        assertTrue(isAffected(shape3), PARENT_IN_SCOPE_AFFECTED);\n+        assertTrue(isAffected(shape4), PARENT_IN_SCOPE_AFFECTED);\n@@ -260,2 +260,2 @@\n-        assertFalse(REMOVE_SCOPE, scope.contains(root)); \/\/ shape2\n-        assertFalse(NO_CHANGE_EXC_SCOPE, exclusionScope.contains(root)); \/\/ parent1\n+        assertFalse(scope.contains(root)); \/\/ shap, REMOVE_SCOPEe2\n+        assertFalse(exclusionScope.contains(root)); \/\/ paren, NO_CHANGE_EXC_SCOPEt1\n@@ -263,4 +263,4 @@\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape1));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape2));\n-        assertTrue(PARENT_CHANGE_DIRTY, isDrawModeDirty(shape3));\n-        assertTrue(PARENT_CHANGE_DIRTY, isDrawModeDirty(shape4));\n+        assertFalse(isDrawModeDirty(shape1), NO_CHANGE_NOT_DIRTY);\n+        assertFalse(isDrawModeDirty(shape2), NO_CHANGE_NOT_DIRTY);\n+        assertTrue(isDrawModeDirty(shape3), PARENT_CHANGE_DIRTY);\n+        assertTrue(isDrawModeDirty(shape4), PARENT_CHANGE_DIRTY);\n@@ -269,4 +269,4 @@\n-        assertFalse(PARENT_IN_EXC_SCOPE_NOT_AFFECTED, isAffected(shape1));\n-        assertTrue(IN_SCOPE_AFFECTED, isAffected(shape2));\n-        assertFalse(NOT_IN_SCOPE_NOT_AFFECTED, isAffected(shape3));\n-        assertFalse(NOT_IN_SCOPE_NOT_AFFECTED, isAffected(shape4));\n+        assertFalse(isAffected(shape1), PARENT_IN_EXC_SCOPE_NOT_AFFECTED);\n+        assertTrue(isAffected(shape2), IN_SCOPE_AFFECTED);\n+        assertFalse(isAffected(shape3), NOT_IN_SCOPE_NOT_AFFECTED);\n+        assertFalse(isAffected(shape4), NOT_IN_SCOPE_NOT_AFFECTED);\n@@ -277,2 +277,2 @@\n-        assertFalse(SILENT_REMOVE_SCOPE, scope.contains(shape2));\n-        assertTrue(ADD_EXC_SCOPE, exclusionScope.contains(shape2)); \/\/ parent1, shape2\n+        assertFalse(scope.contains(shape2), SILENT_REMOVE_SCOPE);\n+        assertTrue(exclusionScope.contains(shape2)); \/\/ parent1, shap, ADD_EXC_SCOPEe2\n@@ -280,4 +280,4 @@\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape1));\n-        assertTrue(CHANGE_DIRTY, isDrawModeDirty(shape2));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape3));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape4));\n+        assertFalse(isDrawModeDirty(shape1), NO_CHANGE_NOT_DIRTY);\n+        assertTrue(isDrawModeDirty(shape2), CHANGE_DIRTY);\n+        assertFalse(isDrawModeDirty(shape3), NO_CHANGE_NOT_DIRTY);\n+        assertFalse(isDrawModeDirty(shape4), NO_CHANGE_NOT_DIRTY);\n@@ -286,4 +286,4 @@\n-        assertFalse(PARENT_IN_EXC_SCOPE_NOT_AFFECTED, isAffected(shape1));\n-        assertFalse(IN_EXC_SCOPE_NOT_AFFECTED, isAffected(shape2));\n-        assertTrue(SCOPE_EMPTY_AFFECTED, isAffected(shape3));\n-        assertTrue(SCOPE_EMPTY_AFFECTED, isAffected(shape4));\n+        assertFalse(isAffected(shape1), PARENT_IN_EXC_SCOPE_NOT_AFFECTED);\n+        assertFalse(isAffected(shape2), IN_EXC_SCOPE_NOT_AFFECTED);\n+        assertTrue(isAffected(shape3), SCOPE_EMPTY_AFFECTED);\n+        assertTrue(isAffected(shape4), SCOPE_EMPTY_AFFECTED);\n@@ -294,2 +294,2 @@\n-        assertTrue(ADD_SCOPE, scope.contains(parent1)); \/\/ parent1\n-        assertFalse(SILENT_REMOVE_EXC_SCOPE, exclusionScope.contains(parent1)); \/\/ shape2\n+        assertTrue(scope.contains(parent1)); \/\/ paren, ADD_SCOPEt1\n+        assertFalse(exclusionScope.contains(parent1)); \/\/ shap, SILENT_REMOVE_EXC_SCOPEe2\n@@ -297,4 +297,4 @@\n-        assertTrue(PARENT_CHANGE_DIRTY, isDrawModeDirty(shape1));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape2));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape3));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape4));\n+        assertTrue(isDrawModeDirty(shape1), PARENT_CHANGE_DIRTY);\n+        assertFalse(isDrawModeDirty(shape2), NO_CHANGE_NOT_DIRTY);\n+        assertFalse(isDrawModeDirty(shape3), NO_CHANGE_NOT_DIRTY);\n+        assertFalse(isDrawModeDirty(shape4), NO_CHANGE_NOT_DIRTY);\n@@ -303,4 +303,4 @@\n-        assertTrue(PARENT_IN_SCOPE_AFFECTED, isAffected(shape1));\n-        assertFalse(IN_EXC_SCOPE_NOT_AFFECTED, isAffected(shape2));\n-        assertFalse(NOT_IN_SCOPE_NOT_AFFECTED, isAffected(shape3));\n-        assertFalse(NOT_IN_SCOPE_NOT_AFFECTED, isAffected(shape4));\n+        assertTrue(isAffected(shape1), PARENT_IN_SCOPE_AFFECTED);\n+        assertFalse(isAffected(shape2), IN_EXC_SCOPE_NOT_AFFECTED);\n+        assertFalse(isAffected(shape3), NOT_IN_SCOPE_NOT_AFFECTED);\n+        assertFalse(isAffected(shape4), NOT_IN_SCOPE_NOT_AFFECTED);\n@@ -311,2 +311,2 @@\n-        assertFalse(NO_CHANGE_SCOPE, scope.contains(shape2)); \/\/ parent1\n-        assertFalse(REMOVE_EXC_SCOPE, exclusionScope.contains(shape2));\n+        assertFalse(scope.contains(shape2)); \/\/ paren, NO_CHANGE_SCOPEt1\n+        assertFalse(exclusionScope.contains(shape2), REMOVE_EXC_SCOPE);\n@@ -314,4 +314,4 @@\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape1));\n-        assertTrue(CHANGE_DIRTY, isDrawModeDirty(shape2));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape3));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape4));\n+        assertFalse(isDrawModeDirty(shape1), NO_CHANGE_NOT_DIRTY);\n+        assertTrue(isDrawModeDirty(shape2), CHANGE_DIRTY);\n+        assertFalse(isDrawModeDirty(shape3), NO_CHANGE_NOT_DIRTY);\n+        assertFalse(isDrawModeDirty(shape4), NO_CHANGE_NOT_DIRTY);\n@@ -320,4 +320,4 @@\n-        assertTrue(PARENT_IN_SCOPE_AFFECTED, isAffected(shape1));\n-        assertTrue(PARENT_IN_SCOPE_AFFECTED, isAffected(shape2));\n-        assertFalse(NOT_IN_SCOPE_NOT_AFFECTED, isAffected(shape3));\n-        assertFalse(NOT_IN_SCOPE_NOT_AFFECTED, isAffected(shape4));\n+        assertTrue(isAffected(shape1), PARENT_IN_SCOPE_AFFECTED);\n+        assertTrue(isAffected(shape2), PARENT_IN_SCOPE_AFFECTED);\n+        assertFalse(isAffected(shape3), NOT_IN_SCOPE_NOT_AFFECTED);\n+        assertFalse(isAffected(shape4), NOT_IN_SCOPE_NOT_AFFECTED);\n@@ -328,2 +328,2 @@\n-        assertFalse(REMOVE_SCOPE, scope.contains(parent1));\n-        assertFalse(NO_CHANGE_EXC_SCOPE, exclusionScope.contains(parent1));\n+        assertFalse(scope.contains(parent1), REMOVE_SCOPE);\n+        assertFalse(exclusionScope.contains(parent1), NO_CHANGE_EXC_SCOPE);\n@@ -331,2 +331,2 @@\n-        assertTrue(PARENT_CHANGE_DIRTY, isDrawModeDirty(shape1));\n-        assertTrue(PARENT_CHANGE_DIRTY, isDrawModeDirty(shape2));\n+        assertTrue(isDrawModeDirty(shape1), PARENT_CHANGE_DIRTY);\n+        assertTrue(isDrawModeDirty(shape2), PARENT_CHANGE_DIRTY);\n@@ -335,2 +335,2 @@\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape3));\n-        assertFalse(NO_CHANGE_NOT_DIRTY, isDrawModeDirty(shape4));\n+        assertFalse(isDrawModeDirty(shape3), NO_CHANGE_NOT_DIRTY);\n+        assertFalse(isDrawModeDirty(shape4), NO_CHANGE_NOT_DIRTY);\n@@ -339,4 +339,4 @@\n-        assertTrue(SCOPE_EMPTY_AFFECTED, isAffected(shape1));\n-        assertTrue(SCOPE_EMPTY_AFFECTED, isAffected(shape2));\n-        assertTrue(SCOPE_EMPTY_AFFECTED, isAffected(shape3));\n-        assertTrue(SCOPE_EMPTY_AFFECTED, isAffected(shape4));\n+        assertTrue(isAffected(shape1), SCOPE_EMPTY_AFFECTED);\n+        assertTrue(isAffected(shape2), SCOPE_EMPTY_AFFECTED);\n+        assertTrue(isAffected(shape3), SCOPE_EMPTY_AFFECTED);\n+        assertTrue(isAffected(shape4), SCOPE_EMPTY_AFFECTED);\n@@ -346,2 +346,2 @@\n-        assertTrue(\"Scope is empty\", scope.isEmpty());\n-        assertTrue(\"Exclusion scope is empty\", exclusionScope.isEmpty());\n+        assertTrue(scope.isEmpty(), \"Scope is empty\");\n+        assertTrue(exclusionScope.isEmpty(), \"Exclusion scope is empty\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/LightBaseTest.java","additions":136,"deletions":136,"binary":false,"changes":272,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,3 +27,1 @@\n-import test.com.sun.javafx.test.PropertiesTestBase;\n-import java.util.ArrayList;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -32,3 +30,0 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n@@ -36,2 +31,2 @@\n-@RunWith(Parameterized.class)\n-public final class LightBase_properties_Test extends PropertiesTestBase {\n+import org.junit.jupiter.params.provider.Arguments;\n+import test.com.sun.javafx.test.PropertiesTestBase;\n@@ -39,3 +34,1 @@\n-    @Parameters\n-    public static Collection data() {\n-        ArrayList array = new ArrayList();\n+public final class LightBase_properties_Test extends PropertiesTestBase {\n@@ -43,0 +36,1 @@\n+    public static Stream<Arguments> data() {\n@@ -46,8 +40,4 @@\n-        array.add(config(testLight, \"lightOn\", true, false));\n-        array.add(config(testLight, \"color\", Color.WHITE, null));\n-\n-        return array;\n-    }\n-\n-    public LightBase_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        return Stream.of(\n+            config(testLight, \"lightOn\", true, false),\n+            config(testLight, \"color\", Color.WHITE, null)\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/LightBase_properties_Test.java","additions":10,"deletions":20,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,2 +59,6 @@\n-import static org.junit.Assert.*;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Mouse3DTest.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import static org.junit.Assert.*;\n@@ -36,3 +35,0 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n@@ -56,0 +52,8 @@\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n@@ -1002,4 +1006,4 @@\n-                    Assert.assertEquals(Double.NaN, event.getX(), 0.0001);\n-                    Assert.assertEquals(Double.NaN, event.getY(), 0.0001);\n-                    Assert.assertEquals(251.0, event.getSceneX(), 0.0001);\n-                    Assert.assertEquals(251.0, event.getSceneY(), 0.0001);\n+                    assertEquals(Double.NaN, event.getX(), 0.0001);\n+                    assertEquals(Double.NaN, event.getY(), 0.0001);\n+                    assertEquals(251.0, event.getSceneX(), 0.0001);\n+                    assertEquals(251.0, event.getSceneY(), 0.0001);\n@@ -1299,1 +1303,1 @@\n-            Assert.assertEquals(5, event.getZ(), 0.00001);\n+            assertEquals(5, event.getZ(), 0.00001);\n@@ -1341,6 +1345,6 @@\n-            Assert.assertEquals(16.58, event.getPickResult().getIntersectedPoint().getX(), 0.1);\n-            Assert.assertEquals(7.33, event.getPickResult().getIntersectedPoint().getY(), 0.1);\n-            Assert.assertEquals(0.0, event.getPickResult().getIntersectedPoint().getZ(), 0.0001);\n-            Assert.assertEquals(295.81, event.getX(), 0.1);\n-            Assert.assertEquals(57.64, event.getY(), 0.1);\n-            Assert.assertEquals(-3.0, event.getZ(), 0.1);\n+            assertEquals(16.58, event.getPickResult().getIntersectedPoint().getX(), 0.1);\n+            assertEquals(7.33, event.getPickResult().getIntersectedPoint().getY(), 0.1);\n+            assertEquals(0.0, event.getPickResult().getIntersectedPoint().getZ(), 0.0001);\n+            assertEquals(295.81, event.getX(), 0.1);\n+            assertEquals(57.64, event.getY(), 0.1);\n+            assertEquals(-3.0, event.getZ(), 0.1);\n@@ -1376,6 +1380,6 @@\n-            Assert.assertEquals(14.07, event.getPickResult().getIntersectedPoint().getX(), 0.1);\n-            Assert.assertEquals(5.97, event.getPickResult().getIntersectedPoint().getY(), 0.1);\n-            Assert.assertEquals(0.0, event.getPickResult().getIntersectedPoint().getZ(), 0.0001);\n-            Assert.assertEquals(216.49, event.getX(), 0.1);\n-            Assert.assertEquals(57.64, event.getY(), 0.1);\n-            Assert.assertEquals(-191.49, event.getZ(), 0.1);\n+            assertEquals(14.07, event.getPickResult().getIntersectedPoint().getX(), 0.1);\n+            assertEquals(5.97, event.getPickResult().getIntersectedPoint().getY(), 0.1);\n+            assertEquals(0.0, event.getPickResult().getIntersectedPoint().getZ(), 0.0001);\n+            assertEquals(216.49, event.getX(), 0.1);\n+            assertEquals(57.64, event.getY(), 0.1);\n+            assertEquals(-191.49, event.getZ(), 0.1);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/MouseTest.java","additions":26,"deletions":22,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,3 +62,0 @@\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n@@ -87,1 +84,10 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n@@ -93,2 +99,0 @@\n-    @Rule\n-    public ExpectedException thrown = ExpectedException.none();\n@@ -173,2 +177,2 @@\n-        assertSame(\"getPseudoClassStates() should always return the same instance\",\n-                set1, set2);\n+        assertSame(set1, set2,\n+                   \"getPseudoClassStates() should always return the same instance\");\n@@ -177,1 +181,1 @@\n-    @Test(expected=UnsupportedOperationException.class)\n+    @Test\n@@ -179,2 +183,4 @@\n-        Node node = new Rectangle();\n-        node.getPseudoClassStates().add(PseudoClass.getPseudoClass(\"dummy\"));\n+        assertThrows(UnsupportedOperationException.class, () -> {\n+            Node node = new Rectangle();\n+            node.getPseudoClassStates().add(PseudoClass.getPseudoClass(\"dummy\"));\n+        });\n@@ -217,1 +223,1 @@\n-        assertNotNull(\"pseudoClassStates must not be gc'ed\", weakRef.get());\n+        assertNotNull(weakRef.get(), \"pseudoClassStates must not be gc'ed\");\n@@ -964,7 +970,8 @@\n-        thrown.expect(IllegalArgumentException.class);\n-        try {\n-            rectA.setClip(clip2);\n-        } catch (final IllegalArgumentException e) {\n-            assertNotSame(rectA.getClip(), clip2);\n-            throw e;\n-        }\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            try {\n+                rectA.setClip(clip2);\n+            } catch (final IllegalArgumentException e) {\n+                assertNotSame(rectA.getClip(), clip2);\n+                throw e;\n+            }\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/NodeTest.java","additions":27,"deletions":20,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,4 @@\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Node_LocalToParentTransform_Test.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,4 @@\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Node_LocalToSceneTransform_Test.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotSame;\n@@ -38,3 +36,3 @@\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n@@ -43,2 +41,0 @@\n-    @Rule\n-    public ExpectedException thrown = ExpectedException.none();\n@@ -46,10 +42,11 @@\n-     @Test public void testClip() {\n-         Rectangle rectA = new Rectangle(300, 300);\n-         Rectangle clip1 = new Rectangle(10, 10);\n-         Rectangle clip2 = new Rectangle(100, 100);\n-         ObjectProperty<Node> v = new SimpleObjectProperty<>(clip1);\n-         rectA.clipProperty().bind(v);\n-         assertEquals(rectA.getClip(), clip1);\n-         v.set(clip2);\n-         assertEquals(rectA.getClip(), clip2);\n-     }\n+    @Test\n+    public void testClip() {\n+        Rectangle rectA = new Rectangle(300, 300);\n+        Rectangle clip1 = new Rectangle(10, 10);\n+        Rectangle clip2 = new Rectangle(100, 100);\n+        ObjectProperty<Node> v = new SimpleObjectProperty<>(clip1);\n+        rectA.clipProperty().bind(v);\n+        assertEquals(rectA.getClip(), clip1);\n+        v.set(clip2);\n+        assertEquals(rectA.getClip(), clip2);\n+    }\n@@ -57,18 +54,19 @@\n-     int countIllegalArgumentException = 0;\n-     @Test public void testIllegalClip() {\n-         Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {\n-             if (throwable instanceof IllegalArgumentException) {\n-                 countIllegalArgumentException++;\n-             } else {\n-                 Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);\n-             }\n-         });\n-         Rectangle rectA = new Rectangle(300, 300);\n-         Rectangle clip1 = new Rectangle(10, 10);\n-         Rectangle clip2 = new Rectangle(100, 100);\n-         clip2.setClip(rectA);\n-         ObjectProperty<Node> v = new SimpleObjectProperty<>(clip1);\n-         rectA.clipProperty().bind(v);\n-         assertEquals(rectA.getClip(), clip1);\n-         v.set(clip2);\n-         assertNotSame(rectA.getClip(), clip2);\n+    int countIllegalArgumentException = 0;\n+    @Test\n+    public void testIllegalClip() {\n+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {\n+            if (throwable instanceof IllegalArgumentException) {\n+                countIllegalArgumentException++;\n+            } else {\n+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);\n+            }\n+        });\n+        Rectangle rectA = new Rectangle(300, 300);\n+        Rectangle clip1 = new Rectangle(10, 10);\n+        Rectangle clip2 = new Rectangle(100, 100);\n+        clip2.setClip(rectA);\n+        ObjectProperty<Node> v = new SimpleObjectProperty<>(clip1);\n+        rectA.clipProperty().bind(v);\n+        assertEquals(rectA.getClip(), clip1);\n+        v.set(clip2);\n+        assertNotSame(rectA.getClip(), clip2);\n@@ -76,3 +74,3 @@\n-         assertEquals(\"Cycle in effect chain detected, exception should occur once.\", 1, countIllegalArgumentException);\n-         Thread.currentThread().setUncaughtExceptionHandler(null);\n-     }\n+        assertEquals(1, countIllegalArgumentException, \"Cycle in effect chain detected, exception should occur once.\");\n+        Thread.currentThread().setUncaughtExceptionHandler(null);\n+    }\n@@ -80,18 +78,19 @@\n-     @Test public void testBackToLegalClip() {\n-         countIllegalArgumentException = 0;\n-         Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {\n-             if (throwable instanceof IllegalArgumentException) {\n-                 countIllegalArgumentException++;\n-             } else {\n-                 Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);\n-             }\n-         });\n-         Rectangle rectA = new Rectangle(300, 300);\n-         Rectangle clip1 = new Rectangle(10, 10);\n-         Rectangle clip2 = new Rectangle(100, 100);\n-         clip2.setClip(rectA);\n-         ObjectProperty<Node> v = new SimpleObjectProperty<>(clip1);\n-         rectA.clipProperty().bind(v);\n-         assertEquals(rectA.getClip(), clip1);\n-         v.set(clip2);\n-         assertEquals(rectA.getClip(), clip1);\n+    @Test\n+    public void testBackToLegalClip() {\n+        countIllegalArgumentException = 0;\n+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {\n+            if (throwable instanceof IllegalArgumentException) {\n+                countIllegalArgumentException++;\n+            } else {\n+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);\n+            }\n+        });\n+        Rectangle rectA = new Rectangle(300, 300);\n+        Rectangle clip1 = new Rectangle(10, 10);\n+        Rectangle clip2 = new Rectangle(100, 100);\n+        clip2.setClip(rectA);\n+        ObjectProperty<Node> v = new SimpleObjectProperty<>(clip1);\n+        rectA.clipProperty().bind(v);\n+        assertEquals(rectA.getClip(), clip1);\n+        v.set(clip2);\n+        assertEquals(rectA.getClip(), clip1);\n@@ -99,2 +98,2 @@\n-         assertEquals(\"Cycle in effect chain detected, exception should occur once.\", 1, countIllegalArgumentException);\n-         Thread.currentThread().setUncaughtExceptionHandler(null);\n+        assertEquals(1, countIllegalArgumentException, \"Cycle in effect chain detected, exception should occur once.\");\n+        Thread.currentThread().setUncaughtExceptionHandler(null);\n@@ -103,10 +102,11 @@\n-     @Test public void testEffect() {\n-         Shadow effect1 = new Shadow();\n-         Blend effect2 = new Blend();\n-         Rectangle rectA = new Rectangle(100, 100);\n-         ObjectProperty<Effect> v = new SimpleObjectProperty<>(effect1);\n-         rectA.effectProperty().bind(v);\n-         assertEquals(rectA.getEffect(), effect1);\n-         v.set(effect2);\n-         assertEquals(rectA.getEffect(), effect2);\n-     }\n+    @Test\n+    public void testEffect() {\n+        Shadow effect1 = new Shadow();\n+        Blend effect2 = new Blend();\n+        Rectangle rectA = new Rectangle(100, 100);\n+        ObjectProperty<Effect> v = new SimpleObjectProperty<>(effect1);\n+        rectA.effectProperty().bind(v);\n+        assertEquals(rectA.getEffect(), effect1);\n+        v.set(effect2);\n+        assertEquals(rectA.getEffect(), effect2);\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Node_bind_Test.java","additions":69,"deletions":69,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -36,5 +35,0 @@\n-import org.junit.BeforeClass;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n@@ -51,1 +45,3 @@\n-@RunWith(Parameterized.class)\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n@@ -56,1 +52,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -66,3 +62,2 @@\n-    @Parameters\n-    public static Collection data() {\n-        return Arrays.asList(new Object[] {\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n@@ -110,2 +105,2 @@\n-            config(\"translateZ\", 1.0, \"-fx-translate-z\", null, 0.0),\n-        });\n+            config(\"translateZ\", 1.0, \"-fx-translate-z\", null, 0.0)\n+        );\n@@ -114,1 +109,1 @@\n-    public static Object[] config(\n+    public static Arguments config(\n@@ -123,1 +118,1 @@\n-    public static Object[] config(\n+    public static Arguments config(\n@@ -132,4 +127,0 @@\n-\n-    public Node_cssMethods_Test(final Configuration configuration) {\n-        super(configuration);\n-    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Node_cssMethods_Test.java","additions":12,"deletions":21,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,5 +37,6 @@\n-import org.junit.After;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n-import org.junit.Before;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -46,1 +47,1 @@\n-@Ignore(\"JDK-8234152\")\n+@Disabled(\"JDK-8234152\")\n@@ -53,1 +54,1 @@\n-    @Before\n+    @BeforeEach\n@@ -63,1 +64,1 @@\n-    @After\n+    @AfterEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Node_effectiveOrientation_Css_Test.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -35,5 +34,0 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n@@ -41,1 +35,5 @@\n-@RunWith(Parameterized.class)\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n@@ -44,3 +42,0 @@\n-    private final Scene testScene;\n-    private final String orientationUpdate;\n-    private final String expectedOrientation;\n@@ -108,41 +103,30 @@\n-    @Parameters\n-    public static Collection data() {\n-        return Arrays.asList(\n-                new Object[][] {\n-                        { lriiliScene(), \"......\", \"LRRRLL\" },\n-                        { lriiliScene(), \".I....\", \"LLLLLL\" },\n-                        { lriiliScene(), \"...L..\", \"LRRLLL\" },\n-                        { lriiliScene(), \"....I.\", \"LRRRRR\" },\n-                        { lriiliScene(), \"RIIIII\", \"RRRRRR\" },\n-\n-                        {\n-                            lriiliWithSubSceneScene(),\n-                            \".......\", \"LRRRLL\"\n-                        },\n-                        {\n-                            lriiliWithSubSceneScene(),\n-                            \".L.....\", \"LLLLLL\"\n-                        },\n-\n-                        { liirliPrecachedScene(), \"......\", \"LLLRLL\" },\n-                        { liirliPrecachedScene(), \"R.....\", \"RRRRLL\" },\n-                        { liirliPrecachedScene(), \"...I..\", \"LLLLLL\" },\n-                        { liirliPrecachedScene(), \"R..IR.\", \"RRRRRR\" },\n-\n-                        {\n-                            riirliPlugedPrecachedScenegraphScene(),\n-                            \"......\", \"RRRRLL\"\n-                        },\n-\n-                        { lrIiilScene(), \"......\", \"LRRRRL\" },\n-                        { lrIiilScene(), \".L....\", \"LLLLLL\" }\n-                    });\n-    }\n-\n-    public Node_effectiveOrientation_Test(\n-            final Scene testScene,\n-            final String orientationUpdate,\n-            final String expectedOrientation) {\n-        this.testScene = testScene;\n-        this.orientationUpdate = orientationUpdate;\n-        this.expectedOrientation = expectedOrientation;\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of(lriiliScene(), \"......\", \"LRRRLL\" ),\n+            Arguments.of(lriiliScene(), \".I....\", \"LLLLLL\" ),\n+            Arguments.of(lriiliScene(), \"...L..\", \"LRRLLL\" ),\n+            Arguments.of(lriiliScene(), \"....I.\", \"LRRRRR\" ),\n+            Arguments.of(lriiliScene(), \"RIIIII\", \"RRRRRR\" ),\n+\n+            Arguments.of(\n+                lriiliWithSubSceneScene(),\n+                \".......\", \"LRRRLL\"\n+            ),\n+            Arguments.of(\n+                lriiliWithSubSceneScene(),\n+                \".L.....\", \"LLLLLL\"\n+            ),\n+\n+            Arguments.of(liirliPrecachedScene(), \"......\", \"LLLRLL\" ),\n+            Arguments.of(liirliPrecachedScene(), \"R.....\", \"RRRRLL\" ),\n+            Arguments.of(liirliPrecachedScene(), \"...I..\", \"LLLLLL\" ),\n+            Arguments.of(liirliPrecachedScene(), \"R..IR.\", \"RRRRRR\" ),\n+\n+            Arguments.of(\n+                riirliPlugedPrecachedScenegraphScene(),\n+                \"......\", \"RRRRLL\"\n+            ),\n+\n+            Arguments.of(lrIiilScene(), \"......\", \"LRRRRL\" ),\n+            Arguments.of(lrIiilScene(), \".L....\", \"LLLLLL\" )\n+        );\n@@ -151,2 +135,5 @@\n-    @Test\n-    public void effectiveOrientationTest() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void effectiveOrientationTest(Scene testScene,\n+                                         String orientationUpdate,\n+                                         String expectedOrientation) {\n@@ -161,2 +148,2 @@\n-        Assert.assertEquals(\"Orientation mismatch\",\n-                            expectedOrientation, actualOrientation);\n+        assertEquals(expectedOrientation, actualOrientation,\n+                     \"Orientation mismatch\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Node_effectiveOrientation_Test.java","additions":44,"deletions":57,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -34,5 +33,0 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n@@ -40,1 +34,5 @@\n-@RunWith(Parameterized.class)\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n@@ -42,3 +40,0 @@\n-    private final Scene testScene;\n-    private final String orientationUpdate;\n-    private final String expectedMirroring;\n@@ -95,32 +90,21 @@\n-    @Parameters\n-    public static Collection data() {\n-        return Arrays.asList(\n-                new Object[][] {\n-                        { lriiliScene(), \"......\", \".M..M.\" }, \/\/ LRRRLL\n-                        { lriiliScene(), \".I....\", \"......\" }, \/\/ LLLLLL\n-                        { lriiliScene(), \"...L..\", \".M.M..\" }, \/\/ LRRLLL\n-                        { lriiliScene(), \"....I.\", \".M....\" }, \/\/ LRRRRR\n-                        { lriiliScene(), \"RIIIII\", \".M....\" }, \/\/ RRRRRR\n-\n-                        {\n-                            lriiliWithSubSceneScene(),\n-                            \"......\", \".M..M.\"\n-                        },\n-\n-                        \/* effective: LRRRLL, automatic: LRLLLL *\/\n-                        { lrIiliScene(), \"......\", \".MMMM.\" },\n-                        \/* effective: LRLRLR, automatic: LRLLLR *\/\n-                        { lrLRlrScene(), \"......\", \".MM..M\" },\n-\n-                        \/* effective: LRRRRL, automatic: LRLRRL *\/\n-                        { lrIiilScene(), \"...R..\", \".MMM.M\" },\n-                    });\n-    }\n-\n-    public Node_hasMirroring_Test(\n-            final Scene testScene,\n-            final String orientationUpdate,\n-            final String expectedMirroring) {\n-        this.testScene = testScene;\n-        this.orientationUpdate = orientationUpdate;\n-        this.expectedMirroring = expectedMirroring;\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( lriiliScene(), \"......\", \".M..M.\" ), \/\/ LRRRLL\n+            Arguments.of( lriiliScene(), \".I....\", \"......\" ), \/\/ LLLLLL\n+            Arguments.of( lriiliScene(), \"...L..\", \".M.M..\" ), \/\/ LRRLLL\n+            Arguments.of( lriiliScene(), \"....I.\", \".M....\" ), \/\/ LRRRRR\n+            Arguments.of( lriiliScene(), \"RIIIII\", \".M....\" ), \/\/ RRRRRR\n+\n+            Arguments.of(\n+                lriiliWithSubSceneScene(),\n+                \"......\", \".M..M.\"\n+            ),\n+\n+            \/* effective: LRRRLL, automatic: LRLLLL *\/\n+            Arguments.of( lrIiliScene(), \"......\", \".MMMM.\" ),\n+            \/* effective: LRLRLR, automatic: LRLLLR *\/\n+            Arguments.of( lrLRlrScene(), \"......\", \".MM..M\" ),\n+\n+            \/* effective: LRRRRL, automatic: LRLRRL *\/\n+            Arguments.of( lrIiilScene(), \"...R..\", \".MMM.M\" )\n+        );\n@@ -129,2 +113,5 @@\n-    @Test\n-    public void hasMirroringTest() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void hasMirroringTest(Scene testScene,\n+                                 String orientationUpdate,\n+                                 String expectedMirroring) {\n@@ -139,2 +126,2 @@\n-        Assert.assertEquals(\"Mirroring mismatch\",\n-                            expectedMirroring, actualMirroring);\n+        assertEquals(expectedMirroring, actualMirroring,\n+                     \"Mirroring mismatch\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Node_hasMirroring_Test.java","additions":35,"deletions":48,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,3 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -47,1 +48,2 @@\n-    @Test public void Node_prefWidth_BasedOnLayoutBounds() {\n+    @Test\n+    public void Node_prefWidth_BasedOnLayoutBounds() {\n@@ -57,1 +59,2 @@\n-    @Test public void Node_prefWidth_BasedOnLayoutBounds2() {\n+    @Test\n+    public void Node_prefWidth_BasedOnLayoutBounds2() {\n@@ -67,1 +70,2 @@\n-    @Test public void Node_prefWidth_BasedOnLayoutBounds_CleansUpAfterBadBounds() {\n+    @Test\n+    public void Node_prefWidth_BasedOnLayoutBounds_CleansUpAfterBadBounds() {\n@@ -77,1 +81,2 @@\n-    @Test public void Node_prefWidth_BasedOnLayoutBounds_CleansUpAfterBadBounds2() {\n+    @Test\n+    public void Node_prefWidth_BasedOnLayoutBounds_CleansUpAfterBadBounds2() {\n@@ -89,1 +94,2 @@\n-    @Test public void Node_prefHeight_BasedOnLayoutBounds() {\n+    @Test\n+    public void Node_prefHeight_BasedOnLayoutBounds() {\n@@ -99,1 +105,2 @@\n-    @Test public void Node_prefHeight_BasedOnLayoutBounds2() {\n+    @Test\n+    public void Node_prefHeight_BasedOnLayoutBounds2() {\n@@ -109,1 +116,2 @@\n-    @Test public void Node_prefHeight_BasedOnLayoutBounds_CleansUpAfterBadBounds() {\n+    @Test\n+    public void Node_prefHeight_BasedOnLayoutBounds_CleansUpAfterBadBounds() {\n@@ -119,1 +127,2 @@\n-    @Test public void Node_prefHeight_BasedOnLayoutBounds_CleansUpAfterBadBounds2() {\n+    @Test\n+    public void Node_prefHeight_BasedOnLayoutBounds_CleansUpAfterBadBounds2() {\n@@ -131,1 +140,2 @@\n-    @Test public void Node_minWidth_SameAsPrefWidth() {\n+    @Test\n+    public void Node_minWidth_SameAsPrefWidth() {\n@@ -147,1 +157,2 @@\n-    @Test public void Node_minHeight_SameAsPrefHeight() {\n+    @Test\n+    public void Node_minHeight_SameAsPrefHeight() {\n@@ -163,1 +174,2 @@\n-    @Test public void Node_maxWidth_SameAsPrefWidth() {\n+    @Test\n+    public void Node_maxWidth_SameAsPrefWidth() {\n@@ -179,1 +191,2 @@\n-    @Test public void Node_maxHeight_SameAsPrefHeight() {\n+    @Test\n+    public void Node_maxHeight_SameAsPrefHeight() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Node_layoutSizes_Test.java","additions":28,"deletions":15,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -28,4 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-\n@@ -39,2 +35,5 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -50,1 +49,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -79,1 +79,2 @@\n-    @Test public void test_lookup_on_nodes_without_pseudo_classes() {\n+    @Test\n+    public void test_lookup_on_nodes_without_pseudo_classes() {\n@@ -102,1 +103,2 @@\n-    @Test public void test_lookupAll_on_nodes_without_pseudo_classes() {\n+    @Test\n+    public void test_lookupAll_on_nodes_without_pseudo_classes() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Node_lookup_Test.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -37,4 +36,0 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n@@ -43,1 +38,0 @@\n-import test.com.sun.javafx.test.OnInvalidateMethodsTestBase;\n@@ -49,2 +43,2 @@\n-@RunWith(Parameterized.class)\n-public class Node_onInvalidate_Test extends OnInvalidateMethodsTestBase {\n+import org.junit.jupiter.params.provider.Arguments;\n+import test.com.sun.javafx.test.OnInvalidateMethodsTestBase;\n@@ -52,3 +46,1 @@\n-    public Node_onInvalidate_Test(Configuration configuration) {\n-        super(configuration);\n-    }\n+public class Node_onInvalidate_Test extends OnInvalidateMethodsTestBase {\n@@ -56,33 +48,31 @@\n-    @Parameters\n-    public static Collection<Object[]>data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(Rectangle.class, \"visible\", false, new DirtyBits[] {DirtyBits.NODE_VISIBLE, DirtyBits.NODE_BOUNDS})},\n-            {new Configuration(Rectangle.class, \"cursor\", Cursor.WAIT, new CssMetaData[] {findCssCSSProperty(\"-fx-cursor\")})},\n-            {new Configuration(Rectangle.class, \"opacity\", 0.5, new CssMetaData[] {findCssCSSProperty(\"-fx-opacity\")})},\n-            {new Configuration(Rectangle.class, \"opacity\", 0.5, new DirtyBits[] {DirtyBits.NODE_OPACITY})},\n-            {new Configuration(Rectangle.class, \"viewOrder\", 0.5, new CssMetaData[] {findCssCSSProperty(\"-fx-view-order\")})},\n-            {new Configuration(Rectangle.class, \"viewOrder\", 0.5, new DirtyBits[] {DirtyBits.NODE_VIEW_ORDER})},\n-            {new Configuration(Rectangle.class, \"blendMode\", BlendMode.DARKEN, new CssMetaData[] {findCssCSSProperty(\"-fx-blend-mode\")})},\n-            {new Configuration(Rectangle.class, \"blendMode\", BlendMode.DARKEN, new DirtyBits[] {DirtyBits.NODE_BLENDMODE})},\n-            {new Configuration(Rectangle.class, \"cache\", true, new DirtyBits[] {DirtyBits.NODE_CACHE})},\n-            {new Configuration(Rectangle.class, \"cacheHint\", CacheHint.QUALITY, new DirtyBits[] {DirtyBits.NODE_CACHE})},\n-            {new Configuration(Rectangle.class, \"effect\", new Shadow(), new CssMetaData[] {findCssCSSProperty(\"-fx-effect\")})},\n-            {new Configuration(Rectangle.class, \"translateX\", 1.5, new CssMetaData[] {findCssCSSProperty(\"-fx-translate-x\")})},\n-            {new Configuration(Rectangle.class, \"translateX\", 1.5, new DirtyBits[] {DirtyBits.NODE_TRANSFORM})},\n-            {new Configuration(Rectangle.class, \"translateY\", 1.5, new CssMetaData[] {findCssCSSProperty(\"-fx-translate-y\")})},\n-            {new Configuration(Rectangle.class, \"translateY\", 1.5, new DirtyBits[] {DirtyBits.NODE_TRANSFORM})},\n-            {new Configuration(Rectangle.class, \"translateZ\", 1.5, new CssMetaData[] {findCssCSSProperty(\"-fx-translate-z\")})},\n-            {new Configuration(Rectangle.class, \"translateZ\", 1.5, new DirtyBits[] {DirtyBits.NODE_TRANSFORM})},\n-            {new Configuration(Rectangle.class, \"scaleX\", 5.5, new CssMetaData[] {findCssCSSProperty(\"-fx-scale-x\")})},\n-            {new Configuration(Rectangle.class, \"scaleX\", 5.5, new DirtyBits[] {DirtyBits.NODE_TRANSFORM})},\n-            {new Configuration(Rectangle.class, \"scaleY\", 5.5, new CssMetaData[] {findCssCSSProperty(\"-fx-scale-y\")})},\n-            {new Configuration(Rectangle.class, \"scaleY\", 5.5, new DirtyBits[] {DirtyBits.NODE_TRANSFORM})},\n-            {new Configuration(Rectangle.class, \"scaleZ\", 5.5, new CssMetaData[] {findCssCSSProperty(\"-fx-scale-z\")})},\n-            {new Configuration(Rectangle.class, \"scaleZ\", 5.5, new DirtyBits[] {DirtyBits.NODE_TRANSFORM})},\n-            {new Configuration(Rectangle.class, \"rotate\", 55, new CssMetaData[] {findCssCSSProperty(\"-fx-rotate\")})},\n-            {new Configuration(Rectangle.class, \"rotate\", 55, new DirtyBits[] {DirtyBits.NODE_TRANSFORM})},\n-            {new Configuration(Rectangle.class, \"rotationAxis\", Rotate.X_AXIS, new DirtyBits[] {DirtyBits.NODE_TRANSFORM})},\n-            {new Configuration(Rectangle.class, \"clip\", new Rectangle(10, 10), new DirtyBits[] {DirtyBits.NODE_CLIP})},\n-            {new Configuration(Rectangle.class, \"focusTraversable\", true, new CssMetaData[] {findCssCSSProperty(\"-fx-focus-traversable\")})}\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(Rectangle.class, \"visible\", false, new DirtyBits[] {DirtyBits.NODE_VISIBLE, DirtyBits.NODE_BOUNDS}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"cursor\", Cursor.WAIT, new CssMetaData[] {findCssCSSProperty(\"-fx-cursor\")}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"opacity\", 0.5, new CssMetaData[] {findCssCSSProperty(\"-fx-opacity\")}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"opacity\", 0.5, new DirtyBits[] {DirtyBits.NODE_OPACITY}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"viewOrder\", 0.5, new CssMetaData[] {findCssCSSProperty(\"-fx-view-order\")}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"viewOrder\", 0.5, new DirtyBits[] {DirtyBits.NODE_VIEW_ORDER}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"blendMode\", BlendMode.DARKEN, new CssMetaData[] {findCssCSSProperty(\"-fx-blend-mode\")}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"blendMode\", BlendMode.DARKEN, new DirtyBits[] {DirtyBits.NODE_BLENDMODE}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"cache\", true, new DirtyBits[] {DirtyBits.NODE_CACHE}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"cacheHint\", CacheHint.QUALITY, new DirtyBits[] {DirtyBits.NODE_CACHE}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"effect\", new Shadow(), new CssMetaData[] {findCssCSSProperty(\"-fx-effect\")}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"translateX\", 1.5, new CssMetaData[] {findCssCSSProperty(\"-fx-translate-x\")}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"translateX\", 1.5, new DirtyBits[] {DirtyBits.NODE_TRANSFORM}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"translateY\", 1.5, new CssMetaData[] {findCssCSSProperty(\"-fx-translate-y\")}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"translateY\", 1.5, new DirtyBits[] {DirtyBits.NODE_TRANSFORM}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"translateZ\", 1.5, new CssMetaData[] {findCssCSSProperty(\"-fx-translate-z\")}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"translateZ\", 1.5, new DirtyBits[] {DirtyBits.NODE_TRANSFORM}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"scaleX\", 5.5, new CssMetaData[] {findCssCSSProperty(\"-fx-scale-x\")}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"scaleX\", 5.5, new DirtyBits[] {DirtyBits.NODE_TRANSFORM}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"scaleY\", 5.5, new CssMetaData[] {findCssCSSProperty(\"-fx-scale-y\")}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"scaleY\", 5.5, new DirtyBits[] {DirtyBits.NODE_TRANSFORM}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"scaleZ\", 5.5, new CssMetaData[] {findCssCSSProperty(\"-fx-scale-z\")}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"scaleZ\", 5.5, new DirtyBits[] {DirtyBits.NODE_TRANSFORM}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"rotate\", 55, new CssMetaData[] {findCssCSSProperty(\"-fx-rotate\")}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"rotate\", 55, new DirtyBits[] {DirtyBits.NODE_TRANSFORM}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"rotationAxis\", Rotate.X_AXIS, new DirtyBits[] {DirtyBits.NODE_TRANSFORM}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"clip\", new Rectangle(10, 10), new DirtyBits[] {DirtyBits.NODE_CLIP}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"focusTraversable\", true, new CssMetaData[] {findCssCSSProperty(\"-fx-focus-traversable\")}) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Node_onInvalidate_Test.java","additions":36,"deletions":46,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -39,4 +38,0 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n@@ -44,1 +39,0 @@\n-import test.com.sun.javafx.test.PropertiesTestBase;\n@@ -52,1 +46,3 @@\n-@RunWith(Parameterized.class)\n+import org.junit.jupiter.params.provider.Arguments;\n+import test.com.sun.javafx.test.PropertiesTestBase;\n+\n@@ -54,2 +50,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -64,1 +60,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -159,5 +155,1 @@\n-        });\n-    }\n-\n-    public Node_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Node_properties_Test.java","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,3 @@\n-import static org.junit.Assert.assertEquals;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/PaneTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,3 +45,0 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -49,1 +46,9 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -55,1 +60,1 @@\n-    @Before\n+    @BeforeEach\n@@ -61,1 +66,1 @@\n-    @After\n+    @AfterEach\n@@ -378,1 +383,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -380,2 +385,4 @@\n-        Group g = new Group();\n-        ParentShim.getChildren(g).add(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Group g = new Group();\n+            ParentShim.getChildren(g).add(null);\n+        });\n@@ -384,1 +391,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -386,2 +393,4 @@\n-        Group g = new Group();\n-        ParentShim.getChildren(g).addAll(null, new Rectangle(), null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Group g = new Group();\n+            ParentShim.getChildren(g).addAll(null, new Rectangle(), null);\n+        });\n@@ -390,1 +399,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -392,1 +401,2 @@\n-        Group g = new Group();\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Group g = new Group();\n@@ -394,2 +404,2 @@\n-        Node clipParent = new Rectangle();\n-        Node clipNode = new Rectangle();\n+            Node clipParent = new Rectangle();\n+            Node clipNode = new Rectangle();\n@@ -397,7 +407,7 @@\n-        clipParent.setClip(clipNode);\n-        try {\n-            \/\/ try to add node which is already set as a clip\n-            ParentShim.getChildren(g).add(clipNode);\n-            fail();\n-        } catch (IllegalArgumentException e) {\n-        }\n+            clipParent.setClip(clipNode);\n+            try {\n+                \/\/ try to add node which is already set as a clip\n+                ParentShim.getChildren(g).add(clipNode);\n+                fail();\n+            } catch (IllegalArgumentException e) {\n+            }\n@@ -405,2 +415,3 @@\n-        \/\/ try again\n-        ParentShim.getChildren(g).add(clipNode);\n+            \/\/ try again\n+            ParentShim.getChildren(g).add(clipNode);\n+        });\n@@ -429,1 +440,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -431,1 +442,2 @@\n-        Group g = new Group();\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Group g = new Group();\n@@ -433,4 +445,4 @@\n-        Rectangle r1 = new Rectangle();\n-        Rectangle r2 = new Rectangle();\n-        Rectangle r3 = new Rectangle();\n-        Rectangle r4 = new Rectangle();\n+            Rectangle r1 = new Rectangle();\n+            Rectangle r2 = new Rectangle();\n+            Rectangle r3 = new Rectangle();\n+            Rectangle r4 = new Rectangle();\n@@ -438,2 +450,3 @@\n-        ParentShim.getChildren(g).addAll(r1, r2, r3, r4);\n-        ParentShim.getChildren(g).setAll(r1, r2, r2, r4);\n+            ParentShim.getChildren(g).addAll(r1, r2, r3, r4);\n+            ParentShim.getChildren(g).setAll(r1, r2, r2, r4);\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/ParentTest.java","additions":47,"deletions":34,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -33,4 +32,0 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n@@ -39,1 +34,2 @@\n-@RunWith(Parameterized.class)\n+import org.junit.jupiter.params.provider.Arguments;\n+\n@@ -43,3 +39,2 @@\n-    @Parameters\n-    public static Collection data() {\n-        return Arrays.asList(new Object[] {\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n@@ -47,5 +42,1 @@\n-        });\n-    }\n-\n-    public Parent_cssMethods_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Parent_cssMethods_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n@@ -42,1 +40,3 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Parent_recomputeBounds_Test.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -44,1 +42,7 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -55,1 +59,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -76,1 +81,2 @@\n-    @Test public void emptyParentShouldHaveEmptyPGGroup() {\n+    @Test\n+    public void emptyParentShouldHaveEmptyPGGroup() {\n@@ -80,1 +86,2 @@\n-    @Test public void childAddedToEmptyParentShouldBeInPGGroup() {\n+    @Test\n+    public void childAddedToEmptyParentShouldBeInPGGroup() {\n@@ -87,1 +94,2 @@\n-    @Test public void childrenAddedToEmptyParentShouldAllBeInPGGroup() {\n+    @Test\n+    public void childrenAddedToEmptyParentShouldAllBeInPGGroup() {\n@@ -96,1 +104,2 @@\n-    @Test public void addingAChildToTheBack() {\n+    @Test\n+    public void addingAChildToTheBack() {\n@@ -108,1 +117,2 @@\n-    @Test public void addingAChildToTheFront() {\n+    @Test\n+    public void addingAChildToTheFront() {\n@@ -120,1 +130,2 @@\n-    @Test public void addingAChildToTheCenter() {\n+    @Test\n+    public void addingAChildToTheCenter() {\n@@ -132,1 +143,2 @@\n-    @Test public void removingAChildFromTheFront() {\n+    @Test\n+    public void removingAChildFromTheFront() {\n@@ -143,1 +155,2 @@\n-    @Test public void removingAChildFromTheBack() {\n+    @Test\n+    public void removingAChildFromTheBack() {\n@@ -154,1 +167,2 @@\n-    @Test public void removingAChildFromTheCenter() {\n+    @Test\n+    public void removingAChildFromTheCenter() {\n@@ -165,1 +179,2 @@\n-    @Test public void movingAChildFromTheBackToTheFront() {\n+    @Test\n+    public void movingAChildFromTheBackToTheFront() {\n@@ -177,1 +192,2 @@\n-    @Test public void movingAChildFromTheBackToTheFrontAndAddingAChild() {\n+    @Test\n+    public void movingAChildFromTheBackToTheFrontAndAddingAChild() {\n@@ -191,1 +207,2 @@\n-    @Test public void movingAChildFromTheBackToTheFrontAndRemovingAChild() {\n+    @Test\n+    public void movingAChildFromTheBackToTheFrontAndRemovingAChild() {\n@@ -203,1 +220,2 @@\n-    @Test public void movingAChildFromTheBackToTheFrontAndThenRemovingTheChild() {\n+    @Test\n+    public void movingAChildFromTheBackToTheFrontAndThenRemovingTheChild() {\n@@ -215,1 +233,2 @@\n-    @Test public void movingAChildFromTheCenterToTheFront() {\n+    @Test\n+    public void movingAChildFromTheCenterToTheFront() {\n@@ -227,1 +246,2 @@\n-    @Test public void movingAChildFromTheCenterToTheBack() {\n+    @Test\n+    public void movingAChildFromTheCenterToTheBack() {\n@@ -239,1 +259,2 @@\n-    @Test public void movingAChildFromTheCenterToTheFrontAndAddingAChild() {\n+    @Test\n+    public void movingAChildFromTheCenterToTheFrontAndAddingAChild() {\n@@ -253,1 +274,2 @@\n-    @Test public void movingAChildFromTheCenterToTheFrontAndRemovingAChild() {\n+    @Test\n+    public void movingAChildFromTheCenterToTheFrontAndRemovingAChild() {\n@@ -265,1 +287,2 @@\n-    @Test public void movingAChildFromTheCenterToTheFrontAndThenRemovingTheChild() {\n+    @Test\n+    public void movingAChildFromTheCenterToTheFrontAndThenRemovingTheChild() {\n@@ -277,1 +300,2 @@\n-    @Test public void movingAChildFromTheFrontToTheBack() {\n+    @Test\n+    public void movingAChildFromTheFrontToTheBack() {\n@@ -289,1 +313,2 @@\n-    @Test public void movingAChildFromTheFrontToTheBackAndAddingAChild() {\n+    @Test\n+    public void movingAChildFromTheFrontToTheBackAndAddingAChild() {\n@@ -303,1 +328,2 @@\n-    @Test public void movingAChildFromTheFrontToTheBackAndRemovingAChild() {\n+    @Test\n+    public void movingAChildFromTheFrontToTheBackAndRemovingAChild() {\n@@ -315,1 +341,2 @@\n-    @Test public void movingAChildFromTheFrontToTheBackAndThenRemovingTheChild() {\n+    @Test\n+    public void movingAChildFromTheFrontToTheBackAndThenRemovingTheChild() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Parent_structure_sync_Test.java","additions":54,"deletions":27,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,4 +31,0 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n@@ -38,1 +34,5 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/PickAndContainsTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,4 +51,0 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n@@ -71,3 +67,11 @@\n-import static junit.framework.Assert.assertEquals;\n-import static junit.framework.Assert.assertNotNull;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -86,1 +90,1 @@\n-    @Before\n+    @BeforeEach\n@@ -93,1 +97,1 @@\n-    @After\n+    @AfterEach\n@@ -169,1 +173,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -171,1 +175,3 @@\n-        Scene scene = new Scene(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Scene scene = new Scene(null);\n+        });\n@@ -174,1 +180,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -176,2 +182,4 @@\n-        Scene scene = new Scene(new Group());\n-        scene.setRoot(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Scene scene = new Scene(new Group());\n+            scene.setRoot(null);\n+        });\n@@ -654,1 +662,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -656,1 +664,2 @@\n-        Camera camera = new PerspectiveCamera();\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Camera camera = new PerspectiveCamera();\n@@ -658,2 +667,2 @@\n-        Scene scene1 = new Scene(new Group(camera));\n-        Scene scene2 = new Scene(new Group());\n+            Scene scene1 = new Scene(new Group(camera));\n+            Scene scene2 = new Scene(new Group());\n@@ -661,2 +670,3 @@\n-        scene1.setCamera(camera);\n-        scene2.setCamera(camera);\n+            scene1.setCamera(camera);\n+            scene2.setCamera(camera);\n+        });\n@@ -665,1 +675,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -667,1 +677,2 @@\n-        Camera camera = new PerspectiveCamera();\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Camera camera = new PerspectiveCamera();\n@@ -669,2 +680,2 @@\n-        SubScene subScene = new SubScene(new Group(camera), 150, 150);\n-        Scene scene = new Scene(new Group(subScene));\n+            SubScene subScene = new SubScene(new Group(camera), 150, 150);\n+            Scene scene = new Scene(new Group(subScene));\n@@ -672,2 +683,3 @@\n-        subScene.setCamera(camera);\n-        scene.setCamera(camera);\n+            subScene.setCamera(camera);\n+            scene.setCamera(camera);\n+        });\n@@ -676,1 +688,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -678,1 +690,2 @@\n-        Camera camera = new PerspectiveCamera();\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Camera camera = new PerspectiveCamera();\n@@ -680,1 +693,1 @@\n-        Scene scene = new Scene(new Group());\n+            Scene scene = new Scene(new Group());\n@@ -682,2 +695,2 @@\n-        SubScene subScene = new SubScene(new Group(camera), 150, 150);\n-        Scene otherScene = new Scene(new Group(subScene));\n+            SubScene subScene = new SubScene(new Group(camera), 150, 150);\n+            Scene otherScene = new Scene(new Group(subScene));\n@@ -685,2 +698,3 @@\n-        subScene.setCamera(camera);\n-        scene.setCamera(camera);\n+            subScene.setCamera(camera);\n+            scene.setCamera(camera);\n+        });\n@@ -689,1 +703,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -691,1 +705,2 @@\n-        Camera camera = new PerspectiveCamera();\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Camera camera = new PerspectiveCamera();\n@@ -693,2 +708,2 @@\n-        SubScene subScene = new SubScene(new Group(camera), 150, 150);\n-        Scene scene = new Scene(new Group());\n+            SubScene subScene = new SubScene(new Group(camera), 150, 150);\n+            Scene scene = new Scene(new Group());\n@@ -696,2 +711,3 @@\n-        subScene.setCamera(camera);\n-        scene.setCamera(camera);\n+            subScene.setCamera(camera);\n+            scene.setCamera(camera);\n+        });\n@@ -700,1 +716,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -702,1 +718,2 @@\n-        Camera camera = new PerspectiveCamera();\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Camera camera = new PerspectiveCamera();\n@@ -704,3 +721,3 @@\n-        SubScene nestedSubScene = new SubScene(new Group(camera), 100, 100);\n-        SubScene subScene = new SubScene(new Group(nestedSubScene), 150, 150);\n-        Scene scene = new Scene(new Group(subScene));\n+            SubScene nestedSubScene = new SubScene(new Group(camera), 100, 100);\n+            SubScene subScene = new SubScene(new Group(nestedSubScene), 150, 150);\n+            Scene scene = new Scene(new Group(subScene));\n@@ -708,2 +725,3 @@\n-        nestedSubScene.setCamera(camera);\n-        scene.setCamera(camera);\n+            nestedSubScene.setCamera(camera);\n+            scene.setCamera(camera);\n+        });\n@@ -765,1 +783,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -767,5 +785,7 @@\n-        Scene scene = new Scene(new Group(), 300, 200);\n-        Scene scene2 = new Scene(new Group(), 300, 200);\n-        Camera cam = new ParallelCamera();\n-        scene.setCamera(cam);\n-        scene2.setCamera(cam);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Scene scene = new Scene(new Group(), 300, 200);\n+            Scene scene2 = new Scene(new Group(), 300, 200);\n+            Camera cam = new ParallelCamera();\n+            scene.setCamera(cam);\n+            scene2.setCamera(cam);\n+        });\n@@ -774,1 +794,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -776,5 +796,7 @@\n-        SubScene sub = new SubScene(new Group(), 100, 100);\n-        Scene scene = new Scene(new Group(sub), 300, 200);\n-        Camera cam = new ParallelCamera();\n-        sub.setCamera(cam);\n-        scene.setCamera(cam);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            SubScene sub = new SubScene(new Group(), 100, 100);\n+            Scene scene = new Scene(new Group(sub), 300, 200);\n+            Camera cam = new ParallelCamera();\n+            sub.setCamera(cam);\n+            scene.setCamera(cam);\n+        });\n@@ -881,1 +903,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -883,2 +905,4 @@\n-        Scene scene = new Scene(new Group(), 300, 300);\n-        scene.addPreLayoutPulseListener(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Scene scene = new Scene(new Group(), 300, 300);\n+            scene.addPreLayoutPulseListener(null);\n+        });\n@@ -887,1 +911,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -889,2 +913,4 @@\n-        Scene scene = new Scene(new Group(), 300, 300);\n-        scene.addPostLayoutPulseListener(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Scene scene = new Scene(new Group(), 300, 300);\n+            scene.addPostLayoutPulseListener(null);\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/SceneTest.java","additions":91,"deletions":65,"binary":false,"changes":156,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -40,5 +39,0 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-import test.com.sun.javafx.test.PropertiesTestBase;\n@@ -49,1 +43,3 @@\n-@RunWith(Parameterized.class)\n+import org.junit.jupiter.params.provider.Arguments;\n+import test.com.sun.javafx.test.PropertiesTestBase;\n+\n@@ -51,2 +47,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -68,1 +64,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -135,5 +131,1 @@\n-        });\n-    }\n-\n-    public Scene_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Scene_properties_Test.java","additions":9,"deletions":17,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n-\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -44,4 +41,4 @@\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -54,1 +51,0 @@\n-@RunWith(Parameterized.class)\n@@ -56,4 +52,0 @@\n-    private final EventType<?> eventType;\n-    private final PropertyReference sceneOnHandlerPropRef;\n-    private final PropertyReference nodeOnHandlerPropRef;\n-    private final Event triggeringEvent;\n@@ -61,2 +53,1 @@\n-    @Parameters\n-    public static Collection data() {\n+    public static Stream<Arguments> data() {\n@@ -65,2 +56,2 @@\n-        return Arrays.asList(new Object[][] {\n-            {\n+        return Stream.of(\n+            config(\n@@ -70,1 +61,2 @@\n-            }, {\n+            ),\n+            config(\n@@ -74,1 +66,2 @@\n-            }, {\n+            ),\n+            config(\n@@ -78,1 +71,2 @@\n-            }, {\n+            ),\n+            config(\n@@ -83,1 +77,2 @@\n-            }, {\n+            ),\n+            config(\n@@ -88,1 +83,2 @@\n-            }, {\n+            ),\n+            config(\n@@ -93,1 +89,2 @@\n-            }, {\n+            ),\n+            config(\n@@ -98,1 +95,2 @@\n-            }, {\n+            ),\n+            config(\n@@ -103,1 +101,2 @@\n-            }, {\n+            ),\n+            config(\n@@ -108,1 +107,2 @@\n-            }, {\n+            ),\n+            config(\n@@ -113,1 +113,2 @@\n-            }, {\n+            ),\n+            config(\n@@ -117,1 +118,2 @@\n-            }, {\n+            ),\n+            config(\n@@ -121,1 +123,2 @@\n-            }, {\n+            ),\n+            config(\n@@ -125,1 +128,2 @@\n-            }, {\n+            ),\n+            config(\n@@ -129,1 +133,2 @@\n-            }, {\n+            ),\n+            config(\n@@ -133,2 +138,2 @@\n-            }\n-        });\n+            )\n+        );\n@@ -137,10 +142,9 @@\n-    public Scenegraph_eventHandlers_Test(\n-            final EventType<?> eventType,\n-            final String onHandlerName,\n-            final Event triggeringEvent) {\n-        this.eventType = eventType;\n-        this.sceneOnHandlerPropRef =\n-                PropertyReference.createForBean(Scene.class, onHandlerName);\n-        this.nodeOnHandlerPropRef =\n-                PropertyReference.createForBean(Node.class, onHandlerName);\n-        this.triggeringEvent = triggeringEvent;\n+    private static Arguments config(final EventType<?> eventType,\n+                                    final String onHandlerName,\n+                                    final Event triggeringEvent) {\n+        return Arguments.of(\n+            eventType,\n+            PropertyReference.createForBean(Scene.class, onHandlerName),\n+            PropertyReference.createForBean(Node.class, onHandlerName),\n+            triggeringEvent\n+        );\n@@ -149,2 +153,6 @@\n-    @Test\n-    public void shouldCallRegisteredHandlers() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void shouldCallRegisteredHandlers(EventType<?> eventType,\n+                                             PropertyReference sceneOnHandlerPropRef,\n+                                             PropertyReference nodeOnHandlerPropRef,\n+                                             Event triggeringEvent) {\n@@ -209,2 +217,6 @@\n-    @Test\n-    public void shouldNotCallHandlersWithoutDispatcher() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void shouldNotCallHandlersWithoutDispatcher(EventType<?> eventType,\n+                                                       PropertyReference sceneOnHandlerPropRef,\n+                                                       PropertyReference nodeOnHandlerPropRef,\n+                                                       Event triggeringEvent) {\n@@ -245,2 +257,6 @@\n-    @Test\n-    public void shouldNotPropagateConsumedCapturingEvents() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void shouldNotPropagateConsumedCapturingEvents(EventType<?> eventType,\n+                                                          PropertyReference sceneOnHandlerPropRef,\n+                                                          PropertyReference nodeOnHandlerPropRef,\n+                                                          Event triggeringEvent) {\n@@ -281,2 +297,6 @@\n-    @Test\n-    public void shouldNotPropagateConsumedBubblingEvents() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void shouldNotPropagateConsumedBubblingEvents(EventType<?> eventType,\n+                                                         PropertyReference sceneOnHandlerPropRef,\n+                                                         PropertyReference nodeOnHandlerPropRef,\n+                                                         Event triggeringEvent) {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Scenegraph_eventHandlers_Test.java","additions":72,"deletions":52,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -39,8 +39,0 @@\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n@@ -50,0 +42,8 @@\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n@@ -72,3 +72,0 @@\n-    @Rule\n-    public ExpectedException thrown = ExpectedException.none();\n-\n@@ -157,3 +154,3 @@\n-        assertNull(\"clipParent is null\", NodeShim.getClipParent(n));\n-        assertNull(\"parent is null\", n.getParent());\n-        assertNull(\"scene is null\", n.getScene());\n+        assertNull(NodeShim.getClipParent(n), \"clipParent is null\");\n+        assertNull(n.getParent(), \"parent is null\");\n+        assertNull(n.getScene(), \"scene is null\");\n@@ -168,4 +165,4 @@\n-        assertSame(\"parent.clip is child\", child, parent.getClip());\n-        assertSame(\"child.clipParent is parent\", parent, NodeShim.getClipParent(child));\n-        assertNull(\"child.parent is null\", child.getParent());\n-        assertNull(\"scene is null\", child.getScene());\n+        assertSame(child, parent.getClip(), \"parent.clip is child\");\n+        assertSame(parent, NodeShim.getClipParent(child), \"child.clipParent is parent\");\n+        assertNull(child.getParent(), \"child.parent is null\");\n+        assertNull(child.getScene(), \"scene is null\");\n@@ -179,5 +176,5 @@\n-        assertNull(\"group.clip is null\", group.getClip());\n-        assertTrue(\"isChild of group\", isChild(child, group));\n-        assertNull(\"child.clipParent is null\", NodeShim.getClipParent(child));\n-        assertSame(\"child.parent is parent\", group, child.getParent());\n-        assertNull(\"child.getScene() is null\", child.getScene());\n+        assertNull(group.getClip(), \"group.clip is null\");\n+        assertTrue(isChild(child, group), \"isChild of group\");\n+        assertNull(NodeShim.getClipParent(child), \"child.clipParent is null\");\n+        assertSame(group, child.getParent(), \"child.parent is parent\");\n+        assertNull(child.getScene(), \"child.getScene() is null\");\n@@ -191,3 +188,3 @@\n-        assertTrue(\"isChild of scene\", isRoot(root, scene));\n-        assertNull(\"child.clipParent is null\", NodeShim.getClipParent(root));\n-        assertSame(\"child.getScene() is scene\", scene, root.getScene());\n+        assertTrue(isRoot(root, scene), \"isChild of scene\");\n+        assertNull(NodeShim.getClipParent(root), \"child.clipParent is null\");\n+        assertSame(scene, root.getScene(), \"child.getScene() is scene\");\n@@ -203,2 +200,2 @@\n-        assertSame(\"group.getScene() is scene\", scene, group.getScene());\n-        assertSame(\"child.getScene() is scene\", scene, child.getScene());\n+        assertSame(scene, group.getScene(), \"group.getScene() is scene\");\n+        assertSame(scene, child.getScene(), \"child.getScene() is scene\");\n@@ -215,2 +212,2 @@\n-        assertSame(\"group.getScene() is scene\", scene, group.getScene());\n-        assertSame(\"child.getScene() is scene\", scene, child.getScene());\n+        assertSame(scene, group.getScene(), \"group.getScene() is scene\");\n+        assertSame(scene, child.getScene(), \"child.getScene() is scene\");\n@@ -219,1 +216,2 @@\n-    @Test public void testUnparentCL() {\n+    @Test\n+    public void testUnparentCL() {\n@@ -225,2 +223,2 @@\n-        assertNull(\"parent.clip is null\", parent.getClip());\n-        assertNull(\"child.clipParent is null\", NodeShim.getClipParent(child));\n+        assertNull(parent.getClip(), \"parent.clip is null\");\n+        assertNull(NodeShim.getClipParent(child), \"child.clipParent is null\");\n@@ -229,1 +227,2 @@\n-    @Test public void testUnparentG() {\n+    @Test\n+    public void testUnparentG() {\n@@ -236,2 +235,2 @@\n-        assertEquals(\"parent.content is zero size\", 0, ParentShim.getChildren(parent).size());\n-        assertNull(\"child.parent is null\", child.getParent());\n+        assertEquals(0, ParentShim.getChildren(parent).size(), \"parent.content is zero size\");\n+        assertNull(child.getParent(), \"child.parent is null\");\n@@ -248,1 +247,2 @@\n-    @Test public void testSwitchCLCL() {\n+    @Test\n+    public void testSwitchCLCL() {\n@@ -253,12 +253,13 @@\n-        thrown.expect(IllegalArgumentException.class);\n-        try {\n-            p2.setClip(child);\n-        } catch (final IllegalArgumentException e) {\n-            assertSame(\"p1.clip is child\", child, p1.getClip());\n-            assertNull(\"p2.clip is null\", p2.getClip());\n-            assertSame(\"child.clipParent is p1\",\n-                       p1, NodeShim.getClipParent(child));\n-            assertNull(\"child.parent is null\", child.getParent());\n-            assertNull(\"child.getScene() is null\", child.getScene());\n-            throw e;\n-        }\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            try {\n+                p2.setClip(child);\n+            } catch (final IllegalArgumentException e) {\n+                assertSame(child, p1.getClip(), \"p1.clip is child\");\n+                assertNull(p2.getClip(), \"p2.clip is null\");\n+                assertSame(p1, NodeShim.getClipParent(child),\n+                           \"child.clipParent is p1\");\n+                assertNull(child.getParent(), \"child.parent is null\");\n+                assertNull(child.getScene(), \"child.getScene() is null\");\n+                throw e;\n+            }\n+        });\n@@ -267,1 +268,2 @@\n-    @Test public void testSwitchCLG() {\n+    @Test\n+    public void testSwitchCLG() {\n@@ -280,6 +282,6 @@\n-        assertSame(\"p1.clip is child\", child, p1.getClip());\n-        assertNull(\"p2.clip is null\", p2.getClip());\n-        assertTrue(\"notChild of p2\", notChild(child, p2));\n-        assertSame(\"child.clipParent is p1\", p1, NodeShim.getClipParent(child));\n-        assertNull(\"child.parent is null\", child.getParent());\n-        assertNull(\"child.getScene() is null\", child.getScene());\n+        assertSame(child, p1.getClip(), \"p1.clip is child\");\n+        assertNull(p2.getClip(), \"p2.clip is null\");\n+        assertTrue(notChild(child, p2), \"notChild of p2\");\n+        assertSame(p1, NodeShim.getClipParent(child), \"child.clipParent is p1\");\n+        assertNull(child.getParent(), \"child.parent is null\");\n+        assertNull(child.getScene(), \"child.getScene() is null\");\n@@ -288,1 +290,2 @@\n-    @Test public void testSwitchCLS() {\n+    @Test\n+    public void testSwitchCLS() {\n@@ -298,4 +301,4 @@\n-        assertSame(\"p1.clip is child\", clipNode, p1.getClip());\n-        assertSame(\"child.clipParent is p1\", p1, NodeShim.getClipParent(clipNode));\n-        assertNull(\"child.parent is null\", clipNode.getParent());\n-        assertNull(\"child.getScene() is null\", clipNode.getScene());\n+        assertSame(clipNode, p1.getClip(), \"p1.clip is child\");\n+        assertSame(p1, NodeShim.getClipParent(clipNode), \"child.clipParent is p1\");\n+        assertNull(clipNode.getParent(), \"child.parent is null\");\n+        assertNull(clipNode.getScene(), \"child.getScene() is null\");\n@@ -304,1 +307,2 @@\n-    @Test public void testSwitchGCL() {\n+    @Test\n+    public void testSwitchGCL() {\n@@ -308,12 +312,13 @@\n-        thrown.expect(IllegalArgumentException.class);\n-        try {\n-            p2.setClip(child);\n-        } catch (final IllegalArgumentException e) {\n-            assertNull(\"p1.clip is null\", p1.getClip());\n-            assertTrue(\"isChild of p1\", isChild(child, p1));\n-            assertNull(\"p2.clip is null\", p2.getClip());\n-            assertNull(\"child.clipParent is null\", NodeShim.getClipParent(child));\n-            assertSame(\"child.parent is p1\", p1, child.getParent());\n-            assertNull(\"child.getScene() is null\", child.getScene());\n-            throw e;\n-        }\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            try {\n+                p2.setClip(child);\n+            } catch (final IllegalArgumentException e) {\n+                assertNull(p1.getClip(), \"p1.clip is null\");\n+                assertTrue(isChild(child, p1), \"isChild of p1\");\n+                assertNull(p2.getClip(), \"p2.clip is null\");\n+                assertNull(NodeShim.getClipParent(child), \"child.clipParent is null\");\n+                assertSame(p1, child.getParent(), \"child.parent is p1\");\n+                assertNull(child.getScene(), \"child.getScene() is null\");\n+                throw e;\n+            }\n+        });\n@@ -324,1 +329,2 @@\n-\/\/    @Test public void testSwitchGG() {\n+\/\/    @Test\n+\/\/    public void testSwitchGG() {\n@@ -330,8 +336,8 @@\n-\/\/        assertTrue(\"caught IllegalArgumentException\", caught instanceof IllegalArgumentException);\n-\/\/        assertNull(\"p1.clip is null\", p1.clip);\n-\/\/        assertTrue(\"isChild of p1\", isChild(child, p1));\n-\/\/        assertNull(\"p2.clip is null\", p2.clip);\n-\/\/        assertTrue(\"notChild of p2\", notChild(child, p2));\n-\/\/        assertNull(\"child.clipParent is null\", NodeShim.getClipParent(child));\n-\/\/        assertSame(\"child.parent is p1\", p1, child.parent);\n-\/\/        assertNull(\"child.getScene() is null\", child.getScene());\n+\/\/        assertTrue(caught instanceof IllegalArgumentException, \"caught IllegalArgumentException\");\n+\/\/        assertNull(p1.clip, \"p1.clip is null\");\n+\/\/        assertTrue(isChild(child, p1), \"isChild of p1\");\n+\/\/        assertNull(p2.clip, \"p2.clip is null\");\n+\/\/        assertTrue(notChild(child, p2), \"notChild of p2\");\n+\/\/        assertNull(NodeShim.getClipParent(child), \"child.clipParent is null\");\n+\/\/        assertSame(p1, child.parent, \"child.parent is p1\");\n+\/\/        assertNull(child.getScene(), \"child.getScene() is null\");\n@@ -342,1 +348,2 @@\n-\/\/    @Test public void testSwitchGS() {\n+\/\/    @Test\n+\/\/    public void testSwitchGS() {\n@@ -348,7 +355,7 @@\n-\/\/        assertTrue(\"caught IllegalArgumentException\", caught instanceof IllegalArgumentException);\n-\/\/        assertNull(\"p1.clip is null\", p1.clip);\n-\/\/        assertTrue(\"isChild of p1\", isChild(child, p1));\n-\/\/        assertTrue(\"notChild of p2\", notChild(child, p2));\n-\/\/        assertNull(\"child.clipParent is null\", NodeShim.getClipParent(child));\n-\/\/        assertSame(\"child.parent is p1\", p1, child.parent);\n-\/\/        assertNull(\"child.getScene() is null\", child.getScene());\n+\/\/        assertTrue(caught instanceof IllegalArgumentException, \"caught IllegalArgumentException\");\n+\/\/        assertNull(p1.clip, \"p1.clip is null\");\n+\/\/        assertTrue(isChild(child, p1), \"isChild of p1\");\n+\/\/        assertTrue(notChild(child, p2), \"notChild of p2\");\n+\/\/        assertNull(NodeShim.getClipParent(child), \"child.clipParent is null\");\n+\/\/        assertSame(p1, child.parent, \"child.parent is p1\");\n+\/\/        assertNull(child.getScene(), \"child.getScene() is null\");\n@@ -359,1 +366,2 @@\n-    @Test public void testSwitchGGStopgap() {\n+    @Test\n+    public void testSwitchGGStopgap() {\n@@ -364,3 +372,3 @@\n-        assertTrue(\"notChild of p1\", notChild(child, p1));\n-        assertTrue(\"isChild of p2\", isChild(child, p2));\n-        assertSame(\"child.parent is p2\", p2, child.getParent());\n+        assertTrue(notChild(child, p1), \"notChild of p1\");\n+        assertTrue(isChild(child, p2), \"isChild of p2\");\n+        assertSame(p2, child.getParent(), \"child.parent is p2\");\n@@ -369,1 +377,2 @@\n-    @Test public void testSwitchSCL() {\n+    @Test\n+    public void testSwitchSCL() {\n@@ -373,10 +382,11 @@\n-        thrown.expect(IllegalArgumentException.class);\n-        try {\n-            p2.setClip(root);\n-        } catch (final IllegalArgumentException e) {\n-            assertTrue(\"isRoot of scene\", isRoot(root, scene));\n-            assertNull(\"p2.clip is null\", p2.getClip());\n-            assertNull(\"root.clipParent is null\", NodeShim.getClipParent(root));\n-            assertSame(\"root.getScene() is scene\", scene, root.getScene());\n-            throw e;\n-        }\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            try {\n+                p2.setClip(root);\n+            } catch (final IllegalArgumentException e) {\n+                assertTrue(isRoot(root, scene), \"isRoot of scene\");\n+                assertNull(p2.getClip(), \"p2.clip is null\");\n+                assertNull(NodeShim.getClipParent(root), \"root.clipParent is null\");\n+                assertSame(scene, root.getScene(), \"root.getScene() is scene\");\n+                throw e;\n+            }\n+        });\n@@ -388,1 +398,2 @@\n-\/\/    @Test public void testSwitchSG() {\n+\/\/    @Test\n+\/\/    public void testSwitchSG() {\n@@ -394,7 +405,7 @@\n-\/\/        assertTrue(\"caught IllegalArgumentException\", caught instanceof IllegalArgumentException);\n-\/\/        assertTrue(\"isChild of p1\", isChild(child, p1));\n-\/\/        assertNull(\"p2.clip is null\", p2.clip);\n-\/\/        assertTrue(\"notChild of p2\", notChild(child, p2));\n-\/\/        assertNull(\"child.clipParent is null\", NodeShim.getClipParent(child));\n-\/\/        assertSame(\"child.parent is p1.impl_root\", p1.impl_root, child.parent);\n-\/\/        assertSame(\"child.getScene() is p1\", p1, child.getScene());\n+\/\/        assertTrue(caught instanceof IllegalArgumentException, \"caught IllegalArgumentException\");\n+\/\/        assertTrue(isChild(child, p1), \"isChild of p1\");\n+\/\/        assertNull(p2.clip, \"p2.clip is null\");\n+\/\/        assertTrue(notChild(child, p2), \"notChild of p2\");\n+\/\/        assertNull(NodeShim.getClipParent(child), \"child.clipParent is null\");\n+\/\/        assertSame(p1.impl_root, child.parent, \"child.parent is p1.impl_root\");\n+\/\/        assertSame(p1, child.getScene(), \"child.getScene() is p1\");\n@@ -405,1 +416,2 @@\n-\/\/    @Test public void testSwitchSS() {\n+\/\/    @Test\n+\/\/    public void testSwitchSS() {\n@@ -411,5 +423,5 @@\n-\/\/        assertTrue(\"isChild of p1\", isChild(child, p1));\n-\/\/        assertTrue(\"notChild of p2\", notChild(child, p2));\n-\/\/        assertNull(\"child.clipParent is null\", NodeShim.getClipParent(child));\n-\/\/        assertSame(\"child.parent is p1.impl_root\", p1.impl_root, child.parent);\n-\/\/        assertSame(\"child.getScene() is p1\", p1, child.getScene());\n+\/\/        assertTrue(isChild(child, p1), \"isChild of p1\");\n+\/\/        assertTrue(notChild(child, p2), \"notChild of p2\");\n+\/\/        assertNull(NodeShim.getClipParent(child), \"child.clipParent is null\");\n+\/\/        assertSame(p1.impl_root, child.parent, \"child.parent is p1.impl_root\");\n+\/\/        assertSame(p1, child.getScene(), \"child.getScene() is p1\");\n@@ -418,1 +430,2 @@\n-    @Test public void testGroupInsert() {\n+    @Test\n+    public void testGroupInsert() {\n@@ -435,4 +448,4 @@\n-        assertEquals(\"g.content is size 3\", 3, ParentShim.getChildren(g).size());\n-        assertSame(\"g.content[0] is n0\", n0, ParentShim.getChildren(g).get(0));\n-        assertSame(\"g.content[1] is n1\", n1, ParentShim.getChildren(g).get(1));\n-        assertSame(\"g.content[2] is n2\", n2, ParentShim.getChildren(g).get(2));\n+        assertEquals(3, ParentShim.getChildren(g).size(), \"g.content is size 3\");\n+        assertSame(n0, ParentShim.getChildren(g).get(0), \"g.content[0] is n0\");\n+        assertSame(n1, ParentShim.getChildren(g).get(1), \"g.content[1] is n1\");\n+        assertSame(n2, ParentShim.getChildren(g).get(2), \"g.content[2] is n2\");\n@@ -443,1 +456,2 @@\n-    @Test public void testGroupReplace1() {\n+    @Test\n+    public void testGroupReplace1() {\n@@ -463,3 +477,3 @@\n-        assertEquals(\"g.content is size 2\", 2, ParentShim.getChildren(g).size());\n-        assertSame(\"g.content[0] is n0\", n0, ParentShim.getChildren(g).get(0));\n-        assertSame(\"g.content[1] is n2\", n2, ParentShim.getChildren(g).get(1));\n+        assertEquals(2, ParentShim.getChildren(g).size(), \"g.content is size 2\");\n+        assertSame(n0, ParentShim.getChildren(g).get(0), \"g.content[0] is n0\");\n+        assertSame(n2, ParentShim.getChildren(g).get(1), \"g.content[1] is n2\");\n@@ -468,1 +482,2 @@\n-    @Test public void testGroupReplace2() {\n+    @Test\n+    public void testGroupReplace2() {\n@@ -484,4 +499,4 @@\n-        assertEquals(\"g.content is size 3\", 3, ParentShim.getChildren(g).size());\n-        assertSame(\"g.content[0] is n0\", n0, ParentShim.getChildren(g).get(0));\n-        assertSame(\"g.content[1] is n1\", n1, ParentShim.getChildren(g).get(1));\n-        assertSame(\"g.content[2] is n2\", n2, ParentShim.getChildren(g).get(2));\n+        assertEquals(3, ParentShim.getChildren(g).size(), \"g.content is size 3\");\n+        assertSame(n0, ParentShim.getChildren(g).get(0), \"g.content[0] is n0\");\n+        assertSame(n1, ParentShim.getChildren(g).get(1), \"g.content[1] is n1\");\n+        assertSame(n2, ParentShim.getChildren(g).get(2), \"g.content[2] is n2\");\n@@ -490,1 +505,2 @@\n-    @Test public void testGroupReplace3() {\n+    @Test\n+    public void testGroupReplace3() {\n@@ -501,4 +517,4 @@\n-        assertEquals(\"g.content is size 3\", 3, ParentShim.getChildren(g).size());\n-        assertSame(\"g.content[0] is n0\", n0, ParentShim.getChildren(g).get(0));\n-        assertSame(\"g.content[1] is n1\", n1, ParentShim.getChildren(g).get(1));\n-        assertSame(\"g.content[2] is n2\", n2, ParentShim.getChildren(g).get(2));\n+        assertEquals(3, ParentShim.getChildren(g).size(), \"g.content is size 3\");\n+        assertSame(n0, ParentShim.getChildren(g).get(0), \"g.content[0] is n0\");\n+        assertSame(n1, ParentShim.getChildren(g).get(1), \"g.content[1] is n1\");\n+        assertSame(n2, ParentShim.getChildren(g).get(2), \"g.content[2] is n2\");\n@@ -520,1 +536,2 @@\n-    @Test public void testCircularCLCL() {\n+    @Test\n+    public void testCircularCLCL() {\n@@ -524,12 +541,13 @@\n-        thrown.expect(IllegalArgumentException.class);\n-        try {\n-            node1.setClip(node2);\n-        } catch (final IllegalArgumentException e) {\n-            assertNull(\"node1.clip is null\", node1.getClip());\n-            assertSame(\"node1.clipParent is node2\",\n-                       node2,\n-                       NodeShim.getClipParent(node1));\n-            assertSame(\"node2.clip is node1\", node1, node2.getClip());\n-            assertNull(\"node2.clipParent is null\", NodeShim.getClipParent(node2));\n-            throw e;\n-        }\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            try {\n+                node1.setClip(node2);\n+            } catch (final IllegalArgumentException e) {\n+                assertNull(node1.getClip(), \"node1.clip is null\");\n+                assertSame(node2,\n+                           NodeShim.getClipParent(node1),\n+                           \"node1.clipParent is node2\");\n+                assertSame(node1, node2.getClip(), \"node2.clip is node1\");\n+                assertNull(NodeShim.getClipParent(node2), \"node2.clipParent is null\");\n+                throw e;\n+            }\n+        });\n@@ -538,1 +556,2 @@\n-    @Test public void testCircularCLG() {\n+    @Test\n+    public void testCircularCLG() {\n@@ -541,12 +560,13 @@\n-        thrown.expect(IllegalArgumentException.class);\n-        try {\n-            node1.setClip(node2);\n-        } catch (final IllegalArgumentException e) {\n-            assertNull(\"node1.clip is null\", node1.getClip());\n-            assertNull(\"node1.clipParent is null\", NodeShim.getClipParent(node1));\n-            assertSame(\"node1.parent is node2\", node2, node1.getParent());\n-            assertNull(\"node2.clip is null\", node2.getClip());\n-            assertNull(\"node2.clipParent is null\", NodeShim.getClipParent(node2));\n-            assertTrue(\"node1 is child of node2\", isChild(node1, node2));\n-            throw e;\n-        }\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            try {\n+                node1.setClip(node2);\n+            } catch (final IllegalArgumentException e) {\n+                assertNull(node1.getClip(), \"node1.clip is null\");\n+                assertNull(NodeShim.getClipParent(node1), \"node1.clipParent is null\");\n+                assertSame(node2, node1.getParent(), \"node1.parent is node2\");\n+                assertNull(node2.getClip(), \"node2.clip is null\");\n+                assertNull(NodeShim.getClipParent(node2), \"node2.clipParent is null\");\n+                assertTrue(isChild(node1, node2), \"node1 is child of node2\");\n+                throw e;\n+            }\n+        });\n@@ -555,1 +575,2 @@\n-    @Test public void testCircularGCL() {\n+    @Test\n+    public void testCircularGCL() {\n@@ -568,6 +589,6 @@\n-        assertNull(\"node1.clip is null\", node1.getClip());\n-        assertSame(\"node1.clipParent is node2\", node2, NodeShim.getClipParent(node1));\n-        assertTrue(\"node2 is not child of node1\", notChild(node2, node1));\n-        assertSame(\"node2.clip is node1\", node1, node2.getClip());\n-        assertNull(\"node2.clipParent is null\", NodeShim.getClipParent(node2));\n-        assertNull(\"node2.parent is null\", node2.getParent());\n+        assertNull(node1.getClip(), \"node1.clip is null\");\n+        assertSame(node2, NodeShim.getClipParent(node1), \"node1.clipParent is node2\");\n+        assertTrue(notChild(node2, node1), \"node2 is not child of node1\");\n+        assertSame(node1, node2.getClip(), \"node2.clip is node1\");\n+        assertNull(NodeShim.getClipParent(node2), \"node2.clipParent is null\");\n+        assertNull(node2.getParent(), \"node2.parent is null\");\n@@ -576,1 +597,2 @@\n-    @Test public void testCircularGG() {\n+    @Test\n+    public void testCircularGG() {\n@@ -588,4 +610,4 @@\n-        assertSame(\"node1.parent is node2\", node2, node1.getParent());\n-        assertTrue(\"node2 is not a child of node1\", notChild(node2, node1));\n-        assertNull(\"node2.parent is null\", node2.getParent());\n-        assertTrue(\"node1 is child of node2\", isChild(node1, node2));\n+        assertSame(node2, node1.getParent(), \"node1.parent is node2\");\n+        assertTrue(notChild(node2, node1), \"node2 is not a child of node1\");\n+        assertNull(node2.getParent(), \"node2.parent is null\");\n+        assertTrue(isChild(node1, node2), \"node1 is child of node2\");\n@@ -594,1 +616,2 @@\n-    @Test public void testCircularSelfCL() {\n+    @Test\n+    public void testCircularSelfCL() {\n@@ -596,8 +619,9 @@\n-        thrown.expect(IllegalArgumentException.class);\n-        try {\n-            node1.setClip(node1);\n-        } catch (final IllegalArgumentException e) {\n-            assertNull(\"node1.clip is null\", node1.getClip());\n-            assertNull(\"node1.clipParent is null\", NodeShim.getClipParent(node1));\n-            throw e;\n-        }\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            try {\n+                node1.setClip(node1);\n+            } catch (final IllegalArgumentException e) {\n+                assertNull(node1.getClip(), \"node1.clip is null\");\n+                assertNull(NodeShim.getClipParent(node1), \"node1.clipParent is null\");\n+                throw e;\n+            }\n+        });\n@@ -606,1 +630,2 @@\n-    @Test public void testCircularSelfG() {\n+    @Test\n+    public void testCircularSelfG() {\n@@ -617,2 +642,2 @@\n-        assertTrue(\"node1 is not a child of itself\", notChild(node1, node1));\n-        assertNull(\"node1.parent is null\", node1.getParent());\n+        assertTrue(notChild(node1, node1), \"node1 is not a child of itself\");\n+        assertNull(node1.getParent(), \"node1.parent is null\");\n@@ -634,1 +659,2 @@\n-\/\/    @Test public void testBindClip() {\n+\/\/    @Test\n+\/\/    public void testBindClip() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/StructureTest.java","additions":216,"deletions":190,"binary":false,"changes":406,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,6 +43,8 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import org.junit.Test;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -57,1 +59,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -59,1 +61,3 @@\n-        SubScene subScene = new SubScene(null, 10, 10);\n+        assertThrows(NullPointerException.class, () -> {\n+            SubScene subScene = new SubScene(null, 10, 10);\n+        });\n@@ -62,1 +66,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -64,2 +68,4 @@\n-        SubScene subScene = new SubScene(new Group(), 10, 10);\n-        subScene.setRoot(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            SubScene subScene = new SubScene(new Group(), 10, 10);\n+            subScene.setRoot(null);\n+        });\n@@ -184,1 +190,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -186,1 +192,2 @@\n-        Camera camera = new PerspectiveCamera();\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Camera camera = new PerspectiveCamera();\n@@ -188,1 +195,1 @@\n-        Scene scene = new Scene(new Group(camera));\n+            Scene scene = new Scene(new Group(camera));\n@@ -190,2 +197,2 @@\n-        SubScene subScene = new SubScene(new Group(), 150, 150);\n-        Scene otherScene = new Scene(new Group(subScene));\n+            SubScene subScene = new SubScene(new Group(), 150, 150);\n+            Scene otherScene = new Scene(new Group(subScene));\n@@ -193,2 +200,3 @@\n-        scene.setCamera(camera);\n-        subScene.setCamera(camera);\n+            scene.setCamera(camera);\n+            subScene.setCamera(camera);\n+        });\n@@ -197,1 +205,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -199,1 +207,2 @@\n-        Camera camera = new PerspectiveCamera();\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Camera camera = new PerspectiveCamera();\n@@ -201,2 +210,2 @@\n-        SubScene subScene = new SubScene(new Group(), 150, 150);\n-        Scene scene = new Scene(new Group(camera, subScene));\n+            SubScene subScene = new SubScene(new Group(), 150, 150);\n+            Scene scene = new Scene(new Group(camera, subScene));\n@@ -204,2 +213,3 @@\n-        scene.setCamera(camera);\n-        subScene.setCamera(camera);\n+            scene.setCamera(camera);\n+            subScene.setCamera(camera);\n+        });\n@@ -208,1 +218,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -210,1 +220,2 @@\n-        Camera camera = new PerspectiveCamera();\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Camera camera = new PerspectiveCamera();\n@@ -212,2 +223,2 @@\n-        SubScene subScene = new SubScene(new Group(), 150, 150);\n-        Scene scene = new Scene(new Group(subScene));\n+            SubScene subScene = new SubScene(new Group(), 150, 150);\n+            Scene scene = new Scene(new Group(subScene));\n@@ -215,2 +226,2 @@\n-        SubScene otherSubScene = new SubScene(new Group(camera), 100, 100);\n-        Scene otherScene = new Scene(new Group(otherSubScene));\n+            SubScene otherSubScene = new SubScene(new Group(camera), 100, 100);\n+            Scene otherScene = new Scene(new Group(otherSubScene));\n@@ -218,2 +229,3 @@\n-        otherSubScene.setCamera(camera);\n-        subScene.setCamera(camera);\n+            otherSubScene.setCamera(camera);\n+            subScene.setCamera(camera);\n+        });\n@@ -222,1 +234,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -224,1 +236,2 @@\n-        Camera camera = new PerspectiveCamera();\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Camera camera = new PerspectiveCamera();\n@@ -226,2 +239,2 @@\n-        SubScene subScene = new SubScene(new Group(), 150, 150);\n-        Scene scene = new Scene(new Group(subScene));\n+            SubScene subScene = new SubScene(new Group(), 150, 150);\n+            Scene scene = new Scene(new Group(subScene));\n@@ -229,1 +242,1 @@\n-        SubScene otherSubScene = new SubScene(new Group(camera), 100, 100);\n+            SubScene otherSubScene = new SubScene(new Group(camera), 100, 100);\n@@ -231,2 +244,3 @@\n-        otherSubScene.setCamera(camera);\n-        subScene.setCamera(camera);\n+            otherSubScene.setCamera(camera);\n+            subScene.setCamera(camera);\n+        });\n@@ -235,1 +249,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -237,1 +251,2 @@\n-        Camera camera = new PerspectiveCamera();\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Camera camera = new PerspectiveCamera();\n@@ -239,3 +254,3 @@\n-        SubScene nestedSubScene = new SubScene(new Group(camera), 100, 100);\n-        SubScene subScene = new SubScene(new Group(nestedSubScene), 150, 150);\n-        Scene scene = new Scene(new Group(subScene));\n+            SubScene nestedSubScene = new SubScene(new Group(camera), 100, 100);\n+            SubScene subScene = new SubScene(new Group(nestedSubScene), 150, 150);\n+            Scene scene = new Scene(new Group(subScene));\n@@ -243,2 +258,3 @@\n-        nestedSubScene.setCamera(camera);\n-        subScene.setCamera(camera);\n+            nestedSubScene.setCamera(camera);\n+            subScene.setCamera(camera);\n+        });\n@@ -307,1 +323,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -309,6 +325,8 @@\n-        SubScene sub = new SubScene(new Group(), 100, 100);\n-        SubScene sub2 = new SubScene(new Group(), 100, 100);\n-        Scene scene = new Scene(new Group(sub, sub2), 300, 200);\n-        Camera cam = new ParallelCamera();\n-        sub.setCamera(cam);\n-        sub2.setCamera(cam);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            SubScene sub = new SubScene(new Group(), 100, 100);\n+            SubScene sub2 = new SubScene(new Group(), 100, 100);\n+            Scene scene = new Scene(new Group(sub, sub2), 300, 200);\n+            Camera cam = new ParallelCamera();\n+            sub.setCamera(cam);\n+            sub2.setCamera(cam);\n+        });\n@@ -317,1 +335,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -319,5 +337,7 @@\n-        SubScene sub = new SubScene(new Group(), 100, 100);\n-        Scene scene = new Scene(new Group(sub), 300, 200);\n-        Camera cam = new ParallelCamera();\n-        scene.setCamera(cam);\n-        sub.setCamera(cam);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            SubScene sub = new SubScene(new Group(), 100, 100);\n+            Scene scene = new Scene(new Group(sub), 300, 200);\n+            Camera cam = new ParallelCamera();\n+            scene.setCamera(cam);\n+            sub.setCamera(cam);\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/SubSceneTest.java","additions":80,"deletions":60,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,4 +36,0 @@\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n@@ -41,2 +37,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -44,1 +39,0 @@\n-import java.util.function.Supplier;\n@@ -46,3 +40,6 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -50,1 +47,0 @@\n-@RunWith(Parameterized.class)\n@@ -52,18 +48,0 @@\n-    private final Parent root;\n-    private final Node node;\n-    private final TreeShowingProperty property;\n-\n-    @Parameters\n-    public static Collection<Object[]> parameters() {\n-        Supplier<RootAndNodeToTest> supplier1 = () -> {\n-            Node node = new StackPane();\n-            return new RootAndNodeToTest(new StackPane(node), node);\n-        };\n-\n-        Supplier<RootAndNodeToTest> supplier2 = () -> {\n-            StackPane node = new StackPane();\n-            return new RootAndNodeToTest(new StackPane(new SubScene(node, 100.0, 100.0)), node);\n-        };\n-\n-        return Arrays.asList(new Object[][] { { supplier1 }, { supplier2 } });\n-    }\n@@ -71,5 +49,3 @@\n-    static class RootAndNodeToTest {\n-        RootAndNodeToTest(Parent root, Node nodeToTest) {\n-            this.root = root;\n-            this.nodeToTest = nodeToTest;\n-        }\n+    public static Stream<Arguments> parameters() {\n+        Node node1 = new StackPane();\n+        StackPane node2 = new StackPane();\n@@ -77,2 +53,4 @@\n-        Parent root;\n-        Node nodeToTest;\n+        return Stream.of(\n+            rootAndNodeToTest(new StackPane(node1), node1),\n+            rootAndNodeToTest(new StackPane(new SubScene(node2, 100.0, 100.0)), node2)\n+        );\n@@ -81,6 +59,2 @@\n-    public TreeShowingPropertyTest(Supplier<RootAndNodeToTest> nodeSupplier) {\n-        RootAndNodeToTest nodes = nodeSupplier.get();\n-\n-        this.root = nodes.root;\n-        this.node = nodes.nodeToTest;\n-        this.property = new TreeShowingProperty(this.node);\n+    private static Arguments rootAndNodeToTest(Parent root, Node node) {\n+        return Arguments.of( root, node, new TreeShowingProperty(node) );\n@@ -89,2 +63,3 @@\n-    @Test\n-    public void nodeNotAttachedToSceneShouldNotBeShowing() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void nodeNotAttachedToSceneShouldNotBeShowing(Parent root, Node node, TreeShowingProperty property) {\n@@ -94,2 +69,3 @@\n-    @Test\n-    public void getShouldTrackChangesInShowingStateForGivenNode() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void getShouldTrackChangesInShowingStateForGivenNode(Parent root, Node node, TreeShowingProperty property) {\n@@ -116,2 +92,3 @@\n-    @Test\n-    public void changeListenerShouldRegisterAndUnregisterCorrectly() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void changeListenerShouldRegisterAndUnregisterCorrectly(Parent root, Node node, TreeShowingProperty property) {\n@@ -138,2 +115,3 @@\n-    @Test\n-    public void invalidationListenerShouldRegisterAndUnregisterCorrectly() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void invalidationListenerShouldRegisterAndUnregisterCorrectly(Parent root, Node node, TreeShowingProperty property) {\n@@ -161,2 +139,3 @@\n-    @Test\n-    public void changeListenerShouldTrackShowingState() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void changeListenerShouldTrackShowingState(Parent root, Node node, TreeShowingProperty property) {\n@@ -219,2 +198,3 @@\n-    @Test\n-    public void invalidationListenerShouldNotifyOfChangesInShowingState() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void invalidationListenerShouldNotifyOfChangesInShowingState(Parent root, Node node, TreeShowingProperty property) {\n@@ -290,2 +270,3 @@\n-    @Test\n-    public void disposeShouldUnregisterListenersOnGivenNode() {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void disposeShouldUnregisterListenersOnGivenNode(Parent root, Node node, TreeShowingProperty property) {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/TreeShowingPropertyTest.java","additions":38,"deletions":57,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,3 +34,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertSame;\n@@ -39,1 +36,4 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n@@ -60,1 +60,2 @@\n-    public @Test void testPerformance_TransformChangesOnlyAffectBoundsInParent() {\n+    @Test\n+    public void testPerformance_TransformChangesOnlyAffectBoundsInParent() {\n@@ -79,1 +80,2 @@\n-    public @Test void testPerformance_GeomChangesAffectEverything() {\n+    @Test\n+    public void testPerformance_GeomChangesAffectEverything() {\n@@ -97,1 +99,2 @@\n-    public @Test void testPerformance_ComputeGeomNotCalledDuringStartup() {\n+    @Test\n+    public void testPerformance_ComputeGeomNotCalledDuringStartup() {\n@@ -109,1 +112,2 @@\n-    public @Test void testPerformance_LayoutBoundsOfResizableNotAffectedByChangesToOtherGeom() {\n+    @Test\n+    public void testPerformance_LayoutBoundsOfResizableNotAffectedByChangesToOtherGeom() {\n@@ -120,1 +124,2 @@\n-    public @Test void testPerformance_ChangingMultipleGeomOnlyCallsComputeGeomOnce() {\n+    @Test\n+    public void testPerformance_ChangingMultipleGeomOnlyCallsComputeGeomOnce() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/bounds\/BoundsPerformanceTest.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -34,1 +33,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -50,1 +50,2 @@\n-    public @Test void testClippingWithRectangle() {\n+    @Test\n+    public void testClippingWithRectangle() {\n@@ -61,1 +62,2 @@\n-    public @Test void testClippingWithGroup() {\n+    @Test\n+    public void testClippingWithGroup() {\n@@ -73,1 +75,2 @@\n-    public @Test void testClippingWithClippedRectangle() {\n+    @Test\n+    public void testClippingWithClippedRectangle() {\n@@ -86,1 +89,2 @@\n-    public @Test void testSwappingSubClipOnClippingRectangle() {\n+    @Test\n+    public void testSwappingSubClipOnClippingRectangle() {\n@@ -106,1 +110,2 @@\n-    public @Test void testClippingWithComplexClippedRectangle() {\n+    @Test\n+    public void testClippingWithComplexClippedRectangle() {\n@@ -124,1 +129,2 @@\n-    public @Test void testChangingClipBounds() {\n+    @Test\n+    public void testChangingClipBounds() {\n@@ -139,1 +145,2 @@\n-    public @Test void testSettingClip() {\n+    @Test\n+    public void testSettingClip() {\n@@ -152,1 +159,2 @@\n-    public @Test void testSwappingClip() {\n+    @Test\n+    public void testSwappingClip() {\n@@ -166,1 +174,2 @@\n-    public @Test void testRemovingClip() {\n+    @Test\n+    public void testRemovingClip() {\n@@ -179,1 +188,2 @@\n-    public @Test void testClippingAndChangingGeometry() {\n+    @Test\n+    public void testClippingAndChangingGeometry() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/bounds\/ClipBoundsTest.java","additions":23,"deletions":13,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -35,1 +34,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -41,1 +41,2 @@\n-    public @Test void testBoundsOnRectangleWithShadow() {\n+    @Test\n+    public void testBoundsOnRectangleWithShadow() {\n@@ -52,1 +53,2 @@\n-    public @Test void testBoundsOnRectangleWithShadowRemoved() {\n+    @Test\n+    public void testBoundsOnRectangleWithShadowRemoved() {\n@@ -68,1 +70,2 @@\n-    public @Test void testBoundsOnRectangleWithShadowChanged() {\n+    @Test\n+    public void testBoundsOnRectangleWithShadowChanged() {\n@@ -84,1 +87,2 @@\n-    public @Test void testBoundsOnRectangleWithShadowAndGlowChanged() {\n+    @Test\n+    public void testBoundsOnRectangleWithShadowAndGlowChanged() {\n@@ -101,1 +105,2 @@\n-    public @Test void testBoundsOnRectangleWithShadowAndClip() {\n+    @Test\n+    public void testBoundsOnRectangleWithShadowAndClip() {\n@@ -113,1 +118,2 @@\n-    public @Test void testBoundsOnRectangleWithShadowAndReflection() {\n+    @Test\n+    public void testBoundsOnRectangleWithShadowAndReflection() {\n@@ -128,1 +134,2 @@\n-    public @Test void testBoundsOnRectanglesWithShadowChanged() {\n+    @Test\n+    public void testBoundsOnRectanglesWithShadowChanged() {\n@@ -151,1 +158,2 @@\n-    public @Test void testBoundsOnRectanglesWithShadowAndGlowChanged() {\n+    @Test\n+    public void testBoundsOnRectanglesWithShadowAndGlowChanged() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/bounds\/EffectBoundsTest.java","additions":19,"deletions":11,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import static junit.framework.Assert.assertEquals;\n@@ -41,1 +40,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -51,2 +51,2 @@\n-    public @Test\n-    void testGroupBounds_Empty() {\n+    @Test\n+    public void testGroupBounds_Empty() {\n@@ -57,2 +57,2 @@\n-    public @Test\n-    void testGroupBounds_AddRect() {\n+    @Test\n+    public void testGroupBounds_AddRect() {\n@@ -70,2 +70,2 @@\n-    public @Test\n-    void testGroupBounds_ChangeRect() {\n+    @Test\n+    public void testGroupBounds_ChangeRect() {\n@@ -85,2 +85,2 @@\n-    public @Test\n-    void testGroupBounds_RemoveRect() {\n+    @Test\n+    public void testGroupBounds_RemoveRect() {\n@@ -99,2 +99,2 @@\n-    public @Test\n-    void testGroupBounds_RemoveAllChildNodesAndAddOneBack() {\n+    @Test\n+    public void testGroupBounds_RemoveAllChildNodesAndAddOneBack() {\n@@ -114,2 +114,2 @@\n-    public @Test\n-    void testGroupBounds_InitialNodeInvisible() {\n+    @Test\n+    public void testGroupBounds_InitialNodeInvisible() {\n@@ -124,2 +124,2 @@\n-    public @Test\n-    void testGroupBounds_InvisibleNodes() {\n+    @Test\n+    public void testGroupBounds_InvisibleNodes() {\n@@ -138,2 +138,2 @@\n-    public @Test\n-    void testGroupBounds_ZeroSizedNodes() {\n+    @Test\n+    public void testGroupBounds_ZeroSizedNodes() {\n@@ -151,2 +151,2 @@\n-    public @Test\n-    void testGroupBounds_NodeMadeInvisible() {\n+    @Test\n+    public void testGroupBounds_NodeMadeInvisible() {\n@@ -162,2 +162,2 @@\n-    public @Test\n-    void testGroupBounds_NodeWithNoWidthMadeInvisible() {\n+    @Test\n+    public void testGroupBounds_NodeWithNoWidthMadeInvisible() {\n@@ -173,2 +173,2 @@\n-    public @Test\n-    void testGroupBounds_FirstNodeHasNoWidthSecondNodeDoes() {\n+    @Test\n+    public void testGroupBounds_FirstNodeHasNoWidthSecondNodeDoes() {\n@@ -181,2 +181,2 @@\n-    public @Test\n-    void testGroupBounds_FirstNodeHasNoWidthSecondNodeDoes_Added() {\n+    @Test\n+    public void testGroupBounds_FirstNodeHasNoWidthSecondNodeDoes_Added() {\n@@ -193,2 +193,2 @@\n-    public @Test\n-    void testGroupBounds_FirstNodeHasNoWidthSecondNodeDoes_ClearedThenAdded() {\n+    @Test\n+    public void testGroupBounds_FirstNodeHasNoWidthSecondNodeDoes_ClearedThenAdded() {\n@@ -209,2 +209,2 @@\n-    public @Test\n-    void testGroupBounds_TwoNodesMadeInvisible_ThenNodeAdded() {\n+    @Test\n+    public void testGroupBounds_TwoNodesMadeInvisible_ThenNodeAdded() {\n@@ -229,2 +229,2 @@\n-    public @Test\n-    void testGroupBounds_TogglingVisiblityToFalseAndTrueWhileExpandingBounds() {\n+    @Test\n+    public void testGroupBounds_TogglingVisiblityToFalseAndTrueWhileExpandingBounds() {\n@@ -267,2 +267,2 @@\n-    public @Test\n-    void testMovingNodesTowardCenterOfGroupAndOther() {\n+    @Test\n+    public void testMovingNodesTowardCenterOfGroupAndOther() {\n@@ -317,2 +317,2 @@\n-    public @Test\n-    void testMovingNodesAwayFromCenterOfGroup() {\n+    @Test\n+    public void testMovingNodesAwayFromCenterOfGroup() {\n@@ -326,2 +326,2 @@\n-    public @Test\n-    void testMovingNodesWithinInteriorOfGroup() {\n+    @Test\n+    public void testMovingNodesWithinInteriorOfGroup() {\n@@ -335,2 +335,2 @@\n-    public @Test\n-    void testMovingExteriorNodesOnExterior() {\n+    @Test\n+    public void testMovingExteriorNodesOnExterior() {\n@@ -351,2 +351,2 @@\n-    public @Test\n-    void testRemovingInteriorNodes() {\n+    @Test\n+    public void testRemovingInteriorNodes() {\n@@ -359,2 +359,2 @@\n-    public @Test\n-    void testRemovingExteriorNodes() {\n+    @Test\n+    public void testRemovingExteriorNodes() {\n@@ -387,2 +387,2 @@\n-    public @Test\n-    void testGroupBounds_Stress() {\n+    @Test\n+    public void testGroupBounds_Stress() {\n@@ -473,2 +473,2 @@\n-    @Test\n-    public void testPivotXAndPivotY() {\n+ @Test\n+ public void testPivotXAndPivotY() {\n@@ -494,2 +494,2 @@\n-    public @Test\n-    void testBoundsForGroup() {\n+    @Test\n+    public void testBoundsForGroup() {\n@@ -508,2 +508,2 @@\n-    public @Test\n-    void testBoundsForGroup_childGeomChanging() {\n+    @Test\n+    public void testBoundsForGroup_childGeomChanging() {\n@@ -540,2 +540,2 @@\n-    public @Test\n-    void testBoundsInParentOfGroup() {\n+    @Test\n+    public void testBoundsInParentOfGroup() {\n@@ -557,2 +557,2 @@\n-    public @Test\n-    void testRequestingBoundsOnGroupWithNoListenersWorks() {\n+    @Test\n+    public void testRequestingBoundsOnGroupWithNoListenersWorks() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/bounds\/GroupBoundsTest.java","additions":57,"deletions":57,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -40,2 +40,2 @@\n-    public @Test\n-    void testLayoutBoundsForLeafNode() {\n+    @Test\n+    public void testLayoutBoundsForLeafNode() {\n@@ -47,2 +47,2 @@\n-    public @Test\n-    void testLayoutBoundsUpdatedForLeafNode() {\n+    @Test\n+    public void testLayoutBoundsUpdatedForLeafNode() {\n@@ -58,2 +58,2 @@\n-    public @Test\n-    void testEffectNotIncludedInLayoutBounds() {\n+    @Test\n+    public void testEffectNotIncludedInLayoutBounds() {\n@@ -69,2 +69,2 @@\n-    public @Test\n-    void testClipNotIncludedInLayoutBounds() {\n+    @Test\n+    public void testClipNotIncludedInLayoutBounds() {\n@@ -77,2 +77,2 @@\n-    public @Test\n-    void testTransformsNotIncludedInLayoutBounds() {\n+    @Test\n+    public void testTransformsNotIncludedInLayoutBounds() {\n@@ -94,2 +94,2 @@\n-    public @Test\n-    void testLayoutBoundsForGroup() {\n+    @Test\n+    public void testLayoutBoundsForGroup() {\n@@ -107,2 +107,2 @@\n-    public @Test\n-    void testEffectOnLayoutBoundsForGroup() {\n+    @Test\n+    public void testEffectOnLayoutBoundsForGroup() {\n@@ -126,2 +126,2 @@\n-    public @Test\n-    void testClipOnLayoutBoundsForGroup() {\n+    @Test\n+    public void testClipOnLayoutBoundsForGroup() {\n@@ -139,2 +139,2 @@\n-    public @Test\n-    void testTransformsOnLayoutBoundsForGroup() {\n+    @Test\n+    public void testTransformsOnLayoutBoundsForGroup() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/bounds\/LayoutBoundsTest.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -37,2 +37,2 @@\n-    public @Test\n-    void testBoundsForLeafNode() {\n+    @Test\n+    public void testBoundsForLeafNode() {\n@@ -43,2 +43,2 @@\n-    public @Test\n-    void testBounds3DForLeafNode() {\n+    @Test\n+    public void testBounds3DForLeafNode() {\n@@ -50,2 +50,2 @@\n-    public @Test\n-    void testBoundsForInvisibleLeafNode() {\n+    @Test\n+    public void testBoundsForInvisibleLeafNode() {\n@@ -67,2 +67,2 @@\n-    public @Test\n-    void testBoundsForLeafNodeUpdatesWhenGeomChanges() {\n+    @Test\n+    public void testBoundsForLeafNodeUpdatesWhenGeomChanges() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/bounds\/NodeBoundsTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -35,1 +34,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -45,2 +45,2 @@\n-    public @Test\n-    void test3DBoundsForTranslatedRectangle() {\n+    @Test\n+    public void test3DBoundsForTranslatedRectangle() {\n@@ -71,2 +71,2 @@\n-    public @Test\n-    void test3DBoundsForNegativeScaledRectangle() {\n+    @Test\n+    public void test3DBoundsForNegativeScaledRectangle() {\n@@ -93,2 +93,2 @@\n-    public @Test\n-    void testBoundsForXRotatedRectangle() {\n+    @Test\n+    public void testBoundsForXRotatedRectangle() {\n@@ -114,2 +114,2 @@\n-    public @Test\n-    void testBoundsForYRotatedRectangle() {\n+    @Test\n+    public void testBoundsForYRotatedRectangle() {\n@@ -135,2 +135,2 @@\n-    public @Test\n-    void testBoundsForZRotatedRectangle() {\n+    @Test\n+    public void testBoundsForZRotatedRectangle() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/bounds\/Transformed3DBoundsTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -39,1 +38,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -49,2 +49,2 @@\n-    public @Test\n-    void testBoundsForTranslatedRectangle() {\n+    @Test\n+    public void testBoundsForTranslatedRectangle() {\n@@ -62,2 +62,2 @@\n-    public @Test\n-    void testBoundsForNegativeScaledRectangle() {\n+    @Test\n+    public void testBoundsForNegativeScaledRectangle() {\n@@ -73,2 +73,2 @@\n-    public @Test\n-    void testBoundsForRotatedRectangle() {\n+    @Test\n+    public void testBoundsForRotatedRectangle() {\n@@ -84,2 +84,2 @@\n-    public @Test\n-    void testBoundsForRotatedGroupOfRectangles() {\n+    @Test\n+    public void testBoundsForRotatedGroupOfRectangles() {\n@@ -96,2 +96,2 @@\n-    public @Test\n-    void testBoundsForRotatedRectangleUsingTransforms() {\n+    @Test\n+    public void testBoundsForRotatedRectangleUsingTransforms() {\n@@ -107,2 +107,2 @@\n-    public @Test\n-    void testBoundsForTransformedRectangleInTransformedGroup() {\n+    @Test\n+    public void testBoundsForTransformedRectangleInTransformedGroup() {\n@@ -122,2 +122,2 @@\n-    public @Test\n-    void testUnTransformedBounds() {\n+    @Test\n+    public void testUnTransformedBounds() {\n@@ -134,2 +134,2 @@\n-    public @Test\n-    void testTranslateTxBounds() {\n+    @Test\n+    public void testTranslateTxBounds() {\n@@ -146,2 +146,2 @@\n-    public @Test\n-    void testTranslatedBounds() {\n+    @Test\n+    public void testTranslatedBounds() {\n@@ -164,2 +164,2 @@\n-    public @Test\n-    void testScaleTxBounds() {\n+    @Test\n+    public void testScaleTxBounds() {\n@@ -182,2 +182,2 @@\n-    public @Test\n-    void testScaledBounds() {\n+    @Test\n+    public void testScaledBounds() {\n@@ -201,2 +201,2 @@\n-    public @Test\n-    void testRotateTx11Bounds() {\n+    @Test\n+    public void testRotateTx11Bounds() {\n@@ -215,2 +215,2 @@\n-    public @Test\n-    void testRotateTx90Bounds() {\n+    @Test\n+    public void testRotateTx90Bounds() {\n@@ -229,2 +229,2 @@\n-    public @Test\n-    void testRotated90Bounds() {\n+    @Test\n+    public void testRotated90Bounds() {\n@@ -244,2 +244,2 @@\n-    public @Test\n-    void testRotated120Bounds() {\n+    @Test\n+    public void testRotated120Bounds() {\n@@ -258,2 +258,2 @@\n-    public @Test\n-    void testNotificationOnBoundsChangeForLeafNode() {\n+    @Test\n+    public void testNotificationOnBoundsChangeForLeafNode() {\n@@ -271,1 +271,1 @@\n-    @Test\n+@Test\n@@ -296,2 +296,2 @@\n-    public @Test\n-    void testBoundsWithTransform() {\n+    @Test\n+    public void testBoundsWithTransform() {\n@@ -314,2 +314,2 @@\n-    public @Test\n-    void testNotificationOnBoundsChangeForTransforms() {\n+    @Test\n+    public void testNotificationOnBoundsChangeForTransforms() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/bounds\/TransformedBoundsTest.java","additions":40,"deletions":40,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -48,6 +46,8 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertFalse;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n@@ -60,1 +60,1 @@\n-    @Before\n+    @BeforeEach\n@@ -66,1 +66,2 @@\n-    @Test public void testPropertyPropagation_visible() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_visible() throws Exception {\n@@ -71,1 +72,2 @@\n-    @Test public void testGetGC2() throws Exception {\n+    @Test\n+    public void testGetGC2() throws Exception {\n@@ -83,1 +85,2 @@\n-    @Test public void testGCfillRect_basic() throws Exception {\n+    @Test\n+    public void testGCfillRect_basic() throws Exception {\n@@ -87,1 +90,2 @@\n-    @Test public void testGCfillOval_basic() throws Exception {\n+    @Test\n+    public void testGCfillOval_basic() throws Exception {\n@@ -91,1 +95,2 @@\n-    @Test public void testGCfillRoundRect_basic() throws Exception {\n+    @Test\n+    public void testGCfillRoundRect_basic() throws Exception {\n@@ -95,1 +100,2 @@\n-    @Test public void testGCfillText_basic() throws Exception {\n+    @Test\n+    public void testGCfillText_basic() throws Exception {\n@@ -104,1 +110,2 @@\n-    @Test public void testGCfillPolygon_basic() throws Exception {\n+    @Test\n+    public void testGCfillPolygon_basic() throws Exception {\n@@ -112,1 +119,2 @@\n-    @Test public void testGCfillArc_basic() throws Exception {\n+    @Test\n+    public void testGCfillArc_basic() throws Exception {\n@@ -119,1 +127,2 @@\n-    @Test public void testGCdrawRect_basic() throws Exception {\n+    @Test\n+    public void testGCdrawRect_basic() throws Exception {\n@@ -123,1 +132,2 @@\n-    @Test public void testGCdrawOval_basic() throws Exception {\n+    @Test\n+    public void testGCdrawOval_basic() throws Exception {\n@@ -127,1 +137,2 @@\n-    @Test public void testGCdrawRoundRect_basic() throws Exception {\n+    @Test\n+    public void testGCdrawRoundRect_basic() throws Exception {\n@@ -131,1 +142,2 @@\n-    @Test public void testGCstrokeText_basic() throws Exception {\n+    @Test\n+    public void testGCstrokeText_basic() throws Exception {\n@@ -137,1 +149,2 @@\n-    @Test public void testGCdrawPolygon_basic() throws Exception {\n+    @Test\n+    public void testGCdrawPolygon_basic() throws Exception {\n@@ -145,1 +158,2 @@\n-    @Test public void testGCdrawArc_basic() throws Exception {\n+    @Test\n+    public void testGCdrawArc_basic() throws Exception {\n@@ -152,1 +166,2 @@\n-    @Test public void testGCfillPath_basic() throws Exception {\n+    @Test\n+    public void testGCfillPath_basic() throws Exception {\n@@ -165,1 +180,2 @@\n-    @Test public void testGCclip_basic() throws Exception {\n+    @Test\n+    public void testGCclip_basic() throws Exception {\n@@ -175,1 +191,2 @@\n-    @Test public void testGCfillDrawPath_basic() throws Exception {\n+    @Test\n+    public void testGCfillDrawPath_basic() throws Exception {\n@@ -186,1 +203,2 @@\n-    @Test public void testGCPath_LineTo_NoMoveto() throws Exception {\n+    @Test\n+    public void testGCPath_LineTo_NoMoveto() throws Exception {\n@@ -190,1 +208,2 @@\n-    @Test public void testGCPath_QuadraticCurveTo_NoMoveto() throws Exception {\n+    @Test\n+    public void testGCPath_QuadraticCurveTo_NoMoveto() throws Exception {\n@@ -194,1 +213,2 @@\n-    @Test public void testGCPath_BezierCurveTo_NoMoveto() throws Exception {\n+    @Test\n+    public void testGCPath_BezierCurveTo_NoMoveto() throws Exception {\n@@ -198,1 +218,2 @@\n-    @Test public void testGCPath_ArcTo_NoMoveto() throws Exception {\n+    @Test\n+    public void testGCPath_ArcTo_NoMoveto() throws Exception {\n@@ -202,1 +223,2 @@\n-    @Test public void testGCPath_Arc_NoMoveto() throws Exception {\n+    @Test\n+    public void testGCPath_Arc_NoMoveto() throws Exception {\n@@ -206,1 +228,2 @@\n-    @Test public void testGCPath_ClosePath_NoMoveto() throws Exception {\n+    @Test\n+    public void testGCPath_ClosePath_NoMoveto() throws Exception {\n@@ -210,1 +233,2 @@\n-    @Test public void testGCPath_Rect_NoMoveto() throws Exception {\n+    @Test\n+    public void testGCPath_Rect_NoMoveto() throws Exception {\n@@ -214,1 +238,2 @@\n-    @Test public void testGCState_Translate() throws Exception {\n+    @Test\n+    public void testGCState_Translate() throws Exception {\n@@ -225,1 +250,2 @@\n-    @Test public void testGCState_Scale() throws Exception {\n+    @Test\n+    public void testGCState_Scale() throws Exception {\n@@ -236,1 +262,2 @@\n-    @Test public void testGCState_Rotate() throws Exception {\n+    @Test\n+    public void testGCState_Rotate() throws Exception {\n@@ -245,1 +272,2 @@\n-    @Test public void testGCState_getTransform() throws Exception {\n+    @Test\n+    public void testGCState_getTransform() throws Exception {\n@@ -260,1 +288,2 @@\n-    @Test public void testGCState_FillStrokeSaveRestore() throws Exception {\n+    @Test\n+    public void testGCState_FillStrokeSaveRestore() throws Exception {\n@@ -284,1 +313,2 @@\n-    @Test public void testGCState_SetStroke() {\n+    @Test\n+    public void testGCState_SetStroke() {\n@@ -291,1 +321,2 @@\n-    @Test public void testGCState_Fill_Null() {\n+    @Test\n+    public void testGCState_Fill_Null() {\n@@ -300,1 +331,2 @@\n-    @Test public void testGCState_FillRule_Null() {\n+    @Test\n+    public void testGCState_FillRule_Null() {\n@@ -307,1 +339,2 @@\n-    @Test public void testGCState_Font_Null() {\n+    @Test\n+    public void testGCState_Font_Null() {\n@@ -315,1 +348,2 @@\n-    @Test public void testGCState_FontSmoothing_Null() {\n+    @Test\n+    public void testGCState_FontSmoothing_Null() {\n@@ -322,1 +356,2 @@\n-    @Test public void testGCState_TextBaseline_Null() {\n+    @Test\n+    public void testGCState_TextBaseline_Null() {\n@@ -329,1 +364,2 @@\n-    @Test public void testGCState_TextAlign_Null() {\n+    @Test\n+    public void testGCState_TextAlign_Null() {\n@@ -336,1 +372,2 @@\n-    @Test public void testGCState_Line() throws Exception {\n+    @Test\n+    public void testGCState_Line() throws Exception {\n@@ -366,1 +403,1 @@\n-    public void testGCState_LineCapNull() throws Exception {\n+        public void testGCState_LineCapNull() throws Exception {\n@@ -379,1 +416,1 @@\n-    public void testGCState_LineJoinNull() throws Exception {\n+        public void testGCState_LineJoinNull() throws Exception {\n@@ -392,1 +429,1 @@\n-    public void testGCState_LineDashNonPositive() throws Exception {\n+        public void testGCState_LineDashNonPositive() throws Exception {\n@@ -404,1 +441,1 @@\n-    public void testGCState_LineDashNull() throws Exception {\n+        public void testGCState_LineDashNull() throws Exception {\n@@ -427,1 +464,1 @@\n-    public void testGCState_LineDashOddLength() throws Exception {\n+        public void testGCState_LineDashOddLength() throws Exception {\n@@ -435,1 +472,1 @@\n-    public void testGCState_LineDashOffsetNonFinite() throws Exception {\n+        public void testGCState_LineDashOffsetNonFinite() throws Exception {\n@@ -446,1 +483,2 @@\n-    @Test public void testGCState_BlendMode() throws Exception {\n+    @Test\n+    public void testGCState_BlendMode() throws Exception {\n@@ -461,1 +499,2 @@\n-    @Test public void testGCState_BlendMode_Null() {\n+    @Test\n+    public void testGCState_BlendMode_Null() {\n@@ -468,2 +507,3 @@\n-    @Test public void testGCState_ImageSmoothing() {\n-        assertTrue(\"Image smoothing should be enabled by default.\", gc.isImageSmoothing());\n+    @Test\n+    public void testGCState_ImageSmoothing() {\n+        assertTrue(gc.isImageSmoothing(), \"Image smoothing should be enabled by default.\");\n@@ -472,1 +512,1 @@\n-        assertFalse(\"Image smoothing should be disabled.\", gc.isImageSmoothing());\n+        assertFalse(gc.isImageSmoothing(), \"Image smoothing should be disabled.\");\n@@ -475,1 +515,1 @@\n-        assertTrue(\"Image smoothing should be enabled.\", gc.isImageSmoothing());\n+        assertTrue(gc.isImageSmoothing(), \"Image smoothing should be enabled.\");\n@@ -478,1 +518,2 @@\n-    @Test public void testGCappendSVGPath_Null() {\n+    @Test\n+    public void testGCappendSVGPath_Null() {\n@@ -484,1 +525,2 @@\n-    @Test public void testGCappendSVGPath_IncorrectPath() {\n+    @Test\n+    public void testGCappendSVGPath_IncorrectPath() {\n@@ -488,1 +530,2 @@\n-    @Test public void testGCappendSVGPath_IncorrectPath2() {\n+    @Test\n+    public void testGCappendSVGPath_IncorrectPath2() {\n@@ -492,1 +535,2 @@\n-    @Test public void testGCapplyEffect_Null() {\n+    @Test\n+    public void testGCapplyEffect_Null() {\n@@ -496,1 +540,2 @@\n-    @Test public void testGCdrawImage_Null() {\n+    @Test\n+    public void testGCdrawImage_Null() {\n@@ -502,1 +547,2 @@\n-    @Test public void testGCdrawImage_InProgress() {\n+    @Test\n+    public void testGCdrawImage_InProgress() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/canvas\/CanvasTest.java","additions":111,"deletions":65,"binary":false,"changes":176,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.fail;\n@@ -35,2 +32,5 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -50,1 +50,1 @@\n-    @Before\n+    @BeforeEach\n@@ -414,1 +414,1 @@\n-        assertEquals(\"Cycle in effect chain detected, exception should occur 5 times.\", 5, countIllegalArgumentException);\n+        assertEquals(5, countIllegalArgumentException, \"Cycle in effect chain detected, exception should occur 5 times.\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/BlendTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -34,4 +33,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -40,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -42,2 +37,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -46,1 +41,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -51,5 +46,1 @@\n-        });\n-    }\n-\n-    public Blend_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/Blend_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -34,2 +33,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -40,1 +40,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/BloomTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -33,4 +32,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +35,0 @@\n-@RunWith(Parameterized.class)\n@@ -41,2 +36,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -45,1 +40,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -48,5 +43,1 @@\n-        });\n-    }\n-\n-    public Bloom_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/Bloom_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -33,3 +32,3 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -40,1 +39,1 @@\n-    @Before\n+    @BeforeEach\n@@ -46,4 +45,0 @@\n-    @After\n-    public void tearDown() {\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/BoxBlurTest.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -38,5 +38,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-import test.com.sun.javafx.test.BBoxComparator;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -44,0 +40,1 @@\n+import test.com.sun.javafx.test.BBoxComparator;\n@@ -45,1 +42,0 @@\n-@RunWith(Parameterized.class)\n@@ -48,3 +44,2 @@\n-    @Parameters\n-    public static Collection data() {\n-        ArrayList array = new ArrayList();\n+    public static Stream<Arguments> data() {\n+        ArrayList<Arguments> array = new ArrayList<Arguments>();\n@@ -137,5 +132,1 @@\n-        return array;\n-    }\n-\n-    public BoxBlur_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        return array.stream();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/BoxBlur_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -34,2 +33,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -40,1 +40,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/ColorAdjustTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -33,4 +32,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +35,0 @@\n-@RunWith(Parameterized.class)\n@@ -41,2 +36,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -45,1 +40,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -51,5 +46,1 @@\n-        });\n-    }\n-\n-    public ColorAdjust_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/ColorAdjust_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n@@ -32,2 +30,4 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n@@ -43,1 +43,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/ColorInputTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -39,5 +39,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-import test.com.sun.javafx.test.BBoxComparator;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -45,0 +41,1 @@\n+import test.com.sun.javafx.test.BBoxComparator;\n@@ -46,1 +43,0 @@\n-@RunWith(Parameterized.class)\n@@ -49,3 +45,2 @@\n-    @Parameters\n-    public static Collection data() {\n-        ArrayList array = new ArrayList();\n+    public static Stream<Arguments> data() {\n+        ArrayList<Arguments> array = new ArrayList<Arguments>();\n@@ -136,5 +131,1 @@\n-        return array;\n-    }\n-\n-    public ColorInput_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        return array.stream();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/ColorInput_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,5 +33,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n@@ -39,2 +34,7 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -45,1 +45,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/DisplacementMapTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -34,4 +33,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -40,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -42,2 +37,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -46,1 +41,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -54,5 +49,1 @@\n-        });\n-    }\n-\n-    public DisplacementMap_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/DisplacementMap_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n@@ -32,2 +30,4 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n@@ -42,1 +42,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/DistantLightTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -32,4 +31,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -38,1 +34,0 @@\n-@RunWith(Parameterized.class)\n@@ -40,2 +35,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -44,1 +39,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -47,5 +42,1 @@\n-        });\n-    }\n-\n-    public DistantLight_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/DistantLight_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n@@ -34,2 +32,4 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n@@ -47,1 +47,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/DropShadowTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -41,5 +41,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-import test.com.sun.javafx.test.BBoxComparator;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -47,0 +43,1 @@\n+import test.com.sun.javafx.test.BBoxComparator;\n@@ -48,1 +45,0 @@\n-@RunWith(Parameterized.class)\n@@ -51,3 +47,2 @@\n-    @Parameters\n-    public static Collection data() {\n-        ArrayList array = new ArrayList();\n+    public static Stream<Arguments> data() {\n+        ArrayList<Arguments> array = new ArrayList<Arguments>();\n@@ -216,5 +211,1 @@\n-        return array;\n-    }\n-\n-    public DropShadow_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        return array.stream();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/DropShadow_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-\n@@ -35,1 +31,1 @@\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -46,4 +42,6 @@\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -56,1 +54,0 @@\n-@RunWith(Parameterized.class)\n@@ -58,2 +55,0 @@\n-    private String effect1Name = null;\n-    private String effect2Name = null;\n@@ -69,3 +64,2 @@\n-    @Parameters\n-    public static Collection parameters() {\n-        List list = new ArrayList();\n+    public static Stream<Arguments> parameters() {\n+        Stream<Arguments> stream = Stream.empty();\n@@ -74,1 +68,1 @@\n-                list.add(new String[] { effects[i], effects[j] });\n+                stream = Stream.concat(stream, Stream.of(Arguments.of( effects[i], effects[j] )));\n@@ -77,1 +71,1 @@\n-        return list;\n+        return stream;\n@@ -80,4 +74,1 @@\n-    public EffectInputTest(final String effect1,\n-                           final String effect2) {\n-        this.effect1Name = effect1;\n-        this.effect2Name = effect2;\n+    public EffectInputTest() {\n@@ -111,2 +102,3 @@\n-    @Test\n-    public void testInput() throws Exception  {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testInput(String effect1Name, String effect2Name) throws Exception  {\n@@ -156,2 +148,3 @@\n-    @Test\n-    public void testCycle() throws Exception  {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testCycle(String effect1Name, String effect2Name) throws Exception  {\n@@ -189,2 +182,3 @@\n-    @Test\n-    public void testCycleForBoundInput() throws Exception  {\n+    @ParameterizedTest\n+    @MethodSource(\"parameters\")\n+    public void testCycleForBoundInput(String effect1Name, String effect2Name) throws Exception  {\n@@ -222,1 +216,1 @@\n-        assertEquals(\"Cycle in effect chain detected, exception should occur 2 times.\", 2, countIllegalArgumentException);\n+        assertEquals(2, countIllegalArgumentException, \"Cycle in effect chain detected, exception should occur 2 times.\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/EffectInputTest.java","additions":23,"deletions":29,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n@@ -40,1 +35,6 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/EffectTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-\n@@ -54,0 +52,2 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/EffectsTestBase.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-\n@@ -38,2 +36,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -45,1 +44,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/FloatMapTest.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -32,4 +31,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -38,1 +34,0 @@\n-@RunWith(Parameterized.class)\n@@ -40,2 +35,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -44,1 +39,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -47,5 +42,1 @@\n-        });\n-    }\n-\n-    public FloatMap_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/FloatMap_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -33,2 +32,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -39,1 +39,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/GaussianBlurTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -39,5 +39,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-import test.com.sun.javafx.test.BBoxComparator;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -45,0 +41,1 @@\n+import test.com.sun.javafx.test.BBoxComparator;\n@@ -46,1 +43,0 @@\n-@RunWith(Parameterized.class)\n@@ -49,3 +45,2 @@\n-    @Parameters\n-    public static Collection data() {\n-        ArrayList array = new ArrayList();\n+    public static Stream<Arguments> data() {\n+        ArrayList<Arguments> array = new ArrayList<Arguments>();\n@@ -97,5 +92,1 @@\n-        return array;\n-    }\n-\n-    public GaussianBlur_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        return array.stream();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/GaussianBlur_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -34,2 +33,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -40,1 +40,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/GlowTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -33,4 +32,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +35,0 @@\n-@RunWith(Parameterized.class)\n@@ -41,2 +36,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -45,1 +40,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -48,5 +43,1 @@\n-        });\n-    }\n-\n-    public Glow_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/Glow_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n@@ -35,2 +33,4 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n@@ -46,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/ImageInputTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -39,5 +39,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-import test.com.sun.javafx.test.BBoxComparator;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -45,0 +41,1 @@\n+import test.com.sun.javafx.test.BBoxComparator;\n@@ -46,1 +43,0 @@\n-@RunWith(Parameterized.class)\n@@ -49,3 +45,2 @@\n-    @Parameters\n-    public static Collection data() {\n-        ArrayList array = new ArrayList();\n+    public static Stream<Arguments> data() {\n+        ArrayList<Arguments> array = new ArrayList<Arguments>();\n@@ -123,5 +118,1 @@\n-        return array;\n-    }\n-\n-    public ImageInput_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        return array.stream();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/ImageInput_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n@@ -35,2 +33,4 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n@@ -60,1 +60,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/InnerShadowTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -35,4 +34,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -41,1 +37,0 @@\n-@RunWith(Parameterized.class)\n@@ -43,2 +38,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -47,1 +42,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -58,5 +53,1 @@\n-        });\n-    }\n-\n-    public InnerShadow_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/InnerShadow_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,5 +30,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n@@ -46,2 +41,7 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -52,1 +52,1 @@\n-    @Before\n+    @BeforeEach\n@@ -463,1 +463,1 @@\n-        assertEquals(\"Cycle in effect chain detected, exception should occur 5 times.\", 5, countIllegalArgumentException);\n+        assertEquals(5, countIllegalArgumentException, \"Cycle in effect chain detected, exception should occur 5 times.\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/LightingTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -34,4 +33,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -40,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -42,2 +37,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -46,1 +41,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -56,5 +51,1 @@\n-        });\n-    }\n-\n-    public Lighting_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/Lighting_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -33,2 +32,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -39,1 +39,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/MotionBlurTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -39,5 +39,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-import test.com.sun.javafx.test.BBoxComparator;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -45,0 +41,1 @@\n+import test.com.sun.javafx.test.BBoxComparator;\n@@ -46,1 +43,0 @@\n-@RunWith(Parameterized.class)\n@@ -49,3 +45,2 @@\n-    @Parameters\n-    public static Collection data() {\n-        ArrayList array = new ArrayList();\n+    public static Stream<Arguments> data() {\n+        ArrayList<Arguments> array = new ArrayList<Arguments>();\n@@ -116,5 +111,1 @@\n-        return array;\n-    }\n-\n-    public MotionBlur_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        return array.stream();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/MotionBlur_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -31,2 +30,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -37,1 +37,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/PerspectiveTransformTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -39,5 +39,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-import test.com.sun.javafx.test.BBoxComparator;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -45,0 +41,1 @@\n+import test.com.sun.javafx.test.BBoxComparator;\n@@ -46,1 +43,0 @@\n-@RunWith(Parameterized.class)\n@@ -49,3 +45,2 @@\n-    @Parameters\n-    public static Collection data() {\n-        ArrayList array = new ArrayList();\n+    public static Stream<Arguments> data() {\n+        ArrayList<Arguments> array = new ArrayList<Arguments>();\n@@ -241,2 +236,0 @@\n-        return array;\n-    }\n@@ -244,2 +237,1 @@\n-    public PerspectiveTransform_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        return array.stream();\n@@ -254,1 +246,0 @@\n-\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/PerspectiveTransform_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -31,2 +30,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -41,1 +41,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/PointLightTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -32,4 +31,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -38,1 +34,0 @@\n-@RunWith(Parameterized.class)\n@@ -40,2 +35,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -44,1 +39,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -48,5 +43,1 @@\n-        });\n-    }\n-\n-    public PointLight_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/PointLight_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -33,2 +32,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -39,1 +39,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/ReflectionTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -39,5 +39,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-import test.com.sun.javafx.test.BBoxComparator;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -45,0 +41,1 @@\n+import test.com.sun.javafx.test.BBoxComparator;\n@@ -46,1 +43,0 @@\n-@RunWith(Parameterized.class)\n@@ -49,3 +45,2 @@\n-    @Parameters\n-    public static Collection data() {\n-        ArrayList array = new ArrayList();\n+    public static Stream<Arguments> data() {\n+        ArrayList<Arguments> array = new ArrayList<Arguments>();\n@@ -118,5 +113,1 @@\n-        return array;\n-    }\n-\n-    public Reflection_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        return array.stream();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/Reflection_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -34,2 +33,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -40,1 +40,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/SepiaToneTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -33,4 +32,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +35,0 @@\n-@RunWith(Parameterized.class)\n@@ -41,2 +36,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -45,1 +40,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -48,5 +43,1 @@\n-        });\n-    }\n-\n-    public SepiaTone_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/SepiaTone_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n@@ -34,2 +32,4 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n@@ -47,1 +47,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/ShadowTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -41,5 +41,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-import test.com.sun.javafx.test.BBoxComparator;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -47,0 +43,1 @@\n+import test.com.sun.javafx.test.BBoxComparator;\n@@ -48,1 +45,0 @@\n-@RunWith(Parameterized.class)\n@@ -51,3 +47,2 @@\n-    @Parameters\n-    public static Collection data() {\n-        ArrayList array = new ArrayList();\n+    public static Stream<Arguments> data() {\n+        ArrayList<Arguments> array = new ArrayList<Arguments>();\n@@ -176,5 +171,1 @@\n-        return array;\n-    }\n-\n-    public Shadow_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        return array.stream();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/Shadow_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -31,5 +30,0 @@\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-\n@@ -40,0 +34,4 @@\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n@@ -42,2 +40,0 @@\n-    @Rule\n-    public ExpectedException thrown = ExpectedException.none();\n@@ -46,1 +42,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/SpotLightTest.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -32,4 +31,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -38,1 +34,0 @@\n-@RunWith(Parameterized.class)\n@@ -40,2 +35,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -44,1 +39,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -49,5 +44,1 @@\n-        });\n-    }\n-\n-    public SpotLight_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/effect\/SpotLight_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,2 +37,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -47,1 +45,8 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -58,1 +63,1 @@\n-    @Before\n+    @BeforeEach\n@@ -516,1 +521,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -518,1 +523,3 @@\n-        new Image((String) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            new Image((String) null);\n+        });\n@@ -521,1 +528,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -523,1 +530,3 @@\n-        new Image(null, true);\n+        assertThrows(NullPointerException.class, () -> {\n+            new Image(null, true);\n+        });\n@@ -526,1 +535,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -528,1 +537,3 @@\n-        new Image((InputStream) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            new Image((InputStream) null);\n+        });\n@@ -531,1 +542,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -533,1 +544,3 @@\n-        new Image(\"\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new Image(\"\");\n+        });\n@@ -536,1 +549,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -538,1 +551,3 @@\n-        new Image(\"\", true);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new Image(\"\", true);\n+        });\n@@ -541,1 +556,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -543,1 +558,3 @@\n-        new Image(\":\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new Image(\":\");\n+        });\n@@ -546,1 +563,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -548,1 +565,3 @@\n-        new Image(\":\", true);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new Image(\":\", true);\n+        });\n@@ -551,1 +570,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -553,1 +572,3 @@\n-        new Image(\"unsupported:image.png\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new Image(\"unsupported:image.png\");\n+        });\n@@ -556,1 +577,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -558,1 +579,3 @@\n-        new Image(\"unsupported:image.png\", true);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new Image(\"unsupported:image.png\", true);\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/image\/ImageTest.java","additions":46,"deletions":23,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,3 +37,0 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -48,1 +45,7 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -53,1 +56,1 @@\n-    @Before\n+    @BeforeEach\n@@ -59,1 +62,1 @@\n-    @After\n+    @AfterEach\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/image\/ImageViewTest.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,7 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.BeforeClass;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -45,1 +39,3 @@\n-@RunWith(Parameterized.class)\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.provider.Arguments;\n+\n@@ -62,1 +58,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -75,2 +71,1 @@\n-    @Parameters\n-    public static Collection data() {\n+    public static Stream<Arguments> data() {\n@@ -79,1 +74,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -86,6 +81,2 @@\n-            config(TEST_IMAGE_VIEW, \"smooth\", smooth, \"-fx-smooth\", !smooth),\n-        });\n-    }\n-\n-    public ImageView_cssMethods_Test(final Configuration configuration) {\n-        super(configuration);\n+            config(TEST_IMAGE_VIEW, \"smooth\", smooth, \"-fx-smooth\", !smooth)\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/image\/ImageView_cssMethods_Test.java","additions":10,"deletions":19,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -40,6 +39,5 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import org.junit.jupiter.api.AfterEach;\n+\/\/ import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -47,1 +45,0 @@\n-@RunWith(Parameterized.class)\n@@ -50,3 +47,0 @@\n-    private final ImageViewConfig imageViewConfig;\n-    private final BoundingBox expectedBounds;\n-\n@@ -58,6 +52,5 @@\n-    @Parameters\n-    public static Collection data() {\n-        return Arrays.asList(new Object[][] {\n-            { config(TEST_IMAGE_100x200, 0, 0), box(0, 0, 100, 200) },\n-            { config(TEST_IMAGE_200x100, 20, 10), box(20, 10, 200, 100) },\n-            {\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( config(TEST_IMAGE_100x200, 0, 0), box(0, 0, 100, 200) ),\n+            Arguments.of( config(TEST_IMAGE_200x100, 20, 10), box(20, 10, 200, 100) ),\n+            Arguments.of(\n@@ -66,2 +59,2 @@\n-            },\n-            {\n+            ),\n+            Arguments.of(\n@@ -70,2 +63,2 @@\n-            },\n-            {\n+            ),\n+            Arguments.of(\n@@ -74,2 +67,2 @@\n-            },\n-            {\n+            ),\n+            Arguments.of(\n@@ -78,2 +71,2 @@\n-            },\n-            {\n+            ),\n+            Arguments.of(\n@@ -82,2 +75,2 @@\n-            },\n-            {\n+            ),\n+            Arguments.of(\n@@ -86,2 +79,2 @@\n-            },\n-            {\n+            ),\n+            Arguments.of(\n@@ -92,2 +85,2 @@\n-            },\n-            {\n+            ),\n+            Arguments.of(\n@@ -98,1 +91,1 @@\n-            },\n+            ),\n@@ -100,1 +93,1 @@\n-            {\n+            Arguments.of(\n@@ -105,2 +98,2 @@\n-            },\n-            {\n+            ),\n+            Arguments.of(\n@@ -111,8 +104,2 @@\n-            }\n-        });\n-    }\n-\n-    public ImageView_verifyBounds_Test(final ImageViewConfig imageViewConfig,\n-                                       final BoundingBox expectedBounds) {\n-        this.imageViewConfig = imageViewConfig;\n-        this.expectedBounds = expectedBounds;\n+            )\n+        );\n@@ -121,2 +108,4 @@\n-    @Before\n-    public void setUp() {\n+    \/\/ NOTE: This should be reverted once parametrized class tests are added to JUnit5\n+    \/\/       For now, tests call this manually\n+    \/\/ @BeforeEach\n+    public void setUp(ImageViewConfig imageViewConfig) {\n@@ -127,1 +116,1 @@\n-    @After\n+    @AfterEach\n@@ -132,2 +121,5 @@\n-    @Test\n-    public void verifyBounds() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void verifyBounds(ImageViewConfig imageViewConfig,\n+                             BoundingBox expectedBounds) {\n+        setUp(imageViewConfig);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/image\/ImageView_verifyBounds_Test.java","additions":42,"deletions":50,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -33,2 +32,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -37,6 +35,6 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -44,1 +42,0 @@\n-@RunWith(Parameterized.class)\n@@ -47,5 +44,0 @@\n-    private final ImageViewConfig imageViewConfig;\n-    private final float x;\n-    private final float y;\n-    private final boolean expectedContainsResult;\n-\n@@ -66,13 +58,12 @@\n-    @Parameters\n-    public static Collection data() {\n-        return Arrays.asList(new Object[][] {\n-            { config(null, 0, 0), 0, 0, false },\n-            { config(TEST_IMAGE_100x200, 0, 0), 25, 50, true },\n-            { config(TEST_IMAGE_100x200, 25, 50), 25 + 75, 50 + 50, false },\n-            { config(TEST_IMAGE_100x200, 25, 0), 25 + 25, 150, false },\n-            { config(TEST_IMAGE_100x200, 0, 50), 75, 50 + 150, true },\n-            { config(TEST_IMAGE_200x100, 0, 0), 250, 75, false },\n-            { config(TEST_IMAGE_200x100, 50, 25), 50 + 150, 25 + 125, false },\n-            { config(TEST_IMAGE_200x100, 50, 0), 0, 25, false },\n-            { config(TEST_IMAGE_200x100, 0, 25), 50, 0, false },\n-            {\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( config(null, 0, 0), 0, 0, false ),\n+            Arguments.of( config(TEST_IMAGE_100x200, 0, 0), 25, 50, true ),\n+            Arguments.of( config(TEST_IMAGE_100x200, 25, 50), 25 + 75, 50 + 50, false ),\n+            Arguments.of( config(TEST_IMAGE_100x200, 25, 0), 25 + 25, 150, false ),\n+            Arguments.of( config(TEST_IMAGE_100x200, 0, 50), 75, 50 + 150, true ),\n+            Arguments.of( config(TEST_IMAGE_200x100, 0, 0), 250, 75, false ),\n+            Arguments.of( config(TEST_IMAGE_200x100, 50, 25), 50 + 150, 25 + 125, false ),\n+            Arguments.of( config(TEST_IMAGE_200x100, 50, 0), 0, 25, false ),\n+            Arguments.of( config(TEST_IMAGE_200x100, 0, 25), 50, 0, false ),\n+            Arguments.of(\n@@ -81,2 +72,2 @@\n-            },\n-            {\n+            ),\n+            Arguments.of(\n@@ -85,2 +76,2 @@\n-            },\n-            {\n+            ),\n+            Arguments.of(\n@@ -89,2 +80,2 @@\n-            },\n-            {\n+            ),\n+            Arguments.of(\n@@ -93,2 +84,2 @@\n-            },\n-            {\n+            ),\n+            Arguments.of(\n@@ -97,2 +88,2 @@\n-            },\n-            {\n+            ),\n+            Arguments.of(\n@@ -103,2 +94,2 @@\n-            },\n-            {\n+            ),\n+            Arguments.of(\n@@ -109,2 +100,2 @@\n-            },\n-            {\n+            ),\n+            Arguments.of(\n@@ -115,2 +106,2 @@\n-            },\n-            {\n+            ),\n+            Arguments.of(\n@@ -121,2 +112,2 @@\n-            },\n-            {\n+            ),\n+            Arguments.of(\n@@ -127,1 +118,1 @@\n-            },\n+            )\n@@ -129,1 +120,1 @@\n-\/\/            {\n+\/\/            Arguments.of(\n@@ -134,2 +125,2 @@\n-\/\/            },\n-\/\/            {\n+\/\/            ),\n+\/\/            Arguments.of(\n@@ -140,12 +131,2 @@\n-\/\/            }\n-        });\n-    }\n-\n-    public ImageView_verifyContains_Test(final ImageViewConfig imageViewConfig,\n-                                         final float x,\n-                                         final float y,\n-                                         final boolean expectedContainsResult) {\n-        this.imageViewConfig = imageViewConfig;\n-        this.x = x;\n-        this.y = y;\n-        this.expectedContainsResult = expectedContainsResult;\n+\/\/            )\n+        );\n@@ -154,2 +135,4 @@\n-    @Before\n-    public void setUp() {\n+    \/\/ NOTE: This should be reverted once parametrized class tests are added to JUnit5\n+    \/\/       For now, tests call this manually\n+    \/\/ @BeforeEach\n+    public void setUp(ImageViewConfig imageViewConfig) {\n@@ -160,1 +143,1 @@\n-    @After\n+    @AfterEach\n@@ -165,2 +148,7 @@\n-    @Test\n-    public void verifyContains() {\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void verifyContains(ImageViewConfig imageViewConfig,\n+                               float x,\n+                               float y,\n+                               boolean expectedContainsResult) {\n+        setUp(imageViewConfig);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/image\/ImageView_verifyContains_Test.java","additions":56,"deletions":68,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,5 +37,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.fail;\n-\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -64,1 +63,1 @@\n-        try {\n+        assertThrows(IllegalArgumentException.class, () -> {\n@@ -66,3 +65,1 @@\n-            fail(\"Expected IllegalArgumentException\");\n-        } catch (IllegalArgumentException expected) {\n-        }\n+        });\n@@ -73,1 +70,1 @@\n-        try {\n+        assertThrows(IllegalArgumentException.class, () -> {\n@@ -75,3 +72,1 @@\n-            fail(\"Expected IllegalArgumentException\");\n-        } catch (IllegalArgumentException expected) {\n-        }\n+        });\n@@ -82,1 +77,1 @@\n-        try {\n+        assertThrows(IllegalArgumentException.class, () -> {\n@@ -84,3 +79,1 @@\n-            fail(\"Expected IllegalArgumentException\");\n-        } catch (IllegalArgumentException expected) {\n-        }\n+        });\n@@ -91,1 +84,1 @@\n-        try {\n+        assertThrows(IllegalArgumentException.class, () -> {\n@@ -93,3 +86,1 @@\n-            fail(\"Expected IllegalArgumentException\");\n-        } catch (IllegalArgumentException expected) {\n-        }\n+        });\n@@ -100,1 +91,1 @@\n-        try {\n+        assertThrows(IllegalArgumentException.class, () -> {\n@@ -102,3 +93,1 @@\n-            fail(\"Expected IllegalArgumentException\");\n-        } catch (IllegalArgumentException expected) {\n-        }\n+        });\n@@ -109,1 +98,1 @@\n-        try {\n+        assertThrows(NullPointerException.class, () -> {\n@@ -111,3 +100,1 @@\n-            fail(\"Expected NullPointerException\");\n-        } catch (NullPointerException expected) {\n-        }\n+        });\n@@ -118,1 +105,1 @@\n-        try {\n+        assertThrows(NullPointerException.class, () -> {\n@@ -120,3 +107,1 @@\n-            fail(\"Expected NullPointerException\");\n-        } catch (NullPointerException expected) {\n-        }\n+        });\n@@ -149,1 +134,1 @@\n-        try {\n+        assertThrows(NullPointerException.class, () -> {\n@@ -152,3 +137,1 @@\n-            fail(\"Expected NullPointerException\");\n-        } catch (NullPointerException expected) {\n-        }\n+        });\n@@ -168,1 +151,1 @@\n-        try {\n+        assertThrows(IllegalArgumentException.class, () -> {\n@@ -170,3 +153,1 @@\n-            fail(\"Expected IllegalArgumentException\");\n-        } catch (IllegalArgumentException expected) {\n-        }\n+        });\n@@ -177,1 +158,1 @@\n-        try {\n+        assertThrows(IllegalArgumentException.class, () -> {\n@@ -179,3 +160,1 @@\n-            fail(\"Expected IllegalArgumentException\");\n-        } catch (IllegalArgumentException expected) {\n-        }\n+        });\n@@ -186,1 +165,1 @@\n-        try {\n+        assertThrows(IllegalArgumentException.class, () -> {\n@@ -188,3 +167,1 @@\n-            fail(\"Expected IllegalArgumentException\");\n-        } catch (IllegalArgumentException expected) {\n-        }\n+        });\n@@ -195,1 +172,1 @@\n-        try {\n+        assertThrows(IllegalArgumentException.class, () -> {\n@@ -197,3 +174,1 @@\n-            fail(\"Expected IllegalArgumentException\");\n-        } catch (IllegalArgumentException expected) {\n-        }\n+        });\n@@ -204,1 +179,1 @@\n-        try {\n+        assertThrows(IllegalArgumentException.class, () -> {\n@@ -206,3 +181,1 @@\n-            fail(\"Expected IllegalArgumentException\");\n-        } catch (IllegalArgumentException expected) {\n-        }\n+        });\n@@ -213,1 +186,1 @@\n-        try {\n+        assertThrows(IllegalArgumentException.class, () -> {\n@@ -215,3 +188,1 @@\n-            fail(\"Expected IllegalArgumentException\");\n-        } catch (IllegalArgumentException expected) {\n-        }\n+        });\n@@ -223,1 +194,1 @@\n-        try {\n+        assertThrows(IllegalArgumentException.class, () -> {\n@@ -225,3 +196,1 @@\n-            fail(\"Expected IllegalArgumentException\");\n-        } catch (IllegalArgumentException expected) {\n-        }\n+        });\n@@ -233,1 +202,1 @@\n-        try {\n+        assertThrows(IllegalArgumentException.class, () -> {\n@@ -235,3 +204,1 @@\n-            fail(\"Expected IllegalArgumentException\");\n-        } catch (IllegalArgumentException expected) {\n-        }\n+        });\n@@ -251,1 +218,1 @@\n-        try {\n+        assertThrows(UnsupportedOperationException.class, () -> {\n@@ -253,3 +220,1 @@\n-            fail(\"Expected UnsupportedOperationException\");\n-        } catch (UnsupportedOperationException expected) {\n-        }\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/image\/PixelBufferTest.java","additions":39,"deletions":74,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n-import static junit.framework.Assert.assertEquals;\n-import static junit.framework.Assert.assertTrue;\n-\n@@ -36,1 +33,4 @@\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -58,4 +58,4 @@\n-        assertEquals(\"alpha\", (argb1 >> 24) & 0xff, (argb2 >> 24) & 0xff);\n-        assertEquals(\"red\",   (argb1 >> 16) & 0xff, (argb2 >> 16) & 0xff, delta);\n-        assertEquals(\"green\", (argb1 >>  8) & 0xff, (argb2 >>  8) & 0xff, delta);\n-        assertEquals(\"blue\",  (argb1      ) & 0xff, (argb2      ) & 0xff, delta);\n+        assertEquals((argb1 >> 24) & 0xff, (argb2 >> 24) & 0xff, \"alpha\");\n+        assertEquals((argb1 >> 16) & 0xff, (argb2 >> 16) & 0xff, delta, \"red\");\n+        assertEquals((argb1 >>  8) & 0xff, (argb2 >>  8) & 0xff, delta, \"green\");\n+        assertEquals((argb1      ) & 0xff, (argb2      ) & 0xff, delta, \"blue\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/image\/PixelFormatTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,2 +37,8 @@\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -227,1 +233,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -229,6 +235,8 @@\n-        ClipboardContent cc = new ClipboardContent();\n-        cc.putFilesByPath(new ArrayList<String>(0));\n-        cc.putFilesByPath(null);\n-\n-        assertFalse(cc.hasFiles());\n-        assertNull(cc.getFiles());\n+        assertThrows(NullPointerException.class, () -> {\n+            ClipboardContent cc = new ClipboardContent();\n+            cc.putFilesByPath(new ArrayList<String>(0));\n+            cc.putFilesByPath(null);\n+\n+            assertFalse(cc.hasFiles());\n+            assertNull(cc.getFiles());\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/ClipboardContentTest.java","additions":18,"deletions":10,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,5 +32,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n@@ -44,2 +39,6 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -49,1 +48,2 @@\n-    @Test public void testShortConstructor() {\n+    @Test\n+    public void testShortConstructor() {\n@@ -79,1 +79,2 @@\n-    @Test public void testShortConstructorWithoutPickResult() {\n+    @Test\n+    public void testShortConstructorWithoutPickResult() {\n@@ -99,1 +100,2 @@\n-    @Test public void testLongConstructor() {\n+    @Test\n+    public void testLongConstructor() {\n@@ -132,1 +134,2 @@\n-    @Test public void testLongConstructorWithoutPickResult() {\n+    @Test\n+    public void testLongConstructorWithoutPickResult() {\n@@ -155,1 +158,2 @@\n-    @Test public void mouseTriggerKeepsCoordinates() {\n+    @Test\n+    public void mouseTriggerKeepsCoordinates() {\n@@ -167,6 +171,6 @@\n-            Assert.assertEquals(1.0, event.getX(), 0.0001);\n-            Assert.assertEquals(101, event.getSceneX(), 0.0001);\n-            Assert.assertEquals(201, event.getScreenX(), 0.0001);\n-            Assert.assertEquals(2.0, event.getY(), 0.0001);\n-            Assert.assertEquals(102, event.getSceneY(), 0.0001);\n-            Assert.assertEquals(202, event.getScreenY(), 0.0001);\n+            assertEquals(1.0, event.getX(), 0.0001);\n+            assertEquals(101, event.getSceneX(), 0.0001);\n+            assertEquals(201, event.getScreenX(), 0.0001);\n+            assertEquals(2.0, event.getY(), 0.0001);\n+            assertEquals(102, event.getSceneY(), 0.0001);\n+            assertEquals(202, event.getScreenY(), 0.0001);\n@@ -180,1 +184,2 @@\n-    @Test public void keyTriggerSetsCoordinatesToFocusOwner() {\n+    @Test\n+    public void keyTriggerSetsCoordinatesToFocusOwner() {\n@@ -192,6 +197,6 @@\n-            Assert.assertEquals(25.0, event.getX(), 0.0001);\n-            Assert.assertEquals(125, event.getSceneX(), 0.0001);\n-            Assert.assertEquals(225, event.getScreenX(), 0.0001);\n-            Assert.assertEquals(50.0, event.getY(), 0.0001);\n-            Assert.assertEquals(150, event.getSceneY(), 0.0001);\n-            Assert.assertEquals(250, event.getScreenY(), 0.0001);\n+            assertEquals(25.0, event.getX(), 0.0001);\n+            assertEquals(125, event.getSceneX(), 0.0001);\n+            assertEquals(225, event.getScreenX(), 0.0001);\n+            assertEquals(50.0, event.getY(), 0.0001);\n+            assertEquals(150, event.getSceneY(), 0.0001);\n+            assertEquals(250, event.getScreenY(), 0.0001);\n@@ -219,7 +224,7 @@\n-            Assert.assertEquals(1.0, event.getX(), 0.0001);\n-            Assert.assertEquals(101, event.getSceneX(), 0.0001);\n-            Assert.assertEquals(201, event.getScreenX(), 0.0001);\n-            Assert.assertEquals(2.0, event.getY(), 0.0001);\n-            Assert.assertEquals(102, event.getSceneY(), 0.0001);\n-            Assert.assertEquals(202, event.getScreenY(), 0.0001);\n-            Assert.assertEquals(0, event.getZ(), 0.0001);\n+            assertEquals(1.0, event.getX(), 0.0001);\n+            assertEquals(101, event.getSceneX(), 0.0001);\n+            assertEquals(201, event.getScreenX(), 0.0001);\n+            assertEquals(2.0, event.getY(), 0.0001);\n+            assertEquals(102, event.getSceneY(), 0.0001);\n+            assertEquals(202, event.getScreenY(), 0.0001);\n+            assertEquals(0, event.getZ(), 0.0001);\n@@ -230,7 +235,7 @@\n-            Assert.assertEquals(101.0, event.getX(), 0.0001);\n-            Assert.assertEquals(101, event.getSceneX(), 0.0001);\n-            Assert.assertEquals(201, event.getScreenX(), 0.0001);\n-            Assert.assertEquals(102.0, event.getY(), 0.0001);\n-            Assert.assertEquals(102, event.getSceneY(), 0.0001);\n-            Assert.assertEquals(202, event.getScreenY(), 0.0001);\n-            Assert.assertEquals(50, event.getZ(), 0.0001);\n+            assertEquals(101.0, event.getX(), 0.0001);\n+            assertEquals(101, event.getSceneX(), 0.0001);\n+            assertEquals(201, event.getScreenX(), 0.0001);\n+            assertEquals(102.0, event.getY(), 0.0001);\n+            assertEquals(102, event.getSceneY(), 0.0001);\n+            assertEquals(202, event.getScreenY(), 0.0001);\n+            assertEquals(50, event.getZ(), 0.0001);\n@@ -244,1 +249,2 @@\n-    @Test public void pickResultIsFromEventCoordinates() {\n+    @Test\n+    public void pickResultIsFromEventCoordinates() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/ContextMenuEventTest.java","additions":47,"deletions":41,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,1 @@\n-import java.util.Collection;\n-import org.junit.runners.Parameterized.Parameters;\n-import org.junit.runners.Parameterized;\n-import java.util.Arrays;\n+import java.util.stream.Stream;\n@@ -33,3 +30,0 @@\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import static org.junit.Assert.*;\n@@ -37,1 +31,10 @@\n-@RunWith(Parameterized.class)\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n@@ -43,12 +46,0 @@\n-    @Parameters\n-    public static Collection getParams() {\n-        return Arrays.asList(new Object[][] {\n-            { DataFormat.PLAIN_TEXT, \"text\/plain\", null },\n-            { DataFormat.HTML, \"text\/html\", null },\n-            { DataFormat.RTF, \"text\/rtf\", null },\n-            { DataFormat.URL, \"text\/uri-list\", null },\n-            { DataFormat.IMAGE, \"application\/x-java-rawimage\", null },\n-            { DataFormat.FILES, \"application\/x-java-file-list\",  \"java.file-list\" },\n-            { customFormat, \"Custom1\", \"Custom2\" }\n-        });\n-    }\n@@ -56,8 +47,10 @@\n-    private DataFormat format;\n-    private String mime1;\n-    private String mime2;\n-\n-    public DataFormatTest(DataFormat format, String mime1, String mime2) {\n-        this.format = format;\n-        this.mime1 = mime1;\n-        this.mime2 = mime2;\n+    public static Stream<Arguments> getParams() {\n+        return Stream.of(\n+            Arguments.of( DataFormat.PLAIN_TEXT, \"text\/plain\", null ),\n+            Arguments.of( DataFormat.HTML, \"text\/html\", null ),\n+            Arguments.of( DataFormat.RTF, \"text\/rtf\", null ),\n+            Arguments.of( DataFormat.URL, \"text\/uri-list\", null ),\n+            Arguments.of( DataFormat.IMAGE, \"application\/x-java-rawimage\", null ),\n+            Arguments.of( DataFormat.FILES, \"application\/x-java-file-list\",  \"java.file-list\" ),\n+            Arguments.of( customFormat, \"Custom1\", \"Custom2\" )\n+        );\n@@ -66,2 +59,3 @@\n-    @Test\n-    public void testMimeTypes() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testMimeTypes(DataFormat format, String mime1, String mime2) {\n@@ -75,2 +69,3 @@\n-    @Test\n-    public void dataFormatsShouldBeFound() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void dataFormatsShouldBeFound(DataFormat format, String mime1, String mime2) {\n@@ -83,2 +78,3 @@\n-    @Test\n-    public void testToString() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testToString(DataFormat format, String mime1, String mime2) {\n@@ -89,4 +85,7 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void shouldNotBePossibleToReuseMimeTypes() {\n-        DataFormat customEqual = new DataFormat(format.getIdentifiers().toArray(\n-                new String[format.getIdentifiers().size()]));\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void shouldNotBePossibleToReuseMimeTypes(DataFormat format, String mime1, String mime2) {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            DataFormat customEqual = new DataFormat(format.getIdentifiers().toArray(\n+                    new String[format.getIdentifiers().size()]));\n+        });\n@@ -96,2 +95,3 @@\n-    @Test\n-    public void testEqualsAndHashCode() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testEqualsAndHashCode(DataFormat format, String mime1, String mime2) {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/DataFormatTest.java","additions":41,"deletions":41,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.fail;\n@@ -48,5 +46,0 @@\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n@@ -72,5 +65,11 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -85,1 +84,1 @@\n-    @Before\n+    @BeforeEach\n@@ -93,1 +92,1 @@\n-    @After\n+    @AfterEach\n@@ -938,2 +937,2 @@\n-            Assert.assertEquals(TransferMode.MOVE, event.getTransferMode());\n-            Assert.assertEquals(TransferMode.MOVE, event.getAcceptedTransferMode());\n+            assertEquals(TransferMode.MOVE, event.getTransferMode());\n+            assertEquals(TransferMode.MOVE, event.getAcceptedTransferMode());\n@@ -1452,3 +1451,3 @@\n-            Assert.assertEquals(52, event.getX(), 0.00001);\n-            Assert.assertEquals(52, event.getY(), 0.00001);\n-            Assert.assertEquals(0, event.getZ(), 0.00001);\n+            assertEquals(52, event.getX(), 0.00001);\n+            assertEquals(52, event.getY(), 0.00001);\n+            assertEquals(0, event.getZ(), 0.00001);\n@@ -1459,3 +1458,3 @@\n-            Assert.assertEquals(52, event.getX(), 0.00001);\n-            Assert.assertEquals(52, event.getY(), 0.00001);\n-            Assert.assertEquals(50, event.getZ(), 0.00001);\n+            assertEquals(52, event.getX(), 0.00001);\n+            assertEquals(52, event.getY(), 0.00001);\n+            assertEquals(50, event.getZ(), 0.00001);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/DragAndDropTest.java","additions":22,"deletions":23,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,6 +34,7 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -43,1 +44,2 @@\n-    @Test public void testShortConstructor() {\n+    @Test\n+    public void testShortConstructor() {\n@@ -84,1 +86,2 @@\n-    @Test public void testShortConstructorWithoutPickResult() {\n+    @Test\n+    public void testShortConstructorWithoutPickResult() {\n@@ -105,1 +108,2 @@\n-    @Test public void testLongConstructor() {\n+    @Test\n+    public void testLongConstructor() {\n@@ -150,1 +154,2 @@\n-    @Test public void testLongConstructorWithoutPickResult() {\n+    @Test\n+    public void testLongConstructorWithoutPickResult() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/GestureEventTest.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,3 +31,4 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertSame;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n@@ -37,1 +38,2 @@\n-    @Test public void testShortConstructor() {\n+    @Test\n+    public void testShortConstructor() {\n@@ -50,1 +52,2 @@\n-    @Test public void testLongConstructor() {\n+    @Test\n+    public void testLongConstructor() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/InputEventTest.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertSame;\n@@ -37,2 +33,5 @@\n-import org.junit.Test;\n-\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/InputMethodEventTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,4 +30,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertSame;\n@@ -35,1 +31,5 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/InputMethodTextRunTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,3 +30,0 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertSame;\n@@ -34,1 +31,4 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/KeyCodeTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,3 +33,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n@@ -43,4 +40,0 @@\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n@@ -56,0 +49,8 @@\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n@@ -88,1 +89,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -121,1 +122,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -367,1 +368,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -369,5 +370,7 @@\n-        new KeyCodeCombination(null, ModifierValue.UP,\n-                                     ModifierValue.UP,\n-                                     ModifierValue.UP,\n-                                     ModifierValue.UP,\n-                                     ModifierValue.UP);\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyCodeCombination(null, ModifierValue.UP,\n+                                         ModifierValue.UP,\n+                                         ModifierValue.UP,\n+                                         ModifierValue.UP,\n+                                         ModifierValue.UP);\n+        });\n@@ -376,1 +379,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -378,5 +381,7 @@\n-        new KeyCharacterCombination(null, ModifierValue.UP,\n-                                          ModifierValue.UP,\n-                                          ModifierValue.UP,\n-                                          ModifierValue.UP,\n-                                          ModifierValue.UP);\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyCharacterCombination(null, ModifierValue.UP,\n+                                              ModifierValue.UP,\n+                                              ModifierValue.UP,\n+                                              ModifierValue.UP,\n+                                              ModifierValue.UP);\n+        });\n@@ -385,1 +390,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -387,11 +392,3 @@\n-        new KeyCodeCombination(KeyCode.Q, ModifierValue.UP,\n-                                          null,\n-                                          ModifierValue.UP,\n-                                          ModifierValue.UP,\n-                                          ModifierValue.UP);\n-    }\n-\n-    @Test(expected=IllegalArgumentException.class)\n-    public void constructor1ShouldThrowIAEForModifierKeyCode() {\n-        new KeyCodeCombination(KeyCode.SHIFT, ModifierValue.UP,\n-                                              ModifierValue.UP,\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyCodeCombination(KeyCode.Q, ModifierValue.UP,\n+                                              null,\n@@ -401,0 +398,1 @@\n+        });\n@@ -403,3 +401,4 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void constructor1ShouldThrowIAEForUndefinedKeyCode() {\n-        new KeyCodeCombination(KeyCode.UNDEFINED, ModifierValue.UP,\n+    @Test\n+    public void constructor1ShouldThrowIAEForModifierKeyCode() {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new KeyCodeCombination(KeyCode.SHIFT, ModifierValue.UP,\n@@ -410,0 +409,1 @@\n+        });\n@@ -412,1 +412,12 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n+    public void constructor1ShouldThrowIAEForUndefinedKeyCode() {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new KeyCodeCombination(KeyCode.UNDEFINED, ModifierValue.UP,\n+                                                      ModifierValue.UP,\n+                                                      ModifierValue.UP,\n+                                                      ModifierValue.UP,\n+                                                      ModifierValue.UP);\n+        });\n+    }\n+\n+    @Test\n@@ -414,1 +425,3 @@\n-        new KeyCodeCombination(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyCodeCombination(null);\n+        });\n@@ -417,1 +430,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -419,1 +432,3 @@\n-        new KeyCharacterCombination(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyCharacterCombination(null);\n+        });\n@@ -422,1 +437,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -424,1 +439,3 @@\n-        new KeyCharacterCombination(\"q\", ALT_DOWN, null, SHIFT_ANY);\n+        assertThrows(NullPointerException.class, () -> {\n+            new KeyCharacterCombination(\"q\", ALT_DOWN, null, SHIFT_ANY);\n+        });\n@@ -427,1 +444,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -429,1 +446,3 @@\n-        new KeyCodeCombination(KeyCode.CONTROL);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new KeyCodeCombination(KeyCode.CONTROL);\n+        });\n@@ -432,1 +451,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -434,1 +453,3 @@\n-        new KeyCodeCombination(KeyCode.UNDEFINED);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new KeyCodeCombination(KeyCode.UNDEFINED);\n+        });\n@@ -437,1 +458,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -439,4 +460,6 @@\n-        new KeyCodeCombination(KeyCode.Q,\n-                               ALT_DOWN,\n-                               CONTROL_DOWN,\n-                               ALT_DOWN);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new KeyCodeCombination(KeyCode.Q,\n+                                   ALT_DOWN,\n+                                   CONTROL_DOWN,\n+                                   ALT_DOWN);\n+        });\n@@ -445,1 +468,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -447,4 +470,6 @@\n-        new KeyCodeCombination(KeyCode.Q,\n-                               SHIFT_DOWN,\n-                               CONTROL_ANY,\n-                               SHIFT_ANY);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new KeyCodeCombination(KeyCode.Q,\n+                                   SHIFT_DOWN,\n+                                   CONTROL_ANY,\n+                                   SHIFT_ANY);\n+        });\n@@ -453,1 +478,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -455,1 +480,3 @@\n-        KeyCombination.keyCombination(\"Ctrl + Shift + Ctrl + Q\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            KeyCombination.keyCombination(\"Ctrl + Shift + Ctrl + Q\");\n+        });\n@@ -458,1 +485,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -460,1 +487,3 @@\n-        KeyCombination.keyCombination(\"Ctrl + Ignore Shift + Alt + Shift + Q\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            KeyCombination.keyCombination(\"Ctrl + Ignore Shift + Alt + Shift + Q\");\n+        });\n@@ -463,1 +492,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -465,1 +494,3 @@\n-        KeyCombination.keyCombination(\"Ctrl + Shift\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            KeyCombination.keyCombination(\"Ctrl + Shift\");\n+        });\n@@ -468,1 +499,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -470,1 +501,3 @@\n-        KeyCombination.keyCombination(\"Ctrl + Shift + Undefined\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            KeyCombination.keyCombination(\"Ctrl + Shift + Undefined\");\n+        });\n@@ -473,1 +506,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -475,1 +508,3 @@\n-        KeyCombination.keyCombination(\"Ctrl + Shift + Q + 'W'\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            KeyCombination.keyCombination(\"Ctrl + Shift + Q + 'W'\");\n+        });\n@@ -478,1 +513,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -480,1 +515,3 @@\n-        KeyCombination.keyCombination(\"Ctrl + Shift + 'W' + Q\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            KeyCombination.keyCombination(\"Ctrl + Shift + 'W' + Q\");\n+        });\n@@ -483,1 +520,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -485,1 +522,3 @@\n-        KeyCombination.keyCombination(\"  +  Ctrl + Q\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            KeyCombination.keyCombination(\"  +  Ctrl + Q\");\n+        });\n@@ -488,1 +527,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -490,1 +529,3 @@\n-        KeyCombination.keyCombination(\"Ctrl ++ Q\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            KeyCombination.keyCombination(\"Ctrl ++ Q\");\n+        });\n@@ -493,1 +534,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -495,1 +536,3 @@\n-        KeyCombination.keyCombination(\"Ctrl + Q +\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            KeyCombination.keyCombination(\"Ctrl + Q +\");\n+        });\n@@ -498,1 +541,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -500,1 +543,3 @@\n-        KeyCombination.keyCombination(\"Quote '\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            KeyCombination.keyCombination(\"Quote '\");\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/KeyCombinationTest.java","additions":122,"deletions":77,"binary":false,"changes":199,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -44,4 +43,0 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n@@ -50,113 +45,3 @@\n-@RunWith(Parameterized.class)\n-public final class KeyCombination_objectMethods_Test\n-        extends ObjectMethodsTestBase {\n-    @Parameters\n-    public static Collection data() {\n-        return Arrays.asList(new Object[] {\n-                equalObjects(\n-                        new KeyCodeCombination(KeyCode.R,\n-                                               ModifierValue.ANY,\n-                                               ModifierValue.DOWN,\n-                                               ModifierValue.UP,\n-                                               ModifierValue.UP,\n-                                               ModifierValue.ANY),\n-                        new KeyCodeCombination(KeyCode.R,\n-                                               CONTROL_DOWN,\n-                                               SHIFT_ANY,\n-                                               SHORTCUT_ANY),\n-                        KeyCombination.keyCombination(\n-                                \"Ignore Shortcut + Ctrl + Ignore Shift + R\")),\n-                equalObjects(\n-                        new KeyCodeCombination(KeyCode.C,\n-                                               ModifierValue.UP,\n-                                               ModifierValue.UP,\n-                                               ModifierValue.UP,\n-                                               ModifierValue.UP,\n-                                               ModifierValue.DOWN),\n-                        new KeyCodeCombination(KeyCode.C,\n-                                               SHORTCUT_DOWN),\n-                        KeyCombination.keyCombination(\"Shortcut + C\")),\n-                equalObjects(\n-                        new KeyCharacterCombination(\"x\",\n-                                                    ModifierValue.UP,\n-                                                    ModifierValue.UP,\n-                                                    ModifierValue.ANY,\n-                                                    ModifierValue.DOWN,\n-                                                    ModifierValue.UP),\n-                        new KeyCharacterCombination(\n-                                \"x\",\n-                                ALT_ANY,\n-                                META_DOWN),\n-                        KeyCombination.keyCombination(\n-                                \"Ignore Alt + Meta + 'x'\")),\n-                differentObjects(\n-                        new KeyCodeCombination(KeyCode.R,\n-                                               ModifierValue.ANY,\n-                                               ModifierValue.DOWN,\n-                                               ModifierValue.UP,\n-                                               ModifierValue.UP,\n-                                               ModifierValue.UP),\n-                        new KeyCodeCombination(KeyCode.A,\n-                                               CONTROL_DOWN,\n-                                               SHIFT_ANY),\n-                        new KeyCodeCombination(KeyCode.R,\n-                                               CONTROL_DOWN,\n-                                               SHIFT_ANY,\n-                                               ALT_ANY),\n-                        KeyCombination.keyCombination(\n-                                \"Ctrl + Shift + R\"),\n-                        KeyCombination.keyCombination(\n-                                \"Ignore Shift + R\"),\n-                        KeyCombination.keyCombination(\n-                                \"Ctrl + Ignore Shift + K\")),\n-                differentObjects(\n-                        new KeyCharacterCombination(\"x\",\n-                                                    ModifierValue.UP,\n-                                                    ModifierValue.UP,\n-                                                    ModifierValue.ANY,\n-                                                    ModifierValue.DOWN,\n-                                                    ModifierValue.UP),\n-                        new KeyCharacterCombination(\"X\",\n-                                                    ModifierValue.UP,\n-                                                    ModifierValue.UP,\n-                                                    ModifierValue.ANY,\n-                                                    ModifierValue.DOWN,\n-                                                    ModifierValue.UP),\n-                        new KeyCharacterCombination(\n-                                \"y\",\n-                                ALT_ANY,\n-                                META_DOWN),\n-                        new KeyCharacterCombination(\n-                                \"x\",\n-                                ALT_ANY,\n-                                META_DOWN,\n-                                SHORTCUT_DOWN),\n-                        new KeyCharacterCombination(\n-                                \"x\",\n-                                ALT_ANY),\n-                        KeyCombination.keyCombination(\n-                                \"Alt + Meta + 'x'\"),\n-                        KeyCombination.keyCombination(\n-                                \"Ignore Alt + Meta + Ctrl + 'x'\"),\n-                        KeyCombination.keyCombination(\n-                                \"Ignore Alt + Meta + 'z'\")),\n-                differentObjectsMediumHashcode(\n-                        new KeyCodeCombination(KeyCode.Q,\n-                                               ModifierValue.UP,\n-                                               ModifierValue.UP,\n-                                               ModifierValue.ANY,\n-                                               ModifierValue.DOWN,\n-                                               ModifierValue.UP),\n-                        new KeyCharacterCombination(\"Q\",\n-                                                    ModifierValue.UP,\n-                                                    ModifierValue.UP,\n-                                                    ModifierValue.ANY,\n-                                                    ModifierValue.DOWN,\n-                                                    ModifierValue.UP),\n-                        KeyCombination.keyCombination(\"Ctrl + Alt + 'X'\"),\n-                        KeyCombination.keyCombination(\"Ctrl + Alt + X\"),\n-                        new KeyCombination() {\n-                        },\n-                        new Object())\n-            });\n-    }\n+import org.junit.jupiter.params.provider.Arguments;\n+\n+public final class KeyCombination_objectMethods_Test extends ObjectMethodsTestBase {\n@@ -164,3 +49,108 @@\n-    public KeyCombination_objectMethods_Test(\n-            final Configuration configuration) {\n-        super(configuration);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            equalObjects(\n+                new KeyCodeCombination(KeyCode.R,\n+                                       ModifierValue.ANY,\n+                                       ModifierValue.DOWN,\n+                                       ModifierValue.UP,\n+                                       ModifierValue.UP,\n+                                       ModifierValue.ANY),\n+                new KeyCodeCombination(KeyCode.R,\n+                                       CONTROL_DOWN,\n+                                       SHIFT_ANY,\n+                                       SHORTCUT_ANY),\n+                KeyCombination.keyCombination(\n+                        \"Ignore Shortcut + Ctrl + Ignore Shift + R\")),\n+            equalObjects(\n+                new KeyCodeCombination(KeyCode.C,\n+                                       ModifierValue.UP,\n+                                       ModifierValue.UP,\n+                                       ModifierValue.UP,\n+                                       ModifierValue.UP,\n+                                       ModifierValue.DOWN),\n+                new KeyCodeCombination(KeyCode.C,\n+                                       SHORTCUT_DOWN),\n+                KeyCombination.keyCombination(\"Shortcut + C\")),\n+            equalObjects(\n+                new KeyCharacterCombination(\"x\",\n+                                            ModifierValue.UP,\n+                                            ModifierValue.UP,\n+                                            ModifierValue.ANY,\n+                                            ModifierValue.DOWN,\n+                                            ModifierValue.UP),\n+                new KeyCharacterCombination(\n+                        \"x\",\n+                        ALT_ANY,\n+                        META_DOWN),\n+                KeyCombination.keyCombination(\n+                        \"Ignore Alt + Meta + 'x'\")),\n+            differentObjects(\n+                new KeyCodeCombination(KeyCode.R,\n+                                        ModifierValue.ANY,\n+                                        ModifierValue.DOWN,\n+                                        ModifierValue.UP,\n+                                        ModifierValue.UP,\n+                                        ModifierValue.UP),\n+                new KeyCodeCombination(KeyCode.A,\n+                                        CONTROL_DOWN,\n+                                        SHIFT_ANY),\n+                new KeyCodeCombination(KeyCode.R,\n+                                        CONTROL_DOWN,\n+                                        SHIFT_ANY,\n+                                        ALT_ANY),\n+                KeyCombination.keyCombination(\n+                        \"Ctrl + Shift + R\"),\n+                KeyCombination.keyCombination(\n+                        \"Ignore Shift + R\"),\n+                KeyCombination.keyCombination(\n+                        \"Ctrl + Ignore Shift + K\")),\n+            differentObjects(\n+                new KeyCharacterCombination(\"x\",\n+                                            ModifierValue.UP,\n+                                            ModifierValue.UP,\n+                                            ModifierValue.ANY,\n+                                            ModifierValue.DOWN,\n+                                            ModifierValue.UP),\n+                new KeyCharacterCombination(\"X\",\n+                                            ModifierValue.UP,\n+                                            ModifierValue.UP,\n+                                            ModifierValue.ANY,\n+                                            ModifierValue.DOWN,\n+                                            ModifierValue.UP),\n+                new KeyCharacterCombination(\n+                        \"y\",\n+                        ALT_ANY,\n+                        META_DOWN),\n+                new KeyCharacterCombination(\n+                        \"x\",\n+                        ALT_ANY,\n+                        META_DOWN,\n+                        SHORTCUT_DOWN),\n+                new KeyCharacterCombination(\n+                        \"x\",\n+                        ALT_ANY),\n+                KeyCombination.keyCombination(\n+                        \"Alt + Meta + 'x'\"),\n+                KeyCombination.keyCombination(\n+                        \"Ignore Alt + Meta + Ctrl + 'x'\"),\n+                KeyCombination.keyCombination(\n+                        \"Ignore Alt + Meta + 'z'\")),\n+            differentObjectsMediumHashcode(\n+                new KeyCodeCombination(KeyCode.Q,\n+                                        ModifierValue.UP,\n+                                        ModifierValue.UP,\n+                                        ModifierValue.ANY,\n+                                        ModifierValue.DOWN,\n+                                        ModifierValue.UP),\n+                new KeyCharacterCombination(\"Q\",\n+                                            ModifierValue.UP,\n+                                            ModifierValue.UP,\n+                                            ModifierValue.ANY,\n+                                            ModifierValue.DOWN,\n+                                            ModifierValue.UP),\n+                KeyCombination.keyCombination(\"Ctrl + Alt + 'X'\"),\n+                KeyCombination.keyCombination(\"Ctrl + Alt + X\"),\n+                new KeyCombination() {\n+                },\n+                new Object())\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/KeyCombination_objectMethods_Test.java","additions":113,"deletions":123,"binary":false,"changes":236,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,5 +29,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n@@ -39,1 +34,6 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/KeyEventTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,6 @@\n-import static org.junit.Assert.*;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/MouseDragEventTest.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,5 +36,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n@@ -42,1 +37,6 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -53,1 +53,2 @@\n-    @Test public void testShortConstructor() {\n+    @Test\n+    public void testShortConstructor() {\n@@ -114,1 +115,2 @@\n-    @Test public void testToStringMatchingBrackets() {\n+    @Test\n+    public void testToStringMatchingBrackets() {\n@@ -145,1 +147,1 @@\n-                    assertTrue(\"Too many closing brackets: \" + str, bracketCount >= 0);\n+                    assertTrue(bracketCount >= 0, \"Too many closing brackets: \" + str);\n@@ -149,1 +151,1 @@\n-        assertEquals(\"Too few closing brackets: \" + str, 0, bracketCount);\n+        assertEquals(0, bracketCount, \"Too few closing brackets: \" + str);\n@@ -152,1 +154,2 @@\n-    @Test public void testShortConstructorWithoutPickResult() {\n+    @Test\n+    public void testShortConstructorWithoutPickResult() {\n@@ -174,1 +177,2 @@\n-    @Test public void testLongConstructor() {\n+    @Test\n+    public void testLongConstructor() {\n@@ -239,1 +243,2 @@\n-    @Test public void testLongConstructorWithoutPickResult() {\n+    @Test\n+    public void testLongConstructorWithoutPickResult() {\n@@ -263,1 +268,2 @@\n-    @Test public void testFullConstructorWithoutPickResult() {\n+    @Test\n+    public void testFullConstructorWithoutPickResult() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/MouseEventTest.java","additions":21,"deletions":15,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,3 +41,7 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -221,2 +225,2 @@\n-            Assert.assertEquals(90, event.getAngle(), 0.0001);\n-            Assert.assertEquals(-180, event.getTotalAngle(), 0.0001);\n+            assertEquals(90, event.getAngle(), 0.0001);\n+            assertEquals(-180, event.getTotalAngle(), 0.0001);\n@@ -424,3 +428,3 @@\n-            Assert.assertEquals(150, event.getX(), 0.00001);\n-            Assert.assertEquals(150, event.getY(), 0.00001);\n-            Assert.assertEquals(0, event.getZ(), 0.00001);\n+            assertEquals(150, event.getX(), 0.00001);\n+            assertEquals(150, event.getY(), 0.00001);\n+            assertEquals(0, event.getZ(), 0.00001);\n@@ -431,3 +435,3 @@\n-            Assert.assertEquals(150, event.getX(), 0.00001);\n-            Assert.assertEquals(150, event.getY(), 0.00001);\n-            Assert.assertEquals(50, event.getZ(), 0.00001);\n+            assertEquals(150, event.getX(), 0.00001);\n+            assertEquals(150, event.getY(), 0.00001);\n+            assertEquals(50, event.getZ(), 0.00001);\n@@ -521,2 +525,2 @@\n-            Assert.assertEquals(250.0, event.getSceneX(), 0.0001);\n-            Assert.assertEquals(250.0, event.getSceneY(), 0.0001);\n+            assertEquals(250.0, event.getSceneX(), 0.0001);\n+            assertEquals(250.0, event.getSceneY(), 0.0001);\n@@ -537,2 +541,2 @@\n-            Assert.assertEquals(150.0, event.getSceneX(), 0.0001);\n-            Assert.assertEquals(150.0, event.getSceneY(), 0.0001);\n+            assertEquals(150.0, event.getSceneX(), 0.0001);\n+            assertEquals(150.0, event.getSceneY(), 0.0001);\n@@ -553,2 +557,2 @@\n-            Assert.assertEquals(150.0, event.getSceneX(), 0.0001);\n-            Assert.assertEquals(150.0, event.getSceneY(), 0.0001);\n+            assertEquals(150.0, event.getSceneX(), 0.0001);\n+            assertEquals(150.0, event.getSceneY(), 0.0001);\n@@ -571,2 +575,2 @@\n-            Assert.assertEquals(250.0, event.getSceneX(), 0.0001);\n-            Assert.assertEquals(250.0, event.getSceneY(), 0.0001);\n+            assertEquals(250.0, event.getSceneX(), 0.0001);\n+            assertEquals(250.0, event.getSceneY(), 0.0001);\n@@ -603,2 +607,2 @@\n-            Assert.assertEquals(150.0, event.getSceneX(), 0.0001);\n-            Assert.assertEquals(150.0, event.getSceneY(), 0.0001);\n+            assertEquals(150.0, event.getSceneX(), 0.0001);\n+            assertEquals(150.0, event.getSceneY(), 0.0001);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/RotateEventTest.java","additions":26,"deletions":22,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,3 +41,7 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -242,4 +246,4 @@\n-            Assert.assertEquals(66.0, event.getDeltaX(), 0.0001);\n-            Assert.assertEquals(99.0, event.getDeltaY(), 0.0001);\n-            Assert.assertEquals(132.0, event.getTotalDeltaX(), 0.0001);\n-            Assert.assertEquals(198.0, event.getTotalDeltaY(), 0.0001);\n+            assertEquals(66.0, event.getDeltaX(), 0.0001);\n+            assertEquals(99.0, event.getDeltaY(), 0.0001);\n+            assertEquals(132.0, event.getTotalDeltaX(), 0.0001);\n+            assertEquals(198.0, event.getTotalDeltaY(), 0.0001);\n@@ -264,2 +268,2 @@\n-            Assert.assertEquals(0.0, event.getTextDeltaX(), 0.0001);\n-            Assert.assertEquals(0.0, event.getTextDeltaY(), 0.0001);\n+            assertEquals(0.0, event.getTextDeltaX(), 0.0001);\n+            assertEquals(0.0, event.getTextDeltaY(), 0.0001);\n@@ -277,2 +281,2 @@\n-            Assert.assertEquals(8.0, event.getTextDeltaX(), 0.0001);\n-            Assert.assertEquals(15.0, event.getTextDeltaY(), 0.0001);\n+            assertEquals(8.0, event.getTextDeltaX(), 0.0001);\n+            assertEquals(15.0, event.getTextDeltaY(), 0.0001);\n@@ -290,2 +294,2 @@\n-            Assert.assertEquals(0.0, event.getTextDeltaX(), 0.0001);\n-            Assert.assertEquals(3.0, event.getTextDeltaY(), 0.0001);\n+            assertEquals(0.0, event.getTextDeltaX(), 0.0001);\n+            assertEquals(3.0, event.getTextDeltaY(), 0.0001);\n@@ -398,1 +402,1 @@\n-            Assert.assertEquals(0, event.getTouchCount());\n+            assertEquals(0, event.getTouchCount());\n@@ -408,1 +412,1 @@\n-            Assert.assertEquals(5, event.getTouchCount());\n+            assertEquals(5, event.getTouchCount());\n@@ -530,3 +534,3 @@\n-            Assert.assertEquals(150, event.getX(), 0.00001);\n-            Assert.assertEquals(150, event.getY(), 0.00001);\n-            Assert.assertEquals(0, event.getZ(), 0.00001);\n+            assertEquals(150, event.getX(), 0.00001);\n+            assertEquals(150, event.getY(), 0.00001);\n+            assertEquals(0, event.getZ(), 0.00001);\n@@ -537,3 +541,3 @@\n-            Assert.assertEquals(150, event.getX(), 0.00001);\n-            Assert.assertEquals(150, event.getY(), 0.00001);\n-            Assert.assertEquals(50, event.getZ(), 0.00001);\n+            assertEquals(150, event.getX(), 0.00001);\n+            assertEquals(150, event.getY(), 0.00001);\n+            assertEquals(50, event.getZ(), 0.00001);\n@@ -695,2 +699,2 @@\n-            Assert.assertEquals(250.0, event.getSceneX(), 0.0001);\n-            Assert.assertEquals(250.0, event.getSceneY(), 0.0001);\n+            assertEquals(250.0, event.getSceneX(), 0.0001);\n+            assertEquals(250.0, event.getSceneY(), 0.0001);\n@@ -711,2 +715,2 @@\n-            Assert.assertEquals(150.0, event.getSceneX(), 0.0001);\n-            Assert.assertEquals(150.0, event.getSceneY(), 0.0001);\n+            assertEquals(150.0, event.getSceneX(), 0.0001);\n+            assertEquals(150.0, event.getSceneY(), 0.0001);\n@@ -727,2 +731,2 @@\n-            Assert.assertEquals(150.0, event.getSceneX(), 0.0001);\n-            Assert.assertEquals(150.0, event.getSceneY(), 0.0001);\n+            assertEquals(150.0, event.getSceneX(), 0.0001);\n+            assertEquals(150.0, event.getSceneY(), 0.0001);\n@@ -745,2 +749,2 @@\n-            Assert.assertEquals(250.0, event.getSceneX(), 0.0001);\n-            Assert.assertEquals(250.0, event.getSceneY(), 0.0001);\n+            assertEquals(250.0, event.getSceneX(), 0.0001);\n+            assertEquals(250.0, event.getSceneY(), 0.0001);\n@@ -778,2 +782,2 @@\n-            Assert.assertEquals(150.0, event.getSceneX(), 0.0001);\n-            Assert.assertEquals(150.0, event.getSceneY(), 0.0001);\n+            assertEquals(150.0, event.getSceneX(), 0.0001);\n+            assertEquals(150.0, event.getSceneY(), 0.0001);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/ScrollEventTest.java","additions":36,"deletions":32,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,3 +41,7 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -213,1 +217,1 @@\n-            Assert.assertEquals(3, event.getTouchCount());\n+            assertEquals(3, event.getTouchCount());\n@@ -233,4 +237,4 @@\n-            Assert.assertEquals(151.0, event.getX(), 0.0001);\n-            Assert.assertEquals(152.0, event.getY(), 0.0001);\n-            Assert.assertEquals(153.0, event.getScreenX(), 0.0001);\n-            Assert.assertEquals(154.0, event.getScreenY(), 0.0001);\n+            assertEquals(151.0, event.getX(), 0.0001);\n+            assertEquals(152.0, event.getY(), 0.0001);\n+            assertEquals(153.0, event.getScreenX(), 0.0001);\n+            assertEquals(154.0, event.getScreenY(), 0.0001);\n@@ -256,1 +260,1 @@\n-            Assert.assertEquals(swiped, event.isDirect());\n+            assertEquals(swiped, event.isDirect());\n@@ -283,3 +287,3 @@\n-            Assert.assertEquals(150, event.getX(), 0.00001);\n-            Assert.assertEquals(150, event.getY(), 0.00001);\n-            Assert.assertEquals(0, event.getZ(), 0.00001);\n+            assertEquals(150, event.getX(), 0.00001);\n+            assertEquals(150, event.getY(), 0.00001);\n+            assertEquals(0, event.getZ(), 0.00001);\n@@ -290,3 +294,3 @@\n-            Assert.assertEquals(150, event.getX(), 0.00001);\n-            Assert.assertEquals(150, event.getY(), 0.00001);\n-            Assert.assertEquals(50, event.getZ(), 0.00001);\n+            assertEquals(150, event.getX(), 0.00001);\n+            assertEquals(150, event.getY(), 0.00001);\n+            assertEquals(50, event.getZ(), 0.00001);\n@@ -372,2 +376,2 @@\n-            Assert.assertEquals(150.0, event.getSceneX(), 0.0001);\n-            Assert.assertEquals(150.0, event.getSceneY(), 0.0001);\n+            assertEquals(150.0, event.getSceneX(), 0.0001);\n+            assertEquals(150.0, event.getSceneY(), 0.0001);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/SwipeEventTest.java","additions":22,"deletions":18,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,3 +42,9 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -186,4 +192,4 @@\n-                    Assert.assertEquals(true, event.isShiftDown());\n-                    Assert.assertEquals(false, event.isControlDown());\n-                    Assert.assertEquals(true, event.isAltDown());\n-                    Assert.assertEquals(false, event.isMetaDown());\n+                    assertEquals(true, event.isShiftDown());\n+                    assertEquals(false, event.isControlDown());\n+                    assertEquals(true, event.isAltDown());\n+                    assertEquals(false, event.isMetaDown());\n@@ -192,4 +198,4 @@\n-                    Assert.assertEquals(false, event.isShiftDown());\n-                    Assert.assertEquals(true, event.isControlDown());\n-                    Assert.assertEquals(false, event.isAltDown());\n-                    Assert.assertEquals(true, event.isMetaDown());\n+                    assertEquals(false, event.isShiftDown());\n+                    assertEquals(true, event.isControlDown());\n+                    assertEquals(false, event.isAltDown());\n+                    assertEquals(true, event.isMetaDown());\n@@ -198,4 +204,4 @@\n-                    Assert.assertEquals(false, event.isShiftDown());\n-                    Assert.assertEquals(true, event.isControlDown());\n-                    Assert.assertEquals(true, event.isAltDown());\n-                    Assert.assertEquals(false, event.isMetaDown());\n+                    assertEquals(false, event.isShiftDown());\n+                    assertEquals(true, event.isControlDown());\n+                    assertEquals(true, event.isAltDown());\n+                    assertEquals(false, event.isMetaDown());\n@@ -240,2 +246,2 @@\n-                    Assert.assertEquals(1, event.getTouchCount());\n-                    Assert.assertEquals(1, event.getTouchPoints().size());\n+                    assertEquals(1, event.getTouchCount());\n+                    assertEquals(1, event.getTouchPoints().size());\n@@ -245,2 +251,2 @@\n-                    Assert.assertEquals(2, event.getTouchCount());\n-                    Assert.assertEquals(2, event.getTouchPoints().size());\n+                    assertEquals(2, event.getTouchCount());\n+                    assertEquals(2, event.getTouchPoints().size());\n@@ -250,2 +256,2 @@\n-                    Assert.assertEquals(2, event.getTouchCount());\n-                    Assert.assertEquals(2, event.getTouchPoints().size());\n+                    assertEquals(2, event.getTouchCount());\n+                    assertEquals(2, event.getTouchPoints().size());\n@@ -254,2 +260,2 @@\n-                    Assert.assertEquals(1, event.getTouchCount());\n-                    Assert.assertEquals(1, event.getTouchPoints().size());\n+                    assertEquals(1, event.getTouchCount());\n+                    assertEquals(1, event.getTouchPoints().size());\n@@ -304,1 +310,1 @@\n-                    Assert.assertEquals(1, event.getEventSetId());\n+                    assertEquals(1, event.getEventSetId());\n@@ -308,1 +314,1 @@\n-                    Assert.assertEquals(2, event.getEventSetId());\n+                    assertEquals(2, event.getEventSetId());\n@@ -312,1 +318,1 @@\n-                    Assert.assertEquals(3, event.getEventSetId());\n+                    assertEquals(3, event.getEventSetId());\n@@ -315,1 +321,1 @@\n-                    Assert.assertEquals(4, event.getEventSetId());\n+                    assertEquals(4, event.getEventSetId());\n@@ -364,2 +370,2 @@\n-                    Assert.assertEquals(110.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(110.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(110.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(110.0, event.getTouchPoint().getY(), 0.0001);\n@@ -369,2 +375,2 @@\n-                    Assert.assertEquals(120.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(120.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(120.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(120.0, event.getTouchPoint().getY(), 0.0001);\n@@ -374,2 +380,2 @@\n-                    Assert.assertEquals(130.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(130.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(130.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(130.0, event.getTouchPoint().getY(), 0.0001);\n@@ -407,2 +413,2 @@\n-                    Assert.assertEquals(110.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(110.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(110.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(110.0, event.getTouchPoint().getY(), 0.0001);\n@@ -412,2 +418,2 @@\n-                    Assert.assertEquals(120.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(120.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(120.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(120.0, event.getTouchPoint().getY(), 0.0001);\n@@ -417,2 +423,2 @@\n-                    Assert.assertEquals(130.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(130.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(130.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(130.0, event.getTouchPoint().getY(), 0.0001);\n@@ -464,4 +470,4 @@\n-                    Assert.assertEquals(110.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(110.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(1, event.getTouchPoints().get(0).getId());\n-                    Assert.assertEquals(2, event.getTouchPoints().get(1).getId());\n+                    assertEquals(110.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(110.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(1, event.getTouchPoints().get(0).getId());\n+                    assertEquals(2, event.getTouchPoints().get(1).getId());\n@@ -471,4 +477,4 @@\n-                    Assert.assertEquals(120.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(120.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(1, event.getTouchPoints().get(0).getId());\n-                    Assert.assertEquals(2, event.getTouchPoints().get(1).getId());\n+                    assertEquals(120.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(120.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(1, event.getTouchPoints().get(0).getId());\n+                    assertEquals(2, event.getTouchPoints().get(1).getId());\n@@ -478,4 +484,4 @@\n-                    Assert.assertEquals(130.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(130.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(1, event.getTouchPoints().get(0).getId());\n-                    Assert.assertEquals(3, event.getTouchPoints().get(1).getId());\n+                    assertEquals(130.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(130.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(1, event.getTouchPoints().get(0).getId());\n+                    assertEquals(3, event.getTouchPoints().get(1).getId());\n@@ -527,4 +533,4 @@\n-                    Assert.assertEquals(110.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(110.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(1, event.getTouchPoints().get(0).getId());\n-                    Assert.assertEquals(2, event.getTouchPoints().get(1).getId());\n+                    assertEquals(110.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(110.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(1, event.getTouchPoints().get(0).getId());\n+                    assertEquals(2, event.getTouchPoints().get(1).getId());\n@@ -534,4 +540,4 @@\n-                    Assert.assertEquals(120.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(120.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(1, event.getTouchPoints().get(0).getId());\n-                    Assert.assertEquals(2, event.getTouchPoints().get(1).getId());\n+                    assertEquals(120.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(120.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(1, event.getTouchPoints().get(0).getId());\n+                    assertEquals(2, event.getTouchPoints().get(1).getId());\n@@ -549,4 +555,4 @@\n-                    Assert.assertEquals(120.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(120.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(1, event.getTouchPoints().get(0).getId());\n-                    Assert.assertEquals(2, event.getTouchPoints().get(1).getId());\n+                    assertEquals(120.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(120.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(1, event.getTouchPoints().get(0).getId());\n+                    assertEquals(2, event.getTouchPoints().get(1).getId());\n@@ -556,4 +562,4 @@\n-                    Assert.assertEquals(110.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(110.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(1, event.getTouchPoints().get(0).getId());\n-                    Assert.assertEquals(2, event.getTouchPoints().get(1).getId());\n+                    assertEquals(110.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(110.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(1, event.getTouchPoints().get(0).getId());\n+                    assertEquals(2, event.getTouchPoints().get(1).getId());\n@@ -597,4 +603,4 @@\n-                    Assert.assertEquals(110.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(110.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(1, event.getTouchPoints().get(0).getId());\n-                    Assert.assertEquals(2, event.getTouchPoints().get(1).getId());\n+                    assertEquals(110.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(110.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(1, event.getTouchPoints().get(0).getId());\n+                    assertEquals(2, event.getTouchPoints().get(1).getId());\n@@ -604,4 +610,4 @@\n-                    Assert.assertEquals(120.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(120.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(1, event.getTouchPoints().get(0).getId());\n-                    Assert.assertEquals(2, event.getTouchPoints().get(1).getId());\n+                    assertEquals(120.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(120.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(1, event.getTouchPoints().get(0).getId());\n+                    assertEquals(2, event.getTouchPoints().get(1).getId());\n@@ -611,4 +617,4 @@\n-                    Assert.assertEquals(160.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(160.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(2, event.getTouchPoints().get(0).getId());\n-                    Assert.assertEquals(3, event.getTouchPoints().get(1).getId());\n+                    assertEquals(160.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(160.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(2, event.getTouchPoints().get(0).getId());\n+                    assertEquals(3, event.getTouchPoints().get(1).getId());\n@@ -626,4 +632,4 @@\n-                    Assert.assertEquals(120.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(120.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(2, event.getTouchPoints().get(0).getId());\n-                    Assert.assertEquals(3, event.getTouchPoints().get(1).getId());\n+                    assertEquals(120.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(120.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(2, event.getTouchPoints().get(0).getId());\n+                    assertEquals(3, event.getTouchPoints().get(1).getId());\n@@ -633,4 +639,4 @@\n-                    Assert.assertEquals(160.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(160.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(2, event.getTouchPoints().get(0).getId());\n-                    Assert.assertEquals(3, event.getTouchPoints().get(1).getId());\n+                    assertEquals(160.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(160.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(2, event.getTouchPoints().get(0).getId());\n+                    assertEquals(3, event.getTouchPoints().get(1).getId());\n@@ -691,2 +697,2 @@\n-                    Assert.assertEquals(1, event.getEventSetId());\n-                    Assert.assertEquals(touched, event.getTouchPoint().getId());\n+                    assertEquals(1, event.getEventSetId());\n+                    assertEquals(touched, event.getTouchPoint().getId());\n@@ -696,2 +702,2 @@\n-                    Assert.assertEquals(2, event.getEventSetId());\n-                    Assert.assertEquals(touched - 2, event.getTouchPoint().getId());\n+                    assertEquals(2, event.getEventSetId());\n+                    assertEquals(touched - 2, event.getTouchPoint().getId());\n@@ -701,2 +707,2 @@\n-                    Assert.assertEquals(1, event.getEventSetId());\n-                    Assert.assertEquals(touched - 4, event.getTouchPoint().getId());\n+                    assertEquals(1, event.getEventSetId());\n+                    assertEquals(touched - 4, event.getTouchPoint().getId());\n@@ -706,2 +712,2 @@\n-                    Assert.assertEquals(2, event.getEventSetId());\n-                    Assert.assertEquals(touched - 6, event.getTouchPoint().getId());\n+                    assertEquals(2, event.getEventSetId());\n+                    assertEquals(touched - 6, event.getTouchPoint().getId());\n@@ -843,3 +849,3 @@\n-            Assert.assertEquals(110, event.getTouchPoint().getX(), 0.00001);\n-            Assert.assertEquals(110, event.getTouchPoint().getY(), 0.00001);\n-            Assert.assertEquals(0, event.getTouchPoint().getZ(), 0.00001);\n+            assertEquals(110, event.getTouchPoint().getX(), 0.00001);\n+            assertEquals(110, event.getTouchPoint().getY(), 0.00001);\n+            assertEquals(0, event.getTouchPoint().getZ(), 0.00001);\n@@ -850,3 +856,3 @@\n-            Assert.assertEquals(110, event.getTouchPoint().getX(), 0.00001);\n-            Assert.assertEquals(110, event.getTouchPoint().getY(), 0.00001);\n-            Assert.assertEquals(50, event.getTouchPoint().getZ(), 0.00001);\n+            assertEquals(110, event.getTouchPoint().getX(), 0.00001);\n+            assertEquals(110, event.getTouchPoint().getY(), 0.00001);\n+            assertEquals(50, event.getTouchPoint().getZ(), 0.00001);\n@@ -1050,7 +1056,7 @@\n-                    Assert.assertEquals(1, event.getTouchPoint().getId());\n-                    Assert.assertEquals(150.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(155.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(150.0, event.getTouchPoint().getSceneX(), 0.0001);\n-                    Assert.assertEquals(155.0, event.getTouchPoint().getSceneY(), 0.0001);\n-                    Assert.assertEquals(1150.0, event.getTouchPoint().getScreenX(), 0.0001);\n-                    Assert.assertEquals(1155.0, event.getTouchPoint().getScreenY(), 0.0001);\n+                    assertEquals(1, event.getTouchPoint().getId());\n+                    assertEquals(150.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(155.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(150.0, event.getTouchPoint().getSceneX(), 0.0001);\n+                    assertEquals(155.0, event.getTouchPoint().getSceneY(), 0.0001);\n+                    assertEquals(1150.0, event.getTouchPoint().getScreenX(), 0.0001);\n+                    assertEquals(1155.0, event.getTouchPoint().getScreenY(), 0.0001);\n@@ -1059,7 +1065,7 @@\n-                    Assert.assertEquals(1, event.getTouchPoint().getId());\n-                    Assert.assertEquals(250.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(255.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(250.0, event.getTouchPoint().getSceneX(), 0.0001);\n-                    Assert.assertEquals(255.0, event.getTouchPoint().getSceneY(), 0.0001);\n-                    Assert.assertEquals(1250.0, event.getTouchPoint().getScreenX(), 0.0001);\n-                    Assert.assertEquals(1255.0, event.getTouchPoint().getScreenY(), 0.0001);\n+                    assertEquals(1, event.getTouchPoint().getId());\n+                    assertEquals(250.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(255.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(250.0, event.getTouchPoint().getSceneX(), 0.0001);\n+                    assertEquals(255.0, event.getTouchPoint().getSceneY(), 0.0001);\n+                    assertEquals(1250.0, event.getTouchPoint().getScreenX(), 0.0001);\n+                    assertEquals(1255.0, event.getTouchPoint().getScreenY(), 0.0001);\n@@ -1076,7 +1082,7 @@\n-                    Assert.assertEquals(2, event.getTouchPoint().getId());\n-                    Assert.assertEquals(260.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(265.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(260.0, event.getTouchPoint().getSceneX(), 0.0001);\n-                    Assert.assertEquals(265.0, event.getTouchPoint().getSceneY(), 0.0001);\n-                    Assert.assertEquals(1260.0, event.getTouchPoint().getScreenX(), 0.0001);\n-                    Assert.assertEquals(1265.0, event.getTouchPoint().getScreenY(), 0.0001);\n+                    assertEquals(2, event.getTouchPoint().getId());\n+                    assertEquals(260.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(265.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(260.0, event.getTouchPoint().getSceneX(), 0.0001);\n+                    assertEquals(265.0, event.getTouchPoint().getSceneY(), 0.0001);\n+                    assertEquals(1260.0, event.getTouchPoint().getScreenX(), 0.0001);\n+                    assertEquals(1265.0, event.getTouchPoint().getScreenY(), 0.0001);\n@@ -1085,7 +1091,7 @@\n-                    Assert.assertEquals(2, event.getTouchPoint().getId());\n-                    Assert.assertEquals(160.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(165.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(160.0, event.getTouchPoint().getSceneX(), 0.0001);\n-                    Assert.assertEquals(165.0, event.getTouchPoint().getSceneY(), 0.0001);\n-                    Assert.assertEquals(1160.0, event.getTouchPoint().getScreenX(), 0.0001);\n-                    Assert.assertEquals(1165.0, event.getTouchPoint().getScreenY(), 0.0001);\n+                    assertEquals(2, event.getTouchPoint().getId());\n+                    assertEquals(160.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(165.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(160.0, event.getTouchPoint().getSceneX(), 0.0001);\n+                    assertEquals(165.0, event.getTouchPoint().getSceneY(), 0.0001);\n+                    assertEquals(1160.0, event.getTouchPoint().getScreenX(), 0.0001);\n+                    assertEquals(1165.0, event.getTouchPoint().getScreenY(), 0.0001);\n@@ -1131,7 +1137,7 @@\n-                    Assert.assertEquals(1, event.getTouchPoint().getId());\n-                    Assert.assertEquals(150.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(155.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(150.0, event.getTouchPoint().getSceneX(), 0.0001);\n-                    Assert.assertEquals(155.0, event.getTouchPoint().getSceneY(), 0.0001);\n-                    Assert.assertEquals(1150.0, event.getTouchPoint().getScreenX(), 0.0001);\n-                    Assert.assertEquals(1155.0, event.getTouchPoint().getScreenY(), 0.0001);\n+                    assertEquals(1, event.getTouchPoint().getId());\n+                    assertEquals(150.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(155.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(150.0, event.getTouchPoint().getSceneX(), 0.0001);\n+                    assertEquals(155.0, event.getTouchPoint().getSceneY(), 0.0001);\n+                    assertEquals(1150.0, event.getTouchPoint().getScreenX(), 0.0001);\n+                    assertEquals(1155.0, event.getTouchPoint().getScreenY(), 0.0001);\n@@ -1141,7 +1147,7 @@\n-                    Assert.assertEquals(2, event.getTouchPoint().getId());\n-                    Assert.assertEquals(160.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(165.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(160.0, event.getTouchPoint().getSceneX(), 0.0001);\n-                    Assert.assertEquals(165.0, event.getTouchPoint().getSceneY(), 0.0001);\n-                    Assert.assertEquals(1160.0, event.getTouchPoint().getScreenX(), 0.0001);\n-                    Assert.assertEquals(1165.0, event.getTouchPoint().getScreenY(), 0.0001);\n+                    assertEquals(2, event.getTouchPoint().getId());\n+                    assertEquals(160.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(165.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(160.0, event.getTouchPoint().getSceneX(), 0.0001);\n+                    assertEquals(165.0, event.getTouchPoint().getSceneY(), 0.0001);\n+                    assertEquals(1160.0, event.getTouchPoint().getScreenX(), 0.0001);\n+                    assertEquals(1165.0, event.getTouchPoint().getScreenY(), 0.0001);\n@@ -1158,7 +1164,7 @@\n-                    Assert.assertEquals(2, event.getTouchPoint().getId());\n-                    Assert.assertEquals(260.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(265.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(260.0, event.getTouchPoint().getSceneX(), 0.0001);\n-                    Assert.assertEquals(265.0, event.getTouchPoint().getSceneY(), 0.0001);\n-                    Assert.assertEquals(1260.0, event.getTouchPoint().getScreenX(), 0.0001);\n-                    Assert.assertEquals(1265.0, event.getTouchPoint().getScreenY(), 0.0001);\n+                    assertEquals(2, event.getTouchPoint().getId());\n+                    assertEquals(260.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(265.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(260.0, event.getTouchPoint().getSceneX(), 0.0001);\n+                    assertEquals(265.0, event.getTouchPoint().getSceneY(), 0.0001);\n+                    assertEquals(1260.0, event.getTouchPoint().getScreenX(), 0.0001);\n+                    assertEquals(1265.0, event.getTouchPoint().getScreenY(), 0.0001);\n@@ -1168,7 +1174,7 @@\n-                    Assert.assertEquals(1, event.getTouchPoint().getId());\n-                    Assert.assertEquals(250.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(255.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(250.0, event.getTouchPoint().getSceneX(), 0.0001);\n-                    Assert.assertEquals(255.0, event.getTouchPoint().getSceneY(), 0.0001);\n-                    Assert.assertEquals(1250.0, event.getTouchPoint().getScreenX(), 0.0001);\n-                    Assert.assertEquals(1255.0, event.getTouchPoint().getScreenY(), 0.0001);\n+                    assertEquals(1, event.getTouchPoint().getId());\n+                    assertEquals(250.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(255.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(250.0, event.getTouchPoint().getSceneX(), 0.0001);\n+                    assertEquals(255.0, event.getTouchPoint().getSceneY(), 0.0001);\n+                    assertEquals(1250.0, event.getTouchPoint().getScreenX(), 0.0001);\n+                    assertEquals(1255.0, event.getTouchPoint().getScreenY(), 0.0001);\n@@ -1214,7 +1220,7 @@\n-                    Assert.assertEquals(1, event.getTouchPoint().getId());\n-                    Assert.assertEquals(150.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(155.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(150.0, event.getTouchPoint().getSceneX(), 0.0001);\n-                    Assert.assertEquals(155.0, event.getTouchPoint().getSceneY(), 0.0001);\n-                    Assert.assertEquals(1150.0, event.getTouchPoint().getScreenX(), 0.0001);\n-                    Assert.assertEquals(1155.0, event.getTouchPoint().getScreenY(), 0.0001);\n+                    assertEquals(1, event.getTouchPoint().getId());\n+                    assertEquals(150.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(155.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(150.0, event.getTouchPoint().getSceneX(), 0.0001);\n+                    assertEquals(155.0, event.getTouchPoint().getSceneY(), 0.0001);\n+                    assertEquals(1150.0, event.getTouchPoint().getScreenX(), 0.0001);\n+                    assertEquals(1155.0, event.getTouchPoint().getScreenY(), 0.0001);\n@@ -1224,7 +1230,7 @@\n-                    Assert.assertEquals(1, event.getTouchPoint().getId());\n-                    Assert.assertEquals(250.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(255.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(250.0, event.getTouchPoint().getSceneX(), 0.0001);\n-                    Assert.assertEquals(255.0, event.getTouchPoint().getSceneY(), 0.0001);\n-                    Assert.assertEquals(1250.0, event.getTouchPoint().getScreenX(), 0.0001);\n-                    Assert.assertEquals(1255.0, event.getTouchPoint().getScreenY(), 0.0001);\n+                    assertEquals(1, event.getTouchPoint().getId());\n+                    assertEquals(250.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(255.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(250.0, event.getTouchPoint().getSceneX(), 0.0001);\n+                    assertEquals(255.0, event.getTouchPoint().getSceneY(), 0.0001);\n+                    assertEquals(1250.0, event.getTouchPoint().getScreenX(), 0.0001);\n+                    assertEquals(1255.0, event.getTouchPoint().getScreenY(), 0.0001);\n@@ -1233,7 +1239,7 @@\n-                    Assert.assertEquals(2, event.getTouchPoint().getId());\n-                    Assert.assertEquals(160.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(165.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(160.0, event.getTouchPoint().getSceneX(), 0.0001);\n-                    Assert.assertEquals(165.0, event.getTouchPoint().getSceneY(), 0.0001);\n-                    Assert.assertEquals(1160.0, event.getTouchPoint().getScreenX(), 0.0001);\n-                    Assert.assertEquals(1165.0, event.getTouchPoint().getScreenY(), 0.0001);\n+                    assertEquals(2, event.getTouchPoint().getId());\n+                    assertEquals(160.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(165.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(160.0, event.getTouchPoint().getSceneX(), 0.0001);\n+                    assertEquals(165.0, event.getTouchPoint().getSceneY(), 0.0001);\n+                    assertEquals(1160.0, event.getTouchPoint().getScreenX(), 0.0001);\n+                    assertEquals(1165.0, event.getTouchPoint().getScreenY(), 0.0001);\n@@ -1250,7 +1256,7 @@\n-                    Assert.assertEquals(2, event.getTouchPoint().getId());\n-                    Assert.assertEquals(260.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(265.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(260.0, event.getTouchPoint().getSceneX(), 0.0001);\n-                    Assert.assertEquals(265.0, event.getTouchPoint().getSceneY(), 0.0001);\n-                    Assert.assertEquals(1260.0, event.getTouchPoint().getScreenX(), 0.0001);\n-                    Assert.assertEquals(1265.0, event.getTouchPoint().getScreenY(), 0.0001);\n+                    assertEquals(2, event.getTouchPoint().getId());\n+                    assertEquals(260.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(265.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(260.0, event.getTouchPoint().getSceneX(), 0.0001);\n+                    assertEquals(265.0, event.getTouchPoint().getSceneY(), 0.0001);\n+                    assertEquals(1260.0, event.getTouchPoint().getScreenX(), 0.0001);\n+                    assertEquals(1265.0, event.getTouchPoint().getScreenY(), 0.0001);\n@@ -1296,7 +1302,7 @@\n-                    Assert.assertEquals(1, event.getTouchPoint().getId());\n-                    Assert.assertEquals(150.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(155.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(150.0, event.getTouchPoint().getSceneX(), 0.0001);\n-                    Assert.assertEquals(155.0, event.getTouchPoint().getSceneY(), 0.0001);\n-                    Assert.assertEquals(1150.0, event.getTouchPoint().getScreenX(), 0.0001);\n-                    Assert.assertEquals(1155.0, event.getTouchPoint().getScreenY(), 0.0001);\n+                    assertEquals(1, event.getTouchPoint().getId());\n+                    assertEquals(150.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(155.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(150.0, event.getTouchPoint().getSceneX(), 0.0001);\n+                    assertEquals(155.0, event.getTouchPoint().getSceneY(), 0.0001);\n+                    assertEquals(1150.0, event.getTouchPoint().getScreenX(), 0.0001);\n+                    assertEquals(1155.0, event.getTouchPoint().getScreenY(), 0.0001);\n@@ -1306,7 +1312,7 @@\n-                    Assert.assertEquals(1, event.getTouchPoint().getId());\n-                    Assert.assertEquals(250.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(255.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(250.0, event.getTouchPoint().getSceneX(), 0.0001);\n-                    Assert.assertEquals(255.0, event.getTouchPoint().getSceneY(), 0.0001);\n-                    Assert.assertEquals(1250.0, event.getTouchPoint().getScreenX(), 0.0001);\n-                    Assert.assertEquals(1255.0, event.getTouchPoint().getScreenY(), 0.0001);\n+                    assertEquals(1, event.getTouchPoint().getId());\n+                    assertEquals(250.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(255.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(250.0, event.getTouchPoint().getSceneX(), 0.0001);\n+                    assertEquals(255.0, event.getTouchPoint().getSceneY(), 0.0001);\n+                    assertEquals(1250.0, event.getTouchPoint().getScreenX(), 0.0001);\n+                    assertEquals(1255.0, event.getTouchPoint().getScreenY(), 0.0001);\n@@ -1315,7 +1321,7 @@\n-                    Assert.assertEquals(2, event.getTouchPoint().getId());\n-                    Assert.assertEquals(160.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(165.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(160.0, event.getTouchPoint().getSceneX(), 0.0001);\n-                    Assert.assertEquals(165.0, event.getTouchPoint().getSceneY(), 0.0001);\n-                    Assert.assertEquals(1160.0, event.getTouchPoint().getScreenX(), 0.0001);\n-                    Assert.assertEquals(1165.0, event.getTouchPoint().getScreenY(), 0.0001);\n+                    assertEquals(2, event.getTouchPoint().getId());\n+                    assertEquals(160.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(165.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(160.0, event.getTouchPoint().getSceneX(), 0.0001);\n+                    assertEquals(165.0, event.getTouchPoint().getSceneY(), 0.0001);\n+                    assertEquals(1160.0, event.getTouchPoint().getScreenX(), 0.0001);\n+                    assertEquals(1165.0, event.getTouchPoint().getScreenY(), 0.0001);\n@@ -1332,7 +1338,7 @@\n-                    Assert.assertEquals(2, event.getTouchPoint().getId());\n-                    Assert.assertEquals(260.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(265.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(260.0, event.getTouchPoint().getSceneX(), 0.0001);\n-                    Assert.assertEquals(265.0, event.getTouchPoint().getSceneY(), 0.0001);\n-                    Assert.assertEquals(1260.0, event.getTouchPoint().getScreenX(), 0.0001);\n-                    Assert.assertEquals(1265.0, event.getTouchPoint().getScreenY(), 0.0001);\n+                    assertEquals(2, event.getTouchPoint().getId());\n+                    assertEquals(260.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(265.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(260.0, event.getTouchPoint().getSceneX(), 0.0001);\n+                    assertEquals(265.0, event.getTouchPoint().getSceneY(), 0.0001);\n+                    assertEquals(1260.0, event.getTouchPoint().getScreenX(), 0.0001);\n+                    assertEquals(1265.0, event.getTouchPoint().getScreenY(), 0.0001);\n@@ -1377,4 +1383,4 @@\n-                    Assert.assertEquals(115.0, event.getTouchPoint().getX(), 0.0001);\n-                    Assert.assertEquals(125.0, event.getTouchPoint().getY(), 0.0001);\n-                    Assert.assertEquals(130.0, event.getTouchPoint().getSceneX(), 0.0001);\n-                    Assert.assertEquals(130.0, event.getTouchPoint().getSceneY(), 0.0001);\n+                    assertEquals(115.0, event.getTouchPoint().getX(), 0.0001);\n+                    assertEquals(125.0, event.getTouchPoint().getY(), 0.0001);\n+                    assertEquals(130.0, event.getTouchPoint().getSceneX(), 0.0001);\n+                    assertEquals(130.0, event.getTouchPoint().getSceneY(), 0.0001);\n@@ -1386,8 +1392,8 @@\n-                    Assert.assertEquals(115.0, event.getTouchPoints().get(0).getX(), 0.0001);\n-                    Assert.assertEquals(125.0, event.getTouchPoints().get(0).getY(), 0.0001);\n-                    Assert.assertEquals(130.0, event.getTouchPoints().get(0).getSceneX(), 0.0001);\n-                    Assert.assertEquals(130.0, event.getTouchPoints().get(0).getSceneY(), 0.0001);\n-                    Assert.assertEquals(125.0, event.getTouchPoints().get(1).getX(), 0.0001);\n-                    Assert.assertEquals(135.0, event.getTouchPoints().get(1).getY(), 0.0001);\n-                    Assert.assertEquals(140.0, event.getTouchPoints().get(1).getSceneX(), 0.0001);\n-                    Assert.assertEquals(140.0, event.getTouchPoints().get(1).getSceneY(), 0.0001);\n+                    assertEquals(115.0, event.getTouchPoints().get(0).getX(), 0.0001);\n+                    assertEquals(125.0, event.getTouchPoints().get(0).getY(), 0.0001);\n+                    assertEquals(130.0, event.getTouchPoints().get(0).getSceneX(), 0.0001);\n+                    assertEquals(130.0, event.getTouchPoints().get(0).getSceneY(), 0.0001);\n+                    assertEquals(125.0, event.getTouchPoints().get(1).getX(), 0.0001);\n+                    assertEquals(135.0, event.getTouchPoints().get(1).getY(), 0.0001);\n+                    assertEquals(140.0, event.getTouchPoints().get(1).getSceneX(), 0.0001);\n+                    assertEquals(140.0, event.getTouchPoints().get(1).getSceneY(), 0.0001);\n@@ -1447,1 +1453,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -1449,15 +1455,17 @@\n-        Scene scene = createScene();\n-        Rectangle rect =\n-                (Rectangle) scene.getRoot().getChildrenUnmodifiable().get(0);\n-\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventBegin(\n-                System.currentTimeMillis(), 1, true, false, false, false, false);\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(\n-                TouchPoint.State.PRESSED, 1, 110, 110, 110, 110);\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();\n-\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventBegin(\n-                System.currentTimeMillis(), 1, true, false, false, false, false);\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(\n-                TouchPoint.State.MOVED, 2, 110, 110, 110, 110);\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();\n+        assertThrows(RuntimeException.class, () -> {\n+            Scene scene = createScene();\n+            Rectangle rect =\n+                    (Rectangle) scene.getRoot().getChildrenUnmodifiable().get(0);\n+\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventBegin(\n+                    System.currentTimeMillis(), 1, true, false, false, false, false);\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(\n+                    TouchPoint.State.PRESSED, 1, 110, 110, 110, 110);\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();\n+\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventBegin(\n+                    System.currentTimeMillis(), 1, true, false, false, false, false);\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(\n+                    TouchPoint.State.MOVED, 2, 110, 110, 110, 110);\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();\n+        });\n@@ -1466,1 +1474,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -1468,15 +1476,17 @@\n-        Scene scene = createScene();\n-        Rectangle rect =\n-                (Rectangle) scene.getRoot().getChildrenUnmodifiable().get(0);\n-\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventBegin(\n-                System.currentTimeMillis(), 1, true, false, false, false, false);\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(\n-                TouchPoint.State.PRESSED, 1368, 110, 110, 110, 110);\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();\n-\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventBegin(\n-                System.currentTimeMillis(), 1, true, false, false, false, false);\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(\n-                TouchPoint.State.MOVED, 127, 110, 110, 110, 110);\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();\n+        assertThrows(RuntimeException.class, () -> {\n+            Scene scene = createScene();\n+            Rectangle rect =\n+                    (Rectangle) scene.getRoot().getChildrenUnmodifiable().get(0);\n+\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventBegin(\n+                    System.currentTimeMillis(), 1, true, false, false, false, false);\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(\n+                    TouchPoint.State.PRESSED, 1368, 110, 110, 110, 110);\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();\n+\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventBegin(\n+                    System.currentTimeMillis(), 1, true, false, false, false, false);\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(\n+                    TouchPoint.State.MOVED, 127, 110, 110, 110, 110);\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();\n+        });\n@@ -1485,1 +1495,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -1487,11 +1497,13 @@\n-        Scene scene = createScene();\n-        Rectangle rect =\n-                (Rectangle) scene.getRoot().getChildrenUnmodifiable().get(0);\n-\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventBegin(\n-                System.currentTimeMillis(), 1, true, false, false, false, false);\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(\n-                TouchPoint.State.PRESSED, 1368, 110, 110, 110, 110);\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(\n-                TouchPoint.State.PRESSED, 1, 110, 110, 110, 110);\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();\n+        assertThrows(RuntimeException.class, () -> {\n+            Scene scene = createScene();\n+            Rectangle rect =\n+                    (Rectangle) scene.getRoot().getChildrenUnmodifiable().get(0);\n+\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventBegin(\n+                    System.currentTimeMillis(), 1, true, false, false, false, false);\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(\n+                    TouchPoint.State.PRESSED, 1368, 110, 110, 110, 110);\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(\n+                    TouchPoint.State.PRESSED, 1, 110, 110, 110, 110);\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();\n+        });\n@@ -1500,1 +1512,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -1502,9 +1514,11 @@\n-        Scene scene = createScene();\n-        Rectangle rect =\n-                (Rectangle) scene.getRoot().getChildrenUnmodifiable().get(0);\n-\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventBegin(\n-                System.currentTimeMillis(), 2, true, false, false, false, false);\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(\n-                TouchPoint.State.PRESSED, 1368, 110, 110, 110, 110);\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();\n+        assertThrows(RuntimeException.class, () -> {\n+            Scene scene = createScene();\n+            Rectangle rect =\n+                    (Rectangle) scene.getRoot().getChildrenUnmodifiable().get(0);\n+\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventBegin(\n+                    System.currentTimeMillis(), 2, true, false, false, false, false);\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(\n+                    TouchPoint.State.PRESSED, 1368, 110, 110, 110, 110);\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();\n+        });\n@@ -1513,1 +1527,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -1515,15 +1529,17 @@\n-        Scene scene = createScene();\n-        Rectangle rect =\n-                (Rectangle) scene.getRoot().getChildrenUnmodifiable().get(0);\n-\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventBegin(\n-                System.currentTimeMillis(), 1, true, false, false, false, false);\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(\n-                TouchPoint.State.PRESSED, 1368, 110, 110, 110, 110);\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();\n-\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventBegin(\n-                System.currentTimeMillis(), 1, true, false, false, false, false);\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(\n-                TouchPoint.State.PRESSED, 1, 110, 110, 110, 110);\n-        ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();\n+        assertThrows(RuntimeException.class, () -> {\n+            Scene scene = createScene();\n+            Rectangle rect =\n+                    (Rectangle) scene.getRoot().getChildrenUnmodifiable().get(0);\n+\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventBegin(\n+                    System.currentTimeMillis(), 1, true, false, false, false, false);\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(\n+                    TouchPoint.State.PRESSED, 1368, 110, 110, 110, 110);\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();\n+\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventBegin(\n+                    System.currentTimeMillis(), 1, true, false, false, false, false);\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventNext(\n+                    TouchPoint.State.PRESSED, 1, 110, 110, 110, 110);\n+            ((StubScene) SceneHelper.getPeer(scene)).getListener().touchEventEnd();\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/TouchEventTest.java","additions":312,"deletions":296,"binary":false,"changes":608,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,3 +41,7 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -221,2 +225,2 @@\n-            Assert.assertEquals(1.2, event.getZoomFactor(), 0.0001);\n-            Assert.assertEquals(2.4, event.getTotalZoomFactor(), 0.0001);\n+            assertEquals(1.2, event.getZoomFactor(), 0.0001);\n+            assertEquals(2.4, event.getTotalZoomFactor(), 0.0001);\n@@ -424,3 +428,3 @@\n-            Assert.assertEquals(150, event.getX(), 0.00001);\n-            Assert.assertEquals(150, event.getY(), 0.00001);\n-            Assert.assertEquals(0, event.getZ(), 0.00001);\n+            assertEquals(150, event.getX(), 0.00001);\n+            assertEquals(150, event.getY(), 0.00001);\n+            assertEquals(0, event.getZ(), 0.00001);\n@@ -431,3 +435,3 @@\n-            Assert.assertEquals(150, event.getX(), 0.00001);\n-            Assert.assertEquals(150, event.getY(), 0.00001);\n-            Assert.assertEquals(50, event.getZ(), 0.00001);\n+            assertEquals(150, event.getX(), 0.00001);\n+            assertEquals(150, event.getY(), 0.00001);\n+            assertEquals(50, event.getZ(), 0.00001);\n@@ -521,2 +525,2 @@\n-            Assert.assertEquals(250.0, event.getSceneX(), 0.0001);\n-            Assert.assertEquals(250.0, event.getSceneY(), 0.0001);\n+            assertEquals(250.0, event.getSceneX(), 0.0001);\n+            assertEquals(250.0, event.getSceneY(), 0.0001);\n@@ -537,2 +541,2 @@\n-            Assert.assertEquals(150.0, event.getSceneX(), 0.0001);\n-            Assert.assertEquals(150.0, event.getSceneY(), 0.0001);\n+            assertEquals(150.0, event.getSceneX(), 0.0001);\n+            assertEquals(150.0, event.getSceneY(), 0.0001);\n@@ -553,2 +557,2 @@\n-            Assert.assertEquals(150.0, event.getSceneX(), 0.0001);\n-            Assert.assertEquals(150.0, event.getSceneY(), 0.0001);\n+            assertEquals(150.0, event.getSceneX(), 0.0001);\n+            assertEquals(150.0, event.getSceneY(), 0.0001);\n@@ -571,2 +575,2 @@\n-            Assert.assertEquals(250.0, event.getSceneX(), 0.0001);\n-            Assert.assertEquals(250.0, event.getSceneY(), 0.0001);\n+            assertEquals(250.0, event.getSceneX(), 0.0001);\n+            assertEquals(250.0, event.getSceneY(), 0.0001);\n@@ -604,2 +608,2 @@\n-            Assert.assertEquals(150.0, event.getSceneX(), 0.0001);\n-            Assert.assertEquals(150.0, event.getSceneY(), 0.0001);\n+            assertEquals(150.0, event.getSceneX(), 0.0001);\n+            assertEquals(150.0, event.getSceneY(), 0.0001);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/ZoomEventTest.java","additions":26,"deletions":22,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.junit.Test;\n@@ -34,1 +33,3 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n@@ -40,1 +41,2 @@\n-    @Test public void nullPaintDefaultsToTransparent() {\n+    @Test\n+    public void nullPaintDefaultsToTransparent() {\n@@ -45,1 +47,2 @@\n-    @Test public void nullRadiusDefaultsToEmpty() {\n+    @Test\n+    public void nullRadiusDefaultsToEmpty() {\n@@ -50,1 +53,2 @@\n-    @Test public void nullInsetsDefaultsToEmpty() {\n+    @Test\n+    public void nullInsetsDefaultsToEmpty() {\n@@ -55,1 +59,2 @@\n-    @Test public void equivalentFills() {\n+    @Test\n+    public void equivalentFills() {\n@@ -61,1 +66,2 @@\n-    @Test public void differentFills() {\n+    @Test\n+    public void differentFills() {\n@@ -67,1 +73,2 @@\n-    @Test public void differentFills2() {\n+    @Test\n+    public void differentFills2() {\n@@ -73,1 +80,2 @@\n-    @Test public void differentFills3() {\n+    @Test\n+    public void differentFills3() {\n@@ -79,1 +87,2 @@\n-    @Test public void equalsAgainstNull() {\n+    @Test\n+    public void equalsAgainstNull() {\n@@ -85,1 +94,2 @@\n-    @Test public void equalsAgainstRandomObject() {\n+    @Test\n+    public void equalsAgainstRandomObject() {\n@@ -90,1 +100,2 @@\n-    @Test public void equivalentHaveSameHash() {\n+    @Test\n+    public void equivalentHaveSameHash() {\n@@ -96,1 +107,2 @@\n-    @Test public void toStringCausesNoError() {\n+    @Test\n+    public void toStringCausesNoError() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BackgroundFillTest.java","additions":26,"deletions":14,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.junit.Test;\n@@ -36,1 +35,5 @@\n-import static org.junit.Assert.*;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -50,1 +53,2 @@\n-    @Test public void instanceCreation() {\n+    @Test\n+    public void instanceCreation() {\n@@ -59,1 +63,2 @@\n-    @Test public void instanceCreation2() {\n+    @Test\n+    public void instanceCreation2() {\n@@ -68,1 +73,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -70,1 +75,3 @@\n-        new BackgroundImage(null, NO_REPEAT, ROUND, POS_2, SIZE_2);\n+        assertThrows(NullPointerException.class, () -> {\n+            new BackgroundImage(null, NO_REPEAT, ROUND, POS_2, SIZE_2);\n+        });\n@@ -73,1 +80,2 @@\n-    @Test public void instanceCreationNullRepeatXDefaultsToREPEAT() {\n+    @Test\n+    public void instanceCreationNullRepeatXDefaultsToREPEAT() {\n@@ -82,1 +90,2 @@\n-    @Test public void instanceCreationNullRepeatYDefaultsToREPEAT() {\n+    @Test\n+    public void instanceCreationNullRepeatYDefaultsToREPEAT() {\n@@ -91,1 +100,2 @@\n-    @Test public void instanceCreationNullPositionDefaultsToDEFAULT() {\n+    @Test\n+    public void instanceCreationNullPositionDefaultsToDEFAULT() {\n@@ -100,1 +110,2 @@\n-    @Test public void instanceCreationNullSizeDefaultsToDEFAULT() {\n+    @Test\n+    public void instanceCreationNullSizeDefaultsToDEFAULT() {\n@@ -109,1 +120,2 @@\n-    @Test public void equivalent() {\n+    @Test\n+    public void equivalent() {\n@@ -115,1 +127,2 @@\n-    @Test public void equivalent2() {\n+    @Test\n+    public void equivalent2() {\n@@ -121,1 +134,2 @@\n-    @Test public void equivalent3() {\n+    @Test\n+    public void equivalent3() {\n@@ -127,1 +141,2 @@\n-    @Test public void equivalent4() {\n+    @Test\n+    public void equivalent4() {\n@@ -133,1 +148,2 @@\n-    @Test public void equivalent5() {\n+    @Test\n+    public void equivalent5() {\n@@ -139,1 +155,2 @@\n-    @Test public void equivalent6() {\n+    @Test\n+    public void equivalent6() {\n@@ -145,1 +162,2 @@\n-    @Test public void equivalentHasSameHashCode() {\n+    @Test\n+    public void equivalentHasSameHashCode() {\n@@ -151,1 +169,2 @@\n-    @Test public void equivalentHasSameHashCode2() {\n+    @Test\n+    public void equivalentHasSameHashCode2() {\n@@ -157,1 +176,2 @@\n-    @Test public void equivalentHasSameHashCode3() {\n+    @Test\n+    public void equivalentHasSameHashCode3() {\n@@ -163,1 +183,2 @@\n-    @Test public void equivalentHasSameHashCode4() {\n+    @Test\n+    public void equivalentHasSameHashCode4() {\n@@ -169,1 +190,2 @@\n-    @Test public void equivalentHasSameHashCode5() {\n+    @Test\n+    public void equivalentHasSameHashCode5() {\n@@ -175,1 +197,2 @@\n-    @Test public void equivalentHasSameHashCode6() {\n+    @Test\n+    public void equivalentHasSameHashCode6() {\n@@ -181,1 +204,2 @@\n-    @Test public void notEquivalent() {\n+    @Test\n+    public void notEquivalent() {\n@@ -187,1 +211,2 @@\n-    @Test public void notEquivalent2() {\n+    @Test\n+    public void notEquivalent2() {\n@@ -193,1 +218,2 @@\n-    @Test public void notEquivalent3() {\n+    @Test\n+    public void notEquivalent3() {\n@@ -199,1 +225,2 @@\n-    @Test public void notEquivalent4() {\n+    @Test\n+    public void notEquivalent4() {\n@@ -205,1 +232,2 @@\n-    @Test public void notEquivalent5() {\n+    @Test\n+    public void notEquivalent5() {\n@@ -211,1 +239,2 @@\n-    @Test public void notEquivalentWithNull() {\n+    @Test\n+    public void notEquivalentWithNull() {\n@@ -217,1 +246,2 @@\n-    @Test public void notEquivalentWithRandom() {\n+    @Test\n+    public void notEquivalentWithRandom() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BackgroundImageTest.java","additions":60,"deletions":30,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import org.junit.Test;\n@@ -32,1 +31,5 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -64,1 +67,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -66,1 +69,3 @@\n-        new BackgroundPosition(Side.TOP, 10, true, Side.BOTTOM, 20, true);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BackgroundPosition(Side.TOP, 10, true, Side.BOTTOM, 20, true);\n+        });\n@@ -69,1 +74,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -71,1 +76,3 @@\n-        new BackgroundPosition(Side.BOTTOM, 10, true, Side.BOTTOM, 20, true);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BackgroundPosition(Side.BOTTOM, 10, true, Side.BOTTOM, 20, true);\n+        });\n@@ -84,1 +91,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -86,1 +93,3 @@\n-        new BackgroundPosition(Side.LEFT, 10, true, Side.LEFT, 20, true);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BackgroundPosition(Side.LEFT, 10, true, Side.LEFT, 20, true);\n+        });\n@@ -89,1 +98,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -91,1 +100,3 @@\n-        new BackgroundPosition(Side.LEFT, 10, true, Side.RIGHT, 20, true);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BackgroundPosition(Side.LEFT, 10, true, Side.RIGHT, 20, true);\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BackgroundPositionTest.java","additions":22,"deletions":11,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import org.junit.Ignore;\n-import org.junit.Test;\n@@ -32,1 +30,6 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -37,1 +40,2 @@\n-    @Test public void instanceCreation() {\n+    @Test\n+    public void instanceCreation() {\n@@ -47,1 +51,2 @@\n-    @Test public void instanceCreation2() {\n+    @Test\n+    public void instanceCreation2() {\n@@ -57,1 +62,2 @@\n-    @Test public void instanceCreation3() {\n+    @Test\n+    public void instanceCreation3() {\n@@ -67,1 +73,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -69,1 +75,3 @@\n-        new BackgroundSize(-.2, 1, true, true, false, false);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BackgroundSize(-.2, 1, true, true, false, false);\n+        });\n@@ -72,1 +80,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -74,1 +82,3 @@\n-        new BackgroundSize(-2, 1, true, true, false, false);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BackgroundSize(-2, 1, true, true, false, false);\n+        });\n@@ -77,2 +87,2 @@\n-    @Ignore(\"JDK-8234090\")\n-    @Test(expected = IllegalArgumentException.class)\n+    @Disabled(\"JDK-8234090\")\n+    @Test\n@@ -80,1 +90,3 @@\n-        new BackgroundSize(Double.POSITIVE_INFINITY, 1, true, true, false, false);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BackgroundSize(Double.POSITIVE_INFINITY, 1, true, true, false, false);\n+        });\n@@ -83,2 +95,2 @@\n-    @Ignore(\"JDK-8234090\")\n-    @Test(expected = IllegalArgumentException.class)\n+    @Disabled(\"JDK-8234090\")\n+    @Test\n@@ -86,1 +98,3 @@\n-        new BackgroundSize(Double.NEGATIVE_INFINITY, 1, true, true, false, false);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BackgroundSize(Double.NEGATIVE_INFINITY, 1, true, true, false, false);\n+        });\n@@ -89,2 +103,2 @@\n-    @Ignore(\"JDK-8234090\")\n-    @Test(expected = IllegalArgumentException.class)\n+    @Disabled(\"JDK-8234090\")\n+    @Test\n@@ -92,1 +106,3 @@\n-        new BackgroundSize(Double.NaN, 1, true, true, false, false);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BackgroundSize(Double.NaN, 1, true, true, false, false);\n+        });\n@@ -95,1 +111,2 @@\n-    @Test public void negativeZeroWidthIsOK() {\n+    @Test\n+    public void negativeZeroWidthIsOK() {\n@@ -100,1 +117,2 @@\n-    @Test public void autoWidthIsOK() {\n+    @Test\n+    public void autoWidthIsOK() {\n@@ -105,1 +123,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -107,1 +125,3 @@\n-        new BackgroundSize(1, -.1, true, true, false, false);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BackgroundSize(1, -.1, true, true, false, false);\n+        });\n@@ -110,1 +130,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -112,1 +132,3 @@\n-        new BackgroundSize(1, -2, true, true, false, false);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BackgroundSize(1, -2, true, true, false, false);\n+        });\n@@ -115,2 +137,2 @@\n-    @Ignore(\"JDK-8234090\")\n-    @Test(expected = IllegalArgumentException.class)\n+    @Disabled(\"JDK-8234090\")\n+    @Test\n@@ -118,1 +140,3 @@\n-        new BackgroundSize(1, Double.POSITIVE_INFINITY, true, true, false, false);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BackgroundSize(1, Double.POSITIVE_INFINITY, true, true, false, false);\n+        });\n@@ -121,2 +145,2 @@\n-    @Ignore(\"JDK-8234090\")\n-    @Test(expected = IllegalArgumentException.class)\n+    @Disabled(\"JDK-8234090\")\n+    @Test\n@@ -124,1 +148,3 @@\n-        new BackgroundSize(1, Double.NEGATIVE_INFINITY, true, true, false, false);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BackgroundSize(1, Double.NEGATIVE_INFINITY, true, true, false, false);\n+        });\n@@ -127,2 +153,2 @@\n-    @Ignore(\"JDK-8234090\")\n-    @Test(expected = IllegalArgumentException.class)\n+    @Disabled(\"JDK-8234090\")\n+    @Test\n@@ -130,1 +156,3 @@\n-        new BackgroundSize(1, Double.NaN, true, true, false, false);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BackgroundSize(1, Double.NaN, true, true, false, false);\n+        });\n@@ -133,1 +161,2 @@\n-    @Test public void negativeZeroHeightIsOK() {\n+    @Test\n+    public void negativeZeroHeightIsOK() {\n@@ -138,1 +167,2 @@\n-    @Test public void autoHeightIsOK() {\n+    @Test\n+    public void autoHeightIsOK() {\n@@ -143,1 +173,2 @@\n-    @Test public void equivalent() {\n+    @Test\n+    public void equivalent() {\n@@ -149,1 +180,2 @@\n-    @Test public void equivalent2() {\n+    @Test\n+    public void equivalent2() {\n@@ -155,1 +187,2 @@\n-    @Test public void equivalent3() {\n+    @Test\n+    public void equivalent3() {\n@@ -161,1 +194,2 @@\n-    @Test public void equivalent4() {\n+    @Test\n+    public void equivalent4() {\n@@ -167,1 +201,2 @@\n-    @Test public void equivalent5() {\n+    @Test\n+    public void equivalent5() {\n@@ -173,1 +208,2 @@\n-    @Test public void equivalentHaveSameHashCode() {\n+    @Test\n+    public void equivalentHaveSameHashCode() {\n@@ -179,1 +215,2 @@\n-    @Test public void equivalentHaveSameHashCode2() {\n+    @Test\n+    public void equivalentHaveSameHashCode2() {\n@@ -185,1 +222,2 @@\n-    @Test public void equivalentHaveSameHashCode3() {\n+    @Test\n+    public void equivalentHaveSameHashCode3() {\n@@ -191,1 +229,2 @@\n-    @Test public void equivalentHaveSameHashCode4() {\n+    @Test\n+    public void equivalentHaveSameHashCode4() {\n@@ -197,1 +236,2 @@\n-    @Test public void equivalentHaveSameHashCode5() {\n+    @Test\n+    public void equivalentHaveSameHashCode5() {\n@@ -203,1 +243,2 @@\n-    @Test public void notEquivalent() {\n+    @Test\n+    public void notEquivalent() {\n@@ -209,1 +250,2 @@\n-    @Test public void notEquivalent2() {\n+    @Test\n+    public void notEquivalent2() {\n@@ -215,1 +257,2 @@\n-    @Test public void notEquivalent3() {\n+    @Test\n+    public void notEquivalent3() {\n@@ -221,1 +264,2 @@\n-    @Test public void notEquivalent4() {\n+    @Test\n+    public void notEquivalent4() {\n@@ -227,1 +271,2 @@\n-    @Test public void notEquivalent5() {\n+    @Test\n+    public void notEquivalent5() {\n@@ -233,1 +278,2 @@\n-    @Test public void notEquivalent6() {\n+    @Test\n+    public void notEquivalent6() {\n@@ -239,1 +285,2 @@\n-    @Test public void notEqualToNull() {\n+    @Test\n+    public void notEqualToNull() {\n@@ -245,1 +292,2 @@\n-    @Test public void notEqualToRandom() {\n+    @Test\n+    public void notEqualToRandom() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BackgroundSizeTest.java","additions":103,"deletions":55,"binary":false,"changes":158,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.junit.Test;\n@@ -41,1 +40,7 @@\n-import static org.junit.Assert.*;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -69,1 +74,2 @@\n-    @Test public void instanceCreation() {\n+    @Test\n+    public void instanceCreation() {\n@@ -77,1 +83,2 @@\n-    @Test public void instanceCreation2() {\n+    @Test\n+    public void instanceCreation2() {\n@@ -88,1 +95,2 @@\n-    @Test public void instanceCreationNullFills() {\n+    @Test\n+    public void instanceCreationNullFills() {\n@@ -95,1 +103,2 @@\n-    @Test public void instanceCreationEmptyFills() {\n+    @Test\n+    public void instanceCreationEmptyFills() {\n@@ -102,1 +111,2 @@\n-    @Test public void instanceCreationNullImages() {\n+    @Test\n+    public void instanceCreationNullImages() {\n@@ -109,1 +119,2 @@\n-    @Test public void instanceCreationEmptyImages() {\n+    @Test\n+    public void instanceCreationEmptyImages() {\n@@ -116,1 +127,2 @@\n-    @Test public void instanceCreationWithNullsInTheFillArray() {\n+    @Test\n+    public void instanceCreationWithNullsInTheFillArray() {\n@@ -128,1 +140,2 @@\n-    @Test public void instanceCreationWithNullsInTheFillArray2() {\n+    @Test\n+    public void instanceCreationWithNullsInTheFillArray2() {\n@@ -140,1 +153,2 @@\n-    @Test public void instanceCreationWithNullsInTheFillArray3() {\n+    @Test\n+    public void instanceCreationWithNullsInTheFillArray3() {\n@@ -152,1 +166,2 @@\n-    @Test public void instanceCreationWithNullsInTheFillArray4() {\n+    @Test\n+    public void instanceCreationWithNullsInTheFillArray4() {\n@@ -160,1 +175,2 @@\n-    @Test public void instanceCreationWithNullsInTheImageArray() {\n+    @Test\n+    public void instanceCreationWithNullsInTheImageArray() {\n@@ -174,1 +190,2 @@\n-    @Test public void instanceCreationWithNullsInTheImageArray2() {\n+    @Test\n+    public void instanceCreationWithNullsInTheImageArray2() {\n@@ -188,1 +205,2 @@\n-    @Test public void instanceCreationWithNullsInTheImageArray3() {\n+    @Test\n+    public void instanceCreationWithNullsInTheImageArray3() {\n@@ -202,1 +220,2 @@\n-    @Test public void instanceCreationWithNullsInTheImageArray4() {\n+    @Test\n+    public void instanceCreationWithNullsInTheImageArray4() {\n@@ -210,1 +229,2 @@\n-    @Test public void suppliedBackgroundFillsMutatedLaterDoNotChangeFills() {\n+    @Test\n+    public void suppliedBackgroundFillsMutatedLaterDoNotChangeFills() {\n@@ -222,1 +242,2 @@\n-    @Test public void suppliedBackgroundImagesMutatedLaterDoNotChangeImages() {\n+    @Test\n+    public void suppliedBackgroundImagesMutatedLaterDoNotChangeImages() {\n@@ -234,1 +255,1 @@\n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n@@ -236,4 +257,6 @@\n-        final BackgroundFill fill = new BackgroundFill(Color.GREEN, new CornerRadii(3), new Insets(4));\n-        final BackgroundFill[] fills = new BackgroundFill[] { fill };\n-        Background b = new Background(fills);\n-        b.getFills().add(new BackgroundFill(Color.BLUE, new CornerRadii(6), new Insets(8)));\n+        assertThrows(UnsupportedOperationException.class, () -> {\n+            final BackgroundFill fill = new BackgroundFill(Color.GREEN, new CornerRadii(3), new Insets(4));\n+            final BackgroundFill[] fills = new BackgroundFill[] { fill };\n+            Background b = new Background(fills);\n+            b.getFills().add(new BackgroundFill(Color.BLUE, new CornerRadii(6), new Insets(8)));\n+        });\n@@ -242,1 +265,1 @@\n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n@@ -244,4 +267,6 @@\n-        final BackgroundImage image = new BackgroundImage(IMAGE_2, SPACE, SPACE, null, null);\n-        final BackgroundImage[] images = new BackgroundImage[] { image };\n-        Background b = new Background(images);\n-        b.getImages().add(new BackgroundImage(IMAGE_3, ROUND, ROUND, null, null));\n+        assertThrows(UnsupportedOperationException.class, () -> {\n+            final BackgroundImage image = new BackgroundImage(IMAGE_2, SPACE, SPACE, null, null);\n+            final BackgroundImage[] images = new BackgroundImage[] { image };\n+            Background b = new Background(images);\n+            b.getImages().add(new BackgroundImage(IMAGE_3, ROUND, ROUND, null, null));\n+        });\n@@ -250,1 +275,2 @@\n-    @Test public void backgroundOutsetsAreDefinedByFills() {\n+    @Test\n+    public void backgroundOutsetsAreDefinedByFills() {\n@@ -265,1 +291,2 @@\n-    @Test public void backgroundImagesDoNotContributeToOutsets() {\n+    @Test\n+    public void backgroundImagesDoNotContributeToOutsets() {\n@@ -276,1 +303,2 @@\n-    @Test public void equivalent() {\n+    @Test\n+    public void equivalent() {\n@@ -282,1 +310,2 @@\n-    @Test public void equivalent2() {\n+    @Test\n+    public void equivalent2() {\n@@ -288,1 +317,2 @@\n-    @Test public void equivalent3() {\n+    @Test\n+    public void equivalent3() {\n@@ -294,1 +324,2 @@\n-    @Test public void equivalentHasSameHashCode() {\n+    @Test\n+    public void equivalentHasSameHashCode() {\n@@ -300,1 +331,2 @@\n-    @Test public void equivalentHasSameHashCode2() {\n+    @Test\n+    public void equivalentHasSameHashCode2() {\n@@ -306,1 +338,2 @@\n-    @Test public void equivalentHasSameHashCode3() {\n+    @Test\n+    public void equivalentHasSameHashCode3() {\n@@ -312,1 +345,2 @@\n-    @Test public void notEqual() {\n+    @Test\n+    public void notEqual() {\n@@ -318,1 +352,2 @@\n-    @Test public void notEqual2() {\n+    @Test\n+    public void notEqual2() {\n@@ -324,1 +359,2 @@\n-    @Test public void notEqual3() {\n+    @Test\n+    public void notEqual3() {\n@@ -330,1 +366,2 @@\n-    @Test public void notEqual4() {\n+    @Test\n+    public void notEqual4() {\n@@ -336,1 +373,2 @@\n-    @Test public void notEqualWithNull() {\n+    @Test\n+    public void notEqualWithNull() {\n@@ -342,1 +380,2 @@\n-    @Test public void notEqualWithRandom() {\n+    @Test\n+    public void notEqualWithRandom() {\n@@ -354,1 +393,2 @@\n-    @Test public void opaqueInsets_nullFillsResultsInNaN() {\n+    @Test\n+    public void opaqueInsets_nullFillsResultsInNaN() {\n@@ -364,1 +404,2 @@\n-    @Test public void opaqueInsets_transparentFillsResultsInNaN() {\n+    @Test\n+    public void opaqueInsets_transparentFillsResultsInNaN() {\n@@ -375,1 +416,2 @@\n-    @Test public void opaqueInsets_transparentFillsResultsInNaN2() {\n+    @Test\n+    public void opaqueInsets_transparentFillsResultsInNaN2() {\n@@ -386,1 +428,2 @@\n-    @Test public void opaqueInsets_transparentFillsResultsInNaN3() {\n+    @Test\n+    public void opaqueInsets_transparentFillsResultsInNaN3() {\n@@ -398,1 +441,2 @@\n-    @Test public void opaqueInsets_transparentFillsMixedWithNonTransparentFills() {\n+    @Test\n+    public void opaqueInsets_transparentFillsMixedWithNonTransparentFills() {\n@@ -410,1 +454,2 @@\n-    @Test public void opaqueInsets_transparentFillsMixedWithNonTransparentFills2() {\n+    @Test\n+    public void opaqueInsets_transparentFillsMixedWithNonTransparentFills2() {\n@@ -422,1 +467,2 @@\n-    @Test public void opaqueInsets_nestedOpaqueRectangles_LargestRectangleUsed() {\n+    @Test\n+    public void opaqueInsets_nestedOpaqueRectangles_LargestRectangleUsed() {\n@@ -435,1 +481,2 @@\n-    @Test public void opaqueInsets_nestedOpaqueRectangles_LargestRectangleUsed2() {\n+    @Test\n+    public void opaqueInsets_nestedOpaqueRectangles_LargestRectangleUsed2() {\n@@ -448,1 +495,2 @@\n-    @Test public void opaqueInsets_nestedOpaqueRectangles_LargestRectangleUsed3() {\n+    @Test\n+    public void opaqueInsets_nestedOpaqueRectangles_LargestRectangleUsed3() {\n@@ -461,1 +509,2 @@\n-    @Test public void opaqueInsets_nestedOpaqueRectangles_LargestRectangleUsed4() {\n+    @Test\n+    public void opaqueInsets_nestedOpaqueRectangles_LargestRectangleUsed4() {\n@@ -474,1 +523,2 @@\n-    @Test public void opaqueInsets_offsetOpaqueRectangles_completelyContained_LargestRectangleUsed() {\n+    @Test\n+    public void opaqueInsets_offsetOpaqueRectangles_completelyContained_LargestRectangleUsed() {\n@@ -490,1 +540,2 @@\n-    @Test public void opaqueInsets_offsetOpaqueRectangles_completelyContained_LargestRectangleUsed2() {\n+    @Test\n+    public void opaqueInsets_offsetOpaqueRectangles_completelyContained_LargestRectangleUsed2() {\n@@ -505,1 +556,2 @@\n-    @Test public void opaqueInsets_offsetOpaqueRectangles_UnionUsed() {\n+    @Test\n+    public void opaqueInsets_offsetOpaqueRectangles_UnionUsed() {\n@@ -519,1 +571,2 @@\n-    @Test public void opaqueInsets_offsetOpaqueRectangles_UnionUsed2() {\n+    @Test\n+    public void opaqueInsets_offsetOpaqueRectangles_UnionUsed2() {\n@@ -537,1 +590,2 @@\n-    @Test public void opaqueInsets_offsetOpaqueRectangles_LargestUsed() {\n+    @Test\n+    public void opaqueInsets_offsetOpaqueRectangles_LargestUsed() {\n@@ -553,1 +607,2 @@\n-    @Test public void opaqueInsets_uniformCornerRadii() {\n+    @Test\n+    public void opaqueInsets_uniformCornerRadii() {\n@@ -564,1 +619,2 @@\n-    @Test public void opaqueInsets_nonUniformCornerRadii() {\n+    @Test\n+    public void opaqueInsets_nonUniformCornerRadii() {\n@@ -575,1 +631,2 @@\n-    @Test public void opaqueInsets_nonUniformCornerRadii2() {\n+    @Test\n+    public void opaqueInsets_nonUniformCornerRadii2() {\n@@ -588,1 +645,2 @@\n-    @Test public void opaqueInsetsPercent_uniformCornerRadii() {\n+    @Test\n+    public void opaqueInsetsPercent_uniformCornerRadii() {\n@@ -599,1 +657,2 @@\n-    @Test public void opaqueInsetsPercent_nonUniformCornerRadii() {\n+    @Test\n+    public void opaqueInsetsPercent_nonUniformCornerRadii() {\n@@ -610,1 +669,2 @@\n-    @Test public void opaqueInsetsPercent_nonUniformCornerRadii2() {\n+    @Test\n+    public void opaqueInsetsPercent_nonUniformCornerRadii2() {\n@@ -623,1 +683,2 @@\n-    @Test public void opaqueInsetsPercent_nonUniformCornerRadii3() {\n+    @Test\n+    public void opaqueInsetsPercent_nonUniformCornerRadii3() {\n@@ -636,1 +697,2 @@\n-    @Test public void opaqueInsetsPercent_nonUniformCornerRadii4() {\n+    @Test\n+    public void opaqueInsetsPercent_nonUniformCornerRadii4() {\n@@ -649,1 +711,2 @@\n-    @Test public void backgroundFillsArePercentageBased_AllPercentageBased() {\n+    @Test\n+    public void backgroundFillsArePercentageBased_AllPercentageBased() {\n@@ -658,1 +721,2 @@\n-    @Test public void backgroundFillsArePercentageBased_OnePercentageBased() {\n+    @Test\n+    public void backgroundFillsArePercentageBased_OnePercentageBased() {\n@@ -667,1 +731,2 @@\n-    @Test public void backgroundFillsArePercentageBased_OneCornerOfOne() {\n+    @Test\n+    public void backgroundFillsArePercentageBased_OneCornerOfOne() {\n@@ -677,1 +742,2 @@\n-    @Test public void backgroundFillsAreNotPercentageBased() {\n+    @Test\n+    public void backgroundFillsAreNotPercentageBased() {\n@@ -686,1 +752,2 @@\n-    @Test public void backgroundFillsAreNotPercentageBased_NoFills() {\n+    @Test\n+    public void backgroundFillsAreNotPercentageBased_NoFills() {\n@@ -691,1 +758,2 @@\n-    @Test public void backgroundFillsAreNotPercentageBased_NullRadii() {\n+    @Test\n+    public void backgroundFillsAreNotPercentageBased_NullRadii() {\n@@ -700,1 +768,2 @@\n-    @Test public void backgroundFillsAreNotPercentageBased_OneEmpty() {\n+    @Test\n+    public void backgroundFillsAreNotPercentageBased_OneEmpty() {\n@@ -709,1 +778,2 @@\n-    @Test public void backgroundFillsAreNotPercentageBased_AllEmpty() {\n+    @Test\n+    public void backgroundFillsAreNotPercentageBased_AllEmpty() {\n@@ -719,1 +789,1 @@\n-    public void testSingleFill() {\n+        public void testSingleFill() {\n@@ -722,1 +792,1 @@\n-        assertEquals(\"The factory method should give the same result as the constructor\", background1, background2);\n+        assertEquals(background1, background2, \"The factory method should give the same result as the constructor\");\n@@ -726,1 +796,1 @@\n-    public void testSingleFillWithNullPaint() {\n+        public void testSingleFillWithNullPaint() {\n@@ -729,1 +799,1 @@\n-        assertEquals(\"The factory method should give the same result as the constructor\", background1, background2);\n+        assertEquals(background1, background2, \"The factory method should give the same result as the constructor\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BackgroundTest.java","additions":148,"deletions":78,"binary":false,"changes":226,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -34,1 +33,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -44,1 +44,2 @@\n-    @Test public void testShapeBaselineAtBottom() {\n+    @Test\n+    public void testShapeBaselineAtBottom() {\n@@ -49,1 +50,2 @@\n-    @Test public void testTextBaseline() {\n+    @Test\n+    public void testTextBaseline() {\n@@ -55,1 +57,2 @@\n-    @Test public void testParentBaselineMatchesFirstChild() {\n+    @Test\n+    public void testParentBaselineMatchesFirstChild() {\n@@ -61,1 +64,2 @@\n-    @Test public void testParentBaselineIgnoresUnmanagedChild() {\n+    @Test\n+    public void testParentBaselineIgnoresUnmanagedChild() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BaselineTest.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import static org.junit.Assert.*;\n@@ -33,1 +32,0 @@\n-import org.junit.Before;\n@@ -35,1 +33,6 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -42,1 +45,2 @@\n-    @Before public void setUp() {\n+    @BeforeEach\n+    public void setUp() {\n@@ -46,1 +50,2 @@\n-    @Test public void testEmptyBorderPane() {\n+    @Test\n+    public void testEmptyBorderPane() {\n@@ -54,1 +59,2 @@\n-    @Test public void testChildrenRemovedDirectly() {\n+    @Test\n+    public void testChildrenRemovedDirectly() {\n@@ -144,1 +150,2 @@\n-    @Test public void testCenterChildOnly() {\n+    @Test\n+    public void testCenterChildOnly() {\n@@ -167,1 +174,2 @@\n-    @Test public void testTopChildOnly() {\n+    @Test\n+    public void testTopChildOnly() {\n@@ -189,1 +197,2 @@\n-    @Test public void testBottomChildOnly() {\n+    @Test\n+    public void testBottomChildOnly() {\n@@ -211,1 +220,2 @@\n-    @Test public void testRightChildOnly() {\n+    @Test\n+    public void testRightChildOnly() {\n@@ -233,1 +243,2 @@\n-    @Test public void testLeftChildOnly() {\n+    @Test\n+    public void testLeftChildOnly() {\n@@ -255,1 +266,2 @@\n-    @Test public void testChildrenInAllPositions() {\n+    @Test\n+    public void testChildrenInAllPositions() {\n@@ -317,1 +329,2 @@\n-    @Test public void testWithBiasedChildren() {\n+    @Test\n+    public void testWithBiasedChildren() {\n@@ -377,1 +390,2 @@\n-    @Test public void testWithHorizontalBiasedChildrenAtPrefSize() {\n+    @Test\n+    public void testWithHorizontalBiasedChildrenAtPrefSize() {\n@@ -426,1 +440,2 @@\n-    @Test public void testWithHorizontalBiasedChildrenGrowing() {\n+    @Test\n+    public void testWithHorizontalBiasedChildrenGrowing() {\n@@ -473,1 +488,2 @@\n-    @Test public void testWithHorizontalBiasedChildrenShrinking() {\n+    @Test\n+    public void testWithHorizontalBiasedChildrenShrinking() {\n@@ -519,1 +535,2 @@\n-    @Test public void testWithVerticalBiasedChildrenAtPrefSize() {\n+    @Test\n+    public void testWithVerticalBiasedChildrenAtPrefSize() {\n@@ -568,1 +585,2 @@\n-    @Test public void testWithVerticalBiasedChildrenGrowing() {\n+    @Test\n+    public void testWithVerticalBiasedChildrenGrowing() {\n@@ -618,1 +636,2 @@\n-    @Test public void testWithVerticalBiasedChildrenShrinking() {\n+    @Test\n+    public void testWithVerticalBiasedChildrenShrinking() {\n@@ -699,1 +718,2 @@\n-    @Test public void testFitsTopChildWithinBounds() {\n+    @Test\n+    public void testFitsTopChildWithinBounds() {\n@@ -710,1 +730,2 @@\n-    @Test public void testFitsBottomChildWithinBounds() {\n+    @Test\n+    public void testFitsBottomChildWithinBounds() {\n@@ -721,1 +742,2 @@\n-    @Test public void testFitsLeftChildWithinBounds() {\n+    @Test\n+    public void testFitsLeftChildWithinBounds() {\n@@ -732,1 +754,2 @@\n-    @Test public void testFitsRightChildWithinBounds() {\n+    @Test\n+    public void testFitsRightChildWithinBounds() {\n@@ -743,1 +766,2 @@\n-    @Test public void testFitsCenterChildWithinBounds() {\n+    @Test\n+    public void testFitsCenterChildWithinBounds() {\n@@ -754,1 +778,2 @@\n-    @Test public void testFitsAllChildrenWithinBounds() {\n+    @Test\n+    public void testFitsAllChildrenWithinBounds() {\n@@ -792,1 +817,2 @@\n-    @Test public void testTopChildWithMargin() {\n+    @Test\n+    public void testTopChildWithMargin() {\n@@ -820,1 +846,2 @@\n-    @Test public void testBottomChildWithMargin() {\n+    @Test\n+    public void testBottomChildWithMargin() {\n@@ -846,1 +873,2 @@\n-    @Test public void testLeftChildWithMargin() {\n+    @Test\n+    public void testLeftChildWithMargin() {\n@@ -872,1 +900,2 @@\n-    @Test public void testRightChildWithMargin() {\n+    @Test\n+    public void testRightChildWithMargin() {\n@@ -898,1 +927,2 @@\n-    @Test public void testCenterChildWithMargin() {\n+    @Test\n+    public void testCenterChildWithMargin() {\n@@ -919,1 +949,1 @@\n-    public void testResizeBelowMinimum() {\n+        public void testResizeBelowMinimum() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BorderPaneTest.java","additions":62,"deletions":32,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.junit.Test;\n@@ -36,1 +35,4 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -41,1 +43,2 @@\n-    @Test public void instanceCreation() {\n+    @Test\n+    public void instanceCreation() {\n@@ -51,1 +54,2 @@\n-    @Test public void instanceCreation2() {\n+    @Test\n+    public void instanceCreation2() {\n@@ -67,1 +71,1 @@\n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n@@ -69,2 +73,4 @@\n-        BorderStrokeStyle style = new BorderStrokeStyle(null, null, null, 10, 2, null);\n-        style.getDashArray().add(1.0);\n+        assertThrows(UnsupportedOperationException.class, () -> {\n+            BorderStrokeStyle style = new BorderStrokeStyle(null, null, null, 10, 2, null);\n+            style.getDashArray().add(1.0);\n+        });\n@@ -73,1 +79,2 @@\n-    @Test public void changesToDashArrayPassedToConstructorHaveNoEffect() {\n+    @Test\n+    public void changesToDashArrayPassedToConstructorHaveNoEffect() {\n@@ -80,1 +87,2 @@\n-    @Test public void identity() {\n+    @Test\n+    public void identity() {\n@@ -86,1 +94,2 @@\n-    @Test public void equality() {\n+    @Test\n+    public void equality() {\n@@ -93,1 +102,2 @@\n-    @Test public void equality2() {\n+    @Test\n+    public void equality2() {\n@@ -100,1 +110,2 @@\n-    @Test public void equality3() {\n+    @Test\n+    public void equality3() {\n@@ -107,1 +118,2 @@\n-    @Test public void equality4() {\n+    @Test\n+    public void equality4() {\n@@ -114,1 +126,2 @@\n-    @Test public void equality5() {\n+    @Test\n+    public void equality5() {\n@@ -129,1 +142,2 @@\n-    @Test public void notEqual() {\n+    @Test\n+    public void notEqual() {\n@@ -135,1 +149,2 @@\n-    @Test public void notEqual2() {\n+    @Test\n+    public void notEqual2() {\n@@ -141,1 +156,2 @@\n-    @Test public void notEqual3() {\n+    @Test\n+    public void notEqual3() {\n@@ -147,1 +163,2 @@\n-    @Test public void notEqual4() {\n+    @Test\n+    public void notEqual4() {\n@@ -153,1 +170,2 @@\n-    @Test public void notEqual5() {\n+    @Test\n+    public void notEqual5() {\n@@ -159,1 +177,2 @@\n-    @Test public void notEqual6() {\n+    @Test\n+    public void notEqual6() {\n@@ -168,1 +187,2 @@\n-    @Test public void notEqualWithNull() {\n+    @Test\n+    public void notEqualWithNull() {\n@@ -174,1 +194,2 @@\n-    @Test public void notEqualWithRandom() {\n+    @Test\n+    public void notEqualWithRandom() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BorderStrokeStyleTest.java","additions":44,"deletions":23,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -35,1 +35,2 @@\n-    @Test public void dummy() { }\n+    @Test\n+    public void dummy() { }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BorderStrokeTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,0 @@\n-import org.junit.Test;\n-\n@@ -42,1 +40,7 @@\n-import static org.junit.Assert.*;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -71,1 +75,2 @@\n-    @Test public void instanceCreation() {\n+    @Test\n+    public void instanceCreation() {\n@@ -79,1 +84,2 @@\n-    @Test public void instanceCreation2() {\n+    @Test\n+    public void instanceCreation2() {\n@@ -90,1 +96,2 @@\n-    @Test public void instanceCreationNullstrokes() {\n+    @Test\n+    public void instanceCreationNullstrokes() {\n@@ -97,1 +104,2 @@\n-    @Test public void instanceCreationEmptystrokes() {\n+    @Test\n+    public void instanceCreationEmptystrokes() {\n@@ -104,1 +112,2 @@\n-    @Test public void instanceCreationNullImages() {\n+    @Test\n+    public void instanceCreationNullImages() {\n@@ -111,1 +120,2 @@\n-    @Test public void instanceCreationEmptyImages() {\n+    @Test\n+    public void instanceCreationEmptyImages() {\n@@ -118,1 +128,2 @@\n-    @Test public void instanceCreationWithNullsInTheFillArray() {\n+    @Test\n+    public void instanceCreationWithNullsInTheFillArray() {\n@@ -130,1 +141,2 @@\n-    @Test public void instanceCreationWithNullsInTheFillArray2() {\n+    @Test\n+    public void instanceCreationWithNullsInTheFillArray2() {\n@@ -142,1 +154,2 @@\n-    @Test public void instanceCreationWithNullsInTheFillArray3() {\n+    @Test\n+    public void instanceCreationWithNullsInTheFillArray3() {\n@@ -154,1 +167,2 @@\n-    @Test public void instanceCreationWithNullsInTheFillArray4() {\n+    @Test\n+    public void instanceCreationWithNullsInTheFillArray4() {\n@@ -162,1 +176,2 @@\n-    @Test public void instanceCreationWithNullsInTheImageArray() {\n+    @Test\n+    public void instanceCreationWithNullsInTheImageArray() {\n@@ -176,1 +191,2 @@\n-    @Test public void instanceCreationWithNullsInTheImageArray2() {\n+    @Test\n+    public void instanceCreationWithNullsInTheImageArray2() {\n@@ -190,1 +206,2 @@\n-    @Test public void instanceCreationWithNullsInTheImageArray3() {\n+    @Test\n+    public void instanceCreationWithNullsInTheImageArray3() {\n@@ -204,1 +221,2 @@\n-    @Test public void instanceCreationWithNullsInTheImageArray4() {\n+    @Test\n+    public void instanceCreationWithNullsInTheImageArray4() {\n@@ -212,1 +230,2 @@\n-    @Test public void suppliedBorderStrokesMutatedLaterDoNotChangeStrokes() {\n+    @Test\n+    public void suppliedBorderStrokesMutatedLaterDoNotChangeStrokes() {\n@@ -224,1 +243,2 @@\n-    @Test public void suppliedBorderImagesMutatedLaterDoNotChangeImages() {\n+    @Test\n+    public void suppliedBorderImagesMutatedLaterDoNotChangeImages() {\n@@ -237,1 +257,1 @@\n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n@@ -239,4 +259,6 @@\n-        final BorderStroke stroke = new BorderStroke(Color.GREEN, BorderStrokeStyle.SOLID, new CornerRadii(3), new BorderWidths(4));\n-        final BorderStroke[] strokes = new BorderStroke[] { stroke };\n-        Border b = new Border(strokes);\n-        b.getStrokes().add(new BorderStroke(Color.BLUE, BorderStrokeStyle.SOLID, new CornerRadii(6), new BorderWidths(8)));\n+        assertThrows(UnsupportedOperationException.class, () -> {\n+            final BorderStroke stroke = new BorderStroke(Color.GREEN, BorderStrokeStyle.SOLID, new CornerRadii(3), new BorderWidths(4));\n+            final BorderStroke[] strokes = new BorderStroke[] { stroke };\n+            Border b = new Border(strokes);\n+            b.getStrokes().add(new BorderStroke(Color.BLUE, BorderStrokeStyle.SOLID, new CornerRadii(6), new BorderWidths(8)));\n+        });\n@@ -245,1 +267,1 @@\n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n@@ -247,8 +269,10 @@\n-        final BorderImage image = new BorderImage(IMAGE_2, new BorderWidths(3), new Insets(4),\n-                                                  BorderWidths.EMPTY, false, REPEAT, REPEAT);\n-        final BorderImage[] images = new BorderImage[] { image };\n-        Border b = new Border(images);\n-        b.getImages().add(\n-                new BorderImage(\n-                        IMAGE_4, new BorderWidths(3), Insets.EMPTY,\n-                        new BorderWidths(3, 4, 5, 6), true, STRETCH, SPACE));\n+        assertThrows(UnsupportedOperationException.class, () -> {\n+            final BorderImage image = new BorderImage(IMAGE_2, new BorderWidths(3), new Insets(4),\n+                                                      BorderWidths.EMPTY, false, REPEAT, REPEAT);\n+            final BorderImage[] images = new BorderImage[] { image };\n+            Border b = new Border(images);\n+            b.getImages().add(\n+                    new BorderImage(\n+                            IMAGE_4, new BorderWidths(3), Insets.EMPTY,\n+                            new BorderWidths(3, 4, 5, 6), true, STRETCH, SPACE));\n+        });\n@@ -257,1 +281,2 @@\n-    @Test public void insetsAndOutsets_twoPixelOuterStroke() {\n+    @Test\n+    public void insetsAndOutsets_twoPixelOuterStroke() {\n@@ -268,1 +293,2 @@\n-    @Test public void insetsAndOutsets_singlePixelOuterStroke() {\n+    @Test\n+    public void insetsAndOutsets_singlePixelOuterStroke() {\n@@ -279,1 +305,2 @@\n-    @Test public void insetsAndOutsets_singlePixelCenteredStroke() {\n+    @Test\n+    public void insetsAndOutsets_singlePixelCenteredStroke() {\n@@ -290,1 +317,2 @@\n-    @Test public void insetsAndOutsets_singlePixelInnerStroke() {\n+    @Test\n+    public void insetsAndOutsets_singlePixelInnerStroke() {\n@@ -301,1 +329,2 @@\n-    @Test public void insetsAndOutsets_twoPixelOuterStroke_PositiveInsets() {\n+    @Test\n+    public void insetsAndOutsets_twoPixelOuterStroke_PositiveInsets() {\n@@ -309,1 +338,2 @@\n-    @Test public void insetsAndOutsets_singlePixelOuterStroke_PositiveInsets() {\n+    @Test\n+    public void insetsAndOutsets_singlePixelOuterStroke_PositiveInsets() {\n@@ -317,1 +347,2 @@\n-    @Test public void insetsAndOutsets_singlePixelCenteredStroke_PositiveInsets() {\n+    @Test\n+    public void insetsAndOutsets_singlePixelCenteredStroke_PositiveInsets() {\n@@ -325,1 +356,2 @@\n-    @Test public void insetsAndOutsets_singlePixelInnerStroke_PositiveInsets() {\n+    @Test\n+    public void insetsAndOutsets_singlePixelInnerStroke_PositiveInsets() {\n@@ -333,1 +365,2 @@\n-    @Test public void insetsAndOutsets_twoPixelOuterStroke_NegativeInsets() {\n+    @Test\n+    public void insetsAndOutsets_twoPixelOuterStroke_NegativeInsets() {\n@@ -341,1 +374,2 @@\n-    @Test public void insetsAndOutsets_singlePixelOuterStroke_NegativeInsets() {\n+    @Test\n+    public void insetsAndOutsets_singlePixelOuterStroke_NegativeInsets() {\n@@ -349,1 +383,2 @@\n-    @Test public void insetsAndOutsets_singlePixelCenteredStroke_NegativeInsets() {\n+    @Test\n+    public void insetsAndOutsets_singlePixelCenteredStroke_NegativeInsets() {\n@@ -357,1 +392,2 @@\n-    @Test public void insetsAndOutsets_singlePixelInnerStroke_NegativeInsets() {\n+    @Test\n+    public void insetsAndOutsets_singlePixelInnerStroke_NegativeInsets() {\n@@ -365,1 +401,2 @@\n-    @Test public void insetsAndOutsets_singlePixelImageWidthNoInsets() {\n+    @Test\n+    public void insetsAndOutsets_singlePixelImageWidthNoInsets() {\n@@ -372,1 +409,2 @@\n-    @Test public void insetsAndOutsets_singlePixelImageWidthWithPositiveInsets() {\n+    @Test\n+    public void insetsAndOutsets_singlePixelImageWidthWithPositiveInsets() {\n@@ -379,1 +417,2 @@\n-    @Test public void insetsAndOutsets_singlePixelImageWidthWithNegativeInsets() {\n+    @Test\n+    public void insetsAndOutsets_singlePixelImageWidthWithNegativeInsets() {\n@@ -386,1 +425,2 @@\n-    @Test public void insetsAndOutsets_triplePixelImageWidthWithNegativeInsets() {\n+    @Test\n+    public void insetsAndOutsets_triplePixelImageWidthWithNegativeInsets() {\n@@ -393,1 +433,2 @@\n-    @Test public void equivalent() {\n+    @Test\n+    public void equivalent() {\n@@ -399,1 +440,2 @@\n-    @Test public void equivalent2() {\n+    @Test\n+    public void equivalent2() {\n@@ -405,1 +447,2 @@\n-    @Test public void equivalent2b() {\n+    @Test\n+    public void equivalent2b() {\n@@ -417,1 +460,2 @@\n-    @Test public void equivalent2c() {\n+    @Test\n+    public void equivalent2c() {\n@@ -427,1 +471,2 @@\n-    @Test public void equivalent3() {\n+    @Test\n+    public void equivalent3() {\n@@ -433,1 +478,2 @@\n-    @Test public void equivalent3b() {\n+    @Test\n+    public void equivalent3b() {\n@@ -444,1 +490,2 @@\n-    @Test public void equivalent3c() {\n+    @Test\n+    public void equivalent3c() {\n@@ -455,1 +502,2 @@\n-    @Test public void equivalentWithSelf() {\n+    @Test\n+    public void equivalentWithSelf() {\n@@ -460,1 +508,2 @@\n-    @Test public void equivalentHasSameHashCode() {\n+    @Test\n+    public void equivalentHasSameHashCode() {\n@@ -466,1 +515,2 @@\n-    @Test public void equivalentHasSameHashCode2() {\n+    @Test\n+    public void equivalentHasSameHashCode2() {\n@@ -472,1 +522,2 @@\n-    @Test public void equivalentHasSameHashCode3() {\n+    @Test\n+    public void equivalentHasSameHashCode3() {\n@@ -478,1 +529,2 @@\n-    @Test public void equivalentWithSelfHashCode() {\n+    @Test\n+    public void equivalentWithSelfHashCode() {\n@@ -483,1 +535,2 @@\n-    @Test public void notEqual() {\n+    @Test\n+    public void notEqual() {\n@@ -489,1 +542,2 @@\n-    @Test public void notEqual2() {\n+    @Test\n+    public void notEqual2() {\n@@ -495,1 +549,2 @@\n-    @Test public void notEqual3() {\n+    @Test\n+    public void notEqual3() {\n@@ -501,1 +556,2 @@\n-    @Test public void notEqual4() {\n+    @Test\n+    public void notEqual4() {\n@@ -507,1 +563,2 @@\n-    @Test public void notEqual5() {\n+    @Test\n+    public void notEqual5() {\n@@ -513,1 +570,2 @@\n-    @Test public void notEqual6() {\n+    @Test\n+    public void notEqual6() {\n@@ -519,1 +577,2 @@\n-    @Test public void notEqualButHaveSameHashCode() {\n+    @Test\n+    public void notEqualButHaveSameHashCode() {\n@@ -537,1 +596,2 @@\n-    @Test public void notEqualButHaveSameHashCode2() {\n+    @Test\n+    public void notEqualButHaveSameHashCode2() {\n@@ -555,1 +615,2 @@\n-    @Test public void notEqualWithNull() {\n+    @Test\n+    public void notEqualWithNull() {\n@@ -561,1 +622,2 @@\n-    @Test public void notEqualWithRandom() {\n+    @Test\n+    public void notEqualWithRandom() {\n@@ -570,1 +632,1 @@\n-        assertEquals(\"The factory method should give the same result as the constructor\", border2, border1);\n+        assertEquals(border2, border1, \"The factory method should give the same result as the constructor\");\n@@ -577,1 +639,1 @@\n-        assertEquals(\"The factory method should give the same result as the constructor\", border2, border1);\n+        assertEquals(border2, border1, \"The factory method should give the same result as the constructor\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BorderTest.java","additions":136,"deletions":74,"binary":false,"changes":210,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import org.junit.Test;\n@@ -31,1 +30,5 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -38,1 +41,2 @@\n-    @Test public void instanceCreation() {\n+    @Test\n+    public void instanceCreation() {\n@@ -50,1 +54,2 @@\n-    @Test public void instanceCreation2() {\n+    @Test\n+    public void instanceCreation2() {\n@@ -62,1 +67,2 @@\n-    @Test public void instanceCreation3() {\n+    @Test\n+    public void instanceCreation3() {\n@@ -74,1 +80,2 @@\n-    @Test public void instanceCreation4() {\n+    @Test\n+    public void instanceCreation4() {\n@@ -86,1 +93,2 @@\n-    @Test public void instanceCreation5() {\n+    @Test\n+    public void instanceCreation5() {\n@@ -98,1 +106,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -100,1 +108,3 @@\n-        new BorderWidths(-2);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BorderWidths(-2);\n+        });\n@@ -103,1 +113,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -105,1 +115,3 @@\n-        new BorderWidths(-2, 0, 0, 0, false, false, false, false);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BorderWidths(-2, 0, 0, 0, false, false, false, false);\n+        });\n@@ -108,1 +120,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -110,1 +122,3 @@\n-        new BorderWidths(-2, 0, 0, 0);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BorderWidths(-2, 0, 0, 0);\n+        });\n@@ -113,1 +127,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -115,1 +129,3 @@\n-        new BorderWidths(0, -2, 0, 0, false, false, false, false);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BorderWidths(0, -2, 0, 0, false, false, false, false);\n+        });\n@@ -118,1 +134,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -120,1 +136,3 @@\n-        new BorderWidths(0, -2, 0, 0);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BorderWidths(0, -2, 0, 0);\n+        });\n@@ -123,1 +141,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -125,1 +143,3 @@\n-        new BorderWidths(0, 0, -2, 0, false, false, false, false);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BorderWidths(0, 0, -2, 0, false, false, false, false);\n+        });\n@@ -128,1 +148,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -130,1 +150,3 @@\n-        new BorderWidths(0, 0, -2, 0);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BorderWidths(0, 0, -2, 0);\n+        });\n@@ -133,1 +155,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -135,1 +157,3 @@\n-        new BorderWidths(0, 0, 0, -2, false, false, false, false);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BorderWidths(0, 0, 0, -2, false, false, false, false);\n+        });\n@@ -138,1 +162,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -140,1 +164,3 @@\n-        new BorderWidths(0, 0, 0, -2);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new BorderWidths(0, 0, 0, -2);\n+        });\n@@ -143,1 +169,2 @@\n-    @Test public void equality() {\n+    @Test\n+    public void equality() {\n@@ -149,1 +176,2 @@\n-    @Test public void same() {\n+    @Test\n+    public void same() {\n@@ -153,1 +181,2 @@\n-    @Test public void different() {\n+    @Test\n+    public void different() {\n@@ -159,1 +188,2 @@\n-    @Test public void different2() {\n+    @Test\n+    public void different2() {\n@@ -165,1 +195,2 @@\n-    @Test public void different3() {\n+    @Test\n+    public void different3() {\n@@ -171,1 +202,2 @@\n-    @Test public void different4() {\n+    @Test\n+    public void different4() {\n@@ -177,1 +209,2 @@\n-    @Test public void different5() {\n+    @Test\n+    public void different5() {\n@@ -183,1 +216,2 @@\n-    @Test public void different6() {\n+    @Test\n+    public void different6() {\n@@ -189,1 +223,2 @@\n-    @Test public void different7() {\n+    @Test\n+    public void different7() {\n@@ -195,1 +230,2 @@\n-    @Test public void different8() {\n+    @Test\n+    public void different8() {\n@@ -201,1 +237,2 @@\n-    @Test public void noEqualToNull() {\n+    @Test\n+    public void noEqualToNull() {\n@@ -206,1 +243,2 @@\n-    @Test public void noEqualToRandom() {\n+    @Test\n+    public void noEqualToRandom() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BorderWidthsTest.java","additions":76,"deletions":38,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n@@ -39,1 +37,0 @@\n-import org.junit.Before;\n@@ -41,1 +38,4 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n@@ -47,1 +47,1 @@\n-    @Before public void setUp() {\n+    @BeforeEach public void setUp() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/FlowPaneTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,4 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n@@ -46,2 +42,6 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -53,1 +53,1 @@\n-    @Before public void setUp() {\n+    @BeforeEach public void setUp() {\n@@ -73,2 +73,2 @@\n-        assertNull(null, gridpane.getAlignment());\n-        assertNull(null, gridpane.alignmentProperty().get());\n+        assertNull(gridpane.getAlignment());\n+        assertNull(gridpane.alignmentProperty().get());\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/GridPaneTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n@@ -40,2 +37,5 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -47,1 +47,1 @@\n-    @Before public void setUp() {\n+    @BeforeEach public void setUp() {\n@@ -65,2 +65,2 @@\n-        assertNull(null, hbox.getAlignment());\n-        assertNull(null, hbox.alignmentProperty().get());\n+        assertNull(hbox.getAlignment());\n+        assertNull(hbox.alignmentProperty().get());\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/HBoxTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,3 +36,0 @@\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n@@ -58,1 +55,6 @@\n-import static org.junit.Assert.*;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n@@ -131,1 +133,2 @@\n-    @Before public void setUp() {\n+    @BeforeEach\n+    public void setUp() {\n@@ -147,1 +150,2 @@\n-    @Test public void nothingSpecified() {\n+    @Test\n+    public void nothingSpecified() {\n@@ -165,1 +169,2 @@\n-    @Test public void fillIsNull() {\n+    @Test\n+    public void fillIsNull() {\n@@ -174,1 +179,2 @@\n-    @Test public void fillIsTransparent() {\n+    @Test\n+    public void fillIsTransparent() {\n@@ -186,1 +192,2 @@\n-    @Test public void fillIsSpecifiedOnly() {\n+    @Test\n+    public void fillIsSpecifiedOnly() {\n@@ -198,1 +205,2 @@\n-    @Test public void insetsIsSpecifiedOnly() {\n+    @Test\n+    public void insetsIsSpecifiedOnly() {\n@@ -206,1 +214,2 @@\n-    @Test public void radiusIsSpecifiedOnly() {\n+    @Test\n+    public void radiusIsSpecifiedOnly() {\n@@ -214,1 +223,2 @@\n-    @Test public void testWithExcessInsets() {\n+    @Test\n+    public void testWithExcessInsets() {\n@@ -229,1 +239,2 @@\n-    @Test public void testWithExcessRadius() {\n+    @Test\n+    public void testWithExcessRadius() {\n@@ -244,1 +255,2 @@\n-    @Test public void backgroundScenario1() {\n+    @Test\n+    public void backgroundScenario1() {\n@@ -262,1 +274,2 @@\n-    @Test public void backgroundScenario2() {\n+    @Test\n+    public void backgroundScenario2() {\n@@ -292,1 +305,2 @@\n-    @Test public void backgroundScenario3() {\n+    @Test\n+    public void backgroundScenario3() {\n@@ -324,1 +338,2 @@\n-    @Test public void specExample1_ModifiedForBackgroundFill() {\n+    @Test\n+    public void specExample1_ModifiedForBackgroundFill() {\n@@ -347,1 +362,2 @@\n-    @Test public void testBackgroundRadiusWithHorizontalAndVerticalRadii() {\n+    @Test\n+    public void testBackgroundRadiusWithHorizontalAndVerticalRadii() {\n@@ -385,1 +401,2 @@\n-    @Test public void specExample1() {\n+    @Test\n+    public void specExample1() {\n@@ -420,1 +437,2 @@\n-    @Test public void backgroundImageRepeat_repeatX() {\n+    @Test\n+    public void backgroundImageRepeat_repeatX() {\n@@ -438,1 +456,2 @@\n-    @Test public void backgroundImageRepeat_repeatY() {\n+    @Test\n+    public void backgroundImageRepeat_repeatY() {\n@@ -456,1 +475,2 @@\n-    @Test public void backgroundImageRepeat_repeat() {\n+    @Test\n+    public void backgroundImageRepeat_repeat() {\n@@ -474,1 +494,2 @@\n-    @Test public void backgroundImageRepeat_space() {\n+    @Test\n+    public void backgroundImageRepeat_space() {\n@@ -492,1 +513,2 @@\n-    @Test public void backgroundImageRepeat_round() {\n+    @Test\n+    public void backgroundImageRepeat_round() {\n@@ -510,1 +532,2 @@\n-    @Test public void backgroundImageRepeat_noRepeat() {\n+    @Test\n+    public void backgroundImageRepeat_noRepeat() {\n@@ -528,1 +551,2 @@\n-    @Test public void backgroundImageRepeat_repeat_space() {\n+    @Test\n+    public void backgroundImageRepeat_repeat_space() {\n@@ -546,1 +570,2 @@\n-    @Test public void backgroundImageRepeat_round_noRepeat() {\n+    @Test\n+    public void backgroundImageRepeat_round_noRepeat() {\n@@ -568,1 +593,2 @@\n-    @Test public void backgroundImagePosition_right_bottom() {\n+    @Test\n+    public void backgroundImagePosition_right_bottom() {\n@@ -621,1 +647,2 @@\n-    @Test public void backgroundImagePosition_bottom_right() {\n+    @Test\n+    public void backgroundImagePosition_bottom_right() {\n@@ -639,1 +666,2 @@\n-    @Test public void backgroundImagePosition_top() {\n+    @Test\n+    public void backgroundImagePosition_top() {\n@@ -657,1 +685,2 @@\n-    @Test  public void backgroundImagePosition_left() {\n+    @Test\n+     public void backgroundImagePosition_left() {\n@@ -675,1 +704,2 @@\n-    @Test public void backgroundImagePosition_center() {\n+    @Test\n+    public void backgroundImagePosition_center() {\n@@ -693,1 +723,2 @@\n-    @Test public void backgroundImagePosition_right() {\n+    @Test\n+    public void backgroundImagePosition_right() {\n@@ -711,1 +742,2 @@\n-    @Test public void backgroundImagePosition_bottom() {\n+    @Test\n+    public void backgroundImagePosition_bottom() {\n@@ -729,1 +761,2 @@\n-    @Test public void backgroundImagePosition_center_top() {\n+    @Test\n+    public void backgroundImagePosition_center_top() {\n@@ -747,1 +780,2 @@\n-    @Test public void backgroundImagePosition_Example8_1() {\n+    @Test\n+    public void backgroundImagePosition_Example8_1() {\n@@ -765,1 +799,2 @@\n-    @Test public void backgroundImagePosition_Example8_2() {\n+    @Test\n+    public void backgroundImagePosition_Example8_2() {\n@@ -783,1 +818,2 @@\n-    @Test public void backgroundImagePosition_Example8_3() {\n+    @Test\n+    public void backgroundImagePosition_Example8_3() {\n@@ -801,1 +837,2 @@\n-    @Test public void backgroundImagePosition_Example8_4() {\n+    @Test\n+    public void backgroundImagePosition_Example8_4() {\n@@ -819,1 +856,2 @@\n-    @Test public void backgroundImagePosition_Example8_5() {\n+    @Test\n+    public void backgroundImagePosition_Example8_5() {\n@@ -837,1 +875,2 @@\n-    @Test public void backgroundImagePosition_Example8_6() {\n+    @Test\n+    public void backgroundImagePosition_Example8_6() {\n@@ -855,1 +894,2 @@\n-    @Test public void backgroundImagePosition_Example8_7() {\n+    @Test\n+    public void backgroundImagePosition_Example8_7() {\n@@ -873,1 +913,2 @@\n-    @Test public void backgroundImagePosition_Example10_1() {\n+    @Test\n+    public void backgroundImagePosition_Example10_1() {\n@@ -891,1 +932,2 @@\n-    @Test public void backgroundImagePosition_Example10_2() {\n+    @Test\n+    public void backgroundImagePosition_Example10_2() {\n@@ -909,1 +951,2 @@\n-    @Test public void backgroundImagePosition_Example11() {\n+    @Test\n+    public void backgroundImagePosition_Example11() {\n@@ -927,1 +970,2 @@\n-    @Test public void backgroundImagePosition_75Percent() {\n+    @Test\n+    public void backgroundImagePosition_75Percent() {\n@@ -945,1 +989,2 @@\n-    @Test public void backgroundImagePosition_Example12() {\n+    @Test\n+    public void backgroundImagePosition_Example12() {\n@@ -963,2 +1008,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-background-clip is not implemented.\n-    @Test public void backgroundClip_defaultValue() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-background-clip is not implemented.\n+    @Test\n+    public void backgroundClip_defaultValue() {\n@@ -984,2 +1030,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-background-clip is not implemented.\n-    @Test public void backgroundClip_BorderBox() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-background-clip is not implemented.\n+    @Test\n+    public void backgroundClip_BorderBox() {\n@@ -1005,2 +1052,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-background-clip is not implemented.\n-    @Test public void backgroundClip_PaddingBox() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-background-clip is not implemented.\n+    @Test\n+    public void backgroundClip_PaddingBox() {\n@@ -1026,2 +1074,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-background-clip is not implemented.\n-    @Test public void backgroundClip_ContentBox() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-background-clip is not implemented.\n+    @Test\n+    public void backgroundClip_ContentBox() {\n@@ -1047,2 +1096,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-background-origin is not implemented.\n-    @Test public void backgroundOrigin_defaultValue() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-background-origin is not implemented.\n+    @Test\n+    public void backgroundOrigin_defaultValue() {\n@@ -1068,2 +1118,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-background-origin is not implemented.\n-    @Test public void backgroundOrigin_BorderBox() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-background-origin is not implemented.\n+    @Test\n+    public void backgroundOrigin_BorderBox() {\n@@ -1090,2 +1141,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-background-origin is not implemented.\n-    @Test public void backgroundOrigin_PaddingBox() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-background-origin is not implemented.\n+    @Test\n+    public void backgroundOrigin_PaddingBox() {\n@@ -1111,2 +1163,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-background-origin is not implemented.\n-    @Test public void backgroundOrigin_ContentBox() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-background-origin is not implemented.\n+    @Test\n+    public void backgroundOrigin_ContentBox() {\n@@ -1132,1 +1185,2 @@\n-    @Test public void backgroundSize_defaultValue() {\n+    @Test\n+    public void backgroundSize_defaultValue() {\n@@ -1148,1 +1202,2 @@\n-    @Test public void backgroundSize_cover() {\n+    @Test\n+    public void backgroundSize_cover() {\n@@ -1166,1 +1221,2 @@\n-    @Test public void backgroundSize_contain() {\n+    @Test\n+    public void backgroundSize_contain() {\n@@ -1184,1 +1240,2 @@\n-    @Test public void backgroundSize_length() {\n+    @Test\n+    public void backgroundSize_length() {\n@@ -1202,1 +1259,2 @@\n-    @Test public void backgroundSize_percent() {\n+    @Test\n+    public void backgroundSize_percent() {\n@@ -1220,1 +1278,2 @@\n-    @Test public void backgroundSize_auto() {\n+    @Test\n+    public void backgroundSize_auto() {\n@@ -1238,1 +1297,2 @@\n-    @Test public void backgroundSize_length_length() {\n+    @Test\n+    public void backgroundSize_length_length() {\n@@ -1256,1 +1316,2 @@\n-    @Test public void backgroundSize_length_percent() {\n+    @Test\n+    public void backgroundSize_length_percent() {\n@@ -1274,1 +1335,2 @@\n-    @Test public void backgroundSize_length_auto() {\n+    @Test\n+    public void backgroundSize_length_auto() {\n@@ -1292,1 +1354,2 @@\n-    @Test public void backgroundSize_percent_length() {\n+    @Test\n+    public void backgroundSize_percent_length() {\n@@ -1310,1 +1373,2 @@\n-    @Test public void backgroundSize_percent_percent() {\n+    @Test\n+    public void backgroundSize_percent_percent() {\n@@ -1328,1 +1392,2 @@\n-    @Test public void backgroundSize_percent_auto() {\n+    @Test\n+    public void backgroundSize_percent_auto() {\n@@ -1346,1 +1411,2 @@\n-    @Test public void backgroundSize_auto_length() {\n+    @Test\n+    public void backgroundSize_auto_length() {\n@@ -1364,1 +1430,2 @@\n-    @Test public void backgroundSize_auto_percent() {\n+    @Test\n+    public void backgroundSize_auto_percent() {\n@@ -1382,1 +1449,2 @@\n-    @Test public void backgroundSize_auto_auto() {\n+    @Test\n+    public void backgroundSize_auto_auto() {\n@@ -1410,1 +1478,2 @@\n-    @Test public void borderStrokeStyleIsNull() {\n+    @Test\n+    public void borderStrokeStyleIsNull() {\n@@ -1419,2 +1488,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-style-top is not implemented.\n-    @Test public void borderStyle_top() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-style-top is not implemented.\n+    @Test\n+    public void borderStyle_top() {\n@@ -1437,2 +1507,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-style-right is not implemented.\n-    @Test public void borderStyle_right() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-style-right is not implemented.\n+    @Test\n+    public void borderStyle_right() {\n@@ -1455,2 +1526,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-style-bottom is not implemented.\n-    @Test public void borderStyle_bottom() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-style-bottom is not implemented.\n+    @Test\n+    public void borderStyle_bottom() {\n@@ -1473,2 +1545,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-style-left is not implemented.\n-    @Test public void borderStyle_left() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-style-left is not implemented.\n+    @Test\n+    public void borderStyle_left() {\n@@ -1491,2 +1564,3 @@\n-    @Ignore(\"JDK-8091576\")\n-    @Test public void borderStyle_top_right() {\n+    @Disabled(\"JDK-8091576\")\n+    @Test\n+    public void borderStyle_top_right() {\n@@ -1511,2 +1585,3 @@\n-    @Ignore(\"JDK-8091576\")\n-    @Test public void borderStyle_bottom_top() {\n+    @Disabled(\"JDK-8091576\")\n+    @Test\n+    public void borderStyle_bottom_top() {\n@@ -1531,2 +1606,3 @@\n-    @Ignore(\"JDK-8091576\")\n-    @Test public void borderStyle_left_bottom() {\n+    @Disabled(\"JDK-8091576\")\n+    @Test\n+    public void borderStyle_left_bottom() {\n@@ -1551,1 +1627,2 @@\n-    @Test public void borderStyle_none() {\n+    @Test\n+    public void borderStyle_none() {\n@@ -1560,1 +1637,2 @@\n-    @Test public void borderStyle_hidden() {\n+    @Test\n+    public void borderStyle_hidden() {\n@@ -1569,1 +1647,2 @@\n-    @Test public void borderStyle_dotted() {\n+    @Test\n+    public void borderStyle_dotted() {\n@@ -1585,1 +1664,2 @@\n-    @Test public void borderStyle_dashed() {\n+    @Test\n+    public void borderStyle_dashed() {\n@@ -1600,1 +1680,2 @@\n-    @Test public void borderStyle_solid() {\n+    @Test\n+    public void borderStyle_solid() {\n@@ -1615,2 +1696,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ double value not implemented.\n-    @Test public void borderStyle_double() {\n+    @Disabled(\"JDK-8091576\") \/\/ double value not implemented.\n+    @Test\n+    public void borderStyle_double() {\n@@ -1632,2 +1714,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ groove value not implemented.\n-    @Test public void borderStyle_groove() {\n+    @Disabled(\"JDK-8091576\") \/\/ groove value not implemented.\n+    @Test\n+    public void borderStyle_groove() {\n@@ -1649,2 +1732,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ ridge value not implemented.\n-    @Test public void borderStyle_ridge() {\n+    @Disabled(\"JDK-8091576\") \/\/ ridge value not implemented.\n+    @Test\n+    public void borderStyle_ridge() {\n@@ -1666,2 +1750,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ inset value not implemented.\n-    @Test public void borderStyle_inset() {\n+    @Disabled(\"JDK-8091576\") \/\/ inset value not implemented.\n+    @Test\n+    public void borderStyle_inset() {\n@@ -1683,2 +1768,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ outset value not implemented.\n-    @Test public void borderStyle_outset() {\n+    @Disabled(\"JDK-8091576\") \/\/ outset value not implemented.\n+    @Test\n+    public void borderStyle_outset() {\n@@ -1700,1 +1786,2 @@\n-    @Test public void borderStyle_solid_dotted() {\n+    @Test\n+    public void borderStyle_solid_dotted() {\n@@ -1716,1 +1803,2 @@\n-    @Test public void borderStyle_solid_dotted_dashed() {\n+    @Test\n+    public void borderStyle_solid_dotted_dashed() {\n@@ -1732,2 +1820,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ ridge value not implemented.\n-    @Test public void borderStyle_solid_dotted_dashed_ridge() {\n+    @Disabled(\"JDK-8091576\") \/\/ ridge value not implemented.\n+    @Test\n+    public void borderStyle_solid_dotted_dashed_ridge() {\n@@ -1750,2 +1839,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-width-top is not implemented.\n-    @Test public void borderStrokeWidth_top() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-width-top is not implemented.\n+    @Test\n+    public void borderStrokeWidth_top() {\n@@ -1767,2 +1857,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-width-right is not implemented.\n-    @Test public void borderStrokeWidth_right() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-width-right is not implemented.\n+    @Test\n+    public void borderStrokeWidth_right() {\n@@ -1784,2 +1875,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-width-bottom is not implemented.\n-    @Test public void borderStrokeWidth_bottom() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-width-bottom is not implemented.\n+    @Test\n+    public void borderStrokeWidth_bottom() {\n@@ -1801,2 +1893,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-width-left is not implemented.\n-    @Test public void borderStrokeWidth_left() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-width-left is not implemented.\n+    @Test\n+    public void borderStrokeWidth_left() {\n@@ -1818,2 +1911,3 @@\n-    @Ignore(\"JDK-8091576\")\n-    @Test public void borderStrokeWidth_top_right() {\n+    @Disabled(\"JDK-8091576\")\n+    @Test\n+    public void borderStrokeWidth_top_right() {\n@@ -1836,2 +1930,3 @@\n-    @Ignore(\"JDK-8091576\")\n-    @Test public void borderStrokeWidth_top_bottom() {\n+    @Disabled(\"JDK-8091576\")\n+    @Test\n+    public void borderStrokeWidth_top_bottom() {\n@@ -1854,2 +1949,3 @@\n-    @Ignore(\"JDK-8091576\")\n-    @Test public void borderStrokeWidth_left_bottom() {\n+    @Disabled(\"JDK-8091576\")\n+    @Test\n+    public void borderStrokeWidth_left_bottom() {\n@@ -1872,1 +1968,2 @@\n-    @Test public void borderStrokeWidth2() {\n+    @Test\n+    public void borderStrokeWidth2() {\n@@ -1887,1 +1984,2 @@\n-    @Test public void borderStrokeWidth3() {\n+    @Test\n+    public void borderStrokeWidth3() {\n@@ -1902,1 +2000,2 @@\n-    @Test public void borderStrokeWidth4() {\n+    @Test\n+    public void borderStrokeWidth4() {\n@@ -1917,2 +2016,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ thin value is not implemented.\n-    @Test public void borderStrokeWidth_thin() {\n+    @Disabled(\"JDK-8091576\") \/\/ thin value is not implemented.\n+    @Test\n+    public void borderStrokeWidth_thin() {\n@@ -1934,2 +2034,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ thick value is not implemented.\n-    @Test public void borderStrokeWidth_thick() {\n+    @Disabled(\"JDK-8091576\") \/\/ thick value is not implemented.\n+    @Test\n+    public void borderStrokeWidth_thick() {\n@@ -1951,2 +2052,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ medium value is not implemented.\n-    @Test public void borderStrokeWidth_medium() {\n+    @Disabled(\"JDK-8091576\") \/\/ medium value is not implemented.\n+    @Test\n+    public void borderStrokeWidth_medium() {\n@@ -1968,2 +2070,3 @@\n-    @Ignore(\"JDK-8091576\")\n-    @Test public void borderStrokeWidth_thin_medium_thick() {\n+    @Disabled(\"JDK-8091576\")\n+    @Test\n+    public void borderStrokeWidth_thin_medium_thick() {\n@@ -1990,2 +2093,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-top-left-radius not implemented.\n-    @Test public void borderStrokeRadius_topLeft1() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-top-left-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_topLeft1() {\n@@ -2008,2 +2112,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-top-left-radius not implemented.\n-    @Test public void borderStrokeRadius_topLeft2() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-top-left-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_topLeft2() {\n@@ -2035,2 +2140,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-top-left-radius not implemented.\n-    @Test public void borderStrokeRadius_topLeft3() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-top-left-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_topLeft3() {\n@@ -2062,2 +2168,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-top-left-radius not implemented.\n-    @Test public void borderStrokeRadius_topLeft4() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-top-left-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_topLeft4() {\n@@ -2089,2 +2196,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-top-left-radius not implemented.\n-    @Test public void borderStrokeRadius_topLeft5() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-top-left-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_topLeft5() {\n@@ -2116,2 +2224,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-top-left-radius not implemented.\n-    @Test public void borderStrokeRadius_topLeft6() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-top-left-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_topLeft6() {\n@@ -2143,2 +2252,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-top-right-radius not implemented.\n-    @Test public void borderStrokeRadius_topRight1() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-top-right-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_topRight1() {\n@@ -2161,2 +2271,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-top-right-radius not implemented.\n-    @Test public void borderStrokeRadius_topRight2() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-top-right-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_topRight2() {\n@@ -2188,2 +2299,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-top-right-radius not implemented.\n-    @Test public void borderStrokeRadius_topRight3() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-top-right-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_topRight3() {\n@@ -2215,2 +2327,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-top-right-radius not implemented.\n-    @Test public void borderStrokeRadius_topRight4() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-top-right-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_topRight4() {\n@@ -2242,2 +2355,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-top-right-radius not implemented.\n-    @Test public void borderStrokeRadius_topRight5() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-top-right-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_topRight5() {\n@@ -2269,2 +2383,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-top-right-radius not implemented.\n-    @Test public void borderStrokeRadius_topRight6() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-top-right-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_topRight6() {\n@@ -2296,2 +2411,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-bottom-right-radius not implemented.\n-    @Test public void borderStrokeRadius_bottomRight1() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-bottom-right-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_bottomRight1() {\n@@ -2314,2 +2430,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-bottom-right-radius not implemented.\n-    @Test public void borderStrokeRadius_bottomRight2() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-bottom-right-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_bottomRight2() {\n@@ -2341,2 +2458,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-bottom-right-radius not implemented.\n-    @Test public void borderStrokeRadius_bottomRight3() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-bottom-right-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_bottomRight3() {\n@@ -2368,2 +2486,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-bottom-right-radius not implemented.\n-    @Test public void borderStrokeRadius_bottomRight4() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-bottom-right-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_bottomRight4() {\n@@ -2395,2 +2514,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-bottom-right-radius not implemented.\n-    @Test public void borderStrokeRadius_bottomRight5() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-bottom-right-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_bottomRight5() {\n@@ -2422,2 +2542,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-bottom-right-radius not implemented.\n-    @Test public void borderStrokeRadius_bottomRight6() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-bottom-right-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_bottomRight6() {\n@@ -2449,2 +2570,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-bottom-left-radius not implemented.\n-    @Test public void borderStrokeRadius_bottomLeft1() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-bottom-left-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_bottomLeft1() {\n@@ -2467,2 +2589,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-bottom-left-radius not implemented.\n-    @Test public void borderStrokeRadius_bottomLeft2() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-bottom-left-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_bottomLeft2() {\n@@ -2494,2 +2617,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-bottom-left-radius not implemented.\n-    @Test public void borderStrokeRadius_bottomLeft3() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-bottom-left-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_bottomLeft3() {\n@@ -2521,2 +2645,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-bottom-left-radius not implemented.\n-    @Test public void borderStrokeRadius_bottomLeft4() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-bottom-left-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_bottomLeft4() {\n@@ -2548,2 +2673,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-bottom-left-radius not implemented.\n-    @Test public void borderStrokeRadius_bottomLeft5() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-bottom-left-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_bottomLeft5() {\n@@ -2575,2 +2701,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-bottom-left-radius not implemented.\n-    @Test public void borderStrokeRadius_bottomLeft6() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-bottom-left-radius not implemented.\n+    @Test\n+    public void borderStrokeRadius_bottomLeft6() {\n@@ -2602,2 +2729,3 @@\n-    @Ignore(\"JDK-8091576\")\n-    @Test public void borderStrokeRadius_topLeft_topRight() {\n+    @Disabled(\"JDK-8091576\")\n+    @Test\n+    public void borderStrokeRadius_topLeft_topRight() {\n@@ -2630,1 +2758,2 @@\n-    @Test public void borderStrokeRadius1() {\n+    @Test\n+    public void borderStrokeRadius1() {\n@@ -2647,1 +2776,2 @@\n-    @Test public void borderStrokeRadius1_Percent() {\n+    @Test\n+    public void borderStrokeRadius1_Percent() {\n@@ -2664,1 +2794,2 @@\n-    @Test public void borderStrokeRadius2() {\n+    @Test\n+    public void borderStrokeRadius2() {\n@@ -2681,1 +2812,2 @@\n-    @Test public void borderStrokeRadius2_Percent() {\n+    @Test\n+    public void borderStrokeRadius2_Percent() {\n@@ -2698,1 +2830,2 @@\n-    @Test public void borderStrokeRadius3() {\n+    @Test\n+    public void borderStrokeRadius3() {\n@@ -2715,1 +2848,2 @@\n-    @Test public void borderStrokeRadius3_Percent() {\n+    @Test\n+    public void borderStrokeRadius3_Percent() {\n@@ -2732,1 +2866,2 @@\n-    @Test public void borderStrokeRadius4() {\n+    @Test\n+    public void borderStrokeRadius4() {\n@@ -2749,1 +2884,2 @@\n-    @Test public void borderStrokeRadius4_Percent() {\n+    @Test\n+    public void borderStrokeRadius4_Percent() {\n@@ -2770,1 +2906,2 @@\n-    @Test public void testBorderRadiusWithHorizontalAndVerticalRadii() {\n+    @Test\n+    public void testBorderRadiusWithHorizontalAndVerticalRadii() {\n@@ -2790,1 +2927,2 @@\n-    @Test public void borderStrokeIsTransparent() {\n+    @Test\n+    public void borderStrokeIsTransparent() {\n@@ -2805,1 +2943,2 @@\n-    @Test public void borderStrokeIsSpecifiedOnly() {\n+    @Test\n+    public void borderStrokeIsSpecifiedOnly() {\n@@ -2820,1 +2959,2 @@\n-    @Test public void borderStroke2IsSpecifiedOnly() {\n+    @Test\n+    public void borderStroke2IsSpecifiedOnly() {\n@@ -2838,1 +2978,2 @@\n-    @Test public void borderStroke3IsSpecifiedOnly() {\n+    @Test\n+    public void borderStroke3IsSpecifiedOnly() {\n@@ -2856,1 +2997,2 @@\n-    @Test public void borderStroke4IsSpecifiedOnly() {\n+    @Test\n+    public void borderStroke4IsSpecifiedOnly() {\n@@ -2874,2 +3016,3 @@\n-    @Ignore(\"JDK-8091576\")\n-    @Test public void borderStroke_top_IsSpecifiedOnly() {\n+    @Disabled(\"JDK-8091576\")\n+    @Test\n+    public void borderStroke_top_IsSpecifiedOnly() {\n@@ -2894,2 +3037,3 @@\n-    @Ignore(\"JDK-8091576\")\n-    @Test public void borderStroke_right_IsSpecifiedOnly() {\n+    @Disabled(\"JDK-8091576\")\n+    @Test\n+    public void borderStroke_right_IsSpecifiedOnly() {\n@@ -2914,2 +3058,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-bottom-color is not implemented.\n-    @Test public void borderStroke_bottom_IsSpecifiedOnly() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-bottom-color is not implemented.\n+    @Test\n+    public void borderStroke_bottom_IsSpecifiedOnly() {\n@@ -2934,2 +3079,3 @@\n-    @Ignore(\"JDK-8091576\") \/\/ -fx-border-left-color is not implemented.\n-    @Test public void borderStroke_left_IsSpecifiedOnly() {\n+    @Disabled(\"JDK-8091576\") \/\/ -fx-border-left-color is not implemented.\n+    @Test\n+    public void borderStroke_left_IsSpecifiedOnly() {\n@@ -2954,2 +3100,3 @@\n-    @Ignore(\"JDK-8091576\")\n-    @Test public void borderStroke_top_right_IsSpecifiedOnly() {\n+    @Disabled(\"JDK-8091576\")\n+    @Test\n+    public void borderStroke_top_right_IsSpecifiedOnly() {\n@@ -2975,2 +3122,3 @@\n-    @Ignore(\"JDK-8091576\")\n-    @Test public void borderStroke_right_left_IsSpecifiedOnly() {\n+    @Disabled(\"JDK-8091576\")\n+    @Test\n+    public void borderStroke_right_left_IsSpecifiedOnly() {\n@@ -2996,2 +3144,3 @@\n-    @Ignore(\"JDK-8091576\")\n-    @Test public void borderStroke_bottom_top_IsSpecifiedOnly() {\n+    @Disabled(\"JDK-8091576\")\n+    @Test\n+    public void borderStroke_bottom_top_IsSpecifiedOnly() {\n@@ -3017,1 +3166,2 @@\n-    @Test public void borderRadiusIsSpecifiedOnly() {\n+    @Test\n+    public void borderRadiusIsSpecifiedOnly() {\n@@ -3025,1 +3175,2 @@\n-    @Test public void borderWidthIsSpecifiedOnly() {\n+    @Test\n+    public void borderWidthIsSpecifiedOnly() {\n@@ -3033,1 +3184,2 @@\n-    @Test public void testWithExcessBorderWidths() {\n+    @Test\n+    public void testWithExcessBorderWidths() {\n@@ -3052,1 +3204,2 @@\n-    @Test public void testWithExcessBorderRadii() {\n+    @Test\n+    public void testWithExcessBorderRadii() {\n@@ -3077,1 +3230,2 @@\n-    @Test public void borderImageSourceIsNull() {\n+    @Test\n+    public void borderImageSourceIsNull() {\n@@ -3086,1 +3240,2 @@\n-    @Test public void borderImageSource() {\n+    @Test\n+    public void borderImageSource() {\n@@ -3095,1 +3250,2 @@\n-    @Test public void defaultBorderImageValues() {\n+    @Test\n+    public void defaultBorderImageValues() {\n@@ -3112,1 +3268,2 @@\n-    @Test public void borderImageSlice_1() {\n+    @Test\n+    public void borderImageSlice_1() {\n@@ -3131,1 +3288,2 @@\n-    @Test public void borderImageSlice_1_2() {\n+    @Test\n+    public void borderImageSlice_1_2() {\n@@ -3150,1 +3308,2 @@\n-    @Test public void borderImageSlice_1_2_3() {\n+    @Test\n+    public void borderImageSlice_1_2_3() {\n@@ -3169,1 +3328,2 @@\n-    @Test public void borderImageSlice_1_2_3_4() {\n+    @Test\n+    public void borderImageSlice_1_2_3_4() {\n@@ -3188,1 +3348,2 @@\n-    @Test public void borderImageSlice_1_fill() {\n+    @Test\n+    public void borderImageSlice_1_fill() {\n@@ -3207,1 +3368,2 @@\n-    @Test public void borderImageSlice_1_2_fill() {\n+    @Test\n+    public void borderImageSlice_1_2_fill() {\n@@ -3226,1 +3388,2 @@\n-    @Test public void borderImageSlice_1_2_3_fill() {\n+    @Test\n+    public void borderImageSlice_1_2_3_fill() {\n@@ -3245,1 +3408,2 @@\n-    @Test public void borderImageSlice_1_2_3_4_fill() {\n+    @Test\n+    public void borderImageSlice_1_2_3_4_fill() {\n@@ -3264,1 +3428,2 @@\n-    @Test public void borderImageWidth_1() {\n+    @Test\n+    public void borderImageWidth_1() {\n@@ -3283,1 +3448,2 @@\n-    @Test public void borderImageWidth_1_2() {\n+    @Test\n+    public void borderImageWidth_1_2() {\n@@ -3302,1 +3468,2 @@\n-    @Test public void borderImageWidth_1_2_3() {\n+    @Test\n+    public void borderImageWidth_1_2_3() {\n@@ -3321,1 +3488,2 @@\n-    @Test public void borderImageWidth_1_2_3_4() {\n+    @Test\n+    public void borderImageWidth_1_2_3_4() {\n@@ -3340,1 +3508,2 @@\n-    @Test public void borderImageWidth_1_2Percent() {\n+    @Test\n+    public void borderImageWidth_1_2Percent() {\n@@ -3359,1 +3528,2 @@\n-    @Test public void borderImageWidth_1Percent_2Percent_3Percent_4Percent() {\n+    @Test\n+    public void borderImageWidth_1Percent_2Percent_3Percent_4Percent() {\n@@ -3378,1 +3548,2 @@\n-    @Test public void borderImageWidth_auto() {\n+    @Test\n+    public void borderImageWidth_auto() {\n@@ -3399,1 +3570,2 @@\n-    @Test public void borderImageWidth_1_auto() {\n+    @Test\n+    public void borderImageWidth_1_auto() {\n@@ -3419,1 +3591,2 @@\n-    @Test public void borderImageWidth_1_2Percent_auto() {\n+    @Test\n+    public void borderImageWidth_1_2Percent_auto() {\n@@ -3439,1 +3612,2 @@\n-    @Test public void borderImageOutset_1() {\n+    @Test\n+    public void borderImageOutset_1() {\n@@ -3458,1 +3632,2 @@\n-    @Test public void borderImageOutset_1_2() {\n+    @Test\n+    public void borderImageOutset_1_2() {\n@@ -3477,1 +3652,2 @@\n-    @Test public void borderImageOutset_1_2_3() {\n+    @Test\n+    public void borderImageOutset_1_2_3() {\n@@ -3496,1 +3672,2 @@\n-    @Test public void borderImageOutset_1_2_3_4() {\n+    @Test\n+    public void borderImageOutset_1_2_3_4() {\n@@ -3515,1 +3692,2 @@\n-    @Test public void borderImageRepeat_stretch() {\n+    @Test\n+    public void borderImageRepeat_stretch() {\n@@ -3534,1 +3712,2 @@\n-    @Test public void borderImageRepeat_repeat() {\n+    @Test\n+    public void borderImageRepeat_repeat() {\n@@ -3553,1 +3732,2 @@\n-    @Test public void borderImageRepeat_round() {\n+    @Test\n+    public void borderImageRepeat_round() {\n@@ -3572,1 +3752,2 @@\n-    @Test public void borderImageRepeat_space() {\n+    @Test\n+    public void borderImageRepeat_space() {\n@@ -3591,1 +3772,2 @@\n-    @Test public void borderImageRepeat_round_stretch() {\n+    @Test\n+    public void borderImageRepeat_round_stretch() {\n@@ -3610,1 +3792,2 @@\n-    @Test public void borderImageRepeat_round_repeat() {\n+    @Test\n+    public void borderImageRepeat_round_repeat() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/RegionCSSTest.java","additions":433,"deletions":250,"binary":false,"changes":683,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -42,1 +40,4 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -73,1 +74,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -87,1 +89,2 @@\n-    @Test public void pickingNormalRegion() {\n+    @Test\n+    public void pickingNormalRegion() {\n@@ -103,1 +106,2 @@\n-    @Test public void pickingEmptyRegionDoesNotWork() {\n+    @Test\n+    public void pickingEmptyRegionDoesNotWork() {\n@@ -118,1 +122,2 @@\n-    @Test public void pickingRectangularFillWorks() {\n+    @Test\n+    public void pickingRectangularFillWorks() {\n@@ -127,1 +132,2 @@\n-    @Test public void pickingRectangularFillWithInsetsWorks() {\n+    @Test\n+    public void pickingRectangularFillWithInsetsWorks() {\n@@ -141,1 +147,2 @@\n-    @Test public void pickingRectangularFillWithUniformRadiusWorks() {\n+    @Test\n+    public void pickingRectangularFillWithUniformRadiusWorks() {\n@@ -171,1 +178,2 @@\n-    @Test public void pickingRectangularFillWithUniformRadiusWithInsetsWorks() {\n+    @Test\n+    public void pickingRectangularFillWithUniformRadiusWithInsetsWorks() {\n@@ -202,1 +210,2 @@\n-    @Test public void pickingRectangularFillWithUniformVERYLARGERadiusWorks() {\n+    @Test\n+    public void pickingRectangularFillWithUniformVERYLARGERadiusWorks() {\n@@ -233,1 +242,2 @@\n-    @Test public void pickingRectangularFillWithIndependentRadiusWorks() {\n+    @Test\n+    public void pickingRectangularFillWithIndependentRadiusWorks() {\n@@ -264,1 +274,2 @@\n-    @Test public void pickingRectangularFillWithIndependentRadiusWorks2() {\n+    @Test\n+    public void pickingRectangularFillWithIndependentRadiusWorks2() {\n@@ -296,1 +307,2 @@\n-    @Test public void pickingRectangularFillWithIndependentRadiusWithInsetsWorks() {\n+    @Test\n+    public void pickingRectangularFillWithIndependentRadiusWithInsetsWorks() {\n@@ -337,1 +349,2 @@\n-    @Test public void pickingRectangularBorderWorks() {\n+    @Test\n+    public void pickingRectangularBorderWorks() {\n@@ -348,1 +361,2 @@\n-    @Test public void pickingRectangularBorderWithThickBorder() {\n+    @Test\n+    public void pickingRectangularBorderWithThickBorder() {\n@@ -362,1 +376,2 @@\n-    @Test public void pickingRectangularBorderWithIndependentBorderWidths() {\n+    @Test\n+    public void pickingRectangularBorderWithIndependentBorderWidths() {\n@@ -392,1 +407,2 @@\n-    @Test public void pickingRectangularBorderWithIndependentPercentageBorderWidths() {\n+    @Test\n+    public void pickingRectangularBorderWithIndependentPercentageBorderWidths() {\n@@ -422,1 +438,2 @@\n-    @Test public void pickingRectangularBorderWithIndependentBorderWidthsAndInsets() {\n+    @Test\n+    public void pickingRectangularBorderWithIndependentBorderWidthsAndInsets() {\n@@ -450,1 +467,2 @@\n-    @Test public void pickingRectangularBorderWithIndependentRadiusWithInsetsWorks() {\n+    @Test\n+    public void pickingRectangularBorderWithIndependentRadiusWithInsetsWorks() {\n@@ -483,1 +501,2 @@\n-    @Test public void pickingRectangularBorderWithIndependentPercentageRadiusWithInsetsWorks() {\n+    @Test\n+    public void pickingRectangularBorderWithIndependentPercentageRadiusWithInsetsWorks() {\n@@ -533,1 +552,2 @@\n-    @Test public void pickingSimpleShape() {\n+    @Test\n+    public void pickingSimpleShape() {\n@@ -555,1 +575,2 @@\n-    @Test public void pickingCenteredShape() {\n+    @Test\n+    public void pickingCenteredShape() {\n@@ -578,1 +599,2 @@\n-    @Test public void pickingScaledShape() {\n+    @Test\n+    public void pickingScaledShape() {\n@@ -610,1 +632,2 @@\n-    @Test public void pickingScaledAndCenteredShape() {\n+    @Test\n+    public void pickingScaledAndCenteredShape() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/RegionPickTest.java","additions":49,"deletions":26,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -60,5 +60,0 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n@@ -67,0 +62,6 @@\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n@@ -72,1 +73,2 @@\n-    @Test public void testPaddingEmptyByDefault() {\n+    @Test\n+    public void testPaddingEmptyByDefault() {\n@@ -78,1 +80,2 @@\n-    @Test public void testPaddingCannotBeSetToNull() {\n+    @Test\n+    public void testPaddingCannotBeSetToNull() {\n@@ -96,1 +99,2 @@\n-    @Test public void testInsetsEqualsPaddingByDefault() {\n+    @Test\n+    public void testInsetsEqualsPaddingByDefault() {\n@@ -102,1 +106,2 @@\n-    @Test public void testBoundedSizeReturnsPrefWhenPrefBetweenMinAndMax() {\n+    @Test\n+    public void testBoundedSizeReturnsPrefWhenPrefBetweenMinAndMax() {\n@@ -106,1 +111,2 @@\n-    @Test public void testBoundedSizeReturnsMinWhenMinGreaterThanPrefButLessThanMax() {\n+    @Test\n+    public void testBoundedSizeReturnsMinWhenMinGreaterThanPrefButLessThanMax() {\n@@ -110,1 +116,2 @@\n-    @Test public void testBoundedSizeReturnsMinWhenMinGreaterThanPrefAndMax() {\n+    @Test\n+    public void testBoundedSizeReturnsMinWhenMinGreaterThanPrefAndMax() {\n@@ -114,1 +121,2 @@\n-    @Test public void testBoundedSizeReturnsMaxWhenMaxLessThanPrefButGreaterThanMin() {\n+    @Test\n+    public void testBoundedSizeReturnsMaxWhenMaxLessThanPrefButGreaterThanMin() {\n@@ -118,1 +126,2 @@\n-    @Test public void testBoundedSizeReturnsMinWhenMaxLessThanPrefAndMin() {\n+    @Test\n+    public void testBoundedSizeReturnsMinWhenMaxLessThanPrefAndMin() {\n@@ -122,1 +131,2 @@\n-    @Test public void testBoundedSizeReturnsMinWhenMaxLessThanPrefAndMinAndPrefLessThanMin() {\n+    @Test\n+    public void testBoundedSizeReturnsMinWhenMaxLessThanPrefAndMinAndPrefLessThanMin() {\n@@ -126,1 +136,2 @@\n-    @Test public void testMinWidthOverride() {\n+    @Test\n+    public void testMinWidthOverride() {\n@@ -134,1 +145,2 @@\n-    @Test public void testMinWidthOverrideThenRestoreComputedSize() {\n+    @Test\n+    public void testMinWidthOverrideThenRestoreComputedSize() {\n@@ -142,1 +154,2 @@\n-    @Test public void testMinWidthNaNTreatedAsZero() {\n+    @Test\n+    public void testMinWidthNaNTreatedAsZero() {\n@@ -149,1 +162,2 @@\n-    @Test public void testMinWidthNegativeTreatedAsZero() {\n+    @Test\n+    public void testMinWidthNegativeTreatedAsZero() {\n@@ -156,1 +170,2 @@\n-    @Test public void testMinHeightOverride() {\n+    @Test\n+    public void testMinHeightOverride() {\n@@ -164,1 +179,2 @@\n-    @Test public void testMinHeightOverrideThenRestoreComputedSize() {\n+    @Test\n+    public void testMinHeightOverrideThenRestoreComputedSize() {\n@@ -172,1 +188,2 @@\n-    @Test public void testMinHeightNaNTreatedAsZero() {\n+    @Test\n+    public void testMinHeightNaNTreatedAsZero() {\n@@ -179,1 +196,2 @@\n-    @Test public void testMinHeightNegativeTreatedAsZero() {\n+    @Test\n+    public void testMinHeightNegativeTreatedAsZero() {\n@@ -186,1 +204,2 @@\n-    @Test public void testMinWidthOverrideSetToPref() {\n+    @Test\n+    public void testMinWidthOverrideSetToPref() {\n@@ -194,1 +213,2 @@\n-    @Test public void testMinHeightOverrideSetToPref() {\n+    @Test\n+    public void testMinHeightOverrideSetToPref() {\n@@ -202,1 +222,2 @@\n-    @Test public void testPrefWidthOverride() {\n+    @Test\n+    public void testPrefWidthOverride() {\n@@ -210,1 +231,2 @@\n-    @Test public void testPrefWidthOverrideThenRestoreComputedSize() {\n+    @Test\n+    public void testPrefWidthOverrideThenRestoreComputedSize() {\n@@ -218,1 +240,2 @@\n-    @Test public void testPrefWidthNaNTreatedAsZero() {\n+    @Test\n+    public void testPrefWidthNaNTreatedAsZero() {\n@@ -225,1 +248,2 @@\n-    @Test public void testPrefWidthNegativeTreatedAsZero() {\n+    @Test\n+    public void testPrefWidthNegativeTreatedAsZero() {\n@@ -232,1 +256,2 @@\n-    @Test public void testPrefHeightOverride() {\n+    @Test\n+    public void testPrefHeightOverride() {\n@@ -240,1 +265,2 @@\n-    @Test public void testPrefHeightOverrideThenRestoreComputedSize() {\n+    @Test\n+    public void testPrefHeightOverrideThenRestoreComputedSize() {\n@@ -248,1 +274,2 @@\n-    @Test public void testPrefHeightNaNTreatedAsZero() {\n+    @Test\n+    public void testPrefHeightNaNTreatedAsZero() {\n@@ -255,1 +282,2 @@\n-    @Test public void testPrefHeightNegativeTreatedAsZero() {\n+    @Test\n+    public void testPrefHeightNegativeTreatedAsZero() {\n@@ -262,1 +290,2 @@\n-    @Test public void testMaxWidthOverride() {\n+    @Test\n+    public void testMaxWidthOverride() {\n@@ -270,1 +299,2 @@\n-    @Test public void testMaxWidthOverrideThenRestoreComputedSize() {\n+    @Test\n+    public void testMaxWidthOverrideThenRestoreComputedSize() {\n@@ -278,1 +308,2 @@\n-    @Test public void testMaxWidthNaNTreatedAsZero() {\n+    @Test\n+    public void testMaxWidthNaNTreatedAsZero() {\n@@ -285,1 +316,2 @@\n-    @Test public void testMaxWidthNegativeTreatedAsZero() {\n+    @Test\n+    public void testMaxWidthNegativeTreatedAsZero() {\n@@ -292,1 +324,2 @@\n-    @Test public void testMaxHeightOverride() {\n+    @Test\n+    public void testMaxHeightOverride() {\n@@ -300,1 +333,2 @@\n-    @Test public void testMaxHeightOverrideThenRestoreComputedSize() {\n+    @Test\n+    public void testMaxHeightOverrideThenRestoreComputedSize() {\n@@ -308,1 +342,2 @@\n-    @Test public void testMaxHeightNaNTreatedAsZero() {\n+    @Test\n+    public void testMaxHeightNaNTreatedAsZero() {\n@@ -315,1 +350,2 @@\n-    @Test public void testMaxHeightNegativeTreatedAsZero() {\n+    @Test\n+    public void testMaxHeightNegativeTreatedAsZero() {\n@@ -322,1 +358,2 @@\n-    @Test public void testMaxWidthOverrideSetToPref() {\n+    @Test\n+    public void testMaxWidthOverrideSetToPref() {\n@@ -330,1 +367,2 @@\n-    @Test public void testMaxHeightOverrideSetToPref() {\n+    @Test\n+    public void testMaxHeightOverrideSetToPref() {\n@@ -338,1 +376,2 @@\n-    @Test public void testPositionInAreaForResizableForResizableTopLeft() {\n+    @Test\n+    public void testPositionInAreaForResizableForResizableTopLeft() {\n@@ -353,1 +392,2 @@\n-    @Test public void testPositionInAreaForResizableTopCenter() {\n+    @Test\n+    public void testPositionInAreaForResizableTopCenter() {\n@@ -368,1 +408,2 @@\n-    @Test public void testPositionInAreaForResizableTopRight() {\n+    @Test\n+    public void testPositionInAreaForResizableTopRight() {\n@@ -383,1 +424,2 @@\n-    @Test public void testPositionInAreaForResizableCenterLeft() {\n+    @Test\n+    public void testPositionInAreaForResizableCenterLeft() {\n@@ -399,1 +441,2 @@\n-\/\/    @Test public void testPositionInAreaForNONResizableCenterLeft() {\n+\/\/    @Test\n+\/\/    public void testPositionInAreaForNONResizableCenterLeft() {\n@@ -412,1 +455,2 @@\n-    @Test public void testPositionInAreaForResizableCenter() {\n+    @Test\n+    public void testPositionInAreaForResizableCenter() {\n@@ -428,1 +472,2 @@\n-\/\/    @Test public void testPositionInAreaForNONResizableCenter() {\n+\/\/    @Test\n+\/\/    public void testPositionInAreaForNONResizableCenter() {\n@@ -440,1 +485,2 @@\n-    @Test public void testPositionInAreaForResizableCenterRight() {\n+    @Test\n+    public void testPositionInAreaForResizableCenterRight() {\n@@ -455,1 +501,2 @@\n-    @Test public void testPositionInAreaForResizableBottomLeft() {\n+    @Test\n+    public void testPositionInAreaForResizableBottomLeft() {\n@@ -471,1 +518,2 @@\n-\/\/    @Test public void testPositionInAreaForNONResizableBottomLeft() {\n+\/\/    @Test\n+\/\/    public void testPositionInAreaForNONResizableBottomLeft() {\n@@ -483,1 +531,2 @@\n-    @Test public void testPositionInAreaForResizableBottomCenter() {\n+    @Test\n+    public void testPositionInAreaForResizableBottomCenter() {\n@@ -499,1 +548,2 @@\n-\/\/    @Test public void testPositionInAreaForNONResizableBottomCenter() {\n+\/\/    @Test\n+\/\/    public void testPositionInAreaForNONResizableBottomCenter() {\n@@ -511,1 +561,2 @@\n-    @Test public void testPositionInAreaForResizableBottomRight() {\n+    @Test\n+    public void testPositionInAreaForResizableBottomRight() {\n@@ -527,1 +578,2 @@\n-\/\/    @Test public void testPositionInAreaForNONResizableBottomRight() {\n+\/\/    @Test\n+\/\/    public void testPositionInAreaForNONResizableBottomRight() {\n@@ -539,1 +591,2 @@\n-    @Test public void testPositionInAreaForResizableBaselineLeft() {\n+    @Test\n+    public void testPositionInAreaForResizableBaselineLeft() {\n@@ -555,1 +608,2 @@\n-\/\/    @Test public void testPositionInAreaForNONResizableBaselineLeft() {\n+\/\/    @Test\n+\/\/    public void testPositionInAreaForNONResizableBaselineLeft() {\n@@ -567,1 +621,2 @@\n-    @Test public void testPositionInAreaForResizableBaselineCenter() {\n+    @Test\n+    public void testPositionInAreaForResizableBaselineCenter() {\n@@ -583,1 +638,2 @@\n-\/\/    @Test public void testPositionInAreaForNONResizableBaselineCenter() {\n+\/\/    @Test\n+\/\/    public void testPositionInAreaForNONResizableBaselineCenter() {\n@@ -595,1 +651,2 @@\n-    @Test public void testPositionInAreaForResizableBaselineRight() {\n+    @Test\n+    public void testPositionInAreaForResizableBaselineRight() {\n@@ -611,1 +668,2 @@\n-\/\/    @Test public void testPositionInAreaForNONResizableBaselineRight() {\n+\/\/    @Test\n+\/\/    public void testPositionInAreaForNONResizableBaselineRight() {\n@@ -623,1 +681,2 @@\n-    @Test public void testLayoutInAreaWithLargerMax() {\n+    @Test\n+    public void testLayoutInAreaWithLargerMax() {\n@@ -638,1 +697,2 @@\n-    @Test public void testLayoutInAreaWithSmallerMax() {\n+    @Test\n+    public void testLayoutInAreaWithSmallerMax() {\n@@ -653,1 +713,2 @@\n-    @Test public void testLayoutInAreaWithLargerMin() {\n+    @Test\n+    public void testLayoutInAreaWithLargerMin() {\n@@ -668,1 +729,2 @@\n-    @Test public void testLayoutInAreaWithSizeOverrides() {\n+    @Test\n+    public void testLayoutInAreaWithSizeOverrides() {\n@@ -686,1 +748,2 @@\n-    @Test public void testLayoutInAreaWithMaxConstrainedToPref() {\n+    @Test\n+    public void testLayoutInAreaWithMaxConstrainedToPref() {\n@@ -704,1 +767,2 @@\n-    @Test public void testLayoutInAreaHonorsMaxWidthOverPref() {\n+    @Test\n+    public void testLayoutInAreaHonorsMaxWidthOverPref() {\n@@ -720,1 +784,2 @@\n-    @Test public void testLayoutInAreaHonorsMaxHeightOverPref() {\n+    @Test\n+    public void testLayoutInAreaHonorsMaxHeightOverPref() {\n@@ -736,1 +801,2 @@\n-    @Test public void testLayoutInAreaHonorsMinWidthOverPref() {\n+    @Test\n+    public void testLayoutInAreaHonorsMinWidthOverPref() {\n@@ -751,1 +817,2 @@\n-    @Test public void testLayoutInAreaHonorsMinHeightOverPref() {\n+    @Test\n+    public void testLayoutInAreaHonorsMinHeightOverPref() {\n@@ -766,1 +833,2 @@\n-    @Test public void testLayoutInAreaHonorsMinWidthOverMax() {\n+    @Test\n+    public void testLayoutInAreaHonorsMinWidthOverMax() {\n@@ -781,1 +849,2 @@\n-    @Test public void testLayoutInAreaHonorsMinHeightOverMax() {\n+    @Test\n+    public void testLayoutInAreaHonorsMinHeightOverMax() {\n@@ -796,1 +865,2 @@\n-    @Test public void testLayoutInAreaHonorsAreaWidthOverPrefWithFillWidth() {\n+    @Test\n+    public void testLayoutInAreaHonorsAreaWidthOverPrefWithFillWidth() {\n@@ -810,1 +880,2 @@\n-    @Test public void testLayoutInAreaHonorsAreaHeightOverPrefWithFillHeight() {\n+    @Test\n+    public void testLayoutInAreaHonorsAreaHeightOverPrefWithFillHeight() {\n@@ -824,1 +895,2 @@\n-    @Test public void testLayoutInAreaHonorsAreaWidthOverPrefWithNOFill() {\n+    @Test\n+    public void testLayoutInAreaHonorsAreaWidthOverPrefWithNOFill() {\n@@ -838,1 +910,2 @@\n-    @Test public void testLayoutInAreaHonorsAreaHeightOverPrefWithNOFill() {\n+    @Test\n+    public void testLayoutInAreaHonorsAreaHeightOverPrefWithNOFill() {\n@@ -852,1 +925,2 @@\n-    @Test public void testLayoutInAreaWithBaselineOffset() {\n+    @Test\n+    public void testLayoutInAreaWithBaselineOffset() {\n@@ -871,1 +945,2 @@\n-    @Test public void testComputeChildPrefAreaWidthHonorsMaxWidthOverPref() {\n+    @Test\n+    public void testComputeChildPrefAreaWidthHonorsMaxWidthOverPref() {\n@@ -881,1 +956,2 @@\n-    @Test public void testComputeChildPrefAreaHeightHonorsMaxWidthOverPref() {\n+    @Test\n+    public void testComputeChildPrefAreaHeightHonorsMaxWidthOverPref() {\n@@ -891,1 +967,2 @@\n-    @Test public void testComputeChildPrefAreaWidthHonorsMinWidthOverPref() {\n+    @Test\n+    public void testComputeChildPrefAreaWidthHonorsMinWidthOverPref() {\n@@ -901,1 +978,2 @@\n-    @Test public void testComputeChildPrefAreaHeightHonorsMinWidthOverPref() {\n+    @Test\n+    public void testComputeChildPrefAreaHeightHonorsMinWidthOverPref() {\n@@ -911,1 +989,2 @@\n-    @Test public void testComputeChildPrefAreaWidthHonorsMinWidthOverMax() {\n+    @Test\n+    public void testComputeChildPrefAreaWidthHonorsMinWidthOverMax() {\n@@ -921,1 +1000,2 @@\n-    @Test public void testComputeChildPrefAreaHeightHonorsMinWidthOverMax() {\n+    @Test\n+    public void testComputeChildPrefAreaHeightHonorsMinWidthOverMax() {\n@@ -931,1 +1011,2 @@\n-    @Test public void testChildMinAreaWidth() {\n+    @Test\n+    public void testChildMinAreaWidth() {\n@@ -950,1 +1031,2 @@\n-    @Test public void testChildMinAreaHeight() {\n+    @Test\n+    public void testChildMinAreaHeight() {\n@@ -968,1 +1050,2 @@\n-    @Test public void testChildMaxAreaWidth() {\n+    @Test\n+    public void testChildMaxAreaWidth() {\n@@ -986,1 +1069,2 @@\n-    @Test public void testChildMaxAreaHeight() {\n+    @Test\n+    public void testChildMaxAreaHeight() {\n@@ -1017,1 +1101,2 @@\n-    @Test public void testBackgroundLoadedBackgroundImageHasListenerInstalled() {\n+    @Test\n+    public void testBackgroundLoadedBackgroundImageHasListenerInstalled() {\n@@ -1030,1 +1115,2 @@\n-    @Test public void testBackgroundLoadedBackgroundImageStillLoadingButRemovedFromRegionHasListenerRemoved() {\n+    @Test\n+    public void testBackgroundLoadedBackgroundImageStillLoadingButRemovedFromRegionHasListenerRemoved() {\n@@ -1044,1 +1130,2 @@\n-    @Test public void testBackgroundLoadedBackgroundImageWhichFinishesLoadingHasListenerRemoved() {\n+    @Test\n+    public void testBackgroundLoadedBackgroundImageWhichFinishesLoadingHasListenerRemoved() {\n@@ -1059,1 +1146,2 @@\n-    @Test public void testBackgroundLoadedBackgroundImageWhichFinishesLoadingCausesRepaint() {\n+    @Test\n+    public void testBackgroundLoadedBackgroundImageWhichFinishesLoadingCausesRepaint() {\n@@ -1076,1 +1164,2 @@\n-    @Test public void testBackgroundLoadedBorderImageHasListenerInstalled() {\n+    @Test\n+    public void testBackgroundLoadedBorderImageHasListenerInstalled() {\n@@ -1089,1 +1178,2 @@\n-    @Test public void testBackgroundLoadedBorderImageStillLoadingButRemovedFromRegionHasListenerRemoved() {\n+    @Test\n+    public void testBackgroundLoadedBorderImageStillLoadingButRemovedFromRegionHasListenerRemoved() {\n@@ -1103,1 +1193,2 @@\n-    @Test public void testBackgroundLoadedBorderImageWhichFinishesLoadingHasListenerRemoved() {\n+    @Test\n+    public void testBackgroundLoadedBorderImageWhichFinishesLoadingHasListenerRemoved() {\n@@ -1118,1 +1209,2 @@\n-    @Test public void testBackgroundLoadedBorderImageWhichFinishesLoadingCausesRepaint() {\n+    @Test\n+    public void testBackgroundLoadedBorderImageWhichFinishesLoadingCausesRepaint() {\n@@ -1135,1 +1227,2 @@\n-    @Test public void testAnimatedBackgroundImageHasListenerInstalled() {\n+    @Test\n+    public void testAnimatedBackgroundImageHasListenerInstalled() {\n@@ -1143,1 +1236,2 @@\n-    @Test public void testAnimatedBackgroundImageRemovedFromRegionHasListenerRemoved() {\n+    @Test\n+    public void testAnimatedBackgroundImageRemovedFromRegionHasListenerRemoved() {\n@@ -1152,1 +1246,2 @@\n-    @Test public void testAnimatedBackgroundImageCausesRepaintWhenAnimationChanges() {\n+    @Test\n+    public void testAnimatedBackgroundImageCausesRepaintWhenAnimationChanges() {\n@@ -1163,1 +1258,2 @@\n-    @Test public void testAnimatedBorderImageHasListenerInstalled() {\n+    @Test\n+    public void testAnimatedBorderImageHasListenerInstalled() {\n@@ -1171,1 +1267,2 @@\n-    @Test public void testAnimatedBorderImageRemovedFromRegionHasListenerRemoved() {\n+    @Test\n+    public void testAnimatedBorderImageRemovedFromRegionHasListenerRemoved() {\n@@ -1180,1 +1277,2 @@\n-    @Test public void testAnimatedBorderImageCausesRepaintWhenAnimationChanges() {\n+    @Test\n+    public void testAnimatedBorderImageCausesRepaintWhenAnimationChanges() {\n@@ -1191,1 +1289,2 @@\n-    @Test public void testBorderChangeUpdatesTheInsets() {\n+    @Test\n+    public void testBorderChangeUpdatesTheInsets() {\n@@ -1225,1 +1324,2 @@\n-    @Test public void changingShapeElementsShouldResultInRender() {\n+    @Test\n+    public void changingShapeElementsShouldResultInRender() {\n@@ -1338,1 +1438,1 @@\n-                assertEquals(failMessage, snappedValue, snapOfSnappedValue, 0.0);\n+                assertEquals(snappedValue, snapOfSnappedValue, 0.0, failMessage);\n@@ -1348,1 +1448,1 @@\n-                assertEquals(failMessage, snappedValue, snapOfSnappedValue, 0.0);\n+                assertEquals(snappedValue, snapOfSnappedValue, 0.0, failMessage);\n@@ -1360,1 +1460,1 @@\n-                assertEquals(failMessage, snappedValue, snapOfSnappedValue, 0.0);\n+                assertEquals(snappedValue, snapOfSnappedValue, 0.0, failMessage);\n@@ -1370,1 +1470,1 @@\n-                assertEquals(failMessage, snappedValue, snapOfSnappedValue, 0.0);\n+                assertEquals(snappedValue, snapOfSnappedValue, 0.0, failMessage);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/RegionTest.java","additions":208,"deletions":108,"binary":false,"changes":316,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n@@ -41,1 +38,4 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -50,1 +50,2 @@\n-    @Test public void testNodeNotResizable() {\n+    @Test\n+    public void testNodeNotResizable() {\n@@ -55,1 +56,2 @@\n-    @Test public void testShapeNotResizable() {\n+    @Test\n+    public void testShapeNotResizable() {\n@@ -60,1 +62,2 @@\n-    @Test public void testTextNotResizable() {\n+    @Test\n+    public void testTextNotResizable() {\n@@ -66,1 +69,2 @@\n-\/\/    @Test public void testImageViewNotResizable() {\n+\/\/    @Test\n+\/\/    public void testImageViewNotResizable() {\n@@ -71,1 +75,2 @@\n-    @Test public void testParentNotResizable() {\n+    @Test\n+    public void testParentNotResizable() {\n@@ -76,1 +81,2 @@\n-    @Test public void testGroupNotResizable() {\n+    @Test\n+    public void testGroupNotResizable() {\n@@ -81,1 +87,2 @@\n-    @Test public void testRegionResizable() {\n+    @Test\n+    public void testRegionResizable() {\n@@ -88,1 +95,2 @@\n-    @Test public void testShapeMinPrefMaxWidthEqualLayoutBounds() {\n+    @Test\n+    public void testShapeMinPrefMaxWidthEqualLayoutBounds() {\n@@ -95,1 +103,2 @@\n-    @Test public void testShapeMinPrefMaxHeightEqualLayoutBounds() {\n+    @Test\n+    public void testShapeMinPrefMaxHeightEqualLayoutBounds() {\n@@ -102,1 +111,2 @@\n-    @Test public void testTextMinPrefMaxWidthEqualLayoutBounds() {\n+    @Test\n+    public void testTextMinPrefMaxWidthEqualLayoutBounds() {\n@@ -109,1 +119,2 @@\n-    @Test public void testTextMinPrefMaxHeightEqualLayoutBounds() {\n+    @Test\n+    public void testTextMinPrefMaxHeightEqualLayoutBounds() {\n@@ -116,1 +127,2 @@\n-    @Test public void testParentMinPrefMaxWidthAreEqual() {\n+    @Test\n+    public void testParentMinPrefMaxWidthAreEqual() {\n@@ -122,1 +134,2 @@\n-    @Test public void testParentMinPrefMaxHeightAreEqual() {\n+    @Test\n+    public void testParentMinPrefMaxHeightAreEqual() {\n@@ -130,1 +143,2 @@\n-    @Test public void testParentPrefWidthQueriesChildPrefWidth() {\n+    @Test\n+    public void testParentPrefWidthQueriesChildPrefWidth() {\n@@ -135,1 +149,2 @@\n-    @Test public void testParentPrefHeightQueriesChildPrefHeight() {\n+    @Test\n+    public void testParentPrefHeightQueriesChildPrefHeight() {\n@@ -140,1 +155,2 @@\n-    @Test public void testPanePrefWidthQueriesChildPrefWidth() {\n+    @Test\n+    public void testPanePrefWidthQueriesChildPrefWidth() {\n@@ -149,1 +165,2 @@\n-    @Test public void testPanePrefHeightQueriesChildPrefHeight() {\n+    @Test\n+    public void testPanePrefHeightQueriesChildPrefHeight() {\n@@ -158,1 +175,2 @@\n-    @Test public void testPanePrefWidthIncludesPadding() {\n+    @Test\n+    public void testPanePrefWidthIncludesPadding() {\n@@ -168,1 +186,2 @@\n-    @Test public void testPanePrefHeightIncludesPadding() {\n+    @Test\n+    public void testPanePrefHeightIncludesPadding() {\n@@ -180,1 +199,2 @@\n-    @Test public void testRelocateNonResizable() {\n+    @Test\n+    public void testRelocateNonResizable() {\n@@ -188,1 +208,2 @@\n-    @Test public void testRelocateResizable() {\n+    @Test\n+    public void testRelocateResizable() {\n@@ -196,1 +217,2 @@\n-    @Test public void testResizeNonResizableIsNoOp() {\n+    @Test\n+    public void testResizeNonResizableIsNoOp() {\n@@ -204,1 +226,2 @@\n-    @Test public void testResizeResizable() {\n+    @Test\n+    public void testResizeResizable() {\n@@ -212,1 +235,2 @@\n-    @Test public void testAutosize() {\n+    @Test\n+    public void testAutosize() {\n@@ -224,1 +248,2 @@\n-    @Test public void testResizeRelocateNonResizable() {\n+    @Test\n+    public void testResizeRelocateNonResizable() {\n@@ -234,1 +259,2 @@\n-    @Test public void testResizeRelocateResizable() {\n+    @Test\n+    public void testResizeRelocateResizable() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/ResizabilityTest.java","additions":57,"deletions":31,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n@@ -37,2 +35,4 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n@@ -44,1 +44,2 @@\n-    @Before public void setUp() {\n+    @BeforeEach\n+    public void setUp() {\n@@ -48,1 +49,2 @@\n-    @Test public void testStackPaneDefaults() {\n+    @Test\n+    public void testStackPaneDefaults() {\n@@ -52,1 +54,2 @@\n-    @Test public void testStackPaneNulls() {\n+    @Test\n+    public void testStackPaneNulls() {\n@@ -59,2 +62,2 @@\n-        assertNull(null, stack.getAlignment());\n-        assertNull(null, stack.alignmentProperty().get());\n+        assertNull(stack.getAlignment());\n+        assertNull(stack.alignmentProperty().get());\n@@ -63,1 +66,2 @@\n-    @Test public void testSimpleStackPane() {\n+    @Test\n+    public void testSimpleStackPane() {\n@@ -96,1 +100,2 @@\n-    @Test public void testStackPaneAlignmentTopLeft() {\n+    @Test\n+    public void testStackPaneAlignmentTopLeft() {\n@@ -114,1 +119,2 @@\n-    @Test public void testStackPaneAlignmentTopCenter() {\n+    @Test\n+    public void testStackPaneAlignmentTopCenter() {\n@@ -132,1 +138,2 @@\n-    @Test public void testStackPaneAlignmentTopRight() {\n+    @Test\n+    public void testStackPaneAlignmentTopRight() {\n@@ -150,1 +157,2 @@\n-    @Test public void testStackPaneAlignmentCenterLeft() {\n+    @Test\n+    public void testStackPaneAlignmentCenterLeft() {\n@@ -168,1 +176,2 @@\n-    @Test public void testStackPaneAlignmentCenter() {\n+    @Test\n+    public void testStackPaneAlignmentCenter() {\n@@ -186,1 +195,2 @@\n-    @Test public void testStackPaneAlignmentCenterRight() {\n+    @Test\n+    public void testStackPaneAlignmentCenterRight() {\n@@ -204,1 +214,2 @@\n-    @Test public void testStackPaneAlignmentBottomLeft() {\n+    @Test\n+    public void testStackPaneAlignmentBottomLeft() {\n@@ -222,1 +233,2 @@\n-    @Test public void testStackPaneAlignmentBottomCenter() {\n+    @Test\n+    public void testStackPaneAlignmentBottomCenter() {\n@@ -240,1 +252,2 @@\n-    @Test public void testStackPaneAlignmentBottomRight() {\n+    @Test\n+    public void testStackPaneAlignmentBottomRight() {\n@@ -258,1 +271,2 @@\n-    @Test public void testStackPaneAlignmentBaselineLeft() {\n+    @Test\n+    public void testStackPaneAlignmentBaselineLeft() {\n@@ -276,1 +290,2 @@\n-    @Test public void testStackPaneAlignmentBaselineCenter() {\n+    @Test\n+    public void testStackPaneAlignmentBaselineCenter() {\n@@ -294,1 +309,2 @@\n-    @Test public void testStackPaneAlignmentBaselineRight() {\n+    @Test\n+    public void testStackPaneAlignmentBaselineRight() {\n@@ -312,1 +328,2 @@\n-    @Test public void testStackPaneAlignmentBaselineLeftComputed() {\n+    @Test\n+    public void testStackPaneAlignmentBaselineLeftComputed() {\n@@ -334,1 +351,2 @@\n-    @Test public void testStackPaneAlignmentBaselineCenterComputed() {\n+    @Test\n+    public void testStackPaneAlignmentBaselineCenterComputed() {\n@@ -356,1 +374,2 @@\n-    @Test public void testStackPaneAlignmentBaselineRightComputed() {\n+    @Test\n+    public void testStackPaneAlignmentBaselineRightComputed() {\n@@ -377,1 +396,2 @@\n-    @Test public void testStackPaneContentBiasNullNoChildHasContentBias() {\n+    @Test\n+    public void testStackPaneContentBiasNullNoChildHasContentBias() {\n@@ -385,1 +405,2 @@\n-    @Test public void testStackPaneContentBiasHORIZONTALIfChildHORIZONTAL() {\n+    @Test\n+    public void testStackPaneContentBiasHORIZONTALIfChildHORIZONTAL() {\n@@ -397,1 +418,2 @@\n-    @Test public void testStackPaneContentBiasVERTICALIfChildVERTICAL() {\n+    @Test\n+    public void testStackPaneContentBiasVERTICALIfChildVERTICAL() {\n@@ -409,1 +431,2 @@\n-    @Test public void testStackPaneSetMarginConstraint() {\n+    @Test\n+    public void testStackPaneSetMarginConstraint() {\n@@ -422,1 +445,2 @@\n-    @Test public void testStackPaneMarginConstraint() {\n+    @Test\n+    public void testStackPaneMarginConstraint() {\n@@ -458,1 +482,2 @@\n-    @Test public void testStackPaneSetAlignmentConstraint() {\n+    @Test\n+    public void testStackPaneSetAlignmentConstraint() {\n@@ -470,1 +495,2 @@\n-    @Test public void testStackPaneAlignmentConstraint() {\n+    @Test\n+    public void testStackPaneAlignmentConstraint() {\n@@ -506,1 +532,2 @@\n-    @Test public void testStackPaneWithHorizontalBiasedChild() {\n+    @Test\n+    public void testStackPaneWithHorizontalBiasedChild() {\n@@ -531,1 +558,2 @@\n-    @Test public void testStackPaneWithVerticalBiasedChild() {\n+    @Test\n+    public void testStackPaneWithVerticalBiasedChild() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/StackPaneTest.java","additions":63,"deletions":35,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n@@ -44,1 +42,0 @@\n-import org.junit.Assert;\n@@ -46,2 +43,5 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -56,1 +56,2 @@\n-    @Before public void setUp() {\n+    @BeforeEach\n+    public void setUp() {\n@@ -80,1 +81,2 @@\n-    @Test public void testOrientationDefaultsToHorizontal() {\n+    @Test\n+    public void testOrientationDefaultsToHorizontal() {\n@@ -84,1 +86,2 @@\n-    @Test public void testPrefColumnsDefault() {\n+    @Test\n+    public void testPrefColumnsDefault() {\n@@ -88,1 +91,2 @@\n-    @Test public void testPrefRowsDefault() {\n+    @Test\n+    public void testPrefRowsDefault() {\n@@ -92,1 +96,2 @@\n-    @Test public void testPrefTileWidthDefaultsToUSE_COMPUTED_SIZE() {\n+    @Test\n+    public void testPrefTileWidthDefaultsToUSE_COMPUTED_SIZE() {\n@@ -96,1 +101,2 @@\n-    @Test public void testPrefTileHeightDefaultsToUSE_COMPUTED_SIZE() {\n+    @Test\n+    public void testPrefTileHeightDefaultsToUSE_COMPUTED_SIZE() {\n@@ -100,1 +106,2 @@\n-    @Test public void testAlignmentDefaultsToTopLeft() {\n+    @Test\n+    public void testAlignmentDefaultsToTopLeft() {\n@@ -104,1 +111,2 @@\n-    @Test public void testTileAlignmentDefaultsToCenter() {\n+    @Test\n+    public void testTileAlignmentDefaultsToCenter() {\n@@ -108,1 +116,2 @@\n-    @Test public void testTilePaneNulls() {\n+    @Test\n+    public void testTilePaneNulls() {\n@@ -117,6 +126,6 @@\n-        assertNull(null, tilepane.getAlignment());\n-        assertNull(null, tilepane.getTileAlignment());\n-        assertNull(null, tilepane.getOrientation());\n-        assertNull(null, tilepane.alignmentProperty().get());\n-        assertNull(null, tilepane.tileAlignmentProperty().get());\n-        assertNull(null, tilepane.orientationProperty().get());\n+        assertNull(tilepane.getAlignment());\n+        assertNull(tilepane.getTileAlignment());\n+        assertNull(tilepane.getOrientation());\n+        assertNull(tilepane.alignmentProperty().get());\n+        assertNull(tilepane.tileAlignmentProperty().get());\n+        assertNull(tilepane.orientationProperty().get());\n@@ -125,1 +134,2 @@\n-    @Test public void testHorizontalTilePaneMinSize() {\n+    @Test\n+    public void testHorizontalTilePaneMinSize() {\n@@ -130,1 +140,2 @@\n-    @Test public void testHorizontalTilePanePrefSize() {\n+    @Test\n+    public void testHorizontalTilePanePrefSize() {\n@@ -135,1 +146,2 @@\n-    @Test public void testVerticalTilePaneMinSize() {\n+    @Test\n+    public void testVerticalTilePaneMinSize() {\n@@ -140,1 +152,2 @@\n-    @Test public void testVerticalTilePanePrefSize() {\n+    @Test\n+    public void testVerticalTilePanePrefSize() {\n@@ -146,1 +159,2 @@\n-    @Test public void testEmptyHorizontalTilePaneMinWidthIsZero() {\n+    @Test\n+    public void testEmptyHorizontalTilePaneMinWidthIsZero() {\n@@ -152,1 +166,2 @@\n-    @Test public void testEmptyHorizontalTilePaneMinHeightIsZero() {\n+    @Test\n+    public void testEmptyHorizontalTilePaneMinHeightIsZero() {\n@@ -158,1 +173,2 @@\n-    @Test public void testEmptyVerticalTilePaneMinWidthIsZero() {\n+    @Test\n+    public void testEmptyVerticalTilePaneMinWidthIsZero() {\n@@ -164,1 +180,2 @@\n-    @Test public void testEmptyVerticalTilePaneMinHeightIsZero() {\n+    @Test\n+    public void testEmptyVerticalTilePaneMinHeightIsZero() {\n@@ -170,1 +187,2 @@\n-    @Test public void testLayoutWithPrefSize() {\n+    @Test\n+    public void testLayoutWithPrefSize() {\n@@ -188,1 +206,2 @@\n-    @Test public void testLayoutWithLargerThanPrefSize() {\n+    @Test\n+    public void testLayoutWithLargerThanPrefSize() {\n@@ -205,1 +224,2 @@\n-    @Test public void testHorizontalTilePaneAlignmentTopLeft() {\n+    @Test\n+    public void testHorizontalTilePaneAlignmentTopLeft() {\n@@ -224,1 +244,2 @@\n-    @Test public void testHorizontalTilePaneAlignmentTopCenter() {\n+    @Test\n+    public void testHorizontalTilePaneAlignmentTopCenter() {\n@@ -243,1 +264,2 @@\n-    @Test public void testHorizontalTilePaneAlignmentTopRight() {\n+    @Test\n+    public void testHorizontalTilePaneAlignmentTopRight() {\n@@ -262,1 +284,2 @@\n-    @Test public void testHorizontalTilePaneAlignmentCenterLeft() {\n+    @Test\n+    public void testHorizontalTilePaneAlignmentCenterLeft() {\n@@ -281,1 +304,2 @@\n-    @Test public void testHorizontalTilePaneAlignmentCenter() {\n+    @Test\n+    public void testHorizontalTilePaneAlignmentCenter() {\n@@ -300,1 +324,2 @@\n-    @Test public void testHorizontalTilePaneAlignmentCenterRight() {\n+    @Test\n+    public void testHorizontalTilePaneAlignmentCenterRight() {\n@@ -319,1 +344,2 @@\n-    @Test public void testHorizontalTilePaneAlignmentBottomLeft() {\n+    @Test\n+    public void testHorizontalTilePaneAlignmentBottomLeft() {\n@@ -338,1 +364,2 @@\n-    @Test public void testHorizontalTilePaneAlignmentBottomCenter() {\n+    @Test\n+    public void testHorizontalTilePaneAlignmentBottomCenter() {\n@@ -357,1 +384,2 @@\n-    @Test public void testHorizontalTilePaneAlignmentBottomRight() {\n+    @Test\n+    public void testHorizontalTilePaneAlignmentBottomRight() {\n@@ -376,1 +404,2 @@\n-    @Test public void testVerticalTilePaneAlignmentTopLeft() {\n+    @Test\n+    public void testVerticalTilePaneAlignmentTopLeft() {\n@@ -395,1 +424,2 @@\n-    @Test public void testVerticalTilePaneAlignmentTopCenter() {\n+    @Test\n+    public void testVerticalTilePaneAlignmentTopCenter() {\n@@ -414,1 +444,2 @@\n-    @Test public void testVerticalTilePaneAlignmentTopRight() {\n+    @Test\n+    public void testVerticalTilePaneAlignmentTopRight() {\n@@ -433,1 +464,2 @@\n-    @Test public void testVerticalTilePaneAlignmentCenterLeft() {\n+    @Test\n+    public void testVerticalTilePaneAlignmentCenterLeft() {\n@@ -452,1 +484,2 @@\n-    @Test public void testVerticalTilePaneAlignmentCenter() {\n+    @Test\n+    public void testVerticalTilePaneAlignmentCenter() {\n@@ -471,1 +504,2 @@\n-    @Test public void testVerticalTilePaneAlignmentCenterRight() {\n+    @Test\n+    public void testVerticalTilePaneAlignmentCenterRight() {\n@@ -490,1 +524,2 @@\n-    @Test public void testVerticalTilePaneAlignmentBottomLeft() {\n+    @Test\n+    public void testVerticalTilePaneAlignmentBottomLeft() {\n@@ -509,1 +544,2 @@\n-    @Test public void testVerticalTilePaneAlignmentBottomCenter() {\n+    @Test\n+    public void testVerticalTilePaneAlignmentBottomCenter() {\n@@ -528,1 +564,2 @@\n-    @Test public void testVerticalTilePaneAlignmentBottomRight() {\n+    @Test\n+    public void testVerticalTilePaneAlignmentBottomRight() {\n@@ -547,1 +584,2 @@\n-    @Test public void testTileAlignmentTopLeft() {\n+    @Test\n+    public void testTileAlignmentTopLeft() {\n@@ -566,1 +604,2 @@\n-    @Test public void testTileAlignmentTopCenter() {\n+    @Test\n+    public void testTileAlignmentTopCenter() {\n@@ -585,1 +624,2 @@\n-    @Test public void testTileAlignmentTopRight() {\n+    @Test\n+    public void testTileAlignmentTopRight() {\n@@ -604,1 +644,2 @@\n-    @Test public void testTileAlignmentCenterLeft() {\n+    @Test\n+    public void testTileAlignmentCenterLeft() {\n@@ -623,1 +664,2 @@\n-    @Test public void testTileAlignmentCenter() {\n+    @Test\n+    public void testTileAlignmentCenter() {\n@@ -642,1 +684,2 @@\n-    @Test public void testTileAlignmentCenterRight() {\n+    @Test\n+    public void testTileAlignmentCenterRight() {\n@@ -661,1 +704,2 @@\n-    @Test public void testTileAlignmentBottomLeft() {\n+    @Test\n+    public void testTileAlignmentBottomLeft() {\n@@ -680,1 +724,2 @@\n-    @Test public void testTileAlignmentBottomCenter() {\n+    @Test\n+    public void testTileAlignmentBottomCenter() {\n@@ -699,1 +744,2 @@\n-    @Test public void testTileAlignmentBottomRight() {\n+    @Test\n+    public void testTileAlignmentBottomRight() {\n@@ -718,1 +764,2 @@\n-    @Test public void testSetMarginConstraint() {\n+    @Test\n+    public void testSetMarginConstraint() {\n@@ -731,1 +778,2 @@\n-    @Test public void testMarginConstraint() {\n+    @Test\n+    public void testMarginConstraint() {\n@@ -766,1 +814,2 @@\n-    @Test public void testSetAlignmentConstraint() {\n+    @Test\n+    public void testSetAlignmentConstraint() {\n@@ -778,1 +827,2 @@\n-    @Test public void testHorizontalTilePaneAlignmentConstraint() {\n+    @Test\n+    public void testHorizontalTilePaneAlignmentConstraint() {\n@@ -825,1 +875,2 @@\n-    @Test public void testWithHorizontalBiasedChild() {\n+    @Test\n+    public void testWithHorizontalBiasedChild() {\n@@ -849,1 +900,2 @@\n-    @Test public void testWithVerticalBiasedChild() {\n+    @Test\n+    public void testWithVerticalBiasedChild() {\n@@ -872,1 +924,2 @@\n-    @Test public void testHorizontalTilePaneWithFixedTileWidth() {\n+    @Test\n+    public void testHorizontalTilePaneWithFixedTileWidth() {\n@@ -909,1 +962,2 @@\n-    @Test public void testHorizontalTilePaneWithFixedTileHeight() {\n+    @Test\n+    public void testHorizontalTilePaneWithFixedTileHeight() {\n@@ -947,1 +1001,2 @@\n-    @Test public void testHorizontalTilePaneWithPrefSize() {\n+    @Test\n+    public void testHorizontalTilePaneWithPrefSize() {\n@@ -977,1 +1032,2 @@\n-    @Test public void testVerticalTilePaneWithPrefSize() {\n+    @Test\n+    public void testVerticalTilePaneWithPrefSize() {\n@@ -1005,1 +1061,2 @@\n-    @Test public void testTilePaneWithBaselineAlignment() {\n+    @Test\n+    public void testTilePaneWithBaselineAlignment() {\n@@ -1026,1 +1083,2 @@\n-    @Test public void testCSSsetPrefTileWidthAndHeight_RT20388() {\n+    @Test\n+    public void testCSSsetPrefTileWidthAndHeight_RT20388() {\n@@ -1038,1 +1096,1 @@\n-            Assert.fail(e.toString());\n+            fail(e.toString());\n@@ -1042,1 +1100,2 @@\n-    @Test public void testCSSsetPrefRow_RT20437() {\n+    @Test\n+    public void testCSSsetPrefRow_RT20437() {\n@@ -1054,1 +1113,1 @@\n-            Assert.fail(e.toString());\n+            fail(e.toString());\n@@ -1059,1 +1118,2 @@\n-    @Test public void testCSSsetPrefColumns_RT22929() {\n+    @Test\n+    public void testCSSsetPrefColumns_RT22929() {\n@@ -1072,1 +1132,1 @@\n-            Assert.fail(e.toString());\n+            fail(e.toString());\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/TilePaneTest.java","additions":135,"deletions":75,"binary":false,"changes":210,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n@@ -39,2 +36,5 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -46,1 +46,2 @@\n-    @Before public void setUp() {\n+    @BeforeEach\n+    public void setUp() {\n@@ -50,1 +51,2 @@\n-    @Test public void testVBoxDefaults() {\n+    @Test\n+    public void testVBoxDefaults() {\n@@ -56,1 +58,2 @@\n-    @Test public void testVBoxNulls() {\n+    @Test\n+    public void testVBoxNulls() {\n@@ -63,2 +66,2 @@\n-        assertNull(null, vbox.getAlignment());\n-        assertNull(null, vbox.alignmentProperty().get());\n+        assertNull(vbox.getAlignment());\n+        assertNull(vbox.alignmentProperty().get());\n@@ -67,1 +70,2 @@\n-    @Test public void testSimpleVBox() {\n+    @Test\n+    public void testSimpleVBox() {\n@@ -100,1 +104,2 @@\n-    @Test public void testVBoxSpacing() {\n+    @Test\n+    public void testVBoxSpacing() {\n@@ -134,1 +139,2 @@\n-    @Test public void testVBoxFillWidth() {\n+    @Test\n+    public void testVBoxFillWidth() {\n@@ -169,1 +175,2 @@\n-    @Test public void testVBoxAlignmentTopLeft() {\n+    @Test\n+    public void testVBoxAlignmentTopLeft() {\n@@ -187,1 +194,2 @@\n-    @Test public void testVBoxAlignmentTopCenter() {\n+    @Test\n+    public void testVBoxAlignmentTopCenter() {\n@@ -205,1 +213,2 @@\n-    @Test public void testVBoxAlignmentTopRight() {\n+    @Test\n+    public void testVBoxAlignmentTopRight() {\n@@ -223,1 +232,2 @@\n-    @Test public void testVBoxAlignmentCenterLeft() {\n+    @Test\n+    public void testVBoxAlignmentCenterLeft() {\n@@ -241,1 +251,2 @@\n-    @Test public void testVBoxAlignmentCenter() {\n+    @Test\n+    public void testVBoxAlignmentCenter() {\n@@ -259,1 +270,2 @@\n-    @Test public void testVBoxAlignmentCenterRight() {\n+    @Test\n+    public void testVBoxAlignmentCenterRight() {\n@@ -277,1 +289,2 @@\n-    @Test public void testVBoxAlignmentBottomLeft() {\n+    @Test\n+    public void testVBoxAlignmentBottomLeft() {\n@@ -295,1 +308,2 @@\n-    @Test public void testVBoxAlignmentBottomCenter() {\n+    @Test\n+    public void testVBoxAlignmentBottomCenter() {\n@@ -313,1 +327,2 @@\n-    @Test public void testVBoxAlignmentBottomRight() {\n+    @Test\n+    public void testVBoxAlignmentBottomRight() {\n@@ -331,1 +346,2 @@\n-    @Test public void testVBoxContentBiasNullNoChildHasContentBias() {\n+    @Test\n+    public void testVBoxContentBiasNullNoChildHasContentBias() {\n@@ -342,1 +358,2 @@\n-    @Test public void testVBoxContentBiasHORIZONTALifChildHORIZONTAL() {\n+    @Test\n+    public void testVBoxContentBiasHORIZONTALifChildHORIZONTAL() {\n@@ -351,1 +368,2 @@\n-    @Test public void testVBoxWithHorizontalContentBiasAtPrefSize() {\n+    @Test\n+    public void testVBoxWithHorizontalContentBiasAtPrefSize() {\n@@ -377,1 +395,2 @@\n-    @Test public void testVBoxWithHorizontalContentBiasWithHorizontalShrinking() {\n+    @Test\n+    public void testVBoxWithHorizontalContentBiasWithHorizontalShrinking() {\n@@ -402,1 +421,2 @@\n-    @Test public void testVBoxWithHorizontalContentBiasWithHorizontalGrowing() {\n+    @Test\n+    public void testVBoxWithHorizontalContentBiasWithHorizontalGrowing() {\n@@ -427,1 +447,2 @@\n-    @Test public void testVBoxContentBiasVERTICALIfChildVERTICAL() {\n+    @Test\n+    public void testVBoxContentBiasVERTICALIfChildVERTICAL() {\n@@ -436,1 +457,2 @@\n-    @Test public void testVBoxWithVerticalContentBiasAtPrefSize() {\n+    @Test\n+    public void testVBoxWithVerticalContentBiasAtPrefSize() {\n@@ -462,1 +484,2 @@\n-    @Test public void testVBoxWithVerticalContentBiasWithVerticalShrinking() {\n+    @Test\n+    public void testVBoxWithVerticalContentBiasWithVerticalShrinking() {\n@@ -487,1 +510,2 @@\n-    @Test public void testVBoxWithVerticalContentBiasWithVerticalGrowingFillWidthFalse() {\n+    @Test\n+    public void testVBoxWithVerticalContentBiasWithVerticalGrowingFillWidthFalse() {\n@@ -515,1 +539,2 @@\n-    @Test public void testVBoxWithVerticalContentBiasWithVerticalGrowingFillWidthTrue() {\n+    @Test\n+    public void testVBoxWithVerticalContentBiasWithVerticalGrowingFillWidthTrue() {\n@@ -543,1 +568,2 @@\n-    @Test public void testVBoxContentBiasHORIZONTALIfChildHORIZONTALAndFillWidthTrue() {\n+    @Test\n+    public void testVBoxContentBiasHORIZONTALIfChildHORIZONTALAndFillWidthTrue() {\n@@ -558,1 +584,2 @@\n-\/\/    @Test public void testVBoxContentBiasNullIfChildHORIZONTALAndFillWidthFalse() {\n+\/\/    @Test\n+\/\/    public void testVBoxContentBiasNullIfChildHORIZONTALAndFillWidthFalse() {\n@@ -571,1 +598,2 @@\n-\/\/    @Test public void testVBoxContentBiasNullIfChildVERTICALAndFillWidthTrue() {\n+\/\/    @Test\n+\/\/    public void testVBoxContentBiasNullIfChildVERTICALAndFillWidthTrue() {\n@@ -584,1 +612,2 @@\n-\/\/    @Test public void testVBoxContentBiasNullIfChildVERTICALAndFillWidthFalse() {\n+\/\/    @Test\n+\/\/    public void testVBoxContentBiasNullIfChildVERTICALAndFillWidthFalse() {\n@@ -597,1 +626,2 @@\n-    @Test public void testVBoxSetMarginConstraint() {\n+    @Test\n+    public void testVBoxSetMarginConstraint() {\n@@ -610,1 +640,2 @@\n-    @Test public void testVBoxMarginConstraint() {\n+    @Test\n+    public void testVBoxMarginConstraint() {\n@@ -646,1 +677,2 @@\n-    @Test public void testVBoxSetVgrowConstraint() {\n+    @Test\n+    public void testVBoxSetVgrowConstraint() {\n@@ -658,1 +690,2 @@\n-    @Test public void testVBoxHgrowConstraint() {\n+    @Test\n+    public void testVBoxHgrowConstraint() {\n@@ -694,1 +727,2 @@\n-    @Test public void testVBoxWithHorizontalBiasedChild() {\n+    @Test\n+    public void testVBoxWithHorizontalBiasedChild() {\n@@ -718,1 +752,2 @@\n-    @Test public void testVBoxWithVerticalBiasedChild() {\n+    @Test\n+    public void testVBoxWithVerticalBiasedChild() {\n@@ -745,1 +780,2 @@\n-    @Test public void testMaxHeightHonoredWhenGrowing() {\n+    @Test\n+    public void testMaxHeightHonoredWhenGrowing() {\n@@ -761,1 +797,2 @@\n-    @Test public void testLayoutWhenChildrenAreRemoved_RT19406() {\n+    @Test\n+    public void testLayoutWhenChildrenAreRemoved_RT19406() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/VBoxTest.java","additions":82,"deletions":45,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,5 +34,7 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -358,1 +360,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -360,1 +362,3 @@\n-        Color.web(\"#aabbccddee\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"#aabbccddee\");\n+        });\n@@ -363,1 +367,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -365,1 +369,3 @@\n-        Color.web(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Color.web(null);\n+        });\n@@ -368,1 +374,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -370,1 +376,3 @@\n-        Color.web(\"\", 0.5);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"\", 0.5);\n+        });\n@@ -390,1 +398,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -392,1 +400,3 @@\n-        Color.web(\"0xaabbccddee\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"0xaabbccddee\");\n+        });\n@@ -429,1 +439,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -431,1 +441,3 @@\n-        Color.web(\"foobar\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"foobar\");\n+        });\n@@ -656,1 +668,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -658,1 +670,3 @@\n-        Color.web(\"rgb(100, 100)\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"rgb(100, 100)\");\n+        });\n@@ -661,1 +675,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -663,1 +677,3 @@\n-        Color.web(\"rgb(100)\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"rgb(100)\");\n+        });\n@@ -666,1 +682,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -668,1 +684,3 @@\n-        Color.web(\"rgb()\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"rgb()\");\n+        });\n@@ -671,1 +689,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -673,1 +691,3 @@\n-        Color.web(\"rgb 100, 100, 100\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"rgb 100, 100, 100\");\n+        });\n@@ -676,1 +696,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -678,1 +698,3 @@\n-        Color.web(\"rgb(100, 100, 100\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"rgb(100, 100, 100\");\n+        });\n@@ -681,1 +703,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -683,1 +705,3 @@\n-        Color.web(\"rgba(100, 100, 100)\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"rgba(100, 100, 100)\");\n+        });\n@@ -686,1 +710,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -688,1 +712,3 @@\n-        Color.web(\"rgba(100, 100)\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"rgba(100, 100)\");\n+        });\n@@ -691,1 +717,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -693,1 +719,3 @@\n-        Color.web(\"rgba(100)\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"rgba(100)\");\n+        });\n@@ -696,1 +724,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -698,1 +726,3 @@\n-        Color.web(\"rgba()\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"rgba()\");\n+        });\n@@ -701,1 +731,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -703,1 +733,3 @@\n-        Color.web(\"rgba 100, 100, 100\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"rgba 100, 100, 100\");\n+        });\n@@ -706,1 +738,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -708,1 +740,3 @@\n-        Color.web(\"rgba(100, 100, 100, 0.5\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"rgba(100, 100, 100, 0.5\");\n+        });\n@@ -711,1 +745,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -713,1 +747,3 @@\n-        Color.web(\"hsl(240, 50%)\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"hsl(240, 50%)\");\n+        });\n@@ -716,1 +752,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -718,1 +754,3 @@\n-        Color.web(\"hsl(240)\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"hsl(240)\");\n+        });\n@@ -721,1 +759,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -723,1 +761,3 @@\n-        Color.web(\"hsl()\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"hsl()\");\n+        });\n@@ -726,1 +766,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -728,1 +768,3 @@\n-        Color.web(\"hsl 240, 50%, 50%\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"hsl 240, 50%, 50%\");\n+        });\n@@ -731,1 +773,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -733,1 +775,3 @@\n-        Color.web(\"hsl(240, 50%, 50%\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"hsl(240, 50%, 50%\");\n+        });\n@@ -736,1 +780,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -738,1 +782,3 @@\n-        Color.web(\"hsla(240, 50%, 50%)\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"hsla(240, 50%, 50%)\");\n+        });\n@@ -741,1 +787,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -743,1 +789,3 @@\n-        Color.web(\"hsla(240, 50%)\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"hsla(240, 50%)\");\n+        });\n@@ -746,1 +794,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -748,1 +796,3 @@\n-        Color.web(\"hsla(240)\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"hsla(240)\");\n+        });\n@@ -751,1 +801,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -753,1 +803,3 @@\n-        Color.web(\"hsla()\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"hsla()\");\n+        });\n@@ -756,1 +808,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -758,1 +810,3 @@\n-        Color.web(\"hsla 240, 50%, 50%, 0.5\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"hsla 240, 50%, 50%, 0.5\");\n+        });\n@@ -761,1 +815,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -763,1 +817,3 @@\n-        Color.web(\"hsla(240, 50%, 50%, 0.5\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Color.web(\"hsla(240, 50%, 50%, 0.5\");\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/paint\/ColorTest.java","additions":116,"deletions":60,"binary":false,"changes":176,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n@@ -36,2 +31,0 @@\n-import org.junit.Test;\n-\n@@ -43,0 +36,7 @@\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/paint\/ImagePatternTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,7 +37,9 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -84,1 +86,1 @@\n-    @Test(expected=UnsupportedOperationException.class)\n+    @Test\n@@ -86,2 +88,3 @@\n-        LinearGradient gradient = new LinearGradient(0, 0, 1, 1, true,\n-                CycleMethod.NO_CYCLE, twoStopsWithNulls);\n+        assertThrows(UnsupportedOperationException.class, () -> {\n+            LinearGradient gradient = new LinearGradient(0, 0, 1, 1, true,\n+                    CycleMethod.NO_CYCLE, twoStopsWithNulls);\n@@ -89,2 +92,3 @@\n-        List<Stop> returned = gradient.getStops();\n-        returned.set(0, stop2);\n+            List<Stop> returned = gradient.getStops();\n+            returned.set(0, stop2);\n+        });\n@@ -190,1 +194,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -192,1 +196,3 @@\n-        LinearGradient.valueOf(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            LinearGradient.valueOf(null);\n+        });\n@@ -195,1 +201,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -197,1 +203,3 @@\n-        LinearGradient.valueOf(\"\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            LinearGradient.valueOf(\"\");\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/paint\/LinearGradientTest.java","additions":25,"deletions":17,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import static org.junit.Assert.*;\n@@ -32,1 +31,3 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/paint\/PhongMaterialTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,7 +37,9 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -85,1 +87,1 @@\n-    @Test(expected=UnsupportedOperationException.class)\n+    @Test\n@@ -87,2 +89,3 @@\n-        RadialGradient gradient = new RadialGradient(0, 0, 1, 1, 2, true,\n-                CycleMethod.NO_CYCLE, twoStops);\n+        assertThrows(UnsupportedOperationException.class, () -> {\n+            RadialGradient gradient = new RadialGradient(0, 0, 1, 1, 2, true,\n+                    CycleMethod.NO_CYCLE, twoStops);\n@@ -90,2 +93,3 @@\n-        List<Stop> returned = gradient.getStops();\n-        returned.set(0, stop2);\n+            List<Stop> returned = gradient.getStops();\n+            returned.set(0, stop2);\n+        });\n@@ -213,1 +217,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -215,1 +219,3 @@\n-        RadialGradient.valueOf(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            RadialGradient.valueOf(null);\n+        });\n@@ -218,1 +224,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -220,1 +226,3 @@\n-        RadialGradient.valueOf(\"\");\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            RadialGradient.valueOf(\"\");\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/paint\/RadialGradientTest.java","additions":25,"deletions":17,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-\n@@ -38,1 +36,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/paint\/StopListTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,4 +30,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n@@ -35,1 +31,5 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/paint\/StopTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,3 +34,0 @@\n-\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n@@ -39,0 +36,5 @@\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n@@ -41,1 +43,2 @@\n-    @Test public void testPropertyPropagation_visible() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_visible() throws Exception {\n@@ -46,1 +49,2 @@\n-    @Test public void testPropertyPropagation_centerX() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_centerX() throws Exception {\n@@ -51,1 +55,2 @@\n-    @Test public void testPropertyPropagation_centerY() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_centerY() throws Exception {\n@@ -56,1 +61,2 @@\n-    @Test public void testPropertyPropagation_radiusX() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_radiusX() throws Exception {\n@@ -61,1 +67,2 @@\n-    @Test public void testPropertyPropagation_radiusY() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_radiusY() throws Exception {\n@@ -66,1 +73,2 @@\n-    @Test public void testPropertyPropagation_startAngle() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_startAngle() throws Exception {\n@@ -71,1 +79,2 @@\n-    @Test public void testPropertyPropagation_length() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_length() throws Exception {\n@@ -76,1 +85,2 @@\n-    @Test public void testBoundPropertySync_length() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_length() throws Exception {\n@@ -82,1 +92,2 @@\n-    @Test public void testBoundProperySync_startAngle() throws Exception {\n+    @Test\n+    public void testBoundProperySync_startAngle() throws Exception {\n@@ -88,1 +99,2 @@\n-    @Test public void testBoundPropertySync_radiusY() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_radiusY() throws Exception {\n@@ -94,1 +106,2 @@\n-    @Test public void testBoundPropertySync_radiusX() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_radiusX() throws Exception {\n@@ -100,1 +113,2 @@\n-    @Test public void testBoundPropertySync_centerY() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_centerY() throws Exception {\n@@ -106,1 +120,2 @@\n-    @Test public void testBoundPropertySync_centerX() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_centerX() throws Exception {\n@@ -112,1 +127,2 @@\n-    @Test public void toStringShouldReturnNonEmptyString() {\n+    @Test\n+    public void toStringShouldReturnNonEmptyString() {\n@@ -118,1 +134,2 @@\n-    @Test public void testNullType() {\n+    @Test\n+    public void testNullType() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/ArcTest.java","additions":36,"deletions":19,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.junit.Test;\n@@ -44,1 +43,4 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -48,1 +50,2 @@\n-    @Test public void testSetGetX() throws Exception {\n+    @Test\n+    public void testSetGetX() throws Exception {\n@@ -52,1 +55,2 @@\n-    @Test public void testSetGetY() throws Exception {\n+    @Test\n+    public void testSetGetY() throws Exception {\n@@ -56,1 +60,2 @@\n-    @Test public void testSetGetRadiusX() throws Exception {\n+    @Test\n+    public void testSetGetRadiusX() throws Exception {\n@@ -60,1 +65,2 @@\n-    @Test public void testSetGetRadiusY() throws Exception {\n+    @Test\n+    public void testSetGetRadiusY() throws Exception {\n@@ -65,1 +71,2 @@\n-    @Test public void testSetGetXAxisRotation() throws Exception {\n+    @Test\n+    public void testSetGetXAxisRotation() throws Exception {\n@@ -69,1 +76,2 @@\n-    @Test public void testSetGetLargeArcFlag() throws Exception {\n+    @Test\n+    public void testSetGetLargeArcFlag() throws Exception {\n@@ -73,1 +81,2 @@\n-    @Test public void testSetGetSweepFlag() throws Exception {\n+    @Test\n+    public void testSetGetSweepFlag() throws Exception {\n@@ -79,1 +88,2 @@\n-    @Test public void testDoublePropertySynced_X() throws Exception {\n+    @Test\n+    public void testDoublePropertySynced_X() throws Exception {\n@@ -83,1 +93,2 @@\n-    @Test public void testDoublePropertySynced_Y() throws Exception {\n+    @Test\n+    public void testDoublePropertySynced_Y() throws Exception {\n@@ -87,1 +98,2 @@\n-    @Test public void toStringShouldReturnNonEmptyString() {\n+    @Test\n+    public void toStringShouldReturnNonEmptyString() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/ArcToTest.java","additions":25,"deletions":13,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -37,0 +32,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -42,17 +38,10 @@\n-    public ArcTo_onInvalidate_Test(Configuration config) {\n-        super(config);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]> data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(ArcTo.class, \"x\", 100.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})},\n-            {new Configuration(ArcTo.class, \"y\", 100.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})},\n-            {new Configuration(ArcTo.class, \"radiusX\", 10.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})},\n-            {new Configuration(ArcTo.class, \"radiusY\", 122.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})},\n-            {new Configuration(ArcTo.class, \"xAxisRotation\", 45.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})},\n-            {new Configuration(ArcTo.class, \"largeArcFlag\", true, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})},\n-            {new Configuration(ArcTo.class, \"sweepFlag\", true, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})}\n-\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(ArcTo.class, \"x\", 100.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS}) ),\n+            Arguments.of( new Configuration(ArcTo.class, \"y\", 100.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS}) ),\n+            Arguments.of( new Configuration(ArcTo.class, \"radiusX\", 10.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS}) ),\n+            Arguments.of( new Configuration(ArcTo.class, \"radiusY\", 122.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS}) ),\n+            Arguments.of( new Configuration(ArcTo.class, \"xAxisRotation\", 45.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS}) ),\n+            Arguments.of( new Configuration(ArcTo.class, \"largeArcFlag\", true, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS}) ),\n+            Arguments.of( new Configuration(ArcTo.class, \"sweepFlag\", true, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS}) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/ArcTo_onInvalidate_Test.java","additions":14,"deletions":25,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -32,4 +31,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -38,1 +34,0 @@\n-@RunWith(Parameterized.class)\n@@ -40,2 +35,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -44,1 +39,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -54,5 +49,1 @@\n-        });\n-    }\n-\n-    public ArcTo_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/ArcTo_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -38,0 +33,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -40,1 +37,0 @@\n-@RunWith(Parameterized.class)\n@@ -43,16 +39,10 @@\n-    public Arc_onInvalidate_Test(Configuration configuration) {\n-        super(configuration);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]>data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(Arc.class, \"centerX\", 222.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(Arc.class, \"centerY\", 111.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(Arc.class, \"startAngle\", 10.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(Arc.class, \"length\", 180.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(Arc.class, \"radiusX\", 123.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(Arc.class, \"radiusY\", 321.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(Arc.class, \"type\", ArcType.ROUND, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})}\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(Arc.class, \"centerX\", 222.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Arc.class, \"centerY\", 111.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Arc.class, \"startAngle\", 10.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Arc.class, \"length\", 180.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Arc.class, \"radiusX\", 123.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Arc.class, \"radiusY\", 321.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Arc.class, \"type\", ArcType.ROUND, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/Arc_onInvalidate_Test.java","additions":14,"deletions":24,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -33,4 +32,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +35,0 @@\n-@RunWith(Parameterized.class)\n@@ -41,2 +36,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -45,1 +40,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -53,5 +48,1 @@\n-        });\n-    }\n-\n-    public Arc_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/Arc_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import static org.junit.Assert.assertEquals;\n@@ -38,1 +37,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -67,1 +67,2 @@\n-    public @Test void testBoundsForCircle() {\n+    @Test\n+    public void testBoundsForCircle() {\n@@ -80,1 +81,2 @@\n-    public @Test void testBoundsForCubicCurve() {\n+    @Test\n+    public void testBoundsForCubicCurve() {\n@@ -95,1 +97,2 @@\n-    public @Test void testBoundsForEllipse() {\n+    @Test\n+    public void testBoundsForEllipse() {\n@@ -108,1 +111,2 @@\n-    public @Test void testBoundsForLine() {\n+    @Test\n+    public void testBoundsForLine() {\n@@ -117,1 +121,2 @@\n-    public @Test void testBoundsForPath() {\n+    @Test\n+    public void testBoundsForPath() {\n@@ -129,1 +134,2 @@\n-    public @Test void testBoundsForPolygon() {\n+    @Test\n+    public void testBoundsForPolygon() {\n@@ -142,1 +148,2 @@\n-    public @Test void testBoundsForPolyline() {\n+    @Test\n+    public void testBoundsForPolyline() {\n@@ -150,1 +157,2 @@\n-    public @Test void testBoundsForQuadCurve() {\n+    @Test\n+    public void testBoundsForQuadCurve() {\n@@ -157,1 +165,2 @@\n-    public @Test void testBoundsForRectangle() {\n+    @Test\n+    public void testBoundsForRectangle() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/BoundsTest.java","additions":21,"deletions":12,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,4 @@\n-import static org.junit.Assert.*;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/BoxTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import org.junit.Test;\n@@ -42,0 +41,3 @@\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -43,2 +45,0 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n@@ -49,1 +49,2 @@\n-    @Test public void testPropertyPropagation_visible() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_visible() throws Exception {\n@@ -54,1 +55,2 @@\n-    @Test public void testPropertyPropagation_centerX() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_centerX() throws Exception {\n@@ -59,1 +61,2 @@\n-    @Test public void testPropertyPropagation_centerY() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_centerY() throws Exception {\n@@ -64,1 +67,2 @@\n-    @Test public void testPropertyPropagation_radius() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_radius() throws Exception {\n@@ -69,1 +73,2 @@\n-    @Test public void testBoundPropertySync_centerX() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_centerX() throws Exception {\n@@ -76,1 +81,2 @@\n-    @Test public void testBoundPropertySync_centerY() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_centerY() throws Exception {\n@@ -83,1 +89,2 @@\n-    @Test public void testBoundPropertySync_radius() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_radius() throws Exception {\n@@ -130,1 +137,2 @@\n-    @Test public void testTransformedBounds_scale() {\n+    @Test\n+    public void testTransformedBounds_scale() {\n@@ -141,1 +149,2 @@\n-    @Test public void toStringShouldReturnNonEmptyString() {\n+    @Test\n+    public void toStringShouldReturnNonEmptyString() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/CircleTest.java","additions":22,"deletions":13,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -38,0 +33,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -40,1 +37,0 @@\n-@RunWith(Parameterized.class)\n@@ -43,13 +39,7 @@\n-    public Circle_onInvalidate_Test(Configuration config) {\n-        super(config);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]>data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(Circle.class, \"centerX\", 255.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(Circle.class, \"centerY\", 552.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(Circle.class, \"radius\", 55.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(CubicCurve.class, \"startX\", 5.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})}\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(Circle.class, \"centerX\", 255.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Circle.class, \"centerY\", 552.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Circle.class, \"radius\", 55.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(CubicCurve.class, \"startX\", 5.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/Circle_onInvalidate_Test.java","additions":11,"deletions":21,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -32,4 +31,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -38,1 +34,0 @@\n-@RunWith(Parameterized.class)\n@@ -40,2 +35,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -44,1 +39,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -48,5 +43,1 @@\n-        });\n-    }\n-\n-    public Circle_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/Circle_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.junit.Test;\n@@ -33,1 +32,4 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -37,1 +39,2 @@\n-    @Test public void testAddTo() throws Exception {\n+    @Test\n+    public void testAddTo() throws Exception {\n@@ -45,1 +48,2 @@\n-    @Test public void toStringShouldReturnNonEmptyString() {\n+    @Test\n+    public void toStringShouldReturnNonEmptyString() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/ClosePathTest.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.junit.Test;\n@@ -35,1 +34,4 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/CubicCurveTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.junit.Test;\n@@ -44,1 +43,4 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -49,1 +51,2 @@\n-    @Test public void testSetGetX() throws Exception {\n+    @Test\n+    public void testSetGetX() throws Exception {\n@@ -53,1 +56,2 @@\n-    @Test public void testSetGetControlX1() throws Exception {\n+    @Test\n+    public void testSetGetControlX1() throws Exception {\n@@ -57,1 +61,2 @@\n-    @Test public void testSetGetControlX2() throws Exception {\n+    @Test\n+    public void testSetGetControlX2() throws Exception {\n@@ -61,1 +66,2 @@\n-    @Test public void testSetGetControlY1() throws Exception {\n+    @Test\n+    public void testSetGetControlY1() throws Exception {\n@@ -65,1 +71,2 @@\n-    @Test public void testSetGetControlY2() throws Exception {\n+    @Test\n+    public void testSetGetControlY2() throws Exception {\n@@ -71,1 +78,2 @@\n-    @Test public void testDoublePropertySynced_X() throws Exception {\n+    @Test\n+    public void testDoublePropertySynced_X() throws Exception {\n@@ -75,1 +83,2 @@\n-   @Test public void testDoublePropertySynced_Y() throws Exception {\n+   @Test\n+   public void testDoublePropertySynced_Y() throws Exception {\n@@ -79,1 +88,2 @@\n-   @Test public void testDoublePropertySynced_ControlX1() throws Exception {\n+   @Test\n+   public void testDoublePropertySynced_ControlX1() throws Exception {\n@@ -83,1 +93,2 @@\n-   @Test public void testDoublePropertySynced_ControlY1() throws Exception {\n+   @Test\n+   public void testDoublePropertySynced_ControlY1() throws Exception {\n@@ -87,1 +98,2 @@\n-   @Test public void testDoublePropertySynced_ControlX2() throws Exception {\n+   @Test\n+   public void testDoublePropertySynced_ControlX2() throws Exception {\n@@ -91,1 +103,2 @@\n-   @Test public void testDoublePropertySynced_ControlY2() throws Exception {\n+   @Test\n+   public void testDoublePropertySynced_ControlY2() throws Exception {\n@@ -95,1 +108,2 @@\n-    @Test public void toStringShouldReturnNonEmptyString() {\n+    @Test\n+    public void toStringShouldReturnNonEmptyString() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/CubicCurveToTest.java","additions":29,"deletions":15,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -37,0 +32,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -42,16 +38,9 @@\n-    public CubicCurveTo_onInvalidate_Test(Configuration config) {\n-        super(config);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]> data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(CubicCurveTo.class, \"x\", 100.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})},\n-            {new Configuration(CubicCurveTo.class, \"y\", 100.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})},\n-            {new Configuration(CubicCurveTo.class, \"controlX1\", 10.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})},\n-            {new Configuration(CubicCurveTo.class, \"controlY1\", 122.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})},\n-            {new Configuration(CubicCurveTo.class, \"controlX2\", 45.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})},\n-            {new Configuration(CubicCurveTo.class, \"controlY2\", 55.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})}\n-\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(CubicCurveTo.class, \"x\", 100.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS}) ),\n+            Arguments.of( new Configuration(CubicCurveTo.class, \"y\", 100.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS}) ),\n+            Arguments.of( new Configuration(CubicCurveTo.class, \"controlX1\", 10.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS}) ),\n+            Arguments.of( new Configuration(CubicCurveTo.class, \"controlY1\", 122.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS}) ),\n+            Arguments.of( new Configuration(CubicCurveTo.class, \"controlX2\", 45.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS}) ),\n+            Arguments.of( new Configuration(CubicCurveTo.class, \"controlY2\", 55.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS}) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/CubicCurveTo_onInvalidate_Test.java","additions":13,"deletions":24,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -32,4 +31,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -38,1 +34,0 @@\n-@RunWith(Parameterized.class)\n@@ -40,2 +35,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -44,1 +39,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -51,5 +46,1 @@\n-        });\n-    }\n-\n-    public CubicCurveTo_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/CubicCurveTo_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -37,0 +32,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -42,17 +38,11 @@\n-    public CubicCurve_onInvalidate_Test(Configuration configuration) {\n-        super(configuration);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]>data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(CubicCurve.class, \"startX\", 5.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(CubicCurve.class, \"startY\", 5.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(CubicCurve.class, \"controlX1\", 15.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(CubicCurve.class, \"controlY1\", 77.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(CubicCurve.class, \"controlX2\", 33.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(CubicCurve.class, \"controlY2\", 44.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(CubicCurve.class, \"endX\", 777.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(CubicCurve.class, \"endY\", 555.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})}\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(CubicCurve.class, \"startX\", 5.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(CubicCurve.class, \"startY\", 5.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(CubicCurve.class, \"controlX1\", 15.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(CubicCurve.class, \"controlY1\", 77.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(CubicCurve.class, \"controlX2\", 33.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(CubicCurve.class, \"controlY2\", 44.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(CubicCurve.class, \"endX\", 777.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(CubicCurve.class, \"endY\", 555.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/CubicCurve_onInvalidate_Test.java","additions":15,"deletions":25,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -32,4 +31,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -38,1 +34,0 @@\n-@RunWith(Parameterized.class)\n@@ -40,2 +35,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -44,1 +39,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -53,5 +48,1 @@\n-        });\n-    }\n-\n-    public CubicCurve_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/CubicCurve_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,4 @@\n-import static org.junit.Assert.*;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/CylinderTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.junit.Test;\n@@ -37,3 +36,3 @@\n-import static test.com.sun.javafx.test.TestHelper.assertSimilar;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -41,0 +40,1 @@\n+import static test.com.sun.javafx.test.TestHelper.assertSimilar;\n@@ -45,1 +45,2 @@\n-    @Test public void testPropertyPropagation_visible() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_visible() throws Exception {\n@@ -50,1 +51,2 @@\n-    @Test public void testPropertyPropagation_centerX() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_centerX() throws Exception {\n@@ -55,1 +57,2 @@\n-    @Test public void testPropertyPropagation_centerY() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_centerY() throws Exception {\n@@ -60,1 +63,2 @@\n-    @Test public void testPropertyPropagation_radiusX() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_radiusX() throws Exception {\n@@ -65,1 +69,2 @@\n-    @Test public void testPropertyPropagation_radiusY() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_radiusY() throws Exception {\n@@ -70,1 +75,2 @@\n-    @Test public void testBoundPropertySync_radiusX() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_radiusX() throws Exception {\n@@ -76,1 +82,2 @@\n-    @Test public void testBoundPropertySync_radiusY() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_radiusY() throws Exception {\n@@ -82,1 +89,2 @@\n-    @Test public void testBoundPropertySync_centerX() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_centerX() throws Exception {\n@@ -88,1 +96,2 @@\n-    @Test public void testBoundPropertySync_centerY() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_centerY() throws Exception {\n@@ -103,1 +112,2 @@\n-    @Test public void toStringShouldReturnNonEmptyString() {\n+    @Test\n+    public void toStringShouldReturnNonEmptyString() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/EllipseTest.java","additions":25,"deletions":15,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -37,0 +32,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -42,13 +38,7 @@\n-    public Ellipse_onInvalidate_Test(Configuration config) {\n-        super(config);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]>data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(Ellipse.class, \"centerX\", 25.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(Ellipse.class, \"centerY\", 75.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(Ellipse.class, \"radiusX\", 5.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(Ellipse.class, \"radiusY\", 11.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})}\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(Ellipse.class, \"centerX\", 25.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Ellipse.class, \"centerY\", 75.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Ellipse.class, \"radiusX\", 5.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Ellipse.class, \"radiusY\", 11.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/Ellipse_onInvalidate_Test.java","additions":11,"deletions":21,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -32,4 +31,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -38,1 +34,0 @@\n-@RunWith(Parameterized.class)\n@@ -40,2 +35,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -44,1 +39,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -49,5 +44,1 @@\n-        });\n-    }\n-\n-    public Ellipse_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/Ellipse_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import org.junit.Test;\n@@ -43,1 +42,4 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -47,1 +49,2 @@\n-     @Test public void testAddTo() throws Exception {\n+    @Test\n+    public void testAddTo() throws Exception {\n@@ -56,1 +59,2 @@\n-    @Test public void testDoublePropertySynced_X() {\n+    @Test\n+    public void testDoublePropertySynced_X() {\n@@ -79,1 +83,2 @@\n-    @Test public void toStringShouldReturnNonEmptyString() {\n+    @Test\n+    public void toStringShouldReturnNonEmptyString() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/HLineToTest.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -37,0 +32,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -42,10 +38,4 @@\n-    public HLineTo_onInvalidate_Test(Configuration config) {\n-        super(config);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]> data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(HLineTo.class, \"x\", 100.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})}\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(HLineTo.class, \"x\", 100.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS}) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/HLineTo_onInvalidate_Test.java","additions":8,"deletions":18,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -32,4 +31,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -38,1 +34,0 @@\n-@RunWith(Parameterized.class)\n@@ -40,2 +35,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -44,1 +39,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -46,5 +41,1 @@\n-        });\n-    }\n-\n-    public HLineTo_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/HLineTo_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import org.junit.Test;\n@@ -35,2 +34,3 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -71,1 +71,2 @@\n-    @Test public void testBoundPropertySync_startX() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_startX() throws Exception {\n@@ -77,1 +78,2 @@\n-    @Test public void testBoundPropertySync_startY() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_startY() throws Exception {\n@@ -83,1 +85,2 @@\n-    @Test public void testBoundPropertySync_endX() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_endX() throws Exception {\n@@ -89,1 +92,2 @@\n-    @Test public void testBoundPropertySync_endY() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_endY() throws Exception {\n@@ -95,1 +99,2 @@\n-    @Test public void toStringShouldReturnNonEmptyString() {\n+    @Test\n+    public void toStringShouldReturnNonEmptyString() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/LineTest.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import org.junit.Test;\n@@ -42,1 +41,4 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -46,1 +48,2 @@\n-    @Test public void testAddTo() throws Exception {\n+    @Test\n+    public void testAddTo() throws Exception {\n@@ -50,1 +53,2 @@\n-    @Test public void testDoublePropertySynced_X() {\n+    @Test\n+    public void testDoublePropertySynced_X() {\n@@ -73,1 +77,2 @@\n-    @Test public void testDoublePropertySynced_Y() {\n+    @Test\n+    public void testDoublePropertySynced_Y() {\n@@ -96,1 +101,2 @@\n-    @Test public void toStringShouldReturnNonEmptyString() {\n+    @Test\n+    public void toStringShouldReturnNonEmptyString() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/LineToTest.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -37,0 +32,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -42,11 +38,5 @@\n-    public LineTo_onInvalidate_Test(Configuration config) {\n-        super(config);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]> data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(LineTo.class, \"x\", 123.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})},\n-            {new Configuration(LineTo.class, \"y\", 321.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})}\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(LineTo.class, \"x\", 123.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})),\n+            Arguments.of( new Configuration(LineTo.class, \"y\", 321.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS}))\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/LineTo_onInvalidate_Test.java","additions":9,"deletions":19,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -32,4 +31,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -38,1 +34,0 @@\n-@RunWith(Parameterized.class)\n@@ -40,2 +35,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -44,1 +39,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -47,5 +42,1 @@\n-        });\n-    }\n-\n-    public LineTo_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/LineTo_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -37,0 +32,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -42,13 +38,7 @@\n-    public Line_onInvalidate_Test(Configuration config) {\n-        super(config);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]>data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(Line.class, \"startX\", 10.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(Line.class, \"startY\", 11.0, new DirtyBits[]{DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(Line.class, \"endX\", 100.0, new DirtyBits[]{DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(Line.class, \"endY\", 10.0, new DirtyBits[]{DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})}\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(Line.class, \"startX\", 10.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Line.class, \"startY\", 11.0, new DirtyBits[]{DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Line.class, \"endX\", 100.0, new DirtyBits[]{DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Line.class, \"endY\", 10.0, new DirtyBits[]{DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/Line_onInvalidate_Test.java","additions":11,"deletions":21,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -32,4 +31,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -38,1 +34,0 @@\n-@RunWith(Parameterized.class)\n@@ -40,2 +35,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -44,1 +39,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -48,6 +43,2 @@\n-            config(testLine, \"endY\", 100.0, 0.0),\n-        });\n-    }\n-\n-    public Line_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+            config(testLine, \"endY\", 100.0, 0.0)\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/Line_properties_Test.java","additions":8,"deletions":17,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import org.junit.Test;\n@@ -41,1 +40,4 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -45,1 +47,2 @@\n-    @Test public void testAddTo() throws Exception {\n+    @Test\n+    public void testAddTo() throws Exception {\n@@ -49,1 +52,2 @@\n-    @Test public void testSetGetX() throws Exception {\n+    @Test\n+    public void testSetGetX() throws Exception {\n@@ -53,1 +57,2 @@\n-    @Test public void testSetGetY() throws Exception {\n+    @Test\n+    public void testSetGetY() throws Exception {\n@@ -57,1 +62,2 @@\n-    @Test public void testDoubleBoundPropertySynced_X() {\n+    @Test\n+    public void testDoubleBoundPropertySynced_X() {\n@@ -78,1 +84,2 @@\n-     @Test public void testDoubleBoundPropertySynced_Y() {\n+     @Test\n+     public void testDoubleBoundPropertySynced_Y() {\n@@ -99,1 +106,2 @@\n-    @Test public void toStringShouldReturnNonEmptyString() {\n+    @Test\n+    public void toStringShouldReturnNonEmptyString() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/MoveToTest.java","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -37,0 +32,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -42,11 +38,5 @@\n-    public MoveTo_onInvalidate_Test(Configuration config) {\n-        super(config);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]> data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(MoveTo.class, \"x\", 123.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})},\n-            {new Configuration(MoveTo.class, \"y\", 321.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})}\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(MoveTo.class, \"x\", 123.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS}) ),\n+            Arguments.of( new Configuration(MoveTo.class, \"y\", 321.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS}) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/MoveTo_onInvalidate_Test.java","additions":9,"deletions":19,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -32,4 +31,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -38,1 +34,0 @@\n-@RunWith(Parameterized.class)\n@@ -40,2 +35,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -44,1 +39,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -47,5 +42,1 @@\n-        });\n-    }\n-\n-    public MoveTo_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/MoveTo_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.junit.Test;\n@@ -48,1 +47,6 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -53,1 +57,2 @@\n-    @Test public void testVarargConstructor() {\n+    @Test\n+    public void testVarargConstructor() {\n@@ -64,1 +69,2 @@\n-    @Test public void testListConstructor() {\n+    @Test\n+    public void testListConstructor() {\n@@ -80,1 +86,2 @@\n-    @Test public void testBoundPropertySync_FillRule() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_FillRule() throws Exception {\n@@ -93,1 +100,2 @@\n-    @Test public void testFirstRelativeElement_PathIsEmpty() {\n+    @Test\n+    public void testFirstRelativeElement_PathIsEmpty() {\n@@ -104,1 +112,2 @@\n-     @Test public void testFirstRelativeElement_BoundsAreEmpty() {\n+     @Test\n+     public void testFirstRelativeElement_BoundsAreEmpty() {\n@@ -113,1 +122,2 @@\n-    @Test public void testFirstElementIsNotMoveTo_PathIsEmpty() {\n+    @Test\n+    public void testFirstElementIsNotMoveTo_PathIsEmpty() {\n@@ -122,1 +132,2 @@\n-    @Test public void testFirstElementIsNotMoveTo_BoundsAreEmpty() {\n+    @Test\n+    public void testFirstElementIsNotMoveTo_BoundsAreEmpty() {\n@@ -129,1 +140,2 @@\n-    @Test public void testFillRuleSync() {\n+    @Test\n+    public void testFillRuleSync() {\n@@ -146,1 +158,2 @@\n-    @Test public void toStringShouldReturnNonEmptyString() {\n+    @Test\n+    public void toStringShouldReturnNonEmptyString() {\n@@ -152,1 +165,2 @@\n-    @Test public void testPathElementIsAbsoluteAfterAbsoluteProperty() {\n+    @Test\n+    public void testPathElementIsAbsoluteAfterAbsoluteProperty() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/PathTest.java","additions":27,"deletions":13,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -38,0 +33,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -40,1 +37,0 @@\n-@RunWith(Parameterized.class)\n@@ -43,10 +39,4 @@\n-    public Path_onInvalidate_Test(Configuration config) {\n-        super(config);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]>data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(Path.class, \"fillRule\", FillRule.EVEN_ODD, new DirtyBits[]{DirtyBits.NODE_CONTENTS, DirtyBits.NODE_BOUNDS})}\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(Path.class, \"fillRule\", FillRule.EVEN_ODD, new DirtyBits[]{DirtyBits.NODE_CONTENTS, DirtyBits.NODE_BOUNDS}) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/Path_onInvalidate_Test.java","additions":8,"deletions":18,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -33,4 +32,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +35,0 @@\n-@RunWith(Parameterized.class)\n@@ -41,2 +36,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -45,1 +40,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -47,5 +42,1 @@\n-        });\n-    }\n-\n-    public Path_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/Path_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.junit.Test;\n@@ -40,0 +39,5 @@\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -42,1 +46,0 @@\n-import static org.junit.Assert.*;\n@@ -45,1 +48,2 @@\n-    @Test public void testPropertyPropagation_emptyPoints() {\n+    @Test\n+    public void testPropertyPropagation_emptyPoints() {\n@@ -51,1 +55,2 @@\n-    @Test public void testPropertyPropagation_pointsEvenLength() {\n+    @Test\n+    public void testPropertyPropagation_pointsEvenLength() {\n@@ -66,1 +71,2 @@\n-    @Test public void testPropertyPropagation_pointsOddLength() {\n+    @Test\n+    public void testPropertyPropagation_pointsOddLength() {\n@@ -81,1 +87,2 @@\n-    @Test public void testPropertyPropagation_visible() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_visible() throws Exception {\n@@ -86,1 +93,2 @@\n-    @Test public void testBounds_emptyPoints() {\n+    @Test\n+    public void testBounds_emptyPoints() {\n@@ -91,1 +99,2 @@\n-    @Test public void testBounds_evenPointsLength() {\n+    @Test\n+    public void testBounds_evenPointsLength() {\n@@ -104,1 +113,2 @@\n-    @Test public void testBounds_oddPointsLength() {\n+    @Test\n+    public void testBounds_oddPointsLength() {\n@@ -118,1 +128,2 @@\n-    @Test public void testConfigShape() throws Exception {\n+    @Test\n+    public void testConfigShape() throws Exception {\n@@ -149,1 +160,2 @@\n-    @Test public void toStringShouldReturnNonEmptyString() {\n+    @Test\n+    public void toStringShouldReturnNonEmptyString() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/PolygonTest.java","additions":24,"deletions":12,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.junit.Test;\n@@ -38,2 +37,8 @@\n-import static test.com.sun.javafx.test.TestHelper.*;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.test.TestHelper.box;\n+import static test.com.sun.javafx.test.TestHelper.assertBoundsEqual;\n+import static test.com.sun.javafx.test.TestHelper.assertSimilar;\n@@ -43,1 +48,2 @@\n-    @Test public void testVarargConstructor() {\n+    @Test\n+    public void testVarargConstructor() {\n@@ -52,1 +58,2 @@\n-    @Test public void testPropertyPropagation_emptyPoints() {\n+    @Test\n+    public void testPropertyPropagation_emptyPoints() {\n@@ -58,1 +65,2 @@\n-    @Test public void testPropertyPropagation_pointsEvenLength() {\n+    @Test\n+    public void testPropertyPropagation_pointsEvenLength() {\n@@ -73,1 +81,2 @@\n-    @Test public void testPropertyPropagation_pointsOddLength() {\n+    @Test\n+    public void testPropertyPropagation_pointsOddLength() {\n@@ -88,1 +97,2 @@\n-    @Test public void testBounds_emptyPoints() {\n+    @Test\n+    public void testBounds_emptyPoints() {\n@@ -93,1 +103,2 @@\n-    @Test public void testBounds_evenPointsLength() {\n+    @Test\n+    public void testBounds_evenPointsLength() {\n@@ -106,1 +117,2 @@\n-    @Test public void testBounds_oddPointsLength() {\n+    @Test\n+    public void testBounds_oddPointsLength() {\n@@ -143,1 +155,2 @@\n-    @Test public void toStringShouldReturnNonEmptyString() {\n+    @Test\n+    public void toStringShouldReturnNonEmptyString() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/PolylineTest.java","additions":25,"deletions":12,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import static org.junit.Assert.*;\n@@ -36,3 +35,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-\n@@ -41,0 +37,4 @@\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n@@ -43,1 +43,1 @@\n-    @Before\n+    @BeforeEach\n@@ -64,1 +64,1 @@\n-        assertEquals(\"Added a \" + name + \" - cache should contain \" + correctSize + \" mesh.\", correctSize, size);\n+        assertEquals(correctSize, size, \"Added a \" + name + \" - cache should contain \" + correctSize + \" mesh.\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/PredefinedMeshManagerTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.junit.Test;\n@@ -36,2 +35,3 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -42,1 +42,2 @@\n-    @Test public void testSetGetStartX() throws Exception {\n+    @Test\n+    public void testSetGetStartX() throws Exception {\n@@ -46,1 +47,2 @@\n-    @Test public void testSetGetStartY() throws Exception {\n+    @Test\n+    public void testSetGetStartY() throws Exception {\n@@ -50,1 +52,2 @@\n-    @Test public void testSetGetEndX() throws Exception {\n+    @Test\n+    public void testSetGetEndX() throws Exception {\n@@ -54,1 +57,2 @@\n-    @Test public void testSetGetEndY() throws Exception {\n+    @Test\n+    public void testSetGetEndY() throws Exception {\n@@ -58,1 +62,2 @@\n-    @Test public void testSetGetControlX() throws Exception {\n+    @Test\n+    public void testSetGetControlX() throws Exception {\n@@ -62,1 +67,2 @@\n-    @Test public void testSetGetControlY() throws Exception {\n+    @Test\n+    public void testSetGetControlY() throws Exception {\n@@ -66,1 +72,2 @@\n-    @Test public void testPropertyPropagation_visible() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_visible() throws Exception {\n@@ -70,1 +77,2 @@\n-    @Test public void testBoundPropertySync_startX() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_startX() throws Exception {\n@@ -76,1 +84,2 @@\n-    @Test public void testBoundPropertySync_startY() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_startY() throws Exception {\n@@ -82,1 +91,2 @@\n-    @Test public void testBoundPropertySync_controlX() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_controlX() throws Exception {\n@@ -88,1 +98,2 @@\n-    @Test public void testBoundPropertySync_controlY() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_controlY() throws Exception {\n@@ -94,1 +105,2 @@\n-    @Test public void testBoundPropertySync_endX() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_endX() throws Exception {\n@@ -100,1 +112,2 @@\n-    @Test public void testBoundPropertySync_endY() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_endY() throws Exception {\n@@ -106,1 +119,2 @@\n-    @Test public void toStringShouldReturnNonEmptyString() {\n+    @Test\n+    public void toStringShouldReturnNonEmptyString() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/QuadCurveTest.java","additions":32,"deletions":18,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.junit.Test;\n@@ -44,1 +43,4 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -48,1 +50,2 @@\n-    @Test public void testSetGetX() throws Exception {\n+    @Test\n+    public void testSetGetX() throws Exception {\n@@ -52,1 +55,2 @@\n-    @Test public void testSetGetControlX() throws Exception {\n+    @Test\n+    public void testSetGetControlX() throws Exception {\n@@ -56,1 +60,2 @@\n-    @Test public void testSetGetControlY() throws Exception {\n+    @Test\n+    public void testSetGetControlY() throws Exception {\n@@ -60,1 +65,2 @@\n-   @Test public void testDoublePropertySynced_X() throws Exception {\n+   @Test\n+   public void testDoublePropertySynced_X() throws Exception {\n@@ -64,1 +70,2 @@\n-   @Test public void testDoublePropertySynced_Y() throws Exception {\n+   @Test\n+   public void testDoublePropertySynced_Y() throws Exception {\n@@ -68,1 +75,2 @@\n-   @Test public void testDoublePropertySynced_ControlX() throws Exception {\n+   @Test\n+   public void testDoublePropertySynced_ControlX() throws Exception {\n@@ -72,1 +80,2 @@\n-   @Test public void testDoublePropertySynced_ControlY() throws Exception {\n+   @Test\n+   public void testDoublePropertySynced_ControlY() throws Exception {\n@@ -76,1 +85,2 @@\n-    @Test public void toStringShouldReturnNonEmptyString() {\n+    @Test\n+    public void toStringShouldReturnNonEmptyString() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/QuadCurveToTest.java","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -32,4 +31,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -38,1 +34,0 @@\n-@RunWith(Parameterized.class)\n@@ -40,2 +35,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -44,1 +39,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -49,5 +44,1 @@\n-        });\n-    }\n-\n-    public QuadCurveTo_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/QuadCurveTo_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -37,0 +32,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -42,15 +38,9 @@\n-    public QuadCurve_onInvalidate_Test(Configuration config) {\n-        super(config);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]>data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(QuadCurve.class, \"startX\", 111.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(QuadCurve.class, \"startY\", 101.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(QuadCurve.class, \"controlX\", 121.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(QuadCurve.class, \"controlY\", 131.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(QuadCurve.class, \"endX\", 231.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(QuadCurve.class, \"endY\", 134.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(QuadCurve.class, \"startX\", 111.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(QuadCurve.class, \"startY\", 101.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(QuadCurve.class, \"controlX\", 121.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(QuadCurve.class, \"controlY\", 131.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(QuadCurve.class, \"endX\", 231.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(QuadCurve.class, \"endY\", 134.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/QuadCurve_onInvalidate_Test.java","additions":13,"deletions":23,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -32,4 +31,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -38,1 +34,0 @@\n-@RunWith(Parameterized.class)\n@@ -40,2 +35,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -44,1 +39,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -51,5 +46,1 @@\n-        });\n-    }\n-\n-    public QuadCurve_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/QuadCurve_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.junit.Test;\n@@ -40,0 +39,3 @@\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -41,1 +43,0 @@\n-import static org.junit.Assert.*;\n@@ -45,1 +46,2 @@\n-    @Test public void testPropertyPropagation_visible() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_visible() throws Exception {\n@@ -50,1 +52,2 @@\n-    @Test public void testPropertyPropagation_x() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_x() throws Exception {\n@@ -55,1 +58,2 @@\n-    @Test public void testPropertyPropagation_y() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_y() throws Exception {\n@@ -60,1 +64,2 @@\n-    @Test public void testPropertyPropagation_width() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_width() throws Exception {\n@@ -65,1 +70,2 @@\n-    @Test public void testPropertyPropagation_height() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_height() throws Exception {\n@@ -70,1 +76,2 @@\n-    @Test public void testPropertyPropagation_arcWidth() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_arcWidth() throws Exception {\n@@ -75,1 +82,2 @@\n-    @Test public void testPropertyPropagation_arcHeight() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_arcHeight() throws Exception {\n@@ -80,1 +88,2 @@\n-    @Test public void testBoundPropertySync_X() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_X() throws Exception {\n@@ -86,1 +95,2 @@\n-    @Test public void testBoundPropertySync_Y() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_Y() throws Exception {\n@@ -92,1 +102,2 @@\n-    @Test public void testBoundPropertySync_Width() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_Width() throws Exception {\n@@ -98,1 +109,2 @@\n-    @Test public void testBoundPropertySync_Height() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_Height() throws Exception {\n@@ -104,1 +116,2 @@\n-    @Test public void testBoundPropertySync_ArcWidth() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_ArcWidth() throws Exception {\n@@ -110,1 +123,2 @@\n-    @Test public void testBoundPropertySync_ArcHeight() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_ArcHeight() throws Exception {\n@@ -128,1 +142,2 @@\n-    @Test public void toStringShouldReturnNonEmptyString() {\n+    @Test\n+    public void toStringShouldReturnNonEmptyString() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/RectangleTest.java","additions":32,"deletions":17,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -32,4 +31,0 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n@@ -38,1 +33,2 @@\n-@RunWith(Parameterized.class)\n+import org.junit.jupiter.params.provider.Arguments;\n+\n@@ -42,3 +38,2 @@\n-    @Parameters\n-    public static Collection data() {\n-        return Arrays.asList(new Object[] {\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n@@ -51,5 +46,1 @@\n-        });\n-    }\n-\n-    public Rectangle_cssMethods_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/Rectangle_cssMethods_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -37,0 +32,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -42,15 +38,9 @@\n-    public Rectangle_onInvalidate_Test(Configuration configuration) {\n-        super(configuration);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]>data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(Rectangle.class, \"x\", 100.0, new DirtyBits[] {DirtyBits.NODE_GEOMETRY, DirtyBits.NODE_BOUNDS})},\n-            {new Configuration(Rectangle.class, \"y\", 100.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(Rectangle.class, \"width\", 123.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(Rectangle.class, \"height\", 123.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(Rectangle.class, \"arcWidth\", 11.0, new DirtyBits[] {DirtyBits.NODE_GEOMETRY})},\n-            {new Configuration(Rectangle.class, \"arcHeight\", 22.0, new DirtyBits[] {DirtyBits.NODE_GEOMETRY})}\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(Rectangle.class, \"x\", 100.0, new DirtyBits[] {DirtyBits.NODE_GEOMETRY, DirtyBits.NODE_BOUNDS}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"y\", 100.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"width\", 123.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"height\", 123.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"arcWidth\", 11.0, new DirtyBits[] {DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Rectangle.class, \"arcHeight\", 22.0, new DirtyBits[] {DirtyBits.NODE_GEOMETRY}) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/Rectangle_onInvalidate_Test.java","additions":13,"deletions":23,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -34,4 +33,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -40,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -42,2 +37,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -46,1 +41,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -94,5 +89,1 @@\n-        });\n-    }\n-\n-    public Rectangle_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/Rectangle_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import org.junit.Test;\n@@ -42,1 +41,4 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -46,1 +48,2 @@\n-    @Test public void testBoundPropertySync_Content() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_Content() throws Exception {\n@@ -69,1 +72,2 @@\n-    @Test public void testFillRuleSync() {\n+    @Test\n+    public void testFillRuleSync() {\n@@ -87,1 +91,2 @@\n-    @Test public void toStringShouldReturnNonEmptyString() {\n+    @Test\n+    public void toStringShouldReturnNonEmptyString() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/SVGPathTest.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -38,0 +33,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -40,1 +37,0 @@\n-@RunWith(Parameterized.class)\n@@ -43,11 +39,5 @@\n-    public SVGPath_onInvalidate_Test(Configuration config) {\n-        super(config);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]> data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(SVGPath.class, \"fillRule\", FillRule.EVEN_ODD, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.SHAPE_FILLRULE})},\n-            {new Configuration(SVGPath.class, \"content\", \"cool\", new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})}\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(SVGPath.class, \"fillRule\", FillRule.EVEN_ODD, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.SHAPE_FILLRULE}) ),\n+            Arguments.of( new Configuration(SVGPath.class, \"content\", \"cool\", new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS}) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/SVGPath_onInvalidate_Test.java","additions":9,"deletions":19,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -33,4 +32,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +35,0 @@\n-@RunWith(Parameterized.class)\n@@ -41,2 +36,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -45,1 +40,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -49,5 +44,1 @@\n-        });\n-    }\n-\n-    public SVGPath_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/SVGPath_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,7 +27,1 @@\n-import java.util.ArrayList;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-import test.com.sun.javafx.test.PropertiesTestBase;\n+import java.util.stream.Stream;\n@@ -40,2 +34,2 @@\n-@RunWith(Parameterized.class)\n-public final class Shape3D_properties_Test extends PropertiesTestBase {\n+import org.junit.jupiter.params.provider.Arguments;\n+import test.com.sun.javafx.test.PropertiesTestBase;\n@@ -43,3 +37,1 @@\n-    @Parameters\n-    public static Collection data() {\n-        ArrayList array = new ArrayList();\n+public final class Shape3D_properties_Test extends PropertiesTestBase {\n@@ -47,0 +39,1 @@\n+    public static Stream<Arguments> data() {\n@@ -51,9 +44,5 @@\n-        array.add(config(testShape, \"cullFace\", CullFace.BACK, CullFace.FRONT));\n-        array.add(config(testShape, \"drawMode\", DrawMode.FILL, DrawMode.LINE));\n-        array.add(config(testShape, \"material\", DEFAULT_MATERIAL, null));\n-\n-        return array;\n-    }\n-\n-    public Shape3D_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        return Stream.of(\n+            config(testShape, \"cullFace\", CullFace.BACK, CullFace.FRONT),\n+            config(testShape, \"drawMode\", DrawMode.FILL, DrawMode.LINE),\n+            config(testShape, \"material\", DEFAULT_MATERIAL, null)\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/Shape3D_properties_Test.java","additions":11,"deletions":22,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,0 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n@@ -52,1 +50,5 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n@@ -56,1 +58,2 @@\n-    @Test public void testBoundPropertySync_StrokeType() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_StrokeType() throws Exception {\n@@ -62,1 +65,2 @@\n-    @Test public void testBoundPropertySync_StrokeLineCap() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_StrokeLineCap() throws Exception {\n@@ -68,1 +72,2 @@\n-    @Test public void testBoundPropertySync_StrokeLineJoin() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_StrokeLineJoin() throws Exception {\n@@ -74,1 +79,2 @@\n-    @Test public void testBoundPropertySync_StrokeWidth() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_StrokeWidth() throws Exception {\n@@ -80,1 +86,2 @@\n-    @Test public void testBoundPropertySync_StrokeMiterLimit() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_StrokeMiterLimit() throws Exception {\n@@ -86,1 +93,2 @@\n-    @Test public void testBoundPropertySync_DashOffset() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_DashOffset() throws Exception {\n@@ -92,1 +100,2 @@\n-    @Test public void testBoundPropertySync_Stroke() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_Stroke() throws Exception {\n@@ -99,1 +108,2 @@\n-    @Test public void testBoundPropertySync_Fill() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_Fill() throws Exception {\n@@ -106,1 +116,2 @@\n-    @Test public void testBoundPropertySync_Smooth() throws Exception {\n+    @Test\n+    public void testBoundPropertySync_Smooth() throws Exception {\n@@ -114,1 +125,2 @@\n-    @Test public void testStrokeDashArray() {\n+    @Test\n+    public void testStrokeDashArray() {\n@@ -129,1 +141,1 @@\n-            Assert.assertEquals(expected, c.getAddedSubList());\n+            assertEquals(expected, c.getAddedSubList());\n@@ -139,1 +151,2 @@\n-    @Test public void testGetStrokeDashArrayViaCSSPropertyIsNotNull() {\n+    @Test\n+    public void testGetStrokeDashArrayViaCSSPropertyIsNotNull() {\n@@ -153,1 +166,2 @@\n-    @Test public void testGetStrokeDashArrayViaCSSPropertyIsSame() {\n+    @Test\n+    public void testGetStrokeDashArrayViaCSSPropertyIsSame() {\n@@ -167,1 +181,1 @@\n-        Assert.assertArrayEquals(expecteds, actuals);\n+        assertArrayEquals(expecteds, actuals);\n@@ -170,1 +184,2 @@\n-    @Test public void testSetStrokeDashArrayViaCSSPropertyIsSame() {\n+    @Test\n+    public void testSetStrokeDashArrayViaCSSPropertyIsSame() {\n@@ -189,1 +204,2 @@\n-    @Test public void testRT_18647() {\n+    @Test\n+    public void testRT_18647() {\n@@ -208,1 +224,2 @@\n-    @Test public void testShapeChangeListenerLeakTest() {\n+    @Test\n+    public void testShapeChangeListenerLeakTest() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/ShapeTest.java","additions":38,"deletions":21,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -37,4 +36,0 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n@@ -43,1 +38,2 @@\n-@RunWith(Parameterized.class)\n+import org.junit.jupiter.params.provider.Arguments;\n+\n@@ -47,3 +43,2 @@\n-    @Parameters\n-    public static Collection data() {\n-        return Arrays.asList(new Object[] {\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n@@ -73,5 +68,1 @@\n-        });\n-    }\n-\n-    public Shape_cssMethods_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/Shape_cssMethods_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n+import java.util.stream.Stream;\n@@ -33,4 +31,0 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n@@ -41,0 +35,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -43,1 +39,0 @@\n-@RunWith(Parameterized.class)\n@@ -46,17 +41,11 @@\n-    public Shape_onInvalidate_Test(Configuration config) {\n-        super(config);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]> data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(Line.class, \"strokeWidth\", 2.0, new DirtyBits[] {DirtyBits.SHAPE_STROKEATTRS})},\n-            {new Configuration(Line.class, \"strokeLineJoin\", StrokeLineJoin.BEVEL, new DirtyBits[] {DirtyBits.SHAPE_STROKEATTRS})},\n-            {new Configuration(Line.class, \"strokeLineCap\", StrokeLineCap.BUTT, new DirtyBits[] {DirtyBits.SHAPE_STROKEATTRS})},\n-            {new Configuration(Line.class, \"strokeMiterLimit\", 4.0, new DirtyBits[] {DirtyBits.SHAPE_STROKEATTRS})},\n-            {new Configuration(Line.class, \"strokeDashOffset\", 1.0, new DirtyBits[] {DirtyBits.SHAPE_STROKEATTRS})},\n-            {new Configuration(Line.class, \"fill\", Color.RED, new DirtyBits[] {DirtyBits.SHAPE_FILL})},\n-            {new Configuration(Line.class, \"stroke\", Color.RED, new DirtyBits[] {DirtyBits.SHAPE_STROKE})},\n-            {new Configuration(Line.class, \"smooth\", false, new DirtyBits[] {DirtyBits.NODE_SMOOTH})}\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(Line.class, \"strokeWidth\", 2.0, new DirtyBits[] {DirtyBits.SHAPE_STROKEATTRS}) ),\n+            Arguments.of( new Configuration(Line.class, \"strokeLineJoin\", StrokeLineJoin.BEVEL, new DirtyBits[] {DirtyBits.SHAPE_STROKEATTRS}) ),\n+            Arguments.of( new Configuration(Line.class, \"strokeLineCap\", StrokeLineCap.BUTT, new DirtyBits[] {DirtyBits.SHAPE_STROKEATTRS}) ),\n+            Arguments.of( new Configuration(Line.class, \"strokeMiterLimit\", 4.0, new DirtyBits[] {DirtyBits.SHAPE_STROKEATTRS}) ),\n+            Arguments.of( new Configuration(Line.class, \"strokeDashOffset\", 1.0, new DirtyBits[] {DirtyBits.SHAPE_STROKEATTRS}) ),\n+            Arguments.of( new Configuration(Line.class, \"fill\", Color.RED, new DirtyBits[] {DirtyBits.SHAPE_FILL}) ),\n+            Arguments.of( new Configuration(Line.class, \"stroke\", Color.RED, new DirtyBits[] {DirtyBits.SHAPE_STROKE}) ),\n+            Arguments.of( new Configuration(Line.class, \"smooth\", false, new DirtyBits[] {DirtyBits.NODE_SMOOTH}) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/Shape_onInvalidate_Test.java","additions":15,"deletions":26,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -34,7 +34,0 @@\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-import test.com.sun.javafx.test.BBoxComparator;\n-import test.com.sun.javafx.test.PropertiesTestBase;\n@@ -49,1 +42,4 @@\n-@RunWith(Parameterized.class)\n+import org.junit.jupiter.params.provider.Arguments;\n+import test.com.sun.javafx.test.PropertiesTestBase;\n+import test.com.sun.javafx.test.BBoxComparator;\n+\n@@ -52,3 +48,2 @@\n-    @Parameters\n-    public static Collection data() {\n-        ArrayList array = new ArrayList();\n+    public static Stream<Arguments> data() {\n+        ArrayList<Arguments> array = new ArrayList<Arguments>();\n@@ -114,5 +109,1 @@\n-        return array;\n-    }\n-\n-    public Shape_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        return array.stream();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/Shape_properties_Test.java","additions":9,"deletions":18,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import org.junit.Test;\n@@ -33,2 +32,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/SphereTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,4 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/TestUtils.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,6 @@\n-import static org.junit.Assert.*;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n@@ -73,1 +77,1 @@\n-    @Test (expected=ArrayIndexOutOfBoundsException.class)\n+    @Test\n@@ -75,12 +79,14 @@\n-        int divX = 10;\n-        int divY = 10;\n-        TriangleMesh instance = buildTriangleMesh(divX, divY);\n-        int[] faceSmoothingGroups = new int[divX * divY * 2];\n-        Arrays.fill(faceSmoothingGroups, 1);\n-        int[] setterArray = new int[]{2, 0, -1};\n-        int index = 0;\n-        int start = 0;\n-        int length = setterArray.length;\n-        instance.getFaceSmoothingGroups().set(index, setterArray, start, length); \/\/ expect IllegalArgumentException\n-        \/\/ faceSmoothingGroups should not change\n-        assertArrayEquals(faceSmoothingGroups, instance.getFaceSmoothingGroups().toArray(null));\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+            int divX = 10;\n+            int divY = 10;\n+            TriangleMesh instance = buildTriangleMesh(divX, divY);\n+            int[] faceSmoothingGroups = new int[divX * divY * 2];\n+            Arrays.fill(faceSmoothingGroups, 1);\n+            int[] setterArray = new int[]{2, 0, -1};\n+            int index = 0;\n+            int start = 0;\n+            int length = setterArray.length;\n+            instance.getFaceSmoothingGroups().set(index, setterArray, start, length); \/\/ expect IllegalArgumentException\n+            \/\/ faceSmoothingGroups should not change\n+            assertArrayEquals(faceSmoothingGroups, instance.getFaceSmoothingGroups().toArray(null));\n+        });\n@@ -93,1 +99,1 @@\n-    @Test(expected = ArrayIndexOutOfBoundsException.class)\n+    @Test\n@@ -95,12 +101,14 @@\n-        int divX = 10;\n-        int divY = 10;\n-        TriangleMesh instance = buildTriangleMesh(divX, divY);\n-        int[] faceSmoothingGroups = new int[divX * divY * 2];\n-        Arrays.fill(faceSmoothingGroups, 1);\n-        instance.getFaceSmoothingGroups().setAll(faceSmoothingGroups);\n-        int[] setterArray = new int[]{2, 0, 1};\n-        int index = 0;\n-        int start = 0;\n-        instance.getFaceSmoothingGroups().set(index, setterArray, start, -1); \/\/ expect IllegalArgumentException\n-        \/\/ faceSmoothingGroups should not change\n-        assertArrayEquals(faceSmoothingGroups, instance.getFaceSmoothingGroups().toArray(null));\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+            int divX = 10;\n+            int divY = 10;\n+            TriangleMesh instance = buildTriangleMesh(divX, divY);\n+            int[] faceSmoothingGroups = new int[divX * divY * 2];\n+            Arrays.fill(faceSmoothingGroups, 1);\n+            instance.getFaceSmoothingGroups().setAll(faceSmoothingGroups);\n+            int[] setterArray = new int[]{2, 0, 1};\n+            int index = 0;\n+            int start = 0;\n+            instance.getFaceSmoothingGroups().set(index, setterArray, start, -1); \/\/ expect IllegalArgumentException\n+            \/\/ faceSmoothingGroups should not change\n+            assertArrayEquals(faceSmoothingGroups, instance.getFaceSmoothingGroups().toArray(null));\n+        });\n@@ -113,1 +121,1 @@\n-    @Test(expected = ArrayIndexOutOfBoundsException.class)\n+    @Test\n@@ -115,12 +123,14 @@\n-        int divX = 10;\n-        int divY = 10;\n-        TriangleMesh instance = buildTriangleMesh(divX, divY);\n-        int[] faceSmoothingGroups = new int[divX * divY * 2];\n-        Arrays.fill(faceSmoothingGroups, 1);\n-        int[] setterArray = new int[]{2, 0, 1};\n-        int start = 0;\n-        int length = setterArray.length;\n-        instance.getFaceSmoothingGroups().setAll(faceSmoothingGroups);\n-        instance.getFaceSmoothingGroups().set(198, setterArray, start, length); \/\/ expect ArrayIndexOutOfBoundsException\n-        \/\/ faceSmoothingGroups should not change\n-        assertArrayEquals(faceSmoothingGroups, instance.getFaceSmoothingGroups().toArray(null));\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+            int divX = 10;\n+            int divY = 10;\n+            TriangleMesh instance = buildTriangleMesh(divX, divY);\n+            int[] faceSmoothingGroups = new int[divX * divY * 2];\n+            Arrays.fill(faceSmoothingGroups, 1);\n+            int[] setterArray = new int[]{2, 0, 1};\n+            int start = 0;\n+            int length = setterArray.length;\n+            instance.getFaceSmoothingGroups().setAll(faceSmoothingGroups);\n+            instance.getFaceSmoothingGroups().set(198, setterArray, start, length); \/\/ expect ArrayIndexOutOfBoundsException\n+            \/\/ faceSmoothingGroups should not change\n+            assertArrayEquals(faceSmoothingGroups, instance.getFaceSmoothingGroups().toArray(null));\n+        });\n@@ -133,1 +143,1 @@\n-    @Test(expected = ArrayIndexOutOfBoundsException.class)\n+    @Test\n@@ -135,12 +145,14 @@\n-        int divX = 10;\n-        int divY = 10;\n-        TriangleMesh instance = buildTriangleMesh(divX, divY);\n-        int[] faceSmoothingGroups = new int[divX * divY * 2];\n-        Arrays.fill(faceSmoothingGroups, 1);\n-        int[] setterArray = new int[]{2, 0, 1};\n-        int index = 0;\n-        int length = setterArray.length;\n-        instance.getFaceSmoothingGroups().setAll(faceSmoothingGroups);\n-        instance.getFaceSmoothingGroups().set(index, setterArray, 2, length); \/\/ expect IllegalArgumentException\n-        \/\/ faceSmoothingGroups should not change\n-        assertArrayEquals(faceSmoothingGroups, instance.getFaceSmoothingGroups().toArray(null));\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+            int divX = 10;\n+            int divY = 10;\n+            TriangleMesh instance = buildTriangleMesh(divX, divY);\n+            int[] faceSmoothingGroups = new int[divX * divY * 2];\n+            Arrays.fill(faceSmoothingGroups, 1);\n+            int[] setterArray = new int[]{2, 0, 1};\n+            int index = 0;\n+            int length = setterArray.length;\n+            instance.getFaceSmoothingGroups().setAll(faceSmoothingGroups);\n+            instance.getFaceSmoothingGroups().set(index, setterArray, 2, length); \/\/ expect IllegalArgumentException\n+            \/\/ faceSmoothingGroups should not change\n+            assertArrayEquals(faceSmoothingGroups, instance.getFaceSmoothingGroups().toArray(null));\n+        });\n@@ -182,1 +194,1 @@\n-    @Test(expected = ArrayIndexOutOfBoundsException.class)\n+    @Test\n@@ -184,9 +196,11 @@\n-        int divX = 10;\n-        int divY = 10;\n-        TriangleMesh instance = buildTriangleMesh(divX, divY); \/\/ 1200 faces\n-        int faces[] = {0, 0, 2, 2, 1, 1,};\n-        int[] expecteds = instance.getFaces().toArray(null);\n-        int length = faces.length;\n-        instance.getFaces().set(-1, faces, -1, length);\n-        \/\/ faces should not change\n-        assertArrayEquals(expecteds, instance.getFaces().toArray(null));\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+            int divX = 10;\n+            int divY = 10;\n+            TriangleMesh instance = buildTriangleMesh(divX, divY); \/\/ 1200 faces\n+            int faces[] = {0, 0, 2, 2, 1, 1,};\n+            int[] expecteds = instance.getFaces().toArray(null);\n+            int length = faces.length;\n+            instance.getFaces().set(-1, faces, -1, length);\n+            \/\/ faces should not change\n+            assertArrayEquals(expecteds, instance.getFaces().toArray(null));\n+        });\n@@ -199,1 +213,1 @@\n-    @Test(expected = ArrayIndexOutOfBoundsException.class)\n+    @Test\n@@ -201,10 +215,12 @@\n-        int divX = 10;\n-        int divY = 10;\n-        TriangleMesh instance = buildTriangleMesh(divX, divY); \/\/ 1200 faces\n-        int faces[] = {0, 0, 2, 2, 1, 1,};\n-        int[] expecteds = instance.getFaces().toArray(null);\n-        int start = 0;\n-        int length = faces.length;\n-        instance.getFaces().set(1200, faces, start, length);\n-        \/\/ faces should not change\n-        assertArrayEquals(expecteds, instance.getFaces().toArray(null));\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+            int divX = 10;\n+            int divY = 10;\n+            TriangleMesh instance = buildTriangleMesh(divX, divY); \/\/ 1200 faces\n+            int faces[] = {0, 0, 2, 2, 1, 1,};\n+            int[] expecteds = instance.getFaces().toArray(null);\n+            int start = 0;\n+            int length = faces.length;\n+            instance.getFaces().set(1200, faces, start, length);\n+            \/\/ faces should not change\n+            assertArrayEquals(expecteds, instance.getFaces().toArray(null));\n+        });\n@@ -217,1 +233,1 @@\n-    @Test(expected = ArrayIndexOutOfBoundsException.class)\n+    @Test\n@@ -219,12 +235,14 @@\n-        int divX = 10;\n-        int divY = 10;\n-        TriangleMesh instance = buildTriangleMesh(divX, divY); \/\/ 1200 faces\n-        int faces[] = {\n-            0, 0, 2, 2, 1, 1,\n-            2, 2, 3, 3, 1, 1,};\n-        int[] expecteds = instance.getFaces().toArray(null);\n-        int index = 6;\n-        int length = faces.length;\n-        instance.getFaces().set(index, faces, 1, length);\n-        \/\/ faces should not change\n-        assertArrayEquals(expecteds, instance.getFaces().toArray(null));\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+            int divX = 10;\n+            int divY = 10;\n+            TriangleMesh instance = buildTriangleMesh(divX, divY); \/\/ 1200 faces\n+            int faces[] = {\n+                0, 0, 2, 2, 1, 1,\n+                2, 2, 3, 3, 1, 1,};\n+            int[] expecteds = instance.getFaces().toArray(null);\n+            int index = 6;\n+            int length = faces.length;\n+            instance.getFaces().set(index, faces, 1, length);\n+            \/\/ faces should not change\n+            assertArrayEquals(expecteds, instance.getFaces().toArray(null));\n+        });\n@@ -257,1 +275,1 @@\n-    @Test(expected = ArrayIndexOutOfBoundsException.class)\n+    @Test\n@@ -259,12 +277,14 @@\n-        int divX = 10;\n-        int divY = 10;\n-        TriangleMesh instance = buildTriangleMesh(divX, divY); \/\/ 242 texCoords\n-        float texCoords[] = {0, 0,\n-                             0, 1,\n-                             1, 0,\n-                             1, 1};\n-        float[] expecteds = instance.getTexCoords().toArray(null);\n-        int length = texCoords.length;\n-        instance.getTexCoords().set(-1, texCoords, -1, length);\n-        \/\/ texCoords should not change\n-        assertArrayEquals(instance.getTexCoords().toArray(null), expecteds, 1e-3f);\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+            int divX = 10;\n+            int divY = 10;\n+            TriangleMesh instance = buildTriangleMesh(divX, divY); \/\/ 242 texCoords\n+            float texCoords[] = {0, 0,\n+                                0, 1,\n+                                1, 0,\n+                                1, 1};\n+            float[] expecteds = instance.getTexCoords().toArray(null);\n+            int length = texCoords.length;\n+            instance.getTexCoords().set(-1, texCoords, -1, length);\n+            \/\/ texCoords should not change\n+            assertArrayEquals(instance.getTexCoords().toArray(null), expecteds, 1e-3f);\n+        });\n@@ -277,1 +297,1 @@\n-    @Test(expected = ArrayIndexOutOfBoundsException.class)\n+    @Test\n@@ -279,13 +299,15 @@\n-        int divX = 10;\n-        int divY = 10;\n-        TriangleMesh instance = buildTriangleMesh(divX, divY); \/\/ 242 texCoords\n-        float texCoords[] = {0, 0,\n-                             0, 1,\n-                             1, 0,\n-                             1, 1};\n-        float[] expecteds = instance.getTexCoords().toArray(null);\n-        int start = 0;\n-        int length = texCoords.length;\n-        instance.getTexCoords().set(240, texCoords, start, length);\n-        \/\/ texCoords should not change\n-        assertArrayEquals(instance.getTexCoords().toArray(null), expecteds, 1e-3f);\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+            int divX = 10;\n+            int divY = 10;\n+            TriangleMesh instance = buildTriangleMesh(divX, divY); \/\/ 242 texCoords\n+            float texCoords[] = {0, 0,\n+                                0, 1,\n+                                1, 0,\n+                                1, 1};\n+            float[] expecteds = instance.getTexCoords().toArray(null);\n+            int start = 0;\n+            int length = texCoords.length;\n+            instance.getTexCoords().set(240, texCoords, start, length);\n+            \/\/ texCoords should not change\n+            assertArrayEquals(instance.getTexCoords().toArray(null), expecteds, 1e-3f);\n+        });\n@@ -298,1 +320,1 @@\n-    @Test(expected = ArrayIndexOutOfBoundsException.class)\n+    @Test\n@@ -300,13 +322,15 @@\n-        int divX = 10;\n-        int divY = 10;\n-        TriangleMesh instance = buildTriangleMesh(divX, divY); \/\/ 242 texCoords\n-        float texCoords[] = {0, 0,\n-                             0, 1,\n-                             1, 0,\n-                             1, 1};\n-        float[] expecteds = instance.getTexCoords().toArray(null);\n-        int index = 2;\n-        int length = texCoords.length;\n-        instance.getTexCoords().set(index, texCoords, 1, length);\n-        \/\/ texCoords should not change\n-        assertArrayEquals(instance.getTexCoords().toArray(null), expecteds, 1e-3f);\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+            int divX = 10;\n+            int divY = 10;\n+            TriangleMesh instance = buildTriangleMesh(divX, divY); \/\/ 242 texCoords\n+            float texCoords[] = {0, 0,\n+                                0, 1,\n+                                1, 0,\n+                                1, 1};\n+            float[] expecteds = instance.getTexCoords().toArray(null);\n+            int index = 2;\n+            int length = texCoords.length;\n+            instance.getTexCoords().set(index, texCoords, 1, length);\n+            \/\/ texCoords should not change\n+            assertArrayEquals(instance.getTexCoords().toArray(null), expecteds, 1e-3f);\n+        });\n@@ -344,1 +368,1 @@\n-    @Test(expected = ArrayIndexOutOfBoundsException.class)\n+    @Test\n@@ -346,17 +370,19 @@\n-        int divX = 10;\n-        int divY = 10;\n-        TriangleMesh instance = buildTriangleMesh(divX, divY); \/\/ 121 points\n-        float points[] = {\n-            1, 1, 1,\n-            1, 1, -1,\n-            1, -1, 1,\n-            1, -1, -1,\n-            -1, 1, 1,\n-            -1, 1, -1,\n-            -1, -1, 1,\n-            -1, -1, -1,};\n-        float[] expecteds = instance.getPoints().toArray(null);\n-        int length = points.length;\n-        instance.getPoints().set(-1, points, -1, length);\n-        \/\/ points should not change\n-        assertArrayEquals(instance.getPoints().toArray(null), expecteds, 1e-3f);\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+            int divX = 10;\n+            int divY = 10;\n+            TriangleMesh instance = buildTriangleMesh(divX, divY); \/\/ 121 points\n+            float points[] = {\n+                1, 1, 1,\n+                1, 1, -1,\n+                1, -1, 1,\n+                1, -1, -1,\n+                -1, 1, 1,\n+                -1, 1, -1,\n+                -1, -1, 1,\n+                -1, -1, -1,};\n+            float[] expecteds = instance.getPoints().toArray(null);\n+            int length = points.length;\n+            instance.getPoints().set(-1, points, -1, length);\n+            \/\/ points should not change\n+            assertArrayEquals(instance.getPoints().toArray(null), expecteds, 1e-3f);\n+        });\n@@ -369,1 +395,1 @@\n-    @Test(expected = ArrayIndexOutOfBoundsException.class)\n+    @Test\n@@ -371,18 +397,20 @@\n-        int divX = 10;\n-        int divY = 10;\n-        TriangleMesh instance = buildTriangleMesh(divX, divY); \/\/ 121 points\n-        float points[] = {\n-            1, 1, 1,\n-            1, 1, -1,\n-            1, -1, 1,\n-            1, -1, -1,\n-            -1, 1, 1,\n-            -1, 1, -1,\n-            -1, -1, 1,\n-            -1, -1, -1,};\n-        float[] expecteds = instance.getPoints().toArray(null);\n-        int start = 0;\n-        int length = points.length;\n-        instance.getPoints().set(120 * 3, points, start, length);\n-        \/\/ points should not change\n-        assertArrayEquals(instance.getPoints().toArray(null), expecteds, 1e-3f);\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+            int divX = 10;\n+            int divY = 10;\n+            TriangleMesh instance = buildTriangleMesh(divX, divY); \/\/ 121 points\n+            float points[] = {\n+                1, 1, 1,\n+                1, 1, -1,\n+                1, -1, 1,\n+                1, -1, -1,\n+                -1, 1, 1,\n+                -1, 1, -1,\n+                -1, -1, 1,\n+                -1, -1, -1,};\n+            float[] expecteds = instance.getPoints().toArray(null);\n+            int start = 0;\n+            int length = points.length;\n+            instance.getPoints().set(120 * 3, points, start, length);\n+            \/\/ points should not change\n+            assertArrayEquals(instance.getPoints().toArray(null), expecteds, 1e-3f);\n+        });\n@@ -395,1 +423,1 @@\n-    @Test(expected = ArrayIndexOutOfBoundsException.class)\n+    @Test\n@@ -397,18 +425,20 @@\n-        int divX = 10;\n-        int divY = 10;\n-        TriangleMesh instance = buildTriangleMesh(divX, divY); \/\/ 121 points\n-        float points[] = {\n-            1, 1, 1,\n-            1, 1, -1,\n-            1, -1, 1,\n-            1, -1, -1,\n-            -1, 1, 1,\n-            -1, 1, -1,\n-            -1, -1, 1,\n-            -1, -1, -1,};\n-        float[] expecteds = instance.getPoints().toArray(null);\n-        int index = 3;\n-        int length = points.length;\n-        instance.getPoints().set(index, points, 1, length);\n-        \/\/ points should not change\n-        assertArrayEquals(instance.getPoints().toArray(null), expecteds, 1e-3f);\n+        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {\n+            int divX = 10;\n+            int divY = 10;\n+            TriangleMesh instance = buildTriangleMesh(divX, divY); \/\/ 121 points\n+            float points[] = {\n+                1, 1, 1,\n+                1, 1, -1,\n+                1, -1, 1,\n+                1, -1, -1,\n+                -1, 1, 1,\n+                -1, 1, -1,\n+                -1, -1, 1,\n+                -1, -1, -1,};\n+            float[] expecteds = instance.getPoints().toArray(null);\n+            int index = 3;\n+            int length = points.length;\n+            instance.getPoints().set(index, points, 1, length);\n+            \/\/ points should not change\n+            assertArrayEquals(instance.getPoints().toArray(null), expecteds, 1e-3f);\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/TriangleMeshTest.java","additions":216,"deletions":186,"binary":false,"changes":402,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import org.junit.Test;\n@@ -43,1 +42,4 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -48,1 +50,2 @@\n-    @Test public void testAddTo() throws Exception {\n+    @Test\n+    public void testAddTo() throws Exception {\n@@ -57,1 +60,2 @@\n-    @Test public void testDoublePropertySynced_Y() {\n+    @Test\n+    public void testDoublePropertySynced_Y() {\n@@ -80,1 +84,2 @@\n-    @Test public void toStringShouldReturnNonEmptyString() {\n+    @Test\n+    public void toStringShouldReturnNonEmptyString() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/VLineToTest.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -37,0 +32,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -42,10 +38,4 @@\n-    public VLineTo_onInvalidate_Test(Configuration config) {\n-        super(config);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]> data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(VLineTo.class, \"y\", 100.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS})}\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(VLineTo.class, \"y\", 100.0, new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_CONTENTS}) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/VLineTo_onInvalidate_Test.java","additions":8,"deletions":18,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -32,4 +31,1 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -38,1 +34,0 @@\n-@RunWith(Parameterized.class)\n@@ -40,2 +35,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -44,1 +39,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -46,5 +41,1 @@\n-        });\n-    }\n-\n-    public VLineTo_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/shape\/VLineTo_properties_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import static junit.framework.Assert.assertEquals;\n@@ -31,1 +30,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/text\/FontPostureTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,5 +29,0 @@\n-import static test.com.sun.javafx.test.TestHelper.assertImmutableList;\n-import static junit.framework.Assert.assertEquals;\n-import static junit.framework.Assert.assertNotNull;\n-import static junit.framework.Assert.assertNotSame;\n-import static junit.framework.Assert.assertTrue;\n@@ -40,1 +35,6 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static test.com.sun.javafx.test.TestHelper.assertImmutableList;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/text\/FontTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import static junit.framework.Assert.assertEquals;\n@@ -31,1 +30,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/text\/FontWeightTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n@@ -39,1 +37,3 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -43,1 +43,2 @@\n-    @Test public void testTabSize() {\n+    @Test\n+    public void testTabSize() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/text\/TextFlowTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assume.assumeTrue;\n@@ -42,1 +37,6 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -46,1 +46,2 @@\n-    @Test public void testCtors() {\n+    @Test\n+    public void testCtors() {\n@@ -57,1 +58,2 @@\n-    @Test public void testSettingNullText() {\n+    @Test\n+    public void testSettingNullText() {\n@@ -72,1 +74,2 @@\n-    @Test public void testDefaultTextNotNull() {\n+    @Test\n+    public void testDefaultTextNotNull() {\n@@ -78,1 +81,2 @@\n-    @Test public void testStoreFont() {\n+    @Test\n+    public void testStoreFont() {\n@@ -90,1 +94,2 @@\n-    @Test public void testPropertyPropagation_font() throws Exception {\n+    @Test\n+    public void testPropertyPropagation_font() throws Exception {\n@@ -96,1 +101,2 @@\n-\/\/     @Test public void testPropertyPropagation_textOrigin() throws Exception {\n+\/\/     @Test\n+\/\/     public void testPropertyPropagation_textOrigin() throws Exception {\n@@ -107,1 +113,2 @@\n-\/\/     @Test public void testPropertyPropagation_boundsType() throws Exception {\n+\/\/     @Test\n+\/\/     public void testPropertyPropagation_boundsType() throws Exception {\n@@ -118,1 +125,2 @@\n-\/\/     @Test public void testPropertyPropagation_textAlignment() throws Exception {\n+\/\/     @Test\n+\/\/     public void testPropertyPropagation_textAlignment() throws Exception {\n@@ -129,1 +137,2 @@\n-\/\/     @Test public void testPropertyPropagation_visible() throws Exception {\n+\/\/     @Test\n+\/\/     public void testPropertyPropagation_visible() throws Exception {\n@@ -134,1 +143,2 @@\n-\/\/     @Test public void testPropertyPropagation_text() throws Exception {\n+\/\/     @Test\n+\/\/     public void testPropertyPropagation_text() throws Exception {\n@@ -139,1 +149,2 @@\n-\/\/     @Test public void testPropertyPropagation_strikethrough() throws Exception {\n+\/\/     @Test\n+\/\/     public void testPropertyPropagation_strikethrough() throws Exception {\n@@ -144,1 +155,2 @@\n-\/\/     @Test public void testPropertyPropagation_underline() throws Exception {\n+\/\/     @Test\n+\/\/     public void testPropertyPropagation_underline() throws Exception {\n@@ -149,1 +161,2 @@\n-\/\/     @Test public void testPropertyPropagation_x() throws Exception {\n+\/\/     @Test\n+\/\/     public void testPropertyPropagation_x() throws Exception {\n@@ -154,1 +167,2 @@\n-\/\/     @Test public void testPropertyPropagation_y() throws Exception {\n+\/\/     @Test\n+\/\/     public void testPropertyPropagation_y() throws Exception {\n@@ -159,1 +173,2 @@\n-\/\/     @Test public void testPropertyPropagation_wrappingWidth() throws Exception {\n+\/\/     @Test\n+\/\/     public void testPropertyPropagation_wrappingWidth() throws Exception {\n@@ -164,1 +179,2 @@\n-\/\/     @Test public void testBoundPropertySync_X() throws Exception {\n+\/\/     @Test\n+\/\/     public void testBoundPropertySync_X() throws Exception {\n@@ -170,1 +186,2 @@\n-\/\/     @Test public void testBoundPropertySync_Y() throws Exception {\n+\/\/     @Test\n+\/\/     public void testBoundPropertySync_Y() throws Exception {\n@@ -176,1 +193,2 @@\n-\/\/     @Test public void testBoundPropertySync_Text() throws Exception {\n+\/\/     @Test\n+\/\/     public void testBoundPropertySync_Text() throws Exception {\n@@ -188,1 +206,2 @@\n-\/\/     @Test public void testBoundPropertySync_Font() throws Exception {\n+\/\/     @Test\n+\/\/     public void testBoundPropertySync_Font() throws Exception {\n@@ -197,1 +216,2 @@\n-\/\/     @Test public void testBoundPropertySync_BoundsType() throws Exception {\n+\/\/     @Test\n+\/\/     public void testBoundPropertySync_BoundsType() throws Exception {\n@@ -204,1 +224,2 @@\n-\/\/     @Test public void testBoundPropertySync_WrappingWidth() throws Exception {\n+\/\/     @Test\n+\/\/     public void testBoundPropertySync_WrappingWidth() throws Exception {\n@@ -211,1 +232,2 @@\n-\/\/     @Test public void testBoundPropertySync_Underline() throws Exception {\n+\/\/     @Test\n+\/\/     public void testBoundPropertySync_Underline() throws Exception {\n@@ -217,1 +239,2 @@\n-\/\/     @Test public void testBoundPropertySync_Strikethrough() throws Exception {\n+\/\/     @Test\n+\/\/     public void testBoundPropertySync_Strikethrough() throws Exception {\n@@ -223,1 +246,2 @@\n-\/\/     @Test public void testBoundPropertySync_TextAlignment() throws Exception {\n+\/\/     @Test\n+\/\/     public void testBoundPropertySync_TextAlignment() throws Exception {\n@@ -229,1 +253,2 @@\n-    @Test public void toStringShouldReturnNonEmptyString() {\n+    @Test\n+    public void toStringShouldReturnNonEmptyString() {\n@@ -236,1 +261,2 @@\n-    @Test public void testTabSize() {\n+    @Test\n+    public void testTabSize() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/text\/TextTest.java","additions":59,"deletions":33,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -38,4 +37,0 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n@@ -44,1 +39,2 @@\n-@RunWith(Parameterized.class)\n+import org.junit.jupiter.params.provider.Arguments;\n+\n@@ -48,3 +44,2 @@\n-    @Parameters\n-    public static Collection data() {\n-        return Arrays.asList(new Object[] {\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n@@ -64,5 +59,1 @@\n-        });\n-    }\n-\n-    public Text_cssMethods_Test(final Configuration configuration) {\n-        super(configuration);\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/text\/Text_cssMethods_Test.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -33,4 +32,0 @@\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n@@ -42,0 +37,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -44,1 +41,0 @@\n-@RunWith(Parameterized.class)\n@@ -47,20 +43,14 @@\n-    public Text_onInvalidate_Test(Configuration config) {\n-        super(config);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]> data() {\n-        Object[][] data = new Object[][] {\n-              \/\/rich text aware\n-              {new Configuration(Text.class, \"text\", \"cool\", new DirtyBits[] {DirtyBits.NODE_CONTENTS, DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-              {new Configuration(Text.class, \"x\", 123.0, new DirtyBits[] {DirtyBits.NODE_GEOMETRY})},\n-              {new Configuration(Text.class, \"y\", 123.0, new DirtyBits[] {DirtyBits.NODE_GEOMETRY})},\n-              {new Configuration(Text.class, \"font\", new Font(10) , new DirtyBits[] {DirtyBits.TEXT_FONT, DirtyBits.NODE_CONTENTS, DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-              {new Configuration(Text.class, \"wrappingWidth\", 5 , new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})}, \/\/note wrapping width sometimes can also cause DirtyBits.NODE_CONTENTS,\n-              {new Configuration(Text.class, \"underline\", true , new DirtyBits[] {DirtyBits.TEXT_ATTRS})},\n-              {new Configuration(Text.class, \"strikethrough\", true , new DirtyBits[] {DirtyBits.TEXT_ATTRS})},\n-              {new Configuration(Text.class, \"textAlignment\", TextAlignment.RIGHT , new DirtyBits[] {DirtyBits.NODE_CONTENTS, DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY})},\n-              {new Configuration(Text.class, \"textOrigin\", VPos.BOTTOM , new DirtyBits[] {DirtyBits.NODE_BOUNDS , DirtyBits.NODE_GEOMETRY})},\n-              {new Configuration(Text.class, \"boundsType\", TextBoundsType.VISUAL , new DirtyBits[] {DirtyBits.NODE_BOUNDS , DirtyBits.NODE_GEOMETRY})}\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            \/\/rich text aware\n+            Arguments.of( new Configuration(Text.class, \"text\", \"cool\", new DirtyBits[] {DirtyBits.NODE_CONTENTS, DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Text.class, \"x\", 123.0, new DirtyBits[] {DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Text.class, \"y\", 123.0, new DirtyBits[] {DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Text.class, \"font\", new Font(10) , new DirtyBits[] {DirtyBits.TEXT_FONT, DirtyBits.NODE_CONTENTS, DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Text.class, \"wrappingWidth\", 5 , new DirtyBits[] {DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ), \/\/note wrapping width sometimes can also cause DirtyBits.NODE_CONTENTS,\n+            Arguments.of( new Configuration(Text.class, \"underline\", true , new DirtyBits[] {DirtyBits.TEXT_ATTRS}) ),\n+            Arguments.of( new Configuration(Text.class, \"strikethrough\", true , new DirtyBits[] {DirtyBits.TEXT_ATTRS}) ),\n+            Arguments.of( new Configuration(Text.class, \"textAlignment\", TextAlignment.RIGHT , new DirtyBits[] {DirtyBits.NODE_CONTENTS, DirtyBits.NODE_BOUNDS, DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Text.class, \"textOrigin\", VPos.BOTTOM , new DirtyBits[] {DirtyBits.NODE_BOUNDS , DirtyBits.NODE_GEOMETRY}) ),\n+            Arguments.of( new Configuration(Text.class, \"boundsType\", TextBoundsType.VISUAL , new DirtyBits[] {DirtyBits.NODE_BOUNDS , DirtyBits.NODE_GEOMETRY}) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/text\/Text_onInvalidate_Test.java","additions":18,"deletions":28,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,4 +30,2 @@\n-import java.util.Collection;\n-import org.junit.runners.Parameterized.Parameters;\n-import org.junit.runners.Parameterized;\n-import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n@@ -35,2 +33,0 @@\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n@@ -49,1 +45,0 @@\n-import static org.junit.Assert.*;\n@@ -51,1 +46,9 @@\n-@RunWith(Parameterized.class)\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n@@ -150,42 +153,35 @@\n-    @Parameters\n-    public static Collection getParams() {\n-        return Arrays.asList(new Object[][] {\n-            { identity },                   \/\/  0\n-            { translate },                  \/\/  1\n-            { scale },                      \/\/  2\n-            { sc_tr },                      \/\/  3\n-            { shear },                      \/\/  4\n-            { sh_tr },                      \/\/  5\n-            { sh_sc },                      \/\/  6\n-            { sh_sc_simple },               \/\/  7\n-            { sh_sc_tr },                   \/\/  8\n-            { a3d_tr },                     \/\/  9\n-            { a3d_sc },                     \/\/ 10\n-            { a3d_sc_tr },                  \/\/ 11\n-            { a3d_sc2_tr3 },                \/\/ 12\n-            { a3d_sc3_tr2 },                \/\/ 13\n-            { a3d_withShear },              \/\/ 14\n-            { a3d_only3d },                 \/\/ 15\n-            { a3d_translate_only },         \/\/ 16\n-            { a3d_complex },                \/\/ 17\n-            { a3d_complex_noninvertible },  \/\/ 18\n-            { shearRotatesToIdentity1 },    \/\/ 19\n-            { shearRotatesToIdentity2 },    \/\/ 20\n-            { scaleRotatesToIdentity },     \/\/ 21\n-            { scr_tr_rotatesToTr },         \/\/ 22\n-            { translate_only },             \/\/ 23\n-            { nonInv_translate },           \/\/ 24\n-            { nonInv_scale },               \/\/ 25\n-            { nonInv_shear },               \/\/ 26\n-            { nonInv_sh_sc_tr },            \/\/ 27\n-            { nonInv_sh_sc },               \/\/ 28\n-            { nonInv_sh_tr },               \/\/ 29\n-            { nonInv_sc_tr },               \/\/ 30\n-            { zero },                       \/\/ 31\n-        });\n-    }\n-\n-    private Affine affine;\n-\n-    public AffineOperationsTest(Affine a) {\n-        this.affine = a;\n+    public static Stream<Arguments> getParams() {\n+        return Stream.of(\n+            Arguments.of( identity ),                   \/\/  0\n+            Arguments.of( translate ),                  \/\/  1\n+            Arguments.of( scale ),                      \/\/  2\n+            Arguments.of( sc_tr ),                      \/\/  3\n+            Arguments.of( shear ),                      \/\/  4\n+            Arguments.of( sh_tr ),                      \/\/  5\n+            Arguments.of( sh_sc ),                      \/\/  6\n+            Arguments.of( sh_sc_simple ),               \/\/  7\n+            Arguments.of( sh_sc_tr ),                   \/\/  8\n+            Arguments.of( a3d_tr ),                     \/\/  9\n+            Arguments.of( a3d_sc ),                     \/\/ 10\n+            Arguments.of( a3d_sc_tr ),                  \/\/ 11\n+            Arguments.of( a3d_sc2_tr3 ),                \/\/ 12\n+            Arguments.of( a3d_sc3_tr2 ),                \/\/ 13\n+            Arguments.of( a3d_withShear ),              \/\/ 14\n+            Arguments.of( a3d_only3d ),                 \/\/ 15\n+            Arguments.of( a3d_translate_only ),         \/\/ 16\n+            Arguments.of( a3d_complex ),                \/\/ 17\n+            Arguments.of( a3d_complex_noninvertible ),  \/\/ 18\n+            Arguments.of( shearRotatesToIdentity1 ),    \/\/ 19\n+            Arguments.of( shearRotatesToIdentity2 ),    \/\/ 20\n+            Arguments.of( scaleRotatesToIdentity ),     \/\/ 21\n+            Arguments.of( scr_tr_rotatesToTr ),         \/\/ 22\n+            Arguments.of( translate_only ),             \/\/ 23\n+            Arguments.of( nonInv_translate ),           \/\/ 24\n+            Arguments.of( nonInv_scale ),               \/\/ 25\n+            Arguments.of( nonInv_shear ),               \/\/ 26\n+            Arguments.of( nonInv_sh_sc_tr ),            \/\/ 27\n+            Arguments.of( nonInv_sh_sc ),               \/\/ 28\n+            Arguments.of( nonInv_sh_tr ),               \/\/ 29\n+            Arguments.of( nonInv_sc_tr ),               \/\/ 30\n+            Arguments.of( zero )                       \/\/ 31\n+        );\n@@ -248,2 +244,3 @@\n-    @Test\n-    public void SetToTransformShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void SetToTransformShouldBeAtomic(Affine affine) {\n@@ -259,2 +256,3 @@\n-    @Test\n-    public void SetToTransform2DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void SetToTransform2DShouldBeAtomic(Affine affine) {\n@@ -270,2 +268,3 @@\n-    @Test\n-    public void testSetToIdentity() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testSetToIdentity(Affine affine) {\n@@ -277,2 +276,3 @@\n-    @Test\n-    public void SetToIdentityShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void SetToIdentityShouldBeAtomic(Affine affine) {\n@@ -287,2 +287,3 @@\n-    @Test\n-    public void testAppendTranslation2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendTranslation2D(Affine affine) {\n@@ -302,2 +303,3 @@\n-    @Test\n-    public void testAppendZeroTranslation2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendZeroTranslation2D(Affine affine) {\n@@ -317,2 +319,3 @@\n-    @Test\n-    public void testAppendTranslation2DWhichEliminatesTranslation() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendTranslation2DWhichEliminatesTranslation(Affine affine) {\n@@ -348,2 +351,3 @@\n-    @Test\n-    public void testAppendTranslation3DWhichMakesTranslation2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendTranslation3DWhichMakesTranslation2D(Affine affine) {\n@@ -370,2 +374,3 @@\n-    @Test\n-    public void appendTranslation2DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void appendTranslation2DShouldBeAtomic(Affine affine) {\n@@ -378,2 +383,3 @@\n-    @Test\n-    public void testPrependTranslation2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependTranslation2D(Affine affine) {\n@@ -389,2 +395,3 @@\n-    @Test\n-    public void testPrependZeroTranslation() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependZeroTranslation(Affine affine) {\n@@ -400,2 +407,3 @@\n-    @Test\n-    public void prependTranslation2DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prependTranslation2DShouldBeAtomic(Affine affine) {\n@@ -408,2 +416,3 @@\n-    @Test\n-    public void testAppendTranslation3D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendTranslation3D(Affine affine) {\n@@ -419,2 +428,3 @@\n-    @Test\n-    public void appendTranslation3DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void appendTranslation3DShouldBeAtomic(Affine affine) {\n@@ -427,2 +437,3 @@\n-    @Test\n-    public void testPrependTranslation3D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependTranslation3D(Affine affine) {\n@@ -438,2 +449,3 @@\n-    @Test\n-    public void testPrependTranslation3DWhichMakesIt2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependTranslation3DWhichMakesIt2D(Affine affine) {\n@@ -449,2 +461,3 @@\n-    @Test\n-    public void prependTranslation3DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prependTranslation3DShouldBeAtomic(Affine affine) {\n@@ -457,2 +470,3 @@\n-    @Test\n-    public void testAppendScale2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendScale2D(Affine affine) {\n@@ -468,4 +482,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testAppendNullPivotedScale2D() {\n-        Affine a = affine.clone();\n-        a.appendScale(8, 9, null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendNullPivotedScale2D(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = affine.clone();\n+            a.appendScale(8, 9, null);\n+        });\n@@ -474,2 +491,3 @@\n-    @Test\n-    public void testAppendZeroPivotScale2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendZeroPivotScale2D(Affine affine) {\n@@ -494,2 +512,3 @@\n-    @Test\n-    public void testAppendZeroScale2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendZeroScale2D(Affine affine) {\n@@ -514,2 +533,3 @@\n-    @Test\n-    public void testAppendNoScale2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendNoScale2D(Affine affine) {\n@@ -525,2 +545,3 @@\n-    @Test\n-    public void testAppendScale2DWhichMayEliminateScale() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendScale2DWhichMayEliminateScale(Affine affine) {\n@@ -543,2 +564,3 @@\n-    @Test\n-    public void testAppendScale3DWhichMakesIt2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendScale3DWhichMakesIt2D(Affine affine) {\n@@ -560,2 +582,3 @@\n-    @Test\n-    public void appendScale2DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void appendScale2DShouldBeAtomic(Affine affine) {\n@@ -568,2 +591,3 @@\n-    @Test\n-    public void testPrependScale2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependScale2D(Affine affine) {\n@@ -579,4 +603,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testPrependNullPivotedScale2D() {\n-        Affine a = affine.clone();\n-        a.appendScale(8, 9, null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependNullPivotedScale2D(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = affine.clone();\n+            a.appendScale(8, 9, null);\n+        });\n@@ -585,2 +612,3 @@\n-    @Test\n-    public void testPrependZeroPivotScale2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependZeroPivotScale2D(Affine affine) {\n@@ -605,2 +633,3 @@\n-    @Test\n-    public void testPrependZeroScale2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependZeroScale2D(Affine affine) {\n@@ -625,2 +654,3 @@\n-    @Test\n-    public void testPrependHalfZeroScale2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependHalfZeroScale2D(Affine affine) {\n@@ -636,2 +666,3 @@\n-    @Test\n-    public void testPrependOtherHalfZeroScale2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependOtherHalfZeroScale2D(Affine affine) {\n@@ -647,2 +678,3 @@\n-    @Test\n-    public void testPrependNoScale2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependNoScale2D(Affine affine) {\n@@ -658,2 +690,3 @@\n-    @Test\n-    public void testPrependOppositeScale2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependOppositeScale2D(Affine affine) {\n@@ -680,2 +713,3 @@\n-    @Test\n-    public void testPrependOppositeScale3D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependOppositeScale3D(Affine affine) {\n@@ -699,2 +733,3 @@\n-    @Test\n-    public void prependScale2DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prependScale2DShouldBeAtomic(Affine affine) {\n@@ -707,2 +742,3 @@\n-    @Test\n-    public void testAppendPivotedScale2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendPivotedScale2D(Affine affine) {\n@@ -718,2 +754,3 @@\n-    @Test\n-    public void testAppendPointPivotedScale2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendPointPivotedScale2D(Affine affine) {\n@@ -729,2 +766,3 @@\n-    @Test\n-    public void appendPivotedScale2DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void appendPivotedScale2DShouldBeAtomic(Affine affine) {\n@@ -737,2 +775,3 @@\n-    @Test\n-    public void testPrependPivotedScale2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependPivotedScale2D(Affine affine) {\n@@ -748,2 +787,3 @@\n-    @Test\n-    public void testPrependPointPivotedScale2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependPointPivotedScale2D(Affine affine) {\n@@ -759,2 +799,3 @@\n-    @Test\n-    public void prependPivotedScale2DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prependPivotedScale2DShouldBeAtomic(Affine affine) {\n@@ -767,2 +808,3 @@\n-    @Test\n-    public void testAppendScale3D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendScale3D(Affine affine) {\n@@ -778,4 +820,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testAppendNullPivotedScale3D() {\n-        Affine a = affine.clone();\n-        a.appendScale(8, 9, 10, null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendNullPivotedScale3D(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = affine.clone();\n+            a.appendScale(8, 9, 10, null);\n+        });\n@@ -784,2 +829,3 @@\n-    @Test\n-    public void testAppendOppositeScale2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendOppositeScale2D(Affine affine) {\n@@ -806,2 +852,3 @@\n-    @Test\n-    public void testAppendOppositeScale3D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendOppositeScale3D(Affine affine) {\n@@ -831,2 +878,3 @@\n-    @Test\n-    public void appendScale3DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void appendScale3DShouldBeAtomic(Affine affine) {\n@@ -839,2 +887,3 @@\n-    @Test\n-    public void testPrependScale3D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependScale3D(Affine affine) {\n@@ -850,4 +899,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testPrependNullPivotedScale3D() {\n-        Affine a = affine.clone();\n-        a.prependScale(8, 9, 10, null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependNullPivotedScale3D(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = affine.clone();\n+            a.prependScale(8, 9, 10, null);\n+        });\n@@ -856,2 +908,3 @@\n-    @Test\n-    public void testPrependScale3DWichMakesIt2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependScale3DWichMakesIt2D(Affine affine) {\n@@ -874,2 +927,3 @@\n-    @Test\n-    public void prependScale3DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prependScale3DShouldBeAtomic(Affine affine) {\n@@ -882,2 +936,3 @@\n-    @Test\n-    public void testAppendPivotedScale3D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendPivotedScale3D(Affine affine) {\n@@ -893,2 +948,3 @@\n-    @Test\n-    public void testAppendPointPivotedScale3D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendPointPivotedScale3D(Affine affine) {\n@@ -904,2 +960,3 @@\n-    @Test\n-    public void appendPivotedScale3DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void appendPivotedScale3DShouldBeAtomic(Affine affine) {\n@@ -912,2 +969,3 @@\n-    @Test\n-    public void testPrependPivotedScale3D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependPivotedScale3D(Affine affine) {\n@@ -923,2 +981,3 @@\n-    @Test\n-    public void testPrependPointPivotedScale3D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependPointPivotedScale3D(Affine affine) {\n@@ -934,2 +993,3 @@\n-    @Test\n-    public void prependPivotedScale3DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prependPivotedScale3DShouldBeAtomic(Affine affine) {\n@@ -942,2 +1002,3 @@\n-    @Test\n-    public void testAppendShear2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendShear2D(Affine affine) {\n@@ -953,4 +1014,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testAppendNullPivotedShear2D() {\n-        Affine a = affine.clone();\n-        a.appendShear(8, 9, null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendNullPivotedShear2D(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = affine.clone();\n+            a.appendShear(8, 9, null);\n+        });\n@@ -959,4 +1023,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testPrependNullPivotedShear2D() {\n-        Affine a = affine.clone();\n-        a.prependShear(8, 9, null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependNullPivotedShear2D(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = affine.clone();\n+            a.prependShear(8, 9, null);\n+        });\n@@ -965,2 +1032,3 @@\n-    @Test\n-    public void testAppendZeroPivotedShear2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendZeroPivotedShear2D(Affine affine) {\n@@ -985,2 +1053,3 @@\n-    @Test\n-    public void testPrependZeroPivotedShear2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependZeroPivotedShear2D(Affine affine) {\n@@ -1005,2 +1074,3 @@\n-    @Test\n-    public void testAppendZeroShear2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendZeroShear2D(Affine affine) {\n@@ -1016,2 +1086,3 @@\n-    @Test\n-    public void appendShear2DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void appendShear2DShouldBeAtomic(Affine affine) {\n@@ -1024,2 +1095,3 @@\n-    @Test\n-    public void testPrependShear2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependShear2D(Affine affine) {\n@@ -1035,2 +1107,3 @@\n-    @Test\n-    public void testPrependShearWhichMayEliminateTranslation() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependShearWhichMayEliminateTranslation(Affine affine) {\n@@ -1049,2 +1122,3 @@\n-    @Test\n-    public void testPrependZeroShear2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependZeroShear2D(Affine affine) {\n@@ -1060,2 +1134,3 @@\n-    @Test\n-    public void prependShear2DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prependShear2DShouldBeAtomic(Affine affine) {\n@@ -1068,2 +1143,3 @@\n-    @Test\n-    public void testAppendPivotedShear2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendPivotedShear2D(Affine affine) {\n@@ -1079,2 +1155,3 @@\n-    @Test\n-    public void testAppendPointPivotedShear2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendPointPivotedShear2D(Affine affine) {\n@@ -1090,2 +1167,3 @@\n-    @Test\n-    public void appendPivotedShear2DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void appendPivotedShear2DShouldBeAtomic(Affine affine) {\n@@ -1098,2 +1176,3 @@\n-    @Test\n-    public void testPrependPivotedShear2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependPivotedShear2D(Affine affine) {\n@@ -1109,2 +1188,3 @@\n-    @Test\n-    public void testPrependPointPivotedShear2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependPointPivotedShear2D(Affine affine) {\n@@ -1120,2 +1200,3 @@\n-    @Test\n-    public void prependPivotedShear2DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prependPivotedShear2DShouldBeAtomic(Affine affine) {\n@@ -1128,2 +1209,3 @@\n-    @Test\n-    public void testAppendRotation2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendRotation2D(Affine affine) {\n@@ -1139,2 +1221,3 @@\n-    @Test\n-    public void appendRotate2DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void appendRotate2DShouldBeAtomic(Affine affine) {\n@@ -1147,2 +1230,3 @@\n-    @Test\n-    public void testPrependRotation2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependRotation2D(Affine affine) {\n@@ -1158,2 +1242,3 @@\n-    @Test\n-    public void prependRotate2DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prependRotate2DShouldBeAtomic(Affine affine) {\n@@ -1166,2 +1251,3 @@\n-    @Test\n-    public void testAppendRotation90() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendRotation90(Affine affine) {\n@@ -1177,2 +1263,3 @@\n-    @Test\n-    public void appendRotate90ShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void appendRotate90ShouldBeAtomic(Affine affine) {\n@@ -1185,2 +1272,3 @@\n-    @Test\n-    public void testPrependRotation90() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependRotation90(Affine affine) {\n@@ -1196,2 +1284,3 @@\n-    @Test\n-    public void prependRotate90ShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prependRotate90ShouldBeAtomic(Affine affine) {\n@@ -1204,2 +1293,3 @@\n-    @Test\n-    public void testAppendRotation180() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendRotation180(Affine affine) {\n@@ -1215,2 +1305,3 @@\n-    @Test\n-    public void appendRotate180ShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void appendRotate180ShouldBeAtomic(Affine affine) {\n@@ -1223,2 +1314,3 @@\n-    @Test\n-    public void testPrependRotation180() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependRotation180(Affine affine) {\n@@ -1234,2 +1326,3 @@\n-    @Test\n-    public void prependRotate180ShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prependRotate180ShouldBeAtomic(Affine affine) {\n@@ -1242,2 +1335,3 @@\n-    @Test\n-    public void testAppendRotation270() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendRotation270(Affine affine) {\n@@ -1253,2 +1347,3 @@\n-    @Test\n-    public void appendRotate270ShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void appendRotate270ShouldBeAtomic(Affine affine) {\n@@ -1261,2 +1356,3 @@\n-    @Test\n-    public void testPrependRotation270() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependRotation270(Affine affine) {\n@@ -1272,2 +1368,3 @@\n-    @Test\n-    public void prependRotate270ShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prependRotate270ShouldBeAtomic(Affine affine) {\n@@ -1280,2 +1377,3 @@\n-    @Test\n-    public void testAppendRotationMinus450() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendRotationMinus450(Affine affine) {\n@@ -1291,2 +1389,3 @@\n-    @Test\n-    public void testPrependRotationMinus450() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependRotationMinus450(Affine affine) {\n@@ -1303,2 +1402,3 @@\n-    @Test\n-    public void testAppendPivotedRotate2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendPivotedRotate2D(Affine affine) {\n@@ -1314,4 +1414,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testAppendNullPivotedRotate2D() {\n-        Affine a = affine.clone();\n-        a.appendRotation(8, null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendNullPivotedRotate2D(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = affine.clone();\n+            a.appendRotation(8, null);\n+        });\n@@ -1320,4 +1423,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testPrependNullPivotedRotate2D() {\n-        Affine a = affine.clone();\n-        a.prependRotation(8, null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependNullPivotedRotate2D(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = affine.clone();\n+            a.prependRotation(8, null);\n+        });\n@@ -1326,2 +1432,3 @@\n-    @Test\n-    public void testAppendZeroPivotedRotate2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendZeroPivotedRotate2D(Affine affine) {\n@@ -1346,2 +1453,3 @@\n-    @Test\n-    public void testAppendPointPivotedRotate2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendPointPivotedRotate2D(Affine affine) {\n@@ -1357,2 +1465,3 @@\n-    @Test\n-    public void appendPivotedRotate2DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void appendPivotedRotate2DShouldBeAtomic(Affine affine) {\n@@ -1365,2 +1474,3 @@\n-    @Test\n-    public void testPrependPivotedRotate2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependPivotedRotate2D(Affine affine) {\n@@ -1376,2 +1486,3 @@\n-    @Test\n-    public void testPrependZeroPivotedRotate2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependZeroPivotedRotate2D(Affine affine) {\n@@ -1397,2 +1508,3 @@\n-    @Test\n-    public void testPrependPointPivotedRotate2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependPointPivotedRotate2D(Affine affine) {\n@@ -1408,2 +1520,3 @@\n-    @Test\n-    public void prependPivotedRotate2DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prependPivotedRotate2DShouldBeAtomic(Affine affine) {\n@@ -1416,2 +1529,3 @@\n-    @Test\n-    public void testAppendNoRotation() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendNoRotation(Affine affine) {\n@@ -1428,2 +1542,3 @@\n-    @Test\n-    public void testAppendRotation3D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendRotation3D(Affine affine) {\n@@ -1440,4 +1555,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testAppendNullAxisRotation3D() {\n-        Affine a = affine.clone();\n-        a.appendRotation(8, 100, 110, 120, null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendNullAxisRotation3D(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = affine.clone();\n+            a.appendRotation(8, 100, 110, 120, null);\n+        });\n@@ -1446,4 +1564,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testPrependNullAxisRotation3D() {\n-        Affine a = affine.clone();\n-        a.prependRotation(8, 100, 110, 120, null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependNullAxisRotation3D(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = affine.clone();\n+            a.prependRotation(8, 100, 110, 120, null);\n+        });\n@@ -1452,4 +1573,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testAppendNullAxisPointPivotRotation3D() {\n-        Affine a = affine.clone();\n-        a.appendRotation(8, new Point3D(100, 110, 120), null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendNullAxisPointPivotRotation3D(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = affine.clone();\n+            a.appendRotation(8, new Point3D(100, 110, 120), null);\n+        });\n@@ -1458,4 +1582,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testPrependNullAxisPointPivotRotation3D() {\n-        Affine a = affine.clone();\n-        a.prependRotation(8, new Point3D(100, 110, 120), null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependNullAxisPointPivotRotation3D(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = affine.clone();\n+            a.prependRotation(8, new Point3D(100, 110, 120), null);\n+        });\n@@ -1464,4 +1591,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testAppendNullPivotRotation3D() {\n-        Affine a = affine.clone();\n-        a.appendRotation(8, null, Rotate.Z_AXIS);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendNullPivotRotation3D(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = affine.clone();\n+            a.appendRotation(8, null, Rotate.Z_AXIS);\n+        });\n@@ -1470,4 +1600,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testPrependNullPivotRotation3D() {\n-        Affine a = affine.clone();\n-        a.prependRotation(8, null, Rotate.Z_AXIS);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependNullPivotRotation3D(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = affine.clone();\n+            a.prependRotation(8, null, Rotate.Z_AXIS);\n+        });\n@@ -1476,2 +1609,3 @@\n-    @Test\n-    public void testAppendRotation3Dbeing2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendRotation3Dbeing2D(Affine affine) {\n@@ -1488,2 +1622,3 @@\n-    @Test\n-    public void testAppendRotation3DbeingUpsideDown2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendRotation3DbeingUpsideDown2D(Affine affine) {\n@@ -1500,2 +1635,3 @@\n-    @Test\n-    public void testAppendRotationWithZeroAxis() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendRotationWithZeroAxis(Affine affine) {\n@@ -1510,2 +1646,3 @@\n-    @Test\n-    public void testAppendRotationWithAlmostZeroAxis() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendRotationWithAlmostZeroAxis(Affine affine) {\n@@ -1520,2 +1657,3 @@\n-    @Test\n-    public void testAppendPointedAxisRotation3D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendPointedAxisRotation3D(Affine affine) {\n@@ -1532,2 +1670,3 @@\n-    @Test\n-    public void testAppendPointedAxisPointedPivotRotation3D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendPointedAxisPointedPivotRotation3D(Affine affine) {\n@@ -1544,2 +1683,3 @@\n-    @Test\n-    public void appendRotate3DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void appendRotate3DShouldBeAtomic(Affine affine) {\n@@ -1553,2 +1693,3 @@\n-    @Test\n-    public void testPrependRotation3D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependRotation3D(Affine affine) {\n@@ -1565,2 +1706,3 @@\n-    @Test\n-    public void testPrependNoRotation() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependNoRotation(Affine affine) {\n@@ -1576,2 +1718,3 @@\n-    @Test\n-    public void testPrependRotation3Dbeing2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependRotation3Dbeing2D(Affine affine) {\n@@ -1588,2 +1731,3 @@\n-    @Test\n-    public void testPrependRotation3DbeingUpsideDown2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependRotation3DbeingUpsideDown2D(Affine affine) {\n@@ -1600,2 +1744,3 @@\n-    @Test\n-    public void testPrependRotationWithZeroAxis() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependRotationWithZeroAxis(Affine affine) {\n@@ -1610,2 +1755,3 @@\n-    @Test\n-    public void testPrependRotationWithAlmostZeroAxis() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependRotationWithAlmostZeroAxis(Affine affine) {\n@@ -1620,2 +1766,3 @@\n-    @Test\n-    public void testPrependPointedAxisRotation3D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependPointedAxisRotation3D(Affine affine) {\n@@ -1632,2 +1779,3 @@\n-    @Test\n-    public void testPrependPointedAxisPointedPivotRotation3D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependPointedAxisPointedPivotRotation3D(Affine affine) {\n@@ -1645,2 +1793,3 @@\n-    @Test\n-    public void prependRotate3DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prependRotate3DShouldBeAtomic(Affine affine) {\n@@ -1654,2 +1803,3 @@\n-    @Test\n-    public void testAppend2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppend2D(Affine affine) {\n@@ -1669,2 +1819,3 @@\n-    @Test\n-    public void append2DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void append2DShouldBeAtomic(Affine affine) {\n@@ -1680,2 +1831,3 @@\n-    @Test\n-    public void testPrepend2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrepend2D(Affine affine) {\n@@ -1695,2 +1847,3 @@\n-    @Test\n-    public void prepend2DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prepend2DShouldBeAtomic(Affine affine) {\n@@ -1706,2 +1859,3 @@\n-    @Test\n-    public void testAppend3D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppend3D(Affine affine) {\n@@ -1723,2 +1877,3 @@\n-    @Test\n-    public void append3DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void append3DShouldBeAtomic(Affine affine) {\n@@ -1736,2 +1891,3 @@\n-    @Test\n-    public void testPrepend3D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrepend3D(Affine affine) {\n@@ -1753,2 +1909,3 @@\n-    @Test\n-    public void prepend3DShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prepend3DShouldBeAtomic(Affine affine) {\n@@ -1766,2 +1923,3 @@\n-    @Test\n-    public void testAppendTransform() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendTransform(Affine affine) {\n@@ -1769,2 +1927,3 @@\n-        for (Object o : TransformOperationsTest.getParams()) {\n-            Object[] arr = (Object[]) o;\n+        List<Arguments> arguments = TransformOperationsTest.getParams().toList();\n+        for (Arguments arg : arguments) {\n+            Object[] arr = arg.get();\n@@ -1782,4 +1941,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testAppendNullTransform() {\n-        Affine a = affine.clone();\n-        a.append((Transform) null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendNullTransform(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = affine.clone();\n+            a.append((Transform) null);\n+        });\n@@ -1788,2 +1950,3 @@\n-    @Test\n-    public void appendTransformShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void appendTransformShouldBeAtomic(Affine affine) {\n@@ -1802,2 +1965,3 @@\n-    @Test\n-    public void testPrependTransform() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependTransform(Affine affine) {\n@@ -1805,2 +1969,3 @@\n-        for (Object o : TransformOperationsTest.getParams()) {\n-            Object[] arr = (Object[]) o;\n+        List<Arguments> arguments = TransformOperationsTest.getParams().toList();\n+        for (Arguments arg : arguments) {\n+            Object[] arr = arg.get();\n@@ -1820,4 +1985,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testPrependNullTransform() {\n-        Affine a = affine.clone();\n-        a.prepend((Transform) null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependNullTransform(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = affine.clone();\n+            a.prepend((Transform) null);\n+        });\n@@ -1826,2 +1994,3 @@\n-    @Test\n-    public void prependTransformShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prependTransformShouldBeAtomic(Affine affine) {\n@@ -1840,2 +2009,3 @@\n-    @Test\n-    public void testAppendArray() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendArray(Affine affine) {\n@@ -1876,4 +2046,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testAppendArrayNullMatrix() {\n-        Affine a = new Affine();\n-        a.append(new double[] { 1, 2, 3 }, null, 0);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendArrayNullMatrix(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = new Affine();\n+            a.append(new double[] { 1, 2, 3 }, null, 0);\n+        });\n@@ -1882,4 +2055,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testAppendArrayNullType() {\n-        Affine a = new Affine();\n-        a.append(null, MatrixType.MT_2D_2x3, 0);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendArrayNullType(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = new Affine();\n+            a.append(null, MatrixType.MT_2D_2x3, 0);\n+        });\n@@ -1888,2 +2064,3 @@\n-    @Test\n-    public void appendArray2x3ShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void appendArray2x3ShouldBeAtomic(Affine affine) {\n@@ -1899,2 +2076,3 @@\n-    @Test\n-    public void appendArray3x3ShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void appendArray3x3ShouldBeAtomic(Affine affine) {\n@@ -1910,2 +2088,3 @@\n-    @Test\n-    public void appendArray3x4ShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void appendArray3x4ShouldBeAtomic(Affine affine) {\n@@ -1921,2 +2100,3 @@\n-    @Test\n-    public void appendArray4x4ShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void appendArray4x4ShouldBeAtomic(Affine affine) {\n@@ -1932,9 +2112,12 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n-    public void testAppendArray2x3ShortArray() {\n-        Affine a = affine.clone();\n-        try {\n-            a.append(array2d, MatrixType.MT_2D_2x3, 6);\n-        } catch(IndexOutOfBoundsException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendArray2x3ShortArray(Affine affine) {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.append(array2d, MatrixType.MT_2D_2x3, 6);\n+            } catch(IndexOutOfBoundsException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -1943,9 +2126,12 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n-    public void testAppendArray3x3ShortArray() {\n-        Affine a = affine.clone();\n-        try {\n-            a.append(array2d, MatrixType.MT_2D_3x3, 4);\n-        } catch(IndexOutOfBoundsException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendArray3x3ShortArray(Affine affine) {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.append(array2d, MatrixType.MT_2D_3x3, 4);\n+            } catch(IndexOutOfBoundsException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -1954,9 +2140,12 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n-    public void testAppendArray3x4ShortArray() {\n-        Affine a = affine.clone();\n-        try {\n-            a.append(array3d, MatrixType.MT_3D_3x4, 7);\n-        } catch(IndexOutOfBoundsException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendArray3x4ShortArray(Affine affine) {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.append(array3d, MatrixType.MT_3D_3x4, 7);\n+            } catch(IndexOutOfBoundsException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -1965,9 +2154,12 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n-    public void testAppendArray4x4ShortArray() {\n-        Affine a = affine.clone();\n-        try {\n-            a.append(array3d, MatrixType.MT_3D_4x4, 4);\n-        } catch(IndexOutOfBoundsException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendArray4x4ShortArray(Affine affine) {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.append(array3d, MatrixType.MT_3D_4x4, 4);\n+            } catch(IndexOutOfBoundsException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -1976,9 +2168,12 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void testAppendArray3x3NotAffineX() {\n-        Affine a = affine.clone();\n-        try {\n-            a.append(arrayZeros, MatrixType.MT_2D_3x3, 10);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendArray3x3NotAffineX(Affine affine) {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.append(arrayZeros, MatrixType.MT_2D_3x3, 10);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -1987,9 +2182,12 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void testAppendArray3x3NotAffineY() {\n-        Affine a = affine.clone();\n-        try {\n-            a.append(arrayZeros, MatrixType.MT_2D_3x3, 9);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendArray3x3NotAffineY(Affine affine) {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.append(arrayZeros, MatrixType.MT_2D_3x3, 9);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -1998,9 +2196,12 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void testAppendArray3x3NotAffineT() {\n-        Affine a = affine.clone();\n-        try {\n-            a.append(arrayZeros, MatrixType.MT_2D_3x3, 0);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendArray3x3NotAffineT(Affine affine) {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.append(arrayZeros, MatrixType.MT_2D_3x3, 0);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -2009,9 +2210,12 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void testAppendArray4x4NotAffineX() {\n-        Affine a = affine.clone();\n-        try {\n-            a.append(arrayZeros, MatrixType.MT_3D_4x4, 4);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendArray4x4NotAffineX(Affine affine) {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.append(arrayZeros, MatrixType.MT_3D_4x4, 4);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -2020,9 +2224,12 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void testAppendArray4x4NotAffineY() {\n-        Affine a = affine.clone();\n-        try {\n-            a.append(arrayZeros, MatrixType.MT_3D_4x4, 3);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendArray4x4NotAffineY(Affine affine) {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.append(arrayZeros, MatrixType.MT_3D_4x4, 3);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -2031,9 +2238,12 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void testAppendArray4x4NotAffineZ() {\n-        Affine a = affine.clone();\n-        try {\n-            a.append(arrayZeros, MatrixType.MT_3D_4x4, 2);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendArray4x4NotAffineZ(Affine affine) {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.append(arrayZeros, MatrixType.MT_3D_4x4, 2);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -2042,9 +2252,12 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void testAppendArray4x4NotAffineT() {\n-        Affine a = affine.clone();\n-        try {\n-            a.append(arrayZeros, MatrixType.MT_3D_4x4, 0);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendArray4x4NotAffineT(Affine affine) {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.append(arrayZeros, MatrixType.MT_3D_4x4, 0);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -2053,2 +2266,3 @@\n-    @Test\n-    public void testPrependArray() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependArray(Affine affine) {\n@@ -2089,4 +2303,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testPrependArrayNullMatrix() {\n-        Affine a = new Affine();\n-        a.prepend(new double[] { 1, 2, 3 }, null, 0);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependArrayNullMatrix(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = new Affine();\n+            a.prepend(new double[] { 1, 2, 3 }, null, 0);\n+        });\n@@ -2095,4 +2312,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testPrependArrayNullType() {\n-        Affine a = new Affine();\n-        a.prepend(null, MatrixType.MT_2D_2x3, 0);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependArrayNullType(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = new Affine();\n+            a.prepend(null, MatrixType.MT_2D_2x3, 0);\n+        });\n@@ -2101,2 +2321,3 @@\n-    @Test\n-    public void prependArray2x3ShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prependArray2x3ShouldBeAtomic(Affine affine) {\n@@ -2112,2 +2333,3 @@\n-    @Test\n-    public void prependArray3x3ShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prependArray3x3ShouldBeAtomic(Affine affine) {\n@@ -2123,2 +2345,3 @@\n-    @Test\n-    public void prependArray3x4ShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prependArray3x4ShouldBeAtomic(Affine affine) {\n@@ -2134,2 +2357,3 @@\n-    @Test\n-    public void prependArray4x4ShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prependArray4x4ShouldBeAtomic(Affine affine) {\n@@ -2145,9 +2369,12 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n-    public void testPrependArray2x3ShortArray() {\n-        Affine a = affine.clone();\n-        try {\n-            a.prepend(array2d, MatrixType.MT_2D_2x3, 6);\n-        } catch(IndexOutOfBoundsException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependArray2x3ShortArray(Affine affine) {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.prepend(array2d, MatrixType.MT_2D_2x3, 6);\n+            } catch(IndexOutOfBoundsException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -2156,9 +2383,12 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n-    public void testPrependdArray3x3ShortArray() {\n-        Affine a = affine.clone();\n-        try {\n-            a.prepend(array2d, MatrixType.MT_2D_3x3, 4);\n-        } catch(IndexOutOfBoundsException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependdArray3x3ShortArray(Affine affine) {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.prepend(array2d, MatrixType.MT_2D_3x3, 4);\n+            } catch(IndexOutOfBoundsException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -2167,9 +2397,12 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n-    public void testPrependArray3x4ShortArray() {\n-        Affine a = affine.clone();\n-        try {\n-            a.prepend(array3d, MatrixType.MT_3D_3x4, 7);\n-        } catch(IndexOutOfBoundsException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependArray3x4ShortArray(Affine affine) {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.prepend(array3d, MatrixType.MT_3D_3x4, 7);\n+            } catch(IndexOutOfBoundsException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -2178,9 +2411,12 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n-    public void testPrependArray4x4ShortArray() {\n-        Affine a = affine.clone();\n-        try {\n-            a.prepend(array3d, MatrixType.MT_3D_4x4, 4);\n-        } catch(IndexOutOfBoundsException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testPrependArray4x4ShortArray(Affine affine) {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.prepend(array3d, MatrixType.MT_3D_4x4, 4);\n+            } catch(IndexOutOfBoundsException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -2189,9 +2425,12 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void prestPrependArray3x3NotAffineX() {\n-        Affine a = affine.clone();\n-        try {\n-            a.prepend(arrayZeros, MatrixType.MT_2D_3x3, 10);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prestPrependArray3x3NotAffineX(Affine affine) {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.prepend(arrayZeros, MatrixType.MT_2D_3x3, 10);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -2200,9 +2439,12 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void prestPrependArray3x3NotAffineY() {\n-        Affine a = affine.clone();\n-        try {\n-            a.prepend(arrayZeros, MatrixType.MT_2D_3x3, 9);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prestPrependArray3x3NotAffineY(Affine affine) {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.prepend(arrayZeros, MatrixType.MT_2D_3x3, 9);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -2211,9 +2453,12 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void prestPrependArray3x3NotAffineT() {\n-        Affine a = affine.clone();\n-        try {\n-            a.prepend(arrayZeros, MatrixType.MT_2D_3x3, 0);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prestPrependArray3x3NotAffineT(Affine affine) {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.prepend(arrayZeros, MatrixType.MT_2D_3x3, 0);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -2222,9 +2467,12 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void prestPrependArray4x4NotAffineX() {\n-        Affine a = affine.clone();\n-        try {\n-            a.prepend(arrayZeros, MatrixType.MT_3D_4x4, 4);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prestPrependArray4x4NotAffineX(Affine affine) {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.prepend(arrayZeros, MatrixType.MT_3D_4x4, 4);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -2233,9 +2481,12 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void prestPrependArray4x4NotAffineY() {\n-        Affine a = affine.clone();\n-        try {\n-            a.prepend(arrayZeros, MatrixType.MT_3D_4x4, 3);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prestPrependArray4x4NotAffineY(Affine affine) {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.prepend(arrayZeros, MatrixType.MT_3D_4x4, 3);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -2244,9 +2495,12 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void prestPrependArray4x4NotAffineZ() {\n-        Affine a = affine.clone();\n-        try {\n-            a.prepend(arrayZeros, MatrixType.MT_3D_4x4, 2);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prestPrependArray4x4NotAffineZ(Affine affine) {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.prepend(arrayZeros, MatrixType.MT_3D_4x4, 2);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -2255,9 +2509,12 @@\n-    @Test(expected=IllegalArgumentException.class)\n-    public void prestPrependArray4x4NotAffineT() {\n-        Affine a = affine.clone();\n-        try {\n-            a.prepend(arrayZeros, MatrixType.MT_3D_4x4, 0);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a, affine);\n-            throw e;\n-        }\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void prestPrependArray4x4NotAffineT(Affine affine) {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = affine.clone();\n+            try {\n+                a.prepend(arrayZeros, MatrixType.MT_3D_4x4, 0);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a, affine);\n+                throw e;\n+            }\n+        });\n@@ -2266,2 +2523,3 @@\n-    @Test\n-    public void testInvert() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInvert(Affine affine) {\n@@ -2297,2 +2555,3 @@\n-    @Test\n-    public void invertShouldBeAtomic() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void invertShouldBeAtomic(Affine affine) {\n@@ -2321,2 +2580,3 @@\n-    @Test\n-    public void testAppendInverse() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAppendInverse(Affine affine) {\n@@ -2365,2 +2625,3 @@\n-    @Test\n-    public void testSetElement() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testSetElement(Affine affine) {\n@@ -2509,4 +2770,7 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testSetElementNullType() {\n-        Affine a = affine.clone();\n-        a.setElement(null, 0, 0, 0);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testSetElementNullType(Affine affine) {\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = affine.clone();\n+            a.setElement(null, 0, 0, 0);\n+        });\n@@ -2515,1 +2779,3 @@\n-    @Test public void nonInvertibleExceptionShoudCancelAtomicOperation() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void nonInvertibleExceptionShoudCancelAtomicOperation(Affine affine) {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/transform\/AffineOperationsTest.java","additions":878,"deletions":612,"binary":false,"changes":1490,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,4 +32,0 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n-\n@@ -47,0 +43,7 @@\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n@@ -76,1 +79,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -78,1 +81,3 @@\n-        Affine a = new Affine(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = new Affine(null);\n+        });\n@@ -131,1 +136,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -133,1 +138,3 @@\n-        Affine a = new Affine(null, MatrixType.MT_2D_2x3, 6);\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = new Affine(null, MatrixType.MT_2D_2x3, 6);\n+        });\n@@ -136,1 +143,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -138,1 +145,3 @@\n-        Affine a = new Affine(array2d, null, 6);\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = new Affine(array2d, null, 6);\n+        });\n@@ -141,1 +150,1 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n+    @Test\n@@ -143,1 +152,3 @@\n-        Affine a = new Affine(array2d, MatrixType.MT_2D_2x3, 6);\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Affine a = new Affine(array2d, MatrixType.MT_2D_2x3, 6);\n+        });\n@@ -146,1 +157,1 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n+    @Test\n@@ -148,1 +159,3 @@\n-        Affine a = new Affine(array2d, MatrixType.MT_2D_3x3, 4);\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Affine a = new Affine(array2d, MatrixType.MT_2D_3x3, 4);\n+        });\n@@ -151,1 +164,1 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n+    @Test\n@@ -153,1 +166,3 @@\n-        Affine a = new Affine(array3d, MatrixType.MT_3D_3x4, 7);\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Affine a = new Affine(array3d, MatrixType.MT_3D_3x4, 7);\n+        });\n@@ -156,1 +171,1 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n+    @Test\n@@ -158,1 +173,3 @@\n-        Affine a = new Affine(array3d, MatrixType.MT_3D_4x4, 4);\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Affine a = new Affine(array3d, MatrixType.MT_3D_4x4, 4);\n+        });\n@@ -161,1 +178,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -163,1 +180,3 @@\n-        Affine a = new Affine(arrayZeros, MatrixType.MT_2D_3x3, 10);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = new Affine(arrayZeros, MatrixType.MT_2D_3x3, 10);\n+        });\n@@ -166,1 +185,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -168,1 +187,3 @@\n-        Affine a = new Affine(arrayZeros, MatrixType.MT_2D_3x3, 9);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = new Affine(arrayZeros, MatrixType.MT_2D_3x3, 9);\n+        });\n@@ -171,1 +192,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -173,1 +194,3 @@\n-        Affine a = new Affine(arrayZeros, MatrixType.MT_2D_3x3, 0);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = new Affine(arrayZeros, MatrixType.MT_2D_3x3, 0);\n+        });\n@@ -176,1 +199,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -178,1 +201,3 @@\n-        Affine a = new Affine(arrayZeros, MatrixType.MT_3D_4x4, 4);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = new Affine(arrayZeros, MatrixType.MT_3D_4x4, 4);\n+        });\n@@ -181,1 +206,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -183,1 +208,3 @@\n-        Affine a = new Affine(arrayZeros, MatrixType.MT_3D_4x4, 3);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = new Affine(arrayZeros, MatrixType.MT_3D_4x4, 3);\n+        });\n@@ -186,1 +213,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -188,1 +215,3 @@\n-        Affine a = new Affine(arrayZeros, MatrixType.MT_3D_4x4, 2);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = new Affine(arrayZeros, MatrixType.MT_3D_4x4, 2);\n+        });\n@@ -191,1 +220,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -193,1 +222,3 @@\n-        Affine a = new Affine(arrayZeros, MatrixType.MT_3D_4x4, 0);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = new Affine(arrayZeros, MatrixType.MT_3D_4x4, 0);\n+        });\n@@ -205,1 +236,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -207,2 +238,4 @@\n-        Affine a = new Affine(1, 2, 3, 6, 7, 128);\n-        a.setToTransform(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = new Affine(1, 2, 3, 6, 7, 128);\n+            a.setToTransform(null);\n+        });\n@@ -267,1 +300,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -269,2 +302,4 @@\n-        Affine a = new Affine();\n-        a.setToTransform(new double[] { 1, 2, 3 }, null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = new Affine();\n+            a.setToTransform(new double[] { 1, 2, 3 }, null, 0);\n+        });\n@@ -273,1 +308,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -275,2 +310,4 @@\n-        Affine a = new Affine();\n-        a.setToTransform(null, MatrixType.MT_2D_2x3, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Affine a = new Affine();\n+            a.setToTransform(null, MatrixType.MT_2D_2x3, 0);\n+        });\n@@ -279,1 +316,1 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n+    @Test\n@@ -281,10 +318,12 @@\n-        Affine a = new Affine(1, 2, 3, 6, 7, 128);\n-        try {\n-            a.setToTransform(array2d, MatrixType.MT_2D_2x3, 6);\n-        } catch(IndexOutOfBoundsException e) {\n-            TransformHelper.assertMatrix(a,\n-                    1, 2, 0, 3,\n-                    6, 7, 0, 128,\n-                    0, 0, 1, 0);\n-            throw e;\n-        }\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Affine a = new Affine(1, 2, 3, 6, 7, 128);\n+            try {\n+                a.setToTransform(array2d, MatrixType.MT_2D_2x3, 6);\n+            } catch(IndexOutOfBoundsException e) {\n+                TransformHelper.assertMatrix(a,\n+                        1, 2, 0, 3,\n+                        6, 7, 0, 128,\n+                        0, 0, 1, 0);\n+                throw e;\n+            }\n+        });\n@@ -293,1 +332,1 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n+    @Test\n@@ -295,10 +334,12 @@\n-        Affine a = new Affine(1, 2, 3, 6, 7, 128);\n-        try {\n-            a.setToTransform(array2d, MatrixType.MT_2D_3x3, 4);\n-        } catch(IndexOutOfBoundsException e) {\n-            TransformHelper.assertMatrix(a,\n-                    1, 2, 0, 3,\n-                    6, 7, 0, 128,\n-                    0, 0, 1, 0);\n-            throw e;\n-        }\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Affine a = new Affine(1, 2, 3, 6, 7, 128);\n+            try {\n+                a.setToTransform(array2d, MatrixType.MT_2D_3x3, 4);\n+            } catch(IndexOutOfBoundsException e) {\n+                TransformHelper.assertMatrix(a,\n+                        1, 2, 0, 3,\n+                        6, 7, 0, 128,\n+                        0, 0, 1, 0);\n+                throw e;\n+            }\n+        });\n@@ -307,1 +348,1 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n+    @Test\n@@ -309,10 +350,12 @@\n-        Affine a = new Affine(1, 2, 3, 6, 7, 128);\n-        try {\n-            a.setToTransform(array3d, MatrixType.MT_3D_3x4, 7);\n-        } catch(IndexOutOfBoundsException e) {\n-            TransformHelper.assertMatrix(a,\n-                    1, 2, 0, 3,\n-                    6, 7, 0, 128,\n-                    0, 0, 1, 0);\n-            throw e;\n-        }\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Affine a = new Affine(1, 2, 3, 6, 7, 128);\n+            try {\n+                a.setToTransform(array3d, MatrixType.MT_3D_3x4, 7);\n+            } catch(IndexOutOfBoundsException e) {\n+                TransformHelper.assertMatrix(a,\n+                        1, 2, 0, 3,\n+                        6, 7, 0, 128,\n+                        0, 0, 1, 0);\n+                throw e;\n+            }\n+        });\n@@ -321,1 +364,1 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n+    @Test\n@@ -323,10 +366,12 @@\n-        Affine a = new Affine(1, 2, 3, 6, 7, 128);\n-        try {\n-            a.setToTransform(array3d, MatrixType.MT_3D_4x4, 4);\n-        } catch(IndexOutOfBoundsException e) {\n-            TransformHelper.assertMatrix(a,\n-                    1, 2, 0, 3,\n-                    6, 7, 0, 128,\n-                    0, 0, 1, 0);\n-            throw e;\n-        }\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            Affine a = new Affine(1, 2, 3, 6, 7, 128);\n+            try {\n+                a.setToTransform(array3d, MatrixType.MT_3D_4x4, 4);\n+            } catch(IndexOutOfBoundsException e) {\n+                TransformHelper.assertMatrix(a,\n+                        1, 2, 0, 3,\n+                        6, 7, 0, 128,\n+                        0, 0, 1, 0);\n+                throw e;\n+            }\n+        });\n@@ -335,1 +380,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -337,10 +382,12 @@\n-        Affine a = new Affine(1, 2, 3, 6, 7, 128);\n-        try {\n-            a.setToTransform(arrayZeros, MatrixType.MT_2D_3x3, 10);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a,\n-                    1, 2, 0, 3,\n-                    6, 7, 0, 128,\n-                    0, 0, 1, 0);\n-            throw e;\n-        }\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = new Affine(1, 2, 3, 6, 7, 128);\n+            try {\n+                a.setToTransform(arrayZeros, MatrixType.MT_2D_3x3, 10);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a,\n+                        1, 2, 0, 3,\n+                        6, 7, 0, 128,\n+                        0, 0, 1, 0);\n+                throw e;\n+            }\n+        });\n@@ -349,1 +396,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -351,10 +398,12 @@\n-        Affine a = new Affine(1, 2, 3, 6, 7, 128);\n-        try {\n-            a.setToTransform(arrayZeros, MatrixType.MT_2D_3x3, 9);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a,\n-                    1, 2, 0, 3,\n-                    6, 7, 0, 128,\n-                    0, 0, 1, 0);\n-            throw e;\n-        }\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = new Affine(1, 2, 3, 6, 7, 128);\n+            try {\n+                a.setToTransform(arrayZeros, MatrixType.MT_2D_3x3, 9);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a,\n+                        1, 2, 0, 3,\n+                        6, 7, 0, 128,\n+                        0, 0, 1, 0);\n+                throw e;\n+            }\n+        });\n@@ -363,1 +412,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -365,10 +414,12 @@\n-        Affine a = new Affine(1, 2, 3, 6, 7, 128);\n-        try {\n-            a.setToTransform(arrayZeros, MatrixType.MT_2D_3x3, 0);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a,\n-                    1, 2, 0, 3,\n-                    6, 7, 0, 128,\n-                    0, 0, 1, 0);\n-            throw e;\n-        }\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = new Affine(1, 2, 3, 6, 7, 128);\n+            try {\n+                a.setToTransform(arrayZeros, MatrixType.MT_2D_3x3, 0);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a,\n+                        1, 2, 0, 3,\n+                        6, 7, 0, 128,\n+                        0, 0, 1, 0);\n+                throw e;\n+            }\n+        });\n@@ -377,1 +428,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -379,10 +430,12 @@\n-        Affine a = new Affine(1, 2, 3, 6, 7, 128);\n-        try {\n-            a.setToTransform(arrayZeros, MatrixType.MT_3D_4x4, 4);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a,\n-                    1, 2, 0, 3,\n-                    6, 7, 0, 128,\n-                    0, 0, 1, 0);\n-            throw e;\n-        }\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = new Affine(1, 2, 3, 6, 7, 128);\n+            try {\n+                a.setToTransform(arrayZeros, MatrixType.MT_3D_4x4, 4);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a,\n+                        1, 2, 0, 3,\n+                        6, 7, 0, 128,\n+                        0, 0, 1, 0);\n+                throw e;\n+            }\n+        });\n@@ -391,1 +444,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -393,10 +446,12 @@\n-        Affine a = new Affine(1, 2, 3, 6, 7, 128);\n-        try {\n-            a.setToTransform(arrayZeros, MatrixType.MT_3D_4x4, 3);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a,\n-                    1, 2, 0, 3,\n-                    6, 7, 0, 128,\n-                    0, 0, 1, 0);\n-            throw e;\n-        }\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = new Affine(1, 2, 3, 6, 7, 128);\n+            try {\n+                a.setToTransform(arrayZeros, MatrixType.MT_3D_4x4, 3);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a,\n+                        1, 2, 0, 3,\n+                        6, 7, 0, 128,\n+                        0, 0, 1, 0);\n+                throw e;\n+            }\n+        });\n@@ -405,1 +460,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -407,10 +462,12 @@\n-        Affine a = new Affine(1, 2, 3, 6, 7, 128);\n-        try {\n-            a.setToTransform(arrayZeros, MatrixType.MT_3D_4x4, 2);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a,\n-                    1, 2, 0, 3,\n-                    6, 7, 0, 128,\n-                    0, 0, 1, 0);\n-            throw e;\n-        }\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = new Affine(1, 2, 3, 6, 7, 128);\n+            try {\n+                a.setToTransform(arrayZeros, MatrixType.MT_3D_4x4, 2);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a,\n+                        1, 2, 0, 3,\n+                        6, 7, 0, 128,\n+                        0, 0, 1, 0);\n+                throw e;\n+            }\n+        });\n@@ -419,1 +476,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -421,10 +478,12 @@\n-        Affine a = new Affine(1, 2, 3, 6, 7, 128);\n-        try {\n-            a.setToTransform(arrayZeros, MatrixType.MT_3D_4x4, 0);\n-        } catch(IllegalArgumentException e) {\n-            TransformHelper.assertMatrix(a,\n-                    1, 2, 0, 3,\n-                    6, 7, 0, 128,\n-                    0, 0, 1, 0);\n-            throw e;\n-        }\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Affine a = new Affine(1, 2, 3, 6, 7, 128);\n+            try {\n+                a.setToTransform(arrayZeros, MatrixType.MT_3D_4x4, 0);\n+            } catch(IllegalArgumentException e) {\n+                TransformHelper.assertMatrix(a,\n+                        1, 2, 0, 3,\n+                        6, 7, 0, 128,\n+                        0, 0, 1, 0);\n+                throw e;\n+            }\n+        });\n@@ -577,1 +636,1 @@\n-        Assert.assertEquals(1.0f, trans.getMzz(), 1e-50);\n+        assertEquals(1.0f, trans.getMzz(), 1e-50);\n@@ -583,1 +642,1 @@\n-        Assert.assertEquals(1, affine2D.getMzz(), 1e-50);\n+        assertEquals(1, affine2D.getMzz(), 1e-50);\n@@ -585,1 +644,1 @@\n-        Assert.assertEquals(1, affine3D.getMzz(), 1e-50);\n+        assertEquals(1, affine3D.getMzz(), 1e-50);\n@@ -607,1 +666,2 @@\n-    @Test public void testGetters() {\n+    @Test\n+    public void testGetters() {\n@@ -636,1 +696,2 @@\n-    @Test public void testConstructingIdentityTransform() {\n+    @Test\n+    public void testConstructingIdentityTransform() {\n@@ -666,1 +727,2 @@\n-    @Test public void testSettingTransform() {\n+    @Test\n+    public void testSettingTransform() {\n@@ -708,1 +770,2 @@\n-    @Test public void testToString() {\n+    @Test\n+    public void testToString() {\n@@ -720,1 +783,2 @@\n-    @Test public void testBoundPropertySynced() throws Exception {\n+    @Test\n+    public void testBoundPropertySynced() throws Exception {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/transform\/AffineTest.java","additions":235,"deletions":171,"binary":false,"changes":406,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -37,0 +32,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -42,19 +38,13 @@\n-    public Affine_onInvalidate_Test(Configuration config) {\n-        super(config);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]> data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(Affine.class, \"mxx\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Affine.class, \"mxy\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Affine.class, \"mxz\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Affine.class, \"myx\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Affine.class, \"myz\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Affine.class, \"mzx\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Affine.class, \"mzy\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Affine.class, \"tx\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Affine.class, \"ty\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Affine.class, \"tz\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })}\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(Affine.class, \"mxx\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Affine.class, \"mxy\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Affine.class, \"mxz\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Affine.class, \"myx\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Affine.class, \"myz\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Affine.class, \"mzx\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Affine.class, \"mzy\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Affine.class, \"tx\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Affine.class, \"ty\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Affine.class, \"tz\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/transform\/Affine_onInvalidate_Test.java","additions":17,"deletions":27,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,5 @@\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/transform\/MatrixTypeTest.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import org.junit.Test;\n@@ -46,0 +45,4 @@\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -47,2 +50,0 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n@@ -119,1 +120,2 @@\n-    @Test public void testRotateAxisCtor() {\n+    @Test\n+    public void testRotateAxisCtor() {\n@@ -129,1 +131,2 @@\n-    @Test public void testRotate3DPivotCtor() {\n+    @Test\n+    public void testRotate3DPivotCtor() {\n@@ -141,1 +144,2 @@\n-   @Test public void testRotate3DPivotAxisCtor() {\n+   @Test\n+   public void testRotate3DPivotAxisCtor() {\n@@ -153,1 +157,2 @@\n-    @Test public void testBoundPropertySynced_Angle() throws Exception {\n+    @Test\n+    public void testBoundPropertySynced_Angle() throws Exception {\n@@ -157,1 +162,2 @@\n-    @Test public void testBoundPropertySynced_PivotX() throws Exception {\n+    @Test\n+    public void testBoundPropertySynced_PivotX() throws Exception {\n@@ -161,1 +167,2 @@\n-    @Test public void testBoundPropertySynced_PivotY() throws Exception {\n+    @Test\n+    public void testBoundPropertySynced_PivotY() throws Exception {\n@@ -165,1 +172,2 @@\n-    @Test public void testBoundPropertySynced_PivotZ() throws Exception {\n+    @Test\n+    public void testBoundPropertySynced_PivotZ() throws Exception {\n@@ -169,1 +177,2 @@\n-    @Test public void testBoundPropertySynced_Axis() throws Exception {\n+    @Test\n+    public void testBoundPropertySynced_Axis() throws Exception {\n@@ -217,1 +226,2 @@\n-    @Test public void testToString() {\n+    @Test\n+    public void testToString() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/transform\/RotateTest.java","additions":23,"deletions":13,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -37,0 +32,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -42,13 +38,7 @@\n-    public Rotate_onInvalidate_Test(Configuration config) {\n-        super(config);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]> data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(Rotate.class, \"pivotX\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Rotate.class, \"pivotY\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Rotate.class, \"pivotZ\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Rotate.class, \"angle\", 20.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })}\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(Rotate.class, \"pivotX\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Rotate.class, \"pivotY\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Rotate.class, \"pivotZ\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Rotate.class, \"angle\", 20.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/transform\/Rotate_onInvalidate_Test.java","additions":11,"deletions":21,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,4 +31,0 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n@@ -42,0 +38,5 @@\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n@@ -61,1 +62,1 @@\n-        Assert.assertEquals(34, trans.getX(), 1e-100);\n+        assertEquals(34, trans.getX(), 1e-100);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/transform\/ScaleTest.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -37,0 +32,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -42,15 +38,9 @@\n-    public Scale_onInvalidate_Test(Configuration config) {\n-        super(config);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]> data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(Scale.class, \"pivotX\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Scale.class, \"pivotY\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Scale.class, \"pivotZ\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Scale.class, \"x\", 20.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Scale.class, \"y\", 20.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Scale.class, \"z\", 20.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })}\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(Scale.class, \"pivotX\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Scale.class, \"pivotY\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Scale.class, \"pivotZ\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Scale.class, \"x\", 20.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Scale.class, \"y\", 20.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Scale.class, \"z\", 20.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/transform\/Scale_onInvalidate_Test.java","additions":13,"deletions":23,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -31,3 +31,0 @@\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n-\n@@ -39,0 +36,4 @@\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n@@ -121,1 +122,2 @@\n-    @Test public void testToString() {\n+    @Test\n+    public void testToString() {\n@@ -130,1 +132,2 @@\n-    @Test public void testBoundPropertySynced_X() throws Exception {\n+    @Test\n+    public void testBoundPropertySynced_X() throws Exception {\n@@ -134,1 +137,2 @@\n-    @Test public void testBoundPropertySynced_Y() throws Exception {\n+    @Test\n+    public void testBoundPropertySynced_Y() throws Exception {\n@@ -138,1 +142,2 @@\n-    @Test public void testBoundPropertySynced_PivotX() throws Exception {\n+    @Test\n+    public void testBoundPropertySynced_PivotX() throws Exception {\n@@ -142,1 +147,2 @@\n-    @Test public void testBoundPropertySynced_PivotY() throws Exception {\n+    @Test\n+    public void testBoundPropertySynced_PivotY() throws Exception {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/transform\/ShearTest.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -37,0 +32,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -42,13 +38,7 @@\n-    public Shear_onInvalidate_Test(Configuration config) {\n-        super(config);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]> data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(Shear.class, \"pivotX\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Shear.class, \"pivotY\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Shear.class, \"x\", 20.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Shear.class, \"y\", 20.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })}\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(Shear.class, \"pivotX\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Shear.class, \"pivotY\", 2.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Shear.class, \"x\", 20.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Shear.class, \"y\", 20.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/transform\/Shear_onInvalidate_Test.java","additions":11,"deletions":21,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import org.junit.Test;\n@@ -34,1 +33,2 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/transform\/TransformChangedEventTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.stream.Stream;\n@@ -43,4 +42,0 @@\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n@@ -48,1 +43,4 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n@@ -50,1 +48,0 @@\n-@RunWith(Parameterized.class)\n@@ -96,107 +93,106 @@\n-    @Parameters\n-    public static Collection getParams() {\n-        return Arrays.asList(new Object[][] {\n-            { identity, translate_identity, Identity.class },           \/\/  0\n-            { identity, translate_translate2d, Translate2D.class },\n-            { identity, translate_translate3d, Affine3D.class },\n-            { identity, scale_identity, Identity.class },\n-            { identity, scale_pivotedidentity, Identity.class },\n-            { identity, scale_scale2d, Affine2D.class },\n-            { identity, scale_pivotedscale2d, Affine2D.class },\n-            { identity, scale_scale3d, Affine3D.class },\n-            { identity, scale_pivotedscale3d, Affine3D.class },\n-            { identity, rotate_identity, Identity.class },\n-            { identity, rotate_pivotedidentity, Identity.class },       \/\/ 10\n-            { identity, rotate_rotate2d, Affine2D.class },\n-            { identity, rotate_negative2d, Affine2D.class },\n-            { identity, rotate_pivotedrotate2d, Affine2D.class },\n-            { identity, rotate_rotate3d, Affine3D.class },\n-            { identity, rotate_pivotedrotate3d, Affine3D.class },\n-            { identity, shear_identity, Identity.class },\n-            { identity, shear_shear, Affine2D.class },\n-            { identity, affine_identity, Identity.class },\n-            { identity, affine_translate2d, Translate2D.class },\n-            { identity, affine_translate3d, Affine3D.class },           \/\/ 20\n-            { identity, affine_scale2d, Affine2D.class },\n-            { identity, affine_scale3d, Affine3D.class },\n-            { identity, affine_affine2d, Affine2D.class },\n-            { identity, affine_affine3d, Affine3D.class },\n-\n-            { translate2d, translate_identity, Translate2D.class },\n-            { translate2d, translate_translate2d, Translate2D.class },\n-            { translate2d, translate_translate3d, Affine3D.class },\n-            { translate2d, scale_identity, Translate2D.class },\n-            { translate2d, scale_pivotedidentity, Translate2D.class },\n-            { translate2d, scale_scale2d, Affine2D.class },             \/\/ 30\n-            { translate2d, scale_pivotedscale2d, Affine2D.class },\n-            { translate2d, scale_scale3d, Affine3D.class },\n-            { translate2d, scale_pivotedscale3d, Affine3D.class },\n-            { translate2d, rotate_identity, Translate2D.class },\n-            { translate2d, rotate_pivotedidentity, Translate2D.class },\n-            { translate2d, rotate_rotate2d, Affine2D.class },\n-            { translate2d, rotate_negative2d, Affine2D.class },\n-            { translate2d, rotate_pivotedrotate2d, Affine2D.class },\n-            { translate2d, rotate_rotate3d, Affine3D.class },\n-            { translate2d, rotate_pivotedrotate3d, Affine3D.class },    \/\/ 40\n-            { translate2d, shear_identity, Translate2D.class },\n-            { translate2d, shear_shear, Affine2D.class },\n-            { translate2d, affine_identity, Translate2D.class },\n-            { translate2d, affine_translate2d, Translate2D.class },\n-            { translate2d, affine_translate3d, Affine3D.class },\n-            { translate2d, affine_scale2d, Affine2D.class },\n-            { translate2d, affine_scale3d, Affine3D.class },\n-            { translate2d, affine_affine2d, Affine2D.class },\n-            { translate2d, affine_affine3d, Affine3D.class },\n-\n-            { affine2d, translate_identity, Affine2D.class },           \/\/ 50\n-            { affine2d, translate_translate2d, Affine2D.class },\n-            { affine2d, translate_translate3d, Affine3D.class },\n-            { affine2d, scale_identity, Affine2D.class },\n-            { affine2d, scale_pivotedidentity, Affine2D.class },\n-            { affine2d, scale_scale2d, Affine2D.class },\n-            { affine2d, scale_pivotedscale2d, Affine2D.class },\n-            { affine2d, scale_scale3d, Affine3D.class },\n-            { affine2d, scale_pivotedscale3d, Affine3D.class },\n-            { affine2d, rotate_identity, Affine2D.class },\n-            { affine2d, rotate_pivotedidentity, Affine2D.class },       \/\/ 60\n-            { affine2d, rotate_rotate2d, Affine2D.class },\n-            { affine2d, rotate_negative2d, Affine2D.class },\n-            { affine2d, rotate_pivotedrotate2d, Affine2D.class },\n-            { affine2d, rotate_rotate3d, Affine3D.class },\n-            { affine2d, rotate_pivotedrotate3d, Affine3D.class },\n-            { affine2d, shear_identity, Affine2D.class },\n-            { affine2d, shear_shear, Affine2D.class },\n-            { affine2d, affine_identity, Affine2D.class },\n-            { affine2d, affine_translate2d, Affine2D.class },\n-            { affine2d, affine_translate3d, Affine3D.class },           \/\/ 70\n-            { affine2d, affine_scale2d, Affine2D.class },\n-            { affine2d, affine_scale3d, Affine3D.class },\n-            { affine2d, affine_affine2d, Affine2D.class },\n-            { affine2d, affine_affine3d, Affine3D.class },\n-\n-            { affine3d, translate_identity, Affine3D.class },\n-            { affine3d, translate_translate2d, Affine3D.class },\n-            { affine3d, translate_translate3d, Affine3D.class },\n-            { affine3d, scale_identity, Affine3D.class },\n-            { affine3d, scale_pivotedidentity, Affine3D.class },\n-            { affine3d, scale_scale2d, Affine3D.class },                \/\/ 80\n-            { affine3d, scale_pivotedscale2d, Affine3D.class },\n-            { affine3d, scale_scale3d, Affine3D.class },\n-            { affine3d, scale_pivotedscale3d, Affine3D.class },\n-            { affine3d, rotate_identity, Affine3D.class },\n-            { affine3d, rotate_pivotedidentity, Affine3D.class },\n-            { affine3d, rotate_rotate2d, Affine3D.class },\n-            { affine3d, rotate_negative2d, Affine3D.class },\n-            { affine3d, rotate_pivotedrotate2d, Affine3D.class },\n-            { affine3d, rotate_rotate3d, Affine3D.class },\n-            { affine3d, rotate_pivotedrotate3d, Affine3D.class },       \/\/ 90\n-            { affine3d, shear_identity, Affine3D.class },\n-            { affine3d, shear_shear, Affine3D.class },\n-            { affine3d, affine_identity, Affine3D.class },\n-            { affine3d, affine_translate2d, Affine3D.class },\n-            { affine3d, affine_translate3d, Affine3D.class },\n-            { affine3d, affine_scale2d, Affine3D.class },\n-            { affine3d, affine_scale3d, Affine3D.class },\n-            { affine3d, affine_affine2d, Affine3D.class },\n-            { affine3d, affine_affine3d, Affine3D.class },              \/\/ 99\n-        });\n+    public static Stream<Arguments> getParams() {\n+        return Stream.of(\n+            Arguments.of( identity, translate_identity, Identity.class ),           \/\/  0\n+            Arguments.of( identity, translate_translate2d, Translate2D.class ),\n+            Arguments.of( identity, translate_translate3d, Affine3D.class ),\n+            Arguments.of( identity, scale_identity, Identity.class ),\n+            Arguments.of( identity, scale_pivotedidentity, Identity.class ),\n+            Arguments.of( identity, scale_scale2d, Affine2D.class ),\n+            Arguments.of( identity, scale_pivotedscale2d, Affine2D.class ),\n+            Arguments.of( identity, scale_scale3d, Affine3D.class ),\n+            Arguments.of( identity, scale_pivotedscale3d, Affine3D.class ),\n+            Arguments.of( identity, rotate_identity, Identity.class ),\n+            Arguments.of( identity, rotate_pivotedidentity, Identity.class ),       \/\/ 10\n+            Arguments.of( identity, rotate_rotate2d, Affine2D.class ),\n+            Arguments.of( identity, rotate_negative2d, Affine2D.class ),\n+            Arguments.of( identity, rotate_pivotedrotate2d, Affine2D.class ),\n+            Arguments.of( identity, rotate_rotate3d, Affine3D.class ),\n+            Arguments.of( identity, rotate_pivotedrotate3d, Affine3D.class ),\n+            Arguments.of( identity, shear_identity, Identity.class ),\n+            Arguments.of( identity, shear_shear, Affine2D.class ),\n+            Arguments.of( identity, affine_identity, Identity.class ),\n+            Arguments.of( identity, affine_translate2d, Translate2D.class ),\n+            Arguments.of( identity, affine_translate3d, Affine3D.class ),           \/\/ 20\n+            Arguments.of( identity, affine_scale2d, Affine2D.class ),\n+            Arguments.of( identity, affine_scale3d, Affine3D.class ),\n+            Arguments.of( identity, affine_affine2d, Affine2D.class ),\n+            Arguments.of( identity, affine_affine3d, Affine3D.class ),\n+\n+            Arguments.of( translate2d, translate_identity, Translate2D.class ),\n+            Arguments.of( translate2d, translate_translate2d, Translate2D.class ),\n+            Arguments.of( translate2d, translate_translate3d, Affine3D.class ),\n+            Arguments.of( translate2d, scale_identity, Translate2D.class ),\n+            Arguments.of( translate2d, scale_pivotedidentity, Translate2D.class ),\n+            Arguments.of( translate2d, scale_scale2d, Affine2D.class ),             \/\/ 30\n+            Arguments.of( translate2d, scale_pivotedscale2d, Affine2D.class ),\n+            Arguments.of( translate2d, scale_scale3d, Affine3D.class ),\n+            Arguments.of( translate2d, scale_pivotedscale3d, Affine3D.class ),\n+            Arguments.of( translate2d, rotate_identity, Translate2D.class ),\n+            Arguments.of( translate2d, rotate_pivotedidentity, Translate2D.class ),\n+            Arguments.of( translate2d, rotate_rotate2d, Affine2D.class ),\n+            Arguments.of( translate2d, rotate_negative2d, Affine2D.class ),\n+            Arguments.of( translate2d, rotate_pivotedrotate2d, Affine2D.class ),\n+            Arguments.of( translate2d, rotate_rotate3d, Affine3D.class ),\n+            Arguments.of( translate2d, rotate_pivotedrotate3d, Affine3D.class ),    \/\/ 40\n+            Arguments.of( translate2d, shear_identity, Translate2D.class ),\n+            Arguments.of( translate2d, shear_shear, Affine2D.class ),\n+            Arguments.of( translate2d, affine_identity, Translate2D.class ),\n+            Arguments.of( translate2d, affine_translate2d, Translate2D.class ),\n+            Arguments.of( translate2d, affine_translate3d, Affine3D.class ),\n+            Arguments.of( translate2d, affine_scale2d, Affine2D.class ),\n+            Arguments.of( translate2d, affine_scale3d, Affine3D.class ),\n+            Arguments.of( translate2d, affine_affine2d, Affine2D.class ),\n+            Arguments.of( translate2d, affine_affine3d, Affine3D.class ),\n+\n+            Arguments.of( affine2d, translate_identity, Affine2D.class ),           \/\/ 50\n+            Arguments.of( affine2d, translate_translate2d, Affine2D.class ),\n+            Arguments.of( affine2d, translate_translate3d, Affine3D.class ),\n+            Arguments.of( affine2d, scale_identity, Affine2D.class ),\n+            Arguments.of( affine2d, scale_pivotedidentity, Affine2D.class ),\n+            Arguments.of( affine2d, scale_scale2d, Affine2D.class ),\n+            Arguments.of( affine2d, scale_pivotedscale2d, Affine2D.class ),\n+            Arguments.of( affine2d, scale_scale3d, Affine3D.class ),\n+            Arguments.of( affine2d, scale_pivotedscale3d, Affine3D.class ),\n+            Arguments.of( affine2d, rotate_identity, Affine2D.class ),\n+            Arguments.of( affine2d, rotate_pivotedidentity, Affine2D.class ),       \/\/ 60\n+            Arguments.of( affine2d, rotate_rotate2d, Affine2D.class ),\n+            Arguments.of( affine2d, rotate_negative2d, Affine2D.class ),\n+            Arguments.of( affine2d, rotate_pivotedrotate2d, Affine2D.class ),\n+            Arguments.of( affine2d, rotate_rotate3d, Affine3D.class ),\n+            Arguments.of( affine2d, rotate_pivotedrotate3d, Affine3D.class ),\n+            Arguments.of( affine2d, shear_identity, Affine2D.class ),\n+            Arguments.of( affine2d, shear_shear, Affine2D.class ),\n+            Arguments.of( affine2d, affine_identity, Affine2D.class ),\n+            Arguments.of( affine2d, affine_translate2d, Affine2D.class ),\n+            Arguments.of( affine2d, affine_translate3d, Affine3D.class ),           \/\/ 70\n+            Arguments.of( affine2d, affine_scale2d, Affine2D.class ),\n+            Arguments.of( affine2d, affine_scale3d, Affine3D.class ),\n+            Arguments.of( affine2d, affine_affine2d, Affine2D.class ),\n+            Arguments.of( affine2d, affine_affine3d, Affine3D.class ),\n+\n+            Arguments.of( affine3d, translate_identity, Affine3D.class ),\n+            Arguments.of( affine3d, translate_translate2d, Affine3D.class ),\n+            Arguments.of( affine3d, translate_translate3d, Affine3D.class ),\n+            Arguments.of( affine3d, scale_identity, Affine3D.class ),\n+            Arguments.of( affine3d, scale_pivotedidentity, Affine3D.class ),\n+            Arguments.of( affine3d, scale_scale2d, Affine3D.class ),                \/\/ 80\n+            Arguments.of( affine3d, scale_pivotedscale2d, Affine3D.class ),\n+            Arguments.of( affine3d, scale_scale3d, Affine3D.class ),\n+            Arguments.of( affine3d, scale_pivotedscale3d, Affine3D.class ),\n+            Arguments.of( affine3d, rotate_identity, Affine3D.class ),\n+            Arguments.of( affine3d, rotate_pivotedidentity, Affine3D.class ),\n+            Arguments.of( affine3d, rotate_rotate2d, Affine3D.class ),\n+            Arguments.of( affine3d, rotate_negative2d, Affine3D.class ),\n+            Arguments.of( affine3d, rotate_pivotedrotate2d, Affine3D.class ),\n+            Arguments.of( affine3d, rotate_rotate3d, Affine3D.class ),\n+            Arguments.of( affine3d, rotate_pivotedrotate3d, Affine3D.class ),       \/\/ 90\n+            Arguments.of( affine3d, shear_identity, Affine3D.class ),\n+            Arguments.of( affine3d, shear_shear, Affine3D.class ),\n+            Arguments.of( affine3d, affine_identity, Affine3D.class ),\n+            Arguments.of( affine3d, affine_translate2d, Affine3D.class ),\n+            Arguments.of( affine3d, affine_translate3d, Affine3D.class ),\n+            Arguments.of( affine3d, affine_scale2d, Affine3D.class ),\n+            Arguments.of( affine3d, affine_scale3d, Affine3D.class ),\n+            Arguments.of( affine3d, affine_affine2d, Affine3D.class ),\n+            Arguments.of( affine3d, affine_affine3d, Affine3D.class )              \/\/ 99\n+        );\n@@ -205,11 +201,4 @@\n-    private BaseTransform from;\n-    private Transform deriver;\n-    private Class deriveType;\n-\n-    public TransformDeriveTest(BaseTransform from, Transform deriver, Class deriveType) {\n-        this.from = from.copy();\n-        this.deriver = deriver;\n-        this.deriveType = deriveType;\n-    }\n-\n-    @Test public void testDerive() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testDerive(BaseTransform f, Transform deriver, Class deriveType) {\n+        BaseTransform from = f.copy();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/transform\/TransformDeriveTest.java","additions":116,"deletions":127,"binary":false,"changes":243,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,2 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Stream;\n@@ -49,4 +49,0 @@\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n@@ -54,1 +50,11 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -56,1 +62,0 @@\n-@RunWith(Parameterized.class)\n@@ -289,140 +294,13 @@\n-    \/\/BEWARE: used also in AffineOperationsTest\n-    @Parameters\n-    public static Collection getParams() {\n-        return Arrays.asList(new Object[][] {\n-            { affine_identity, true, Affine.class },            \/\/  0\n-            { affine_translate, true, Affine.class },           \/\/  1\n-            { affine_translate_only, true, Affine.class },      \/\/  2\n-            { affine_scale, true, Affine.class },               \/\/  3\n-            { affine_sc_tr, true, Affine.class },               \/\/  4\n-            { affine_shear, true, Affine.class },               \/\/  5\n-            { affine_sh_tr, true, Affine.class },               \/\/  6\n-            { affine_sh_sc_simple, true, Affine.class },        \/\/  7\n-            { affine_sh_sc, true, Affine.class },               \/\/  8\n-            { affine_sh_sc_tr, true, Affine.class },            \/\/  9\n-            { affine_3d_tr, false, Affine.class },              \/\/ 10\n-            { affine_3d_sc, false, Affine.class },              \/\/ 11\n-            { affine_3d_sc_tr, false, Affine.class },           \/\/ 12\n-            { affine_3d_sc2_tr3, false, Affine.class },         \/\/ 13\n-            { affine_3d_sc3_tr2, false, Affine.class },         \/\/ 14\n-            { affine_3d_withShear, false, Affine.class },       \/\/ 15\n-            { affine_3d_only3d, false, Affine.class },          \/\/ 16\n-            { affine_3d_translate_only, false, null },          \/\/ 17\n-            { affine_3d_complex, false, Affine.class },         \/\/ 18\n-            { affine_3d_complex_noninvertible, false, null },   \/\/ 19\n-            { affine_empty, false, null },                      \/\/ 20\n-            { affine_emptyZ, false, null },                     \/\/ 21\n-            { affine_emptyXY, true, null },                     \/\/ 22\n-            { affine_nonInv_translate_x, true, null },          \/\/ 23\n-            { affine_nonInv_translate_y, true, null },          \/\/ 24\n-            { affine_nonInv_translate_z, false, null },         \/\/ 25\n-            { affine_nonInv_scale_x, true, null },              \/\/ 26\n-            { affine_nonInv_scale_y, true, null },              \/\/ 27\n-            { affine_nonInv_scale_xy, false, null },            \/\/ 28\n-            { affine_nonInv_scale_z, false, null },             \/\/ 29\n-            { affine_nonInv_shear_x, true, null },              \/\/ 30\n-            { affine_nonInv_shear_y, true, null },              \/\/ 31\n-            { affine_nonInv_sh_tr_x, true, null },              \/\/ 32\n-            { affine_nonInv_sh_tr_y, true, null },              \/\/ 33\n-            { affine_nonInv_sh_sc_tr, true, null },             \/\/ 34\n-            { affine_nonInv_sh_sc, true, null },                \/\/ 35\n-            { affine_nonInv_sh_tr, true, null },                \/\/ 36\n-            { affine_nonInv_sc_tr, true, null },                \/\/ 37\n-            { affine_nonInv_sc_tr_x, true, null },              \/\/ 38\n-            { affine_nonInv_sc_tr_y, true, null },              \/\/ 39\n-            { translate2d, true, Translate.class },             \/\/ 40\n-            { translate3d, false, Translate.class },            \/\/ 41\n-            { translate3d_only, false, Translate.class },       \/\/ 42\n-            { noTranslate, true, Translate.class },             \/\/ 43\n-            { scale2d, true, Scale.class },                     \/\/ 44\n-            { scale2d_x, true, Scale.class },                   \/\/ 45\n-            { scale2d_y, true, Scale.class },                   \/\/ 46\n-            { scale3d, false, Scale.class },                    \/\/ 47\n-            { scale3dOnly, false, Scale.class },                \/\/ 48\n-            { scale2dNoPivot, true, Scale.class },              \/\/ 49\n-            { scale2dUslessPivots, true, Scale.class },         \/\/ 50\n-            { scale3dNoPivot, false, Scale.class },             \/\/ 51\n-            { scale2dPivot3d, true, Scale.class },              \/\/ 52\n-            { noScale, true, Scale.class },                     \/\/ 53\n-            { nonInvertible2dScale, true, null },               \/\/ 54\n-            { nonInvertible3dScale, false, null },              \/\/ 55\n-            { shear, true, Affine.class },                      \/\/ 56\n-            { shearX, true, Shear.class },                      \/\/ 57\n-            { shearY, true, Shear.class },                      \/\/ 58\n-            { shearNoPivot, true, Affine.class },               \/\/ 59\n-            { noShear, true, Shear.class },                     \/\/ 60\n-            { simpleRotate3d, false, Rotate.class},             \/\/ 61\n-            { rotate2d, true, Rotate.class },                   \/\/ 62\n-            { rotate3d, false, Rotate.class },                  \/\/ 63\n-            { rotate3d2d, true, Rotate.class },                 \/\/ 64\n-            { rotate3dUpsideDown2d, true, Rotate.class },       \/\/ 65\n-            { rotateZeroAxis, true, Rotate.class },             \/\/ 66\n-            { rotate2dNoPivot, true, Rotate.class },            \/\/ 67\n-            { rotate3dNoPivot, false, Rotate.class },           \/\/ 68\n-            { rotate2dPivot3d, true, Rotate.class },            \/\/ 69\n-            { noRotate, true, Rotate.class },                   \/\/ 70\n-            { immutable_identity, true, Affine.class },         \/\/ 71\n-            { immutable_translate, true, Affine.class },        \/\/ 72\n-            { immutable_translate_only, true, Affine.class },   \/\/ 73\n-            { immutable_scale, true, Affine.class },            \/\/ 74\n-            { immutable_sc_tr, true, Affine.class },            \/\/ 75\n-            { immutable_shear, true, Affine.class },            \/\/ 76\n-            { immutable_sh_tr, true, Affine.class },            \/\/ 77\n-            { immutable_sh_sc_simple, true, Affine.class },     \/\/ 78\n-            { immutable_sh_sc, true, Affine.class },            \/\/ 79\n-            { immutable_sh_sc_tr, true, Affine.class },         \/\/ 80\n-            { immutable_3d_tr, false, Affine.class },           \/\/ 81\n-            { immutable_3d_sc, false, Affine.class },           \/\/ 82\n-            { immutable_3d_sc_tr, false, Affine.class },        \/\/ 83\n-            { immutable_3d_sc2_tr3, false, Affine.class },      \/\/ 84\n-            { immutable_3d_sc3_tr2, false, Affine.class },      \/\/ 85\n-            { immutable_3d_withShear, false, Affine.class },    \/\/ 86\n-            { immutable_3d_only3d, false, Affine.class },       \/\/ 87\n-            { immutable_3d_translate_only, false, null },       \/\/ 88\n-            { immutable_3d_complex, false, Affine.class },      \/\/ 89\n-            { immutable_3d_complex_noninvertible, false, null },\/\/ 90\n-            { immutable_empty, false, null },                   \/\/ 91\n-            { immutable_emptyZ, false, null },                  \/\/ 92\n-            { immutable_emptyXY, true, null },                  \/\/ 93\n-            { immutable_nonInv_translate_x, true, null },       \/\/ 94\n-            { immutable_nonInv_translate_y, true, null },       \/\/ 95\n-            { immutable_nonInv_translate_z, false, null },      \/\/ 96\n-            { immutable_nonInv_scale_x, true, null },           \/\/ 97\n-            { immutable_nonInv_scale_y, true, null },           \/\/ 98\n-            { immutable_nonInv_scale_xy, false, null },         \/\/ 99\n-            { immutable_nonInv_scale_z, false, null },          \/\/100\n-            { immutable_nonInv_shear_x, true, null },           \/\/101\n-            { immutable_nonInv_shear_y, true, null },           \/\/102\n-            { immutable_nonInv_sh_tr_x, true, null },           \/\/103\n-            { immutable_nonInv_sh_tr_y, true, null },           \/\/104\n-            { immutable_nonInv_sh_sc_tr, true, null },          \/\/105\n-            { immutable_nonInv_sh_sc, true, null },             \/\/106\n-            { immutable_nonInv_sh_tr, true, null },             \/\/107\n-            { immutable_nonInv_sc_tr, true, null },             \/\/108\n-            { immutable_nonInv_sc_tr_x, true, null },           \/\/109\n-            { immutable_nonInv_sc_tr_y, true, null },           \/\/110\n-            { raw_arbitrary, false, Affine.class },             \/\/111\n-            { raw_arbitrary_nonInvertible, false, null },       \/\/112\n-            { raw_empty, false, null },                         \/\/113\n-            { raw_emptyZ, false, null },                        \/\/114\n-            { raw_emptyXY, true, null },                        \/\/115\n-        });\n-    }\n-\n-    private Transform t;\n-    private Transform it;\n-    private boolean is2d, isIdentity;\n-    private boolean isInvertible;\n-    private Class inverseType;\n-\n-    public TransformOperationsTest(Transform t, boolean twoDee, Class inverseType) {\n-        this.t = t;\n-        this.is2d = twoDee;\n-        this.isIdentity =\n-               (t.getMxx() == 1 && t.getMxy() == 0 && t.getMxz() == 0 && t.getTx() == 0\n-             && t.getMyx() == 0 && t.getMyy() == 1 && t.getMyz() == 0 && t.getTy() == 0\n-             && t.getMzx() == 0 && t.getMzy() == 0 && t.getMzz() == 1 && t.getTz() == 0);\n-\n-        this.it = null;\n-        this.inverseType = inverseType;\n-        this.isInvertible = (TransformHelper.determinant(t) != 0);\n+    \/\/ converts to test parameters:\n+    \/\/    Transform t,\n+    \/\/    Transform it,\n+    \/\/    boolean is2d,\n+    \/\/    boolean isIdentity,\n+    \/\/    boolean isInvertible,\n+    \/\/    Class inverseType\n+    private static Arguments prepareArgs(Transform t, boolean is2d, Class inverseType) {\n+        boolean isIdentity = (t.getMxx() == 1 && t.getMxy() == 0 && t.getMxz() == 0 && t.getTx() == 0\n+                              && t.getMyx() == 0 && t.getMyy() == 1 && t.getMyz() == 0 && t.getTy() == 0\n+                              && t.getMzx() == 0 && t.getMzy() == 0 && t.getMzz() == 1 && t.getTz() == 0);\n+        boolean isInvertible = (TransformHelper.determinant(t) != 0);\n+        Transform it = null;\n@@ -440,0 +318,9 @@\n+\n+        return Arguments.of(\n+            t,\n+            it,\n+            is2d,\n+            isIdentity,\n+            isInvertible,\n+            inverseType\n+        );\n@@ -442,2 +329,130 @@\n-    @Test\n-    public void testClone() {\n+    \/\/BEWARE: used also in AffineOperationsTest\n+    public static Stream<Arguments> getParams() {\n+        return Stream.of(\n+            prepareArgs( affine_identity, true, Affine.class ),            \/\/  0\n+            prepareArgs( affine_translate, true, Affine.class ),           \/\/  1\n+            prepareArgs( affine_translate_only, true, Affine.class ),      \/\/  2\n+            prepareArgs( affine_scale, true, Affine.class ),               \/\/  3\n+            prepareArgs( affine_sc_tr, true, Affine.class ),               \/\/  4\n+            prepareArgs( affine_shear, true, Affine.class ),               \/\/  5\n+            prepareArgs( affine_sh_tr, true, Affine.class ),               \/\/  6\n+            prepareArgs( affine_sh_sc_simple, true, Affine.class ),        \/\/  7\n+            prepareArgs( affine_sh_sc, true, Affine.class ),               \/\/  8\n+            prepareArgs( affine_sh_sc_tr, true, Affine.class ),            \/\/  9\n+            prepareArgs( affine_3d_tr, false, Affine.class ),              \/\/ 10\n+            prepareArgs( affine_3d_sc, false, Affine.class ),              \/\/ 11\n+            prepareArgs( affine_3d_sc_tr, false, Affine.class ),           \/\/ 12\n+            prepareArgs( affine_3d_sc2_tr3, false, Affine.class ),         \/\/ 13\n+            prepareArgs( affine_3d_sc3_tr2, false, Affine.class ),         \/\/ 14\n+            prepareArgs( affine_3d_withShear, false, Affine.class ),       \/\/ 15\n+            prepareArgs( affine_3d_only3d, false, Affine.class ),          \/\/ 16\n+            prepareArgs( affine_3d_translate_only, false, null ),          \/\/ 17\n+            prepareArgs( affine_3d_complex, false, Affine.class ),         \/\/ 18\n+            prepareArgs( affine_3d_complex_noninvertible, false, null ),   \/\/ 19\n+            prepareArgs( affine_empty, false, null ),                      \/\/ 20\n+            prepareArgs( affine_emptyZ, false, null ),                     \/\/ 21\n+            prepareArgs( affine_emptyXY, true, null ),                     \/\/ 22\n+            prepareArgs( affine_nonInv_translate_x, true, null ),          \/\/ 23\n+            prepareArgs( affine_nonInv_translate_y, true, null ),          \/\/ 24\n+            prepareArgs( affine_nonInv_translate_z, false, null ),         \/\/ 25\n+            prepareArgs( affine_nonInv_scale_x, true, null ),              \/\/ 26\n+            prepareArgs( affine_nonInv_scale_y, true, null ),              \/\/ 27\n+            prepareArgs( affine_nonInv_scale_xy, false, null ),            \/\/ 28\n+            prepareArgs( affine_nonInv_scale_z, false, null ),             \/\/ 29\n+            prepareArgs( affine_nonInv_shear_x, true, null ),              \/\/ 30\n+            prepareArgs( affine_nonInv_shear_y, true, null ),              \/\/ 31\n+            prepareArgs( affine_nonInv_sh_tr_x, true, null ),              \/\/ 32\n+            prepareArgs( affine_nonInv_sh_tr_y, true, null ),              \/\/ 33\n+            prepareArgs( affine_nonInv_sh_sc_tr, true, null ),             \/\/ 34\n+            prepareArgs( affine_nonInv_sh_sc, true, null ),                \/\/ 35\n+            prepareArgs( affine_nonInv_sh_tr, true, null ),                \/\/ 36\n+            prepareArgs( affine_nonInv_sc_tr, true, null ),                \/\/ 37\n+            prepareArgs( affine_nonInv_sc_tr_x, true, null ),              \/\/ 38\n+            prepareArgs( affine_nonInv_sc_tr_y, true, null ),              \/\/ 39\n+            prepareArgs( translate2d, true, Translate.class ),             \/\/ 40\n+            prepareArgs( translate3d, false, Translate.class ),            \/\/ 41\n+            prepareArgs( translate3d_only, false, Translate.class ),       \/\/ 42\n+            prepareArgs( noTranslate, true, Translate.class ),             \/\/ 43\n+            prepareArgs( scale2d, true, Scale.class ),                     \/\/ 44\n+            prepareArgs( scale2d_x, true, Scale.class ),                   \/\/ 45\n+            prepareArgs( scale2d_y, true, Scale.class ),                   \/\/ 46\n+            prepareArgs( scale3d, false, Scale.class ),                    \/\/ 47\n+            prepareArgs( scale3dOnly, false, Scale.class ),                \/\/ 48\n+            prepareArgs( scale2dNoPivot, true, Scale.class ),              \/\/ 49\n+            prepareArgs( scale2dUslessPivots, true, Scale.class ),         \/\/ 50\n+            prepareArgs( scale3dNoPivot, false, Scale.class ),             \/\/ 51\n+            prepareArgs( scale2dPivot3d, true, Scale.class ),              \/\/ 52\n+            prepareArgs( noScale, true, Scale.class ),                     \/\/ 53\n+            prepareArgs( nonInvertible2dScale, true, null ),               \/\/ 54\n+            prepareArgs( nonInvertible3dScale, false, null ),              \/\/ 55\n+            prepareArgs( shear, true, Affine.class ),                      \/\/ 56\n+            prepareArgs( shearX, true, Shear.class ),                      \/\/ 57\n+            prepareArgs( shearY, true, Shear.class ),                      \/\/ 58\n+            prepareArgs( shearNoPivot, true, Affine.class ),               \/\/ 59\n+            prepareArgs( noShear, true, Shear.class ),                     \/\/ 60\n+            prepareArgs( simpleRotate3d, false, Rotate.class ),            \/\/ 61\n+            prepareArgs( rotate2d, true, Rotate.class ),                   \/\/ 62\n+            prepareArgs( rotate3d, false, Rotate.class ),                  \/\/ 63\n+            prepareArgs( rotate3d2d, true, Rotate.class ),                 \/\/ 64\n+            prepareArgs( rotate3dUpsideDown2d, true, Rotate.class ),       \/\/ 65\n+            prepareArgs( rotateZeroAxis, true, Rotate.class ),             \/\/ 66\n+            prepareArgs( rotate2dNoPivot, true, Rotate.class ),            \/\/ 67\n+            prepareArgs( rotate3dNoPivot, false, Rotate.class ),           \/\/ 68\n+            prepareArgs( rotate2dPivot3d, true, Rotate.class ),            \/\/ 69\n+            prepareArgs( noRotate, true, Rotate.class ),                   \/\/ 70\n+            prepareArgs( immutable_identity, true, Affine.class ),         \/\/ 71\n+            prepareArgs( immutable_translate, true, Affine.class ),        \/\/ 72\n+            prepareArgs( immutable_translate_only, true, Affine.class ),   \/\/ 73\n+            prepareArgs( immutable_scale, true, Affine.class ),            \/\/ 74\n+            prepareArgs( immutable_sc_tr, true, Affine.class ),            \/\/ 75\n+            prepareArgs( immutable_shear, true, Affine.class ),            \/\/ 76\n+            prepareArgs( immutable_sh_tr, true, Affine.class ),            \/\/ 77\n+            prepareArgs( immutable_sh_sc_simple, true, Affine.class ),     \/\/ 78\n+            prepareArgs( immutable_sh_sc, true, Affine.class ),            \/\/ 79\n+            prepareArgs( immutable_sh_sc_tr, true, Affine.class ),         \/\/ 80\n+            prepareArgs( immutable_3d_tr, false, Affine.class ),           \/\/ 81\n+            prepareArgs( immutable_3d_sc, false, Affine.class ),           \/\/ 82\n+            prepareArgs( immutable_3d_sc_tr, false, Affine.class ),        \/\/ 83\n+            prepareArgs( immutable_3d_sc2_tr3, false, Affine.class ),      \/\/ 84\n+            prepareArgs( immutable_3d_sc3_tr2, false, Affine.class ),      \/\/ 85\n+            prepareArgs( immutable_3d_withShear, false, Affine.class ),    \/\/ 86\n+            prepareArgs( immutable_3d_only3d, false, Affine.class ),       \/\/ 87\n+            prepareArgs( immutable_3d_translate_only, false, null ),       \/\/ 88\n+            prepareArgs( immutable_3d_complex, false, Affine.class ),      \/\/ 89\n+            prepareArgs( immutable_3d_complex_noninvertible, false, null ),\/\/ 90\n+            prepareArgs( immutable_empty, false, null ),                   \/\/ 91\n+            prepareArgs( immutable_emptyZ, false, null ),                  \/\/ 92\n+            prepareArgs( immutable_emptyXY, true, null ),                  \/\/ 93\n+            prepareArgs( immutable_nonInv_translate_x, true, null ),       \/\/ 94\n+            prepareArgs( immutable_nonInv_translate_y, true, null ),       \/\/ 95\n+            prepareArgs( immutable_nonInv_translate_z, false, null ),      \/\/ 96\n+            prepareArgs( immutable_nonInv_scale_x, true, null ),           \/\/ 97\n+            prepareArgs( immutable_nonInv_scale_y, true, null ),           \/\/ 98\n+            prepareArgs( immutable_nonInv_scale_xy, false, null ),         \/\/ 99\n+            prepareArgs( immutable_nonInv_scale_z, false, null ),          \/\/100\n+            prepareArgs( immutable_nonInv_shear_x, true, null ),           \/\/101\n+            prepareArgs( immutable_nonInv_shear_y, true, null ),           \/\/102\n+            prepareArgs( immutable_nonInv_sh_tr_x, true, null ),           \/\/103\n+            prepareArgs( immutable_nonInv_sh_tr_y, true, null ),           \/\/104\n+            prepareArgs( immutable_nonInv_sh_sc_tr, true, null ),          \/\/105\n+            prepareArgs( immutable_nonInv_sh_sc, true, null ),             \/\/106\n+            prepareArgs( immutable_nonInv_sh_tr, true, null ),             \/\/107\n+            prepareArgs( immutable_nonInv_sc_tr, true, null ),             \/\/108\n+            prepareArgs( immutable_nonInv_sc_tr_x, true, null ),           \/\/109\n+            prepareArgs( immutable_nonInv_sc_tr_y, true, null ),           \/\/110\n+            prepareArgs( raw_arbitrary, false, Affine.class ),             \/\/111\n+            prepareArgs( raw_arbitrary_nonInvertible, false, null ),       \/\/112\n+            prepareArgs( raw_empty, false, null ),                         \/\/113\n+            prepareArgs( raw_emptyZ, false, null ),                        \/\/114\n+            prepareArgs( raw_emptyXY, true, null )                        \/\/115\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testClone(Transform t,\n+                          Transform it,\n+                          boolean is2d,\n+                          boolean isIdentity,\n+                          boolean isInvertible,\n+                          Class inverseType) {\n@@ -529,2 +544,8 @@\n-    @Test\n-    public void testCreateConcatenation() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testCreateConcatenation(Transform t,\n+                                        Transform it,\n+                                        boolean is2d,\n+                                        boolean isIdentity,\n+                                        boolean isInvertible,\n+                                        Class inverseType) {\n@@ -532,2 +553,3 @@\n-        for (Object o : TransformOperationsTest.getParams()) {\n-            Object[] arr = (Object[]) o;\n+        List<Arguments> argumentsStream = TransformOperationsTest.getParams().toList();\n+        for (Arguments a : argumentsStream) {\n+            Object[] arr = a.get();\n@@ -541,3 +563,3 @@\n-            assertSame(\"Concatenating with #\" + counter,\n-                    getExpectedConcatenationClass(t, other),\n-                    conc.getClass());\n+            assertSame(getExpectedConcatenationClass(t, other),\n+                       conc.getClass(),\n+                       \"Concatenating with #\" + counter);\n@@ -548,3 +570,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testCreateConcatenationNullTransform() {\n-        t.createConcatenation(null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testCreateConcatenationNullTransform(Transform t,\n+                                                     Transform it,\n+                                                     boolean is2d,\n+                                                     boolean isIdentity,\n+                                                     boolean isInvertible,\n+                                                     Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.createConcatenation(null);\n+        });\n@@ -553,2 +583,8 @@\n-    @Test\n-    public void testCreateInverse() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testCreateInverse(Transform t,\n+                                  Transform it,\n+                                  boolean is2d,\n+                                  boolean isIdentity,\n+                                  boolean isInvertible,\n+                                  Class inverseType) {\n@@ -577,2 +613,8 @@\n-    @Test\n-    public void createInverseShouldUpdateCache() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void createInverseShouldUpdateCache(Transform t,\n+                                               Transform it,\n+                                               boolean is2d,\n+                                               boolean isIdentity,\n+                                               boolean isInvertible,\n+                                               Class inverseType) {\n@@ -655,2 +697,8 @@\n-    @Test\n-    public void testTransformPoint3d() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testTransformPoint3d(Transform t,\n+                                     Transform it,\n+                                     boolean is2d,\n+                                     boolean isIdentity,\n+                                     boolean isInvertible,\n+                                     Class inverseType) {\n@@ -675,3 +723,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testTransformNullPoint3D() {\n-        t.transform((Point3D) null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testTransformNullPoint3D(Transform t,\n+                                         Transform it,\n+                                         boolean is2d,\n+                                         boolean isIdentity,\n+                                         boolean isInvertible,\n+                                         Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.transform((Point3D) null);\n+        });\n@@ -680,2 +736,8 @@\n-    @Test\n-    public void testTransformPoint2d() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testTransformPoint2d(Transform t,\n+                                     Transform it,\n+                                     boolean is2d,\n+                                     boolean isIdentity,\n+                                     boolean isInvertible,\n+                                     Class inverseType) {\n@@ -715,3 +777,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testTransformNullPoint2D() {\n-        t.transform((Point2D) null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testTransformNullPoint2D(Transform t,\n+                                         Transform it,\n+                                         boolean is2d,\n+                                         boolean isIdentity,\n+                                         boolean isInvertible,\n+                                         Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.transform((Point2D) null);\n+        });\n@@ -720,2 +790,8 @@\n-    @Test\n-    public void testDeltaTransformPoint3d() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testDeltaTransformPoint3d(Transform t,\n+                                          Transform it,\n+                                          boolean is2d,\n+                                          boolean isIdentity,\n+                                          boolean isInvertible,\n+                                          Class inverseType) {\n@@ -740,3 +816,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testDeltaTransformNullPoint3D() {\n-        t.deltaTransform((Point3D) null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testDeltaTransformNullPoint3D(Transform t,\n+                                              Transform it,\n+                                              boolean is2d,\n+                                              boolean isIdentity,\n+                                              boolean isInvertible,\n+                                              Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.deltaTransform((Point3D) null);\n+        });\n@@ -745,2 +829,8 @@\n-    @Test\n-    public void testDeltaTransformPoint2d() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testDeltaTransformPoint2d(Transform t,\n+                                          Transform it,\n+                                          boolean is2d,\n+                                          boolean isIdentity,\n+                                          boolean isInvertible,\n+                                          Class inverseType) {\n@@ -780,3 +870,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testDeltaTransformNullPoint2D() {\n-        t.deltaTransform((Point2D) null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testDeltaTransformNullPoint2D(Transform t,\n+                                              Transform it,\n+                                              boolean is2d,\n+                                              boolean isIdentity,\n+                                              boolean isInvertible,\n+                                              Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.deltaTransform((Point2D) null);\n+        });\n@@ -785,2 +883,8 @@\n-    @Test\n-    public void testTransformBounds() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testTransformBounds(Transform t,\n+                                    Transform it,\n+                                    boolean is2d,\n+                                    boolean isIdentity,\n+                                    boolean isInvertible,\n+                                    Class inverseType) {\n@@ -823,3 +927,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testTransformNullBounds() {\n-        t.transform((Bounds) null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testTransformNullBounds(Transform t,\n+                                        Transform it,\n+                                        boolean is2d,\n+                                        boolean isIdentity,\n+                                        boolean isInvertible,\n+                                        Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.transform((Bounds) null);\n+        });\n@@ -828,2 +940,8 @@\n-    @Test\n-    public void testTransform2DPoints() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testTransform2DPoints(Transform t,\n+                                      Transform it,\n+                                      boolean is2d,\n+                                      boolean isIdentity,\n+                                      boolean isInvertible,\n+                                      Class inverseType) {\n@@ -860,3 +978,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testTransform2DPointsBothPtsNull() {\n-        t.transform2DPoints(null, 2, null, 0, 0);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testTransform2DPointsBothPtsNull(Transform t,\n+                                                 Transform it,\n+                                                 boolean is2d,\n+                                                 boolean isIdentity,\n+                                                 boolean isInvertible,\n+                                                 Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.transform2DPoints(null, 2, null, 0, 0);\n+        });\n@@ -865,3 +991,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testTransform2DPointsSrcPtsNull() {\n-        t.transform2DPoints(null, 2, new double[] { 1, 2 }, 0, 0);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testTransform2DPointsSrcPtsNull(Transform t,\n+                                                Transform it,\n+                                                boolean is2d,\n+                                                boolean isIdentity,\n+                                                boolean isInvertible,\n+                                                Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.transform2DPoints(null, 2, new double[] { 1, 2 }, 0, 0);\n+        });\n@@ -870,3 +1004,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testTransform2DPointsDstPtsNull() {\n-        t.transform2DPoints(new double[] { 1, 2, 3, 4 }, 2, null, 0, 0);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testTransform2DPointsDstPtsNull(Transform t,\n+                                                Transform it,\n+                                                boolean is2d,\n+                                                boolean isIdentity,\n+                                                boolean isInvertible,\n+                                                Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.transform2DPoints(new double[] { 1, 2, 3, 4 }, 2, null, 0, 0);\n+        });\n@@ -875,2 +1017,8 @@\n-    @Test\n-    public void testTransform2DPointsWithOverlap() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testTransform2DPointsWithOverlap(Transform t,\n+                                                 Transform it,\n+                                                 boolean is2d,\n+                                                 boolean isIdentity,\n+                                                 boolean isInvertible,\n+                                                 Class inverseType) {\n@@ -909,4 +1057,11 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n-    public void testTransform2DPointsSrcOut() {\n-        double[] srcPts = new double[] { 0, 1, 2, 3, 4, 5, 6, 7 };\n-        double[] dstPts = new double[] { 1, 2, 3, 4, 5, 6 };\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testTransform2DPointsSrcOut(Transform t,\n+                                            Transform it,\n+                                            boolean is2d,\n+                                            boolean isIdentity,\n+                                            boolean isInvertible,\n+                                            Class inverseType) {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            double[] srcPts = new double[] { 0, 1, 2, 3, 4, 5, 6, 7 };\n+            double[] dstPts = new double[] { 1, 2, 3, 4, 5, 6 };\n@@ -914,5 +1069,6 @@\n-        try {\n-            t.transform2DPoints(srcPts, 3, dstPts, 0, 3);\n-        } catch (IllegalStateException e) {\n-            if (!is2d) {\n-                throw new IndexOutOfBoundsException(\"expected result\");\n+            try {\n+                t.transform2DPoints(srcPts, 3, dstPts, 0, 3);\n+            } catch (IllegalStateException e) {\n+                if (!is2d) {\n+                    throw new IndexOutOfBoundsException(\"expected result\");\n+                }\n@@ -920,1 +1076,1 @@\n-        }\n+        });\n@@ -923,4 +1079,11 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n-    public void testTransform2DPointsDstOut() {\n-        double[] srcPts = new double[] { 0, 1, 2, 3, 4, 5, 6, 7 };\n-        double[] dstPts = new double[] { 1 };\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testTransform2DPointsDstOut(Transform t,\n+                                            Transform it,\n+                                            boolean is2d,\n+                                            boolean isIdentity,\n+                                            boolean isInvertible,\n+                                            Class inverseType) {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            double[] srcPts = new double[] { 0, 1, 2, 3, 4, 5, 6, 7 };\n+            double[] dstPts = new double[] { 1 };\n@@ -928,5 +1091,6 @@\n-        try {\n-            t.transform2DPoints(srcPts, 1, dstPts, 0, 2);\n-        } catch (IllegalStateException e) {\n-            if (!is2d) {\n-                throw new IndexOutOfBoundsException(\"expected result\");\n+            try {\n+                t.transform2DPoints(srcPts, 1, dstPts, 0, 2);\n+            } catch (IllegalStateException e) {\n+                if (!is2d) {\n+                    throw new IndexOutOfBoundsException(\"expected result\");\n+                }\n@@ -934,1 +1098,1 @@\n-        }\n+        });\n@@ -937,2 +1101,8 @@\n-    @Test\n-    public void testTransform3DPoints() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testTransform3DPoints(Transform t,\n+                                      Transform it,\n+                                      boolean is2d,\n+                                      boolean isIdentity,\n+                                      boolean isInvertible,\n+                                      Class inverseType) {\n@@ -964,3 +1134,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testTransform3DPointsBothPtsNull() {\n-        t.transform3DPoints(null, 2, null, 0, 0);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testTransform3DPointsBothPtsNull(Transform t,\n+                                                 Transform it,\n+                                                 boolean is2d,\n+                                                 boolean isIdentity,\n+                                                 boolean isInvertible,\n+                                                 Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.transform3DPoints(null, 2, null, 0, 0);\n+        });\n@@ -969,3 +1147,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testTransform3DPointsSrcPtsNull() {\n-        t.transform3DPoints(null, 2, new double[] { 1, 2, 3 }, 0, 0);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testTransform3DPointsSrcPtsNull(Transform t,\n+                                                Transform it,\n+                                                boolean is2d,\n+                                                boolean isIdentity,\n+                                                boolean isInvertible,\n+                                                Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.transform3DPoints(null, 2, new double[] { 1, 2, 3 }, 0, 0);\n+        });\n@@ -974,3 +1160,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testTransform3DPointsDstPtsNull() {\n-        t.transform3DPoints(new double[] { 1, 2, 3, 4 }, 2, null, 0, 0);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testTransform3DPointsDstPtsNull(Transform t,\n+                                                Transform it,\n+                                                boolean is2d,\n+                                                boolean isIdentity,\n+                                                boolean isInvertible,\n+                                                Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.transform3DPoints(new double[] { 1, 2, 3, 4 }, 2, null, 0, 0);\n+        });\n@@ -979,2 +1173,8 @@\n-    @Test\n-    public void testTransform3DPointsWithOverlap() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testTransform3DPointsWithOverlap(Transform t,\n+                                                 Transform it,\n+                                                 boolean is2d,\n+                                                 boolean isIdentity,\n+                                                 boolean isInvertible,\n+                                                 Class inverseType) {\n@@ -1007,4 +1207,11 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n-    public void testTransform3DPointsSrcOut() {\n-        double[] srcPts = new double[] { 0, 1, 2, 3, 4, 5, 6, 7 };\n-        double[] dstPts = new double[] { 1, 2, 3, 4, 5, 6 };\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testTransform3DPointsSrcOut(Transform t,\n+                                            Transform it,\n+                                            boolean is2d,\n+                                            boolean isIdentity,\n+                                            boolean isInvertible,\n+                                            Class inverseType) {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            double[] srcPts = new double[] { 0, 1, 2, 3, 4, 5, 6, 7 };\n+            double[] dstPts = new double[] { 1, 2, 3, 4, 5, 6 };\n@@ -1012,1 +1219,2 @@\n-        t.transform3DPoints(srcPts, 6, dstPts, 0, 1);\n+            t.transform3DPoints(srcPts, 6, dstPts, 0, 1);\n+        });\n@@ -1015,4 +1223,11 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n-    public void testTransform3DPointsDstOut() {\n-        double[] srcPts = new double[] { 0, 1, 2, 3, 4, 5, 6, 7 };\n-        double[] dstPts = new double[] { 1 };\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testTransform3DPointsDstOut(Transform t,\n+                          Transform it,\n+                          boolean is2d,\n+                          boolean isIdentity,\n+                          boolean isInvertible,\n+                          Class inverseType) {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            double[] srcPts = new double[] { 0, 1, 2, 3, 4, 5, 6, 7 };\n+            double[] dstPts = new double[] { 1 };\n@@ -1020,1 +1235,2 @@\n-        t.transform3DPoints(srcPts, 1, dstPts, 0, 1);\n+            t.transform3DPoints(srcPts, 1, dstPts, 0, 1);\n+        });\n@@ -1023,2 +1239,8 @@\n-    @Test\n-    public void testInverseTransformPoint3d() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseTransformPoint3d(Transform t,\n+                                            Transform it,\n+                                            boolean is2d,\n+                                            boolean isIdentity,\n+                                            boolean isInvertible,\n+                                            Class inverseType) throws Exception {\n@@ -1061,4 +1283,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testInverseTransformNullPoint3D()\n-            throws NonInvertibleTransformException {\n-        t.inverseTransform((Point3D) null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseTransformNullPoint3D(Transform t,\n+                                                Transform it,\n+                                                boolean is2d,\n+                                                boolean isIdentity,\n+                                                boolean isInvertible,\n+                                                Class inverseType) throws NonInvertibleTransformException {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.inverseTransform((Point3D) null);\n+        });\n@@ -1067,2 +1296,8 @@\n-    @Test\n-    public void testInverseTransformPoint2d() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseTransformPoint2d(Transform t,\n+                                            Transform it,\n+                                            boolean is2d,\n+                                            boolean isIdentity,\n+                                            boolean isInvertible,\n+                                            Class inverseType) throws Exception {\n@@ -1116,4 +1351,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testInverseTransformNullPoint2D()\n-            throws NonInvertibleTransformException {\n-        t.inverseTransform((Point2D) null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseTransformNullPoint2D(Transform t,\n+                                                Transform it,\n+                                                boolean is2d,\n+                                                boolean isIdentity,\n+                                                boolean isInvertible,\n+                                                Class inverseType) throws NonInvertibleTransformException {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.inverseTransform((Point2D) null);\n+        });\n@@ -1122,2 +1364,8 @@\n-    @Test\n-    public void testInverseDeltaTransformPoint3d() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseDeltaTransformPoint3d(Transform t,\n+                                                 Transform it,\n+                                                 boolean is2d,\n+                                                 boolean isIdentity,\n+                                                 boolean isInvertible,\n+                                                 Class inverseType) throws Exception {\n@@ -1159,4 +1407,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testInverseDeltaTransformNullPoint3D()\n-            throws NonInvertibleTransformException {\n-        t.inverseDeltaTransform((Point3D) null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseDeltaTransformNullPoint3D(Transform t,\n+                                                     Transform it,\n+                                                     boolean is2d,\n+                                                     boolean isIdentity,\n+                                                     boolean isInvertible,\n+                                                     Class inverseType) throws NonInvertibleTransformException {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.inverseDeltaTransform((Point3D) null);\n+        });\n@@ -1165,2 +1420,8 @@\n-    @Test\n-    public void testInverseDeltaTransformPoint2d() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseDeltaTransformPoint2d(Transform t,\n+                                                 Transform it,\n+                                                 boolean is2d,\n+                                                 boolean isIdentity,\n+                                                 boolean isInvertible,\n+                                                 Class inverseType) throws Exception {\n@@ -1214,2 +1475,8 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testInverseDeltaTransformNullPoint2D()\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseDeltaTransformNullPoint2D(Transform t,\n+                                                     Transform it,\n+                                                     boolean is2d,\n+                                                     boolean isIdentity,\n+                                                     boolean isInvertible,\n+                                                     Class inverseType)\n@@ -1217,1 +1484,3 @@\n-        t.inverseDeltaTransform((Point2D) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            t.inverseDeltaTransform((Point2D) null);\n+        });\n@@ -1220,2 +1489,8 @@\n-    @Test\n-    public void testInverseTransformBounds() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseTransformBounds(Transform t,\n+                                           Transform it,\n+                                           boolean is2d,\n+                                           boolean isIdentity,\n+                                           boolean isInvertible,\n+                                           Class inverseType) throws Exception {\n@@ -1270,4 +1545,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testInverseTransformNullBounds()\n-            throws NonInvertibleTransformException {\n-        t.inverseTransform((Bounds) null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseTransformNullBounds(Transform t,\n+                                               Transform it,\n+                                               boolean is2d,\n+                                               boolean isIdentity,\n+                                               boolean isInvertible,\n+                                               Class inverseType) throws NonInvertibleTransformException {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.inverseTransform((Bounds) null);\n+        });\n@@ -1276,2 +1558,8 @@\n-    @Test\n-    public void testInverseTransform2DPoints() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseTransform2DPoints(Transform t,\n+                                             Transform it,\n+                                             boolean is2d,\n+                                             boolean isIdentity,\n+                                             boolean isInvertible,\n+                                             Class inverseType) throws Exception {\n@@ -1315,4 +1603,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testInverseTransform2DPointsBothPtsNull()\n-            throws NonInvertibleTransformException {\n-        t.inverseTransform2DPoints(null, 2, null, 0, 0);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseTransform2DPointsBothPtsNull(Transform t,\n+                                                        Transform it,\n+                                                        boolean is2d,\n+                                                        boolean isIdentity,\n+                                                        boolean isInvertible,\n+                                                        Class inverseType) throws NonInvertibleTransformException {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.inverseTransform2DPoints(null, 2, null, 0, 0);\n+        });\n@@ -1321,4 +1616,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testInverseTransform2DPointsSrcPtsNull()\n-            throws NonInvertibleTransformException {\n-        t.inverseTransform2DPoints(null, 2, new double[] { 1, 2, 3 }, 0, 0);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseTransform2DPointsSrcPtsNull(Transform t,\n+                                                       Transform it,\n+                                                       boolean is2d,\n+                                                       boolean isIdentity,\n+                                                       boolean isInvertible,\n+                                                       Class inverseType) throws NonInvertibleTransformException {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.inverseTransform2DPoints(null, 2, new double[] { 1, 2, 3 }, 0, 0);\n+        });\n@@ -1327,4 +1629,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testInverseTransform2DPointsDstPtsNull()\n-            throws NonInvertibleTransformException {\n-        t.inverseTransform2DPoints(new double[] { 1, 2, 3, 4 }, 2, null, 0, 0);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseTransform2DPointsDstPtsNull(Transform t,\n+                                                       Transform it,\n+                                                       boolean is2d,\n+                                                       boolean isIdentity,\n+                                                       boolean isInvertible,\n+                                                       Class inverseType) throws NonInvertibleTransformException {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.inverseTransform2DPoints(new double[] { 1, 2, 3, 4 }, 2, null, 0, 0);\n+        });\n@@ -1333,2 +1642,8 @@\n-    @Test\n-    public void testInverseTransform2DPointsWithOverlap() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseTransform2DPointsWithOverlap(Transform t,\n+                                                        Transform it,\n+                                                        boolean is2d,\n+                                                        boolean isIdentity,\n+                                                        boolean isInvertible,\n+                                                        Class inverseType) throws Exception {\n@@ -1373,4 +1688,11 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n-    public void testInverseTransform2DPointsSrcOut() throws Exception {\n-        double[] srcPts = new double[] { 0, 1, 2, 3, 4, 5, 6, 7 };\n-        double[] dstPts = new double[] { 1, 2, 3, 4, 5, 6 };\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseTransform2DPointsSrcOut(Transform t,\n+                                                   Transform it,\n+                                                   boolean is2d,\n+                                                   boolean isIdentity,\n+                                                   boolean isInvertible,\n+                                                   Class inverseType) throws Exception {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            double[] srcPts = new double[] { 0, 1, 2, 3, 4, 5, 6, 7 };\n+            double[] dstPts = new double[] { 1, 2, 3, 4, 5, 6 };\n@@ -1378,9 +1700,10 @@\n-        try {\n-            t.inverseTransform2DPoints(srcPts, 3, dstPts, 0, 3);\n-        } catch (IllegalStateException e) {\n-            if (!is2d) {\n-                throw new IndexOutOfBoundsException(\"expected result\");\n-            }\n-        } catch (NonInvertibleTransformException e) {\n-            if (!isInvertible) {\n-                throw new IndexOutOfBoundsException(\"expected result\");\n+            try {\n+                t.inverseTransform2DPoints(srcPts, 3, dstPts, 0, 3);\n+            } catch (IllegalStateException e) {\n+                if (!is2d) {\n+                    throw new IndexOutOfBoundsException(\"expected result\");\n+                }\n+            } catch (NonInvertibleTransformException e) {\n+                if (!isInvertible) {\n+                    throw new IndexOutOfBoundsException(\"expected result\");\n+                }\n@@ -1388,1 +1711,1 @@\n-        }\n+        });\n@@ -1391,4 +1714,11 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n-    public void testInverseTransform2DPointsDstOut() throws Exception {\n-        double[] srcPts = new double[] { 0, 1, 2, 3, 4, 5, 6, 7 };\n-        double[] dstPts = new double[] { 1 };\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseTransform2DPointsDstOut(Transform t,\n+                                                   Transform it,\n+                                                   boolean is2d,\n+                                                   boolean isIdentity,\n+                                                   boolean isInvertible,\n+                                                   Class inverseType) throws Exception {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            double[] srcPts = new double[] { 0, 1, 2, 3, 4, 5, 6, 7 };\n+            double[] dstPts = new double[] { 1 };\n@@ -1396,9 +1726,10 @@\n-        try {\n-            t.inverseTransform2DPoints(srcPts, 1, dstPts, 0, 2);\n-        } catch (IllegalStateException e) {\n-            if (!is2d) {\n-                throw new IndexOutOfBoundsException(\"expected result\");\n-            }\n-        } catch (NonInvertibleTransformException e) {\n-            if (!isInvertible) {\n-                throw new IndexOutOfBoundsException(\"expected result\");\n+            try {\n+                t.inverseTransform2DPoints(srcPts, 1, dstPts, 0, 2);\n+            } catch (IllegalStateException e) {\n+                if (!is2d) {\n+                    throw new IndexOutOfBoundsException(\"expected result\");\n+                }\n+            } catch (NonInvertibleTransformException e) {\n+                if (!isInvertible) {\n+                    throw new IndexOutOfBoundsException(\"expected result\");\n+                }\n@@ -1406,1 +1737,1 @@\n-        }\n+        });\n@@ -1409,2 +1740,8 @@\n-    @Test\n-    public void testInverseTransform3DPoints() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseTransform3DPoints(Transform t,\n+                                             Transform it,\n+                                             boolean is2d,\n+                                             boolean isIdentity,\n+                                             boolean isInvertible,\n+                                             Class inverseType) throws Exception {\n@@ -1445,4 +1782,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testInverseTransform3DPointsBothPtsNull()\n-            throws NonInvertibleTransformException {\n-        t.inverseTransform3DPoints(null, 2, null, 0, 0);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseTransform3DPointsBothPtsNull(Transform t,\n+                                                        Transform it,\n+                                                        boolean is2d,\n+                                                        boolean isIdentity,\n+                                                        boolean isInvertible,\n+                                                        Class inverseType) throws NonInvertibleTransformException {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.inverseTransform3DPoints(null, 2, null, 0, 0);\n+        });\n@@ -1451,4 +1795,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testInverseTransform3DPointsSrcPtsNull()\n-            throws NonInvertibleTransformException {\n-        t.inverseTransform3DPoints(null, 2, new double[] { 1, 2, 3 }, 0, 0);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseTransform3DPointsSrcPtsNull(Transform t,\n+                                                       Transform it,\n+                                                       boolean is2d,\n+                                                       boolean isIdentity,\n+                                                       boolean isInvertible,\n+                                                       Class inverseType) throws NonInvertibleTransformException {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.inverseTransform3DPoints(null, 2, new double[] { 1, 2, 3 }, 0, 0);\n+        });\n@@ -1457,4 +1808,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testInverseTransform3DPointsDstPtsNull()\n-            throws NonInvertibleTransformException {\n-        t.inverseTransform3DPoints(new double[] { 1, 2, 3, 4 }, 2, null, 0, 0);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseTransform3DPointsDstPtsNull(Transform t,\n+                                                       Transform it,\n+                                                       boolean is2d,\n+                                                       boolean isIdentity,\n+                                                       boolean isInvertible,\n+                                                       Class inverseType) throws NonInvertibleTransformException {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.inverseTransform3DPoints(new double[] { 1, 2, 3, 4 }, 2, null, 0, 0);\n+        });\n@@ -1463,2 +1821,8 @@\n-    @Test\n-    public void testInverseTransform3DPointsWithOverlap() throws Exception {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseTransform3DPointsWithOverlap(Transform t,\n+                          Transform it,\n+                          boolean is2d,\n+                          boolean isIdentity,\n+                          boolean isInvertible,\n+                          Class inverseType) throws Exception {\n@@ -1500,4 +1864,11 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n-    public void testInverseTransform3DPointsSrcOut() throws Exception {\n-        double[] srcPts = new double[] { 0, 1, 2, 3, 4, 5, 6, 7 };\n-        double[] dstPts = new double[] { 1, 2, 3, 4, 5, 6 };\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseTransform3DPointsSrcOut(Transform t,\n+                                                   Transform it,\n+                                                   boolean is2d,\n+                                                   boolean isIdentity,\n+                                                   boolean isInvertible,\n+                                                   Class inverseType) throws Exception {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            double[] srcPts = new double[] { 0, 1, 2, 3, 4, 5, 6, 7 };\n+            double[] dstPts = new double[] { 1, 2, 3, 4, 5, 6 };\n@@ -1505,5 +1876,6 @@\n-        try {\n-            t.inverseTransform3DPoints(srcPts, 6, dstPts, 0, 1);\n-        } catch (NonInvertibleTransformException e) {\n-            if (!isInvertible) {\n-                throw new IndexOutOfBoundsException(\"expected result\");\n+            try {\n+                t.inverseTransform3DPoints(srcPts, 6, dstPts, 0, 1);\n+            } catch (NonInvertibleTransformException e) {\n+                if (!isInvertible) {\n+                    throw new IndexOutOfBoundsException(\"expected result\");\n+                }\n@@ -1511,1 +1883,1 @@\n-        }\n+        });\n@@ -1514,4 +1886,11 @@\n-    @Test(expected=IndexOutOfBoundsException.class)\n-    public void testInverseTransform3DPointsDstOut() throws Exception {\n-        double[] srcPts = new double[] { 0, 1, 2, 3, 4, 5, 6, 7 };\n-        double[] dstPts = new double[] { 1 };\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testInverseTransform3DPointsDstOut(Transform t,\n+                                                   Transform it,\n+                                                   boolean is2d,\n+                                                   boolean isIdentity,\n+                                                   boolean isInvertible,\n+                                                   Class inverseType) throws Exception {\n+        assertThrows(IndexOutOfBoundsException.class, () -> {\n+            double[] srcPts = new double[] { 0, 1, 2, 3, 4, 5, 6, 7 };\n+            double[] dstPts = new double[] { 1 };\n@@ -1519,5 +1898,6 @@\n-        try {\n-            t.inverseTransform3DPoints(srcPts, 1, dstPts, 0, 1);\n-        } catch (NonInvertibleTransformException e) {\n-            if (!isInvertible) {\n-                throw new IndexOutOfBoundsException(\"expected result\");\n+            try {\n+                t.inverseTransform3DPoints(srcPts, 1, dstPts, 0, 1);\n+            } catch (NonInvertibleTransformException e) {\n+                if (!isInvertible) {\n+                    throw new IndexOutOfBoundsException(\"expected result\");\n+                }\n@@ -1525,1 +1905,1 @@\n-        }\n+        });\n@@ -1528,2 +1908,8 @@\n-    @Test\n-    public void testDeterminant() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testDeterminant(Transform t,\n+                                Transform it,\n+                                boolean is2d,\n+                                boolean isIdentity,\n+                                boolean isInvertible,\n+                                Class inverseType) {\n@@ -1533,2 +1919,8 @@\n-    @Test\n-    public void testIsType2D() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testIsType2D(Transform t,\n+                             Transform it,\n+                             boolean is2d,\n+                             boolean isIdentity,\n+                             boolean isInvertible,\n+                             Class inverseType) {\n@@ -1550,2 +1942,8 @@\n-    @Test\n-    public void testType2DProperty() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testType2DProperty(Transform t,\n+                                   Transform it,\n+                                   boolean is2d,\n+                                   boolean isIdentity,\n+                                   boolean isInvertible,\n+                                   Class inverseType) {\n@@ -1558,2 +1956,8 @@\n-    @Test\n-    public void testType2DPropertyGetter() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testType2DPropertyGetter(Transform t,\n+                                         Transform it,\n+                                         boolean is2d,\n+                                         boolean isIdentity,\n+                                         boolean isInvertible,\n+                                         Class inverseType) {\n@@ -1579,2 +1983,8 @@\n-    @Test\n-    public void testType2DPropertyInvalidation() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testType2DPropertyInvalidation(Transform t,\n+                                               Transform it,\n+                                               boolean is2d,\n+                                               boolean isIdentity,\n+                                               boolean isInvertible,\n+                                               Class inverseType) {\n@@ -1619,2 +2029,8 @@\n-    @Test\n-    public void testType2DPropertyChange() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testType2DPropertyChange(Transform t,\n+                                         Transform it,\n+                                         boolean is2d,\n+                                         boolean isIdentity,\n+                                         boolean isInvertible,\n+                                         Class inverseType) {\n@@ -1677,2 +2093,8 @@\n-    @Test\n-    public void testIsIdentity() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testIsIdentity(Transform t,\n+                          Transform it,\n+                          boolean is2d,\n+                          boolean isIdentity,\n+                          boolean isInvertible,\n+                          Class inverseType) {\n@@ -1694,2 +2116,8 @@\n-    @Test\n-    public void testIdentityProperty() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testIdentityProperty(Transform t,\n+                          Transform it,\n+                          boolean is2d,\n+                          boolean isIdentity,\n+                          boolean isInvertible,\n+                          Class inverseType) {\n@@ -1702,2 +2130,8 @@\n-    @Test\n-    public void testIdentityPropertyGetter() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testIdentityPropertyGetter(Transform t,\n+                          Transform it,\n+                          boolean is2d,\n+                          boolean isIdentity,\n+                          boolean isInvertible,\n+                          Class inverseType) {\n@@ -1723,2 +2157,8 @@\n-    @Test\n-    public void testIdentityPropertyInvalidation() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testIdentityPropertyInvalidation(Transform t,\n+                          Transform it,\n+                          boolean is2d,\n+                          boolean isIdentity,\n+                          boolean isInvertible,\n+                          Class inverseType) {\n@@ -1768,2 +2208,8 @@\n-    @Test\n-    public void testIdentityPropertyChange() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testIdentityPropertyChange(Transform t,\n+                          Transform it,\n+                          boolean is2d,\n+                          boolean isIdentity,\n+                          boolean isInvertible,\n+                          Class inverseType) {\n@@ -1821,2 +2267,8 @@\n-    @Test\n-    public void testSimilarTo() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testSimilarTo(Transform t,\n+                          Transform it,\n+                          boolean is2d,\n+                          boolean isIdentity,\n+                          boolean isInvertible,\n+                          Class inverseType) {\n@@ -1849,3 +2301,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testSimilarToNullTransform() {\n-        t.similarTo(null, new BoundingBox(0, 0, 0, 1, 1, 1), 0);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testSimilarToNullTransform(Transform t,\n+                          Transform it,\n+                          boolean is2d,\n+                          boolean isIdentity,\n+                          boolean isInvertible,\n+                          Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.similarTo(null, new BoundingBox(0, 0, 0, 1, 1, 1), 0);\n+        });\n@@ -1854,3 +2314,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testSimilarToNullRange() {\n-        t.similarTo(t, null, 0);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testSimilarToNullRange(Transform t,\n+                          Transform it,\n+                          boolean is2d,\n+                          boolean isIdentity,\n+                          boolean isInvertible,\n+                          Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.similarTo(t, null, 0);\n+        });\n@@ -1859,1 +2327,1 @@\n-    private void assertGetElement(MatrixType type, int row, int col,\n+    private void assertGetElement(Transform t, MatrixType type, int row, int col,\n@@ -1887,66 +2355,80 @@\n-    @Test\n-    public void testGetElement() {\n-        assertGetElement(MatrixType.MT_2D_2x3, 0, 0, t.getMxx(), !is2d, false);\n-        assertGetElement(MatrixType.MT_2D_2x3, 0, 1, t.getMxy(), !is2d, false);\n-        assertGetElement(MatrixType.MT_2D_2x3, 0, 2, t.getTx(), !is2d, false);\n-        assertGetElement(MatrixType.MT_2D_2x3, 1, 0, t.getMyx(), !is2d, false);\n-        assertGetElement(MatrixType.MT_2D_2x3, 1, 1, t.getMyy(), !is2d, false);\n-        assertGetElement(MatrixType.MT_2D_2x3, 1, 2, t.getTy(), !is2d, false);\n-        assertGetElement(MatrixType.MT_2D_2x3, -1, 0, 0, !is2d, true);\n-        assertGetElement(MatrixType.MT_2D_2x3, 2, 1, 0, !is2d, true);\n-        assertGetElement(MatrixType.MT_2D_2x3, 1, 3, 0, !is2d, true);\n-        assertGetElement(MatrixType.MT_2D_2x3, 1, -1, 0, !is2d, true);\n-        assertGetElement(MatrixType.MT_2D_3x3, 0, 0, t.getMxx(), !is2d, false);\n-        assertGetElement(MatrixType.MT_2D_3x3, 0, 1, t.getMxy(), !is2d, false);\n-        assertGetElement(MatrixType.MT_2D_3x3, 0, 2, t.getTx(), !is2d, false);\n-        assertGetElement(MatrixType.MT_2D_3x3, 1, 0, t.getMyx(), !is2d, false);\n-        assertGetElement(MatrixType.MT_2D_3x3, 1, 1, t.getMyy(), !is2d, false);\n-        assertGetElement(MatrixType.MT_2D_3x3, 1, 2, t.getTy(), !is2d, false);\n-        assertGetElement(MatrixType.MT_2D_3x3, 2, 0, 0, !is2d, false);\n-        assertGetElement(MatrixType.MT_2D_3x3, 2, 1, 0, !is2d, false);\n-        assertGetElement(MatrixType.MT_2D_3x3, 2, 2, 1, !is2d, false);\n-        assertGetElement(MatrixType.MT_2D_3x3, -1, 0, 0, !is2d, true);\n-        assertGetElement(MatrixType.MT_2D_3x3, 3, 1, 0, !is2d, true);\n-        assertGetElement(MatrixType.MT_2D_3x3, 1, 3, 0, !is2d, true);\n-        assertGetElement(MatrixType.MT_2D_3x3, 1, -1, 0, !is2d, true);\n-        assertGetElement(MatrixType.MT_3D_3x4, 0, 0, t.getMxx(), false, false);\n-        assertGetElement(MatrixType.MT_3D_3x4, 0, 1, t.getMxy(), false, false);\n-        assertGetElement(MatrixType.MT_3D_3x4, 0, 2, t.getMxz(), false, false);\n-        assertGetElement(MatrixType.MT_3D_3x4, 0, 3, t.getTx(), false, false);\n-        assertGetElement(MatrixType.MT_3D_3x4, 1, 0, t.getMyx(), false, false);\n-        assertGetElement(MatrixType.MT_3D_3x4, 1, 1, t.getMyy(), false, false);\n-        assertGetElement(MatrixType.MT_3D_3x4, 1, 2, t.getMyz(), false, false);\n-        assertGetElement(MatrixType.MT_3D_3x4, 1, 3, t.getTy(), false, false);\n-        assertGetElement(MatrixType.MT_3D_3x4, 2, 0, t.getMzx(), false, false);\n-        assertGetElement(MatrixType.MT_3D_3x4, 2, 1, t.getMzy(), false, false);\n-        assertGetElement(MatrixType.MT_3D_3x4, 2, 2, t.getMzz(), false, false);\n-        assertGetElement(MatrixType.MT_3D_3x4, 2, 3, t.getTz(), false, false);\n-        assertGetElement(MatrixType.MT_3D_3x4, -1, 0, 0, false, true);\n-        assertGetElement(MatrixType.MT_3D_3x4, 3, 1, 0, false, true);\n-        assertGetElement(MatrixType.MT_3D_3x4, 1, 4, 0, false, true);\n-        assertGetElement(MatrixType.MT_3D_3x4, 1, -1, 0, false, true);\n-        assertGetElement(MatrixType.MT_3D_4x4, 0, 0, t.getMxx(), false, false);\n-        assertGetElement(MatrixType.MT_3D_4x4, 0, 1, t.getMxy(), false, false);\n-        assertGetElement(MatrixType.MT_3D_4x4, 0, 2, t.getMxz(), false, false);\n-        assertGetElement(MatrixType.MT_3D_4x4, 0, 3, t.getTx(), false, false);\n-        assertGetElement(MatrixType.MT_3D_4x4, 1, 0, t.getMyx(), false, false);\n-        assertGetElement(MatrixType.MT_3D_4x4, 1, 1, t.getMyy(), false, false);\n-        assertGetElement(MatrixType.MT_3D_4x4, 1, 2, t.getMyz(), false, false);\n-        assertGetElement(MatrixType.MT_3D_4x4, 1, 3, t.getTy(), false, false);\n-        assertGetElement(MatrixType.MT_3D_4x4, 2, 0, t.getMzx(), false, false);\n-        assertGetElement(MatrixType.MT_3D_4x4, 2, 1, t.getMzy(), false, false);\n-        assertGetElement(MatrixType.MT_3D_4x4, 2, 2, t.getMzz(), false, false);\n-        assertGetElement(MatrixType.MT_3D_4x4, 2, 3, t.getTz(), false, false);\n-        assertGetElement(MatrixType.MT_3D_4x4, 3, 0, 0, false, false);\n-        assertGetElement(MatrixType.MT_3D_4x4, 3, 1, 0, false, false);\n-        assertGetElement(MatrixType.MT_3D_4x4, 3, 2, 0, false, false);\n-        assertGetElement(MatrixType.MT_3D_4x4, 3, 3, 1, false, false);\n-        assertGetElement(MatrixType.MT_3D_4x4, -1, 0, 0, false, true);\n-        assertGetElement(MatrixType.MT_3D_4x4, 4, 1, 0, false, true);\n-        assertGetElement(MatrixType.MT_3D_4x4, 1, 4, 0, false, true);\n-        assertGetElement(MatrixType.MT_3D_4x4, 1, -1, 0, false, true);\n-    }\n-\n-    @Test(expected=NullPointerException.class)\n-    public void testGetElementNullType() {\n-        t.getElement(null, 0, 0);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testGetElement(Transform t,\n+                               Transform it,\n+                               boolean is2d,\n+                               boolean isIdentity,\n+                               boolean isInvertible,\n+                               Class inverseType) {\n+        assertGetElement(t, MatrixType.MT_2D_2x3, 0, 0, t.getMxx(), !is2d, false);\n+        assertGetElement(t, MatrixType.MT_2D_2x3, 0, 1, t.getMxy(), !is2d, false);\n+        assertGetElement(t, MatrixType.MT_2D_2x3, 0, 2, t.getTx(), !is2d, false);\n+        assertGetElement(t, MatrixType.MT_2D_2x3, 1, 0, t.getMyx(), !is2d, false);\n+        assertGetElement(t, MatrixType.MT_2D_2x3, 1, 1, t.getMyy(), !is2d, false);\n+        assertGetElement(t, MatrixType.MT_2D_2x3, 1, 2, t.getTy(), !is2d, false);\n+        assertGetElement(t, MatrixType.MT_2D_2x3, -1, 0, 0, !is2d, true);\n+        assertGetElement(t, MatrixType.MT_2D_2x3, 2, 1, 0, !is2d, true);\n+        assertGetElement(t, MatrixType.MT_2D_2x3, 1, 3, 0, !is2d, true);\n+        assertGetElement(t, MatrixType.MT_2D_2x3, 1, -1, 0, !is2d, true);\n+        assertGetElement(t, MatrixType.MT_2D_3x3, 0, 0, t.getMxx(), !is2d, false);\n+        assertGetElement(t, MatrixType.MT_2D_3x3, 0, 1, t.getMxy(), !is2d, false);\n+        assertGetElement(t, MatrixType.MT_2D_3x3, 0, 2, t.getTx(), !is2d, false);\n+        assertGetElement(t, MatrixType.MT_2D_3x3, 1, 0, t.getMyx(), !is2d, false);\n+        assertGetElement(t, MatrixType.MT_2D_3x3, 1, 1, t.getMyy(), !is2d, false);\n+        assertGetElement(t, MatrixType.MT_2D_3x3, 1, 2, t.getTy(), !is2d, false);\n+        assertGetElement(t, MatrixType.MT_2D_3x3, 2, 0, 0, !is2d, false);\n+        assertGetElement(t, MatrixType.MT_2D_3x3, 2, 1, 0, !is2d, false);\n+        assertGetElement(t, MatrixType.MT_2D_3x3, 2, 2, 1, !is2d, false);\n+        assertGetElement(t, MatrixType.MT_2D_3x3, -1, 0, 0, !is2d, true);\n+        assertGetElement(t, MatrixType.MT_2D_3x3, 3, 1, 0, !is2d, true);\n+        assertGetElement(t, MatrixType.MT_2D_3x3, 1, 3, 0, !is2d, true);\n+        assertGetElement(t, MatrixType.MT_2D_3x3, 1, -1, 0, !is2d, true);\n+        assertGetElement(t, MatrixType.MT_3D_3x4, 0, 0, t.getMxx(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_3x4, 0, 1, t.getMxy(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_3x4, 0, 2, t.getMxz(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_3x4, 0, 3, t.getTx(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_3x4, 1, 0, t.getMyx(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_3x4, 1, 1, t.getMyy(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_3x4, 1, 2, t.getMyz(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_3x4, 1, 3, t.getTy(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_3x4, 2, 0, t.getMzx(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_3x4, 2, 1, t.getMzy(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_3x4, 2, 2, t.getMzz(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_3x4, 2, 3, t.getTz(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_3x4, -1, 0, 0, false, true);\n+        assertGetElement(t, MatrixType.MT_3D_3x4, 3, 1, 0, false, true);\n+        assertGetElement(t, MatrixType.MT_3D_3x4, 1, 4, 0, false, true);\n+        assertGetElement(t, MatrixType.MT_3D_3x4, 1, -1, 0, false, true);\n+        assertGetElement(t, MatrixType.MT_3D_4x4, 0, 0, t.getMxx(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_4x4, 0, 1, t.getMxy(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_4x4, 0, 2, t.getMxz(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_4x4, 0, 3, t.getTx(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_4x4, 1, 0, t.getMyx(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_4x4, 1, 1, t.getMyy(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_4x4, 1, 2, t.getMyz(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_4x4, 1, 3, t.getTy(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_4x4, 2, 0, t.getMzx(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_4x4, 2, 1, t.getMzy(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_4x4, 2, 2, t.getMzz(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_4x4, 2, 3, t.getTz(), false, false);\n+        assertGetElement(t, MatrixType.MT_3D_4x4, 3, 0, 0, false, false);\n+        assertGetElement(t, MatrixType.MT_3D_4x4, 3, 1, 0, false, false);\n+        assertGetElement(t, MatrixType.MT_3D_4x4, 3, 2, 0, false, false);\n+        assertGetElement(t, MatrixType.MT_3D_4x4, 3, 3, 1, false, false);\n+        assertGetElement(t, MatrixType.MT_3D_4x4, -1, 0, 0, false, true);\n+        assertGetElement(t, MatrixType.MT_3D_4x4, 4, 1, 0, false, true);\n+        assertGetElement(t, MatrixType.MT_3D_4x4, 1, 4, 0, false, true);\n+        assertGetElement(t, MatrixType.MT_3D_4x4, 1, -1, 0, false, true);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testGetElementNullType(Transform t,\n+                                       Transform it,\n+                                       boolean is2d,\n+                                       boolean isIdentity,\n+                                       boolean isInvertible,\n+                                       Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.getElement(null, 0, 0);\n+        });\n@@ -1993,1 +2475,1 @@\n-    private void assertToArray2D(MatrixType type, double[] tmp,\n+    private void assertToArray2D(Transform t, boolean is2d, MatrixType type, double[] tmp,\n@@ -2020,1 +2502,1 @@\n-    private void assertToArray3D(MatrixType type, double[] tmp,\n+    private void assertToArray3D(Transform t, MatrixType type, double[] tmp,\n@@ -2037,27 +2519,41 @@\n-    @Test\n-    public void testToArray() {\n-\n-        assertToArray2D(MatrixType.MT_2D_2x3, null, false, false);\n-        assertToArray2D(MatrixType.MT_2D_2x3, null, true, false);\n-        assertToArray2D(MatrixType.MT_2D_2x3, new double[4], true, false);\n-        assertToArray2D(MatrixType.MT_2D_2x3, new double[6], true, true);\n-\n-        assertToArray2D(MatrixType.MT_2D_3x3, null, false, false);\n-        assertToArray2D(MatrixType.MT_2D_3x3, null, true, false);\n-        assertToArray2D(MatrixType.MT_2D_3x3, new double[8], true, false);\n-        assertToArray2D(MatrixType.MT_2D_3x3, new double[9], true, true);\n-\n-        assertToArray3D(MatrixType.MT_3D_3x4, null, false, false);\n-        assertToArray3D(MatrixType.MT_3D_3x4, null, true, false);\n-        assertToArray3D(MatrixType.MT_3D_3x4, new double[11], true, false);\n-        assertToArray3D(MatrixType.MT_3D_3x4, new double[12], true, true);\n-\n-        assertToArray3D(MatrixType.MT_3D_4x4, null, false, false);\n-        assertToArray3D(MatrixType.MT_3D_4x4, null, true, false);\n-        assertToArray3D(MatrixType.MT_3D_4x4, new double[15], true, false);\n-        assertToArray3D(MatrixType.MT_3D_4x4, new double[16], true, true);\n-    }\n-\n-    @Test(expected=NullPointerException.class)\n-    public void testToArrayNullType1() {\n-        t.toArray(null);\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testToArray(Transform t,\n+                            Transform it,\n+                            boolean is2d,\n+                            boolean isIdentity,\n+                            boolean isInvertible,\n+                            Class inverseType) {\n+\n+        assertToArray2D(t, is2d, MatrixType.MT_2D_2x3, null, false, false);\n+        assertToArray2D(t, is2d, MatrixType.MT_2D_2x3, null, true, false);\n+        assertToArray2D(t, is2d, MatrixType.MT_2D_2x3, new double[4], true, false);\n+        assertToArray2D(t, is2d, MatrixType.MT_2D_2x3, new double[6], true, true);\n+\n+        assertToArray2D(t, is2d, MatrixType.MT_2D_3x3, null, false, false);\n+        assertToArray2D(t, is2d, MatrixType.MT_2D_3x3, null, true, false);\n+        assertToArray2D(t, is2d, MatrixType.MT_2D_3x3, new double[8], true, false);\n+        assertToArray2D(t, is2d, MatrixType.MT_2D_3x3, new double[9], true, true);\n+\n+        assertToArray3D(t, MatrixType.MT_3D_3x4, null, false, false);\n+        assertToArray3D(t, MatrixType.MT_3D_3x4, null, true, false);\n+        assertToArray3D(t, MatrixType.MT_3D_3x4, new double[11], true, false);\n+        assertToArray3D(t, MatrixType.MT_3D_3x4, new double[12], true, true);\n+\n+        assertToArray3D(t, MatrixType.MT_3D_4x4, null, false, false);\n+        assertToArray3D(t, MatrixType.MT_3D_4x4, null, true, false);\n+        assertToArray3D(t, MatrixType.MT_3D_4x4, new double[15], true, false);\n+        assertToArray3D(t, MatrixType.MT_3D_4x4, new double[16], true, true);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testToArrayNullType1(Transform t,\n+                                     Transform it,\n+                                     boolean is2d,\n+                                     boolean isIdentity,\n+                                     boolean isInvertible,\n+                                     Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.toArray(null);\n+        });\n@@ -2066,3 +2562,11 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testToArrayNullType2() {\n-        t.toArray(null, new double[] {});\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testToArrayNullType2(Transform t,\n+                                     Transform it,\n+                                     boolean is2d,\n+                                     boolean isIdentity,\n+                                     boolean isInvertible,\n+                                     Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.toArray(null, new double[] {});\n+        });\n@@ -2129,1 +2633,1 @@\n-    private void assertRow2D(MatrixType type, int row, double[] tmp,\n+    private void assertRow2D(Transform t, boolean is2d, MatrixType type, int row, double[] tmp,\n@@ -2162,1 +2666,1 @@\n-    private void assertRow3D(MatrixType type, int row, double[] tmp,\n+    private void assertRow3D(Transform t, MatrixType type, int row, double[] tmp,\n@@ -2188,71 +2692,93 @@\n-    @Test\n-    public void testRow() {\n-        assertRow2D(MatrixType.MT_2D_2x3, 0, null, false, false, false);\n-        assertRow2D(MatrixType.MT_2D_2x3, 0, null, true, false, false);\n-        assertRow2D(MatrixType.MT_2D_2x3, 0, new double[2], true, false, false);\n-        assertRow2D(MatrixType.MT_2D_2x3, 0, new double[3], true, true, false);\n-        assertRow2D(MatrixType.MT_2D_2x3, 1, null, false, false, false);\n-        assertRow2D(MatrixType.MT_2D_2x3, 1, null, true, false, false);\n-        assertRow2D(MatrixType.MT_2D_2x3, 1, new double[2], true, false, false);\n-        assertRow2D(MatrixType.MT_2D_2x3, 1, new double[3], true, true, false);\n-        assertRow2D(MatrixType.MT_2D_2x3, -1, null, true, false, true);\n-        assertRow2D(MatrixType.MT_2D_2x3, 2, null, false, false, true);\n-\n-        assertRow2D(MatrixType.MT_2D_3x3, 0, null, false, false, false);\n-        assertRow2D(MatrixType.MT_2D_3x3, 0, null, true, false, false);\n-        assertRow2D(MatrixType.MT_2D_3x3, 0, new double[2], true, false, false);\n-        assertRow2D(MatrixType.MT_2D_3x3, 0, new double[3], true, true, false);\n-        assertRow2D(MatrixType.MT_2D_3x3, 1, null, false, false, false);\n-        assertRow2D(MatrixType.MT_2D_3x3, 1, null, true, false, false);\n-        assertRow2D(MatrixType.MT_2D_3x3, 1, new double[2], true, false, false);\n-        assertRow2D(MatrixType.MT_2D_3x3, 1, new double[3], true, true, false);\n-        assertRow2D(MatrixType.MT_2D_3x3, 2, null, false, false, false);\n-        assertRow2D(MatrixType.MT_2D_3x3, 2, null, true, false, false);\n-        assertRow2D(MatrixType.MT_2D_3x3, 2, new double[2], true, false, false);\n-        assertRow2D(MatrixType.MT_2D_3x3, 2, new double[3], true, true, false);\n-        assertRow2D(MatrixType.MT_2D_3x3, -1, null, true, false, true);\n-        assertRow2D(MatrixType.MT_2D_3x3, 3, null, false, false, true);\n-\n-        assertRow3D(MatrixType.MT_3D_3x4, 0, null, false, false, false);\n-        assertRow3D(MatrixType.MT_3D_3x4, 0, null, true, false, false);\n-        assertRow3D(MatrixType.MT_3D_3x4, 0, new double[3], true, false, false);\n-        assertRow3D(MatrixType.MT_3D_3x4, 0, new double[4], true, true, false);\n-        assertRow3D(MatrixType.MT_3D_3x4, 1, null, false, false, false);\n-        assertRow3D(MatrixType.MT_3D_3x4, 1, null, true, false, false);\n-        assertRow3D(MatrixType.MT_3D_3x4, 1, new double[3], true, false, false);\n-        assertRow3D(MatrixType.MT_3D_3x4, 1, new double[4], true, true, false);\n-        assertRow3D(MatrixType.MT_3D_3x4, 2, null, false, false, false);\n-        assertRow3D(MatrixType.MT_3D_3x4, 2, null, true, false, false);\n-        assertRow3D(MatrixType.MT_3D_3x4, 2, new double[3], true, false, false);\n-        assertRow3D(MatrixType.MT_3D_3x4, 2, new double[4], true, true, false);\n-        assertRow3D(MatrixType.MT_3D_3x4, -1, null, true, false, true);\n-        assertRow3D(MatrixType.MT_3D_3x4, 3, null, false, false, true);\n-\n-        assertRow3D(MatrixType.MT_3D_4x4, 0, null, false, false, false);\n-        assertRow3D(MatrixType.MT_3D_4x4, 0, null, true, false, false);\n-        assertRow3D(MatrixType.MT_3D_4x4, 0, new double[3], true, false, false);\n-        assertRow3D(MatrixType.MT_3D_4x4, 0, new double[4], true, true, false);\n-        assertRow3D(MatrixType.MT_3D_4x4, 1, null, false, false, false);\n-        assertRow3D(MatrixType.MT_3D_4x4, 1, null, true, false, false);\n-        assertRow3D(MatrixType.MT_3D_4x4, 1, new double[3], true, false, false);\n-        assertRow3D(MatrixType.MT_3D_4x4, 1, new double[4], true, true, false);\n-        assertRow3D(MatrixType.MT_3D_4x4, 2, null, false, false, false);\n-        assertRow3D(MatrixType.MT_3D_4x4, 2, null, true, false, false);\n-        assertRow3D(MatrixType.MT_3D_4x4, 2, new double[3], true, false, false);\n-        assertRow3D(MatrixType.MT_3D_4x4, 2, new double[4], true, true, false);\n-        assertRow3D(MatrixType.MT_3D_4x4, 3, null, false, false, false);\n-        assertRow3D(MatrixType.MT_3D_4x4, 3, null, true, false, false);\n-        assertRow3D(MatrixType.MT_3D_4x4, 3, new double[3], true, false, false);\n-        assertRow3D(MatrixType.MT_3D_4x4, 3, new double[4], true, true, false);\n-        assertRow3D(MatrixType.MT_3D_4x4, -1, null, true, false, true);\n-        assertRow3D(MatrixType.MT_3D_4x4, 4, null, false, false, true);\n-    }\n-\n-    @Test(expected=NullPointerException.class)\n-    public void testRowNullType1() {\n-        t.row(null, 0);\n-    }\n-\n-    @Test(expected=NullPointerException.class)\n-    public void testRowNullType2() {\n-        t.row(null, 0, new double[] {});\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testRow(Transform t,\n+                          Transform it,\n+                          boolean is2d,\n+                          boolean isIdentity,\n+                          boolean isInvertible,\n+                          Class inverseType) {\n+        assertRow2D(t, is2d, MatrixType.MT_2D_2x3, 0, null, false, false, false);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_2x3, 0, null, true, false, false);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_2x3, 0, new double[2], true, false, false);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_2x3, 0, new double[3], true, true, false);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_2x3, 1, null, false, false, false);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_2x3, 1, null, true, false, false);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_2x3, 1, new double[2], true, false, false);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_2x3, 1, new double[3], true, true, false);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_2x3, -1, null, true, false, true);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_2x3, 2, null, false, false, true);\n+\n+        assertRow2D(t, is2d, MatrixType.MT_2D_3x3, 0, null, false, false, false);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_3x3, 0, null, true, false, false);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_3x3, 0, new double[2], true, false, false);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_3x3, 0, new double[3], true, true, false);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_3x3, 1, null, false, false, false);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_3x3, 1, null, true, false, false);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_3x3, 1, new double[2], true, false, false);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_3x3, 1, new double[3], true, true, false);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_3x3, 2, null, false, false, false);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_3x3, 2, null, true, false, false);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_3x3, 2, new double[2], true, false, false);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_3x3, 2, new double[3], true, true, false);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_3x3, -1, null, true, false, true);\n+        assertRow2D(t, is2d, MatrixType.MT_2D_3x3, 3, null, false, false, true);\n+\n+        assertRow3D(t, MatrixType.MT_3D_3x4, 0, null, false, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_3x4, 0, null, true, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_3x4, 0, new double[3], true, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_3x4, 0, new double[4], true, true, false);\n+        assertRow3D(t, MatrixType.MT_3D_3x4, 1, null, false, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_3x4, 1, null, true, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_3x4, 1, new double[3], true, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_3x4, 1, new double[4], true, true, false);\n+        assertRow3D(t, MatrixType.MT_3D_3x4, 2, null, false, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_3x4, 2, null, true, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_3x4, 2, new double[3], true, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_3x4, 2, new double[4], true, true, false);\n+        assertRow3D(t, MatrixType.MT_3D_3x4, -1, null, true, false, true);\n+        assertRow3D(t, MatrixType.MT_3D_3x4, 3, null, false, false, true);\n+\n+        assertRow3D(t, MatrixType.MT_3D_4x4, 0, null, false, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_4x4, 0, null, true, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_4x4, 0, new double[3], true, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_4x4, 0, new double[4], true, true, false);\n+        assertRow3D(t, MatrixType.MT_3D_4x4, 1, null, false, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_4x4, 1, null, true, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_4x4, 1, new double[3], true, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_4x4, 1, new double[4], true, true, false);\n+        assertRow3D(t, MatrixType.MT_3D_4x4, 2, null, false, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_4x4, 2, null, true, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_4x4, 2, new double[3], true, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_4x4, 2, new double[4], true, true, false);\n+        assertRow3D(t, MatrixType.MT_3D_4x4, 3, null, false, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_4x4, 3, null, true, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_4x4, 3, new double[3], true, false, false);\n+        assertRow3D(t, MatrixType.MT_3D_4x4, 3, new double[4], true, true, false);\n+        assertRow3D(t, MatrixType.MT_3D_4x4, -1, null, true, false, true);\n+        assertRow3D(t, MatrixType.MT_3D_4x4, 4, null, false, false, true);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testRowNullType1(Transform t,\n+                                 Transform it,\n+                                 boolean is2d,\n+                                 boolean isIdentity,\n+                                 boolean isInvertible,\n+                                 Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.row(null, 0);\n+        });\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testRowNullType2(Transform t,\n+                                 Transform it,\n+                                 boolean is2d,\n+                                 boolean isIdentity,\n+                                 boolean isInvertible,\n+                                 Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.row(null, 0, new double[] {});\n+        });\n@@ -2351,1 +2877,1 @@\n-    private void assertCol2D(MatrixType type, int col, double[] tmp,\n+    private void assertCol2D(Transform t, boolean is2d, MatrixType type, int col, double[] tmp,\n@@ -2384,1 +2910,1 @@\n-    private void assertCol3D(MatrixType type, int col, double[] tmp,\n+    private void assertCol3D(Transform t, MatrixType type, int col, double[] tmp,\n@@ -2410,83 +2936,111 @@\n-    @Test\n-    public void testColumn() {\n-        assertCol2D(MatrixType.MT_2D_2x3, 0, null, false, false, false);\n-        assertCol2D(MatrixType.MT_2D_2x3, 0, null, true, false, false);\n-        assertCol2D(MatrixType.MT_2D_2x3, 0, new double[1], true, false, false);\n-        assertCol2D(MatrixType.MT_2D_2x3, 0, new double[2], true, true, false);\n-        assertCol2D(MatrixType.MT_2D_2x3, 1, null, false, false, false);\n-        assertCol2D(MatrixType.MT_2D_2x3, 1, null, true, false, false);\n-        assertCol2D(MatrixType.MT_2D_2x3, 1, new double[1], true, false, false);\n-        assertCol2D(MatrixType.MT_2D_2x3, 1, new double[2], true, true, false);\n-        assertCol2D(MatrixType.MT_2D_2x3, 2, null, false, false, false);\n-        assertCol2D(MatrixType.MT_2D_2x3, 2, null, true, false, false);\n-        assertCol2D(MatrixType.MT_2D_2x3, 2, new double[1], true, false, false);\n-        assertCol2D(MatrixType.MT_2D_2x3, 2, new double[2], true, true, false);\n-        assertCol2D(MatrixType.MT_2D_2x3, -1, null, true, false, true);\n-        assertCol2D(MatrixType.MT_2D_2x3, 3, null, false, false, true);\n-\n-        assertCol2D(MatrixType.MT_2D_3x3, 0, null, false, false, false);\n-        assertCol2D(MatrixType.MT_2D_3x3, 0, null, true, false, false);\n-        assertCol2D(MatrixType.MT_2D_3x3, 0, new double[2], true, false, false);\n-        assertCol2D(MatrixType.MT_2D_3x3, 0, new double[3], true, true, false);\n-        assertCol2D(MatrixType.MT_2D_3x3, 1, null, false, false, false);\n-        assertCol2D(MatrixType.MT_2D_3x3, 1, null, true, false, false);\n-        assertCol2D(MatrixType.MT_2D_3x3, 1, new double[2], true, false, false);\n-        assertCol2D(MatrixType.MT_2D_3x3, 1, new double[3], true, true, false);\n-        assertCol2D(MatrixType.MT_2D_3x3, 2, null, false, false, false);\n-        assertCol2D(MatrixType.MT_2D_3x3, 2, null, true, false, false);\n-        assertCol2D(MatrixType.MT_2D_3x3, 2, new double[2], true, false, false);\n-        assertCol2D(MatrixType.MT_2D_3x3, 2, new double[3], true, true, false);\n-        assertCol2D(MatrixType.MT_2D_3x3, -1, null, true, false, true);\n-        assertCol2D(MatrixType.MT_2D_3x3, 3, null, false, false, true);\n-\n-        assertCol3D(MatrixType.MT_3D_3x4, 0, null, false, false, false);\n-        assertCol3D(MatrixType.MT_3D_3x4, 0, null, true, false, false);\n-        assertCol3D(MatrixType.MT_3D_3x4, 0, new double[2], true, false, false);\n-        assertCol3D(MatrixType.MT_3D_3x4, 0, new double[3], true, true, false);\n-        assertCol3D(MatrixType.MT_3D_3x4, 1, null, false, false, false);\n-        assertCol3D(MatrixType.MT_3D_3x4, 1, null, true, false, false);\n-        assertCol3D(MatrixType.MT_3D_3x4, 1, new double[2], true, false, false);\n-        assertCol3D(MatrixType.MT_3D_3x4, 1, new double[3], true, true, false);\n-        assertCol3D(MatrixType.MT_3D_3x4, 2, null, false, false, false);\n-        assertCol3D(MatrixType.MT_3D_3x4, 2, null, true, false, false);\n-        assertCol3D(MatrixType.MT_3D_3x4, 2, new double[2], true, false, false);\n-        assertCol3D(MatrixType.MT_3D_3x4, 2, new double[3], true, true, false);\n-        assertCol3D(MatrixType.MT_3D_3x4, 3, null, false, false, false);\n-        assertCol3D(MatrixType.MT_3D_3x4, 3, null, true, false, false);\n-        assertCol3D(MatrixType.MT_3D_3x4, 3, new double[2], true, false, false);\n-        assertCol3D(MatrixType.MT_3D_3x4, 3, new double[3], true, true, false);\n-        assertCol3D(MatrixType.MT_3D_3x4, -1, null, true, false, true);\n-        assertCol3D(MatrixType.MT_3D_3x4, 4, null, false, false, true);\n-\n-        assertCol3D(MatrixType.MT_3D_4x4, 0, null, false, false, false);\n-        assertCol3D(MatrixType.MT_3D_4x4, 0, null, true, false, false);\n-        assertCol3D(MatrixType.MT_3D_4x4, 0, new double[3], true, false, false);\n-        assertCol3D(MatrixType.MT_3D_4x4, 0, new double[4], true, true, false);\n-        assertCol3D(MatrixType.MT_3D_4x4, 1, null, false, false, false);\n-        assertCol3D(MatrixType.MT_3D_4x4, 1, null, true, false, false);\n-        assertCol3D(MatrixType.MT_3D_4x4, 1, new double[3], true, false, false);\n-        assertCol3D(MatrixType.MT_3D_4x4, 1, new double[4], true, true, false);\n-        assertCol3D(MatrixType.MT_3D_4x4, 2, null, false, false, false);\n-        assertCol3D(MatrixType.MT_3D_4x4, 2, null, true, false, false);\n-        assertCol3D(MatrixType.MT_3D_4x4, 2, new double[3], true, false, false);\n-        assertCol3D(MatrixType.MT_3D_4x4, 2, new double[4], true, true, false);\n-        assertCol3D(MatrixType.MT_3D_4x4, 3, null, false, false, false);\n-        assertCol3D(MatrixType.MT_3D_4x4, 3, null, true, false, false);\n-        assertCol3D(MatrixType.MT_3D_4x4, 3, new double[3], true, false, false);\n-        assertCol3D(MatrixType.MT_3D_4x4, 3, new double[4], true, true, false);\n-        assertCol3D(MatrixType.MT_3D_4x4, -1, null, true, false, true);\n-        assertCol3D(MatrixType.MT_3D_4x4, 4, null, false, false, true);\n-    }\n-\n-    @Test(expected=NullPointerException.class)\n-    public void testColumnNullType1() {\n-        t.column(null, 0);\n-    }\n-\n-    @Test(expected=NullPointerException.class)\n-    public void testColumnNullType2() {\n-        t.column(null, 0, new double[] {});\n-    }\n-\n-    @Test\n-    public void testSetOnTransformChanged() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testColumn(Transform t,\n+                           Transform it,\n+                           boolean is2d,\n+                           boolean isIdentity,\n+                           boolean isInvertible,\n+                           Class inverseType) {\n+        assertCol2D(t, is2d, MatrixType.MT_2D_2x3, 0, null, false, false, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_2x3, 0, null, true, false, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_2x3, 0, new double[1], true, false, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_2x3, 0, new double[2], true, true, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_2x3, 1, null, false, false, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_2x3, 1, null, true, false, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_2x3, 1, new double[1], true, false, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_2x3, 1, new double[2], true, true, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_2x3, 2, null, false, false, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_2x3, 2, null, true, false, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_2x3, 2, new double[1], true, false, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_2x3, 2, new double[2], true, true, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_2x3, -1, null, true, false, true);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_2x3, 3, null, false, false, true);\n+\n+        assertCol2D(t, is2d, MatrixType.MT_2D_3x3, 0, null, false, false, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_3x3, 0, null, true, false, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_3x3, 0, new double[2], true, false, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_3x3, 0, new double[3], true, true, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_3x3, 1, null, false, false, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_3x3, 1, null, true, false, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_3x3, 1, new double[2], true, false, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_3x3, 1, new double[3], true, true, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_3x3, 2, null, false, false, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_3x3, 2, null, true, false, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_3x3, 2, new double[2], true, false, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_3x3, 2, new double[3], true, true, false);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_3x3, -1, null, true, false, true);\n+        assertCol2D(t, is2d, MatrixType.MT_2D_3x3, 3, null, false, false, true);\n+\n+        assertCol3D(t, MatrixType.MT_3D_3x4, 0, null, false, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_3x4, 0, null, true, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_3x4, 0, new double[2], true, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_3x4, 0, new double[3], true, true, false);\n+        assertCol3D(t, MatrixType.MT_3D_3x4, 1, null, false, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_3x4, 1, null, true, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_3x4, 1, new double[2], true, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_3x4, 1, new double[3], true, true, false);\n+        assertCol3D(t, MatrixType.MT_3D_3x4, 2, null, false, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_3x4, 2, null, true, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_3x4, 2, new double[2], true, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_3x4, 2, new double[3], true, true, false);\n+        assertCol3D(t, MatrixType.MT_3D_3x4, 3, null, false, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_3x4, 3, null, true, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_3x4, 3, new double[2], true, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_3x4, 3, new double[3], true, true, false);\n+        assertCol3D(t, MatrixType.MT_3D_3x4, -1, null, true, false, true);\n+        assertCol3D(t, MatrixType.MT_3D_3x4, 4, null, false, false, true);\n+\n+        assertCol3D(t, MatrixType.MT_3D_4x4, 0, null, false, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_4x4, 0, null, true, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_4x4, 0, new double[3], true, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_4x4, 0, new double[4], true, true, false);\n+        assertCol3D(t, MatrixType.MT_3D_4x4, 1, null, false, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_4x4, 1, null, true, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_4x4, 1, new double[3], true, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_4x4, 1, new double[4], true, true, false);\n+        assertCol3D(t, MatrixType.MT_3D_4x4, 2, null, false, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_4x4, 2, null, true, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_4x4, 2, new double[3], true, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_4x4, 2, new double[4], true, true, false);\n+        assertCol3D(t, MatrixType.MT_3D_4x4, 3, null, false, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_4x4, 3, null, true, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_4x4, 3, new double[3], true, false, false);\n+        assertCol3D(t, MatrixType.MT_3D_4x4, 3, new double[4], true, true, false);\n+        assertCol3D(t, MatrixType.MT_3D_4x4, -1, null, true, false, true);\n+        assertCol3D(t, MatrixType.MT_3D_4x4, 4, null, false, false, true);\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testColumnNullType1(Transform t,\n+                          Transform it,\n+                          boolean is2d,\n+                          boolean isIdentity,\n+                          boolean isInvertible,\n+                          Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.column(null, 0);\n+        });\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testColumnNullType2(Transform t,\n+                          Transform it,\n+                          boolean is2d,\n+                          boolean isIdentity,\n+                          boolean isInvertible,\n+                          Class inverseType) {\n+        assertThrows(NullPointerException.class, () -> {\n+            t.column(null, 0, new double[] {});\n+        });\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testSetOnTransformChanged(Transform t,\n+                          Transform it,\n+                          boolean is2d,\n+                          boolean isIdentity,\n+                          boolean isInvertible,\n+                          Class inverseType) {\n@@ -2526,2 +3080,8 @@\n-    @Test\n-    public void testAddRemoveEventHandler() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAddRemoveEventHandler(Transform t,\n+                          Transform it,\n+                          boolean is2d,\n+                          boolean isIdentity,\n+                          boolean isInvertible,\n+                          Class inverseType) {\n@@ -2568,2 +3128,8 @@\n-    @Test\n-    public void testAddRemoveEventFilter() {\n+    @ParameterizedTest\n+    @MethodSource(\"getParams\")\n+    public void testAddRemoveEventFilter(Transform t,\n+                          Transform it,\n+                          boolean is2d,\n+                          boolean isIdentity,\n+                          boolean isInvertible,\n+                          Class inverseType) {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/transform\/TransformOperationsTest.java","additions":1212,"deletions":646,"binary":false,"changes":1858,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,0 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n@@ -54,2 +52,4 @@\n-import static org.junit.Assert.*;\n-\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -60,1 +60,1 @@\n-        Assert.assertEquals(trans, NodeHelper.getLeafTransform(n));\n+        assertEquals(trans, NodeHelper.getLeafTransform(n));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/transform\/TransformTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,8 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-import test.com.sun.javafx.test.PropertiesTestBase;\n+import java.util.stream.Stream;\n@@ -43,1 +36,3 @@\n-@RunWith(Parameterized.class)\n+import org.junit.jupiter.params.provider.Arguments;\n+import test.com.sun.javafx.test.PropertiesTestBase;\n+\n@@ -45,2 +40,2 @@\n-    @Parameters\n-    public static Collection data() {\n+\n+    public static Stream<Arguments> data() {\n@@ -57,1 +52,1 @@\n-        return Arrays.asList(new Object[] {\n+        return Stream.of(\n@@ -87,6 +82,2 @@\n-            config(c, \"pivotZ\", 10.0, 20.0),\n-        });\n-    }\n-\n-    public Transform_properties_Test(final Configuration configuration) {\n-        super(configuration);\n+            config(c, \"pivotZ\", 10.0, 20.0)\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/transform\/Transform_properties_Test.java","additions":10,"deletions":19,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,4 +31,0 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n-\n@@ -40,0 +36,4 @@\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -59,1 +59,1 @@\n-        Assert.assertEquals(34, trans.getX(), 1e-100);\n+        assertEquals(34, trans.getX(), 1e-100);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/transform\/TranslateTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,6 +28,1 @@\n-import java.util.Arrays;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n+import java.util.stream.Stream;\n@@ -37,0 +32,2 @@\n+\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -39,1 +36,0 @@\n-@RunWith(Parameterized.class)\n@@ -42,12 +38,6 @@\n-    public Translate_onInvalidate_Test(Configuration config) {\n-        super(config);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]> data() {\n-        Object[][] data = new Object[][] {\n-            {new Configuration(Translate.class, \"x\", 20.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Translate.class, \"y\", 20.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })},\n-            {new Configuration(Translate.class, \"z\", 20.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS })}\n-        };\n-        return Arrays.asList(data);\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of( new Configuration(Translate.class, \"x\", 20.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Translate.class, \"y\", 20.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) ),\n+            Arguments.of( new Configuration(Translate.class, \"z\", 20.0, new DirtyBits[] {DirtyBits.NODE_TRANSFORM, DirtyBits.NODE_TRANSFORMED_BOUNDS }) )\n+        );\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/transform\/Translate_onInvalidate_Test.java","additions":10,"deletions":20,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,4 +39,7 @@\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+\n@@ -48,1 +51,1 @@\n-    @Before\n+    @BeforeEach\n@@ -56,1 +59,1 @@\n-    @After\n+    @AfterEach\n@@ -76,1 +79,1 @@\n-        Assert.assertEquals(\n+        assertEquals(\n@@ -78,1 +81,1 @@\n-        Assert.assertEquals(FileChooserType.OPEN,\n+        assertEquals(FileChooserType.OPEN,\n@@ -80,3 +83,3 @@\n-        Assert.assertEquals(null, stubDialogs.getOwnerWindow());\n-        Assert.assertEquals(\"Open Single\", stubDialogs.getTitle());\n-        Assert.assertEquals(initialDirectory,\n+        assertEquals(null, stubDialogs.getOwnerWindow());\n+        assertEquals(\"Open Single\", stubDialogs.getTitle());\n+        assertEquals(initialDirectory,\n@@ -84,2 +87,2 @@\n-        Assert.assertEquals(\"open.txt\", stubDialogs.getInitialFileName());\n-        Assert.assertArrayEquals(\n+        assertEquals(\"open.txt\", stubDialogs.getInitialFileName());\n+        assertArrayEquals(\n@@ -88,1 +91,1 @@\n-        Assert.assertEquals(txtFiles, stubDialogs.getSelectedExtensionFilter());\n+        assertEquals(txtFiles, stubDialogs.getSelectedExtensionFilter());\n@@ -100,1 +103,1 @@\n-        Assert.assertEquals(\n+        assertEquals(\n@@ -102,1 +105,1 @@\n-        Assert.assertEquals(FileChooserType.OPEN_MULTIPLE,\n+        assertEquals(FileChooserType.OPEN_MULTIPLE,\n@@ -104,5 +107,5 @@\n-        Assert.assertEquals(null, stubDialogs.getOwnerWindow());\n-        Assert.assertEquals(\"Open Multiple\", stubDialogs.getTitle());\n-        Assert.assertEquals(null, stubDialogs.getInitialDirectory());\n-        Assert.assertEquals(null, stubDialogs.getInitialFileName());\n-        Assert.assertArrayEquals(\n+        assertEquals(null, stubDialogs.getOwnerWindow());\n+        assertEquals(\"Open Multiple\", stubDialogs.getTitle());\n+        assertEquals(null, stubDialogs.getInitialDirectory());\n+        assertEquals(null, stubDialogs.getInitialFileName());\n+        assertArrayEquals(\n@@ -111,1 +114,1 @@\n-        Assert.assertEquals(null, stubDialogs.getSelectedExtensionFilter());\n+        assertEquals(null, stubDialogs.getSelectedExtensionFilter());\n@@ -123,1 +126,1 @@\n-        Assert.assertEquals(\n+        assertEquals(\n@@ -125,1 +128,1 @@\n-        Assert.assertEquals(FileChooserType.SAVE,\n+        assertEquals(FileChooserType.SAVE,\n@@ -127,3 +130,3 @@\n-        Assert.assertEquals(null, stubDialogs.getOwnerWindow());\n-        Assert.assertEquals(\"Save\", stubDialogs.getTitle());\n-        Assert.assertEquals(initialDirectory,\n+        assertEquals(null, stubDialogs.getOwnerWindow());\n+        assertEquals(\"Save\", stubDialogs.getTitle());\n+        assertEquals(initialDirectory,\n@@ -131,3 +134,3 @@\n-        Assert.assertEquals(\"save.txt\", stubDialogs.getInitialFileName());\n-        Assert.assertEquals(0, stubDialogs.getExtensionFilters().size());\n-        Assert.assertEquals(null, stubDialogs.getSelectedExtensionFilter());\n+        assertEquals(\"save.txt\", stubDialogs.getInitialFileName());\n+        assertEquals(0, stubDialogs.getExtensionFilters().size());\n+        assertEquals(null, stubDialogs.getSelectedExtensionFilter());\n@@ -144,1 +147,1 @@\n-        Assert.assertEquals(\n+        assertEquals(\n@@ -146,3 +149,3 @@\n-        Assert.assertEquals(null, stubDialogs.getOwnerWindow());\n-        Assert.assertEquals(\"Open\", stubDialogs.getTitle());\n-        Assert.assertEquals(initialDirectory,\n+        assertEquals(null, stubDialogs.getOwnerWindow());\n+        assertEquals(\"Open\", stubDialogs.getTitle());\n+        assertEquals(initialDirectory,\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/stage\/CommonDialogsTest.java","additions":38,"deletions":35,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,5 +50,0 @@\n-import junit.framework.Assert;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n@@ -65,1 +60,8 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -75,1 +77,1 @@\n-    @Before\n+    @BeforeEach\n@@ -85,1 +87,1 @@\n-    @After\n+    @AfterEach\n@@ -454,1 +456,1 @@\n-    @Ignore(\"JDK-8234161\")\n+    @Disabled(\"JDK-8234161\")\n@@ -701,1 +703,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -703,2 +705,4 @@\n-        final Popup popup = new Popup();\n-        popup.show(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final Popup popup = new Popup();\n+            popup.show(null);\n+        });\n@@ -707,1 +711,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -709,2 +713,4 @@\n-        final Popup popup = new Popup();\n-        popup.show((Window) null, 10, 10);\n+        assertThrows(NullPointerException.class, () -> {\n+            final Popup popup = new Popup();\n+            popup.show((Window) null, 10, 10);\n+        });\n@@ -713,1 +719,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -715,2 +721,4 @@\n-        final Popup popup = new Popup();\n-        popup.show(popup);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final Popup popup = new Popup();\n+            popup.show(popup);\n+        });\n@@ -719,1 +727,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -721,7 +729,9 @@\n-        final Popup popup1 = new Popup();\n-        final Popup popup2 = new Popup();\n-\n-        popup1.show(stage);\n-        popup2.show(popup1);\n-        popup1.hide();\n-        popup1.show(popup2);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final Popup popup1 = new Popup();\n+            final Popup popup2 = new Popup();\n+\n+            popup1.show(stage);\n+            popup2.show(popup1);\n+            popup1.hide();\n+            popup1.show(popup2);\n+        });\n@@ -730,1 +740,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -732,2 +742,4 @@\n-        final Popup popup = new Popup();\n-        popup.show(popup, 10, 20);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final Popup popup = new Popup();\n+            popup.show(popup, 10, 20);\n+        });\n@@ -736,1 +748,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -738,7 +750,9 @@\n-        final Popup popup1 = new Popup();\n-        final Popup popup2 = new Popup();\n-\n-        popup1.show(stage);\n-        popup2.show(popup1);\n-        popup1.hide();\n-        popup1.show(popup2, 10, 20);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final Popup popup1 = new Popup();\n+            final Popup popup2 = new Popup();\n+\n+            popup1.show(stage);\n+            popup2.show(popup1);\n+            popup1.hide();\n+            popup1.show(popup2, 10, 20);\n+        });\n@@ -769,1 +783,1 @@\n-        Assert.assertTrue(oldRoot.getStyleClass().contains(\"popup\"));\n+        assertTrue(oldRoot.getStyleClass().contains(\"popup\"));\n@@ -774,2 +788,2 @@\n-        Assert.assertTrue(newRoot.getStyleClass().contains(\"popup\"));\n-        Assert.assertFalse(oldRoot.getStyleClass().contains(\"popup\"));\n+        assertTrue(newRoot.getStyleClass().contains(\"popup\"));\n+        assertFalse(oldRoot.getStyleClass().contains(\"popup\"));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/stage\/PopupTest.java","additions":55,"deletions":41,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n-import java.util.Collection;\n-import java.util.List;\n+import java.util.stream.Stream;\n@@ -33,5 +32,2 @@\n-import org.junit.Ignore;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -44,2 +40,1 @@\n-@Ignore(\"JDK-8234153\") \/\/ test needs to be rewritten.\n-@RunWith(Parameterized.class)\n+@Disabled(\"JDK-8234153\") \/\/ test needs to be rewritten.\n@@ -48,3 +43,2 @@\n-    @Parameters\n-    public static Collection<Object> data() {\n-        final List<Object> configurations = new ArrayList<>();\n+    public static Stream<Arguments> data() {\n+        ArrayList<Arguments> configurations = new ArrayList<>();\n@@ -112,6 +106,1 @@\n-        return configurations;\n-    }\n-\n-    public Popup_parentWindow_Test(final Configuration configuration) {\n-        super(configuration);\n-\n+        return configurations.stream();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/stage\/Popup_parentWindow_Test.java","additions":8,"deletions":19,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,3 @@\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -33,1 +35,1 @@\n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n@@ -35,2 +37,4 @@\n-        final List<Screen> screens = Screen.getScreens();\n-        screens.clear();\n+        assertThrows(UnsupportedOperationException.class, () -> {\n+            final List<Screen> screens = Screen.getScreens();\n+            screens.clear();\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/stage\/ScreenTest.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,3 +33,0 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n@@ -37,1 +34,4 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -50,1 +50,2 @@\n-    @Test public void testStyleDefault() {\n+    @Test\n+    public void testStyleDefault() {\n@@ -58,1 +59,2 @@\n-    @Test public void testStyleSet() {\n+    @Test\n+    public void testStyleSet() {\n@@ -74,1 +76,2 @@\n-    @Test public void testStyleSetPrimary() {\n+    @Test\n+    public void testStyleSetPrimary() {\n@@ -93,1 +96,2 @@\n-    @Test public void testStyleConstructor() {\n+    @Test\n+    public void testStyleConstructor() {\n@@ -103,1 +107,2 @@\n-    @Test public void testStyleSetWhileVisible() {\n+    @Test\n+    public void testStyleSetWhileVisible() {\n@@ -120,1 +125,2 @@\n-    @Test public void testStyleSetAfterVisible() {\n+    @Test\n+    public void testStyleSetAfterVisible() {\n@@ -141,1 +147,2 @@\n-    @Test public void testModalityDefault() {\n+    @Test\n+    public void testModalityDefault() {\n@@ -149,1 +156,2 @@\n-    @Test public void testModalitySet() {\n+    @Test\n+    public void testModalitySet() {\n@@ -163,1 +171,2 @@\n-    @Test public void testModalitySetPrimary() {\n+    @Test\n+    public void testModalitySetPrimary() {\n@@ -182,1 +191,2 @@\n-\/\/    @Test public void testStyleSetWhileVisible() {\n+\/\/    @Test\n+\/\/    public void testStyleSetWhileVisible() {\n@@ -199,1 +209,2 @@\n-\/\/    @Test public void testStyleSetAfterVisible() {\n+\/\/    @Test\n+\/\/    public void testStyleSetAfterVisible() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/stage\/StageMutabilityTest.java","additions":27,"deletions":16,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,6 +38,7 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import static junit.framework.Assert.assertEquals;\n-import static junit.framework.Assert.assertFalse;\n-import static junit.framework.Assert.assertTrue;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -53,1 +54,1 @@\n-    @Before\n+    @BeforeEach\n@@ -62,1 +63,1 @@\n-    @After\n+    @AfterEach\n@@ -75,1 +76,2 @@\n-    public @Test void testMovingStage() {\n+    @Test\n+    public void testMovingStage() {\n@@ -87,1 +89,2 @@\n-    public @Test void testResizingStage() {\n+    @Test\n+    public void testResizingStage() {\n@@ -101,1 +104,2 @@\n-    public @Test void testMovingAndResizingStage() {\n+    @Test\n+    public void testMovingAndResizingStage() {\n@@ -119,1 +123,2 @@\n-    public @Test void testResizingTooSmallStage() {\n+    @Test\n+    public void testResizingTooSmallStage() {\n@@ -133,1 +138,2 @@\n-    public @Test void testResizingTooBigStage() {\n+    @Test\n+    public void testResizingTooBigStage() {\n@@ -147,1 +153,2 @@\n-    public @Test void testSizeAndLocationChangedOverTime() {\n+    @Test\n+    public void testSizeAndLocationChangedOverTime() {\n@@ -469,1 +476,1 @@\n-            assertTrue(failMessage, e instanceof NullPointerException);\n+            assertTrue(e instanceof NullPointerException, failMessage);\n@@ -475,1 +482,1 @@\n-            assertTrue(failMessage, e instanceof NullPointerException);\n+            assertTrue(e instanceof NullPointerException, failMessage);\n@@ -481,1 +488,1 @@\n-            assertTrue(failMessage, e instanceof NullPointerException);\n+            assertTrue(e instanceof NullPointerException, failMessage);\n@@ -487,1 +494,1 @@\n-            assertTrue(failMessage, e instanceof NullPointerException);\n+            assertTrue(e instanceof NullPointerException, failMessage);\n@@ -493,1 +500,1 @@\n-            assertTrue(failMessage, e instanceof NullPointerException);\n+            assertTrue(e instanceof NullPointerException, failMessage);\n@@ -499,1 +506,1 @@\n-            assertTrue(failMessage, e instanceof NullPointerException);\n+            assertTrue(e instanceof NullPointerException, failMessage);\n@@ -505,1 +512,1 @@\n-            assertTrue(failMessage, e instanceof NullPointerException);\n+            assertTrue(e instanceof NullPointerException, failMessage);\n@@ -511,1 +518,1 @@\n-            assertTrue(failMessage, e instanceof NullPointerException);\n+            assertTrue(e instanceof NullPointerException, failMessage);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/stage\/StageTest.java","additions":30,"deletions":23,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,3 +31,4 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertSame;\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n@@ -37,1 +38,2 @@\n-    @Test public void testConstructor() {\n+    @Test\n+    public void testConstructor() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/stage\/WindowEventTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,0 @@\n-import static junit.framework.Assert.assertEquals;\n-import static junit.framework.Assert.assertTrue;\n-import static junit.framework.Assert.assertNotNull;\n@@ -39,3 +36,0 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -51,0 +45,8 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n@@ -55,1 +57,1 @@\n-    @Before\n+    @BeforeEach\n@@ -61,1 +63,1 @@\n-    @After\n+    @AfterEach\n@@ -85,1 +87,2 @@\n-    @Test public void testProperties() {\n+    @Test\n+    public void testProperties() {\n@@ -114,1 +117,2 @@\n-    @Test public void testGetWindowsIsObservable() {\n+    @Test\n+    public void testGetWindowsIsObservable() {\n@@ -141,1 +145,1 @@\n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n@@ -143,2 +147,4 @@\n-        Stage anotherTestWindow = new Stage();\n-        Window.getWindows().add(anotherTestWindow);\n+        assertThrows(UnsupportedOperationException.class, () -> {\n+            Stage anotherTestWindow = new Stage();\n+            Window.getWindows().add(anotherTestWindow);\n+        });\n@@ -147,1 +153,1 @@\n-    @Test(expected = UnsupportedOperationException.class)\n+    @Test\n@@ -149,2 +155,4 @@\n-        testWindow.show();\n-        Window.getWindows().remove(testWindow);\n+        assertThrows(UnsupportedOperationException.class, () -> {\n+            testWindow.show();\n+            Window.getWindows().remove(testWindow);\n+        });\n@@ -155,1 +163,2 @@\n-    @Test public void testGetWindowsIsUnmodifiable_removeNonShowingWindow_emptyList() {\n+    @Test\n+    public void testGetWindowsIsUnmodifiable_removeNonShowingWindow_emptyList() {\n@@ -162,1 +171,2 @@\n-    @Test public void testGetWindowsIsUnmodifiable_removeNonShowingWindow_nonEmptyList() {\n+    @Test\n+    public void testGetWindowsIsUnmodifiable_removeNonShowingWindow_nonEmptyList() {\n@@ -212,1 +222,1 @@\n-    public void testSizeToSceneBeforeShowing() {\n+    public void testSizeToSceneBeforeEachShowing() {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/stage\/WindowTest.java","additions":30,"deletions":20,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,5 @@\n-import org.junit.Test;\n-import org.junit.Assert;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -41,1 +44,1 @@\n-    @Test()\n+    @Test\n@@ -61,1 +64,1 @@\n-        Assert.assertTrue(assertImageIcon(image));\n+        assertTrue(assertImageIcon(image));\n@@ -64,1 +67,2 @@\n-    @Test(timeout=5000)\n+    @Test\n+    @Timeout(value=5000, unit=TimeUnit.MILLISECONDS)\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/rt_5300\/rt_5300Test.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,5 @@\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+\n+import java.util.concurrent.TimeUnit;\n@@ -74,1 +78,2 @@\n-    @Test(timeout=1000)\n+    @Test\n+    @Timeout(value=1000, unit=TimeUnit.MILLISECONDS)\n@@ -91,1 +96,2 @@\n-    @Test(timeout=5000)\n+    @Test\n+    @Timeout(value=5000, unit=TimeUnit.MILLISECONDS)\n@@ -96,1 +102,1 @@\n-                      rndCoord(), rndCoord());\n+                    rndCoord(), rndCoord());\n@@ -103,1 +109,2 @@\n-    @Test(timeout=5000)\n+    @Test\n+    @Timeout(value=5000, unit=TimeUnit.MILLISECONDS)\n@@ -116,1 +123,2 @@\n-    @Test(timeout=5000)\n+    @Test\n+    @Timeout(value=5000, unit=TimeUnit.MILLISECONDS)\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/rt_6334\/rt_6334Test.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,3 @@\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -50,12 +52,14 @@\n-    @Test(expected = RuntimeException.class)\n-    public void specialVarUsedOutsideOfMain() throws Exception {\n-        String s =\n-            \"param sampler img;\\n\" +\n-            \"float myfunc(float val) {\\n\" +\n-            \"    return pos0.x;\\n\" +\n-            \"}\\n\" +\n-            \"void main() {\\n\" +\n-            \"    float foo = pos0.y;\\n\" +\n-            \"    float funcres = myfunc(1.5);\\n\" +\n-            \"}\\n\";\n-        compile(s);\n+    @Test\n+    public void specialVarUsedOutsideOfMain() {\n+        assertThrows(RuntimeException.class, () -> {\n+            String s =\n+                \"param sampler img;\\n\" +\n+                \"float myfunc(float val) {\\n\" +\n+                \"    return pos0.x;\\n\" +\n+                \"}\\n\" +\n+                \"void main() {\\n\" +\n+                \"    float foo = pos0.y;\\n\" +\n+                \"    float funcres = myfunc(1.5);\\n\" +\n+                \"}\\n\";\n+            compile(s);\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/SymbolTest.java","additions":18,"deletions":14,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,2 @@\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n@@ -34,1 +35,1 @@\n-    public void trueLit() throws Exception {\n+    public void trueLit() {\n@@ -39,1 +40,1 @@\n-    public void falseLit() throws Exception {\n+    public void falseLit() {\n@@ -43,1 +44,2 @@\n-    public void notABool() throws Exception {\n+    @Test\n+    public void notABool() {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/lexer\/BoolTest.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,2 @@\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n@@ -34,1 +35,1 @@\n-    public void comment() throws Exception {\n+    public void comment() {\n@@ -39,1 +40,1 @@\n-    public void multilineComment() throws Exception {\n+    public void multilineComment() {\n@@ -44,1 +45,1 @@\n-    public void notAComment() throws Exception {\n+    public void notAComment() {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/lexer\/CommentTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,2 @@\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n@@ -34,1 +35,1 @@\n-    public void uptoOneMillion() throws Exception {\n+    public void uptoOneMillion() {\n@@ -41,1 +42,1 @@\n-    public void noLeadingZero() throws Exception {\n+    public void noLeadingZero() {\n@@ -46,1 +47,1 @@\n-    public void badDigits() throws Exception {\n+    public void badDigits() {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/lexer\/FloatTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,3 @@\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -35,1 +37,1 @@\n-    public void basic() throws Exception {\n+    public void basic() {\n@@ -40,1 +42,1 @@\n-    public void mixedCase() throws Exception {\n+    public void mixedCase() {\n@@ -45,1 +47,1 @@\n-    public void lettersAndDigits() throws Exception {\n+    public void lettersAndDigits() {\n@@ -50,1 +52,1 @@\n-    public void lettersAndDigitsAndSymbols() throws Exception {\n+    public void lettersAndDigitsAndSymbols() {\n@@ -55,1 +57,1 @@\n-    public void notAnId1() throws Exception {\n+    public void notAnId1() {\n@@ -59,3 +61,5 @@\n-    @Test(expected = ParseCancellationException.class)\n-    public void notAnId2() throws Exception {\n-        assertRecognized(\"###\");\n+    @Test\n+    public void notAnId2() {\n+        assertThrows(ParseCancellationException.class, () -> {\n+            assertRecognized(\"###\");\n+        });\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/lexer\/IdentifierTest.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,2 @@\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n@@ -34,1 +35,1 @@\n-    public void uptoOneMillion() throws Exception {\n+    public void uptoOneMillion() {\n@@ -41,1 +42,1 @@\n-    public void badDigits() throws Exception {\n+    public void badDigits() {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/lexer\/IntegerTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,2 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -45,1 +46,1 @@\n-    protected void assertRecognized(char ch) throws Exception {\n+    protected void assertRecognized(char ch) {\n@@ -49,1 +50,1 @@\n-    protected void assertRecognized(String text) throws Exception {\n+    protected void assertRecognized(String text) {\n@@ -58,1 +59,1 @@\n-    protected void assertNotRecognized(char ch) throws Exception {\n+    protected void assertNotRecognized(char ch) {\n@@ -62,1 +63,1 @@\n-    protected void assertNotRecognized(String text) throws Exception {\n+    protected void assertNotRecognized(String text) {\n@@ -66,1 +67,1 @@\n-    protected void assertNotRecognized(String text, String shouldLex) throws Exception {\n+    protected void assertNotRecognized(String text, String shouldLex) {\n@@ -75,1 +76,1 @@\n-    protected Token recognize(String text) throws Exception {\n+    protected Token recognize(String text) {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/lexer\/LexerBase.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,2 @@\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n@@ -34,1 +35,1 @@\n-    public void comment() throws Exception {\n+    public void comment() {\n@@ -39,1 +40,1 @@\n-    public void notAComment() throws Exception {\n+    public void notAComment() {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/lexer\/LineCommentTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,2 @@\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n@@ -34,1 +35,1 @@\n-    public void floatScalar() throws Exception {\n+    public void floatScalar() {\n@@ -39,1 +40,1 @@\n-    public void floatVec2() throws Exception {\n+    public void floatVec2() {\n@@ -44,1 +45,1 @@\n-    public void floatVec3() throws Exception {\n+    public void floatVec3() {\n@@ -49,1 +50,1 @@\n-    public void floatVec4() throws Exception {\n+    public void floatVec4() {\n@@ -54,1 +55,1 @@\n-    public void intScalar() throws Exception {\n+    public void intScalar() {\n@@ -59,1 +60,1 @@\n-    public void intVec2() throws Exception {\n+    public void intVec2() {\n@@ -64,1 +65,1 @@\n-    public void intVec3() throws Exception {\n+    public void intVec3() {\n@@ -69,1 +70,1 @@\n-    public void intVec4() throws Exception {\n+    public void intVec4() {\n@@ -74,1 +75,1 @@\n-    public void boolScalar() throws Exception {\n+    public void boolScalar() {\n@@ -79,1 +80,1 @@\n-    public void boolVec2() throws Exception {\n+    public void boolVec2() {\n@@ -84,1 +85,1 @@\n-    public void boolVec3() throws Exception {\n+    public void boolVec3() {\n@@ -89,1 +90,1 @@\n-    public void boolVec4() throws Exception {\n+    public void boolVec4() {\n@@ -94,1 +95,1 @@\n-    public void sampler() throws Exception {\n+    public void sampler() {\n@@ -99,1 +100,1 @@\n-    public void notAType() throws Exception {\n+    public void notAType() {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/lexer\/TypeTest.java","additions":17,"deletions":16,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -29,1 +29,2 @@\n-import org.junit.Test;\n+\n+import org.junit.jupiter.api.Test;\n@@ -34,1 +35,1 @@\n-    public void tab() throws Exception {\n+    public void tab() {\n@@ -39,1 +40,1 @@\n-    public void space() throws Exception {\n+    public void space() {\n@@ -44,1 +45,1 @@\n-    public void newLine() throws Exception {\n+    public void newLine() {\n@@ -49,1 +50,1 @@\n-    public void carriageReturn() throws Exception {\n+    public void carriageReturn() {\n@@ -54,1 +55,1 @@\n-    public void nonSpace() throws Exception {\n+    public void nonSpace() {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/lexer\/WhitespaceTest.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,3 +32,5 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -40,1 +42,1 @@\n-    @Before\n+    @BeforeEach\n@@ -48,1 +50,1 @@\n-    public void oneAddition() throws Exception {\n+    public void oneAddition() {\n@@ -54,1 +56,1 @@\n-    public void oneSubtraction() throws Exception {\n+    public void oneSubtraction() {\n@@ -60,1 +62,1 @@\n-    public void additiveCombination() throws Exception {\n+    public void additiveCombination() {\n@@ -65,3 +67,5 @@\n-    @Test(expected = ClassCastException.class)\n-    public void notAnAdditiveExpression() throws Exception {\n-        parseTreeFor(mult + \"!\" + mult);\n+    @Test\n+    public void notAnAdditiveExpression() {\n+        assertThrows(ClassCastException.class, () -> {\n+            parseTreeFor(mult + \"!\" + mult);\n+        });\n@@ -70,1 +74,1 @@\n-    private BinaryExpr parseTreeFor(String text) throws Exception {\n+    private BinaryExpr parseTreeFor(String text) {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/parser\/AddExprTest.java","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.junit.Test;\n@@ -42,1 +41,3 @@\n-import static org.junit.Assert.assertEquals;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -47,1 +48,1 @@\n-    public void userVar() throws Exception {\n+    public void userVar() {\n@@ -60,3 +61,5 @@\n-    @Test(expected = RuntimeException.class)\n-    public void userROVar() throws Exception {\n-        BinaryExpr tree = parseTreeFor(\"readonly = 32.0\");\n+    @Test\n+    public void userROVar() {\n+        assertThrows(RuntimeException.class, () -> {\n+            BinaryExpr tree = parseTreeFor(\"readonly = 32.0\");\n+        });\n@@ -66,1 +69,1 @@\n-    public void coreVar() throws Exception {\n+    public void coreVar() {\n@@ -87,1 +90,1 @@\n-    public void coreVarField() throws Exception {\n+    public void coreVarField() {\n@@ -102,3 +105,5 @@\n-    @Test(expected = RuntimeException.class)\n-    public void coreROVar() throws Exception {\n-        parseTreeFor(\"pos0 = float2(1.0)\");\n+    @Test\n+    public void coreROVar() {\n+        assertThrows(RuntimeException.class, () -> {\n+            parseTreeFor(\"pos0 = float2(1.0)\");\n+        });\n@@ -107,3 +112,5 @@\n-    @Test(expected = RuntimeException.class)\n-    public void coreROVarField() throws Exception {\n-        parseTreeFor(\"pos0.x = 1.0\");\n+    @Test\n+    public void coreROVarField() {\n+        assertThrows(RuntimeException.class, () -> {\n+            parseTreeFor(\"pos0.x = 1.0\");\n+        });\n@@ -112,3 +119,5 @@\n-    @Test(expected = ParseCancellationException.class)\n-    public void notAnAssignment() throws Exception {\n-        parseTreeFor(\"const foo\");\n+    @Test\n+    public void notAnAssignment() {\n+        assertThrows(ParseCancellationException.class, () -> {\n+            parseTreeFor(\"const foo\");\n+        });\n@@ -117,1 +126,1 @@\n-    private BinaryExpr parseTreeFor(String text) throws Exception {\n+    private BinaryExpr parseTreeFor(String text) {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/parser\/AssignmentExprTest.java","additions":28,"deletions":19,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.junit.Test;\n@@ -39,1 +38,3 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -44,1 +45,1 @@\n-    public void oneEq() throws Exception {\n+    public void oneEq() {\n@@ -58,1 +59,1 @@\n-    public void oneNotEq() throws Exception {\n+    public void oneNotEq() {\n@@ -71,3 +72,5 @@\n-    @Test(expected = ParseCancellationException.class)\n-    public void notAnEqualityExpression() throws Exception {\n-        parseTreeFor(\"foo @ 3\");\n+    @Test\n+    public void notAnEqualityExpression() {\n+        assertThrows(ParseCancellationException.class, () -> {\n+            parseTreeFor(\"foo @ 3\");\n+        });\n@@ -76,1 +79,1 @@\n-    private BinaryExpr parseTreeFor(String text) throws Exception {\n+    private BinaryExpr parseTreeFor(String text) {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/parser\/EqualityExprTest.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-import org.junit.Test;\n@@ -42,1 +41,6 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -47,1 +51,1 @@\n-    public void declaration() throws Exception {\n+    public void declaration() {\n@@ -60,1 +64,1 @@\n-    public void multiDeclaration() throws Exception {\n+    public void multiDeclaration() {\n@@ -85,1 +89,1 @@\n-    public void funcDefNoParam() throws Exception {\n+    public void funcDefNoParam() {\n@@ -100,1 +104,1 @@\n-    public void funcDefOneParam() throws Exception {\n+    public void funcDefOneParam() {\n@@ -115,1 +119,1 @@\n-    public void funcDefTwoParam() throws Exception {\n+    public void funcDefTwoParam() {\n@@ -129,3 +133,5 @@\n-    @Test(expected = ParseCancellationException.class)\n-    public void notAnExtDecl() throws Exception {\n-        parseTreeFor(\"foo = 4\");\n+    @Test\n+    public void notAnExtDecl() {\n+        assertThrows(ParseCancellationException.class, () -> {\n+            parseTreeFor(\"foo = 4\");\n+        });\n@@ -134,1 +140,1 @@\n-    private List<ExtDecl> parseTreeFor(String text) throws Exception {\n+    private List<ExtDecl> parseTreeFor(String text) {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/parser\/ExternalDeclarationTest.java","additions":18,"deletions":12,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import junit.framework.Assert;\n-import junit.framework.AssertionFailedError;\n@@ -33,1 +31,0 @@\n-import org.junit.Test;\n@@ -35,1 +32,3 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -40,1 +39,1 @@\n-    public void rgba() throws Exception {\n+    public void rgba() {\n@@ -46,1 +45,1 @@\n-    public void rgb() throws Exception {\n+    public void rgb() {\n@@ -52,1 +51,1 @@\n-    public void rg() throws Exception {\n+    public void rg() {\n@@ -58,1 +57,1 @@\n-    public void r() throws Exception {\n+    public void r() {\n@@ -64,1 +63,1 @@\n-    public void aaaa() throws Exception {\n+    public void aaaa() {\n@@ -70,1 +69,1 @@\n-    public void abgr() throws Exception {\n+    public void abgr() {\n@@ -76,1 +75,1 @@\n-    public void xyzw() throws Exception {\n+    public void xyzw() {\n@@ -82,1 +81,1 @@\n-    public void xyz() throws Exception {\n+    public void xyz() {\n@@ -88,1 +87,1 @@\n-    public void xy() throws Exception {\n+    public void xy() {\n@@ -94,1 +93,1 @@\n-    public void x() throws Exception {\n+    public void x() {\n@@ -100,1 +99,1 @@\n-    public void zzz() throws Exception {\n+    public void zzz() {\n@@ -106,1 +105,1 @@\n-    public void wzyz() throws Exception {\n+    public void wzyz() {\n@@ -111,3 +110,5 @@\n-    @Test(expected = ParseCancellationException.class)\n-    public void notAFieldSelection1() throws Exception {\n-        parseTreeFor(\"qpz\");\n+    @Test\n+    public void notAFieldSelection1() {\n+        assertThrows(ParseCancellationException.class, () -> {\n+            parseTreeFor(\"qpz\");\n+        });\n@@ -116,3 +117,5 @@\n-    @Test(expected = AssertionFailedError.class)\n-    public void notAFieldSelection2() throws Exception {\n-        parseTreeFor(\".xqpz\", true);\n+    @Test\n+    public void notAFieldSelection2() {\n+        assertThrows(AssertionFailedError.class, () -> {\n+            parseTreeFor(\".xqpz\", true);\n+        });\n@@ -121,3 +124,5 @@\n-    @Test(expected = AssertionFailedError.class)\n-    public void tooManyVals() throws Exception {\n-        parseTreeFor(\".xyzwx\", true);\n+    @Test\n+    public void tooManyVals() {\n+        assertThrows(AssertionFailedError.class, () -> {\n+            parseTreeFor(\".xyzwx\", true);\n+        });\n@@ -126,3 +131,5 @@\n-    @Test(expected = AssertionFailedError.class)\n-    public void mixedVals() throws Exception {\n-        parseTreeFor(\".xyba\", true);\n+    @Test\n+    public void mixedVals() {\n+        assertThrows(AssertionFailedError.class, () -> {\n+            parseTreeFor(\".xyba\", true);\n+        });\n@@ -131,1 +138,1 @@\n-    private String parseTreeFor(String text) throws Exception {\n+    private String parseTreeFor(String text) {\n@@ -135,1 +142,1 @@\n-    private String parseTreeFor(String text, boolean expectEx) throws Exception {\n+    private String parseTreeFor(String text, boolean expectEx) {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/parser\/FieldSelectTest.java","additions":38,"deletions":31,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,3 +34,5 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -41,1 +43,1 @@\n-    public void unqualified() throws Exception {\n+    public void unqualified() {\n@@ -48,1 +50,1 @@\n-    public void qualified() throws Exception {\n+    public void qualified() {\n@@ -54,3 +56,5 @@\n-    @Test(expected = ParseCancellationException.class)\n-    public void notAFullySpecifiedType() throws Exception {\n-        parseTreeFor(\"double\");\n+    @Test\n+    public void notAFullySpecifiedType() {\n+        assertThrows(ParseCancellationException.class, () -> {\n+            parseTreeFor(\"double\");\n+        });\n@@ -59,1 +63,1 @@\n-    private fully_specified_type_return parseTreeFor(String text) throws Exception {\n+    private fully_specified_type_return parseTreeFor(String text) {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/parser\/FullySpecifiedTypeTest.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-import org.junit.Test;\n@@ -40,1 +39,4 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -45,1 +47,1 @@\n-    public void whileStmt() throws Exception {\n+    public void whileStmt() {\n@@ -54,1 +56,1 @@\n-    public void doWhileStmt() throws Exception {\n+    public void doWhileStmt() {\n@@ -63,1 +65,1 @@\n-    public void forStmt() throws Exception {\n+    public void forStmt() {\n@@ -74,1 +76,1 @@\n-    public void forStmtNoCondition() throws Exception {\n+    public void forStmtNoCondition() {\n@@ -85,1 +87,1 @@\n-    public void forStmtNoIncrement() throws Exception {\n+    public void forStmtNoIncrement() {\n@@ -96,1 +98,1 @@\n-    public void forStmtNoConditionOrIncrement() throws Exception {\n+    public void forStmtNoConditionOrIncrement() {\n@@ -106,3 +108,5 @@\n-    @Test(expected = ParseCancellationException.class)\n-    public void notAnIterationStmt() throws Exception {\n-        parseTreeFor(\"return;\");\n+    @Test\n+    public void notAnIterationStmt() {\n+        assertThrows(ParseCancellationException.class, () -> {\n+            parseTreeFor(\"return;\");\n+        });\n@@ -111,1 +115,1 @@\n-    private Stmt parseTreeFor(String text) throws Exception {\n+    private Stmt parseTreeFor(String text) {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/parser\/IterationStatementTest.java","additions":17,"deletions":13,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,4 +37,6 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -45,1 +47,1 @@\n-    public void cont() throws Exception {\n+    public void cont() {\n@@ -51,1 +53,1 @@\n-    public void brk() throws Exception {\n+    public void brk() {\n@@ -57,1 +59,1 @@\n-    public void discard() throws Exception {\n+    public void discard() {\n@@ -63,1 +65,1 @@\n-    public void returnEmpty() throws Exception {\n+    public void returnEmpty() {\n@@ -70,1 +72,1 @@\n-    public void returnExpr() throws Exception {\n+    public void returnExpr() {\n@@ -79,3 +81,5 @@\n-    @Test(expected = ParseCancellationException.class)\n-    public void notAJump() throws Exception {\n-        parseTreeFor(\"float;\");\n+    @Test\n+    public void notAJump() {\n+        assertThrows(ParseCancellationException.class, () -> {\n+            parseTreeFor(\"float;\");\n+        });\n@@ -84,1 +88,1 @@\n-    private Stmt parseTreeFor(String text) throws Exception {\n+    private Stmt parseTreeFor(String text) {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/parser\/JumpStatementTest.java","additions":18,"deletions":14,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,3 +33,5 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -41,1 +43,1 @@\n-    @Before\n+    @BeforeEach\n@@ -49,1 +51,1 @@\n-    public void oneMultiplication() throws Exception {\n+    public void oneMultiplication() {\n@@ -55,1 +57,1 @@\n-    public void oneDivision() throws Exception {\n+    public void oneDivision() {\n@@ -61,1 +63,1 @@\n-    public void expressionCombination() throws Exception {\n+    public void expressionCombination() {\n@@ -66,3 +68,5 @@\n-    @Test(expected = ClassCastException.class)\n-    public void notAMultiplicativeExpression() throws Exception {\n-        parseTreeFor(\"3 + 3\");\n+    @Test\n+    public void notAMultiplicativeExpression() {\n+        assertThrows(ClassCastException.class, () -> {\n+            parseTreeFor(\"3 + 3\");\n+        });\n@@ -71,1 +75,1 @@\n-    private BinaryExpr parseTreeFor(String text) throws Exception {\n+    private BinaryExpr parseTreeFor(String text) {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/parser\/MultExprTest.java","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,0 @@\n-import org.junit.Before;\n-import org.junit.Test;\n@@ -38,2 +36,6 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -51,1 +53,1 @@\n-    public void variable() throws Exception {\n+    public void variable() {\n@@ -58,1 +60,1 @@\n-    public void intLiteral() throws Exception {\n+    public void intLiteral() {\n@@ -65,1 +67,1 @@\n-    public void floatLiteral() throws Exception {\n+    public void floatLiteral() {\n@@ -72,1 +74,1 @@\n-    public void boolLiteralT() throws Exception {\n+    public void boolLiteralT() {\n@@ -79,1 +81,1 @@\n-    public void boolLiteralF() throws Exception {\n+    public void boolLiteralF() {\n@@ -86,1 +88,1 @@\n-    public void bracketted() throws Exception {\n+    public void bracketted() {\n@@ -90,3 +92,5 @@\n-    @Test(expected = ParseCancellationException.class)\n-    public void notAPrimaryExpression() throws Exception {\n-        parseTreeFor(\"!(@&#\");\n+    @Test\n+    public void notAPrimaryExpression() {\n+        assertThrows(ParseCancellationException.class, () -> {\n+            parseTreeFor(\"!(@&#\");\n+        });\n@@ -95,1 +99,1 @@\n-    private Expr parseTreeFor(String text) throws Exception {\n+    private Expr parseTreeFor(String text) {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/parser\/PrimaryExprTest.java","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import org.junit.Test;\n@@ -36,1 +35,3 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -41,1 +42,1 @@\n-    public void oneLtEq() throws Exception {\n+    public void oneLtEq() {\n@@ -47,1 +48,1 @@\n-    public void oneGtEq() throws Exception {\n+    public void oneGtEq() {\n@@ -53,1 +54,1 @@\n-    public void oneLt() throws Exception {\n+    public void oneLt() {\n@@ -59,1 +60,1 @@\n-    public void oneGt() throws Exception {\n+    public void oneGt() {\n@@ -64,3 +65,5 @@\n-    @Test(expected = ParseCancellationException.class)\n-    public void notARelationalExpression() throws Exception {\n-        parseTreeFor(\"foo @ 3\");\n+    @Test\n+    public void notARelationalExpression() {\n+        assertThrows(ParseCancellationException.class, () -> {\n+            parseTreeFor(\"foo @ 3\");\n+        });\n@@ -69,1 +72,1 @@\n-    private BinaryExpr parseTreeFor(String text) throws Exception {\n+    private BinaryExpr parseTreeFor(String text) {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/parser\/RelationalExprTest.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import org.junit.Test;\n@@ -38,1 +37,4 @@\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -43,1 +45,1 @@\n-    public void ifOnly() throws Exception {\n+    public void ifOnly() {\n@@ -53,1 +55,1 @@\n-    public void ifAndElse() throws Exception {\n+    public void ifAndElse() {\n@@ -62,3 +64,5 @@\n-    @Test(expected = ParseCancellationException.class)\n-    public void notASelect() throws Exception {\n-        parseTreeFor(\"then (so) { bobs yer uncle }\");\n+    @Test\n+    public void notASelect() {\n+        assertThrows(ParseCancellationException.class, () -> {\n+            parseTreeFor(\"then (so) { bobs yer uncle }\");\n+        });\n@@ -67,1 +71,1 @@\n-    private Stmt parseTreeFor(String text) throws Exception {\n+    private Stmt parseTreeFor(String text) {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/parser\/SelectionStatementTest.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,3 +36,5 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -44,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n@@ -52,1 +54,1 @@\n-    public void negated() throws Exception {\n+    public void negated() {\n@@ -59,1 +61,1 @@\n-    public void positive() throws Exception {\n+    public void positive() {\n@@ -66,1 +68,1 @@\n-    public void negative() throws Exception {\n+    public void negative() {\n@@ -73,1 +75,1 @@\n-    public void preIncrement() throws Exception {\n+    public void preIncrement() {\n@@ -80,1 +82,1 @@\n-    public void preDecrement() throws Exception {\n+    public void preDecrement() {\n@@ -87,1 +89,1 @@\n-    public void postIncrement() throws Exception {\n+    public void postIncrement() {\n@@ -94,1 +96,1 @@\n-    public void postDecrement() throws Exception {\n+    public void postDecrement() {\n@@ -100,3 +102,5 @@\n-    @Test(expected = ParseCancellationException.class)\n-    public void notAUnaryExpression() throws Exception {\n-        parseTreeFor(\"^\" + primary);\n+    @Test\n+    public void notAUnaryExpression() {\n+        assertThrows(ParseCancellationException.class, () -> {\n+            parseTreeFor(\"^\" + primary);\n+        });\n@@ -105,1 +109,1 @@\n-    private UnaryExpr parseTreeFor(String text) throws Exception {\n+    private UnaryExpr parseTreeFor(String text) {\n","filename":"modules\/javafx.graphics\/src\/test\/jslc\/com\/sun\/scenario\/effect\/compiler\/parser\/UnaryExprTest.java","additions":20,"deletions":16,"binary":false,"changes":36,"status":"modified"}]}