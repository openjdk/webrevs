{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -685,4 +685,2 @@\n-        double headerTextWidth = Utils.computeTextWidth(header.label.getFont(), tc.getText(), -1);\n-        Node graphic = header.label.getGraphic();\n-        double headerGraphicWidth = graphic == null ? 0 : graphic.prefWidth(-1) + header.label.getGraphicTextGap();\n-        double headerWidth = headerTextWidth + headerGraphicWidth + 10 + header.snappedLeftInset() + header.snappedRightInset();\n+        header.applyCss();\n+        double headerWidth = header.label.prefWidth(-1) + 10;\n@@ -783,4 +781,2 @@\n-        double headerTextWidth = Utils.computeTextWidth(header.label.getFont(), tc.getText(), -1);\n-        Node graphic = header.label.getGraphic();\n-        double headerGraphicWidth = graphic == null ? 0 : graphic.prefWidth(-1) + header.label.getGraphicTextGap();\n-        double headerWidth = headerTextWidth + headerGraphicWidth + 10 + header.snappedLeftInset() + header.snappedRightInset();\n+        header.applyCss();\n+        double headerWidth = header.label.prefWidth(-1) + 10;\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableColumnHeader.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import javafx.scene.control.Label;\n@@ -67,0 +68,4 @@\n+\n+    public static Label getLabel(TableColumnHeader tableColumnHeader) {\n+        return tableColumnHeader.label;\n+    }\n","filename":"modules\/javafx.controls\/src\/shims\/java\/javafx\/scene\/control\/skin\/TableColumnHeaderShim.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -537,2 +537,2 @@\n-                        xAxis.getValueForDisplay(lineTo.getX()).doubleValue(),\n-                        yAxis.getValueForDisplay(lineTo.getY()).doubleValue())\n+                        Math.round(xAxis.getValueForDisplay(lineTo.getX()).doubleValue()),\n+                        Math.round(yAxis.getValueForDisplay(lineTo.getY()).doubleValue()))\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/AreaChartTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,1 +111,1 @@\n-        assertEquals(\"10 478 234 37 254 432 234 83 499 375 234 140 \", bounds);\n+        assertEquals(\"10 453 218 35 238 409 218 79 465 355 218 133 \", bounds);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/StackedBarChartTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -153,1 +153,3 @@\n-        textInput.setStyle(\"-fx-font: 24 Helvetica\");\n+        assertEquals(Font.font(\"System\", 12), textInput.getFont());\n+\n+        textInput.setStyle(\"-fx-font: 24 Amble\");\n@@ -156,1 +158,1 @@\n-        assertEquals(Font.font(\"Helvetica\", 24), textInput.getFont());\n+        assertEquals(Font.font(\"Amble\", 24), textInput.getFont());\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TextInputControlTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+import javafx.scene.control.ContentDisplay;\n+import javafx.scene.control.Label;\n@@ -35,0 +37,1 @@\n+import javafx.scene.control.TableColumnBase;\n@@ -43,0 +46,1 @@\n+import javafx.scene.text.Text;\n@@ -85,2 +89,0 @@\n-        \/\/Force the column to have default font, otherwise font Amble is applied and mess with header width size\n-        column.setStyle(\"-fx-font: System;\");\n@@ -261,1 +263,3 @@\n-    \/** Row style must affect the required column width *\/\n+    \/**\n+     * Row style must affect the required column width\n+     *\/\n@@ -275,1 +279,3 @@\n-    \/** Test resizeColumnToFitContent in the presence of a non-standard row skin *\/\n+    \/**\n+     * Test resizeColumnToFitContent in the presence of a non-standard row skin\n+     *\/\n@@ -286,0 +292,68 @@\n+    @Test\n+    public void testResizeColumnToFitContentCssIsApplied() {\n+        Label label = TableColumnHeaderShim.getLabel(firstColumnHeader);\n+        label.setStyle(\"-fx-font-size: 24px;\");\n+        firstColumnHeader.getTableColumn().setText(\"longlonglonglong\");\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        assertEquals(24, label.getFont().getSize(), 0);\n+    }\n+\n+    @Test\n+    public void testResizeColumnToFitContentWithGraphicText() {\n+        TableColumnBase<?, ?> tableColumn = firstColumnHeader.getTableColumn();\n+\n+        tableColumn.setText(\"longlonglonglonglonglonglonglong\");\n+        tableColumn.setGraphic(new Text(\"longlonglonglong\"));\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double widthWithGraphic = tableColumn.getWidth();\n+\n+        tableColumn.setGraphic(null);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double width = tableColumn.getWidth();\n+\n+        assertTrue(widthWithGraphic > width);\n+    }\n+\n+    @Test\n+    public void testResizeColumnToFitContentWithGraphicLabel() {\n+        TableColumnBase<?, ?> tableColumn = firstColumnHeader.getTableColumn();\n+\n+        tableColumn.setText(\"longlonglonglonglonglonglonglong\");\n+        tableColumn.setGraphic(new Label(\"longlonglonglong\"));\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double widthWithGraphic = tableColumn.getWidth();\n+\n+        tableColumn.setGraphic(null);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double width = tableColumn.getWidth();\n+\n+        assertTrue(widthWithGraphic > width);\n+    }\n+\n+    @Test\n+    public void testResizeColumnToFitContentWithGraphicAlignment() {\n+        TableColumnBase<?, ?> tableColumn = firstColumnHeader.getTableColumn();\n+\n+        tableColumn.setText(\"longlonglonglonglonglonglonglong\");\n+        tableColumn.setGraphic(new Text(\"longlonglonglong\"));\n+\n+        Label label = TableColumnHeaderShim.getLabel(firstColumnHeader);\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double widthWithGraphic = tableColumn.getWidth();\n+\n+        label.setContentDisplay(ContentDisplay.BOTTOM);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double width = tableColumn.getWidth();\n+\n+        assertTrue(widthWithGraphic > width);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TableColumnHeaderTest.java","additions":79,"deletions":5,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -0,0 +1,408 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.skin;\n+\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.event.Event;\n+import javafx.scene.Node;\n+import javafx.scene.control.ContentDisplay;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Skin;\n+import javafx.scene.control.TableColumnBase;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTableRow;\n+import javafx.scene.control.TreeTableView;\n+import javafx.scene.control.cell.TreeItemPropertyValueFactory;\n+import javafx.scene.control.skin.TableColumnHeader;\n+import javafx.scene.control.skin.TableColumnHeaderShim;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.text.Text;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n+import test.com.sun.javafx.scene.control.test.Person;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class TableColumnHeaderTreeTableTest {\n+\n+    private TableColumnHeader firstColumnHeader;\n+    private TreeTableView<Person> tableView;\n+    private StageLoader sl;\n+    private static String NAME0 = \"Humphrey McPhee\";\n+    private static String NAME1 = \"Justice Caldwell\";\n+    private static String NAME2 = \"Orrin Davies\";\n+    private static String NAME3 = \"Emma Wilson\";\n+\n+    @Before\n+    public void before() {\n+        ObservableList<Person> model = FXCollections.observableArrayList(\n+                new Person(NAME0, 76),\n+                new Person(NAME1, 30),\n+                new Person(NAME2, 30),\n+                new Person(NAME3, 8)\n+        );\n+        TreeTableColumn<Person, String> column = new TreeTableColumn<>(\"Col \");\n+        column.setCellValueFactory(new TreeItemPropertyValueFactory<Person, String>(\"firstName\"));\n+\n+        TreeItem<Person> root = new TreeItem<>();\n+        for (Person person : model) {\n+            root.getChildren().add(new TreeItem<>(person));\n+        }\n+\n+        tableView = new TreeTableView<>(root);\n+        tableView.setShowRoot(false);\n+\n+        tableView.getColumns().add(column);\n+\n+        sl = new StageLoader(tableView);\n+        Toolkit tk = Toolkit.getToolkit();\n+\n+        tk.firePulse();\n+        firstColumnHeader = VirtualFlowTestUtils.getTableColumnHeader(tableView, column);\n+    }\n+\n+    @After\n+    public void after() {\n+        sl.dispose();\n+    }\n+\n+    \/**\n+     * When a right click is done on a table column header, the column drag lock should be set to true in the\n+     * pressed handler, but eventually to false again in the released handler.<br>\n+     * By that we guarantee, that the column resizing still works.\n+     *\/\n+    @Test\n+    public void testColumnRightClickDoesAllowResizing() {\n+        MouseEventFirer firer = new MouseEventFirer(firstColumnHeader);\n+\n+        assertFalse(TableColumnHeaderShim.getTableHeaderRowColumnDragLock(firstColumnHeader));\n+\n+        firer.fireMousePressed(MouseButton.SECONDARY);\n+        assertTrue(TableColumnHeaderShim.getTableHeaderRowColumnDragLock(firstColumnHeader));\n+\n+        firer.fireMouseReleased(MouseButton.SECONDARY);\n+        assertFalse(TableColumnHeaderShim.getTableHeaderRowColumnDragLock(firstColumnHeader));\n+    }\n+\n+    \/**\n+     * When a right click is done on a table column header and consumed by a self added event handler, the column\n+     * drag lock should be set to true in the pressed handler, but still to false again in the released handler.<br>\n+     * By that we guarantee, that the column resizing still works.\n+     *\/\n+    @Test\n+    public void testColumnRightClickDoesAllowResizingWhenConsumed() {\n+        firstColumnHeader.addEventHandler(MouseEvent.MOUSE_RELEASED, Event::consume);\n+\n+        MouseEventFirer firer = new MouseEventFirer(firstColumnHeader);\n+\n+        assertFalse(TableColumnHeaderShim.getTableHeaderRowColumnDragLock(firstColumnHeader));\n+\n+        firer.fireMousePressed(MouseButton.SECONDARY);\n+        assertTrue(TableColumnHeaderShim.getTableHeaderRowColumnDragLock(firstColumnHeader));\n+\n+        firer.fireMouseReleased(MouseButton.SECONDARY);\n+        assertFalse(TableColumnHeaderShim.getTableHeaderRowColumnDragLock(firstColumnHeader));\n+    }\n+\n+    \/**\n+     * @test\n+     * @bug 8207957\n+     * Resize the column header without modifications\n+     *\/\n+    @Test\n+    public void test_resizeColumnToFitContent() {\n+        TreeTableColumn column = tableView.getColumns().get(0);\n+        double width = column.getWidth();\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        assertEquals(\"Width must be the same\",\n+                width, column.getWidth(), 0.001);\n+    }\n+\n+    \/**\n+     * @test\n+     * @bug 8207957\n+     * Resize the column header with first column increase\n+     *\/\n+    @Test\n+    public void test_resizeColumnToFitContentIncrease() {\n+        TreeTableColumn column = tableView.getColumns().get(0);\n+        double width = column.getWidth();\n+\n+        tableView.getRoot().getChildren().get(0).getValue().setFirstName(\"This is a big text inside that column\");\n+\n+        assertEquals(\"Width must be the same\",\n+                width, column.getWidth(), 0.001);\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+        assertTrue(\"Column width must be greater\",\n+                width < column.getWidth());\n+\n+        \/\/Back to initial value\n+        tableView.getRoot().getChildren().get(0).getValue().setFirstName(NAME0);\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+        assertEquals(\"Width must be equal to initial value\",\n+                width, column.getWidth(), 0.001);\n+    }\n+\n+    \/**\n+     * @test\n+     * @bug 8207957\n+     * Resize the column header with first column decrease\n+     *\/\n+    @Test\n+    public void test_resizeColumnToFitContentDecrease() {\n+        TreeTableColumn column = tableView.getColumns().get(0);\n+        double width = column.getWidth();\n+\n+        tableView.getRoot().getChildren().get(0).getValue().setFirstName(\"small\");\n+        tableView.getRoot().getChildren().get(1).getValue().setFirstName(\"small\");\n+        tableView.getRoot().getChildren().get(2).getValue().setFirstName(\"small\");\n+        tableView.getRoot().getChildren().get(3).getValue().setFirstName(\"small\");\n+\n+        assertEquals(\"Width must be the same\",\n+                width, column.getWidth(), 0.001);\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+        assertTrue(\"Column width must be smaller\",\n+                width > column.getWidth());\n+\n+        \/\/Back to initial value\n+        tableView.getRoot().getChildren().get(0).getValue().setFirstName(NAME0);\n+        tableView.getRoot().getChildren().get(1).getValue().setFirstName(NAME1);\n+        tableView.getRoot().getChildren().get(2).getValue().setFirstName(NAME2);\n+        tableView.getRoot().getChildren().get(3).getValue().setFirstName(NAME3);\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+        assertEquals(\"Width must be equal to initial value\",\n+                width, column.getWidth(), 0.001);\n+    }\n+\n+    \/**\n+     * @test\n+     * @bug 8207957\n+     * Resize the column header itself\n+     *\/\n+    @Test\n+    public void test_resizeColumnToFitContentHeader() {\n+        TreeTableColumn column = tableView.getColumns().get(0);\n+        double width = column.getWidth();\n+\n+        column.setText(\"This is a big text inside that column\");\n+\n+        assertEquals(\"Width must be the same\",\n+                width, column.getWidth(), 0.001);\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+        assertTrue(\"Column width must be greater\",\n+                width < column.getWidth());\n+\n+        \/\/Back to initial value\n+        column.setText(\"Col\");\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, 3);\n+        assertEquals(\"Width must be equal to initial value\",\n+                width, column.getWidth(), 0.001);\n+    }\n+\n+    \/**\n+     * @test\n+     * @bug 8207957\n+     * Resize the column header with only 3 first rows\n+     *\/\n+    @Test\n+    public void test_resizeColumnToFitContentMaxRow() {\n+        TreeTableColumn column = tableView.getColumns().get(0);\n+        double width = column.getWidth();\n+\n+        tableView.getRoot().getChildren().get(3).getValue().setFirstName(\"This is a big text inside that column\");\n+\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, 3);\n+        assertEquals(\"Width must be the same\",\n+                width, column.getWidth(), 0.001);\n+\n+\n+        \/\/Back to initial value\n+        tableView.getRoot().getChildren().get(3).getValue().setFirstName(NAME3);\n+\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, 3);\n+        assertEquals(\"Width must be equal to initial value\",\n+                width, column.getWidth(), 0.001);\n+    }\n+\n+    \/** Row style must affect the required column width *\/\n+    @Test\n+    public void test_resizeColumnToFitContentRowStyle() {\n+        TreeTableColumn column = tableView.getColumns().get(0);\n+\n+        tableView.setRowFactory(this::createSmallRow);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+        double width = column.getWidth();\n+\n+        tableView.setRowFactory(this::createLargeRow);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+        assertTrue(\"Column width must be greater\", width < column.getWidth());\n+    }\n+\n+    \/** Test resizeColumnToFitContent in the presence of a non-standard row skin *\/\n+    @Test\n+    public void test_resizeColumnToFitContentCustomRowSkin() {\n+        TreeTableColumn column = tableView.getColumns().get(0);\n+\n+        tableView.setRowFactory(this::createCustomRow);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+        double width = column.getWidth();\n+        assertTrue(width > 0);\n+    }\n+\n+    @Test\n+    public void testResizeColumnToFitContentCssIsApplied() {\n+        Label label = TableColumnHeaderShim.getLabel(firstColumnHeader);\n+        label.setStyle(\"-fx-font-size: 24px;\");\n+        firstColumnHeader.getTableColumn().setText(\"longlonglonglong\");\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        assertEquals(24, label.getFont().getSize(), 0);\n+    }\n+\n+    @Test\n+    public void testResizeColumnToFitContentWithGraphicText() {\n+        TableColumnBase<?, ?> tableColumn = firstColumnHeader.getTableColumn();\n+\n+        tableColumn.setText(\"longlonglonglonglonglonglonglong\");\n+        tableColumn.setGraphic(new Text(\"longlonglonglong\"));\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double widthWithGraphic = tableColumn.getWidth();\n+\n+        tableColumn.setGraphic(null);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double width = tableColumn.getWidth();\n+\n+        assertTrue(widthWithGraphic > width);\n+    }\n+\n+    @Test\n+    public void testResizeColumnToFitContentWithGraphicLabel() {\n+        TableColumnBase<?, ?> tableColumn = firstColumnHeader.getTableColumn();\n+\n+        tableColumn.setText(\"longlonglonglonglonglonglonglong\");\n+        tableColumn.setGraphic(new Label(\"longlonglonglong\"));\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double widthWithGraphic = tableColumn.getWidth();\n+\n+        tableColumn.setGraphic(null);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double width = tableColumn.getWidth();\n+\n+        assertTrue(widthWithGraphic > width);\n+    }\n+\n+    @Test\n+    public void testResizeColumnToFitContentWithGraphicAlignment() {\n+        TableColumnBase<?, ?> tableColumn = firstColumnHeader.getTableColumn();\n+\n+        tableColumn.setText(\"longlonglonglonglonglonglonglong\");\n+        tableColumn.setGraphic(new Text(\"longlonglonglong\"));\n+\n+        Label label = TableColumnHeaderShim.getLabel(firstColumnHeader);\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double widthWithGraphic = tableColumn.getWidth();\n+\n+        label.setContentDisplay(ContentDisplay.BOTTOM);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double width = tableColumn.getWidth();\n+\n+        assertTrue(widthWithGraphic > width);\n+    }\n+\n+    private TreeTableRow<Person> createCustomRow(TreeTableView<Person> tableView) {\n+        TreeTableRow<Person> row = new TreeTableRow<>() {\n+            protected Skin<?> createDefaultSkin() {\n+                return new CustomSkin(this);\n+            }\n+        };\n+        return row;\n+    }\n+\n+    private static class CustomSkin implements Skin<TreeTableRow<?>> {\n+\n+        private TreeTableRow<?> row;\n+        private Node node = new HBox();\n+\n+        CustomSkin(TreeTableRow<?> row) {\n+            this.row = row;\n+        }\n+\n+        @Override\n+        public TreeTableRow<?> getSkinnable() {\n+            return row;\n+        }\n+\n+        @Override\n+        public Node getNode() {\n+            return node;\n+        }\n+\n+        @Override\n+        public void dispose() {\n+            node = null;\n+        }\n+    }\n+\n+    private TreeTableRow<Person> createSmallRow(TreeTableView<Person> tableView) {\n+        TreeTableRow<Person> row = new TreeTableRow<>();\n+        row.setStyle(\"-fx-font: 24 Amble\");\n+        return row;\n+    }\n+\n+    private TreeTableRow<Person> createLargeRow(TreeTableView<Person> param) {\n+        TreeTableRow<Person> row = new TreeTableRow<>();\n+        row.setStyle(\"-fx-font: 48 Amble\");\n+        return row;\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TableColumnHeaderTreeTableTest.java","additions":408,"deletions":0,"binary":false,"changes":408,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-        if (name.equals(\"system\") || name.equals(\"system regular\")) {\n+        if (name.equals(\"system regular\")) {\n@@ -53,0 +53,6 @@\n+        } else if (name.equals(\"system bold\")) {\n+            FontHelper.setNativeFont(font, nativeFont, font.getName(), \"System\", \"Bold\");\n+        } else if (name.equals(\"system italic\")) {\n+            FontHelper.setNativeFont(font, nativeFont, font.getName(), \"System\", \"Italic\");\n+        } else if (name.equals(\"system bold italic\")) {\n+            FontHelper.setNativeFont(font, nativeFont, font.getName(), \"System\", \"Bold Italic\");\n@@ -86,1 +92,1 @@\n-        return Arrays.asList(\"Amble\", \"Amble Cn\", \"Amble Lt\", \"Amble LtCn\");\n+        return Arrays.asList(\"System\", \"Amble\", \"Amble Cn\", \"Amble Lt\", \"Amble LtCn\");\n@@ -91,5 +97,4 @@\n-        return Arrays.asList(\"Amble Regular\", \"Amble Bold\", \"Amble Italic\",\n-                \"Amble Bold Italic\", \"Amble Condensed\", \"Amble Bold Condensed\",\n-                \"Amble Condensed Italic\", \"Amble Bold Condensed Italic\",\n-                \"Amble Light\", \"Amble Light Italic\", \"Amble Light Condensed\",\n-                \"Amble Light Condensed Italic\");\n+        return Arrays.asList(\"System Regular\", \"System Bold\", \"System Italic\", \"System Bold Italic\",\n+                \"Amble Regular\", \"Amble Bold\", \"Amble Italic\", \"Amble Bold Italic\",\n+                \"Amble Condensed\", \"Amble Bold Condensed\", \"Amble Condensed Italic\", \"Amble Bold Condensed Italic\",\n+                \"Amble Light\", \"Amble Light Italic\", \"Amble Light Condensed\", \"Amble Light Condensed Italic\");\n@@ -101,0 +106,4 @@\n+        if (\"system\".equals(lower)) {\n+            return List.of(\"System Regular\", \"System Bold\", \"System Italic\", \"System Bold Italic\");\n+        }\n+\n@@ -102,2 +111,1 @@\n-            return Arrays.asList(\"Amble Regular\", \"Amble Bold\", \"Amble Italic\",\n-                    \"Amble Bold Italic\");\n+            return Arrays.asList(\"Amble Regular\", \"Amble Bold\", \"Amble Italic\", \"Amble Bold Italic\");\n@@ -105,2 +113,1 @@\n-            return Arrays.asList(\"Amble Condensed\", \"Amble Bold Condensed\",\n-                    \"Amble Condensed Italic\", \"Amble Bold Condensed Italic\");\n+            return Arrays.asList(\"Amble Condensed\", \"Amble Bold Condensed\", \"Amble Condensed Italic\", \"Amble Bold Condensed Italic\");\n@@ -110,2 +117,1 @@\n-            return Arrays.asList(\"Amble Light Condensed\",\n-                    \"Amble Light Condensed Italic\");\n+            return Arrays.asList(\"Amble Light Condensed\", \"Amble Light Condensed Italic\");\n@@ -122,2 +128,8 @@\n-        String name = \"\";\n-        if (\"amble\".equals(fam)) {\n+        String name;\n+        if (\"system\".equals(fam)) {\n+            name = \"System\";\n+        } else {\n+            name = \"Amble\";\n+        }\n+\n+        if (\"amble\".equals(fam) || \"system\".equals(fam)) {\n@@ -165,2 +177,1 @@\n-        String fn = \"Amble\" + name;\n-        return new Font(fn, size);\n+        return new Font(name, size);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubFontLoader.java","additions":29,"deletions":18,"binary":false,"changes":47,"status":"modified"}]}