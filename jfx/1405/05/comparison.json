{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -685,4 +685,2 @@\n-        double headerTextWidth = Utils.computeTextWidth(header.label.getFont(), tc.getText(), -1);\n-        Node graphic = header.label.getGraphic();\n-        double headerGraphicWidth = graphic == null ? 0 : graphic.prefWidth(-1) + header.label.getGraphicTextGap();\n-        double headerWidth = headerTextWidth + headerGraphicWidth + 10 + header.snappedLeftInset() + header.snappedRightInset();\n+        header.applyCss();\n+        double headerWidth = header.label.prefWidth(-1) + 10;\n@@ -783,4 +781,2 @@\n-        double headerTextWidth = Utils.computeTextWidth(header.label.getFont(), tc.getText(), -1);\n-        Node graphic = header.label.getGraphic();\n-        double headerGraphicWidth = graphic == null ? 0 : graphic.prefWidth(-1) + header.label.getGraphicTextGap();\n-        double headerWidth = headerTextWidth + headerGraphicWidth + 10 + header.snappedLeftInset() + header.snappedRightInset();\n+        header.applyCss();\n+        double headerWidth = header.label.prefWidth(-1) + 10;\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableColumnHeader.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import javafx.scene.control.Label;\n@@ -67,0 +68,4 @@\n+\n+    public static Label getLabel(TableColumnHeader tableColumnHeader) {\n+        return tableColumnHeader.label;\n+    }\n","filename":"modules\/javafx.controls\/src\/shims\/java\/javafx\/scene\/control\/skin\/TableColumnHeaderShim.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import javafx.scene.control.ContentDisplay;\n+import javafx.scene.control.Label;\n@@ -35,0 +37,1 @@\n+import javafx.scene.control.TableColumnBase;\n@@ -43,0 +46,1 @@\n+import javafx.scene.text.Text;\n@@ -284,0 +288,84 @@\n+    \/**\n+     * We expect that the css of the label is processed after the resizing took place,\n+     * since it is needed to correctly measure the size.\n+     *\/\n+    @Test\n+    public void testResizeColumnToFitContentCssIsApplied() {\n+        Label label = TableColumnHeaderShim.getLabel(firstColumnHeader);\n+        label.setStyle(\"-fx-font-size: 24px;\");\n+        firstColumnHeader.getTableColumn().setText(\"longlonglonglong\");\n+\n+        assertEquals(12, label.getFont().getSize(), 0);\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        assertEquals(24, label.getFont().getSize(), 0);\n+    }\n+\n+    \/**\n+     * A table column with a graphic {@link Text} should be bigger than without.\n+     *\/\n+    @Test\n+    public void testResizeColumnToFitContentWithGraphicText() {\n+        TableColumnBase<?, ?> tableColumn = firstColumnHeader.getTableColumn();\n+\n+        tableColumn.setText(\"longlonglonglonglonglonglonglong\");\n+        tableColumn.setGraphic(new Text(\"longlonglonglong\"));\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double widthWithGraphic = tableColumn.getWidth();\n+\n+        tableColumn.setGraphic(null);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double width = tableColumn.getWidth();\n+\n+        assertTrue(widthWithGraphic > width);\n+    }\n+\n+    \/**\n+     * A table column with a graphic {@link Label} should be bigger than without.\n+     *\/\n+    @Test\n+    public void testResizeColumnToFitContentWithGraphicLabel() {\n+        TableColumnBase<?, ?> tableColumn = firstColumnHeader.getTableColumn();\n+\n+        tableColumn.setText(\"longlonglonglonglonglonglonglong\");\n+        tableColumn.setGraphic(new Label(\"longlonglonglong\"));\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double widthWithGraphic = tableColumn.getWidth();\n+\n+        tableColumn.setGraphic(null);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double width = tableColumn.getWidth();\n+\n+        assertTrue(widthWithGraphic > width);\n+    }\n+\n+    \/**\n+     * The content display should also be taken into consideration when measuring the width.\n+     * See also: <a href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8186188\">JDK-8186188<\/a>\n+     *\/\n+    @Test\n+    public void testResizeColumnToFitContentWithGraphicAlignment() {\n+        TableColumnBase<?, ?> tableColumn = firstColumnHeader.getTableColumn();\n+\n+        tableColumn.setText(\"longlonglonglonglonglonglonglong\");\n+        tableColumn.setGraphic(new Text(\"longlonglonglong\"));\n+\n+        Label label = TableColumnHeaderShim.getLabel(firstColumnHeader);\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double widthWithGraphic = tableColumn.getWidth();\n+\n+        label.setContentDisplay(ContentDisplay.BOTTOM);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double width = tableColumn.getWidth();\n+\n+        assertTrue(widthWithGraphic > width);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TableColumnHeaderTest.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -0,0 +1,412 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.control.skin;\n+\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.event.Event;\n+import javafx.scene.Node;\n+import javafx.scene.control.ContentDisplay;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Skin;\n+import javafx.scene.control.TableColumnBase;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTableRow;\n+import javafx.scene.control.TreeTableView;\n+import javafx.scene.control.cell.TreeItemPropertyValueFactory;\n+import javafx.scene.control.skin.TableColumnHeader;\n+import javafx.scene.control.skin.TableColumnHeaderShim;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.text.Text;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventFirer;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+import test.com.sun.javafx.scene.control.infrastructure.VirtualFlowTestUtils;\n+import test.com.sun.javafx.scene.control.test.Person;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class TableColumnHeaderTreeTableTest {\n+\n+    private TableColumnHeader firstColumnHeader;\n+    private TreeTableView<Person> tableView;\n+    private StageLoader sl;\n+    private static String NAME0 = \"Humphrey McPhee\";\n+    private static String NAME1 = \"Justice Caldwell\";\n+    private static String NAME2 = \"Orrin Davies\";\n+    private static String NAME3 = \"Emma Wilson\";\n+\n+    @BeforeEach\n+    public void before() {\n+        ObservableList<Person> model = FXCollections.observableArrayList(\n+                new Person(NAME0, 76),\n+                new Person(NAME1, 30),\n+                new Person(NAME2, 30),\n+                new Person(NAME3, 8)\n+        );\n+        TreeTableColumn<Person, String> column = new TreeTableColumn<>(\"Col \");\n+        column.setCellValueFactory(new TreeItemPropertyValueFactory<Person, String>(\"firstName\"));\n+\n+        TreeItem<Person> root = new TreeItem<>();\n+        for (Person person : model) {\n+            root.getChildren().add(new TreeItem<>(person));\n+        }\n+\n+        tableView = new TreeTableView<>(root);\n+        tableView.setShowRoot(false);\n+\n+        tableView.getColumns().add(column);\n+\n+        sl = new StageLoader(tableView);\n+        Toolkit tk = Toolkit.getToolkit();\n+\n+        tk.firePulse();\n+        firstColumnHeader = VirtualFlowTestUtils.getTableColumnHeader(tableView, column);\n+    }\n+\n+    @AfterEach\n+    public void after() {\n+        sl.dispose();\n+    }\n+\n+    \/**\n+     * When a right click is done on a table column header, the column drag lock should be set to true in the\n+     * pressed handler, but eventually to false again in the released handler.<br>\n+     * By that we guarantee, that the column resizing still works.\n+     *\/\n+    @Test\n+    public void testColumnRightClickDoesAllowResizing() {\n+        MouseEventFirer firer = new MouseEventFirer(firstColumnHeader);\n+\n+        assertFalse(TableColumnHeaderShim.getTableHeaderRowColumnDragLock(firstColumnHeader));\n+\n+        firer.fireMousePressed(MouseButton.SECONDARY);\n+        assertTrue(TableColumnHeaderShim.getTableHeaderRowColumnDragLock(firstColumnHeader));\n+\n+        firer.fireMouseReleased(MouseButton.SECONDARY);\n+        assertFalse(TableColumnHeaderShim.getTableHeaderRowColumnDragLock(firstColumnHeader));\n+    }\n+\n+    \/**\n+     * When a right click is done on a table column header and consumed by a self added event handler, the column\n+     * drag lock should be set to true in the pressed handler, but still to false again in the released handler.<br>\n+     * By that we guarantee, that the column resizing still works.\n+     *\/\n+    @Test\n+    public void testColumnRightClickDoesAllowResizingWhenConsumed() {\n+        firstColumnHeader.addEventHandler(MouseEvent.MOUSE_RELEASED, Event::consume);\n+\n+        MouseEventFirer firer = new MouseEventFirer(firstColumnHeader);\n+\n+        assertFalse(TableColumnHeaderShim.getTableHeaderRowColumnDragLock(firstColumnHeader));\n+\n+        firer.fireMousePressed(MouseButton.SECONDARY);\n+        assertTrue(TableColumnHeaderShim.getTableHeaderRowColumnDragLock(firstColumnHeader));\n+\n+        firer.fireMouseReleased(MouseButton.SECONDARY);\n+        assertFalse(TableColumnHeaderShim.getTableHeaderRowColumnDragLock(firstColumnHeader));\n+    }\n+\n+    \/**\n+     * @test\n+     * @bug 8207957\n+     * Resize the column header without modifications\n+     *\/\n+    @Test\n+    public void test_resizeColumnToFitContent() {\n+        TreeTableColumn column = tableView.getColumns().get(0);\n+        double width = column.getWidth();\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        assertEquals(width, column.getWidth(), 0.001, \"Width must be the same\");\n+    }\n+\n+    \/**\n+     * @test\n+     * @bug 8207957\n+     * Resize the column header with first column increase\n+     *\/\n+    @Test\n+    public void test_resizeColumnToFitContentIncrease() {\n+        TreeTableColumn column = tableView.getColumns().get(0);\n+        double width = column.getWidth();\n+\n+        tableView.getRoot().getChildren().get(0).getValue().setFirstName(\"This is a big text inside that column\");\n+\n+        assertEquals(\n+                width, column.getWidth(), 0.001, \"Width must be the same\");\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+        assertTrue(\n+                width < column.getWidth(), \"Column width must be greater\");\n+\n+        \/\/Back to initial value\n+        tableView.getRoot().getChildren().get(0).getValue().setFirstName(NAME0);\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+        assertEquals(width, column.getWidth(), 0.001, \"Width must be equal to initial value\");\n+    }\n+\n+    \/**\n+     * @test\n+     * @bug 8207957\n+     * Resize the column header with first column decrease\n+     *\/\n+    @Test\n+    public void test_resizeColumnToFitContentDecrease() {\n+        TreeTableColumn column = tableView.getColumns().get(0);\n+        double width = column.getWidth();\n+\n+        tableView.getRoot().getChildren().get(0).getValue().setFirstName(\"small\");\n+        tableView.getRoot().getChildren().get(1).getValue().setFirstName(\"small\");\n+        tableView.getRoot().getChildren().get(2).getValue().setFirstName(\"small\");\n+        tableView.getRoot().getChildren().get(3).getValue().setFirstName(\"small\");\n+\n+        assertEquals(\n+                width, column.getWidth(), 0.001, \"Width must be the same\");\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+        assertTrue(\n+                width > column.getWidth(), \"Column width must be smaller\");\n+\n+        \/\/Back to initial value\n+        tableView.getRoot().getChildren().get(0).getValue().setFirstName(NAME0);\n+        tableView.getRoot().getChildren().get(1).getValue().setFirstName(NAME1);\n+        tableView.getRoot().getChildren().get(2).getValue().setFirstName(NAME2);\n+        tableView.getRoot().getChildren().get(3).getValue().setFirstName(NAME3);\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+        assertEquals(width, column.getWidth(), 0.001, \"Width must be equal to initial value\");\n+    }\n+\n+    \/**\n+     * @test\n+     * @bug 8207957\n+     * Resize the column header itself\n+     *\/\n+    @Test\n+    public void test_resizeColumnToFitContentHeader() {\n+        TreeTableColumn column = tableView.getColumns().get(0);\n+        double width = column.getWidth();\n+\n+        column.setText(\"This is a big text inside that column\");\n+\n+        assertEquals(width, column.getWidth(), 0.001, \"Width must be the same\");\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+        assertTrue(width < column.getWidth(), \"Column width must be greater\");\n+\n+        \/\/Back to initial value\n+        column.setText(\"Col\");\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, 3);\n+        assertEquals(width, column.getWidth(), 0.001, \"Width must be equal to initial value\");\n+    }\n+\n+    \/**\n+     * @test\n+     * @bug 8207957\n+     * Resize the column header with only 3 first rows\n+     *\/\n+    @Test\n+    public void test_resizeColumnToFitContentMaxRow() {\n+        TreeTableColumn column = tableView.getColumns().get(0);\n+        double width = column.getWidth();\n+\n+        tableView.getRoot().getChildren().get(3).getValue().setFirstName(\"This is a big text inside that column\");\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, 3);\n+        assertEquals(width, column.getWidth(), 0.001, \"Width must be the same\");\n+\n+        \/\/Back to initial value\n+        tableView.getRoot().getChildren().get(3).getValue().setFirstName(NAME3);\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, 3);\n+        assertEquals(width, column.getWidth(), 0.001, \"Width must be equal to initial value\");\n+    }\n+\n+    \/** Row style must affect the required column width *\/\n+    @Test\n+    public void test_resizeColumnToFitContentRowStyle() {\n+        TreeTableColumn column = tableView.getColumns().get(0);\n+\n+        tableView.setRowFactory(this::createSmallRow);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+        double width = column.getWidth();\n+\n+        tableView.setRowFactory(this::createLargeRow);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+        assertTrue(width < column.getWidth(), \"Column width must be greater\");\n+    }\n+\n+    \/** Test resizeColumnToFitContent in the presence of a non-standard row skin *\/\n+    @Test\n+    public void test_resizeColumnToFitContentCustomRowSkin() {\n+        TreeTableColumn column = tableView.getColumns().get(0);\n+\n+        tableView.setRowFactory(this::createCustomRow);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+        double width = column.getWidth();\n+        assertTrue(width > 0);\n+    }\n+\n+    \/**\n+     * We expect that the css of the label is processed after the resizing took place,\n+     * since it is needed to correctly measure the size.\n+     *\/\n+    @Test\n+    public void testResizeColumnToFitContentCssIsApplied() {\n+        Label label = TableColumnHeaderShim.getLabel(firstColumnHeader);\n+        label.setStyle(\"-fx-font-size: 24px;\");\n+        firstColumnHeader.getTableColumn().setText(\"longlonglonglong\");\n+\n+        assertEquals(12, label.getFont().getSize(), 0);\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        assertEquals(24, label.getFont().getSize(), 0);\n+    }\n+\n+    \/**\n+     * A table column with a graphic {@link Text} should be bigger than without.\n+     *\/\n+    @Test\n+    public void testResizeColumnToFitContentWithGraphicText() {\n+        TableColumnBase<?, ?> tableColumn = firstColumnHeader.getTableColumn();\n+\n+        tableColumn.setText(\"longlonglonglonglonglonglonglong\");\n+        tableColumn.setGraphic(new Text(\"longlonglonglong\"));\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double widthWithGraphic = tableColumn.getWidth();\n+\n+        tableColumn.setGraphic(null);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double width = tableColumn.getWidth();\n+\n+        assertTrue(widthWithGraphic > width);\n+    }\n+\n+    \/**\n+     * A table column with a graphic {@link Label} should be bigger than without.\n+     *\/\n+    @Test\n+    public void testResizeColumnToFitContentWithGraphicLabel() {\n+        TableColumnBase<?, ?> tableColumn = firstColumnHeader.getTableColumn();\n+\n+        tableColumn.setText(\"longlonglonglonglonglonglonglong\");\n+        tableColumn.setGraphic(new Label(\"longlonglonglong\"));\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double widthWithGraphic = tableColumn.getWidth();\n+\n+        tableColumn.setGraphic(null);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double width = tableColumn.getWidth();\n+\n+        assertTrue(widthWithGraphic > width);\n+    }\n+\n+    \/**\n+     * The content display should also be taken into consideration when measuring the width.\n+     * See also: <a href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8186188\">JDK-8186188<\/a>\n+     *\/\n+    @Test\n+    public void testResizeColumnToFitContentWithGraphicAlignment() {\n+        TableColumnBase<?, ?> tableColumn = firstColumnHeader.getTableColumn();\n+\n+        tableColumn.setText(\"longlonglonglonglonglonglonglong\");\n+        tableColumn.setGraphic(new Text(\"longlonglonglong\"));\n+\n+        Label label = TableColumnHeaderShim.getLabel(firstColumnHeader);\n+\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double widthWithGraphic = tableColumn.getWidth();\n+\n+        label.setContentDisplay(ContentDisplay.BOTTOM);\n+        TableColumnHeaderShim.resizeColumnToFitContent(firstColumnHeader, -1);\n+\n+        double width = tableColumn.getWidth();\n+\n+        assertTrue(widthWithGraphic > width);\n+    }\n+\n+    private TreeTableRow<Person> createCustomRow(TreeTableView<Person> tableView) {\n+        return new TreeTableRow<>() {\n+            protected Skin<?> createDefaultSkin() {\n+                return new CustomSkin(this);\n+            }\n+        };\n+    }\n+\n+    private static class CustomSkin implements Skin<TreeTableRow<?>> {\n+\n+        private TreeTableRow<?> row;\n+        private Node node = new HBox();\n+\n+        CustomSkin(TreeTableRow<?> row) {\n+            this.row = row;\n+        }\n+\n+        @Override\n+        public TreeTableRow<?> getSkinnable() {\n+            return row;\n+        }\n+\n+        @Override\n+        public Node getNode() {\n+            return node;\n+        }\n+\n+        @Override\n+        public void dispose() {\n+            node = null;\n+        }\n+    }\n+\n+    private TreeTableRow<Person> createSmallRow(TreeTableView<Person> tableView) {\n+        TreeTableRow<Person> row = new TreeTableRow<>();\n+        row.setStyle(\"-fx-font: 24 System\");\n+        return row;\n+    }\n+\n+    private TreeTableRow<Person> createLargeRow(TreeTableView<Person> param) {\n+        TreeTableRow<Person> row = new TreeTableRow<>();\n+        row.setStyle(\"-fx-font: 48 System\");\n+        return row;\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TableColumnHeaderTreeTableTest.java","additions":412,"deletions":0,"binary":false,"changes":412,"status":"added"}]}