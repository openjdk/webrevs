{"files":[{"patch":"@@ -60,1 +60,0 @@\n-import java.security.PrivilegedAction;\n@@ -105,2 +104,1 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final boolean verbose = AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> Boolean.getBoolean(\"javafx.verbose\"));\n+    private static final boolean verbose = Boolean.getBoolean(\"javafx.verbose\");\n@@ -203,7 +201,3 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n-            \/\/ Get the javafx.version and javafx.runtime.version from a preconstructed\n-            \/\/ java class, VersionInfo, created at build time.\n-            VersionInfo.setupSystemProperties();\n-            return null;\n-        });\n+        \/\/ Get the javafx.version and javafx.runtime.version from a preconstructed\n+        \/\/ java class, VersionInfo, created at build time.\n+        VersionInfo.setupSystemProperties();\n@@ -219,3 +213,0 @@\n-        \/\/ This is not a doPriviledged check so that applications running\n-        \/\/ with a security manager cannot use this unless they have permission\n-        \/\/ to read system properties.\n@@ -400,4 +391,1 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            listener.pulse();\n-            return null;\n-        }, acc);\n+        listener.pulse();\n@@ -535,1 +523,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -537,11 +524,2 @@\n-        for (Map.Entry<TKListener,AccessControlContext> entry : toolkitListeners.entrySet()) {\n-            final TKListener listener = entry.getKey();\n-            final AccessControlContext acc = entry.getValue();\n-            if (acc == null) {\n-                throw new IllegalStateException(\"Invalid AccessControlContext\");\n-            }\n-\n-            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                listener.changedTopLevelWindows(windows);\n-                return null;\n-            }, acc);\n+        for (TKListener listener : toolkitListeners.keySet()) {\n+            listener.changedTopLevelWindows(windows);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/Toolkit.java","additions":7,"deletions":29,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -39,2 +39,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -208,1 +206,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -212,6 +209,3 @@\n-            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                if (sceneListener != null) {\n-                    sceneListener.changedSize(width, height);\n-                }\n-                return null;\n-            }, getAccessControlContext());\n+            if (sceneListener != null) {\n+                sceneListener.changedSize(width, height);\n+            }\n@@ -278,1 +272,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -288,4 +281,1 @@\n-            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                if (sceneListener == null) {\n-                    return null;\n-                }\n+            if (sceneListener != null) {\n@@ -302,2 +292,1 @@\n-                return null;\n-            }, getAccessControlContext());\n+            }\n@@ -307,1 +296,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -319,4 +307,1 @@\n-                AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                    if (sceneListener == null) {\n-                        return null;\n-                    }\n+                if (sceneListener != null) {\n@@ -325,2 +310,1 @@\n-                    return null;\n-                }, getAccessControlContext());\n+                }\n@@ -331,1 +315,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -337,6 +320,3 @@\n-            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                if (sceneListener != null) {\n-                    sceneListener.inputMethodEvent(type, composed, committed, caretPosition);\n-                }\n-                return null;\n-            });\n+            if (sceneListener != null) {\n+                sceneListener.inputMethodEvent(type, composed, committed, caretPosition);\n+            }\n@@ -346,1 +326,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -350,6 +329,3 @@\n-            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                if (sceneListener != null) {\n-                    sceneListener.menuEvent(x, y, xAbs, yAbs, isKeyboardTrigger);\n-                }\n-                return null;\n-            }, getAccessControlContext());\n+            if (sceneListener != null) {\n+                sceneListener.menuEvent(x, y, xAbs, yAbs, isKeyboardTrigger);\n+            }\n@@ -359,1 +335,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -363,18 +338,11 @@\n-            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                if (sceneListener != null) {\n-                    boolean shiftDown = (modifiers & AbstractEvents.MODIFIER_SHIFT) != 0;\n-                    boolean controlDown = (modifiers & AbstractEvents.MODIFIER_CONTROL) != 0;\n-                    boolean altDown = (modifiers & AbstractEvents.MODIFIER_ALT) != 0;\n-                    boolean metaDown = (modifiers & AbstractEvents.MODIFIER_META) != 0;\n-\n-                    String str = new String(ch);\n-                    String text = str; \/\/ TODO: this must be a text like \"HOME\", \"F1\", or \"A\"\n-                    KeyCode code = KeyCodeMap.valueOf(key);\n-                    if (code == null) {\n-                        code = KeyCode.UNDEFINED;\n-                    }\n-                    javafx.scene.input.KeyEvent keyEvent = new javafx.scene.input.KeyEvent(\n-                            AbstractEvents.keyIDToFXEventType(type),\n-                            str, text, code,\n-                            shiftDown, controlDown, altDown, metaDown);\n-                    sceneListener.keyEvent(keyEvent);\n+            if (sceneListener != null) {\n+                boolean shiftDown = (modifiers & AbstractEvents.MODIFIER_SHIFT) != 0;\n+                boolean controlDown = (modifiers & AbstractEvents.MODIFIER_CONTROL) != 0;\n+                boolean altDown = (modifiers & AbstractEvents.MODIFIER_ALT) != 0;\n+                boolean metaDown = (modifiers & AbstractEvents.MODIFIER_META) != 0;\n+\n+                String str = new String(ch);\n+                String text = str; \/\/ TODO: this must be a text like \"HOME\", \"F1\", or \"A\"\n+                KeyCode code = KeyCodeMap.valueOf(key);\n+                if (code == null) {\n+                    code = KeyCode.UNDEFINED;\n@@ -382,2 +350,6 @@\n-                return null;\n-            }, getAccessControlContext());\n+                javafx.scene.input.KeyEvent keyEvent = new javafx.scene.input.KeyEvent(\n+                        AbstractEvents.keyIDToFXEventType(type),\n+                        str, text, code,\n+                        shiftDown, controlDown, altDown, metaDown);\n+                sceneListener.keyEvent(keyEvent);\n+            }\n@@ -387,1 +359,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -394,4 +365,1 @@\n-            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                if (sceneListener == null) {\n-                    return null;\n-                }\n+            if (sceneListener != null) {\n@@ -402,2 +370,1 @@\n-                return null;\n-            }, getAccessControlContext());\n+            }\n@@ -407,1 +374,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -414,10 +380,6 @@\n-            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                if (sceneListener == null) {\n-                    return null;\n-                }\n-                sceneListener.rotateEvent(AbstractEvents.rotateIDToFXEventType(type),\n-                        angle, totalAngle,\n-                        x, y, screenX, screenY,\n-                        shift, ctrl, alt, meta, false, inertia);\n-                return null;\n-            }, getAccessControlContext());\n+            if (sceneListener != null) {\n+            sceneListener.rotateEvent(AbstractEvents.rotateIDToFXEventType(type),\n+                    angle, totalAngle,\n+                    x, y, screenX, screenY,\n+                    shift, ctrl, alt, meta, false, inertia);\n+            }\n@@ -427,1 +389,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -433,4 +394,1 @@\n-            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                if (sceneListener == null) {\n-                    return null;\n-                }\n+            if (sceneListener != null) {\n@@ -440,2 +398,1 @@\n-                return null;\n-            }, getAccessControlContext());\n+            }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/EmbeddedScene.java","additions":40,"deletions":83,"binary":false,"changes":123,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -223,1 +221,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -225,5 +222,1 @@\n-        AccessControlContext acc = getAccessControlContext();\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            r.run();\n-            return null;\n-        }, acc);\n+        r.run();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/EmbeddedStage.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.security.PrivilegedAction;\n@@ -250,1 +249,0 @@\n-            @SuppressWarnings(\"removal\")\n@@ -254,8 +252,4 @@\n-                AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                    try {\n-                        if (dragSourceListener != null) {\n-                            dragSourceListener.dragDropEnd(0, 0, 0, 0,\n-                                    QuantumToolkit.clipboardActionToTransferMode(performedAction));\n-                        }\n-                    } finally {\n-                        QuantumClipboard.releaseCurrentDragboard();\n+                try {\n+                    if (dragSourceListener != null) {\n+                        dragSourceListener.dragDropEnd(0, 0, 0, 0,\n+                                QuantumToolkit.clipboardActionToTransferMode(performedAction));\n@@ -263,2 +257,3 @@\n-                    return null;\n-                }, getAccessControlContext());\n+                } finally {\n+                    QuantumClipboard.releaseCurrentDragboard();\n+                }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/GlassScene.java","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -36,3 +36,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -71,1 +68,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -77,11 +73,9 @@\n-        return AccessController.doPrivileged((PrivilegedAction<TransferMode>) () -> {\n-            if (scene.dropTargetListener != null) {\n-                double pScaleX = getPlatformScaleX();\n-                double pScaleY = getPlatformScaleY();\n-                QuantumClipboard dragboard =\n-                        QuantumClipboard.getDragboardInstance(dropTargetAssistant, false);\n-                return scene.dropTargetListener.dragEnter(x \/ pScaleX, y \/ pScaleY, xAbs \/ pScaleX, yAbs \/ pScaleY,\n-                        recommendedTransferMode, dragboard);\n-            }\n-            return null;\n-        }, scene.getAccessControlContext());\n+        if (scene.dropTargetListener != null) {\n+            double pScaleX = getPlatformScaleX();\n+            double pScaleY = getPlatformScaleY();\n+            QuantumClipboard dragboard =\n+                    QuantumClipboard.getDragboardInstance(dropTargetAssistant, false);\n+            return scene.dropTargetListener.dragEnter(x \/ pScaleX, y \/ pScaleY, xAbs \/ pScaleX, yAbs \/ pScaleY,\n+                    recommendedTransferMode, dragboard);\n+        }\n+        return null;\n@@ -90,1 +84,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -93,6 +86,3 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            if (scene.dropTargetListener != null) {\n-                scene.dropTargetListener.dragExit(0, 0, 0, 0);\n-            }\n-            return null;\n-        }, scene.getAccessControlContext());\n+        if (scene.dropTargetListener != null) {\n+            scene.dropTargetListener.dragExit(0, 0, 0, 0);\n+        }\n@@ -101,1 +91,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -107,9 +96,7 @@\n-        return AccessController.doPrivileged((PrivilegedAction<TransferMode>) () -> {\n-            if (scene.dropTargetListener != null) {\n-                double pScaleX = getPlatformScaleX();\n-                double pScaleY = getPlatformScaleY();\n-                return scene.dropTargetListener.drop(x \/ pScaleX, y \/ pScaleY, xAbs \/ pScaleX, yAbs \/ pScaleY,\n-                        recommendedTransferMode);\n-            }\n-            return null;\n-        }, scene.getAccessControlContext());\n+        if (scene.dropTargetListener != null) {\n+            double pScaleX = getPlatformScaleX();\n+            double pScaleY = getPlatformScaleY();\n+            return scene.dropTargetListener.drop(x \/ pScaleX, y \/ pScaleY, xAbs \/ pScaleX, yAbs \/ pScaleY,\n+                    recommendedTransferMode);\n+        }\n+        return null;\n@@ -118,1 +105,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -124,9 +110,7 @@\n-        return AccessController.doPrivileged((PrivilegedAction<TransferMode>) () -> {\n-            if (scene.dropTargetListener != null) {\n-                double pScaleX = getPlatformScaleX();\n-                double pScaleY = getPlatformScaleY();\n-                return scene.dropTargetListener.dragOver(x \/ pScaleX, y \/ pScaleY, xAbs \/ pScaleX, yAbs \/ pScaleY,\n-                        recommendedTransferMode);\n-            }\n-            return null;\n-        }, scene.getAccessControlContext());\n+        if (scene.dropTargetListener != null) {\n+            double pScaleX = getPlatformScaleX();\n+            double pScaleY = getPlatformScaleY();\n+            return scene.dropTargetListener.dragOver(x \/ pScaleX, y \/ pScaleY, xAbs \/ pScaleX, yAbs \/ pScaleY,\n+                    recommendedTransferMode);\n+        }\n+        return null;\n@@ -141,1 +125,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -146,11 +129,8 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            if (scene.dragGestureListener != null) {\n-                double pScaleX = getPlatformScaleX();\n-                double pScaleY = getPlatformScaleY();\n-                QuantumClipboard dragboard =\n-                        QuantumClipboard.getDragboardInstance(dragSourceAssistant, true);\n-                scene.dragGestureListener.dragGestureRecognized(\n-                        x \/ pScaleX, y \/ pScaleY, xAbs \/ pScaleX, yAbs \/ pScaleY, button, dragboard);\n-            }\n-            return null;\n-        }, scene.getAccessControlContext());\n+        if (scene.dragGestureListener != null) {\n+            double pScaleX = getPlatformScaleX();\n+            double pScaleY = getPlatformScaleY();\n+            QuantumClipboard dragboard =\n+                    QuantumClipboard.getDragboardInstance(dragSourceAssistant, true);\n+            scene.dragGestureListener.dragGestureRecognized(\n+                    x \/ pScaleX, y \/ pScaleY, xAbs \/ pScaleX, yAbs \/ pScaleY, button, dragboard);\n+        }\n@@ -162,1 +142,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -167,7 +146,3 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            try {\n-                if (scene.dragSourceListener != null) {\n-                    scene.dragSourceListener.dragDropEnd(0, 0, 0, 0, performedTransferMode);\n-                }\n-            } finally {\n-                QuantumClipboard.releaseCurrentDragboard();\n+        try {\n+            if (scene.dragSourceListener != null) {\n+                scene.dragSourceListener.dragDropEnd(0, 0, 0, 0, performedTransferMode);\n@@ -175,2 +150,3 @@\n-            return null;\n-        }, scene.getAccessControlContext());\n+        } finally {\n+            QuantumClipboard.releaseCurrentDragboard();\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/GlassSceneDnDEventHandler.java","additions":40,"deletions":64,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -110,5 +110,6 @@\n-        return AccessController.doPrivileged((PrivilegedAction<AccessControlContext>) () -> {\n-            return AccessController.doPrivilegedWithCombiner((PrivilegedAction<AccessControlContext>) () -> {\n-                return AccessController.getContext();\n-            }, stack);\n-        },  context);\n+        \/\/ As part of the security manager removal, this entire method will be eliminated.\n+        \/\/ This method used to compute the intersection of two access control contexts using\n+        \/\/ a custom doPrivilegedWithCombiner method. This was only used in other calls to\n+        \/\/ doPrivilieged, so there is no harm in skipping the intersection and just\n+        \/\/ returning the context.\n+        return context;\n@@ -192,1 +193,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -203,4 +203,1 @@\n-                AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                    window.stageListener.closing();\n-                    return null;\n-                }, window.getAccessControlContext());\n+                window.stageListener.closing();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/GlassStage.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -63,2 +63,1 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n+import java.util.function.Supplier;\n@@ -72,7 +71,3 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            zoomGestureEnabled = Boolean.valueOf(System.getProperty(\"com.sun.javafx.gestures.zoom\", \"false\"));\n-            rotateGestureEnabled = Boolean.valueOf(System.getProperty(\"com.sun.javafx.gestures.rotate\", \"false\"));\n-            scrollGestureEnabled = Boolean.valueOf(System.getProperty(\"com.sun.javafx.gestures.scroll\", \"false\"));\n-            return null;\n-        });\n+        zoomGestureEnabled = Boolean.valueOf(System.getProperty(\"com.sun.javafx.gestures.zoom\", \"false\"));\n+        rotateGestureEnabled = Boolean.valueOf(System.getProperty(\"com.sun.javafx.gestures.rotate\", \"false\"));\n+        scrollGestureEnabled = Boolean.valueOf(System.getProperty(\"com.sun.javafx.gestures.scroll\", \"false\"));\n@@ -150,1 +145,1 @@\n-    private class KeyEventNotification implements PrivilegedAction<Boolean> {\n+    private class KeyEventNotification implements Supplier<Boolean> {\n@@ -161,1 +156,1 @@\n-        public Boolean run() {\n+        public Boolean get() {\n@@ -239,1 +234,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -251,3 +245,1 @@\n-        boolean consumed = QuantumToolkit.runWithoutRenderLock(() -> {\n-            return AccessController.doPrivileged(keyNotification, scene.getAccessControlContext());\n-        });\n+        boolean consumed = QuantumToolkit.runWithoutRenderLock(keyNotification);\n@@ -304,1 +296,1 @@\n-    private class MouseEventNotification implements PrivilegedAction<Void> {\n+    private class MouseEventNotification implements Supplier<Void> {\n@@ -315,1 +307,1 @@\n-        public Void run() {\n+        public Void get() {\n@@ -434,1 +426,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -452,3 +443,1 @@\n-        QuantumToolkit.runWithoutRenderLock(() -> {\n-            return AccessController.doPrivileged(mouseNotification, scene.getAccessControlContext());\n-        });\n+        QuantumToolkit.runWithoutRenderLock(mouseNotification);\n@@ -457,1 +446,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -471,16 +459,12 @@\n-                return AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                    if (scene.sceneListener != null) {\n-                        double pScaleX, pScaleY, spx, spy, sx, sy;\n-                        final Window w = view.getWindow();\n-                        if (w != null) {\n-                            pScaleX = w.getPlatformScaleX();\n-                            pScaleY = w.getPlatformScaleY();\n-                            Screen scr = w.getScreen();\n-                            if (scr != null) {\n-                                spx = scr.getPlatformX();\n-                                spy = scr.getPlatformY();\n-                                sx = scr.getX();\n-                                sy = scr.getY();\n-                            } else {\n-                                spx = spy = sx = sy = 0.0;\n-                            }\n+                if (scene.sceneListener != null) {\n+                    double pScaleX, pScaleY, spx, spy, sx, sy;\n+                    final Window w = view.getWindow();\n+                    if (w != null) {\n+                        pScaleX = w.getPlatformScaleX();\n+                        pScaleY = w.getPlatformScaleY();\n+                        Screen scr = w.getScreen();\n+                        if (scr != null) {\n+                            spx = scr.getPlatformX();\n+                            spy = scr.getPlatformY();\n+                            sx = scr.getX();\n+                            sy = scr.getY();\n@@ -488,1 +472,0 @@\n-                            pScaleX = pScaleY = 1.0;\n@@ -491,4 +474,3 @@\n-                        scene.sceneListener.menuEvent(x \/ pScaleX, y \/ pScaleY,\n-                                                      sx + (xAbs - spx) \/ pScaleX,\n-                                                      sy + (yAbs - spy) \/ pScaleY,\n-                                                      isKeyboardTrigger);\n+                    } else {\n+                        pScaleX = pScaleY = 1.0;\n+                        spx = spy = sx = sy = 0.0;\n@@ -496,2 +478,6 @@\n-                    return null;\n-                }, scene.getAccessControlContext());\n+                    scene.sceneListener.menuEvent(x \/ pScaleX, y \/ pScaleY,\n+                                                  sx + (xAbs - spx) \/ pScaleX,\n+                                                  sy + (yAbs - spy) \/ pScaleY,\n+                                                  isKeyboardTrigger);\n+                }\n+                return null;\n@@ -509,1 +495,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -526,16 +511,12 @@\n-                return AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                    if (scene.sceneListener != null) {\n-                        final Window w = view.getWindow();\n-                        double pScaleX, pScaleY, spx, spy, sx, sy;\n-                        if (w != null) {\n-                            pScaleX = w.getPlatformScaleX();\n-                            pScaleY = w.getPlatformScaleY();\n-                            Screen scr = w.getScreen();\n-                            if (scr != null) {\n-                                spx = scr.getPlatformX();\n-                                spy = scr.getPlatformY();\n-                                sx = scr.getX();\n-                                sy = scr.getY();\n-                            } else {\n-                                spx = spy = sx = sy = 0.0;\n-                            }\n+                if (scene.sceneListener != null) {\n+                    final Window w = view.getWindow();\n+                    double pScaleX, pScaleY, spx, spy, sx, sy;\n+                    if (w != null) {\n+                        pScaleX = w.getPlatformScaleX();\n+                        pScaleY = w.getPlatformScaleY();\n+                        Screen scr = w.getScreen();\n+                        if (scr != null) {\n+                            spx = scr.getPlatformX();\n+                            spy = scr.getPlatformY();\n+                            sx = scr.getX();\n+                            sy = scr.getY();\n@@ -543,1 +524,0 @@\n-                            pScaleX = pScaleY = 1.0;\n@@ -546,14 +526,3 @@\n-                        scene.sceneListener.scrollEvent(ScrollEvent.SCROLL,\n-                            deltaX \/ pScaleX, deltaY \/ pScaleY, 0, 0,\n-                            xMultiplier, yMultiplier,\n-                            0, \/\/ touchCount\n-                            chars, lines, defaultChars, defaultLines,\n-                            x \/ pScaleX, y \/ pScaleY,\n-                            sx + (xAbs - spx) \/ pScaleX,\n-                            sy + (yAbs - spy) \/ pScaleY,\n-                            (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n-                            (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n-                            (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n-                            (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n-                            false, \/\/ this is always indirect\n-                            false); \/\/ this has no inertia\n+                    } else {\n+                        pScaleX = pScaleY = 1.0;\n+                        spx = spy = sx = sy = 0.0;\n@@ -561,2 +530,16 @@\n-                    return null;\n-                }, scene.getAccessControlContext());\n+                    scene.sceneListener.scrollEvent(ScrollEvent.SCROLL,\n+                        deltaX \/ pScaleX, deltaY \/ pScaleY, 0, 0,\n+                        xMultiplier, yMultiplier,\n+                        0, \/\/ touchCount\n+                        chars, lines, defaultChars, defaultLines,\n+                        x \/ pScaleX, y \/ pScaleY,\n+                        sx + (xAbs - spx) \/ pScaleX,\n+                        sy + (yAbs - spy) \/ pScaleY,\n+                        (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n+                        (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n+                        (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n+                        (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n+                        false, \/\/ this is always indirect\n+                        false); \/\/ this has no inertia\n+                }\n+                return null;\n@@ -634,1 +617,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -649,12 +631,10 @@\n-                return AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                    if (scene.sceneListener != null) {\n-                        String t = text != null ? text : \"\";\n-                        EventType<InputMethodEvent> eventType =\n-                                InputMethodEvent.INPUT_METHOD_TEXT_CHANGED;\n-                        ObservableList<InputMethodTextRun> composed = inputMethodEventComposed(\n-                                t, commitCount, clauseBoundary, attrBoundary, attrValue);\n-                        String committed = t.substring(0, commitCount);\n-                        scene.sceneListener.inputMethodEvent(eventType, composed, committed, cursorPos);\n-                    }\n-                    return null;\n-                }, scene.getAccessControlContext());\n+                if (scene.sceneListener != null) {\n+                    String t = text != null ? text : \"\";\n+                    EventType<InputMethodEvent> eventType =\n+                            InputMethodEvent.INPUT_METHOD_TEXT_CHANGED;\n+                    ObservableList<InputMethodTextRun> composed = inputMethodEventComposed(\n+                            t, commitCount, clauseBoundary, attrBoundary, attrValue);\n+                    String committed = t.substring(0, commitCount);\n+                    scene.sceneListener.inputMethodEvent(eventType, composed, committed, cursorPos);\n+                }\n+                return null;\n@@ -865,1 +845,1 @@\n-    private class ViewEventNotification implements PrivilegedAction<Void> {\n+    private class ViewEventNotification implements Supplier<Void> {\n@@ -871,1 +851,1 @@\n-        public Void run() {\n+        public Void get() {\n@@ -937,1 +917,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -946,3 +925,1 @@\n-            QuantumToolkit.runWithoutRenderLock(() -> {\n-                return AccessController.doPrivileged(viewNotification, scene.getAccessControlContext());\n-            });\n+            QuantumToolkit.runWithoutRenderLock(viewNotification);\n@@ -957,1 +934,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -973,30 +949,26 @@\n-                return AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                    if (scene.sceneListener != null) {\n-                        EventType<ScrollEvent> eventType;\n-                        switch(type) {\n-                            case GestureEvent.GESTURE_STARTED:\n-                                eventType = ScrollEvent.SCROLL_STARTED;\n-                                break;\n-                            case GestureEvent.GESTURE_PERFORMED:\n-                                eventType = ScrollEvent.SCROLL;\n-                                break;\n-                            case GestureEvent.GESTURE_FINISHED:\n-                                eventType = ScrollEvent.SCROLL_FINISHED;\n-                                break;\n-                            default:\n-                                throw new RuntimeException(\"Unknown scroll event type: \" + type);\n-                        }\n-                        final Window w = view.getWindow();\n-                        double pScaleX, pScaleY, spx, spy, sx, sy;\n-                        if (w != null) {\n-                            pScaleX = w.getPlatformScaleX();\n-                            pScaleY = w.getPlatformScaleY();\n-                            Screen scr = w.getScreen();\n-                            if (scr != null) {\n-                                spx = scr.getPlatformX();\n-                                spy = scr.getPlatformY();\n-                                sx = scr.getX();\n-                                sy = scr.getY();\n-                            } else {\n-                                spx = spy = sx = sy = 0.0;\n-                            }\n+                if (scene.sceneListener != null) {\n+                    EventType<ScrollEvent> eventType;\n+                    switch(type) {\n+                        case GestureEvent.GESTURE_STARTED:\n+                            eventType = ScrollEvent.SCROLL_STARTED;\n+                            break;\n+                        case GestureEvent.GESTURE_PERFORMED:\n+                            eventType = ScrollEvent.SCROLL;\n+                            break;\n+                        case GestureEvent.GESTURE_FINISHED:\n+                            eventType = ScrollEvent.SCROLL_FINISHED;\n+                            break;\n+                        default:\n+                            throw new RuntimeException(\"Unknown scroll event type: \" + type);\n+                    }\n+                    final Window w = view.getWindow();\n+                    double pScaleX, pScaleY, spx, spy, sx, sy;\n+                    if (w != null) {\n+                        pScaleX = w.getPlatformScaleX();\n+                        pScaleY = w.getPlatformScaleY();\n+                        Screen scr = w.getScreen();\n+                        if (scr != null) {\n+                            spx = scr.getPlatformX();\n+                            spy = scr.getPlatformY();\n+                            sx = scr.getX();\n+                            sy = scr.getY();\n@@ -1004,1 +976,0 @@\n-                            pScaleX = pScaleY = 1.0;\n@@ -1007,14 +978,3 @@\n-                        scene.sceneListener.scrollEvent(eventType,\n-                                dx \/ pScaleX, dy \/ pScaleY, totaldx \/ pScaleX, totaldy \/ pScaleY,\n-                                multiplierX, multiplierY,\n-                                touchCount,\n-                                0, 0, 0, 0,\n-                                x == View.GESTURE_NO_VALUE ? Double.NaN : x \/ pScaleX,\n-                                y == View.GESTURE_NO_VALUE ? Double.NaN : y \/ pScaleY,\n-                                xAbs == View.GESTURE_NO_VALUE ? Double.NaN : sx + (xAbs - spx) \/ pScaleX,\n-                                yAbs == View.GESTURE_NO_VALUE ? Double.NaN : sy + (yAbs - spy) \/ pScaleY,\n-                                (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n-                                (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n-                                (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n-                                (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n-                                isDirect, isInertia);\n+                    } else {\n+                        pScaleX = pScaleY = 1.0;\n+                        spx = spy = sx = sy = 0.0;\n@@ -1022,2 +982,16 @@\n-                    return null;\n-                }, scene.getAccessControlContext());\n+                    scene.sceneListener.scrollEvent(eventType,\n+                            dx \/ pScaleX, dy \/ pScaleY, totaldx \/ pScaleX, totaldy \/ pScaleY,\n+                            multiplierX, multiplierY,\n+                            touchCount,\n+                            0, 0, 0, 0,\n+                            x == View.GESTURE_NO_VALUE ? Double.NaN : x \/ pScaleX,\n+                            y == View.GESTURE_NO_VALUE ? Double.NaN : y \/ pScaleY,\n+                            xAbs == View.GESTURE_NO_VALUE ? Double.NaN : sx + (xAbs - spx) \/ pScaleX,\n+                            yAbs == View.GESTURE_NO_VALUE ? Double.NaN : sy + (yAbs - spy) \/ pScaleY,\n+                            (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n+                            (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n+                            (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n+                            (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n+                            isDirect, isInertia);\n+                }\n+                return null;\n@@ -1035,1 +1009,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1053,30 +1026,26 @@\n-                return AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                    if (scene.sceneListener != null) {\n-                        EventType<ZoomEvent> eventType;\n-                        switch (type) {\n-                            case GestureEvent.GESTURE_STARTED:\n-                                eventType = ZoomEvent.ZOOM_STARTED;\n-                                break;\n-                            case GestureEvent.GESTURE_PERFORMED:\n-                                eventType = ZoomEvent.ZOOM;\n-                                break;\n-                            case GestureEvent.GESTURE_FINISHED:\n-                                eventType = ZoomEvent.ZOOM_FINISHED;\n-                                break;\n-                            default:\n-                                throw new RuntimeException(\"Unknown scroll event type: \" + type);\n-                        }\n-                        final Window w = view.getWindow();\n-                        double pScaleX, pScaleY, spx, spy, sx, sy;\n-                        if (w != null) {\n-                            pScaleX = w.getPlatformScaleX();\n-                            pScaleY = w.getPlatformScaleY();\n-                            Screen scr = w.getScreen();\n-                            if (scr != null) {\n-                                spx = scr.getPlatformX();\n-                                spy = scr.getPlatformY();\n-                                sx = scr.getX();\n-                                sy = scr.getY();\n-                            } else {\n-                                spx = spy = sx = sy = 0.0;\n-                            }\n+                if (scene.sceneListener != null) {\n+                    EventType<ZoomEvent> eventType;\n+                    switch (type) {\n+                        case GestureEvent.GESTURE_STARTED:\n+                            eventType = ZoomEvent.ZOOM_STARTED;\n+                            break;\n+                        case GestureEvent.GESTURE_PERFORMED:\n+                            eventType = ZoomEvent.ZOOM;\n+                            break;\n+                        case GestureEvent.GESTURE_FINISHED:\n+                            eventType = ZoomEvent.ZOOM_FINISHED;\n+                            break;\n+                        default:\n+                            throw new RuntimeException(\"Unknown scroll event type: \" + type);\n+                    }\n+                    final Window w = view.getWindow();\n+                    double pScaleX, pScaleY, spx, spy, sx, sy;\n+                    if (w != null) {\n+                        pScaleX = w.getPlatformScaleX();\n+                        pScaleY = w.getPlatformScaleY();\n+                        Screen scr = w.getScreen();\n+                        if (scr != null) {\n+                            spx = scr.getPlatformX();\n+                            spy = scr.getPlatformY();\n+                            sx = scr.getX();\n+                            sy = scr.getY();\n@@ -1084,1 +1053,0 @@\n-                            pScaleX = pScaleY = 1.0;\n@@ -1087,11 +1055,3 @@\n-                        \/\/ REMIND: Scale the [total]scale params too?\n-                        scene.sceneListener.zoomEvent(eventType, scale, totalscale,\n-                                originx == View.GESTURE_NO_VALUE ? Double.NaN : originx \/ pScaleX,\n-                                originy == View.GESTURE_NO_VALUE ? Double.NaN : originy \/ pScaleY,\n-                                originxAbs == View.GESTURE_NO_VALUE ? Double.NaN : sx + (originxAbs - spx) \/ pScaleX,\n-                                originyAbs == View.GESTURE_NO_VALUE ? Double.NaN : sy + (originyAbs - spy) \/ pScaleY,\n-                                (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n-                                (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n-                                (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n-                                (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n-                                isDirect, isInertia);\n+                    } else {\n+                        pScaleX = pScaleY = 1.0;\n+                        spx = spy = sx = sy = 0.0;\n@@ -1099,2 +1059,13 @@\n-                    return null;\n-                }, scene.getAccessControlContext());\n+                    \/\/ REMIND: Scale the [total]scale params too?\n+                    scene.sceneListener.zoomEvent(eventType, scale, totalscale,\n+                            originx == View.GESTURE_NO_VALUE ? Double.NaN : originx \/ pScaleX,\n+                            originy == View.GESTURE_NO_VALUE ? Double.NaN : originy \/ pScaleY,\n+                            originxAbs == View.GESTURE_NO_VALUE ? Double.NaN : sx + (originxAbs - spx) \/ pScaleX,\n+                            originyAbs == View.GESTURE_NO_VALUE ? Double.NaN : sy + (originyAbs - spy) \/ pScaleY,\n+                            (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n+                            (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n+                            (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n+                            (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n+                            isDirect, isInertia);\n+                }\n+                return null;\n@@ -1112,1 +1083,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1129,30 +1099,26 @@\n-                return AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                    if (scene.sceneListener != null) {\n-                        EventType<RotateEvent> eventType;\n-                        switch (type) {\n-                            case GestureEvent.GESTURE_STARTED:\n-                                eventType = RotateEvent.ROTATION_STARTED;\n-                                break;\n-                            case GestureEvent.GESTURE_PERFORMED:\n-                                eventType = RotateEvent.ROTATE;\n-                                break;\n-                            case GestureEvent.GESTURE_FINISHED:\n-                                eventType = RotateEvent.ROTATION_FINISHED;\n-                                break;\n-                            default:\n-                                throw new RuntimeException(\"Unknown scroll event type: \" + type);\n-                        }\n-                        final Window w = view.getWindow();\n-                        double pScaleX, pScaleY, spx, spy, sx, sy;\n-                        if (w != null) {\n-                            pScaleX = w.getPlatformScaleX();\n-                            pScaleY = w.getPlatformScaleY();\n-                            Screen scr = w.getScreen();\n-                            if (scr != null) {\n-                                spx = scr.getPlatformX();\n-                                spy = scr.getPlatformY();\n-                                sx = scr.getX();\n-                                sy = scr.getY();\n-                            } else {\n-                                spx = spy = sx = sy = 0.0;\n-                            }\n+                if (scene.sceneListener != null) {\n+                    EventType<RotateEvent> eventType;\n+                    switch (type) {\n+                        case GestureEvent.GESTURE_STARTED:\n+                            eventType = RotateEvent.ROTATION_STARTED;\n+                            break;\n+                        case GestureEvent.GESTURE_PERFORMED:\n+                            eventType = RotateEvent.ROTATE;\n+                            break;\n+                        case GestureEvent.GESTURE_FINISHED:\n+                            eventType = RotateEvent.ROTATION_FINISHED;\n+                            break;\n+                        default:\n+                            throw new RuntimeException(\"Unknown scroll event type: \" + type);\n+                    }\n+                    final Window w = view.getWindow();\n+                    double pScaleX, pScaleY, spx, spy, sx, sy;\n+                    if (w != null) {\n+                        pScaleX = w.getPlatformScaleX();\n+                        pScaleY = w.getPlatformScaleY();\n+                        Screen scr = w.getScreen();\n+                        if (scr != null) {\n+                            spx = scr.getPlatformX();\n+                            spy = scr.getPlatformY();\n+                            sx = scr.getX();\n+                            sy = scr.getY();\n@@ -1160,1 +1126,0 @@\n-                            pScaleX = pScaleY = 1.0;\n@@ -1163,10 +1128,3 @@\n-                        scene.sceneListener.rotateEvent(eventType, dangle, totalangle,\n-                                originx == View.GESTURE_NO_VALUE ? Double.NaN : originx \/ pScaleX,\n-                                originy == View.GESTURE_NO_VALUE ? Double.NaN : originy \/ pScaleY,\n-                                originxAbs == View.GESTURE_NO_VALUE ? Double.NaN : sx + (originxAbs - spx) \/ pScaleX,\n-                                originyAbs == View.GESTURE_NO_VALUE ? Double.NaN : sy + (originyAbs - spy) \/ pScaleY,\n-                                (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n-                                (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n-                                (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n-                                (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n-                                isDirect, isInertia);\n+                    } else {\n+                        pScaleX = pScaleY = 1.0;\n+                        spx = spy = sx = sy = 0.0;\n@@ -1174,2 +1132,12 @@\n-                    return null;\n-                }, scene.getAccessControlContext());\n+                    scene.sceneListener.rotateEvent(eventType, dangle, totalangle,\n+                            originx == View.GESTURE_NO_VALUE ? Double.NaN : originx \/ pScaleX,\n+                            originy == View.GESTURE_NO_VALUE ? Double.NaN : originy \/ pScaleY,\n+                            originxAbs == View.GESTURE_NO_VALUE ? Double.NaN : sx + (originxAbs - spx) \/ pScaleX,\n+                            originyAbs == View.GESTURE_NO_VALUE ? Double.NaN : sy + (originyAbs - spy) \/ pScaleY,\n+                            (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n+                            (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n+                            (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n+                            (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n+                            isDirect, isInertia);\n+                }\n+                return null;\n@@ -1187,1 +1155,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1203,33 +1170,29 @@\n-                return AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                    if (scene.sceneListener != null) {\n-                        EventType<SwipeEvent> eventType;\n-                        switch (dir) {\n-                            case SwipeGesture.DIR_UP:\n-                                eventType = SwipeEvent.SWIPE_UP;\n-                                break;\n-                            case SwipeGesture.DIR_DOWN:\n-                                eventType = SwipeEvent.SWIPE_DOWN;\n-                                break;\n-                            case SwipeGesture.DIR_LEFT:\n-                                eventType = SwipeEvent.SWIPE_LEFT;\n-                                break;\n-                            case SwipeGesture.DIR_RIGHT:\n-                                eventType = SwipeEvent.SWIPE_RIGHT;\n-                                break;\n-                            default:\n-                                throw new RuntimeException(\"Unknown swipe event direction: \" + dir);\n-                        }\n-                        final Window w = view.getWindow();\n-                        double pScaleX, pScaleY, spx, spy, sx, sy;\n-                        if (w != null) {\n-                            pScaleX = w.getPlatformScaleX();\n-                            pScaleY = w.getPlatformScaleY();\n-                            Screen scr = w.getScreen();\n-                            if (scr != null) {\n-                                spx = scr.getPlatformX();\n-                                spy = scr.getPlatformY();\n-                                sx = scr.getX();\n-                                sy = scr.getY();\n-                            } else {\n-                                spx = spy = sx = sy = 0.0;\n-                            }\n+                if (scene.sceneListener != null) {\n+                    EventType<SwipeEvent> eventType;\n+                    switch (dir) {\n+                        case SwipeGesture.DIR_UP:\n+                            eventType = SwipeEvent.SWIPE_UP;\n+                            break;\n+                        case SwipeGesture.DIR_DOWN:\n+                            eventType = SwipeEvent.SWIPE_DOWN;\n+                            break;\n+                        case SwipeGesture.DIR_LEFT:\n+                            eventType = SwipeEvent.SWIPE_LEFT;\n+                            break;\n+                        case SwipeGesture.DIR_RIGHT:\n+                            eventType = SwipeEvent.SWIPE_RIGHT;\n+                            break;\n+                        default:\n+                            throw new RuntimeException(\"Unknown swipe event direction: \" + dir);\n+                    }\n+                    final Window w = view.getWindow();\n+                    double pScaleX, pScaleY, spx, spy, sx, sy;\n+                    if (w != null) {\n+                        pScaleX = w.getPlatformScaleX();\n+                        pScaleY = w.getPlatformScaleY();\n+                        Screen scr = w.getScreen();\n+                        if (scr != null) {\n+                            spx = scr.getPlatformX();\n+                            spy = scr.getPlatformY();\n+                            sx = scr.getX();\n+                            sy = scr.getY();\n@@ -1237,1 +1200,0 @@\n-                            pScaleX = pScaleY = 1.0;\n@@ -1240,10 +1202,3 @@\n-                        scene.sceneListener.swipeEvent(eventType, touchCount,\n-                                x == View.GESTURE_NO_VALUE ? Double.NaN : x \/ pScaleX,\n-                                y == View.GESTURE_NO_VALUE ? Double.NaN : y \/ pScaleY,\n-                                xAbs == View.GESTURE_NO_VALUE ? Double.NaN : sx + (xAbs - spx) \/ pScaleX,\n-                                yAbs == View.GESTURE_NO_VALUE ? Double.NaN : sy + (yAbs - spy) \/ pScaleY,\n-                                (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n-                                (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n-                                (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n-                                (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n-                                isDirect);\n+                    } else {\n+                        pScaleX = pScaleY = 1.0;\n+                        spx = spy = sx = sy = 0.0;\n@@ -1251,2 +1206,12 @@\n-                    return null;\n-                }, scene.getAccessControlContext());\n+                    scene.sceneListener.swipeEvent(eventType, touchCount,\n+                            x == View.GESTURE_NO_VALUE ? Double.NaN : x \/ pScaleX,\n+                            y == View.GESTURE_NO_VALUE ? Double.NaN : y \/ pScaleY,\n+                            xAbs == View.GESTURE_NO_VALUE ? Double.NaN : sx + (xAbs - spx) \/ pScaleX,\n+                            yAbs == View.GESTURE_NO_VALUE ? Double.NaN : sy + (yAbs - spy) \/ pScaleY,\n+                            (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n+                            (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n+                            (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n+                            (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n+                            isDirect);\n+                }\n+                return null;\n@@ -1264,1 +1229,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1278,11 +1242,9 @@\n-                return AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                    if (scene.sceneListener != null) {\n-                        scene.sceneListener.touchEventBegin(time, touchEventCount,\n-                                isDirect,\n-                                (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n-                                (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n-                                (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n-                                (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0);\n-                    }\n-                    return null;\n-                }, scene.getAccessControlContext());\n+                if (scene.sceneListener != null) {\n+                    scene.sceneListener.touchEventBegin(time, touchEventCount,\n+                            isDirect,\n+                            (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n+                            (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n+                            (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n+                            (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0);\n+                }\n+                return null;\n@@ -1302,1 +1264,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1316,33 +1277,29 @@\n-                    return AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                    if (scene.sceneListener != null) {\n-                        TouchPoint.State state;\n-                        switch (type) {\n-                            case TouchEvent.TOUCH_PRESSED:\n-                                state = TouchPoint.State.PRESSED;\n-                                break;\n-                            case TouchEvent.TOUCH_MOVED:\n-                                state = TouchPoint.State.MOVED;\n-                                break;\n-                            case TouchEvent.TOUCH_STILL:\n-                                state = TouchPoint.State.STATIONARY;\n-                                break;\n-                            case TouchEvent.TOUCH_RELEASED:\n-                                state = TouchPoint.State.RELEASED;\n-                                break;\n-                            default:\n-                                throw new RuntimeException(\"Unknown touch state: \" + type);\n-                        }\n-                        final Window w = view.getWindow();\n-                        double pScaleX, pScaleY, spx, spy, sx, sy;\n-                        if (w != null) {\n-                            pScaleX = w.getPlatformScaleX();\n-                            pScaleY = w.getPlatformScaleY();\n-                            Screen scr = w.getScreen();\n-                            if (scr != null) {\n-                                spx = scr.getPlatformX();\n-                                spy = scr.getPlatformY();\n-                                sx = scr.getX();\n-                                sy = scr.getY();\n-                            } else {\n-                                spx = spy = sx = sy = 0.0;\n-                            }\n+                if (scene.sceneListener != null) {\n+                    TouchPoint.State state;\n+                    switch (type) {\n+                        case TouchEvent.TOUCH_PRESSED:\n+                            state = TouchPoint.State.PRESSED;\n+                            break;\n+                        case TouchEvent.TOUCH_MOVED:\n+                            state = TouchPoint.State.MOVED;\n+                            break;\n+                        case TouchEvent.TOUCH_STILL:\n+                            state = TouchPoint.State.STATIONARY;\n+                            break;\n+                        case TouchEvent.TOUCH_RELEASED:\n+                            state = TouchPoint.State.RELEASED;\n+                            break;\n+                        default:\n+                            throw new RuntimeException(\"Unknown touch state: \" + type);\n+                    }\n+                    final Window w = view.getWindow();\n+                    double pScaleX, pScaleY, spx, spy, sx, sy;\n+                    if (w != null) {\n+                        pScaleX = w.getPlatformScaleX();\n+                        pScaleY = w.getPlatformScaleY();\n+                        Screen scr = w.getScreen();\n+                        if (scr != null) {\n+                            spx = scr.getPlatformX();\n+                            spy = scr.getPlatformY();\n+                            sx = scr.getX();\n+                            sy = scr.getY();\n@@ -1350,1 +1307,0 @@\n-                            pScaleX = pScaleY = 1.0;\n@@ -1353,4 +1309,3 @@\n-                        scene.sceneListener.touchEventNext(state, touchId,\n-                                x \/ pScaleX, y \/ pScaleY,\n-                                sx + (xAbs - spx) \/ pScaleX,\n-                                sy + (yAbs - spy) \/ pScaleY);\n+                    } else {\n+                        pScaleX = pScaleY = 1.0;\n+                        spx = spy = sx = sy = 0.0;\n@@ -1358,2 +1313,6 @@\n-                    return null;\n-                }, scene.getAccessControlContext());\n+                    scene.sceneListener.touchEventNext(state, touchId,\n+                            x \/ pScaleX, y \/ pScaleY,\n+                            sx + (xAbs - spx) \/ pScaleX,\n+                            sy + (yAbs - spy) \/ pScaleY);\n+                }\n+                return null;\n@@ -1373,1 +1332,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1384,6 +1342,4 @@\n-                return AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                    if (scene.sceneListener != null) {\n-                        scene.sceneListener.touchEventEnd();\n-                    }\n-                    return null;\n-                }, scene.getAccessControlContext());\n+                if (scene.sceneListener != null) {\n+                    scene.sceneListener.touchEventEnd();\n+                }\n+                return null;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/GlassViewEventHandler.java","additions":298,"deletions":342,"binary":false,"changes":640,"status":"modified"},{"patch":"@@ -36,3 +36,1 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n+import java.util.function.Supplier;\n@@ -40,1 +38,1 @@\n-class GlassWindowEventHandler extends Window.EventHandler implements PrivilegedAction<Void> {\n+class GlassWindowEventHandler extends Window.EventHandler implements Supplier<Void> {\n@@ -52,1 +50,1 @@\n-    public Void run() {\n+    public Void get() {\n@@ -158,1 +156,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -162,5 +159,2 @@\n-            AccessControlContext acc = stage.getAccessControlContext();\n-            return AccessController.doPrivileged((PrivilegedAction<Void>)() -> {\n-                stage.stageListener.changedAlwaysOnTop(level != Level.NORMAL);\n-                return null;\n-            } , acc);\n+            stage.stageListener.changedAlwaysOnTop(level != Level.NORMAL);\n+            return null;\n@@ -170,1 +164,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -176,4 +169,1 @@\n-        QuantumToolkit.runWithoutRenderLock(() -> {\n-            AccessControlContext acc = stage.getAccessControlContext();\n-            return AccessController.doPrivileged(this, acc);\n-        });\n+        QuantumToolkit.runWithoutRenderLock(this);\n@@ -182,1 +172,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -195,5 +184,2 @@\n-            AccessControlContext acc = stage.getAccessControlContext();\n-            return AccessController.doPrivileged((PrivilegedAction<Void>)() -> {\n-                stage.stageListener.changedScreen(oldScreen, newScreen);\n-                return null;\n-            } , acc);\n+            stage.stageListener.changedScreen(oldScreen, newScreen);\n+            return null;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/GlassWindowEventHandler.java","additions":8,"deletions":22,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -88,9 +88,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String perfLoggingProp =\n-            java.security.AccessController.doPrivileged(\n-                    new java.security.PrivilegedAction<String>() {\n-                        @Override\n-                        public String run() {\n-                            return System.getProperty(\"sun.perflog\");\n-                        }\n-                    });\n+        String perfLoggingProp = System.getProperty(\"sun.perflog\");\n@@ -101,9 +93,1 @@\n-            @SuppressWarnings(\"removal\")\n-            String perfNanoProp =\n-                java.security.AccessController.doPrivileged(\n-                    new java.security.PrivilegedAction<String>() {\n-                        @Override\n-                        public String run() {\n-                            return System.getProperty(\"sun.perflog.nano\");\n-                        }\n-                    });\n+            String perfNanoProp = System.getProperty(\"sun.perflog.nano\");\n@@ -120,17 +104,9 @@\n-                    @SuppressWarnings(\"removal\")\n-                    var dummy = java.security.AccessController.doPrivileged(\n-                    new java.security.PrivilegedAction<Void>() {\n-                        @Override\n-                        public Void run() {\n-                            try {\n-                                File logFile = new File(logFileName);\n-                                logFile.createNewFile();\n-                                logWriter = new FileWriter(logFile);\n-                            } catch (Exception e) {\n-                                System.out.println(e + \": Creating logfile \" +\n-                                                   logFileName +\n-                                                   \".  Log to console\");\n-                            }\n-                            return null;\n-                        }\n-                    });\n+                    try {\n+                        File logFile = new File(logFileName);\n+                        logFile.createNewFile();\n+                        logWriter = new FileWriter(logFile);\n+                    } catch (Exception e) {\n+                        System.out.println(e + \": Creating logfile \" +\n+                                           logFileName +\n+                                           \".  Log to console\");\n+                    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/PerformanceLogger.java","additions":11,"deletions":35,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -31,3 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -49,33 +46,11 @@\n-        @SuppressWarnings(\"removal\")\n-        PerformanceTrackerHelper trackerImpl = AccessController.doPrivileged(\n-                new PrivilegedAction<PerformanceTrackerHelper>() {\n-\n-                    @Override\n-                    public PerformanceTrackerHelper run() {\n-                        try {\n-                            if (PrismSettings.perfLog != null) {\n-                                final PerformanceTrackerHelper trackerImpl =\n-                                        new PerformanceTrackerDefaultImpl();\n-\n-                                if (PrismSettings.perfLogExitFlush) {\n-                                    Runtime.getRuntime().addShutdownHook(\n-                                            new Thread() {\n-\n-                                                @Override\n-                                                public void run() {\n-                                                    trackerImpl.outputLog();\n-                                                }\n-                                            });\n-                                }\n-\n-                                return trackerImpl;\n-                            }\n-                        } catch (Throwable t) {\n-                        }\n-\n-                        return null;\n-                    }\n-                });\n-\n-        if (trackerImpl == null) {\n-            trackerImpl = new PerformanceTrackerDummyImpl();\n+        try {\n+            if (PrismSettings.perfLog != null) {\n+                final PerformanceTrackerHelper trackerImpl = new PerformanceTrackerDefaultImpl();\n+                if (PrismSettings.perfLogExitFlush) {\n+                    Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n+                        trackerImpl.outputLog();\n+                    }));\n+                }\n+                return trackerImpl;\n+            }\n+        }catch (Throwable t) {\n@@ -84,1 +59,1 @@\n-        return trackerImpl;\n+        return new PerformanceTrackerDummyImpl();\n@@ -133,3 +108,1 @@\n-                    @SuppressWarnings(\"removal\")\n-                    String launchTimeString = AccessController.doPrivileged(\n-                            (PrivilegedAction<String>) () -> System.getProperty(\"launchTime\"));\n+                    String launchTimeString = System.getProperty(\"launchTime\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/PerformanceTrackerHelper.java","additions":13,"deletions":40,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -42,6 +42,0 @@\n-import java.lang.reflect.UndeclaredThrowableException;\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -241,3 +235,0 @@\n-        @SuppressWarnings(\"removal\")\n-        private final AccessControlContext acc;\n-\n@@ -248,1 +239,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -259,1 +249,0 @@\n-            this.acc = AccessController.getContext();\n@@ -267,1 +256,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -270,12 +258,1 @@\n-            try {\n-                return AccessController.doPrivileged(\n-                        (PrivilegedExceptionAction<PrismImageLoader2>) () -> AsyncImageLoader.super.call(), acc);\n-            } catch (final PrivilegedActionException e) {\n-                final Throwable cause = e.getCause();\n-\n-                if (cause instanceof IOException) {\n-                    throw (IOException) cause;\n-                }\n-\n-                throw new UndeclaredThrowableException(cause);\n-            }\n+            return AsyncImageLoader.super.call();\n@@ -290,1 +267,0 @@\n-            @SuppressWarnings(\"removal\")\n@@ -292,20 +268,13 @@\n-                    AccessController.doPrivileged(\n-                            (PrivilegedAction<ThreadGroup>) () -> new ThreadGroup(\n-                                QuantumToolkit.getFxUserThread()\n-                                              .getThreadGroup(),\n-                                \"Background image loading thread pool\")\n-                    );\n-\n-            @SuppressWarnings(\"removal\")\n-            final ThreadFactory bgLoadingThreadFactory =\n-                    runnable -> AccessController.doPrivileged(\n-                            (PrivilegedAction<Thread>) () -> {\n-                                final Thread newThread =\n-                                        new Thread(bgLoadingThreadGroup,\n-                                                   runnable);\n-                                newThread.setPriority(\n-                                              Thread.MIN_PRIORITY);\n-\n-                                return newThread;\n-                            }\n-                    );\n+                    new ThreadGroup(QuantumToolkit.getFxUserThread()\n+                            .getThreadGroup(),\n+                            \"Background image loading thread pool\");\n+\n+            final ThreadFactory bgLoadingThreadFactory = runnable -> {\n+                final Thread newThread\n+                        = new Thread(bgLoadingThreadGroup,\n+                                runnable);\n+                newThread.setPriority(\n+                        Thread.MIN_PRIORITY);\n+\n+                return newThread;\n+            };\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/PrismImageLoader2.java","additions":14,"deletions":45,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -58,1 +56,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -60,2 +57,1 @@\n-        AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> Boolean.getBoolean(\"decora.purgatory\"));\n-\n+        Boolean.getBoolean(\"decora.purgatory\");\n@@ -136,1 +132,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -139,11 +134,8 @@\n-            _renderer =\n-                AccessController.doPrivileged((PrivilegedAction<Thread>) () -> {\n-                    Thread th = new Thread(pipeline);\n-                    th.setName(\"QuantumRenderer-\" + threadNumber.getAndIncrement());\n-                    th.setDaemon(true);\n-                    th.setUncaughtExceptionHandler((t, thr) -> {\n-                        System.err.println(t.getName() + \" uncaught: \" + thr.getClass().getName());\n-                        thr.printStackTrace();\n-                    });\n-                    return th;\n-                });\n+            Thread th = new Thread(pipeline);\n+            th.setName(\"QuantumRenderer-\" + threadNumber.getAndIncrement());\n+            th.setDaemon(true);\n+            th.setUncaughtExceptionHandler((t, thr) -> {\n+                System.err.println(t.getName() + \" uncaught: \" + thr.getClass().getName());\n+                thr.printStackTrace();\n+            });\n+            _renderer = th;\n@@ -196,1 +188,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -198,4 +189,2 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            shutdown();\n-            return null;\n-        });\n+        shutdown();\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/QuantumRenderer.java","additions":11,"deletions":22,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -64,2 +64,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -139,21 +137,1 @@\n-    @SuppressWarnings(\"removal\")\n-    public static final boolean verbose =\n-            AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> Boolean.getBoolean(\"quantum.verbose\"));\n-\n-    @SuppressWarnings(\"removal\")\n-    public static final boolean pulseDebug =\n-            AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> Boolean.getBoolean(\"quantum.pulse\"));\n-\n-    @SuppressWarnings(\"removal\")\n-    private static final boolean multithreaded =\n-            AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> {\n-                \/\/ If it is not specified, or it is true, then it should\n-                \/\/ be true. Otherwise it should be false.\n-                String value = System.getProperty(\"quantum.multithreaded\");\n-                if (value == null) return true;\n-                final boolean result = Boolean.parseBoolean(value);\n-                if (verbose) {\n-                    System.out.println(result ? \"Multi-Threading Enabled\" : \"Multi-Threading Disabled\");\n-                }\n-                return result;\n-            });\n+    public static final boolean verbose = Boolean.getBoolean(\"quantum.verbose\");\n@@ -161,3 +139,1 @@\n-    @SuppressWarnings(\"removal\")\n-    private static boolean debug =\n-            AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> Boolean.getBoolean(\"quantum.debug\"));\n+    public static final boolean pulseDebug = Boolean.getBoolean(\"quantum.pulse\");\n@@ -165,3 +141,11 @@\n-    @SuppressWarnings(\"removal\")\n-    private static Integer pulseHZ =\n-            AccessController.doPrivileged((PrivilegedAction<Integer>) () -> Integer.getInteger(\"javafx.animation.pulse\"));\n+    private static final boolean multithreaded = ((Supplier<Boolean>) () -> {\n+        \/\/ If it is not specified, or it is true, then it should\n+        \/\/ be true. Otherwise it should be false.\n+        String value = System.getProperty(\"quantum.multithreaded\");\n+        if (value == null) return true;\n+        final boolean result = Boolean.parseBoolean(value);\n+        if (verbose) {\n+            System.out.println(result ? \"Multi-Threading Enabled\" : \"Multi-Threading Disabled\");\n+        }\n+        return result;\n+    }).get();\n@@ -169,7 +153,1 @@\n-    @SuppressWarnings(\"removal\")\n-    static final boolean liveResize =\n-            AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> {\n-                boolean isSWT = \"swt\".equals(System.getProperty(\"glass.platform\"));\n-                String result = (PlatformUtil.isMac() || PlatformUtil.isWindows()) && !isSWT ? \"true\" : \"false\";\n-                return \"true\".equals(System.getProperty(\"javafx.live.resize\", result));\n-            });\n+    private static boolean debug = Boolean.getBoolean(\"quantum.debug\");\n@@ -177,16 +155,1 @@\n-    @SuppressWarnings(\"removal\")\n-    static final boolean drawInPaint =\n-            AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> {\n-                boolean isSWT = \"swt\".equals(System.getProperty(\"glass.platform\"));\n-                String result = PlatformUtil.isMac() && isSWT ? \"true\" : \"false\";\n-                return \"true\".equals(System.getProperty(\"javafx.draw.in.paint\", result));});\n-\n-    @SuppressWarnings(\"removal\")\n-    private static boolean singleThreaded =\n-            AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> {\n-                Boolean result = Boolean.getBoolean(\"quantum.singlethreaded\");\n-                if (\/*verbose &&*\/ result) {\n-                    System.out.println(\"Warning: Single GUI Threadiong is enabled, FPS should be slower\");\n-                }\n-                return result;\n-            });\n+    private static Integer pulseHZ = Integer.getInteger(\"javafx.animation.pulse\");\n@@ -194,9 +157,27 @@\n-    @SuppressWarnings(\"removal\")\n-    private static boolean noRenderJobs =\n-            AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> {\n-                Boolean result = Boolean.getBoolean(\"quantum.norenderjobs\");\n-                if (\/*verbose &&*\/ result) {\n-                    System.out.println(\"Warning: Quantum will not submit render jobs, nothing should draw\");\n-                }\n-                return result;\n-            });\n+    static final boolean liveResize = ((Supplier<Boolean>) () -> {\n+        boolean isSWT = \"swt\".equals(System.getProperty(\"glass.platform\"));\n+        String result = (PlatformUtil.isMac() || PlatformUtil.isWindows()) && !isSWT ? \"true\" : \"false\";\n+        return \"true\".equals(System.getProperty(\"javafx.live.resize\", result));\n+    }).get();\n+\n+    static final boolean drawInPaint = ((Supplier<Boolean>) () -> {\n+        boolean isSWT = \"swt\".equals(System.getProperty(\"glass.platform\"));\n+        String result = PlatformUtil.isMac() && isSWT ? \"true\" : \"false\";\n+        return \"true\".equals(System.getProperty(\"javafx.draw.in.paint\", result));\n+    }).get();\n+\n+    private static final boolean singleThreaded = ((Supplier<Boolean>) () -> {\n+        Boolean result = Boolean.getBoolean(\"quantum.singlethreaded\");\n+        if (\/*verbose &&*\/ result) {\n+            System.out.println(\"Warning: Single GUI Threadiong is enabled, FPS should be slower\");\n+        }\n+        return result;\n+    }).get();\n+\n+    private static final boolean noRenderJobs = ((Supplier<Boolean>) () -> {\n+        Boolean result = Boolean.getBoolean(\"quantum.norenderjobs\");\n+        if (\/*verbose &&*\/ result) {\n+            System.out.println(\"Warning: Quantum will not submit render jobs, nothing should draw\");\n+        }\n+        return result;\n+    }).get();\n@@ -283,5 +264,1 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            Runtime.getRuntime().addShutdownHook(shutdownHook);\n-            return null;\n-        });\n+        Runtime.getRuntime().addShutdownHook(shutdownHook);\n@@ -879,1 +856,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -886,4 +862,1 @@\n-                AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                    Runtime.getRuntime().removeShutdownHook(shutdownHook);\n-                    return null;\n-                });\n+                Runtime.getRuntime().removeShutdownHook(shutdownHook);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/QuantumToolkit.java","additions":44,"deletions":71,"binary":false,"changes":115,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -53,12 +51,8 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            String s = System.getProperty(\"com.sun.javafx.gestures.rotate.threshold\");\n-            if (s != null) {\n-                ROTATATION_THRESHOLD = Double.valueOf(s);\n-            }\n-            s = System.getProperty(\"com.sun.javafx.gestures.rotate.inertia\");\n-            if (s != null) {\n-                ROTATION_INERTIA_ENABLED = Boolean.valueOf(s);\n-            }\n-            return null;\n-        });\n+        String s = System.getProperty(\"com.sun.javafx.gestures.rotate.threshold\");\n+        if (s != null) {\n+            ROTATATION_THRESHOLD = Double.valueOf(s);\n+        }\n+        s = System.getProperty(\"com.sun.javafx.gestures.rotate.inertia\");\n+        if (s != null) {\n+            ROTATION_INERTIA_ENABLED = Boolean.valueOf(s);\n+        }\n@@ -317,1 +311,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -319,15 +312,12 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            if (scene.sceneListener != null) {\n-                scene.sceneListener.rotateEvent(RotateEvent.ROTATION_STARTED,\n-                    0, 0,\n-                    centerX, centerY,\n-                    centerAbsX, centerAbsY,\n-                    (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n-                    direct,\n-                    false \/*inertia*\/);\n-            }\n-            return null;\n-        }, scene.getAccessControlContext());\n+        if (scene.sceneListener != null) {\n+            scene.sceneListener.rotateEvent(RotateEvent.ROTATION_STARTED,\n+                0, 0,\n+                centerX, centerY,\n+                centerAbsX, centerAbsY,\n+                (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n+                (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n+                (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n+                (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n+                direct,\n+                false \/*inertia*\/);\n+        }\n@@ -336,1 +326,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -338,14 +327,11 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            if (scene.sceneListener != null) {\n-                scene.sceneListener.rotateEvent(RotateEvent.ROTATE,\n-                    currentRotation, totalRotation,\n-                    centerX, centerY,\n-                    centerAbsX, centerAbsY,\n-                    (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n-                    direct, isInertia);\n-            }\n-            return null;\n-        }, scene.getAccessControlContext());\n+        if (scene.sceneListener != null) {\n+            scene.sceneListener.rotateEvent(RotateEvent.ROTATE,\n+                currentRotation, totalRotation,\n+                centerX, centerY,\n+                centerAbsX, centerAbsY,\n+                (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n+                (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n+                (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n+                (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n+                direct, isInertia);\n+        }\n@@ -354,1 +340,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -356,15 +341,12 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            if (scene.sceneListener != null) {\n-                scene.sceneListener.rotateEvent(RotateEvent.ROTATION_FINISHED,\n-                    0, totalRotation,\n-                    centerX, centerY,\n-                    centerAbsX, centerAbsY,\n-                    (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n-                    direct,\n-                    false \/*inertia*\/);\n-            }\n-            return null;\n-        }, scene.getAccessControlContext());\n+        if (scene.sceneListener != null) {\n+            scene.sceneListener.rotateEvent(RotateEvent.ROTATION_FINISHED,\n+                0, totalRotation,\n+                centerX, centerY,\n+                centerAbsX, centerAbsY,\n+                (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n+                (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n+                (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n+                (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n+                direct,\n+                false \/*inertia*\/);\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/RotateGestureRecognizer.java","additions":43,"deletions":61,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -51,12 +49,8 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            String s = System.getProperty(\"com.sun.javafx.gestures.scroll.threshold\");\n-            if (s != null) {\n-                SCROLL_THRESHOLD = Double.valueOf(s);\n-            }\n-            s = System.getProperty(\"com.sun.javafx.gestures.scroll.inertia\");\n-            if (s != null) {\n-                SCROLL_INERTIA_ENABLED = Boolean.valueOf(s);\n-            }\n-            return null;\n-        });\n+        String s = System.getProperty(\"com.sun.javafx.gestures.scroll.threshold\");\n+        if (s != null) {\n+            SCROLL_THRESHOLD = Double.valueOf(s);\n+        }\n+        s = System.getProperty(\"com.sun.javafx.gestures.scroll.inertia\");\n+        if (s != null) {\n+            SCROLL_INERTIA_ENABLED = Boolean.valueOf(s);\n+        }\n@@ -263,1 +257,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -265,18 +258,15 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            if (scene.sceneListener != null) {\n-                scene.sceneListener.scrollEvent(ScrollEvent.SCROLL_STARTED,\n-                    0, 0,\n-                    0, 0,\n-                    1 \/*xMultiplier*\/, 1 \/*yMultiplier*\/,\n-                    touchCount,\n-                    0 \/*scrollTextX*\/, 0 \/*scrollTextY*\/,\n-                    0 \/*defaultTextX*\/, 0 \/*defaultTextY*\/,\n-                    centerX, centerY, xAbs, yAbs,\n-                    (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n-                    direct, false \/*inertia*\/);\n-            }\n-            return null;\n-        }, scene.getAccessControlContext());\n+        if (scene.sceneListener != null) {\n+            scene.sceneListener.scrollEvent(ScrollEvent.SCROLL_STARTED,\n+                0, 0,\n+                0, 0,\n+                1 \/*xMultiplier*\/, 1 \/*yMultiplier*\/,\n+                touchCount,\n+                0 \/*scrollTextX*\/, 0 \/*scrollTextY*\/,\n+                0 \/*defaultTextX*\/, 0 \/*defaultTextY*\/,\n+                centerX, centerY, xAbs, yAbs,\n+                (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n+                (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n+                (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n+                (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n+                direct, false \/*inertia*\/);\n+        }\n@@ -285,1 +275,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -287,18 +276,15 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            if (scene.sceneListener != null) {\n-                scene.sceneListener.scrollEvent(ScrollEvent.SCROLL,\n-                    deltaX, deltaY,\n-                    totalDeltaX, totalDeltaY,\n-                    1 \/*xMultiplier*\/, 1 \/*yMultiplier*\/,\n-                    touchCount,\n-                    0 \/*scrollTextX*\/, 0 \/*scrollTextY*\/,\n-                    0 \/*defaultTextX*\/, 0 \/*defaultTextY*\/,\n-                    centerX, centerY, xAbs, yAbs,\n-                    (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n-                    direct, isInertia);\n-            }\n-            return null;\n-        }, scene.getAccessControlContext());\n+        if (scene.sceneListener != null) {\n+            scene.sceneListener.scrollEvent(ScrollEvent.SCROLL,\n+                deltaX, deltaY,\n+                totalDeltaX, totalDeltaY,\n+                1 \/*xMultiplier*\/, 1 \/*yMultiplier*\/,\n+                touchCount,\n+                0 \/*scrollTextX*\/, 0 \/*scrollTextY*\/,\n+                0 \/*defaultTextX*\/, 0 \/*defaultTextY*\/,\n+                centerX, centerY, xAbs, yAbs,\n+                (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n+                (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n+                (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n+                (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n+                direct, isInertia);\n+        }\n@@ -307,1 +293,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -309,18 +294,15 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            if (scene.sceneListener != null) {\n-                scene.sceneListener.scrollEvent(ScrollEvent.SCROLL_FINISHED,\n-                    0, 0,\n-                    totalDeltaX, totalDeltaY,\n-                    1 \/*xMultiplier*\/, 1 \/*yMultiplier*\/,\n-                    touchCount,\n-                    0 \/*scrollTextX*\/, 0 \/*scrollTextY*\/,\n-                    0 \/*defaultTextX*\/, 0 \/*defaultTextY*\/,\n-                    centerX, centerY, xAbs, yAbs,\n-                    (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n-                    direct, false \/*inertia*\/);\n-            }\n-            return null;\n-        }, scene.getAccessControlContext());\n+        if (scene.sceneListener != null) {\n+            scene.sceneListener.scrollEvent(ScrollEvent.SCROLL_FINISHED,\n+                0, 0,\n+                totalDeltaX, totalDeltaY,\n+                1 \/*xMultiplier*\/, 1 \/*yMultiplier*\/,\n+                touchCount,\n+                0 \/*scrollTextX*\/, 0 \/*scrollTextY*\/,\n+                0 \/*defaultTextX*\/, 0 \/*defaultTextY*\/,\n+                centerX, centerY, xAbs, yAbs,\n+                (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n+                (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n+                (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n+                (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n+                direct, false \/*inertia*\/);\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/ScrollGestureRecognizer.java","additions":53,"deletions":71,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -151,1 +149,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -162,13 +159,10 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            if (scene.sceneListener != null) {\n-                scene.sceneListener.swipeEvent(swipeType, touchCount,\n-                    cc.getX(), cc.getY(),\n-                    cc.getAbsX(), cc.getAbsY(),\n-                    (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n-                    isDirect);\n-            }\n-            return null;\n-        }, scene.getAccessControlContext());\n+        if (scene.sceneListener != null) {\n+            scene.sceneListener.swipeEvent(swipeType, touchCount,\n+                cc.getX(), cc.getY(),\n+                cc.getAbsX(), cc.getAbsY(),\n+                (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n+                (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n+                (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n+                (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n+                isDirect);\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/SwipeGestureRecognizer.java","additions":10,"deletions":16,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.security.AccessController;\n@@ -31,1 +30,0 @@\n-import java.security.PrivilegedAction;\n@@ -743,1 +741,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -753,6 +750,3 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            if (stageListener != null) {\n-                stageListener.changedFullscreen(fs);\n-            }\n-            return null;\n-        }, getAccessControlContext());\n+        if (stageListener != null) {\n+            stageListener.changedFullscreen(fs);\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/WindowStage.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -55,12 +53,8 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            String s = System.getProperty(\"com.sun.javafx.gestures.zoom.threshold\");\n-            if (s != null) {\n-                ZOOM_FACTOR_THRESHOLD = Double.valueOf(s);\n-            }\n-            s = System.getProperty(\"com.sun.javafx.gestures.zoom.inertia\");\n-            if (s != null) {\n-                ZOOM_INERTIA_ENABLED = Boolean.valueOf(s);\n-            }\n-            return null;\n-        });\n+        String s = System.getProperty(\"com.sun.javafx.gestures.zoom.threshold\");\n+        if (s != null) {\n+            ZOOM_FACTOR_THRESHOLD = Double.valueOf(s);\n+        }\n+        s = System.getProperty(\"com.sun.javafx.gestures.zoom.inertia\");\n+        if (s != null) {\n+            ZOOM_INERTIA_ENABLED = Boolean.valueOf(s);\n+        }\n@@ -291,1 +285,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -293,15 +286,12 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            if (scene.sceneListener != null) {\n-                scene.sceneListener.zoomEvent(ZoomEvent.ZOOM_STARTED,\n-                    1, 1,\n-                    centerX, centerY,\n-                    centerAbsX, centerAbsY,\n-                    (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n-                    direct,\n-                    false \/*inertia*\/);\n-            }\n-            return null;\n-        }, scene.getAccessControlContext());\n+        if (scene.sceneListener != null) {\n+            scene.sceneListener.zoomEvent(ZoomEvent.ZOOM_STARTED,\n+                1, 1,\n+                centerX, centerY,\n+                centerAbsX, centerAbsY,\n+                (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n+                (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n+                (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n+                (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n+                direct,\n+                false \/*inertia*\/);\n+        }\n@@ -310,1 +300,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -312,14 +301,11 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            if (scene.sceneListener != null) {\n-                scene.sceneListener.zoomEvent(ZoomEvent.ZOOM,\n-                    zoomFactor, totalZoomFactor,\n-                    centerX, centerY,\n-                    centerAbsX, centerAbsY,\n-                    (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n-                    direct, isInertia);\n-            }\n-            return null;\n-        }, scene.getAccessControlContext());\n+        if (scene.sceneListener != null) {\n+            scene.sceneListener.zoomEvent(ZoomEvent.ZOOM,\n+                zoomFactor, totalZoomFactor,\n+                centerX, centerY,\n+                centerAbsX, centerAbsY,\n+                (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n+                (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n+                (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n+                (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n+                direct, isInertia);\n+        }\n@@ -328,1 +314,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -330,15 +315,12 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            if (scene.sceneListener != null) {\n-                scene.sceneListener.zoomEvent(ZoomEvent.ZOOM_FINISHED,\n-                    1, totalZoomFactor,\n-                    centerX, centerY,\n-                    centerAbsX, centerAbsY,\n-                    (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n-                    (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n-                    direct,\n-                    false \/*inertia*\/);\n-            }\n-            return null;\n-        }, scene.getAccessControlContext());\n+        if (scene.sceneListener != null) {\n+            scene.sceneListener.zoomEvent(ZoomEvent.ZOOM_FINISHED,\n+                1, totalZoomFactor,\n+                centerX, centerY,\n+                centerAbsX, centerAbsY,\n+                (modifiers & KeyEvent.MODIFIER_SHIFT) != 0,\n+                (modifiers & KeyEvent.MODIFIER_CONTROL) != 0,\n+                (modifiers & KeyEvent.MODIFIER_ALT) != 0,\n+                (modifiers & KeyEvent.MODIFIER_WINDOWS) != 0,\n+                direct,\n+                false \/*inertia*\/);\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/ZoomGestureRecognizer.java","additions":43,"deletions":61,"binary":false,"changes":104,"status":"modified"}]}