{"files":[{"patch":"@@ -1,66 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<classpath>\n-\t<classpathentry kind=\"src\" path=\"src\"\/>\n-\t<classpathentry kind=\"src\" output=\"testbin\" path=\"test\">\n-\t\t<attributes>\n-\t\t\t<attribute name=\"test\" value=\"true\"\/>\n-\t\t\t<attribute name=\"optional\" value=\"true\"\/>\n-\t\t<\/attributes>\n-\t<\/classpathentry>\n-\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.junit.JUNIT_CONTAINER\/5\">\n-\t\t<attributes>\n-\t\t\t<attribute name=\"test\" value=\"true\"\/>\n-\t\t<\/attributes>\n-\t<\/classpathentry>\n-\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\">\n-\t\t<attributes>\n-\t\t\t<attribute name=\"module\" value=\"true\"\/>\n-\t\t<\/attributes>\n-\t<\/classpathentry>\n-\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/base\">\n-\t\t<attributes>\n-\t\t\t<attribute name=\"module\" value=\"true\"\/>\n-\t\t<\/attributes>\n-\t<\/classpathentry>\n-\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/controls\">\n-\t\t<attributes>\n-\t\t\t<attribute name=\"module\" value=\"true\"\/>\n-\t\t<\/attributes>\n-\t<\/classpathentry>\n-\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/fxml\">\n-\t\t<attributes>\n-\t\t\t<attribute name=\"module\" value=\"true\"\/>\n-\t\t<\/attributes>\n-\t<\/classpathentry>\n-\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/graphics\">\n-\t\t<attributes>\n-\t\t\t<attribute name=\"module\" value=\"true\"\/>\n-\t\t<\/attributes>\n-\t<\/classpathentry>\n-\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/media\">\n-\t\t<attributes>\n-\t\t\t<attribute name=\"module\" value=\"true\"\/>\n-\t\t<\/attributes>\n-\t<\/classpathentry>\n-\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/swing\">\n-\t\t<attributes>\n-\t\t\t<attribute name=\"module\" value=\"true\"\/>\n-\t\t<\/attributes>\n-\t<\/classpathentry>\n-\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/web\">\n-\t\t<attributes>\n-\t\t\t<attribute name=\"module\" value=\"true\"\/>\n-\t\t<\/attributes>\n-\t<\/classpathentry>\n-\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/incubator.richtext\">\n-\t\t<attributes>\n-\t\t\t<attribute name=\"module\" value=\"true\"\/>\n-\t\t<\/attributes>\n-\t<\/classpathentry>\n-\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/incubator.input\">\n-\t\t<attributes>\n-\t\t\t<attribute name=\"module\" value=\"true\"\/>\n-\t\t<\/attributes>\n-\t<\/classpathentry>\n-\t<classpathentry kind=\"output\" path=\"bin\"\/>\n-<\/classpath>\n","filename":"tests\/manual\/RichTextAreaDemo\/.classpath","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -1,17 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<projectDescription>\n-\t<name>RichTextAreaDemo<\/name>\n-\t<comment><\/comment>\n-\t<projects>\n-\t<\/projects>\n-\t<buildSpec>\n-\t\t<buildCommand>\n-\t\t\t<name>org.eclipse.jdt.core.javabuilder<\/name>\n-\t\t\t<arguments>\n-\t\t\t<\/arguments>\n-\t\t<\/buildCommand>\n-\t<\/buildSpec>\n-\t<natures>\n-\t\t<nature>org.eclipse.jdt.core.javanature<\/nature>\n-\t<\/natures>\n-<\/projectDescription>\n","filename":"tests\/manual\/RichTextAreaDemo\/.project","additions":0,"deletions":17,"binary":false,"changes":17,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-eclipse.preferences.version=1\n-encoding\/<project>=UTF-8\n","filename":"tests\/manual\/RichTextAreaDemo\/.settings\/org.eclipse.core.resources.prefs","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,24 +0,0 @@\n-# Rich Text Area Demos\n-\n-This project contains a number of applications that use the new RichTextArea and CodeArea controls,\n-for the purposes of demonstration of capabilities as well as testing.\n-\n-\n-## Rich Editor Application\n-\n-[RichEditorDemoApp.java](src\/com\/oracle\/demo\/rich\/editor\/RichEditorDemoApp.java)\n-is an example of a simple standalone rich text editor that uses the new RichTextArea control.\n-\n-\n-\n-## RichTextArea Tester\n-\n-[RichTextAreaDemoApp.java](src\/com\/oracle\/demo\/rich\/rta\/RichTextAreaDemoApp.java)\n-provides a demo application primarily for testing of the RichTextArea behavior.\n-\n-\n-\n-## CodeArea Tester\n-\n-[CodeAreaDemoApp.java](src\/com\/oracle\/demo\/rich\/codearea\/CodeAreaDemoApp.java)\n-provides a demo application primarily for testing of the CodeArea behavior.\n","filename":"tests\/manual\/RichTextAreaDemo\/README.md","additions":0,"deletions":24,"binary":false,"changes":24,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.codearea;\n-\n-import javafx.application.Application;\n-import javafx.stage.Stage;\n-import com.oracle.demo.richtext.settings.FxSettings;\n-\n-\/**\n- * CodeArea Demo Application.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class CodeAreaDemoApp extends Application {\n-    public static void main(String[] args) {\n-        Application.launch(CodeAreaDemoApp.class, args);\n-    }\n-\n-    @Override\n-    public void init() {\n-        FxSettings.useDirectory(\".CodeAreaDemoApp\");\n-    }\n-\n-    @Override\n-    public void start(Stage stage) throws Exception {\n-        new CodeAreaWindow(null).show();\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/codearea\/CodeAreaDemoApp.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,365 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.codearea;\n-\n-import java.nio.charset.Charset;\n-import java.util.Base64;\n-import javafx.collections.ObservableList;\n-import javafx.geometry.Insets;\n-import javafx.geometry.Orientation;\n-import javafx.geometry.Pos;\n-import javafx.scene.Node;\n-import javafx.scene.Scene;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.CheckBox;\n-import javafx.scene.control.ComboBox;\n-import javafx.scene.control.ContextMenu;\n-import javafx.scene.control.Menu;\n-import javafx.scene.control.MenuItem;\n-import javafx.scene.control.SeparatorMenuItem;\n-import javafx.scene.control.SplitPane;\n-import javafx.scene.layout.BorderPane;\n-import javafx.scene.layout.HBox;\n-import javafx.scene.layout.Pane;\n-import javafx.stage.Window;\n-import javafx.util.StringConverter;\n-import com.oracle.demo.richtext.rta.FontOption;\n-import com.oracle.demo.richtext.rta.ROptionPane;\n-import com.oracle.demo.richtext.util.FX;\n-import jfx.incubator.scene.control.richtext.CodeArea;\n-import jfx.incubator.scene.control.richtext.SyntaxDecorator;\n-import jfx.incubator.scene.control.richtext.TextPos;\n-import jfx.incubator.scene.control.richtext.model.CodeTextModel;\n-import jfx.incubator.scene.control.richtext.model.StyleAttribute;\n-import jfx.incubator.scene.control.richtext.model.StyleAttributeMap;\n-\n-\/**\n- * Main Panel contains CodeArea, split panes for quick size adjustment, and an option pane.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class CodeAreaDemoPane extends BorderPane {\n-    public final ROptionPane op;\n-    public final CodeArea control;\n-\n-    public CodeAreaDemoPane(CodeTextModel m) {\n-        FX.name(this, \"CodeAreaDemoPane\");\n-        control = new CodeArea(m);\n-\n-        SplitPane hsplit = new SplitPane(control, pane());\n-        FX.name(hsplit, \"hsplit\");\n-        hsplit.setBorder(null);\n-        hsplit.setDividerPositions(1.0);\n-        hsplit.setOrientation(Orientation.HORIZONTAL);\n-\n-        SplitPane vsplit = new SplitPane(hsplit, pane());\n-        FX.name(vsplit, \"vsplit\");\n-        vsplit.setBorder(null);\n-        vsplit.setDividerPositions(1.0);\n-        vsplit.setOrientation(Orientation.VERTICAL);\n-\n-        FontOption fontOption = new FontOption(\"font\", false, control.fontProperty());\n-\n-        CheckBox editable = new CheckBox(\"editable\");\n-        FX.name(editable, \"editable\");\n-        editable.selectedProperty().bindBidirectional(control.editableProperty());\n-\n-        CheckBox wrapText = new CheckBox(\"wrap text\");\n-        FX.name(wrapText, \"wrapText\");\n-        wrapText.selectedProperty().bindBidirectional(control.wrapTextProperty());\n-\n-        CheckBox displayCaret = new CheckBox(\"display caret\");\n-        FX.name(displayCaret, \"displayCaret\");\n-        displayCaret.selectedProperty().bindBidirectional(control.displayCaretProperty());\n-\n-        CheckBox fatCaret = new CheckBox(\"fat caret\");\n-        FX.name(fatCaret, \"fatCaret\");\n-        fatCaret.selectedProperty().addListener((s, p, on) -> {\n-            Node n = control.lookup(\".caret\");\n-            if (n != null) {\n-                if (on) {\n-                    n.setStyle(\n-                        \"-fx-stroke-width:2; -fx-stroke:red; -fx-effect:dropshadow(gaussian,rgba(0,0,0,.5),5,0,1,1);\");\n-                } else {\n-                    n.setStyle(null);\n-                }\n-            }\n-        });\n-\n-        CheckBox highlightCurrentLine = new CheckBox(\"highlight current line\");\n-        FX.name(highlightCurrentLine, \"highlightCurrentLine\");\n-        highlightCurrentLine.selectedProperty().bindBidirectional(control.highlightCurrentParagraphProperty());\n-\n-        ComboBox<Integer> tabSize = new ComboBox<>();\n-        FX.name(tabSize, \"tabSize\");\n-        tabSize.getItems().setAll(1, 2, 3, 4, 8, 16);\n-        tabSize.getSelectionModel().selectedItemProperty().addListener((s, p, v) -> {\n-            control.setTabSize(v);\n-        });\n-\n-        CheckBox customPopup = new CheckBox(\"custom popup menu\");\n-        FX.name(customPopup, \"customPopup\");\n-        customPopup.selectedProperty().addListener((s, p, v) -> {\n-            setCustomPopup(v);\n-        });\n-\n-        ComboBox<Insets> contentPadding = new ComboBox<>();\n-        FX.name(contentPadding, \"contentPadding\");\n-        contentPadding.setConverter(new StringConverter<Insets>() {\n-            @Override\n-            public String toString(Insets x) {\n-                if (x == null) {\n-                    return \"null\";\n-                }\n-                return String.format(\n-                    \"T%d, B%d, L%d, R%d\",\n-                    (int)x.getTop(),\n-                    (int)x.getBottom(),\n-                    (int)x.getLeft(),\n-                    (int)x.getRight()\n-                );\n-            }\n-\n-            @Override\n-            public Insets fromString(String s) {\n-                return null;\n-            }\n-        });\n-        contentPadding.getItems().setAll(\n-            null,\n-            new Insets(1),\n-            new Insets(2),\n-            new Insets(10),\n-            new Insets(22.22),\n-            new Insets(50),\n-            new Insets(100),\n-            new Insets(5, 10, 15, 20)\n-        );\n-        contentPadding.getSelectionModel().selectedItemProperty().addListener((s, p, v) -> {\n-            control.setContentPadding(v);\n-        });\n-\n-        ComboBox<Double> lineSpacing = new ComboBox<>();\n-        FX.name(lineSpacing, \"lineSpacing\");\n-        lineSpacing.getItems().setAll(\n-            0.0,\n-            5.0,\n-            31.415\n-        );\n-        lineSpacing.getSelectionModel().selectedItemProperty().addListener((s, p, v) -> {\n-            setLineSpacing(v);\n-        });\n-\n-        CheckBox lineNumbers = new CheckBox(\"line numbers\");\n-        FX.name(lineNumbers, \"lineNumbers\");\n-        lineNumbers.selectedProperty().bindBidirectional(control.lineNumbersEnabledProperty());\n-\n-        ComboBox<SyntaxDecorator> syntax = new ComboBox<>();\n-        FX.name(syntax, \"syntax\");\n-        syntax.getItems().addAll(\n-            null,\n-            new DemoSyntaxDecorator(),\n-            new JavaSyntaxDecorator()\n-        );\n-        syntax.setConverter(new StringConverter<SyntaxDecorator>() {\n-            @Override\n-            public String toString(SyntaxDecorator x) {\n-                return x == null ? \"<NULL>\" : x.toString();\n-            }\n-\n-            @Override\n-            public SyntaxDecorator fromString(String s) {\n-                return null;\n-            }\n-        });\n-        syntax.getSelectionModel().selectedItemProperty().addListener((s, p, v) -> {\n-            control.setSyntaxDecorator(v);\n-        });\n-\n-        op = new ROptionPane();\n-        op.option(editable);\n-        op.label(\"Font:\");\n-        op.option(fontOption);\n-        op.option(wrapText);\n-        op.option(displayCaret);\n-        op.option(fatCaret);\n-        op.option(highlightCurrentLine);\n-        op.option(lineNumbers);\n-        op.label(\"Tab Size:\");\n-        op.option(tabSize);\n-        op.option(customPopup);\n-        op.label(\"Content Padding:\");\n-        op.option(contentPadding);\n-        op.label(\"Line Spacing:\");\n-        op.option(lineSpacing);\n-        op.label(\"Syntax Highlighter:\");\n-        op.option(syntax);\n-\n-        setCenter(vsplit);\n-        setRight(op);\n-\n-        contentPadding.getSelectionModel().selectFirst();\n-        lineSpacing.getSelectionModel().selectFirst();\n-        syntax.getSelectionModel().selectFirst();\n-    }\n-\n-    protected static Pane pane() {\n-        Pane p = new Pane();\n-        SplitPane.setResizableWithParent(p, false);\n-        p.setStyle(\"-fx-background-color:#dddddd;\");\n-        return p;\n-    }\n-\n-    public Button addButton(String name, Runnable action) {\n-        Button b = new Button(name);\n-        b.setOnAction((ev) -> {\n-            action.run();\n-        });\n-\n-        toolbar().add(b);\n-        return b;\n-    }\n-\n-    public TBar toolbar() {\n-        if (getTop() instanceof TBar) {\n-            return (TBar)getTop();\n-        }\n-\n-        TBar t = new TBar();\n-        setTop(t);\n-        return t;\n-    }\n-\n-    public Window getWindow() {\n-        Scene s = getScene();\n-        if (s != null) {\n-            return s.getWindow();\n-        }\n-        return null;\n-    }\n-\n-    public void setOptions(Node n) {\n-        setRight(n);\n-    }\n-\n-    protected String generateStylesheet(boolean fat) {\n-        String s = \".rich-text-area .caret { -fx-stroke-width:\" + (fat ? 2 : 1) + \"; }\";\n-        return \"data:text\/css;base64,\" + Base64.getEncoder().encodeToString(s.getBytes(Charset.forName(\"utf-8\")));\n-    }\n-\n-    protected void setCustomPopup(boolean on) {\n-        if (on) {\n-            ContextMenu m = new ContextMenu();\n-            m.getItems().add(new MenuItem(\"Dummy\")); \/\/ otherwise no popup is shown\n-            m.addEventFilter(Menu.ON_SHOWING, (ev) -> {\n-                m.getItems().clear();\n-                populatePopupMenu(m.getItems());\n-            });\n-            control.setContextMenu(m);\n-        } else {\n-            control.setContextMenu(null);\n-        }\n-    }\n-\n-    protected void populatePopupMenu(ObservableList<MenuItem> items) {\n-        boolean sel = control.hasNonEmptySelection();\n-        boolean paste = true; \/\/ would be easier with Actions (findFormatForPaste() != null);\n-\n-        MenuItem m;\n-        items.add(m = new MenuItem(\"Undo\"));\n-        m.setOnAction((ev) -> control.undo());\n-        m.setDisable(!control.isUndoable());\n-\n-        items.add(m = new MenuItem(\"Redo\"));\n-        m.setOnAction((ev) -> control.redo());\n-        m.setDisable(!control.isRedoable());\n-\n-        items.add(new SeparatorMenuItem());\n-\n-        items.add(m = new MenuItem(\"Cut\"));\n-        m.setOnAction((ev) -> control.cut());\n-        m.setDisable(!sel);\n-\n-        items.add(m = new MenuItem(\"Copy\"));\n-        m.setOnAction((ev) -> control.copy());\n-        m.setDisable(!sel);\n-\n-        items.add(m = new MenuItem(\"Paste\"));\n-        m.setOnAction((ev) -> control.paste());\n-        m.setDisable(!paste);\n-\n-        items.add(new SeparatorMenuItem());\n-\n-        items.add(m = new MenuItem(\"Select All\"));\n-        m.setOnAction((ev) -> control.selectAll());\n-    }\n-\n-    protected <V> void apply(StyleAttribute<V> attr, V val) {\n-        TextPos ca = control.getCaretPosition();\n-        TextPos an = control.getAnchorPosition();\n-        StyleAttributeMap a = StyleAttributeMap.builder().set(attr, val).build();\n-        control.applyStyle(ca, an, a);\n-    }\n-\n-    protected void setLineSpacing(double x) {\n-        control.setLineSpacing(x);\n-    }\n-\n-    private <V> void applyStyle(StyleAttribute<V> a, V val) {\n-        TextPos ca = control.getCaretPosition();\n-        TextPos an = control.getAnchorPosition();\n-        StyleAttributeMap m = StyleAttributeMap.of(a, val);\n-        control.applyStyle(ca, an, m);\n-    }\n-\n-    \/\/\n-\n-    public static class TBar extends HBox {\n-        public TBar() {\n-            setFillHeight(true);\n-            setAlignment(Pos.CENTER_LEFT);\n-            setSpacing(2);\n-        }\n-\n-        public <T extends Node> T add(T n) {\n-            getChildren().add(n);\n-            return n;\n-        }\n-\n-        public void addAll(Node... nodes) {\n-            for (Node n : nodes) {\n-                add(n);\n-            }\n-        }\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/codearea\/CodeAreaDemoPane.java","additions":0,"deletions":365,"binary":false,"changes":365,"status":"deleted"},{"patch":"@@ -1,114 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.codearea;\n-\n-import javafx.application.Platform;\n-import javafx.geometry.Insets;\n-import javafx.scene.Scene;\n-import javafx.scene.control.Label;\n-import javafx.scene.control.MenuBar;\n-import javafx.scene.layout.BorderPane;\n-import javafx.stage.Stage;\n-import com.oracle.demo.richtext.rta.RichTextAreaWindow;\n-import com.oracle.demo.richtext.util.FX;\n-import jfx.incubator.scene.control.richtext.RichTextArea;\n-import jfx.incubator.scene.control.richtext.TextPos;\n-import jfx.incubator.scene.control.richtext.model.CodeTextModel;\n-\n-\/**\n- * CodeArea Demo window\n- *\n- * @author Andy Goryachev\n- *\/\n-public class CodeAreaWindow extends Stage {\n-    private CodeTextModel model;\n-    public final CodeAreaDemoPane demoPane;\n-    public final Label status;\n-\n-    public CodeAreaWindow(CodeTextModel m) {\n-        model = (m == null ? new CodeTextModel() : m);\n-        demoPane = new CodeAreaDemoPane(model);\n-\n-        MenuBar mb = new MenuBar();\n-        FX.menu(mb, \"File\");\n-        FX.item(mb, \"New Window\", this::newWindow);\n-        FX.separator(mb);\n-        FX.item(mb, \"Close Window\", this::hide);\n-        FX.separator(mb);\n-        FX.item(mb, \"Quit\", () -> Platform.exit());\n-\n-        status = new Label();\n-        status.setPadding(new Insets(2, 10, 2, 10));\n-\n-        BorderPane bp = new BorderPane();\n-        bp.setTop(mb);\n-        bp.setCenter(demoPane);\n-        bp.setBottom(status);\n-\n-        Scene scene = new Scene(bp);\n-        setScene(scene);\n-        setTitle(\n-            \"CodeArea Tester  JFX:\" + System.getProperty(\"javafx.runtime.version\") +\n-            \"  JDK:\" + System.getProperty(\"java.version\")\n-        );\n-        setWidth(1200);\n-        setHeight(600);\n-\n-        demoPane.control.caretPositionProperty().addListener((x) -> updateStatus());\n-    }\n-\n-    protected void updateStatus() {\n-        RichTextArea t = demoPane.control;\n-        TextPos p = t.getCaretPosition();\n-\n-        StringBuilder sb = new StringBuilder();\n-\n-        if (p != null) {\n-            sb.append(\" line=\").append(p.index());\n-            sb.append(\" col=\").append(p.offset());\n-        }\n-\n-        status.setText(sb.toString());\n-    }\n-\n-    protected void newWindow() {\n-        double offset = 20;\n-\n-        CodeAreaWindow w = new CodeAreaWindow(model);\n-        w.setX(getX() + offset);\n-        w.setY(getY() + offset);\n-        w.setWidth(getWidth());\n-        w.setHeight(getHeight());\n-        w.show();\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/codearea\/CodeAreaWindow.java","additions":0,"deletions":114,"binary":false,"changes":114,"status":"deleted"},{"patch":"@@ -1,159 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.codearea;\n-\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-import javafx.scene.paint.Color;\n-import jfx.incubator.scene.control.richtext.SyntaxDecorator;\n-import jfx.incubator.scene.control.richtext.TextPos;\n-import jfx.incubator.scene.control.richtext.model.CodeTextModel;\n-import jfx.incubator.scene.control.richtext.model.RichParagraph;\n-import jfx.incubator.scene.control.richtext.model.StyleAttributeMap;\n-\n-\/**\n- * Simple {@code SyntaxDecorator} which emphasizes digits and java keywords.\n- * This is just a demo.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class DemoSyntaxDecorator implements SyntaxDecorator {\n-    private static final StyleAttributeMap DIGITS = StyleAttributeMap.builder().setTextColor(Color.MAGENTA).build();\n-    private static final StyleAttributeMap KEYWORDS = StyleAttributeMap.builder().setTextColor(Color.GREEN).build();\n-    private static Pattern PATTERN = initPattern();\n-\n-    public DemoSyntaxDecorator() {\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"DemoSyntaxDecorator\";\n-    }\n-\n-    @Override\n-    public RichParagraph createRichParagraph(CodeTextModel model, int index) {\n-        String text = model.getPlainText(index);\n-        RichParagraph.Builder b = RichParagraph.builder();\n-        int len = text.length();\n-        if (len > 0) {\n-            Matcher m = PATTERN.matcher(text);\n-            int beg = 0;\n-            while (m.find(beg)) {\n-                int start = m.start();\n-                if (start > beg) {\n-                    b.addSegment(text, beg, start, null);\n-                }\n-                int end = m.end();\n-                boolean digit = (m.end(1) >= 0);\n-                b.addSegment(text, start, end, digit ? DIGITS : KEYWORDS);\n-                beg = end;\n-            }\n-            if (beg < len) {\n-                b.addSegment(text, beg, len, null);\n-            }\n-        }\n-        return b.build();\n-    }\n-\n-    private static Pattern initPattern() {\n-        String[] keywords = {\n-            \"abstract\",\n-            \"assert\",\n-            \"boolean\",\n-            \"break\",\n-            \"byte\",\n-            \"case\",\n-            \"catch\",\n-            \"char\",\n-            \"class\",\n-            \"const\",\n-            \"continue\",\n-            \"default\",\n-            \"do\",\n-            \"double\",\n-            \"else\",\n-            \"enum\",\n-            \"extends\",\n-            \"final\",\n-            \"finally\",\n-            \"float\",\n-            \"for\",\n-            \"goto\",\n-            \"if\",\n-            \"implements\",\n-            \"import\",\n-            \"instanceof\",\n-            \"int\",\n-            \"interface\",\n-            \"long\",\n-            \"native\",\n-            \"new\",\n-            \"package\",\n-            \"private\",\n-            \"protected\",\n-            \"public\",\n-            \"return\",\n-            \"short\",\n-            \"static\",\n-            \"strictfpv\",\n-            \"super\",\n-            \"switch\",\n-            \"synchronized\",\n-            \"this\",\n-            \"throw\",\n-            \"throws\",\n-            \"transient\",\n-            \"try\",\n-            \"void\",\n-            \"volatile\",\n-            \"while\"\n-        };\n-\n-        StringBuilder sb = new StringBuilder();\n-        \/\/ digits\n-        sb.append(\"(\\\\b\\\\d+\\\\b)\");\n-\n-        \/\/ keywords\n-        for (String k : keywords) {\n-            sb.append(\"|\\\\b(\");\n-            sb.append(k);\n-            sb.append(\")\\\\b\");\n-        }\n-        return Pattern.compile(sb.toString());\n-    }\n-\n-    @Override\n-    public void handleChange(CodeTextModel m, TextPos start, TextPos end, int charsTop, int linesAdded, int charsBottom) {\n-        \/\/ no-op\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/codearea\/DemoSyntaxDecorator.java","additions":0,"deletions":159,"binary":false,"changes":159,"status":"deleted"},{"patch":"@@ -1,900 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.codearea;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-\/**\n- * A simple Java syntax analyzer implemented as a recursive descent parser.\n- * This is just a demo, as it has no link to the real compiler, does not understand Java language,\n- * does not take into account version-specific language features, and reports no errors.\n- * It also does not check validity of numeric literals, allowing malformed octal or binary numbers,\n- * or values that are too large to be represented.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class JavaSyntaxAnalyzer {\n-    private boolean DEBUG = false;\n-\n-    \/** Encapsulates a paragraph containing segments with syntax highlighting *\/\n-    public static class Line {\n-        private ArrayList<Segment> segments = new ArrayList<>();\n-\n-        \/**\n-         * The constructor.\n-         *\/\n-        public Line() {\n-        }\n-\n-        \/**\n-         * Adds a segment.\n-         * @param type the segment type\n-         * @param text the segment text\n-         *\/\n-        public void addSegment(Type type, String text) {\n-            segments.add(new Segment(type, text));\n-        }\n-\n-        \/**\n-         * Returns the list of segments.\n-         * @return the list of segments\n-         *\/\n-        public List<Segment> getSegments() {\n-            return segments;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return segments.toString();\n-        }\n-\n-        @Override\n-        public boolean equals(Object x) {\n-            if (x == this) {\n-                return true;\n-            } else if (x instanceof Line n) {\n-                return segments.equals(n.segments);\n-            }\n-            return false;\n-        }\n-\n-        @Override\n-        public int hashCode() {\n-            return 0; \/\/ we only need equals, don't put a hash table!\n-        }\n-    }\n-\n-    \/**\n-     * Encapsulates a text segment with the same syntax highlight type.\n-     *\/\n-    public static class Segment {\n-        private final Type type;\n-        private final String text;\n-\n-        \/**\n-         * The constructor.\n-         * @param type the segment type\n-         * @param text the segment text\n-         *\/\n-        public Segment(Type type, String text) {\n-            this.type = type;\n-            this.text = text;\n-        }\n-\n-        \/**\n-         * Returns the segment type.\n-         * @return the segment type\n-         *\/\n-        public Type getType() {\n-            return type;\n-        }\n-\n-        \/**\n-         * Returns the segment text.\n-         * @return the segment text\n-         *\/\n-        public String getText() {\n-            return text;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return type + \":[\" + text + \"]\";\n-        }\n-\n-        @Override\n-        public boolean equals(Object x) {\n-            if (x == this) {\n-                return true;\n-            } else if (x instanceof Segment s) {\n-                return\n-                    (type == s.type) &&\n-                    (text.equals(s.text));\n-            }\n-            return false;\n-        }\n-\n-        @Override\n-        public int hashCode() {\n-            return 0; \/\/ we only need equals, don't put a hash table!\n-        }\n-    }\n-\n-    \/**\n-     * Defines the segment type generated by this analyzer\n-     *\/\n-    public enum Type {\n-        CHARACTER,\n-        COMMENT,\n-        KEYWORD,\n-        NUMBER,\n-        OTHER,\n-        STRING,\n-    }\n-\n-    private enum State {\n-        COMMENT_BLOCK,\n-        COMMENT_LINE,\n-        EOF,\n-        EOL,\n-        KEYWORD,\n-        OTHER,\n-        STRING,\n-        TEXT_BLOCK,\n-        WHITESPACE,\n-    }\n-\n-    private static final int EOF = -1;\n-    private static Pattern KEYWORDS;\n-    private static Pattern CHARS;\n-    static { init(); }\n-\n-    private final String text;\n-    private final Matcher keywordMatcher;\n-    private final Matcher charsMatcher;\n-    private int pos;\n-    private int start;\n-    private boolean blockComment;\n-    private State state = State.OTHER;\n-    private int tokenLength;\n-    private ArrayList<Line> lines;\n-    private Line currentLine;\n-\n-    \/**\n-     * Creates the syntax analyzer initialized with the specified text.\n-     * The text must have newline ({@code \/n}) characters as line delimiters.\n-     * @param text the input text\n-     *\/\n-    public JavaSyntaxAnalyzer(String text) {\n-        this.text = text;\n-        this.keywordMatcher = KEYWORDS.matcher(text);\n-        this.charsMatcher = CHARS.matcher(text);\n-    }\n-\n-    private static void init() {\n-        String[] keywords = {\n-            \"abstract\",\n-            \"assert\",\n-            \"boolean\",\n-            \"break\",\n-            \"byte\",\n-            \"case\",\n-            \"catch\",\n-            \"char\",\n-            \"class\",\n-            \"const\",\n-            \"continue\",\n-            \"default\",\n-            \"do\",\n-            \"double\",\n-            \"else\",\n-            \"enum\",\n-            \"extends\",\n-            \"false\",\n-            \"final\",\n-            \"finally\",\n-            \"float\",\n-            \"for\",\n-            \"goto\",\n-            \"if\",\n-            \"implements\",\n-            \"import\",\n-            \"instanceof\",\n-            \"int\",\n-            \"interface\",\n-            \"long\",\n-            \"native\",\n-            \"new\",\n-            \"package\",\n-            \"private\",\n-            \"protected\",\n-            \"public\",\n-            \"return\",\n-            \"short\",\n-            \"static\",\n-            \"strictfpv\",\n-            \"super\",\n-            \"switch\",\n-            \"synchronized\",\n-            \"this\",\n-            \"throw\",\n-            \"throws\",\n-            \"transient\",\n-            \"true\",\n-            \"try\",\n-            \"var\",\n-            \"void\",\n-            \"volatile\",\n-            \"while\"\n-        };\n-\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"\\\\G\"); \/\/ match at start of the input in match(pos);\n-        sb.append(\"(\"); \/\/ capturing group\n-        boolean sep = false;\n-        for (String k : keywords) {\n-            if (sep) {\n-                sb.append(\"|\");\n-            } else {\n-                sep = true;\n-            }\n-            sb.append(\"(\"); \/\/ capturing group\n-            sb.append(k);\n-            \/\/ TODO add a post-match check instead\n-            sb.append(\"\\\\b\"); \/\/ word boundary\n-            sb.append(\")\"); \/\/ capturing group\n-        }\n-        sb.append(\")\"); \/\/ capturing group\n-\n-        KEYWORDS = Pattern.compile(sb.toString());\n-\n-        String charsPattern =\n-            \"(\\\\G\\\\\\\\[bfnrt'\\\"\\\\\\\\]')|\" +  \/\/ \\b' + \\f' + \\n' + \\r' + \\t' + \\'' + \\\"' +  \\\\'\n-            \"(\\\\G[^\\\\\\\\u]')|\" + \/\/ any char followed by ', except u and \\\n-            \"(\\\\G\\\\\\\\u[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]')\" \/\/ unicode escapes\n-            ;\n-        CHARS = Pattern.compile(charsPattern);\n-    }\n-\n-    \/\/ returns the length of java keyword, 0 if not a java keyword\n-    private int matchJavaKeyword() {\n-        int c = charAt(-1);\n-        if (Character.isJavaIdentifierPart(c)) {\n-            return 0;\n-        }\n-\n-        c = charAt(0);\n-        switch (c) {\n-        case 'a':\n-        case 'b':\n-        case 'c':\n-        case 'd':\n-        case 'e':\n-        case 'f':\n-        case 'g':\n-        case 'i':\n-        case 'l':\n-        case 'n':\n-        case 'p':\n-        case 'r':\n-        case 's':\n-        case 't':\n-        case 'v':\n-        case 'w':\n-            break;\n-        default:\n-            return 0;\n-        };\n-\n-        if (keywordMatcher.find(pos)) {\n-            int start = keywordMatcher.start();\n-            int end = keywordMatcher.end();\n-            switch (charAt(end - pos)) {\n-            case '.':\n-                return 0;\n-            }\n-\n-            return (end - start);\n-        }\n-        return 0;\n-    }\n-\n-    \/\/ returns the length of the character, or 0 if not a character\n-    private int matchCharacter() {\n-        if(charsMatcher.find(pos + 1)) {\n-            int start = charsMatcher.start();\n-            int end = charsMatcher.end();\n-            return (end - start);\n-        }\n-        return 0;\n-    }\n-\n-    private int peek() {\n-        if (pos < text.length()) {\n-            return text.charAt(pos);\n-        }\n-        return EOF;\n-    }\n-\n-    private Type type(State s) {\n-        switch(s) {\n-        case COMMENT_BLOCK:\n-            return Type.COMMENT;\n-        case COMMENT_LINE:\n-            return Type.COMMENT;\n-        case EOF:\n-            return Type.OTHER;\n-        case EOL:\n-            return Type.OTHER;\n-        case KEYWORD:\n-            return Type.KEYWORD;\n-        case OTHER:\n-            return Type.OTHER;\n-        case STRING:\n-            return Type.STRING;\n-        case TEXT_BLOCK:\n-            return Type.STRING;\n-        case WHITESPACE:\n-            return Type.OTHER;\n-        default:\n-            throw new Error(\"?\" + s);\n-        }\n-    }\n-\n-    private void addSegment() {\n-        Type type = type(state);\n-        addSegment(type);\n-    }\n-\n-    private void addSegment(Type type) {\n-        if (pos > start) {\n-            String s = text.substring(start, pos);\n-\n-            if (currentLine == null) {\n-                currentLine = new Line();\n-            }\n-            currentLine.addSegment(type, s);\n-\n-            start = pos;\n-            if(DEBUG) System.out.println(\"  \" + type + \":[\" + s + \"]\"); \/\/ FIX\n-        }\n-    }\n-\n-    private void addNewLine() {\n-        if (currentLine == null) {\n-            currentLine = new Line();\n-        }\n-        lines.add(currentLine);\n-        currentLine = null;\n-        if(DEBUG) System.out.println(\"  <NL>\"); \/\/ FIX\n-    }\n-\n-    private boolean match(String pattern) {\n-        for (int i = 0; i < pattern.length(); i++) {\n-            if (charAt(i) != pattern.charAt(i)) {\n-                return false;\n-            }\n-        }\n-        tokenLength = pattern.length();\n-        return true;\n-    }\n-\n-    \/\/ relative to 'pos'\n-    private int charAt(int ix) {\n-        ix += pos;\n-        if ((ix >= 0) && (ix < text.length())) {\n-            return text.charAt(ix);\n-        }\n-        return EOF;\n-    }\n-\n-    \/\/ leading: \"\"\"(whitespace)\\n  trailing: \"\"\"(whitespace);\n-    private boolean isTextBlock(boolean leading) {\n-        for (int i = 0; ; i++) {\n-            int c = charAt(i);\n-            switch (c) {\n-            case '\"':\n-                if (i >= 3) {\n-                    return false;\n-                }\n-                break;\n-            case ' ':\n-            case '\\t':\n-                if (i < 3) {\n-                    return false;\n-                }\n-                break;\n-            case '\\n':\n-                if (leading) {\n-                    tokenLength = i;\n-                    return true;\n-                } else {\n-                    return false;\n-                }\n-            case ';':\n-                if (i < 3) {\n-                    return false;\n-                }\n-                if (!leading) {\n-                    tokenLength = i;\n-                    return true;\n-                }\n-            case -1:\n-            default:\n-                return false;\n-            }\n-        }\n-    }\n-\n-    \/\/ relative to pos\n-    private boolean isBoundedByDigit(boolean hex, int ix, boolean increase) {\n-        for(;;) {\n-            int c = charAt(ix);\n-            switch (c) {\n-            case '0':\n-            case '1':\n-            case '2':\n-            case '3':\n-            case '4':\n-            case '5':\n-            case '6':\n-            case '7':\n-            case '8':\n-            case '9':\n-                return true;\n-            case 'a':\n-            case 'A':\n-            case 'b':\n-            case 'B':\n-            case 'c':\n-            case 'C':\n-            case 'd':\n-            case 'D':\n-            case 'e':\n-            case 'E':\n-            case 'f':\n-            case 'F':\n-                return hex ? true : false;\n-            case '_':\n-                break;\n-            default:\n-                return false;\n-            }\n-\n-            ix += (increase ? 1 : -1);\n-        }\n-    }\n-\n-    \/\/ TODO move up\n-    private enum Phase {\n-        S_BEG, \/\/ beginning of significand, before period\n-        S_PER, \/\/ decimal point in the significand\n-        S_END, \/\/ after period in significand\n-        E_DIV, \/\/ exponent divider ('e' or 'E')\n-        E_SIG, \/\/ exponent sign\n-        E_BEG, \/\/ exponent before decimal point\n-        E_END, \/\/ after decimal point in the exponent\n-        HEX,   \/\/ hexadecimal literal\n-        BIN,   \/\/ binary literal\n-        UNKNOWN\n-    }\n-    private Phase phase;\n-    private boolean hasSignificand;\n-    private boolean hasExponent;\n-\n-    private int matchNumber() {\n-        int c = charAt(0);\n-        switch (c) {\n-        case '0':\n-        case '1':\n-        case '2':\n-        case '3':\n-        case '4':\n-        case '5':\n-        case '6':\n-        case '7':\n-        case '8':\n-        case '9':\n-            c = charAt(-1);\n-            switch (c) {\n-            case -1:\n-                break;\n-            default:\n-                if (Character.isJavaIdentifierPart(c)) {\n-                    return 0;\n-                }\n-            }\n-            break;\n-        case '.':\n-            break;\n-        default:\n-            return 0;\n-        }\n-\n-        phase = Phase.UNKNOWN;\n-        hasSignificand = false;\n-        hasExponent = false;\n-\n-        for (int i = 0; ; i++) {\n-            c = charAt(i);\n-            char ch = (char)c; \/\/ FIX\n-            switch (c) {\n-            case '0':\n-            case '1':\n-            case '2':\n-            case '3':\n-            case '4':\n-            case '5':\n-            case '6':\n-            case '7':\n-            case '8':\n-            case '9':\n-                switch (phase) {\n-                case HEX:\n-                case BIN:\n-                    \/\/ not validating binary literals\n-                    hasSignificand = true;\n-                    break;\n-                case UNKNOWN:\n-                    phase = Phase.S_BEG;\n-                    hasSignificand = true;\n-                    break;\n-                case S_BEG:\n-                    hasSignificand = true;\n-                    break;\n-                case S_PER:\n-                    phase = Phase.S_END;\n-                    hasSignificand = true;\n-                    break;\n-                case E_DIV:\n-                case E_SIG:\n-                    phase = Phase.E_BEG;\n-                    hasExponent = true;\n-                    break;\n-                }\n-                break;\n-            case 'a':\n-            case 'A':\n-            case 'c':\n-            case 'C':\n-                switch (phase) {\n-                case HEX:\n-                    hasSignificand = true;\n-                    break;\n-                default:\n-                    return 0;\n-                }\n-                break;\n-            case '.':\n-                switch (phase) {\n-                case UNKNOWN:\n-                case S_BEG:\n-                    phase = Phase.S_PER;\n-                    break;\n-                default:\n-                    return 0;\n-                }\n-                break;\n-            case '_':\n-                switch (phase) {\n-                case HEX:\n-                    if (!(isBoundedByDigit(true, i - 1, false) && isBoundedByDigit(true, i + 1, true))) {\n-                        return 0;\n-                    }\n-                    break;\n-                case BIN:\n-                case S_BEG:\n-                case S_END:\n-                case E_BEG:\n-                case E_END:\n-                    if (!(isBoundedByDigit(false, i - 1, false) && isBoundedByDigit(false, i + 1, true))) {\n-                        return 0;\n-                    }\n-                    break;\n-                default:\n-                    return 0;\n-                }\n-                break;\n-            case 'e':\n-            case 'E':\n-                switch (phase) {\n-                case HEX:\n-                    hasSignificand = true;\n-                    break;\n-                case S_PER:\n-                    if(!hasSignificand) {\n-                        return 0;\n-                    }\n-                    \/\/ fall through\n-                case S_BEG:\n-                case S_END:\n-                    phase = Phase.E_DIV;\n-                    break;\n-                default:\n-                    return 0;\n-                }\n-                break;\n-            case 'd':\n-            case 'D':\n-            case 'f':\n-            case 'F':\n-                switch (phase) {\n-                case HEX:\n-                    hasSignificand = true;\n-                    break;\n-                case S_BEG:\n-                case S_PER:\n-                case S_END:\n-                    return hasSignificand ? (i + 1) : 0;\n-                case E_BEG:\n-                case E_END:\n-                    return hasExponent ? (i + 1) : 0;\n-                default:\n-                    return 0;\n-                }\n-                break;\n-            case '+':\n-            case '-':\n-                switch (phase) {\n-                case E_DIV:\n-                    phase = Phase.E_SIG;\n-                    break;\n-                case S_BEG:\n-                case S_END:\n-                case S_PER:\n-                    return i;\n-                default:\n-                    return 0;\n-                }\n-                break;\n-            case 'l':\n-            case 'L':\n-                switch (phase) {\n-                case HEX:\n-                case BIN:\n-                case S_BEG:\n-                    return i + 1;\n-                }\n-                return 0;\n-            case 'x':\n-            case 'X':\n-                if ((i == 1) && (charAt(i - 1) == '0')) {\n-                    phase = Phase.HEX;\n-                    hasSignificand = false;\n-                } else {\n-                    return 0;\n-                }\n-                break;\n-            case 'b':\n-            case 'B':\n-                switch (phase) {\n-                case HEX:\n-                    hasSignificand = true;\n-                    break;\n-                default:\n-                    if ((i == 1) && (charAt(i - 1) == '0')) {\n-                        phase = Phase.BIN;\n-                        hasSignificand = false;\n-                    } else {\n-                        return 0;\n-                    }\n-                }\n-                break;\n-            case -1:\n-            default:\n-                switch (phase) {\n-                case S_PER:\n-                case HEX:\n-                case BIN:\n-                    return hasSignificand ? i : 0;\n-                case S_BEG:\n-                case S_END:\n-                case E_BEG:\n-                case E_END:\n-                    return i;\n-                default:\n-                    return 0;\n-                }\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Analyzes the input text, producing a list of {@code Line}s containing syntax information.\n-     * @return the list of lines with syntax highlighting\n-     *\/\n-    public List<Line> analyze() {\n-        if(DEBUG) System.out.println(\"analyze\"); \/\/ FIX\n-        lines = new ArrayList<>();\n-        start = 0;\n-\n-        for (;;) {\n-            tokenLength = 0;\n-            int c = peek();\n-\n-            switch (c) {\n-            case '*':\n-                switch (state) {\n-                case COMMENT_BLOCK:\n-                    if (match(\"*\/\")) {\n-                        pos += tokenLength;\n-                        addSegment();\n-                        state = State.OTHER;\n-                        continue;\n-                    }\n-                }\n-                break;\n-            case '\\n':\n-                addSegment();\n-                addNewLine();\n-                pos++;\n-                start = pos;\n-                switch (state) {\n-                case COMMENT_BLOCK:\n-                case TEXT_BLOCK:\n-                    break;\n-                default:\n-                    state = State.OTHER;\n-                    break;\n-                }\n-                continue;\n-            case '\/':\n-                switch(state) {\n-                case COMMENT_BLOCK:\n-                case COMMENT_LINE:\n-                case STRING:\n-                case TEXT_BLOCK:\n-                    break;\n-                default:\n-                    if (match(\"\/*\")) {\n-                        addSegment();\n-                        pos += tokenLength;\n-                        state = State.COMMENT_BLOCK;\n-                        continue;\n-                    } else if (match(\"\/\/\")) {\n-                        addSegment();\n-                        pos += tokenLength;\n-                        state = State.COMMENT_LINE;\n-                        continue;\n-                    }\n-                }\n-                break;\n-            case '\"':\n-                switch(state) {\n-                case COMMENT_BLOCK:\n-                case COMMENT_LINE:\n-                    break;\n-                case TEXT_BLOCK:\n-                    if(isTextBlock(false)) {\n-                        pos += tokenLength;\n-                        addSegment();\n-                        state = State.OTHER;\n-                        continue;\n-                    }\n-                    break;\n-                case STRING:\n-                    pos++;\n-                    addSegment();\n-                    state = State.OTHER;\n-                    continue;\n-                default:\n-                    if(isTextBlock(true)) {\n-                        addSegment();\n-                        pos += tokenLength;\n-                        state = State.TEXT_BLOCK;\n-                        continue;\n-                    } else {\n-                        addSegment();\n-                        state = State.STRING;\n-                    }\n-                    break;\n-                }\n-                break;\n-            case '\\'':\n-                switch(state) {\n-                case COMMENT_BLOCK:\n-                case COMMENT_LINE:\n-                case STRING:\n-                    break;\n-                default:\n-                    switch (charAt(1)) {\n-                    case '\\n':\n-                        pos++;\n-                        continue;\n-                    }\n-                    tokenLength = matchCharacter();\n-                    if (tokenLength > 0) {\n-                        addSegment();\n-                        pos += (tokenLength + 1);\n-                        addSegment(Type.CHARACTER);\n-                        state = State.OTHER;\n-                        continue;\n-                    }\n-                    break;\n-                }\n-                break;\n-            case '\\\\':\n-                switch (state) {\n-                case STRING:\n-                    switch (charAt(1)) {\n-                    case '\\n':\n-                        break;\n-                    default:\n-                        pos++;\n-                        break;\n-                    }\n-                    break;\n-                }\n-                break;\n-            case EOF:\n-                addSegment();\n-                if (currentLine != null) {\n-                    lines.add(currentLine);\n-                }\n-                if (lines.size() == 0) {\n-                    lines.add(new Line());\n-                }\n-                return lines;\n-            default:\n-                switch (state) {\n-                case OTHER:\n-                    tokenLength = matchJavaKeyword();\n-                    if (tokenLength > 0) {\n-                        addSegment();\n-                        pos += tokenLength;\n-                        addSegment(Type.KEYWORD);\n-                        state = State.OTHER;\n-                        continue;\n-                    }\n-                    tokenLength = matchNumber();\n-                    if (tokenLength > 0) {\n-                        addSegment();\n-                        pos += tokenLength;\n-                        addSegment(Type.NUMBER);\n-                        state = State.OTHER;\n-                        continue;\n-                    }\n-                    break;\n-                default:\n-                    break;\n-                }\n-                break;\n-            }\n-\n-            pos++;\n-        }\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/codearea\/JavaSyntaxAnalyzer.java","additions":0,"deletions":900,"binary":false,"changes":900,"status":"deleted"},{"patch":"@@ -1,147 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.codearea;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javafx.scene.paint.Color;\n-import jfx.incubator.scene.control.richtext.SyntaxDecorator;\n-import jfx.incubator.scene.control.richtext.TextPos;\n-import jfx.incubator.scene.control.richtext.model.CodeTextModel;\n-import jfx.incubator.scene.control.richtext.model.RichParagraph;\n-import jfx.incubator.scene.control.richtext.model.StyleAttributeMap;\n-\n-\/**\n- * A simple {@code SyntaxDecorator} for Java source files.\n- *\n- * This is just a demo, as it has no link to the real compiler, does not understand Java language\n- * and does not take into account version-specific language features.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class JavaSyntaxDecorator implements SyntaxDecorator {\n-    private static final StyleAttributeMap CHARACTER = mkStyle(Color.BLUE);\n-    private static final StyleAttributeMap COMMENT = mkStyle(Color.RED);\n-    private static final StyleAttributeMap KEYWORD = mkStyle(Color.GREEN);\n-    private static final StyleAttributeMap NUMBER = mkStyle(Color.MAGENTA);\n-    private static final StyleAttributeMap OTHER = mkStyle(Color.BLACK);\n-    private static final StyleAttributeMap STRING = mkStyle(Color.BLUE);\n-    private ArrayList<RichParagraph> paragraphs;\n-\n-    public JavaSyntaxDecorator() {\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"JavaSyntaxDecorator\";\n-    }\n-\n-\n-    @Override\n-    public void handleChange(CodeTextModel m, TextPos start, TextPos end, int top, int lines, int btm) {\n-        \/\/ in theory, it may reuse the portions that haven't changed\n-        \/\/ but java files are short enough to re-analyze in full each time\n-        reload(m);\n-    }\n-\n-    @Override\n-    public RichParagraph createRichParagraph(CodeTextModel model, int index) {\n-        if ((paragraphs == null) || (index >= paragraphs.size())) {\n-            return RichParagraph.builder().build();\n-        }\n-        return paragraphs.get(index);\n-    }\n-\n-    private static StyleAttributeMap mkStyle(Color c) {\n-        return StyleAttributeMap.builder().setTextColor(c).build();\n-    }\n-\n-    private void reload(CodeTextModel model) {\n-        String text = getPlainText(model);\n-        JavaSyntaxAnalyzer a = new JavaSyntaxAnalyzer(text);\n-        List<JavaSyntaxAnalyzer.Line> res = a.analyze();\n-        paragraphs = translate(res);\n-    }\n-\n-    private String getPlainText(CodeTextModel model) {\n-        StringBuilder sb = new StringBuilder(65536);\n-        int sz = model.size();\n-        boolean nl = false;\n-        for (int i = 0; i < sz; i++) {\n-            if (nl) {\n-                sb.append('\\n');\n-            } else {\n-                nl = true;\n-            }\n-            String s = model.getPlainText(i);\n-            sb.append(s);\n-        }\n-        return sb.toString();\n-    }\n-\n-    private ArrayList<RichParagraph> translate(List<JavaSyntaxAnalyzer.Line> lines) {\n-        ArrayList<RichParagraph> res = new ArrayList<>(lines.size());\n-        for (JavaSyntaxAnalyzer.Line line : lines) {\n-            RichParagraph p = createParagraph(line);\n-            res.add(p);\n-        }\n-        return res;\n-    }\n-\n-    private RichParagraph createParagraph(JavaSyntaxAnalyzer.Line line) {\n-        RichParagraph.Builder b = RichParagraph.builder();\n-        for (JavaSyntaxAnalyzer.Segment seg : line.getSegments()) {\n-            JavaSyntaxAnalyzer.Type t = seg.getType();\n-            String text = seg.getText();\n-            StyleAttributeMap a = getStyleAttrs(t);\n-            b.addSegment(text, a);\n-        }\n-        return b.build();\n-    }\n-\n-    private StyleAttributeMap getStyleAttrs(JavaSyntaxAnalyzer.Type t) {\n-        switch(t) {\n-        case CHARACTER:\n-            return CHARACTER;\n-        case COMMENT:\n-            return COMMENT;\n-        case KEYWORD:\n-            return KEYWORD;\n-        case NUMBER:\n-            return NUMBER;\n-        case STRING:\n-            return STRING;\n-        }\n-        return OTHER;\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/codearea\/JavaSyntaxDecorator.java","additions":0,"deletions":147,"binary":false,"changes":147,"status":"deleted"},{"patch":"@@ -1,114 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.common;\n-\n-import jfx.incubator.scene.control.richtext.model.StyleAttribute;\n-import jfx.incubator.scene.control.richtext.model.StyleAttributeMap;\n-\n-\/**\n- * Static Styles for the Rich Text Editor Demo app.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class Styles {\n-    \/\/ TODO perhaps we should specifically set fonts to be used,\n-    \/\/ and couple that with the app stylesheet\n-    public static final StyleAttributeMap TITLE = s(\"System\", 24, true);\n-    public static final StyleAttributeMap HEADING = s(\"System\", 18, true);\n-    public static final StyleAttributeMap SUBHEADING = s(\"System\", 14, true);\n-    public static final StyleAttributeMap BODY = s(\"System\", 12, false);\n-    public static final StyleAttributeMap MONOSPACED = s(\"Monospace\", 12, false);\n-\n-    private static StyleAttributeMap s(String font, double size, boolean bold) {\n-        return StyleAttributeMap.builder().\n-            setFontFamily(font).\n-            setFontSize(size).\n-            setBold(bold).\n-            build();\n-    }\n-\n-    public static StyleAttributeMap getStyleAttributeMap(TextStyle st) {\n-        switch (st) {\n-        case BODY:\n-            return BODY;\n-        case HEADING:\n-            return HEADING;\n-        case MONOSPACED:\n-            return MONOSPACED;\n-        case TITLE:\n-            return TITLE;\n-        case SUBHEADING:\n-            return SUBHEADING;\n-        default:\n-            return BODY;\n-        }\n-    }\n-\n-    public static TextStyle guessTextStyle(StyleAttributeMap attrs) {\n-        if (attrs != null) {\n-            if (attrs.isEmpty()) {\n-                return TextStyle.BODY;\n-            }\n-            StyleAttribute<?>[] keys = {\n-                StyleAttributeMap.BOLD,\n-                StyleAttributeMap.FONT_FAMILY,\n-                StyleAttributeMap.FONT_SIZE\n-            };\n-            for (TextStyle st : TextStyle.values()) {\n-                StyleAttributeMap a = getStyleAttributeMap(st);\n-                if (match(attrs, a, keys)) {\n-                    return st;\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-\n-    private static boolean match(StyleAttributeMap attrs, StyleAttributeMap builtin, StyleAttribute<?>[] keys) {\n-        for (StyleAttribute<?> k : keys) {\n-            Object v1 = attrs.get(k);\n-            Object v2 = builtin.get(k);\n-            if (!eq(v1, v2)) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    private static boolean eq(Object a, Object b) {\n-        if (a == null) {\n-            return b == null;\n-        }\n-        return a.equals(b);\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/common\/Styles.java","additions":0,"deletions":114,"binary":false,"changes":114,"status":"deleted"},{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.common;\n-\n-import javafx.util.StringConverter;\n-\n-\/**\n- * Build-in text styles.\n- *\n- * @author Andy Goryachev\n- *\/\n-public enum TextStyle {\n-    TITLE,\n-    HEADING,\n-    SUBHEADING,\n-    BODY,\n-    MONOSPACED;\n-\n-    public String getDisplayName() {\n-        switch (this) {\n-        case BODY:\n-            return \"Body\";\n-        case HEADING:\n-            return \"Heading\";\n-        case MONOSPACED:\n-            return \"Monospaced\";\n-        case TITLE:\n-            return \"Title\";\n-        case SUBHEADING:\n-            return \"Subheading\";\n-        default:\n-            return \"?\" + this;\n-        }\n-    }\n-\n-    public static StringConverter<TextStyle> converter() {\n-        return new StringConverter<TextStyle>() {\n-            @Override\n-            public String toString(TextStyle t) {\n-                return t == null ? null : t.getDisplayName();\n-            }\n-\n-            @Override\n-            public TextStyle fromString(String s) {\n-                for (TextStyle t : TextStyle.values()) {\n-                    if (s.equals(t.getDisplayName())) {\n-                        return t;\n-                    }\n-                }\n-                return TextStyle.BODY;\n-            }\n-        };\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/common\/TextStyle.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -1,459 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.editor;\n-\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n-import java.util.Optional;\n-import javafx.beans.binding.Bindings;\n-import javafx.beans.property.ObjectProperty;\n-import javafx.beans.property.ReadOnlyBooleanProperty;\n-import javafx.beans.property.ReadOnlyBooleanWrapper;\n-import javafx.beans.property.ReadOnlyObjectProperty;\n-import javafx.beans.property.ReadOnlyObjectWrapper;\n-import javafx.beans.property.SimpleObjectProperty;\n-import javafx.scene.control.Alert;\n-import javafx.scene.control.Alert.AlertType;\n-import javafx.scene.control.ButtonBar.ButtonData;\n-import javafx.scene.control.ButtonType;\n-import javafx.scene.input.DataFormat;\n-import javafx.scene.paint.Color;\n-import javafx.stage.FileChooser;\n-import javafx.stage.Window;\n-import com.oracle.demo.richtext.common.Styles;\n-import com.oracle.demo.richtext.common.TextStyle;\n-import com.oracle.demo.richtext.util.FX;\n-import com.oracle.demo.richtext.util.FxAction;\n-import jfx.incubator.scene.control.richtext.RichTextArea;\n-import jfx.incubator.scene.control.richtext.SelectionSegment;\n-import jfx.incubator.scene.control.richtext.TextPos;\n-import jfx.incubator.scene.control.richtext.model.ContentChange;\n-import jfx.incubator.scene.control.richtext.model.RichTextFormatHandler;\n-import jfx.incubator.scene.control.richtext.model.RichTextModel;\n-import jfx.incubator.scene.control.richtext.model.StyleAttribute;\n-import jfx.incubator.scene.control.richtext.model.StyleAttributeMap;\n-import jfx.incubator.scene.control.richtext.model.StyledTextModel;\n-\n-\/**\n- * This is a bit of hack.  JavaFX has no actions (yet), so here we are using FxActions from\n- * https:\/\/github.com\/andy-goryachev\/AppFramework (with permission from the author).\n- * Ideally, these actions should be created upon demand and managed by the control, because\n- * control knows when the enabled state of each action changes.\n- * <p>\n- * This class adds a listener to the model and updates the states of all the actions.\n- * (The model does not change in this application).\n- *\n- * @author Andy Goryachev\n- *\/\n-public class Actions {\n-    \/\/ file\n-    public final FxAction newDocument = new FxAction(this::newDocument);\n-    public final FxAction open = new FxAction(this::open);\n-    public final FxAction save = new FxAction(this::save);\n-    \/\/ style\n-    public final FxAction bold = new FxAction(this::bold);\n-    public final FxAction italic = new FxAction(this::italic);\n-    public final FxAction strikeThrough = new FxAction(this::strikeThrough);\n-    public final FxAction underline = new FxAction(this::underline);\n-    \/\/ editing\n-    public final FxAction copy = new FxAction(this::copy);\n-    public final FxAction cut = new FxAction(this::cut);\n-    public final FxAction paste = new FxAction(this::paste);\n-    public final FxAction pasteUnformatted = new FxAction(this::pasteUnformatted);\n-    public final FxAction redo = new FxAction(this::redo);\n-    public final FxAction selectAll = new FxAction(this::selectAll);\n-    public final FxAction undo = new FxAction(this::undo);\n-    \/\/ view\n-    public final FxAction wrapText = new FxAction();\n-\n-    private final RichTextArea control;\n-    private final ReadOnlyBooleanWrapper modified = new ReadOnlyBooleanWrapper();\n-    private final ReadOnlyObjectWrapper<File> file = new ReadOnlyObjectWrapper<>();\n-    private final SimpleObjectProperty<StyleAttributeMap> styles = new SimpleObjectProperty<>();\n-    private final SimpleObjectProperty<TextStyle> textStyle = new SimpleObjectProperty<>();\n-\n-    public Actions(RichTextArea control) {\n-        this.control = control;\n-\n-        \/\/ undo\/redo actions\n-        redo.disabledProperty().bind(control.redoableProperty().not());\n-        undo.disabledProperty().bind(control.undoableProperty().not());\n-\n-        undo.disabledProperty().bind(Bindings.createBooleanBinding(() -> {\n-            return !control.isUndoable();\n-        }, control.undoableProperty()));\n-\n-        redo.disabledProperty().bind(Bindings.createBooleanBinding(() -> {\n-            return !control.isRedoable();\n-        }, control.redoableProperty()));\n-\n-        wrapText.selectedProperty().bindBidirectional(control.wrapTextProperty());\n-\n-        control.getModel().addListener(new StyledTextModel.Listener() {\n-            @Override\n-            public void onContentChange(ContentChange ch) {\n-                handleEdit();\n-            }\n-        });\n-\n-        control.caretPositionProperty().addListener((x) -> {\n-            handleCaret();\n-        });\n-\n-        control.selectionProperty().addListener((p) -> {\n-            updateSourceStyles();\n-        });\n-\n-        styles.addListener((s,p,a) -> {\n-            bold.setSelected(hasStyle(a, StyleAttributeMap.BOLD), false);\n-            italic.setSelected(hasStyle(a, StyleAttributeMap.ITALIC), false);\n-            strikeThrough.setSelected(hasStyle(a, StyleAttributeMap.STRIKE_THROUGH), false);\n-            underline.setSelected(hasStyle(a, StyleAttributeMap.UNDERLINE), false);\n-        });\n-\n-        updateSourceStyles();\n-\n-        handleEdit();\n-        handleCaret();\n-        setModified(false);\n-    }\n-\n-    private boolean hasStyle(StyleAttributeMap attrs, StyleAttribute<Boolean> a) {\n-        return attrs == null ? false : Boolean.TRUE.equals(attrs.get(a));\n-    }\n-\n-    public final ObjectProperty<TextStyle> textStyleProperty() {\n-        return textStyle;\n-    }\n-\n-    public final ReadOnlyBooleanProperty modifiedProperty() {\n-        return modified.getReadOnlyProperty();\n-    }\n-\n-    public final boolean isModified() {\n-        return modified.get();\n-    }\n-\n-    private void setModified(boolean on) {\n-        modified.set(on);\n-    }\n-\n-    public final ReadOnlyObjectProperty<File> fileNameProperty() {\n-        return file.getReadOnlyProperty();\n-    }\n-\n-    public final File getFile() {\n-        return file.get();\n-    }\n-\n-    private void handleEdit() {\n-        setModified(true);\n-    }\n-\n-    private void handleCaret() {\n-        boolean sel = control.hasNonEmptySelection();\n-        StyleAttributeMap a = control.getActiveStyleAttributeMap();\n-\n-        cut.setEnabled(sel);\n-        copy.setEnabled(sel);\n-\n-        bold.setSelected(a.getBoolean(StyleAttributeMap.BOLD), false);\n-        italic.setSelected(a.getBoolean(StyleAttributeMap.ITALIC), false);\n-        underline.setSelected(a.getBoolean(StyleAttributeMap.UNDERLINE), false);\n-        strikeThrough.setSelected(a.getBoolean(StyleAttributeMap.STRIKE_THROUGH), false);\n-    }\n-\n-    private void toggle(StyleAttribute<Boolean> attr) {\n-        TextPos start = control.getAnchorPosition();\n-        TextPos end = control.getCaretPosition();\n-        if (start == null) {\n-            return;\n-        } else if (start.equals(end)) {\n-            \/\/ apply to the whole paragraph\n-            int ix = start.index();\n-            start = new TextPos(ix, 0);\n-            end = control.getParagraphEnd(ix);\n-        }\n-\n-        StyleAttributeMap a = control.getActiveStyleAttributeMap();\n-        boolean on = !a.getBoolean(attr);\n-        a = StyleAttributeMap.builder().set(attr, on).build();\n-        control.applyStyle(start, end, a);\n-    }\n-\n-    private <T> void apply(StyleAttribute<T> attr, T value) {\n-        TextPos start = control.getAnchorPosition();\n-        TextPos end = control.getCaretPosition();\n-        if (start == null) {\n-            return;\n-        } else if (start.equals(end)) {\n-            \/\/ apply to the whole paragraph\n-            int ix = start.index();\n-            start = new TextPos(ix, 0);\n-            end = control.getParagraphEnd(ix);\n-        }\n-\n-        StyleAttributeMap a = control.getActiveStyleAttributeMap();\n-        a = StyleAttributeMap.builder().set(attr, value).build();\n-        control.applyStyle(start, end, a);\n-    }\n-\n-    \/\/ TODO need to bind selected item in the combo\n-    public void setFontSize(Integer size) {\n-        apply(StyleAttributeMap.FONT_SIZE, size.doubleValue());\n-    }\n-\n-    \/\/ TODO need to bind selected item in the combo\n-    public void setFontName(String name) {\n-        apply(StyleAttributeMap.FONT_FAMILY, name);\n-    }\n-\n-    public void setTextColor(Color color) {\n-        apply(StyleAttributeMap.TEXT_COLOR, color);\n-    }\n-\n-    private void newDocument() {\n-        if (askToSave()) {\n-            return;\n-        }\n-        control.setModel(new RichTextModel());\n-        setModified(false);\n-    }\n-\n-    private void open() {\n-        if (askToSave()) {\n-            return;\n-        }\n-\n-        FileChooser ch = new FileChooser();\n-        ch.setTitle(\"Open File\");\n-        \/\/ TODO add extensions\n-        Window w = FX.getParentWindow(control);\n-        File f = ch.showOpenDialog(w);\n-        if (f != null) {\n-            try {\n-                readFile(f, RichTextFormatHandler.DATA_FORMAT);\n-            } catch (Exception e) {\n-                new ExceptionDialog(control, e).open();\n-            }\n-        }\n-    }\n-\n-    \/\/ FIX this is too simplistic, need save() and save as...\n-    private void save() {\n-        File f = getFile();\n-        if (f == null) {\n-            FileChooser ch = new FileChooser();\n-            ch.setTitle(\"Save File\");\n-            \/\/ TODO add extensions\n-            Window w = FX.getParentWindow(control);\n-            f = ch.showSaveDialog(w);\n-            if (f == null) {\n-                return;\n-            }\n-        }\n-        try {\n-            writeFile(f, RichTextFormatHandler.DATA_FORMAT);\n-        } catch (Exception e) {\n-            new ExceptionDialog(control, e).open();\n-        }\n-    }\n-\n-    \/\/ returns true if the user chose to Cancel\n-    private boolean askToSave() {\n-        if (isModified()) {\n-            \/\/ alert: has been modified. do you want to save?\n-            Alert alert = new Alert(AlertType.CONFIRMATION);\n-            alert.initOwner(FX.getParentWindow(control));\n-            alert.setTitle(\"Document is Modified\");\n-            alert.setHeaderText(\"Do you want to save this document?\");\n-            ButtonType delete = new ButtonType(\"Delete\");\n-            ButtonType cancel = new ButtonType(\"Cancel\", ButtonData.CANCEL_CLOSE);\n-            ButtonType save = new ButtonType(\"Save\", ButtonData.APPLY);\n-            alert.getButtonTypes().setAll(\n-                delete,\n-                cancel,\n-                save\n-            );\n-\n-            File f = getFile();\n-            SavePane sp = new SavePane();\n-            sp.setFile(f);\n-            alert.getDialogPane().setContent(sp);\n-            Optional<ButtonType> result = alert.showAndWait();\n-            if (result.isPresent()) {\n-                ButtonType t = result.get();\n-                if (t == delete) {\n-                    return false;\n-                } else if (t == cancel) {\n-                    return true;\n-                } else {\n-                    \/\/ save using info in the panel\n-                    f = sp.getFile();\n-                    DataFormat fmt = sp.getFileFormat();\n-                    \/\/ FIX\n-                    fmt = RichTextFormatHandler.DATA_FORMAT;\n-\n-                    try {\n-                        writeFile(f, fmt);\n-                    } catch (Exception e) {\n-                        new ExceptionDialog(control, e).open();\n-                        return true;\n-                    }\n-                }\n-            } else {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    private void readFile(File f, DataFormat fmt) throws Exception {\n-        try (FileInputStream in = new FileInputStream(f)) {\n-            control.read(fmt, in);\n-            file.set(f);\n-            setModified(false);\n-        }\n-    }\n-\n-    private void writeFile(File f, DataFormat fmt) throws Exception {\n-        try (FileOutputStream out = new FileOutputStream(f)) {\n-            control.write(fmt, out);\n-            file.set(f);\n-            setModified(false);\n-        }\n-    }\n-\n-    public void copy() {\n-        control.copy();\n-    }\n-\n-    public void cut() {\n-        control.cut();\n-    }\n-\n-    public void paste() {\n-        control.paste();\n-    }\n-\n-    public void pasteUnformatted() {\n-        control.pastePlainText();\n-    }\n-\n-    public void selectAll() {\n-        control.selectAll();\n-    }\n-\n-    public void redo() {\n-       control.redo();\n-    }\n-\n-    public void undo() {\n-        control.undo();\n-    }\n-\n-    public void bold() {\n-        toggleStyle(StyleAttributeMap.BOLD);\n-    }\n-\n-    public void italic() {\n-        toggleStyle(StyleAttributeMap.ITALIC);\n-    }\n-\n-    public void strikeThrough() {\n-        toggleStyle(StyleAttributeMap.STRIKE_THROUGH);\n-    }\n-\n-    public void underline() {\n-        toggleStyle(StyleAttributeMap.UNDERLINE);\n-    }\n-\n-    private void toggleStyle(StyleAttribute<Boolean> attr) {\n-        TextPos start = control.getAnchorPosition();\n-        TextPos end = control.getCaretPosition();\n-        if (start == null) {\n-            return;\n-        } else if (start.equals(end)) {\n-            \/\/ apply to the whole paragraph\n-            int ix = start.index();\n-            start = new TextPos(ix, 0);\n-            end = control.getParagraphEnd(ix);\n-        }\n-\n-        StyleAttributeMap a = control.getActiveStyleAttributeMap();\n-        boolean on = !a.getBoolean(attr);\n-        a = StyleAttributeMap.builder().set(attr, on).build();\n-        control.applyStyle(start, end, a);\n-        updateSourceStyles();\n-    }\n-\n-    public void setTextStyle(TextStyle st) {\n-        TextPos start = control.getAnchorPosition();\n-        TextPos end = control.getCaretPosition();\n-        if (start == null) {\n-            return;\n-        } else if (start.equals(end)) {\n-            TextStyle cur = Styles.guessTextStyle(control.getActiveStyleAttributeMap());\n-            if (cur == st) {\n-                return;\n-            }\n-            \/\/ apply to the whole paragraph\n-            int ix = start.index();\n-            start = new TextPos(ix, 0);\n-            end = control.getParagraphEnd(ix);\n-        }\n-\n-        StyleAttributeMap a = Styles.getStyleAttributeMap(st);\n-        control.applyStyle(start, end, a);\n-        updateSourceStyles();\n-    }\n-\n-    private void updateSourceStyles() {\n-        StyleAttributeMap a = getSourceStyleAttrs();\n-        if (a != null) {\n-            styles.set(a);\n-\n-            TextStyle st = Styles.guessTextStyle(a);\n-            textStyle.set(st);\n-        }\n-    }\n-\n-    private StyleAttributeMap getSourceStyleAttrs() {\n-        SelectionSegment sel = control.getSelection();\n-        if ((sel == null) || (!sel.isCollapsed())) {\n-            return null;\n-        }\n-        return control.getActiveStyleAttributeMap();\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/editor\/Actions.java","additions":0,"deletions":459,"binary":false,"changes":459,"status":"deleted"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.editor;\n-\n-import java.io.FileNotFoundException;\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import javafx.scene.Node;\n-import javafx.scene.control.Alert;\n-import javafx.scene.control.Label;\n-import javafx.scene.control.TextArea;\n-import javafx.scene.layout.GridPane;\n-import javafx.scene.layout.Priority;\n-\n-\/**\n- * Dialog which shows the exception message and its stack trace.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class ExceptionDialog extends Alert {\n-    public ExceptionDialog(Node owner, Throwable err) {\n-        super(AlertType.ERROR);\n-\n-        setTitle(\"An Error Occurred\");\n-        \/\/setHeaderText(\"\");\n-        \/\/setContentText(\"\");\n-\n-        StringWriter sw = new StringWriter();\n-        PrintWriter pw = new PrintWriter(sw);\n-        err.printStackTrace(pw);\n-        String text = sw.toString();\n-\n-        Label label = new Label(\"The exception stacktrace:\");\n-\n-        TextArea textArea = new TextArea(text);\n-        textArea.setEditable(false);\n-        textArea.setWrapText(false);\n-\n-        textArea.setMaxWidth(Double.MAX_VALUE);\n-        textArea.setMaxHeight(Double.MAX_VALUE);\n-        GridPane.setVgrow(textArea, Priority.ALWAYS);\n-        GridPane.setHgrow(textArea, Priority.ALWAYS);\n-\n-        GridPane expContent = new GridPane();\n-        expContent.setMaxWidth(Double.MAX_VALUE);\n-        expContent.add(label, 0, 0);\n-        expContent.add(textArea, 0, 1);\n-\n-        getDialogPane().setExpandableContent(expContent);\n-    }\n-\n-    public void open() {\n-        showAndWait();\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/editor\/ExceptionDialog.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.editor;\n-\n-import javafx.application.Application;\n-import javafx.stage.Stage;\n-import com.oracle.demo.richtext.settings.FxSettings;\n-\n-\/**\n- * Rich Text Editor Demo Application.\n- * <p>\n- * It's a minimal rich text editor based on the new\n- * {@link jfx.incubator.scene.control.richtext.RichTextArea} control.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class RichEditorDemoApp extends Application {\n-    public static void main(String[] args) {\n-        Application.launch(RichEditorDemoApp.class, args);\n-    }\n-\n-    @Override\n-    public void init() {\n-        FxSettings.useDirectory(\".RichEditorDemoApp\");\n-    }\n-\n-    @Override\n-    public void start(Stage stage) throws Exception {\n-        new RichEditorDemoWindow().show();\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/editor\/RichEditorDemoApp.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -1,187 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.editor;\n-\n-import java.util.List;\n-import javafx.scene.control.ColorPicker;\n-import javafx.scene.control.ComboBox;\n-import javafx.scene.control.ContextMenu;\n-import javafx.scene.control.ToolBar;\n-import javafx.scene.input.KeyCode;\n-import javafx.scene.layout.BorderPane;\n-import javafx.scene.text.Font;\n-import com.oracle.demo.richtext.common.TextStyle;\n-import com.oracle.demo.richtext.util.FX;\n-import jfx.incubator.scene.control.input.KeyBinding;\n-import jfx.incubator.scene.control.richtext.RichTextArea;\n-\n-\/**\n- * Main Panel.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class RichEditorDemoPane extends BorderPane {\n-    public final RichTextArea control;\n-    public final Actions actions;\n-    private final ComboBox<String> fontName;\n-    private final ComboBox<Integer> fontSize;\n-    private final ColorPicker textColor;\n-    private final ComboBox<TextStyle> textStyle;\n-\n-    public RichEditorDemoPane() {\n-        FX.name(this, \"RichEditorDemoPane\");\n-\n-        control = new RichTextArea();\n-        \/\/ custom function\n-        control.getInputMap().register(KeyBinding.shortcut(KeyCode.W), () -> {\n-            System.out.println(\"Custom function: W key is pressed\");\n-        });\n-\n-        actions = new Actions(control);\n-        control.setContextMenu(createContextMenu());\n-\n-        fontName = new ComboBox<>();\n-        fontName.getItems().setAll(collectFonts());\n-        fontName.setOnAction((ev) -> {\n-            actions.setFontName(fontName.getSelectionModel().getSelectedItem());\n-        });\n-\n-        fontSize = new ComboBox<>();\n-        fontSize.getItems().setAll(\n-            7,\n-            8,\n-            9,\n-            10,\n-            11,\n-            12,\n-            13,\n-            14,\n-            16,\n-            18,\n-            20,\n-            22,\n-            24,\n-            28,\n-            32,\n-            36,\n-            48,\n-            72,\n-            96,\n-            128\n-        );\n-        fontSize.setOnAction((ev) -> {\n-            actions.setFontSize(fontSize.getSelectionModel().getSelectedItem());\n-        });\n-\n-        textColor = new ColorPicker();\n-        \/\/ TODO save\/restore custom colors\n-        FX.tooltip(textColor, \"Text Color\");\n-        \/\/ FIX there is no API for this!  why is this a property of a skin, not the control??\n-        \/\/ https:\/\/stackoverflow.com\/questions\/21246137\/remove-text-from-colour-picker\n-        textColor.setStyle(\"-fx-color-label-visible: false ;\");\n-        textColor.setOnAction((ev) -> {\n-            actions.setTextColor(textColor.getValue());\n-        });\n-\n-        textStyle = new ComboBox<>();\n-        textStyle.getItems().setAll(TextStyle.values());\n-        textStyle.setConverter(TextStyle.converter());\n-        textStyle.setOnAction((ev) -> {\n-            updateTextStyle();\n-        });\n-\n-        setTop(createToolBar());\n-        setCenter(control);\n-\n-        actions.textStyleProperty().addListener((s,p,c) -> {\n-            setTextStyle(c);\n-        });\n-    }\n-\n-    private ToolBar createToolBar() {\n-        ToolBar t = new ToolBar();\n-        FX.add(t, fontName);\n-        FX.add(t, fontSize);\n-        FX.add(t, textColor);\n-        FX.space(t);\n-        \/\/ TODO background\n-        \/\/ TODO alignment\n-        \/\/ TODO bullet\n-        \/\/ TODO space left (indent left, indent right)\n-        \/\/ TODO line spacing\n-        FX.toggleButton(t, \"𝐁\", \"Bold text\", actions.bold);\n-        FX.toggleButton(t, \"𝐼\", \"Bold text\", actions.italic);\n-        FX.toggleButton(t, \"S\\u0336\", \"Strike through text\", actions.strikeThrough);\n-        FX.toggleButton(t, \"U\\u0332\", \"Underline text\", actions.underline);\n-        FX.add(t, textStyle);\n-        FX.space(t);\n-        FX.toggleButton(t, \"W\", \"Wrap Text\", actions.wrapText);\n-        \/\/ TODO line numbers\n-        return t;\n-    }\n-\n-    private ContextMenu createContextMenu() {\n-        ContextMenu m = new ContextMenu();\n-        FX.item(m, \"Undo\", actions.undo);\n-        FX.item(m, \"Redo\", actions.redo);\n-        FX.separator(m);\n-        FX.item(m, \"Cut\", actions.cut);\n-        FX.item(m, \"Copy\", actions.copy);\n-        FX.item(m, \"Paste\", actions.paste);\n-        FX.item(m, \"Paste and Retain Style\", actions.pasteUnformatted);\n-        FX.separator(m);\n-        FX.item(m, \"Select All\", actions.selectAll);\n-        FX.separator(m);\n-        \/\/ TODO under \"Style\" submenu?\n-        FX.item(m, \"Bold\", actions.bold);\n-        FX.item(m, \"Italic\", actions.italic);\n-        FX.item(m, \"Strike Through\", actions.strikeThrough);\n-        FX.item(m, \"Underline\", actions.underline);\n-        return m;\n-    }\n-\n-    private static List<String> collectFonts() {\n-        return Font.getFamilies();\n-    }\n-\n-    private void updateTextStyle() {\n-        TextStyle st = textStyle.getSelectionModel().getSelectedItem();\n-        if (st != null) {\n-            actions.setTextStyle(st);\n-        }\n-    }\n-\n-    public void setTextStyle(TextStyle v) {\n-        textStyle.setValue(v);\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/editor\/RichEditorDemoPane.java","additions":0,"deletions":187,"binary":false,"changes":187,"status":"deleted"},{"patch":"@@ -1,159 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.editor;\n-\n-import java.io.File;\n-import javafx.application.Platform;\n-import javafx.geometry.Insets;\n-import javafx.scene.Scene;\n-import javafx.scene.control.Label;\n-import javafx.scene.control.MenuBar;\n-import javafx.scene.layout.BorderPane;\n-import javafx.stage.Stage;\n-import com.oracle.demo.richtext.rta.RichTextAreaWindow;\n-import com.oracle.demo.richtext.util.FX;\n-import jfx.incubator.scene.control.richtext.RichTextArea;\n-import jfx.incubator.scene.control.richtext.TextPos;\n-\n-\/**\n- * Rich Editor Demo window.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class RichEditorDemoWindow extends Stage {\n-    public final RichEditorDemoPane pane;\n-    public final Label status;\n-\n-    public RichEditorDemoWindow() {\n-        pane = new RichEditorDemoPane();\n-\n-        status = new Label();\n-        status.setPadding(new Insets(2, 10, 2, 10));\n-\n-        BorderPane bp = new BorderPane();\n-        bp.setTop(createMenu());\n-        bp.setCenter(pane);\n-        bp.setBottom(status);\n-\n-        Scene scene = new Scene(bp);\n-\n-        \/\/ TODO input map for the window: add shortcut-S for saving\n-\n-        setScene(scene);\n-        setWidth(1200);\n-        setHeight(600);\n-\n-        pane.control.caretPositionProperty().addListener((x) -> {\n-            updateStatus();\n-        });\n-        pane.actions.modifiedProperty().addListener((x) -> {\n-            updateTitle();\n-        });\n-        pane.actions.fileNameProperty().addListener((x) -> {\n-            updateTitle();\n-        });\n-        updateStatus();\n-        updateTitle();\n-    }\n-\n-    private MenuBar createMenu() {\n-        Actions actions = pane.actions;\n-        MenuBar m = new MenuBar();\n-        \/\/ file\n-        FX.menu(m, \"File\");\n-        FX.item(m, \"New\", actions.newDocument);\n-        FX.item(m, \"Open...\", actions.open);\n-        FX.separator(m);\n-        FX.item(m, \"Save...\", actions.save);\n-        \/\/ TODO print?\n-        FX.item(m, \"Quit\", () -> Platform.exit());\n-\n-        \/\/ edit\n-        FX.menu(m, \"Edit\");\n-        FX.item(m, \"Undo\", actions.undo);\n-        FX.item(m, \"Redo\", actions.redo);\n-        FX.separator(m);\n-        FX.item(m, \"Cut\", actions.cut);\n-        FX.item(m, \"Copy\", actions.copy);\n-        FX.item(m, \"Paste\", actions.paste);\n-        FX.item(m, \"Paste and Retain Style\", actions.pasteUnformatted);\n-\n-        \/\/ format\n-        FX.menu(m, \"Format\");\n-        FX.item(m, \"Bold\", actions.bold);\n-        FX.item(m, \"Italic\", actions.italic);\n-        FX.item(m, \"Strike Through\", actions.strikeThrough);\n-        FX.item(m, \"Underline\", actions.underline);\n-\n-        \/\/ view\n-        FX.menu(m, \"View\");\n-        FX.checkItem(m, \"Wrap Text\", actions.wrapText);\n-        \/\/ TODO line numbers\n-        \/\/ TODO line spacing\n-\n-        \/\/ help\n-        FX.menu(m, \"Help\");\n-        \/\/ TODO about\n-        return m;\n-    }\n-\n-    private void updateStatus() {\n-        RichTextArea t = pane.control;\n-        TextPos p = t.getCaretPosition();\n-\n-        StringBuilder sb = new StringBuilder();\n-\n-        if (p != null) {\n-            sb.append(\" Line: \").append(p.index() + 1);\n-            sb.append(\"  Column: \").append(p.offset() + 1);\n-        }\n-\n-        status.setText(sb.toString());\n-    }\n-\n-    private void updateTitle() {\n-        File f = pane.actions.getFile();\n-        boolean modified = pane.actions.isModified();\n-\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"Rich Text Editor Demo\");\n-        if (f != null) {\n-            sb.append(\" - \");\n-            sb.append(f.getName());\n-        }\n-        if (modified) {\n-            sb.append(\" *\");\n-        }\n-        setTitle(sb.toString());\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/editor\/RichEditorDemoWindow.java","additions":0,"deletions":159,"binary":false,"changes":159,"status":"deleted"},{"patch":"@@ -1,157 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.editor;\n-\n-import java.io.File;\n-import java.util.ArrayList;\n-import javafx.application.Platform;\n-import javafx.geometry.HPos;\n-import javafx.geometry.Insets;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.ComboBox;\n-import javafx.scene.control.Label;\n-import javafx.scene.control.TextField;\n-import javafx.scene.input.DataFormat;\n-import javafx.scene.layout.GridPane;\n-import javafx.scene.layout.Priority;\n-import javafx.stage.DirectoryChooser;\n-import javafx.stage.Window;\n-import com.oracle.demo.richtext.util.FX;\n-\n-\/**\n- * Part of the Save As dialog.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class SavePane extends GridPane {\n-    private final TextField nameField;\n-    private final ComboBox<File> folderField;\n-    private final ComboBox<DataFormat> formatField;\n-\n-    public SavePane() {\n-        nameField = new TextField();\n-        setHgrow(nameField, Priority.ALWAYS);\n-        setFillWidth(nameField, Boolean.TRUE);\n-\n-        folderField = new ComboBox<>();\n-        setHgrow(folderField, Priority.ALWAYS);\n-        setFillWidth(folderField, Boolean.TRUE);\n-\n-        formatField = new ComboBox<>();\n-\n-        Button browse = new Button(\"Browse\");\n-        setFillWidth(browse, Boolean.TRUE);\n-        browse.setOnAction((ev) -> {\n-            browse();\n-        });\n-\n-        int r = 0;\n-        add(label(\"Save As:\"), 0, r);\n-        add(nameField, 1, r, 3, 1);\n-        r++;\n-        add(label(\"Where:\"), 0, r);\n-        add(folderField, 1, r);\n-        add(browse, 2, r);\n-        r++;\n-        add(label(\"File Format:\"), 0, r);\n-        add(formatField, 1, r, 2, 1);\n-\n-        setHgap(10);\n-        setVgap(5);\n-        setPadding(new Insets(10));\n-\n-        Platform.runLater(() -> {\n-            nameField.selectAll();\n-            nameField.requestFocus();\n-        });\n-    }\n-\n-    private static Label label(String text) {\n-        Label t = new Label(text);\n-        setHalignment(t, HPos.RIGHT);\n-        return t;\n-    }\n-\n-    public void setFile(File f) {\n-        if (f == null) {\n-            nameField.setText(\"Untitled.rich\");\n-            setDir(null);\n-        } else {\n-            nameField.setText(f.getName());\n-            setDir(f.getParentFile());\n-        }\n-    }\n-\n-    private void setDir(File dir) {\n-        if (dir == null) {\n-            dir = new File(System.getProperty(\"user.home\"));\n-        }\n-        ArrayList<File> fs = new ArrayList<>();\n-        File f = dir;\n-        do {\n-            fs.add(f);\n-            f = f.getParentFile();\n-        } while (f != null);\n-        folderField.getItems().setAll(fs);\n-        folderField.getSelectionModel().select(dir);\n-    }\n-\n-    public void setFormat(DataFormat f) {\n-        \/\/ TODO\n-    }\n-\n-    public File getFile() {\n-        File dir = getDir();\n-        \/\/ TODO extension based on data format\n-        return new File(dir, nameField.getText());\n-    }\n-\n-    public DataFormat getFileFormat() {\n-        return null; \/\/ FIX\n-    }\n-\n-    private File getDir() {\n-        return folderField.getSelectionModel().getSelectedItem();\n-    }\n-\n-    private void browse() {\n-        DirectoryChooser ch = new DirectoryChooser();\n-        ch.setTitle(\"Choose Folder\");\n-        ch.setInitialDirectory(getDir());\n-        Window w = FX.getParentWindow(this);\n-        File f = ch.showDialog(w);\n-        if (f != null) {\n-            setDir(f);\n-        }\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/editor\/SavePane.java","additions":0,"deletions":157,"binary":false,"changes":157,"status":"deleted"},{"patch":"@@ -1,819 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.notebook;\n-\n-import java.io.File;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.function.Consumer;\n-import javafx.application.Platform;\n-import javafx.beans.InvalidationListener;\n-import javafx.beans.binding.Bindings;\n-import javafx.beans.binding.BooleanBinding;\n-import javafx.beans.property.ObjectProperty;\n-import javafx.beans.property.ReadOnlyBooleanProperty;\n-import javafx.beans.property.ReadOnlyBooleanWrapper;\n-import javafx.beans.property.ReadOnlyObjectProperty;\n-import javafx.beans.property.ReadOnlyObjectWrapper;\n-import javafx.beans.property.SimpleBooleanProperty;\n-import javafx.beans.property.SimpleObjectProperty;\n-import javafx.beans.value.ChangeListener;\n-import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n-import javafx.scene.Node;\n-import javafx.scene.input.DataFormat;\n-import com.oracle.demo.richtext.common.Styles;\n-import com.oracle.demo.richtext.common.TextStyle;\n-import com.oracle.demo.richtext.notebook.data.CellInfo;\n-import com.oracle.demo.richtext.notebook.data.Notebook;\n-import com.oracle.demo.richtext.util.FX;\n-import com.oracle.demo.richtext.util.FxAction;\n-import jfx.incubator.scene.control.richtext.CodeArea;\n-import jfx.incubator.scene.control.richtext.RichTextArea;\n-import jfx.incubator.scene.control.richtext.SelectionSegment;\n-import jfx.incubator.scene.control.richtext.TextPos;\n-import jfx.incubator.scene.control.richtext.model.ContentChange;\n-import jfx.incubator.scene.control.richtext.model.StyleAttribute;\n-import jfx.incubator.scene.control.richtext.model.StyleAttributeMap;\n-import jfx.incubator.scene.control.richtext.model.StyledTextModel;\n-\n-\/**\n- * This class reacts to changes in application state such as currently active cell,\n- * caret, selection, model, etc.; then updates the actions disabled and selected properties.\n- * <p>\n- * JavaFX has no actions (yet), so here we are using FxActions from\n- * https:\/\/github.com\/andy-goryachev\/AppFramework (with permission from the author).\n- *\n- * @author Andy Goryachev\n- *\/\n-public class Actions {\n-    \/\/ file\n-    public final FxAction newDocument = new FxAction(this::newDocument);\n-    public final FxAction open = new FxAction(this::open);\n-    public final FxAction save = new FxAction(this::save);\n-    \/\/ style\n-    public final FxAction bold = new FxAction(this::bold);\n-    public final FxAction italic = new FxAction(this::italic);\n-    public final FxAction strikeThrough = new FxAction(this::strikeThrough);\n-    public final FxAction underline = new FxAction(this::underline);\n-    \/\/ editing\n-    public final FxAction copy = new FxAction(this::copy);\n-    public final FxAction cut = new FxAction(this::cut);\n-    public final FxAction paste = new FxAction(this::paste);\n-    public final FxAction pasteUnformatted = new FxAction(this::pasteUnformatted);\n-    public final FxAction redo = new FxAction(this::redo);\n-    public final FxAction selectAll = new FxAction(this::selectAll);\n-    public final FxAction undo = new FxAction(this::undo);\n-    \/\/ cells\n-    public final FxAction copyCell = new FxAction(this::copyCell);\n-    public final FxAction cutCell = new FxAction(this::cutCell);\n-    public final FxAction deleteCell = new FxAction(this::deleteCell);\n-    public final FxAction insertCellBelow = new FxAction(this::insertCellBelow);\n-    public final FxAction mergeCellAbove = new FxAction(this::mergeCellAbove);\n-    public final FxAction mergeCellBelow = new FxAction(this::mergeCellBelow);\n-    public final FxAction moveCellDown = new FxAction(this::moveCellDown);\n-    public final FxAction moveCellUp = new FxAction(this::moveCellUp);\n-    public final FxAction pasteCellBelow = new FxAction(this::pasteCellBelow);\n-    public final FxAction runAndAdvance = new FxAction(this::runAndAdvance);\n-    public final FxAction runAll = new FxAction(this::runAll);\n-    public final FxAction splitCell = new FxAction(this::splitCell);\n-\n-    private enum EditorType {\n-        CODE,\n-        NONE,\n-        OUTPUT,\n-        TEXT,\n-    }\n-\n-    private final NotebookWindow window;\n-    private final DemoScriptEngine engine;\n-    private final ObservableList<CellPane> cellPanes = FXCollections.observableArrayList();\n-    private final ReadOnlyObjectWrapper<CellPane> activeCellPane = new ReadOnlyObjectWrapper<>();\n-    private final ReadOnlyBooleanWrapper modified = new ReadOnlyBooleanWrapper();\n-    private final ReadOnlyObjectWrapper<File> file = new ReadOnlyObjectWrapper<>();\n-    private final SimpleBooleanProperty executing = new SimpleBooleanProperty();\n-    private final SimpleObjectProperty<RichTextArea> editor = new SimpleObjectProperty<>();\n-    private final SimpleObjectProperty<EditorType> editorType = new SimpleObjectProperty<>(EditorType.NONE);\n-    private final SimpleObjectProperty<StyleAttributeMap> styles = new SimpleObjectProperty<>();\n-    private final SimpleObjectProperty<TextStyle> textStyle = new SimpleObjectProperty<>();\n-    private final BooleanBinding disabledStyleEditing;\n-    private int sequenceNumber;\n-\n-    public Actions(NotebookWindow w) {\n-        this.window = w;\n-\n-        engine = new DemoScriptEngine();\n-\n-        BooleanBinding disabledEditing = Bindings.createBooleanBinding(\n-            () -> {\n-                if (isExecuting()) {\n-                    return true;\n-                }\n-                RichTextArea r = editor.get();\n-                if (r == null) {\n-                    return true;\n-                }\n-                if (r.isEditable() && (r.getModel() != null) && (r.getModel().isWritable())) {\n-                    return false;\n-                }\n-                return true;\n-            },\n-            editor,\n-            executing\n-        );\n-\n-        disabledStyleEditing = Bindings.createBooleanBinding(\n-            () -> {\n-                if (isExecuting()) {\n-                    return true;\n-                }\n-                return (editorType.get() != EditorType.TEXT);\n-            },\n-            editorType,\n-            executing\n-        );\n-\n-        BooleanBinding cellActionsDisabled = Bindings.createBooleanBinding(\n-            () -> {\n-                if(isExecuting()) {\n-                    return true;\n-                }\n-                CellPane p = getActiveCellPane();\n-                return p == null;\n-            },\n-            activeCellPane,\n-            executing\n-        );\n-\n-        BooleanBinding runDisabled = Bindings.createBooleanBinding(\n-            () -> {\n-                if(isExecuting()) {\n-                    return true;\n-                }\n-                CellType p = getActiveCellType();\n-                return p != CellType.CODE;\n-            },\n-            activeCellPane,\n-            executing\n-        );\n-\n-        SimpleBooleanProperty redoDisabled = new SimpleBooleanProperty();\n-        SimpleBooleanProperty undoDisabled = new SimpleBooleanProperty();\n-\n-        \/\/ file actions\n-        open.setDisabled(true);\n-        save.setDisabled(true);\n-\n-        \/\/ style actions\n-        bold.disabledProperty().bind(disabledStyleEditing);\n-        italic.disabledProperty().bind(disabledStyleEditing);\n-        strikeThrough.disabledProperty().bind(disabledStyleEditing);\n-        underline.disabledProperty().bind(disabledStyleEditing);\n-\n-        \/\/ editing actions\n-        copy.setEnabled(true); \/\/ always\n-        cut.disabledProperty().bind(disabledEditing);\n-        paste.disabledProperty().bind(disabledEditing);\n-        pasteUnformatted.disabledProperty().bind(disabledEditing);\n-        selectAll.setEnabled(true); \/\/ always\n-\n-        \/\/ undo\/redo actions\n-        redo.disabledProperty().bind(redoDisabled);\n-        undo.disabledProperty().bind(undoDisabled);\n-\n-        \/\/ cell actions\n-        copyCell.setDisabled(true);\n-        cutCell.setDisabled(true);\n-        deleteCell.disabledProperty().bind(cellActionsDisabled);\n-        insertCellBelow.disabledProperty().bind(cellActionsDisabled);\n-        mergeCellAbove.setDisabled(true);\n-        mergeCellBelow.setDisabled(true);\n-        moveCellDown.disabledProperty().bind(cellActionsDisabled);\n-        moveCellUp.disabledProperty().bind(cellActionsDisabled);\n-        pasteCellBelow.setDisabled(true);\n-        runAndAdvance.disabledProperty().bind(runDisabled);\n-        runAll.setDisabled(true);\n-        splitCell.disabledProperty().bind(disabledEditing);\n-\n-        \/\/ listeners\n-\n-        styles.addListener((s,p,a) -> {\n-            bold.setSelected(hasStyle(a, StyleAttributeMap.BOLD), false);\n-            italic.setSelected(hasStyle(a, StyleAttributeMap.ITALIC), false);\n-            strikeThrough.setSelected(hasStyle(a, StyleAttributeMap.STRIKE_THROUGH), false);\n-            underline.setSelected(hasStyle(a, StyleAttributeMap.UNDERLINE), false);\n-        });\n-\n-        ChangeListener<Node> focusOwnerListener = (src, old, node) -> {\n-            CellPane p = FX.findParentOf(CellPane.class, node);\n-            if (p == null) {\n-                return;\n-            }\n-\n-            RichTextArea r = FX.findParentOf(RichTextArea.class, node);\n-            editor.set(r);\n-\n-            EditorType t = getEditorType(r);\n-            editorType.set(t);\n-            updateSourceStyles();\n-        };\n-\n-        window.sceneProperty().addListener((src, old, cur) -> {\n-           if(old != null) {\n-               old.focusOwnerProperty().removeListener(focusOwnerListener);\n-           }\n-           if(cur != null) {\n-               cur.focusOwnerProperty().addListener(focusOwnerListener);\n-           }\n-        });\n-\n-        StyledTextModel.Listener changeListener = new StyledTextModel.Listener() {\n-            @Override\n-            public void onContentChange(ContentChange ch) {\n-                if (ch.isEdit()) {\n-                    handleEdit();\n-                } else {\n-                    if (editorType.get() == EditorType.TEXT) {\n-                        handleEdit();\n-                    }\n-                }\n-            }\n-        };\n-\n-        InvalidationListener selectionListener = (p) -> {\n-            updateSourceStyles();\n-        };\n-\n-        editor.addListener((src, old, ed) -> {\n-            if (old != null) {\n-                if (isSourceEditor(old)) {\n-                    old.getModel().removeListener(changeListener);\n-                    old.selectionProperty().removeListener(selectionListener);\n-                }\n-            }\n-\n-            redoDisabled.unbind();\n-            redoDisabled.set(true);\n-            undoDisabled.unbind();\n-            undoDisabled.set(true);\n-\n-            if (ed != null) {\n-                if (isSourceEditor(ed)) {\n-                    ed.getModel().addListener(changeListener);\n-                    ed.selectionProperty().addListener(selectionListener);\n-                    redoDisabled.bind(executing.or(ed.redoableProperty().not()));\n-                    undoDisabled.bind(executing.or(ed.undoableProperty().not()));\n-                }\n-            }\n-        });\n-\n-        updateSourceStyles();\n-\n-        activeCellPane.addListener((src, prev, cur) -> {\n-            if (prev != null) {\n-                prev.setActive(false);\n-            }\n-            if (cur != null) {\n-                cur.setActive(true);\n-            }\n-        });\n-    }\n-\n-    private EditorType getEditorType(RichTextArea r) {\n-        if (r == null) {\n-            return EditorType.NONE;\n-        } else if (r instanceof CodeArea) {\n-            if (r.isEditable()) {\n-                return EditorType.CODE;\n-            } else {\n-                return EditorType.OUTPUT;\n-            }\n-        }\n-        return EditorType.TEXT;\n-    }\n-\n-    private boolean isSourceEditor(RichTextArea r) {\n-        EditorType t = getEditorType(r);\n-        switch (t) {\n-        case CODE:\n-        case TEXT:\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    private void updateSourceStyles() {\n-        StyleAttributeMap a = getSourceStyleAttrs();\n-        if (a != null) {\n-            styles.set(a);\n-\n-            TextStyle st = Styles.guessTextStyle(a);\n-            textStyle.set(st);\n-        }\n-    }\n-\n-    public final ObjectProperty<TextStyle> textStyleProperty() {\n-        return textStyle;\n-    }\n-\n-    private StyleAttributeMap getSourceStyleAttrs() {\n-        RichTextArea r = editor.get();\n-        EditorType t = getEditorType(r);\n-        switch (t) {\n-        case TEXT:\n-            SelectionSegment sel = r.getSelection();\n-            if ((sel == null) || (!sel.isCollapsed())) {\n-                return null;\n-            }\n-            return r.getActiveStyleAttributeMap();\n-        }\n-        return null;\n-    }\n-\n-    private boolean hasStyle(StyleAttributeMap attrs, StyleAttribute<Boolean> a) {\n-        return attrs == null ? false : Boolean.TRUE.equals(attrs.get(a));\n-    }\n-\n-    private final boolean isExecuting() {\n-        return executing.get();\n-    }\n-\n-    private void setExecuting(boolean on) {\n-        executing.set(on);\n-    }\n-\n-    public final ReadOnlyBooleanProperty modifiedProperty() {\n-        return modified.getReadOnlyProperty();\n-    }\n-\n-    public final boolean isModified() {\n-        return modified.get();\n-    }\n-\n-    private void setModified(boolean on) {\n-        modified.set(on);\n-    }\n-\n-    public final ReadOnlyObjectProperty<File> fileNameProperty() {\n-        return file.getReadOnlyProperty();\n-    }\n-\n-    public final File getFile() {\n-        return file.get();\n-    }\n-\n-    private void handleEdit() {\n-        setModified(true);\n-    }\n-\n-    public void newDocument() {\n-\/\/        if (askToSave()) {\n-\/\/            return;\n-\/\/        }\n-        Notebook n = new Notebook();\n-        n.add(new CellInfo(CellType.CODE));\n-        window.setNotebook(n);\n-    }\n-\n-    private void open() {\n-\/\/        if (askToSave()) {\n-\/\/            return;\n-\/\/        }\n-\/\/\n-\/\/        FileChooser ch = new FileChooser();\n-\/\/        ch.setTitle(\"Open File\");\n-\/\/        \/\/ TODO add extensions\n-\/\/        Window w = FX.getParentWindow(control);\n-\/\/        File f = ch.showOpenDialog(w);\n-\/\/        if (f != null) {\n-\/\/            try {\n-\/\/                readFile(f, RichTextFormatHandler.DATA_FORMAT);\n-\/\/            } catch (Exception e) {\n-\/\/                new ExceptionDialog(control, e).open();\n-\/\/            }\n-\/\/        }\n-    }\n-\n-    \/\/ FIX this is too simplistic, need save() and save as...\n-    private void save() {\n-\/\/        File f = getFile();\n-\/\/        if (f == null) {\n-\/\/            FileChooser ch = new FileChooser();\n-\/\/            ch.setTitle(\"Save File\");\n-\/\/            \/\/ TODO add extensions\n-\/\/            Window w = FX.getParentWindow(control);\n-\/\/            f = ch.showSaveDialog(w);\n-\/\/            if (f == null) {\n-\/\/                return;\n-\/\/            }\n-\/\/        }\n-\/\/        try {\n-\/\/            writeFile(f, RichTextFormatHandler.DATA_FORMAT);\n-\/\/        } catch (Exception e) {\n-\/\/            new ExceptionDialog(control, e).open();\n-\/\/        }\n-    }\n-\n-    \/\/ returns true if the user chose to Cancel\n-    private boolean askToSave() {\n-\/\/        if (isModified()) {\n-\/\/            \/\/ alert: has been modified. do you want to save?\n-\/\/            Alert alert = new Alert(AlertType.CONFIRMATION);\n-\/\/            alert.initOwner(FX.getParentWindow(control));\n-\/\/            alert.setTitle(\"Document is Modified\");\n-\/\/            alert.setHeaderText(\"Do you want to save this document?\");\n-\/\/            ButtonType delete = new ButtonType(\"Delete\");\n-\/\/            ButtonType cancel = new ButtonType(\"Cancel\", ButtonData.CANCEL_CLOSE);\n-\/\/            ButtonType save = new ButtonType(\"Save\", ButtonData.APPLY);\n-\/\/            alert.getButtonTypes().setAll(\n-\/\/                delete,\n-\/\/                cancel,\n-\/\/                save\n-\/\/            );\n-\/\/\n-\/\/            File f = getFile();\n-\/\/            \/\/ FIX format selector is not needed!\n-\/\/            SavePane sp = new SavePane();\n-\/\/            sp.setFile(f);\n-\/\/            alert.getDialogPane().setContent(sp);\n-\/\/            Optional<ButtonType> result = alert.showAndWait();\n-\/\/            if (result.isPresent()) {\n-\/\/                ButtonType t = result.get();\n-\/\/                if (t == delete) {\n-\/\/                    return false;\n-\/\/                } else if (t == cancel) {\n-\/\/                    return true;\n-\/\/                } else {\n-\/\/                    \/\/ save using info in the panel\n-\/\/                    f = sp.getFile();\n-\/\/                    DataFormat fmt = sp.getFileFormat();\n-\/\/                    \/\/ FIX\n-\/\/                    fmt = RichTextFormatHandler.DATA_FORMAT;\n-\/\/\n-\/\/                    try {\n-\/\/                        writeFile(f, fmt);\n-\/\/                    } catch (Exception e) {\n-\/\/                        new ExceptionDialog(control, e).open();\n-\/\/                        return true;\n-\/\/                    }\n-\/\/                }\n-\/\/            } else {\n-\/\/                return true;\n-\/\/            }\n-\/\/        }\n-        return false;\n-    }\n-\n-    private void readFile(File f, DataFormat fmt) throws Exception {\n-\/\/        try (FileInputStream in = new FileInputStream(f)) {\n-\/\/            control.read(fmt, in);\n-\/\/            file.set(f);\n-\/\/            modified.set(false);\n-\/\/        }\n-    }\n-\n-    private void writeFile(File f, DataFormat fmt) throws Exception {\n-\/\/        try (FileOutputStream out = new FileOutputStream(f)) {\n-\/\/            control.write(fmt, out);\n-\/\/            file.set(f);\n-\/\/            modified.set(false);\n-\/\/        }\n-    }\n-\n-    private void runAll() {\n-        \/\/ TODO\n-    }\n-\n-    public void runAndAdvance() {\n-        CellPane p = getActiveCellPane();\n-        if (p != null) {\n-            CellInfo cell = p.getCellInfo();\n-            if (cell.isCode()) {\n-                String src = cell.getSource();\n-                runScript(p, src, true);\n-            }\n-        }\n-    }\n-\n-    private void runScript(CellPane p, String src, boolean advance) {\n-        setExecuting(true);\n-        p.setExecuting();\n-\n-        Thread t = new Thread(\"executing script [\" + (sequenceNumber + 1) + \"]\") {\n-            @Override\n-            public void run() {\n-                Object r;\n-                try {\n-                    r = engine.executeScript(src);\n-                } catch (Throwable e) {\n-                    r = e;\n-                }\n-                handleCompletion(p, r, advance);\n-            }\n-        };\n-        t.setPriority(Thread.MIN_PRIORITY);\n-        t.start();\n-    }\n-\n-    \/** this method is called from a background thread *\/\n-    private void handleCompletion(CellPane p, Object result, boolean advance) {\n-        Platform.runLater(() -> {\n-            setExecuting(false);\n-            p.setResult(result, ++sequenceNumber);\n-            if (advance) {\n-                int ix = getActiveCellIndex();\n-                ix++;\n-                if (ix < cellPanes.size()) {\n-                    CellPane next = cellPanes.get(ix);\n-                    setActiveCellPane(next);\n-                    next.focusLater();\n-                }\n-            }\n-        });\n-    }\n-\n-    public final ObservableList<CellPane> getCellPanes() {\n-        return cellPanes;\n-    }\n-\n-    public final void setActiveCellPane(CellPane p) {\n-        activeCellPane.set(p);\n-    }\n-\n-    public final CellPane getActiveCellPane() {\n-        return activeCellPane.get();\n-    }\n-\n-    private CellType getActiveCellType() {\n-        CellPane p = getActiveCellPane();\n-        return (p == null ? null : p.getCellType());\n-    }\n-\n-    private RichTextArea getSourceEditor() {\n-        CellPane p = getActiveCellPane();\n-        return (p == null ? null : p.getSourceEditor());\n-    }\n-\n-    public void setNotebook(Notebook b) {\n-        int sz = b == null ? 0 : b.size();\n-        ArrayList<CellPane> ps = new ArrayList<>(sz);\n-        if (b != null) {\n-            for (int i = 0; i < sz; i++) {\n-                CellInfo cell = b.getCell(i);\n-                ps.add(new CellPane(cell));\n-            }\n-        }\n-        cellPanes.setAll(ps);\n-        setModified(false);\n-    }\n-\n-    public void copy() {\n-        whenCell((t) -> t.copy());\n-    }\n-\n-    public void cut() {\n-        whenCell((t) -> t.cut());\n-    }\n-\n-    public void paste() {\n-        whenCell((t) -> t.paste());\n-    }\n-\n-    public void pasteUnformatted() {\n-        whenCell((t) -> t.pastePlainText());\n-    }\n-\n-    private void whenCell(Consumer<RichTextArea> c) {\n-        whenCell(null, c);\n-    }\n-\n-    private void whenCell(CellType type, Consumer<RichTextArea> c) {\n-        CellPane p = getActiveCellPane();\n-        if (p != null) {\n-            if (type != null) {\n-                if (type != p.getCellType()) {\n-                    return;\n-                }\n-            }\n-            RichTextArea r = p.getSourceEditor();\n-            if (r != null) {\n-                c.accept(r);\n-            }\n-        }\n-    }\n-\n-    public int getActiveCellIndex() {\n-        CellPane p = getActiveCellPane();\n-        return cellPanes.indexOf(p);\n-    }\n-\n-    public void insertCellBelow() {\n-        int ix = getActiveCellIndex();\n-        if (ix < 0) {\n-            ix = 0;\n-        }\n-        CellInfo cell = new CellInfo(CellType.CODE);\n-        CellPane p = new CellPane(cell);\n-        add(ix + 1, p);\n-        p.focusLater();\n-    }\n-\n-    public void moveCellDown() {\n-        int ix = getActiveCellIndex();\n-        if (ix >= 0) {\n-            if (ix + 1 < cellPanes.size()) {\n-                CellPane p = cellPanes.remove(ix);\n-                add(ix + 1, p);\n-            }\n-        }\n-    }\n-\n-    public void moveCellUp() {\n-        int ix = getActiveCellIndex();\n-        if (ix > 0) {\n-            CellPane p = cellPanes.remove(ix);\n-            add(ix - 1, p);\n-        }\n-    }\n-\n-    private void add(int ix, CellPane p) {\n-        if (ix < cellPanes.size()) {\n-            cellPanes.add(ix, p);\n-        } else {\n-            cellPanes.add(p);\n-        }\n-    }\n-\n-    public void deleteCell() {\n-        if (cellPanes.size() > 1) {\n-            int ix = getActiveCellIndex();\n-            if (ix >= 0) {\n-                cellPanes.remove(ix);\n-            }\n-        }\n-    }\n-\n-    public void selectAll() {\n-        whenCell((c) -> {\n-            c.selectAll();\n-         });\n-    }\n-\n-    public void redo() {\n-        whenCell((c) -> {\n-           c.redo();\n-        });\n-    }\n-\n-    public void undo() {\n-        whenCell((c) -> {\n-            c.undo();\n-        });\n-    }\n-\n-    public void bold() {\n-        toggleStyle(StyleAttributeMap.BOLD);\n-    }\n-\n-    public void italic() {\n-        toggleStyle(StyleAttributeMap.ITALIC);\n-    }\n-\n-    public void strikeThrough() {\n-        toggleStyle(StyleAttributeMap.STRIKE_THROUGH);\n-    }\n-\n-    public void underline() {\n-        toggleStyle(StyleAttributeMap.UNDERLINE);\n-    }\n-\n-    private void toggleStyle(StyleAttribute<Boolean> attr) {\n-        whenCell(CellType.TEXT, (c) -> {\n-            TextPos start = c.getAnchorPosition();\n-            TextPos end = c.getCaretPosition();\n-            if (start == null) {\n-                return;\n-            } else if (start.equals(end)) {\n-                \/\/ apply to the whole paragraph\n-                int ix = start.index();\n-                start = new TextPos(ix, 0);\n-                end = c.getParagraphEnd(ix);\n-            }\n-\n-            StyleAttributeMap a = c.getActiveStyleAttributeMap();\n-            boolean on = !a.getBoolean(attr);\n-            a = StyleAttributeMap.builder().set(attr, on).build();\n-            c.applyStyle(start, end, a);\n-            updateSourceStyles();\n-        });\n-    }\n-\n-    public void setTextStyle(TextStyle st) {\n-        whenCell(CellType.TEXT, (c) -> {\n-            TextPos start = c.getAnchorPosition();\n-            TextPos end = c.getCaretPosition();\n-            if (start == null) {\n-                return;\n-            } else if (start.equals(end)) {\n-                TextStyle cur = Styles.guessTextStyle(c.getActiveStyleAttributeMap());\n-                if (cur == st) {\n-                    return;\n-                }\n-                \/\/ apply to the whole paragraph\n-                int ix = start.index();\n-                start = new TextPos(ix, 0);\n-                end = c.getParagraphEnd(ix);\n-            }\n-\n-            StyleAttributeMap a = Styles.getStyleAttributeMap(st);\n-            c.applyStyle(start, end, a);\n-            updateSourceStyles();\n-        });\n-    }\n-\n-    public void setActiveCellType(CellType t) {\n-        if (t != null) {\n-            CellPane p = getActiveCellPane();\n-            int ix = cellPanes.indexOf(p);\n-            if (ix >= 0) {\n-                CellInfo cell = p.getCellInfo();\n-                if (t != cell.getCellType()) {\n-                    cell.setCellType(t);\n-                    p = new CellPane(cell);\n-                    cellPanes.set(ix, p);\n-                    p.focusLater();\n-                }\n-            }\n-        }\n-    }\n-\n-    private void copyCell() {\n-        \/\/ TODO\n-    }\n-\n-    private void cutCell() {\n-        \/\/ TODO\n-    }\n-\n-    private void mergeCellAbove() {\n-        \/\/ TODO\n-    }\n-\n-    private void mergeCellBelow() {\n-        \/\/ TODO\n-    }\n-\n-    private void pasteCellBelow() {\n-        \/\/ TODO\n-    }\n-\n-    private void splitCell() {\n-        whenCell((c) -> {\n-            int ix = getActiveCellIndex();\n-            if(ix < 0) {\n-                return;\n-            }\n-            CellPane p = cellPanes.get(ix);\n-            List<CellPane> ps = p.split();\n-            if(ps == null) {\n-                return;\n-            }\n-            cellPanes.remove(ix);\n-            cellPanes.addAll(ix, ps);\n-        });\n-    }\n-\n-    public BooleanBinding disabledStyleEditingProperty() {\n-        return disabledStyleEditing;\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/Actions.java","additions":0,"deletions":819,"binary":false,"changes":819,"status":"deleted"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.notebook;\n-\n-import javafx.geometry.Insets;\n-import javafx.scene.layout.VBox;\n-import com.oracle.demo.richtext.notebook.data.Notebook;\n-\n-\/**\n- * Cell Container.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class CellContainer extends VBox {\n-    private Notebook notebook;\n-\n-    public CellContainer() {\n-        setSpacing(3);\n-        setPadding(new Insets(3));\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/CellContainer.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -1,305 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.notebook;\n-\n-import java.io.IOException;\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import java.util.List;\n-import java.util.function.Supplier;\n-import javafx.application.Platform;\n-import javafx.beans.property.SimpleBooleanProperty;\n-import javafx.css.PseudoClass;\n-import javafx.geometry.Insets;\n-import javafx.geometry.Pos;\n-import javafx.geometry.VPos;\n-import javafx.scene.Node;\n-import javafx.scene.control.Label;\n-import javafx.scene.control.ScrollPane;\n-import javafx.scene.image.Image;\n-import javafx.scene.image.ImageView;\n-import javafx.scene.layout.BorderPane;\n-import javafx.scene.layout.GridPane;\n-import javafx.scene.layout.Priority;\n-import javafx.scene.layout.Region;\n-import javafx.scene.text.Font;\n-import com.oracle.demo.richtext.codearea.JavaSyntaxDecorator;\n-import com.oracle.demo.richtext.notebook.data.CellInfo;\n-import com.oracle.demo.richtext.util.FX;\n-import jfx.incubator.scene.control.richtext.CodeArea;\n-import jfx.incubator.scene.control.richtext.RichTextArea;\n-import jfx.incubator.scene.control.richtext.TextPos;\n-import jfx.incubator.scene.control.richtext.model.CodeTextModel;\n-\n-\/**\n- * Pane holds the visuals for the cell: source editor, output pane, execution label, current cell highlight.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class CellPane extends GridPane {\n-    private static final PseudoClass EXECUTING = PseudoClass.getPseudoClass(\"executing\");\n-    private static final Font FONT = new Font(\"Iosevka Fixed SS16\", 12);\n-    private static final Insets OUTPUT_PADDING = new Insets(0, 0, 3, 0);\n-    private final CellInfo cell;\n-    private final Region codeBar;\n-    private final Label execLabel;\n-    private final BorderPane sourcePane;\n-    private final BorderPane outputPane;\n-    private final SimpleBooleanProperty active = new SimpleBooleanProperty();\n-\n-    \/\/ TODO the side bar and exec label turn orange when source has been edited and the old output is still present\n-    \/\/ also exec label shows an asterisk *[N]\n-    public CellPane(CellInfo c) {\n-        super(3, 0);\n-\n-        this.cell = c;\n-        FX.style(this, \"cell-pane\");\n-\n-        codeBar = new Region();\n-        codeBar.setMinWidth(6);\n-        codeBar.setMaxWidth(6);\n-        FX.style(codeBar, \"code-bar\");\n-\n-        execLabel = new Label(cell.isCode() ? \"[ ]:\" : null);\n-        execLabel.setAlignment(Pos.TOP_RIGHT);\n-        execLabel.setMinWidth(50);\n-        FX.style(execLabel, \"exec-label\");\n-        \/\/ TODO bind to font property, set preferred width\n-        setValignment(execLabel, VPos.TOP);\n-\n-        sourcePane = new BorderPane();\n-        setHgrow(sourcePane, Priority.ALWAYS);\n-        setVgrow(sourcePane, Priority.NEVER);\n-\n-        outputPane = new BorderPane();\n-        FX.style(outputPane, \"output-pane\");\n-        outputPane.setMaxHeight(200);\n-        setHgrow(outputPane, Priority.ALWAYS);\n-        setVgrow(outputPane, Priority.NEVER);\n-        setMargin(outputPane, OUTPUT_PADDING);\n-\n-        int r = 0;\n-        add(codeBar, 0, r, 1, 2);\n-        add(execLabel, 1, r);\n-        add(sourcePane, 2, r);\n-        r++;\n-        add(outputPane, 2, r);\n-\n-        updateContent();\n-\n-        active.addListener((s,p,v) -> {\n-            FX.style(this, \"active-cell\", v);\n-        });\n-    }\n-\n-    private void updateContent() {\n-        RichTextArea ed = createEditor();\n-        sourcePane.setCenter(ed);\n-        outputPane.setCenter(null);\n-        ed.applyCss();\n-    }\n-\n-    private RichTextArea createEditor() {\n-        CellType t = cell.getCellType();\n-        switch (t) {\n-        case CODE:\n-            CodeArea c = new CodeArea();\n-            FX.style(c, \"code-cell\");\n-            c.setFont(FONT);\n-            c.setModel(cell.getModel());\n-            c.setSyntaxDecorator(new JavaSyntaxDecorator());\n-            c.setUseContentHeight(true);\n-            c.setWrapText(true);\n-            return c;\n-        case TEXT:\n-            RichTextArea r = new RichTextArea();\n-            FX.style(r, \"text-cell\");\n-            r.setModel(cell.getModel());\n-            r.setUseContentHeight(true);\n-            r.setWrapText(true);\n-            return r;\n-        }\n-        return null;\n-    }\n-\n-    public final CellInfo getCellInfo() {\n-        return cell;\n-    }\n-\n-    public final CellType getCellType() {\n-        return cell.getCellType();\n-    }\n-\n-    public void setExecuting() {\n-        execLabel.setText(\"[*]:\");\n-        FX.style(execLabel, EXECUTING, true);\n-\n-        getSourceEditor().requestFocus();\n-        outputPane.setCenter(null);\n-    }\n-\n-    public void setResult(Object result, int execCount) {\n-        String s = (execCount <= 0) ? \" \" : String.valueOf(execCount);\n-        execLabel.setText(\"[\" + s + \"]:\");\n-        FX.style(execLabel, EXECUTING, false);\n-\n-        Node n = createResultNode(result);\n-        outputPane.setCenter(n);\n-    }\n-\n-    private Node createResultNode(Object result) {\n-        if(result != null) {\n-            if(result instanceof Supplier gen) {\n-                Object v = gen.get();\n-                if(v instanceof Node n) {\n-                    return n;\n-                }\n-            } else if(result instanceof Throwable err) {\n-                StringWriter sw = new StringWriter();\n-                PrintWriter wr = new PrintWriter(sw);\n-                err.printStackTrace(wr);\n-                String text = sw.toString();\n-                return textViewer(text, true);\n-            } else if(result instanceof Image im) {\n-                ImageView v = new ImageView(im);\n-                ScrollPane sp = new ScrollPane(v);\n-                FX.style(sp, \"image-result\");\n-                return sp;\n-            } else if(result instanceof CodeTextModel m) {\n-                CodeArea t = new CodeArea(m);\n-                t.setMinHeight(300);\n-                t.setSyntaxDecorator(new SimpleJsonDecorator());\n-                t.setFont(FONT);\n-                t.setWrapText(false);\n-                t.setEditable(false);\n-                t.setLineNumbersEnabled(true);\n-                FX.style(t, \"output-text\");\n-                return t;\n-            } else {\n-                String text = result.toString();\n-                return textViewer(text, false);\n-            }\n-        }\n-        return null;\n-    }\n-\n-    private static CodeTextModel from(String text) throws IOException {\n-        CodeTextModel m = new CodeTextModel();\n-        m.insertText(TextPos.ZERO, text);\n-        return m;\n-    }\n-\n-    private Node textViewer(String text, boolean error) {\n-        try {\n-            CodeTextModel m = from(text);\n-\n-            CodeArea t = new CodeArea();\n-            t.setFont(FONT);\n-            t.setModel(m);\n-            t.setUseContentHeight(true);\n-            t.setWrapText(false);\n-            t.setEditable(false);\n-            FX.style(t, error ? \"output-error\" : \"output-text\");\n-            return t;\n-        } catch (IOException wontHappen) {\n-            return null;\n-        }\n-    }\n-\n-    \/\/ FIX does not work!\n-    public void focusLater() {\n-        Platform.runLater(() -> {\n-            Node n = sourcePane.getCenter();\n-            if (n instanceof RichTextArea a) {\n-                a.requestFocus();\n-            }\n-        });\n-    }\n-\n-    public RichTextArea getSourceEditor() {\n-        Node n = sourcePane.getCenter();\n-        if (n instanceof RichTextArea r) {\n-            return r;\n-        }\n-        return null;\n-    }\n-\n-    \/**\n-     * Splits the cell at the current source editor caret position.\n-     * TODO split into three parts when non-empty selection exists.\n-     * @return the list of cells resulting from the split\n-     *\/\n-    public List<CellPane> split() {\n-        RichTextArea r = getSourceEditor();\n-        if (r != null) {\n-            TextPos start = r.getAnchorPosition();\n-            if (start != null) {\n-                TextPos end = r.getCaretPosition();\n-                if (start.equals(end)) {\n-                    return splitInTwo(start);\n-                } else {\n-                    \/\/ TODO split into 3 parts?\n-                }\n-            }\n-        }\n-        return null;\n-    }\n-\n-    private List<CellPane> splitInTwo(TextPos p) {\n-        RichTextArea ed = getSourceEditor();\n-        CellType t = getCellType();\n-\n-        try {\n-            CellPane cell1 = new CellPane(new CellInfo(t));\n-            insert(ed, TextPos.ZERO, p, cell1.getSourceEditor(), TextPos.ZERO);\n-\n-            CellPane cell2 = new CellPane(new CellInfo(t));\n-            insert(ed, p, ed.getDocumentEnd(), cell2.getSourceEditor(), TextPos.ZERO);\n-\n-            return List.of(cell1, cell2);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-    private void insert(RichTextArea src, TextPos start, TextPos end, RichTextArea tgt, TextPos pos) throws IOException {\n-        SegmentBuffer b = new SegmentBuffer();\n-        src.getModel().export(start, end, b.getStyledOutput());\n-        tgt.insertText(pos, b.getStyledInput());\n-    }\n-\n-    public void setActive(boolean on) {\n-        active.set(on);\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/CellPane.java","additions":0,"deletions":305,"binary":false,"changes":305,"status":"deleted"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.notebook;\n-\n-import javafx.util.StringConverter;\n-\n-\/**\n- * Cell type enum.\n- *\n- * @author Andy Goryachev\n- *\/\n-public enum CellType {\n-    CODE,\n-    TEXT;\n-\n-    public String getDisplayName() {\n-        switch(this) {\n-        case CODE:\n-            return \"Code\";\n-        case TEXT:\n-            return \"Text\";\n-        }\n-        throw new Error(\"?\" + this);\n-    }\n-\n-    public static StringConverter<CellType> converter() {\n-        return new StringConverter<CellType>() {\n-            @Override\n-            public String toString(CellType t) {\n-                return t == null ? null : t.getDisplayName();\n-            }\n-\n-            @Override\n-            public CellType fromString(String s) {\n-                for (CellType t : CellType.values()) {\n-                    if (s.equals(t.getDisplayName())) {\n-                        return t;\n-                    }\n-                }\n-                return CellType.TEXT;\n-            }\n-        };\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/CellType.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"},{"patch":"@@ -1,83 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.notebook;\n-\n-import java.io.IOException;\n-import jfx.incubator.scene.control.richtext.TextPos;\n-import jfx.incubator.scene.control.richtext.model.CodeTextModel;\n-import jfx.incubator.scene.control.richtext.model.ContentChange;\n-import jfx.incubator.scene.control.richtext.model.StyledOutput;\n-\n-\/**\n- * Cell Text Model.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class CodeCellTextModel extends CodeTextModel {\n-    private boolean modified;\n-\n-    public CodeCellTextModel() {\n-        addListener(new Listener() {\n-            @Override\n-            public void onContentChange(ContentChange ch) {\n-                if (ch.isEdit()) {\n-                    setModified(true);\n-                }\n-            }\n-        });\n-    }\n-\n-    public boolean isModified() {\n-        return modified;\n-    }\n-\n-    public void setModified(boolean on) {\n-        modified = on;\n-    }\n-\n-    public void setText(String text) {\n-        replace(null, TextPos.ZERO, TextPos.ZERO, text, false);\n-        setModified(false);\n-    }\n-\n-    public String getText() {\n-        try {\n-            StyledOutput out = StyledOutput.forPlainText();\n-            TextPos end = getDocumentEnd();\n-            export(TextPos.ZERO, end, out);\n-            return out.toString();\n-        } catch (IOException e) {\n-            return null;\n-        }\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/CodeCellTextModel.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"},{"patch":"@@ -1,143 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.notebook;\n-\n-import com.oracle.demo.richtext.notebook.data.CellInfo;\n-import com.oracle.demo.richtext.notebook.data.Notebook;\n-\n-\/**\n- * Canned notebooks.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class Demo {\n-    public static Notebook createNotebookExample() {\n-        Notebook b = new Notebook();\n-        {\n-            CellInfo c = new CellInfo(CellType.TEXT);\n-            c.setSource(\n-                \"\"\"\n-                Notebook Interface\n-\n-                A notebook interface or computational notebook is a virtual notebook environment used for literate programming, a method of writing computer programs.  Some notebooks are WYSIWYG environments including executable calculations embedded in formatted documents; others separate calculations and text into separate sections. Notebooks share some goals and features with spreadsheets and word processors but go beyond their limited data models.\n-\n-                Modular notebooks may connect to a variety of computational back ends, called \"kernels\". Notebook interfaces are widely used for statistics, data science, machine learning, and computer algebra.\n-\n-                https:\/\/en.wikipedia.org\/wiki\/Notebook_interface\"\"\");\n-            b.add(c);\n-        }\n-        {\n-            CellInfo c = new CellInfo(CellType.CODE);\n-            c.setSource(\n-                \"\"\"\n-                \/**\n-                 * This code cell generates a multi-line text result.\n-                 *\/\n-                int x = 5;\n-                String text = \"text\";\n-                print(x);\"\"\");\n-            b.add(c);\n-        }\n-        {\n-            CellInfo c = new CellInfo(CellType.CODE);\n-            c.setSource(\n-                \"\"\"\n-                \/\/\n-                \/\/ This code cell generates a general failure (exception)\n-                \/\/\n-                double sin(double x) {\n-                    return Math.sin(x);\n-                }\n-                print(sin(x) + 5.0);\"\"\");\n-            b.add(c);\n-        }\n-        {\n-            CellInfo c = new CellInfo(CellType.CODE);\n-            c.setSource(\n-                \"\"\"\n-                \/\/\n-                \/\/ This code cell generates an image output\n-                \/\/\n-                display(image);\"\"\");\n-            b.add(c);\n-        }\n-        {\n-            CellInfo c = new CellInfo(CellType.CODE);\n-            c.setSource(\n-                \"\"\"\n-                \/\/ And finally, this code cell generates a Node output.\n-                \/\/ This way any complex result can be rendered: a chart, a table or a spreadsheet, a complex input form...\n-                \/\/\n-                var node = new ListView(data);\n-                render(node);\"\"\");\n-            b.add(c);\n-        }\n-        {\n-            CellInfo c = new CellInfo(CellType.CODE);\n-            c.setSource(\n-                \"\"\"\n-                \/\/ This example simulates a JSON output backed by an external source, such as\n-                \/\/ database or remote API call.\n-                json = generateJsonOutput();\"\"\");\n-            b.add(c);\n-        }\n-        return b;\n-    }\n-\n-    public static Notebook createSingleTextCell() {\n-        Notebook b = new Notebook();\n-        {\n-            CellInfo c = new CellInfo(CellType.TEXT);\n-            c.setSource(\n-                \"\"\"\n-                This is a text cell.\n-                Right now it is a plain text cell, but we can make it a rich text cell.\n-                The only problem is that the user can change the cell type - and changing it from rich text to\n-                code or any other plain text based types will remove the styles.\n-                We could, of course, save the rich text until the user modifies the text, or may be even preserve\n-                the style information by simply rendering the plain text paragraphs, but then what would happen if\n-                the user switches back to rich text after editing?  Worth the try.\"\"\");\n-            b.add(c);\n-        }\n-        return b;\n-    }\n-\n-    public static Notebook createSingleCodeCell() {\n-        Notebook b = new Notebook();\n-        {\n-            CellInfo c = new CellInfo(CellType.CODE);\n-            b.add(c);\n-        }\n-        return b;\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/Demo.java","additions":0,"deletions":143,"binary":false,"changes":143,"status":"deleted"},{"patch":"@@ -1,176 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.notebook;\n-\n-import java.util.Random;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.atomic.AtomicReference;\n-import java.util.function.Supplier;\n-import javafx.application.Platform;\n-import javafx.collections.FXCollections;\n-import javafx.scene.Node;\n-import javafx.scene.canvas.Canvas;\n-import javafx.scene.canvas.GraphicsContext;\n-import javafx.scene.control.ListView;\n-import javafx.scene.image.Image;\n-import javafx.scene.paint.Color;\n-import jfx.incubator.scene.control.richtext.TextPos;\n-import jfx.incubator.scene.control.richtext.model.CodeTextModel;\n-\n-\/**\n- * A demo script engine for the notebook.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class DemoScriptEngine {\n-    public DemoScriptEngine() {\n-    }\n-\n-    \/**\n-     * Executes the script and returns the result.\n-     * Result object can be one of the following:\n-     * - a Throwable (either returned or thrown when executing the script)\n-     * - a String for a text result\n-     * - a Supplier that creates a Node to be inserted into the output pane\n-     * @param src the source script\n-     * @return the result of computation\n-     *\/\n-    public Object executeScript(String src) throws Throwable {\n-        \/\/ pretent we are working\n-        Thread.sleep(500);\n-\n-        if (src == null) {\n-            return null;\n-        } else if (src.contains(\"text\")) {\n-            return \"\"\"\n-                Multi-line execution result.\n-                Line 1.\n-                Line 2.\n-                Line 3.\n-                Completed.\n-                \"\"\";\n-        } else if (src.contains(\"json\")) {\n-            JsonContentWithAsyncUpdate content = new JsonContentWithAsyncUpdate(10_000_000);\n-            return new CodeTextModel(content)\n-            {\n-                {\n-                    content.setUpdater((ix) -> {\n-                        TextPos p = new TextPos(ix, 0);\n-                        int len = getPlainText(ix).length();\n-                        fireChangeEvent(p, p, len, 0, 0);\n-                    });\n-                }\n-            };\n-        } else if (src.contains(\"node\")) {\n-            return new Supplier<Node>() {\n-                @Override\n-                public Node get() {\n-                    return new ListView(FXCollections.observableArrayList(\n-                        \"one\",\n-                        \"two\",\n-                        \"three\",\n-                        \"four\",\n-                        \"five\",\n-                        \"six\",\n-                        \"seven\",\n-                        \"eight\",\n-                        \"nine\",\n-                        \"ten\",\n-                        \"eleven\",\n-                        \"twelve\",\n-                        \"thirteen\",\n-                        \"fourteen\",\n-                        \"fifteen\",\n-                        \"sixteen\",\n-                        \"seventeen\",\n-                        \"nineteen\",\n-                        \"twenty\"\n-                    ));\n-                }\n-            };\n-        } else if (src.contains(\"image\")) {\n-            return executeInFx(this::generateImage);\n-        } else {\n-            throw new Error(\"script failed\");\n-        }\n-    }\n-\n-    private Image generateImage() {\n-        int w = 700;\n-        int h = 500;\n-        Canvas c = new Canvas(w, h);\n-        GraphicsContext g = c.getGraphicsContext2D();\n-        g.setFill(Color.gray(1.0));\n-        g.fillRect(0, 0, w, h);\n-\n-        g.setLineWidth(0.25);\n-\n-        Random rnd = new Random();\n-        for(int i=0; i<128; i++) {\n-            double x = rnd.nextInt(w);\n-            double y = rnd.nextInt(h);\n-            double r = rnd.nextInt(64);\n-            int hue = rnd.nextInt(360);\n-\n-            g.setFill(Color.hsb(hue, 0.5, 1.0, 0.5));\n-            g.fillOval(x - r, y - r, r + r, r + r);\n-\n-            g.setStroke(Color.hsb(hue, 0.5, 0.5, 1.0));\n-            g.strokeOval(x - r, y - r, r + r, r + r);\n-        }\n-        return c.snapshot(null, null);\n-    }\n-\n-    private static Object executeInFx(Supplier gen) {\n-        AtomicReference<Object> result = new AtomicReference<>();\n-        CountDownLatch latch = new CountDownLatch(1);\n-\n-        Platform.runLater(() -> {\n-            try {\n-                Object r = gen.get();\n-                result.set(r);\n-            } catch (Throwable e) {\n-                result.set(e);\n-            } finally {\n-                latch.countDown();\n-            }\n-        });\n-\n-        try {\n-            latch.await();\n-            return result.get();\n-        } catch (InterruptedException e) {\n-            return e;\n-        }\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/DemoScriptEngine.java","additions":0,"deletions":176,"binary":false,"changes":176,"status":"deleted"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.notebook;\n-\n-import java.io.FileNotFoundException;\n-import java.io.PrintWriter;\n-import java.io.StringWriter;\n-import javafx.scene.Node;\n-import javafx.scene.control.Alert;\n-import javafx.scene.control.Label;\n-import javafx.scene.control.TextArea;\n-import javafx.scene.layout.GridPane;\n-import javafx.scene.layout.Priority;\n-\n-\/**\n- * Dialog which shows the exception message and its stack trace.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class ExceptionDialog extends Alert {\n-    public ExceptionDialog(Node owner, Throwable err) {\n-        super(AlertType.ERROR);\n-\n-        setTitle(\"An Error Occurred\");\n-        \/\/setHeaderText(\"\");\n-        \/\/setContentText(\"\");\n-\n-        StringWriter sw = new StringWriter();\n-        PrintWriter pw = new PrintWriter(sw);\n-        err.printStackTrace(pw);\n-        String text = sw.toString();\n-\n-        Label label = new Label(\"The exception stacktrace:\");\n-\n-        TextArea textArea = new TextArea(text);\n-        textArea.setEditable(false);\n-        textArea.setWrapText(false);\n-\n-        textArea.setMaxWidth(Double.MAX_VALUE);\n-        textArea.setMaxHeight(Double.MAX_VALUE);\n-        GridPane.setVgrow(textArea, Priority.ALWAYS);\n-        GridPane.setHgrow(textArea, Priority.ALWAYS);\n-\n-        GridPane expContent = new GridPane();\n-        expContent.setMaxWidth(Double.MAX_VALUE);\n-        expContent.add(label, 0, 0);\n-        expContent.add(textArea, 0, 1);\n-\n-        getDialogPane().setExpandableContent(expContent);\n-    }\n-\n-    public void open() {\n-        showAndWait();\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/ExceptionDialog.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -1,151 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.notebook;\n-\n-import java.text.SimpleDateFormat;\n-import java.util.HashMap;\n-import java.util.HexFormat;\n-import java.util.Random;\n-import java.util.function.Consumer;\n-import javafx.animation.KeyFrame;\n-import javafx.animation.Timeline;\n-import javafx.util.Duration;\n-import jfx.incubator.scene.control.richtext.TextPos;\n-import jfx.incubator.scene.control.richtext.model.BasicTextModel;\n-import jfx.incubator.scene.control.richtext.model.StyleAttributeMap;\n-\n-\/**\n- * Mock content which simulates non-instantaneous retrieval of the underlying data,\n- * as in database call or remote file system.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class JsonContentWithAsyncUpdate implements BasicTextModel.Content {\n-    private final int size;\n-    private final HashMap<Integer,String> data;\n-    private final Random random = new Random();\n-    private final SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy\/MM\/dd HH:mm:ss.SSSS\");\n-    private final HexFormat hex = HexFormat.of();\n-    private Consumer<Integer> updater;\n-\n-    public JsonContentWithAsyncUpdate(int size) {\n-        this.size = size;\n-        this.data = new HashMap<>(size);\n-    }\n-\n-    @Override\n-    public boolean isUserEditable() {\n-        return true;\n-    }\n-\n-    @Override\n-    public int size() {\n-        return size;\n-    }\n-\n-    @Override\n-    public String getText(int index) {\n-        String s = data.get(index);\n-        if (s == null) {\n-            queue(index);\n-            return \"\";\n-        }\n-        return s;\n-    }\n-\n-    private void queue(int index) {\n-        Duration simulatedDelay = Duration.millis(200 + random.nextInt(3_000));\n-        Timeline t = new Timeline();\n-        t.setCycleCount(1);\n-        t.getKeyFrames().add(\n-            new KeyFrame(simulatedDelay, (ev) -> {\n-                String s = generate(index);\n-                if(!data.containsKey(index)) {\n-                    data.put(index, s);\n-                    update(index);\n-                }\n-            })\n-        );\n-        t.play();\n-    }\n-\n-    private void update(int index) {\n-        if (updater != null) {\n-            updater.accept(index);\n-        }\n-    }\n-\n-    public void setUpdater(Consumer<Integer> u) {\n-        updater = u;\n-    }\n-\n-    @Override\n-    public int insertTextSegment(int index, int offset, String text, StyleAttributeMap attrs) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public void insertLineBreak(int index, int offset) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    @Override\n-    public void removeRange(TextPos start, TextPos end) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    private String bytes(int count) {\n-        byte[] b = new byte[count];\n-        random.nextBytes(b);\n-        return hex.formatHex(b);\n-    }\n-\n-    private String generate(int index) {\n-        Random r = new Random();\n-        long time = System.currentTimeMillis() - ((size - 1 - index) * 145_678L);\n-        String date = dateFormat.format(time);\n-        String id = bytes(8);\n-        String message = bytes(1 + random.nextInt(10));\n-        String payload = bytes(10 + random.nextInt(128));\n-        int size = payload.length() \/ 2;\n-\n-        return\n-            \"{date=\\\"\" + date + \"\\\"\" +\n-            \", timestamp=\" + time +\n-            \", id=\\\"\" + id + \"\\\"\" +\n-            \", message-id=\\\"\" + message + \"\\\"\" +\n-            \", payload=\\\"\" + payload + \"\\\"\" +\n-            \", size=\" + size +\n-            \"}\";\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/JsonContentWithAsyncUpdate.java","additions":0,"deletions":151,"binary":false,"changes":151,"status":"deleted"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.notebook;\n-\n-import javafx.application.Application;\n-import javafx.stage.Stage;\n-import com.oracle.demo.richtext.settings.FxSettings;\n-\n-\/**\n- * Interactive Notebook Skeleton Implementation.\n- * Demonstrates the use of RichTextArea\/CodeArea in a notebook-like setting.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class NotebookMockupApp extends Application {\n-    public static void main(String[] args) {\n-        Application.launch(NotebookMockupApp.class, args);\n-    }\n-\n-    @Override\n-    public void init() {\n-        FxSettings.useDirectory(\".NotebookMockupApp\");\n-    }\n-\n-    @Override\n-    public void start(Stage stage) throws Exception {\n-        new NotebookWindow().show();\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/NotebookMockupApp.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -1,168 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.notebook;\n-\n-import javafx.beans.binding.Bindings;\n-import javafx.scene.control.ComboBox;\n-import javafx.scene.control.ContextMenu;\n-import javafx.scene.control.ScrollPane;\n-import javafx.scene.control.ToolBar;\n-import javafx.scene.input.KeyCode;\n-import javafx.scene.input.KeyEvent;\n-import javafx.scene.layout.BorderPane;\n-import com.oracle.demo.richtext.common.TextStyle;\n-import com.oracle.demo.richtext.util.FX;\n-\n-\/**\n- * Notebook Main Panel.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class NotebookPane extends BorderPane {\n-    public final CellContainer cellContainer;\n-    private final Actions actions;\n-    private final ComboBox<CellType> cellType;\n-    private final ComboBox<TextStyle> textStyle;\n-\n-    public NotebookPane(Actions a) {\n-        FX.name(this, \"RichEditorDemoPane\");\n-\n-        this.actions = a;\n-\n-        cellContainer = new CellContainer();\n-        Bindings.bindContent(cellContainer.getChildren(), actions.getCellPanes());\n-        \/\/cellPane.setContextMenu(createContextMenu());\n-        \/\/ this is a job for the InputMap!\n-        cellContainer.addEventFilter(KeyEvent.KEY_PRESSED, this::handleContextExecute);\n-\n-        cellType = new ComboBox<>();\n-        cellType.getItems().setAll(CellType.values());\n-        cellType.setConverter(CellType.converter());\n-        cellType.setOnAction((ev) -> {\n-            updateActiveCellType();\n-        });\n-\n-        textStyle = new ComboBox<>();\n-        textStyle.getItems().setAll(TextStyle.values());\n-        textStyle.setConverter(TextStyle.converter());\n-        textStyle.setOnAction((ev) -> {\n-            updateTextStyle();\n-        });\n-        textStyle.disableProperty().bind(actions.disabledStyleEditingProperty());\n-\n-        ScrollPane scroll = new ScrollPane(cellContainer);\n-        scroll.setFitToWidth(true);\n-\n-        setTop(createToolBar());\n-        setCenter(scroll);\n-\n-        actions.textStyleProperty().addListener((s,p,c) -> {\n-            setTextStyle(c);\n-        });\n-    }\n-\n-    \/\/ TODO move to window?\n-    private ToolBar createToolBar() {\n-        ToolBar t = new ToolBar();\n-        FX.button(t, \"+\", \"Insert a cell below\", actions.insertCellBelow);\n-        FX.button(t, \"Cu\", \"Cut this cell\");\n-        FX.button(t, \"Co\", \"Copy this cell\");\n-        FX.button(t, \"Pa\", \"Paste this cell from the clipboard\");\n-        FX.add(t, cellType);\n-        FX.space(t);\n-        FX.button(t, \"▶\", \"Run this cell and advance\", actions.runAndAdvance);\n-        FX.button(t, \"▶▶\", \"Run all cells\", actions.runAll);\n-        FX.space(t);\n-        FX.toggleButton(t, \"𝐁\", \"Bold text\", actions.bold);\n-        FX.toggleButton(t, \"𝐼\", \"Bold text\", actions.italic);\n-        FX.toggleButton(t, \"S\\u0336\", \"Strike through text\", actions.strikeThrough);\n-        FX.toggleButton(t, \"U\\u0332\", \"Underline text\", actions.underline);\n-        FX.add(t, textStyle);\n-        return t;\n-    }\n-\n-    \/\/ TODO use this?\n-    private ContextMenu createContextMenu() {\n-        ContextMenu m = new ContextMenu();\n-        FX.item(m, \"Cut Cell\");\n-        FX.item(m, \"Copy Cell\");\n-        FX.item(m, \"Paste Cell Below\");\n-        FX.separator(m);\n-        FX.item(m, \"Delete Cell\");\n-        FX.separator(m);\n-        FX.item(m, \"Split Cell\");\n-        FX.item(m, \"Merge Selected Cell\");\n-        FX.item(m, \"Merge Cell Above\");\n-        FX.item(m, \"Merge Cell Below\");\n-        FX.separator(m);\n-        FX.item(m, \"Undo\", actions.undo);\n-        FX.item(m, \"Redo\", actions.redo);\n-        FX.separator(m);\n-        FX.item(m, \"Cut\", actions.cut);\n-        FX.item(m, \"Copy\", actions.copy);\n-        FX.item(m, \"Paste\", actions.paste);\n-        FX.item(m, \"Paste and Retain Style\", actions.pasteUnformatted);\n-        FX.separator(m);\n-        FX.item(m, \"Select All\", actions.selectAll);\n-        return m;\n-    }\n-\n-    public void setActiveCellPane(CellPane p) {\n-        CellType t = (p == null ? null : p.getCellType());\n-        cellType.getSelectionModel().select(t);\n-    }\n-\n-    private void updateActiveCellType() {\n-        CellType t = cellType.getSelectionModel().getSelectedItem();\n-        actions.setActiveCellType(t);\n-    }\n-\n-    private void handleContextExecute(KeyEvent ev) {\n-        if (ev.getCode() == KeyCode.ENTER) {\n-            if (ev.isShortcutDown()) {\n-                actions.runAndAdvance();\n-            }\n-        }\n-    }\n-\n-    private void updateTextStyle() {\n-        TextStyle st = textStyle.getSelectionModel().getSelectedItem();\n-        if (st != null) {\n-            actions.setTextStyle(st);\n-        }\n-    }\n-\n-    public void setTextStyle(TextStyle v) {\n-        textStyle.setValue(v);\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/NotebookPane.java","additions":0,"deletions":168,"binary":false,"changes":168,"status":"deleted"},{"patch":"@@ -1,193 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.notebook;\n-\n-import java.io.File;\n-import javafx.application.Platform;\n-import javafx.geometry.Insets;\n-import javafx.scene.Node;\n-import javafx.scene.Scene;\n-import javafx.scene.control.Label;\n-import javafx.scene.control.Menu;\n-import javafx.scene.control.MenuBar;\n-import javafx.scene.layout.BorderPane;\n-import javafx.stage.Stage;\n-import com.oracle.demo.richtext.notebook.data.Notebook;\n-import com.oracle.demo.richtext.rta.RichTextAreaWindow;\n-import com.oracle.demo.richtext.util.FX;\n-\n-\/**\n- * Notebook Demo main window.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class NotebookWindow extends Stage {\n-    private static final String TITLE = \"Interactive Notebook (Mockup)\";\n-    private final Actions actions;\n-    private final NotebookPane pane;\n-    private final Label status;\n-\n-    public NotebookWindow() {\n-        FX.name(this, \"NotebookWindow\");\n-\n-        actions = new Actions(this);\n-\n-        pane = new NotebookPane(actions);\n-\n-        status = new Label();\n-        status.setPadding(new Insets(2, 10, 2, 10));\n-\n-        BorderPane bp = new BorderPane();\n-        bp.setTop(createMenu());\n-        bp.setCenter(pane);\n-        bp.setBottom(status);\n-\n-        Scene scene = new Scene(bp);\n-        scene.getStylesheets().addAll(\n-            getClass().getResource(\"notebook.css\").toExternalForm()\n-        );\n-        scene.focusOwnerProperty().addListener((s,p,c) -> {\n-            handleFocusUpdate(c);\n-        });\n-\n-        \/\/ TODO input map for the window: add shortcut-S for saving\n-\n-        setScene(scene);\n-        setWidth(1200);\n-        setHeight(600);\n-\n-        actions.modifiedProperty().addListener((x) -> {\n-            updateTitle();\n-        });\n-        actions.fileNameProperty().addListener((x) -> {\n-            updateTitle();\n-        });\n-        updateTitle();\n-\n-        setNotebook(Demo.createSingleCodeCell());\n-        \/\/setNotebook(Demo.createNotebookExample());\n-    }\n-\n-    private MenuBar createMenu() {\n-        Menu m2;\n-        MenuBar b = new MenuBar();\n-        \/\/ file\n-        FX.menu(b, \"File\");\n-        FX.item(b, \"New\", actions.newDocument);\n-        FX.item(b, \"Open...\", actions.open);\n-        m2 = FX.submenu(b, \"Open Recent\");\n-        FX.item(m2, \"Notebook Example\", () -> setNotebook(Demo.createNotebookExample()));\n-        FX.item(m2, \"Single Text Cell\", () -> setNotebook(Demo.createSingleTextCell()));\n-        FX.item(m2, \"Empty Code Cell\", () -> setNotebook(Demo.createSingleCodeCell()));\n-        FX.separator(b);\n-        FX.item(b, \"Save...\", actions.save);\n-        \/\/ TODO print?\n-        FX.item(b, \"Quit\", () -> Platform.exit());\n-\n-        \/\/ edit\n-        FX.menu(b, \"Edit\");\n-        FX.item(b, \"Undo\", actions.undo);\n-        FX.item(b, \"Redo\", actions.redo);\n-        FX.separator(b);\n-        FX.item(b, \"Cut\", actions.cut);\n-        FX.item(b, \"Copy\", actions.copy);\n-        FX.item(b, \"Paste\", actions.paste);\n-        FX.item(b, \"Paste and Retain Style\", actions.pasteUnformatted);\n-\n-        \/\/ format\n-        FX.menu(b, \"Format\");\n-        FX.checkItem(b, \"Bold\", actions.bold);\n-        FX.checkItem(b, \"Italic\", actions.italic);\n-        FX.checkItem(b, \"Strike Through\", actions.strikeThrough);\n-        FX.checkItem(b, \"Underline\", actions.underline);\n-\n-        \/\/ cell\n-        FX.menu(b, \"Cell\");\n-        FX.item(b, \"Cut Cell\", actions.cutCell);\n-        FX.item(b, \"Copy Cell\", actions.copyCell);\n-        FX.item(b, \"Paste Cell Below\", actions.pasteCellBelow);\n-        FX.separator(b);\n-        FX.item(b, \"Insert Cell Below\", actions.insertCellBelow);\n-        FX.separator(b);\n-        FX.item(b, \"Move Up\", actions.moveCellUp);\n-        FX.item(b, \"Move Down\", actions.moveCellDown);\n-        FX.separator(b);\n-        FX.item(b, \"Split Cell\", actions.splitCell);\n-        FX.item(b, \"Merge Cell Above\", actions.mergeCellAbove);\n-        FX.item(b, \"Merge Cell Below\", actions.mergeCellBelow);\n-        FX.separator(b);\n-        FX.item(b, \"Delete\", actions.deleteCell);\n-\n-        \/\/ run\n-        FX.menu(b, \"Run\");\n-        FX.item(b, \"Run Current Cell And Advance\", actions.runAndAdvance);\n-        FX.item(b, \"Run All Cells\", actions.runAll);\n-\n-        \/\/ view\n-        FX.menu(b, \"View\");\n-        FX.item(b, \"Show Line Numbers\");\n-\n-        \/\/ help\n-        FX.menu(b, \"Help\");\n-        FX.item(b, \"About\");\n-        return b;\n-    }\n-\n-    private void updateTitle() {\n-        File f = actions.getFile();\n-        boolean modified = actions.isModified();\n-\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(TITLE);\n-        if (f != null) {\n-            sb.append(\" - \");\n-            sb.append(f.getName());\n-        }\n-        if (modified) {\n-            sb.append(\" *\");\n-        }\n-        setTitle(sb.toString());\n-    }\n-\n-    private void handleFocusUpdate(Node n) {\n-        CellPane p = FX.findParentOf(CellPane.class, n);\n-        if (p != null) {\n-            actions.setActiveCellPane(p);\n-            pane.setActiveCellPane(p);\n-        }\n-    }\n-\n-    public void setNotebook(Notebook b) {\n-        actions.setNotebook(b);\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/NotebookWindow.java","additions":0,"deletions":193,"binary":false,"changes":193,"status":"deleted"},{"patch":"@@ -1,157 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.notebook;\n-\n-import java.io.File;\n-import java.util.ArrayList;\n-import javafx.application.Platform;\n-import javafx.geometry.HPos;\n-import javafx.geometry.Insets;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.ComboBox;\n-import javafx.scene.control.Label;\n-import javafx.scene.control.TextField;\n-import javafx.scene.input.DataFormat;\n-import javafx.scene.layout.GridPane;\n-import javafx.scene.layout.Priority;\n-import javafx.stage.DirectoryChooser;\n-import javafx.stage.Window;\n-import com.oracle.demo.richtext.util.FX;\n-\n-\/**\n- * Part of the Save As dialog.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class SavePane extends GridPane {\n-    private final TextField nameField;\n-    private final ComboBox<File> folderField;\n-    private final ComboBox<DataFormat> formatField;\n-\n-    public SavePane() {\n-        nameField = new TextField();\n-        setHgrow(nameField, Priority.ALWAYS);\n-        setFillWidth(nameField, Boolean.TRUE);\n-\n-        folderField = new ComboBox<>();\n-        setHgrow(folderField, Priority.ALWAYS);\n-        setFillWidth(folderField, Boolean.TRUE);\n-\n-        formatField = new ComboBox<>();\n-\n-        Button browse = new Button(\"Browse\");\n-        setFillWidth(browse, Boolean.TRUE);\n-        browse.setOnAction((ev) -> {\n-            browse();\n-        });\n-\n-        int r = 0;\n-        add(label(\"Save As:\"), 0, r);\n-        add(nameField, 1, r, 3, 1);\n-        r++;\n-        add(label(\"Where:\"), 0, r);\n-        add(folderField, 1, r);\n-        add(browse, 2, r);\n-        r++;\n-        add(label(\"File Format:\"), 0, r);\n-        add(formatField, 1, r, 2, 1);\n-\n-        setHgap(10);\n-        setVgap(5);\n-        setPadding(new Insets(10));\n-\n-        Platform.runLater(() -> {\n-            nameField.selectAll();\n-            nameField.requestFocus();\n-        });\n-    }\n-\n-    private static Label label(String text) {\n-        Label t = new Label(text);\n-        setHalignment(t, HPos.RIGHT);\n-        return t;\n-    }\n-\n-    public void setFile(File f) {\n-        if (f == null) {\n-            nameField.setText(\"Untitled.rich\");\n-            setDir(null);\n-        } else {\n-            nameField.setText(f.getName());\n-            setDir(f.getParentFile());\n-        }\n-    }\n-\n-    private void setDir(File dir) {\n-        if (dir == null) {\n-            dir = new File(System.getProperty(\"user.home\"));\n-        }\n-        ArrayList<File> fs = new ArrayList<>();\n-        File f = dir;\n-        do {\n-            fs.add(f);\n-            f = f.getParentFile();\n-        } while (f != null);\n-        folderField.getItems().setAll(fs);\n-        folderField.getSelectionModel().select(dir);\n-    }\n-\n-    public void setFormat(DataFormat f) {\n-        \/\/ TODO\n-    }\n-\n-    public File getFile() {\n-        File dir = getDir();\n-        \/\/ TODO extension based on data format\n-        return new File(dir, nameField.getText());\n-    }\n-\n-    public DataFormat getFileFormat() {\n-        return null; \/\/ FIX\n-    }\n-\n-    private File getDir() {\n-        return folderField.getSelectionModel().getSelectedItem();\n-    }\n-\n-    private void browse() {\n-        DirectoryChooser ch = new DirectoryChooser();\n-        ch.setTitle(\"Choose Folder\");\n-        ch.setInitialDirectory(getDir());\n-        Window w = FX.getParentWindow(this);\n-        File f = ch.showDialog(w);\n-        if (f != null) {\n-            setDir(f);\n-        }\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/SavePane.java","additions":0,"deletions":157,"binary":false,"changes":157,"status":"deleted"},{"patch":"@@ -1,133 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.notebook;\n-\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import jfx.incubator.scene.control.richtext.model.StyledInput;\n-import jfx.incubator.scene.control.richtext.model.StyledOutput;\n-import jfx.incubator.scene.control.richtext.model.StyledSegment;\n-\n-\/**\n- * In-memory buffer which stored {@code StyledSegment}s with associated output and input streams,\n- * for the use in export\/import or transfer operations.\n- * This class and its streams are not thread safe.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class SegmentBuffer {\n-    private ArrayList<StyledSegment> segments;\n-    private Output output;\n-\n-    \/**\n-     * Creates the buffer with the specified initial capacity.\n-     * @param initialCapacity the initial capacity\n-     *\/\n-    public SegmentBuffer(int initialCapacity) {\n-        segments = new ArrayList<>(initialCapacity);\n-    }\n-\n-    \/**\n-     * Creates the buffer.\n-     *\/\n-    public SegmentBuffer() {\n-        this(256);\n-    }\n-\n-    \/**\n-     * Returns the singleton {@code StyledOutput} instance associated with this buffer.\n-     * @return the StyledOutput instance\n-     *\/\n-    public StyledOutput getStyledOutput() {\n-        if(output == null) {\n-            output = new Output();\n-        }\n-        return output;\n-    }\n-\n-    \/**\n-     * Returns an array of {@code StyledSegment}s accumulated so far.\n-     * @return the array of {@code StyledSegment}s\n-     *\/\n-    public StyledSegment[] getSegments() {\n-        return segments.toArray(new StyledSegment[segments.size()]);\n-    }\n-\n-    \/**\n-     * Returns a new instance of {@code StyledInput} which contains the segments accumulated so far.\n-     * @return the instance of {@code StyledInput}\n-     *\/\n-    public StyledInput getStyledInput() {\n-        return new Input(getSegments());\n-    }\n-\n-    private class Output implements StyledOutput {\n-        Output() {\n-        }\n-\n-        @Override\n-        public void consume(StyledSegment s) throws IOException {\n-            segments.add(s);\n-        }\n-\n-        @Override\n-        public void flush() throws IOException {\n-        }\n-\n-        @Override\n-        public void close() throws IOException {\n-            \/\/ possibly create a boolean flag to force an IOException in append when closed\n-        }\n-    }\n-\n-    private static class Input implements StyledInput {\n-        private final StyledSegment[] segments;\n-        private int index;\n-\n-        Input(StyledSegment[] segments) {\n-            this.segments = segments;\n-        }\n-\n-        @Override\n-        public StyledSegment nextSegment() {\n-            if (index < segments.length) {\n-                return segments[index++];\n-            }\n-            return null;\n-        }\n-\n-        @Override\n-        public void close() throws IOException {\n-        }\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/SegmentBuffer.java","additions":0,"deletions":133,"binary":false,"changes":133,"status":"deleted"},{"patch":"@@ -1,239 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.notebook;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javafx.scene.paint.Color;\n-import com.oracle.demo.richtext.codearea.JavaSyntaxAnalyzer.Line;\n-import com.oracle.demo.richtext.codearea.JavaSyntaxAnalyzer.Type;\n-import jfx.incubator.scene.control.richtext.SyntaxDecorator;\n-import jfx.incubator.scene.control.richtext.TextPos;\n-import jfx.incubator.scene.control.richtext.model.CodeTextModel;\n-import jfx.incubator.scene.control.richtext.model.RichParagraph;\n-import jfx.incubator.scene.control.richtext.model.StyleAttributeMap;\n-\n-\/**\n- * Super simple (and therefore not always correct) syntax decorator for JSON\n- * which works one line at a time.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class SimpleJsonDecorator implements SyntaxDecorator {\n-    private static final StyleAttributeMap NORMAL = mkStyle(Color.BLACK);\n-    private static final StyleAttributeMap NUMBER = mkStyle(Color.MAGENTA);\n-    private static final StyleAttributeMap STRING = mkStyle(Color.BLUE);\n-\n-    public SimpleJsonDecorator() {\n-    }\n-\n-    @Override\n-    public void handleChange(CodeTextModel m, TextPos start, TextPos end, int top, int added, int bottom) {\n-    }\n-\n-    @Override\n-    public RichParagraph createRichParagraph(CodeTextModel model, int index) {\n-        String text = model.getPlainText(index);\n-        List<Seg> segments = new Analyzer(text).parse();\n-        RichParagraph.Builder b = RichParagraph.builder();\n-        for (Seg seg : segments) {\n-            b.addSegment(seg.text, seg.style);\n-        }\n-        return b.build();\n-    }\n-\n-    private static StyleAttributeMap mkStyle(Color c) {\n-        return StyleAttributeMap.builder().setTextColor(c).build();\n-    }\n-\n-    private static record Seg(StyleAttributeMap style, String text) {\n-    }\n-\n-    private enum State {\n-        NUMBER,\n-        STRING,\n-        TEXT,\n-        VALUE,\n-    }\n-\n-    private static class Analyzer {\n-        private final String text;\n-        private final ArrayList<Seg> segments = new ArrayList<>();\n-        private static final int EOF = -1;\n-        private int start;\n-        private int pos;\n-        private State state = State.TEXT;\n-\n-        public Analyzer(String text) {\n-            this.text = text;\n-        }\n-\n-        private int peek(int delta) {\n-            int ix = pos + delta;\n-            if ((ix >= 0) && (ix < text.length())) {\n-                return text.charAt(ix);\n-            }\n-            return EOF;\n-        }\n-\n-        private void addSegment() {\n-            StyleAttributeMap type = toStyleAttrs(state);\n-            addSegment(type);\n-        }\n-\n-        private StyleAttributeMap toStyleAttrs(State s) {\n-            switch (s) {\n-            case STRING:\n-                return STRING;\n-            case NUMBER:\n-                return NUMBER;\n-            case VALUE:\n-            default:\n-                return NORMAL;\n-            }\n-        }\n-\n-        private void addSegment(StyleAttributeMap style) {\n-            if (pos > start) {\n-                String s = text.substring(start, pos);\n-                segments.add(new Seg(style, s));\n-                start = pos;\n-            }\n-        }\n-\n-        private Error err(String text) {\n-            return new Error(text + \" state=\" + state + \" pos=\" + pos);\n-        }\n-\n-        private int parseNumber() {\n-            int ix = indexOfNonNumber();\n-            if (ix < 0) {\n-                return 0;\n-            }\n-            String s = text.substring(pos, pos + ix);\n-            try {\n-                Double.parseDouble(s);\n-                return ix;\n-            } catch (NumberFormatException e) {\n-            }\n-            return 0;\n-        }\n-\n-        private int indexOfNonNumber() {\n-            int i = 0;\n-            for (;;) {\n-                int c = peek(i);\n-                switch (c) {\n-                case EOF:\n-                    return i;\n-                \/\/ we'll parse integers only for now case '.':\n-                case '-':\n-                case '0':\n-                case '1':\n-                case '2':\n-                case '3':\n-                case '4':\n-                case '5':\n-                case '6':\n-                case '7':\n-                case '8':\n-                case '9':\n-                    i++;\n-                    continue;\n-                default:\n-                    return i;\n-                }\n-            }\n-        }\n-\n-        public List<Seg> parse() {\n-            start = 0;\n-            for (;;) {\n-                int c = peek(0);\n-                switch (c) {\n-                case EOF:\n-                    addSegment();\n-                    return segments;\n-                case '\"':\n-                    switch (state) {\n-                    case TEXT:\n-                    case VALUE:\n-                        addSegment();\n-                        state = State.STRING;\n-                        pos++;\n-                        break;\n-                    case STRING:\n-                        pos++;\n-                        addSegment();\n-                        state = State.TEXT;\n-                        break;\n-                    default:\n-                        throw err(\"state must be either TEXT, STRING, or VALUE\");\n-                    }\n-                    break;\n-                case '=':\n-                    state = State.VALUE;\n-                    break;\n-                \/\/case '.':\n-                case '-':\n-                case '0':\n-                case '1':\n-                case '2':\n-                case '3':\n-                case '4':\n-                case '5':\n-                case '6':\n-                case '7':\n-                case '8':\n-                case '9':\n-                    switch (state) {\n-                    case VALUE:\n-                        int len = parseNumber();\n-                        if (len > 0) {\n-                            addSegment();\n-                            state = State.NUMBER;\n-                            pos += len;\n-                            addSegment();\n-                        }\n-                        break;\n-                    }\n-                    break;\n-                default:\n-                    break;\n-                }\n-\n-                pos++;\n-            }\n-        }\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/SimpleJsonDecorator.java","additions":0,"deletions":239,"binary":false,"changes":239,"status":"deleted"},{"patch":"@@ -1,81 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.notebook;\n-\n-import java.io.IOException;\n-import jfx.incubator.scene.control.richtext.TextPos;\n-import jfx.incubator.scene.control.richtext.model.ContentChange;\n-import jfx.incubator.scene.control.richtext.model.RichTextModel;\n-import jfx.incubator.scene.control.richtext.model.StyledOutput;\n-\n-\/**\n- * RichTextModel for the text cell.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class TextCellTextModel extends RichTextModel {\n-    private boolean modified;\n-\n-    public TextCellTextModel() {\n-        addListener(new Listener() {\n-            @Override\n-            public void onContentChange(ContentChange ch) {\n-                setModified(true);\n-            }\n-        });\n-    }\n-\n-    public boolean isModified() {\n-        return modified;\n-    }\n-\n-    public void setModified(boolean on) {\n-        modified = on;\n-    }\n-\n-    public void setText(String text) {\n-        replace(null, TextPos.ZERO, TextPos.ZERO, text, false);\n-        setModified(false);\n-    }\n-\n-    public String getPlainText() {\n-        try {\n-            StyledOutput out = StyledOutput.forPlainText();\n-            TextPos end = getDocumentEnd();\n-            export(TextPos.ZERO, end, out);\n-            return out.toString();\n-        } catch (IOException e) {\n-            return null;\n-        }\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/TextCellTextModel.java","additions":0,"deletions":81,"binary":false,"changes":81,"status":"deleted"},{"patch":"@@ -1,137 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.notebook.data;\n-\n-import com.oracle.demo.richtext.notebook.CellType;\n-import com.oracle.demo.richtext.notebook.CodeCellTextModel;\n-import com.oracle.demo.richtext.notebook.TextCellTextModel;\n-import jfx.incubator.scene.control.richtext.model.StyledTextModel;\n-\n-\/**\n- * This data structure represents a cell in the notebook.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class CellInfo {\n-    private CellType type;\n-    private String source;\n-    private CodeCellTextModel codeModel;\n-    private TextCellTextModel textModel;\n-\n-    public CellInfo(CellType t) {\n-        this.type = t;\n-    }\n-\n-    public final CellType getCellType() {\n-        return type;\n-    }\n-\n-    public final void setCellType(CellType t) {\n-        type = t;\n-    }\n-\n-    public boolean isCode() {\n-        return getCellType() == CellType.CODE;\n-    }\n-\n-    public boolean isText() {\n-        return getCellType() == CellType.TEXT;\n-    }\n-\n-    public final StyledTextModel getModel() {\n-        switch (type) {\n-        case CODE:\n-            if (textModel != null) {\n-                if (textModel.isModified()) {\n-                    source = textModel.getPlainText();\n-                    codeModel = null;\n-                }\n-            }\n-            if (codeModel == null) {\n-                codeModel = new CodeCellTextModel();\n-                codeModel.setText(source);\n-            }\n-            return codeModel;\n-        case TEXT:\n-        default:\n-            if (codeModel != null) {\n-                if (codeModel.isModified()) {\n-                    source = codeModel.getText();\n-                    textModel = null;\n-                }\n-            }\n-            if (textModel == null) {\n-                textModel = new TextCellTextModel();\n-                textModel.setText(source);\n-            }\n-            return textModel;\n-        }\n-    }\n-\n-    private void handleTypeChange(CellType old, CellType type) {\n-        switch (type) {\n-        case CODE:\n-            \/\/ TODO\n-        case TEXT:\n-        default:\n-            break;\n-        }\n-    }\n-\n-    public String getSource() {\n-        switch (type) {\n-        case CODE:\n-            if (codeModel != null) {\n-                if (codeModel.isModified()) {\n-                    source = codeModel.getText();\n-                    codeModel.setModified(false);\n-                }\n-            }\n-            break;\n-        case TEXT:\n-        default:\n-            if (textModel != null) {\n-                if (textModel.isModified()) {\n-                    source = textModel.getPlainText();\n-                    textModel.setModified(false);\n-                }\n-            }\n-            break;\n-        }\n-        return source;\n-    }\n-\n-    public void setSource(String text) {\n-        this.source = text;\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/data\/CellInfo.java","additions":0,"deletions":137,"binary":false,"changes":137,"status":"deleted"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.notebook.data;\n-\n-import java.util.ArrayList;\n-\n-\/**\n- * Notebook Data Object.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class Notebook {\n-    private final ArrayList<CellInfo> cells = new ArrayList<>();\n-\n-    public Notebook() {\n-    }\n-\n-    public int size() {\n-        return cells.size();\n-    }\n-\n-    public CellInfo getCell(int ix) {\n-        return cells.get(ix);\n-    }\n-\n-    public void add(CellInfo cell) {\n-        cells.add(cell);\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/data\/Notebook.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -1,63 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-.active-cell .code-bar {\n-    -fx-background-color: #488f48;\n-    -fx-background-radius: 2;\n-}\n-\n-.exec-label {\n-    -fx-text-fill: gray;\n-}\n-\n-.cell-pane:focus-within .exec-label {\n-    -fx-text-fill: black;\n-}\n-\n-.exec-label:executing {\n-    -fx-text-fill: red;\n-    -fx-font-weight: bold;\n-}\n-\n-.output-text .content {\n-    -fx-background-color:f8f8f8;\n-    -fx-background-insets:0;\n-}\n-\n-.output-error .content {\n-    -fx-background-color:fff0f0;\n-    -fx-background-insets:0;\n-}\n-\n-.image-result {\n-    -fx-background-color: #888888;\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/notebook.css","additions":0,"deletions":63,"binary":false,"changes":63,"status":"deleted"},{"patch":"@@ -1,94 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import javafx.scene.canvas.Canvas;\n-import javafx.scene.canvas.GraphicsContext;\n-import javafx.scene.layout.Pane;\n-import javafx.scene.paint.Color;\n-\n-\/**\n- * Illustrate chaos arising from a simple formula.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class BifurcationDiagram {\n-    private static final double min = 2.4;\n-    private static final double max = 4.0;\n-\n-    public static Pane generate() {\n-        Pane p = new Pane();\n-        p.setPrefSize(600, 200);\n-        p.widthProperty().addListener((x) -> update(p));\n-        p.heightProperty().addListener((x) -> update(p));\n-        update(p);\n-        return p;\n-    }\n-\n-    protected static void update(Pane p) {\n-        double w = p.getWidth();\n-        double h = p.getHeight();\n-\n-        if ((w < 1) || (h < 1)) {\n-            return;\n-        } else if (w > 600) {\n-            w = 600;\n-        }\n-\n-        Canvas c = new Canvas(w, h);\n-        GraphicsContext g = c.getGraphicsContext2D();\n-\n-        g.setFill(Color.gray(0.9));\n-        g.fillRect(0, 0, w, h);\n-\n-        int count = 1000;\n-        int start = 500;\n-        double r = 0.3;\n-        g.setFill(Color.rgb(0, 0, 0, 0.2));\n-\n-        for (double λ = min; λ < max; λ += 0.001) {\n-            double x = 0.5;\n-            for (int i = 0; i < count; i++) {\n-                x = λ * x * (1.0 - x);\n-                if (i > start) {\n-                    double px = w * (λ - min) \/ (max - min);\n-                    double py = h * (1.0 - x);\n-\n-                    g.fillOval(px - r, py - r, r + r, r + r);\n-                }\n-            }\n-        }\n-\n-        p.getChildren().setAll(c);\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/BifurcationDiagram.java","additions":0,"deletions":94,"binary":false,"changes":94,"status":"deleted"},{"patch":"@@ -1,131 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import java.nio.charset.Charset;\n-import java.util.Base64;\n-import javafx.collections.ObservableList;\n-import javafx.geometry.Insets;\n-import javafx.scene.Scene;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.Label;\n-import javafx.scene.control.TextArea;\n-import javafx.scene.layout.BorderPane;\n-import javafx.scene.layout.GridPane;\n-import javafx.scene.layout.Priority;\n-import javafx.scene.paint.Color;\n-import javafx.stage.Window;\n-import com.oracle.demo.richtext.util.FX;\n-\n-\/**\n- * CSS Tool\n- *\n- * @author Andy Goryachev\n- *\/\n-public class CssToolPane extends BorderPane {\n-    private final TextArea cssField;\n-    private static String oldStylesheet;\n-\n-    public CssToolPane() {\n-        cssField = new TextArea();\n-        cssField.setId(\"CssPlaygroundPaneCss\");\n-        cssField.setMaxWidth(Double.POSITIVE_INFINITY);\n-        cssField.setMaxHeight(Double.POSITIVE_INFINITY);\n-\n-        Button updateButton = FX.button(\"Update\", this::update);\n-\n-        \/\/ why can't I fill the width of the container with this grid pane??\n-        GridPane p = new GridPane();\n-        p.setPadding(new Insets(10));\n-        p.setHgap(5);\n-        p.setVgap(5);\n-        int r = 0;\n-        p.add(new Label(\"Custom CSS:\"), 0, r);\n-        r++;\n-        p.add(cssField, 0, r, 3, 1);\n-        r++;\n-        p.add(updateButton, 2, r);\n-        GridPane.setHgrow(cssField, Priority.ALWAYS);\n-        GridPane.setVgrow(cssField, Priority.ALWAYS);\n-\n-        setCenter(p);\n-    }\n-\n-    private void update() {\n-        String css = cssField.getText();\n-        applyStyleSheet(css);\n-    }\n-\n-    private static String toCssColor(Color c) {\n-        int r = toInt8(c.getRed());\n-        int g = toInt8(c.getGreen());\n-        int b = toInt8(c.getBlue());\n-        return String.format(\"#%02X%02X%02X\", r, g, b);\n-    }\n-\n-    private static int toInt8(double x) {\n-        int v = (int)Math.round(x * 255);\n-        if (v < 0) {\n-            return 0;\n-        } else if (v > 255) {\n-            return 255;\n-        }\n-        return v;\n-    }\n-\n-    private static String encode(String s) {\n-        if (s == null) {\n-            return null;\n-        }\n-        Charset utf8 = Charset.forName(\"utf-8\");\n-        byte[] b = s.getBytes(utf8);\n-        return \"data:text\/css;base64,\" + Base64.getEncoder().encodeToString(b);\n-    }\n-\n-    private static void applyStyleSheet(String styleSheet) {\n-        String ss = encode(styleSheet);\n-        if (ss != null) {\n-            for (Window w : Window.getWindows()) {\n-                Scene scene = w.getScene();\n-                if (scene != null) {\n-                    ObservableList<String> sheets = scene.getStylesheets();\n-                    if (oldStylesheet != null) {\n-                        sheets.remove(oldStylesheet);\n-                    }\n-                    sheets.add(ss);\n-                }\n-            }\n-        }\n-        oldStylesheet = ss;\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/CssToolPane.java","additions":0,"deletions":131,"binary":false,"changes":131,"status":"deleted"},{"patch":"@@ -1,82 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import java.util.ArrayList;\n-\n-\/**\n- * Simple Data Frame.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class DataFrame {\n-    private String[] columns;\n-    private final ArrayList<String[]> rows = new ArrayList();\n-\n-    public DataFrame() {\n-    }\n-\n-    public static DataFrame parse(String[] lines) {\n-        DataFrame f = new DataFrame();\n-        for (int i = 0; i < lines.length; i++) {\n-            String line = lines[i];\n-            String[] ss = line.split(\"\\\\|\");\n-            if (i == 0) {\n-                f.setColumns(ss);\n-            } else {\n-                f.addValues(ss);\n-            }\n-        }\n-        return f;\n-    }\n-\n-    public String[] getColumnNames() {\n-        return columns;\n-    }\n-\n-    public void setColumns(String[] columns) {\n-        this.columns = columns;\n-    }\n-\n-    public void addValues(String[] ss) {\n-        rows.add(ss);\n-    }\n-\n-    public int getRowCount() {\n-        return rows.size();\n-    }\n-\n-    public String[] getRow(int ix) {\n-        return rows.get(ix);\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/DataFrame.java","additions":0,"deletions":82,"binary":false,"changes":82,"status":"deleted"},{"patch":"@@ -1,67 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import javafx.scene.Node;\n-import javafx.scene.layout.Background;\n-import javafx.scene.layout.BackgroundFill;\n-import javafx.scene.layout.Region;\n-import javafx.scene.paint.Color;\n-import jfx.incubator.scene.control.richtext.SideDecorator;\n-\n-\/**\n- * Colorful side decorator for debugging purposes.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class DemoColorSideDecorator implements SideDecorator {\n-    public DemoColorSideDecorator() {\n-    }\n-\n-    @Override\n-    public double getPrefWidth(double viewWidth) {\n-        return 20.0;\n-    }\n-\n-    @Override\n-    public Node getNode(int modelIndex, boolean forMeasurement) {\n-        int num = 36;\n-        double a = 360.0 * (modelIndex % num) \/ num;\n-        Color c = Color.hsb(a, 0.5, 1.0);\n-\n-        Region r = new Region();\n-        r.setOpacity(1.0);\n-        r.setBackground(new Background(new BackgroundFill(c, null, null)));\n-        return r;\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/DemoColorSideDecorator.java","additions":0,"deletions":67,"binary":false,"changes":67,"status":"deleted"},{"patch":"@@ -1,217 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-import java.util.Arrays;\n-import javafx.beans.binding.Bindings;\n-import javafx.beans.property.SimpleStringProperty;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.Label;\n-import javafx.scene.control.TextField;\n-import javafx.scene.layout.Background;\n-import javafx.scene.layout.BorderPane;\n-import javafx.scene.layout.Region;\n-import javafx.scene.paint.Color;\n-import jfx.incubator.scene.control.richtext.model.RichTextFormatHandler;\n-import jfx.incubator.scene.control.richtext.model.SimpleViewOnlyStyledModel;\n-\n-\/**\n- * RichTextArea demo model.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class DemoModel extends SimpleViewOnlyStyledModel {\n-    private final SimpleStringProperty textField = new SimpleStringProperty();\n-\n-    public DemoModel() {\n-        \/\/ see RichTextAreaDemo.css\n-        String ARABIC = \"arabic\";\n-        String CODE = \"code\";\n-        String RED = \"red\";\n-        String GREEN = \"green\";\n-        String GRAY = \"gray\";\n-        String LARGE = \"large\";\n-        String BOLD = \"bold\";\n-        String ITALIC = \"italic\";\n-        String STRIKETHROUGH = \"strikethrough\";\n-        String UNDERLINE = \"underline\";\n-\n-        withInlineAndExternalStyles(\"RichTextArea Control\", \"-fx-font-size:200%;\", UNDERLINE);\n-        nl(2);\n-\n-\/\/        addParagraph(() -> {\n-\/\/            Region r = new Region();\n-\/\/            r.getchi\n-\/\/            r.setw 300, 50);\n-\/\/            r.setFill(Color.RED);\n-\/\/            return r;\n-\/\/        });\n-\n-        withStyles(\"\/**\", RED, CODE);\n-        nl();\n-        withStyles(\" * Syntax Highlight Demo.\", RED, CODE);\n-        nl();\n-        withStyles(\" *\/\", RED, CODE);\n-        nl();\n-        withStyles(\"public class \", GREEN, CODE);\n-        withStyles(\"SyntaxHighlightDemo \", CODE);\n-        withStyles(\"extends \", GREEN, CODE);\n-        withStyles(\"Application {\", CODE);\n-        nl();\n-        withStyles(\"\\tpublic static void\", GREEN, CODE);\n-        withStyles(\" main(String[] args) {\", CODE);\n-        nl();\n-        withStyles(\"\\t\\tApplication.launch(SyntaxHighlightDemo.\", CODE);\n-        withStyles(\"class\", CODE, GREEN);\n-        withStyles(\", args);\", CODE);\n-        nl();\n-        withStyles(\"\\t}\", CODE);\n-        nl();\n-        withStyles(\"}\", CODE);\n-        nl(2);\n-        \/\/ font attributes\n-        withStyles(\"BOLD \", BOLD);\n-        withStyles(\"ITALIC \", ITALIC);\n-        withStyles(\"STRIKETHROUGH \", STRIKETHROUGH);\n-        withStyles(\"UNDERLINE \", UNDERLINE);\n-        withStyles(\"ALL OF THEM \", BOLD, ITALIC, STRIKETHROUGH, UNDERLINE);\n-        nl(2);\n-        \/\/ inline nodes\n-        addSegment(\"Inline Nodes: \");\n-        addNodeSegment(() -> {\n-            TextField f = new TextField();\n-            f.setPrefColumnCount(20);\n-            f.textProperty().bindBidirectional(textField);\n-            return f;\n-        });\n-        addSegment(\" \");\n-        addNodeSegment(() -> new Button(\"OK\"));\n-        addSegment(\" \"); \/\/ FIX cannot navigate over this segment\n-        nl(2);\n-        withStyles(\"A regular Arabic verb, كَتَبَ‎ kataba (to write).\", ARABIC).nl();\n-        withStyles(\"Emojis: [🔥🦋😀😃😄😁😆😅🤣😂🙂🙃😉😊😇]\", LARGE).nl();\n-        nl();\n-        withStyles(\"Halfwidth and FullWidth Forms\", UNDERLINE).nl();\n-        withInlineStyle(\"ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯ\", \"-fx-font-family:monospaced;\").nl();\n-        withInlineStyle(\"ABCDEFGHIJKLMNO\", \"-fx-font-family:monospaced;\").nl();\n-        withStyles(\"        leading and trailing whitespace         \", CODE).nl();\n-        nl(3);\n-        withStyles(\"Behold various types of highlights, including overlapping highlights.\", LARGE);\n-        highlight(7, 7, Color.rgb(255, 255, 128, 0.7));\n-        squiggly(36, 100, Color.RED);\n-        highlight(46, 11, Color.rgb(255, 255, 128, 0.7));\n-        highlight(50, 20, Color.rgb(0, 0, 128, 0.1));\n-        nl(2);\n-        addSegment(\"Behold various types of highlights, including overlapping highlights.\");\n-        highlight(7, 7, Color.rgb(255, 255, 128, 0.7));\n-        squiggly(36, 100, Color.RED);\n-        highlight(46, 11, Color.rgb(255, 255, 128, 0.7));\n-        highlight(50, 20, Color.rgb(0, 0, 128, 0.1));\n-        nl(2);\n-\n-        \/\/ FIX adding a control messes up the view with text wrap off\n-\/\/        addParagraph(() -> {\n-\/\/            TextField t = new TextField(\"yo\");\n-\/\/            t.setMaxWidth(100);\n-\/\/            return t;\n-\/\/        });\n-\/\/        nl(2);\n-\n-        addParagraph(this::createRect);\n-        nl(2);\n-\n-        ParagraphAttributesDemoModel.insert(this);\n-\n-        addImage(DemoModel.class.getResourceAsStream(\"animated.gif\"));\n-        withStyles(\"  Fig. 1 Embedded animated GIF image.\", GRAY, ITALIC);\n-        nl(2);\n-\n-        \/*\n-        Random r = new Random();\n-        for(int line=0; line<100; line++) {\n-            int ct = r.nextInt(10);\n-            for (int word = 0; word < ct; word++) {\n-                int len = 1 + r.nextInt(7);\n-                char c = '*';\n-\n-                if (word == 0) {\n-                    addSegment(\"L\" + (size() + 1), null, GRAY);\n-                }\n-\n-                addSegment(\" \");\n-\n-                if (r.nextFloat() < 0.1) {\n-                    addSegment(word + \".\" + word(c, len), null, RED);\n-                } else {\n-                    addSegment(word + \".\" + word(c, len));\n-                }\n-            }\n-            nl();\n-        }\n-        *\/\n-\n-        nl();\n-        withInlineStyle(\"\\t\\t終 The End.\", \"-fx-font-size:200%;\");\n-        nl();\n-\n-        registerDataFormatHandler(RichTextFormatHandler.INSTANCE, true, false, 2000);\n-    }\n-\n-    private Region createRect() {\n-        Label t = new Label() {\n-            @Override\n-            protected double computePrefHeight(double w) {\n-                return 400;\n-            }\n-        };\n-        t.setPrefSize(400, 200);\n-        t.setMaxWidth(400);\n-        t.textProperty().bind(Bindings.createObjectBinding(\n-            () -> {\n-                return String.format(\"%.1f x %.1f\", t.getWidth(), t.getHeight());\n-            },\n-            t.widthProperty(),\n-            t.heightProperty()\n-        ));\n-        t.setBackground(Background.fill(Color.LIGHTGRAY));\n-\n-        BorderPane p = new BorderPane();\n-        p.setLeft(t);\n-        return p;\n-    }\n-\n-    private String word(char c, int len) {\n-        char[] cs = new char[len];\n-        Arrays.fill(cs, c);\n-        return new String(cs);\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/DemoModel.java","additions":0,"deletions":217,"binary":false,"changes":217,"status":"deleted"},{"patch":"@@ -1,142 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import java.text.DecimalFormat;\n-import javafx.scene.Node;\n-import javafx.scene.text.Text;\n-import javafx.scene.text.TextFlow;\n-import jfx.incubator.scene.control.richtext.StyleResolver;\n-import jfx.incubator.scene.control.richtext.TextPos;\n-import jfx.incubator.scene.control.richtext.model.RichParagraph;\n-import jfx.incubator.scene.control.richtext.model.StyleAttributeMap;\n-import jfx.incubator.scene.control.richtext.model.StyledTextModelViewOnlyBase;\n-\n-\/**\n- * Demo StyledTextModel.\n- * Does not support editing events - populate the model first, then pass it to the control.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class DemoStyledTextModel extends StyledTextModelViewOnlyBase {\n-    private final int size;\n-    private final boolean monospaced;\n-    private static final DecimalFormat format = new DecimalFormat(\"#,##0\");\n-\n-    public DemoStyledTextModel(int size, boolean monospaced) {\n-        this.size = size;\n-        this.monospaced = monospaced;\n-    }\n-\n-    @Override\n-    public int size() {\n-        return size;\n-    }\n-\n-    @Override\n-    public StyleAttributeMap getStyleAttributeMap(StyleResolver resolver, TextPos pos) {\n-        return StyleAttributeMap.EMPTY;\n-    }\n-\n-    @Override\n-    public String getPlainText(int index) {\n-        RichParagraph p = getParagraph(index);\n-        return p.getPlainText();\n-    }\n-\n-    private static String getText(TextFlow f) {\n-        StringBuilder sb = new StringBuilder();\n-        for (Node n : f.getChildrenUnmodifiable()) {\n-            if (n instanceof Text t) {\n-                sb.append(t.getText());\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    @Override\n-    public RichParagraph getParagraph(int ix) {\n-        RichParagraph.Builder b = RichParagraph.builder();\n-        String s = format.format(ix + 1);\n-        String sz = format.format(size);\n-        String[] css = monospaced ? new String[] { \"monospaced\" } : new String[0];\n-\n-        b.withInlineAndExternalStyles(s, \"-fx-fill:darkgreen;\", css);\n-        b.withStyles(\" \/ \", css);\n-        b.withInlineAndExternalStyles(sz, \"-fx-fill:black;\", css);\n-        if (monospaced) {\n-            b.withStyles(\" (monospaced)\", css);\n-        }\n-\n-        if ((ix % 10) == 9) {\n-            String words = generateWords(ix);\n-            b.withStyles(words, css);\n-        }\n-        return b.build();\n-    }\n-\n-    private String generateWords(int ix) {\n-        String s = String.valueOf(ix);\n-        StringBuilder sb = new StringBuilder(128);\n-        for (char c: s.toCharArray()) {\n-            String digit = getDigit(c);\n-            sb.append(digit);\n-        }\n-        return sb.toString();\n-    }\n-\n-    private String getDigit(char c) {\n-        switch (c) {\n-        case '0':\n-            return \" zero\";\n-        case '1':\n-            return \" one\";\n-        case '2':\n-            return \" two\";\n-        case '3':\n-            return \" three\";\n-        case '4':\n-            return \" four\";\n-        case '5':\n-            return \" five\";\n-        case '6':\n-            return \" six\";\n-        case '7':\n-            return \" seven\";\n-        case '8':\n-            return \" eight\";\n-        default:\n-            return \" nine\";\n-        }\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/DemoStyledTextModel.java","additions":0,"deletions":142,"binary":false,"changes":142,"status":"deleted"},{"patch":"@@ -1,100 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import javafx.beans.property.SimpleStringProperty;\n-import javafx.scene.control.TextField;\n-import javafx.scene.paint.Color;\n-import jfx.incubator.scene.control.richtext.StyleResolver;\n-import jfx.incubator.scene.control.richtext.TextPos;\n-import jfx.incubator.scene.control.richtext.model.RichParagraph;\n-import jfx.incubator.scene.control.richtext.model.StyleAttributeMap;\n-import jfx.incubator.scene.control.richtext.model.StyledTextModelViewOnlyBase;\n-\n-\/**\n- * This model contains code examples used in the documentation.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class ExamplesModel extends StyledTextModelViewOnlyBase {\n-    \/** properties in the model allow for inline controls *\/\n-    private final SimpleStringProperty exampleProperty = new SimpleStringProperty();\n-\n-    public ExamplesModel() {\n-    }\n-\n-    @Override\n-    public int size() {\n-        return 10;\n-    }\n-\n-    @Override\n-    public String getPlainText(int index) {\n-        return getParagraph(index).getPlainText();\n-    }\n-\n-    @Override\n-    public StyleAttributeMap getStyleAttributeMap(StyleResolver resolver, TextPos pos) {\n-        return null;\n-    }\n-\n-    @Override\n-    public RichParagraph getParagraph(int index) {\n-        switch(index) {\n-        case 0:\n-            {\n-                StyleAttributeMap a1 = StyleAttributeMap.builder().setBold(true).build();\n-                RichParagraph.Builder b = RichParagraph.builder();\n-                b.addSegment(\"Example: \", a1);\n-                b.addSegment(\"spelling, highlights\");\n-                b.addSquiggly(9, 8, Color.RED);\n-                b.addHighlight(19, 4, Color.rgb(255, 128, 128, 0.5));\n-                b.addHighlight(20, 7, Color.rgb(128, 255, 128, 0.5));\n-                return b.build();\n-            }\n-        case 4:\n-            {\n-                RichParagraph.Builder b = RichParagraph.builder();\n-                b.addSegment(\"Input field: \");\n-                \/\/ creates an embedded control bound to a property within this model\n-                b.addInlineNode(() -> {\n-                   TextField t = new TextField();\n-                   t.textProperty().bindBidirectional(exampleProperty);\n-                   return t;\n-                });\n-                return b.build();\n-            }\n-        }\n-        return RichParagraph.builder().build();\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/ExamplesModel.java","additions":0,"deletions":100,"binary":false,"changes":100,"status":"deleted"},{"patch":"@@ -1,193 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n-import javafx.beans.property.ObjectProperty;\n-import javafx.beans.property.SimpleObjectProperty;\n-import javafx.geometry.Insets;\n-import javafx.scene.control.ComboBox;\n-import javafx.scene.layout.HBox;\n-import javafx.scene.layout.Priority;\n-import javafx.scene.text.Font;\n-import com.oracle.demo.richtext.util.FX;\n-\n-\/**\n- * Font Option Bound to a Property.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class FontOption extends HBox {\n-    private final SimpleObjectProperty<Font> property = new SimpleObjectProperty<>();\n-    private final ComboBox<String> fontField = new ComboBox<>();\n-    private final ComboBox<String> styleField = new ComboBox<>();\n-    private final ComboBox<Double> sizeField = new ComboBox<>();\n-\n-    public FontOption(String name, boolean allowNull, ObjectProperty<Font> p) {\n-        FX.name(this, name);\n-        if (p != null) {\n-            property.bindBidirectional(p);\n-        }\n-\n-        FX.name(fontField, name + \"_FONT\");\n-        fontField.getItems().setAll(collectFonts(allowNull));\n-        fontField.getSelectionModel().selectedItemProperty().addListener((x) -> {\n-            String fam = fontField.getSelectionModel().getSelectedItem();\n-            updateStyles(fam);\n-            update();\n-        });\n-\n-        FX.name(styleField, name + \"_STYLE\");\n-        styleField.getSelectionModel().selectedItemProperty().addListener((x) -> {\n-            update();\n-        });\n-\n-        FX.name(sizeField, name + \"_SIZE\");\n-        sizeField.getItems().setAll(\n-            1.0,\n-            2.5,\n-            6.0,\n-            8.0,\n-            10.0,\n-            11.0,\n-            12.0,\n-            16.0,\n-            24.0,\n-            32.0,\n-            48.0,\n-            72.0,\n-            144.0,\n-            480.0\n-        );\n-        sizeField.getSelectionModel().selectedItemProperty().addListener((x) -> {\n-            update();\n-        });\n-\n-        getChildren().setAll(fontField, styleField, sizeField);\n-        setHgrow(fontField, Priority.ALWAYS);\n-        setMargin(sizeField, new Insets(0, 0, 0, 2));\n-\n-        setFont(property.get());\n-    }\n-\n-    public SimpleObjectProperty<Font> getProperty() {\n-        return property;\n-    }\n-\n-    public void select(String name) {\n-        fontField.getSelectionModel().select(name);\n-    }\n-\n-    public Font getFont() {\n-        String name = fontField.getSelectionModel().getSelectedItem();\n-        if (name == null) {\n-            return null;\n-        }\n-        String style = styleField.getSelectionModel().getSelectedItem();\n-        if (!isBlank(style)) {\n-            name = name + \" \" + style;\n-        }\n-        Double size = sizeField.getSelectionModel().getSelectedItem();\n-        if (size == null) {\n-            size = 12.0;\n-        }\n-        return new Font(name, size);\n-    }\n-\n-    private static boolean isBlank(String s) {\n-        return s == null ? true : s.trim().length() == 0;\n-    }\n-\n-    protected void updateStyles(String family) {\n-        String st = styleField.getSelectionModel().getSelectedItem();\n-        if (st == null) {\n-            st = \"\";\n-        }\n-\n-        List<String> ss = Font.getFontNames(family);\n-        for (int i = 0; i < ss.size(); i++) {\n-            String s = ss.get(i);\n-            if (s.startsWith(family)) {\n-                s = s.substring(family.length()).trim();\n-                ss.set(i, s);\n-            }\n-        }\n-        Collections.sort(ss);\n-\n-        styleField.getItems().setAll(ss);\n-        int ix = ss.indexOf(st);\n-        if (ix >= 0) {\n-            styleField.getSelectionModel().select(ix);\n-        }\n-    }\n-\n-    protected void update() {\n-        Font f = getFont();\n-        property.set(f);\n-    }\n-\n-    private void setFont(Font f) {\n-        String name;\n-        String style;\n-        double size;\n-        if (f == null) {\n-            name = null;\n-            style = null;\n-            size = 12.0;\n-        } else {\n-            name = f.getFamily();\n-            style = f.getStyle();\n-            size = f.getSize();\n-        }\n-        fontField.getSelectionModel().select(name);\n-        styleField.getSelectionModel().select(style);\n-        sizeField.getSelectionModel().select(size);\n-    }\n-\n-    protected List<String> collectFonts(boolean allowNull) {\n-        ArrayList<String> rv = new ArrayList<>();\n-        if (allowNull) {\n-            rv.add(null);\n-        }\n-        rv.addAll(Font.getFamilies());\n-        return rv;\n-    }\n-\n-    public void selectSystemFont() {\n-        FX.select(fontField, \"System\");\n-        FX.select(styleField, \"\");\n-        FX.select(sizeField, 12.0);\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/FontOption.java","additions":0,"deletions":193,"binary":false,"changes":193,"status":"deleted"},{"patch":"@@ -1,111 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-import javafx.beans.property.SimpleStringProperty;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.TextField;\n-import jfx.incubator.scene.control.richtext.model.SimpleViewOnlyStyledModel;\n-\n-\/**\n- * A demo model with inline Nodes.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class InlineNodesModel extends SimpleViewOnlyStyledModel {\n-    private final SimpleStringProperty textField = new SimpleStringProperty();\n-\n-    public InlineNodesModel() {\n-        String ARABIC = \"arabic\";\n-        String CODE = \"code\";\n-        String RED = \"red\";\n-        String GREEN = \"green\";\n-        String UNDER = \"underline\";\n-        String GRAY = \"gray\";\n-        String LARGE = \"large\";\n-        String ITALIC = \"italic\";\n-\n-        withStyles(\"Inline Nodes\", UNDER, LARGE);\n-        nl();\n-        \/\/ trailing text\n-        addNodeSegment(() -> {\n-            TextField f = new TextField();\n-            f.setPrefColumnCount(20);\n-            f.textProperty().bindBidirectional(textField);\n-            return f;\n-        });\n-        withStyles(\" \", LARGE);\n-        addNodeSegment(() -> new Button(\"OK\"));\n-        withStyles(\" trailing segment.\", LARGE); \/\/ FIX cannot navigate over this segment\n-        nl();\n-\n-        \/\/ leading text\n-        withStyles(\"Leading text\", LARGE);\n-        addNodeSegment(() -> {\n-            TextField f = new TextField();\n-            f.setPrefColumnCount(20);\n-            f.textProperty().bindBidirectional(textField);\n-            return f;\n-        });\n-        withStyles(\"- in between text-\", LARGE);\n-        addNodeSegment(() -> new Button(\"Find\"));\n-        nl();\n-\n-        \/\/ leading and trailing text\n-        withStyles(\"Leading text\", LARGE);\n-        addNodeSegment(() -> {\n-            TextField f = new TextField();\n-            f.setPrefColumnCount(20);\n-            f.textProperty().bindBidirectional(textField);\n-            return f;\n-        });\n-        withStyles(\"- in between text-\", LARGE);\n-        addNodeSegment(() -> new Button(\"Find\"));\n-        withStyles(\" trailing segment.\", LARGE);\n-        nl();\n-\n-        \/\/ adjacent nodes\n-        addNodeSegment(() -> new Button(\"One\"));\n-        addNodeSegment(() -> new Button(\"Two\"));\n-        addNodeSegment(() -> new Button(\"Three\"));\n-        addNodeSegment(() -> new Button(\"Four\"));\n-        addNodeSegment(() -> new Button(\"Five\"));\n-        nl();\n-        withStyles(\"\", LARGE);\n-        nl();\n-\n-        withStyles(\"A regular text segment for reference.\", LARGE);\n-        nl();\n-        withStyles(\"The End █\", LARGE);\n-        nl();\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/InlineNodesModel.java","additions":0,"deletions":111,"binary":false,"changes":111,"status":"deleted"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import java.util.Random;\n-import jfx.incubator.scene.control.richtext.model.SimpleViewOnlyStyledModel;\n-\n-\/**\n- * Large text model for debugging.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class LargeTextModel extends SimpleViewOnlyStyledModel {\n-    private final String STYLE = \"-fx-font-size:500%\";\n-    private final Random random = new Random();\n-\n-    public LargeTextModel(int lineCount) {\n-        for (int i = 0; i < lineCount; i++) {\n-            addLine(i);\n-        }\n-    }\n-\n-    private void addLine(int n) {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"L\").append(n).append(' ');\n-        int ct;\n-        if (random.nextFloat() < 0.01f) {\n-            ct = 200;\n-        } else {\n-            ct = random.nextInt(10);\n-        }\n-\n-        for (int i = 0; i < ct; i++) {\n-            sb.append(\" \").append(i);\n-            int len = random.nextInt(10) + 1;\n-            for (int j = 0; j < len; j++) {\n-                sb.append('*');\n-            }\n-        }\n-        withStyles(sb.toString(), STYLE);\n-        nl();\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/LargeTextModel.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -1,230 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import java.io.IOException;\n-import javafx.scene.paint.Color;\n-import jfx.incubator.scene.control.richtext.TextPos;\n-import jfx.incubator.scene.control.richtext.model.BasicTextModel;\n-import jfx.incubator.scene.control.richtext.model.RichParagraph;\n-import jfx.incubator.scene.control.richtext.model.RichTextModel;\n-import jfx.incubator.scene.control.richtext.model.SimpleViewOnlyStyledModel;\n-import jfx.incubator.scene.control.richtext.model.StyleAttributeMap;\n-import jfx.incubator.scene.control.richtext.model.StyledInput;\n-import jfx.incubator.scene.control.richtext.model.StyledTextModel;\n-\n-\/**\n- * All the models used in the tester.\n- *\n- * @author Andy Goryachev\n- *\/\n-public enum ModelChoice {\n-    DEMO(\"Demo\"),\n-    PARAGRAPH(\"Paragraph Attributes\"),\n-    WRITING_SYSTEMS_EDITABLE(\"Writing Systems (Editable)\"),\n-    EDITABLE_STYLED(\"❤ Editable Rich Text Model\"),\n-    BILLION_LINES(\"2,000,000,000 Lines\"),\n-    NOTEBOOK(\"Notebook: Embedded Chart\"),\n-    NOTEBOOK2(\"Notebook: SQL Queries\"),\n-    EDITABLE_PLAIN(\"Plaintext with Syntax Highlighting\"),\n-    NULL(\"null\"),\n-    EXAMPLES(\"Examples\"),\n-    INLINE(\"Inline Nodes\"),\n-    MONOSPACED(\"Monospaced\"),\n-    TABS(\"Tabs\"),\n-    UNEVEN_SMALL(\"Uneven Small\"),\n-    UNEVEN_LARGE(\"Uneven Large\"),\n-    WRITING_SYSTEMS(\"Writing Systems\"),\n-    ZERO_LINES(\"0 Lines\"),\n-    ONE_LINE(\"1 Line\"),\n-    TEN_LINES(\"10 Lines\"),\n-    THOUSAND_LINES(\"1,000 Lines\"),\n-    LARGE_TEXT(\"Large text\"),\n-    LARGE_TEXT_LONG(\"Large Text, Long\"),\n-    NO_LAST_NEWLINE_SHORT(\"No Last Newline, Short\"),\n-    NO_LAST_NEWLINE_MEDIUM(\"No Last Newline, Medium\"),\n-    NO_LAST_NEWLINE_LONG(\"No Last Newline, Long\"),\n-    ;\n-\n-    private final String name;\n-\n-    ModelChoice(String name) {\n-        this.name = name;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return name;\n-    }\n-\n-    public static StyledTextModel create(ModelChoice ch) {\n-        if(ch == null) {\n-            return null;\n-        }\n-\n-        switch(ch) {\n-        case BILLION_LINES:\n-            return new DemoStyledTextModel(2_000_000_000, false);\n-        case DEMO:\n-            return new DemoModel();\n-        case EXAMPLES:\n-            return new ExamplesModel();\n-        case INLINE:\n-            return new InlineNodesModel();\n-        case EDITABLE_PLAIN:\n-            {\n-                BasicTextModel m = new BasicTextModel() {\n-                    private static final String DIGITS = \"-fx-fill:magenta;\";\n-\n-                    @Override\n-                    public RichParagraph getParagraph(int index) {\n-                        String text = getPlainText(index);\n-                        RichParagraph.Builder b = RichParagraph.builder();\n-                        int start = 0;\n-                        int sz = text.length();\n-                        boolean num = false;\n-                        for (int i = 0; i < sz; i++) {\n-                            char c = text.charAt(i);\n-                            if (num != Character.isDigit(c)) {\n-                                if (i > start) {\n-                                    String s = text.substring(start, i);\n-                                    String style = num ? DIGITS : null;\n-                                    b.withInlineStyle(s, style);\n-                                    start = i;\n-                                }\n-                                num = !num;\n-                            }\n-                        }\n-                        if (start < sz) {\n-                            String s = text.substring(start);\n-                            String style = num ? DIGITS : null;\n-                            b.withInlineStyle(s, style);\n-                        }\n-                        return b.build();\n-                    }\n-                };\n-                return m;\n-            }\n-        case EDITABLE_STYLED:\n-            return new RichTextModel();\n-        case LARGE_TEXT:\n-            return new LargeTextModel(10);\n-        case LARGE_TEXT_LONG:\n-            return new LargeTextModel(5_000);\n-        case NO_LAST_NEWLINE_SHORT:\n-            return new NoLastNewlineModel(1);\n-        case NO_LAST_NEWLINE_MEDIUM:\n-            return new NoLastNewlineModel(5);\n-        case NO_LAST_NEWLINE_LONG:\n-            return new NoLastNewlineModel(300);\n-        case MONOSPACED:\n-            return new DemoStyledTextModel(2_000_000_000, true);\n-        case NOTEBOOK:\n-            return new NotebookModel();\n-        case NOTEBOOK2:\n-            return new NotebookModel2();\n-        case NULL:\n-            return null;\n-        case ONE_LINE:\n-            return new DemoStyledTextModel(1, false);\n-        case PARAGRAPH:\n-            return new ParagraphAttributesDemoModel();\n-        case TABS:\n-            return tabs();\n-        case TEN_LINES:\n-            return new DemoStyledTextModel(10, false);\n-        case THOUSAND_LINES:\n-            return new DemoStyledTextModel(1_000, false);\n-        case UNEVEN_SMALL:\n-            return new UnevenStyledTextModel(20);\n-        case UNEVEN_LARGE:\n-            return new UnevenStyledTextModel(2000);\n-        case WRITING_SYSTEMS:\n-            return writingSystemsPlain();\n-        case WRITING_SYSTEMS_EDITABLE:\n-            return writingSystems();\n-        case ZERO_LINES:\n-            return new DemoStyledTextModel(0, false);\n-        default:\n-            throw new Error(\"?\" + ch);\n-        }\n-    }\n-\n-    private static StyledTextModel writingSystemsPlain() {\n-        try {\n-            return SimpleViewOnlyStyledModel.from(WritingSystemsDemo.getText());\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-    private static StyledTextModel tabs() {\n-        try {\n-            return SimpleViewOnlyStyledModel.from(\"0123456789012345678901234567890\\n0\\n\\t1\\n\\t\\t2\\n\\t\\t\\t3\\n\\t\\t\\t\\t4\\n0\\n\");\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-            return null;\n-        }\n-    }\n-\n-    private static StyledTextModel writingSystems() {\n-        StyleAttributeMap name = StyleAttributeMap.builder().\n-            setFontSize(24).\n-            setTextColor(Color.gray(0.5)).\n-            build();\n-\n-        StyleAttributeMap value = StyleAttributeMap.builder().\n-            setFontSize(24).\n-            build();\n-\n-        RichTextModel m = new RichTextModel();\n-        String[] ss = WritingSystemsDemo.PAIRS;\n-        for (int i = 0; i < ss.length;) {\n-            String s = ss[i++] + \":  \";\n-            append(m, s, name);\n-\n-            s = ss[i++];\n-            append(m, s, value);\n-\n-            append(m, \"\\n\", null);\n-        }\n-        return m;\n-    }\n-\n-    \/\/ TODO add to StyledModel?\n-    private static void append(StyledTextModel m, String text, StyleAttributeMap style) {\n-        TextPos p = m.getDocumentEnd();\n-        m.replace(null, p, p, StyledInput.of(text, style), false);\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/ModelChoice.java","additions":0,"deletions":230,"binary":false,"changes":230,"status":"deleted"},{"patch":"@@ -1,193 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import javafx.geometry.Insets;\n-import javafx.scene.Scene;\n-import javafx.scene.control.ContextMenu;\n-import javafx.scene.control.Label;\n-import javafx.scene.control.Menu;\n-import javafx.scene.control.ScrollPane;\n-import javafx.scene.control.TextArea;\n-import javafx.scene.layout.HBox;\n-import javafx.scene.layout.VBox;\n-import javafx.stage.Stage;\n-import com.oracle.demo.richtext.util.FX;\n-import jfx.incubator.scene.control.richtext.LineNumberDecorator;\n-import jfx.incubator.scene.control.richtext.RichTextArea;\n-\n-\/**\n- * Test Window that stacks multiple RichTextAreas and other components either vertically or horizontally.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class MultipleStackedBoxWindow extends Stage {\n-\n-    public MultipleStackedBoxWindow(boolean vertical) {\n-        RichTextArea a1 = new RichTextArea(NotebookModelStacked.m1());\n-        a1.setHighlightCurrentParagraph(true);\n-        a1.setWrapText(true);\n-        a1.setLeftDecorator(new LineNumberDecorator());\n-        createPopupMenu(a1);\n-\n-        TextArea t1 = new TextArea(\"This TextArea has wrap text property set to false.\");\n-        t1.setPrefHeight(50);\n-\n-        Label t2 = new Label(\"Label\");\n-\n-        RichTextArea a2 = new RichTextArea(NotebookModelStacked.m2());\n-        a2.setHighlightCurrentParagraph(true);\n-        a2.setWrapText(true);\n-        a2.setLeftDecorator(new LineNumberDecorator());\n-        createPopupMenu(a2);\n-\n-        PrefSizeTester tester = new PrefSizeTester();\n-\n-        ScrollPane sp = new ScrollPane();\n-\n-        if (vertical) {\n-            a1.setUseContentHeight(true);\n-            a2.setUseContentHeight(true);\n-\n-            VBox vb = new VBox(\n-                a1,\n-                t1,\n-                a2,\n-                t2,\n-                tester\n-            );\n-            sp.setContent(vb);\n-            sp.setFitToWidth(true);\n-\n-            setTitle(\"Test Vertical Stack\");\n-            setWidth(600);\n-            setHeight(1200);\n-            FX.name(this, \"VerticalStack\");\n-        } else {\n-            a1.setUseContentWidth(true);\n-            a2.setUseContentWidth(true);\n-\n-            HBox hb = new HBox(\n-                a1,\n-                t1,\n-                a2,\n-                t2,\n-                tester\n-            );\n-            sp.setContent(hb);\n-            sp.setFitToHeight(true);\n-\n-            setTitle(\"Test Horizontal Stack\");\n-            setWidth(1200);\n-            setHeight(600);\n-            FX.name(this, \"HorizontalStack\");\n-        }\n-\n-        Scene scene = new Scene(sp);\n-        scene.getStylesheets().addAll(\n-            RichTextAreaWindow.class.getResource(\"RichTextAreaDemo.css\").toExternalForm()\n-        );\n-        setScene(scene);\n-    }\n-\n-    protected void createPopupMenu(RichTextArea t) {\n-        FX.setPopupMenu(t, () -> {\n-            Menu m;\n-            ContextMenu c = new ContextMenu();\n-            \/\/ left side\n-            m = FX.menu(c, \"Left Side\");\n-            FX.checkItem(m, \"null\", t.getLeftDecorator() == null, (on) -> {\n-                if (on) {\n-                    t.setLeftDecorator(null);\n-                }\n-            });\n-            FX.checkItem(m, \"Line Numbers\", t.getLeftDecorator() instanceof LineNumberDecorator, (on) -> {\n-                if (on) {\n-                    t.setLeftDecorator(new LineNumberDecorator());\n-                }\n-            });\n-            FX.checkItem(m, \"Colors\", t.getLeftDecorator() instanceof DemoColorSideDecorator, (on) -> {\n-                if (on) {\n-                    t.setLeftDecorator(new DemoColorSideDecorator());\n-                }\n-            });\n-            \/\/ right side\n-            m = FX.menu(c, \"Right Side\");\n-            FX.checkItem(m, \"null\", t.getRightDecorator() == null, (on) -> {\n-                if (on) {\n-                    t.setRightDecorator(null);\n-                }\n-            });\n-            FX.checkItem(m, \"Line Numbers\", t.getRightDecorator() instanceof LineNumberDecorator, (on) -> {\n-                if (on) {\n-                    t.setRightDecorator(new LineNumberDecorator());\n-                }\n-            });\n-            FX.checkItem(m, \"Colors\", t.getRightDecorator() instanceof DemoColorSideDecorator, (on) -> {\n-                if (on) {\n-                    t.setRightDecorator(new DemoColorSideDecorator());\n-                }\n-            });\n-            \/\/ content padding\n-            m = FX.menu(c, \"Content Padding\");\n-            FX.checkItem(m, \"null\", t.getContentPadding() == null, (on) -> {\n-                if (on) {\n-                    t.setContentPadding(null);\n-                }\n-            });\n-            FX.checkItem(m, \"1\", new Insets(1).equals(t.getContentPadding()), (on) -> {\n-                if (on) {\n-                    t.setContentPadding(new Insets(1));\n-                }\n-            });\n-            FX.checkItem(m, \"2\", new Insets(1).equals(t.getContentPadding()), (on) -> {\n-                if (on) {\n-                    t.setContentPadding(new Insets(2));\n-                }\n-            });\n-            FX.checkItem(m, \"10\", new Insets(10).equals(t.getContentPadding()), (on) -> {\n-                if (on) {\n-                    t.setContentPadding(new Insets(10));\n-                }\n-            });\n-            FX.checkItem(m, \"55.75\", new Insets(55.75).equals(t.getContentPadding()), (on) -> {\n-                if (on) {\n-                    t.setContentPadding(new Insets(55.75));\n-                }\n-            });\n-\n-            FX.checkItem(c, \"Wrap Text\", t.isWrapText(), (on) -> t.setWrapText(on));\n-            return c;\n-        });\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/MultipleStackedBoxWindow.java","additions":0,"deletions":193,"binary":false,"changes":193,"status":"deleted"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import jfx.incubator.scene.control.richtext.model.SimpleViewOnlyStyledModel;\n-\n-\/**\n- * Test model.\n- *\/\n-public class NoLastNewlineModel extends SimpleViewOnlyStyledModel {\n-    public NoLastNewlineModel(int lineCount) {\n-        for(int i=0; i<lineCount; i++) {\n-            addSegment(\"L.\" + i);\n-            if(i != (lineCount - 1)) {\n-                nl();\n-            }\n-        }\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/NoLastNewlineModel.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import jfx.incubator.scene.control.richtext.model.SimpleViewOnlyStyledModel;\n-import jfx.incubator.scene.control.richtext.model.StyleAttribute;\n-import jfx.incubator.scene.control.richtext.model.StyleAttributeMap;\n-\n-\/**\n- * Sample notebook model.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class NotebookModel extends SimpleViewOnlyStyledModel {\n-\n-    public static final StyleAttribute<Boolean> OUTLINE = new StyleAttribute<>(\"OUTLINE\", Boolean.class, true);\n-\n-    public NotebookModel() {\n-        String GREEN = \"green\";\n-        String GRAY = \"gray\";\n-        String EQ = \"equation\";\n-        String SUB = \"sub\";\n-        String UNDER = \"underline\";\n-\n-        withInlineAndExternalStyles(\"Bifurcation Diagram\", \"-fx-font-size:200%;\", UNDER);\n-        nl(2);\n-        withStyles(\"In mathematics, particularly in dynamical systems, a \", GRAY);\n-        withStyles(\"bifurcation diagram \", \"-fx-font-weight:bold;\"); \/\/ FIX does not work on mac\n-        withStyles(\"shows the values visited or approached asymptotically (fixed points, periodic orbits, or chaotic attractors) of a system as a function of a bifurcation parameter in the system. It is usual to represent stable values with a solid line and unstable values with a dotted line, although often the unstable points are omitted. Bifurcation diagrams enable the visualization of bifurcation theory.\", GRAY);\n-        nl(2);\n-        withStyles(\"An example is the bifurcation diagram of the logistic map:\", GRAY);\n-        nl(2);\n-        withStyles(\"   x\", EQ);\n-        withStyles(\"n+1\", EQ, SUB);\n-        withStyles(\" = λx\", EQ);\n-        withStyles(\"n\", EQ, SUB);\n-        withStyles(\"(1 - x\", EQ);\n-        withStyles(\"n\", EQ, SUB);\n-        withStyles(\")\", EQ);\n-        setParagraphAttributes(StyleAttributeMap.of(OUTLINE, Boolean.TRUE));\n-        nl(2);\n-        withStyles(\"The bifurcation parameter λ is shown on the horizontal axis of the plot and the vertical axis shows the set of values of the logistic function visited asymptotically from almost all initial conditions.\", GRAY);\n-        nl(2);\n-        withStyles(\"The bifurcation diagram shows the forking of the periods of stable orbits from 1 to 2 to 4 to 8 etc. Each of these bifurcation points is a period-doubling bifurcation. The ratio of the lengths of successive intervals between values of r for which bifurcation occurs converges to the first Feigenbaum constant.\", GRAY);\n-        nl(2);\n-        withStyles(\"The diagram also shows period doublings from 3 to 6 to 12 etc., from 5 to 10 to 20 etc., and so forth.\", GRAY);\n-        nl();\n-        addParagraph(BifurcationDiagram::generate);\n-        nl(2);\n-        addSegment(\"Source: Wikipedia\");\n-        nl();\n-        withStyles(\"https:\/\/en.wikipedia.org\/wiki\/Bifurcation_diagram\", GREEN, UNDER);\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/NotebookModel.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -1,115 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import javafx.beans.property.SimpleObjectProperty;\n-import javafx.beans.property.SimpleStringProperty;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.TextField;\n-import jfx.incubator.scene.control.richtext.model.SimpleViewOnlyStyledModel;\n-\n-\/**\n- * Mocks a Notebook Page that Provides a SQL Query Engine Interface\n- *\n- * @author Andy Goryachev\n- *\/\n-public class NotebookModel2 extends SimpleViewOnlyStyledModel {\n-    private final SimpleStringProperty query = new SimpleStringProperty();\n-    private final SimpleObjectProperty<Object> result = new SimpleObjectProperty<>();\n-    private static final String QUERY = \"SELECT * FROM Book WHERE price > 100.00;\";\n-\n-    public NotebookModel2() {\n-        String ARABIC = \"arabic\";\n-        String CODE = \"code\";\n-        String RED = \"red\";\n-        String GREEN = \"green\";\n-        String UNDER = \"underline\";\n-        String GRAY = \"gray\";\n-        String LARGE = \"large\";\n-        String EQ = \"equation\";\n-        String SUB = \"sub\";\n-\n-        withInlineAndExternalStyles(\"SQL Select\", \"-fx-font-size:200%;\", UNDER);\n-        nl(2);\n-        withStyles(\"The SQL \", GRAY);\n-        withInlineStyle(\"SELECT \", \"-fx-font-weight:bold;\"); \/\/ FIX does not work on mac\n-        withStyles(\"statement returns a result set of records, from one or more tables.\", GRAY);\n-        nl(2);\n-        withStyles(\"A SELECT statement retrieves zero or more rows from one or more database tables or database views. In most applications, SELECT is the most commonly used data manipulation language (DML) command. As SQL is a declarative programming language, SELECT queries specify a result set, but do not specify how to calculate it. The database translates the query into a \\\"query plan\\\" which may vary between executions, database versions and database software. This functionality is called the \\\"query optimizer\\\" as it is responsible for finding the best possible execution plan for the query, within applicable constraints.\", GRAY);\n-        nl(2);\n-        withInlineStyle(QUERY, \"-fx-font-weight:bold;\"); \/\/ FIX does not work on mac\n-        nl(2);\n-        addNodeSegment(() -> {\n-            TextField f = new TextField();\n-            f.setPrefColumnCount(50);\n-            f.textProperty().bindBidirectional(query);\n-            return f;\n-        });\n-        withStyles(\" \", GRAY);\n-        addNodeSegment(() -> {\n-            Button b = new Button(\"Run\");\n-            b.setOnAction((ev) -> execute());\n-            return b;\n-        });\n-        nl(2);\n-        withStyles(\"Result:\", GRAY);\n-        nl();\n-        addParagraph(() -> new ResultParagraph(result));\n-        nl(2);\n-        addSegment(\"Source: Wikipedia\");\n-        nl();\n-        withStyles(\"https:\/\/en.wikipedia.org\/wiki\/Select_(SQL)\", GREEN, UNDER);\n-    }\n-\n-    protected void execute() {\n-        String q = query.get();\n-        if (q == null) {\n-            q = \"\";\n-        }\n-        q = q.toLowerCase();\n-        if(q.equals(QUERY.toLowerCase())) {\n-            result.set(generate());\n-        } else {\n-            result.set(\"This query is not supported by the demo engine.\");\n-        }\n-    }\n-\n-    private String[] generate() {\n-        return new String[] {\n-            \"Title|Author|Price\",\n-            \"SQL Examples and Guide|J.Goodwell|145.55\",\n-            \"The Joy of SQL|M.C.Eichler|250.00\",\n-            \"An Introduction to SQL|Q.Adams|101.99\",\n-        };\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/NotebookModel2.java","additions":0,"deletions":115,"binary":false,"changes":115,"status":"deleted"},{"patch":"@@ -1,178 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import java.util.ArrayList;\n-import java.util.function.Supplier;\n-import javafx.scene.control.TextArea;\n-import javafx.scene.layout.Region;\n-import jfx.incubator.scene.control.richtext.RichTextArea;\n-import jfx.incubator.scene.control.richtext.StyleResolver;\n-import jfx.incubator.scene.control.richtext.TextPos;\n-import jfx.incubator.scene.control.richtext.model.BasicTextModel;\n-import jfx.incubator.scene.control.richtext.model.RichParagraph;\n-import jfx.incubator.scene.control.richtext.model.StyleAttributeMap;\n-import jfx.incubator.scene.control.richtext.model.StyledTextModel;\n-\n-\/**\n- * Another test model.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class NotebookModelStacked extends StyledTextModel {\n-    enum Type {\n-        CODE,\n-        COMMENT,\n-        TEXTAREA,\n-    }\n-\n-    private final ArrayList<Object> paragraphs = new ArrayList<>();\n-\n-    public NotebookModelStacked() {\n-        paragraphs.add(m1());\n-        paragraphs.add(Type.TEXTAREA);\n-        paragraphs.add(m2());\n-    }\n-\n-    public static StyledTextModel m1() {\n-        return create(Type.COMMENT, \"██This is\\na comment cell.██p\");\n-    }\n-\n-    public static StyledTextModel m2() {\n-        return create(Type.CODE, \"x = 5;\\nprint(x);\");\n-    }\n-\n-    public static StyledTextModel create(Type type, String text) {\n-        BasicTextModel m;\n-        switch(type) {\n-        case CODE:\n-            m = new BasicTextModel() {\n-                @Override\n-                public RichParagraph getParagraph(int index) {\n-                    String text = getPlainText(index);\n-                    RichParagraph.Builder b = RichParagraph.builder();\n-                    b.withInlineStyle(text, \"-fx-text-fill:darkgreen; -fx-font-family:Monospace;\");\n-                    return b.build();\n-                }\n-            };\n-            break;\n-        case COMMENT:\n-            m = new BasicTextModel() {\n-                @Override\n-                public RichParagraph getParagraph(int index) {\n-                    String text = getPlainText(index);\n-                    RichParagraph.Builder b = RichParagraph.builder();\n-                    b.withInlineStyle(text, \"-fx-text-fill:gray;\");\n-                    return b.build();\n-                }\n-            };\n-            break;\n-        default:\n-            throw new Error(\"?\" + type);\n-        }\n-\n-        m.insertText(TextPos.ZERO, text);\n-        return m;\n-    }\n-\n-    @Override\n-    public boolean isWritable() {\n-        return false;\n-    }\n-\n-    @Override\n-    public int size() {\n-        return paragraphs.size();\n-    }\n-\n-    @Override\n-    public String getPlainText(int index) {\n-        return \"\";\n-    }\n-\n-    @Override\n-    public RichParagraph getParagraph(int index) {\n-        Object x = paragraphs.get(index);\n-        if(x instanceof StyledTextModel m) {\n-            return RichParagraph.of(() -> {\n-                RichTextArea t = new RichTextArea(m);\n-                t.setHighlightCurrentParagraph(true);\n-                t.setMaxWidth(Double.POSITIVE_INFINITY);\n-                t.setWrapText(true);\n-                t.setUseContentHeight(true);\n-                return t;\n-            });\n-        } else if(x instanceof Type type) {\n-            switch(type) {\n-            case TEXTAREA:\n-                return RichParagraph.of(() -> {\n-                    TextArea t = new TextArea();\n-                    t.setMaxWidth(Double.POSITIVE_INFINITY);\n-                    t.setWrapText(true);\n-                    return t;\n-                });\n-            }\n-        }\n-        throw new Error(\"?\" + x);\n-    }\n-\n-    @Override\n-    protected void removeRange(TextPos start, TextPos end) {\n-    }\n-\n-    @Override\n-    protected int insertTextSegment(int index, int offset, String text, StyleAttributeMap attrs) {\n-        return 0;\n-    }\n-\n-    @Override\n-    protected void insertLineBreak(int index, int offset) {\n-    }\n-\n-    @Override\n-    protected void insertParagraph(int index, Supplier<Region> generator) {\n-    }\n-\n-    @Override\n-    public StyleAttributeMap getStyleAttributeMap(StyleResolver r, TextPos pos) {\n-        return StyleAttributeMap.EMPTY;\n-    }\n-\n-    @Override\n-    protected void setParagraphStyle(int ix, StyleAttributeMap paragraphAttrs) {\n-    }\n-\n-    @Override\n-    protected void applyStyle(int ix, int start, int end, StyleAttributeMap a, boolean merge) {\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/NotebookModelStacked.java","additions":0,"deletions":178,"binary":false,"changes":178,"status":"deleted"},{"patch":"@@ -1,233 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import javafx.scene.paint.Color;\n-import javafx.scene.text.TextAlignment;\n-import com.oracle.demo.richtext.util.FX;\n-import jfx.incubator.scene.control.richtext.model.RtfFormatHandler;\n-import jfx.incubator.scene.control.richtext.model.SimpleViewOnlyStyledModel;\n-import jfx.incubator.scene.control.richtext.model.StyleAttributeMap;\n-\n-\/**\n- * This simple, read-only StyledModel demonstrates various paragraph attributes.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class ParagraphAttributesDemoModel extends SimpleViewOnlyStyledModel {\n-    private final static StyleAttributeMap TITLE = StyleAttributeMap.builder().\n-        setFontSize(24).\n-        setUnderline(true).\n-        build();\n-    private final static StyleAttributeMap BULLET = StyleAttributeMap.builder().\n-        setSpaceLeft(20).\n-        setBullet(\"•\").\n-        build();\n-    private final static StyleAttributeMap FIRST_LINE_INDENT = StyleAttributeMap.builder().\n-        setFirstLineIndent(100).\n-        build();\n-\n-    public ParagraphAttributesDemoModel() {\n-        registerDataFormatHandler(RtfFormatHandler.INSTANCE, true, false, 1000);\n-        insert(this);\n-    }\n-\n-    public static void insert(SimpleViewOnlyStyledModel m) {\n-        m.addSegment(\"Bullet List\", TITLE);\n-        m.nl(2);\n-        m.setParagraphAttributes(BULLET);\n-        m.addSegment(\"This little piggy went to market,\");\n-        m.setParagraphAttributes(BULLET);\n-        m.nl();\n-        m.addSegment(\"This little piggy stayed home,\");\n-        m.setParagraphAttributes(BULLET);\n-        m.nl();\n-        m.addSegment(\"This little piggy had roast beef,\");\n-        m.setParagraphAttributes(BULLET);\n-        m.nl();\n-        m.addSegment(\"This little piggy had none.\");\n-        m.setParagraphAttributes(BULLET);\n-        m.nl();\n-        m.addSegment(\"This little piggy went ...\");\n-        m.setParagraphAttributes(BULLET);\n-        m.nl();\n-        m.addSegment(\"Wee, wee, wee, all the way home!\");\n-        m.setParagraphAttributes(BULLET);\n-        m.nl(2);\n-\n-        m.addSegment(\"First Line Indent\", TITLE);\n-        m.nl(2);\n-        m.addSegment(words(60));\n-        m.setParagraphAttributes(FIRST_LINE_INDENT);\n-        m.nl(2);\n-\n-        m.addSegment(\"Paragraph Attributes\", TITLE);\n-        m.nl(2);\n-\n-        m.addSegment(\"✓ Opaque Background Color\");\n-        m.setParagraphAttributes(StyleAttributeMap.builder().\n-            setBackground(Color.LIGHTGREEN).\n-            build());\n-        m.nl();\n-\n-        m.addSegment(\"✓ Translucent Background Color\");\n-        m.setParagraphAttributes(StyleAttributeMap.builder().\n-            setBackground(FX.alpha(Color.LIGHTGREEN, 0.5)).\n-            build());\n-        m.nl();\n-\n-        \/\/ space\n-\n-        m.addSegment(\"✓ Space Above\");\n-        m.setParagraphAttributes(StyleAttributeMap.builder().\n-            setSpaceAbove(20).\n-            setBackground(Color.gray(0.95, 0.5)).\n-            setBullet(\"•\").\n-            build());\n-        m.nl();\n-\n-        m.addSegment(\"✓ Space Below\");\n-        m.setParagraphAttributes(StyleAttributeMap.builder().\n-            setSpaceBelow(20).\n-            setBackground(Color.gray(0.9, 0.5)).\n-            setBullet(\"◦\").\n-            build());\n-        m.nl();\n-\n-        m.addSegment(\"✓ Space Left \" + words(50));\n-        m.setParagraphAttributes(StyleAttributeMap.builder().\n-            setSpaceLeft(20).\n-            setBackground(Color.gray(0.85, 0.5)).\n-            setBullet(\"∙\").\n-            build());\n-        m.nl();\n-\n-        m.addSegment(\"✓ Space Right \" + words(10));\n-        m.setParagraphAttributes(StyleAttributeMap.builder().\n-            setSpaceRight(20).\n-            setBackground(Color.gray(0.8, 0.5)).\n-            setBullet(\"‣\").\n-            build());\n-        m.nl();\n-\n-        \/\/ text alignment\n-\n-        m.addSegment(\"✓ Text Alignment Left \" + words(20));\n-        m.setParagraphAttributes(StyleAttributeMap.builder().\n-            setBackground(Color.gray(0.95, 0.5)).\n-            setTextAlignment(TextAlignment.LEFT).\n-            build());\n-        m.nl();\n-\n-        m.addSegment(\"✓ Text Alignment Right \" + words(20));\n-        m.setParagraphAttributes(StyleAttributeMap.builder().\n-            setBackground(Color.gray(0.9, 0.5)).\n-            setTextAlignment(TextAlignment.RIGHT).\n-            build());\n-        m.nl();\n-\n-        m.addSegment(\"✓ Text Alignment Center \" + words(20));\n-        m.setParagraphAttributes(StyleAttributeMap.builder().\n-            setBackground(Color.gray(0.85, 0.5)).\n-            setTextAlignment(TextAlignment.CENTER).\n-            build());\n-        m.nl();\n-\n-        m.addSegment(\"✓ Text Alignment Justify \" + words(20));\n-        m.setParagraphAttributes(StyleAttributeMap.builder().\n-            setBackground(Color.gray(0.8, 0.5)).\n-            setTextAlignment(TextAlignment.JUSTIFY).\n-            build());\n-        m.nl();\n-\n-        \/\/ line spacing\n-\n-        m.addSegment(\"✓ Line Spacing 0 \" + words(200));\n-        m.highlight(50, 100, FX.alpha(Color.RED, 0.4));\n-        m.setParagraphAttributes(StyleAttributeMap.builder().\n-            setBackground(Color.gray(0.95, 0.5)).\n-            setLineSpacing(0).\n-            build());\n-        m.nl();\n-\n-        m.addSegment(\"✓ Line Spacing 20 \" + words(200));\n-        m.highlight(50, 100, FX.alpha(Color.RED, 0.4));\n-        m.setParagraphAttributes(StyleAttributeMap.builder().\n-            setBackground(Color.gray(0.9, 0.5)).\n-            setLineSpacing(20).\n-            build());\n-        m.nl();\n-\n-        m.addSegment(\"✓ Line Spacing 40 \" + words(200));\n-        m.highlight(50, 100, FX.alpha(Color.RED, 0.4));\n-        m.setParagraphAttributes(StyleAttributeMap.builder().\n-            setBackground(Color.gray(0.9, 0.5)).\n-            setLineSpacing(40).\n-            build());\n-        m.nl();\n-    }\n-\n-    private static String words(int count) {\n-        String[] lorem = {\n-            \"Lorem\",\n-            \"ipsum\",\n-            \"dolor\",\n-            \"sit\",\n-            \"amet,\",\n-            \"consectetur\",\n-            \"adipiscing\",\n-            \"elit,\",\n-            \"sed\",\n-            \"do\",\n-            \"eiusmod\",\n-            \"tempor\",\n-            \"incididunt\",\n-            \"ut\",\n-            \"labore\",\n-            \"et\",\n-            \"dolore\",\n-            \"magna\",\n-            \"aliqua\"\n-        };\n-\n-        StringBuilder sb = new StringBuilder();\n-        for(int i=0; i<count; i++) {\n-            if(i > 0) {\n-                sb.append(' ');\n-            }\n-            sb.append(lorem[i % lorem.length]);\n-        }\n-        sb.append(\".\");\n-        return sb.toString();\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/ParagraphAttributesDemoModel.java","additions":0,"deletions":233,"binary":false,"changes":233,"status":"deleted"},{"patch":"@@ -1,100 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import javafx.scene.control.ComboBox;\n-import javafx.scene.control.Label;\n-import javafx.scene.layout.Background;\n-import javafx.scene.layout.GridPane;\n-import javafx.scene.layout.Pane;\n-import javafx.scene.paint.Color;\n-\n-\/**\n- * Debug aid.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class PrefSizeTester extends Pane {\n-    private final ComboBox prefWidth;\n-    private final ComboBox prefHeight;\n-    private final GridPane p;\n-\n-    public PrefSizeTester() {\n-        setBackground(Background.fill(Color.LIGHTSTEELBLUE));\n-\n-        prefWidth = new ComboBox();\n-        prefWidth.getItems().addAll(\n-            -1.0,\n-            100.0,\n-            200.0,\n-            300.0\n-        );\n-        prefWidth.setOnAction((ev) -> {\n-            updateWidth();\n-        });\n-\n-        prefHeight = new ComboBox();\n-        prefHeight.getItems().addAll(\n-            -1.0,\n-            100.0,\n-            200.0,\n-            300.0\n-        );\n-        prefHeight.setOnAction((ev) -> {\n-            updateHeight();\n-        });\n-\n-        p = new GridPane();\n-        p.add(new Label(\"Pref Width:\"), 0, 0);\n-        p.add(prefWidth, 1, 0);\n-        p.add(new Label(\"Pref Height:\"), 0, 1);\n-        p.add(prefHeight, 1, 1);\n-\n-        getChildren().add(p);\n-        \/\/setCenter(p);\n-    }\n-\n-    private void updateWidth() {\n-        if (prefWidth.getValue() instanceof Number n) {\n-            double w = n.doubleValue();\n-            p.setPrefWidth(w);\n-        }\n-    }\n-\n-    private void updateHeight() {\n-        if (prefHeight.getValue() instanceof Number n) {\n-            double h = n.doubleValue();\n-            p.setPrefHeight(h);\n-        }\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/PrefSizeTester.java","additions":0,"deletions":100,"binary":false,"changes":100,"status":"deleted"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import javafx.geometry.Insets;\n-import javafx.scene.Node;\n-import javafx.scene.control.Label;\n-import javafx.scene.layout.GridPane;\n-import javafx.scene.layout.Priority;\n-\n-\/**\n- * Option pane.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class ROptionPane extends GridPane {\n-    private int row;\n-    private int column;\n-    private static final Insets MARGIN = new Insets(2, 4, 2, 4);\n-\n-    public ROptionPane() {\n-        \/\/ no such thing\n-        \/\/ https:\/\/stackoverflow.com\/questions\/20454021\/how-to-set-padding-between-columns-of-a-javafx-gridpane\n-        \/\/ setVGap(2);\n-    }\n-\n-    public void label(String text) {\n-        add(new Label(text));\n-    }\n-\n-    public void option(Node n) {\n-        add(n);\n-    }\n-\n-    public void add(Node n) {\n-        add(n, column, row++);\n-        setMargin(n, MARGIN);\n-        setFillHeight(n, Boolean.TRUE);\n-        setFillWidth(n, Boolean.TRUE);\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/ROptionPane.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"},{"patch":"@@ -1,90 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import javafx.geometry.HPos;\n-import javafx.geometry.Insets;\n-import javafx.geometry.VPos;\n-import javafx.scene.layout.Pane;\n-import javafx.scene.layout.Region;\n-\n-\/**\n- * Content pane for TextCell that shows an arbitrary Region.\n- * The content gets resized if it cannot fit into available width.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class RegionCellPane extends Pane {\n-    private final Region content;\n-    private static final Insets PADDING = new Insets(1, 1, 1, 1);\n-\n-    public RegionCellPane(Region n) {\n-        this.content = n;\n-\n-        getChildren().add(n);\n-\n-        setPadding(PADDING);\n-        getStyleClass().add(\"region-cell\");\n-    }\n-\n-    @Override\n-    protected void layoutChildren() {\n-        double width = getWidth() - snappedLeftInset() - snappedRightInset();\n-        double w = content.prefWidth(-1);\n-        if (w < width) {\n-            width = w;\n-        }\n-        double h = content.prefHeight(width);\n-\n-        double x0 = snappedLeftInset();\n-        double y0 = snappedTopInset();\n-        layoutInArea(\n-            content,\n-            x0,\n-            y0,\n-            width,\n-            h,\n-            0,\n-            null,\n-            true,\n-            false,\n-            HPos.CENTER,\n-            VPos.CENTER\n-        );\n-    }\n-\n-    @Override\n-    protected double computePrefHeight(double width) {\n-        return content.prefHeight(width) + snappedTopInset() + snappedBottomInset();\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/RegionCellPane.java","additions":0,"deletions":90,"binary":false,"changes":90,"status":"deleted"},{"patch":"@@ -1,99 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import javafx.beans.property.SimpleObjectProperty;\n-import javafx.beans.property.SimpleStringProperty;\n-import javafx.scene.Node;\n-import javafx.scene.control.TableColumn;\n-import javafx.scene.control.TableView;\n-import javafx.scene.layout.BorderPane;\n-import javafx.scene.text.Text;\n-import javafx.scene.text.TextFlow;\n-\n-\/**\n- * Part of the code cell.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class ResultParagraph extends BorderPane {\n-    SimpleObjectProperty<Object> result = new SimpleObjectProperty<Object>();\n-\n-    public ResultParagraph(SimpleObjectProperty<Object> src) {\n-        result.bind(src);\n-        result.addListener((s, p, c) -> {\n-            update();\n-        });\n-        update();\n-        setPrefSize(600, 200);\n-    }\n-\n-    protected void update() {\n-        Node n = getNode();\n-        setCenter(n);\n-    }\n-\n-    protected Node getNode() {\n-        Object r = result.get();\n-        if (r instanceof String s) {\n-            Text t = new Text(s);\n-            t.setStyle(\"-fx-fill:red;\");\n-\n-            TextFlow f = new TextFlow();\n-            f.getChildren().add(t);\n-            return f;\n-        } else if (r instanceof String[] ss) {\n-            DataFrame f = DataFrame.parse(ss);\n-            TableView<String[]> t = new TableView<>();\n-\n-            String[] cols = f.getColumnNames();\n-            for (int i=0; i<cols.length; i++) {\n-                String col = cols[i];\n-                TableColumn<String[], String> c = new TableColumn<>(col);\n-                int ix = i;\n-                c.setCellValueFactory((d) -> {\n-                    String[] row = d.getValue();\n-                    String s = row[ix];\n-                    return new SimpleStringProperty(s);\n-                });\n-                t.getColumns().add(c);\n-            }\n-            for (int i = 0; i < f.getRowCount(); i++) {\n-                t.getItems().add(f.getRow(i));\n-            }\n-            t.prefWidthProperty().bind(widthProperty());\n-            return t;\n-        }\n-        return null;\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/ResultParagraph.java","additions":0,"deletions":99,"binary":false,"changes":99,"status":"deleted"},{"patch":"@@ -1,86 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-.red {\n-    -fx-fill:red;\n-}\n-\n-.green {\n-    -fx-fill:#3e8c25;\n-}\n-\n-.gray {\n-    -fx-fill:gray;\n-}\n-\n-.code {\n-    -fx-font-family:Monospace;\n-}\n-\n-.underline {\n-    -fx-underline:true;\n-}\n-\n-.monospaced {\n-    -fx-font-family:Monospaced;\n-}\n-\n-.bold {\n-    -fx-font-weight: bold;\n-}\n-\n-.italic {\n-    -fx-font-family: serif;\n-    -fx-font-style: italic;\n-}\n-\n-.strikethrough {\n-    -fx-strikethrough: true;\n-}\n-\n-.arabic {\n-    -fx-font-family:Tahoma;\n-    -fx-font-size:200%;\n-}\n-\n-.large {\n-    -fx-font-size:200%;\n-}\n-\n-.equation {\n-    -fx-font-family:serif;\n-}\n-\n-.sub {\n-    -fx-text-origin:bottom;\n-    -fx-font-size:70%;\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/RichTextAreaDemo.css","additions":0,"deletions":86,"binary":false,"changes":86,"status":"deleted"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import javafx.application.Application;\n-import javafx.stage.Stage;\n-import com.oracle.demo.richtext.settings.FxSettings;\n-\n-\/**\n- * RichTextArea Demo Application.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class RichTextAreaDemoApp extends Application {\n-    public static void main(String[] args) {\n-        Application.launch(RichTextAreaDemoApp.class, args);\n-    }\n-\n-    @Override\n-    public void init() {\n-        FxSettings.useDirectory(\".RichTextAreaDemo\");\n-    }\n-\n-    @Override\n-    public void start(Stage stage) throws Exception {\n-        try {\n-            new RichTextAreaWindow(false).show();\n-        } catch (Throwable e) {\n-            e.printStackTrace();\n-        }\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/RichTextAreaDemoApp.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -1,762 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import java.nio.charset.Charset;\n-import java.util.Base64;\n-import java.util.Objects;\n-import javafx.application.Platform;\n-import javafx.collections.ObservableList;\n-import javafx.geometry.Insets;\n-import javafx.geometry.Orientation;\n-import javafx.geometry.Pos;\n-import javafx.scene.AccessibleAttribute;\n-import javafx.scene.Node;\n-import javafx.scene.Scene;\n-import javafx.scene.canvas.Canvas;\n-import javafx.scene.canvas.GraphicsContext;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.CheckBox;\n-import javafx.scene.control.CheckMenuItem;\n-import javafx.scene.control.ComboBox;\n-import javafx.scene.control.ContextMenu;\n-import javafx.scene.control.Menu;\n-import javafx.scene.control.MenuItem;\n-import javafx.scene.control.ScrollPane;\n-import javafx.scene.control.ScrollPane.ScrollBarPolicy;\n-import javafx.scene.control.SeparatorMenuItem;\n-import javafx.scene.control.SplitPane;\n-import javafx.scene.input.Clipboard;\n-import javafx.scene.input.DataFormat;\n-import javafx.scene.input.KeyCode;\n-import javafx.scene.layout.BorderPane;\n-import javafx.scene.layout.HBox;\n-import javafx.scene.layout.Pane;\n-import javafx.scene.paint.Color;\n-import javafx.scene.text.TextAlignment;\n-import javafx.stage.Window;\n-import javafx.util.Duration;\n-import javafx.util.StringConverter;\n-import com.oracle.demo.richtext.util.FX;\n-import jfx.incubator.scene.control.input.KeyBinding;\n-import jfx.incubator.scene.control.richtext.LineNumberDecorator;\n-import jfx.incubator.scene.control.richtext.RichTextArea;\n-import jfx.incubator.scene.control.richtext.SideDecorator;\n-import jfx.incubator.scene.control.richtext.StyleHandlerRegistry;\n-import jfx.incubator.scene.control.richtext.TextPos;\n-import jfx.incubator.scene.control.richtext.model.ParagraphDirection;\n-import jfx.incubator.scene.control.richtext.model.RichTextModel;\n-import jfx.incubator.scene.control.richtext.model.StyleAttribute;\n-import jfx.incubator.scene.control.richtext.model.StyleAttributeMap;\n-import jfx.incubator.scene.control.richtext.model.StyledTextModel;\n-import jfx.incubator.scene.control.richtext.skin.RichTextAreaSkin;\n-\n-\/**\n- * Main Panel contains RichTextArea, split panes for quick size adjustment, and an option pane.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class RichTextAreaDemoPane extends BorderPane {\n-    enum Decorator {\n-        NULL,\n-        LINE_NUMBERS,\n-        COLORS\n-    }\n-\n-    private static StyledTextModel globalModel;\n-    public final ROptionPane op;\n-    public final RichTextArea control;\n-    public final ComboBox<ModelChoice> modelField;\n-\n-    public RichTextAreaDemoPane(boolean useContentSize) {\n-        FX.name(this, \"RichTextAreaDemoPane\");\n-\n-        control = new RichTextArea() {\n-            private static final StyleHandlerRegistry registry = init();\n-\n-            private static StyleHandlerRegistry init() {\n-                \/\/ brings in the handlers from the base class\n-                StyleHandlerRegistry.Builder b = StyleHandlerRegistry.builder(RichTextArea.styleHandlerRegistry);\n-                \/\/ adds a handler for the new attribute\n-                b.setParHandler(NotebookModel.OUTLINE, (c, cx, v) -> {\n-                    if (v) {\n-                        cx.addStyle(\"-fx-border-color:LIGHTPINK;\");\n-                        cx.addStyle(\"-fx-border-width:1;\");\n-                    }\n-                });\n-                return b.build();\n-            }\n-\n-            @Override\n-            public StyleHandlerRegistry getStyleHandlerRegistry() {\n-                return registry;\n-            }\n-        };\n-        control.setUseContentHeight(useContentSize);\n-        control.setUseContentWidth(useContentSize);\n-        control.setHighlightCurrentParagraph(true);\n-\n-        \/\/ custom functions\n-        System.out.println(\n-            \"\"\"\n-            F2: dump model\n-            F3: dump accessibility attributes at cursor\n-            \"\"\");\n-        control.getInputMap().register(KeyBinding.of(KeyCode.F2), () -> {\n-            RichTextModel.dump(control.getModel(), System.out);\n-        });\n-        control.getInputMap().register(KeyBinding.of(KeyCode.F3), () -> {\n-            dumpAccessibilityAttributes();\n-        });\n-\n-        Node contentNode;\n-        if (useContentSize) {\n-            contentNode = new ScrollPane(control);\n-        } else {\n-            contentNode = control;\n-        }\n-\n-        SplitPane hsplit = new SplitPane(contentNode, pane());\n-        FX.name(hsplit, \"hsplit\");\n-        hsplit.setBorder(null);\n-        hsplit.setDividerPositions(1.0);\n-        hsplit.setOrientation(Orientation.HORIZONTAL);\n-\n-        SplitPane vsplit = new SplitPane(hsplit, pane());\n-        FX.name(vsplit, \"vsplit\");\n-        vsplit.setBorder(null);\n-        vsplit.setDividerPositions(1.0);\n-        vsplit.setOrientation(Orientation.VERTICAL);\n-\n-        modelField = new ComboBox<>();\n-        FX.name(modelField, \"modelField\");\n-        modelField.getItems().setAll(ModelChoice.values());\n-\n-        CheckBox editable = new CheckBox(\"editable\");\n-        FX.name(editable, \"editable\");\n-        editable.selectedProperty().bindBidirectional(control.editableProperty());\n-\n-        CheckBox wrapText = new CheckBox(\"wrap text\");\n-        FX.name(wrapText, \"wrapText\");\n-        wrapText.selectedProperty().bindBidirectional(control.wrapTextProperty());\n-\n-        CheckBox displayCaret = new CheckBox(\"display caret\");\n-        FX.name(displayCaret, \"displayCaret\");\n-        displayCaret.selectedProperty().bindBidirectional(control.displayCaretProperty());\n-\n-        CheckBox fatCaret = new CheckBox(\"fat caret\");\n-        FX.name(fatCaret, \"fatCaret\");\n-        fatCaret.selectedProperty().addListener((s, p, on) -> {\n-            Node n = control.lookup(\".caret\");\n-            if (n != null) {\n-                if (on) {\n-                    n.setStyle(\"-fx-stroke-width:2; -fx-stroke:red; -fx-effect:dropshadow(gaussian,rgba(0,0,0,.5),5,0,1,1);\");\n-                } else {\n-                    n.setStyle(null);\n-                }\n-            }\n-        });\n-\n-        CheckBox fastBlink = new CheckBox(\"blink fast\");\n-        FX.name(fastBlink, \"fastBlink\");\n-        fastBlink.selectedProperty().addListener((s,p,on) -> {\n-            control.setCaretBlinkPeriod(on ? Duration.millis(200) : Duration.millis(500));\n-        });\n-\n-        CheckBox highlightCurrentLine = new CheckBox(\"highlight current line\");\n-        FX.name(highlightCurrentLine, \"highlightCurrentLine\");\n-        highlightCurrentLine.selectedProperty().bindBidirectional(control.highlightCurrentParagraphProperty());\n-\n-        Button reloadModelButton = new Button(\"Reload Model\");\n-        reloadModelButton.setOnAction((ev) -> reloadModel());\n-\n-        CheckBox customPopup = new CheckBox(\"custom popup menu\");\n-        FX.name(customPopup, \"customPopup\");\n-        customPopup.selectedProperty().addListener((s, p, v) -> {\n-            setCustomPopup(v);\n-        });\n-\n-        ComboBox<Insets> contentPadding = contentPaddingOption();\n-\n-        ComboBox<Decorator> leftDecorator = new ComboBox<>();\n-        FX.name(leftDecorator, \"leftDecorator\");\n-        leftDecorator.getItems().setAll(Decorator.values());\n-        leftDecorator.getSelectionModel().selectedItemProperty().addListener((s,p,v) -> {\n-            control.setLeftDecorator(createDecorator(v));\n-        });\n-\n-        ComboBox<Decorator> rightDecorator = new ComboBox<>();\n-        FX.name(rightDecorator, \"rightDecorator\");\n-        rightDecorator.getItems().setAll(Decorator.values());\n-        rightDecorator.getSelectionModel().selectedItemProperty().addListener((s,p,v) -> {\n-            control.setRightDecorator(createDecorator(v));\n-        });\n-\n-        CheckBox trackWidth = new CheckBox(\"use content width\");\n-        FX.name(trackWidth, \"trackWidth\");\n-        trackWidth.selectedProperty().bindBidirectional(control.useContentWidthProperty());\n-\n-        CheckBox trackHeight = new CheckBox(\"use content height\");\n-        FX.name(trackHeight, \"trackHeight\");\n-        trackHeight.selectedProperty().bindBidirectional(control.useContentHeightProperty());\n-\n-        Button appendButton = new Button(\"Append\");\n-        FX.tooltip(appendButton, \"appends text to the end of the document\");\n-        appendButton.setOnAction((ev) -> {\n-            StyleAttributeMap heading = StyleAttributeMap.builder().setBold(true).setFontSize(24).build();\n-            StyleAttributeMap plain = StyleAttributeMap.builder().setFontFamily(\"Monospaced\").build();\n-            control.appendText(\"Heading\\n\", heading);\n-            control.appendText(\"Plain monospaced text.\\n\", plain);\n-        });\n-\n-        Button insertButton = new Button(\"Insert\");\n-        FX.tooltip(insertButton, \"inserts text to the start of the document\");\n-        insertButton.setOnAction((ev) -> {\n-            StyleAttributeMap heading = StyleAttributeMap.builder().setBold(true).setFontSize(24).build();\n-            StyleAttributeMap plain = StyleAttributeMap.builder().setFontFamily(\"Monospaced\").build();\n-            control.insertText(TextPos.ZERO, \"Plain monospaced text.\\n\", plain);\n-            control.insertText(TextPos.ZERO, \"Heading\\n\", heading);\n-        });\n-\n-        Button replaceSkin = new Button(\"Replace Skin\");\n-        replaceSkin.setOnAction((ev) -> {\n-            control.setSkin(new RichTextAreaSkin(control));\n-        });\n-\n-        op = new ROptionPane();\n-        op.label(\"Model:\");\n-        op.option(modelField);\n-        op.option(new HBox(insertButton, appendButton));\n-        op.option(editable);\n-        op.option(reloadModelButton);\n-        op.option(wrapText);\n-        op.option(displayCaret);\n-        op.option(fatCaret);\n-        op.option(fastBlink);\n-        op.option(highlightCurrentLine);\n-        op.option(customPopup);\n-        op.label(\"Content Padding:\");\n-        op.option(contentPadding);\n-        op.label(\"Decorators:\");\n-        op.option(leftDecorator);\n-        op.option(rightDecorator);\n-        op.option(trackWidth);\n-        op.option(trackHeight);\n-        op.option(replaceSkin);\n-\n-        setCenter(vsplit);\n-\n-        ScrollPane sp = new ScrollPane(op);\n-        sp.setVbarPolicy(ScrollBarPolicy.AS_NEEDED);\n-        sp.setHbarPolicy(ScrollBarPolicy.NEVER);\n-        setRight(sp);\n-\n-        modelField.getSelectionModel().selectFirst();\n-        leftDecorator.getSelectionModel().selectFirst();\n-        rightDecorator.getSelectionModel().selectFirst();\n-\n-        Platform.runLater(() -> {\n-            \/\/ all this to make sure restore settings works correctly with second window loading the same model\n-            if (globalModel == null) {\n-                globalModel = createModel();\n-            }\n-            control.setModel(globalModel);\n-\n-            modelField.getSelectionModel().selectedItemProperty().addListener((s, p, c) -> {\n-                updateModel();\n-            });\n-        });\n-    }\n-\n-    protected SideDecorator createDecorator(Decorator d) {\n-        if (d != null) {\n-            switch (d) {\n-            case COLORS:\n-                return new DemoColorSideDecorator();\n-            case LINE_NUMBERS:\n-                return new LineNumberDecorator();\n-            }\n-        }\n-        return null;\n-    }\n-\n-    protected void updateModel() {\n-        globalModel = createModel();\n-        control.setModel(globalModel);\n-    }\n-\n-    protected void reloadModel() {\n-        control.setModel(null);\n-        updateModel();\n-    }\n-\n-    private StyledTextModel createModel() {\n-        ModelChoice m = modelField.getSelectionModel().getSelectedItem();\n-        return ModelChoice.create(m);\n-    }\n-\n-    protected static Pane pane() {\n-        Pane p = new Pane();\n-        SplitPane.setResizableWithParent(p, false);\n-        p.setStyle(\"-fx-background-color:#dddddd;\");\n-        return p;\n-    }\n-\n-    public Button addButton(String name, Runnable action) {\n-        Button b = new Button(name);\n-        b.setOnAction((ev) -> {\n-            action.run();\n-        });\n-\n-        toolbar().add(b);\n-        return b;\n-    }\n-\n-    public TBar toolbar() {\n-        if (getTop() instanceof TBar) {\n-            return (TBar)getTop();\n-        }\n-\n-        TBar t = new TBar();\n-        setTop(t);\n-        return t;\n-    }\n-\n-    public Window getWindow() {\n-        Scene s = getScene();\n-        if (s != null) {\n-            return s.getWindow();\n-        }\n-        return null;\n-    }\n-\n-    public void setOptions(Node n) {\n-        setRight(n);\n-    }\n-\n-    protected String generateStylesheet(boolean fat) {\n-        String s = \".rich-text-area .caret { -fx-stroke-width:\" + (fat ? 2 : 1) + \"; }\";\n-        return \"data:text\/css;base64,\" + Base64.getEncoder().encodeToString(s.getBytes(Charset.forName(\"utf-8\")));\n-    }\n-\n-    protected void setCustomPopup(boolean on) {\n-        if (on) {\n-            ContextMenu m = new ContextMenu();\n-            m.getItems().add(new MenuItem(\"Dummy\")); \/\/ otherwise no popup is shown\n-            m.addEventFilter(Menu.ON_SHOWING, (ev) -> {\n-                m.getItems().clear();\n-                populateCustomPopupMenu(m.getItems());\n-            });\n-            control.setContextMenu(m);\n-        } else {\n-            control.setContextMenu(null);\n-        }\n-    }\n-\n-    protected void populateCustomPopupMenu(ObservableList<MenuItem> items) {\n-        boolean sel = control.hasNonEmptySelection();\n-        boolean paste = true; \/\/ would be easier with Actions (findFormatForPaste() != null);\n-        boolean styled = (control.getModel() instanceof RichTextModel);\n-\n-        items.add(new MenuItem(\"★ Custom Context Menu\"));\n-\n-        items.add(new SeparatorMenuItem());\n-\n-        Menu m2;\n-        MenuItem m;\n-        CheckMenuItem cm;\n-        items.add(m = new MenuItem(\"Undo\"));\n-        m.setOnAction((ev) -> control.undo());\n-        m.setDisable(!control.isUndoable());\n-\n-        items.add(m = new MenuItem(\"Redo\"));\n-        m.setOnAction((ev) -> control.redo());\n-        m.setDisable(!control.isRedoable());\n-\n-        items.add(new SeparatorMenuItem());\n-\n-        items.add(m = new MenuItem(\"Cut\"));\n-        m.setOnAction((ev) -> control.cut());\n-        m.setDisable(!sel);\n-\n-        items.add(m = new MenuItem(\"Copy\"));\n-        m.setOnAction((ev) -> control.copy());\n-        m.setDisable(!sel);\n-\n-        items.add(m = m2 = new Menu(\"Copy Special...\"));\n-        {\n-            DataFormat[] fs = control.getModel().getSupportedDataFormats(true);\n-            for (DataFormat f : fs) {\n-                String name = f.toString();\n-                m2.getItems().add(m = new MenuItem(name));\n-                m.setOnAction((ev) -> control.copy(f));\n-            }\n-        }\n-\n-        items.add(m = new MenuItem(\"Paste\"));\n-        m.setOnAction((ev) -> control.paste());\n-        m.setDisable(!paste);\n-\n-        items.add(m = m2 = new Menu(\"Paste Special...\"));\n-        m.setDisable(!paste);\n-        {\n-            DataFormat[] fs = control.getModel().getSupportedDataFormats(false);\n-            for (DataFormat f : fs) {\n-                if (Clipboard.getSystemClipboard().hasContent(f)) {\n-                    String name = f.toString();\n-                    m2.getItems().add(m = new MenuItem(name));\n-                    m2.setOnAction((ev) -> control.paste(f));\n-                    m2.setDisable(!paste);\n-                }\n-            }\n-        }\n-\n-        items.add(m = new MenuItem(\"Paste and Match Style\"));\n-        m.setOnAction((ev) -> control.pastePlainText());\n-        m.setDisable(!paste);\n-\n-        if (styled) {\n-            StyleAttributeMap a = control.getActiveStyleAttributeMap();\n-            items.add(new SeparatorMenuItem());\n-\n-            items.add(m = new MenuItem(\"Bold\"));\n-            m.setOnAction((ev) -> applyStyle(StyleAttributeMap.BOLD, !a.getBoolean(StyleAttributeMap.BOLD)));\n-            m.setDisable(!sel);\n-\n-            items.add(m = new MenuItem(\"Italic\"));\n-            m.setOnAction((ev) -> applyStyle(StyleAttributeMap.ITALIC, !a.getBoolean(StyleAttributeMap.ITALIC)));\n-            m.setDisable(!sel);\n-\n-            items.add(m = new MenuItem(\"Strike Through\"));\n-            m.setOnAction((ev) -> applyStyle(StyleAttributeMap.STRIKE_THROUGH, !a.getBoolean(StyleAttributeMap.STRIKE_THROUGH)));\n-            m.setDisable(!sel);\n-\n-            items.add(m = new MenuItem(\"Underline\"));\n-            m.setOnAction((ev) -> applyStyle(StyleAttributeMap.UNDERLINE, !a.getBoolean(StyleAttributeMap.UNDERLINE)));\n-            m.setDisable(!sel);\n-\n-            items.add(m2 = new Menu(\"Text Color\"));\n-            colorMenu(m2, sel, Color.BLACK);\n-            colorMenu(m2, sel, Color.DARKGRAY);\n-            colorMenu(m2, sel, Color.GRAY);\n-            colorMenu(m2, sel, Color.LIGHTGRAY);\n-            colorMenu(m2, sel, Color.GREEN);\n-            colorMenu(m2, sel, Color.RED);\n-            colorMenu(m2, sel, Color.BLUE);\n-            colorMenu(m2, sel, null);\n-\n-            items.add(m2 = new Menu(\"Text Size\"));\n-            sizeMenu(m2, sel, 96);\n-            sizeMenu(m2, sel, 72);\n-            sizeMenu(m2, sel, 48);\n-            sizeMenu(m2, sel, 36);\n-            sizeMenu(m2, sel, 24);\n-            sizeMenu(m2, sel, 18);\n-            sizeMenu(m2, sel, 16);\n-            sizeMenu(m2, sel, 14);\n-            sizeMenu(m2, sel, 12);\n-            sizeMenu(m2, sel, 10);\n-            sizeMenu(m2, sel, 9);\n-            sizeMenu(m2, sel, 8);\n-            sizeMenu(m2, sel, 6);\n-\n-            items.add(m2 = new Menu(\"Font Family\"));\n-            fontMenu(m2, sel, \"System\");\n-            fontMenu(m2, sel, \"Serif\");\n-            fontMenu(m2, sel, \"Sans-serif\");\n-            fontMenu(m2, sel, \"Cursive\");\n-            fontMenu(m2, sel, \"Fantasy\");\n-            fontMenu(m2, sel, \"Monospaced\");\n-            m2.getItems().add(new SeparatorMenuItem());\n-            fontMenu(m2, sel, \"Arial\");\n-            fontMenu(m2, sel, \"Courier New\");\n-            fontMenu(m2, sel, \"Times New Roman\");\n-            fontMenu(m2, sel, \"null\");\n-        }\n-\n-        if (styled) {\n-            StyleAttributeMap a = control.getActiveStyleAttributeMap();\n-            items.add(new SeparatorMenuItem());\n-\n-            items.add(m2 = new Menu(\"Alignment\"));\n-            alignmentMenu(m2, \"Left\", TextAlignment.LEFT);\n-            alignmentMenu(m2, \"Center\", TextAlignment.CENTER);\n-            alignmentMenu(m2, \"Right\", TextAlignment.RIGHT);\n-            alignmentMenu(m2, \"Justify\", TextAlignment.JUSTIFY);\n-\n-            items.add(m2 = new Menu(\"Line Spacing\"));\n-            lineSpacingMenu(m2, 0);\n-            lineSpacingMenu(m2, 1);\n-            lineSpacingMenu(m2, 10);\n-            lineSpacingMenu(m2, 30);\n-\n-            items.add(m2 = new Menu(\"Space\"));\n-            spaceMenu(m2, \"All\", 30, 30, 30, 30);\n-            spaceMenu(m2, \"Above\", 30, 0, 0, 0);\n-            spaceMenu(m2, \"Below\", 0, 0, 30, 0);\n-            spaceMenu(m2, \"Left\", 0, 0, 0, 30);\n-            spaceMenu(m2, \"Right\", 0, 30, 0, 0);\n-            spaceMenu(m2, \"None\", 0, 0, 0, 0);\n-\n-            items.add(m2 = new Menu(\"Paragraph Direction\"));\n-            directionMenu(m2, \"Left-to-Right\", ParagraphDirection.LEFT_TO_RIGHT);\n-            directionMenu(m2, \"Right-to-Left\", ParagraphDirection.RIGHT_TO_LEFT);\n-            directionMenu(m2, \"<null>\", null);\n-\n-            items.add(m2 = new Menu(\"Background Color\"));\n-            backgroundMenu(m2, \"Red\", Color.RED, 0.2);\n-            backgroundMenu(m2, \"Green\", Color.GREEN, 0.2);\n-            backgroundMenu(m2, \"Blue\", Color.BLUE, 0.2);\n-            backgroundMenu(m2, \"Gray\", Color.GRAY, 1.0);\n-            backgroundMenu(m2, \"Gray 10%\", Color.GRAY, 0.1);\n-            backgroundMenu(m2, \"Gray 20%\", Color.GRAY, 0.2);\n-            backgroundMenu(m2, \"Yellow\", Color.YELLOW, 1.0);\n-\n-            items.add(m2 = new Menu(\"Bullet\"));\n-            bulletMenu(m2, a, \"None\", null);\n-            bulletMenu(m2, a, \"●\", \"●\");\n-            bulletMenu(m2, a, \"○\", \"○\");\n-            bulletMenu(m2, a, \"♣\", \"♣\");\n-\n-            items.add(m2 = new Menu(\"First Line Indent\"));\n-            firstLineIndentMenu(m2, a, 0);\n-            firstLineIndentMenu(m2, a, 10);\n-            firstLineIndentMenu(m2, a, 50);\n-            firstLineIndentMenu(m2, a, 100);\n-        }\n-\n-        items.add(new SeparatorMenuItem());\n-\n-        items.add(m = new MenuItem(\"Select All\"));\n-        m.setOnAction((ev) -> control.selectAll());\n-    }\n-\n-    private void bulletMenu(Menu menu, StyleAttributeMap a, String name, String bullet) {\n-        CheckMenuItem m = new CheckMenuItem(name);\n-        menu.getItems().add(m);\n-        m.setSelected(Objects.equals(bullet, a.getBullet()));\n-        m.setOnAction((ev) -> {\n-            applyStyle(StyleAttributeMap.BULLET, bullet);\n-        });\n-    }\n-\n-    private void firstLineIndentMenu(Menu menu, StyleAttributeMap a, int value) {\n-        CheckMenuItem m = new CheckMenuItem(String.valueOf(value));\n-        menu.getItems().add(m);\n-        Double v = a.getFirstLineIndent();\n-        if (v != null) {\n-            m.setSelected(Objects.equals(value, v.intValue()));\n-        }\n-        m.setOnAction((ev) -> {\n-            applyStyle(StyleAttributeMap.FIRST_LINE_INDENT, (double)value);\n-        });\n-    }\n-\n-    private void alignmentMenu(Menu menu, String name, TextAlignment a) {\n-        MenuItem m = new MenuItem(name);\n-        menu.getItems().add(m);\n-        m.setOnAction((ev) -> {\n-            applyStyle(StyleAttributeMap.TEXT_ALIGNMENT, a);\n-        });\n-    }\n-\n-    private void lineSpacingMenu(Menu menu, double value) {\n-        MenuItem m = new MenuItem(String.valueOf(value));\n-        menu.getItems().add(m);\n-        m.setOnAction((ev) -> {\n-            applyStyle(StyleAttributeMap.LINE_SPACING, value);\n-        });\n-    }\n-\n-    private void directionMenu(Menu menu, String text, ParagraphDirection d) {\n-        MenuItem m = new MenuItem(text);\n-        menu.getItems().add(m);\n-        m.setOnAction((ev) -> {\n-            applyStyle(StyleAttributeMap.PARAGRAPH_DIRECTION, d);\n-        });\n-    }\n-\n-    private void spaceMenu(Menu menu, String name, double top, double right, double bottom, double left) {\n-        MenuItem m = new MenuItem(name);\n-        menu.getItems().add(m);\n-        m.setOnAction((ev) -> {\n-            applyStyle(StyleAttributeMap.SPACE_ABOVE, top);\n-            applyStyle(StyleAttributeMap.SPACE_BELOW, bottom);\n-            applyStyle(StyleAttributeMap.SPACE_LEFT, left);\n-            applyStyle(StyleAttributeMap.SPACE_RIGHT, right);\n-        });\n-    }\n-\n-    private void backgroundMenu(Menu menu, String name, Color color, double alpha) {\n-        Color c = FX.alpha(color, alpha);\n-        MenuItem m = new MenuItem(name);\n-        menu.getItems().add(m);\n-        m.setOnAction((ev) -> {\n-            applyStyle(StyleAttributeMap.BACKGROUND, c);\n-        });\n-    }\n-\n-    private void fontMenu(Menu menu, boolean selected, String family) {\n-        MenuItem m = new MenuItem(family);\n-        m.setDisable(!selected);\n-        m.setOnAction((ev) -> applyStyle(StyleAttributeMap.FONT_FAMILY, family));\n-        menu.getItems().add(m);\n-    }\n-\n-    private void sizeMenu(Menu menu, boolean selected, double size) {\n-        MenuItem m = new MenuItem(String.valueOf(size));\n-        m.setDisable(!selected);\n-        m.setOnAction((ev) -> applyStyle(StyleAttributeMap.FONT_SIZE, size));\n-        menu.getItems().add(m);\n-    }\n-\n-    private void colorMenu(Menu menu, boolean selected, Color color) {\n-        int w = 16;\n-        int h = 16;\n-        Canvas c = new Canvas(w, h);\n-        GraphicsContext g = c.getGraphicsContext2D();\n-        if (color != null) {\n-            g.setFill(color);\n-            g.fillRect(0, 0, w, h);\n-        }\n-        g.setStroke(Color.DARKGRAY);\n-        g.strokeRect(0, 0, w, h);\n-\n-        MenuItem m = new MenuItem(null, c);\n-        m.setDisable(!selected);\n-        m.setOnAction((ev) -> applyStyle(StyleAttributeMap.TEXT_COLOR, color));\n-        menu.getItems().add(m);\n-    }\n-\n-    private <T> void applyStyle(StyleAttribute<T> a, T val) {\n-        TextPos ca = control.getCaretPosition();\n-        TextPos an = control.getAnchorPosition();\n-        StyleAttributeMap m = StyleAttributeMap.of(a, val);\n-        control.applyStyle(ca, an, m);\n-    }\n-\n-    void dumpAccessibilityAttributes() {\n-        TextPos caret = control.getCaretPosition();\n-        if (caret == null) {\n-            return;\n-        }\n-\n-        StringBuilder sb = new StringBuilder();\n-        Object x;\n-        x = control.queryAccessibleAttribute(AccessibleAttribute.LINE_FOR_OFFSET, caret.charIndex());\n-        sb.append(x).append(\"\\n\");\n-        System.out.println(sb.toString());\n-    }\n-\n-    \/** Tool Bar *\/\n-    public static class TBar extends HBox {\n-        public TBar() {\n-            setFillHeight(true);\n-            setAlignment(Pos.CENTER_LEFT);\n-            setSpacing(2);\n-        }\n-\n-        public <T extends Node> T add(T n) {\n-            getChildren().add(n);\n-            return n;\n-        }\n-\n-        public void addAll(Node... nodes) {\n-            for (Node n : nodes) {\n-                add(n);\n-            }\n-        }\n-    }\n-\n-    private ComboBox<Insets> contentPaddingOption() {\n-        ComboBox<Insets> op = new ComboBox<>();\n-        FX.name(op, \"contentPadding\");\n-        op.setConverter(new StringConverter<Insets>() {\n-            @Override\n-            public String toString(Insets x) {\n-                if (x == null) {\n-                    return \"null\";\n-                }\n-                return String.format(\n-                    \"T%d, B%d, L%d, R%d\",\n-                    (int)x.getTop(),\n-                    (int)x.getBottom(),\n-                    (int)x.getLeft(),\n-                    (int)x.getRight()\n-                );\n-            }\n-\n-            @Override\n-            public Insets fromString(String s) {\n-                return null;\n-            }\n-        });\n-        op.getItems().setAll(\n-            null,\n-            new Insets(1),\n-            new Insets(2),\n-            new Insets(10),\n-            new Insets(22.22),\n-            new Insets(50),\n-            new Insets(100),\n-            new Insets(5, 10, 15, 20)\n-        );\n-\n-        selectValue(op, control.getContentPadding());\n-        control.contentPaddingProperty().addListener((s,p,v) -> {\n-            selectValue(op, v);\n-        });\n-\n-        op.getSelectionModel().selectedItemProperty().addListener((s,p,v) -> {\n-            control.setContentPadding(v);\n-        });\n-\n-        return op;\n-    }\n-\n-    private <T> void selectValue(ComboBox<T> c, T value) {\n-        int ix = -1;\n-        for (int i = c.getItems().size() - 1; i >= 0; i--) {\n-            T v = c.getItems().get(i);\n-            if (Objects.equals(v, value)) {\n-                ix = i;\n-                break;\n-            }\n-        }\n-        if (ix < 0) {\n-            ix = c.getItems().size();\n-            c.getItems().add(value);\n-        }\n-        c.getSelectionModel().select(ix);\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/RichTextAreaDemoPane.java","additions":0,"deletions":762,"binary":false,"changes":762,"status":"deleted"},{"patch":"@@ -1,166 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import javafx.application.Platform;\n-import javafx.geometry.Insets;\n-import javafx.geometry.NodeOrientation;\n-import javafx.scene.Scene;\n-import javafx.scene.control.CheckMenuItem;\n-import javafx.scene.control.Label;\n-import javafx.scene.control.MenuBar;\n-import javafx.scene.layout.BorderPane;\n-import javafx.scene.layout.VBox;\n-import javafx.stage.Stage;\n-import com.oracle.demo.richtext.util.FX;\n-import jfx.incubator.scene.control.richtext.RichTextArea;\n-import jfx.incubator.scene.control.richtext.TextPos;\n-\n-\/**\n- * Rich Text Area Demo window.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class RichTextAreaWindow extends Stage {\n-    public final RichTextAreaDemoPane demoPane;\n-    public final Label status;\n-\n-    public RichTextAreaWindow(boolean useContentSize) {\n-        demoPane = new RichTextAreaDemoPane(useContentSize);\n-\n-        CheckMenuItem orientation = new CheckMenuItem(\"Orientation: RTL\");\n-        orientation.setOnAction((ev) -> {\n-            NodeOrientation v = (orientation.isSelected()) ?\n-                NodeOrientation.RIGHT_TO_LEFT :\n-                NodeOrientation.LEFT_TO_RIGHT;\n-            getScene().setNodeOrientation(v);\n-        });\n-        \/\/ TODO save orientation in settings\n-\n-        MenuBar mb = new MenuBar();\n-        \/\/ file\n-        FX.menu(mb, \"_File\");\n-        FX.item(mb, \"New Window\", () -> newWindow(false));\n-        FX.item(mb, \"New Window, Use Content Size\", () -> newWindow(true));\n-        FX.separator(mb);\n-        FX.item(mb, \"Close Window\", this::hide);\n-        FX.separator(mb);\n-        FX.item(mb, \"Quit\", Platform::exit);\n-        \/\/ tools\n-        FX.menu(mb, \"T_ools\");\n-        FX.item(mb, \"CSS Tool\", this::openCssTool);\n-        \/\/ window\n-        FX.menu(mb, \"_Window\");\n-        FX.item(mb, \"Stacked Vertically\", () -> openMultipeStacked(true));\n-        FX.item(mb, \"Stacked Horizontally\", () -> openMultipeStacked(false));\n-        FX.item(mb, \"In a VBox\", this::openInVBox);\n-        FX.separator(mb);\n-        FX.item(mb, orientation);\n-\n-        status = new Label();\n-        status.setPadding(new Insets(2, 10, 2, 10));\n-\n-        BorderPane bp = new BorderPane();\n-        bp.setTop(mb);\n-        bp.setCenter(demoPane);\n-        bp.setBottom(status);\n-\n-        Scene scene = new Scene(bp);\n-        scene.getStylesheets().addAll(\n-            RichTextAreaWindow.class.getResource(\"RichTextAreaDemo.css\").toExternalForm()\n-        );\n-\n-        setScene(scene);\n-        setTitle(\n-            \"RichTextArea Tester FX:\" +\n-            System.getProperty(\"javafx.runtime.version\") +\n-            \"  JDK:\" +\n-            System.getProperty(\"java.version\")\n-        );\n-        setWidth(1200);\n-        setHeight(600);\n-\n-        demoPane.control.caretPositionProperty().addListener((x) -> updateStatus());\n-    }\n-\n-    protected void updateStatus() {\n-        RichTextArea t = demoPane.control;\n-        TextPos p = t.getCaretPosition();\n-\n-        StringBuilder sb = new StringBuilder();\n-\n-        if (p != null) {\n-            sb.append(\" line=\").append(p.index());\n-            sb.append(\" col=\").append(p.offset());\n-            sb.append(p.isLeading() ? \" (leading)\" : \"\");\n-        }\n-\n-        status.setText(sb.toString());\n-    }\n-\n-    protected void newWindow(boolean useContentSize) {\n-        double offset = 20;\n-\n-        RichTextAreaWindow w = new RichTextAreaWindow(useContentSize);\n-        w.setX(getX() + offset);\n-        w.setY(getY() + offset);\n-        w.setWidth(getWidth());\n-        w.setHeight(getHeight());\n-        w.show();\n-    }\n-\n-    protected void openMultipeStacked(boolean vertical) {\n-        new MultipleStackedBoxWindow(vertical).show();\n-    }\n-\n-    protected void openInVBox() {\n-        RichTextArea richTextArea = new RichTextArea();\n-\n-        VBox vb = new VBox();\n-        vb.getChildren().add(richTextArea);\n-\n-        Stage w = new Stage();\n-        w.setScene(new Scene(vb));\n-        w.setTitle(\"RichTextArea in a VBox\");\n-        w.show();\n-    }\n-\n-    protected void openCssTool() {\n-        Stage w = new Stage();\n-        w.setScene(new Scene(new CssToolPane()));\n-        w.setTitle(\"CSS Tool\");\n-        w.setWidth(800);\n-        w.setHeight(600);\n-        w.show();\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/RichTextAreaWindow.java","additions":0,"deletions":166,"binary":false,"changes":166,"status":"deleted"},{"patch":"@@ -1,77 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import java.util.Random;\n-import jfx.incubator.scene.control.richtext.model.SimpleViewOnlyStyledModel;\n-\n-\/**\n- * A test model.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class UnevenStyledTextModel extends SimpleViewOnlyStyledModel {\n-    private Random r = new Random();\n-\n-    public UnevenStyledTextModel(int lineCount) {\n-        float longLineProbability = 0.1f;\n-        for (int i = 0; i < lineCount; i++) {\n-            boolean large = (r.nextFloat() < longLineProbability);\n-            addSegment((large ? \"L.\" : \"S.\") + (i + 1));\n-\n-            if (large) {\n-                add(1000);\n-            } else {\n-                add(10);\n-            }\n-            nl();\n-        }\n-    }\n-\n-    private void add(int count) {\n-        StringBuilder sb = new StringBuilder();\n-\n-        for (int i = 0; i < count; i++) {\n-            int len = r.nextInt(10) + 1;\n-            sb.append(' ');\n-            sb.append(i);\n-            sb.append('.');\n-\n-            for (int j = 0; j < len; j++) {\n-                sb.append('*');\n-            }\n-        }\n-\n-        addSegment(sb.toString());\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/UnevenStyledTextModel.java","additions":0,"deletions":77,"binary":false,"changes":77,"status":"deleted"},{"patch":"@@ -1,195 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-import javafx.application.Application;\n-import javafx.scene.Scene;\n-import javafx.scene.input.KeyCode;\n-import javafx.stage.Stage;\n-import jfx.incubator.scene.control.input.FunctionTag;\n-import jfx.incubator.scene.control.input.KeyBinding;\n-import jfx.incubator.scene.control.richtext.CodeArea;\n-import jfx.incubator.scene.control.richtext.LineNumberDecorator;\n-import jfx.incubator.scene.control.richtext.RichTextArea;\n-import jfx.incubator.scene.control.richtext.TextPos;\n-import jfx.incubator.scene.control.richtext.model.SimpleViewOnlyStyledModel;\n-import jfx.incubator.scene.control.richtext.model.StyleAttributeMap;\n-\n-\/**\n- * The usage examples used in the documentation.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class UsageExamples {\n-    void createViewOnly() {\n-        SimpleViewOnlyStyledModel m = new SimpleViewOnlyStyledModel();\n-        \/\/ add text segment using CSS style name (requires a stylesheet)\n-        m.withStyles(\"RichTextArea \", \"HEADER\");\n-        \/\/ add text segment using inline style\n-        m.withInlineStyle(\"Demo\", \"-fx-font-size:200%;\");\n-        \/\/ newline\n-        m.nl();\n-\n-        RichTextArea textArea = new RichTextArea(m);\n-    }\n-\n-    static RichTextArea appendStyledText() {\n-        \/\/ create styles\n-        StyleAttributeMap heading = StyleAttributeMap.builder().setBold(true).setUnderline(true).setFontSize(18).build();\n-        StyleAttributeMap mono = StyleAttributeMap.builder().setFontFamily(\"Monospaced\").build();\n-\n-        RichTextArea textArea = new RichTextArea();\n-        \/\/ build the content\n-        textArea.appendText(\"RichTextArea\\n\", heading);\n-        textArea.appendText(\"Example:\\nText is \", StyleAttributeMap.EMPTY);\n-        textArea.appendText(\"monospaced.\\n\", mono);\n-        return textArea;\n-    }\n-\n-    void richTextAreaExample() {\n-        RichTextArea textArea = new RichTextArea();\n-        \/\/ insert two paragraphs \"A\" and \"B\"\n-        StyleAttributeMap bold = StyleAttributeMap.builder().setBold(true).build();\n-        textArea.appendText(\"A\\nB\", bold);\n-    }\n-\n-    private static CodeArea codeAreaExample() {\n-        CodeArea codeArea = new CodeArea();\n-        codeArea.setWrapText(true);\n-        codeArea.setLineNumbersEnabled(true);\n-        codeArea.setText(\"Lorem\\nIpsum\");\n-        return codeArea;\n-    }\n-\n-    private static final FunctionTag PRINT_TO_CONSOLE = new FunctionTag();\n-\n-    void customNavigation() {\n-        RichTextArea richTextArea = new RichTextArea();\n-\n-        \/\/ creates a new key binding mapped to an external function\n-        richTextArea.getInputMap().register(KeyBinding.shortcut(KeyCode.W), () -> {\n-            System.out.println(\"console!\");\n-        });\n-\n-        \/\/ unbind old key bindings\n-        var old = richTextArea.getInputMap().getKeyBindingsFor(RichTextArea.Tags.PASTE_PLAIN_TEXT);\n-        for (KeyBinding k : old) {\n-            richTextArea.getInputMap().unbind(k);\n-        }\n-        \/\/ map a new key binding\n-        richTextArea.getInputMap().registerKey(KeyBinding.shortcut(KeyCode.W), RichTextArea.Tags.PASTE_PLAIN_TEXT);\n-\n-        \/\/ redefine a function\n-        richTextArea.getInputMap().registerFunction(RichTextArea.Tags.PASTE_PLAIN_TEXT, () -> { });\n-        richTextArea.pastePlainText(); \/\/ becomes a no-op\n-        \/\/ revert back to the default behavior\n-        richTextArea.getInputMap().restoreDefaultFunction(RichTextArea.Tags.PASTE_PLAIN_TEXT);\n-\n-        \/\/ sets a side decorator\n-        richTextArea.setLeftDecorator(new LineNumberDecorator());\n-\n-        richTextArea.getInputMap().registerFunction(PRINT_TO_CONSOLE, () -> {\n-            \/\/ new functionality\n-            System.out.println(\"PRINT_TO_CONSOLE executed\");\n-        });\n-\n-        \/\/ change the functionality of an existing key binding\n-        richTextArea.getInputMap().registerFunction(RichTextArea.Tags.MOVE_WORD_NEXT_START, () -> {\n-            \/\/ refers to custom logic\n-            TextPos p = getCustomNextWordPosition(richTextArea);\n-            richTextArea.select(p);\n-        });\n-    }\n-\n-    void testGeneric() {\n-        MyControl c = new MyControl();\n-        c.getInputMap().registerFunction(MyControl.MY_TAG, () -> {\n-            c.newFunctionImpl();\n-        });\n-    }\n-\n-    private TextPos getCustomNextWordPosition(RichTextArea richTextArea) {\n-        return null;\n-    }\n-\n-    public static class MyControl extends RichTextArea {\n-        \/\/ function tag allows the user to customize key bindings\n-        public static final FunctionTag MY_TAG = new FunctionTag();\n-\n-        public MyControl() {\n-            \/\/ register custom functionality with the input map\n-            getInputMap().registerFunction(MY_TAG, this::newFunctionImpl);\n-            \/\/ create a key binding\n-            getInputMap().registerKey(KeyBinding.shortcut(KeyCode.W), MY_TAG);\n-        }\n-\n-        public void newFunctionImpl() {\n-            \/\/ custom functionality\n-        }\n-    }\n-\n-    public static class App extends Application {\n-        public App() {\n-            System.out.println(\"test app: F1 appends at the end, F2 inserts at the start, F3 clears selection.\");\n-        }\n-\n-        @Override\n-        public void start(Stage stage) throws Exception {\n-            RichTextArea t = true ? appendStyledText() : codeAreaExample();\n-            stage.setScene(new Scene(t));\n-            t.selectionProperty().addListener((s,p,c) -> {\n-                System.out.println(\"selection: \" + c);\n-            });\n-            t.anchorPositionProperty().addListener((s,p,c) -> {\n-                System.out.println(\"anchor: \" + c);\n-            });\n-            t.caretPositionProperty().addListener((s,p,c) -> {\n-                System.out.println(\"caret: \" + c);\n-            });\n-            t.getInputMap().register(KeyBinding.of(KeyCode.F1), () -> {\n-                t.insertText(TextPos.ZERO, \"F1\", StyleAttributeMap.EMPTY);\n-            });\n-            t.getInputMap().register(KeyBinding.of(KeyCode.F2), () -> {\n-                t.insertText(TextPos.ZERO, \"\\n\", StyleAttributeMap.EMPTY);\n-            });\n-            t.getInputMap().register(KeyBinding.of(KeyCode.F3), () -> {\n-                t.clearSelection();\n-            });\n-            stage.show();\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        App.launch(App.class, args);\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/UsageExamples.java","additions":0,"deletions":195,"binary":false,"changes":195,"status":"deleted"},{"patch":"@@ -1,170 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.rta;\n-\n-\/**\n- * Sample text for testing writing systems support.\n- * See https:\/\/en.wikipedia.org\/wiki\/List_of_writing_systems\n- *\n- * @author Andy Goryachev\n- *\/\n-public class WritingSystemsDemo {\n-    public static final String[] PAIRS = {\n-        \"Arabic\", \"العربية\",\n-        \"Aramaic\", \"Classical Syriac: ܐܪܡܝܐ, Old Aramaic: 𐤀𐤓𐤌𐤉𐤀; Imperial Aramaic: 𐡀𐡓𐡌𐡉𐡀; Jewish Babylonian Aramaic: אֲרָמִית‎\",\n-        \"Akkadian\", \"𒀝𒅗𒁺𒌑\",\n-        \"Armenian\", \"հայերէն\/հայերեն\",\n-        \"Assamese\", \"অসমীয়া\",\n-        \"Awadhi\", \"अवधी\/औधी\",\n-        \"Azerbaijanis\", \"آذربایجانلیلار\",\n-        \"Bagheli\", \"बघेली\",\n-        \"Bagri\", \"बागड़ी, باگڑی\",\n-        \"Bengali\", \"বাংলা\",\n-        \"Bhojpuri\", \"𑂦𑂷𑂔𑂣𑂳𑂩𑂲\",\n-        \"Braille\", \"⠃⠗⠇\",\n-        \"Bundeli\", \"बुन्देली\",\n-        \"Burmese\", \"မြန်မာ\",\n-        \"Cherokee\", \"ᏣᎳᎩ ᎦᏬᏂᎯᏍᏗ\",\n-        \"Chhattisgarhi\", \"छत्तीसगढ़ी, ଛତିଶଗଡ଼ି, ଲରିଆ\",\n-        \"Chinese\", \"中文\",\n-        \"Czech\", \"Čeština\",\n-        \"Devanagari\", \"देवनागरी\",\n-        \"Dhivehi\", \"ދިވެހި\",\n-        \"Dhundhari\", \"ढूण्ढाड़ी\/ઢૂણ્ઢાડ઼ી\",\n-        \"Farsi\", \"فارسی\",\n-        \"Garhwali\", \"गढ़वळि\",\n-        \"Geʽez\", \"ግዕዝ\",\n-        \"Greek\", \"Ελληνικά\",\n-        \"Georgian\", \"ქართული\",\n-        \"Gujarati\", \"ગુજરાતી\",\n-        \"Harauti\", \"हाड़ौती, हाड़ोती\",\n-        \"Haryanvi\", \"हरयाणवी\",\n-        \"Hausa\", \"هَرْشٜن هَوْسَ\",\n-        \"Hebrew\", \"עברית\",\n-        \"Hindi\", \"हिन्दी\",\n-        \"Inuktitut\", \"ᐃᓄᒃᑎᑐᑦ\",\n-        \"Japanese\", \"日本語 かな カナ\",\n-        \"Kangri\", \"कांगड़ी\",\n-        \"Kannada\", \"ಕನ್ನಡ\",\n-        \"Kashmiri\", \"كٲشُرकॉशुर𑆑𑆳𑆯𑆶𑆫𑇀\",\n-        \"Khmer\", \"ខ្មែរ\",\n-        \"Khortha\", \"खोरठा\",\n-        \"Khowar\", \"کھووار زبان\",\n-        \"Korean\", \"한국어\",\n-        \"Kumaoni\", \"कुमाऊँनी\",\n-        \"Kurdish\", \"Kurdî \/ کوردی\",\n-        \"Magahi\", \"𑂧𑂏𑂯𑂲\/𑂧𑂏𑂡𑂲\",\n-        \"Maithili\", \"मैथिली\",\n-        \"Malayalam\", \"മലയാളം\",\n-        \"Malvi\", \"माळवी भाषा \/ માળવી ભાષા\",\n-        \"Marathi\", \"मराठी\",\n-        \"Marwari,\", \"मारवाड़ी\",\n-        \"Meitei\", \"ꯃꯩꯇꯩꯂꯣꯟ\",\n-        \"Mewari\", \"मेवाड़ी\/મેવ઼ાડ઼ી\",\n-        \"Mongolian\", \"ᠨᠢᠷᠤᠭᠤ\",\n-        \"Nimadi\", \"निमाड़ी\",\n-        \"Odia\", \"ଓଡ଼ିଆ\",\n-        \"Pahari\", \"पहाड़ी پہاڑی \",\n-        \"Pashto\", \"پښتو\",\n-        \"Punjabi\", \"ਪੰਜਾਬੀپن٘جابی\",\n-        \"Rajasthani\", \"राजस्थानी\",\n-        \"Russian\", \"Русский\",\n-        \"Sanskrit\", \"संस्कृत-, संस्कृतम्\",\n-        \"Santali\", \"ᱥᱟᱱᱛᱟᱲᱤ\",\n-        \"Sindhi\", \"سِنڌِي‎ • सिन्धी\",\n-        \"Suret\", \"ܣܘܪܝܬ\",\n-        \"Surgujia\", \"सरगुजिया\",\n-        \"Surjapuri\", \"सुरजापुरी, সুরজাপুরী\",\n-        \"Tamil\", \"தமிழ்\",\n-        \"Telugu\", \"తెలుగు\",\n-        \"Thaana\", \"ދިވެހި\",\n-        \"Thai\", \"ไทย\",\n-        \"Tibetan\", \"བོད་\",\n-        \"Tulu\", \"ತುಳು\",\n-        \"Turoyo\", \"ܛܘܪܝܐ\",\n-        \"Ukrainian\", \"Українська\",\n-        \"Urdu\", \"اردو\",\n-        \"Vietnamese\", \"Tiếng Việt\",\n-        \"Yiddish\", \"ייִדיש יידיש  אידיש\"\n-    };\n-\n-    public static String getText() {\n-        return getText(false);\n-    }\n-\n-    public static String getText(boolean showUnicode) {\n-        StringBuilder sb = new StringBuilder();\n-        for (int i = 0; i < PAIRS.length;) {\n-            String a = PAIRS[i++];\n-            String b = PAIRS[i++];\n-            t(sb, a, b, showUnicode);\n-        }\n-        return sb.toString();\n-    }\n-\n-    private static void t(StringBuilder sb, String name, String text, boolean showUnicode) {\n-        sb.append(name);\n-        sb.append(\": \");\n-        sb.append(text);\n-        if (showUnicode) {\n-            sb.append(\" (\");\n-            native2ascii(sb, text);\n-            sb.append(\")\");\n-        }\n-        sb.append(\"\\n\");\n-    }\n-\n-    private static void native2ascii(StringBuilder sb, String text) {\n-        for (char c: text.toCharArray()) {\n-            if (c < 0x20) {\n-                escape(sb, c);\n-            } else if (c > 0x7f) {\n-                escape(sb, c);\n-            } else {\n-                sb.append(c);\n-            }\n-        }\n-    }\n-\n-    private static void escape(StringBuilder sb, char c) {\n-        sb.append(\"\\\\u\");\n-        sb.append(h(c >> 12));\n-        sb.append(h(c >> 8));\n-        sb.append(h(c >> 4));\n-        sb.append(h(c));\n-    }\n-\n-    private static char h(int d) {\n-        return \"0123456789abcdef\".charAt(d & 0x000f);\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/WritingSystemsDemo.java","additions":0,"deletions":170,"binary":false,"changes":170,"status":"deleted"},{"filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/animated.gif","binary":true,"status":"deleted"},{"patch":"@@ -1,240 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-\/\/ This code borrows heavily from the following project, with permission from the author:\n-\/\/ https:\/\/github.com\/andy-goryachev\/FxDock\n-package com.oracle.demo.richtext.settings;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import javafx.animation.KeyFrame;\n-import javafx.animation.Timeline;\n-import javafx.collections.ListChangeListener;\n-import javafx.scene.Node;\n-import javafx.stage.Modality;\n-import javafx.stage.PopupWindow;\n-import javafx.stage.Stage;\n-import javafx.stage.Window;\n-import javafx.util.Duration;\n-\n-\/**\n- * This facility coordinates saving UI settings to and from persistent media.\n- * All the calls, except useProvider(), are expected to happen in an FX application thread.\n- *\n- * When using {@link FxSettingsFileProvider}, the settings file \"ui-settings.properties\"\n- * is placed in the specified directory in the user home.\n- *\n- * TODO handle i\/o errors - set handler?\n- *\n- * @author Andy Goryachev\n- *\/\n-public class FxSettings {\n-    public static final boolean LOG = Boolean.getBoolean(\"FxSettings.LOG\");\n-    private static final Duration SAVE_DELAY = Duration.millis(100);\n-    private static ISettingsProvider provider;\n-    private static boolean save;\n-    private static Timeline saveTimer;\n-\n-    \/** call this in Application.init() *\/\n-    public static synchronized void useProvider(ISettingsProvider p) {\n-        if (provider != null) {\n-            throw new IllegalArgumentException(\"provider is already set\");\n-        }\n-\n-        provider = p;\n-\n-        Window.getWindows().addListener((ListChangeListener.Change<? extends Window> ch) -> {\n-            while (ch.next()) {\n-                if (ch.wasAdded()) {\n-                    for (Window w: ch.getAddedSubList()) {\n-                        handleWindowOpening(w);\n-                    }\n-                } else if (ch.wasRemoved()) {\n-                    for (Window w: ch.getRemoved()) {\n-                        handleWindowClosing(w);\n-                    }\n-                }\n-            }\n-        });\n-\n-        try {\n-            provider.load();\n-        } catch (IOException e) {\n-            throw new Error(e);\n-        }\n-\n-        saveTimer = new Timeline(new KeyFrame(SAVE_DELAY, (ev) -> save()));\n-    }\n-\n-    public static void useDirectory(String dir) {\n-        File d = new File(System.getProperty(\"user.home\"), dir);\n-        useProvider(new FxSettingsFileProvider(d));\n-    }\n-\n-    public static void setName(Window w, String name) {\n-        \/\/ TODO\n-    }\n-\n-    private static void handleWindowOpening(Window w) {\n-        if (w instanceof PopupWindow) {\n-            return;\n-        }\n-\n-        if (w instanceof Stage s) {\n-            if (s.getModality() != Modality.NONE) {\n-                return;\n-            }\n-        }\n-\n-        restoreWindow(w);\n-    }\n-\n-    public static void restoreWindow(Window w) {\n-        WindowMonitor m = WindowMonitor.getFor(w);\n-        if (m != null) {\n-            FxSettingsSchema.restoreWindow(m, w);\n-\n-            Node p = w.getScene().getRoot();\n-            FxSettingsSchema.restoreNode(p);\n-        }\n-    }\n-\n-    private static void handleWindowClosing(Window w) {\n-        if (w instanceof PopupWindow) {\n-            return;\n-        }\n-\n-        storeWindow(w);\n-\n-        boolean last = WindowMonitor.remove(w);\n-        if (last) {\n-            if (saveTimer != null) {\n-                saveTimer.stop();\n-                save();\n-            }\n-        }\n-    }\n-\n-    public static void storeWindow(Window w) {\n-        WindowMonitor m = WindowMonitor.getFor(w);\n-        if (m != null) {\n-            FxSettingsSchema.storeWindow(m, w);\n-\n-            Node p = w.getScene().getRoot();\n-            FxSettingsSchema.storeNode(p);\n-        }\n-    }\n-\n-    public static void set(String key, String value) {\n-        if (provider != null) {\n-            provider.set(key, value);\n-            triggerSave();\n-        }\n-    }\n-\n-    public static String get(String key) {\n-        if (provider == null) {\n-            return null;\n-        }\n-        return provider.get(key);\n-    }\n-\n-    public static void setStream(String key, SStream s) {\n-        if (provider != null) {\n-            provider.set(key, s);\n-            triggerSave();\n-        }\n-    }\n-\n-    public static SStream getStream(String key) {\n-        if (provider == null) {\n-            return null;\n-        }\n-        return provider.getSStream(key);\n-    }\n-\n-    public static void setInt(String key, int value) {\n-        set(key, String.valueOf(value));\n-    }\n-\n-    public static int getInt(String key, int defaultValue) {\n-        String v = get(key);\n-        if (v != null) {\n-            try {\n-                return Integer.parseInt(v);\n-            } catch (NumberFormatException e) {\n-            }\n-        }\n-        return defaultValue;\n-    }\n-\n-    public static void setBoolean(String key, boolean value) {\n-        set(key, String.valueOf(value));\n-    }\n-\n-    public static Boolean getBoolean(String key) {\n-        String v = get(key);\n-        if (v != null) {\n-            if (\"true\".equals(v)) {\n-                return Boolean.TRUE;\n-            } else if (\"false\".equals(v)) {\n-                return Boolean.FALSE;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    private static synchronized void triggerSave() {\n-        save = true;\n-        if (saveTimer != null) {\n-            saveTimer.stop();\n-            saveTimer.play();\n-        }\n-    }\n-\n-    private static void save() {\n-        try {\n-            save = false;\n-            provider.save();\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    public static void restore(Node n) {\n-        FxSettingsSchema.restoreNode(n);\n-    }\n-\n-    public static void store(Node n) {\n-        FxSettingsSchema.storeNode(n);\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/settings\/FxSettings.java","additions":0,"deletions":240,"binary":false,"changes":240,"status":"deleted"},{"patch":"@@ -1,211 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-\/\/ This code borrows heavily from the following project, with permission from the author:\n-\/\/ https:\/\/github.com\/andy-goryachev\/FxDock\n-package com.oracle.demo.richtext.settings;\n-\n-import java.io.BufferedReader;\n-import java.io.BufferedWriter;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n-import java.io.OutputStreamWriter;\n-import java.io.Writer;\n-import java.nio.charset.Charset;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-\n-\/**\n- * Settings provider stores settings as a single file in the specified directory.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class FxSettingsFileProvider implements ISettingsProvider {\n-    private static final char SEP = '=';\n-    private static final String DIV = \",\";\n-    private final File file;\n-    private final HashMap<String, Object> data = new HashMap<>();\n-\n-    public FxSettingsFileProvider(File dir) {\n-        file = new File(dir, \"ui-settings.properties\");\n-    }\n-\n-    @Override\n-    public void load() throws IOException {\n-        if (file.exists() && file.isFile()) {\n-            Charset cs = Charset.forName(\"utf-8\");\n-            try (BufferedReader rd = new BufferedReader(new InputStreamReader(new FileInputStream(file), cs))) {\n-                synchronized (data) {\n-                    read(rd);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void save() throws IOException {\n-        if (file.getParentFile() != null) {\n-            file.getParentFile().mkdirs();\n-        }\n-\n-        Charset cs = Charset.forName(\"utf-8\");\n-        try (Writer wr = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), cs))) {\n-            synchronized (data) {\n-                write(wr);\n-            }\n-        }\n-    }\n-\n-    private void read(BufferedReader rd) throws IOException {\n-        String s;\n-        while ((s = rd.readLine()) != null) {\n-            int ix = s.indexOf(SEP);\n-            if (ix <= 0) {\n-                continue;\n-            }\n-            String k = s.substring(0, ix);\n-            String v = s.substring(ix + 1);\n-            data.put(k, v);\n-        }\n-    }\n-\n-    private void write(Writer wr) throws IOException {\n-        ArrayList<String> keys = new ArrayList<>(data.keySet());\n-        Collections.sort(keys);\n-\n-        for (String k: keys) {\n-            Object v = data.get(k);\n-            wr.write(k);\n-            wr.write(SEP);\n-            wr.write(encode(v));\n-            wr.write(\"\\r\\n\");\n-        }\n-    }\n-\n-    @Override\n-    public void set(String key, String value) {\n-        if (FxSettings.LOG) {\n-            System.out.println(\"FxSettingsFileProvider.set key=\" + key + \" value=\" + value);\n-        }\n-        synchronized (data) {\n-            if (value == null) {\n-                data.remove(key);\n-            } else {\n-                data.put(key, value);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void set(String key, SStream stream) {\n-        if (FxSettings.LOG) {\n-            System.out.println(\"FxSettingsFileProvider.set key=\" + key + \" stream=\" + stream);\n-        }\n-        synchronized (data) {\n-            if (stream == null) {\n-                data.remove(key);\n-            } else {\n-                data.put(key, stream.toArray());\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public String get(String key) {\n-        Object v;\n-        synchronized (data) {\n-            v = data.get(key);\n-        }\n-\n-        String s;\n-        if (v instanceof String) {\n-            s = (String)v;\n-        } else {\n-            s = null;\n-        }\n-\n-        if (FxSettings.LOG) {\n-            System.out.println(\"FxSettingsFileProvider.get key=\" + key + \" value=\" + s);\n-        }\n-        return s;\n-    }\n-\n-    @Override\n-    public SStream getSStream(String key) {\n-        SStream s;\n-        synchronized (data) {\n-            Object v = data.get(key);\n-            if (v instanceof Object[]) {\n-                s = SStream.reader((Object[])v);\n-            } else if (v != null) {\n-                s = parseStream(v.toString());\n-                data.put(key, s.toArray());\n-            } else {\n-                s = null;\n-            }\n-        }\n-\n-        if (FxSettings.LOG) {\n-            System.out.println(\"FxSettingsFileProvider.get key=\" + key + \" stream=\" + s);\n-        }\n-        return s;\n-    }\n-\n-    private static SStream parseStream(String text) {\n-        String[] ss = text.split(DIV);\n-        return SStream.reader(ss);\n-    }\n-\n-    private static String encode(Object x) {\n-        if (x == null) {\n-            return \"\";\n-        } else if (x instanceof Object[] items) {\n-            StringBuilder sb = new StringBuilder();\n-            boolean sep = false;\n-            for (Object item: items) {\n-                if (sep) {\n-                    sb.append(DIV);\n-                } else {\n-                    sep = true;\n-                }\n-                sb.append(item);\n-            }\n-            return sb.toString();\n-        } else {\n-            return x.toString();\n-        }\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/settings\/FxSettingsFileProvider.java","additions":0,"deletions":211,"binary":false,"changes":211,"status":"deleted"},{"patch":"@@ -1,488 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-\/\/ This code borrows heavily from the following project, with permission from the author:\n-\/\/ https:\/\/github.com\/andy-goryachev\/FxDock\n-package com.oracle.demo.richtext.settings;\n-\n-import javafx.beans.value.ChangeListener;\n-import javafx.beans.value.ObservableValue;\n-import javafx.geometry.Rectangle2D;\n-import javafx.scene.Group;\n-import javafx.scene.Node;\n-import javafx.scene.Parent;\n-import javafx.scene.Scene;\n-import javafx.scene.control.CheckBox;\n-import javafx.scene.control.ComboBox;\n-import javafx.scene.control.DialogPane;\n-import javafx.scene.control.ListView;\n-import javafx.scene.control.MenuBar;\n-import javafx.scene.control.ScrollPane;\n-import javafx.scene.control.SplitPane;\n-import javafx.scene.image.ImageView;\n-import javafx.scene.layout.AnchorPane;\n-import javafx.scene.layout.BorderPane;\n-import javafx.scene.layout.FlowPane;\n-import javafx.scene.layout.GridPane;\n-import javafx.scene.layout.HBox;\n-import javafx.scene.layout.Pane;\n-import javafx.scene.layout.Region;\n-import javafx.scene.layout.StackPane;\n-import javafx.scene.layout.TilePane;\n-import javafx.scene.layout.VBox;\n-import javafx.scene.shape.Shape;\n-import javafx.stage.Screen;\n-import javafx.stage.Stage;\n-import javafx.stage.Window;\n-\n-\/**\n- * Constants and methods used to persist settings.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class FxSettingsSchema {\n-    private static final String PREFIX = \"FX.\";\n-    private static final String WINDOW_NORMAL = \"N\";\n-    private static final String WINDOW_ICONIFIED = \"I\";\n-    private static final String WINDOW_MAXIMIZED = \"M\";\n-    private static final String WINDOW_FULLSCREEN = \"F\";\n-    private static final Object NAME_PROP = new Object();\n-\n-    public static void storeWindow(WindowMonitor m, Window w) {\n-        SStream ss = SStream.writer();\n-        ss.add(m.getX());\n-        ss.add(m.getY());\n-        ss.add(m.getWidth());\n-        ss.add(m.getHeight());\n-        if (w instanceof Stage s) {\n-            if (s.isIconified()) {\n-                ss.add(WINDOW_ICONIFIED);\n-            } else if (s.isMaximized()) {\n-                ss.add(WINDOW_MAXIMIZED);\n-            } else if (s.isFullScreen()) {\n-                ss.add(WINDOW_FULLSCREEN);\n-            } else {\n-                ss.add(WINDOW_NORMAL);\n-            }\n-        }\n-        FxSettings.setStream(PREFIX + m.getID(), ss);\n-    }\n-\n-    public static void restoreWindow(WindowMonitor m, Window win) {\n-        SStream ss = FxSettings.getStream(PREFIX + m.getID());\n-        if (ss == null) {\n-            return;\n-        }\n-\n-        double x = ss.nextDouble(-1);\n-        double y = ss.nextDouble(-1);\n-        double w = ss.nextDouble(-1);\n-        double h = ss.nextDouble(-1);\n-        String t = ss.nextString(WINDOW_NORMAL);\n-\n-        if ((w > 0) && (h > 0)) {\n-            if (isValid(x, y)) {\n-                win.setX(x);\n-                win.setY(y);\n-            }\n-\n-            if (win instanceof Stage s) {\n-                if (s.isResizable()) {\n-                    s.setWidth(w);\n-                    s.setHeight(h);\n-                }\n-\n-                switch (t) {\n-                case WINDOW_FULLSCREEN:\n-                    s.setFullScreen(true);\n-                    break;\n-                case WINDOW_MAXIMIZED:\n-                    s.setMaximized(true);\n-                    break;\n-                \/\/ TODO iconified?\n-                }\n-            }\n-        }\n-    }\n-\n-    private static boolean isValid(double x, double y) {\n-        for (Screen s: Screen.getScreens()) {\n-            Rectangle2D r = s.getVisualBounds();\n-            if (r.contains(x, y)) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    private static String computeName(Node n) {\n-        WindowMonitor m = WindowMonitor.getFor(n);\n-        if (m == null) {\n-            return null;\n-        }\n-\n-        StringBuilder sb = new StringBuilder();\n-        if (collectNames(sb, n)) {\n-            return null;\n-        }\n-\n-        String id = m.getID();\n-        return id + sb;\n-    }\n-\n-    \/\/ returns true if Node should be ignored\n-    private static boolean collectNames(StringBuilder sb, Node n) {\n-        if (n instanceof MenuBar) {\n-            return true;\n-        } else if (n instanceof Shape) {\n-            return true;\n-        } else if (n instanceof ImageView) {\n-            return true;\n-        }\n-\n-        Parent p = n.getParent();\n-        if (p != null) {\n-            if (collectNames(sb, p)) {\n-                return true;\n-            }\n-        }\n-\n-        String name = getNodeName(n);\n-        if (name == null) {\n-            return true;\n-        }\n-\n-        sb.append('.');\n-        sb.append(name);\n-        return false;\n-    }\n-\n-    private static String getNodeName(Node n) {\n-        if (n != null) {\n-            String name = getName(n);\n-            if (name != null) {\n-                return name;\n-            }\n-\n-            if (n instanceof Pane) {\n-                if (n instanceof AnchorPane) {\n-                    return \"AnchorPane\";\n-                } else if (n instanceof BorderPane) {\n-                    return \"BorderPane\";\n-                } else if (n instanceof DialogPane) {\n-                    return \"DialogPane\";\n-                } else if (n instanceof FlowPane) {\n-                    return \"FlowPane\";\n-                } else if (n instanceof GridPane) {\n-                    return \"GridPane\";\n-                } else if (n instanceof HBox) {\n-                    return \"HBox\";\n-                } else if (n instanceof StackPane) {\n-                    return \"StackPane\";\n-                } else if (n instanceof TilePane) {\n-                    return \"TilePane\";\n-                } else if (n instanceof VBox) {\n-                    return \"VBox\";\n-                } else {\n-                    return \"Pane\";\n-                }\n-            } else if (n instanceof Group) {\n-                return \"Group\";\n-            } else if (n instanceof Region) {\n-                return \"Region\";\n-            }\n-        }\n-        return null;\n-    }\n-\n-    public static void storeNode(Node n) {\n-        if (n instanceof ListView lv) {\n-            storeListView(lv);\n-            return;\n-        } else if (n instanceof ComboBox cb) {\n-            storeComboBox(cb);\n-            return;\n-        } else if (n instanceof CheckBox cb) {\n-            storeCheckBox(cb);\n-            return;\n-        } else if (n instanceof SplitPane sp) {\n-            storeSplitPane(sp);\n-            return;\n-        } else if (n instanceof ScrollPane sp) {\n-            storeNode(sp.getContent());\n-            return;\n-        }\n-\n-        if (n instanceof Parent p) {\n-            for (Node ch: p.getChildrenUnmodifiable()) {\n-                storeNode(ch);\n-            }\n-        }\n-    }\n-\n-    public static void restoreNode(Node n) {\n-        if (checkNoScene(n)) {\n-            return;\n-        }\n-\n-        if (n instanceof ListView lv) {\n-            restoreListView(lv);\n-        } else if (n instanceof ComboBox cb) {\n-            restoreComboBox(cb);\n-        } else if (n instanceof CheckBox cb) {\n-            restoreCheckBox(cb);\n-        } else if (n instanceof SplitPane sp) {\n-            restoreSplitPane(sp);\n-        } else if (n instanceof ScrollPane sp) {\n-            restoreNode(sp.getContent());\n-        }\n-\n-        if (n instanceof Parent p) {\n-            for (Node ch: p.getChildrenUnmodifiable()) {\n-                restoreNode(ch);\n-            }\n-        }\n-    }\n-\n-    private static void storeSplitPane(SplitPane sp) {\n-        double[] div = sp.getDividerPositions();\n-        SStream ss = SStream.writer();\n-        ss.add(div.length);\n-        for (int i = 0; i < div.length; i++) {\n-            ss.add(div[i]);\n-        }\n-        String name = computeName(sp);\n-        FxSettings.setStream(PREFIX + name, ss);\n-\n-        for (Node ch: sp.getItems()) {\n-            storeNode(ch);\n-        }\n-    }\n-\n-    private static void restoreSplitPane(SplitPane sp) {\n-        for (Node ch: sp.getItems()) {\n-            restoreNode(ch);\n-        }\n-\n-        \/** FIX getting smaller and smaller\n-        String name = getName(m, sp);\n-        SStream ss = FxSettings.getStream(PREFIX + name);\n-        if (ss != null) {\n-            int ct = ss.nextInt(-1);\n-            if (ct > 0) {\n-                for (int i = 0; i < ct; i++) {\n-                    double div = ss.nextDouble(-1);\n-                    if (div < 0) {\n-                        break;\n-                    }\n-                    sp.setDividerPosition(i, div);\n-                }\n-            }\n-        }\n-        *\/\n-    }\n-\n-    private static void storeComboBox(ComboBox n) {\n-        if (n.getSelectionModel() == null) {\n-            return;\n-        }\n-\n-        int ix = n.getSelectionModel().getSelectedIndex();\n-        if (ix < 0) {\n-            return;\n-        }\n-\n-        String name = computeName(n);\n-        if (name == null) {\n-            return;\n-        }\n-\n-        FxSettings.setInt(PREFIX + name, ix);\n-    }\n-\n-    \/\/ TODO perhaps operate with selection model instead\n-    private static void restoreComboBox(ComboBox n) {\n-        if (n.getSelectionModel() == null) {\n-            return;\n-        }\n-\n-        if (checkNoScene(n)) {\n-            return;\n-        }\n-\n-        String name = computeName(n);\n-        if (name == null) {\n-            return;\n-        }\n-\n-        int ix = FxSettings.getInt(PREFIX + name, -1);\n-        if (ix < 0) {\n-            return;\n-        } else if (ix >= n.getItems().size()) {\n-            return;\n-        }\n-\n-        n.getSelectionModel().select(ix);\n-    }\n-\n-    private static boolean checkNoScene(Node node) {\n-        if (node == null) {\n-            return true;\n-        } else if (node.getScene() == null) {\n-            \/\/ delay restore until node becomes a part of the scene\n-            node.sceneProperty().addListener(new ChangeListener<Scene>() {\n-                @Override\n-                public void changed(ObservableValue<? extends Scene> src, Scene old, Scene scene) {\n-                    if (scene != null) {\n-                        Window w = scene.getWindow();\n-                        if (w != null) {\n-                            node.sceneProperty().removeListener(this);\n-                            restoreNode(node);\n-                        }\n-                    }\n-                }\n-            });\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    private static void storeListView(ListView n) {\n-        if (n.getSelectionModel() == null) {\n-            return;\n-        }\n-\n-        int ix = n.getSelectionModel().getSelectedIndex();\n-        if (ix < 0) {\n-            return;\n-        }\n-\n-        String name = computeName(n);\n-        if (name == null) {\n-            return;\n-        }\n-\n-        FxSettings.setInt(PREFIX + name, ix);\n-    }\n-\n-    private static void restoreListView(ListView n) {\n-        if (n.getSelectionModel() == null) {\n-            return;\n-        }\n-\n-        if (checkNoScene(n)) {\n-            return;\n-        }\n-\n-        String name = computeName(n);\n-        if (name == null) {\n-            return;\n-        }\n-\n-        int ix = FxSettings.getInt(PREFIX + name, -1);\n-        if (ix < 0) {\n-            return;\n-        } else if (ix >= n.getItems().size()) {\n-            return;\n-        }\n-\n-        n.getSelectionModel().select(ix);\n-    }\n-\n-    private static void storeCheckBox(CheckBox n) {\n-        String name = computeName(n);\n-        if (name == null) {\n-            return;\n-        }\n-\n-        boolean sel = n.isSelected();\n-        FxSettings.setBoolean(PREFIX + name, sel);\n-    }\n-\n-    private static void restoreCheckBox(CheckBox n) {\n-        if (checkNoScene(n)) {\n-            return;\n-        }\n-\n-        String name = computeName(n);\n-        if (name == null) {\n-            return;\n-        }\n-\n-        Boolean sel = FxSettings.getBoolean(PREFIX + name);\n-        if (sel == null) {\n-            return;\n-        }\n-\n-        n.setSelected(sel);\n-    }\n-\n-    \/** sets the name for the purposes of storing user preferences *\/\n-    public static void setName(Node n, String name) {\n-        n.getProperties().put(NAME_PROP, name);\n-    }\n-\n-    \/** sets the name for the purposes of storing user preferences *\/\n-    public static void setName(Window w, String name) {\n-        w.getProperties().put(NAME_PROP, name);\n-    }\n-\n-    \/**\n-     * Returns the name for the purposes of storing user preferences,\n-     * set previously by {@link #setName(Node, String)},\n-     * or null.\n-     *\/\n-    public static String getName(Node n) {\n-        if (n != null) {\n-            Object x = n.getProperties().get(NAME_PROP);\n-            if (x instanceof String s) {\n-                return s;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    \/**\n-     * Returns the name for the purposes of storing user preferences,\n-     * set previously by {@link #setName(Window, String)},\n-     * or null.\n-     *\/\n-    public static String getName(Window w) {\n-        if (w != null) {\n-            Object x = w.getProperties().get(NAME_PROP);\n-            if (x instanceof String s) {\n-                return s;\n-            }\n-        }\n-        return null;\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/settings\/FxSettingsSchema.java","additions":0,"deletions":488,"binary":false,"changes":488,"status":"deleted"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-\/\/ This code borrows heavily from the following project, with permission from the author:\n-\/\/ https:\/\/github.com\/andy-goryachev\/FxDock\n-package com.oracle.demo.richtext.settings;\n-\n-import java.io.IOException;\n-\n-\/**\n- * Defines the interface for storing and loading of settings.\n- *\n- * @author Andy Goryachev\n- *\/\n-public interface ISettingsProvider {\n-    \/**\n-     * Loads settings from persistent storage, if needed.\n-     * @throws IOException\n-     *\/\n-    public void load() throws IOException;\n-\n-    \/**\n-     * Saves the settings to persistent media, if needed.\n-     * @throws IOException\n-     *\/\n-    public void save() throws IOException;\n-\n-    \/**\n-     * Sets a key-value pair.\n-     *\/\n-    public void set(String key, String value);\n-\n-    \/**\n-     * Sets a key-value pair where value is a SStream.\n-     *\/\n-    public void set(String key, SStream s);\n-\n-    \/**\n-     * Retrieves a String value for the specific key\n-     *\/\n-    public String get(String key);\n-\n-    \/**\n-     * Retrieves a SStream value for the specific key\n-     *\/\n-    public SStream getSStream(String key);\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/settings\/ISettingsProvider.java","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -1,156 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.settings;\n-\n-import java.util.ArrayList;\n-\n-\/**\n- * Represents a string property as a stream of objects.\n- *\n- * @author Andy Goryachev\n- *\/\n-public abstract class SStream {\n-\n-    public abstract Object[] toArray();\n-\n-    private SStream() {\n-    }\n-\n-    public static SStream writer() {\n-        return new SStream() {\n-            private ArrayList<Object> items = new ArrayList<>();\n-\n-            @Override\n-            protected void addValue(Object x) {\n-                items.add(x);\n-            }\n-\n-            @Override\n-            public Object[] toArray() {\n-                return items.toArray();\n-            }\n-        };\n-    }\n-\n-    public static SStream reader(Object[] items) {\n-        return new SStream() {\n-            int index;\n-\n-            @Override\n-            protected Object nextValue() {\n-                if (index >= items.length) {\n-                    return null;\n-                }\n-                return items[index++];\n-            }\n-\n-            @Override\n-            public Object[] toArray() {\n-                return items;\n-            }\n-        };\n-    }\n-\n-    public void add(int x) {\n-        addValue(x);\n-    }\n-\n-    public void add(double x) {\n-        addValue(x);\n-    }\n-\n-    public void add(String x) {\n-        addValue(x);\n-    }\n-\n-    protected void addValue(Object x) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    protected Object nextValue() {\n-        throw new UnsupportedOperationException();\n-    }\n-\n-    public final String nextString(String defaultValue) {\n-        Object v = nextValue();\n-        if (v instanceof String s) {\n-            return s;\n-        }\n-        return defaultValue;\n-    }\n-\n-    public final double nextDouble(double defaultValue) {\n-        Object v = nextValue();\n-        if (v instanceof String s) {\n-            try {\n-                return Double.parseDouble(s);\n-            } catch (NumberFormatException e) {\n-                \/\/ ignore\n-            }\n-        } else if (v instanceof Double d) {\n-            return d;\n-        }\n-        return defaultValue;\n-    }\n-\n-    public final int nextInt(int defaultValue) {\n-        Object v = nextValue();\n-        if (v instanceof String s) {\n-            try {\n-                return Integer.parseInt(s);\n-            } catch (NumberFormatException e) {\n-                \/\/ ignore\n-            }\n-        } else if (v instanceof Integer d) {\n-            return d;\n-        }\n-        return defaultValue;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        StringBuilder sb = new StringBuilder(64);\n-        sb.append(\"[\");\n-        boolean sep = false;\n-        for (Object x: toArray()) {\n-            if (sep) {\n-                sb.append(\",\");\n-            } else {\n-                sep = true;\n-            }\n-            sb.append(x);\n-        }\n-        sb.append(\"]\");\n-        return sb.toString();\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/settings\/SStream.java","additions":0,"deletions":156,"binary":false,"changes":156,"status":"deleted"},{"patch":"@@ -1,211 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-\/\/ This code borrows heavily from the following project, with permission from the author:\n-\/\/ https:\/\/github.com\/andy-goryachev\/FxDock\n-package com.oracle.demo.richtext.settings;\n-\n-import java.util.HashSet;\n-import java.util.WeakHashMap;\n-import javafx.scene.Node;\n-import javafx.scene.Scene;\n-import javafx.stage.Stage;\n-import javafx.stage.Window;\n-\n-\/**\n- * Stage does not keep track of its normal bounds when minimized, maximized, or switched to full screen.\n- *\n- * @author Andy Goryachev\n- *\/\n-class WindowMonitor {\n-    private final String id;\n-    private double x;\n-    private double y;\n-    private double width;\n-    private double height;\n-    private double x2;\n-    private double y2;\n-    private double w2;\n-    private double h2;\n-    private static final WeakHashMap<Window, WindowMonitor> monitors = new WeakHashMap<>(4);\n-\n-    public WindowMonitor(Window w, String id) {\n-        this.id = id;\n-\n-        x = w.getX();\n-        y = w.getY();\n-        width = w.getWidth();\n-        height = w.getHeight();\n-\n-        w.xProperty().addListener((p) -> updateX(w));\n-        w.yProperty().addListener((p) -> updateY(w));\n-        w.widthProperty().addListener((p) -> updateWidth(w));\n-        w.heightProperty().addListener((p) -> updateHeight(w));\n-\n-        if (w instanceof Stage s) {\n-            s.iconifiedProperty().addListener((p) -> updateIconified(s));\n-            s.maximizedProperty().addListener((p) -> updateMaximized(s));\n-            s.fullScreenProperty().addListener((p) -> updateFullScreen(s));\n-        }\n-    }\n-\n-    public String getID() {\n-        return id;\n-    }\n-\n-    public double getX() {\n-        return x;\n-    }\n-\n-    public double getY() {\n-        return y;\n-    }\n-\n-    public double getWidth() {\n-        return width;\n-    }\n-\n-    public double getHeight() {\n-        return height;\n-    }\n-\n-    private void updateX(Window w) {\n-        x2 = x;\n-        x = w.getX();\n-    }\n-\n-    private void updateY(Window w) {\n-        y2 = y;\n-        y = w.getY();\n-    }\n-\n-    private void updateWidth(Window w) {\n-        w2 = width;\n-        width = w.getWidth();\n-    }\n-\n-    private void updateHeight(Window w) {\n-        h2 = height;\n-        height = w.getHeight();\n-    }\n-\n-    private void updateIconified(Stage s) {\n-        if (s.isIconified()) {\n-            x = x2;\n-            y = y2;\n-        }\n-    }\n-\n-    private void updateMaximized(Stage s) {\n-        if (s.isMaximized()) {\n-            x = x2;\n-            y = y2;\n-        }\n-    }\n-\n-    private void updateFullScreen(Stage s) {\n-        if (s.isFullScreen()) {\n-            x = x2;\n-            y = y2;\n-            width = w2;\n-            height = h2;\n-        }\n-    }\n-\n-    public static WindowMonitor getFor(Window w) {\n-        if (w == null) {\n-            return null;\n-        }\n-        WindowMonitor m = monitors.get(w);\n-        if (m == null) {\n-            String id = createID(w);\n-            if (id == null) {\n-                return null;\n-            }\n-            m = new WindowMonitor(w, id);\n-            monitors.put(w, m);\n-        }\n-        return m;\n-    }\n-\n-    public static WindowMonitor getFor(Node n) {\n-        Window w = windowFor(n);\n-        if (w != null) {\n-            return getFor(w);\n-        }\n-        return null;\n-    }\n-\n-    private static Window windowFor(Node n) {\n-        Scene sc = n.getScene();\n-        if (sc != null) {\n-            Window w = sc.getWindow();\n-            if (w != null) {\n-                return w;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    private static String createID(Window win) {\n-        String prefix = FxSettingsSchema.getName(win) + \".\";\n-        HashSet<String> ids = new HashSet<>();\n-        for (Window w: Window.getWindows()) {\n-            if (w == win) {\n-                continue;\n-            }\n-            WindowMonitor m = monitors.get(w);\n-            if (m == null) {\n-                return null;\n-            }\n-            String id = m.getID();\n-            if (id.startsWith(prefix)) {\n-                ids.add(id);\n-            }\n-        }\n-\n-        for (int i = 0; i < 100_000; i++) {\n-            String id = prefix + i;\n-            if (!ids.contains(id)) {\n-                return id;\n-            }\n-        }\n-\n-        \/\/ safeguard measure\n-        throw new Error(\"cannot create id: too many windows?\");\n-    }\n-\n-    public static boolean remove(Window w) {\n-        monitors.remove(w);\n-        return monitors.size() == 0;\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/settings\/WindowMonitor.java","additions":0,"deletions":211,"binary":false,"changes":211,"status":"deleted"},{"patch":"@@ -1,451 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package com.oracle.demo.richtext.util;\n-\n-import java.util.List;\n-import java.util.function.Consumer;\n-import java.util.function.Supplier;\n-import javafx.application.Platform;\n-import javafx.css.PseudoClass;\n-import javafx.event.EventHandler;\n-import javafx.scene.Node;\n-import javafx.scene.Scene;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.CheckMenuItem;\n-import javafx.scene.control.ComboBox;\n-import javafx.scene.control.ContextMenu;\n-import javafx.scene.control.Control;\n-import javafx.scene.control.Menu;\n-import javafx.scene.control.MenuBar;\n-import javafx.scene.control.MenuItem;\n-import javafx.scene.control.RadioMenuItem;\n-import javafx.scene.control.SeparatorMenuItem;\n-import javafx.scene.control.ToggleButton;\n-import javafx.scene.control.ToggleGroup;\n-import javafx.scene.control.ToolBar;\n-import javafx.scene.control.Tooltip;\n-import javafx.scene.input.KeyCombination;\n-import javafx.scene.input.MouseEvent;\n-import javafx.scene.layout.GridPane;\n-import javafx.scene.layout.Pane;\n-import javafx.scene.paint.Color;\n-import javafx.stage.Stage;\n-import javafx.stage.Window;\n-import com.oracle.demo.richtext.settings.FxSettingsSchema;\n-\n-\/**\n- * Shortcuts and convenience methods that perhaps could be added to JavaFX.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class FX {\n-    public static Menu menu(MenuBar b, String text) {\n-        Menu m = new Menu(text);\n-        applyMnemonic(m);\n-        b.getMenus().add(m);\n-        return m;\n-    }\n-\n-    public static Menu menu(ContextMenu b, String text) {\n-        Menu m = new Menu(text);\n-        applyMnemonic(m);\n-        b.getItems().add(m);\n-        return m;\n-    }\n-\n-    public static MenuItem item(MenuBar b, String text, Runnable action) {\n-        MenuItem mi = new MenuItem(text);\n-        applyMnemonic(mi);\n-        mi.setOnAction((ev) -> action.run());\n-        lastMenu(b).getItems().add(mi);\n-        return mi;\n-    }\n-\n-    public static MenuItem item(MenuBar b, MenuItem mi) {\n-        applyMnemonic(mi);\n-        lastMenu(b).getItems().add(mi);\n-        return mi;\n-    }\n-\n-    public static MenuItem item(MenuBar b, String text) {\n-        MenuItem mi = new MenuItem(text);\n-        mi.setDisable(true);\n-        applyMnemonic(mi);\n-        lastMenu(b).getItems().add(mi);\n-        return mi;\n-    }\n-\n-    public static MenuItem item(MenuBar b, String text, FxAction a) {\n-        MenuItem mi = new MenuItem(text);\n-        applyMnemonic(mi);\n-        lastMenu(b).getItems().add(mi);\n-        a.attach(mi);\n-        return mi;\n-    }\n-\n-    public static CheckMenuItem checkItem(MenuBar b, String text, FxAction a) {\n-        CheckMenuItem mi = new CheckMenuItem(text);\n-        applyMnemonic(mi);\n-        lastMenu(b).getItems().add(mi);\n-        a.attach(mi);\n-        return mi;\n-    }\n-\n-    public static MenuItem item(ContextMenu cm, String text, FxAction a) {\n-        MenuItem mi = new MenuItem(text);\n-        applyMnemonic(mi);\n-        cm.getItems().add(mi);\n-        a.attach(mi);\n-        return mi;\n-    }\n-\n-    public static MenuItem item(ContextMenu cm, String text) {\n-        MenuItem mi = new MenuItem(text);\n-        mi.setDisable(true);\n-        applyMnemonic(mi);\n-        cm.getItems().add(mi);\n-        return mi;\n-    }\n-\n-    public static MenuItem item(Menu b, String text) {\n-        MenuItem mi = new MenuItem(text);\n-        mi.setDisable(true);\n-        applyMnemonic(mi);\n-        b.getItems().add(mi);\n-        return mi;\n-    }\n-\n-    public static MenuItem item(Menu b, String text, Runnable r) {\n-        MenuItem mi = new MenuItem(text);\n-        mi.setOnAction((ev) -> r.run());\n-        applyMnemonic(mi);\n-        b.getItems().add(mi);\n-        return mi;\n-    }\n-\n-    public static Menu submenu(MenuBar b, String text) {\n-        Menu m = new Menu(text);\n-        applyMnemonic(m);\n-        lastMenu(b).getItems().add(m);\n-        return m;\n-    }\n-\n-    private static void applyMnemonic(MenuItem m) {\n-        String text = m.getText();\n-        if (text != null) {\n-            if (text.contains(\"_\")) {\n-                m.setMnemonicParsing(true);\n-            }\n-        }\n-    }\n-\n-    private static Menu lastMenu(MenuBar b) {\n-        List<Menu> ms = b.getMenus();\n-        return ms.get(ms.size() - 1);\n-    }\n-\n-    public static SeparatorMenuItem separator(MenuBar b) {\n-        SeparatorMenuItem s = new SeparatorMenuItem();\n-        lastMenu(b).getItems().add(s);\n-        return s;\n-    }\n-\n-    public static SeparatorMenuItem separator(ContextMenu m) {\n-        SeparatorMenuItem s = new SeparatorMenuItem();\n-        m.getItems().add(s);\n-        return s;\n-    }\n-\n-    public static RadioMenuItem radio(MenuBar b, String text, KeyCombination accelerator, ToggleGroup g) {\n-        RadioMenuItem mi = new RadioMenuItem(text);\n-        mi.setAccelerator(accelerator);\n-        mi.setToggleGroup(g);\n-        lastMenu(b).getItems().add(mi);\n-        return mi;\n-    }\n-\n-    public static CheckMenuItem checkItem(ContextMenu c, String name, boolean selected, Consumer<Boolean> client) {\n-        CheckMenuItem m = new CheckMenuItem(name);\n-        m.setSelected(selected);\n-        m.setOnAction((ev) -> {\n-            boolean on = m.isSelected();\n-            client.accept(on);\n-        });\n-        c.getItems().add(m);\n-        return m;\n-    }\n-\n-    public static CheckMenuItem checkItem(Menu c, String name, boolean selected, Consumer<Boolean> client) {\n-        CheckMenuItem m = new CheckMenuItem(name);\n-        m.setSelected(selected);\n-        m.setOnAction((ev) -> {\n-            boolean on = m.isSelected();\n-            client.accept(on);\n-        });\n-        c.getItems().add(m);\n-        return m;\n-    }\n-\n-    public static ToggleButton toggleButton(ToolBar t, String text, FxAction a) {\n-        ToggleButton b = new ToggleButton(text);\n-        a.attach(b);\n-        t.getItems().add(b);\n-        return b;\n-    }\n-\n-    public static ToggleButton toggleButton(ToolBar t, String text, String tooltip, FxAction a) {\n-        ToggleButton b = new ToggleButton(text);\n-        b.setTooltip(new Tooltip(tooltip));\n-        a.attach(b);\n-        t.getItems().add(b);\n-        return b;\n-    }\n-\n-    public static ToggleButton toggleButton(ToolBar t, String text, String tooltip) {\n-        ToggleButton b = new ToggleButton(text);\n-        b.setTooltip(new Tooltip(tooltip));\n-        b.setDisable(true);\n-        t.getItems().add(b);\n-        return b;\n-    }\n-\n-    public static Button button(ToolBar t, String text, String tooltip, FxAction a) {\n-        Button b = new Button(text);\n-        b.setTooltip(new Tooltip(tooltip));\n-        a.attach(b);\n-        t.getItems().add(b);\n-        return b;\n-    }\n-\n-    public static Button button(ToolBar t, String text, String tooltip) {\n-        Button b = new Button(text);\n-        b.setTooltip(new Tooltip(tooltip));\n-        b.setDisable(true);\n-        t.getItems().add(b);\n-        return b;\n-    }\n-\n-    public static <N extends Node> N add(ToolBar t, N child) {\n-        t.getItems().add(child);\n-        return child;\n-    }\n-\n-    public static void space(ToolBar t) {\n-        Pane p = new Pane();\n-        p.setPrefSize(10, 10);\n-        t.getItems().add(p);\n-    }\n-\n-    public static void tooltip(Control c, String text) {\n-        c.setTooltip(new Tooltip(text));\n-    }\n-\n-    public static void add(GridPane p, Node n, int col, int row) {\n-        p.getChildren().add(n);\n-        GridPane.setConstraints(n, col, row);\n-    }\n-\n-    public static <T> void select(ComboBox<T> cb, T value) {\n-        cb.getSelectionModel().select(value);\n-    }\n-\n-    public static <T> void selectFirst(ComboBox<T> cb) {\n-        cb.getSelectionModel().selectFirst();\n-    }\n-\n-    public static <T> T getSelectedItem(ComboBox<T> cb) {\n-        return cb.getSelectionModel().getSelectedItem();\n-    }\n-\n-    public static Window getParentWindow(Object nodeOrWindow) {\n-        if (nodeOrWindow == null) {\n-            return null;\n-        } else if (nodeOrWindow instanceof Window w) {\n-            return w;\n-        } else if (nodeOrWindow instanceof Node n) {\n-            Scene s = n.getScene();\n-            if (s != null) {\n-                return s.getWindow();\n-            }\n-            return null;\n-        } else {\n-            throw new Error(\"Node or Window only\");\n-        }\n-    }\n-\n-    \/** cascades the window relative to its owner, if any *\/\n-    public static void cascade(Stage w) {\n-        if (w != null) {\n-            Window p = w.getOwner();\n-            if (p != null) {\n-                double x = p.getX();\n-                double y = p.getY();\n-                double off = 20;\n-                w.setX(x + off);\n-                w.setY(y + off);\n-            }\n-        }\n-    }\n-\n-    \/** adds a name property to the Node for the purposes of storing the preferences *\/\n-    public static void name(Node n, String name) {\n-        FxSettingsSchema.setName(n, name);\n-    }\n-\n-    \/** adds a name property to the Window for the purposes of storing the preferences *\/\n-    public static void name(Window w, String name) {\n-        FxSettingsSchema.setName(w, name);\n-    }\n-\n-    \/**\n-     * attach a popup menu to a node.\n-     * WARNING: sometimes, as the case is with TableView\/FxTable header,\n-     * the requested node gets created by the skin at some later time.\n-     * In this case, additional dance must be performed, see for example\n-     * FxTable.setHeaderPopupMenu()\n-     *\/\n-    \/\/ https:\/\/github.com\/andy-goryachev\/MP3Player\/blob\/8b0ff12460e19850b783b961f214eacf5e1cdaf8\/src\/goryachev\/fx\/FX.java#L1251\n-    public static void setPopupMenu(Node owner, Supplier<ContextMenu> generator) {\n-        if (owner == null) {\n-            throw new NullPointerException(\"cannot attach popup menu to null\");\n-        }\n-\n-        owner.setOnContextMenuRequested((ev) -> {\n-            if (generator != null) {\n-                ContextMenu m = generator.get();\n-                if (m != null) {\n-                    if (m.getItems().size() > 0) {\n-                        Platform.runLater(() -> {\n-                            \/\/ javafx does not dismiss the popup when the user\n-                            \/\/ clicks on the owner node\n-                            EventHandler<MouseEvent> li = new EventHandler<MouseEvent>() {\n-                                @Override\n-                                public void handle(MouseEvent event) {\n-                                    m.hide();\n-                                    owner.removeEventFilter(MouseEvent.MOUSE_PRESSED, this);\n-                                    event.consume();\n-                                }\n-                            };\n-\n-                            owner.addEventFilter(MouseEvent.MOUSE_PRESSED, li);\n-                            m.show(owner, ev.getScreenX(), ev.getScreenY());\n-                        });\n-                        ev.consume();\n-                    }\n-                }\n-            }\n-            ev.consume();\n-        });\n-    }\n-\n-    \/**\n-     * Sets opacity (alpha) value.\n-     * @param c the initial color\n-     * @param opacity the opacity value\n-     * @return the new Color with specified opacity\n-     *\/\n-    public static Color alpha(Color c, double opacity) {\n-        double r = c.getRed();\n-        double g = c.getGreen();\n-        double b = c.getBlue();\n-        return new Color(r, g, b, opacity);\n-    }\n-\n-    \/**\n-     * Returns the node of type {@code type}, which is either the ancestor or the specified node,\n-     * or the specified node itself.\n-     * @param <N> the class of Node\n-     * @param type the class of Node\n-     * @param n the node to look at\n-     * @return the ancestor of type N, or null\n-     *\/\n-    public static <N extends Node> N findParentOf(Class<N> type, Node n) {\n-        for (;;) {\n-            if (n == null) {\n-                return null;\n-            } else if (type.isAssignableFrom(n.getClass())) {\n-                return (N)n;\n-            }\n-            n = n.getParent();\n-        }\n-    }\n-\n-    \/**\n-     * Adds the specified style name to the Node's style list.\n-     * @param n the node\n-     * @param name the style name to add\n-     *\/\n-    public static void style(Node n, String name) {\n-        if (n != null) {\n-            n.getStyleClass().add(name);\n-        }\n-    }\n-\n-    \/**\n-     * Adds or removes the specified style name to the Node's style list.\n-     * @param n the node\n-     * @param name the style name to add\n-     * @param add whether to add or remove the style\n-     *\/\n-    public static void style(Node n, String name, boolean add) {\n-        if (n != null) {\n-            if (add) {\n-                n.getStyleClass().add(name);\n-            } else {\n-                n.getStyleClass().remove(name);\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Adds or removes the specified pseudo class to the Node's style list.\n-     * @param n the node\n-     * @param name the style name to add\n-     * @param on whether to add or remove the pseudo class\n-     *\/\n-    public static void style(Node n, PseudoClass name, boolean on) {\n-        if (n != null) {\n-            n.pseudoClassStateChanged(name, on);\n-        }\n-    }\n-\n-    public static Button button(String text, Runnable r) {\n-        Button b = new Button(text);\n-        if (r == null) {\n-            b.setDisable(true);\n-        } else {\n-            b.setOnAction((ev) -> r.run());\n-        }\n-        return b;\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/util\/FX.java","additions":0,"deletions":451,"binary":false,"changes":451,"status":"deleted"},{"patch":"@@ -1,227 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-\/\/ This code borrows heavily from the following project, with permission from the author:\n-\/\/ https:\/\/github.com\/andy-goryachev\/AppFramework\n-package com.oracle.demo.richtext.util;\n-\n-import java.util.function.Consumer;\n-import javafx.beans.property.BooleanProperty;\n-import javafx.beans.property.SimpleBooleanProperty;\n-import javafx.event.ActionEvent;\n-import javafx.event.EventHandler;\n-import javafx.scene.control.ButtonBase;\n-import javafx.scene.control.CheckMenuItem;\n-import javafx.scene.control.ContextMenu;\n-import javafx.scene.control.Menu;\n-import javafx.scene.control.MenuItem;\n-import javafx.scene.control.RadioMenuItem;\n-import javafx.scene.control.ToggleButton;\n-\n-\/**\n- * An AbstractAction equivalent for FX, using method references.\n- * <p>\n- * Usage:\n- * <pre>\n- *    public final FxAction backAction = new FxAction(this::actionBack);\n- * <\/pre>\n- *\n- * @author Andy Goryachev\n- *\/\n-public class FxAction implements EventHandler<ActionEvent> {\n-    private final SimpleBooleanProperty selectedProperty = new SimpleBooleanProperty();\n-    private final SimpleBooleanProperty disabledProperty = new SimpleBooleanProperty();\n-    private Runnable onAction;\n-    private Consumer<Boolean> onSelected;\n-\n-    public FxAction(Runnable onAction, Consumer<Boolean> onSelected, boolean enabled) {\n-        this.onAction = onAction;\n-        this.onSelected = onSelected;\n-        setEnabled(enabled);\n-\n-        if (onSelected != null) {\n-            selectedProperty.addListener((src, prev, cur) -> fireSelected(cur));\n-        }\n-    }\n-\n-    public FxAction(Runnable onAction, Consumer<Boolean> onSelected) {\n-        this(onAction, onSelected, true);\n-    }\n-\n-    public FxAction(Runnable onAction, boolean enabled) {\n-        this(onAction, null, enabled);\n-    }\n-\n-    public FxAction(Runnable onAction) {\n-        this.onAction = onAction;\n-    }\n-\n-    public FxAction() {\n-    }\n-\n-    public void setOnAction(Runnable r) {\n-        onAction = r;\n-    }\n-\n-    protected final void invokeAction() {\n-        if (onAction != null) {\n-            try {\n-                onAction.run();\n-            } catch (Throwable e) {\n-                \/\/log.error(e);\n-                e.printStackTrace();\n-            }\n-        }\n-    }\n-\n-    public void attach(ButtonBase b) {\n-        b.setOnAction(this);\n-        b.disableProperty().bind(disabledProperty());\n-\n-        if (b instanceof ToggleButton) {\n-            ((ToggleButton)b).selectedProperty().bindBidirectional(selectedProperty());\n-        }\n-    }\n-\n-    public void attach(MenuItem m) {\n-        m.setOnAction(this);\n-        m.disableProperty().bind(disabledProperty());\n-\n-        if (m instanceof CheckMenuItem) {\n-            ((CheckMenuItem)m).selectedProperty().bindBidirectional(selectedProperty());\n-        } else if (m instanceof RadioMenuItem) {\n-            ((RadioMenuItem)m).selectedProperty().bindBidirectional(selectedProperty());\n-        }\n-    }\n-\n-    public final BooleanProperty selectedProperty() {\n-        return selectedProperty;\n-    }\n-\n-    public final boolean isSelected() {\n-        return selectedProperty.get();\n-    }\n-\n-    public final void setSelected(boolean on, boolean fire) {\n-        if (selectedProperty.get() != on) {\n-            selectedProperty.set(on);\n-            if (fire) {\n-                fire();\n-            }\n-        }\n-    }\n-\n-    public final BooleanProperty disabledProperty() {\n-        return disabledProperty;\n-    }\n-\n-    public final boolean isDisabled() {\n-        return disabledProperty.get();\n-    }\n-\n-    public final void setDisabled(boolean on) {\n-        disabledProperty.set(on);\n-    }\n-\n-    public final boolean isEnabled() {\n-        return !isDisabled();\n-    }\n-\n-    public final void setEnabled(boolean on) {\n-        disabledProperty.set(!on);\n-    }\n-\n-    public final void enable() {\n-        setEnabled(true);\n-    }\n-\n-    public final void disable() {\n-        setEnabled(false);\n-    }\n-\n-    \/** fire onAction handler only if this action is enabled *\/\n-    public void fire() {\n-        if (isEnabled()) {\n-            handle(null);\n-        }\n-    }\n-\n-    \/** execute an action regardless of whether its enabled or not *\/\n-    public void execute() {\n-        try {\n-            invokeAction();\n-        } catch (Throwable e) {\n-            \/\/log.error(e);\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    protected void fireSelected(boolean on) {\n-        try {\n-            onSelected.accept(on);\n-        } catch (Throwable e) {\n-            \/\/log.error(e);\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    \/** override to obtain the ActionEvent *\/\n-    @Override\n-    public void handle(ActionEvent ev) {\n-        if (isEnabled()) {\n-            if (ev != null) {\n-                if (ev.getSource() instanceof Menu) {\n-                    if (ev.getSource() != ev.getTarget()) {\n-                        \/\/ selection of a cascading child menu triggers action event for the parent\n-                        \/\/ for some unknown reason.  ignore this.\n-                        return;\n-                    }\n-                }\n-\n-                ev.consume();\n-            }\n-\n-            execute();\n-\n-            \/\/ close popup menu, if applicable\n-            if (ev != null) {\n-                Object src = ev.getSource();\n-                if (src instanceof Menu) {\n-                    ContextMenu p = ((Menu)src).getParentPopup();\n-                    if (p != null) {\n-                        p.hide();\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n\\ No newline at end of file\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/util\/FxAction.java","additions":0,"deletions":227,"binary":false,"changes":227,"status":"deleted"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-\/**\n- * RichTextArea Control demo.\n- *\n- * <BR><b><a href=\"https:\/\/openjdk.org\/jeps\/11\">Incubating Feature.<\/a>\n- * Will be removed in a future release.<\/b>\n- *\n- * @moduleGraph\n- *\/\n-\n-module RichTextAreaDemo {\n-    exports com.oracle.demo.richtext.codearea;\n-    exports com.oracle.demo.richtext.editor;\n-    exports com.oracle.demo.richtext.notebook;\n-    exports com.oracle.demo.richtext.rta;\n-\n-    requires javafx.base;\n-    requires javafx.controls;\n-    requires javafx.graphics;\n-    requires jfx.incubator.input;\n-    requires jfx.incubator.richtext;\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/module-info.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -1,218 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n- * All rights reserved. Use is subject to license terms.\n- *\n- * This file is available and licensed under the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- *  - Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- *  - Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and\/or other materials provided with the distribution.\n- *  - Neither the name of Oracle Corporation nor the names of its\n- *    contributors may be used to endorse or promote products derived\n- *    from this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n- * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n- * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n- * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n- * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n- * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-package test.com.oracle.demo.richtext.codearea;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.Test;\n-import com.oracle.demo.richtext.codearea.JavaSyntaxAnalyzer;\n-\n-\/**\n- * Tests JavaSyntaxDecorator.\n- *\n- * @author Andy Goryachev\n- *\/\n-public class TestJavaSyntaxDecorator {\n-    private static final JavaSyntaxAnalyzer.Type H = JavaSyntaxAnalyzer.Type.CHARACTER;\n-    private static final JavaSyntaxAnalyzer.Type C = JavaSyntaxAnalyzer.Type.COMMENT;\n-    private static final JavaSyntaxAnalyzer.Type K = JavaSyntaxAnalyzer.Type.KEYWORD;\n-    private static final JavaSyntaxAnalyzer.Type N = JavaSyntaxAnalyzer.Type.NUMBER;\n-    private static final JavaSyntaxAnalyzer.Type T = JavaSyntaxAnalyzer.Type.OTHER;\n-    private static final JavaSyntaxAnalyzer.Type S = JavaSyntaxAnalyzer.Type.STRING;\n-    private static final Object NL = new Object();\n-\n-    @Test\n-    public void specialCases() {\n-        t(T, \"print(x);\");\n-        t(K, \"new\", T, \" StringPropertyBase(\", S, \"\\\"\\\"\", T, \") {\");\n-        t(K, \"import\", T, \" javafx.geometry.BoundingBox;\");\n-        t(T, \"tempState.point.y = \");\n-        t(T, \"FX.checkItem(m, \", S, \"\\\"1\\\"\", T, \" \", K, \"new\", T, \" Insets(\", N, \"1\", T, \").equals(t.getContentPadding()), (on) -> {\", NL);\n-        t(K, \"import\", T, \" atry.a;\");\n-    }\n-\n-    private void someExamplesOfValidCode() {\n-        \/\/ text block\n-        var s = \"\"\"\n-        ---\/** *\/ -- \/\/ return ;\n-        \"\"\"  ;\n-\n-        \/\/ numbers\n-        double x = .1e15;\n-        x = 1.5e2;\n-        x = 1e3f;\n-        x = 1.1f;\n-        x = 5_0.1e2_3;\n-        x = 1_000_000;\n-        x = -1_000e-1;\n-        x = +1_000e+1;\n-        x = 1__1e-1_______________________________1;\n-        x = 0b10100001010001011010000101000101;\n-        x = 0b1010_0001_0100_0_1011_________01000010100010___1;\n-        x = 0x0_000__00;\n-    }\n-\n-    @Test\n-    public void tests() {\n-        \/\/ hex\n-        t(N, \"0x0123456789abcdefL\");\n-        t(N, \"0x00\", NL, N, \"0x0123456789abcdefL\");\n-        t(N, \"0xeFeF\", NL, N, \"0x0123__4567__89ab_cdefL\");\n-\n-        \/\/ binary\n-        t(N, \"0b00000\");\n-        t(N, \"0b1010101010L\");\n-\n-        \/\/ doubles\n-        t(N, \"1___2e-3___6\");\n-        t(N, \".15e2\");\n-        t(N, \"3.141592\");\n-        t(N, \".12345\");\n-        t(N, \"1.5e2\");\n-        t(N, \"1.5e2_2\");\n-        t(N, \"1.5E-2\");\n-        t(N, \"1_2.5E-2\");\n-        t(N, \".57E22\");\n-        t(N, \".75E-5\");\n-        t(N, \"1D\");\n-        t(N, \"1___2e-3___6d\");\n-        t(N, \".15e2d\");\n-        t(N, \"3.141592d\");\n-        t(N, \".12345d\");\n-        t(N, \"1.5e2d\");\n-        t(N, \"1.5e2_2d\");\n-        t(N, \"1.5E-2d\");\n-        t(N, \"1_2.5E-2d\");\n-        t(N, \".57E22d\");\n-        t(N, \".75E-5d\");\n-        t(N, \"1D\", NL, N, \"1d\", NL, N, \"1.1D\", NL, N, \"1.1d\", NL, N, \"1.2e-3d\", NL, N, \"1.2e-3D\", NL, N, \"1.2E+3d\");\n-\n-        \/\/ floats\n-        t(N, \"1f\");\n-        t(N, \"1___2e-3___6f\");\n-        t(N, \".15e2f\");\n-        t(N, \"3.141592f\");\n-        t(N, \".12345f\");\n-        t(N, \"1.5e2f\");\n-        t(N, \"1.5e2_2f\");\n-        t(N, \"1.5E-2f\");\n-        t(N, \"1_2.5E-2f\");\n-        t(N, \".57E22f\");\n-        t(N, \".75E-5f\");\n-        t(N, \"1F\", NL, N, \"1f\", NL, N, \"1.1F\", NL, N, \"1.1f\", NL, N, \"1.2e-3f\", NL, N, \"1.2e-3F\", NL, N, \"1.2E+3f\");\n-\n-        \/\/ longs\n-        t(N, \"1L\", NL, N, \"1l\", NL);\n-        t(N, \"2_2L\", NL, N, \"2_2l\", NL);\n-        t(N, \"2____2L\", NL, N, \"2___2l\", NL);\n-        t(T, \"-\", N, \"99999L\", NL);\n-        t(T, \"5.L\");\n-\n-        \/\/ integers\n-        t(N, \"1\");\n-        t(N, \"1_0\");\n-        t(N, \"1_000_000_000\");\n-        t(N, \"1______000___000_____000\");\n-        \/\/ negative scenarios with integers\n-        t(T, \"_1\");\n-        t(T, \"1_\");\n-        t(T, \"-\", N, \"9999\");\n-\n-        \/\/ text blocks\n-        t(T, \"String s =\", S, \"\\\"\\\"\\\"   \", NL, S, \" yo \/* \/\/ *\/ *\/ \\\"\\\" \\\"  \", NL, S, \"a  \\\"\\\"\\\"   \", T, \";\");\n-\n-        \/\/ strings\n-        t(T, \" \", S, \"\\\"\\\\\\\"\/*\\\\\\\"\\\"\", NL);\n-        t(S, \"\\\"\\\\\\\"\\\\\\\"\\\\\\\"\\\"\", T, \" {\", NL);\n-        t(S, \"\\\"abc\\\"\", NL, T, \"s = \", S, \"\\\"\\\"\");\n-\n-        \/\/ comments\n-        t(T, \" \", C, \"\/* yo\", NL, C, \"yo yo\", NL, C, \" *\/\", T, \" \");\n-        t(T, \" \", C, \"\/\/ yo yo\", NL, K, \"int\", T, \" c;\");\n-        t(C, \"\/* \/\/ yo\", NL, C, \"\/\/ *\/\", T, \" \");\n-\n-        \/\/ chars\n-        t(H, \"'\\\\b'\");\n-        t(H, \"'\\\\b'\", NL);\n-        t(H, \"'\\\\u0000'\", NL, H, \"'\\\\uFf9a'\", NL);\n-        t(H, \"'a'\", NL, H, \"'\\\\b'\", NL, H, \"'\\\\f'\", NL, H, \"'\\\\n'\", NL, H, \"'\\\\r'\", NL);\n-        t(H, \"'\\\\''\", NL, H, \"'\\\\\\\"'\", NL, H, \"'\\\\\\\\'\", NL);\n-\n-        \/\/ keywords\n-        t(K, \"package\", T, \" java.com;\", NL);\n-        t(K, \"import\", T, \" java.util.ArrayList;\", NL);\n-        t(K, \"import\", T, \" java.util.ArrayList;\", NL, K, \"import\", T, \" java.util.ArrayList;\", NL);\n-        t(K, \"import\", T, \" com.oracle.demo\");\n-\n-        \/\/ misc\n-        t(K, \"if\", T, \"(\", S, \"\\\"\/*\\\"\", T, \" == null) {\", NL);\n-        t(C, \"\/\/ test\", NL, T, \"--\", NL);\n-        t(T, \"S_0,\");\n-    }\n-\n-    private void t(Object... items) {\n-        StringBuilder sb = new StringBuilder();\n-        ArrayList<JavaSyntaxAnalyzer.Line> expected = new ArrayList<>();\n-        JavaSyntaxAnalyzer.Line line = null;\n-\n-        \/\/ builds the input string and the expected result array\n-        for (int i = 0; i < items.length; ) {\n-            Object x = items[i++];\n-            if (x == NL) {\n-                sb.append(\"\\n\");\n-                if (line == null) {\n-                    line = new JavaSyntaxAnalyzer.Line();\n-                }\n-                expected.add(line);\n-                line = null;\n-            } else {\n-                JavaSyntaxAnalyzer.Type t = (JavaSyntaxAnalyzer.Type)x;\n-                String text = (String)items[i++];\n-                if (line == null) {\n-                    line = new JavaSyntaxAnalyzer.Line();\n-                }\n-                line.addSegment(t, text);\n-                sb.append(text);\n-            }\n-        }\n-\n-        if (line != null) {\n-            expected.add(line);\n-        }\n-\n-        String input = sb.toString();\n-        List<JavaSyntaxAnalyzer.Line> res = new JavaSyntaxAnalyzer(input).analyze();\n-        Assertions.assertArrayEquals(expected.toArray(), res.toArray());\n-    }\n-}\n","filename":"tests\/manual\/RichTextAreaDemo\/test\/test\/com\/oracle\/demo\/richtext\/codearea\/TestJavaSyntaxDecorator.java","additions":0,"deletions":218,"binary":false,"changes":218,"status":"deleted"}]}