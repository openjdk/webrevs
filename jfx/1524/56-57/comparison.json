{"files":[{"patch":"@@ -206,1 +206,0 @@\n-     * @param consume determines whether the matching event is consumed or not\n@@ -209,2 +208,2 @@\n-    protected final <T extends Event> void addHandler(EventType<T> type, boolean consume, EventHandler<T> handler) {\n-        getSkinInputMap().addHandler(type, consume, handler);\n+    protected final <T extends Event> void addHandler(EventType<T> type, EventHandler<T> handler) {\n+        getSkinInputMap().addHandler(type, handler);\n@@ -215,1 +214,1 @@\n-     * This is a more specific version of {@link #addHandler(EventType,boolean,EventHandler)} method.\n+     * This is a more specific version of {@link #addHandler(EventType,EventHandler)} method.\n@@ -219,1 +218,0 @@\n-     * @param consume determines whether the matching event is consumed or not\n@@ -222,2 +220,2 @@\n-    protected final <T extends Event> void addHandler(EventCriteria<T> criteria, boolean consume, EventHandler<T> handler) {\n-        getSkinInputMap().addHandler(criteria, consume, handler);\n+    protected final <T extends Event> void addHandler(EventCriteria<T> criteria, EventHandler<T> handler) {\n+        getSkinInputMap().addHandler(criteria, handler);\n","filename":"modules\/jfx.incubator.input\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/input\/BehaviorBase.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -71,1 +71,0 @@\n-     * @param consume determines whether the matching event is consumed or not\n@@ -74,2 +73,2 @@\n-    public final <T extends Event> void addHandler(EventType<T> type, boolean consume, EventHandler<T> handler) {\n-        addHandler(type, consume, EventHandlerPriority.SKIN_HIGH, handler);\n+    public final <T extends Event> void addHandler(EventType<T> type, EventHandler<T> handler) {\n+        putHandler(type, EventHandlerPriority.SKIN_HIGH, handler);\n@@ -80,1 +79,1 @@\n-     * This is a more specific version of {@link #addHandler(EventType,boolean,EventHandler)} method.\n+     * This is a more specific version of {@link #addHandler(EventType,EventHandler)} method.\n@@ -84,1 +83,0 @@\n-     * @param consume determines whether the matching event is consumed or not\n@@ -87,29 +85,1 @@\n-    public final <T extends Event> void addHandler(EventCriteria<T> criteria, boolean consume, EventHandler<T> handler) {\n-        addHandler(criteria, consume, EventHandlerPriority.SKIN_HIGH, handler);\n-    }\n-\n-    private <T extends Event> void addHandler(\n-        EventType<T> type,\n-        boolean consume,\n-        EventHandlerPriority pri,\n-        EventHandler<T> handler)\n-    {\n-        if (consume) {\n-            putHandler(type, pri, new EventHandler<T>() {\n-                @Override\n-                public void handle(T ev) {\n-                    handler.handle(ev);\n-                    ev.consume();\n-                }\n-            });\n-        } else {\n-            putHandler(type, pri, handler);\n-        }\n-    }\n-\n-    private <T extends Event> void addHandler(\n-        EventCriteria<T> criteria,\n-        boolean consume,\n-        EventHandlerPriority pri,\n-        EventHandler<T> handler)\n-    {\n+    public final <T extends Event> void addHandler(EventCriteria<T> criteria, EventHandler<T> handler) {\n@@ -117,1 +87,1 @@\n-        putHandler(type, pri, new EventHandler<T>() {\n+        putHandler(type, EventHandlerPriority.SKIN_HIGH, new EventHandler<T>() {\n@@ -122,3 +92,0 @@\n-                    if (consume) {\n-                        ev.consume();\n-                    }\n","filename":"modules\/jfx.incubator.input\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/input\/SkinInputMap.java","additions":5,"deletions":38,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -514,12 +514,0 @@\n-        \/**\n-         * Sets or clears the {@code alt} key down condition (the {@code option} key on macOS).\n-         * @param on condition\n-         * @return this Builder\n-         *\/\n-        public Builder alt(boolean on) {\n-            if (on) {\n-                m.add(KCondition.ALT);\n-            }\n-            return this;\n-        }\n-\n@@ -539,16 +527,0 @@\n-        \/**\n-         * Sets or clears the {@code command} key down condition on macOS.\n-         * <p>\n-         * Setting this condition on non-macOS platforms will result in the\n-         * {@code build} method returning {@code null}.\n-         *\n-         * @param on condition\n-         * @return this Builder\n-         *\/\n-        public Builder command(boolean on) {\n-            if (on) {\n-                m.add(KCondition.COMMAND);\n-            }\n-            return this;\n-        }\n-\n@@ -564,12 +536,0 @@\n-        \/**\n-         * Sets or clears the {@code control} key down condition.\n-         * @param on condition\n-         * @return this Builder\n-         *\/\n-        public Builder control(boolean on) {\n-            if (on) {\n-                m.add(KCondition.CTRL);\n-            }\n-            return this;\n-        }\n-\n@@ -585,12 +545,0 @@\n-        \/**\n-         * Sets or clears the {@code meta} key down condition.\n-         * @param on condition\n-         * @return this Builder\n-         *\/\n-        public Builder meta(boolean on) {\n-            if (on) {\n-                m.add(KCondition.META);\n-            }\n-            return this;\n-        }\n-\n@@ -610,16 +558,0 @@\n-        \/**\n-         * Sets or clears the {@code option} key down condition on macOS.\n-         * <p>\n-         * Setting this condition on non-macOS platforms will result in the\n-         * {@code build} method returning {@code null}.\n-         *\n-         * @param on condition\n-         * @return this Builder\n-         *\/\n-        public Builder option(boolean on) {\n-            if (on) {\n-                m.add(KCondition.OPTION);\n-            }\n-            return this;\n-        }\n-\n@@ -635,12 +567,0 @@\n-        \/**\n-         * Sets or clears the {@code shift} key down condition.\n-         * @param on condition\n-         * @return this Builder\n-         *\/\n-        public Builder shift(boolean on) {\n-            if (on) {\n-                m.add(KCondition.SHIFT);\n-            }\n-            return this;\n-        }\n-\n@@ -656,12 +576,0 @@\n-        \/**\n-         * Sets or clears the {@code shortcut} key down condition.\n-         * @param on condition\n-         * @return this Builder\n-         *\/\n-        public Builder shortcut(boolean on) {\n-            if (on) {\n-                m.add(KCondition.SHORTCUT);\n-            }\n-            return this;\n-        }\n-\n","filename":"modules\/jfx.incubator.input\/src\/main\/java\/jfx\/incubator\/scene\/control\/input\/KeyBinding.java","additions":0,"deletions":92,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -251,2 +251,2 @@\n-        addHandler(KeyEvent.KEY_TYPED, true, this::handleKeyTyped);\n-        addHandler(ContextMenuEvent.CONTEXT_MENU_REQUESTED, true, this::contextMenuRequested);\n+        addHandler(KeyEvent.KEY_TYPED, this::handleKeyTyped);\n+        addHandler(ContextMenuEvent.CONTEXT_MENU_REQUESTED, this::contextMenuRequested);\n@@ -269,5 +269,2 @@\n-        \/\/ TODO something about consuming all key presses (yes) and key releases (not really)\n-        \/\/ in TextInputControlBehavior:194\n-\n-        String character = getValidKeyTyped(ev);\n-        if (character != null) {\n+        String typed = getValidKeyTyped(ev);\n+        if (typed != null) {\n@@ -275,1 +272,1 @@\n-            boolean consume = handleTypedChar(character);\n+            boolean consume = handleTypedChar(typed);\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/RichTextAreaBehavior.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"}]}