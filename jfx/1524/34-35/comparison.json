{"files":[{"patch":"@@ -137,1 +137,1 @@\n-                return new TextPos(cell.getIndex(), 0, 0, true);\n+                return TextPos.ofLeading(cell.getIndex(), 0);\n@@ -148,1 +148,1 @@\n-                    return new TextPos(cell.getIndex(), 0, 0, true);\n+                    return TextPos.ofLeading(cell.getIndex(), 0);\n@@ -156,1 +156,1 @@\n-            return new TextPos(cell.getIndex(), cix, cix, true);\n+            return TextPos.ofLeading(cell.getIndex(), cix);\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/CellArrangement.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-    public static final double PREF_HEIGHT = 176; \/\/ matches TextArea\n+    public static final double PREF_HEIGHT = 176;\n@@ -105,1 +105,1 @@\n-    public static final double PREF_WIDTH = 176; \/\/ matches TextArea\n+    public static final double PREF_WIDTH = 176;\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/Params.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,2 +72,3 @@\n- * {@code CodeArea} extends the {@link RichTextArea} class, meaning most of the functionality is expected to continue\n- * working.  There are some differences that should be mentioned:\n+ * {@code CodeArea} extends the {@link RichTextArea} class, meaning most of the functionality works as it does\n+ * in the base class.\n+ * There are some differences that should be mentioned:\n@@ -78,1 +79,2 @@\n- * <li>Line numbers: the line numbers are provided by setting the {@link #leftDecoratorProperty()}\n+ * <li>Line numbers: the {@code CodeArea} sets the {@link #leftDecoratorProperty()} to support the line numbers,\n+ * so applications should not set or bind that property.\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/CodeArea.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -695,2 +695,3 @@\n-     * The subclass should override this method to check if the model type is supported and throw a TBD if not.\n-     * A {@code null} value should never generate the exception.\n+     * The subclass should override this method if it restricts the type of model that is supported,\n+     * and throw an {@code IllegalArgumentException} if the model is not supported.\n+     * A {@code null} value should always be acceptable and never generate an exception.\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/RichTextArea.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-         * The caller guarantees that this method is only called when the content is writable.\n+         * The {@code BasicTextModel} guarantees that this method is only called when the content is writable.\n@@ -80,1 +80,1 @@\n-         * The caller guarantees that this method is only called when the content is writable.\n+         * The {@code BasicTextModel} guarantees that this method is only called when the content is writable.\n@@ -89,1 +89,1 @@\n-         * The caller guarantees that this method is only called when the content is writable,\n+         * The {@code BasicTextModel} guarantees that this method is only called when the content is writable,\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/model\/BasicTextModel.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -746,1 +746,1 @@\n-            evStart = new TextPos(start.index(), 0, 0, true);\n+            evStart = TextPos.ofLeading(start.index(), 0);\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/model\/StyledTextModel.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}