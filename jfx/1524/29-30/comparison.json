{"files":[{"patch":"@@ -57,1 +57,1 @@\n-    public Node getNode(int modelIndex, boolean forMeasurement) {\n+    public Node getNode(int index) {\n@@ -59,1 +59,1 @@\n-        double a = 360.0 * (modelIndex % num) \/ num;\n+        double a = 360.0 * (index % num) \/ num;\n@@ -67,0 +67,5 @@\n+\n+    @Override\n+    public Node getMeasurementNode(int index) {\n+        return null;\n+    }\n","filename":"apps\/samples\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/DemoColorSideDecorator.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -876,1 +876,1 @@\n-                Node n = d.getNode(top, true);\n+                Node n = d.getMeasurementNode(top);\n@@ -890,2 +890,2 @@\n-            \/\/ introducing some granularity in order to avoid left boundary moving back and forth when scrolling\n-            double granularity = 15;\n+            \/\/ apply some granularity in order to avoid left boundary jittering back and forth when scrolling\n+            double granularity = 10;\n@@ -1452,1 +1452,1 @@\n-                    n = leftDecorator.getNode(ix, false);\n+                    n = leftDecorator.getNode(ix);\n@@ -1474,1 +1474,1 @@\n-                    n = rightDecorator.getNode(cell.getIndex(), false);\n+                    n = rightDecorator.getNode(cell.getIndex());\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/VFlow.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -154,2 +154,10 @@\n-                            public Node getNode(int ix, boolean forMeasurement) {\n-                                Node n = super.getNode(ix, forMeasurement);\n+                            public Node getMeasurementNode(int ix) {\n+                                return bindFont(super.getMeasurementNode(ix));\n+                            }\n+\n+                            @Override\n+                            public Node getNode(int ix) {\n+                                return bindFont(super.getNode(ix));\n+                            }\n+\n+                            private Node bindFont(Node n) {\n@@ -219,1 +227,2 @@\n-     * @defaultValue the Monospaced font with size 12.0 px\n+     * @defaultValue the Monospaced font with the default size\n+     * @see Font#font(String, double)\n@@ -281,1 +290,1 @@\n-        return Font.font(\"Monospaced\", 12.0);\n+        return Font.font(\"Monospaced\", -1);\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/CodeArea.java","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.Arrays;\n@@ -41,1 +42,1 @@\n-     * Creates an instance using Western-style group separator (comma).\n+     * Creates an instance with the Western-style group separator (comma).\n@@ -44,1 +45,1 @@\n-        this(\"#,##0\");\n+        this(new DecimalFormat(\"#,##0\"));\n@@ -48,2 +49,3 @@\n-     * Creates an instance using the specified pattern for {@link DecimalFormat}.\n-     * @param pattern the DecimalFormat pattern to use\n+     * Creates an instance using the specified {@link DecimalFormat}.\n+     *\n+     * @param format the {@code DecimalFormat} to use\n@@ -51,2 +53,2 @@\n-    public LineNumberDecorator(String pattern) {\n-        format = new DecimalFormat(pattern);\n+    public LineNumberDecorator(DecimalFormat format) {\n+        this.format = format;\n@@ -57,1 +59,1 @@\n-        \/\/ no set width, must request a measurer Node\n+        \/\/ no set width, must request a measurement Node\n@@ -62,5 +64,8 @@\n-    public Node getNode(int ix, boolean forMeasurement) {\n-        if (forMeasurement) {\n-            \/\/ for measurer node only: allow for extra digit(s) in the bottom rows\n-            ix += 300;\n-        }\n+    public Node getMeasurementNode(int index) {\n+        \/\/ make sure the size is sufficient to display all the numbers in the view\n+        String s = format.format(index + 300);\n+        char[] cs = new char[s.length()];\n+        \/\/ what's wider, 0 or 8 ?\n+        Arrays.fill(cs, '8');\n+        return createNode(new String(cs));\n+    }\n@@ -68,5 +73,5 @@\n-        String s = format.format(ix + 1);\n-        if (forMeasurement) {\n-            \/\/ account for some variability with proportional font\n-            s += \" \";\n-        }\n+    @Override\n+    public Node getNode(int index) {\n+        String s = format.format(index + 1);\n+        return createNode(s);\n+    }\n@@ -74,1 +79,2 @@\n-        Label t = new Label(s);\n+    private Node createNode(String text) {\n+        Label t = new Label(text);\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/LineNumberDecorator.java","additions":24,"deletions":18,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n- * <li>otherwise, the {@link #getNode(int, boolean)} method is called with {@code forMeasurement} argument set to\n- * {@code true}.  The value returned will be used to size all other nodes for that side.\n+ * <li>otherwise, the {@link #getMeasurementNode(int)} method is called.\n+ * The preferred width of the {@code Node} returned will be used to size all other nodes for that side.\n@@ -45,2 +45,7 @@\n-     * Returns the width for all the side Nodes, or 0 if a measurer Node needs to be obtained via\n-     * {@link #getNode(int, boolean)}.\n+     * Returns the width to size the pane which hosts the side decoration {@code Node}s.\n+     * <p>\n+     * When return value is 0 or negative, an alternative method to size the side pane hosting the decoration\n+     * will be used: a special measurement {@code Node} will be obtained via\n+     * {@link #getMeasurementNode(int)},\n+     * whose preferred width will be used instead.\n+     *\n@@ -48,1 +53,1 @@\n-     * @return preferred width\n+     * @return the preferred width\n@@ -53,7 +58,2 @@\n-     * Creates a Node to be added to the layout to the right or to the left of the given paragraph.\n-     * <p>\n-     * When {@code forMeasurement} is true, this method is expected to create a special non-null\n-     * measurement Node, whose preferred width will be used to size all the side Nodes (and must, therefore,\n-     * be wider than any side node in the view).  The {@code modelIndex} is this case is the index of\n-     * the first paragraph in the view.\n-     * <p>\n+     * Returns the special measurement node to use for sizing the pane that holds the side decorations.\n+     * This method will only be called if {@link #getPrefWidth(double)} returns 0 or negative value.\n@@ -62,3 +62,11 @@\n-     * @param modelIndex model index\n-     * @param forMeasurement when true, specifies that a measurement Node must be created\n-     * @return new instance of the Node, or null\n+     * @param index the paragraph index at the top of the viewable area\n+     * @return the measurement {@code Node}\n+     *\/\n+    public Node getMeasurementNode(int index);\n+\n+    \/**\n+     * Creates a Node to be added to the layout to the right or to the left of the given paragraph.\n+     * This method may return {@code null}.\n+     *\n+     * @param index the paragraph index\n+     * @return new instance {@code Node} \n@@ -66,1 +74,1 @@\n-    public Node getNode(int modelIndex, boolean forMeasurement);\n+    public Node getNode(int index);\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/SideDecorator.java","additions":24,"deletions":16,"binary":false,"changes":40,"status":"modified"}]}