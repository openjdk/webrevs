{"files":[{"patch":"@@ -1107,1 +1107,1 @@\n-            return StyleAttributeMap.fromTextNode(measurer);\n+            return RichUtils.fromTextNode(measurer);\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/VFlow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.Locale;\n@@ -52,0 +53,1 @@\n+import javafx.scene.paint.Paint;\n@@ -55,0 +57,1 @@\n+import javafx.scene.text.Font;\n@@ -662,0 +665,57 @@\n+\n+\n+    \/**\n+     * Creates an instance of StyleAttributeMap which contains character attributes found in the specified {@link Text} node.\n+     * The following attributes will be set:\n+     * <ul>\n+     * <li>{@link #BOLD}\n+     * <li>{@link #FONT_FAMILY}\n+     * <li>{@link #FONT_SIZE}\n+     * <li>{@link #ITALIC}\n+     * <li>{@link #STRIKE_THROUGH}\n+     * <li>{@link #TEXT_COLOR}\n+     * <li>{@link #UNDERLINE}\n+     * <\/ul>\n+     *\n+     * @param textNode the text node\n+     * @return the StyleAttributeMap instance\n+     *\/\n+    public static StyleAttributeMap fromTextNode(Text textNode) {\n+        StyleAttributeMap.Builder b = StyleAttributeMap.builder();\n+        Font f = textNode.getFont();\n+        String st = f.getStyle().toLowerCase(Locale.US);\n+        boolean bold = RichUtils.isBold(st);\n+        boolean italic = RichUtils.isItalic(st);\n+\n+        if (bold) {\n+            b.setBold(true);\n+        }\n+\n+        if (italic) {\n+            b.setItalic(true);\n+        }\n+\n+        if (textNode.isStrikethrough()) {\n+            b.setStrikeThrough(true);\n+        }\n+\n+        if (textNode.isUnderline()) {\n+            b.setUnderline(true);\n+        }\n+\n+        String family = f.getFamily();\n+        b.setFontFamily(family);\n+\n+        double sz = f.getSize();\n+        if (sz != 12.0) {\n+            b.setFontSize(sz);\n+        }\n+\n+        Paint x = textNode.getFill();\n+        if (x instanceof Color c) {\n+            \/\/ we do not support gradients (although we could get the first color, for example)\n+            b.setTextColor(c);\n+        }\n+\n+        return b.build();\n+    }\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/util\/RichUtils.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Locale;\n@@ -34,3 +33,0 @@\n-import javafx.scene.paint.Paint;\n-import javafx.scene.text.Font;\n-import javafx.scene.text.Text;\n@@ -40,1 +36,0 @@\n-import com.sun.jfx.incubator.scene.control.richtext.util.RichUtils;\n@@ -129,1 +124,1 @@\n-    public static StyleAttributeMap fromStyles(String style, String... names) {\n+    static StyleAttributeMap fromStyles(String style, String... names) {\n@@ -144,1 +139,1 @@\n-    public static StyleAttributeMap fromInlineStyle(String style) {\n+    static StyleAttributeMap fromInlineStyle(String style) {\n@@ -439,56 +434,0 @@\n-    \/**\n-     * Creates an instance of StyleAttributeMap which contains character attributes found in the specified {@link Text} node.\n-     * The following attributes will be set:\n-     * <ul>\n-     * <li>{@link #BOLD}\n-     * <li>{@link #FONT_FAMILY}\n-     * <li>{@link #FONT_SIZE}\n-     * <li>{@link #ITALIC}\n-     * <li>{@link #STRIKE_THROUGH}\n-     * <li>{@link #TEXT_COLOR}\n-     * <li>{@link #UNDERLINE}\n-     * <\/ul>\n-     *\n-     * @param textNode the text node\n-     * @return the StyleAttributeMap instance\n-     *\/\n-    public static StyleAttributeMap fromTextNode(Text textNode) {\n-        StyleAttributeMap.Builder b = StyleAttributeMap.builder();\n-        Font f = textNode.getFont();\n-        String st = f.getStyle().toLowerCase(Locale.US);\n-        boolean bold = RichUtils.isBold(st);\n-        boolean italic = RichUtils.isItalic(st);\n-\n-        if (bold) {\n-            b.setBold(true);\n-        }\n-\n-        if (italic) {\n-            b.setItalic(true);\n-        }\n-\n-        if (textNode.isStrikethrough()) {\n-            b.setStrikeThrough(true);\n-        }\n-\n-        if (textNode.isUnderline()) {\n-            b.setUnderline(true);\n-        }\n-\n-        String family = f.getFamily();\n-        b.setFontFamily(family);\n-\n-        double sz = f.getSize();\n-        if (sz != 12.0) {\n-            b.setFontSize(sz);\n-        }\n-\n-        Paint x = textNode.getFill();\n-        if (x instanceof Color c) {\n-            \/\/ we do not support gradients (although we could get the first color, for example)\n-            b.setTextColor(c);\n-        }\n-\n-        return b.build();\n-    }\n-\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/model\/StyleAttributeMap.java","additions":2,"deletions":63,"binary":false,"changes":65,"status":"modified"}]}