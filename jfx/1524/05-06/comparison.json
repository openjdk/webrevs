{"files":[{"patch":"@@ -333,1 +333,1 @@\n-                return m.isUserEditable();\n+                return m.isWritable();\n@@ -1091,1 +1091,1 @@\n-        boolean editable = control.canEdit();\n+        boolean editable = canEdit();\n@@ -1575,2 +1575,2 @@\n-        RichTextArea control = getControl();\n-        if (control.canEdit()) {\n+        if (canEdit()) {\n+            RichTextArea control = getControl();\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/RichTextAreaBehavior.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -527,1 +527,0 @@\n-     * @see canEdit() method\n@@ -1066,0 +1065,2 @@\n+     * @throws NullPointerException if the model is {@code null}\n+     * @throws UnsupportedOperationException if the model is not {@link StyledTextModel#isWritable() writable}\n@@ -1068,4 +1069,2 @@\n-        if (canEdit()) {\n-            StyledTextModel m = getModel();\n-            m.applyStyle(start, end, attrs, true);\n-        }\n+        StyledTextModel m = getModel();\n+        m.applyStyle(start, end, attrs, true);\n@@ -1077,1 +1076,1 @@\n-     * This method does nothing if {@link #canEdit()} returns false, or the caret position is {@code null}.\n+     * This method does nothing if either control or the model is not editable, or the caret position is {@code null}.\n@@ -1087,20 +1086,0 @@\n-    \/**\n-     * This convenience method returns true if all the following conditions are true:\n-     * <ul>\n-     * <li>this control's {@link #isEditable()} returns true<\/li>\n-     * <li>the model is not {@code null}<\/li>\n-     * <li>the model's {@link StyledTextModel#isUserEditable()} returns true<\/li>\n-     * <\/ul>\n-     *\n-     * @return true if the editing is allowed\n-     *\/\n-    public final boolean canEdit() {\n-        if (isEditable()) {\n-            StyledTextModel m = getModel();\n-            if (m != null) {\n-                return m.isUserEditable();\n-            }\n-        }\n-        return false;\n-    }\n-\n@@ -1109,1 +1088,1 @@\n-     * This method does nothing if {@link #canEdit()} returns false.\n+     * This method does nothing if either control or the model is not editable.\n@@ -1164,1 +1143,1 @@\n-     * This method does nothing if {@link #canEdit()} returns false, or the caret position is {@code null}.\n+     * This method does nothing if either control or the model is not editable, or the caret position is {@code null}.\n@@ -1177,1 +1156,1 @@\n-     * This method does nothing if {@link #canEdit()} returns false, or the caret position is {@code null}.\n+     * This method does nothing if either control or the model is not editable, or the caret position is {@code null}.\n@@ -1189,1 +1168,1 @@\n-     * This method does nothing if {@link #canEdit()} returns false, or the caret position is {@code null}.\n+     * This method does nothing if either control or the model is not editable, or the caret position is {@code null}.\n@@ -1201,1 +1180,1 @@\n-     * This method does nothing if {@link #canEdit()} returns false, or the caret position is {@code null}.\n+     * This method does nothing if either control or the model is not editable, or the caret position is {@code null}.\n@@ -1214,1 +1193,1 @@\n-     * This method does nothing if {@link #canEdit()} returns false, or the caret position is {@code null}.\n+     * This method does nothing if either control or the model is not editable, or the caret position is {@code null}.\n@@ -1227,1 +1206,1 @@\n-     * This method does nothing if {@link #canEdit()} returns false, or the caret position is {@code null}.\n+     * This method does nothing if either control or the model is not editable, or the caret position is {@code null}.\n@@ -1240,1 +1219,1 @@\n-     * This method does nothing if {@link #canEdit()} returns false, or the caret position is {@code null}.\n+     * This method does nothing if either control or the model is not editable, or the caret position is {@code null}.\n@@ -1412,1 +1391,1 @@\n-     * This method does nothing if {@link #canEdit()} returns false, or the caret position is {@code null}.\n+     * This method does nothing if either control or the model is not editable, or the caret position is {@code null}.\n@@ -1424,1 +1403,1 @@\n-     * This method does nothing if {@link #canEdit()} returns false, or the caret position is {@code null}.\n+     * This method does nothing if either control or the model is not editable, or the caret position is {@code null}.\n@@ -1437,1 +1416,1 @@\n-     * This method does nothing if {@link #canEdit()} returns false.\n+     * This method does nothing if either control or the model is not editable.\n@@ -1452,1 +1431,1 @@\n-     * This method does nothing if {@link #canEdit()} returns false.\n+     * This method does nothing if either control or the model is not editable.\n@@ -1693,1 +1672,1 @@\n-     * This method does nothing if {@link #canEdit()} returns false, or the caret position is {@code null}.\n+     * This method does nothing if either control or the model is not editable, or the caret position is {@code null}.\n@@ -1705,1 +1684,1 @@\n-     * This method does nothing if {@link #canEdit()} returns false, of if the specified format is\n+     * This method does nothing if either control or the model is not editable, of if the specified format is\n@@ -1720,1 +1699,1 @@\n-     * This method does nothing if {@link #canEdit()} returns false, or the caret position is {@code null}.\n+     * This method does nothing if either control or the model is not editable, or the caret position is {@code null}.\n@@ -1787,0 +1766,2 @@\n+     * @throws NullPointerException if the model is {@code null}\n+     * @throws UnsupportedOperationException if the model is not {@link StyledTextModel#isWritable() writable}\n@@ -1789,5 +1770,2 @@\n-        if (canEdit()) {\n-            StyledTextModel m = getModel();\n-            return m.replace(vflow(), start, end, text, allowUndo);\n-        }\n-        return null;\n+        StyledTextModel m = getModel();\n+        return m.replace(vflow(), start, end, text, allowUndo);\n@@ -1806,0 +1784,2 @@\n+     * @throws NullPointerException if the model is {@code null}\n+     * @throws UnsupportedOperationException if the model is not {@link StyledTextModel#isWritable() writable}\n@@ -1809,4 +1789,1 @@\n-        if (m != null) {\n-            return m.replace(vflow(), start, end, in, createUndo);\n-        }\n-        return null;\n+        return m.replace(vflow(), start, end, in, createUndo);\n@@ -2119,1 +2096,1 @@\n-     * This method does nothing if {@link #canEdit()} returns false.\n+     * This method does nothing if either control or the model is not editable.\n@@ -2124,0 +2101,2 @@\n+     * @throws NullPointerException if the model is {@code null}\n+     * @throws UnsupportedOperationException if the model is not {@link StyledTextModel#isWritable() writable}\n@@ -2126,4 +2105,2 @@\n-        if (canEdit()) {\n-            StyledTextModel m = getModel();\n-            m.applyStyle(start, end, attrs, false);\n-        }\n+        StyledTextModel m = getModel();\n+        m.applyStyle(start, end, attrs, false);\n@@ -2136,1 +2113,1 @@\n-     * This method does nothing if {@link #canEdit()} returns false.\n+     * This method does nothing if either control or the model is not editable.\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/RichTextArea.java","additions":33,"deletions":56,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -122,0 +122,1 @@\n+     *\n@@ -124,0 +125,2 @@\n+     * @throws NullPointerException if the model is {@code null}\n+     * @throws UnsupportedOperationException if the model is not {@link StyledTextModel#isWritable() writable}\n@@ -155,1 +158,1 @@\n-    public final boolean isUserEditable() {\n+    public final boolean isWritable() {\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/model\/BasicTextModel.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    public final boolean isUserEditable() {\n+    public final boolean isWritable() {\n@@ -735,12 +735,13 @@\n-         * paragraph:    [=============]\n-         * case:\n-         *         0:                      |-\n-         *         1:  -------------------->\n-         *         2:    |----------------->\n-         *         3:    |-------------|\n-         *         4:    |--------|\n-         *         5:        |------------->\n-         *         6:        |---------|\n-         *         7:        |----|\n-         *         8:  -----------|\n-         *         9:  ----------------|\n+         * paragraph:    start [=============] end\n+         *      case:\n+         *               0:                  |-\n+         *               0:                      |-\n+         *               1:  -------------------->\n+         *               2:    |----------------->\n+         *               3:    |-------------|\n+         *               4:    |--------|\n+         *               5:        |------------->\n+         *               6:        |---------|\n+         *               7:        |----|\n+         *               8:  -----------|\n+         *               9:  ----------------|\n@@ -751,0 +752,4 @@\n+                if ((start == max) && (off == max)) {\n+                    \/\/ empty paragraph\n+                    return 3;\n+                }\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/model\/RichTextModel.java","additions":18,"deletions":13,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n- * The model supports editing when {@link #isUserEditable()} returns {@code true}.\n+ * The model supports editing when {@link #isWritable()} returns {@code true}.\n@@ -106,1 +106,9 @@\n-     * Indicates whether the model supports editing by the user.\n+     * Indicates whether the model supports content modifications made via\n+     * {@code applyStyle()},\n+     * {@code replace()},\n+     * {@code undo()},\n+     * {@code redo()}\n+     * methods, i.e. editing via UI.\n+     * <p>\n+     * Note that even when this method returns {@code false}, the model itself may still update its content\n+     * and fire the change events as a response, for example, to changes in its backing data storage.\n@@ -108,1 +116,1 @@\n-     * @return true if the model supports editing by the user\n+     * @return true if the model supports content modifications via the UI\n@@ -110,1 +118,1 @@\n-    public abstract boolean isUserEditable();\n+    public abstract boolean isWritable();\n@@ -595,0 +603,1 @@\n+     * @throws UnsupportedOperationException if the model is not {@link #isWritable() writable}\n@@ -597,7 +606,6 @@\n-        if (isUserEditable()) {\n-            \/\/ TODO pick the lowest from start,end.  Possibly add (end) argument to getStyleAttributes?\n-            StyleAttributeMap a = getStyleAttributeMap(resolver, start);\n-            StyledInput in = StyledInput.of(text, a);\n-            return replace(resolver, start, end, in, allowUndo);\n-        }\n-        return null;\n+        checkWritable();\n+\n+        \/\/ TODO pick the lowest from start,end.  Possibly add (end) argument to getStyleAttributes?\n+        StyleAttributeMap a = getStyleAttributeMap(resolver, start);\n+        StyledInput in = StyledInput.of(text, a);\n+        return replace(resolver, start, end, in, allowUndo);\n@@ -619,0 +627,1 @@\n+     * @throws UnsupportedOperationException if the model is not {@link #isWritable() writable}\n@@ -621,8 +630,1 @@\n-        if (isUserEditable()) {\n-            \/\/ TODO clamp to document boundaries\n-            int cmp = start.compareTo(end);\n-            if (cmp > 0) {\n-                TextPos p = start;\n-                start = end;\n-                end = p;\n-            }\n+        checkWritable();\n@@ -630,1 +632,7 @@\n-            UndoableChange ch = allowUndo ? UndoableChange.create(this, start, end) : null;\n+        \/\/ TODO clamp to document boundaries\n+        int cmp = start.compareTo(end);\n+        if (cmp > 0) {\n+            TextPos p = start;\n+            start = end;\n+            end = p;\n+        }\n@@ -632,3 +640,1 @@\n-            if (cmp != 0) {\n-                removeRange(start, end);\n-            }\n+        UndoableChange ch = allowUndo ? UndoableChange.create(this, start, end) : null;\n@@ -636,42 +642,3 @@\n-            int index = start.index();\n-            int offset = start.offset();\n-            int top = 0;\n-            int btm = 0;\n-\n-            StyledSegment seg;\n-            while ((seg = input.nextSegment()) != null) {\n-                switch (seg.getType()) {\n-                case LINE_BREAK:\n-                    insertLineBreak(index, offset);\n-                    index++;\n-                    offset = 0;\n-                    btm = 0;\n-                    break;\n-                case PARAGRAPH_ATTRIBUTES:\n-                    StyleAttributeMap pa = seg.getStyleAttributeMap(resolver);\n-                    setParagraphStyle(index, pa);\n-                    break;\n-                case REGION:\n-                    offset = 0;\n-                    btm = 0;\n-                    index++;\n-                    Supplier<Region> gen = seg.getParagraphNodeGenerator();\n-                    insertParagraph(index, gen);\n-                    break;\n-                case TEXT:\n-                    String text = seg.getText();\n-                    StyleAttributeMap a = seg.getStyleAttributeMap(resolver);\n-                    if (a == null) {\n-                        a = StyleAttributeMap.EMPTY;\n-                    } else {\n-                        a = filterUnsupportedAttributes(a);\n-                    }\n-                    int len = insertTextSegment(index, offset, text, a);\n-                    if (index == start.index()) {\n-                        top += len;\n-                    }\n-                    offset += len;\n-                    btm += len;\n-                    break;\n-                }\n-            }\n+        if (cmp != 0) {\n+            removeRange(start, end);\n+        }\n@@ -679,2 +646,20 @@\n-            int lines = index - start.index();\n-            if (lines == 0) {\n+        int index = start.index();\n+        int offset = start.offset();\n+        int top = 0;\n+        int btm = 0;\n+\n+        StyledSegment seg;\n+        while ((seg = input.nextSegment()) != null) {\n+            switch (seg.getType()) {\n+            case LINE_BREAK:\n+                insertLineBreak(index, offset);\n+                index++;\n+                offset = 0;\n+                btm = 0;\n+                break;\n+            case PARAGRAPH_ATTRIBUTES:\n+                StyleAttributeMap pa = seg.getStyleAttributeMap(resolver);\n+                setParagraphStyle(index, pa);\n+                break;\n+            case REGION:\n+                offset = 0;\n@@ -682,0 +667,19 @@\n+                index++;\n+                Supplier<Region> gen = seg.getParagraphNodeGenerator();\n+                insertParagraph(index, gen);\n+                break;\n+            case TEXT:\n+                String text = seg.getText();\n+                StyleAttributeMap a = seg.getStyleAttributeMap(resolver);\n+                if (a == null) {\n+                    a = StyleAttributeMap.EMPTY;\n+                } else {\n+                    a = filterUnsupportedAttributes(a);\n+                }\n+                int len = insertTextSegment(index, offset, text, a);\n+                if (index == start.index()) {\n+                    top += len;\n+                }\n+                offset += len;\n+                btm += len;\n+                break;\n@@ -683,0 +687,1 @@\n+        }\n@@ -684,1 +689,4 @@\n-            fireChangeEvent(start, end, top, lines, btm);\n+        int lines = index - start.index();\n+        if (lines == 0) {\n+            btm = 0;\n+        }\n@@ -686,5 +694,5 @@\n-            TextPos newEnd = new TextPos(index, offset);\n-            if (allowUndo) {\n-                add(ch, newEnd);\n-            }\n-            return newEnd;\n+        fireChangeEvent(start, end, top, lines, btm);\n+\n+        TextPos newEnd = new TextPos(index, offset);\n+        if (allowUndo) {\n+            add(ch, newEnd);\n@@ -692,1 +700,1 @@\n-        return null;\n+        return newEnd;\n@@ -707,0 +715,1 @@\n+     * @throws UnsupportedOperationException if the model is not {@link #isWritable() writable}\n@@ -709,6 +718,1 @@\n-        if (isUserEditable()) {\n-            if (start.compareTo(end) > 0) {\n-                TextPos p = start;\n-                start = end;\n-                end = p;\n-            }\n+        checkWritable();\n@@ -716,1 +720,5 @@\n-            attrs = filterUnsupportedAttributes(attrs);\n+        if (start.compareTo(end) > 0) {\n+            TextPos p = start;\n+            start = end;\n+            end = p;\n+        }\n@@ -718,3 +726,1 @@\n-            TextPos evStart;\n-            TextPos evEnd;\n-            boolean changed;\n+        attrs = filterUnsupportedAttributes(attrs);\n@@ -722,10 +728,14 @@\n-            StyleAttributeMap pa = StyleAttributeMapHelper.getParagraphAttrs(attrs);\n-            if (pa == null) {\n-                evStart = start;\n-                evEnd = end;\n-                changed = false;\n-            } else {\n-                evStart = new TextPos(start.index(), 0, 0, true);\n-                evEnd = getEndOfParagraphTextPos(end.index());\n-                changed = true;\n-            }\n+        TextPos evStart;\n+        TextPos evEnd;\n+        boolean changed;\n+\n+        StyleAttributeMap pa = StyleAttributeMapHelper.getParagraphAttrs(attrs);\n+        if (pa == null) {\n+            evStart = start;\n+            evEnd = end;\n+            changed = false;\n+        } else {\n+            evStart = new TextPos(start.index(), 0, 0, true);\n+            evEnd = getEndOfParagraphTextPos(end.index());\n+            changed = true;\n+        }\n@@ -733,1 +743,1 @@\n-            UndoableChange ch = UndoableChange.create(this, evStart, evEnd);\n+        UndoableChange ch = UndoableChange.create(this, evStart, evEnd);\n@@ -735,5 +745,4 @@\n-            if (pa != null) {\n-                \/\/ set paragraph attributes\n-                for (int ix = start.index(); ix <= end.index(); ix++) {\n-                    setParagraphStyle(ix, pa);\n-                }\n+        if (pa != null) {\n+            \/\/ set paragraph attributes\n+            for (int ix = start.index(); ix <= end.index(); ix++) {\n+                setParagraphStyle(ix, pa);\n@@ -741,0 +750,1 @@\n+        }\n@@ -742,8 +752,11 @@\n-            \/\/ apply character styles\n-            StyleAttributeMap ca = StyleAttributeMapHelper.getCharacterAttrs(attrs);\n-            if (ca != null) {\n-                int ix = start.index();\n-                if (ix == end.index()) {\n-                    applyStyle(ix, start.offset(), end.offset(), attrs, mergeAttributes);\n-                } else {\n-                    applyStyle(ix, start.offset(), Integer.MAX_VALUE, attrs, mergeAttributes);\n+        \/\/ apply character styles\n+        StyleAttributeMap ca = StyleAttributeMapHelper.getCharacterAttrs(attrs);\n+        if (ca != null) {\n+            int ix = start.index();\n+            if (ix == end.index()) {\n+                applyStyle(ix, start.offset(), end.offset(), attrs, mergeAttributes);\n+            } else {\n+                applyStyle(ix, start.offset(), Integer.MAX_VALUE, attrs, mergeAttributes);\n+                ix++;\n+                while (ix < end.index()) {\n+                    applyStyle(ix, 0, Integer.MAX_VALUE, attrs, mergeAttributes);\n@@ -751,5 +764,0 @@\n-                    while (ix < end.index()) {\n-                        applyStyle(ix, 0, Integer.MAX_VALUE, attrs, mergeAttributes);\n-                        ix++;\n-                    }\n-                    applyStyle(ix, 0, end.offset(), attrs, mergeAttributes);\n@@ -757,1 +765,1 @@\n-                changed = true;\n+                applyStyle(ix, 0, end.offset(), attrs, mergeAttributes);\n@@ -759,0 +767,2 @@\n+            changed = true;\n+        }\n@@ -760,4 +770,3 @@\n-            if (changed) {\n-                fireStyleChangeEvent(evStart, evEnd);\n-                add(ch, end);\n-            }\n+        if (changed) {\n+            fireStyleChangeEvent(evStart, evEnd);\n+            add(ch, end);\n@@ -823,0 +832,1 @@\n+     * @throws UnsupportedOperationException if the model is not {@link #isWritable() writable}\n@@ -846,0 +856,1 @@\n+     * @throws UnsupportedOperationException if the model is not {@link #isWritable() writable}\n@@ -938,1 +949,2 @@\n-     * @throws UnsupportedOperationException when the data format is not supported by the model\n+     * @throws UnsupportedOperationException when the data format is not supported by the model,\n+     *         or the model is not {@link StyledTextModel#isWritable() writable}\n@@ -969,0 +981,6 @@\n+\n+    private void checkWritable() {\n+        if (!isWritable()) {\n+            throw new UnsupportedOperationException(\"the model is not writeable\");\n+        }\n+    }\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/model\/StyledTextModel.java","additions":137,"deletions":119,"binary":false,"changes":256,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    public final boolean isUserEditable() {\n+    public final boolean isWritable() {\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/model\/StyledTextModelViewOnlyBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -137,1 +137,4 @@\n-                return !r.canEdit();\n+                if (r.isEditable() && (r.getModel() != null) && (r.getModel().isWritable())) {\n+                    return false;\n+                }\n+                return true;\n@@ -304,1 +307,1 @@\n-            if (r.canEdit()) {\n+            if (r.isEditable()) {\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/Actions.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-    public boolean isUserEditable() {\n+    public boolean isWritable() {\n","filename":"tests\/manual\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/NotebookModelStacked.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}