{"files":[{"patch":"@@ -37,2 +37,2 @@\n-    SKIN_LOW(2000),\n-    USER_LOW(1000);\n+    SKIN_LOW(2000), \/\/ not used, reserved for SkinInputMap.addHandlerLast\n+    USER_LOW(1000); \/\/ not used, reserved for InputMap.addHandlerLast\n","filename":"modules\/jfx.incubator.input\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/input\/EventHandlerPriority.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * Class provides a convenient foundation for the stateful behaviors.\n+ * This convenience class provides a helpful foundation for the stateful behavior implementations.\n@@ -209,13 +209,0 @@\n-    \/**\n-     * Adds an event handler for the specified event type, in the context of this Behavior.\n-     * This event handler will get invoked after all handlers added via map() methods.\n-     *\n-     * @param <T> the actual event type\n-     * @param type the event type\n-     * @param consume determines whether the matching event is consumed or not\n-     * @param handler the event handler\n-     *\/\n-    protected final <T extends Event> void addHandlerLast(EventType<T> type, boolean consume, EventHandler<T> handler) {\n-        getSkinInputMap().addHandler(type, consume, handler);\n-    }\n-\n@@ -235,13 +222,0 @@\n-    \/**\n-     * Adds an event handler for the specific event criteria, in the context of this Behavior.\n-     * This event handler will get invoked after all handlers added via map() methods.\n-     *\n-     * @param <T> the actual event type\n-     * @param criteria the matching criteria\n-     * @param consume determines whether the matching event is consumed or not\n-     * @param h the event handler\n-     *\/\n-    protected final <T extends Event> void addHandlerLast(EventCriteria<T> criteria, boolean consume, EventHandler<T> h) {\n-        getSkinInputMap().addHandler(criteria, consume, h);\n-    }\n-\n","filename":"modules\/jfx.incubator.input\/src\/main\/java\/jfx\/incubator\/scene\/control\/input\/BehaviorBase.java","additions":1,"deletions":27,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -112,13 +112,0 @@\n-    \/**\n-     * Adds an event handler for the specified event type, at the control level.\n-     * This event handler will get invoked after all handlers added via map() methods.\n-     * This mapping always consumes the matching event.\n-     *\n-     * @param <T> the actual event type\n-     * @param type the event type\n-     * @param handler the event handler\n-     *\/\n-    public <T extends Event> void addHandlerLast(EventType<T> type, EventHandler<T> handler) {\n-        extendHandler(type, handler, EventHandlerPriority.USER_LOW);\n-    }\n-\n","filename":"modules\/jfx.incubator.input\/src\/main\/java\/jfx\/incubator\/scene\/control\/input\/InputMap.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -79,13 +79,0 @@\n-    \/**\n-     * Adds an event handler for the specified event type, in the context of this skin.\n-     * This event handler will get invoked after all handlers added via map() methods.\n-     *\n-     * @param <T> the actual event type\n-     * @param type the event type\n-     * @param consume determines whether the matching event is consumed or not\n-     * @param handler the event handler\n-     *\/\n-    public final <T extends Event> void addHandlerLast(EventType<T> type, boolean consume, EventHandler<T> handler) {\n-        addHandler(type, consume, EventHandlerPriority.SKIN_LOW, handler);\n-    }\n-\n@@ -105,13 +92,0 @@\n-    \/**\n-     * Adds an event handler for the specific event criteria, in the context of this skin.\n-     * This event handler will get invoked after all handlers added via map() methods.\n-     *\n-     * @param <T> the actual event type\n-     * @param criteria the matching criteria\n-     * @param consume determines whether the matching event is consumed or not\n-     * @param h the event handler\n-     *\/\n-    public final <T extends Event> void addHandlerLast(EventCriteria<T> criteria, boolean consume, EventHandler<T> h) {\n-        addHandler(criteria, consume, EventHandlerPriority.SKIN_LOW, h);\n-    }\n-\n","filename":"modules\/jfx.incubator.input\/src\/main\/java\/jfx\/incubator\/scene\/control\/input\/SkinInputMap.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"}]}