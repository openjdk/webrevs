{"files":[{"patch":"@@ -67,1 +67,1 @@\n-    public boolean isUserEditable() {\n+    public boolean isWritable() {\n","filename":"apps\/samples\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/JsonContentWithAsyncUpdate.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3444,1 +3444,1 @@\n- * Rich Text Area                                                              *\n+ * Rich Text Area  (Incubator)                                                 *\n","filename":"modules\/javafx.controls\/src\/main\/resources\/com\/sun\/javafx\/scene\/control\/skin\/modena\/modena.css","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,2 @@\n- * Caching StyleResolver caches conversion results to avoid re-querying for the same information.\n+ * Caching StyleResolver caches CSSStyle to StyleAttribute conversion results\n+ * to avoid re-querying for the same information.\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/CachingStyleResolver.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -262,1 +262,1 @@\n-            return 20;\n+            return 20; \/\/ any reasonable non-zero number would work\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/CellArrangement.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n- * <li>underline<\/li>\n@@ -73,1 +72,2 @@\n-            return f.underlineShape(start, end);\n+            \/\/ never happens\n+            return new PathElement[0];\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/HighlightShape.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    \/\/ FIX remove\n+    \/\/ FIX to be removed later\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/RTAccessibilityHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n- * CodeArea is an editable text component which supports styling (syntax highlighting) of plain text.\n+ * CodeArea is an editable text component which supports styling (for example, syntax highlighting) of plain text.\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/CodeArea.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+     *\n@@ -45,1 +46,1 @@\n-     * @param offset the text offset\n+     * @param offset the offset in the text\n@@ -47,1 +48,1 @@\n-     * @param leading true if leading\n+     * @param leading the bias relative to the character at charIndex\n@@ -64,1 +65,2 @@\n-     * Constructs a new text position.\n+     * Creates a new text position.\n+     *\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/TextPos.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-         * @return number of text lines\n+         * @return the number paragraphs\n@@ -68,0 +68,1 @@\n+         * The caller guarantees that this method is only called when the content is writable.\n@@ -79,0 +80,1 @@\n+         * The caller guarantees that this method is only called when the content is writable.\n@@ -86,2 +88,3 @@\n-         * This method gets called only if the model is editable.\n-         * The caller guarantees that {@code start} precedes {@code end}.\n+         * Removes the specified range.\n+         * The caller guarantees that this method is only called when the content is writable,\n+         * and that {@code start} precedes {@code end}.\n@@ -95,2 +98,2 @@\n-         * Determines whether this content supports modification by the user.\n-         * @return true if editable\n+         * Determines whether this content is writable (i.e. supports modification).\n+         * @return true if writable\n@@ -98,1 +101,1 @@\n-        public boolean isUserEditable();\n+        public boolean isWritable();\n@@ -151,1 +154,1 @@\n-     * Determines whether the model is user-editable.\n+     * Determines whether the model is writable.\n@@ -153,1 +156,1 @@\n-     * This method calls {@link BasicTextModel.Content#isUserEditable()}.\n+     * This method calls {@link BasicTextModel.Content#isWritable()}.\n@@ -155,1 +158,1 @@\n-     * @return true if the model is user-editable\n+     * @return true if the model is writable\n@@ -159,1 +162,1 @@\n-        return content.isUserEditable();\n+        return content.isWritable();\n@@ -289,1 +292,1 @@\n-        public boolean isUserEditable() {\n+        public boolean isWritable() {\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/model\/BasicTextModel.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"}]}