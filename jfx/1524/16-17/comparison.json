{"files":[{"patch":"@@ -17,0 +17,1 @@\n+|ERROR_FEEDBACK            |Provides audio and\/or visual error feedback\n","filename":"doc-files\/behavior\/RichTextAreaBehavior.md","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1195,1 +1195,1 @@\n-                RichUtils.provideErrorFeedback(control, e);\n+                control.errorFeedback();\n@@ -1233,1 +1233,1 @@\n-                    RichUtils.provideErrorFeedback(control, e);\n+                    control.errorFeedback();\n@@ -1261,1 +1261,1 @@\n-            RichUtils.provideErrorFeedback(control, e);\n+            control.errorFeedback();\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/RichTextAreaBehavior.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -448,24 +448,0 @@\n-    \/**\n-     * Invoked when the user attempts an invalid operation,\n-     * such as pasting into an uneditable <code>TextInputControl<\/code>\n-     * that has focus. The default implementation beeps.\n-     *\n-     * @param originator the <code>Node<\/code> the error occurred in, may be <code>null<\/code>\n-     *                   indicating the error condition is not directly associated with a <code>Node<\/code>\n-     * @param error the exception thrown (can be null)\n-     *\/\n-    \/\/ TODO this probably should be in Platform\n-    \/\/ TODO alternatively, we can add a similarly named method to the RichTextArea\n-    public static void provideErrorFeedback(Node originator, Throwable error) {\n-        beep();\n-        if (error != null) {\n-            \/\/ TODO should be using logging\n-            error.printStackTrace();\n-        }\n-    }\n-\n-    \/** Emits a short audible alert, if supported by the platform. *\/\n-    public static void beep() {\n-        \/\/ TODO not supported in FX\n-    }\n-\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/util\/RichUtils.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-        \/** Deletes paragraph at the caret, or selected paragraphs *\/\n+        \/** Deletes paragraph at the caret, or selected paragraphs. *\/\n@@ -187,1 +187,1 @@\n-        \/** Clears any existing selection by moving anchor to the caret position *\/\n+        \/** Clears any existing selection by moving anchor to the caret position. *\/\n@@ -189,1 +189,3 @@\n-        \/** Focus the next focusable node *\/\n+        \/** Provides audio and\/or visual error feedback. *\/\n+        public static final FunctionTag ERROR_FEEDBACK = new FunctionTag();\n+        \/** Focus the next focusable node. *\/\n@@ -191,1 +193,1 @@\n-        \/** Focus the previous focusable node *\/\n+        \/** Focus the previous focusable node. *\/\n@@ -1095,1 +1097,2 @@\n-     * This method does nothing if either control or the model is not editable, or the caret position is {@code null}.\n+     * This method does nothing if the control is not editable, the model is either {@code null} or not writable,\n+     * or the caret position is {@code null}.\n@@ -1171,2 +1174,0 @@\n-    \/\/ TODO javafx does not support the 'beep' functionality.  perhaps we should create a Tag.ERROR\n-    \/\/ for the application to provide audiovisual error feedback?\n@@ -1263,0 +1264,10 @@\n+    \/**\n+     * Provides audio and\/or visual error feedback.  The default implementation does nothing.\n+     *\n+     * This action can be changed by remapping the default behavior via {@link InputMap}.\n+     * @see RichTextArea.Tags#ERROR_FEEDBACK\n+     *\/\n+    public void errorFeedback() {\n+        execute(Tags.ERROR_FEEDBACK);\n+    }\n+\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/RichTextArea.java","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"}]}