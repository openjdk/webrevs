{"files":[{"patch":"@@ -36,1 +36,0 @@\n-import jfx.incubator.scene.control.input.EventCriteria;\n","filename":"modules\/jfx.incubator.input\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/input\/BehaviorBase.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-package jfx.incubator.scene.control.input;\n+package com.sun.jfx.incubator.scene.control.input;\n","filename":"modules\/jfx.incubator.input\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/input\/EventCriteria.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"modules\/jfx.incubator.input\/src\/main\/java\/jfx\/incubator\/scene\/control\/input\/EventCriteria.java","status":"renamed"},{"patch":"@@ -38,1 +38,0 @@\n-import jfx.incubator.scene.control.input.EventCriteria;\n","filename":"modules\/jfx.incubator.input\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/input\/SkinInputMap.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import javafx.scene.control.Control;\n@@ -34,11 +35,11 @@\n- * The following example is taken from the {@code TabPane} class:\n- * <pre>    public class TabPane extends Control {\n- *      \/\/ Identifiers for methods available for customization via the InputMap.\n- *      public static final class Tag {\n- *          \/\/ Selects the first tab.\n- *          public static final FunctionTag SELECT_FIRST_TAB = new FunctionTag();\n- *          \/\/ Selects the last tab.\n- *          public static final FunctionTag SELECT_LAST_TAB = new FunctionTag();\n- *          \/\/ Selects the left tab: previous in LTR mode, next in RTL mode.\n- *          public static final FunctionTag SELECT_LEFT_TAB = new FunctionTag();\n- *          ...\n+ * Example:\n+ * <pre>\n+ * public class RichTextArea extends Control {\n+ *     public static class Tags {\n+ *         \/\/ Deletes the symbol before the caret.\n+ *         public static final FunctionTag BACKSPACE = new FunctionTag();\n+ *         \/\/ Copies selected text to the clipboard.\n+ *         public static final FunctionTag COPY = new FunctionTag();\n+ *         \/\/ Cuts selected text and places it to the clipboard.\n+ *         public static final FunctionTag CUT = new FunctionTag();\n+ *         ...\n","filename":"modules\/jfx.incubator.input\/src\/main\/java\/jfx\/incubator\/scene\/control\/input\/FunctionTag.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n- * working together with {@link SkinInputMap} supplied by the skin, which\n+ * working together with the input map managed by the skin, which\n@@ -60,1 +60,1 @@\n- * <li>map a key binding to a function, provided either by the application or the skin\n+ * <li>map a key binding to a function\n@@ -64,1 +64,0 @@\n- * <li>add an event handler at specific priority (applies to application-defined and skin-defined handlers)\n@@ -235,2 +234,2 @@\n-     * Registers a function for the given key binding.  This mapping will  take precedence\n-     * over any such mapping set by the skin.\n+     * Registers a function for the given key binding.  This mapping will take precedence\n+     * over the default mapping set by the skin.\n@@ -249,1 +248,1 @@\n-     * This function will take precedence over any function set by the skin.\n+     * This function will take precedence over any default function set by the skin.\n@@ -265,1 +264,1 @@\n-     * This method will take precedence over any function set by the skin.\n+     * This method will take precedence over any default function set by the skin.\n@@ -325,1 +324,1 @@\n-     * Collects all mapped key bindings (set either by the user or the behavior).\n+     * Collects all mapped key bindings.\n","filename":"modules\/jfx.incubator.input\/src\/main\/java\/jfx\/incubator\/scene\/control\/input\/InputMap.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -36,1 +36,7 @@\n- * Key binding provides a way to map key event to a hash table key for easy matching.\n+ * This immutable class represents a combination of keys which are used in key mappings.\n+ * A key combination consists of a main key and a set of modifier keys.\n+ * The main key can be specified by its {@link KeyCode key code}\n+ * or key character, the latter must match values returned by {@link KeyEvent#getCharacter()}.\n+ * A modifier key is {@code shift}, {@code control}, {@code alt}, {@code meta} or {@code shortcut}.\n+ * <p>\n+ * This class also provides a set of convenience methods for refering to keys found on macOS platform.\n@@ -40,1 +46,3 @@\n-public class KeyBinding implements EventCriteria<KeyEvent> {\n+public class KeyBinding\n+\/\/implements EventCriteria<KeyEvent> \n+{\n@@ -254,66 +262,0 @@\n-    \/**\n-     * Determines whether the shortcut key ({@code command} on macOS and {@code ctrl} elsewhere)\n-     * is down in this key binding.\n-     *\n-     * @return true if {@code shortcut} key is down in this key binding\n-     *\/\n-    public boolean isShortcut() {\n-        if (PlatformUtil.isMac()) {\n-            return modifiers.contains(KCondition.COMMAND);\n-        }\n-        return modifiers.contains(KCondition.CTRL);\n-    }\n-\n-    \/**\n-     * Determines whether {@code alt} key is down in this key binding.\n-     * @return true if {@code alt} key is down in this key binding\n-     *\/\n-    public boolean isAlt() {\n-        return modifiers.contains(KCondition.ALT);\n-    }\n-\n-    \/**\n-     * Determines whether {@code ctrl} key is down in this key binding.\n-     * @return true if {@code ctrl} key is down in this key binding\n-     *\/\n-    public boolean isCtrl() {\n-        return modifiers.contains(KCondition.CTRL);\n-    }\n-\n-    \/**\n-     * Determines whether {@code ⌘ command} key is down in this key binding.\n-     * Applies to macOS platform only.\n-     *\n-     * @return true if {@code ⌘ command} key is down in this key binding\n-     *\/\n-    public boolean isCommand() {\n-        return modifiers.contains(KCondition.COMMAND);\n-    }\n-\n-    \/**\n-     * Determines whether {@code meta} key is down in this key binding.\n-     * @return true if {@code meta} key is down in this key binding\n-     *\/\n-    public boolean isMeta() {\n-        return modifiers.contains(KCondition.META);\n-    }\n-\n-    \/**\n-     * Determines whether {@code option} key is down in this key binding.\n-     * Applies to macOS only.\n-     *\n-     * @return true if {@code option} key is down in this key binding\n-     *\/\n-    public boolean isOption() {\n-        return modifiers.contains(KCondition.OPTION);\n-    }\n-\n-    \/**\n-     * Determines whether {@code shift} key is down in this key binding.\n-     *\n-     * @return true if {@code shift} key is down in this key binding\n-     *\/\n-    public boolean isShift() {\n-        return modifiers.contains(KCondition.SHIFT);\n-    }\n-\n@@ -342,1 +284,2 @@\n-     * Creates a {@link Builder} with the specified KeyCode.\n+     * Creates a {@link Builder} with the specified character.  The string must correspond to the\n+     * value returned by {@link KeyEvent#getCharacter()}.\n@@ -370,18 +313,0 @@\n-    \/**\n-     * Creates a Builder with a key pressed event.\n-     * @param c key code\n-     * @return Builder instance\n-     *\/\n-    public static Builder with(KeyCode c) {\n-        return builder(c);\n-    }\n-\n-    \/**\n-     * Creates a Builder with a key pressed event.\n-     * @param c character pressed\n-     * @return Builder instance\n-     *\/\n-    public static Builder with(String c) {\n-        return new Builder(c);\n-    }\n-\n@@ -518,15 +443,15 @@\n-    @Override\n-    public EventType<KeyEvent> getEventType() {\n-        if (isKeyPressed()) {\n-            return KeyEvent.KEY_PRESSED;\n-        } else if (isKeyReleased()) {\n-            return KeyEvent.KEY_RELEASED;\n-        } else {\n-            return KeyEvent.KEY_TYPED;\n-        }\n-    }\n-\n-    @Override\n-    public boolean isEventAcceptable(KeyEvent ev) {\n-        return equals(KeyBinding.from(ev));\n-    }\n+\/\/    @Override\n+\/\/    public EventType<KeyEvent> getEventType() {\n+\/\/        if (isKeyPressed()) {\n+\/\/            return KeyEvent.KEY_PRESSED;\n+\/\/        } else if (isKeyReleased()) {\n+\/\/            return KeyEvent.KEY_RELEASED;\n+\/\/        } else {\n+\/\/            return KeyEvent.KEY_TYPED;\n+\/\/        }\n+\/\/    }\n+\/\/\n+\/\/    @Override\n+\/\/    public boolean isEventAcceptable(KeyEvent ev) {\n+\/\/        return equals(KeyBinding.from(ev));\n+\/\/    }\n","filename":"modules\/jfx.incubator.input\/src\/main\/java\/jfx\/incubator\/scene\/control\/input\/KeyBinding.java","additions":27,"deletions":102,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n- * <li>supports stateful and stateless (fully static) behavior implementations\n@@ -40,3 +39,0 @@\n- * See\n- * <a href=\"https:\/\/github.com\/andy-goryachev-oracle\/Test\/blob\/main\/doc\/InputMap\/InputMapV3.md\">Public InputMap Proposal (v3)<\/a>\n- * for more info.\n","filename":"modules\/jfx.incubator.input\/src\/main\/java\/jfx\/incubator\/scene\/control\/input\/package-info.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -220,1 +220,1 @@\n-            registerKey(KeyBinding.with(KeyCode.Z).shift().command().build(), RichTextArea.Tags.REDO);\n+            registerKey(KeyBinding.builder(KeyCode.Z).shift().command().build(), RichTextArea.Tags.REDO);\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/RichTextAreaBehavior.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}