{"files":[{"patch":"@@ -27,0 +27,1 @@\n+import java.util.function.BooleanSupplier;\n@@ -36,1 +37,2 @@\n- * This convenience class provides a helpful foundation for the stateful behavior implementations.\n+ * This class provides convenient foundation for custom Control developers intended to simplify writing\n+ * stateful behaviors.\n@@ -116,1 +118,1 @@\n-     * This method allows for conditional consumption of the {@code KeyEvents}.\n+     * The event which triggered execution of the function will be consumed if the function returns {@code true}.\n@@ -121,1 +123,1 @@\n-    protected final void registerFunction(FunctionTag tag, FunctionHandler function) {\n+    protected final void registerFunction(FunctionTag tag, BooleanSupplier function) {\n@@ -164,1 +166,1 @@\n-     * This method allows for conditional consumption of the {@code KeyEvents}.\n+     * The event which triggered execution of the function will be consumed if the function returns {@code true}.\n@@ -170,1 +172,1 @@\n-    protected final void register(FunctionTag tag, KeyBinding k, FunctionHandler func) {\n+    protected final void register(FunctionTag tag, KeyBinding k, BooleanSupplier func) {\n","filename":"modules\/jfx.incubator.input\/src\/main\/java\/jfx\/incubator\/scene\/control\/input\/BehaviorBase.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,1 +31,2 @@\n- * Determines whether an event passes certain criteria.\n+ * This interface enables wider control in specifying conditional matching logic when adding skin\/behavior handlers\n+ * via {@link SkinInputMap#addHandler(EventCriteria, boolean, javafx.event.EventHandler) SkinInputMap.addHandler()}.\n","filename":"modules\/jfx.incubator.input\/src\/main\/java\/jfx\/incubator\/scene\/control\/input\/EventCriteria.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jfx.incubator.scene.control.input;\n-\n-\/**\n- * A functional interface which denotes code associated with a {@code FunctionTag} or a key binding.\n- * This handler allows for controlling whether the matching event\n- * will be consumed or not.\n- *\n- * @since 999 TODO\n- *\/\n-@FunctionalInterface\n-public interface FunctionHandler {\n-    \/**\n-     * Handles the event associated with a function tag or a key binding.\n-     * @return true to consume the key event, false otherwise\n-     *\/\n-    public boolean handleFunction();\n-}\n","filename":"modules\/jfx.incubator.input\/src\/main\/java\/jfx\/incubator\/scene\/control\/input\/FunctionHandler.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.function.BooleanSupplier;\n@@ -193,2 +194,2 @@\n-        } else if (x instanceof FunctionHandler h) {\n-            return h.handleFunction();\n+        } else if (x instanceof BooleanSupplier h) {\n+            return h.getAsBoolean();\n","filename":"modules\/jfx.incubator.input\/src\/main\/java\/jfx\/incubator\/scene\/control\/input\/InputMap.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.function.BooleanSupplier;\n@@ -220,2 +221,2 @@\n-        } else if (x instanceof FunctionHandler f) {\n-            return f.handleFunction();\n+        } else if (x instanceof BooleanSupplier f) {\n+            return f.getAsBoolean();\n@@ -293,1 +294,2 @@\n-         * This method allows for controlling whether the matching event will be consumed or not.\n+         * <p>\n+         * The event which triggered execution of the function will be consumed if the function returns {@code true}.\n@@ -298,1 +300,1 @@\n-        public final void registerFunction(FunctionTag tag, FunctionHandler function) {\n+        public final void registerFunction(FunctionTag tag, BooleanSupplier function) {\n","filename":"modules\/jfx.incubator.input\/src\/main\/java\/jfx\/incubator\/scene\/control\/input\/SkinInputMap.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"}]}