{"files":[{"patch":"@@ -629,2 +629,2 @@\n-            return minimum ? computeChildMinAreaHeight(child, -1, margin, width, false):\n-                                   computeChildPrefAreaHeight(child, -1, margin, width, false);\n+            return minimum ? computeChildMinAreaHeight(child, -1, margin, width, true):\n+                                   computeChildPrefAreaHeight(child, -1, margin, width, true);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BorderPane.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -346,0 +346,7 @@\n+        \/*\n+         * Note: there is a mix of horizontal and vertical biased children. The BorderPane\n+         * will favor the bias of the center node above all (see its implementation). This\n+         * means the VERTICAL biased controls will have their bias ignored as they differ\n+         * from the center's bias.\n+         *\/\n+\n@@ -351,1 +358,7 @@\n-        assertEquals(20 \/*t*\/ + 200 \/*c*\/ + 20 \/*b*\/, borderpane.minHeight(300), 1e-10);\n+\n+        \/\/ Top: at a width of 300, the biased control becomes 7 high (6.666)\n+        \/\/ Bottom: at a width of 300, the biased control becomes 14 high (13.333)\n+        \/\/ Center: At a width of 300, the biased control becomes 134 high (200 * 200 \/ 300)\n+        \/\/ Left\/Right: bias differs from center, so the simple height value is used (100 for left, 200 for right)\n+\n+        assertEquals(7 \/*t*\/ + Math.max(134 \/*c*\/, Math.max(100 \/*l*\/, 200 \/*r*\/)) + 14 \/*b*\/, borderpane.minHeight(300), 1e-10);\n@@ -457,3 +470,17 @@\n-        \/\/ Preferred height should be preferred height of top + bottom, plus max of left\/center\/right\n-        \/\/ In other words: 100 + max(100, 100, 100) + 100\n-        assertEquals(300, borderpane.prefHeight(500), 1e-200);\n+        \/*\n+         * Preferred height calculation is always top + bottom + max(left, center, right).\n+         * It proceeds as follows:\n+         * - Top is biased, and with a width of 500, the top height is 40 ( = 200 * 100 \/ 500)\n+         * - Bottom is unbiased, and has a preferred height of 100\n+         * - Left and Right are unbiased, and have a preferred height of 100\n+         * - Center is biased. The width for the bias calculation is 500 minus the preferred widths\n+         *   of the left and right controls: 500 - 100 - 100 = 300\n+         * - With a width of 300 for the biased calculation, the center height becomes 67 ( = 200 * 100 \/ 300)\n+         *\n+         * Adding those together: top(40) + bottom(100) + max(left(100), right(100), center(67)) = 240\n+         *\n+         * The center's height is ignored in this as for the width available it would be lower than\n+         * the preferred height of either the left or right control.\n+         *\/\n+\n+        assertEquals(240, borderpane.prefHeight(500), 1e-200);\n@@ -536,7 +563,17 @@\n-        \/\/ The preferred height of the center pane at 100 pixels wide (which\n-        \/\/ is what is left over from the given 300 pixels after subtracting the\n-        \/\/ left and right preferred widths) will be 200. The middle area will\n-        \/\/ then contribute 200 pixels to the preferred height of the BorderPane\n-        \/\/ as the left and right areas only need 100 pixels of height. The top\n-        \/\/ and bottom areas contribute 100 pixels each. 100 + 200 + 100 = 400.\n-        assertEquals(400, borderpane.prefHeight(300), 1e-200);\n+        \/*\n+         * Preferred height calculation is always top + bottom + max(left, center, right).\n+         * It proceeds as follows:\n+         * - Top is biased, and with a width of 300, the top height is 67 ( = 200 * 100 \/ 300)\n+         * - Bottom is unbiased, and has a preferred height of 100\n+         * - Left and Right are unbiased, and have a preferred height of 100\n+         * - Center is biased. The width for the bias calculation is 300 minus the preferred widths\n+         *   of the left and right controls: 300 - 100 - 100 = 100\n+         * - With a width of 100 for the biased calculation, the center height becomes 200 ( = 200 * 100 \/ 100)\n+         *\n+         * Adding those together: top(67) + bottom(100) + max(left(100), right(100), center(200)) = 367\n+         *\n+         * The center's height is now overriding the height of the left and right controls as\n+         * with the low amount of width available, it needs to become higher.\n+         *\/\n+\n+        assertEquals(367, borderpane.prefHeight(300), 1e-200);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BorderPaneTest.java","additions":48,"deletions":11,"binary":false,"changes":59,"status":"modified"}]}