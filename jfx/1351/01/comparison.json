{"files":[{"patch":"@@ -53,1 +53,2 @@\n-    BOOL shouldProcessKeyEvent;\n+    BOOL handlingKeyEvent;\n+    BOOL didCommitText;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassView3D.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -248,1 +248,2 @@\n-        self->shouldProcessKeyEvent = YES;\n+        self->handlingKeyEvent = NO;\n+        self->didCommitText = NO;\n@@ -381,6 +382,3 @@\n-    \/\/ First check if system Input Method Engine needs to handle this event\n-    NSInputManager *inputManager = [NSInputManager currentInputManager];\n-    if ([inputManager wantsToHandleMouseEvents]) {\n-        if ([inputManager handleMouseEvent:theEvent]) {\n-            return;\n-        }\n+    \/\/ First check if system Input Context needs to handle this event\n+    if ([self.inputContext handleEvent:theEvent]) {\n+        return;\n@@ -477,1 +475,1 @@\n-    if ([theEvent type] == NSKeyDown && [chars length] > 0)\n+    if ([theEvent type] == NSEventTypeKeyDown && [chars length] > 0)\n@@ -480,1 +478,1 @@\n-        if ([theEvent modifierFlags] & NSCommandKeyMask &&\n+        if ([theEvent modifierFlags] & NSEventModifierFlagCommand &&\n@@ -514,1 +512,11 @@\n-    if (![[self inputContext] handleEvent:theEvent] || shouldProcessKeyEvent) {\n+    handlingKeyEvent = YES;\n+    didCommitText = NO;\n+    BOOL inputContextHandledEvent = (imEnabled && [self.inputContext handleEvent:theEvent]);\n+    handlingKeyEvent = NO;\n+\n+    if (didCommitText) {\n+        \/\/ Exit composition mode\n+        didCommitText = NO;\n+        nsAttrBuffer = [nsAttrBuffer initWithString: @\"\"];\n+    }\n+    else if (!inputContextHandledEvent || (nsAttrBuffer.length == 0)) {\n@@ -518,1 +526,0 @@\n-    shouldProcessKeyEvent = YES;\n@@ -716,2 +723,5 @@\n-    [self unmarkText];\n-    self->imEnabled = enabled;\n+    if (enabled != imEnabled) {\n+        [self unmarkText];\n+        [self.inputContext discardMarkedText];\n+        imEnabled = enabled;\n+    }\n@@ -727,3 +737,3 @@\n-    \/\/ In case the IM was stopped with a mouse and the next typed key\n-    \/\/ is a special command key (backspace, tab, etc.)\n-    self->shouldProcessKeyEvent = YES;\n+    \/\/ According to Apple an NSResponder will send this up the responder chain\n+    \/\/ but a text input client should not. So we ignore this which avoids an\n+    \/\/ annoying beep.\n@@ -736,0 +746,1 @@\n+        self->didCommitText = YES;\n@@ -737,3 +748,0 @@\n-        self->shouldProcessKeyEvent = NO;\n-    } else {\n-        self->shouldProcessKeyEvent = YES;\n@@ -741,1 +749,11 @@\n-    self->nsAttrBuffer = [self->nsAttrBuffer initWithString:@\"\"];\n+\n+    \/\/ If a user tries to enter an invalid character using a dead key\n+    \/\/ combination (like, say, a q with a grave accent) insertText will be\n+    \/\/ called twice on the last keystroke, first with the accent and then\n+    \/\/ with the letter. We want both inserts to be handled as committed text\n+    \/\/ so we defer exiting composition mode until the keystroke is processed.\n+    \/\/ We only defer on keystrokes because sometimes insertText is called\n+    \/\/ when a mouse event dismisses the IM window.\n+    if (!self->handlingKeyEvent) {\n+        self->nsAttrBuffer = [self->nsAttrBuffer initWithString:@\"\"];\n+    }\n@@ -747,1 +765,0 @@\n-        self->shouldProcessKeyEvent = YES;\n@@ -757,1 +774,0 @@\n-    self->shouldProcessKeyEvent = NO;\n@@ -767,1 +783,0 @@\n-    self->shouldProcessKeyEvent = YES;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassView3D.m","additions":38,"deletions":23,"binary":false,"changes":61,"status":"modified"}]}