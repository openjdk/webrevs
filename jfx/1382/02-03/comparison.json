{"files":[{"patch":"@@ -829,2 +829,1 @@\n-     * If this Stage is {@code maximized} or in {@code fullScreen}, it is not sized and the request\n-     * is ignored.\n+     * If this Stage is {@code maximized} or in {@code fullScreen}, size to scene is not allowed.\n@@ -833,6 +832,2 @@\n-    public void sizeToScene() {\n-        if (isMaximized() || isFullScreen()) {\n-            return;\n-        }\n-\n-        super.sizeToScene();\n+    boolean isSizeToSceneAllowed() {\n+        return !isMaximized() && !isFullScreen();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/stage\/Stage.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -297,1 +297,1 @@\n-        if (getScene() != null && peer != null) {\n+        if (isSizeToSceneAllowed() && getScene() != null && peer != null) {\n@@ -306,0 +306,9 @@\n+    \/**\n+     * Determines whether the {@link #sizeToScene()} request is allowed or not.\n+     *\n+     * @return true if allowed, false otherwise\n+     *\/\n+    boolean isSizeToSceneAllowed() {\n+        return true;\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/stage\/Window.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,83 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package test.javafx.stage;\n-\n-import javafx.application.Application;\n-import javafx.application.Platform;\n-import javafx.geometry.Rectangle2D;\n-import javafx.scene.Scene;\n-import javafx.scene.control.Button;\n-import javafx.stage.Screen;\n-import javafx.stage.Stage;\n-import javafx.stage.WindowEvent;\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n-import test.util.Util;\n-\n-import java.util.concurrent.CountDownLatch;\n-\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n-public class SizeToSceneFullscreenTest {\n-\n-    static CountDownLatch startupLatch = new CountDownLatch(1);\n-    static Stage stage;\n-\n-    public static class TestApp extends Application {\n-        @Override\n-        public void start(Stage primaryStage) throws Exception {\n-            primaryStage.setScene(new Scene(new Button()));\n-            stage = primaryStage;\n-            stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e ->\n-                    Platform.runLater(startupLatch::countDown));\n-            stage.setFullScreen(true);\n-            stage.sizeToScene();\n-            stage.show();\n-        }\n-    }\n-\n-    @BeforeAll\n-    public static void initFX() {\n-        Util.launch(startupLatch, TestApp.class);\n-    }\n-\n-    @AfterAll\n-    public static void teardown() {\n-        Util.shutdown(stage);\n-    }\n-\n-    @Test\n-    public void testInitialSizeFullscreen() {\n-        \/\/ Wait until everything is up.\n-        Util.sleep(5000);\n-\n-        Rectangle2D bounds = Screen.getPrimary().getBounds();\n-\n-        \/\/ There might be small inconsistencies because of decoration, so we expect the bounds to be equal or bigger.\n-        assertTrue(stage.getWidth() >= bounds.getWidth(), stage.getWidth() + \" >= \" + bounds.getWidth());\n-        assertTrue(stage.getHeight() >= bounds.getHeight(), stage.getHeight() + \" >= \" + bounds.getHeight());\n-    }\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/SizeToSceneFullscreenTest.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"},{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package test.javafx.stage;\n-\n-import javafx.application.Application;\n-import javafx.application.Platform;\n-import javafx.geometry.Rectangle2D;\n-import javafx.scene.Scene;\n-import javafx.scene.control.Button;\n-import javafx.stage.Screen;\n-import javafx.stage.Stage;\n-import javafx.stage.WindowEvent;\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n-import test.util.Util;\n-\n-import java.util.concurrent.CountDownLatch;\n-\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n-public class SizeToSceneMaximizeTest {\n-\n-    static CountDownLatch startupLatch = new CountDownLatch(1);\n-    static Stage stage;\n-\n-    public static class TestApp extends Application {\n-        @Override\n-        public void start(Stage primaryStage) throws Exception {\n-            primaryStage.setScene(new Scene(new Button()));\n-            stage = primaryStage;\n-            stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e ->\n-                    Platform.runLater(startupLatch::countDown));\n-            stage.setMaximized(true);\n-            stage.sizeToScene();\n-            stage.show();\n-        }\n-    }\n-\n-    @BeforeAll\n-    public static void initFX() {\n-        Util.launch(startupLatch, TestApp.class);\n-    }\n-\n-    @AfterAll\n-    public static void teardown() {\n-        Util.shutdown(stage);\n-    }\n-\n-    @Test\n-    public void testInitialSizeMaximized() {\n-        \/\/ Wait until everything is up.\n-        Util.sleep(5000);\n-\n-        Rectangle2D bounds = Screen.getPrimary().getVisualBounds();\n-\n-        \/\/ There might be small inconsistencies because of decoration, so we expect the bounds to be equal or bigger.\n-        assertTrue(stage.getWidth() >= bounds.getWidth(), stage.getWidth() + \" >= \" + bounds.getWidth());\n-        assertTrue(stage.getHeight() >= bounds.getHeight(), stage.getHeight() + \" >= \" + bounds.getHeight());\n-    }\n-\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/SizeToSceneMaximizeTest.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -0,0 +1,264 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.stage;\n+\n+import javafx.application.Platform;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.stage.Screen;\n+import javafx.stage.Stage;\n+import javafx.stage.WindowEvent;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import test.util.Util;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.function.Consumer;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class SizeToSceneTest {\n+\n+    private static final int ROOT_SIZE = 360;\n+\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n+    static Stage mainStage;\n+\n+    @BeforeAll\n+    public static void initFX() throws Exception {\n+        Platform.setImplicitExit(false);\n+        Util.startup(startupLatch, startupLatch::countDown);\n+    }\n+\n+    @AfterAll\n+    public static void teardown() {\n+        Util.shutdown();\n+    }\n+\n+    private static void assertStageScreenBounds() {\n+        Rectangle2D bounds = Screen.getPrimary().getVisualBounds();\n+\n+        \/\/ There might be small inconsistencies because of decoration, so we expect the bounds to be equal or bigger.\n+        assertTrue(mainStage.getWidth() >= bounds.getWidth(), mainStage.getWidth() + \" >= \" + bounds.getWidth());\n+        assertTrue(mainStage.getHeight() >= bounds.getHeight(), mainStage.getHeight() + \" >= \" + bounds.getHeight());\n+    }\n+\n+    private static void assertStageSceneBounds() {\n+        \/\/ There might be small inconsistencies because of decoration,\n+        \/\/ so we expect the size to be between (inclusive) 360 and 410.\n+        assertTrue(mainStage.getWidth() >= ROOT_SIZE, mainStage.getWidth() + \" >= \" + ROOT_SIZE);\n+        assertTrue(mainStage.getHeight() >= ROOT_SIZE, mainStage.getHeight() + \" >= \" + ROOT_SIZE);\n+\n+        int maxThreshold = ROOT_SIZE + 50;\n+        assertTrue(mainStage.getWidth() <= maxThreshold, mainStage.getWidth() + \" <= \" + maxThreshold);\n+        assertTrue(mainStage.getHeight() <= maxThreshold, mainStage.getHeight() + \" <= \" + maxThreshold);\n+    }\n+\n+    private void createAndShowStage(Consumer<Stage> stageConsumer) {\n+        final CountDownLatch shownLatch = new CountDownLatch(1);\n+\n+        Util.runAndWait(() -> {\n+            mainStage = new Stage();\n+            mainStage.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> shownLatch.countDown());\n+\n+            Button root = new Button();\n+            root.setMinSize(ROOT_SIZE, ROOT_SIZE);\n+            mainStage.setScene(new Scene(root));\n+\n+            stageConsumer.accept(mainStage);\n+        });\n+\n+        Util.waitForLatch(shownLatch, 5, \"Stage failed to show\");\n+    }\n+\n+    @Test\n+    void testInitialSizeOnMaximizedThenSizeToScene() {\n+        createAndShowStage(stage -> {\n+            stage.setMaximized(true);\n+            stage.sizeToScene();\n+            stage.show();\n+        });\n+\n+        assertStageScreenBounds();\n+    }\n+\n+    @Test\n+    void testInitialSizeOnFullscreenThenSizeToScene() {\n+        createAndShowStage(stage -> {\n+            stage.setFullScreen(true);\n+            stage.sizeToScene();\n+            stage.show();\n+        });\n+\n+        assertStageScreenBounds();\n+    }\n+\n+    @Test\n+    void testInitialSizeOnSizeToSceneThenMaximized() {\n+        createAndShowStage(stage -> {\n+            stage.sizeToScene();\n+            stage.setMaximized(true);\n+            stage.show();\n+        });\n+\n+        assertStageScreenBounds();\n+    }\n+\n+    @Test\n+    void testInitialSizeOnSizeToSceneThenFullscreen() {\n+        createAndShowStage(stage -> {\n+            stage.sizeToScene();\n+            stage.setFullScreen(true);\n+            stage.show();\n+        });\n+\n+        assertStageScreenBounds();\n+    }\n+\n+    @Test\n+    void testInitialSizeAfterShowSizeToSceneThenFullscreen() {\n+        createAndShowStage(stage -> {\n+            stage.show();\n+\n+            stage.sizeToScene();\n+            stage.setFullScreen(true);\n+        });\n+\n+        assertStageScreenBounds();\n+    }\n+\n+    @Test\n+    void testInitialSizeAfterShowSizeToSceneThenMaximized() {\n+        createAndShowStage(stage -> {\n+            stage.show();\n+\n+            stage.sizeToScene();\n+            stage.setMaximized(true);\n+        });\n+\n+        assertStageScreenBounds();\n+    }\n+\n+    @Test\n+    void testInitialSizeAfterShowFullscreenThenSizeToScene() {\n+        createAndShowStage(stage -> {\n+            stage.show();\n+\n+            stage.setFullScreen(true);\n+            stage.sizeToScene();\n+        });\n+\n+        assertStageScreenBounds();\n+    }\n+\n+    @Test\n+    void testInitialSizeAfterShowMaximizedThenSizeToScene() {\n+        createAndShowStage(stage -> {\n+            stage.show();\n+\n+            stage.setMaximized(true);\n+            stage.sizeToScene();\n+        });\n+\n+        assertStageScreenBounds();\n+    }\n+\n+    @Test\n+    void testInitialSizeOnSizeToScene() {\n+        createAndShowStage(stage -> {\n+            stage.sizeToScene();\n+            stage.show();\n+        });\n+\n+        assertStageSceneBounds();\n+    }\n+\n+    @Test\n+    void testInitialSizeFullscreenOnOffSizeToScene() {\n+        createAndShowStage(stage -> {\n+            stage.setWidth(100);\n+            stage.setHeight(100);\n+\n+            stage.setFullScreen(true);\n+            stage.sizeToScene();\n+            stage.setFullScreen(false);\n+\n+            stage.show();\n+        });\n+\n+        assertStageSceneBounds();\n+    }\n+\n+    @Test\n+    void testInitialSizeSizeToSceneFullscreenOnOff() {\n+        createAndShowStage(stage -> {\n+            stage.setWidth(100);\n+            stage.setHeight(100);\n+\n+            stage.sizeToScene();\n+            stage.setFullScreen(true);\n+            stage.setFullScreen(false);\n+\n+            stage.show();\n+        });\n+\n+        assertStageSceneBounds();\n+    }\n+\n+    @Test\n+    void testInitialSizeMaximizedOnOffSizeToScene() {\n+        createAndShowStage(stage -> {\n+            stage.setWidth(100);\n+            stage.setHeight(100);\n+\n+            stage.setMaximized(true);\n+            stage.sizeToScene();\n+            stage.setMaximized(false);\n+\n+            stage.show();\n+        });\n+\n+        assertStageSceneBounds();\n+    }\n+\n+    @Test\n+    void testInitialSizeSizeToSceneMaximizedOnOff() {\n+        createAndShowStage(stage -> {\n+            stage.setWidth(100);\n+            stage.setHeight(100);\n+\n+            stage.sizeToScene();\n+            stage.setMaximized(true);\n+            stage.setMaximized(false);\n+\n+            stage.show();\n+        });\n+\n+        assertStageSceneBounds();\n+    }\n+\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/SizeToSceneTest.java","additions":264,"deletions":0,"binary":false,"changes":264,"status":"added"}]}