{"files":[{"patch":"@@ -826,0 +826,15 @@\n+    \/**\n+     * {@inheritDoc}\n+     * <p>\n+     * If this Stage is {@code maximized} or in {@code fullScreen}, it is not sized and the request\n+     * is ignored.\n+     *\/\n+    @Override\n+    public void sizeToScene() {\n+        if (isMaximized() || isFullScreen()) {\n+            return;\n+        }\n+\n+        super.sizeToScene();\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/stage\/Stage.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.stage;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.stage.Screen;\n+import javafx.stage.Stage;\n+import javafx.stage.WindowEvent;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import test.util.Util;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class SizeToSceneFullscreenTest {\n+\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n+    static Stage stage;\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage primaryStage) throws Exception {\n+            primaryStage.setScene(new Scene(new Button()));\n+            stage = primaryStage;\n+            stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e ->\n+                    Platform.runLater(startupLatch::countDown));\n+            stage.setFullScreen(true);\n+            stage.sizeToScene();\n+            stage.show();\n+        }\n+    }\n+\n+    @BeforeAll\n+    public static void initFX() {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterAll\n+    public static void teardown() {\n+        Util.shutdown(stage);\n+    }\n+\n+    @Test\n+    public void testInitialSizeFullscreen() {\n+        \/\/ Wait until everything is up.\n+        Util.sleep(5000);\n+\n+        Rectangle2D bounds = Screen.getPrimary().getBounds();\n+\n+        \/\/ There might be small inconsistencies because of decoration, so we expect the bounds to be equal or bigger.\n+        assertTrue(stage.getWidth() >= bounds.getWidth(), stage.getWidth() + \" >= \" + bounds.getWidth());\n+        assertTrue(stage.getHeight() >= bounds.getHeight(), stage.getHeight() + \" >= \" + bounds.getHeight());\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/SizeToSceneFullscreenTest.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.stage;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.stage.Screen;\n+import javafx.stage.Stage;\n+import javafx.stage.WindowEvent;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import test.util.Util;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class SizeToSceneMaximizeTest {\n+\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n+    static Stage stage;\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage primaryStage) throws Exception {\n+            primaryStage.setScene(new Scene(new Button()));\n+            stage = primaryStage;\n+            stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e ->\n+                    Platform.runLater(startupLatch::countDown));\n+            stage.setMaximized(true);\n+            stage.sizeToScene();\n+            stage.show();\n+        }\n+    }\n+\n+    @BeforeAll\n+    public static void initFX() {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterAll\n+    public static void teardown() {\n+        Util.shutdown(stage);\n+    }\n+\n+    @Test\n+    public void testInitialSizeMaximized() {\n+        \/\/ Wait until everything is up.\n+        Util.sleep(5000);\n+\n+        Rectangle2D bounds = Screen.getPrimary().getVisualBounds();\n+\n+        \/\/ There might be small inconsistencies because of decoration, so we expect the bounds to be equal or bigger.\n+        assertTrue(stage.getWidth() >= bounds.getWidth(), stage.getWidth() + \" >= \" + bounds.getWidth());\n+        assertTrue(stage.getHeight() >= bounds.getHeight(), stage.getHeight() + \" >= \" + bounds.getHeight());\n+    }\n+\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/SizeToSceneMaximizeTest.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"}]}