{"files":[{"patch":"@@ -85,1 +85,1 @@\n-     * ListView, TableView\n+     * Virtualized controls\n@@ -89,1 +89,0 @@\n-    public static final String REFRESH = \"refreshKey\";\n@@ -91,0 +90,1 @@\n+    public static final String REBUILD = \"rebuildKey\";\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/Properties.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1035,2 +1035,2 @@\n-     * Calling {@code refresh()} forces the ListView control to recreate and\n-     * repopulate the cells necessary to populate the visual bounds of the control.\n+     * Calling {@code refresh()} forces the ListView control to repopulate the\n+     * cells necessary to populate the visual bounds of the control.\n@@ -1044,1 +1044,1 @@\n-        getProperties().put(Properties.RECREATE, Boolean.TRUE);\n+        getProperties().put(Properties.REBUILD, Boolean.TRUE);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ListView.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1766,2 +1766,2 @@\n-     * Calling {@code refresh()} forces the TableView control to recreate and\n-     * repopulate the cells necessary to populate the visual bounds of the control.\n+     * Calling {@code refresh()} forces the TableView control to repopulate the\n+     * cells necessary to populate the visual bounds of the control.\n@@ -1775,1 +1775,1 @@\n-        getProperties().put(Properties.RECREATE, Boolean.TRUE);\n+        getProperties().put(Properties.REBUILD, Boolean.TRUE);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableView.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2082,2 +2082,2 @@\n-     * Calling {@code refresh()} forces the TreeTableView control to recreate and\n-     * repopulate the cells necessary to populate the visual bounds of the control.\n+     * Calling {@code refresh()} forces the TreeTableView control to repopulate the\n+     * cells necessary to populate the visual bounds of the control.\n@@ -2091,1 +2091,1 @@\n-        getProperties().put(Properties.RECREATE, Boolean.TRUE);\n+        getProperties().put(Properties.REBUILD, Boolean.TRUE);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableView.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1112,2 +1112,2 @@\n-     * Calling {@code refresh()} forces the TreeView control to recreate and\n-     * repopulate the cells necessary to populate the visual bounds of the control.\n+     * Calling {@code refresh()} forces the TreeView control to repopulate the\n+     * cells necessary to populate the visual bounds of the control.\n@@ -1121,1 +1121,1 @@\n-        getProperties().put(Properties.RECREATE, Boolean.TRUE);\n+        getProperties().put(Properties.REBUILD, Boolean.TRUE);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeView.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -104,1 +104,0 @@\n-    private boolean needCellsRebuilt = true;\n@@ -120,4 +119,3 @@\n-        if (Properties.RECREATE.equals(c.getKey())) {\n-            needCellsRebuilt = true;\n-            getSkinnable().requestLayout();\n-            getSkinnable().getProperties().remove(Properties.RECREATE);\n+        if (Properties.REBUILD.equals(c.getKey())) {\n+            requestRebuildCells();\n+            getSkinnable().getProperties().remove(Properties.REBUILD);\n@@ -233,1 +231,1 @@\n-        properties.remove(Properties.RECREATE);\n+        properties.remove(Properties.REBUILD);\n@@ -284,3 +282,1 @@\n-        if (needCellsRebuilt) {\n-            flow.rebuildCells();\n-        } else if (needCellsReconfigured) {\n+        if (needCellsReconfigured) {\n@@ -290,1 +286,0 @@\n-        needCellsRebuilt = false;\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/ListViewSkin.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -155,1 +155,0 @@\n-    boolean needCellsRecreated = true;\n@@ -300,1 +299,0 @@\n-        properties.remove(Properties.REFRESH);\n@@ -302,0 +300,1 @@\n+        properties.remove(Properties.REBUILD);\n@@ -306,6 +305,2 @@\n-            if (Properties.REFRESH.equals(c.getKey())) {\n-                refreshView();\n-                getSkinnable().getProperties().remove(Properties.REFRESH);\n-            } else if (Properties.RECREATE.equals(c.getKey())) {\n-                needCellsRecreated = true;\n-                refreshView();\n+            if (Properties.RECREATE.equals(c.getKey())) {\n+                requestRecreateCells();\n@@ -313,0 +308,3 @@\n+            } else if (Properties.REBUILD.equals(c.getKey())) {\n+                requestRebuildCells();\n+                getSkinnable().getProperties().remove(Properties.REBUILD);\n@@ -428,3 +426,1 @@\n-        if (needCellsRecreated) {\n-            flow.recreateCells();\n-        } else if (needCellsReconfigured) {\n+        if (needCellsReconfigured) {\n@@ -434,1 +430,0 @@\n-        needCellsRecreated = false;\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableViewSkinBase.java","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-        if (Properties.RECREATE.equals(c.getKey())) {\n+        if (Properties.REBUILD.equals(c.getKey())) {\n@@ -107,1 +107,1 @@\n-            getSkinnable().getProperties().remove(Properties.RECREATE);\n+            getSkinnable().getProperties().remove(Properties.REBUILD);\n@@ -187,1 +187,1 @@\n-        properties.remove(Properties.RECREATE);\n+        properties.remove(Properties.REBUILD);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TreeViewSkin.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -194,0 +194,4 @@\n+    void requestRecreateCells() {\n+        flow.recreateCells();\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/VirtualContainerBase.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,19 +28,8 @@\n-import static javafx.collections.FXCollections.observableArrayList;\n-import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertSame;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.junit.jupiter.api.Assertions.fail;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n-import java.lang.ref.WeakReference;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.ListIterator;\n-import java.util.NoSuchElementException;\n-import java.util.stream.Collectors;\n+import com.sun.javafx.scene.control.VirtualScrollBar;\n+import com.sun.javafx.scene.control.behavior.FocusTraversalInputMap;\n+import com.sun.javafx.scene.control.behavior.ListCellBehavior;\n+import com.sun.javafx.scene.control.behavior.ListViewBehavior;\n+import com.sun.javafx.scene.control.inputmap.InputMap;\n+import com.sun.javafx.scene.control.inputmap.InputMap.KeyMapping;\n+import com.sun.javafx.scene.control.inputmap.KeyBinding;\n+import com.sun.javafx.tk.Toolkit;\n@@ -79,1 +68,0 @@\n-import javafx.scene.text.Font;\n@@ -84,8 +72,0 @@\n-import com.sun.javafx.scene.control.VirtualScrollBar;\n-import com.sun.javafx.scene.control.behavior.FocusTraversalInputMap;\n-import com.sun.javafx.scene.control.behavior.ListCellBehavior;\n-import com.sun.javafx.scene.control.behavior.ListViewBehavior;\n-import com.sun.javafx.scene.control.inputmap.InputMap;\n-import com.sun.javafx.scene.control.inputmap.InputMap.KeyMapping;\n-import com.sun.javafx.scene.control.inputmap.KeyBinding;\n-import com.sun.javafx.tk.Toolkit;\n@@ -100,0 +80,22 @@\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.NoSuchElementException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Collectors;\n+\n+import static javafx.collections.FXCollections.observableArrayList;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n+\n@@ -2729,0 +2731,59 @@\n+    @Test\n+    void testRefreshShouldNotResetCells() {\n+        final AtomicInteger creationCounter = new AtomicInteger();\n+\n+        ListView<Person> listView = new ListView<>();\n+        listView.setItems(FXCollections.observableArrayList(new Person(\"name\")));\n+        listView.setCellFactory(_ -> {\n+            creationCounter.incrementAndGet();\n+            return new ListCell<>();\n+        });\n+\n+        stageLoader = new StageLoader(listView);\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertTrue(creationCounter.get() > 0);\n+        creationCounter.set(0);\n+\n+        listView.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertEquals(0, creationCounter.get());\n+    }\n+\n+    @Test\n+    void testRefreshShouldReflectChangeInCell() {\n+        String initialName = \"Initial\";\n+        Person person = new Person(initialName);\n+\n+        ListView<Person> listView = new ListView<>();\n+        listView.setItems(FXCollections.observableArrayList(person));\n+        listView.setCellFactory(_ -> new ListCell<>() {\n+            @Override\n+            protected void updateItem(Person item, boolean empty) {\n+                super.updateItem(item, empty);\n+\n+                if (empty) {\n+                    setText(null);\n+                } else {\n+                    setText(item.getFirstName());\n+                }\n+            }\n+        });\n+\n+        stageLoader = new StageLoader(listView);\n+        Toolkit.getToolkit().firePulse();\n+\n+        String newName = \"Other Name\";\n+        person.setFirstName(newName);\n+\n+        IndexedCell<?> cell = VirtualFlowTestUtils.getCell(listView, 0);\n+        assertEquals(initialName, cell.getText());\n+\n+        listView.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        cell = VirtualFlowTestUtils.getCell(listView, 0);\n+        assertEquals(newName, cell.getText());\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListViewTest.java","additions":89,"deletions":28,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -28,22 +28,7 @@\n-import static javafx.collections.FXCollections.observableArrayList;\n-import static javafx.scene.control.TableColumn.SortType.ASCENDING;\n-import static javafx.scene.control.TableColumn.SortType.DESCENDING;\n-import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertSame;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.junit.jupiter.api.Assertions.fail;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Comparator;\n-import java.util.List;\n-import java.util.Random;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.atomic.AtomicLong;\n-import java.util.function.Supplier;\n+import com.sun.javafx.scene.control.ReadOnlyUnbackedObservableList;\n+import com.sun.javafx.scene.control.SelectedCellsMap;\n+import com.sun.javafx.scene.control.TableColumnBaseHelper;\n+import com.sun.javafx.scene.control.TableColumnComparatorBase.TableColumnComparator;\n+import com.sun.javafx.scene.control.VirtualScrollBar;\n+import com.sun.javafx.scene.control.behavior.TableCellBehavior;\n+import com.sun.javafx.tk.Toolkit;\n@@ -121,7 +106,0 @@\n-import com.sun.javafx.scene.control.ReadOnlyUnbackedObservableList;\n-import com.sun.javafx.scene.control.SelectedCellsMap;\n-import com.sun.javafx.scene.control.TableColumnBaseHelper;\n-import com.sun.javafx.scene.control.TableColumnComparatorBase.TableColumnComparator;\n-import com.sun.javafx.scene.control.VirtualScrollBar;\n-import com.sun.javafx.scene.control.behavior.TableCellBehavior;\n-import com.sun.javafx.tk.Toolkit;\n@@ -138,0 +116,24 @@\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.function.Supplier;\n+\n+import static javafx.collections.FXCollections.observableArrayList;\n+import static javafx.scene.control.TableColumn.SortType.ASCENDING;\n+import static javafx.scene.control.TableColumn.SortType.DESCENDING;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n+\n@@ -6430,0 +6432,56 @@\n+\n+    @Test\n+    void testRefreshShouldNotResetCells() {\n+        final AtomicInteger creationCounter = new AtomicInteger();\n+\n+        TableColumn<Person, String> firstNameCol = new TableColumn<>(\"First Name\");\n+        firstNameCol.setCellValueFactory(new PropertyValueFactory<>(\"firstName\"));\n+\n+        firstNameCol.setCellFactory(_ -> {\n+            creationCounter.incrementAndGet();\n+            return new TableCell<>();\n+        });\n+\n+        TableView<Person> table = new TableView<>();\n+        table.setItems(FXCollections.observableArrayList(new Person(\"name\")));\n+        table.getColumns().add(firstNameCol);\n+\n+        stageLoader = new StageLoader(table);\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertTrue(creationCounter.get() > 0);\n+        creationCounter.set(0);\n+\n+        table.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertEquals(0, creationCounter.get());\n+    }\n+\n+    @Test\n+    void testRefreshShouldReflectChangeInCell() {\n+        String initialName = \"Initial\";\n+        Person person = new Person(initialName);\n+\n+        TableColumn<Person, String> firstNameCol = new TableColumn<>(\"First Name\");\n+        firstNameCol.setCellValueFactory(e -> new SimpleStringProperty(e.getValue().getFirstName()));\n+\n+        TableView<Person> table = new TableView<>();\n+        table.setItems(FXCollections.observableArrayList(person));\n+        table.getColumns().add(firstNameCol);\n+\n+        stageLoader = new StageLoader(table);\n+        Toolkit.getToolkit().firePulse();\n+\n+        String newName = \"Other Name\";\n+        person.setFirstName(newName);\n+\n+        IndexedCell<?> cell = VirtualFlowTestUtils.getCell(table, 0, 0);\n+        assertEquals(initialName, cell.getText());\n+\n+        table.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        cell = VirtualFlowTestUtils.getCell(table, 0, 0);\n+        assertEquals(newName, cell.getText());\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewTest.java","additions":87,"deletions":29,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -28,11 +28,0 @@\n-import static javafx.scene.control.TreeTableColumn.SortType.ASCENDING;\n-import static javafx.scene.control.TreeTableColumn.SortType.DESCENDING;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n-import java.util.ArrayList;\n-import java.util.Comparator;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.function.Consumer;\n-import java.util.function.Supplier;\n-import java.util.stream.Collectors;\n@@ -108,0 +97,4 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -118,7 +111,13 @@\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.Disabled;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.MethodSource;\n-import org.junit.jupiter.params.provider.Arguments;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import static javafx.scene.control.TreeTableColumn.SortType.ASCENDING;\n+import static javafx.scene.control.TreeTableColumn.SortType.DESCENDING;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n@@ -128,0 +127,1 @@\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n@@ -130,1 +130,0 @@\n-import static org.junit.jupiter.api.Assertions.assertNotSame;\n@@ -133,9 +132,1 @@\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n-import static org.junit.jupiter.api.Assertions.assertTimeout;\n-import static org.junit.jupiter.api.Assertions.assertNotEquals;\n-import org.junit.jupiter.api.Assumptions;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.params.provider.Arguments;\n-import java.util.stream.Stream;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n@@ -7653,0 +7644,56 @@\n+\n+    @Test\n+    void testRefreshShouldNotResetCells() {\n+        final AtomicInteger creationCounter = new AtomicInteger();\n+\n+        TreeTableColumn<Person, String> firstNameCol = new TreeTableColumn<>(\"First Name\");\n+        firstNameCol.setCellValueFactory(new TreeItemPropertyValueFactory<>(\"firstName\"));\n+\n+        firstNameCol.setCellFactory(_ -> {\n+            creationCounter.incrementAndGet();\n+            return new TreeTableCell<>();\n+        });\n+\n+        TreeTableView<Person> table = new TreeTableView<>();\n+        table.setRoot(new TreeItem<>(new Person(\"name\")));\n+        table.getColumns().add(firstNameCol);\n+\n+        stageLoader = new StageLoader(table);\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertTrue(creationCounter.get() > 0);\n+        creationCounter.set(0);\n+\n+        table.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertEquals(0, creationCounter.get());\n+    }\n+\n+    @Test\n+    void testRefreshShouldReflectChangeInCell() {\n+        String initialName = \"Initial\";\n+        Person person = new Person(initialName);\n+\n+        TreeTableColumn<Person, String> firstNameCol = new TreeTableColumn<>(\"First Name\");\n+        firstNameCol.setCellValueFactory(e -> new SimpleStringProperty(e.getValue().getValue().getFirstName()));\n+\n+        TreeTableView<Person> table = new TreeTableView<>();\n+        table.setRoot(new TreeItem<>(person));\n+        table.getColumns().add(firstNameCol);\n+\n+        stageLoader = new StageLoader(table);\n+        Toolkit.getToolkit().firePulse();\n+\n+        String newName = \"Other Name\";\n+        person.setFirstName(newName);\n+\n+        IndexedCell<?> cell = VirtualFlowTestUtils.getCell(table, 0, 0);\n+        assertEquals(initialName, cell.getText());\n+\n+        table.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        cell = VirtualFlowTestUtils.getCell(table, 0, 0);\n+        assertEquals(newName, cell.getText());\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewTest.java","additions":75,"deletions":28,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -28,18 +28,4 @@\n-import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNotSame;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertSame;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.junit.jupiter.api.Assertions.fail;\n-import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.stream.Collectors;\n+import com.sun.javafx.application.PlatformImpl;\n+import com.sun.javafx.scene.control.VirtualScrollBar;\n+import com.sun.javafx.scene.control.behavior.TreeCellBehavior;\n+import com.sun.javafx.tk.Toolkit;\n@@ -91,4 +77,0 @@\n-import com.sun.javafx.application.PlatformImpl;\n-import com.sun.javafx.scene.control.VirtualScrollBar;\n-import com.sun.javafx.scene.control.behavior.TreeCellBehavior;\n-import com.sun.javafx.tk.Toolkit;\n@@ -104,0 +86,20 @@\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.stream.Collectors;\n+\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNotSame;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static test.com.sun.javafx.scene.control.infrastructure.ControlTestUtils.assertStyleClassContains;\n+\n@@ -4242,0 +4244,59 @@\n+    @Test\n+    void testRefreshShouldNotResetCells() {\n+        final AtomicInteger creationCounter = new AtomicInteger();\n+\n+        TreeView<Person> treeView = new TreeView<>();\n+        treeView.setRoot(new TreeItem<>(new Person(\"text\")));\n+        treeView.setCellFactory(_ -> {\n+            creationCounter.incrementAndGet();\n+            return new TreeCell<>();\n+        });\n+\n+        stageLoader = new StageLoader(treeView);\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertTrue(creationCounter.get() > 0);\n+        creationCounter.set(0);\n+\n+        treeView.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertEquals(0, creationCounter.get());\n+    }\n+\n+    @Test\n+    void testRefreshShouldReflectChangeInCell() {\n+        String initialName = \"Initial\";\n+        Person person = new Person(initialName);\n+\n+        TreeView<Person> treeView = new TreeView<>();\n+        treeView.setRoot(new TreeItem<>(person));\n+        treeView.setCellFactory(_ -> new TreeCell<>() {\n+            @Override\n+            protected void updateItem(Person item, boolean empty) {\n+                super.updateItem(item, empty);\n+\n+                if (empty) {\n+                    setText(null);\n+                } else {\n+                    setText(item.getFirstName());\n+                }\n+            }\n+        });\n+\n+        stageLoader = new StageLoader(treeView);\n+        Toolkit.getToolkit().firePulse();\n+\n+        String newName = \"Other Name\";\n+        person.setFirstName(newName);\n+\n+        IndexedCell<?> cell = VirtualFlowTestUtils.getCell(treeView, 0);\n+        assertEquals(initialName, cell.getText());\n+\n+        treeView.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        cell = VirtualFlowTestUtils.getCell(treeView, 0);\n+        assertEquals(newName, cell.getText());\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeViewTest.java","additions":83,"deletions":22,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -355,14 +355,0 @@\n-    \/** TreeTableView.refresh() must release all discarded cells JDK-8307538 *\/\n-    @Test\n-    public void cellsMustBeCollectableAfterRefresh() {\n-        IndexedCell<?> row = VirtualFlowTestUtils.getCell(treeTableView, 0);\n-        assertNotNull(row);\n-        WeakReference<Object> ref = new WeakReference<>(row);\n-        row = null;\n-\n-        treeTableView.refresh();\n-        Toolkit.getToolkit().firePulse();\n-\n-        JMemoryBuddy.assertCollectable(ref);\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TreeTableRowSkinTest.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"}]}