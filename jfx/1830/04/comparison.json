{"files":[{"patch":"@@ -85,1 +85,1 @@\n-     * ListView, TableView\n+     * Virtualized controls\n@@ -89,1 +89,0 @@\n-    public static final String REFRESH = \"refreshKey\";\n@@ -91,0 +90,1 @@\n+    public static final String REBUILD = \"rebuildKey\";\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/Properties.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1035,5 +1035,3 @@\n-     * Calling {@code refresh()} forces the ListView control to recreate and\n-     * repopulate the cells necessary to populate the visual bounds of the control.\n-     * In other words, this forces the ListView to update what it is showing to\n-     * the user. This is useful in cases where the underlying data source has\n-     * changed in a way that is not observed by the ListView itself.\n+     * Forces the ListView to update what it is showing to the user.\n+     * This is useful in cases where the underlying data source has changed in a way\n+     * that is not observed by the ListView itself.\n@@ -1044,1 +1042,1 @@\n-        getProperties().put(Properties.RECREATE, Boolean.TRUE);\n+        getProperties().put(Properties.REBUILD, Boolean.TRUE);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ListView.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1766,5 +1766,3 @@\n-     * Calling {@code refresh()} forces the TableView control to recreate and\n-     * repopulate the cells necessary to populate the visual bounds of the control.\n-     * In other words, this forces the TableView to update what it is showing to\n-     * the user. This is useful in cases where the underlying data source has\n-     * changed in a way that is not observed by the TableView itself.\n+     * Forces the TableView to update what it is showing to the user.\n+     * This is useful in cases where the underlying data source has changed in a way\n+     * that is not observed by the TableView itself.\n@@ -1775,1 +1773,1 @@\n-        getProperties().put(Properties.RECREATE, Boolean.TRUE);\n+        getProperties().put(Properties.REBUILD, Boolean.TRUE);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableView.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2082,5 +2082,3 @@\n-     * Calling {@code refresh()} forces the TreeTableView control to recreate and\n-     * repopulate the cells necessary to populate the visual bounds of the control.\n-     * In other words, this forces the TreeTableView to update what it is showing to\n-     * the user. This is useful in cases where the underlying data source has\n-     * changed in a way that is not observed by the TreeTableView itself.\n+     * Forces the TreeTableView to update what it is showing to the user.\n+     * This is useful in cases where the underlying data source has changed in a way\n+     * that is not observed by the TreeTableView itself.\n@@ -2091,1 +2089,1 @@\n-        getProperties().put(Properties.RECREATE, Boolean.TRUE);\n+        getProperties().put(Properties.REBUILD, Boolean.TRUE);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableView.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1112,5 +1112,3 @@\n-     * Calling {@code refresh()} forces the TreeView control to recreate and\n-     * repopulate the cells necessary to populate the visual bounds of the control.\n-     * In other words, this forces the TreeView to update what it is showing to\n-     * the user. This is useful in cases where the underlying data source has\n-     * changed in a way that is not observed by the TreeView itself.\n+     * Forces the TreeView to update what it is showing to the user.\n+     * This is useful in cases where the underlying data source has changed in a way\n+     * that is not observed by the TreeView itself.\n@@ -1121,1 +1119,1 @@\n-        getProperties().put(Properties.RECREATE, Boolean.TRUE);\n+        getProperties().put(Properties.REBUILD, Boolean.TRUE);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeView.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -104,1 +104,0 @@\n-    private boolean needCellsRebuilt = true;\n@@ -120,4 +119,3 @@\n-        if (Properties.RECREATE.equals(c.getKey())) {\n-            needCellsRebuilt = true;\n-            getSkinnable().requestLayout();\n-            getSkinnable().getProperties().remove(Properties.RECREATE);\n+        if (Properties.REBUILD.equals(c.getKey())) {\n+            requestRebuildCells();\n+            getSkinnable().getProperties().remove(Properties.REBUILD);\n@@ -233,1 +231,1 @@\n-        properties.remove(Properties.RECREATE);\n+        properties.remove(Properties.REBUILD);\n@@ -284,3 +282,1 @@\n-        if (needCellsRebuilt) {\n-            flow.rebuildCells();\n-        } else if (needCellsReconfigured) {\n+        if (needCellsReconfigured) {\n@@ -290,1 +286,0 @@\n-        needCellsRebuilt = false;\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/ListViewSkin.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -155,1 +155,0 @@\n-    boolean needCellsRecreated = true;\n@@ -300,1 +299,0 @@\n-        properties.remove(Properties.REFRESH);\n@@ -302,0 +300,1 @@\n+        properties.remove(Properties.REBUILD);\n@@ -306,6 +305,2 @@\n-            if (Properties.REFRESH.equals(c.getKey())) {\n-                refreshView();\n-                getSkinnable().getProperties().remove(Properties.REFRESH);\n-            } else if (Properties.RECREATE.equals(c.getKey())) {\n-                needCellsRecreated = true;\n-                refreshView();\n+            if (Properties.RECREATE.equals(c.getKey())) {\n+                requestRecreateCells();\n@@ -313,0 +308,3 @@\n+            } else if (Properties.REBUILD.equals(c.getKey())) {\n+                requestRebuildCells();\n+                getSkinnable().getProperties().remove(Properties.REBUILD);\n@@ -428,3 +426,1 @@\n-        if (needCellsRecreated) {\n-            flow.recreateCells();\n-        } else if (needCellsReconfigured) {\n+        if (needCellsReconfigured) {\n@@ -434,1 +430,0 @@\n-        needCellsRecreated = false;\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableViewSkinBase.java","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-        if (Properties.RECREATE.equals(c.getKey())) {\n+        if (Properties.REBUILD.equals(c.getKey())) {\n@@ -107,1 +107,1 @@\n-            getSkinnable().getProperties().remove(Properties.RECREATE);\n+            getSkinnable().getProperties().remove(Properties.REBUILD);\n@@ -187,1 +187,1 @@\n-        properties.remove(Properties.RECREATE);\n+        properties.remove(Properties.REBUILD);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TreeViewSkin.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -194,0 +194,4 @@\n+    void requestRecreateCells() {\n+        flow.recreateCells();\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/VirtualContainerBase.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -2729,0 +2730,59 @@\n+    @Test\n+    void testRefreshShouldNotResetCells() {\n+        final AtomicInteger creationCounter = new AtomicInteger();\n+\n+        ListView<Person> listView = new ListView<>();\n+        listView.setItems(FXCollections.observableArrayList(new Person(\"name\")));\n+        listView.setCellFactory(_ -> {\n+            creationCounter.incrementAndGet();\n+            return new ListCell<>();\n+        });\n+\n+        stageLoader = new StageLoader(listView);\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertTrue(creationCounter.get() > 0);\n+        creationCounter.set(0);\n+\n+        listView.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertEquals(0, creationCounter.get());\n+    }\n+\n+    @Test\n+    void testRefreshShouldReflectChangeInCell() {\n+        String initialName = \"Initial\";\n+        Person person = new Person(initialName);\n+\n+        ListView<Person> listView = new ListView<>();\n+        listView.setItems(FXCollections.observableArrayList(person));\n+        listView.setCellFactory(_ -> new ListCell<>() {\n+            @Override\n+            protected void updateItem(Person item, boolean empty) {\n+                super.updateItem(item, empty);\n+\n+                if (empty) {\n+                    setText(null);\n+                } else {\n+                    setText(item.getFirstName());\n+                }\n+            }\n+        });\n+\n+        stageLoader = new StageLoader(listView);\n+        Toolkit.getToolkit().firePulse();\n+\n+        String newName = \"Other Name\";\n+        person.setFirstName(newName);\n+\n+        IndexedCell<?> cell = VirtualFlowTestUtils.getCell(listView, 0);\n+        assertEquals(initialName, cell.getText());\n+\n+        listView.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        cell = VirtualFlowTestUtils.getCell(listView, 0);\n+        assertEquals(newName, cell.getText());\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListViewTest.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -6430,0 +6430,64 @@\n+\n+    @Test\n+    void testRefreshShouldNotResetCells() {\n+        final AtomicInteger cellCreationCounter = new AtomicInteger();\n+        final AtomicInteger rowCreationCounter = new AtomicInteger();\n+\n+        TableColumn<Person, String> firstNameCol = new TableColumn<>(\"First Name\");\n+        firstNameCol.setCellValueFactory(new PropertyValueFactory<>(\"firstName\"));\n+\n+        firstNameCol.setCellFactory(_ -> {\n+            cellCreationCounter.incrementAndGet();\n+            return new TableCell<>();\n+        });\n+\n+        TableView<Person> table = new TableView<>();\n+        table.setRowFactory(_ -> {\n+            rowCreationCounter.incrementAndGet();\n+            return new TableRow<>();\n+        });\n+        table.setItems(FXCollections.observableArrayList(new Person(\"name\")));\n+        table.getColumns().add(firstNameCol);\n+\n+        stageLoader = new StageLoader(table);\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertTrue(cellCreationCounter.get() > 0);\n+        assertTrue(rowCreationCounter.get() > 0);\n+        rowCreationCounter.set(0);\n+        cellCreationCounter.set(0);\n+\n+        table.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertEquals(0, rowCreationCounter.get());\n+        assertEquals(0, cellCreationCounter.get());\n+    }\n+\n+    @Test\n+    void testRefreshShouldReflectChangeInCell() {\n+        String initialName = \"Initial\";\n+        Person person = new Person(initialName);\n+\n+        TableColumn<Person, String> firstNameCol = new TableColumn<>(\"First Name\");\n+        firstNameCol.setCellValueFactory(e -> new SimpleStringProperty(e.getValue().getFirstName()));\n+\n+        TableView<Person> table = new TableView<>();\n+        table.setItems(FXCollections.observableArrayList(person));\n+        table.getColumns().add(firstNameCol);\n+\n+        stageLoader = new StageLoader(table);\n+        Toolkit.getToolkit().firePulse();\n+\n+        String newName = \"Other Name\";\n+        person.setFirstName(newName);\n+\n+        IndexedCell<?> cell = VirtualFlowTestUtils.getCell(table, 0, 0);\n+        assertEquals(initialName, cell.getText());\n+\n+        table.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        cell = VirtualFlowTestUtils.getCell(table, 0, 0);\n+        assertEquals(newName, cell.getText());\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewTest.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -7653,0 +7653,64 @@\n+\n+    @Test\n+    void testRefreshShouldNotResetCells() {\n+        final AtomicInteger cellCreationCounter = new AtomicInteger();\n+        final AtomicInteger rowCreationCounter = new AtomicInteger();\n+\n+        TreeTableColumn<Person, String> firstNameCol = new TreeTableColumn<>(\"First Name\");\n+        firstNameCol.setCellValueFactory(new TreeItemPropertyValueFactory<>(\"firstName\"));\n+\n+        firstNameCol.setCellFactory(_ -> {\n+            cellCreationCounter.incrementAndGet();\n+            return new TreeTableCell<>();\n+        });\n+\n+        TreeTableView<Person> table = new TreeTableView<>();\n+        table.setRowFactory(_ -> {\n+            rowCreationCounter.incrementAndGet();\n+            return new TreeTableRow<>();\n+        });\n+        table.setRoot(new TreeItem<>(new Person(\"name\")));\n+        table.getColumns().add(firstNameCol);\n+\n+        stageLoader = new StageLoader(table);\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertTrue(cellCreationCounter.get() > 0);\n+        assertTrue(rowCreationCounter.get() > 0);\n+        rowCreationCounter.set(0);\n+        cellCreationCounter.set(0);\n+\n+        table.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertEquals(0, rowCreationCounter.get());\n+        assertEquals(0, cellCreationCounter.get());\n+    }\n+\n+    @Test\n+    void testRefreshShouldReflectChangeInCell() {\n+        String initialName = \"Initial\";\n+        Person person = new Person(initialName);\n+\n+        TreeTableColumn<Person, String> firstNameCol = new TreeTableColumn<>(\"First Name\");\n+        firstNameCol.setCellValueFactory(e -> new SimpleStringProperty(e.getValue().getValue().getFirstName()));\n+\n+        TreeTableView<Person> table = new TreeTableView<>();\n+        table.setRoot(new TreeItem<>(person));\n+        table.getColumns().add(firstNameCol);\n+\n+        stageLoader = new StageLoader(table);\n+        Toolkit.getToolkit().firePulse();\n+\n+        String newName = \"Other Name\";\n+        person.setFirstName(newName);\n+\n+        IndexedCell<?> cell = VirtualFlowTestUtils.getCell(table, 0, 0);\n+        assertEquals(initialName, cell.getText());\n+\n+        table.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        cell = VirtualFlowTestUtils.getCell(table, 0, 0);\n+        assertEquals(newName, cell.getText());\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewTest.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -4242,0 +4242,59 @@\n+    @Test\n+    void testRefreshShouldNotResetCells() {\n+        final AtomicInteger creationCounter = new AtomicInteger();\n+\n+        TreeView<Person> treeView = new TreeView<>();\n+        treeView.setRoot(new TreeItem<>(new Person(\"text\")));\n+        treeView.setCellFactory(_ -> {\n+            creationCounter.incrementAndGet();\n+            return new TreeCell<>();\n+        });\n+\n+        stageLoader = new StageLoader(treeView);\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertTrue(creationCounter.get() > 0);\n+        creationCounter.set(0);\n+\n+        treeView.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        assertEquals(0, creationCounter.get());\n+    }\n+\n+    @Test\n+    void testRefreshShouldReflectChangeInCell() {\n+        String initialName = \"Initial\";\n+        Person person = new Person(initialName);\n+\n+        TreeView<Person> treeView = new TreeView<>();\n+        treeView.setRoot(new TreeItem<>(person));\n+        treeView.setCellFactory(_ -> new TreeCell<>() {\n+            @Override\n+            protected void updateItem(Person item, boolean empty) {\n+                super.updateItem(item, empty);\n+\n+                if (empty) {\n+                    setText(null);\n+                } else {\n+                    setText(item.getFirstName());\n+                }\n+            }\n+        });\n+\n+        stageLoader = new StageLoader(treeView);\n+        Toolkit.getToolkit().firePulse();\n+\n+        String newName = \"Other Name\";\n+        person.setFirstName(newName);\n+\n+        IndexedCell<?> cell = VirtualFlowTestUtils.getCell(treeView, 0);\n+        assertEquals(initialName, cell.getText());\n+\n+        treeView.refresh();\n+        Toolkit.getToolkit().firePulse();\n+\n+        cell = VirtualFlowTestUtils.getCell(treeView, 0);\n+        assertEquals(newName, cell.getText());\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeViewTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -355,14 +355,0 @@\n-    \/** TreeTableView.refresh() must release all discarded cells JDK-8307538 *\/\n-    @Test\n-    public void cellsMustBeCollectableAfterRefresh() {\n-        IndexedCell<?> row = VirtualFlowTestUtils.getCell(treeTableView, 0);\n-        assertNotNull(row);\n-        WeakReference<Object> ref = new WeakReference<>(row);\n-        row = null;\n-\n-        treeTableView.refresh();\n-        Toolkit.getToolkit().firePulse();\n-\n-        JMemoryBuddy.assertCollectable(ref);\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TreeTableRowSkinTest.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+package table;\n+\n+import javafx.application.Application;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.geometry.Insets;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.IndexedCell;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableRow;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.skin.TableViewSkin;\n+import javafx.scene.control.skin.VirtualFlow;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.HBox;\n+import javafx.stage.Stage;\n+\n+\/**\n+ * Testing the refresh() method of a TableView with many columns and rows.\n+ * This takes a little bit since all rows and cells need to be refreshed,\n+ * that is the updateItem(..) method is called.\n+ *\/\n+public class TableRefreshTest {\n+\n+    public static void main(String[] args) {\n+        Application.launch(FxApp.class, args);\n+    }\n+\n+    public static class FxApp extends Application {\n+\n+        @Override\n+        public void start(Stage primaryStage) {\n+            TableView<String> tv = new TableView<>();\n+            tv.setSkin(new CTableViewSkin<>(tv));\n+\n+            for (int i = 0; i < 1000; i++) {\n+                tv.getItems().add(\"str: \" + i);\n+            }\n+\n+            for (int index = 0; index < 100; index++) {\n+                TableColumn<String, String> tc = new TableColumn<>(\"title: \" + index);\n+                tc.setCellValueFactory(cdf -> new SimpleStringProperty(cdf.getValue()));\n+\n+                tv.getColumns().add(tc);\n+            }\n+\n+            BorderPane root = new BorderPane();\n+            root.setPadding(new Insets(4));\n+            root.setCenter(tv);\n+\n+            Button refreshBtn = new Button(\"Refresh\");\n+            refreshBtn.setOnAction(_ -> tv.refresh());\n+            Button recreateBtn = new Button(\"Recreate\");\n+            recreateBtn.setOnAction(_ -> tv.getProperties().put(\"recreateKey\", true));\n+            root.setBottom(new HBox(4, refreshBtn, recreateBtn));\n+\n+            Scene scene = new Scene(root, 1800, 960);\n+            primaryStage.setScene(scene);\n+            primaryStage.show();\n+        }\n+    }\n+\n+    private static class CTableViewSkin<T> extends TableViewSkin<T> {\n+\n+        CTableViewSkin(TableView<T> control) {\n+            super(control);\n+        }\n+\n+        @Override\n+        protected VirtualFlow<TableRow<T>> createVirtualFlow() {\n+            return new CVirtualFlow<>();\n+        }\n+    }\n+\n+    private static class CVirtualFlow<S extends IndexedCell> extends VirtualFlow<S> {\n+\n+        @Override\n+        protected void layoutChildren() {\n+            long startTime = System.nanoTime();\n+            super.layoutChildren();\n+            System.out.println(\"Took: \" + ((System.nanoTime() - startTime) \/ 1_000_000) + \" ms\");\n+        }\n+    }\n+\n+}\n","filename":"tests\/performance\/control\/src\/table\/TableRefreshTest.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"}]}