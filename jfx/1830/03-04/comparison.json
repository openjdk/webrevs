{"files":[{"patch":"@@ -1035,5 +1035,3 @@\n-     * Calling {@code refresh()} forces the ListView control to rebuild the\n-     * cells necessary to populate the visual bounds of the control.\n-     * In other words, this forces the ListView to update what it is showing to\n-     * the user. This is useful in cases where the underlying data source has\n-     * changed in a way that is not observed by the ListView itself.\n+     * Forces the ListView to update what it is showing to the user.\n+     * This is useful in cases where the underlying data source has changed in a way\n+     * that is not observed by the ListView itself.\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ListView.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1766,5 +1766,3 @@\n-     * Calling {@code refresh()} forces the TableView control to rebuild the\n-     * cells necessary to populate the visual bounds of the control.\n-     * In other words, this forces the TableView to update what it is showing to\n-     * the user. This is useful in cases where the underlying data source has\n-     * changed in a way that is not observed by the TableView itself.\n+     * Forces the TableView to update what it is showing to the user.\n+     * This is useful in cases where the underlying data source has changed in a way\n+     * that is not observed by the TableView itself.\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableView.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2082,5 +2082,3 @@\n-     * Calling {@code refresh()} forces the TreeTableView control to rebuild the\n-     * cells necessary to populate the visual bounds of the control.\n-     * In other words, this forces the TreeTableView to update what it is showing to\n-     * the user. This is useful in cases where the underlying data source has\n-     * changed in a way that is not observed by the TreeTableView itself.\n+     * Forces the TreeTableView to update what it is showing to the user.\n+     * This is useful in cases where the underlying data source has changed in a way\n+     * that is not observed by the TreeTableView itself.\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableView.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1112,5 +1112,3 @@\n-     * Calling {@code refresh()} forces the TreeView control to rebuild the\n-     * cells necessary to populate the visual bounds of the control.\n-     * In other words, this forces the TreeView to update what it is showing to\n-     * the user. This is useful in cases where the underlying data source has\n-     * changed in a way that is not observed by the TreeView itself.\n+     * Forces the TreeView to update what it is showing to the user.\n+     * This is useful in cases where the underlying data source has changed in a way\n+     * that is not observed by the TreeView itself.\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeView.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+package table;\n+\n+import javafx.application.Application;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.geometry.Insets;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.IndexedCell;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableRow;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.skin.TableViewSkin;\n+import javafx.scene.control.skin.VirtualFlow;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.HBox;\n+import javafx.stage.Stage;\n+\n+\/**\n+ * Testing the refresh() method of a TableView with many columns and rows.\n+ * This takes a little bit since all rows and cells need to be refreshed,\n+ * that is the updateItem(..) method is called.\n+ *\/\n+public class TableRefreshTest {\n+\n+    public static void main(String[] args) {\n+        Application.launch(FxApp.class, args);\n+    }\n+\n+    public static class FxApp extends Application {\n+\n+        @Override\n+        public void start(Stage primaryStage) {\n+            TableView<String> tv = new TableView<>();\n+            tv.setSkin(new CTableViewSkin<>(tv));\n+\n+            for (int i = 0; i < 1000; i++) {\n+                tv.getItems().add(\"str: \" + i);\n+            }\n+\n+            for (int index = 0; index < 100; index++) {\n+                TableColumn<String, String> tc = new TableColumn<>(\"title: \" + index);\n+                tc.setCellValueFactory(cdf -> new SimpleStringProperty(cdf.getValue()));\n+\n+                tv.getColumns().add(tc);\n+            }\n+\n+            BorderPane root = new BorderPane();\n+            root.setPadding(new Insets(4));\n+            root.setCenter(tv);\n+\n+            Button refreshBtn = new Button(\"Refresh\");\n+            refreshBtn.setOnAction(_ -> tv.refresh());\n+            Button recreateBtn = new Button(\"Recreate\");\n+            recreateBtn.setOnAction(_ -> tv.getProperties().put(\"recreateKey\", true));\n+            root.setBottom(new HBox(4, refreshBtn, recreateBtn));\n+\n+            Scene scene = new Scene(root, 1800, 960);\n+            primaryStage.setScene(scene);\n+            primaryStage.show();\n+        }\n+    }\n+\n+    private static class CTableViewSkin<T> extends TableViewSkin<T> {\n+\n+        CTableViewSkin(TableView<T> control) {\n+            super(control);\n+        }\n+\n+        @Override\n+        protected VirtualFlow<TableRow<T>> createVirtualFlow() {\n+            return new CVirtualFlow<>();\n+        }\n+    }\n+\n+    private static class CVirtualFlow<S extends IndexedCell> extends VirtualFlow<S> {\n+\n+        @Override\n+        protected void layoutChildren() {\n+            long startTime = System.nanoTime();\n+            super.layoutChildren();\n+            System.out.println(\"Took: \" + ((System.nanoTime() - startTime) \/ 1_000_000) + \" ms\");\n+        }\n+    }\n+\n+}\n","filename":"tests\/performance\/control\/src\/table\/TableRefreshTest.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"}]}