{"files":[{"patch":"@@ -29,0 +29,1 @@\n+\n@@ -32,0 +33,1 @@\n+import javafx.util.Duration;\n@@ -51,1 +53,0 @@\n-import static org.junit.Assert.*;\n@@ -53,0 +54,1 @@\n+import static org.junit.Assert.*;\n@@ -55,0 +57,1 @@\n+import org.junit.After;\n@@ -64,2 +67,2 @@\n-    @Before public void setup() {\n-        assertTrue(Toolkit.getToolkit() instanceof StubToolkit);  \/\/ Ensure StubToolkit is loaded\n+    private StageLoader stageLoader;\n+    private StubToolkit toolkit;\n@@ -67,0 +70,2 @@\n+    @Before\n+    public void setup() {\n@@ -69,1 +74,0 @@\n-    }\n@@ -71,0 +75,3 @@\n+        toolkit = (StubToolkit) Toolkit.getToolkit();\n+        toolkit.setAnimationTime(0);\n+    }\n@@ -72,0 +79,6 @@\n+    @After\n+    public void tearDown() {\n+        if (stageLoader != null) {\n+            stageLoader.dispose();\n+        }\n+    }\n@@ -545,1 +558,117 @@\n-        Rectangle rect1 = new Rectangle(0, 0, 100, 100);\n+        Rectangle rect = new Rectangle(0, 0, 100, 100);\n+\n+        stageLoader = new StageLoader(rect);\n+\n+        Tooltip.install(rect, toolTip);\n+\n+        MouseEvent mouseEvent = MouseEventGenerator.generateMouseEvent(MouseEvent.MOUSE_MOVED, 1, 1);\n+        rect.fireEvent(mouseEvent);\n+    }\n+\n+    @Test\n+    public void testTooltipShouldNotBeShownBeforeDefaultDelay() {\n+        Rectangle rect = new Rectangle(0, 0, 100, 100);\n+\n+        stageLoader = new StageLoader(rect);\n+\n+        Tooltip.install(rect, toolTip);\n+\n+        MouseEvent mouseEvent = MouseEventGenerator.generateMouseEvent(MouseEvent.MOUSE_MOVED, 1, 1);\n+        rect.fireEvent(mouseEvent);\n+\n+        assertFalse(toolTip.isShowing());\n+\n+        toolkit.setAnimationTime(999);\n+\n+        assertFalse(toolTip.isShowing());\n+    }\n+\n+    @Test\n+    public void testTooltipShouldBeShownAfterDefaultDelay() {\n+        Rectangle rect = new Rectangle(0, 0, 100, 100);\n+\n+        stageLoader = new StageLoader(rect);\n+\n+        Tooltip.install(rect, toolTip);\n+\n+        assertFalse(toolTip.isShowing());\n+\n+        assertTooltipShownAfter(rect, 1000);\n+        assertTooltipHiddenAfter(rect, 200);\n+    }\n+\n+    @Test\n+    public void testTooltipShouldBeHiddenAfterHideDelay() {\n+        int delay = 50;\n+        toolTip.setHideDelay(Duration.millis(delay));\n+\n+        Rectangle rect = new Rectangle(0, 0, 100, 100);\n+\n+        stageLoader = new StageLoader(rect);\n+\n+        Tooltip.install(rect, toolTip);\n+\n+        assertFalse(toolTip.isShowing());\n+\n+        assertTooltipShownAfter(rect, 1000);\n+        assertTooltipHiddenAfter(rect, delay);\n+    }\n+\n+    @Test\n+    public void testTooltipShouldBeShownAfterSetShowDelay() {\n+        int delay = 200;\n+        toolTip.setShowDelay(Duration.millis(delay));\n+\n+        Rectangle rect = new Rectangle(0, 0, 100, 100);\n+\n+        stageLoader = new StageLoader(rect);\n+\n+        Tooltip.install(rect, toolTip);\n+\n+        assertFalse(toolTip.isShowing());\n+\n+        assertTooltipShownAfter(rect, delay);\n+        assertTooltipHiddenAfter(rect, 200);\n+    }\n+\n+    @Test\n+    public void testTooltipShouldBeShownAfterSetStyleShowDelay() {\n+        toolTip.setStyle(\"-fx-show-delay: 200ms;\");\n+\n+        Rectangle rect = new Rectangle(0, 0, 100, 100);\n+\n+        stageLoader = new StageLoader(rect);\n+\n+        Tooltip.install(rect, toolTip);\n+\n+        assertFalse(toolTip.isShowing());\n+\n+        assertTooltipShownAfter(rect, 200);\n+        assertTooltipHiddenAfter(rect, 200);\n+    }\n+\n+    @Test\n+    public void testTooltipShouldBeShownAfterSetCssShowDelay() {\n+        Rectangle rect = new Rectangle(0, 0, 100, 100);\n+\n+        stageLoader = new StageLoader(rect);\n+        \/\/ Style: .tooltip { -fx-show-delay: 200ms; }\n+        stageLoader.getStage().getScene().getStylesheets()\n+                .add(\"data:base64,LnRvb2x0aXAgeyAtZngtc2hvdy1kZWxheTogMjAwbXM7IH0=\");\n+\n+        Tooltip.install(rect, toolTip);\n+\n+        assertFalse(toolTip.isShowing());\n+\n+        assertTooltipShownAfter(rect, 200);\n+        assertTooltipHiddenAfter(rect, 200);\n+    }\n+\n+    @Test\n+    public void testTooltipChangeShowDelayCss() {\n+        Rectangle rect = new Rectangle(0, 0, 100, 100);\n+\n+        stageLoader = new StageLoader(rect);\n+        \/\/ Style: .tooltip { -fx-show-delay: 200ms; }\n+        stageLoader.getStage().getScene().getStylesheets()\n+                .add(\"data:base64,LnRvb2x0aXAgeyAtZngtc2hvdy1kZWxheTogMjAwbXM7IH0=\");\n@@ -547,1 +676,1 @@\n-        StageLoader stageLoader = new StageLoader(rect1);\n+        Tooltip.install(rect, toolTip);\n@@ -549,1 +678,1 @@\n-        Tooltip.install(rect1, toolTip);\n+        assertFalse(toolTip.isShowing());\n@@ -551,0 +680,12 @@\n+        assertTooltipShownAfter(rect, 200);\n+        assertTooltipHiddenAfter(rect, 200);\n+\n+        \/\/ .tooltip { -fx-show-delay: 450ms; }\n+        stageLoader.getStage().getScene().getStylesheets()\n+                .setAll(\"data:base64,LnRvb2x0aXAgeyAtZngtc2hvdy1kZWxheTogNDUwbXM7IH0=\");\n+\n+        assertTooltipShownAfter(rect, 450);\n+        assertTooltipHiddenAfter(rect, 200);\n+    }\n+\n+    private void assertTooltipShownAfter(Rectangle rect, int millis) {\n@@ -552,1 +693,12 @@\n-        rect1.fireEvent(mouseEvent);\n+        rect.fireEvent(mouseEvent);\n+\n+        toolkit.setAnimationTime(toolkit.getCurrentTime() + millis);\n+\n+        assertTrue(toolTip.isShowing());\n+    }\n+\n+    private void assertTooltipHiddenAfter(Rectangle rect, int millis) {\n+        MouseEvent mouseEvent = MouseEventGenerator.generateMouseEvent(MouseEvent.MOUSE_EXITED, -1, -1);\n+        rect.fireEvent(mouseEvent);\n+\n+        toolkit.setAnimationTime(toolkit.getCurrentTime() + millis);\n@@ -554,1 +706,1 @@\n-        stageLoader.dispose();\n+        assertFalse(toolTip.isShowing());\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TooltipTest.java","additions":161,"deletions":9,"binary":false,"changes":170,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,4 @@\n+    public long getCurrentTime() {\n+        return currentTimeMillis;\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubPrimaryTimer.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -671,0 +671,5 @@\n+    \/**\n+     * Sets the current time of the {@link StubPrimaryTimer}.\n+     *\n+     * @param millis the time in milliseconds\n+     *\/\n@@ -675,0 +680,9 @@\n+    \/**\n+     * Returns the current time of the {@link StubPrimaryTimer}.\n+     *\n+     * @return the time in milliseconds\n+     *\/\n+    public long getCurrentTime() {\n+        return primaryTimer.getCurrentTime();\n+    }\n+\n@@ -689,0 +703,6 @@\n+    \/**\n+     * Sets the current time of the {@link StubPrimaryTimer} and handles all pending animations.\n+     * Useful for unit-testing things that involves animations (e.g. Timeline).\n+     *\n+     * @param millis the time in milliseconds\n+     *\/\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubToolkit.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-    public static void initFX() {\n+    static void initFX() {\n@@ -81,1 +81,1 @@\n-    public static void exit() {\n+    static void exit() {\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TooltipTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}