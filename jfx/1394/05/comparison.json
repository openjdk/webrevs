{"files":[{"patch":"@@ -862,1 +862,0 @@\n-        private boolean cssForced = false;\n@@ -999,0 +998,3 @@\n+                        \/\/ styles. Note that this is normally done when showing the tooltip,\n+                        \/\/ which is too late for some properties,\n+                        t.applyStylesheetFromOwner(owner);\n@@ -1001,8 +1003,1 @@\n-                        if (!cssForced) {\n-                            double opacity = t.getOpacity();\n-                            t.setOpacity(0);\n-                            t.show(owner);\n-                            t.hide();\n-                            t.setOpacity(opacity);\n-                            cssForced = true;\n-                        }\n+                        t.bridge.applyCss();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Tooltip.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import javafx.scene.input.MouseEvent;\n@@ -56,0 +57,2 @@\n+import test.com.sun.javafx.scene.control.infrastructure.MouseEventGenerator;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n@@ -321,1 +324,1 @@\n-          assertTrue(styleable.isSettable(toolTip.get_bridge()));\n+        assertTrue(styleable.isSettable(toolTip.get_bridge()));\n@@ -331,1 +334,1 @@\n-          assertTrue(styleable.isSettable(toolTip.get_bridge()));\n+        assertTrue(styleable.isSettable(toolTip.get_bridge()));\n@@ -334,1 +337,1 @@\n-          assertFalse(styleable.isSettable(toolTip.get_bridge()));\n+        assertFalse(styleable.isSettable(toolTip.get_bridge()));\n@@ -339,1 +342,1 @@\n-          assertTrue(styleable.isSettable(toolTip.get_bridge()));\n+        assertTrue(styleable.isSettable(toolTip.get_bridge()));\n@@ -352,1 +355,1 @@\n-          assertFalse(styleable.isSettable(toolTip.get_bridge()));\n+        assertFalse(styleable.isSettable(toolTip.get_bridge()));\n@@ -357,1 +360,1 @@\n-          assertTrue(styleable.isSettable(toolTip.get_bridge()));\n+        assertTrue(styleable.isSettable(toolTip.get_bridge()));\n@@ -369,1 +372,1 @@\n-          assertTrue(styleable.isSettable(toolTip.get_bridge()));\n+        assertTrue(styleable.isSettable(toolTip.get_bridge()));\n@@ -372,1 +375,1 @@\n-          assertFalse(styleable.isSettable(toolTip.get_bridge()));\n+        assertFalse(styleable.isSettable(toolTip.get_bridge()));\n@@ -374,1 +377,1 @@\n-     @Test public void whenContentDisplayIsSpecifiedViaCSSAndIsNotBound_CssMetaData_isSettable_ReturnsTrue() {\n+    @Test public void whenContentDisplayIsSpecifiedViaCSSAndIsNotBound_CssMetaData_isSettable_ReturnsTrue() {\n@@ -376,1 +379,1 @@\n-          assertTrue(styleable.isSettable(toolTip.get_bridge()));\n+        assertTrue(styleable.isSettable(toolTip.get_bridge()));\n@@ -386,1 +389,1 @@\n-          assertTrue(styleable.isSettable(toolTip.get_bridge()));\n+        assertTrue(styleable.isSettable(toolTip.get_bridge()));\n@@ -389,1 +392,1 @@\n-          assertFalse(styleable.isSettable(toolTip.get_bridge()));\n+        assertFalse(styleable.isSettable(toolTip.get_bridge()));\n@@ -394,1 +397,1 @@\n-          assertTrue(styleable.isSettable(toolTip.get_bridge()));\n+        assertTrue(styleable.isSettable(toolTip.get_bridge()));\n@@ -534,0 +537,19 @@\n+    \/**\n+     * A {@link Tooltip} once was showing and quickly hiding itself in order to process the CSS.\n+     * This was changed in <a href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8296387\">JDK-8296387<\/a>\n+     * and this test ensure that this is the case.\n+     *\/\n+    @Test\n+    public void testTooltipShouldNotBeShownBeforeDelayIsUp() {\n+        toolTip.showingProperty().addListener(inv -> fail());\n+        Rectangle rect1 = new Rectangle(0, 0, 100, 100);\n+\n+        StageLoader stageLoader = new StageLoader(rect1);\n+\n+        Tooltip.install(rect1, toolTip);\n+\n+        MouseEvent mouseEvent = MouseEventGenerator.generateMouseEvent(MouseEvent.MOUSE_MOVED, 1, 1);\n+        rect1.fireEvent(mouseEvent);\n+\n+        stageLoader.dispose();\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TooltipTest.java","additions":36,"deletions":14,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -461,0 +461,2 @@\n+        applyStylesheetFromOwner(owner);\n+\n@@ -463,4 +465,0 @@\n-            if (ownerScene.getUserAgentStylesheet() != null) {\n-                sceneValue.setUserAgentStylesheet(ownerScene.getUserAgentStylesheet());\n-            }\n-            sceneValue.getStylesheets().setAll(ownerScene.getStylesheets());\n@@ -482,0 +480,17 @@\n+    \/**\n+     * Applies the stylesheet from the scene of the root owner {@link Window} to the {@link Scene}\n+     * associated with that window.\n+     *\n+     * @param owner the owner {@link Window}\n+     *\/\n+    protected void applyStylesheetFromOwner(Window owner) {\n+        Scene scene = getScene();\n+        final Scene ownerScene = getRootWindow(owner).getScene();\n+        if (ownerScene != null) {\n+            if (ownerScene.getUserAgentStylesheet() != null) {\n+                scene.setUserAgentStylesheet(ownerScene.getUserAgentStylesheet());\n+            }\n+            scene.getStylesheets().setAll(ownerScene.getStylesheets());\n+        }\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/stage\/PopupWindow.java","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,295 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.scene;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+import javafx.stage.Window;\n+import javafx.util.Duration;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import test.util.Util;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class TooltipTest {\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n+    static CountDownLatch tooltipShownLatch;\n+    static Robot robot;\n+    static Button button;\n+    static Tooltip tooltip;\n+\n+    static volatile Stage stage;\n+    static volatile Scene scene;\n+\n+    private static void assertTooltipShowDelay(long tooltipShowTime, long expectedTime) {\n+        assertTooltipShowDelay(tooltipShowTime, expectedTime, 50);\n+    }\n+\n+    private static void assertTooltipShowDelay(long tooltipShowTime, long expectedTime, long maximumDifference) {\n+        \/\/ To avoid any small timing error we rather check if the value is between.\n+        long maximumTime = expectedTime + maximumDifference;\n+\n+        assertTrue(tooltipShowTime >= expectedTime, tooltipShowTime + \" >= \" + expectedTime);\n+        assertTrue(tooltipShowTime <= maximumTime, tooltipShowTime + \" <= \" + maximumTime);\n+    }\n+\n+    @BeforeAll\n+    public static void initFX() {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterAll\n+    public static void exit() {\n+        Util.shutdown();\n+    }\n+\n+    @Test\n+    void testDefaultTooltip() {\n+        assertFalse(tooltip.isShowing());\n+\n+        long tooltipShowTime = waitForTooltip();\n+\n+        assertTrue(tooltip.isShowing());\n+        assertTooltipShowDelay(tooltipShowTime, 1000);\n+    }\n+\n+    @Test\n+    void testCssStylesheetTooltip() {\n+        scene.getStylesheets().add(getClass().getResource(\"tooltip.css\").toExternalForm());\n+\n+        assertFalse(tooltip.isShowing());\n+\n+        long tooltipShowTime = waitForTooltip();\n+\n+        assertTrue(tooltip.isShowing());\n+\n+        \/\/ Since the stylesheet needs to be processed we need a bigger timeout here.\n+        long expectedTime = 30;\n+        long maximumTime = expectedTime + 100;\n+\n+        assertTooltipShowDelay(tooltipShowTime, expectedTime, maximumTime);\n+    }\n+\n+    @Test\n+    void testCssStylesheetChangeTooltip() {\n+        scene.getStylesheets().add(getClass().getResource(\"tooltip.css\").toExternalForm());\n+\n+        assertFalse(tooltip.isShowing());\n+\n+        long tooltipShowTime = waitForTooltip();\n+\n+        assertTrue(tooltip.isShowing());\n+\n+        assertTooltipShowDelay(tooltipShowTime, 30, 100);\n+\n+        scene.getStylesheets().setAll(getClass().getResource(\"tooltip2.css\").toExternalForm());\n+        tooltipShownLatch = new CountDownLatch(1);\n+        tooltipShowTime = waitForTooltip();\n+\n+        assertTrue(tooltip.isShowing());\n+\n+        assertTooltipShowDelay(tooltipShowTime, 200, 100);\n+    }\n+\n+    @Test\n+    void testSmallShowDelayTooltip() {\n+        tooltip.setShowDelay(Duration.millis(100));\n+\n+        assertFalse(tooltip.isShowing());\n+\n+        long tooltipShowTime = waitForTooltip();\n+\n+        assertTrue(tooltip.isShowing());\n+        assertTooltipShowDelay(tooltipShowTime, 100);\n+    }\n+\n+    @Test\n+    void testSmallShowDelayCssTooltip() {\n+        tooltip.setStyle(\"-fx-show-delay: 100ms;\");\n+\n+        assertFalse(tooltip.isShowing());\n+\n+        long tooltipShowTime = waitForTooltip();\n+\n+        assertTrue(tooltip.isShowing());\n+        assertTooltipShowDelay(tooltipShowTime, 100);\n+    }\n+\n+    @Test\n+    void testChangeShowDelayTooltip() {\n+        tooltip.setShowDelay(Duration.millis(100));\n+\n+        assertFalse(tooltip.isShowing());\n+\n+        long tooltipShowTime = waitForTooltip();\n+\n+        assertTrue(tooltip.isShowing());\n+        assertTooltipShowDelay(tooltipShowTime, 100);\n+\n+        \/\/ Try again with a bigger show delay.\n+        tooltip.setShowDelay(Duration.millis(2000));\n+        tooltipShownLatch = new CountDownLatch(1);\n+        tooltipShowTime = waitForTooltip();\n+\n+        assertTrue(tooltip.isShowing());\n+        assertTooltipShowDelay(tooltipShowTime, 2000);\n+    }\n+\n+    @Test\n+    void testChangeShowDelayCssTooltip() throws Throwable {\n+        tooltip.setStyle(\"-fx-show-delay: 100ms;\");\n+\n+        assertFalse(tooltip.isShowing());\n+\n+        long tooltipShowTime = waitForTooltip();\n+\n+        assertTrue(tooltip.isShowing());\n+        assertTooltipShowDelay(tooltipShowTime, 100);\n+\n+        \/\/ Try again with a bigger show delay.\n+        tooltip.setStyle(\"-fx-show-delay: 2000ms;\");\n+        tooltipShownLatch = new CountDownLatch(1);\n+        tooltipShowTime = waitForTooltip();\n+\n+        assertTrue(tooltip.isShowing());\n+        assertTooltipShowDelay(tooltipShowTime, 2000);\n+    }\n+\n+    @Test\n+    void testShowDelayCssShowTooltipTwice() {\n+        tooltip.setStyle(\"-fx-show-delay: 100ms;\");\n+\n+        assertFalse(tooltip.isShowing());\n+\n+        long tooltipShowTime = waitForTooltip();\n+\n+        System.out.println(tooltipShowTime);\n+\n+        assertTrue(tooltip.isShowing());\n+\n+        assertTooltipShowDelay(tooltipShowTime, 100);\n+\n+        \/\/ Try again.\n+        tooltipShownLatch = new CountDownLatch(1);\n+        tooltipShowTime = waitForTooltip();\n+\n+        assertTrue(tooltip.isShowing());\n+\n+        System.out.println(tooltipShowTime);\n+\n+        assertTooltipShowDelay(tooltipShowTime, 100);\n+    }\n+\n+    private long waitForTooltip() {\n+        Util.runAndWait(() -> {\n+            \/\/ Click somewhere in the Stage to ensure that it is active\n+            Window window = scene.getWindow();\n+            robot.mouseMove(window.getX() + scene.getX(), window.getY() + scene.getY());\n+            robot.mouseClick(MouseButton.PRIMARY);\n+        });\n+\n+        \/\/ Make sure that a previous tooltip is hidden by now.\n+        Util.sleep(500);\n+\n+        assertFalse(tooltip.isShowing());\n+\n+        AtomicLong time = new AtomicLong();\n+        Util.runAndWait(() -> {\n+            Window window = scene.getWindow();\n+            robot.mouseMove(\n+                    window.getX() + scene.getX() + button.getLayoutX() + button.getLayoutBounds().getWidth() \/ 2,\n+                    window.getY() + scene.getY() + button.getLayoutY() + button.getLayoutBounds().getHeight() \/ 2);\n+            time.set(System.currentTimeMillis());\n+        });\n+\n+        Util.waitForLatch(tooltipShownLatch, 5, \"Timeout waiting for tooltip to display\");\n+\n+        long finalTime = System.currentTimeMillis() - time.get();\n+\n+        Util.sleep(250);\n+\n+        return finalTime;\n+    }\n+\n+    @AfterEach\n+    void resetUI() {\n+        Util.runAndWait(() -> {\n+            button.setTooltip(null);\n+            tooltip = null;\n+\n+            scene.getStylesheets().clear();\n+        });\n+    }\n+\n+    @BeforeEach\n+    void setupUI() {\n+        Util.runAndWait(() -> {\n+            tooltipShownLatch = new CountDownLatch(1);\n+\n+            tooltip = new Tooltip(\"tooltip\");\n+            tooltip.showingProperty().addListener((obs, oldV, isShowing) -> {\n+                if (isShowing) {\n+                    tooltipShownLatch.countDown();\n+                }\n+            });\n+            button.setTooltip(tooltip);\n+        });\n+    }\n+\n+    public static class TestApp extends Application {\n+\n+        @Override\n+        public void start(Stage primaryStage) {\n+            robot = new Robot();\n+            stage = primaryStage;\n+\n+            button = new Button(\"Button\");\n+\n+            scene = new Scene(new StackPane(button), 250, 250);\n+            stage.setScene(scene);\n+            stage.initStyle(StageStyle.UNDECORATED);\n+            stage.setAlwaysOnTop(true);\n+            stage.setOnShown(event -> Platform.runLater(startupLatch::countDown));\n+            stage.show();\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TooltipTest.java","additions":295,"deletions":0,"binary":false,"changes":295,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,2 @@\n-package myapp4.pkg3;\n-\n-public class RefClass {\n+.tooltip {\n+    -fx-show-delay: 30ms;\n","filename":"tests\/system\/src\/test\/resources\/test\/robot\/javafx\/scene\/tooltip.css","additions":3,"deletions":4,"binary":false,"changes":7,"previous_filename":"tests\/system\/src\/testapp4\/java\/mymod\/myapp4\/pkg3\/RefClass.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,2 @@\n-package myapp4.pkg3;\n-\n-public class RefClass {\n+.tooltip {\n+    -fx-show-delay: 200ms;\n","filename":"tests\/system\/src\/test\/resources\/test\/robot\/javafx\/scene\/tooltip2.css","additions":3,"deletions":4,"binary":false,"changes":7,"previous_filename":"tests\/system\/src\/testapp4\/java\/mymod\/myapp4\/pkg3\/RefClass.java","status":"copied"}]}