{"files":[{"patch":"@@ -174,10 +174,0 @@\n-    @Override\n-    protected void show() {\n-        \/\/ The very first show call is just for us to do the correct CSS processing, so we ignore the request here.\n-        if (!cssForced) {\n-            return;\n-        }\n-\n-        super.show();\n-    }\n-\n@@ -1012,5 +1002,2 @@\n-                            \/\/ Note that we do not really show the tooltip but rather do all the necessary setup for\n-                            \/\/ the correct CSS processing.\n-                            \/\/ In this case we especially need the show method to attach all the stylesheets to us\n-                            \/\/ from the owner root window.\n-                            t.show(owner);\n+                            \/\/ We need to copy the stylesheet from the owner.\n+                            t.applyStylesheetFromOwner(owner);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Tooltip.java","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -461,0 +461,2 @@\n+        applyStylesheetFromOwner(owner);\n+\n@@ -463,4 +465,0 @@\n-            if (ownerScene.getUserAgentStylesheet() != null) {\n-                sceneValue.setUserAgentStylesheet(ownerScene.getUserAgentStylesheet());\n-            }\n-            sceneValue.getStylesheets().setAll(ownerScene.getStylesheets());\n@@ -482,0 +480,17 @@\n+    \/**\n+     * Applies the stylesheet from the scene of the root owner {@link Window} to the {@link Scene}\n+     * associated with that window.\n+     *\n+     * @param owner the owner {@link Window}\n+     *\/\n+    protected void applyStylesheetFromOwner(Window owner) {\n+        Scene scene = getScene();\n+        final Scene ownerScene = getRootWindow(owner).getScene();\n+        if (ownerScene != null) {\n+            if (ownerScene.getUserAgentStylesheet() != null) {\n+                scene.setUserAgentStylesheet(ownerScene.getUserAgentStylesheet());\n+            }\n+            scene.getStylesheets().setAll(ownerScene.getStylesheets());\n+        }\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/stage\/PopupWindow.java","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -63,0 +63,18 @@\n+    private static void assertTooltipShowDelay(long tooltipShowTime, long expectedTime) {\n+        \/\/ To avoid any small timing error we rather check if the value is between.\n+        long maximumTime = expectedTime + 50;\n+\n+        assertTrue(tooltipShowTime >= expectedTime, tooltipShowTime + \" >= \" + expectedTime);\n+        assertTrue(tooltipShowTime <= maximumTime, tooltipShowTime + \" <= \" + maximumTime);\n+    }\n+\n+    @BeforeAll\n+    public static void initFX() {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterAll\n+    public static void exit() {\n+        Util.shutdown();\n+    }\n+\n@@ -64,1 +82,1 @@\n-    public void testDefaultTooltip() {\n+    void testDefaultTooltip() {\n@@ -74,1 +92,1 @@\n-    public void testCssStylesheetTooltip() {\n+    void testCssStylesheetTooltip() {\n@@ -86,1 +104,1 @@\n-    public void testSmallShowDelayTooltip() {\n+    void testSmallShowDelayTooltip() {\n@@ -98,1 +116,1 @@\n-    public void testSmallShowDelayCssTooltip() {\n+    void testSmallShowDelayCssTooltip() {\n@@ -110,1 +128,1 @@\n-    public void testChangeShowDelayTooltip() {\n+    void testChangeShowDelayTooltip() {\n@@ -130,1 +148,1 @@\n-    public void testChangeShowDelayCssTooltip() throws Throwable {\n+    void testChangeShowDelayCssTooltip() throws Throwable {\n@@ -150,1 +168,1 @@\n-    public void testShowDelayCssShowTooltipTwice() {\n+    void testShowDelayCssShowTooltipTwice() {\n@@ -205,36 +223,0 @@\n-    private static void assertTooltipShowDelay(long tooltipShowTime, long expectedTime) {\n-        \/\/ To avoid any small timing error we rather check if the value is between.\n-        long maximumTime = expectedTime + 50;\n-\n-        assertTrue(tooltipShowTime >= expectedTime, tooltipShowTime + \" < \" + expectedTime);\n-        assertTrue(tooltipShowTime <= maximumTime, tooltipShowTime + \" > \" + maximumTime);\n-    }\n-\n-    public static class TestApp extends Application {\n-\n-        @Override\n-        public void start(Stage primaryStage) {\n-            robot = new Robot();\n-            stage = primaryStage;\n-\n-            button = new Button(\"Button\");\n-\n-            scene = new Scene(new StackPane(button), 250, 250);\n-            stage.setScene(scene);\n-            stage.initStyle(StageStyle.UNDECORATED);\n-            stage.setAlwaysOnTop(true);\n-            stage.setOnShown(event -> Platform.runLater(startupLatch::countDown));\n-            stage.show();\n-        }\n-    }\n-\n-    @BeforeAll\n-    public static void initFX() {\n-        Util.launch(startupLatch, TestApp.class);\n-    }\n-\n-    @AfterAll\n-    public static void exit() {\n-        Util.shutdown(stage);\n-    }\n-\n@@ -265,0 +247,18 @@\n+\n+    public static class TestApp extends Application {\n+\n+        @Override\n+        public void start(Stage primaryStage) {\n+            robot = new Robot();\n+            stage = primaryStage;\n+\n+            button = new Button(\"Button\");\n+\n+            scene = new Scene(new StackPane(button), 250, 250);\n+            stage.setScene(scene);\n+            stage.initStyle(StageStyle.UNDECORATED);\n+            stage.setAlwaysOnTop(true);\n+            stage.setOnShown(event -> Platform.runLater(startupLatch::countDown));\n+            stage.show();\n+        }\n+    }\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/TooltipTest.java","additions":43,"deletions":43,"binary":false,"changes":86,"status":"modified"}]}