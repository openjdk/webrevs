{"files":[{"patch":"@@ -33,0 +33,2 @@\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n@@ -175,0 +177,45 @@\n+    \/**\n+     * The common system menus in the system menu bar.\n+     *\n+     * A list of menus which are always present in the system menu bar (if the\n+     * platform supports it). If a MenuBar uses the system menu bar its menus\n+     * will appear alongside the common system menus. If this list is\n+     * modified at runtime the system menu bar will update as expected.\n+     *\n+     * @return the common system menus list property\n+     * @since 26\n+     *\/\n+    public static final ObjectProperty<ObservableList<Menu>> commonSystemMenusProperty() {\n+        if (commonSystemMenus == null) {\n+            commonSystemMenus = new SimpleObjectProperty<ObservableList<Menu>>(null) {\n+                @Override protected void invalidated() {\n+                    MenuBarSkin.setCommonSystemMenus(getValue());\n+                }\n+\n+                @Override\n+                public Object getBean() {\n+                    return MenuBar.class;\n+                }\n+\n+                @Override\n+                public String getName() {\n+                    return \"commonSystemMenus\";\n+                }\n+\n+                @Override\n+                public void bind(final ObservableValue<? extends ObservableList<Menu>> rawObservable) {\n+                    throw new RuntimeException(\"cannot uni-directionally bind to common system menus - use bindBidirectional instead\");\n+                }\n+\n+            };\n+        }\n+        return commonSystemMenus;\n+    }\n+\n+    private static SimpleObjectProperty<ObservableList<Menu>> commonSystemMenus;\n+    public static final void setCommonSystemMenus(ObservableList<Menu> value) {\n+        commonSystemMenusProperty().setValue(value);\n+    }\n+    public static final ObservableList<Menu> getCommonSystemMenus() {\n+        return commonSystemMenus == null ? null : commonSystemMenus.getValue();\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/MenuBar.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -123,0 +123,4 @@\n+    private static ObservableList<Menu> commonSystemMenus;\n+    private static List<MenuBase> wrappedCommonSystemMenus = new ArrayList<>();\n+    private static ListChangeListener<Menu> commonSystemMenusChangeListener;\n+\n@@ -491,0 +495,34 @@\n+    private static void updateCommonSystemMenus() {\n+        wrappedCommonSystemMenus.clear();\n+        if (commonSystemMenus != null) {\n+            for (Menu menu : commonSystemMenus) {\n+                if (!menuContainsCustomMenuItem(menu)) {\n+                    wrappedCommonSystemMenus.add(GlobalMenuAdapter.adapt(menu));\n+                }\n+            }\n+        }\n+        Toolkit.getToolkit().getSystemMenu().setCommonMenus(wrappedCommonSystemMenus);\n+    }\n+\n+    \/**\n+     * Set the common system menus. Intended as a private API.\n+     * @param menuList list of common menus\n+     *\/\n+    public static void setCommonSystemMenus(final ObservableList<Menu> menuList) {\n+        if (Toolkit.getToolkit().getSystemMenu().isSupported()) {\n+            if (commonSystemMenusChangeListener == null) {\n+                commonSystemMenusChangeListener = (ListChangeListener<Menu>) c -> {\n+                    updateCommonSystemMenus();\n+                };\n+            }\n+            if (commonSystemMenus != null) {\n+                commonSystemMenus.removeListener(commonSystemMenusChangeListener);\n+            }\n+            commonSystemMenus = menuList;\n+            updateCommonSystemMenus();\n+            if (commonSystemMenus != null) {\n+                commonSystemMenus.addListener(commonSystemMenusChangeListener);\n+            }\n+        }\n+    }\n+\n@@ -765,1 +803,1 @@\n-    private boolean menuContainsCustomMenuItem(Menu menu) {\n+    private static boolean menuContainsCustomMenuItem(Menu menu) {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/MenuBarSkin.java","additions":39,"deletions":1,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -822,0 +822,15 @@\n+    \/**\n+     * Hides the current application. Only implemented on Mac.\n+     *\/\n+    public void hideApplication() {}\n+\n+    \/**\n+     * Hides all other applications. Only implemented on Mac.\n+     *\/\n+    public void hideOtherApplications() {}\n+\n+    \/**\n+     * Undoes the effects of hideOtherApplications. Only implemented on Mac.\n+     *\/\n+    public void showAllApplications() {}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/Application.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -222,0 +222,18 @@\n+    @Override\n+    public void hideApplication() {\n+        checkEventThread();\n+        _hide();\n+    }\n+\n+    @Override\n+    public void hideOtherApplications() {\n+        checkEventThread();\n+        _hideOtherApplications();\n+    }\n+\n+    @Override\n+    public void showAllApplications() {\n+        checkEventThread();\n+        _unhideAllApplications();\n+    }\n+\n@@ -266,1 +284,1 @@\n-        menubar.add(this.appleMenu);\n+        menubar.insert(this.appleMenu, 0);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacApplication.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -981,0 +981,21 @@\n+    public static void hideApplication() {\n+        var application = com.sun.glass.ui.Application.GetApplication();\n+        if (application != null) {\n+            application.hideApplication();\n+        }\n+    }\n+\n+    public static void hideOtherApplications() {\n+        var application = com.sun.glass.ui.Application.GetApplication();\n+        if (application != null) {\n+            application.hideOtherApplications();\n+        }\n+    }\n+\n+    public static void showAllApplications() {\n+        var application = com.sun.glass.ui.Application.GetApplication();\n+        if (application != null) {\n+            application.showAllApplications();\n+        }\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformImpl.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-\n+    public void setCommonMenus(List<MenuBase> menus);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/TKSystemMenu.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,0 +63,3 @@\n+    private List<MenuBase>      commonSystemMenus = null;\n+    private int                 commonSystemMenuCount = 0;\n+\n@@ -69,0 +72,3 @@\n+        if (commonSystemMenus != null) {\n+            setCommonMenus(commonSystemMenus);\n+        }\n@@ -78,1 +84,0 @@\n-            app.installDefaultMenus(glassSystemMenuBar);\n@@ -80,0 +85,1 @@\n+            installCommonSystemMenus();\n@@ -109,1 +115,1 @@\n-             * Leave the Apple menu in place\n+             * Leave the common menus in place\n@@ -111,1 +117,1 @@\n-            for (int index = existingSize - 1; index >= 1; index--) {\n+            for (int index = existingSize - 1; index >= commonSystemMenuCount; index--) {\n@@ -123,0 +129,44 @@\n+    @Override\n+    public void setCommonMenus(List<MenuBase> menus) {\n+        if (active != null) {\n+            active.set(false);\n+        }\n+        active = new SimpleBooleanProperty(true);\n+        removeCommonSystemMenus();\n+        commonSystemMenus = menus;\n+        installCommonSystemMenus();\n+    }\n+\n+    private void removeCommonSystemMenus() {\n+        if (glassSystemMenuBar != null) {\n+            List<Menu> existingMenus = glassSystemMenuBar.getMenus();\n+            for (int i = 0; i < commonSystemMenuCount; ++i) {\n+                Menu menu = existingMenus.get(0);\n+                clearMenu(menu);\n+                glassSystemMenuBar.remove(0);\n+            }\n+        }\n+        commonSystemMenuCount = 0;\n+    }\n+\n+    private void installCommonSystemMenus() {\n+        if (glassSystemMenuBar != null) {\n+            if (commonSystemMenus != null && commonSystemMenus.size() > 0) {\n+                for (int i = commonSystemMenus.size() - 1; i >= 0; i--) {\n+                    var menu = commonSystemMenus.get(i);\n+                    if (menu.isVisible()) {\n+                        insertMenu(null, commonSystemMenus.get(i), 0);\n+                        commonSystemMenuCount += 1;\n+                    }\n+                }\n+            }\n+\n+            if (commonSystemMenuCount == 0) {\n+                Application app = Application.GetApplication();\n+                int count = glassSystemMenuBar.getMenus().size();\n+                app.installDefaultMenus(glassSystemMenuBar);\n+                commonSystemMenuCount = glassSystemMenuBar.getMenus().size() - count;\n+            }\n+        }\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/GlassSystemMenu.java","additions":53,"deletions":3,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.application;\n+\n+import com.sun.javafx.application.PlatformImpl;\n+\n+\/**\n+ * This class provides services for an Application. This includes\n+ * methods to show and hide other applications.\n+ *\n+ * @since 26\n+ *\/\n+public final class ApplicationServices {\n+\n+    \/\/ To prevent instantiation\n+    private ApplicationServices() {\n+    }\n+\n+    \/**\n+     * Hide the application.\n+     *\n+     * @since 26\n+     *\/\n+    public static void hideApplication() {\n+        PlatformImpl.hideApplication();\n+    }\n+\n+    \/**\n+     * Hide applications other than the current one.\n+     *\n+     * @since 26\n+     *\/\n+    public static void hideOtherApplications() {\n+        PlatformImpl.hideOtherApplications();\n+    }\n+\n+    \/**\n+     * Show all applications.\n+     *\n+     * @since 26\n+     *\/\n+    public static void showAllApplications() {\n+        PlatformImpl.showAllApplications();\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/ApplicationServices.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -28,7 +28,0 @@\n-@interface NSApplication (NiblessAdditions)\n-\n--(void)setAppleMenu:(NSMenu *)aMenu;\n-\n-@end\n-\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.h","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -55,7 +55,0 @@\n-@interface NSMenuItem (SPI)\n-\n-\/\/ Apple's SPI\n-- setAppleMenu:(NSMenuItem*)item;\n-\n-@end\n-\n@@ -345,6 +338,0 @@\n-        if ([[glassmenu->item title] compare:@\"Apple\"] == NSOrderedSame)\n-        {\n-            LOG(\"calling setAppleMenu\");\n-            [NSApp performSelector:@selector(setAppleMenu:) withObject:glassmenu->item];\n-        }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassMenu.m","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -967,0 +967,4 @@\n+\n+        @Override\n+        public void setCommonMenus(List<MenuBase> menus) {\n+        }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubToolkit.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,301 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.scene;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import com.sun.javafx.PlatformUtil;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.Scene;\n+import javafx.scene.Node;\n+import javafx.scene.control.Menu;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.Button;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyCodeCombination;\n+import javafx.scene.input.KeyCombination;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Stage;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Disabled;\n+import test.util.Util;\n+\n+public class CommonSystemMenusTest {\n+    @BeforeAll\n+    public static void initFX() throws Exception {\n+        CountDownLatch startupLatch = new CountDownLatch(1);\n+\n+        Util.startup(startupLatch, () -> {\n+            startupLatch.countDown();\n+        });\n+\n+        initTest();\n+    }\n+\n+    @AfterAll\n+    public static void teardownOnce() {\n+        Util.shutdown();\n+    }\n+\n+    \/\/ One stage uses the system menu bar, one stage uses a standard menu bar.\n+    \/\/ For each stage we track a node we can use to focus the stage and a\n+    \/\/ menu item that is unique to that stage.\n+    static class StageData {\n+        Stage       stage;\n+        Node        focusItem;\n+        MenuBar     menuBar;\n+        MenuItem    menuItem;\n+        KeyCode     acceleratorCode;\n+    };\n+\n+    static StageData systemMenuBarData;\n+    static StageData standardMenuBarData;\n+\n+    \/\/ The list of common system menus\n+    static ObservableList<Menu> commonMenus;\n+    \/\/ A menu item that is always available in the common system menus\n+    static MenuItem commonMenuItem;\n+\n+    \/\/ Accelerator codes used to test the presence of menu items and their\n+    static final KeyCode SYSTEM_MENU_ACCELERATOR = KeyCode.G;\n+    static final KeyCode STANDARD_MENU_ACCELERATOR = KeyCode.B;\n+    static final KeyCode COMMON_MENU_ACCELERATOR = KeyCode.L;\n+    static final KeyCode TRANSIENT_MENU_ACCELERATOR = KeyCode.J;\n+    static final KeyCode TEMPORARY_MENU_ITEM_ACCELERATOR = KeyCode.K;\n+\n+    private static StageData initStage(boolean useSystemMenuBar, KeyCode stageAccelCode) {\n+        var menuItem = new MenuItem(\"Stage Item\");\n+        menuItem.setAccelerator(new KeyCodeCombination(stageAccelCode, KeyCombination.SHORTCUT_DOWN));\n+\n+        var menu = new Menu(\"Stage Menu\");\n+        menu.getItems().add(menuItem);\n+\n+        var menuBar = new MenuBar();\n+        menuBar.setUseSystemMenuBar(useSystemMenuBar);\n+        menuBar.getMenus().add(menu);\n+\n+        var button = new Button(\"Focus Button\");\n+        var vbox = new VBox(menuBar, button);\n+        var scene = new Scene(vbox);\n+        var stage = new Stage();\n+        stage.setScene(scene);\n+        stage.show();\n+\n+        StageData data = new StageData();\n+        data.stage = stage;\n+        data.focusItem = button;\n+        data.menuBar = menuBar;\n+        data.menuItem = menuItem;\n+        data.acceleratorCode = stageAccelCode;\n+\n+        return data;\n+    }\n+\n+    private static void initTest() {\n+        Util.runAndWait(() -> {\n+            systemMenuBarData = initStage(true, SYSTEM_MENU_ACCELERATOR);\n+            standardMenuBarData = initStage(false, STANDARD_MENU_ACCELERATOR);\n+\n+            commonMenuItem = new MenuItem(\"Common Item\");\n+            commonMenuItem.setAccelerator(new KeyCodeCombination(COMMON_MENU_ACCELERATOR, KeyCombination.SHORTCUT_DOWN));\n+\n+            var menu = new Menu(\"Common Menu\");\n+            menu.getItems().add(commonMenuItem);\n+\n+            commonMenus = FXCollections.<Menu>observableArrayList();\n+            commonMenus.add(menu);\n+            MenuBar.setCommonSystemMenus(commonMenus);\n+        });\n+    }\n+\n+    \/\/ We test the presence or absence of a menu by attempting to trigger a\n+    \/\/ menu item in that menu via its accelerator.\n+    private boolean sendAccelerator(MenuItem menuItem, KeyCode code) {\n+        CountDownLatch acceleratorLatch = new CountDownLatch(1);\n+        AtomicBoolean acceleratorFired = new AtomicBoolean(false);\n+\n+        Util.runAndWait(() -> {\n+            menuItem.setOnAction(a -> {\n+                acceleratorFired.set(true);\n+                acceleratorLatch.countDown();\n+            });\n+\n+            var robot = new Robot();\n+            robot.keyPress(KeyCode.COMMAND);\n+            robot.keyPress(code);\n+            robot.keyRelease(code);\n+            robot.keyRelease(KeyCode.COMMAND);\n+        });\n+\n+        try {\n+            acceleratorLatch.await(50, TimeUnit.MILLISECONDS);\n+        } catch (Exception ex) {\n+        }\n+\n+        Util.runAndWait(() -> {\n+            menuItem.setOnAction(null);\n+        });\n+\n+        return acceleratorFired.get();\n+    }\n+\n+    private boolean systemMenuBarPresent() {\n+        return sendAccelerator(systemMenuBarData.menuItem, SYSTEM_MENU_ACCELERATOR);\n+    }\n+\n+    private boolean standardMenuBarPresent() {\n+        return sendAccelerator(standardMenuBarData.menuItem, STANDARD_MENU_ACCELERATOR);\n+    }\n+\n+    private boolean commonMenuPresent() {\n+        return sendAccelerator(commonMenuItem, COMMON_MENU_ACCELERATOR);\n+    }\n+\n+    private boolean transientMenuPresent(MenuItem menuItem) {\n+        return sendAccelerator(menuItem, TRANSIENT_MENU_ACCELERATOR);\n+    }\n+\n+    private boolean temporaryMenuItemPresent(MenuItem menuItem) {\n+        return sendAccelerator(menuItem, TEMPORARY_MENU_ITEM_ACCELERATOR);\n+    }\n+\n+    private void focusStage(StageData data) {\n+        Util.runAndWait(() -> {\n+            data.focusItem.requestFocus();\n+            data.stage.requestFocus();\n+        });\n+    }\n+\n+    \/\/ Test that we can add and remove a menu to the list of menus\n+    \/\/ and toggle it's visibility\n+    private void testAddRemoveMenu(ObservableList<Menu> menuList) {\n+        var menuItem = new MenuItem(\"Transient\");\n+        menuItem.setAccelerator(new KeyCodeCombination(TRANSIENT_MENU_ACCELERATOR, KeyCombination.SHORTCUT_DOWN));\n+        var transientMenu = new Menu(\"Transient\");\n+        transientMenu.getItems().add(menuItem);\n+\n+        assertFalse(transientMenuPresent(menuItem), \"Transient menu present at start of test\");\n+\n+        Util.runAndWait(() -> menuList.add(transientMenu));\n+        boolean added = transientMenuPresent(menuItem);\n+        Util.runAndWait(() -> transientMenu.setVisible(false));\n+        boolean hidden = !transientMenuPresent(menuItem);\n+        Util.runAndWait(() -> transientMenu.setVisible(true));\n+        boolean restored = transientMenuPresent(menuItem);\n+        Util.runAndWait(() -> menuList.remove(transientMenu));\n+        boolean removed = !transientMenuPresent(menuItem);\n+\n+        assertTrue(added, \"Transient menu not added\");\n+        assertTrue(hidden, \"Transient menu not hidden\");\n+        assertTrue(restored, \"Transient menu still hidden\");\n+        assertTrue(removed, \"Transient menu not removed\");\n+    }\n+\n+    \/\/ Test that we can remove and restore the entire list of common menus.\n+    \/\/ Even with the common menus removed the stage-specific menu items\n+    \/\/ should still work.\n+    private void testRemoveAllCommonMenus(StageData data) {\n+        Util.runAndWait(() -> MenuBar.setCommonSystemMenus(null));\n+        boolean menuRemoved = !commonMenuPresent();\n+        boolean stageMenuPresent = sendAccelerator(data.menuItem, data.acceleratorCode);\n+        Util.runAndWait(() -> MenuBar.setCommonSystemMenus(commonMenus));\n+        boolean menuRestored = commonMenuPresent();\n+\n+        assertTrue(menuRemoved, \"Common menus not removed\");\n+        assertTrue(stageMenuPresent, \"Stage's menu bar removed with common menus\");\n+        assertTrue(menuRestored, \"Common menus not restored\");\n+    }\n+\n+    \/\/ Verify that we can add and remove an item in one of the menus and\n+    \/\/ toggle its visibility.\n+    \/\/\n+    \/\/ Menu item visibility behaves differently in the system menus. Normally\n+    \/\/ hiding a menu item does not disable its accelerator but if it's in a\n+    \/\/ system menu it might due to platform limitations. So we only test for\n+    \/\/ visibility if we know the menu item is not in a system menu.\n+    private void testAddRemoveMenuItem(Menu menu, boolean testVisibility) {\n+        var menuItem = new MenuItem(\"Temporary\");\n+        menuItem.setAccelerator(new KeyCodeCombination(TEMPORARY_MENU_ITEM_ACCELERATOR, KeyCombination.SHORTCUT_DOWN));\n+        assertFalse(temporaryMenuItemPresent(menuItem));\n+\n+        Util.runAndWait(() -> menu.getItems().add(menuItem));\n+        boolean menuItemAdded = temporaryMenuItemPresent(menuItem);\n+\n+        boolean menuItemHidden = true;\n+        boolean menuItemVisible = true;\n+        if (testVisibility) {\n+            Util.runAndWait(() -> menuItem.setVisible(false));\n+            menuItemHidden = !temporaryMenuItemPresent(menuItem);\n+            Util.runAndWait(() -> menuItem.setVisible(true));\n+            menuItemVisible = temporaryMenuItemPresent(menuItem);\n+        }\n+\n+        Util.runAndWait(() -> menu.getItems().remove(menuItem));\n+        boolean menuItemRemoved = !temporaryMenuItemPresent(menuItem);\n+\n+        assertTrue(menuItemAdded, \"Temporary menu item not added\");\n+        assertTrue(menuItemHidden, \"Temporary menu item not hidden\");\n+        assertTrue(menuItemVisible, \"Temporary menu item still hidden\");\n+        assertTrue(menuItemRemoved, \"Temporary menu item not removed\");\n+    }\n+\n+    \/\/ Run all the tests for a stage.\n+    private void runTest(StageData stageData) {\n+        focusStage(stageData);\n+        assertTrue(commonMenuPresent(), \"Common menu not present at start\");\n+        testAddRemoveMenu(commonMenus);\n+        testAddRemoveMenu(stageData.menuBar.getMenus());\n+        testRemoveAllCommonMenus(stageData);\n+        testAddRemoveMenuItem(commonMenus.get(0), true);\n+        testAddRemoveMenuItem(stageData.menuBar.getMenus().get(0), stageData.menuBar.isUseSystemMenuBar());\n+    }\n+\n+    @Test\n+    public void commonMenusWithSystemMenuBar() {\n+        assumeTrue(PlatformUtil.isMac());\n+        runTest(systemMenuBarData);\n+        assertTrue(systemMenuBarPresent(), \"System menu bar not present\");\n+        assertFalse(standardMenuBarPresent(), \"Standard menu bar present\");\n+    }\n+\n+    @Test\n+    public void commonMenusWithStandardMenuBar() {\n+        assumeTrue(PlatformUtil.isMac());\n+        runTest(standardMenuBarData);\n+        assertFalse(systemMenuBarPresent(), \"System menu bar present\");\n+        assertTrue(standardMenuBarPresent(), \"Standard menu bar not present\");\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/CommonSystemMenusTest.java","additions":301,"deletions":0,"binary":false,"changes":301,"status":"added"}]}