{"files":[{"patch":"@@ -51,9 +51,0 @@\n-import static com.sun.media.jfxmedia.locator.HLSConnectionHolder.CHARSET_US_ASCII;\n-import static com.sun.media.jfxmedia.locator.HLSConnectionHolder.CHARSET_UTF_8;\n-import static com.sun.media.jfxmedia.locator.HLSConnectionHolder.HLS_VALUE_MIMETYPE_AAC;\n-import static com.sun.media.jfxmedia.locator.HLSConnectionHolder.HLS_VALUE_MIMETYPE_FMP4;\n-import static com.sun.media.jfxmedia.locator.HLSConnectionHolder.HLS_VALUE_MIMETYPE_MP2T;\n-import static com.sun.media.jfxmedia.locator.HLSConnectionHolder.HLS_VALUE_MIMETYPE_MP3;\n-import static com.sun.media.jfxmedia.locator.HLSConnectionHolder.HLS_VALUE_MIMETYPE_UNKNOWN;\n-import static com.sun.media.jfxmedia.locator.HLSConnectionHolder.stripParameters;\n-\n@@ -85,1 +76,0 @@\n-    \/\/private Semaphore loadSegmentsSemaphore = null;\n@@ -306,1 +296,1 @@\n-                     audioStream.setDuration(duration);\n+                    audioStream.setDuration(duration);\n@@ -347,1 +337,1 @@\n-        synchronized(newPlaylistLock) {\n+        synchronized (newPlaylistLock) {\n@@ -446,1 +436,1 @@\n-        synchronized(newPlaylistLock) {\n+        synchronized (newPlaylistLock) {\n@@ -478,1 +468,0 @@\n-}\n@@ -480,14 +469,1 @@\n-class PlaylistLoader extends Thread {\n-\n-    public static final int STATE_INIT = 0;\n-    public static final int STATE_EXIT = 1;\n-    public static final int STATE_RELOAD_PLAYLIST = 2;\n-    private final BlockingQueue<Integer> stateQueue = new LinkedBlockingQueue<>();\n-    private URI playlistURI = null;\n-    private Playlist reloadPlaylist = null;\n-    private Playlist reloadAudioExtPlaylist = null;\n-    private final Object reloadLock = new Object();\n-    private volatile boolean stopped = false;\n-    private final CountDownLatch readySignal = new CountDownLatch(1);\n-    private VariantPlaylist variantPlaylist = null;\n-    private Playlist currentPlaylist = null;\n+    private static class PlaylistLoader extends Thread {\n@@ -495,4 +471,12 @@\n-    PlaylistLoader() {\n-        setName(\"JFXMedia HLS Playlist Thread\");\n-        setDaemon(true);\n-    }\n+        public static final int STATE_INIT = 0;\n+        public static final int STATE_EXIT = 1;\n+        public static final int STATE_RELOAD_PLAYLIST = 2;\n+        private final BlockingQueue<Integer> stateQueue = new LinkedBlockingQueue<>();\n+        private URI playlistURI = null;\n+        private Playlist reloadPlaylist = null;\n+        private Playlist reloadAudioExtPlaylist = null;\n+        private final Object reloadLock = new Object();\n+        private volatile boolean stopped = false;\n+        private final CountDownLatch readySignal = new CountDownLatch(1);\n+        private VariantPlaylist variantPlaylist = null;\n+        private Playlist currentPlaylist = null;\n@@ -500,6 +484,3 @@\n-    boolean waitForReady() {\n-        try {\n-            readySignal.await();\n-            return true;\n-        } catch (InterruptedException e) {\n-            return false;\n+        PlaylistLoader() {\n+            setName(\"JFXMedia HLS Playlist Thread\");\n+            setDaemon(true);\n@@ -507,1 +488,0 @@\n-    }\n@@ -509,3 +489,8 @@\n-    VariantPlaylist getVariantPlaylist() {\n-        return variantPlaylist;\n-    }\n+        boolean waitForReady() {\n+            try {\n+                readySignal.await();\n+                return true;\n+            } catch (InterruptedException e) {\n+                return false;\n+            }\n+        }\n@@ -513,3 +498,3 @@\n-    Playlist getCurrentPlaylist() {\n-        return currentPlaylist;\n-    }\n+        VariantPlaylist getVariantPlaylist() {\n+            return variantPlaylist;\n+        }\n@@ -517,3 +502,3 @@\n-    void setPlaylistURI(URI playlistURI) {\n-        this.playlistURI = playlistURI;\n-    }\n+        Playlist getCurrentPlaylist() {\n+            return currentPlaylist;\n+        }\n@@ -521,3 +506,2 @@\n-    void setReloadPlaylist(Playlist playlist) {\n-        synchronized (reloadLock) {\n-            reloadPlaylist = playlist;\n+        void setPlaylistURI(URI playlistURI) {\n+            this.playlistURI = playlistURI;\n@@ -525,1 +509,0 @@\n-    }\n@@ -527,3 +510,4 @@\n-    void setReloadAudioExtPlaylist(Playlist playlist) {\n-        synchronized (reloadLock) {\n-            reloadAudioExtPlaylist = playlist;\n+        void setReloadPlaylist(Playlist playlist) {\n+            synchronized (reloadLock) {\n+                reloadPlaylist = playlist;\n+            }\n@@ -531,1 +515,0 @@\n-    }\n@@ -533,19 +516,3 @@\n-    @Override\n-    public void run() {\n-        while (!stopped) {\n-            try {\n-                int state = stateQueue.take();\n-                switch (state) {\n-                    case STATE_INIT:\n-                        stateInit();\n-                        break;\n-                    case STATE_EXIT:\n-                        stopped = true;\n-                        break;\n-                    case STATE_RELOAD_PLAYLIST:\n-                        stateReloadPlaylist();\n-                        break;\n-                    default:\n-                        break;\n-                }\n-            } catch (InterruptedException e) {\n+        void setReloadAudioExtPlaylist(Playlist playlist) {\n+            synchronized (reloadLock) {\n+                reloadAudioExtPlaylist = playlist;\n@@ -554,1 +521,0 @@\n-    }\n@@ -556,5 +522,20 @@\n-    void putState(int state) {\n-        if (stateQueue != null) {\n-            try {\n-                stateQueue.put(state);\n-            } catch (InterruptedException ex) {\n+        @Override\n+        public void run() {\n+            while (!stopped) {\n+                try {\n+                    int state = stateQueue.take();\n+                    switch (state) {\n+                        case STATE_INIT:\n+                            stateInit();\n+                            break;\n+                        case STATE_EXIT:\n+                            stopped = true;\n+                            break;\n+                        case STATE_RELOAD_PLAYLIST:\n+                            stateReloadPlaylist();\n+                            break;\n+                        default:\n+                            break;\n+                    }\n+                } catch (InterruptedException e) {\n+                }\n@@ -563,1 +544,0 @@\n-    }\n@@ -565,3 +545,7 @@\n-    private void stateInit() {\n-        if (playlistURI == null) {\n-            return;\n+        void putState(int state) {\n+            if (stateQueue != null) {\n+                try {\n+                    stateQueue.put(state);\n+                } catch (InterruptedException ex) {\n+                }\n+            }\n@@ -570,3 +554,4 @@\n-        try {\n-            PlaylistParser parser = new PlaylistParser();\n-            parser.load(playlistURI);\n+        private void stateInit() {\n+            if (playlistURI == null) {\n+                return;\n+            }\n@@ -574,5 +559,10 @@\n-            if (parser.getVariantPlaylistOrNull() != null) {\n-                variantPlaylist = parser.getVariantPlaylistOrNull();\n-            } else {\n-                if (currentPlaylist == null) {\n-                    currentPlaylist = parser.getPlaylistOrNull();\n+            try {\n+                PlaylistParser parser = new PlaylistParser();\n+                parser.load(playlistURI);\n+\n+                if (parser.getVariantPlaylistOrNull() != null) {\n+                    variantPlaylist = parser.getVariantPlaylistOrNull();\n+                } else {\n+                    if (currentPlaylist == null) {\n+                        currentPlaylist = parser.getPlaylistOrNull();\n+                    }\n@@ -580,1 +570,0 @@\n-            }\n@@ -582,17 +571,20 @@\n-            if (variantPlaylist != null) {\n-                \/\/ Load playlists (EXT-X-STREAM-INF) inside variant playlist if needed\n-                variantPlaylist.getExtStreamInf().forEach((ExtStreamInf ext) -> {\n-                    Playlist playlist = new Playlist(ext.getPlaylistURI());\n-                    playlist.update(null);\n-                    playlist.setAudioGroupID(ext.getAudioGroupID());\n-                    ext.setPlaylist(playlist);\n-                });\n-                variantPlaylist.validateExtStreamInf();\n-\n-                final boolean isVideoStreamFragmentedMP4;\n-                final long videoStreamTargetDuration;\n-                currentPlaylist = variantPlaylist.getPlaylist(0);\n-                if (currentPlaylist != null) {\n-                    isVideoStreamFragmentedMP4 = currentPlaylist.isFragmentedMP4();\n-                    if (isVideoStreamFragmentedMP4) {\n-                        videoStreamTargetDuration = currentPlaylist.getTargetDuration();\n+                if (variantPlaylist != null) {\n+                    \/\/ Load playlists (EXT-X-STREAM-INF) inside variant playlist if needed\n+                    variantPlaylist.getExtStreamInf().forEach((ExtStreamInf ext) -> {\n+                        Playlist playlist = new Playlist(ext.getPlaylistURI());\n+                        playlist.update(null);\n+                        playlist.setAudioGroupID(ext.getAudioGroupID());\n+                        ext.setPlaylist(playlist);\n+                    });\n+                    variantPlaylist.validateExtStreamInf();\n+\n+                    final boolean isVideoStreamFragmentedMP4;\n+                    final long videoStreamTargetDuration;\n+                    currentPlaylist = variantPlaylist.getPlaylist(0);\n+                    if (currentPlaylist != null) {\n+                        isVideoStreamFragmentedMP4 = currentPlaylist.isFragmentedMP4();\n+                        if (isVideoStreamFragmentedMP4) {\n+                            videoStreamTargetDuration = currentPlaylist.getTargetDuration();\n+                        } else {\n+                            videoStreamTargetDuration = 0;\n+                        }\n@@ -600,0 +592,1 @@\n+                        isVideoStreamFragmentedMP4 = false;\n@@ -602,3 +595,10 @@\n-                } else {\n-                    isVideoStreamFragmentedMP4 = false;\n-                    videoStreamTargetDuration = 0;\n+\n+                    \/\/ Load Audio Ext Media playlist if needed\n+                    variantPlaylist.getAudioExtMedia().forEach((AudioExtMedia ext) -> {\n+                        Playlist playlist = new Playlist(ext.getPlaylistURI());\n+                        playlist.setIsVideoStreamFragmentedMP4(isVideoStreamFragmentedMP4);\n+                        playlist.setVideoStreamTargetDuration(videoStreamTargetDuration);\n+                        playlist.update(null);\n+                        ext.setPlaylist(playlist);\n+                    });\n+                    variantPlaylist.validateAudioExtMedia();\n@@ -607,10 +607,12 @@\n-                \/\/ Load Audio Ext Media playlist if needed\n-                variantPlaylist.getAudioExtMedia().forEach((AudioExtMedia ext) -> {\n-                    Playlist playlist = new Playlist(ext.getPlaylistURI());\n-                    playlist.setIsVideoStreamFragmentedMP4(isVideoStreamFragmentedMP4);\n-                    playlist.setVideoStreamTargetDuration(videoStreamTargetDuration);\n-                    playlist.update(null);\n-                    ext.setPlaylist(playlist);\n-                });\n-                variantPlaylist.validateAudioExtMedia();\n-            }\n+                if (variantPlaylist != null) {\n+                    currentPlaylist = variantPlaylist.getPlaylist(0);\n+                    \/\/ Start reloading live playlist\n+                    if (currentPlaylist != null && currentPlaylist.isLive()) {\n+                        setReloadPlaylist(currentPlaylist);\n+\n+                        \/\/ Add audio ext playlist for reload if we have one\n+                        Playlist audioExtPlaylist = variantPlaylist\n+                                .getAudioExtPlaylist(currentPlaylist.getAudioGroupID());\n+                        if (audioExtPlaylist != null && audioExtPlaylist.isLive()) {\n+                            this.setReloadAudioExtPlaylist(audioExtPlaylist);\n+                        }\n@@ -618,11 +620,1 @@\n-            if (variantPlaylist != null) {\n-                currentPlaylist = variantPlaylist.getPlaylist(0);\n-                \/\/ Start reloading live playlist\n-                if (currentPlaylist != null && currentPlaylist.isLive()) {\n-                    setReloadPlaylist(currentPlaylist);\n-\n-                    \/\/ Add audio ext playlist for reload if we have one\n-                    Playlist audioExtPlaylist = variantPlaylist\n-                        .getAudioExtPlaylist(currentPlaylist.getAudioGroupID());\n-                    if (audioExtPlaylist != null && audioExtPlaylist.isLive()) {\n-                        this.setReloadAudioExtPlaylist(audioExtPlaylist);\n+                        putState(STATE_RELOAD_PLAYLIST);\n@@ -630,2 +622,0 @@\n-\n-                    putState(STATE_RELOAD_PLAYLIST);\n@@ -633,0 +623,2 @@\n+            } finally {\n+                readySignal.countDown();\n@@ -634,2 +626,0 @@\n-        } finally {\n-            readySignal.countDown();\n@@ -637,1 +627,0 @@\n-    }\n@@ -639,5 +628,9 @@\n-    private void stateReloadPlaylist() {\n-        try {\n-            long timeout;\n-            synchronized (reloadLock) {\n-                timeout = reloadPlaylist.getTargetDuration() \/ 2;\n+        private void stateReloadPlaylist() {\n+            try {\n+                long timeout;\n+                synchronized (reloadLock) {\n+                    timeout = reloadPlaylist.getTargetDuration() \/ 2;\n+                }\n+                Thread.sleep(timeout);\n+            } catch (InterruptedException ex) {\n+                return;\n@@ -645,4 +638,0 @@\n-            Thread.sleep(timeout);\n-        } catch (InterruptedException ex) {\n-            return;\n-        }\n@@ -650,4 +639,5 @@\n-        synchronized (reloadLock) {\n-            reloadPlaylist.update(null);\n-            if (reloadAudioExtPlaylist != null) {\n-                reloadAudioExtPlaylist.update(null);\n+            synchronized (reloadLock) {\n+                reloadPlaylist.update(null);\n+                if (reloadAudioExtPlaylist != null) {\n+                    reloadAudioExtPlaylist.update(null);\n+                }\n@@ -655,1 +645,0 @@\n-        }\n@@ -657,1 +646,2 @@\n-        putState(STATE_RELOAD_PLAYLIST);\n+            putState(STATE_RELOAD_PLAYLIST);\n+        }\n@@ -659,1 +649,0 @@\n-}\n@@ -661,1 +650,1 @@\n-class PlaylistParser {\n+    private static class PlaylistParser {\n@@ -663,24 +652,5 @@\n-    private URI playlistURI = null;\n-    private boolean isDiscontinuity = false;\n-    private VariantPlaylist variantPlaylist = null;\n-    private Playlist playlist = null;\n-    private boolean isEndList = false;\n-\n-    private final String TAG_PARAM_TYPE = \"TYPE\";\n-    private final String TAG_PARAM_TYPE_AUDIO = \"AUDIO\";\n-    private final String TAG_PARAM_GROUP_ID = \"GROUP-ID\";\n-    private final String TAG_PARAM_AUTOSELECT = \"AUTOSELECT\";\n-    private final String TAG_PARAM_DEFAULT = \"DEFAULT\";\n-    private final String TAG_PARAM_URI = \"URI\";\n-    private final String TAG_PARAM_BANDWIDTH = \"BANDWIDTH\";\n-    private final String TAG_PARAM_AUDIO = \"AUDIO\";\n-    private final String TAG_VALUE_YES = \"YES\";\n-\n-    void load(URI uri) {\n-        playlistURI = uri;\n-\n-        HttpURLConnection connection = null;\n-        BufferedReader reader = null;\n-        try {\n-            connection = (HttpURLConnection) uri.toURL().openConnection();\n-            connection.setRequestMethod(\"GET\");\n+        private URI playlistURI = null;\n+        private boolean isDiscontinuity = false;\n+        private VariantPlaylist variantPlaylist = null;\n+        private Playlist playlist = null;\n+        private boolean isEndList = false;\n@@ -688,4 +658,9 @@\n-            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {\n-                MediaUtils.error(this, MediaError.ERROR_LOCATOR_CONNECTION_LOST.code(),\n-                        \"HTTP responce code: \" + connection.getResponseCode(), null);\n-            }\n+        private final String TAG_PARAM_TYPE = \"TYPE\";\n+        private final String TAG_PARAM_TYPE_AUDIO = \"AUDIO\";\n+        private final String TAG_PARAM_GROUP_ID = \"GROUP-ID\";\n+        private final String TAG_PARAM_AUTOSELECT = \"AUTOSELECT\";\n+        private final String TAG_PARAM_DEFAULT = \"DEFAULT\";\n+        private final String TAG_PARAM_URI = \"URI\";\n+        private final String TAG_PARAM_BANDWIDTH = \"BANDWIDTH\";\n+        private final String TAG_PARAM_AUDIO = \"AUDIO\";\n+        private final String TAG_VALUE_YES = \"YES\";\n@@ -693,4 +668,2 @@\n-            Charset charset = getCharset(uri.toURL().toExternalForm(), connection.getContentType());\n-            if (charset != null) {\n-                reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), charset));\n-            }\n+        void load(URI uri) {\n+            playlistURI = uri;\n@@ -698,4 +671,9 @@\n-            if (reader != null) {\n-                \/\/ First line cannot be null and should be #EXTM3U\n-                if (\"#EXTM3U\".equals(reader.readLine())) {\n-                    parse(reader);\n+            HttpURLConnection connection = null;\n+            BufferedReader reader = null;\n+            try {\n+                connection = (HttpURLConnection) uri.toURL().openConnection();\n+                connection.setRequestMethod(\"GET\");\n+\n+                if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {\n+                    MediaUtils.error(this, MediaError.ERROR_LOCATOR_CONNECTION_LOST.code(),\n+                            \"HTTP responce code: \" + connection.getResponseCode(), null);\n@@ -703,7 +681,4 @@\n-            }\n-        } catch (IOException e) {\n-        } finally {\n-            if (reader != null) {\n-                try {\n-                    reader.close();\n-                } catch (IOException e) {\n+\n+                Charset charset = getCharset(uri.toURL().toExternalForm(), connection.getContentType());\n+                if (charset != null) {\n+                    reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), charset));\n@@ -712,4 +687,13 @@\n-                Locator.closeConnection(connection);\n-            }\n-        }\n-    }\n+                if (reader != null) {\n+                    \/\/ First line cannot be null and should be #EXTM3U\n+                    if (\"#EXTM3U\".equals(reader.readLine())) {\n+                        parse(reader);\n+                    }\n+                }\n+            } catch (IOException e) {\n+            } finally {\n+                if (reader != null) {\n+                    try {\n+                        reader.close();\n+                    } catch (IOException e) {\n+                    }\n@@ -717,3 +701,3 @@\n-    private VariantPlaylist getVariantPlaylist() {\n-        if (variantPlaylist == null) {\n-            variantPlaylist = new VariantPlaylist(playlistURI);\n+                    Locator.closeConnection(connection);\n+                }\n+            }\n@@ -722,2 +706,4 @@\n-        return variantPlaylist;\n-    }\n+        private VariantPlaylist getVariantPlaylist() {\n+            if (variantPlaylist == null) {\n+                variantPlaylist = new VariantPlaylist(playlistURI);\n+            }\n@@ -725,3 +711,2 @@\n-    VariantPlaylist getVariantPlaylistOrNull() {\n-        return variantPlaylist;\n-    }\n+            return variantPlaylist;\n+        }\n@@ -729,3 +714,3 @@\n-    void setPlaylist(Playlist value) {\n-        playlist = value;\n-    }\n+        VariantPlaylist getVariantPlaylistOrNull() {\n+            return variantPlaylist;\n+        }\n@@ -733,3 +718,2 @@\n-    private Playlist getPlaylist() {\n-        if (playlist == null) {\n-            playlist = new Playlist(playlistURI);\n+        void setPlaylist(Playlist value) {\n+            playlist = value;\n@@ -738,2 +722,4 @@\n-        return playlist;\n-    }\n+        private Playlist getPlaylist() {\n+            if (playlist == null) {\n+                playlist = new Playlist(playlistURI);\n+            }\n@@ -741,3 +727,2 @@\n-    Playlist getPlaylistOrNull() {\n-        return playlist;\n-    }\n+            return playlist;\n+        }\n@@ -745,3 +730,3 @@\n-    boolean isLivePlaylist() {\n-        return !isEndList;\n-    }\n+        Playlist getPlaylistOrNull() {\n+            return playlist;\n+        }\n@@ -749,3 +734,2 @@\n-    private void validateArray(String[] tagParams, int length) {\n-        if (tagParams.length < length) {\n-            throw new MediaException(\"Invalid HLS playlist\");\n+        boolean isLivePlaylist() {\n+            return !isEndList;\n@@ -753,1 +737,0 @@\n-    }\n@@ -755,8 +738,3 @@\n-    private String getNextLine(BufferedReader reader) throws IOException {\n-        String line;\n-        while ((line = reader.readLine()) != null) {\n-            \/\/ Ignore blank lines, comments and tags\n-            if (line.isEmpty() || line.startsWith(\"#\")) {\n-                continue;\n-            } else {\n-                return line;\n+        private void validateArray(String[] tagParams, int length) {\n+            if (tagParams.length < length) {\n+                throw new MediaException(\"Invalid HLS playlist\");\n@@ -766,9 +744,9 @@\n-        throw new MediaException(\"Invalid HLS playlist\");\n-    }\n-\n-    private void parse(BufferedReader reader) throws IOException {\n-        String line;\n-        while ((line = reader.readLine()) != null) {\n-            \/\/ Ignore blank lines and comments\n-            if (line.isEmpty() || (line.startsWith(\"#\") && !line.startsWith(\"#EXT\"))) {\n-                continue;\n+        private String getNextLine(BufferedReader reader) throws IOException {\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                \/\/ Ignore blank lines, comments and tags\n+                if (line.isEmpty() || line.startsWith(\"#\")) {\n+                    continue;\n+                } else {\n+                    return line;\n+                }\n@@ -777,57 +755,9 @@\n-            \/\/ If line is not a blank or comment, then it can be tags or URI.\n-            \/\/ URI lines should be read when we're parsing tags, so here we\n-            \/\/ should only get tags. We can have tags with or without\n-            \/\/ parameters. Tag and parameters are separated by \":\".\n-            String[] tagParams = line.split(\":\");\n-            validateArray(tagParams, 1);\n-\n-            switch (tagParams[0]) {\n-                case \"#EXTINF\": { \/\/ #EXTINF:<duration>\n-                    validateArray(tagParams, 2);\n-                    String[] params = tagParams[1].split(\",\");\n-                    validateArray(params, 1);\n-                    String URI = getNextLine(reader);\n-                    getPlaylist().addMediaFile(URI,\n-                            Double.parseDouble(params[0]), isDiscontinuity);\n-                    \/\/ Clear discontinue flag, until it is set again by parser.\n-                    isDiscontinuity = false;\n-                    break;\n-                }\n-                case \"#EXT-X-TARGETDURATION\": { \/\/ #EXT-X-TARGETDURATION:<s>\n-                    validateArray(tagParams, 2);\n-                    getPlaylist().setTargetDuration(\n-                            Integer.parseInt(tagParams[1]));\n-                    break;\n-                }\n-                case \"#EXT-X-MEDIA-SEQUENCE\": { \/\/ #EXT-X-MEDIA-SEQUENCE:<number>\n-                    validateArray(tagParams, 2);\n-                    getPlaylist().setSequenceNumber(\n-                            Integer.parseInt(tagParams[1]));\n-                    break;\n-                }\n-                case \"#EXT-X-STREAM-INF\": { \/\/ #EXT-X-STREAM-INF:<attribute-list>\n-                    validateArray(tagParams, 2);\n-                    String[] params = tagParams[1].split(\",\");\n-                    int bitrate = getIntegerParams(TAG_PARAM_BANDWIDTH, params);\n-                    String audioGroupID = getStringParams(TAG_PARAM_AUDIO, params);\n-                    String location = getNextLine(reader);\n-                    ExtStreamInf item = new ExtStreamInf(location, bitrate);\n-                    item.setAudioGroupID(audioGroupID);\n-                    getVariantPlaylist().addExtStreamInf(item);\n-                    break;\n-                }\n-                case \"#EXT-X-ENDLIST\": { \/\/ #EXT-X-ENDLIST\n-                    isEndList = true;\n-                    break;\n-                }\n-                case \"#EXT-X-DISCONTINUITY\": { \/\/ #EXT-X-DISCONTINUITY\n-                    isDiscontinuity = true;\n-                    break;\n-                }\n-                case \"#EXT-X-MAP\": { \/\/ #EXT-X-MAP\n-                    validateArray(tagParams, 2);\n-                    String[] params = tagParams[1].split(\",\");\n-                    String uri = getStringParams(TAG_PARAM_URI, params);\n-                    getPlaylist().addMediaFile(uri,\n-                            getPlaylist().getTargetDuration(), true);\n-                    break;\n+            throw new MediaException(\"Invalid HLS playlist\");\n+        }\n+\n+        private void parse(BufferedReader reader) throws IOException {\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                \/\/ Ignore blank lines and comments\n+                if (line.isEmpty() || (line.startsWith(\"#\") && !line.startsWith(\"#EXT\"))) {\n+                    continue;\n@@ -835,27 +765,87 @@\n-                case \"#EXT-X-MEDIA\": { \/\/ #EXT-X-MEDIA\n-                    validateArray(tagParams, 2);\n-                    String[] params = tagParams[1].split(\",\");\n-                    String type = getStringParams(TAG_PARAM_TYPE, params);\n-                    if (type.equals(TAG_PARAM_TYPE_AUDIO)) {\n-                        \/\/ Required\n-                        String groupID = getStringParams(TAG_PARAM_GROUP_ID, params);\n-                        \/\/ Optional (YES or NO)\n-                        \/\/ We should assume value NO if DEFAULT or AUTOSELECT is absent.\n-                        \/\/ According to spec we should not auto select streams if both\n-                        \/\/ DEFAULT and AUTOSELECT are NO. Currently, we do not provide APIs\n-                        \/\/ to manually select additional streams, so we will drop it in case\n-                        \/\/ when both DEFAULT and AUTOSELECT are NO.\n-                        String isAutoSelect = getStringParams(TAG_PARAM_AUTOSELECT, params);\n-                        String isDefault = getStringParams(TAG_PARAM_DEFAULT, params);\n-                        \/\/ Optional\n-                        \/\/ Looks like URI can be null for closed caption and video. If it is null,\n-                        \/\/ then stream is included with EXT-X-STREAM-INF, but in case for audio\n-                        \/\/ it is not clear how it will work. Also, there is no example for such case\n-                        \/\/ in documentations. Examples are only for video. For now, we will ignore\n-                        \/\/ any audio streams without URI.\n-                        String location = getStringParams(TAG_PARAM_URI, params);\n-                        boolean autoSelectBool = TAG_VALUE_YES.equalsIgnoreCase(isAutoSelect);\n-                        boolean defaultBool = TAG_VALUE_YES.equalsIgnoreCase(isDefault);\n-                        if (location != null && (autoSelectBool || defaultBool)) {\n-                            AudioExtMedia item = new AudioExtMedia(groupID, location);\n-                            getVariantPlaylist().addAudioExtMedia(item);\n+\n+                \/\/ If line is not a blank or comment, then it can be tags or URI.\n+                \/\/ URI lines should be read when we're parsing tags, so here we\n+                \/\/ should only get tags. We can have tags with or without\n+                \/\/ parameters. Tag and parameters are separated by \":\".\n+                String[] tagParams = line.split(\":\");\n+                validateArray(tagParams, 1);\n+\n+                switch (tagParams[0]) {\n+                    case \"#EXTINF\": { \/\/ #EXTINF:<duration>\n+                        validateArray(tagParams, 2);\n+                        String[] params = tagParams[1].split(\",\");\n+                        validateArray(params, 1);\n+                        String URI = getNextLine(reader);\n+                        getPlaylist().addMediaFile(URI,\n+                                Double.parseDouble(params[0]), isDiscontinuity);\n+                        \/\/ Clear discontinue flag, until it is set again by parser.\n+                        isDiscontinuity = false;\n+                        break;\n+                    }\n+                    case \"#EXT-X-TARGETDURATION\": { \/\/ #EXT-X-TARGETDURATION:<s>\n+                        validateArray(tagParams, 2);\n+                        getPlaylist().setTargetDuration(\n+                                Integer.parseInt(tagParams[1]));\n+                        break;\n+                    }\n+                    case \"#EXT-X-MEDIA-SEQUENCE\": { \/\/ #EXT-X-MEDIA-SEQUENCE:<number>\n+                        validateArray(tagParams, 2);\n+                        getPlaylist().setSequenceNumber(\n+                                Integer.parseInt(tagParams[1]));\n+                        break;\n+                    }\n+                    case \"#EXT-X-STREAM-INF\": { \/\/ #EXT-X-STREAM-INF:<attribute-list>\n+                        validateArray(tagParams, 2);\n+                        String[] params = tagParams[1].split(\",\");\n+                        int bitrate = getIntegerParams(TAG_PARAM_BANDWIDTH, params);\n+                        String audioGroupID = getStringParams(TAG_PARAM_AUDIO, params);\n+                        String location = getNextLine(reader);\n+                        ExtStreamInf item = new ExtStreamInf(location, bitrate);\n+                        item.setAudioGroupID(audioGroupID);\n+                        getVariantPlaylist().addExtStreamInf(item);\n+                        break;\n+                    }\n+                    case \"#EXT-X-ENDLIST\": { \/\/ #EXT-X-ENDLIST\n+                        isEndList = true;\n+                        break;\n+                    }\n+                    case \"#EXT-X-DISCONTINUITY\": { \/\/ #EXT-X-DISCONTINUITY\n+                        isDiscontinuity = true;\n+                        break;\n+                    }\n+                    case \"#EXT-X-MAP\": { \/\/ #EXT-X-MAP\n+                        validateArray(tagParams, 2);\n+                        String[] params = tagParams[1].split(\",\");\n+                        String uri = getStringParams(TAG_PARAM_URI, params);\n+                        getPlaylist().addMediaFile(uri,\n+                                getPlaylist().getTargetDuration(), true);\n+                        break;\n+                    }\n+                    case \"#EXT-X-MEDIA\": { \/\/ #EXT-X-MEDIA\n+                        validateArray(tagParams, 2);\n+                        String[] params = tagParams[1].split(\",\");\n+                        String type = getStringParams(TAG_PARAM_TYPE, params);\n+                        if (type.equals(TAG_PARAM_TYPE_AUDIO)) {\n+                            \/\/ Required\n+                            String groupID = getStringParams(TAG_PARAM_GROUP_ID, params);\n+                            \/\/ Optional (YES or NO)\n+                            \/\/ We should assume value NO if DEFAULT or AUTOSELECT is absent.\n+                            \/\/ According to spec we should not auto select streams if both\n+                            \/\/ DEFAULT and AUTOSELECT are NO. Currently, we do not provide APIs\n+                            \/\/ to manually select additional streams, so we will drop it in case\n+                            \/\/ when both DEFAULT and AUTOSELECT are NO.\n+                            String isAutoSelect = getStringParams(TAG_PARAM_AUTOSELECT, params);\n+                            String isDefault = getStringParams(TAG_PARAM_DEFAULT, params);\n+                            \/\/ Optional\n+                            \/\/ Looks like URI can be null for closed caption and video. If it is null,\n+                            \/\/ then stream is included with EXT-X-STREAM-INF, but in case for audio\n+                            \/\/ it is not clear how it will work. Also, there is no example for such case\n+                            \/\/ in documentations. Examples are only for video. For now, we will ignore\n+                            \/\/ any audio streams without URI.\n+                            String location = getStringParams(TAG_PARAM_URI, params);\n+                            boolean autoSelectBool = TAG_VALUE_YES.equalsIgnoreCase(isAutoSelect);\n+                            boolean defaultBool = TAG_VALUE_YES.equalsIgnoreCase(isDefault);\n+                            if (location != null && (autoSelectBool || defaultBool)) {\n+                                AudioExtMedia item = new AudioExtMedia(groupID, location);\n+                                getVariantPlaylist().addAudioExtMedia(item);\n+                            }\n@@ -863,0 +853,4 @@\n+                        break;\n+                    }\n+                    default: { \/\/ Unsupported tag. Ok to ignore.\n+                        break;\n@@ -864,4 +858,0 @@\n-                    break;\n-                }\n-                default: { \/\/ Unsupported tag. Ok to ignore.\n-                    break;\n@@ -871,1 +861,0 @@\n-    }\n@@ -873,32 +862,32 @@\n-    private String getStringParams(String name, String[] params) {\n-        Stream<String> stream = Arrays.stream(params);\n-        return stream.filter(x -> x.startsWith(name))\n-                .flatMap(x -> {\n-                    String param = x.trim();\n-                    String[] paramValuePair = param.split(\"=\");\n-                    if (paramValuePair.length == 2 &&\n-                            !paramValuePair[1].isEmpty()) {\n-                        return Stream.of(\n-                                paramValuePair[1].replaceAll(\"^\\\"+|\\\"+$\", \"\"));\n-                    }\n-                    return Stream.empty();\n-                })\n-                .findFirst()\n-                .orElse(null);\n-    }\n-\n-    private int getIntegerParams(String name, String[] params) {\n-        Stream<String> stream = Arrays.stream(params);\n-        return stream.filter(x -> x.startsWith(name))\n-                .flatMap(x -> {\n-                    String param = x.trim();\n-                    String[] paramValuePair = param.split(\"=\");\n-                    if (paramValuePair.length == 2 &&\n-                            !paramValuePair[1].isEmpty()) {\n-                        return Stream.of(Integer.parseInt(paramValuePair[1]));\n-                    }\n-                    return Stream.empty();\n-                })\n-                .findFirst()\n-                .orElse(null);\n-    }\n+        private String getStringParams(String name, String[] params) {\n+            Stream<String> stream = Arrays.stream(params);\n+            return stream.filter(x -> x.startsWith(name))\n+                    .flatMap(x -> {\n+                        String param = x.trim();\n+                        String[] paramValuePair = param.split(\"=\");\n+                        if (paramValuePair.length == 2 &&\n+                                !paramValuePair[1].isEmpty()) {\n+                            return Stream.of(\n+                                    paramValuePair[1].replaceAll(\"^\\\"+|\\\"+$\", \"\"));\n+                        }\n+                        return Stream.empty();\n+                    })\n+                    .findFirst()\n+                    .orElse(null);\n+        }\n+\n+        private int getIntegerParams(String name, String[] params) {\n+            Stream<String> stream = Arrays.stream(params);\n+            return stream.filter(x -> x.startsWith(name))\n+                    .flatMap(x -> {\n+                        String param = x.trim();\n+                        String[] paramValuePair = param.split(\"=\");\n+                        if (paramValuePair.length == 2 &&\n+                                !paramValuePair[1].isEmpty()) {\n+                            return Stream.of(Integer.parseInt(paramValuePair[1]));\n+                        }\n+                        return Stream.empty();\n+                    })\n+                    .findFirst()\n+                    .orElse(null);\n+        }\n@@ -906,10 +895,11 @@\n-    private Charset getCharset(String url, String mimeType) {\n-        if ((url != null && stripParameters(url).endsWith(\".m3u8\"))\n-                || (mimeType != null && mimeType.equals(\"application\/vnd.apple.mpegurl\"))) {\n-            if (Charset.isSupported(CHARSET_UTF_8)) {\n-                return Charset.forName(CHARSET_UTF_8);\n-            }\n-        } else if ((url != null && stripParameters(url).endsWith(\".m3u\"))\n-                || (mimeType != null && mimeType.equals(\"audio\/mpegurl\"))) {\n-            if (Charset.isSupported(CHARSET_US_ASCII)) {\n-                return Charset.forName(CHARSET_US_ASCII);\n+        private Charset getCharset(String url, String mimeType) {\n+            if ((url != null && stripParameters(url).endsWith(\".m3u8\"))\n+                    || (mimeType != null && mimeType.equals(\"application\/vnd.apple.mpegurl\"))) {\n+                if (Charset.isSupported(CHARSET_UTF_8)) {\n+                    return Charset.forName(CHARSET_UTF_8);\n+                }\n+            } else if ((url != null && stripParameters(url).endsWith(\".m3u\"))\n+                    || (mimeType != null && mimeType.equals(\"audio\/mpegurl\"))) {\n+                if (Charset.isSupported(CHARSET_US_ASCII)) {\n+                    return Charset.forName(CHARSET_US_ASCII);\n+                }\n@@ -917,1 +907,0 @@\n-        }\n@@ -919,1 +908,2 @@\n-        return null;\n+            return null;\n+        }\n@@ -921,1 +911,0 @@\n-}\n@@ -923,13 +912,8 @@\n-\/\/ Contains information from EXT-X-STREAM-INF tag and corresponding playlist\n-\/\/ with media segments.\n-class ExtStreamInf {\n-    private String location = null;\n-    private int bitrate = 0;\n-    private String audioGroupID = null;\n-    private URI playlistURI = null;\n-    private Playlist playlist = null;\n-\n-    ExtStreamInf(String location, int bitrate) {\n-        this.location = location;\n-        this.bitrate = bitrate;\n-    }\n+    \/\/ Contains information from EXT-X-STREAM-INF tag and corresponding playlist\n+    \/\/ with media segments.\n+    private static class ExtStreamInf {\n+        private String location = null;\n+        private int bitrate = 0;\n+        private String audioGroupID = null;\n+        private URI playlistURI = null;\n+        private Playlist playlist = null;\n@@ -937,3 +921,4 @@\n-    int getBitrate() {\n-        return bitrate;\n-    }\n+        ExtStreamInf(String location, int bitrate) {\n+            this.location = location;\n+            this.bitrate = bitrate;\n+        }\n@@ -941,3 +926,3 @@\n-    void setAudioGroupID(String value) {\n-        audioGroupID = value;\n-    }\n+        int getBitrate() {\n+            return bitrate;\n+        }\n@@ -945,3 +930,3 @@\n-    String getAudioGroupID() {\n-        return audioGroupID;\n-    }\n+        void setAudioGroupID(String value) {\n+            audioGroupID = value;\n+        }\n@@ -949,3 +934,3 @@\n-    String getLocation() {\n-        return location;\n-    }\n+        String getAudioGroupID() {\n+            return audioGroupID;\n+        }\n@@ -953,3 +938,3 @@\n-    void setPlaylistURI(URI uri) {\n-        playlistURI = uri;\n-    }\n+        String getLocation() {\n+            return location;\n+        }\n@@ -957,3 +942,3 @@\n-    URI getPlaylistURI() {\n-        return playlistURI;\n-    }\n+        void setPlaylistURI(URI uri) {\n+            playlistURI = uri;\n+        }\n@@ -961,3 +946,7 @@\n-    void setPlaylist(Playlist value) {\n-        playlist = value;\n-    }\n+        URI getPlaylistURI() {\n+            return playlistURI;\n+        }\n+\n+        void setPlaylist(Playlist value) {\n+            playlist = value;\n+        }\n@@ -965,2 +954,3 @@\n-    Playlist getPlaylist() {\n-        return playlist;\n+        Playlist getPlaylist() {\n+            return playlist;\n+        }\n@@ -968,1 +958,0 @@\n-}\n@@ -970,3 +959,3 @@\n-\/\/ Contains information from EXT-X-MEDIA tag and corresponding playlist with\n-\/\/ media segments. This class supports only AUDIO type.\n-class AudioExtMedia {\n+    \/\/ Contains information from EXT-X-MEDIA tag and corresponding playlist with\n+    \/\/ media segments. This class supports only AUDIO type.\n+    private static class AudioExtMedia {\n@@ -974,4 +963,4 @@\n-    private String groupID = null;\n-    private String location = null;\n-    private URI playlistURI = null;\n-    private Playlist playlist = null;\n+        private String groupID = null;\n+        private String location = null;\n+        private URI playlistURI = null;\n+        private Playlist playlist = null;\n@@ -979,4 +968,4 @@\n-    AudioExtMedia(String groupID, String location) {\n-        this.groupID = groupID;\n-        this.location = location;\n-    }\n+        AudioExtMedia(String groupID, String location) {\n+            this.groupID = groupID;\n+            this.location = location;\n+        }\n@@ -984,3 +973,3 @@\n-    String getGroupID() {\n-        return groupID;\n-    }\n+        String getGroupID() {\n+            return groupID;\n+        }\n@@ -988,3 +977,3 @@\n-    String getLocation() {\n-        return location;\n-    }\n+        String getLocation() {\n+            return location;\n+        }\n@@ -992,3 +981,3 @@\n-    void setPlaylistURI(URI uri) {\n-        playlistURI = uri;\n-    }\n+        void setPlaylistURI(URI uri) {\n+            playlistURI = uri;\n+        }\n@@ -996,3 +985,3 @@\n-    URI getPlaylistURI() {\n-        return playlistURI;\n-    }\n+        URI getPlaylistURI() {\n+            return playlistURI;\n+        }\n@@ -1000,3 +989,3 @@\n-    void setPlaylist(Playlist value) {\n-        playlist = value;\n-    }\n+        void setPlaylist(Playlist value) {\n+            playlist = value;\n+        }\n@@ -1004,2 +993,3 @@\n-    Playlist getPlaylist() {\n-        return playlist;\n+        Playlist getPlaylist() {\n+            return playlist;\n+        }\n@@ -1007,1 +997,0 @@\n-}\n@@ -1009,1 +998,1 @@\n-class VariantPlaylist {\n+    private static class VariantPlaylist {\n@@ -1011,4 +1000,4 @@\n-    private URI playlistURI = null;\n-    private final List<ExtStreamInf> extStreamInf = new ArrayList<>();\n-    private final List<AudioExtMedia> audioExtMedia = new ArrayList<>();\n-    private final List<Integer> playlistBitrates = new ArrayList<>();\n+        private URI playlistURI = null;\n+        private final List<ExtStreamInf> extStreamInf = new ArrayList<>();\n+        private final List<AudioExtMedia> audioExtMedia = new ArrayList<>();\n+        private final List<Integer> playlistBitrates = new ArrayList<>();\n@@ -1016,3 +1005,3 @@\n-    VariantPlaylist(URI uri) {\n-        playlistURI = uri;\n-    }\n+        VariantPlaylist(URI uri) {\n+            playlistURI = uri;\n+        }\n@@ -1020,6 +1009,8 @@\n-    void addExtStreamInf(ExtStreamInf item) {\n-        \/\/ Before adding ext stream inf we need to resolve URI against variant playlist.\n-        try {\n-            item.setPlaylistURI(locationToURI(item.getLocation()));\n-        } catch (URISyntaxException | MalformedURLException e) {\n-            throw new MediaException(\"Invalid HLS playlist\");\n+        void addExtStreamInf(ExtStreamInf item) {\n+            \/\/ Before adding ext stream inf we need to resolve URI against variant playlist.\n+            try {\n+                item.setPlaylistURI(locationToURI(item.getLocation()));\n+            } catch (URISyntaxException | MalformedURLException e) {\n+                throw new MediaException(\"Invalid HLS playlist\");\n+            }\n+            extStreamInf.add(item);\n@@ -1027,2 +1018,0 @@\n-        extStreamInf.add(item);\n-    }\n@@ -1030,3 +1019,3 @@\n-    List<ExtStreamInf> getExtStreamInf() {\n-        return extStreamInf;\n-    }\n+        List<ExtStreamInf> getExtStreamInf() {\n+            return extStreamInf;\n+        }\n@@ -1034,16 +1023,12 @@\n-    \/\/ Should be called after ExtStreamInf is fully loaded including playlist\n-    \/\/ itself.\n-    \/\/ It will do final validation and drop anything we do not want.\n-    void validateExtStreamInf() {\n-        String extension = null; \/\/ Will be set to media file extension of first playlist\n-        boolean hasAudioGroupID = false; \/\/ Will be set to true if first playlist has group ID.\n-        Iterator<ExtStreamInf> it = extStreamInf.iterator();\n-        while (it.hasNext()) {\n-            ExtStreamInf item = it.next();\n-            Playlist playlist = item.getPlaylist();\n-            if (playlist == null) {\n-                it.remove();\n-            } else {\n-                if (extension == null) {\n-                    extension = playlist.getMediaFileExtension();\n-                    hasAudioGroupID = (item.getAudioGroupID() != null);\n+        \/\/ Should be called after ExtStreamInf is fully loaded including playlist\n+        \/\/ itself.\n+        \/\/ It will do final validation and drop anything we do not want.\n+        void validateExtStreamInf() {\n+            String extension = null; \/\/ Will be set to media file extension of first playlist\n+            boolean hasAudioGroupID = false; \/\/ Will be set to true if first playlist has group ID.\n+            Iterator<ExtStreamInf> it = extStreamInf.iterator();\n+            while (it.hasNext()) {\n+                ExtStreamInf item = it.next();\n+                Playlist playlist = item.getPlaylist();\n+                if (playlist == null) {\n+                    it.remove();\n@@ -1051,8 +1036,13 @@\n-                    if (!extension.equals(playlist.getMediaFileExtension())) {\n-                        it.remove();\n-                    }\n-                    \/\/ If at least one stream has audio group id (separate audio stream), we\n-                    \/\/ need to make sure that they all have it. Our pipeline does not support\n-                    \/\/ such cases and it is not clear if they can exist.\n-                    if (hasAudioGroupID && (item.getAudioGroupID() == null)) {\n-                        it.remove();\n+                    if (extension == null) {\n+                        extension = playlist.getMediaFileExtension();\n+                        hasAudioGroupID = (item.getAudioGroupID() != null);\n+                    } else {\n+                        if (!extension.equals(playlist.getMediaFileExtension())) {\n+                            it.remove();\n+                        }\n+                        \/\/ If at least one stream has audio group id (separate audio stream), we\n+                        \/\/ need to make sure that they all have it. Our pipeline does not support\n+                        \/\/ such cases and it is not clear if they can exist.\n+                        if (hasAudioGroupID && (item.getAudioGroupID() == null)) {\n+                            it.remove();\n+                        }\n@@ -1062,1 +1052,0 @@\n-        }\n@@ -1064,4 +1053,4 @@\n-        if (extStreamInf.isEmpty()) {\n-            \/\/ We did not found any supported streams\n-            throw new MediaException(\"Invalid HLS playlist\");\n-        }\n+            if (extStreamInf.isEmpty()) {\n+                \/\/ We did not found any supported streams\n+                throw new MediaException(\"Invalid HLS playlist\");\n+            }\n@@ -1069,5 +1058,5 @@\n-        \/\/ Load bitrates for switching playlists\n-        extStreamInf.forEach((ext) -> {\n-            playlistBitrates.add(ext.getBitrate());\n-        });\n-    }\n+            \/\/ Load bitrates for switching playlists\n+            extStreamInf.forEach((ext) -> {\n+                playlistBitrates.add(ext.getBitrate());\n+            });\n+        }\n@@ -1075,7 +1064,9 @@\n-    void addAudioExtMedia(AudioExtMedia item) {\n-        \/\/ Before adding audio ext media we need to resolve URI against variant\n-        \/\/ playlist.\n-        try {\n-            item.setPlaylistURI(locationToURI(item.getLocation()));\n-        } catch (URISyntaxException | MalformedURLException e) {\n-            throw new MediaException(\"Invalid HLS playlist\");\n+        void addAudioExtMedia(AudioExtMedia item) {\n+            \/\/ Before adding audio ext media we need to resolve URI against variant\n+            \/\/ playlist.\n+            try {\n+                item.setPlaylistURI(locationToURI(item.getLocation()));\n+            } catch (URISyntaxException | MalformedURLException e) {\n+                throw new MediaException(\"Invalid HLS playlist\");\n+            }\n+            audioExtMedia.add(item);\n@@ -1083,2 +1074,0 @@\n-        audioExtMedia.add(item);\n-    }\n@@ -1086,3 +1075,3 @@\n-    List<AudioExtMedia> getAudioExtMedia() {\n-        return audioExtMedia;\n-    }\n+        List<AudioExtMedia> getAudioExtMedia() {\n+            return audioExtMedia;\n+        }\n@@ -1090,14 +1079,11 @@\n-    \/\/ Should be called after AudioExtMedia is fully loaded including playlist\n-    \/\/ itself.\n-    \/\/ It will do final validation and drop anything we do not want.\n-    void validateAudioExtMedia() {\n-        String extension = null; \/\/ Will be set to media file extension of first playlist\n-        Iterator<AudioExtMedia> it = audioExtMedia.iterator();\n-        while (it.hasNext()) {\n-            AudioExtMedia item = it.next();\n-            Playlist playlist = item.getPlaylist();\n-            if (playlist == null) {\n-                it.remove();\n-            } else {\n-                if (extension == null) {\n-                    extension = playlist.getMediaFileExtension();\n+        \/\/ Should be called after AudioExtMedia is fully loaded including playlist\n+        \/\/ itself.\n+        \/\/ It will do final validation and drop anything we do not want.\n+        void validateAudioExtMedia() {\n+            String extension = null; \/\/ Will be set to media file extension of first playlist\n+            Iterator<AudioExtMedia> it = audioExtMedia.iterator();\n+            while (it.hasNext()) {\n+                AudioExtMedia item = it.next();\n+                Playlist playlist = item.getPlaylist();\n+                if (playlist == null) {\n+                    it.remove();\n@@ -1105,2 +1091,6 @@\n-                    if (!extension.equals(playlist.getMediaFileExtension())) {\n-                        it.remove();\n+                    if (extension == null) {\n+                        extension = playlist.getMediaFileExtension();\n+                    } else {\n+                        if (!extension.equals(playlist.getMediaFileExtension())) {\n+                            it.remove();\n+                        }\n@@ -1111,1 +1101,0 @@\n-    }\n@@ -1113,5 +1102,6 @@\n-    Playlist getPlaylist(int index) {\n-        if (index < 0 || index >= extStreamInf.size()) {\n-            return null;\n-        } else {\n-            return extStreamInf.get(index).getPlaylist();\n+        Playlist getPlaylist(int index) {\n+            if (index < 0 || index >= extStreamInf.size()) {\n+                return null;\n+            } else {\n+                return extStreamInf.get(index).getPlaylist();\n+            }\n@@ -1119,1 +1109,0 @@\n-    }\n@@ -1121,4 +1110,4 @@\n-    Playlist getAudioExtPlaylist(String audioGroupID) {\n-        if (audioGroupID == null || audioExtMedia.isEmpty()) {\n-            return null;\n-        }\n+        Playlist getAudioExtPlaylist(String audioGroupID) {\n+            if (audioGroupID == null || audioExtMedia.isEmpty()) {\n+                return null;\n+            }\n@@ -1126,3 +1115,3 @@\n-        AudioExtMedia item = audioExtMedia.stream()\n-            .filter(ext -> ext.getGroupID().equals(audioGroupID))\n-            .findFirst().orElse(null);\n+            AudioExtMedia item = audioExtMedia.stream()\n+                    .filter(ext -> ext.getGroupID().equals(audioGroupID))\n+                    .findFirst().orElse(null);\n@@ -1130,2 +1119,2 @@\n-        return item == null ? null : item.getPlaylist();\n-    }\n+            return item == null ? null : item.getPlaylist();\n+        }\n@@ -1133,11 +1122,12 @@\n-    \/\/ Converts playlist location to URI. .m3u8 playlist can have absolute URI or\n-    \/\/ relatively to\n-    \/\/ variant playlist. This function takes string value from playlist and returns\n-    \/\/ resolved URI\n-    private URI locationToURI(String location) throws URISyntaxException, MalformedURLException {\n-        if (location.startsWith(\"http:\/\/\") || location.startsWith(\"https:\/\/\")) {\n-            return new URI(location);\n-        } else {\n-            return new URI(\n-                    playlistURI.toURL().toString().substring(0, playlistURI.toURL().toString().lastIndexOf(\"\/\") + 1)\n-                            + location);\n+        \/\/ Converts playlist location to URI. .m3u8 playlist can have absolute URI or\n+        \/\/ relatively to\n+        \/\/ variant playlist. This function takes string value from playlist and returns\n+        \/\/ resolved URI\n+        private URI locationToURI(String location) throws URISyntaxException, MalformedURLException {\n+            if (location.startsWith(\"http:\/\/\") || location.startsWith(\"https:\/\/\")) {\n+                return new URI(location);\n+            } else {\n+                return new URI(\n+                        playlistURI.toURL().toString().substring(0, playlistURI.toURL().toString().lastIndexOf(\"\/\") + 1)\n+                                + location);\n+            }\n@@ -1145,1 +1135,0 @@\n-    }\n@@ -1147,3 +1136,3 @@\n-    Playlist getPlaylistBasedOnBitrate(int bitrate) {\n-        int playlistIndex = -1;\n-        int playlistBitrate = 0;\n+        Playlist getPlaylistBasedOnBitrate(int bitrate) {\n+            int playlistIndex = -1;\n+            int playlistBitrate = 0;\n@@ -1151,7 +1140,10 @@\n-        \/\/ Get bitrate that less than requested bitrate, but most closed to it\n-        for (int i = 0; i < playlistBitrates.size(); i++) {\n-            int b = playlistBitrates.get(i);\n-            if (b < bitrate) {\n-                if (playlistIndex != -1) {\n-                    if (b > playlistBitrate) {\n-                        playlistBitrate = b;\n+            \/\/ Get bitrate that less than requested bitrate, but most closed to it\n+            for (int i = 0; i < playlistBitrates.size(); i++) {\n+                int b = playlistBitrates.get(i);\n+                if (b < bitrate) {\n+                    if (playlistIndex != -1) {\n+                        if (b > playlistBitrate) {\n+                            playlistBitrate = b;\n+                            playlistIndex = i;\n+                        }\n+                    } else {\n@@ -1160,2 +1152,0 @@\n-                } else {\n-                    playlistIndex = i;\n@@ -1164,1 +1154,0 @@\n-        }\n@@ -1166,7 +1155,8 @@\n-        \/\/ If we did not find one (stall), then get the lowest bitrate possible\n-        if (playlistIndex == -1) {\n-            for (int i = 0; i < playlistBitrates.size(); i++) {\n-                int b = playlistBitrates.get(i);\n-                if (b < playlistBitrate || playlistIndex == -1) {\n-                    playlistBitrate = b;\n-                    playlistIndex = i;\n+            \/\/ If we did not find one (stall), then get the lowest bitrate possible\n+            if (playlistIndex == -1) {\n+                for (int i = 0; i < playlistBitrates.size(); i++) {\n+                    int b = playlistBitrates.get(i);\n+                    if (b < playlistBitrate || playlistIndex == -1) {\n+                        playlistBitrate = b;\n+                        playlistIndex = i;\n+                    }\n@@ -1175,44 +1165,0 @@\n-        }\n-\n-        \/\/ Just in case\n-        return getPlaylist(playlistIndex);\n-    }\n-}\n-\n-class Playlist {\n-\n-    private boolean isLive = false;\n-    private volatile boolean isLiveWaiting = false;\n-    private volatile boolean isLiveStop = false;\n-    private long targetDuration = 0;\n-    private URI playlistURI = null;\n-    private final Object lock = new Object();\n-    private final List<String> mediaFiles = new ArrayList<>();\n-    final List<Double> mediaFilesStartTimes = new ArrayList<>();\n-    private final List<Boolean> mediaFilesDiscontinuities = new ArrayList<>();\n-    private boolean needBaseURI = true;\n-    private String baseURI = null;\n-    private double startTime = 0.0;\n-    private double duration = 0.0;\n-    private int sequenceNumber = -1;\n-    private int sequenceNumberStart = -1;\n-    private boolean sequenceNumberUpdated = false;\n-    private boolean forceDiscontinuity = false;\n-    private int mimeType = HLS_VALUE_MIMETYPE_UNKNOWN;\n-    private int mediaFileIndex = -1;\n-    private final Semaphore liveSemaphore = new Semaphore(0);\n-    private boolean isPlaylistClosed = false;\n-    \/\/ Valid only if this playlist represent audio extension\n-    private boolean isVideoStreamFragmentedMP4 = false;\n-    \/\/ Target duration of video stream. For fMP4 streams PTS\n-    \/\/ starts with target duration, but for raw audio it will\n-    \/\/ start with 0, so if we have video stream in fMP4, but\n-    \/\/ audio extension as raw audio we will need to adjust\n-    \/\/ start time by video stream target duration, so PTS\n-    \/\/ will align properly.\n-    private long videoStreamTargetDuration = 0;\n-    private String audioGroupID = null;\n-\n-    Playlist(URI uri) {\n-        playlistURI = uri;\n-    }\n@@ -1220,4 +1166,47 @@\n-    void update(String nextMediaFile) {\n-        PlaylistParser parser = new PlaylistParser();\n-        parser.setPlaylist(this);\n-        parser.load(playlistURI);\n+            \/\/ Just in case\n+            return getPlaylist(playlistIndex);\n+        }\n+    }\n+\n+    private static class Playlist {\n+\n+        private boolean isLive = false;\n+        private volatile boolean isLiveWaiting = false;\n+        private volatile boolean isLiveStop = false;\n+        private long targetDuration = 0;\n+        private URI playlistURI = null;\n+        private final Object lock = new Object();\n+        private final List<String> mediaFiles = new ArrayList<>();\n+        final List<Double> mediaFilesStartTimes = new ArrayList<>();\n+        private final List<Boolean> mediaFilesDiscontinuities = new ArrayList<>();\n+        private boolean needBaseURI = true;\n+        private String baseURI = null;\n+        private double startTime = 0.0;\n+        private double duration = 0.0;\n+        private int sequenceNumber = -1;\n+        private int sequenceNumberStart = -1;\n+        private boolean sequenceNumberUpdated = false;\n+        private boolean forceDiscontinuity = false;\n+        private int mimeType = HLS_VALUE_MIMETYPE_UNKNOWN;\n+        private int mediaFileIndex = -1;\n+        private final Semaphore liveSemaphore = new Semaphore(0);\n+        private boolean isPlaylistClosed = false;\n+        \/\/ Valid only if this playlist represent audio extension\n+        private boolean isVideoStreamFragmentedMP4 = false;\n+        \/\/ Target duration of video stream. For fMP4 streams PTS\n+        \/\/ starts with target duration, but for raw audio it will\n+        \/\/ start with 0, so if we have video stream in fMP4, but\n+        \/\/ audio extension as raw audio we will need to adjust\n+        \/\/ start time by video stream target duration, so PTS\n+        \/\/ will align properly.\n+        private long videoStreamTargetDuration = 0;\n+        private String audioGroupID = null;\n+\n+        Playlist(URI uri) {\n+            playlistURI = uri;\n+        }\n+\n+        void update(String nextMediaFile) {\n+            PlaylistParser parser = new PlaylistParser();\n+            parser.setPlaylist(this);\n+            parser.load(playlistURI);\n@@ -1225,4 +1214,4 @@\n-        isLive = parser.isLivePlaylist();\n-        if (isLive) {\n-            duration = -1.0;\n-        }\n+            isLive = parser.isLivePlaylist();\n+            if (isLive) {\n+                duration = -1.0;\n+            }\n@@ -1230,7 +1219,8 @@\n-        if (nextMediaFile != null) {\n-            synchronized (lock) {\n-                for (int i = 0; i < mediaFiles.size(); i++) {\n-                    String mediaFile = mediaFiles.get(i);\n-                    if (nextMediaFile.endsWith(mediaFile)) {\n-                        mediaFileIndex = i - 1;\n-                        break;\n+            if (nextMediaFile != null) {\n+                synchronized (lock) {\n+                    for (int i = 0; i < mediaFiles.size(); i++) {\n+                        String mediaFile = mediaFiles.get(i);\n+                        if (nextMediaFile.endsWith(mediaFile)) {\n+                            mediaFileIndex = i - 1;\n+                            break;\n+                        }\n@@ -1241,1 +1231,0 @@\n-    }\n@@ -1243,3 +1232,3 @@\n-    void setMediaFileIndex(int value) {\n-        mediaFileIndex = value;\n-    }\n+        void setMediaFileIndex(int value) {\n+            mediaFileIndex = value;\n+        }\n@@ -1247,3 +1236,3 @@\n-    int getMediaFileIndex() {\n-        return mediaFileIndex;\n-    }\n+        int getMediaFileIndex() {\n+            return mediaFileIndex;\n+        }\n@@ -1251,3 +1240,3 @@\n-    boolean isLive() {\n-        return isLive;\n-    }\n+        boolean isLive() {\n+            return isLive;\n+        }\n@@ -1255,3 +1244,3 @@\n-    boolean isFragmentedMP4() {\n-        return (getMimeType() == HLS_VALUE_MIMETYPE_FMP4);\n-    }\n+        boolean isFragmentedMP4() {\n+            return (getMimeType() == HLS_VALUE_MIMETYPE_FMP4);\n+        }\n@@ -1259,3 +1248,3 @@\n-    void setTargetDuration(long value) {\n-        targetDuration = value;\n-    }\n+        void setTargetDuration(long value) {\n+            targetDuration = value;\n+        }\n@@ -1263,3 +1252,3 @@\n-    long getTargetDuration() {\n-        return targetDuration;\n-    }\n+        long getTargetDuration() {\n+            return targetDuration;\n+        }\n@@ -1267,3 +1256,3 @@\n-    void setVideoStreamTargetDuration(long value) {\n-        videoStreamTargetDuration = value;\n-    }\n+        void setVideoStreamTargetDuration(long value) {\n+            videoStreamTargetDuration = value;\n+        }\n@@ -1271,3 +1260,3 @@\n-    void setIsVideoStreamFragmentedMP4(boolean value) {\n-        isVideoStreamFragmentedMP4 = value;\n-    }\n+        void setIsVideoStreamFragmentedMP4(boolean value) {\n+            isVideoStreamFragmentedMP4 = value;\n+        }\n@@ -1275,2 +1264,2 @@\n-    void addMediaFile(String URI, double duration, boolean isDiscontinuity) {\n-        synchronized (lock) {\n+        void addMediaFile(String URI, double duration, boolean isDiscontinuity) {\n+            synchronized (lock) {\n@@ -1278,3 +1267,3 @@\n-            if (needBaseURI) {\n-                setBaseURI(playlistURI.toString(), URI);\n-            }\n+                if (needBaseURI) {\n+                    setBaseURI(playlistURI.toString(), URI);\n+                }\n@@ -1282,12 +1271,13 @@\n-            if (isLive) {\n-                if (sequenceNumberUpdated) {\n-                    int index = mediaFiles.indexOf(URI);\n-                    if (index != -1) {\n-                        for (int i = 0; i < index; i++) {\n-                            mediaFiles.remove(0);\n-                            mediaFilesDiscontinuities.remove(0);\n-                            if (mediaFileIndex == -1) {\n-                                forceDiscontinuity = true;\n-                            }\n-                            if (mediaFileIndex >= 0) {\n-                                mediaFileIndex--;\n+                if (isLive) {\n+                    if (sequenceNumberUpdated) {\n+                        int index = mediaFiles.indexOf(URI);\n+                        if (index != -1) {\n+                            for (int i = 0; i < index; i++) {\n+                                mediaFiles.remove(0);\n+                                mediaFilesDiscontinuities.remove(0);\n+                                if (mediaFileIndex == -1) {\n+                                    forceDiscontinuity = true;\n+                                }\n+                                if (mediaFileIndex >= 0) {\n+                                    mediaFileIndex--;\n+                                }\n@@ -1296,0 +1286,1 @@\n+                        sequenceNumberUpdated = false;\n@@ -1297,2 +1288,0 @@\n-                    sequenceNumberUpdated = false;\n-                }\n@@ -1300,2 +1289,3 @@\n-                if (mediaFiles.contains(URI)) {\n-                    return; \/\/ Nothing to add\n+                    if (mediaFiles.contains(URI)) {\n+                        return; \/\/ Nothing to add\n+                    }\n@@ -1303,1 +1293,0 @@\n-            }\n@@ -1305,2 +1294,2 @@\n-            mediaFiles.add(URI);\n-            mediaFilesDiscontinuities.add(isDiscontinuity);\n+                mediaFiles.add(URI);\n+                mediaFilesDiscontinuities.add(isDiscontinuity);\n@@ -1308,13 +1297,3 @@\n-            if (isLive) {\n-                if (isLiveWaiting) {\n-                    liveSemaphore.release();\n-                }\n-            } else {\n-                mediaFilesStartTimes.add(this.startTime);\n-                this.startTime += duration;\n-\n-                \/\/ For fragmented MP4 we should not add duration of first\n-                \/\/ segment, since it is header without actually data.\n-                if (mediaFiles.size() == 1) {\n-                    if (!isFragmentedMP4()) {\n-                        this.duration += duration;\n+                if (isLive) {\n+                    if (isLiveWaiting) {\n+                        liveSemaphore.release();\n@@ -1323,1 +1302,12 @@\n-                    this.duration += duration;\n+                    mediaFilesStartTimes.add(this.startTime);\n+                    this.startTime += duration;\n+\n+                    \/\/ For fragmented MP4 we should not add duration of first\n+                    \/\/ segment, since it is header without actually data.\n+                    if (mediaFiles.size() == 1) {\n+                        if (!isFragmentedMP4()) {\n+                            this.duration += duration;\n+                        }\n+                    } else {\n+                        this.duration += duration;\n+                    }\n@@ -1327,1 +1317,0 @@\n-    }\n@@ -1329,11 +1318,15 @@\n-    String getNextMediaFile() {\n-        if (isLive) {\n-            synchronized (lock) {\n-                isLiveWaiting = ((mediaFileIndex + 1) >= mediaFiles.size());\n-            }\n-            if (isLiveWaiting) {\n-                try {\n-                    liveSemaphore.acquire();\n-                    isLiveWaiting = false;\n-                    if (isLiveStop) {\n-                        isLiveStop = false;\n+        String getNextMediaFile() {\n+            if (isLive) {\n+                synchronized (lock) {\n+                    isLiveWaiting = ((mediaFileIndex + 1) >= mediaFiles.size());\n+                }\n+                if (isLiveWaiting) {\n+                    try {\n+                        liveSemaphore.acquire();\n+                        isLiveWaiting = false;\n+                        if (isLiveStop) {\n+                            isLiveStop = false;\n+                            return null;\n+                        }\n+                    } catch (InterruptedException e) {\n+                        isLiveWaiting = false;\n@@ -1342,2 +1335,2 @@\n-                } catch (InterruptedException e) {\n-                    isLiveWaiting = false;\n+                }\n+                if (isPlaylistClosed) {\n@@ -1347,4 +1340,0 @@\n-            if (isPlaylistClosed) {\n-                return null;\n-            }\n-        }\n@@ -1352,5 +1341,8 @@\n-        synchronized (lock) {\n-            mediaFileIndex++;\n-            if (mediaFileIndex < mediaFiles.size()) {\n-                if (baseURI != null) {\n-                    return baseURI + mediaFiles.get(mediaFileIndex);\n+            synchronized (lock) {\n+                mediaFileIndex++;\n+                if (mediaFileIndex < mediaFiles.size()) {\n+                    if (baseURI != null) {\n+                        return baseURI + mediaFiles.get(mediaFileIndex);\n+                    } else {\n+                        return mediaFiles.get(mediaFileIndex);\n+                    }\n@@ -1358,1 +1350,1 @@\n-                    return mediaFiles.get(mediaFileIndex);\n+                    return null;\n@@ -1360,2 +1352,0 @@\n-            } else {\n-                return null;\n@@ -1364,1 +1354,0 @@\n-    }\n@@ -1366,5 +1355,8 @@\n-    String getHeaderFile() {\n-        synchronized (lock) {\n-            if (mediaFiles.size() > 0) {\n-                if (baseURI != null) {\n-                    return baseURI + mediaFiles.get(0);\n+        String getHeaderFile() {\n+            synchronized (lock) {\n+                if (mediaFiles.size() > 0) {\n+                    if (baseURI != null) {\n+                        return baseURI + mediaFiles.get(0);\n+                    } else {\n+                        return mediaFiles.get(0);\n+                    }\n@@ -1372,1 +1364,1 @@\n-                    return mediaFiles.get(0);\n+                    return null;\n@@ -1374,2 +1366,0 @@\n-            } else {\n-                return null;\n@@ -1378,5 +1368,0 @@\n-    }\n-\n-    double getMediaFileStartTime() {\n-        return getMediaFileStartTime(mediaFileIndex);\n-    }\n@@ -1384,8 +1369,2 @@\n-    double getMediaFileStartTime(int index) {\n-        if (index >= 0 && index < mediaFilesStartTimes.size()) {\n-            \/\/ Special case if video is fMP4 and audio ext is not\n-            if (isVideoStreamFragmentedMP4 && !isFragmentedMP4() && index != 0) {\n-                return (mediaFilesStartTimes.get(index) + (double)videoStreamTargetDuration);\n-            } else {\n-                return mediaFilesStartTimes.get(index);\n-            }\n+        double getMediaFileStartTime() {\n+            return getMediaFileStartTime(mediaFileIndex);\n@@ -1394,2 +1373,9 @@\n-        return -1.0;\n-    }\n+        double getMediaFileStartTime(int index) {\n+            if (index >= 0 && index < mediaFilesStartTimes.size()) {\n+                \/\/ Special case if video is fMP4 and audio ext is not\n+                if (isVideoStreamFragmentedMP4 && !isFragmentedMP4() && index != 0) {\n+                    return (mediaFilesStartTimes.get(index) + (double) videoStreamTargetDuration);\n+                } else {\n+                    return mediaFilesStartTimes.get(index);\n+                }\n+            }\n@@ -1397,3 +1383,2 @@\n-    double getDuration() {\n-        return duration;\n-    }\n+            return -1.0;\n+        }\n@@ -1401,3 +1386,3 @@\n-    void setForceDiscontinuity(boolean value) {\n-        forceDiscontinuity = value;\n-    }\n+        double getDuration() {\n+            return duration;\n+        }\n@@ -1405,6 +1390,2 @@\n-    boolean isCurrentMediaFileDiscontinuity() {\n-        if (forceDiscontinuity) {\n-            forceDiscontinuity = false;\n-            return true;\n-        } else {\n-            return mediaFilesDiscontinuities.get(mediaFileIndex);\n+        void setForceDiscontinuity(boolean value) {\n+            forceDiscontinuity = value;\n@@ -1412,1 +1393,0 @@\n-    }\n@@ -1414,7 +1394,4 @@\n-    double seekGetStartTime(long time) {\n-        synchronized (lock) {\n-            int newIndex = 0;\n-            if (isLive) {\n-                if (time == 0) {\n-                    return 0.0;\n-                }\n+        boolean isCurrentMediaFileDiscontinuity() {\n+            if (forceDiscontinuity) {\n+                forceDiscontinuity = false;\n+                return true;\n@@ -1422,23 +1399,37 @@\n-                time += targetDuration \/ 2000;\n-\n-                int mediaFileStartTimeSize = mediaFilesStartTimes.size();\n-\n-                for (int index = 0; index < mediaFileStartTimeSize; index++) {\n-                    if (time >= mediaFilesStartTimes.get(index)) {\n-                        if (index + 1 < mediaFileStartTimeSize) {\n-                            if (time < mediaFilesStartTimes.get(index + 1)) {\n-                                if (isFragmentedMP4()) {\n-                                    newIndex = index; \/\/ We need to skip header\n-                                } else {\n-                                    newIndex = index - 1; \/\/ Load segment will increment mediaFileIndex\n-                                }\n-                                \/\/ Special case for seek to 0 and fragmented MP4.\n-                                \/\/ We should return 0, instead of first segment, since\n-                                \/\/ first segment starts with target duration, but\n-                                \/\/ GStreamer expects 0 as start of stream time.\n-                                \/\/ Start of segment will be set to target duration\n-                                \/\/ when reported from HLS_PROP_SEGMENT_START_TIME.\n-                                \/\/ Same should be for video fMP4 and raw audio.\n-                                \/\/if (time == 0 && (isFragmentedMP4() || (isVideoStreamFragmentedMP4 && !isFragmentedMP4()))) {\n-                                if (time == 0 && isFragmentedMP4()) {\n-                                    return 0.0;\n+                return mediaFilesDiscontinuities.get(mediaFileIndex);\n+            }\n+        }\n+\n+        double seekGetStartTime(long time) {\n+            synchronized (lock) {\n+                int newIndex = 0;\n+                if (isLive) {\n+                    if (time == 0) {\n+                        return 0.0;\n+                    }\n+                } else {\n+                    time += targetDuration \/ 2000;\n+\n+                    int mediaFileStartTimeSize = mediaFilesStartTimes.size();\n+\n+                    for (int index = 0; index < mediaFileStartTimeSize; index++) {\n+                        if (time >= mediaFilesStartTimes.get(index)) {\n+                            if (index + 1 < mediaFileStartTimeSize) {\n+                                if (time < mediaFilesStartTimes.get(index + 1)) {\n+                                    if (isFragmentedMP4()) {\n+                                        newIndex = index; \/\/ We need to skip header\n+                                    } else {\n+                                        newIndex = index - 1; \/\/ Load segment will increment mediaFileIndex\n+                                    }\n+                                    \/\/ Special case for seek to 0 and fragmented MP4.\n+                                    \/\/ We should return 0, instead of first segment, since\n+                                    \/\/ first segment starts with target duration, but\n+                                    \/\/ GStreamer expects 0 as start of stream time.\n+                                    \/\/ Start of segment will be set to target duration\n+                                    \/\/ when reported from HLS_PROP_SEGMENT_START_TIME.\n+                                    \/\/ Same should be for video fMP4 and raw audio.\n+                                    if (time == 0 && isFragmentedMP4()) {\n+                                        return 0.0;\n+                                    }\n+                                    \/\/ Return start time of segment we will load (mediaFileIndex + 1)\n+                                    return getMediaFileStartTime(newIndex + 1);\n@@ -1446,9 +1437,11 @@\n-                                \/\/ Return start time of segment we will load (mediaFileIndex + 1)\n-                                return getMediaFileStartTime(newIndex + 1);\n-                            }\n-                        } else {\n-                            if ((time - targetDuration \/ 2000) < duration) {\n-                                if (isFragmentedMP4()) {\n-                                    newIndex = index; \/\/ We need to skip header\n-                                } else {\n-                                    newIndex = index - 1; \/\/ Load segment will increment mediaFileIndex\n+                            } else {\n+                                if ((time - targetDuration \/ 2000) < duration) {\n+                                    if (isFragmentedMP4()) {\n+                                        newIndex = index; \/\/ We need to skip header\n+                                    } else {\n+                                        newIndex = index - 1; \/\/ Load segment will increment mediaFileIndex\n+                                    }\n+                                    \/\/ Return start time of segment we will load (mediaFileIndex + 1)\n+                                    return getMediaFileStartTime(newIndex + 1);\n+                                } else if (Double.compare(time - targetDuration \/ 2000, duration) == 0) {\n+                                    return duration;\n@@ -1456,4 +1449,0 @@\n-                                \/\/ Return start time of segment we will load (mediaFileIndex + 1)\n-                                return getMediaFileStartTime(newIndex + 1);\n-                            } else if (Double.compare(time - targetDuration \/ 2000, duration) == 0) {\n-                                return duration;\n@@ -1465,1 +1454,0 @@\n-        }\n@@ -1467,2 +1455,2 @@\n-        return -1.0;\n-    }\n+            return -1.0;\n+        }\n@@ -1470,13 +1458,15 @@\n-    double seek(long time) {\n-        synchronized (lock) {\n-            if (isLive) {\n-                if (time == 0) {\n-                    if (isFragmentedMP4()) {\n-                        mediaFileIndex = 0; \/\/ Skip header at 0 index\n-                        \/\/ we will send it with first segment if needed.\n-                    } else {\n-                        mediaFileIndex = -1;\n-                    }\n-                    if (isLiveWaiting) {\n-                        isLiveStop = true;\n-                        liveSemaphore.release();\n+        double seek(long time) {\n+            synchronized (lock) {\n+                if (isLive) {\n+                    if (time == 0) {\n+                        if (isFragmentedMP4()) {\n+                            mediaFileIndex = 0; \/\/ Skip header at 0 index\n+                            \/\/ we will send it with first segment if needed.\n+                        } else {\n+                            mediaFileIndex = -1;\n+                        }\n+                        if (isLiveWaiting) {\n+                            isLiveStop = true;\n+                            liveSemaphore.release();\n+                        }\n+                        return 0;\n@@ -1484,26 +1474,26 @@\n-                    return 0;\n-                }\n-            } else {\n-                time += targetDuration \/ 2000;\n-\n-                int mediaFileStartTimeSize = mediaFilesStartTimes.size();\n-\n-                for (int index = 0; index < mediaFileStartTimeSize; index++) {\n-                    if (time >= mediaFilesStartTimes.get(index)) {\n-                        if (index + 1 < mediaFileStartTimeSize) {\n-                            if (time < mediaFilesStartTimes.get(index + 1)) {\n-                                if (isFragmentedMP4()) {\n-                                    mediaFileIndex = index; \/\/ We need to skip header\n-                                } else {\n-                                    mediaFileIndex = index - 1; \/\/ Load segment will increment mediaFileIndex\n-                                }\n-                                \/\/ Special case for seek to 0 and fragmented MP4.\n-                                \/\/ We should return 0, instead of first segment, since\n-                                \/\/ first segment starts with target duration, but\n-                                \/\/ GStreamer expects 0 as start of stream time.\n-                                \/\/ Start of segment will be set to target duration\n-                                \/\/ when reported from HLS_PROP_SEGMENT_START_TIME.\n-                                \/\/ Same should be for video fMP4 and raw audio.\n-                                \/\/if (time == 0 && (isFragmentedMP4() || (isVideoStreamFragmentedMP4 && !isFragmentedMP4()))) {\n-                                if (time == 0 && isFragmentedMP4()) {\n-                                    return 0.0;\n+                } else {\n+                    time += targetDuration \/ 2000;\n+\n+                    int mediaFileStartTimeSize = mediaFilesStartTimes.size();\n+\n+                    for (int index = 0; index < mediaFileStartTimeSize; index++) {\n+                        if (time >= mediaFilesStartTimes.get(index)) {\n+                            if (index + 1 < mediaFileStartTimeSize) {\n+                                if (time < mediaFilesStartTimes.get(index + 1)) {\n+                                    if (isFragmentedMP4()) {\n+                                        mediaFileIndex = index; \/\/ We need to skip header\n+                                    } else {\n+                                        mediaFileIndex = index - 1; \/\/ Load segment will increment mediaFileIndex\n+                                    }\n+                                    \/\/ Special case for seek to 0 and fragmented MP4.\n+                                    \/\/ We should return 0, instead of first segment, since\n+                                    \/\/ first segment starts with target duration, but\n+                                    \/\/ GStreamer expects 0 as start of stream time.\n+                                    \/\/ Start of segment will be set to target duration\n+                                    \/\/ when reported from HLS_PROP_SEGMENT_START_TIME.\n+                                    \/\/ Same should be for video fMP4 and raw audio.\n+                                    if (time == 0 && isFragmentedMP4()) {\n+                                        return 0.0;\n+                                    }\n+                                    \/\/ Return start time of segment we will load (mediaFileIndex + 1)\n+                                    return getMediaFileStartTime(mediaFileIndex + 1);\n@@ -1511,9 +1501,11 @@\n-                                \/\/ Return start time of segment we will load (mediaFileIndex + 1)\n-                                return getMediaFileStartTime(mediaFileIndex + 1);\n-                            }\n-                        } else {\n-                            if ((time - targetDuration \/ 2000) < duration) {\n-                                if (isFragmentedMP4()) {\n-                                    mediaFileIndex = index; \/\/ We need to skip header\n-                                } else {\n-                                    mediaFileIndex = index - 1; \/\/ Load segment will increment mediaFileIndex\n+                            } else {\n+                                if ((time - targetDuration \/ 2000) < duration) {\n+                                    if (isFragmentedMP4()) {\n+                                        mediaFileIndex = index; \/\/ We need to skip header\n+                                    } else {\n+                                        mediaFileIndex = index - 1; \/\/ Load segment will increment mediaFileIndex\n+                                    }\n+                                    \/\/ Return start time of segment we will load (mediaFileIndex + 1)\n+                                    return getMediaFileStartTime(mediaFileIndex + 1);\n+                                } else if (Double.compare(time - targetDuration \/ 2000, duration) == 0) {\n+                                    return duration;\n@@ -1521,4 +1513,0 @@\n-                                \/\/ Return start time of segment we will load (mediaFileIndex + 1)\n-                                return getMediaFileStartTime(mediaFileIndex + 1);\n-                            } else if (Double.compare(time - targetDuration \/ 2000, duration) == 0) {\n-                                return duration;\n@@ -1530,1 +1518,0 @@\n-        }\n@@ -1532,2 +1519,2 @@\n-        return -1;\n-    }\n+            return -1;\n+        }\n@@ -1535,13 +1522,14 @@\n-    int getMimeType() {\n-        synchronized (lock) {\n-            if (mimeType == HLS_VALUE_MIMETYPE_UNKNOWN) {\n-                if (mediaFiles.size() > 0) {\n-                    if (stripParameters(mediaFiles.get(0)).endsWith(\".ts\")) {\n-                        mimeType = HLS_VALUE_MIMETYPE_MP2T;\n-                    } else if (stripParameters(mediaFiles.get(0)).endsWith(\".mp3\")) {\n-                        mimeType = HLS_VALUE_MIMETYPE_MP3;\n-                    } else if (stripParameters(mediaFiles.get(0)).endsWith(\".mp4\")\n-                            || stripParameters(mediaFiles.get(0)).endsWith(\".m4s\")) {\n-                        mimeType = HLS_VALUE_MIMETYPE_FMP4;\n-                    } else if (stripParameters(mediaFiles.get(0)).endsWith(\".aac\")) {\n-                        mimeType = HLS_VALUE_MIMETYPE_AAC;\n+        int getMimeType() {\n+            synchronized (lock) {\n+                if (mimeType == HLS_VALUE_MIMETYPE_UNKNOWN) {\n+                    if (mediaFiles.size() > 0) {\n+                        if (stripParameters(mediaFiles.get(0)).endsWith(\".ts\")) {\n+                            mimeType = HLS_VALUE_MIMETYPE_MP2T;\n+                        } else if (stripParameters(mediaFiles.get(0)).endsWith(\".mp3\")) {\n+                            mimeType = HLS_VALUE_MIMETYPE_MP3;\n+                        } else if (stripParameters(mediaFiles.get(0)).endsWith(\".mp4\")\n+                                || stripParameters(mediaFiles.get(0)).endsWith(\".m4s\")) {\n+                            mimeType = HLS_VALUE_MIMETYPE_FMP4;\n+                        } else if (stripParameters(mediaFiles.get(0)).endsWith(\".aac\")) {\n+                            mimeType = HLS_VALUE_MIMETYPE_AAC;\n+                        }\n@@ -1551,1 +1539,0 @@\n-        }\n@@ -1553,2 +1540,2 @@\n-        return mimeType;\n-    }\n+            return mimeType;\n+        }\n@@ -1556,7 +1543,8 @@\n-    String getMediaFileExtension() {\n-        synchronized (lock) {\n-            if (mediaFiles.size() > 0) {\n-                String mediaFile = stripParameters(mediaFiles.get(0));\n-                int index = mediaFile.lastIndexOf(\".\");\n-                if (index != -1) {\n-                    return mediaFile.substring(index);\n+        String getMediaFileExtension() {\n+            synchronized (lock) {\n+                if (mediaFiles.size() > 0) {\n+                    String mediaFile = stripParameters(mediaFiles.get(0));\n+                    int index = mediaFile.lastIndexOf(\".\");\n+                    if (index != -1) {\n+                        return mediaFile.substring(index);\n+                    }\n@@ -1565,0 +1553,2 @@\n+\n+            return null;\n@@ -1567,2 +1557,9 @@\n-        return null;\n-    }\n+        boolean setSequenceNumber(int value) {\n+            if (sequenceNumberStart == -1) {\n+                sequenceNumberStart = value;\n+            } else if (sequenceNumber != value) {\n+                sequenceNumberUpdated = true;\n+                sequenceNumber = value;\n+            } else {\n+                return false;\n+            }\n@@ -1570,8 +1567,1 @@\n-    boolean setSequenceNumber(int value) {\n-        if (sequenceNumberStart == -1) {\n-            sequenceNumberStart = value;\n-        } else if (sequenceNumber != value) {\n-            sequenceNumberUpdated = true;\n-            sequenceNumber = value;\n-        } else {\n-            return false;\n+            return true;\n@@ -1580,7 +1570,5 @@\n-        return true;\n-    }\n-\n-    void close() {\n-        if (isLive) {\n-            isPlaylistClosed = true;\n-            liveSemaphore.release();\n+        void close() {\n+            if (isLive) {\n+                isPlaylistClosed = true;\n+                liveSemaphore.release();\n+            }\n@@ -1588,1 +1576,0 @@\n-    }\n@@ -1590,3 +1577,5 @@\n-    private void setBaseURI(String playlistURI, String URI) {\n-        if (!URI.startsWith(\"http:\/\/\") && !URI.startsWith(\"https:\/\/\")) {\n-            baseURI = playlistURI.substring(0, playlistURI.lastIndexOf(\"\/\") + 1);\n+        private void setBaseURI(String playlistURI, String URI) {\n+            if (!URI.startsWith(\"http:\/\/\") && !URI.startsWith(\"https:\/\/\")) {\n+                baseURI = playlistURI.substring(0, playlistURI.lastIndexOf(\"\/\") + 1);\n+            }\n+            needBaseURI = false;\n@@ -1594,2 +1583,0 @@\n-        needBaseURI = false;\n-    }\n@@ -1597,3 +1584,3 @@\n-    void setAudioGroupID(String value) {\n-        audioGroupID = value;\n-    }\n+        void setAudioGroupID(String value) {\n+            audioGroupID = value;\n+        }\n@@ -1601,2 +1588,3 @@\n-    String getAudioGroupID() {\n-        return audioGroupID;\n+        String getAudioGroupID() {\n+            return audioGroupID;\n+        }\n","filename":"modules\/javafx.media\/src\/main\/java\/com\/sun\/media\/jfxmedia\/locator\/HLSConnectionHolder.java","additions":901,"deletions":913,"binary":false,"changes":1814,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-        if (javaEnv.reportException() || (GetAudioStreamConnectionHolder == NULL))\n+        if (javaEnv.reportException() || (mid_GetAudioStreamConnectionHolder == NULL))\n","filename":"modules\/javafx.media\/src\/main\/native\/jfxmedia\/Locator\/Locator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}