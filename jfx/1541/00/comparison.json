{"files":[{"patch":"@@ -264,1 +264,1 @@\n-        insn(encodeGroup4(Group4Op::BLRAAZ, dest));\n+        insn(encodeGroup4(Group4Op::BRAAZ, dest));\n@@ -269,1 +269,1 @@\n-        insn(encodeGroup4(Group4Op::BLRABZ, dest));\n+        insn(encodeGroup4(Group4Op::BRABZ, dest));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/assembler\/ARM64EAssembler.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-async function defaultAsyncFromAsyncIterator(result, iterator, mapFn, thisArg)\n+async function defaultAsyncFromAsyncIterator(iterator, mapFn, thisArg)\n@@ -127,0 +127,2 @@\n+    var result = this !== @Array && @isConstructor(this) ? new this() : [];\n+\n@@ -205,2 +207,0 @@\n-        var result = this !== @Array && @isConstructor(this) ? new this() : [];\n-\n@@ -208,1 +208,1 @@\n-            return @defaultAsyncFromAsyncIterator(result, usingAsyncIterator.@call(asyncItems), mapFn, thisArg);\n+            return @defaultAsyncFromAsyncIterator.@call(this, usingAsyncIterator.@call(asyncItems), mapFn, thisArg);\n@@ -212,1 +212,1 @@\n-            return @defaultAsyncFromAsyncIterator(result, @createAsyncFromSyncIterator(iterator, iterator.next), mapFn, thisArg);\n+            return @defaultAsyncFromAsyncIterator.@call(this, @createAsyncFromSyncIterator(iterator, iterator.next), mapFn, thisArg);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/builtins\/ArrayConstructor.js","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -605,0 +605,1 @@\n+IGNORE_GCC_WARNINGS_BEGIN(\"dangling-reference\")\n@@ -607,0 +608,1 @@\n+IGNORE_GCC_WARNINGS_END\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/bytecompiler\/BytecodeGenerator.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5022,2 +5022,1 @@\n-    if (set.isEmpty())\n-        return ObjectPropertyCondition();\n+    Structure* structure = knownBase->structure();\n@@ -5025,2 +5024,2 @@\n-    PropertyOffset firstOffset = set[0]->getConcurrently(uid, attributes);\n-    if (firstOffset != offset)\n+    PropertyOffset baseOffset = structure->getConcurrently(uid, attributes);\n+    if (offset != baseOffset)\n@@ -5028,6 +5027,7 @@\n-    for (unsigned i = 1; i < set.size(); ++i) {\n-        unsigned otherAttributes;\n-        PropertyOffset otherOffset = set[i]->getConcurrently(uid, otherAttributes);\n-        if (otherOffset != offset || otherAttributes != attributes)\n-            return ObjectPropertyCondition();\n-    }\n+\n+    \/\/ We need to check set contains knownBase's structure because knownBase's GetOwnPropertySlot could normally prevent access\n+    \/\/ to this property, for example via a cross-origin restriction check. So unless we've executed this access before we can't assume\n+    \/\/ just because knownBase has a property uid at offset we're allowed to access.\n+    if (!set.contains(structure))\n+        return ObjectPropertyCondition();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/dfg\/DFGByteCodeParser.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -976,1 +976,2 @@\n-    ASSERT(m_objectSpace.capacity() >= m_objectSpace.size());\n+    \/\/ It would be nice to have `ASSERT(m_objectSpace.capacity() >= m_objectSpace.size());` here but `m_objectSpace.size()`\n+    \/\/ requires having heap access which thread might not. Specifically, we might be called from the resource usage thread.\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/heap\/Heap.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-#if USE(JSVALUE64)\n+#if CPU(ADDRESS64)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/jit\/JITCode.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -149,0 +149,1 @@\n+\n@@ -288,0 +289,1 @@\n+\n@@ -419,0 +421,1 @@\n+\n@@ -566,0 +569,1 @@\n+\n@@ -580,0 +584,1 @@\n+\n@@ -582,0 +587,1 @@\n+\n@@ -586,0 +592,1 @@\n+\n@@ -589,0 +596,1 @@\n+\n@@ -592,0 +600,1 @@\n+\n@@ -595,0 +604,1 @@\n+\n@@ -598,0 +608,1 @@\n+\n@@ -601,0 +612,1 @@\n+\n@@ -604,0 +616,1 @@\n+\n@@ -779,0 +792,1 @@\n+\n@@ -783,0 +797,1 @@\n+\n@@ -795,0 +810,1 @@\n+\n@@ -1196,0 +1212,1 @@\n+\n@@ -1342,1 +1359,0 @@\n-\n@@ -3235,0 +3251,1 @@\n+\n@@ -3236,0 +3253,7 @@\n+\n+\/\/ We have to assume that the fuzzer will be able to call this function e.g. by\n+\/\/ enumerating the properties of the global object and eval'ing them. As such\n+\/\/ this function is implemented in a way that requires passing some magic value\n+\/\/ as first argument (with the idea being that the fuzzer won't be able to\n+\/\/ generate this value) which then also acts as a selector for the operation\n+\/\/ to perform.\n@@ -3241,0 +3265,1 @@\n+        \/\/ We directly require a string as argument for simplicity.\n@@ -3245,0 +3270,1 @@\n+\n@@ -3248,0 +3274,1 @@\n+\n@@ -3259,0 +3286,1 @@\n+\n@@ -3262,0 +3290,1 @@\n+\n@@ -3265,0 +3294,1 @@\n+\n@@ -3267,0 +3297,1 @@\n+\n@@ -3641,0 +3672,1 @@\n+\n@@ -4050,0 +4082,1 @@\n+\n@@ -4099,0 +4132,1 @@\n+\n@@ -4100,0 +4134,1 @@\n+    \/\/ Let parent know we are ready.\n@@ -4104,0 +4139,1 @@\n+\n@@ -4109,0 +4145,1 @@\n+\n@@ -4123,0 +4160,1 @@\n+\n@@ -4155,1 +4193,0 @@\n-\n@@ -4199,0 +4236,1 @@\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/jsc.cpp","additions":40,"deletions":2,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    if (startIndex <= 0 || startIndex >= m_argCount) {\n+    if (startIndex <= 0 || static_cast<unsigned>(startIndex) >= m_argCount) {\n@@ -63,1 +63,1 @@\n-        for (int i = 0; i < list->m_size; ++i)\n+        for (unsigned i = 0; i < list->m_size; ++i)\n@@ -89,1 +89,1 @@\n-auto MarkedVectorBase::expandCapacity(int newCapacity) -> Status\n+auto MarkedVectorBase::expandCapacity(unsigned newCapacity) -> Status\n@@ -99,1 +99,1 @@\n-    for (int i = 0; i < m_size; ++i) {\n+    for (unsigned i = 0; i < m_size; ++i) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/ArgList.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-    Status expandCapacity(int newCapacity);\n+    Status expandCapacity(unsigned newCapacity);\n@@ -93,1 +93,1 @@\n-    EncodedJSValue& slotFor(int item) const\n+    EncodedJSValue& slotFor(unsigned item) const\n@@ -117,2 +117,2 @@\n-    int m_size;\n-    int m_capacity;\n+    unsigned m_size;\n+    unsigned m_capacity;\n@@ -139,1 +139,1 @@\n-    auto at(int i) const -> decltype(auto)\n+    auto at(unsigned i) const -> decltype(auto)\n@@ -279,1 +279,1 @@\n-    ArgList(EncodedJSValue* args, int count)\n+    ArgList(EncodedJSValue* args, unsigned count)\n@@ -285,1 +285,1 @@\n-    JSValue at(int i) const\n+    JSValue at(unsigned i) const\n@@ -301,1 +301,1 @@\n-    int m_argCount { 0 };\n+    unsigned m_argCount { 0 };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/ArgList.h","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -183,1 +183,9 @@\n-        jsCast<JSFunction*>(baseObject)->reifyLazyPropertyIfNeeded<>(vm, globalObject, propertyName);\n+        JSFunction* jsFunction = jsCast<JSFunction*>(baseObject);\n+\n+        if (propertyName == vm.propertyNames->prototype) {\n+            slot.disableCaching();\n+            if (FunctionRareData* rareData = jsFunction->rareData())\n+                rareData->clear(\"Store to prototype property of a function\");\n+        }\n+\n+        jsFunction->reifyLazyPropertyIfNeeded<>(vm, globalObject, propertyName);\n@@ -204,0 +212,4 @@\n+    \/\/ baseObject is either JSFinalObject during object literal construction, or a userland JSFunction class\n+    \/\/ constructor, both of which are guaranteed to be extensible and without non-configurable |propertyName|.\n+    \/\/ Please also note that static \"prototype\" accessor in a `class` literal is a syntax error.\n+\n@@ -207,0 +219,1 @@\n+        ASSERT(propertyName != vm.propertyNames->prototype);\n@@ -211,3 +224,0 @@\n-    \/\/ baseObject is either JSFinalObject during object literal construction, or a userland JSFunction class\n-    \/\/ constructor, both of which are guaranteed to be extensible and without non-configurable |propertyName|.\n-    \/\/ Please also note that static \"prototype\" accessor in a `class` literal is a syntax error.\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/CommonSlowPaths.h","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-    static constexpr unsigned StructureFlags = Base::StructureFlags | StructureIsImmortal;\n+    static constexpr unsigned StructureFlags = Base::StructureFlags | OverridesGetOwnPropertySlot | OverridesPut | StructureIsImmortal;\n@@ -63,0 +63,7 @@\n+    static bool getOwnPropertySlot(JSObject*, JSGlobalObject*, PropertyName, PropertySlot&) { RELEASE_ASSERT_NOT_REACHED(); return false; }\n+    static bool put(JSCell*, JSGlobalObject*, PropertyName, JSValue, PutPropertySlot&) { RELEASE_ASSERT_NOT_REACHED(); return false; }\n+    static bool putByIndex(JSCell*, JSGlobalObject*, unsigned, JSValue, bool) { RELEASE_ASSERT_NOT_REACHED(); return false; }\n+    static bool setPrototype(JSObject*, JSGlobalObject*, JSValue, bool) { RELEASE_ASSERT_NOT_REACHED(); return false; }\n+    static bool defineOwnProperty(JSObject*, JSGlobalObject*, PropertyName, const PropertyDescriptor&, bool) { RELEASE_ASSERT_NOT_REACHED(); return false; }\n+    static bool deleteProperty(JSCell*, JSGlobalObject*, PropertyName, DeletePropertySlot&) { RELEASE_ASSERT_NOT_REACHED(); return false; }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/CustomGetterSetter.h","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -147,0 +147,5 @@\n+        \/\/ .prototype getter could have triggered having a bad time so need to recheck array structures.\n+        if (UNLIKELY(baseGlobalObject->isHavingABadTime())) {\n+            if (baseGlobalObject->isOriginalArrayStructure(baseClass))\n+                baseClass = baseGlobalObject->arrayStructureForIndexingTypeDuringAllocation(baseClass->indexingType());\n+        }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/InternalFunction.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -348,2 +348,2 @@\n-    B3IRGenerator(const ModuleInformation&, OptimizingJITCallee&, Procedure&, Vector<UnlinkedWasmToWasmCall>&, unsigned& osrEntryScratchBufferSize, MemoryMode, CompilationMode, unsigned functionIndex, std::optional<bool> hasExceptionHandlers, unsigned loopIndexForOSREntry, TierUpCount*);\n-    B3IRGenerator(B3IRGenerator& inlineCaller, B3IRGenerator& inlineRoot, unsigned functionIndex, BasicBlock* returnContinuation, Vector<Value*> args);\n+    B3IRGenerator(CalleeGroup&, const ModuleInformation&, OptimizingJITCallee&, Procedure&, Vector<UnlinkedWasmToWasmCall>&, unsigned& osrEntryScratchBufferSize, MemoryMode, CompilationMode, unsigned functionIndex, std::optional<bool> hasExceptionHandlers, unsigned loopIndexForOSREntry, TierUpCount*);\n+    B3IRGenerator(B3IRGenerator& inlineCaller, B3IRGenerator& inlineRoot, CalleeGroup&, unsigned functionIndex, std::optional<bool> hasExceptionHandlers, BasicBlock* returnContinuation, Vector<Value*> args);\n@@ -354,0 +354,1 @@\n+    bool usesSIMD() { return m_info.usesSIMD(m_functionIndex); }\n@@ -905,0 +906,1 @@\n+    CalleeGroup& m_calleeGroup;\n@@ -1011,2 +1013,3 @@\n-B3IRGenerator::B3IRGenerator(B3IRGenerator& parentCaller, B3IRGenerator& rootCaller, unsigned functionIndex, BasicBlock* returnContinuation, Vector<Value*> args)\n-    : m_info(rootCaller.m_info)\n+B3IRGenerator::B3IRGenerator(B3IRGenerator& parentCaller, B3IRGenerator& rootCaller, CalleeGroup& calleeGroup, unsigned functionIndex, std::optional<bool> hasExceptionHandlers, BasicBlock* returnContinuation, Vector<Value*> args)\n+    : m_calleeGroup(calleeGroup)\n+    , m_info(rootCaller.m_info)\n@@ -1028,1 +1031,1 @@\n-    , m_hasExceptionHandlers(false)\n+    , m_hasExceptionHandlers(hasExceptionHandlers)\n@@ -1039,0 +1042,2 @@\n+    if (parentCaller.m_hasExceptionHandlers && *parentCaller.m_hasExceptionHandlers)\n+        m_hasExceptionHandlers = { true };\n@@ -1077,2 +1082,3 @@\n-B3IRGenerator::B3IRGenerator(const ModuleInformation& info, OptimizingJITCallee& callee, Procedure& procedure, Vector<UnlinkedWasmToWasmCall>& unlinkedWasmToWasmCalls, unsigned& osrEntryScratchBufferSize, MemoryMode mode, CompilationMode compilationMode, unsigned functionIndex, std::optional<bool> hasExceptionHandlers, unsigned loopIndexForOSREntry, TierUpCount* tierUp)\n-    : m_info(info)\n+B3IRGenerator::B3IRGenerator(CalleeGroup& calleeGroup, const ModuleInformation& info, OptimizingJITCallee& callee, Procedure& procedure, Vector<UnlinkedWasmToWasmCall>& unlinkedWasmToWasmCalls, unsigned& osrEntryScratchBufferSize, MemoryMode mode, CompilationMode compilationMode, unsigned functionIndex, std::optional<bool> hasExceptionHandlers, unsigned loopIndexForOSREntry, TierUpCount* tierUp)\n+    : m_calleeGroup(calleeGroup)\n+    , m_info(info)\n@@ -4279,1 +4285,1 @@\n-        return { m_hasExceptionHandlers };\n+        return { m_hasExceptionHandlers, callSiteIndex() };\n@@ -4302,0 +4308,2 @@\n+        for (Variable* value : currentFrame->m_parser->expressionStack())\n+            liveValues.append(get(block, value));\n@@ -4378,0 +4386,4 @@\n+\n+        auto& topControlData = currentFrame->m_parser->controlStack().last().controlData;\n+        auto& topExpressionStack = currentFrame->m_parser->expressionStack();\n+        connectControlAtEntrypoint(indexInBuffer, pointer, topControlData, topExpressionStack, data);\n@@ -4408,0 +4420,1 @@\n+\n@@ -4434,0 +4447,1 @@\n+\n@@ -4651,1 +4665,1 @@\n-    Box<PatchpointExceptionHandle> exceptionHandle = Box<PatchpointExceptionHandle>::create(m_hasExceptionHandlers);\n+    Box<PatchpointExceptionHandle> exceptionHandle = Box<PatchpointExceptionHandle>::create(m_hasExceptionHandlers, callSiteIndex());\n@@ -4785,1 +4799,8 @@\n-    m_protectedInlineeGenerators.append(makeUnique<B3IRGenerator>(*this, *m_inlineRoot, calleeFunctionIndex, continuation, WTFMove(getArgs)));\n+    std::optional<bool> inlineeHasExceptionHandlers;\n+    {\n+        Locker locker { m_calleeGroup.m_lock };\n+        unsigned calleeFunctionIndexSpace = calleeFunctionIndex + m_numImportFunctions;\n+        auto& inlineCallee = m_calleeGroup.wasmEntrypointCalleeFromFunctionIndexSpace(locker, calleeFunctionIndexSpace);\n+        inlineeHasExceptionHandlers = inlineCallee.hasExceptionHandlers();\n+    }\n+    m_protectedInlineeGenerators.append(makeUnique<B3IRGenerator>(*this, *m_inlineRoot, m_calleeGroup, calleeFunctionIndex, inlineeHasExceptionHandlers, continuation, WTFMove(getArgs)));\n@@ -4810,1 +4831,0 @@\n-    bool mayHaveExceptionHandlers = !m_hasExceptionHandlers || m_hasExceptionHandlers.value();\n@@ -4812,1 +4832,1 @@\n-        m_currentBlock->appendIntConstant(m_proc, origin(), Int32, mayHaveExceptionHandlers ? PatchpointExceptionHandle::s_invalidCallSiteIndex : firstInlineCSI),\n+        m_currentBlock->appendIntConstant(m_proc, origin(), Int32, firstInlineCSI),\n@@ -4824,1 +4844,1 @@\n-        m_currentBlock->appendIntConstant(m_proc, origin(), Int32, mayHaveExceptionHandlers ? PatchpointExceptionHandle::s_invalidCallSiteIndex : advanceCallSiteIndex()),\n+        m_currentBlock->appendIntConstant(m_proc, origin(), Int32, advanceCallSiteIndex()),\n@@ -5175,1 +5195,1 @@\n-Expected<std::unique_ptr<InternalFunction>, String> parseAndCompileB3(CompilationContext& compilationContext, OptimizingJITCallee& callee, const FunctionData& function, const TypeDefinition& signature, Vector<UnlinkedWasmToWasmCall>& unlinkedWasmToWasmCalls, const ModuleInformation& info, MemoryMode mode, CompilationMode compilationMode, uint32_t functionIndex, std::optional<bool> hasExceptionHandlers, uint32_t loopIndexForOSREntry, TierUpCount* tierUp)\n+Expected<std::unique_ptr<InternalFunction>, String> parseAndCompileB3(CompilationContext& compilationContext, OptimizingJITCallee& callee, const FunctionData& function, const TypeDefinition& signature, Vector<UnlinkedWasmToWasmCall>& unlinkedWasmToWasmCalls, CalleeGroup& calleeGroup, const ModuleInformation& info, MemoryMode mode, CompilationMode compilationMode, uint32_t functionIndex, std::optional<bool> hasExceptionHandlers, uint32_t loopIndexForOSREntry, TierUpCount* tierUp)\n@@ -5216,1 +5236,1 @@\n-    B3IRGenerator irGenerator(info, callee, procedure, unlinkedWasmToWasmCalls, result->osrEntryScratchBufferSize, mode, compilationMode, functionIndex, hasExceptionHandlers, loopIndexForOSREntry, tierUp);\n+    B3IRGenerator irGenerator(calleeGroup, info, callee, procedure, unlinkedWasmToWasmCalls, result->osrEntryScratchBufferSize, mode, compilationMode, functionIndex, hasExceptionHandlers, loopIndexForOSREntry, tierUp);\n@@ -5778,1 +5798,1 @@\n-Expected<std::unique_ptr<InternalFunction>, String> parseAndCompileB3(CompilationContext&, OptimizingJITCallee&, const FunctionData&, const TypeDefinition&, Vector<UnlinkedWasmToWasmCall>&, const ModuleInformation&, MemoryMode, CompilationMode, uint32_t, std::optional<bool>, uint32_t, TierUpCount*)\n+Expected<std::unique_ptr<InternalFunction>, String> parseAndCompileB3(CompilationContext&, OptimizingJITCallee&, const FunctionData&, const TypeDefinition&, Vector<UnlinkedWasmToWasmCall>&, CalleeGroup&, const ModuleInformation&, MemoryMode, CompilationMode, uint32_t, std::optional<bool>, uint32_t, TierUpCount*)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmB3IRGenerator.cpp","additions":36,"deletions":16,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -52,1 +52,3 @@\n-Expected<std::unique_ptr<InternalFunction>, String> parseAndCompileB3(CompilationContext&, OptimizingJITCallee&, const FunctionData&, const TypeDefinition&, Vector<UnlinkedWasmToWasmCall>&, const ModuleInformation&, MemoryMode, CompilationMode, uint32_t functionIndex, std::optional<bool> hasExceptionHandlers, uint32_t loopIndexForOSREntry, TierUpCount* = nullptr);\n+class CalleeGroup;\n+\n+Expected<std::unique_ptr<InternalFunction>, String> parseAndCompileB3(CompilationContext&, OptimizingJITCallee&, const FunctionData&, const TypeDefinition&, Vector<UnlinkedWasmToWasmCall>&, CalleeGroup&, const ModuleInformation&, MemoryMode, CompilationMode, uint32_t functionIndex, std::optional<bool> hasExceptionHandlers, uint32_t loopIndexForOSREntry, TierUpCount* = nullptr);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmB3IRGenerator.h","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3961,0 +3961,19 @@\n+            } else {\n+                ASSERT(returnLocation.isStackArgument());\n+                \/\/ FIXME: Ideally, we would leave these values where they are but a subsequent call could clobber them before they are used.\n+                \/\/ That said, stack results are very rare so this isn't too painful.\n+                \/\/ Even if we did leave them where they are, we'd need to flush them to their canonical location at the next branch otherwise\n+                \/\/ we could have something like (assume no result regs for simplicity):\n+                \/\/ call (result i32 i32) $foo\n+                \/\/ if (result i32) \/\/ Stack: i32(StackArgument:8) i32(StackArgument:0)\n+                \/\/   \/\/ Stack: i32(StackArgument:8)\n+                \/\/ else\n+                \/\/   call (result i32 i32) $bar \/\/ Stack: i32(StackArgument:8) we have to flush the stack argument to make room for the result of bar\n+                \/\/   drop \/\/ Stack: i32(Stack:X) i32(StackArgument:8) i32(StackArgument:0)\n+                \/\/   drop \/\/ Stack: i32(Stack:X) i32(StackArgument:8)\n+                \/\/ end\n+                \/\/ return \/\/ Stack i32(*Conflicting locations*)\n+\n+                Location canonicalLocation = canonicalSlot(result);\n+                emitMoveMemory(result.type(), returnLocation, canonicalLocation);\n+                returnLocation = canonicalLocation;\n@@ -4184,0 +4203,5 @@\n+bool BBQJIT::usesSIMD()\n+{\n+    return m_usesSIMD;\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmBBQJIT.cpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1783,0 +1783,2 @@\n+    bool usesSIMD();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmBBQJIT.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -657,0 +657,1 @@\n+    bool usesSIMD() { return false; }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmConstExprGenerator.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -334,0 +334,1 @@\n+    PartialResult WARN_UNUSED_RETURN parseBlockSignatureAndNotifySIMDUseIfNeeded(BlockSignature&);\n@@ -352,0 +353,23 @@\n+template<typename Context>\n+auto FunctionParser<Context>::parseBlockSignatureAndNotifySIMDUseIfNeeded(BlockSignature& signature) -> PartialResult\n+{\n+    auto result = parseBlockSignature(m_info, signature);\n+\n+    \/\/ This check ensures the valid result and the non empty signature.\n+    if (!result || !signature)\n+        return result;\n+\n+    if (m_context.usesSIMD()) {\n+        if (!Context::tierSupportsSIMD)\n+            WASM_TRY_ADD_TO_CONTEXT(addCrash());\n+        return result;\n+    }\n+\n+    if (signature->hasReturnVector()) {\n+        m_context.notifyFunctionUsesSIMD();\n+        if (!Context::tierSupportsSIMD)\n+            WASM_TRY_ADD_TO_CONTEXT(addCrash());\n+    }\n+    return result;\n+}\n+\n@@ -2726,0 +2750,1 @@\n+        WASM_VALIDATOR_FAIL_IF(!isRefType(ref.type()), \"ref.as_non_null ref to type \", ref.type(), \" expected a reference type\");\n@@ -3067,1 +3092,1 @@\n-        WASM_PARSER_FAIL_IF(!parseBlockSignature(m_info, inlineSignature), \"can't get block's signature\");\n+        WASM_PARSER_FAIL_IF(!parseBlockSignatureAndNotifySIMDUseIfNeeded(inlineSignature), \"can't get block's signature\");\n@@ -3089,1 +3114,1 @@\n-        WASM_PARSER_FAIL_IF(!parseBlockSignature(m_info, inlineSignature), \"can't get loop's signature\");\n+        WASM_PARSER_FAIL_IF(!parseBlockSignatureAndNotifySIMDUseIfNeeded(inlineSignature), \"can't get loop's signature\");\n@@ -3113,1 +3138,1 @@\n-        WASM_PARSER_FAIL_IF(!parseBlockSignature(m_info, inlineSignature), \"can't get if's signature\");\n+        WASM_PARSER_FAIL_IF(!parseBlockSignatureAndNotifySIMDUseIfNeeded(inlineSignature), \"can't get if's signature\");\n@@ -3149,1 +3174,1 @@\n-        WASM_PARSER_FAIL_IF(!parseBlockSignature(m_info, inlineSignature), \"can't get try's signature\");\n+        WASM_PARSER_FAIL_IF(!parseBlockSignatureAndNotifySIMDUseIfNeeded(inlineSignature), \"can't get try's signature\");\n@@ -3558,1 +3583,1 @@\n-        WASM_PARSER_FAIL_IF(!parseBlockSignature(m_info, unused), \"can't get inline type for \", m_currentOpcode, \" in unreachable context\");\n+        WASM_PARSER_FAIL_IF(!parseBlockSignatureAndNotifySIMDUseIfNeeded(unused), \"can't get inline type for \", m_currentOpcode, \" in unreachable context\");\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmFunctionParser.h","additions":30,"deletions":5,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -203,0 +203,1 @@\n+    bool usesSIMD() { return m_usesSIMD; }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmIPIntGenerator.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    PatchpointExceptionHandle(std::optional<bool> hasExceptionHandlers)\n+    PatchpointExceptionHandle(std::optional<bool> hasExceptionHandlers, unsigned callSiteIndex)\n@@ -51,0 +51,1 @@\n+        , m_callSiteIndex(callSiteIndex)\n@@ -62,2 +63,1 @@\n-        if (m_callSiteIndex == s_invalidCallSiteIndex) {\n-            if (!m_hasExceptionHandlers || m_hasExceptionHandlers.value())\n+        JIT_COMMENT(jit, \"Store call site index \", m_callSiteIndex, \" at throw or call site.\");\n@@ -65,0 +65,4 @@\n+\n+        if (m_hasExceptionHandlers && !*m_hasExceptionHandlers)\n+            return;\n+        if (!m_numLiveValues)\n@@ -66,1 +70,0 @@\n-        }\n@@ -68,4 +71,4 @@\n-        StackMap values(m_numLiveValues);\n-        unsigned paramsOffset = params.size() - m_numLiveValues;\n-        unsigned childrenOffset = params.value()->numChildren() - m_numLiveValues;\n-        for (unsigned i = 0; i < m_numLiveValues; ++i)\n+        StackMap values(*m_numLiveValues);\n+        unsigned paramsOffset = params.size() - *m_numLiveValues;\n+        unsigned childrenOffset = params.value()->numChildren() - *m_numLiveValues;\n+        for (unsigned i = 0; i < *m_numLiveValues; ++i)\n@@ -75,2 +78,0 @@\n-        JIT_COMMENT(jit, \"Store call site index \", m_callSiteIndex, \" at throw or call site.\");\n-        jit.store32(CCallHelpers::TrustedImm32(m_callSiteIndex), CCallHelpers::tagFor(CallFrameSlot::argumentCountIncludingThis));\n@@ -81,1 +82,1 @@\n-    unsigned m_numLiveValues;\n+    std::optional<unsigned> m_numLiveValues { };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmIRGeneratorHelpers.h","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -260,0 +260,1 @@\n+    bool usesSIMD() { return m_usesSIMD; }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmLLIntGenerator.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-    auto parseAndCompileResult = parseAndCompileB3(context, callee.get(), function, signature, unlinkedCalls, m_moduleInformation.get(), m_mode, CompilationMode::OMGMode, m_functionIndex, m_hasExceptionHandlers, UINT32_MAX);\n+    auto parseAndCompileResult = parseAndCompileB3(context, callee.get(), function, signature, unlinkedCalls, m_calleeGroup.get(), m_moduleInformation.get(), m_mode, CompilationMode::OMGMode, m_functionIndex, m_hasExceptionHandlers, UINT32_MAX);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmOMGPlan.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-    auto parseAndCompileResult = parseAndCompileB3(context, callee.get(), function, signature, unlinkedCalls, m_moduleInformation.get(), m_mode, targetCompilationMode, m_functionIndex, m_hasExceptionHandlers, m_loopIndex);\n+    auto parseAndCompileResult = parseAndCompileB3(context, callee.get(), function, signature, unlinkedCalls, m_calleeGroup.get(), m_moduleInformation.get(), m_mode, targetCompilationMode, m_functionIndex, m_hasExceptionHandlers, m_loopIndex);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmOSREntryPlan.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -358,0 +358,9 @@\n+    bool hasReturnVector() const\n+    {\n+        for (size_t i = 0; i < returnCount(); ++i) {\n+            if (returnType(i).isV128())\n+                return true;\n+        }\n+        return false;\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmTypeDefinition.h","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -957,0 +957,15 @@\n+        \/\/ Initialize backtracking info first before we check for possible null matches.\n+        switch (term.atom.quantityType) {\n+        case QuantifierType::NonGreedy:\n+            backTrack->matchAmount = 0;\n+            FALLTHROUGH;\n+\n+        case QuantifierType::FixedCount:\n+            backTrack->begin = input.getPos();\n+            break;\n+\n+        case QuantifierType::Greedy:\n+            backTrack->matchAmount = 0;\n+            break;\n+        }\n+\n@@ -987,1 +1002,0 @@\n-            backTrack->begin = input.getPos();\n@@ -1002,1 +1016,0 @@\n-            backTrack->backReferenceSize = matchEnd - matchBegin;\n@@ -1007,2 +1020,0 @@\n-            backTrack->begin = input.getPos();\n-            backTrack->matchAmount = 0;\n@@ -1021,2 +1032,13 @@\n-        unsigned matchBegin = output[(term.subpatternId() << 1)];\n-        unsigned matchEnd = output[(term.subpatternId() << 1) + 1];\n+        unsigned subpatternId;\n+\n+        if (auto duplicateNamedGroupId = term.duplicateNamedGroupId()) {\n+            subpatternId = output[pattern->offsetForDuplicateNamedGroupId(duplicateNamedGroupId)];\n+            if (subpatternId < 1) {\n+                \/\/ If we don't have a subpattern that matched, then the string to match is empty.\n+                return false;\n+            }\n+        } else\n+            subpatternId = term.subpatternId();\n+\n+        unsigned matchBegin = output[(subpatternId << 1)];\n+        unsigned matchEnd = output[(subpatternId << 1) + 1];\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/yarr\/YarrInterpreter.cpp","additions":28,"deletions":6,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -231,2 +231,3 @@\n-                addChar(ch);\n-                addChar(getCanonicalPair(info, ch));\n+                char32_t canonicalChar = getCanonicalPair(info, ch);\n+                addChar(std::min(ch, canonicalChar));\n+                addChar(std::max(ch, canonicalChar));\n@@ -780,0 +781,1 @@\n+                ASSERT(ch >= chunkLo);\n@@ -791,1 +793,2 @@\n-                for (char32_t ch = begin; ch <= end; ch++)\n+                for (char32_t ch = begin; ch <= end; ch++) {\n+                    ASSERT(ch >= chunkLo);\n@@ -793,0 +796,1 @@\n+                }\n@@ -803,0 +807,1 @@\n+                ASSERT(ch >= chunkLo);\n@@ -814,1 +819,2 @@\n-                for (char32_t ch = begin; ch <= end; ch++)\n+                for (char32_t ch = begin; ch <= end; ch++) {\n+                    ASSERT(ch >= chunkLo);\n@@ -816,0 +822,1 @@\n+                }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/yarr\/YarrPattern.cpp","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -119,0 +119,4 @@\n+    template<typename Predicate> bool containsIf(const Predicate& predicate) const\n+    {\n+        return findIf(predicate) != end();\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/Deque.h","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+WTF_EXPORT_PRIVATE bool unsetCloseOnExec(int fileDescriptor);\n@@ -60,0 +61,1 @@\n+using WTF::unsetCloseOnExec;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/UniStdExtras.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,0 +45,12 @@\n+bool unsetCloseOnExec(int fileDescriptor)\n+{\n+    int returnValue = -1;\n+    do {\n+        int flags = fcntl(fileDescriptor, F_GETFD);\n+        if (flags == -1)\n+            returnValue = fcntl(fileDescriptor, F_SETFD, flags & ~FD_CLOEXEC);\n+    } while (returnValue == -1 && errno == EINTR);\n+\n+    return returnValue != -1;\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/unix\/UniStdExtrasUnix.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -283,0 +283,3 @@\n+    if (!m_blobLoader)\n+        return;\n+\n@@ -323,0 +326,6 @@\n+void FetchBodyOwner::BlobLoader::didSucceed(const NetworkLoadMetrics&)\n+{\n+    Ref protectedOwner = Ref { owner };\n+    protectedOwner->blobLoadingSucceeded();\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/fetch\/FetchBodyOwner.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-        void didSucceed(const NetworkLoadMetrics&) final { owner.blobLoadingSucceeded(); }\n+        void didSucceed(const NetworkLoadMetrics&) final;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/fetch\/FetchBodyOwner.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -239,1 +239,1 @@\n-void PeerConnectionBackend::setLocalDescriptionSucceeded(std::optional<DescriptionStates>&& descriptionStates, std::optional<TransceiverStates>&& transceiverStates, std::unique_ptr<RTCSctpTransportBackend>&& sctpBackend)\n+void PeerConnectionBackend::setLocalDescriptionSucceeded(std::optional<DescriptionStates>&& descriptionStates, std::optional<TransceiverStates>&& transceiverStates, std::unique_ptr<RTCSctpTransportBackend>&& sctpBackend, std::optional<double> maxMessageSize)\n@@ -243,1 +243,2 @@\n-\n+    if (transceiverStates)\n+        DEBUG_LOG(LOGIDENTIFIER, \"Transceiver states: \", *transceiverStates);\n@@ -245,1 +246,1 @@\n-    m_peerConnection.queueTaskKeepingObjectAlive(m_peerConnection, TaskSource::Networking, [this, callback = WTFMove(m_setDescriptionCallback), descriptionStates = WTFMove(descriptionStates), transceiverStates = WTFMove(transceiverStates), sctpBackend = WTFMove(sctpBackend)]() mutable {\n+    m_peerConnection.queueTaskKeepingObjectAlive(m_peerConnection, TaskSource::Networking, [this, callback = WTFMove(m_setDescriptionCallback), descriptionStates = WTFMove(descriptionStates), transceiverStates = WTFMove(transceiverStates), sctpBackend = WTFMove(sctpBackend), maxMessageSize]() mutable {\n@@ -250,1 +251,1 @@\n-        m_peerConnection.updateSctpBackend(WTFMove(sctpBackend));\n+        m_peerConnection.updateSctpBackend(WTFMove(sctpBackend), maxMessageSize);\n@@ -324,1 +325,1 @@\n-void PeerConnectionBackend::setRemoteDescriptionSucceeded(std::optional<DescriptionStates>&& descriptionStates, std::optional<TransceiverStates>&& transceiverStates, std::unique_ptr<RTCSctpTransportBackend>&& sctpBackend)\n+void PeerConnectionBackend::setRemoteDescriptionSucceeded(std::optional<DescriptionStates>&& descriptionStates, std::optional<TransceiverStates>&& transceiverStates, std::unique_ptr<RTCSctpTransportBackend>&& sctpBackend, std::optional<double> maxMessageSize)\n@@ -328,0 +329,2 @@\n+    if (transceiverStates)\n+        DEBUG_LOG(LOGIDENTIFIER, \"Transceiver states: \", *transceiverStates);\n@@ -330,1 +333,1 @@\n-    m_peerConnection.queueTaskKeepingObjectAlive(m_peerConnection, TaskSource::Networking, [this, callback = WTFMove(m_setDescriptionCallback), descriptionStates = WTFMove(descriptionStates), transceiverStates = WTFMove(transceiverStates), sctpBackend = WTFMove(sctpBackend), events = WTFMove(m_pendingTrackEvents)]() mutable {\n+    m_peerConnection.queueTaskKeepingObjectAlive(m_peerConnection, TaskSource::Networking, [this, callback = WTFMove(m_setDescriptionCallback), descriptionStates = WTFMove(descriptionStates), transceiverStates = WTFMove(transceiverStates), sctpBackend = WTFMove(sctpBackend), maxMessageSize, events = WTFMove(m_pendingTrackEvents)]() mutable {\n@@ -347,1 +350,1 @@\n-        m_peerConnection.updateSctpBackend(WTFMove(sctpBackend));\n+        m_peerConnection.updateSctpBackend(WTFMove(sctpBackend), maxMessageSize);\n@@ -656,0 +659,35 @@\n+static Ref<JSON::Object> toJSONObject(const PeerConnectionBackend::TransceiverState& transceiverState)\n+{\n+    auto object = JSON::Object::create();\n+    object->setString(\"mid\"_s, transceiverState.mid);\n+\n+    auto receiverStreams = JSON::Array::create();\n+    for (auto receiverStream : transceiverState.receiverStreams)\n+        receiverStreams->pushString(receiverStream->id());\n+    object->setArray(\"receiverStreams\"_s, WTFMove(receiverStreams));\n+\n+    if (auto firedDirection = transceiverState.firedDirection)\n+        object->setString(\"firedDirection\"_s, convertEnumerationToString(*firedDirection));\n+\n+    return object;\n+}\n+\n+static Ref<JSON::Array> toJSONArray(const PeerConnectionBackend::TransceiverStates& transceiverStates)\n+{\n+    auto array = JSON::Array::create();\n+    for (auto transceiverState : transceiverStates)\n+        array->pushObject(toJSONObject(transceiverState));\n+\n+    return array;\n+}\n+\n+static String toJSONString(const PeerConnectionBackend::TransceiverState& transceiverState)\n+{\n+    return toJSONObject(transceiverState)->toJSONString();\n+}\n+\n+static String toJSONString(const PeerConnectionBackend::TransceiverStates& transceiverStates)\n+{\n+    return toJSONArray(transceiverStates)->toJSONString();\n+}\n+\n@@ -658,0 +696,14 @@\n+namespace WTF {\n+\n+String LogArgument<WebCore::PeerConnectionBackend::TransceiverState>::toString(const WebCore::PeerConnectionBackend::TransceiverState& transceiverState)\n+{\n+    return toJSONString(transceiverState);\n+}\n+\n+String LogArgument<WebCore::PeerConnectionBackend::TransceiverStates>::toString(const WebCore::PeerConnectionBackend::TransceiverStates& transceiverStates)\n+{\n+    return toJSONString(transceiverStates);\n+}\n+\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/mediastream\/PeerConnectionBackend.cpp","additions":59,"deletions":7,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -223,1 +223,1 @@\n-    void setLocalDescriptionSucceeded(std::optional<DescriptionStates>&&, std::optional<TransceiverStates>&&, std::unique_ptr<RTCSctpTransportBackend>&&);\n+    void setLocalDescriptionSucceeded(std::optional<DescriptionStates>&&, std::optional<TransceiverStates>&&, std::unique_ptr<RTCSctpTransportBackend>&&, std::optional<double>);\n@@ -226,1 +226,1 @@\n-    void setRemoteDescriptionSucceeded(std::optional<DescriptionStates>&&, std::optional<TransceiverStates>&&, std::unique_ptr<RTCSctpTransportBackend>&&);\n+    void setRemoteDescriptionSucceeded(std::optional<DescriptionStates>&&, std::optional<TransceiverStates>&&, std::unique_ptr<RTCSctpTransportBackend>&&, std::optional<double>);\n@@ -282,1 +282,0 @@\n-\n@@ -285,0 +284,17 @@\n+namespace WTF {\n+\n+template<typename>\n+struct LogArgument;\n+\n+template <>\n+struct LogArgument<WebCore::PeerConnectionBackend::TransceiverState> {\n+    static String toString(const WebCore::PeerConnectionBackend::TransceiverState&);\n+};\n+\n+template <>\n+struct LogArgument<WebCore::PeerConnectionBackend::TransceiverStates> {\n+    static String toString(const WebCore::PeerConnectionBackend::TransceiverStates&);\n+};\n+\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/mediastream\/PeerConnectionBackend.h","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1066,1 +1066,1 @@\n-void RTCPeerConnection::updateSctpBackend(std::unique_ptr<RTCSctpTransportBackend>&& sctpBackend)\n+void RTCPeerConnection::updateSctpBackend(std::unique_ptr<RTCSctpTransportBackend>&& sctpBackend, std::optional<double> maxMessageSize)\n@@ -1072,4 +1072,2 @@\n-    if (m_sctpTransport && m_sctpTransport->backend() == *sctpBackend) {\n-        m_sctpTransport->update();\n-        return;\n-    }\n+\n+    if (!m_sctpTransport || m_sctpTransport->backend() != *sctpBackend) {\n@@ -1084,0 +1082,3 @@\n+    }\n+\n+    m_sctpTransport->updateMaxMessageSize(maxMessageSize);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/mediastream\/RTCPeerConnection.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-    void updateSctpBackend(std::unique_ptr<RTCSctpTransportBackend>&&);\n+    void updateSctpBackend(std::unique_ptr<RTCSctpTransportBackend>&&, std::optional<double>);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/mediastream\/RTCPeerConnection.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,2 +78,1 @@\n-        if (maxMessageSize)\n-            m_maxMessageSize = *maxMessageSize;\n+        m_maxMessageSize = maxMessageSize;\n@@ -90,0 +89,5 @@\n+void RTCSctpTransport::updateMaxMessageSize(std::optional<double> maxMessageSize)\n+{\n+    m_maxMessageSize = maxMessageSize;\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/mediastream\/RTCSctpTransport.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (C) 2021 Apple Inc. All rights reserved.\n+ * Copyright (C) 2021-2024 Apple Inc. All rights reserved.\n@@ -49,1 +49,1 @@\n-    double maxMessageSize() const { return m_maxMessageSize; }\n+    double maxMessageSize() const { return m_maxMessageSize.value_or(std::numeric_limits<double>::infinity()); }\n@@ -52,1 +52,1 @@\n-    void update() { }\n+    void updateMaxMessageSize(std::optional<double>);\n@@ -76,1 +76,1 @@\n-    double m_maxMessageSize { std::numeric_limits<double>::max() };\n+    std::optional<double> m_maxMessageSize;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/mediastream\/RTCSctpTransport.h","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-        double timestamp;\n+        double timestamp { 0 };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/mediastream\/RTCStatsReport.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -659,0 +659,1 @@\n+    std::optional<double> maxMessageSize() const;\n@@ -679,0 +680,5 @@\n+std::optional<double> SctpTransportState::maxMessageSize() const\n+{\n+    return m_information.MaxMessageSize() ? std::make_optional(*m_information.MaxMessageSize()) : std::nullopt;\n+}\n+\n@@ -736,1 +742,1 @@\n-        protectedThis->m_peerConnectionBackend.setLocalDescriptionSucceeded(WTFMove(descriptions), WTFMove(transceiverStates), sctpState.createBackend());\n+        protectedThis->m_peerConnectionBackend.setLocalDescriptionSucceeded(WTFMove(descriptions), WTFMove(transceiverStates), sctpState.createBackend(), sctpState.maxMessageSize());\n@@ -763,1 +769,1 @@\n-        protectedThis->m_peerConnectionBackend.setRemoteDescriptionSucceeded(WTFMove(descriptions), WTFMove(transceiverStates), sctpState.createBackend());\n+        protectedThis->m_peerConnectionBackend.setRemoteDescriptionSucceeded(WTFMove(descriptions), WTFMove(transceiverStates), sctpState.createBackend(), sctpState.maxMessageSize());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/mediastream\/libwebrtc\/LibWebRTCMediaEndpoint.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-MainThreadPermissionObserver::MainThreadPermissionObserver(ThreadSafeWeakPtr<PermissionStatus>&& permissionStatus, ScriptExecutionContextIdentifier contextIdentifier, PermissionState state, PermissionDescriptor descriptor, PermissionQuerySource source, SingleThreadWeakPtr<Page>&& page, ClientOrigin&& origin)\n+MainThreadPermissionObserver::MainThreadPermissionObserver(ThreadSafeWeakPtr<PermissionStatus>&& permissionStatus, ScriptExecutionContextIdentifier contextIdentifier, PermissionState state, PermissionDescriptor descriptor, PermissionQuerySource source, WeakPtr<Page>&& page, ClientOrigin&& origin)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/permissions\/MainThreadPermissionObserver.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    MainThreadPermissionObserver(ThreadSafeWeakPtr<PermissionStatus>&&, ScriptExecutionContextIdentifier, PermissionState, PermissionDescriptor, PermissionQuerySource, SingleThreadWeakPtr<Page>&&, ClientOrigin&&);\n+    MainThreadPermissionObserver(ThreadSafeWeakPtr<PermissionStatus>&&, ScriptExecutionContextIdentifier, PermissionState, PermissionDescriptor, PermissionQuerySource, WeakPtr<Page>&&, ClientOrigin&&);\n@@ -55,1 +55,1 @@\n-    const SingleThreadWeakPtr<Page>& page() const final { return m_page; }\n+    const WeakPtr<Page>& page() const final { return m_page; }\n@@ -62,1 +62,1 @@\n-    SingleThreadWeakPtr<Page> m_page;\n+    WeakPtr<Page> m_page;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/permissions\/MainThreadPermissionObserver.h","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    virtual void query(ClientOrigin&&, PermissionDescriptor, const SingleThreadWeakPtr<Page>&, PermissionQuerySource, CompletionHandler<void(std::optional<PermissionState>)>&&) = 0;\n+    virtual void query(ClientOrigin&&, PermissionDescriptor, const WeakPtr<Page>&, PermissionQuerySource, CompletionHandler<void(std::optional<PermissionState>)>&&) = 0;\n@@ -63,1 +63,1 @@\n-    void query(ClientOrigin&&, PermissionDescriptor, const SingleThreadWeakPtr<Page>&, PermissionQuerySource, CompletionHandler<void(std::optional<PermissionState>)>&& callback) final { callback({ }); }\n+    void query(ClientOrigin&&, PermissionDescriptor, const WeakPtr<Page>&, PermissionQuerySource, CompletionHandler<void(std::optional<PermissionState>)>&& callback) final { callback({ }); }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/permissions\/PermissionController.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    virtual const SingleThreadWeakPtr<Page>& page() const = 0;\n+    virtual const WeakPtr<Page>& page() const = 0;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/permissions\/PermissionObserver.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-Ref<PermissionStatus> PermissionStatus::create(ScriptExecutionContext& context, PermissionState state, PermissionDescriptor descriptor, PermissionQuerySource source, SingleThreadWeakPtr<Page>&& page)\n+Ref<PermissionStatus> PermissionStatus::create(ScriptExecutionContext& context, PermissionState state, PermissionDescriptor descriptor, PermissionQuerySource source, WeakPtr<Page>&& page)\n@@ -64,1 +64,1 @@\n-PermissionStatus::PermissionStatus(ScriptExecutionContext& context, PermissionState state, PermissionDescriptor descriptor, PermissionQuerySource source, SingleThreadWeakPtr<Page>&& page)\n+PermissionStatus::PermissionStatus(ScriptExecutionContext& context, PermissionState state, PermissionDescriptor descriptor, PermissionQuerySource source, WeakPtr<Page>&& page)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/permissions\/PermissionStatus.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    static Ref<PermissionStatus> create(ScriptExecutionContext&, PermissionState, PermissionDescriptor, PermissionQuerySource, SingleThreadWeakPtr<Page>&&);\n+    static Ref<PermissionStatus> create(ScriptExecutionContext&, PermissionState, PermissionDescriptor, PermissionQuerySource, WeakPtr<Page>&&);\n@@ -57,1 +57,1 @@\n-    PermissionStatus(ScriptExecutionContext&, PermissionState, PermissionDescriptor, PermissionQuerySource, SingleThreadWeakPtr<Page>&&);\n+    PermissionStatus(ScriptExecutionContext&, PermissionState, PermissionDescriptor, PermissionQuerySource, WeakPtr<Page>&&);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/permissions\/PermissionStatus.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -147,0 +147,13 @@\n+\/\/ FIXME: We don't currently implement \"acquire the content\" [1] and\n+\/\/ AudioBuffer::getChannelData() correctly. As a result, the audio thread\n+\/\/ may be reading an array buffer that the JS can detach. To guard against\n+\/\/ this, we mark the array buffers as non-detachable as soon as their content\n+\/\/ has been acquired.\n+\/\/ [1] https:\/\/www.w3.org\/TR\/webaudio\/#acquire-the-content\n+void AudioBuffer::markBuffersAsNonDetachable()\n+{\n+    Locker locker { m_channelsLock };\n+    for (auto& channel : m_channels)\n+        channel->setDetachable(false);\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/AudioBuffer.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -62,0 +62,2 @@\n+    void markBuffersAsNonDetachable();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/AudioBuffer.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -331,0 +331,5 @@\n+        int deltaFrames = static_cast<int>(virtualDeltaFrames);\n+        maxFrame = static_cast<unsigned>(virtualMaxFrame);\n+\n+        if (readIndex >= maxFrame)\n+            readIndex -= deltaFrames;\n@@ -334,0 +339,2 @@\n+\n+        virtualReadIndex = readIndex;\n@@ -346,0 +353,6 @@\n+            \/\/ Final sanity check on buffer access.\n+            \/\/ FIXME: as an optimization, try to get rid of this inner-loop check and\n+            \/\/ put assertions and guards before the loop.\n+            if (readIndex >= bufferLength || readIndex2 >= bufferLength)\n+                break;\n+\n@@ -412,0 +425,9 @@\n+void AudioBufferSourceNode::acquireBufferContent()\n+{\n+    ASSERT(isMainThread());\n+\n+    \/\/ FIXME: We should implement https:\/\/www.w3.org\/TR\/webaudio\/#acquire-the-content.\n+    if (m_buffer)\n+        m_buffer->markBuffersAsNonDetachable();\n+}\n+\n@@ -449,0 +471,3 @@\n+    if (isPlayingOrScheduled())\n+        acquireBufferContent();\n+\n@@ -516,0 +541,1 @@\n+    acquireBufferContent();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/AudioBufferSourceNode.cpp","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -88,0 +88,2 @@\n+    void acquireBufferContent() WTF_REQUIRES_LOCK(m_processLock);\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/AudioBufferSourceNode.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,2 +90,4 @@\n-    if (RefPtr audioWorkletProxy = context().audioWorklet().proxy())\n-        workletGlobalScope = audioWorkletProxy->workletThread().globalScope();\n+    if (RefPtr audioWorkletProxy = context().audioWorklet().proxy()) {\n+        if (Ref workletThread = audioWorkletProxy->workletThread(); workletThread->thread() == &Thread::current())\n+            workletGlobalScope = workletThread->globalScope();\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/AudioDestinationNode.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -581,0 +581,5 @@\n+    {\n+        Locker locker { context().graphLock() };\n+        unmarkNodeForDeletionIfNecessary();\n+    }\n+\n@@ -643,0 +648,12 @@\n+void AudioNode::unmarkNodeForDeletionIfNecessary()\n+{\n+    ASSERT(context().isGraphOwner());\n+    if (!m_isMarkedForDeletion)\n+        return;\n+    if (!m_connectionRefCount && !m_normalRefCount)\n+        return;\n+\n+    m_isMarkedForDeletion = false;\n+    context().unmarkForDeletion(*this);\n+}\n+\n@@ -647,0 +664,5 @@\n+    {\n+        Locker locker { context().graphLock() };\n+        const_cast<AudioNode*>(this)->unmarkNodeForDeletionIfNecessary();\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/AudioNode.cpp","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -209,0 +209,1 @@\n+    void unmarkNodeForDeletionIfNecessary();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/AudioNode.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -191,3 +191,2 @@\n-    \/\/ It is only safe to grab the lock if we are on the context thread. We might get called on\n-    \/\/ another thread if audio rendering started before the audio worklet got started.\n-    if (isContextThread())\n+    \/\/ It is only safe to grab the lock if we are on the context thread.\n+    RELEASE_ASSERT(isContextThread());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/AudioWorkletGlobalScope.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+        document->advancedPrivacyProtections(),\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/AudioWorkletMessagingProxy.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -711,0 +711,9 @@\n+void BaseAudioContext::unmarkForDeletion(AudioNode& node)\n+{\n+    ASSERT(isGraphOwner());\n+    ASSERT_WITH_MESSAGE(node.nodeType() != AudioNode::NodeTypeDestination, \"Destination node is owned by the BaseAudioContext\");\n+\n+    m_nodesToDelete.removeFirst(&node);\n+    m_nodesMarkedForDeletion.removeFirst(&node);\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/BaseAudioContext.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -164,0 +164,4 @@\n+    \/\/ In some cases, a node marked for deletion may get ref'd. We need to make sure we no\n+    \/\/ longer mark the node for deletion or it may get deleted while someone is holding a\n+    \/\/ Ref \/ RefPtr to it.\n+    void unmarkForDeletion(AudioNode&);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/BaseAudioContext.h","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -114,0 +114,2 @@\n+        if (!std::isfinite(overrideRect->width) || !std::isfinite(overrideRect->height) || !std::isfinite(overrideRect->x) || !std::isfinite(overrideRect->y))\n+            return Exception { ExceptionCode::TypeError, \"overrideRect is not valid\"_s };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webcodecs\/WebCodecsVideoFrameAlgorithms.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-String TextCodecLatin1::decode(const char* bytes, size_t length, bool, bool, bool&)\n+String TextCodecLatin1::decode(const char* bytes, size_t length, bool, bool, bool& sawException)\n@@ -105,0 +105,5 @@\n+    if (UNLIKELY(length > std::numeric_limits<unsigned>::max())) {\n+        ASSERT_NOT_REACHED();\n+        sawException = true;\n+        return emptyString();\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/PAL\/pal\/text\/TextCodecLatin1.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -304,1 +304,6 @@\n-    StringBuffer<LChar> buffer(m_partialSequenceSize + length);\n+    size_t bufferSize = length + m_partialSequenceSize;\n+    if (bufferSize > std::numeric_limits<unsigned>::max()) {\n+        sawError = true;\n+        return { };\n+    }\n+    StringBuffer<LChar> buffer(bufferSize);\n@@ -386,1 +391,1 @@\n-    StringBuffer<UChar> buffer16(m_partialSequenceSize + length);\n+    StringBuffer<UChar> buffer16(bufferSize);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/PAL\/pal\/text\/TextCodecUTF8.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    SingleThreadWeakPtr<Page> m_page;\n+    WeakPtr<Page> m_page;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Scripts\/SettingsTemplates\/InternalSettingsGenerated.h.erb","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,11 +92,4 @@\n-    LayoutRect rect;\n-    if (!m_optionElement)\n-        return rect;\n-\n-    HTMLSelectElement* listBoxParentNode = listBoxOptionParentNode();\n-    if (!listBoxParentNode)\n-        return rect;\n-\n-    RenderElement* listBoxRenderer = listBoxParentNode->renderer();\n-    if (!listBoxRenderer)\n-        return rect;\n+    auto* optionParent = listBoxOptionParentNode();\n+    CheckedPtr parentRenderer = optionParent ? dynamicDowncast<RenderListBox>(optionParent->renderer()) : nullptr;\n+    if (!parentRenderer)\n+        return { };\n@@ -104,1 +97,2 @@\n-    LayoutRect parentRect = listBoxRenderer->document().axObjectCache()->getOrCreate(listBoxRenderer)->boundingBoxRect();\n+    auto* cache = parentRenderer->document().axObjectCache();\n+    if (RefPtr axObject = cache ? cache->getOrCreate(parentRenderer.get()) : nullptr) {\n@@ -106,4 +100,6 @@\n-    if (index != -1)\n-        rect = downcast<RenderListBox>(*listBoxRenderer).itemBoundingBoxRect(parentRect.location(), index);\n-\n-    return rect;\n+        if (index != -1) {\n+            auto parentRect = axObject->boundingBoxRect();\n+            return parentRenderer->itemBoundingBoxRect(parentRect.location(), index);\n+        }\n+    }\n+    return { };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/accessibility\/AccessibilityListBoxOption.cpp","additions":12,"deletions":16,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2154,1 +2154,1 @@\n-AccessibilityObject* AccessibilityObject::anchorElementForNode(Node* node)\n+AccessibilityObject* AccessibilityObject::anchorElementForNode(Node& node)\n@@ -2156,11 +2156,2 @@\n-    RenderObject* obj = node->renderer();\n-    if (!obj)\n-        return nullptr;\n-\n-    RefPtr<AccessibilityObject> axObj = obj->document().axObjectCache()->getOrCreate(obj);\n-    Element* anchor = axObj->anchorElement();\n-    if (!anchor)\n-        return nullptr;\n-\n-    RenderObject* anchorRenderer = anchor->renderer();\n-    if (!anchorRenderer)\n+    CheckedPtr renderer = node.renderer();\n+    if (!renderer)\n@@ -2169,1 +2160,4 @@\n-    return anchorRenderer->document().axObjectCache()->getOrCreate(anchorRenderer);\n+    WeakPtr cache = renderer->document().axObjectCache();\n+    RefPtr axObject = cache ? cache->getOrCreate(renderer.get()) : nullptr;\n+    auto* anchor = axObject ? axObject->anchorElement() : nullptr;\n+    return anchor ? cache->getOrCreate(anchor->renderer()) : nullptr;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/accessibility\/AccessibilityObject.cpp","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -427,1 +427,1 @@\n-    static AccessibilityObject* anchorElementForNode(Node*);\n+    static AccessibilityObject* anchorElementForNode(Node&);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/accessibility\/AccessibilityObject.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    SingleThreadWeakPtr<Page> m_page;\n+    WeakPtr<Page> m_page;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/accessibility\/atspi\/AccessibilityRootAtspi.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -396,1 +396,4 @@\n-            for (const auto& unresolvedAppend : m_unresolvedPendingAppends) {\n+    \/\/ The process of resolving appends can add more IDs to m_unresolvedPendingAppends as we iterate over it, so\n+    \/\/ iterate over an exchanged map instead. Any late-appended IDs will get picked up in the next cycle.\n+    auto unresolvedPendingAppends = std::exchange(m_unresolvedPendingAppends, { });\n+    for (const auto& unresolvedAppend : unresolvedPendingAppends) {\n@@ -411,1 +414,0 @@\n-            m_unresolvedPendingAppends.clear();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/accessibility\/isolatedtree\/AXIsolatedTree.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -109,0 +109,1 @@\n+#include <wtf\/StackCheck.h>\n@@ -947,0 +948,4 @@\n+    bool isSafeToRecurse()\n+    {\n+        return m_stackCheck.isSafeToRecurse();\n+    }\n@@ -955,0 +960,1 @@\n+    StackCheck m_stackCheck;\n@@ -3653,0 +3659,2 @@\n+        if (!isSafeToRecurse())\n+            return false;\n@@ -3732,0 +3740,2 @@\n+        if (!isSafeToRecurse())\n+            return false;\n@@ -4479,1 +4489,2 @@\n-        fingerprints.reserveInitialCapacity(size);\n+        if (!fingerprints.tryReserveInitialCapacity(size))\n+            return JSValue();\n@@ -4755,0 +4766,2 @@\n+        if (!isSafeToRecurse())\n+            return JSValue();\n@@ -4881,1 +4894,3 @@\n-            if (length && (IntSize(width, height).area() * 4) != length) {\n+            if (length) {\n+                auto area = IntSize(width, height).area<RecordOverflow>() * 4;\n+                if (area.hasOverflowed() || area.value() != length) {\n@@ -4886,0 +4901,1 @@\n+            }\n@@ -4950,1 +4966,2 @@\n-            ASSERT(reFlags.has_value());\n+            if (!reFlags.has_value())\n+                return JSValue();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/SerializedScriptValue.cpp","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -372,0 +372,4 @@\n+\n+    if (!value)\n+        return CSSPrimitiveValue::create(CSSValueNone);\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/ComputedStyleExtractor.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,0 +65,5 @@\n+#if COMPILER(GCC) && CPU(ARM64)\n+    \/\/ FIXME: Workaround for GCC bug https:\/\/gcc.gnu.org\/bugzilla\/show_bug.cgi?id=115033\n+    \/\/ that is related to https:\/\/gcc.gnu.org\/bugzilla\/show_bug.cgi?id=115135 as well.\n+    volatile\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/FontFace.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1171,5 +1171,4 @@\n-    \/\/ For the rows we need to return early if the value of grid-template-rows is none because otherwise\n-    \/\/ we will iteratively build up that portion of the shorthand and check to see if the value is a valid\n-    \/\/ <track-size> at the appropriate position in the shorthand. For the columns we must check the entire\n-    \/\/ value of grid-template-columns beforehand because we append the value as a whole to the shorthand\n-    if (isLonghandValueNone(rowsIndex) || (!isLonghandValueNone(columnsIndex) && !isValidExplicitTrackList(longhandValue(columnsIndex))))\n+    Ref rowTrackSizes = longhandValue(rowsIndex);\n+\n+    \/\/ Make sure the longhands can be expressed in this version of the shorthand.\n+    if (!rowTrackSizes->isValueList() || (!isLonghandValueNone(columnsIndex) && !isValidExplicitTrackList(longhandValue(columnsIndex))))\n@@ -1180,1 +1179,1 @@\n-    for (auto& currentValue : downcast<CSSValueList>(longhandValue(rowsIndex))) {\n+    for (auto& currentValue : downcast<CSSValueList>(rowTrackSizes).get()) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/ShorthandSerializer.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -10357,2 +10357,1 @@\n-    if (RefPtr loader = topDocument().loader()) {\n-        if (loader->advancedPrivacyProtections().contains(AdvancedPrivacyProtections::FingerprintingProtections))\n+    if (advancedPrivacyProtections().contains(AdvancedPrivacyProtections::FingerprintingProtections))\n@@ -10360,1 +10359,0 @@\n-    }\n@@ -10364,0 +10362,7 @@\n+OptionSet<AdvancedPrivacyProtections> Document::advancedPrivacyProtections() const\n+{\n+    if (RefPtr loader = topDocument().loader())\n+        return loader->advancedPrivacyProtections();\n+    return { };\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Document.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1391,0 +1391,2 @@\n+    OptionSet<AdvancedPrivacyProtections> advancedPrivacyProtections() const final;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Document.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1050,1 +1050,1 @@\n-static std::optional<std::pair<CheckedRef<RenderElement>, LayoutRect>> listBoxElementScrollIntoView(const Element& element)\n+static std::optional<std::pair<SingleThreadWeakPtr<RenderElement>, LayoutRect>> listBoxElementScrollIntoView(const Element& element)\n@@ -1077,1 +1077,1 @@\n-    return std::pair<CheckedRef<RenderElement>, LayoutRect> { renderListBox.releaseNonNull(), itemLocalRect };\n+    return std::pair<SingleThreadWeakPtr<RenderElement>, LayoutRect> { renderListBox.releaseNonNull(), itemLocalRect };\n@@ -1087,1 +1087,1 @@\n-    CheckedPtr<RenderElement> renderer;\n+    SingleThreadWeakPtr<RenderElement> renderer;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Element.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"AdvancedPrivacyProtections.h\"\n@@ -73,0 +74,1 @@\n+    OptionSet<AdvancedPrivacyProtections> advancedPrivacyProtections() const final { return { }; }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/EmptyScriptExecutionContext.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-    ASSERT(m_parserInserted == ParserInserted::No);\n+    if (m_parserInserted == ParserInserted::No)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/ScriptElement.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+#include <wtf\/OptionSet.h>\n@@ -87,0 +88,1 @@\n+enum class AdvancedPrivacyProtections : uint16_t;\n@@ -144,0 +146,1 @@\n+    virtual OptionSet<AdvancedPrivacyProtections> advancedPrivacyProtections() const = 0;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/ScriptExecutionContext.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -106,34 +106,0 @@\n-#if CHECKED_POINTER_DEBUG\n-void TreeScope::registerCheckedPtr(const void* pointer) const\n-{\n-    if (auto* document = dynamicDowncast<Document>(m_rootNode))\n-        document->registerCheckedPtr(pointer);\n-    else\n-        checkedDowncast<ShadowRoot>(m_rootNode).registerCheckedPtr(pointer);\n-}\n-\n-void TreeScope::copyCheckedPtr(const void* source, const void* destination) const\n-{\n-    if (auto* document = dynamicDowncast<Document>(m_rootNode))\n-        document->copyCheckedPtr(source, destination);\n-    else\n-        checkedDowncast<ShadowRoot>(m_rootNode).copyCheckedPtr(source, destination);\n-}\n-\n-void TreeScope::moveCheckedPtr(const void* source, const void* destination) const\n-{\n-    if (auto* document = dynamicDowncast<Document>(m_rootNode))\n-        document->moveCheckedPtr(source, destination);\n-    else\n-        checkedDowncast<ShadowRoot>(m_rootNode).moveCheckedPtr(source, destination);\n-}\n-\n-void TreeScope::unregisterCheckedPtr(const void* pointer) const\n-{\n-    if (auto* document = dynamicDowncast<Document>(m_rootNode))\n-        document->unregisterCheckedPtr(pointer);\n-    else\n-        checkedDowncast<ShadowRoot>(m_rootNode).unregisterCheckedPtr(pointer);\n-}\n-#endif \/\/ CHECKED_POINTER_DEBUG\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/TreeScope.cpp","additions":0,"deletions":34,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-    SingleThreadWeakHashMap<Page, MonotonicTime> m_pagesWithRenderingOpportunity;\n+    WeakHashMap<Page, MonotonicTime> m_pagesWithRenderingOpportunity;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/WindowEventLoop.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -290,1 +290,2 @@\n-    for (auto& command : m_commands)\n+    for (size_t i = 0; i < m_commands.size(); ++i) {\n+        RefPtr command = m_commands[i].get();\n@@ -292,0 +293,1 @@\n+    }\n@@ -328,1 +330,2 @@\n-    for (auto& command : m_commands)\n+    for (size_t i = 0; i < m_commands.size(); ++i) {\n+        RefPtr command = m_commands[i].get();\n@@ -330,0 +333,1 @@\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/editing\/CompositeEditCommand.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1281,0 +1281,1 @@\n+    TypingCommand::closeTyping(protectedDocument());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/editing\/Editor.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-    SingleThreadWeakRef<Page> m_page;\n+    WeakRef<Page> m_page;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/history\/BackForwardController.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-    SingleThreadWeakRef<Page> m_page;\n+    WeakRef<Page> m_page;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/history\/CachedPage.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-    SingleThreadWeakRef<Page> m_page;\n+    WeakRef<Page> m_page;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/history\/CachedPage.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,2 +58,1 @@\n-\n-HistoryItem::HistoryItem(Client& client, const String& urlString, std::optional<BackForwardItemIdentifier> identifier)\n+HistoryItem::HistoryItem(Client& client, const String& urlString, const String& title, const String& alternateTitle, std::optional<BackForwardItemIdentifier> identifier)\n@@ -62,0 +61,2 @@\n+    , m_title(title)\n+    , m_displayTitle(alternateTitle)\n@@ -85,0 +86,2 @@\n+    , m_title(item.m_title)\n+    , m_displayTitle(item.m_displayTitle)\n@@ -119,0 +122,2 @@\n+    m_title = String();\n+    m_displayTitle = String();\n@@ -146,0 +151,10 @@\n+const String& HistoryItem::title() const\n+{\n+    return m_title;\n+}\n+\n+const String& HistoryItem::alternateTitle() const\n+{\n+    return m_displayTitle;\n+}\n+\n@@ -187,0 +202,6 @@\n+void HistoryItem::setAlternateTitle(const String& alternateTitle)\n+{\n+    m_displayTitle = alternateTitle;\n+    notifyChanged();\n+}\n+\n@@ -212,0 +233,6 @@\n+void HistoryItem::setTitle(const String& title)\n+{\n+    m_title = title;\n+    notifyChanged();\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/history\/HistoryItem.cpp","additions":29,"deletions":2,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-    static Ref<HistoryItem> create(Client& client, const String& urlString = { }, std::optional<BackForwardItemIdentifier> identifier = { })\n+    static Ref<HistoryItem> create(Client& client, const String& urlString = { }, const String& title = { }, const String& alternateTitle = { }, std::optional<BackForwardItemIdentifier> identifier = { })\n@@ -81,1 +81,1 @@\n-        return adoptRef(*new HistoryItem(client, urlString, identifier));\n+        return adoptRef(*new HistoryItem(client, urlString, title, alternateTitle, identifier));\n@@ -95,0 +95,1 @@\n+    WEBCORE_EXPORT const String& title() const;\n@@ -99,0 +100,2 @@\n+    WEBCORE_EXPORT void setAlternateTitle(const String&);\n+    WEBCORE_EXPORT const String& alternateTitle() const;\n@@ -133,0 +136,1 @@\n+    WEBCORE_EXPORT void setTitle(const String&);\n@@ -222,1 +226,1 @@\n-    WEBCORE_EXPORT HistoryItem(Client&, const String& urlString, std::optional<BackForwardItemIdentifier>);\n+    WEBCORE_EXPORT HistoryItem(Client&, const String& urlString, const String& title, const String& alternateTitle, std::optional<BackForwardItemIdentifier>);\n@@ -237,0 +241,2 @@\n+    String m_title;\n+    String m_displayTitle;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/history\/HistoryItem.h","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3345,0 +3345,3 @@\n+\n+    updateSleepDisabling();\n+\n@@ -5091,0 +5094,3 @@\n+        if (isContextStopped())\n+            return;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLMediaElement.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -171,3 +171,2 @@\n-    callOnMainThread([this, protectedThis, validationAnchor] {\n-        updateVisibleValidationMessage(validationAnchor);\n-    });\n+    if (RefPtr page = validationAnchor->document().page())\n+        page->scheduleValidationMessageUpdate(*this, validationAnchor);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/ValidatedFormListedElement.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -56,8 +56,8 @@\n-        GCGLfloat color[4];\n-        GCGLenum equationRGB;\n-        GCGLenum equationAlpha;\n-        GCGLenum srcRGB;\n-        GCGLenum dstRGB;\n-        GCGLenum srcAlpha;\n-        GCGLenum dstAlpha;\n-        GCGLboolean enabled;\n+        GCGLfloat color[4] { 0, 0, 0, 0 };\n+        GCGLenum equationRGB { GraphicsContextGL::NONE };\n+        GCGLenum equationAlpha { GraphicsContextGL::NONE };\n+        GCGLenum srcRGB { GraphicsContextGL::ONE };\n+        GCGLenum dstRGB { GraphicsContextGL::ZERO };\n+        GCGLenum srcAlpha { GraphicsContextGL::ONE };\n+        GCGLenum dstAlpha { GraphicsContextGL::ZERO };\n+        GCGLboolean enabled { false };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/canvas\/WebGLUtilities.h","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-    SingleThreadWeakPtr<Page> m_frontendPage;\n+    WeakPtr<Page> m_frontendPage;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/inspector\/InspectorFrontendAPIDispatcher.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-    SingleThreadWeakPtr<Page> m_frontendPage;\n+    WeakPtr<Page> m_frontendPage;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/inspector\/InspectorFrontendClientLocal.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-    SingleThreadWeakPtr<Page> m_frontendPage;\n+    WeakPtr<Page> m_frontendPage;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/inspector\/InspectorFrontendHost.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -204,0 +204,3 @@\n+        std::optional<Vector<LayoutUnit>> balancedLineWidthsForChunk;\n+\n+        if (rangeToBalance.startIndex() < rangeToBalance.endIndex()) {\n@@ -209,1 +212,0 @@\n-        std::optional<Vector<LayoutUnit>> balancedLineWidthsForChunk;\n@@ -214,0 +216,1 @@\n+        }\n@@ -231,0 +234,2 @@\n+    ASSERT(range.startIndex() < range.endIndex());\n+\n@@ -332,0 +337,2 @@\n+    ASSERT(range.startIndex() < range.endIndex());\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/layout\/formattingContexts\/inline\/InlineContentBalancer.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -162,1 +162,2 @@\n-        ASSERT(!displayBox.isRootInlineBox());\n+        if (displayBox.isRootInlineBox())\n+            return nullptr;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/layout\/formattingContexts\/inline\/invalidation\/InlineInvalidation.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -296,1 +296,1 @@\n-    DOMPasteAccessResponse requestDOMPasteAccess(DOMPasteAccessCategory, const String&) final { return DOMPasteAccessResponse::DeniedForGesture; }\n+    DOMPasteAccessResponse requestDOMPasteAccess(DOMPasteAccessCategory, FrameIdentifier, const String&) final { return DOMPasteAccessResponse::DeniedForGesture; }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/EmptyClients.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -251,1 +251,1 @@\n-    SingleThreadWeakPtr<Page> m_page;\n+    WeakPtr<Page> m_page;\n@@ -4368,0 +4368,2 @@\n+        \/\/ Must update the entries in the back-forward list too.\n+        history().setCurrentItemTitle(loader->title());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/FrameLoader.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -638,0 +638,7 @@\n+void HistoryController::setCurrentItemTitle(const StringWithDirection& title)\n+{\n+    \/\/ FIXME: This ignores the title's direction.\n+    if (RefPtr currentItem = m_currentItem)\n+        currentItem->setTitle(title.string);\n+}\n+\n@@ -689,0 +696,2 @@\n+    StringWithDirection title = documentLoader->title();\n+\n@@ -691,0 +700,2 @@\n+    \/\/ FIXME: Should store the title direction as well.\n+    item.setTitle(title.string);\n@@ -884,1 +895,1 @@\n-void HistoryController::pushState(RefPtr<SerializedScriptValue>&& stateObject, const String& urlString)\n+void HistoryController::pushState(RefPtr<SerializedScriptValue>&& stateObject, const String& title, const String& urlString)\n@@ -912,0 +923,1 @@\n+    currentItem->setTitle(title);\n@@ -927,1 +939,1 @@\n-void HistoryController::replaceState(RefPtr<SerializedScriptValue>&& stateObject, const String& urlString)\n+void HistoryController::replaceState(RefPtr<SerializedScriptValue>&& stateObject, const String& title, const String& urlString)\n@@ -937,0 +949,1 @@\n+    currentItem->setTitle(title);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/HistoryController.cpp","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -79,0 +79,1 @@\n+    void setCurrentItemTitle(const StringWithDirection&);\n@@ -90,2 +91,2 @@\n-    void pushState(RefPtr<SerializedScriptValue>&&, const String& url);\n-    void replaceState(RefPtr<SerializedScriptValue>&&, const String& url);\n+    void pushState(RefPtr<SerializedScriptValue>&&, const String& title, const String& url);\n+    void replaceState(RefPtr<SerializedScriptValue>&&, const String& title, const String& url);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/HistoryController.h","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-    SingleThreadWeakRef<Page> m_page;\n+    WeakRef<Page> m_page;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/ProgressTracker.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"FrameIdentifier.h\"\n@@ -113,1 +114,1 @@\n-    virtual DOMPasteAccessResponse requestDOMPasteAccess(DOMPasteAccessCategory, const String& originIdentifier) = 0;\n+    virtual DOMPasteAccessResponse requestDOMPasteAccess(DOMPasteAccessCategory, FrameIdentifier, const String& originIdentifier) = 0;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/EditorClient.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4564,1 +4564,4 @@\n-    if (auto animator = m_frame->page()->currentKeyboardScrollingAnimator())\n+    RefPtr page = m_frame->page();\n+    if (!page)\n+        return;\n+    if (auto animator = page->currentKeyboardScrollingAnimator())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/EventHandler.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-    SingleThreadWeakPtr<Page> m_page;\n+    WeakPtr<Page> m_page;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/Frame.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-ExceptionOr<void> History::stateObjectAdded(RefPtr<SerializedScriptValue>&& data, const String& urlString, StateObjectType stateObjectType)\n+ExceptionOr<void> History::stateObjectAdded(RefPtr<SerializedScriptValue>&& data, const String& title, const String& urlString, StateObjectType stateObjectType)\n@@ -269,0 +269,3 @@\n+    Checked<unsigned> titleSize = title.length();\n+    titleSize *= 2;\n+\n@@ -272,1 +275,2 @@\n-    Checked<uint64_t> payloadSize = urlSize;\n+    Checked<uint64_t> payloadSize = titleSize;\n+    payloadSize += urlSize;\n@@ -296,1 +300,1 @@\n-        frame->loader().history().pushState(WTFMove(data), fullURL.string());\n+        frame->loader().history().pushState(WTFMove(data), title, fullURL.string());\n@@ -299,1 +303,1 @@\n-        frame->loader().history().replaceState(WTFMove(data), fullURL.string());\n+        frame->loader().history().replaceState(WTFMove(data), title, fullURL.string());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/History.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -68,2 +68,2 @@\n-    ExceptionOr<void> pushState(RefPtr<SerializedScriptValue>&& data, const String&, const String& urlString);\n-    ExceptionOr<void> replaceState(RefPtr<SerializedScriptValue>&& data, const String&, const String& urlString);\n+    ExceptionOr<void> pushState(RefPtr<SerializedScriptValue>&& data, const String& title, const String& urlString);\n+    ExceptionOr<void> replaceState(RefPtr<SerializedScriptValue>&& data, const String& title, const String& urlString);\n@@ -75,1 +75,1 @@\n-    ExceptionOr<void> stateObjectAdded(RefPtr<SerializedScriptValue>&&, const String& url, StateObjectType);\n+    ExceptionOr<void> stateObjectAdded(RefPtr<SerializedScriptValue>&&, const String& title, const String& url, StateObjectType);\n@@ -95,1 +95,1 @@\n-inline ExceptionOr<void> History::pushState(RefPtr<SerializedScriptValue>&& data, const String&, const String& urlString)\n+inline ExceptionOr<void> History::pushState(RefPtr<SerializedScriptValue>&& data, const String& title, const String& urlString)\n@@ -97,1 +97,1 @@\n-    return stateObjectAdded(WTFMove(data), urlString, StateObjectType::Push);\n+    return stateObjectAdded(WTFMove(data), title, urlString, StateObjectType::Push);\n@@ -100,1 +100,1 @@\n-inline ExceptionOr<void> History::replaceState(RefPtr<SerializedScriptValue>&& data, const String&, const String& urlString)\n+inline ExceptionOr<void> History::replaceState(RefPtr<SerializedScriptValue>&& data, const String& title, const String& urlString)\n@@ -102,1 +102,1 @@\n-    return stateObjectAdded(WTFMove(data), urlString, StateObjectType::Replace);\n+    return stateObjectAdded(WTFMove(data), title, urlString, StateObjectType::Replace);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/History.h","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -39,2 +39,3 @@\n-    undefined pushState(SerializedScriptValue data, DOMString unused, optional USVString? url = null);\n-    undefined replaceState(SerializedScriptValue data, DOMString unused, optional USVString? url = null);\n+    \/\/ FIXME: title should not be nullable as per the HTML specification.\n+    undefined pushState(SerializedScriptValue data, DOMString? title, optional USVString? url = null);\n+    undefined replaceState(SerializedScriptValue data, DOMString? title, optional USVString? url = null);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/History.idl","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-    SingleThreadWeakPtr<Page> m_page;\n+    WeakPtr<Page> m_page;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/ImageAnalysisQueue.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-    SingleThreadWeakPtr<Page> m_page;\n+    WeakPtr<Page> m_page;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/ImageOverlayController.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -637,1 +637,1 @@\n-        auto response = client->requestDOMPasteAccess(pasteAccessCategory, m_doc->originIdentifierForPasteboard());\n+        auto response = client->requestDOMPasteAccess(pasteAccessCategory, frameID(), m_doc->originIdentifierForPasteboard());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/LocalFrame.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-    CheckedRef<EventHandler> checkedEventHandler();\n+    WEBCORE_EXPORT CheckedRef<EventHandler> checkedEventHandler();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/LocalFrame.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -178,1 +178,1 @@\n-    \/\/ is vertical, then the direction of the verticality dictates the choice.\n+    \/\/ is vertical, then the block flow direction dictates the choice.\n@@ -186,1 +186,1 @@\n-    \/\/ is horizontal, then the direction of the horizontality dictates the choice. If the WritingMode\n+    \/\/ is horizontal, then the block flow direction dictates the choice. If the WritingMode\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/LocalFrameView.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-    SingleThreadWeakPtr<Page> m_page;\n+    WeakPtr<Page> m_page;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/OpportunisticTaskScheduler.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#include \"AdvancedPrivacyProtections.h\"\n@@ -215,1 +216,1 @@\n-static HashSet<SingleThreadWeakRef<Page>>& allPages()\n+static HashSet<WeakRef<Page>>& allPages()\n@@ -217,1 +218,1 @@\n-    static NeverDestroyed<HashSet<SingleThreadWeakRef<Page>>> set;\n+    static NeverDestroyed<HashSet<WeakRef<Page>>> set;\n@@ -247,0 +248,13 @@\n+void Page::scheduleValidationMessageUpdate(ValidatedFormListedElement& element, HTMLElement& anchor)\n+{\n+    m_validationMessageUpdates.append({ element, anchor });\n+}\n+\n+void Page::updateValidationMessages()\n+{\n+    for (auto& item : std::exchange(m_validationMessageUpdates, { })) {\n+        if (RefPtr anchor = item.second.get())\n+            item.first->updateVisibleValidationMessage(*anchor);\n+    }\n+}\n+\n@@ -1989,0 +2003,2 @@\n+    updateValidationMessages();\n+\n@@ -4446,1 +4462,1 @@\n-void Page::setupForRemoteWorker(const URL& scriptURL, const SecurityOriginData& topOrigin, const String& referrerPolicy)\n+void Page::setupForRemoteWorker(const URL& scriptURL, const SecurityOriginData& topOrigin, const String& referrerPolicy, OptionSet<AdvancedPrivacyProtections> advancedPrivacyProtections)\n@@ -4462,0 +4478,3 @@\n+    if (RefPtr documentLoader = localMainFrame->checkedLoader()->documentLoader())\n+        documentLoader->setAdvancedPrivacyProtections(advancedPrivacyProtections);\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/Page.cpp","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -167,0 +167,1 @@\n+class ValidatedFormListedElement;\n@@ -183,0 +184,1 @@\n+enum class AdvancedPrivacyProtections : uint16_t;\n@@ -283,1 +285,1 @@\n-class Page : public RefCounted<Page>, public Supplementable<Page>, public CanMakeSingleThreadWeakPtr<Page> {\n+class Page : public RefCounted<Page>, public Supplementable<Page>, public CanMakeWeakPtr<Page> {\n@@ -295,1 +297,1 @@\n-    WEBCORE_EXPORT void setupForRemoteWorker(const URL& scriptURL, const SecurityOriginData& topOrigin, const String& referrerPolicy);\n+    WEBCORE_EXPORT void setupForRemoteWorker(const URL& scriptURL, const SecurityOriginData& topOrigin, const String& referrerPolicy, OptionSet<AdvancedPrivacyProtections>);\n@@ -399,0 +401,1 @@\n+    void scheduleValidationMessageUpdate(ValidatedFormListedElement&, HTMLElement&);\n@@ -1096,0 +1099,2 @@\n+    void updateValidationMessages();\n+\n@@ -1179,0 +1184,1 @@\n+    Vector<std::pair<Ref<ValidatedFormListedElement>, WeakPtr<HTMLElement, WeakPtrImplWithEventTargetData>>> m_validationMessageUpdates;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/Page.h","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    const SingleThreadWeakHashSet<Page>& pages() const { return m_pages; }\n+    const WeakHashSet<Page>& pages() const { return m_pages; }\n@@ -64,1 +64,1 @@\n-    SingleThreadWeakHashSet<Page> m_pages;\n+    WeakHashSet<Page> m_pages;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/PageGroup.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-    SingleThreadWeakPtr<Page> m_page;\n+    WeakPtr<Page> m_page;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/PageOverlay.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-    SingleThreadWeakPtr<Page> m_page;\n+    WeakPtr<Page> m_page;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/SettingsBase.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-    SingleThreadWeakHashSet<Page> m_pages;\n+    WeakHashSet<Page> m_pages;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/UserContentProvider.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    SingleThreadWeakHashSet<Page> m_pages;\n+    WeakHashSet<Page> m_pages;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/VisitedLinkStore.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-    SingleThreadWeakPtr<Page> m_page; \/\/ FIXME: ideally this would be a WeakRef but it gets nulled on async teardown.\n+    WeakPtr<Page> m_page; \/\/ FIXME: ideally this would be a WeakRef but it gets nulled on async teardown.\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/scrolling\/ScrollingCoordinator.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -198,0 +198,4 @@\n+    if (size() > std::numeric_limits<unsigned>::max()) {\n+        WTFLogAlways(\"SharedBuffer::tryCreateArrayBuffer Unable to create buffer. Requested size is too large (%zu)\\n\", size());\n+        return nullptr;\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/SharedBuffer.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    , m_multiChannelBus(AudioBus::create(numberOfChannels, requestFrames, false))\n+    , m_multiChannelBus(AudioBus::create(numberOfChannels, requestFrames))\n@@ -47,11 +47,0 @@\n-    \/\/ As an optimization, we will use the buffer passed to provideInputForChannel() as channel memory for the first channel so we\n-    \/\/ only need to allocate memory if there is more than one channel.\n-    if (numberOfChannels > 1) {\n-        m_channelsMemory = Vector<std::unique_ptr<AudioFloatArray>>(numberOfChannels - 1, [&](size_t i) {\n-            size_t channelIndex = i + 1;\n-            auto floatArray = makeUnique<AudioFloatArray>(requestFrames);\n-            m_multiChannelBus->setChannelMemory(channelIndex, floatArray->data(), requestFrames);\n-            return floatArray;\n-        });\n-        }\n-\n@@ -96,1 +85,1 @@\n-    ASSERT(framesToProcess == m_multiChannelBus->length());\n+    ASSERT(framesToProcess <= m_multiChannelBus->length());\n@@ -98,5 +87,1 @@\n-    if (!channelIndex) {\n-        \/\/ As an optimization, we use the provided buffer as memory for the first channel in the AudioBus. This avoids\n-        \/\/ having to memcpy() for the first channel.\n-        RELEASE_ASSERT(framesToProcess <= buffer.size());\n-        m_multiChannelBus->setChannelMemory(0, buffer.data(), framesToProcess);\n+    if (!channelIndex)\n@@ -104,2 +89,0 @@\n-        return;\n-    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/audio\/MultiChannelResampler.cpp","additions":3,"deletions":20,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"AudioArray.h\"\n@@ -65,1 +64,0 @@\n-    Vector<std::unique_ptr<AudioFloatArray>> m_channelsMemory;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/audio\/MultiChannelResampler.h","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -115,0 +115,5 @@\n+PlatformMediaSessionManager::~PlatformMediaSessionManager()\n+{\n+    m_taskGroup.cancel();\n+}\n+\n@@ -472,1 +477,1 @@\n-    callOnMainThread([this] {\n+    enqueueTaskOnMainThread([this] {\n@@ -636,1 +641,1 @@\n-    callOnMainThread([this] {\n+    enqueueTaskOnMainThread([this] {\n@@ -826,0 +831,7 @@\n+void PlatformMediaSessionManager::enqueueTaskOnMainThread(Function<void()>&& task)\n+{\n+    callOnMainThread(CancellableTask(m_taskGroup, [task = WTFMove(task)] () mutable {\n+        task();\n+    }));\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/audio\/PlatformMediaSessionManager.cpp","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include <wtf\/CancellableTask.h>\n@@ -83,1 +84,1 @@\n-    virtual ~PlatformMediaSessionManager() = default;\n+    virtual ~PlatformMediaSessionManager();\n@@ -217,0 +218,2 @@\n+    void enqueueTaskOnMainThread(Function<void()>&&);\n+\n@@ -243,0 +246,2 @@\n+    TaskCancellationGroup m_taskGroup;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/audio\/PlatformMediaSessionManager.h","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -545,1 +545,1 @@\n-    if (data.lightSource->type() == LS_POINT) {\n+    if (data.lightSource->type() == LightType::LS_POINT) {\n@@ -552,1 +552,1 @@\n-    } else if (data.lightSource->type() == LS_SPOT) {\n+    } else if (data.lightSource->type() == LightType::LS_SPOT) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/cpu\/arm\/filters\/FELightingNeonParallelApplier.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,5 +71,0 @@\n-#if CPU(ARM_NEON) && CPU(ARM_TRADITIONAL) && COMPILER(GCC_COMPATIBLE)\n-    static int getPowerCoefficients(float exponent);\n-    inline void platformApplyNeon(const LightingData&, const LightSource::PaintingData&);\n-#endif\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/filters\/FELighting.h","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -917,3 +917,2 @@\n-        layerState.imageID = imageID;\n-        layerState.update.isVisible = transformedVisibleRect().intersects(IntRect(contentsRect()));\n-        if (layerState.update.isVisible && (!nativeImageID || layerState.update.nativeImageID != nativeImageID)) {\n+        bool nativeImageChanged = layerState.update.nativeImageID != nativeImageID;\n+        if (nativeImageChanged)\n@@ -921,0 +920,6 @@\n+\n+        bool wasVisible = layerState.update.isVisible;\n+        layerState.update.isVisible = transformedVisibleRect().intersects(IntRect(contentsRect()));\n+\n+        \/\/ Update the image contents only when the image layer is visible and it was previously hidden or the native image changed.\n+        if (layerState.update.isVisible && (!wasVisible || nativeImageChanged)) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/texmap\/coordinated\/CoordinatedGraphicsLayer.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -140,0 +140,1 @@\n+        unregisterPipeline(m_pipeline);\n@@ -300,1 +301,0 @@\n-    bool onlyTrack = (selectedTracks.audioTrack && !selectedTracks.videoTrack) || (selectedTracks.videoTrack && !selectedTracks.audioTrack);\n@@ -303,1 +303,1 @@\n-        webkitMediaStreamSrcAddTrack(src, selectedTracks.audioTrack, onlyTrack);\n+        webkitMediaStreamSrcAddTrack(src, selectedTracks.audioTrack);\n@@ -305,1 +305,1 @@\n-        webkitMediaStreamSrcAddTrack(src, selectedTracks.videoTrack, onlyTrack);\n+        webkitMediaStreamSrcAddTrack(src, selectedTracks.videoTrack);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/mediarecorder\/MediaRecorderPrivateGStreamer.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+#include <wtf\/text\/WTFString.h>\n+\n@@ -39,0 +41,2 @@\n+String convertEnumerationToString(RTCRtpTransceiverDirection); \/\/ in JSRTCRtpTransceiverDirection.h\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/mediastream\/RTCRtpTransceiverDirection.h","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-            const LChar* currentCharacter8;\n+            const LChar* currentCharacter8 { nullptr };\n@@ -103,1 +103,1 @@\n-        bool is8Bit;\n+        bool is8Bit { true };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/text\/SegmentedString.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#define MAX_EXTENSION_COUNT 10\n@@ -72,1 +73,1 @@\n-Vector<String> MIMETypeRegistry::extensionsForMIMEType(const String&)\n+Vector<String> MIMETypeRegistry::extensionsForMIMEType(const String& mimeType)\n@@ -74,1 +75,1 @@\n-    ASSERT_NOT_IMPLEMENTED_YET();\n+    if (mimeType.isEmpty())\n@@ -76,0 +77,9 @@\n+\n+    Vector<String> returnValue;\n+    char* extensions[MAX_EXTENSION_COUNT];\n+    int n = xdg_mime_get_simple_globs(mimeType.utf8().data(), extensions, MAX_EXTENSION_COUNT);\n+    for (int i = 0; i < n; ++i) {\n+        returnValue.append(String::fromUTF8(extensions[i]));\n+        free(extensions[i]);\n+    }\n+    return returnValue;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/xdg\/MIMETypeRegistryXdg.cpp","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    SingleThreadWeakHashSet<Page> m_pages;\n+    WeakHashSet<Page> m_pages;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/plugins\/PluginInfoProvider.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -241,1 +241,1 @@\n-    auto color = style.visitedDependentColor(CSSPropertyBackgroundColor);\n+    auto color = style.visitedDependentColor(CSSPropertyBackgroundColor, m_paintInfo.paintBehavior);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/InlineBoxPainter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2169,1 +2169,1 @@\n-    if (isComposited())\n+    if (isComposited() || paintsIntoProvidedBacking())\n@@ -2173,1 +2173,1 @@\n-        if (curr->isComposited())\n+        if (curr->isComposited() || curr->paintsIntoProvidedBacking())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderLayer.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3857,2 +3857,2 @@\n-        auto scrollingNodeID = overflowLayer.backing()->scrollingNodeIDForRole(ScrollCoordinationRole::Scrolling);\n-        if (scrollingNodeID)\n+        if (overflowLayer.isComposited()) {\n+            if (auto scrollingNodeID = overflowLayer.backing()->scrollingNodeIDForRole(ScrollCoordinationRole::Scrolling)) {\n@@ -3860,2 +3860,4 @@\n-        else\n-            LOG(Scrolling, \"Layer %p doesn't have scrolling node ID yet\", &overflowLayer);\n+                return;\n+            }\n+        }\n+        LOG(Scrolling, \"Layer %p isn't composited or doesn't have scrolling node ID yet\", &overflowLayer);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderLayerCompositor.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -487,1 +487,1 @@\n-    auto itemStyle = listItemElement->computedStyle();\n+    auto itemStyle = listItemElement->computedStyleForEditability();\n@@ -547,1 +547,1 @@\n-    auto itemStyle = listItemElement->computedStyle();\n+    auto itemStyle = listItemElement->computedStyleForEditability();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderListBox.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -219,1 +219,1 @@\n-            if (auto* optionStyle = option->computedStyle())\n+            if (auto* optionStyle = option->computedStyleForEditability())\n@@ -268,1 +268,1 @@\n-            auto* style = option->computedStyle();\n+            auto* style = option->computedStyleForEditability();\n@@ -518,3 +518,6 @@\n-    auto& style = *element->computedStyle();\n-    return PopupMenuStyle(style.visitedDependentColorWithColorFilter(CSSPropertyColor), itemBackgroundColor, style.fontCascade(), style.visibility() == Visibility::Visible,\n-        style.display() == DisplayType::None, true, style.textIndent(), style.direction(), isOverride(style.unicodeBidi()),\n+    auto* style = element->computedStyleForEditability();\n+    if (!style)\n+        return menuStyle();\n+\n+    return PopupMenuStyle(style->visitedDependentColorWithColorFilter(CSSPropertyColor), itemBackgroundColor, style->fontCascade(), style->visibility() == Visibility::Visible,\n+        style->display() == DisplayType::None, true, style->textIndent(), style->direction(), isOverride(style->unicodeBidi()),\n@@ -534,1 +537,4 @@\n-    Color backgroundColor = element->computedStyle()->visitedDependentColorWithColorFilter(CSSPropertyBackgroundColor);\n+    Color backgroundColor;\n+    if (auto* style = element->computedStyleForEditability())\n+        backgroundColor = style->visitedDependentColorWithColorFilter(CSSPropertyBackgroundColor);\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderMenuList.cpp","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -571,0 +571,1 @@\n+        float maxExtent = gradientAdapter.maxExtent(maxLengthForRepeat, gradientLength);\n@@ -574,0 +575,2 @@\n+        if (maxExtent > 1)\n+            gradientRange \/= maxExtent;\n@@ -590,1 +593,0 @@\n-            float maxExtent = gradientAdapter.maxExtent(maxLengthForRepeat, gradientLength);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/style\/StyleGradientImage.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -313,0 +313,5 @@\n+    if (m_inLayoutForDifferentRoot)\n+        return;\n+\n+    SetForScope inLayoutForDifferentRoot(m_inLayoutForDifferentRoot, true);\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/svg\/SVGResources.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -147,0 +147,1 @@\n+    bool m_inLayoutForDifferentRoot { false };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/svg\/SVGResources.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -855,1 +855,1 @@\n-    auto& destroyRoot = destroyRootIncludingAnonymous();\n+    WeakPtr destroyRoot = destroyRootIncludingAnonymous();\n@@ -861,1 +861,1 @@\n-        auto* destroyRootElement = dynamicDowncast<RenderElement>(destroyRoot);\n+        WeakPtr destroyRootElement = dynamicDowncast<RenderElement>(destroyRoot.get());\n@@ -868,1 +868,1 @@\n-        if (CheckedPtr box = dynamicDowncast<RenderBox>(destroyRoot); box && box->isFloatingOrOutOfFlowPositioned())\n+        if (CheckedPtr box = dynamicDowncast<RenderBox>(destroyRoot.get()); box && box->isFloatingOrOutOfFlowPositioned())\n@@ -875,1 +875,1 @@\n-        if (CheckedPtr cell = dynamicDowncast<RenderTableCell>(destroyRoot)) {\n+        if (CheckedPtr cell = dynamicDowncast<RenderTableCell>(destroyRoot.get())) {\n@@ -880,1 +880,1 @@\n-        if (CheckedPtr row = dynamicDowncast<RenderTableRow>(destroyRoot)) {\n+        if (CheckedPtr row = dynamicDowncast<RenderTableRow>(destroyRoot.get())) {\n@@ -888,2 +888,2 @@\n-    WeakPtr destroyRootParent = *destroyRoot.parent();\n-    if (&rendererToDestroy != &destroyRoot) {\n+    WeakPtr destroyRootParent = destroyRoot->parent();\n+    if (&rendererToDestroy != destroyRoot.get()) {\n@@ -893,1 +893,4 @@\n-    destroy(destroyRoot);\n+\n+    if (destroyRoot)\n+        destroy(*destroyRoot);\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/updating\/RenderTreeBuilder.cpp","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-    if (parent.style().display() == DisplayType::RubyBlock && parent.firstChild()) {\n+    if (parent.style().display() == DisplayType::RubyBlock) {\n@@ -276,2 +276,10 @@\n-        ASSERT(parent.firstChild()->style().display() == DisplayType::Ruby);\n-        return downcast<RenderElement>(*parent.firstChild());\n+        \/\/ FIXME: It should be the immediate child but continuations can break this assumption.\n+        for (CheckedPtr first = parent.firstChild(); first; first = first->firstChildSlow()) {\n+            if (!first->isAnonymous()) {\n+                \/\/ <ruby blockified><ruby> is valid and still requires construction of an anonymous inline ruby box.\n+                ASSERT(first->style().display() == DisplayType::Ruby);\n+                break;\n+            }\n+            if (first->style().display() == DisplayType::Ruby)\n+                return downcast<RenderElement>(*first);\n+        }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/updating\/RenderTreeBuilderRuby.cpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1045,0 +1045,2 @@\n+    hideNonce();\n+\n@@ -1050,2 +1052,0 @@\n-    hideNonce();\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/svg\/SVGElement.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-    SingleThreadWeakPtr<Page> m_page;\n+    WeakPtr<Page> m_page;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/testing\/InternalSettings.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -225,0 +225,1 @@\n+        m_scriptLoader->advancedPrivacyProtections(),\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/Worker.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-    : WorkerOrWorkletGlobalScope(type, params.sessionID, isMainThread() ? Ref { commonVM() } : JSC::VM::create(), params.referrerPolicy, &thread, params.noiseInjectionHashSalt, params.clientIdentifier)\n+    : WorkerOrWorkletGlobalScope(type, params.sessionID, isMainThread() ? Ref { commonVM() } : JSC::VM::create(), params.referrerPolicy, &thread, params.noiseInjectionHashSalt, params.advancedPrivacyProtections, params.clientIdentifier)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerGlobalScope.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"AdvancedPrivacyProtections.h\"\n@@ -31,0 +32,1 @@\n+#include <wtf\/OptionSet.h>\n@@ -38,0 +40,1 @@\n+    OptionSet<WebCore::AdvancedPrivacyProtections> advancedPrivacyProtections;\n@@ -48,0 +51,1 @@\n+        advancedPrivacyProtections,\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerInitializationData.h","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -152,0 +152,1 @@\n+        m_scriptExecutionContext->advancedPrivacyProtections(),\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerMessagingProxy.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-WorkerOrWorkletGlobalScope::WorkerOrWorkletGlobalScope(WorkerThreadType type, PAL::SessionID sessionID, Ref<JSC::VM>&& vm, ReferrerPolicy referrerPolicy, WorkerOrWorkletThread* thread, std::optional<uint64_t> noiseInjectionHashSalt, ScriptExecutionContextIdentifier contextIdentifier)\n+WorkerOrWorkletGlobalScope::WorkerOrWorkletGlobalScope(WorkerThreadType type, PAL::SessionID sessionID, Ref<JSC::VM>&& vm, ReferrerPolicy referrerPolicy, WorkerOrWorkletThread* thread, std::optional<uint64_t> noiseInjectionHashSalt, OptionSet<AdvancedPrivacyProtections> advancedPrivacyProtections, ScriptExecutionContextIdentifier contextIdentifier)\n@@ -52,0 +52,1 @@\n+    , m_advancedPrivacyProtections(advancedPrivacyProtections)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerOrWorkletGlobalScope.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -42,0 +42,2 @@\n+enum class AdvancedPrivacyProtections : uint16_t;\n+\n@@ -86,0 +88,1 @@\n+    OptionSet<AdvancedPrivacyProtections> advancedPrivacyProtections() const final { return m_advancedPrivacyProtections; }\n@@ -88,1 +91,1 @@\n-    WorkerOrWorkletGlobalScope(WorkerThreadType, PAL::SessionID, Ref<JSC::VM>&&, ReferrerPolicy, WorkerOrWorkletThread*, std::optional<uint64_t>,  ScriptExecutionContextIdentifier = { });\n+    WorkerOrWorkletGlobalScope(WorkerThreadType, PAL::SessionID, Ref<JSC::VM>&&, ReferrerPolicy, WorkerOrWorkletThread*, std::optional<uint64_t>, OptionSet<AdvancedPrivacyProtections>, ScriptExecutionContextIdentifier = { });\n@@ -119,0 +122,1 @@\n+    OptionSet<AdvancedPrivacyProtections> m_advancedPrivacyProtections;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerOrWorkletGlobalScope.h","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-        downcast<WorkerDedicatedRunLoop>(m_runLoop.get()).run(m_globalScope.get());\n+        downcast<WorkerDedicatedRunLoop>(m_runLoop.get()).run(RefPtr { m_globalScope }.get());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerOrWorkletThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,0 +79,1 @@\n+    m_advancedPrivacyProtections = scriptExecutionContext->advancedPrivacyProtections();\n@@ -134,0 +135,1 @@\n+    m_advancedPrivacyProtections = scriptExecutionContext.advancedPrivacyProtections();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerScriptLoader.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"AdvancedPrivacyProtections.h\"\n@@ -43,0 +44,1 @@\n+#include <wtf\/OptionSet.h>\n@@ -73,0 +75,2 @@\n+    OptionSet<AdvancedPrivacyProtections> advancedPrivacyProtections() const { return m_advancedPrivacyProtections; }\n+\n@@ -163,0 +167,1 @@\n+    OptionSet<AdvancedPrivacyProtections> m_advancedPrivacyProtections;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerScriptLoader.h","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"AdvancedPrivacyProtections.h\"\n@@ -74,0 +75,1 @@\n+        advancedPrivacyProtections,\n@@ -201,0 +203,1 @@\n+    ASSERT(!thread() || thread() == &Thread::current());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerThread.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -65,0 +65,2 @@\n+enum class AdvancedPrivacyProtections : uint16_t;\n+\n@@ -87,0 +89,1 @@\n+    OptionSet<AdvancedPrivacyProtections> advancedPrivacyProtections;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerThread.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"AdvancedPrivacyProtections.h\"\n@@ -62,1 +63,1 @@\n-    return { identifier, type, frameType, url.isolatedCopy(), ownerURL.isolatedCopy(), pageIdentifier, frameIdentifier, lastNavigationWasAppInitiated, isVisible, isFocused, focusOrder, crossThreadCopy(ancestorOrigins) };\n+    return { identifier, type, frameType, url.isolatedCopy(), ownerURL.isolatedCopy(), pageIdentifier, frameIdentifier, lastNavigationWasAppInitiated, advancedPrivacyProtections, isVisible, isFocused, focusOrder, crossThreadCopy(ancestorOrigins) };\n@@ -67,1 +68,1 @@\n-    return { identifier, type, frameType, WTFMove(url).isolatedCopy(), WTFMove(ownerURL).isolatedCopy(), pageIdentifier, frameIdentifier, lastNavigationWasAppInitiated, isVisible, isFocused, focusOrder, crossThreadCopy(WTFMove(ancestorOrigins)) };\n+    return { identifier, type, frameType, WTFMove(url).isolatedCopy(), WTFMove(ownerURL).isolatedCopy(), pageIdentifier, frameIdentifier, lastNavigationWasAppInitiated, advancedPrivacyProtections, isVisible, isFocused, focusOrder, crossThreadCopy(WTFMove(ancestorOrigins)) };\n@@ -92,0 +93,1 @@\n+            context.advancedPrivacyProtections(),\n@@ -110,0 +112,1 @@\n+        context.advancedPrivacyProtections(),\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/service\/ServiceWorkerClientData.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+enum class AdvancedPrivacyProtections : uint16_t;\n@@ -54,0 +55,1 @@\n+    OptionSet<WebCore::AdvancedPrivacyProtections> advancedPrivacyProtections;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/service\/ServiceWorkerClientData.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"AdvancedPrivacyProtections.h\"\n@@ -84,1 +85,1 @@\n-static WorkerParameters generateWorkerParameters(const ServiceWorkerContextData& contextData, String&& userAgent, WorkerThreadMode workerThreadMode, const Settings::Values& settingsValues, PAL::SessionID sessionID, std::optional<uint64_t> noiseInjectionHashSalt)\n+static WorkerParameters generateWorkerParameters(const ServiceWorkerContextData& contextData, String&& userAgent, WorkerThreadMode workerThreadMode, const Settings::Values& settingsValues, PAL::SessionID sessionID, OptionSet<AdvancedPrivacyProtections> advancedPrivacyProtections, std::optional<uint64_t> noiseInjectionHashSalt)\n@@ -105,0 +106,1 @@\n+        advancedPrivacyProtections,\n@@ -109,2 +111,2 @@\n-ServiceWorkerThread::ServiceWorkerThread(ServiceWorkerContextData&& contextData, ServiceWorkerData&& workerData, String&& userAgent, WorkerThreadMode workerThreadMode, const Settings::Values& settingsValues, WorkerLoaderProxy& loaderProxy, WorkerDebuggerProxy& debuggerProxy, WorkerBadgeProxy& badgeProxy, IDBClient::IDBConnectionProxy* idbConnectionProxy, SocketProvider* socketProvider, std::unique_ptr<NotificationClient>&& notificationClient, PAL::SessionID sessionID, std::optional<uint64_t> noiseInjectionHashSalt)\n-    : WorkerThread(generateWorkerParameters(contextData, WTFMove(userAgent), workerThreadMode, settingsValues, sessionID, noiseInjectionHashSalt), contextData.script, loaderProxy, debuggerProxy, DummyServiceWorkerThreadProxy::shared(), badgeProxy, WorkerThreadStartMode::Normal, contextData.registration.key.topOrigin().securityOrigin().get(), idbConnectionProxy, socketProvider, JSC::RuntimeFlags::createAllEnabled())\n+ServiceWorkerThread::ServiceWorkerThread(ServiceWorkerContextData&& contextData, ServiceWorkerData&& workerData, String&& userAgent, WorkerThreadMode workerThreadMode, const Settings::Values& settingsValues, WorkerLoaderProxy& loaderProxy, WorkerDebuggerProxy& debuggerProxy, WorkerBadgeProxy& badgeProxy, IDBClient::IDBConnectionProxy* idbConnectionProxy, SocketProvider* socketProvider, std::unique_ptr<NotificationClient>&& notificationClient, PAL::SessionID sessionID, std::optional<uint64_t> noiseInjectionHashSalt, OptionSet<AdvancedPrivacyProtections> advancedPrivacyProtections)\n+    : WorkerThread(generateWorkerParameters(contextData, WTFMove(userAgent), workerThreadMode, settingsValues, sessionID, advancedPrivacyProtections, noiseInjectionHashSalt), contextData.script, loaderProxy, debuggerProxy, DummyServiceWorkerThreadProxy::shared(), badgeProxy, WorkerThreadStartMode::Normal, contextData.registration.key.topOrigin().securityOrigin().get(), idbConnectionProxy, socketProvider, JSC::RuntimeFlags::createAllEnabled())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/service\/context\/ServiceWorkerThread.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include <wtf\/OptionSet.h>\n@@ -53,0 +54,2 @@\n+enum class AdvancedPrivacyProtections : uint16_t;\n+\n@@ -101,1 +104,1 @@\n-    WEBCORE_EXPORT ServiceWorkerThread(ServiceWorkerContextData&&, ServiceWorkerData&&, String&& userAgent, WorkerThreadMode, const Settings::Values&, WorkerLoaderProxy&, WorkerDebuggerProxy&, WorkerBadgeProxy&, IDBClient::IDBConnectionProxy*, SocketProvider*, std::unique_ptr<NotificationClient>&&, PAL::SessionID, std::optional<uint64_t>);\n+    WEBCORE_EXPORT ServiceWorkerThread(ServiceWorkerContextData&&, ServiceWorkerData&&, String&& userAgent, WorkerThreadMode, const Settings::Values&, WorkerLoaderProxy&, WorkerDebuggerProxy&, WorkerBadgeProxy&, IDBClient::IDBConnectionProxy*, SocketProvider*, std::unique_ptr<NotificationClient>&&, PAL::SessionID, std::optional<uint64_t>, OptionSet<AdvancedPrivacyProtections>);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/service\/context\/ServiceWorkerThread.h","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-    , m_serviceWorkerThread(ServiceWorkerThread::create(WTFMove(contextData), WTFMove(workerData), WTFMove(userAgent), workerThreadMode, m_document->settingsValues(), *this, *this, *this, idbConnectionProxy(m_document), m_document->socketProvider(), WTFMove(notificationClient), m_page->sessionID(), m_document->noiseInjectionHashSalt()))\n+    , m_serviceWorkerThread(ServiceWorkerThread::create(WTFMove(contextData), WTFMove(workerData), WTFMove(userAgent), workerThreadMode, m_document->settingsValues(), *this, *this, *this, idbConnectionProxy(m_document), m_document->socketProvider(), WTFMove(notificationClient), m_page->sessionID(), m_document->noiseInjectionHashSalt(), m_document->advancedPrivacyProtections()))\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/service\/context\/ServiceWorkerThreadProxy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"AdvancedPrivacyProtections.h\"\n@@ -746,1 +747,2 @@\n-void SWServer::forEachClientForOrigin(const ClientOrigin& origin, const Function<void(ServiceWorkerClientData&)>& apply)\n+template<typename ClientDataType, typename ClientsByIDType>\n+void forEachClientForOriginImpl(const Vector<ScriptExecutionContextIdentifier>& identifiers, ClientsByIDType& clientsById, const Function<void(ClientDataType&)>& apply)\n@@ -748,7 +750,3 @@\n-    auto iterator = m_clientIdentifiersPerOrigin.find(origin);\n-    if (iterator == m_clientIdentifiersPerOrigin.end())\n-        return;\n-\n-    for (auto& clientIdentifier : iterator->value.identifiers) {\n-        auto clientIterator = m_clientsById.find(clientIdentifier);\n-        ASSERT(clientIterator != m_clientsById.end());\n+    for (auto& clientIdentifier : identifiers) {\n+        auto clientIterator = clientsById.find(clientIdentifier);\n+        ASSERT(clientIterator != clientsById.end());\n@@ -759,0 +757,14 @@\n+void SWServer::forEachClientForOrigin(const ClientOrigin& origin, const Function<void(const ServiceWorkerClientData&)>& apply) const\n+{\n+    auto iterator = m_clientIdentifiersPerOrigin.find(origin);\n+    if (iterator != m_clientIdentifiersPerOrigin.end())\n+        forEachClientForOriginImpl(iterator->value.identifiers, m_clientsById, apply);\n+}\n+\n+void SWServer::forEachClientForOrigin(const ClientOrigin& origin, const Function<void(ServiceWorkerClientData&)>& apply)\n+{\n+    auto iterator = m_clientIdentifiersPerOrigin.find(origin);\n+    if (iterator != m_clientIdentifiersPerOrigin.end())\n+        forEachClientForOriginImpl(iterator->value.identifiers, m_clientsById, apply);\n+}\n+\n@@ -896,0 +908,9 @@\n+OptionSet<AdvancedPrivacyProtections> SWServer::advancedPrivacyProtectionsFromClient(const ClientOrigin& origin) const\n+{\n+    OptionSet<AdvancedPrivacyProtections> result;\n+    forEachClientForOrigin(origin, [&result](auto& clientData) {\n+        result.add(clientData.advancedPrivacyProtections);\n+    });\n+    return result;\n+}\n+\n@@ -919,1 +940,1 @@\n-    connection->installServiceWorkerContext(data, worker->data(), userAgent, worker->workerThreadMode());\n+    connection->installServiceWorkerContext(data, worker->data(), userAgent, worker->workerThreadMode(), advancedPrivacyProtectionsFromClient(worker->registrationKey().clientOrigin()));\n@@ -996,1 +1017,1 @@\n-    contextConnection->installServiceWorkerContext(worker.contextData(), worker.data(), worker.userAgent(), worker.workerThreadMode());\n+    contextConnection->installServiceWorkerContext(worker.contextData(), worker.data(), worker.userAgent(), worker.workerThreadMode(), advancedPrivacyProtectionsFromClient(worker.registrationKey().clientOrigin()));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/service\/server\/SWServer.cpp","additions":31,"deletions":10,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+enum class AdvancedPrivacyProtections : uint16_t;\n@@ -274,0 +275,1 @@\n+    void forEachClientForOrigin(const ClientOrigin&, const Function<void(const ServiceWorkerClientData&)>&) const;\n@@ -293,0 +295,2 @@\n+    WEBCORE_EXPORT OptionSet<AdvancedPrivacyProtections> advancedPrivacyProtectionsFromClient(const ClientOrigin&) const;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/service\/server\/SWServer.h","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+enum class AdvancedPrivacyProtections : uint16_t;\n@@ -68,1 +69,1 @@\n-    virtual void installServiceWorkerContext(const ServiceWorkerContextData&, const ServiceWorkerData&, const String& userAgent, WorkerThreadMode) = 0;\n+    virtual void installServiceWorkerContext(const ServiceWorkerContextData&, const ServiceWorkerData&, const String& userAgent, WorkerThreadMode, OptionSet<AdvancedPrivacyProtections>) = 0;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/service\/server\/SWServerToContextConnection.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+        m_loader->advancedPrivacyProtections(),\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/shared\/SharedWorkerScriptLoader.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -84,0 +84,1 @@\n+        document.advancedPrivacyProtections(),\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/shared\/context\/SharedWorkerThreadProxy.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    : WorkerOrWorkletGlobalScope(WorkerThreadType::Worklet, parameters.sessionID, WTFMove(vm), parameters.referrerPolicy, &thread, parameters.noiseInjectionHashSalt)\n+    : WorkerOrWorkletGlobalScope(WorkerThreadType::Worklet, parameters.sessionID, WTFMove(vm), parameters.referrerPolicy, &thread, parameters.noiseInjectionHashSalt, parameters.advancedPrivacyProtections)\n@@ -67,1 +67,1 @@\n-    : WorkerOrWorkletGlobalScope(WorkerThreadType::Worklet, *document.sessionID(), WTFMove(vm), document.referrerPolicy(), nullptr, document.noiseInjectionHashSalt())\n+    : WorkerOrWorkletGlobalScope(WorkerThreadType::Worklet, *document.sessionID(), WTFMove(vm), document.referrerPolicy(), nullptr, document.noiseInjectionHashSalt(), document.advancedPrivacyProtections())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/worklets\/WorkletGlobalScope.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"AdvancedPrivacyProtections.h\"\n@@ -43,0 +44,1 @@\n+    OptionSet<AdvancedPrivacyProtections> advancedPrivacyProtections;\n@@ -45,2 +47,2 @@\n-    WorkletParameters isolatedCopy() const & { return { windowURL.isolatedCopy(), jsRuntimeFlags, sampleRate, identifier.isolatedCopy(), sessionID, settingsValues.isolatedCopy(), referrerPolicy, isAudioContextRealTime, noiseInjectionHashSalt }; }\n-    WorkletParameters isolatedCopy() && { return { WTFMove(windowURL).isolatedCopy(), jsRuntimeFlags, sampleRate, WTFMove(identifier).isolatedCopy(), sessionID, WTFMove(settingsValues).isolatedCopy(), referrerPolicy, isAudioContextRealTime, WTFMove(noiseInjectionHashSalt) }; }\n+    WorkletParameters isolatedCopy() const & { return { windowURL.isolatedCopy(), jsRuntimeFlags, sampleRate, identifier.isolatedCopy(), sessionID, settingsValues.isolatedCopy(), referrerPolicy, isAudioContextRealTime, advancedPrivacyProtections, noiseInjectionHashSalt }; }\n+    WorkletParameters isolatedCopy() && { return { WTFMove(windowURL).isolatedCopy(), jsRuntimeFlags, sampleRate, WTFMove(identifier).isolatedCopy(), sessionID, WTFMove(settingsValues).isolatedCopy(), referrerPolicy, isAudioContextRealTime, advancedPrivacyProtections, WTFMove(noiseInjectionHashSalt) }; }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/worklets\/WorkletParameters.h","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (C) 2006, 2009, 2013 Apple Inc. All rights reserved.\n+ * Copyright (C) 2006-2024 Apple Inc. All rights reserved.\n@@ -71,1 +71,1 @@\n-    Value::Type resultType() const override { return Value::NumberValue; }\n+    Value::Type resultType() const override { return Value::Type::Number; }\n@@ -78,1 +78,1 @@\n-    Value::Type resultType() const override { return Value::NumberValue; }\n+    Value::Type resultType() const override { return Value::Type::Number; }\n@@ -85,1 +85,1 @@\n-    Value::Type resultType() const override { return Value::NumberValue; }\n+    Value::Type resultType() const override { return Value::Type::Number; }\n@@ -90,1 +90,1 @@\n-    Value::Type resultType() const override { return Value::NodeSetValue; }\n+    Value::Type resultType() const override { return Value::Type::NodeSet; }\n@@ -95,1 +95,1 @@\n-    Value::Type resultType() const override { return Value::StringValue; }\n+    Value::Type resultType() const override { return Value::Type::String; }\n@@ -102,1 +102,1 @@\n-    Value::Type resultType() const override { return Value::StringValue; }\n+    Value::Type resultType() const override { return Value::Type::String; }\n@@ -109,1 +109,1 @@\n-    Value::Type resultType() const override { return Value::StringValue; }\n+    Value::Type resultType() const override { return Value::Type::String; }\n@@ -116,1 +116,1 @@\n-    Value::Type resultType() const override { return Value::StringValue; }\n+    Value::Type resultType() const override { return Value::Type::String; }\n@@ -123,1 +123,1 @@\n-    Value::Type resultType() const override { return Value::StringValue; }\n+    Value::Type resultType() const override { return Value::Type::String; }\n@@ -128,1 +128,1 @@\n-    Value::Type resultType() const override { return Value::BooleanValue; }\n+    Value::Type resultType() const override { return Value::Type::Boolean; }\n@@ -133,1 +133,1 @@\n-    Value::Type resultType() const override { return Value::BooleanValue; }\n+    Value::Type resultType() const override { return Value::Type::Boolean; }\n@@ -138,1 +138,1 @@\n-    Value::Type resultType() const override { return Value::StringValue; }\n+    Value::Type resultType() const override { return Value::Type::String; }\n@@ -143,1 +143,1 @@\n-    Value::Type resultType() const override { return Value::StringValue; }\n+    Value::Type resultType() const override { return Value::Type::String; }\n@@ -148,1 +148,1 @@\n-    Value::Type resultType() const override { return Value::StringValue; }\n+    Value::Type resultType() const override { return Value::Type::String; }\n@@ -153,1 +153,1 @@\n-    Value::Type resultType() const override { return Value::NumberValue; }\n+    Value::Type resultType() const override { return Value::Type::Number; }\n@@ -160,1 +160,1 @@\n-    Value::Type resultType() const override { return Value::StringValue; }\n+    Value::Type resultType() const override { return Value::Type::String; }\n@@ -167,1 +167,1 @@\n-    Value::Type resultType() const override { return Value::StringValue; }\n+    Value::Type resultType() const override { return Value::Type::String; }\n@@ -172,1 +172,1 @@\n-    Value::Type resultType() const override { return Value::BooleanValue; }\n+    Value::Type resultType() const override { return Value::Type::Boolean; }\n@@ -177,1 +177,1 @@\n-    Value::Type resultType() const override { return Value::BooleanValue; }\n+    Value::Type resultType() const override { return Value::Type::Boolean; }\n@@ -182,1 +182,1 @@\n-    Value::Type resultType() const override { return Value::BooleanValue; }\n+    Value::Type resultType() const override { return Value::Type::Boolean; }\n@@ -187,1 +187,1 @@\n-    Value::Type resultType() const override { return Value::BooleanValue; }\n+    Value::Type resultType() const override { return Value::Type::Boolean; }\n@@ -192,1 +192,1 @@\n-    Value::Type resultType() const override { return Value::BooleanValue; }\n+    Value::Type resultType() const override { return Value::Type::Boolean; }\n@@ -199,1 +199,1 @@\n-    Value::Type resultType() const override { return Value::NumberValue; }\n+    Value::Type resultType() const override { return Value::Type::Number; }\n@@ -206,1 +206,1 @@\n-    Value::Type resultType() const override { return Value::NumberValue; }\n+    Value::Type resultType() const override { return Value::Type::Number; }\n@@ -211,1 +211,1 @@\n-    Value::Type resultType() const override { return Value::NumberValue; }\n+    Value::Type resultType() const override { return Value::Type::Number; }\n@@ -216,1 +216,1 @@\n-    Value::Type resultType() const override { return Value::NumberValue; }\n+    Value::Type resultType() const override { return Value::Type::Number; }\n@@ -221,1 +221,1 @@\n-    Value::Type resultType() const override { return Value::NumberValue; }\n+    Value::Type resultType() const override { return Value::Type::Number; }\n@@ -787,2 +787,2 @@\n-}\n-}\n+} \/\/ namespace XPath\n+} \/\/ namespace WebCore\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/XPathFunctions.cpp","additions":30,"deletions":30,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (C) 2006, 2013 Apple Inc. All rights reserved.\n+ * Copyright (C) 2006-2024 Apple Inc. All rights reserved.\n@@ -50,10 +50,16 @@\n-    String string;\n-    Step::Axis axis;\n-    NumericOp::Opcode numericOpcode;\n-    EqTestOp::Opcode equalityTestOpcode;\n-\n-    Token(int type) : type(type) { }\n-    Token(int type, const String& string) : type(type), string(string) { }\n-    Token(int type, Step::Axis axis) : type(type), axis(axis) { }\n-    Token(int type, NumericOp::Opcode opcode) : type(type), numericOpcode(opcode) { }\n-    Token(int type, EqTestOp::Opcode opcode) : type(type), equalityTestOpcode(opcode) { }\n+    using TokenValue = std::variant<String, Step::Axis, NumericOp::Opcode, EqTestOp::Opcode>;\n+    TokenValue value;\n+\n+    Token() = delete;\n+\n+    Token(int type)\n+        : type(type)\n+    { }\n+    Token(int type, TokenValue&& value)\n+        : type(type), value(WTFMove(value))\n+    { }\n+\n+    String& string() { return std::get<String>(value); }\n+    Step::Axis axis() const { return std::get<Step::Axis>(value); }\n+    NumericOp::Opcode numericOpcode() const { return std::get<NumericOp::Opcode>(value); }\n+    EqTestOp::Opcode equalityTestOpcode() const { return std::get<EqTestOp::Opcode>(value); }\n@@ -412,1 +418,1 @@\n-        yylval.axis = token.axis;\n+        yylval.axis = token.axis();\n@@ -415,1 +421,1 @@\n-        yylval.numericOpcode = token.numericOpcode;\n+        yylval.numericOpcode = token.numericOpcode();\n@@ -419,1 +425,1 @@\n-        yylval.equalityTestOpcode = token.equalityTestOpcode;\n+        yylval.equalityTestOpcode = token.equalityTestOpcode();\n@@ -427,1 +433,1 @@\n-        yylval.string = token.string.releaseImpl().leakRef();\n+        yylval.string = token.string().releaseImpl().leakRef();\n@@ -468,1 +474,2 @@\n-} }\n+} \/\/ namespace XPath\n+} \/\/ namespace WebCore\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/XPathParser.cpp","additions":23,"deletions":16,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (C) 2006, 2009, 2013 Apple Inc. All rights reserved.\n+ * Copyright (C) 2006-2024 Apple Inc. All rights reserved.\n@@ -32,1 +32,1 @@\n-    namespace XPath {\n+namespace XPath {\n@@ -34,1 +34,1 @@\n-        class Step;\n+class Step;\n@@ -36,2 +36,2 @@\n-        class Filter final : public Expression {\n-        public:\n+class Filter final : public Expression {\n+public:\n@@ -40,1 +40,1 @@\n-        private:\n+private:\n@@ -42,1 +42,1 @@\n-            Value::Type resultType() const override { return Value::NodeSetValue; }\n+    Value::Type resultType() const override { return Value::Type::NodeSet; }\n@@ -46,1 +46,1 @@\n-        };\n+};\n@@ -48,2 +48,2 @@\n-        class LocationPath final : public Expression {\n-        public:\n+class LocationPath final : public Expression {\n+public:\n@@ -59,1 +59,1 @@\n-        private:\n+private:\n@@ -61,1 +61,1 @@\n-            Value::Type resultType() const override { return Value::NodeSetValue; }\n+    Value::Type resultType() const override { return Value::Type::NodeSet; }\n@@ -65,1 +65,1 @@\n-        };\n+};\n@@ -67,2 +67,2 @@\n-        class Path final : public Expression {\n-        public:\n+class Path final : public Expression {\n+public:\n@@ -71,1 +71,1 @@\n-        private:\n+private:\n@@ -73,1 +73,1 @@\n-            Value::Type resultType() const override { return Value::NodeSetValue; }\n+    Value::Type resultType() const override { return Value::Type::NodeSet; }\n@@ -77,1 +77,1 @@\n-        };\n+};\n@@ -79,1 +79,1 @@\n-    } \/\/ namespace XPath\n+} \/\/ namespace XPath\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/XPathPath.h","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (C) 2006, 2013 Apple Inc. All rights reserved.\n+ * Copyright (C) 2006-2024 Apple Inc. All rights reserved.\n@@ -300,1 +300,1 @@\n-    return expression.isContextPositionSensitive() || expression.resultType() == Value::NumberValue;\n+    return expression.isContextPositionSensitive() || expression.resultType() == Value::Type::Number;\n@@ -303,2 +303,2 @@\n-}\n-}\n+} \/\/ namespace XPath\n+} \/\/ namespace WebCore\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/XPathPredicate.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (C) 2006, 2013 Apple Inc. All rights reserved.\n+ * Copyright (C) 2006-2024 Apple Inc. All rights reserved.\n@@ -32,1 +32,1 @@\n-    namespace XPath {\n+namespace XPath {\n@@ -34,2 +34,2 @@\n-        class Number final : public Expression {\n-        public:\n+class Number final : public Expression {\n+public:\n@@ -38,1 +38,1 @@\n-        private:\n+private:\n@@ -40,1 +40,1 @@\n-            Value::Type resultType() const override { return Value::NumberValue; }\n+    Value::Type resultType() const override { return Value::Type::Number; }\n@@ -43,1 +43,1 @@\n-        };\n+};\n@@ -45,2 +45,2 @@\n-        class StringExpression final : public Expression {\n-        public:\n+class StringExpression final : public Expression {\n+public:\n@@ -49,1 +49,1 @@\n-        private:\n+private:\n@@ -51,1 +51,1 @@\n-            Value::Type resultType() const override { return Value::StringValue; }\n+    Value::Type resultType() const override { return Value::Type::String; }\n@@ -54,1 +54,1 @@\n-        };\n+};\n@@ -56,2 +56,2 @@\n-        class Negative final : public Expression {\n-        public:\n+class Negative final : public Expression {\n+public:\n@@ -60,1 +60,1 @@\n-        private:\n+private:\n@@ -62,2 +62,2 @@\n-            Value::Type resultType() const override { return Value::NumberValue; }\n-        };\n+    Value::Type resultType() const override { return Value::Type::Number; }\n+};\n@@ -65,2 +65,2 @@\n-        class NumericOp final : public Expression {\n-        public:\n+class NumericOp final : public Expression {\n+public:\n@@ -70,1 +70,1 @@\n-        private:\n+private:\n@@ -72,1 +72,1 @@\n-            Value::Type resultType() const override { return Value::NumberValue; }\n+    Value::Type resultType() const override { return Value::Type::Number; }\n@@ -75,1 +75,1 @@\n-        };\n+};\n@@ -77,2 +77,2 @@\n-        class EqTestOp final : public Expression {\n-        public:\n+class EqTestOp final : public Expression {\n+public:\n@@ -83,2 +83,2 @@\n-        private:\n-            Value::Type resultType() const override { return Value::BooleanValue; }\n+private:\n+    Value::Type resultType() const override { return Value::Type::Boolean; }\n@@ -88,1 +88,1 @@\n-        };\n+};\n@@ -90,2 +90,2 @@\n-        class LogicalOp final : public Expression {\n-        public:\n+class LogicalOp final : public Expression {\n+public:\n@@ -95,2 +95,2 @@\n-        private:\n-            Value::Type resultType() const override { return Value::BooleanValue; }\n+private:\n+    Value::Type resultType() const override { return Value::Type::Boolean; }\n@@ -101,1 +101,1 @@\n-        };\n+};\n@@ -103,2 +103,2 @@\n-        class Union final : public Expression {\n-        public:\n+class Union final : public Expression {\n+public:\n@@ -107,1 +107,1 @@\n-        private:\n+private:\n@@ -109,2 +109,2 @@\n-            Value::Type resultType() const override { return Value::NodeSetValue; }\n-        };\n+    Value::Type resultType() const override { return Value::Type::NodeSet; }\n+};\n@@ -112,2 +112,2 @@\n-        bool evaluatePredicate(const Expression&);\n-        bool predicateIsContextPositionSensitive(const Expression&);\n+bool evaluatePredicate(const Expression&);\n+bool predicateIsContextPositionSensitive(const Expression&);\n@@ -115,1 +115,1 @@\n-    } \/\/ namespace XPath\n+} \/\/ namespace XPath\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/XPathPredicate.h","additions":40,"deletions":40,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (C) 2006, 2009 Apple Inc. All rights reserved.\n+ * Copyright (C) 2006-2024 Apple Inc. All rights reserved.\n@@ -39,1 +39,1 @@\n-        case XPath::Value::BooleanValue:\n+    case XPath::Value::Type::Boolean:\n@@ -42,1 +42,1 @@\n-        case XPath::Value::NumberValue:\n+    case XPath::Value::Type::Number:\n@@ -45,1 +45,1 @@\n-        case XPath::Value::StringValue:\n+    case XPath::Value::Type::String:\n@@ -48,1 +48,1 @@\n-        case XPath::Value::NodeSetValue:\n+    case XPath::Value::Type::NodeSet:\n@@ -183,1 +183,1 @@\n-}\n+} \/\/ namespace WebCore\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/XPathResult.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (C) 2006, 2013 Apple Inc. All rights reserved.\n+ * Copyright (C) 2006-2024 Apple Inc. All rights reserved.\n@@ -62,1 +62,1 @@\n-    m_type = NodeSetValue;\n+    m_type = Type::NodeSet;\n@@ -69,1 +69,1 @@\n-        case NodeSetValue:\n+    case Type::NodeSet:\n@@ -71,1 +71,1 @@\n-        case BooleanValue:\n+    case Type::Boolean:\n@@ -73,1 +73,1 @@\n-        case NumberValue:\n+    case Type::Number:\n@@ -75,1 +75,1 @@\n-        case StringValue:\n+    case Type::String:\n@@ -85,1 +85,1 @@\n-        case NodeSetValue:\n+    case Type::NodeSet:\n@@ -87,1 +87,1 @@\n-        case NumberValue:\n+    case Type::Number:\n@@ -89,1 +89,1 @@\n-        case StringValue: {\n+    case Type::String: {\n@@ -106,1 +106,1 @@\n-        case BooleanValue:\n+    case Type::Boolean:\n@@ -117,1 +117,1 @@\n-        case NodeSetValue:\n+    case Type::NodeSet:\n@@ -121,1 +121,1 @@\n-        case StringValue:\n+    case Type::String:\n@@ -123,1 +123,1 @@\n-        case NumberValue:\n+    case Type::Number:\n@@ -126,1 +126,1 @@\n-            if (m_number == 0)\n+        if (!m_number)\n@@ -131,1 +131,1 @@\n-        case BooleanValue:\n+    case Type::Boolean:\n@@ -139,2 +139,2 @@\n-}\n-}\n+} \/\/ namespace XPath\n+} \/\/ namespace WebCore\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/XPathValue.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (C) 2006, 2013 Apple Inc. All rights reserved.\n+ * Copyright (C) 2006-2024 Apple Inc. All rights reserved.\n@@ -32,12 +32,24 @@\n-    namespace XPath {\n-\n-        class Value {\n-        public:\n-            enum Type { NodeSetValue, BooleanValue, NumberValue, StringValue };\n-\n-            Value(bool value) : m_type(BooleanValue), m_bool(value) { }\n-            Value(unsigned value) : m_type(NumberValue), m_number(value) { }\n-            Value(double value) : m_type(NumberValue), m_number(value) { }\n-\n-            Value(const String& value) : m_type(StringValue), m_data(Data::create(value)) { }\n-            Value(const char* value) : m_type(StringValue), m_data(Data::create(String::fromLatin1(value))) { }\n+namespace XPath {\n+\n+class Value {\n+public:\n+    enum class Type : uint8_t { NodeSet, Boolean, Number, String };\n+\n+    Value() = delete;\n+\n+    Value(bool value)\n+        : m_type(Type::Boolean), m_bool(value)\n+    { }\n+    Value(unsigned value)\n+        : m_type(Type::Number), m_number(value)\n+    { }\n+    Value(double value)\n+        : m_type(Type::Number), m_number(value)\n+    { }\n+\n+    Value(const String& value)\n+        : m_type(Type::String), m_data(Data::create(value))\n+    { }\n+    Value(const char* value)\n+        : m_type(Type::String), m_data(Data::create(String::fromLatin1(value)))\n+    { }\n@@ -46,1 +58,1 @@\n-                : m_type(NodeSetValue), m_data(Data::create(WTFMove(value)))\n+        : m_type(Type::NodeSet), m_data(Data::create(WTFMove(value)))\n@@ -49,1 +61,1 @@\n-                : m_type(NodeSetValue), m_data(Data::create(value))\n+        : m_type(Type::NodeSet), m_data(Data::create(value))\n@@ -52,1 +64,1 @@\n-                : m_type(NodeSetValue), m_data(Data::create(WTFMove(value)))\n+        : m_type(Type::NodeSet), m_data(Data::create(WTFMove(value)))\n@@ -57,4 +69,4 @@\n-            bool isNodeSet() const { return m_type == NodeSetValue; }\n-            bool isBoolean() const { return m_type == BooleanValue; }\n-            bool isNumber() const { return m_type == NumberValue; }\n-            bool isString() const { return m_type == StringValue; }\n+    bool isNodeSet() const { return m_type == Type::NodeSet; }\n+    bool isBoolean() const { return m_type == Type::Boolean; }\n+    bool isNumber() const { return m_type == Type::Number; }\n+    bool isString() const { return m_type == Type::String; }\n@@ -70,1 +82,1 @@\n-        private:\n+private:\n@@ -97,2 +109,2 @@\n-            bool m_bool;\n-            double m_number;\n+    bool m_bool { false };\n+    double m_number { 0 };\n@@ -100,1 +112,1 @@\n-        };\n+};\n@@ -102,1 +114,1 @@\n-    } \/\/ namespace XPath\n+} \/\/ namespace XPath\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/XPathValue.h","additions":37,"deletions":25,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (C) 2006-2024 Apple Inc. All rights reserved.\n@@ -31,1 +32,1 @@\n-    namespace XPath {\n+namespace XPath {\n@@ -33,3 +34,3 @@\n-        \/\/ Variable references are not used with XPathEvaluator.\n-        class VariableReference : public Expression {\n-        public:\n+\/\/ Variable references are not used with XPathEvaluator.\n+class VariableReference : public Expression {\n+public:\n@@ -37,1 +38,1 @@\n-        private:\n+private:\n@@ -39,1 +40,1 @@\n-            Value::Type resultType() const override { ASSERT_NOT_REACHED(); return Value::NumberValue; }\n+    Value::Type resultType() const override { ASSERT_NOT_REACHED(); return Value::Type::Number; }\n@@ -41,1 +42,1 @@\n-        };\n+};\n@@ -43,1 +44,1 @@\n-    } \/\/ namespace XPath\n+} \/\/ namespace XPath\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/XPathVariableReference.h","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-    SingleThreadWeakHashMap<WebCore::Page, HashMap<WebCore::SecurityOriginData, RefPtr<WebCore::StorageNamespace>>> m_sessionStorageNamespaces;\n+    WeakHashMap<WebCore::Page, HashMap<WebCore::SecurityOriginData, RefPtr<WebCore::StorageNamespace>>> m_sessionStorageNamespaces;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebKitLegacy\/Storage\/WebStorageNamespaceProvider.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-    SingleThreadWeakPtr<WebCore::Page> m_page;\n+    WeakPtr<WebCore::Page> m_page;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebKitLegacy\/WebCoreSupport\/PageStorageSessionProvider.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -182,1 +182,2 @@\n-    String title= \"\"_s;\n+    HistoryItem* item = getItem(jitem);\n+    String title = item->title();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebKitLegacy\/java\/WebCoreSupport\/BackForwardList.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -646,1 +646,1 @@\n-DOMPasteAccessResponse EditorClientJava::requestDOMPasteAccess(DOMPasteAccessCategory, const String& originIdentifier)\n+DOMPasteAccessResponse EditorClientJava::requestDOMPasteAccess(DOMPasteAccessCategory, FrameIdentifier, const String& originIdentifier)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebKitLegacy\/java\/WebCoreSupport\/EditorClientJava.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-    DOMPasteAccessResponse requestDOMPasteAccess(DOMPasteAccessCategory, const String& originIdentifier) override;\n+    DOMPasteAccessResponse requestDOMPasteAccess(DOMPasteAccessCategory, FrameIdentifier, const String& originIdentifier) override;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebKitLegacy\/java\/WebCoreSupport\/EditorClientJava.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -811,1 +811,1 @@\n-        SingleThreadWeakHashMap<WebCore::Page, HashMap<WebCore::SecurityOriginData, RefPtr<WebCore::StorageNamespace>>> m_sessionStorageNamespaces;\n+        WeakHashMap<WebCore::Page, HashMap<WebCore::SecurityOriginData, RefPtr<WebCore::StorageNamespace>>> m_sessionStorageNamespaces;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebKitLegacy\/java\/WebCoreSupport\/WebPage.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -736,3 +736,2 @@\n-        # First try the nproc utility, if it exists. If we get no\n-        # results fall back to just interpretting \/proc directly.\n-        chomp($numberOfCPUs = `nproc --all 2> \/dev\/null`);\n+        use POSIX;\n+        $numberOfCPUs = POSIX::sysconf(83); # _SC_NPROCESSORS_ONLN = 83\n@@ -740,1 +739,9 @@\n-            $numberOfCPUs = (grep \/processor\/, `cat \/proc\/cpuinfo`);\n+            $numberOfCPUs = 0;\n+            open CPUINFO, \"\/proc\/cpuinfo\";\n+            while (<CPUINFO>) {\n+                if (\/[Pp]rocessor\\s\/) { $numberOfCPUs++; }\n+            }\n+            close CPUINFO;\n+        }\n+        if ($numberOfCPUs == 0) {\n+            $numberOfCPUs = 1;\n","filename":"modules\/javafx.web\/src\/main\/native\/Tools\/Scripts\/webkitdirs.pm","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"}]}