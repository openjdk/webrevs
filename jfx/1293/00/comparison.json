{"files":[{"patch":"@@ -1885,1 +1885,12 @@\n-        <th class=\"propertyname\" scope=\"row\">-fx-image<\/th>\n+          <th class=\"propertyname\" scope=\"row\">-fx-fit-height<\/th>\n+          <td class=\"value\"><a href=\"#typenumber\" class=\"typelink\">&lt;number&gt;<\/a><\/td>\n+          <td>0<\/td>\n+          <td>The height of the bounding box within which the source image is resized as necessary to fit.<\/td>\n+        <\/tr>\n+        <tr>\n+          <th class=\"propertyname\" scope=\"row\">-fx-fit-width<\/th>\n+          <td class=\"value\"><a href=\"#typenumber\" class=\"typelink\">&lt;number&gt;<\/a><\/td>\n+          <td>0<\/td>\n+          <td>The width of the bounding box within which the source image is resized as necessary to fit.<\/td>\n+        <\/tr>\n+          <th class=\"propertyname\" scope=\"row\">-fx-image<\/th>\n@@ -1890,0 +1901,12 @@\n+        <tr>\n+          <th class=\"propertyname\" scope=\"row\">-fx-preserve-ratio<\/th>\n+          <td class=\"value\"><a href=\"#typeboolean\" class=\"typelink\">&lt;boolean&gt;<\/a><\/td>\n+          <td>false<\/td>\n+          <td>Indicates whether to preserve the aspect ratio of the source image when scaling to fit the image within the fitting bounding box.<\/td>\n+        <\/tr>\n+        <tr>\n+          <th class=\"propertyname\" scope=\"row\">-fx-smooth<\/th>\n+          <td class=\"value\"><a href=\"#typeboolean\" class=\"typelink\">&lt;boolean&gt;<\/a><\/td>\n+          <td>Platform-specific<\/td>\n+          <td>Indicates whether to use a better quality filtering algorithm or a faster one when transforming or scaling the source image to fit.<\/td>\n+        <\/tr>\n","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/cssref.html","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.javafx.css;\n+\n+import java.util.List;\n+import javafx.css.CssMetaData;\n+import javafx.css.Styleable;\n+import javafx.scene.Node;\n+import com.sun.javafx.UnmodifiableArrayList;\n+\n+\/**\n+ * Utility methods for dealing with CSS.\n+ *\/\n+public class CssUtil {\n+    \/**\n+     * Utility method which combines {@code CssMetaData} items in one immutable list.\n+     * <p>\n+     * The intended usage is to combine the parent and the child {@code CssMetaData} for\n+     * the purposes of {@code getClassCssMetaData()} method, see for example {@link Node#getClassCssMetaData()}.\n+     * <p>\n+     * Example:\n+     * <pre>{@code\n+     * private static final List<CssMetaData<? extends Styleable, ?>> STYLEABLES = CssMetaData.combine(\n+     *      <Parent>.getClassCssMetaData(),\n+     *      STYLEABLE1,\n+     *      STYLEABLE2\n+     *  );\n+     * }<\/pre>\n+     * This method returns an instance of a {@code List} that implements\n+     * {@link java.util.RandomAccess} interface.\n+     *\n+     * @param inheritedFromParent the {@code CssMetaData} items inherited from parent, must not be null\n+     * @param items the additional items\n+     * @return the immutable list containing all of the items\n+     *\/\n+    \/\/ NOTE: this should be a public utility, see https:\/\/bugs.openjdk.org\/browse\/JDK-8320796\n+    public static List<CssMetaData<? extends Styleable, ?>> combine(\n+        List<CssMetaData<? extends Styleable, ?>> inheritedFromParent,\n+        CssMetaData<? extends Styleable, ?>... items)\n+    {\n+        CssMetaData[] combined = new CssMetaData[inheritedFromParent.size() + items.length];\n+        inheritedFromParent.toArray(combined);\n+        System.arraycopy(items, 0, combined, inheritedFromParent.size(), items.length);\n+        return new UnmodifiableArrayList<>(combined, combined.length);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/CssUtil.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,11 +28,1 @@\n-import com.sun.javafx.beans.event.AbstractNotifyListener;\n-import com.sun.javafx.css.StyleManager;\n-import javafx.css.converter.URLConverter;\n-import com.sun.javafx.geom.BaseBounds;\n-import com.sun.javafx.geom.transform.BaseTransform;\n-import com.sun.javafx.scene.DirtyBits;\n-import com.sun.javafx.scene.ImageViewHelper;\n-import com.sun.javafx.scene.NodeHelper;\n-import com.sun.javafx.sg.prism.NGImageView;\n-import com.sun.javafx.sg.prism.NGNode;\n-import com.sun.javafx.tk.Toolkit;\n+import java.util.List;\n@@ -41,1 +31,6 @@\n-import javafx.beans.property.*;\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.DoublePropertyBase;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.ObjectPropertyBase;\n+import javafx.beans.property.StringProperty;\n@@ -44,0 +39,2 @@\n+import javafx.css.StyleableBooleanProperty;\n+import javafx.css.StyleableDoubleProperty;\n@@ -46,0 +43,3 @@\n+import javafx.css.converter.BooleanConverter;\n+import javafx.css.converter.SizeConverter;\n+import javafx.css.converter.URLConverter;\n@@ -50,3 +50,11 @@\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n+import com.sun.javafx.beans.event.AbstractNotifyListener;\n+import com.sun.javafx.css.CssUtil;\n+import com.sun.javafx.css.StyleManager;\n+import com.sun.javafx.geom.BaseBounds;\n+import com.sun.javafx.geom.transform.BaseTransform;\n+import com.sun.javafx.scene.DirtyBits;\n+import com.sun.javafx.scene.ImageViewHelper;\n+import com.sun.javafx.scene.NodeHelper;\n+import com.sun.javafx.sg.prism.NGImageView;\n+import com.sun.javafx.sg.prism.NGNode;\n+import com.sun.javafx.tk.Toolkit;\n@@ -411,2 +419,1 @@\n-    private DoubleProperty fitWidth;\n-\n+    private StyleableDoubleProperty fitWidth;\n@@ -424,2 +431,1 @@\n-            fitWidth = new DoublePropertyBase() {\n-\n+            fitWidth = new StyleableDoubleProperty() {\n@@ -442,0 +448,5 @@\n+\n+                @Override\n+                public CssMetaData<? extends Styleable, Number> getCssMetaData() {\n+                    return StyleableProperties.FIT_WIDTH;\n+                }\n@@ -459,2 +470,1 @@\n-    private DoubleProperty fitHeight;\n-\n+    private StyleableDoubleProperty fitHeight;\n@@ -472,2 +482,1 @@\n-            fitHeight = new DoublePropertyBase() {\n-\n+            fitHeight = new StyleableDoubleProperty() {\n@@ -490,0 +499,5 @@\n+\n+                @Override\n+                public CssMetaData<? extends Styleable, Number> getCssMetaData() {\n+                    return StyleableProperties.FIT_HEIGHT;\n+                }\n@@ -524,2 +538,1 @@\n-    private BooleanProperty preserveRatio;\n-\n+    private StyleableBooleanProperty preserveRatio;\n@@ -537,2 +550,1 @@\n-            preserveRatio = new BooleanPropertyBase() {\n-\n+            preserveRatio = new StyleableBooleanProperty() {\n@@ -555,0 +567,5 @@\n+\n+                @Override\n+                public CssMetaData<? extends Styleable, Boolean> getCssMetaData() {\n+                    return StyleableProperties.PRESERVE_RATIO;\n+                }\n@@ -576,2 +593,1 @@\n-    private BooleanProperty smooth;\n-\n+    private StyleableBooleanProperty smooth;\n@@ -589,2 +605,1 @@\n-            smooth = new BooleanPropertyBase(SMOOTH_DEFAULT) {\n-\n+            smooth = new StyleableBooleanProperty(SMOOTH_DEFAULT) {\n@@ -605,0 +620,5 @@\n+\n+                @Override\n+                public CssMetaData<? extends Styleable, Boolean> getCssMetaData() {\n+                    return StyleableProperties.SMOOTH;\n+                }\n@@ -807,9 +827,28 @@\n-    \/*\n-     * Super-lazy instantiation pattern from Bill Pugh.\n-     *\/\n-     private static class StyleableProperties {\n-        \/\/ TODO\n-        \/\/ \"preserve-ratio\",\"smooth\",\"viewport\",\"fit-width\",\"fit-height\"\n-         private static final CssMetaData<ImageView, String> IMAGE =\n-            new CssMetaData<>(\"-fx-image\",\n-                URLConverter.getInstance()) {\n+    private static class StyleableProperties {\n+        private static final CssMetaData<ImageView, Number> FIT_HEIGHT =\n+            new CssMetaData<>(\"-fx-fit-height\", SizeConverter.getInstance(), 0.0)\n+        {\n+            @Override\n+            public boolean isSettable(ImageView n) {\n+                return n.fitHeight == null || !n.fitHeight.isBound();\n+            }\n+\n+            @Override\n+            public StyleableProperty<Number> getStyleableProperty(ImageView n) {\n+                return (StyleableProperty<Number>)n.fitHeightProperty();\n+            }\n+        };\n+\n+        private static final CssMetaData<ImageView, Number> FIT_WIDTH =\n+            new CssMetaData<>(\"-fx-fit-width\", SizeConverter.getInstance(), 0.0)\n+        {\n+            @Override\n+            public boolean isSettable(ImageView n) {\n+                return n.fitWidth == null || !n.fitWidth.isBound();\n+            }\n+\n+            @Override\n+            public StyleableProperty<Number> getStyleableProperty(ImageView n) {\n+                return (StyleableProperty<Number>)n.fitWidthProperty();\n+            }\n+        };\n@@ -817,0 +856,3 @@\n+        private static final CssMetaData<ImageView, String> IMAGE =\n+            new CssMetaData<>(\"-fx-image\", URLConverter.getInstance())\n+        {\n@@ -829,7 +871,36 @@\n-         private static final List<CssMetaData<? extends Styleable, ?>> STYLEABLES;\n-         static {\n-            final List<CssMetaData<? extends Styleable, ?>> styleables =\n-                new ArrayList<>(Node.getClassCssMetaData());\n-            styleables.add(IMAGE);\n-            STYLEABLES = Collections.unmodifiableList(styleables);\n-         }\n+        private static final CssMetaData<ImageView, Boolean> PRESERVE_RATIO =\n+            new CssMetaData<>(\"-fx-preserve-ratio\", BooleanConverter.getInstance(), Boolean.FALSE)\n+        {\n+            @Override\n+            public boolean isSettable(ImageView n) {\n+                return n.preserveRatio == null || !n.preserveRatio.isBound();\n+            }\n+\n+            @Override\n+            public StyleableProperty<Boolean> getStyleableProperty(ImageView n) {\n+                return (StyleableProperty<Boolean>)n.preserveRatioProperty();\n+            }\n+        };\n+\n+        private static final CssMetaData<ImageView, Boolean> SMOOTH =\n+            new CssMetaData<>(\"-fx-smooth\", BooleanConverter.getInstance(), SMOOTH_DEFAULT)\n+        {\n+            @Override\n+            public boolean isSettable(ImageView n) {\n+                return n.smooth == null || !n.smooth.isBound();\n+            }\n+\n+            @Override\n+            public StyleableProperty<Boolean> getStyleableProperty(ImageView n) {\n+                return (StyleableProperty<Boolean>)n.smoothProperty();\n+            }\n+        };\n+\n+        private static final List<CssMetaData<? extends Styleable, ?>> STYLEABLES = CssUtil.combine(\n+            Node.getClassCssMetaData(),\n+            FIT_HEIGHT,\n+            FIT_WIDTH,\n+            IMAGE,\n+            PRESERVE_RATIO,\n+            SMOOTH\n+        );\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/image\/ImageView.java","additions":119,"deletions":48,"binary":false,"changes":167,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,0 +77,2 @@\n+        boolean smooth = ImageView.SMOOTH_DEFAULT;\n+\n@@ -78,7 +80,7 @@\n-            config(TEST_IMAGE_VIEW, \"image\", null,\n-                   \"-fx-image\", TEST_IMAGE_URL1, IMAGE_COMPARATOR),\n-            config(TEST_IMAGE_VIEW, \"image\",\n-                   TestImages.TEST_IMAGE_32x32,\n-                   \"-fx-image\", TEST_IMAGE_URL2, IMAGE_COMPARATOR),\n-            config(TEST_IMAGE_VIEW, \"translateX\", 0.0,\n-                   \"-fx-translate-x\", 10.0)\n+            config(TEST_IMAGE_VIEW, \"image\", null, \"-fx-image\", TEST_IMAGE_URL1, IMAGE_COMPARATOR),\n+            config(TEST_IMAGE_VIEW, \"image\", TestImages.TEST_IMAGE_32x32, \"-fx-image\", TEST_IMAGE_URL2, IMAGE_COMPARATOR),\n+            config(TEST_IMAGE_VIEW, \"translateX\", 0.0, \"-fx-translate-x\", 10.0),\n+            config(TEST_IMAGE_VIEW, \"fitHeight\", 0.0, \"-fx-fit-height\", 10.0),\n+            config(TEST_IMAGE_VIEW, \"fitWidth\", 0.0, \"-fx-fit-width\", 10.0),\n+            config(TEST_IMAGE_VIEW, \"preserveRatio\", false, \"-fx-preserve-ratio\", true),\n+            config(TEST_IMAGE_VIEW, \"smooth\", smooth, \"-fx-smooth\", !smooth),\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/image\/ImageView_cssMethods_Test.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"}]}