{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import static org.junit.jupiter.api.Assertions.*;\n@@ -33,0 +32,1 @@\n+import static org.junit.Assert.*;\n@@ -49,4 +49,1 @@\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Disabled;\n-import org.junit.jupiter.api.Test;\n+import org.junit.After;\n@@ -87,0 +84,3 @@\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n@@ -128,2 +128,1 @@\n-    @BeforeEach\n-    public void setup() {\n+    @Before public void setup() {\n@@ -142,1 +141,1 @@\n-    @AfterEach\n+    @After\n@@ -165,2 +164,1 @@\n-    @Test\n-    public void noArgConstructorSetsNonNullSortPolicy() {\n+    @Test public void noArgConstructorSetsNonNullSortPolicy() {\n@@ -174,2 +172,1 @@\n-    @Test\n-    public void noArgConstructorSetsNullOnSort() {\n+    @Test public void noArgConstructorSetsNullOnSort() {\n@@ -239,2 +236,1 @@\n-    @Test\n-    public void selectionModelCanBeBound() {\n+    @Test public void selectionModelCanBeBound() {\n@@ -253,2 +249,1 @@\n-    @Test\n-    public void canSetSelectedItemToAnItemEvenWhenThereAreNoItems() {\n+    @Test public void canSetSelectedItemToAnItemEvenWhenThereAreNoItems() {\n@@ -301,1 +296,1 @@\n-        assertNull(sm.getSelectedItem(), \"Selected Item: \" + sm.getSelectedItem());\n+        assertNull(\"Selected Item: \" + sm.getSelectedItem(), sm.getSelectedItem());\n@@ -430,2 +425,1 @@\n-    @Test\n-    public void testVisibleLeafColumns() {\n+    @Test public void testVisibleLeafColumns() {\n@@ -489,1 +483,1 @@\n-    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n+    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n@@ -504,2 +498,1 @@\n-    @Test\n-    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeSortOrderList() {\n+    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeSortOrderList() {\n@@ -518,3 +511,2 @@\n-    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n-    @Test\n-    public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_AscendingToDescending() {\n+    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n+    @Test public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_AscendingToDescending() {\n@@ -540,2 +532,1 @@\n-    @Test\n-    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_AscendingToDescending() {\n+    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_AscendingToDescending() {\n@@ -558,3 +549,2 @@\n-    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n-    @Test\n-    public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_DescendingToNull() {\n+    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n+    @Test public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_DescendingToNull() {\n@@ -578,2 +568,1 @@\n-    @Test\n-    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_DescendingToNull() {\n+    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_DescendingToNull() {\n@@ -597,1 +586,1 @@\n-    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n+    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n@@ -634,2 +623,1 @@\n-    @Test\n-    public void testSortMethodWithNullSortPolicy() {\n+    @Test public void testSortMethodWithNullSortPolicy() {\n@@ -691,2 +679,1 @@\n-    @Test\n-    public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_ascendingToDescending() {\n+    @Test public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_ascendingToDescending() {\n@@ -705,2 +692,1 @@\n-    @Test\n-    public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_descendingToNull() {\n+    @Test public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_descendingToNull() {\n@@ -719,2 +705,1 @@\n-    @Test\n-    public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_nullToAscending() {\n+    @Test public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_nullToAscending() {\n@@ -775,2 +760,1 @@\n-    @Test\n-    public void testFailedSortPolicyBacksOutComparatorChange_sortOrderRemoval() {\n+    @Test public void testFailedSortPolicyBacksOutComparatorChange_sortOrderRemoval() {\n@@ -794,2 +778,1 @@\n-    @Test\n-    public void testFailedSortPolicyBacksOutComparatorChange_sortTypeChange() {\n+    @Test public void testFailedSortPolicyBacksOutComparatorChange_sortTypeChange() {\n@@ -831,2 +814,1 @@\n-    @Test\n-    public void testInvisibleScrollbarDoesNotScrollTableToBeginning() {\n+    @Test public void testInvisibleScrollbarDoesNotScrollTableToBeginning() {\n@@ -863,2 +845,1 @@\n-    @Test\n-    public void test_rt16019() {\n+    @Test public void test_rt16019() {\n@@ -873,2 +854,1 @@\n-    @Test\n-    public void test_rt15793() {\n+    @Test public void test_rt15793() {\n@@ -899,1 +879,1 @@\n-        assertTrue(fm.isFocused(1), \"Focus is on \" + fm.getFocusedIndex());\n+        assertTrue(\"Focus is on \" + fm.getFocusedIndex(), fm.isFocused(1));\n@@ -905,2 +885,1 @@\n-    @Test\n-    public void test_rt17522_focusShouldMoveWhenItemAddedBeforeFocusIndex() {\n+    @Test public void test_rt17522_focusShouldMoveWhenItemAddedBeforeFocusIndex() {\n@@ -934,2 +913,1 @@\n-    @Test\n-    public void test_rt17522_focusShouldBeResetWhenFocusedItemIsRemoved() {\n+    @Test public void test_rt17522_focusShouldBeResetWhenFocusedItemIsRemoved() {\n@@ -961,2 +939,1 @@\n-    @Test\n-    public void test_rt17522_focusShouldNotMoveWhenItemRemovedAfterFocusIndex() {\n+    @Test public void test_rt17522_focusShouldNotMoveWhenItemRemovedAfterFocusIndex() {\n@@ -984,2 +961,1 @@\n-    @Test\n-    public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsFalse() {\n+    @Test public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsFalse() {\n@@ -994,2 +970,1 @@\n-    @Test\n-    public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsTrue() {\n+    @Test public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsTrue() {\n@@ -1013,2 +988,1 @@\n-    @Test\n-    public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsTrue_columnEditableIsTrue() {\n+    @Test public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsTrue_columnEditableIsTrue() {\n@@ -1043,2 +1017,1 @@\n-    @Test\n-    public void test_rt27820_1() {\n+    @Test public void test_rt27820_1() {\n@@ -1055,2 +1028,1 @@\n-    @Test\n-    public void test_rt27820_2() {\n+    @Test public void test_rt27820_2() {\n@@ -1067,2 +1039,1 @@\n-    @Test\n-    public void test_rt28534() {\n+    @Test public void test_rt28534() {\n@@ -1096,2 +1067,1 @@\n-    @Test\n-    public void test_rt22463() {\n+    @Test public void test_rt22463() {\n@@ -1131,2 +1101,1 @@\n-    @Test\n-    public void test_rt28637() {\n+    @Test public void test_rt28637() {\n@@ -1333,2 +1302,1 @@\n-    @Test\n-    public void test_rt29313_selectedItems() {\n+    @Test public void test_rt29313_selectedItems() {\n@@ -1422,2 +1390,1 @@\n-    @Test\n-    public void test_rt29390() {\n+    @Test public void test_rt29390() {\n@@ -1487,2 +1454,1 @@\n-    @Test\n-    public void test_rt31165() {\n+    @Test public void test_rt31165() {\n@@ -1602,2 +1568,1 @@\n-    @Test\n-    public void test_rt_31200_tableRow() {\n+    @Test public void test_rt_31200_tableRow() {\n@@ -1684,2 +1649,1 @@\n-    @Test\n-    public void test_rt_21517() {\n+    @Test public void test_rt_21517() {\n@@ -2027,2 +1991,1 @@\n-    @Test\n-    public void test_rt_32708_removeFromColumnsList() {\n+    @Test public void test_rt_32708_removeFromColumnsList() {\n@@ -2127,2 +2090,1 @@\n-    @Test\n-    public void test_rt_34685_directEditCall_cellSelectionMode() {\n+    @Test public void test_rt_34685_directEditCall_cellSelectionMode() {\n@@ -2138,2 +2100,1 @@\n-    @Test\n-    public void test_rt_34685_mouseDoubleClick_cellSelectionMode() {\n+    @Test public void test_rt_34685_mouseDoubleClick_cellSelectionMode() {\n@@ -2219,2 +2180,1 @@\n-    @Test\n-    public void test_rt_35224() {\n+    @Test public void test_rt_35224() {\n@@ -2255,2 +2215,1 @@\n-    @Test\n-    public void test_rt_35141_simple_switch_two_columns_move_col2_backward_1_place() {\n+    @Test public void test_rt_35141_simple_switch_two_columns_move_col2_backward_1_place() {\n@@ -2316,2 +2275,1 @@\n-    @Test\n-    public void test_rt_35141_simple_switch_three_columns_move_col2_forward_1_place() {\n+    @Test public void test_rt_35141_simple_switch_three_columns_move_col2_forward_1_place() {\n@@ -2338,2 +2296,1 @@\n-    @Test\n-    public void test_rt_35141_simple_switch_three_columns_move_col3_backward_1_place() {\n+    @Test public void test_rt_35141_simple_switch_three_columns_move_col3_backward_1_place() {\n@@ -2402,2 +2359,1 @@\n-    @Test\n-    public void test_rt_35141_hidden_column_move_col1_forward_1_place() {\n+    @Test public void test_rt_35141_hidden_column_move_col1_forward_1_place() {\n@@ -2426,2 +2382,1 @@\n-    @Test\n-    public void test_rt_35141_hidden_column_move_col1_forward_100_places() {\n+    @Test public void test_rt_35141_hidden_column_move_col1_forward_100_places() {\n@@ -2506,2 +2461,1 @@\n-    @Test\n-    public void test_rt_35141_multiple_hidden_columns_move_col1_to_end() {\n+    @Test public void test_rt_35141_multiple_hidden_columns_move_col1_to_end() {\n@@ -2672,2 +2626,1 @@\n-    @Test\n-    public void test_rt_34042() {\n+    @Test public void test_rt_34042() {\n@@ -2768,2 +2721,1 @@\n-    @Test\n-    public void test_rt35763_observableList() {\n+    @Test public void test_rt35763_observableList() {\n@@ -2817,2 +2769,1 @@\n-    @Test\n-    public void test_rt35763_sortedList() {\n+    @Test public void test_rt35763_sortedList() {\n@@ -2871,1 +2822,1 @@\n-    @Test\n+    @Test(expected = IndexOutOfBoundsException.class)\n@@ -2873,1 +2824,1 @@\n-        assertThrows(IndexOutOfBoundsException.class, () -> readOnlyUnbackedObservableListSubListTest(-1, 0));\n+        readOnlyUnbackedObservableListSubListTest(-1, 0);\n@@ -2876,1 +2827,1 @@\n-    @Test\n+    @Test(expected = IndexOutOfBoundsException.class)\n@@ -2878,1 +2829,1 @@\n-        assertThrows(IndexOutOfBoundsException.class, () -> readOnlyUnbackedObservableListSubListTest(0, 10));\n+        readOnlyUnbackedObservableListSubListTest(0, 10);\n@@ -2881,1 +2832,1 @@\n-    @Test\n+    @Test(expected = IndexOutOfBoundsException.class)\n@@ -2883,1 +2834,1 @@\n-        assertThrows(IndexOutOfBoundsException.class, () -> readOnlyUnbackedObservableListSubListTest(1, 1));\n+        readOnlyUnbackedObservableListSubListTest(1, 1);\n@@ -2948,1 +2899,1 @@\n-        assertEquals(expected, items, \"expected list after\" + modified);\n+        assertEquals(\"expected list after\" + modified, expected, items);\n@@ -3059,2 +3010,1 @@\n-    @Test\n-    public void test_rt36353() {\n+    @Test public void test_rt36353() {\n@@ -3118,2 +3068,1 @@\n-    @Test\n-    public void test_rt36290() {\n+    @Test public void test_rt36290() {\n@@ -3279,2 +3228,1 @@\n-    @Test\n-    public void test_rt_36656_removeFromColumns() {\n+    @Test public void test_rt_36656_removeFromColumns() {\n@@ -3406,2 +3354,1 @@\n-    @Test\n-    public void test_rt_36669() {\n+    @Test public void test_rt_36669() {\n@@ -3556,2 +3503,1 @@\n-    @Test\n-    public void test_rt_37057_test1_MouseEvents() {\n+    @Test public void test_rt_37057_test1_MouseEvents() {\n@@ -3738,2 +3684,1 @@\n-    @Test\n-    public void test_rt_37054_noScroll() {\n+    @Test public void test_rt_37054_noScroll() {\n@@ -3743,2 +3688,1 @@\n-    @Test\n-    public void test_rt_37054_scroll() {\n+    @Test public void test_rt_37054_scroll() {\n@@ -3799,2 +3743,1 @@\n-        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\n-                \"We don't expect any exceptions in this test!\"));\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\"We don't expect any exceptions in this test!\"));\n@@ -3839,2 +3782,1 @@\n-    @Test\n-    public void test_rt_37429_sortEventsShouldNotFireExtraChangeEvents() {\n+    @Test public void test_rt_37429_sortEventsShouldNotFireExtraChangeEvents() {\n@@ -3932,1 +3874,1 @@\n-    @Disabled(\"Fix not yet developed for TableView\")\n+    @Ignore(\"Fix not yet developed for TableView\")\n@@ -3937,1 +3879,1 @@\n-    @Disabled(\"Fix not yet developed for TableView\")\n+    @Ignore(\"Fix not yet developed for TableView\")\n@@ -3942,1 +3884,1 @@\n-    @Disabled(\"Fix not yet developed for TableView\")\n+    @Ignore(\"Fix not yet developed for TableView\")\n@@ -3947,1 +3889,1 @@\n-    @Disabled(\"Fix not yet developed for TableView\")\n+    @Ignore(\"Fix not yet developed for TableView\")\n@@ -4023,2 +3965,1 @@\n-    @Test\n-    public void test_rt_37632() {\n+    @Test public void test_rt_37632() {\n@@ -4106,2 +4047,1 @@\n-    @Test\n-    public void test_rt_38464_cellSelection_selectFirstRowOnly() {\n+    @Test public void test_rt_38464_cellSelection_selectFirstRowOnly() {\n@@ -4165,2 +4105,1 @@\n-    @Test\n-    public void test_rt38464_selectCellMultipleTimes() {\n+    @Test public void test_rt38464_selectCellMultipleTimes() {\n@@ -4233,2 +4172,1 @@\n-    @Test\n-    public void test_rt38464_selectRowThenCell() {\n+    @Test public void test_rt38464_selectRowThenCell() {\n@@ -4276,2 +4214,1 @@\n-    @Test\n-    public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsOneRow() {\n+    @Test public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsOneRow() {\n@@ -4281,2 +4218,1 @@\n-    @Test\n-    public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsTwoRows() {\n+    @Test public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsTwoRows() {\n@@ -4286,2 +4222,1 @@\n-    @Test\n-    public void test_rt38464_selectTests_rowSelection_singleSelection_selectsOneRow() {\n+    @Test public void test_rt38464_selectTests_rowSelection_singleSelection_selectsOneRow() {\n@@ -4356,2 +4291,1 @@\n-    @Test\n-    public void test_rt_37853() {\n+    @Test public void test_rt_37853() {\n@@ -4447,2 +4381,1 @@\n-    @Test\n-    public void test_rt_38892_removeLeftMostColumn() {\n+    @Test public void test_rt_38892_removeLeftMostColumn() {\n@@ -4474,2 +4407,1 @@\n-    @Test\n-    public void test_rt_38892_removeSelectionFromCellsInRemovedColumn() {\n+    @Test public void test_rt_38892_removeSelectionFromCellsInRemovedColumn() {\n@@ -4502,2 +4434,1 @@\n-    @Test\n-    public void test_rt_38787_remove_b_c() {\n+    @Test public void test_rt_38787_remove_b_c() {\n@@ -4518,2 +4449,1 @@\n-    @Test\n-    public void test_rt_38787_remove_z() {\n+    @Test public void test_rt_38787_remove_z() {\n@@ -4910,2 +4840,1 @@\n-    @Test\n-    public void test_rt_39559_useKeyboard_selectAll() {\n+    @Test public void test_rt_39559_useKeyboard_selectAll() {\n@@ -4969,2 +4898,1 @@\n-    @Test\n-    public void test_rt_16068_middleElement_selectRowAndRemoveLaterSibling() {\n+    @Test public void test_rt_16068_middleElement_selectRowAndRemoveLaterSibling() {\n@@ -5018,2 +4946,1 @@\n-    @Test\n-    public void test_rt_39822() {\n+    @Test public void test_rt_39822() {\n@@ -5059,2 +4986,1 @@\n-    @Test\n-    public void test_rt_39842_selectLeftUp() {\n+    @Test public void test_rt_39842_selectLeftUp() {\n@@ -5249,1 +5175,1 @@\n-        assertEquals(expected, sm.getSelectedIndex(), \"selected index after disjoint removes above\");\n+        assertEquals(\"selected index after disjoint removes above\", expected, sm.getSelectedIndex());\n@@ -5257,2 +5183,1 @@\n-    @Test\n-    public void test_rt_40012_accessSelectedAtLastOnDisjointRemoveItemsAbove() {\n+    @Test public void test_rt_40012_accessSelectedAtLastOnDisjointRemoveItemsAbove() {\n@@ -5305,2 +5230,2 @@\n-        assertEquals(last - 2, sm.getSelectedIndex(), \"sanity: selectedIndex must be shifted by -2\");\n-        assertEquals(1, rt_40012_count, \"must fire single event on removes above\");\n+        assertEquals(\"sanity: selectedIndex must be shifted by -2\", last - 2, sm.getSelectedIndex());\n+        assertEquals(\"must fire single event on removes above\", 1, rt_40012_count);\n@@ -5332,2 +5257,2 @@\n-        assertEquals(lastItem, sm.getSelectedItem(), \"sanity: selectedItem unchanged\");\n-        assertEquals(0, rt_40012_count, \"must not fire on unchanged selected item\");\n+        assertEquals(\"sanity: selectedItem unchanged\", lastItem, sm.getSelectedItem());\n+        assertEquals(\"must not fire on unchanged selected item\", 0, rt_40012_count);\n@@ -5357,1 +5282,1 @@\n-            assertEquals(selected, sm.getSelectedIndex(), \"sanity: selectedIndex unchanged\");\n+            assertEquals(\"sanity: selectedIndex unchanged\", selected, sm.getSelectedIndex());\n@@ -5359,1 +5284,1 @@\n-                assertEquals(1, ++rt_40212_count, \"single event on clearAndSelect already selected\");\n+                assertEquals(\"single event on clearAndSelect already selected\", 1, ++rt_40212_count);\n@@ -5362,1 +5287,1 @@\n-                assertTrue(type, \"at least one of the change types must be true\");\n+                assertTrue(\"at least one of the change types must be true\", type);\n@@ -5369,2 +5294,1 @@\n-    @Test\n-    public void test_rt_40280() {\n+    @Test public void test_rt_40280() {\n@@ -5381,2 +5305,1 @@\n-    @Test\n-    public void test_rt_40263() {\n+    @Test public void test_rt_40263() {\n@@ -5414,4 +5337,2 @@\n-    @Test\n-    public void test_rt_40319_toLeft_toBottom()           { test_rt_40319(false, true, false);  }\n-    @Test\n-    public void test_rt_40319_toLeft_toTop()              { test_rt_40319(false, false, false); }\n+    @Test public void test_rt_40319_toLeft_toBottom()           { test_rt_40319(false, true, false);  }\n+    @Test public void test_rt_40319_toLeft_toTop()              { test_rt_40319(false, false, false); }\n@@ -5460,2 +5381,1 @@\n-    @Test\n-    public void test_rt_40546() {\n+    @Test public void test_rt_40546() {\n@@ -5609,2 +5529,1 @@\n-    @Test\n-    public void test_8139460_heightDoesntShrinkAfterRemovingNestedColumns() throws Exception {\n+    @Test public void test_8139460_heightDoesntShrinkAfterRemovingNestedColumns() throws Exception {\n@@ -5621,1 +5540,1 @@\n-        assertTrue(nestedHeaderHeight > initialHeight, \"Nested column header should be larger.\");\n+        assertTrue(\"Nested column header should be larger.\", nestedHeaderHeight > initialHeight);\n@@ -5624,1 +5543,1 @@\n-        assertEquals(initialHeight, row.getHeight(), 0.01, \"Header should shrink to initial size.\");\n+        assertEquals(\"Header should shrink to initial size.\", initialHeight, row.getHeight(), 0.01);\n@@ -5663,2 +5582,1 @@\n-        assertArrayEquals(new String[] {\"column-header\", \"table-column\"},\n-                standardHeader.getStyleClass().toArray());\n+        assertArrayEquals(new String[] {\"column-header\", \"table-column\"}, standardHeader.getStyleClass().toArray());\n@@ -5667,2 +5585,1 @@\n-        assertArrayEquals(new String[] {\"column-header\", \"table-column\", \"custom-style-class\"},\n-                standardWithStyleClassHeader.getStyleClass().toArray());\n+        assertArrayEquals(new String[] {\"column-header\", \"table-column\", \"custom-style-class\"}, standardWithStyleClassHeader.getStyleClass().toArray());\n@@ -5671,2 +5588,1 @@\n-        assertArrayEquals(new String[] {\"nested-column-header\", \"table-column\", \"parent\"},\n-                parentHeader.getStyleClass().toArray());\n+        assertArrayEquals(new String[] {\"nested-column-header\", \"table-column\", \"parent\"}, parentHeader.getStyleClass().toArray());\n@@ -5675,2 +5591,1 @@\n-        assertArrayEquals(new String[] {\"column-header\", \"table-column\", \"child\"},\n-                childHeader.getStyleClass().toArray());\n+        assertArrayEquals(new String[] {\"column-header\", \"table-column\", \"child\"}, childHeader.getStyleClass().toArray());\n@@ -5783,2 +5698,1 @@\n-        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\n-                \"We don't expect any exceptions in this test!\"));\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\"We don't expect any exceptions in this test!\"));\n@@ -5828,2 +5742,1 @@\n-        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\n-                \"We don't expect any exceptions in this test!\"));\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\"We don't expect any exceptions in this test!\"));\n@@ -6125,1 +6038,1 @@\n-        assertEquals(observableArrayList(), result);\n+        assertEquals(FXCollections.observableArrayList(), result);\n@@ -6165,2 +6078,2 @@\n-\n-        assertDoesNotThrow(() -> Toolkit.getToolkit().firePulse());\n+        \/\/ Should not throw an NPE.\n+        Toolkit.getToolkit().firePulse();\n@@ -6172,2 +6085,2 @@\n-\n-        assertDoesNotThrow(() -> table.queryAccessibleAttribute(AccessibleAttribute.ROW_COUNT));\n+        \/\/ Should not throw an NPE.\n+        table.queryAccessibleAttribute(AccessibleAttribute.ROW_COUNT);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewTest.java","additions":125,"deletions":212,"binary":false,"changes":337,"status":"modified"},{"patch":"@@ -30,1 +30,9 @@\n-import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n@@ -40,4 +48,4 @@\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Disabled;\n-import org.junit.jupiter.api.Test;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n@@ -150,2 +158,1 @@\n-    @BeforeEach\n-    public void setup() {\n+    @Before public void setup() {\n@@ -190,1 +197,1 @@\n-    @AfterEach\n+    @After\n@@ -252,2 +259,1 @@\n-    @Test\n-    public void noArgConstructorSetsNonNullSelectionModel() {\n+    @Test public void noArgConstructorSetsNonNullSelectionModel() {\n@@ -257,2 +263,1 @@\n-    @Test\n-    public void noArgConstructor_selectedItemIsNull() {\n+    @Test public void noArgConstructor_selectedItemIsNull() {\n@@ -262,2 +267,1 @@\n-    @Test\n-    public void noArgConstructor_selectedIndexIsNegativeOne() {\n+    @Test public void noArgConstructor_selectedIndexIsNegativeOne() {\n@@ -267,2 +271,1 @@\n-    @Test\n-    public void noArgConstructorSetsNonNullSortPolicy() {\n+    @Test public void noArgConstructorSetsNonNullSortPolicy() {\n@@ -272,2 +275,1 @@\n-    @Test\n-    public void noArgConstructorSetsNullComparator() {\n+    @Test public void noArgConstructorSetsNullComparator() {\n@@ -281,2 +283,1 @@\n-    @Test\n-    public void noArgConstructorSetsDefaultColumnResizePolicyPseudoclass() {\n+    @Test public void noArgConstructorSetsDefaultColumnResizePolicyPseudoclass() {\n@@ -288,2 +289,1 @@\n-    @Test\n-    public void singleArgConstructorSetsDefaultColumnResizePolicyPseudoclass() {\n+    @Test public void singleArgConstructorSetsDefaultColumnResizePolicyPseudoclass() {\n@@ -325,2 +325,1 @@\n-    @Test\n-    public void testColumns() {\n+    @Test public void testColumns() {\n@@ -339,2 +338,1 @@\n-    @Test\n-    public void testVisibleLeafColumns() {\n+    @Test public void testVisibleLeafColumns() {\n@@ -353,2 +351,1 @@\n-    @Test\n-    public void testSortOrderCleanup() {\n+    @Test public void testSortOrderCleanup() {\n@@ -427,2 +424,1 @@\n-    @Test\n-    public void testSelectionUpdatesCorrectlyAfterRootReverseAndSetAll() {\n+    @Test public void testSelectionUpdatesCorrectlyAfterRootReverseAndSetAll() {\n@@ -436,1 +432,1 @@\n-    @Disabled(\"JDK-8193442\")\n+    @Ignore(\"JDK-8193442\")\n@@ -447,3 +443,2 @@\n-    @Disabled(\"JDK-8248389\")\n-    @Test\n-    public void testSelectionUpdatesCorrectlyAfterAddingAnItemBeforeSelectedItem() {\n+    @Ignore(\"JDK-8248389\")\n+    @Test public void testSelectionUpdatesCorrectlyAfterAddingAnItemBeforeSelectedItem() {\n@@ -460,2 +455,1 @@\n-    @Test\n-    public void testSelectionUpdatesCorrectlyAfterChildReverseAndSetAll() {\n+    @Test public void testSelectionUpdatesCorrectlyAfterChildReverseAndSetAll() {\n@@ -469,3 +463,2 @@\n-    @Disabled(\"JDK-8193442\")\n-    @Test\n-    public void testSelectionUpdatesCorrectlyAfterChildReverseRemoveOneAndSetAll() {\n+    @Ignore(\"JDK-8193442\")\n+    @Test public void testSelectionUpdatesCorrectlyAfterChildReverseRemoveOneAndSetAll() {\n@@ -480,3 +473,2 @@\n-    @Disabled(\"JDK-8193442\")\n-    @Test\n-    public void testSelectionUpdatesCorrectlyAfterChildRemoveOneAndSetAll() {\n+    @Ignore(\"JDK-8193442\")\n+    @Test public void testSelectionUpdatesCorrectlyAfterChildRemoveOneAndSetAll() {\n@@ -490,1 +482,1 @@\n-    @Disabled(\"JDK-8193442\")\n+    @Ignore(\"JDK-8193442\")\n@@ -615,2 +607,2 @@\n-            assertTrue(isCellStillSelected, \"The item (\" + beforePos.getRow() + \", \" + beforePos.getColumn() +\n-                    \") lost selection during permutation\");\n+            assertTrue(\"The item (\" + beforePos.getRow() + \", \" + beforePos.getColumn() +\n+                    \") lost selection during permutation\", isCellStillSelected);\n@@ -623,2 +615,2 @@\n-            assertTrue(selectedItems.contains(item),\n-                    \"The item (\" + item + \") lost selection during permutation\");\n+            assertTrue(\"The item (\" + item + \") lost selection during permutation\",\n+                    selectedItems.contains(item));\n@@ -641,3 +633,2 @@\n-        assertEquals(selectedItemBefore, sm.getSelectedItem(), \"Selected Item should remain same\");\n-        assertEquals(treeTableView.getRow(selectedItemBefore), sm.getSelectedIndex(),\n-                \"Selected index should be updated\");\n+        assertEquals(\"Selected Item should remain same\", selectedItemBefore, sm.getSelectedItem());\n+        assertEquals(\"Selected index should be updated\", treeTableView.getRow(selectedItemBefore), sm.getSelectedIndex());\n@@ -650,1 +641,1 @@\n-    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n+    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n@@ -665,2 +656,1 @@\n-    @Test\n-    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeSortOrderList() {\n+    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeSortOrderList() {\n@@ -679,1 +669,1 @@\n-    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n+    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n@@ -700,2 +690,1 @@\n-    @Test\n-    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_AscendingToDescending() {\n+    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_AscendingToDescending() {\n@@ -718,3 +707,2 @@\n-    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n-    @Test\n-    public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_DescendingToNull() {\n+    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n+    @Test public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_DescendingToNull() {\n@@ -738,2 +726,1 @@\n-    @Test\n-    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_DescendingToNull() {\n+    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_DescendingToNull() {\n@@ -757,3 +744,2 @@\n-    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n-    @Test\n-    public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_NullToAscending() {\n+    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n+    @Test public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_NullToAscending() {\n@@ -777,2 +763,1 @@\n-    @Test\n-    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_NullToAscending() {\n+    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_NullToAscending() {\n@@ -796,2 +781,1 @@\n-    @Test\n-    public void testSortMethodWithNullSortPolicy() {\n+    @Test public void testSortMethodWithNullSortPolicy() {\n@@ -804,2 +788,1 @@\n-    @Test\n-    public void testNoIOOBEWhenSortingAfterSelectAndClearRootChildren() {\n+    @Test public void testNoIOOBEWhenSortingAfterSelectAndClearRootChildren() {\n@@ -824,2 +807,1 @@\n-    @Test\n-    public void testSetSortOrderRetainsWhenRootHasNoChildren() {\n+    @Test public void testSetSortOrderRetainsWhenRootHasNoChildren() {\n@@ -837,2 +819,1 @@\n-    @Test\n-    public void testNPEWhenRootItemIsNull() {\n+    @Test public void testNPEWhenRootItemIsNull() {\n@@ -845,2 +826,1 @@\n-    @Test\n-    public void testChangingSortPolicyUpdatesItemsList() {\n+    @Test public void testChangingSortPolicyUpdatesItemsList() {\n@@ -856,2 +836,1 @@\n-    @Test\n-    public void testChangingSortPolicyDoesNotUpdateItemsListWhenTheSortOrderListIsEmpty() {\n+    @Test public void testChangingSortPolicyDoesNotUpdateItemsListWhenTheSortOrderListIsEmpty() {\n@@ -866,2 +845,1 @@\n-    @Test\n-    public void testFailedSortPolicyBacksOutLastChange_sortOrderAddition() {\n+    @Test public void testFailedSortPolicyBacksOutLastChange_sortOrderAddition() {\n@@ -881,2 +859,1 @@\n-    @Test\n-    public void testFailedSortPolicyBacksOutLastChange_sortOrderRemoval() {\n+    @Test public void testFailedSortPolicyBacksOutLastChange_sortOrderRemoval() {\n@@ -898,2 +875,1 @@\n-    @Test\n-    public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_ascendingToDescending() {\n+    @Test public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_ascendingToDescending() {\n@@ -912,2 +888,1 @@\n-    @Test\n-    public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_descendingToNull() {\n+    @Test public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_descendingToNull() {\n@@ -926,2 +901,1 @@\n-    @Test\n-    public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_nullToAscending() {\n+    @Test public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_nullToAscending() {\n@@ -940,2 +914,1 @@\n-    @Test\n-    public void testComparatorChangesInSyncWithSortOrder_1() {\n+    @Test public void testComparatorChangesInSyncWithSortOrder_1() {\n@@ -952,2 +925,1 @@\n-    @Test\n-    public void testComparatorChangesInSyncWithSortOrder_2() {\n+    @Test public void testComparatorChangesInSyncWithSortOrder_2() {\n@@ -1001,2 +973,1 @@\n-    @Test\n-    public void testFailedSortPolicyBacksOutComparatorChange_sortTypeChange() {\n+    @Test public void testFailedSortPolicyBacksOutComparatorChange_sortTypeChange() {\n@@ -1127,2 +1098,1 @@\n-    @Test\n-    public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsFalse() {\n+    @Test public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsFalse() {\n@@ -1137,2 +1107,1 @@\n-    @Test\n-    public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsTrue() {\n+    @Test public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsTrue() {\n@@ -1147,2 +1116,1 @@\n-    @Test\n-    public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsTrue_columnEditableIsFalse() {\n+    @Test public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsTrue_columnEditableIsFalse() {\n@@ -1213,2 +1181,1 @@\n-    @Test\n-    public void noArgConstructorSetsTheStyleClass() {\n+    @Test public void noArgConstructorSetsTheStyleClass() {\n@@ -1218,2 +1185,1 @@\n-    @Test\n-    public void noArgConstructorSetsNullItems() {\n+    @Test public void noArgConstructorSetsNullItems() {\n@@ -1232,2 +1198,1 @@\n-    @Test\n-    public void selectionModelCanBeNull() {\n+    @Test public void selectionModelCanBeNull() {\n@@ -1238,2 +1203,1 @@\n-    @Test\n-    public void selectionModelCanBeBound() {\n+    @Test public void selectionModelCanBeBound() {\n@@ -1248,2 +1212,1 @@\n-    @Test\n-    public void selectionModelCanBeChanged() {\n+    @Test public void selectionModelCanBeChanged() {\n@@ -1256,2 +1219,1 @@\n-    @Test\n-    public void canSetSelectedItemToAnItemEvenWhenThereAreNoItems() {\n+    @Test public void canSetSelectedItemToAnItemEvenWhenThereAreNoItems() {\n@@ -1264,2 +1226,1 @@\n-    @Test\n-    public void canSetSelectedItemToAnItemNotInTheDataModel() {\n+    @Test public void canSetSelectedItemToAnItemNotInTheDataModel() {\n@@ -1273,2 +1234,1 @@\n-    @Test\n-    public void settingTheSelectedItemToAnItemInItemsResultsInTheCorrectSelectedIndex() {\n+    @Test public void settingTheSelectedItemToAnItemInItemsResultsInTheCorrectSelectedIndex() {\n@@ -1281,3 +1241,2 @@\n-    @Disabled(\"Not yet supported\")\n-    @Test\n-    public void settingTheSelectedItemToANonexistantItemAndThenSettingItemsWhichContainsItResultsInCorrectSelectedIndex() {\n+    @Ignore(\"Not yet supported\")\n+    @Test public void settingTheSelectedItemToANonexistantItemAndThenSettingItemsWhichContainsItResultsInCorrectSelectedIndex() {\n@@ -1290,3 +1249,2 @@\n-    @Disabled(\"Not yet supported\")\n-    @Test\n-    public void ensureSelectionClearsWhenAllItemsAreRemoved_selectIndex0() {\n+    @Ignore(\"Not yet supported\")\n+    @Test public void ensureSelectionClearsWhenAllItemsAreRemoved_selectIndex0() {\n@@ -1300,3 +1258,2 @@\n-    @Disabled(\"Not yet supported\")\n-    @Test\n-    public void ensureSelectionClearsWhenAllItemsAreRemoved_selectIndex2() {\n+    @Ignore(\"Not yet supported\")\n+    @Test public void ensureSelectionClearsWhenAllItemsAreRemoved_selectIndex2() {\n@@ -1310,1 +1267,1 @@\n-    @Disabled(\"Not yet supported\")\n+    @Ignore(\"Not yet supported\")\n@@ -1330,2 +1287,1 @@\n-    @Test\n-    public void ensureSelectionIsCorrectWhenItemsChange() {\n+    @Test public void ensureSelectionIsCorrectWhenItemsChange() {\n@@ -1344,2 +1300,1 @@\n-    @Test\n-    public void ensureSelectionRemainsOnBranchWhenExpanded() {\n+    @Test public void ensureSelectionRemainsOnBranchWhenExpanded() {\n@@ -1358,2 +1313,1 @@\n-    @Test\n-    public void ensureRootIndexIsZeroWhenRootIsShowing() {\n+    @Test public void ensureRootIndexIsZeroWhenRootIsShowing() {\n@@ -1364,2 +1318,1 @@\n-    @Test\n-    public void ensureRootIndexIsNegativeOneWhenRootIsNotShowing() {\n+    @Test public void ensureRootIndexIsNegativeOneWhenRootIsNotShowing() {\n@@ -1371,2 +1324,1 @@\n-    @Test\n-    public void ensureCorrectIndexWhenRootTreeItemHasParent() {\n+    @Test public void ensureCorrectIndexWhenRootTreeItemHasParent() {\n@@ -1381,2 +1333,1 @@\n-    @Test\n-    public void ensureCorrectIndexWhenRootTreeItemHasParentAndRootIsNotShowing() {\n+    @Test public void ensureCorrectIndexWhenRootTreeItemHasParentAndRootIsNotShowing() {\n@@ -1429,2 +1380,1 @@\n-    @Disabled\n-    @Test public void test_rt17112() {\n+    @Ignore @Test public void test_rt17112() {\n@@ -1479,2 +1429,1 @@\n-    @Test\n-    public void test_rt17522_focusShouldMoveWhenItemAddedAtFocusIndex_1() {\n+    @Test public void test_rt17522_focusShouldMoveWhenItemAddedAtFocusIndex_1() {\n@@ -1494,2 +1443,1 @@\n-    @Test\n-    public void test_rt17522_focusShouldMoveWhenItemAddedBeforeFocusIndex_1() {\n+    @Test public void test_rt17522_focusShouldMoveWhenItemAddedBeforeFocusIndex_1() {\n@@ -1503,1 +1451,1 @@\n-        assertTrue(fm.isFocused(2), \"Focused index: \" + fm.getFocusedIndex());\n+        assertTrue(\"Focused index: \" + fm.getFocusedIndex(), fm.isFocused(2));\n@@ -1514,1 +1462,1 @@\n-        assertTrue(fm.isFocused(1), \"Focused index: \" + fm.getFocusedIndex());\n+        assertTrue(\"Focused index: \" + fm.getFocusedIndex(), fm.isFocused(1));\n@@ -1517,2 +1465,1 @@\n-    @Test\n-    public void test_rt17522_focusShouldBeMovedWhenFocusedItemIsRemoved_1() {\n+    @Test public void test_rt17522_focusShouldBeMovedWhenFocusedItemIsRemoved_1() {\n@@ -1529,2 +1476,1 @@\n-    @Test\n-    public void test_rt17522_focusShouldMoveWhenItemRemovedBeforeFocusIndex_1() {\n+    @Test public void test_rt17522_focusShouldMoveWhenItemRemovedBeforeFocusIndex_1() {\n@@ -1555,2 +1501,1 @@\n-    @Test\n-    public void test_rt18385() {\n+    @Test public void test_rt18385() {\n@@ -1565,2 +1510,1 @@\n-    @Test\n-    public void test_rt18339_onlyEditWhenTreeTableViewIsEditable_editableIsFalse() {\n+    @Test public void test_rt18339_onlyEditWhenTreeTableViewIsEditable_editableIsFalse() {\n@@ -1606,2 +1550,1 @@\n-    @Test\n-    public void test_rt14451() {\n+    @Test public void test_rt14451() {\n@@ -1633,2 +1576,1 @@\n-    @Test\n-    public void test_rt27181() {\n+    @Test public void test_rt27181() {\n@@ -1647,2 +1589,1 @@\n-    @Test\n-    public void test_rt27185() {\n+    @Test public void test_rt27185() {\n@@ -1661,2 +1602,1 @@\n-    @Test\n-    public void test_rt28114() {\n+    @Test public void test_rt28114() {\n@@ -1679,2 +1619,1 @@\n-    @Test\n-    public void test_rt27820_1() {\n+    @Test public void test_rt27820_1() {\n@@ -1712,2 +1651,1 @@\n-    @Test\n-    public void test_rt28390() {\n+    @Test public void test_rt28390() {\n@@ -1755,3 +1693,2 @@\n-    @Disabled(\"This test begun failing when createDefaultCellImpl was removed from TreeTableViewSkin on 28\/3\/2013\")\n-    @Test\n-    public void test_rt28534() {\n+    @Ignore(\"This test begun failing when createDefaultCellImpl was removed from TreeTableViewSkin on 28\/3\/2013\")\n+    @Test public void test_rt28534() {\n@@ -1838,2 +1775,1 @@\n-    @Test\n-    public void test_rt28637() {\n+    @Test public void test_rt28637() {\n@@ -1866,2 +1802,1 @@\n-    @Test\n-    public void test_rt24844() {\n+    @Test public void test_rt24844() {\n@@ -1945,2 +1880,1 @@\n-    @Test\n-    public void test_rt29330_1() {\n+    @Test public void test_rt29330_1() {\n@@ -1994,2 +1928,1 @@\n-    @Test\n-    public void test_rt29330_2() {\n+    @Test public void test_rt29330_2() {\n@@ -2044,2 +1977,1 @@\n-    @Test\n-    public void test_rt29313_selectedIndices() {\n+    @Test public void test_rt29313_selectedIndices() {\n@@ -2146,2 +2078,1 @@\n-    @Test\n-    public void test_rt29566() {\n+    @Test public void test_rt29566() {\n@@ -2254,2 +2185,1 @@\n-    @Test\n-    public void test_rt29676_withText() {\n+    @Test public void test_rt29676_withText() {\n@@ -2349,1 +2279,1 @@\n-        assertTrue(sm.isSelected(1), sm.getSelectedIndices().toString());   \/\/ salesDepartment\n+        assertTrue(sm.getSelectedIndices().toString(), sm.isSelected(1));   \/\/ salesDepartment\n@@ -2354,2 +2284,1 @@\n-    @Test\n-    public void test_rt27180_collapseBranch_laterSiblingSelected_singleSelection() {\n+    @Test public void test_rt27180_collapseBranch_laterSiblingSelected_singleSelection() {\n@@ -2370,1 +2299,1 @@\n-        assertTrue(sm.isSelected(2), debug());   \/\/ itSupport\n+        assertTrue(debug(), sm.isSelected(2));   \/\/ itSupport\n@@ -2390,1 +2319,1 @@\n-        assertEquals(3, sm.getSelectedIndices().size(), debug());\n+        assertEquals(debug(), 3, sm.getSelectedIndices().size());\n@@ -2393,1 +2322,1 @@\n-        assertTrue(sm.isSelected(2), debug());   \/\/ itSupport\n+        assertTrue(debug(), sm.isSelected(2));   \/\/ itSupport\n@@ -2400,2 +2329,1 @@\n-    @Test\n-    public void test_rt27180_expandBranch_laterSiblingSelected_singleSelection() {\n+    @Test public void test_rt27180_expandBranch_laterSiblingSelected_singleSelection() {\n@@ -2416,1 +2344,1 @@\n-        assertTrue(sm.isSelected(8), debug());   \/\/ itSupport\n+        assertTrue(debug(), sm.isSelected(8));   \/\/ itSupport\n@@ -2421,2 +2349,1 @@\n-    @Test\n-    public void test_rt27180_expandBranch_laterSiblingAndChildrenSelected() {\n+    @Test public void test_rt27180_expandBranch_laterSiblingAndChildrenSelected() {\n@@ -2440,1 +2367,1 @@\n-        assertTrue(sm.isSelected(8), debug());   \/\/ itSupport\n+        assertTrue(debug(), sm.isSelected(8));   \/\/ itSupport\n@@ -2447,2 +2374,1 @@\n-    @Test\n-    public void test_rt30400() {\n+    @Test public void test_rt30400() {\n@@ -2469,3 +2395,2 @@\n-    @Disabled(\"This bug is not yet fixed\")\n-    @Test\n-    public void test_rt31165() {\n+    @Ignore(\"This bug is not yet fixed\")\n+    @Test public void test_rt31165() {\n@@ -2498,2 +2423,1 @@\n-    @Test\n-    public void test_rt31404() {\n+    @Test public void test_rt31404() {\n@@ -2514,2 +2438,1 @@\n-    @Test\n-    public void test_rt31471() {\n+    @Test public void test_rt31471() {\n@@ -2535,2 +2458,1 @@\n-    @Test\n-    public void test_rt30466() {\n+    @Test public void test_rt30466() {\n@@ -2584,2 +2506,1 @@\n-    @Test\n-    public void test_rt_31200_tableCell() {\n+    @Test public void test_rt_31200_tableCell() {\n@@ -2636,2 +2557,1 @@\n-    @Test\n-    public void test_rt_31200_tableRow() {\n+    @Test public void test_rt_31200_tableRow() {\n@@ -2686,2 +2606,1 @@\n-    @Test\n-    public void test_rt_31727() {\n+    @Test public void test_rt_31727() {\n@@ -2769,1 +2688,1 @@\n-        assertTrue(sm.isSelected(1), debug());\n+        assertTrue(debug(), sm.isSelected(1));\n@@ -2824,2 +2743,1 @@\n-    @Test\n-    public void test_rt_30484_treeTableRow() {\n+    @Test public void test_rt_30484_treeTableRow() {\n@@ -2865,2 +2783,1 @@\n-    @Test\n-    public void test_rt_31015() {\n+    @Test public void test_rt_31015() {\n@@ -2913,2 +2830,2 @@\n-        assertEquals(TreeTableViewShim.get_contentWidth(treeTableView), TableColumnBaseShim.getWidth(col),\n-                0.0);\n+        assertEquals(TreeTableViewShim.get_contentWidth(treeTableView),\n+                TableColumnBaseShim.getWidth(col), 0.0);\n@@ -2922,2 +2839,1 @@\n-    @Test\n-    public void test_rt_29650() {\n+    @Test public void test_rt_29650() {\n@@ -2964,2 +2880,1 @@\n-    @Test\n-    public void test_rt_29849() {\n+    @Test public void test_rt_29849() {\n@@ -2994,2 +2909,1 @@\n-    @Test\n-    public void test_rt_34327() {\n+    @Test public void test_rt_34327() {\n@@ -3043,2 +2957,1 @@\n-    @Test\n-    public void test_rt26718() {\n+    @Test public void test_rt26718() {\n@@ -3086,2 +2999,1 @@\n-    @Test\n-    public void test_rt_34493() {\n+    @Test public void test_rt_34493() {\n@@ -3129,2 +3041,1 @@\n-    @Test\n-    public void test_rt26721_collapseParent_firstRootChild() {\n+    @Test public void test_rt26721_collapseParent_firstRootChild() {\n@@ -3171,2 +3082,1 @@\n-    @Test\n-    public void test_rt26721_collapseParent_lastRootChild() {\n+    @Test public void test_rt26721_collapseParent_lastRootChild() {\n@@ -3211,2 +3121,1 @@\n-    @Test\n-    public void test_rt26721_collapseGrandParent() {\n+    @Test public void test_rt26721_collapseGrandParent() {\n@@ -3253,2 +3162,1 @@\n-    @Test\n-    public void test_rt_34685_directEditCall_cellSelectionMode() {\n+    @Test public void test_rt_34685_directEditCall_cellSelectionMode() {\n@@ -3264,2 +3172,1 @@\n-    @Test\n-    public void test_rt_34685_mouseDoubleClick_cellSelectionMode() {\n+    @Test public void test_rt_34685_mouseDoubleClick_cellSelectionMode() {\n@@ -3270,2 +3177,1 @@\n-    @Test\n-    public void test_rt_34685_mouseDoubleClick_rowSelectionMode() {\n+    @Test public void test_rt_34685_mouseDoubleClick_rowSelectionMode() {\n@@ -3351,2 +3257,1 @@\n-    @Test\n-    public void test_rt34694() {\n+    @Test public void test_rt34694() {\n@@ -3387,2 +3292,1 @@\n-    @Test\n-    public void test_rt35213() {\n+    @Test public void test_rt35213() {\n@@ -3459,2 +3363,1 @@\n-    @Test\n-    public void test_rt23245_itemIsInTree() {\n+    @Test public void test_rt23245_itemIsInTree() {\n@@ -3495,2 +3398,1 @@\n-    @Test\n-    public void test_rt23245_itemIsNotInTree_noRootNode() {\n+    @Test public void test_rt23245_itemIsNotInTree_noRootNode() {\n@@ -3522,2 +3424,1 @@\n-    @Test\n-    public void test_rt23245_itemIsNotInTree_withUnrelatedRootNode() {\n+    @Test public void test_rt23245_itemIsNotInTree_withUnrelatedRootNode() {\n@@ -3551,2 +3452,1 @@\n-    @Test\n-    public void test_rt35039_setRoot() {\n+    @Test public void test_rt35039_setRoot() {\n@@ -3580,2 +3480,1 @@\n-    @Test\n-    public void test_rt35039_resetRootChildren() {\n+    @Test public void test_rt35039_resetRootChildren() {\n@@ -3609,2 +3508,1 @@\n-    @Test\n-    public void test_rt35763() {\n+    @Test public void test_rt35763() {\n@@ -3627,1 +3525,1 @@\n-        assertEquals(aaa, treeView.getTreeItem(2));\n+        assertEquals(aaa,treeView.getTreeItem(2));\n@@ -3639,1 +3537,1 @@\n-        assertEquals(aaa, treeView.getTreeItem(1));\n+        assertEquals(aaa,treeView.getTreeItem(1));\n@@ -3652,1 +3550,1 @@\n-        assertEquals(ccc, treeView.getTreeItem(2));\n+        assertEquals(ccc,treeView.getTreeItem(2));\n@@ -3715,1 +3613,1 @@\n-        assertEquals(expected, items, \"expected list after\" + modified);\n+        assertEquals(\"expected list after\" + modified, expected, items);\n@@ -3719,2 +3617,1 @@\n-    @Test\n-    public void test_rt35857() {\n+    @Test public void test_rt35857() {\n@@ -3795,2 +3692,1 @@\n-    @Test\n-    public void test_rt25679_rowSelection() {\n+    @Test public void test_rt25679_rowSelection() {\n@@ -3800,2 +3696,1 @@\n-    @Test\n-    public void test_rt25679_cellSelection() {\n+    @Test public void test_rt25679_cellSelection() {\n@@ -3853,2 +3748,1 @@\n-    @Test\n-    public void test_rt36885() {\n+    @Test public void test_rt36885() {\n@@ -3858,2 +3752,1 @@\n-    @Test\n-    public void test_rt36885_addChildAfterSelection() {\n+    @Test public void test_rt36885_addChildAfterSelection() {\n@@ -3909,2 +3802,1 @@\n-    @Test\n-    public void test_rt_37061() {\n+    @Test public void test_rt_37061() {\n@@ -3934,2 +3826,1 @@\n-    @Test\n-    public void test_rt_37054_noScroll() {\n+    @Test public void test_rt_37054_noScroll() {\n@@ -3939,2 +3830,1 @@\n-    @Test\n-    public void test_rt_37054_scroll() {\n+    @Test public void test_rt_37054_scroll() {\n@@ -4001,2 +3891,1 @@\n-    @Test\n-    public void test_rt_37395() {\n+    @Test public void test_rt_37395() {\n@@ -4119,2 +4008,1 @@\n-    @Test\n-    public void test_rt_37429() {\n+    @Test public void test_rt_37429() {\n@@ -4170,2 +4058,1 @@\n-    @Test\n-    public void test_rt_37429_sortEventsShouldNotFireExtraChangeEvents() {\n+    @Test public void test_rt_37429_sortEventsShouldNotFireExtraChangeEvents() {\n@@ -4226,2 +4113,1 @@\n-    @Test\n-    public void test_rt_37538_noCNextCall() {\n+    @Test public void test_rt_37538_noCNextCall() {\n@@ -4231,2 +4117,1 @@\n-    @Test\n-    public void test_rt_37538_callCNextOnce() {\n+    @Test public void test_rt_37538_callCNextOnce() {\n@@ -4278,2 +4163,1 @@\n-    @Test\n-    public void test_rt_37593() {\n+    @Test public void test_rt_37593() {\n@@ -4312,1 +4196,1 @@\n-        assertTrue(sm.isSelected(4), debug());\n+        assertTrue(debug(), sm.isSelected(4));\n@@ -4319,1 +4203,1 @@\n-        assertTrue(sm.isSelected(4), debug());\n+        assertTrue(debug(), sm.isSelected(4));\n@@ -4326,2 +4210,1 @@\n-    @Test\n-    public void test_rt_35395_testCell_notFixedCellSize() {\n+    @Test public void test_rt_35395_testCell_notFixedCellSize() {\n@@ -4331,1 +4214,1 @@\n-    @Disabled(\"Fix not yet developed for TreeTableView\")\n+    @Ignore(\"Fix not yet developed for TreeTableView\")\n@@ -4336,3 +4219,2 @@\n-    @Disabled(\"Fix not yet developed for TreeTableView\")\n-    @Test\n-    public void test_rt_35395_testRow_notFixedCellSize() {\n+    @Ignore(\"Fix not yet developed for TreeTableView\")\n+    @Test public void test_rt_35395_testRow_notFixedCellSize() {\n@@ -4472,2 +4354,1 @@\n-    @Test\n-    public void test_rt_38464_rowSelection_selectFirstRowOnly() {\n+    @Test public void test_rt_38464_rowSelection_selectFirstRowOnly() {\n@@ -4490,2 +4371,1 @@\n-    @Test\n-    public void test_rt_38464_rowSelection_selectFirstRowAndThenCallNoOpMethods() {\n+    @Test public void test_rt_38464_rowSelection_selectFirstRowAndThenCallNoOpMethods() {\n@@ -4512,2 +4392,1 @@\n-    @Test\n-    public void test_rt_38464_cellSelection_selectFirstRowOnly() {\n+    @Test public void test_rt_38464_cellSelection_selectFirstRowOnly() {\n@@ -4533,2 +4412,1 @@\n-    @Test\n-    public void test_rt_38464_cellSelection_selectFirstRowAndThenCallNoOpMethods() {\n+    @Test public void test_rt_38464_cellSelection_selectFirstRowAndThenCallNoOpMethods() {\n@@ -4556,2 +4434,1 @@\n-    @Test\n-    public void test_rt38464_selectCellMultipleTimes() {\n+    @Test public void test_rt38464_selectCellMultipleTimes() {\n@@ -4581,2 +4458,1 @@\n-    @Test\n-    public void test_rt38464_selectCellThenRow() {\n+    @Test public void test_rt38464_selectCellThenRow() {\n@@ -4609,2 +4485,1 @@\n-    @Test\n-    public void test_rt38464_selectRowThenCell() {\n+    @Test public void test_rt38464_selectRowThenCell() {\n@@ -4636,2 +4511,1 @@\n-    @Test\n-    public void test_rt38464_selectTests_cellSelection_singleSelection_selectsOneRow() {\n+    @Test public void test_rt38464_selectTests_cellSelection_singleSelection_selectsOneRow() {\n@@ -4641,2 +4515,1 @@\n-    @Test\n-    public void test_rt38464_selectTests_cellSelection_singleSelection_selectsTwoRows() {\n+    @Test public void test_rt38464_selectTests_cellSelection_singleSelection_selectsTwoRows() {\n@@ -4646,2 +4519,1 @@\n-    @Test\n-    public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsOneRow() {\n+    @Test public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsOneRow() {\n@@ -4651,2 +4523,1 @@\n-    @Test\n-    public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsTwoRows() {\n+    @Test public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsTwoRows() {\n@@ -4656,2 +4527,1 @@\n-    @Test\n-    public void test_rt38464_selectTests_rowSelection_singleSelection_selectsOneRow() {\n+    @Test public void test_rt38464_selectTests_rowSelection_singleSelection_selectsOneRow() {\n@@ -4665,2 +4535,1 @@\n-    @Test\n-    public void test_rt38464_selectTests_rowSelection_multipleSelection_selectsOneRow() {\n+    @Test public void test_rt38464_selectTests_rowSelection_multipleSelection_selectsOneRow() {\n@@ -4670,2 +4539,1 @@\n-    @Test\n-    public void test_rt38464_selectTests_rowSelection_multipleSelection_selectsTwoRows() {\n+    @Test public void test_rt38464_selectTests_rowSelection_multipleSelection_selectsTwoRows() {\n@@ -4718,2 +4586,1 @@\n-    @Test\n-    public void test_rt_37853_replaceRoot() {\n+    @Test public void test_rt_37853_replaceRoot() {\n@@ -4723,2 +4590,1 @@\n-    @Test\n-    public void test_rt_37853_replaceRootChildren() {\n+    @Test public void test_rt_37853_replaceRootChildren() {\n@@ -4810,2 +4676,1 @@\n-    @Test\n-    public void test_rt_38892_focusMovesToLeftWhenPossible() {\n+    @Test public void test_rt_38892_focusMovesToLeftWhenPossible() {\n@@ -4860,2 +4725,1 @@\n-    @Test\n-    public void test_rt_38892_removeSelectionFromCellsInRemovedColumn() {\n+    @Test public void test_rt_38892_removeSelectionFromCellsInRemovedColumn() {\n@@ -4883,2 +4747,1 @@\n-    @Test\n-    public void test_rt_38787_remove_b() {\n+    @Test public void test_rt_38787_remove_b() {\n@@ -4889,2 +4752,1 @@\n-    @Test\n-    public void test_rt_38787_remove_b_c() {\n+    @Test public void test_rt_38787_remove_b_c() {\n@@ -4895,2 +4757,1 @@\n-    @Test\n-    public void test_rt_38787_remove_c_d() {\n+    @Test public void test_rt_38787_remove_c_d() {\n@@ -4952,2 +4813,1 @@\n-    @Test\n-    public void test_rt_38341() {\n+    @Test public void test_rt_38341() {\n@@ -5012,2 +4872,1 @@\n-    @Test\n-    public void test_rt_38943() {\n+    @Test public void test_rt_38943() {\n@@ -5053,2 +4912,1 @@\n-    @Test\n-    public void test_rt_38884() {\n+    @Test public void test_rt_38884() {\n@@ -5087,2 +4945,1 @@\n-    @Test\n-    public void test_rt_37360() {\n+    @Test public void test_rt_37360() {\n@@ -5191,2 +5048,1 @@\n-                            assertTrue(\n-                                    c.getRemoved().containsAll(FXCollections.observableArrayList(treeItem1, treeItem2)));\n+                            assertTrue(c.getRemoved().containsAll(FXCollections.observableArrayList(treeItem1, treeItem2)));\n@@ -5247,2 +5103,1 @@\n-    @Test\n-    public void test_rt_38491() {\n+    @Test public void test_rt_38491() {\n@@ -5320,2 +5175,1 @@\n-    @Test\n-    public void test_rt_39256() {\n+    @Test public void test_rt_39256() {\n@@ -5426,2 +5280,1 @@\n-    @Test\n-    public void test_rt_39559_useKeyboard_selectAll() {\n+    @Test public void test_rt_39559_useKeyboard_selectAll() {\n@@ -5466,2 +5319,1 @@\n-        assertEquals(0,\n-                ((TreeTablePosition) TreeTableCellBehavior.getAnchor(stringTreeTableView, null)).getRow());\n+        assertEquals(0, ((TreeTablePosition) TreeTableCellBehavior.getAnchor(stringTreeTableView, null)).getRow());\n@@ -5471,2 +5323,1 @@\n-        assertEquals(0,\n-                ((TreeTablePosition) TreeTableCellBehavior.getAnchor(stringTreeTableView, null)).getRow());\n+        assertEquals(0, ((TreeTablePosition) TreeTableCellBehavior.getAnchor(stringTreeTableView, null)).getRow());\n@@ -5480,2 +5331,1 @@\n-    @Test\n-    public void test_rt_16068_firstElement_selectAndRemoveSameRow() {\n+    @Test public void test_rt_16068_firstElement_selectAndRemoveSameRow() {\n@@ -5487,2 +5337,1 @@\n-    @Test\n-    public void test_rt_16068_firstElement_selectRowAndRemoveLaterSibling() {\n+    @Test public void test_rt_16068_firstElement_selectRowAndRemoveLaterSibling() {\n@@ -5499,2 +5348,1 @@\n-    @Test\n-    public void test_rt_16068_middleElement_selectRowAndRemoveLaterSibling() {\n+    @Test public void test_rt_16068_middleElement_selectRowAndRemoveLaterSibling() {\n@@ -5511,2 +5359,1 @@\n-    @Test\n-    public void test_rt_16068_lastElement_selectAndRemoveSameRow() {\n+    @Test public void test_rt_16068_lastElement_selectAndRemoveSameRow() {\n@@ -5518,2 +5365,1 @@\n-    @Test\n-    public void test_rt_16068_lastElement_selectRowAndRemoveEarlierSibling() {\n+    @Test public void test_rt_16068_lastElement_selectRowAndRemoveEarlierSibling() {\n@@ -5554,1 +5400,1 @@\n-        assertEquals(expectedIndex, fm.getFocusedIndex(), debug());\n+        assertEquals(debug(), expectedIndex, fm.getFocusedIndex());\n@@ -5637,2 +5483,2 @@\n-        assertTrue(treeTableView.getRow(grandChild) < treeTableView.getExpandedItemCount(),\n-                \"row of item must be less than expandedItemCount, but was: \" + treeTableView.getRow(grandChild));\n+        assertTrue(\"row of item must be less than expandedItemCount, but was: \" + treeTableView.getRow(grandChild),\n+                treeTableView.getRow(grandChild) < treeTableView.getExpandedItemCount());\n@@ -5641,2 +5487,1 @@\n-    @Test\n-    public void test_rt_39661_rowOfGrandChildParentCollapsedUpdatedOnInsertAbove() {\n+    @Test public void test_rt_39661_rowOfGrandChildParentCollapsedUpdatedOnInsertAbove() {\n@@ -5657,2 +5502,1 @@\n-    @Test\n-    public void test_rt_39661_rowOfGrandChildParentCollapsedUpdatedOnInsertAboveWithoutAccess() {\n+    @Test public void test_rt_39661_rowOfGrandChildParentCollapsedUpdatedOnInsertAboveWithoutAccess() {\n@@ -5673,2 +5517,1 @@\n-    @Test\n-    public void test_rt_39661_rowOfGrandChildParentExpandedUpdatedOnInsertAbove() {\n+    @Test public void test_rt_39661_rowOfGrandChildParentExpandedUpdatedOnInsertAbove() {\n@@ -5690,2 +5533,1 @@\n-    @Test\n-    public void test_rt_39661_rowOfGrandChildDependsOnParentExpansion() {\n+    @Test public void test_rt_39661_rowOfGrandChildDependsOnParentExpansion() {\n@@ -5711,2 +5553,2 @@\n-        assertNotSame(collapedGrandIndex, treeTableView.getRow(expandedGrandChild),\n-                \"getRow must depend on expansionState \" + collapedGrandIndex);\n+        assertNotSame(\"getRow must depend on expansionState \" + collapedGrandIndex,\n+                collapedGrandIndex, treeTableView.getRow(expandedGrandChild));\n@@ -5715,2 +5557,1 @@\n-    @Test\n-    public void test_rt_39661_rowOfGrandChildInCollapsedChild() {\n+    @Test public void test_rt_39661_rowOfGrandChildInCollapsedChild() {\n@@ -5728,1 +5569,1 @@\n-        assertEquals(-1, row, \"grandChild not visible\");\n+        assertEquals(\"grandChild not visible\", -1, row);\n@@ -5736,2 +5577,1 @@\n-    @Test\n-    public void test_rt_39661_rowOfRootChild() {\n+    @Test public void test_rt_39661_rowOfRootChild() {\n@@ -5745,2 +5585,1 @@\n-    @Test\n-    public void test_rt_39661_expandedItemCount() {\n+    @Test public void test_rt_39661_expandedItemCount() {\n@@ -5762,2 +5601,1 @@\n-    @Test\n-    public void test_rt_39822() {\n+    @Test public void test_rt_39822() {\n@@ -5799,2 +5637,1 @@\n-    @Test\n-    public void test_rt_39842_selectLeftDown() {\n+    @Test public void test_rt_39842_selectLeftDown() {\n@@ -5808,2 +5645,1 @@\n-    @Test\n-    public void test_rt_39842_selectRightDown() {\n+    @Test public void test_rt_39842_selectRightDown() {\n@@ -5813,2 +5649,1 @@\n-    @Test\n-    public void test_rt_39842_selectRightUp() {\n+    @Test public void test_rt_39842_selectRightUp() {\n@@ -5878,2 +5713,1 @@\n-    @Test\n-    public void test_rt_22599() {\n+    @Test public void test_rt_22599() {\n@@ -5984,2 +5818,1 @@\n-    @Test\n-    public void test_rt_40012_selectedAtLastOnDisjointRemoveItemsAbove() {\n+    @Test public void test_rt_40012_selectedAtLastOnDisjointRemoveItemsAbove() {\n@@ -6018,1 +5851,1 @@\n-        assertEquals(expected, sm.getSelectedIndex(), \"selected index after disjoint removes above\");\n+        assertEquals(\"selected index after disjoint removes above\", expected, sm.getSelectedIndex());\n@@ -6026,2 +5859,1 @@\n-    @Test\n-    public void test_rt_40012_accessSelectedAtLastOnDisjointRemoveItemsAbove() {\n+    @Test public void test_rt_40012_accessSelectedAtLastOnDisjointRemoveItemsAbove() {\n@@ -6067,2 +5899,1 @@\n-    @Test\n-    public void test_rt_40012_selectedIndexNotificationOnDisjointRemovesAbove() {\n+    @Test public void test_rt_40012_selectedIndexNotificationOnDisjointRemovesAbove() {\n@@ -6097,2 +5928,2 @@\n-        assertEquals(last - 2, sm.getSelectedIndex(), \"sanity: selectedIndex must be shifted by -2\");\n-        assertEquals(1, rt_40012_count, \"must fire single event on removes above\");\n+        assertEquals(\"sanity: selectedIndex must be shifted by -2\", last - 2, sm.getSelectedIndex());\n+        assertEquals(\"must fire single event on removes above\", 1, rt_40012_count);\n@@ -6135,2 +5966,2 @@\n-        assertEquals(lastItem, sm.getSelectedItem(), \"sanity: selectedItem unchanged\");\n-        assertEquals(0, rt_40012_count, \"must not fire on unchanged selected item\");\n+        assertEquals(\"sanity: selectedItem unchanged\", lastItem, sm.getSelectedItem());\n+        assertEquals(\"must not fire on unchanged selected item\", 0, rt_40012_count);\n@@ -6140,2 +5971,1 @@\n-    @Test\n-    public void test_rt_40010() {\n+    @Test public void test_rt_40010() {\n@@ -6174,2 +6004,1 @@\n-    @Test\n-    public void test_rt_40212() {\n+    @Test public void test_rt_40212() {\n@@ -6201,1 +6030,1 @@\n-            assertEquals(selected, sm.getSelectedIndex(), \"sanity: selectedIndex unchanged\");\n+            assertEquals(\"sanity: selectedIndex unchanged\", selected, sm.getSelectedIndex());\n@@ -6203,1 +6032,1 @@\n-                assertEquals(1, ++rt_40212_count, \"single event on clearAndSelect already selected\");\n+                assertEquals(\"single event on clearAndSelect already selected\", 1, ++rt_40212_count);\n@@ -6206,1 +6035,1 @@\n-                assertTrue(type, \"at least one of the change types must be true\");\n+                assertTrue(\"at least one of the change types must be true\", type);\n@@ -6213,2 +6042,1 @@\n-    @Test\n-    public void test_rt_40280() {\n+    @Test public void test_rt_40280() {\n@@ -6222,2 +6050,1 @@\n-    @Test\n-    public void test_rt_40278_showRoot() {\n+    @Test public void test_rt_40278_showRoot() {\n@@ -6232,1 +6059,1 @@\n-        assertFalse(view.isShowRoot(), \"sanity: test setup such that root is not showing\");\n+        assertFalse(\"sanity: test setup such that root is not showing\", view.isShowRoot());\n@@ -6250,1 +6077,1 @@\n-        assertTrue(view.isShowRoot(), \"sanity: test setup such that root is showing\");\n+        assertTrue(\"sanity: test setup such that root is showing\", view.isShowRoot());\n@@ -6259,2 +6086,1 @@\n-    @Test\n-    public void test_rt_40278_hideRoot_selectionOnRoot() {\n+    @Test public void test_rt_40278_hideRoot_selectionOnRoot() {\n@@ -6269,1 +6095,1 @@\n-        assertTrue(view.isShowRoot(), \"sanity: test setup such that root is showing\");\n+        assertTrue(\"sanity: test setup such that root is showing\", view.isShowRoot());\n@@ -6281,2 +6107,1 @@\n-    @Test\n-    public void test_rt_40263() {\n+    @Test public void test_rt_40263() {\n@@ -6315,2 +6140,1 @@\n-    @Test\n-    public void test_rt_40319_toRight_toBottom()          { test_rt_40319(true, true, false);   }\n+    @Test public void test_rt_40319_toRight_toBottom()          { test_rt_40319(true, true, false);   }\n@@ -6318,6 +6142,3 @@\n-    @Test\n-    public void test_rt_40319_toLeft_toBottom()           { test_rt_40319(false, true, false);  }\n-    @Test\n-    public void test_rt_40319_toLeft_toTop()              { test_rt_40319(false, false, false); }\n-    @Test\n-    public void test_rt_40319_toRight_toBottom_useMouse() { test_rt_40319(true, true, true);    }\n+    @Test public void test_rt_40319_toLeft_toBottom()           { test_rt_40319(false, true, false);  }\n+    @Test public void test_rt_40319_toLeft_toTop()              { test_rt_40319(false, false, false); }\n+    @Test public void test_rt_40319_toRight_toBottom_useMouse() { test_rt_40319(true, true, true);    }\n@@ -6325,4 +6146,2 @@\n-    @Test\n-    public void test_rt_40319_toLeft_toBottom_useMouse()  { test_rt_40319(false, true, true);   }\n-    @Test\n-    public void test_rt_40319_toLeft_toTop_useMouse()     { test_rt_40319(false, false, true);  }\n+    @Test public void test_rt_40319_toLeft_toBottom_useMouse()  { test_rt_40319(false, true, true);   }\n+    @Test public void test_rt_40319_toLeft_toTop_useMouse()     { test_rt_40319(false, false, true);  }\n@@ -6427,2 +6246,1 @@\n-    @Test\n-    public void test_jdk_8144681_removeColumn() {\n+    @Test public void test_jdk_8144681_removeColumn() {\n@@ -6454,2 +6272,1 @@\n-    @Test\n-    public void test_jdk_8144681_moveColumn() {\n+    @Test public void test_jdk_8144681_moveColumn() {\n@@ -6561,2 +6378,2 @@\n-                    assertTrue(c.getAddedSubList().containsAll(FXCollections.observableArrayList(1,2,3)),\n-                            \"added: \" + c.getAddedSubList());\n+                    assertTrue(\"added: \" + c.getAddedSubList(),\n+                            c.getAddedSubList().containsAll(FXCollections.observableArrayList(1,2,3)));\n@@ -6593,3 +6410,2 @@\n-                    assertTrue(\n-                            c.getAddedSubList().containsAll(FXCollections.observableArrayList(childNode1, item1, item2)),\n-                            \"added: \" + c.getAddedSubList());\n+                    assertTrue(\"added: \" + c.getAddedSubList(),\n+                            c.getAddedSubList().containsAll(FXCollections.observableArrayList(childNode1, item1, item2)));\n@@ -6653,2 +6469,1 @@\n-    @Test\n-    public void test_jdk_8157285() {\n+    @Test public void test_jdk_8157285() {\n@@ -6693,2 +6508,1 @@\n-    @Test\n-    public void test_jdk_8152396() {\n+    @Test public void test_jdk_8152396() {\n@@ -6742,2 +6556,1 @@\n-    @Test\n-    public void test_jdk_8160771() {\n+    @Test public void test_jdk_8160771() {\n@@ -6782,2 +6595,1 @@\n-    @Test\n-    public void test_jdk_8169642_1_only() {\n+    @Test public void test_jdk_8169642_1_only() {\n@@ -6821,2 +6633,1 @@\n-    @Test\n-    public void test_jdk_8169642_1_and_3() {\n+    @Test public void test_jdk_8169642_1_and_3() {\n@@ -6868,2 +6679,1 @@\n-    @Test\n-    public void testRemovedSelectedItemsWhenBranchIsCollapsed() {\n+    @Test public void testRemovedSelectedItemsWhenBranchIsCollapsed() {\n@@ -7008,2 +6818,1 @@\n-        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\n-                \"We don't expect any exceptions in this test!\"));\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\"We don't expect any exceptions in this test!\"));\n@@ -7460,2 +7269,2 @@\n-\n-        assertDoesNotThrow(() -> Toolkit.getToolkit().firePulse());\n+        \/\/ Should not throw an NPE.\n+        Toolkit.getToolkit().firePulse();\n@@ -7467,2 +7276,2 @@\n-\n-        assertDoesNotThrow(() -> treeTableView.queryAccessibleAttribute(AccessibleAttribute.ROW_COUNT));\n+        \/\/ Should not throw an NPE.\n+        treeTableView.queryAccessibleAttribute(AccessibleAttribute.ROW_COUNT);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewTest.java","additions":276,"deletions":467,"binary":false,"changes":743,"status":"modified"}]}