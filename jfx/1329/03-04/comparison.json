{"files":[{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -33,1 +33,0 @@\n-import static org.junit.Assert.*;\n@@ -50,1 +49,4 @@\n-import org.junit.After;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -85,3 +87,0 @@\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n@@ -129,1 +128,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -142,1 +142,1 @@\n-    @After\n+    @AfterEach\n@@ -165,1 +165,2 @@\n-    @Test public void noArgConstructorSetsNonNullSortPolicy() {\n+    @Test\n+    public void noArgConstructorSetsNonNullSortPolicy() {\n@@ -173,1 +174,2 @@\n-    @Test public void noArgConstructorSetsNullOnSort() {\n+    @Test\n+    public void noArgConstructorSetsNullOnSort() {\n@@ -237,1 +239,2 @@\n-    @Test public void selectionModelCanBeBound() {\n+    @Test\n+    public void selectionModelCanBeBound() {\n@@ -250,1 +253,2 @@\n-    @Test public void canSetSelectedItemToAnItemEvenWhenThereAreNoItems() {\n+    @Test\n+    public void canSetSelectedItemToAnItemEvenWhenThereAreNoItems() {\n@@ -297,1 +301,1 @@\n-        assertNull(\"Selected Item: \" + sm.getSelectedItem(), sm.getSelectedItem());\n+        assertNull(sm.getSelectedItem(), \"Selected Item: \" + sm.getSelectedItem());\n@@ -426,1 +430,2 @@\n-    @Test public void testVisibleLeafColumns() {\n+    @Test\n+    public void testVisibleLeafColumns() {\n@@ -484,1 +489,1 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n@@ -499,1 +504,2 @@\n-    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeSortOrderList() {\n+    @Test\n+    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeSortOrderList() {\n@@ -512,2 +518,3 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n-    @Test public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_AscendingToDescending() {\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n+    @Test\n+    public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_AscendingToDescending() {\n@@ -533,1 +540,2 @@\n-    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_AscendingToDescending() {\n+    @Test\n+    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_AscendingToDescending() {\n@@ -550,2 +558,3 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n-    @Test public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_DescendingToNull() {\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n+    @Test\n+    public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_DescendingToNull() {\n@@ -569,1 +578,2 @@\n-    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_DescendingToNull() {\n+    @Test\n+    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_DescendingToNull() {\n@@ -587,1 +597,1 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n@@ -624,1 +634,2 @@\n-    @Test public void testSortMethodWithNullSortPolicy() {\n+    @Test\n+    public void testSortMethodWithNullSortPolicy() {\n@@ -680,1 +691,2 @@\n-    @Test public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_ascendingToDescending() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_ascendingToDescending() {\n@@ -693,1 +705,2 @@\n-    @Test public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_descendingToNull() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_descendingToNull() {\n@@ -706,1 +719,2 @@\n-    @Test public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_nullToAscending() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_nullToAscending() {\n@@ -761,1 +775,2 @@\n-    @Test public void testFailedSortPolicyBacksOutComparatorChange_sortOrderRemoval() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutComparatorChange_sortOrderRemoval() {\n@@ -779,1 +794,2 @@\n-    @Test public void testFailedSortPolicyBacksOutComparatorChange_sortTypeChange() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutComparatorChange_sortTypeChange() {\n@@ -815,1 +831,2 @@\n-    @Test public void testInvisibleScrollbarDoesNotScrollTableToBeginning() {\n+    @Test\n+    public void testInvisibleScrollbarDoesNotScrollTableToBeginning() {\n@@ -846,1 +863,2 @@\n-    @Test public void test_rt16019() {\n+    @Test\n+    public void test_rt16019() {\n@@ -855,1 +873,2 @@\n-    @Test public void test_rt15793() {\n+    @Test\n+    public void test_rt15793() {\n@@ -880,1 +899,1 @@\n-        assertTrue(\"Focus is on \" + fm.getFocusedIndex(), fm.isFocused(1));\n+        assertTrue(fm.isFocused(1), \"Focus is on \" + fm.getFocusedIndex());\n@@ -886,1 +905,2 @@\n-    @Test public void test_rt17522_focusShouldMoveWhenItemAddedBeforeFocusIndex() {\n+    @Test\n+    public void test_rt17522_focusShouldMoveWhenItemAddedBeforeFocusIndex() {\n@@ -914,1 +934,2 @@\n-    @Test public void test_rt17522_focusShouldBeResetWhenFocusedItemIsRemoved() {\n+    @Test\n+    public void test_rt17522_focusShouldBeResetWhenFocusedItemIsRemoved() {\n@@ -940,1 +961,2 @@\n-    @Test public void test_rt17522_focusShouldNotMoveWhenItemRemovedAfterFocusIndex() {\n+    @Test\n+    public void test_rt17522_focusShouldNotMoveWhenItemRemovedAfterFocusIndex() {\n@@ -962,1 +984,2 @@\n-    @Test public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsFalse() {\n+    @Test\n+    public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsFalse() {\n@@ -971,1 +994,2 @@\n-    @Test public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsTrue() {\n+    @Test\n+    public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsTrue() {\n@@ -989,1 +1013,2 @@\n-    @Test public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsTrue_columnEditableIsTrue() {\n+    @Test\n+    public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsTrue_columnEditableIsTrue() {\n@@ -1018,1 +1043,2 @@\n-    @Test public void test_rt27820_1() {\n+    @Test\n+    public void test_rt27820_1() {\n@@ -1029,1 +1055,2 @@\n-    @Test public void test_rt27820_2() {\n+    @Test\n+    public void test_rt27820_2() {\n@@ -1040,1 +1067,2 @@\n-    @Test public void test_rt28534() {\n+    @Test\n+    public void test_rt28534() {\n@@ -1068,1 +1096,2 @@\n-    @Test public void test_rt22463() {\n+    @Test\n+    public void test_rt22463() {\n@@ -1102,1 +1131,2 @@\n-    @Test public void test_rt28637() {\n+    @Test\n+    public void test_rt28637() {\n@@ -1303,1 +1333,2 @@\n-    @Test public void test_rt29313_selectedItems() {\n+    @Test\n+    public void test_rt29313_selectedItems() {\n@@ -1391,1 +1422,2 @@\n-    @Test public void test_rt29390() {\n+    @Test\n+    public void test_rt29390() {\n@@ -1455,1 +1487,2 @@\n-    @Test public void test_rt31165() {\n+    @Test\n+    public void test_rt31165() {\n@@ -1569,1 +1602,2 @@\n-    @Test public void test_rt_31200_tableRow() {\n+    @Test\n+    public void test_rt_31200_tableRow() {\n@@ -1650,1 +1684,2 @@\n-    @Test public void test_rt_21517() {\n+    @Test\n+    public void test_rt_21517() {\n@@ -1992,1 +2027,2 @@\n-    @Test public void test_rt_32708_removeFromColumnsList() {\n+    @Test\n+    public void test_rt_32708_removeFromColumnsList() {\n@@ -2091,1 +2127,2 @@\n-    @Test public void test_rt_34685_directEditCall_cellSelectionMode() {\n+    @Test\n+    public void test_rt_34685_directEditCall_cellSelectionMode() {\n@@ -2101,1 +2138,2 @@\n-    @Test public void test_rt_34685_mouseDoubleClick_cellSelectionMode() {\n+    @Test\n+    public void test_rt_34685_mouseDoubleClick_cellSelectionMode() {\n@@ -2181,1 +2219,2 @@\n-    @Test public void test_rt_35224() {\n+    @Test\n+    public void test_rt_35224() {\n@@ -2216,1 +2255,2 @@\n-    @Test public void test_rt_35141_simple_switch_two_columns_move_col2_backward_1_place() {\n+    @Test\n+    public void test_rt_35141_simple_switch_two_columns_move_col2_backward_1_place() {\n@@ -2276,1 +2316,2 @@\n-    @Test public void test_rt_35141_simple_switch_three_columns_move_col2_forward_1_place() {\n+    @Test\n+    public void test_rt_35141_simple_switch_three_columns_move_col2_forward_1_place() {\n@@ -2297,1 +2338,2 @@\n-    @Test public void test_rt_35141_simple_switch_three_columns_move_col3_backward_1_place() {\n+    @Test\n+    public void test_rt_35141_simple_switch_three_columns_move_col3_backward_1_place() {\n@@ -2360,1 +2402,2 @@\n-    @Test public void test_rt_35141_hidden_column_move_col1_forward_1_place() {\n+    @Test\n+    public void test_rt_35141_hidden_column_move_col1_forward_1_place() {\n@@ -2383,1 +2426,2 @@\n-    @Test public void test_rt_35141_hidden_column_move_col1_forward_100_places() {\n+    @Test\n+    public void test_rt_35141_hidden_column_move_col1_forward_100_places() {\n@@ -2462,1 +2506,2 @@\n-    @Test public void test_rt_35141_multiple_hidden_columns_move_col1_to_end() {\n+    @Test\n+    public void test_rt_35141_multiple_hidden_columns_move_col1_to_end() {\n@@ -2627,1 +2672,2 @@\n-    @Test public void test_rt_34042() {\n+    @Test\n+    public void test_rt_34042() {\n@@ -2722,1 +2768,2 @@\n-    @Test public void test_rt35763_observableList() {\n+    @Test\n+    public void test_rt35763_observableList() {\n@@ -2770,1 +2817,2 @@\n-    @Test public void test_rt35763_sortedList() {\n+    @Test\n+    public void test_rt35763_sortedList() {\n@@ -2823,1 +2871,1 @@\n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n@@ -2825,1 +2873,1 @@\n-        readOnlyUnbackedObservableListSubListTest(-1, 0);\n+        assertThrows(IndexOutOfBoundsException.class, () -> readOnlyUnbackedObservableListSubListTest(-1, 0));\n@@ -2828,1 +2876,1 @@\n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n@@ -2830,1 +2878,1 @@\n-        readOnlyUnbackedObservableListSubListTest(0, 10);\n+        assertThrows(IndexOutOfBoundsException.class, () -> readOnlyUnbackedObservableListSubListTest(0, 10));\n@@ -2833,1 +2881,1 @@\n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n@@ -2835,1 +2883,1 @@\n-        readOnlyUnbackedObservableListSubListTest(1, 1);\n+        assertThrows(IndexOutOfBoundsException.class, () -> readOnlyUnbackedObservableListSubListTest(1, 1));\n@@ -2900,1 +2948,1 @@\n-        assertEquals(\"expected list after\" + modified, expected, items);\n+        assertEquals(expected, items, \"expected list after\" + modified);\n@@ -3011,1 +3059,2 @@\n-    @Test public void test_rt36353() {\n+    @Test\n+    public void test_rt36353() {\n@@ -3069,1 +3118,2 @@\n-    @Test public void test_rt36290() {\n+    @Test\n+    public void test_rt36290() {\n@@ -3229,1 +3279,2 @@\n-    @Test public void test_rt_36656_removeFromColumns() {\n+    @Test\n+    public void test_rt_36656_removeFromColumns() {\n@@ -3355,1 +3406,2 @@\n-    @Test public void test_rt_36669() {\n+    @Test\n+    public void test_rt_36669() {\n@@ -3504,1 +3556,2 @@\n-    @Test public void test_rt_37057_test1_MouseEvents() {\n+    @Test\n+    public void test_rt_37057_test1_MouseEvents() {\n@@ -3685,1 +3738,2 @@\n-    @Test public void test_rt_37054_noScroll() {\n+    @Test\n+    public void test_rt_37054_noScroll() {\n@@ -3689,1 +3743,2 @@\n-    @Test public void test_rt_37054_scroll() {\n+    @Test\n+    public void test_rt_37054_scroll() {\n@@ -3744,1 +3799,2 @@\n-        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\"We don't expect any exceptions in this test!\"));\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\n+                \"We don't expect any exceptions in this test!\"));\n@@ -3783,1 +3839,2 @@\n-    @Test public void test_rt_37429_sortEventsShouldNotFireExtraChangeEvents() {\n+    @Test\n+    public void test_rt_37429_sortEventsShouldNotFireExtraChangeEvents() {\n@@ -3875,1 +3932,1 @@\n-    @Ignore(\"Fix not yet developed for TableView\")\n+    @Disabled(\"Fix not yet developed for TableView\")\n@@ -3880,1 +3937,1 @@\n-    @Ignore(\"Fix not yet developed for TableView\")\n+    @Disabled(\"Fix not yet developed for TableView\")\n@@ -3885,1 +3942,1 @@\n-    @Ignore(\"Fix not yet developed for TableView\")\n+    @Disabled(\"Fix not yet developed for TableView\")\n@@ -3890,1 +3947,1 @@\n-    @Ignore(\"Fix not yet developed for TableView\")\n+    @Disabled(\"Fix not yet developed for TableView\")\n@@ -3966,1 +4023,2 @@\n-    @Test public void test_rt_37632() {\n+    @Test\n+    public void test_rt_37632() {\n@@ -4048,1 +4106,2 @@\n-    @Test public void test_rt_38464_cellSelection_selectFirstRowOnly() {\n+    @Test\n+    public void test_rt_38464_cellSelection_selectFirstRowOnly() {\n@@ -4106,1 +4165,2 @@\n-    @Test public void test_rt38464_selectCellMultipleTimes() {\n+    @Test\n+    public void test_rt38464_selectCellMultipleTimes() {\n@@ -4173,1 +4233,2 @@\n-    @Test public void test_rt38464_selectRowThenCell() {\n+    @Test\n+    public void test_rt38464_selectRowThenCell() {\n@@ -4215,1 +4276,2 @@\n-    @Test public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsOneRow() {\n+    @Test\n+    public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsOneRow() {\n@@ -4219,1 +4281,2 @@\n-    @Test public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsTwoRows() {\n+    @Test\n+    public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsTwoRows() {\n@@ -4223,1 +4286,2 @@\n-    @Test public void test_rt38464_selectTests_rowSelection_singleSelection_selectsOneRow() {\n+    @Test\n+    public void test_rt38464_selectTests_rowSelection_singleSelection_selectsOneRow() {\n@@ -4292,1 +4356,2 @@\n-    @Test public void test_rt_37853() {\n+    @Test\n+    public void test_rt_37853() {\n@@ -4382,1 +4447,2 @@\n-    @Test public void test_rt_38892_removeLeftMostColumn() {\n+    @Test\n+    public void test_rt_38892_removeLeftMostColumn() {\n@@ -4408,1 +4474,2 @@\n-    @Test public void test_rt_38892_removeSelectionFromCellsInRemovedColumn() {\n+    @Test\n+    public void test_rt_38892_removeSelectionFromCellsInRemovedColumn() {\n@@ -4435,1 +4502,2 @@\n-    @Test public void test_rt_38787_remove_b_c() {\n+    @Test\n+    public void test_rt_38787_remove_b_c() {\n@@ -4450,1 +4518,2 @@\n-    @Test public void test_rt_38787_remove_z() {\n+    @Test\n+    public void test_rt_38787_remove_z() {\n@@ -4841,1 +4910,2 @@\n-    @Test public void test_rt_39559_useKeyboard_selectAll() {\n+    @Test\n+    public void test_rt_39559_useKeyboard_selectAll() {\n@@ -4899,1 +4969,2 @@\n-    @Test public void test_rt_16068_middleElement_selectRowAndRemoveLaterSibling() {\n+    @Test\n+    public void test_rt_16068_middleElement_selectRowAndRemoveLaterSibling() {\n@@ -4947,1 +5018,2 @@\n-    @Test public void test_rt_39822() {\n+    @Test\n+    public void test_rt_39822() {\n@@ -4987,1 +5059,2 @@\n-    @Test public void test_rt_39842_selectLeftUp() {\n+    @Test\n+    public void test_rt_39842_selectLeftUp() {\n@@ -5176,1 +5249,1 @@\n-        assertEquals(\"selected index after disjoint removes above\", expected, sm.getSelectedIndex());\n+        assertEquals(expected, sm.getSelectedIndex(), \"selected index after disjoint removes above\");\n@@ -5184,1 +5257,2 @@\n-    @Test public void test_rt_40012_accessSelectedAtLastOnDisjointRemoveItemsAbove() {\n+    @Test\n+    public void test_rt_40012_accessSelectedAtLastOnDisjointRemoveItemsAbove() {\n@@ -5231,2 +5305,2 @@\n-        assertEquals(\"sanity: selectedIndex must be shifted by -2\", last - 2, sm.getSelectedIndex());\n-        assertEquals(\"must fire single event on removes above\", 1, rt_40012_count);\n+        assertEquals(last - 2, sm.getSelectedIndex(), \"sanity: selectedIndex must be shifted by -2\");\n+        assertEquals(1, rt_40012_count, \"must fire single event on removes above\");\n@@ -5258,2 +5332,2 @@\n-        assertEquals(\"sanity: selectedItem unchanged\", lastItem, sm.getSelectedItem());\n-        assertEquals(\"must not fire on unchanged selected item\", 0, rt_40012_count);\n+        assertEquals(lastItem, sm.getSelectedItem(), \"sanity: selectedItem unchanged\");\n+        assertEquals(0, rt_40012_count, \"must not fire on unchanged selected item\");\n@@ -5283,1 +5357,1 @@\n-            assertEquals(\"sanity: selectedIndex unchanged\", selected, sm.getSelectedIndex());\n+            assertEquals(selected, sm.getSelectedIndex(), \"sanity: selectedIndex unchanged\");\n@@ -5285,1 +5359,1 @@\n-                assertEquals(\"single event on clearAndSelect already selected\", 1, ++rt_40212_count);\n+                assertEquals(1, ++rt_40212_count, \"single event on clearAndSelect already selected\");\n@@ -5288,1 +5362,1 @@\n-                assertTrue(\"at least one of the change types must be true\", type);\n+                assertTrue(type, \"at least one of the change types must be true\");\n@@ -5295,1 +5369,2 @@\n-    @Test public void test_rt_40280() {\n+    @Test\n+    public void test_rt_40280() {\n@@ -5306,1 +5381,2 @@\n-    @Test public void test_rt_40263() {\n+    @Test\n+    public void test_rt_40263() {\n@@ -5338,2 +5414,4 @@\n-    @Test public void test_rt_40319_toLeft_toBottom()           { test_rt_40319(false, true, false);  }\n-    @Test public void test_rt_40319_toLeft_toTop()              { test_rt_40319(false, false, false); }\n+    @Test\n+    public void test_rt_40319_toLeft_toBottom()           { test_rt_40319(false, true, false);  }\n+    @Test\n+    public void test_rt_40319_toLeft_toTop()              { test_rt_40319(false, false, false); }\n@@ -5382,1 +5460,2 @@\n-    @Test public void test_rt_40546() {\n+    @Test\n+    public void test_rt_40546() {\n@@ -5530,1 +5609,2 @@\n-    @Test public void test_8139460_heightDoesntShrinkAfterRemovingNestedColumns() throws Exception {\n+    @Test\n+    public void test_8139460_heightDoesntShrinkAfterRemovingNestedColumns() throws Exception {\n@@ -5541,1 +5621,1 @@\n-        assertTrue(\"Nested column header should be larger.\", nestedHeaderHeight > initialHeight);\n+        assertTrue(nestedHeaderHeight > initialHeight, \"Nested column header should be larger.\");\n@@ -5544,1 +5624,1 @@\n-        assertEquals(\"Header should shrink to initial size.\", initialHeight, row.getHeight(), 0.01);\n+        assertEquals(initialHeight, row.getHeight(), 0.01, \"Header should shrink to initial size.\");\n@@ -5583,1 +5663,2 @@\n-        assertArrayEquals(new String[] {\"column-header\", \"table-column\"}, standardHeader.getStyleClass().toArray());\n+        assertArrayEquals(new String[] {\"column-header\", \"table-column\"},\n+                standardHeader.getStyleClass().toArray());\n@@ -5586,1 +5667,2 @@\n-        assertArrayEquals(new String[] {\"column-header\", \"table-column\", \"custom-style-class\"}, standardWithStyleClassHeader.getStyleClass().toArray());\n+        assertArrayEquals(new String[] {\"column-header\", \"table-column\", \"custom-style-class\"},\n+                standardWithStyleClassHeader.getStyleClass().toArray());\n@@ -5589,1 +5671,2 @@\n-        assertArrayEquals(new String[] {\"nested-column-header\", \"table-column\", \"parent\"}, parentHeader.getStyleClass().toArray());\n+        assertArrayEquals(new String[] {\"nested-column-header\", \"table-column\", \"parent\"},\n+                parentHeader.getStyleClass().toArray());\n@@ -5592,1 +5675,2 @@\n-        assertArrayEquals(new String[] {\"column-header\", \"table-column\", \"child\"}, childHeader.getStyleClass().toArray());\n+        assertArrayEquals(new String[] {\"column-header\", \"table-column\", \"child\"},\n+                childHeader.getStyleClass().toArray());\n@@ -5699,1 +5783,2 @@\n-        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\"We don't expect any exceptions in this test!\"));\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\n+                \"We don't expect any exceptions in this test!\"));\n@@ -5743,1 +5828,2 @@\n-        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\"We don't expect any exceptions in this test!\"));\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\n+                \"We don't expect any exceptions in this test!\"));\n@@ -6039,1 +6125,1 @@\n-        assertEquals(FXCollections.observableArrayList(), result);\n+        assertEquals(observableArrayList(), result);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewTest.java","additions":208,"deletions":122,"binary":false,"changes":330,"status":"modified"},{"patch":"@@ -30,10 +30,1 @@\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -49,4 +40,4 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -159,1 +150,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -198,1 +190,1 @@\n-    @After\n+    @AfterEach\n@@ -260,1 +252,2 @@\n-    @Test public void noArgConstructorSetsNonNullSelectionModel() {\n+    @Test\n+    public void noArgConstructorSetsNonNullSelectionModel() {\n@@ -264,1 +257,2 @@\n-    @Test public void noArgConstructor_selectedItemIsNull() {\n+    @Test\n+    public void noArgConstructor_selectedItemIsNull() {\n@@ -268,1 +262,2 @@\n-    @Test public void noArgConstructor_selectedIndexIsNegativeOne() {\n+    @Test\n+    public void noArgConstructor_selectedIndexIsNegativeOne() {\n@@ -272,1 +267,2 @@\n-    @Test public void noArgConstructorSetsNonNullSortPolicy() {\n+    @Test\n+    public void noArgConstructorSetsNonNullSortPolicy() {\n@@ -276,1 +272,2 @@\n-    @Test public void noArgConstructorSetsNullComparator() {\n+    @Test\n+    public void noArgConstructorSetsNullComparator() {\n@@ -284,1 +281,2 @@\n-    @Test public void noArgConstructorSetsDefaultColumnResizePolicyPseudoclass() {\n+    @Test\n+    public void noArgConstructorSetsDefaultColumnResizePolicyPseudoclass() {\n@@ -290,1 +288,2 @@\n-    @Test public void singleArgConstructorSetsDefaultColumnResizePolicyPseudoclass() {\n+    @Test\n+    public void singleArgConstructorSetsDefaultColumnResizePolicyPseudoclass() {\n@@ -326,1 +325,2 @@\n-    @Test public void testColumns() {\n+    @Test\n+    public void testColumns() {\n@@ -339,1 +339,2 @@\n-    @Test public void testVisibleLeafColumns() {\n+    @Test\n+    public void testVisibleLeafColumns() {\n@@ -352,1 +353,2 @@\n-    @Test public void testSortOrderCleanup() {\n+    @Test\n+    public void testSortOrderCleanup() {\n@@ -425,1 +427,2 @@\n-    @Test public void testSelectionUpdatesCorrectlyAfterRootReverseAndSetAll() {\n+    @Test\n+    public void testSelectionUpdatesCorrectlyAfterRootReverseAndSetAll() {\n@@ -433,1 +436,1 @@\n-    @Ignore(\"JDK-8193442\")\n+    @Disabled(\"JDK-8193442\")\n@@ -444,2 +447,3 @@\n-    @Ignore(\"JDK-8248389\")\n-    @Test public void testSelectionUpdatesCorrectlyAfterAddingAnItemBeforeSelectedItem() {\n+    @Disabled(\"JDK-8248389\")\n+    @Test\n+    public void testSelectionUpdatesCorrectlyAfterAddingAnItemBeforeSelectedItem() {\n@@ -456,1 +460,2 @@\n-    @Test public void testSelectionUpdatesCorrectlyAfterChildReverseAndSetAll() {\n+    @Test\n+    public void testSelectionUpdatesCorrectlyAfterChildReverseAndSetAll() {\n@@ -464,2 +469,3 @@\n-    @Ignore(\"JDK-8193442\")\n-    @Test public void testSelectionUpdatesCorrectlyAfterChildReverseRemoveOneAndSetAll() {\n+    @Disabled(\"JDK-8193442\")\n+    @Test\n+    public void testSelectionUpdatesCorrectlyAfterChildReverseRemoveOneAndSetAll() {\n@@ -474,2 +480,3 @@\n-    @Ignore(\"JDK-8193442\")\n-    @Test public void testSelectionUpdatesCorrectlyAfterChildRemoveOneAndSetAll() {\n+    @Disabled(\"JDK-8193442\")\n+    @Test\n+    public void testSelectionUpdatesCorrectlyAfterChildRemoveOneAndSetAll() {\n@@ -483,1 +490,1 @@\n-    @Ignore(\"JDK-8193442\")\n+    @Disabled(\"JDK-8193442\")\n@@ -608,2 +615,2 @@\n-            assertTrue(\"The item (\" + beforePos.getRow() + \", \" + beforePos.getColumn() +\n-                    \") lost selection during permutation\", isCellStillSelected);\n+            assertTrue(isCellStillSelected, \"The item (\" + beforePos.getRow() + \", \" + beforePos.getColumn() +\n+                    \") lost selection during permutation\");\n@@ -616,2 +623,2 @@\n-            assertTrue(\"The item (\" + item + \") lost selection during permutation\",\n-                    selectedItems.contains(item));\n+            assertTrue(selectedItems.contains(item),\n+                    \"The item (\" + item + \") lost selection during permutation\");\n@@ -634,2 +641,3 @@\n-        assertEquals(\"Selected Item should remain same\", selectedItemBefore, sm.getSelectedItem());\n-        assertEquals(\"Selected index should be updated\", treeTableView.getRow(selectedItemBefore), sm.getSelectedIndex());\n+        assertEquals(selectedItemBefore, sm.getSelectedItem(), \"Selected Item should remain same\");\n+        assertEquals(treeTableView.getRow(selectedItemBefore), sm.getSelectedIndex(),\n+                \"Selected index should be updated\");\n@@ -642,1 +650,1 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n@@ -657,1 +665,2 @@\n-    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeSortOrderList() {\n+    @Test\n+    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeSortOrderList() {\n@@ -670,1 +679,1 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n@@ -691,1 +700,2 @@\n-    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_AscendingToDescending() {\n+    @Test\n+    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_AscendingToDescending() {\n@@ -708,2 +718,3 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n-    @Test public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_DescendingToNull() {\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n+    @Test\n+    public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_DescendingToNull() {\n@@ -727,1 +738,2 @@\n-    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_DescendingToNull() {\n+    @Test\n+    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_DescendingToNull() {\n@@ -745,2 +757,3 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n-    @Test public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_NullToAscending() {\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n+    @Test\n+    public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_NullToAscending() {\n@@ -764,1 +777,2 @@\n-    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_NullToAscending() {\n+    @Test\n+    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_NullToAscending() {\n@@ -782,1 +796,2 @@\n-    @Test public void testSortMethodWithNullSortPolicy() {\n+    @Test\n+    public void testSortMethodWithNullSortPolicy() {\n@@ -789,1 +804,2 @@\n-    @Test public void testNoIOOBEWhenSortingAfterSelectAndClearRootChildren() {\n+    @Test\n+    public void testNoIOOBEWhenSortingAfterSelectAndClearRootChildren() {\n@@ -808,1 +824,2 @@\n-    @Test public void testSetSortOrderRetainsWhenRootHasNoChildren() {\n+    @Test\n+    public void testSetSortOrderRetainsWhenRootHasNoChildren() {\n@@ -820,1 +837,2 @@\n-    @Test public void testNPEWhenRootItemIsNull() {\n+    @Test\n+    public void testNPEWhenRootItemIsNull() {\n@@ -827,1 +845,2 @@\n-    @Test public void testChangingSortPolicyUpdatesItemsList() {\n+    @Test\n+    public void testChangingSortPolicyUpdatesItemsList() {\n@@ -837,1 +856,2 @@\n-    @Test public void testChangingSortPolicyDoesNotUpdateItemsListWhenTheSortOrderListIsEmpty() {\n+    @Test\n+    public void testChangingSortPolicyDoesNotUpdateItemsListWhenTheSortOrderListIsEmpty() {\n@@ -846,1 +866,2 @@\n-    @Test public void testFailedSortPolicyBacksOutLastChange_sortOrderAddition() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutLastChange_sortOrderAddition() {\n@@ -860,1 +881,2 @@\n-    @Test public void testFailedSortPolicyBacksOutLastChange_sortOrderRemoval() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutLastChange_sortOrderRemoval() {\n@@ -876,1 +898,2 @@\n-    @Test public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_ascendingToDescending() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_ascendingToDescending() {\n@@ -889,1 +912,2 @@\n-    @Test public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_descendingToNull() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_descendingToNull() {\n@@ -902,1 +926,2 @@\n-    @Test public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_nullToAscending() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_nullToAscending() {\n@@ -915,1 +940,2 @@\n-    @Test public void testComparatorChangesInSyncWithSortOrder_1() {\n+    @Test\n+    public void testComparatorChangesInSyncWithSortOrder_1() {\n@@ -926,1 +952,2 @@\n-    @Test public void testComparatorChangesInSyncWithSortOrder_2() {\n+    @Test\n+    public void testComparatorChangesInSyncWithSortOrder_2() {\n@@ -974,1 +1001,2 @@\n-    @Test public void testFailedSortPolicyBacksOutComparatorChange_sortTypeChange() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutComparatorChange_sortTypeChange() {\n@@ -1099,1 +1127,2 @@\n-    @Test public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsFalse() {\n+    @Test\n+    public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsFalse() {\n@@ -1108,1 +1137,2 @@\n-    @Test public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsTrue() {\n+    @Test\n+    public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsTrue() {\n@@ -1117,1 +1147,2 @@\n-    @Test public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsTrue_columnEditableIsFalse() {\n+    @Test\n+    public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsTrue_columnEditableIsFalse() {\n@@ -1182,1 +1213,2 @@\n-    @Test public void noArgConstructorSetsTheStyleClass() {\n+    @Test\n+    public void noArgConstructorSetsTheStyleClass() {\n@@ -1186,1 +1218,2 @@\n-    @Test public void noArgConstructorSetsNullItems() {\n+    @Test\n+    public void noArgConstructorSetsNullItems() {\n@@ -1199,1 +1232,2 @@\n-    @Test public void selectionModelCanBeNull() {\n+    @Test\n+    public void selectionModelCanBeNull() {\n@@ -1204,1 +1238,2 @@\n-    @Test public void selectionModelCanBeBound() {\n+    @Test\n+    public void selectionModelCanBeBound() {\n@@ -1213,1 +1248,2 @@\n-    @Test public void selectionModelCanBeChanged() {\n+    @Test\n+    public void selectionModelCanBeChanged() {\n@@ -1220,1 +1256,2 @@\n-    @Test public void canSetSelectedItemToAnItemEvenWhenThereAreNoItems() {\n+    @Test\n+    public void canSetSelectedItemToAnItemEvenWhenThereAreNoItems() {\n@@ -1227,1 +1264,2 @@\n-    @Test public void canSetSelectedItemToAnItemNotInTheDataModel() {\n+    @Test\n+    public void canSetSelectedItemToAnItemNotInTheDataModel() {\n@@ -1235,1 +1273,2 @@\n-    @Test public void settingTheSelectedItemToAnItemInItemsResultsInTheCorrectSelectedIndex() {\n+    @Test\n+    public void settingTheSelectedItemToAnItemInItemsResultsInTheCorrectSelectedIndex() {\n@@ -1242,2 +1281,3 @@\n-    @Ignore(\"Not yet supported\")\n-    @Test public void settingTheSelectedItemToANonexistantItemAndThenSettingItemsWhichContainsItResultsInCorrectSelectedIndex() {\n+    @Disabled(\"Not yet supported\")\n+    @Test\n+    public void settingTheSelectedItemToANonexistantItemAndThenSettingItemsWhichContainsItResultsInCorrectSelectedIndex() {\n@@ -1250,2 +1290,3 @@\n-    @Ignore(\"Not yet supported\")\n-    @Test public void ensureSelectionClearsWhenAllItemsAreRemoved_selectIndex0() {\n+    @Disabled(\"Not yet supported\")\n+    @Test\n+    public void ensureSelectionClearsWhenAllItemsAreRemoved_selectIndex0() {\n@@ -1259,2 +1300,3 @@\n-    @Ignore(\"Not yet supported\")\n-    @Test public void ensureSelectionClearsWhenAllItemsAreRemoved_selectIndex2() {\n+    @Disabled(\"Not yet supported\")\n+    @Test\n+    public void ensureSelectionClearsWhenAllItemsAreRemoved_selectIndex2() {\n@@ -1268,1 +1310,1 @@\n-    @Ignore(\"Not yet supported\")\n+    @Disabled(\"Not yet supported\")\n@@ -1288,1 +1330,2 @@\n-    @Test public void ensureSelectionIsCorrectWhenItemsChange() {\n+    @Test\n+    public void ensureSelectionIsCorrectWhenItemsChange() {\n@@ -1301,1 +1344,2 @@\n-    @Test public void ensureSelectionRemainsOnBranchWhenExpanded() {\n+    @Test\n+    public void ensureSelectionRemainsOnBranchWhenExpanded() {\n@@ -1314,1 +1358,2 @@\n-    @Test public void ensureRootIndexIsZeroWhenRootIsShowing() {\n+    @Test\n+    public void ensureRootIndexIsZeroWhenRootIsShowing() {\n@@ -1319,1 +1364,2 @@\n-    @Test public void ensureRootIndexIsNegativeOneWhenRootIsNotShowing() {\n+    @Test\n+    public void ensureRootIndexIsNegativeOneWhenRootIsNotShowing() {\n@@ -1325,1 +1371,2 @@\n-    @Test public void ensureCorrectIndexWhenRootTreeItemHasParent() {\n+    @Test\n+    public void ensureCorrectIndexWhenRootTreeItemHasParent() {\n@@ -1334,1 +1381,2 @@\n-    @Test public void ensureCorrectIndexWhenRootTreeItemHasParentAndRootIsNotShowing() {\n+    @Test\n+    public void ensureCorrectIndexWhenRootTreeItemHasParentAndRootIsNotShowing() {\n@@ -1381,1 +1429,2 @@\n-    @Ignore @Test public void test_rt17112() {\n+    @Disabled\n+    @Test public void test_rt17112() {\n@@ -1430,1 +1479,2 @@\n-    @Test public void test_rt17522_focusShouldMoveWhenItemAddedAtFocusIndex_1() {\n+    @Test\n+    public void test_rt17522_focusShouldMoveWhenItemAddedAtFocusIndex_1() {\n@@ -1444,1 +1494,2 @@\n-    @Test public void test_rt17522_focusShouldMoveWhenItemAddedBeforeFocusIndex_1() {\n+    @Test\n+    public void test_rt17522_focusShouldMoveWhenItemAddedBeforeFocusIndex_1() {\n@@ -1452,1 +1503,1 @@\n-        assertTrue(\"Focused index: \" + fm.getFocusedIndex(), fm.isFocused(2));\n+        assertTrue(fm.isFocused(2), \"Focused index: \" + fm.getFocusedIndex());\n@@ -1463,1 +1514,1 @@\n-        assertTrue(\"Focused index: \" + fm.getFocusedIndex(), fm.isFocused(1));\n+        assertTrue(fm.isFocused(1), \"Focused index: \" + fm.getFocusedIndex());\n@@ -1466,1 +1517,2 @@\n-    @Test public void test_rt17522_focusShouldBeMovedWhenFocusedItemIsRemoved_1() {\n+    @Test\n+    public void test_rt17522_focusShouldBeMovedWhenFocusedItemIsRemoved_1() {\n@@ -1477,1 +1529,2 @@\n-    @Test public void test_rt17522_focusShouldMoveWhenItemRemovedBeforeFocusIndex_1() {\n+    @Test\n+    public void test_rt17522_focusShouldMoveWhenItemRemovedBeforeFocusIndex_1() {\n@@ -1502,1 +1555,2 @@\n-    @Test public void test_rt18385() {\n+    @Test\n+    public void test_rt18385() {\n@@ -1511,1 +1565,2 @@\n-    @Test public void test_rt18339_onlyEditWhenTreeTableViewIsEditable_editableIsFalse() {\n+    @Test\n+    public void test_rt18339_onlyEditWhenTreeTableViewIsEditable_editableIsFalse() {\n@@ -1551,1 +1606,2 @@\n-    @Test public void test_rt14451() {\n+    @Test\n+    public void test_rt14451() {\n@@ -1577,1 +1633,2 @@\n-    @Test public void test_rt27181() {\n+    @Test\n+    public void test_rt27181() {\n@@ -1590,1 +1647,2 @@\n-    @Test public void test_rt27185() {\n+    @Test\n+    public void test_rt27185() {\n@@ -1603,1 +1661,2 @@\n-    @Test public void test_rt28114() {\n+    @Test\n+    public void test_rt28114() {\n@@ -1620,1 +1679,2 @@\n-    @Test public void test_rt27820_1() {\n+    @Test\n+    public void test_rt27820_1() {\n@@ -1652,1 +1712,2 @@\n-    @Test public void test_rt28390() {\n+    @Test\n+    public void test_rt28390() {\n@@ -1694,2 +1755,3 @@\n-    @Ignore(\"This test begun failing when createDefaultCellImpl was removed from TreeTableViewSkin on 28\/3\/2013\")\n-    @Test public void test_rt28534() {\n+    @Disabled(\"This test begun failing when createDefaultCellImpl was removed from TreeTableViewSkin on 28\/3\/2013\")\n+    @Test\n+    public void test_rt28534() {\n@@ -1776,1 +1838,2 @@\n-    @Test public void test_rt28637() {\n+    @Test\n+    public void test_rt28637() {\n@@ -1803,1 +1866,2 @@\n-    @Test public void test_rt24844() {\n+    @Test\n+    public void test_rt24844() {\n@@ -1881,1 +1945,2 @@\n-    @Test public void test_rt29330_1() {\n+    @Test\n+    public void test_rt29330_1() {\n@@ -1929,1 +1994,2 @@\n-    @Test public void test_rt29330_2() {\n+    @Test\n+    public void test_rt29330_2() {\n@@ -1978,1 +2044,2 @@\n-    @Test public void test_rt29313_selectedIndices() {\n+    @Test\n+    public void test_rt29313_selectedIndices() {\n@@ -2079,1 +2146,2 @@\n-    @Test public void test_rt29566() {\n+    @Test\n+    public void test_rt29566() {\n@@ -2186,1 +2254,2 @@\n-    @Test public void test_rt29676_withText() {\n+    @Test\n+    public void test_rt29676_withText() {\n@@ -2280,1 +2349,1 @@\n-        assertTrue(sm.getSelectedIndices().toString(), sm.isSelected(1));   \/\/ salesDepartment\n+        assertTrue(sm.isSelected(1), sm.getSelectedIndices().toString());   \/\/ salesDepartment\n@@ -2285,1 +2354,2 @@\n-    @Test public void test_rt27180_collapseBranch_laterSiblingSelected_singleSelection() {\n+    @Test\n+    public void test_rt27180_collapseBranch_laterSiblingSelected_singleSelection() {\n@@ -2300,1 +2370,1 @@\n-        assertTrue(debug(), sm.isSelected(2));   \/\/ itSupport\n+        assertTrue(sm.isSelected(2), debug());   \/\/ itSupport\n@@ -2320,1 +2390,1 @@\n-        assertEquals(debug(), 3, sm.getSelectedIndices().size());\n+        assertEquals(3, sm.getSelectedIndices().size(), debug());\n@@ -2323,1 +2393,1 @@\n-        assertTrue(debug(), sm.isSelected(2));   \/\/ itSupport\n+        assertTrue(sm.isSelected(2), debug());   \/\/ itSupport\n@@ -2330,1 +2400,2 @@\n-    @Test public void test_rt27180_expandBranch_laterSiblingSelected_singleSelection() {\n+    @Test\n+    public void test_rt27180_expandBranch_laterSiblingSelected_singleSelection() {\n@@ -2345,1 +2416,1 @@\n-        assertTrue(debug(), sm.isSelected(8));   \/\/ itSupport\n+        assertTrue(sm.isSelected(8), debug());   \/\/ itSupport\n@@ -2350,1 +2421,2 @@\n-    @Test public void test_rt27180_expandBranch_laterSiblingAndChildrenSelected() {\n+    @Test\n+    public void test_rt27180_expandBranch_laterSiblingAndChildrenSelected() {\n@@ -2368,1 +2440,1 @@\n-        assertTrue(debug(), sm.isSelected(8));   \/\/ itSupport\n+        assertTrue(sm.isSelected(8), debug());   \/\/ itSupport\n@@ -2375,1 +2447,2 @@\n-    @Test public void test_rt30400() {\n+    @Test\n+    public void test_rt30400() {\n@@ -2396,2 +2469,3 @@\n-    @Ignore(\"This bug is not yet fixed\")\n-    @Test public void test_rt31165() {\n+    @Disabled(\"This bug is not yet fixed\")\n+    @Test\n+    public void test_rt31165() {\n@@ -2424,1 +2498,2 @@\n-    @Test public void test_rt31404() {\n+    @Test\n+    public void test_rt31404() {\n@@ -2439,1 +2514,2 @@\n-    @Test public void test_rt31471() {\n+    @Test\n+    public void test_rt31471() {\n@@ -2459,1 +2535,2 @@\n-    @Test public void test_rt30466() {\n+    @Test\n+    public void test_rt30466() {\n@@ -2507,1 +2584,2 @@\n-    @Test public void test_rt_31200_tableCell() {\n+    @Test\n+    public void test_rt_31200_tableCell() {\n@@ -2558,1 +2636,2 @@\n-    @Test public void test_rt_31200_tableRow() {\n+    @Test\n+    public void test_rt_31200_tableRow() {\n@@ -2607,1 +2686,2 @@\n-    @Test public void test_rt_31727() {\n+    @Test\n+    public void test_rt_31727() {\n@@ -2689,1 +2769,1 @@\n-        assertTrue(debug(), sm.isSelected(1));\n+        assertTrue(sm.isSelected(1), debug());\n@@ -2744,1 +2824,2 @@\n-    @Test public void test_rt_30484_treeTableRow() {\n+    @Test\n+    public void test_rt_30484_treeTableRow() {\n@@ -2784,1 +2865,2 @@\n-    @Test public void test_rt_31015() {\n+    @Test\n+    public void test_rt_31015() {\n@@ -2831,2 +2913,2 @@\n-        assertEquals(TreeTableViewShim.get_contentWidth(treeTableView),\n-                TableColumnBaseShim.getWidth(col), 0.0);\n+        assertEquals(TreeTableViewShim.get_contentWidth(treeTableView), TableColumnBaseShim.getWidth(col),\n+                0.0);\n@@ -2840,1 +2922,2 @@\n-    @Test public void test_rt_29650() {\n+    @Test\n+    public void test_rt_29650() {\n@@ -2881,1 +2964,2 @@\n-    @Test public void test_rt_29849() {\n+    @Test\n+    public void test_rt_29849() {\n@@ -2910,1 +2994,2 @@\n-    @Test public void test_rt_34327() {\n+    @Test\n+    public void test_rt_34327() {\n@@ -2958,1 +3043,2 @@\n-    @Test public void test_rt26718() {\n+    @Test\n+    public void test_rt26718() {\n@@ -3000,1 +3086,2 @@\n-    @Test public void test_rt_34493() {\n+    @Test\n+    public void test_rt_34493() {\n@@ -3042,1 +3129,2 @@\n-    @Test public void test_rt26721_collapseParent_firstRootChild() {\n+    @Test\n+    public void test_rt26721_collapseParent_firstRootChild() {\n@@ -3083,1 +3171,2 @@\n-    @Test public void test_rt26721_collapseParent_lastRootChild() {\n+    @Test\n+    public void test_rt26721_collapseParent_lastRootChild() {\n@@ -3122,1 +3211,2 @@\n-    @Test public void test_rt26721_collapseGrandParent() {\n+    @Test\n+    public void test_rt26721_collapseGrandParent() {\n@@ -3163,1 +3253,2 @@\n-    @Test public void test_rt_34685_directEditCall_cellSelectionMode() {\n+    @Test\n+    public void test_rt_34685_directEditCall_cellSelectionMode() {\n@@ -3173,1 +3264,2 @@\n-    @Test public void test_rt_34685_mouseDoubleClick_cellSelectionMode() {\n+    @Test\n+    public void test_rt_34685_mouseDoubleClick_cellSelectionMode() {\n@@ -3178,1 +3270,2 @@\n-    @Test public void test_rt_34685_mouseDoubleClick_rowSelectionMode() {\n+    @Test\n+    public void test_rt_34685_mouseDoubleClick_rowSelectionMode() {\n@@ -3258,1 +3351,2 @@\n-    @Test public void test_rt34694() {\n+    @Test\n+    public void test_rt34694() {\n@@ -3293,1 +3387,2 @@\n-    @Test public void test_rt35213() {\n+    @Test\n+    public void test_rt35213() {\n@@ -3364,1 +3459,2 @@\n-    @Test public void test_rt23245_itemIsInTree() {\n+    @Test\n+    public void test_rt23245_itemIsInTree() {\n@@ -3399,1 +3495,2 @@\n-    @Test public void test_rt23245_itemIsNotInTree_noRootNode() {\n+    @Test\n+    public void test_rt23245_itemIsNotInTree_noRootNode() {\n@@ -3425,1 +3522,2 @@\n-    @Test public void test_rt23245_itemIsNotInTree_withUnrelatedRootNode() {\n+    @Test\n+    public void test_rt23245_itemIsNotInTree_withUnrelatedRootNode() {\n@@ -3453,1 +3551,2 @@\n-    @Test public void test_rt35039_setRoot() {\n+    @Test\n+    public void test_rt35039_setRoot() {\n@@ -3481,1 +3580,2 @@\n-    @Test public void test_rt35039_resetRootChildren() {\n+    @Test\n+    public void test_rt35039_resetRootChildren() {\n@@ -3509,1 +3609,2 @@\n-    @Test public void test_rt35763() {\n+    @Test\n+    public void test_rt35763() {\n@@ -3526,1 +3627,1 @@\n-        assertEquals(aaa,treeView.getTreeItem(2));\n+        assertEquals(aaa, treeView.getTreeItem(2));\n@@ -3538,1 +3639,1 @@\n-        assertEquals(aaa,treeView.getTreeItem(1));\n+        assertEquals(aaa, treeView.getTreeItem(1));\n@@ -3551,1 +3652,1 @@\n-        assertEquals(ccc,treeView.getTreeItem(2));\n+        assertEquals(ccc, treeView.getTreeItem(2));\n@@ -3614,1 +3715,1 @@\n-        assertEquals(\"expected list after\" + modified, expected, items);\n+        assertEquals(expected, items, \"expected list after\" + modified);\n@@ -3618,1 +3719,2 @@\n-    @Test public void test_rt35857() {\n+    @Test\n+    public void test_rt35857() {\n@@ -3693,1 +3795,2 @@\n-    @Test public void test_rt25679_rowSelection() {\n+    @Test\n+    public void test_rt25679_rowSelection() {\n@@ -3697,1 +3800,2 @@\n-    @Test public void test_rt25679_cellSelection() {\n+    @Test\n+    public void test_rt25679_cellSelection() {\n@@ -3749,1 +3853,2 @@\n-    @Test public void test_rt36885() {\n+    @Test\n+    public void test_rt36885() {\n@@ -3753,1 +3858,2 @@\n-    @Test public void test_rt36885_addChildAfterSelection() {\n+    @Test\n+    public void test_rt36885_addChildAfterSelection() {\n@@ -3803,1 +3909,2 @@\n-    @Test public void test_rt_37061() {\n+    @Test\n+    public void test_rt_37061() {\n@@ -3827,1 +3934,2 @@\n-    @Test public void test_rt_37054_noScroll() {\n+    @Test\n+    public void test_rt_37054_noScroll() {\n@@ -3831,1 +3939,2 @@\n-    @Test public void test_rt_37054_scroll() {\n+    @Test\n+    public void test_rt_37054_scroll() {\n@@ -3892,1 +4001,2 @@\n-    @Test public void test_rt_37395() {\n+    @Test\n+    public void test_rt_37395() {\n@@ -4009,1 +4119,2 @@\n-    @Test public void test_rt_37429() {\n+    @Test\n+    public void test_rt_37429() {\n@@ -4059,1 +4170,2 @@\n-    @Test public void test_rt_37429_sortEventsShouldNotFireExtraChangeEvents() {\n+    @Test\n+    public void test_rt_37429_sortEventsShouldNotFireExtraChangeEvents() {\n@@ -4114,1 +4226,2 @@\n-    @Test public void test_rt_37538_noCNextCall() {\n+    @Test\n+    public void test_rt_37538_noCNextCall() {\n@@ -4118,1 +4231,2 @@\n-    @Test public void test_rt_37538_callCNextOnce() {\n+    @Test\n+    public void test_rt_37538_callCNextOnce() {\n@@ -4164,1 +4278,2 @@\n-    @Test public void test_rt_37593() {\n+    @Test\n+    public void test_rt_37593() {\n@@ -4197,1 +4312,1 @@\n-        assertTrue(debug(), sm.isSelected(4));\n+        assertTrue(sm.isSelected(4), debug());\n@@ -4204,1 +4319,1 @@\n-        assertTrue(debug(), sm.isSelected(4));\n+        assertTrue(sm.isSelected(4), debug());\n@@ -4211,1 +4326,2 @@\n-    @Test public void test_rt_35395_testCell_notFixedCellSize() {\n+    @Test\n+    public void test_rt_35395_testCell_notFixedCellSize() {\n@@ -4215,1 +4331,1 @@\n-    @Ignore(\"Fix not yet developed for TreeTableView\")\n+    @Disabled(\"Fix not yet developed for TreeTableView\")\n@@ -4220,2 +4336,3 @@\n-    @Ignore(\"Fix not yet developed for TreeTableView\")\n-    @Test public void test_rt_35395_testRow_notFixedCellSize() {\n+    @Disabled(\"Fix not yet developed for TreeTableView\")\n+    @Test\n+    public void test_rt_35395_testRow_notFixedCellSize() {\n@@ -4355,1 +4472,2 @@\n-    @Test public void test_rt_38464_rowSelection_selectFirstRowOnly() {\n+    @Test\n+    public void test_rt_38464_rowSelection_selectFirstRowOnly() {\n@@ -4372,1 +4490,2 @@\n-    @Test public void test_rt_38464_rowSelection_selectFirstRowAndThenCallNoOpMethods() {\n+    @Test\n+    public void test_rt_38464_rowSelection_selectFirstRowAndThenCallNoOpMethods() {\n@@ -4393,1 +4512,2 @@\n-    @Test public void test_rt_38464_cellSelection_selectFirstRowOnly() {\n+    @Test\n+    public void test_rt_38464_cellSelection_selectFirstRowOnly() {\n@@ -4413,1 +4533,2 @@\n-    @Test public void test_rt_38464_cellSelection_selectFirstRowAndThenCallNoOpMethods() {\n+    @Test\n+    public void test_rt_38464_cellSelection_selectFirstRowAndThenCallNoOpMethods() {\n@@ -4435,1 +4556,2 @@\n-    @Test public void test_rt38464_selectCellMultipleTimes() {\n+    @Test\n+    public void test_rt38464_selectCellMultipleTimes() {\n@@ -4459,1 +4581,2 @@\n-    @Test public void test_rt38464_selectCellThenRow() {\n+    @Test\n+    public void test_rt38464_selectCellThenRow() {\n@@ -4486,1 +4609,2 @@\n-    @Test public void test_rt38464_selectRowThenCell() {\n+    @Test\n+    public void test_rt38464_selectRowThenCell() {\n@@ -4512,1 +4636,2 @@\n-    @Test public void test_rt38464_selectTests_cellSelection_singleSelection_selectsOneRow() {\n+    @Test\n+    public void test_rt38464_selectTests_cellSelection_singleSelection_selectsOneRow() {\n@@ -4516,1 +4641,2 @@\n-    @Test public void test_rt38464_selectTests_cellSelection_singleSelection_selectsTwoRows() {\n+    @Test\n+    public void test_rt38464_selectTests_cellSelection_singleSelection_selectsTwoRows() {\n@@ -4520,1 +4646,2 @@\n-    @Test public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsOneRow() {\n+    @Test\n+    public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsOneRow() {\n@@ -4524,1 +4651,2 @@\n-    @Test public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsTwoRows() {\n+    @Test\n+    public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsTwoRows() {\n@@ -4528,1 +4656,2 @@\n-    @Test public void test_rt38464_selectTests_rowSelection_singleSelection_selectsOneRow() {\n+    @Test\n+    public void test_rt38464_selectTests_rowSelection_singleSelection_selectsOneRow() {\n@@ -4536,1 +4665,2 @@\n-    @Test public void test_rt38464_selectTests_rowSelection_multipleSelection_selectsOneRow() {\n+    @Test\n+    public void test_rt38464_selectTests_rowSelection_multipleSelection_selectsOneRow() {\n@@ -4540,1 +4670,2 @@\n-    @Test public void test_rt38464_selectTests_rowSelection_multipleSelection_selectsTwoRows() {\n+    @Test\n+    public void test_rt38464_selectTests_rowSelection_multipleSelection_selectsTwoRows() {\n@@ -4587,1 +4718,2 @@\n-    @Test public void test_rt_37853_replaceRoot() {\n+    @Test\n+    public void test_rt_37853_replaceRoot() {\n@@ -4591,1 +4723,2 @@\n-    @Test public void test_rt_37853_replaceRootChildren() {\n+    @Test\n+    public void test_rt_37853_replaceRootChildren() {\n@@ -4677,1 +4810,2 @@\n-    @Test public void test_rt_38892_focusMovesToLeftWhenPossible() {\n+    @Test\n+    public void test_rt_38892_focusMovesToLeftWhenPossible() {\n@@ -4726,1 +4860,2 @@\n-    @Test public void test_rt_38892_removeSelectionFromCellsInRemovedColumn() {\n+    @Test\n+    public void test_rt_38892_removeSelectionFromCellsInRemovedColumn() {\n@@ -4748,1 +4883,2 @@\n-    @Test public void test_rt_38787_remove_b() {\n+    @Test\n+    public void test_rt_38787_remove_b() {\n@@ -4753,1 +4889,2 @@\n-    @Test public void test_rt_38787_remove_b_c() {\n+    @Test\n+    public void test_rt_38787_remove_b_c() {\n@@ -4758,1 +4895,2 @@\n-    @Test public void test_rt_38787_remove_c_d() {\n+    @Test\n+    public void test_rt_38787_remove_c_d() {\n@@ -4814,1 +4952,2 @@\n-    @Test public void test_rt_38341() {\n+    @Test\n+    public void test_rt_38341() {\n@@ -4873,1 +5012,2 @@\n-    @Test public void test_rt_38943() {\n+    @Test\n+    public void test_rt_38943() {\n@@ -4913,1 +5053,2 @@\n-    @Test public void test_rt_38884() {\n+    @Test\n+    public void test_rt_38884() {\n@@ -4946,1 +5087,2 @@\n-    @Test public void test_rt_37360() {\n+    @Test\n+    public void test_rt_37360() {\n@@ -5049,1 +5191,2 @@\n-                            assertTrue(c.getRemoved().containsAll(FXCollections.observableArrayList(treeItem1, treeItem2)));\n+                            assertTrue(\n+                                    c.getRemoved().containsAll(FXCollections.observableArrayList(treeItem1, treeItem2)));\n@@ -5104,1 +5247,2 @@\n-    @Test public void test_rt_38491() {\n+    @Test\n+    public void test_rt_38491() {\n@@ -5176,1 +5320,2 @@\n-    @Test public void test_rt_39256() {\n+    @Test\n+    public void test_rt_39256() {\n@@ -5281,1 +5426,2 @@\n-    @Test public void test_rt_39559_useKeyboard_selectAll() {\n+    @Test\n+    public void test_rt_39559_useKeyboard_selectAll() {\n@@ -5320,1 +5466,2 @@\n-        assertEquals(0, ((TreeTablePosition) TreeTableCellBehavior.getAnchor(stringTreeTableView, null)).getRow());\n+        assertEquals(0,\n+                ((TreeTablePosition) TreeTableCellBehavior.getAnchor(stringTreeTableView, null)).getRow());\n@@ -5324,1 +5471,2 @@\n-        assertEquals(0, ((TreeTablePosition) TreeTableCellBehavior.getAnchor(stringTreeTableView, null)).getRow());\n+        assertEquals(0,\n+                ((TreeTablePosition) TreeTableCellBehavior.getAnchor(stringTreeTableView, null)).getRow());\n@@ -5332,1 +5480,2 @@\n-    @Test public void test_rt_16068_firstElement_selectAndRemoveSameRow() {\n+    @Test\n+    public void test_rt_16068_firstElement_selectAndRemoveSameRow() {\n@@ -5338,1 +5487,2 @@\n-    @Test public void test_rt_16068_firstElement_selectRowAndRemoveLaterSibling() {\n+    @Test\n+    public void test_rt_16068_firstElement_selectRowAndRemoveLaterSibling() {\n@@ -5349,1 +5499,2 @@\n-    @Test public void test_rt_16068_middleElement_selectRowAndRemoveLaterSibling() {\n+    @Test\n+    public void test_rt_16068_middleElement_selectRowAndRemoveLaterSibling() {\n@@ -5360,1 +5511,2 @@\n-    @Test public void test_rt_16068_lastElement_selectAndRemoveSameRow() {\n+    @Test\n+    public void test_rt_16068_lastElement_selectAndRemoveSameRow() {\n@@ -5366,1 +5518,2 @@\n-    @Test public void test_rt_16068_lastElement_selectRowAndRemoveEarlierSibling() {\n+    @Test\n+    public void test_rt_16068_lastElement_selectRowAndRemoveEarlierSibling() {\n@@ -5401,1 +5554,1 @@\n-        assertEquals(debug(), expectedIndex, fm.getFocusedIndex());\n+        assertEquals(expectedIndex, fm.getFocusedIndex(), debug());\n@@ -5484,2 +5637,2 @@\n-        assertTrue(\"row of item must be less than expandedItemCount, but was: \" + treeTableView.getRow(grandChild),\n-                treeTableView.getRow(grandChild) < treeTableView.getExpandedItemCount());\n+        assertTrue(treeTableView.getRow(grandChild) < treeTableView.getExpandedItemCount(),\n+                \"row of item must be less than expandedItemCount, but was: \" + treeTableView.getRow(grandChild));\n@@ -5488,1 +5641,2 @@\n-    @Test public void test_rt_39661_rowOfGrandChildParentCollapsedUpdatedOnInsertAbove() {\n+    @Test\n+    public void test_rt_39661_rowOfGrandChildParentCollapsedUpdatedOnInsertAbove() {\n@@ -5503,1 +5657,2 @@\n-    @Test public void test_rt_39661_rowOfGrandChildParentCollapsedUpdatedOnInsertAboveWithoutAccess() {\n+    @Test\n+    public void test_rt_39661_rowOfGrandChildParentCollapsedUpdatedOnInsertAboveWithoutAccess() {\n@@ -5518,1 +5673,2 @@\n-    @Test public void test_rt_39661_rowOfGrandChildParentExpandedUpdatedOnInsertAbove() {\n+    @Test\n+    public void test_rt_39661_rowOfGrandChildParentExpandedUpdatedOnInsertAbove() {\n@@ -5534,1 +5690,2 @@\n-    @Test public void test_rt_39661_rowOfGrandChildDependsOnParentExpansion() {\n+    @Test\n+    public void test_rt_39661_rowOfGrandChildDependsOnParentExpansion() {\n@@ -5554,2 +5711,2 @@\n-        assertNotSame(\"getRow must depend on expansionState \" + collapedGrandIndex,\n-                collapedGrandIndex, treeTableView.getRow(expandedGrandChild));\n+        assertNotSame(collapedGrandIndex, treeTableView.getRow(expandedGrandChild),\n+                \"getRow must depend on expansionState \" + collapedGrandIndex);\n@@ -5558,1 +5715,2 @@\n-    @Test public void test_rt_39661_rowOfGrandChildInCollapsedChild() {\n+    @Test\n+    public void test_rt_39661_rowOfGrandChildInCollapsedChild() {\n@@ -5570,1 +5728,1 @@\n-        assertEquals(\"grandChild not visible\", -1, row);\n+        assertEquals(-1, row, \"grandChild not visible\");\n@@ -5578,1 +5736,2 @@\n-    @Test public void test_rt_39661_rowOfRootChild() {\n+    @Test\n+    public void test_rt_39661_rowOfRootChild() {\n@@ -5586,1 +5745,2 @@\n-    @Test public void test_rt_39661_expandedItemCount() {\n+    @Test\n+    public void test_rt_39661_expandedItemCount() {\n@@ -5602,1 +5762,2 @@\n-    @Test public void test_rt_39822() {\n+    @Test\n+    public void test_rt_39822() {\n@@ -5638,1 +5799,2 @@\n-    @Test public void test_rt_39842_selectLeftDown() {\n+    @Test\n+    public void test_rt_39842_selectLeftDown() {\n@@ -5646,1 +5808,2 @@\n-    @Test public void test_rt_39842_selectRightDown() {\n+    @Test\n+    public void test_rt_39842_selectRightDown() {\n@@ -5650,1 +5813,2 @@\n-    @Test public void test_rt_39842_selectRightUp() {\n+    @Test\n+    public void test_rt_39842_selectRightUp() {\n@@ -5714,1 +5878,2 @@\n-    @Test public void test_rt_22599() {\n+    @Test\n+    public void test_rt_22599() {\n@@ -5819,1 +5984,2 @@\n-    @Test public void test_rt_40012_selectedAtLastOnDisjointRemoveItemsAbove() {\n+    @Test\n+    public void test_rt_40012_selectedAtLastOnDisjointRemoveItemsAbove() {\n@@ -5852,1 +6018,1 @@\n-        assertEquals(\"selected index after disjoint removes above\", expected, sm.getSelectedIndex());\n+        assertEquals(expected, sm.getSelectedIndex(), \"selected index after disjoint removes above\");\n@@ -5860,1 +6026,2 @@\n-    @Test public void test_rt_40012_accessSelectedAtLastOnDisjointRemoveItemsAbove() {\n+    @Test\n+    public void test_rt_40012_accessSelectedAtLastOnDisjointRemoveItemsAbove() {\n@@ -5900,1 +6067,2 @@\n-    @Test public void test_rt_40012_selectedIndexNotificationOnDisjointRemovesAbove() {\n+    @Test\n+    public void test_rt_40012_selectedIndexNotificationOnDisjointRemovesAbove() {\n@@ -5929,2 +6097,2 @@\n-        assertEquals(\"sanity: selectedIndex must be shifted by -2\", last - 2, sm.getSelectedIndex());\n-        assertEquals(\"must fire single event on removes above\", 1, rt_40012_count);\n+        assertEquals(last - 2, sm.getSelectedIndex(), \"sanity: selectedIndex must be shifted by -2\");\n+        assertEquals(1, rt_40012_count, \"must fire single event on removes above\");\n@@ -5967,2 +6135,2 @@\n-        assertEquals(\"sanity: selectedItem unchanged\", lastItem, sm.getSelectedItem());\n-        assertEquals(\"must not fire on unchanged selected item\", 0, rt_40012_count);\n+        assertEquals(lastItem, sm.getSelectedItem(), \"sanity: selectedItem unchanged\");\n+        assertEquals(0, rt_40012_count, \"must not fire on unchanged selected item\");\n@@ -5972,1 +6140,2 @@\n-    @Test public void test_rt_40010() {\n+    @Test\n+    public void test_rt_40010() {\n@@ -6005,1 +6174,2 @@\n-    @Test public void test_rt_40212() {\n+    @Test\n+    public void test_rt_40212() {\n@@ -6031,1 +6201,1 @@\n-            assertEquals(\"sanity: selectedIndex unchanged\", selected, sm.getSelectedIndex());\n+            assertEquals(selected, sm.getSelectedIndex(), \"sanity: selectedIndex unchanged\");\n@@ -6033,1 +6203,1 @@\n-                assertEquals(\"single event on clearAndSelect already selected\", 1, ++rt_40212_count);\n+                assertEquals(1, ++rt_40212_count, \"single event on clearAndSelect already selected\");\n@@ -6036,1 +6206,1 @@\n-                assertTrue(\"at least one of the change types must be true\", type);\n+                assertTrue(type, \"at least one of the change types must be true\");\n@@ -6043,1 +6213,2 @@\n-    @Test public void test_rt_40280() {\n+    @Test\n+    public void test_rt_40280() {\n@@ -6051,1 +6222,2 @@\n-    @Test public void test_rt_40278_showRoot() {\n+    @Test\n+    public void test_rt_40278_showRoot() {\n@@ -6060,1 +6232,1 @@\n-        assertFalse(\"sanity: test setup such that root is not showing\", view.isShowRoot());\n+        assertFalse(view.isShowRoot(), \"sanity: test setup such that root is not showing\");\n@@ -6078,1 +6250,1 @@\n-        assertTrue(\"sanity: test setup such that root is showing\", view.isShowRoot());\n+        assertTrue(view.isShowRoot(), \"sanity: test setup such that root is showing\");\n@@ -6087,1 +6259,2 @@\n-    @Test public void test_rt_40278_hideRoot_selectionOnRoot() {\n+    @Test\n+    public void test_rt_40278_hideRoot_selectionOnRoot() {\n@@ -6096,1 +6269,1 @@\n-        assertTrue(\"sanity: test setup such that root is showing\", view.isShowRoot());\n+        assertTrue(view.isShowRoot(), \"sanity: test setup such that root is showing\");\n@@ -6108,1 +6281,2 @@\n-    @Test public void test_rt_40263() {\n+    @Test\n+    public void test_rt_40263() {\n@@ -6141,1 +6315,2 @@\n-    @Test public void test_rt_40319_toRight_toBottom()          { test_rt_40319(true, true, false);   }\n+    @Test\n+    public void test_rt_40319_toRight_toBottom()          { test_rt_40319(true, true, false);   }\n@@ -6143,3 +6318,6 @@\n-    @Test public void test_rt_40319_toLeft_toBottom()           { test_rt_40319(false, true, false);  }\n-    @Test public void test_rt_40319_toLeft_toTop()              { test_rt_40319(false, false, false); }\n-    @Test public void test_rt_40319_toRight_toBottom_useMouse() { test_rt_40319(true, true, true);    }\n+    @Test\n+    public void test_rt_40319_toLeft_toBottom()           { test_rt_40319(false, true, false);  }\n+    @Test\n+    public void test_rt_40319_toLeft_toTop()              { test_rt_40319(false, false, false); }\n+    @Test\n+    public void test_rt_40319_toRight_toBottom_useMouse() { test_rt_40319(true, true, true);    }\n@@ -6147,2 +6325,4 @@\n-    @Test public void test_rt_40319_toLeft_toBottom_useMouse()  { test_rt_40319(false, true, true);   }\n-    @Test public void test_rt_40319_toLeft_toTop_useMouse()     { test_rt_40319(false, false, true);  }\n+    @Test\n+    public void test_rt_40319_toLeft_toBottom_useMouse()  { test_rt_40319(false, true, true);   }\n+    @Test\n+    public void test_rt_40319_toLeft_toTop_useMouse()     { test_rt_40319(false, false, true);  }\n@@ -6247,1 +6427,2 @@\n-    @Test public void test_jdk_8144681_removeColumn() {\n+    @Test\n+    public void test_jdk_8144681_removeColumn() {\n@@ -6273,1 +6454,2 @@\n-    @Test public void test_jdk_8144681_moveColumn() {\n+    @Test\n+    public void test_jdk_8144681_moveColumn() {\n@@ -6379,2 +6561,2 @@\n-                    assertTrue(\"added: \" + c.getAddedSubList(),\n-                            c.getAddedSubList().containsAll(FXCollections.observableArrayList(1,2,3)));\n+                    assertTrue(c.getAddedSubList().containsAll(FXCollections.observableArrayList(1,2,3)),\n+                            \"added: \" + c.getAddedSubList());\n@@ -6411,2 +6593,3 @@\n-                    assertTrue(\"added: \" + c.getAddedSubList(),\n-                            c.getAddedSubList().containsAll(FXCollections.observableArrayList(childNode1, item1, item2)));\n+                    assertTrue(\n+                            c.getAddedSubList().containsAll(FXCollections.observableArrayList(childNode1, item1, item2)),\n+                            \"added: \" + c.getAddedSubList());\n@@ -6470,1 +6653,2 @@\n-    @Test public void test_jdk_8157285() {\n+    @Test\n+    public void test_jdk_8157285() {\n@@ -6509,1 +6693,2 @@\n-    @Test public void test_jdk_8152396() {\n+    @Test\n+    public void test_jdk_8152396() {\n@@ -6557,1 +6742,2 @@\n-    @Test public void test_jdk_8160771() {\n+    @Test\n+    public void test_jdk_8160771() {\n@@ -6596,1 +6782,2 @@\n-    @Test public void test_jdk_8169642_1_only() {\n+    @Test\n+    public void test_jdk_8169642_1_only() {\n@@ -6634,1 +6821,2 @@\n-    @Test public void test_jdk_8169642_1_and_3() {\n+    @Test\n+    public void test_jdk_8169642_1_and_3() {\n@@ -6680,1 +6868,2 @@\n-    @Test public void testRemovedSelectedItemsWhenBranchIsCollapsed() {\n+    @Test\n+    public void testRemovedSelectedItemsWhenBranchIsCollapsed() {\n@@ -6819,1 +7008,2 @@\n-        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\"We don't expect any exceptions in this test!\"));\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\n+                \"We don't expect any exceptions in this test!\"));\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewTest.java","additions":463,"deletions":273,"binary":false,"changes":736,"status":"modified"}]}