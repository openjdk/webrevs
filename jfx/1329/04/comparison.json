{"files":[{"patch":"@@ -1922,1 +1922,1 @@\n-            case ROW_COUNT: return getItems().size();\n+            case ROW_COUNT: return getItems() != null ? getItems().size() : 0;\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableView.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -207,11 +207,0 @@\n-\n-    \/** returns the number of visible rows in Tree\/TableView *\/\n-    public static int getItemCount(TableViewSkinBase<?,?,?,?,?> skin) {\n-        Object control = skin.getSkinnable();\n-        if (control instanceof TableView table) {\n-            return table.getItems().size();\n-        } else if (control instanceof TreeTableView tree) {\n-            return tree.getExpandedItemCount();\n-        }\n-        return 0;\n-    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableSkinUtils.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -909,1 +909,1 @@\n-        if ((contentWidth <= 0) || (TableSkinUtils.getItemCount(this) == 0)) {\n+        if ((contentWidth <= 0) || (getItemCount() == 0)) {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableViewSkinBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -32,1 +33,0 @@\n-import static org.junit.Assert.*;\n@@ -49,1 +49,4 @@\n-import org.junit.After;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -84,3 +87,0 @@\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n@@ -128,1 +128,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -141,1 +142,1 @@\n-    @After\n+    @AfterEach\n@@ -164,1 +165,2 @@\n-    @Test public void noArgConstructorSetsNonNullSortPolicy() {\n+    @Test\n+    public void noArgConstructorSetsNonNullSortPolicy() {\n@@ -172,1 +174,2 @@\n-    @Test public void noArgConstructorSetsNullOnSort() {\n+    @Test\n+    public void noArgConstructorSetsNullOnSort() {\n@@ -236,1 +239,2 @@\n-    @Test public void selectionModelCanBeBound() {\n+    @Test\n+    public void selectionModelCanBeBound() {\n@@ -249,1 +253,2 @@\n-    @Test public void canSetSelectedItemToAnItemEvenWhenThereAreNoItems() {\n+    @Test\n+    public void canSetSelectedItemToAnItemEvenWhenThereAreNoItems() {\n@@ -296,1 +301,1 @@\n-        assertNull(\"Selected Item: \" + sm.getSelectedItem(), sm.getSelectedItem());\n+        assertNull(sm.getSelectedItem(), \"Selected Item: \" + sm.getSelectedItem());\n@@ -425,1 +430,2 @@\n-    @Test public void testVisibleLeafColumns() {\n+    @Test\n+    public void testVisibleLeafColumns() {\n@@ -483,1 +489,1 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n@@ -498,1 +504,2 @@\n-    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeSortOrderList() {\n+    @Test\n+    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeSortOrderList() {\n@@ -511,2 +518,3 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n-    @Test public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_AscendingToDescending() {\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n+    @Test\n+    public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_AscendingToDescending() {\n@@ -532,1 +540,2 @@\n-    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_AscendingToDescending() {\n+    @Test\n+    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_AscendingToDescending() {\n@@ -549,2 +558,3 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n-    @Test public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_DescendingToNull() {\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n+    @Test\n+    public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_DescendingToNull() {\n@@ -568,1 +578,2 @@\n-    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_DescendingToNull() {\n+    @Test\n+    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_DescendingToNull() {\n@@ -586,1 +597,1 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n@@ -623,1 +634,2 @@\n-    @Test public void testSortMethodWithNullSortPolicy() {\n+    @Test\n+    public void testSortMethodWithNullSortPolicy() {\n@@ -679,1 +691,2 @@\n-    @Test public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_ascendingToDescending() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_ascendingToDescending() {\n@@ -692,1 +705,2 @@\n-    @Test public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_descendingToNull() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_descendingToNull() {\n@@ -705,1 +719,2 @@\n-    @Test public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_nullToAscending() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_nullToAscending() {\n@@ -760,1 +775,2 @@\n-    @Test public void testFailedSortPolicyBacksOutComparatorChange_sortOrderRemoval() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutComparatorChange_sortOrderRemoval() {\n@@ -778,1 +794,2 @@\n-    @Test public void testFailedSortPolicyBacksOutComparatorChange_sortTypeChange() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutComparatorChange_sortTypeChange() {\n@@ -814,1 +831,2 @@\n-    @Test public void testInvisibleScrollbarDoesNotScrollTableToBeginning() {\n+    @Test\n+    public void testInvisibleScrollbarDoesNotScrollTableToBeginning() {\n@@ -845,1 +863,2 @@\n-    @Test public void test_rt16019() {\n+    @Test\n+    public void test_rt16019() {\n@@ -854,1 +873,2 @@\n-    @Test public void test_rt15793() {\n+    @Test\n+    public void test_rt15793() {\n@@ -879,1 +899,1 @@\n-        assertTrue(\"Focus is on \" + fm.getFocusedIndex(), fm.isFocused(1));\n+        assertTrue(fm.isFocused(1), \"Focus is on \" + fm.getFocusedIndex());\n@@ -885,1 +905,2 @@\n-    @Test public void test_rt17522_focusShouldMoveWhenItemAddedBeforeFocusIndex() {\n+    @Test\n+    public void test_rt17522_focusShouldMoveWhenItemAddedBeforeFocusIndex() {\n@@ -913,1 +934,2 @@\n-    @Test public void test_rt17522_focusShouldBeResetWhenFocusedItemIsRemoved() {\n+    @Test\n+    public void test_rt17522_focusShouldBeResetWhenFocusedItemIsRemoved() {\n@@ -939,1 +961,2 @@\n-    @Test public void test_rt17522_focusShouldNotMoveWhenItemRemovedAfterFocusIndex() {\n+    @Test\n+    public void test_rt17522_focusShouldNotMoveWhenItemRemovedAfterFocusIndex() {\n@@ -961,1 +984,2 @@\n-    @Test public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsFalse() {\n+    @Test\n+    public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsFalse() {\n@@ -970,1 +994,2 @@\n-    @Test public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsTrue() {\n+    @Test\n+    public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsTrue() {\n@@ -988,1 +1013,2 @@\n-    @Test public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsTrue_columnEditableIsTrue() {\n+    @Test\n+    public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsTrue_columnEditableIsTrue() {\n@@ -1017,1 +1043,2 @@\n-    @Test public void test_rt27820_1() {\n+    @Test\n+    public void test_rt27820_1() {\n@@ -1028,1 +1055,2 @@\n-    @Test public void test_rt27820_2() {\n+    @Test\n+    public void test_rt27820_2() {\n@@ -1039,1 +1067,2 @@\n-    @Test public void test_rt28534() {\n+    @Test\n+    public void test_rt28534() {\n@@ -1067,1 +1096,2 @@\n-    @Test public void test_rt22463() {\n+    @Test\n+    public void test_rt22463() {\n@@ -1101,1 +1131,2 @@\n-    @Test public void test_rt28637() {\n+    @Test\n+    public void test_rt28637() {\n@@ -1302,1 +1333,2 @@\n-    @Test public void test_rt29313_selectedItems() {\n+    @Test\n+    public void test_rt29313_selectedItems() {\n@@ -1390,1 +1422,2 @@\n-    @Test public void test_rt29390() {\n+    @Test\n+    public void test_rt29390() {\n@@ -1454,1 +1487,2 @@\n-    @Test public void test_rt31165() {\n+    @Test\n+    public void test_rt31165() {\n@@ -1568,1 +1602,2 @@\n-    @Test public void test_rt_31200_tableRow() {\n+    @Test\n+    public void test_rt_31200_tableRow() {\n@@ -1649,1 +1684,2 @@\n-    @Test public void test_rt_21517() {\n+    @Test\n+    public void test_rt_21517() {\n@@ -1991,1 +2027,2 @@\n-    @Test public void test_rt_32708_removeFromColumnsList() {\n+    @Test\n+    public void test_rt_32708_removeFromColumnsList() {\n@@ -2090,1 +2127,2 @@\n-    @Test public void test_rt_34685_directEditCall_cellSelectionMode() {\n+    @Test\n+    public void test_rt_34685_directEditCall_cellSelectionMode() {\n@@ -2100,1 +2138,2 @@\n-    @Test public void test_rt_34685_mouseDoubleClick_cellSelectionMode() {\n+    @Test\n+    public void test_rt_34685_mouseDoubleClick_cellSelectionMode() {\n@@ -2180,1 +2219,2 @@\n-    @Test public void test_rt_35224() {\n+    @Test\n+    public void test_rt_35224() {\n@@ -2215,1 +2255,2 @@\n-    @Test public void test_rt_35141_simple_switch_two_columns_move_col2_backward_1_place() {\n+    @Test\n+    public void test_rt_35141_simple_switch_two_columns_move_col2_backward_1_place() {\n@@ -2275,1 +2316,2 @@\n-    @Test public void test_rt_35141_simple_switch_three_columns_move_col2_forward_1_place() {\n+    @Test\n+    public void test_rt_35141_simple_switch_three_columns_move_col2_forward_1_place() {\n@@ -2296,1 +2338,2 @@\n-    @Test public void test_rt_35141_simple_switch_three_columns_move_col3_backward_1_place() {\n+    @Test\n+    public void test_rt_35141_simple_switch_three_columns_move_col3_backward_1_place() {\n@@ -2359,1 +2402,2 @@\n-    @Test public void test_rt_35141_hidden_column_move_col1_forward_1_place() {\n+    @Test\n+    public void test_rt_35141_hidden_column_move_col1_forward_1_place() {\n@@ -2382,1 +2426,2 @@\n-    @Test public void test_rt_35141_hidden_column_move_col1_forward_100_places() {\n+    @Test\n+    public void test_rt_35141_hidden_column_move_col1_forward_100_places() {\n@@ -2461,1 +2506,2 @@\n-    @Test public void test_rt_35141_multiple_hidden_columns_move_col1_to_end() {\n+    @Test\n+    public void test_rt_35141_multiple_hidden_columns_move_col1_to_end() {\n@@ -2626,1 +2672,2 @@\n-    @Test public void test_rt_34042() {\n+    @Test\n+    public void test_rt_34042() {\n@@ -2721,1 +2768,2 @@\n-    @Test public void test_rt35763_observableList() {\n+    @Test\n+    public void test_rt35763_observableList() {\n@@ -2769,1 +2817,2 @@\n-    @Test public void test_rt35763_sortedList() {\n+    @Test\n+    public void test_rt35763_sortedList() {\n@@ -2822,1 +2871,1 @@\n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n@@ -2824,1 +2873,1 @@\n-        readOnlyUnbackedObservableListSubListTest(-1, 0);\n+        assertThrows(IndexOutOfBoundsException.class, () -> readOnlyUnbackedObservableListSubListTest(-1, 0));\n@@ -2827,1 +2876,1 @@\n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n@@ -2829,1 +2878,1 @@\n-        readOnlyUnbackedObservableListSubListTest(0, 10);\n+        assertThrows(IndexOutOfBoundsException.class, () -> readOnlyUnbackedObservableListSubListTest(0, 10));\n@@ -2832,1 +2881,1 @@\n-    @Test(expected = IndexOutOfBoundsException.class)\n+    @Test\n@@ -2834,1 +2883,1 @@\n-        readOnlyUnbackedObservableListSubListTest(1, 1);\n+        assertThrows(IndexOutOfBoundsException.class, () -> readOnlyUnbackedObservableListSubListTest(1, 1));\n@@ -2899,1 +2948,1 @@\n-        assertEquals(\"expected list after\" + modified, expected, items);\n+        assertEquals(expected, items, \"expected list after\" + modified);\n@@ -3010,1 +3059,2 @@\n-    @Test public void test_rt36353() {\n+    @Test\n+    public void test_rt36353() {\n@@ -3068,1 +3118,2 @@\n-    @Test public void test_rt36290() {\n+    @Test\n+    public void test_rt36290() {\n@@ -3228,1 +3279,2 @@\n-    @Test public void test_rt_36656_removeFromColumns() {\n+    @Test\n+    public void test_rt_36656_removeFromColumns() {\n@@ -3354,1 +3406,2 @@\n-    @Test public void test_rt_36669() {\n+    @Test\n+    public void test_rt_36669() {\n@@ -3503,1 +3556,2 @@\n-    @Test public void test_rt_37057_test1_MouseEvents() {\n+    @Test\n+    public void test_rt_37057_test1_MouseEvents() {\n@@ -3684,1 +3738,2 @@\n-    @Test public void test_rt_37054_noScroll() {\n+    @Test\n+    public void test_rt_37054_noScroll() {\n@@ -3688,1 +3743,2 @@\n-    @Test public void test_rt_37054_scroll() {\n+    @Test\n+    public void test_rt_37054_scroll() {\n@@ -3743,1 +3799,2 @@\n-        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\"We don't expect any exceptions in this test!\"));\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\n+                \"We don't expect any exceptions in this test!\"));\n@@ -3782,1 +3839,2 @@\n-    @Test public void test_rt_37429_sortEventsShouldNotFireExtraChangeEvents() {\n+    @Test\n+    public void test_rt_37429_sortEventsShouldNotFireExtraChangeEvents() {\n@@ -3874,1 +3932,1 @@\n-    @Ignore(\"Fix not yet developed for TableView\")\n+    @Disabled(\"Fix not yet developed for TableView\")\n@@ -3879,1 +3937,1 @@\n-    @Ignore(\"Fix not yet developed for TableView\")\n+    @Disabled(\"Fix not yet developed for TableView\")\n@@ -3884,1 +3942,1 @@\n-    @Ignore(\"Fix not yet developed for TableView\")\n+    @Disabled(\"Fix not yet developed for TableView\")\n@@ -3889,1 +3947,1 @@\n-    @Ignore(\"Fix not yet developed for TableView\")\n+    @Disabled(\"Fix not yet developed for TableView\")\n@@ -3965,1 +4023,2 @@\n-    @Test public void test_rt_37632() {\n+    @Test\n+    public void test_rt_37632() {\n@@ -4047,1 +4106,2 @@\n-    @Test public void test_rt_38464_cellSelection_selectFirstRowOnly() {\n+    @Test\n+    public void test_rt_38464_cellSelection_selectFirstRowOnly() {\n@@ -4105,1 +4165,2 @@\n-    @Test public void test_rt38464_selectCellMultipleTimes() {\n+    @Test\n+    public void test_rt38464_selectCellMultipleTimes() {\n@@ -4172,1 +4233,2 @@\n-    @Test public void test_rt38464_selectRowThenCell() {\n+    @Test\n+    public void test_rt38464_selectRowThenCell() {\n@@ -4214,1 +4276,2 @@\n-    @Test public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsOneRow() {\n+    @Test\n+    public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsOneRow() {\n@@ -4218,1 +4281,2 @@\n-    @Test public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsTwoRows() {\n+    @Test\n+    public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsTwoRows() {\n@@ -4222,1 +4286,2 @@\n-    @Test public void test_rt38464_selectTests_rowSelection_singleSelection_selectsOneRow() {\n+    @Test\n+    public void test_rt38464_selectTests_rowSelection_singleSelection_selectsOneRow() {\n@@ -4291,1 +4356,2 @@\n-    @Test public void test_rt_37853() {\n+    @Test\n+    public void test_rt_37853() {\n@@ -4381,1 +4447,2 @@\n-    @Test public void test_rt_38892_removeLeftMostColumn() {\n+    @Test\n+    public void test_rt_38892_removeLeftMostColumn() {\n@@ -4407,1 +4474,2 @@\n-    @Test public void test_rt_38892_removeSelectionFromCellsInRemovedColumn() {\n+    @Test\n+    public void test_rt_38892_removeSelectionFromCellsInRemovedColumn() {\n@@ -4434,1 +4502,2 @@\n-    @Test public void test_rt_38787_remove_b_c() {\n+    @Test\n+    public void test_rt_38787_remove_b_c() {\n@@ -4449,1 +4518,2 @@\n-    @Test public void test_rt_38787_remove_z() {\n+    @Test\n+    public void test_rt_38787_remove_z() {\n@@ -4840,1 +4910,2 @@\n-    @Test public void test_rt_39559_useKeyboard_selectAll() {\n+    @Test\n+    public void test_rt_39559_useKeyboard_selectAll() {\n@@ -4898,1 +4969,2 @@\n-    @Test public void test_rt_16068_middleElement_selectRowAndRemoveLaterSibling() {\n+    @Test\n+    public void test_rt_16068_middleElement_selectRowAndRemoveLaterSibling() {\n@@ -4946,1 +5018,2 @@\n-    @Test public void test_rt_39822() {\n+    @Test\n+    public void test_rt_39822() {\n@@ -4986,1 +5059,2 @@\n-    @Test public void test_rt_39842_selectLeftUp() {\n+    @Test\n+    public void test_rt_39842_selectLeftUp() {\n@@ -5175,1 +5249,1 @@\n-        assertEquals(\"selected index after disjoint removes above\", expected, sm.getSelectedIndex());\n+        assertEquals(expected, sm.getSelectedIndex(), \"selected index after disjoint removes above\");\n@@ -5183,1 +5257,2 @@\n-    @Test public void test_rt_40012_accessSelectedAtLastOnDisjointRemoveItemsAbove() {\n+    @Test\n+    public void test_rt_40012_accessSelectedAtLastOnDisjointRemoveItemsAbove() {\n@@ -5230,2 +5305,2 @@\n-        assertEquals(\"sanity: selectedIndex must be shifted by -2\", last - 2, sm.getSelectedIndex());\n-        assertEquals(\"must fire single event on removes above\", 1, rt_40012_count);\n+        assertEquals(last - 2, sm.getSelectedIndex(), \"sanity: selectedIndex must be shifted by -2\");\n+        assertEquals(1, rt_40012_count, \"must fire single event on removes above\");\n@@ -5257,2 +5332,2 @@\n-        assertEquals(\"sanity: selectedItem unchanged\", lastItem, sm.getSelectedItem());\n-        assertEquals(\"must not fire on unchanged selected item\", 0, rt_40012_count);\n+        assertEquals(lastItem, sm.getSelectedItem(), \"sanity: selectedItem unchanged\");\n+        assertEquals(0, rt_40012_count, \"must not fire on unchanged selected item\");\n@@ -5282,1 +5357,1 @@\n-            assertEquals(\"sanity: selectedIndex unchanged\", selected, sm.getSelectedIndex());\n+            assertEquals(selected, sm.getSelectedIndex(), \"sanity: selectedIndex unchanged\");\n@@ -5284,1 +5359,1 @@\n-                assertEquals(\"single event on clearAndSelect already selected\", 1, ++rt_40212_count);\n+                assertEquals(1, ++rt_40212_count, \"single event on clearAndSelect already selected\");\n@@ -5287,1 +5362,1 @@\n-                assertTrue(\"at least one of the change types must be true\", type);\n+                assertTrue(type, \"at least one of the change types must be true\");\n@@ -5294,1 +5369,2 @@\n-    @Test public void test_rt_40280() {\n+    @Test\n+    public void test_rt_40280() {\n@@ -5305,1 +5381,2 @@\n-    @Test public void test_rt_40263() {\n+    @Test\n+    public void test_rt_40263() {\n@@ -5337,2 +5414,4 @@\n-    @Test public void test_rt_40319_toLeft_toBottom()           { test_rt_40319(false, true, false);  }\n-    @Test public void test_rt_40319_toLeft_toTop()              { test_rt_40319(false, false, false); }\n+    @Test\n+    public void test_rt_40319_toLeft_toBottom()           { test_rt_40319(false, true, false);  }\n+    @Test\n+    public void test_rt_40319_toLeft_toTop()              { test_rt_40319(false, false, false); }\n@@ -5381,1 +5460,2 @@\n-    @Test public void test_rt_40546() {\n+    @Test\n+    public void test_rt_40546() {\n@@ -5529,1 +5609,2 @@\n-    @Test public void test_8139460_heightDoesntShrinkAfterRemovingNestedColumns() throws Exception {\n+    @Test\n+    public void test_8139460_heightDoesntShrinkAfterRemovingNestedColumns() throws Exception {\n@@ -5540,1 +5621,1 @@\n-        assertTrue(\"Nested column header should be larger.\", nestedHeaderHeight > initialHeight);\n+        assertTrue(nestedHeaderHeight > initialHeight, \"Nested column header should be larger.\");\n@@ -5543,1 +5624,1 @@\n-        assertEquals(\"Header should shrink to initial size.\", initialHeight, row.getHeight(), 0.01);\n+        assertEquals(initialHeight, row.getHeight(), 0.01, \"Header should shrink to initial size.\");\n@@ -5582,1 +5663,2 @@\n-        assertArrayEquals(new String[] {\"column-header\", \"table-column\"}, standardHeader.getStyleClass().toArray());\n+        assertArrayEquals(new String[] {\"column-header\", \"table-column\"},\n+                standardHeader.getStyleClass().toArray());\n@@ -5585,1 +5667,2 @@\n-        assertArrayEquals(new String[] {\"column-header\", \"table-column\", \"custom-style-class\"}, standardWithStyleClassHeader.getStyleClass().toArray());\n+        assertArrayEquals(new String[] {\"column-header\", \"table-column\", \"custom-style-class\"},\n+                standardWithStyleClassHeader.getStyleClass().toArray());\n@@ -5588,1 +5671,2 @@\n-        assertArrayEquals(new String[] {\"nested-column-header\", \"table-column\", \"parent\"}, parentHeader.getStyleClass().toArray());\n+        assertArrayEquals(new String[] {\"nested-column-header\", \"table-column\", \"parent\"},\n+                parentHeader.getStyleClass().toArray());\n@@ -5591,1 +5675,2 @@\n-        assertArrayEquals(new String[] {\"column-header\", \"table-column\", \"child\"}, childHeader.getStyleClass().toArray());\n+        assertArrayEquals(new String[] {\"column-header\", \"table-column\", \"child\"},\n+                childHeader.getStyleClass().toArray());\n@@ -5698,1 +5783,2 @@\n-        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\"We don't expect any exceptions in this test!\"));\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\n+                \"We don't expect any exceptions in this test!\"));\n@@ -5742,1 +5828,2 @@\n-        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\"We don't expect any exceptions in this test!\"));\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\n+                \"We don't expect any exceptions in this test!\"));\n@@ -6038,1 +6125,1 @@\n-        assertEquals(FXCollections.observableArrayList(), result);\n+        assertEquals(observableArrayList(), result);\n@@ -6067,0 +6154,21 @@\n+\n+    @Test\n+    public void testTableItemsNullShouldNotThrow() {\n+        final TableColumn<String, String> c = new TableColumn<>(\"C\");\n+        c.setCellValueFactory(value -> new SimpleStringProperty(value.getValue()));\n+        table.getColumns().add(c);\n+\n+        table.getItems().addAll(\"1\", \"2\", \"3\");\n+\n+        stageLoader = new StageLoader(table);\n+        table.setItems(null);\n+\n+        assertDoesNotThrow(() -> Toolkit.getToolkit().firePulse());\n+    }\n+\n+    @Test\n+    public void testTableItemsNullQueryAcceessibleAttributeRowCountShouldNotThrow() {\n+        table.setItems(null);\n+\n+        assertDoesNotThrow(() -> table.queryAccessibleAttribute(AccessibleAttribute.ROW_COUNT));\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewTest.java","additions":229,"deletions":121,"binary":false,"changes":350,"status":"modified"},{"patch":"@@ -30,9 +30,1 @@\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -48,4 +40,4 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n@@ -158,1 +150,2 @@\n-    @Before public void setup() {\n+    @BeforeEach\n+    public void setup() {\n@@ -197,1 +190,1 @@\n-    @After\n+    @AfterEach\n@@ -259,1 +252,2 @@\n-    @Test public void noArgConstructorSetsNonNullSelectionModel() {\n+    @Test\n+    public void noArgConstructorSetsNonNullSelectionModel() {\n@@ -263,1 +257,2 @@\n-    @Test public void noArgConstructor_selectedItemIsNull() {\n+    @Test\n+    public void noArgConstructor_selectedItemIsNull() {\n@@ -267,1 +262,2 @@\n-    @Test public void noArgConstructor_selectedIndexIsNegativeOne() {\n+    @Test\n+    public void noArgConstructor_selectedIndexIsNegativeOne() {\n@@ -271,1 +267,2 @@\n-    @Test public void noArgConstructorSetsNonNullSortPolicy() {\n+    @Test\n+    public void noArgConstructorSetsNonNullSortPolicy() {\n@@ -275,1 +272,2 @@\n-    @Test public void noArgConstructorSetsNullComparator() {\n+    @Test\n+    public void noArgConstructorSetsNullComparator() {\n@@ -283,1 +281,2 @@\n-    @Test public void noArgConstructorSetsDefaultColumnResizePolicyPseudoclass() {\n+    @Test\n+    public void noArgConstructorSetsDefaultColumnResizePolicyPseudoclass() {\n@@ -289,1 +288,2 @@\n-    @Test public void singleArgConstructorSetsDefaultColumnResizePolicyPseudoclass() {\n+    @Test\n+    public void singleArgConstructorSetsDefaultColumnResizePolicyPseudoclass() {\n@@ -325,1 +325,2 @@\n-    @Test public void testColumns() {\n+    @Test\n+    public void testColumns() {\n@@ -338,1 +339,2 @@\n-    @Test public void testVisibleLeafColumns() {\n+    @Test\n+    public void testVisibleLeafColumns() {\n@@ -351,1 +353,2 @@\n-    @Test public void testSortOrderCleanup() {\n+    @Test\n+    public void testSortOrderCleanup() {\n@@ -424,1 +427,2 @@\n-    @Test public void testSelectionUpdatesCorrectlyAfterRootReverseAndSetAll() {\n+    @Test\n+    public void testSelectionUpdatesCorrectlyAfterRootReverseAndSetAll() {\n@@ -432,1 +436,1 @@\n-    @Ignore(\"JDK-8193442\")\n+    @Disabled(\"JDK-8193442\")\n@@ -443,2 +447,3 @@\n-    @Ignore(\"JDK-8248389\")\n-    @Test public void testSelectionUpdatesCorrectlyAfterAddingAnItemBeforeSelectedItem() {\n+    @Disabled(\"JDK-8248389\")\n+    @Test\n+    public void testSelectionUpdatesCorrectlyAfterAddingAnItemBeforeSelectedItem() {\n@@ -455,1 +460,2 @@\n-    @Test public void testSelectionUpdatesCorrectlyAfterChildReverseAndSetAll() {\n+    @Test\n+    public void testSelectionUpdatesCorrectlyAfterChildReverseAndSetAll() {\n@@ -463,2 +469,3 @@\n-    @Ignore(\"JDK-8193442\")\n-    @Test public void testSelectionUpdatesCorrectlyAfterChildReverseRemoveOneAndSetAll() {\n+    @Disabled(\"JDK-8193442\")\n+    @Test\n+    public void testSelectionUpdatesCorrectlyAfterChildReverseRemoveOneAndSetAll() {\n@@ -473,2 +480,3 @@\n-    @Ignore(\"JDK-8193442\")\n-    @Test public void testSelectionUpdatesCorrectlyAfterChildRemoveOneAndSetAll() {\n+    @Disabled(\"JDK-8193442\")\n+    @Test\n+    public void testSelectionUpdatesCorrectlyAfterChildRemoveOneAndSetAll() {\n@@ -482,1 +490,1 @@\n-    @Ignore(\"JDK-8193442\")\n+    @Disabled(\"JDK-8193442\")\n@@ -607,2 +615,2 @@\n-            assertTrue(\"The item (\" + beforePos.getRow() + \", \" + beforePos.getColumn() +\n-                    \") lost selection during permutation\", isCellStillSelected);\n+            assertTrue(isCellStillSelected, \"The item (\" + beforePos.getRow() + \", \" + beforePos.getColumn() +\n+                    \") lost selection during permutation\");\n@@ -615,2 +623,2 @@\n-            assertTrue(\"The item (\" + item + \") lost selection during permutation\",\n-                    selectedItems.contains(item));\n+            assertTrue(selectedItems.contains(item),\n+                    \"The item (\" + item + \") lost selection during permutation\");\n@@ -633,2 +641,3 @@\n-        assertEquals(\"Selected Item should remain same\", selectedItemBefore, sm.getSelectedItem());\n-        assertEquals(\"Selected index should be updated\", treeTableView.getRow(selectedItemBefore), sm.getSelectedIndex());\n+        assertEquals(selectedItemBefore, sm.getSelectedItem(), \"Selected Item should remain same\");\n+        assertEquals(treeTableView.getRow(selectedItemBefore), sm.getSelectedIndex(),\n+                \"Selected index should be updated\");\n@@ -641,1 +650,1 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n@@ -656,1 +665,2 @@\n-    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeSortOrderList() {\n+    @Test\n+    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeSortOrderList() {\n@@ -669,1 +679,1 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n@@ -690,1 +700,2 @@\n-    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_AscendingToDescending() {\n+    @Test\n+    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_AscendingToDescending() {\n@@ -707,2 +718,3 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n-    @Test public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_DescendingToNull() {\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n+    @Test\n+    public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_DescendingToNull() {\n@@ -726,1 +738,2 @@\n-    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_DescendingToNull() {\n+    @Test\n+    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_DescendingToNull() {\n@@ -744,2 +757,3 @@\n-    @Ignore(\"This test is only valid if sort event consumption should revert changes\")\n-    @Test public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_NullToAscending() {\n+    @Disabled(\"This test is only valid if sort event consumption should revert changes\")\n+    @Test\n+    public void testSortEventCanBeConsumedToStopSortOccurring_changeColumnSortType_NullToAscending() {\n@@ -763,1 +777,2 @@\n-    @Test public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_NullToAscending() {\n+    @Test\n+    public void testSortEventCanBeNotConsumedToAllowSortToOccur_changeColumnSortType_NullToAscending() {\n@@ -781,1 +796,2 @@\n-    @Test public void testSortMethodWithNullSortPolicy() {\n+    @Test\n+    public void testSortMethodWithNullSortPolicy() {\n@@ -788,1 +804,2 @@\n-    @Test public void testNoIOOBEWhenSortingAfterSelectAndClearRootChildren() {\n+    @Test\n+    public void testNoIOOBEWhenSortingAfterSelectAndClearRootChildren() {\n@@ -807,1 +824,2 @@\n-    @Test public void testSetSortOrderRetainsWhenRootHasNoChildren() {\n+    @Test\n+    public void testSetSortOrderRetainsWhenRootHasNoChildren() {\n@@ -819,1 +837,2 @@\n-    @Test public void testNPEWhenRootItemIsNull() {\n+    @Test\n+    public void testNPEWhenRootItemIsNull() {\n@@ -826,1 +845,2 @@\n-    @Test public void testChangingSortPolicyUpdatesItemsList() {\n+    @Test\n+    public void testChangingSortPolicyUpdatesItemsList() {\n@@ -836,1 +856,2 @@\n-    @Test public void testChangingSortPolicyDoesNotUpdateItemsListWhenTheSortOrderListIsEmpty() {\n+    @Test\n+    public void testChangingSortPolicyDoesNotUpdateItemsListWhenTheSortOrderListIsEmpty() {\n@@ -845,1 +866,2 @@\n-    @Test public void testFailedSortPolicyBacksOutLastChange_sortOrderAddition() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutLastChange_sortOrderAddition() {\n@@ -859,1 +881,2 @@\n-    @Test public void testFailedSortPolicyBacksOutLastChange_sortOrderRemoval() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutLastChange_sortOrderRemoval() {\n@@ -875,1 +898,2 @@\n-    @Test public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_ascendingToDescending() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_ascendingToDescending() {\n@@ -888,1 +912,2 @@\n-    @Test public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_descendingToNull() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_descendingToNull() {\n@@ -901,1 +926,2 @@\n-    @Test public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_nullToAscending() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutLastChange_sortTypeChange_nullToAscending() {\n@@ -914,1 +940,2 @@\n-    @Test public void testComparatorChangesInSyncWithSortOrder_1() {\n+    @Test\n+    public void testComparatorChangesInSyncWithSortOrder_1() {\n@@ -925,1 +952,2 @@\n-    @Test public void testComparatorChangesInSyncWithSortOrder_2() {\n+    @Test\n+    public void testComparatorChangesInSyncWithSortOrder_2() {\n@@ -973,1 +1001,2 @@\n-    @Test public void testFailedSortPolicyBacksOutComparatorChange_sortTypeChange() {\n+    @Test\n+    public void testFailedSortPolicyBacksOutComparatorChange_sortTypeChange() {\n@@ -1098,1 +1127,2 @@\n-    @Test public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsFalse() {\n+    @Test\n+    public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsFalse() {\n@@ -1107,1 +1137,2 @@\n-    @Test public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsTrue() {\n+    @Test\n+    public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsFalse_columnEditableIsTrue() {\n@@ -1116,1 +1147,2 @@\n-    @Test public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsTrue_columnEditableIsFalse() {\n+    @Test\n+    public void test_rt18339_onlyEditWhenTableViewIsEditable_tableEditableIsTrue_columnEditableIsFalse() {\n@@ -1181,1 +1213,2 @@\n-    @Test public void noArgConstructorSetsTheStyleClass() {\n+    @Test\n+    public void noArgConstructorSetsTheStyleClass() {\n@@ -1185,1 +1218,2 @@\n-    @Test public void noArgConstructorSetsNullItems() {\n+    @Test\n+    public void noArgConstructorSetsNullItems() {\n@@ -1198,1 +1232,2 @@\n-    @Test public void selectionModelCanBeNull() {\n+    @Test\n+    public void selectionModelCanBeNull() {\n@@ -1203,1 +1238,2 @@\n-    @Test public void selectionModelCanBeBound() {\n+    @Test\n+    public void selectionModelCanBeBound() {\n@@ -1212,1 +1248,2 @@\n-    @Test public void selectionModelCanBeChanged() {\n+    @Test\n+    public void selectionModelCanBeChanged() {\n@@ -1219,1 +1256,2 @@\n-    @Test public void canSetSelectedItemToAnItemEvenWhenThereAreNoItems() {\n+    @Test\n+    public void canSetSelectedItemToAnItemEvenWhenThereAreNoItems() {\n@@ -1226,1 +1264,2 @@\n-    @Test public void canSetSelectedItemToAnItemNotInTheDataModel() {\n+    @Test\n+    public void canSetSelectedItemToAnItemNotInTheDataModel() {\n@@ -1234,1 +1273,2 @@\n-    @Test public void settingTheSelectedItemToAnItemInItemsResultsInTheCorrectSelectedIndex() {\n+    @Test\n+    public void settingTheSelectedItemToAnItemInItemsResultsInTheCorrectSelectedIndex() {\n@@ -1241,2 +1281,3 @@\n-    @Ignore(\"Not yet supported\")\n-    @Test public void settingTheSelectedItemToANonexistantItemAndThenSettingItemsWhichContainsItResultsInCorrectSelectedIndex() {\n+    @Disabled(\"Not yet supported\")\n+    @Test\n+    public void settingTheSelectedItemToANonexistantItemAndThenSettingItemsWhichContainsItResultsInCorrectSelectedIndex() {\n@@ -1249,2 +1290,3 @@\n-    @Ignore(\"Not yet supported\")\n-    @Test public void ensureSelectionClearsWhenAllItemsAreRemoved_selectIndex0() {\n+    @Disabled(\"Not yet supported\")\n+    @Test\n+    public void ensureSelectionClearsWhenAllItemsAreRemoved_selectIndex0() {\n@@ -1258,2 +1300,3 @@\n-    @Ignore(\"Not yet supported\")\n-    @Test public void ensureSelectionClearsWhenAllItemsAreRemoved_selectIndex2() {\n+    @Disabled(\"Not yet supported\")\n+    @Test\n+    public void ensureSelectionClearsWhenAllItemsAreRemoved_selectIndex2() {\n@@ -1267,1 +1310,1 @@\n-    @Ignore(\"Not yet supported\")\n+    @Disabled(\"Not yet supported\")\n@@ -1287,1 +1330,2 @@\n-    @Test public void ensureSelectionIsCorrectWhenItemsChange() {\n+    @Test\n+    public void ensureSelectionIsCorrectWhenItemsChange() {\n@@ -1300,1 +1344,2 @@\n-    @Test public void ensureSelectionRemainsOnBranchWhenExpanded() {\n+    @Test\n+    public void ensureSelectionRemainsOnBranchWhenExpanded() {\n@@ -1313,1 +1358,2 @@\n-    @Test public void ensureRootIndexIsZeroWhenRootIsShowing() {\n+    @Test\n+    public void ensureRootIndexIsZeroWhenRootIsShowing() {\n@@ -1318,1 +1364,2 @@\n-    @Test public void ensureRootIndexIsNegativeOneWhenRootIsNotShowing() {\n+    @Test\n+    public void ensureRootIndexIsNegativeOneWhenRootIsNotShowing() {\n@@ -1324,1 +1371,2 @@\n-    @Test public void ensureCorrectIndexWhenRootTreeItemHasParent() {\n+    @Test\n+    public void ensureCorrectIndexWhenRootTreeItemHasParent() {\n@@ -1333,1 +1381,2 @@\n-    @Test public void ensureCorrectIndexWhenRootTreeItemHasParentAndRootIsNotShowing() {\n+    @Test\n+    public void ensureCorrectIndexWhenRootTreeItemHasParentAndRootIsNotShowing() {\n@@ -1380,1 +1429,2 @@\n-    @Ignore @Test public void test_rt17112() {\n+    @Disabled\n+    @Test public void test_rt17112() {\n@@ -1429,1 +1479,2 @@\n-    @Test public void test_rt17522_focusShouldMoveWhenItemAddedAtFocusIndex_1() {\n+    @Test\n+    public void test_rt17522_focusShouldMoveWhenItemAddedAtFocusIndex_1() {\n@@ -1443,1 +1494,2 @@\n-    @Test public void test_rt17522_focusShouldMoveWhenItemAddedBeforeFocusIndex_1() {\n+    @Test\n+    public void test_rt17522_focusShouldMoveWhenItemAddedBeforeFocusIndex_1() {\n@@ -1451,1 +1503,1 @@\n-        assertTrue(\"Focused index: \" + fm.getFocusedIndex(), fm.isFocused(2));\n+        assertTrue(fm.isFocused(2), \"Focused index: \" + fm.getFocusedIndex());\n@@ -1462,1 +1514,1 @@\n-        assertTrue(\"Focused index: \" + fm.getFocusedIndex(), fm.isFocused(1));\n+        assertTrue(fm.isFocused(1), \"Focused index: \" + fm.getFocusedIndex());\n@@ -1465,1 +1517,2 @@\n-    @Test public void test_rt17522_focusShouldBeMovedWhenFocusedItemIsRemoved_1() {\n+    @Test\n+    public void test_rt17522_focusShouldBeMovedWhenFocusedItemIsRemoved_1() {\n@@ -1476,1 +1529,2 @@\n-    @Test public void test_rt17522_focusShouldMoveWhenItemRemovedBeforeFocusIndex_1() {\n+    @Test\n+    public void test_rt17522_focusShouldMoveWhenItemRemovedBeforeFocusIndex_1() {\n@@ -1501,1 +1555,2 @@\n-    @Test public void test_rt18385() {\n+    @Test\n+    public void test_rt18385() {\n@@ -1510,1 +1565,2 @@\n-    @Test public void test_rt18339_onlyEditWhenTreeTableViewIsEditable_editableIsFalse() {\n+    @Test\n+    public void test_rt18339_onlyEditWhenTreeTableViewIsEditable_editableIsFalse() {\n@@ -1550,1 +1606,2 @@\n-    @Test public void test_rt14451() {\n+    @Test\n+    public void test_rt14451() {\n@@ -1576,1 +1633,2 @@\n-    @Test public void test_rt27181() {\n+    @Test\n+    public void test_rt27181() {\n@@ -1589,1 +1647,2 @@\n-    @Test public void test_rt27185() {\n+    @Test\n+    public void test_rt27185() {\n@@ -1602,1 +1661,2 @@\n-    @Test public void test_rt28114() {\n+    @Test\n+    public void test_rt28114() {\n@@ -1619,1 +1679,2 @@\n-    @Test public void test_rt27820_1() {\n+    @Test\n+    public void test_rt27820_1() {\n@@ -1651,1 +1712,2 @@\n-    @Test public void test_rt28390() {\n+    @Test\n+    public void test_rt28390() {\n@@ -1693,2 +1755,3 @@\n-    @Ignore(\"This test begun failing when createDefaultCellImpl was removed from TreeTableViewSkin on 28\/3\/2013\")\n-    @Test public void test_rt28534() {\n+    @Disabled(\"This test begun failing when createDefaultCellImpl was removed from TreeTableViewSkin on 28\/3\/2013\")\n+    @Test\n+    public void test_rt28534() {\n@@ -1775,1 +1838,2 @@\n-    @Test public void test_rt28637() {\n+    @Test\n+    public void test_rt28637() {\n@@ -1802,1 +1866,2 @@\n-    @Test public void test_rt24844() {\n+    @Test\n+    public void test_rt24844() {\n@@ -1880,1 +1945,2 @@\n-    @Test public void test_rt29330_1() {\n+    @Test\n+    public void test_rt29330_1() {\n@@ -1928,1 +1994,2 @@\n-    @Test public void test_rt29330_2() {\n+    @Test\n+    public void test_rt29330_2() {\n@@ -1977,1 +2044,2 @@\n-    @Test public void test_rt29313_selectedIndices() {\n+    @Test\n+    public void test_rt29313_selectedIndices() {\n@@ -2078,1 +2146,2 @@\n-    @Test public void test_rt29566() {\n+    @Test\n+    public void test_rt29566() {\n@@ -2185,1 +2254,2 @@\n-    @Test public void test_rt29676_withText() {\n+    @Test\n+    public void test_rt29676_withText() {\n@@ -2279,1 +2349,1 @@\n-        assertTrue(sm.getSelectedIndices().toString(), sm.isSelected(1));   \/\/ salesDepartment\n+        assertTrue(sm.isSelected(1), sm.getSelectedIndices().toString());   \/\/ salesDepartment\n@@ -2284,1 +2354,2 @@\n-    @Test public void test_rt27180_collapseBranch_laterSiblingSelected_singleSelection() {\n+    @Test\n+    public void test_rt27180_collapseBranch_laterSiblingSelected_singleSelection() {\n@@ -2299,1 +2370,1 @@\n-        assertTrue(debug(), sm.isSelected(2));   \/\/ itSupport\n+        assertTrue(sm.isSelected(2), debug());   \/\/ itSupport\n@@ -2319,1 +2390,1 @@\n-        assertEquals(debug(), 3, sm.getSelectedIndices().size());\n+        assertEquals(3, sm.getSelectedIndices().size(), debug());\n@@ -2322,1 +2393,1 @@\n-        assertTrue(debug(), sm.isSelected(2));   \/\/ itSupport\n+        assertTrue(sm.isSelected(2), debug());   \/\/ itSupport\n@@ -2329,1 +2400,2 @@\n-    @Test public void test_rt27180_expandBranch_laterSiblingSelected_singleSelection() {\n+    @Test\n+    public void test_rt27180_expandBranch_laterSiblingSelected_singleSelection() {\n@@ -2344,1 +2416,1 @@\n-        assertTrue(debug(), sm.isSelected(8));   \/\/ itSupport\n+        assertTrue(sm.isSelected(8), debug());   \/\/ itSupport\n@@ -2349,1 +2421,2 @@\n-    @Test public void test_rt27180_expandBranch_laterSiblingAndChildrenSelected() {\n+    @Test\n+    public void test_rt27180_expandBranch_laterSiblingAndChildrenSelected() {\n@@ -2367,1 +2440,1 @@\n-        assertTrue(debug(), sm.isSelected(8));   \/\/ itSupport\n+        assertTrue(sm.isSelected(8), debug());   \/\/ itSupport\n@@ -2374,1 +2447,2 @@\n-    @Test public void test_rt30400() {\n+    @Test\n+    public void test_rt30400() {\n@@ -2395,2 +2469,3 @@\n-    @Ignore(\"This bug is not yet fixed\")\n-    @Test public void test_rt31165() {\n+    @Disabled(\"This bug is not yet fixed\")\n+    @Test\n+    public void test_rt31165() {\n@@ -2423,1 +2498,2 @@\n-    @Test public void test_rt31404() {\n+    @Test\n+    public void test_rt31404() {\n@@ -2438,1 +2514,2 @@\n-    @Test public void test_rt31471() {\n+    @Test\n+    public void test_rt31471() {\n@@ -2458,1 +2535,2 @@\n-    @Test public void test_rt30466() {\n+    @Test\n+    public void test_rt30466() {\n@@ -2506,1 +2584,2 @@\n-    @Test public void test_rt_31200_tableCell() {\n+    @Test\n+    public void test_rt_31200_tableCell() {\n@@ -2557,1 +2636,2 @@\n-    @Test public void test_rt_31200_tableRow() {\n+    @Test\n+    public void test_rt_31200_tableRow() {\n@@ -2606,1 +2686,2 @@\n-    @Test public void test_rt_31727() {\n+    @Test\n+    public void test_rt_31727() {\n@@ -2688,1 +2769,1 @@\n-        assertTrue(debug(), sm.isSelected(1));\n+        assertTrue(sm.isSelected(1), debug());\n@@ -2743,1 +2824,2 @@\n-    @Test public void test_rt_30484_treeTableRow() {\n+    @Test\n+    public void test_rt_30484_treeTableRow() {\n@@ -2783,1 +2865,2 @@\n-    @Test public void test_rt_31015() {\n+    @Test\n+    public void test_rt_31015() {\n@@ -2830,2 +2913,2 @@\n-        assertEquals(TreeTableViewShim.get_contentWidth(treeTableView),\n-                TableColumnBaseShim.getWidth(col), 0.0);\n+        assertEquals(TreeTableViewShim.get_contentWidth(treeTableView), TableColumnBaseShim.getWidth(col),\n+                0.0);\n@@ -2839,1 +2922,2 @@\n-    @Test public void test_rt_29650() {\n+    @Test\n+    public void test_rt_29650() {\n@@ -2880,1 +2964,2 @@\n-    @Test public void test_rt_29849() {\n+    @Test\n+    public void test_rt_29849() {\n@@ -2909,1 +2994,2 @@\n-    @Test public void test_rt_34327() {\n+    @Test\n+    public void test_rt_34327() {\n@@ -2957,1 +3043,2 @@\n-    @Test public void test_rt26718() {\n+    @Test\n+    public void test_rt26718() {\n@@ -2999,1 +3086,2 @@\n-    @Test public void test_rt_34493() {\n+    @Test\n+    public void test_rt_34493() {\n@@ -3041,1 +3129,2 @@\n-    @Test public void test_rt26721_collapseParent_firstRootChild() {\n+    @Test\n+    public void test_rt26721_collapseParent_firstRootChild() {\n@@ -3082,1 +3171,2 @@\n-    @Test public void test_rt26721_collapseParent_lastRootChild() {\n+    @Test\n+    public void test_rt26721_collapseParent_lastRootChild() {\n@@ -3121,1 +3211,2 @@\n-    @Test public void test_rt26721_collapseGrandParent() {\n+    @Test\n+    public void test_rt26721_collapseGrandParent() {\n@@ -3162,1 +3253,2 @@\n-    @Test public void test_rt_34685_directEditCall_cellSelectionMode() {\n+    @Test\n+    public void test_rt_34685_directEditCall_cellSelectionMode() {\n@@ -3172,1 +3264,2 @@\n-    @Test public void test_rt_34685_mouseDoubleClick_cellSelectionMode() {\n+    @Test\n+    public void test_rt_34685_mouseDoubleClick_cellSelectionMode() {\n@@ -3177,1 +3270,2 @@\n-    @Test public void test_rt_34685_mouseDoubleClick_rowSelectionMode() {\n+    @Test\n+    public void test_rt_34685_mouseDoubleClick_rowSelectionMode() {\n@@ -3257,1 +3351,2 @@\n-    @Test public void test_rt34694() {\n+    @Test\n+    public void test_rt34694() {\n@@ -3292,1 +3387,2 @@\n-    @Test public void test_rt35213() {\n+    @Test\n+    public void test_rt35213() {\n@@ -3363,1 +3459,2 @@\n-    @Test public void test_rt23245_itemIsInTree() {\n+    @Test\n+    public void test_rt23245_itemIsInTree() {\n@@ -3398,1 +3495,2 @@\n-    @Test public void test_rt23245_itemIsNotInTree_noRootNode() {\n+    @Test\n+    public void test_rt23245_itemIsNotInTree_noRootNode() {\n@@ -3424,1 +3522,2 @@\n-    @Test public void test_rt23245_itemIsNotInTree_withUnrelatedRootNode() {\n+    @Test\n+    public void test_rt23245_itemIsNotInTree_withUnrelatedRootNode() {\n@@ -3452,1 +3551,2 @@\n-    @Test public void test_rt35039_setRoot() {\n+    @Test\n+    public void test_rt35039_setRoot() {\n@@ -3480,1 +3580,2 @@\n-    @Test public void test_rt35039_resetRootChildren() {\n+    @Test\n+    public void test_rt35039_resetRootChildren() {\n@@ -3508,1 +3609,2 @@\n-    @Test public void test_rt35763() {\n+    @Test\n+    public void test_rt35763() {\n@@ -3525,1 +3627,1 @@\n-        assertEquals(aaa,treeView.getTreeItem(2));\n+        assertEquals(aaa, treeView.getTreeItem(2));\n@@ -3537,1 +3639,1 @@\n-        assertEquals(aaa,treeView.getTreeItem(1));\n+        assertEquals(aaa, treeView.getTreeItem(1));\n@@ -3550,1 +3652,1 @@\n-        assertEquals(ccc,treeView.getTreeItem(2));\n+        assertEquals(ccc, treeView.getTreeItem(2));\n@@ -3613,1 +3715,1 @@\n-        assertEquals(\"expected list after\" + modified, expected, items);\n+        assertEquals(expected, items, \"expected list after\" + modified);\n@@ -3617,1 +3719,2 @@\n-    @Test public void test_rt35857() {\n+    @Test\n+    public void test_rt35857() {\n@@ -3692,1 +3795,2 @@\n-    @Test public void test_rt25679_rowSelection() {\n+    @Test\n+    public void test_rt25679_rowSelection() {\n@@ -3696,1 +3800,2 @@\n-    @Test public void test_rt25679_cellSelection() {\n+    @Test\n+    public void test_rt25679_cellSelection() {\n@@ -3748,1 +3853,2 @@\n-    @Test public void test_rt36885() {\n+    @Test\n+    public void test_rt36885() {\n@@ -3752,1 +3858,2 @@\n-    @Test public void test_rt36885_addChildAfterSelection() {\n+    @Test\n+    public void test_rt36885_addChildAfterSelection() {\n@@ -3802,1 +3909,2 @@\n-    @Test public void test_rt_37061() {\n+    @Test\n+    public void test_rt_37061() {\n@@ -3826,1 +3934,2 @@\n-    @Test public void test_rt_37054_noScroll() {\n+    @Test\n+    public void test_rt_37054_noScroll() {\n@@ -3830,1 +3939,2 @@\n-    @Test public void test_rt_37054_scroll() {\n+    @Test\n+    public void test_rt_37054_scroll() {\n@@ -3891,1 +4001,2 @@\n-    @Test public void test_rt_37395() {\n+    @Test\n+    public void test_rt_37395() {\n@@ -4008,1 +4119,2 @@\n-    @Test public void test_rt_37429() {\n+    @Test\n+    public void test_rt_37429() {\n@@ -4058,1 +4170,2 @@\n-    @Test public void test_rt_37429_sortEventsShouldNotFireExtraChangeEvents() {\n+    @Test\n+    public void test_rt_37429_sortEventsShouldNotFireExtraChangeEvents() {\n@@ -4113,1 +4226,2 @@\n-    @Test public void test_rt_37538_noCNextCall() {\n+    @Test\n+    public void test_rt_37538_noCNextCall() {\n@@ -4117,1 +4231,2 @@\n-    @Test public void test_rt_37538_callCNextOnce() {\n+    @Test\n+    public void test_rt_37538_callCNextOnce() {\n@@ -4163,1 +4278,2 @@\n-    @Test public void test_rt_37593() {\n+    @Test\n+    public void test_rt_37593() {\n@@ -4196,1 +4312,1 @@\n-        assertTrue(debug(), sm.isSelected(4));\n+        assertTrue(sm.isSelected(4), debug());\n@@ -4203,1 +4319,1 @@\n-        assertTrue(debug(), sm.isSelected(4));\n+        assertTrue(sm.isSelected(4), debug());\n@@ -4210,1 +4326,2 @@\n-    @Test public void test_rt_35395_testCell_notFixedCellSize() {\n+    @Test\n+    public void test_rt_35395_testCell_notFixedCellSize() {\n@@ -4214,1 +4331,1 @@\n-    @Ignore(\"Fix not yet developed for TreeTableView\")\n+    @Disabled(\"Fix not yet developed for TreeTableView\")\n@@ -4219,2 +4336,3 @@\n-    @Ignore(\"Fix not yet developed for TreeTableView\")\n-    @Test public void test_rt_35395_testRow_notFixedCellSize() {\n+    @Disabled(\"Fix not yet developed for TreeTableView\")\n+    @Test\n+    public void test_rt_35395_testRow_notFixedCellSize() {\n@@ -4354,1 +4472,2 @@\n-    @Test public void test_rt_38464_rowSelection_selectFirstRowOnly() {\n+    @Test\n+    public void test_rt_38464_rowSelection_selectFirstRowOnly() {\n@@ -4371,1 +4490,2 @@\n-    @Test public void test_rt_38464_rowSelection_selectFirstRowAndThenCallNoOpMethods() {\n+    @Test\n+    public void test_rt_38464_rowSelection_selectFirstRowAndThenCallNoOpMethods() {\n@@ -4392,1 +4512,2 @@\n-    @Test public void test_rt_38464_cellSelection_selectFirstRowOnly() {\n+    @Test\n+    public void test_rt_38464_cellSelection_selectFirstRowOnly() {\n@@ -4412,1 +4533,2 @@\n-    @Test public void test_rt_38464_cellSelection_selectFirstRowAndThenCallNoOpMethods() {\n+    @Test\n+    public void test_rt_38464_cellSelection_selectFirstRowAndThenCallNoOpMethods() {\n@@ -4434,1 +4556,2 @@\n-    @Test public void test_rt38464_selectCellMultipleTimes() {\n+    @Test\n+    public void test_rt38464_selectCellMultipleTimes() {\n@@ -4458,1 +4581,2 @@\n-    @Test public void test_rt38464_selectCellThenRow() {\n+    @Test\n+    public void test_rt38464_selectCellThenRow() {\n@@ -4485,1 +4609,2 @@\n-    @Test public void test_rt38464_selectRowThenCell() {\n+    @Test\n+    public void test_rt38464_selectRowThenCell() {\n@@ -4511,1 +4636,2 @@\n-    @Test public void test_rt38464_selectTests_cellSelection_singleSelection_selectsOneRow() {\n+    @Test\n+    public void test_rt38464_selectTests_cellSelection_singleSelection_selectsOneRow() {\n@@ -4515,1 +4641,2 @@\n-    @Test public void test_rt38464_selectTests_cellSelection_singleSelection_selectsTwoRows() {\n+    @Test\n+    public void test_rt38464_selectTests_cellSelection_singleSelection_selectsTwoRows() {\n@@ -4519,1 +4646,2 @@\n-    @Test public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsOneRow() {\n+    @Test\n+    public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsOneRow() {\n@@ -4523,1 +4651,2 @@\n-    @Test public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsTwoRows() {\n+    @Test\n+    public void test_rt38464_selectTests_cellSelection_multipleSelection_selectsTwoRows() {\n@@ -4527,1 +4656,2 @@\n-    @Test public void test_rt38464_selectTests_rowSelection_singleSelection_selectsOneRow() {\n+    @Test\n+    public void test_rt38464_selectTests_rowSelection_singleSelection_selectsOneRow() {\n@@ -4535,1 +4665,2 @@\n-    @Test public void test_rt38464_selectTests_rowSelection_multipleSelection_selectsOneRow() {\n+    @Test\n+    public void test_rt38464_selectTests_rowSelection_multipleSelection_selectsOneRow() {\n@@ -4539,1 +4670,2 @@\n-    @Test public void test_rt38464_selectTests_rowSelection_multipleSelection_selectsTwoRows() {\n+    @Test\n+    public void test_rt38464_selectTests_rowSelection_multipleSelection_selectsTwoRows() {\n@@ -4586,1 +4718,2 @@\n-    @Test public void test_rt_37853_replaceRoot() {\n+    @Test\n+    public void test_rt_37853_replaceRoot() {\n@@ -4590,1 +4723,2 @@\n-    @Test public void test_rt_37853_replaceRootChildren() {\n+    @Test\n+    public void test_rt_37853_replaceRootChildren() {\n@@ -4676,1 +4810,2 @@\n-    @Test public void test_rt_38892_focusMovesToLeftWhenPossible() {\n+    @Test\n+    public void test_rt_38892_focusMovesToLeftWhenPossible() {\n@@ -4725,1 +4860,2 @@\n-    @Test public void test_rt_38892_removeSelectionFromCellsInRemovedColumn() {\n+    @Test\n+    public void test_rt_38892_removeSelectionFromCellsInRemovedColumn() {\n@@ -4747,1 +4883,2 @@\n-    @Test public void test_rt_38787_remove_b() {\n+    @Test\n+    public void test_rt_38787_remove_b() {\n@@ -4752,1 +4889,2 @@\n-    @Test public void test_rt_38787_remove_b_c() {\n+    @Test\n+    public void test_rt_38787_remove_b_c() {\n@@ -4757,1 +4895,2 @@\n-    @Test public void test_rt_38787_remove_c_d() {\n+    @Test\n+    public void test_rt_38787_remove_c_d() {\n@@ -4813,1 +4952,2 @@\n-    @Test public void test_rt_38341() {\n+    @Test\n+    public void test_rt_38341() {\n@@ -4872,1 +5012,2 @@\n-    @Test public void test_rt_38943() {\n+    @Test\n+    public void test_rt_38943() {\n@@ -4912,1 +5053,2 @@\n-    @Test public void test_rt_38884() {\n+    @Test\n+    public void test_rt_38884() {\n@@ -4945,1 +5087,2 @@\n-    @Test public void test_rt_37360() {\n+    @Test\n+    public void test_rt_37360() {\n@@ -5048,1 +5191,2 @@\n-                            assertTrue(c.getRemoved().containsAll(FXCollections.observableArrayList(treeItem1, treeItem2)));\n+                            assertTrue(\n+                                    c.getRemoved().containsAll(FXCollections.observableArrayList(treeItem1, treeItem2)));\n@@ -5103,1 +5247,2 @@\n-    @Test public void test_rt_38491() {\n+    @Test\n+    public void test_rt_38491() {\n@@ -5175,1 +5320,2 @@\n-    @Test public void test_rt_39256() {\n+    @Test\n+    public void test_rt_39256() {\n@@ -5280,1 +5426,2 @@\n-    @Test public void test_rt_39559_useKeyboard_selectAll() {\n+    @Test\n+    public void test_rt_39559_useKeyboard_selectAll() {\n@@ -5319,1 +5466,2 @@\n-        assertEquals(0, ((TreeTablePosition) TreeTableCellBehavior.getAnchor(stringTreeTableView, null)).getRow());\n+        assertEquals(0,\n+                ((TreeTablePosition) TreeTableCellBehavior.getAnchor(stringTreeTableView, null)).getRow());\n@@ -5323,1 +5471,2 @@\n-        assertEquals(0, ((TreeTablePosition) TreeTableCellBehavior.getAnchor(stringTreeTableView, null)).getRow());\n+        assertEquals(0,\n+                ((TreeTablePosition) TreeTableCellBehavior.getAnchor(stringTreeTableView, null)).getRow());\n@@ -5331,1 +5480,2 @@\n-    @Test public void test_rt_16068_firstElement_selectAndRemoveSameRow() {\n+    @Test\n+    public void test_rt_16068_firstElement_selectAndRemoveSameRow() {\n@@ -5337,1 +5487,2 @@\n-    @Test public void test_rt_16068_firstElement_selectRowAndRemoveLaterSibling() {\n+    @Test\n+    public void test_rt_16068_firstElement_selectRowAndRemoveLaterSibling() {\n@@ -5348,1 +5499,2 @@\n-    @Test public void test_rt_16068_middleElement_selectRowAndRemoveLaterSibling() {\n+    @Test\n+    public void test_rt_16068_middleElement_selectRowAndRemoveLaterSibling() {\n@@ -5359,1 +5511,2 @@\n-    @Test public void test_rt_16068_lastElement_selectAndRemoveSameRow() {\n+    @Test\n+    public void test_rt_16068_lastElement_selectAndRemoveSameRow() {\n@@ -5365,1 +5518,2 @@\n-    @Test public void test_rt_16068_lastElement_selectRowAndRemoveEarlierSibling() {\n+    @Test\n+    public void test_rt_16068_lastElement_selectRowAndRemoveEarlierSibling() {\n@@ -5400,1 +5554,1 @@\n-        assertEquals(debug(), expectedIndex, fm.getFocusedIndex());\n+        assertEquals(expectedIndex, fm.getFocusedIndex(), debug());\n@@ -5483,2 +5637,2 @@\n-        assertTrue(\"row of item must be less than expandedItemCount, but was: \" + treeTableView.getRow(grandChild),\n-                treeTableView.getRow(grandChild) < treeTableView.getExpandedItemCount());\n+        assertTrue(treeTableView.getRow(grandChild) < treeTableView.getExpandedItemCount(),\n+                \"row of item must be less than expandedItemCount, but was: \" + treeTableView.getRow(grandChild));\n@@ -5487,1 +5641,2 @@\n-    @Test public void test_rt_39661_rowOfGrandChildParentCollapsedUpdatedOnInsertAbove() {\n+    @Test\n+    public void test_rt_39661_rowOfGrandChildParentCollapsedUpdatedOnInsertAbove() {\n@@ -5502,1 +5657,2 @@\n-    @Test public void test_rt_39661_rowOfGrandChildParentCollapsedUpdatedOnInsertAboveWithoutAccess() {\n+    @Test\n+    public void test_rt_39661_rowOfGrandChildParentCollapsedUpdatedOnInsertAboveWithoutAccess() {\n@@ -5517,1 +5673,2 @@\n-    @Test public void test_rt_39661_rowOfGrandChildParentExpandedUpdatedOnInsertAbove() {\n+    @Test\n+    public void test_rt_39661_rowOfGrandChildParentExpandedUpdatedOnInsertAbove() {\n@@ -5533,1 +5690,2 @@\n-    @Test public void test_rt_39661_rowOfGrandChildDependsOnParentExpansion() {\n+    @Test\n+    public void test_rt_39661_rowOfGrandChildDependsOnParentExpansion() {\n@@ -5553,2 +5711,2 @@\n-        assertNotSame(\"getRow must depend on expansionState \" + collapedGrandIndex,\n-                collapedGrandIndex, treeTableView.getRow(expandedGrandChild));\n+        assertNotSame(collapedGrandIndex, treeTableView.getRow(expandedGrandChild),\n+                \"getRow must depend on expansionState \" + collapedGrandIndex);\n@@ -5557,1 +5715,2 @@\n-    @Test public void test_rt_39661_rowOfGrandChildInCollapsedChild() {\n+    @Test\n+    public void test_rt_39661_rowOfGrandChildInCollapsedChild() {\n@@ -5569,1 +5728,1 @@\n-        assertEquals(\"grandChild not visible\", -1, row);\n+        assertEquals(-1, row, \"grandChild not visible\");\n@@ -5577,1 +5736,2 @@\n-    @Test public void test_rt_39661_rowOfRootChild() {\n+    @Test\n+    public void test_rt_39661_rowOfRootChild() {\n@@ -5585,1 +5745,2 @@\n-    @Test public void test_rt_39661_expandedItemCount() {\n+    @Test\n+    public void test_rt_39661_expandedItemCount() {\n@@ -5601,1 +5762,2 @@\n-    @Test public void test_rt_39822() {\n+    @Test\n+    public void test_rt_39822() {\n@@ -5637,1 +5799,2 @@\n-    @Test public void test_rt_39842_selectLeftDown() {\n+    @Test\n+    public void test_rt_39842_selectLeftDown() {\n@@ -5645,1 +5808,2 @@\n-    @Test public void test_rt_39842_selectRightDown() {\n+    @Test\n+    public void test_rt_39842_selectRightDown() {\n@@ -5649,1 +5813,2 @@\n-    @Test public void test_rt_39842_selectRightUp() {\n+    @Test\n+    public void test_rt_39842_selectRightUp() {\n@@ -5713,1 +5878,2 @@\n-    @Test public void test_rt_22599() {\n+    @Test\n+    public void test_rt_22599() {\n@@ -5818,1 +5984,2 @@\n-    @Test public void test_rt_40012_selectedAtLastOnDisjointRemoveItemsAbove() {\n+    @Test\n+    public void test_rt_40012_selectedAtLastOnDisjointRemoveItemsAbove() {\n@@ -5851,1 +6018,1 @@\n-        assertEquals(\"selected index after disjoint removes above\", expected, sm.getSelectedIndex());\n+        assertEquals(expected, sm.getSelectedIndex(), \"selected index after disjoint removes above\");\n@@ -5859,1 +6026,2 @@\n-    @Test public void test_rt_40012_accessSelectedAtLastOnDisjointRemoveItemsAbove() {\n+    @Test\n+    public void test_rt_40012_accessSelectedAtLastOnDisjointRemoveItemsAbove() {\n@@ -5899,1 +6067,2 @@\n-    @Test public void test_rt_40012_selectedIndexNotificationOnDisjointRemovesAbove() {\n+    @Test\n+    public void test_rt_40012_selectedIndexNotificationOnDisjointRemovesAbove() {\n@@ -5928,2 +6097,2 @@\n-        assertEquals(\"sanity: selectedIndex must be shifted by -2\", last - 2, sm.getSelectedIndex());\n-        assertEquals(\"must fire single event on removes above\", 1, rt_40012_count);\n+        assertEquals(last - 2, sm.getSelectedIndex(), \"sanity: selectedIndex must be shifted by -2\");\n+        assertEquals(1, rt_40012_count, \"must fire single event on removes above\");\n@@ -5966,2 +6135,2 @@\n-        assertEquals(\"sanity: selectedItem unchanged\", lastItem, sm.getSelectedItem());\n-        assertEquals(\"must not fire on unchanged selected item\", 0, rt_40012_count);\n+        assertEquals(lastItem, sm.getSelectedItem(), \"sanity: selectedItem unchanged\");\n+        assertEquals(0, rt_40012_count, \"must not fire on unchanged selected item\");\n@@ -5971,1 +6140,2 @@\n-    @Test public void test_rt_40010() {\n+    @Test\n+    public void test_rt_40010() {\n@@ -6004,1 +6174,2 @@\n-    @Test public void test_rt_40212() {\n+    @Test\n+    public void test_rt_40212() {\n@@ -6030,1 +6201,1 @@\n-            assertEquals(\"sanity: selectedIndex unchanged\", selected, sm.getSelectedIndex());\n+            assertEquals(selected, sm.getSelectedIndex(), \"sanity: selectedIndex unchanged\");\n@@ -6032,1 +6203,1 @@\n-                assertEquals(\"single event on clearAndSelect already selected\", 1, ++rt_40212_count);\n+                assertEquals(1, ++rt_40212_count, \"single event on clearAndSelect already selected\");\n@@ -6035,1 +6206,1 @@\n-                assertTrue(\"at least one of the change types must be true\", type);\n+                assertTrue(type, \"at least one of the change types must be true\");\n@@ -6042,1 +6213,2 @@\n-    @Test public void test_rt_40280() {\n+    @Test\n+    public void test_rt_40280() {\n@@ -6050,1 +6222,2 @@\n-    @Test public void test_rt_40278_showRoot() {\n+    @Test\n+    public void test_rt_40278_showRoot() {\n@@ -6059,1 +6232,1 @@\n-        assertFalse(\"sanity: test setup such that root is not showing\", view.isShowRoot());\n+        assertFalse(view.isShowRoot(), \"sanity: test setup such that root is not showing\");\n@@ -6077,1 +6250,1 @@\n-        assertTrue(\"sanity: test setup such that root is showing\", view.isShowRoot());\n+        assertTrue(view.isShowRoot(), \"sanity: test setup such that root is showing\");\n@@ -6086,1 +6259,2 @@\n-    @Test public void test_rt_40278_hideRoot_selectionOnRoot() {\n+    @Test\n+    public void test_rt_40278_hideRoot_selectionOnRoot() {\n@@ -6095,1 +6269,1 @@\n-        assertTrue(\"sanity: test setup such that root is showing\", view.isShowRoot());\n+        assertTrue(view.isShowRoot(), \"sanity: test setup such that root is showing\");\n@@ -6107,1 +6281,2 @@\n-    @Test public void test_rt_40263() {\n+    @Test\n+    public void test_rt_40263() {\n@@ -6140,1 +6315,2 @@\n-    @Test public void test_rt_40319_toRight_toBottom()          { test_rt_40319(true, true, false);   }\n+    @Test\n+    public void test_rt_40319_toRight_toBottom()          { test_rt_40319(true, true, false);   }\n@@ -6142,3 +6318,6 @@\n-    @Test public void test_rt_40319_toLeft_toBottom()           { test_rt_40319(false, true, false);  }\n-    @Test public void test_rt_40319_toLeft_toTop()              { test_rt_40319(false, false, false); }\n-    @Test public void test_rt_40319_toRight_toBottom_useMouse() { test_rt_40319(true, true, true);    }\n+    @Test\n+    public void test_rt_40319_toLeft_toBottom()           { test_rt_40319(false, true, false);  }\n+    @Test\n+    public void test_rt_40319_toLeft_toTop()              { test_rt_40319(false, false, false); }\n+    @Test\n+    public void test_rt_40319_toRight_toBottom_useMouse() { test_rt_40319(true, true, true);    }\n@@ -6146,2 +6325,4 @@\n-    @Test public void test_rt_40319_toLeft_toBottom_useMouse()  { test_rt_40319(false, true, true);   }\n-    @Test public void test_rt_40319_toLeft_toTop_useMouse()     { test_rt_40319(false, false, true);  }\n+    @Test\n+    public void test_rt_40319_toLeft_toBottom_useMouse()  { test_rt_40319(false, true, true);   }\n+    @Test\n+    public void test_rt_40319_toLeft_toTop_useMouse()     { test_rt_40319(false, false, true);  }\n@@ -6246,1 +6427,2 @@\n-    @Test public void test_jdk_8144681_removeColumn() {\n+    @Test\n+    public void test_jdk_8144681_removeColumn() {\n@@ -6272,1 +6454,2 @@\n-    @Test public void test_jdk_8144681_moveColumn() {\n+    @Test\n+    public void test_jdk_8144681_moveColumn() {\n@@ -6378,2 +6561,2 @@\n-                    assertTrue(\"added: \" + c.getAddedSubList(),\n-                            c.getAddedSubList().containsAll(FXCollections.observableArrayList(1,2,3)));\n+                    assertTrue(c.getAddedSubList().containsAll(FXCollections.observableArrayList(1,2,3)),\n+                            \"added: \" + c.getAddedSubList());\n@@ -6410,2 +6593,3 @@\n-                    assertTrue(\"added: \" + c.getAddedSubList(),\n-                            c.getAddedSubList().containsAll(FXCollections.observableArrayList(childNode1, item1, item2)));\n+                    assertTrue(\n+                            c.getAddedSubList().containsAll(FXCollections.observableArrayList(childNode1, item1, item2)),\n+                            \"added: \" + c.getAddedSubList());\n@@ -6469,1 +6653,2 @@\n-    @Test public void test_jdk_8157285() {\n+    @Test\n+    public void test_jdk_8157285() {\n@@ -6508,1 +6693,2 @@\n-    @Test public void test_jdk_8152396() {\n+    @Test\n+    public void test_jdk_8152396() {\n@@ -6556,1 +6742,2 @@\n-    @Test public void test_jdk_8160771() {\n+    @Test\n+    public void test_jdk_8160771() {\n@@ -6595,1 +6782,2 @@\n-    @Test public void test_jdk_8169642_1_only() {\n+    @Test\n+    public void test_jdk_8169642_1_only() {\n@@ -6633,1 +6821,2 @@\n-    @Test public void test_jdk_8169642_1_and_3() {\n+    @Test\n+    public void test_jdk_8169642_1_and_3() {\n@@ -6679,1 +6868,2 @@\n-    @Test public void testRemovedSelectedItemsWhenBranchIsCollapsed() {\n+    @Test\n+    public void testRemovedSelectedItemsWhenBranchIsCollapsed() {\n@@ -6818,1 +7008,2 @@\n-        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\"We don't expect any exceptions in this test!\"));\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> fail(\n+                \"We don't expect any exceptions in this test!\"));\n@@ -7253,0 +7444,26 @@\n+\n+    @Test\n+    public void testRootNullShouldNotThrow() {\n+        TreeTableColumn<String, String> c = new TreeTableColumn<>(\"C\");\n+        c.setCellValueFactory(value -> new SimpleStringProperty(value.getValue().getValue()));\n+        treeTableView.getColumns().add(c);\n+\n+        treeTableView.setRoot(new TreeItem<String>(\"Root\"));\n+        treeTableView.getRoot().setExpanded(true);\n+        for (int i = 0; i < 4; i++) {\n+            TreeItem<String> parent = new TreeItem<String>(\"item - \" + i);\n+            treeTableView.getRoot().getChildren().add(parent);\n+        }\n+\n+        stageLoader = new StageLoader(treeTableView);\n+        treeTableView.setRoot(null);\n+\n+        assertDoesNotThrow(() -> Toolkit.getToolkit().firePulse());\n+    }\n+\n+    @Test\n+    public void testTreeTableRootNullQueryAcceessibleAttributeRowCountShouldNotThrow() {\n+        treeTableView.setRoot(null);\n+\n+        assertDoesNotThrow(() -> treeTableView.queryAccessibleAttribute(AccessibleAttribute.ROW_COUNT));\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewTest.java","additions":489,"deletions":272,"binary":false,"changes":761,"status":"modified"}]}