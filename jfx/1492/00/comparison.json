{"files":[{"patch":"@@ -387,1 +387,1 @@\n-        final double availableBarSpace = catSpace - (getCategoryGap() + getBarGap());\n+        final double availableBarSpace = catSpace - getCategoryGap() + getBarGap();\n@@ -426,2 +426,0 @@\n-\n-                    index++;\n@@ -429,0 +427,2 @@\n+\n+                index++;\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/chart\/BarChart.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -71,2 +71,11 @@\n-    \/** This is the gap between one category and the next along this axis *\/\n-    private final DoubleProperty firstCategoryPos = new SimpleDoubleProperty(this, \"firstCategoryPos\", 0);\n+\n+    \/** This is the position of the first category along this axis *\/\n+    private final DoubleProperty firstCategoryPos =\n+            new SimpleDoubleProperty(this, \"firstCategoryPos\", 0) {\n+                @Override\n+                protected void invalidated() {\n+                    requestAxisLayout();\n+                    measureInvalid = true;\n+                }\n+            };\n+\n@@ -242,1 +251,9 @@\n-    private final ReadOnlyDoubleWrapper categorySpacing = new ReadOnlyDoubleWrapper(this, \"categorySpacing\", 1);\n+    private final ReadOnlyDoubleWrapper categorySpacing =\n+            new ReadOnlyDoubleWrapper(this, \"categorySpacing\", 1) {\n+                @Override\n+                protected void invalidated() {\n+                    requestAxisLayout();\n+                    measureInvalid = true;\n+                }\n+            };\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/chart\/CategoryAxis.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -32,0 +32,4 @@\n+import javafx.scene.Scene;\n+import javafx.scene.shape.MoveTo;\n+import javafx.scene.shape.Path;\n+import javafx.stage.Stage;\n@@ -274,0 +278,90 @@\n+\n+    @Test\n+    public void testTickMarksMatchBarPositionsAfterAnimation() {\n+        startApp();\n+        CategoryAxis xAxis = new CategoryAxis();\n+        NumberAxis yAxis = new NumberAxis();\n+        BarChart<String, Number> chart = new BarChart<>(xAxis, yAxis);\n+        Series<String, Number> series = new Series<>();\n+        chart.getData().add(series);\n+        chart.setAnimated(true);\n+        getTestScene().setRoot(chart);\n+\n+        \/\/ add some categories, starting axis animation\n+        series.getData().add(new XYChart.Data<>(\"1\", 1));\n+        series.getData().add(new XYChart.Data<>(\"2\", 2));\n+        series.getData().add(new XYChart.Data<>(\"3\", 3));\n+        pulse();\n+        \/\/ forward time until after animation is finished\n+        toolkit.setAnimationTime(1000);\n+\n+        List<Node> bars = series.getData().stream().map(XYChart.Data::getNode).toList();\n+\n+        List<Double> barCenterXValues = series.getData().stream()\n+                .map(XYChart.Data::getNode)\n+                .map(bar -> bar.getLayoutX() + bar.getLayoutBounds().getCenterX())\n+                .toList();\n+\n+        List<Double> tickXValues = xAxis.getChildrenUnmodifiable().stream()\n+                .filter(obj -> obj instanceof Path && obj.getStyleClass().contains(\"axis-tick-mark\"))\n+                .flatMap(obj -> ((Path) obj).getElements().stream())\n+                .filter(path -> path instanceof MoveTo)\n+                .map(moveTo -> ((MoveTo) moveTo).getX())\n+                .toList();\n+\n+        double delta = 0.001;\n+        assertEquals(barCenterXValues.size(), tickXValues.size());\n+        for (int i = 0; i < barCenterXValues.size(); i++) {\n+            assertEquals(barCenterXValues.get(i), tickXValues.get(i), delta);\n+        }\n+    }\n+\n+    @Test\n+    public void testBarPositionsWithMultipleIncompleteSeries() {\n+        startApp();\n+        CategoryAxis xAxis = new CategoryAxis();\n+        NumberAxis yAxis = new NumberAxis();\n+        BarChart<String, Number> chart = new BarChart<>(xAxis, yAxis);\n+        chart.setAnimated(false);\n+        chart.setBarGap(0.0);\n+        chart.setCategoryGap(0.0);\n+        getTestScene().setRoot(chart);\n+\n+        XYChart.Series<String, Number> series1 = new XYChart.Series<>();\n+        series1.setName(\"S1\");\n+        chart.getData().setAll(List.of(series1));\n+        series1.getData().add(new XYChart.Data<>(\"1\", 1));\n+        series1.getData().add(new XYChart.Data<>(\"2\", 2));\n+\n+        XYChart.Series<String, Number> series2 = new XYChart.Series<>();\n+        series2.setName(\"S2\");\n+        series2.getData().add(new XYChart.Data<>(\"2\", 3)); \/\/ duplicate category with series1\n+        series2.getData().add(new XYChart.Data<>(\"3\", 4)); \/\/ new category\n+        chart.getData().add(series2);\n+\n+        pulse();\n+\n+        \/\/ check bar layout\n+        List<Node> s1bars = series1.getData().stream().map(XYChart.Data::getNode).toList();\n+        List<Node> s2bars = series2.getData().stream().map(XYChart.Data::getNode).toList();\n+\n+        double x0 = s1bars.getFirst().getLayoutX();\n+        double barWidth = s1bars.getFirst().getBoundsInLocal().getWidth();\n+\n+        \/\/ normalize bar positions with respect to the first bar position and width\n+        List<Double> normalized1 = s1bars.stream()\n+                .map(node -> (node.getLayoutX() - x0) \/ barWidth)\n+                .toList();\n+\n+        List<Double> normalized2 = s2bars.stream()\n+                .map(node -> (node.getLayoutX() - x0) \/ barWidth)\n+                .toList();\n+\n+        \/\/ expect even integers for series1 and odd integers for series2\n+        double delta = 0.001;\n+        assertEquals(0, normalized1.get(0), delta);\n+        assertEquals(2, normalized1.get(1), delta);\n+        assertEquals(3, normalized2.get(0), delta);\n+        assertEquals(5, normalized2.get(1), delta);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/BarChartTest.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"modified"}]}