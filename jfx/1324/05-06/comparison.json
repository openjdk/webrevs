{"files":[{"patch":"@@ -119,1 +119,2 @@\n-                \/\/ (Re)Trigger the leave procedure so that the outer loop will be finished.\n+                \/\/ If the next (outer) EventLoop was put into the leaving state before,\n+                \/\/ we need to make sure to leave it as well.\n@@ -135,1 +136,1 @@\n-     * the execusion returns to the point where the {@link #enter()} method\n+     * the execution returns to the point where the {@link #enter()} method\n@@ -150,0 +151,4 @@\n+     * <p><\/p><b>Note:<\/b> The event loop is not left immediately, but in the next event cycle.\n+     * When entering a new event loop right after calling this method, this event loop will wait\n+     * until the new inner event loop is left as well (see also {@link #enter()}.\n+     *\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/EventLoop.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -173,0 +173,3 @@\n+            \/\/ We may enter a new nested event loop while we are leaving another one which is not yet left.\n+            \/\/ Therefore, this nested event loop will prevent the current nested event loop from leaving.\n+            leavingNestedEventLoop = false;\n@@ -197,1 +200,0 @@\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/InvokeLaterDispatcher.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -331,1 +331,7 @@\n-        enterNestedEventLoopImpl();\n+        try {\n+            enterNestedEventLoopImpl();\n+        } finally {\n+            if (invokeLaterDispatcher != null) {\n+                invokeLaterDispatcher.notifyLeftNestedEventLoop();\n+            }\n+        }\n@@ -340,4 +346,0 @@\n-\n-        if (invokeLaterDispatcher != null) {\n-            invokeLaterDispatcher.notifyLeftNestedEventLoop();\n-        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkApplication.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -169,1 +169,7 @@\n-        _enterNestedEventLoopImpl();\n+        try {\n+            _enterNestedEventLoopImpl();\n+        } finally {\n+            if (invokeLaterDispatcher != null) {\n+                invokeLaterDispatcher.notifyLeftNestedEventLoop();\n+            }\n+        }\n@@ -178,4 +184,0 @@\n-\n-        if (invokeLaterDispatcher != null) {\n-            invokeLaterDispatcher.notifyLeftNestedEventLoop();\n-        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacApplication.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -210,1 +210,7 @@\n-        _enterNestedEventLoopImpl();\n+        try {\n+            _enterNestedEventLoopImpl();\n+        } finally {\n+            if (invokeLaterDispatcher != null) {\n+                invokeLaterDispatcher.notifyLeftNestedEventLoop();\n+            }\n+        }\n@@ -218,4 +224,0 @@\n-\n-        if (invokeLaterDispatcher != null) {\n-            invokeLaterDispatcher.notifyLeftNestedEventLoop();\n-        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinApplication.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -354,0 +354,3 @@\n+     * <p><\/p><b>Note:<\/b> The nested event loop is not left immediately, but in the next event cycle.\n+     * When entering a new nested event loop right after calling this method, this nested event loop will wait\n+     * until the new inner nested event loop is left as well.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/Toolkit.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -322,0 +322,3 @@\n+     * <p><\/p><b>Note:<\/b> The nested event loop is not left immediately, but in the next event cycle.\n+     * When entering a new nested event loop right after calling this method, this nested event loop will wait\n+     * until the new inner nested event loop is left as well.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/Platform.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -128,0 +128,7 @@\n+    \/**\n+     * Tests that we can enter and exit two nested event loops in a row.\n+     * We expect that the nested first event loop will wait until the second nested event loop is done\n+     * when entering a second event loop while we requested the first event loop to leave.\n+     * <p>\n+     * See also: <a href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8285893\">JDK-8285893<\/a>\n+     *\/\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/NestedEventLoopTest.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}