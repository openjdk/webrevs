{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -511,1 +511,5 @@\n-        GetApplication()._enterNestedEventLoop();\n+        try {\n+            GetApplication()._enterNestedEventLoop();\n+        } finally {\n+            nestedEventLoopCounter--;\n+        }\n@@ -537,1 +541,0 @@\n-        nestedEventLoopCounter--;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/Application.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -116,0 +116,8 @@\n+\n+            if (!stack.isEmpty()) {\n+                EventLoop loop = stack.peek();\n+                \/\/ (Re)Trigger the leave procedure so that the outer loop will be finished.\n+                if (loop != null && loop.state.equals(State.LEAVING)) {\n+                    Application.leaveNestedEventLoop();\n+                }\n+            }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/EventLoop.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkApplication.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/ios\/IosApplication.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacApplication.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/monocle\/MonocleApplication.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/ios\/GlassApplication.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -15,1 +15,1 @@\n- * accompanied this code).\n+ * accompanied this code).<\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.m","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassApplication.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassApplication.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -126,0 +128,57 @@\n+    @Test\n+    public void testCanEnterAndExitTwoNestedEventLoop() {\n+        final long key1 = 1;\n+        final long result1 = 10;\n+        final long key2 = 2;\n+        final long result2 = 20;\n+        final AtomicLong returnedValue1 = new AtomicLong();\n+        final AtomicLong returnedValue2 = new AtomicLong();\n+        final List<Long> callOrder = new ArrayList<>();\n+\n+        Util.runAndWait(\n+                () -> {\n+                    assertFalse(Platform.isNestedLoopRunning());\n+                    Long actual1 = (Long) Platform.enterNestedEventLoop(key1);\n+                    callOrder.add(key1);\n+                    returnedValue1.set(actual1);\n+\n+                    \/\/ Inner loop as well as the outer loop returned, all loops should be done.\n+                    assertFalse(Platform.isNestedLoopRunning());\n+                },\n+                () -> {\n+                    assertTrue(Platform.isNestedLoopRunning());\n+                    Platform.exitNestedEventLoop(key1, result1);\n+\n+                    \/\/ Not stopping immediately.\n+                    assertTrue(Platform.isNestedLoopRunning());\n+\n+                    Long actual2 = (Long) Platform.enterNestedEventLoop(key2);\n+                    callOrder.add(key2);\n+                    returnedValue2.set(actual2);\n+\n+                    \/\/ Returned from inner loop, we are still in the outer loop.\n+                    assertTrue(Platform.isNestedLoopRunning());\n+                },\n+                () -> {\n+                    assertTrue(Platform.isNestedLoopRunning());\n+\n+                    Platform.exitNestedEventLoop(key2, result2);\n+\n+                    \/\/ Not stopping immediately.\n+                    assertTrue(Platform.isNestedLoopRunning());\n+                },\n+                () -> {\n+                    assertFalse(Platform.isNestedLoopRunning());\n+\n+                    assertEquals(result1, returnedValue1.get());\n+                    assertEquals(result2, returnedValue2.get());\n+\n+                    long key = callOrder.get(0);\n+                    assertEquals(key2, key);\n+\n+                    key = callOrder.get(1);\n+                    assertEquals(key1, key);\n+                }\n+        );\n+    }\n+\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/NestedEventLoopTest.java","additions":60,"deletions":1,"binary":false,"changes":61,"status":"modified"}]}