{"files":[{"patch":"@@ -487,2 +487,2 @@\n-    protected abstract Object _enterNestedEventLoop();\n-    protected abstract void _leaveNestedEventLoop(Object retValue);\n+    protected abstract void _enterNestedEventLoop();\n+    protected abstract void _leaveNestedEventLoop();\n@@ -498,1 +498,1 @@\n-     * {@link #leaveNestedEventLoop(Object)} method.\n+     * {@link #leaveNestedEventLoop()} method.\n@@ -506,1 +506,0 @@\n-     * @return an object passed to the leaveNestedEventLoop() method\n@@ -509,1 +508,1 @@\n-    static Object enterNestedEventLoop() {\n+    static void enterNestedEventLoop() {\n@@ -514,1 +513,1 @@\n-            return GetApplication()._enterNestedEventLoop();\n+            GetApplication()._enterNestedEventLoop();\n@@ -536,1 +535,1 @@\n-    static void leaveNestedEventLoop(Object retValue) {\n+    static void leaveNestedEventLoop() {\n@@ -543,1 +542,1 @@\n-        GetApplication()._leaveNestedEventLoop(retValue);\n+        GetApplication()._leaveNestedEventLoop();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/Application.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,2 +107,1 @@\n-            Object ret = Application.enterNestedEventLoop();\n-            assert ret == this : \"Internal inconsistency - wrong EventLoop\";\n+            Application.enterNestedEventLoop();\n@@ -118,8 +117,7 @@\n-            if (!stack.isEmpty() && stack.peek().state.equals(State.LEAVING)) {\n-                Application.invokeLater(() -> {\n-                    EventLoop loop = stack.peek();\n-                    \/\/ we might have already entered another loop, so check again\n-                    if (loop != null && loop.state.equals(State.LEAVING)) {\n-                        Application.leaveNestedEventLoop(loop);\n-                    }\n-                });\n+            if (!stack.isEmpty()) {\n+                EventLoop loop = stack.peek();\n+                \/\/ If the next (outer) EventLoop was put into the leaving state before,\n+                \/\/ we need to make sure to leave it as well.\n+                if (loop != null && loop.state.equals(State.LEAVING)) {\n+                    Application.leaveNestedEventLoop();\n+                }\n@@ -138,1 +136,1 @@\n-     * the execusion returns to the point where the {@link #enter()} method\n+     * the execution returns to the point where the {@link #enter()} method\n@@ -153,0 +151,4 @@\n+     * <p><\/p><b>Note:<\/b> The event loop is not left immediately, but in the next event cycle.\n+     * When entering a new event loop right after calling this method, this event loop will wait\n+     * until the new inner event loop is left as well (see also {@link #enter()}.\n+     *\n@@ -166,1 +168,1 @@\n-            Application.leaveNestedEventLoop(this);\n+            Application.leaveNestedEventLoop();\n@@ -170,1 +172,0 @@\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/EventLoop.java","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -173,0 +173,3 @@\n+            \/\/ We may enter a new nested event loop while we are leaving another one which is not yet left.\n+            \/\/ Therefore, this nested event loop will prevent the current nested event loop from leaving.\n+            leavingNestedEventLoop = false;\n@@ -197,1 +200,0 @@\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/InvokeLaterDispatcher.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -323,2 +323,0 @@\n-    private Object eventLoopExitEnterPassValue;\n-\n@@ -330,1 +328,1 @@\n-    protected Object _enterNestedEventLoop() {\n+    protected void _enterNestedEventLoop() {\n@@ -336,3 +334,0 @@\n-            final Object retValue = eventLoopExitEnterPassValue;\n-            eventLoopExitEnterPassValue = null;\n-            return retValue;\n@@ -347,1 +342,1 @@\n-    protected void _leaveNestedEventLoop(Object retValue) {\n+    protected void _leaveNestedEventLoop() {\n@@ -351,1 +346,0 @@\n-        eventLoopExitEnterPassValue = retValue;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkApplication.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -188,2 +188,2 @@\n-    private native Object _enterNestedEventLoopImpl();\n-    private native void _leaveNestedEventLoopImpl(Object retValue);\n+    private native void _enterNestedEventLoopImpl();\n+    private native void _leaveNestedEventLoopImpl();\n@@ -192,2 +192,2 @@\n-    protected Object _enterNestedEventLoop() {\n-        return _enterNestedEventLoopImpl();\n+    protected void _enterNestedEventLoop() {\n+        _enterNestedEventLoopImpl();\n@@ -197,2 +197,2 @@\n-    protected void _leaveNestedEventLoop(Object retValue) {\n-        _leaveNestedEventLoopImpl(retValue);\n+    protected void _leaveNestedEventLoop() {\n+        _leaveNestedEventLoopImpl();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/ios\/IosApplication.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -207,2 +207,2 @@\n-    native private Object _enterNestedEventLoopImpl();\n-    @Override protected Object _enterNestedEventLoop() {\n+    native private void _enterNestedEventLoopImpl();\n+    @Override protected void _enterNestedEventLoop() {\n@@ -213,1 +213,1 @@\n-            return _enterNestedEventLoopImpl();\n+            _enterNestedEventLoopImpl();\n@@ -221,2 +221,2 @@\n-    native private void _leaveNestedEventLoopImpl(Object retValue);\n-    @Override protected void _leaveNestedEventLoop(Object retValue) {\n+    native private void _leaveNestedEventLoopImpl();\n+    @Override protected void _leaveNestedEventLoop() {\n@@ -226,1 +226,1 @@\n-        _leaveNestedEventLoopImpl(retValue);\n+        _leaveNestedEventLoopImpl();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacApplication.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -144,2 +144,2 @@\n-    protected Object _enterNestedEventLoop() {\n-        return runnableProcessor.enterNestedEventLoop();\n+    protected void _enterNestedEventLoop() {\n+        runnableProcessor.enterNestedEventLoop();\n@@ -149,2 +149,2 @@\n-    protected void _leaveNestedEventLoop(Object retValue) {\n-        runnableProcessor.leaveNestedEventLoop(retValue);\n+    protected void _leaveNestedEventLoop() {\n+        runnableProcessor.leaveNestedEventLoop();\n@@ -353,1 +353,1 @@\n-        _leaveNestedEventLoop(null);\n+        _leaveNestedEventLoop();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/monocle\/MonocleApplication.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-    private Object runLoop() {\n+    private void runLoop() {\n@@ -97,3 +97,0 @@\n-\n-        return control.release;\n-\n@@ -102,1 +99,1 @@\n-    Object enterNestedEventLoop() {\n+    void enterNestedEventLoop() {\n@@ -107,4 +104,1 @@\n-        Object ret = runLoop();\n-\n-        \/\/ and return the value that was passed into leaveNested\n-        return ret;\n+        runLoop();\n@@ -113,1 +107,1 @@\n-    void leaveNestedEventLoop(Object retValue) {\n+    void leaveNestedEventLoop() {\n@@ -123,3 +117,0 @@\n-        \/\/ and give it the ret object so it will return it to the\n-        \/\/ blocked nesting call.\n-        current.release = retValue;\n@@ -129,1 +120,1 @@\n-        \/\/ call can return the release value we just provided.\n+        \/\/ call can return.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/monocle\/RunnableProcessor.java","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -204,2 +204,2 @@\n-    native private Object _enterNestedEventLoopImpl();\n-    native private void _leaveNestedEventLoopImpl(Object retValue);\n+    native private void _enterNestedEventLoopImpl();\n+    native private void _leaveNestedEventLoopImpl();\n@@ -207,1 +207,1 @@\n-    @Override protected Object _enterNestedEventLoop() {\n+    @Override protected void _enterNestedEventLoop() {\n@@ -212,1 +212,1 @@\n-            return _enterNestedEventLoopImpl();\n+            _enterNestedEventLoopImpl();\n@@ -220,1 +220,1 @@\n-    @Override protected void _leaveNestedEventLoop(Object retValue) {\n+    @Override protected void _leaveNestedEventLoop() {\n@@ -224,1 +224,1 @@\n-        _leaveNestedEventLoopImpl(retValue);\n+        _leaveNestedEventLoopImpl();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinApplication.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -354,0 +354,3 @@\n+     * <p><\/p><b>Note:<\/b> The nested event loop is not left immediately, but in the next event cycle.\n+     * When entering a new nested event loop right after calling this method, this nested event loop will wait\n+     * until the new inner nested event loop is left as well.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/Toolkit.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -322,0 +322,3 @@\n+     * <p><b>Note:<\/b> The nested event loop is not left immediately, but in the next event cycle.\n+     * When entering a new nested event loop right after calling this method, this nested event loop will wait\n+     * until the new inner nested event loop is left as well.<\/p>\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/Platform.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,1 +114,0 @@\n-static jobject nestedLoopReturnValue = NULL;\n@@ -547,1 +546,1 @@\n-+ (jobject)enterNestedEventLoopWithEnv:(JNIEnv*)env\n++ (void)enterNestedEventLoopWithEnv:(JNIEnv*)env\n@@ -549,1 +548,0 @@\n-    jobject ret = NULL;\n@@ -562,6 +560,0 @@\n-    if (nestedLoopReturnValue != NULL) {\n-        ret = (*env)->NewLocalRef(env, nestedLoopReturnValue);\n-        (*env)->DeleteGlobalRef(env, nestedLoopReturnValue);\n-        nestedLoopReturnValue = NULL;\n-    }\n-\n@@ -569,2 +561,0 @@\n-\n-    return ret;\n@@ -573,1 +563,1 @@\n-+ (void)leaveNestedEventLoopWithEnv:(JNIEnv*)env retValue:(jobject)retValue\n++ (void)leaveNestedEventLoopWithEnv:(JNIEnv*)env\n@@ -575,3 +565,0 @@\n-    if (retValue != NULL) {\n-        nestedLoopReturnValue = (*env)->NewGlobalRef(env, retValue);\n-    }\n@@ -824,1 +811,1 @@\n- *    * Signature: ()Ljava\/lang\/Object;\n+ *    * Signature: ()V\n@@ -826,1 +813,1 @@\n-JNIEXPORT jobject JNICALL Java_com_sun_glass_ui_ios_IosApplication__1enterNestedEventLoopImpl\n+JNIEXPORT void JNICALL Java_com_sun_glass_ui_ios_IosApplication__1enterNestedEventLoopImpl\n@@ -831,2 +818,0 @@\n-    jobject ret;\n-\n@@ -835,1 +820,1 @@\n-        ret = [GlassApplication enterNestedEventLoopWithEnv:env];\n+        [GlassApplication enterNestedEventLoopWithEnv:env];\n@@ -839,2 +824,0 @@\n-\n-    return ret;\n@@ -846,1 +829,1 @@\n- *    * Signature: (Ljava\/lang\/Object;)V\n+ *    * Signature: ()V\n@@ -849,1 +832,1 @@\n-(JNIEnv *env, jobject japplication, jobject retValue)\n+(JNIEnv *env, jobject japplication)\n@@ -855,1 +838,1 @@\n-        [GlassApplication leaveNestedEventLoopWithEnv:env retValue:retValue];\n+        [GlassApplication leaveNestedEventLoopWithEnv:env];\n@@ -1016,1 +999,0 @@\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/ios\/GlassApplication.m","additions":9,"deletions":27,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -65,2 +65,2 @@\n-+ (jobject)enterNestedEventLoopWithEnv:(JNIEnv*)env;\n-+ (void)leaveNestedEventLoopWithEnv:(JNIEnv*)env retValue:(jobject)retValue;\n++ (void)enterNestedEventLoopWithEnv:(JNIEnv*)env;\n++ (void)leaveNestedEventLoopWithEnv:(JNIEnv*)env;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -15,1 +15,1 @@\n- * accompanied this code).\n+ * accompanied this code).<\n@@ -56,1 +56,0 @@\n-static jobject nestedLoopReturnValue = NULL;\n@@ -777,1 +776,1 @@\n-+ (jobject)enterNestedEventLoopWithEnv:(JNIEnv*)env\n++ (void)enterNestedEventLoopWithEnv:(JNIEnv*)env\n@@ -779,1 +778,0 @@\n-    jobject ret = NULL;\n@@ -796,6 +794,0 @@\n-    if (nestedLoopReturnValue != NULL) {\n-        ret = (*env)->NewLocalRef(env, nestedLoopReturnValue);\n-        (*env)->DeleteGlobalRef(env, nestedLoopReturnValue);\n-        nestedLoopReturnValue = NULL;\n-    }\n-\n@@ -803,2 +795,0 @@\n-\n-    return ret;\n@@ -807,1 +797,1 @@\n-+ (void)leaveNestedEventLoopWithEnv:(JNIEnv*)env retValue:(jobject)retValue\n++ (void)leaveNestedEventLoopWithEnv:(JNIEnv*)env\n@@ -809,3 +799,0 @@\n-    if (retValue != NULL) {\n-        nestedLoopReturnValue = (*env)->NewGlobalRef(env, retValue);\n-    }\n@@ -954,1 +941,1 @@\n-            env, jClass, \"enterNestedEventLoop\", \"()Ljava\/lang\/Object;\");\n+            env, jClass, \"enterNestedEventLoop\", \"()V\");\n@@ -958,1 +945,1 @@\n-            env, jClass, \"leaveNestedEventLoop\", \"(Ljava\/lang\/Object;)V\");\n+            env, jClass, \"leaveNestedEventLoop\", \"()V\");\n@@ -1065,1 +1052,1 @@\n- * Signature: ()Ljava\/lang\/Object;\n+ * Signature: ()V\n@@ -1067,1 +1054,1 @@\n-JNIEXPORT jobject JNICALL Java_com_sun_glass_ui_mac_MacApplication__1enterNestedEventLoopImpl\n+JNIEXPORT void JNICALL Java_com_sun_glass_ui_mac_MacApplication__1enterNestedEventLoopImpl\n@@ -1072,2 +1059,0 @@\n-    jobject ret;\n-\n@@ -1076,1 +1061,1 @@\n-        ret = [GlassApplication enterNestedEventLoopWithEnv:env];\n+        [GlassApplication enterNestedEventLoopWithEnv:env];\n@@ -1080,2 +1065,0 @@\n-\n-    return ret;\n@@ -1087,1 +1070,1 @@\n- * Signature: (Ljava\/lang\/Object;)V\n+ * Signature: ()V\n@@ -1090,1 +1073,1 @@\n-(JNIEnv *env, jobject japplication, jobject retValue)\n+(JNIEnv *env, jobject japplication)\n@@ -1096,1 +1079,1 @@\n-        [GlassApplication leaveNestedEventLoopWithEnv:env retValue:retValue];\n+        [GlassApplication leaveNestedEventLoopWithEnv:env];\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.m","additions":11,"deletions":28,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -245,1 +245,1 @@\n-jobject GlassApplication::EnterNestedEventLoop(JNIEnv * env)\n+void GlassApplication::EnterNestedEventLoop(JNIEnv * env)\n@@ -259,8 +259,0 @@\n-\n-    if (!sm_nestedLoopReturnValue) {\n-        return NULL;\n-    }\n-\n-    jobject ret = env->NewLocalRef(sm_nestedLoopReturnValue);\n-    sm_nestedLoopReturnValue.Attach(env, NULL);\n-    return ret;\n@@ -270,1 +262,1 @@\n-void GlassApplication::LeaveNestedEventLoop(JNIEnv * env, jobject retValue)\n+void GlassApplication::LeaveNestedEventLoop(JNIEnv * env)\n@@ -272,1 +264,0 @@\n-    sm_nestedLoopReturnValue.Attach(env, retValue);\n@@ -440,1 +431,1 @@\n- * Signature: ()Ljava\/lang\/Object;\n+ * Signature: ()V;\n@@ -442,1 +433,1 @@\n-JNIEXPORT jobject JNICALL Java_com_sun_glass_ui_win_WinApplication__1enterNestedEventLoopImpl\n+JNIEXPORT void JNICALL Java_com_sun_glass_ui_win_WinApplication__1enterNestedEventLoopImpl\n@@ -445,1 +436,1 @@\n-    return GlassApplication::EnterNestedEventLoop(env);\n+    GlassApplication::EnterNestedEventLoop(env);\n@@ -451,1 +442,1 @@\n- * Signature: (Ljava\/lang\/Object;)V\n+ * Signature: ()V\n@@ -454,1 +445,1 @@\n-  (JNIEnv * env, jobject self, jobject retValue)\n+  (JNIEnv * env, jobject self)\n@@ -456,1 +447,1 @@\n-    GlassApplication::LeaveNestedEventLoop(env, retValue);\n+    GlassApplication::LeaveNestedEventLoop(env);\n@@ -533,1 +524,0 @@\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassApplication.cpp","additions":8,"deletions":18,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,2 +94,2 @@\n-    static jobject EnterNestedEventLoop(JNIEnv * env);\n-    static void LeaveNestedEventLoop(JNIEnv * env, jobject retValue);\n+    static void EnterNestedEventLoop(JNIEnv * env);\n+    static void LeaveNestedEventLoop(JNIEnv * env);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassApplication.h","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -122,0 +124,64 @@\n+        );\n+    }\n+\n+    \/**\n+     * Tests that we can enter and exit two nested event loops in a row.\n+     * We expect that the nested first event loop will wait until the second nested event loop is done\n+     * when entering a second event loop while we requested the first event loop to leave.\n+     * <p>\n+     * See also: <a href=\"https:\/\/bugs.openjdk.org\/browse\/JDK-8285893\">JDK-8285893<\/a>\n+     *\/\n+    @Test\n+    public void testCanEnterAndExitTwoNestedEventLoop() {\n+        final long key1 = 1;\n+        final long result1 = 10;\n+        final long key2 = 2;\n+        final long result2 = 20;\n+        final AtomicLong returnedValue1 = new AtomicLong();\n+        final AtomicLong returnedValue2 = new AtomicLong();\n+        final List<Long> callOrder = new ArrayList<>();\n+\n+        Util.runAndWait(\n+                () -> {\n+                    assertFalse(Platform.isNestedLoopRunning());\n+                    Long actual1 = (Long) Platform.enterNestedEventLoop(key1);\n+                    callOrder.add(key1);\n+                    returnedValue1.set(actual1);\n+\n+                    \/\/ Inner loop as well as the outer loop returned, all loops should be done.\n+                    assertFalse(Platform.isNestedLoopRunning());\n+                },\n+                () -> {\n+                    assertTrue(Platform.isNestedLoopRunning());\n+                    Platform.exitNestedEventLoop(key1, result1);\n+\n+                    \/\/ Not stopping immediately.\n+                    assertTrue(Platform.isNestedLoopRunning());\n+\n+                    Long actual2 = (Long) Platform.enterNestedEventLoop(key2);\n+                    callOrder.add(key2);\n+                    returnedValue2.set(actual2);\n+\n+                    \/\/ Returned from inner loop, we are still in the outer loop.\n+                    assertTrue(Platform.isNestedLoopRunning());\n+                },\n+                () -> {\n+                    assertTrue(Platform.isNestedLoopRunning());\n+\n+                    Platform.exitNestedEventLoop(key2, result2);\n+\n+                    \/\/ Not stopping immediately.\n+                    assertTrue(Platform.isNestedLoopRunning());\n+                },\n+                () -> {\n+                    assertFalse(Platform.isNestedLoopRunning());\n+\n+                    assertEquals(result1, returnedValue1.get());\n+                    assertEquals(result2, returnedValue2.get());\n+\n+                    long key = callOrder.get(0);\n+                    assertEquals(key2, key);\n+\n+                    key = callOrder.get(1);\n+                    assertEquals(key1, key);\n+                }\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/NestedEventLoopTest.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"modified"}]}