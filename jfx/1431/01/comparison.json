{"files":[{"patch":"@@ -793,0 +793,2 @@\n+     *\n+     * This method accepts negative values, wrapping around in the other direction.\n@@ -795,3 +797,1 @@\n-        if (max == 0) {\n-            throw new RuntimeException();\n-        }\n+        int span = max - min + 1;\n@@ -799,5 +799,2 @@\n-        int r = value % max;\n-        if (r > min && max < min) {\n-            r = r + max - min;\n-        } else if (r < min && max > min) {\n-            r = r + max - min;\n+        if (value < 0) {\n+            value = max + value % span + 1;\n@@ -805,1 +802,2 @@\n-        return r;\n+\n+        return min + (value - min) % span;\n@@ -812,0 +810,2 @@\n+     *\n+     * This method accepts negative values, wrapping around in the other direction.\n@@ -813,3 +813,3 @@\n-    static BigDecimal wrapValue(BigDecimal value, BigDecimal min, BigDecimal max) {\n-        if (max.doubleValue() == 0) {\n-            throw new RuntimeException();\n+    static BigDecimal wrapValue(BigDecimal currentValue, BigDecimal newValue, BigDecimal min, BigDecimal max) {\n+        if (newValue.compareTo(min) >= 0 && newValue.compareTo(max) <= 0) {\n+            return newValue;\n@@ -818,7 +818,5 @@\n-        \/\/ note that this wrap method differs from the others where we take the\n-        \/\/ difference - in this approach we wrap to the min or max - it feels better\n-        \/\/ to go from 1 to 0, rather than 1 to 0.05 (where max is 1 and step is 0.05).\n-        if (value.compareTo(min) < 0) {\n-            return max;\n-        } else if (value.compareTo(max) > 0) {\n-            return min;\n+        BigDecimal span = max.subtract(min);\n+        BigDecimal remainder = newValue.remainder(span);\n+\n+        if (remainder.compareTo(BigDecimal.ZERO) == 0) {\n+            return newValue.compareTo(currentValue) >= 0 ? max : min;\n@@ -826,1 +824,2 @@\n-        return value;\n+\n+        return newValue.compareTo(max) > 0 ? min.add(remainder) : max.add(remainder);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Spinner.java","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import com.sun.javafx.util.Utils;\n@@ -368,1 +369,1 @@\n-            currentIndex = newIndex >= 0 ? newIndex : (isWrapAround() ? Spinner.wrapValue(newIndex, 0, max + 1) : 0);\n+            currentIndex = isWrapAround() ? Spinner.wrapValue(newIndex, 0, max) : Utils.clamp(0, newIndex, max);\n@@ -376,1 +377,1 @@\n-            currentIndex = newIndex <= max ? newIndex : (isWrapAround() ? Spinner.wrapValue(newIndex, 0, max + 1) : max);\n+            currentIndex = isWrapAround() ? Spinner.wrapValue(newIndex, 0, max) : Utils.clamp(0, newIndex, max);\n@@ -590,1 +591,1 @@\n-            setValue(newIndex >= min ? newIndex : (isWrapAround() ? Spinner.wrapValue(newIndex, min, max) + 1 : min));\n+            setValue(isWrapAround() ? Spinner.wrapValue(newIndex, min, max) : Utils.clamp(min, newIndex, max));\n@@ -599,1 +600,1 @@\n-            setValue(newIndex <= max ? newIndex : (isWrapAround() ? Spinner.wrapValue(newIndex, min, max) - 1 : max));\n+            setValue(isWrapAround() ? Spinner.wrapValue(newIndex, min, max) : Utils.clamp(min, newIndex, max));\n@@ -849,2 +850,3 @@\n-            setValue(newValue.compareTo(minBigDecimal) >= 0 ? newValue.doubleValue() :\n-                    (isWrapAround() ? Spinner.wrapValue(newValue, minBigDecimal, maxBigDecimal).doubleValue() : getMin()));\n+            setValue(isWrapAround() ?\n+                Spinner.wrapValue(currentValue, newValue, minBigDecimal, maxBigDecimal).doubleValue() :\n+                Utils.clamp(minBigDecimal, newValue, maxBigDecimal).doubleValue());\n@@ -860,2 +862,3 @@\n-            setValue(newValue.compareTo(maxBigDecimal) <= 0 ? newValue.doubleValue() :\n-                    (isWrapAround() ? Spinner.wrapValue(newValue, minBigDecimal, maxBigDecimal).doubleValue() : getMax()));\n+            setValue(isWrapAround() ?\n+                Spinner.wrapValue(currentValue, newValue, minBigDecimal, maxBigDecimal).doubleValue() :\n+                Utils.clamp(minBigDecimal, newValue, maxBigDecimal).doubleValue());\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/SpinnerValueFactory.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -380,0 +380,9 @@\n+    @Test public void intSpinner_testIncrement_negativeStep() {\n+        intValueFactory.increment(-1);\n+        assertEquals(4, (int) intValueFactory.getValue());\n+        intValueFactory.increment(-2);\n+        assertEquals(2, (int) intValueFactory.getValue());\n+        intValueFactory.increment(-15);\n+        assertEquals(0, (int) intValueFactory.getValue());\n+    }\n+\n@@ -402,0 +411,9 @@\n+    @Test public void intSpinner_testDecrement_negativeStep() {\n+        intValueFactory.decrement(-1);\n+        assertEquals(6, (int) intValueFactory.getValue());\n+        intValueFactory.decrement(-2);\n+        assertEquals(8, (int) intValueFactory.getValue());\n+        intValueFactory.decrement(-15);\n+        assertEquals(10, (int) intValueFactory.getValue());\n+    }\n+\n@@ -435,0 +453,26 @@\n+    @Test public void intSpinner_testWrapAround_increment_largeStep() {\n+        intValueFactory.setWrapAround(true);\n+        intValueFactory.increment(11);\n+        assertEquals(5, (int)intValueFactory.getValue());\n+        intValueFactory.increment(12);\n+        assertEquals(6, (int)intValueFactory.getValue());\n+        intValueFactory.increment(22);\n+        assertEquals(6, (int)intValueFactory.getValue());\n+        intValueFactory.increment(23);\n+        assertEquals(7, (int)intValueFactory.getValue());\n+    }\n+\n+    @Test public void intSpinner_testWrapAround_increment_negativeStep() {\n+        intValueFactory.setWrapAround(true);\n+        intValueFactory.increment(-1);\n+        assertEquals(4, (int)intValueFactory.getValue());\n+        intValueFactory.increment(-11);\n+        assertEquals(4, (int)intValueFactory.getValue());\n+        intValueFactory.increment(-12);\n+        assertEquals(3, (int)intValueFactory.getValue());\n+        intValueFactory.increment(-22);\n+        assertEquals(3, (int)intValueFactory.getValue());\n+        intValueFactory.increment(-23);\n+        assertEquals(2, (int)intValueFactory.getValue());\n+    }\n+\n@@ -456,0 +500,26 @@\n+    @Test public void intSpinner_testWrapAround_decrement_largeStep() {\n+        intValueFactory.setWrapAround(true);\n+        intValueFactory.decrement(11);\n+        assertEquals(5, (int)intValueFactory.getValue());\n+        intValueFactory.decrement(12);\n+        assertEquals(4, (int)intValueFactory.getValue());\n+        intValueFactory.decrement(22);\n+        assertEquals(4, (int)intValueFactory.getValue());\n+        intValueFactory.decrement(23);\n+        assertEquals(3, (int)intValueFactory.getValue());\n+    }\n+\n+    @Test public void intSpinner_testWrapAround_decrement_negativeStep() {\n+        intValueFactory.setWrapAround(true);\n+        intValueFactory.decrement(-1);\n+        assertEquals(6, (int)intValueFactory.getValue());\n+        intValueFactory.decrement(-11);\n+        assertEquals(6, (int)intValueFactory.getValue());\n+        intValueFactory.decrement(-12);\n+        assertEquals(7, (int)intValueFactory.getValue());\n+        intValueFactory.decrement(-22);\n+        assertEquals(7, (int)intValueFactory.getValue());\n+        intValueFactory.decrement(-23);\n+        assertEquals(8, (int)intValueFactory.getValue());\n+    }\n+\n@@ -566,0 +636,5 @@\n+    @Test public void dblSpinner_testIncrement_negativeStep() {\n+        dblValueFactory.increment(-2);\n+        assertEquals(0.4, dblValueFactory.getValue(), 0);\n+    }\n+\n@@ -588,0 +663,5 @@\n+    @Test public void dblSpinner_testDecrement_negativeStep() {\n+        dblValueFactory.decrement(-2);\n+        assertEquals(0.6, dblValueFactory.getValue());\n+    }\n+\n@@ -607,1 +687,0 @@\n-        dblValueFactory.increment(1); \/\/ 0.00\n@@ -618,1 +697,0 @@\n-        dblValueFactory.increment(2); \/\/ 0.00\n@@ -620,1 +698,26 @@\n-        assertEquals(0.10, dblValueFactory.getValue(), 0);\n+        dblValueFactory.increment(2); \/\/ 0.20\n+        assertEquals(0.2, dblValueFactory.getValue(), 0);\n+    }\n+\n+    @Test public void dblSpinner_testWrapAround_increment_largeStep() {\n+        dblValueFactory.setWrapAround(true);\n+        dblValueFactory.increment(20);\n+        assertEquals(0.5, dblValueFactory.getValue(), 0);\n+        dblValueFactory.increment(30);\n+        assertEquals(1.0, dblValueFactory.getValue(), 0);\n+        dblValueFactory.increment(40);\n+        assertEquals(1.0, dblValueFactory.getValue(), 0);\n+        dblValueFactory.increment(50);\n+        assertEquals(0.5, dblValueFactory.getValue(), 0);\n+    }\n+\n+    @Test public void dblSpinner_testWrapAround_increment_negativeStep() {\n+        dblValueFactory.setWrapAround(true);\n+        dblValueFactory.increment(-9);\n+        assertEquals(0.05, dblValueFactory.getValue());\n+        dblValueFactory.increment(-1);\n+        assertEquals(0.0, dblValueFactory.getValue());\n+        dblValueFactory.increment(-1);\n+        assertEquals(0.95, dblValueFactory.getValue());\n+        dblValueFactory.increment(-20);\n+        assertEquals(0.95, dblValueFactory.getValue());\n@@ -630,1 +733,0 @@\n-        dblValueFactory.decrement(1); \/\/ 1.00\n@@ -641,1 +743,0 @@\n-        dblValueFactory.decrement(2); \/\/ 1.00\n@@ -643,1 +744,26 @@\n-        assertEquals(0.90, dblValueFactory.getValue());\n+        dblValueFactory.decrement(2); \/\/ 0.80\n+        assertEquals(0.80, dblValueFactory.getValue());\n+    }\n+\n+    @Test public void dblSpinner_testWrapAround_decrement_largeStep() {\n+        dblValueFactory.setWrapAround(true);\n+        dblValueFactory.decrement(20);\n+        assertEquals(0.5, dblValueFactory.getValue());\n+        dblValueFactory.decrement(30);\n+        assertEquals(0.0, dblValueFactory.getValue());\n+        dblValueFactory.decrement(40);\n+        assertEquals(0.0, dblValueFactory.getValue());\n+        dblValueFactory.decrement(50);\n+        assertEquals(0.5, dblValueFactory.getValue());\n+    }\n+\n+    @Test public void dblSpinner_testWrapAround_decrement_negativeStep() {\n+        dblValueFactory.setWrapAround(true);\n+        dblValueFactory.decrement(-9);\n+        assertEquals(0.95, dblValueFactory.getValue());\n+        dblValueFactory.decrement(-1);\n+        assertEquals(1.0, dblValueFactory.getValue());\n+        dblValueFactory.decrement(-1);\n+        assertEquals(0.05, dblValueFactory.getValue());\n+        dblValueFactory.decrement(-20);\n+        assertEquals(0.05, dblValueFactory.getValue());\n@@ -755,0 +881,7 @@\n+    @Test public void listSpinner_testIncrement_negativeStep() {\n+        listValueFactory.increment(-1);\n+        assertEquals(\"string1\", listValueFactory.getValue());\n+        listValueFactory.increment(-15);\n+        assertEquals(\"string1\", listValueFactory.getValue());\n+    }\n+\n@@ -777,0 +910,7 @@\n+    @Test public void listSpinner_testDecrement_negativeStep() {\n+        listValueFactory.decrement(-1);\n+        assertEquals(\"string2\", listValueFactory.getValue());\n+        listValueFactory.decrement(-15);\n+        assertEquals(\"string3\", listValueFactory.getValue());\n+    }\n+\n@@ -810,0 +950,9 @@\n+    @Test public void listSpinner_testWrapAround_increment_negativeStep() {\n+        listValueFactory.setWrapAround(true);\n+        listValueFactory.increment(-2); \/\/ string1 -> string2\n+        listValueFactory.increment(-2); \/\/ string2 -> string3\n+        listValueFactory.increment(-2); \/\/ string3 -> string1\n+        listValueFactory.increment(-2); \/\/ string1 -> string2\n+        assertEquals(\"string2\", listValueFactory.getValue());\n+    }\n+\n@@ -831,0 +980,9 @@\n+    @Test public void listSpinner_testWrapAround_decrement_negativeStep() {\n+        listValueFactory.setWrapAround(true);\n+        listValueFactory.decrement(-2); \/\/ string1 -> string3\n+        listValueFactory.decrement(-2); \/\/ string3 -> string2\n+        listValueFactory.decrement(-2); \/\/ string2 -> string1\n+        listValueFactory.decrement(-2); \/\/ string1 -> string3\n+        assertEquals(\"string3\", listValueFactory.getValue());\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/SpinnerTest.java","additions":164,"deletions":6,"binary":false,"changes":170,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+import java.math.BigDecimal;\n@@ -105,0 +106,10 @@\n+    \/**\n+     * Simple utility function which clamps the given value to be strictly\n+     * between the min and max values.\n+     *\/\n+    public static BigDecimal clamp(BigDecimal min, BigDecimal value, BigDecimal max) {\n+        if (value.compareTo(min) < 0) return min;\n+        if (value.compareTo(max) > 0) return max;\n+        return value;\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/util\/Utils.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"}]}