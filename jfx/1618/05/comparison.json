{"files":[{"patch":"@@ -785,0 +785,1 @@\n+     *     <li>persistentScrollBars\n@@ -789,1 +790,1 @@\n-    public Map<String, PreferenceMapping<?>> getPlatformKeyMappings() {\n+    public Map<String, PreferenceMapping<?, ?>> getPlatformKeyMappings() {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/Application.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -451,1 +451,1 @@\n-    public Map<String, PreferenceMapping<?>> getPlatformKeyMappings() {\n+    public Map<String, PreferenceMapping<?, ?>> getPlatformKeyMappings() {\n@@ -456,1 +456,2 @@\n-            \"GTK.enable_animations\", new PreferenceMapping<>(\"reducedMotion\", Boolean.class, b -> !b)\n+            \"GTK.enable_animations\", new PreferenceMapping<>(\"reducedMotion\", Boolean.class, b -> !b),\n+            \"GTK.overlay_scrolling\", new PreferenceMapping<>(\"persistentScrollBars\", Boolean.class, b -> !b)\n@@ -483,1 +484,2 @@\n-            Map.entry(\"GTK.enable_animations\", Boolean.class)\n+            Map.entry(\"GTK.enable_animations\", Boolean.class),\n+            Map.entry(\"GTK.overlay_scrolling\", Boolean.class)\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkApplication.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -427,1 +427,1 @@\n-    public Map<String, PreferenceMapping<?>> getPlatformKeyMappings() {\n+    public Map<String, PreferenceMapping<?, ?>> getPlatformKeyMappings() {\n@@ -433,1 +433,2 @@\n-            \"macOS.NSWorkspace.accessibilityDisplayShouldReduceTransparency\", new PreferenceMapping<>(\"reducedTransparency\", Boolean.class)\n+            \"macOS.NSWorkspace.accessibilityDisplayShouldReduceTransparency\", new PreferenceMapping<>(\"reducedTransparency\", Boolean.class),\n+            \"macOS.NSScroller.preferredScrollerStyle\", new PreferenceMapping<>(\"persistentScrollBars\", String.class, \"NSScrollerStyleLegacy\"::equals)\n@@ -488,1 +489,2 @@\n-            Map.entry(\"macOS.NSWorkspace.accessibilityDisplayShouldReduceTransparency\", Boolean.class)\n+            Map.entry(\"macOS.NSWorkspace.accessibilityDisplayShouldReduceTransparency\", Boolean.class),\n+            Map.entry(\"macOS.NSScroller.preferredScrollerStyle\", String.class)\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacApplication.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -360,1 +360,1 @@\n-    public Map<String, PreferenceMapping<?>> getPlatformKeyMappings() {\n+    public Map<String, PreferenceMapping<?, ?>> getPlatformKeyMappings() {\n@@ -366,0 +366,1 @@\n+            \"Windows.UISettings.AutoHideScrollBars\", new PreferenceMapping<>(\"persistentScrollBars\", Boolean.class, b -> !b),\n@@ -394,1 +395,2 @@\n-            Map.entry(\"Windows.UISettings.AdvancedEffectsEnabled\", Boolean.class)\n+            Map.entry(\"Windows.UISettings.AdvancedEffectsEnabled\", Boolean.class),\n+            Map.entry(\"Windows.UISettings.AutoHideScrollBars\", Boolean.class)\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinApplication.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -932,1 +932,1 @@\n-                                       Map<String, PreferenceMapping<?>> platformKeyMappings,\n+                                       Map<String, PreferenceMapping<?, ?>> platformKeyMappings,\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    private final Map<String, PreferenceMapping<?>> platformKeyMappings;\n+    private final Map<String, PreferenceMapping<?, ?>> platformKeyMappings;\n@@ -91,1 +91,1 @@\n-                               Map<String, PreferenceMapping<?>> platformKeyMappings) {\n+                               Map<String, PreferenceMapping<?, ?>> platformKeyMappings) {\n@@ -226,0 +226,10 @@\n+    @Override\n+    public ReadOnlyBooleanProperty persistentScrollBarsProperty() {\n+        return properties.persistentScrollBarsProperty();\n+    }\n+\n+    @Override\n+    public boolean isPersistentScrollBars() {\n+        return properties.isPersistentScrollBars();\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PlatformPreferences.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-public record PreferenceMapping<T>(String keyName, Class<T> valueType, Function<T, T> valueMapper) {\n+public record PreferenceMapping<T, U>(String keyName, Class<T> valueType, Function<T, U> valueMapper) {\n@@ -44,0 +44,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -45,1 +46,1 @@\n-        this(keyName, valueType, Function.identity());\n+        this(keyName, valueType, value -> (U)value);\n@@ -49,1 +50,1 @@\n-    public T map(Object value) {\n+    public U map(Object value) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PreferenceMapping.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+    private final DeferredProperty<Boolean> persistentScrollBars = new DeferredProperty<>(\"persistentScrollBars\", false);\n@@ -56,0 +57,1 @@\n+    private final ReadOnlyBooleanWrapper persistentScrollBarsFlag;\n@@ -66,0 +68,3 @@\n+\n+        persistentScrollBarsFlag = new ReadOnlyBooleanWrapper(bean, persistentScrollBars.getName());\n+        persistentScrollBarsFlag.bind(persistentScrollBars);\n@@ -92,0 +97,12 @@\n+    public ReadOnlyBooleanProperty persistentScrollBarsProperty() {\n+        return persistentScrollBarsFlag.getReadOnlyProperty();\n+    }\n+\n+    public boolean isPersistentScrollBars() {\n+        return persistentScrollBars.get();\n+    }\n+\n+    public void setPersistentScrollBars(boolean value) {\n+        persistentScrollBars.setValueOverride(value);\n+    }\n+\n@@ -141,1 +158,1 @@\n-                       Map<String, PreferenceMapping<?>> platformKeyMappings) {\n+                       Map<String, PreferenceMapping<?, ?>> platformKeyMappings) {\n@@ -143,1 +160,1 @@\n-            if (platformKeyMappings.get(entry.getKey()) instanceof PreferenceMapping<?> mapping\n+            if (platformKeyMappings.get(entry.getKey()) instanceof PreferenceMapping<?, ?> mapping\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PreferenceProperties.java","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -500,0 +500,1 @@\n+     *         <tr><td>{@code Windows.UISettings.AutoHideScrollBars}<\/td><td>{@link Boolean}<\/td><\/tr>\n@@ -554,0 +555,1 @@\n+     *         <tr><td>{@code macOS.NSScroller.preferredScrollerStyle}<\/td><td>{@link String}<\/td><\/tr>\n@@ -580,0 +582,1 @@\n+     *         <tr><td>{@code GTK.overlay_scrolling}<\/td><td>{@link Boolean}<\/td><\/tr>\n@@ -589,0 +592,14 @@\n+        \/**\n+         * Specifies whether applications should always show scroll bars. If not set, an application may\n+         * choose to hide scroll bars that are not actively used, or make them smaller or less noticeable.\n+         * <p>\n+         * If the platform does not report this preference, this property defaults to {@code false}.\n+         *\n+         * @return the {@code persistentScrollBars} property\n+         * @defaultValue {@code false}\n+         * @since 24\n+         *\/\n+        ReadOnlyBooleanProperty persistentScrollBarsProperty();\n+\n+        boolean isPersistentScrollBars();\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/Platform.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -124,0 +124,6 @@\n+\n+        if (g_object_class_find_property(G_OBJECT_GET_CLASS(settings), \"gtk-overlay-scrolling\")) {\n+            gboolean overlayScrolling = true;\n+            g_object_get(settings, \"gtk-overlay-scrolling\", &overlayScrolling, NULL);\n+            putBoolean(env, prefs, \"GTK.overlay_scrolling\", overlayScrolling);\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/PlatformSupport.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,2 @@\n-        \"notify::gtk-enable-animations\"\n+        \"notify::gtk-enable-animations\",\n+        \"notify::gtk-overlay-scrolling\"\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/PlatformSupport.h","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -238,0 +238,5 @@\n+                        [[NSNotificationCenter defaultCenter] addObserver:self\n+                                                              selector:@selector(platformPreferencesDidChange)\n+                                                              name:NSPreferredScrollerStyleDidChangeNotification\n+                                                              object:nil];\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.m","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -117,0 +117,5 @@\n+    [PlatformSupport putString:preferences\n+                     key:\"macOS.NSScroller.preferredScrollerStyle\"\n+                     value:[NSScroller preferredScrollerStyle] == NSScrollerStyleOverlay\n+                        ? \"NSScrollerStyleOverlay\" : \"NSScrollerStyleLegacy\"];\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/PlatformSupport.m","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-GlassApplication::GlassApplication(jobject jrefThis) : BaseWnd(), m_platformSupport(GetEnv())\n+GlassApplication::GlassApplication(jobject jrefThis) : BaseWnd(), m_platformSupport(GetEnv(), jrefThis)\n@@ -171,1 +171,1 @@\n-            if (m_platformSupport.onSettingChanged(m_grefThis, wParam, lParam)) {\n+            if (m_platformSupport.onSettingChanged(wParam, lParam)) {\n@@ -185,1 +185,1 @@\n-            if (m_platformSupport.updatePreferences(m_grefThis)) {\n+            if (m_platformSupport.updatePreferences()) {\n@@ -307,3 +307,0 @@\n-        tryInitializeRoActivationSupport();\n-    } else if (dwReason == DLL_PROCESS_DETACH) {\n-        uninitializeRoActivationSupport();\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassApplication.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include <windows.ui.viewmanagement.h>\n@@ -32,0 +31,1 @@\n+using namespace ABI::Windows::Foundation;\n@@ -35,1 +35,2 @@\n-PlatformSupport::PlatformSupport(JNIEnv* env) : env(env), initialized(false), preferences(NULL)\n+PlatformSupport::PlatformSupport(JNIEnv* env, jobject application)\n+    : env(env), application(application), initialized(false), preferences(NULL)\n@@ -78,0 +79,1 @@\n+    \/\/ Mandatory fields are now initialized, after this point we will initialize optional APIs.\n@@ -79,0 +81,39 @@\n+\n+    tryInitializeRoActivationSupport();\n+\n+    if (!isRoActivationSupported()) {\n+        return;\n+    }\n+\n+    try {\n+        RO_CHECKED(\"RoActivateInstance\",\n+                   RoActivateInstance(hstring(\"Windows.UI.ViewManagement.UISettings\"), (IInspectable**)&settings));\n+    } catch (RoException const&) {\n+        \/\/ If an activation exception occurs, it probably means that we're on a Windows system\n+        \/\/ that doesn't support the UISettings API. This is not a problem, it simply means that\n+        \/\/ we don't report the UISettings properties back to the JavaFX application.\n+        return;\n+    }\n+\n+    try {\n+        ComPtr<IUISettings5> settings5;\n+        RO_CHECKED(\"IUISettings::QueryInterface<IUISettings5>\",\n+                   settings->QueryInterface<IUISettings5>(&settings5));\n+\n+        EventRegistrationToken token;\n+        settings5->add_AutoHideScrollBarsChanged(\n+            Callback<ITypedEventHandler<UISettings*, UISettingsAutoHideScrollBarsChangedEventArgs*>>(\n+                [this](IUISettings*, IUISettingsAutoHideScrollBarsChangedEventArgs*) {\n+                    updatePreferences();\n+                    return S_OK;\n+                }).Get(),\n+            &token);\n+    } catch (RoException const&) {\n+        return;\n+    }\n+}\n+\n+PlatformSupport::~PlatformSupport()\n+{\n+    settings = nullptr;\n+    uninitializeRoActivationSupport();\n@@ -96,1 +137,1 @@\n-bool PlatformSupport::updatePreferences(jobject application) const\n+bool PlatformSupport::updatePreferences() const\n@@ -98,1 +139,1 @@\n-    if (!initialized || application == NULL) {\n+    if (!initialized) {\n@@ -127,1 +168,1 @@\n-bool PlatformSupport::onSettingChanged(jobject application, WPARAM wParam, LPARAM lParam) const\n+bool PlatformSupport::onSettingChanged(WPARAM wParam, LPARAM lParam) const\n@@ -132,1 +173,1 @@\n-            return updatePreferences(application);\n+            return updatePreferences();\n@@ -136,1 +177,1 @@\n-        return updatePreferences(application);\n+        return updatePreferences();\n@@ -177,13 +218,1 @@\n-    if (!isRoActivationSupported()) {\n-        return;\n-    }\n-\n-    ComPtr<IUISettings> settings;\n-\n-    try {\n-        RO_CHECKED(\"RoActivateInstance\",\n-                   RoActivateInstance(hstring(\"Windows.UI.ViewManagement.UISettings\"), (IInspectable**)&settings));\n-    } catch (RoException const&) {\n-        \/\/ If an activation exception occurs, it probably means that we're on a Windows system\n-        \/\/ that doesn't support the UISettings API. This is not a problem, it simply means that\n-        \/\/ we don't report the UISettings properties back to the JavaFX application.\n+    if (!this->settings) {\n@@ -196,1 +225,1 @@\n-                   settings->QueryInterface<IUISettings3>(&settings3));\n+                   this->settings->QueryInterface<IUISettings3>(&settings3));\n@@ -228,1 +257,1 @@\n-                   settings->QueryInterface<IUISettings4>(&settings4));\n+                   this->settings->QueryInterface<IUISettings4>(&settings4));\n@@ -236,0 +265,12 @@\n+\n+    try {\n+        ComPtr<IUISettings5> settings5;\n+        RO_CHECKED(\"IUISettings::QueryInterface<IUISettings5>\",\n+                   this->settings->QueryInterface<IUISettings5>(&settings5));\n+\n+        unsigned char value;\n+        settings5->get_AutoHideScrollBars(&value);\n+        putBoolean(properties, \"Windows.UISettings.AutoHideScrollBars\", value);\n+    } catch (RoException const&) {\n+        return;\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/PlatformSupport.cpp","additions":63,"deletions":22,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -28,1 +28,5 @@\n-#include <common.h>\n+\/*\n+ * This flag gives us function prototypes without the __declspec(dllimport) storage class specifier.\n+ * RoActivationSupport defines symbols locally, and having the dllimport specifier would trigger LNK4217.\n+ *\/\n+#define _ROAPI_\n@@ -30,1 +34,3 @@\n-namespace ABI { namespace Windows { namespace UI { struct Color; } } }\n+#include <common.h>\n+#include <wrl.h>\n+#include <windows.ui.viewmanagement.h>\n@@ -35,2 +41,2 @@\n-    PlatformSupport(JNIEnv*);\n-    ~PlatformSupport() = default;\n+    PlatformSupport(JNIEnv*, jobject application);\n+    ~PlatformSupport();\n@@ -49,1 +55,1 @@\n-    bool updatePreferences(jobject application) const;\n+    bool updatePreferences() const;\n@@ -54,1 +60,1 @@\n-    bool onSettingChanged(jobject application, WPARAM, LPARAM) const;\n+    bool onSettingChanged(WPARAM, LPARAM) const;\n@@ -58,0 +64,1 @@\n+    jobject application;\n@@ -59,0 +66,1 @@\n+    Microsoft::WRL::ComPtr<ABI::Windows::UI::ViewManagement::IUISettings> settings;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/PlatformSupport.h","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -73,1 +73,2 @@\n-                \"test.enableTransparency\", new PreferenceMapping<>(\"reducedTransparency\", Boolean.class, b -> !b)\n+                \"test.enableTransparency\", new PreferenceMapping<>(\"reducedTransparency\", Boolean.class, b -> !b),\n+                \"test.persistentScrollBars\", new PreferenceMapping<>(\"persistentScrollBars\", String.class, \"yes\"::equals)\n@@ -368,0 +369,18 @@\n+\n+    @Test\n+    void testPersistentScrollBarsProperty() {\n+        var trace = new ArrayList<Boolean>();\n+        prefs.persistentScrollBarsProperty().addListener((observable, ov, nv) -> trace.add(nv));\n+\n+        assertFalse(prefs.isPersistentScrollBars());\n+        prefs.update(Map.of(\"test.persistentScrollBars\", \"yes\"));\n+\n+        assertEquals(1, trace.size());\n+        assertEquals(Boolean.TRUE, trace.get(0));\n+        assertTrue(prefs.isPersistentScrollBars());\n+\n+        prefs.update(new HashMap<>() {{ put(\"test.persistentScrollBars\", \"no\"); }});\n+        assertEquals(2, trace.size());\n+        assertEquals(Boolean.FALSE, trace.get(1));\n+        assertFalse(prefs.isPersistentScrollBars());\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/application\/preferences\/PlatformPreferencesTest.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+        var persistentScrollBarsLabel = new Label();\n@@ -78,0 +79,1 @@\n+            persistentScrollBarsLabel.setText(Boolean.toString(preferences.isPersistentScrollBars()));\n@@ -96,1 +98,2 @@\n-                new HBox(new BoldLabel(\"    reducedTransparency: \"), reducedTransparencyLabel)),\n+                new HBox(new BoldLabel(\"    reducedTransparency: \"), reducedTransparencyLabel),\n+                new HBox(new BoldLabel(\"    persistentScrollBars: \"), persistentScrollBarsLabel)),\n","filename":"tests\/manual\/events\/PlatformPreferencesChangedTest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}