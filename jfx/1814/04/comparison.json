{"files":[{"patch":"@@ -80,1 +80,1 @@\n-\t\t\t<arg line=\"--module-path '${javafx.home}\/lib' --add-modules 'javafx.base,javafx.graphics,javafx.controls,jfx.incubator.input,jfx.incubator.richtext' -classpath 'dist\/${TARGET}.jar' --enable-native-access=javafx.graphics --sun-misc-unsafe-memory-access=allow com.oracle.demo.richtext.codearea.CodeAreaDemoApp\" \/>\n+\t\t\t<arg line=\"--module-path '${javafx.home}\/lib' --add-modules 'javafx.base,javafx.graphics,javafx.controls,jfx.incubator.input,jfx.incubator.richtext' -classpath 'dist\/${TARGET}.jar' --enable-native-access=javafx.graphics com.oracle.demo.richtext.codearea.CodeAreaDemoApp\" \/>\n@@ -87,1 +87,1 @@\n-\t\t\t<arg line=\"--module-path '${javafx.home}\/lib' --add-modules 'javafx.base,javafx.graphics,javafx.controls,jfx.incubator.input,jfx.incubator.richtext' -classpath 'dist\/${TARGET}.jar' --enable-native-access=javafx.graphics --sun-misc-unsafe-memory-access=allow com.oracle.demo.richtext.notebook.NotebookMockupApp\" \/>\n+\t\t\t<arg line=\"--module-path '${javafx.home}\/lib' --add-modules 'javafx.base,javafx.graphics,javafx.controls,jfx.incubator.input,jfx.incubator.richtext' -classpath 'dist\/${TARGET}.jar' --enable-native-access=javafx.graphics com.oracle.demo.richtext.notebook.NotebookMockupApp\" \/>\n@@ -94,1 +94,1 @@\n-\t\t\t<arg line=\"--module-path ${javafx.home}\/lib --add-modules javafx.base,javafx.graphics,javafx.controls,jfx.incubator.input,jfx.incubator.richtext -classpath dist\/${TARGET}.jar --enable-native-access=javafx.graphics --sun-misc-unsafe-memory-access=allow com.oracle.demo.richtext.editor.RichEditorDemoApp\" \/>\n+\t\t\t<arg line=\"--module-path ${javafx.home}\/lib --add-modules javafx.base,javafx.graphics,javafx.controls,jfx.incubator.input,jfx.incubator.richtext -classpath dist\/${TARGET}.jar --enable-native-access=javafx.graphics com.oracle.demo.richtext.editor.RichEditorDemoApp\" \/>\n@@ -101,1 +101,1 @@\n-\t\t\t<arg line=\"--module-path ${javafx.home}\/lib --add-modules javafx.base,javafx.graphics,javafx.controls,jfx.incubator.input,jfx.incubator.richtext -classpath dist\/${TARGET}.jar --enable-native-access=javafx.graphics --sun-misc-unsafe-memory-access=allow com.oracle.demo.richtext.rta.RichTextAreaDemoApp\" \/>\n+\t\t\t<arg line=\"--module-path ${javafx.home}\/lib --add-modules javafx.base,javafx.graphics,javafx.controls,jfx.incubator.input,jfx.incubator.richtext -classpath dist\/${TARGET}.jar --enable-native-access=javafx.graphics com.oracle.demo.richtext.rta.RichTextAreaDemoApp\" \/>\n@@ -108,1 +108,1 @@\n-<\/project>\n\\ No newline at end of file\n+<\/project>\n","filename":"apps\/samples\/RichTextAreaDemo\/build.xml","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -347,3 +347,0 @@\n-\/\/ FIXME: Remove this when JDK-8334137 is fixed\n-ext.allowSunMiscUnsafe = '--sun-misc-unsafe-memory-access=allow'\n-\n@@ -1202,5 +1199,0 @@\n-            \/\/ FIXME: Remove this when JDK-8334137 is fixed\n-            if (jdk24OrLater) {\n-                dest << allowSunMiscUnsafe\n-                dest << \"\\n\"\n-            }\n@@ -2304,4 +2296,0 @@\n-    \/\/ FIXME: Remove this setting when JDK-8334137 is fixed\n-    \/\/ Disable javac -Werror until we stop using sun.misc.Unsafe\n-    project.ext.disableJavacWerror = true\n-\n@@ -2704,4 +2692,0 @@\n-        \/\/ FIXME: Remove this when JDK-8334137 is fixed\n-        if (jdk24OrLater) {\n-            jvmArgs allowSunMiscUnsafe\n-        }\n@@ -2797,4 +2781,0 @@\n-        \/\/ FIXME: Remove this when JDK-8334137 is fixed\n-        if (jdk24OrLater) {\n-            jvmArgs allowSunMiscUnsafe\n-        }\n@@ -3023,5 +3003,0 @@\n-\n-        \/\/ FIXME: Remove this when JDK-8334137 is fixed\n-        if (jdk24OrLater) {\n-            jvmArgs allowSunMiscUnsafe\n-        }\n@@ -3093,4 +3068,0 @@\n-        \/\/ FIXME: Remove this when JDK-8334137 is fixed\n-        if (jdk24OrLater) {\n-            jvmArgs allowSunMiscUnsafe\n-        }\n@@ -3142,4 +3113,0 @@\n-        \/\/ FIXME: Remove this when JDK-8334137 is fixed\n-        if (jdk24OrLater) {\n-            jvmArgs allowSunMiscUnsafe\n-        }\n@@ -3888,5 +3855,0 @@\n-        \/\/ FIXME: Remove this when JDK-8334137 is fixed\n-        if (jdk24OrLater) {\n-            jvmArgs allowSunMiscUnsafe\n-        }\n-\n@@ -4301,5 +4263,0 @@\n-        \/\/ FIXME: Remove this when JDK-8334137 is fixed\n-        if (jdk24OrLater) {\n-            jvmArgs allowSunMiscUnsafe\n-        }\n-\n","filename":"build.gradle","additions":0,"deletions":43,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -222,2 +222,2 @@\n-        logInfo(\"prism.marlin.logUnsafeMalloc  = \"\n-                + MarlinConst.LOG_UNSAFE_MALLOC);\n+        logInfo(\"prism.marlin.logOffHeapMalloc  = \"\n+                + MarlinConst.LOG_OFF_HEAP_MALLOC);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/DMarlinRenderingEngine.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,5 +40,5 @@\n-    \/\/ log misc.Unsafe alloc\/realloc\/free\n-    static final boolean LOG_UNSAFE_MALLOC = ENABLE_LOGS\n-        && MarlinProperties.isLogUnsafeMalloc();\n-    \/\/ do check unsafe alignment:\n-    static final boolean DO_CHECK_UNSAFE = false;\n+    \/\/ log off-heap alloc\/realloc\/free\n+    static final boolean LOG_OFF_HEAP_MALLOC = ENABLE_LOGS\n+        && MarlinProperties.isLogOffHeapMalloc();\n+    \/\/ do check off-heap alignment:\n+    static final boolean DO_CHECK_OFF_HEAP = false;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/MarlinConst.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -243,2 +243,2 @@\n-    public static boolean isLogUnsafeMalloc() {\n-        return getBoolean(\"prism.marlin.logUnsafeMalloc\", \"false\");\n+    public static boolean isLogOffHeapMalloc() {\n+        return getBoolean(\"prism.marlin.logOffHeapMalloc\", \"false\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/MarlinProperties.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import sun.misc.Unsafe;\n@@ -33,3 +32,0 @@\n-\/\/ FIXME: We must replace the terminally deprecated sun.misc.Unsafe\n-\/\/ memory access methods; see JDK-8334137\n-@SuppressWarnings(\"removal\")\n@@ -95,1 +91,1 @@\n-        ALPHA_MAP_USED = (maxalpha == 1) ? ALPHA_MAP_UNSAFE_NO_AA : ALPHA_MAP_UNSAFE;\n+        ALPHA_MAP_USED = (maxalpha == 1) ? ALPHA_MAP_OFF_HEAP_NO_AA : ALPHA_MAP_OFF_HEAP;\n@@ -102,1 +98,1 @@\n-    static final OffHeapArray ALPHA_MAP_UNSAFE;\n+    static final OffHeapArray ALPHA_MAP_OFF_HEAP;\n@@ -105,1 +101,1 @@\n-    static final OffHeapArray ALPHA_MAP_UNSAFE_NO_AA;\n+    static final OffHeapArray ALPHA_MAP_OFF_HEAP_NO_AA;\n@@ -108,2 +104,0 @@\n-        final Unsafe _unsafe = OffHeapArray.UNSAFE;\n-\n@@ -113,3 +107,1 @@\n-        ALPHA_MAP_UNSAFE = new OffHeapArray(ALPHA_MAP, ALPHA_MAP.length); \/\/ 1K\n-\n-        long addr = ALPHA_MAP_UNSAFE.address;\n+        ALPHA_MAP_OFF_HEAP = new OffHeapArray(ALPHA_MAP, ALPHA_MAP.length); \/\/ 1K\n@@ -118,1 +110,1 @@\n-            _unsafe.putByte(addr + i, _ALPHA_MAP[i]);\n+            ALPHA_MAP_OFF_HEAP.putByte(i, _ALPHA_MAP[i]);\n@@ -124,3 +116,1 @@\n-        ALPHA_MAP_UNSAFE_NO_AA = new OffHeapArray(ALPHA_MAP_NO_AA, ALPHA_MAP_NO_AA.length);\n-\n-        addr = ALPHA_MAP_UNSAFE_NO_AA.address;\n+        ALPHA_MAP_OFF_HEAP_NO_AA = new OffHeapArray(ALPHA_MAP_NO_AA, ALPHA_MAP_NO_AA.length);\n@@ -129,1 +119,1 @@\n-            _unsafe.putByte(addr + i, _ALPHA_MAP_NO_AA[i]);\n+            ALPHA_MAP_OFF_HEAP_NO_AA.putByte(i, _ALPHA_MAP_NO_AA[i]);\n@@ -169,3 +159,0 @@\n-        final Unsafe _unsafe = OffHeapArray.UNSAFE;\n-        final long addr_alpha = ALPHA_MAP_USED.address;\n-\n@@ -191,1 +178,1 @@\n-                out[off + i] = _unsafe.getByte(addr_alpha + curAlpha); \/\/ [0..255]\n+                out[off + i] = ALPHA_MAP_USED.getByte(curAlpha); \/\/ [0..255]\n@@ -208,1 +195,1 @@\n-                out[off + i] = _unsafe.getByte(addr_alpha + curAlpha); \/\/ [0..255]\n+                out[off + i] = ALPHA_MAP_USED.getByte(curAlpha); \/\/ [0..255]\n@@ -233,3 +220,0 @@\n-        final Unsafe _unsafe = OffHeapArray.UNSAFE;\n-        final long addr_alpha = ALPHA_MAP_USED.address;\n-\n@@ -293,1 +277,1 @@\n-                                    val = _unsafe.getByte(addr_alpha + curAlpha);\n+                                    val = ALPHA_MAP_USED.getByte(curAlpha);\n@@ -310,1 +294,1 @@\n-                val = _unsafe.getByte(addr_alpha + curAlpha);\n+                val = ALPHA_MAP_USED.getByte(curAlpha);\n@@ -348,1 +332,1 @@\n-                                val = _unsafe.getByte(addr_alpha + curAlpha);\n+                                val = ALPHA_MAP_USED.getByte(curAlpha);\n@@ -364,1 +348,1 @@\n-                val = _unsafe.getByte(addr_alpha + curAlpha);\n+                val = ALPHA_MAP_USED.getByte(curAlpha);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/MaskMarlinAlphaConsumer.java","additions":13,"deletions":29,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -28,3 +28,4 @@\n-import static com.sun.marlin.MarlinConst.LOG_UNSAFE_MALLOC;\n-import java.lang.reflect.Field;\n-import sun.misc.Unsafe;\n+import static com.sun.marlin.MarlinConst.LOG_OFF_HEAP_MALLOC;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n@@ -32,6 +33,0 @@\n-\/**\n- *\n- *\/\n-\/\/ FIXME: We must replace the terminally deprecated sun.misc.Unsafe\n-\/\/ memory access methods; see JDK-8334137\n-@SuppressWarnings(\"removal\")\n@@ -40,2 +35,2 @@\n-    \/\/ unsafe reference\n-    static final Unsafe UNSAFE;\n+    private Arena arena;\n+\n@@ -43,10 +38,1 @@\n-    static final int SIZE_INT;\n-\n-    static {\n-        try {\n-            final Field field = Unsafe.class.getDeclaredField(\"theUnsafe\");\n-            field.setAccessible(true);\n-            UNSAFE = (Unsafe) field.get(null);\n-        } catch (Exception e) {\n-            throw new InternalError(\"Unable to get sun.misc.Unsafe instance\", e);\n-        }\n+    static final int SIZE_INT = 4;\n@@ -54,2 +40,4 @@\n-        SIZE_INT = Unsafe.ARRAY_INT_INDEX_SCALE;\n-    }\n+    \/\/ FFM stuff\n+    private static final int ALIGNMENT = 16;\n+    private static final ValueLayout.OfByte BYTE_LAYOUT = ValueLayout.JAVA_BYTE;\n+    private static final ValueLayout.OfInt INT_LAYOUT = ValueLayout.JAVA_INT;\n@@ -58,3 +46,3 @@\n-    long address;\n-    long length;\n-    int  used;\n+    private MemorySegment segment;\n+    private long length;\n+    private int used;\n@@ -63,0 +51,2 @@\n+        arena = Arena.ofConfined();\n+\n@@ -64,1 +54,1 @@\n-        this.address = UNSAFE.allocateMemory(len);\n+        this.segment = arena.allocate(len, ALIGNMENT);\n@@ -67,1 +57,1 @@\n-        if (LOG_UNSAFE_MALLOC) {\n+        if (LOG_OFF_HEAP_MALLOC) {\n@@ -70,1 +60,1 @@\n-                                + len + \" to addr = \" + this.address);\n+                                + len + \" for segment = \" + this.segment);\n@@ -77,0 +67,33 @@\n+    \/**\n+     * Gets the length of this array.\n+     * @return the length in bytes\n+     *\/\n+    long getLength() {\n+        return length;\n+    }\n+\n+    \/**\n+     * Gets the number of bytes currently being used. Always <= length\n+     * @return number of used bytes\n+     *\/\n+    int getUsed() {\n+        return used;\n+    }\n+\n+    \/**\n+     * Sets the number of bytes currently being used. Always <= length\n+     * @param used number of used bytes\n+     *\/\n+    void setUsed(int used) {\n+        this.used = used;\n+    }\n+\n+    \/**\n+     * Increments the number of bytes currently being used.\n+     * Current used + increment must be <= length\n+     * @param increment number of used bytes to increment\n+     *\/\n+    void incrementUsed(int increment) {\n+        this.used += increment;\n+    }\n+\n@@ -83,0 +106,2 @@\n+        Arena newArena = Arena.ofConfined();\n+\n@@ -84,1 +109,10 @@\n-        this.address = UNSAFE.reallocateMemory(address, len);\n+        MemorySegment newSegment = newArena.allocate(len, ALIGNMENT);\n+\n+        \/\/ If there are any bytes in use, copy them to the newly reallocated array\n+        if (this.used > 0) {\n+            MemorySegment.copy(segment, 0, newSegment, 0, Math.min(this.used, len));\n+        }\n+\n+        this.arena.close();\n+        this.arena = newArena;\n+        this.segment = newSegment;\n@@ -86,1 +120,2 @@\n-        if (LOG_UNSAFE_MALLOC) {\n+\n+        if (LOG_OFF_HEAP_MALLOC) {\n@@ -89,1 +124,1 @@\n-                                + len + \" to addr = \" + this.address);\n+                                + len + \" for segment = \" + this.segment);\n@@ -94,2 +129,2 @@\n-        UNSAFE.freeMemory(this.address);\n-        if (LOG_UNSAFE_MALLOC) {\n+        arena.close();\n+        if (LOG_OFF_HEAP_MALLOC) {\n@@ -99,1 +134,1 @@\n-                                + \" at addr = \" + this.address);\n+                                + \" for segment = \" + this.segment);\n@@ -101,1 +136,0 @@\n-        this.address = 0L;\n@@ -105,1 +139,17 @@\n-        UNSAFE.setMemory(this.address, this.length, val);\n+        segment.fill(val);\n+    }\n+\n+    void putByte(long offset, byte val) {\n+        segment.set(BYTE_LAYOUT, offset, val);\n+    }\n+\n+    void putInt(long offset, int val) {\n+        segment.set(INT_LAYOUT, offset, val);\n+    }\n+\n+    byte getByte(long offset) {\n+        return segment.get(BYTE_LAYOUT, offset);\n+    }\n+\n+    int getInt(long offset) {\n+        return segment.get(INT_LAYOUT, offset);\n@@ -107,0 +157,1 @@\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/OffHeapArray.java","additions":88,"deletions":37,"binary":false,"changes":125,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import sun.misc.Unsafe;\n@@ -31,3 +30,0 @@\n-\/\/ FIXME: We must replace the terminally deprecated sun.misc.Unsafe\n-\/\/ memory access methods; see JDK-8334137\n-@SuppressWarnings(\"removal\")\n@@ -384,1 +380,1 @@\n-        final int edgePtr = _edges.used;\n+        final int edgePtr = _edges.getUsed();\n@@ -387,1 +383,1 @@\n-        if (_edges.length - edgePtr < _SIZEOF_EDGE_BYTES) {\n+        if (_edges.getLength() - edgePtr < _SIZEOF_EDGE_BYTES) {\n@@ -392,1 +388,1 @@\n-                                        _edges.length,\n+                                        _edges.getLength(),\n@@ -402,1 +398,0 @@\n-        final Unsafe _unsafe = OffHeapArray.UNSAFE;\n@@ -404,1 +399,1 @@\n-        long addr   = _edges.address + edgePtr;\n+        long addr   = edgePtr;\n@@ -434,1 +429,1 @@\n-        _unsafe.putInt(addr, (((int) (x1_fixed_biased >> 31L)) & ALL_BUT_LSB) | or);\n+        _edges.putInt(addr, (((int) (x1_fixed_biased >> 31L)) & ALL_BUT_LSB) | or);\n@@ -436,1 +431,1 @@\n-        _unsafe.putInt(addr,  ((int)  x1_fixed_biased) >>> 1);\n+        _edges.putInt(addr,  ((int)  x1_fixed_biased) >>> 1);\n@@ -443,1 +438,1 @@\n-        _unsafe.putInt(addr, (((int) (slope_fixed >> 31L)) & ALL_BUT_LSB));\n+        _edges.putInt(addr, (((int) (slope_fixed >> 31L)) & ALL_BUT_LSB));\n@@ -445,1 +440,1 @@\n-        _unsafe.putInt(addr,  ((int)  slope_fixed) >>> 1);\n+        _edges.putInt(addr,  ((int)  slope_fixed) >>> 1);\n@@ -458,1 +453,1 @@\n-        _unsafe.putInt(addr, _edgeBuckets[bucketIdx]);\n+        _edges.putInt(addr, _edgeBuckets[bucketIdx]);\n@@ -461,1 +456,1 @@\n-        _unsafe.putInt(addr,  lastCrossing);\n+        _edges.putInt(addr,  lastCrossing);\n@@ -471,1 +466,1 @@\n-        _edges.used += _SIZEOF_EDGE_BYTES;\n+        _edges.incrementUsed(_SIZEOF_EDGE_BYTES);\n@@ -586,1 +581,1 @@\n-        edges.used = 0;\n+        edges.setUsed(0);\n@@ -602,4 +597,4 @@\n-            rdrCtx.stats.stat_rdr_edges.add(edges.used);\n-            rdrCtx.stats.stat_rdr_edges_count.add(edges.used \/ SIZEOF_EDGE_BYTES);\n-            rdrCtx.stats.hist_rdr_edges_count.add(edges.used \/ SIZEOF_EDGE_BYTES);\n-            rdrCtx.stats.totalOffHeap += edges.length;\n+            rdrCtx.stats.stat_rdr_edges.add(edges.getUsed());\n+            rdrCtx.stats.stat_rdr_edges_count.add(edges.getUsed() \/ SIZEOF_EDGE_BYTES);\n+            rdrCtx.stats.hist_rdr_edges_count.add(edges.getUsed() \/ SIZEOF_EDGE_BYTES);\n+            rdrCtx.stats.totalOffHeap += edges.getLength();\n@@ -653,0 +648,3 @@\n+        \/\/ Clear used bytes in edges array\n+        edges.setUsed(0);\n+\n@@ -654,1 +652,1 @@\n-        if (edges.length != INITIAL_EDGES_CAPACITY) {\n+        if (edges.getLength() != INITIAL_EDGES_CAPACITY) {\n@@ -782,3 +780,1 @@\n-        \/\/ unsafe I\/O:\n-        final Unsafe _unsafe = OffHeapArray.UNSAFE;\n-        final long    addr0  = _edges.address;\n+        \/\/ off-heap I\/O:\n@@ -856,1 +852,1 @@\n-                    addr = addr0 + _OFF_YMAX;\n+                    addr = _OFF_YMAX;\n@@ -861,2 +857,2 @@\n-                        \/\/ random access so use unsafe:\n-                        if (_unsafe.getInt(addr + ecur) > y) {\n+                        \/\/ random access so use off-heap:\n+                        if (_edges.getInt(addr + ecur) > y) {\n@@ -905,1 +901,1 @@\n-                    addr = addr0 + _OFF_NEXT;\n+                    addr = _OFF_NEXT;\n@@ -913,2 +909,2 @@\n-                        \/\/ random access so use unsafe:\n-                        ecur = _unsafe.getInt(addr + ecur);\n+                        \/\/ random access so use off-heap:\n+                        ecur = _edges.getInt(addr + ecur);\n@@ -979,2 +975,2 @@\n-                        \/\/ random access so use unsafe:\n-                        addr = addr0 + ecur; \/\/ ecur + OFF_F_CURX\n+                        \/\/ random access so use off-heap:\n+                        addr = ecur; \/\/ ecur + OFF_F_CURX\n@@ -983,1 +979,1 @@\n-                        curx = _unsafe.getInt(addr);\n+                        curx = _edges.getInt(addr);\n@@ -989,1 +985,1 @@\n-                        curx += _unsafe.getInt(addr + _OFF_BUMP_X);\n+                        curx += _edges.getInt(addr + _OFF_BUMP_X);\n@@ -992,2 +988,2 @@\n-                        err  =  _unsafe.getInt(addr + _OFF_ERROR)\n-                              + _unsafe.getInt(addr + _OFF_BUMP_ERR);\n+                        err  =  _edges.getInt(addr + _OFF_ERROR)\n+                              + _edges.getInt(addr + _OFF_BUMP_ERR);\n@@ -997,2 +993,2 @@\n-                        _unsafe.putInt(addr,               curx - ((err >> 30) & _ALL_BUT_LSB));\n-                        _unsafe.putInt(addr + _OFF_ERROR, (err & _ERR_STEP_MAX));\n+                        _edges.putInt(addr,               curx - ((err >> 30) & _ALL_BUT_LSB));\n+                        _edges.putInt(addr + _OFF_ERROR, (err & _ERR_STEP_MAX));\n@@ -1086,2 +1082,2 @@\n-                        \/\/ random access so use unsafe:\n-                        addr = addr0 + ecur; \/\/ ecur + OFF_F_CURX\n+                        \/\/ random access so use off-heap:\n+                        addr = ecur; \/\/ ecur + OFF_F_CURX\n@@ -1090,1 +1086,1 @@\n-                        curx = _unsafe.getInt(addr);\n+                        curx = _edges.getInt(addr);\n@@ -1096,1 +1092,1 @@\n-                        curx += _unsafe.getInt(addr + _OFF_BUMP_X);\n+                        curx += _edges.getInt(addr + _OFF_BUMP_X);\n@@ -1099,2 +1095,2 @@\n-                        err  =  _unsafe.getInt(addr + _OFF_ERROR)\n-                              + _unsafe.getInt(addr + _OFF_BUMP_ERR);\n+                        err  =  _edges.getInt(addr + _OFF_ERROR)\n+                              + _edges.getInt(addr + _OFF_BUMP_ERR);\n@@ -1104,2 +1100,2 @@\n-                        _unsafe.putInt(addr,               curx - ((err >> 30) & _ALL_BUT_LSB));\n-                        _unsafe.putInt(addr + _OFF_ERROR, (err & _ERR_STEP_MAX));\n+                        _edges.putInt(addr,               curx - ((err >> 30) & _ALL_BUT_LSB));\n+                        _edges.putInt(addr + _OFF_ERROR, (err & _ERR_STEP_MAX));\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/Renderer.java","additions":43,"deletions":47,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import sun.misc.Unsafe;\n@@ -31,3 +30,0 @@\n-\/\/ FIXME: We must replace the terminally deprecated sun.misc.Unsafe\n-\/\/ memory access methods; see JDK-8334137\n-@SuppressWarnings(\"removal\")\n@@ -375,1 +371,1 @@\n-        final int edgePtr = _edges.used;\n+        final int edgePtr = _edges.getUsed();\n@@ -378,1 +374,1 @@\n-        if (_edges.length - edgePtr < _SIZEOF_EDGE_BYTES) {\n+        if (_edges.getLength() - edgePtr < _SIZEOF_EDGE_BYTES) {\n@@ -383,1 +379,1 @@\n-                                        _edges.length,\n+                                        _edges.getLength(),\n@@ -393,1 +389,0 @@\n-        final Unsafe _unsafe = OffHeapArray.UNSAFE;\n@@ -395,1 +390,1 @@\n-        long addr   = _edges.address + edgePtr;\n+        long addr   = edgePtr;\n@@ -425,1 +420,1 @@\n-        _unsafe.putInt(addr, (((int) (x1_fixed_biased >> 31L)) & ALL_BUT_LSB) | or);\n+        _edges.putInt(addr, (((int) (x1_fixed_biased >> 31L)) & ALL_BUT_LSB) | or);\n@@ -427,1 +422,1 @@\n-        _unsafe.putInt(addr,  ((int)  x1_fixed_biased) >>> 1);\n+        _edges.putInt(addr,  ((int)  x1_fixed_biased) >>> 1);\n@@ -434,1 +429,1 @@\n-        _unsafe.putInt(addr, (((int) (slope_fixed >> 31L)) & ALL_BUT_LSB));\n+        _edges.putInt(addr, (((int) (slope_fixed >> 31L)) & ALL_BUT_LSB));\n@@ -436,1 +431,1 @@\n-        _unsafe.putInt(addr,  ((int)  slope_fixed) >>> 1);\n+        _edges.putInt(addr,  ((int)  slope_fixed) >>> 1);\n@@ -449,1 +444,1 @@\n-        _unsafe.putInt(addr, _edgeBuckets[bucketIdx]);\n+        _edges.putInt(addr, _edgeBuckets[bucketIdx]);\n@@ -452,1 +447,1 @@\n-        _unsafe.putInt(addr,  lastCrossing);\n+        _edges.putInt(addr,  lastCrossing);\n@@ -462,1 +457,1 @@\n-        _edges.used += _SIZEOF_EDGE_BYTES;\n+        _edges.incrementUsed(_SIZEOF_EDGE_BYTES);\n@@ -575,1 +570,1 @@\n-        edges.used = 0;\n+        edges.setUsed(0);\n@@ -591,4 +586,4 @@\n-            rdrCtx.stats.stat_rdr_edges.add(edges.used);\n-            rdrCtx.stats.stat_rdr_edges_count.add(edges.used \/ SIZEOF_EDGE_BYTES);\n-            rdrCtx.stats.hist_rdr_edges_count.add(edges.used \/ SIZEOF_EDGE_BYTES);\n-            rdrCtx.stats.totalOffHeap += edges.length;\n+            rdrCtx.stats.stat_rdr_edges.add(edges.getUsed());\n+            rdrCtx.stats.stat_rdr_edges_count.add(edges.getUsed() \/ SIZEOF_EDGE_BYTES);\n+            rdrCtx.stats.hist_rdr_edges_count.add(edges.getUsed() \/ SIZEOF_EDGE_BYTES);\n+            rdrCtx.stats.totalOffHeap += edges.getLength();\n@@ -626,0 +621,3 @@\n+        \/\/ Clear used bytes in edges array\n+        edges.setUsed(0);\n+\n@@ -627,1 +625,1 @@\n-        if (edges.length != INITIAL_EDGES_CAPACITY) {\n+        if (edges.getLength() != INITIAL_EDGES_CAPACITY) {\n@@ -755,3 +753,1 @@\n-        \/\/ unsafe I\/O:\n-        final Unsafe _unsafe = OffHeapArray.UNSAFE;\n-        final long    addr0  = _edges.address;\n+        \/\/ off-heap I\/O:\n@@ -823,1 +819,1 @@\n-                    addr = addr0 + _OFF_YMAX;\n+                    addr = _OFF_YMAX;\n@@ -828,2 +824,2 @@\n-                        \/\/ random access so use unsafe:\n-                        if (_unsafe.getInt(addr + ecur) > y) {\n+                        \/\/ random access so use off-heap:\n+                        if (_edges.getInt(addr + ecur) > y) {\n@@ -872,1 +868,1 @@\n-                    addr = addr0 + _OFF_NEXT;\n+                    addr = _OFF_NEXT;\n@@ -880,2 +876,2 @@\n-                        \/\/ random access so use unsafe:\n-                        ecur = _unsafe.getInt(addr + ecur);\n+                        \/\/ random access so use off-heap:\n+                        ecur = _edges.getInt(addr + ecur);\n@@ -946,2 +942,2 @@\n-                        \/\/ random access so use unsafe:\n-                        addr = addr0 + ecur; \/\/ ecur + OFF_F_CURX\n+                        \/\/ random access so use off-heap:\n+                        addr = ecur; \/\/ ecur + OFF_F_CURX\n@@ -950,1 +946,1 @@\n-                        curx = _unsafe.getInt(addr);\n+                        curx = _edges.getInt(addr);\n@@ -956,1 +952,1 @@\n-                        curx += _unsafe.getInt(addr + _OFF_BUMP_X);\n+                        curx += _edges.getInt(addr + _OFF_BUMP_X);\n@@ -959,2 +955,2 @@\n-                        err  =  _unsafe.getInt(addr + _OFF_ERROR)\n-                              + _unsafe.getInt(addr + _OFF_BUMP_ERR);\n+                        err  =  _edges.getInt(addr + _OFF_ERROR)\n+                              + _edges.getInt(addr + _OFF_BUMP_ERR);\n@@ -964,2 +960,2 @@\n-                        _unsafe.putInt(addr,               curx - ((err >> 30) & _ALL_BUT_LSB));\n-                        _unsafe.putInt(addr + _OFF_ERROR, (err & _ERR_STEP_MAX));\n+                        _edges.putInt(addr,               curx - ((err >> 30) & _ALL_BUT_LSB));\n+                        _edges.putInt(addr + _OFF_ERROR, (err & _ERR_STEP_MAX));\n@@ -1053,2 +1049,2 @@\n-                        \/\/ random access so use unsafe:\n-                        addr = addr0 + ecur; \/\/ ecur + OFF_F_CURX\n+                        \/\/ random access so use off-heap:\n+                        addr = ecur; \/\/ ecur + OFF_F_CURX\n@@ -1057,1 +1053,1 @@\n-                        curx = _unsafe.getInt(addr);\n+                        curx = _edges.getInt(addr);\n@@ -1063,1 +1059,1 @@\n-                        curx += _unsafe.getInt(addr + _OFF_BUMP_X);\n+                        curx += _edges.getInt(addr + _OFF_BUMP_X);\n@@ -1066,2 +1062,2 @@\n-                        err  =  _unsafe.getInt(addr + _OFF_ERROR)\n-                              + _unsafe.getInt(addr + _OFF_BUMP_ERR);\n+                        err  =  _edges.getInt(addr + _OFF_ERROR)\n+                              + _edges.getInt(addr + _OFF_BUMP_ERR);\n@@ -1071,2 +1067,2 @@\n-                        _unsafe.putInt(addr,               curx - ((err >> 30) & _ALL_BUT_LSB));\n-                        _unsafe.putInt(addr + _OFF_ERROR, (err & _ERR_STEP_MAX));\n+                        _edges.putInt(addr,               curx - ((err >> 30) & _ALL_BUT_LSB));\n+                        _edges.putInt(addr + _OFF_ERROR, (err & _ERR_STEP_MAX));\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/RendererNoAA.java","additions":43,"deletions":47,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-    private static final String VERSION = \"marlinFX-0.9.4.6-Unsafe-OpenJFX\";\n+    private static final String VERSION = \"marlinFX-0.9.4.6-FFM-OpenJFX\";\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/Version.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,5 +70,0 @@\n-        \/\/ FIXME: Remove this when JDK-8334137 is fixed\n-        if (Runtime.version().feature() >= 24) {\n-            cmd.add(\"--sun-misc-unsafe-memory-access=allow\");\n-        }\n-\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/webkit\/LocalStorageAccessTest.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -64,5 +64,0 @@\n-        \/\/ FIXME: Remove this when JDK-8334137 is fixed\n-        if (Runtime.version().feature() >= 24) {\n-            cmd.add(\"--sun-misc-unsafe-memory-access=allow\");\n-        }\n-\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/webkit\/MainThreadTest.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}