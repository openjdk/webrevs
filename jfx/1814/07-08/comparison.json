{"files":[{"patch":"@@ -50,12 +50,0 @@\n-    \/**\n-     * Creates an OffHeapArray of the specified length using a confined arena.\n-     * All access to this array must be done on the same thread that constructed it.\n-     *\n-     * @param parent the object that will be used to register a cleaner to\n-     * free the off-heap array when {@code parent} becomes phantom reachable\n-     * @param len the number of bytes to allocate\n-     *\/\n-    OffHeapArray(final Object parent, final long len) {\n-        this(parent, len, false);\n-    }\n-\n@@ -79,5 +67,2 @@\n-        if (global) {\n-            arena = Arena.global();\n-        } else {\n-            arena = Arena.ofConfined();\n-        }\n+        \/\/ Allocate the specified type of arena\n+        this.arena = global ? Arena.global() : Arena.ofConfined();\n@@ -91,1 +76,2 @@\n-                                + len + \" for segment = \" + this.segment);\n+                                + len + \" for segment = \" + this.segment\n+                                + \" global = \" + global);\n@@ -165,4 +151,0 @@\n-        if (global) {\n-            throw new UnsupportedOperationException(\"Cannot free a global OffHeapArray\");\n-        }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/OffHeapArray.java","additions":4,"deletions":22,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-        return new OffHeapArray(cleanerObj, initialSize);\n+        return new OffHeapArray(cleanerObj, initialSize, false);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/RendererContext.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}