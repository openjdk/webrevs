{"files":[{"patch":"@@ -849,2 +849,2 @@\n-     * The {@link TraversalPolicy} to be used by this Parent to provide assistance to the\n-     * JavaFX focus traversal subsystem.\n+     * The {@link TraversalPolicy} allows for customizing focus traversal within this\n+     * {@code Parent}'s children as well as traversal outside of this {@code Parent}.\n@@ -853,1 +853,2 @@\n-     * @since 999 TODO\n+     * @see javafx.scene.traversal.FocusTraversal\n+     * @since 24\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Parent.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -34,1 +34,6 @@\n- * Provides the mechanism for focus traversal in the JavaFX application.\n+ * Provides the methods for focus traversal within the JavaFX application.\n+ * <p>\n+ * The methods provided in this class allow for transferring focus away from the\n+ * specific {@code Node} (which serves as a reference and does not have to be focused or\n+ * focusable), within the owning {@link Scene} or {@link SubScene}, as determined\n+ * by the default and custom {@link TraversalPolicy} set on the adjacent {@code Node}s.\n@@ -36,1 +41,1 @@\n- * @since 999 TODO\n+ * @since 24\n@@ -64,0 +69,3 @@\n+     * <p>\n+     * This convenience method is equivalent to calling\n+     * {@code traverse(node, TraversalDirection.DOWN, TraversalMethod.KEY);}\n@@ -65,1 +73,1 @@\n-     * @param node the origin node\n+     * @param node the node to traverse focus from\n@@ -75,1 +83,1 @@\n-     * Ths convenience method is equivalent to calling\n+     * This convenience method is equivalent to calling\n@@ -78,1 +86,1 @@\n-     * @param node the origin node\n+     * @param node the node to traverse focus from\n@@ -88,1 +96,1 @@\n-     * Ths convenience method is equivalent to calling\n+     * This convenience method is equivalent to calling\n@@ -91,1 +99,1 @@\n-     * @param node the origin node\n+     * @param node the node to traverse focus from\n@@ -102,1 +110,1 @@\n-     * Ths convenience method is equivalent to calling\n+     * This convenience method is equivalent to calling\n@@ -105,1 +113,1 @@\n-     * @param node the origin node\n+     * @param node the node to traverse focus from\n@@ -115,1 +123,1 @@\n-     * Ths convenience method is equivalent to calling\n+     * This convenience method is equivalent to calling\n@@ -118,1 +126,1 @@\n-     * @param node the origin node\n+     * @param node the node to traverse focus from\n@@ -128,1 +136,1 @@\n-     * Ths convenience method is equivalent to calling\n+     * This convenience method is equivalent to calling\n@@ -131,1 +139,1 @@\n-     * @param node the origin node\n+     * @param node the node to traverse focus from\n@@ -141,1 +149,1 @@\n-     * Ths convenience method is equivalent to calling\n+     * This convenience method is equivalent to calling\n@@ -144,1 +152,1 @@\n-     * @param node the origin node\n+     * @param node the node to traverse focus from\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/traversal\/FocusTraversal.java","additions":23,"deletions":15,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @since 999 TODO\n+ * @since 24\n@@ -35,1 +35,1 @@\n-    \/** Moving focus downward. *\/\n+    \/** Moves focus downward. *\/\n@@ -37,1 +37,1 @@\n-    \/** Moving focus left. *\/\n+    \/** Moves focus left. *\/\n@@ -39,1 +39,1 @@\n-    \/** Moving focus to the next focusable Node. *\/\n+    \/** Moves focus to the next focusable Node. *\/\n@@ -43,1 +43,1 @@\n-    \/** Moving focus to the previous focusable Node. *\/\n+    \/** Moves focus to the previous focusable Node. *\/\n@@ -45,1 +45,1 @@\n-    \/** Moving focus right. *\/\n+    \/** Moves focus right. *\/\n@@ -47,1 +47,1 @@\n-    \/** Moving focus upward. *\/\n+    \/** Moves focus upward. *\/\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/traversal\/TraversalDirection.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n- * @since 999 TODO\n+ * @since 24\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/traversal\/TraversalEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+ *\n+ * @since 24\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/traversal\/TraversalMethod.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,4 +33,8 @@\n- * TraversalPolicy represents the specific algorithm to be used to traverse between\n- * elements in the JavaFX scenegraph.\n- *\n- * <p>Note that in order to avoid cycles or dead-ends in traversal the algorithms should respect the following order:\n+ * The base class for any algorithm that determines focus traversal between elements in the\n+ * JavaFX scene graph.\n+ * <p>\n+ * In addition to the default traversal policy, which can be obtained via {@link #getDefault()}, a custom policy\n+ * can be set on via {@link Parent#setTraversalPolicy(TraversalPolicy)}, thus altering the traversal between\n+ * the children of that {@code Parent} and out of it.\n+ * <p>\n+ * Note that in order to avoid cycles or dead-ends in traversal the algorithms should respect the following order:\n@@ -49,1 +53,1 @@\n- * @since 999 TODO\n+ * @since 24\n@@ -53,2 +57,2 @@\n-     * Traverse from owner, in direction dir.\n-     * Return the new {@link javafx.scene.Node#isFocusTraversable() focus traversable} Node\n+     * Traverses from the specified {@code node}, in the direction {@code dir}.\n+     * Returns the new {@link javafx.scene.Node#isFocusTraversable() focus traversable} Node\n@@ -63,1 +67,1 @@\n-     * <li>select the next node within this direct child using the context.selectInSubtree() and return it\n+     * <li>select the next node within this direct child and return it\n@@ -77,1 +81,1 @@\n-     * node for the specified context (root).\n+     * node for the specified root.\n@@ -86,1 +90,1 @@\n-     * {@link javafx.scene.Node#isFocusTraversable() focus traversable} node for the specified context (root).\n+     * {@link javafx.scene.Node#isFocusTraversable() focus traversable} node for the specified root.\n@@ -94,1 +98,1 @@\n-     * The constructor.\n+     * Constructor for subclasses to call.\n@@ -96,1 +100,1 @@\n-    public TraversalPolicy() {\n+    protected TraversalPolicy() {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/traversal\/TraversalPolicy.java","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -27,1 +27,3 @@\n- * <p>Provides the set of classes for focus traversal.<\/p>\n+ * Provides the set of classes for focus traversal.\n+ *\n+ * @since 24\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/traversal\/package-info.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}