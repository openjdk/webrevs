{"files":[{"patch":"@@ -160,0 +160,16 @@\n+            if (change instanceof IterableMapChange<? extends K, ? extends V> iterableChange) {\n+                fireMapChangeEvent(iterableChange);\n+            } else {\n+                fireMapChangeEvent(change);\n+            }\n+        }\n+\n+        private void fireMapChangeEvent(MapChangeListener.Change<? extends K, ? extends V> change) {\n+            try {\n+                listener.onChanged(change);\n+            } catch (Exception e) {\n+                Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);\n+            }\n+        }\n+\n+        private void fireMapChangeEvent(IterableMapChange<? extends K, ? extends V> change) {\n@@ -166,1 +182,1 @@\n-            } while (change instanceof IterableMapChange<? extends K, ? extends V> c && c.next() != null);\n+            } while (change.next() != null);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/MapListenerHelper.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -165,1 +165,0 @@\n-        int i = 0;\n@@ -201,2 +200,0 @@\n-\n-            ++i;\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableMapWrapper.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -431,7 +431,3 @@\n-        if (backingSet.size() > 1) {\n-            @SuppressWarnings(\"unchecked\")\n-            E[] removed = (E[])new Object[backingSet.size()];\n-            backingSet.toArray(removed);\n-            backingSet.clear();\n-            callObservers(new IterableSetChange.Remove<>(this, Arrays.asList(removed)));\n-        } else if (backingSet.size() == 1) {\n+        int size = backingSet.size();\n+\n+        if (size == 1) {\n@@ -442,0 +438,6 @@\n+        } else if (size > 1) {\n+            @SuppressWarnings(\"unchecked\")\n+            E[] removed = (E[])new Object[size];\n+            backingSet.toArray(removed);\n+            backingSet.clear();\n+            callObservers(new IterableSetChange.Remove<>(this, Arrays.asList(removed)));\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/ObservableSetWrapper.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -160,0 +160,16 @@\n+            if (change instanceof IterableSetChange<? extends E> iterableChange) {\n+                fireSetChangedEvent(iterableChange);\n+            } else {\n+                fireSetChangedEvent(change);\n+            }\n+        }\n+\n+        private void fireSetChangedEvent(SetChangeListener.Change<? extends E> change) {\n+            try {\n+                listener.onChanged(change);\n+            } catch (Exception e) {\n+                Thread.currentThread().getUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), e);\n+            }\n+        }\n+\n+        private void fireSetChangedEvent(IterableSetChange<? extends E> change) {\n@@ -166,1 +182,1 @@\n-            } while (change instanceof IterableSetChange<? extends E> c && c.next() != null);\n+            } while (change.next() != null);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/SetListenerHelper.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"}]}