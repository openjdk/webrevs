{"files":[{"patch":"@@ -0,0 +1,45 @@\n+# Preview features\n+\n+## Introduction\n+\n+Preview features are features whose design, specification, and implementation are complete, but which\n+would benefit from a period of broad exposure and evaluation before either achieving final and permanent\n+status in JavaFX or else being refined or removed.\n+\n+A feature should meet two criteria in order to be considered complete:\n+\n+1. **Readiness**: The feature should be finished in the next release of JavaFX.\n+   APIs with an exceptionally large surface area, or features that deeply affect the semantics or usage\n+   of the JavaFX platform, may require additional rounds of feedback and revision.\n+2. **Stability**: The feature could credibly achieve final and permanent status with no further changes.\n+   This implies an extremely high degree of confidence in the concepts which underpin the feature, but\n+   does not completely rule out making syntactic or semantic changes in response to feedback.\n+\n+The key properties of a preview feature are:\n+\n+1. **High quality**: A preview feature must display the same level of technical excellence and finesse as\n+   a final and permanent feature of JavaFX. For example, a preview feature must respect traditional Java\n+   principles such as readability and compatibility.\n+\n+2. **Not experimental**: A preview feature must not be experimental, risky, incomplete, or unstable.\n+   For the purpose of comparison, if an experimental feature is considered 25% \"done\", then a preview\n+   feature should be at least 90% \"done\".\n+\n+3. **Opt-in:** The use of preview features must be explicitly enabled by application developers by\n+   setting a system property. The implementation must detect the opt-in, and fail at runtime when the\n+   application has not opted into the use of preview features. All preview features have equal status\n+   in any given JavaFX release and can not be enabled individually.\n+\n+## Adding a preview feature\n+\n+There are several steps that are required to add a new preview feature to JavaFX:\n+\n+1. Identify all relevant API elements of the feature, and annotate them with `@Deprecated`.\n+   The `since` element of the annotation must be set to the same value as the corresponding `@since`\n+   javadoc tag of the API element.\n+2. Add the following javadoc tag to each of the previously deprecated API elements:<p>\n+   `@deprecated This is a preview feature which may be changed or removed in a future release.`\n+3. Add a new constant to the `com.sun.javafx.PreviewFeature` enumeration, and choose a human-readable name\n+   for the preview feature. This name will be used in warning and error messages when the preview feature\n+   is used by application developers.\n+4. Add runtime checks in appropriate places by invoking `com.sun.javafx.PreviewFeature.<FEATURE>.checkEnabled()`.\n","filename":"PREVIEW-FEATURES.md","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx;\n+\n+import com.sun.javafx.runtime.VersionInfo;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+\/**\n+ * Using a preview feature requires an opt-in from application developers by specifying the\n+ * {@code javafx.enablePreview=true} system property. This class verifies that the application\n+ * has opted into preview features.\n+ *\/\n+public enum PreviewFeature {\n+\n+    \/\/ Add preview feature constants here:\n+    \/\/ TEST_FEATURE(\"Test Feature\")\n+    ;\n+\n+    PreviewFeature(String featureName) {\n+        this.featureName = featureName;\n+    }\n+\n+    private final String featureName;\n+\n+    private static final String ENABLE_PREVIEW_PROPERTY = \"javafx.enablePreview\";\n+    private static final String SUPPRESS_WARNING_PROPERTY = \"javafx.suppressPreviewBanner\";\n+\n+    private static final boolean enabled = Boolean.getBoolean(ENABLE_PREVIEW_PROPERTY);\n+    private static final boolean suppressWarning = Boolean.getBoolean(SUPPRESS_WARNING_PROPERTY);\n+    private static final Set<PreviewFeature> enabledFeatures = new HashSet<>();\n+\n+    \/**\n+     * Verifies that preview features are enabled, and throws an exception otherwise.\n+     * <p>\n+     * Unless suppressed with the {@code javafx.suppressPreviewBanner=true} system property, this method\n+     * prints a one-time warning to the error output stream for every feature for which it is called.\n+     *\n+     * @throws RuntimeException if preview features are not enabled\n+     *\/\n+    public void checkEnabled() {\n+        if (!enabled) {\n+            throw new RuntimeException(\"\"\"\n+                %s is a preview feature of JavaFX %s.\n+                Preview features may be removed in a future release, or upgraded to permanent features of JavaFX.\n+                Programs can only use preview features when the following system property is set: -D%s=true\n+                \"\"\".formatted(featureName, VersionInfo.getVersion(), ENABLE_PREVIEW_PROPERTY));\n+        } else if (!suppressWarning && enabledFeatures.add(this)) {\n+            System.err.printf(\"\"\"\n+                Note: This program uses the following preview feature of JavaFX %s: %s\n+                      Preview features may be removed in a future release, or upgraded to permanent features of JavaFX.\n+                      This warning can be disabled with the following system property: -D%s=true\n+                \"\"\", VersionInfo.getVersion(), featureName, SUPPRESS_WARNING_PROPERTY);\n+        }\n+    }\n+}\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/PreviewFeature.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}