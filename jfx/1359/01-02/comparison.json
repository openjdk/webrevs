{"files":[{"patch":"@@ -1,45 +0,0 @@\n-# Preview features\n-\n-## Introduction\n-\n-Preview features are features whose design, specification, and implementation are complete, but which\n-would benefit from a period of broad exposure and evaluation before either achieving final and permanent\n-status in JavaFX or else being refined or removed.\n-\n-A feature should meet two criteria in order to be considered complete:\n-\n-1. **Readiness**: The feature should be finished in the next release of JavaFX.\n-   APIs with an exceptionally large surface area, or features that deeply affect the semantics or usage\n-   of the JavaFX platform, may require additional rounds of feedback and revision.\n-2. **Stability**: The feature could credibly achieve final and permanent status with no further changes.\n-   This implies an extremely high degree of confidence in the concepts which underpin the feature, but\n-   does not completely rule out making syntactic or semantic changes in response to feedback.\n-\n-The key properties of a preview feature are:\n-\n-1. **High quality**: A preview feature must display the same level of technical excellence and finesse as\n-   a final and permanent feature of JavaFX. For example, a preview feature must respect traditional Java\n-   principles such as readability and compatibility.\n-\n-2. **Not experimental**: A preview feature must not be experimental, risky, incomplete, or unstable.\n-   For the purpose of comparison, if an experimental feature is considered 25% \"done\", then a preview\n-   feature should be at least 90% \"done\".\n-\n-3. **Opt-in:** The use of preview features must be explicitly enabled by application developers by\n-   setting a system property. The implementation must detect the opt-in, and fail at runtime when the\n-   application has not opted into the use of preview features. All preview features have equal status\n-   in any given JavaFX release and can not be enabled individually.\n-\n-## Adding a preview feature\n-\n-There are several steps that are required to add a new preview feature to JavaFX:\n-\n-1. Identify all relevant API elements of the feature, and annotate them with `@Deprecated`.\n-   The `since` element of the annotation must be set to the same value as the corresponding `@since`\n-   javadoc tag of the API element.\n-2. Add the following javadoc tag to each of the previously deprecated API elements:<p>\n-   `@deprecated This is a preview feature which may be changed or removed in a future release.`\n-3. Add a new constant to the `com.sun.javafx.PreviewFeature` enumeration, and choose a human-readable name\n-   for the preview feature. This name will be used in warning and error messages when the preview feature\n-   is used by application developers.\n-4. Add runtime checks in appropriate places by invoking `com.sun.javafx.PreviewFeature.<FEATURE>.checkEnabled()`.\n","filename":"PREVIEW-FEATURES.md","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -50,1 +50,0 @@\n-    private static final String SUPPRESS_WARNING_PROPERTY = \"javafx.suppressPreviewBanner\";\n@@ -53,1 +52,0 @@\n-    private static final boolean suppressWarning = Boolean.getBoolean(SUPPRESS_WARNING_PROPERTY);\n@@ -58,3 +56,1 @@\n-     * <p>\n-     * Unless suppressed with the {@code javafx.suppressPreviewBanner=true} system property, this method\n-     * prints a one-time warning to the error output stream for every feature for which it is called.\n+     * This method prints a one-time warning to the error output stream for every feature for which it is called.\n@@ -71,1 +67,1 @@\n-        } else if (!suppressWarning && enabledFeatures.add(this)) {\n+        } else if (enabledFeatures.add(this)) {\n@@ -75,2 +71,1 @@\n-                      This warning can be disabled with the following system property: -D%s=true\n-                \"\"\", VersionInfo.getVersion(), featureName, SUPPRESS_WARNING_PROPERTY);\n+                \"\"\", VersionInfo.getVersion(), featureName);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/PreviewFeature.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import com.sun.javafx.PreviewFeature;\n@@ -30,0 +31,1 @@\n+import com.sun.javafx.util.Utils;\n@@ -63,0 +65,3 @@\n+\n+        \/\/ Initialize the PreviewFeature class to ensure that the corresponding system property is read early.\n+        Utils.forceInit(PreviewFeature.class);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/LauncherImpl.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import com.sun.javafx.PreviewFeature;\n@@ -38,0 +39,1 @@\n+import com.sun.javafx.util.Utils;\n@@ -65,0 +67,3 @@\n+\n+        \/\/ Initialize the PreviewFeature class to ensure that the corresponding system property is read early.\n+        Utils.forceInit(PreviewFeature.class);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformImpl.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}