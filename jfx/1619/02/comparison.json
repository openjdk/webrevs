{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -94,3 +92,1 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final boolean verbose = AccessController.doPrivileged((PrivilegedAction<Boolean>) () ->\n-        Boolean.getBoolean(\"javafx.verbose\"));\n+    private static final boolean verbose = Boolean.getBoolean(\"javafx.verbose\");\n@@ -149,3 +145,1 @@\n-            @SuppressWarnings(\"removal\")\n-            String preloaderByProperty = AccessController.doPrivileged((PrivilegedAction<String>) () ->\n-                    System.getProperty(\"javafx.preloader\"));\n+            String preloaderByProperty = System.getProperty(\"javafx.preloader\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/LauncherImpl.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -42,3 +42,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -108,4 +105,1 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final boolean verbose\n-            = AccessController.doPrivileged((PrivilegedAction<Boolean>) () ->\n-                Boolean.getBoolean(\"javafx.verbose\"));\n+    private static final boolean verbose = Boolean.getBoolean(\"javafx.verbose\");\n@@ -113,4 +107,1 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final boolean DEBUG\n-            = AccessController.doPrivileged((PrivilegedAction<Boolean>) ()\n-                    -> Boolean.getBoolean(\"com.sun.javafx.application.debug\"));\n+    private static final boolean DEBUG = Boolean.getBoolean(\"com.sun.javafx.application.debug\");\n@@ -221,19 +212,39 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            applicationType = System.getProperty(\"com.sun.javafx.application.type\");\n-            if (applicationType == null) applicationType = \"\";\n-\n-            contextual2DNavigation = Boolean.getBoolean(\n-                    \"com.sun.javafx.isContextual2DNavigation\");\n-            String s = System.getProperty(\"com.sun.javafx.twoLevelFocus\");\n-            if (s != null) {\n-                hasTwoLevelFocus = Boolean.valueOf(s);\n-            }\n-            s = System.getProperty(\"com.sun.javafx.virtualKeyboard\");\n-            if (s != null) {\n-                if (s.equalsIgnoreCase(\"none\")) {\n-                    hasVirtualKeyboard = false;\n-                } else if (s.equalsIgnoreCase(\"javafx\")) {\n-                    hasVirtualKeyboard = true;\n-                } else if (s.equalsIgnoreCase(\"native\")) {\n-                    hasVirtualKeyboard = true;\n+        applicationType = System.getProperty(\"com.sun.javafx.application.type\");\n+        if (applicationType == null) applicationType = \"\";\n+\n+        contextual2DNavigation = Boolean.getBoolean(\n+                \"com.sun.javafx.isContextual2DNavigation\");\n+        String s = System.getProperty(\"com.sun.javafx.twoLevelFocus\");\n+        if (s != null) {\n+            hasTwoLevelFocus = Boolean.valueOf(s);\n+        }\n+        s = System.getProperty(\"com.sun.javafx.virtualKeyboard\");\n+        if (s != null) {\n+            if (s.equalsIgnoreCase(\"none\")) {\n+                hasVirtualKeyboard = false;\n+            } else if (s.equalsIgnoreCase(\"javafx\")) {\n+                hasVirtualKeyboard = true;\n+            } else if (s.equalsIgnoreCase(\"native\")) {\n+                hasVirtualKeyboard = true;\n+            }\n+        }\n+        s = System.getProperty(\"com.sun.javafx.touch\");\n+        if (s != null) {\n+            hasTouch = Boolean.valueOf(s);\n+        }\n+        s = System.getProperty(\"com.sun.javafx.multiTouch\");\n+        if (s != null) {\n+            hasMultiTouch = Boolean.valueOf(s);\n+        }\n+        s = System.getProperty(\"com.sun.javafx.pointer\");\n+        if (s != null) {\n+            hasPointer = Boolean.valueOf(s);\n+        }\n+        s = System.getProperty(\"javafx.embed.singleThread\");\n+        if (s != null) {\n+            isThreadMerged = Boolean.valueOf(s);\n+            if (isThreadMerged && !isSupported(ConditionalFeature.SWING)) {\n+                isThreadMerged = false;\n+                if (verbose) {\n+                    System.err.println(\n+                    \"WARNING: javafx.embed.singleThread ignored (javafx.swing module not found)\");\n@@ -242,25 +253,1 @@\n-            s = System.getProperty(\"com.sun.javafx.touch\");\n-            if (s != null) {\n-                hasTouch = Boolean.valueOf(s);\n-            }\n-            s = System.getProperty(\"com.sun.javafx.multiTouch\");\n-            if (s != null) {\n-                hasMultiTouch = Boolean.valueOf(s);\n-            }\n-            s = System.getProperty(\"com.sun.javafx.pointer\");\n-            if (s != null) {\n-                hasPointer = Boolean.valueOf(s);\n-            }\n-            s = System.getProperty(\"javafx.embed.singleThread\");\n-            if (s != null) {\n-                isThreadMerged = Boolean.valueOf(s);\n-                if (isThreadMerged && !isSupported(ConditionalFeature.SWING)) {\n-                    isThreadMerged = false;\n-                    if (verbose) {\n-                        System.err.println(\n-                        \"WARNING: javafx.embed.singleThread ignored (javafx.swing module not found)\");\n-                    }\n-                }\n-            }\n-            return null;\n-        });\n+        }\n@@ -277,5 +264,1 @@\n-            @SuppressWarnings(\"removal\")\n-            var dummy2 = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                System.setProperty(\"glass.taskbarApplication\", \"false\");\n-                return null;\n-            });\n+            System.setProperty(\"glass.taskbarApplication\", \"false\");\n@@ -318,3 +301,1 @@\n-        @SuppressWarnings(\"removal\")\n-        final long eventProc = AccessController.doPrivileged((PrivilegedAction<Long>) () ->\n-                Long.getLong(eventProcProperty, 0));\n+        final long eventProc = Long.getLong(eventProcProperty, 0);\n@@ -379,3 +360,1 @@\n-        @SuppressWarnings(\"removal\")\n-        final StackWalker walker = AccessController.doPrivileged((PrivilegedAction<StackWalker>) () ->\n-                StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE));\n+        final StackWalker walker = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE);\n@@ -459,2 +438,0 @@\n-            @SuppressWarnings(\"removal\")\n-            final AccessControlContext acc = AccessController.getContext();\n@@ -464,5 +441,1 @@\n-                    @SuppressWarnings(\"removal\")\n-                    var dummy = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                        r.run();\n-                        return null;\n-                    }, acc);\n+                    r.run();\n@@ -759,3 +732,1 @@\n-        @SuppressWarnings(\"removal\")\n-        final String userTheme = AccessController.doPrivileged(\n-                (PrivilegedAction<String>) () -> System.getProperty(\"com.sun.javafx.highContrastTheme\"));\n+        final String userTheme = System.getProperty(\"com.sun.javafx.highContrastTheme\");\n@@ -807,3 +778,1 @@\n-        @SuppressWarnings(\"removal\")\n-        final String overrideStylesheetUrl = AccessController.doPrivileged(\n-                (PrivilegedAction<String>) () -> System.getProperty(\"javafx.userAgentStylesheetUrl\"));\n+        final String overrideStylesheetUrl = System.getProperty(\"javafx.userAgentStylesheetUrl\");\n@@ -889,6 +858,1 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction) () -> {\n-            StyleManager.getInstance().setUserAgentStylesheets(uaStylesheets);\n-            return null;\n-        });\n-\n+        StyleManager.getInstance().setUserAgentStylesheets(uaStylesheets);\n@@ -897,1 +861,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -900,5 +863,2 @@\n-            AccessController.doPrivileged((PrivilegedAction) () -> {\n-                StyleManager.getInstance().addUserAgentStylesheet(scene,\n-                        \"com\/sun\/javafx\/scene\/control\/skin\/caspian\/caspian-no-transparency.css\");\n-                return null;\n-            });\n+            StyleManager.getInstance().addUserAgentStylesheet(scene,\n+                    \"com\/sun\/javafx\/scene\/control\/skin\/caspian\/caspian-no-transparency.css\");\n@@ -906,5 +866,2 @@\n-            AccessController.doPrivileged((PrivilegedAction) () -> {\n-                StyleManager.getInstance().addUserAgentStylesheet(scene,\n-                        \"com\/sun\/javafx\/scene\/control\/skin\/modena\/modena-no-transparency.css\");\n-                return null;\n-            });\n+            StyleManager.getInstance().addUserAgentStylesheet(scene,\n+                    \"com\/sun\/javafx\/scene\/control\/skin\/modena\/modena-no-transparency.css\");\n@@ -932,9 +889,4 @@\n-                        @SuppressWarnings(\"removal\")\n-                        var dummy = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                            String s = System.getProperty(\n-                                    \"com.sun.javafx.experimental.embedded.media\",\n-                                    \"false\");\n-                            isMediaSupported = Boolean.valueOf(s);\n-                            return null;\n-\n-                        });\n+                        String s = System.getProperty(\n+                                \"com.sun.javafx.experimental.embedded.media\",\n+                                \"false\");\n+                        isMediaSupported = Boolean.valueOf(s);\n@@ -948,9 +900,4 @@\n-                        @SuppressWarnings(\"removal\")\n-                        var dummy = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                            String s = System.getProperty(\n-                                    \"com.sun.javafx.experimental.embedded.web\",\n-                                    \"false\");\n-                            isWebSupported = Boolean.valueOf(s);\n-                            return null;\n-\n-                        });\n+                        String s = System.getProperty(\n+                                \"com.sun.javafx.experimental.embedded.web\",\n+                                \"false\");\n+                        isWebSupported = Boolean.valueOf(s);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformImpl.java","additions":61,"deletions":114,"binary":false,"changes":175,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-import java.io.FilePermission;\n@@ -72,2 +71,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n@@ -77,5 +74,0 @@\n-import java.security.PermissionCollection;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n-import java.security.ProtectionDomain;\n@@ -92,2 +84,0 @@\n-import java.util.jar.JarEntry;\n-import java.util.jar.JarFile;\n@@ -949,1 +939,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -951,124 +940,0 @@\n-        try {\n-            return loadStylesheetUnPrivileged(fname);\n-        } catch (java.security.AccessControlException ace) {\n-\n-            \/\/ FIXME: JIGSAW -- we no longer are in a jar file, so this code path\n-            \/\/ is obsolete and needs to be redone or eliminated. Fortunately, I\n-            \/\/ don't think it is actually needed.\n-            System.err.println(\"WARNING: security exception trying to load: \" + fname);\n-\n-            \/*\n-            ** we got an access control exception, so\n-            ** we could be running with a security manager.\n-            ** we'll allow the app to read a css file from our runtime jar,\n-            ** and give it one more chance.\n-            *\/\n-\n-            \/*\n-            ** check that there are enough chars after the !\/ to have a valid .css or .bss file name\n-            *\/\n-            if ((fname.length() < 7) && (fname.indexOf(\"!\/\") < fname.length()-7)) {\n-                return null;\n-            }\n-\n-            \/*\n-            **\n-            ** first check that it's actually looking for the same runtime jar\n-            ** that we're running from, and not some other file.\n-            *\/\n-            try {\n-                URI requestedFileUrI = new URI(fname);\n-\n-                \/*\n-                ** is the requested file in a jar\n-                *\/\n-                if (\"jar\".equals(requestedFileUrI.getScheme())) {\n-                    \/*\n-                    ** let's check that the css file is being requested from our\n-                    ** runtime jar\n-                    *\/\n-                    URI styleManagerJarURI = AccessController.doPrivileged((PrivilegedExceptionAction<URI>) () -> StyleManager.class.getProtectionDomain().getCodeSource().getLocation().toURI());\n-\n-                    final String styleManagerJarPath = styleManagerJarURI.getSchemeSpecificPart();\n-                    String requestedFilePath = requestedFileUrI.getSchemeSpecificPart();\n-                    String requestedFileJarPart = requestedFilePath.substring(requestedFilePath.indexOf('\/'), requestedFilePath.indexOf(\"!\/\"));\n-                    \/*\n-                    ** it's the correct jar, check it's a file access\n-                    ** strip off the leading jar\n-                    *\/\n-                    if (styleManagerJarPath.equals(requestedFileJarPart)) {\n-                        \/*\n-                        ** strip off the leading \"jar\",\n-                        ** the css file name is past the last '!'\n-                        *\/\n-                        String requestedFileJarPathNoLeadingSlash = fname.substring(fname.indexOf(\"!\/\")+2);\n-                        \/*\n-                        ** check that it's looking for a css file in the runtime jar\n-                        *\/\n-                        if (fname.endsWith(\".css\") || fname.endsWith(\".bss\")) {\n-                            \/*\n-                            ** set up a read permission for the jar\n-                            *\/\n-                            FilePermission perm = new FilePermission(styleManagerJarPath, \"read\");\n-\n-                            PermissionCollection perms = perm.newPermissionCollection();\n-                            perms.add(perm);\n-                            AccessControlContext permsAcc = new AccessControlContext(\n-                                new ProtectionDomain[] {\n-                                    new ProtectionDomain(null, perms)\n-                                });\n-                            \/*\n-                            ** check that the jar file exists, and that we're allowed to\n-                            ** read it.\n-                            *\/\n-                            JarFile jar = null;\n-                            try {\n-                                jar = AccessController.doPrivileged((PrivilegedExceptionAction<JarFile>) () -> new JarFile(styleManagerJarPath), permsAcc);\n-                            } catch (PrivilegedActionException pae) {\n-                                \/*\n-                                ** we got either a FileNotFoundException or an IOException\n-                                ** in the privileged read. Return the same error as we\n-                                ** would have returned if the css file hadn't of existed.\n-                                *\/\n-                                return null;\n-                            }\n-                            if (jar != null) {\n-                                \/*\n-                                ** check that the file is in the jar\n-                                *\/\n-                                JarEntry entry = jar.getJarEntry(requestedFileJarPathNoLeadingSlash);\n-                                if (entry != null) {\n-                                    \/*\n-                                    ** allow read access to the jar\n-                                    *\/\n-                                    return AccessController.doPrivileged(\n-                                            (PrivilegedAction<Stylesheet>) () -> loadStylesheetUnPrivileged(fname), permsAcc);\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n-                \/*\n-                ** no matter what happen, we return the same error that would\n-                ** be returned if the css file hadn't of existed.\n-                ** That way there in no information leaked.\n-                *\/\n-                return null;\n-            }\n-            \/*\n-            ** no matter what happen, we return the same error that would\n-            ** be returned if the css file hadn't of existed.\n-            ** That way there in no information leaked.\n-            *\/\n-            catch (java.net.URISyntaxException e) {\n-                return null;\n-            }\n-            catch (java.security.PrivilegedActionException e) {\n-                return null;\n-            }\n-       }\n-    }\n-\n-\n-    private static Stylesheet loadStylesheetUnPrivileged(final String fname) {\n-\n@@ -1076,8 +941,5 @@\n-            @SuppressWarnings(\"removal\")\n-            Boolean parse = AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> {\n-\n-                final String bss = System.getProperty(\"binary.css\");\n-                \/\/ binary.css is true by default.\n-                \/\/ parse only if the file is not a .bss\n-                \/\/ and binary.css is set to false\n-                return (!fname.endsWith(\".bss\") && bss != null) ?\n+            final String bss = System.getProperty(\"binary.css\");\n+            \/\/ binary.css is true by default.\n+            \/\/ parse only if the file is not a .bss\n+            \/\/ and binary.css is set to false\n+            Boolean parse = (!fname.endsWith(\".bss\") && bss != null) ?\n@@ -1085,1 +947,0 @@\n-            });\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/StyleManager.java","additions":5,"deletions":144,"binary":false,"changes":149,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -66,5 +64,1 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            NativeLibLoader.loadLibrary(\"javafx_font\");\n-            return null;\n-        });\n+        NativeLibLoader.loadLibrary(\"javafx_font\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/font\/AndroidFontFinder.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -36,5 +34,1 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            NativeLibLoader.loadLibrary(\"javafx_font\");\n-            return null;\n-        });\n+        NativeLibLoader.loadLibrary(\"javafx_font\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/font\/DFontDecoder.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,23 +55,13 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction() {\n-                @Override\n-                public Object run() {\n-                    \/* The thread must be a member of a thread group\n-                     * which will not get GCed before VM exit.\n-                     * Make its parent the top-level thread group.\n-                     *\/\n-                    ThreadGroup tg = Thread.currentThread().getThreadGroup();\n-                    for (ThreadGroup tgn = tg;\n-                         tgn != null;\n-                         tg = tgn, tgn = tg.getParent());\n-                    Thread t =\n-                        new Thread(tg, disposerInstance, \"Prism Font Disposer\");\n-                    t.setContextClassLoader(null);\n-                    t.setDaemon(true);\n-                    t.setPriority(Thread.MAX_PRIORITY);\n-                    t.start();\n-                    return null;\n-                }\n-            }\n-        );\n+        \/* The thread must be a member of a thread group\n+         * which will not get GCed before VM exit.\n+         * Make its parent the top-level thread group.\n+         *\/\n+        for (ThreadGroup tgn = tg;\n+            tgn != null;\n+            tg = tgn, tgn = tg.getParent());\n+\n+        Thread t = new Thread(tg, disposerInstance, \"Prism Font Disposer\");\n+        t.setContextClassLoader(null);\n+        t.setDaemon(true);\n+        t.setPriority(Thread.MAX_PRIORITY);\n+        t.start();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/font\/Disposer.java","additions":14,"deletions":24,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -47,12 +45,6 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged(\n-                (PrivilegedAction<Void>) () -> {\n-                    String dbg = System.getProperty(\"prism.debugfonts\", \"\");\n-                    debugFonts = \"true\".equals(dbg);\n-                    String ufc = System.getProperty(\"prism.useFontConfig\", \"true\");\n-                    useFontConfig = \"true\".equals(ufc);\n-                    String emb = System.getProperty(\"prism.embeddedfonts\", \"\");\n-                    useEmbeddedFontSupport = \"true\".equals(emb);\n-                    return null;\n-                }\n-        );\n+        String dbg = System.getProperty(\"prism.debugfonts\", \"\");\n+        debugFonts = \"true\".equals(dbg);\n+        String ufc = System.getProperty(\"prism.useFontConfig\", \"true\");\n+        useFontConfig = \"true\".equals(ufc);\n+        String emb = System.getProperty(\"prism.embeddedfonts\", \"\");\n+        useEmbeddedFontSupport = \"true\".equals(emb);\n@@ -351,7 +343,1 @@\n-            @SuppressWarnings(\"removal\")\n-            var dummy = AccessController.doPrivileged(\n-                    (PrivilegedAction<Void>) () -> {\n-                        initEmbeddedFonts();\n-                    return null;\n-                    }\n-            );\n+            initEmbeddedFonts();\n@@ -402,1 +388,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -404,3 +389,1 @@\n-            return AccessController.doPrivileged(\n-                    (PrivilegedAction<Boolean>) () -> f.exists()\n-            );\n+            return f.exists();\n@@ -547,18 +530,12 @@\n-            @SuppressWarnings(\"removal\")\n-            var dummy = AccessController.doPrivileged(\n-                    (PrivilegedAction<Void>) () -> {\n-                        try {\n-                            String lFile = fontDir+\"\/allfonts.properties\";\n-                            FileInputStream fis = new FileInputStream(lFile);\n-                            props.load(fis);\n-                            fis.close();\n-                        } catch (IOException ioe) {\n-                            props.clear();\n-                            if (debugFonts) {\n-                                System.err.println(ioe);\n-                                System.err.println(\"Fall back to opening the files\");\n-                            }\n-                        }\n-                        return null;\n-                    }\n-            );\n+            try {\n+                String lFile = fontDir+\"\/allfonts.properties\";\n+                FileInputStream fis = new FileInputStream(lFile);\n+                props.load(fis);\n+                fis.close();\n+            } catch (IOException ioe) {\n+                props.clear();\n+                if (debugFonts) {\n+                    System.err.println(ioe);\n+                    System.err.println(\"Fall back to opening the files\");\n+                }\n+            }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/font\/FontConfigManager.java","additions":21,"deletions":44,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,3 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n@@ -55,1 +52,0 @@\n-     * @throws PrivilegedActionException\n@@ -57,2 +53,1 @@\n-    @SuppressWarnings(\"removal\")\n-    public synchronized boolean openFile() throws PrivilegedActionException {\n+    public synchronized boolean openFile() {\n@@ -62,9 +57,4 @@\n-        raFile = AccessController.doPrivileged(\n-                (PrivilegedAction<RandomAccessFile>) () -> {\n-                    try {\n-                        return new RandomAccessFile(filename, \"r\");\n-                    } catch (FileNotFoundException fnfe) {\n-                        return null;\n-                    }\n-                }\n-        );\n+        try {\n+            raFile = new RandomAccessFile(filename, \"r\");\n+        } catch (FileNotFoundException fnfe) {\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/font\/FontFileReader.java","additions":6,"deletions":16,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,3 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -83,2 +80,1 @@\n-    @SuppressWarnings(\"removal\")\n-    public File openFile() throws PrivilegedActionException {\n+    public File openFile() throws IOException {\n@@ -87,10 +83,6 @@\n-        file = AccessController.doPrivileged(\n-                (PrivilegedExceptionAction<File>) () -> {\n-                    try {\n-                        return Files.createTempFile(\"+JXF\", \".tmp\").toFile();\n-                    } catch (IOException e) {\n-                        \/\/ don't reveal temporary directory location\n-                        throw new IOException(\"Unable to create temporary file\");\n-                    }\n-                }\n-        );\n+        try {\n+            file = Files.createTempFile(\"+JXF\", \".tmp\").toFile();\n+        } catch (IOException e) {\n+            \/\/ don't reveal temporary directory location\n+            throw new IOException(\"Unable to create temporary file\");\n+        }\n@@ -100,3 +92,1 @@\n-        raFile = AccessController.doPrivileged(\n-                (PrivilegedExceptionAction<RandomAccessFile>) () -> new RandomAccessFile(file, \"rw\")\n-        );\n+        raFile = new RandomAccessFile(file, \"rw\");\n@@ -127,1 +117,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -138,6 +127,1 @@\n-                AccessController.doPrivileged(\n-                        (PrivilegedExceptionAction<Void>) () -> {\n-                            file.delete();\n-                            return null;\n-                        }\n-                );\n+                file.delete();\n@@ -345,1 +329,0 @@\n-            @SuppressWarnings(\"removal\")\n@@ -349,9 +332,4 @@\n-                    java.security.AccessController.doPrivileged(\n-                            (java.security.PrivilegedAction) () -> {\n-                                t = new Thread(() -> {\n-                                    runHooks();\n-                                });\n-                                Runtime.getRuntime().addShutdownHook(t);\n-                                return null;\n-                            }\n-                    );\n+                    t = new Thread(() -> {\n+                        runHooks();\n+                    });\n+                    Runtime.getRuntime().addShutdownHook(t);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/font\/FontFileWriter.java","additions":14,"deletions":36,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -39,7 +37,1 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged(\n-                (PrivilegedAction<Void>) () -> {\n-                    NativeLibLoader.loadLibrary(\"javafx_font\");\n-                    return null;\n-                }\n-        );\n+        NativeLibLoader.loadLibrary(\"javafx_font\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/font\/MacFontFinder.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedExceptionAction;\n@@ -94,27 +91,24 @@\n-        @SuppressWarnings(\"removal\")\n-        boolean tmp = AccessController.doPrivileged(\n-                (PrivilegedAction<Boolean>) () -> {\n-                    NativeLibLoader.loadLibrary(\"javafx_font\");\n-                    String dbg = System.getProperty(\"prism.debugfonts\", \"\");\n-                    boolean debug = \"true\".equals(dbg);\n-                    jreFontDir = getJDKFontDir();\n-                    String s = System.getProperty(\"com.sun.javafx.fontSize\");\n-                    systemFontSize = -1f;\n-                    if (s != null) {\n-                        try {\n-                            systemFontSize = Float.parseFloat(s);\n-                        } catch (NumberFormatException nfe) {\n-                            System.err.println(\"Cannot parse font size '\"\n-                                    + s + \"'\");\n-                        }\n-                    }\n-                    s = System.getProperty(\"prism.subpixeltext\", \"on\");\n-                    if (s.indexOf(\"on\") != -1 || s.indexOf(\"true\") != -1) {\n-                        subPixelMode = SUB_PIXEL_ON;\n-                    }\n-                    if (s.indexOf(\"native\") != -1) {\n-                        subPixelMode |= SUB_PIXEL_NATIVE | SUB_PIXEL_ON;\n-                    }\n-                    if (s.indexOf(\"vertical\") != -1) {\n-                        subPixelMode |= SUB_PIXEL_Y | SUB_PIXEL_NATIVE | SUB_PIXEL_ON;\n-                    }\n+        NativeLibLoader.loadLibrary(\"javafx_font\");\n+        String dbg = System.getProperty(\"prism.debugfonts\", \"\");\n+        debugFonts = \"true\".equals(dbg);\n+        jreFontDir = getJDKFontDir();\n+        String s = System.getProperty(\"com.sun.javafx.fontSize\");\n+        systemFontSize = -1f;\n+        if (s != null) {\n+            try {\n+                systemFontSize = Float.parseFloat(s);\n+            } catch (NumberFormatException nfe) {\n+                System.err.println(\"Cannot parse font size '\"\n+                        + s + \"'\");\n+            }\n+        }\n+        s = System.getProperty(\"prism.subpixeltext\", \"on\");\n+        if (s.indexOf(\"on\") != -1 || s.indexOf(\"true\") != -1) {\n+            subPixelMode = SUB_PIXEL_ON;\n+        }\n+        if (s.indexOf(\"native\") != -1) {\n+            subPixelMode |= SUB_PIXEL_NATIVE | SUB_PIXEL_ON;\n+        }\n+        if (s.indexOf(\"vertical\") != -1) {\n+            subPixelMode |= SUB_PIXEL_Y | SUB_PIXEL_NATIVE | SUB_PIXEL_ON;\n+        }\n@@ -122,11 +116,11 @@\n-                    s = System.getProperty(\"prism.fontSizeLimit\");\n-                    if (s != null) {\n-                        try {\n-                            fontSizeLimit = Float.parseFloat(s);\n-                            if (fontSizeLimit <= 0) {\n-                                fontSizeLimit = Float.POSITIVE_INFINITY;\n-                            }\n-                        } catch (NumberFormatException nfe) {\n-                            System.err.println(\"Cannot parse fontSizeLimit '\" + s + \"'\");\n-                        }\n-                    }\n+        s = System.getProperty(\"prism.fontSizeLimit\");\n+        if (s != null) {\n+            try {\n+                fontSizeLimit = Float.parseFloat(s);\n+                if (fontSizeLimit <= 0) {\n+                    fontSizeLimit = Float.POSITIVE_INFINITY;\n+                }\n+            } catch (NumberFormatException nfe) {\n+                System.err.println(\"Cannot parse fontSizeLimit '\" + s + \"'\");\n+            }\n+        }\n@@ -134,17 +128,4 @@\n-                    boolean lcdTextOff = isMacOSX || isIOS || isAndroid || isEmbedded;\n-                    String defLCDProp = lcdTextOff ? \"false\" : \"true\";\n-                    String lcdProp = System.getProperty(\"prism.lcdtext\", defLCDProp);\n-                    lcdEnabled = lcdProp.equals(\"true\");\n-\n-                    s = System.getProperty(\"prism.cacheLayoutSize\");\n-                    if (s != null) {\n-                        try {\n-                            tempCacheLayoutSize[0] = Integer.parseInt(s);\n-                            if (tempCacheLayoutSize[0] < 0) {\n-                                tempCacheLayoutSize[0] = 0;\n-                            }\n-                        } catch (NumberFormatException nfe) {\n-                            System.err.println(\"Cannot parse cache layout size '\"\n-                                    + s + \"'\");\n-                        }\n-                    }\n+        boolean lcdTextOff = isMacOSX || isIOS || isAndroid || isEmbedded;\n+        String defLCDProp = lcdTextOff ? \"false\" : \"true\";\n+        String lcdProp = System.getProperty(\"prism.lcdtext\", defLCDProp);\n+        lcdEnabled = lcdProp.equals(\"true\");\n@@ -152,1 +133,6 @@\n-                    return debug;\n+        s = System.getProperty(\"prism.cacheLayoutSize\");\n+        if (s != null) {\n+            try {\n+                tempCacheLayoutSize[0] = Integer.parseInt(s);\n+                if (tempCacheLayoutSize[0] < 0) {\n+                    tempCacheLayoutSize[0] = 0;\n@@ -154,2 +140,6 @@\n-        );\n-        debugFonts = tmp;\n+            } catch (NumberFormatException nfe) {\n+                System.err.println(\"Cannot parse cache layout size '\"\n+                        + s + \"'\");\n+            }\n+        }\n+\n@@ -1166,14 +1156,8 @@\n-        @SuppressWarnings(\"removal\")\n-        String path = AccessController.doPrivileged(\n-            new PrivilegedAction<String>() {\n-                @Override\n-                public String run() {\n-                    File f = new File(sysFontDir+\"\\\\\"+filename);\n-                    if (f.exists()) {\n-                        return f.getAbsolutePath();\n-                    }\n-                    else {\n-                        return userFontDir+\"\\\\\"+filename;\n-                    }\n-                }\n-            });\n+        String path;\n+        f = new File(sysFontDir+\"\\\\\"+filename);\n+        if (f.exists()) {\n+            path = f.getAbsolutePath();\n+        }\n+        else {\n+            path = userFontDir+\"\\\\\"+filename;\n+        }\n@@ -1181,3 +1165,3 @@\n-            if (path != null) {\n-                return path;\n-            }\n+        if (path != null) {\n+            return path;\n+        }\n@@ -1366,16 +1350,11 @@\n-            @SuppressWarnings(\"removal\")\n-            var dummy = java.security.AccessController.doPrivileged(\n-                    (PrivilegedAction<Object>) () -> {\n-                        \/* The thread must be a member of a thread group\n-                         * which will not get GCed before VM exit.\n-                         * Make its parent the top-level thread group.\n-                         *\/\n-                        ThreadGroup tg = Thread.currentThread().getThreadGroup();\n-                        for (ThreadGroup tgn = tg;\n-                             tgn != null; tg = tgn, tgn = tg.getParent());\n-                        fileCloser = new Thread(tg, fileCloserRunnable);\n-                        fileCloser.setContextClassLoader(null);\n-                        Runtime.getRuntime().addShutdownHook(fileCloser);\n-                        return null;\n-                    }\n-            );\n+\n+            \/* The thread must be a member of a thread group\n+             * which will not get GCed before VM exit.\n+             * Make its parent the top-level thread group.\n+             *\/\n+            ThreadGroup tg = Thread.currentThread().getThreadGroup();\n+            for (ThreadGroup tgn = tg;\n+                    tgn != null; tg = tgn, tgn = tg.getParent());\n+            fileCloser = new Thread(tg, fileCloserRunnable);\n+            fileCloser.setContextClassLoader(null);\n+            Runtime.getRuntime().addShutdownHook(fileCloser);\n@@ -1847,5 +1826,1 @@\n-            @SuppressWarnings(\"removal\")\n-            String[] tmp = AccessController.doPrivileged(\n-                    (PrivilegedExceptionAction<String[]>) () -> dir.list(TTFilter.getInstance())\n-            );\n-            files = tmp;\n+            files = dir.list(TTFilter.getInstance());\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/font\/PrismFontFactory.java","additions":75,"deletions":100,"binary":false,"changes":175,"status":"modified"},{"patch":"@@ -32,2 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -117,1 +115,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -120,26 +117,24 @@\n-            AccessController.doPrivileged(\n-                    (PrivilegedAction<Void>) () -> {\n-                        try {\n-                            \/* Although there is likely no harm in calling\n-                             * delete on a file > once, we want to refrain\n-                             * from deleting it until the shutdown hook\n-                             * code in subclasses has had an opportunity\n-                             * to clean up native accesses on the resource.\n-                             *\/\n-                            if (decFileRefCount() > 0) {\n-                                return null;\n-                            }\n-                            boolean delOK = (new File(filename)).delete();\n-                            if (!delOK && PrismFontFactory.debugFonts) {\n-                                 System.err.println(\"Temp file not deleted : \"\n-                                                    + filename);\n-                            }\n-                            \/* Embedded fonts (copy) can also be decoded.\n-                             * Set both flags to false to avoid double deletes.\n-                             *\/\n-                            isCopy = isDecoded = false;\n-                        } catch (Exception e) {\n-                        }\n-                        return null;\n-                    }\n-            );\n+            try {\n+                \/* Although there is likely no harm in calling\n+                 * delete on a file > once, we want to refrain\n+                 * from deleting it until the shutdown hook\n+                 * code in subclasses has had an opportunity\n+                 * to clean up native accesses on the resource.\n+                 *\/\n+                if (decFileRefCount() > 0) {\n+                    return;\n+                }\n+                boolean delOK = (new File(filename)).delete();\n+                if (!delOK && PrismFontFactory.debugFonts) {\n+                        System.err.println(\"Temp file not deleted : \"\n+                                        + filename);\n+                }\n+                \/* Embedded fonts (copy) can also be decoded.\n+                    * Set both flags to false to avoid double deletes.\n+                    *\/\n+                isCopy = isDecoded = false;\n+            } catch (Exception e) {\n+            }\n+\n+            \/\/ TODO: In case of failure this will print \"temp file not deleted\" and then\n+            \/\/ \"temp file deleted\" right after, might be worth ironing out.\n@@ -223,1 +218,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -226,34 +220,21 @@\n-                AccessController.doPrivileged(\n-                        (PrivilegedAction<Void>) () -> {\n-                            try {\n-                                if (refCounter != null &&\n-                                    refCounter.decrement() > 0)\n-                                {\n-                                    return null;\n-                                }\n-                                File file = new File(fileName);\n-                                int size = (int)file.length();\n-                                file.delete();\n-                                \/\/ decrement tracker only after\n-                                \/\/ successful deletion.\n-                                if (isTracked) {\n-                                    FontFileWriter.FontTracker.\n-                                        getTracker().subBytes(size);\n-                                }\n-                                if (factory != null && refKey != null) {\n-                                    Object o = refKey.get();\n-                                    if (o == null) {\n-                                        factory.removeTmpFont(refKey);\n-                                        factory = null;\n-                                        refKey = null;\n-                                    }\n-                                }\n-                                if (PrismFontFactory.debugFonts) {\n-                                    System.err.println(\"FileDisposer=\" + fileName);\n-                                }\n-                            } catch (Exception e) {\n-                                if (PrismFontFactory.debugFonts) {\n-                                    e.printStackTrace();\n-                                }\n-                            }\n-                            return null;\n+                try {\n+                    if (refCounter != null &&\n+                        refCounter.decrement() > 0)\n+                    {\n+                        return;\n+                    }\n+                    File file = new File(fileName);\n+                    int size = (int)file.length();\n+                    file.delete();\n+                    \/\/ decrement tracker only after\n+                    \/\/ successful deletion.\n+                    if (isTracked) {\n+                        FontFileWriter.FontTracker.\n+                            getTracker().subBytes(size);\n+                    }\n+                    if (factory != null && refKey != null) {\n+                        Object o = refKey.get();\n+                        if (o == null) {\n+                            factory.removeTmpFont(refKey);\n+                            factory = null;\n+                            refKey = null;\n@@ -261,1 +242,10 @@\n-                );\n+                    }\n+                    if (PrismFontFactory.debugFonts) {\n+                        System.err.println(\"FileDisposer=\" + fileName);\n+                    }\n+                } catch (Exception e) {\n+                    if (PrismFontFactory.debugFonts) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/font\/PrismFontFile.java","additions":55,"deletions":65,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -37,5 +35,1 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            NativeLibLoader.loadLibrary(\"javafx_font\");\n-            return null;\n-        });\n+        NativeLibLoader.loadLibrary(\"javafx_font\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/font\/coretext\/OS.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -36,5 +33,1 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            NativeLibLoader.loadLibrary(\"javafx_font\");\n-            return null;\n-        });\n+        NativeLibLoader.loadLibrary(\"javafx_font\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/font\/directwrite\/OS.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -36,5 +34,1 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            NativeLibLoader.loadLibrary(\"javafx_font_freetype\");\n-            return null;\n-        });\n+        NativeLibLoader.loadLibrary(\"javafx_font_freetype\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/font\/freetype\/OSFreetype.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -35,5 +33,1 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            NativeLibLoader.loadLibrary(\"javafx_font_pango\");\n-            return null;\n-        });\n+        NativeLibLoader.loadLibrary(\"javafx_font_pango\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/font\/freetype\/OSPango.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -112,5 +110,1 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n-            NativeLibLoader.loadLibrary(\"nativeiio\");\n-            return null;\n-        });\n+        NativeLibLoader.loadLibrary(\"nativeiio\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/ios\/IosImageLoader.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,2 +37,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -106,5 +104,2 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n-            NativeLibLoader.loadLibrary(\"javafx_iio\");\n-            return null;\n-        });\n+        NativeLibLoader.loadLibrary(\"javafx_iio\");\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/jpeg\/JPEGImageLoader.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -38,1 +36,1 @@\n-    private static final boolean verbose;\n+    private static final boolean verbose = Boolean.getBoolean(\"javafx.verbose\");\n@@ -41,5 +39,0 @@\n-        @SuppressWarnings(\"removal\")\n-        boolean tmp = AccessController.doPrivileged((PrivilegedAction<Boolean>) () ->\n-                Boolean.getBoolean(\"javafx.verbose\"));\n-        verbose = tmp;\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/util\/ModuleHelper.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import static com.sun.javafx.FXPermissions.ACCESS_WINDOW_LIST_PERMISSION;\n-\n@@ -48,2 +46,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -685,5 +681,1 @@\n-        @SuppressWarnings(\"removal\")\n-        final List<Window> allWindows = AccessController.doPrivileged(\n-                (PrivilegedAction<List<Window>>) () -> Window.getWindows(),\n-                null,\n-                ACCESS_WINDOW_LIST_PERMISSION);\n+        final List<Window> allWindows = Window.getWindows();\n@@ -998,1 +990,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1000,2 +991,1 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            String libName = \"prism_common\";\n+        String libName = \"prism_common\";\n@@ -1003,9 +993,7 @@\n-            if (PrismSettings.verbose) {\n-                System.out.println(\"Loading Prism common native library ...\");\n-            }\n-            NativeLibLoader.loadLibrary(libName);\n-            if (PrismSettings.verbose) {\n-                System.out.println(\"\\tsucceeded.\");\n-            }\n-            return null;\n-        });\n+        if (PrismSettings.verbose) {\n+            System.out.println(\"Loading Prism common native library ...\");\n+        }\n+        NativeLibLoader.loadLibrary(libName);\n+        if (PrismSettings.verbose) {\n+            System.out.println(\"\\tsucceeded.\");\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/util\/Utils.java","additions":9,"deletions":21,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.security.AccessController;\n@@ -35,1 +34,0 @@\n-import java.security.PrivilegedAction;\n@@ -77,6 +75,2 @@\n-        @SuppressWarnings(\"removal\")\n-        final String refType = AccessController.doPrivileged(\n-            (PrivilegedAction<String>) () -> {\n-                String value = System.getProperty(\"prism.marlin.useRef\");\n-                return (value == null) ? \"soft\" : value;\n-            });\n+        String value = System.getProperty(\"prism.marlin.useRef\");\n+        final String refType = (value == null) ? \"soft\" : value;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/DMarlinRenderingEngine.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.security.AccessController;\n@@ -30,1 +29,0 @@\n-import java.security.PrivilegedAction;\n@@ -271,1 +269,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -273,5 +270,2 @@\n-        return AccessController.doPrivileged(\n-            (PrivilegedAction<String>) () -> {\n-                String value = System.getProperty(key);\n-                return (value == null) ? def : value;\n-            });\n+        String value = System.getProperty(key);\n+        return (value == null) ? def : value;\n@@ -280,1 +274,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -282,5 +275,2 @@\n-        return Boolean.valueOf(AccessController.doPrivileged(\n-            (PrivilegedAction<String>) () -> {\n-                String value = System.getProperty(key);\n-                return (value == null) ? def : value;\n-            }));\n+        String value = System.getProperty(key);\n+        return Boolean.valueOf((value == null) ? def : value);\n@@ -292,3 +282,1 @@\n-        @SuppressWarnings(\"removal\")\n-        final String property = AccessController.doPrivileged(\n-                    (PrivilegedAction<String>) () -> System.getProperty(key));\n+        final String property = System.getProperty(key);\n@@ -323,3 +311,1 @@\n-        @SuppressWarnings(\"removal\")\n-        final String property = AccessController.doPrivileged(\n-                    (PrivilegedAction<String>) () -> System.getProperty(key));\n+        final String property = System.getProperty(key);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/MarlinProperties.java","additions":7,"deletions":21,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -48,16 +46,7 @@\n-        @SuppressWarnings(\"removal\")\n-        Unsafe tmp = AccessController.doPrivileged(new PrivilegedAction<Unsafe>() {\n-            @Override\n-            public Unsafe run() {\n-                Unsafe ref = null;\n-                try {\n-                    final Field field = Unsafe.class.getDeclaredField(\"theUnsafe\");\n-                    field.setAccessible(true);\n-                    ref = (Unsafe) field.get(null);\n-                } catch (Exception e) {\n-                    throw new InternalError(\"Unable to get sun.misc.Unsafe instance\", e);\n-                }\n-                return ref;\n-            }\n-        });\n-        UNSAFE = tmp;\n+        try {\n+            final Field field = Unsafe.class.getDeclaredField(\"theUnsafe\");\n+            field.setAccessible(true);\n+            UNSAFE = (Unsafe) field.get(null);\n+        } catch (Exception e) {\n+            throw new InternalError(\"Unable to get sun.misc.Unsafe instance\", e);\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/OffHeapArray.java","additions":7,"deletions":18,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -359,1 +357,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -361,23 +358,6 @@\n-            AccessController.doPrivileged(\n-                (PrivilegedAction<Void>) () -> {\n-                    final Thread hook = new Thread(\n-                        MarlinUtils.getRootThreadGroup(),\n-                        new Runnable() {\n-                            @Override\n-                            public void run() {\n-                                dump();\n-                            }\n-                        },\n-                        \"MarlinStatsHook\"\n-                    );\n-                    hook.setContextClassLoader(null);\n-                    Runtime.getRuntime().addShutdownHook(hook);\n-\n-                    if (USE_DUMP_THREAD) {\n-                        final Timer statTimer = new Timer(\"RendererStats\");\n-                        statTimer.scheduleAtFixedRate(new TimerTask() {\n-                            @Override\n-                            public void run() {\n-                                dump();\n-                            }\n-                        }, DUMP_INTERVAL, DUMP_INTERVAL);\n+            final Thread hook = new Thread(\n+                MarlinUtils.getRootThreadGroup(),\n+                new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        dump();\n@@ -385,2 +365,2 @@\n-                    return null;\n-                }\n+                },\n+                \"MarlinStatsHook\"\n@@ -388,0 +368,12 @@\n+            hook.setContextClassLoader(null);\n+            Runtime.getRuntime().addShutdownHook(hook);\n+\n+            if (USE_DUMP_THREAD) {\n+                final Timer statTimer = new Timer(\"RendererStats\");\n+                statTimer.scheduleAtFixedRate(new TimerTask() {\n+                    @Override\n+                    public void run() {\n+                        dump();\n+                    }\n+                }, DUMP_INTERVAL, DUMP_INTERVAL);\n+            }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/RendererStats.java","additions":20,"deletions":28,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -48,13 +46,8 @@\n-\n-        @SuppressWarnings(\"removal\")\n-        boolean tmp = AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> {\n-            if (PrismSettings.verbose) {\n-                System.out.println(\"Loading D3D native library ...\");\n-            }\n-            NativeLibLoader.loadLibrary(\"prism_d3d\");\n-            if (PrismSettings.verbose) {\n-                System.out.println(\"\\tsucceeded.\");\n-            }\n-            return Boolean.valueOf(nInit(PrismSettings.class, true));\n-        });\n-        d3dEnabled = tmp;\n+        if (PrismSettings.verbose) {\n+            System.out.println(\"Loading D3D native library ...\");\n+        }\n+        NativeLibLoader.loadLibrary(\"prism_d3d\");\n+        if (PrismSettings.verbose) {\n+            System.out.println(\"\\tsucceeded.\");\n+        }\n+        d3dEnabled = nInit(PrismSettings.class, true);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/d3d\/D3DPipeline.java","additions":9,"deletions":16,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -36,2 +36,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -455,5 +453,1 @@\n-            @SuppressWarnings(\"removal\")\n-            InputStream stream = AccessController.doPrivileged(\n-                    (PrivilegedAction<InputStream>) () -> D3DResourceFactory.class.\n-                           getResourceAsStream(\"hlsl\/\" + name + \".obj\")\n-            );\n+            InputStream stream = D3DResourceFactory.class.getResourceAsStream(\"hlsl\/\" + name + \".obj\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/d3d\/D3DResourceFactory.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -51,3 +49,1 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            String libName = \"prism_es2\";\n+        String libName = \"prism_es2\";\n@@ -55,14 +51,12 @@\n-            String eglType = PlatformUtil.getEmbeddedType();\n-            if (\"monocle\".equals(eglType)) {\n-                isEglfb = true;\n-                libName = \"prism_es2_monocle\";\n-            }\n-            if (PrismSettings.verbose) {\n-                System.out.println(\"Loading ES2 native library ... \" + libName);\n-            }\n-            NativeLibLoader.loadLibrary(libName);\n-            if (PrismSettings.verbose) {\n-                System.out.println(\"\\tsucceeded.\");\n-            }\n-            return null;\n-        });\n+        String eglType = PlatformUtil.getEmbeddedType();\n+        if (\"monocle\".equals(eglType)) {\n+            isEglfb = true;\n+            libName = \"prism_es2_monocle\";\n+        }\n+        if (PrismSettings.verbose) {\n+            System.out.println(\"Loading ES2 native library ... \" + libName);\n+        }\n+        NativeLibLoader.loadLibrary(libName);\n+        if (PrismSettings.verbose) {\n+            System.out.println(\"\\tsucceeded.\");\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/ES2Pipeline.java","additions":14,"deletions":20,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -85,11 +83,0 @@\n-        @SuppressWarnings(\"removal\")\n-        GLFactory tmp = factoryClassName == null ? null :\n-            AccessController.doPrivileged(new FactoryLoader(factoryClassName));\n-        platformFactory = tmp;\n-    }\n-\n-    private static class FactoryLoader implements PrivilegedAction<GLFactory> {\n-        private final String factoryClassName;\n-        FactoryLoader(String factoryClassName) {\n-            this.factoryClassName = factoryClassName;\n-        }\n@@ -97,13 +84,10 @@\n-        @Override\n-        public GLFactory run() {\n-            GLFactory factory = null;\n-            try {\n-                factory = (GLFactory) Class.forName(factoryClassName).getDeclaredConstructor().newInstance();\n-            } catch (Throwable t) {\n-                System.err.println(\"GLFactory.static - Platform: \"\n-                        + System.getProperty(\"os.name\")\n-                        + \" - not available: \"\n-                        + factoryClassName);\n-                t.printStackTrace();\n-            }\n-            return factory;\n+        GLFactory factory = null;\n+        try {\n+            factory = (factoryClassName == null) ? null :\n+                (GLFactory)Class.forName(factoryClassName).getDeclaredConstructor().newInstance();\n+        } catch (Throwable t) {\n+            System.err.println(\"GLFactory.static - Platform: \"\n+                    + System.getProperty(\"os.name\")\n+                    + \" - not available: \"\n+                    + factoryClassName);\n+            t.printStackTrace();\n@@ -111,0 +95,1 @@\n+        platformFactory = factory;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/GLFactory.java","additions":12,"deletions":27,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -36,11 +34,2 @@\n-    private static int defaultDepthSize;\n-    private static int defaultBufferSize;\n-\n-    static {\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-           defaultDepthSize = Integer.getInteger(\"prism.glDepthSize\", 24);\n-           defaultBufferSize = Integer.getInteger(\"prism.glBufferSize\", 32);\n-            return null;\n-        });\n-    }\n+    final private static int defaultDepthSize = Integer.getInteger(\"prism.glDepthSize\", 24);\n+    final private static int defaultBufferSize = Integer.getInteger(\"prism.glBufferSize\", 32);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/GLPixelFormat.java","additions":3,"deletions":14,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -35,3 +33,1 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final boolean transparentFramebuffer =\n-            AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> Boolean.getBoolean(\"com.sun.javafx.transparentFramebuffer\"));\n+    private static final boolean transparentFramebuffer = Boolean.getBoolean(\"com.sun.javafx.transparentFramebuffer\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/MonocleGLDrawable.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedExceptionAction;\n@@ -60,1 +58,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -65,2 +62,1 @@\n-                    byteOrderClass = (Class) AccessController.doPrivileged(\n-                            (PrivilegedExceptionAction) () -> Class.forName(\"java.nio.ByteOrder\", true, null));\n+                    byteOrderClass = Class.forName(\"java.nio.ByteOrder\", true, null);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/impl\/BufferUtil.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -115,4 +113,1 @@\n-        @SuppressWarnings(\"removal\")\n-        final Properties systemProperties =\n-                (Properties) AccessController.doPrivileged(\n-                        (PrivilegedAction) () -> System.getProperties());\n+        final Properties systemProperties = System.getProperties();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/impl\/PrismSettings.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -537,2 +535,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String v = (String) AccessController.doPrivileged((PrivilegedAction) () -> System.getProperty(\"prism.primshaderpad\"));\n+        String v = System.getProperty(\"prism.primshaderpad\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/impl\/ps\/BaseShaderGraphics.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -135,1 +133,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -137,16 +134,13 @@\n-\n-        AccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n-            InputStream stream = null;\n-            try {\n-                File file = new File(fr.getFileName());\n-                stream = new FileInputStream(file);\n-                Font font = Font.createFont(Font.TRUETYPE_FONT, stream);\n-                fr.setPeer(font);\n-            } catch (Exception e) {\n-                e.printStackTrace();\n-            } finally {\n-                if (stream != null) {\n-                    try {\n-                        stream.close();\n-                    } catch (Exception e2) {\n-                    }\n+        InputStream stream = null;\n+        try {\n+            File file = new File(fr.getFileName());\n+            stream = new FileInputStream(file);\n+            Font font = Font.createFont(Font.TRUETYPE_FONT, stream);\n+            fr.setPeer(font);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        } finally {\n+            if (stream != null) {\n+                try {\n+                    stream.close();\n+                } catch (Exception e2) {\n@@ -155,2 +149,1 @@\n-            return null;\n-        });\n+        }\n@@ -179,14 +172,7 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged(new PrivilegedAction<Object>() {\n-            @Override\n-            public Object run() {\n-                try {\n-                    File file = new File(fr.getFileName());\n-                    Font font = Font.createFont(Font.TRUETYPE_FONT, file);\n-                    fr.setPeer(font);\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n-                }\n-                return null;\n-            }\n-        });\n+        try {\n+            File file = new File(fr.getFileName());\n+            Font font = Font.createFont(Font.TRUETYPE_FONT, file);\n+            fr.setPeer(font);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n@@ -211,29 +197,23 @@\n-                @SuppressWarnings(\"removal\")\n-                var dummy = AccessController.doPrivileged(\n-                        (PrivilegedAction<Void>) () -> {\n-                            compositeFontMethodsInitialized = true;\n-                            Class<?> fontMgrCls;\n-                            try {\n-                                \/\/ JDK7\n-                                fontMgrCls = Class.forName(\n-                                        \"sun.font.FontUtilities\", true, null);\n-                            } catch (ClassNotFoundException cnfe) {\n-                                try {\n-                                    \/\/ JDK5\/6\n-                                    fontMgrCls = Class.forName(\n-                                       \"sun.font.FontManager\", true, null);\n-                                } catch (ClassNotFoundException cnfe2) {\n-                                    return null;\n-                                }\n-                            }\n-\n-                            try {\n-                                getCompositeFontUIResource =\n-                                    fontMgrCls.getMethod(\n-                                    \"getCompositeFontUIResource\",\n-                                    Font.class);\n-                            } catch (NoSuchMethodException nsme) {\n-                            }\n-                            return null;\n-                        }\n-                );\n+                compositeFontMethodsInitialized = true;\n+                Class<?> fontMgrCls;\n+                try {\n+                    \/\/ JDK7\n+                    fontMgrCls = Class.forName(\n+                            \"sun.font.FontUtilities\", true, null);\n+                } catch (ClassNotFoundException cnfe) {\n+                    try {\n+                        \/\/ JDK5\/6\n+                        fontMgrCls = Class.forName(\n+                            \"sun.font.FontManager\", true, null);\n+                    } catch (ClassNotFoundException cnfe2) {\n+                        return null;\n+                    }\n+                }\n+\n+                try {\n+                    getCompositeFontUIResource =\n+                        fontMgrCls.getMethod(\n+                        \"getCompositeFontUIResource\",\n+                        Font.class);\n+                } catch (NoSuchMethodException nsme) {\n+                }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/j2d\/J2DFontFactory.java","additions":45,"deletions":65,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,2 +92,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -98,3 +96,1 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            String libName = \"prism_common\";\n+        String libName = \"prism_common\";\n@@ -102,9 +98,7 @@\n-            if (PrismSettings.verbose) {\n-                System.out.println(\"Loading Prism common native library ...\");\n-            }\n-            NativeLibLoader.loadLibrary(libName);\n-            if (PrismSettings.verbose) {\n-                System.out.println(\"\\tsucceeded.\");\n-            }\n-            return null;\n-        });\n+        if (PrismSettings.verbose) {\n+            System.out.println(\"Loading Prism common native library ...\");\n+        }\n+        NativeLibLoader.loadLibrary(libName);\n+        if (PrismSettings.verbose) {\n+            System.out.println(\"\\tsucceeded.\");\n+        }\n@@ -123,1 +117,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -125,17 +118,5 @@\n-        return AccessController.doPrivileged(\n-            (PrivilegedAction<PrintRequestAttribute>) () -> {\n-\n-            PrintRequestAttribute alwaysOnTop = null;\n-            try {\n-                if (onTopClass == null) {\n-                    onTopClass =\n-                        Class.forName(\"javax.print.attribute.standard.DialogOwner\");\n-                }\n-                if (id == 0) {\n-                    Constructor<PrintRequestAttribute>\n-                         cons = onTopClass.getConstructor();\n-                    alwaysOnTop = cons.newInstance();\n-                } else {\n-                    alwaysOnTop = getAlwaysOnTop(onTopClass, id);\n-                }\n-            } catch (Throwable t) {\n+        PrintRequestAttribute alwaysOnTop = null;\n+        try {\n+            if (onTopClass == null) {\n+                onTopClass =\n+                    Class.forName(\"javax.print.attribute.standard.DialogOwner\");\n@@ -143,2 +124,10 @@\n-            return alwaysOnTop;\n-        });\n+            if (id == 0) {\n+                Constructor<PrintRequestAttribute>\n+                        cons = onTopClass.getConstructor();\n+                alwaysOnTop = cons.newInstance();\n+            } else {\n+                alwaysOnTop = getAlwaysOnTop(onTopClass, id);\n+            }\n+        } catch (Throwable t) {\n+        }\n+        return alwaysOnTop;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/j2d\/print\/J2DPrinterJob.java","additions":24,"deletions":35,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -41,5 +39,1 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n-            NativeLibLoader.loadLibrary(\"prism_sw\");\n-            return null;\n-        });\n+        NativeLibLoader.loadLibrary(\"prism_sw\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/sw\/SWPipeline.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -50,14 +48,11 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction) () -> {\n-            if (System.getProperty(\"decora.showleaks\") != null) {\n-                alldatas = new HashSet<>();\n-                Runtime.getRuntime().addShutdownHook(new Thread() {\n-                    @Override\n-                    public void run() {\n-                        Iterator<ImageData> datas = alldatas.iterator();\n-                        while (datas.hasNext()) {\n-                            ImageData id = datas.next();\n-                            Rectangle r = id.getUntransformedBounds();\n-                            System.out.println(\"id[\"+r.width+\"x\"+r.height+\", refcount=\"+id.refcount+\"] leaked from:\");\n-                            id.fromwhere.printStackTrace(System.out);\n-                        }\n+        if (System.getProperty(\"decora.showleaks\") != null) {\n+            alldatas = new HashSet<>();\n+            Runtime.getRuntime().addShutdownHook(new Thread() {\n+                @Override\n+                public void run() {\n+                    Iterator<ImageData> datas = alldatas.iterator();\n+                    while (datas.hasNext()) {\n+                        ImageData id = datas.next();\n+                        Rectangle r = id.getUntransformedBounds();\n+                        System.out.println(\"id[\"+r.width+\"x\"+r.height+\", refcount=\"+id.refcount+\"] leaked from:\");\n+                        id.fromwhere.printStackTrace(System.out);\n@@ -65,4 +60,3 @@\n-                });\n-            }\n-            return null;\n-        });\n+                }\n+            });\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/scenario\/effect\/ImageData.java","additions":15,"deletions":21,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedExceptionAction;\n@@ -60,1 +58,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -65,2 +62,1 @@\n-                    byteOrderClass = (Class) AccessController.doPrivileged(\n-                            (PrivilegedExceptionAction) () -> Class.forName(\"java.nio.ByteOrder\", true, null));\n+                    byteOrderClass = Class.forName(\"java.nio.ByteOrder\", true, null);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/scenario\/effect\/impl\/BufferUtil.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -51,11 +49,7 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction) () -> {\n-            if (System.getProperty(\"decora.showstats\") != null) {\n-                Runtime.getRuntime().addShutdownHook(new Thread() {\n-                    @Override public void run() {\n-                        printStats();\n-                    }\n-                });\n-            }\n-            return null;\n-        });\n+        if (System.getProperty(\"decora.showstats\") != null) {\n+            Runtime.getRuntime().addShutdownHook(new Thread() {\n+                @Override public void run() {\n+                    printStats();\n+                }\n+            });\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/scenario\/effect\/impl\/ImagePool.java","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -95,3 +93,1 @@\n-    @SuppressWarnings(\"removal\")\n-    protected static final boolean verbose = AccessController.doPrivileged(\n-            (PrivilegedAction<Boolean>) () -> Boolean.getBoolean(\"decora.verbose\"));\n+    protected static final boolean verbose = Boolean.getBoolean(\"decora.verbose\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/scenario\/effect\/impl\/Renderer.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -182,1 +180,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -184,33 +181,31 @@\n-        return AccessController.doPrivileged((PrivilegedAction<Renderer>) () -> {\n-            Renderer r = null;\n-            \/\/ Class.getSimpleName is not available on CDC\n-            String klassName = fctx.getClass().getName();\n-            String simpleName = klassName.substring(klassName.lastIndexOf(\".\") + 1);\n-\n-            if (simpleName.equals(\"PrFilterContext\") && tryPrism) {\n-                r = createPrismRenderer(fctx);\n-            }\n-            \/\/ check to see whether one of the hardware accelerated\n-            \/\/ Java 2D pipelines is in use and exposes the necessary\n-            \/\/ \"resource sharing layer\" APIs (only in Sun's JDK 6u10 and above)\n-            if (r == null && tryRSL && isRSLAvailable(fctx)) {\n-                \/\/ try locating an RSLRenderer (need to use reflection in case\n-                \/\/ certain RSL backend classes are not available;\n-                \/\/ this step will trigger lazy downloading of impl jars\n-                \/\/ via JNLP, if not already available)\n-                r = createRSLRenderer(fctx);\n-            }\n-            if (r == null && tryJOGL) {\n-                \/\/ next try the JOGL renderer\n-                r = createJOGLRenderer(fctx);\n-            }\n-            if (r == null && trySIMD) {\n-                \/\/ next try the SSE renderer\n-                r = getSSERenderer();\n-            }\n-            if (r == null) {\n-                \/\/ otherwise, fall back on the Java\/CPU renderer\n-                r = getJavaRenderer(fctx);\n-            }\n-            return r;\n-        });\n+        Renderer r = null;\n+        \/\/ Class.getSimpleName is not available on CDC\n+        String klassName = fctx.getClass().getName();\n+        String simpleName = klassName.substring(klassName.lastIndexOf(\".\") + 1);\n+\n+        if (simpleName.equals(\"PrFilterContext\") && tryPrism) {\n+            r = createPrismRenderer(fctx);\n+        }\n+        \/\/ check to see whether one of the hardware accelerated\n+        \/\/ Java 2D pipelines is in use and exposes the necessary\n+        \/\/ \"resource sharing layer\" APIs (only in Sun's JDK 6u10 and above)\n+        if (r == null && tryRSL && isRSLAvailable(fctx)) {\n+            \/\/ try locating an RSLRenderer (need to use reflection in case\n+            \/\/ certain RSL backend classes are not available;\n+            \/\/ this step will trigger lazy downloading of impl jars\n+            \/\/ via JNLP, if not already available)\n+            r = createRSLRenderer(fctx);\n+        }\n+        if (r == null && tryJOGL) {\n+            \/\/ next try the JOGL renderer\n+            r = createJOGLRenderer(fctx);\n+        }\n+        if (r == null && trySIMD) {\n+            \/\/ next try the SSE renderer\n+            r = getSSERenderer();\n+        }\n+        if (r == null) {\n+            \/\/ otherwise, fall back on the Java\/CPU renderer\n+            r = getJavaRenderer(fctx);\n+        }\n+        return r;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/scenario\/effect\/impl\/RendererFactory.java","additions":32,"deletions":37,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -74,4 +72,1 @@\n-        @SuppressWarnings(\"removal\")\n-        int size = AccessController.doPrivileged(\n-                (PrivilegedAction<Integer>) () -> Integer.getInteger(\n-                        \"decora.maxLinearConvolveKernelSize\", defSize));\n+        int size = Integer.getInteger(\"decora.maxLinearConvolveKernelSize\", defSize);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/scenario\/effect\/impl\/state\/LinearConvolveRenderState.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -40,5 +38,1 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction) () -> {\n-            NativeLibLoader.loadLibrary(\"decora_sse\");\n-            return null;\n-        });\n+        NativeLibLoader.loadLibrary(\"decora_sse\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/scenario\/effect\/impl\/sw\/sse\/SSERendererDelegate.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -55,4 +55,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -155,5 +151,0 @@\n-    \/\/ Access control context, captured whenever we add this pulse receiver to\n-    \/\/ the PrimaryTimer (which is called when an animation is played or resumed)\n-    @SuppressWarnings(\"removal\")\n-    private AccessControlContext accessCtrlCtx = null;\n-\n@@ -164,1 +155,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -166,3 +156,0 @@\n-        \/\/ Capture the Access Control Context to be used during the animation pulse\n-        accessCtrlCtx = AccessController.getContext();\n-\n@@ -197,1 +184,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -203,3 +189,0 @@\n-            if (accessCtrlCtx == null) {\n-                throw new IllegalStateException(\"Error: AccessControlContext not captured\");\n-            }\n@@ -207,4 +190,1 @@\n-            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                doTimePulse(elapsedTime);\n-                return null;\n-            }, accessCtrlCtx);\n+            doTimePulse(elapsedTime);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/animation\/Animation.java","additions":1,"deletions":21,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -32,3 +32,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -53,1 +50,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -55,8 +51,1 @@\n-            if (accessCtrlCtx == null) {\n-                throw new IllegalStateException(\"Error: AccessControlContext not captured\");\n-            }\n-\n-            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                AnimationTimer.this.handle(now);\n-                return null;\n-            }, accessCtrlCtx);\n+            AnimationTimer.this.handle(now);\n@@ -70,4 +59,0 @@\n-    \/\/ Access control context, captured in start()\n-    @SuppressWarnings(\"removal\")\n-    private AccessControlContext accessCtrlCtx = null;\n-\n@@ -116,1 +101,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -119,2 +103,0 @@\n-            \/\/ Capture the Access Control Context to be used during the animation pulse\n-            accessCtrlCtx = AccessController.getContext();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/animation\/AnimationTimer.java","additions":1,"deletions":19,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,3 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -109,8 +106,1 @@\n-    \/\/ Too bad this isn't already available in a Java core class\n-    private static final String lineSeparator;\n-\n-    static {\n-        @SuppressWarnings(\"removal\")\n-        String prop = AccessController.doPrivileged((PrivilegedAction<String>) () -> System.getProperty(\"line.separator\"));\n-        lineSeparator = prop != null ? prop : \"\\n\";\n-    }\n+    private static final String lineSeparator = System.lineSeparator();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/Preloader.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,3 +46,0 @@\n-import java.security.AccessController;\n-import java.security.AccessControlContext;\n-import java.security.PrivilegedAction;\n@@ -167,3 +164,1 @@\n-    \/\/ Addition of doPrivileged added due to RT-19580\n-    @SuppressWarnings(\"removal\")\n-    private static final ThreadGroup THREAD_GROUP = AccessController.doPrivileged((PrivilegedAction<ThreadGroup>) () -> new ThreadGroup(\"javafx concurrent thread pool\"));\n+    private static final ThreadGroup THREAD_GROUP = new ThreadGroup(\"javafx concurrent thread pool\");\n@@ -178,3 +173,1 @@\n-    \/\/ Addition of doPrivileged added due to RT-19580\n-    @SuppressWarnings(\"removal\")\n-    private static final ThreadFactory THREAD_FACTORY = run -> AccessController.doPrivileged((PrivilegedAction<Thread>) () -> {\n+    private static final ThreadFactory THREAD_FACTORY = run -> {\n@@ -186,1 +179,1 @@\n-    });\n+    };\n@@ -718,1 +711,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -720,1 +712,0 @@\n-        final AccessControlContext acc = AccessController.getContext();\n@@ -723,4 +714,1 @@\n-            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                task.run();\n-                return null;\n-            }, acc);\n+            task.run();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/concurrent\/Service.java","additions":5,"deletions":17,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,3 +28,0 @@\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.PrivilegedAction;\n@@ -1004,6 +1001,0 @@\n-    \/\/ Need to assert the modifyThread permission so an app can cancel\n-    \/\/ a task that it created (the default executor for the service runs in\n-    \/\/ its own thread group)\n-    \/\/ Note that this is needed when running with a security manager.\n-    private static final Permission modifyThreadPerm = new RuntimePermission(\"modifyThread\");\n-\n@@ -1013,5 +1004,1 @@\n-        @SuppressWarnings(\"removal\")\n-        boolean flag = AccessController.doPrivileged(\n-            (PrivilegedAction<Boolean>) () -> super.cancel(mayInterruptIfRunning),\n-            null,\n-            modifyThreadPerm);\n+        boolean flag = super.cancel(mayInterruptIfRunning);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/concurrent\/Task.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import java.security.AccessController;\n@@ -41,2 +40,0 @@\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -199,9 +196,6 @@\n-                @SuppressWarnings(\"removal\")\n-                final URL rtJarURL = AccessController.doPrivileged((PrivilegedExceptionAction<URL>) () -> {\n-                    \/\/ getProtectionDomain either throws a SecurityException or returns a non-null value\n-                    final ProtectionDomain protectionDomain = Application.class.getProtectionDomain();\n-                    \/\/ If we're running with a SecurityManager, then the ProtectionDomain will have a CodeSource\n-                    final CodeSource codeSource = protectionDomain.getCodeSource();\n-                    \/\/ The CodeSource location will be our runtime jar\n-                    return codeSource.getLocation();\n-                });\n+                \/\/ getProtectionDomain either throws a SecurityException or returns a non-null value\n+                final ProtectionDomain protectionDomain = Application.class.getProtectionDomain();\n+                \/\/ If we're running with a SecurityManager, then the ProtectionDomain will have a CodeSource\n+                final CodeSource codeSource = protectionDomain.getCodeSource();\n+                \/\/ The CodeSource location will be our runtime jar\n+                final URL rtJarURL = codeSource.getLocation();\n@@ -240,1 +234,1 @@\n-            } catch (URISyntaxException | MalformedURLException | PrivilegedActionException ignored) {\n+            } catch (URISyntaxException | MalformedURLException ignored) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/converter\/URLConverter.java","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-\n@@ -32,2 +30,1 @@\n-    \/\/ Function to return whether a system property is set to true. Note that\n-    \/\/ this runs within a doPrivilege block so this function must be package-private.\n+    \/\/ Function to return whether a system property is set to true.\n@@ -36,7 +33,2 @@\n-            @SuppressWarnings(\"removal\")\n-            boolean answer =\n-                AccessController.doPrivileged((java.security.PrivilegedAction<Boolean>) () -> {\n-                        String propVal = System.getProperty(propName);\n-                        return \"true\".equals(propVal.toLowerCase());\n-                    });\n-            return answer;\n+            String propVal = System.getProperty(propName);\n+            return \"true\".equals(propVal.toLowerCase());\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/PropertyHelper.java","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -93,1 +93,0 @@\n-import java.security.PrivilegedAction;\n@@ -1412,1 +1411,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1446,7 +1444,1 @@\n-        final AccessControlContext acc = AccessController.getContext();\n-        snapshotRunnableList.add(() -> {\n-            AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                runnable.run();\n-                return null;\n-            }, acc);\n-        });\n+        snapshotRunnableList.add(runnable);\n@@ -6247,1 +6239,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -6249,2 +6240,1 @@\n-        AccessController.doPrivileged(\n-                (PrivilegedAction<Boolean>) () -> Boolean.getBoolean(\"javafx.scene.nodeOrientation.RTL\")) ? NodeOrientation.RIGHT_TO_LEFT : NodeOrientation.INHERIT;\n+        Boolean.getBoolean(\"javafx.scene.nodeOrientation.RTL\") ? NodeOrientation.RIGHT_TO_LEFT : NodeOrientation.INHERIT;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Scene.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"}]}