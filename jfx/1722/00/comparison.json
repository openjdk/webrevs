{"files":[{"patch":"@@ -0,0 +1,182 @@\n+\/\/ Copyright (C) 2009-2023 Apple Inc. All rights reserved.\n+\/\/\n+\/\/ Redistribution and use in source and binary forms, with or without\n+\/\/ modification, are permitted provided that the following conditions\n+\/\/ are met:\n+\/\/ 1. Redistributions of source code must retain the above copyright\n+\/\/    notice, this list of conditions and the following disclaimer.\n+\/\/ 2. Redistributions in binary form must reproduce the above copyright\n+\/\/    notice, this list of conditions and the following disclaimer in the\n+\/\/    documentation and\/or other materials provided with the distribution.\n+\/\/\n+\/\/ THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n+\/\/ EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+\/\/ IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+\/\/ PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n+\/\/ CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+\/\/ EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+\/\/ PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+\/\/ PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n+\/\/ OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+\/\/ (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+\/\/ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. \n+\n+#include \"..\/..\/..\/Configurations\/CommonBase.xcconfig\"\n+\n+ALWAYS_SEARCH_USER_PATHS = NO;\n+\n+CLANG_CXX_LANGUAGE_STANDARD = c++2b;\n+CLANG_CXX_LIBRARY = libc++;\n+CLANG_ENABLE_EXPLICIT_MODULES = NO;\n+CLANG_ENABLE_OBJC_WEAK = YES;\n+CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;\n+CLANG_WARN_BOOL_CONVERSION = YES;\n+CLANG_WARN_COMMA = YES;\n+CLANG_WARN_CONSTANT_CONVERSION = YES;\n+CLANG_WARN_CXX0X_EXTENSIONS = NO;\n+CLANG_WARN_EMPTY_BODY = YES;\n+CLANG_WARN_ENUM_CONVERSION = YES;\n+CLANG_WARN_INFINITE_RECURSION = YES;\n+CLANG_WARN_INT_CONVERSION = YES;\n+CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;\n+CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;\n+CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;\n+CLANG_WARN_STRICT_PROTOTYPES = YES;\n+CLANG_WARN_UNREACHABLE_CODE = YES;\n+CLANG_WARN_SUSPICIOUS_MOVE = YES;\n+CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;\n+COMBINE_HIDPI_IMAGES = NO;\n+DEBUG_INFORMATION_FORMAT = dwarf-with-dsym;\n+ENABLE_BITCODE = NO;\n+ENABLE_STRICT_OBJC_MSGSEND = YES;\n+GCC_C_LANGUAGE_STANDARD = gnu99;\n+GCC_DEBUGGING_SYMBOLS = default;\n+GCC_DYNAMIC_NO_PIC = NO;\n+GCC_ENABLE_CPP_EXCEPTIONS = NO;\n+GCC_ENABLE_CPP_RTTI = NO;\n+GCC_ENABLE_OBJC_EXCEPTIONS = YES;\n+GCC_ENABLE_SYMBOL_SEPARATION = NO;\n+GCC_FAST_OBJC_DISPATCH = YES;\n+GCC_GENERATE_DEBUGGING_SYMBOLS = YES;\n+GCC_INLINES_ARE_PRIVATE_EXTERN = YES;\n+GCC_NO_COMMON_BLOCKS = YES;\n+GCC_OBJC_CALL_CXX_CDTORS = YES;\n+GCC_PRECOMPILE_PREFIX_HEADER = YES;\n+GCC_PREPROCESSOR_DEFINITIONS = $(DEBUG_DEFINES) $(inherited);\n+GCC_STRICT_ALIASING = YES;\n+GCC_THREADSAFE_STATICS = NO;\n+GCC_TREAT_WARNINGS_AS_ERRORS = YES;\n+GCC_VERSION = com.apple.compilers.llvm.clang.1_0;\n+\/\/ FIXME: <http:\/\/webkit.org\/b\/109834> JavaSciptCore should build with -Wshorten-64-to-32\n+GCC_WARN_64_TO_32_BIT_CONVERSION = $(GCC_WARN_64_TO_32_BIT_CONVERSION_$(CURRENT_ARCH));\n+GCC_WARN_64_TO_32_BIT_CONVERSION_ = YES;\n+GCC_WARN_64_TO_32_BIT_CONVERSION_armv7 = YES;\n+GCC_WARN_64_TO_32_BIT_CONVERSION_armv7k = YES;\n+GCC_WARN_64_TO_32_BIT_CONVERSION_armv7s = YES;\n+GCC_WARN_64_TO_32_BIT_CONVERSION_arm64 = NO;\n+GCC_WARN_64_TO_32_BIT_CONVERSION_arm64e = NO;\n+GCC_WARN_64_TO_32_BIT_CONVERSION_i386 = YES;\n+GCC_WARN_64_TO_32_BIT_CONVERSION_x86_64 = NO;\n+GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS = NO;\n+GCC_WARN_ABOUT_MISSING_NEWLINE = YES;\n+GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES;\n+GCC_WARN_ABOUT_RETURN_TYPE = YES;\n+GCC_WARN_NON_VIRTUAL_DESTRUCTOR = YES;\n+CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;\n+GCC_WARN_SIGN_COMPARE = YES;\n+GCC_WARN_UNDECLARED_SELECTOR = YES;\n+CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;\n+CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED = YES;\n+GCC_WARN_UNINITIALIZED_AUTOS = YES;\n+GCC_WARN_UNUSED_FUNCTION = YES;\n+GCC_WARN_UNUSED_VARIABLE = YES;\n+CLANG_WARN_DOCUMENTATION_COMMENTS = YES;\n+PREBINDING = NO;\n+WARNING_CFLAGS = $(inherited) -Wcast-qual -Wchar-subscripts -Wextra-tokens -Winit-self -Wmissing-noreturn -Wpacked -Wpointer-arith -Wredundant-decls -Wwrite-strings -Wexit-time-destructors -Wglobal-constructors -Wtautological-compare -Wimplicit-fallthrough -Wvla -Wliteral-conversion -Wthread-safety -Wno-profile-instr-out-of-date -Wno-profile-instr-unprofiled;\n+\n+HEADER_SEARCH_PATHS = . \"$(BUILT_PRODUCTS_DIR)$(WK_LIBRARY_HEADERS_FOLDER_PATH)\" $(HEADER_SEARCH_PATHS);\n+LIBRARY_SEARCH_PATHS = $(SDK_DIR)$(WK_LIBRARY_INSTALL_PATH) $(inherited);\n+SYSTEM_HEADER_SEARCH_PATHS = $(WK_PRIVATE_SDK_DIR)$(WK_ALTERNATE_WEBKIT_SDK_PATH)$(WK_LIBRARY_HEADERS_FOLDER_PATH) $(SDKROOT)\/System\/Library\/Frameworks\/System.framework\/PrivateHeaders $(inherited);\n+\n+AD_HOC_CODE_SIGNING_ALLOWED = YES;\n+CODE_SIGN_IDENTITY = -;\n+\n+SUPPORTED_PLATFORMS = iphoneos iphonesimulator macosx appletvos appletvsimulator watchos watchsimulator xros xrsimulator;\n+SUPPORTS_MACCATALYST = YES;\n+\n+FRAMEWORK_SEARCH_PATHS = $(WK_QUOTED_OVERRIDE_FRAMEWORKS_DIR);\n+\n+NORMAL_JAVASCRIPTCORE_FRAMEWORKS_DIR = $(SYSTEM_LIBRARY_DIR)\/Frameworks;\n+\n+JAVASCRIPTCORE_FRAMEWORKS_DIR = $(JAVASCRIPTCORE_FRAMEWORKS_DIR_USE_OVERRIDE_FRAMEWORKS_DIR_$(WK_USE_OVERRIDE_FRAMEWORKS_DIR));\n+JAVASCRIPTCORE_FRAMEWORKS_DIR_USE_OVERRIDE_FRAMEWORKS_DIR_NO = $(JAVASCRIPTCORE_FRAMEWORKS_DIR_USE_ALTERNATE_FRAMEWORKS_DIR_$(WK_USE_ALTERNATE_FRAMEWORKS_DIR));\n+JAVASCRIPTCORE_FRAMEWORKS_DIR_USE_OVERRIDE_FRAMEWORKS_DIR_YES = $(WK_OVERRIDE_FRAMEWORKS_DIR);\n+JAVASCRIPTCORE_FRAMEWORKS_DIR_USE_ALTERNATE_FRAMEWORKS_DIR_NO = $(NORMAL_JAVASCRIPTCORE_FRAMEWORKS_DIR);\n+JAVASCRIPTCORE_FRAMEWORKS_DIR_USE_ALTERNATE_FRAMEWORKS_DIR_YES = $(WK_ALTERNATE_FRAMEWORKS_DIR)$(NORMAL_JAVASCRIPTCORE_FRAMEWORKS_DIR);\n+\n+JAVASCRIPTCORE_CONTENTS_DIR[sdk=iphone*] = JavaScriptCore.framework;\n+JAVASCRIPTCORE_CONTENTS_DIR[sdk=macosx*] = JavaScriptCore.framework\/Versions\/A;\n+\n+JAVASCRIPTCORE_HELPERS_DIR = $(JAVASCRIPTCORE_CONTENTS_DIR)\/Helpers;\n+JAVASCRIPTCORE_LIBRARIES_DIR = $(JAVASCRIPTCORE_CONTENTS_DIR)\/Libraries;\n+\n+DEAD_CODE_STRIPPING = YES;\n+DEAD_CODE_STRIPPING[config=Debug] = NO;\n+\n+DEBUG_DEFINES = NDEBUG;\n+DEBUG_DEFINES[config=Debug] = ;\n+\n+WK_DEFAULT_GCC_OPTIMIZATION_LEVEL = 3;\n+WK_DEFAULT_GCC_OPTIMIZATION_LEVEL[config=Debug] = 0;\n+\n+STRIP_INSTALLED_PRODUCT = YES;\n+STRIP_INSTALLED_PRODUCT[config=Debug] = NO;\n+\n+SDKROOT = macosx.internal;\n+ADDITIONAL_SDKS = $(WK_ADDITIONAL_SDKS);\n+\n+EXCLUDED_SOURCE_FILE_NAMES = libWebKitAdditions.a libWTF.a\n+\n+LLVM_LTO = $(WK_LLVM_LTO_$(WK_XCODE_SUPPORTS_LTO));\n+WK_LLVM_LTO_NO = NO;\n+WK_LLVM_LTO_YES = $(WK_USER_LTO_MODE);\n+\n+WK_XCODE_SUPPORTS_LTO[sdk=macos*] = $(WK_NOT_$(WK_MACOS_BEFORE_1300));\n+WK_XCODE_SUPPORTS_LTO[sdk=iphone*] = YES;\n+WK_XCODE_SUPPORTS_LTO[sdk=appletv*] = YES;\n+WK_XCODE_SUPPORTS_LTO[sdk=watch*] = YES;\n+\n+WK_USER_LTO_MODE = $(WK_USER_LTO_MODE_$(WK_LTO_MODE));\n+WK_USER_LTO_MODE_full = YES;\n+WK_USER_LTO_MODE_thin = YES_THIN;\n+WK_USER_LTO_MODE_none = NO;\n+WK_USER_LTO_MODE_ = $(WK_DEFAULT_LTO_MODE);\n+WK_DEFAULT_LTO_MODE = $(WK_USER_LTO_MODE_thin);\n+\n+WK_PROCESSED_XCENT_FILE=$(TEMP_FILE_DIR)\/$(FULL_PRODUCT_NAME).entitlements\n+WK_USE_RESTRICTED_ENTITLEMENTS = $(USE_INTERNAL_SDK);\n+\n+\/\/ Shared variables used for dynamic or static linking of JavaScriptCore and jsc.\n+\n+\/\/ Tomorrow me will be smart enough to figure out how to do this properly.\n+JSC_SEC_LD_FLAGS[sdk=iphoneos*] = -weak_framework BrowserEngineCore;\n+JSC_SEC_LD_FLAGS[sdk=iphoneos17.0*] = ;\n+JSC_SEC_LD_FLAGS[sdk=iphoneos17.1*] = ;\n+JSC_SEC_LD_FLAGS[sdk=iphoneos17.2*] = ;\n+JSC_SEC_LD_FLAGS[sdk=iphoneos17.3*] = ;\n+JSC_SEC_LD_FLAGS[sdk=appletv*] = ;\n+JSC_SEC_LD_FLAGS[sdk=watch*] = ;\n+JSC_SEC_LD_FLAGS[sdk=xr*] = ;\n+\n+OTHER_LDFLAGS_JAVASCRIPTCORE_DEPS = $(JSC_SEC_LD_FLAGS) -fobjc-link-runtime -licucore -framework Security;\n+\n+WTF_ARCHIVE = $(BUILT_PRODUCTS_DIR)\/libWTF.a;\n+WTF_ARCHIVE[config=Production] = $(SDK_DIR)$(WK_ALTERNATE_WEBKIT_SDK_PATH)$(WK_LIBRARY_INSTALL_PATH)\/libWTF.a;\n+\n+BMALLOC_ARCHIVE = $(BUILT_PRODUCTS_DIR)\/libbmalloc.a;\n+BMALLOC_ARCHIVE[config=Production] = $(SDK_DIR)$(WK_ALTERNATE_WEBKIT_SDK_PATH)$(WK_LIBRARY_INSTALL_PATH)\/libbmalloc.a;\n+\n+LIBPAS_ARCHIVE = $(BUILT_PRODUCTS_DIR)\/libpas.a;\n+LIBPAS_ARCHIVE[config=Production] = $(SDK_DIR)$(WK_ALTERNATE_WEBKIT_SDK_PATH)$(WK_LIBRARY_INSTALL_PATH)\/libpas.a;\n+\n+LIBJAVASCRIPTCORE_ARCHIVE = $(BUILT_PRODUCTS_DIR)\/libJavaScriptCore.a;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/Configurations\/Base.xcconfig","additions":182,"deletions":0,"binary":false,"changes":182,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/\/ Copyright (C) 2009-2023 Apple Inc. All rights reserved.\n+\/\/\n+\/\/ Redistribution and use in source and binary forms, with or without\n+\/\/ modification, are permitted provided that the following conditions\n+\/\/ are met:\n+\/\/ 1. Redistributions of source code must retain the above copyright\n+\/\/    notice, this list of conditions and the following disclaimer.\n+\/\/ 2. Redistributions in binary form must reproduce the above copyright\n+\/\/    notice, this list of conditions and the following disclaimer in the\n+\/\/    documentation and\/or other materials provided with the distribution.\n+\/\/\n+\/\/ THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n+\/\/ EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+\/\/ IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+\/\/ PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n+\/\/ CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+\/\/ EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+\/\/ PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+\/\/ PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n+\/\/ OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+\/\/ (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+\/\/ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+#include \"..\/..\/..\/Configurations\/Version.xcconfig\"\n+\n+GCC_PREFIX_HEADER = JavaScriptCorePrefix.h;\n+GCC_PREPROCESSOR_DEFINITIONS = $(inherited) $(ENABLE_LLVM_PROFILE_GENERATION) PAS_BMALLOC_HIDDEN;\n+GCC_SYMBOLS_PRIVATE_EXTERN = YES;\n+OTHER_CFLAGS = $(inherited) -fno-slp-vectorize --system-header-prefix=unicode\/ -D__STDC_WANT_LIB_EXT1__=1;\n+HEADER_SEARCH_PATHS = \"${BUILT_PRODUCTS_DIR}\/DerivedSources\/JavaScriptCore\" $(HEADER_SEARCH_PATHS);\n+PRODUCT_NAME = JavaScriptCore;\n+\n+CLANG_INSTRUMENT_FOR_OPTIMIZATION_PROFILING = $(CLANG_INSTRUMENT_FOR_OPTIMIZATION_PROFILING_$(ENABLE_LLVM_PROFILE_GENERATION));\n+CLANG_INSTRUMENT_FOR_OPTIMIZATION_PROFILING_ENABLE_LLVM_PROFILE_GENERATION = YES;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/Configurations\/BaseTarget.xcconfig","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/\/ Copyright (C) 2009-2024 Apple Inc. All rights reserved.\n+\/\/\n+\/\/ Redistribution and use in source and binary forms, with or without\n+\/\/ modification, are permitted provided that the following conditions\n+\/\/ are met:\n+\/\/ 1. Redistributions of source code must retain the above copyright\n+\/\/    notice, this list of conditions and the following disclaimer.\n+\/\/ 2. Redistributions in binary form must reproduce the above copyright\n+\/\/    notice, this list of conditions and the following disclaimer in the\n+\/\/    documentation and\/or other materials provided with the distribution.\n+\/\/\n+\/\/ THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n+\/\/ EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+\/\/ IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+\/\/ PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n+\/\/ CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+\/\/ EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+\/\/ PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+\/\/ PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n+\/\/ OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+\/\/ (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+\/\/ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. \n+\n+#include \"Base.xcconfig\"\n+#include? \"..\/..\/..\/LocalOverrides.xcconfig\"\n+\n+ONLY_ACTIVE_ARCH = YES;\n+\n+GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS = YES;\n+DEBUG_INFORMATION_FORMAT = dwarf;\n+\n+CODE_SIGN_IDENTITY[sdk=macosx*] = $(CODE_SIGN_IDENTITY_$(USE_INTERNAL_SDK));\n+CODE_SIGN_IDENTITY_ = $(CODE_SIGN_IDENTITY_NO);\n+CODE_SIGN_IDENTITY_NO = -;\n+CODE_SIGN_IDENTITY_YES = $(WK_ENGINEERING_CODE_SIGN_IDENTITY);\n+\n+CODE_SIGN_IDENTITY[sdk=embedded] = $(CODE_SIGN_IDENTITY_EMBEDDED_$(USE_INTERNAL_SDK));\n+CODE_SIGN_IDENTITY_EMBEDDED_YES = -;\n+\n+SDKROOT = $(SDKROOT_$(USE_INTERNAL_SDK));\n+SDKROOT_ = macosx;\n+SDKROOT_YES = macosx.internal;\n+\n+VALIDATE_DEPENDENCIES = $(VALIDATE_DEPENDENCIES_INTERNAL_$(USE_INTERNAL_SDK));\n+VALIDATE_DEPENDENCIES_INTERNAL_ = $(VALIDATE_DEPENDENCIES_NATIVE_TARGET_$(WK_NOT_$(WK_EMPTY_$(PRODUCT_TYPE))));\n+VALIDATE_DEPENDENCIES_INTERNAL_YES = $(WK_VALIDATE_DEPENDENCIES);\n+VALIDATE_DEPENDENCIES_NATIVE_TARGET_YES = $(WK_VALIDATE_DEPENDENCIES);\n+\n+WK_RELOCATABLE_FRAMEWORKS = YES;\n+\n+WK_DEFAULT_LTO_MODE = $(WK_USER_LTO_MODE_none);\n+\n+WK_CCACHE_DIR = $(SRCROOT)\/..\/..\/Tools\/ccache;\n+#include \"..\/..\/..\/Tools\/ccache\/ccache.xcconfig\"\n+\n+GCC_PREPROCESSOR_DEFINITIONS = $(inherited) ENABLE_JSC_RESTRICTED_OPTIONS_BY_DEFAULT=1;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/Configurations\/DebugRelease.xcconfig","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/\/ Copyright (C) 2011-2023 Apple Inc. All rights reserved.\n+\/\/\n+\/\/ Redistribution and use in source and binary forms, with or without\n+\/\/ modification, are permitted provided that the following conditions\n+\/\/ are met:\n+\/\/ 1. Redistributions of source code must retain the above copyright\n+\/\/    notice, this list of conditions and the following disclaimer.\n+\/\/ 2. Redistributions in binary form must reproduce the above copyright\n+\/\/    notice, this list of conditions and the following disclaimer in the\n+\/\/    documentation and\/or other materials provided with the distribution.\n+\/\/\n+\/\/ THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n+\/\/ EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+\/\/ IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+\/\/ PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n+\/\/ CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+\/\/ EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+\/\/ PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+\/\/ PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n+\/\/ OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+\/\/ (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+\/\/ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. \n+\n+#include \"..\/..\/..\/Configurations\/Version.xcconfig\"\n+\n+INSTALL_PATH = $(INSTALL_PATH_PREFIX)$(JAVASCRIPTCORE_FRAMEWORKS_DIR)\/$(JAVASCRIPTCORE_HELPERS_DIR);\n+\n+JSC_USE_STATIC_LINKING = $(WK_NOT_$(WK_NOT_$(ENABLE_FUZZILLI)));\n+\n+OTHER_LDFLAGS = $(inherited) $(OTHER_LDFLAGS_STATIC_LINKING_$(JSC_USE_STATIC_LINKING));\n+OTHER_LDFLAGS_STATIC_LINKING_YES = $(OTHER_LDFLAGS_JAVASCRIPTCORE_DEPS) $(WTF_ARCHIVE) $(BMALLOC_ARCHIVE) $(LIBPAS_ARCHIVE) $(LIBJAVASCRIPTCORE_ARCHIVE);\n+OTHER_LDFLAGS_STATIC_LINKING_NO = -framework JavaScriptCore $(WK_RELOCATABLE_FRAMEWORKS_LDFLAGS) $(SOURCE_VERSION_LDFLAGS);\n+\n+WK_RELOCATABLE_FRAMEWORKS_LDFLAGS = $(WK_RELOCATABLE_FRAMEWORKS_LDFLAGS_$(WK_RELOCATABLE_FRAMEWORKS)$(WK_XCODE_15_3));\n+WK_RELOCATABLE_FRAMEWORKS_LDFLAGS_YES_XCODE_BEFORE_15_3 = -Wl,-dyld_env,$(LD_ENVIRONMENT_RELOCATABLE_YES);\n+\n+LD_ENVIRONMENT = $(inherited) $(LD_ENVIRONMENT_RELOCATABLE_$(WK_RELOCATABLE_FRAMEWORKS));\n+LD_ENVIRONMENT_RELOCATABLE_YES = DYLD_FRAMEWORK_PATH=@executable_path\/..\/..\/..\/..;\n+\n+PRODUCT_NAME = jsc;\n+\n+\/\/ We want this to always be NO. If set to YES, Xcode will invoke codesign with an --entitlements parameter that points to the platform's BaseEntitlements.plist. This parameter would override any --entitlements parameter that we establish in WK_LIBRARY_VALIDATION_CODE_SIGN_FLAGS, causing our entitlements to be ignored.\n+CODE_SIGN_INJECT_BASE_ENTITLEMENTS[sdk=iphone*] = NO;\n+CODE_SIGN_INJECT_BASE_ENTITLEMENTS[sdk=macosx*] = NO;\n+OTHER_CODE_SIGN_FLAGS[sdk=iphone*] = -i com.apple.jsc --entitlements ${WK_PROCESSED_XCENT_FILE};\n+OTHER_CODE_SIGN_FLAGS[sdk=macosx*] = --entitlements ${WK_PROCESSED_XCENT_FILE};\n+\n+\/\/ Explicitly add the PrivateHeaders directory to the search path so that generated header files can be found in production builds.\n+HEADER_SEARCH_PATHS = \"$(JAVASCRIPTCORE_FRAMEWORKS_DIR)\/JavaScriptCore.framework\/PrivateHeaders\" $(inherited);\n+HEADER_SEARCH_PATHS = \"${BUILT_PRODUCTS_DIR}\/DerivedSources\/JavaScriptCore\" $(HEADER_SEARCH_PATHS);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/Configurations\/JSC.xcconfig","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,89 @@\n+\/\/ Copyright (C) 2009-2023 Apple Inc. All rights reserved.\n+\/\/\n+\/\/ Redistribution and use in source and binary forms, with or without\n+\/\/ modification, are permitted provided that the following conditions\n+\/\/ are met:\n+\/\/ 1. Redistributions of source code must retain the above copyright\n+\/\/    notice, this list of conditions and the following disclaimer.\n+\/\/ 2. Redistributions in binary form must reproduce the above copyright\n+\/\/    notice, this list of conditions and the following disclaimer in the\n+\/\/    documentation and\/or other materials provided with the distribution.\n+\/\/\n+\/\/ THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n+\/\/ EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+\/\/ IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+\/\/ PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n+\/\/ CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+\/\/ EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+\/\/ PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+\/\/ PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n+\/\/ OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+\/\/ (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+\/\/ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+#include \"BaseTarget.xcconfig\"\n+\n+DEFINES_MODULE = YES;\n+MODULEMAP_FILE = $(SRCROOT)\/JavaScriptCore.modulemap;\n+\n+WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS = $(WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS_$(WK_PLATFORM_NAME));\n+WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS_iphoneos = $(WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS$(WK_IOS_17));\n+WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS_iphonesimulator = $(WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS$(WK_IOS_17));\n+WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS_IOS_SINCE_17 = YES;\n+WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS_maccatalyst = $(WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS$(WK_MACCATALYST_14));\n+WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS_MACCATALYST_SINCE_14 = YES;\n+WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS_macosx = $(WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS$(WK_MACOS_1400));\n+WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS_MACOS_SINCE_1400 = YES;\n+WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS_appletvos = $(WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS$(WK_TVOS_17));\n+WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS_appletvsimulator = $(WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS$(WK_TVOS_17));\n+WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS_TVOS_SINCE_17 = YES;\n+WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS_watchos = $(WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS$(WK_WATCHOS_10));\n+WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS_watchsimulator = $(WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS$(WK_WATCHOS_10));\n+WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS_WATCHOS_SINCE_10 = YES;\n+WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS_xros = YES;\n+WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS_xrsimulator = YES;\n+\n+SUPPORTS_TEXT_BASED_API = $(WK_AND_$(TAPI_USE_SRCROOT)_$(WK_SUPPORTS_OTHER_TAPI_FLAGS_STATICLIBS));\n+TAPI_USE_SRCROOT = $(TAPI_USE_SRCROOT$(WK_XCODE_15));\n+TAPI_USE_SRCROOT_XCODE_SINCE_15 = YES;\n+TAPI_ENABLE_PROJECT_HEADERS = YES;\n+TAPI_VERIFY_MODE = Pedantic;\n+\/\/ C++ dialect flags (-fvisibility, others inherited from CommonBase.xcconfig)\n+\/\/ are needed because JavaScriptCore \/ WTF private headers are only safe to use\n+\/\/ from other WebKit projects, which build with the same dialect.\n+OTHER_TAPI_FLAGS = $(inherited) -fvisibility=hidden -exclude-private-header **\/*SPI.h -extra-project-header $(SRCROOT)\/API\/ExtraSymbolsForTAPI.h $(OTHER_TAPI_FLAGS_STATICLIBS_$(DEPLOYMENT_LOCATION));\n+\/\/ JavaScriptCore exports libWTF.a and libbmalloc.a, so tapi needs to know about headers from those projects. The extra filelists are generated by their respective projects. In install-style builds, there is a postprocessing step done as a JavaScriptCore build phase.\n+OTHER_TAPI_FLAGS_STATICLIBS_NO = -filelist $(BUILT_PRODUCTS_DIR)\/usr\/local\/include\/bmalloc\/bmalloc.json -filelist $(BUILT_PRODUCTS_DIR)\/usr\/local\/include\/wtf\/WTF.json\n+OTHER_TAPI_FLAGS_STATICLIBS_YES = -filelist $(DERIVED_FILE_DIR)\/bmalloc.json -filelist $(DERIVED_FILE_DIR)\/WTF.json\n+\n+WK_ERROR_WHEN_LINKING_WITH_STATIC_INITIALIZERS = -Xlinker -no_inits;\n+WK_NO_STATIC_INITIALIZERS = $(WK_NO_STATIC_INITIALIZERS_$(CONFIGURATION)_$(WK_OR_$(WK_ANY_SANITIZER_ENABLED)_$(ENABLE_FUZZILLI))_$(ENABLE_LLVM_PROFILE_GENERATION));\n+WK_NO_STATIC_INITIALIZERS_Release__ = $(WK_ERROR_WHEN_LINKING_WITH_STATIC_INITIALIZERS);\n+WK_NO_STATIC_INITIALIZERS_Release_NO_ = $(WK_ERROR_WHEN_LINKING_WITH_STATIC_INITIALIZERS);\n+WK_NO_STATIC_INITIALIZERS_Production__ = $(WK_ERROR_WHEN_LINKING_WITH_STATIC_INITIALIZERS);\n+WK_NO_STATIC_INITIALIZERS_Production_NO_ = $(WK_ERROR_WHEN_LINKING_WITH_STATIC_INITIALIZERS);\n+\n+OTHER_LDFLAGS_BASE = $(OTHER_LDFLAGS_JAVASCRIPTCORE_DEPS) -unexported_symbols_list $(SRCROOT)\/unexported-libc++.txt -force_load $(WTF_ARCHIVE) -force_load $(BMALLOC_ARCHIVE) -force_load $(LIBJAVASCRIPTCORE_ARCHIVE) -load_hidden $(LIBPAS_ARCHIVE) $(SOURCE_VERSION_LDFLAGS) $(WK_NO_STATIC_INITIALIZERS);\n+OTHER_LDFLAGS[sdk=embedded*] = $(inherited) $(OTHER_LDFLAGS_BASE);\n+OTHER_LDFLAGS[sdk=macosx*] = $(inherited) $(OTHER_LDFLAGS_BASE) -framework CoreServices $(PROFILE_GENERATE_OR_USE_LDFLAGS);\n+\n+SECTORDER_FLAGS = $(SECTORDER_FLAGS_$(CONFIGURATION));\n+SECTORDER_FLAGS_Production[sdk=macosx*] = -Wl,-order_file,JavaScriptCore.order;\n+\n+INFOPLIST_FILE = Info.plist;\n+INSTALL_PATH = $(INSTALL_PATH_PREFIX)$(JAVASCRIPTCORE_FRAMEWORKS_DIR);\n+DYLIB_INSTALL_NAME_BASE = $(DYLIB_INSTALL_NAME_BASE_$(WK_USE_ALTERNATE_FRAMEWORKS_DIR));\n+DYLIB_INSTALL_NAME_BASE_NO = $(NORMAL_JAVASCRIPTCORE_FRAMEWORKS_DIR)\n+DYLIB_INSTALL_NAME_BASE_YES = $(JAVASCRIPTCORE_FRAMEWORKS_DIR);\n+PRODUCT_BUNDLE_IDENTIFIER = com.apple.$(PRODUCT_NAME:rfc1034identifier);\n+\n+ALTERNATE_ROOT_PATH = $(JAVASCRIPTCORE_FRAMEWORKS_DIR);\n+\n+OUTPUT_ALTERNATE_ROOT_PATH = $(OUTPUT_ALTERNATE_ROOT_PATH_$(USE_SYSTEM_CONTENT_PATH)_$(WK_NOT_$(WK_USE_OVERRIDE_FRAMEWORKS_DIR)));\n+OUTPUT_ALTERNATE_ROOT_PATH_YES_YES = $(DSTROOT)$(ALTERNATE_ROOT_PATH)\/$(FULL_PRODUCT_NAME);\n+\n+INSTALLHDRS_SCRIPT_PHASE = YES;\n+APPLY_RULES_IN_COPY_HEADERS = YES;\n+\n+JSC_FRAMEWORK_HEADER_POSTPROCESSING_DISABLED = YES;\n+JSC_FRAMEWORK_HEADER_POSTPROCESSING_DISABLED[config=Production] = $(WK_USE_OVERRIDE_FRAMEWORKS_DIR);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/Configurations\/JavaScriptCore.xcconfig","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/\/ Copyright (C) 2011-2022 Apple Inc. All rights reserved.\n+\/\/\n+\/\/ Redistribution and use in source and binary forms, with or without\n+\/\/ modification, are permitted provided that the following conditions\n+\/\/ are met:\n+\/\/ 1. Redistributions of source code must retain the above copyright\n+\/\/    notice, this list of conditions and the following disclaimer.\n+\/\/ 2. Redistributions in binary form must reproduce the above copyright\n+\/\/    notice, this list of conditions and the following disclaimer in the\n+\/\/    documentation and\/or other materials provided with the distribution.\n+\/\/\n+\/\/ THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n+\/\/ EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+\/\/ IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+\/\/ PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n+\/\/ CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+\/\/ EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+\/\/ PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+\/\/ PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n+\/\/ OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+\/\/ (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+\/\/ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+#include \"..\/..\/..\/Configurations\/Version.xcconfig\"\n+\n+INSTALL_PATH = $(INSTALL_PATH_PREFIX)$(JAVASCRIPTCORE_FRAMEWORKS_DIR)\/$(JAVASCRIPTCORE_HELPERS_DIR);\n+PRODUCT_NAME = $(TARGET_NAME);\n+\n+\/\/ We want this to always be NO. If set to YES, Xcode will invoke codesign with an --entitlements parameter that points to the platform's BaseEntitlements.plist. This parameter would override any --entitlements parameter that we establish in WK_LIBRARY_VALIDATION_CODE_SIGN_FLAGS, causing our entitlements to be ignored.\n+CODE_SIGN_INJECT_BASE_ENTITLEMENTS[sdk=iphone*] = NO;\n+CODE_SIGN_INJECT_BASE_ENTITLEMENTS[sdk=macosx*] = NO;\n+OTHER_CODE_SIGN_FLAGS[sdk=iphone*] = -i com.apple.jsc --entitlements ${WK_PROCESSED_XCENT_FILE};\n+OTHER_CODE_SIGN_FLAGS[sdk=macosx*] = --entitlements ${WK_PROCESSED_XCENT_FILE};\n+\n+SKIP_INSTALL = $(SKIP_INSTALL_$(FORCE_TOOL_INSTALL));\n+SKIP_INSTALL_ = YES;\n+SKIP_INSTALL_NO = YES;\n+SKIP_INSTALL_YES = NO;\n+\n+CLANG_ENABLE_OBJC_ARC = YES;\n+\n+OTHER_CFLAGS = $(inherited) -isystem icu;\n+\n+OTHER_LDFLAGS = $(inherited) $(SOURCE_VERSION_LDFLAGS);\n+\n+\/\/ Explicitly add the PrivateHeaders directory to the search path so that generated header files can be found in production builds.\n+HEADER_SEARCH_PATHS = \"${BUILT_PRODUCTS_DIR}\/DerivedSources\/JavaScriptCore\" \"${BUILT_PRODUCTS_DIR}\/LLIntOffsets\/${ARCHS}\" \"$(JAVASCRIPTCORE_FRAMEWORKS_DIR)\/JavaScriptCore.framework\/PrivateHeaders\" $(inherited);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/Configurations\/TestExecutable.xcconfig","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/\/ Copyright (C) 2011-2022 Apple Inc. All rights reserved.\n+\/\/\n+\/\/ Redistribution and use in source and binary forms, with or without\n+\/\/ modification, are permitted provided that the following conditions\n+\/\/ are met:\n+\/\/ 1. Redistributions of source code must retain the above copyright\n+\/\/    notice, this list of conditions and the following disclaimer.\n+\/\/ 2. Redistributions in binary form must reproduce the above copyright\n+\/\/    notice, this list of conditions and the following disclaimer in the\n+\/\/    documentation and\/or other materials provided with the distribution.\n+\/\/\n+\/\/ THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n+\/\/ EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+\/\/ IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+\/\/ PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n+\/\/ CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+\/\/ EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+\/\/ PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+\/\/ PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n+\/\/ OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+\/\/ (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+\/\/ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. \n+\n+#include \"..\/..\/..\/Configurations\/Version.xcconfig\"\n+\n+INSTALL_PATH = $(INSTALL_PATH_PREFIX)$(JAVASCRIPTCORE_FRAMEWORKS_DIR)\/$(JAVASCRIPTCORE_HELPERS_DIR);\n+PRODUCT_NAME = $(TARGET_NAME);\n+\n+CODE_SIGN_ENTITLEMENTS[sdk=macosx*] = $(CODE_SIGN_ENTITLEMENTS_macosx_$(TARGET_NAME)_$(USE_INTERNAL_SDK));\n+\n+CODE_SIGN_ENTITLEMENTS[sdk=iphone*] = $(CODE_SIGN_ENTITLEMENTS_ios_$(TARGET_NAME));\n+CODE_SIGN_ENTITLEMENTS_ios_minidom = entitlements.plist;\n+CODE_SIGN_ENTITLEMENTS_ios_testair = entitlements.plist;\n+CODE_SIGN_ENTITLEMENTS_ios_testb3 = entitlements.plist;\n+CODE_SIGN_ENTITLEMENTS_ios_testmasm = entitlements.plist;\n+CODE_SIGN_ENTITLEMENTS_ios_testWasm = entitlements.plist;\n+CODE_SIGN_ENTITLEMENTS_ios_testRegExp = entitlements.plist;\n+\n+OTHER_CODE_SIGN_FLAGS[sdk=iphone*] = -i com.apple.jsc;\n+\n+SKIP_INSTALL = $(SKIP_INSTALL_$(FORCE_TOOL_INSTALL));\n+SKIP_INSTALL_ = YES;\n+SKIP_INSTALL_NO = YES;\n+SKIP_INSTALL_YES = NO;\n+\n+CLANG_ENABLE_OBJC_ARC = YES;\n+\n+OTHER_CFLAGS = $(inherited) -isystem icu;\n+\n+\/\/ Explicitly add the PrivateHeaders directory to the search path so that generated header files can be found in production builds.\n+HEADER_SEARCH_PATHS = \"${BUILT_PRODUCTS_DIR}\/DerivedSources\/JavaScriptCore\" \"$(JAVASCRIPTCORE_FRAMEWORKS_DIR)\/JavaScriptCore.framework\/PrivateHeaders\" $(inherited);\n+\n+OTHER_LDFLAGS = $(inherited) $(SOURCE_VERSION_LDFLAGS);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/Configurations\/ToolExecutable.xcconfig","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/\/ Copyright (C) 2009-2023 Apple Inc. All rights reserved.\n+\/\/\n+\/\/ Redistribution and use in source and binary forms, with or without\n+\/\/ modification, are permitted provided that the following conditions\n+\/\/ are met:\n+\/\/ 1. Redistributions of source code must retain the above copyright\n+\/\/    notice, this list of conditions and the following disclaimer.\n+\/\/ 2. Redistributions in binary form must reproduce the above copyright\n+\/\/    notice, this list of conditions and the following disclaimer in the\n+\/\/    documentation and\/or other materials provided with the distribution.\n+\/\/\n+\/\/ THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n+\/\/ EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+\/\/ IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+\/\/ PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n+\/\/ CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+\/\/ EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+\/\/ PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+\/\/ PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n+\/\/ OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+\/\/ (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+\/\/ OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+\n+#include \"BaseTarget.xcconfig\"\n+\n+CLANG_OPTIMIZATION_PROFILE_FILE = $(BUILT_PRODUCTS_DIR)\/DerivedSources\/JavaScriptCore\/JavaScriptCore.profdata;\n+WK_COMPRESSED_OPTIMIZATION_PROFILE_FILE = $(WK_COMPRESSED_OPTIMIZATION_PROFILE_FILE_$(USE_INTERNAL_SDK));\n+WK_COMPRESSED_OPTIMIZATION_PROFILE_FILE_YES = $(WK_WEBKITADDITIONS_HEADERS_FOLDER_PATH)\/Profiling\/JavaScriptCore.profdata.compressed;\n+\n+CLANG_USE_OPTIMIZATION_PROFILE = $(CLANG_USE_OPTIMIZATION_PROFILE_$(USE_INTERNAL_SDK)_$(CONFIGURATION)_$(WK_PLATFORM_NAME));\n+CLANG_USE_OPTIMIZATION_PROFILE_YES_Release_macosx = YES;\n+CLANG_USE_OPTIMIZATION_PROFILE_YES_Release_iphoneos = YES;\n+CLANG_USE_OPTIMIZATION_PROFILE_YES_Release_xros = YES;\n+CLANG_USE_OPTIMIZATION_PROFILE_YES_Production_macosx = YES;\n+CLANG_USE_OPTIMIZATION_PROFILE_YES_Production_iphoneos = YES;\n+CLANG_USE_OPTIMIZATION_PROFILE_YES_Production_xros = YES;\n+\n+SKIP_INSTALL = YES;\n+\n+STRIP_INSTALLED_PRODUCT = NO;\n+\n+EXCLUDED_SOURCE_FILE_NAMES = $(inherited);\n+EXCLUDED_SOURCE_FILE_NAMES[sdk=iphone*] = $(inherited) framework.sb;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/Configurations\/libJavaScriptCore.xcconfig","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -103,1 +103,1 @@\n-    friend class SuppressRegisetrAllocationValidation;\n+    friend class SuppressRegisterAllocationValidation;\n@@ -897,1 +897,1 @@\n-    class SuppressRegisetrAllocationValidation {\n+    class SuppressRegisterAllocationValidation {\n@@ -900,1 +900,1 @@\n-        SuppressRegisetrAllocationValidation(AbstractMacroAssemblerType& assembler)\n+        SuppressRegisterAllocationValidation(AbstractMacroAssemblerType& assembler)\n@@ -908,1 +908,1 @@\n-        SuppressRegisetrAllocationValidation(AbstractMacroAssemblerType&) { }\n+        SuppressRegisterAllocationValidation(AbstractMacroAssemblerType&) { }\n@@ -950,0 +950,7 @@\n+    void checkRegisterAllocationAgainstSlowPathCall(const JumpList &from)\n+    {\n+        if (m_suppressRegisterValidation)\n+            return;\n+        for (auto& jump : from.jumps())\n+            checkRegisterAllocationAgainstBranchRange(jump.label().m_label.offset(), debugOffset());\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/assembler\/AbstractMacroAssembler.h","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -262,0 +262,3 @@\n+#if ENABLE(DFG_REGISTER_ALLOCATION_VALIDATION)\n+    jit->checkRegisterAllocationAgainstSlowPathCall(from);\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/dfg\/DFGSlowPathGenerator.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4800,0 +4800,1 @@\n+    SuppressRegisterAllocationValidation suppressScope(*this);\n@@ -14652,0 +14653,1 @@\n+    SuppressRegisterAllocationValidation suppressScope(*this);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/dfg\/DFGSpeculativeJIT.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -915,1 +915,1 @@\n-            SuppressRegisetrAllocationValidation suppressScope(*this);\n+            SuppressRegisterAllocationValidation suppressScope(*this);\n@@ -937,1 +937,1 @@\n-        SuppressRegisetrAllocationValidation suppressScope(*this);\n+        SuppressRegisterAllocationValidation suppressScope(*this);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/dfg\/DFGSpeculativeJIT32_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1068,1 +1068,1 @@\n-            SuppressRegisetrAllocationValidation suppressScope(*this);\n+            SuppressRegisterAllocationValidation suppressScope(*this);\n@@ -1086,1 +1086,1 @@\n-        SuppressRegisetrAllocationValidation suppressScope(*this);\n+        SuppressRegisterAllocationValidation suppressScope(*this);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/dfg\/DFGSpeculativeJIT64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,276 @@\n+\/*\n+ * Copyright (C) 2019 Sony Interactive Entertainment Inc.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in the\n+ *    documentation and\/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS\n+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n+ * THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+\n+#include \"config.h\"\n+#include \"RemoteInspectorSocket.h\"\n+\n+#if ENABLE(REMOTE_INSPECTOR)\n+\n+#include <arpa\/inet.h>\n+#include <fcntl.h>\n+#include <netinet\/in.h>\n+#include <sys\/socket.h>\n+#include <sys\/un.h>\n+#include <unistd.h>\n+#include <wtf\/UniStdExtras.h>\n+\n+namespace Inspector {\n+\n+namespace Socket {\n+\n+void init()\n+{\n+}\n+\n+std::optional<PlatformSocketType> connect(const char* serverAddress, uint16_t serverPort)\n+{\n+    struct sockaddr_in address = { };\n+\n+    address.sin_family = AF_INET;\n+    inet_aton(serverAddress, &address.sin_addr);\n+    address.sin_port = htons(serverPort);\n+\n+    int fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n+    if (fd < 0) {\n+        LOG_ERROR(\"Failed to create socket for %s:%d, errno = %d\", serverAddress, serverPort, errno);\n+        return std::nullopt;\n+    }\n+\n+    int error = ::connect(fd, (struct sockaddr*)&address, sizeof(address));\n+    if (error < 0) {\n+        LOG_ERROR(\"Failed to connect to %s:%u, errno = %d\", serverAddress, serverPort, errno);\n+        ::close(fd);\n+        return std::nullopt;\n+    }\n+\n+    return fd;\n+}\n+\n+std::optional<PlatformSocketType> listen(const char* addressStr, uint16_t port)\n+{\n+    struct sockaddr_in address = { };\n+\n+    int fdListen = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n+    if (fdListen < 0) {\n+        LOG_ERROR(\"socket() failed, errno = %d\", errno);\n+        return std::nullopt;\n+    }\n+\n+    const int enabled = 1;\n+    int error = setsockopt(fdListen, SOL_SOCKET, SO_REUSEADDR, &enabled, sizeof(enabled));\n+    if (error < 0) {\n+        LOG_ERROR(\"setsockopt() SO_REUSEADDR, errno = %d\", errno);\n+        ::close(fdListen);\n+        return std::nullopt;\n+    }\n+\n+    error = setsockopt(fdListen, SOL_SOCKET, SO_REUSEPORT, &enabled, sizeof(enabled));\n+    if (error < 0) {\n+        LOG_ERROR(\"setsockopt() SO_REUSEPORT, errno = %d\", errno);\n+        ::close(fdListen);\n+        return std::nullopt;\n+    }\n+\n+#if PLATFORM(PLAYSTATION)\n+    if (setsockopt(fdListen, SOL_SOCKET, SO_USE_DEVLAN, &enabled, sizeof(enabled)) < 0) {\n+        LOG_ERROR(\"setsocketopt() SO_USE_DEVLAN, errno = %d\", errno);\n+        ::close(fdListen);\n+        return std::nullopt;\n+    }\n+#endif\n+\n+    \/\/ FIXME: Support AF_INET6 connections.\n+    address.sin_family = AF_INET;\n+    if (addressStr && *addressStr)\n+        inet_aton(addressStr, &address.sin_addr);\n+    else\n+        address.sin_addr.s_addr = htonl(INADDR_ANY);\n+    address.sin_port = htons(port);\n+    error = ::bind(fdListen, (struct sockaddr*)&address, sizeof(address));\n+    if (error < 0) {\n+        LOG_ERROR(\"bind() failed, errno = %d\", errno);\n+        ::close(fdListen);\n+        return std::nullopt;\n+    }\n+\n+    error = ::listen(fdListen, 1);\n+    if (error < 0) {\n+        LOG_ERROR(\"listen() failed, errno = %d\", errno);\n+        ::close(fdListen);\n+        return std::nullopt;\n+    }\n+\n+    return fdListen;\n+}\n+\n+std::optional<PlatformSocketType> accept(PlatformSocketType socket)\n+{\n+    struct sockaddr_in address = { };\n+\n+    socklen_t len = sizeof(struct sockaddr_in);\n+    int fd = ::accept(socket, (struct sockaddr*) &address, &len);\n+    if (fd >= 0)\n+        return fd;\n+\n+    LOG_ERROR(\"accept(inet) error (errno = %d)\", errno);\n+    return std::nullopt;\n+}\n+\n+std::optional<std::array<PlatformSocketType, 2>> createPair()\n+{\n+    std::array<PlatformSocketType, 2> sockets;\n+\n+    if (socketpair(AF_UNIX, SOCK_STREAM, 0, &sockets[0]))\n+        return std::nullopt;\n+\n+    return sockets;\n+}\n+\n+bool setup(PlatformSocketType socket)\n+{\n+    if (!setCloseOnExec(socket)) {\n+        LOG_ERROR(\"setCloseOnExec() error\");\n+        return false;\n+    }\n+\n+    if (!setNonBlock(socket)) {\n+        LOG_ERROR(\"setNonBlock() error (errno = %d)\", errno);\n+        return false;\n+    }\n+\n+    if (setsockopt(socket, SOL_SOCKET, SO_RCVBUF, &BufferSize, sizeof(BufferSize))) {\n+        LOG_ERROR(\"setsockopt(SO_RCVBUF) error (errno = %d)\", errno);\n+        return false;\n+    }\n+\n+    if (setsockopt(socket, SOL_SOCKET, SO_SNDBUF, &BufferSize, sizeof(BufferSize))) {\n+        LOG_ERROR(\"setsockopt(SO_SNDBUF) error (errno = %d)\", errno);\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+bool isValid(PlatformSocketType socket)\n+{\n+    return socket != INVALID_SOCKET_VALUE;\n+}\n+\n+bool isListening(PlatformSocketType socket)\n+{\n+    int out;\n+    socklen_t outSize = sizeof(out);\n+    if (getsockopt(socket, SOL_SOCKET, SO_ACCEPTCONN, &out, &outSize) != -1)\n+        return out;\n+\n+    LOG_ERROR(\"getsockopt(SO_ACCEPTCONN) error (errno = %d)\", errno);\n+    return false;\n+}\n+\n+std::optional<uint16_t> getPort(PlatformSocketType socket)\n+{\n+    ASSERT(isValid(socket));\n+\n+    struct sockaddr_in address = { };\n+    socklen_t len = sizeof(address);\n+    if (getsockname(socket, reinterpret_cast<struct sockaddr*>(&address), &len)) {\n+        LOG_ERROR(\"getsockname() error (errno = %d)\", errno);\n+        return std::nullopt;\n+    }\n+    return address.sin_port;\n+}\n+\n+std::optional<size_t> read(PlatformSocketType socket, void* buffer, int bufferSize)\n+{\n+    ASSERT(isValid(socket));\n+\n+    ssize_t readSize = ::recv(socket, buffer, bufferSize, MSG_NOSIGNAL);\n+    if (readSize >= 0)\n+        return static_cast<size_t>(readSize);\n+\n+    LOG_ERROR(\"read error (errno = %d)\", errno);\n+    return std::nullopt;\n+}\n+\n+std::optional<size_t> write(PlatformSocketType socket, const void* data, int size)\n+{\n+    ASSERT(isValid(socket));\n+\n+    ssize_t writeSize = ::send(socket, data, size, MSG_NOSIGNAL);\n+    if (writeSize >= 0)\n+        return static_cast<size_t>(writeSize);\n+\n+    LOG_ERROR(\"write error (errno = %d)\", errno);\n+    return std::nullopt;\n+}\n+\n+void close(PlatformSocketType& socket)\n+{\n+    if (!isValid(socket))\n+        return;\n+\n+    ::close(socket);\n+    socket = INVALID_SOCKET_VALUE;\n+}\n+\n+PollingDescriptor preparePolling(PlatformSocketType socket)\n+{\n+    PollingDescriptor poll = { };\n+    poll.fd = socket;\n+    poll.events = POLLIN;\n+    return poll;\n+}\n+\n+bool poll(Vector<PollingDescriptor>& pollDescriptors, int timeout)\n+{\n+    int ret = ::poll(pollDescriptors.data(), pollDescriptors.size(), timeout);\n+    return ret > 0;\n+}\n+\n+bool isReadable(const PollingDescriptor& poll)\n+{\n+    return poll.revents & POLLIN;\n+}\n+\n+bool isWritable(const PollingDescriptor& poll)\n+{\n+    return poll.revents & POLLOUT;\n+}\n+\n+void markWaitingWritable(PollingDescriptor& poll)\n+{\n+    poll.events |= POLLOUT;\n+}\n+\n+void clearWaitingWritable(PollingDescriptor& poll)\n+{\n+    poll.events &= ~POLLOUT;\n+}\n+\n+} \/\/ namespace Socket\n+\n+} \/\/ namespace Inspector\n+\n+#endif \/\/ ENABLE(REMOTE_INSPECTOR)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/inspector\/remote\/socket\/posix\/RemoteInspectorSocketPOSIX.cpp","additions":276,"deletions":0,"binary":false,"changes":276,"status":"added"},{"patch":"@@ -0,0 +1,359 @@\n+\/*\n+ * Copyright (C) 2019 Sony Interactive Entertainment Inc.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in the\n+ *    documentation and\/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS\n+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n+ * THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+\n+#include \"config.h\"\n+#include \"RemoteInspectorSocket.h\"\n+\n+#if ENABLE(REMOTE_INSPECTOR)\n+\n+#include <mutex>\n+#include <ws2tcpip.h>\n+\n+namespace Inspector {\n+\n+namespace Socket {\n+\n+void init()\n+{\n+    static std::once_flag flag;\n+    std::call_once(flag, [] {\n+        WSADATA data;\n+        WORD versionRequested = MAKEWORD(2, 0);\n+\n+        WSAStartup(versionRequested, &data);\n+    });\n+}\n+\n+class Socket {\n+public:\n+    Socket()\n+        : m_socket(create())\n+    {\n+    }\n+\n+    explicit Socket(PlatformSocketType socket)\n+        : m_socket(socket)\n+    {\n+    }\n+\n+    explicit Socket(const Socket&) = delete;\n+    ~Socket()\n+    {\n+        close();\n+    }\n+\n+    void close()\n+    {\n+        if (isValid(m_socket)) {\n+            ::shutdown(m_socket, SD_BOTH);\n+            ::closesocket(m_socket);\n+            m_socket = INVALID_SOCKET_VALUE;\n+        }\n+    }\n+\n+    operator PlatformSocketType() const { return m_socket; }\n+    operator bool() const { return isValid(m_socket); }\n+\n+    PlatformSocketType leak()\n+    {\n+        auto socket = m_socket;\n+        m_socket = INVALID_SOCKET_VALUE;\n+        return socket;\n+    }\n+\n+private:\n+    static PlatformSocketType create()\n+    {\n+        PlatformSocketType socket = ::socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n+        if (socket == INVALID_SOCKET) {\n+            LOG_ERROR(\"Failed to create socket (errno = %d)\", WSAGetLastError());\n+            return INVALID_SOCKET_VALUE;\n+        }\n+        return socket;\n+    }\n+\n+    PlatformSocketType m_socket { INVALID_SOCKET_VALUE };\n+};\n+\n+static bool setOpt(PlatformSocketType socket, int optname, const void* optval, int optlen, const char* debug)\n+{\n+    int error = ::setsockopt(socket, SOL_SOCKET, optname, static_cast<const char*>(optval), optlen);\n+    if (error < 0) {\n+        UNUSED_PARAM(debug);\n+        LOG_ERROR(\"setsockopt(%s) failed (errno = %d)\", debug, WSAGetLastError());\n+        return false;\n+    }\n+    return true;\n+}\n+\n+static bool setOptEnabled(PlatformSocketType socket, int optname, bool flag, const char* debug)\n+{\n+    const int val = flag;\n+    return setOpt(socket, optname, &val, sizeof(val), debug);\n+}\n+\n+static bool enableOpt(PlatformSocketType socket, int optname, const char* debug)\n+{\n+    return setOptEnabled(socket, optname, true, debug);\n+}\n+\n+static PlatformSocketType connectTo(struct sockaddr_in& address)\n+{\n+    Socket socket;\n+    if (!socket)\n+        return INVALID_SOCKET_VALUE;\n+\n+    int error = ::connect(socket, (struct sockaddr*)&address, sizeof(address));\n+    if (error < 0)\n+        return INVALID_SOCKET_VALUE;\n+\n+    return socket.leak();\n+}\n+\n+static PlatformSocketType bindAndListen(struct sockaddr_in& address)\n+{\n+    Socket socket;\n+    if (!socket)\n+        return INVALID_SOCKET_VALUE;\n+\n+    if (!enableOpt(socket, SO_REUSEADDR, \"SO_REUSEADDR\"))\n+        return INVALID_SOCKET_VALUE;\n+\n+    \/\/ WinSock doesn't have `SO_REUSEPORT`.\n+\n+    int error = ::bind(socket, (struct sockaddr*)&address, sizeof(address));\n+    if (error < 0) {\n+        LOG_ERROR(\"bind() failed (errno = %d)\", WSAGetLastError());\n+        return INVALID_SOCKET_VALUE;\n+    }\n+\n+    error = ::listen(socket, 1);\n+    if (error < 0) {\n+        LOG_ERROR(\"listen() failed (errno = %d)\", WSAGetLastError());\n+        return INVALID_SOCKET_VALUE;\n+    }\n+\n+    return socket.leak();\n+}\n+\n+std::optional<PlatformSocketType> connect(const char* serverAddress, uint16_t serverPort)\n+{\n+    struct sockaddr_in address = { };\n+\n+    address.sin_family = AF_INET;\n+    int ret = ::inet_pton(AF_INET, serverAddress, &address.sin_addr);\n+    if (ret != 1) {\n+        struct addrinfo hints = { };\n+        struct addrinfo* res;\n+        hints.ai_socktype = SOCK_STREAM;\n+        hints.ai_family = AF_INET;\n+        if (!getaddrinfo(serverAddress, 0, &hints, &res)) {\n+            address.sin_addr = reinterpret_cast<struct sockaddr_in*>(res->ai_addr)->sin_addr;\n+            freeaddrinfo(res);\n+        }\n+    }\n+    address.sin_port = htons(serverPort);\n+\n+    auto socket = connectTo(address);\n+    if (!isValid(socket)) {\n+        LOG_ERROR(\"connecting to %s:%u failed (errno = %d)\", serverAddress, serverPort, WSAGetLastError());\n+        return std::nullopt;\n+    }\n+\n+    return socket;\n+}\n+\n+std::optional<PlatformSocketType> listen(const char* addressStr, uint16_t port)\n+{\n+    \/\/ FIXME: Support AF_INET6 connections.\n+    struct sockaddr_in address = { };\n+    address.sin_family = AF_INET;\n+    if (addressStr && *addressStr)\n+        ::inet_pton(AF_INET, addressStr, &address.sin_addr);\n+    else\n+        address.sin_addr.s_addr = htonl(INADDR_ANY);\n+    address.sin_port = htons(port);\n+\n+    auto socket = bindAndListen(address);\n+    if (!isValid(socket))\n+        return std::nullopt;\n+\n+    return socket;\n+}\n+\n+std::optional<PlatformSocketType> accept(PlatformSocketType socket)\n+{\n+    struct sockaddr_in address = { };\n+\n+    socklen_t len = sizeof(struct sockaddr_in);\n+    int fd = ::accept(socket, (struct sockaddr*) &address, &len);\n+    if (fd >= 0)\n+        return fd;\n+\n+    LOG_ERROR(\"failed (errno = %d)\", WSAGetLastError());\n+    return std::nullopt;\n+}\n+\n+std::optional<std::array<PlatformSocketType, 2>> createPair()\n+{\n+    struct sockaddr_in address;\n+    address.sin_family = AF_INET;\n+    address.sin_addr.s_addr = htonl(INADDR_LOOPBACK);\n+    address.sin_port = 0;\n+\n+    Socket server(bindAndListen(address));\n+    if (!server)\n+        return std::nullopt;\n+\n+    std::optional<uint16_t> serverPort = getPort(server);\n+    if (!serverPort)\n+        return std::nullopt;\n+\n+    address.sin_port = htons(*serverPort);\n+\n+    std::array<PlatformSocketType, 2> sockets;\n+    sockets[0] = connectTo(address);\n+    if (!isValid(sockets[0])) {\n+        LOG_ERROR(\"connecting failed (errno = %d)\", WSAGetLastError());\n+        return std::nullopt;\n+    }\n+\n+    if (auto socket = accept(server)) {\n+        sockets[1] = *socket;\n+        return sockets;\n+    }\n+\n+    return std::nullopt;\n+}\n+\n+bool setup(PlatformSocketType socket)\n+{\n+    if (!setOpt(socket, SO_RCVBUF, &BufferSize, sizeof(BufferSize), \"SO_RCVBUF\"))\n+        return false;\n+\n+    if (!setOpt(socket, SO_SNDBUF, &BufferSize, sizeof(BufferSize), \"SO_SNDBUF\"))\n+        return false;\n+\n+    return true;\n+}\n+\n+bool isValid(PlatformSocketType socket)\n+{\n+    return socket != INVALID_SOCKET_VALUE;\n+}\n+\n+bool isListening(PlatformSocketType socket)\n+{\n+    int out;\n+    socklen_t outSize = sizeof(out);\n+    if (getsockopt(socket, SOL_SOCKET, SO_ACCEPTCONN, reinterpret_cast<char*>(&out), &outSize) != -1)\n+        return out;\n+\n+    LOG_ERROR(\"getsockopt(SO_ACCEPTCONN) falied (errno = %d)\", WSAGetLastError());\n+    return false;\n+}\n+\n+std::optional<uint16_t> getPort(PlatformSocketType socket)\n+{\n+    ASSERT(isValid(socket));\n+\n+    struct sockaddr_in address = { };\n+    int len = sizeof(address);\n+    if (getsockname(socket, reinterpret_cast<struct sockaddr*>(&address), &len)) {\n+        LOG_ERROR(\"getsockname() failed (errno = %d)\", WSAGetLastError());\n+        return std::nullopt;\n+    }\n+    return ntohs(address.sin_port);\n+}\n+\n+std::optional<size_t> read(PlatformSocketType socket, void* buffer, int bufferSize)\n+{\n+    ASSERT(isValid(socket));\n+\n+    auto readSize = ::recv(socket, reinterpret_cast<char*>(buffer), bufferSize, 0);\n+    if (readSize != SOCKET_ERROR)\n+        return static_cast<size_t>(readSize);\n+\n+    LOG_ERROR(\"recv() failed (errno = %d)\", WSAGetLastError());\n+    return std::nullopt;\n+}\n+\n+std::optional<size_t> write(PlatformSocketType socket, const void* data, int size)\n+{\n+    ASSERT(isValid(socket));\n+\n+    auto writeSize = ::send(socket, reinterpret_cast<const char*>(data), size, 0);\n+    if (writeSize != SOCKET_ERROR)\n+        return static_cast<size_t>(writeSize);\n+\n+    LOG_ERROR(\"send() failed (errno = %d)\", WSAGetLastError());\n+    return std::nullopt;\n+}\n+\n+void close(PlatformSocketType& socket)\n+{\n+    Socket(socket).close();\n+    socket = INVALID_SOCKET_VALUE;\n+}\n+\n+PollingDescriptor preparePolling(PlatformSocketType socket)\n+{\n+    PollingDescriptor poll = { };\n+    poll.fd = socket;\n+    poll.events = POLLIN;\n+    return poll;\n+}\n+\n+bool poll(Vector<PollingDescriptor>& pollDescriptors, int timeout)\n+{\n+    int ret = ::WSAPoll(pollDescriptors.data(), pollDescriptors.size(), timeout);\n+    return ret > 0;\n+}\n+\n+bool isReadable(const PollingDescriptor& poll)\n+{\n+    return (poll.revents & POLLIN) || (poll.revents & POLLHUP);\n+}\n+\n+bool isWritable(const PollingDescriptor& poll)\n+{\n+    return poll.revents & POLLOUT;\n+}\n+\n+void markWaitingWritable(PollingDescriptor& poll)\n+{\n+    poll.events |= POLLOUT;\n+}\n+\n+void clearWaitingWritable(PollingDescriptor& poll)\n+{\n+    poll.events &= ~POLLOUT;\n+}\n+\n+} \/\/ namespace Socket\n+\n+} \/\/ namespace Inspector\n+\n+#endif \/\/ ENABLE(REMOTE_INSPECTOR)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/inspector\/remote\/socket\/win\/RemoteInspectorSocketWin.cpp","additions":359,"deletions":0,"binary":false,"changes":359,"status":"added"},{"patch":"@@ -725,1 +725,1 @@\n-    if (aInlineWatchpointSet.get() != bInlineWatchpointSet.get() || !aInlineWatchpointSet)\n+    if (!aInlineWatchpointSet || !bInlineWatchpointSet || aInlineWatchpointSet.get() != bInlineWatchpointSet.get())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/StructureInlines.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,172 +0,0 @@\n-\/*\n- * Copyright (C) 2012 Apple Inc. All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and\/or other materials provided with the distribution.\n- *\n- * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n- * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n- * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n- * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-#include \"config.h\"\n-#include \"CodeProfile.h\"\n-\n-#include \"CodeBlock.h\"\n-#include \"CodeProfiling.h\"\n-#include \"LinkBuffer.h\"\n-#include \"ProfileTreeNode.h\"\n-#include <wtf\/StackTrace.h>\n-#include <wtf\/text\/WTFString.h>\n-\n-namespace JSC {\n-\n-\/\/ Map from CodeType enum to a corresponding name.\n-static const char* const s_codeTypeNames[CodeProfile::NumberOfCodeTypes] = {\n-    \"[[EngineCode]]\",\n-    \"[[GlobalThunk]]\",\n-    \"[[RegExpCode]]\",\n-    \"[[DFGJIT]]\",\n-    \"[[BaselineOnly]]\",\n-    \"[[BaselineProfile]]\",\n-    \"[[BaselineOSR]]\",\n-    \"[[EngineFrame]]\"\n-};\n-\n-\/\/ Helper function, truncate traces to prune the output & make very verbose mode a little more readable.\n-static bool truncateTrace(const char* symbolName)\n-{\n-    return !strcmp(symbolName, \"JSC::BytecodeGenerator::generate()\")\n-        || !strcmp(symbolName, \"JSC::Parser<JSC::Lexer<unsigned char>>::parseInner()\")\n-        || !strcmp(symbolName, \"WTF::fastMalloc(unsigned long)\")\n-        || !strcmp(symbolName, \"WTF::calculateUTCOffset()\")\n-        || !strcmp(symbolName, \"JSC::DFG::ByteCodeParser::parseCodeBlock()\");\n-\n-}\n-\n-\/\/ Each trace consists of a sequence of zero or more 'EngineFrame' entries,\n-\/\/ followed by a sample in JIT code, or one or more 'EngineFrame' entries,\n-\/\/ followed by a 'EngineCode' terminator.\n-void CodeProfile::sample(void* pc, void** framePointer)\n-{\n-    \/\/ Disallow traces containing only a 'EngineCode' terminator, without any 'EngineFrame' frames.\n-    if (!framePointer)\n-        return;\n-\n-    while (framePointer) {\n-        CodeType type;\n-\n-#if ENABLE(JIT)\n-        \/\/ Determine if this sample fell in JIT code, and if so, from which JIT & why.\n-        void* ownerUID = CodeProfiling::getOwnerUIDForPC(pc);\n-\n-        if (!ownerUID)\n-            type = EngineFrame;\n-        else if (ownerUID == GLOBAL_THUNK_ID)\n-            type = GlobalThunk;\n-        else if (ownerUID == REGEXP_CODE_ID)\n-            type = RegExpCode;\n-        else {\n-            CodeBlock* codeBlock = static_cast<CodeBlock*>(ownerUID);\n-            if (codeBlock->jitType() == JITType::DFGJIT)\n-                type = DFGJIT;\n-            else if (!canCompile(codeBlock->capabilityLevelState()))\n-                type = BaselineOnly;\n-            else if (codeBlock->replacement())\n-                type = BaselineOSR;\n-            else\n-                type = BaselineProfile;\n-        }\n-#else\n-        type = EngineFrame;\n-#endif\n-\n-        \/\/ A sample in JIT code terminates the trace.\n-        m_samples.append(CodeRecord(pc, type));\n-        if (type != EngineFrame)\n-            return;\n-\n-#if OS(DARWIN) && CPU(X86_64)\n-        \/\/ Walk up the stack.\n-        pc = framePointer[1];\n-        framePointer = reinterpret_cast<void**>(*framePointer);\n-#elif OS(LINUX) && CPU(X86)\n-        \/\/ Don't unwind the stack as some dependent third party libraries\n-        \/\/ may be compiled with -fomit-frame-pointer.\n-        framePointer = 0;\n-#else\n-        \/\/ This platform is not yet supported!\n-        RELEASE_ASSERT_NOT_REACHED();\n-#endif\n-    }\n-\n-    \/\/ If we get here, we walked the entire stack without finding any frames of JIT code.\n-    m_samples.append(CodeRecord(0, EngineCode));\n-}\n-\n-void CodeProfile::report()\n-{\n-    dataLogF(\"<CodeProfiling %s:%d>\\n\", m_file.data(), m_lineNumber);\n-\n-    \/\/ How many frames of C-code to print - 0, if not verbose, 1 if verbose, up to 1024 if very verbose.\n-    unsigned recursionLimit = CodeProfiling::beVeryVerbose() ? 1024 : CodeProfiling::beVerbose();\n-\n-    ProfileTreeNode profile;\n-\n-    \/\/ Walk through the sample buffer.\n-    size_t trace = 0;\n-    while (trace < m_samples.size()) {\n-\n-        \/\/ All traces are zero or more 'EngineFrame's, followed by a non-'EngineFrame'.\n-        \/\/ Scan to find the last sample in the trace.\n-        size_t lastInTrace = trace;\n-        while (m_samples[lastInTrace].type == EngineFrame)\n-            ++lastInTrace;\n-\n-        \/\/ We use the last sample type to look up a name (used as a bucket in the profiler).\n-        ProfileTreeNode* callbacks = profile.sampleChild(s_codeTypeNames[m_samples[lastInTrace].type]);\n-\n-        \/\/ If there are any samples in C-code, add up to recursionLimit of them into the profile tree.\n-        size_t lastEngineFrame = lastInTrace;\n-        for (unsigned count = 0; lastEngineFrame > trace && count < recursionLimit; ++count) {\n-            --lastEngineFrame;\n-            ASSERT(m_samples[lastEngineFrame].type == EngineFrame);\n-            const char* name = \"<unknown>\";\n-            auto demangled = StackTrace::demangle(m_samples[lastEngineFrame].pc);\n-            if (demangled)\n-                name = demangled->demangledName() ? demangled->demangledName() : demangled->mangledName();\n-            callbacks = callbacks->sampleChild(name);\n-            if (truncateTrace(name))\n-                break;\n-        }\n-\n-        \/\/ Move on to the next trace.\n-        trace = lastInTrace + 1;\n-        ASSERT(trace <= m_samples.size());\n-    }\n-\n-    \/\/ Output the profile tree.\n-    dataLogF(\"Total samples: %lld\\n\", static_cast<long long>(profile.childCount()));\n-    profile.dump();\n-\n-    for (size_t i = 0 ; i < m_children.size(); ++i)\n-        m_children[i]->report();\n-\n-    dataLogF(\"<\/CodeProfiling %s:%d>\\n\", m_file.data(), m_lineNumber);\n-}\n-\n-}\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/tools\/CodeProfile.cpp","additions":0,"deletions":172,"binary":false,"changes":172,"status":"deleted"},{"patch":"@@ -1,89 +0,0 @@\n-\/*\n- * Copyright (C) 2012 Apple Inc. All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and\/or other materials provided with the distribution.\n- *\n- * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n- * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n- * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n- * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-#pragma once\n-\n-#include \"SourceCode.h\"\n-#include \"TieredMMapArray.h\"\n-#include <wtf\/text\/CString.h>\n-\n-namespace JSC {\n-\n-class CodeProfile {\n-    WTF_MAKE_FAST_ALLOCATED;\n-public:\n-    CodeProfile(const SourceCode& source, CodeProfile* parent)\n-        : m_file(String(source.provider()->url()).utf8())\n-        , m_lineNumber(source.firstLine().oneBasedInt())\n-        , m_parent(parent)\n-    {\n-        if (parent)\n-            parent->addChild(std::unique_ptr<CodeProfile>(this));\n-    }\n-\n-    void sample(void* pc, void** framePointer);\n-    void report();\n-\n-    CodeProfile* parent()\n-    {\n-        return m_parent;\n-    }\n-\n-    void addChild(std::unique_ptr<CodeProfile> child)\n-    {\n-        m_children.append(WTFMove(child));\n-    }\n-\n-    enum CodeType {\n-        EngineCode,\n-        GlobalThunk,\n-        RegExpCode,\n-        DFGJIT,\n-        BaselineOnly,\n-        BaselineProfile,\n-        BaselineOSR,\n-        EngineFrame,\n-        NumberOfCodeTypes\n-    };\n-\n-private:\n-    struct CodeRecord {\n-        CodeRecord(void* pc, CodeType type)\n-            : pc(pc)\n-            , type(type)\n-        {\n-        }\n-        void* pc;\n-        CodeType type;\n-    };\n-\n-    CString m_file;\n-    unsigned m_lineNumber;\n-    CodeProfile* m_parent;\n-    Vector<std::unique_ptr<CodeProfile>> m_children;\n-    TieredMMapArray<CodeRecord> m_samples;\n-};\n-\n-} \/\/ namespace JSC\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/tools\/CodeProfile.h","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"},{"patch":"@@ -1,169 +0,0 @@\n-\/*\n- * Copyright (C) 2012-2018 Apple Inc. All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and\/or other materials provided with the distribution.\n- *\n- * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n- * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n- * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n- * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-#include \"config.h\"\n-#include \"CodeProfiling.h\"\n-\n-#include \"CodeProfile.h\"\n-#include \"MachineContext.h\"\n-#include <wtf\/MetaAllocator.h>\n-\n-#if HAVE(SIGNAL_H)\n-#include <signal.h>\n-#endif\n-\n-#if HAVE(MACHINE_CONTEXT)\n-#include <sys\/time.h>\n-#endif\n-\n-namespace JSC {\n-\n-volatile CodeProfile* CodeProfiling::s_profileStack = 0;\n-CodeProfiling::Mode CodeProfiling::s_mode = CodeProfiling::Disabled;\n-WTF::MetaAllocatorTracker* CodeProfiling::s_tracker = 0;\n-\n-IGNORE_WARNINGS_BEGIN(\"missing-noreturn\")\n-\n-#if HAVE(MACHINE_CONTEXT)\n-\/\/ Helper function to start & stop the timer.\n-\/\/ Presently we're using the wall-clock timer, since this seems to give the best results.\n-static void setProfileTimer(unsigned usec)\n-{\n-    itimerval timer;\n-    timer.it_value.tv_sec = 0;\n-    timer.it_value.tv_usec = usec;\n-    timer.it_interval.tv_sec = 0;\n-    timer.it_interval.tv_usec = usec;\n-    setitimer(ITIMER_REAL, &timer, 0);\n-}\n-#endif\n-\n-IGNORE_WARNINGS_END\n-\n-#if HAVE(MACHINE_CONTEXT)\n-static void profilingTimer(int, siginfo_t*, void* uap)\n-{\n-    PlatformRegisters& platformRegisters = WTF::registersFromUContext(static_cast<ucontext_t*>(uap));\n-    if (auto instructionPointer = MachineContext::instructionPointer(platformRegisters)) {\n-        CodeProfiling::sample(\n-            instructionPointer->untaggedExecutableAddress(),\n-            reinterpret_cast<void**>(MachineContext::framePointer(platformRegisters)));\n-    }\n-}\n-#endif\n-\n-\/\/ Callback triggered when the timer is fired.\n-void CodeProfiling::sample(void* pc, void** framePointer)\n-{\n-    CodeProfile* profileStack = const_cast<CodeProfile*>(s_profileStack);\n-    if (profileStack)\n-        profileStack->sample(pc, framePointer);\n-}\n-\n-void CodeProfiling::notifyAllocator(WTF::MetaAllocator* allocator)\n-{\n-    \/\/ Check for JSC_CODE_PROFILING.\n-    const char* codeProfilingMode = getenv(\"JSC_CODE_PROFILING\");\n-    if (!codeProfilingMode)\n-        return;\n-\n-    \/\/ Check for a valid mode, currently \"1\", \"2\", or \"3\".\n-    if (!codeProfilingMode[0] || codeProfilingMode[1])\n-        return;\n-    switch (*codeProfilingMode) {\n-    case '1':\n-        s_mode = Enabled;\n-        break;\n-    case '2':\n-        s_mode = Verbose;\n-        break;\n-    case '3':\n-        s_mode = VeryVerbose;\n-        break;\n-    default:\n-        return;\n-    }\n-\n-    ASSERT(enabled());\n-    ASSERT(!s_tracker);\n-    s_tracker = new WTF::MetaAllocatorTracker();\n-    allocator->trackAllocations(s_tracker);\n-}\n-\n-void* CodeProfiling::getOwnerUIDForPC(void* address)\n-{\n-    if (!s_tracker)\n-        return 0;\n-    WTF::MetaAllocatorHandle* handle = s_tracker->find(address);\n-    if (!handle)\n-        return 0;\n-    return handle->ownerUID();\n-}\n-\n-void CodeProfiling::begin(const SourceCode& source)\n-{\n-    \/\/ Push a new CodeProfile onto the stack for each script encountered.\n-    CodeProfile* profileStack = const_cast<CodeProfile*>(s_profileStack);\n-    bool alreadyProfiling = profileStack;\n-    s_profileStack = profileStack = new CodeProfile(source, profileStack);\n-\n-    \/\/ Is the profiler already running - if so, the timer will already be set up.\n-    if (alreadyProfiling)\n-        return;\n-\n-#if HAVE(MACHINE_CONTEXT)\n-    \/\/ Regsiter a signal handler & itimer.\n-    struct sigaction action;\n-    action.sa_sigaction = reinterpret_cast<void (*)(int, siginfo_t *, void *)>(profilingTimer);\n-    sigfillset(&action.sa_mask);\n-    action.sa_flags = SA_SIGINFO;\n-    sigaction(SIGALRM, &action, 0);\n-    setProfileTimer(100);\n-#endif\n-}\n-\n-void CodeProfiling::end()\n-{\n-    \/\/ Pop the current profiler off the stack.\n-    CodeProfile* current = const_cast<CodeProfile*>(s_profileStack);\n-    ASSERT(current);\n-    s_profileStack = current->parent();\n-\n-    \/\/ Is this the outermost script being profiled? - if not, just return.\n-    \/\/ We perform all output of profiles recursively from the outermost script,\n-    \/\/ to minimize profiling overhead from skewing results.\n-    if (s_profileStack)\n-        return;\n-\n-#if HAVE(MACHINE_CONTEXT)\n-    \/\/ Stop profiling\n-    setProfileTimer(0);\n-#endif\n-\n-    current->report();\n-    delete current;\n-}\n-\n-}\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/tools\/CodeProfiling.cpp","additions":0,"deletions":169,"binary":false,"changes":169,"status":"deleted"},{"patch":"@@ -1,81 +0,0 @@\n-\/*\n- * Copyright (C) 2012 Apple Inc. All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and\/or other materials provided with the distribution.\n- *\n- * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n- * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n- * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n- * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-#pragma once\n-\n-namespace WTF {\n-\n-class MetaAllocator;\n-class MetaAllocatorTracker;\n-\n-}\n-\n-namespace JSC {\n-\n-class CodeProfile;\n-class SourceCode;\n-\n-class CodeProfiling {\n-    enum Mode {\n-        Disabled,\n-        Enabled,\n-        Verbose,\n-        VeryVerbose\n-    };\n-\n-public:\n-    CodeProfiling(const SourceCode& source)\n-        : m_active(enabled())\n-    {\n-        if (m_active)\n-            begin(source);\n-    }\n-\n-    ~CodeProfiling()\n-    {\n-        if (m_active)\n-            end();\n-    }\n-\n-    static bool enabled() { return s_mode != Disabled; }\n-    static bool beVerbose() { return s_mode >= Verbose; }\n-    static bool beVeryVerbose() { return s_mode >= VeryVerbose; }\n-\n-    static void notifyAllocator(WTF::MetaAllocator*);\n-    static void* getOwnerUIDForPC(void*);\n-    static void sample(void* pc, void** framePointer);\n-\n-private:\n-    void begin(const SourceCode&);\n-    void end();\n-\n-    bool m_active;\n-\n-    static Mode s_mode;\n-    static WTF::MetaAllocatorTracker* s_tracker;\n-    static volatile CodeProfile* s_profileStack;\n-};\n-\n-} \/\/ namespace JSC\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/tools\/CodeProfiling.h","additions":0,"deletions":81,"binary":false,"changes":81,"status":"deleted"},{"patch":"@@ -1,98 +0,0 @@\n-\/*\n- * Copyright (C) 2014, 2016 Apple Inc. All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and\/or other materials provided with the distribution.\n- *\n- * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''\n- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n- * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n- * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS\n- * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n- * THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-#include \"config.h\"\n-#include \"FunctionWhitelist.h\"\n-\n-#if ENABLE(JIT)\n-\n-#include \"CodeBlock.h\"\n-#include \"Options.h\"\n-#include <stdio.h>\n-#include <string.h>\n-\n-namespace JSC {\n-\n-FunctionWhitelist::FunctionWhitelist(const char* filename)\n-{\n-    if (!filename)\n-        return;\n-\n-    FILE* f = fopen(filename, \"r\");\n-    if (!f) {\n-        dataLogF(\"Failed to open file %s. Did you add the file-read-data entitlement to WebProcess.sb?\\n\", filename);\n-        return;\n-    }\n-\n-    m_hasActiveWhitelist = true;\n-\n-    char* line;\n-    char buffer[BUFSIZ];\n-    while ((line = fgets(buffer, sizeof(buffer), f))) {\n-        if (strstr(line, \"\/\/\") == line)\n-            continue;\n-\n-        \/\/ Get rid of newlines at the ends of the strings.\n-        size_t length = strlen(line);\n-        if (line[length - 1] == '\\n') {\n-            line[length - 1] = '\\0';\n-            length--;\n-        }\n-\n-        \/\/ Skip empty lines.\n-        if (!length)\n-            continue;\n-\n-        m_entries.add(String(line, length));\n-    }\n-\n-    int result = fclose(f);\n-    if (result)\n-        dataLogF(\"Failed to close file %s: %s\\n\", filename, strerror(errno));\n-}\n-\n-bool FunctionWhitelist::contains(CodeBlock* codeBlock) const\n-{\n-    if (!m_hasActiveWhitelist)\n-        return true;\n-\n-    if (m_entries.isEmpty())\n-        return false;\n-\n-    String name = String::fromUTF8(codeBlock->inferredName());\n-    if (m_entries.contains(name))\n-        return true;\n-\n-    String hash = String::fromUTF8(codeBlock->hashAsStringIfPossible());\n-    if (m_entries.contains(hash))\n-        return true;\n-\n-    return m_entries.contains(name + '#' + hash);\n-}\n-\n-} \/\/ namespace JSC\n-\n-#endif \/\/ ENABLE(JIT)\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/tools\/FunctionWhitelist.cpp","additions":0,"deletions":98,"binary":false,"changes":98,"status":"deleted"},{"patch":"","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmAirIRGenerator.h","additions":0,"deletions":0,"binary":false,"changes":0,"status":"deleted"},{"patch":"","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmAirIRGenerator32_64.cpp","additions":0,"deletions":0,"binary":false,"changes":0,"status":"deleted"},{"patch":"","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmAirIRGenerator64.cpp","additions":0,"deletions":0,"binary":false,"changes":0,"status":"deleted"},{"patch":"","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmAirIRGeneratorBase.h","additions":0,"deletions":0,"binary":false,"changes":0,"status":"deleted"},{"patch":"@@ -832,1 +832,1 @@\n-        Location shouldThrowLocation = allocate(shouldThrow);\n+    Location shouldThrowLocation = loadIfNecessary(shouldThrow);\n@@ -859,1 +859,1 @@\n-        Location shouldThrowLocation = allocate(shouldThrow);\n+    Location shouldThrowLocation = loadIfNecessary(shouldThrow);\n@@ -923,1 +923,1 @@\n-        Location shouldThrowLocation = allocate(shouldThrow);\n+    Location shouldThrowLocation = loadIfNecessary(shouldThrow);\n@@ -948,1 +948,1 @@\n-        Location shouldThrowLocation = allocate(shouldThrow);\n+    Location shouldThrowLocation = loadIfNecessary(shouldThrow);\n@@ -1112,1 +1112,1 @@\n-        Location shouldThrowLocation = allocate(shouldThrow);\n+    Location shouldThrowLocation = loadIfNecessary(shouldThrow);\n@@ -1135,1 +1135,1 @@\n-        Location shouldThrowLocation = allocate(shouldThrow);\n+    Location shouldThrowLocation = loadIfNecessary(shouldThrow);\n@@ -1159,1 +1159,1 @@\n-        Location shouldThrowLocation = allocate(shouldThrow);\n+    Location shouldThrowLocation = loadIfNecessary(shouldThrow);\n@@ -1264,1 +1264,1 @@\n-        Location resultLocation = allocate(result);\n+    Location resultLocation = loadIfNecessary(result);\n@@ -1282,1 +1282,1 @@\n-        Location resultLocation = allocate(result);\n+    Location resultLocation = loadIfNecessary(result);\n@@ -1441,1 +1441,1 @@\n-        Location resultLocation = allocate(result);\n+    Location resultLocation = loadIfNecessary(result);\n@@ -1465,0 +1465,6 @@\n+        LOG_INSTRUCTION(\"ArrayCopy\", dstTypeIndex, dst, dstOffset, srcTypeIndex, src, srcOffset, size);\n+        consume(dst);\n+        consume(dstOffset);\n+        consume(src);\n+        consume(srcOffset);\n+        consume(size);\n@@ -1482,1 +1488,1 @@\n-    Location shouldThrowLocation = allocate(shouldThrow);\n+    Location shouldThrowLocation = loadIfNecessary(shouldThrow);\n@@ -1497,0 +1503,4 @@\n+        LOG_INSTRUCTION(\"ArrayInitElem\", dstTypeIndex, dst, dstOffset, srcElementIndex, srcOffset, size);\n+        consume(dstOffset);\n+        consume(srcOffset);\n+        consume(size);\n@@ -1513,1 +1523,1 @@\n-    Location shouldThrowLocation = allocate(shouldThrow);\n+    Location shouldThrowLocation = loadIfNecessary(shouldThrow);\n@@ -1528,0 +1538,4 @@\n+        LOG_INSTRUCTION(\"ArrayInitData\", dstTypeIndex, dst, dstOffset, srcDataIndex, srcOffset, size);\n+        consume(dstOffset);\n+        consume(srcOffset);\n+        consume(size);\n@@ -1544,1 +1558,1 @@\n-    Location shouldThrowLocation = allocate(shouldThrow);\n+    Location shouldThrowLocation = loadIfNecessary(shouldThrow);\n@@ -1587,0 +1601,1 @@\n+    LOG_INSTRUCTION(\"AnyConvertExtern\", reference, RESULT(result));\n@@ -1592,1 +1607,9 @@\n-        result = reference;\n+    auto referenceLocation = reference.isConst() ? Location::none() : loadIfNecessary(reference);\n+    consume(reference);\n+    result = topValue(TypeKind::Externref);\n+    auto resultLocation = allocate(result);\n+    if (reference.isConst())\n+        emitMoveConst(reference, resultLocation);\n+    else\n+        emitMove(reference.type(), referenceLocation, resultLocation);\n+    LOG_INSTRUCTION(\"ExternConvertAny\", reference, RESULT(result));\n@@ -4113,0 +4136,2 @@\n+    for (const auto& value : m_parser->expressionStack())\n+        consume(value);\n@@ -4304,0 +4329,2 @@\n+    for (const auto& value : m_parser->expressionStack())\n+        consume(value);\n@@ -4498,0 +4525,13 @@\n+#if ASSERT_ENABLED\n+    if (shouldFuseBranchCompare && isCompareOpType(m_prevOpcode)\n+        && (m_parser->currentOpcode() == OpType::BrIf || m_parser->currentOpcode() == OpType::If)) {\n+        m_prevOpcode = m_parser->currentOpcode();\n+        return;\n+    }\n+    for (Value value : m_justPoppedStack) {\n+        ASSERT_WITH_MESSAGE(!value.isTemp(), \"Temp(%u) was not consumed by the instruction that popped it!\", value.asTemp());\n+        ASSERT(!value.isLocal()); \/\/ Change this if\/when we start register-allocating locals.\n+    }\n+    m_prevOpcode = m_parser->currentOpcode();\n+    m_justPoppedStack.clear();\n+#endif\n@@ -4522,1 +4562,7 @@\n-void BBQJIT::didPopValueFromStack(ExpressionType, ASCIILiteral) { }\n+void BBQJIT::didPopValueFromStack(Value value, ASCIILiteral)\n+{\n+    UNUSED_PARAM(value);\n+#if ASSERT_ENABLED\n+    m_justPoppedStack.append(value);\n+#endif\n+}\n@@ -4695,5 +4741,0 @@\n-        Location existingLocation = locationOf(value);\n-        if (existingLocation.isRegister()) {\n-            ASSERT(value.isFloat() == existingLocation.isFPR());\n-            return existingLocation;\n-        }\n@@ -4773,0 +4814,5 @@\n+#if ASSERT_ENABLED\n+    m_justPoppedStack.removeFirstMatching([&](Value& popped) -> bool {\n+        return popped.isTemp() && value.isTemp() && popped.asTemp() == value.asTemp();\n+    });\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmBBQJIT.cpp","additions":66,"deletions":20,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -2276,0 +2276,4 @@\n+#if ASSERT_ENABLED\n+    Vector<Value, 8> m_justPoppedStack;\n+    OpType m_prevOpcode;\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmBBQJIT.h","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -224,1 +224,1 @@\n-    Location resultLocation = allocate(result);\n+    Location resultLocation = loadIfNecessary(result);\n@@ -1508,1 +1508,1 @@\n-    Location allocationResultLocation = allocate(allocationResult);\n+    Location allocationResultLocation = loadIfNecessary(allocationResult);\n@@ -1521,2 +1521,1 @@\n-    Location resultLocation = allocate(result);\n-    emitMove(allocationResult, resultLocation);\n+    Location resultLocation;\n@@ -1527,0 +1526,2 @@\n+        resultLocation = allocate(result);\n+        emitMove(allocationResult.type(), allocationResultLocation, resultLocation);\n@@ -1529,0 +1530,3 @@\n+    } else {\n+        RELEASE_ASSERT(result.asTemp() == allocationResult.asTemp());\n+        resultLocation = allocationResultLocation;\n@@ -1792,0 +1796,2 @@\n+        LOG_INSTRUCTION(\"ArraySet\", typeIndex, arrayref, index, value);\n+        consume(value);\n@@ -1845,0 +1851,4 @@\n+        LOG_INSTRUCTION(\"ArrayFill\", typeIndex, arrayref, offset, value, size);\n+        consume(offset);\n+        consume(value);\n+        consume(size);\n@@ -1861,1 +1871,1 @@\n-    Location shouldThrowLocation = allocate(shouldThrow);\n+    Location shouldThrowLocation = loadIfNecessary(shouldThrow);\n@@ -1954,1 +1964,1 @@\n-    Location structLocation = allocate(result);\n+    Location structLocation = loadIfNecessary(result);\n@@ -1982,1 +1992,1 @@\n-    Location structLocation = allocate(allocationResult);\n+    Location structLocation = loadIfNecessary(allocationResult);\n@@ -1996,2 +2006,1 @@\n-    Location resultLocation = allocate(result);\n-    emitMove(allocationResult, resultLocation);\n+    Location resultLocation;\n@@ -1999,1 +2008,1 @@\n-    if (args.size())\n+    if (args.size()) {\n@@ -2001,0 +2010,6 @@\n+        resultLocation = allocate(result);\n+        emitMove(allocationResult.type(), structLocation, resultLocation);\n+    } else {\n+        RELEASE_ASSERT(result.asTemp() == allocationResult.asTemp());\n+        resultLocation = structLocation;\n+    }\n@@ -2082,1 +2097,1 @@\n-        emitThrowException(ExceptionType::NullStructSet);\n+\n@@ -2084,0 +2099,2 @@\n+        consume(value);\n+        emitThrowException(ExceptionType::NullStructSet);\n@@ -2108,1 +2125,1 @@\n-    Location resultLocation = allocate(result);\n+    Location resultLocation = loadIfNecessary(result);\n@@ -2985,1 +3002,1 @@\n-    LOG_INSTRUCTION(\"BrOnNull\/NonNull\", reference);\n+    LOG_INSTRUCTION(shouldNegate ? \"BrOnNonNull\" : \"BrOnNull\", reference);\n@@ -3490,0 +3507,1 @@\n+        consume(callee);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmBBQJIT32_64.cpp","additions":31,"deletions":13,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-    Location resultLocation = allocate(result);\n+    Location resultLocation = loadIfNecessary(result);\n@@ -1607,0 +1607,1 @@\n+        consume(initValue);\n@@ -1648,1 +1649,1 @@\n-    Location allocationResultLocation = allocate(allocationResult);\n+    Location allocationResultLocation = loadIfNecessary(allocationResult);\n@@ -1661,2 +1662,1 @@\n-    Location resultLocation = allocate(result);\n-    emitMove(allocationResult, resultLocation);\n+    Location resultLocation;\n@@ -1667,0 +1667,2 @@\n+        resultLocation = allocate(result);\n+        emitMove(allocationResult.type(), allocationResultLocation, resultLocation);\n@@ -1669,0 +1671,3 @@\n+    } else {\n+        RELEASE_ASSERT(result.asTemp() == allocationResult.asTemp());\n+        resultLocation = allocationResultLocation;\n@@ -1938,0 +1943,2 @@\n+        LOG_INSTRUCTION(\"ArraySet\", typeIndex, arrayref, index, value);\n+        consume(value);\n@@ -1991,0 +1998,4 @@\n+        LOG_INSTRUCTION(\"ArrayFill\", typeIndex, arrayref, offset, value, size);\n+        consume(offset);\n+        consume(value);\n+        consume(size);\n@@ -2011,0 +2022,1 @@\n+        consume(value);\n@@ -2032,1 +2044,1 @@\n-    Location shouldThrowLocation = allocate(shouldThrow);\n+    Location shouldThrowLocation = loadIfNecessary(shouldThrow);\n@@ -2132,1 +2144,1 @@\n-    Location structLocation = allocate(result);\n+    Location structLocation = loadIfNecessary(result);\n@@ -2163,1 +2175,1 @@\n-    Location structLocation = allocate(allocationResult);\n+    Location structLocation = loadIfNecessary(allocationResult);\n@@ -2177,2 +2189,1 @@\n-    Location resultLocation = allocate(result);\n-    emitMove(allocationResult, resultLocation);\n+    Location resultLocation;\n@@ -2180,1 +2191,1 @@\n-    if (args.size())\n+    if (args.size()) {\n@@ -2182,0 +2193,6 @@\n+        resultLocation = allocate(result);\n+        emitMove(allocationResult.type(), structLocation, resultLocation);\n+    } else {\n+        RELEASE_ASSERT(result.asTemp() == allocationResult.asTemp());\n+        resultLocation = structLocation;\n+    }\n@@ -2266,1 +2283,1 @@\n-        emitThrowException(ExceptionType::NullStructSet);\n+\n@@ -2268,0 +2285,2 @@\n+        consume(value);\n+        emitThrowException(ExceptionType::NullStructSet);\n@@ -2292,1 +2311,1 @@\n-    Location resultLocation = allocate(result);\n+    Location resultLocation = loadIfNecessary(result);\n@@ -3056,1 +3075,1 @@\n-    LOG_INSTRUCTION(\"BrOnNull\/NonNull\", reference);\n+    LOG_INSTRUCTION(shouldNegate ? \"BrOnNonNull\" : \"BrOnNull\", reference);\n@@ -4575,0 +4594,1 @@\n+        consume(callee);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmBBQJIT64.cpp","additions":33,"deletions":13,"binary":false,"changes":46,"status":"modified"},{"patch":"","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmCalleeRegistry.cpp","additions":0,"deletions":0,"binary":false,"changes":0,"status":"deleted"},{"patch":"","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmCalleeRegistry.h","additions":0,"deletions":0,"binary":false,"changes":0,"status":"deleted"},{"patch":"@@ -1,160 +0,0 @@\n-\/*\n- * Copyright (C) 2017-2018 Apple Inc. All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and\/or other materials provided with the distribution.\n- *\n- * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n- * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n- * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n- * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-#pragma once\n-\n-#if ENABLE(WEBASSEMBLY)\n-\n-#include \"MacroAssemblerCodeRef.h\"\n-#include \"WasmCallee.h\"\n-#include \"WasmEmbedder.h\"\n-#include <wtf\/CrossThreadCopier.h>\n-#include <wtf\/Lock.h>\n-#include <wtf\/RefPtr.h>\n-#include <wtf\/SharedTask.h>\n-#include <wtf\/ThreadSafeRefCounted.h>\n-#include <wtf\/text\/WTFString.h>\n-\n-namespace JSC {\n-\n-namespace Wasm {\n-\n-struct Context;\n-class EntryPlan;\n-struct ModuleInformation;\n-struct UnlinkedWasmToWasmCall;\n-enum class MemoryMode : uint8_t;\n-\n-\/\/ FIXME: Rename this, since it's not a CodeBlock\n-\/\/ https:\/\/bugs.webkit.org\/show_bug.cgi?id=203694\n-class CodeBlock : public ThreadSafeRefCounted<CodeBlock> {\n-public:\n-    typedef void CallbackType(Ref<CodeBlock>&&);\n-    using AsyncCompilationCallback = RefPtr<WTF::SharedTask<CallbackType>>;\n-    static Ref<CodeBlock> create(Context*, MemoryMode, ModuleInformation&, RefPtr<LLIntCallees>);\n-\n-    void waitUntilFinished();\n-    void compileAsync(Context*, AsyncCompilationCallback&&);\n-\n-    bool compilationFinished()\n-    {\n-        return m_compilationFinished.load();\n-    }\n-    bool runnable() { return compilationFinished() && !m_errorMessage; }\n-\n-    \/\/ Note, we do this copy to ensure it's thread safe to have this\n-    \/\/ called from multiple threads simultaneously.\n-    String errorMessage()\n-    {\n-        ASSERT(!runnable());\n-        return crossThreadCopy(m_errorMessage);\n-    }\n-\n-    unsigned functionImportCount() const { return m_wasmToWasmExitStubs.size(); }\n-\n-    \/\/ These two callee getters are only valid once the callees have been populated.\n-\n-    Callee& embedderEntrypointCalleeFromFunctionIndexSpace(unsigned functionIndexSpace)\n-    {\n-        ASSERT(runnable());\n-        RELEASE_ASSERT(functionIndexSpace >= functionImportCount());\n-        unsigned calleeIndex = functionIndexSpace - functionImportCount();\n-\n-        auto callee = m_embedderCallees.get(calleeIndex);\n-        RELEASE_ASSERT(callee);\n-        return *callee;\n-    }\n-\n-    Callee& wasmEntrypointCalleeFromFunctionIndexSpace(unsigned functionIndexSpace)\n-    {\n-        ASSERT(runnable());\n-        RELEASE_ASSERT(functionIndexSpace >= functionImportCount());\n-        unsigned calleeIndex = functionIndexSpace - functionImportCount();\n-#if ENABLE(WEBASSEMBLY_B3JIT)\n-        if (m_omgCallees[calleeIndex])\n-            return *m_omgCallees[calleeIndex].get();\n-        if (m_bbqCallees[calleeIndex])\n-            return *m_bbqCallees[calleeIndex].get();\n-#endif\n-        return m_llintCallees->at(calleeIndex).get();\n-    }\n-\n-#if ENABLE(WEBASSEMBLY_B3JIT)\n-    BBQCallee& wasmBBQCalleeFromFunctionIndexSpace(unsigned functionIndexSpace)\n-    {\n-        ASSERT(runnable());\n-        RELEASE_ASSERT(functionIndexSpace >= functionImportCount());\n-        unsigned calleeIndex = functionIndexSpace - functionImportCount();\n-        return *m_bbqCallees[calleeIndex].get();\n-    }\n-#endif\n-\n-    MacroAssemblerCodePtr<WasmEntryPtrTag>* entrypointLoadLocationFromFunctionIndexSpace(unsigned functionIndexSpace)\n-    {\n-        RELEASE_ASSERT(functionIndexSpace >= functionImportCount());\n-        unsigned calleeIndex = functionIndexSpace - functionImportCount();\n-        return &m_wasmIndirectCallEntryPoints[calleeIndex];\n-    }\n-\n-    MacroAssemblerCodePtr<WasmEntryPtrTag> wasmToWasmExitStub(unsigned functionIndex)\n-    {\n-        return m_wasmToWasmExitStubs[functionIndex].code();\n-    }\n-\n-    bool isSafeToRun(MemoryMode);\n-\n-    MemoryMode mode() const { return m_mode; }\n-\n-    ~CodeBlock();\n-private:\n-    friend class Plan;\n-#if ENABLE(WEBASSEMBLY_B3JIT)\n-    friend class BBQPlan;\n-    friend class OMGPlan;\n-    friend class OMGForOSREntryPlan;\n-#endif\n-\n-    CodeBlock(Context*, MemoryMode, ModuleInformation&, RefPtr<LLIntCallees>);\n-    void setCompilationFinished();\n-    unsigned m_calleeCount;\n-    MemoryMode m_mode;\n-#if ENABLE(WEBASSEMBLY_B3JIT)\n-    Vector<RefPtr<OMGCallee>> m_omgCallees;\n-    Vector<RefPtr<BBQCallee>> m_bbqCallees;\n-#endif\n-    RefPtr<LLIntCallees> m_llintCallees;\n-    HashMap<uint32_t, RefPtr<EmbedderEntrypointCallee>, DefaultHash<uint32_t>, WTF::UnsignedWithZeroKeyHashTraits<uint32_t>> m_embedderCallees;\n-    Vector<MacroAssemblerCodePtr<WasmEntryPtrTag>> m_wasmIndirectCallEntryPoints;\n-    Vector<Vector<UnlinkedWasmToWasmCall>> m_wasmToWasmCallsites;\n-    Vector<MacroAssemblerCodeRef<WasmEntryPtrTag>> m_wasmToWasmExitStubs;\n-    RefPtr<EntryPlan> m_plan;\n-    std::atomic<bool> m_compilationFinished { false };\n-    String m_errorMessage;\n-    Lock m_lock;\n-};\n-\n-} } \/\/ namespace JSC::Wasm\n-\n-#endif \/\/ ENABLE(WEBASSEMBLY)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmCodeBlock.h","additions":0,"deletions":160,"binary":false,"changes":160,"status":"deleted"},{"patch":"@@ -307,1 +307,1 @@\n-        EncodedJSValue obj;\n+        JSValue result;\n@@ -309,1 +309,1 @@\n-            obj = arrayNew(m_instance, typeIndex, size, value.getVector());\n+            result = arrayNew(m_instance, typeIndex, size, value.getVector());\n@@ -311,2 +311,2 @@\n-            obj = arrayNew(m_instance, typeIndex, size, value.getValue());\n-        if (UNLIKELY(!obj))\n+            result = arrayNew(m_instance, typeIndex, size, value.getValue());\n+        if (UNLIKELY(result.isNull()))\n@@ -314,1 +314,1 @@\n-        return ConstExprValue(Strong<JSObject>(vm, JSValue::decode(obj).getObject()));\n+        return ConstExprValue(Strong<JSObject>(vm, asObject(result)));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmConstExprGenerator.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2787,0 +2787,1 @@\n+        WASM_TRY_ADD_TO_CONTEXT(addDrop(ref));\n@@ -3380,2 +3381,2 @@\n-        WASM_PARSER_FAIL_IF(!m_expressionStack.size(), \"can't drop on empty stack\"_s);\n-        auto last = m_expressionStack.takeLast();\n+        TypedExpression last;\n+        WASM_TRY_POP_EXPRESSION_STACK_INTO(last, \"can't drop on empty stack\"_s);\n@@ -3383,1 +3384,0 @@\n-        m_context.didPopValueFromStack(last, \"Drop\"_s);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmFunctionParser.h","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,148 +0,0 @@\n-\/*\n- * Copyright (C) 2019-2021 Apple Inc. All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and\/or other materials provided with the distribution.\n- *\n- * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n- * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n- * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n- * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-#include \"config.h\"\n-#include \"WasmOMGForOSREntryPlan.h\"\n-\n-#if ENABLE(WEBASSEMBLY_B3JIT)\n-\n-#include \"JITCompilation.h\"\n-#include \"LinkBuffer.h\"\n-#include \"WasmB3IRGenerator.h\"\n-#include \"WasmCallee.h\"\n-#include \"WasmMachineThreads.h\"\n-#include \"WasmNameSection.h\"\n-#include \"WasmSignatureInlines.h\"\n-#include <wtf\/DataLog.h>\n-#include <wtf\/Locker.h>\n-#include <wtf\/StdLibExtras.h>\n-\n-namespace JSC { namespace Wasm {\n-\n-namespace WasmOMGForOSREntryPlanInternal {\n-static constexpr bool verbose = false;\n-}\n-\n-OMGForOSREntryPlan::OMGForOSREntryPlan(Context* context, Ref<Module>&& module, Ref<Callee>&& callee, uint32_t functionIndex, uint32_t loopIndex, MemoryMode mode, CompletionTask&& task)\n-    : Base(context, makeRef(const_cast<ModuleInformation&>(module->moduleInformation())), WTFMove(task))\n-    , m_module(WTFMove(module))\n-    , m_codeBlock(*m_module->codeBlockFor(mode))\n-    , m_callee(WTFMove(callee))\n-    , m_functionIndex(functionIndex)\n-    , m_loopIndex(loopIndex)\n-{\n-    ASSERT(Options::useOMGJIT());\n-    setMode(mode);\n-    ASSERT(m_codeBlock->runnable());\n-    ASSERT(m_codeBlock.ptr() == m_module->codeBlockFor(m_mode));\n-    dataLogLnIf(WasmOMGForOSREntryPlanInternal::verbose, \"Starting OMGForOSREntry plan for \", functionIndex, \" of module: \", RawPointer(&m_module.get()));\n-}\n-\n-void OMGForOSREntryPlan::work(CompilationEffort)\n-{\n-    ASSERT(m_codeBlock->runnable());\n-    ASSERT(m_codeBlock.ptr() == m_module->codeBlockFor(mode()));\n-    const FunctionData& function = m_moduleInformation->functions[m_functionIndex];\n-\n-    const uint32_t functionIndexSpace = m_functionIndex + m_module->moduleInformation().importFunctionCount();\n-    ASSERT(functionIndexSpace < m_module->moduleInformation().functionIndexSpaceSize());\n-\n-    SignatureIndex signatureIndex = m_moduleInformation->internalFunctionSignatureIndices[m_functionIndex];\n-    const Signature& signature = SignatureInformation::get(signatureIndex);\n-\n-    Vector<UnlinkedWasmToWasmCall> unlinkedCalls;\n-    CompilationContext context;\n-    unsigned osrEntryScratchBufferSize = 0;\n-    auto parseAndCompileResult = parseAndCompile(context, function, signature, unlinkedCalls, osrEntryScratchBufferSize, m_moduleInformation.get(), m_mode, CompilationMode::OMGForOSREntryMode, m_functionIndex, m_loopIndex);\n-\n-    if (UNLIKELY(!parseAndCompileResult)) {\n-        Locker locker { m_lock };\n-        fail(makeString(parseAndCompileResult.error(), \"when trying to tier up \", String::number(m_functionIndex)));\n-        return;\n-    }\n-\n-    Entrypoint omgEntrypoint;\n-    LinkBuffer linkBuffer(*context.wasmEntrypointJIT, nullptr, LinkBuffer::Profile::Wasm, JITCompilationCanFail);\n-    if (UNLIKELY(linkBuffer.didFailToAllocate())) {\n-        Locker locker { m_lock };\n-        Base::fail(makeString(\"Out of executable memory while tiering up function at index \", String::number(m_functionIndex)));\n-        return;\n-    }\n-\n-    omgEntrypoint.compilation = makeUnique<Compilation>(\n-        FINALIZE_WASM_CODE_FOR_MODE(CompilationMode::OMGForOSREntryMode, linkBuffer, JITCompilationPtrTag, \"WebAssembly OMGForOSREntry function[%i] %s name %s\", m_functionIndex, signature.toString().ascii().data(), makeString(IndexOrName(functionIndexSpace, m_moduleInformation->nameSection->get(functionIndexSpace))).ascii().data()),\n-        WTFMove(context.wasmEntrypointByproducts));\n-\n-    omgEntrypoint.calleeSaveRegisters = WTFMove(parseAndCompileResult.value()->entrypoint.calleeSaveRegisters);\n-\n-    ASSERT(m_codeBlock.ptr() == m_module->codeBlockFor(mode()));\n-    Ref<OMGForOSREntryCallee> callee = OMGForOSREntryCallee::create(WTFMove(omgEntrypoint), functionIndexSpace, m_moduleInformation->nameSection->get(functionIndexSpace), osrEntryScratchBufferSize, m_loopIndex, WTFMove(unlinkedCalls));\n-    {\n-        MacroAssembler::repatchPointer(parseAndCompileResult.value()->calleeMoveLocation, CalleeBits::boxWasm(callee.ptr()));\n-\n-        Locker locker { m_codeBlock->m_lock };\n-        for (auto& call : callee->wasmToWasmCallsites()) {\n-            MacroAssemblerCodePtr<WasmEntryPtrTag> entrypoint;\n-            if (call.functionIndexSpace < m_module->moduleInformation().importFunctionCount())\n-                entrypoint = m_codeBlock->m_wasmToWasmExitStubs[call.functionIndexSpace].code();\n-            else\n-                entrypoint = m_codeBlock->wasmEntrypointCalleeFromFunctionIndexSpace(call.functionIndexSpace).entrypoint().retagged<WasmEntryPtrTag>();\n-\n-            MacroAssembler::repatchNearCall(call.callLocation, CodeLocationLabel<WasmEntryPtrTag>(entrypoint));\n-        }\n-\n-        resetInstructionCacheOnAllThreads();\n-        WTF::storeStoreFence();\n-\n-        {\n-            switch (m_callee->compilationMode()) {\n-            case CompilationMode::LLIntMode: {\n-                LLIntCallee* llintCallee = static_cast<LLIntCallee*>(m_callee.ptr());\n-                Locker locker { llintCallee->tierUpCounter().m_lock };\n-                llintCallee->setOSREntryCallee(callee.copyRef(), mode());\n-                llintCallee->tierUpCounter().m_loopCompilationStatus = LLIntTierUpCounter::CompilationStatus::Compiled;\n-                break;\n-            }\n-            case CompilationMode::BBQMode: {\n-                BBQCallee* bbqCallee = static_cast<BBQCallee*>(m_callee.ptr());\n-                Locker locker { bbqCallee->tierUpCount()->getLock() };\n-                bbqCallee->setOSREntryCallee(callee.copyRef(), mode());\n-                bbqCallee->tierUpCount()->osrEntryTriggers()[m_loopIndex] = TierUpCount::TriggerReason::CompilationDone;\n-                bbqCallee->tierUpCount()->m_compilationStatusForOMGForOSREntry = TierUpCount::CompilationStatus::Compiled;\n-                break;\n-            }\n-            default:\n-                RELEASE_ASSERT_NOT_REACHED();\n-            }\n-        }\n-    }\n-    dataLogLnIf(WasmOMGForOSREntryPlanInternal::verbose, \"Finished OMGForOSREntry \", m_functionIndex);\n-    Locker locker { m_lock };\n-    complete();\n-}\n-\n-} } \/\/ namespace JSC::Wasm\n-\n-#endif \/\/ ENABLE(WEBASSEMBLY_B3JIT)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmOMGForOSREntryPlan.cpp","additions":0,"deletions":148,"binary":false,"changes":148,"status":"deleted"},{"patch":"@@ -1680,1 +1680,1 @@\n-    return arrayNew(instance, typeIndex, size, value);\n+    return JSValue::encode(arrayNew(instance, typeIndex, size, value));\n@@ -1688,1 +1688,1 @@\n-    return arrayNew(instance, typeIndex, size, v128_t { lane0, lane1 });\n+    return JSValue::encode(arrayNew(instance, typeIndex, size, v128_t { lane0, lane1 }));\n@@ -1727,18 +1727,1 @@\n-    JSWebAssemblyArray* array = nullptr;\n-    if (fieldType.type.is<PackedType>()) {\n-        switch (fieldType.type.as<PackedType>()) {\n-        case Wasm::PackedType::I8: {\n-        FixedVector<uint8_t> v(size);\n-        v.fill(0); \/\/ Prevent GC from tracing uninitialized array slots\n-            array = JSWebAssemblyArray::tryCreate(vm, globalObject->webAssemblyArrayStructure(), fieldType, size, WTFMove(v), arrayRTT);\n-        break;\n-    }\n-        case Wasm::PackedType::I16: {\n-        FixedVector<uint16_t> v(size);\n-        v.fill(0);\n-            array = JSWebAssemblyArray::tryCreate(vm, globalObject->webAssemblyArrayStructure(), fieldType, size, WTFMove(v), arrayRTT);\n-        break;\n-    }\n-        }\n-        return JSValue::encode(array);\n-    }\n+    return JSValue::encode(JSWebAssemblyArray::create(vm, globalObject->webAssemblyArrayStructure(), fieldType, size, arrayRTT));\n@@ -1746,32 +1729,0 @@\n-    ASSERT(fieldType.type.is<Type>());\n-    switch (fieldType.type.as<Type>().kind) {\n-    case Wasm::TypeKind::I32:\n-    case Wasm::TypeKind::F32: {\n-        FixedVector<uint32_t> v(size);\n-        v.fill(0);\n-        array = JSWebAssemblyArray::tryCreate(vm, globalObject->webAssemblyArrayStructure(), fieldType, size, WTFMove(v), arrayRTT);\n-        break;\n-    }\n-    case Wasm::TypeKind::I64:\n-    case Wasm::TypeKind::F64: {\n-        FixedVector<uint64_t> v(size);\n-        v.fill(0);\n-        array = JSWebAssemblyArray::tryCreate(vm, globalObject->webAssemblyArrayStructure(), fieldType, size, WTFMove(v), arrayRTT);\n-        break;\n-    }\n-    case Wasm::TypeKind::Ref:\n-    case Wasm::TypeKind::RefNull: {\n-        FixedVector<uint64_t> v(size);\n-        v.fill(JSValue::encode(jsNull()));\n-        array = JSWebAssemblyArray::tryCreate(vm, globalObject->webAssemblyArrayStructure(), fieldType, size, WTFMove(v), arrayRTT);\n-        break;\n-    }\n-    case Wasm::TypeKind::V128: {\n-        FixedVector<v128_t> v(size);\n-        v.fill(vectorAllZeros());\n-        array = JSWebAssemblyArray::tryCreate(vm, globalObject->webAssemblyArrayStructure(), fieldType, size, WTFMove(v), arrayRTT);\n-        break;\n-    }\n-    default:\n-        RELEASE_ASSERT_NOT_REACHED();\n-    }\n@@ -1779,1 +1730,0 @@\n-    return JSValue::encode(array ? array : jsNull());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmOperations.cpp","additions":3,"deletions":53,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"JSWebAssemblyInstance.h\"\n@@ -39,0 +40,2 @@\n+#include \"WasmModuleInformation.h\"\n+#include \"WasmTypeDefinition.h\"\n@@ -51,1 +54,1 @@\n-JSWebAssemblyArray* fillArray(JSWebAssemblyInstance* instance, Wasm::FieldType fieldType, uint32_t size, EncodedJSValue value, RefPtr<const Wasm::RTT> rtt)\n+JSWebAssemblyArray* fillArray(JSWebAssemblyInstance* instance, Wasm::FieldType fieldType, uint32_t size, T value, RefPtr<const Wasm::RTT> rtt)\n@@ -56,3 +59,1 @@\n-    FixedVector<T> values(size);\n-    if (!size)\n-        return JSWebAssemblyArray::tryCreate(vm, globalObject->webAssemblyArrayStructure(), fieldType, size, WTFMove(values), rtt);\n+    auto* array = JSWebAssemblyArray::create(vm, globalObject->webAssemblyArrayStructure(), fieldType, size, rtt);\n@@ -60,2 +61,2 @@\n-    values.fill(static_cast<T>(value));\n-    return JSWebAssemblyArray::tryCreate(vm, globalObject->webAssemblyArrayStructure(), fieldType, size, WTFMove(values), rtt);\n+    array->fill(0, static_cast<T>(value), size);\n+    return array;\n@@ -64,1 +65,1 @@\n-inline EncodedJSValue arrayNew(JSWebAssemblyInstance* instance, uint32_t typeIndex, uint32_t size, EncodedJSValue encValue)\n+inline JSValue arrayNew(JSWebAssemblyInstance* instance, uint32_t typeIndex, uint32_t size, EncodedJSValue encValue)\n@@ -76,1 +77,1 @@\n-        return JSValue::encode(jsNull());\n+        return jsNull();\n@@ -83,2 +84,1 @@\n-        ASSERT(encValue <= UINT32_MAX);\n-        array = fillArray<uint8_t>(instance, fieldType, size, encValue, arrayRTT);\n+        array = fillArray<uint8_t>(instance, fieldType, size, static_cast<uint8_t>(encValue), arrayRTT);\n@@ -88,2 +88,1 @@\n-        ASSERT(encValue <= UINT32_MAX);\n-        array = fillArray<uint16_t>(instance, fieldType, size, encValue, arrayRTT);\n+        array = fillArray<uint16_t>(instance, fieldType, size, static_cast<uint16_t>(encValue), arrayRTT);\n@@ -93,2 +92,1 @@\n-        ASSERT(encValue <= UINT32_MAX);\n-        array = fillArray<uint32_t>(instance, fieldType, size, encValue, arrayRTT);\n+        array = fillArray<uint32_t>(instance, fieldType, size, static_cast<uint32_t>(encValue), arrayRTT);\n@@ -105,1 +103,1 @@\n-    return JSValue::encode(array ? JSValue(array) : jsNull());\n+    return array;\n@@ -108,1 +106,1 @@\n-inline EncodedJSValue arrayNew(JSWebAssemblyInstance* instance, uint32_t typeIndex, uint32_t size, v128_t value)\n+inline JSValue arrayNew(JSWebAssemblyInstance* instance, uint32_t typeIndex, uint32_t size, v128_t value)\n@@ -123,1 +121,1 @@\n-        return JSValue::encode(jsNull());\n+        return jsNull();\n@@ -125,4 +123,3 @@\n-    FixedVector<v128_t> values(size);\n-    values.fill(value);\n-    JSObject* array = JSWebAssemblyArray::tryCreate(vm, globalObject->webAssemblyArrayStructure(), fieldType, size, WTFMove(values), rtt);\n-    return JSValue::encode(array ? JSValue(array) : jsNull());\n+    auto* array = JSWebAssemblyArray::create(vm, globalObject->webAssemblyArrayStructure(), fieldType, size, rtt);\n+    array->fill(0, value, size);\n+    return array;\n@@ -137,1 +134,1 @@\n-    FixedVector<T> values(size);\n+    auto* array = JSWebAssemblyArray::create(vm, globalObject->webAssemblyArrayStructure(), fieldType, size, rtt);\n@@ -139,1 +136,1 @@\n-        return JSWebAssemblyArray::tryCreate(vm, globalObject->webAssemblyArrayStructure(), fieldType, size, WTFMove(values), rtt);\n+        return array;\n@@ -141,0 +138,1 @@\n+    auto* values = std::bit_cast<T*>(array->data());\n@@ -146,1 +144,3 @@\n-    return JSWebAssemblyArray::tryCreate(vm, globalObject->webAssemblyArrayStructure(), fieldType, size, WTFMove(values), rtt);\n+    if (array->elementsAreRefTypes())\n+        vm.writeBarrier(array);\n+    return array;\n@@ -150,1 +150,1 @@\n-inline EncodedJSValue arrayNewFixed(JSWebAssemblyInstance* instance, uint32_t typeIndex, uint32_t size, uint64_t* arguments)\n+inline JSValue arrayNewFixed(JSWebAssemblyInstance* instance, uint32_t typeIndex, uint32_t size, uint64_t* arguments)\n@@ -181,1 +181,1 @@\n-    return JSValue::encode(array ? JSValue(array) : jsNull());\n+    return array;\n@@ -185,4 +185,1 @@\n-EncodedJSValue createArrayValue(JSWebAssemblyInstance* instance, FieldType fieldType, size_t arraySize, FixedVector<T>&& tempValues, RefPtr<const Wasm::RTT> rtt)\n-{\n-    JSGlobalObject* globalObject = instance->globalObject();\n-    VM& vm = globalObject->vm();\n+EncodedJSValue createArrayFromDataSegment(JSWebAssemblyInstance* instance, FieldType elementType, size_t arraySize, unsigned dataSegmentIndex, unsigned offset, RefPtr<const Wasm::RTT> rtt)\n@@ -190,1 +187,0 @@\n-    JSWebAssemblyArray* array = JSWebAssemblyArray::tryCreate(vm, globalObject->webAssemblyArrayStructure(), fieldType, arraySize, WTFMove(tempValues), rtt);\n@@ -192,2 +188,0 @@\n-    return JSValue::encode(array ? JSValue(array) : jsNull());\n-}\n@@ -195,3 +189,0 @@\n-template<typename T>\n-EncodedJSValue createArrayFromDataSegment(JSWebAssemblyInstance* instance, FieldType elementType, size_t arraySize,\n-    unsigned dataSegmentIndex, unsigned offset, FixedVector<T>&& tempValues, RefPtr<const Wasm::RTT> rtt)\n@@ -212,0 +203,3 @@\n+    JSGlobalObject* globalObject = instance->globalObject();\n+    VM& vm = globalObject->vm();\n+    auto* array = JSWebAssemblyArray::create(vm, globalObject->webAssemblyArrayStructure(), elementType, arraySize, rtt);\n@@ -213,1 +207,1 @@\n-    if (!instance->copyDataSegment(dataSegmentIndex, offset, arrayLengthInBytes, reinterpret_cast<uint8_t*>(tempValues.mutableSpan().data()))) {\n+    if (!instance->copyDataSegment(array, dataSegmentIndex, offset, arrayLengthInBytes, reinterpret_cast<uint8_t*>(array->data()))) {\n@@ -218,1 +212,1 @@\n-\n+    return JSValue::encode(array);\n@@ -220,2 +214,0 @@\n-    return createArrayValue(instance, elementType, arraySize, WTFMove(tempValues), rtt);\n-}\n@@ -223,2 +215,0 @@\n-inline EncodedJSValue createArrayFromElementSegment(JSWebAssemblyInstance* instance, size_t arraySize, unsigned elemSegmentIndex, unsigned offset, FixedVector<uint64_t>&& tempValues, RefPtr<const Wasm::RTT> rtt)\n-{\n@@ -226,1 +216,0 @@\n-    instance->copyElementSegment(instance->module().moduleInformation().elements[elemSegmentIndex], offset, arraySize, tempValues.mutableSpan().data());\n@@ -229,1 +218,0 @@\n-    return createArrayValue(instance, FieldType { StorageType { Types::I64 }, Mutability::Mutable }, arraySize, WTFMove(tempValues), rtt);\n@@ -248,2 +236,1 @@\n-            FixedVector<uint8_t> values(arraySize);\n-            return createArrayFromDataSegment(instance, fieldType, arraySize, dataSegmentIndex, offset, WTFMove(values), arrayRTT);\n+            return createArrayFromDataSegment<uint8_t>(instance, fieldType, arraySize, dataSegmentIndex, offset, arrayRTT);\n@@ -252,2 +239,1 @@\n-            FixedVector<uint16_t> values(arraySize);\n-            return createArrayFromDataSegment(instance, fieldType, arraySize, dataSegmentIndex, offset, WTFMove(values), arrayRTT);\n+            return createArrayFromDataSegment<uint16_t>(instance, fieldType, arraySize, dataSegmentIndex, offset, arrayRTT);\n@@ -262,2 +248,1 @@\n-            FixedVector<uint32_t> values(arraySize);\n-            return createArrayFromDataSegment(instance, fieldType, arraySize, dataSegmentIndex, offset, WTFMove(values), arrayRTT);\n+            return createArrayFromDataSegment<uint32_t>(instance, fieldType, arraySize, dataSegmentIndex, offset, arrayRTT);\n@@ -267,2 +252,1 @@\n-            FixedVector<uint64_t> values(arraySize);\n-            return createArrayFromDataSegment(instance, fieldType, arraySize, dataSegmentIndex, offset, WTFMove(values), arrayRTT);\n+            return createArrayFromDataSegment<uint64_t>(instance, fieldType, arraySize, dataSegmentIndex, offset, arrayRTT);\n@@ -271,2 +255,1 @@\n-            FixedVector<v128_t> values(arraySize);\n-            return createArrayFromDataSegment(instance, fieldType, arraySize, dataSegmentIndex, offset, WTFMove(values), arrayRTT);\n+            return createArrayFromDataSegment<v128_t>(instance, fieldType, arraySize, dataSegmentIndex, offset, arrayRTT);\n@@ -298,2 +281,4 @@\n-    size_t segmentLength = instance->elementAt(elemSegmentIndex) ? instance->elementAt(elemSegmentIndex)->length() : 0U;\n-    if (UNLIKELY(sumOverflows<uint32_t>(offset, arraySize) || ((offset + arraySize) > segmentLength)))\n+    auto element = instance->elementAt(elemSegmentIndex);\n+    size_t segmentLength = element ? element->length() : 0U;\n+    auto calculatedArrayEnd = CheckedUint32 { offset } + arraySize;\n+    if (UNLIKELY(calculatedArrayEnd.hasOverflowed() || calculatedArrayEnd > segmentLength))\n@@ -302,2 +287,12 @@\n-    FixedVector<uint64_t> values(arraySize);\n-    return createArrayFromElementSegment(instance, arraySize, elemSegmentIndex, offset, WTFMove(values), arrayRTT);\n+    StorageType storageType(element->elementType);\n+    if (segmentLength) {\n+        size_t elementTypeSize = typeSizeInBytes(storageType);\n+        auto newArraySizeInBytes = CheckedSize { elementTypeSize } * arraySize;\n+        if (UNLIKELY(newArraySizeInBytes.hasOverflowed() || newArraySizeInBytes > maxArraySizeInBytes))\n+            return JSValue::encode(jsNull());\n+    }\n+    JSGlobalObject* globalObject = instance->globalObject();\n+    VM& vm = globalObject->vm();\n+    auto* array = JSWebAssemblyArray::create(vm, globalObject->webAssemblyArrayStructure(), FieldType { storageType, Mutability::Mutable }, arraySize, arrayRTT);\n+    instance->copyElementSegment(array, instance->module().moduleInformation().elements[elemSegmentIndex], offset, arraySize, std::bit_cast<uint64_t*>(array->data()));\n+    return JSValue::encode(array);\n@@ -435,4 +430,1 @@\n-    if (size > 0) {\n-        instance->copyElementSegment(*instance->elementAt(srcElementIndex), srcOffset, size, dstObject->reftypeData() + dstOffset);\n-        instance->vm().writeBarrier(dstObject);\n-    }\n+    instance->copyElementSegment(dstObject, *instance->elementAt(srcElementIndex), srcOffset, size, dstObject->reftypeData() + dstOffset);\n@@ -457,2 +449,4 @@\n-    CheckedUint32 lastSrcElementIndexChecked = srcOffset;\n-    lastSrcElementIndexChecked += size;\n+    size_t elementSize = dstObject->elementType().type.elementSize();\n+    CheckedUint32 lastSrcByteChecked = size;\n+    lastSrcByteChecked *= elementSize;\n+    lastSrcByteChecked += srcOffset;\n@@ -460,1 +454,1 @@\n-    if (lastSrcElementIndexChecked.hasOverflowed())\n+    if (lastSrcByteChecked.hasOverflowed())\n@@ -463,2 +457,1 @@\n-    size_t elementSize = dstObject->elementType().type.elementSize();\n-    return instance->copyDataSegment(srcDataIndex, srcOffset, size * elementSize, dstObject->data() + dstOffset * elementSize);\n+    return instance->copyDataSegment(dstObject, srcDataIndex, srcOffset, size * elementSize, dstObject->data() + dstOffset * elementSize);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmOperationsInlines.h","additions":60,"deletions":67,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -472,2 +472,2 @@\n-            EncodedJSValue result = Wasm::arrayNew(instance, instruction.m_typeIndex, size, vectorAllZeros());\n-            if (JSValue::decode(result).isNull())\n+            JSValue result = Wasm::arrayNew(instance, instruction.m_typeIndex, size, vectorAllZeros());\n+            if (UNLIKELY(result.isNull()))\n@@ -475,1 +475,1 @@\n-            WASM_RETURN(result);\n+            WASM_RETURN(JSValue::encode(result));\n@@ -483,1 +483,4 @@\n-        WASM_RETURN(Wasm::arrayNewFixed(instance, instruction.m_typeIndex, size, reinterpret_cast<uint64_t*>(&callFrame->r(instruction.m_value))));\n+        JSValue result = Wasm::arrayNewFixed(instance, instruction.m_typeIndex, size, reinterpret_cast<uint64_t*>(&callFrame->r(instruction.m_value)));\n+        if (UNLIKELY(result.isNull()))\n+            WASM_THROW(Wasm::ExceptionType::BadArrayNew);\n+        WASM_RETURN(JSValue::encode(result));\n@@ -487,2 +490,2 @@\n-    EncodedJSValue result = Wasm::arrayNew(instance, instruction.m_typeIndex, size, value);\n-    if (JSValue::decode(result).isNull())\n+    JSValue result = Wasm::arrayNew(instance, instruction.m_typeIndex, size, value);\n+    if (UNLIKELY(result.isNull()))\n@@ -490,1 +493,1 @@\n-    WASM_RETURN(result);\n+    WASM_RETURN(JSValue::encode(result));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmSlowPaths.cpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -237,0 +237,11 @@\n+constexpr bool isCompareOpType(OpType op)\n+{\n+    switch (op) {\n+#define CREATE_CASE(name, ...) case name: return true;\n+    FOR_EACH_WASM_COMPARE_UNARY_OP(CREATE_CASE)\n+    FOR_EACH_WASM_COMPARE_BINARY_OP(CREATE_CASE)\n+#undef CREATE_CASE\n+    default:\n+        return false;\n+    }\n+}\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmTypeDefinition.h","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -98,0 +98,2 @@\n+def isCompare(op):\n+    return op[\"category\"] == \"comparison\"\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/generateWasm.py","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -153,0 +153,4 @@\n+defines.append(\"\\n\\n#define FOR_EACH_WASM_COMPARE_UNARY_OP(macro)\")\n+defines.extend([op for op in opcodeWithTypesMacroizer(lambda op: isUnary(op) and isCompare(op))])\n+defines.append(\"\\n\\n#define FOR_EACH_WASM_COMPARE_BINARY_OP(macro)\")\n+defines.extend([op for op in opcodeWithTypesMacroizer(lambda op: isBinary(op) and isCompare(op))])\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/generateWasmOpsHeader.py","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-JSWebAssemblyArray::JSWebAssemblyArray(VM& vm, Structure* structure, Wasm::FieldType elementType, size_t size, FixedVector<uint8_t>&& payload, RefPtr<const Wasm::RTT> rtt)\n+JSWebAssemblyArray::JSWebAssemblyArray(VM& vm, Structure* structure, Wasm::FieldType elementType, size_t size, RefPtr<const Wasm::RTT> rtt)\n@@ -51,9 +51,0 @@\n-    , m_payload8(WTFMove(payload))\n-{\n-}\n-\n-JSWebAssemblyArray::JSWebAssemblyArray(VM& vm, Structure* structure, Wasm::FieldType elementType, size_t size, FixedVector<uint16_t>&& payload, RefPtr<const Wasm::RTT> rtt)\n-    : Base(vm, structure, rtt)\n-    , m_elementType(elementType)\n-    , m_size(size)\n-    , m_payload16(WTFMove(payload))\n@@ -61,0 +52,10 @@\n+    if (m_elementType.type.is<Wasm::PackedType>()) {\n+        switch (m_elementType.type.as<Wasm::PackedType>()) {\n+        case Wasm::PackedType::I8:\n+            new (&m_payload8) FixedVector<uint8_t>(m_size);\n+            m_payload8.fill(0);\n+            return;\n+        case Wasm::PackedType::I16:\n+            new (&m_payload16) FixedVector<uint16_t>(m_size);\n+            m_payload16.fill(0);\n+            return;\n@@ -62,7 +63,1 @@\n-\n-JSWebAssemblyArray::JSWebAssemblyArray(VM& vm, Structure* structure, Wasm::FieldType elementType, size_t size, FixedVector<uint32_t>&& payload, RefPtr<const Wasm::RTT> rtt)\n-    : Base(vm, structure, rtt)\n-    , m_elementType(elementType)\n-    , m_size(size)\n-    , m_payload32(WTFMove(payload))\n-{\n+        return;\n@@ -71,6 +66,17 @@\n-JSWebAssemblyArray::JSWebAssemblyArray(VM& vm, Structure* structure, Wasm::FieldType elementType, size_t size, FixedVector<uint64_t>&& payload, RefPtr<const Wasm::RTT> rtt)\n-    : Base(vm, structure, rtt)\n-    , m_elementType(elementType)\n-    , m_size(size)\n-    , m_payload64(WTFMove(payload))\n-{\n+    switch (m_elementType.type.as<Wasm::Type>().kind) {\n+    case Wasm::TypeKind::I32:\n+    case Wasm::TypeKind::F32:\n+        new (&m_payload32) FixedVector<uint32_t>(m_size);\n+        m_payload32.fill(0);\n+        return;\n+    case Wasm::TypeKind::V128:\n+        new (&m_payload128) FixedVector<v128_t>(m_size);\n+        m_payload128.fill(v128_t { });\n+        return;\n+    default:\n+        new (&m_payload64) FixedVector<uint64_t>(m_size);\n+        if (elementsAreRefTypes())\n+            m_payload64.fill(JSValue::encode(jsNull()));\n+        else\n+            m_payload64.fill(0);\n+        return;\n@@ -79,6 +85,0 @@\n-JSWebAssemblyArray::JSWebAssemblyArray(VM& vm, Structure* structure, Wasm::FieldType elementType, size_t size, FixedVector<v128_t>&& payload, RefPtr<const Wasm::RTT> rtt)\n-    : Base(vm, structure, rtt)\n-    , m_elementType(elementType)\n-    , m_size(size)\n-    , m_payload128(WTFMove(payload))\n-{\n@@ -118,1 +118,1 @@\n-    if (isRefType(m_elementType.type.unpacked()) && !isI31ref(m_elementType.type.unpacked())) {\n+    if (elementsAreRefTypes()) {\n@@ -158,1 +158,1 @@\n-    if (isRefType(m_elementType.type.unpacked()) && !isI31ref(m_elementType.type.unpacked())) {\n+    if (elementsAreRefTypes()) {\n@@ -160,9 +160,2 @@\n-        if (&dst == this && dstOffset <= srcOffset + size && srcOffset <= dstOffset + size) {\n-            FixedVector<uint64_t> tmpCopy(size);\n-            std::copy(m_payload64.begin() + srcOffset, m_payload64.begin() + srcOffset + size, tmpCopy.mutableSpan().data());\n-            for (size_t i = 0; i < size; i++)\n-                dst.set(dstOffset + i, tmpCopy[i]);\n-        } else {\n-            for (size_t i = 0; i < size; i++)\n-                dst.set(dstOffset + i, m_payload64[srcOffset + i]);\n-        }\n+        gcSafeMemmove(dst.m_payload64.mutableSpan().subspan(dstOffset).data(), m_payload64.span().subspan(srcOffset).data(), size * sizeof(JSValue));\n+        vm().writeBarrier(this);\n@@ -175,1 +168,1 @@\n-            memmove(dst.m_payload8.mutableSpan().subspan(dstOffset).data(), m_payload8.span().subspan(srcOffset).data(), size);\n+            memmove(dst.m_payload8.mutableSpan().subspan(dstOffset).data(), m_payload8.span().subspan(srcOffset).data(), size * sizeof(uint8_t));\n@@ -178,1 +171,1 @@\n-            std::copy(m_payload16.begin() + srcOffset, m_payload16.begin() + srcOffset + size, dst.m_payload16.begin() + dstOffset);\n+            memmove(dst.m_payload16.mutableSpan().subspan(dstOffset).data(), m_payload16.span().subspan(srcOffset).data(), size * sizeof(uint16_t));\n@@ -186,1 +179,1 @@\n-        std::copy(m_payload32.begin() + srcOffset, m_payload32.begin() + srcOffset + size, dst.m_payload32.begin() + dstOffset);\n+        memmove(dst.m_payload32.mutableSpan().subspan(dstOffset).data(), m_payload32.span().subspan(srcOffset).data(), size * sizeof(uint32_t));\n@@ -189,1 +182,1 @@\n-        std::copy(m_payload128.begin() + srcOffset, m_payload128.begin() + srcOffset + size, dst.m_payload128.begin() + dstOffset);\n+        memmove(dst.m_payload128.mutableSpan().subspan(dstOffset).data(), m_payload128.span().subspan(srcOffset).data(), size * sizeof(v128_t));\n@@ -192,1 +185,1 @@\n-        std::copy(m_payload64.begin() + srcOffset, m_payload64.begin() + srcOffset + size, dst.m_payload64.begin() + dstOffset);\n+        memmove(dst.m_payload64.mutableSpan().subspan(dstOffset).data(), m_payload64.span().subspan(srcOffset).data(), size * sizeof(uint64_t));\n@@ -210,4 +203,2 @@\n-    if (isRefType(thisObject->elementType().type)) {\n-        for (unsigned i = 0; i < thisObject->size(); ++i)\n-            visitor.append(bitwise_cast<WriteBarrier<Unknown>>(thisObject->get(i)));\n-    }\n+    if (thisObject->elementsAreRefTypes())\n+        visitor.appendValues(bitwise_cast<WriteBarrier<Unknown>*>(thisObject->reftypeData()), thisObject->size());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/js\/JSWebAssemblyArray.cpp","additions":40,"deletions":49,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"WasmFormat.h\"\n@@ -56,2 +57,1 @@\n-    template <typename ElementType>\n-    static JSWebAssemblyArray* tryCreate(VM& vm, Structure* structure, Wasm::FieldType elementType, size_t size, FixedVector<ElementType>&& payload, RefPtr<const Wasm::RTT> rtt)\n+    static JSWebAssemblyArray* create(VM& vm, Structure* structure, Wasm::FieldType elementType, size_t size, RefPtr<const Wasm::RTT> rtt)\n@@ -59,6 +59,3 @@\n-        void* buffer = tryAllocateCell<JSWebAssemblyArray>(vm);\n-        if (UNLIKELY(!buffer))\n-            return nullptr;\n-        JSWebAssemblyArray* array = new (NotNull, buffer) JSWebAssemblyArray(vm, structure, elementType, size, WTFMove(payload), rtt);\n-        array->finishCreation(vm);\n-        return array;\n+        auto* object = new (NotNull, allocateCell<JSWebAssemblyArray>(vm)) JSWebAssemblyArray(vm, structure, elementType, size, rtt);\n+        object->finishCreation(vm);\n+        return object;\n@@ -97,0 +94,4 @@\n+    bool elementsAreRefTypes() const\n+    {\n+        return Wasm::isRefType(m_elementType.type.unpacked());\n+    }\n@@ -99,1 +100,1 @@\n-        RELEASE_ASSERT(m_elementType.type.unpacked().isRef() || m_elementType.type.unpacked().isRefNull());\n+        RELEASE_ASSERT(elementsAreRefTypes());\n@@ -214,5 +215,1 @@\n-    JSWebAssemblyArray(VM&, Structure*, Wasm::FieldType, size_t, FixedVector<uint8_t>&&, RefPtr<const Wasm::RTT>);\n-    JSWebAssemblyArray(VM&, Structure*, Wasm::FieldType, size_t, FixedVector<uint16_t>&&, RefPtr<const Wasm::RTT>);\n-    JSWebAssemblyArray(VM&, Structure*, Wasm::FieldType, size_t, FixedVector<uint32_t>&&, RefPtr<const Wasm::RTT>);\n-    JSWebAssemblyArray(VM&, Structure*, Wasm::FieldType, size_t, FixedVector<uint64_t>&&, RefPtr<const Wasm::RTT>);\n-    JSWebAssemblyArray(VM&, Structure*, Wasm::FieldType, size_t, FixedVector<v128_t>&&, RefPtr<const Wasm::RTT>);\n+    JSWebAssemblyArray(VM&, Structure*, Wasm::FieldType, size_t, RefPtr<const Wasm::RTT>);\n@@ -229,0 +226,1 @@\n+        void* zeroInit { nullptr };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/js\/JSWebAssemblyArray.h","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -1,99 +0,0 @@\n-\/*\n- * Copyright (C) 2017-2021 Apple Inc. All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and\/or other materials provided with the distribution.\n- *\n- * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n- * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n- * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n- * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n- * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n- * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n- * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n- * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\n-#pragma once\n-\n-#if ENABLE(WEBASSEMBLY)\n-\n-#include \"CallLinkInfo.h\"\n-#include \"DeferredWorkTimer.h\"\n-#include \"JSCast.h\"\n-#include \"Structure.h\"\n-#include \"WasmCallee.h\"\n-#include \"WasmFormat.h\"\n-#include \"WasmModule.h\"\n-#include <wtf\/Bag.h>\n-#include <wtf\/Ref.h>\n-#include <wtf\/Vector.h>\n-\n-namespace JSC {\n-\n-class JSWebAssemblyMemory;\n-\n-namespace Wasm {\n-class Plan;\n-}\n-\n-class JSWebAssemblyCodeBlock final : public JSCell {\n-public:\n-    typedef JSCell Base;\n-    static constexpr unsigned StructureFlags = Base::StructureFlags | StructureIsImmortal;\n-\n-    static JSWebAssemblyCodeBlock* create(VM&, Ref<Wasm::CodeBlock>, const Wasm::ModuleInformation&);\n-    static Structure* createStructure(VM& vm, JSGlobalObject* globalObject, JSValue prototype)\n-    {\n-        return Structure::create(vm, globalObject, prototype, TypeInfo(CellType, StructureFlags), info());\n-    }\n-\n-    template<typename CellType, SubspaceAccess mode>\n-    static IsoSubspace* subspaceFor(VM& vm)\n-    {\n-        return vm.webAssemblyCodeBlockSpace<mode>();\n-    }\n-\n-    Wasm::CodeBlock& codeBlock() { return m_codeBlock.get(); }\n-\n-    MacroAssemblerCodePtr<WasmEntryPtrTag> wasmToEmbedderStub(size_t importFunctionNum) { return m_wasmToJSExitStubs[importFunctionNum].code(); }\n-\n-    void finishCreation(VM&);\n-\n-    void clearJSCallICs(VM&);\n-\n-    bool runnable() const { return !m_errorMessage; }\n-\n-    String errorMessage()\n-    {\n-        ASSERT(!runnable());\n-        return m_errorMessage;\n-    }\n-\n-    void finalizeUnconditionally(VM&);\n-\n-private:\n-    JSWebAssemblyCodeBlock(VM&, Ref<Wasm::CodeBlock>&&, const Wasm::ModuleInformation&);\n-    DECLARE_EXPORT_INFO;\n-    static constexpr bool needsDestruction = true;\n-    static void destroy(JSCell*);\n-    DECLARE_VISIT_CHILDREN;\n-\n-    Ref<Wasm::CodeBlock> m_codeBlock;\n-    Vector<MacroAssemblerCodeRef<WasmEntryPtrTag>> m_wasmToJSExitStubs;\n-    Bag<CallLinkInfo> m_callLinkInfos;\n-    String m_errorMessage;\n-};\n-\n-} \/\/ namespace JSC\n-\n-#endif \/\/ ENABLE(WEBASSEMBLY)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/js\/JSWebAssemblyCodeBlock.h","additions":0,"deletions":99,"binary":false,"changes":99,"status":"deleted"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"JSWebAssemblyArray.h\"\n@@ -525,1 +526,1 @@\n-bool JSWebAssemblyInstance::copyDataSegment(uint32_t segmentIndex, uint32_t offset, uint32_t lengthInBytes, uint8_t* values)\n+bool JSWebAssemblyInstance::copyDataSegment(JSWebAssemblyArray* array, uint32_t segmentIndex, uint32_t offset, uint32_t lengthInBytes, uint8_t* values)\n@@ -545,0 +546,4 @@\n+    if (array->elementsAreRefTypes()) {\n+        gcSafeMemcpy(std::bit_cast<uint64_t*>(values), std::bit_cast<const uint64_t*>(segmentData), lengthInBytes);\n+        m_vm->writeBarrier(array);\n+    } else\n@@ -550,1 +555,1 @@\n-void JSWebAssemblyInstance::copyElementSegment(const Element& segment, uint32_t srcOffset, uint32_t length, uint64_t* values)\n+void JSWebAssemblyInstance::copyElementSegment(JSWebAssemblyArray* array, const Element& segment, uint32_t srcOffset, uint32_t length, uint64_t* values)\n@@ -557,0 +562,5 @@\n+    auto set = [&](size_t index, uint64_t value) {\n+        values[index] = value;\n+        if (array->elementsAreRefTypes())\n+            m_vm->writeBarrier(array);\n+    };\n@@ -564,1 +574,1 @@\n-            values[i] = static_cast<uint64_t>(JSValue::encode(jsNull()));\n+            set(i, static_cast<uint64_t>(JSValue::encode(jsNull())));\n@@ -576,1 +586,1 @@\n-            values[i] = static_cast<uint64_t>(JSValue::encode(value));\n+            set(i, static_cast<uint64_t>(JSValue::encode(value)));\n@@ -581,1 +591,1 @@\n-            values[i] = loadI64Global(initialBitsOrIndex);\n+            set(i, loadI64Global(initialBitsOrIndex));\n@@ -591,1 +601,1 @@\n-        values[i] = result;\n+        set(i, result);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/js\/JSWebAssemblyInstance.cpp","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -134,2 +134,2 @@\n-    bool copyDataSegment(uint32_t segmentIndex, uint32_t offset, uint32_t lengthInBytes, uint8_t* values);\n-    void copyElementSegment(const Wasm::Element& segment, uint32_t srcOffset, uint32_t length, uint64_t* values);\n+    bool copyDataSegment(JSWebAssemblyArray*, uint32_t segmentIndex, uint32_t offset, uint32_t lengthInBytes, uint8_t* values);\n+    void copyElementSegment(JSWebAssemblyArray*, const Wasm::Element& segment, uint32_t srcOffset, uint32_t length, uint64_t* values);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/js\/JSWebAssemblyInstance.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -364,1 +364,1 @@\n-                if (!isSubtype(globalValue->global()->type(), global.type))\n+                if (!isSubtype(globalValue->global()->type(), global.type) || !isSubtype(global.type, globalValue->global()->type()))\n@@ -396,1 +396,1 @@\n-            if (!Wasm::isSubtype(actualType, expectedType))\n+            if (!Wasm::isSubtype(actualType, expectedType) || !Wasm::isSubtype(expectedType, actualType))\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/js\/WebAssemblyModuleRecord.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-#if OS(DARWIN) && USE(APPLE_INTERNAL_SDK)\n+#if OS(DARWIN) && !PLATFORM(JAVA)\n@@ -71,3 +71,0 @@\n-#if USE(APPLE_INTERNAL_SDK)\n-#include <sys\/reason.h>\n-#endif\n@@ -929,1 +926,1 @@\n-#if OS(DARWIN) && USE(APPLE_INTERNAL_SDK)\n+#if OS(DARWIN) && !PLATFORM(JAVA)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/Assertions.h","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -91,0 +91,1 @@\n+requires (WTF::HasRefPtrMemberFunctions<T>::value)\n@@ -93,1 +94,0 @@\n-    if constexpr (std::is_base_of_v<ThreadSafeRefCountedBase, T>) {\n@@ -97,1 +97,5 @@\n-    } else {\n+}\n+template<typename T, typename... Parameters, typename... Arguments>\n+requires (!WTF::HasRefPtrMemberFunctions<T>::value)\n+CrossThreadTask createCrossThreadTask(T& callee, void (T::*method)(Parameters...), const Arguments&... arguments)\n+{\n@@ -101,1 +105,0 @@\n-    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/CrossThreadTask.h","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -534,2 +534,1 @@\n-#if HAVE(STD_FILESYSTEM) || HAVE(STD_EXPERIMENTAL_FILESYSTEM)\n-\n+#if !PLATFORM(JAVA)\n@@ -616,1 +615,2 @@\n-\n+#endif\n+#if HAVE(STD_FILESYSTEM) || HAVE(STD_EXPERIMENTAL_FILESYSTEM)\n@@ -656,0 +656,2 @@\n+    if (isAncestor(oldPath, newPath))\n+        return false;\n@@ -836,0 +838,10 @@\n+bool isAncestor(const String& possibleAncestor, const String& possibleChild)\n+{\n+    auto possibleChildLexicallyNormal = lexicallyNormal(possibleChild);\n+    auto possibleAncestorLexicallyNormal = lexicallyNormal(possibleAncestor);\n+    if (possibleChildLexicallyNormal.endsWith(std::filesystem::path::preferred_separator))\n+        possibleChildLexicallyNormal = possibleChildLexicallyNormal.left(possibleChildLexicallyNormal.length() - 1);\n+    if (possibleAncestorLexicallyNormal.endsWith(std::filesystem::path::preferred_separator))\n+        possibleAncestorLexicallyNormal = possibleAncestorLexicallyNormal.left(possibleAncestorLexicallyNormal.length() - 1);\n+    return possibleChildLexicallyNormal.startsWith(possibleAncestorLexicallyNormal) && possibleChildLexicallyNormal.length() != possibleAncestorLexicallyNormal.length();\n+}\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/FileSystem.cpp","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -133,1 +133,0 @@\n-WTF_EXPORT_PRIVATE String pathByAppendingComponent(const String& path, const String& component);\n@@ -140,0 +139,1 @@\n+WTF_EXPORT_PRIVATE bool isAncestor(const String& first, const String& second);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/FileSystem.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,4 +93,0 @@\n-    constexpr bool operator!=(const GenericTimeMixin& other) const\n-    {\n-        return m_value != other.m_value;\n-    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/GenericTimeMixin.h","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-            std::memory_order_relaxed);\n+            std::memory_order_release);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/LockAlgorithm.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,0 +52,2 @@\n+    if (a == b)\n+        return a;\n@@ -60,1 +62,1 @@\n-static uint32_t leastCommonMultiple(uint32_t a, uint32_t b, uint32_t &result)\n+static bool leastCommonMultiple(uint32_t a, uint32_t b, uint32_t& result)\n@@ -62,0 +64,4 @@\n+    if (a == b) {\n+        result = a;\n+        return true;\n+    }\n@@ -158,0 +164,15 @@\n+int64_t MediaTime::toMicroseconds() const\n+{\n+    if (isInvalid() || isIndefinite())\n+        return std::numeric_limits<int64_t>::quiet_NaN();\n+    if (isPositiveInfinite())\n+        return std::numeric_limits<int64_t>::max();\n+    if (isNegativeInfinite())\n+        return std::numeric_limits<int64_t>::min();\n+    if (hasDoubleValue())\n+        return m_timeValueAsDouble * 1000000.0;\n+    auto result = CheckedInt64(m_timeValue \/ m_timeScale) * 1000000LL + CheckedInt64(m_timeValue % static_cast<int64_t>(m_timeScale) * 1000000LL) \/ static_cast<int64_t>(m_timeScale);\n+    if (result.hasOverflowed())\n+        return m_timeValue < 0 ? std::numeric_limits<int64_t>::min() : std::numeric_limits<int64_t>::max();\n+    return result.value();\n+}\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/MediaTime.cpp","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include <wtf\/Seconds.h>\n@@ -64,0 +65,1 @@\n+    static MediaTime createWithSeconds(Seconds seconds) { return createWithDouble(seconds.value()); }\n@@ -67,0 +69,1 @@\n+    int64_t toMicroseconds() const;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/MediaTime.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -118,0 +118,1 @@\n+#define U_SHOW_CPLUSPLUS_HEADER_API 0\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/Platform.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -109,0 +109,8 @@\n+template<class T>\n+static auto HasRefPtrMemberFunctionsTest(SFINAE_OVERLOAD_PREFERRED) -> SFINAE1True<decltype(static_cast<std::remove_cv_t<T>*>(nullptr)->ref(), static_cast<std::remove_cv_t<T>*>(nullptr)->deref())>;\n+template<class>\n+static auto HasRefPtrMemberFunctionsTest(SFINAE_OVERLOAD_DEFAULT) -> std::false_type;\n+} \/\/ namespace detail\n+template<class T>\n+struct HasRefPtrMemberFunctions : decltype(detail::HasRefPtrMemberFunctionsTest<T>(SFINAE_OVERLOAD)) { };\n+namespace detail {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/TypeTraits.h","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n-#include \"config.h\"\n-#include \"PaymentRequestValidator.h\"\n+#import \"config.h\"\n+#import \"PaymentRequestValidator.h\"\n@@ -31,3 +31,6 @@\n-#include \"ApplePaySessionPaymentRequest.h\"\n-#include <unicode\/ucurr.h>\n-#include <unicode\/uloc.h>\n+#import \"ApplePaySessionPaymentRequest.h\"\n+#import \"ApplePayShippingMethod.h\"\n+#import <unicode\/ucurr.h>\n+#import <unicode\/uloc.h>\n+#import <wtf\/text\/MakeString.h>\n+#import <wtf\/unicode\/icu\/ICUHelpers.h>\n@@ -41,2 +44,2 @@\n-static ExceptionOr<void> validateShippingMethods(const Vector<ApplePaySessionPaymentRequest::ShippingMethod>&);\n-static ExceptionOr<void> validateShippingMethod(const ApplePaySessionPaymentRequest::ShippingMethod&);\n+static ExceptionOr<void> validateShippingMethods(const Vector<ApplePayShippingMethod>&);\n+static ExceptionOr<void> validateShippingMethod(const ApplePayShippingMethod&);\n@@ -44,1 +47,1 @@\n-ExceptionOr<void> PaymentRequestValidator::validate(const ApplePaySessionPaymentRequest& paymentRequest)\n+ExceptionOr<void> PaymentRequestValidator::validate(const ApplePaySessionPaymentRequest& paymentRequest, OptionSet<Field> fieldsToValidate)\n@@ -46,0 +49,1 @@\n+    if (fieldsToValidate.contains(Field::CountryCode)) {\n@@ -49,0 +53,1 @@\n+    }\n@@ -50,0 +55,1 @@\n+    if (fieldsToValidate.contains(Field::CurrencyCode)) {\n@@ -53,0 +59,1 @@\n+    }\n@@ -54,0 +61,1 @@\n+    if (fieldsToValidate.contains(Field::SupportedNetworks)) {\n@@ -57,0 +65,1 @@\n+    }\n@@ -58,0 +67,1 @@\n+    if (fieldsToValidate.contains(Field::MerchantCapabilities)) {\n@@ -61,0 +71,1 @@\n+    }\n@@ -62,0 +73,1 @@\n+    if (fieldsToValidate.contains(Field::Total)) {\n@@ -65,0 +77,1 @@\n+    }\n@@ -66,0 +79,1 @@\n+    if (fieldsToValidate.contains(Field::ShippingMethods)) {\n@@ -69,0 +83,1 @@\n+    }\n@@ -70,0 +85,1 @@\n+    if (fieldsToValidate.contains(Field::CountryCode)) {\n@@ -74,0 +90,1 @@\n+        }\n@@ -79,1 +96,1 @@\n-ExceptionOr<void> PaymentRequestValidator::validateTotal(const ApplePaySessionPaymentRequest::LineItem& total)\n+ExceptionOr<void> PaymentRequestValidator::validateTotal(const ApplePayLineItem& total)\n@@ -82,1 +99,1 @@\n-        return Exception { TypeError, \"Missing total label.\" };\n+        return Exception { ExceptionCode::TypeError, \"Missing total label.\"_s };\n@@ -85,1 +102,1 @@\n-        return Exception { TypeError, \"Missing total amount.\" };\n+        return Exception { ExceptionCode::TypeError, \"Missing total amount.\"_s };\n@@ -90,1 +107,1 @@\n-        return Exception { TypeError, \"Total amount must not be negative.\" };\n+        return Exception { ExceptionCode::TypeError, \"Total amount must not be negative.\"_s };\n@@ -92,2 +109,3 @@\n-    if (amount > 100000000)\n-        return Exception { TypeError, \"Total amount is too big.\" };\n+    \/\/ We can safely defer a maximum amount check to the underlying payment system, instead.\n+    \/\/ The downside is we lose an informative error mode and get an opaque payment sheet error for too large total amounts.\n+    \/\/ FIXME: <https:\/\/webkit.org\/b\/276088> PaymentRequestValidator should adopt per-currency checks for total amounts.\n@@ -101,1 +119,1 @@\n-        return Exception { TypeError, \"Missing country code.\" };\n+        return Exception { ExceptionCode::TypeError, \"Missing country code.\"_s };\n@@ -104,1 +122,1 @@\n-        if (countryCode == *countryCodePtr)\n+        if (countryCode == StringView::fromLatin1(*countryCodePtr))\n@@ -108,1 +126,1 @@\n-    return Exception { TypeError, makeString(\"\\\"\" + countryCode, \"\\\" is not a valid country code.\") };\n+    return Exception { ExceptionCode::TypeError, makeString(\"\\\"\"_s, countryCode, \"\\\" is not a valid country code.\"_s) };\n@@ -114,1 +132,1 @@\n-        return Exception { TypeError, \"Missing currency code.\" };\n+        return Exception { ExceptionCode::TypeError, \"Missing currency code.\"_s };\n@@ -117,1 +135,1 @@\n-    auto currencyCodes = std::unique_ptr<UEnumeration, void (*)(UEnumeration*)>(ucurr_openISOCurrencies(UCURR_ALL, &errorCode), uenum_close);\n+    auto currencyCodes = std::unique_ptr<UEnumeration, ICUDeleter<uenum_close>>(ucurr_openISOCurrencies(UCURR_ALL, &errorCode));\n@@ -121,1 +139,1 @@\n-        if (currencyCodePtr == currencyCode)\n+        if (currencyCode == StringView::fromLatin1(currencyCodePtr))\n@@ -125,1 +143,1 @@\n-    return Exception { TypeError, makeString(\"\\\"\" + currencyCode, \"\\\" is not a valid currency code.\") };\n+    return Exception { ExceptionCode::TypeError, makeString(\"\\\"\"_s, currencyCode, \"\\\" is not a valid currency code.\"_s) };\n@@ -131,1 +149,1 @@\n-        return Exception { TypeError, \"Missing merchant capabilities.\" };\n+        return Exception { ExceptionCode::TypeError, \"Missing merchant capabilities.\"_s };\n@@ -139,1 +157,1 @@\n-        return Exception { TypeError, \"Missing supported networks.\" };\n+        return Exception { ExceptionCode::TypeError, \"Missing supported networks.\"_s };\n@@ -144,1 +162,1 @@\n-static ExceptionOr<void> validateShippingMethod(const ApplePaySessionPaymentRequest::ShippingMethod& shippingMethod)\n+static ExceptionOr<void> validateShippingMethod(const ApplePayShippingMethod& shippingMethod)\n@@ -148,1 +166,1 @@\n-        return Exception { TypeError, \"Shipping method amount must be greater than or equal to zero.\" };\n+        return Exception { ExceptionCode::TypeError, \"Shipping method amount must be greater than or equal to zero.\"_s };\n@@ -153,1 +171,1 @@\n-static ExceptionOr<void> validateShippingMethods(const Vector<ApplePaySessionPaymentRequest::ShippingMethod>& shippingMethods)\n+static ExceptionOr<void> validateShippingMethods(const Vector<ApplePayShippingMethod>& shippingMethods)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/applepay\/PaymentRequestValidator.mm","additions":44,"deletions":26,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -249,0 +249,2 @@\n+    if (m_rootPath.isEmpty())\n+        return completionHandler(Exception { ExceptionCode::NotFoundError, \"Path does not exist\"_s });\n@@ -264,0 +266,2 @@\n+    if (m_rootPath.isEmpty())\n+        return completionCallback(Exception { ExceptionCode::NotFoundError, \"Path does not exist\"_s });\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/entriesapi\/DOMFileSystem.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-    m_connectionProxy->registerDatabaseConnection(*this);\n+    m_connectionProxy->registerDatabaseConnection(*this, context.identifier());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/IDBDatabase.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include <wtf\/ThreadSafeWeakPtr.h>\n@@ -47,1 +48,1 @@\n-class IDBDatabase final : public ThreadSafeRefCounted<IDBDatabase>, public EventTarget, public IDBActiveDOMObject {\n+class IDBDatabase final : public ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IDBDatabase>, public EventTarget, public IDBActiveDOMObject {\n@@ -80,2 +81,2 @@\n-    void refEventTarget() final { ThreadSafeRefCounted<IDBDatabase>::ref(); }\n-    void derefEventTarget() final { ThreadSafeRefCounted<IDBDatabase>::deref(); }\n+    void refEventTarget() final { ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr::ref(); }\n+    void derefEventTarget() final { ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr::deref(); }\n@@ -84,2 +85,2 @@\n-    void ref() const final { ThreadSafeRefCounted::ref(); }\n-    void deref() const final { ThreadSafeRefCounted::deref(); }\n+    void ref() const final { ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr::ref(); }\n+    void deref() const final { ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr::deref(); }\n@@ -139,1 +140,1 @@\n-    bool m_isContextSuspended { false };\n+    std::atomic<bool> m_isContextSuspended { false };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/IDBDatabase.h","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -278,1 +278,1 @@\n-void IDBConnectionProxy::fireVersionChangeEvent(IDBDatabaseConnectionIdentifier databaseConnectionIdentifier, const IDBResourceIdentifier& requestIdentifier, uint64_t requestedVersion)\n+std::pair<RefPtr<IDBDatabase>, std::optional<ScriptExecutionContextIdentifier>> IDBConnectionProxy::databaseFromConnectionIdentifier(IDBDatabaseConnectionIdentifier connectionIdentifier)\n@@ -280,2 +280,0 @@\n-    RefPtr<IDBDatabase> database;\n-    {\n@@ -283,1 +281,7 @@\n-        database = m_databaseConnectionMap.get(databaseConnectionIdentifier);\n+    auto it = m_databaseConnectionMap.find(connectionIdentifier);\n+    if (it == m_databaseConnectionMap.end())\n+        return { };\n+    RefPtr database = it->value.database.get();\n+    if (!database) {\n+        m_databaseConnectionMap.remove(it);\n+        return { };\n@@ -286,0 +290,5 @@\n+    return { database, it->value.contextIdentifier };\n+}\n+void IDBConnectionProxy::fireVersionChangeEvent(IDBDatabaseConnectionIdentifier databaseConnectionIdentifier, const IDBResourceIdentifier& requestIdentifier, uint64_t requestedVersion)\n+{\n+    auto [database, contextIdentifier] = databaseFromConnectionIdentifier(databaseConnectionIdentifier);\n@@ -289,0 +298,1 @@\n+    ASSERT(contextIdentifier);\n@@ -291,1 +301,1 @@\n-        database->performCallbackOnOriginThread(*database, &IDBDatabase::connectionToServerLost, IDBError { ExceptionCode::UnknownError, \"Connection on cached page closed to unblock other connections\"_s });\n+        ScriptExecutionContext::ensureOnContextThreadForCrossThreadTask(*contextIdentifier, createCrossThreadTask(*database,  &IDBDatabase::connectionToServerLost, IDBError { ExceptionCode::UnknownError, \"Connection on cached page closed to unblock other connections\"_s }));\n@@ -295,1 +305,1 @@\n-    database->performCallbackOnOriginThread(*database, &IDBDatabase::fireVersionChangeEvent, requestIdentifier, requestedVersion);\n+    ScriptExecutionContext::ensureOnContextThreadForCrossThreadTask(*contextIdentifier, createCrossThreadTask(*database,  &IDBDatabase::fireVersionChangeEvent, requestIdentifier, requestedVersion));\n@@ -424,5 +434,1 @@\n-    RefPtr<IDBDatabase> database;\n-    {\n-        Locker locker { m_databaseConnectionMapLock };\n-        database = m_databaseConnectionMap.get(databaseConnectionIdentifier);\n-    }\n+    auto [database, contextIdentifier] = databaseFromConnectionIdentifier(databaseConnectionIdentifier);\n@@ -433,1 +439,1 @@\n-    database->performCallbackOnOriginThread(*database, &IDBDatabase::didCloseFromServer, error);\n+    ScriptExecutionContext::ensureOnContextThreadForCrossThreadTask(*contextIdentifier, createCrossThreadTask(*database,  &IDBDatabase::didCloseFromServer, error));\n@@ -445,5 +451,1 @@\n-        RefPtr<IDBDatabase> database;\n-        {\n-            Locker locker { m_databaseConnectionMapLock };\n-            database = m_databaseConnectionMap.get(connectionIdentifier);\n-        }\n+        auto [database, contextIdentifier] = databaseFromConnectionIdentifier(connectionIdentifier);\n@@ -454,1 +456,1 @@\n-        database->performCallbackOnOriginThread(*database, &IDBDatabase::connectionToServerLost, error);\n+        ScriptExecutionContext::ensureOnContextThreadForCrossThreadTask(*contextIdentifier, createCrossThreadTask(*database,  &IDBDatabase::connectionToServerLost, error));\n@@ -541,1 +543,1 @@\n-void IDBConnectionProxy::registerDatabaseConnection(IDBDatabase& database)\n+void IDBConnectionProxy::registerDatabaseConnection(IDBDatabase& database, ScriptExecutionContextIdentifier identifier)\n@@ -546,1 +548,1 @@\n-    m_databaseConnectionMap.set(database.databaseConnectionIdentifier(), &database);\n+    m_databaseConnectionMap.set(database.databaseConnectionIdentifier(), WeakIDBDatabase { &database, identifier });\n@@ -553,1 +555,0 @@\n-    ASSERT(!m_databaseConnectionMap.contains(database.databaseConnectionIdentifier()) || m_databaseConnectionMap.get(database.databaseConnectionIdentifier()) == &database);\n@@ -652,0 +653,1 @@\n+        auto currentContextIdentifier = currentContext.identifier();\n@@ -653,1 +655,7 @@\n-        setMatchingItemsContextSuspended(currentContext, m_databaseConnectionMap, isContextSuspended);\n+        for (auto weakDatabase : m_databaseConnectionMap.values()) {\n+            if (RefPtr database = weakDatabase.database.get()) {\n+                auto contextIdentifier = weakDatabase.contextIdentifier;\n+                if (contextIdentifier && contextIdentifier == currentContextIdentifier)\n+                    database->setIsContextSuspended(isContextSuspended);\n+            }\n+        }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/client\/IDBConnectionProxy.cpp","additions":30,"deletions":22,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-    void registerDatabaseConnection(IDBDatabase&);\n+    void registerDatabaseConnection(IDBDatabase&, ScriptExecutionContextIdentifier);\n@@ -136,0 +136,1 @@\n+    std::pair<RefPtr<IDBDatabase>, std::optional<ScriptExecutionContextIdentifier>> databaseFromConnectionIdentifier(IDBDatabaseConnectionIdentifier);\n@@ -168,1 +169,5 @@\n-    HashMap<IDBDatabaseConnectionIdentifier, IDBDatabase*> m_databaseConnectionMap WTF_GUARDED_BY_LOCK(m_databaseConnectionMapLock);\n+    struct WeakIDBDatabase {\n+        ThreadSafeWeakPtr<IDBDatabase> database;\n+        std::optional<ScriptExecutionContextIdentifier> contextIdentifier;\n+    };\n+    HashMap<IDBDatabaseConnectionIdentifier, WeakIDBDatabase> m_databaseConnectionMap WTF_GUARDED_BY_LOCK(m_databaseConnectionMapLock);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/client\/IDBConnectionProxy.h","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -698,1 +698,0 @@\n-css\/DOMCSSPaintWorklet.cpp\n@@ -982,2 +981,0 @@\n-inspector\/agents\/page\/PageWorkerAgent.cpp\n-inspector\/agents\/worker\/WorkerWorkerAgent.cpp\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/SmartPointerExpectations\/UncountedLocalVarsCheckerExpectations","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+        if (abortSignal.isDependent()) {\n@@ -54,0 +55,5 @@\n+                return true;\n+            }\n+        } else {\n+            if (UNLIKELY(reason))\n+                *reason = \"Has Abort Event Listener\"_s;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/JSAbortSignalCustom.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -201,1 +201,1 @@\n-            bool created = result->putDirect(vm, JSC::Identifier::fromString(vm, keyValuePair.key), esValue);\n+            bool created = result->createDataProperty(&lexicalGlobalObject, JSC::Identifier::fromString(vm, keyValuePair.key), esValue, true);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/JSDOMConvertRecord.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"CSSValue.h\"\n@@ -33,0 +34,1 @@\n+    , m_coalesceIdenticalValues(true)\n@@ -52,0 +54,8 @@\n+bool CSSQuadValue::canBeCoalesced() const\n+{\n+    Ref top = m_quad.top();\n+    Ref right = m_quad.right();\n+    Ref left = m_quad.left();\n+    Ref bottom = m_quad.bottom();\n+    return m_coalesceIdenticalValues && top->equals(right) && top->equals(left) && top->equals(bottom);\n+}\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/CSSQuadValue.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+    bool canBeCoalesced() const;\n@@ -43,1 +44,1 @@\n-\n+    bool m_coalesceIdenticalValues { true };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/CSSQuadValue.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-#include \"Document.h\"\n+#include \"DocumentInlines.h\"\n@@ -63,1 +63,1 @@\n-    auto* document = this->document();\n+    RefPtr document = this->document();\n@@ -68,0 +68,4 @@\n+    if (!document->hasBrowsingContext()) {\n+        promise.reject(Exception { ExceptionCode::InvalidStateError, \"This document does not have a browsing context\"_s });\n+        return;\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/DOMCSSPaintWorklet.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"CSSQuadValue.h\"\n@@ -134,0 +135,4 @@\n+    if (auto quad = dynamicDowncast<CSSQuadValue>(value)) {\n+        if (quad->canBeCoalesced())\n+            return Exception { ExceptionCode::TypeError, \"Invalid values\"_s };\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/typedom\/StylePropertyMap.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+    bool isDependent() const { return m_isDependent; }\n@@ -86,1 +87,0 @@\n-    bool isDependent() const { return m_isDependent; }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/AbortSignal.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-#import \"Element.h\"\n+#import \"Document.h\"\n@@ -34,0 +34,2 @@\n+#import \"Element.h\"\n+#import \"FrameDestructionObserverInlines.h\"\n@@ -44,1 +46,1 @@\n-        if (Frame* frame = m_dragImageElement->document().frame()) {\n+        if (RefPtr frame = m_dragImageElement->document().frame()) {\n@@ -47,1 +49,1 @@\n-            result = createDragImageForImage(*frame, *m_dragImageElement, imageRect, elementRect);\n+            result = createDragImageForImage(*frame, dragImageElement().releaseNonNull(), imageRect, elementRect);\n@@ -54,1 +56,1 @@\n-        result = m_dragImage->image()->snapshotNSImage();\n+        result = m_dragImage->protectedImage()->adapter().snapshotNSImage();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/DataTransferMac.mm","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -747,1 +747,0 @@\n-    m_scriptRunner = nullptr;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Document.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -99,0 +99,1 @@\n+    Ref protectedThis { *this };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/DocumentFontLoader.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,0 +45,2 @@\n+    void ref() const { m_document->ref(); }\n+    void deref() const { m_document->deref(); }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/DocumentFontLoader.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -774,0 +774,17 @@\n+bool ScriptExecutionContext::ensureOnContextThreadForCrossThreadTask(ScriptExecutionContextIdentifier identifier, CrossThreadTask&& crossThreadTask)\n+{\n+    {\n+        Locker locker { allScriptExecutionContextsMapLock };\n+        auto context = allScriptExecutionContextsMap().get(identifier);\n+        if (!context)\n+            return false;\n+        if (!context->isContextThread()) {\n+            context->postTask([crossThreadTask = WTFMove(crossThreadTask)](ScriptExecutionContext&) mutable {\n+                crossThreadTask.performTask();\n+            });\n+            return true;\n+        }\n+    }\n+    crossThreadTask.performTask();\n+    return true;\n+}\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/ScriptExecutionContext.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -324,0 +324,1 @@\n+    WEBCORE_EXPORT static bool ensureOnContextThreadForCrossThreadTask(ScriptExecutionContextIdentifier, CrossThreadTask&&);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/ScriptExecutionContext.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (C) 2014-2017 Apple Inc. All rights reserved.\n+ * Copyright (C) 2014-2024 Apple Inc. All rights reserved.\n@@ -31,0 +31,1 @@\n+#import <UniformTypeIdentifiers\/UniformTypeIdentifiers.h>\n@@ -32,0 +33,1 @@\n+#include <wtf\/text\/MakeString.h>\n@@ -51,2 +53,2 @@\n-    NSString *uti;\n-    if (![pathURL getResourceValue:&uti forKey:NSURLTypeIdentifierKey error:&error]) {\n+    UTType *uti;\n+    if (![pathURL getResourceValue:&uti forKey:NSURLContentTypeKey error:&error]) {\n@@ -57,1 +59,1 @@\n-    return UTTypeConformsTo((__bridge CFStringRef)uti, kUTTypePackage);\n+    return [uti conformsToType:UTTypePackage];\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/fileapi\/FileCocoa.mm","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -642,0 +642,1 @@\n+            if (m_context->isSurfaceBufferTransparentBlack(CanvasRenderingContext::SurfaceBuffer::DisplayBuffer)) {\n@@ -643,1 +644,3 @@\n-            if (!skipTransparentBlackDraw || !m_context->isSurfaceBufferTransparentBlack(CanvasRenderingContext::SurfaceBuffer::DisplayBuffer)) {\n+                if (!skipTransparentBlackDraw)\n+                    context.fillRect(snappedIntRect(r), Color::transparentBlack);\n+            } else {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLCanvasElement.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1777,5 +1777,0 @@\n-    if (!m_player) {\n-        ASSERT_NOT_REACHED(\"It should not be possible to enter loadResource without a valid m_player object\");\n-        mediaLoadingFailed(MediaPlayer::NetworkState::FormatError);\n-        return;\n-    }\n@@ -2775,1 +2770,3 @@\n-    const String playerErrMsg = m_player ? m_player->lastErrorMessage() : \"\"_s;\n+    \/\/ 1 - The user agent should cancel the fetching process.\n+    stopPeriodicTimers();\n+    m_loadState = WaitingForSource;\n@@ -2789,1 +2786,0 @@\n-    ERROR_LOG(LOGIDENTIFIER, \"error = \", static_cast<int>(error));\n@@ -2792,1 +2788,0 @@\n-    clearMediaPlayer();\n@@ -2802,0 +2797,3 @@\n+#if ENABLE(MEDIA_SOURCE)\n+    detachMediaSource();\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLMediaElement.cpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -684,1 +684,1 @@\n-        m_servicedVideoFrameRequests[index]->cancelled = true;\n+        m_servicedVideoFrameRequests[index]->callback = nullptr;\n@@ -702,1 +702,2 @@\n-    m_servicedVideoFrameRequests.clear();\n+    for (auto& request : m_servicedVideoFrameRequests)\n+        request->callback = nullptr;\n@@ -737,4 +738,2 @@\n-        if (!request->cancelled) {\n-            Ref { request->callback }->handleEvent(std::round(now.milliseconds()), *videoFrameMetadata);\n-            request->cancelled = true;\n-        }\n+        if (RefPtr callback = std::exchange(request->callback, { }))\n+            callback->handleEvent(std::round(now.milliseconds()), *videoFrameMetadata);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLVideoElement.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -195,2 +195,1 @@\n-        Ref<VideoFrameRequestCallback> callback;\n-        bool cancelled { false };\n+        RefPtr<VideoFrameRequestCallback> callback;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLVideoElement.h","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2186,0 +2186,2 @@\n+    if (cachedImage->errorOccurred())\n+        return Exception { ExceptionCode::InvalidStateError };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/canvas\/CanvasRenderingContext2DBase.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-unsigned NetworkResourcesData::ResourceData::decodeDataToContent()\n+void NetworkResourcesData::ResourceData::decodeDataToContent()\n@@ -113,1 +113,0 @@\n-    return m_content.sizeInBytes() - buffer->size();\n@@ -202,1 +201,1 @@\n-        m_requestIdsDeque.append(requestId);\n+        m_requestIdsDeque.appendOrMoveToLast(requestId);\n@@ -238,1 +237,1 @@\n-        m_requestIdsDeque.append(requestId);\n+        m_requestIdsDeque.appendOrMoveToLast(requestId);\n@@ -255,4 +254,10 @@\n-    m_contentSize += resourceData->decodeDataToContent();\n-    size_t dataLength = resourceData->content().sizeInBytes();\n-    if (dataLength > m_maximumSingleResourceContentSize)\n-        m_contentSize -= resourceData->evictContent();\n+    auto byteCount = resourceData->dataLength();\n+    m_contentSize -= byteCount;\n+    resourceData->decodeDataToContent();\n+    byteCount = resourceData->content().sizeInBytes();\n+    if (byteCount > m_maximumSingleResourceContentSize) {\n+        resourceData->evictContent();\n+        return;\n+    }\n+    if (ensureFreeSpace(byteCount) && !resourceData->isContentEvicted())\n+        m_contentSize += byteCount;\n@@ -315,0 +320,2 @@\n+    if (!preservedLoaderId) {\n+        m_requestIdToResourceDataMap.clear();\n@@ -317,0 +324,2 @@\n+        return;\n+    }\n@@ -318,2 +327,6 @@\n-    if (!preservedLoaderId)\n-        m_requestIdToResourceDataMap.clear();\n+    for (auto&& requestId : std::exchange(m_requestIdsDeque, { })) {\n+        auto resourceData = resourceDataForRequestId(requestId);\n+        if (!resourceData)\n+            continue;\n+        if (resourceData->loaderId() == *preservedLoaderId)\n+            m_requestIdsDeque.add(requestId);\n@@ -321,4 +334,2 @@\n-        Vector<String> keysToRemove;\n-        for (auto& [key, value] : m_requestIdToResourceDataMap) {\n-            if (value->loaderId() != *preservedLoaderId)\n-                keysToRemove.append(key);\n+            m_contentSize -= resourceData->evictContent();\n+            m_requestIdToResourceDataMap.remove(requestId);\n@@ -326,2 +337,0 @@\n-        for (auto& keyToRemove : keysToRemove)\n-            m_requestIdToResourceDataMap.remove(keyToRemove);\n@@ -359,0 +368,1 @@\n+    ASSERT(m_maximumResourcesContentSize >= m_contentSize);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/inspector\/NetworkResourcesData.cpp","additions":26,"deletions":16,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-#include <wtf\/Deque.h>\n+#include <wtf\/ListHashSet.h>\n@@ -112,1 +112,1 @@\n-        unsigned decodeDataToContent();\n+        void decodeDataToContent();\n@@ -159,1 +159,1 @@\n-    Deque<String> m_requestIdsDeque;\n+    ListHashSet<String> m_requestIdsDeque;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/inspector\/NetworkResourcesData.h","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -504,0 +504,4 @@\n+                if (pseudoId == PseudoId::ViewTransition && (!element->document().activeViewTransition() || element != element->document().documentElement()))\n+                    continue;\n+                if (isNamedViewTransitionPseudoElement(Style::PseudoElementIdentifier { pseudoId }))\n+                    continue;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/inspector\/agents\/InspectorCSSAgent.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,2 @@\n-    , m_frontendDispatcher(makeUnique<Inspector::WorkerFrontendDispatcher>(context.frontendRouter))\n+    , m_pageChannel(PageChannel::create(*this))\n+    , m_frontendDispatcher(makeUniqueRef<Inspector::WorkerFrontendDispatcher>(context.frontendRouter))\n@@ -43,1 +44,4 @@\n-InspectorWorkerAgent::~InspectorWorkerAgent() = default;\n+InspectorWorkerAgent::~InspectorWorkerAgent()\n+{\n+    m_pageChannel->detachFromParentAgent();\n+}\n@@ -106,4 +110,0 @@\n-void InspectorWorkerAgent::sendMessageFromWorkerToFrontend(WorkerInspectorProxy& proxy, String&& message)\n-{\n-    m_frontendDispatcher->dispatchMessageFromWorker(proxy.identifier(), WTFMove(message));\n-}\n@@ -147,1 +147,1 @@\n-    proxy.connectToWorkerInspectorController(*this);\n+    proxy.connectToWorkerInspectorController(m_pageChannel);\n@@ -163,0 +163,19 @@\n+Ref<InspectorWorkerAgent::PageChannel> InspectorWorkerAgent::PageChannel::create(InspectorWorkerAgent& parentAgent)\n+{\n+    return adoptRef(*new PageChannel(parentAgent));\n+}\n+InspectorWorkerAgent::PageChannel::PageChannel(InspectorWorkerAgent& parentAgent)\n+    : m_parentAgent(&parentAgent)\n+{\n+}\n+void InspectorWorkerAgent::PageChannel::detachFromParentAgent()\n+{\n+    Locker locker { m_parentAgentLock };\n+    m_parentAgent = nullptr;\n+}\n+void InspectorWorkerAgent::PageChannel::sendMessageFromWorkerToFrontend(WorkerInspectorProxy& proxy, String&& message)\n+{\n+    Locker locker { m_parentAgentLock };\n+    if (CheckedPtr parentAgent = m_parentAgent)\n+        parentAgent->frontendDispatcher().dispatchMessageFromWorker(proxy.identifier(), WTFMove(message));\n+}\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/inspector\/agents\/InspectorWorkerAgent.cpp","additions":26,"deletions":7,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -32,0 +32,4 @@\n+#include <wtf\/CheckedPtr.h>\n+#include <wtf\/CheckedRef.h>\n+#include <wtf\/FastMalloc.h>\n+#include <wtf\/Lock.h>\n@@ -33,0 +37,2 @@\n+#include <wtf\/ThreadSafeRefCounted.h>\n+#include <wtf\/UniqueRef.h>\n@@ -37,1 +43,1 @@\n-class InspectorWorkerAgent : public InspectorAgentBase, public Inspector::WorkerBackendDispatcherHandler, public WorkerInspectorProxy::PageChannel {\n+class InspectorWorkerAgent : public InspectorAgentBase, public Inspector::WorkerBackendDispatcherHandler, public CanMakeThreadSafeCheckedPtr<InspectorWorkerAgent> {\n@@ -40,0 +46,1 @@\n+    WTF_OVERRIDE_DELETE_FOR_CHECKED_PTR(InspectorWorkerAgent);\n@@ -43,0 +50,1 @@\n+    Inspector::WorkerFrontendDispatcher& frontendDispatcher() { return *m_frontendDispatcher; }\n@@ -54,1 +62,0 @@\n-    void sendMessageFromWorkerToFrontend(WorkerInspectorProxy&, String&& message);\n@@ -69,0 +76,14 @@\n+    class PageChannel final : public WorkerInspectorProxy::PageChannel, public ThreadSafeRefCounted<PageChannel> {\n+        WTF_MAKE_TZONE_ALLOCATED_INLINE(PageChannel);\n+        WTF_OVERRIDE_DELETE_FOR_CHECKED_PTR(PageChannel);\n+    public:\n+        static Ref<PageChannel> create(InspectorWorkerAgent&);\n+        void ref() const final { ThreadSafeRefCounted::ref(); }\n+        void deref() const final { ThreadSafeRefCounted::deref(); }\n+        void detachFromParentAgent();\n+        void sendMessageFromWorkerToFrontend(WorkerInspectorProxy&, String&&);\n+    private:\n+        explicit PageChannel(InspectorWorkerAgent&);\n+        Lock m_parentAgentLock;\n+        CheckedPtr<InspectorWorkerAgent> m_parentAgent WTF_GUARDED_BY_LOCK(m_parentAgentLock);\n+    };\n@@ -72,1 +93,2 @@\n-    std::unique_ptr<Inspector::WorkerFrontendDispatcher> m_frontendDispatcher;\n+    const Ref<PageChannel> m_pageChannel;\n+    UniqueRef<Inspector::WorkerFrontendDispatcher> m_frontendDispatcher;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/inspector\/agents\/InspectorWorkerAgent.h","additions":25,"deletions":3,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+WTF_MAKE_TZONE_ALLOCATED_IMPL(PageWorkerAgent);\n@@ -47,3 +48,1 @@\n-    for (Ref proxy : WorkerInspectorProxy::allWorkerInspectorProxiesCopy()) {\n-        if (auto* document = dynamicDowncast<Document>(proxy->scriptExecutionContext())) {\n-            if (document->page() == &m_page)\n+    for (Ref proxy : WorkerInspectorProxy::proxiesForPage(*m_page.identifier()))\n@@ -51,2 +50,0 @@\n-        }\n-    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/inspector\/agents\/page\/PageWorkerAgent.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+#include <wtf\/FastMalloc.h>\n+#include <wtf\/TZoneMalloc.h>\n@@ -35,0 +37,2 @@\n+    WTF_MAKE_TZONE_ALLOCATED(PageWorkerAgent);\n+    WTF_OVERRIDE_DELETE_FOR_CHECKED_PTR(PageWorkerAgent);\n@@ -36,1 +40,1 @@\n-    PageWorkerAgent(PageAgentContext&);\n+    explicit PageWorkerAgent(PageAgentContext&);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/inspector\/agents\/page\/PageWorkerAgent.h","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+WTF_MAKE_TZONE_ALLOCATED_IMPL(WorkerWorkerAgent);\n@@ -47,3 +48,1 @@\n-    for (Ref proxy : WorkerInspectorProxy::allWorkerInspectorProxiesCopy()) {\n-        if (auto* globalScope = dynamicDowncast<WorkerOrWorkletGlobalScope>(proxy->scriptExecutionContext())) {\n-            if (globalScope == &m_globalScope)\n+    for (Ref proxy : WorkerInspectorProxy::proxiesForWorkerGlobalScope(m_globalScope.identifier()))\n@@ -51,2 +50,0 @@\n-        }\n-    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/inspector\/agents\/worker\/WorkerWorkerAgent.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+#include <wtf\/FastMalloc.h>\n+#include <wtf\/TZoneMalloc.h>\n@@ -35,0 +37,2 @@\n+    WTF_MAKE_TZONE_ALLOCATED(WorkerWorkerAgent);\n+    WTF_OVERRIDE_DELETE_FOR_CHECKED_PTR(WorkerWorkerAgent);\n@@ -36,1 +40,1 @@\n-    WorkerWorkerAgent(WorkerAgentContext&);\n+    explicit WorkerWorkerAgent(WorkerAgentContext&);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/inspector\/agents\/worker\/WorkerWorkerAgent.h","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -221,0 +221,3 @@\n+        auto isLoadingBrowserControlledHTML = [document] {\n+            return document->loader() && document->loader()->substituteData().isValid();\n+        };\n@@ -231,1 +234,1 @@\n-        } else if (triggeringAction && triggeringAction->requester()) {\n+        } else if (triggeringAction && triggeringAction->requester() && !isLoadingBrowserControlledHTML()) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/DocumentWriter.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2960,1 +2960,1 @@\n-    addSameSiteInfoToRequestIfNeeded(request, initiator.get());\n+    addSameSiteInfoToRequestIfNeeded(request, initiator.get(), protectedFrame()->protectedPage().get());\n@@ -3280,1 +3280,1 @@\n-        addSameSiteInfoToRequestIfNeeded(request, initiator);\n+        addSameSiteInfoToRequestIfNeeded(request, initiator, page.get());\n@@ -3388,1 +3388,1 @@\n-void FrameLoader::addSameSiteInfoToRequestIfNeeded(ResourceRequest& request, const Document* initiator)\n+void FrameLoader::addSameSiteInfoToRequestIfNeeded(ResourceRequest& request, const Document* initiator, const Page* page)\n@@ -3400,0 +3400,17 @@\n+    if (page && page->shouldAssumeSameSiteForRequestTo(request.url())) {\n+        request.setIsSameSite(true);\n+        return;\n+    }\n+#if PLATFORM(COCOA)\n+    bool isFullBrowser { true };\n+    if (auto frame = initiator->frame())\n+        isFullBrowser = frame->loader().client().isParentProcessAFullWebBrowser();\n+    if (initiator->url().protocolIsFile() && !isFullBrowser && !linkedOnOrAfterSDKWithBehavior(SDKAlignedBehavior::LaxCookieSameSiteAttribute)) {\n+        request.setIsSameSite(true);\n+        return;\n+    }\n+    if (initiator->quirks().needsLaxSameSiteCookieQuirk(request.url())) {\n+        request.setIsSameSite(true);\n+        return;\n+    }\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/FrameLoader.cpp","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -230,1 +230,1 @@\n-    static void addSameSiteInfoToRequestIfNeeded(ResourceRequest&, const Document* initiator = nullptr);\n+    static void addSameSiteInfoToRequestIfNeeded(ResourceRequest&, const Document* initiator = nullptr, const Page* = nullptr);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/FrameLoader.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -237,0 +237,2 @@\n+    if (m_resource)\n+        protectedResource()->removeClient(*this);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/MediaResourceLoader.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1212,1 +1212,1 @@\n-    if (RefPtr document = this->document()) {\n+    if (RefPtr document = this->document())\n@@ -1214,2 +1214,0 @@\n-        request.resourceRequest().setFirstPartyForCookies(document->firstPartyForCookies());\n-    }\n@@ -1225,1 +1223,1 @@\n-    FrameLoader::addSameSiteInfoToRequestIfNeeded(request.resourceRequest(), document());\n+    FrameLoader::addSameSiteInfoToRequestIfNeeded(request.resourceRequest(), document(), frame->page());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/cache\/CachedResourceLoader.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-    [Conditional=WEB_CRYPTO, SecureContext] readonly attribute SubtleCrypto subtle;\n+    [Conditional=WEB_CRYPTO,SecureContext] readonly attribute SubtleCrypto subtle;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/Crypto.idl","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2638,1 +2638,3 @@\n-\n+#if !PLATFORM(JAVA)\n+    bool noopener = windowFeatures.wantsNoOpener();\n+#else\n@@ -2640,0 +2642,1 @@\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/LocalDOMWindow.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -600,1 +600,2 @@\n-    event.signal()->signalAbort(domException);\n+    if (RefPtr signal = event.signal())\n+        signal->signalAbort(domException);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/Navigation.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    WEBCORE_EXPORT static bool shouldInheritSecurityOriginFromOwner(const URL&);\n+    static bool shouldInheritSecurityOriginFromOwner(const URL&);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/SecurityPolicy.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n-#include \"config.h\"\n-#include \"ImageRotationSessionVT.h\"\n+#import \"config.h\"\n+#import \"ImageRotationSessionVT.h\"\n@@ -29,1 +29,4 @@\n-#include \"AffineTransform.h\"\n+#import \"AffineTransform.h\"\n+#import \"CVUtilities.h\"\n+#import \"Logging.h\"\n+#import \"VideoFrame.h\"\n@@ -31,4 +34,3 @@\n-#include \"CoreVideoSoftLink.h\"\n-#include \"VideoToolboxSoftLink.h\"\n-\n-#if USE(VIDEOTOOLBOX)\n+#import \"CoreVideoSoftLink.h\"\n+#import \"VideoToolboxSoftLink.h\"\n+#import <pal\/cf\/CoreMediaSoftLink.h>\n@@ -61,2 +63,2 @@\n-ImageRotationSessionVT::ImageRotationSessionVT(AffineTransform&& transform, FloatSize size, OSType pixelFormat, IsCGImageCompatible cvImageCompatibility)\n-    : ImageRotationSessionVT(transformToRotationProperties(transform), size, pixelFormat, cvImageCompatibility)\n+ImageRotationSessionVT::ImageRotationSessionVT(AffineTransform&& transform, FloatSize size, IsCGImageCompatible isCGImageCompatible, ShouldUseIOSurface shouldUseIOSurface)\n+    : ImageRotationSessionVT(transformToRotationProperties(transform), size, isCGImageCompatible, shouldUseIOSurface)\n@@ -67,0 +69,5 @@\n+ImageRotationSessionVT::ImageRotationSessionVT(const RotationProperties& rotation, FloatSize size, IsCGImageCompatible isCGImageCompatible, ShouldUseIOSurface shouldUseIOSurface)\n+    : m_shouldUseIOSurface(shouldUseIOSurface == ShouldUseIOSurface::Yes)\n+{\n+    initialize(rotation, size, isCGImageCompatible);\n+}\n@@ -68,3 +75,1 @@\n-ImageRotationSessionVT::ImageRotationSessionVT(RotationProperties&& rotation, FloatSize size, OSType pixelFormat, IsCGImageCompatible cvImageCompatibility)\n-    : m_rotationProperties(WTFMove(rotation))\n-    , m_size(size)\n+void ImageRotationSessionVT::initialize(const RotationProperties& rotation, FloatSize size, IsCGImageCompatible isCGImageCompatible)\n@@ -72,0 +77,4 @@\n+    m_rotationProperties = rotation;\n+    m_size = size;\n+    m_isCGImageCompatible = isCGImageCompatible;\n+\n@@ -76,0 +85,1 @@\n+    m_rotationPool = nullptr;\n@@ -79,1 +89,1 @@\n-    m_rotationSession = rawRotationSession;\n+    m_rotationSession = adoptCF(rawRotationSession);\n@@ -86,11 +96,0 @@\n-\n-    auto pixelAttributes = @{\n-        (__bridge NSString *)kCVPixelBufferWidthKey: @(m_rotatedSize.width()),\n-        (__bridge NSString *)kCVPixelBufferHeightKey: @(m_rotatedSize.height()),\n-        (__bridge NSString *)kCVPixelBufferPixelFormatTypeKey: @(pixelFormat),\n-        (__bridge NSString *)kCVPixelBufferCGImageCompatibilityKey: (cvImageCompatibility == IsCGImageCompatible::Yes ? @YES : @NO),\n-    };\n-    CVPixelBufferPoolRef rawPool = nullptr;\n-    if (auto err = CVPixelBufferPoolCreate(kCFAllocatorDefault, nullptr, (__bridge CFDictionaryRef)pixelAttributes, &rawPool); err != noErr)\n-        LOG_ERROR(\"CVPixelBufferPool create returned error code %d\", err);\n-    m_rotationPool = adoptCF(rawPool);\n@@ -101,0 +100,14 @@\n+    auto pixelFormat = CVPixelBufferGetPixelFormatType(pixelBuffer);\n+    if (pixelFormat != m_pixelFormat || !m_rotationPool) {\n+        m_pixelFormat = pixelFormat;\n+        auto bufferPool = createCVPixelBufferPool(m_rotatedSize.width(), m_rotatedSize.height(), m_pixelFormat, 0u, m_isCGImageCompatible == IsCGImageCompatible::Yes, m_shouldUseIOSurface);\n+\n+        if (!bufferPool) {\n+            RELEASE_LOG_ERROR(WebRTC, \"ImageRotationSessionVT failed creating buffer pool with error %d\", (int)bufferPool.error());\n+            return nullptr;\n+        }\n+\n+        m_rotationPool = WTFMove(*bufferPool);\n+    }\n+\n+    RetainPtr<CVPixelBufferRef> result;\n@@ -102,5 +115,14 @@\n-    CVPixelBufferPoolCreatePixelBuffer(kCFAllocatorDefault, m_rotationPool.get(), &rawRotatedBuffer);\n-    auto status = VTImageRotationSessionTransferImage(m_rotationSession.get(), pixelBuffer, rawRotatedBuffer);\n-    if (status == noErr)\n-        return adoptCF(rawRotatedBuffer);\n-    return nullptr;\n+    auto status = CVPixelBufferPoolCreatePixelBuffer(kCFAllocatorDefault, m_rotationPool.get(), &rawRotatedBuffer);\n+    if (status != kCVReturnSuccess || !rawRotatedBuffer) {\n+        RELEASE_LOG_ERROR(WebRTC, \"ImageRotationSessionVT failed creating buffer from pool with error %d\", status);\n+        return nullptr;\n+    }\n+    result = adoptCF(rawRotatedBuffer);\n+\n+    status = VTImageRotationSessionTransferImage(m_rotationSession.get(), pixelBuffer, rawRotatedBuffer);\n+    if (status != noErr) {\n+        RELEASE_LOG_ERROR(WebRTC, \"ImageRotationSessionVT failed rotating buffer with error %d\", status);\n+        return nullptr;\n+    }\n+\n+    return result;\n@@ -109,0 +131,13 @@\n+RetainPtr<CVPixelBufferRef> ImageRotationSessionVT::rotate(VideoFrame& videoFrame, const RotationProperties& rotation, IsCGImageCompatible cgImageCompatible)\n+{\n+    auto pixelBuffer = videoFrame.pixelBuffer();\n+    ASSERT(pixelBuffer);\n+    if (!pixelBuffer)\n+        return nullptr;\n+\n+    m_pixelFormat = CVPixelBufferGetPixelFormatType(pixelBuffer);\n+    IntSize size { (int)CVPixelBufferGetWidth(pixelBuffer), (int)CVPixelBufferGetHeight(pixelBuffer) };\n+    if (rotation != m_rotationProperties || m_size != size)\n+        initialize(rotation, size, cgImageCompatible);\n+\n+    return rotate(pixelBuffer);\n@@ -111,1 +146,1 @@\n-#endif\n+}\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/cv\/ImageRotationSessionVT.mm","additions":65,"deletions":30,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (C) 2018 Apple Inc. All rights reserved.\n+ * Copyright (C) 2018-2023 Apple Inc. All rights reserved.\n@@ -29,2 +29,2 @@\n-#if USE(VIDEOTOOLBOX)\n-\n+#import \"CVUtilities.h\"\n+#import \"GraphicsContextCG.h\"\n@@ -32,1 +32,1 @@\n-#import \"MediaSampleAVFObjC.h\"\n+#import \"VideoFrameCV.h\"\n@@ -35,1 +35,1 @@\n-#import <pal\/cf\/CoreMediaSoftLink.h>\n+#import <pal\/avfoundation\/MediaTimeAVFoundation.h>\n@@ -37,2 +37,2 @@\n-#if HAVE(IOSURFACE) && !PLATFORM(MACCATALYST)\n-#include <pal\/spi\/cocoa\/IOSurfaceSPI.h>\n+#if !PLATFORM(MACCATALYST)\n+#import <wtf\/spi\/cocoa\/IOSurfaceSPI.h>\n@@ -42,0 +42,2 @@\n+#import \"VideoToolboxSoftLink.h\"\n+#import <pal\/cf\/CoreMediaSoftLink.h>\n@@ -44,10 +46,0 @@\n-using namespace PAL;\n-\n-static inline CFStringRef cvPixelFormatOpenGLKey()\n-{\n-#if PLATFORM(IOS_FAMILY) && !PLATFORM(MACCATALYST)\n-    return kCVPixelFormatOpenGLESCompatibility;\n-#else\n-    return kCVPixelBufferOpenGLCompatibilityKey;\n-#endif\n-}\n@@ -55,1 +47,2 @@\n-ImageTransferSessionVT::ImageTransferSessionVT(uint32_t pixelFormat)\n+ImageTransferSessionVT::ImageTransferSessionVT(uint32_t pixelFormat, bool shouldUseIOSurface)\n+    : m_shouldUseIOSurface(shouldUseIOSurface)\n@@ -83,1 +76,1 @@\n-bool ImageTransferSessionVT::setSize(const IntSize& size)\n+void ImageTransferSessionVT::setCroppingRectangle(std::optional<FloatRect> rectangle)\n@@ -85,2 +78,2 @@\n-    if (m_size == size && m_outputBufferPool)\n-        return true;\n+    if (m_croppingRectangle == rectangle)\n+        return;\n@@ -88,7 +81,1 @@\n-    NSDictionary* pixelBufferOptions = @{\n-        (__bridge NSString *)kCVPixelBufferWidthKey : @(size.width()),\n-        (__bridge NSString *)kCVPixelBufferHeightKey : @(size.height()),\n-        (__bridge NSString *)kCVPixelBufferPixelFormatTypeKey : @(m_pixelFormat),\n-        (__bridge NSString *)cvPixelFormatOpenGLKey() : @YES,\n-        (__bridge NSString *)kCVPixelBufferIOSurfacePropertiesKey : @{ \/*empty dictionary*\/ },\n-    };\n+    m_croppingRectangle = rectangle;\n@@ -96,2 +83,10 @@\n-    NSDictionary* pixelBufferPoolOptions = @{\n-        (__bridge NSString *)kCVPixelBufferPoolMinimumBufferCountKey: @(6)\n+    if (!m_croppingRectangle) {\n+        m_sourceCroppingDictionary = { };\n+        return;\n+    }\n+\n+    m_sourceCroppingDictionary = @{\n+        (__bridge NSString *)kCVImageBufferCleanApertureWidthKey: @(rectangle->width()),\n+        (__bridge NSString *)kCVImageBufferCleanApertureHeightKey: @(rectangle->height()),\n+        (__bridge NSString *)kCVImageBufferCleanApertureVerticalOffsetKey: @(rectangle->x()),\n+        (__bridge NSString *)kCVImageBufferCleanApertureHorizontalOffsetKey: @(rectangle->y()),\n@@ -99,0 +94,1 @@\n+}\n@@ -100,4 +96,6 @@\n-    CVPixelBufferPoolRef bufferPool;\n-    auto status = CVPixelBufferPoolCreate(kCFAllocatorDefault, (__bridge CFDictionaryRef)pixelBufferPoolOptions, (__bridge CFDictionaryRef)pixelBufferOptions, &bufferPool);\n-    ASSERT(!status);\n-    if (status != kCVReturnSuccess)\n+bool ImageTransferSessionVT::setSize(const IntSize& size)\n+{\n+    if (m_size == size && m_outputBufferPool)\n+        return true;\n+    auto bufferPool = createCVPixelBufferPool(size.width(), size.height(), m_pixelFormat, 6, false, m_shouldUseIOSurface);\n+    if (!bufferPool)\n@@ -105,2 +103,1 @@\n-\n-    m_outputBufferPool = adoptCF(bufferPool);\n+    m_outputBufferPool = WTFMove(*bufferPool);\n@@ -108,2 +105,0 @@\n-    m_ioSurfaceBufferAttributes = nullptr;\n-\n@@ -115,1 +110,1 @@\n-    if (sourceBuffer && m_size == IntSize(CVPixelBufferGetWidth(sourceBuffer), CVPixelBufferGetHeight(sourceBuffer)) && m_pixelFormat == CVPixelBufferGetPixelFormatType(sourceBuffer))\n+    if (!m_sourceCroppingDictionary && sourceBuffer && m_size == IntSize(CVPixelBufferGetWidth(sourceBuffer), CVPixelBufferGetHeight(sourceBuffer)) && m_pixelFormat == CVPixelBufferGetPixelFormatType(sourceBuffer))\n@@ -118,0 +113,3 @@\n+    if (m_sourceCroppingDictionary)\n+        CVBufferSetAttachment(sourceBuffer, kCVImageBufferCleanApertureKey, m_sourceCroppingDictionary.get(), kCVAttachmentMode_ShouldPropagate);\n+\n@@ -121,4 +119,3 @@\n-    CVPixelBufferRef outputBuffer = nullptr;\n-    auto status = CVPixelBufferPoolCreatePixelBuffer(kCFAllocatorDefault, m_outputBufferPool.get(), &outputBuffer);\n-    if (status) {\n-        RELEASE_LOG(Media, \"ImageTransferSessionVT::convertPixelBuffer, CVPixelBufferPoolCreatePixelBuffer failed with error %d\", static_cast<int>(status));\n+    auto result = createCVPixelBufferFromPool(m_outputBufferPool.get(), m_maxBufferPoolSize);\n+    if (!result) {\n+        RELEASE_LOG(Media, \"ImageTransferSessionVT::convertPixelBuffer, createCVPixelBufferFromPool failed with error %d\", static_cast<int>(result.error()));\n@@ -127,1 +124,1 @@\n-    auto result = adoptCF(outputBuffer);\n+    auto outputBuffer = WTFMove(*result);\n@@ -129,1 +126,1 @@\n-    auto err = VTPixelTransferSessionTransferImage(m_transferSession.get(), sourceBuffer, outputBuffer);\n+    auto err = VTPixelTransferSessionTransferImage(m_transferSession.get(), sourceBuffer, outputBuffer.get());\n@@ -135,2 +132,2 @@\n-    return result;\n-}\n+    if (m_sourceCroppingDictionary)\n+        CVBufferRemoveAttachment(sourceBuffer, kCVImageBufferCleanApertureKey);\n@@ -138,3 +135,1 @@\n-RetainPtr<CVPixelBufferRef> ImageTransferSessionVT::createPixelBuffer(CMSampleBufferRef sourceBuffer, const IntSize& size)\n-{\n-    return convertPixelBuffer(CMSampleBufferGetImageBuffer(sourceBuffer), size);\n+    return outputBuffer;\n@@ -143,1 +138,1 @@\n-RetainPtr<CMSampleBufferRef> ImageTransferSessionVT::convertCMSampleBuffer(CMSampleBufferRef sourceBuffer, const IntSize& size)\n+RetainPtr<CMSampleBufferRef> ImageTransferSessionVT::convertCMSampleBuffer(CMSampleBufferRef sourceBuffer, const IntSize& size, const MediaTime* sampleTime)\n@@ -148,3 +143,3 @@\n-    auto description = CMSampleBufferGetFormatDescription(sourceBuffer);\n-    auto sourceSize = FloatSize(CMVideoFormatDescriptionGetPresentationDimensions(description, true, true));\n-    auto pixelBuffer = static_cast<CVPixelBufferRef>(CMSampleBufferGetImageBuffer(sourceBuffer));\n+    auto description = PAL::CMSampleBufferGetFormatDescription(sourceBuffer);\n+    auto sourceSize = FloatSize(PAL::CMVideoFormatDescriptionGetPresentationDimensions(description, true, true));\n+    auto pixelBuffer = static_cast<CVPixelBufferRef>(PAL::CMSampleBufferGetImageBuffer(sourceBuffer));\n@@ -157,1 +152,1 @@\n-    auto convertedPixelBuffer = createPixelBuffer(sourceBuffer, size);\n+    auto convertedPixelBuffer = convertPixelBuffer(pixelBuffer, size);\n@@ -162,1 +157,1 @@\n-    auto status = CMSampleBufferGetSampleTimingInfoArray(sourceBuffer, 1, nullptr, &itemCount);\n+    auto status = PAL::CMSampleBufferGetSampleTimingInfoArray(sourceBuffer, 1, nullptr, &itemCount);\n@@ -171,1 +166,1 @@\n-        status = CMSampleBufferGetSampleTimingInfoArray(sourceBuffer, itemCount, timingInfoArray.data(), nullptr);\n+        status = PAL::CMSampleBufferGetSampleTimingInfoArray(sourceBuffer, itemCount, timingInfoArray.data(), nullptr);\n@@ -176,0 +171,8 @@\n+\n+        if (sampleTime) {\n+            auto cmTime = PAL::toCMTime(*sampleTime);\n+            for (auto& timing : timingInfoArray) {\n+                timing.presentationTimeStamp = cmTime;\n+                timing.decodeTimeStamp = cmTime;\n+            }\n+        }\n@@ -180,1 +183,1 @@\n-    status = CMVideoFormatDescriptionCreateForImageBuffer(kCFAllocatorDefault, convertedPixelBuffer.get(), &formatDescription);\n+    status = PAL::CMVideoFormatDescriptionCreateForImageBuffer(kCFAllocatorDefault, convertedPixelBuffer.get(), &formatDescription);\n@@ -187,1 +190,1 @@\n-    status = CMSampleBufferCreateReadyWithImageBuffer(kCFAllocatorDefault, convertedPixelBuffer.get(), formatDescription, timeingInfoPtr, &resizedSampleBuffer);\n+    status = PAL::CMSampleBufferCreateReadyWithImageBuffer(kCFAllocatorDefault, convertedPixelBuffer.get(), formatDescription, timeingInfoPtr, &resizedSampleBuffer);\n@@ -213,1 +216,1 @@\n-    auto context = CGBitmapContextCreate(data, imageSize.width(), imageSize.height(), 8, CVPixelBufferGetBytesPerRow(rgbBuffer), sRGBColorSpaceRef(), (CGBitmapInfo) kCGImageAlphaNoneSkipFirst);\n+    auto context = adoptCF(CGBitmapContextCreate(data, imageSize.width(), imageSize.height(), 8, CVPixelBufferGetBytesPerRow(rgbBuffer), sRGBColorSpaceRef(), (CGBitmapInfo) kCGImageAlphaNoneSkipFirst));\n@@ -219,2 +222,1 @@\n-    auto retainedContext = adoptCF(context);\n-    CGContextDrawImage(context, CGRectMake(0, 0, imageSize.width(), imageSize.height()), image);\n+    CGContextDrawImage(context.get(), CGRectMake(0, 0, imageSize.width(), imageSize.height()), image);\n@@ -240,1 +242,1 @@\n-    auto status = CMVideoFormatDescriptionCreateForImageBuffer(kCFAllocatorDefault, (CVImageBufferRef)inputBuffer.get(), &formatDescription);\n+    auto status = PAL::CMVideoFormatDescriptionCreateForImageBuffer(kCFAllocatorDefault, (CVImageBufferRef)inputBuffer.get(), &formatDescription);\n@@ -247,3 +249,3 @@\n-    auto cmTime = toCMTime(sampleTime);\n-    CMSampleTimingInfo timingInfo = { kCMTimeInvalid, cmTime, cmTime };\n-    status = CMSampleBufferCreateReadyWithImageBuffer(kCFAllocatorDefault, (CVImageBufferRef)inputBuffer.get(), formatDescription, &timingInfo, &sampleBuffer);\n+    auto cmTime = PAL::toCMTime(sampleTime);\n+    CMSampleTimingInfo timingInfo = { PAL::kCMTimeInvalid, cmTime, cmTime };\n+    status = PAL::CMSampleBufferCreateReadyWithImageBuffer(kCFAllocatorDefault, (CVImageBufferRef)inputBuffer.get(), formatDescription, &timingInfo, &sampleBuffer);\n@@ -268,17 +270,1 @@\n-#if HAVE(IOSURFACE) && !PLATFORM(MACCATALYST)\n-\n-#if PLATFORM(MAC)\n-static int32_t roundUpToMacroblockMultiple(int32_t size)\n-{\n-    return (size + 15) & ~15;\n-}\n-#endif\n-\n-CFDictionaryRef ImageTransferSessionVT::ioSurfacePixelBufferCreationOptions(IOSurfaceRef surface)\n-{\n-    if (m_ioSurfaceBufferAttributes)\n-        return m_ioSurfaceBufferAttributes.get();\n-\n-    m_ioSurfaceBufferAttributes = (__bridge CFDictionaryRef) @{\n-        (__bridge NSString *)cvPixelFormatOpenGLKey() : @YES,\n-    };\n+#if !PLATFORM(MACCATALYST)\n@@ -286,25 +272,1 @@\n-#if PLATFORM(MAC)\n-    auto format = IOSurfaceGetPixelFormat(surface);\n-    auto width = IOSurfaceGetWidth(surface);\n-    auto height = IOSurfaceGetHeight(surface);\n-    auto extendedRight = roundUpToMacroblockMultiple(width) - width;\n-    auto extendedBottom = roundUpToMacroblockMultiple(height) - height;\n-\n-    if ((format == kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange || format == kCVPixelFormatType_420YpCbCr8BiPlanarFullRange)\n-        && (IOSurfaceGetBytesPerRowOfPlane(surface, 0) >= width + extendedRight)\n-        && (IOSurfaceGetBytesPerRowOfPlane(surface, 1) >= width + extendedRight)\n-        && (IOSurfaceGetAllocSize(surface) >= (height + extendedBottom) * IOSurfaceGetBytesPerRowOfPlane(surface, 0) * 3 \/ 2)) {\n-            m_ioSurfaceBufferAttributes = (__bridge CFDictionaryRef) @{\n-                (__bridge NSString *)kCVPixelBufferOpenGLCompatibilityKey : @YES,\n-                (__bridge NSString *)kCVPixelBufferExtendedPixelsRightKey : @(extendedRight),\n-                (__bridge NSString *)kCVPixelBufferExtendedPixelsBottomKey : @(extendedBottom)\n-            };\n-    }\n-#else\n-    UNUSED_PARAM(surface);\n-#endif\n-\n-    return m_ioSurfaceBufferAttributes.get();\n-}\n-\n-RetainPtr<CVPixelBufferRef> ImageTransferSessionVT::createPixelBuffer(IOSurfaceRef surface, const IntSize& size)\n+RetainPtr<CMSampleBufferRef> ImageTransferSessionVT::createCMSampleBuffer(IOSurfaceRef surface, const MediaTime &sampleTime, const IntSize &size)\n@@ -314,18 +276,1 @@\n-\n-    CVPixelBufferRef pixelBuffer;\n-    auto status = CVPixelBufferCreateWithIOSurface(kCFAllocatorDefault, surface, ioSurfacePixelBufferCreationOptions(surface), &pixelBuffer);\n-    if (status) {\n-        RELEASE_LOG(Media, \"CVPixelBufferCreateWithIOSurface failed with error code: %d\", static_cast<int>(status));\n-        return nullptr;\n-    }\n-\n-    auto retainedBuffer = adoptCF(pixelBuffer);\n-    if (m_size == IntSize(CVPixelBufferGetWidth(pixelBuffer), CVPixelBufferGetHeight(pixelBuffer)) && m_pixelFormat == CVPixelBufferGetPixelFormatType(pixelBuffer))\n-        return retainedBuffer;\n-\n-    return convertPixelBuffer(pixelBuffer, size);\n-}\n-\n-RetainPtr<CMSampleBufferRef> ImageTransferSessionVT::createCMSampleBuffer(IOSurfaceRef surface, const MediaTime& sampleTime, const IntSize& size)\n-{\n-    auto pixelBuffer = createPixelBuffer(surface, size);\n+    auto pixelBuffer = createCVPixelBuffer(surface).value_or(nullptr);\n@@ -339,1 +284,1 @@\n-RefPtr<MediaSample> ImageTransferSessionVT::convertMediaSample(MediaSample& sample, const IntSize& size)\n+RefPtr<VideoFrame> ImageTransferSessionVT::convertVideoFrame(VideoFrame& videoFrame, const IntSize& size)\n@@ -341,4 +286,2 @@\n-    ASSERT(sample.platformSample().type == PlatformSample::CMSampleBufferType);\n-\n-    if (size == expandedIntSize(sample.presentationSize()))\n-        return &sample;\n+    if (size == expandedIntSize(videoFrame.presentationSize()))\n+        return &videoFrame;\n@@ -346,1 +289,1 @@\n-    auto resizedBuffer = convertCMSampleBuffer(sample.platformSample().sample.cmSampleBuffer, size);\n+    auto resizedBuffer = convertPixelBuffer(videoFrame.pixelBuffer(), size);\n@@ -350,1 +293,1 @@\n-    return MediaSampleAVFObjC::create(resizedBuffer.get(), sample.videoRotation(), sample.videoMirrored());\n+    return VideoFrameCV::create(videoFrame.presentationTime(), videoFrame.isMirrored(), videoFrame.rotation(), WTFMove(resizedBuffer));\n@@ -353,2 +296,16 @@\n-#if HAVE(IOSURFACE) && !PLATFORM(MACCATALYST)\n-RefPtr<MediaSample> ImageTransferSessionVT::createMediaSample(IOSurfaceRef surface, const MediaTime& sampleTime, const IntSize& size, MediaSample::VideoRotation rotation, bool mirrored)\n+RefPtr<VideoFrame> ImageTransferSessionVT::createVideoFrame(CGImageRef image, const WTF::MediaTime& time, const IntSize& size)\n+{\n+    return createVideoFrame(image, time, size, VideoFrame::Rotation::None);\n+}\n+RefPtr<VideoFrame> ImageTransferSessionVT::createVideoFrame(CMSampleBufferRef image, const WTF::MediaTime& time, const IntSize& size)\n+{\n+    return createVideoFrame(image, time, size, VideoFrame::Rotation::None);\n+}\n+\n+#if !PLATFORM(MACCATALYST)\n+RefPtr<VideoFrame> ImageTransferSessionVT::createVideoFrame(IOSurfaceRef surface, const MediaTime& sampleTime, const IntSize& size)\n+{\n+    return createVideoFrame(surface, sampleTime, size, VideoFrame::Rotation::None);\n+}\n+\n+RefPtr<VideoFrame> ImageTransferSessionVT::createVideoFrame(IOSurfaceRef surface, const MediaTime& sampleTime, const IntSize& size, VideoFrame::Rotation rotation, bool mirrored)\n@@ -360,1 +317,1 @@\n-    return MediaSampleAVFObjC::create(sampleBuffer.get(), rotation, mirrored);\n+    return VideoFrameCV::create(sampleBuffer.get(), mirrored, rotation);\n@@ -364,1 +321,1 @@\n-RefPtr<MediaSample> ImageTransferSessionVT::createMediaSample(CGImageRef image, const MediaTime& sampleTime, const IntSize& size, MediaSample::VideoRotation rotation, bool mirrored)\n+RefPtr<VideoFrame> ImageTransferSessionVT::createVideoFrame(CGImageRef image, const MediaTime& sampleTime, const IntSize& size, VideoFrame::Rotation rotation, bool mirrored)\n@@ -370,1 +327,1 @@\n-    return MediaSampleAVFObjC::create(sampleBuffer.get(), rotation, mirrored);\n+    return VideoFrameCV::create(sampleBuffer.get(), mirrored, rotation);\n@@ -373,1 +330,1 @@\n-RefPtr<MediaSample> ImageTransferSessionVT::createMediaSample(CMSampleBufferRef buffer, const IntSize& size, MediaSample::VideoRotation rotation, bool mirrored)\n+RefPtr<VideoFrame> ImageTransferSessionVT::createVideoFrame(CMSampleBufferRef buffer, const MediaTime& sampleTime, const IntSize& size, VideoFrame::Rotation rotation, bool mirrored)\n@@ -375,1 +332,1 @@\n-    auto sampleBuffer = convertCMSampleBuffer(buffer, size);\n+    auto sampleBuffer = convertCMSampleBuffer(buffer, size, &sampleTime);\n@@ -379,1 +336,1 @@\n-    return MediaSampleAVFObjC::create(sampleBuffer.get(), rotation, mirrored);\n+    return VideoFrameCV::create(sampleBuffer.get(), mirrored, rotation);\n@@ -383,2 +340,0 @@\n-\n-#endif \/\/ USE(VIDEOTOOLBOX)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/cv\/ImageTransferSessionVT.mm","additions":98,"deletions":143,"binary":false,"changes":241,"status":"modified"},{"patch":"@@ -60,1 +60,5 @@\n-    static NeverDestroyed<Ref<WorkQueue>> queue(WorkQueue::create(\"VPx VideoDecoder Queue\"_s));\n+    static std::once_flag onceKey;\n+    static LazyNeverDestroyed<Ref<WorkQueue>> queue;\n+    std::call_once(onceKey, [] {\n+        queue.construct(WorkQueue::create(\"VPx VideoDecoder Queue\"_s));\n+    });\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/libwebrtc\/LibWebRTCVPXVideoDecoder.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -56,1 +56,5 @@\n-    static NeverDestroyed<Ref<WorkQueue>> queue(WorkQueue::create(\"VPX VideoEncoder Queue\"_s));\n+    static std::once_flag onceKey;\n+    static LazyNeverDestroyed<Ref<WorkQueue>> queue;\n+    std::call_once(onceKey, [] {\n+        queue.construct(WorkQueue::create(\"VPx VideoEncoder Queue\"_s));\n+    });\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/libwebrtc\/LibWebRTCVPXVideoEncoder.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -147,0 +147,2 @@\n+    if (!firstPartyForCookies.isValid())\n+        return true;\n@@ -150,0 +152,2 @@\n+    if (!resource.isValid())\n+        return true;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/network\/NetworkStorageSession.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1864,1 +1864,1 @@\n-LayoutRect RenderText::clippedOverflowRect(const RenderLayerModelObject* repaintContainer, VisibleRectContext context) const\n+auto RenderText::localRectsForRepaint(RepaintOutlineBounds) const -> RepaintRects\n@@ -1866,1 +1866,1 @@\n-    RenderObject* rendererToRepaint = containingBlock();\n+    LayoutRect overflowRect = linesBoundingBox();\n@@ -1869,3 +1869,2 @@\n-    RenderObject& enclosingLayerRenderer = enclosingLayer()->renderer();\n-    if (&enclosingLayerRenderer != rendererToRepaint && !rendererToRepaint->isDescendantOf(&enclosingLayerRenderer))\n-        rendererToRepaint = &enclosingLayerRenderer;\n+    \/\/ repaint containers. https:\/\/bugs.webkit.org\/show_bug.cgi?id=23308\n+    overflowRect.move(view().frameView().layoutContext().layoutDelta());\n@@ -1873,3 +1872,1 @@\n-    \/\/ The renderer we chose to repaint may be an ancestor of repaintContainer, but we need to do a repaintContainer-relative repaint.\n-    if (repaintContainer && repaintContainer != rendererToRepaint && !rendererToRepaint->isDescendantOf(repaintContainer))\n-        return repaintContainer->clippedOverflowRect(repaintContainer, context);\n+    return RepaintRects { overflowRect };\n@@ -1877,2 +1874,0 @@\n-    return rendererToRepaint->clippedOverflowRect(repaintContainer, context);\n-}\n@@ -1880,3 +1875,0 @@\n-auto RenderText::rectsForRepaintingAfterLayout(const RenderLayerModelObject* repaintContainer, RepaintOutlineBounds) const -> RepaintRects\n-{\n-    return { clippedOverflowRect(repaintContainer, visibleRectContextForRepaint()) };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderText.cpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -229,2 +229,1 @@\n-    LayoutRect clippedOverflowRect(const RenderLayerModelObject* repaintContainer, VisibleRectContext) const final;\n-    RepaintRects rectsForRepaintingAfterLayout(const RenderLayerModelObject* repaintContainer, RepaintOutlineBounds) const final;\n+    RepaintRects localRectsForRepaint(RepaintOutlineBounds) const final;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderText.h","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-    std::optional<Vector<uint8_t>> wrapCryptoKey(const Vector<uint8_t>& key); \/\/revisit\n+    std::optional<Vector<uint8_t>> wrapCryptoKey(const Vector<uint8_t>& key);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerGlobalScope.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+#include <wtf\/TZoneMallocInlines.h>\n+#include <wtf\/WeakHashSet.h>\n@@ -42,2 +44,2 @@\n-static Lock proxiesLock;\n-static WeakHashSet<WorkerInspectorProxy>& proxies() WTF_REQUIRES_LOCK(proxiesLock)\n+static Lock proxiesPerWorkerGlobalScopeLock;\n+static HashMap<ScriptExecutionContextIdentifier, WeakHashSet<WorkerInspectorProxy>>& proxiesPerWorkerGlobalScope() WTF_REQUIRES_LOCK(proxiesPerWorkerGlobalScopeLock)\n@@ -45,1 +47,6 @@\n-    static NeverDestroyed<WeakHashSet<WorkerInspectorProxy>> proxies;\n+    static NeverDestroyed<HashMap<ScriptExecutionContextIdentifier, WeakHashSet<WorkerInspectorProxy>>> proxies;\n+    return proxies;\n+}\n+static HashMap<PageIdentifier, WeakHashSet<WorkerInspectorProxy>>& proxiesPerPage()\n+{\n+    static MainThreadNeverDestroyed<HashMap<PageIdentifier, WeakHashSet<WorkerInspectorProxy>>> proxies;\n@@ -49,1 +56,41 @@\n-WeakHashSet<WorkerInspectorProxy> WorkerInspectorProxy::allWorkerInspectorProxiesCopy()\n+void WorkerInspectorProxy::addToProxyMap()\n+{\n+    if (!m_contextIdentifier)\n+        return;\n+    switchOn(*m_contextIdentifier,\n+        [&](PageIdentifier pageID) {\n+            auto& proxiesForPage = proxiesPerPage().add(pageID, WeakHashSet<WorkerInspectorProxy> { }).iterator->value;\n+            proxiesForPage.add(*this);\n+        }, [&](ScriptExecutionContextIdentifier globalScopeIdentifier) {\n+            Locker lock { proxiesPerWorkerGlobalScopeLock };\n+            auto& proxiesForContext = proxiesPerWorkerGlobalScope().add(globalScopeIdentifier, WeakHashSet<WorkerInspectorProxy> { }).iterator->value;\n+            proxiesForContext.add(*this);\n+        }\n+    );\n+}\n+void WorkerInspectorProxy::removeFromProxyMap()\n+{\n+    if (!m_contextIdentifier)\n+        return;\n+    switchOn(*m_contextIdentifier,\n+        [&](PageIdentifier pageID) {\n+            auto iterator = proxiesPerPage().find(pageID);\n+            RELEASE_ASSERT(iterator != proxiesPerPage().end());\n+            auto& proxiesForContext = iterator->value;\n+            ASSERT(proxiesForContext.contains(*this));\n+            proxiesForContext.remove(*this);\n+            if (proxiesForContext.isEmptyIgnoringNullReferences())\n+                proxiesPerPage().remove(iterator);\n+        }, [&](ScriptExecutionContextIdentifier globalScopeIdentifier) {\n+            Locker lock { proxiesPerWorkerGlobalScopeLock };\n+            auto iterator = proxiesPerWorkerGlobalScope().find(globalScopeIdentifier);\n+            RELEASE_ASSERT(iterator != proxiesPerWorkerGlobalScope().end());\n+            auto& proxiesForContext = iterator->value;\n+            ASSERT(proxiesForContext.contains(*this));\n+            proxiesForContext.remove(*this);\n+            if (proxiesForContext.isEmptyIgnoringNullReferences())\n+                proxiesPerWorkerGlobalScope().remove(iterator);\n+        }\n+    );\n+}\n+Vector<Ref<WorkerInspectorProxy>> WorkerInspectorProxy::proxiesForPage(PageIdentifier identifier)\n@@ -51,2 +98,12 @@\n-    Locker lock { proxiesLock };\n-    return proxies();\n+    auto iterator = proxiesPerPage().find(identifier);\n+    if (iterator == proxiesPerPage().end())\n+        return { };\n+    return copyToVectorOf<Ref<WorkerInspectorProxy>>(iterator->value);\n+}\n+Vector<Ref<WorkerInspectorProxy>> WorkerInspectorProxy::proxiesForWorkerGlobalScope(ScriptExecutionContextIdentifier identifier)\n+{\n+    Locker lock { proxiesPerWorkerGlobalScopeLock };\n+    auto iterator = proxiesPerWorkerGlobalScope().find(identifier);\n+    if (iterator == proxiesPerWorkerGlobalScope().end())\n+        return { };\n+    return copyToVectorOf<Ref<WorkerInspectorProxy>>(iterator->value);\n@@ -72,1 +129,10 @@\n-void WorkerInspectorProxy::workerStarted(ScriptExecutionContext* scriptExecutionContext, WorkerThread* thread, const URL& url, const String& name)\n+auto WorkerInspectorProxy::pageOrWorkerGlobalScopeIdentifier(ScriptExecutionContext& context) -> std::optional<PageOrWorkerGlobalScopeIdentifier>\n+{\n+    if (auto* document = dynamicDowncast<Document>(context)) {\n+        if (auto* page = document->page(); page && page->identifier())\n+            return PageOrWorkerGlobalScopeIdentifier { *page->identifier() };\n+        return std::nullopt;\n+    }\n+    return context.identifier();\n+}\n+void WorkerInspectorProxy::workerStarted(ScriptExecutionContext& scriptExecutionContext, WorkerThread* thread, const URL& url, const String& name)\n@@ -75,1 +141,2 @@\n-    m_scriptExecutionContext = scriptExecutionContext;\n+    m_scriptExecutionContext = &scriptExecutionContext;\n+    m_contextIdentifier = pageOrWorkerGlobalScopeIdentifier(scriptExecutionContext);\n@@ -79,4 +146,1 @@\n-    {\n-        Locker lock { proxiesLock };\n-        proxies().add(*this);\n-    }\n+    addToProxyMap();\n@@ -93,4 +157,1 @@\n-    {\n-        Locker lock { proxiesLock };\n-        proxies().remove(*this);\n-    }\n+    removeFromProxyMap();\n@@ -153,2 +214,1 @@\n-    if (!m_pageChannel)\n-        return;\n+    if (RefPtr pageChannel = m_pageChannel.get())\n@@ -156,1 +216,1 @@\n-    m_pageChannel->sendMessageFromWorkerToFrontend(*this, WTFMove(message));\n+        pageChannel->sendMessageFromWorkerToFrontend(*this, WTFMove(message));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerInspectorProxy.cpp","additions":79,"deletions":19,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+#include \"PageIdentifier.h\"\n+#include \"ScriptExecutionContextIdentifier.h\"\n+#include <variant>\n+#include <wtf\/Function.h>\n@@ -30,0 +34,1 @@\n+#include <wtf\/TZoneMallocInlines.h>\n@@ -31,1 +36,0 @@\n-#include <wtf\/WeakHashSet.h>\n@@ -46,1 +50,1 @@\n-    WTF_MAKE_FAST_ALLOCATED;\n+\n@@ -55,2 +59,3 @@\n-    \/\/ A Worker's inspector messages come in and go out through the Page's WorkerAgent.\n-    class PageChannel {\n+    class PageChannel : public CanMakeThreadSafeCheckedPtr<PageChannel> {\n+        WTF_MAKE_TZONE_ALLOCATED_INLINE(PageChannel);\n+        WTF_OVERRIDE_DELETE_FOR_CHECKED_PTR(PageChannel);\n@@ -59,0 +64,2 @@\n+        virtual void ref() const = 0;\n+        virtual void deref() const = 0;\n@@ -62,1 +69,2 @@\n-    static WeakHashSet<WorkerInspectorProxy> allWorkerInspectorProxiesCopy();\n+    static Vector<Ref<WorkerInspectorProxy>> proxiesForPage(PageIdentifier);\n+    static Vector<Ref<WorkerInspectorProxy>> proxiesForWorkerGlobalScope(ScriptExecutionContextIdentifier);\n@@ -70,1 +78,1 @@\n-    void workerStarted(ScriptExecutionContext*, WorkerThread*, const URL&, const String& name);\n+    void workerStarted(ScriptExecutionContext&, WorkerThread*, const URL&, const String& name);\n@@ -82,0 +90,4 @@\n+    using PageOrWorkerGlobalScopeIdentifier = std::variant<PageIdentifier, ScriptExecutionContextIdentifier>;\n+    static std::optional<PageOrWorkerGlobalScopeIdentifier> pageOrWorkerGlobalScopeIdentifier(ScriptExecutionContext&);\n+    void addToProxyMap();\n+    void removeFromProxyMap();\n@@ -83,0 +95,1 @@\n+    std::optional<PageOrWorkerGlobalScopeIdentifier> m_contextIdentifier;\n@@ -87,1 +100,1 @@\n-    PageChannel* m_pageChannel { nullptr };\n+    CheckedPtr<PageChannel> m_pageChannel;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerInspectorProxy.h","additions":20,"deletions":7,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-    m_inspectorProxy->workerStarted(m_scriptExecutionContext.get(), thread.ptr(), scriptURL, name);\n+    m_inspectorProxy->workerStarted(*m_scriptExecutionContext, thread.ptr(), scriptURL, name);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerMessagingProxy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -562,1 +562,1 @@\n-    request.setFirstPartyForCookies(originURL(topOrigin));\n+    request.setFirstPartyForCookies(topOrigin->toURL());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/service\/server\/SWServer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/ParseFromStringOptions.h","additions":0,"deletions":0,"binary":false,"changes":0,"status":"deleted"},{"patch":"","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/ParseFromStringOptions.idl","additions":0,"deletions":0,"binary":false,"changes":0,"status":"deleted"},{"patch":"@@ -961,1 +961,1 @@\n-\n+\f\n@@ -1172,1 +1172,1 @@\n-\n+\f\n@@ -1361,1 +1361,1 @@\n-\n+\f\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/XPathGrammar.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}