{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import com.sun.javafx.application.preferences.PreferenceMapping;\n@@ -774,1 +775,2 @@\n-     * Returns a map of platform-specific keys to platform-independent keys defined by JavaFX.\n+     * Returns a map of platform-specific keys to platform-independent keys defined by JavaFX, including a\n+     * function that maps the platform-specific value to the platform-independent value.\n@@ -779,1 +781,1 @@\n-     * The following platform-independent keys are currently supported, which correspond to the names of color\n+     * The following platform-independent keys are currently supported, which correspond to the names of\n@@ -785,0 +787,2 @@\n+     *     <li>reducedMotion\n+     *     <li>reducedTransparency\n@@ -789,1 +793,1 @@\n-    public Map<String, String> getPlatformKeyMappings() {\n+    public Map<String, PreferenceMapping<?>> getPlatformKeyMappings() {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/Application.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import com.sun.javafx.application.preferences.PreferenceMapping;\n@@ -475,1 +476,1 @@\n-    public Map<String, String> getPlatformKeyMappings() {\n+    public Map<String, PreferenceMapping<?>> getPlatformKeyMappings() {\n@@ -477,2 +478,4 @@\n-            \"GTK.theme_fg_color\", \"foregroundColor\",\n-            \"GTK.theme_bg_color\", \"backgroundColor\"\n+            \"GTK.theme_fg_color\", new PreferenceMapping<>(\"foregroundColor\", Color.class),\n+            \"GTK.theme_bg_color\", new PreferenceMapping<>(\"backgroundColor\", Color.class),\n+            \"GTK.theme_selected_bg_color\", new PreferenceMapping<>(\"accentColor\", Color.class),\n+            \"GTK.enable_animations\", new PreferenceMapping<>(\"reducedMotion\", Boolean.class, b -> !b)\n@@ -504,1 +507,2 @@\n-            Map.entry(\"GTK.success_color\", Color.class)\n+            Map.entry(\"GTK.success_color\", Color.class),\n+            Map.entry(\"GTK.enable_animations\", Boolean.class)\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkApplication.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import com.sun.javafx.application.preferences.PreferenceMapping;\n@@ -442,1 +443,1 @@\n-    public Map<String, String> getPlatformKeyMappings() {\n+    public Map<String, PreferenceMapping<?>> getPlatformKeyMappings() {\n@@ -444,3 +445,5 @@\n-            \"macOS.NSColor.textColor\", \"foregroundColor\",\n-            \"macOS.NSColor.textBackgroundColor\", \"backgroundColor\",\n-            \"macOS.NSColor.controlAccentColor\", \"accentColor\"\n+            \"macOS.NSColor.textColor\", new PreferenceMapping<>(\"foregroundColor\", Color.class),\n+            \"macOS.NSColor.textBackgroundColor\", new PreferenceMapping<>(\"backgroundColor\", Color.class),\n+            \"macOS.NSColor.controlAccentColor\", new PreferenceMapping<>(\"accentColor\", Color.class),\n+            \"macOS.NSWorkspace.accessibilityDisplayShouldReduceMotion\", new PreferenceMapping<>(\"reducedMotion\", Boolean.class),\n+            \"macOS.NSWorkspace.accessibilityDisplayShouldReduceTransparency\", new PreferenceMapping<>(\"reducedTransparency\", Boolean.class)\n@@ -499,1 +502,3 @@\n-            Map.entry(\"macOS.NSColor.systemYellowColor\", Color.class)\n+            Map.entry(\"macOS.NSColor.systemYellowColor\", Color.class),\n+            Map.entry(\"macOS.NSWorkspace.accessibilityDisplayShouldReduceMotion\", Boolean.class),\n+            Map.entry(\"macOS.NSWorkspace.accessibilityDisplayShouldReduceTransparency\", Boolean.class)\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacApplication.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import com.sun.javafx.application.preferences.PreferenceMapping;\n@@ -377,1 +378,1 @@\n-    public Map<String, String> getPlatformKeyMappings() {\n+    public Map<String, PreferenceMapping<?>> getPlatformKeyMappings() {\n@@ -379,3 +380,5 @@\n-            \"Windows.UIColor.Foreground\", \"foregroundColor\",\n-            \"Windows.UIColor.Background\", \"backgroundColor\",\n-            \"Windows.UIColor.Accent\", \"accentColor\"\n+            \"Windows.UIColor.Foreground\", new PreferenceMapping<>(\"foregroundColor\", Color.class),\n+            \"Windows.UIColor.Background\", new PreferenceMapping<>(\"backgroundColor\", Color.class),\n+            \"Windows.UIColor.Accent\", new PreferenceMapping<>(\"accentColor\", Color.class),\n+            \"Windows.UISettings.AdvancedEffectsEnabled\", new PreferenceMapping<>(\"reducedTransparency\", Boolean.class, b -> !b),\n+            \"Windows.SPI.ClientAreaAnimation\", new PreferenceMapping<>(\"reducedMotion\", Boolean.class, b -> !b)\n@@ -391,0 +394,1 @@\n+            Map.entry(\"Windows.SPI.ClientAreaAnimation\", Boolean.class),\n@@ -407,1 +411,2 @@\n-            Map.entry(\"Windows.UIColor.AccentLight3\", Color.class)\n+            Map.entry(\"Windows.UIColor.AccentLight3\", Color.class),\n+            Map.entry(\"Windows.UISettings.AdvancedEffectsEnabled\", Boolean.class)\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinApplication.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import com.sun.javafx.application.preferences.PreferenceMapping;\n@@ -1016,1 +1017,1 @@\n-                                       Map<String, String> platformKeyMappings,\n+                                       Map<String, PreferenceMapping<?>> platformKeyMappings,\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import javafx.beans.property.ReadOnlyBooleanProperty;\n@@ -53,1 +54,1 @@\n-public class PlatformPreferences extends AbstractMap<String, Object> implements Platform.Preferences {\n+public final class PlatformPreferences extends AbstractMap<String, Object> implements Platform.Preferences {\n@@ -66,1 +67,1 @@\n-    private final Map<String, String> platformKeyMappings;\n+    private final Map<String, PreferenceMapping<?>> platformKeyMappings;\n@@ -89,1 +90,2 @@\n-    public PlatformPreferences(Map<String, Class<?>> platformKeys, Map<String, String> platformKeyMappings) {\n+    public PlatformPreferences(Map<String, Class<?>> platformKeys,\n+                               Map<String, PreferenceMapping<?>> platformKeyMappings) {\n@@ -204,0 +206,20 @@\n+    @Override\n+    public ReadOnlyBooleanProperty reducedMotionProperty() {\n+        return properties.reducedMotionProperty();\n+    }\n+\n+    @Override\n+    public boolean isReducedMotion() {\n+        return properties.isReducedMotion();\n+    }\n+\n+    @Override\n+    public ReadOnlyBooleanProperty reducedTransparencyProperty() {\n+        return properties.reducedTransparencyProperty();\n+    }\n+\n+    @Override\n+    public boolean isReducedTransparency() {\n+        return properties.isReducedTransparency();\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PlatformPreferences.java","additions":26,"deletions":4,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.application.preferences;\n+\n+import com.sun.javafx.util.Logging;\n+import java.util.Objects;\n+import java.util.function.Function;\n+\n+\/**\n+ * A mapping from platform-specific keys to platform-independent keys defined by JavaFX, including a\n+ * function that maps the platform-specific value to the platform-independent value.\n+ *\/\n+public record PreferenceMapping<T>(String keyName, Class<T> valueType, Function<T, T> valueMapper) {\n+\n+    public PreferenceMapping {\n+        Objects.requireNonNull(keyName, \"keyName cannot be null\");\n+        Objects.requireNonNull(valueType, \"valueType cannot be null\");\n+        Objects.requireNonNull(valueMapper, \"valueMapper cannot be null\");\n+    }\n+\n+    public PreferenceMapping(String keyName, Class<T> valueType) {\n+        this(keyName, valueType, Function.identity());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public T map(Object value) {\n+        if (valueType.isInstance(value)) {\n+            return valueMapper.apply((T)value);\n+        }\n+\n+        if (value != null) {\n+            Logging.getJavaFXLogger().warning(\n+                \"Unexpected value of \" + keyName + \" platform preference, \" +\n+                \"using default value instead (expected = \" + valueType.getName() +\n+                \", actual = \" + value.getClass().getName() + \")\");\n+        }\n+\n+        return null;\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PreferenceMapping.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+import javafx.beans.property.ReadOnlyBooleanProperty;\n+import javafx.beans.property.ReadOnlyBooleanWrapper;\n@@ -46,4 +48,4 @@\n-    private final ColorProperty backgroundColor = new ColorProperty(\"backgroundColor\", Color.WHITE);\n-    private final ColorProperty foregroundColor = new ColorProperty(\"foregroundColor\", Color.BLACK);\n-    private final ColorProperty accentColor = new ColorProperty(\"accentColor\", Color.rgb(21, 126, 251));\n-    private final List<ColorProperty> allColors = List.of(backgroundColor, foregroundColor, accentColor);\n+    private final DeferredProperty<Color> backgroundColor = new DeferredProperty<>(\"backgroundColor\", Color.WHITE);\n+    private final DeferredProperty<Color> foregroundColor = new DeferredProperty<>(\"foregroundColor\", Color.BLACK);\n+    private final DeferredProperty<Color> accentColor = new DeferredProperty<>(\"accentColor\", Color.rgb(21, 126, 251));\n+    private final List<DeferredProperty<Color>> allColors = List.of(backgroundColor, foregroundColor, accentColor);\n@@ -51,0 +53,5 @@\n+    private final DeferredProperty<Boolean> reducedMotion = new DeferredProperty<>(\"reducedMotion\", false);\n+    private final DeferredProperty<Boolean> reducedTransparency = new DeferredProperty<>(\"reducedTransparency\", false);\n+    private final List<DeferredProperty<Boolean>> allFlags = List.of(reducedMotion, reducedTransparency);\n+    private final ReadOnlyBooleanWrapper reducedMotionFlag;\n+    private final ReadOnlyBooleanWrapper reducedTransparencyFlag;\n@@ -55,0 +62,30 @@\n+\n+        reducedMotionFlag = new ReadOnlyBooleanWrapper(bean, reducedMotion.getName());\n+        reducedMotionFlag.bind(reducedMotion);\n+\n+        reducedTransparencyFlag = new ReadOnlyBooleanWrapper(bean, reducedTransparency.getName());\n+        reducedTransparencyFlag.bind(reducedTransparency);\n+    }\n+\n+    public ReadOnlyBooleanProperty reducedMotionProperty() {\n+        return reducedMotionFlag.getReadOnlyProperty();\n+    }\n+\n+    public boolean isReducedMotion() {\n+        return reducedMotion.get();\n+    }\n+\n+    public void setReducedMotion(boolean value) {\n+        reducedMotion.setValueOverride(value);\n+    }\n+\n+    public ReadOnlyBooleanProperty reducedTransparencyProperty() {\n+        return reducedTransparencyFlag.getReadOnlyProperty();\n+    }\n+\n+    public boolean isReducedTransparency() {\n+        return reducedTransparency.get();\n+    }\n+\n+    public void setReducedTransparency(boolean value) {\n+        reducedTransparency.setValueOverride(value);\n@@ -105,1 +142,3 @@\n-    public void update(Map<String, ChangedValue> changedPreferences, Map<String, String> platformKeyMappings) {\n+    public void update(Map<String, ChangedValue> changedPreferences,\n+                       Map<String, PreferenceMapping<?>> platformKeyMappings) {\n+        outerLoop:\n@@ -107,6 +146,13 @@\n-            String key = platformKeyMappings.get(entry.getKey());\n-            if (key != null) {\n-                for (ColorProperty colorProperty : allColors) {\n-                    if (colorProperty.getName().equals(key)) {\n-                        updateColorProperty(colorProperty, entry.getValue().newValue());\n-                        break;\n+            PreferenceMapping<?> mapping = platformKeyMappings.get(entry.getKey());\n+            if (mapping != null) {\n+                for (DeferredProperty<Color> color : allColors) {\n+                    if (color.getName().equals(mapping.keyName())) {\n+                        updateDeferredProperty(color, Color.class, entry.getValue().newValue());\n+                        continue outerLoop;\n+                    }\n+                }\n+\n+                for (DeferredProperty<Boolean> flag : allFlags) {\n+                    if (flag.getName().equals(mapping.keyName())) {\n+                        updateDeferredProperty(flag, Boolean.class, mapping.map(entry.getValue().newValue()));\n+                        continue outerLoop;\n@@ -121,3 +167,4 @@\n-    private void updateColorProperty(ColorProperty property, Object value) {\n-        if (value instanceof Color color) {\n-            property.setValue(color);\n+    @SuppressWarnings(\"unchecked\")\n+    private <T> void updateDeferredProperty(DeferredProperty<T> property, Class<T> valueType, Object value) {\n+        if (valueType.isInstance(value)) {\n+            property.setValue((T)value);\n@@ -128,1 +175,1 @@\n-                    \"using default value instead (expected = \" + Color.class.getName() +\n+                    \"using default value instead (expected = \" + valueType.getName() +\n@@ -132,1 +179,1 @@\n-            \/\/ Setting a ColorProperty to 'null' restores its platform value or default value.\n+            \/\/ Setting a DeferredProperty to 'null' restores its platform value or default value.\n@@ -138,1 +185,1 @@\n-        for (ColorProperty colorProperty : allColors) {\n+        for (DeferredProperty<Color> colorProperty : allColors) {\n@@ -144,3 +191,3 @@\n-     * ColorProperty implements a deferred notification mechanism, where change notifications\n-     * are only fired after changes of all color properties have been applied.\n-     * This ensures that observers will never see a transient state where two color properties\n+     * DeferredProperty implements a deferred notification mechanism, where change notifications\n+     * are only fired after changes of all properties have been applied.\n+     * This ensures that observers will never see a transient state where two properties\n@@ -150,1 +197,1 @@\n-    private final class ColorProperty extends ReadOnlyObjectPropertyBase<Color> {\n+    private final class DeferredProperty<T> extends ReadOnlyObjectPropertyBase<T> {\n@@ -152,5 +199,5 @@\n-        private final Color defaultValue;\n-        private Color overrideValue;\n-        private Color platformValue;\n-        private Color effectiveValue;\n-        private Color lastEffectiveValue;\n+        private final T defaultValue;\n+        private T overrideValue;\n+        private T platformValue;\n+        private T effectiveValue;\n+        private T lastEffectiveValue;\n@@ -158,1 +205,1 @@\n-        ColorProperty(String name, Color initialValue) {\n+        DeferredProperty(String name, T initialValue) {\n@@ -177,1 +224,1 @@\n-        public Color get() {\n+        public T get() {\n@@ -182,2 +229,2 @@\n-         * Only called by {@link #updateColorProperty}, this method doesn't fire a change notification.\n-         * Change notifications are fired after the new values of all color properties have been set.\n+         * Only called by {@link #updateDeferredProperty}, this method doesn't fire a change notification.\n+         * Change notifications are fired after the new values of all deferred properties have been set.\n@@ -185,1 +232,1 @@\n-        public void setValue(Color value) {\n+        public void setValue(T value) {\n@@ -190,1 +237,1 @@\n-        public void setValueOverride(Color value) {\n+        public void setValueOverride(T value) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PreferenceProperties.java","additions":80,"deletions":33,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -481,0 +481,1 @@\n+     *         <tr><td>{@code Windows.SPI.ClientAreaAnimation}<\/td><td>{@link Boolean}<\/td><\/tr>\n@@ -498,0 +499,1 @@\n+     *         <tr><td>{@code Windows.UISettings.AdvancedEffectsEnabled}<\/td><td>{@link Boolean}<\/td><\/tr>\n@@ -550,0 +552,2 @@\n+     *         <tr><td>{@code macOS.NSWorkspace.accessibilityDisplayShouldReduceMotion}<\/td><td>{@link Boolean}<\/td><\/tr>\n+     *         <tr><td>{@code macOS.NSWorkspace.accessibilityDisplayShouldReduceTransparency}<\/td><td>{@link Boolean}<\/td><\/tr>\n@@ -575,0 +579,1 @@\n+     *         <tr><td>{@code GTK.enable_animations}<\/td><td>{@link Boolean}<\/td><\/tr>\n@@ -581,1 +586,30 @@\n-    public interface Preferences extends ObservableMap<String, Object> {\n+    public sealed interface Preferences extends ObservableMap<String, Object>\n+            permits com.sun.javafx.application.preferences.PlatformPreferences {\n+\n+        \/**\n+         * Specifies whether applications should minimize the amount of non-essential animations,\n+         * reducing discomfort for users who experience motion sickness or vertigo.\n+         * <p>\n+         * If the platform does not report this preference, this property defaults to {@code false}.\n+         *\n+         * @return the {@code reducedMotion} property\n+         * @defaultValue {@code false}\n+         * @since 24\n+         *\/\n+        ReadOnlyBooleanProperty reducedMotionProperty();\n+\n+        boolean isReducedMotion();\n+\n+        \/**\n+         * Specifies whether applications should minimize the amount of transparent or translucent\n+         * layer effects, which can help to increase contrast and readability for some users.\n+         * <p>\n+         * If the platform does not report this preference, this property defaults to {@code false}.\n+         *\n+         * @return the {@code reducedTransparency} property\n+         * @defaultValue {@code false}\n+         * @since 24\n+         *\/\n+        ReadOnlyBooleanProperty reducedTransparencyProperty();\n+\n+        boolean isReducedTransparency();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/Platform.java","additions":35,"deletions":1,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -203,2 +203,4 @@\n-        g_signal_connect(G_OBJECT(settings), \"notify::gtk-theme-name\",\n-                         G_CALLBACK(call_update_preferences), NULL);\n+        for (const auto& setting : PlatformSupport::observedSettings) {\n+            g_signal_connect_after(G_OBJECT(settings), setting,\n+                                   G_CALLBACK(call_update_preferences), NULL);\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassApplication.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,0 +63,11 @@\n+\n+    void putBoolean(JNIEnv* env, jobject preferences, const char* name, bool value) {\n+        jobject prefKey = env->NewStringUTF(name);\n+        if (EXCEPTION_OCCURED(env) || prefKey == NULL) return;\n+\n+        jobject prefValue = env->GetStaticObjectField(jBooleanCls, value ? jBooleanTRUE : jBooleanFALSE);\n+        if (EXCEPTION_OCCURED(env) || prefValue == NULL) return;\n+\n+        env->CallObjectMethod(preferences, jMapPut, prefKey, prefValue);\n+        CHECK_JNI_EXCEPTION(env);\n+    }\n@@ -108,0 +119,5 @@\n+        g_free(themeName);\n+\n+        gboolean enableAnimations = true;\n+        g_object_get(settings, \"gtk-enable-animations\", &enableAnimations, NULL);\n+        putBoolean(env, prefs, \"GTK.enable_animations\", enableAnimations);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/PlatformSupport.cpp","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -33,0 +33,5 @@\n+    static constexpr const char* observedSettings[] = {\n+        \"notify::gtk-theme-name\",\n+        \"notify::gtk-enable-animations\"\n+    };\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/PlatformSupport.h","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -248,0 +248,6 @@\n+                        [[[NSWorkspace sharedWorkspace] notificationCenter]\n+                            addObserver:self\n+                            selector:@selector(platformPreferencesDidChange)\n+                            name:NSWorkspaceAccessibilityDisplayOptionsDidChangeNotification\n+                            object:nil];\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.m","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -109,0 +109,8 @@\n+    [PlatformSupport putBoolean:preferences\n+                     key:\"macOS.NSWorkspace.accessibilityDisplayShouldReduceMotion\"\n+                     value:[[NSWorkspace sharedWorkspace] accessibilityDisplayShouldReduceMotion]];\n+\n+    [PlatformSupport putBoolean:preferences\n+                     key:\"macOS.NSWorkspace.accessibilityDisplayShouldReduceTransparency\"\n+                     value:[[NSWorkspace sharedWorkspace] accessibilityDisplayShouldReduceTransparency]];\n+\n@@ -225,0 +233,13 @@\n++ (void)putBoolean:(jobject)preferences key:(const char*)key value:(bool)value {\n+    GET_MAIN_JENV;\n+\n+    jobject prefKey = (*env)->NewStringUTF(env, key);\n+    GLASS_CHECK_NONNULL_EXCEPTION_RETURN(env, prefKey);\n+\n+    jobject prefValue = (*env)->GetStaticObjectField(env, jBooleanClass, value ? jBooleanTRUE : jBooleanFALSE);\n+    GLASS_CHECK_NONNULL_EXCEPTION_RETURN(env, prefValue);\n+\n+    (*env)->CallObjectMethod(env, preferences, jMapPutMethod, prefKey, prefValue);\n+    GLASS_CHECK_EXCEPTION(env);\n+}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/PlatformSupport.m","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -171,3 +171,1 @@\n-            if (((UINT)wParam == SPI_GETHIGHCONTRAST ||\n-                    lParam != NULL && wcscmp(LPCWSTR(lParam), L\"ImmersiveColorSet\") == 0) &&\n-                    m_platformSupport.updatePreferences(m_grefThis)) {\n+            if (m_platformSupport.onSettingChanged(m_grefThis, wParam, lParam)) {\n@@ -176,0 +174,1 @@\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassApplication.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-    queryHighContrastScheme(prefs);\n+    querySystemParameters(prefs);\n@@ -92,1 +92,1 @@\n-    queryUIColors(prefs);\n+    queryUISettings(prefs);\n@@ -127,1 +127,16 @@\n-void PlatformSupport::queryHighContrastScheme(jobject properties) const\n+bool PlatformSupport::onSettingChanged(jobject application, WPARAM wParam, LPARAM lParam) const\n+{\n+    switch ((UINT)wParam) {\n+        case SPI_SETHIGHCONTRAST:\n+        case SPI_SETCLIENTAREAANIMATION:\n+            return updatePreferences(application);\n+    }\n+\n+    if (lParam != NULL && wcscmp(LPCWSTR(lParam), L\"ImmersiveColorSet\") == 0) {\n+        return updatePreferences(application);\n+    }\n+\n+    return false;\n+}\n+\n+void PlatformSupport::querySystemParameters(jobject properties) const\n@@ -141,0 +156,4 @@\n+\n+    BOOL value;\n+    ::SystemParametersInfo(SPI_GETCLIENTAREAANIMATION, 0, &value, 0);\n+    putBoolean(properties, \"Windows.SPI.ClientAreaAnimation\", value);\n@@ -156,1 +175,1 @@\n-void PlatformSupport::queryUIColors(jobject properties) const\n+void PlatformSupport::queryUISettings(jobject properties) const\n@@ -162,0 +181,2 @@\n+    ComPtr<IUISettings> settings;\n+\n@@ -163,1 +184,0 @@\n-        ComPtr<IUISettings> settings;\n@@ -166,0 +186,6 @@\n+    } catch (RoException const&) {\n+        \/\/ If an activation exception occurs, it probably means that we're on a Windows system\n+        \/\/ that doesn't support the UISettings API. This is not a problem, it simply means that\n+        \/\/ we don't report the UISettings properties back to the JavaFX application.\n+        return;\n+    }\n@@ -167,0 +193,1 @@\n+    try {\n@@ -195,3 +222,12 @@\n-        \/\/ If an activation exception occurs, it probably means that we're on a Windows system\n-        \/\/ that doesn't support the UISettings API. This is not a problem, it simply means that\n-        \/\/ we don't report the UISettings properties back to the JavaFX application.\n+        return;\n+    }\n+\n+    try {\n+        ComPtr<IUISettings4> settings4;\n+        RO_CHECKED(\"IUISettings::QueryInterface<IUISettings4>\",\n+                   settings->QueryInterface<IUISettings4>(&settings4));\n+\n+        unsigned char value;\n+        settings4->get_AdvancedEffectsEnabled(&value);\n+        putBoolean(properties, \"Windows.UISettings.AdvancedEffectsEnabled\", value);\n+    } catch (RoException const&) {\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/PlatformSupport.cpp","additions":44,"deletions":8,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,5 @@\n+    \/**\n+     * Handles the WM_SETTINGCHANGE message.\n+    *\/\n+    bool onSettingChanged(jobject application, WPARAM, LPARAM) const;\n+\n@@ -66,2 +71,2 @@\n-    void queryHighContrastScheme(jobject properties) const;\n-    void queryUIColors(jobject properties) const;\n+    void querySystemParameters(jobject properties) const;\n+    void queryUISettings(jobject properties) const;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/PlatformSupport.h","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import com.sun.javafx.application.preferences.PreferenceMapping;\n@@ -68,3 +69,5 @@\n-                \"test.foregroundColor\", \"foregroundColor\",\n-                \"test.backgroundColor\", \"backgroundColor\",\n-                \"test.accentColor\", \"accentColor\"\n+                \"test.foregroundColor\", new PreferenceMapping<>(\"foregroundColor\", Color.class),\n+                \"test.backgroundColor\", new PreferenceMapping<>(\"backgroundColor\", Color.class),\n+                \"test.accentColor\", new PreferenceMapping<>(\"accentColor\", Color.class),\n+                \"test.reducedMotion\", new PreferenceMapping<>(\"reducedMotion\", Boolean.class),\n+                \"test.enableTransparency\", new PreferenceMapping<>(\"reducedTransparency\", Boolean.class, b -> !b)\n@@ -330,0 +333,37 @@\n+    @Test\n+    void testReducedMotionProperty() {\n+        var observer = new MockMapObserver<String, Object>();\n+        prefs.addListener(observer);\n+\n+        assertFalse(prefs.isReducedMotion());\n+        prefs.update(Map.of(\"test.reducedMotion\", true));\n+\n+        assertTrue(prefs.isReducedMotion());\n+        assertEquals(1, observer.getCallsNumber());\n+        observer.assertAdded(0, tup(\"test.reducedMotion\", true));\n+        observer.clear();\n+\n+        prefs.update(new HashMap<>() {{ put(\"test.reducedMotion\", null); }});\n+        assertEquals(1, observer.getCallsNumber());\n+        observer.assertRemoved(0, tup(\"test.reducedMotion\", true));\n+        assertFalse(prefs.isReducedMotion());\n+    }\n+\n+    @Test\n+    void testReducedTransparencyPropertyWithInverseMapping() {\n+        var observer = new MockMapObserver<String, Object>();\n+        prefs.addListener(observer);\n+\n+        assertFalse(prefs.isReducedTransparency());\n+        prefs.update(Map.of(\"test.enableTransparency\", false));\n+\n+        assertTrue(prefs.isReducedTransparency());\n+        assertEquals(1, observer.getCallsNumber());\n+        observer.assertAdded(0, tup(\"test.enableTransparency\", false));\n+        observer.clear();\n+\n+        prefs.update(new HashMap<>() {{ put(\"test.enableTransparency\", null); }});\n+        assertEquals(1, observer.getCallsNumber());\n+        observer.assertRemoved(0, tup(\"test.enableTransparency\", false));\n+        assertFalse(prefs.isReducedMotion());\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/application\/preferences\/PlatformPreferencesTest.java","additions":44,"deletions":4,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -67,0 +67,2 @@\n+        var reducedMotionLabel = new Label();\n+        var reducedTransparencyLabel = new Label();\n@@ -74,0 +76,2 @@\n+            reducedMotionLabel.setText(Boolean.toString(preferences.isReducedMotion()));\n+            reducedTransparencyLabel.setText(Boolean.toString(preferences.isReducedTransparency()));\n@@ -90,1 +94,3 @@\n-                new HBox(new BoldLabel(\"    colorScheme: \"), colorSchemeLabel)),\n+                new HBox(new BoldLabel(\"    colorScheme: \"), colorSchemeLabel),\n+                new HBox(new BoldLabel(\"    reducedMotion: \"), reducedMotionLabel),\n+                new HBox(new BoldLabel(\"    reducedTransparency: \"), reducedTransparencyLabel)),\n","filename":"tests\/manual\/events\/PlatformPreferencesChangedTest.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}