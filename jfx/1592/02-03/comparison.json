{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import com.sun.javafx.util.Logging;\n@@ -39,1 +38,1 @@\n-import java.util.List;\n+import java.util.HashMap;\n@@ -48,0 +47,1 @@\n+    private final Map<String, DeferredProperty<?>> deferredProperties = new HashMap<>();\n@@ -51,1 +51,0 @@\n-    private final List<DeferredProperty<Color>> allColors = List.of(backgroundColor, foregroundColor, accentColor);\n@@ -55,1 +54,0 @@\n-    private final List<DeferredProperty<Boolean>> allFlags = List.of(reducedMotion, reducedTransparency);\n@@ -144,1 +142,0 @@\n-        outerLoop:\n@@ -146,15 +143,3 @@\n-            PreferenceMapping<?> mapping = platformKeyMappings.get(entry.getKey());\n-            if (mapping != null) {\n-                for (DeferredProperty<Color> color : allColors) {\n-                    if (color.getName().equals(mapping.keyName())) {\n-                        updateDeferredProperty(color, Color.class, entry.getValue().newValue());\n-                        continue outerLoop;\n-                    }\n-                }\n-\n-                for (DeferredProperty<Boolean> flag : allFlags) {\n-                    if (flag.getName().equals(mapping.keyName())) {\n-                        updateDeferredProperty(flag, Boolean.class, mapping.map(entry.getValue().newValue()));\n-                        continue outerLoop;\n-                    }\n-                }\n+            if (platformKeyMappings.get(entry.getKey()) instanceof PreferenceMapping<?> mapping\n+                    && deferredProperties.get(mapping.keyName()) instanceof DeferredProperty<?> property) {\n+                property.setPlatformValue(mapping.map(entry.getValue().newValue()));\n@@ -164,23 +149,2 @@\n-        fireValueChangedIfNecessary();\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    private <T> void updateDeferredProperty(DeferredProperty<T> property, Class<T> valueType, Object value) {\n-        if (valueType.isInstance(value)) {\n-            property.setValue((T)value);\n-        } else {\n-            if (value != null) {\n-                Logging.getJavaFXLogger().warning(\n-                    \"Unexpected value of \" + property.getName() + \" platform preference, \" +\n-                    \"using default value instead (expected = \" + valueType.getName() +\n-                    \", actual = \" + value.getClass().getName() + \")\");\n-            }\n-\n-            \/\/ Setting a DeferredProperty to 'null' restores its platform value or default value.\n-            property.setValue(null);\n-        }\n-    }\n-\n-    private void fireValueChangedIfNecessary() {\n-        for (DeferredProperty<Color> colorProperty : allColors) {\n-            colorProperty.fireValueChangedIfNecessary();\n+        for (DeferredProperty<?> property : deferredProperties.values()) {\n+            property.fireValueChangedIfNecessary();\n@@ -206,0 +170,2 @@\n+            Objects.requireNonNull(initialValue);\n+            PreferenceProperties.this.deferredProperties.put(name, this);\n@@ -229,1 +195,1 @@\n-         * Only called by {@link #updateDeferredProperty}, this method doesn't fire a change notification.\n+         * Only called from {@link PreferenceProperties#update}, this method doesn't fire a change notification.\n@@ -232,2 +198,4 @@\n-        public void setValue(T value) {\n-            this.platformValue = value;\n+        @SuppressWarnings(\"unchecked\")\n+        public void setPlatformValue(Object value) {\n+            Class<?> expectedType = defaultValue.getClass();\n+            this.platformValue = expectedType.isInstance(value) ? (T)value : null;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PreferenceProperties.java","additions":14,"deletions":46,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -335,2 +335,2 @@\n-        var observer = new MockMapObserver<String, Object>();\n-        prefs.addListener(observer);\n+        var trace = new ArrayList<Boolean>();\n+        prefs.reducedMotionProperty().addListener((observable, ov, nv) -> trace.add(nv));\n@@ -341,0 +341,2 @@\n+        assertEquals(1, trace.size());\n+        assertEquals(Boolean.TRUE, trace.get(0));\n@@ -342,3 +344,0 @@\n-        assertEquals(1, observer.getCallsNumber());\n-        observer.assertAdded(0, tup(\"test.reducedMotion\", true));\n-        observer.clear();\n@@ -347,2 +346,2 @@\n-        assertEquals(1, observer.getCallsNumber());\n-        observer.assertRemoved(0, tup(\"test.reducedMotion\", true));\n+        assertEquals(2, trace.size());\n+        assertEquals(Boolean.FALSE, trace.get(1));\n@@ -354,2 +353,2 @@\n-        var observer = new MockMapObserver<String, Object>();\n-        prefs.addListener(observer);\n+        var trace = new ArrayList<Boolean>();\n+        prefs.reducedTransparencyProperty().addListener((observable, ov, nv) -> trace.add(nv));\n@@ -360,0 +359,2 @@\n+        assertEquals(1, trace.size());\n+        assertEquals(Boolean.TRUE, trace.get(0));\n@@ -361,3 +362,0 @@\n-        assertEquals(1, observer.getCallsNumber());\n-        observer.assertAdded(0, tup(\"test.enableTransparency\", false));\n-        observer.clear();\n@@ -366,3 +364,3 @@\n-        assertEquals(1, observer.getCallsNumber());\n-        observer.assertRemoved(0, tup(\"test.enableTransparency\", false));\n-        assertFalse(prefs.isReducedMotion());\n+        assertEquals(2, trace.size());\n+        assertEquals(Boolean.FALSE, trace.get(1));\n+        assertFalse(prefs.isReducedTransparency());\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/application\/preferences\/PlatformPreferencesTest.java","additions":13,"deletions":15,"binary":false,"changes":28,"status":"modified"}]}