{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,1 @@\n+     *\n@@ -56,1 +57,1 @@\n-     * @return the instance\n+     * @return the instance of StyleAttributeMap, or null\n@@ -63,1 +64,1 @@\n-     * Returns a new StyleAttributeMap instance which contains only the paragraph attributes.,\n+     * Returns a new StyleAttributeMap instance which contains only the paragraph attributes,\n@@ -65,0 +66,1 @@\n+     *\n@@ -66,1 +68,1 @@\n-     * @return the instance\n+     * @return the instance of StyleAttributeMap, or null\n@@ -71,0 +73,17 @@\n+\n+    \/**\n+     * Returns a new StyleAttributeMap instance which contains only paragraph attributes\n+     * when {@code forParagraph=true}, or character attributes when {@code forParagraph=false},\n+     * or null when no attributes of the specified type are found.\n+     *\n+     * @param ss the style attribute map\n+     * @param forParagraph determines which attributes to retain\n+     * @return the instance of StyleAttributeMap, or null\n+     *\/\n+    public static StyleAttributeMap filter(StyleAttributeMap ss, boolean forParagraph) {\n+        if (forParagraph) {\n+            return StyleAttributeMapHelper.getParagraphAttrs(ss);\n+        } else {\n+            return StyleAttributeMapHelper.getCharacterAttrs(ss);\n+        }\n+    }\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/StyleAttributeMapHelper.java","additions":23,"deletions":4,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+import com.sun.jfx.incubator.scene.control.richtext.StyleAttributeMapHelper;\n@@ -58,1 +59,0 @@\n- *     PARAGRAPH_ATTRIBUTE[]*,\n@@ -60,0 +60,1 @@\n+ *     PARAGRAPH_ATTRIBUTE[]*,\n@@ -83,1 +84,1 @@\n- *     ATTRIBUTE[]*\n+ *     ATTRIBUTE[]* or {}\n@@ -87,0 +88,4 @@\n+ *\n+ * A special token <code>{}<\/code> denotes an empty character attribute map,\n+ * while <code>{!}<\/code> does the same for an empty paragraph attribute map.\n+ * <p>\n@@ -306,0 +311,1 @@\n+            attrs = StyleAttributeMapHelper.filter(attrs, forParagraph);\n@@ -360,3 +366,8 @@\n-            } else if (forParagraph) {\n-                \/\/ this special token clears the paragraph attributes\n-                wr.write(\"{!}\");\n+            } else {\n+                if (forParagraph) {\n+                    \/\/ this special token clears the paragraph attributes\n+                    wr.write(\"{!}\");\n+                } else {\n+                    \/\/ special token indicates the next text segment\n+                    wr.write(\"{}\");\n+                }\n@@ -465,1 +476,1 @@\n-                err(e);\n+                log(e);\n@@ -501,7 +512,3 @@\n-                    if (forParagraph) {\n-                        index = ix + 1;\n-                        \/\/ special token clears paragraph attributes\n-                        return StyleAttributeMap.EMPTY;\n-                    } else {\n-                        throw err(\"empty attribute name\");\n-                    }\n+                    index = ix + 1;\n+                    \/\/ either {} or {!} clears signifies empty attributes\n+                    return StyleAttributeMap.EMPTY;\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/model\/RichTextFormatHandler.java","additions":21,"deletions":14,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -431,1 +431,1 @@\n-                return ss.filterAttributes(isParagraph);\n+                return (ss == null ? null : ss.filterAttributes(isParagraph));\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/model\/StyleAttributeMap.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -348,1 +348,1 @@\n-        assertEquals(\"a{!}\", v);\n+        assertEquals(\"{}a{!}\", v);\n@@ -668,1 +668,1 @@\n-        assertEquals(\"1 {b}bold{!}\", new String(b, StandardCharsets.US_ASCII));\n+        assertEquals(\"{}1 {b}bold{!}\", new String(b, StandardCharsets.US_ASCII));\n","filename":"modules\/jfx.incubator.richtext\/src\/test\/java\/test\/jfx\/incubator\/scene\/control\/richtext\/RichTextAreaTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.util.List;\n@@ -49,1 +48,1 @@\n-    private static final boolean DEBUG = true;\n+    private static boolean DEBUG = false;\n@@ -52,35 +51,14 @@\n-    public void testRoundTrip() throws IOException {\n-        Object[] ss = {\n-            List.of(\n-                p(\n-                    a(StyleAttributeMap.BACKGROUND, Color.RED),\n-                    a(StyleAttributeMap.BULLET, \"⌘\"),\n-                    a(StyleAttributeMap.FIRST_LINE_INDENT, 10.0),\n-                    a(StyleAttributeMap.LINE_SPACING, 11.0),\n-                    a(StyleAttributeMap.PARAGRAPH_DIRECTION, ParagraphDirection.RIGHT_TO_LEFT)\n-                ),\n-                s(\"bold\", StyleAttributeMap.BOLD),\n-                s(\"font family\", a(StyleAttributeMap.FONT_FAMILY, \"Arial\")),\n-                s(\"font size\", a(StyleAttributeMap.FONT_SIZE, 12.0)),\n-                s(\"italic\", StyleAttributeMap.ITALIC),\n-                nl(),\n-\n-                p(\n-                    a(StyleAttributeMap.SPACE_ABOVE, 13.0),\n-                    a(StyleAttributeMap.SPACE_BELOW, 14.0),\n-                    a(StyleAttributeMap.SPACE_LEFT, 15.0),\n-                    a(StyleAttributeMap.SPACE_RIGHT, 16.0),\n-                    a(StyleAttributeMap.TEXT_ALIGNMENT, TextAlignment.CENTER),\n-                    a(StyleAttributeMap.PARAGRAPH_DIRECTION, ParagraphDirection.LEFT_TO_RIGHT)\n-                ),\n-                s(\"strike through\", StyleAttributeMap.STRIKE_THROUGH),\n-                s(\"text color\", a(StyleAttributeMap.TEXT_COLOR, Color.GREEN)),\n-                s(\"underline\", StyleAttributeMap.UNDERLINE),\n-                nl(),\n-\n-                s(\"combined\", StyleAttributeMap.ITALIC, a(StyleAttributeMap.TEXT_COLOR, Color.RED), StyleAttributeMap.UNDERLINE),\n-                nl()\n-\n-                \/\/ TODO test escapes in text, attribute names, attribute values\n-            )\n-        };\n+    public void testBasicAttributes() throws IOException {\n+        testRoundTrip(\n+            s(\"bold\", StyleAttributeMap.BOLD),\n+            s(\"font family\", a(StyleAttributeMap.FONT_FAMILY, \"Arial\")),\n+            s(\"font size\", a(StyleAttributeMap.FONT_SIZE, 12.0)),\n+            s(\"italic\", StyleAttributeMap.ITALIC),\n+            p(\n+                a(StyleAttributeMap.BACKGROUND, Color.RED),\n+                a(StyleAttributeMap.BULLET, \"⌘\"),\n+                a(StyleAttributeMap.FIRST_LINE_INDENT, 10.0),\n+                a(StyleAttributeMap.LINE_SPACING, 11.0),\n+                a(StyleAttributeMap.PARAGRAPH_DIRECTION, ParagraphDirection.RIGHT_TO_LEFT)\n+            ),\n+            nl(),\n@@ -88,1 +66,12 @@\n-        RichTextFormatHandler handler = RichTextFormatHandler.getInstance();\n+            s(\"strike through\", StyleAttributeMap.STRIKE_THROUGH),\n+            s(\"text color\", a(StyleAttributeMap.TEXT_COLOR, Color.GREEN)),\n+            s(\"underline\", StyleAttributeMap.UNDERLINE),\n+            p(\n+                a(StyleAttributeMap.SPACE_ABOVE, 13.0),\n+                a(StyleAttributeMap.SPACE_BELOW, 14.0),\n+                a(StyleAttributeMap.SPACE_LEFT, 15.0),\n+                a(StyleAttributeMap.SPACE_RIGHT, 16.0),\n+                a(StyleAttributeMap.TEXT_ALIGNMENT, TextAlignment.CENTER),\n+                a(StyleAttributeMap.PARAGRAPH_DIRECTION, ParagraphDirection.LEFT_TO_RIGHT)\n+            ),\n+            nl(),\n@@ -90,3 +79,28 @@\n-        for (Object x : ss) {\n-            testRoundTrip(handler, (List<StyledSegment>)x);\n-        }\n+            s(\"combined\", StyleAttributeMap.ITALIC, a(StyleAttributeMap.TEXT_COLOR, Color.RED), StyleAttributeMap.UNDERLINE),\n+            nl()\n+        );\n+    }\n+\n+    \/\/ JDK-8357393\n+    @Test\n+    public void testEmptyCharAttributeToken() throws IOException {\n+        testRoundTrip(\n+            s(\"normal\"),\n+            s(\"BOLD\", StyleAttributeMap.BOLD),\n+            s(\"normal\")\n+        );\n+    }\n+\n+    @Test\n+    public void testEmptyParagraphAttributeToken() throws IOException {\n+        testRoundTrip(\n+            s(\"normal\"),\n+            p()\n+        );\n+    }\n+\n+    @Test\n+    public void testUnknownAttributes() throws IOException {\n+        testReadWrite(\"{unknown}text{!UNKNOWN}\\n\", \"{}text{}\\n\");\n+        testReadWrite(\"{unknown}text{!UNKNOWN}{!alignment|R}\\n\", \"{}text{!alignment|R}\\n\");\n+        testReadWrite(\"{unknown}{b}text\\n\", \"{b}text\\n\");\n@@ -122,1 +136,1 @@\n-        String expected = \"%7B%7C%25%7D\";\n+        String expected = \"{}%7B%7C%25%7D\";\n@@ -174,1 +188,26 @@\n-    private void testRoundTrip(RichTextFormatHandler handler, List<StyledSegment> input) throws IOException {\n+    private void testReadWrite(String input, String expected) throws IOException {\n+        RichTextFormatHandler handler = RichTextFormatHandler.getInstance();\n+        ArrayList<StyledSegment> segments = new ArrayList<>();\n+\n+        StyledInput in = handler.createStyledInput(input, null);\n+        StyledSegment seg;\n+        while ((seg = in.nextSegment()) != null) {\n+            if (DEBUG) {\n+                System.out.println(seg);\n+            }\n+            segments.add(seg);\n+        }\n+\n+        StringWriter wr = new StringWriter();\n+        StyledOutput out = RichTextFormatHandlerHelper.createStyledOutput(handler, null, wr);\n+        for (StyledSegment s : segments) {\n+            out.consume(s);\n+        }\n+        out.flush();\n+\n+        String result = wr.toString();\n+        Assertions.assertEquals(expected, result);\n+    }\n+\n+    private void testRoundTrip(StyledSegment ... input) throws IOException {\n+        RichTextFormatHandler handler = RichTextFormatHandler.getInstance();\n@@ -204,3 +243,4 @@\n-        Assertions.assertEquals(input.size(), segments.size());\n-        for (int i = 0; i < input.size(); i++) {\n-            StyledSegment is = input.get(i);\n+        int sz = input.length;\n+        Assertions.assertEquals(sz, segments.size());\n+        for (int i = 0; i < sz; i++) {\n+            StyledSegment is = input[i];\n@@ -210,1 +250,4 @@\n-            Assertions.assertEquals(is.getStyleAttributeMap(null), rs.getStyleAttributeMap(null));\n+            \/\/ empty and null attributes are equivalent for this test\n+            StyleAttributeMap im = normalize(is.getStyleAttributeMap(null));\n+            StyleAttributeMap rm = normalize(rs.getStyleAttributeMap(null));\n+            Assertions.assertEquals(im, rm);\n@@ -229,9 +272,4 @@\n-    private void testRoundTrip_DELETE(RichTextFormatHandler handler, String text) throws IOException {\n-        ArrayList<StyledSegment> segments = new ArrayList<>();\n-\n-        StyledInput in = handler.createStyledInput(text, null);\n-        StyledSegment seg;\n-        while ((seg = in.nextSegment()) != null) {\n-            segments.add(seg);\n-            if (DEBUG) {\n-                System.out.println(seg);\n+    private StyleAttributeMap normalize(StyleAttributeMap a) {\n+        if (a != null) {\n+            if (a.isEmpty()) {\n+                return null;\n@@ -240,10 +278,1 @@\n-\n-        StringWriter wr = new StringWriter();\n-        StyledOutput out = RichTextFormatHandlerHelper.createStyledOutput(handler, null, wr);\n-        for (StyledSegment s : segments) {\n-            out.consume(s);\n-        }\n-        out.flush();\n-\n-        String result = wr.toString();\n-        Assertions.assertEquals(text, result);\n+        return a;\n","filename":"modules\/jfx.incubator.richtext\/src\/test\/java\/test\/jfx\/incubator\/scene\/control\/richtext\/model\/TestRichTextFormatHandler.java","additions":96,"deletions":67,"binary":false,"changes":163,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-            \"{!}\\n{!}\"\n+            \"{}{!}\\n{}{!}\"\n@@ -63,1 +63,1 @@\n-            \"{!}\\n{!}\\n{!}\"\n+            \"{}{!}\\n{}{!}\\n{}{!}\"\n@@ -149,1 +149,1 @@\n-            throw new RuntimeException(e);\n+            Assertions.fail(e);\n","filename":"modules\/jfx.incubator.richtext\/src\/test\/java\/test\/jfx\/incubator\/scene\/control\/richtext\/model\/TestRichTextModelAttributes.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}