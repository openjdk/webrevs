{"files":[{"patch":"@@ -38,1 +38,0 @@\n-import javafx.geometry.Insets;\n@@ -47,1 +46,0 @@\n-import javafx.scene.control.Labeled;\n@@ -52,1 +50,0 @@\n-import javafx.scene.text.Font;\n@@ -56,1 +53,0 @@\n-import com.sun.javafx.scene.control.skin.Utils;\n@@ -96,2 +92,0 @@\n-    private HPos hpos;\n-    private VPos vpos;\n@@ -161,5 +155,1 @@\n-        registerChangeListener(control.alignmentProperty(), e -> {\n-            pos = getSkinnable().getAlignment();\n-            hpos = pos.getHpos();\n-            vpos = pos.getVpos();\n-        });\n+        registerChangeListener(control.alignmentProperty(), e -> pos = getSkinnable().getAlignment());\n@@ -168,5 +158,1 @@\n-        registerChangeListener(titleRegion.alignmentProperty(), e -> {\n-            pos = titleRegion.getAlignment();\n-            hpos = pos.getHpos();\n-            vpos = pos.getVpos();\n-        });\n+        registerChangeListener(titleRegion.alignmentProperty(), e -> pos = titleRegion.getAlignment());\n@@ -175,2 +161,0 @@\n-        hpos = pos == null ? HPos.LEFT   : pos.getHpos();\n-        vpos = pos == null ? VPos.CENTER : pos.getVpos();\n@@ -407,0 +391,24 @@\n+    \/*\n+     * TitledPaneSkin borrows the Label calculations from LabeledSkinBase, but\n+     * places the actual label inside a title region instead of as a direct child\n+     * of the skinnable. The padding to apply to the label therefore comes from\n+     * the padding set on this region, and should not be the one that is set on\n+     * the main control. To ensure LabeledSkinBase is not applying any padding\n+     * (as the TitleRegion handles this now), all paddings it will use are set to\n+     * zero below:\n+     *\/\n+\n+    @Override\n+    double leftLabelPadding() {\n+        return 0;\n+    }\n+\n+    @Override\n+    double rightLabelPadding() {\n+        return 0;\n+    }\n+\n+    @Override\n+    double topLabelPadding() {\n+        return 0;\n+    }\n@@ -408,0 +416,4 @@\n+    @Override\n+    double bottomLabelPadding() {\n+        return 0;\n+    }\n@@ -494,1 +506,7 @@\n-            double labelPrefWidth = labelPrefWidth(height);\n+\n+            \/*\n+             * Re-use the label size calculation from the super class of TitledPaneSkin.\n+             * Insets are handled separately, so all insets passed are set to 0.\n+             *\/\n+\n+            double labelPrefWidth = TitledPaneSkin.super.computePrefWidth(height, 0, 0, 0, 0);\n@@ -507,1 +525,7 @@\n-            double labelPrefHeight = labelPrefHeight(width);\n+\n+            \/*\n+             * Re-use the label size calculation from the super class of TitledPaneSkin.\n+             * Insets are handled separately, so all insets passed are set to 0.\n+             *\/\n+\n+            double labelPrefHeight = TitledPaneSkin.super.computePrefHeight(width, 0, 0, 0, 0);  \/\/ insets are handled elsewhere\n@@ -525,2 +549,0 @@\n-            double labelWidth = snapSizeX(Math.min(width - arrowWidth \/ 2.0, labelPrefWidth(-1)));\n-            double labelHeight = snapSizeY(labelPrefHeight(-1));\n@@ -528,6 +550,2 @@\n-            double x = left + arrowWidth + Utils.computeXOffset(width - arrowWidth, labelWidth, hpos);\n-            if (HPos.CENTER == hpos) {\n-                \/\/ We want to center the region based on the entire width of the TitledPane.\n-                x = left + Utils.computeXOffset(width, labelWidth, hpos);\n-            }\n-            double y = top + Utils.computeYOffset(height, Math.max(arrowHeight, labelHeight), vpos);\n+            double x = left + arrowWidth;\n+            double y = top;\n@@ -539,68 +557,1 @@\n-            layoutLabelInArea(x, y, labelWidth, height, pos);\n-        }\n-\n-        \/\/ Copied from LabeledSkinBase because the padding from TitledPane was being\n-        \/\/ applied to the Label when it should not be.\n-        private double labelPrefWidth(double height) {\n-            \/\/ Get the preferred width of the text\n-            final Labeled labeled = getSkinnable();\n-            final Font font = text.getFont();\n-            final String string = labeled.getText();\n-            boolean emptyText = string == null || string.isEmpty();\n-            Insets labelPadding = labeled.getLabelPadding();\n-            double widthPadding = labelPadding.getLeft() + labelPadding.getRight();\n-            double textWidth = emptyText ? 0 : Utils.computeTextWidth(font, string, 0);\n-\n-            \/\/ Now add on the graphic, gap, and padding as appropriate\n-            final Node graphic = labeled.getGraphic();\n-            if (isIgnoreGraphic()) {\n-                return textWidth + widthPadding;\n-            } else if (isIgnoreText()) {\n-                return graphic.prefWidth(-1) + widthPadding;\n-            } else if (labeled.getContentDisplay() == ContentDisplay.LEFT\n-                    || labeled.getContentDisplay() == ContentDisplay.RIGHT) {\n-                return textWidth + labeled.getGraphicTextGap() + graphic.prefWidth(-1) + widthPadding;\n-            } else {\n-                return Math.max(textWidth, graphic.prefWidth(-1)) + widthPadding;\n-            }\n-        }\n-\n-        \/\/ Copied from LabeledSkinBase because the padding from TitledPane was being\n-        \/\/ applied to the Label when it should not be.\n-        private double labelPrefHeight(double width) {\n-            final Labeled labeled = getSkinnable();\n-            final Font font = text.getFont();\n-            final ContentDisplay contentDisplay = labeled.getContentDisplay();\n-            final double gap = labeled.getGraphicTextGap();\n-            final Insets labelPadding = labeled.getLabelPadding();\n-            final double widthPadding = snappedLeftInset() + snappedRightInset() + labelPadding.getLeft() + labelPadding.getRight();\n-\n-            String str = labeled.getText();\n-            if (str != null && str.endsWith(\"\\n\")) {\n-                \/\/ Strip ending newline so we don't count another row.\n-                str = str.substring(0, str.length() - 1);\n-            }\n-\n-            if (!isIgnoreGraphic() &&\n-                (contentDisplay == ContentDisplay.LEFT || contentDisplay == ContentDisplay.RIGHT)) {\n-                width -= (graphic.prefWidth(-1) + gap);\n-            }\n-\n-            width -= widthPadding;\n-\n-            \/\/ TODO figure out how to cache this effectively.\n-            final double textHeight = Utils.computeTextHeight(font, str,\n-                    labeled.isWrapText() ? width : 0, text.getBoundsType());\n-\n-            \/\/ Now we want to add on the graphic if necessary!\n-            double h = textHeight;\n-            if (!isIgnoreGraphic()) {\n-                final Node graphic = labeled.getGraphic();\n-                if (contentDisplay == ContentDisplay.TOP || contentDisplay == ContentDisplay.BOTTOM) {\n-                    h = graphic.prefHeight(-1) + gap + textHeight;\n-                } else {\n-                    h = Math.max(textHeight, graphic.prefHeight(-1));\n-                }\n-            }\n-\n-            return h + labelPadding.getTop() + labelPadding.getBottom();\n+            layoutLabelInArea(x, y, width - arrowWidth, height, pos);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TitledPaneSkin.java","additions":47,"deletions":96,"binary":false,"changes":143,"status":"modified"}]}