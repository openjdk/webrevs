{"files":[{"patch":"@@ -0,0 +1,257 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.stage;\n+\n+import java.util.ArrayList;\n+import java.util.stream.Stream;\n+\n+import javafx.scene.Node;\n+import javafx.stage.Stage;\n+import javafx.stage.Popup;\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import test.com.sun.javafx.test.objects.TestGroup;\n+import test.com.sun.javafx.test.objects.TestNode;\n+import test.com.sun.javafx.test.objects.TestScene;\n+import test.com.sun.javafx.test.objects.TestStage;\n+\n+\n+\/**\n+ * This test specifically checks for ownerNode and ownerWindow properties.\n+ * Because those properties are set via different show() methods instead of\n+ * regular setter method, we can't use PropertiesTestBase for this check.\n+ * Instead we rely on checking this manually.\n+ *\/\n+public final class Popup_owner_Test {\n+\n+    public static Stream<Arguments> data() {\n+        ArrayList<Arguments> configurations = new ArrayList<>();\n+        TestObjects to;\n+\n+        to = new TestObjects();\n+        configurations.add(config(to.testPopup, to.testStage1, to.testStage2));\n+\n+        to = new TestObjects();\n+        configurations.add(config(to.testPopup, to.testRoot1, to.testRoot2));\n+\n+        to = new TestObjects();\n+        configurations.add(config(to.testPopup, to.testNode1, to.testNode2));\n+\n+        return configurations.stream();\n+    }\n+\n+    private static Arguments config(final Popup popup, final Node o1, final Node o2) {\n+        return Arguments.of(new ConfigurationNode(popup, o1, o2, 2));\n+    }\n+\n+    private static Arguments config(final Popup popup, final Stage o1, final Stage o2) {\n+        return Arguments.of(new ConfigurationStage(popup, o1, o2, 1));\n+    }\n+\n+    private static final class TestObjects {\n+        public final Popup testPopup;\n+        public final TestNode testNode1;\n+        public final TestNode testNode2;\n+        public final TestGroup testRoot1;\n+        public final TestGroup testRoot2;\n+        public final TestScene testScene1;\n+        public final TestScene testScene2;\n+        public final TestStage testStage1;\n+        public final TestStage testStage2;\n+\n+        public TestObjects() {\n+            testRoot1 = new TestGroup(\"ROOT_1\");\n+            testRoot2 = new TestGroup(\"ROOT_2\");\n+\n+            testNode1 = new TestNode(\"NODE_1\");\n+            testNode2 = new TestNode(\"NODE_2\");\n+\n+            testRoot1.getChildren().add(testNode1);\n+            testRoot2.getChildren().add(testNode2);\n+\n+            testScene1 = new TestScene(\"SCENE_1\", testRoot1);\n+            testScene2 = new TestScene(\"SCENE_2\", testRoot2);\n+\n+            testStage1 = new TestStage(\"STAGE_1\");\n+            testStage2 = new TestStage(\"STAGE_2\");\n+\n+            testStage1.setScene(testScene1);\n+            testStage2.setScene(testScene2);\n+\n+            testPopup = new Popup();\n+        }\n+    }\n+\n+    public static abstract class Configuration {\n+        public final Popup testPopup;\n+        public final int expectedListenerCalls;\n+\n+        public Configuration(Popup popup, int expectedCalls) {\n+            this.testPopup = popup;\n+            this.expectedListenerCalls = expectedCalls;\n+        }\n+\n+        public abstract void showFirst();\n+        public abstract void showSecond();\n+\n+        public void addInvalidationListener(InvalidationListener listener) {\n+            testPopup.ownerNodeProperty().addListener(listener);\n+            testPopup.ownerWindowProperty().addListener(listener);\n+        }\n+\n+        public void removeInvalidationListener(InvalidationListener listener) {\n+            testPopup.ownerNodeProperty().removeListener(listener);\n+            testPopup.ownerWindowProperty().removeListener(listener);\n+        }\n+    }\n+\n+    public static final class ConfigurationNode extends Configuration {\n+        public final Node testOwner1;\n+        public final Node testOwner2;\n+\n+        private void showAssert(Node n) {\n+            testPopup.show(n, 0.0, 0.0);\n+            assertEquals(n, testPopup.ownerNodeProperty().get());\n+            assertEquals(n.getScene().getWindow(), testPopup.ownerWindowProperty().get());\n+        }\n+\n+        public ConfigurationNode(Popup p, Node o1, Node o2, int expectedCalls) {\n+            super(p, expectedCalls);\n+            testOwner1 = o1;\n+            testOwner2 = o2;\n+        }\n+\n+        @Override\n+        public void showFirst() {\n+            showAssert(testOwner1);\n+        }\n+\n+        @Override\n+        public void showSecond() {\n+            showAssert(testOwner2);\n+        }\n+    }\n+\n+    public static final class ConfigurationStage extends Configuration {\n+        public final Stage testOwner1;\n+        public final Stage testOwner2;\n+\n+        private void showAssert(Stage s) {\n+            testPopup.show(s, 0.0, 0.0);\n+            assertEquals(s, testPopup.ownerWindowProperty().get());\n+        }\n+\n+        public ConfigurationStage(Popup p, Stage o1, Stage o2, int expectedCalls) {\n+            super(p, expectedCalls);\n+            testOwner1 = o1;\n+            testOwner2 = o2;\n+        }\n+\n+        @Override\n+        public void showFirst() {\n+            showAssert(testOwner1);\n+        }\n+\n+        @Override\n+        public void showSecond() {\n+            showAssert(testOwner2);\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void testPopupOwnerProperties(Configuration objects) {\n+        \/\/ This test follows what PropertiesTestBase.testBasicAccess() does\n+        \/\/ however it is adapted specifically for Popup.ownerNode and Popup.ownerWindow\n+        \/\/ (instead of setting property directly it calls Popup.show() which should\n+        \/\/ set the properties).\n+\n+        \/\/ set to first value and verify dependent value\n+        objects.showFirst();\n+\n+        \/\/ register listener\n+        final ValueInvalidationListener invalidationListener =\n+                new ValueInvalidationListener(objects.expectedListenerCalls);\n+        objects.addInvalidationListener(invalidationListener);\n+\n+        \/\/ set to second value\n+        objects.showSecond();\n+\n+        \/\/ verify that the listener has been called\n+        invalidationListener.assertCalled();\n+        invalidationListener.reset();\n+\n+        \/\/ set to the second value again\n+        objects.showSecond();\n+\n+        \/\/ verify that the listener has not been called\n+        invalidationListener.assertNotCalled();\n+\n+        \/\/ unregister listener\n+        objects.removeInvalidationListener(invalidationListener);\n+\n+        \/\/ set to the first value again and test\n+        objects.showFirst();\n+\n+        \/\/ verify that the listener has not been called\n+        invalidationListener.assertNotCalled();\n+    }\n+\n+    private static final class ValueInvalidationListener\n+            implements InvalidationListener {\n+        private int counter;\n+        private final int expected;\n+\n+        public ValueInvalidationListener(int expected) {\n+            this.counter = 0;\n+            this.expected = expected;\n+        }\n+\n+        public void reset() {\n+            counter = 0;\n+        }\n+\n+        public void assertCalled() {\n+            assertEquals(expected, counter, \"Listener has not been called, or was not called enough times!\");\n+        }\n+\n+        public void assertNotCalled() {\n+            assertTrue(counter == 0, \"Listener has been called when it shouldn't be!\");\n+        }\n+\n+        @Override\n+        public void invalidated(final Observable valueModel) {\n+            ++counter;\n+        }\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/stage\/Popup_owner_Test.java","additions":257,"deletions":0,"binary":false,"changes":257,"status":"added"},{"patch":"@@ -1,143 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.javafx.stage;\n-\n-import java.util.ArrayList;\n-import java.util.stream.Stream;\n-import javafx.stage.Popup;\n-\n-import org.junit.jupiter.api.Disabled;\n-import org.junit.jupiter.params.provider.Arguments;\n-import test.com.sun.javafx.test.PropertiesTestBase;\n-import test.com.sun.javafx.test.objects.TestGroup;\n-import test.com.sun.javafx.test.objects.TestNode;\n-import test.com.sun.javafx.test.objects.TestScene;\n-import test.com.sun.javafx.test.objects.TestStage;\n-\n-@Disabled(\"JDK-8234153\") \/\/ test needs to be rewritten.\n-public final class Popup_parentWindow_Test extends PropertiesTestBase {\n-\n-    public static Stream<Arguments> data() {\n-        ArrayList<Arguments> configurations = new ArrayList<>();\n-\n-        TestObjects to;\n-\n-        to = new TestObjects();\n-        configurations.add(\n-                config(to.testPopup,\n-                       \"owner\", to.testStage1, to.testStage2));\n-\n-        to = new TestObjects();\n-        configurations.add(\n-                config(to.testPopup,\n-                       \"owner\", to.testScene1, to.testScene2));\n-\n-        to = new TestObjects();\n-        configurations.add(\n-                config(to.testPopup,\n-                       \"owner\", to.testRoot1, to.testRoot2));\n-\n-        to = new TestObjects();\n-        configurations.add(\n-                config(to.testPopup,\n-                       \"owner\", to.testNode1, to.testNode2));\n-\n-\/\/        to = new TestObjects();\n-\/\/        to.testPopup.setParent(to.testScene1);\n-\/\/        configurations.add(\n-\/\/                config(to.testScene1,\n-\/\/                       \"_window\", to.testStage1, to.testStage2,\n-\/\/                       to.testPopup,\n-\/\/                       \"parentWindow\", to.testStage1, to.testStage2));\n-\/\/\n-\/\/        to = new TestObjects();\n-\/\/        to.testPopup.setParent(to.testNode1);\n-\/\/        configurations.add(\n-\/\/                config(to.testScene1,\n-\/\/                       \"_window\", to.testStage1, to.testStage2,\n-\/\/                       to.testPopup,\n-\/\/                       \"parentWindow\", to.testStage1, to.testStage2));\n-\n-\/\/        Configuration extcfg;\n-\/\/\n-\/\/        to = new TestObjects();\n-\/\/        to.testPopup.setParent(to.testNode1);\n-\/\/        extcfg = new Configuration(to.testRoot1,\n-\/\/                                   \"_scene\", to.testScene1, to.testScene2,\n-\/\/                                   to.testPopup,\n-\/\/                                   \"parentWindow\", to.testStage1,\n-\/\/                                                   to.testStage2);\n-\/\/        extcfg.setAllowMultipleNotifications(true);\n-\/\/        configurations.add(new Object[] { extcfg });\n-\n-\/\/        to = new TestObjects();\n-\/\/        to.testPopup.setParent(to.testNode1);\n-\/\/        extcfg = new Configuration(to.testNode1,\n-\/\/                                   \"_parent\", to.testRoot1, to.testRoot2,\n-\/\/                                   to.testPopup,\n-\/\/                                   \"parentWindow\", to.testStage1,\n-\/\/                                                   to.testStage2);\n-\/\/        extcfg.setAllowMultipleNotifications(true);\n-\/\/        configurations.add(new Object[] { extcfg });\n-\n-        return configurations.stream();\n-    }\n-\n-    private static final class TestObjects {\n-        public final Popup testPopup;\n-        public final TestNode testNode1;\n-        public final TestNode testNode2;\n-        public final TestGroup testRoot1;\n-        public final TestGroup testRoot2;\n-        public final TestScene testScene1;\n-        public final TestScene testScene2;\n-        public final TestStage testStage1;\n-        public final TestStage testStage2;\n-\n-        public TestObjects() {\n-            testRoot1 = new TestGroup(\"ROOT_1\");\n-            testRoot2 = new TestGroup(\"ROOT_2\");\n-\n-            testNode1 = new TestNode(\"NODE_1\");\n-            testNode2 = new TestNode(\"NODE_2\");\n-\n-            testRoot1.getChildren().add(testNode1);\n-            testRoot2.getChildren().add(testNode2);\n-\n-            testScene1 = new TestScene(\"SCENE_1\", testRoot1);\n-            testScene2 = new TestScene(\"SCENE_2\", testRoot2);\n-\n-            testStage1 = new TestStage(\"STAGE_1\");\n-            testStage2 = new TestStage(\"STAGE_2\");\n-\n-            testStage1.setScene(testScene1);\n-            testStage2.setScene(testScene2);\n-\n-            testPopup = new Popup();\n-        }\n-\n-    }\n-}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/stage\/Popup_parentWindow_Test.java","additions":0,"deletions":143,"binary":false,"changes":143,"status":"deleted"}]}