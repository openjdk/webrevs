{"files":[{"patch":"@@ -329,1 +329,1 @@\n-        \"winmm.lib\", \"imm32.lib\", \"shell32.lib\", \"Uiautomationcore.lib\", \"dwmapi.lib\",\n+        \"winmm.lib\", \"imm32.lib\", \"shell32.lib\", \"Uiautomationcore.lib\", \"dwmapi.lib\", \"version.lib\",\n@@ -331,1 +331,1 @@\n-        \"\/DELAYLOAD:Uiautomationcore.dll\", \"\/DELAYLOAD:dwmapi.dll\"]).flatten()\n+        \"\/DELAYLOAD:Uiautomationcore.dll\", \"\/DELAYLOAD:dwmapi.dll\", \"\/DELAYLOAD:version.dll\"]).flatten()\n","filename":"buildSrc\/win.gradle","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -176,0 +176,5 @@\n+    \/**\n+     * Indicates that the window should use a dark window frame.\n+     *\/\n+    @Native public static final int DARK_FRAME = 1 << 11;\n+\n@@ -990,0 +995,2 @@\n+    public void setDarkFrame(boolean value) {}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/Window.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -116,0 +116,7 @@\n+    @Override\n+    public void setDarkFrame(boolean value) {\n+        _setDarkFrame(getRawHandle(), value);\n+    }\n+\n+    private native void _setDarkFrame(long ptr, boolean value);\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacWindow.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -268,0 +268,7 @@\n+    private native void _setDarkFrame(long ptr, boolean value);\n+\n+    @Override\n+    public void setDarkFrame(boolean value) {\n+        _setDarkFrame(getRawHandle(), value);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinWindow.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,1 +104,2 @@\n-    public TKStage createTKStage(Window peerWindow, StageStyle stageStyle, boolean primary, Modality modality, TKStage owner, boolean rtl) {\n+    public TKStage createTKStage(Window peerWindow, StageStyle stageStyle, boolean primary,\n+                                 Modality modality, TKStage owner, boolean rtl, boolean darkFrame) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/DummyToolkit.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -127,0 +127,2 @@\n+    public void setDarkFrame(boolean value);\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/TKStage.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -363,1 +363,2 @@\n-    public abstract TKStage createTKStage(Window peerWindow, StageStyle stageStyle, boolean primary, Modality modality, TKStage owner, boolean rtl);\n+    public abstract TKStage createTKStage(Window peerWindow, StageStyle stageStyle, boolean primary,\n+                                          Modality modality, TKStage owner, boolean rtl, boolean darkFrame);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/Toolkit.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -80,0 +80,3 @@\n+    @Override\n+    public void setDarkFrame(boolean value) {}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/GlassStage.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -611,1 +611,2 @@\n-    @Override public TKStage createTKStage(Window peerWindow, StageStyle stageStyle, boolean primary, Modality modality, TKStage owner, boolean rtl) {\n+    @Override public TKStage createTKStage(Window peerWindow, StageStyle stageStyle, boolean primary,\n+                                           Modality modality, TKStage owner, boolean rtl, boolean darkFrame) {\n@@ -613,1 +614,1 @@\n-        WindowStage stage = new WindowStage(peerWindow, stageStyle, modality, owner);\n+        WindowStage stage = new WindowStage(peerWindow, stageStyle, modality, owner, darkFrame);\n@@ -696,1 +697,1 @@\n-        WindowStage stage = new WindowStage(peerWindow, popupStyle, null, owner);\n+        WindowStage stage = new WindowStage(peerWindow, popupStyle, null, owner, false);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/QuantumToolkit.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+    private boolean darkFrame = false;\n@@ -87,2 +88,2 @@\n-\n-    public WindowStage(javafx.stage.Window peerWindow, final StageStyle stageStyle, Modality modality, TKStage owner) {\n+    public WindowStage(javafx.stage.Window peerWindow, final StageStyle stageStyle, Modality modality,\n+                       TKStage owner, boolean darkFrame) {\n@@ -92,0 +93,1 @@\n+        this.darkFrame = darkFrame;\n@@ -179,0 +181,4 @@\n+            if (darkFrame) {\n+                windowMask |= Window.DARK_FRAME;\n+            }\n+\n@@ -904,0 +910,9 @@\n+\n+    @Override\n+    public void setDarkFrame(boolean value) {\n+        darkFrame = value;\n+\n+        if (platformWindow != null) {\n+            platformWindow.setDarkFrame(value);\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/WindowStage.java","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import javafx.application.ColorScheme;\n@@ -46,0 +47,1 @@\n+import com.sun.javafx.application.PlatformImpl;\n@@ -1114,0 +1116,3 @@\n+            ColorScheme colorScheme = scene != null\n+                ? scene.getPreferences().getColorScheme()\n+                : PlatformImpl.getPlatformPreferences().getColorScheme();\n@@ -1117,1 +1122,1 @@\n-                    getModality(), tkStage, rtl));\n+                    getModality(), tkStage, rtl, colorScheme == ColorScheme.DARK));\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/stage\/Stage.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import javafx.application.ColorScheme;\n@@ -31,0 +32,1 @@\n+import javafx.beans.Observable;\n@@ -43,0 +45,1 @@\n+import javafx.beans.value.ChangeListener;\n@@ -824,0 +827,1 @@\n+        private final ChangeListener<ColorScheme> colorSchemeListener = this::updateDarkFrame;\n@@ -838,0 +842,1 @@\n+                oldScene.getPreferences().colorSchemeProperty().removeListener(colorSchemeListener);\n@@ -867,0 +872,2 @@\n+\n+                newScene.getPreferences().colorSchemeProperty().addListener(colorSchemeListener);\n@@ -888,0 +895,7 @@\n+\n+        private void updateDarkFrame(Observable observable, ColorScheme oldValue, ColorScheme newValue) {\n+            if (peer != null) {\n+                Toolkit.getToolkit().checkFxUserThread();\n+                peer.setDarkFrame(newValue == ColorScheme.DARK);\n+            }\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/stage\/Window.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -385,0 +385,1 @@\n+        bool isDarkFrame = (jStyleMask & com_sun_glass_ui_Window_DARK_FRAME) != 0;\n@@ -509,0 +510,3 @@\n+        [window->nsWindow setAppearance:isDarkFrame\n+            ? [NSAppearance appearanceNamed:NSAppearanceNameDarkAqua]\n+            : [NSAppearance appearanceNamed:NSAppearanceNameAqua]];\n@@ -1365,0 +1369,23 @@\n+\/*\n+ * Class:     com_sun_glass_ui_mac_MacWindow\n+ * Method:    _setDarkFrame\n+ * Signature: (JZ)V\n+ *\/\n+JNIEXPORT void JNICALL Java_com_sun_glass_ui_mac_MacWindow__1setDarkFrame\n+(JNIEnv *env, jobject jWindow, jlong jPtr, jboolean dark)\n+{\n+    LOG(\"Java_com_sun_glass_ui_mac_MacWindow__1setDarkFrame\");\n+    if (!jPtr) return;\n+\n+    GLASS_ASSERT_MAIN_JAVA_THREAD(env);\n+    GLASS_POOL_ENTER;\n+    {\n+        GlassWindow *window = getGlassWindow(env, jPtr);\n+        [window->nsWindow setAppearance:dark\n+            ? [NSAppearance appearanceNamed:NSAppearanceNameDarkAqua]\n+            : [NSAppearance appearanceNamed:NSAppearanceNameAqua]];\n+    }\n+    GLASS_POOL_EXIT;\n+    GLASS_CHECK_EXCEPTION(env);\n+}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassWindow.m","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1261,0 +1261,49 @@\n+void GlassWindow::SetDarkFrame(bool dark)\n+{\n+    \/\/ The value of the DWMWA_USE_IMMERSIVE_DARK_MODE constant may be different depending on the OS version.\n+    \/\/ We are going to query the file version of dwmapi.dll to make sure we use the right constant, or the\n+    \/\/ value 0 to indicate that we don't support this feature.\n+    \/\/ See: https:\/\/github.com\/MicrosoftDocs\/sdk-api\/commit\/c19f1c8a148b930444dce998d3c717c8fb7751e1\n+    static const DWORD DWMWA_USE_IMMERSIVE_DARK_MODE = []() {\n+        DWORD ignored;\n+        DWORD infoSize = GetFileVersionInfoSizeEx(FILE_VER_GET_NEUTRAL, L\"dwmapi.dll\", &ignored);\n+        if (infoSize <= 0) {\n+            return 0;\n+        }\n+\n+        std::vector<char> buffer(infoSize);\n+        if (!GetFileVersionInfoEx(FILE_VER_GET_NEUTRAL, L\"dwmapi.dll\", ignored,\n+                                  static_cast<DWORD>(buffer.size()), &buffer[0])) {\n+            return 0;\n+        }\n+\n+        UINT size = 0;\n+        VS_FIXEDFILEINFO* fileInfo = nullptr;\n+        if (!VerQueryValue(buffer.data(), L\"\\\\\", reinterpret_cast<LPVOID*>(&fileInfo), &size)) {\n+            return 0;\n+        }\n+\n+        WORD major = HIWORD(fileInfo->dwFileVersionMS);\n+        WORD minor = LOWORD(fileInfo->dwFileVersionMS);\n+        WORD build = HIWORD(fileInfo->dwFileVersionLS);\n+\n+        \/\/ Windows 10 before build 10.0.17763: not supported\n+        if (major < 10 || (major == 10 && minor == 0 && build < 17763)) {\n+            return 0;\n+        }\n+\n+        \/\/ Windows 10 build 10.0.17763 until 10.0.18985\n+        if (major == 10 && minor == 0 && build >= 17763 && build < 18985) {\n+            return 19;\n+        }\n+\n+        \/\/ Windows 10 build 10.0.18985 or later\n+        return 20;\n+    }();\n+\n+    if (DWMWA_USE_IMMERSIVE_DARK_MODE) {\n+        BOOL darkMode = dark;\n+        DwmSetWindowAttribute(GetHWND(), DWMWA_USE_IMMERSIVE_DARK_MODE, &darkMode, sizeof(darkMode));\n+    }\n+}\n+\n@@ -1457,0 +1506,4 @@\n+\n+            if (mask & com_sun_glass_ui_Window_DARK_FRAME) {\n+                pWindow->SetDarkFrame(true);\n+            }\n@@ -1697,0 +1750,22 @@\n+\/*\n+ * Class:     com_sun_glass_ui_win_WinWindow\n+ * Method:    _setDarkFrame\n+ * Signature: (JZ)V\n+ *\/\n+JNIEXPORT void JNICALL Java_com_sun_glass_ui_win_WinWindow__1setDarkFrame\n+    (JNIEnv *env, jobject jThis, jlong ptr, jboolean dark)\n+{\n+    ENTER_MAIN_THREAD()\n+    {\n+        GlassWindow *pWindow = GlassWindow::FromHandle(hWnd);\n+        if (pWindow) {\n+            pWindow->SetDarkFrame(dark);\n+        }\n+    }\n+    jboolean dark;\n+    LEAVE_MAIN_THREAD_WITH_hWnd;\n+\n+    ARG(dark) = dark;\n+    PERFORM();\n+}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassWindow.cpp","additions":75,"deletions":0,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -105,0 +105,1 @@\n+    void SetDarkFrame(bool);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassWindow.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -226,0 +226,4 @@\n+    @Override\n+    public void setDarkFrame(boolean value) {\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubStage.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -148,1 +148,2 @@\n-    public TKStage createTKStage(Window peerWindow, StageStyle stageStyle, boolean primary, Modality modality, TKStage owner, boolean rtl) {\n+    public TKStage createTKStage(Window peerWindow, StageStyle stageStyle, boolean primary,\n+                                 Modality modality, TKStage owner, boolean rtl, boolean darkFrame) {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubToolkit.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}