{"files":[{"patch":"@@ -109,1 +109,0 @@\n-    @SuppressWarnings(\"removal\")\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanIntegerProperty.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.security.AccessControlContext;\n@@ -54,3 +53,0 @@\n-\n-        @SuppressWarnings(\"removal\")\n-        public abstract AccessControlContext getAccessControlContext();\n@@ -125,15 +121,0 @@\n-    \/*\n-     * IMPORTANT: Calling to the user code should not proceed if\n-     * this method returns NULL.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext getAccessControlContext() {\n-        AccessControlContext acc = null;\n-        try {\n-            acc = eventHandler.getAccessControlContext();\n-        } catch (Exception e) {\n-            \/* The node was already removed from the scene *\/\n-        }\n-        return acc;\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/Accessible.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -85,2 +85,1 @@\n-            WindowHelper.setPeer(this, toolkit.createTKEmbeddedStage(host,\n-                    WindowHelper.getAccessControlContext(this)));\n+            WindowHelper.setPeer(this, toolkit.createTKEmbeddedStage(host));\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/stage\/EmbeddedWindow.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,2 +34,0 @@\n-import java.security.AccessControlContext;\n-\n@@ -133,5 +131,0 @@\n-    @SuppressWarnings(\"removal\")\n-    static AccessControlContext getAccessControlContext(Window window) {\n-        return windowAccessor.getAccessControlContext(window);\n-    }\n-\n@@ -172,3 +165,0 @@\n-\n-        @SuppressWarnings(\"removal\")\n-        AccessControlContext getAccessControlContext(Window window);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/stage\/WindowHelper.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-import java.security.AccessControlContext;\n@@ -105,1 +104,1 @@\n-    public TKStage createTKStage(Window peerWindow, boolean securityDialog, StageStyle stageStyle, boolean primary, Modality modality, TKStage owner, boolean rtl, @SuppressWarnings(\"removal\") AccessControlContext acc) {\n+    public TKStage createTKStage(Window peerWindow, boolean securityDialog, StageStyle stageStyle, boolean primary, Modality modality, TKStage owner, boolean rtl) {\n@@ -110,1 +109,1 @@\n-    public TKStage createTKPopupStage(Window peerWindow, StageStyle popupStyle, TKStage owner, @SuppressWarnings(\"removal\") AccessControlContext acc) {\n+    public TKStage createTKPopupStage(Window peerWindow, StageStyle popupStyle, TKStage owner) {\n@@ -115,1 +114,1 @@\n-    public TKStage createTKEmbeddedStage(HostInterface host, @SuppressWarnings(\"removal\") AccessControlContext acc) {\n+    public TKStage createTKEmbeddedStage(HostInterface host) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/DummyToolkit.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.security.AccessControlContext;\n@@ -46,5 +45,0 @@\n-    @Override\n-    public void setSecurityContext(@SuppressWarnings(\"removal\") final AccessControlContext ctx) {\n-        \/\/ ctx not needed\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/LocalClipboard.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.security.AccessControlContext;\n@@ -43,5 +42,0 @@\n-    \/**\n-     * This method is used to set security context of the Stage.\n-     *\/\n-    public void setSecurityContext(@SuppressWarnings(\"removal\") AccessControlContext ctx);\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/TKClipboard.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.security.AccessControlContext;\n@@ -89,3 +88,0 @@\n-\n-    @SuppressWarnings(\"removal\")\n-    public AccessControlContext getAccessControlContext();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/TKScene.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.security.AccessControlContext;\n@@ -50,1 +49,1 @@\n-    public TKScene createTKScene(boolean depthBuffer, boolean msaa, @SuppressWarnings(\"removal\") AccessControlContext acc);\n+    public TKScene createTKScene(boolean depthBuffer, boolean msaa);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/TKStage.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -58,2 +58,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n@@ -99,0 +97,3 @@\n+    \/\/ Used as the (dummy) value for the various listener maps\n+    private static final Object dummyObj = new Object();\n+\n@@ -214,3 +215,1 @@\n-        try {\n-            forcedToolkit = System.getProperty(\"javafx.toolkit\");\n-        } catch (SecurityException ex) {}\n+        forcedToolkit = System.getProperty(\"javafx.toolkit\");\n@@ -366,1 +365,1 @@\n-    public abstract TKStage createTKStage(Window peerWindow, boolean securityDialog, StageStyle stageStyle, boolean primary, Modality modality, TKStage owner, boolean rtl, @SuppressWarnings(\"removal\") AccessControlContext acc);\n+    public abstract TKStage createTKStage(Window peerWindow, boolean securityDialog, StageStyle stageStyle, boolean primary, Modality modality, TKStage owner, boolean rtl);\n@@ -368,2 +367,2 @@\n-    public abstract TKStage createTKPopupStage(Window peerWindow, StageStyle popupStyle, TKStage owner, @SuppressWarnings(\"removal\") AccessControlContext acc);\n-    public abstract TKStage createTKEmbeddedStage(HostInterface host, @SuppressWarnings(\"removal\") AccessControlContext acc);\n+    public abstract TKStage createTKPopupStage(Window peerWindow, StageStyle popupStyle, TKStage owner);\n+    public abstract TKStage createTKEmbeddedStage(HostInterface host);\n@@ -371,8 +370,9 @@\n-    @SuppressWarnings(\"removal\")\n-    private final Map<TKPulseListener,AccessControlContext> stagePulseListeners = new WeakHashMap<>();\n-    @SuppressWarnings(\"removal\")\n-    private final Map<TKPulseListener,AccessControlContext> scenePulseListeners = new WeakHashMap<>();\n-    @SuppressWarnings(\"removal\")\n-    private final Map<TKPulseListener,AccessControlContext> postScenePulseListeners = new WeakHashMap<>();\n-    @SuppressWarnings(\"removal\")\n-    private final Map<TKListener,AccessControlContext> toolkitListeners = new WeakHashMap<>();\n+    \/\/ The following collections of listeners is weakly referenced here in order\n+    \/\/ to allow garbage collection when the listeners are otherwise no longer\n+    \/\/ referenced. We use a WeakHashMap with a dummy object as a value, rather\n+    \/\/ than a HashSet of WeakReferences so that the entries are automatically\n+    \/\/ removed when the listener goes out of reference.\n+    private final Map<TKPulseListener,Object> stagePulseListeners = new WeakHashMap<>();\n+    private final Map<TKPulseListener,Object> scenePulseListeners = new WeakHashMap<>();\n+    private final Map<TKPulseListener,Object> postScenePulseListeners = new WeakHashMap<>();\n+    private final Map<TKListener,Object> toolkitListeners = new WeakHashMap<>();\n@@ -383,8 +383,1 @@\n-    @SuppressWarnings(\"removal\")\n-    private void runPulse(final TKPulseListener listener,\n-            final AccessControlContext acc) {\n-\n-        if (acc == null) {\n-            throw new IllegalStateException(\"Invalid AccessControlContext\");\n-        }\n-\n+    private void runPulse(final TKPulseListener listener) {\n@@ -398,10 +391,4 @@\n-        \/\/ Copy of listener map\n-        @SuppressWarnings(\"removal\")\n-        final Map<TKPulseListener,AccessControlContext> stagePulseList =\n-                new WeakHashMap<>();\n-        @SuppressWarnings(\"removal\")\n-        final Map<TKPulseListener,AccessControlContext> scenePulseList =\n-                new WeakHashMap<>();\n-        @SuppressWarnings(\"removal\")\n-        final Map<TKPulseListener,AccessControlContext> postScenePulseList =\n-                new WeakHashMap<>();\n+        \/\/ Copy of listener keySet\n+        final Set<TKPulseListener> stagePulseList = new HashSet<>();\n+        final Set<TKPulseListener> scenePulseList = new HashSet<>();\n+        final Set<TKPulseListener> postScenePulseList = new HashSet<>();\n@@ -410,3 +397,3 @@\n-            stagePulseList.putAll(stagePulseListeners);\n-            scenePulseList.putAll(scenePulseListeners);\n-            postScenePulseList.putAll(postScenePulseListeners);\n+            stagePulseList.addAll(stagePulseListeners.keySet());\n+            scenePulseList.addAll(scenePulseListeners.keySet());\n+            postScenePulseList.addAll(postScenePulseListeners.keySet());\n@@ -414,2 +401,2 @@\n-        for (@SuppressWarnings(\"removal\") Map.Entry<TKPulseListener,AccessControlContext> entry : stagePulseList.entrySet()) {\n-            runPulse(entry.getKey(), entry.getValue());\n+        for (TKPulseListener listener : stagePulseList) {\n+            runPulse(listener);\n@@ -417,2 +404,2 @@\n-        for (@SuppressWarnings(\"removal\") Map.Entry<TKPulseListener,AccessControlContext> entry : scenePulseList.entrySet()) {\n-            runPulse(entry.getKey(), entry.getValue());\n+        for (TKPulseListener listener : scenePulseList) {\n+            runPulse(listener);\n@@ -420,2 +407,2 @@\n-        for (@SuppressWarnings(\"removal\") Map.Entry<TKPulseListener,AccessControlContext> entry : postScenePulseList.entrySet()) {\n-            runPulse(entry.getKey(), entry.getValue());\n+        for (TKPulseListener listener : postScenePulseList) {\n+            runPulse(listener);\n@@ -425,1 +412,1 @@\n-            runPulse(lastTkPulseListener, lastTkPulseAcc);\n+            runPulse(lastTkPulseListener);\n@@ -433,3 +420,1 @@\n-            @SuppressWarnings(\"removal\")\n-            AccessControlContext acc = AccessController.getContext();\n-            stagePulseListeners.put(listener, acc);\n+            stagePulseListeners.put(listener, dummyObj);\n@@ -448,3 +433,1 @@\n-            @SuppressWarnings(\"removal\")\n-            AccessControlContext acc = AccessController.getContext();\n-            scenePulseListeners.put(listener, acc);\n+            scenePulseListeners.put(listener, dummyObj);\n@@ -463,3 +446,1 @@\n-            @SuppressWarnings(\"removal\")\n-            AccessControlContext acc = AccessController.getContext();\n-            postScenePulseListeners.put(listener, acc);\n+            postScenePulseListeners.put(listener, dummyObj);\n@@ -478,3 +459,1 @@\n-        @SuppressWarnings(\"removal\")\n-        AccessControlContext acc = AccessController.getContext();\n-        toolkitListeners.put(listener, acc);\n+        toolkitListeners.put(listener, dummyObj);\n@@ -488,3 +467,1 @@\n-    @SuppressWarnings(\"removal\")\n-    private AccessControlContext lastTkPulseAcc = null;\n-    @SuppressWarnings(\"removal\")\n+\n@@ -492,1 +469,0 @@\n-        lastTkPulseAcc = AccessController.getContext();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/Toolkit.java","additions":36,"deletions":60,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.security.AccessControlContext;\n@@ -49,4 +48,2 @@\n-    public TKScene createTKScene(boolean depthBuffer, boolean msaa, @SuppressWarnings(\"removal\") AccessControlContext acc) {\n-        EmbeddedScene scene = new EmbeddedScene(host, depthBuffer, msaa);\n-        scene.setSecurityContext(acc);\n-        return scene;\n+    public TKScene createTKScene(boolean depthBuffer, boolean msaa) {\n+        return new EmbeddedScene(host, depthBuffer, msaa);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/EmbeddedStage.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n@@ -77,3 +75,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private AccessControlContext accessCtrlCtx = null;\n-\n@@ -101,22 +96,0 @@\n-    \/\/ To be used by subclasses to enforce context check\n-    @SuppressWarnings(\"removal\")\n-    @Override\n-    public final AccessControlContext getAccessControlContext() {\n-        if (accessCtrlCtx == null) {\n-            throw new RuntimeException(\"Scene security context has not been set!\");\n-        }\n-        return accessCtrlCtx;\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    public final void setSecurityContext(AccessControlContext ctx) {\n-        if (accessCtrlCtx != null) {\n-            throw new RuntimeException(\"Scene security context has been already set!\");\n-        }\n-        AccessControlContext acc = AccessController.getContext();\n-        \/\/ JDK doesn't provide public APIs to get ACC intersection,\n-        \/\/ so using this ugly workaround\n-        accessCtrlCtx = GlassStage.doIntersectionPrivilege(\n-                () -> AccessController.getContext(), acc, ctx);\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/GlassScene.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,3 +28,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -58,3 +55,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private AccessControlContext accessCtrlCtx = null;\n-\n@@ -97,33 +91,0 @@\n-    \/\/ To be used by subclasses to enforce context check\n-    @SuppressWarnings(\"removal\")\n-    final AccessControlContext getAccessControlContext() {\n-        if (accessCtrlCtx == null) {\n-            throw new RuntimeException(\"Stage security context has not been set!\");\n-        }\n-        return accessCtrlCtx;\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    static AccessControlContext doIntersectionPrivilege(PrivilegedAction<AccessControlContext> action,\n-                                                       AccessControlContext stack,\n-                                                       AccessControlContext context) {\n-        \/\/ As part of the security manager removal, this entire method will be eliminated.\n-        \/\/ This method used to compute the intersection of two access control contexts using\n-        \/\/ a custom doPrivilegedWithCombiner method. This was only used in other calls to\n-        \/\/ doPrivilieged, so there is no harm in skipping the intersection and just\n-        \/\/ returning the context.\n-        return context;\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    public final void setSecurityContext(AccessControlContext ctx) {\n-        if (accessCtrlCtx != null) {\n-            throw new RuntimeException(\"Stage security context has been already set!\");\n-        }\n-        AccessControlContext acc = AccessController.getContext();\n-        \/\/ JDK doesn't provide public APIs to get ACC intersection,\n-        \/\/ so using this ugly workaround\n-        accessCtrlCtx = doIntersectionPrivilege(\n-                () -> AccessController.getContext(), acc, ctx);\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/GlassStage.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import java.security.AccessControlContext;\n@@ -76,9 +75,0 @@\n-    \/**\n-     * Security access context for image loading\n-     *      com.sun.javafx.tk.quantum.QuantumClipboard\n-     *      javafx.scene.input.Clipboard\n-     *          ... user code ...\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    private AccessControlContext accessContext = null;\n-\n@@ -124,15 +114,0 @@\n-    @Override public void setSecurityContext(@SuppressWarnings(\"removal\") AccessControlContext acc) {\n-        if (accessContext != null) {\n-            throw new RuntimeException(\"Clipboard security context has been already set!\");\n-        }\n-        accessContext = acc;\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    private AccessControlContext getAccessControlContext() {\n-        if (accessContext == null) {\n-            throw new RuntimeException(\"Clipboard security context has not been set!\");\n-        }\n-        return accessContext;\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/QuantumClipboard.java","additions":0,"deletions":25,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-import java.security.AccessControlContext;\n@@ -612,1 +611,1 @@\n-    @Override public TKStage createTKStage(Window peerWindow, boolean securityDialog, StageStyle stageStyle, boolean primary, Modality modality, TKStage owner, boolean rtl, @SuppressWarnings(\"removal\") AccessControlContext acc) {\n+    @Override public TKStage createTKStage(Window peerWindow, boolean securityDialog, StageStyle stageStyle, boolean primary, Modality modality, TKStage owner, boolean rtl) {\n@@ -615,1 +614,0 @@\n-        stage.setSecurityContext(acc);\n@@ -684,4 +682,1 @@\n-    @Override public TKStage createTKPopupStage(Window peerWindow,\n-                                                StageStyle popupStyle,\n-                                                TKStage owner,\n-                                                @SuppressWarnings(\"removal\") AccessControlContext acc) {\n+    @Override public TKStage createTKPopupStage(Window peerWindow, StageStyle popupStyle, TKStage owner) {\n@@ -692,1 +687,0 @@\n-        stage.setSecurityContext(acc);\n@@ -698,1 +692,1 @@\n-    @Override public TKStage createTKEmbeddedStage(HostInterface host, @SuppressWarnings(\"removal\") AccessControlContext acc) {\n+    @Override public TKStage createTKEmbeddedStage(HostInterface host) {\n@@ -701,1 +695,0 @@\n-        stage.setSecurityContext(acc);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/QuantumToolkit.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.security.AccessControlContext;\n@@ -242,1 +241,1 @@\n-    @Override public TKScene createTKScene(boolean depthBuffer, boolean msaa, @SuppressWarnings(\"removal\") AccessControlContext acc) {\n+    @Override public TKScene createTKScene(boolean depthBuffer, boolean msaa) {\n@@ -244,1 +243,0 @@\n-        scene.setSecurityContext(acc);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/WindowStage.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -106,1 +106,0 @@\n-import java.security.AccessControlContext;\n@@ -10436,20 +10435,0 @@\n-                @SuppressWarnings(\"removal\")\n-                @Override public AccessControlContext getAccessControlContext() {\n-                    Scene scene = getScene();\n-                    if (scene == null) {\n-                        \/* This can happen during the release process of an accessible object. *\/\n-                        throw new RuntimeException(\"Accessbility requested for node not on a scene\");\n-                    }\n-                    if (scene.getPeer() != null) {\n-                        return scene.getPeer().getAccessControlContext();\n-                    } else {\n-                        \/* In some rare cases the accessible for a Node is needed\n-                         * before its scene is made visible. For example, the screen reader\n-                         * might ask a Menu for its ContextMenu before the ContextMenu\n-                         * is made visible. That is a problem because the Window for the\n-                         * ContextMenu is only created immediately before the first time\n-                         * it is shown.\n-                         *\/\n-                        return scene.acc;\n-                    }\n-                }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -91,2 +91,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n@@ -187,3 +185,0 @@\n-    @SuppressWarnings(\"removal\")\n-    final AccessControlContext acc = AccessController.getContext();\n-\n@@ -834,1 +829,1 @@\n-        peer = windowPeer.createTKScene(isDepthBufferInternal(), getAntiAliasingInternal(), acc);\n+        peer = windowPeer.createTKScene(isDepthBufferInternal(), getAntiAliasingInternal());\n@@ -6439,5 +6434,0 @@\n-                @SuppressWarnings(\"removal\")\n-                @Override public AccessControlContext getAccessControlContext() {\n-                    return getPeer().getAccessControlContext();\n-                }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Scene.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n@@ -180,3 +178,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n-\n@@ -200,1 +195,0 @@\n-        peer.setSecurityContext(acc);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/input\/Clipboard.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -534,1 +534,1 @@\n-            setPeer(toolkit.createTKPopupStage(this, popupStyle, getOwnerWindow().getPeer(), acc));\n+            setPeer(toolkit.createTKPopupStage(this, popupStyle, getOwnerWindow().getPeer()));\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/stage\/PopupWindow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1129,1 +1129,1 @@\n-                    stageStyle, isPrimary(), getModality(), tkStage, rtl, acc));\n+                    stageStyle, isPrimary(), getModality(), tkStage, rtl));\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/stage\/Stage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n@@ -210,6 +208,0 @@\n-\n-                    @SuppressWarnings(\"removal\")\n-                    @Override\n-                    public AccessControlContext getAccessControlContext(Window window) {\n-                        return window.acc;\n-                    }\n@@ -230,3 +222,0 @@\n-    @SuppressWarnings(\"removal\")\n-    final AccessControlContext acc = AccessController.getContext();\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/stage\/Window.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.security.AccessControlContext;\n@@ -147,6 +146,0 @@\n-\n-    @SuppressWarnings(\"removal\")\n-    @Override\n-    public AccessControlContext getAccessControlContext() {\n-        return null;\n-    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubScene.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.security.AccessControlContext;\n@@ -51,1 +50,1 @@\n-    public TKScene createTKScene(boolean depthBuffer, boolean msaa, @SuppressWarnings(\"removal\") AccessControlContext acc) {\n+    public TKScene createTKScene(boolean depthBuffer, boolean msaa) {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubStage.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-import java.security.AccessControlContext;\n@@ -123,1 +122,1 @@\n-    public TKStage createTKStage(Window peerWindow, boolean securityDialog, StageStyle stageStyle, boolean primary, Modality modality, TKStage owner, boolean rtl, @SuppressWarnings(\"removal\") AccessControlContext acc) {\n+    public TKStage createTKStage(Window peerWindow, boolean securityDialog, StageStyle stageStyle, boolean primary, Modality modality, TKStage owner, boolean rtl) {\n@@ -129,1 +128,1 @@\n-    public TKStage createTKPopupStage(Window peerWindow, StageStyle popupStyle, TKStage owner, @SuppressWarnings(\"removal\") AccessControlContext acc) {\n+    public TKStage createTKPopupStage(Window peerWindow, StageStyle popupStyle, TKStage owner) {\n@@ -134,1 +133,1 @@\n-    public TKStage createTKEmbeddedStage(HostInterface host, @SuppressWarnings(\"removal\") AccessControlContext acc) {\n+    public TKStage createTKEmbeddedStage(HostInterface host) {\n@@ -379,4 +378,0 @@\n-        @Override\n-        public void setSecurityContext(@SuppressWarnings(\"removal\") AccessControlContext ctx) {\n-        }\n-\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubToolkit.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.security.AccessControlContext;\n@@ -1618,4 +1617,0 @@\n-        @Override\n-        public void setSecurityContext(@SuppressWarnings(\"removal\") AccessControlContext ctx) {\n-        }\n-\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/input\/DragAndDropTest.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.security.AccessControlContext;\n@@ -92,1 +91,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -96,1 +94,1 @@\n-                                               Object accObj)\n+                                               Object dummyAcc) \/\/ UNUSED\n@@ -99,2 +97,0 @@\n-        AccessControlContext acc = (AccessControlContext) accObj;\n-\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/Utilities.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.security.AccessController;\n@@ -41,0 +40,3 @@\n+    \/\/ Dummy object used as a placeholder for the former access control comnect\n+    private static final Object dummyAcc = new Object();\n+\n@@ -86,1 +88,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -90,2 +91,1 @@\n-        setMemberImpl(peer, peer_type, name, value,\n-                      AccessController.getContext());\n+        setMemberImpl(peer, peer_type, name, value, dummyAcc);\n@@ -113,1 +113,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -117,2 +116,1 @@\n-        setSlotImpl(peer, peer_type, index, value,\n-                    AccessController.getContext());\n+        setSlotImpl(peer, peer_type, index, value,dummyAcc);\n@@ -124,1 +122,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -128,2 +125,1 @@\n-        return callImpl(peer, peer_type, methodName, args,\n-                        AccessController.getContext());\n+        return callImpl(peer, peer_type, methodName, args,dummyAcc);\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/dom\/JSObject.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -106,4 +106,1 @@\n-            \/\/ In theory we could pump this error through the doRun()'s\n-            \/\/ error handling code but in that case that error handling\n-            \/\/ code would have to run outside the doPrivileged block,\n-            \/\/ which is something we want to avoid.\n+\n","filename":"modules\/javafx.web\/src\/main\/java\/com\/sun\/webkit\/network\/SocketStreamHandle.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -778,1 +778,1 @@\n-        \/\/ String fgIcon = AccessController.doPrivileged((PrivilegedAction<String>) () -> HTMLEditorSkin.class.getResource(resources.getString(\"foregroundColorIcon\")).toString());\n+        \/\/ String fgIcon = HTMLEditorSkin.class.getResource(resources.getString(\"foregroundColorIcon\")).toString();\n@@ -799,1 +799,1 @@\n-        \/\/ String bgIcon = AccessController.doPrivileged((PrivilegedAction<String>) () -> HTMLEditorSkin.class.getResource(resources.getString(\"backgroundColorIcon\")).toString());\n+        \/\/ String bgIcon = HTMLEditorSkin.class.getResource(resources.getString(\"backgroundColorIcon\")).toString();\n","filename":"modules\/javafx.web\/src\/main\/java\/javafx\/scene\/web\/HTMLEditorSkin.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}