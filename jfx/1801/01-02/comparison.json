{"files":[{"patch":"@@ -1,98 +0,0 @@\n-package test.com.sun.javafx.scene.control.skin.modena;\n-\n-import com.sun.javafx.tk.Toolkit;\n-import javafx.scene.Scene;\n-import javafx.scene.control.PasswordField;\n-import javafx.scene.control.TextArea;\n-import javafx.scene.control.TextField;\n-import javafx.scene.control.TextInputControl;\n-import javafx.scene.layout.StackPane;\n-import javafx.scene.paint.Paint;\n-import javafx.scene.text.Text;\n-import javafx.stage.Stage;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.CsvSource;\n-\n-import java.util.Collection;\n-import java.util.List;\n-\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.junit.jupiter.api.Assertions.fail;\n-\n-public class ModenaTest {\n-\n-    private static Collection<Class> parameters() {\n-        return List.of(\n-                TextField.class,\n-                PasswordField.class,\n-                TextArea.class\n-        );\n-    }\n-\n-    private TextInputControl textInput;\n-\n-    \/\/@BeforeEach\n-    \/\/ junit5 does not support parameterized class-level tests yet\n-    public void setup(Class<?> type) {\n-        setUncaughtExceptionHandler();\n-        try {\n-            textInput = (TextInputControl)type.getDeclaredConstructor().newInstance();\n-        } catch (Exception e) {\n-            fail(e);\n-        }\n-    }\n-\n-    @AfterEach\n-    public void cleanup() {\n-        removeUncaughtExceptionHandler();\n-    }\n-\n-    private void setUncaughtExceptionHandler() {\n-        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {\n-            if (throwable instanceof RuntimeException) {\n-                throw (RuntimeException)throwable;\n-            } else {\n-                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);\n-            }\n-        });\n-    }\n-\n-    private void removeUncaughtExceptionHandler() {\n-        Thread.currentThread().setUncaughtExceptionHandler(null);\n-    }\n-\n-    \/******************************************************\n-     * Test for highlight-text-fill                       *\n-     *****************************************************\/\n-\n-    @ParameterizedTest\n-    @CsvSource({\n-            \"#999999, 333333\",\n-            \"#222222, ffffff\",\n-            \"#777777, 000000\"\n-    })\n-    public void testHighlightTextInput(String accentColor, String expectedTextColor) {\n-        for (Class<?> type : parameters()) {\n-            setup(type);\n-            textInput.setText(\"This is a text\");\n-            textInput.selectAll();\n-\n-            StackPane root = new StackPane(textInput);\n-            Scene scene = new Scene(root, 400, 200);\n-            Stage stage = new Stage();\n-            stage.setScene(scene);\n-            stage.show();\n-\n-            scene.getRoot().setStyle(\"-fx-accent: \" + accentColor + \";\");\n-            textInput.requestFocus();\n-            Toolkit.getToolkit().firePulse();\n-\n-            Text internalText = (Text) textInput.lookup(\".text\");\n-            Paint fill = internalText.getSelectionFill();\n-\n-            String resolved = fill.toString().toLowerCase();\n-            assertTrue(resolved.contains(expectedTextColor));\n-        }\n-    }\n-}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/skin\/modena\/ModenaTest.java","additions":0,"deletions":98,"binary":false,"changes":98,"status":"deleted"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.scene.control.skin.modena;\n+\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.scene.Scene;\n+import javafx.scene.control.PasswordField;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TextInputControl;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.text.Text;\n+import javafx.stage.Stage;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/**\n+ *\n+ * Test class for verifying CSS styling behavior in the Modena stylesheet\n+ * for JavaFX {@link TextInputControl} subclasses, such as {@link TextField},\n+ * {@link PasswordField}, and {@link TextArea}.\n+ *\n+ *\/\n+public class TextInputControlModenaTest {\n+\n+    private static Collection<Class> parameters() {\n+        return List.of(\n+                TextField.class,\n+                PasswordField.class,\n+                TextArea.class\n+        );\n+    }\n+\n+    private TextInputControl textInput;\n+\n+    \/\/@BeforeEach\n+    \/\/ junit5 does not support parameterized class-level tests yet\n+    public void setup(Class<?> type) {\n+        setUncaughtExceptionHandler();\n+        try {\n+            textInput = (TextInputControl)type.getDeclaredConstructor().newInstance();\n+        } catch (Exception e) {\n+            fail(e);\n+        }\n+    }\n+\n+    @AfterEach\n+    public void cleanup() {\n+        removeUncaughtExceptionHandler();\n+    }\n+\n+    private void setUncaughtExceptionHandler() {\n+        Thread.currentThread().setUncaughtExceptionHandler((thread, throwable) -> {\n+            if (throwable instanceof RuntimeException) {\n+                throw (RuntimeException)throwable;\n+            } else {\n+                Thread.currentThread().getThreadGroup().uncaughtException(thread, throwable);\n+            }\n+        });\n+    }\n+\n+    private void removeUncaughtExceptionHandler() {\n+        Thread.currentThread().setUncaughtExceptionHandler(null);\n+    }\n+\n+    \/******************************************************\n+     * Test for highlight-text-fill                       *\n+     *****************************************************\/\n+\n+    \/**\n+     * Verifies that the text selection color (highlight text fill) in different\n+     * {@link TextInputControl} types matches the expected color when a custom\n+     * <code>-fx-accent<\/code> color is applied.\n+     *\n+     * @param accentColor        the accent color applied via CSS\n+     * @param expectedTextColor  a hex color (no '#') that should be part of the computed selection fill\n+     *\/\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"#999999, 333333\",\n+            \"#222222, ffffff\",\n+            \"#777777, 000000\"\n+    })\n+    public void testHighlightTextInput(String accentColor, String expectedTextColor) {\n+        for (Class<?> type : parameters()) {\n+            setup(type);\n+            textInput.setText(\"This is a text\");\n+            textInput.selectAll();\n+\n+            StackPane root = new StackPane(textInput);\n+            Scene scene = new Scene(root, 400, 200);\n+            Stage stage = new Stage();\n+            stage.setScene(scene);\n+            stage.show();\n+\n+            scene.getRoot().setStyle(\"-fx-accent: \" + accentColor + \";\");\n+            textInput.requestFocus();\n+            Toolkit.getToolkit().firePulse();\n+\n+            Text internalText = (Text) textInput.lookup(\".text\");\n+            Paint fill = internalText.getSelectionFill();\n+\n+            String resolved = fill.toString().toLowerCase();\n+            assertTrue(resolved.contains(expectedTextColor));\n+        }\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/control\/skin\/modena\/TextInputControlModenaTest.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"}]}