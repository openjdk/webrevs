{"files":[{"patch":"@@ -29,0 +29,2 @@\n+\n+import javafx.application.Platform;\n@@ -1000,0 +1002,13 @@\n+\n+    \/**\n+     * Ensures that a code segment is run on the FX thread.\n+     *\n+     * @param runnable a {@code Runnable} encapsulating the code\n+     *\/\n+    public static void runOnFxThread(Runnable runnable) {\n+        if (Platform.isFxApplicationThread()) {\n+            runnable.run();\n+        } else {\n+            Platform.runLater(runnable);\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/util\/Utils.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -886,0 +886,3 @@\n+     * <p>\n+     * Note: if this method is not called on the JavaFX Application Thread, it is delegated to it automatically.\n+     * In this case, the call is asynchronous and may not happen immediately.\n@@ -897,0 +900,4 @@\n+        Utils.runOnFxThread(() -> playFromOnFxThread(cuePoint));\n+    }\n+\n+    private void playFromOnFxThread(String cuePoint) {\n@@ -914,0 +921,3 @@\n+     * <p>\n+     * Note: if this method is not called on the JavaFX Application Thread, it is delegated to it automatically.\n+     * In this case, the call is asynchronous and may not happen immediately.\n@@ -926,0 +936,4 @@\n+        Utils.runOnFxThread(() -> playFromOnFxThread(time));\n+    }\n+\n+    private void playFromOnFxThread(Duration time) {\n@@ -941,1 +955,0 @@\n-     *\n@@ -943,3 +956,2 @@\n-     * Note: <ul>\n-     * <li>{@code playFromStart()} is an asynchronous call, {@code Animation} may\n-     * not start immediately. <\/ul>\n+     * Note: if this method is not called on the JavaFX Application Thread, it is delegated to it automatically.\n+     * In this case, the call is asynchronous and may not happen immediately.\n@@ -952,0 +964,4 @@\n+        Utils.runOnFxThread(this::playFromStartOnFxThread);\n+    }\n+\n+    private void playFromStartOnFxThread() {\n@@ -979,5 +995,2 @@\n-     * Note: <ul>\n-     * <li>{@code play()} is an asynchronous call, the {@code Animation} may not\n-     * start immediately. <\/ul>\n-     * <p>\n-     * This method must be called on the JavaFX Application thread.\n+     * Note: if this method is not called on the JavaFX Application Thread, it is delegated to it automatically.\n+     * In this case, the call is asynchronous and may not happen immediately.\n@@ -985,2 +998,1 @@\n-     * @throws IllegalStateException if this method is called on a thread\n-     *                other than the JavaFX Application Thread, or if embedded in another animation,\n+     * @throws IllegalStateException if embedded in another animation,\n@@ -990,1 +1002,0 @@\n-        Toolkit.getToolkit().checkFxUserThread();\n@@ -994,0 +1005,4 @@\n+        Utils.runOnFxThread(this::playOnFxThread);\n+    }\n+\n+    private void playOnFxThread() {\n@@ -1039,5 +1054,2 @@\n-     * Note: <ul>\n-     * <li>{@code stop()} is an asynchronous call, the {@code Animation} may not stop\n-     * immediately. <\/ul>\n-     * <p>\n-     * This method must be called on the JavaFX Application thread.\n+     * Note: if this method is not called on the JavaFX Application Thread, it is delegated to it automatically.\n+     * In this case, the call is asynchronous and may not happen immediately.\n@@ -1045,2 +1057,1 @@\n-     * @throws IllegalStateException if this method is called on a thread\n-     *                other than the JavaFX Application Thread, or if embedded in another animation,\n+     * @throws IllegalStateException if embedded in another animation,\n@@ -1050,1 +1061,0 @@\n-        Toolkit.getToolkit().checkFxUserThread();\n@@ -1054,0 +1064,5 @@\n+        Utils.runOnFxThread(this::stopOnFxThread);\n+    }\n+\n+    \/\/ package-private for Timeline\n+    void stopOnFxThread() {\n@@ -1074,5 +1089,2 @@\n-     * Note: <ul>\n-     * <li>{@code pause()} is an asynchronous call, the {@code Animation} may not pause\n-     * immediately. <\/ul>\n-     * <p>\n-     * This method must be called on the JavaFX Application thread.\n+     * Note: if this method is not called on the JavaFX Application Thread, it is delegated to it automatically.\n+     * In this case, the call is asynchronous and may not happen immediately.\n@@ -1080,2 +1092,1 @@\n-     * @throws IllegalStateException if this method is called on a thread\n-     *                other than the JavaFX Application Thread, or if embedded in another animation,\n+     * @throws IllegalStateException if embedded in another animation,\n@@ -1085,1 +1096,0 @@\n-        Toolkit.getToolkit().checkFxUserThread();\n@@ -1089,0 +1099,4 @@\n+        Utils.runOnFxThread(this::pauseOnFxThread);\n+    }\n+\n+    private void pauseOnFxThread() {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/animation\/Animation.java","additions":42,"deletions":28,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import com.sun.javafx.util.Utils;\n@@ -103,4 +104,2 @@\n-     * This method must be called on the JavaFX Application thread.\n-     *\n-     * @throws IllegalStateException if this method is called on a thread\n-     *                  other than the JavaFX Application Thread.\n+     * Note: if this method is not called on the JavaFX Application Thread, it is delegated to it automatically.\n+     * In this case, the call is asynchronous and may not happen immediately.\n@@ -108,1 +107,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -110,1 +108,5 @@\n-        Toolkit.getToolkit().checkFxUserThread();\n+        Utils.runOnFxThread(this::startOnFxThread);\n+    }\n+\n+    @SuppressWarnings(\"removal\")\n+    private void startOnFxThread() {\n@@ -123,4 +125,2 @@\n-     * This method must be called on the JavaFX Application thread.\n-     *\n-     * @throws IllegalStateException if this method is called on a thread\n-     *                  other than the JavaFX Application Thread.\n+     * Note: if this method is not called on the JavaFX Application Thread, it is delegated to it automatically.\n+     * In this case, the call is asynchronous and may not happen immediately.\n@@ -129,1 +129,4 @@\n-        Toolkit.getToolkit().checkFxUserThread();\n+        Utils.runOnFxThread(this::stopOnFxThread);\n+    }\n+\n+    private void stopOnFxThread() {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/animation\/AnimationTimer.java","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -194,3 +194,0 @@\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n@@ -198,1 +195,1 @@\n-    public void stop() {\n+    void stopOnFxThread() {\n@@ -205,1 +202,1 @@\n-        super.stop();\n+        super.stopOnFxThread();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/animation\/Timeline.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+package test.com.sun.javafx.animation;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import javafx.animation.AnimationTimer;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.stage.Stage;\n+import test.util.Util;\n+\n+\/\/ Based on https:\/\/bugs.openjdk.org\/browse\/JDK-8159048\n+public class AnimationSynchronisityTest extends Application {\n+\n+    public static void main(String[] args) {\n+        Application.launch(args);\n+    }\n+\n+    private static final CountDownLatch startupLatch = new CountDownLatch(1);\n+    private static Stage primaryStage;\n+\n+    @Override\n+    public void start(Stage stage) throws Exception {\n+        primaryStage = stage;\n+        startupLatch.countDown();\n+    }\n+\n+    @BeforeAll\n+    public static void setup() throws Exception {\n+        Util.launch(startupLatch, AnimationSynchronisityTest.class);\n+    }\n+\n+    @AfterAll\n+    public static void shutdown() {\n+        Util.shutdown(primaryStage);\n+    }\n+\n+    \/**\n+     * Number of seconds to wait for a failure. If an exception is not thrown in this time, it's assumed it won't be\n+     * thrown later too.\n+     *\/\n+    private static final int GRACE_PERIOD = 15;\n+\n+    @Test\n+    public void catcher() throws InterruptedException {\n+        var failed = new AtomicBoolean(false);\n+        var waiter = new CountDownLatch(1);\n+        registerFxExceptionHandler(failed, waiter);\n+\n+        for (int i = 0; i < 10; i++) {\n+            new Thread(this::bugProc).start();\n+        }\n+        waiter.await(GRACE_PERIOD, TimeUnit.SECONDS);\n+        assertFalse(failed.get(), \"An exception was thrown on the JavaFX Application Thread\");\n+    }\n+\n+    private void registerFxExceptionHandler(AtomicBoolean failed, CountDownLatch waiter) {\n+        Platform.runLater(() -> {\n+            Thread.currentThread().setUncaughtExceptionHandler((t, e) -> {\n+                failed.set(true);\n+                waiter.countDown();\n+            });\n+        });\n+    }\n+\n+    private void bugProc() {\n+        var tester = new AnimationTimer() {\n+\n+            @Override\n+            public void handle(long now) {\n+                waitSomeTime(10); \/\/ Some intensive processing\n+            }\n+        };\n+\n+        while (true) {\n+            \/\/ Initialize the concurrent starts and stops\n+            tester.start();\n+            waitSomeTime(10);\n+            tester.stop();\n+            waitSomeTime(10);\n+        }\n+    }\n+\n+    \/**\n+     * Utility method for waiting some time\n+     * \n+     * @param millis time in milliseconds to wait\n+     *\/\n+    private static void waitSomeTime(long millis) {\n+        try {\n+            Thread.sleep(millis);\n+        } catch (InterruptedException e) {\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/animation\/AnimationSynchronisityTest.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -1,116 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.com.sun.javafx.animation;\n-\n-import javafx.animation.PauseTransition;\n-import javafx.application.Application;\n-import javafx.application.Platform;\n-import javafx.stage.Stage;\n-import javafx.util.Duration;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import test.util.Util;\n-\n-import java.util.concurrent.CountDownLatch;\n-\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-\n-public class AnimationTest {\n-\n-    private static final CountDownLatch startupLatch = new CountDownLatch(1);\n-\n-    private static Stage primaryStage;\n-\n-    public static class TestApp extends Application {\n-\n-        @Override\n-        public void init() throws Exception {\n-            assertFalse(Platform.isFxApplicationThread());\n-        }\n-\n-        @Override\n-        public void start(Stage stage) throws Exception {\n-            primaryStage = stage;\n-            assertTrue(Platform.isFxApplicationThread());\n-\n-            startupLatch.countDown();\n-        }\n-\n-    }\n-\n-    @BeforeClass\n-    public static void setup() throws Exception {\n-        Util.launch(startupLatch, TestApp.class);\n-    }\n-\n-    @AfterClass\n-    public static void shutdown() {\n-        Util.shutdown(primaryStage);\n-    }\n-\n-    @Test\n-    public void animationOnFXThreadTest() throws InterruptedException {\n-        final CountDownLatch l = new CountDownLatch(1);\n-        Platform.runLater(() -> {\n-            assertTrue(Platform.isFxApplicationThread());\n-            PauseTransition pause = new PauseTransition(Duration.seconds(1));\n-            pause.play();\n-            pause.pause();\n-            pause.stop();\n-            l.countDown();\n-        });\n-        l.await();\n-    }\n-\n-    @Test\n-    public void startAnimationNotOnFXThreadTest() {\n-        assertFalse(Platform.isFxApplicationThread());\n-        PauseTransition pause = new PauseTransition(Duration.seconds(1));\n-        assertThrows(IllegalStateException.class, pause::play);\n-    }\n-\n-    @Test\n-    public void pauseAnimationNotOnFXThreadTest() {\n-        assertFalse(Platform.isFxApplicationThread());\n-        PauseTransition pause = new PauseTransition(Duration.seconds(1));\n-        Platform.runLater(pause::play);\n-        assertThrows(IllegalStateException.class, pause::pause);\n-    }\n-\n-    @Test\n-    public void stopAnimationNotOnFXThreadTest() {\n-        assertFalse(Platform.isFxApplicationThread());\n-        PauseTransition pause = new PauseTransition(Duration.seconds(1));\n-        Platform.runLater(() -> {\n-            pause.play();\n-            pause.pause();\n-        });\n-        assertThrows(IllegalStateException.class, pause::stop);\n-    }\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/animation\/AnimationTest.java","additions":0,"deletions":116,"binary":false,"changes":116,"status":"deleted"},{"patch":"@@ -1,112 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.com.sun.javafx.animation;\n-\n-import java.util.concurrent.CountDownLatch;\n-import javafx.animation.AnimationTimer;\n-import javafx.application.Application;\n-import javafx.application.Platform;\n-import javafx.stage.Stage;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import test.util.Util;\n-\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-\n-public class AnimationTimerTest {\n-\n-    private static final CountDownLatch startupLatch = new CountDownLatch(1);\n-\n-    private static Stage primaryStage;\n-\n-    public static class TestApp extends Application {\n-\n-        @Override\n-        public void init() throws Exception {\n-            assertFalse(Platform.isFxApplicationThread());\n-        }\n-\n-        @Override\n-        public void start(Stage stage) throws Exception {\n-            primaryStage = stage;\n-            assertTrue(Platform.isFxApplicationThread());\n-\n-            startupLatch.countDown();\n-        }\n-\n-    }\n-\n-    @BeforeClass\n-    public static void setup() throws Exception {\n-        Util.launch(startupLatch, TestApp.class);\n-    }\n-\n-    @AfterClass\n-    public static void shutdown() {\n-        Util.shutdown(primaryStage);\n-    }\n-\n-    @Test\n-    public void animationTimerOnFXThreadTest() throws InterruptedException {\n-        final CountDownLatch frameCounter = new CountDownLatch(3);\n-        Platform.runLater(() -> {\n-            AnimationTimer timer = new AnimationTimer() {\n-                @Override public void handle(long l) {\n-                    frameCounter.countDown();\n-                    if (frameCounter.getCount() == 0L) {\n-                        stop();\n-                    }\n-                }\n-            };\n-            assertTrue(Platform.isFxApplicationThread());\n-            timer.start();\n-        });\n-        frameCounter.await();\n-    }\n-\n-    @Test\n-    public void startAnimationTimerNotOnFXThreadTest() {\n-        assertFalse(Platform.isFxApplicationThread());\n-        AnimationTimer timer = new AnimationTimer() {\n-            @Override public void handle(long l) {}\n-        };\n-        assertThrows(IllegalStateException.class, timer::start);\n-    }\n-\n-    @Test\n-    public void stopAnimationTimerNotOnFXThreadTest() {\n-        assertFalse(Platform.isFxApplicationThread());\n-        AnimationTimer timer = new AnimationTimer() {\n-            @Override public void handle(long l) {\n-                assertThrows(IllegalStateException.class, () -> stop());\n-            }\n-        };\n-        Platform.runLater(timer::start);\n-    }\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/animation\/AnimationTimerTest.java","additions":0,"deletions":112,"binary":false,"changes":112,"status":"deleted"}]}