{"files":[{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n@@ -8,0 +33,1 @@\n+import test.util.Util;\n@@ -9,1 +35,1 @@\n-public class AnimationTest extends SynchronisityTest {\n+public class AnimationTest extends SynchronizationTest {\n@@ -22,0 +48,1 @@\n+        \/\/ Start and stop continuously until aborted by the test harness\n@@ -23,1 +50,0 @@\n-            \/\/ Initialize the concurrent starts and stops\n@@ -25,1 +51,1 @@\n-            sleep(10);\n+            Util.sleep(10);\n@@ -27,1 +53,1 @@\n-            sleep(10);\n+            Util.sleep(10);\n@@ -30,1 +56,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/animation\/AnimationTest.java","additions":31,"deletions":5,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n@@ -6,0 +31,1 @@\n+import test.util.Util;\n@@ -7,2 +33,1 @@\n-\/\/ Based on https:\/\/bugs.openjdk.org\/browse\/JDK-8159048\n-public class AnimationTimerTest extends SynchronisityTest {\n+public class AnimationTimerTest extends SynchronizationTest {\n@@ -22,1 +47,2 @@\n-                sleep(10); \/\/ Some intensive processing\n+                \/\/ Simulate intensive processing\n+                Util.sleep(10);\n@@ -26,0 +52,1 @@\n+        \/\/ Start and stop continuously until aborted by the test harness\n@@ -27,1 +54,0 @@\n-            \/\/ Initialize the concurrent starts and stops\n@@ -29,1 +55,1 @@\n-            sleep(10);\n+            Util.sleep(10);\n@@ -31,1 +57,1 @@\n-            sleep(10);\n+            Util.sleep(10);\n@@ -34,1 +60,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/animation\/AnimationTimerTest.java","additions":33,"deletions":7,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1,90 +0,0 @@\n-package test.com.sun.javafx.animation;\n-\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.BeforeAll;\n-\n-import javafx.application.Application;\n-import javafx.application.Platform;\n-import javafx.stage.Stage;\n-import test.util.Util;\n-\n-\/\/ Based on https:\/\/bugs.openjdk.org\/browse\/JDK-8159048\n-public class SynchronisityTest extends Application {\n-\n-    public static void main(String[] args) {\n-        Application.launch(args);\n-    }\n-\n-    private static final CountDownLatch startupLatch = new CountDownLatch(1);\n-    private static Stage primaryStage;\n-\n-    @Override\n-    public void start(Stage stage) throws Exception {\n-        primaryStage = stage;\n-        startupLatch.countDown();\n-    }\n-\n-    @BeforeAll\n-    public static void setup() throws Exception {\n-        Util.launch(startupLatch, SynchronisityTest.class);\n-    }\n-\n-    @AfterAll\n-    public static void shutdown() {\n-        Util.shutdown(primaryStage);\n-    }\n-\n-    \/**\n-     * Number of seconds to wait for a failure. If an exception is not thrown in this time, it's assumed it won't be\n-     * thrown later too.\n-     *\/\n-    private static final int GRACE_PERIOD = 15;\n-\n-    private AtomicBoolean failed = new AtomicBoolean(false);\n-    private CountDownLatch waiter = new CountDownLatch(1);\n-    private ExecutorService executor = Executors.newCachedThreadPool();\n-\n-    private Thread thread;\n-    private Throwable throwable;\n-\n-    protected void runTest(Runnable runnable) throws InterruptedException {\n-        Platform.runLater(() -> registerExceptionHandler());\n-\n-        for (int i = 0; i < 10; i++) {\n-            executor.submit(runnable);\n-        }\n-\n-        waiter.await(GRACE_PERIOD, TimeUnit.SECONDS);\n-        executor.shutdownNow();\n-        assertFalse(failed.get(), \"\\\"\" + throwable + \"\\\" was thrown on \" + thread);\n-    }\n-\n-    protected void registerExceptionHandler() {\n-        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> {\n-            thread = t;\n-            throwable = e;\n-            failed.set(true);\n-            waiter.countDown();\n-        });\n-    }\n-\n-    \/**\n-     * Utility method for making a thread wait.\n-     *\n-     * @param millis time in milliseconds to wait\n-     *\/\n-    protected static void sleep(long millis) {\n-        try {\n-            Thread.sleep(millis);\n-        } catch (InterruptedException e) {\n-        }\n-    }\n-}\n\\ No newline at end of file\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/animation\/SynchronisityTest.java","additions":0,"deletions":90,"binary":false,"changes":90,"status":"deleted"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.animation;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.stage.Stage;\n+import test.util.Util;\n+\n+\/\/ Based on https:\/\/bugs.openjdk.org\/browse\/JDK-8159048\n+public class SynchronizationTest {\n+\n+    private static final CountDownLatch startupLatch = new CountDownLatch(1);\n+    private static Stage primaryStage;\n+\n+    public static class TestApp extends Application {\n+\n+        @Override\n+        public void start(Stage stage) throws Exception {\n+            primaryStage = stage;\n+            startupLatch.countDown();\n+        }\n+    }\n+\n+    @BeforeAll\n+    public static void setup() throws Exception {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterAll\n+    public static void shutdown() {\n+        Util.shutdown(primaryStage);\n+    }\n+\n+    \/**\n+     * Number of seconds to wait for a failure. If an exception is not thrown in this time, it's assumed it won't be\n+     * thrown later too.\n+     *\/\n+    private static final int GRACE_PERIOD = 15;\n+\n+    final private AtomicBoolean failed = new AtomicBoolean(false);\n+    final private CountDownLatch waiter = new CountDownLatch(1);\n+    final private ExecutorService executor = Executors.newCachedThreadPool();\n+\n+    private Thread thread;\n+    private Throwable throwable;\n+\n+    protected void runTest(Runnable runnable) throws InterruptedException {\n+        Platform.runLater(() -> registerExceptionHandler());\n+\n+        for (int i = 0; i < 10; i++) {\n+            executor.submit(runnable);\n+        }\n+\n+        \/\/ If no exception is thrown after GRACE_PERIOD seconds, await completes and the test will succeed.\n+        \/\/ If an exception is thrown, await completes via countDown() instead and the test will fail.\n+        waiter.await(GRACE_PERIOD, TimeUnit.SECONDS);\n+        executor.shutdownNow();\n+        assertFalse(failed.get(), \"<\" + throwable + \"> was thrown on \" + thread);\n+    }\n+\n+    protected void registerExceptionHandler() {\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> {\n+            thread = t;\n+            throwable = e;\n+            failed.set(true);\n+            waiter.countDown();\n+        });\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/animation\/SynchronizationTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"}]}