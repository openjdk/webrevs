{"files":[{"patch":"@@ -29,0 +29,2 @@\n+\n+import javafx.application.Platform;\n@@ -1000,0 +1002,13 @@\n+\n+    \/**\n+     * Ensures that a code segment is run on the FX thread.\n+     *\n+     * @param runnable a {@code Runnable} encapsulating the code\n+     *\/\n+    public static void runOnFxThread(Runnable runnable) {\n+        if (Platform.isFxApplicationThread()) {\n+            runnable.run();\n+        } else {\n+            Platform.runLater(runnable);\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/util\/Utils.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -979,5 +979,1 @@\n-     * Note: <ul>\n-     * <li>{@code play()} is an asynchronous call, the {@code Animation} may not\n-     * start immediately. <\/ul>\n-     * <p>\n-     * This method must be called on the JavaFX Application thread.\n+     * Note: if this method is not called on the JavaFX Application Thread, it is delegated to it automatically.\n@@ -985,2 +981,1 @@\n-     * @throws IllegalStateException if this method is called on a thread\n-     *                other than the JavaFX Application Thread, or if embedded in another animation,\n+     * @throws IllegalStateException if embedded in another animation,\n@@ -990,1 +985,4 @@\n-        Toolkit.getToolkit().checkFxUserThread();\n+        Utils.runOnFxThread(this::playOnFxThread);\n+    }\n+\n+    private void playOnFxThread() {\n@@ -1039,5 +1037,1 @@\n-     * Note: <ul>\n-     * <li>{@code stop()} is an asynchronous call, the {@code Animation} may not stop\n-     * immediately. <\/ul>\n-     * <p>\n-     * This method must be called on the JavaFX Application thread.\n+     * Note: if this method is not called on the JavaFX Application Thread, it is delegated to it automatically.\n@@ -1045,2 +1039,1 @@\n-     * @throws IllegalStateException if this method is called on a thread\n-     *                other than the JavaFX Application Thread, or if embedded in another animation,\n+     * @throws IllegalStateException if embedded in another animation,\n@@ -1050,1 +1043,5 @@\n-        Toolkit.getToolkit().checkFxUserThread();\n+        Utils.runOnFxThread(this::stopOnFxThread);\n+    }\n+\n+    \/\/ package-private for Timeline\n+    void stopOnFxThread() {\n@@ -1074,5 +1071,1 @@\n-     * Note: <ul>\n-     * <li>{@code pause()} is an asynchronous call, the {@code Animation} may not pause\n-     * immediately. <\/ul>\n-     * <p>\n-     * This method must be called on the JavaFX Application thread.\n+     * Note: if this method is not called on the JavaFX Application Thread, it is delegated to it automatically.\n@@ -1080,2 +1073,1 @@\n-     * @throws IllegalStateException if this method is called on a thread\n-     *                other than the JavaFX Application Thread, or if embedded in another animation,\n+     * @throws IllegalStateException if embedded in another animation,\n@@ -1085,1 +1077,4 @@\n-        Toolkit.getToolkit().checkFxUserThread();\n+        Utils.runOnFxThread(this::pauseOnFxThread);\n+    }\n+\n+    private void pauseOnFxThread() {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/animation\/Animation.java","additions":19,"deletions":24,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import com.sun.javafx.util.Utils;\n@@ -103,4 +104,1 @@\n-     * This method must be called on the JavaFX Application thread.\n-     *\n-     * @throws IllegalStateException if this method is called on a thread\n-     *                  other than the JavaFX Application Thread.\n+     * Note: if this method is not called on the JavaFX Application Thread, it is delegated to it automatically.\n@@ -108,1 +106,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -110,1 +107,5 @@\n-        Toolkit.getToolkit().checkFxUserThread();\n+        Utils.runOnFxThread(this::startOnFxThread);\n+    }\n+\n+    @SuppressWarnings(\"removal\")\n+    private void startOnFxThread() {\n@@ -123,4 +124,1 @@\n-     * This method must be called on the JavaFX Application thread.\n-     *\n-     * @throws IllegalStateException if this method is called on a thread\n-     *                  other than the JavaFX Application Thread.\n+     * Note: if this method is not called on the JavaFX Application Thread, it is delegated to it automatically.\n@@ -129,1 +127,4 @@\n-        Toolkit.getToolkit().checkFxUserThread();\n+        Utils.runOnFxThread(this::stopOnFxThread);\n+    }\n+\n+    private void stopOnFxThread() {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/animation\/AnimationTimer.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -194,3 +194,0 @@\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n@@ -198,1 +195,2 @@\n-    public void stop() {\n+    void stopOnFxThread() {\n+        \/\/ The parent check is redone in the super method. Consider refactoring.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/animation\/Timeline.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}