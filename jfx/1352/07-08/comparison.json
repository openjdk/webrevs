{"files":[{"patch":"@@ -1,102 +0,0 @@\n-package test.com.sun.javafx.animation;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n-\n-import javafx.animation.AnimationTimer;\n-import javafx.application.Application;\n-import javafx.application.Platform;\n-import javafx.stage.Stage;\n-import test.util.Util;\n-\n-\/\/ Based on https:\/\/bugs.openjdk.org\/browse\/JDK-8159048\n-public class AnimationSynchronisityTest extends Application {\n-\n-    public static void main(String[] args) {\n-        Application.launch(args);\n-    }\n-\n-    private static final CountDownLatch startupLatch = new CountDownLatch(1);\n-    private static Stage primaryStage;\n-\n-    @Override\n-    public void start(Stage stage) throws Exception {\n-        primaryStage = stage;\n-        startupLatch.countDown();\n-    }\n-\n-    @BeforeAll\n-    public static void setup() throws Exception {\n-        Util.launch(startupLatch, AnimationSynchronisityTest.class);\n-    }\n-\n-    @AfterAll\n-    public static void shutdown() {\n-        Util.shutdown(primaryStage);\n-    }\n-\n-    \/**\n-     * Number of seconds to wait for a failure. If an exception is not thrown in this time, it's assumed it won't be\n-     * thrown later too.\n-     *\/\n-    private static final int GRACE_PERIOD = 15;\n-\n-    @Test\n-    public void catcher() throws InterruptedException {\n-        var failed = new AtomicBoolean(false);\n-        var waiter = new CountDownLatch(1);\n-        registerFxExceptionHandler(failed, waiter);\n-\n-        for (int i = 0; i < 10; i++) {\n-            new Thread(this::bugProc).start();\n-        }\n-        waiter.await(GRACE_PERIOD, TimeUnit.SECONDS);\n-        assertFalse(failed.get(), \"An exception was thrown on the JavaFX Application Thread\");\n-    }\n-\n-    private void registerFxExceptionHandler(AtomicBoolean failed, CountDownLatch waiter) {\n-        Platform.runLater(() -> {\n-            Thread.currentThread().setUncaughtExceptionHandler((t, e) -> {\n-                failed.set(true);\n-                waiter.countDown();\n-            });\n-        });\n-    }\n-\n-    private void bugProc() {\n-        var tester = new AnimationTimer() {\n-\n-            @Override\n-            public void handle(long now) {\n-                waitSomeTime(10); \/\/ Some intensive processing\n-            }\n-        };\n-\n-        while (true) {\n-            \/\/ Initialize the concurrent starts and stops\n-            tester.start();\n-            waitSomeTime(10);\n-            tester.stop();\n-            waitSomeTime(10);\n-        }\n-    }\n-\n-    \/**\n-     * Utility method for waiting some time\n-     * \n-     * @param millis time in milliseconds to wait\n-     *\/\n-    private static void waitSomeTime(long millis) {\n-        try {\n-            Thread.sleep(millis);\n-        } catch (InterruptedException e) {\n-        }\n-    }\n-}\n\\ No newline at end of file\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/animation\/AnimationSynchronisityTest.java","additions":0,"deletions":102,"binary":false,"changes":102,"status":"deleted"},{"patch":"@@ -0,0 +1,30 @@\n+package test.com.sun.javafx.animation;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import javafx.animation.Animation;\n+import javafx.animation.StrokeTransition;\n+import javafx.util.Duration;\n+\n+public class AnimationTest extends SynchronisityTest {\n+\n+    @Test\n+    public void testAnimation() throws InterruptedException {\n+        runTest(this::startAnimation);\n+    }\n+\n+    private void startAnimation() {\n+        registerExceptionHandler();\n+\n+        var anim = new StrokeTransition(Duration.millis(10));\n+        anim.setCycleCount(Animation.INDEFINITE);\n+\n+        while (true) {\n+            \/\/ Initialize the concurrent starts and stops\n+            anim.play();\n+            sleep(10);\n+            anim.stop();\n+            sleep(10);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/animation\/AnimationTest.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+package test.com.sun.javafx.animation;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import javafx.animation.AnimationTimer;\n+\n+\/\/ Based on https:\/\/bugs.openjdk.org\/browse\/JDK-8159048\n+public class AnimationTimerTest extends SynchronisityTest {\n+\n+    @Test\n+    public void testAnimationTimer() throws InterruptedException {\n+        runTest(this::startAnimationTimer);\n+    }\n+\n+    private void startAnimationTimer() {\n+        registerExceptionHandler();\n+\n+        var timer = new AnimationTimer() {\n+\n+            @Override\n+            public void handle(long now) {\n+                sleep(10); \/\/ Some intensive processing\n+            }\n+        };\n+\n+        while (true) {\n+            \/\/ Initialize the concurrent starts and stops\n+            timer.start();\n+            sleep(10);\n+            timer.stop();\n+            sleep(10);\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/animation\/AnimationTimerTest.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,90 @@\n+package test.com.sun.javafx.animation;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.stage.Stage;\n+import test.util.Util;\n+\n+\/\/ Based on https:\/\/bugs.openjdk.org\/browse\/JDK-8159048\n+public class SynchronisityTest extends Application {\n+\n+    public static void main(String[] args) {\n+        Application.launch(args);\n+    }\n+\n+    private static final CountDownLatch startupLatch = new CountDownLatch(1);\n+    private static Stage primaryStage;\n+\n+    @Override\n+    public void start(Stage stage) throws Exception {\n+        primaryStage = stage;\n+        startupLatch.countDown();\n+    }\n+\n+    @BeforeAll\n+    public static void setup() throws Exception {\n+        Util.launch(startupLatch, SynchronisityTest.class);\n+    }\n+\n+    @AfterAll\n+    public static void shutdown() {\n+        Util.shutdown(primaryStage);\n+    }\n+\n+    \/**\n+     * Number of seconds to wait for a failure. If an exception is not thrown in this time, it's assumed it won't be\n+     * thrown later too.\n+     *\/\n+    private static final int GRACE_PERIOD = 15;\n+\n+    private AtomicBoolean failed = new AtomicBoolean(false);\n+    private CountDownLatch waiter = new CountDownLatch(1);\n+    private ExecutorService executor = Executors.newCachedThreadPool();\n+\n+    private Thread thread;\n+    private Throwable throwable;\n+\n+    protected void runTest(Runnable runnable) throws InterruptedException {\n+        Platform.runLater(() -> registerExceptionHandler());\n+\n+        for (int i = 0; i < 10; i++) {\n+            executor.submit(runnable);\n+        }\n+\n+        waiter.await(GRACE_PERIOD, TimeUnit.SECONDS);\n+        executor.shutdownNow();\n+        assertFalse(failed.get(), \"\\\"\" + throwable + \"\\\" was thrown on \" + thread);\n+    }\n+\n+    protected void registerExceptionHandler() {\n+        Thread.currentThread().setUncaughtExceptionHandler((t, e) -> {\n+            thread = t;\n+            throwable = e;\n+            failed.set(true);\n+            waiter.countDown();\n+        });\n+    }\n+\n+    \/**\n+     * Utility method for making a thread wait.\n+     *\n+     * @param millis time in milliseconds to wait\n+     *\/\n+    protected static void sleep(long millis) {\n+        try {\n+            Thread.sleep(millis);\n+        } catch (InterruptedException e) {\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/animation\/SynchronisityTest.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"}]}