{"files":[{"patch":"@@ -34,0 +34,6 @@\n+\/\/ UTF-16 code points for surrogate pairs\n+#define HIGH_SURROGATE_START 0xD800\n+#define HIGH_SURROGATE_END 0xDBFF\n+#define LOW_SURROGATE_START 0xDC00\n+#define LOW_SURROGATE_END 0xDFFF\n+\n@@ -43,0 +49,34 @@\n+\/\/ Validate the string. Returns false if the string is nil or if\n+\/\/ it contains invalid partial surrogate pairs: a high surrogate\n+\/\/ without an immediately following low surrogate, or conversely,\n+\/\/ a low surrogate without an immediately preceding high surrogate.\n+static BOOL validate(NSString *data)\n+{\n+    if (data == nil) {\n+        return NO;\n+    }\n+\n+    BOOL prevHiSurrogate = NO;\n+    NSUInteger i;\n+    for (i = 0; i < [data length]; i++) {\n+        BOOL hiSurrogate = NO;\n+        BOOL loSurrogate = NO;\n+        NSUInteger c = [data characterAtIndex:i];\n+        if (c >= HIGH_SURROGATE_START && c <= HIGH_SURROGATE_END) {\n+            hiSurrogate = YES;\n+        } else if (c >= LOW_SURROGATE_START && c <= LOW_SURROGATE_END) {\n+            loSurrogate = YES;\n+        }\n+\n+        if (loSurrogate && !prevHiSurrogate) {\n+            return NO;\n+        }\n+        if (prevHiSurrogate && !loSurrogate) {\n+            return NO;\n+        }\n+\n+        prevHiSurrogate = hiSurrogate;\n+    }\n+    return !prevHiSurrogate;\n+}\n+\n@@ -216,1 +256,1 @@\n-        [item setString:string forType:utf];\n+\n@@ -218,0 +258,3 @@\n+        if (validate(string)) {\n+            [item setString:string forType:utf];\n+        }\n@@ -289,1 +332,8 @@\n-                    SetNSPasteboardItemValueForUtf(env, item, jObject, utf);\n+                    \/\/ Setting pasteboard can throw exception. It shouldn't\n+                    \/\/ happen if we validate the data, but in case it does,\n+                    \/\/ we will catch the exception and log a warning\n+                    @try {\n+                        SetNSPasteboardItemValueForUtf(env, item, jObject, utf);\n+                    } @catch (NSException *exception) {\n+                        NSLog(@\"WARNING: %@: %@ \",exception.name, exception.reason);\n+                    }\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassPasteboard.m","additions":52,"deletions":2,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.util.List;\n@@ -120,0 +121,62 @@\n+    private void testClipboard(List<List<Integer>> codePointsLists, boolean checkResults) {\n+        codePointsLists.stream().forEach(codePointsList -> {\n+            int[] codePoints = codePointsList.stream()\n+                    .mapToInt(Integer::intValue)\n+                    .toArray();\n+            String text = new String(codePoints, 0, codePoints.length);\n+            ClipboardContent content = new ClipboardContent();\n+            content.put(DataFormat.PLAIN_TEXT, text);\n+            Util.runAndWait(() -> clipboard.setContent(content));\n+            if (checkResults) {\n+                Util.runAndWait(() ->\n+                       assertEquals(text, clipboard.getContent(DataFormat.PLAIN_TEXT)));\n+            }\n+        });\n+    }\n+\n+    \/*\n+     * @test 8304441\n+     *\n+     * Test bad strings with mismatched halves of surrogate pairs.\n+     *\/\n+    @Test\n+    public void testCopyBadSurrogate() {\n+        List<List<Integer>> codePointsLists = List.of(\n+            List.of(0xD800),             \/\/ High\n+            List.of(0xDBFF),             \/\/ High\n+            List.of(0xD83D),             \/\/ High\n+            List.of(0xDC00),             \/\/ Low\n+            List.of(0xDFFF),             \/\/ Low\n+            List.of(0xD800, 0xDBFF),     \/\/ High, High\n+            List.of(0xDC00, 0xDFFF),     \/\/ Low, Low\n+            List.of(0xDC00, 0xD800),     \/\/ Low, High\n+            List.of(0xDFFF, 0xDBFF),     \/\/ Low, High\n+            List.of(0x1F600, 0xD800),    \/\/ High, Low, High\n+            List.of(0xD800, 0x1F600),    \/\/ High, High, Low\n+            List.of(0x41, 0xD83D, 0x5A), \/\/ 'A', High, 'Z'\n+            List.of(0x41, 0xDDDD, 0x5A)  \/\/ 'A', Low, 'Z'\n+        );\n+\n+        testClipboard(codePointsLists, false);\n+    }\n+\n+    \/*\n+     * @test 8304441\n+     *\n+     * Test good strings with matched surrogate pairs.\n+     *\/\n+    @Test\n+    public void testCopyPasteSurrogatePairs() {\n+        List<List<Integer>> codePointsLists = List.of(\n+            List.of(0xD800, 0xDC00),    \/\/ High, Low\n+            List.of(0xDBFF, 0xDFFF),    \/\/ High, Low\n+            List.of(0x1F600),\n+            List.of(0x1F603),\n+            List.of(0x1F976),\n+            List.of(0x1F600, 0x1F603, 0x1F976),\n+            List.of(0x41, 0x1F600, 0x1F603, 0x1F976, 0x5A)\n+        );\n+\n+        testClipboard(codePointsLists, true);\n+    }\n+\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/input\/ClipboardTest.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"modified"}]}