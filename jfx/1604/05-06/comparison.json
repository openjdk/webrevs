{"files":[{"patch":"@@ -10443,0 +10443,1 @@\n+     * The {@code Node} serves as a reference point and does not have to be focused or focusable.\n@@ -10445,5 +10446,2 @@\n-     * The {@code visible} parameter specifies whether the {@link #focusVisibleProperty() focusVisible}\n-     * flag will be set on the node that receives focus.\n-     * Callers must specify {@code true} if this method is called as a result of keyboard navigation,\n-     * or if the current node visibly indicates focus;\n-     * in all other cases, callers must specify {@code false}.\n+     * This method is expected to be called in response to a {@code KeyEvent}, since the {@code Node}\n+     * receiving focus will have {@link #focusVisibleProperty() focusVisible} property set.\n@@ -10452,1 +10450,0 @@\n-     * @param visible whether to set {@link #focusVisibleProperty() focusVisible} flag\n@@ -10456,11 +10453,25 @@\n-    public final boolean requestFocusTraversal(TraversalDirection direction, boolean visible) {\n-        TraversalDirectionInternal d = switch (direction) {\n-        case DOWN -> TraversalDirectionInternal.DOWN;\n-        case LEFT -> TraversalDirectionInternal.LEFT;\n-        case NEXT -> TraversalDirectionInternal.NEXT;\n-        case PREVIOUS -> TraversalDirectionInternal.PREVIOUS;\n-        case RIGHT -> TraversalDirectionInternal.RIGHT;\n-        case UP -> TraversalDirectionInternal.UP;\n-        default -> null;\n-        };\n-        return d == null ? false : TraversalUtils.traverse(this, d, visible);\n+    public final boolean requestFocusTraversal(TraversalDirection direction) {\n+        TraversalDirectionInternal d;\n+        switch (direction) {\n+        case DOWN:\n+            d = TraversalDirectionInternal.DOWN;\n+            break;\n+        case LEFT:\n+            d = TraversalDirectionInternal.LEFT;\n+            break;\n+        case NEXT:\n+            d = TraversalDirectionInternal.NEXT;\n+            break;\n+        case PREVIOUS:\n+            d = TraversalDirectionInternal.PREVIOUS;\n+            break;\n+        case RIGHT:\n+            d = TraversalDirectionInternal.RIGHT;\n+            break;\n+        case UP:\n+            d = TraversalDirectionInternal.UP;\n+            break;\n+        default:\n+            return false;\n+        }\n+        return TraversalUtils.traverse(this, d, true);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":28,"deletions":17,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @see Node#requestFocusTraversal(TraversalDirection, boolean)\n+ * @see Node#requestFocusTraversal(TraversalDirection)\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/TraversalDirection.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}