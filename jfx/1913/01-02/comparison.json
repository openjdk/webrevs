{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-import org.junit.jupiter.api.AfterEach;\n@@ -67,4 +66,0 @@\n-    @AfterEach\n-    public void cleanup() {\n-    }\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/helloworld\/StageRobotTest.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,3 +30,0 @@\n-import javafx.scene.Scene;\n-import javafx.scene.Group;\n-import javafx.scene.layout.Region;\n@@ -34,3 +31,0 @@\n-import javafx.scene.robot.Robot;\n-import javafx.stage.Stage;\n-import test.util.Util;\n@@ -42,2 +36,0 @@\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.AfterEach;\n@@ -63,28 +55,0 @@\n-    @BeforeEach\n-    public void doSetup() {\n-        runAndWait(() -> {\n-            if (!stages.isEmpty()) {\n-                for (final Stage stage : stages) {\n-                    if (stage.isShowing()) {\n-                        stage.hide();\n-                    }\n-                }\n-                stages.clear();\n-            }\n-        });\n-        runAndWait(() -> robot = new Robot());\n-        Util.parkCursor(robot);\n-        initialize();\n-    }\n-\n-    \/**\n-     * This method is overridden and doing nothing, because we want the stage\n-     * to be active until screen capture is done by ScreenCaptureTestWatcher\n-     * utility on test failure. Stale test stage will be cleared before next\n-     * test stage is created during setup.\n-     *\/\n-    @AfterEach\n-    public void doTeardown() {\n-\n-    }\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/layout\/RegionBackgroundFillUITest.java","additions":1,"deletions":37,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -30,3 +30,0 @@\n-import javafx.scene.Scene;\n-import javafx.scene.Group;\n-import javafx.scene.layout.Region;\n@@ -34,3 +31,0 @@\n-import javafx.scene.robot.Robot;\n-import javafx.stage.Stage;\n-import test.util.Util;\n@@ -42,2 +36,0 @@\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.AfterEach;\n@@ -55,28 +47,0 @@\n-    @BeforeEach\n-    public void doSetup() {\n-        runAndWait(() -> {\n-            if (!stages.isEmpty()) {\n-                for (final Stage stage : stages) {\n-                    if (stage.isShowing()) {\n-                        stage.hide();\n-                    }\n-                }\n-                stages.clear();\n-            }\n-        });\n-        runAndWait(() -> robot = new Robot());\n-        Util.parkCursor(robot);\n-        initialize();\n-    }\n-\n-    \/**\n-     * This method is overridden and doing nothing, because we want the stage\n-     * to be active until screen capture is done by ScreenCaptureTestWatcher\n-     * utility on test failure. Stale test stage will be cleared before next\n-     * test stage is created during setup.\n-     *\/\n-    @AfterEach\n-    public void doTeardown() {\n-\n-    }\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/layout\/RegionBackgroundImageUITest.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,9 +70,0 @@\n-        initialize();\n-    }\n-\n-    protected void setStyle(final String style) {\n-        runAndWait(() -> region.setStyle(style));\n-        waitFirstFrame();\n-    }\n-\n-    protected void initialize() {\n@@ -93,0 +84,5 @@\n+    protected void setStyle(final String style) {\n+        runAndWait(() -> region.setStyle(style));\n+        waitFirstFrame();\n+    }\n+\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/layout\/RegionUITestBase.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,2 @@\n-    public void setupEach() {\n+    @Override\n+    public void doSetup() {\n@@ -63,0 +64,1 @@\n+        super.doSetup();\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/test3d\/AABalanceFlipTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -276,1 +276,2 @@\n-    public void setupEach() {\n+    @Override\n+    public void doSetup() {\n@@ -278,0 +279,1 @@\n+        super.doSetup();\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/test3d\/MeshCompareTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,2 @@\n-    public void setupEach() {\n+    @Override\n+    public void doSetup() {\n@@ -58,0 +59,1 @@\n+        super.doSetup();\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/test3d\/NearAndFarClipTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import org.junit.jupiter.api.AfterEach;\n@@ -71,1 +70,2 @@\n-    public void setupEach() {\n+    @Override\n+    public void doSetup() {\n@@ -73,0 +73,1 @@\n+        super.doSetup();\n@@ -137,10 +138,0 @@\n-    \/**\n-     * This method is overridden and doing nothing, so that the test stage and scene\n-     * will not be hidden (which is the default behavior in the super class). The same\n-     * scene can be used for all the illumination tests by this class.\n-     *\/\n-    @Override\n-    @AfterEach\n-    public void doTeardown() {\n-    }\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/test3d\/PointLightIlluminationTest.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,2 @@\n-    public void setupEach() {\n+    @Override\n+    public void doSetup() {\n@@ -60,0 +61,1 @@\n+        super.doSetup();\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/test3d\/RT35019Test.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -150,1 +150,2 @@\n-    public void setupEach() {\n+    @Override\n+    public void doSetup() {\n@@ -152,0 +153,1 @@\n+        super.doSetup();\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/test3d\/Snapshot3DTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,2 @@\n-    public void setupEach() {\n+    @Override\n+    public void doSetup() {\n@@ -66,0 +67,1 @@\n+        super.doSetup();\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/test3d\/TriangleMeshPNTValidationTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,2 @@\n-    public void setupEach() {\n+    @Override\n+    public void doSetup() {\n@@ -67,0 +68,1 @@\n+        super.doSetup();\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/test3d\/TriangleMeshValidationTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    protected static List<Stage> stages = new ArrayList<>();\n+    private static List<Stage> stages = new ArrayList<>();\n@@ -61,1 +61,1 @@\n-    protected static Robot robot;\n+    Robot robot;\n@@ -99,6 +99,0 @@\n-        runAndWait(() -> robot = new Robot());\n-        Util.parkCursor(robot);\n-    }\n-\n-    @AfterEach\n-    public void doTeardown() {\n@@ -115,0 +109,2 @@\n+        runAndWait(() -> robot = new Robot());\n+        Util.parkCursor(robot);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/testharness\/VisualTestBase.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"}]}