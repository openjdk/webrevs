{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,3 @@\n+import javafx.scene.Scene;\n+import javafx.scene.Group;\n+import javafx.scene.layout.Region;\n@@ -31,0 +34,4 @@\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Stage;\n+import test.util.Util;\n+import test.util.ScreenCaptureTestWatcher;\n@@ -34,0 +41,3 @@\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.AfterEach;\n@@ -38,0 +48,1 @@\n+@ExtendWith(ScreenCaptureTestWatcher.class)\n@@ -52,0 +63,28 @@\n+    @BeforeEach\n+    public void doSetup() {\n+        runAndWait(() -> {\n+            if (!stages.isEmpty()) {\n+                for (final Stage stage : stages) {\n+                    if (stage.isShowing()) {\n+                        stage.hide();\n+                    }\n+                }\n+                stages.clear();\n+            }\n+        });\n+        runAndWait(() -> robot = new Robot());\n+        Util.parkCursor(robot);\n+        initialize();\n+    }\n+\n+    \/**\n+     * This method is overridden and doing nothing, because we want the stage\n+     * to be active until screen capture is done by ScreenCaptureTestWatcher\n+     * utility on test failure. Stale test stage will be cleared before next\n+     * test stage is created during setup.\n+     *\/\n+    @AfterEach\n+    public void doTeardown() {\n+\n+    }\n+\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/layout\/RegionBackgroundFillUITest.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -30,0 +30,3 @@\n+import javafx.scene.Scene;\n+import javafx.scene.Group;\n+import javafx.scene.layout.Region;\n@@ -31,0 +34,4 @@\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Stage;\n+import test.util.Util;\n+import test.util.ScreenCaptureTestWatcher;\n@@ -34,0 +41,3 @@\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.AfterEach;\n@@ -42,0 +52,1 @@\n+@ExtendWith(ScreenCaptureTestWatcher.class)\n@@ -44,0 +55,28 @@\n+    @BeforeEach\n+    public void doSetup() {\n+        runAndWait(() -> {\n+            if (!stages.isEmpty()) {\n+                for (final Stage stage : stages) {\n+                    if (stage.isShowing()) {\n+                        stage.hide();\n+                    }\n+                }\n+                stages.clear();\n+            }\n+        });\n+        runAndWait(() -> robot = new Robot());\n+        Util.parkCursor(robot);\n+        initialize();\n+    }\n+\n+    \/**\n+     * This method is overridden and doing nothing, because we want the stage\n+     * to be active until screen capture is done by ScreenCaptureTestWatcher\n+     * utility on test failure. Stale test stage will be cleared before next\n+     * test stage is created during setup.\n+     *\/\n+    @AfterEach\n+    public void doTeardown() {\n+\n+    }\n+\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/layout\/RegionBackgroundImageUITest.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,0 +70,9 @@\n+        initialize();\n+    }\n+\n+    protected void setStyle(final String style) {\n+        runAndWait(() -> region.setStyle(style));\n+        waitFirstFrame();\n+    }\n+\n+    protected void initialize() {\n@@ -84,5 +93,0 @@\n-    protected void setStyle(final String style) {\n-        runAndWait(() -> region.setStyle(style));\n-        waitFirstFrame();\n-    }\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/layout\/RegionUITestBase.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-    private List<Stage> stages = new ArrayList<>();\n+    protected static List<Stage> stages = new ArrayList<>();\n@@ -61,1 +61,1 @@\n-    Robot robot;\n+    protected static Robot robot;\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/testharness\/VisualTestBase.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}