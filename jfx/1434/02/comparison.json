{"files":[{"patch":"@@ -99,0 +99,1 @@\n+    private int overflowNodeIndex = Integer.MAX_VALUE;\n@@ -470,1 +471,1 @@\n-                correctOverflow(toolbarLength);\n+                organizeOverflow(toolbarLength);\n@@ -479,1 +480,1 @@\n-                correctOverflow(toolbarLength);\n+                organizeOverflow(toolbarLength);\n@@ -576,6 +577,3 @@\n-    private void correctOverflow(double length) {\n-        boolean overflowed = isOverflowed(length);\n-        if (overflowed != overflow) {\n-            organizeOverflow(length, overflow);\n-        }\n-    }\n+    private void organizeOverflow(double length) {\n+        \/\/ Determine the index of the first node to be moved to the overflow menu\n+        int newOverflowNodeIndex = getOverflowNodeIndex(length);\n@@ -583,2 +581,3 @@\n-    private void organizeOverflow(double length, boolean hasOverflow) {\n-        if (hasOverflow) {\n+        \/\/ If the overflow button is displayed, the length must be corrected\n+        \/\/ and the overflow index recalculated.\n+        if (newOverflowNodeIndex < getSkinnable().getItems().size()) {\n@@ -591,0 +590,7 @@\n+            newOverflowNodeIndex = getOverflowNodeIndex(length);\n+        }\n+\n+        \/\/ Optimization: Skip moving nodes if the node list has not been changed\n+        \/\/ and the overflow index has remained the same.\n+        if (!needsUpdate && newOverflowNodeIndex == overflowNodeIndex) {\n+            return;\n@@ -594,0 +600,1 @@\n+        ObservableList<Node> nodes = getSkinnable().getItems();\n@@ -595,1 +602,0 @@\n-        double x = 0;\n@@ -598,1 +604,2 @@\n-        for (Node node : getSkinnable().getItems()) {\n+        for (int i = 0; i < nodes.size(); i++) {\n+            Node node = nodes.get(i);\n@@ -602,9 +609,1 @@\n-            if (node.isManaged()) {\n-                if (getSkinnable().getOrientation() == Orientation.VERTICAL) {\n-                    x += snapSizeY(node.prefHeight(-1)) + getSpacing();\n-                } else {\n-                    x += snapSizeX(node.prefWidth(-1)) + getSpacing();\n-                }\n-            }\n-\n-            if (x <= length) {\n+            if (i < newOverflowNodeIndex) {\n@@ -673,1 +672,7 @@\n-        if (!overflow && overflowMenu.isFocused()) {\n+        overflowNodeIndex = newOverflowNodeIndex;\n+        if (overflow) {\n+            \/\/ The nodes needs to be added to the scene and the css needs to be applied,\n+            \/\/ otherwise subsequent prefWidth(..)\/prefHeight(..) may return wrong values.\n+            overflowMenu.popup.getItems().setAll(overflowMenuItems);\n+            overflowMenu.popup.getScene().getRoot().applyCss();\n+        } else if(overflowMenu.isFocused()) {\n@@ -687,4 +692,3 @@\n-        \/\/ Is there overflow ?\n-        boolean hasOverflow = isOverflowed(toolbarLength);\n-\n-        organizeOverflow(toolbarLength, hasOverflow);\n+        \/\/ Reset overflowNodeIndex. This causes the overflow menu to be reorganized.\n+        overflowNodeIndex = Integer.MAX_VALUE;\n+        organizeOverflow(toolbarLength);\n@@ -703,1 +707,9 @@\n-    private boolean isOverflowed(double length) {\n+    \/**\n+     * Calculate the index of the node that does not fit in the toolbar and must be moved to the overflow menu.\n+     *\n+     * @param length the length of the toolbar\n+     * @return the index of the first node that does not fit in the toolbar, or the size of the items list else\n+     *\/\n+    private int getOverflowNodeIndex(double length) {\n+        ObservableList<Node> items = getSkinnable().getItems();\n+        int overflowIndex = items.size();\n@@ -705,7 +717,9 @@\n-        boolean hasOverflow = false;\n-        for (Node node : getSkinnable().getItems()) {\n-            if (!node.isManaged()) continue;\n-            if (getSkinnable().getOrientation() == Orientation.VERTICAL) {\n-                x += snapSizeY(node.prefHeight(-1)) + getSpacing();\n-            } else {\n-                x += snapSizeX(node.prefWidth(-1)) + getSpacing();\n+        for (int i = 0; i < items.size(); i++) {\n+            Node node = items.get(i);\n+\n+            if (node.isManaged()) {\n+                if (getSkinnable().getOrientation() == Orientation.VERTICAL) {\n+                    x += snapSizeY(node.prefHeight(-1)) + getSpacing();\n+                } else {\n+                    x += snapSizeX(node.prefWidth(-1)) + getSpacing();\n+                }\n@@ -713,0 +727,1 @@\n+\n@@ -714,1 +729,1 @@\n-                hasOverflow = true;\n+                overflowIndex = i;\n@@ -718,1 +733,1 @@\n-        return hasOverflow;\n+        return overflowIndex;\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/ToolBarSkin.java","additions":51,"deletions":36,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -255,0 +255,63 @@\n+    @Test\n+    public void overflowDoesNotOverlapWithItems() {\n+        Rectangle node3 = new Rectangle(2.0, 4.0);\n+        Rectangle node4 = new Rectangle(2.0, 4.0);\n+\n+        node1.setId(\"node1\");\n+        node2.setId(\"node2\");\n+        node3.setId(\"node3\");\n+        node4.setId(\"node4\");\n+\n+        \/\/ Make the width of the node dependent on whether it is added to the scene\n+        node1.sceneProperty().addListener((ov, o, n) -> {\n+            if (n == null) {\n+                setFixSize(node1, 0);\n+            } else {\n+                setFixSize(node1, ORIGINAL_CHILDREN_SIZE);\n+            }\n+        });\n+\n+        initializeToolBar();\n+        toolBar.getItems().addAll(node3, node4);\n+\n+        setFixSize(toolBar, ORIGINAL_CHILDREN_SIZE * 4 + 50);\n+        setFixSize(node1, ORIGINAL_CHILDREN_SIZE);\n+        setFixSize(node2, ORIGINAL_CHILDREN_SIZE);\n+        setFixSize(node3, ORIGINAL_CHILDREN_SIZE);\n+        setFixSize(node4, ORIGINAL_CHILDREN_SIZE);\n+\n+        \/\/ Resize toolbar\n+        setFixSize(toolBar, ORIGINAL_CHILDREN_SIZE * 3);\n+\n+        checkNodeBoundsWithinToolbar(node1);\n+        checkNodeBoundsWithinToolbar(node2);\n+        checkNodeBoundsWithinToolbar(node3);\n+        checkNodeBoundsWithinToolbar(node4);\n+    }\n+\n+\n+    private void checkNodeBoundsWithinToolbar(Node node) {\n+        if (node.getScene() != toolBar.getScene()) {\n+            \/\/ Currently, a node that does not fit into the toolbar is removed from the toolbar and from the the scene.\n+            \/\/ Although this is an implementation detail, we use it here to check whether the node is visible in the toolbar or has been moved behind the overflow button.\n+            return;\n+        }\n+\n+        double nodeX = node.getLayoutX();\n+        double nodeWidth = node.prefWidth(-1);\n+\n+        Pane overflowButton = getOverflowButton();\n+        if (overflowButton.getScene() != null && overflowButton.isVisible()) {\n+            assertTrue(\"'\" + node.getId() + \"' is overlapping the overflowButton.\" +\n+                            \" The node \" + \"<\" + nodeX + \"..\" + (nodeX + nodeWidth) + \">.\"\n+                            + \" The overflow button \" + \"<\" + overflowButton.getLayoutX() + \"..\" + (overflowButton.getLayoutX() + overflowButton.getWidth()) + \">\",\n+                    nodeX + nodeWidth < overflowButton.getLayoutX());\n+        }\n+\n+        assertTrue(\"'\" + node.getId() + \"' bounds are outside the toolbar.\" +\n+                        \" The node \" + \"<\" + nodeX + \"..\" + (nodeX + nodeWidth) + \">.\"\n+                        + \" The toolbar width \" + toolBar.getWidth(),\n+                nodeX + nodeWidth < toolBar.getWidth());\n+\n+    }\n+\n@@ -298,1 +361,1 @@\n-        Pane pane = (Pane) toolBar.queryAccessibleAttribute(AccessibleAttribute.OVERFLOW_BUTTON);\n+        Pane pane = getOverflowButton();\n@@ -304,1 +367,1 @@\n-        Pane pane = (Pane) toolBar.queryAccessibleAttribute(AccessibleAttribute.OVERFLOW_BUTTON);\n+        Pane pane = getOverflowButton();\n@@ -308,0 +371,4 @@\n+\n+    private Pane getOverflowButton() {\n+        return (Pane) toolBar.queryAccessibleAttribute(AccessibleAttribute.OVERFLOW_BUTTON);\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ToolbarTest.java","additions":69,"deletions":2,"binary":false,"changes":71,"status":"modified"}]}