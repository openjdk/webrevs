{"files":[{"patch":"@@ -42,1 +42,0 @@\n-import javafx.collections.FXCollections;\n@@ -79,0 +78,1 @@\n+import javafx.stage.WindowEvent;\n@@ -97,0 +97,6 @@\n+    \/**\n+     * The overflow logic needs properly calculated prefWidth(..)\/prefHeight(..) values.\n+     * These values are valid if the elements have been added to the scene and the CSS has been applied properly.\n+     * To ensure this, we add the overflow items to this pane if they are not currently visible in the overflow menu.\n+     *\/\n+    private Pane overflowBox;\n@@ -104,1 +110,0 @@\n-    private ObservableList<MenuItem> overflowMenuItems;\n@@ -131,1 +136,0 @@\n-        overflowMenuItems = FXCollections.observableArrayList();\n@@ -249,0 +253,1 @@\n+                    overflowBox.getChildren().remove(n);\n@@ -556,0 +561,1 @@\n+            overflowBox = new VBox();\n@@ -558,0 +564,1 @@\n+            overflowBox = new HBox();\n@@ -561,1 +568,6 @@\n-        overflowMenu = new ToolBarOverflowMenu(overflowMenuItems);\n+        \/\/ The overflowBox must have the same style classes, otherwise the overflow items may get wrong values.\n+        overflowBox.setId(box.getId());\n+        overflowBox.getStyleClass().addAll(box.getStyleClass());\n+        overflowBox.setManaged(false);\n+        overflowBox.setVisible(false);\n+        overflowMenu = new ToolBarOverflowMenu(overflowBox.getChildren());\n@@ -567,0 +579,1 @@\n+        getChildren().add(overflowBox);\n@@ -602,1 +615,0 @@\n-        overflowMenuItems.clear();\n@@ -604,0 +616,1 @@\n+        overflowBox.getChildren().clear();\n@@ -612,0 +625,1 @@\n+                overflowBox.getChildren().add(node);\n@@ -622,45 +636,0 @@\n-                if (node instanceof Separator) {\n-                    overflowMenuItems.add(new SeparatorMenuItem());\n-                } else {\n-                    CustomMenuItem customMenuItem = new CustomMenuItem(node);\n-\n-                    \/\/ RT-36455:\n-                    \/\/ We can't be totally certain of all nodes, but for the\n-                    \/\/ most common nodes we can check to see whether we should\n-                    \/\/ hide the menu when the node is clicked on. The common\n-                    \/\/ case is for TextField or Slider.\n-                    \/\/ This list won't be exhaustive (there is no point really\n-                    \/\/ considering the ListView case), but it should try to\n-                    \/\/ include most common control types that find themselves\n-                    \/\/ placed in menus.\n-                    final String nodeType = node.getTypeSelector();\n-                    switch (nodeType) {\n-                        case \"Button\":\n-                        case \"Hyperlink\":\n-                        case \"Label\":\n-                            customMenuItem.setHideOnClick(true);\n-                            break;\n-                        case \"CheckBox\":\n-                        case \"ChoiceBox\":\n-                        case \"ColorPicker\":\n-                        case \"ComboBox\":\n-                        case \"DatePicker\":\n-                        case \"MenuButton\":\n-                        case \"PasswordField\":\n-                        case \"RadioButton\":\n-                        case \"ScrollBar\":\n-                        case \"ScrollPane\":\n-                        case \"Slider\":\n-                        case \"SplitMenuButton\":\n-                        case \"SplitPane\":\n-                        case \"TextArea\":\n-                        case \"TextField\":\n-                        case \"ToggleButton\":\n-                        case \"ToolBar\":\n-                        default:\n-                            customMenuItem.setHideOnClick(false);\n-                            break;\n-                    }\n-\n-                    overflowMenuItems.add(customMenuItem);\n-                }\n@@ -671,1 +640,1 @@\n-        overflow = overflowMenuItems.size() > 0;\n+        overflow = !overflowBox.getChildren().isEmpty();\n@@ -673,6 +642,1 @@\n-        if (overflow) {\n-            \/\/ The nodes needs to be added to the scene and the css needs to be applied,\n-            \/\/ otherwise subsequent prefWidth(..)\/prefHeight(..) may return wrong values.\n-            overflowMenu.popup.getItems().setAll(overflowMenuItems);\n-            overflowMenu.popup.getScene().getRoot().applyCss();\n-        } else if(overflowMenu.isFocused()) {\n+        if (!overflow && overflowMenu.isFocused()) {\n@@ -745,1 +709,1 @@\n-        private ObservableList<MenuItem> menuItems;\n+        private ObservableList<Node> overflowItems;\n@@ -747,1 +711,1 @@\n-        public ToolBarOverflowMenu(ObservableList<MenuItem> items) {\n+        public ToolBarOverflowMenu(ObservableList<Node> items) {\n@@ -752,1 +716,1 @@\n-            this.menuItems = items;\n+            this.overflowItems = items;\n@@ -763,1 +727,1 @@\n-                        popup.getItems().addAll(menuItems);\n+                        popup.getItems().addAll(createMenuItems());\n@@ -786,0 +750,10 @@\n+            popup.addEventHandler(WindowEvent.WINDOW_HIDDEN, e -> {\n+                \/\/ Put the overflowed items back to the list,\n+                \/\/ otherwise subsequent prefWidth(..)\/prefHeight(..) may return wrong values.\n+                overflowItems.clear();\n+                for (Node item : getSkinnable().getItems()) {\n+                    if (!box.getChildren().contains(item)) {\n+                        overflowItems.add(item);\n+                    }\n+                }\n+            });\n@@ -796,1 +770,1 @@\n-                popup.getItems().addAll(menuItems);\n+                popup.getItems().addAll(createMenuItems());\n@@ -801,0 +775,53 @@\n+        private List<MenuItem> createMenuItems() {\n+            List<MenuItem> menuItems = new ArrayList<>();\n+            for (Node node : overflowItems) {\n+                if (node instanceof Separator) {\n+                    menuItems.add(new SeparatorMenuItem());\n+                } else {\n+                    CustomMenuItem customMenuItem = new CustomMenuItem(node);\n+\n+                    \/\/ RT-36455:\n+                    \/\/ We can't be totally certain of all nodes, but for the\n+                    \/\/ most common nodes we can check to see whether we should\n+                    \/\/ hide the menu when the node is clicked on. The common\n+                    \/\/ case is for TextField or Slider.\n+                    \/\/ This list won't be exhaustive (there is no point really\n+                    \/\/ considering the ListView case), but it should try to\n+                    \/\/ include most common control types that find themselves\n+                    \/\/ placed in menus.\n+                    final String nodeType = node.getTypeSelector();\n+                    switch (nodeType) {\n+                        case \"Button\":\n+                        case \"Hyperlink\":\n+                        case \"Label\":\n+                            customMenuItem.setHideOnClick(true);\n+                            break;\n+                        case \"CheckBox\":\n+                        case \"ChoiceBox\":\n+                        case \"ColorPicker\":\n+                        case \"ComboBox\":\n+                        case \"DatePicker\":\n+                        case \"MenuButton\":\n+                        case \"PasswordField\":\n+                        case \"RadioButton\":\n+                        case \"ScrollBar\":\n+                        case \"ScrollPane\":\n+                        case \"Slider\":\n+                        case \"SplitMenuButton\":\n+                        case \"SplitPane\":\n+                        case \"TextArea\":\n+                        case \"TextField\":\n+                        case \"ToggleButton\":\n+                        case \"ToolBar\":\n+                        default:\n+                            customMenuItem.setHideOnClick(false);\n+                            break;\n+                    }\n+\n+                    menuItems.add(customMenuItem);\n+                }\n+\n+            }\n+            return menuItems;\n+        }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/ToolBarSkin.java","additions":89,"deletions":62,"binary":false,"changes":151,"status":"modified"}]}