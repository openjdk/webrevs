{"files":[{"patch":"@@ -255,0 +255,63 @@\n+    @Test\n+    public void overflowDoesNotOverlapWithItems() {\n+        Rectangle node3 = new Rectangle(2.0, 4.0);\n+        Rectangle node4 = new Rectangle(2.0, 4.0);\n+\n+        node1.setId(\"node1\");\n+        node2.setId(\"node2\");\n+        node3.setId(\"node3\");\n+        node4.setId(\"node4\");\n+\n+        \/\/ Make the width of the node dependent on whether it is added to the scene\n+        node1.sceneProperty().addListener((ov, o, n) -> {\n+            if (n == null) {\n+                setFixSize(node1, 0);\n+            } else {\n+                setFixSize(node1, ORIGINAL_CHILDREN_SIZE);\n+            }\n+        });\n+\n+        initializeToolBar();\n+        toolBar.getItems().addAll(node3, node4);\n+\n+        setFixSize(toolBar, ORIGINAL_CHILDREN_SIZE * 4 + 50);\n+        setFixSize(node1, ORIGINAL_CHILDREN_SIZE);\n+        setFixSize(node2, ORIGINAL_CHILDREN_SIZE);\n+        setFixSize(node3, ORIGINAL_CHILDREN_SIZE);\n+        setFixSize(node4, ORIGINAL_CHILDREN_SIZE);\n+\n+        \/\/ Resize toolbar\n+        setFixSize(toolBar, ORIGINAL_CHILDREN_SIZE * 3);\n+\n+        checkNodeBoundsWithinToolbar(node1);\n+        checkNodeBoundsWithinToolbar(node2);\n+        checkNodeBoundsWithinToolbar(node3);\n+        checkNodeBoundsWithinToolbar(node4);\n+    }\n+\n+\n+    private void checkNodeBoundsWithinToolbar(Node node) {\n+        if (node.getScene() != toolBar.getScene()) {\n+            \/\/ Currently, a node that does not fit into the toolbar is removed from the toolbar and from the the scene.\n+            \/\/ Although this is an implementation detail, we use it here to check whether the node is visible in the toolbar or has been moved behind the overflow button.\n+            return;\n+        }\n+\n+        double nodeX = node.getLayoutX();\n+        double nodeWidth = node.prefWidth(-1);\n+\n+        Pane overflowButton = getOverflowButton();\n+        if (overflowButton.getScene() != null && overflowButton.isVisible()) {\n+            assertTrue(\"'\" + node.getId() + \"' is overlapping the overflowButton.\" +\n+                            \" The node \" + \"<\" + nodeX + \"..\" + (nodeX + nodeWidth) + \">.\"\n+                            + \" The overflow button \" + \"<\" + overflowButton.getLayoutX() + \"..\" + (overflowButton.getLayoutX() + overflowButton.getWidth()) + \">\",\n+                    nodeX + nodeWidth < overflowButton.getLayoutX());\n+        }\n+\n+        assertTrue(\"'\" + node.getId() + \"' bounds are outside the toolbar.\" +\n+                        \" The node \" + \"<\" + nodeX + \"..\" + (nodeX + nodeWidth) + \">.\"\n+                        + \" The toolbar width \" + toolBar.getWidth(),\n+                nodeX + nodeWidth < toolBar.getWidth());\n+\n+    }\n+\n@@ -298,1 +361,1 @@\n-        Pane pane = (Pane) toolBar.queryAccessibleAttribute(AccessibleAttribute.OVERFLOW_BUTTON);\n+        Pane pane = getOverflowButton();\n@@ -304,1 +367,1 @@\n-        Pane pane = (Pane) toolBar.queryAccessibleAttribute(AccessibleAttribute.OVERFLOW_BUTTON);\n+        Pane pane = getOverflowButton();\n@@ -308,0 +371,4 @@\n+\n+    private Pane getOverflowButton() {\n+        return (Pane) toolBar.queryAccessibleAttribute(AccessibleAttribute.OVERFLOW_BUTTON);\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ToolbarTest.java","additions":69,"deletions":2,"binary":false,"changes":71,"status":"modified"}]}