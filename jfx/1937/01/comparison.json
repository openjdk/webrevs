{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.util.Objects;\n@@ -106,0 +107,19 @@\n+    @Override\n+    public boolean replaceRange(int from, int to, Collection<? extends E> col) {\n+        Objects.checkFromToIndex(from, to, size());\n+\n+        \/\/ implicit check to ensure col != null\n+        if (col.isEmpty() && from == to) {\n+            return false;\n+        }\n+\n+        beginChange();\n+        try {\n+            remove(from, to);\n+            addAll(from, col);\n+            return true;\n+        } finally {\n+            endChange();\n+        }\n+    }\n+\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/ModifiableObservableListBase.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.Objects;\n@@ -85,0 +86,33 @@\n+    \/**\n+     * Replaces the elements in the range {@code [from, to)} with the elements\n+     * from the given collection. The existing elements in the specified range\n+     * are removed, and the new elements are inserted at position {@code from}.\n+     *\n+     * @param from start of the range (inclusive), must be in {@code 0..size()}\n+     * @param to end of the range (exclusive), must be in {@code from..size()}\n+     * @param col collection containing elements to be inserted, cannot be {@code null}\n+     * @return {@code true} if this list changed as a result of the call\n+     * @throws ClassCastException if the class of an element of the specified\n+     *         collection prevents it from being added to this list\n+     * @throws NullPointerException if the specified collection contains one\n+     *         or more null elements and this list does not permit null\n+     *         elements, or if the specified collection is null\n+     * @throws IllegalArgumentException if some property of an element of the\n+     *         specified collection prevents it from being added to this list\n+     * @throws IndexOutOfBoundsException if {@code from < 0}, {@code to > size()},\n+     *         or {@code from > to}\n+     *\/\n+    public default boolean replaceRange(int from, int to, Collection<? extends E> col) {\n+        Objects.checkFromToIndex(from, to, size());\n+\n+        \/\/ implicit check to ensure col != null\n+        if (col.isEmpty() && from == to) {\n+            return false;\n+        }\n+\n+        remove(from, to);\n+        addAll(from, col);\n+\n+        return true;\n+    }\n+\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/collections\/ObservableList.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import javafx.collections.FXCollections;\n+import javafx.collections.ListChangeListener.Change;\n@@ -31,0 +33,1 @@\n+import javafx.collections.ObservableList;\n@@ -60,0 +63,7 @@\n+        private final ObservableList<String> list = FXCollections.observableArrayList(List.of(\"a\", \"b\", \"c\"));\n+        private final List<String> recordedChanges = new ArrayList<>();\n+\n+        {\n+            list.addListener((Change<? extends String> c) -> recordedChanges.add(c.toString()));\n+        }\n+\n@@ -62,1 +72,0 @@\n-            var list = new MockModifiableObservableList(new ArrayList<>(List.of(\"a\", \"b\", \"c\")));\n@@ -64,0 +73,31 @@\n+            assertThrows(NullPointerException.class, () -> list.replaceRange(0, 0, (Collection<? extends String>) null));\n+            assertEquals(List.of(), recordedChanges);\n+        }\n+\n+        @Test\n+        void shouldRejectIllegalRange() {\n+            assertThrows(IndexOutOfBoundsException.class, () -> list.replaceRange(-1, 2, List.of(\"d\", \"e\", \"f\")));\n+            assertThrows(IndexOutOfBoundsException.class, () -> list.replaceRange(0, 5, List.of(\"d\", \"e\", \"f\")));\n+            assertThrows(IndexOutOfBoundsException.class, () -> list.replaceRange(2, 1, List.of(\"d\", \"e\", \"f\")));\n+            assertEquals(List.of(), recordedChanges);\n+        }\n+\n+        @Test\n+        void shouldNotModifyListWhenOperationIsANoOp() {\n+            assertFalse(list.replaceRange(1, 1, List.of()));\n+            assertEquals(List.of(\"a\", \"b\", \"c\"), list);\n+            assertEquals(List.of(), recordedChanges);\n+        }\n+\n+        @Test\n+        void shouldReplaceElementsAtGivenRange() {\n+            assertTrue(list.replaceRange(1, 3, List.of(\"B\", \"C\", \"D\")));\n+            assertEquals(List.of(\"a\", \"B\", \"C\", \"D\"), list);\n+            assertEquals(List.of(\"{ [b, c] replaced by [B, C, D] at 1 }\"), recordedChanges);\n+        }\n+\n+        @Test\n+        void shouldOnlyRemoveRangeWhenCollectionWasEmpty() {\n+            assertTrue(list.replaceRange(1, 3, List.of()));\n+            assertEquals(List.of(\"a\"), list);\n+            assertEquals(List.of(\"{ [b, c] removed at 1 }\"), recordedChanges);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ModifiableObservableListBaseTest.java","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"}]}