{"files":[{"patch":"@@ -478,27 +478,9 @@\n-    NSString *chars = [theEvent charactersIgnoringModifiers];\n-    if ([theEvent type] == NSEventTypeKeyDown && [chars length] > 0)\n-    {\n-        unichar uch = [chars characterAtIndex:0];\n-        if ([theEvent modifierFlags] & NSEventModifierFlagCommand &&\n-            (uch == com_sun_glass_events_KeyEvent_VK_PERIOD ||\n-             uch == com_sun_glass_events_KeyEvent_VK_EQUALS))\n-        {\n-            GET_MAIN_JENV;\n-\n-            jcharArray jKeyChars = GetJavaKeyChars(env, theEvent);\n-            jint jModifiers = GetJavaModifiers(theEvent);\n-\n-            (*env)->CallBooleanMethod(env, self->_delegate->jView, jViewNotifyKeyAndReturnConsumed,\n-                                      com_sun_glass_events_KeyEvent_PRESS,\n-                                      uch, jKeyChars, jModifiers);\n-            (*env)->CallBooleanMethod(env, self->_delegate->jView, jViewNotifyKeyAndReturnConsumed,\n-                                      com_sun_glass_events_KeyEvent_TYPED,\n-                                      uch, jKeyChars, jModifiers);\n-            (*env)->CallBooleanMethod(env, self->_delegate->jView, jViewNotifyKeyAndReturnConsumed,\n-                                   com_sun_glass_events_KeyEvent_RELEASE,\n-                                   uch, jKeyChars, jModifiers);\n-            (*env)->DeleteLocalRef(env, jKeyChars);\n-\n-            GLASS_CHECK_EXCEPTION(env);\n-            return YES;\n-        }\n+    \/\/ If the user presses Command-\"=\" on a US keyboard the OS will send that\n+    \/\/ to performKeyEquivalent. If it isn't handled it will then send\n+    \/\/ Command-\"+\". This allows a user to invoke Command-\"+\" without using\n+    \/\/ the Shift key. The OS does this for any key where + is the shifted\n+    \/\/ character above =. It does something similar with the period key;\n+    \/\/ Command-\".\" leads to Escape for dismissing dialogs. Here we detect and\n+    \/\/ ignore the second key event.\n+    if (theEvent != NSApp.currentEvent && NSApp.currentEvent == lastKeyEvent) {\n+        return YES;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassView3D.m","additions":9,"deletions":27,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -0,0 +1,292 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.scene;\n+\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.event.EventHandler;\n+import javafx.scene.Parent;\n+import javafx.scene.Scene;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyCombination;\n+import javafx.scene.input.KeyCharacterCombination;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Stage;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n+\n+import com.sun.javafx.PlatformUtil;\n+\n+import test.util.Util;\n+\n+\/\/ Test a series of KeyCodes verifying that they at least generate a\n+\/\/ KEY_PRESSED event with the matching code. If the key generates a character\n+\/\/ we can also verify that the KEY_PRESSED event for that character matches\n+\/\/ the expected KeyCharacterCombination.\n+public class ShortcutKeyboardTest {\n+\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n+\n+    static volatile TestApp testApp;\n+    static volatile Stage stage;\n+    static volatile boolean isLatin = false;\n+\n+    private enum KeyData {\n+        \/\/ These two keys are special-cased by macOS and can lead to multiple\n+        \/\/ calls to performKeyEquivalent. The platform code has logic to\n+        \/\/ prevent multiple KeyEvents from firing.\n+        EQUALS(KeyCode.EQUALS, \"=\"),\n+        PERIOD(KeyCode.PERIOD, \".\"),\n+\n+        PLUS(KeyCode.PLUS, \"+\"),\n+        MINUS(KeyCode.MINUS, \"-\"),\n+        COMMA(KeyCode.COMMA, \",\"),\n+\n+        ADD(KeyCode.ADD, \"+\"),\n+        SUBTRACT(KeyCode.SUBTRACT, \"-\"),\n+\n+        A(KeyCode.A, \"a\"),\n+        Q(KeyCode.Q, \"q\"),\n+        Y(KeyCode.Y, \"y\"),\n+        Z(KeyCode.Z, \"z\");\n+\n+        final public KeyCode code;\n+        final public String combinationChar;\n+\n+        KeyData(KeyCode k, String c) {\n+            code = k;\n+            combinationChar = c;\n+        }\n+    };\n+\n+    @ParameterizedTest(name = \"{0}\")\n+    @EnumSource(KeyData.class)\n+    @Timeout(value = 3)\n+    void testKey(KeyData keyData) {\n+        Assumptions.assumeTrue(PlatformUtil.isMac(), \"Mac-only test\");\n+        Assumptions.assumeTrue(isLatin, \"Non-Latin layout\");\n+        Util.runAndWait(() -> testApp.testShortcutKey(keyData.code, keyData.combinationChar));\n+        String result = testApp.getTestResult();\n+        if (result != null) {\n+            Assertions.fail(result);\n+        }\n+    }\n+\n+    @BeforeAll\n+    @Timeout(value = 15)\n+    static void initFX() throws Exception {\n+        Util.launch(startupLatch, TestApp.class);\n+\n+        \/\/ When run from the command line Windows does not want to\n+        \/\/ activate the window.\n+        if (PlatformUtil.isWindows()) {\n+            Util.runAndWait(() -> {\n+                var robot = new Robot();\n+                var oldPosition = robot.getMousePosition();\n+                var root = stage.getScene().getRoot();\n+                var bounds = root.getBoundsInLocal();\n+                var mouseX = (bounds.getMinX() + bounds.getMaxX()) \/ 2.0;\n+                var mouseY = (bounds.getMinY() + bounds.getMaxY()) \/ 2.0;\n+                var clickPoint = root.localToScreen(mouseX, mouseY);\n+                robot.mouseMove(clickPoint);\n+                robot.mouseClick(MouseButton.PRIMARY);\n+                robot.mouseMove(oldPosition);\n+            });\n+        }\n+\n+        Util.runAndWait(() -> testApp.testLatin());\n+    }\n+\n+    @AfterAll\n+    static void exit() {\n+        Util.shutdown();\n+    }\n+\n+    public static class TestApp extends Application {\n+        \/\/ We throw key events at a TextArea to ensure that the input method\n+        \/\/ logic is active.\n+        private final TextArea focusNode = new TextArea();\n+        private final AtomicReference<String> testResult = new AtomicReference<String>(null);\n+\n+        @Override\n+        public void start(Stage primaryStage) {\n+            testApp = this;\n+            stage = primaryStage;\n+\n+            focusNode.setEditable(false);\n+            Scene scene = new Scene(focusNode, 200, 200);\n+            primaryStage.setScene(scene);\n+            primaryStage.setOnShown(event -> {\n+                Platform.runLater(startupLatch::countDown);\n+            });\n+            primaryStage.show();\n+        }\n+\n+        \/\/ At the end of the test getTestResult() will return null on success.\n+        \/\/ Otherwise it will return a string describing what failed.\n+        private void testShortcutKey(KeyCode characterKeyCode, String character) {\n+            focusNode.requestFocus();\n+\n+            final var modifierKeyCode = PlatformUtil.isMac() ? KeyCode.COMMAND : KeyCode.CONTROL;\n+            final var combination = new KeyCharacterCombination(character, KeyCombination.SHORTCUT_DOWN);\n+\n+            \/\/ We assume failure until we see the modifier key arrive.\n+            testResult.set(\"Did not see the initial modifer PRESSED event\");\n+\n+            Object eventLoop = new Object();\n+\n+            \/\/ If we never see the modifier released something has gone wrong.\n+            var timeoutTask = new TimerTask() {\n+                @Override\n+                public void run() {\n+                    Platform.runLater(() -> {\n+                        testResult.set(\"Timeout waiting for modifier RELEASED event\");\n+                        Platform.exitNestedEventLoop(eventLoop, null);\n+                    });\n+                }\n+            };\n+\n+            \/\/ First we should see the modifier pressed, then the accelerator character.\n+            final EventHandler<KeyEvent> pressedHandler = (e -> {\n+                if (e.getCode() == modifierKeyCode) {\n+                    \/\/ So far so good. For a letter key we expect another\n+                    \/\/ PRESSED event and assume failure until it arrives.\n+                    \/\/ Other codes may not be present on this layout so it's\n+                    \/\/ not an error if no events arrive.\n+                    if (characterKeyCode.isLetterKey()) {\n+                        testResult.set(\"Did not see character PRESSED event\");\n+                    }\n+                    else {\n+                        testResult.set(null);\n+                    }\n+                }\n+                else if (e.getCode() == characterKeyCode) {\n+                    testResult.set(null);\n+                    if (!combination.match(e)) {\n+                        testResult.set(\"Character key \" + e.getCode() + \" did not match \" + combination);\n+                    }\n+                }\n+                else {\n+                    testResult.set(\"Unexpected character key \" + e.getCode());\n+                }\n+                e.consume();\n+            });\n+\n+            \/\/ The test is over when the modifier is released.\n+            final EventHandler<KeyEvent> releasedHandler = (e -> {\n+                if (e.getCode() == modifierKeyCode) {\n+                    timeoutTask.cancel();\n+                    Platform.exitNestedEventLoop(eventLoop, null);\n+                }\n+                e.consume();\n+            });\n+\n+            focusNode.addEventFilter(KeyEvent.KEY_PRESSED, pressedHandler);\n+            focusNode.addEventFilter(KeyEvent.KEY_RELEASED, releasedHandler);\n+            final var timer = new Timer();\n+            timer.schedule(timeoutTask, 100);\n+\n+            final var robot = new Robot();\n+            robot.keyPress(modifierKeyCode);\n+            robot.keyPress(characterKeyCode);\n+            robot.keyRelease(characterKeyCode);\n+            robot.keyRelease(modifierKeyCode);\n+\n+            \/\/ Wait for the final event to arrive or the timout to fire\n+            Platform.enterNestedEventLoop(eventLoop);\n+\n+            focusNode.removeEventFilter(KeyEvent.KEY_PRESSED, pressedHandler);\n+            focusNode.removeEventFilter(KeyEvent.KEY_RELEASED, releasedHandler);\n+            timeoutTask.cancel();\n+            timer.cancel();\n+        }\n+\n+        \/\/ Send KeyCode.A and verify we get an \"a\" back.\n+        private void testLatin() {\n+            focusNode.requestFocus();\n+\n+            Object eventLoop = new Object();\n+\n+            \/\/ In case we don't see the release event\n+            var timeoutTask = new TimerTask() {\n+                @Override\n+                public void run() {\n+                    Platform.runLater(() -> {\n+                        isLatin = false;\n+                        Platform.exitNestedEventLoop(eventLoop, null);\n+                    });\n+                }\n+            };\n+\n+            final EventHandler<KeyEvent> typedHandler = (e -> {\n+                if (e.getCharacter().equals(\"a\")) {\n+                    isLatin = true;\n+                }\n+                e.consume();\n+            });\n+\n+            final EventHandler<KeyEvent> releasedHandler = (e -> {\n+                e.consume();\n+                Platform.exitNestedEventLoop(eventLoop, null);\n+            });\n+\n+            focusNode.addEventFilter(KeyEvent.KEY_TYPED, typedHandler);\n+            focusNode.addEventFilter(KeyEvent.KEY_RELEASED, releasedHandler);\n+            final var timer = new Timer();\n+            timer.schedule(timeoutTask, 100);\n+\n+            final Robot robot = new Robot();\n+            robot.keyPress(KeyCode.A);\n+            robot.keyRelease(KeyCode.A);\n+\n+            Platform.enterNestedEventLoop(eventLoop);\n+\n+            focusNode.removeEventFilter(KeyEvent.KEY_TYPED, typedHandler);\n+            focusNode.removeEventFilter(KeyEvent.KEY_RELEASED, releasedHandler);\n+            timeoutTask.cancel();\n+            timer.cancel();\n+        }\n+\n+        public String getTestResult() {\n+            return testResult.get();\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/ShortcutKeyboardTest.java","additions":292,"deletions":0,"binary":false,"changes":292,"status":"added"}]}