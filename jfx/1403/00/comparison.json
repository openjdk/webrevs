{"files":[{"patch":"@@ -728,4 +728,0 @@\n-        if (PlatformUtil.isWindows() && Screen.getPrimary().getOutputScaleX() > 1) {\n-            \/\/ Mark this test as unstable on Windows when HiDPI scale is more than 100%\n-            Assume.assumeTrue(Boolean.getBoolean(\"unstable.test\")); \/\/ JDK-8207379\n-        }\n@@ -760,4 +756,18 @@\n-        Assert.assertEquals((double) WIDTH * screenScaleX, screenCaptureNotScaledToFit.get().getWidth(), 0.0001);\n-        Assert.assertEquals((double) HEIGHT * screenScaleY, screenCaptureNotScaledToFit.get().getHeight(), 0.0001);\n-        for (int x = 0; x < WIDTH * screenScaleX; x++) {\n-            for (int y = 0; y < HEIGHT * screenScaleY; y++) {\n+        \/\/ Below calculations follow how getScreenCapture should calculate screen capture dimensions. This\n+        \/\/ is to make this code consistent and stable on HiDPI systems.\n+        int stageX = (int)stage.getX();\n+        int stageY = (int)stage.getY();\n+        int shouldBeMinX = (int)Math.floor(stageX * screenScaleX);\n+        int shouldBeMinY = (int)Math.floor(stageY * screenScaleY);\n+        int shouldBeMaxX = (int)Math.ceil((stageX + WIDTH) * screenScaleX);\n+        int shouldBeMaxY = (int)Math.ceil((stageY + HEIGHT) * screenScaleY);\n+        int shouldBeWidth = shouldBeMaxX - shouldBeMinX;\n+        int shouldBeHeight = shouldBeMaxY - shouldBeMinY;\n+        Assert.assertEquals((double) shouldBeWidth, screenCaptureNotScaledToFit.get().getWidth(), 0.0001);\n+        Assert.assertEquals((double) shouldBeHeight, screenCaptureNotScaledToFit.get().getHeight(), 0.0001);\n+\n+        \/\/ To verify the color we're going to skip the \"1-pixel outside border\" of the capture. On HiDPI systems\n+        \/\/ (especially on Windows) stage's position might have fractional element, which will mean the capture will\n+        \/\/ average those values with whatever is behind the stage. This will make their values invalid.\n+        for (int x = 1; x < shouldBeWidth - 1; x++) {\n+            for (int y = 1; y < shouldBeHeight - 1; y++) {\n@@ -771,2 +781,3 @@\n-        for (int x = 0; x < WIDTH; x++) {\n-            for (int y = 0; y < HEIGHT; y++) {\n+        \/\/ Because of scaling, similar estimate has to be done like above.\n+        for (int x = 1; x < WIDTH - 1; x++) {\n+            for (int y = 1; y < HEIGHT - 1; y++) {\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/RobotTest.java","additions":21,"deletions":10,"binary":false,"changes":31,"status":"modified"}]}