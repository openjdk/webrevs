{"files":[{"patch":"@@ -34,1 +34,1 @@\n-public class EmojiTest {\n+public class EmojiTest extends ManualTestWindow {\n@@ -36,23 +36,1 @@\n-        ManualTestWindow.builder().\n-            title(\"Emoji Rendering Test (macOS)\").\n-            instructions(\n-                \"\"\"\n-                This tests rendering of Emoji glyphs which is only supported on macOS.\n-                On macOS you should see a yellow-coloured smiling face image,\n-                embedded between 'ab' and 'cd'.\n-                On other platforms it may be a missing glyph, or an empty space, or\n-                a similar rendering as a greyscale\/B&W glyph.\n-                Principally, you are checking that the emoji is rendered on macOS in\n-                each of the controls and nodes displayed in the test, and that the\n-                editable text field handles selection of the emoji glyph with the\n-                same background as other glyphs - this presumes the emoji image has\n-                transparent background pixels.\n-                There are 3 different ways it is displayed to verify\n-                1) Text node. 2) Label control, 3) TextField Control\n-                Press the Pass or Fail button as appropriate and the test will exit.\n-                If what you see is not explained here, ask before filing a bug.\n-                \"\"\"\n-            ).\n-            size(1200, 800).\n-            ui(() -> create()).\n-            buildAndRun();\n+        launch(args);\n@@ -61,1 +39,25 @@\n-    public static Node create() {\n+    public EmojiTest() {\n+        super(\n+            \"Emoji Rendering Test (macOS)\",\n+            \"\"\"\n+            This tests rendering of Emoji glyphs which is only supported on macOS.\n+            On macOS you should see a yellow-coloured smiling face image,\n+            embedded between 'ab' and 'cd'.\n+            On other platforms it may be a missing glyph, or an empty space, or\n+            a similar rendering as a greyscale\/B&W glyph.\n+            Principally, you are checking that the emoji is rendered on macOS in\n+            each of the controls and nodes displayed in the test, and that the\n+            editable text field handles selection of the emoji glyph with the\n+            same background as other glyphs - this presumes the emoji image has\n+            transparent background pixels.\n+            There are 3 different ways it is displayed to verify\n+            1) Text node. 2) Label control, 3) TextField Control\n+            Press the Pass or Fail button as appropriate and the test will exit.\n+            If what you see is not explained here, ask before filing a bug.\n+            \"\"\",\n+            1200, 800\n+        );\n+    }\n+\n+    @Override\n+    protected Node createContent() {\n","filename":"tests\/manual\/text\/EmojiTest.java","additions":27,"deletions":25,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -5,1 +5,2 @@\n-This facility provides a framework for manual tests to display test instructions, test pane, and Pass\/Fail buttons.\n+This facility provides the base class for manual tests which displays the test instructions,\n+the UI under test, and the Pass\/Fail buttons.\n@@ -7,1 +8,1 @@\n-A simple test would look like this:\n+Example:\n@@ -10,17 +11,21 @@\n-public class SampleManualTest {\n-     public static void main(String[] args) throws Exception {\n-         ManualTestWindow.builder().\n-             title(\"Sample Manual Test\").\n-             instructions(\n-                 \"\"\"\n-                 Provide\n-                 multi-line instructions here.\n-                 \"\"\"\n-             ).\n-             ui(() -> createTestUI()).\n-             buildAndRun();\n-     }\n-\n-     private static Node createTestUI() {\n-         return new Label(\"Test UI\");\n-     }\n+public class ManualTestExample extends ManualTestWindow {\n+    public ManualTestExample() {\n+        super(\n+            \"Manual Test Example\",\n+            \"\"\"\n+            Instructions:\n+            1. you will see a button named \"Test\"\n+            2. press the button\n+            3. verify that the button can be pressed\"\"\",\n+            400, 250\n+        );\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        launch(args);\n+    }\n+\n+    @Override\n+    protected Node createContent() {\n+        return new Button(\"Test\");\n+    }\n","filename":"tests\/manual\/util\/README.md","additions":24,"deletions":19,"binary":false,"changes":43,"status":"modified"},{"filename":"tests\/manual\/util\/doc\/ManualTestWindow.png","binary":true,"status":"modified"},{"patch":"@@ -0,0 +1,27 @@\n+package com.oracle.util.testing;\n+\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+\n+public class ManualTestExample extends ManualTestWindow {\n+    public ManualTestExample() {\n+        super(\n+            \"Manual Test Example\",\n+            \"\"\"\n+            Instructions:\n+            1. you will see a button named \"Test\"\n+            2. press the button\n+            3. verify that the button can be pressed\"\"\",\n+            400, 250\n+        );\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        launch(args);\n+    }\n+\n+    @Override\n+    protected Node createContent() {\n+        return new Button(\"Test\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"tests\/manual\/util\/src\/com\/oracle\/util\/testing\/ManualTestExample.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -27,2 +27,0 @@\n-import java.util.Objects;\n-import java.util.function.Supplier;\n@@ -33,0 +31,1 @@\n+import javafx.scene.Parent;\n@@ -53,2 +52,2 @@\n- * Provides a framework for manual tests to display test instructions, test pane, and\n- * Pass\/Fail buttons.\n+ * Provides the base class for manual tests which displays the test instructions,\n+ * the UI under test, and the Pass\/Fail buttons.\n@@ -56,3 +55,14 @@\n- * A simple test would look like this:\n- * <pre>{@code\n- * public class SampleManualTest {\n+ * Example:\n+ * <pre>{@code public class ManualTestExample extends ManualTestWindow {\n+ *    public ManualTestExample() {\n+ *        super(\n+ *            \"Manual Test Example\",\n+ *            \"\"\"\n+ *            Instructions:\n+ *            1. you will see a button named \"Test\"\n+ *            2. press the button\n+ *            3. verify that the button can be pressed\"\"\",\n+ *            400, 250\n+ *        );\n+ *     }\n+ *\n@@ -60,10 +70,1 @@\n- *         ManualTestWindow.builder().\n- *             title(\"Sample Manual Test\").\n- *             instructions(\n- *                 \"\"\"\n- *                 Provide\n- *                 multi-line instructions here.\n- *                 \"\"\"\n- *             ).\n- *             ui(() -> createTestUI()).\n- *             buildAndRun();\n+ *         launch(args);\n@@ -72,2 +73,3 @@\n- *     private static Node createTestUI() {\n- *         return new Label(\"Test UI\");\n+ *     @Override\n+ *     protected Node createContent() {\n+ *         return new Button(\"Test\");\n@@ -77,8 +79,0 @@\n- * <p>\n- * The framework will create the test Application, generate the Node representing the test UI,\n- * and show the test Stage, making sure the last two operations happen in the context of the\n- * JavaFX application thread.\n- * <p>\n- * The {@link Builder#ui(Supplier)} method accepts interfaces which create the test Node.\n- * For tests that require multiple windows, these windows can be created by the code specified\n- * with {@link Builder#runAfter(Runnable)}.\n@@ -86,11 +80,12 @@\n-\/\/ TODO timeout\n-\/\/ TODO log area\n-\/\/ TODO screenshots on failure?\n-\/\/ TODO initial position?\n-public class ManualTestWindow {\n-    private static String title;\n-    private static String instructions;\n-    private static int width = 1000;\n-    private static int height = 800;\n-    private static Supplier<Node> generator;\n-    private static Runnable runAfter;\n+public abstract class ManualTestWindow extends Application {\n+    \/**\n+     * This method creates the {@code Node} containing elements under test,\n+     * to be shown below the instructions and above the \"Pass\"\/\"Fail\" buttons.\n+     * @return the node\n+     *\/\n+    protected abstract Node createContent();\n+\n+    private final String title;\n+    private final String instructions;\n+    private double width = 1000;\n+    private double height = 800;\n@@ -98,1 +93,3 @@\n-    private ManualTestWindow() {\n+    public ManualTestWindow(String title, String instructions) {\n+        this.title = title;\n+        this.instructions = instructions;\n@@ -101,3 +98,4 @@\n-    public static Builder builder() {\n-        title = \"Manual Test: \" + extractClassName();\n-        return new Builder();\n+    public ManualTestWindow(String title, String instructions, double width, double height) {\n+        this(title, instructions);\n+        this.width = width;\n+        this.height = height;\n@@ -106,3 +104,60 @@\n-    private static String extractClassName() {\n-        StackTraceElement[] ss = new Throwable().getStackTrace();\n-        return ss[2].getClassName();\n+    private Parent createContent(Stage stage) {\n+        Node content = createContent();\n+\n+        BlurType blurType = BlurType.GAUSSIAN;\n+        Color color = Color.gray(0, 0.5);\n+        double radius = 10;\n+        double spread = 0;\n+        double offsetX = 1;\n+        double offsetY = 1;\n+        DropShadow shadow = new DropShadow(blurType, color, radius, spread, offsetX, offsetY);\n+\n+        BorderPane cp = new BorderPane(content);\n+        cp.setMargin(content, new Insets(10));\n+        cp.setBackground(Background.fill(Color.gray(1)));\n+        cp.setEffect(shadow);\n+\n+        Node instructionField = toTextFlow(instructions);\n+\n+        Region fill = new Region();\n+\n+        \/*\n+        Button screenshotButton = new Button(\"Screenshot\");\n+        screenshotButton.setMinWidth(100);\n+        screenshotButton.setOnAction((ev) -> {\n+        });\n+        screenshotButton.setDisable(true);\n+        *\/\n+\n+        Button failButton = new Button(\"✘ Fail\");\n+        failButton.setMinWidth(100);\n+        failButton.setOnAction((ev) -> {\n+            \/\/ dump encoded screenshot to stderr?\n+            Platform.exit();\n+            throw new AssertionError(\"Failed Manual Test: \" + stage.getTitle());\n+        });\n+\n+        Button passButton = new Button(\"✔ Pass\");\n+        passButton.setMinWidth(100);\n+        passButton.setOnAction((ev) -> {\n+            Platform.exit();\n+        });\n+\n+        HBox buttons = new HBox(\n+            10,\n+            \/\/screenshotButton,\n+            fill,\n+            failButton,\n+            passButton\n+        );\n+        HBox.setHgrow(fill, Priority.ALWAYS);\n+\n+        VBox vb = new VBox(\n+            10,\n+            instructionField,\n+            cp,\n+            buttons\n+        );\n+        vb.setPadding(new Insets(10));\n+        VBox.setVgrow(cp, Priority.ALWAYS);\n+        return vb;\n@@ -112,1 +167,4 @@\n-     * Manual test builder.\n+     * Prepares the Application primary stage: creates the content {@code Node} to be tested,\n+     * creates the manual test UI, sets the {@code Scene}.\n+     * This method is called before the primary stage is shown.\n+     * @param stage the primary stage\n@@ -114,67 +172,6 @@\n-    public static class Builder {\n-        \/**\n-         * Sets the main window title.\n-         * When not specified, a title derived from the test class name will be used.\n-         * @param title the title\n-         * @return this {@code Builder} instance\n-         *\/\n-        public Builder title(String title) {\n-            ManualTestWindow.title = title;\n-            return this;\n-        }\n-\n-        \/**\n-         * Sets instructions to be displayed above the test main pane.\n-         * @param text the instruction text\n-         * @return this {@code Builder} instance\n-         *\/\n-        public Builder instructions(String text) {\n-            ManualTestWindow.instructions = text;\n-            return this;\n-        }\n-\n-        \/**\n-         * Determines the size of the main window.\n-         * @param width\n-         * @param height\n-         * @return this {@code Builder} instance\n-         * @defaultValue 1000 x 800\n-         *\/\n-        public Builder size(int width, int height) {\n-            ManualTestWindow.width = width;\n-            ManualTestWindow.height = height;\n-            return this;\n-        }\n-\n-        \/**\n-         * Sets the supplier of the test {@code Node}.\n-         * The test {@code Node} will be shown below the instructions and above\n-         * \"Pass\"\/\"Fail\" buttons.\n-         * @param generator the {@code Supplier} of the test {@code Node}\n-         * @return this {@code Builder} instance\n-         *\/\n-        public Builder ui(Supplier<Node> generator) {\n-            ManualTestWindow.generator = generator;\n-            return this;\n-        }\n-\n-        \/**\n-         * Sets the code to be executed after the main window is shown.\n-         * @param r the code to run after the main window is shown\n-         * @return this {@code Builder} instance\n-         *\/\n-        public Builder runAfter(Runnable r) {\n-            ManualTestWindow.runAfter = r;\n-            return this;\n-        }\n-\n-        \/**\n-         * Creates and launches the test application and its main window.\n-         * This method throws a {@link NullPointerException} if either instructions\n-         * or test node generator is {@code null}.\n-         *\/\n-        public void buildAndRun() {\n-            Objects.requireNonNull(instructions, \"instructions must not be null\");\n-            Objects.requireNonNull(generator, \"generator must not be null\");\n-            Application.launch(TApplication.class);\n-        }\n+    protected void prepareStage(Stage stage) {\n+        Parent content = createContent(stage);\n+        stage.setWidth(width);\n+        stage.setHeight(height);\n+        stage.setTitle(title);\n+        stage.setScene(new Scene(content));\n@@ -183,76 +180,5 @@\n-    \/** The Application to run the manual test *\/\n-    public static class TApplication extends Application {\n-        public TApplication() {\n-        }\n-\n-        @Override\n-        public void start(Stage stage) throws Exception {\n-            Node content = generator.get();\n-\n-            BlurType blurType = BlurType.GAUSSIAN;\n-            Color color = Color.gray(0, 0.5);\n-            double radius = 10;\n-            double spread = 0;\n-            double offsetX = 1;\n-            double offsetY = 1;\n-            DropShadow shadow = new DropShadow(blurType, color, radius, spread, offsetX, offsetY);\n-\n-            BorderPane cp = new BorderPane(content);\n-            cp.setMargin(content, new Insets(10));\n-            cp.setBackground(Background.fill(Color.gray(1)));\n-            cp.setEffect(shadow);\n-\n-            Node instructionField = toTextFlow(instructions);\n-\n-            Region fill = new Region();\n-\n-            Button screenshotButton = new Button(\"Screenshot\");\n-            screenshotButton.setMinWidth(100);\n-            screenshotButton.setOnAction((ev) -> {\n-                \/\/ TODO\n-            });\n-            screenshotButton.setDisable(true); \/\/ TODO\n-\n-            Button failButton = new Button(\"✘ Fail\");\n-            failButton.setMinWidth(100);\n-            failButton.setOnAction((ev) -> {\n-                \/\/ TODO encoded screenshot to stderr?\n-                Platform.exit();\n-                throw new AssertionError(\"Failed Manual Test: \" + title);\n-            });\n-\n-            Button passButton = new Button(\"✔ Pass\");\n-            passButton.setMinWidth(100);\n-            passButton.setOnAction((ev) -> {\n-                Platform.exit();\n-            });\n-\n-            HBox buttons = new HBox(\n-                10,\n-                screenshotButton,\n-                fill,\n-                failButton,\n-                passButton\n-            );\n-            HBox.setHgrow(fill, Priority.ALWAYS);\n-\n-            VBox vb = new VBox(\n-                10,\n-                instructionField,\n-                cp,\n-                buttons\n-            );\n-            vb.setPadding(new Insets(10));\n-            VBox.setVgrow(cp, Priority.ALWAYS);\n-\n-            Scene scene = new Scene(vb);\n-            stage.setWidth(width == 0 ? 800 : width);\n-            stage.setHeight(height == 0 ? 600 : height);\n-            stage.setScene(scene);\n-            stage.setTitle(title);\n-            stage.show();\n-\n-            if (runAfter != null) {\n-                Platform.runLater(runAfter);\n-            }\n-        }\n+    @Override\n+    public void start(Stage stage) throws Exception {\n+        prepareStage(stage);\n+        stage.show();\n+    }\n@@ -260,15 +186,11 @@\n-        \/\/ TODO markdown to show: bold, italic, underline, bullet list, numbered list\n-        private Node toTextFlow(String text) {\n-            TextFlow f = new TextFlow();\n-            Text t = new Text(text);\n-            f.getChildren().add(t);\n-            f.setOnContextMenuRequested((ev) -> {\n-                ContextMenu m = new ContextMenu();\n-                MenuItem mi = new MenuItem(\"Copy Instructions\");\n-                mi.setOnAction((e) -> {\n-                    ClipboardContent cc = new ClipboardContent();\n-                    cc.putString(text);\n-                    Clipboard.getSystemClipboard().setContent(cc);\n-                });\n-                m.getItems().setAll(mi);\n-                m.show(f, ev.getScreenX(), ev.getScreenY());\n+    private Node toTextFlow(String text) {\n+        TextFlow f = new TextFlow();\n+        Text t = new Text(text);\n+        f.getChildren().add(t);\n+        f.setOnContextMenuRequested((ev) -> {\n+            ContextMenu m = new ContextMenu();\n+            MenuItem mi = new MenuItem(\"Copy Instructions\");\n+            mi.setOnAction((e) -> {\n+                ClipboardContent cc = new ClipboardContent();\n+                cc.putString(text);\n+                Clipboard.getSystemClipboard().setContent(cc);\n@@ -276,2 +198,4 @@\n-            return f;\n-        }\n+            m.getItems().setAll(mi);\n+            m.show(f, ev.getScreenX(), ev.getScreenY());\n+        });\n+        return f;\n","filename":"tests\/manual\/util\/src\/com\/oracle\/util\/testing\/ManualTestWindow.java","additions":130,"deletions":206,"binary":false,"changes":336,"status":"modified"}]}