{"files":[{"patch":"@@ -13,0 +13,5 @@\n+\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/controls\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n@@ -18,0 +23,1 @@\n+\t<classpathentry kind=\"src\" path=\"\/manualTests-util\"\/>\n","filename":"tests\/manual\/text\/.classpath","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,7 +26,1 @@\n-import javafx.application.Application;\n-import javafx.application.Platform;\n-import javafx.scene.layout.HBox;\n-import javafx.scene.layout.VBox;\n-import javafx.scene.Group;\n-import javafx.scene.Scene;\n-import javafx.scene.control.Button;\n+import javafx.scene.Node;\n@@ -35,1 +29,1 @@\n-import javafx.stage.Stage;\n+import javafx.scene.layout.VBox;\n@@ -38,0 +32,1 @@\n+import com.oracle.util.testing.ManualTestWindow;\n@@ -39,22 +34,1 @@\n-public class EmojiTest extends Application {\n-\n-   static String instructions =\n-      \"\"\"\n-        This tests rendering of Emoji glyphs which is only supported on macOS.\n-        On macOS you should see a yellow-coloured smiling face image,\n-        embedded between 'ab' and 'cd'.\n-        On other platforms it may be a missing glyph, or an empty space, or\n-        a similar rendering as a greyscale\/B&W glyph.\n-        Principally, you are checking that the emoji is rendered on macOS in\n-        each of the controls and nodes displayed in the test, and that the\n-        editable text field handles selection of the emoji glyph with the\n-        same background as other glyphs - this presumes the emoji image has\n-        transparent background pixels.\n-        There are 3 different ways it is displayed to verify\n-        1) Text node. 2) Label control, 3) TextField Control\n-        Press the Pass or Fail button as appropriate and the test will exit.\n-        If what you see is not explained here, ask before filing a bug.\n-\n-\n-        \"\"\";\n-\n+public class EmojiTest {\n@@ -62,1 +36,23 @@\n-        launch(args);\n+        ManualTestWindow.builder().\n+            title(\"Emoji Rendering Test (macOS)\").\n+            instructions(\n+                \"\"\"\n+                This tests rendering of Emoji glyphs which is only supported on macOS.\n+                On macOS you should see a yellow-coloured smiling face image,\n+                embedded between 'ab' and 'cd'.\n+                On other platforms it may be a missing glyph, or an empty space, or\n+                a similar rendering as a greyscale\/B&W glyph.\n+                Principally, you are checking that the emoji is rendered on macOS in\n+                each of the controls and nodes displayed in the test, and that the\n+                editable text field handles selection of the emoji glyph with the\n+                same background as other glyphs - this presumes the emoji image has\n+                transparent background pixels.\n+                There are 3 different ways it is displayed to verify\n+                1) Text node. 2) Label control, 3) TextField Control\n+                Press the Pass or Fail button as appropriate and the test will exit.\n+                If what you see is not explained here, ask before filing a bug.\n+                \"\"\"\n+            ).\n+            size(1200, 800).\n+            ui(() -> create()).\n+            buildAndRun();\n@@ -65,19 +61,1 @@\n-    private void quit() {\n-        Platform.exit();\n-    }\n-\n-    @Override\n-    public void start(Stage stage) {\n-        Button passButton = new Button(\"Pass\");\n-        Button failButton = new Button(\"Fail\");\n-        passButton.setOnAction(e -> this.quit());\n-        failButton.setOnAction(e -> {\n-            this.quit();\n-            throw new AssertionError(\"The Emoji was not rendered on macOS\");\n-        });\n-\n-        HBox hbox = new HBox(10, passButton, failButton);\n-\n-        Text instTA = new Text(instructions);\n-        instTA.setWrappingWidth(500);\n-\n+    public static Node create() {\n@@ -93,12 +71,6 @@\n-        VBox vbox = new VBox();\n-        Scene scene = new Scene(vbox);\n-        vbox.getChildren().add(instTA);\n-        vbox.getChildren().add(hbox);\n-        vbox.getChildren().add(text);\n-        vbox.getChildren().add(label);\n-        vbox.getChildren().add(textField);\n-        stage.setWidth(600);\n-        stage.setHeight(600);\n-        stage.setScene(scene);\n-\n-        stage.show();\n+        return new VBox(\n+            2,\n+            text,\n+            label,\n+            textField\n+        );\n@@ -106,1 +78,0 @@\n-\n","filename":"tests\/manual\/text\/EmojiTest.java","additions":35,"deletions":64,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<classpath>\n+\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/base\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/controls\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/graphics\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.junit.JUNIT_CONTAINER\/5\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"test\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"src\" path=\"src\"\/>\n+\t<classpathentry kind=\"output\" path=\"bin\"\/>\n+<\/classpath>\n","filename":"tests\/manual\/util\/.classpath","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -3,1 +3,1 @@\n-    <name>manualTests-UI<\/name>\n+    <name>manualTests-util<\/name>\n","filename":"tests\/manual\/util\/.project","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"tests\/manual\/UI\/.project","status":"copied"},{"patch":"","filename":"tests\/manual\/util\/.settings\/org.eclipse.core.resources.prefs","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":".settings\/org.eclipse.core.resources.prefs","status":"copied"},{"patch":"@@ -3,1 +3,1 @@\n-org.eclipse.jdt.core.compiler.codegen.targetPlatform=21\n+org.eclipse.jdt.core.compiler.codegen.targetPlatform=17\n","filename":"tests\/manual\/util\/.settings\/org.eclipse.jdt.core.prefs","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"tests\/manual\/monkey\/.settings\/org.eclipse.jdt.core.prefs","status":"copied"},{"patch":"@@ -0,0 +1,33 @@\n+# Test Utilities\n+\n+## ManualTestWindow\n+\n+This facility provides a framework for manual tests to display test instructions, test pane, and Pass\/Fail buttons.\n+\n+A simple test would look like this:\n+\n+```java\n+public class SampleManualTest {\n+     public static void main(String[] args) throws Exception {\n+         ManualTestWindow.builder().\n+             title(\"Sample Manual Test\").\n+             instructions(\n+                 \"\"\"\n+                 Provide\n+                 multi-line instructions here.\n+                 \"\"\"\n+             ).\n+             ui(() -> createTestUI()).\n+             buildAndRun();\n+     }\n+\n+     private static Node createTestUI() {\n+         return new Label(\"Test UI\");\n+     }\n+}\n+```\n+\n+Resulting application window:\n+\n+![screenshot](doc\/ManualTestWindow.png)\n+\n","filename":"tests\/manual\/util\/README.md","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"filename":"tests\/manual\/util\/doc\/ManualTestWindow.png","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,279 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.util.testing;\n+\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.geometry.Insets;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.effect.BlurType;\n+import javafx.scene.effect.DropShadow;\n+import javafx.scene.input.Clipboard;\n+import javafx.scene.input.ClipboardContent;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Priority;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.scene.text.Text;\n+import javafx.scene.text.TextFlow;\n+import javafx.stage.Stage;\n+\n+\/**\n+ * Provides a framework for manual tests to display test instructions, test pane, and\n+ * Pass\/Fail buttons.\n+ * <p>\n+ * A simple test would look like this:\n+ * <pre>{@code\n+ * public class SampleManualTest {\n+ *     public static void main(String[] args) throws Exception {\n+ *         ManualTestWindow.builder().\n+ *             title(\"Sample Manual Test\").\n+ *             instructions(\n+ *                 \"\"\"\n+ *                 Provide\n+ *                 multi-line instructions here.\n+ *                 \"\"\"\n+ *             ).\n+ *             ui(() -> createTestUI()).\n+ *             buildAndRun();\n+ *     }\n+ *\n+ *     private static Node createTestUI() {\n+ *         return new Label(\"Test UI\");\n+ *     }\n+ * }\n+ * }<\/pre>\n+ * <p>\n+ * The framework will create the test Application, generate the Node representing the test UI,\n+ * and show the test Stage, making sure the last two operations happen in the context of the\n+ * JavaFX application thread.\n+ * <p>\n+ * The {@link Builder#ui(Supplier)} method accepts interfaces which create the test Node.\n+ * For tests that require multiple windows, these windows can be created by the code specified\n+ * with {@link Builder#runAfter(Runnable)}.\n+ *\/\n+\/\/ TODO timeout\n+\/\/ TODO log area\n+\/\/ TODO screenshots on failure?\n+\/\/ TODO initial position?\n+public class ManualTestWindow {\n+    private static String title;\n+    private static String instructions;\n+    private static int width = 1000;\n+    private static int height = 800;\n+    private static Supplier<Node> generator;\n+    private static Runnable runAfter;\n+\n+    private ManualTestWindow() {\n+    }\n+\n+    public static Builder builder() {\n+        title = \"Manual Test: \" + extractClassName();\n+        return new Builder();\n+    }\n+\n+    private static String extractClassName() {\n+        StackTraceElement[] ss = new Throwable().getStackTrace();\n+        return ss[2].getClassName();\n+    }\n+\n+    \/**\n+     * Manual test builder.\n+     *\/\n+    public static class Builder {\n+        \/**\n+         * Sets the main window title.\n+         * When not specified, a title derived from the test class name will be used.\n+         * @param title the title\n+         * @return this {@code Builder} instance\n+         *\/\n+        public Builder title(String title) {\n+            ManualTestWindow.title = title;\n+            return this;\n+        }\n+\n+        \/**\n+         * Sets instructions to be displayed above the test main pane.\n+         * @param text the instruction text\n+         * @return this {@code Builder} instance\n+         *\/\n+        public Builder instructions(String text) {\n+            ManualTestWindow.instructions = text;\n+            return this;\n+        }\n+\n+        \/**\n+         * Determines the size of the main window.\n+         * @param width\n+         * @param height\n+         * @return this {@code Builder} instance\n+         * @defaultValue 1000 x 800\n+         *\/\n+        public Builder size(int width, int height) {\n+            ManualTestWindow.width = width;\n+            ManualTestWindow.height = height;\n+            return this;\n+        }\n+\n+        \/**\n+         * Sets the supplier of the test {@code Node}.\n+         * The test {@code Node} will be shown below the instructions and above\n+         * \"Pass\"\/\"Fail\" buttons.\n+         * @param generator the {@code Supplier} of the test {@code Node}\n+         * @return this {@code Builder} instance\n+         *\/\n+        public Builder ui(Supplier<Node> generator) {\n+            ManualTestWindow.generator = generator;\n+            return this;\n+        }\n+\n+        \/**\n+         * Sets the code to be executed after the main window is shown.\n+         * @param r the code to run after the main window is shown\n+         * @return this {@code Builder} instance\n+         *\/\n+        public Builder runAfter(Runnable r) {\n+            ManualTestWindow.runAfter = r;\n+            return this;\n+        }\n+\n+        \/**\n+         * Creates and launches the test application and its main window.\n+         * This method throws a {@link NullPointerException} if either instructions\n+         * or test node generator is {@code null}.\n+         *\/\n+        public void buildAndRun() {\n+            Objects.requireNonNull(instructions, \"instructions must not be null\");\n+            Objects.requireNonNull(generator, \"generator must not be null\");\n+            Application.launch(TApplication.class);\n+        }\n+    }\n+\n+    \/** The Application to run the manual test *\/\n+    public static class TApplication extends Application {\n+        public TApplication() {\n+        }\n+\n+        @Override\n+        public void start(Stage stage) throws Exception {\n+            Node content = generator.get();\n+\n+            BlurType blurType = BlurType.GAUSSIAN;\n+            Color color = Color.gray(0, 0.5);\n+            double radius = 10;\n+            double spread = 0;\n+            double offsetX = 1;\n+            double offsetY = 1;\n+            DropShadow shadow = new DropShadow(blurType, color, radius, spread, offsetX, offsetY);\n+\n+            BorderPane cp = new BorderPane(content);\n+            cp.setMargin(content, new Insets(10));\n+            cp.setBackground(Background.fill(Color.gray(1)));\n+            cp.setEffect(shadow);\n+\n+            Node instructionField = toTextFlow(instructions);\n+\n+            Region fill = new Region();\n+\n+            Button screenshotButton = new Button(\"Screenshot\");\n+            screenshotButton.setMinWidth(100);\n+            screenshotButton.setOnAction((ev) -> {\n+                \/\/ TODO\n+            });\n+            screenshotButton.setDisable(true); \/\/ TODO\n+\n+            Button failButton = new Button(\"✘ Fail\");\n+            failButton.setMinWidth(100);\n+            failButton.setOnAction((ev) -> {\n+                \/\/ TODO encoded screenshot to stderr?\n+                Platform.exit();\n+                throw new AssertionError(\"Failed Manual Test: \" + title);\n+            });\n+\n+            Button passButton = new Button(\"✔ Pass\");\n+            passButton.setMinWidth(100);\n+            passButton.setOnAction((ev) -> {\n+                Platform.exit();\n+            });\n+\n+            HBox buttons = new HBox(\n+                10,\n+                screenshotButton,\n+                fill,\n+                failButton,\n+                passButton\n+            );\n+            HBox.setHgrow(fill, Priority.ALWAYS);\n+\n+            VBox vb = new VBox(\n+                10,\n+                instructionField,\n+                cp,\n+                buttons\n+            );\n+            vb.setPadding(new Insets(10));\n+            VBox.setVgrow(cp, Priority.ALWAYS);\n+\n+            Scene scene = new Scene(vb);\n+            stage.setWidth(width == 0 ? 800 : width);\n+            stage.setHeight(height == 0 ? 600 : height);\n+            stage.setScene(scene);\n+            stage.setTitle(title);\n+            stage.show();\n+\n+            if (runAfter != null) {\n+                Platform.runLater(runAfter);\n+            }\n+        }\n+\n+        \/\/ TODO markdown to show: bold, italic, underline, bullet list, numbered list\n+        private Node toTextFlow(String text) {\n+            TextFlow f = new TextFlow();\n+            Text t = new Text(text);\n+            f.getChildren().add(t);\n+            f.setOnContextMenuRequested((ev) -> {\n+                ContextMenu m = new ContextMenu();\n+                MenuItem mi = new MenuItem(\"Copy Instructions\");\n+                mi.setOnAction((e) -> {\n+                    ClipboardContent cc = new ClipboardContent();\n+                    cc.putString(text);\n+                    Clipboard.getSystemClipboard().setContent(cc);\n+                });\n+                m.getItems().setAll(mi);\n+                m.show(f, ev.getScreenX(), ev.getScreenY());\n+            });\n+            return f;\n+        }\n+    }\n+}\n","filename":"tests\/manual\/util\/src\/com\/oracle\/util\/testing\/ManualTestWindow.java","additions":279,"deletions":0,"binary":false,"changes":279,"status":"added"}]}