{"files":[{"patch":"@@ -855,3 +855,0 @@\n-        if (m_metadata) {\n-            auto unlinkedMetadata = m_metadata->unlinkedMetadata();\n-\n@@ -859,2 +856,4 @@\n-            ASSERT(unlinkedMetadata);\n-            if (unlinkedMetadata && unlinkedMetadata->didOptimize() == TriState::Indeterminate)\n+        ASSERT(!m_metadata || m_metadata->unlinkedMetadata());\n+        if (m_metadata && !m_metadata->isDestroyed()) {\n+            auto unlinkedMetadata = m_metadata->unlinkedMetadata();\n+            if (unlinkedMetadata->didOptimize() == TriState::Indeterminate)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/bytecode\/CodeBlock.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -64,4 +64,0 @@\n-    RefPtr<UnlinkedMetadataTable> unlinkedMetadata = WTFMove(table->linkingData().unlinkedMetadata);\n-\n-    table->~MetadataTable();\n-\n@@ -69,1 +65,1 @@\n-    if (UNLIKELY(!unlinkedMetadata)) {\n+    if (table->isDestroyed()) {\n@@ -74,0 +70,5 @@\n+    RefPtr<UnlinkedMetadataTable> unlinkedMetadata = WTFMove(table->linkingData().unlinkedMetadata);\n+    ASSERT(table->isDestroyed());\n+\n+    table->~MetadataTable();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/bytecode\/MetadataTable.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (C) 2018-2023 Apple Inc. All rights reserved.\n+ * Copyright (C) 2018-2024 Apple Inc. All rights reserved.\n@@ -132,0 +132,6 @@\n+    bool isDestroyed() const\n+    {\n+        uintptr_t unlinkedMetadataPtr = *bitwise_cast<uintptr_t*>(&linkingData().unlinkedMetadata);\n+        return !unlinkedMetadataPtr;\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/bytecode\/MetadataTable.h","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include <mutex>\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/disassembler\/ARM64\/A64DOpcode.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (C) 2012-2023 Apple Inc. All rights reserved.\n+ * Copyright (C) 2012, 2013, 2014 Apple Inc. All rights reserved.\n@@ -49,3 +49,1 @@\n-    FOR_EACH_LLINT_NOJIT_RETURN_HELPER(macro)\n-\n-#define FOR_EACH_LLINT_OPCODE_EXTENSION(macro) \\\n+    \\\n@@ -53,1 +51,5 @@\n-    FOR_EACH_LLINT_NATIVE_HELPER(macro)\n+    \\\n+    FOR_EACH_LLINT_NOJIT_RETURN_HELPER(macro) \\\n+\n+\n+#define FOR_EACH_LLINT_OPCODE_EXTENSION(macro) FOR_EACH_LLINT_NATIVE_HELPER(macro)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/llint\/LLIntOpcode.h","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (C) 2012-2023 Apple Inc. All rights reserved.\n+ * Copyright (C) 2012-2022 Apple Inc. All rights reserved.\n@@ -282,1 +282,0 @@\n-        FOR_EACH_BYTECODE_HELPER_ID(OPCODE_ENTRY)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/llint\/LowLevelInterpreter.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -5270,0 +5270,2 @@\n+        if (!needsOverflowCheck)\n+            checkSize = stackCheckNotNeeded;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmB3IRGenerator.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3961,19 +3961,0 @@\n-            } else {\n-                ASSERT(returnLocation.isStackArgument());\n-                \/\/ FIXME: Ideally, we would leave these values where they are but a subsequent call could clobber them before they are used.\n-                \/\/ That said, stack results are very rare so this isn't too painful.\n-                \/\/ Even if we did leave them where they are, we'd need to flush them to their canonical location at the next branch otherwise\n-                \/\/ we could have something like (assume no result regs for simplicity):\n-                \/\/ call (result i32 i32) $foo\n-                \/\/ if (result i32) \/\/ Stack: i32(StackArgument:8) i32(StackArgument:0)\n-                \/\/   \/\/ Stack: i32(StackArgument:8)\n-                \/\/ else\n-                \/\/   call (result i32 i32) $bar \/\/ Stack: i32(StackArgument:8) we have to flush the stack argument to make room for the result of bar\n-                \/\/   drop \/\/ Stack: i32(Stack:X) i32(StackArgument:8) i32(StackArgument:0)\n-                \/\/   drop \/\/ Stack: i32(Stack:X) i32(StackArgument:8)\n-                \/\/ end\n-                \/\/ return \/\/ Stack i32(*Conflicting locations*)\n-\n-                Location canonicalLocation = canonicalSlot(result);\n-                emitMoveMemory(result.type(), returnLocation, canonicalLocation);\n-                returnLocation = canonicalLocation;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmBBQJIT.cpp","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -246,0 +246,3 @@\n+constexpr int32_t stackCheckUnset = 0;\n+constexpr int32_t stackCheckNotNeeded = -1;\n+\n@@ -264,2 +267,12 @@\n-    void setStackCheckSize(unsigned stackCheckSize) { m_stackCheckSize = stackCheckSize; }\n-    unsigned stackCheckSize() const { return m_stackCheckSize; }\n+    void setStackCheckSize(int32_t stackCheckSize)\n+    {\n+        ASSERT(m_stackCheckSize == stackCheckUnset);\n+        ASSERT(stackCheckSize > 0 || stackCheckSize == stackCheckNotNeeded);\n+        m_stackCheckSize = stackCheckSize;\n+    }\n+\n+    int32_t stackCheckSize() const\n+    {\n+        ASSERT(m_stackCheckSize > 0 || m_stackCheckSize == stackCheckNotNeeded);\n+        return m_stackCheckSize;\n+    }\n@@ -276,1 +289,1 @@\n-    unsigned m_stackCheckSize { 0 };\n+    int32_t m_stackCheckSize { stackCheckUnset };\n@@ -357,2 +370,11 @@\n-    void setStackCheckSize(unsigned stackCheckSize) { m_stackCheckSize = stackCheckSize; }\n-    unsigned stackCheckSize() const { return m_stackCheckSize; }\n+    void setStackCheckSize(unsigned stackCheckSize)\n+    {\n+        ASSERT(m_stackCheckSize == stackCheckUnset);\n+        ASSERT(stackCheckSize > 0 || int32_t(stackCheckSize) == stackCheckNotNeeded);\n+        m_stackCheckSize = stackCheckSize;\n+    }\n+    int32_t stackCheckSize() const\n+    {\n+        ASSERT(m_stackCheckSize > 0 || int32_t(m_stackCheckSize) == stackCheckNotNeeded);\n+        return m_stackCheckSize;\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmCallee.h","additions":27,"deletions":5,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -328,0 +328,14 @@\n+    auto doStackCheck = [instance](OSREntryCallee* callee) -> bool {\n+        uintptr_t stackPointer = reinterpret_cast<uintptr_t>(currentStackPointer());\n+        ASSERT(callee->stackCheckSize());\n+        if (callee->stackCheckSize() == stackCheckNotNeeded)\n+            return true;\n+        uintptr_t stackExtent = stackPointer - callee->stackCheckSize();\n+        uintptr_t stackLimit = reinterpret_cast<uintptr_t>(instance->softStackLimit());\n+        if (UNLIKELY(stackExtent >= stackPointer || stackExtent <= stackLimit)) {\n+            dataLogLnIf(Options::verboseOSR(), \"Skipping OMG loop tier up due to stack check; \", RawHex(stackPointer), \" -> \", RawHex(stackExtent), \" is past soft limit \", RawHex(stackLimit));\n+            return false;\n+        }\n+        return true;\n+    };\n+\n@@ -402,1 +416,3 @@\n-        if (osrEntryCallee->loopIndex() == loopIndex)\n+        if (osrEntryCallee->loopIndex() == loopIndex) {\n+            if (!doStackCheck(osrEntryCallee))\n+                return returnWithoutOSREntry();\n@@ -405,0 +421,1 @@\n+    }\n@@ -417,1 +434,3 @@\n-        if (osrEntryCallee->loopIndex() == loopIndex)\n+        if (osrEntryCallee->loopIndex() == loopIndex) {\n+            if (!doStackCheck(osrEntryCallee))\n+                return returnWithoutOSREntry();\n@@ -419,0 +438,1 @@\n+        }\n@@ -498,1 +518,3 @@\n-    if (osrEntryCallee->loopIndex() == loopIndex)\n+    if (osrEntryCallee->loopIndex() == loopIndex) {\n+        if (!doStackCheck(osrEntryCallee))\n+            return returnWithoutOSREntry();\n@@ -500,0 +522,1 @@\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmOperations.cpp","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -309,1 +309,1 @@\n-            if (osrEntryCallee->stackCheckSize()) {\n+            if (osrEntryCallee->stackCheckSize() != Wasm::stackCheckNotNeeded) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmSlowPaths.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2395,0 +2395,1 @@\n+    rendering\/style\/GridPositionsResolver.h\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Headers.cmake","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+FetchBodySource::~FetchBodySource() = default;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/fetch\/FetchBodySource.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+    virtual ~FetchBodySource();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/fetch\/FetchBodySource.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,0 +53,2 @@\n+FetchResponse::~FetchResponse() = default;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/fetch\/FetchResponse.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -62,0 +62,2 @@\n+    virtual ~FetchResponse();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/fetch\/FetchResponse.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,15 +97,4 @@\n-[pseudo=\"-webkit-media-text-track-display\"] b {\n-    font-weight: bold;\n-}\n-\n-[pseudo=\"-webkit-media-text-track-display\"] u {\n-    text-decoration: underline;\n-}\n-\n-[pseudo=\"-webkit-media-text-track-display\"] i {\n-    font-style: italic;\n-}\n-\n-[pseudo=\"-webkit-media-text-track-display\"] .hidden {\n-    display: none;\n-}\n+[useragentpart=\"-webkit-media-text-track-display\"] b { font-weight: bold; }\n+[useragentpart=\"-webkit-media-text-track-display\"] u { text-decoration: underline; }\n+[useragentpart=\"-webkit-media-text-track-display\"] i { font-style: italic; }\n+[useragentpart=\"-webkit-media-text-track-display\"] .hidden { display: none; }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/modern-media-controls\/controls\/text-tracks.css","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -69,0 +69,2 @@\n+YouTubePluginReplacement::~YouTubePluginReplacement() = default;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/plugins\/YouTubePluginReplacement.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,0 +46,2 @@\n+    virtual ~YouTubePluginReplacement();\n+\n@@ -47,0 +49,1 @@\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/plugins\/YouTubePluginReplacement.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -149,0 +149,5 @@\n+ReportingObserverCallback& ReportingObserver::callbackConcurrently()\n+{\n+    return m_callback.get();\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/reporting\/ReportingObserver.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -58,0 +58,2 @@\n+    ReportingObserverCallback& callbackConcurrently();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/reporting\/ReportingObserver.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-    GenerateIsReachable=ImplScriptExecutionContext\n+    GenerateIsReachable=ImplScriptExecutionContext,\n+    JSCustomMarkFunction\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/reporting\/ReportingObserver.idl","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+\n+    virtual bool hasCallback() const = 0;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/reporting\/ReportingObserverCallback.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-callback ReportingObserverCallback = undefined (ReportList reports, ReportingObserver observer);\n+[ IsWeakCallback ] callback ReportingObserverCallback = undefined (ReportList reports, ReportingObserver observer);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/reporting\/ReportingObserverCallback.idl","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,0 +65,2 @@\n+SpeechRecognitionEvent::~SpeechRecognitionEvent() = default;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/speech\/SpeechRecognitionEvent.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,0 +45,2 @@\n+    virtual ~SpeechRecognitionEvent();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/speech\/SpeechRecognitionEvent.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"StorageEstimate.h\"\n@@ -37,1 +38,0 @@\n-struct StorageEstimate;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/storage\/StorageConnection.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,0 +51,2 @@\n+AudioBasicProcessorNode::~AudioBasicProcessorNode() = default;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/AudioBasicProcessorNode.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+    virtual ~AudioBasicProcessorNode();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/AudioBasicProcessorNode.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -707,0 +707,1 @@\n+bindings\/js\/JSReportingObserverCustom.cpp\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Sources.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1816,1 +1816,1 @@\n-VisiblePosition AccessibilityObject::nextLineEndPosition(const VisiblePosition& visiblePos) const\n+VisiblePosition AccessibilityObject::nextLineEndPosition(const VisiblePosition& startPosition) const\n@@ -1818,7 +1818,2 @@\n-    if (visiblePos.isNull())\n-        return VisiblePosition();\n-\n-    \/\/ to make sure we move off of a line end\n-    VisiblePosition nextVisiblePos = visiblePos.next();\n-    if (nextVisiblePos.isNull())\n-        return VisiblePosition();\n+    if (startPosition.isNull())\n+        return { };\n@@ -1826,1 +1821,4 @@\n-    VisiblePosition endPosition = endOfLine(nextVisiblePos);\n+    \/\/ Move to the next position to ensure we move off a line end.\n+    auto nextPosition = startPosition.next();\n+    if (nextPosition.isNull())\n+        return { };\n@@ -1828,5 +1826,10 @@\n-    \/\/ as long as the position hasn't reached the end of the doc,  keep searching for a valid line end position\n-    \/\/ There are cases like when the position is next to a floating object that'll return null for end of line. This code will avoid returning null.\n-    while (endPosition.isNull() && nextVisiblePos.isNotNull()) {\n-        nextVisiblePos = nextVisiblePos.next();\n-        endPosition = endOfLine(nextVisiblePos);\n+    auto lineEndPosition = endOfLine(nextPosition);\n+    \/\/ As long as the position hasn't reached the end of the document, keep searching for a valid line\n+    \/\/ end position. Skip past null positions, as there are cases like when the position is next to a\n+    \/\/ floating object that'll return null for end of line. Also, in certain scenarios, like when one\n+    \/\/ position is editable and the other isn't (e.g. in mixed-contenteditable-visible-character-range-hang.html),\n+    \/\/ we may end up back at the same position we started at. This is never valid, so keep moving forward\n+    \/\/ trying to find the next line end.\n+    while ((lineEndPosition.isNull() || lineEndPosition == startPosition) && nextPosition.isNotNull()) {\n+        nextPosition = nextPosition.next();\n+        lineEndPosition = endOfLine(nextPosition);\n@@ -1834,2 +1837,1 @@\n-\n-    return endPosition;\n+    return lineEndPosition;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/accessibility\/AccessibilityObject.cpp","additions":18,"deletions":16,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -64,0 +64,2 @@\n+CSSTransition::~CSSTransition() = default;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/animation\/CSSTransition.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,2 @@\n-    ~CSSTransition() = default;\n+\n+    virtual ~CSSTransition();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/animation\/CSSTransition.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -75,0 +75,2 @@\n+DocumentTimeline::~DocumentTimeline() = default;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/animation\/DocumentTimeline.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,0 +56,2 @@\n+    virtual ~DocumentTimeline();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/animation\/DocumentTimeline.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-    static JSC::JSInternalPromise& loadModule(JSC::JSGlobalObject& lexicalGlobalObject, const URL& topLevelModuleURL, JSC::JSValue parameters, JSC::JSValue scriptFetcher)\n+    static JSC::JSInternalPromise* loadModule(JSC::JSGlobalObject& lexicalGlobalObject, const URL& topLevelModuleURL, JSC::JSValue parameters, JSC::JSValue scriptFetcher)\n@@ -125,1 +125,1 @@\n-        return *JSC::loadModule(&lexicalGlobalObject, JSC::Identifier::fromString(lexicalGlobalObject.vm(), topLevelModuleURL.string()), parameters, scriptFetcher);\n+        return JSC::loadModule(&lexicalGlobalObject, JSC::Identifier::fromString(lexicalGlobalObject.vm(), topLevelModuleURL.string()), parameters, scriptFetcher);\n@@ -128,1 +128,1 @@\n-    static JSC::JSInternalPromise& loadModule(JSC::JSGlobalObject& lexicalGlobalObject, const JSC::SourceCode& sourceCode, JSC::JSValue scriptFetcher)\n+    static JSC::JSInternalPromise* loadModule(JSC::JSGlobalObject& lexicalGlobalObject, const JSC::SourceCode& sourceCode, JSC::JSValue scriptFetcher)\n@@ -131,1 +131,1 @@\n-        return *JSC::loadModule(&lexicalGlobalObject, sourceCode, scriptFetcher);\n+        return JSC::loadModule(&lexicalGlobalObject, sourceCode, scriptFetcher);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/JSExecState.h","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (C) 2024 Apple, Inc. All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in the\n+ *    documentation and\/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY\n+ * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+ * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n+ * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n+ * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n+ * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+\n+#include \"config.h\"\n+#include \"JSReportingObserver.h\"\n+\n+#include \"ReportingObserverCallback.h\"\n+\n+#include <JavaScriptCore\/JSCInlines.h>\n+\n+namespace WebCore {\n+\n+template <typename Visitor>\n+void JSReportingObserver::visitAdditionalChildren(Visitor& visitor)\n+{\n+    wrapped().callbackConcurrently().visitJSFunction(visitor);\n+}\n+\n+DEFINE_VISIT_ADDITIONAL_CHILDREN(JSReportingObserver);\n+\n+}\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/JSReportingObserverCustom.cpp","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -187,2 +187,4 @@\n-    auto& promise = JSExecState::loadModule(lexicalGlobalObject, topLevelModuleURL, JSC::JSScriptFetchParameters::create(lexicalGlobalObject.vm(), WTFMove(topLevelFetchParameters)), JSC::JSScriptFetcher::create(lexicalGlobalObject.vm(), { &moduleScript }));\n-    setupModuleScriptHandlers(moduleScript, promise, world);\n+    auto* promise = JSExecState::loadModule(lexicalGlobalObject, topLevelModuleURL, JSC::JSScriptFetchParameters::create(lexicalGlobalObject.vm(), WTFMove(topLevelFetchParameters)), JSC::JSScriptFetcher::create(lexicalGlobalObject.vm(), { &moduleScript }));\n+    if (UNLIKELY(!promise))\n+        return;\n+    setupModuleScriptHandlers(moduleScript, *promise, world);\n@@ -203,2 +205,4 @@\n-    auto& promise = JSExecState::loadModule(lexicalGlobalObject, sourceCode.jsSourceCode(), JSC::JSScriptFetcher::create(lexicalGlobalObject.vm(), { &moduleScript }));\n-    setupModuleScriptHandlers(moduleScript, promise, world);\n+    auto* promise = JSExecState::loadModule(lexicalGlobalObject, sourceCode.jsSourceCode(), JSC::JSScriptFetcher::create(lexicalGlobalObject.vm(), { &moduleScript }));\n+    if (UNLIKELY(!promise))\n+        return;\n+    setupModuleScriptHandlers(moduleScript, *promise, world);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/ScriptController.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -62,0 +62,2 @@\n+CryptoKeyEC::~CryptoKeyEC() = default;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/crypto\/keys\/CryptoKeyEC.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-    virtual ~CryptoKeyEC() = default;\n+    virtual ~CryptoKeyEC();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/crypto\/keys\/CryptoKeyEC.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -276,11 +276,4 @@\n-[pseudo=\"-webkit-media-text-track-display\"] b {\n-    font-weight: bold;\n-}\n-\n-[pseudo=\"-webkit-media-text-track-display\"] u {\n-    text-decoration: underline;\n-}\n-\n-[pseudo=\"-webkit-media-text-track-display\"] i {\n-    font-style: italic;\n-}\n+[useragentpart=\"-webkit-media-text-track-display\"] b { font-weight: bold; }\n+[useragentpart=\"-webkit-media-text-track-display\"] u { text-decoration: underline; }\n+[useragentpart=\"-webkit-media-text-track-display\"] i { font-style: italic; }\n+[useragentpart=\"-webkit-media-text-track-display\"] .hidden { display: none; }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/mediaControls.css","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -122,0 +122,2 @@\n+CSSUnparsedValue::~CSSUnparsedValue() = default;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/typedom\/CSSUnparsedValue.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+    virtual ~CSSUnparsedValue();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/typedom\/CSSUnparsedValue.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -105,0 +105,2 @@\n+CSSPerspective::~CSSPerspective() = default;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/typedom\/transform\/CSSPerspective.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,0 +44,2 @@\n+    virtual ~CSSPerspective();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/typedom\/transform\/CSSPerspective.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -170,0 +170,2 @@\n+CSSTransformValue::~CSSTransformValue() = default;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/typedom\/transform\/CSSTransformValue.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,0 +45,2 @@\n+    virtual ~CSSTransformValue();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/typedom\/transform\/CSSTransformValue.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4031,0 +4031,4 @@\n+    if (RefPtr page = protectedPage())\n+        m_fragmentDirective = page->mainFrameURLFragment();\n+\n+    if (m_fragmentDirective.isEmpty())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Document.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -77,0 +77,2 @@\n+DragEvent::~DragEvent() = default;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/DragEvent.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+    virtual ~DragEvent();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/DragEvent.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -64,0 +64,2 @@\n+InputEvent::~InputEvent() = default;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/InputEvent.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,0 +47,2 @@\n+    virtual ~InputEvent();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/InputEvent.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -238,0 +238,2 @@\n+ReplaceSelectionCommand::~ReplaceSelectionCommand() = default;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/editing\/ReplaceSelectionCommand.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,0 +55,2 @@\n+    virtual ~ReplaceSelectionCommand();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/editing\/ReplaceSelectionCommand.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"HTMLOptionsCollectionInlines.h\"\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/CollectionTraversalInlines.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,0 +53,5 @@\n+template <CollectionTraversalType traversalType>\n+GenericCachedHTMLCollection<traversalType>::~GenericCachedHTMLCollection() = default;\n+template GenericCachedHTMLCollection<CollectionTraversalType::Descendants>::~GenericCachedHTMLCollection();\n+template GenericCachedHTMLCollection<CollectionTraversalType::ChildrenOnly>::~GenericCachedHTMLCollection();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/GenericCachedHTMLCollection.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -42,0 +42,2 @@\n+    virtual ~GenericCachedHTMLCollection();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/GenericCachedHTMLCollection.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1638,0 +1638,5 @@\n+    if (!m_player) {\n+        ASSERT_NOT_REACHED(\"It should not be possible to enter loadResource without a valid m_player object\");\n+        mediaLoadingFailed(MediaPlayer::NetworkState::FormatError);\n+        return;\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLMediaElement.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -728,1 +728,2 @@\n-        if (scriptExecutionContext.activeDOMObjectsAreStopped())\n+        if (scriptExecutionContext.activeDOMObjectsAreStopped()) {\n+            completionHandler(Exception { ExceptionCode::InvalidStateError, \"Cannot create ImageBitmap in a document without browsing context\"_s });\n@@ -730,0 +731,1 @@\n+        }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/ImageBitmap.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -150,0 +150,3 @@\n+    if (!frame())\n+        return;\n+\n@@ -240,0 +243,1 @@\n+    RefPtr documentLoader = loader();\n@@ -242,1 +246,1 @@\n-    if (MIMETypeRegistry::isPDFMIMEType(document().loader()->responseMIMEType()))\n+    if (documentLoader && MIMETypeRegistry::isPDFMIMEType(documentLoader->responseMIMEType()))\n@@ -253,2 +257,2 @@\n-    if (auto* cachedImage = imageElement->cachedImage())\n-        cachedImage->setResponse(loader()->response());\n+    if (auto* cachedImage = imageElement->cachedImage(); documentLoader && cachedImage)\n+        cachedImage->setResponse(documentLoader->response());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/ImageDocument.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -169,0 +169,2 @@\n+PluginDocument::~PluginDocument() = default;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/PluginDocument.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,0 +44,2 @@\n+    virtual ~PluginDocument();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/PluginDocument.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1574,19 +1574,0 @@\n-static std::pair<FloatRect, FloatRect> normalizeSourceAndDestination(const FloatRect& imageRect, const FloatRect& srcRect, const FloatRect& dstRect)\n-{\n-    std::pair<FloatRect, FloatRect> srcDstRect { normalizeRect(srcRect), normalizeRect(dstRect) };\n-\n-    \/\/ When the source rectangle is outside the source image, the source rectangle must be clipped\n-    \/\/ to the source image and the destination rectangle must be clipped in the same proportion.\n-    FloatRect originalNormalizedSrcRect = srcDstRect.first;\n-    srcDstRect.first.intersect(imageRect);\n-    if (srcDstRect.first.isEmpty())\n-        return srcDstRect;\n-\n-    if (srcDstRect.first != originalNormalizedSrcRect) {\n-        srcDstRect.second.setWidth(srcDstRect.second.width() * srcDstRect.first.width() \/ originalNormalizedSrcRect.width());\n-        srcDstRect.second.setHeight(srcDstRect.second.height() * srcDstRect.first.height() \/ originalNormalizedSrcRect.height());\n-    }\n-\n-    return srcDstRect;\n-}\n-\n@@ -1631,3 +1612,2 @@\n-    auto normalizedSrcDstRect = normalizeSourceAndDestination(imageRect, srcRect, dstRect);\n-    FloatRect normalizedSrcRect = normalizedSrcDstRect.first;\n-    FloatRect normalizedDstRect = normalizedSrcDstRect.second;\n+    auto normalizedSrcRect = normalizeRect(srcRect);\n+    auto normalizedDstRect = normalizeRect(dstRect);\n@@ -1714,3 +1694,2 @@\n-    auto normalizedSrcDstRect = normalizeSourceAndDestination(srcCanvasRect, srcRect, dstRect);\n-    FloatRect normalizedSrcRect = normalizedSrcDstRect.first;\n-    FloatRect normalizedDstRect = normalizedSrcDstRect.second;\n+    auto normalizedSrcRect = normalizeRect(srcRect);\n+    auto normalizedDstRect = normalizeRect(dstRect);\n@@ -1775,1 +1754,0 @@\n-    FloatRect videoRect = FloatRect(FloatPoint(), size(video));\n@@ -1779,3 +1757,2 @@\n-    auto normalizedSrcDstRect = normalizeSourceAndDestination(videoRect, srcRect, dstRect);\n-    FloatRect normalizedSrcRect = normalizedSrcDstRect.first;\n-    FloatRect normalizedDstRect = normalizedSrcDstRect.second;\n+    auto normalizedSrcRect = normalizeRect(srcRect);\n+    auto normalizedDstRect = normalizeRect(dstRect);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/canvas\/CanvasRenderingContext2DBase.cpp","additions":6,"deletions":29,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -1438,1 +1438,1 @@\n-    \/\/ ASSERT(this == frameLoader()->activeDocumentLoader());\n+    ASSERT(this == frameLoader()->activeDocumentLoader());\n@@ -2151,0 +2151,9 @@\n+    auto url = m_request.url();\n+    auto fragmentDirective = url.consumefragmentDirective();\n+\n+    m_request.setURL(url, m_request.didFilterLinkDecoration());\n+    if (m_frame) {\n+        RefPtr page = m_frame->protectedPage();\n+        if (page)\n+            page->setMainFrameURLFragment(WTFMove(fragmentDirective));\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/DocumentLoader.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -60,0 +60,2 @@\n+CachedSVGFont::~CachedSVGFont() = default;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/cache\/CachedSVGFont.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+    virtual ~CachedSVGFont();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/cache\/CachedSVGFont.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -726,0 +726,5 @@\n+void Page::setMainFrameURLFragment(String&& fragment)\n+{\n+    if (!fragment.isEmpty())\n+        m_mainFrameURLFragment = WTFMove(fragment);\n+}\n@@ -1534,0 +1539,2 @@\n+    m_mainFrameURLFragment = { };\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/Page.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -333,0 +333,2 @@\n+    WEBCORE_EXPORT void setMainFrameURLFragment(String&&);\n+    String mainFrameURLFragment() const { return m_mainFrameURLFragment; }\n@@ -1180,0 +1182,1 @@\n+    String m_mainFrameURLFragment;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/Page.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+WorkerNavigator::~WorkerNavigator() = default;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/WorkerNavigator.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+    virtual ~WorkerNavigator();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/WorkerNavigator.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,0 +87,4 @@\n+        ASSERT(graphicsLayer);\n+        \/\/ Crash data suggest that graphicsLayer can be null: rdar:\/\/105887621.\n+        if (!graphicsLayer)\n+            return;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/scrolling\/ScrollingStateFixedNode.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,0 +47,2 @@\n+AudioDSPKernelProcessor::~AudioDSPKernelProcessor() = default;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/audio\/AudioDSPKernelProcessor.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+    virtual ~AudioDSPKernelProcessor();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/audio\/AudioDSPKernelProcessor.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -80,0 +80,2 @@\n+NativeImage::~NativeImage() = default;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/NativeImage.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,0 +50,2 @@\n+    virtual ~NativeImage();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/NativeImage.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -181,2 +181,2 @@\n-    int maxRadiusWidth = std::max(m_radii.topLeft().width() + m_radii.topRight().width(), m_radii.bottomLeft().width() + m_radii.bottomRight().width());\n-    int maxRadiusHeight = std::max(m_radii.topLeft().height() + m_radii.bottomLeft().height(), m_radii.topRight().height() + m_radii.bottomRight().height());\n+    auto maxRadiusWidth = std::max(m_radii.topLeft().width() + m_radii.topRight().width(), m_radii.bottomLeft().width() + m_radii.bottomRight().width());\n+    auto maxRadiusHeight = std::max(m_radii.topLeft().height() + m_radii.bottomLeft().height(), m_radii.topRight().height() + m_radii.bottomRight().height());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/RoundedRect.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,2 +76,0 @@\n-const double SMALL_NUMBER = 1.e-8;\n-\n@@ -219,3 +217,2 @@\n-    double det = determinant4x4(matrix);\n-\n-    if (std::abs(det) < SMALL_NUMBER)\n+    double determinant = determinant4x4(matrix);\n+    if (!std::isnormal(determinant))\n@@ -228,1 +225,1 @@\n-            result[i][j] = result[i][j] \/ det;\n+            result[i][j] = result[i][j] \/ determinant;\n@@ -1591,1 +1588,1 @@\n-    return std::abs(type == Type::Affine ? (m11() * m22() - m12() * m21()) : WebCore::determinant4x4(m_matrix)) >= SMALL_NUMBER;\n+    return std::isnormal(type == Type::Affine ? (m11() * m22() - m12() * m21()) : WebCore::determinant4x4(m_matrix));\n@@ -1617,1 +1614,1 @@\n-        if (std::abs(determinant) < SMALL_NUMBER)\n+        if (!std::isnormal(determinant))\n@@ -1920,1 +1917,1 @@\n-    if (std::abs(determinant) < SMALL_NUMBER)\n+    if (!std::isnormal(determinant))\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/transforms\/TransformationMatrix.cpp","additions":6,"deletions":9,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    ~MockRealtimeVideoSource();\n+    virtual ~MockRealtimeVideoSource();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/mock\/MockRealtimeVideoSource.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -256,1 +256,1 @@\n-                clipRoundedInnerRect(context, pixelSnappedRect, pixelSnappedBorder);\n+                clipRoundedInnerRect(context, pixelSnappedBorder);\n@@ -281,1 +281,1 @@\n-        clipRoundedInnerRect(context, pixelSnappedRect, border.pixelSnappedRoundedRectForPainting(deviceScaleFactor));\n+        clipRoundedInnerRect(context, border.pixelSnappedRoundedRectForPainting(deviceScaleFactor));\n@@ -434,1 +434,1 @@\n-void BackgroundPainter::clipRoundedInnerRect(GraphicsContext& context, const FloatRect& rect, const FloatRoundedRect& clipRect)\n+void BackgroundPainter::clipRoundedInnerRect(GraphicsContext& context, const FloatRoundedRect& clipRect)\n@@ -436,2 +436,4 @@\n-    if (clipRect.isRenderable()) {\n-        context.clipRoundedRect(clipRect);\n+    if (UNLIKELY(!clipRect.isRenderable())) {\n+        auto adjustedClipRect = clipRect;\n+        adjustedClipRect.adjustRadii();\n+        context.clipRoundedRect(adjustedClipRect);\n@@ -441,24 +443,1 @@\n-    \/\/ We create a rounded rect for each of the corners and clip it, while making sure we clip opposing corners together.\n-    if (!clipRect.radii().topLeft().isEmpty() || !clipRect.radii().bottomRight().isEmpty()) {\n-        FloatRect topCorner(clipRect.rect().x(), clipRect.rect().y(), rect.maxX() - clipRect.rect().x(), rect.maxY() - clipRect.rect().y());\n-        FloatRoundedRect::Radii topCornerRadii;\n-        topCornerRadii.setTopLeft(clipRect.radii().topLeft());\n-        context.clipRoundedRect(FloatRoundedRect(topCorner, topCornerRadii));\n-\n-        FloatRect bottomCorner(rect.x(), rect.y(), clipRect.rect().maxX() - rect.x(), clipRect.rect().maxY() - rect.y());\n-        FloatRoundedRect::Radii bottomCornerRadii;\n-        bottomCornerRadii.setBottomRight(clipRect.radii().bottomRight());\n-        context.clipRoundedRect(FloatRoundedRect(bottomCorner, bottomCornerRadii));\n-    }\n-\n-    if (!clipRect.radii().topRight().isEmpty() || !clipRect.radii().bottomLeft().isEmpty()) {\n-        FloatRect topCorner(rect.x(), clipRect.rect().y(), clipRect.rect().maxX() - rect.x(), rect.maxY() - clipRect.rect().y());\n-        FloatRoundedRect::Radii topCornerRadii;\n-        topCornerRadii.setTopRight(clipRect.radii().topRight());\n-        context.clipRoundedRect(FloatRoundedRect(topCorner, topCornerRadii));\n-\n-        FloatRect bottomCorner(clipRect.rect().x(), rect.y(), rect.maxX() - clipRect.rect().x(), clipRect.rect().maxY() - rect.y());\n-        FloatRoundedRect::Radii bottomCornerRadii;\n-        bottomCornerRadii.setBottomLeft(clipRect.radii().bottomLeft());\n-        context.clipRoundedRect(FloatRoundedRect(bottomCorner, bottomCornerRadii));\n-    }\n+    context.clipRoundedRect(clipRect);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/BackgroundPainter.cpp","additions":8,"deletions":29,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-    static void clipRoundedInnerRect(GraphicsContext&, const FloatRect&, const FloatRoundedRect& clipRect);\n+    static void clipRoundedInnerRect(GraphicsContext&, const FloatRoundedRect& clipRect);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/BackgroundPainter.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -832,1 +832,1 @@\n-    if (shouldClearOverridingContainingBlockContentSizeForChild(child, GridTrackSizingDirection::ForRows)) {\n+    if (GridLayoutFunctions::overridingContainingBlockContentSizeForChild(child, GridTrackSizingDirection::ForRows) && shouldClearOverridingContainingBlockContentSizeForChild(child, GridTrackSizingDirection::ForRows)) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/GridTrackSizingAlgorithm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    , m_timer(*this, &ImageQualityController::highQualityRepaintTimerFired)\n+    , m_timer(*this, &ImageQualityController::highQualityRepaintTimerFired, lowQualityTimeThreshold)\n@@ -98,1 +98,1 @@\n-    m_timer.startOneShot(lowQualityTimeThreshold);\n+    m_timer.restart();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/ImageQualityController.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    Timer m_timer;\n+    DeferrableOneShotTimer m_timer;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/ImageQualityController.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -850,2 +850,1 @@\n-    applyVisualEffectOverflow(box);\n-    return box;\n+    return applyVisualEffectOverflow(box);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderBox.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -90,0 +90,10 @@\n+\n+    auto hasDifferentTrackSizes = [&newStyle, &oldStyle](GridTrackSizingDirection direction) {\n+        return newStyle.gridTrackSizes(direction) != oldStyle->gridTrackSizes(direction);\n+    };\n+\n+    if (hasDifferentTrackSizes(GridTrackSizingDirection::ForColumns) || hasDifferentTrackSizes(GridTrackSizingDirection::ForRows)) {\n+        for (auto& child : childrenOfType<RenderBox>(*this))\n+            child.setChildNeedsLayout();\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderGrid.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (C) 2014 Google Inc. All rights reserved.\n+ * Copyright (C) 2013-2014 Google Inc. All rights reserved.\n@@ -536,4 +536,0 @@\n-    \/\/ Mark that we are about to lose our layer. This makes render tree\n-    \/\/ walks ignore this layer while we're removing it.\n-    renderer().setHasLayer(false);\n-\n@@ -2191,1 +2187,1 @@\n-static LayoutRect transparencyClipBox(const RenderLayer&, const RenderLayer* rootLayer, TransparencyClipBoxBehavior, TransparencyClipBoxMode, OptionSet<PaintBehavior> = { });\n+static LayoutRect transparencyClipBox(const RenderLayer&, const RenderLayer* rootLayer, TransparencyClipBoxBehavior, TransparencyClipBoxMode, OptionSet<PaintBehavior> = { }, const LayoutRect* paintDirtyRect = nullptr);\n@@ -2194,1 +2190,1 @@\n-    TransparencyClipBoxBehavior transparencyBehavior, OptionSet<PaintBehavior> paintBehavior)\n+    TransparencyClipBoxBehavior transparencyBehavior, OptionSet<PaintBehavior> paintBehavior, const LayoutRect* paintDirtyRect)\n@@ -2203,1 +2199,1 @@\n-                clipRect.unite(transparencyClipBox(*curr, rootLayer, transparencyBehavior, DescendantsOfTransparencyClipBox, paintBehavior));\n+                clipRect.unite(transparencyClipBox(*curr, rootLayer, transparencyBehavior, DescendantsOfTransparencyClipBox, paintBehavior, paintDirtyRect));\n@@ -2220,1 +2216,1 @@\n-    TransparencyClipBoxMode transparencyMode, OptionSet<PaintBehavior> paintBehavior)\n+    TransparencyClipBoxMode transparencyMode, OptionSet<PaintBehavior> paintBehavior, const LayoutRect* paintDirtyRect)\n@@ -2242,1 +2238,1 @@\n-        expandClipRectForDescendantsAndReflection(clipRect, layer, &layer, transparencyBehavior, paintBehavior);\n+        expandClipRectForDescendantsAndReflection(clipRect, layer, &layer, transparencyBehavior, paintBehavior, paintDirtyRect);\n@@ -2245,1 +2241,3 @@\n-        if (!paginationLayer)\n+        if (!paginationLayer) {\n+            if (paintDirtyRect)\n+                result = intersection(result, *paintDirtyRect);\n@@ -2247,0 +2245,1 @@\n+        }\n@@ -2254,0 +2253,2 @@\n+        if (paintDirtyRect)\n+            result = intersection(result, *paintDirtyRect);\n@@ -2260,1 +2261,1 @@\n-    expandClipRectForDescendantsAndReflection(clipRect, layer, rootLayer, transparencyBehavior, paintBehavior);\n+    expandClipRectForDescendantsAndReflection(clipRect, layer, rootLayer, transparencyBehavior, paintBehavior, paintDirtyRect);\n@@ -2263,2 +2264,2 @@\n-    return clipRect;\n-}\n+    if (paintDirtyRect)\n+        clipRect = intersection(clipRect, *paintDirtyRect);\n@@ -2266,3 +2267,1 @@\n-static LayoutRect paintingExtent(const RenderLayer& currentLayer, const RenderLayer* rootLayer, const LayoutRect& paintDirtyRect, OptionSet<PaintBehavior> paintBehavior)\n-{\n-    return intersection(transparencyClipBox(currentLayer, rootLayer, PaintingTransparencyClipBox, RootOfTransparencyClipBox, paintBehavior), paintDirtyRect);\n+    return clipRect;\n@@ -2289,1 +2288,1 @@\n-        LayoutRect adjustedClipRect = paintingExtent(*this, paintingInfo.rootLayer, dirtyRect, paintingInfo.paintBehavior);\n+        LayoutRect adjustedClipRect = transparencyClipBox(*this, paintingInfo.rootLayer, PaintingTransparencyClipBox, RootOfTransparencyClipBox, paintingInfo.paintBehavior, &dirtyRect);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderLayer.cpp","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -1585,1 +1585,1 @@\n-    LOG_WITH_STREAM(Compositing, stream << TextStream::Repeat(depth * 2, ' ') << &layer << \" updateBackingSharingAfterDescendantTraversal for layer - is composited \" << layer.isComposited());\n+    LOG_WITH_STREAM(Compositing, stream << TextStream::Repeat(depth * 2, ' ') << &layer << \" updateBackingSharingAfterDescendantTraversal for layer - is composited \" << layer.isComposited() << \" has composited descendant \" << layer.hasCompositingDescendant());\n@@ -1612,0 +1612,2 @@\n+    bool canBeBackingProvider = !layer.hasCompositingDescendant();\n+    if (canBeBackingProvider) {\n@@ -1625,0 +1627,1 @@\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderLayerCompositor.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n- * Copyright (C) 2005-2023 Apple Inc. All rights reserved.\n+ * Copyright (C) 2005-2024 Apple Inc. All rights reserved.\n@@ -96,2 +96,0 @@\n-    if (hasLayer()) {\n-        setHasLayer(false);\n@@ -99,1 +97,0 @@\n-    }\n@@ -115,2 +112,1 @@\n-    ASSERT(!hasLayer());\n-    ASSERT(m_layer);\n+    setHasLayer(false);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderLayerModelObject.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -206,0 +206,3 @@\n+    if (!hasValidFragmentInfo())\n+        return;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderMultiColumnFlow.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -289,1 +289,1 @@\n-            BackgroundPainter::clipRoundedInnerRect(paintInfo.context(), paintRect, pixelSnappedRoundedRect);\n+            BackgroundPainter::clipRoundedInnerRect(paintInfo.context(), pixelSnappedRoundedRect);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderReplaced.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -331,1 +331,1 @@\n-        BackgroundPainter::clipRoundedInnerRect(paintInfo.context(), borderRect, roundedInnerRect);\n+        BackgroundPainter::clipRoundedInnerRect(paintInfo.context(), roundedInnerRect);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderWidget.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -143,2 +143,4 @@\n-    } else\n-        intermediateTuples = tuples;\n+    } else {\n+        \/\/ XXX(274780): A plain assignment or move here makes Clang generate bad code in LTO builds.\n+        intermediateTuples.swap(tuples);\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/TextDecorationPainter.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -639,0 +639,2 @@\n+BasicShapePath::~BasicShapePath() = default;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/style\/BasicShapes.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -306,0 +306,2 @@\n+    virtual ~BasicShapePath();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/style\/BasicShapes.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -149,0 +149,1 @@\n+enum class GridTrackSizingDirection : uint8_t;\n@@ -769,0 +770,1 @@\n+    inline const Vector<GridTrackSize>& gridTrackSizes(GridTrackSizingDirection) const;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/style\/RenderStyle.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"GridPositionsResolver.h\"\n@@ -245,0 +246,1 @@\n+inline const Vector<GridTrackSize>& RenderStyle::gridTrackSizes(GridTrackSizingDirection direction) const { return direction == GridTrackSizingDirection::ForRows ? m_nonInheritedData->rareData->grid->gridRowTrackSizes() : m_nonInheritedData->rareData->grid->gridColumnTrackSizes(); }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/style\/RenderStyleInlines.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -249,1 +249,2 @@\n-    if (!affectsRenderedSubtree(element, *resolvedStyle.style))\n+    if (!affectsRenderedSubtree(element, *resolvedStyle.style)) {\n+        styleable.setLastStyleChangeEventStyle(nullptr);\n@@ -251,0 +252,1 @@\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/style\/StyleTreeResolver.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -288,1 +288,1 @@\n-        auto& promise = JSExecState::loadModule(globalObject, sourceCode.jsSourceCode(), JSC::JSScriptFetcher::create(vm, { &scriptFetcher }));\n+        auto* promise = JSExecState::loadModule(globalObject, sourceCode.jsSourceCode(), JSC::JSScriptFetcher::create(vm, { &scriptFetcher }));\n@@ -368,1 +368,1 @@\n-        promise.then(&globalObject, &fulfillHandler, &rejectHandler);\n+        promise->then(&globalObject, &fulfillHandler, &rejectHandler);\n@@ -445,2 +445,0 @@\n-    {\n-        auto& promise = JSExecState::loadModule(globalObject, moduleURL, JSC::JSScriptFetchParameters::create(vm, scriptFetcher->parameters()), JSC::JSScriptFetcher::create(vm, { scriptFetcher.ptr() }));\n@@ -448,0 +446,2 @@\n+    auto* promise = JSExecState::loadModule(globalObject, moduleURL, JSC::JSScriptFetchParameters::create(vm, scriptFetcher->parameters()), JSC::JSScriptFetcher::create(vm, { scriptFetcher.ptr() }));\n+    if (LIKELY(promise)) {\n@@ -540,1 +540,1 @@\n-        promise.then(&globalObject, &fulfillHandler, &rejectHandler);\n+        promise->then(&globalObject, &fulfillHandler, &rejectHandler);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerOrWorkletScriptController.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -332,1 +332,1 @@\n-    thread().runLoop().postTask([this, protectedThis = Ref { *this }, message = WTFMove(message), sourceData = WTFMove(sourceData)](auto&) mutable {\n+    thread().runLoop().postTask([this, protectedThis = Ref { *this }, message = WTFMove(message), sourceData = crossThreadCopy(WTFMove(sourceData))](auto&) mutable {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/service\/context\/ServiceWorkerThreadProxy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-#ifndef NDEBUG\n+#if ASSERT_ENABLED\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/XPathNodeSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"HistoryItemClientJava.h\"\n+\n+namespace WebCore {\n+\n+HistoryItemClientJava& HistoryItemClientJava::singleton()\n+{\n+    static NeverDestroyed<Ref<HistoryItemClientJava>> client { adoptRef(*new HistoryItemClientJava) };\n+    return client.get().get();\n+}\n+void historyItemChangedImpl(const HistoryItem& item) {\n+    JNIEnv* env = WTF::GetJavaEnv();\n+    static jmethodID notifyItemChangedMID = initMethod(env, getJEntryClass(), \"notifyItemChanged\", \"()V\");\n+    if (item.hostObject()) {\n+        env->CallVoidMethod(item.hostObject(), notifyItemChangedMID);\n+        WTF::CheckAndClearException(env);\n+    }\n+}\n+void HistoryItemClientJava::historyItemChanged(const WebCore::HistoryItem& item)\n+{\n+   historyItemChangedImpl(item);\n+}\n+}\/\/Webcore\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebKitLegacy\/java\/WebCoreSupport\/HistoryItemClientJava.cpp","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#pragma once\n+\n+#include <WebCore\/HistoryItem.h>\n+#include <WebCore\/PlatformJavaClasses.h>\n+\n+namespace WebCore {\n+class HistoryItemClientJava final : public HistoryItemClient {\n+public:\n+    static HistoryItemClientJava& singleton();\n+private:\n+    HistoryItemClientJava() = default;\n+    void historyItemChanged(const WebCore::HistoryItem&) final;\n+};\n+} \/\/ namespace WebCore\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebKitLegacy\/java\/WebCoreSupport\/HistoryItemClientJava.h","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -107,0 +107,5 @@\n+    # Split debug information in \".debug_types\" \/ \".debug_info\" sections - this leads\n+    # to a smaller overall size of the debug information, and avoids linker relocation\n+    # errors on e.g. aarch64 (relocation R_AARCH64_ABS32 out of range: 4312197985 is not in [-2147483648, 4294967295])\n+    WEBKIT_PREPEND_GLOBAL_COMPILER_FLAGS(-fdebug-types-section)\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/cmake\/WebKitCompilerFlags.cmake","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}