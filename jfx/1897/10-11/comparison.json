{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,0 @@\n-import test.javafx.util.OutputRedirect;\n@@ -221,4 +220,0 @@\n-        OutputRedirect.suppressStderr();\n-        try {\n-            Util.runAndWait(() -> {\n-                tmpScene = new Scene(new Group(), 200, 100);\n@@ -226,17 +221,2 @@\n-                \/\/ NOTE: cannot use a lambda expression for the following callback\n-                Callback<SnapshotResult, Void> cb = new Callback() {\n-                    @Override\n-                    public Object call(Object param) {\n-                        assertNotNull(param);\n-\n-                        latch.countDown();\n-                        \/\/ The following will cause a ClassCastException warning\n-                        \/\/ message to be printed.\n-                        return \"\";\n-                    }\n-                };\n-\n-                tmpScene.snapshot(cb, null);\n-                Util.sleep(SLEEP_TIME);\n-                assertEquals(1, latch.getCount());\n-            });\n+        Util.runAndWait(() -> {\n+            tmpScene = new Scene(new Group(), 200, 100);\n@@ -244,3 +224,9 @@\n-            try {\n-                if (!latch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {\n-                    fail(\"Timeout waiting for snapshot callback\");\n+            \/\/ NOTE: cannot use a lambda expression for the following callback\n+            Callback<SnapshotResult, Void> cb = new Callback() {\n+                @Override public Object call(Object param) {\n+                    assertNotNull(param);\n+\n+                    latch.countDown();\n+                    \/\/ The following will cause a ClassCastException warning\n+                    \/\/ message to be printed.\n+                    return \"\";\n@@ -248,3 +234,1 @@\n-            } catch (InterruptedException ex) {\n-                fail(ex);\n-            }\n+            };\n@@ -252,3 +236,12 @@\n-            assertEquals(0, latch.getCount());\n-        } finally {\n-            OutputRedirect.checkAndRestoreStderr(ClassCastException.class);\n+            tmpScene.snapshot(cb, null);\n+            Util.sleep(SLEEP_TIME);\n+            assertEquals(1, latch.getCount());\n+            System.err.println(\"testBadSceneCallback1: a ClassCastException warning message is expected here\");\n+        });\n+\n+        try {\n+            if (!latch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {\n+                fail(\"Timeout waiting for snapshot callback\");\n+            }\n+        } catch (InterruptedException ex) {\n+            fail(ex);\n@@ -256,0 +249,2 @@\n+\n+        assertEquals(0, latch.getCount());\n@@ -263,4 +258,0 @@\n-        OutputRedirect.suppressStderr();\n-        try {\n-            Util.runAndWait(() -> {\n-                tmpScene = new Scene(new Group(), 200, 100);\n@@ -268,10 +259,2 @@\n-                Callback cb = (Callback<String, Integer>)param -> {\n-                    \/\/ Should not get here\n-                    latch.countDown();\n-                    throw new AssertionError(\"Should never get here\");\n-                };\n-\n-                tmpScene.snapshot(cb, null);\n-                Util.sleep(SLEEP_TIME);\n-                assertEquals(1, latch.getCount());\n-            });\n+        Util.runAndWait(() -> {\n+            tmpScene = new Scene(new Group(), 200, 100);\n@@ -279,7 +262,5 @@\n-            try {\n-                if (latch.await(SHORT_TIMEOUT, TimeUnit.MILLISECONDS)) {\n-                    fail(\"Snapshot callback unexpectedly called\");\n-                }\n-            } catch (InterruptedException ex) {\n-                fail(ex);\n-            }\n+            Callback cb = (Callback<String, Integer>) param -> {\n+                \/\/ Should not get here\n+                latch.countDown();\n+                throw new AssertionError(\"Should never get here\");\n+            };\n@@ -287,0 +268,2 @@\n+            tmpScene.snapshot(cb, null);\n+            Util.sleep(SLEEP_TIME);\n@@ -288,2 +271,9 @@\n-        } finally {\n-            OutputRedirect.checkAndRestoreStderr(ClassCastException.class);\n+            System.err.println(\"testBadSceneCallback2: a ClassCastException warning message is expected here\");\n+        });\n+\n+        try {\n+            if (latch.await(SHORT_TIMEOUT, TimeUnit.MILLISECONDS)) {\n+                fail(\"Snapshot callback unexpectedly called\");\n+            }\n+        } catch (InterruptedException ex) {\n+            fail(ex);\n@@ -291,0 +281,2 @@\n+\n+        assertEquals(1, latch.getCount());\n@@ -350,4 +342,0 @@\n-        OutputRedirect.suppressStderr();\n-        try {\n-            Util.runAndWait(() -> {\n-                tmpNode = new Rectangle(10, 10);\n@@ -355,17 +343,2 @@\n-                \/\/ NOTE: cannot use a lambda expression for the following callback\n-                Callback<SnapshotResult, Void> cb = new Callback() {\n-                    @Override\n-                    public Object call(Object param) {\n-                        assertNotNull(param);\n-\n-                        latch.countDown();\n-                        \/\/ The following will cause a ClassCastException warning\n-                        \/\/ message to be printed.\n-                        return \"\";\n-                    }\n-                };\n-\n-                tmpNode.snapshot(cb, null, null);\n-                Util.sleep(SLEEP_TIME);\n-                assertEquals(1, latch.getCount());\n-            });\n+        Util.runAndWait(() -> {\n+            tmpNode = new Rectangle(10, 10);\n@@ -373,3 +346,9 @@\n-            try {\n-                if (!latch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {\n-                    fail(\"Timeout waiting for snapshot callback\");\n+            \/\/ NOTE: cannot use a lambda expression for the following callback\n+            Callback<SnapshotResult, Void> cb = new Callback() {\n+                @Override public Object call(Object param) {\n+                    assertNotNull(param);\n+\n+                    latch.countDown();\n+                    \/\/ The following will cause a ClassCastException warning\n+                    \/\/ message to be printed.\n+                    return \"\";\n@@ -377,3 +356,1 @@\n-            } catch (InterruptedException ex) {\n-                fail(ex);\n-            }\n+            };\n@@ -381,3 +358,12 @@\n-            assertEquals(0, latch.getCount());\n-        } finally {\n-            OutputRedirect.checkAndRestoreStderr(ClassCastException.class);\n+            tmpNode.snapshot(cb, null, null);\n+            Util.sleep(SLEEP_TIME);\n+            assertEquals(1, latch.getCount());\n+            System.err.println(\"testBadNodeCallback1: a ClassCastException warning message is expected here\");\n+        });\n+\n+        try {\n+            if (!latch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {\n+                fail(\"Timeout waiting for snapshot callback\");\n+            }\n+        } catch (InterruptedException ex) {\n+            fail(ex);\n@@ -385,0 +371,2 @@\n+\n+        assertEquals(0, latch.getCount());\n@@ -392,4 +380,0 @@\n-        OutputRedirect.suppressStderr();\n-        try {\n-            Util.runAndWait(() -> {\n-                tmpNode = new Rectangle(10, 10);\n@@ -397,10 +381,2 @@\n-                Callback cb = (Callback<String, Integer>)param -> {\n-                    \/\/ Should not get here\n-                    latch.countDown();\n-                    throw new AssertionError(\"Should never get here\");\n-                };\n-\n-                tmpNode.snapshot(cb, null, null);\n-                Util.sleep(SLEEP_TIME);\n-                assertEquals(1, latch.getCount());\n-            });\n+        Util.runAndWait(() -> {\n+            tmpNode = new Rectangle(10, 10);\n@@ -408,7 +384,5 @@\n-            try {\n-                if (latch.await(SHORT_TIMEOUT, TimeUnit.MILLISECONDS)) {\n-                    fail(\"Snapshot callback unexpectedly called\");\n-                }\n-            } catch (InterruptedException ex) {\n-                fail(ex);\n-            }\n+            Callback cb = (Callback<String, Integer>) param -> {\n+                \/\/ Should not get here\n+                latch.countDown();\n+                throw new AssertionError(\"Should never get here\");\n+            };\n@@ -416,0 +390,2 @@\n+            tmpNode.snapshot(cb, null, null);\n+            Util.sleep(SLEEP_TIME);\n@@ -417,2 +393,9 @@\n-        } finally {\n-            OutputRedirect.checkAndRestoreStderr(ClassCastException.class);\n+            System.err.println(\"testBadNodeCallback2: a ClassCastException warning message is expected here\");\n+        });\n+\n+        try {\n+            if (latch.await(SHORT_TIMEOUT, TimeUnit.MILLISECONDS)) {\n+                fail(\"Snapshot callback unexpectedly called\");\n+            }\n+        } catch (InterruptedException ex) {\n+            fail(ex);\n@@ -420,0 +403,2 @@\n+\n+        assertEquals(1, latch.getCount());\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/Snapshot1Test.java","additions":93,"deletions":108,"binary":false,"changes":201,"status":"modified"}]}