{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.io.IOException;\n@@ -48,0 +49,1 @@\n+import com.sun.jfx.incubator.scene.control.richtext.StringBuilderStyledOutput;\n@@ -420,1 +422,0 @@\n-        \/\/ TODO or use save(DataFormat, Writer) ?\n@@ -422,6 +423,11 @@\n-        StringBuilder sb = new StringBuilder(4096);\n-        int sz = m.size();\n-        for(int i=0; i<sz; i++) {\n-            String s = m.getPlainText(i);\n-            sb.append(s);\n-            sb.append('\\n');\n+        if (m == null) {\n+            return null;\n+        }\n+        TextPos end = m.getDocumentEnd();\n+        try (StringBuilderStyledOutput out = new StringBuilderStyledOutput()) {\n+            out.setLineSeparator(\"\\n\");\n+            m.export(TextPos.ZERO, end, out);\n+            return out.toString();\n+        } catch (IOException e) {\n+            \/\/ should not happen\n+            throw new RuntimeException(e);\n@@ -429,1 +435,0 @@\n-        return sb.toString();\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/CodeArea.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -553,0 +553,1 @@\n+        int len;\n@@ -558,1 +559,1 @@\n-            int len = getParagraphLength(ix);\n+            len = getParagraphLength(ix);\n@@ -562,1 +563,0 @@\n-            return TextPos.ofLeading(ix, len);\n@@ -568,2 +568,1 @@\n-                int len = getParagraphLength(ix);\n-                return TextPos.ofLeading(ix, len);\n+                len = getParagraphLength(ix);\n@@ -572,0 +571,7 @@\n+\n+        int cix = len - 1;\n+        if (cix < 0) {\n+            return TextPos.ofLeading(ix, len);\n+        } else {\n+            return new TextPos(ix, len, cix, false);\n+        }\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/model\/StyledTextModel.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+--add-exports javafx.graphics\/com.sun.javafx.font=ALL-UNNAMED\n","filename":"modules\/jfx.incubator.richtext\/src\/test\/addExports","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.com.sun.jfx.incubator.scene.control.richtext;\n-\n-import org.junit.jupiter.api.Test;\n-import com.sun.jfx.incubator.scene.control.richtext.VFlow;\n-import jfx.incubator.scene.control.richtext.RichTextArea;\n-import jfx.incubator.scene.control.richtext.RichTextAreaShim;\n-\n-\/**\n- * Tests RichTextArea control.\n- *\/\n-public class TestRichTextArea {\n-    \/**\n-     * Tests the shim.\n-     *\/\n-    \/\/ TODO remove once a real test which needs the shim is added.\n-    @Test\n-    public void testShim() {\n-        RichTextArea t = new RichTextArea();\n-        VFlow f = RichTextAreaShim.vflow(t);\n-    }\n-}\n","filename":"modules\/jfx.incubator.richtext\/src\/test\/java\/test\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/TestRichTextArea.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -35,0 +36,1 @@\n+import jfx.incubator.scene.control.richtext.skin.CodeAreaSkin;\n@@ -40,0 +42,2 @@\n+    private CodeArea control;\n+\n@@ -43,0 +47,2 @@\n+        control = new CodeArea();\n+        control.setSkin(new CodeAreaSkin(control));\n@@ -46,1 +52,1 @@\n-    public void cleanup() {\n+    public void afterEach() {\n@@ -64,0 +70,19 @@\n+    @Test\n+    public void getText() {\n+        control.setText(\"123\");\n+        String s = control.getText();\n+        assertEquals(\"123\", s);\n+\n+        control.setText(null);\n+        s = control.getText();\n+        assertEquals(\"\", s);\n+\n+        control.setText(\"1\\n2\\n3\\n4\");\n+        s = control.getText();\n+        assertEquals(\"1\\n2\\n3\\n4\", s);\n+\n+        control.setText(\"1\\r\\n2\\r\\n3\\r\\n4\");\n+        s = control.getText();\n+        assertEquals(\"1\\n2\\n3\\n4\", s);\n+    }\n+\n","filename":"modules\/jfx.incubator.richtext\/src\/test\/java\/test\/jfx\/incubator\/scene\/control\/richtext\/CodeAreaTest.java","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.jfx.incubator.scene.control.richtext;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import com.sun.jfx.incubator.scene.control.richtext.VFlow;\n+import jfx.incubator.scene.control.richtext.RichTextArea;\n+import jfx.incubator.scene.control.richtext.RichTextAreaShim;\n+import jfx.incubator.scene.control.richtext.SelectionSegment;\n+import jfx.incubator.scene.control.richtext.TextPos;\n+import jfx.incubator.scene.control.richtext.model.StyleAttributeMap;\n+import jfx.incubator.scene.control.richtext.skin.RichTextAreaSkin;\n+\n+\/**\n+ * Tests RichTextArea control.\n+ *\/\n+public class RichTextAreaTest {\n+    private RichTextArea control;\n+\n+    @BeforeEach\n+    public void beforeEach() {\n+        control = new RichTextArea();\n+        control.setSkin(new RichTextAreaSkin(control));\n+    }\n+\n+    @AfterEach\n+    public void afterEach() {\n+    }\n+\n+    @Test\n+    public void execute() {\n+        control.appendText(\"a\");\n+        control.execute(RichTextArea.Tag.SELECT_ALL);\n+\n+        SelectionSegment sel = control.getSelection();\n+        TextPos end = control.getDocumentEnd();\n+        assertNotNull(end);\n+        assertEquals(TextPos.ZERO, sel.getMin());\n+        assertEquals(end, sel.getMax());\n+    }\n+\n+    @Test\n+    public void selectAll() {\n+        control.appendText(\"a\");\n+        control.selectAll();\n+\n+        SelectionSegment sel = control.getSelection();\n+        TextPos end = control.getDocumentEnd();\n+        assertNotNull(end);\n+        assertEquals(TextPos.ZERO, sel.getMin());\n+        assertEquals(end, sel.getMax());\n+    }\n+\n+    \/**\n+     * Tests the shim.\n+     *\/\n+    \/\/ TODO remove once a real test which needs the shim is added.\n+    @Test\n+    public void testShim() {\n+        RichTextArea t = new RichTextArea();\n+        VFlow f = RichTextAreaShim.vflow(t);\n+    }\n+}\n","filename":"modules\/jfx.incubator.richtext\/src\/test\/java\/test\/jfx\/incubator\/scene\/control\/richtext\/RichTextAreaTest.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -38,1 +39,0 @@\n-import jfx.incubator.scene.control.richtext.model.StyleAttribute;\n@@ -256,0 +256,19 @@\n+\n+    private RichTextModel createModel(String text) {\n+        RichTextModel m = new RichTextModel();\n+        m.replace(null, TextPos.ZERO, TextPos.ZERO, text, false);\n+        return m;\n+    }\n+\n+    @Test\n+    public void clamp() {\n+        RichTextModel m = createModel(\"1\\n2222\\n\");\n+        assertEquals(TextPos.ofLeading(0, 0), m.clamp(TextPos.ofLeading(0, 0)));\n+        assertEquals(new TextPos(0, 1, 0, false), m.clamp(TextPos.ofLeading(0, 100)));\n+\n+        assertEquals(TextPos.ofLeading(1, 0), m.clamp(TextPos.ofLeading(1, 0)));\n+        assertEquals(TextPos.ofLeading(1, 1), m.clamp(TextPos.ofLeading(1, 1)));\n+        assertEquals(new TextPos(1, 4, 3, false), m.clamp(TextPos.ofLeading(1, 100)));\n+\n+        assertEquals(TextPos.ofLeading(2, 0), m.clamp(TextPos.ofLeading(2, 100)));\n+    }\n","filename":"modules\/jfx.incubator.richtext\/src\/test\/java\/test\/jfx\/incubator\/scene\/control\/richtext\/model\/TestRichTextModel.java","additions":21,"deletions":2,"binary":false,"changes":23,"status":"modified"}]}