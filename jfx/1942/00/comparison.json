{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -520,2 +520,7 @@\n-        Color c = a.getTextColor();\n-        return c == null ? Color.BLACK : c;\n+        if (a != null) {\n+            Color c = a.getTextColor();\n+            if (c != null) {\n+                return c;\n+            }\n+        }\n+        return Color.BLACK;\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/RtfStyledOutput.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -158,18 +158,0 @@\n-    \/\/ for use by SimpleReadOnlyStyledModel\n-    StyleAttributeMap getStyleAttributeMap(StyleResolver resolver, int offset) {\n-        int off = 0;\n-        List<StyledSegment> segments = getSegments();\n-        if (segments != null) {\n-            int sz = segments.size();\n-            for (int i = 0; i < sz; i++) {\n-                StyledSegment seg = segments.get(i);\n-                int len = seg.getTextLength();\n-                if (offset < (off + len) || (i == sz - 1)) {\n-                    return seg.getStyleAttributeMap(resolver);\n-                }\n-                off += len;\n-            }\n-        }\n-        return StyleAttributeMap.EMPTY;\n-    }\n-\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/model\/RichParagraph.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.Set;\n@@ -36,0 +37,3 @@\n+import javafx.scene.input.Clipboard;\n+import javafx.scene.input.DataFormat;\n+import javafx.scene.paint.Color;\n@@ -42,0 +46,2 @@\n+import jfx.incubator.scene.control.richtext.SyntaxDecorator;\n+import jfx.incubator.scene.control.richtext.TextPos;\n@@ -43,0 +49,1 @@\n+import jfx.incubator.scene.control.richtext.model.RichParagraph;\n@@ -44,0 +51,1 @@\n+import jfx.incubator.scene.control.richtext.model.StyleAttributeMap;\n@@ -45,0 +53,1 @@\n+import test.jfx.incubator.scene.control.richtext.support.RTUtil;\n@@ -146,0 +155,56 @@\n+    @Test\n+    public void copy() {\n+        RTUtil.copyToClipboard(\"yo\");\n+        control.appendText(\"123\");\n+        control.selectAll();\n+        control.copy();\n+        assertEquals(\"123\", Clipboard.getSystemClipboard().getString());\n+\n+        control.select(TextPos.ZERO, TextPos.ofLeading(0, 1));\n+        control.copy();\n+        assertEquals(\"1\", Clipboard.getSystemClipboard().getString());\n+\n+        control.select(TextPos.ofLeading(0, 1), TextPos.ofLeading(0, 2));\n+        control.copy();\n+        assertEquals(\"2\", Clipboard.getSystemClipboard().getString());\n+\n+        control.select(TextPos.ofLeading(0, 2), TextPos.ofLeading(0, 3));\n+        control.copy();\n+        assertEquals(\"3\", Clipboard.getSystemClipboard().getString());\n+\n+        control.appendText(\"\\n4\");\n+        control.select(new TextPos(0, 3, 2, false), control.getDocumentEnd());\n+        control.copy();\n+        String nl = System.getProperty(\"line.separator\");\n+        assertEquals(nl + \"4\", Clipboard.getSystemClipboard().getString());\n+    }\n+\n+    @Test\n+    public void copyWithSyntaxDecorator() {\n+        control.appendText(\"123\");\n+        control.setSyntaxDecorator(new SyntaxDecorator() {\n+            private static final StyleAttributeMap DIGITS = StyleAttributeMap.builder().setTextColor(Color.MAGENTA).build();\n+\n+            @Override\n+            public RichParagraph createRichParagraph(CodeTextModel model, int index) {\n+                String text = model.getPlainText(index);\n+                RichParagraph.Builder b = RichParagraph.builder();\n+                int len = text.length();\n+                b.addSegment(text, 0, 1, null);\n+                b.addSegment(text, 1, 2, DIGITS);\n+                b.addSegment(text, 2, len, null);\n+                return b.build();\n+            }\n+\n+            @Override\n+            public void handleChange(CodeTextModel m, TextPos start, TextPos end, int charsTop, int linesAdded, int charsBottom) {\n+            }\n+        });\n+        control.select(TextPos.ZERO);\n+        control.selectParagraph();\n+        control.copy();\n+        Clipboard cb = Clipboard.getSystemClipboard();\n+        assertEquals(\"123\", cb.getString());\n+        assertEquals(Set.of(DataFormat.PLAIN_TEXT, DataFormat.HTML, DataFormat.RTF), cb.getContentTypes());\n+    }\n+\n","filename":"modules\/jfx.incubator.richtext\/src\/test\/java\/test\/jfx\/incubator\/scene\/control\/richtext\/CodeAreaTest.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"modified"}]}