{"files":[{"patch":"@@ -213,1 +213,0 @@\n-     * @param forTextFlow Indicates if the hit info is requested for TextFlow or Text node. {@code true} for TextFlow and {@code false} for Text node.\n@@ -216,1 +215,1 @@\n-    public Hit getHitInfo(float x, float y, String text, int textRunStart, int curRunStart, boolean forTextFlow);\n+    public Hit getHitInfo(float x, float y, String text, int textRunStart, int curRunStart);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/text\/TextLayout.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -424,1 +424,1 @@\n-    public Hit getHitInfo(float x, float y, String text, int textRunStart, int curRunStart, boolean forTextFlow) {\n+    public Hit getHitInfo(float x, float y, String text, int textRunStart, int curRunStart) {\n@@ -427,0 +427,1 @@\n+        boolean forTextFlow = spans != null && text == null;\n@@ -435,1 +436,1 @@\n-        int lineIndex = getLineIndex(y, text, curRunStart);\n+        int lineIndex = getLineIndex(y, forTextFlow, curRunStart);\n@@ -439,2 +440,12 @@\n-        } else {\n-            if (isMirrored && (forTextFlow || spans == null)) {\n+            return new Hit(charIndex, insertionIndex, leading);\n+        }\n+\n+        TextLine line = lines[lineIndex];\n+        TextRun[] runs = line.getRuns();\n+        RectBounds bounds = line.getBounds();\n+        TextRun run = null;\n+        \/\/TODO binary search\n+        if (forTextFlow || spans == null) {\n+            \/* This code branch is used to calculate hit info of Text node\n+             * which are not embedded in TextFlow and hit info requested on TextFlow. *\/\n+            if (isMirrored) {\n@@ -442,15 +453,9 @@\n-            }\n-            TextLine line = lines[lineIndex];\n-            TextRun[] runs = line.getRuns();\n-            RectBounds bounds = line.getBounds();\n-            TextRun run = null;\n-            \/\/TODO binary search\n-            if (text == null || spans == null) {\n-                \/* This code branch is used to calculate hit info of Text node\n-                   which are not embedded in TextFlow and hit info requested on TextFlow. *\/\n-                if (isMirrored) {\n-                    int runIndex = -1;\n-                    for (int i = runs.length - 1; i >= 0; i--) {\n-                        run = runs[i];\n-                        if (x < run.getWidth() && (forTextFlow || (run.getStart() == curRunStart))) {\n-                            runIndex = i;\n+                int runIndex = -1;\n+                for (int i = runs.length - 1; i >= 0; i--) {\n+                    run = runs[i];\n+                    if (x < run.getWidth() && (forTextFlow || (run.getStart() == curRunStart))) {\n+                        runIndex = i;\n+                        break;\n+                    }\n+                    if (i > 0) {\n+                        if (runs[i - 1].isLinebreak()) {\n@@ -459,6 +464,1 @@\n-                        if (i > 0) {\n-                            if (runs[i - 1].isLinebreak()) {\n-                                break;\n-                            }\n-                            x -= run.getWidth();\n-                        }\n+                        x -= run.getWidth();\n@@ -466,2 +466,10 @@\n-                    for (int i = 0; i < runIndex; i++) {\n-                        xHitPos -= runs[i].getWidth();\n+                }\n+                for (int i = 0; i < runIndex; i++) {\n+                    xHitPos -= runs[i].getWidth();\n+                }\n+                xHitPos -= bounds.getMinX();\n+            } else {\n+                for (int i = 0; i < runs.length; i++) {\n+                    run = runs[i];\n+                    if (x < run.getWidth()) {\n+                        break;\n@@ -469,5 +477,2 @@\n-                    xHitPos -= bounds.getMinX();\n-                } else {\n-                    for (int i = 0; i < runs.length; i++) {\n-                        run = runs[i];\n-                        if (x < run.getWidth()) {\n+                    if (i + 1 < runs.length) {\n+                        if (runs[i + 1].isLinebreak()) {\n@@ -476,6 +481,1 @@\n-                        if (i + 1 < runs.length) {\n-                            if (runs[i + 1].isLinebreak()) {\n-                                break;\n-                            }\n-                            x -= run.getWidth();\n-                        }\n+                        x -= run.getWidth();\n@@ -484,8 +484,12 @@\n-            } else {\n-                \/\/ This code branch is used to calculate hit info of Text node embedded in TextFlow.\n-                for (int i = 0; i < lineIndex; i++) {\n-                    for (TextRun r: lines[i].runs) {\n-                        if (r.getTextSpan() != null && r.getStart() >= textRunStart\n-                                && r.getTextSpan().getText().equals(text)) {\n-                            textWidthPrevLine += r.getLength();\n-                        }\n+            }\n+        } else {\n+            \/\/ This code branch is used to calculate hit info of Text node embedded in TextFlow.\n+            textWidthPrevLine = getPrevLineWidth(text, lineIndex, textRunStart);\n+\n+            BaseBounds textBounds = new BoxBounds();\n+            if (isMirrored) {\n+                int runIdx = 0;\n+                for (TextRun r: runs) {\n+                    if (r.getStart() == curRunStart) {\n+                        run = r;\n+                        break;\n@@ -493,0 +497,1 @@\n+                    runIdx++;\n@@ -495,9 +500,8 @@\n-                BaseBounds textBounds = new BoxBounds();\n-                if (isMirrored) {\n-                    int runIdx = 0;\n-                    for (TextRun r: runs) {\n-                        if (r.getStart() == curRunStart) {\n-                            run = r;\n-                            break;\n-                        }\n-                        runIdx++;\n+                boolean textFound = false;\n+                for (int i = 0; i <= runIdx; i++) {\n+                    TextRun r = runs[i];\n+                    if (r.getStart() != curRunStart && x > r.getWidth() && textWidthPrevLine == 0\n+                            && r.getTextSpan().getText().equals(text)) {\n+                        x -= r.getWidth();\n+                        textFound = true;\n+                        continue;\n@@ -505,17 +509,5 @@\n-\n-                    boolean textFound = false;\n-                    for (int i = 0; i <= runIdx; i++) {\n-                        TextRun r = runs[i];\n-                        if (r.getStart() != curRunStart && x > r.getWidth() && textWidthPrevLine == 0\n-                                && r.getTextSpan().getText().equals(text)) {\n-                            x -= r.getWidth();\n-                            textFound = true;\n-                            continue;\n-                        }\n-                        if (r.getTextSpan() != null && r.getStart() == curRunStart\n-                                && r.getTextSpan().getText().equals(text)) {\n-                            if (x > r.getWidth() || textWidthPrevLine > 0) {\n-                                getBounds(r.getTextSpan(), textBounds);\n-                                x -= (run.getLocation().x - textBounds.getMinX());\n-                            }\n-                            break;\n+                    if (r.getTextSpan() != null && r.getStart() == curRunStart\n+                            && r.getTextSpan().getText().equals(text)) {\n+                        if (x > r.getWidth() || textWidthPrevLine > 0) {\n+                            getBounds(r.getTextSpan(), textBounds);\n+                            x -= (run.getLocation().x - textBounds.getMinX());\n@@ -523,0 +515,2 @@\n+                        break;\n+                    }\n@@ -525,4 +519,3 @@\n-                        if (textFound && x > r.getWidth() && r.getStart() < curRunStart\n-                                && !r.getTextSpan().getText().equals(text)) {\n-                            x -= r.getWidth();\n-                        }\n+                    if (textFound && x > r.getWidth() && r.getStart() < curRunStart\n+                            && !r.getTextSpan().getText().equals(text)) {\n+                        x -= r.getWidth();\n@@ -530,7 +523,9 @@\n-                    for (int i = runs.length - 1; i > runIdx; i--) {\n-                        TextRun r = runs[i];\n-                        boolean addLtrIdx = run.getTextSpan().getText().length() != run.length;\n-                        if (r.getStart() != curRunStart && !r.isLinebreak() && addLtrIdx\n-                                && r.getTextSpan().getText().equals(text)) {\n-                            ltrIndex += r.getLength();\n-                        }\n+                }\n+                ltrIndex = getLtrTextWidthInRtlText(runs, text, curRunStart, runIdx);\n+            } else {\n+                boolean isPrevRunPresent = false;\n+                int prevRunLength = 0;\n+                for (TextRun r: runs) {\n+                    if (!r.getTextSpan().getText().equals(text) || (r.getStart() < textRunStart && r.getTextSpan().getText().equals(text))) {\n+                        prevRunLength += r.getWidth();\n+                        continue;\n@@ -538,7 +533,5 @@\n-                } else {\n-                    boolean isPrevRunPresent = false;\n-                    int prevRunLength = 0;\n-                    for (TextRun r: runs) {\n-                        if (!r.getTextSpan().getText().equals(text) || (r.getStart() < textRunStart && r.getTextSpan().getText().equals(text))) {\n-                            prevRunLength += r.getWidth();\n-                            continue;\n+                    if (r.getTextSpan() != null && r.getTextSpan().getText().equals(text)) {\n+                        getBounds(r.getTextSpan(), textBounds);\n+                        if (textBounds.getMinX() == 0 && !isPrevRunPresent) {\n+                            x -= prevRunLength;\n+                            isPrevRunPresent = true;\n@@ -546,13 +539,4 @@\n-                        if (r.getTextSpan() != null && r.getTextSpan().getText().equals(text)) {\n-                            getBounds(r.getTextSpan(), textBounds);\n-                            if (textBounds.getMinX() == 0 && !isPrevRunPresent) {\n-                                x -= prevRunLength;\n-                                isPrevRunPresent = true;\n-                            }\n-                            if (x > r.getWidth()) {\n-                                x -= r.getWidth();\n-                                relIndex += r.getLength();\n-                                continue;\n-                            }\n-                            run = r;\n-                            break;\n+                        if (x > r.getWidth()) {\n+                            x -= r.getWidth();\n+                            relIndex += r.getLength();\n+                            continue;\n@@ -560,0 +544,2 @@\n+                        run = r;\n+                        break;\n@@ -563,0 +549,1 @@\n+        }\n@@ -564,9 +551,6 @@\n-            if (run != null) {\n-                int[] trailing = new int[1];\n-                if (text != null && spans != null) {\n-                    charIndex = run.getOffsetAtX(x, trailing);\n-                    charIndex += textWidthPrevLine;\n-                    charIndex += relIndex;\n-                    \/*  When RTL text has LTR text embedded,\n-                     *  add the LTR index here to get effective character index *\/\n-                    charIndex += ltrIndex;\n+        if (run != null) {\n+            int[] trailing = new int[1];\n+            if (forTextFlow || spans == null) {\n+                int indexOffset;\n+                if (isMirrored) {\n+                    indexOffset = run.getOffsetAtX(xHitPos, trailing);\n@@ -574,3 +558,19 @@\n-                    int indexOffset;\n-                    if (isMirrored) {\n-                        indexOffset = run.getOffsetAtX(xHitPos, trailing);\n+                    indexOffset = run.getOffsetAtX(x, trailing);\n+                }\n+                charIndex = run.getStart() + indexOffset;\n+            } else {\n+                charIndex = run.getOffsetAtX(x, trailing);\n+                charIndex += textWidthPrevLine;\n+                charIndex += relIndex;\n+                \/*  When RTL text has LTR text embedded,\n+                 *  add the LTR index here to get effective character index *\/\n+                charIndex += ltrIndex;\n+            }\n+            leading = (trailing[0] == 0);\n+\n+            insertionIndex = charIndex;\n+            if (insertionIndex < getText().length) {\n+                if (!leading) {\n+                    BreakIterator charIterator = BreakIterator.getCharacterInstance();\n+                    if (forTextFlow) {\n+                        charIterator.setText(new String(getText()));\n@@ -578,1 +578,1 @@\n-                        indexOffset = run.getOffsetAtX(x, trailing);\n+                        charIterator.setText(text);\n@@ -580,19 +580,5 @@\n-                    charIndex = run.getStart() + indexOffset;\n-                }\n-                leading = (trailing[0] == 0);\n-\n-                insertionIndex = charIndex;\n-                if (getText() != null && insertionIndex < getText().length) {\n-                    if (!leading) {\n-                        BreakIterator charIterator = BreakIterator.getCharacterInstance();\n-                        if (text != null) {\n-                            charIterator.setText(text);\n-                        } else {\n-                            charIterator.setText(new String(getText()));\n-                        }\n-                        int next = charIterator.following(insertionIndex);\n-                        if (next == BreakIterator.DONE) {\n-                            insertionIndex += 1;\n-                        } else {\n-                            insertionIndex = next;\n-                        }\n+                    int next = charIterator.following(insertionIndex);\n+                    if (next == BreakIterator.DONE) {\n+                        insertionIndex += 1;\n+                    } else {\n+                        insertionIndex = next;\n@@ -600,2 +586,0 @@\n-                } else if (!leading) {\n-                    insertionIndex += 1;\n@@ -603,5 +587,2 @@\n-            } else {\n-                \/\/empty line, set to line break leading\n-                charIndex = line.getStart();\n-                leading = true;\n-                insertionIndex = charIndex;\n+            } else if (!leading) {\n+                insertionIndex += 1;\n@@ -609,0 +590,5 @@\n+        } else {\n+            \/\/empty line, set to line break leading\n+            charIndex = line.getStart();\n+            leading = true;\n+            insertionIndex = charIndex;\n@@ -613,0 +599,27 @@\n+    private int getLtrTextWidthInRtlText(TextRun[] runs, String text, int curRunStart, int runIdx) {\n+        TextRun run = runs[runIdx];\n+        int ltrTextWidth = 0;\n+        for (int i = runs.length - 1; i > runIdx; i--) {\n+            TextRun r = runs[i];\n+            boolean addLtrIdx = run.getTextSpan().getText().length() != run.length;\n+            if (r.getStart() != curRunStart && !r.isLinebreak() && addLtrIdx\n+                    && r.getTextSpan().getText().equals(text)) {\n+                ltrTextWidth += r.getLength();\n+            }\n+        }\n+        return ltrTextWidth;\n+    }\n+\n+    private int getPrevLineWidth(String text, int lineIndex, int textRunStart) {\n+        int prevLineWidth = 0;\n+        for (int i = 0; i < lineIndex; i++) {\n+            for (TextRun r: lines[i].getRuns()) {\n+                if (r.getTextSpan() != null && r.getStart() >= textRunStart\n+                        && r.getTextSpan().getText().equals(text)) {\n+                    prevLineWidth += r.getLength();\n+                }\n+            }\n+        }\n+        return prevLineWidth;\n+    }\n+\n@@ -837,1 +850,1 @@\n-    private int getLineIndex(float y, String text, int runStart) {\n+    private int getLineIndex(float y, boolean forTextFlow, int runStart) {\n@@ -840,3 +853,3 @@\n-        \/* Initializing textFound as true when text is null\n-         * because when this function is called for TextFlow text parameter will be null *\/\n-        boolean textFound = (text == null);\n+        \/* Initializing textFound as true when this function is called for\n+         * TextFlow or Text node which is not embedded in TextFlow *\/\n+        boolean textFound = (forTextFlow || spans == null);\n@@ -847,4 +860,2 @@\n-                for (TextRun r : lines[index].runs) {\n-                    if (r.getTextSpan() == null || (r.getStart() == runStart && r.getTextSpan().getText().equals(text))) {\n-                        \/* Span will present only for Rich Text.\n-                         * Hence making textFound as true *\/\n+                for (TextRun r : lines[index].getRuns()) {\n+                    if (r.getStart() == runStart) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismTextLayout.java","additions":161,"deletions":150,"binary":false,"changes":311,"status":"modified"},{"patch":"@@ -1035,1 +1035,1 @@\n-        TextLayout.Hit h = layout.getHitInfo((float)x, (float)y, getText(), textRunStart, curRunStart, false);\n+        TextLayout.Hit h = layout.getHitInfo((float)x, (float)y, getTextInternal(), textRunStart, curRunStart);\n@@ -1050,1 +1050,1 @@\n-        int ix = 0;\n+        int runIdx = 0;\n@@ -1054,1 +1054,1 @@\n-            return ix;\n+            return runIdx;\n@@ -1058,7 +1058,7 @@\n-            if (runs[ix].getTextSpan() == null) {\n-                while (ix < lastIndex) {\n-                    GlyphList r = runs[ix];\n-                    GlyphList nr = runs[ix + 1];\n-                    if ((x > r.getLocation().x &&\n-                            (x < nr.getLocation().x || r.getLocation().y < nr.getLocation().y))\n-                                && y < r.getHeight()) {\n+            if (runs[runIdx].getTextSpan() == null) {\n+                while (runIdx < lastIndex) {\n+                    GlyphList run = runs[runIdx];\n+                    GlyphList nextRun = runs[runIdx + 1];\n+                    if ((x > run.getLocation().x &&\n+                            (x < nextRun.getLocation().x || run.getLocation().y < nextRun.getLocation().y))\n+                                && y < run.getHeight()) {\n@@ -1067,2 +1067,2 @@\n-                    ix++;\n-                    y = updateY(y, ix, runs);\n+                    runIdx++;\n+                    y = updateY(y, runIdx, runs);\n@@ -1074,4 +1074,4 @@\n-                while (ix < lastIndex) {\n-                    GlyphList r = runs[ix];\n-                    if (ptX > r.getLocation().x && ptX < (r.getLocation().x + r.getWidth()) && ptY >= r.getLocation().y\n-                            && y < r.getHeight()) {\n+                while (runIdx < lastIndex) {\n+                    GlyphList run = runs[runIdx];\n+                    if (ptX > run.getLocation().x && ptX < (run.getLocation().x + run.getWidth()) && ptY >= run.getLocation().y\n+                            && y < run.getHeight()) {\n@@ -1080,2 +1080,2 @@\n-                    ix++;\n-                    y = updateY(y, ix, runs);\n+                    runIdx++;\n+                    y = updateY(y, runIdx, runs);\n@@ -1086,2 +1086,2 @@\n-            while (ix < lastIndex) {\n-                if (ptY > runs[ix].getLocation().y && ptY < runs[ix + 1].getLocation().y) {\n+            while (runIdx < lastIndex) {\n+                if (ptY > runs[runIdx].getLocation().y && ptY < runs[runIdx + 1].getLocation().y) {\n@@ -1090,1 +1090,1 @@\n-                ix++;\n+                runIdx++;\n@@ -1093,1 +1093,1 @@\n-        return ix;\n+        return runIdx;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/Text.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -202,1 +202,1 @@\n-            TextLayout.Hit h = layout.getHitInfo((float)x, (float)y, null, 0, 0, true);\n+            TextLayout.Hit h = layout.getHitInfo((float)x, (float)y, null, 0, 0);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/TextFlow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-    public Hit getHitInfo(float x, float y, String text, int textRunStart, int curRunStart, boolean forTextFlow) {\n+    public Hit getHitInfo(float x, float y, String text, int textRunStart, int curRunStart) {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubTextLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,2 +120,2 @@\n-    final int Y_OFFSET = 30;\n-    final int X_LEADING_OFFSET = 10;\n+    static final int Y_OFFSET = 30;\n+    static final int X_LEADING_OFFSET = 10;\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/RTLTextCharacterIndexTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -119,2 +119,2 @@\n-    final int Y_OFFSET = 30;\n-    final int X_LEADING_OFFSET = 10;\n+    static final int Y_OFFSET = 30;\n+    static final int X_LEADING_OFFSET = 10;\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/RTLTextFlowCharacterIndexTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}