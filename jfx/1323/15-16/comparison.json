{"files":[{"patch":"@@ -32,0 +32,2 @@\n+import java.util.Objects;\n+\n@@ -94,0 +96,22 @@\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(charIndex, insertionIndex, leading);\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (this == obj)\n+                return true;\n+            if (obj == null)\n+                return false;\n+            if (getClass() != obj.getClass())\n+                return false;\n+            Hit other = (Hit) obj;\n+            return charIndex == other.charIndex && insertionIndex == other.insertionIndex && leading == other.leading;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"Hit[charIndex=\" + charIndex + \", insertionIndex=\" + insertionIndex + \", leading=\" + leading + \"]\";\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/text\/TextLayout.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1027,5 +1027,2 @@\n-        GlyphList[] runs = getRuns();\n-        int textRunStart = 0;\n-        if (runs.length != 0) {\n-            textRunStart = findFirstRunStart(runs);\n-        }\n+\n+        int textRunStart = findFirstRunStart();\n@@ -1045,1 +1042,1 @@\n-    private int findFirstRunStart(GlyphList[] runs) {\n+    private int findFirstRunStart() {\n@@ -1047,3 +1044,4 @@\n-        for (GlyphList r: runs) {\n-            if (((TextRun) r).getStart() < start) {\n-                start = ((TextRun) r).getStart();\n+        for (GlyphList r: getRuns()) {\n+            int runStart = ((TextRun) r).getStart();\n+            if (runStart < start) {\n+                start = runStart;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/Text.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -17,1 +17,1 @@\n-\t\t\t<attribute name=\"add-exports\" value=\"javafx.graphics\/com.sun.glass.ui=ALL-UNNAMED:javafx.graphics\/com.sun.glass.ui.monocle=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.sg.prism=ALL-UNNAMED:javafx.graphics\/com.sun.prism.impl=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.image.impl=ALL-UNNAMED:javafx.graphics\/com.sun.glass.events=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.application=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.css=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.geom=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.tk=ALL-UNNAMED:javafx.graphics\/com.sun.glass.ui.mac=ALL-UNNAMED\"\/>\n+\t\t\t<attribute name=\"add-exports\" value=\"javafx.graphics\/com.sun.glass.ui=ALL-UNNAMED:javafx.graphics\/com.sun.glass.ui.monocle=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.sg.prism=ALL-UNNAMED:javafx.graphics\/com.sun.prism.impl=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.image.impl=ALL-UNNAMED:javafx.graphics\/com.sun.glass.events=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.application=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.css=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.geom=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.tk=ALL-UNNAMED:javafx.graphics\/com.sun.glass.ui.mac=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.scene.text=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.text=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.font=ALL-UNNAMED\"\/>\n","filename":"tests\/system\/src\/test\/.classpath","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,2 @@\n+--add-exports javafx.graphics\/com.sun.javafx.scene.text=ALL-UNNAMED\n+--add-exports javafx.graphics\/com.sun.javafx.text=ALL-UNNAMED\n","filename":"tests\/system\/src\/test\/addExports","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,191 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.text;\n+\n+import static org.junit.Assume.assumeTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.sun.javafx.font.PGFont;\n+import com.sun.javafx.geom.RectBounds;\n+import com.sun.javafx.scene.text.FontHelper;\n+import com.sun.javafx.scene.text.TextLayout.Hit;\n+import com.sun.javafx.scene.text.TextSpan;\n+import com.sun.javafx.text.PrismTextLayout;\n+\n+import javafx.scene.text.Font;\n+\n+public class TextHitInfoTest {\n+    private final PrismTextLayout layout = new PrismTextLayout();\n+    private final PGFont arialFont = (PGFont) FontHelper.getNativeFont(Font.font(\"Arial\", 12));\n+\n+    record TestSpan(String text, Object font) implements TextSpan {\n+        @Override\n+        public String getText() {\n+            return text;\n+        }\n+\n+        @Override\n+        public Object getFont() {\n+            return font;\n+        }\n+\n+        @Override\n+        public RectBounds getBounds() {\n+            return null;\n+        }\n+    }\n+\n+    @Test\n+    void getHitInfoTest() {\n+        assumeArialFontAvailable();\n+\n+        \/*\n+         * Empty line:\n+         *\/\n+\n+        layout.setContent(\"\", arialFont);\n+\n+        \/\/ Checks that hits above the line results in first character:\n+        assertEquals(new Hit(0, 0, true), layout.getHitInfo(0, -30));\n+\n+        \/\/ Checks before start of line:\n+        assertEquals(new Hit(0, 0, true), layout.getHitInfo(-50, 0));\n+\n+        \/\/ Checks position of empty string:\n+        assertEquals(new Hit(0, 0, true), layout.getHitInfo(0, 0));\n+\n+        \/\/ Checks past end of line:\n+        assertEquals(new Hit(0, 0, true), layout.getHitInfo(250, 0));\n+\n+        \/\/ Checks that hits below the line results in last character + 1:\n+        assertEquals(new Hit(0, 1, false), layout.getHitInfo(0, 30));\n+\n+        \/*\n+         * Single line:\n+         *\/\n+\n+        layout.setContent(\"The quick brown fox jumps over the lazy dog\", arialFont);\n+\n+        \/\/ Checks that hits above the line results in first character:\n+        assertEquals(new Hit(0, 0, true), layout.getHitInfo(0, -30));\n+\n+        \/\/ Checks before start of line:\n+        assertEquals(new Hit(0, 0, true), layout.getHitInfo(-50, 0));\n+\n+        \/\/ Checks positions of a few characters:\n+        assertEquals(new Hit(0, 0, true), layout.getHitInfo(0, 0));  \/\/ Start of \"T\"\n+        assertEquals(new Hit(0, 1, false), layout.getHitInfo(5, 0));  \/\/ Past halfway of \"T\"\n+        assertEquals(new Hit(1, 1, true), layout.getHitInfo(10, 0));  \/\/ Start of \"h\"\n+\n+        \/\/ Checks past end of line:\n+        assertEquals(new Hit(42, 43, false), layout.getHitInfo(250, 0));\n+\n+        \/\/ Checks that hits below the line results in last character + 1:\n+        assertEquals(new Hit(43, 44, false), layout.getHitInfo(0, 30));\n+\n+        \/*\n+         * Multi line:\n+         *\/\n+\n+        layout.setContent(\"The\\nquick\\nbrown\\nfox\\n\", arialFont);\n+\n+        \/\/ Checks that hits above the first line results in first character:\n+        assertEquals(new Hit(0, 0, true), layout.getHitInfo(0, -30));\n+\n+        \/\/ Checks before start of first line:\n+        assertEquals(new Hit(0, 0, true), layout.getHitInfo(-50, 0));\n+\n+        \/\/ Checks positions of a few characters on first line:\n+        assertEquals(new Hit(0, 0, true), layout.getHitInfo(0, 0));  \/\/ Start of \"T\"\n+        assertEquals(new Hit(0, 1, false), layout.getHitInfo(5, 0));  \/\/ Halfway past \"T\"\n+        assertEquals(new Hit(1, 1, true), layout.getHitInfo(10, 0));  \/\/ Start of \"h\"\n+\n+        \/\/ Checks past end of first line:\n+        assertEquals(new Hit(2, 3, false), layout.getHitInfo(250, 0));\n+\n+        \/\/ Checks before start of second line:\n+        assertEquals(new Hit(4, 4, true), layout.getHitInfo(-50, 15));\n+\n+        \/\/ Check second line:\n+        assertEquals(new Hit(4, 4, true), layout.getHitInfo(0, 15));  \/\/ Start of \"q\"\n+\n+        \/\/ Checks past end of second line:\n+        assertEquals(new Hit(8, 9, false), layout.getHitInfo(250, 15));\n+\n+        \/*\n+         * Test with two spans:\n+         *\/\n+\n+        layout.setContent(new TestSpan[] {new TestSpan(\"Two\", arialFont), new TestSpan(\"Spans\", arialFont)});\n+\n+        \/\/ Checks that hits above the line results in first character:\n+        assertEquals(new Hit(0, 0, true), layout.getHitInfo(0, -30));\n+\n+        \/\/ Checks before start of line:\n+        assertEquals(new Hit(0, 0, true), layout.getHitInfo(-50, 0));\n+\n+        \/\/ Checks positions of a few characters:\n+        assertEquals(new Hit(0, 0, true), layout.getHitInfo(0, 0));  \/\/ Start of \"T\"\n+        assertEquals(new Hit(0, 1, false), layout.getHitInfo(5, 0));  \/\/ Past halfway of \"T\"\n+        assertEquals(new Hit(1, 1, true), layout.getHitInfo(10, 0));  \/\/ Start of \"w\"\n+\n+        assertEquals(new Hit(7, 8, false), layout.getHitInfo(60, 0));  \/\/ Past halfway of \"s\"\n+\n+        \/\/ Checks past end of line:\n+        assertEquals(new Hit(7, 8, false), layout.getHitInfo(250, 0));\n+\n+        \/\/ Checks that hits below the line results in last character + 1:\n+        assertEquals(new Hit(8, 9, false), layout.getHitInfo(0, 30));\n+\n+        \/*\n+         * Test with zero spans:\n+         *\/\n+\n+        layout.setContent(new TestSpan[] {});\n+\n+        \/\/ Checks that hits above the line results in first character:\n+        assertEquals(new Hit(0, 0, true), layout.getHitInfo(0, -30));\n+\n+        \/\/ Checks before start of line:\n+        assertEquals(new Hit(0, 1, false), layout.getHitInfo(-50, 0));\n+\n+        \/\/ Checks positions of center:\n+        assertEquals(new Hit(0, 1, false), layout.getHitInfo(0, 0));  \/\/ Start of \"T\"\n+\n+        \/\/ Checks past end of line:\n+        assertEquals(new Hit(0, 1, false), layout.getHitInfo(250, 0));\n+\n+        \/\/ Checks that hits below the line results in last character + 1:\n+        assertEquals(new Hit(0, 1, false), layout.getHitInfo(0, 30));\n+\n+    }\n+\n+    private void assumeArialFontAvailable() {\n+        assumeTrue(\"Arial font missing\", arialFont.getName().equals(\"Arial\"));\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/text\/TextHitInfoTest.java","additions":191,"deletions":0,"binary":false,"changes":191,"status":"added"}]}