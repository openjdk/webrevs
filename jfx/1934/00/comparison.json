{"files":[{"patch":"@@ -64,1 +64,1 @@\n-        throw new UnsupportedOperationException(\"Not supported yet.\");\n+        processor.invokeAndWait(runnable);\n@@ -82,0 +82,7 @@\n+    @Override\n+    protected void finishTerminating() {\n+        processor.stopProcessing();\n+        setEventThread(null);\n+        super.finishTerminating();\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/headless\/HeadlessApplication.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.concurrent.CountDownLatch;\n@@ -47,0 +48,22 @@\n+    void invokeAndWait(final Runnable r) {\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        runnableQueue.add(() -> {\n+            try {\n+                r.run();\n+            } finally {\n+                latch.countDown();\n+            }\n+        });\n+        try {\n+            latch.await();\n+        } catch (InterruptedException e) {\n+            Application.reportException(e);\n+        }\n+    }\n+\n+    void stopProcessing() {\n+        for (RunLoopEntry entry : activeRunLoops) {\n+            runnableQueue.add(() -> entry.active = false);\n+        }\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/headless\/NestedRunnableProcessor.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.com.sun.glass.ui.headless;\n+\n+import com.sun.glass.ui.Application;\n+import javafx.application.Platform;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class HeadlessApplication1Test {\n+\n+    @BeforeAll\n+    public static void setup() throws Exception {\n+        System.setProperty(\"glass.platform\", \"Headless\");\n+    }\n+\n+    @Test\n+    public void invokeAndWaitFromBackgroundThreadTest() {\n+        assertFalse(Platform.isFxApplicationThread());\n+        AtomicInteger counter = new AtomicInteger();\n+        AtomicBoolean fail = new AtomicBoolean();\n+        CountDownLatch waitLatch = new CountDownLatch(1);\n+        Platform.startup(() -> {\n+            assertTrue(Platform.isFxApplicationThread());\n+            new Thread(() -> {\n+                assertFalse(Platform.isFxApplicationThread());\n+                Application.invokeAndWait(counter::incrementAndGet);\n+                waitLatch.countDown();\n+                assertEquals(1, counter.get());\n+            }).start();\n+        });\n+        try {\n+            if (!waitLatch.await(1, TimeUnit.SECONDS)) {\n+                fail.set(true);\n+            }\n+        } catch (InterruptedException e) {\n+            fail.set(true);\n+        }\n+        assertFalse(fail.get());\n+        assertEquals(0, waitLatch.getCount());\n+        assertFalse(Platform.isFxApplicationThread());\n+        Platform.exit();\n+    }\n+\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/headless\/HeadlessApplication1Test.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.com.sun.glass.ui.headless;\n+\n+import javafx.application.Platform;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import test.util.Util;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class HeadlessApplication2Test {\n+\n+    @BeforeAll\n+    public static void setup() throws Exception {\n+        System.setProperty(\"glass.platform\", \"Headless\");\n+    }\n+\n+    @Test\n+    public void userThreadIsShutdownOnPlatformExitTest() {\n+        assertFalse(Platform.isFxApplicationThread());\n+        Platform.startup(() -> {\n+            assertTrue(Platform.isFxApplicationThread());\n+            Platform.runLater(Platform::exit);\n+        });\n+        Util.sleep(10);\n+        assertFalse(Thread.getAllStackTraces().keySet().stream().anyMatch(t -> \"JavaFX Application Thread\".equals(t.getName())));\n+    }\n+\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/headless\/HeadlessApplication2Test.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"}]}