{"files":[{"patch":"@@ -57,1 +57,2 @@\n-        this.formatter = formatter != null ? formatter : createFormatter(dateStyle, timeStyle, DEFAULT_LOCALE, DEFAULT_CHRONO);\n+        this.formatter = formatter != null ? formatter :\n+                createFormatter(dateStyle, timeStyle, DEFAULT_LOCALE, DEFAULT_CHRONO);\n@@ -59,1 +60,2 @@\n-                formatter != null ? formatter : createParser(dateStyle, timeStyle, DEFAULT_LOCALE, DEFAULT_CHRONO);\n+                formatter != null ? formatter :\n+                    createParser(dateStyle, timeStyle, DEFAULT_LOCALE, DEFAULT_CHRONO);\n@@ -65,4 +67,4 @@\n-                                             .appendPattern(pattern)\n-                                             .toFormatter()\n-                                             .withChronology(chrono)\n-                                             .withDecimalStyle(DecimalStyle.of(locale));\n+                .appendPattern(pattern)\n+                .toFormatter()\n+                .withChronology(chrono)\n+                .withDecimalStyle(DecimalStyle.of(locale));\n@@ -83,3 +85,3 @@\n-                            .withLocale(locale)\n-                            .withChronology(chrono)\n-                            .withDecimalStyle(DecimalStyle.of(locale));\n+                .withLocale(locale)\n+                .withChronology(chrono)\n+                .withDecimalStyle(DecimalStyle.of(locale));\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/util\/converter\/BaseTemporalStringConverter.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.util.Objects;\n@@ -107,2 +106,2 @@\n-        this.dateFormat = Objects.requireNonNullElseGet(dateFormat,\n-                () -> create(DEFAULT_LOCALE, DateFormat.DEFAULT, DateFormat.DEFAULT, null));\n+        this.dateFormat = dateFormat != null ? dateFormat :\n+                create(DEFAULT_LOCALE, DateFormat.DEFAULT, DateFormat.DEFAULT, null);\n@@ -112,3 +111,4 @@\n-        locale = Objects.requireNonNullElse(locale, DEFAULT_LOCALE);\n-        DateFormat dateFormat = pattern == null ? getSpecialziedDateFormat(dateStyle, timeStyle, locale)\n-                                                : new SimpleDateFormat(pattern, locale);\n+        locale = locale != null ? locale : DEFAULT_LOCALE;\n+        DateFormat dateFormat = pattern == null ?\n+                getSpecialziedDateFormat(dateStyle, timeStyle, locale) :\n+                new SimpleDateFormat(pattern, locale);\n@@ -119,1 +119,1 @@\n-    \/\/ treat as protected\n+    \/\/\/ Returns the `DateFormat` to be used without a pattern. Subclasses should override to return their own formatter.\n@@ -129,1 +129,1 @@\n-            throw new RuntimeException(e);\n+            throw new IllegalArgumentException(e);\n@@ -138,2 +138,0 @@\n-    \/\/\/ {@return the `DateFormat` used for formatting and parsing in this `DateTimeStringConverter`}\n-    \/\/\/\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/util\/converter\/DateTimeStringConverter.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    \/\/\/ Creates a `StringConverter` for arbitrary types that uses the given `Format`.\n+    \/\/\/ Creates a `FormatStringConverter` for arbitrary types that uses the given `Format`.\n@@ -57,1 +57,1 @@\n-            throw new RuntimeException(\"Parsed string not according to the format\");\n+            throw new IllegalArgumentException(\"Parsed string not according to the format\");\n@@ -67,1 +67,1 @@\n-    \/\/\/ {@return the `Format` instance for formatting and parsing in this `StringConverter`}\n+    \/\/\/ {@return the `Format` instance for formatting and parsing in this `FormatStringConverter`}\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/util\/converter\/FormatStringConverter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -82,3 +82,4 @@\n-        locale = Objects.requireNonNullElse(locale, Locale.getDefault());\n-        return pattern != null ? new DecimalFormat(pattern, new DecimalFormatSymbols(locale))\n-                               : getSpecializedNumberFormat(locale);\n+        locale = locale != null ? locale : Locale.getDefault();\n+        return pattern != null ?\n+                new DecimalFormat(pattern, new DecimalFormatSymbols(locale)) :\n+                getSpecializedNumberFormat(locale);\n@@ -87,1 +88,1 @@\n-    \/\/ treat as protected\n+    \/\/\/ Returns the `NumberFormat` to be used without a pattern. Subclasses should override to return their own formatter.\n@@ -97,1 +98,1 @@\n-            throw new RuntimeException(e);\n+            throw new IllegalArgumentException(e);\n@@ -106,2 +107,0 @@\n-    \/\/\/ {@return the `NumberFormat` used for formatting and parsing in this `NumberStringConverter`}\n-    \/\/\/\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/util\/converter\/NumberStringConverter.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/util\/converter\/TimeStringConverter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-    private final BigDecimalStringConverter converter = new BigDecimalStringConverter();\n+    private static final BigDecimalStringConverter CONVERTER = new BigDecimalStringConverter();\n@@ -42,1 +42,1 @@\n-        assertEquals(BigDecimal.TEN, converter.fromString(\"10\"));\n+        assertEquals(BigDecimal.TEN, CONVERTER.fromString(\"10\"));\n@@ -47,1 +47,1 @@\n-        assertEquals(BigDecimal.TEN, converter.fromString(\"      10      \"));\n+        assertEquals(BigDecimal.TEN, CONVERTER.fromString(\"      10      \"));\n@@ -52,1 +52,1 @@\n-        assertEquals(\"10\", converter.toString(BigDecimal.TEN));\n+        assertEquals(\"10\", CONVERTER.toString(BigDecimal.TEN));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/BigDecimalStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-    private final BigIntegerStringConverter converter = new BigIntegerStringConverter();\n+    private static final BigIntegerStringConverter CONVERTER = new BigIntegerStringConverter();\n@@ -42,1 +42,1 @@\n-        assertEquals(BigInteger.TEN, converter.fromString(\"10\"));\n+        assertEquals(BigInteger.TEN, CONVERTER.fromString(\"10\"));\n@@ -47,1 +47,1 @@\n-        assertEquals(BigInteger.TEN, converter.fromString(\"      10      \"));\n+        assertEquals(BigInteger.TEN, CONVERTER.fromString(\"      10      \"));\n@@ -52,1 +52,1 @@\n-        assertEquals(\"10\", converter.toString(BigInteger.TEN));\n+        assertEquals(\"10\", CONVERTER.toString(BigInteger.TEN));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/BigIntegerStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    private final BooleanStringConverter converter = new BooleanStringConverter();\n+    private static final BooleanStringConverter CONVERTER = new BooleanStringConverter();\n@@ -40,1 +40,1 @@\n-        assertEquals(Boolean.TRUE, converter.fromString(\"true\"));\n+        assertEquals(Boolean.TRUE, CONVERTER.fromString(\"true\"));\n@@ -45,1 +45,1 @@\n-        assertEquals(Boolean.TRUE, converter.fromString(\"TRUE\"));\n+        assertEquals(Boolean.TRUE, CONVERTER.fromString(\"TRUE\"));\n@@ -50,1 +50,1 @@\n-        assertEquals(Boolean.TRUE, converter.fromString(\"tRUe\"));\n+        assertEquals(Boolean.TRUE, CONVERTER.fromString(\"tRUe\"));\n@@ -55,1 +55,1 @@\n-        assertEquals(Boolean.FALSE, converter.fromString(\"false\"));\n+        assertEquals(Boolean.FALSE, CONVERTER.fromString(\"false\"));\n@@ -60,1 +60,1 @@\n-        assertEquals(Boolean.FALSE, converter.fromString(\"FALSE\"));\n+        assertEquals(Boolean.FALSE, CONVERTER.fromString(\"FALSE\"));\n@@ -65,1 +65,1 @@\n-        assertEquals(Boolean.FALSE, converter.fromString(\"fALsE\"));\n+        assertEquals(Boolean.FALSE, CONVERTER.fromString(\"fALsE\"));\n@@ -70,1 +70,1 @@\n-        assertEquals(Boolean.TRUE, converter.fromString(\"      true      \"));\n+        assertEquals(Boolean.TRUE, CONVERTER.fromString(\"      true      \"));\n@@ -75,1 +75,1 @@\n-        assertEquals(Boolean.FALSE, converter.fromString(\"     false      \"));\n+        assertEquals(Boolean.FALSE, CONVERTER.fromString(\"     false      \"));\n@@ -80,1 +80,1 @@\n-        assertEquals(\"true\", converter.toString(true));\n+        assertEquals(\"true\", CONVERTER.toString(true));\n@@ -85,1 +85,1 @@\n-        assertEquals(\"false\", converter.toString(false));\n+        assertEquals(\"false\", CONVERTER.toString(false));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/BooleanStringConverterTest.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-    private final ByteStringConverter converter = new ByteStringConverter();\n+    private static final ByteStringConverter CONVERTER = new ByteStringConverter();\n@@ -42,1 +42,1 @@\n-        assertEquals(BYTE_VALUE_10, converter.fromString(\"10\"));\n+        assertEquals(BYTE_VALUE_10, CONVERTER.fromString(\"10\"));\n@@ -47,1 +47,1 @@\n-        assertEquals(BYTE_VALUE_10, converter.fromString(\"     10     \"));\n+        assertEquals(BYTE_VALUE_10, CONVERTER.fromString(\"     10     \"));\n@@ -52,1 +52,1 @@\n-        assertEquals(\"10\", converter.toString(BYTE_VALUE_10));\n+        assertEquals(\"10\", CONVERTER.toString(BYTE_VALUE_10));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/ByteStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    private final CharacterStringConverter converter = new CharacterStringConverter();\n+    private static final CharacterStringConverter CONVERTER = new CharacterStringConverter();\n@@ -40,1 +40,1 @@\n-        assertEquals('c', converter.fromString(\"c\"));\n+        assertEquals('c', CONVERTER.fromString(\"c\"));\n@@ -45,1 +45,1 @@\n-        assertEquals('C', converter.fromString(\"C\"));\n+        assertEquals('C', CONVERTER.fromString(\"C\"));\n@@ -50,1 +50,1 @@\n-        assertNotSame('C', converter.fromString(\"c\"));\n+        assertNotSame('C', CONVERTER.fromString(\"c\"));\n@@ -55,1 +55,1 @@\n-        assertNotSame('c', converter.fromString(\"C\"));\n+        assertNotSame('c', CONVERTER.fromString(\"C\"));\n@@ -60,1 +60,1 @@\n-        assertEquals('c', converter.fromString(\"     c     \"));\n+        assertEquals('c', CONVERTER.fromString(\"     c     \"));\n@@ -65,1 +65,1 @@\n-        assertEquals('C', converter.fromString(\"     C     \"));\n+        assertEquals('C', CONVERTER.fromString(\"     C     \"));\n@@ -70,1 +70,1 @@\n-        assertEquals(\"c\", converter.toString('c'));\n+        assertEquals(\"c\", CONVERTER.toString('c'));\n@@ -75,1 +75,1 @@\n-        assertEquals(\"C\", converter.toString('C'));\n+        assertEquals(\"C\", CONVERTER.toString('C'));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/CharacterStringConverterTest.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    private final CurrencyStringConverter usLocaleConverter = new CurrencyStringConverter(Locale.US);\n+    private static final CurrencyStringConverter US_LOCALE_CONVERTER = new CurrencyStringConverter(Locale.US);\n@@ -50,1 +50,1 @@\n-        var csc = new CurrencyStringConverter();\n+        var converter = new CurrencyStringConverter();\n@@ -52,1 +52,1 @@\n-        assertEquals(numberFormat, numberFormatOf(csc));\n+        assertEquals(numberFormat, numberFormatOf(converter));\n@@ -59,1 +59,1 @@\n-        var csc = new CurrencyStringConverter(Locale.CANADA);\n+        var converter = new CurrencyStringConverter(Locale.CANADA);\n@@ -61,1 +61,1 @@\n-        assertEquals(numberFormat, numberFormatOf(csc));\n+        assertEquals(numberFormat, numberFormatOf(converter));\n@@ -69,1 +69,1 @@\n-        var csc = new CurrencyStringConverter(PATTERN);\n+        var converter = new CurrencyStringConverter(PATTERN);\n@@ -71,1 +71,1 @@\n-        assertEquals(numberFormat, numberFormatOf(csc));\n+        assertEquals(numberFormat, numberFormatOf(converter));\n@@ -79,1 +79,1 @@\n-        var csc = new CurrencyStringConverter(Locale.CANADA, PATTERN);\n+        var converter = new CurrencyStringConverter(Locale.CANADA, PATTERN);\n@@ -81,1 +81,1 @@\n-        assertEquals(numberFormat, numberFormatOf(csc));\n+        assertEquals(numberFormat, numberFormatOf(converter));\n@@ -88,1 +88,1 @@\n-        var csc = new CurrencyStringConverter(numberFormat);\n+        var converter = new CurrencyStringConverter(numberFormat);\n@@ -90,1 +90,1 @@\n-        assertEquals(numberFormat, numberFormatOf(csc));\n+        assertEquals(numberFormat, numberFormatOf(converter));\n@@ -95,1 +95,1 @@\n-        assertEquals(10.32, usLocaleConverter.fromString(\"$10.32\"));\n+        assertEquals(10.32, US_LOCALE_CONVERTER.fromString(\"$10.32\"));\n@@ -100,1 +100,1 @@\n-        assertEquals(10.32, usLocaleConverter.fromString(\"      $10.32      \"));\n+        assertEquals(10.32, US_LOCALE_CONVERTER.fromString(\"      $10.32      \"));\n@@ -105,1 +105,1 @@\n-        assertEquals(\"$10.32\", usLocaleConverter.toString(10.32));\n+        assertEquals(\"$10.32\", US_LOCALE_CONVERTER.toString(10.32));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/CurrencyStringConverterTest.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    private static final Locale DEFALUT_LOCALE = Locale.getDefault(Locale.Category.FORMAT);\n+    private static final Locale DEFAULT_LOCALE = Locale.getDefault(Locale.Category.FORMAT);\n@@ -68,2 +68,2 @@\n-                new TestCase(new DateStringConverter(), DEFALUT_LOCALE, DateFormat.DEFAULT, null, null),\n-                new TestCase(new DateStringConverter(DateFormat.SHORT), DEFALUT_LOCALE, DateFormat.SHORT, null, null),\n+                new TestCase(new DateStringConverter(), DEFAULT_LOCALE, DateFormat.DEFAULT, null, null),\n+                new TestCase(new DateStringConverter(DateFormat.SHORT), DEFAULT_LOCALE, DateFormat.SHORT, null, null),\n@@ -72,1 +72,1 @@\n-                new TestCase(new DateStringConverter(\"dd MM yyyy\"), DEFALUT_LOCALE, DateFormat.DEFAULT, \"dd MM yyyy\", null),\n+                new TestCase(new DateStringConverter(\"dd MM yyyy\"), DEFAULT_LOCALE, DateFormat.DEFAULT, \"dd MM yyyy\", null),\n@@ -74,1 +74,1 @@\n-                        DEFALUT_LOCALE, DateFormat.DEFAULT, null, DateFormat.getDateInstance(DateFormat.LONG))\n+                        DEFAULT_LOCALE, DateFormat.DEFAULT, null, DateFormat.getDateInstance(DateFormat.LONG))\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/DateStringConverterTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+    private static final Locale DEFAULT_LOCALE = Locale.getDefault(Locale.Category.FORMAT);\n@@ -72,2 +73,3 @@\n-                        Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT, DateFormat.DEFAULT,\n-                        null, null, VALID_DATE_WITH_SECONDS),\n+                        DEFAULT_LOCALE, DateFormat.DEFAULT, DateFormat.DEFAULT,\n+                        null, null, VALID_DATE_WITH_SECONDS\n+                ),\n@@ -76,2 +78,3 @@\n-                        Locale.getDefault(Locale.Category.FORMAT), DateFormat.SHORT, DateFormat.SHORT,\n-                        null, null, VALID_DATE_WITHOUT_SECONDS),\n+                        DEFAULT_LOCALE, DateFormat.SHORT, DateFormat.SHORT,\n+                        null, null, VALID_DATE_WITHOUT_SECONDS\n+                ),\n@@ -81,1 +84,2 @@\n-                        null, null, VALID_DATE_WITH_SECONDS),\n+                        null, null, VALID_DATE_WITH_SECONDS\n+                ),\n@@ -85,1 +89,2 @@\n-                        null, null, VALID_DATE_WITHOUT_SECONDS),\n+                        null, null, VALID_DATE_WITHOUT_SECONDS\n+                ),\n@@ -88,2 +93,3 @@\n-                        Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT, DateFormat.DEFAULT,\n-                        \"dd MM yyyy HH mm ss\", null, VALID_DATE_WITH_SECONDS),\n+                        DEFAULT_LOCALE, DateFormat.DEFAULT, DateFormat.DEFAULT,\n+                        \"dd MM yyyy HH mm ss\", null, VALID_DATE_WITH_SECONDS\n+                ),\n@@ -92,3 +98,4 @@\n-                        Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT, DateFormat.DEFAULT,\n-                        null, DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.FULL), VALID_DATE_WITH_SECONDS)\n-                );\n+                        DEFAULT_LOCALE, DateFormat.DEFAULT, DateFormat.DEFAULT,\n+                        null, DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.FULL), VALID_DATE_WITH_SECONDS\n+                )\n+        );\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/DateTimeStringConverterTest.java","additions":18,"deletions":11,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    private final DefaultStringConverter converter = new DefaultStringConverter();\n+    private static final DefaultStringConverter CONVERTER = new DefaultStringConverter();\n@@ -40,1 +40,1 @@\n-        assertEquals(\"string\", converter.fromString(\"string\"));\n+        assertEquals(\"string\", CONVERTER.fromString(\"string\"));\n@@ -45,1 +45,1 @@\n-        assertEquals(\"\", converter.fromString(\"\"));\n+        assertEquals(\"\", CONVERTER.fromString(\"\"));\n@@ -50,1 +50,1 @@\n-        assertEquals(\"string\", converter.toString(\"string\"));\n+        assertEquals(\"string\", CONVERTER.toString(\"string\"));\n@@ -55,1 +55,1 @@\n-        assertEquals(\"\", converter.toString(\"\"));\n+        assertEquals(\"\", CONVERTER.toString(\"\"));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/DefaultStringConverterTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    private final FloatStringConverter converter = new FloatStringConverter();\n+    private static final FloatStringConverter CONVERTER = new FloatStringConverter();\n@@ -40,1 +40,1 @@\n-        assertEquals(10.3521f, converter.fromString(\"10.3521\"));\n+        assertEquals(10.3521f, CONVERTER.fromString(\"10.3521\"));\n@@ -45,1 +45,1 @@\n-        assertEquals(10.3521f, converter.fromString(\"      10.3521     \"));\n+        assertEquals(10.3521f, CONVERTER.fromString(\"      10.3521     \"));\n@@ -50,1 +50,1 @@\n-        assertEquals(\"10.3521\", converter.toString(10.3521f));\n+        assertEquals(\"10.3521\", CONVERTER.toString(10.3521f));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/FloatStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    private final IntegerStringConverter converter = new IntegerStringConverter();\n+    private static final IntegerStringConverter CONVERTER = new IntegerStringConverter();\n@@ -40,1 +40,1 @@\n-        assertEquals(10, converter.fromString(\"10\"));\n+        assertEquals(10, CONVERTER.fromString(\"10\"));\n@@ -45,1 +45,1 @@\n-        assertEquals(10, converter.fromString(\"      10      \"));\n+        assertEquals(10, CONVERTER.fromString(\"      10      \"));\n@@ -50,1 +50,1 @@\n-        assertEquals(\"10\", converter.toString(10));\n+        assertEquals(\"10\", CONVERTER.toString(10));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/IntegerStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-        WITH_FORMAT_STYLES,\n+        WITH_FORMAT_STYLES;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/LocalDateStringConverterTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-        WITH_FORMAT_STYLES,\n+        WITH_FORMAT_STYLES;\n@@ -134,1 +134,1 @@\n-                                Locale.UK, IsoChronology.INSTANCE);\n+                    Locale.UK, IsoChronology.INSTANCE);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/LocalDateTimeStringConverterTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-        WITH_FORMAT_STYLES,\n+        WITH_FORMAT_STYLES;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/LocalTimeStringConverterTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    private final LongStringConverter converter = new LongStringConverter();\n+    private static final LongStringConverter CONVERTER = new LongStringConverter();\n@@ -40,1 +40,1 @@\n-        assertEquals(10, converter.fromString(\"10\"));\n+        assertEquals(10, CONVERTER.fromString(\"10\"));\n@@ -45,1 +45,1 @@\n-        assertEquals(10, converter.fromString(\"      10      \"));\n+        assertEquals(10, CONVERTER.fromString(\"      10      \"));\n@@ -50,1 +50,1 @@\n-        assertEquals(\"10\", converter.toString(10L));\n+        assertEquals(\"10\", CONVERTER.toString(10L));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/LongStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    private final NumberStringConverter usLocaleConverter = new NumberStringConverter(Locale.US);\n+    private static final NumberStringConverter US_LOCALE_CONVERTER = new NumberStringConverter(Locale.US);\n@@ -50,1 +50,1 @@\n-        var nsc = new NumberStringConverter();\n+        var converter = new NumberStringConverter();\n@@ -52,1 +52,1 @@\n-        assertEquals(numberFormat, numberFormatOf(nsc));\n+        assertEquals(numberFormat, numberFormatOf(converter));\n@@ -59,1 +59,1 @@\n-        var nsc = new NumberStringConverter(Locale.CANADA);\n+        var converter = new NumberStringConverter(Locale.CANADA);\n@@ -61,1 +61,1 @@\n-        assertEquals(numberFormat, numberFormatOf(nsc));\n+        assertEquals(numberFormat, numberFormatOf(converter));\n@@ -69,1 +69,1 @@\n-        var nsc = new NumberStringConverter(PATTERN);\n+        var converter = new NumberStringConverter(PATTERN);\n@@ -71,1 +71,1 @@\n-        assertEquals(numberFormat, numberFormatOf(nsc));\n+        assertEquals(numberFormat, numberFormatOf(converter));\n@@ -79,1 +79,1 @@\n-        var nsc = new NumberStringConverter(Locale.CANADA, PATTERN);\n+        var converter = new NumberStringConverter(Locale.CANADA, PATTERN);\n@@ -81,1 +81,1 @@\n-        assertEquals(numberFormat, numberFormatOf(nsc));\n+        assertEquals(numberFormat, numberFormatOf(converter));\n@@ -88,1 +88,1 @@\n-        var nsc = new NumberStringConverter(numberFormat);\n+        var converter = new NumberStringConverter(numberFormat);\n@@ -90,1 +90,1 @@\n-        assertEquals(numberFormat, numberFormatOf(nsc));\n+        assertEquals(numberFormat, numberFormatOf(converter));\n@@ -99,1 +99,1 @@\n-        assertEquals(10L, usLocaleConverter.fromString(\"10\"));\n+        assertEquals(10L, US_LOCALE_CONVERTER.fromString(\"10\"));\n@@ -104,1 +104,1 @@\n-        assertEquals(10L, usLocaleConverter.fromString(\"      10      \"));\n+        assertEquals(10L, US_LOCALE_CONVERTER.fromString(\"      10      \"));\n@@ -109,1 +109,1 @@\n-        assertThrows(RuntimeException.class, () -> usLocaleConverter.fromString(\"abcdefg\"));\n+        assertThrows(RuntimeException.class, () -> US_LOCALE_CONVERTER.fromString(\"abcdefg\"));\n@@ -114,1 +114,1 @@\n-        assertEquals(\"10\", usLocaleConverter.toString(10L));\n+        assertEquals(\"10\", US_LOCALE_CONVERTER.toString(10L));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/NumberStringConverterTest.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    private final PercentageStringConverter usLocaleConverter = new PercentageStringConverter(Locale.US);\n+    private static final PercentageStringConverter US_LOCALE_CONVERTER = new PercentageStringConverter(Locale.US);\n@@ -46,1 +46,1 @@\n-        var psc = new PercentageStringConverter();\n+        var converter = new PercentageStringConverter();\n@@ -48,1 +48,1 @@\n-        assertEquals(numberFormat, numberFormatOf(psc));\n+        assertEquals(numberFormat, numberFormatOf(converter));\n@@ -55,1 +55,1 @@\n-        var psc = new PercentageStringConverter(Locale.CANADA);\n+        var converter = new PercentageStringConverter(Locale.CANADA);\n@@ -57,1 +57,1 @@\n-        assertEquals(numberFormat, numberFormatOf(psc));\n+        assertEquals(numberFormat, numberFormatOf(converter));\n@@ -71,1 +71,1 @@\n-        assertEquals(.1032, usLocaleConverter.fromString(\"10.32%\"));\n+        assertEquals(.1032, US_LOCALE_CONVERTER.fromString(\"10.32%\"));\n@@ -76,1 +76,1 @@\n-        assertEquals(.1032, usLocaleConverter.fromString(\"      10.32%      \"));\n+        assertEquals(.1032, US_LOCALE_CONVERTER.fromString(\"      10.32%      \"));\n@@ -81,1 +81,1 @@\n-        assertEquals(\"10%\", usLocaleConverter.toString(.10));\n+        assertEquals(\"10%\", US_LOCALE_CONVERTER.toString(.10));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/PercentageStringConverterTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-    private final ShortStringConverter converter = new ShortStringConverter();\n+    private static final ShortStringConverter CONVERTER = new ShortStringConverter();\n@@ -42,1 +42,1 @@\n-        assertEquals(SHORT_VALUE_10, converter.fromString(\"10\"));\n+        assertEquals(SHORT_VALUE_10, CONVERTER.fromString(\"10\"));\n@@ -47,1 +47,1 @@\n-        assertEquals(SHORT_VALUE_10, converter.fromString(\"     10     \"));\n+        assertEquals(SHORT_VALUE_10, CONVERTER.fromString(\"     10     \"));\n@@ -52,1 +52,1 @@\n-        assertEquals(\"10\", converter.toString(SHORT_VALUE_10));\n+        assertEquals(\"10\", CONVERTER.toString(SHORT_VALUE_10));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/ShortStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+    private static final Locale DEFAULT_LOCALE = Locale.getDefault(Locale.Category.FORMAT);\n@@ -68,2 +69,3 @@\n-                new TestCase(new TimeStringConverter(), Locale.getDefault(Locale.Category.FORMAT),\n-                        DateFormat.DEFAULT, null, null, VALID_TIME_WITH_SECONDS),\n+                new TestCase(new TimeStringConverter(), DEFAULT_LOCALE,\n+                        DateFormat.DEFAULT, null, null, VALID_TIME_WITH_SECONDS\n+                ),\n@@ -71,2 +73,3 @@\n-                new TestCase(new TimeStringConverter(DateFormat.SHORT), Locale.getDefault(Locale.Category.FORMAT),\n-                        DateFormat.SHORT, null, null, VALID_TIME_WITHOUT_SECONDS),\n+                new TestCase(new TimeStringConverter(DateFormat.SHORT), DEFAULT_LOCALE,\n+                        DateFormat.SHORT, null, null, VALID_TIME_WITHOUT_SECONDS\n+                ),\n@@ -75,1 +78,2 @@\n-                        DateFormat.DEFAULT, null, null, VALID_TIME_WITH_SECONDS),\n+                        DateFormat.DEFAULT, null, null, VALID_TIME_WITH_SECONDS\n+                ),\n@@ -78,1 +82,2 @@\n-                        DateFormat.SHORT, null, null, VALID_TIME_WITHOUT_SECONDS),\n+                        DateFormat.SHORT, null, null, VALID_TIME_WITHOUT_SECONDS\n+                ),\n@@ -80,2 +85,3 @@\n-                new TestCase(new TimeStringConverter(\"HH mm ss\"), Locale.getDefault(Locale.Category.FORMAT),\n-                        DateFormat.DEFAULT, \"HH mm ss\", null, VALID_TIME_WITH_SECONDS),\n+                new TestCase(new TimeStringConverter(\"HH mm ss\"), DEFAULT_LOCALE,\n+                        DateFormat.DEFAULT, \"HH mm ss\", null, VALID_TIME_WITH_SECONDS\n+                ),\n@@ -84,3 +90,4 @@\n-                        Locale.getDefault(Locale.Category.FORMAT), DateFormat.DEFAULT, null,\n-                        DateFormat.getTimeInstance(DateFormat.FULL), VALID_TIME_WITH_SECONDS)\n-                );\n+                        DEFAULT_LOCALE, DateFormat.DEFAULT, null,\n+                        DateFormat.getTimeInstance(DateFormat.FULL), VALID_TIME_WITH_SECONDS\n+                )\n+        );\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/TimeStringConverterTest.java","additions":18,"deletions":11,"binary":false,"changes":29,"status":"modified"}]}