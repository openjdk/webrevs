{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -236,0 +236,2 @@\n+    private static boolean popupTriggeredOnMousePressed;\n+\n@@ -246,0 +248,1 @@\n+        popupTriggeredOnMousePressed = me.isPopupTrigger();\n@@ -248,1 +251,1 @@\n-        header.getTableHeaderRow().columnDragLock = true;\n+        header.getTableHeaderRow().columnDragLock = !popupTriggeredOnMousePressed;\n@@ -254,1 +257,1 @@\n-        if (me.isPrimaryButtonDown() && header.isColumnReorderingEnabled()) {\n+        if (me.isPrimaryButtonDown() && header.isColumnReorderingEnabled() && !popupTriggeredOnMousePressed) {\n@@ -260,1 +263,1 @@\n-        if (me.isConsumed()) return;\n+        if (me.isConsumed() || popupTriggeredOnMousePressed) return;\n@@ -274,1 +277,4 @@\n-        if (me.isPopupTrigger()) return;\n+        if (popupTriggeredOnMousePressed || me.isPopupTrigger()) {\n+            popupTriggeredOnMousePressed = false;\n+            return;\n+        }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableColumnHeader.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,190 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.scene.tableview;\n+\n+import com.sun.javafx.PlatformUtil;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.geometry.Bounds;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.cell.PropertyValueFactory;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+import javafx.stage.WindowEvent;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import test.util.Util;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class TableViewContextMenuSortTest {\n+\n+    static Robot robot;\n+    static volatile Stage stage;\n+    static volatile Scene scene;\n+    static final int SCENE_WIDTH = 800;\n+    static final int SCENE_HEIGHT = 250;\n+    static final CountDownLatch startupLatch = new CountDownLatch(1);\n+    private static final List<TableEntry> unsortedList = List.of(new TableEntry(\"One\"), new TableEntry(\"Two\"), new TableEntry(\"Three\"), new TableEntry(\"Four\"));\n+\n+    private static TableView<TableEntry> table;\n+\n+    public static void main(String[] args) {\n+        TableViewContextMenuSortTest test = new TableViewContextMenuSortTest();\n+        test.testContextMenuRequestDoesNotSort();\n+    }\n+\n+    @Test\n+    public void testContextMenuRequestDoesNotSort() {\n+        Node header = table.lookupAll(\".column-header\").stream()\n+                .filter(Objects::nonNull)\n+                .filter(n -> n.getStyleClass().contains(\"table-column\"))\n+                .findFirst()\n+                .orElseThrow();\n+        Bounds bounds = header.localToScreen(header.getLayoutBounds());\n+        double posX = bounds.getMinX() + 10;\n+        double posY = bounds.getMinY() + 5;\n+\n+        AtomicInteger counter = new AtomicInteger();\n+        header.addEventFilter(MouseEvent.ANY, e -> {\n+            if (e.isPopupTrigger()) {\n+                counter.incrementAndGet();\n+            }\n+        });\n+        Util.runAndWait(() -> {\n+            robot.mouseMove((int) posX, (int) posY);\n+            robot.mousePress(MouseButton.SECONDARY);\n+            robot.mouseRelease(MouseButton.SECONDARY);\n+        });\n+        Util.sleep(1000);\n+\n+        assertEquals(counter.get(), 1);\n+        for (int i = 0; i < 4; i++) {\n+            assertEquals(unsortedList.get(i).getName(), table.getItems().get(i).getName());\n+        }\n+\n+        \/\/ macOS only: Ctrl + Left click also triggers the context menu\n+        if (PlatformUtil.isMac()) {\n+            \n+            Util.runAndWait(() -> {\n+                robot.keyPress(KeyCode.ESCAPE);\n+                robot.keyRelease(KeyCode.ESCAPE);\n+            });\n+            Util.sleep(100);\n+\n+            Util.runAndWait(() -> {\n+                robot.keyPress(KeyCode.CONTROL);\n+                robot.mousePress(MouseButton.PRIMARY);\n+                robot.mouseRelease(MouseButton.PRIMARY);\n+                robot.keyRelease(KeyCode.CONTROL);\n+            });\n+            Util.sleep(1000);\n+\n+            assertEquals(counter.get(), 2);\n+            for (int i = 0; i < 4; i++) {\n+                assertEquals(unsortedList.get(i).getName(), table.getItems().get(i).getName());\n+            }\n+        }\n+    }\n+\n+    @BeforeAll\n+    public static void initFX() {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterAll\n+    public static void exit() {\n+        Util.shutdown();\n+    }\n+\n+    public static class TestApp extends Application {\n+\n+        @Override\n+        public void start(Stage primaryStage) {\n+            robot = new Robot();\n+            stage = primaryStage;\n+\n+            primaryStage.setTitle(\"TableView Test\");\n+\n+            TableColumn<TableEntry, String> col = new TableColumn<>(\"First Name\");\n+            col.setSortable(true);\n+            col.setContextMenu(new ContextMenu(new MenuItem(\"Item\")));\n+\n+            table = new TableView<>();\n+            table.getColumns().addAll(col);\n+            table.getItems().addAll(unsortedList);\n+            col.setCellValueFactory(new PropertyValueFactory<>(\"name\"));\n+\n+            StackPane root = new StackPane();\n+            root.getChildren().add(table);\n+            scene = new Scene(root, SCENE_WIDTH, SCENE_HEIGHT);\n+            stage.setScene(scene);\n+            stage.initStyle(StageStyle.UNDECORATED);\n+            stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> Platform.runLater(startupLatch::countDown));\n+            stage.setAlwaysOnTop(true);\n+            stage.show();\n+        }\n+    }\n+\n+    public static class TableEntry {\n+        StringProperty name = new SimpleStringProperty();\n+\n+        public TableEntry(String name) {\n+            this.name.set(name);\n+        }\n+\n+        public String getName() {\n+            return name.get();\n+        }\n+\n+        public void setName(String name) {\n+            this.name.set(name);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"TableEntry [name=\" + name + \"]\";\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/tableview\/TableViewContextMenuSortTest.java","additions":190,"deletions":0,"binary":false,"changes":190,"status":"added"}]}