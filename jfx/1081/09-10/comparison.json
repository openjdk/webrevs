{"files":[{"patch":"@@ -42,0 +42,20 @@\n+    \/**\n+     * Indicates a nested notification was aborted early because the new value\n+     * was modified during the loop to equal the old value. This means that not\n+     * all intended listeners (up to the maximum set by the higher level loop)\n+     * were called and so there may be confusion as to the current value is now\n+     * for some listeners.\n+     *\n+     * An abort may indicate a problem with multiple listeners changing values\n+     * that are not converging to a mutually agreed value.\n+     *\/\n+    private static final int NESTED_NOTIFICATION_ABORTED = -2;\n+\n+    \/**\n+     * Indicates a nested notification completed normally. After a nested\n+     * notification (aborted or not), the current value is re-read so listeners\n+     * not notified yet at the current level receive the newly updated current\n+     * value.\n+     *\/\n+    private static final int NESTED_NOTIFICATION_COMPLETED = -1;\n+\n@@ -49,1 +69,1 @@\n-     * actually occurred.<p>\n+     * actually occurred if it completed normally or was aborted early.<p>\n@@ -52,2 +72,3 @@\n-     * listeners notified in a higher level loop (minus one), while -1\n-     * indicates to a higher level loop that a nested notification occurred,\n+     * listeners notified in a higher level loop (minus one), while the constants\n+     * {@link #NESTED_NOTIFICATION_ABORTED} and {@link #NESTED_NOTIFICATION_COMPLETED}\n+     * indicate to a higher level loop that a nested notification occurred,\n@@ -109,1 +130,1 @@\n-        progress = -1;  \/\/ reset progress to ensure latest value is queried at least once\n+        progress = NESTED_NOTIFICATION_COMPLETED;  \/\/ reset progress to ensure latest value is queried at least once\n@@ -121,2 +142,0 @@\n-                T savedNewValue = newValue;\n-\n@@ -128,0 +147,1 @@\n+                    progress = NESTED_NOTIFICATION_ABORTED;  \/\/ Indicate an early exit before notifying all listeners intended at this level\n@@ -129,13 +149,1 @@\n-                    \/*\n-                     * Non-convergence detected: A listener notified of value X triggered a change\n-                     * to Y. The nested notification loop informing earlier listeners of Y was\n-                     * aborted because another listener changed the value back to X.\n-                     *\n-                     * Since listeners are only called when the old value is the last provided new\n-                     * value, and not when old == new, the listener that forced Y may incorrectly\n-                     * assume the value is still Y, leading to potential inconsistencies.\n-                     * Repeated changes between X and Y could cause a StackOverflowError. This\n-                     * conflicting listener behavior will be reported to the user:\n-                     *\/\n-\n-                    throw new StackOverflowError(\"non-converging value detected in value modifying listeners on \" + observableValue + \"; changed back from [\" + savedNewValue + \"] to [\" + oldValue + \"]\");\n+                    return wasLocked ? false : unlock();\n@@ -148,1 +156,1 @@\n-            \/\/ call change listener (and perhaps a nested notification):\n+            \/\/ call change listener (and perhaps a nested notification updating progress field):\n@@ -150,0 +158,18 @@\n+\n+            if (progress == NESTED_NOTIFICATION_ABORTED) {\n+\n+                \/*\n+                 * Non-convergence detected: The listener just notified above of value X\n+                 * triggered a change to Y. The nested notification loop informing earlier\n+                 * listeners of Y was aborted because another listener changed the value\n+                 * back to X.\n+                 *\n+                 * Since listeners are only called when the old value is the last provided new\n+                 * value, and not when old == new, the listener that forced Y may incorrectly\n+                 * assume the value is still Y, leading to potential inconsistencies.\n+                 * Repeated changes between X and Y would normally cause a StackOverflowError.\n+                 * This conflicting listener behavior will be reported to the user:\n+                 *\/\n+\n+                throw new StackOverflowError(\"non-converging value detected in value modifying listeners on \" + observableValue + \"; original value was: \" + oldValue);\n+            }\n@@ -154,1 +180,1 @@\n-        progress = -1;\n+        progress = NESTED_NOTIFICATION_COMPLETED;\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ListenerList.java","additions":47,"deletions":21,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -28,4 +28,2 @@\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotEquals;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n+import com.sun.javafx.binding.ListenerList;\n+import com.sun.javafx.binding.ListenerListBase;\n@@ -44,7 +42,0 @@\n-import org.junit.jupiter.api.Nested;\n-import org.junit.jupiter.api.Test;\n-\n-\n-import com.sun.javafx.binding.ListenerList;\n-import com.sun.javafx.binding.ListenerListBase;\n-\n@@ -52,0 +43,1 @@\n+import javafx.beans.property.BooleanProperty;\n@@ -53,0 +45,1 @@\n+import javafx.beans.property.SimpleBooleanProperty;\n@@ -59,0 +52,8 @@\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n@@ -257,0 +258,64 @@\n+        @Test\n+        void shouldAllowSimpleVetoingOfValue() {\n+            BooleanProperty property = new SimpleBooleanProperty(true);\n+\n+            L list = create(il1, il2);\n+\n+            list.add((ChangeListener<Boolean>) (obs, o, n) -> {\n+                records.add(\"CL1: changed from \" + o + \" to \" + n);\n+            });\n+\n+            list.add((ChangeListener<Boolean>) (obs, o, n) -> {\n+                records.add(\"CL2: changed from \" + o + \" to \" + n);\n+\n+                if (n) {  \/\/ This check is normally done by the property\n+                    property.set(false);\n+                    notifyListeners(list, property, n);\n+                }\n+            });\n+\n+            list.add((ChangeListener<Boolean>) (obs, o, n) -> {\n+                records.add(\"CL3: changed from \" + o + \" to \" + n);\n+            });\n+\n+            list.remove(il1);\n+            list.remove(il2);\n+\n+            notifyListeners(list, property, false);  \/\/ triggers change from false to true\n+\n+            \/\/assertConsistentChangeSequence(false);\n+            assertEquals(4, records.size());  \/\/ 2 at top level, 2 nested, third listener not notified (unchanged)\n+        }\n+\n+        @Test\n+        void shouldAllowSimpleVetoingOfValue_2() {\n+            StringProperty property = new SimpleStringProperty(\"B\");\n+\n+            L list = create(il1, il2);\n+\n+            list.add((ChangeListener<String>) (obs, o, n) -> {\n+                records.add(\"CL1: changed from \" + o + \" to \" + n);\n+            });\n+\n+            list.add((ChangeListener<String>) (obs, o, n) -> {\n+                records.add(\"CL2: changed from \" + o + \" to \" + n);\n+\n+                if (!n.equals(\"A\")) {  \/\/ This check is normally done by the property\n+                    property.set(\"A\");\n+                    notifyListeners(list, property, n);\n+                }\n+            });\n+\n+            list.add((ChangeListener<String>) (obs, o, n) -> {\n+                records.add(\"CL3: changed from \" + o + \" to \" + n);\n+            });\n+\n+            list.remove(il1);\n+            list.remove(il2);\n+\n+            notifyListeners(list, property, \"A\");  \/\/ triggers change from A to B\n+\n+            assertConsistentChangeSequence(\"A\");\n+            assertEquals(4, records.size());  \/\/ 2 at top level, 2 nested, third listener not notified (unchanged)\n+        }\n+\n@@ -302,1 +367,1 @@\n-            assertEquals(\"non-converging value detected in value modifying listeners on LongProperty [value: 2]; changed back from [3] to [2]\", e.getMessage());\n+            assertEquals(\"non-converging value detected in value modifying listeners on LongProperty [value: 2]; original value was: 0\", e.getMessage());\n@@ -350,1 +415,1 @@\n-            assertEquals(\"non-converging value detected in value modifying listeners on LongProperty [value: 30]; changed back from [20] to [30]\", e.getMessage());\n+            assertEquals(\"non-converging value detected in value modifying listeners on LongProperty [value: 30]; original value was: 0\", e.getMessage());\n@@ -402,1 +467,1 @@\n-            assertEquals(\"non-converging value detected in value modifying listeners on LongProperty [value: 30]; changed back from [20] to [30]\", e.getMessage());\n+            assertEquals(\"non-converging value detected in value modifying listeners on LongProperty [value: 30]; original value was: 0\", e.getMessage());\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ListenerListTestBase.java","additions":79,"deletions":14,"binary":false,"changes":93,"status":"modified"}]}