{"files":[{"patch":"@@ -48,1 +48,1 @@\n-     * with compressed oops with wasted space due to alignment issues).\n+     * with compressed oops without wasted space due to alignment issues).\n@@ -101,1 +101,1 @@\n-     * Adds an element at the end of the array, growing the arrow if necessary.\n+     * Adds an element at the end of the array, growing the array if necessary.\n@@ -109,1 +109,1 @@\n-    public void add(I instance, E element) {\n+    public final void add(I instance, E element) {\n@@ -152,1 +152,1 @@\n-    public int indexOf(I instance, E element) {\n+    public final int indexOf(I instance, E element) {\n@@ -174,1 +174,1 @@\n-    public E remove(I instance, int index) {\n+    public final E remove(I instance, int index) {\n@@ -223,1 +223,1 @@\n-    public E get(I instance, int index) {\n+    public final E get(I instance, int index) {\n@@ -244,1 +244,1 @@\n-    public E set(I instance, int index, E element) {\n+    public final E set(I instance, int index, E element) {\n@@ -265,1 +265,1 @@\n-     * @throws NullPointerException if the specified filter is null\n+     * @throws NullPointerException when any argument is {@code null}\n@@ -267,1 +267,1 @@\n-    public boolean removeIf(I instance, Predicate<E> filter) {\n+    public final boolean removeIf(I instance, Predicate<E> filter) {\n@@ -311,1 +311,1 @@\n-     * return the amount of slots reclaimed. The freed up slots\n+     * returns the amount of slots reclaimed. The freed up slots\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ArrayManager.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -256,0 +256,1 @@\n+     * @param <T> the change listener type\n@@ -273,0 +274,1 @@\n+     * @throws NullPointerException when any argument is {@code null}\n@@ -291,0 +293,1 @@\n+     * @throws NullPointerException when any argument is {@code null}\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ListenerListBase.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,9 +59,1 @@\n-        Objects.requireNonNull(listener);\n-\n-        instance.getValue();  \/\/ always trigger validation when adding an invalidation listener (required by tests)\n-\n-        switch (getData(instance)) {\n-            case null -> setData(instance, listener);\n-            case ListenerList<?> list -> list.add(listener);\n-            case Object data -> setData(instance, new ListenerList<>(data, listener));\n-        }\n+        addListenerInternal(instance, listener);\n@@ -78,0 +70,4 @@\n+        addListenerInternal(instance, listener);\n+    }\n+\n+    private void addListenerInternal(I instance, Object listener) {\n@@ -80,1 +76,1 @@\n-        instance.getValue();  \/\/ always trigger validation when adding a change listener (required by tests)\n+        instance.getValue();  \/\/ always trigger validation when adding a listener (required by tests for all types of listeners)\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ListenerManager.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"}]}