{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ArrayManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ListenerList.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ListenerListBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,5 +41,4 @@\n- * only a single invalidation listener, the field will contain only that\n- * listener (change listeners are wrapped to track old value). When there are more\n- * than one listeners, the field will hold a {@link ListenerList}. It is recommended\n- * to never inspect this field directly but always use this manager to\n- * interact with it.\n+ * only a single invalidation listener or change listener, the field will contain\n+ * only that listener. When there is more than one listener, the field will hold\n+ * a {@link ListenerList}. It is recommended to never inspect this field directly\n+ * but always use this manager to interact with it.\n@@ -141,0 +140,2 @@\n+     * @param listenerData the listener data associated with the instance,\n+     *   can be {@code null} which means there are no listeners to notify\n@@ -142,4 +143,2 @@\n-    public void fireValueChanged(I instance, T oldValue) {\n-        Object data = getData(instance);\n-\n-        if (data instanceof ListenerList) {\n+    public void fireValueChanged(I instance, T oldValue, Object listenerData) {\n+        if (listenerData instanceof ListenerList) {\n@@ -147,1 +146,1 @@\n-            ListenerList<T> list = (ListenerList<T>)data;\n+            ListenerList<T> list = (ListenerList<T>)listenerData;\n@@ -151,1 +150,1 @@\n-        else if (data instanceof InvalidationListener il) {\n+        else if (listenerData instanceof InvalidationListener il) {\n@@ -154,1 +153,1 @@\n-        else if (data instanceof ChangeListener) {\n+        else if (listenerData instanceof ChangeListener) {\n@@ -156,1 +155,1 @@\n-            ChangeListener<T> cl = (ChangeListener<T>) data;\n+            ChangeListener<T> cl = (ChangeListener<T>) listenerData;\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ListenerManager.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ListenerManagerBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/OldValueCachingListenerList.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,2 @@\n- * listener (change listeners are wrapped to track old value). When there are more\n- * than one listeners, the field will hold a {@link OldValueCachingListenerList}. It\n+ * listener (change listeners are wrapped to track old value). When there is more\n+ * than one listener, the field will hold a {@link OldValueCachingListenerList}. It\n@@ -47,4 +47,6 @@\n- * This is a variant of {@link ListenerManager} which caches the latest value. This\n- * means that a single {@link ChangeListener} will require a wrapper and that\n- * an extra field is needed within listener list. If possible use {@link ListenerManager},\n- * as it has less storage requirements and is faster.\n+ * This is a variant of {@link ListenerManager} which caches the latest value for\n+ * cases where the latest value prior to the change (ie. the old value) cannot be\n+ * provided by the caller itself. This means that a single {@link ChangeListener}\n+ * will require a wrapper to track this value, and that an extra field is needed\n+ * within listener list. If possible use {@link ListenerManager}, as it has less\n+ * storage requirements and is faster.\n@@ -163,0 +165,2 @@\n+     * @param listenerData the listener data associated with the instance,\n+     *   can be {@code null} which means there are no listeners to notify\n@@ -164,4 +168,2 @@\n-    public void fireValueChanged(I instance) {\n-        Object data = getData(instance);\n-\n-        if (data instanceof OldValueCachingListenerList) {\n+    public void fireValueChanged(I instance, Object listenerData) {\n+        if (listenerData instanceof OldValueCachingListenerList) {\n@@ -169,1 +171,1 @@\n-            OldValueCachingListenerList<T> list = (OldValueCachingListenerList<T>) data;\n+            OldValueCachingListenerList<T> list = (OldValueCachingListenerList<T>) listenerData;\n@@ -173,1 +175,1 @@\n-        else if (data instanceof InvalidationListener il) {\n+        else if (listenerData instanceof InvalidationListener il) {\n@@ -176,1 +178,1 @@\n-        else if (data instanceof ChangeListenerWrapper) {\n+        else if (listenerData instanceof ChangeListenerWrapper) {\n@@ -178,1 +180,1 @@\n-            ChangeListenerWrapper<T> clw = (ChangeListenerWrapper<T>) data;\n+            ChangeListenerWrapper<T> clw = (ChangeListenerWrapper<T>) listenerData;\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/OldValueCachingListenerManager.java","additions":17,"deletions":15,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1,31 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.javafx.binding;\n-\n-interface OldValueStore<T> {\n-    T getOldValue();\n-    void putOldValue(T value);\n-}\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/OldValueStore.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -195,1 +195,1 @@\n-            LISTENER_MANAGER.fireValueChanged(this, oldValue);\n+            LISTENER_MANAGER.fireValueChanged(this, oldValue, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/BooleanBinding.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -247,1 +247,1 @@\n-            LISTENER_MANAGER.fireValueChanged(this, oldValue);\n+            LISTENER_MANAGER.fireValueChanged(this, oldValue, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/DoubleBinding.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -195,1 +195,1 @@\n-            LISTENER_MANAGER.fireValueChanged(this, oldValue);\n+            LISTENER_MANAGER.fireValueChanged(this, oldValue, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/FloatBinding.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -197,1 +197,1 @@\n-            LISTENER_MANAGER.fireValueChanged(this, oldValue);\n+            LISTENER_MANAGER.fireValueChanged(this, oldValue, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/IntegerBinding.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -197,1 +197,1 @@\n-            LISTENER_MANAGER.fireValueChanged(this, oldValue);\n+            LISTENER_MANAGER.fireValueChanged(this, oldValue, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/LongBinding.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -205,1 +205,1 @@\n-            LISTENER_MANAGER.fireValueChanged(this, oldValue);\n+            LISTENER_MANAGER.fireValueChanged(this, oldValue, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/ObjectBinding.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -196,1 +196,1 @@\n-            LISTENER_MANAGER.fireValueChanged(this, oldValue);\n+            LISTENER_MANAGER.fireValueChanged(this, oldValue, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/StringBinding.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        LISTENER_MANAGER.fireValueChanged(this);\n+        LISTENER_MANAGER.fireValueChanged(this, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/BooleanPropertyBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,1 +120,1 @@\n-        LISTENER_MANAGER.fireValueChanged(this);\n+        LISTENER_MANAGER.fireValueChanged(this, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/DoublePropertyBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,1 +120,1 @@\n-        LISTENER_MANAGER.fireValueChanged(this);\n+        LISTENER_MANAGER.fireValueChanged(this, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/FloatPropertyBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,1 +120,1 @@\n-        LISTENER_MANAGER.fireValueChanged(this);\n+        LISTENER_MANAGER.fireValueChanged(this, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/IntegerPropertyBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,1 +120,1 @@\n-        LISTENER_MANAGER.fireValueChanged(this);\n+        LISTENER_MANAGER.fireValueChanged(this, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/LongPropertyBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,1 +119,1 @@\n-        LISTENER_MANAGER.fireValueChanged(this);\n+        LISTENER_MANAGER.fireValueChanged(this, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ObjectPropertyBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,1 @@\n-        LISTENER_MANAGER.fireValueChanged(this);\n+        LISTENER_MANAGER.fireValueChanged(this, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyBooleanPropertyBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,1 @@\n-        LISTENER_MANAGER.fireValueChanged(this);\n+        LISTENER_MANAGER.fireValueChanged(this, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyDoublePropertyBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,1 @@\n-        LISTENER_MANAGER.fireValueChanged(this);\n+        LISTENER_MANAGER.fireValueChanged(this, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyFloatPropertyBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,1 @@\n-        LISTENER_MANAGER.fireValueChanged(this);\n+        LISTENER_MANAGER.fireValueChanged(this, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyIntegerPropertyBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,1 @@\n-        LISTENER_MANAGER.fireValueChanged(this);\n+        LISTENER_MANAGER.fireValueChanged(this, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyLongPropertyBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,1 +92,1 @@\n-        LISTENER_MANAGER.fireValueChanged(this);\n+        LISTENER_MANAGER.fireValueChanged(this, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyObjectPropertyBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,1 +90,1 @@\n-        LISTENER_MANAGER.fireValueChanged(this);\n+        LISTENER_MANAGER.fireValueChanged(this, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyStringPropertyBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        LISTENER_MANAGER.fireValueChanged(this);\n+        LISTENER_MANAGER.fireValueChanged(this, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/StringPropertyBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,1 +105,1 @@\n-        LISTENER_MANAGER.fireValueChanged(this);\n+        LISTENER_MANAGER.fireValueChanged(this, listenerData);\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/value\/ObservableValueBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ArrayManagerTest.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ExpressionHelperUtility.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ListenerListTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ListenerListTestBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.binding;\n+\n+import com.sun.javafx.binding.ListenerManager;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.value.ChangeListener;\n+import javafx.beans.value.ObservableValue;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+public class ListenerManagerTest implements ObservableValue<String> {\n+    private final List<String> notifications = new ArrayList<>();\n+\n+    private final ChangeListener<String> cl1 = (obs, o, n) -> notifications.add(\"CL1: \" + o + \" -> \" + n);\n+    private final ChangeListener<String> cl2 = (obs, o, n) -> notifications.add(\"CL2: \" + o + \" -> \" + n);\n+\n+    private Object data;\n+    private String value = \"0\";\n+\n+    private final ListenerManager<String, ListenerManagerTest> helper = new ListenerManager<>() {\n+        @Override\n+        protected Object getData(ListenerManagerTest instance) {\n+            return data;\n+        }\n+\n+        @Override\n+        protected void setData(ListenerManagerTest instance, Object data) {\n+            ListenerManagerTest.this.data = data;\n+        }\n+    };\n+\n+    @Test\n+    void shouldNotifyChangeListeners() {\n+        value = \"A\";\n+\n+        helper.fireValueChanged(this, \"0\", data);  \/\/ checks if passing null data works fine\n+\n+        assertEquals(List.of(), notifications);  \/\/ expect nothing, as there are no listeners\n+\n+        helper.addListener(this, cl1);\n+\n+        assertNotNull(data);\n+\n+        value = \"B\";\n+\n+        helper.fireValueChanged(this, \"A\", data);\n+\n+        assertEquals(List.of(\"CL1: A -> B\"), notifications);\n+\n+        helper.addListener(this, cl2);\n+\n+        notifications.clear();\n+        value = \"C\";\n+\n+        helper.fireValueChanged(this, \"B\", data);\n+\n+        assertEquals(List.of(\"CL1: B -> C\", \"CL2: B -> C\"), notifications);\n+\n+        helper.removeListener(this, cl1);\n+\n+        notifications.clear();\n+        value = \"D\";\n+\n+        helper.fireValueChanged(this, \"C\", data);\n+\n+        assertEquals(List.of(\"CL2: C -> D\"), notifications);\n+\n+        notifications.clear();\n+        value = \"E\";\n+\n+        helper.fireValueChanged(this, \"D\", data);\n+\n+        assertEquals(List.of(\"CL2: D -> E\"), notifications);\n+    }\n+\n+    @Override\n+    public void addListener(InvalidationListener listener) {\n+    }\n+\n+    @Override\n+    public void removeListener(InvalidationListener listener) {\n+    }\n+\n+    @Override\n+    public void addListener(ChangeListener<? super String> listener) {\n+    }\n+\n+    @Override\n+    public void removeListener(ChangeListener<? super String> listener) {\n+    }\n+\n+    @Override\n+    public String getValue() {\n+        return value;\n+    }\n+}\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ListenerManagerTest.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/OldValueCachingListenerListTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n@@ -24,1 +49,1 @@\n-    private String value = \"A\";\n+    private String value = \"0\";\n@@ -39,1 +64,7 @@\n-    void should() {\n+    void shouldNotifyChangeListeners() {\n+        value = \"A\";\n+\n+        helper.fireValueChanged(this, data);  \/\/ checks if passing null data works fine\n+\n+        assertEquals(List.of(), notifications);  \/\/ expect nothing, as there are no listeners\n+\n@@ -46,1 +77,1 @@\n-        helper.fireValueChanged(this);\n+        helper.fireValueChanged(this, data);\n@@ -55,1 +86,1 @@\n-        helper.fireValueChanged(this);\n+        helper.fireValueChanged(this, data);\n@@ -64,1 +95,1 @@\n-        helper.fireValueChanged(this);\n+        helper.fireValueChanged(this, data);\n@@ -71,1 +102,1 @@\n-        helper.fireValueChanged(this);\n+        helper.fireValueChanged(this, data);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/OldValueCachingListenerManagerTest.java","additions":37,"deletions":6,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/ObservableValueTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/PropertyBaseTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}