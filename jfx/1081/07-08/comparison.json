{"files":[{"patch":"@@ -42,20 +42,0 @@\n-    \/**\n-     * Indicates a nested notification was aborted early because the new value\n-     * was modified during the loop to equal the old value. This means that not\n-     * all intended listeners (up to the maximum set by the higher level loop)\n-     * were called and so there may be confusion as to the current value is now\n-     * for some listeners.\n-     *\n-     * An abort may indicate a problem with multiple listeners changing values\n-     * that are not converging to a mutually agreed value.\n-     *\/\n-    private static final int NESTED_NOTIFICATION_ABORTED = -2;\n-\n-    \/**\n-     * Indicates a nested notification completed normally. After a nested\n-     * notification (aborted or not), the current value is re-read so listeners\n-     * not notified yet at the current level receive the newly updated current\n-     * value.\n-     *\/\n-    private static final int NESTED_NOTIFICATION_COMPLETED = -1;\n-\n@@ -72,3 +52,2 @@\n-     * listeners notified in a higher level loop (minus one), while the constants\n-     * {@link #NESTED_NOTIFICATION_ABORTED} and {@link #NESTED_NOTIFICATION_COMPLETED}\n-     * indicate to a higher level loop that a nested notification occurred,\n+     * listeners notified in a higher level loop (minus one), while -1\n+     * indicates to a higher level loop that a nested notification occurred,\n@@ -130,1 +109,1 @@\n-        progress = NESTED_NOTIFICATION_COMPLETED;  \/\/ reset progress to ensure latest value is queried at least once\n+        progress = -1;  \/\/ reset progress to ensure latest value is queried at least once\n@@ -142,10 +121,1 @@\n-                if (!wasLocked && progress == NESTED_NOTIFICATION_ABORTED) {\n-\n-                    \/*\n-                     * Non-convergence detected at the top-level loop. Exit early here as further\n-                     * notifications will otherwise overwrite the progress value making this problem\n-                     * go undetected.\n-                     *\/\n-\n-                    break;\n-                }\n+                T savedNewValue = newValue;\n@@ -158,1 +128,0 @@\n-                    progress = NESTED_NOTIFICATION_ABORTED;  \/\/ Indicate an early exit before notifying all listeners intended at this level\n@@ -160,1 +129,13 @@\n-                    return wasLocked ? false : unlock();\n+                    \/*\n+                     * Non-convergence detected: A listener notified of value X triggered a change\n+                     * to Y. The nested notification loop informing earlier listeners of Y was\n+                     * aborted because another listener changed the value back to X.\n+                     *\n+                     * Since listeners are only called when the old value is the last provided new\n+                     * value, and not when old == new, the listener that forced Y may incorrectly\n+                     * assume the value is still Y, leading to potential inconsistencies.\n+                     * Repeated changes between X and Y could cause a StackOverflowError. This\n+                     * conflicting listener behavior will be reported to the user:\n+                     *\/\n+\n+                    throw new StackOverflowError(\"non-converging value detected in value modifying listeners on \" + observableValue + \"; changed back from [\" + savedNewValue + \"] to [\" + oldValue + \"]\");\n@@ -171,31 +152,0 @@\n-        if (progress == NESTED_NOTIFICATION_ABORTED) {\n-            if (wasLocked) {  \/\/ Is this also a nested notification?\n-                return false;  \/\/ progress left unchanged, so the ABORT is communicated to the next higher level loop\n-            }\n-\n-            \/*\n-             * The is the top level notification call, which has been notifying listeners\n-             * of value X. A nested loop occurred that was notifying listeners of a different\n-             * value Y was aborted. This means:\n-             *\n-             * - The top level loop notified its listeners up to index i with value X\n-             * - At least one listener was not notified in the nested loop with value Y\n-             *   while it was already notified in this loop with value X (in other\n-             *   words, it did not notify all listeners up to index i)\n-             *\n-             * This is a conflict, as at least one listener received X but did not\n-             * receive Y, and this call (the top level one) will not rectify this as\n-             * it already completed notifications. For example, a listener with\n-             * index 2 triggered a nested notification (i == 2), but this notification\n-             * was aborted at index 1, then the listener at index 2 received X (from\n-             * the top level loop) but never received Y from the nested loop.\n-             *\n-             * If it was not a top level notification, there is a chance that the\n-             * listeners involved may still converge as the notification process is\n-             * still ongoing, which is why this is only an error when there is no\n-             * further chance that the values may converge:\n-             *\/\n-\n-            throw new StackOverflowError(\"non-converging value detected in value modifying listeners on \" + observableValue + \"; value was reset twice to: \" + oldValue);\n-        }\n-\n@@ -204,1 +154,1 @@\n-        progress = NESTED_NOTIFICATION_COMPLETED;\n+        progress = -1;\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ListenerList.java","additions":18,"deletions":68,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -279,2 +279,4 @@\n-                property.set(2);\n-                notifyListeners(list, property, v);\n+                if (v != 2) {  \/\/ This check is normally done by the property\n+                    property.set(2);\n+                    notifyListeners(list, property, v);\n+                }\n@@ -288,2 +290,4 @@\n-                property.set(3);\n-                notifyListeners(list, property, v);\n+                if (v != 3) {  \/\/ This check is normally done by the property\n+                    property.set(3);\n+                    notifyListeners(list, property, v);\n+                }\n@@ -298,1 +302,1 @@\n-            assertEquals(\"non-converging value detected in value modifying listeners on LongProperty [value: 2]; value was reset twice to: 0\", e.getMessage());\n+            assertEquals(\"non-converging value detected in value modifying listeners on LongProperty [value: 2]; changed back from [3] to [2]\", e.getMessage());\n@@ -346,1 +350,1 @@\n-            assertEquals(\"non-converging value detected in value modifying listeners on LongProperty [value: 30]; value was reset twice to: 0\", e.getMessage());\n+            assertEquals(\"non-converging value detected in value modifying listeners on LongProperty [value: 30]; changed back from [20] to [30]\", e.getMessage());\n@@ -398,1 +402,1 @@\n-            assertEquals(\"non-converging value detected in value modifying listeners on LongProperty [value: 30]; value was reset twice to: 0\", e.getMessage());\n+            assertEquals(\"non-converging value detected in value modifying listeners on LongProperty [value: 30]; changed back from [20] to [30]\", e.getMessage());\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ListenerListTestBase.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"}]}