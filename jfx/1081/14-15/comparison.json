{"files":[{"patch":"@@ -178,1 +178,7 @@\n-                throw new StackOverflowError(\"non-converging value detected in value modifying listeners on \" + observableValue + \"; original value was: \" + oldValue);\n+                Logging.getLogger().warning(\n+                    \"\"\"\n+                    %s was modified during the invocation of multiple listeners, and the values set do not seem to be converging; \\\n+                    the listener %s was notified of change %s -> %s, then modified the value, and was then reset by another listener; \\\n+                    to avoid this warning ensure listeners are not making conflicting updates, or avoid changing the value in listeners\n+                    \"\"\".formatted(observableValue, listener, oldValue, newValue)\n+                );\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ListenerList.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-    private static boolean keepException = false;\n+    private static boolean keepLastLogRecord;\n@@ -34,1 +34,1 @@\n-    \/**\n+    \/*\n@@ -36,1 +36,0 @@\n-     * @param keepException\n@@ -38,2 +37,2 @@\n-    public static void setKeepException(boolean keepException) {\n-        Logging.keepException = keepException;\n+    public static void setKeepLastLogRecord(boolean keepLastLogRecord) {\n+        Logging.keepLastLogRecord = keepLastLogRecord;\n@@ -42,1 +41,1 @@\n-    \/**\n+    \/*\n@@ -44,1 +43,0 @@\n-     * @return\n@@ -46,2 +44,2 @@\n-    public static boolean getKeepException() {\n-        return keepException;\n+    public static boolean getKeepLastLogRecord() {\n+        return keepLastLogRecord;\n@@ -65,21 +63,1 @@\n-        public static class ErrorLogRecord {\n-            private final Level level;\n-            private final Throwable thrown;\n-\n-            public ErrorLogRecord(Level level, Throwable thrown) {\n-                this.level = level;\n-                if (Logging.keepException) {\n-                    this.thrown = thrown;\n-                } else {\n-                    this.thrown = null;\n-                }\n-            }\n-\n-            public Throwable getThrown() {\n-                return thrown;\n-            }\n-\n-            public Level getLevel() {\n-                return level;\n-            }\n-        }\n+        public record ErrorLogRecord(Level level, String message, Throwable throwable) {}\n@@ -109,1 +87,9 @@\n-            errorLogRecord = new ErrorLogRecord(Level.WARNING, t);\n+\n+            if (keepLastLogRecord) {\n+                errorLogRecord = new ErrorLogRecord(Level.WARNING, msg, t);\n+            }\n+        }\n+\n+        @Override\n+        public void warning(String msg) {\n+            warning(msg, (Throwable)null);\n@@ -121,1 +107,4 @@\n-            errorLogRecord = new ErrorLogRecord(Level.FINE, t);\n+\n+            if (keepLastLogRecord) {\n+                errorLogRecord = new ErrorLogRecord(Level.FINE, msg, t);\n+            }\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/Logging.java","additions":21,"deletions":32,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-        Logging.setKeepException(true);\n+        Logging.setKeepLastLogRecord(true);\n@@ -64,1 +64,1 @@\n-        assertTrue(Logging.getKeepException());\n+        assertTrue(Logging.getKeepLastLogRecord());\n@@ -67,2 +67,2 @@\n-        assertEquals(expectedLevel, errorLogRecord.getLevel());\n-        assertTrue(expectedException.isAssignableFrom(errorLogRecord.getThrown().getClass()));\n+        assertEquals(expectedLevel, errorLogRecord.level());\n+        assertTrue(expectedException.isAssignableFrom(errorLogRecord.throwable().getClass()));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ErrorLoggingUtiltity.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,0 +30,3 @@\n+import com.sun.javafx.binding.Logging;\n+import com.sun.javafx.binding.Logging.ErrorLogger.ErrorLogRecord;\n+import com.sun.javafx.logging.PlatformLogger.Level;\n@@ -52,0 +55,2 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n@@ -57,0 +62,1 @@\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -59,0 +65,1 @@\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -86,0 +93,11 @@\n+    @BeforeEach\n+    void beforeEach() {\n+        Logging.setKeepLastLogRecord(true);\n+        Logging.getLogger().setErrorLogRecord(null);\n+    }\n+\n+    @AfterEach\n+    void afterEach() {\n+        assertNull(Logging.getLogger().getErrorLogRecord());  \/\/ expect no unasserted warnings logged\n+    }\n+\n@@ -365,1 +383,7 @@\n-            StackOverflowError e = assertThrows(StackOverflowError.class, () -> notifyListeners(list, property, 0));\n+            notifyListeners(list, property, 0);\n+\n+            ErrorLogRecord logRecord = Logging.getLogger().getErrorLogRecord();\n+\n+            assertNotNull(logRecord);\n+            assertEquals(Level.WARNING, logRecord.level());\n+            assertTrue(logRecord.message().startsWith(\"LongProperty [value: 2] was modified during the invocation of multiple listeners\"));\n@@ -367,1 +391,4 @@\n-            assertEquals(\"non-converging value detected in value modifying listeners on LongProperty [value: 2]; original value was: 0\", e.getMessage());\n+            assertConsistentChangeSequence(\"2\");\n+            assertEquals(14, records.size());  \/\/ some back and forth happening until problem detected\n+\n+            Logging.getLogger().setErrorLogRecord(null);\n@@ -413,1 +440,7 @@\n-            StackOverflowError e = assertThrows(StackOverflowError.class, () -> notifyListeners(list, property, 0));\n+            notifyListeners(list, property, 0);\n+\n+            ErrorLogRecord logRecord = Logging.getLogger().getErrorLogRecord();\n+\n+            assertNotNull(logRecord);\n+            assertEquals(Level.WARNING, logRecord.level());\n+            assertTrue(logRecord.message().startsWith(\"LongProperty [value: 30] was modified during the invocation of multiple listeners\"));\n@@ -415,1 +448,4 @@\n-            assertEquals(\"non-converging value detected in value modifying listeners on LongProperty [value: 30]; original value was: 0\", e.getMessage());\n+            assertConsistentChangeSequence(\"30\");\n+            assertEquals(23, records.size());  \/\/ some back and forth happening until problem detected\n+\n+            Logging.getLogger().setErrorLogRecord(null);\n@@ -465,1 +501,10 @@\n-            StackOverflowError e = assertThrows(StackOverflowError.class, () -> notifyListeners(list, property, 0));\n+            notifyListeners(list, property, 0);\n+\n+            ErrorLogRecord logRecord = Logging.getLogger().getErrorLogRecord();\n+\n+            assertNotNull(logRecord);\n+            assertEquals(Level.WARNING, logRecord.level());\n+            assertTrue(logRecord.message().startsWith(\"LongProperty [value: 30] was modified during the invocation of multiple listeners\"));\n+\n+            assertConsistentChangeSequence(\"30\");\n+            assertEquals(24, records.size());  \/\/ same back and forth happening until problem detected\n@@ -467,1 +512,1 @@\n-            assertEquals(\"non-converging value detected in value modifying listeners on LongProperty [value: 30]; original value was: 0\", e.getMessage());\n+            Logging.getLogger().setErrorLogRecord(null);\n@@ -644,2 +689,2 @@\n-        for (String record : records) {\n-            Matcher matcher = PATTERN.matcher(record);\n+        for (String r : records) {\n+            Matcher matcher = PATTERN.matcher(r);\n@@ -652,1 +697,1 @@\n-                assertNotEquals(o, n, \"Listener \" + name + \" received a change that wasn't a change: \" + record);\n+                assertNotEquals(o, n, \"Listener \" + name + \" received a change that wasn't a change: \" + r);\n@@ -655,1 +700,1 @@\n-                    assertEquals(o, oldValues.get(name), \"Listener \" + name + \" received an incorrect old value; expected \" + oldValues.get(name) + \" but was: \" + record);\n+                    assertEquals(o, oldValues.get(name), \"Listener \" + name + \" received an incorrect old value; expected \" + oldValues.get(name) + \" but was: \" + r);\n@@ -662,2 +707,2 @@\n-        for (String record : records) {\n-            Matcher matcher = INVALIDATION_PATTERN.matcher(record);\n+        for (String r : records) {\n+            Matcher matcher = INVALIDATION_PATTERN.matcher(r);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ListenerListTestBase.java","additions":57,"deletions":12,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-            Logging.setKeepException(false);\n+            Logging.setKeepLastLogRecord(false);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/TestLogging.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}