{"files":[{"patch":"@@ -134,1 +134,1 @@\n-             * Scroll one cell further in the direction the user has clicked if only one cell is shown.\n+             * Scroll the block increment further in the direction the user has clicked if only one cell is shown.\n@@ -140,1 +140,0 @@\n-                int index = firstVisibleCell.getIndex();\n@@ -142,1 +141,1 @@\n-                    index = Math.max(0, index - 1);\n+                    flow.scrollPixels(-flow.getBlockIncrement());\n@@ -144,1 +143,1 @@\n-                    index = Math.min(flow.getCellCount(), index + 1);\n+                    flow.scrollPixels(flow.getBlockIncrement());\n@@ -146,1 +145,0 @@\n-                flow.scrollTo(index);\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/VirtualScrollBar.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1803,0 +1803,10 @@\n+    \/**\n+     * The amount of pixels by which to adjust the position when the the scroll bar track is clicked.\n+     *\n+     * @return the value in pixels\n+     *\/\n+    public double getBlockIncrement() {\n+        \/\/ For reasons of backward compatibility, we use the cell length of the empty cell (cell index -1)\n+        return getCellLength(-1);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/VirtualFlow.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.scene.control.VirtualScrollBar;\n@@ -1841,0 +1842,54 @@\n+    @Test\n+    public void testScrollBarValueAdjustmentMovementUp() {\n+        testScrollBarValueAdjustment(1, 1.0, 0.2, -100);\n+        testScrollBarValueAdjustment(3, 1.0, 0.2, -100);\n+        testScrollBarValueAdjustment(1, 0.5, 0.2, -100);\n+        testScrollBarValueAdjustment(3, 0.5, 0.2, -100);\n+    }\n+\n+    @Test\n+    public void testScrollBarValueAdjustmentMovementDown() {\n+        testScrollBarValueAdjustment(1, 0.0, 0.8, 100);\n+        testScrollBarValueAdjustment(3, 0.0, 0.8, 100);\n+        testScrollBarValueAdjustment(1, 0.5, 0.8, 100);\n+        testScrollBarValueAdjustment(3, 0.5, 0.8, 100);\n+    }\n+\n+    public void testScrollBarValueAdjustment(int cellCount, double position, double adjust, double targetMovement) {\n+        flow = new VirtualFlowShim<>();\n+        class C extends CellStub {\n+            public C(VirtualFlowShim flow) {\n+                super(flow);\n+            }\n+            @Override\n+            protected double computePrefHeight(double width) {\n+                return getIndex() == 0 ? 1000 : 100;\n+            }\n+\n+            @Override\n+            protected double computeMinHeight(double width) {\n+                return computePrefHeight(width);\n+            }\n+\n+            @Override\n+            protected double computeMaxHeight(double width) {\n+                return computePrefHeight(width);\n+            }\n+        }\n+        flow.setCellFactory(fw -> new C(flow));\n+        flow.setCellCount(cellCount);\n+        flow.resize(256, 200);\n+\n+        flow.setPosition(position);\n+        pulse();\n+\n+        IndexedCell<?> cell = flow.getFirstVisibleCell();\n+        double position1 = flow.getCellPosition(cell);\n+        flow.shim_getVbar().adjustValue(adjust);\n+        pulse();\n+\n+        double position2 = flow.getCellPosition(cell);\n+        double movement = position1 - position2;\n+        assertEquals(targetMovement, movement, 0.1);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/VirtualFlowTest.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"modified"}]}