{"files":[{"patch":"@@ -131,16 +131,2 @@\n-            double oldValue = flow.getPosition();\n-            double newValue = ((getMax() - getMin()) * Utils.clamp(0, pos, 1)) + getMin();\n-            \/*\n-             * Scroll one cell further in the direction the user has clicked if only one cell is shown.\n-             * Otherwise, a click on the trough would have no effect when cell height > viewport height.\n-             *\/\n-            IndexedCell<?> firstVisibleCell = flow.getFirstVisibleCell();\n-            IndexedCell<?> lastVisibleCell = flow.getLastVisibleCell();\n-            if (firstVisibleCell != null && firstVisibleCell == lastVisibleCell) {\n-                int index = firstVisibleCell.getIndex();\n-                if (newValue < oldValue) {\n-                    index = Math.max(0, index - 1);\n-                } else {\n-                    index = Math.min(flow.getCellCount(), index + 1);\n-                }\n-                flow.scrollTo(index);\n+            if (pos < getValue()) {\n+                flow.scrollPixels(-flow.getViewportLength());\n@@ -148,13 +134,1 @@\n-                if (newValue < oldValue) {\n-                    IndexedCell<?> cell = firstVisibleCell;\n-                    if (cell == null) {\n-                        return;\n-                    }\n-                    flow.scrollToBottom(cell);\n-                } else if (newValue > oldValue) {\n-                    IndexedCell<?> cell = lastVisibleCell;\n-                    if (cell == null) {\n-                        return;\n-                    }\n-                    flow.scrollToTop(cell);\n-                }\n+                flow.scrollPixels(flow.getViewportLength());\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/VirtualScrollBar.java","additions":3,"deletions":29,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1904,1 +1904,0 @@\n-     * The access on this variable is package ONLY FOR TESTING.\n@@ -1915,1 +1914,10 @@\n-    double getViewportLength() {\n+\n+    \/**\n+     * Returns the length of the viewport portion of the {@code VirtualFlow} as computed during the layout pass.\n+     * For a vertical flow, this corresponds to the height and for a horizontal flow to the width of the clip view,\n+     * but it does not necessarily have to be the same value.\n+     *\n+     * @return the viewport length in pixels\n+     * @since 23\n+     *\/\n+    public double getViewportLength() {\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/VirtualFlow.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,5 +41,0 @@\n-    @Override\n-    public double getViewportLength() {\n-        return super.getViewportLength();\n-    }\n-\n@@ -61,0 +56,5 @@\n+    @Override\n+    public double getCellSize(int idx) {\n+        return super.getCellSize(idx);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/shims\/java\/javafx\/scene\/control\/skin\/VirtualFlowShim.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -58,0 +58,3 @@\n+import java.util.function.DoubleSupplier;\n+import java.util.function.Supplier;\n+\n@@ -1841,0 +1844,70 @@\n+    @Test\n+    public void testScrollBarValueAdjustmentMovementUp() {\n+        testScrollBarValueAdjustment(1, 1.0, 0.2, () -> -flow.getViewportLength());\n+        testScrollBarValueAdjustment(3, 1.0, 0.2, () -> -flow.getViewportLength());\n+        testScrollBarValueAdjustment(1, 0.5, 0.2, () -> -flow.getViewportLength());\n+        testScrollBarValueAdjustment(3, 0.5, 0.2, () -> -flow.getViewportLength());\n+    }\n+\n+    @Test\n+    public void testScrollBarValueAdjustmentMovementDown() {\n+        testScrollBarValueAdjustment(1, 0.0, 0.8, () -> flow.getViewportLength());\n+        testScrollBarValueAdjustment(3, 0.0, 0.8, () -> flow.getViewportLength());\n+        testScrollBarValueAdjustment(1, 0.5, 0.8, () -> flow.getViewportLength());\n+        testScrollBarValueAdjustment(3, 0.5, 0.8, () -> flow.getViewportLength());\n+    }\n+\n+    public void testScrollBarValueAdjustment(int cellCount, double position, double adjust, DoubleSupplier targetMovement) {\n+        flow = new VirtualFlowShim<>();\n+        class C extends CellStub {\n+            public C(VirtualFlowShim flow) {\n+                super(flow);\n+            }\n+\n+            @Override\n+            protected double computePrefHeight(double width) {\n+                return getIndex() == 0 ? 1000 : 100;\n+            }\n+\n+            @Override\n+            protected double computeMinHeight(double width) {\n+                return computePrefHeight(width);\n+            }\n+\n+            @Override\n+            protected double computeMaxHeight(double width) {\n+                return computePrefHeight(width);\n+            }\n+        }\n+        flow.setCellFactory(fw -> new C(flow));\n+        flow.setCellCount(cellCount);\n+        flow.resize(256, 200);\n+\n+        flow.setPosition(position);\n+        pulse();\n+\n+        Supplier<double[]> cellPositionsCalculater = () -> {\n+            double[] positions = new double[cellCount];\n+            IndexedCell<?> cell = flow.getFirstVisibleCell();\n+            positions[cell.getIndex()] = flow.getCellPosition(cell);\n+            for (int i = cell.getIndex() + 1; i < cellCount; i++) {\n+                positions[i] = positions[i - 1] + flow.getCellSize(i - 1);\n+            }\n+            for (int i = cell.getIndex() - 1; i >= 0; i--) {\n+                positions[i] = positions[i + 1] - flow.getCellSize(i);\n+            }\n+            return positions;\n+        };\n+\n+        double[] positionsBefore = cellPositionsCalculater.get();\n+\n+        flow.shim_getVbar().adjustValue(adjust);\n+        pulse();\n+\n+        double[] positionsAfter = cellPositionsCalculater.get();\n+\n+        for (int i = 0; i < positionsBefore.length; i++) {\n+            assertEquals(targetMovement.getAsDouble(), positionsBefore[i] - positionsAfter[i], 0.1);\n+        }\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/VirtualFlowTest.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"modified"}]}