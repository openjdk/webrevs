{"files":[{"patch":"@@ -405,1 +405,3 @@\n-    @Override native protected boolean _supportsSystemMenu();\n+    @Override protected boolean _supportsSystemMenu() {\n+        return true;\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacApplication.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -77,0 +77,2 @@\n++ (BOOL)isEmbedded;\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -915,0 +915,4 @@\n++ (BOOL)isEmbedded {\n+    return isEmbedded;\n+}\n+\n@@ -1224,12 +1228,0 @@\n-\n-\/*\n- * Class:     com_sun_glass_ui_mac_MacApplication\n- * Method:    _supportsSystemMenu\n- * Signature: ()Z;\n- *\/\n-JNIEXPORT jboolean JNICALL Java_com_sun_glass_ui_mac_MacApplication__1supportsSystemMenu\n-(JNIEnv *env, jobject japplication)\n-{\n-    return !isEmbedded;\n-}\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.m","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -73,0 +73,5 @@\n+\n+    \/\/ store host menu if running embedded, otherwise we\n+    \/\/ just store a default menu\n+    self->hostMenu = [NSApp mainMenu];\n+\n@@ -96,0 +101,14 @@\n+\n+    NSMenu* menu = nil;\n+\n+    if (self->menubar != nil) {\n+        menu = self->menubar->menu;\n+    }\n+\n+    \/\/ restore menu of host application if running embedded,\n+    \/\/ otherwise we just restore a default menu\n+    if ([NSApp mainMenu] == menu) {\n+        [NSApp setMainMenu:self->hostMenu];\n+        [[NSApp mainMenu] update];\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassWindow+Overrides.m","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -74,0 +74,5 @@\n+    \/\/ Stores the menu of the host application when running embedded.\n+    \/\/ This is used to allow JFX to install its own system menu\n+    \/\/ without interfering with the hosting application.\n+    NSMenu*             hostMenu;\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassWindow.h","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -993,2 +993,8 @@\n-        [NSApp setMainMenu:window->menubar->menu];\n-        [[NSApp mainMenu] update];\n+\n+        BOOL isEmbedded = [GlassApplication isEmbedded];\n+        BOOL isKeyWindow = [window->nsWindow isKeyWindow];\n+\n+        if (!isEmbedded || isKeyWindow) {\n+            [NSApp setMainMenu:window->menubar->menu];\n+            [[NSApp mainMenu] update];\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassWindow.m","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.com.sun.glass.ui.mac;\n+\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Menu;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.layout.BorderPane;\n+import javafx.stage.Stage;\n+import javafx.embed.swing.JFXPanel;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Stack;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.stream.Collectors;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.SwingUtilities;\n+import test.util.Util;\n+\n+public class MacOSSystemMenuJFXPanelSwingFirstTest extends MacOSSystemMenuTestBase {\n+\n+    @Test\n+    public void test() throws InterruptedException, IOException {\n+        initSwing(List.of(TEST_MENUS_0, TEST_MENUS_1));\n+        initJavaFX(List.of());\n+\n+        JFrame wnd = swingWindows.get(0);\n+        JFXPanel fxPanel = new JFXPanel();\n+\n+        wnd.add(fxPanel);\n+        wnd.setVisible(true);\n+\n+        CountDownLatch latch = new CountDownLatch(1);\n+\n+        Platform.runLater(() -> {\n+            Scene scene = new Scene(new BorderPane(new Label(\"Hello World!\")));\n+            fxPanel.setScene(scene);\n+\n+            latch.countDown();\n+        });\n+\n+        latch.await();\n+\n+        focusSwing(0);\n+        waitForUser();\n+\/\/        List<Element> swingElements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(swingElements, TEST_MENUS_0);\n+\n+        focusSwing(1);\n+        waitForUser();\n+\/\/        swingElements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(swingElements, TEST_MENUS_1);\n+\n+        focusSwing(0);\n+        waitForUser();\n+\/\/        swingElements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(swingElements, TEST_MENUS_0);\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/mac\/MacOSSystemMenuJFXPanelSwingFirstTest.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.com.sun.glass.ui.mac;\n+\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Menu;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.layout.BorderPane;\n+import javafx.stage.Stage;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Stack;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.stream.Collectors;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.SwingUtilities;\n+import test.util.Util;\n+\n+public class MacOSSystemMenuMultiWindowFXOnlySwingFirst extends MacOSSystemMenuTestBase {\n+\n+    @Test\n+    public void test() throws InterruptedException, IOException {\n+        initSwing(List.of());\n+        initJavaFX(List.of(TEST_MENUS_1, TEST_MENUS_3));\n+\n+        focusJavaFX(0);\n+        waitForUser();\n+\/\/        List<Element> jfxElements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(jfxElements, TEST_MENUS_1);\n+\n+        focusJavaFX(1);\n+        waitForUser();\n+\/\/        jfxElements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(jfxElements, TEST_MENUS_3);\n+\n+        focusJavaFX(0);\n+        waitForUser();\n+\/\/        jfxElements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(jfxElements, TEST_MENUS_1);\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/mac\/MacOSSystemMenuMultiWindowFXOnlySwingFirst.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.com.sun.glass.ui.mac;\n+\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Menu;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.layout.BorderPane;\n+import javafx.stage.Stage;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Stack;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.stream.Collectors;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.SwingUtilities;\n+import test.util.Util;\n+\n+public class MacOSSystemMenuMultiWindowFXOnlySwingLast extends MacOSSystemMenuTestBase {\n+\n+    @Test\n+    public void test() throws InterruptedException, IOException {\n+        initJavaFX(List.of(TEST_MENUS_1, TEST_MENUS_3));\n+        initSwing(List.of());\n+\n+        focusJavaFX(0);\n+        waitForUser();\n+\/\/        List<Element> jfxElements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(jfxElements, TEST_MENUS_1);\n+\n+        focusJavaFX(1);\n+        waitForUser();\n+\/\/        jfxElements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(jfxElements, TEST_MENUS_3);\n+\n+        focusJavaFX(0);\n+        waitForUser();\n+\/\/        jfxElements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(jfxElements, TEST_MENUS_1);\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/mac\/MacOSSystemMenuMultiWindowFXOnlySwingLast.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.com.sun.glass.ui.mac;\n+\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Menu;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.layout.BorderPane;\n+import javafx.stage.Stage;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Stack;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.stream.Collectors;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.SwingUtilities;\n+import test.util.Util;\n+\n+public class MacOSSystemMenuMultiWindowTest extends MacOSSystemMenuTestBase {\n+\n+    @Test\n+    public void test() throws InterruptedException, IOException {\n+        initJavaFX(List.of(TEST_MENUS_0, TEST_MENUS_1, TEST_MENUS_2));\n+\n+        focusJavaFX(0);\n+        waitForUser();\n+\/\/        List<Element> jfxElements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(jfxElements, TEST_MENUS_0);\n+\n+        focusJavaFX(1);\n+        waitForUser();\n+\/\/        jfxElements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(jfxElements, TEST_MENUS_1);\n+\n+        focusJavaFX(2);\n+        waitForUser();\n+\/\/        jfxElements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(jfxElements, TEST_MENUS_2);\n+\n+        focusJavaFX(0);\n+        waitForUser();\n+\/\/        jfxElements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(jfxElements, TEST_MENUS_0);\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/mac\/MacOSSystemMenuMultiWindowTest.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.com.sun.glass.ui.mac;\n+\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Menu;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.layout.BorderPane;\n+import javafx.stage.Stage;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Stack;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.stream.Collectors;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.SwingUtilities;\n+import test.util.Util;\n+\n+public class MacOSSystemMenuMultiWindowWithSwingFirstTest extends MacOSSystemMenuTestBase {\n+\n+    @Test\n+    public void test() throws InterruptedException, IOException {\n+        initSwing(List.of(TEST_MENUS_0, TEST_MENUS_2));\n+        initJavaFX(List.of(TEST_MENUS_1, TEST_MENUS_3));\n+\n+        focusJavaFX(0);\n+        waitForUser();\n+\/\/        List<Element> jfxElements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(jfxElements, TEST_MENUS_1);\n+\n+        focusJavaFX(1);\n+        waitForUser();\n+\/\/        jfxElements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(jfxElements, TEST_MENUS_3);\n+\n+        focusSwing(0);\n+        waitForUser();\n+\/\/        List<Element> swingElements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(swingElements, TEST_MENUS_0);\n+\n+        focusJavaFX(1);\n+        waitForUser();\n+\/\/        jfxElements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(jfxElements, TEST_MENUS_3);\n+\n+        focusSwing(1);\n+        waitForUser();\n+\/\/        swingElements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(swingElements, TEST_MENUS_2);\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/mac\/MacOSSystemMenuMultiWindowWithSwingFirstTest.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.com.sun.glass.ui.mac;\n+\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Menu;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.layout.BorderPane;\n+import javafx.stage.Stage;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Stack;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.stream.Collectors;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.SwingUtilities;\n+import test.util.Util;\n+\n+\n+public class MacOSSystemMenuSetWithSwingTestFirst extends MacOSSystemMenuTestBase {\n+\n+    private CountDownLatch latch;\n+\n+    @Test\n+    public void test() throws InterruptedException, IOException {\n+        initSwing(List.of(TEST_MENUS_0));\n+        initJavaFX(List.of(TEST_MENUS_1));\n+\n+        focusJavaFX(0);\n+        runOnFXThread(() -> javaFXMenuBars.get(0).setUseSystemMenuBar(false));\n+        waitForUser();\n+\n+\/\/        List<Element> elements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(elements, List.of());\n+\n+        runOnFXThread(() -> javaFXMenuBars.get(0).setUseSystemMenuBar(true));\n+        waitForUser();\n+\n+\/\/        elements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(elements, TEST_MENUS_1);\n+\n+        focusSwing(0);\n+        runOnFXThread(() -> javaFXMenuBars.get(0).setUseSystemMenuBar(false));\n+        waitForUser();\n+\n+\/\/        elements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(elements, TEST_MENUS_0);\n+\n+        focusJavaFX(0);\n+        waitForUser();\n+\n+\/\/        elements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(elements, List.of());\n+\n+        focusSwing(0);\n+        runOnFXThread(() -> javaFXMenuBars.get(0).setUseSystemMenuBar(true));\n+        waitForUser();\n+\n+\/\/        elements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(elements, TEST_MENUS_0);\n+\n+        focusJavaFX(0);\n+        waitForUser();\n+\n+\/\/        elements = getMenusOfFocusedWindow();\n+\/\/        compareMenus(elements, TEST_MENUS_1);\n+    }\n+\n+    private void runOnFXThread(Runnable runnable) throws InterruptedException {\n+        latch = new CountDownLatch(1);\n+\n+        Platform.runLater(() -> {\n+            runnable.run();\n+            latch.countDown();\n+        });\n+\n+        latch.await();\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/mac\/MacOSSystemMenuSetWithSwingTestFirst.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.com.sun.glass.ui.mac;\n+\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Menu;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.layout.BorderPane;\n+import javafx.stage.Stage;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Stack;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.stream.Collectors;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.SwingUtilities;\n+import test.util.Util;\n+\n+\n+public class MacOSSystemMenuSingleWindowWithSwingFirstTest extends MacOSSystemMenuTestBase {\n+\n+    @Test\n+    public void test() throws InterruptedException, IOException {\n+        initSwing(List.of(TEST_MENUS_0));\n+        initJavaFX(List.of(TEST_MENUS_1));\n+\n+        focusJavaFX(0);\n+        waitForUser();\n+\/\/        List<Element> jfxElements = getMenusOfFocusedWindow();\n+\n+        focusSwing(0);\n+        waitForUser();\n+\/\/        List<Element> swingElements = getMenusOfFocusedWindow();\n+\n+\/\/        compareMenus(swingElements, TEST_MENUS_0);\n+\/\/        compareMenus(jfxElements, TEST_MENUS_1);\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/mac\/MacOSSystemMenuSingleWindowWithSwingFirstTest.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -0,0 +1,502 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.com.sun.glass.ui.mac;\n+\n+import com.sun.javafx.tk.Toolkit;\n+import com.sun.javafx.PlatformUtil;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Menu;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.BorderPane;\n+import javafx.stage.Stage;\n+\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.BorderLayout;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Stack;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.stream.Collectors;\n+import java.util.function.Consumer;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JTextArea;\n+import javax.swing.JButton;\n+import javax.swing.SwingUtilities;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+public class MacOSSystemMenuTestBase {\n+\n+    \/**\n+     * A utility record to represent a menu and its possible children (items)\n+     *\/\n+    protected static record Element(String name, List<Element> items) {\n+\n+        public Element(String name) {\n+            this(name, List.of());\n+        }\n+    }\n+\n+    \/**\n+     * Test menu bar contents 0\n+     *\/\n+    protected static final List<Element> TEST_MENUS_0 = List.of(\n+            new Element(\"MyFile\", List.of(\n+                    new Element(\"New\", List.of(\n+                            new Element(\"Project\"),\n+                            new Element(\"Module\"),\n+                            new Element(\"File\")\n+                    )),\n+                    new Element(\"Open\"),\n+                    new Element(\"Save\")\n+            )),\n+            new Element(\"MyEdit\", List.of(\n+                    new Element(\"Undo\"),\n+                    new Element(\"Redo\")\n+            ))\n+    );\n+\n+    \/**\n+     * Test menu bar contents 1\n+     *\/\n+    protected static final List<Element> TEST_MENUS_1 = List.of(\n+            new Element(\"MyView\", List.of(\n+                    new Element(\"Windows\", List.of(\n+                            new Element(\"Editor\"),\n+                            new Element(\"Project\"),\n+                            new Element(\"Debugger\")\n+                    )),\n+                    new Element(\"Appearance\")\n+            )),\n+            new Element(\"MyNavigate\", List.of(\n+                    new Element(\"Class...\"),\n+                    new Element(\"Files...\"),\n+                    new Element(\"Symbol...\"),\n+                    new Element(\"Text...\"),\n+                    new Element(\"File\", List.of(\n+                            new Element(\"Next Method\"),\n+                            new Element(\"Next Field\")\n+                    ))\n+            ))\n+    );\n+\n+    \/**\n+     * Test menu bar contents 2\n+     *\/\n+    protected static final List<Element> TEST_MENUS_2 = List.of(\n+            new Element(\"MyTasks\", List.of(\n+                    new Element(\"Create\", List.of(\n+                            new Element(\"New\")\n+                    )),\n+                    new Element(\"Read\"),\n+                    new Element(\"Update\"),\n+                    new Element(\"Delete\")\n+            )),\n+            new Element(\"MyCalender\", List.of(\n+                    new Element(\"Dates\", List.of(\n+                            new Element(\"Year\"),\n+                            new Element(\"Month\"),\n+                            new Element(\"Day\")\n+                    )),\n+                    new Element(\"Time\")\n+            )),\n+            new Element(\"Opt 1\"),\n+            new Element(\"Opt 2\"),\n+            new Element(\"Opt 3\")\n+    );\n+\n+    \/**\n+     * Test menu bar contents 3\n+     *\/\n+    protected static final List<Element> TEST_MENUS_3 = List.of(\n+            new Element(\"MyImages\", List.of(\n+                    new Element(\"Scale\", List.of(\n+                            new Element(\"Small\"),\n+                            new Element(\"Medium\"),\n+                            new Element(\"Large\")\n+                    )),\n+                    new Element(\"Color\"),\n+                    new Element(\"Pixels\"),\n+                    new Element(\"Shadow\"),\n+                    new Element(\"Shapes\")\n+            ))\n+    );\n+\n+    protected final List<MenuBar> javaFXMenuBars = new ArrayList<>();\n+\n+    protected final List<Stage> javaFXWindows = new ArrayList<>();\n+\n+    protected final List<JFrame> swingWindows = new ArrayList<>();\n+\n+    private boolean nextStep = false;\n+\n+    private CountDownLatch latch = null;\n+\n+    \/***************************************************\n+     *\n+     * Only run on MacOS\n+     *\n+     **************************************************\/\n+\n+    @BeforeAll\n+    private static void ensureMacOS() {\n+        assumeTrue(PlatformUtil.isMac());\n+    }\n+\n+    \/***************************************************\n+     *\n+     * Helpers for creation and focusing of windows\n+     *\n+     **************************************************\/\n+\n+    protected void initJavaFX(List<List<Element>> menus) {\n+        initJavaFX(false, menus);\n+    }\n+\n+    protected void initJavaFX(boolean fullscreen, List<List<Element>> menus) {\n+        initLock();\n+\n+        Platform.startup(() -> {\n+            for (int i = 0; i < menus.size(); i++) {\n+                initJavaFXWindow(fullscreen, i, menus.get(i));\n+            }\n+\n+            releaseLock();\n+        });\n+\n+        awaitLock();\n+    }\n+\n+    protected void initSwing(List<List<Element>> menus) {\n+        java.awt.Toolkit.getDefaultToolkit();\n+        initSwing(false, menus);\n+    }\n+\n+    protected void initSwing(boolean fullscreen, List<List<Element>> menus) {\n+        System.setProperty(\"apple.laf.useScreenMenuBar\", \"true\");\n+\n+        for (int i = 0; i < menus.size(); i++) {\n+            initSwingWindow(fullscreen, i, menus.get(i));\n+        }\n+    }\n+\n+    protected void focusJavaFX(int id) {\n+        initLock();\n+\n+        Platform.runLater(() -> {\n+            javaFXWindows.get(id).toFront();\n+            javaFXWindows.get(id).requestFocus();\n+\n+            releaseLock();\n+        });\n+\n+        awaitLock();\n+    }\n+\n+    protected void focusSwing(int id) {\n+        initLock();\n+\n+        SwingUtilities.invokeLater(() -> {\n+            swingWindows.get(id).setAlwaysOnTop(true);\n+            swingWindows.get(id).toFront();\n+            swingWindows.get(id).requestFocus();\n+            swingWindows.get(id).setAlwaysOnTop(false);\n+\n+            releaseLock();\n+        });\n+\n+        awaitLock();\n+    }\n+\n+    protected void initJavaFXWindow(boolean fullscreen, int id, List<Element> menus) {\n+        MenuBar menuBar = new MenuBar();\n+        BorderPane root = new BorderPane();\n+        Scene scene = new Scene(root);\n+        Stage window = new Stage();\n+\n+        for (Element menu : menus) {\n+            menuBar.getMenus().add(createJavaFXMenu(menu));\n+        }\n+\n+        TextArea menuTextArea = new TextArea();\n+        Button nextStepButton = new Button(\"Next\");\n+\n+        addMenuAsText(menus, menuTextArea::appendText, 0);\n+        nextStepButton.setOnAction(event -> nextStep = true);\n+\n+        menuBar.setUseSystemMenuBar(true);\n+        root.setTop(menuBar);\n+        root.setCenter(menuTextArea);\n+        root.setBottom(nextStepButton);\n+        window.setScene(scene);\n+        window.setTitle(\"JavaFX Window [\" + id + \"]\");\n+        window.setFullScreen(fullscreen);\n+        window.show();\n+\n+        javaFXMenuBars.add(menuBar);\n+        javaFXWindows.add(window);\n+    }\n+\n+    protected Menu createJavaFXMenu(Element element) {\n+        Menu menu = new Menu(element.name);\n+\n+        for (Element item : element.items) {\n+            if (item.items.isEmpty()) {\n+                menu.getItems().add(new MenuItem(item.name));\n+            } else {\n+                menu.getItems().add(createJavaFXMenu(item));\n+            }\n+        }\n+\n+        return menu;\n+    }\n+\n+    protected void initSwingWindow(boolean fullscreen, int id, List<Element> menus) {\n+        JMenuBar menuBar = new JMenuBar();\n+        JFrame window = new JFrame();\n+\n+        for (Element menu : menus) {\n+            menuBar.add(createSwingMenu(menu));\n+        }\n+\n+        JTextArea menuTextArea = new JTextArea();\n+        JButton nextStepButton = new JButton(\"Next\");\n+\n+        addMenuAsText(menus, menuTextArea::append, 0);\n+        nextStepButton.addActionListener(event -> nextStep = true);\n+\n+        if (fullscreen) {\n+            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n+            GraphicsDevice gd = ge.getDefaultScreenDevice();\n+\n+            window.setUndecorated(true);\n+            window.setResizable(false);\n+            gd.setFullScreenWindow(window);\n+        }\n+\n+        window.setLayout(new BorderLayout());\n+        window.add(menuTextArea, BorderLayout.CENTER);\n+        window.add(nextStepButton, BorderLayout.SOUTH);\n+        window.setJMenuBar(menuBar);\n+        window.setTitle(\"Swing Window [\" + id + \"]\");\n+        window.setSize(800, 400);\n+        window.setVisible(true);\n+\n+        swingWindows.add(window);\n+    }\n+\n+    protected JMenu createSwingMenu(Element element) {\n+        JMenu menu = new JMenu(element.name);\n+\n+        for (Element item : element.items) {\n+            if (item.items.isEmpty()) {\n+                menu.add(new JMenuItem(item.name));\n+            } else {\n+                menu.add(createSwingMenu(item));\n+            }\n+        }\n+\n+        return menu;\n+    }\n+\n+    private void addMenuAsText(List<Element> menus, Consumer<String> append, int tabs) {\n+        for (Element menu : menus) {\n+            append.accept(\"\\t\".repeat(tabs) + menu.name + \"\\n\");\n+            addMenuAsText(menu.items, append, tabs + 1);\n+        }\n+    }\n+\n+    \/***************************************************\n+     *\n+     * Helpers for system menu comparison\n+     *\n+     **************************************************\/\n+\n+    \/**\n+     * Compares the app menus of the provided menu bars. The app menu\n+     * is the menu after the apple menu.\n+     *\/\n+    protected void compareAppMenus(List<Element> first, List<Element> second) {\n+        assertFalse(first.isEmpty(), \"No app menu present\");\n+        assertFalse(second.isEmpty(), \"No app menu present\");\n+\n+        Element firstElement = first.get(0);\n+        Element secondElement = second.get(0);\n+\n+        assertEquals(firstElement, secondElement, \"App menus are not identical\");\n+    }\n+\n+    \/**\n+     * Compares two menus where the first one is with an app menu and\n+     * the last one is without an app menu. This is used for comparing\n+     * the hardcoded menus inside this file to the actual menus used\n+     * when launching the application on MacOS.\n+     *\/\n+    protected void compareMenus(List<Element> withAppMenu, List<Element> withoutAppMenu) {\n+        withAppMenu = new ArrayList<>(withAppMenu);\n+\n+        assertFalse(withAppMenu.isEmpty(), \"No app menu present\");\n+        withAppMenu.remove(0);\n+\n+        assertTrue(withAppMenu.size() == withoutAppMenu.size(), \"Menu size is different: \" + withAppMenu.size() + \" != \" + withoutAppMenu.size());\n+\n+        for (int i = 0; i < withAppMenu.size(); i++) {\n+            assertEquals(withAppMenu.get(i), withoutAppMenu.get(i), \"Menus are different\");\n+        }\n+    }\n+\n+    \/**\n+     * Returns the menu bar and its menu items for the currently\n+     * active window. The result does not contain the apple menu.\n+     *\/\n+    protected List<Element> getMenusOfFocusedWindow() throws IOException {\n+        List<Element> result = getMenusOfFocusedWindow(new Stack<>());\n+        \/\/ remove apple menu\n+        result.remove(0);\n+\n+        return result;\n+    }\n+\n+    private List<Element> getMenusOfFocusedWindow(Stack<Integer> indices) throws IOException {\n+        Process process = getMenuReaderProcess(indices);\n+\n+        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()))) {\n+            String lines = getMenuReaderProcess(process.getInputStream());\n+            String error = getMenuReaderProcess(process.getErrorStream());\n+\n+            assertTrue(error.isEmpty(), error);\n+\n+            List<Element> result = new ArrayList<>();\n+            List<String> parts = Arrays.stream(lines.split(\", \"))\n+                    .filter(part -> !part.equals(\"missing value\"))\n+                    .collect(Collectors.toList());\n+\n+            if (lines.isEmpty()) {\n+                return result;\n+            }\n+\n+            for (int i = 0; i < parts.size(); i++) {\n+                indices.push(i + 1);\n+                List<Element> elements = getMenusOfFocusedWindow(indices);\n+                indices.pop();\n+\n+                result.add(new Element(parts.get(i), elements));\n+            }\n+\n+            return result;\n+        }\n+    }\n+\n+    \/**\n+     * Returns the process used for retreiving the menu items\n+     * of the currently active window. For this 'osascript' is\n+     * used as a java process.\n+     *\/\n+    private static Process getMenuReaderProcess(Stack<Integer> indices) throws IOException {\n+        StringBuilder arg = new StringBuilder(indices.isEmpty()\n+                ? \"menus\"\n+                : \"menu items\");\n+\n+        for (int i = indices.size() - 1; i >= 0; i--) {\n+            if (i == 0) {\n+                arg.append(\" of menu \" + indices.get(i) + \" \");\n+            } else {\n+                arg.append(\" of menu of menu item \" + indices.get(i) + \" \");\n+            }\n+        }\n+\n+        String[] command = { \"osascript\", \"-e\", \"tell application \\\"System Events\\\" to tell (first process whose frontmost is true) to get name of \" + arg + \" of menu bar 1\"};\n+        return new ProcessBuilder(command).start();\n+    }\n+\n+    \/**\n+     * Safely gets the output of a process. For this the input stream\n+     * of the process is supplied. This input stream can either be the\n+     * normal input stream or the error input stream.\n+     *\/\n+    private static String getMenuReaderProcess(InputStream in) throws IOException {\n+        try (BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {\n+            StringBuilder result = new StringBuilder();\n+            String line;\n+\n+            while ((line = reader.readLine()) != null) {\n+                result.append(line);\n+            }\n+\n+            return result.toString();\n+        }\n+    }\n+\n+    \/***************************************************\n+     *\n+     * Helpers for synchronization\n+     *\n+     **************************************************\/\n+\n+    protected void waitForUser() {\n+        while (!nextStep) {\n+            try {\n+                Thread.sleep(250);\n+            } catch (InterruptedException e) {\n+                \/\/ empty\n+            }\n+        }\n+\n+        nextStep = false;\n+    }\n+\n+    private void initLock() {\n+        latch = new CountDownLatch(1);\n+    }\n+\n+    private void awaitLock() {\n+        try {\n+            latch.await();\n+        } catch (InterruptedException e) {}\n+    }\n+\n+    private void releaseLock() {\n+        latch.countDown();\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/mac\/MacOSSystemMenuTestBase.java","additions":502,"deletions":0,"binary":false,"changes":502,"status":"added"}]}