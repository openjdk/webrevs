{"files":[{"patch":"@@ -3,0 +3,3 @@\n+TableView behavior shares most of the key bindings with TreeTableView behavior.\n+\n+\n","filename":"doc-files\/behavior\/TableViewBehavior.md","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+# TreeTableView Behavior\n+\n+TreeTableView Behavior inherits most of the key bindings from the TableView.  The key bindings registered by the TreeTableView are labeled with (TTV).\n+\n+\n+## Key Bindings\n+\n+|Key Combination          |Platform |Condition         |Function                                |\n+|-------------------------|---------|------------------|----------------------------------------|\n+|shortcut-A               |         |                  |select all\n+|ADD                      |         |                  |expand row (TTV)\n+|DOWN                     |         |                  |select next row\n+|shift-DOWN               |         |                  |extend selection to the next row\n+|shift-shortcut-DOWN      |         |                  |discontinuous select next row **function unclear**\n+|shortcut-DOWN            |         |                  |focus next row\n+|END                      |         |                  |select last row \n+|shift-END                |         |                  |select to last row **function unclear**\n+|shift-shortcut-END       |         |                  |discontinuous select all to last row **win,linux? on mac, END is shortcut-RIGHT** **function unclear**\n+|shortcut-END             |         |                  |focus last row **win,linux? on mac, END is shortcut-RIGHT**\n+|ENTER                    |         |                  |activate editing\n+|ESCAPE                   |         |                  |cancel editing\n+|F2                       |         |                  |activate editing\n+|HOME                     |         |                  |select first row\n+|shift-HOME               |         |                  |select to first row **function unclear**\n+|shift-shortcut-HOME      |         |                  |discontinuous select all to first row **win,linux? on mac, HOME is shortcut-LEFT** **function unclear**\n+|shortcut-HOME            |         |                  |focus first row **win,linux? on mac, HOME is shortcut-LEFT**\n+|KP_DOWN                  |         |                  |select next row\n+|shift-KP_DOWN            |         |                  |extend selection to the next row\n+|KP_LEFT                  |         |                  |LTR: collapse row; RTL: expand row; (TTV)\n+|shift-KP_LEFT            |         |                  |LTR: extend selection left cell; RTL: extend selection right cell;\n+|KP_RIGHT                 |         |                  |LTR: select right cell; RTL: select left cell;\n+|shift-KP_RIGHT           |         |                  |LTR: expand row; RTL: collapse row; (TTV)\n+|shortcut-KP_LEFT         |         |                  |LTR: focus left cell; RTL: focus right cell;\n+|KP_UP                    |         |                  |select previous row\n+|shift-KP_UP              |         |                  |extend selection to the previous row\n+|shortcut-KP_RIGHT        |         |                  |LTR: focus right cell; RTL: focus left cell;\n+|LEFT                     |         |                  |LTR: collapse row; RTL: expand row; (TTV)\n+|alt-shortcut-LEFT        |         |                  |horizontal scroll left (proposed in JDK-8313138)\n+|shift-LEFT               |         |                  |LTR: extend selection left cell; RTL: extend selection right cell;\n+|shift-shortcut-LEFT      |         |                  |LTR: discontinuous select previuos column; RTL: discontinuous select next column; **win,linux? on mac, HOME is shortcut-LEFT**\n+|shortcut-LEFT            |         |                  |LTR: focus left cell; RTL: focus right cell;\n+|MULTIPLY                 |         |                  |expand all (TTV)\n+|PAGE_DOWN                |         |                  |scroll page down\n+|shift-PAGE_DOWN          |         |                  |extend selection page down\n+|shift-shortcut-PAGE_DOWN |         |                  |discontinuous select page down **function unclear**\n+|shortcut-PAGE_DOWN       |         |                  |focus page down\n+|PAGE_UP                  |         |                  |scroll page up\n+|shift-PAGE_UP            |         |                  |extend selection page up\n+|shift-shortcut-PAGE_UP   |         |                  |discontinuous select page up **function unclear**\n+|shortcut-PAGE_UP         |         |                  |focus page up\n+|RIGHT                    |         |                  |LTR: expand row; RTL: collapse row; (TTV)\n+|shift-shortcut-RIGHT     |         |                  |LTR: discontinuous select next column; RTL: discontinuous select previous column; **win,linux? on mac, END is shortcut-RIGHT**\n+|shortcut-RIGHT           |         |                  |LTR: focus right cell; RTL: focus left cell;\n+|alt-shortcut-RIGHT       |         |                  |horizontal scroll right (proposed in JDK-8313138)\n+|shift-RIGHT              |         |                  |LTR: extend selection right cell; RTL: extend selection left cell;\n+|SPACE                    |         |                  |activate editing\n+|ctrl-SPACE               |non-mac  |                  |toggle focus owner selection\n+|ctrl-shortcut-SPACE      |mac      |                  |toggle focus owner selection\n+|shift-SPACE              |         |                  |extend selection to focus\n+|shift-shortcut-SPACE     |         |                  |extend selection to focus\n+|SUBTRACT                 |         |                  |collapse row (TTV)\n+|TAB                      |         |                  |traverse focus next\n+|shift-TAB                |         |                  |traverse focus previous\n+|UP                       |         |                  |select previous row\n+|shift-UP                 |         |                  |extend selection to the previous row\n+|shift-shortcut-UP        |         |                  |discontinuous select previous row **function unclear**\n+|shortcut-UP              |         |                  |focus previous row\n+\n+\n+\n+### Notes\n+\n+1. On Mac, alt is represented by the Option key.\n+2. On Mac, shortcut is represented by the Command key.\n+\n+\n+### macOS Aliases\n+\n+- Home: command-LEFT\n+- End: command-RIGHT\n+- PgUp: fn-UP\n+- PgDn: fn-DOWN\n","filename":"doc-files\/behavior\/TreeTableViewBehavior.md","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/TableViewBehavior.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+\n@@ -42,1 +43,0 @@\n-import javafx.util.Callback;\n@@ -44,0 +44,1 @@\n+import javafx.util.Callback;\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/TreeTableViewBehavior.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import javafx.geometry.NodeOrientation;\n@@ -217,9 +218,1 @@\n-        behavior.setOnHorizontalUnitScroll((right) -> {\n-            \/\/ TODO this should have beem a public method in VirtualFlow\n-            ScrollBar sb = flow.getHbar();\n-            if(right) {\n-                sb.increment();\n-            } else {\n-                sb.decrement();\n-            }\n-        });\n+        behavior.setOnHorizontalUnitScroll(this::horizontalUnitScroll);\n@@ -688,0 +681,12 @@\n+\n+    private void horizontalUnitScroll(boolean right) {\n+        if (getSkinnable().getEffectiveNodeOrientation() == NodeOrientation.RIGHT_TO_LEFT) {\n+            right = !right;\n+        }\n+        ScrollBar sb = flow.getHbar();\n+        if (right) {\n+            sb.increment();\n+        } else {\n+            sb.decrement();\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/ListViewSkin.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import javafx.geometry.NodeOrientation;\n@@ -118,9 +119,1 @@\n-        behavior.setOnHorizontalUnitScroll((right) -> {\n-            \/\/ TODO this should have beem a public method in VirtualFlow\n-            ScrollBar sb = flow.getHbar();\n-            if(right) {\n-                sb.increment();\n-            } else {\n-                sb.decrement();\n-            }\n-        });\n+        behavior.setOnHorizontalUnitScroll(this::horizontalUnitScroll);\n@@ -241,0 +234,12 @@\n+\n+    private void horizontalUnitScroll(boolean right) {\n+        if (getSkinnable().getEffectiveNodeOrientation() == NodeOrientation.RIGHT_TO_LEFT) {\n+            right = !right;\n+        }\n+        ScrollBar sb = flow.getHbar();\n+        if (right) {\n+            sb.increment();\n+        } else {\n+            sb.decrement();\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableViewSkin.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import javafx.geometry.NodeOrientation;\n@@ -130,9 +131,1 @@\n-        behavior.setOnHorizontalUnitScroll((right) -> {\n-            \/\/ TODO this should have beem a public method in VirtualFlow\n-            ScrollBar sb = flow.getHbar();\n-            if(right) {\n-                sb.increment();\n-            } else {\n-                sb.decrement();\n-            }\n-        });\n+        behavior.setOnHorizontalUnitScroll(this::horizontalUnitScroll);\n@@ -371,0 +364,12 @@\n+\n+    private void horizontalUnitScroll(boolean right) {\n+        if (getSkinnable().getEffectiveNodeOrientation() == NodeOrientation.RIGHT_TO_LEFT) {\n+            right = !right;\n+        }\n+        ScrollBar sb = flow.getHbar();\n+        if (right) {\n+            sb.increment();\n+        } else {\n+            sb.decrement();\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TreeTableViewSkin.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import javafx.geometry.NodeOrientation;\n@@ -193,1 +194,0 @@\n-        \/\/ FIX unnecessary, make the behavior class abstract\n@@ -203,9 +203,1 @@\n-        behavior.setOnHorizontalUnitScroll((right) -> {\n-            \/\/ TODO this should have beem a public method in VirtualFlow\n-            ScrollBar sb = flow.getHbar();\n-            if(right) {\n-                sb.increment();\n-            } else {\n-                sb.decrement();\n-            }\n-        });\n+        behavior.setOnHorizontalUnitScroll(this::horizontalUnitScroll);\n@@ -630,0 +622,12 @@\n+\n+    private void horizontalUnitScroll(boolean right) {\n+        if (getSkinnable().getEffectiveNodeOrientation() == NodeOrientation.RIGHT_TO_LEFT) {\n+            right = !right;\n+        }\n+        ScrollBar sb = flow.getHbar();\n+        if (right) {\n+            sb.increment();\n+        } else {\n+            sb.decrement();\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TreeViewSkin.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control.behavior;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.geometry.NodeOrientation;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.ScrollBar;\n+import javafx.scene.control.skin.VirtualFlowShim;\n+import javafx.scene.input.KeyCode;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+\n+\/**\n+ * ListView Behavior Test.\n+ *\/\n+public class ListViewBehaviorTest extends BehaviorTestBase<ListView<String>> {\n+    @BeforeEach\n+    public void beforeEach() {\n+        ObservableList<String> items = FXCollections.observableArrayList(\n+            \"very very long text so we can get a horizontal scroll bar\",\n+            \"another\",\n+            \"another one\",\n+            \"make sure the strings are unique\"\n+        );\n+        initStage(new ListView<>(items));\n+    }\n+\n+    @AfterEach\n+    public void afterEach() {\n+        closeStage();\n+    }\n+\n+    \/**\n+     * Verifies that alt-shortcut-RIGHT\/LEFT scrolls horizontally in LTR orientation.\n+     *\/\n+    @Test\n+    public void testHorizontalScrollKeyboardLTR() {\n+        AtomicReference<Double> pos = new AtomicReference<>();\n+        execute(\n+            exe(() -> {\n+                control.setMaxWidth(50);\n+                control.setNodeOrientation(NodeOrientation.LEFT_TO_RIGHT);\n+                double w = hsb().getValue();\n+                pos.set(w);\n+            }),\n+            key(KeyCode.RIGHT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() < w);\n+                pos.set(w);\n+            }),\n+            key(KeyCode.LEFT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() > w);\n+            })\n+        );\n+    }\n+\n+    \/**\n+     * Verifies that alt-shortcut-RIGHT\/LEFT scrolls horizontally in RTL orientation.\n+     *\/\n+    @Test\n+    public void testHorizontalScrollKeyboardRTL() {\n+        AtomicReference<Double> pos = new AtomicReference<>();\n+        execute(\n+            exe(() -> {\n+                control.setMaxWidth(50);\n+                control.setNodeOrientation(NodeOrientation.RIGHT_TO_LEFT);\n+                double w = hsb().getValue();\n+                pos.set(w);\n+            }),\n+            key(KeyCode.LEFT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() < w);\n+                pos.set(w);\n+            }),\n+            key(KeyCode.RIGHT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() > w);\n+            })\n+        );\n+    }\n+\n+    private ScrollBar hsb() {\n+        var f = VirtualFlowShim.getVirtualFlow(control.getSkin());\n+        return VirtualFlowShim.getHBar(f);\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/behavior\/ListViewBehaviorTest.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control.behavior;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.geometry.NodeOrientation;\n+import javafx.scene.control.ScrollBar;\n+import javafx.scene.control.TableCell;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.skin.VirtualFlowShim;\n+import javafx.scene.input.KeyCode;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+\n+\/**\n+ * TableView Behavior Test.\n+ *\/\n+public class TableViewBehaviorTest extends BehaviorTestBase<TableView<Integer>> {\n+    @BeforeEach\n+    public void beforeEach() {\n+        ObservableList<Integer> items = FXCollections.observableArrayList(1, 2, 3, 4, 5, 6);\n+        TableView<Integer> t = new TableView<>(items);\n+        t.setColumnResizePolicy(TableView.UNCONSTRAINED_RESIZE_POLICY);\n+        TableColumn<Integer,String> tc = new TableColumn<>();\n+        tc.setCellFactory((v) -> {\n+            return new TableCell<>() {\n+                @Override\n+                protected void updateItem(String item, boolean empty) {\n+                    super.updateItem(item, empty);\n+                    setText(item);\n+                }\n+            };\n+        });\n+        tc.setPrefWidth(1000);\n+        t.getColumns().add(tc);\n+        initStage(t);\n+    }\n+\n+    @AfterEach\n+    public void afterEach() {\n+        closeStage();\n+    }\n+\n+    \/**\n+     * Verifies that alt-shortcut-RIGHT\/LEFT scrolls horizontally in LTR orientation.\n+     *\/\n+    @Test\n+    public void testHorizontalScrollKeyboardLTR() {\n+        AtomicReference<Double> pos = new AtomicReference<>();\n+        execute(\n+            exe(() -> {\n+                control.setMaxWidth(50);\n+                control.setNodeOrientation(NodeOrientation.LEFT_TO_RIGHT);\n+                double w = hsb().getValue();\n+                pos.set(w);\n+            }),\n+            key(KeyCode.RIGHT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() < w);\n+                pos.set(w);\n+            }),\n+            key(KeyCode.LEFT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() > w);\n+            })\n+        );\n+    }\n+\n+    \/**\n+     * Verifies that alt-shortcut-RIGHT\/LEFT scrolls horizontally in RTL orientation.\n+     *\/\n+    @Test\n+    public void testHorizontalScrollKeyboardRTL() {\n+        AtomicReference<Double> pos = new AtomicReference<>();\n+        execute(\n+            exe(() -> {\n+                control.setMaxWidth(50);\n+                control.setNodeOrientation(NodeOrientation.RIGHT_TO_LEFT);\n+                double w = hsb().getValue();\n+                pos.set(w);\n+            }),\n+            key(KeyCode.LEFT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() < w);\n+                pos.set(w);\n+            }),\n+            key(KeyCode.RIGHT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() > w);\n+            })\n+        );\n+    }\n+\n+    private ScrollBar hsb() {\n+        var f = VirtualFlowShim.getVirtualFlow(control.getSkin());\n+        return VirtualFlowShim.getHBar(f);\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/behavior\/TableViewBehaviorTest.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control.behavior;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+import javafx.geometry.NodeOrientation;\n+import javafx.scene.control.ScrollBar;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableCell;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTableView;\n+import javafx.scene.control.skin.VirtualFlowShim;\n+import javafx.scene.input.KeyCode;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+\n+\/**\n+ * TreeTableView Behavior Test.\n+ *\/\n+public class TreeTableViewBehaviorTest extends BehaviorTestBase<TreeTableView<Integer>> {\n+    @BeforeEach\n+    public void beforeEach() {\n+        TreeItem<Integer> root = new TreeItem(1);\n+        TreeTableView<Integer> t = new TreeTableView<>(root);\n+        t.setShowRoot(true);\n+        t.setColumnResizePolicy(TreeTableView.UNCONSTRAINED_RESIZE_POLICY);\n+        TreeTableColumn<Integer,String> tc = new TreeTableColumn<>();\n+        tc.setCellFactory((v) -> {\n+            return new TreeTableCell<>() {\n+                @Override\n+                protected void updateItem(String item, boolean empty) {\n+                    super.updateItem(item, empty);\n+                    setText(item);\n+                }\n+            };\n+        });\n+        tc.setPrefWidth(1000);\n+        t.getColumns().add(tc);\n+        initStage(t);\n+    }\n+\n+    @AfterEach\n+    public void afterEach() {\n+        closeStage();\n+    }\n+\n+    \/**\n+     * Verifies that alt-shortcut-RIGHT\/LEFT scrolls horizontally in LTR orientation.\n+     *\/\n+    @Test\n+    public void testHorizontalScrollKeyboardLTR() {\n+        AtomicReference<Double> pos = new AtomicReference<>();\n+        execute(\n+            exe(() -> {\n+                control.setMaxWidth(50);\n+                control.setNodeOrientation(NodeOrientation.LEFT_TO_RIGHT);\n+                double w = hsb().getValue();\n+                pos.set(w);\n+            }),\n+            key(KeyCode.RIGHT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() < w);\n+                pos.set(w);\n+            }),\n+            key(KeyCode.LEFT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() > w);\n+            })\n+        );\n+    }\n+\n+    \/**\n+     * Verifies that alt-shortcut-RIGHT\/LEFT scrolls horizontally in RTL orientation.\n+     *\/\n+    @Test\n+    public void testHorizontalScrollKeyboardRTL() {\n+        AtomicReference<Double> pos = new AtomicReference<>();\n+        execute(\n+            exe(() -> {\n+                control.setMaxWidth(50);\n+                control.setNodeOrientation(NodeOrientation.RIGHT_TO_LEFT);\n+                double w = hsb().getValue();\n+                pos.set(w);\n+            }),\n+            key(KeyCode.LEFT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() < w);\n+                pos.set(w);\n+            }),\n+            key(KeyCode.RIGHT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() > w);\n+            })\n+        );\n+    }\n+\n+    private ScrollBar hsb() {\n+        var f = VirtualFlowShim.getVirtualFlow(control.getSkin());\n+        return VirtualFlowShim.getHBar(f);\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/behavior\/TreeTableViewBehaviorTest.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control.behavior;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+import javafx.geometry.NodeOrientation;\n+import javafx.scene.control.ScrollBar;\n+import javafx.scene.control.TreeCell;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.control.skin.VirtualFlowShim;\n+import javafx.scene.input.KeyCode;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+\n+\/**\n+ * TreeView Behavior Test.\n+ *\/\n+public class TreeViewBehaviorTest extends BehaviorTestBase<TreeView<Integer>> {\n+    @BeforeEach\n+    public void beforeEach() {\n+        TreeItem<Integer> root = new TreeItem(1);\n+        TreeView<Integer> t = new TreeView<>(root);\n+        t.setCellFactory((v) -> {\n+            return new TreeCell<>() {\n+                @Override\n+                protected void updateItem(Integer item, boolean empty) {\n+                    super.updateItem(item, empty);\n+                    setText(\"make the preferred width of the column really big \" + item);\n+                }\n+            };\n+        });\n+        t.setShowRoot(true);\n+        initStage(t);\n+    }\n+\n+    @AfterEach\n+    public void afterEach() {\n+        closeStage();\n+    }\n+\n+    \/**\n+     * Verifies that alt-shortcut-RIGHT\/LEFT scrolls horizontally in LTR orientation.\n+     *\/\n+    @Test\n+    public void testHorizontalScrollKeyboardLTR() {\n+        AtomicReference<Double> pos = new AtomicReference<>();\n+        execute(\n+            exe(() -> {\n+                control.setMaxWidth(50);\n+                control.setNodeOrientation(NodeOrientation.LEFT_TO_RIGHT);\n+                double w = hsb().getValue();\n+                pos.set(w);\n+            }),\n+            key(KeyCode.RIGHT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() < w);\n+                pos.set(w);\n+            }),\n+            key(KeyCode.LEFT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() > w);\n+            })\n+        );\n+    }\n+\n+    \/**\n+     * Verifies that alt-shortcut-RIGHT\/LEFT scrolls horizontally in RTL orientation.\n+     *\/\n+    @Test\n+    public void testHorizontalScrollKeyboardRTL() {\n+        AtomicReference<Double> pos = new AtomicReference<>();\n+        execute(\n+            exe(() -> {\n+                control.setMaxWidth(50);\n+                control.setNodeOrientation(NodeOrientation.RIGHT_TO_LEFT);\n+                double w = hsb().getValue();\n+                pos.set(w);\n+            }),\n+            key(KeyCode.LEFT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() < w);\n+                pos.set(w);\n+            }),\n+            key(KeyCode.RIGHT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() > w);\n+            })\n+        );\n+    }\n+\n+    private ScrollBar hsb() {\n+        var f = VirtualFlowShim.getVirtualFlow(control.getSkin());\n+        return VirtualFlowShim.getHBar(f);\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/behavior\/TreeViewBehaviorTest.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}