{"files":[{"patch":"@@ -0,0 +1,73 @@\n+# ListView Behavior\n+\n+## Key Bindings\n+\n+|Key Combination          |Platform |Condition         |Function                                |\n+|-------------------------|---------|------------------|----------------------------------------|\n+|shortcut-A               |         |not in combo box  |select all\n+|shortcut-BACKSLASH       |         |                  |clear selection\n+|DOWN                     |         |vertical          |select next row\n+|alt-shortcut-DOWN        |         |                  |vertical unit scroll down\n+|shift-DOWN               |         |vertical          |extend selection to the next row\n+|shift-shortcut-DOWN      |         |vertical          |discontinuous select next row **function unclear**\n+|shortcut-DOWN            |         |vertical          |focus next row\n+|END                      |         |not editing       |select last row \n+|shift-END                |         |not in edit field |select to last row **function unclear**\n+|shift-shortcut-END       |         |vertical, not in combo box |discontinuous select all to last row **win,linux? on mac, END is shortcut-RIGHT** **function unclear**\n+|shortcut-END             |         |not in combo box  |focus last row **win,linux? on mac, END is shortcut-RIGHT** **function unclear**\n+|ENTER                    |         |                  |activate editing\n+|ESCAPE                   |         |                  |cancel editing\n+|F2                       |         |                  |activate editing\n+|HOME                     |         |not editing       |select first row\n+|shift-HOME               |         |not in edit field |select to first row **function unclear**\n+|shift-shortcut-HOME      |         |vertical, not in combo box |discontinuous select all to first row **win,linux? on mac, HOME is shortcut-LEFT** **function unclear**\n+|shortcut-HOME            |         |not in combo box  |focus first row **win,linux? on mac, HOME is shortcut-LEFT**\n+|KP_DOWN                  |         |vertical          |select next row\n+|shift-KP_DOWN            |         |vertical          |extend selection to the next row\n+|KP_LEFT                  |         |horizontal        |select previous row\n+|shift-KP_LEFT            |         |horizontal        |extend selection to the previous row\n+|KP_RIGHT                 |         |horizontal        |select next row\n+|shift-KP_RIGHT           |         |horizontal        |extend selection to the next row\n+|KP_UP                    |         |vertical          |select previous row\n+|shift-KP_UP              |         |vertical          |extend selection to the previous row\n+|LEFT                     |         |horizontal        |select previous row\n+|alt-shortcut-LEFT        |         |                  |horizontal unit scroll left\n+|shift-LEFT               |         |horizontal        |extend selection to the previous row\n+|shift-shortcut-LEFT      |         |horizontal        |discontinuous select previous row **function unclear**\n+|shortcut-LEFT            |         |horizontal        |move focus to the previous row\n+|PAGE_DOWN                |         |                  |scroll page down\n+|shift-PAGE_DOWN          |         |                  |select to last row\n+|shift-shortcut-PAGE_DOWN |         |vertical          |discontinuous select page down **function unclear**\n+|shortcut-PAGE_DOWN       |         |not in edit field |focus page down\n+|PAGE_UP                  |         |                  |scroll page up\n+|shift-PAGE_UP            |         |                  |select to first row\n+|shift-shortcut-PAGE_UP   |         |vertical          |discontinuous select page up **function unclear**\n+|shortcut-PAGE_UP         |         |not in edit field |focus page up\n+|RIGHT                    |         |horizontal        |select next row\n+|alt-shortcut-RIGHT       |         |                  |horizontal unit scroll right\n+|shift-RIGHT              |         |horizontal        |extend selection to the next row\n+|shift-shortcut-RIGHT     |         |horizontal        |discontinuous select next row **function unclear**\n+|shortcut-RIGHT           |         |horizontal        |move focus to the next row\n+|SPACE                    |         |                  |activate editing\n+|ctrl-SPACE               |non-mac  |                  |toggle focus of selected row, set anchor to same\n+|ctrl-shortcut-SPACE      |mac      |                  |toggle focus of selected row, set anchor to same\n+|shift-SPACE              |         |                  |select all to focus ??\n+|shift-shortcut-SPACE     |         |                  |select all to focus, set anchor **function unclear**\n+|UP                       |         |vertical          |select previous row\n+|alt-shortcut-UP          |         |                  |vertical unit scroll up\n+|shift-UP                 |         |vertical          |extend selection to the previous row\n+|shift-shortcut-UP        |         |vertical          |discontinuous select previous row **function unclear**\n+|shortcut-UP              |         |vertical          |focus previous row\n+\n+\n+\n+### Notes\n+\n+1. On macOS, `alt` is represented by the `option` key\n+2. On macOS, `shortcut` is represented by the `command` key\n+3. On macOS, Home = `command` left arrow key\n+4. On macOS, End = `command` right arrow key\n+5. On macOS, PgUp = `fn` + `up arrow` key\n+6. On macOS, PgDn = `fn` + `down arrow` key\n+7. On macOS, BACKSPACE = `delete` key\n+8. On macOS, DELETE = `fn` + `delete` key\n","filename":"doc-files\/behavior\/ListViewBehavior.md","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+# TableView Behavior\n+\n+TableView behavior shares most of the key bindings with TreeTableView behavior.\n+\n+\n+## Key Bindings\n+\n+|Key Combination          |Platform |Condition         |Function                                |\n+|-------------------------|---------|------------------|----------------------------------------|\n+|shortcut-A               |         |                  |select all\n+|DOWN                     |         |                  |select next row\n+|alt-shortcut-DOWN        |         |                  |vertical unit scroll down\n+|shift-DOWN               |         |                  |extend selection to the next row\n+|shift-shortcut-DOWN      |         |                  |discontinuous select next row **function unclear**\n+|shortcut-DOWN            |         |                  |focus next row\n+|END                      |         |                  |select last row \n+|shift-END                |         |                  |select to last row **function unclear**\n+|shift-shortcut-END       |         |                  |discontinuous select all to last row **win,linux? on mac, END is shortcut-RIGHT** **function unclear**\n+|shortcut-END             |         |                  |focus last row **win,linux? on mac, END is shortcut-RIGHT**\n+|ENTER                    |         |                  |activate editing\n+|ESCAPE                   |         |                  |cancel editing\n+|F2                       |         |                  |activate editing\n+|HOME                     |         |                  |select first row\n+|shift-HOME               |         |                  |select to first row **function unclear**\n+|shift-shortcut-HOME      |         |                  |discontinuous select all to first row **win,linux? on mac, HOME is shortcut-LEFT** **function unclear**\n+|shortcut-HOME            |         |                  |focus first row **win,linux? on mac, HOME is shortcut-LEFT**\n+|KP_DOWN                  |         |                  |select next row\n+|shift-KP_DOWN            |         |                  |extend selection to the next row\n+|KP_LEFT                  |         |                  |LTR: select left cell; RTL: select right cell;\n+|shift-KP_LEFT            |         |                  |LTR: extend selection left cell; RTL: extend selection right cell;\n+|KP_RIGHT                 |         |                  |LTR: select right cell; RTL: select left cell;\n+|shift-KP_RIGHT           |         |                  |LTR: extend selection right cell; RTL: extend selection left cell;\n+|shortcut-KP_LEFT         |         |                  |LTR: focus left cell; RTL: focus right cell;\n+|KP_UP                    |         |                  |select previous row\n+|shift-KP_UP              |         |                  |extend selection to the previous row\n+|shortcut-KP_RIGHT        |         |                  |LTR: focus right cell; RTL: focus left cell;\n+|LEFT                     |         |                  |LTR: select left cell; RTL: select right cell;\n+|alt-shortcut-LEFT        |         |                  |horizontal unti scroll left\n+|shift-LEFT               |         |                  |LTR: extend selection left cell; RTL: extend selection right cell;\n+|shift-shortcut-LEFT      |         |                  |LTR: discontinuous select previuos column; RTL: discontinuous select next column; **win,linux? on mac, HOME is shortcut-LEFT**\n+|shortcut-LEFT            |         |                  |LTR: focus left cell; RTL: focus right cell;\n+|PAGE_DOWN                |         |                  |scroll page down\n+|shift-PAGE_DOWN          |         |                  |extend selection page down\n+|shift-shortcut-PAGE_DOWN |         |                  |discontinuous select page down **function unclear**\n+|shortcut-PAGE_DOWN       |         |                  |focus page down\n+|PAGE_UP                  |         |                  |scroll page up\n+|shift-PAGE_UP            |         |                  |extend selection page up\n+|shift-shortcut-PAGE_UP   |         |                  |discontinuous select page up **function unclear**\n+|shortcut-PAGE_UP         |         |                  |focus page up\n+|RIGHT                    |         |                  |LTR: select right cell; RTL: select left cell;\n+|alt-shortcut-RIGHT       |         |                  |horizontal unit scroll right\n+|shift-shortcut-RIGHT     |         |                  |LTR: discontinuous select next column; RTL: discontinuous select previous column; **win,linux? on mac, END is shortcut-RIGHT**\n+|shortcut-RIGHT           |         |                  |LTR: focus right cell; RTL: focus left cell;\n+|shift-RIGHT              |         |                  |LTR: extend selection right cell; RTL: extend selection left cell;\n+|SPACE                    |         |                  |activate editing\n+|ctrl-SPACE               |non-mac  |                  |toggle focus owner selection\n+|ctrl-shortcut-SPACE      |mac      |                  |toggle focus owner selection\n+|shift-SPACE              |         |                  |extend selection to focus\n+|shift-shortcut-SPACE     |         |                  |extend selection to focus\n+|TAB                      |         |                  |traverse focus next\n+|shift-TAB                |         |                  |traverse focus previous\n+|UP                       |         |                  |select previous row\n+|alt-shortcut-UP          |         |                  |vertical unit scroll up\n+|shift-UP                 |         |                  |extend selection to the previous row\n+|shift-shortcut-UP        |         |                  |discontinuous select previous row **function unclear**\n+|shortcut-UP              |         |                  |focus previous row\n+\n+\n+\n+### Notes\n+\n+1. On macOS, `alt` is represented by the `option` key\n+2. On macOS, `shortcut` is represented by the `command` key\n+3. On macOS, Home = `command` left arrow key\n+4. On macOS, End = `command` right arrow key\n+5. On macOS, PgUp = `fn` + `up arrow` key\n+6. On macOS, PgDn = `fn` + `down arrow` key\n+7. On macOS, BACKSPACE = `delete` key\n+8. On macOS, DELETE = `fn` + `delete` key\n","filename":"doc-files\/behavior\/TableViewBehavior.md","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+# TreeTableView Behavior\n+\n+TreeTableView Behavior inherits most of the key bindings from the TableView.  The key bindings registered by the TreeTableView are labeled with (TTV).\n+\n+\n+## Key Bindings\n+\n+|Key Combination          |Platform |Condition         |Function                                |\n+|-------------------------|---------|------------------|----------------------------------------|\n+|shortcut-A               |         |                  |select all\n+|ADD                      |         |                  |expand row (TTV)\n+|DOWN                     |         |                  |select next row\n+|alt-shortcut-DOWN        |         |                  |vertical unit scroll down\n+|shift-DOWN               |         |                  |extend selection to the next row\n+|shift-shortcut-DOWN      |         |                  |discontinuous select next row **function unclear**\n+|shortcut-DOWN            |         |                  |focus next row\n+|END                      |         |                  |select last row \n+|shift-END                |         |                  |select to last row **function unclear**\n+|shift-shortcut-END       |         |                  |discontinuous select all to last row **win,linux? on mac, END is shortcut-RIGHT** **function unclear**\n+|shortcut-END             |         |                  |focus last row **win,linux? on mac, END is shortcut-RIGHT**\n+|ENTER                    |         |                  |activate editing\n+|ESCAPE                   |         |                  |cancel editing\n+|F2                       |         |                  |activate editing\n+|HOME                     |         |                  |select first row\n+|shift-HOME               |         |                  |select to first row **function unclear**\n+|shift-shortcut-HOME      |         |                  |discontinuous select all to first row **win,linux? on mac, HOME is shortcut-LEFT** **function unclear**\n+|shortcut-HOME            |         |                  |focus first row **win,linux? on mac, HOME is shortcut-LEFT**\n+|KP_DOWN                  |         |                  |select next row\n+|shift-KP_DOWN            |         |                  |extend selection to the next row\n+|KP_LEFT                  |         |                  |LTR: collapse row; RTL: expand row; (TTV)\n+|shift-KP_LEFT            |         |                  |LTR: extend selection left cell; RTL: extend selection right cell;\n+|KP_RIGHT                 |         |                  |LTR: select right cell; RTL: select left cell;\n+|shift-KP_RIGHT           |         |                  |LTR: expand row; RTL: collapse row; (TTV)\n+|shortcut-KP_LEFT         |         |                  |LTR: focus left cell; RTL: focus right cell;\n+|KP_UP                    |         |                  |select previous row\n+|shift-KP_UP              |         |                  |extend selection to the previous row\n+|shortcut-KP_RIGHT        |         |                  |LTR: focus right cell; RTL: focus left cell;\n+|LEFT                     |         |                  |LTR: collapse row; RTL: expand row; (TTV)\n+|alt-shortcut-LEFT        |         |                  |horizontal unit scroll left\n+|shift-LEFT               |         |                  |LTR: extend selection left cell; RTL: extend selection right cell;\n+|shift-shortcut-LEFT      |         |                  |LTR: discontinuous select previuos column; RTL: discontinuous select next column; **win,linux? on mac, HOME is shortcut-LEFT**\n+|shortcut-LEFT            |         |                  |LTR: focus left cell; RTL: focus right cell;\n+|MULTIPLY                 |         |                  |expand all (TTV)\n+|PAGE_DOWN                |         |                  |scroll page down\n+|shift-PAGE_DOWN          |         |                  |extend selection page down\n+|shift-shortcut-PAGE_DOWN |         |                  |discontinuous select page down **function unclear**\n+|shortcut-PAGE_DOWN       |         |                  |focus page down\n+|PAGE_UP                  |         |                  |scroll page up\n+|shift-PAGE_UP            |         |                  |extend selection page up\n+|shift-shortcut-PAGE_UP   |         |                  |discontinuous select page up **function unclear**\n+|shortcut-PAGE_UP         |         |                  |focus page up\n+|RIGHT                    |         |                  |LTR: expand row; RTL: collapse row; (TTV)\n+|alt-shortcut-RIGHT       |         |                  |horizontal unit scroll right\n+|shift-shortcut-RIGHT     |         |                  |LTR: discontinuous select next column; RTL: discontinuous select previous column; **win,linux? on mac, END is shortcut-RIGHT**\n+|shortcut-RIGHT           |         |                  |LTR: focus right cell; RTL: focus left cell;\n+|shift-RIGHT              |         |                  |LTR: extend selection right cell; RTL: extend selection left cell;\n+|SPACE                    |         |                  |activate editing\n+|ctrl-SPACE               |non-mac  |                  |toggle focus owner selection\n+|ctrl-shortcut-SPACE      |mac      |                  |toggle focus owner selection\n+|shift-SPACE              |         |                  |extend selection to focus\n+|shift-shortcut-SPACE     |         |                  |extend selection to focus\n+|SUBTRACT                 |         |                  |collapse row (TTV)\n+|TAB                      |         |                  |traverse focus next\n+|shift-TAB                |         |                  |traverse focus previous\n+|UP                       |         |                  |select previous row\n+|alt-shortcut-UP          |         |                  |vertical unit scroll up\n+|shift-UP                 |         |                  |extend selection to the previous row\n+|shift-shortcut-UP        |         |                  |discontinuous select previous row **function unclear**\n+|shortcut-UP              |         |                  |focus previous row\n+\n+\n+\n+### Notes\n+\n+1. On macOS, `alt` is represented by the `option` key\n+2. On macOS, `shortcut` is represented by the `command` key\n+3. On macOS, Home = `command` left arrow key\n+4. On macOS, End = `command` right arrow key\n+5. On macOS, PgUp = `fn` + `up arrow` key\n+6. On macOS, PgDn = `fn` + `down arrow` key\n+7. On macOS, BACKSPACE = `delete` key\n+8. On macOS, DELETE = `fn` + `delete` key\n","filename":"doc-files\/behavior\/TreeTableViewBehavior.md","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,67 @@\n+# TreeView Behavior\n+\n+## Key Bindings\n+\n+|Key Combination          |Platform |Condition         |Function                                |\n+|-------------------------|---------|------------------|----------------------------------------|\n+|shortcut-A               |         |                  |select all\n+|ADD                      |         |                  |expand row\n+|DOWN                     |         |                  |select next row\n+|alt-shortcut-DOWN        |         |                  |vertical unit scroll down\n+|shift-DOWN               |         |                  |extend selection to the next row\n+|shift-shortcut-DOWN      |         |                  |discontinuous select next row **function unclear**\n+|shortcut-DOWN            |         |                  |focus next row\n+|END                      |         |                  |select last row \n+|shift-END                |         |                  |select to last row **function unclear**\n+|shift-shortcut-END       |         |                  |discontinuous select all to last row **win,linux? on mac, END is shortcut-RIGHT** **function unclear**\n+|shortcut-END             |         |                  |focus last row **win,linux? on mac, END is shortcut-RIGHT** **function unclear**\n+|ENTER                    |         |                  |activate editing\n+|ESCAPE                   |         |                  |cancel editing\n+|F2                       |         |                  |activate editing\n+|HOME                     |         |                  |select first row\n+|shift-HOME               |         |                  |select to first row **function unclear**\n+|shift-shortcut-HOME      |         |                  |discontinuous select all to first row **win,linux? on mac, HOME is shortcut-LEFT** **function unclear**\n+|shortcut-HOME            |         |                  |focus first row **win,linux? on mac, HOME is shortcut-LEFT**\n+|KP_DOWN                  |         |                  |select next row\n+|shift-KP_DOWN            |         |                  |extend selection to the next row\n+|KP_LEFT                  |         |                  |LTR: collapse row; RTL: expand row;\n+|KP_RIGHT                 |         |                  |LTR: expand row; RTL: collapse row;\n+|KP_UP                    |         |                  |select previous row\n+|shift-KP_UP              |         |                  |extend selection to the previous row\n+|LEFT                     |         |                  |LTR: collapse row; RTL: expand row;\n+|alt-shortcut-LEFT        |         |                  |horizontal unit scroll left\n+|MULTIPLY                 |         |                  |expand all\n+|PAGE_DOWN                |         |                  |scroll page down\n+|shift-PAGE_DOWN          |         |                  |select all page down **function unclear**\n+|shift-shortcut-PAGE_DOWN |         |                  |discontinuous select page down **function unclear**\n+|shortcut-PAGE_DOWN       |         |                  |focus page down\n+|PAGE_UP                  |         |                  |scroll page up\n+|shift-PAGE_UP            |         |                  |select all page up **function unclear**\n+|shift-shortcut-PAGE_UP   |         |                  |discontinuous select page up **function unclear**\n+|shortcut-PAGE_UP         |         |                  |focus page up\n+|RIGHT                    |         |                  |LTR: expand row; RTL: collapse row;\n+|alt-shortcut-RIGHT       |         |                  |horizontal unit scroll right\n+|SPACE                    |         |                  |toggle focus owner selection\n+|ctrl-SPACE               |non-mac  |                  |toggle focus owner selection\n+|ctrl-shortcut-SPACE      |mac      |                  |toggle focus owner selection\n+|shift-SPACE              |         |                  |select all to focus **function unclear**\n+|shift-shortcut-SPACE     |         |                  |select all to focus, set anchor **function unclear**\n+|SUBTRACT                 |         |                  |collapse row\n+|UP                       |         |                  |select previous row\n+|alt-shortcut-UP          |         |                  |vertical unit scroll up\n+|shift-UP                 |         |                  |extend selection to the previous row\n+|shift-shortcut-UP        |         |                  |discontinuous select previous row **function unclear**\n+|shortcut-UP              |         |                  |focus previous row\n+\n+\n+\n+### Notes\n+\n+1. On macOS, `alt` is represented by the `option` key\n+2. On macOS, `shortcut` is represented by the `command` key\n+3. On macOS, Home = `command` left arrow key\n+4. On macOS, End = `command` right arrow key\n+5. On macOS, PgUp = `fn` + `up arrow` key\n+6. On macOS, PgDn = `fn` + `down arrow` key\n+7. On macOS, BACKSPACE = `delete` key\n+8. On macOS, DELETE = `fn` + `delete` key\n","filename":"doc-files\/behavior\/TreeViewBehavior.md","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,6 @@\n-import com.sun.javafx.PlatformUtil;\n-import com.sun.javafx.scene.control.skin.Utils;\n+import static javafx.scene.input.KeyCode.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n@@ -41,2 +45,0 @@\n-import com.sun.javafx.scene.control.inputmap.InputMap;\n-import com.sun.javafx.scene.control.inputmap.KeyBinding;\n@@ -46,8 +48,6 @@\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.function.Predicate;\n-import java.util.function.Supplier;\n-\n-import static com.sun.javafx.scene.control.inputmap.InputMap.*;\n-import static javafx.scene.input.KeyCode.*;\n+import com.sun.javafx.PlatformUtil;\n+import com.sun.javafx.scene.control.inputmap.InputMap;\n+import com.sun.javafx.scene.control.inputmap.InputMap.KeyMapping;\n+import com.sun.javafx.scene.control.inputmap.InputMap.MouseMapping;\n+import com.sun.javafx.scene.control.inputmap.KeyBinding;\n+import com.sun.javafx.scene.control.skin.Utils;\n@@ -118,0 +118,5 @@\n+            new KeyMapping(new KeyBinding(RIGHT).shortcut().alt(), e -> horizontalUnitScroll(true)),\n+            new KeyMapping(new KeyBinding(LEFT).shortcut().alt(), e -> horizontalUnitScroll(false)),\n+            new KeyMapping(new KeyBinding(UP).shortcut().alt(), e -> verticalUnitScroll(false)),\n+            new KeyMapping(new KeyBinding(DOWN).shortcut().alt(), e -> verticalUnitScroll(true)),\n+\n@@ -234,0 +239,12 @@\n+\n+        onScrollPageUp = null;\n+        onScrollPageDown = null;\n+        onFocusPreviousRow = null;\n+        onFocusNextRow = null;\n+        onSelectPreviousRow = null;\n+        onSelectNextRow = null;\n+        onMoveToFirstCell = null;\n+        onMoveToLastCell = null;\n+        onHorizontalUnitScroll = null;\n+        onVerticalUnitScroll = null;\n+\n@@ -915,0 +932,24 @@\n+\n+    \/\/ TODO not necessary with the new InputMap V2\n+    private Consumer<Boolean> onHorizontalUnitScroll;\n+    private Consumer<Boolean> onVerticalUnitScroll;\n+\n+    public void setOnHorizontalUnitScroll(Consumer<Boolean> f) {\n+        onHorizontalUnitScroll = f;\n+    }\n+\n+    public void setOnVerticalUnitScroll(Consumer<Boolean> f) {\n+        onVerticalUnitScroll = f;\n+    }\n+\n+    private void horizontalUnitScroll(boolean right) {\n+        if (onHorizontalUnitScroll != null) {\n+            onHorizontalUnitScroll.accept(right);\n+        }\n+    }\n+\n+    private void verticalUnitScroll(boolean down) {\n+        if (onVerticalUnitScroll != null) {\n+            onVerticalUnitScroll.accept(down);\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/ListViewBehavior.java","additions":54,"deletions":13,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,4 @@\n-import com.sun.javafx.scene.control.SizeLimitedList;\n+import static javafx.scene.input.KeyCode.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n@@ -34,3 +37,6 @@\n-import javafx.scene.control.*;\n-import com.sun.javafx.scene.control.inputmap.InputMap;\n-import com.sun.javafx.scene.control.inputmap.KeyBinding;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.SelectionMode;\n+import javafx.scene.control.TableColumnBase;\n+import javafx.scene.control.TableFocusModel;\n+import javafx.scene.control.TablePositionBase;\n+import javafx.scene.control.TableSelectionModel;\n@@ -40,2 +46,0 @@\n-import java.util.ArrayList;\n-import java.util.List;\n@@ -43,2 +47,4 @@\n-import static javafx.scene.input.KeyCode.*;\n-import static com.sun.javafx.scene.control.inputmap.InputMap.KeyMapping;\n+import com.sun.javafx.scene.control.SizeLimitedList;\n+import com.sun.javafx.scene.control.inputmap.InputMap;\n+import com.sun.javafx.scene.control.inputmap.InputMap.KeyMapping;\n+import com.sun.javafx.scene.control.inputmap.KeyBinding;\n@@ -158,0 +164,5 @@\n+                new KeyMapping(new KeyBinding(RIGHT).shortcut().alt(), e -> horizontalUnitScroll(true)),\n+                new KeyMapping(new KeyBinding(LEFT).shortcut().alt(), e -> horizontalUnitScroll(false)),\n+                new KeyMapping(new KeyBinding(UP).shortcut().alt(), e -> verticalUnitScroll(false)),\n+                new KeyMapping(new KeyBinding(DOWN).shortcut().alt(), e -> verticalUnitScroll(true)),\n+\n@@ -426,0 +437,2 @@\n+        onHorizontalUnitScroll = null;\n+        onVerticalUnitScroll = null;\n@@ -1358,0 +1371,24 @@\n+\n+    \/\/ TODO not necessary with the new InputMap V2\n+    private Consumer<Boolean> onHorizontalUnitScroll;\n+    private Consumer<Boolean> onVerticalUnitScroll;\n+\n+    public void setOnHorizontalUnitScroll(Consumer<Boolean> f) {\n+        onHorizontalUnitScroll = f;\n+    }\n+\n+    public void setOnVerticalUnitScroll(Consumer<Boolean> f) {\n+        onVerticalUnitScroll = f;\n+    }\n+\n+    private void horizontalUnitScroll(boolean right) {\n+        if (onHorizontalUnitScroll != null) {\n+            onHorizontalUnitScroll.accept(right);\n+        }\n+    }\n+\n+    private void verticalUnitScroll(boolean down) {\n+        if (onVerticalUnitScroll != null) {\n+            onVerticalUnitScroll.accept(down);\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/TableViewBehaviorBase.java","additions":46,"deletions":9,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,4 @@\n-import com.sun.javafx.scene.control.inputmap.InputMap;\n+import static javafx.scene.input.KeyCode.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n@@ -35,2 +38,7 @@\n-import javafx.scene.control.*;\n-import javafx.scene.input.*;\n+import javafx.scene.control.FocusModel;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.SelectionMode;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.input.KeyEvent;\n+import javafx.scene.input.MouseEvent;\n@@ -38,3 +46,0 @@\n-\n-import java.util.ArrayList;\n-import java.util.List;\n@@ -42,0 +47,2 @@\n+import com.sun.javafx.scene.control.inputmap.InputMap;\n+import com.sun.javafx.scene.control.inputmap.InputMap.KeyMapping;\n@@ -44,3 +51,0 @@\n-import static javafx.scene.input.KeyCode.*;\n-import static com.sun.javafx.scene.control.inputmap.InputMap.KeyMapping;\n-\n@@ -48,1 +52,0 @@\n-\n@@ -199,0 +202,5 @@\n+            new KeyMapping(new KeyBinding(RIGHT).shortcut().alt(), e -> horizontalUnitScroll(true)),\n+            new KeyMapping(new KeyBinding(LEFT).shortcut().alt(), e -> horizontalUnitScroll(false)),\n+            new KeyMapping(new KeyBinding(UP).shortcut().alt(), e -> verticalUnitScroll(false)),\n+            new KeyMapping(new KeyBinding(DOWN).shortcut().alt(), e -> verticalUnitScroll(true)),\n+\n@@ -257,0 +265,12 @@\n+\n+        onScrollPageUp = null;\n+        onScrollPageDown = null;\n+        onSelectPreviousRow = null;\n+        onSelectNextRow = null;\n+        onMoveToFirstCell = null;\n+        onMoveToLastCell = null;\n+        onFocusPreviousRow = null;\n+        onFocusNextRow = null;\n+        onHorizontalUnitScroll = null;\n+        onVerticalUnitScroll = null;\n+\n@@ -851,0 +871,24 @@\n+\n+    \/\/ TODO not necessary with the new InputMap V2\n+    private Consumer<Boolean> onHorizontalUnitScroll;\n+    private Consumer<Boolean> onVerticalUnitScroll;\n+\n+    public void setOnHorizontalUnitScroll(Consumer<Boolean> f) {\n+        onHorizontalUnitScroll = f;\n+    }\n+\n+    public void setOnVerticalUnitScroll(Consumer<Boolean> f) {\n+        onVerticalUnitScroll = f;\n+    }\n+\n+    private void horizontalUnitScroll(boolean right) {\n+        if (onHorizontalUnitScroll != null) {\n+            onHorizontalUnitScroll.accept(right);\n+        }\n+    }\n+\n+    private void verticalUnitScroll(boolean down) {\n+        if (onVerticalUnitScroll != null) {\n+            onVerticalUnitScroll.accept(down);\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/behavior\/TreeViewBehavior.java","additions":55,"deletions":11,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n@@ -30,2 +32,0 @@\n-\n-import com.sun.javafx.scene.control.Properties;\n@@ -42,0 +42,1 @@\n+import javafx.geometry.NodeOrientation;\n@@ -53,0 +54,1 @@\n+import javafx.scene.control.ScrollBar;\n@@ -54,1 +56,0 @@\n-import com.sun.javafx.scene.control.behavior.ListViewBehavior;\n@@ -57,4 +58,2 @@\n-\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n+import com.sun.javafx.scene.control.Properties;\n+import com.sun.javafx.scene.control.behavior.ListViewBehavior;\n@@ -199,10 +198,0 @@\n-        \/\/ init the behavior 'closures'\n-        behavior.setOnFocusPreviousRow(() -> onFocusPreviousCell());\n-        behavior.setOnFocusNextRow(() -> onFocusNextCell());\n-        behavior.setOnMoveToFirstCell(() -> onMoveToFirstCell());\n-        behavior.setOnMoveToLastCell(() -> onMoveToLastCell());\n-        behavior.setOnSelectPreviousRow(() -> onSelectPreviousCell());\n-        behavior.setOnSelectNextRow(() -> onSelectNextCell());\n-        behavior.setOnScrollPageDown(this::onScrollPageDown);\n-        behavior.setOnScrollPageUp(this::onScrollPageUp);\n-\n@@ -220,0 +209,12 @@\n+        \/\/ init the behavior 'closures'\n+        behavior.setOnFocusPreviousRow(() -> onFocusPreviousCell());\n+        behavior.setOnFocusNextRow(() -> onFocusNextCell());\n+        behavior.setOnMoveToFirstCell(() -> onMoveToFirstCell());\n+        behavior.setOnMoveToLastCell(() -> onMoveToLastCell());\n+        behavior.setOnSelectPreviousRow(() -> onSelectPreviousCell());\n+        behavior.setOnSelectNextRow(() -> onSelectNextCell());\n+        behavior.setOnScrollPageDown(this::onScrollPageDown);\n+        behavior.setOnScrollPageUp(this::onScrollPageUp);\n+        behavior.setOnHorizontalUnitScroll(this::horizontalUnitScroll);\n+        behavior.setOnVerticalUnitScroll(this::verticalUnitScroll);\n+\n@@ -681,0 +682,21 @@\n+\n+    private void horizontalUnitScroll(boolean right) {\n+        if (getSkinnable().getEffectiveNodeOrientation() == NodeOrientation.RIGHT_TO_LEFT) {\n+            right = !right;\n+        }\n+        ScrollBar sb = flow.getHbar();\n+        if (right) {\n+            sb.increment();\n+        } else {\n+            sb.decrement();\n+        }\n+    }\n+\n+    private void verticalUnitScroll(boolean down) {\n+        ScrollBar sb = flow.getVbar();\n+        if (down) {\n+            sb.increment();\n+        } else {\n+            sb.decrement();\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/ListViewSkin.java","additions":39,"deletions":17,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-\n@@ -34,0 +33,1 @@\n+import javafx.geometry.NodeOrientation;\n@@ -38,0 +38,1 @@\n+import javafx.scene.control.ScrollBar;\n@@ -46,1 +47,0 @@\n-\n@@ -119,0 +119,2 @@\n+        behavior.setOnHorizontalUnitScroll(this::horizontalUnitScroll);\n+        behavior.setOnVerticalUnitScroll(this::verticalUnitScroll);\n@@ -233,0 +235,21 @@\n+\n+    private void horizontalUnitScroll(boolean right) {\n+        if (getSkinnable().getEffectiveNodeOrientation() == NodeOrientation.RIGHT_TO_LEFT) {\n+            right = !right;\n+        }\n+        ScrollBar sb = flow.getHbar();\n+        if (right) {\n+            sb.increment();\n+        } else {\n+            sb.decrement();\n+        }\n+    }\n+\n+    private void verticalUnitScroll(boolean down) {\n+        ScrollBar sb = flow.getVbar();\n+        if (down) {\n+            sb.increment();\n+        } else {\n+            sb.decrement();\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableViewSkin.java","additions":25,"deletions":2,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-\n@@ -37,0 +36,1 @@\n+import javafx.geometry.NodeOrientation;\n@@ -41,0 +41,1 @@\n+import javafx.scene.control.ScrollBar;\n@@ -49,1 +50,0 @@\n-\n@@ -131,0 +131,2 @@\n+        behavior.setOnHorizontalUnitScroll(this::horizontalUnitScroll);\n+        behavior.setOnVerticalUnitScroll(this::verticalUnitScroll);\n@@ -363,0 +365,21 @@\n+\n+    private void horizontalUnitScroll(boolean right) {\n+        if (getSkinnable().getEffectiveNodeOrientation() == NodeOrientation.RIGHT_TO_LEFT) {\n+            right = !right;\n+        }\n+        ScrollBar sb = flow.getHbar();\n+        if (right) {\n+            sb.increment();\n+        } else {\n+            sb.decrement();\n+        }\n+    }\n+\n+    private void verticalUnitScroll(boolean down) {\n+        ScrollBar sb = flow.getVbar();\n+        if (down) {\n+            sb.increment();\n+        } else {\n+            sb.decrement();\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TreeTableViewSkin.java","additions":25,"deletions":2,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,1 +28,5 @@\n-import com.sun.javafx.scene.control.Properties;\n+import java.lang.ref.WeakReference;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -39,0 +43,1 @@\n+import javafx.geometry.NodeOrientation;\n@@ -42,1 +47,7 @@\n-import javafx.scene.control.*;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.FocusModel;\n+import javafx.scene.control.MultipleSelectionModel;\n+import javafx.scene.control.ScrollBar;\n+import javafx.scene.control.SelectionModel;\n+import javafx.scene.control.TreeCell;\n+import javafx.scene.control.TreeItem;\n@@ -44,0 +55,1 @@\n+import javafx.scene.control.TreeView;\n@@ -47,6 +59,1 @@\n-import java.lang.ref.WeakReference;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n+import com.sun.javafx.scene.control.Properties;\n@@ -196,0 +203,2 @@\n+        behavior.setOnHorizontalUnitScroll(this::horizontalUnitScroll);\n+        behavior.setOnVerticalUnitScroll(this::verticalUnitScroll);\n@@ -614,0 +623,21 @@\n+\n+    private void horizontalUnitScroll(boolean right) {\n+        if (getSkinnable().getEffectiveNodeOrientation() == NodeOrientation.RIGHT_TO_LEFT) {\n+            right = !right;\n+        }\n+        ScrollBar sb = flow.getHbar();\n+        if (right) {\n+            sb.increment();\n+        } else {\n+            sb.decrement();\n+        }\n+    }\n+\n+    private void verticalUnitScroll(boolean down) {\n+        ScrollBar sb = flow.getVbar();\n+        if (down) {\n+            sb.increment();\n+        } else {\n+            sb.decrement();\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TreeViewSkin.java","additions":38,"deletions":8,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control.behavior;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.geometry.NodeOrientation;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.ScrollBar;\n+import javafx.scene.control.skin.VirtualFlowShim;\n+import javafx.scene.input.KeyCode;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+\n+\/**\n+ * ListView Behavior Test.\n+ *\/\n+public class ListViewBehaviorTest extends BehaviorTestBase<ListView<String>> {\n+    @BeforeEach\n+    public void beforeEach() {\n+        ObservableList<String> items = FXCollections.observableArrayList(\n+            \"very very long text so we can get a horizontal scroll bar\",\n+            \"another\",\n+            \"another one\",\n+            \"make sure the strings are unique\"\n+        );\n+        initStage(new ListView<>(items));\n+    }\n+\n+    @AfterEach\n+    public void afterEach() {\n+        closeStage();\n+    }\n+\n+    \/**\n+     * Verifies that alt-shortcut-RIGHT\/LEFT scrolls horizontally in LTR orientation.\n+     *\/\n+    @Test\n+    public void testHorizontalScrollKeyboardLTR() {\n+        AtomicReference<Double> pos = new AtomicReference<>();\n+        execute(\n+            exe(() -> {\n+                control.setMaxWidth(50);\n+                control.setNodeOrientation(NodeOrientation.LEFT_TO_RIGHT);\n+                double w = hsb().getValue();\n+                pos.set(w);\n+            }),\n+            key(KeyCode.RIGHT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() < w);\n+                pos.set(w);\n+            }),\n+            key(KeyCode.LEFT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() > w);\n+            })\n+        );\n+    }\n+\n+    \/**\n+     * Verifies that alt-shortcut-RIGHT\/LEFT scrolls horizontally in RTL orientation.\n+     *\/\n+    @Test\n+    public void testHorizontalScrollKeyboardRTL() {\n+        AtomicReference<Double> pos = new AtomicReference<>();\n+        execute(\n+            exe(() -> {\n+                control.setMaxWidth(50);\n+                control.setNodeOrientation(NodeOrientation.RIGHT_TO_LEFT);\n+                double w = hsb().getValue();\n+                pos.set(w);\n+            }),\n+            key(KeyCode.LEFT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() < w);\n+                pos.set(w);\n+            }),\n+            key(KeyCode.RIGHT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() > w);\n+            })\n+        );\n+    }\n+\n+    private ScrollBar hsb() {\n+        var f = VirtualFlowShim.getVirtualFlow(control.getSkin());\n+        return VirtualFlowShim.getHBar(f);\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/behavior\/ListViewBehaviorTest.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control.behavior;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.geometry.NodeOrientation;\n+import javafx.scene.control.ScrollBar;\n+import javafx.scene.control.TableCell;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.skin.VirtualFlowShim;\n+import javafx.scene.input.KeyCode;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+\n+\/**\n+ * TableView Behavior Test.\n+ *\/\n+public class TableViewBehaviorTest extends BehaviorTestBase<TableView<Integer>> {\n+    @BeforeEach\n+    public void beforeEach() {\n+        ObservableList<Integer> items = FXCollections.observableArrayList(1, 2, 3, 4, 5, 6);\n+        TableView<Integer> t = new TableView<>(items);\n+        t.setColumnResizePolicy(TableView.UNCONSTRAINED_RESIZE_POLICY);\n+        TableColumn<Integer,String> tc = new TableColumn<>();\n+        tc.setCellFactory((v) -> {\n+            return new TableCell<>() {\n+                @Override\n+                protected void updateItem(String item, boolean empty) {\n+                    super.updateItem(item, empty);\n+                    setText(item);\n+                }\n+            };\n+        });\n+        tc.setPrefWidth(1000);\n+        t.getColumns().add(tc);\n+        initStage(t);\n+    }\n+\n+    @AfterEach\n+    public void afterEach() {\n+        closeStage();\n+    }\n+\n+    \/**\n+     * Verifies that alt-shortcut-RIGHT\/LEFT scrolls horizontally in LTR orientation.\n+     *\/\n+    @Test\n+    public void testHorizontalScrollKeyboardLTR() {\n+        AtomicReference<Double> pos = new AtomicReference<>();\n+        execute(\n+            exe(() -> {\n+                control.setMaxWidth(50);\n+                control.setNodeOrientation(NodeOrientation.LEFT_TO_RIGHT);\n+                double w = hsb().getValue();\n+                pos.set(w);\n+            }),\n+            key(KeyCode.RIGHT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() < w);\n+                pos.set(w);\n+            }),\n+            key(KeyCode.LEFT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() > w);\n+            })\n+        );\n+    }\n+\n+    \/**\n+     * Verifies that alt-shortcut-RIGHT\/LEFT scrolls horizontally in RTL orientation.\n+     *\/\n+    @Test\n+    public void testHorizontalScrollKeyboardRTL() {\n+        AtomicReference<Double> pos = new AtomicReference<>();\n+        execute(\n+            exe(() -> {\n+                control.setMaxWidth(50);\n+                control.setNodeOrientation(NodeOrientation.RIGHT_TO_LEFT);\n+                double w = hsb().getValue();\n+                pos.set(w);\n+            }),\n+            key(KeyCode.LEFT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() < w);\n+                pos.set(w);\n+            }),\n+            key(KeyCode.RIGHT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() > w);\n+            })\n+        );\n+    }\n+\n+    private ScrollBar hsb() {\n+        var f = VirtualFlowShim.getVirtualFlow(control.getSkin());\n+        return VirtualFlowShim.getHBar(f);\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/behavior\/TableViewBehaviorTest.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control.behavior;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+import javafx.geometry.NodeOrientation;\n+import javafx.scene.control.ScrollBar;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableCell;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTableView;\n+import javafx.scene.control.skin.VirtualFlowShim;\n+import javafx.scene.input.KeyCode;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+\n+\/**\n+ * TreeTableView Behavior Test.\n+ *\/\n+public class TreeTableViewBehaviorTest extends BehaviorTestBase<TreeTableView<Integer>> {\n+    @BeforeEach\n+    public void beforeEach() {\n+        TreeItem<Integer> root = new TreeItem(1);\n+        TreeTableView<Integer> t = new TreeTableView<>(root);\n+        t.setShowRoot(true);\n+        t.setColumnResizePolicy(TreeTableView.UNCONSTRAINED_RESIZE_POLICY);\n+        TreeTableColumn<Integer,String> tc = new TreeTableColumn<>();\n+        tc.setCellFactory((v) -> {\n+            return new TreeTableCell<>() {\n+                @Override\n+                protected void updateItem(String item, boolean empty) {\n+                    super.updateItem(item, empty);\n+                    setText(item);\n+                }\n+            };\n+        });\n+        tc.setPrefWidth(1000);\n+        t.getColumns().add(tc);\n+        initStage(t);\n+    }\n+\n+    @AfterEach\n+    public void afterEach() {\n+        closeStage();\n+    }\n+\n+    \/**\n+     * Verifies that alt-shortcut-RIGHT\/LEFT scrolls horizontally in LTR orientation.\n+     *\/\n+    @Test\n+    public void testHorizontalScrollKeyboardLTR() {\n+        AtomicReference<Double> pos = new AtomicReference<>();\n+        execute(\n+            exe(() -> {\n+                control.setMaxWidth(50);\n+                control.setNodeOrientation(NodeOrientation.LEFT_TO_RIGHT);\n+                double w = hsb().getValue();\n+                pos.set(w);\n+            }),\n+            key(KeyCode.RIGHT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() < w);\n+                pos.set(w);\n+            }),\n+            key(KeyCode.LEFT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() > w);\n+            })\n+        );\n+    }\n+\n+    \/**\n+     * Verifies that alt-shortcut-RIGHT\/LEFT scrolls horizontally in RTL orientation.\n+     *\/\n+    @Test\n+    public void testHorizontalScrollKeyboardRTL() {\n+        AtomicReference<Double> pos = new AtomicReference<>();\n+        execute(\n+            exe(() -> {\n+                control.setMaxWidth(50);\n+                control.setNodeOrientation(NodeOrientation.RIGHT_TO_LEFT);\n+                double w = hsb().getValue();\n+                pos.set(w);\n+            }),\n+            key(KeyCode.LEFT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() < w);\n+                pos.set(w);\n+            }),\n+            key(KeyCode.RIGHT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() > w);\n+            })\n+        );\n+    }\n+\n+    private ScrollBar hsb() {\n+        var f = VirtualFlowShim.getVirtualFlow(control.getSkin());\n+        return VirtualFlowShim.getHBar(f);\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/behavior\/TreeTableViewBehaviorTest.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.javafx.scene.control.behavior;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+import javafx.geometry.NodeOrientation;\n+import javafx.scene.control.ScrollBar;\n+import javafx.scene.control.TreeCell;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.control.skin.VirtualFlowShim;\n+import javafx.scene.input.KeyCode;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.KeyModifier;\n+\n+\/**\n+ * TreeView Behavior Test.\n+ *\/\n+public class TreeViewBehaviorTest extends BehaviorTestBase<TreeView<Integer>> {\n+    @BeforeEach\n+    public void beforeEach() {\n+        TreeItem<Integer> root = new TreeItem(1);\n+        TreeView<Integer> t = new TreeView<>(root);\n+        t.setCellFactory((v) -> {\n+            return new TreeCell<>() {\n+                @Override\n+                protected void updateItem(Integer item, boolean empty) {\n+                    super.updateItem(item, empty);\n+                    setText(\"make the preferred width of the column really big \" + item);\n+                }\n+            };\n+        });\n+        t.setShowRoot(true);\n+        initStage(t);\n+    }\n+\n+    @AfterEach\n+    public void afterEach() {\n+        closeStage();\n+    }\n+\n+    \/**\n+     * Verifies that alt-shortcut-RIGHT\/LEFT scrolls horizontally in LTR orientation.\n+     *\/\n+    @Test\n+    public void testHorizontalScrollKeyboardLTR() {\n+        AtomicReference<Double> pos = new AtomicReference<>();\n+        execute(\n+            exe(() -> {\n+                control.setMaxWidth(50);\n+                control.setNodeOrientation(NodeOrientation.LEFT_TO_RIGHT);\n+                double w = hsb().getValue();\n+                pos.set(w);\n+            }),\n+            key(KeyCode.RIGHT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() < w);\n+                pos.set(w);\n+            }),\n+            key(KeyCode.LEFT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() > w);\n+            })\n+        );\n+    }\n+\n+    \/**\n+     * Verifies that alt-shortcut-RIGHT\/LEFT scrolls horizontally in RTL orientation.\n+     *\/\n+    @Test\n+    public void testHorizontalScrollKeyboardRTL() {\n+        AtomicReference<Double> pos = new AtomicReference<>();\n+        execute(\n+            exe(() -> {\n+                control.setMaxWidth(50);\n+                control.setNodeOrientation(NodeOrientation.RIGHT_TO_LEFT);\n+                double w = hsb().getValue();\n+                pos.set(w);\n+            }),\n+            key(KeyCode.LEFT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() < w);\n+                pos.set(w);\n+            }),\n+            key(KeyCode.RIGHT, KeyModifier.ALT, KeyModifier.getShortcutKey()),\n+            exe(() -> {\n+                double w = hsb().getValue();\n+                \/\/ should have scrolled\n+                Assertions.assertTrue(pos.get() > w);\n+            })\n+        );\n+    }\n+\n+    private ScrollBar hsb() {\n+        var f = VirtualFlowShim.getVirtualFlow(control.getSkin());\n+        return VirtualFlowShim.getHBar(f);\n+    }\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/behavior\/TreeViewBehaviorTest.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}