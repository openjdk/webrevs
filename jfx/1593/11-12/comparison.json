{"files":[{"patch":"@@ -488,2 +488,3 @@\n-            float screenPixelScale, float imagePixelScale) throws IOException\n-    {\n+            float screenPixelScale, float imagePixelScale) throws IOException {\n+        ImageTools.validateMaxDimensions(w, h, imagePixelScale);\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/bmp\/BMPImageLoaderFactory.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -214,0 +214,15 @@\n+    public static void validateMaxDimensions(double width, double height, double scaleFactor) {\n+        if (width * scaleFactor > Integer.MAX_VALUE) {\n+            throw new IllegalArgumentException(\"Image width exceeds maximum value\");\n+        }\n+\n+        if (height * scaleFactor > Integer.MAX_VALUE) {\n+            throw new IllegalArgumentException(\"Image height exceeds maximum value\");\n+        }\n+\n+        \/\/ Use a long multiplication to prevent int overflow.\n+        if ((long)(width * scaleFactor) * (long)(height * scaleFactor) > Integer.MAX_VALUE) {\n+            throw new IllegalArgumentException(\"Image size exceeds maximum value\");\n+        }\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/common\/ImageTools.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -203,0 +203,2 @@\n+        ImageTools.validateMaxDimensions(imgw, imgh, imagePixelScale);\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/gif\/GIFImageLoader2.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -223,0 +223,2 @@\n+        ImageTools.validateMaxDimensions(w, h, imagePixelScale);\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/ios\/IosImageLoader.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,0 +125,3 @@\n+            ImageTools.validateMaxDimensions(imageWidth, imageHeight, screenPixelScale);\n+            ImageTools.validateMaxDimensions(w, h, screenPixelScale);\n+\n@@ -135,0 +138,2 @@\n+            ImageTools.validateMaxDimensions(w, h, imagePixelScale);\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/javax\/XImageLoader.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -209,0 +209,2 @@\n+        ImageTools.validateMaxDimensions(w, h, imagePixelScale);\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/jpeg\/JPEGImageLoader.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -641,0 +641,1 @@\n+        ImageTools.validateMaxDimensions(w, h, imagePixelScale);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/png\/PNGImageLoader2.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-\n+import java.util.Random;\n@@ -31,2 +31,0 @@\n-import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -34,1 +32,1 @@\n-import java.util.Random;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -112,0 +110,20 @@\n+\n+    @Test\n+    public void testValidateMaxDimensions() {\n+        assertDoesNotThrow(() -> ImageTools.validateMaxDimensions(Integer.MAX_VALUE, 1, 1));\n+        assertDoesNotThrow(() -> ImageTools.validateMaxDimensions(1, Integer.MAX_VALUE, 1));\n+        assertThrows(IllegalArgumentException.class, () -> ImageTools.validateMaxDimensions((double)Integer.MAX_VALUE + 1, 1, 1));\n+        assertThrows(IllegalArgumentException.class, () -> ImageTools.validateMaxDimensions(1, (double)Integer.MAX_VALUE + 1, 1));\n+        assertDoesNotThrow(() -> ImageTools.validateMaxDimensions(46340, 46341, 1));\n+        assertThrows(IllegalArgumentException.class, () -> ImageTools.validateMaxDimensions(46340, 46342, 1));\n+        assertThrows(IllegalArgumentException.class, () -> ImageTools.validateMaxDimensions(46342, 46340, 1));\n+        assertDoesNotThrow(() -> ImageTools.validateMaxDimensions(37072, 37073, 1.25));\n+        assertThrows(IllegalArgumentException.class, () -> ImageTools.validateMaxDimensions(37073, 37073, 1.25));\n+        assertDoesNotThrow(() -> ImageTools.validateMaxDimensions(30893, 30894, 1.5));\n+        assertThrows(IllegalArgumentException.class, () -> ImageTools.validateMaxDimensions(30894, 30894, 1.5));\n+        assertDoesNotThrow(() -> ImageTools.validateMaxDimensions(26481, 26480, 1.75));\n+        assertThrows(IllegalArgumentException.class, () -> ImageTools.validateMaxDimensions(26481, 26481, 1.75));\n+        assertThrows(IllegalArgumentException.class, () -> ImageTools.validateMaxDimensions(Integer.MAX_VALUE - 1, Integer.MAX_VALUE - 1, 1));\n+        assertThrows(IllegalArgumentException.class, () -> ImageTools.validateMaxDimensions(Integer.MAX_VALUE, Integer.MAX_VALUE, 1));\n+        assertThrows(IllegalArgumentException.class, () -> ImageTools.validateMaxDimensions(Integer.MAX_VALUE, Integer.MAX_VALUE, 3));\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/iio\/common\/ImageToolsTest.java","additions":22,"deletions":4,"binary":false,"changes":26,"status":"modified"}]}