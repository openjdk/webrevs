{"files":[{"patch":"@@ -49,0 +49,1 @@\n+import java.util.Optional;\n@@ -181,1 +182,1 @@\n-    private final ImageLoaderFactory xImageLoaderFactory = tryGetXImageLoaderFactory();\n+    private Optional<ImageLoaderFactory> xImageLoaderFactory;\n@@ -194,8 +195,0 @@\n-    private static ImageLoaderFactory tryGetXImageLoaderFactory() {\n-        try {\n-            Class<?> factoryClass = Class.forName(\"com.sun.javafx.iio.javax.XImageLoaderFactory\");\n-            return (ImageLoaderFactory)factoryClass.getMethod(\"getInstance\").invoke(null);\n-        } catch (ReflectiveOperationException e) {\n-            return null;\n-        }\n-    }\n@@ -426,3 +419,1 @@\n-                        ImageLoader imageLoader = xImageLoaderFactory != null\n-                            ? xImageLoaderFactory.createImageLoader(new ByteArrayInputStream(dataUri.getData()))\n-                            : null;\n+                        ImageLoader imageLoader = tryCreateXImageLoader(new ByteArrayInputStream(dataUri.getData()));\n@@ -556,1 +547,1 @@\n-        if (loader == null && xImageLoaderFactory != null) {\n+        if (loader == null) {\n@@ -558,1 +549,1 @@\n-            loader = xImageLoaderFactory.createImageLoader(stream);\n+            loader = tryCreateXImageLoader(stream);\n@@ -612,0 +603,22 @@\n+\n+    \/**\n+     * Tries to create an {@link com.sun.javafx.iio.javax.XImageLoader} for the specified input stream.\n+     * This might fail in the future if the {@code java.desktop} module is not present on the module path.\n+     * At present, this will not fail because JavaFX requires the {@code java.desktop} module.\n+     *\/\n+    private synchronized ImageLoader tryCreateXImageLoader(InputStream stream) throws IOException {\n+        if (xImageLoaderFactory == null) {\n+            try {\n+                Class<?> factoryClass = Class.forName(\"com.sun.javafx.iio.javax.XImageLoaderFactory\");\n+                xImageLoaderFactory = Optional.of((ImageLoaderFactory)factoryClass.getMethod(\"getInstance\").invoke(null));\n+            } catch (ReflectiveOperationException e) {\n+                xImageLoaderFactory = Optional.empty();\n+            }\n+        }\n+\n+        if (xImageLoaderFactory.isEmpty()) {\n+            return null;\n+        }\n+\n+        return xImageLoaderFactory.get().createImageLoader(stream);\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/ImageStorage.java","additions":27,"deletions":14,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -212,6 +212,1 @@\n-\n-        if (offset == 0 && size == data.length) {\n-            return ByteBuffer.wrap(data);\n-        }\n-\n-        return ByteBuffer.wrap(Arrays.copyOf(data, size - offset));\n+        return ByteBuffer.wrap(data, offset, size);\n@@ -225,6 +220,1 @@\n-\n-        if (offset == 0 && size == data.length) {\n-            return IntBuffer.wrap(data);\n-        }\n-\n-        return IntBuffer.wrap(Arrays.copyOf(data, size - offset));\n+        return IntBuffer.wrap(data, offset, size);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/javax\/XImageLoader.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -225,1 +225,0 @@\n-        \/\/ TODO: 3D - need a way to handle pre versus non-Pre\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/Image.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}