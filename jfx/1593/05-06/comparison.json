{"files":[{"patch":"@@ -53,2 +53,2 @@\n-     * @param stride The stride from a pixel position in one row to the same\n-     * horizontal position in the next row.\n+     * @param stride The stride from a pixel position in one row to the same horizontal position in the next row,\n+     *               in data elements (not necessarily bytes).\n@@ -70,1 +70,2 @@\n-     * @param stride The stride from a pixel position in one row to the same horizontal position in the next row.\n+     * @param stride The stride from a pixel position in one row to the same horizontal position in the next row,\n+     *               in data elements (not necessarily bytes).\n@@ -89,1 +90,2 @@\n-     * @param stride The stride from a pixel position in one row to the same horizontal position in the next row.\n+     * @param stride The stride from a pixel position in one row to the same horizontal position in the next row,\n+     *               in data elements (not necessarily bytes).\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/ImageFrame.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import com.sun.javafx.iio.ImageStorage;\n+import com.sun.javafx.iio.ImageStorage.ImageType;\n@@ -157,0 +157,8 @@\n+        \/\/ Scanline stride is measured in elements of the underlying buffer, which can be bytes or ints.\n+        int scanlineStride = switch(image.getSampleModel()) {\n+            case ComponentSampleModel m -> m.getScanlineStride();\n+            case MultiPixelPackedSampleModel m -> m.getScanlineStride();\n+            case SinglePixelPackedSampleModel m -> m.getScanlineStride();\n+            default -> throw new IllegalStateException(\"Unsupported sample model: \" + image.getSampleModel());\n+        };\n+\n@@ -158,1 +166,1 @@\n-            case TYPE_BYTE_GRAY -> new ImageFrame(ImageStorage.ImageType.GRAY,\n+            case TYPE_BYTE_GRAY -> new ImageFrame(ImageType.GRAY,\n@@ -160,1 +168,1 @@\n-                    image.getWidth(), image.getHeight(), image.getWidth(),\n+                    image.getWidth(), image.getHeight(), scanlineStride,\n@@ -163,1 +171,1 @@\n-            case TYPE_3BYTE_BGR -> new ImageFrame(ImageStorage.ImageType.BGR,\n+            case TYPE_3BYTE_BGR -> new ImageFrame(ImageType.BGR,\n@@ -165,1 +173,1 @@\n-                    image.getWidth(), image.getHeight(), image.getWidth() * 3,\n+                    image.getWidth(), image.getHeight(), scanlineStride,\n@@ -168,1 +176,1 @@\n-            case TYPE_4BYTE_ABGR -> new ImageFrame(ImageStorage.ImageType.ABGR,\n+            case TYPE_4BYTE_ABGR -> new ImageFrame(ImageType.ABGR,\n@@ -170,1 +178,1 @@\n-                    image.getWidth(), image.getHeight(), image.getWidth() * 4,\n+                    image.getWidth(), image.getHeight(), scanlineStride,\n@@ -173,1 +181,1 @@\n-            case TYPE_4BYTE_ABGR_PRE -> new ImageFrame(ImageStorage.ImageType.ABGR_PRE,\n+            case TYPE_4BYTE_ABGR_PRE -> new ImageFrame(ImageType.ABGR_PRE,\n@@ -175,1 +183,1 @@\n-                    image.getWidth(), image.getHeight(), image.getWidth() * 4,\n+                    image.getWidth(), image.getHeight(), scanlineStride,\n@@ -178,1 +186,1 @@\n-            case TYPE_INT_RGB -> new ImageFrame(ImageStorage.ImageType.INT_RGB,\n+            case TYPE_INT_RGB -> new ImageFrame(ImageType.INT_RGB,\n@@ -180,1 +188,1 @@\n-                    image.getWidth(), image.getHeight(), image.getWidth() * 4,\n+                    image.getWidth(), image.getHeight(), scanlineStride,\n@@ -183,1 +191,1 @@\n-            case TYPE_INT_BGR -> new ImageFrame(ImageStorage.ImageType.INT_BGR,\n+            case TYPE_INT_BGR -> new ImageFrame(ImageType.INT_BGR,\n@@ -185,1 +193,1 @@\n-                    image.getWidth(), image.getHeight(), image.getWidth() * 4,\n+                    image.getWidth(), image.getHeight(), scanlineStride,\n@@ -188,1 +196,1 @@\n-            case TYPE_INT_ARGB -> new ImageFrame(ImageStorage.ImageType.INT_ARGB,\n+            case TYPE_INT_ARGB -> new ImageFrame(ImageType.INT_ARGB,\n@@ -190,1 +198,1 @@\n-                    image.getWidth(), image.getHeight(), image.getWidth() * 4,\n+                    image.getWidth(), image.getHeight(), scanlineStride,\n@@ -193,1 +201,1 @@\n-            case TYPE_INT_ARGB_PRE -> new ImageFrame(ImageStorage.ImageType.INT_ARGB_PRE,\n+            case TYPE_INT_ARGB_PRE -> new ImageFrame(ImageType.INT_ARGB_PRE,\n@@ -195,1 +203,1 @@\n-                    image.getWidth(), image.getHeight(), image.getWidth() * 4,\n+                    image.getWidth(), image.getHeight(), scanlineStride,\n@@ -199,2 +207,2 @@\n-                var colorModel = (IndexColorModel)image.getColorModel();\n-                var palette = new int[colorModel.getMapSize()];\n+                IndexColorModel colorModel = (IndexColorModel)image.getColorModel();\n+                int[] palette = new int[colorModel.getMapSize()];\n@@ -203,1 +211,1 @@\n-                var imageType = colorModel.hasAlpha()\n+                ImageType imageType = colorModel.hasAlpha()\n@@ -205,10 +213,3 @@\n-                        ? ImageStorage.ImageType.PALETTE_ALPHA_PRE\n-                        : ImageStorage.ImageType.PALETTE_ALPHA\n-                    : ImageStorage.ImageType.PALETTE;\n-\n-                var scanlineStride = switch(image.getSampleModel()) {\n-                    case ComponentSampleModel m -> m.getScanlineStride();\n-                    case MultiPixelPackedSampleModel m -> m.getScanlineStride();\n-                    case SinglePixelPackedSampleModel m -> m.getScanlineStride();\n-                    default -> throw new IllegalStateException(\"Unsupported sample model: \" + image.getSampleModel());\n-                };\n+                        ? ImageType.PALETTE_ALPHA_PRE\n+                        : ImageType.PALETTE_ALPHA\n+                    : ImageType.PALETTE;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/javax\/XImageLoader.java","additions":31,"deletions":30,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -235,1 +235,4 @@\n-            case INT_ARGB_PRE -> fromIntArgbPreData((IntBuffer)frame.getImageData(), w, h, stride, ps);\n+\n+            case INT_ARGB_PRE ->\n+                \/\/ Note: from here on, stride is measured in bytes.\n+                fromIntArgbPreData((IntBuffer)frame.getImageData(), w, h, stride * 4, ps);\n@@ -292,2 +295,2 @@\n-                IntRgb.ToIntArgbPreConverter().convert(imageData, 0, stride \/ 4, imageData, 0, stride \/ 4, w, h);\n-                yield fromIntArgbPreData(imageData, w, h, stride, ps);\n+                IntRgb.ToIntArgbPreConverter().convert(imageData, 0, stride, imageData, 0, stride, w, h);\n+                yield fromIntArgbPreData(imageData, w, h, stride * 4, ps); \/\/ Note: from here on, stride is measured in bytes.\n@@ -298,2 +301,2 @@\n-                IntBgr.ToIntArgbPreConverter().convert(imageData, 0, stride \/ 4, imageData, 0, stride \/ 4, w, h);\n-                yield fromIntArgbPreData(imageData, w, h, stride, ps);\n+                IntBgr.ToIntArgbPreConverter().convert(imageData, 0, stride, imageData, 0, stride, w, h);\n+                yield fromIntArgbPreData(imageData, w, h, stride * 4, ps); \/\/ Note: from here on, stride is measured in bytes.\n@@ -304,2 +307,2 @@\n-                IntArgb.ToIntArgbPreConverter().convert(imageData, 0, stride \/ 4, imageData, 0, stride \/ 4, w, h);\n-                yield fromIntArgbPreData(imageData, w, h, stride, ps);\n+                IntArgb.ToIntArgbPreConverter().convert(imageData, 0, stride, imageData, 0, stride, w, h);\n+                yield fromIntArgbPreData(imageData, w, h, stride * 4, ps); \/\/ Note: from here on, stride is measured in bytes.\n@@ -315,1 +318,1 @@\n-                var converter = switch (frame.getPaletteIndexBits()) {\n+                ByteToBytePixelConverter converter = switch (frame.getPaletteIndexBits()) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/Image.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-        INT_RGB(ImageType.INT_RGB, PixelFormat.INT_ARGB_PRE, 8,\n+        INT_RGB(ImageType.INT_RGB, PixelFormat.INT_ARGB_PRE, 2,\n@@ -167,1 +167,1 @@\n-        INT_BGR(ImageType.INT_BGR, PixelFormat.INT_ARGB_PRE, 8,\n+        INT_BGR(ImageType.INT_BGR, PixelFormat.INT_ARGB_PRE, 2,\n@@ -177,1 +177,1 @@\n-        INT_ARGB(ImageType.INT_ARGB, PixelFormat.INT_ARGB_PRE, 8,\n+        INT_ARGB(ImageType.INT_ARGB, PixelFormat.INT_ARGB_PRE, 2,\n@@ -187,1 +187,1 @@\n-        INT_ARGB_PRE(ImageType.INT_ARGB_PRE, PixelFormat.INT_ARGB_PRE, 8,\n+        INT_ARGB_PRE(ImageType.INT_ARGB_PRE, PixelFormat.INT_ARGB_PRE, 2,\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/prism\/ImageTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}