{"files":[{"patch":"@@ -45,0 +45,1 @@\n+import java.awt.image.ComponentSampleModel;\n@@ -49,0 +50,2 @@\n+import java.awt.image.MultiPixelPackedSampleModel;\n+import java.awt.image.SinglePixelPackedSampleModel;\n@@ -199,0 +202,14 @@\n+\n+                var imageType = colorModel.hasAlpha()\n+                    ? colorModel.isAlphaPremultiplied()\n+                        ? ImageStorage.ImageType.PALETTE_ALPHA_PRE\n+                        : ImageStorage.ImageType.PALETTE_ALPHA\n+                    : ImageStorage.ImageType.PALETTE;\n+\n+                var scanlineStride = switch(image.getSampleModel()) {\n+                    case ComponentSampleModel m -> m.getScanlineStride();\n+                    case MultiPixelPackedSampleModel m -> m.getScanlineStride();\n+                    case SinglePixelPackedSampleModel m -> m.getScanlineStride();\n+                    default -> throw new IllegalStateException(\"Unsupported sample model: \" + image.getSampleModel());\n+                };\n+\n@@ -200,7 +217,2 @@\n-                    colorModel.hasAlpha()\n-                        ? colorModel.isAlphaPremultiplied()\n-                            ? ImageStorage.ImageType.PALETTE_ALPHA_PRE\n-                            : ImageStorage.ImageType.PALETTE_ALPHA\n-                        : ImageStorage.ImageType.PALETTE,\n-                    getByteBuffer(image.getRaster().getDataBuffer()),\n-                    image.getWidth(), image.getHeight(), image.getWidth() * colorModel.getPixelSize(),\n+                    imageType, getByteBuffer(image.getRaster().getDataBuffer()),\n+                    image.getWidth(), image.getHeight(), scanlineStride,\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/iio\/javax\/XImageLoader.java","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.javafx.image;\n-\n-import java.nio.ByteBuffer;\n-\n-public interface IndexedToBytePixelConverter extends PixelConverter<ByteBuffer, ByteBuffer> {\n-\n-    \/**\n-     * Copies a rectangular region of data from the source array to the destination array.\n-     *\n-     * @param srcarr the byte array containing the source data\n-     * @param srcoff the index in the array of the first source pixel data\n-     * @param srcscanbits number of bits between rows of data in the source\n-     * @param dstarr the byte array containing the destination data\n-     * @param dstoff the index in the array of the first destination pixel data\n-     * @param dstscanbytes number of array indices between rows of data in the destination\n-     * @param w the number of pixels to process across before moving to the next row\n-     * @param h the number of rows of pixels to process\n-     *\/\n-    void convert(byte[] srcarr, int srcoff, int srcscanbits,\n-                 byte[] dstarr, int dstoff, int dstscanbytes,\n-                 int w, int h);\n-\n-    \/**\n-     * Copies a rectangular region of data from the source buffer to the destination array.\n-     *\n-     * @param srcbuf the nio buffer containing the source data\n-     * @param srcoff the absolute location in the buffer of the first source pixel data\n-     * @param srcscanbits number of bits between rows of data in the source\n-     * @param dstarr the byte array containing the destination data\n-     * @param dstoff the index in the array of the first destination pixel data\n-     * @param dstscanbytes number of array indices between rows of data in the destination\n-     * @param w the number of pixels to process across before moving to the next row\n-     * @param h the number of rows of pixels to process\n-     *\/\n-    void convert(ByteBuffer srcbuf, int srcoff, int srcscanbits,\n-                 byte[] dstarr, int dstoff, int dstscanbytes,\n-                 int w, int h);\n-\n-    \/**\n-     * Copies a rectangular region of data from the source array to the destination buffer.\n-     *\n-     * @param srcarr the byte array containing the source data\n-     * @param srcoff the index in the array of the first source pixel data\n-     * @param srcscanbits number of bits between rows of data in the source\n-     * @param dstbuf the nio buffer containing the destination data\n-     * @param dstoff the absolute location in the buffer of the first destination pixel data\n-     * @param dstscanbytes number of buffer elements between rows of data in the destination\n-     * @param w the number of pixels to process across before moving to the next row\n-     * @param h the number of rows of pixels to process\n-     *\/\n-    void convert(byte[] srcarr, int srcoff, int srcscanbits,\n-                 ByteBuffer dstbuf, int dstoff, int dstscanbytes,\n-                 int w, int h);\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/image\/IndexedToBytePixelConverter.java","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -31,1 +31,1 @@\n-import com.sun.javafx.image.IndexedToBytePixelConverter;\n+import com.sun.javafx.image.ByteToBytePixelConverter;\n@@ -35,1 +35,1 @@\n-abstract class BaseIndexedToByteConverter implements IndexedToBytePixelConverter {\n+abstract class BaseIndexedToByteConverter implements ByteToBytePixelConverter {\n@@ -40,1 +40,1 @@\n-        private final Boolean premultiplied;\n+        private final AlphaType alphaType;\n@@ -42,2 +42,2 @@\n-        IndexedGetter(int[] colors, Boolean premultiplied) {\n-            this.premultiplied = premultiplied;\n+        IndexedGetter(int[] colors, AlphaType alphaType) {\n+            int[] preColors = null, nonPreColors = null;\n@@ -45,6 +45,9 @@\n-            if (premultiplied == null) {\n-                this.nonPreColors = colors;\n-                this.preColors = colors;\n-            } else if (premultiplied) {\n-                this.preColors = colors;\n-                this.nonPreColors = new int[colors.length];\n+            switch (alphaType) {\n+                case OPAQUE -> {\n+                    nonPreColors = colors;\n+                    preColors = colors;\n+                }\n+\n+                case PREMULTIPLIED -> {\n+                    preColors = colors;\n+                    nonPreColors = new int[colors.length];\n@@ -52,2 +55,3 @@\n-                for (int i = 0; i < colors.length; i++) {\n-                    nonPreColors[i] = PixelUtils.PretoNonPre(colors[i]);\n+                    for (int i = 0; i < colors.length; i++) {\n+                        nonPreColors[i] = PixelUtils.PretoNonPre(colors[i]);\n+                    }\n@@ -55,3 +59,0 @@\n-            } else {\n-                this.nonPreColors = colors;\n-                this.preColors = new int[colors.length];\n@@ -59,2 +60,7 @@\n-                for (int i = 0; i < colors.length; i++) {\n-                    preColors[i] = PixelUtils.NonPretoPre(colors[i]);\n+                case NONPREMULTIPLIED -> {\n+                    nonPreColors = colors;\n+                    preColors = new int[colors.length];\n+\n+                    for (int i = 0; i < colors.length; i++) {\n+                        preColors[i] = PixelUtils.NonPretoPre(colors[i]);\n+                    }\n@@ -63,0 +69,4 @@\n+\n+            this.alphaType = alphaType;\n+            this.preColors = preColors;\n+            this.nonPreColors = nonPreColors;\n@@ -67,5 +77,1 @@\n-            return premultiplied == null\n-                ? AlphaType.OPAQUE\n-                : premultiplied\n-                    ? AlphaType.PREMULTIPLIED\n-                    : AlphaType.NONPREMULTIPLIED;\n+            return alphaType;\n@@ -97,1 +103,1 @@\n-    abstract void doConvert(byte[] srcarr, int srcoff, int srcscanbits,\n+    abstract void doConvert(byte[] srcarr, int srcoff, int srcscanbytes,\n@@ -101,1 +107,1 @@\n-    abstract void doConvert(ByteBuffer srcbuf, int srcoff, int srcscanbits,\n+    abstract void doConvert(ByteBuffer srcbuf, int srcoff, int srcscanbytes,\n@@ -106,1 +112,1 @@\n-    public final void convert(byte[] srcarr, int srcoff, int srcscanbits,\n+    public final void convert(byte[] srcarr, int srcoff, int srcscanbytes,\n@@ -111,1 +117,1 @@\n-        if (srcscanbits == w * nSrcElems && dstscanbytes == w * nDstElems) {\n+        if (srcscanbytes == w * nSrcElems && dstscanbytes == w * nDstElems) {\n@@ -116,1 +122,1 @@\n-        doConvert(srcarr, srcoff, srcscanbits,\n+        doConvert(srcarr, srcoff, srcscanbytes,\n@@ -122,1 +128,1 @@\n-    public final void convert(ByteBuffer srcbuf, int srcoff, int srcscanbits,\n+    public final void convert(ByteBuffer srcbuf, int srcoff, int srcscanbytes,\n@@ -127,1 +133,1 @@\n-        if (srcscanbits == w * nSrcElems && dstscanbytes == w * nDstElems) {\n+        if (srcscanbytes == w * nSrcElems && dstscanbytes == w * nDstElems) {\n@@ -135,1 +141,1 @@\n-            doConvert(srcbuf.array(), srcoff, srcscanbits,\n+            doConvert(srcbuf.array(), srcoff, srcscanbytes,\n@@ -139,1 +145,1 @@\n-            doConvert(srcbuf, srcoff, srcscanbits,\n+            doConvert(srcbuf, srcoff, srcscanbytes,\n@@ -146,1 +152,1 @@\n-    public final void convert(ByteBuffer srcbuf, int srcoff, int srcscanbits,\n+    public final void convert(ByteBuffer srcbuf, int srcoff, int srcscanbytes,\n@@ -151,1 +157,1 @@\n-        if (srcscanbits == w * nSrcElems && dstscanbytes == w * nDstElems) {\n+        if (srcscanbytes == w * nSrcElems && dstscanbytes == w * nDstElems) {\n@@ -159,1 +165,1 @@\n-            doConvert(srcarr, srcoff, srcscanbits,\n+            doConvert(srcarr, srcoff, srcscanbytes,\n@@ -164,1 +170,1 @@\n-            doConvert(srcbuf, srcoff, srcscanbits,\n+            doConvert(srcbuf, srcoff, srcscanbytes,\n@@ -171,1 +177,1 @@\n-    public final void convert(byte[] srcarr, int srcoff, int srcscanbits,\n+    public final void convert(byte[] srcarr, int srcoff, int srcscanbytes,\n@@ -176,1 +182,1 @@\n-        if (srcscanbits == w * nSrcElems && dstscanbytes == w * nDstElems) {\n+        if (srcscanbytes == w * nSrcElems && dstscanbytes == w * nDstElems) {\n@@ -184,1 +190,1 @@\n-            doConvert(srcarr, srcoff, srcscanbits,\n+            doConvert(srcarr, srcoff, srcscanbytes,\n@@ -189,1 +195,1 @@\n-            doConvert(srcbuf, srcoff, srcscanbits,\n+            doConvert(srcbuf, srcoff, srcscanbytes,\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/image\/impl\/BaseIndexedToByteConverter.java","additions":46,"deletions":40,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.image.AlphaType;\n@@ -29,1 +30,1 @@\n-import com.sun.javafx.image.IndexedToBytePixelConverter;\n+import com.sun.javafx.image.ByteToBytePixelConverter;\n@@ -36,2 +37,2 @@\n-    public static Getter createGetter(int[] colors, Boolean premultiplied) {\n-        return new Getter(colors, premultiplied);\n+    public static Getter createGetter(int[] colors, AlphaType alphaType) {\n+        return new Getter(colors, alphaType);\n@@ -40,1 +41,1 @@\n-    public static IndexedToBytePixelConverter createToByteRgb(Getter src, BytePixelSetter dst) {\n+    public static ByteToBytePixelConverter createToByteRgb(Getter src, BytePixelSetter dst) {\n@@ -44,1 +45,1 @@\n-    public static IndexedToBytePixelConverter createToByteBgraAny(Getter src, BytePixelSetter dst) {\n+    public static ByteToBytePixelConverter createToByteBgraAny(Getter src, BytePixelSetter dst) {\n@@ -49,2 +50,2 @@\n-        Getter(int[] colors, Boolean premultiplied) {\n-            super(colors, premultiplied);\n+        Getter(int[] colors, AlphaType alphaType) {\n+            super(colors, alphaType);\n@@ -85,1 +86,1 @@\n-        void doConvert(byte[] srcarr, int srcoff, int srcscanbits,\n+        void doConvert(byte[] srcarr, int srcoff, int srcscanbytes,\n@@ -104,1 +105,1 @@\n-                srcoff += srcscanbits;\n+                srcoff += srcscanbytes;\n@@ -110,1 +111,1 @@\n-        void doConvert(ByteBuffer srcbuf, int srcoff, int srcscanbits,\n+        void doConvert(ByteBuffer srcbuf, int srcoff, int srcscanbytes,\n@@ -130,1 +131,1 @@\n-                srcoff += srcscanbits;\n+                srcoff += srcscanbytes;\n@@ -142,1 +143,1 @@\n-        void doConvert(byte[] srcarr, int srcoff, int srcscanbits,\n+        void doConvert(byte[] srcarr, int srcoff, int srcscanbytes,\n@@ -156,1 +157,1 @@\n-                srcoff += srcscanbits;\n+                srcoff += srcscanbytes;\n@@ -162,1 +163,1 @@\n-        void doConvert(ByteBuffer srcbuf, int srcoff, int srcscanbits,\n+        void doConvert(ByteBuffer srcbuf, int srcoff, int srcscanbytes,\n@@ -177,1 +178,1 @@\n-                srcoff += srcscanbits;\n+                srcoff += srcscanbytes;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/image\/impl\/EightBitIndexed.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.image.AlphaType;\n@@ -29,1 +30,1 @@\n-import com.sun.javafx.image.IndexedToBytePixelConverter;\n+import com.sun.javafx.image.ByteToBytePixelConverter;\n@@ -36,2 +37,2 @@\n-    public static Getter createGetter(int[] colors, Boolean premultiplied) {\n-        return new Getter(colors, premultiplied);\n+    public static Getter createGetter(int[] colors, AlphaType alphaType) {\n+        return new Getter(colors, alphaType);\n@@ -40,1 +41,1 @@\n-    public static IndexedToBytePixelConverter createToByteRgb(Getter src, BytePixelSetter dst) {\n+    public static ByteToBytePixelConverter createToByteRgb(Getter src, BytePixelSetter dst) {\n@@ -44,1 +45,1 @@\n-    public static IndexedToBytePixelConverter createToByteBgraAny(Getter src, BytePixelSetter dst) {\n+    public static ByteToBytePixelConverter createToByteBgraAny(Getter src, BytePixelSetter dst) {\n@@ -49,2 +50,2 @@\n-        Getter(int[] colors, Boolean premultiplied) {\n-            super(colors, premultiplied);\n+        Getter(int[] colors, AlphaType alphaType) {\n+            super(colors, alphaType);\n@@ -85,1 +86,1 @@\n-        void doConvert(byte[] srcarr, int srcoff, int srcscanbits,\n+        void doConvert(byte[] srcarr, int srcoff, int srcscanbytes,\n@@ -88,0 +89,2 @@\n+            int srcscanbits = srcscanbytes * 8;\n+            int srcoffbits = srcoff * 8;\n@@ -97,1 +100,1 @@\n-                    int argb = colors[(srcarr[srcoff \/ 8 + x \/ 2] >> (4 - x % 2 * 4)) & 0xf];\n+                    int argb = colors[(srcarr[srcoffbits \/ 8 + x \/ 2] >> (4 - x % 2 * 4)) & 0xf];\n@@ -104,1 +107,1 @@\n-                srcoff += srcscanbits;\n+                srcoffbits += srcscanbits;\n@@ -110,1 +113,1 @@\n-        void doConvert(ByteBuffer srcbuf, int srcoff, int srcscanbits,\n+        void doConvert(ByteBuffer srcbuf, int srcoff, int srcscanbytes,\n@@ -113,0 +116,2 @@\n+            int srcscanbits = srcscanbytes * 8;\n+            int srcoffbits = srcoff * 8;\n@@ -122,1 +127,1 @@\n-                    int argb = colors[(srcbuf.get(srcoff \/ 8 + x \/ 2) >> (4 - x % 2 * 4)) & 0xf];\n+                    int argb = colors[(srcbuf.get(srcoffbits \/ 8 + x \/ 2) >> (4 - x % 2 * 4)) & 0xf];\n@@ -130,1 +135,1 @@\n-                srcoff += srcscanbits;\n+                srcoffbits += srcscanbits;\n@@ -142,1 +147,1 @@\n-        void doConvert(byte[] srcarr, int srcoff, int srcscanbits,\n+        void doConvert(byte[] srcarr, int srcoff, int srcscanbytes,\n@@ -145,0 +150,2 @@\n+            int srcscanbits = srcscanbytes * 8;\n+            int srcoffbits = srcoff * 8;\n@@ -146,0 +153,1 @@\n+\n@@ -150,1 +158,1 @@\n-                    int argb = colors[(srcarr[srcoff \/ 8 + x \/ 2] >> (4 - x % 2 * 4)) & 0xf];\n+                    int argb = colors[(srcarr[srcoffbits \/ 8 + x \/ 2] >> (4 - x % 2 * 4)) & 0xf];\n@@ -156,1 +164,1 @@\n-                srcoff += srcscanbits;\n+                srcoffbits += srcscanbits;\n@@ -162,1 +170,1 @@\n-        void doConvert(ByteBuffer srcbuf, int srcoff, int srcscanbits,\n+        void doConvert(ByteBuffer srcbuf, int srcoff, int srcscanbytes,\n@@ -165,0 +173,2 @@\n+            int srcscanbits = srcscanbytes * 8;\n+            int srcoffbits = srcoff * 8;\n@@ -166,0 +176,1 @@\n+\n@@ -170,1 +181,1 @@\n-                    int argb = colors[(srcbuf.get(srcoff \/ 8 + x \/ 2) >> (4 - x % 2 * 4)) & 0xf];\n+                    int argb = colors[(srcbuf.get(srcoffbits \/ 8 + x \/ 2) >> (4 - x % 2 * 4)) & 0xf];\n@@ -177,1 +188,1 @@\n-                srcoff += srcscanbits;\n+                srcoffbits += srcscanbits;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/image\/impl\/FourBitIndexed.java","additions":30,"deletions":19,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.image.AlphaType;\n@@ -29,1 +30,1 @@\n-import com.sun.javafx.image.IndexedToBytePixelConverter;\n+import com.sun.javafx.image.ByteToBytePixelConverter;\n@@ -36,2 +37,2 @@\n-    public static Getter createGetter(int[] colors, Boolean premultiplied) {\n-        return new Getter(colors, premultiplied);\n+    public static Getter createGetter(int[] colors, AlphaType alphaType) {\n+        return new Getter(colors, alphaType);\n@@ -40,1 +41,1 @@\n-    public static IndexedToBytePixelConverter createToByteRgb(Getter src, BytePixelSetter dst) {\n+    public static ByteToBytePixelConverter createToByteRgb(Getter src, BytePixelSetter dst) {\n@@ -44,1 +45,1 @@\n-    public static IndexedToBytePixelConverter createToByteBgraAny(Getter src, BytePixelSetter dst) {\n+    public static ByteToBytePixelConverter createToByteBgraAny(Getter src, BytePixelSetter dst) {\n@@ -49,2 +50,2 @@\n-        Getter(int[] colors, Boolean premultiplied) {\n-            super(colors, premultiplied);\n+        Getter(int[] colors, AlphaType alphaType) {\n+            super(colors, alphaType);\n@@ -85,1 +86,1 @@\n-        void doConvert(byte[] srcarr, int srcoff, int srcscanbits,\n+        void doConvert(byte[] srcarr, int srcoff, int srcscanbytes,\n@@ -88,0 +89,2 @@\n+            int srcscanbits = srcscanbytes * 8;\n+            int srcoffbits = srcoff * 8;\n@@ -97,1 +100,1 @@\n-                    int argb = colors[(srcarr[srcoff \/ 8 + x \/ 8] >> (7 - x % 8)) & 1];\n+                    int argb = colors[(srcarr[srcoffbits \/ 8 + x \/ 8] >> (7 - x % 8)) & 1];\n@@ -103,1 +106,2 @@\n-                srcoff += srcscanbits;\n+\n+                srcoffbits += srcscanbits;\n@@ -109,1 +113,1 @@\n-        void doConvert(ByteBuffer srcbuf, int srcoff, int srcscanbits,\n+        void doConvert(ByteBuffer srcbuf, int srcoff, int srcscanbytes,\n@@ -112,0 +116,2 @@\n+            int srcscanbits = srcscanbytes * 8;\n+            int srcoffbits = srcoff * 8;\n@@ -121,1 +127,1 @@\n-                    int argb = colors[(srcbuf.get(srcoff \/ 8 + x \/ 8) >> (7 - x % 8)) & 1];\n+                    int argb = colors[(srcbuf.get(srcoffbits \/ 8 + x \/ 8) >> (7 - x % 8)) & 1];\n@@ -128,1 +134,2 @@\n-                srcoff += srcscanbits;\n+\n+                srcoffbits += srcscanbits;\n@@ -140,1 +147,1 @@\n-        void doConvert(byte[] srcarr, int srcoff, int srcscanbits,\n+        void doConvert(byte[] srcarr, int srcoff, int srcscanbytes,\n@@ -143,0 +150,2 @@\n+            int srcscanbits = srcscanbytes * 8;\n+            int srcoffbits = srcoff * 8;\n@@ -144,0 +153,1 @@\n+\n@@ -148,1 +158,1 @@\n-                    int argb = colors[(srcarr[srcoff \/ 8 + x \/ 8] >> (7 - x % 8)) & 1];\n+                    int argb = colors[(srcarr[srcoffbits \/ 8 + x \/ 8] >> (7 - x % 8)) & 1];\n@@ -153,1 +163,2 @@\n-                srcoff += srcscanbits;\n+\n+                srcoffbits += srcscanbits;\n@@ -159,1 +170,1 @@\n-        void doConvert(ByteBuffer srcbuf, int srcoff, int srcscanbits,\n+        void doConvert(ByteBuffer srcbuf, int srcoff, int srcscanbytes,\n@@ -162,0 +173,2 @@\n+            int srcscanbits = srcscanbytes * 8;\n+            int srcoffbits = srcoff * 8;\n@@ -163,0 +176,1 @@\n+\n@@ -167,1 +181,1 @@\n-                    int argb = colors[(srcbuf.get(srcoff \/ 8 + x \/ 8) >> (7 - x % 8)) & 1];\n+                    int argb = colors[(srcbuf.get(srcoffbits \/ 8 + x \/ 8) >> (7 - x % 8)) & 1];\n@@ -173,1 +187,2 @@\n-                srcoff += srcscanbits;\n+\n+                srcoffbits += srcscanbits;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/image\/impl\/OneBitIndexed.java","additions":34,"deletions":19,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.image.AlphaType;\n@@ -29,1 +30,1 @@\n-import com.sun.javafx.image.IndexedToBytePixelConverter;\n+import com.sun.javafx.image.ByteToBytePixelConverter;\n@@ -36,2 +37,2 @@\n-    public static Getter createGetter(int[] colors, Boolean premultiplied) {\n-        return new Getter(colors, premultiplied);\n+    public static Getter createGetter(int[] colors, AlphaType alphaType) {\n+        return new Getter(colors, alphaType);\n@@ -40,1 +41,1 @@\n-    public static IndexedToBytePixelConverter createToByteRgb(Getter src, BytePixelSetter dst) {\n+    public static ByteToBytePixelConverter createToByteRgb(Getter src, BytePixelSetter dst) {\n@@ -44,1 +45,1 @@\n-    public static IndexedToBytePixelConverter createToByteBgraAny(Getter src, BytePixelSetter dst) {\n+    public static ByteToBytePixelConverter createToByteBgraAny(Getter src, BytePixelSetter dst) {\n@@ -49,2 +50,2 @@\n-        Getter(int[] colors, Boolean premultiplied) {\n-            super(colors, premultiplied);\n+        Getter(int[] colors, AlphaType alphaType) {\n+            super(colors, alphaType);\n@@ -85,1 +86,1 @@\n-        void doConvert(byte[] srcarr, int srcoff, int srcscanbits,\n+        void doConvert(byte[] srcarr, int srcoff, int srcscanbytes,\n@@ -88,0 +89,2 @@\n+            int srcscanbits = srcscanbytes * 8;\n+            int srcoffbits = srcoff * 8;\n@@ -97,1 +100,1 @@\n-                    int argb = colors[(srcarr[srcoff \/ 8 + x \/ 4] >> (6 - x % 4 * 2)) & 3];\n+                    int argb = colors[(srcarr[srcoffbits \/ 8 + x \/ 4] >> (6 - x % 4 * 2)) & 3];\n@@ -103,1 +106,1 @@\n-                srcoff += srcscanbits;\n+                srcoffbits += srcscanbits;\n@@ -112,0 +115,2 @@\n+            int srcscanbits = srcscanbytes * 8;\n+            int srcoffbits = srcoff * 8;\n@@ -121,1 +126,1 @@\n-                    int argb = colors[(srcbuf.get(srcoff \/ 8 + x \/ 4) >> (6 - x % 4 * 2)) & 3];\n+                    int argb = colors[(srcbuf.get(srcoffbits \/ 8 + x \/ 4) >> (6 - x % 4 * 2)) & 3];\n@@ -128,1 +133,2 @@\n-                srcoff += srcscanbytes;\n+\n+                srcoffbits += srcscanbits;\n@@ -143,0 +149,2 @@\n+            int srcscanbits = srcscanbytes * 8;\n+            int srcoffbits = srcoff * 8;\n@@ -144,0 +152,1 @@\n+\n@@ -148,1 +157,1 @@\n-                    int argb = colors[(srcarr[srcoff \/ 8 + x \/ 4] >> (6 - x % 4 * 2)) & 3];\n+                    int argb = colors[(srcarr[srcoffbits \/ 8 + x \/ 4] >> (6 - x % 4 * 2)) & 3];\n@@ -153,1 +162,2 @@\n-                srcoff += srcscanbytes;\n+\n+                srcoffbits += srcscanbits;\n@@ -162,0 +172,2 @@\n+            int srcscanbits = srcscanbytes * 8;\n+            int srcoffbits = srcoff * 8;\n@@ -163,0 +175,1 @@\n+\n@@ -167,1 +180,1 @@\n-                    int argb = colors[(srcbuf.get(srcoff \/ 8 + x \/ 4) >> (6 - x % 4 * 2)) & 3];\n+                    int argb = colors[(srcbuf.get(srcoffbits \/ 8 + x \/ 4) >> (6 - x % 4 * 2)) & 3];\n@@ -173,1 +186,2 @@\n-                srcoff += srcscanbytes;\n+\n+                srcoffbits += srcscanbits;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/image\/impl\/TwoBitIndexed.java","additions":30,"deletions":16,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import com.sun.javafx.image.IndexedToBytePixelConverter;\n+import com.sun.javafx.image.AlphaType;\n@@ -309,4 +309,4 @@\n-                Boolean premultiplied = switch (type) {\n-                    case PALETTE_ALPHA -> Boolean.FALSE;\n-                    case PALETTE_ALPHA_PRE -> Boolean.TRUE;\n-                    default -> null; \/\/ PALETTE\n+                AlphaType alphaType = switch (type) {\n+                    case PALETTE_ALPHA -> AlphaType.NONPREMULTIPLIED;\n+                    case PALETTE_ALPHA_PRE -> AlphaType.PREMULTIPLIED;\n+                    default -> AlphaType.OPAQUE; \/\/ PALETTE\n@@ -317,2 +317,2 @@\n-                        var getter = OneBitIndexed.createGetter(frame.getPalette(), premultiplied);\n-                        yield premultiplied == null\n+                        var getter = OneBitIndexed.createGetter(frame.getPalette(), alphaType);\n+                        yield alphaType == AlphaType.OPAQUE\n@@ -324,2 +324,2 @@\n-                        var getter = TwoBitIndexed.createGetter(frame.getPalette(), premultiplied);\n-                        yield premultiplied == null\n+                        var getter = TwoBitIndexed.createGetter(frame.getPalette(), alphaType);\n+                        yield alphaType == AlphaType.OPAQUE\n@@ -331,2 +331,2 @@\n-                        var getter = FourBitIndexed.createGetter(frame.getPalette(), premultiplied);\n-                        yield premultiplied == null\n+                        var getter = FourBitIndexed.createGetter(frame.getPalette(), alphaType);\n+                        yield alphaType == AlphaType.OPAQUE\n@@ -338,2 +338,2 @@\n-                        var getter = EightBitIndexed.createGetter(frame.getPalette(), premultiplied);\n-                        yield premultiplied == null\n+                        var getter = EightBitIndexed.createGetter(frame.getPalette(), alphaType);\n+                        yield alphaType == AlphaType.OPAQUE\n@@ -347,1 +347,1 @@\n-                int dstPixelSize = premultiplied == null ? 3 : 4;\n+                int dstPixelSize = alphaType == AlphaType.OPAQUE ? 3 : 4;\n@@ -351,1 +351,1 @@\n-                yield premultiplied == null\n+                yield alphaType == AlphaType.OPAQUE\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/Image.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -197,1 +197,1 @@\n-        PALETTE_ONE_BIT_OPAQUE(ImageType.PALETTE, PixelFormat.BYTE_RGB, 2, 1,\n+        PALETTE_ONE_BIT_OPAQUE(ImageType.PALETTE, PixelFormat.BYTE_RGB, 1, 1,\n@@ -202,2 +202,2 @@\n-                0, 1,\n-                1, 0\n+                0, 1, \/*padding:*\/ 0, 0, 0, 0, 0, 0,\n+                1, 0, \/*padding:*\/ 0, 0, 0, 0, 0, 0\n@@ -210,1 +210,1 @@\n-        PALETTE_ONE_BIT_ALPHA(ImageType.PALETTE_ALPHA, PixelFormat.BYTE_BGRA_PRE, 2, 1,\n+        PALETTE_ONE_BIT_ALPHA(ImageType.PALETTE_ALPHA, PixelFormat.BYTE_BGRA_PRE, 1, 1,\n@@ -215,2 +215,2 @@\n-                0, 1,\n-                1, 0\n+                0, 1, \/*padding:*\/ 0, 0, 0, 0, 0, 0,\n+                1, 0, \/*padding:*\/ 0, 0, 0, 0, 0, 0\n@@ -223,1 +223,1 @@\n-        PALETTE_ONE_BIT_ALPHA_PRE(ImageType.PALETTE_ALPHA_PRE, PixelFormat.BYTE_BGRA_PRE, 2, 1,\n+        PALETTE_ONE_BIT_ALPHA_PRE(ImageType.PALETTE_ALPHA_PRE, PixelFormat.BYTE_BGRA_PRE, 1, 1,\n@@ -228,2 +228,2 @@\n-                0, 1,\n-                1, 0\n+                0, 1, \/*padding:*\/ 0, 0, 0, 0, 0, 0,\n+                1, 0, \/*padding:*\/ 0, 0, 0, 0, 0, 0\n@@ -236,1 +236,1 @@\n-        PALETTE_TWO_BIT_OPAQUE(ImageType.PALETTE, PixelFormat.BYTE_RGB, 4, 2,\n+        PALETTE_TWO_BIT_OPAQUE(ImageType.PALETTE, PixelFormat.BYTE_RGB, 1, 2,\n@@ -241,2 +241,2 @@\n-                0, 0, 0, 1,\n-                1, 0, 1, 1\n+                0, 0, 0, 1, \/*padding:*\/ 0, 0, 0, 0,\n+                1, 0, 1, 1, \/*padding:*\/ 0, 0, 0, 0\n@@ -249,1 +249,1 @@\n-        PALETTE_TWO_BIT_ALPHA(ImageType.PALETTE_ALPHA, PixelFormat.BYTE_BGRA_PRE, 4, 2,\n+        PALETTE_TWO_BIT_ALPHA(ImageType.PALETTE_ALPHA, PixelFormat.BYTE_BGRA_PRE, 1, 2,\n@@ -254,2 +254,2 @@\n-                0, 0, 0, 1,\n-                1, 0, 1, 1\n+                0, 0, 0, 1, \/*padding:*\/ 0, 0, 0, 0,\n+                1, 0, 1, 1, \/*padding:*\/ 0, 0, 0, 0\n@@ -262,1 +262,1 @@\n-        PALETTE_TWO_BIT_ALPHA_PRE(ImageType.PALETTE_ALPHA_PRE, PixelFormat.BYTE_BGRA_PRE, 4, 2,\n+        PALETTE_TWO_BIT_ALPHA_PRE(ImageType.PALETTE_ALPHA_PRE, PixelFormat.BYTE_BGRA_PRE, 1, 2,\n@@ -267,2 +267,2 @@\n-                0, 0, 0, 1,\n-                1, 0, 1, 1\n+                0, 0, 0, 1, \/*padding:*\/ 0, 0, 0, 0,\n+                1, 0, 1, 1, \/*padding:*\/ 0, 0, 0, 0\n@@ -275,1 +275,1 @@\n-        PALETTE_FOUR_BIT_OPAQUE(ImageType.PALETTE, PixelFormat.BYTE_RGB, 8, 4,\n+        PALETTE_FOUR_BIT_OPAQUE(ImageType.PALETTE, PixelFormat.BYTE_RGB, 1, 4,\n@@ -288,1 +288,1 @@\n-        PALETTE_FOUR_BIT_ALPHA(ImageType.PALETTE_ALPHA, PixelFormat.BYTE_BGRA_PRE, 8, 4,\n+        PALETTE_FOUR_BIT_ALPHA(ImageType.PALETTE_ALPHA, PixelFormat.BYTE_BGRA_PRE, 1, 4,\n@@ -301,1 +301,1 @@\n-        PALETTE_FOUR_BIT_ALPHA_PRE(ImageType.PALETTE_ALPHA_PRE, PixelFormat.BYTE_BGRA_PRE, 8, 4,\n+        PALETTE_FOUR_BIT_ALPHA_PRE(ImageType.PALETTE_ALPHA_PRE, PixelFormat.BYTE_BGRA_PRE, 1, 4,\n@@ -314,1 +314,1 @@\n-        PALETTE_EIGHT_BIT_OPAQUE(ImageType.PALETTE, PixelFormat.BYTE_RGB, 16, 8,\n+        PALETTE_EIGHT_BIT_OPAQUE(ImageType.PALETTE, PixelFormat.BYTE_RGB, 2, 8,\n@@ -327,1 +327,1 @@\n-        PALETTE_EIGHT_BIT_ALPHA(ImageType.PALETTE_ALPHA, PixelFormat.BYTE_BGRA_PRE, 16, 8,\n+        PALETTE_EIGHT_BIT_ALPHA(ImageType.PALETTE_ALPHA, PixelFormat.BYTE_BGRA_PRE, 2, 8,\n@@ -340,1 +340,1 @@\n-        PALETTE_EIGHT_BIT_ALPHA_PRE(ImageType.PALETTE_ALPHA_PRE, PixelFormat.BYTE_BGRA_PRE, 16, 8,\n+        PALETTE_EIGHT_BIT_ALPHA_PRE(ImageType.PALETTE_ALPHA_PRE, PixelFormat.BYTE_BGRA_PRE, 2, 8,\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/prism\/ImageTest.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"}]}