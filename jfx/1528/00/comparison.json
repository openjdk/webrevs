{"files":[{"patch":"@@ -68,1 +68,1 @@\n-        public void handleKeyEvent(View view, long time, int action,\n+        public boolean handleKeyEvent(View view, long time, int action,\n@@ -70,0 +70,1 @@\n+            return false;\n@@ -548,1 +549,1 @@\n-    private void handleKeyEvent(long time, int action,\n+    private boolean handleKeyEvent(long time, int action,\n@@ -551,1 +552,1 @@\n-            this.eventHandler.handleKeyEvent(this, time, action, keyCode, keyChars, modifiers);\n+            return this.eventHandler.handleKeyEvent(this, time, action, keyCode, keyChars, modifiers);\n@@ -553,0 +554,1 @@\n+        return false;\n@@ -978,0 +980,4 @@\n+    protected boolean notifyKeyAndReturnConsumed(int type, int keyCode, char[] keyChars, int modifiers) {\n+        return handleKeyEvent(System.nanoTime(), type, keyCode, keyChars, modifiers);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/View.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -56,2 +56,2 @@\n-    public static void processKeyEvent(Scene scene, KeyEvent e) {\n-        sceneAccessor.processKeyEvent(scene, e);\n+    public static boolean processKeyEvent(Scene scene, KeyEvent e) {\n+        return sceneAccessor.processKeyEvent(scene, e);\n@@ -121,1 +121,1 @@\n-        void processKeyEvent(Scene scene, KeyEvent e);\n+        boolean processKeyEvent(Scene scene, KeyEvent e);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/SceneHelper.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    public void keyEvent(KeyEvent keyEvent);\n+    public boolean keyEvent(KeyEvent keyEvent);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/TKSceneListener.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-    private class KeyEventNotification implements PrivilegedAction<Void> {\n+    private class KeyEventNotification implements PrivilegedAction<Boolean> {\n@@ -161,1 +161,1 @@\n-        public Void run() {\n+        public Boolean run() {\n@@ -166,0 +166,1 @@\n+            Boolean consumed = false;\n@@ -218,1 +219,1 @@\n-                            scene.sceneListener.keyEvent(keyEvent);\n+                            consumed = scene.sceneListener.keyEvent(keyEvent);\n@@ -234,1 +235,1 @@\n-            return null;\n+            return consumed;\n@@ -239,1 +240,1 @@\n-    @Override public void handleKeyEvent(View view, long time, int type, int key,\n+    @Override public boolean handleKeyEvent(View view, long time, int type, int key,\n@@ -249,1 +250,1 @@\n-        QuantumToolkit.runWithoutRenderLock(() -> {\n+        final boolean consumed = QuantumToolkit.runWithoutRenderLock(() -> {\n@@ -252,0 +253,1 @@\n+        return consumed;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/GlassViewEventHandler.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import com.sun.javafx.event.EventUtil;\n@@ -402,2 +403,2 @@\n-                        public void processKeyEvent(Scene scene, KeyEvent e) {\n-                            scene.processKeyEvent(e);\n+                        public boolean processKeyEvent(Scene scene, KeyEvent e) {\n+                            return scene.processKeyEvent(e);\n@@ -2184,1 +2185,1 @@\n-    void processKeyEvent(KeyEvent e) {\n+    boolean processKeyEvent(KeyEvent e) {\n@@ -2195,0 +2196,2 @@\n+        if (eventTarget == null) return false;\n+\n@@ -2197,1 +2200,1 @@\n-        Event.fireEvent(eventTarget, e);\n+        return EventUtil.fireEvent(eventTarget, e) == null;\n@@ -2716,1 +2719,1 @@\n-        public void keyEvent(KeyEvent keyEvent)\n+        public boolean keyEvent(KeyEvent keyEvent)\n@@ -2718,1 +2721,1 @@\n-            processKeyEvent(keyEvent);\n+            return processKeyEvent(keyEvent);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Scene.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-extern jmethodID jViewNotifyKey;\n+extern jmethodID jViewNotifyKeyAndReturnConsumed;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassStatics.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-jmethodID jViewNotifyKey = NULL;\n+jmethodID jViewNotifyKeyAndReturnConsumed= NULL;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassStatics.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-    if (jViewNotifyKey == NULL)\n+    if (jViewNotifyKeyAndReturnConsumed == NULL)\n@@ -111,1 +111,1 @@\n-        jViewNotifyKey = (*env)->GetMethodID(env, jViewClass, \"notifyKey\", \"(II[CI)V\");\n+        jViewNotifyKeyAndReturnConsumed = (*env)->GetMethodID(env, jViewClass, \"notifyKeyAndReturnConsumed\", \"(II[CI)Z\");\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassView.m","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -489,7 +489,7 @@\n-            (*env)->CallVoidMethod(env, self->_delegate->jView, jViewNotifyKey,\n-                                   com_sun_glass_events_KeyEvent_PRESS,\n-                                   uch, jKeyChars, jModifiers);\n-            (*env)->CallVoidMethod(env, self->_delegate->jView, jViewNotifyKey,\n-                                   com_sun_glass_events_KeyEvent_TYPED,\n-                                   uch, jKeyChars, jModifiers);\n-            (*env)->CallVoidMethod(env, self->_delegate->jView, jViewNotifyKey,\n+            (*env)->CallBooleanMethod(env, self->_delegate->jView, jViewNotifyKeyAndReturnConsumed,\n+                                      com_sun_glass_events_KeyEvent_PRESS,\n+                                      uch, jKeyChars, jModifiers);\n+            (*env)->CallBooleanMethod(env, self->_delegate->jView, jViewNotifyKeyAndReturnConsumed,\n+                                      com_sun_glass_events_KeyEvent_TYPED,\n+                                      uch, jKeyChars, jModifiers);\n+            (*env)->CallBooleanMethod(env, self->_delegate->jView, jViewNotifyKeyAndReturnConsumed,\n@@ -505,1 +505,2 @@\n-    [self->_delegate sendJavaKeyEvent:theEvent isDown:YES];\n+\n+    BOOL result = [self->_delegate sendJavaKeyEvent:theEvent isDown:YES];\n@@ -507,1 +508,1 @@\n-    return NO; \/\/ return NO to allow system-default processing of Cmd+Q, etc.\n+    return result;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassView3D.m","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-- (void)sendJavaKeyEvent:(NSEvent *)event isDown:(BOOL)isDown;\n+- (BOOL)sendJavaKeyEvent:(NSEvent *)event isDown:(BOOL)isDown;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassViewDelegate.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -677,1 +677,1 @@\n-    (*env)->CallVoidMethod(env, self->jView, jViewNotifyKey, (type), \\\n+    jboolean thisEventWasConsumed = (*env)->CallBooleanMethod(env, self->jView, jViewNotifyKeyAndReturnConsumed, (type), \\\n@@ -682,1 +682,1 @@\n-- (void)sendJavaKeyEvent:(NSEvent *)theEvent isDown:(BOOL)isDown\n+- (BOOL)sendJavaKeyEvent:(NSEvent *)theEvent isDown:(BOOL)isDown\n@@ -686,1 +686,1 @@\n-        return;\n+        return NO;\n@@ -697,0 +697,4 @@\n+    \/\/ This routine returns YES if the PRESS event was consumed. This is\n+    \/\/ used to ensure that performKeyEquivalent doesn't allow an event\n+    \/\/ to be processed by both JavaFX and the system menus.\n+    jboolean wasConsumed = false;\n@@ -704,0 +708,1 @@\n+        wasConsumed = thisEventWasConsumed;\n@@ -723,0 +728,2 @@\n+\n+    return wasConsumed ? YES : NO;\n@@ -726,1 +733,1 @@\n-        (*env)->CallVoidMethod(env, self->jView, jViewNotifyKey, \\\n+        (*env)->CallBooleanMethod(env, self->jView, jViewNotifyKeyAndReturnConsumed, \\\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassViewDelegate.m","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,223 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.scene;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Menu;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyCodeCombination;\n+import javafx.scene.input.KeyCombination;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Stage;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import com.sun.javafx.PlatformUtil;\n+\n+import test.util.Util;\n+\n+public class MenuDoubleShortcutTest {\n+\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n+\n+    static volatile Stage stage;\n+    static volatile TestApp testApp;\n+    static private final int delayMilliseconds = 100;\n+\n+    private enum TestResult {\n+        \/\/ We provide an explanation of what happened. Since we only see this\n+        \/\/ explanation on failure it is worded accordingly.\n+        IGNORED(\"Key press event triggered no actions\"),\n+        FIREDTWICE(\"Key press event fired scene action and also a menu bar item\"),\n+        FIREDMENUITEM(\"Key press event fired menu bar item instead of scene action\"),\n+        FIREDSCENE(\"Key press event fired scene action instead of menu bar item\");\n+\n+        private String explanation;\n+        TestResult(String e) {\n+            explanation = e;\n+        }\n+\n+        public String errorExplanation() {\n+            return explanation;\n+        }\n+    };\n+\n+    \/\/ KeyCode.A will be added to the menu bar and the scene\n+    \/\/ KeyCode.B will be added to the menu bar only\n+    \/\/ KeyCode.C will be added to the scene only.\n+    private static final KeyCode menuBarAndSceneKeyCode = KeyCode.A;\n+    private static final KeyCode menuBarOnlyKeyCode = KeyCode.B;\n+    private static final KeyCode sceneOnlyKeyCode = KeyCode.C;\n+    private static final KeyCode noAcceleratorKeyCode = KeyCode.D;\n+\n+    private static final KeyCombination menuBarAndSceneAccelerator = new KeyCodeCombination(menuBarAndSceneKeyCode, KeyCombination.SHORTCUT_DOWN);\n+    private static final KeyCombination menuBarOnlyAccelerator = new KeyCodeCombination(menuBarOnlyKeyCode, KeyCombination.SHORTCUT_DOWN);\n+    private static final KeyCombination sceneOnlyAccelerator = new KeyCodeCombination(sceneOnlyKeyCode, KeyCombination.SHORTCUT_DOWN);\n+\n+    \/\/ On Mac the scene should process the event and it should\n+    \/\/ not trigger a system menu bar item.\n+    \/\/\n+    \/\/ https:\/\/bugs.openjdk.org\/browse\/JDK-8087863\n+    \/\/ https:\/\/bugs.openjdk.org\/browse\/JDK-8088897\n+    @Test\n+    void macSceneComesBeforeMenuBar() {\n+        Assumptions.assumeTrue(PlatformUtil.isMac());\n+        testApp.testKey(menuBarAndSceneKeyCode);\n+        Util.sleep(delayMilliseconds);\n+        TestResult result = testApp.testResult();\n+        Assertions.assertEquals(TestResult.FIREDSCENE, result, result.errorExplanation());\n+    }\n+\n+    \/\/ On platforms other than Mac the menu bar should process the event\n+    \/\/ and the scene should not.\n+    @Test\n+    void nonMacMenuBarComesBeforeScene() {\n+        Assumptions.assumeFalse(PlatformUtil.isMac());\n+        testApp.testKey(menuBarAndSceneKeyCode);\n+        Util.sleep(delayMilliseconds);\n+        TestResult result = testApp.testResult();\n+        Assertions.assertEquals(TestResult.FIREDMENUITEM, result, result.errorExplanation());\n+    }\n+\n+    @Test\n+    void acceleratorOnlyInMenuBar() {\n+        testApp.testKey(menuBarOnlyKeyCode);\n+        Util.sleep(delayMilliseconds);\n+        TestResult result = testApp.testResult();\n+        Assertions.assertEquals(TestResult.FIREDMENUITEM, result, result.errorExplanation());\n+    }\n+\n+    @Test\n+    void acceleratorOnlyInScene() {\n+        testApp.testKey(sceneOnlyKeyCode);\n+        Util.sleep(delayMilliseconds);\n+        TestResult result = testApp.testResult();\n+        Assertions.assertEquals(TestResult.FIREDSCENE, result, result.errorExplanation());\n+    }\n+\n+    @Test\n+    void acceleratorAbsent() {\n+        testApp.testKey(noAcceleratorKeyCode);\n+        Util.sleep(delayMilliseconds);\n+        TestResult result = testApp.testResult();\n+        Assertions.assertEquals(TestResult.IGNORED, result, result.errorExplanation());\n+    }\n+\n+    @BeforeAll\n+    static void initFX() throws Exception {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterAll\n+    static void exit() {\n+        Util.shutdown();\n+    }\n+\n+    public static class TestApp extends Application {\n+\n+        private boolean sceneAcceleratorFired = false;\n+        private boolean menuBarItemFired = false;\n+\n+        private MenuItem createMenuItem(KeyCombination accelerator) {\n+            MenuItem menuItem = new MenuItem(accelerator.getName() + \" menu item\");\n+            menuItem.setAccelerator(accelerator);\n+            menuItem.setOnAction(e -> {\n+                menuBarItemFired = true;\n+                e.consume();\n+            });\n+            return menuItem;\n+        }\n+\n+        @Override\n+        public void start(Stage primaryStage) {\n+\n+            testApp = this;\n+            stage = primaryStage;\n+\n+            Label label = new Label(\"Testing accelerator double processing\");\n+\n+            MenuBar menuBar = new MenuBar();\n+            menuBar.setUseSystemMenuBar(true);\n+\n+            Menu menu = new Menu(\"Top menu\");\n+            menu.getItems().add(createMenuItem(menuBarAndSceneAccelerator));\n+            menu.getItems().add(createMenuItem(menuBarOnlyAccelerator));\n+            menuBar.getMenus().add(menu);\n+\n+            Scene scene = new Scene(new VBox(menuBar, label), 200, 200);\n+            scene.getAccelerators().put(menuBarAndSceneAccelerator, () -> {\n+                sceneAcceleratorFired = true;\n+            });\n+            scene.getAccelerators().put(sceneOnlyAccelerator, () -> {\n+                sceneAcceleratorFired = true;\n+            });\n+\n+            stage.setScene(scene);\n+            stage.setOnShown(e -> {\n+                Platform.runLater(() -> {\n+                    startupLatch.countDown();\n+                });\n+            });\n+            stage.show();\n+        }\n+\n+        public void testKey(KeyCode code) {\n+            sceneAcceleratorFired = false;\n+            menuBarItemFired = false;\n+            Platform.runLater(() -> {\n+                KeyCode shortcutCode = (PlatformUtil.isMac() ? KeyCode.COMMAND : KeyCode.CONTROL);\n+                Robot robot = new Robot();\n+                robot.keyPress(shortcutCode);\n+                robot.keyPress(code);\n+                robot.keyRelease(code);\n+                robot.keyRelease(shortcutCode);\n+            });\n+        }\n+\n+        public TestResult testResult() {\n+            if (sceneAcceleratorFired && menuBarItemFired) {\n+                return TestResult.FIREDTWICE;\n+            } else if (sceneAcceleratorFired) {\n+                return TestResult.FIREDSCENE;\n+            } else if (menuBarItemFired) {\n+                return TestResult.FIREDMENUITEM;\n+            }\n+            return TestResult.IGNORED;\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/MenuDoubleShortcutTest.java","additions":223,"deletions":0,"binary":false,"changes":223,"status":"added"}]}