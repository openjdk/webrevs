{"files":[{"patch":"@@ -346,0 +346,9 @@\n+        if (contentHeight < Math.abs(ty)) {\n+            \/*\n+             ** This condition occurs when context menu with large number of items\n+             ** are replaced by smaller number of items.\n+             ** Scroll to the top to display the context menu items.\n+             *\/\n+            scroll(Math.abs(ty));\n+        }\n+\n@@ -809,0 +818,1 @@\n+    \/\/ For test purpose only\n@@ -813,0 +823,10 @@\n+    \/\/ For test purpose only\n+    boolean isUpArrowVisible() {\n+        return upArrow.isVisible();\n+    }\n+\n+    \/\/ For test purpose only\n+    boolean isDownArrowVisible() {\n+        return downArrow.isVisible();\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/ContextMenuContent.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -141,0 +141,15 @@\n+    public static boolean isContextMenuUpArrowVisible(ContextMenu menu) {\n+        ContextMenuContent content = getMenuContent(menu);\n+        return content.isUpArrowVisible();\n+    }\n+\n+    public static boolean isContextMenuDownArrowVisible(ContextMenu menu) {\n+        ContextMenuContent content = getMenuContent(menu);\n+        return content.isDownArrowVisible();\n+    }\n+\n+    public static double getContextMenuRowHeight(ContextMenu menu) {\n+        ContextMenuContent content = getMenuContent(menu);\n+        return content.getItemsContainer().getChildren().get(0).prefHeight(-1);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/shims\/java\/com\/sun\/javafx\/scene\/control\/ContextMenuContentShim.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,191 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.scene;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import com.sun.javafx.scene.control.ContextMenuContentShim;\n+import com.sun.javafx.tk.Toolkit;\n+\n+import javafx.application.Application;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.skin.ChoiceBoxSkin;\n+import javafx.scene.control.skin.ChoiceBoxSkinNodesShim;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.MouseButton;\n+import javafx.application.Platform;\n+import javafx.scene.robot.Robot;\n+import javafx.scene.Scene;\n+import javafx.stage.Screen;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import test.util.Util;\n+\n+\/*\n+ * Test for verifying if ChoiceBox items are displayed after\n+ * scrolling large number of items and replacing with 2 items.\n+ *\n+ * There is 1 test in this file.\n+ * Steps for testChoicBoxScrollOnCollectionChange()\n+ * 1. Create a ChoiceBox and add 150 items to it.\n+ * 2. Display the ChoiceBox and scroll down.\n+ * 3. Verify if both up and down scroll arrows are displayed.\n+ * 4. Replace the ChoiceBox items with 2 items.\n+ * 5. Display the ChoiceBox again.\n+ * 6. Verify that ChoiceBox items are displayed and no scroll\n+ *    arrows are displayed.\n+ *\/\n+\n+public class ChoiceBoxScrollUpOnCollectionChangeTest {\n+    static CountDownLatch startupLatch = new CountDownLatch(1);\n+    static CountDownLatch scrollLatch = new CountDownLatch(1);\n+    static CountDownLatch choiceBoxDisplayLatch = new CountDownLatch(1);\n+    static CountDownLatch choiceBoxHiddenLatch = new CountDownLatch(1);\n+    static Robot robot;\n+    static ChoiceBox<String> choiceBox;\n+\n+    static volatile Stage stage;\n+    static volatile Scene scene;\n+\n+    static final int SCENE_WIDTH = 250;\n+    static final int SCENE_HEIGHT = SCENE_WIDTH;\n+\n+    private void mouseClick(double x, double y) {\n+        int xCoordinate = (int) (scene.getWindow().getX() + scene.getX() + x);\n+        int yCoordinate = (int) (scene.getWindow().getY() + scene.getY() + y);\n+        Util.runAndWait(() -> {\n+            robot.mouseMove(xCoordinate, yCoordinate);\n+            robot.mouseClick(MouseButton.PRIMARY);\n+        });\n+    }\n+\n+    private void scrollChoiceBox(int scrollAmt) throws Exception {\n+        Util.runAndWait(() -> {\n+            for (int i = 0; i < scrollAmt; i++) {\n+                robot.keyType(KeyCode.DOWN);\n+                Toolkit.getToolkit().firePulse();\n+            }\n+            scrollLatch.countDown();\n+        });\n+\n+        Util.waitForLatch(scrollLatch, 5, \"Timeout waiting for choicebox to be hidden.\");\n+        Thread.sleep(400); \/\/ Wait for up arrow to get loaded in UI\n+\n+        Util.runAndWait(() -> {\n+            robot.keyType(KeyCode.ENTER);\n+        });\n+    }\n+\n+    private void showChoiceBox() throws Exception {\n+        double x = choiceBox.getLayoutX() + choiceBox.getWidth() \/ 2;\n+        double y = choiceBox.getLayoutY() + choiceBox.getHeight() \/ 2;\n+        mouseClick(x, y);\n+\n+        Util.waitForLatch(choiceBoxDisplayLatch, 5, \"Timeout waiting for choicebox to be displayed.\");\n+    }\n+\n+    private void addChoiceBoxItems(int count) {\n+        Util.runAndWait(() -> {\n+            ObservableList<String> items = FXCollections.observableArrayList();\n+            for (int i = 0; i < count; i++) {\n+                items.add(\"item \" + (i + 1));\n+            }\n+            choiceBox.getItems().setAll(items);\n+        });\n+    }\n+\n+    @Test\n+    public void testChoiceBoxScrollOnCollectionChange() throws Exception {\n+        Util.waitForLatch(startupLatch, 5, \"Timeout waiting for stage to load.\");\n+        ContextMenu popup = ChoiceBoxSkinNodesShim.getChoiceBoxPopup((ChoiceBoxSkin<?>) choiceBox.getSkin());\n+\n+        addChoiceBoxItems(150);\n+        showChoiceBox();\n+\n+        Thread.sleep(400); \/\/ Small delay to avoid test failure due to slow UI loading.\n+\n+        Assert.assertFalse(ContextMenuContentShim.isContextMenuUpArrowVisible(popup));\n+        Assert.assertTrue(ContextMenuContentShim.isContextMenuDownArrowVisible(popup));\n+\n+        double rowHeight = ContextMenuContentShim.getContextMenuRowHeight(popup);\n+        double screenHeight = Math.ceil(Screen.getPrimary().getVisualBounds().getHeight());\n+        scrollChoiceBox((int) (screenHeight \/ rowHeight));\n+\n+        Util.waitForLatch(choiceBoxHiddenLatch, 5, \"Timeout waiting for choicebox to be hidden.\");\n+        Assert.assertTrue(ContextMenuContentShim.isContextMenuUpArrowVisible(popup));\n+        Assert.assertTrue(ContextMenuContentShim.isContextMenuDownArrowVisible(popup));\n+\n+        addChoiceBoxItems(2);\n+        choiceBoxDisplayLatch = new CountDownLatch(1);\n+        showChoiceBox();\n+\n+        Assert.assertFalse(ContextMenuContentShim.isContextMenuUpArrowVisible(popup));\n+        Assert.assertFalse(ContextMenuContentShim.isContextMenuDownArrowVisible(popup));\n+    }\n+\n+    @BeforeClass\n+    public static void initFX() throws Exception {\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void exit() {\n+        Util.shutdown(stage);\n+    }\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage primaryStage) {\n+            robot = new Robot();\n+            stage = primaryStage;\n+\n+            choiceBox = new ChoiceBox<String>();\n+            choiceBox.setOnShown(event -> {\n+                choiceBoxDisplayLatch.countDown();\n+            });\n+\n+            choiceBox.setOnHidden(event -> {\n+                choiceBoxHiddenLatch.countDown();\n+            });\n+\n+            scene = new Scene(choiceBox, SCENE_WIDTH, SCENE_HEIGHT);\n+            stage.setScene(scene);\n+            stage.initStyle(StageStyle.UNDECORATED);\n+            stage.setAlwaysOnTop(true);\n+            stage.setOnShown(event -> Platform.runLater(startupLatch::countDown));\n+            stage.show();\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/ChoiceBoxScrollUpOnCollectionChangeTest.java","additions":191,"deletions":0,"binary":false,"changes":191,"status":"added"}]}