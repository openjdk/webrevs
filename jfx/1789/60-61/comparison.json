{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import javafx.geometry.Pos;\n@@ -33,0 +34,1 @@\n+import javafx.scene.layout.AnchorPane;\n@@ -34,0 +36,2 @@\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.Pane;\n@@ -79,0 +83,8 @@\n+    @Override\n+    protected Stage getStage(boolean alwaysOnTop) {\n+        Stage stage = super.getStage(alwaysOnTop);\n+        stage.setFullScreenExitHint(\n+                \"Will BEEP on macOS when exiting fullscreen due to OS trying to focus a disabled stage\");\n+        return stage;\n+    }\n+\n@@ -133,1 +145,1 @@\n-        StackPane pane = getFocusedLabel(color, stage);\n+        Pane pane = getFocusedLabel(color, stage);\n@@ -152,1 +164,1 @@\n-    private static StackPane getFocusedLabel(Color color, Stage stage) {\n+    private static Pane getFocusedLabel(Color color, Stage stage) {\n@@ -157,4 +169,1 @@\n-        stage.setFullScreenExitHint(\n-                \"Will BEEP on macOS when exiting fullscreen due to OS trying to focus a disabled stage\");\n-\n-        StackPane pane = new StackPane(label);\n+        BorderPane pane = new BorderPane();\n@@ -162,0 +171,2 @@\n+        pane.setBottom(label);\n+        BorderPane.setAlignment(label, Pos.CENTER_RIGHT);\n@@ -178,5 +189,0 @@\n-    private void assertColorNotEquals(Color notExpected, Stage stage) {\n-        Color color = getColor((int) stage.getX() + X_DELTA, (int) stage.getY() + Y_DELTA);\n-        assertColorDoesNotEqual(notExpected, color, TOLERANCE);\n-    }\n-\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageOwnershipTest.java","additions":17,"deletions":11,"binary":false,"changes":28,"status":"modified"}]}