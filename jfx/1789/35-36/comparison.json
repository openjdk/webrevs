{"files":[{"patch":"@@ -105,1 +105,1 @@\n-        return view->current_window->get_geometry().view_x;\n+        return view->current_window->get_view_position().x;\n@@ -123,1 +123,1 @@\n-        return view->current_window->get_geometry().view_y;\n+        return view->current_window->get_view_position().y;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassView.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -114,2 +114,2 @@\n-std::optional<GdkRectangle> WindowContext::normal_extents;\n-std::optional<GdkRectangle> WindowContext::utility_extents;\n+std::optional<Rectangle> WindowContext::normal_extents;\n+std::optional<Rectangle> WindowContext::utility_extents;\n@@ -132,1 +132,0 @@\n-    update_window_size();\n@@ -185,0 +184,24 @@\n+\n+    window_location.setOnChange([this](const Point& point) {\n+        notify_window_move();\n+    });\n+\n+    view_position.setOnChange([this](const Point& point) {\n+        notify_view_move();\n+    });\n+\n+    window_size.setOnChange([this](const Size& size) {\n+        notify_window_resize(is_maximized()\n+                                ? com_sun_glass_events_WindowEvent_MAXIMIZE\n+                                : com_sun_glass_events_WindowEvent_RESIZE);\n+    });\n+\n+    view_size.setOnChange([this](const Size& size) {\n+        notify_view_resize();\n+        update_window_constraints();\n+    });\n+\n+    window_extents.setOnChange([this](const Rectangle& rect) {\n+        update_window_constraints();\n+        update_window_size();\n+    });\n@@ -245,1 +268,4 @@\n-    move_resize(geometry.x, geometry.y, true, true, geometry.width.view, geometry.height.view);\n+    Point loc = window_location.get();\n+    Size size = view_size.get();\n+\n+    move_resize(loc.x, loc.y, true, true, size.width, size.height);\n@@ -354,2 +380,2 @@\n-        mainEnv->CallVoidMethod(jview, jViewNotifyRepaint, 0, 0,\n-                            geometry.width.view, geometry.height.view);\n+        Size size = view_size.get();\n+        mainEnv->CallVoidMethod(jview, jViewNotifyRepaint, 0, 0, size.width, size.height);\n@@ -808,4 +834,3 @@\n-            bool changed = geometry.extents.x != left\n-                        || geometry.extents.y != top\n-                        || geometry.extents.width != (left + right)\n-                        || geometry.extents.height != (top + bottom);\n+            Rectangle extents = window_extents.get();\n+            Rectangle new_extents = { left, top, (left + right), (top + bottom) };\n+            bool changed = extents == new_extents;\n@@ -817,2 +842,1 @@\n-            GdkRectangle rect = { left, top, (left + right), (top + bottom) };\n-            set_cached_extents(rect);\n+            set_cached_extents(new_extents);\n@@ -822,1 +846,1 @@\n-                geometry.needs_to_update_frame_extents = true;\n+                needs_to_update_frame_extents = true;\n@@ -827,2 +851,3 @@\n-            int newW = geometry.width.view;\n-            int newH = geometry.height.view;\n+            Size size = view_size.get();\n+            int newW = size.width;\n+            int newH = size.height;\n@@ -832,1 +857,1 @@\n-            if (geometry.width.type == BOUNDSTYPE_WINDOW) {\n+            if (width_type == BOUNDSTYPE_WINDOW) {\n@@ -835,2 +860,2 @@\n-                    + ((geometry.frame_extents_received) ? geometry.extents.width : 0)\n-                    - rect.width;\n+                    + ((frame_extents_received) ? extents.width : 0)\n+                    - new_extents.width;\n@@ -839,1 +864,1 @@\n-            if (geometry.height.type == BOUNDSTYPE_WINDOW) {\n+            if (height_type == BOUNDSTYPE_WINDOW) {\n@@ -842,2 +867,2 @@\n-                    + ((geometry.frame_extents_received) ? geometry.extents.height : 0)\n-                    - rect.height;\n+                    + ((frame_extents_received) ? extents.height : 0)\n+                    - new_extents.height;\n@@ -850,2 +875,4 @@\n-            int x = geometry.x;\n-            int y = geometry.y;\n+\n+            Point loc = window_location.get();\n+            int x = loc.x;\n+            int y = loc.y;\n@@ -855,2 +882,2 @@\n-            if (geometry.gravity_x > 0 && x > 0) {\n-                x -= geometry.gravity_x * (float) (geometry.extents.width);\n+            if (gravity_x > 0 && x > 0) {\n+                x -= gravity_x * (float) (new_extents.width);\n@@ -860,2 +887,2 @@\n-            if (geometry.gravity_y > 0 && y > 0) {\n-                y -= geometry.gravity_y  * (float) (geometry.extents.height);\n+            if (gravity_y > 0 && y > 0) {\n+                y -= gravity_y  * (float) (new_extents.height);\n@@ -865,12 +892,4 @@\n-            geometry.extents = rect;\n-            geometry.frame_extents_received = true;\n-            geometry.width.view = newW;\n-            geometry.height.view = newH;\n-            geometry.x = x;\n-            geometry.y = y;\n-            update_window_size();\n-\n-            LOG(\"Geometry after frame extents: x,y: %d,%d \/ cw,ch: %d,%d \/ ww,wh: %d,%d\\n\", geometry.x, geometry.y,\n-                    geometry.width.view, geometry.height.view, geometry.width.window, geometry.height.window);\n-\n-            update_window_constraints();\n+            window_extents.set(new_extents);\n+            frame_extents_received = true;\n+            view_size.set({newW, newH});\n+            window_location.set({x, y});\n@@ -908,1 +927,1 @@\n-void WindowContext::set_cached_extents(GdkRectangle ex) {\n+void WindowContext::set_cached_extents(Rectangle ex) {\n@@ -920,4 +939,2 @@\n-        geometry.extents = normal_extents.value();\n-        LOG(\"Loaded Normal Extents: x = %d, y = %d, width = %d, height = %d\\n\",\n-                    geometry.extents.x, geometry.extents.y, geometry.extents.width, geometry.extents.height);\n-        geometry.frame_extents_received = true;\n+        window_extents.set(normal_extents.value());\n+        frame_extents_received = true;\n@@ -928,4 +945,2 @@\n-        geometry.extents = utility_extents.value();\n-        LOG(\"Loaded Utility Extents: x = %d, y = %d, width = %d, height = %d\\n\",\n-                    geometry.extents.x, geometry.extents.y, geometry.extents.width, geometry.extents.height);\n-        geometry.frame_extents_received = true;\n+        window_extents.set(utility_extents.value());\n+        frame_extents_received = true;\n@@ -996,2 +1011,0 @@\n-    \/\/notify_view_resize();\n-\n@@ -1007,1 +1020,1 @@\n-    if (restored && geometry.needs_to_update_frame_extents) {\n+    if (restored && needs_to_update_frame_extents) {\n@@ -1009,1 +1022,1 @@\n-        geometry.needs_to_update_frame_extents = false;\n+        needs_to_update_frame_extents = false;\n@@ -1028,4 +1041,3 @@\n-        LOG(\"jWindowNotifyResize: %d -> %d, %d\\n\", state,\n-                    geometry.width.window, geometry.height.window);\n-        mainEnv->CallVoidMethod(jwindow, jWindowNotifyResize, state,\n-                    geometry.width.window, geometry.height.window);\n+        Size size = window_size.get();\n+        LOG(\"jWindowNotifyResize: %d -> %d, %d\\n\", state, size.width, size.height);\n+        mainEnv->CallVoidMethod(jwindow, jWindowNotifyResize, state, size.width, size.height);\n@@ -1038,2 +1050,3 @@\n-        LOG(\"jWindowNotifyMove: %d, %d\\n\", geometry.x, geometry.y);\n-        mainEnv->CallVoidMethod(jwindow, jWindowNotifyMove, geometry.x, geometry.y);\n+        Point point = window_location.get();\n+        LOG(\"jWindowNotifyMove: %d, %d\\n\", point.x, point.y);\n+        mainEnv->CallVoidMethod(jwindow, jWindowNotifyMove, point.x, point.y);\n@@ -1046,2 +1059,3 @@\n-        LOG(\"jViewNotifyResize: %d, %d\\n\", geometry.width.view, geometry.height.view);\n-        mainEnv->CallVoidMethod(jview, jViewNotifyResize, geometry.width.view, geometry.height.view);\n+        Size size = view_size.get();\n+        LOG(\"jViewNotifyResize: %d, %d\\n\", size.width, size.height);\n+        mainEnv->CallVoidMethod(jview, jViewNotifyResize, size.width, size.height);\n@@ -1074,0 +1088,1 @@\n+        \/\/ This is used to let the compositor detect the resize\n@@ -1078,1 +1093,1 @@\n-    bool view_moved = false;\n+    int view_x = 0, view_y = 0;\n@@ -1087,2 +1102,2 @@\n-        int view_x = event->x - root_x;\n-        int view_y = event->y - root_y;\n+        view_x = event->x - root_x;\n+        view_y = event->y - root_y;\n@@ -1093,3 +1108,1 @@\n-        view_moved = view_x != geometry.view_x || view_y != geometry.view_y;\n-        geometry.view_x = view_x;\n-        geometry.view_y = view_y;\n+        view_position.set({view_x, view_y});\n@@ -1101,2 +1114,0 @@\n-    bool moved = (x != geometry.x) || (y != geometry.y);\n-\n@@ -1106,0 +1117,2 @@\n+    Rectangle extents = window_extents.get();\n+\n@@ -1107,2 +1120,2 @@\n-    if (geometry.view_x > 0) {\n-        ww += geometry.extents.width;\n+    if (view_x > 0) {\n+        ww += extents.width;\n@@ -1111,2 +1124,2 @@\n-    if (geometry.view_y > 0) {\n-        wh += geometry.extents.height;\n+    if (view_y > 0) {\n+        wh += extents.height;\n@@ -1115,1 +1128,0 @@\n-\n@@ -1117,13 +1129,3 @@\n-        geometry.x = x;\n-        geometry.y = y;\n-        geometry.width.view = event->width;\n-        geometry.height.view = event->height;\n-        geometry.width.window = ww;\n-        geometry.height.window = wh;\n-\n-        notify_window_move();\n-        notify_current_sizes();\n-\n-        if (view_moved) {\n-            notify_view_move();\n-        }\n+        window_location.set({x, y});\n+        view_size.set({event->width, event->height});\n+        window_size.set({ww, wh});\n@@ -1159,2 +1161,4 @@\n-        hints.min_width = (w == -1) ? 1 : nonnegative_or(w - geometry.extents.width, 1);\n-        hints.min_height = (h == -1) ? 1 : nonnegative_or(h - geometry.extents.height, 1);\n+        Rectangle extents = window_extents.get();\n+\n+        hints.min_width = (w == -1) ? 1 : nonnegative_or(w - extents.width, 1);\n+        hints.min_height = (h == -1) ? 1 : nonnegative_or(h - extents.height, 1);\n@@ -1164,1 +1168,1 @@\n-                    : nonnegative_or(resizable.maxw - geometry.extents.width, 1);\n+                    : nonnegative_or(resizable.maxw - extents.width, 1);\n@@ -1167,1 +1171,1 @@\n-                    : nonnegative_or(resizable.maxh - geometry.extents.height, 1);\n+                    : nonnegative_or(resizable.maxh - extents.height, 1);\n@@ -1169,4 +1173,5 @@\n-        hints.min_width = geometry.width.view;\n-        hints.min_height = geometry.height.view;\n-        hints.max_width = geometry.width.view;\n-        hints.max_height = geometry.height.view;\n+        Size size = view_size.get();\n+        hints.min_width = size.width;\n+        hints.min_height = size.height;\n+        hints.max_width = size.width;\n+        hints.max_height = size.height;\n@@ -1238,2 +1243,2 @@\n-    geometry.gravity_x = gravity_x;\n-    geometry.gravity_y = gravity_y;\n+    this->gravity_x = gravity_x;\n+    this->gravity_y = gravity_y;\n@@ -1242,2 +1247,2 @@\n-        geometry.width.type = BOUNDSTYPE_WINDOW;\n-        newW = nonnegative_or(w - geometry.extents.width, 1);\n+        width_type = BOUNDSTYPE_WINDOW;\n+        newW = nonnegative_or(w - window_extents.get().width, 1);\n@@ -1246,1 +1251,3 @@\n-        if (BOUNDSTYPE_UNKNOWN) geometry.width.type = BOUNDSTYPE_VIEW;\n+        if (width_type == BOUNDSTYPE_UNKNOWN) {\n+            width_type = BOUNDSTYPE_VIEW;\n+        }\n@@ -1251,2 +1258,2 @@\n-        geometry.height.type = BOUNDSTYPE_WINDOW;\n-        newH = nonnegative_or(h - geometry.extents.height, 1);\n+        height_type = BOUNDSTYPE_WINDOW;\n+        newH = nonnegative_or(h - window_extents.get().height, 1);\n@@ -1255,1 +1262,3 @@\n-        if (BOUNDSTYPE_UNKNOWN) geometry.height.type = BOUNDSTYPE_VIEW;\n+        if (width_type == BOUNDSTYPE_UNKNOWN) {\n+            height_type = BOUNDSTYPE_VIEW;\n+        }\n@@ -1383,1 +1392,1 @@\n-    if (icon == nullptr || !GDK_IS_PIXBUF (icon)) return;\n+    if (icon == nullptr || !GDK_IS_PIXBUF(icon)) return;\n@@ -1410,4 +1419,0 @@\n-WindowGeometry WindowContext::get_geometry() {\n-    return geometry;\n-}\n-\n@@ -1445,2 +1450,1 @@\n-    geometry.width.window = geometry.width.view;\n-    geometry.height.window = geometry.height.view;\n+    Size size = view_size.get();\n@@ -1449,2 +1453,3 @@\n-        geometry.width.window += geometry.extents.width;\n-        geometry.height.window += geometry.extents.height;\n+        window_size.set({size.width + window_extents.get().width, size.height + window_extents.get().height});\n+    } else {\n+        window_size.set(size);\n@@ -1456,2 +1461,6 @@\n-    int newW = (width > 0) ? width : geometry.width.view;\n-    int newH = (height > 0) ? height : geometry.height.view;\n+    Size size = view_size.get();\n+    int newW = (width > 0) ? width : size.width;\n+    int newH = (height > 0) ? height : size.height;\n+\n+    Rectangle extents = window_extents.get();\n+    int boundsW = newW, boundsH = newH;\n@@ -1462,1 +1471,1 @@\n-        newW = nonnegative_or(resizable.minw - geometry.extents.width, 1);\n+        boundsW = nonnegative_or(resizable.minw - extents.width, 1);\n@@ -1466,1 +1475,1 @@\n-        newW = nonnegative_or(resizable.maxw - geometry.extents.width, 1);\n+        boundsW = nonnegative_or(resizable.maxw - extents.width, 1);\n@@ -1470,1 +1479,1 @@\n-        newH = nonnegative_or(resizable.minh - geometry.extents.height, 1);\n+        boundsH = nonnegative_or(resizable.minh - extents.height, 1);\n@@ -1474,1 +1483,1 @@\n-        newH = nonnegative_or(resizable.maxh - geometry.extents.height, 1);\n+        boundsH = nonnegative_or(resizable.maxh - extents.height, 1);\n@@ -1477,2 +1486,1 @@\n-    geometry.width.view = newW;\n-    geometry.height.view = newH;\n+    Size current_size = view_size.get();\n@@ -1480,4 +1488,6 @@\n-    update_window_size();\n-\n-    if (!resizable.value) {\n-        update_window_constraints();\n+    \/\/ Need to force notify back to java, because it probably\n+    \/\/ has wrong sizes\n+    if ((newW != boundsW && current_size.width == boundsW)\n+            || newH != boundsH && current_size.height == boundsH) {\n+        view_size.invalidate();\n+        window_size.invalidate();\n@@ -1486,7 +1496,3 @@\n-    if (xSet) geometry.x = x;\n-    if (ySet) geometry.y = y;\n-\n-    LOG(\"gdk_window_move_resize: x,y: %d,%d \/ cw,ch: %d,%d \/ ww,wh: %d,%d\\n\",\n-        geometry.x, geometry.y, newW, newH, geometry.width.window, geometry.height.window);\n-\n-    gdk_window_move_resize(gdk_window, geometry.x, geometry.y, newW, newH);\n+    Point loc = window_location.get();\n+    int newX = (xSet) ? x : loc.x;\n+    int newY = (ySet) ? y : loc.y;\n@@ -1495,2 +1501,3 @@\n-        notify_window_move();\n-        notify_current_sizes();\n+        view_size.set({boundsW, boundsH});\n+        update_window_size();\n+        window_location.set({newX, newY});\n@@ -1498,0 +1505,4 @@\n+\n+    LOG(\"gdk_window_move_resize: x,y: %d,%d \/ cw,ch: %d,%d\\n\", newX, newY, boundsW, boundsH);\n+\n+    gdk_window_move_resize(gdk_window, newX, newY, boundsW, boundsH);\n@@ -1550,1 +1561,4 @@\n-    notify_view_resize();\n+    \/\/ Notify the view size only if size is oriented by WINDOW, otherwise it knows its own size\n+    if (width_type == BOUNDSTYPE_WINDOW || height_type == BOUNDSTYPE_WINDOW) {\n+        notify_view_resize();\n+    }\n@@ -1579,0 +1593,8 @@\n+Size WindowContext::get_view_size() {\n+    return view_size.get();\n+}\n+\n+Point WindowContext::get_view_position() {\n+    return view_position.get();\n+}\n+\n@@ -1585,1 +1607,0 @@\n-\n@@ -1590,1 +1611,1 @@\n-                           : WindowContext(jwin, owner, screen, EXTENDED, NORMAL, wmf) {\n+                        : WindowContext(jwin, owner, screen, EXTENDED, NORMAL, wmf) {\n@@ -1718,5 +1739,1 @@\n-    gint width, height;\n-\n-    WindowGeometry geometry = get_geometry();\n-    width = geometry.width.view;\n-    height = geometry.height.view;\n+    Size size = get_view_size();\n@@ -1726,1 +1743,1 @@\n-        else if (y >= height - 2 * RESIZE_BORDER_WIDTH) edge = GDK_WINDOW_EDGE_SOUTH_WEST;\n+        else if (y >= size.height - 2 * RESIZE_BORDER_WIDTH) edge = GDK_WINDOW_EDGE_SOUTH_WEST;\n@@ -1728,1 +1745,1 @@\n-    } else if (x >= width - RESIZE_BORDER_WIDTH) {\n+    } else if (x >= size.width - RESIZE_BORDER_WIDTH) {\n@@ -1730,1 +1747,1 @@\n-        else if (y >= height - 2 * RESIZE_BORDER_WIDTH) edge = GDK_WINDOW_EDGE_SOUTH_EAST;\n+        else if (y >= size.height - 2 * RESIZE_BORDER_WIDTH) edge = GDK_WINDOW_EDGE_SOUTH_EAST;\n@@ -1734,1 +1751,1 @@\n-    } else if (y >= height - RESIZE_BORDER_WIDTH) {\n+    } else if (y >= size.height - RESIZE_BORDER_WIDTH) {\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.cpp","additions":161,"deletions":144,"binary":false,"changes":305,"status":"modified"},{"patch":"@@ -46,0 +46,82 @@\n+#include <iostream>\n+#include <functional>\n+\n+template<typename T>\n+class Observable {\n+private:\n+    T value;\n+    std::function<void(const T&)> onChange;\n+\n+public:\n+    Observable(const T& initialValue = T()) : value(initialValue) {}\n+\n+    void set(const T& newValue) {\n+        if (value != newValue) {\n+            value = newValue;\n+            invalidate();\n+        }\n+    }\n+\n+    void invalidate() {\n+        if (onChange) {\n+            onChange(value);\n+        }\n+    }\n+\n+    const T& get() const {\n+        return value;\n+    }\n+\n+    operator T() const {\n+        return value;\n+    }\n+\n+    Observable<T>& operator=(const T& newValue) {\n+        set(newValue);\n+        return *this;\n+    }\n+\n+    void setOnChange(std::function<void(const T&)> callback) {\n+        onChange = callback;\n+    }\n+};\n+\n+struct Rectangle {\n+    int x, y, width, height;\n+\n+    bool operator!=(const Rectangle& other) const {\n+        return x != other.x || y != other.y\n+               || width != other.width || height != other.height;\n+    }\n+\n+    bool operator==(const Rectangle& other) const {\n+        return x == other.x && y == other.y\n+               && width == other.width && height == other.height;\n+    }\n+};\n+\n+struct Size {\n+    int width, height;\n+\n+    bool operator!=(const Size& other) const {\n+        return width != other.width || height != other.height;\n+    }\n+\n+    bool operator==(const Size& other) const {\n+        return width == other.width && height == other.height;\n+    }\n+};\n+\n+struct Point {\n+    int x, y;\n+\n+    bool operator!=(const Point& other) const {\n+        return x != other.x || y != other.y;\n+    }\n+\n+    bool operator==(const Point& other) const {\n+        return x == other.x && y == other.y;\n+    }\n+};\n+\n+\n@@ -67,36 +149,0 @@\n-struct WindowGeometry {\n-    WindowGeometry():\n-    width{-1, -1, BOUNDSTYPE_UNKNOWN},\n-    height{-1, -1, BOUNDSTYPE_UNKNOWN},\n-    x(-1), y(-1), view_x(0), view_y(0),\n-    gravity_x(), gravity_y(),\n-    extents{0, 0, 0, 0},\n-    frame_extents_received(false),\n-    needs_to_update_frame_extents(false) {}\n-\n-    struct {\n-        int window;\n-        int view;\n-        BoundsType type;\n-    } width;\n-\n-    struct {\n-        int window;\n-        int view;\n-        BoundsType type;\n-    } height;\n-\n-    int x;\n-    int y;\n-\n-    int view_x;\n-    int view_y;\n-\n-    float gravity_x;\n-    float gravity_y;\n-\n-    GdkRectangle extents;\n-\n-    bool frame_extents_received;\n-    bool needs_to_update_frame_extents;\n-};\n@@ -109,2 +155,2 @@\n-    static std::optional<GdkRectangle> normal_extents;\n-    static std::optional<GdkRectangle> utility_extents;\n+    static std::optional<Rectangle> normal_extents;\n+    static std::optional<Rectangle> utility_extents;\n@@ -140,1 +186,0 @@\n-    WindowGeometry geometry;\n@@ -149,0 +194,1 @@\n+\n@@ -157,0 +203,12 @@\n+    Observable<Point> view_position = Point{-1, -1};\n+    Observable<Size> view_size = Size{-1, -1};\n+    Observable<Size> window_size= Size{-1, -1};\n+    Observable<Point> window_location = Point{-1, -1};\n+    Observable<Rectangle> window_extents = Rectangle{0, 0, 0, 0};\n+    bool frame_extents_received{false};\n+    bool needs_to_update_frame_extents{false};\n+    float gravity_x{0};\n+    float gravity_y{0};\n+    BoundsType width_type{BOUNDSTYPE_UNKNOWN};\n+    BoundsType height_type{BOUNDSTYPE_UNKNOWN};\n+\n@@ -175,0 +233,1 @@\n+\n@@ -184,1 +243,3 @@\n-    GETTER(WindowGeometry, geometry);\n+\n+    Size get_view_size();\n+    Point get_view_position();\n@@ -236,2 +297,0 @@\n-    WindowGeometry get_geometry();\n-\n@@ -281,1 +340,1 @@\n-    void set_cached_extents(GdkRectangle);\n+    void set_cached_extents(Rectangle);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.h","additions":102,"deletions":43,"binary":false,"changes":145,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-class StageOwnershipAndFocusTest extends VisualTestBase {\n+class StageOwnershipTest extends VisualTestBase {\n@@ -271,2 +271,2 @@\n-            stage1 = createStage(style, COLOR1, stage0, null, 150, 150);\n-            stage2 = createStage(style, COLOR2, stage1, null, 200, 200);\n+            stage1 = createStage(style, COLOR1, stage0, null, 200, 150);\n+            stage2 = createStage(style, COLOR2, stage1, null, 300, 200);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageOwnershipTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageOwnershipAndFocusTest.java","status":"renamed"}]}