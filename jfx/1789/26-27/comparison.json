{"files":[{"patch":"@@ -29,0 +29,1 @@\n+#include <X11\/Xlib.h>\n@@ -666,6 +667,0 @@\n-void glass_print_window_transparency_not_supported() {\n-    fprintf(stderr, \"Can't create transparent stage, because your screen doesn't support alpha channel.\"\n-           \" You need to enable XComposite extension.\\n\");\n-    fflush(stderr);\n-}\n-\n@@ -679,1 +674,2 @@\n-        glass_print_window_transparency_not_supported();\n+        fprintf(stderr, ALPHA_CHANNEL_ERROR_MSG);\n+        fflush(stderr);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_general.cpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include <X11\/Xlib.h>\n@@ -33,1 +32,0 @@\n-#include <gdk\/gdkx.h>\n@@ -35,1 +33,0 @@\n-\n@@ -55,0 +52,4 @@\n+#define ALPHA_CHANNEL_ERROR_MSG \\\n+    \"Can't create transparent stage, because your screen doesn't support alpha channel. \" \\\n+    \"You need to enable XComposite extension.\\n\"\n+\n@@ -279,6 +280,6 @@\n-    gchar* get_application_name();\n-    void glass_throw_exception(JNIEnv * env,\n-            const char * exceptionClass,\n-            const char * exceptionMessage);\n-    int glass_throw_oom(JNIEnv * env, const char * exceptionMessage);\n-    void dump_jstring_array(JNIEnv*, jobjectArray);\n+gchar* get_application_name();\n+void glass_throw_exception(JNIEnv * env,\n+        const char * exceptionClass,\n+        const char * exceptionMessage);\n+int glass_throw_oom(JNIEnv * env, const char * exceptionMessage);\n+void dump_jstring_array(JNIEnv*, jobjectArray);\n@@ -286,1 +287,1 @@\n-    guint8* convert_BGRA_to_RGBA(const int* pixels, int stride, int height);\n+guint8* convert_BGRA_to_RGBA(const int* pixels, int stride, int height);\n@@ -288,1 +289,1 @@\n-    gboolean check_and_clear_exception(JNIEnv *env);\n+gboolean check_and_clear_exception(JNIEnv *env);\n@@ -290,1 +291,1 @@\n-    jboolean is_display_valid();\n+jboolean is_display_valid();\n@@ -292,1 +293,1 @@\n-    gsize get_files_count(gchar **uris);\n+gsize get_files_count(gchar **uris);\n@@ -294,1 +295,1 @@\n-    jobject uris_to_java(JNIEnv *env, gchar **uris, gboolean files);\n+jobject uris_to_java(JNIEnv *env, gchar **uris, gboolean files);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_general.h","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include <X11\/Xlib.h>\n@@ -33,0 +34,1 @@\n+#include <gdk\/gdkx.h>\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_key.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include <gdk\/gdkx.h>\n@@ -203,1 +204,2 @@\n-            glass_print_window_transparency_not_supported();\n+            fprintf(stderr, ALPHA_CHANNEL_ERROR_MSG);\n+            fflush(stderr);\n@@ -815,1 +817,0 @@\n-\n@@ -1107,4 +1108,0 @@\n-    update_window_constraints(false);\n-}\n-\n-void WindowContext::update_window_constraints(bool ignored_resizable) {\n@@ -1120,1 +1117,1 @@\n-    if ((resizable.value || ignored_resizable) && !is_disabled) {\n+    if (resizable.value && !is_disabled) {\n@@ -1229,1 +1226,0 @@\n-        update_window_constraints(true);\n@@ -1262,1 +1258,0 @@\n-        update_window_constraints(true);\n@@ -1390,1 +1385,0 @@\n-\/\/ Values are view size\n@@ -1431,1 +1425,0 @@\n-    \/\/ Or else let to process_configure\n@@ -1498,1 +1491,0 @@\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.cpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include <X11\/Xlib.h>\n@@ -232,1 +233,0 @@\n-\n@@ -235,1 +235,0 @@\n-\n@@ -261,1 +260,0 @@\n-    void update_window_constraints(bool);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.h","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,51 +76,0 @@\n-    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n-    void testMaximizeUnresizable(StageStyle stageStyle) {\n-        setupStageWithStyle(stageStyle, s -> {\n-            s.setWidth(WIDTH);\n-            s.setHeight(HEIGHT);\n-            s.setResizable(false);\n-        });\n-        Util.runAndWait(() -> getStage().setMaximized(true));\n-        Util.sleep(MEDIUM_WAIT);\n-\n-        assertTrue(getStage().isMaximized(), \"Unresizable stage should be maximized\");\n-        assertTrue(getStage().getWidth() > WIDTH, \"Stage width should be maximized\");\n-        assertTrue(getStage().getHeight() > HEIGHT, \"Stage height should be maximized\");\n-    }\n-\n-    @ParameterizedTest(name = PARAMETERIZED_TEST_DISPLAY)\n-    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n-    void testFullScreenUnresizable(StageStyle stageStyle) {\n-        setupStageWithStyle(stageStyle, s -> {\n-            s.setWidth(WIDTH);\n-            s.setHeight(HEIGHT);\n-            s.setResizable(false);\n-        });\n-\n-        Util.runAndWait(() -> getStage().setFullScreen(true));\n-        Util.sleep(LONG_WAIT);\n-        assertTrue(getStage().isFullScreen(), \"Unresizable stage should be fullscreen\");\n-        assertTrue(getStage().getWidth() > WIDTH, \"Stage width should be fullscreen\");\n-        assertTrue(getStage().getHeight() > HEIGHT, \"Stage height should be fullscreen\");\n-    }\n-\n-    @ParameterizedTest(name = PARAMETERIZED_TEST_DISPLAY)\n-    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n-    void testResizeUnresizable(StageStyle stageStyle) {\n-        setupStageWithStyle(stageStyle, s -> {\n-            s.setWidth(WIDTH);\n-            s.setHeight(HEIGHT);\n-            s.setResizable(false);\n-        });\n-\n-        Util.runAndWait(() -> {\n-            getStage().setWidth(NEW_WIDTH);\n-            getStage().setHeight(NEW_HEIGHT);\n-        });\n-        Util.sleep(MEDIUM_WAIT);\n-\n-        assertEquals(NEW_WIDTH, getStage().getWidth(), SIZING_DELTA, \"Stage should have resized\");\n-        assertEquals(NEW_HEIGHT, getStage().getHeight(), SIZING_DELTA, \"Stage should have resized\");\n-    }\n-\n-    @ParameterizedTest(name = PARAMETERIZED_TEST_DISPLAY)\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/SizingTest.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -57,2 +58,2 @@\n-    private static final int WIDTH = 200;\n-    private static final int HEIGHT = 200;\n+    private static final int WIDTH = 300;\n+    private static final int HEIGHT = 300;\n@@ -67,0 +68,1 @@\n+    private static final Color COLOR3 = Color.GREEN;\n@@ -223,0 +225,1 @@\n+    private Stage stage3;\n@@ -297,0 +300,33 @@\n+    \/\/ See JDK8220272\n+    @Test\n+    void testWindowShowOrder() {\n+        CountDownLatch shownLatch = new CountDownLatch(1);\n+        Util.runAndWait(() -> {\n+            stage0 = createStage(StageStyle.DECORATED, COLOR0, null, null, -1, -1);\n+            stage1 = createStage(StageStyle.DECORATED, COLOR1, stage0, null, -1, -1);\n+            stage2 = createStage(StageStyle.DECORATED, COLOR2, stage0, null, -1, -1);\n+            stage3 = createStage(StageStyle.DECORATED, COLOR3, stage2, Modality.WINDOW_MODAL, -1, -1);\n+\n+            stage0.setTitle(\"First Stage\");\n+            stage1.setTitle(\"Second Stage\");\n+            stage2.setTitle(\"Third Stage\");\n+            stage3.setTitle(\"Last Stage\");\n+\n+            stage0.setOnShown(e -> Platform.runLater(shownLatch::countDown));\n+            stage0.show();\n+        });\n+\n+        Util.sleep(WAIT_TIME);\n+        Util.await(shownLatch);\n+\n+        Util.doTimeLine(WAIT_TIME,\n+                () -> {\n+                    stage1.show();\n+                    stage2.show();\n+                    stage3.show();\n+                },\n+                () -> {\n+                    assertTrue(stage3.isFocused());\n+                    assertColorEquals(COLOR3, stage3);\n+                });\n+    }\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageOwnershipTest.java","additions":38,"deletions":2,"binary":false,"changes":40,"status":"modified"}]}