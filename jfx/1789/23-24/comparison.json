{"files":[{"patch":"@@ -39,1 +39,0 @@\n-import org.junit.jupiter.api.Test;\n@@ -41,0 +40,1 @@\n+import org.junit.jupiter.params.provider.Arguments;\n@@ -42,0 +42,1 @@\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -48,0 +49,1 @@\n+import java.util.stream.Stream;\n@@ -55,2 +57,2 @@\n-    private static final int WIDTH = 300;\n-    private static final int HEIGHT = 300;\n+    private static final int WIDTH = 200;\n+    private static final int HEIGHT = 200;\n@@ -65,3 +67,2 @@\n-    private static final Color COLOR3 = Color.GREEN;\n-    private static final Color COLOR4 = Color.BLUE;\n-    private static final Color COLOR5 = Color.INDIGO;\n+    private static final int X_DELTA = 15; \/\/ shadows\n+    private static final int Y_DELTA = 75; \/\/ shadows + decoration\n@@ -92,1 +93,1 @@\n-    private void setupTopStage(Stage owner, Modality modality) {\n+    private void setupTopStage(Stage owner, StageStyle stageStyle, Modality modality) {\n@@ -95,1 +96,3 @@\n-            topStage.initStyle(StageStyle.DECORATED);\n+            if (stageStyle != null) {\n+                topStage.initStyle(stageStyle);\n+            }\n@@ -121,75 +124,0 @@\n-    @Test\n-    void testOpeningModalChildStageWhileMaximized() throws InterruptedException {\n-        setupBottomStage();\n-        setupTopStage(bottomStage, Modality.WINDOW_MODAL);\n-\n-        Util.doTimeLine(WAIT_TIME,\n-                () -> bottomStage.setMaximized(true),\n-                topStage::show,\n-                () -> {\n-                    assertTrue(bottomStage.isMaximized());\n-                    \/\/ Make sure state is still maximized\n-                    assertColorEqualsVisualBounds(BOTTOM_COLOR);\n-\n-                    Color color = getColor(100, 100);\n-                    assertColorEquals(TOP_COLOR, color, TOLERANCE);\n-                });\n-    }\n-\n-    @Test\n-    void testOpeningModalChildStageWhileFullSceen() throws InterruptedException {\n-        setupBottomStage();\n-        setupTopStage(bottomStage, Modality.WINDOW_MODAL);\n-\n-        Util.doTimeLine(WAIT_TIME,\n-                () -> bottomStage.setFullScreen(true),\n-                topStage::show,\n-                () -> {\n-                    assertTrue(bottomStage.isFullScreen());\n-\n-                    \/\/ Make sure state is still fullscreen\n-                    assertColorEqualsVisualBounds(BOTTOM_COLOR);\n-\n-                    Color color = getColor(100, 100);\n-                    assertColorEquals(TOP_COLOR, color, TOLERANCE);\n-                });\n-    }\n-\n-    @Test\n-    void testOpeningAppModalStageWhileMaximized() throws InterruptedException {\n-        setupBottomStage();\n-        setupTopStage(null, Modality.APPLICATION_MODAL);\n-\n-        Util.doTimeLine(WAIT_TIME,\n-                () -> bottomStage.setMaximized(true),\n-                topStage::show,\n-                () -> {\n-                    assertTrue(bottomStage.isMaximized());\n-\n-                    \/\/ Make sure state is still maximized\n-                    assertColorEqualsVisualBounds(BOTTOM_COLOR);\n-\n-                    Color color = getColor(100, 100);\n-                    assertColorEquals(TOP_COLOR, color, TOLERANCE);\n-                });\n-    }\n-\n-    @Test\n-    void testOpeningAppModalStageWhileFullScreen() throws InterruptedException {\n-        setupBottomStage();\n-        setupTopStage(null, Modality.APPLICATION_MODAL);\n-\n-        Util.doTimeLine(WAIT_TIME,\n-                () -> bottomStage.setFullScreen(true),\n-                topStage::show,\n-                () -> {\n-                    assertTrue(bottomStage.isFullScreen());\n-\n-                    \/\/ Make sure state is still maximized\n-                    assertColorEqualsVisualBounds(BOTTOM_COLOR);\n-\n-                    Color color = getColor(100, 100);\n-                    assertColorEquals(TOP_COLOR, color, TOLERANCE);\n-                });\n-    }\n-\n@@ -236,1 +164,1 @@\n-        Color color = getColor((int) stage.getX() + 15, (int) stage.getY() + 55);\n+        Color color = getColor((int) stage.getX() + X_DELTA, (int) stage.getY() + Y_DELTA);\n@@ -241,1 +169,1 @@\n-        Color color = getColor((int) stage.getX() + 15, (int) stage.getY() + 55);\n+        Color color = getColor((int) stage.getX() + X_DELTA, (int) stage.getY() + Y_DELTA);\n@@ -245,6 +173,5 @@\n-    private Stage stage0;\n-    private Stage stage1;\n-    private Stage stage2;\n-    private Stage stage3;\n-    private Stage stage4;\n-    private Stage stage5;\n+    private static Stream<Arguments> getTestsParams() {\n+        return Stream.of(StageStyle.DECORATED, StageStyle.UNDECORATED)\n+                .flatMap(stageStyle -> Stream.of(Modality.APPLICATION_MODAL, Modality.WINDOW_MODAL)\n+                        .map(modality -> Arguments.of(stageStyle, modality)));\n+    }\n@@ -253,8 +180,5 @@\n-    @EnumSource(names = {\"UNDECORATED\", \"DECORATED\"})\n-    void testLayeredModality(StageStyle style) {\n-        CountDownLatch shownLatch = new CountDownLatch(1);\n-        Util.runAndWait(() -> {\n-            stage0 = createStage(style, COLOR0, null, null, 100, 100);\n-            stage1 = createStage(style, COLOR1, stage0, Modality.WINDOW_MODAL, 150, 150);\n-            stage2 = createStage(style, COLOR2, stage1, Modality.WINDOW_MODAL, 200, 200);\n-            stage3 = createStage(style, COLOR3, stage2, Modality.WINDOW_MODAL, 250, 250);\n+    @MethodSource(\"getTestsParams\")\n+    void testOpeningModalChildStageWhileMaximizedShouldHaveFocus(StageStyle stageStyle, Modality modality)\n+            throws InterruptedException {\n+        setupBottomStage();\n+        setupTopStage(bottomStage, stageStyle, modality);\n@@ -262,3 +186,7 @@\n-            stage0.setOnShown(e -> Platform.runLater(shownLatch::countDown));\n-            stage0.show();\n-        });\n+        Util.doTimeLine(WAIT_TIME,\n+                () -> bottomStage.setMaximized(true),\n+                topStage::show,\n+                () -> {\n+                    assertTrue(bottomStage.isMaximized());\n+                    \/\/ Make sure state is still maximized\n+                    assertColorEqualsVisualBounds(BOTTOM_COLOR);\n@@ -266,2 +194,11 @@\n-        Util.await(shownLatch);\n-        Util.sleep(WAIT_TIME);\n+                    Color color = getColor(100, 100);\n+                    assertColorEquals(TOP_COLOR, color, TOLERANCE);\n+                });\n+    }\n+\n+    @ParameterizedTest(name = PARAMETERIZED_TEST_DISPLAY)\n+    @MethodSource(\"getTestsParams\")\n+    void testOpeningModalChildStageWhileFullSceenShouldHaveFocus(StageStyle stageStyle, Modality modality)\n+            throws InterruptedException {\n+        setupBottomStage();\n+        setupTopStage(bottomStage, stageStyle, modality);\n@@ -270,22 +207,2 @@\n-                stage1::show,\n-                stage2::show,\n-                stage3::show,\n-                () -> {\n-                    assertColorEquals(COLOR0, stage0);\n-                    assertColorEquals(COLOR1, stage1);\n-                    assertColorEquals(COLOR2, stage2);\n-                    assertColorEquals(COLOR3, stage3);\n-                },\n-                () -> {\n-                    assertTrue(stage3.isFocused());\n-                    assertFalse(stage2.isFocused());\n-                    assertFalse(stage1.isFocused());\n-                    assertFalse(stage0.isFocused());\n-                },\n-                stage3::close,\n-                () -> {\n-                    assertTrue(stage2.isFocused());\n-                    assertFalse(stage1.isFocused());\n-                    assertFalse(stage0.isFocused());\n-                },\n-                stage2::close,\n+                () -> bottomStage.setFullScreen(true),\n+                topStage::show,\n@@ -293,5 +210,8 @@\n-                    assertTrue(stage1.isFocused());\n-                    assertFalse(stage0.isFocused());\n-                },\n-                stage1::close,\n-                () -> assertTrue(stage0.isFocused()));\n+                    assertTrue(bottomStage.isFullScreen());\n+\n+                    \/\/ Make sure state is still fullscreen\n+                    assertColorEqualsVisualBounds(BOTTOM_COLOR);\n+\n+                    Color color = getColor(100, 100);\n+                    assertColorEquals(TOP_COLOR, color, TOLERANCE);\n+                });\n@@ -300,0 +220,4 @@\n+    private Stage stage0;\n+    private Stage stage1;\n+    private Stage stage2;\n+\n@@ -301,2 +225,2 @@\n-    @EnumSource(names = {\"UNDECORATED\", \"DECORATED\"})\n-    void testMultiLayeredModality(StageStyle style) {\n+    @MethodSource(\"getTestsParams\")\n+    void testClosingModalWindowShouldFocusParent(StageStyle style, Modality modality) {\n@@ -304,1 +228,0 @@\n-\n@@ -306,7 +229,3 @@\n-            stage0 = createStage(style, COLOR0, null, Modality.NONE, 100, 100);\n-            stage1 = createStage(style, COLOR1, stage0, Modality.WINDOW_MODAL, 150, 150);\n-            stage2 = createStage(style, COLOR2, stage1, Modality.WINDOW_MODAL, 200, 200);\n-\n-            stage3 = createStage(style, COLOR3, null,  Modality.NONE, 600, 100);\n-            stage4 = createStage(style, COLOR4, stage3,  Modality.WINDOW_MODAL, 650, 150);\n-            stage5 = createStage(style, COLOR5, stage4,  Modality.WINDOW_MODAL, 700, 200);\n+            stage0 = createStage(style, COLOR0, null, null, 100, 100);\n+            stage1 = createStage(style, COLOR1, stage0, null, 150, 150);\n+            stage2 = createStage(style, COLOR2, stage1, modality, 200, 200);\n@@ -324,35 +243,0 @@\n-                stage3::show,\n-                stage4::show,\n-                stage5::show,\n-                () -> {\n-                    assertColorEquals(COLOR0, stage0);\n-                    assertColorEquals(COLOR1, stage1);\n-                    assertColorEquals(COLOR2, stage2);\n-                    assertColorEquals(COLOR3, stage3);\n-                    assertColorEquals(COLOR4, stage4);\n-                    assertColorEquals(COLOR5, stage5);\n-                },\n-                () -> {\n-                    assertTrue(stage5.isFocused());\n-                    assertFalse(stage4.isFocused());\n-                    assertFalse(stage3.isFocused());\n-                    assertFalse(stage2.isFocused());\n-                    assertFalse(stage1.isFocused());\n-                    assertFalse(stage0.isFocused());\n-                },\n-                stage5::close,\n-                () -> {\n-                    assertTrue(stage4.isFocused());\n-                    assertFalse(stage3.isFocused());\n-                    assertFalse(stage2.isFocused());\n-                    assertFalse(stage1.isFocused());\n-                    assertFalse(stage0.isFocused());\n-                },\n-                stage4::close,\n-                () -> {\n-                    assertTrue(stage3.isFocused());\n-                    assertFalse(stage2.isFocused());\n-                    assertFalse(stage1.isFocused());\n-                    assertFalse(stage0.isFocused());\n-                },\n-                stage3::close,\n@@ -361,0 +245,1 @@\n+                    assertColorEquals(COLOR2, stage2);\n@@ -367,0 +252,1 @@\n+                    assertColorEquals(COLOR1, stage1);\n@@ -370,31 +256,0 @@\n-                () -> assertTrue(stage0.isFocused()));\n-\n-    }\n-\n-    @ParameterizedTest(name = PARAMETERIZED_TEST_DISPLAY)\n-    @EnumSource(names = {\"UNDECORATED\", \"DECORATED\"})\n-    void testIconfyRestoreChildren(StageStyle style) {\n-        CountDownLatch shownLatch = new CountDownLatch(3);\n-        Util.runAndWait(() -> {\n-            stage0 = createStage(style, COLOR0, null, Modality.NONE, 100, 100);\n-            stage1 = createStage(style, COLOR1, stage0, Modality.NONE, 150, 150);\n-            stage2 = createStage(style, COLOR2, stage1, Modality.NONE, 200, 200);\n-\n-            List.of(stage0, stage1, stage2).forEach(stage -> {\n-                stage.setOnShown(e -> Platform.runLater(shownLatch::countDown));\n-                stage.show();\n-            });\n-        });\n-\n-        Util.await(shownLatch);\n-        Util.sleep(WAIT_TIME);\n-\n-        Util.doTimeLine(WAIT_TIME,\n-                () -> stage0.setIconified(true),\n-                () -> {\n-                    assertTrue(stage0.isIconified());\n-                    assertColorDoesNotEqual(COLOR0, stage0);\n-                    assertColorDoesNotEqual(COLOR1, stage1);\n-                    assertColorDoesNotEqual(COLOR2, stage2);\n-                },\n-                () -> stage0.setIconified(false),\n@@ -402,0 +257,1 @@\n+                    assertTrue(stage0.isFocused());\n@@ -403,2 +259,0 @@\n-                    assertColorEquals(COLOR1, stage1);\n-                    assertColorEquals(COLOR2, stage2);\n@@ -409,2 +263,2 @@\n-    @EnumSource(names = {\"UNDECORATED\", \"DECORATED\"})\n-    void testChildStageWithoutModality(StageStyle style) {\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\"})\n+    void testIconifyParentShouldHideChildren(StageStyle style) {\n@@ -412,1 +266,0 @@\n-\n@@ -414,3 +267,3 @@\n-            stage0 = createStage(style, COLOR0, null, Modality.NONE, 100, 100);\n-            stage1 = createStage(style, COLOR1, stage0, Modality.NONE, 150, 150);\n-            stage2 = createStage(style, COLOR2, stage1, Modality.NONE, 200, 200);\n+            stage0 = createStage(style, COLOR0, null, null, 100, 100);\n+            stage1 = createStage(style, COLOR1, stage0, null, 150, 150);\n+            stage2 = createStage(style, COLOR2, stage1, null, 200, 200);\n@@ -431,42 +284,0 @@\n-                    assertTrue(stage1.isIconified());\n-                    assertTrue(stage2.isIconified());\n-                    assertColorDoesNotEqual(COLOR0, stage0);\n-                    assertColorDoesNotEqual(COLOR1, stage1);\n-                    assertColorDoesNotEqual(COLOR2, stage2);\n-                },\n-                () -> stage2.setIconified(false),\n-                () -> {\n-                    assertColorEquals(COLOR0, stage0);\n-                    assertColorEquals(COLOR1, stage1);\n-                    assertColorEquals(COLOR2, stage2);\n-                });\n-    }\n-\n-    @ParameterizedTest(name = PARAMETERIZED_TEST_DISPLAY)\n-    @EnumSource(names = {\"UNDECORATED\", \"DECORATED\"})\n-    void testMultipleChildren(StageStyle style) {\n-        CountDownLatch shownLatch = new CountDownLatch(3);\n-\n-        Util.runAndWait(() -> {\n-            stage0 = createStage(style, COLOR0, null, Modality.NONE, -1, -1);\n-            stage1 = createStage(style, COLOR1, stage0, Modality.NONE, -1, -1);\n-            stage2 = createStage(style, COLOR2, stage0, Modality.NONE, -1, -1);\n-\n-            List.of(stage0, stage1, stage2).forEach(stage -> {\n-                stage.setOnShown(e -> Platform.runLater(shownLatch::countDown));\n-                stage.show();\n-            });\n-        });\n-\n-        Util.await(shownLatch);\n-        Util.sleep(WAIT_TIME);\n-\n-        Util.doTimeLine(WAIT_TIME,\n-                () -> {\n-                    stage2.setY(stage0.getY());\n-                    stage1.setX(stage0.getX() - 300);\n-                    stage1.setY(stage0.getY());\n-                    stage2.setX(stage0.getX() + 300);\n-                },\n-                () -> stage0.setIconified(true),\n-                () -> {\n@@ -479,0 +290,1 @@\n+                    assertFalse(stage0.isIconified());\n@@ -485,25 +297,0 @@\n-    @ParameterizedTest(name = PARAMETERIZED_TEST_DISPLAY)\n-    @EnumSource(names = {\"UNDECORATED\", \"DECORATED\"})\n-    void testClosingAppModalShouldFocusParent(StageStyle style) {\n-        CountDownLatch shownLatch = new CountDownLatch(3);\n-        Util.runAndWait(() -> {\n-            stage0 = createStage(style, COLOR0, null, Modality.NONE, 0, 0);\n-            stage1 = createStage(style, COLOR1, null, Modality.NONE, 0, 250);\n-            stage2 = createStage(style, COLOR2, stage0, Modality.APPLICATION_MODAL, 0, 50);\n-\n-            List.of(stage0, stage1, stage2).forEach(stage -> {\n-                stage.setOnShown(e -> Platform.runLater(shownLatch::countDown));\n-                stage.show();\n-            });\n-        });\n-\n-        Util.await(shownLatch);\n-        Util.sleep(WAIT_TIME);\n-\n-        Util.doTimeLine(WAIT_TIME,\n-                stage2::close,\n-                () -> {\n-                    assertTrue(stage0.isFocused());\n-                    assertFalse(stage1.isFocused());\n-                });\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageOwnershipTest.java","additions":69,"deletions":282,"binary":false,"changes":351,"status":"modified"}]}