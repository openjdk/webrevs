{"files":[{"patch":"@@ -52,3 +52,0 @@\n-constexpr int nonnegative_or(int val, int fallback) {\n-    return (val < 0) ? fallback : val;\n-}\n@@ -131,2 +128,0 @@\n-    load_cached_extents();\n-\n@@ -208,0 +203,18 @@\n+\n+    resizable.setOnChange([this](const bool& resizable) {\n+        update_window_constraints();\n+    });\n+\n+    minimum_size.setOnChange([this](const Size& size) {\n+        update_window_constraints();\n+    });\n+\n+    sys_min_size.setOnChange([this](const Size& size) {\n+        update_window_constraints();\n+    });\n+\n+    maximum_size.setOnChange([this](const Size& size) {\n+        update_window_constraints();\n+    });\n+\n+    load_cached_extents();\n@@ -687,2 +700,2 @@\n-        view_size.invalidate();\n-        view_position.invalidate();\n+        view_size.reset({-1, -1});\n+        view_position.reset({-1, -1});\n@@ -871,2 +884,2 @@\n-            newW = nonnegative_or(newW, 1);\n-            newH = nonnegative_or(newH, 1);\n+            newW = std::clamp(newW, 1, MAX_WINDOW_SIZE);\n+            newH = std::clamp(newH, 1, MAX_WINDOW_SIZE);\n@@ -884,1 +897,0 @@\n-                x = nonnegative_or(x, 0);\n@@ -889,1 +901,0 @@\n-                y = nonnegative_or(y, 0);\n@@ -1155,2 +1166,1 @@\n-        int w = std::max(resizable.sysminw, resizable.minw);\n-        int h = std::max(resizable.sysminh, resizable.minh);\n+        Size min = minimum_size.get().max(sys_min_size.get());\n@@ -1160,4 +1170,7 @@\n-        hints.min_width = nonnegative_or(w - extents.width, w);\n-        hints.min_height = nonnegative_or(h - extents.height, h);\n-        hints.max_width = nonnegative_or(resizable.maxw - extents.width, resizable.maxw);\n-        hints.max_height = nonnegative_or(resizable.maxh - extents.height, resizable.maxh);\n+        hints.min_width = std::clamp(min.width - extents.width, 1, MAX_WINDOW_SIZE);\n+        hints.min_height = std::clamp(min.height - extents.height, 1, MAX_WINDOW_SIZE);\n+\n+        Size max = maximum_size.get();\n+\n+        hints.max_width = std::clamp(max.width - extents.width, 1, MAX_WINDOW_SIZE);\n+        hints.max_height = std::clamp(max.height - extents.height, 1, MAX_WINDOW_SIZE);\n@@ -1166,4 +1179,7 @@\n-        hints.min_width = size.width;\n-        hints.min_height = size.height;\n-        hints.max_width = size.width;\n-        hints.max_height = size.height;\n+        int w = std::clamp(size.width, 1, MAX_WINDOW_SIZE);\n+        int h = std::clamp(size.height, 1, MAX_WINDOW_SIZE);\n+\n+        hints.min_width = w;\n+        hints.min_height = h;\n+        hints.max_width = w;\n+        hints.max_height = h;\n@@ -1182,2 +1198,1 @@\n-    resizable.value = res;\n-    update_window_constraints();\n+    resizable.set(res);\n@@ -1187,1 +1202,1 @@\n-    return resizable.value;\n+    return resizable.get();\n@@ -1240,1 +1255,1 @@\n-        newW = nonnegative_or(w - window_extents.get().width, 1);\n+        newW = std::clamp(w - window_extents.get().width, 1, MAX_WINDOW_SIZE);\n@@ -1251,1 +1266,1 @@\n-        newH = nonnegative_or(h - window_extents.get().height, 1);\n+        newH = std::clamp(h - window_extents.get().height, 1, MAX_WINDOW_SIZE);\n@@ -1358,3 +1373,1 @@\n-    resizable.minw = w;\n-    resizable.minh = h;\n-    update_window_constraints();\n+    minimum_size.set({w, h});\n@@ -1365,3 +1378,1 @@\n-    resizable.sysminw = w;\n-    resizable.sysminh = h;\n-    update_window_constraints();\n+    sys_min_size.set({w, h});\n@@ -1372,3 +1383,4 @@\n-    resizable.maxw = (w == -1) ? G_MAXINT : w;\n-    resizable.maxh = (h == -1) ? G_MAXINT : h;\n-    update_window_constraints();\n+    int maxw = (w == -1) ? G_MAXINT : w;\n+    int maxh = (h == -1) ? G_MAXINT : h;\n+\n+    maximum_size.set({maxw, maxh});\n@@ -1454,0 +1466,3 @@\n+    Size max_size = maximum_size.get();\n+    Size min_size = minimum_size.get().max(sys_min_size.get());\n+\n@@ -1456,2 +1471,2 @@\n-    if (resizable.minw > 0 && newW < resizable.minw) {\n-        boundsW = nonnegative_or(resizable.minw - extents.width, 1);\n+    if (min_size.width > 0 && newW < min_size.width) {\n+        boundsW = min_size.width - extents.width;\n@@ -1460,2 +1475,2 @@\n-    if (resizable.maxw > 0 && newW > resizable.maxw) {\n-        boundsW = nonnegative_or(resizable.maxw - extents.width, 1);\n+    if (max_size.width > 0 && newW > max_size.width) {\n+        boundsW = max_size.height - extents.width;\n@@ -1464,2 +1479,2 @@\n-    if (resizable.minh > 0 && newH < resizable.minh) {\n-        boundsH = nonnegative_or(resizable.minh - extents.height, 1);\n+    if (min_size.height > 0 && newH < min_size.height) {\n+        boundsH = min_size.height - extents.height;\n@@ -1468,2 +1483,2 @@\n-    if (resizable.maxh > 0 && newH > resizable.maxh) {\n-        boundsH = nonnegative_or(resizable.maxh - extents.height, 1);\n+    if (max_size.height > 0 && newH > max_size.height) {\n+        boundsH = max_size.height - extents.height;\n@@ -1472,0 +1487,3 @@\n+    boundsW = std::clamp(boundsW, 1, MAX_WINDOW_SIZE);\n+    boundsH = std::clamp(boundsH, 1, MAX_WINDOW_SIZE);\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.cpp","additions":61,"deletions":43,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -31,0 +31,3 @@\n+\/\/  Native Windows wider or taller than 32767 pixels are not supported\n+#define MAX_WINDOW_SIZE 32767\n+\n@@ -71,0 +74,5 @@\n+    \/\/ This resets the value without notifying\n+    void reset(const T& newValue) {\n+        value = newValue;\n+    }\n+\n@@ -113,0 +121,6 @@\n+\n+    Size max(const Size& other) const {\n+        int w = std::max(other.width, width);\n+        int h = std::max(other.height, height);\n+        return {w, h};\n+    }\n@@ -187,8 +201,0 @@\n-    struct _Resizable {\n-        _Resizable(): value(true),\n-                minw(1), minh(1), maxw(G_MAXINT), maxh(G_MAXINT), sysminw(-1), sysminh(-1) {}\n-        bool value; \/\/actual value of resizable for a window\n-        int minw, minh, maxw, maxh; \/\/minimum and maximum window width\/height;\n-        int sysminw, sysminh; \/\/ size of window button area of EXTENDED windows\n-    } resizable;\n-\n@@ -203,0 +209,4 @@\n+    Observable<Size> minimum_size = Size{1, 1};\n+    Observable<Size> maximum_size = Size{G_MAXINT, G_MAXINT};\n+    Observable<Size> sys_min_size = Size{1, 1};\n+    Observable<bool> resizable{true};\n@@ -205,1 +215,1 @@\n-    Observable<Size> window_size= Size{-1, -1};\n+    Observable<Size> window_size = Size{-1, -1};\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.h","additions":19,"deletions":9,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-    @EnumSource(value = StageStyle.class, mode = EnumSource.Mode.INCLUDE, names = {\"DECORATED\", \"UNDECORATED\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\"})\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageAttributesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}