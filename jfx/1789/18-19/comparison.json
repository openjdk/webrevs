{"files":[{"patch":"@@ -265,0 +265,2 @@\n+    gdk_window_set_startup_id(gdk_window, NULL);\n+\n@@ -271,4 +273,1 @@\n-    if (!event->in && WindowContext::sm_grab_window == this) {\n-        ungrab_focus();\n-    }\n-\n+    LOG(\"process_focus: %d\\n\", event->in);\n@@ -282,0 +281,6 @@\n+}\n+\n+void WindowContext::process_focus(bool focus_in) {\n+    if (focus_in && WindowContext::sm_grab_window == this) {\n+        ungrab_focus();\n+    }\n@@ -284,6 +289,1 @@\n-        if (!event->in || isEnabled()) {\n-            mainEnv->CallVoidMethod(jwindow, jWindowNotifyFocus,\n-                    event->in ? com_sun_glass_events_WindowEvent_FOCUS_GAINED\n-                              : com_sun_glass_events_WindowEvent_FOCUS_LOST);\n-            CHECK_JNI_EXCEPTION(mainEnv)\n-        } else {\n+        if (focus_in && !isEnabled()) {\n@@ -291,0 +291,1 @@\n+            LOG(\"jWindowNotifyFocusDisabled\");\n@@ -293,0 +294,8 @@\n+        } else {\n+            LOG(\"%s\\n\", (focus_in) ? \"com_sun_glass_events_WindowEvent_FOCUS_GAINED\"\n+                                  : \"com_sun_glass_events_WindowEvent_FOCUS_LOST\");\n+\n+            mainEnv->CallVoidMethod(jwindow, jWindowNotifyFocus,\n+                    focus_in ? com_sun_glass_events_WindowEvent_FOCUS_GAINED\n+                             : com_sun_glass_events_WindowEvent_FOCUS_LOST);\n+            CHECK_JNI_EXCEPTION(mainEnv)\n@@ -919,1 +928,2 @@\n-                                | GDK_WINDOW_STATE_ABOVE))) {\n+                                | GDK_WINDOW_STATE_ABOVE\n+                                | GDK_WINDOW_STATE_FOCUSED))) {\n@@ -924,0 +934,7 @@\n+\n+    if (event->changed_mask & GDK_WINDOW_STATE_FOCUSED) {\n+        process_focus(event->new_window_state & GDK_WINDOW_STATE_FOCUSED);\n+\n+        if (event->new_window_state == GDK_WINDOW_STATE_FOCUSED) return;\n+    }\n+\n@@ -1137,6 +1154,0 @@\n-\n-        \/\/ JDK-8220272 - fire event first because GDK_FOCUS_CHANGE is not always in order\n-        if (jwindow && isEnabled()) {\n-            mainEnv->CallVoidMethod(jwindow, jWindowNotifyFocus, com_sun_glass_events_WindowEvent_FOCUS_GAINED);\n-            CHECK_JNI_EXCEPTION(mainEnv);\n-        }\n@@ -1269,1 +1280,1 @@\n-    gdk_window_focus(gdk_window, gdk_x11_display_get_user_time(gdk_window_get_display(gdk_window)));\n+    gdk_window_focus(gdk_window, GDK_CURRENT_TIME);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.cpp","additions":29,"deletions":18,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -193,0 +193,1 @@\n+    void process_focus(bool);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -58,0 +58,2 @@\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.beans.property.StringProperty;\n@@ -61,0 +63,1 @@\n+import javafx.event.Event;\n@@ -89,0 +92,1 @@\n+import javafx.scene.layout.Region;\n@@ -311,4 +315,0 @@\n-        Tab editorTab = new Tab(\"Edit\");\n-        editorTab.setClosable(false);\n-        editorTab.setContent(editorTitledPane);\n-\n@@ -365,22 +365,0 @@\n-        Scene testScene;\n-        StackPane root;\n-        if (initStyle.getValue() == StageStyle.TRANSPARENT) {\n-            root = new StackPane();\n-            BackgroundFill fill = new BackgroundFill(\n-                    Color.HOTPINK.deriveColor(0, 1, 1, 0.5),\n-                    CornerRadii.EMPTY,\n-                    Insets.EMPTY\n-            );\n-            root.setBackground(new Background(fill));\n-\n-            testScene = new Scene(root, 300, 300);\n-            testScene.setFill(Color.TRANSPARENT);\n-        } else {\n-            root = new StackPane();\n-            root.setBackground(Background.EMPTY);\n-            testScene = new Scene(root, 300, 300, Color.HOTPINK);\n-        }\n-\n-        setupContextMenu(root);\n-\n-        newStage.setScene(testScene);\n@@ -396,0 +374,1 @@\n+                updateCommandButtonsState();\n@@ -401,0 +380,1 @@\n+        createDefaultScene();\n@@ -419,0 +399,42 @@\n+    private Label createLabel(String prefix, ReadOnlyProperty<?> property) {\n+        Label label = new Label();\n+        label.textProperty().bind(Bindings.concat(prefix, Bindings.convert(property)));\n+        return label;\n+    }\n+\n+    private void createDefaultScene() {\n+        Scene scene;\n+\n+        StringProperty lastEvent = new SimpleStringProperty();\n+\n+        Label ownerLabel = new Label(\"Owner: NONE\");\n+        if (currentStage.getOwner() instanceof Stage owner) {\n+            ownerLabel.setText(\"Owner: \" + owner.getTitle());\n+        }\n+\n+        VBox root = new VBox(createLabel(\"Focused: \", currentStage.focusedProperty()),\n+                            new Label(\"Modality: \" + currentStage.getModality()),\n+                            ownerLabel,\n+                            createLabel(\"Last Event: \", lastEvent));\n+        root.setBackground(Background.EMPTY);\n+\n+\n+        if (currentStage.getStyle() == StageStyle.TRANSPARENT) {\n+            BackgroundFill fill = new BackgroundFill(\n+                    Color.HOTPINK.deriveColor(0, 1, 1, 0.5),\n+                    CornerRadii.EMPTY,\n+                    Insets.EMPTY\n+            );\n+            root.setBackground(new Background(fill));\n+\n+            scene = new Scene(root, 300, 300);\n+            scene.setFill(Color.TRANSPARENT);\n+        } else {\n+            scene = new Scene(root, 300, 300, Color.HOTPINK);\n+        }\n+\n+        currentStage.addEventHandler(Event.ANY, e -> lastEvent.set(e.getEventType().getName()));\n+        setupContextMenu(root);\n+        currentStage.setScene(scene);\n+    }\n+\n@@ -476,0 +498,3 @@\n+\n+        MenuItem defaultSceneMenuItem = new MenuItem(\"Default Scene\");\n+        defaultSceneMenuItem.setOnAction(e -> createDefaultScene());\n@@ -488,2 +513,2 @@\n-        contextMenu.getItems().addAll(textFieldMenuItem, tooltipBoxMenuItem, alertMenuItem, alertWindowModalMenuItem,\n-                fileOpenMenuItem);\n+        contextMenu.getItems().addAll(defaultSceneMenuItem, textFieldMenuItem, tooltipBoxMenuItem,\n+                alertMenuItem, alertWindowModalMenuItem, fileOpenMenuItem);\n@@ -514,0 +539,1 @@\n+            stagePane.addBooleanProperty(\"Focused\", stage.focusedProperty(), null);\n@@ -619,5 +645,9 @@\n-            spinner.valueProperty().addListener((observable, oldValue, newValue) -> {\n-                if (!newValue.equals(oldValue) && !suppressListener.get()) {\n-                    setConsumer.accept(newValue);\n-                }\n-            });\n+            if (setConsumer != null) {\n+                spinner.valueProperty().addListener((observable, oldValue, newValue) -> {\n+                    if (!newValue.equals(oldValue) && !suppressListener.get()) {\n+                        setConsumer.accept(newValue);\n+                    }\n+                });\n+            } else {\n+                spinner.setDisable(true);\n+            }\n@@ -635,1 +665,6 @@\n-            textField.setOnAction(e -> setConsumer.accept(textField.getText()));\n+\n+            if (setConsumer != null) {\n+                textField.setOnAction(e -> setConsumer.accept(textField.getText()));\n+            } else {\n+                textField.setDisable(true);\n+            }\n@@ -646,1 +681,6 @@\n-            checkBox.setOnAction(e -> setConsumer.accept(checkBox.isSelected()));\n+\n+            if (setConsumer != null) {\n+                checkBox.setOnAction(e -> setConsumer.accept(checkBox.isSelected()));\n+            } else {\n+                checkBox.setDisable(true);\n+            }\n","filename":"tests\/manual\/stage\/TestStage.java","additions":75,"deletions":35,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import javafx.application.Platform;\n@@ -41,0 +42,2 @@\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -84,1 +87,11 @@\n-        Util.runAndWait(() -> stage = createStage(stageStyle));\n+        CountDownLatch shownLatch = new CountDownLatch(1);\n+        Util.runAndWait(() -> {\n+            stage = createStage(stageStyle);\n+            stage.setX(X);\n+            stage.setY(Y);\n+            stage.setOnShown(e -> Platform.runLater(shownLatch::countDown));\n+            stage.show();\n+        });\n+\n+        Util.await(shownLatch);\n+        Util.sleep(WAIT);\n@@ -87,5 +100,0 @@\n-                () -> {\n-                    stage.setX(X);\n-                    stage.setY(Y);\n-                },\n-                stage::show,\n@@ -103,1 +111,11 @@\n-        Util.runAndWait(() -> stage = createStage(stageStyle));\n+        CountDownLatch shownLatch = new CountDownLatch(1);\n+        Util.runAndWait(() -> {\n+            stage = createStage(stageStyle);\n+            stage.setX(X);\n+            stage.setY(Y);\n+            stage.setOnShown(e -> Platform.runLater(shownLatch::countDown));\n+            stage.show();\n+        });\n+\n+        Util.await(shownLatch);\n+        Util.sleep(WAIT);\n@@ -106,5 +124,0 @@\n-                () -> {\n-                    stage.setX(X);\n-                    stage.setY(Y);\n-                },\n-                stage::show,\n@@ -119,1 +132,12 @@\n-        Util.runAndWait(() -> stage = createStage(stageStyle));\n+        CountDownLatch shownLatch = new CountDownLatch(1);\n+        Util.runAndWait(() -> {\n+            stage = createStage(stageStyle);\n+            stage.setX(X);\n+            stage.setY(Y);\n+            stage.setOnShown(e -> Platform.runLater(shownLatch::countDown));\n+            stage.show();\n+        });\n+\n+\n+        Util.await(shownLatch);\n+        Util.sleep(WAIT);\n@@ -122,5 +146,0 @@\n-                () -> {\n-                    stage.setX(X);\n-                    stage.setY(Y);\n-                },\n-                stage::show,\n@@ -135,1 +154,11 @@\n-        Util.runAndWait(() -> stage = createStage(stageStyle));\n+        CountDownLatch shownLatch = new CountDownLatch(1);\n+        Util.runAndWait(() -> {\n+            stage = createStage(stageStyle);\n+            stage.setX(X);\n+            stage.setY(Y);\n+            stage.setOnShown(e -> Platform.runLater(shownLatch::countDown));\n+            stage.show();\n+        });\n+\n+        Util.await(shownLatch);\n+        Util.sleep(WAIT);\n@@ -138,1 +167,0 @@\n-                stage::show,\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageLocationTest.java","additions":48,"deletions":20,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import javafx.application.Platform;\n@@ -38,0 +39,2 @@\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -53,0 +56,2 @@\n+        setupContentSizeTestStage(stageStyle, initialContentSize, initialContentSize);\n+\n@@ -54,1 +59,0 @@\n-                () -> setupContentSizeTestStage(stageStyle, initialContentSize, initialContentSize),\n@@ -67,0 +71,2 @@\n+        setupContentSizeTestStage(stageStyle, initialContentSize, initialContentSize);\n+\n@@ -68,1 +74,0 @@\n-                () -> setupContentSizeTestStage(stageStyle, initialContentSize, initialContentSize),\n@@ -76,7 +81,15 @@\n-        testStage = getStage(true);\n-        testStage.initStyle(stageStyle);\n-        Scene scene = new Scene(new StackPane(), width, height, BACKGROUND_COLOR);\n-        testStage.setScene(scene);\n-        testStage.setX(0);\n-        testStage.setY(0);\n-        testStage.show();\n+        CountDownLatch shownLatch = new CountDownLatch(1);\n+\n+        Util.runAndWait(() -> {\n+                    testStage = getStage(true);\n+                    testStage.initStyle(stageStyle);\n+                    Scene scene = new Scene(new StackPane(), width, height, BACKGROUND_COLOR);\n+                    testStage.setScene(scene);\n+                    testStage.setX(0);\n+                    testStage.setY(0);\n+                    testStage.setOnShown(e -> Platform.runLater(shownLatch::countDown));\n+                    testStage.show();\n+                });\n+\n+        Util.await(shownLatch);\n+        Util.sleep(WAIT);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageMixedSizeTest.java","additions":22,"deletions":9,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import java.util.List;\n@@ -48,0 +49,1 @@\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n@@ -60,7 +62,7 @@\n-    private static final Color COLOR1 = Color.RED;\n-    private static final Color COLOR2 = Color.ORANGE;\n-    private static final Color COLOR3 = Color.YELLOW;\n-    private static final Color COLOR4 = Color.GREEN;\n-    private static final Color COLOR5 = Color.BLUE;\n-    private static final Color COLOR6 = Color.INDIGO;\n-    private static final Color COLOR7 = Color.VIOLET;\n+    private static final Color COLOR0 = Color.RED;\n+    private static final Color COLOR1 = Color.ORANGE;\n+    private static final Color COLOR2 = Color.YELLOW;\n+    private static final Color COLOR3 = Color.GREEN;\n+    private static final Color COLOR4 = Color.BLUE;\n+    private static final Color COLOR5 = Color.INDIGO;\n+\n@@ -203,2 +205,6 @@\n-        if (x > -1) stage.setX(x);\n-        if (y > -1) stage.setY(y);\n+        if (x != -1) {\n+            stage.setX(x);\n+        }\n+        if (y != -1) {\n+            stage.setY(y);\n+        }\n@@ -245,2 +251,0 @@\n-    private Stage stage6;\n-\n@@ -251,0 +255,1 @@\n+        CountDownLatch shownLatch = new CountDownLatch(1);\n@@ -252,7 +257,7 @@\n-            stage0 = createStage(style, COLOR1, null, null, 100, 100);\n-            stage1 = createStage(style, COLOR2, stage0, Modality.WINDOW_MODAL, 150, 150);\n-            stage2 = createStage(style, COLOR3, stage1, Modality.WINDOW_MODAL, 200, 200);\n-            stage3 = createStage(style, COLOR4, stage2, Modality.WINDOW_MODAL, 250, 250);\n-            stage4 = createStage(style, COLOR5, stage3, Modality.WINDOW_MODAL,  300, 300);\n-            stage5 = createStage(style, COLOR6, stage4, Modality.WINDOW_MODAL,  350, 350);\n-            stage6 = createStage(style, COLOR7, stage5, Modality.WINDOW_MODAL,  400, 400);\n+            stage0 = createStage(style, COLOR0, null, null, 100, 100);\n+            stage1 = createStage(style, COLOR1, stage0, Modality.WINDOW_MODAL, 150, 150);\n+            stage2 = createStage(style, COLOR2, stage1, Modality.WINDOW_MODAL, 200, 200);\n+            stage3 = createStage(style, COLOR3, stage2, Modality.WINDOW_MODAL, 250, 250);\n+\n+            stage0.setOnShown(e -> Platform.runLater(shownLatch::countDown));\n+            stage0.show();\n@@ -261,2 +266,4 @@\n-        Util.doTimeLine(300,\n-                stage0::show,\n+        Util.await(shownLatch);\n+        Util.sleep(WAIT_TIME);\n+\n+        Util.doTimeLine(WAIT_TIME,\n@@ -266,3 +273,0 @@\n-                stage4::show,\n-                stage5::show,\n-                stage6::show,\n@@ -270,7 +274,4 @@\n-                    assertColorEquals(COLOR1, stage0);\n-                    assertColorEquals(COLOR2, stage1);\n-                    assertColorEquals(COLOR3, stage2);\n-                    assertColorEquals(COLOR4, stage3);\n-                    assertColorEquals(COLOR5, stage4);\n-                    assertColorEquals(COLOR6, stage5);\n-                    assertColorEquals(COLOR7, stage6);\n+                    assertColorEquals(COLOR0, stage0);\n+                    assertColorEquals(COLOR1, stage1);\n+                    assertColorEquals(COLOR2, stage2);\n+                    assertColorEquals(COLOR3, stage3);\n@@ -278,6 +279,19 @@\n-                () -> assertTrue(stage6.isFocused()),\n-                stage5::close,\n-                () -> assertTrue(stage6.isFocused()),\n-                stage6::close,\n-                stage5::close,\n-                () -> assertColorEquals(COLOR5, stage4));\n+                () -> {\n+                    assertTrue(stage3.isFocused());\n+                    assertFalse(stage2.isFocused());\n+                    assertFalse(stage1.isFocused());\n+                    assertFalse(stage0.isFocused());\n+                },\n+                stage3::close,\n+                () -> {\n+                    assertTrue(stage2.isFocused());\n+                    assertFalse(stage1.isFocused());\n+                    assertFalse(stage0.isFocused());\n+                },\n+                stage2::close,\n+                () -> {\n+                    assertTrue(stage1.isFocused());\n+                    assertFalse(stage0.isFocused());\n+                },\n+                stage1::close,\n+                () -> assertTrue(stage0.isFocused()));\n@@ -289,0 +303,2 @@\n+        CountDownLatch shownLatch = new CountDownLatch(1);\n+\n@@ -290,3 +306,7 @@\n-            stage0 = createStage(style, COLOR1, null, Modality.NONE, 100, 100);\n-            stage1 = createStage(style, COLOR2, stage0, Modality.WINDOW_MODAL, 150, 150);\n-            stage2 = createStage(style, COLOR3, stage1, Modality.WINDOW_MODAL, 200, 200);\n+            stage0 = createStage(style, COLOR0, null, Modality.NONE, 100, 100);\n+            stage1 = createStage(style, COLOR1, stage0, Modality.WINDOW_MODAL, 150, 150);\n+            stage2 = createStage(style, COLOR2, stage1, Modality.WINDOW_MODAL, 200, 200);\n+\n+            stage3 = createStage(style, COLOR3, null,  Modality.NONE, 600, 100);\n+            stage4 = createStage(style, COLOR4, stage3,  Modality.WINDOW_MODAL, 650, 150);\n+            stage5 = createStage(style, COLOR5, stage4,  Modality.WINDOW_MODAL, 700, 200);\n@@ -294,3 +314,2 @@\n-            stage3 = createStage(style, COLOR4, null,  Modality.NONE, 600, 100);\n-            stage4 = createStage(style, COLOR5, stage3,  Modality.WINDOW_MODAL, 650, 150);\n-            stage5 = createStage(style, COLOR6, stage4,  Modality.WINDOW_MODAL, 700, 200);\n+            stage0.setOnShown(e -> Platform.runLater(shownLatch::countDown));\n+            stage0.show();\n@@ -299,0 +318,3 @@\n+        Util.await(shownLatch);\n+        Util.sleep(WAIT_TIME);\n+\n@@ -300,1 +322,0 @@\n-                stage0::show,\n@@ -307,6 +328,14 @@\n-                    assertColorEquals(COLOR1, stage0);\n-                    assertColorEquals(COLOR2, stage1);\n-                    assertColorEquals(COLOR3, stage2);\n-                    assertColorEquals(COLOR4, stage3);\n-                    assertColorEquals(COLOR5, stage4);\n-                    assertColorEquals(COLOR6, stage5);\n+                    assertColorEquals(COLOR0, stage0);\n+                    assertColorEquals(COLOR1, stage1);\n+                    assertColorEquals(COLOR2, stage2);\n+                    assertColorEquals(COLOR3, stage3);\n+                    assertColorEquals(COLOR4, stage4);\n+                    assertColorEquals(COLOR5, stage5);\n+                },\n+                () -> {\n+                    assertTrue(stage5.isFocused());\n+                    assertFalse(stage4.isFocused());\n+                    assertFalse(stage3.isFocused());\n+                    assertFalse(stage2.isFocused());\n+                    assertFalse(stage1.isFocused());\n+                    assertFalse(stage0.isFocused());\n@@ -314,1 +343,0 @@\n-                () -> assertTrue(stage5.isFocused()),\n@@ -316,1 +344,7 @@\n-                () -> assertTrue(stage4.isFocused()),\n+                () -> {\n+                    assertTrue(stage4.isFocused());\n+                    assertFalse(stage3.isFocused());\n+                    assertFalse(stage2.isFocused());\n+                    assertFalse(stage1.isFocused());\n+                    assertFalse(stage0.isFocused());\n+                },\n@@ -318,1 +352,6 @@\n-                () -> assertTrue(stage3.isFocused()),\n+                () -> {\n+                    assertTrue(stage3.isFocused());\n+                    assertFalse(stage2.isFocused());\n+                    assertFalse(stage1.isFocused());\n+                    assertFalse(stage0.isFocused());\n+                },\n@@ -320,1 +359,5 @@\n-                () -> assertTrue(stage2.isFocused()),\n+                () -> {\n+                    assertTrue(stage2.isFocused());\n+                    assertFalse(stage1.isFocused());\n+                    assertFalse(stage0.isFocused());\n+                },\n@@ -322,1 +365,4 @@\n-                () -> assertTrue(stage1.isFocused()),\n+                () -> {\n+                    assertTrue(stage1.isFocused());\n+                    assertFalse(stage0.isFocused());\n+                },\n@@ -325,0 +371,1 @@\n+\n@@ -330,0 +377,1 @@\n+        CountDownLatch shownLatch = new CountDownLatch(3);\n@@ -331,3 +379,8 @@\n-            stage0 = createStage(style, COLOR1, null, Modality.NONE, 100, 100);\n-            stage1 = createStage(style, COLOR2, stage0, Modality.WINDOW_MODAL, 150, 150);\n-            stage2 = createStage(style, COLOR3, stage1, Modality.WINDOW_MODAL, 200, 200);\n+            stage0 = createStage(style, COLOR0, null, Modality.NONE, 100, 100);\n+            stage1 = createStage(style, COLOR1, stage0, Modality.NONE, 150, 150);\n+            stage2 = createStage(style, COLOR2, stage1, Modality.NONE, 200, 200);\n+\n+            List.of(stage0, stage1, stage2).forEach(stage -> {\n+                stage.setOnShown(e -> Platform.runLater(shownLatch::countDown));\n+                stage.show();\n+            });\n@@ -336,0 +389,3 @@\n+        Util.await(shownLatch);\n+        Util.sleep(WAIT_TIME);\n+\n@@ -337,3 +393,0 @@\n-                stage0::show,\n-                stage1::show,\n-                stage2::show,\n@@ -343,5 +396,3 @@\n-                    assertTrue(stage1.isIconified());\n-                    assertTrue(stage2.isIconified());\n-                    assertColorDoesNotEqual(COLOR1, stage0);\n-                    assertColorDoesNotEqual(COLOR2, stage1);\n-                    assertColorDoesNotEqual(COLOR3, stage2);\n+                    assertColorDoesNotEqual(COLOR0, stage0);\n+                    assertColorDoesNotEqual(COLOR1, stage1);\n+                    assertColorDoesNotEqual(COLOR2, stage2);\n@@ -349,1 +400,1 @@\n-                () -> stage2.setIconified(false),\n+                () -> stage0.setIconified(false),\n@@ -351,3 +402,3 @@\n-                    assertColorEquals(COLOR1, stage0);\n-                    assertColorEquals(COLOR2, stage1);\n-                    assertColorEquals(COLOR3, stage2);\n+                    assertColorEquals(COLOR0, stage0);\n+                    assertColorEquals(COLOR1, stage1);\n+                    assertColorEquals(COLOR2, stage2);\n@@ -360,0 +411,2 @@\n+        CountDownLatch shownLatch = new CountDownLatch(3);\n+\n@@ -361,3 +414,8 @@\n-            stage0 = createStage(style, COLOR1, null, Modality.NONE, 100, 100);\n-            stage1 = createStage(style, COLOR2, stage0, Modality.NONE, 150, 150);\n-            stage2 = createStage(style, COLOR3, stage1, Modality.NONE, 200, 200);\n+            stage0 = createStage(style, COLOR0, null, Modality.NONE, 100, 100);\n+            stage1 = createStage(style, COLOR1, stage0, Modality.NONE, 150, 150);\n+            stage2 = createStage(style, COLOR2, stage1, Modality.NONE, 200, 200);\n+\n+            List.of(stage0, stage1, stage2).forEach(stage -> {\n+                stage.setOnShown(e -> Platform.runLater(shownLatch::countDown));\n+                stage.show();\n+            });\n@@ -366,0 +424,3 @@\n+        Util.await(shownLatch);\n+        Util.sleep(WAIT_TIME);\n+\n@@ -367,3 +428,0 @@\n-                stage0::show,\n-                stage1::show,\n-                stage2::show,\n@@ -375,3 +433,3 @@\n-                    assertColorDoesNotEqual(COLOR1, stage0);\n-                    assertColorDoesNotEqual(COLOR2, stage1);\n-                    assertColorDoesNotEqual(COLOR3, stage2);\n+                    assertColorDoesNotEqual(COLOR0, stage0);\n+                    assertColorDoesNotEqual(COLOR1, stage1);\n+                    assertColorDoesNotEqual(COLOR2, stage2);\n@@ -381,3 +439,3 @@\n-                    assertColorEquals(COLOR1, stage0);\n-                    assertColorEquals(COLOR2, stage1);\n-                    assertColorEquals(COLOR3, stage2);\n+                    assertColorEquals(COLOR0, stage0);\n+                    assertColorEquals(COLOR1, stage1);\n+                    assertColorEquals(COLOR2, stage2);\n@@ -390,0 +448,2 @@\n+        CountDownLatch shownLatch = new CountDownLatch(3);\n+\n@@ -391,3 +451,8 @@\n-            stage0 = createStage(style, COLOR1, null, Modality.NONE, -1, -1);\n-            stage1 = createStage(style, COLOR2, stage0, Modality.NONE, -1, -1);\n-            stage2 = createStage(style, COLOR3, stage0, Modality.NONE, -1, -1);\n+            stage0 = createStage(style, COLOR0, null, Modality.NONE, -1, -1);\n+            stage1 = createStage(style, COLOR1, stage0, Modality.NONE, -1, -1);\n+            stage2 = createStage(style, COLOR2, stage0, Modality.NONE, -1, -1);\n+\n+            List.of(stage0, stage1, stage2).forEach(stage -> {\n+                stage.setOnShown(e -> Platform.runLater(shownLatch::countDown));\n+                stage.show();\n+            });\n@@ -395,0 +460,4 @@\n+\n+        Util.await(shownLatch);\n+        Util.sleep(WAIT_TIME);\n+\n@@ -396,5 +465,0 @@\n-                () -> {\n-                    stage0.show();\n-                    stage1.show();\n-                    stage2.show();\n-                },\n@@ -409,3 +473,3 @@\n-                    assertColorDoesNotEqual(COLOR1, stage0);\n-                    assertColorDoesNotEqual(COLOR2, stage1);\n-                    assertColorDoesNotEqual(COLOR3, stage2);\n+                    assertColorDoesNotEqual(COLOR0, stage0);\n+                    assertColorDoesNotEqual(COLOR1, stage1);\n+                    assertColorDoesNotEqual(COLOR2, stage2);\n@@ -415,3 +479,3 @@\n-                    assertColorEquals(COLOR1, stage0);\n-                    assertColorEquals(COLOR2, stage1);\n-                    assertColorEquals(COLOR3, stage2);\n+                    assertColorEquals(COLOR0, stage0);\n+                    assertColorEquals(COLOR1, stage1);\n+                    assertColorEquals(COLOR2, stage2);\n@@ -424,0 +488,1 @@\n+        CountDownLatch shownLatch = new CountDownLatch(3);\n@@ -425,3 +490,8 @@\n-            stage0 = createStage(style, COLOR1, null, Modality.NONE, -1, -1);\n-            stage1 = createStage(style, COLOR2, null, Modality.NONE, -1, -1);\n-            stage2 = createStage(style, COLOR3, stage0, Modality.APPLICATION_MODAL, -1, -1);\n+            stage0 = createStage(style, COLOR0, null, Modality.NONE, 0, 0);\n+            stage1 = createStage(style, COLOR1, null, Modality.NONE, 0, 250);\n+            stage2 = createStage(style, COLOR2, stage0, Modality.APPLICATION_MODAL, 0, 50);\n+\n+            List.of(stage0, stage1, stage2).forEach(stage -> {\n+                stage.setOnShown(e -> Platform.runLater(shownLatch::countDown));\n+                stage.show();\n+            });\n@@ -430,0 +500,3 @@\n+        Util.await(shownLatch);\n+        Util.sleep(WAIT_TIME);\n+\n@@ -431,4 +504,0 @@\n-                stage1::show,\n-                stage0::show,\n-                () -> stage1.requestFocus(),\n-                stage2::show,\n@@ -436,1 +505,4 @@\n-                () -> assertTrue(stage1.isFocused()));\n+                () -> {\n+                    assertTrue(stage0.isFocused());\n+                    assertFalse(stage1.isFocused());\n+                });\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageOwnershipTest.java","additions":175,"deletions":103,"binary":false,"changes":278,"status":"modified"}]}