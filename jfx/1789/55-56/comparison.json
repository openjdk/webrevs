{"files":[{"patch":"@@ -311,1 +311,0 @@\n-}\n@@ -313,2 +312,0 @@\n-void WindowContext::process_focus(bool focus_in) {\n-    LOG(\"process_focus (state): %d\\n\", focus_in);\n@@ -316,1 +313,1 @@\n-        if (focus_in && !isEnabled()) {\n+        if (event->in && !isEnabled()) {\n@@ -322,1 +319,1 @@\n-            LOG(\"%s\\n\", (focus_in) ? \"com_sun_glass_events_WindowEvent_FOCUS_GAINED\"\n+            LOG(\"%s\\n\", (event->in) ? \"com_sun_glass_events_WindowEvent_FOCUS_GAINED\"\n@@ -326,1 +323,1 @@\n-                    focus_in ? com_sun_glass_events_WindowEvent_FOCUS_GAINED\n+                    event->in ? com_sun_glass_events_WindowEvent_FOCUS_GAINED\n@@ -969,2 +966,1 @@\n-                                | GDK_WINDOW_STATE_ABOVE\n-                                | GDK_WINDOW_STATE_FOCUSED))) {\n+                                | GDK_WINDOW_STATE_ABOVE))) {\n@@ -976,6 +972,0 @@\n-    if (event->changed_mask & GDK_WINDOW_STATE_FOCUSED) {\n-        process_focus(event->new_window_state & GDK_WINDOW_STATE_FOCUSED);\n-\n-        if (event->changed_mask == GDK_WINDOW_STATE_FOCUSED) return;\n-    }\n-\n@@ -1220,0 +1210,5 @@\n+\n+        if (jwindow && isEnabled()) {\n+            mainEnv->CallVoidMethod(jwindow, jWindowNotifyFocus, com_sun_glass_events_WindowEvent_FOCUS_GAINED);\n+            CHECK_JNI_EXCEPTION(mainEnv);\n+        }\n@@ -1748,1 +1743,0 @@\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.cpp","additions":9,"deletions":15,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -325,1 +325,0 @@\n-    void process_focus(bool);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.h","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,124 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package test.javafx.stage;\n-\n-import javafx.geometry.Rectangle2D;\n-import javafx.scene.layout.Region;\n-import javafx.scene.layout.StackPane;\n-import javafx.stage.Screen;\n-import javafx.stage.StageStyle;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.EnumSource;\n-import test.util.Util;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static test.util.Util.PARAMETERIZED_TEST_DISPLAY;\n-\n-class CenterOnScreenTest extends StageTestBase {\n-    private static final float CENTER_ON_SCREEN_X_FRACTION = 1.0f \/ 2;\n-    private static final float CENTER_ON_SCREEN_Y_FRACTION = 1.0f \/ 3;\n-\n-    private static final double STAGE_WIDTH = 400;\n-    private static final double STAGE_HEIGHT = 200;\n-\n-    \/\/ Must be cointained in Stage dimensions\n-    private static final double SCENE_WIDTH = 300;\n-    private static final double SCENE_HEIGHT = 100;\n-\n-    @Override\n-    protected Region createRoot() {\n-        StackPane stackPane = new StackPane();\n-        stackPane.setPrefSize(SCENE_WIDTH, SCENE_HEIGHT);\n-        return stackPane;\n-    }\n-\n-    @ParameterizedTest(name = PARAMETERIZED_TEST_DISPLAY)\n-    @EnumSource(names = {\"DECORATED\", \"EXTENDED\", \"UNDECORATED\", \"TRANSPARENT\"})\n-    void centerOnScreenWhenShown(StageStyle stageStyle) {\n-        setupStageWithStyle(stageStyle, stage -> {\n-            stage.setWidth(STAGE_WIDTH);\n-            stage.setHeight(STAGE_HEIGHT);\n-        });\n-        Util.sleep(MEDIUM_WAIT);\n-        assertStageCentered(false);\n-    }\n-\n-    @ParameterizedTest(name = PARAMETERIZED_TEST_DISPLAY)\n-    @EnumSource(names = {\"DECORATED\", \"EXTENDED\", \"UNDECORATED\", \"TRANSPARENT\"})\n-    void centerOnScreenWhenShownWithSceneSize(StageStyle stageStyle) {\n-        setupStageWithStyle(stageStyle, null);\n-        Util.sleep(MEDIUM_WAIT);\n-        assertStageCentered(true);\n-    }\n-\n-    @ParameterizedTest(name = PARAMETERIZED_TEST_DISPLAY)\n-    @EnumSource(names = {\"DECORATED\", \"EXTENDED\", \"UNDECORATED\", \"TRANSPARENT\"})\n-    void centerOnScreenAfterShown(StageStyle stageStyle) {\n-        setupStageWithStyle(stageStyle, stage -> {\n-            stage.setWidth(STAGE_WIDTH);\n-            stage.setHeight(STAGE_HEIGHT);\n-            stage.setX(0);\n-            stage.setY(0);\n-        });\n-\n-        Util.sleep(MEDIUM_WAIT);\n-        Util.runAndWait(() -> getStage().centerOnScreen());\n-        Util.sleep(MEDIUM_WAIT);\n-        assertStageCentered(false);\n-    }\n-\n-    @ParameterizedTest(name = PARAMETERIZED_TEST_DISPLAY)\n-    @EnumSource(names = {\"DECORATED\", \"EXTENDED\", \"UNDECORATED\", \"TRANSPARENT\"})\n-    void centerOnScreenAfterShownWithSceneSize(StageStyle stageStyle) {\n-        setupStageWithStyle(stageStyle, stage -> {\n-            stage.setX(0);\n-            stage.setY(0);\n-        });\n-\n-        Util.sleep(MEDIUM_WAIT);\n-        Util.runAndWait(() -> getStage().centerOnScreen());\n-        Util.sleep(MEDIUM_WAIT);\n-        assertStageCentered(true);\n-    }\n-\n-    private void assertStageCentered(boolean useSceneSize) {\n-        Screen screen = Util.getScreen(getStage());\n-\n-        Rectangle2D bounds = screen.getVisualBounds();\n-        double centerX =\n-                bounds.getMinX() + (bounds.getWidth() - ((useSceneSize) ? SCENE_WIDTH : STAGE_WIDTH))\n-                        * CENTER_ON_SCREEN_X_FRACTION;\n-        double centerY =\n-                bounds.getMinY() + (bounds.getHeight() - ((useSceneSize) ? SCENE_HEIGHT : STAGE_HEIGHT))\n-                        * CENTER_ON_SCREEN_Y_FRACTION;\n-\n-        \/\/ Use scene position to avoid platform variations (shadows, decoration, ...)\n-        double posX = getStage().getX() + getStage().getScene().getX();\n-        double posY = getStage().getY() + getStage().getScene().getY();\n-\n-        assertEquals(centerX, getStage().getX(), posX, \"Stage is not centered on the X axis\");\n-        assertEquals(centerY, getStage().getY(), posY, \"Stage is not centered on the Y axis\");\n-    }\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/CenterOnScreenTest.java","additions":0,"deletions":124,"binary":false,"changes":124,"status":"deleted"},{"patch":"@@ -159,1 +159,1 @@\n-        assumeTrue(PlatformUtil.isWindows());\n+        assumeTrue(!PlatformUtil.isWindows());\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/SizingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import com.sun.javafx.PlatformUtil;\n@@ -37,1 +36,0 @@\n-import test.javafx.scene.shape.TestUtils;\n@@ -45,1 +43,0 @@\n-import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -178,3 +175,2 @@\n-        if (stageStyle == StageStyle.UNDECORATED) {\n-            \/\/ Causes Stage to hang on Wayland\n-            assumeTrue(Util.isOnWayland());\n+        \/\/ Causes Stage to hang on Wayland\n+        if (stageStyle == StageStyle.UNDECORATED && Util.isOnWayland()) {\n@@ -286,3 +282,2 @@\n-        if (stageStyle == StageStyle.UNDECORATED) {\n-            \/\/ Causes Stage to hang on Wayland\n-            assumeTrue(Util.isOnWayland());\n+        \/\/ Causes Stage to hang on Wayland\n+        if (stageStyle == StageStyle.UNDECORATED && Util.isOnWayland()) {\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageAttributesTest.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+    private static final Color COLOR3 = Color.GREEN;\n@@ -196,10 +197,10 @@\n-                () -> bottomStage.setMaximized(true),\n-                topStage::show,\n-                () -> {\n-                    assertTrue(bottomStage.isMaximized());\n-                    \/\/ Make sure state is still maximized\n-                    assertColorEqualsVisualBounds(BOTTOM_COLOR);\n-\n-                    Color color = getColor(100, 100);\n-                    assertColorEquals(TOP_COLOR, color, TOLERANCE);\n-                });\n+            () -> bottomStage.setMaximized(true),\n+            topStage::show,\n+            () -> {\n+                assertTrue(bottomStage.isMaximized());\n+                \/\/ Make sure state is still maximized\n+                assertColorEqualsVisualBounds(BOTTOM_COLOR);\n+\n+                Color color = getColor(100, 100);\n+                assertColorEquals(TOP_COLOR, color, TOLERANCE);\n+            });\n@@ -233,0 +234,1 @@\n+    private Stage stage3;\n@@ -251,19 +253,19 @@\n-                stage1::show,\n-                stage2::show,\n-                () -> {\n-                    assertTrue(stage2.isFocused());\n-                    assertColorEquals(COLOR2, stage2);\n-                    assertFalse(stage1.isFocused());\n-                    assertFalse(stage0.isFocused());\n-                },\n-                stage2::close,\n-                () -> {\n-                    assertTrue(stage1.isFocused());\n-                    assertColorEquals(COLOR1, stage1);\n-                    assertFalse(stage0.isFocused());\n-                },\n-                stage1::close,\n-                () -> {\n-                    assertTrue(stage0.isFocused());\n-                    assertColorEquals(COLOR0, stage0);\n-                });\n+            stage1::show,\n+            stage2::show,\n+            () -> {\n+                assertTrue(stage2.isFocused());\n+                assertColorEquals(COLOR2, stage2);\n+                assertFalse(stage1.isFocused());\n+                assertFalse(stage0.isFocused());\n+            },\n+            stage2::close,\n+            () -> {\n+                assertTrue(stage1.isFocused());\n+                assertColorEquals(COLOR1, stage1);\n+                assertFalse(stage0.isFocused());\n+            },\n+            stage1::close,\n+            () -> {\n+                assertTrue(stage0.isFocused());\n+                assertColorEquals(COLOR0, stage0);\n+            });\n@@ -277,2 +279,1 @@\n-            assumeTrue(PlatformUtil.isWindows());\n-            return;\n+            assumeTrue(!PlatformUtil.isWindows());\n@@ -281,1 +282,1 @@\n-        CountDownLatch shownLatch = new CountDownLatch(3);\n+        CountDownLatch shownLatch = new CountDownLatch(4);\n@@ -283,3 +284,5 @@\n-            stage0 = createStage(style, COLOR0, null, null, 100, 100);\n-            stage1 = createStage(style, COLOR1, stage0, null, 200, 150);\n-            stage2 = createStage(style, COLOR2, stage1, null, 300, 200);\n+            stage0 = createStage(StageStyle.UNDECORATED, COLOR0, null, null, 0, 0);\n+            stage0.setMaximized(true);\n+            stage1 = createStage(style, COLOR1, null, null, 100, 100);\n+            stage2 = createStage(style, COLOR2, stage1, null, 200, 150);\n+            stage3 = createStage(style, COLOR3, stage2, null, 300, 200);\n@@ -287,1 +290,1 @@\n-            List.of(stage0, stage1, stage2).forEach(stage -> {\n+            List.of(stage0, stage1, stage2, stage3).forEach(stage -> {\n@@ -297,14 +300,14 @@\n-                () -> stage0.setIconified(true),\n-                () -> {\n-                    assertTrue(stage0.isIconified());\n-                    assertColorNotEquals(COLOR0, stage0);\n-                    assertColorNotEquals(COLOR1, stage1);\n-                    assertColorNotEquals(COLOR2, stage2);\n-                },\n-                () -> stage0.setIconified(false),\n-                () -> {\n-                    assertFalse(stage0.isIconified());\n-                    assertColorEquals(COLOR0, stage0);\n-                    assertColorEquals(COLOR1, stage1);\n-                    assertColorEquals(COLOR2, stage2);\n-                });\n+            () -> stage1.setIconified(true),\n+            () -> {\n+                assertTrue(stage1.isIconified());\n+                assertColorEquals(COLOR0, stage1);\n+                assertColorEquals(COLOR0, stage2);\n+                assertColorEquals(COLOR0, stage3);\n+            },\n+            () -> stage1.setIconified(false),\n+            () -> {\n+                assertFalse(stage1.isIconified());\n+                assertColorEquals(COLOR1, stage1);\n+                assertColorEquals(COLOR2, stage2);\n+                assertColorEquals(COLOR3, stage3);\n+            });\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageOwnershipTest.java","additions":53,"deletions":50,"binary":false,"changes":103,"status":"modified"}]}