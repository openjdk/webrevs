{"files":[{"patch":"@@ -360,2 +360,0 @@\n-    if (w == -1) w = G_MAXSHORT;\n-    if (h == -1) h = G_MAXSHORT;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassWindow.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,3 +49,0 @@\n-#define FIX_CONSTRAINT(value, adjustment) \\\n-    if ((value) != -1) \\\n-        (value) = NONNEGATIVE_OR((value) - (adjustment), 1)\n@@ -764,0 +761,2 @@\n+            LOG1(\" ------------------------------------------- frame extents - changed: %d\\n\", changed);\n+\n@@ -765,1 +764,0 @@\n-            LOG0(\" ------------------------------------------- frame extents\\n\");\n@@ -816,5 +814,0 @@\n-            FIX_CONSTRAINT(resizable.minw, geometry.extents.width);\n-            FIX_CONSTRAINT(resizable.maxw, geometry.extents.width);\n-            FIX_CONSTRAINT(resizable.minh, geometry.extents.height);\n-            FIX_CONSTRAINT(resizable.maxh, geometry.extents.height);\n-\n@@ -882,0 +875,2 @@\n+        LOG4(\"Loaded Normal Extents: x = %d, y = %d, width = %d, height = %d\\n\",\n+                    geometry.extents.x, geometry.extents.y, geometry.extents.width, geometry.extents.height);\n@@ -888,0 +883,2 @@\n+        LOG4(\"Loaded Utility Extents: x = %d, y = %d, width = %d, height = %d\\n\",\n+                    geometry.extents.x, geometry.extents.y, geometry.extents.width, geometry.extents.height);\n@@ -918,2 +915,2 @@\n-    int ww = cw + geometry.extents.width;\n-    int wh = ch + geometry.extents.height;\n+    int ww, wh;\n+    get_window_size(&ww, &wh);\n@@ -1027,0 +1024,18 @@\n+void WindowContext::notify_current_sizes() {\n+    int ww, wh, cw, ch;\n+\n+    get_window_size(&ww, &wh);\n+    get_view_size(&cw, &ch);\n+\n+    GdkWindowState state = (gtk_widget_get_realized(gtk_widget))\n+            ? gdk_window_get_state(gdk_window)\n+            : (GdkWindowState) 0;\n+\n+    notify_window_resize((state & GDK_WINDOW_STATE_MAXIMIZED)\n+                                ? com_sun_glass_events_WindowEvent_MAXIMIZE\n+                                : com_sun_glass_events_WindowEvent_RESIZE,\n+                                ww, wh);\n+\n+    notify_view_resize(cw, ch);\n+}\n+\n@@ -1108,1 +1123,3 @@\n-    update_window_constraints(get_view_width(), get_view_height());\n+    int cw, ch;\n+    get_view_size(&cw, &ch);\n+    update_window_constraints(cw, ch);\n@@ -1122,7 +1139,12 @@\n-        int min_w = (resizable.minw == -1) ? 1 : resizable.minw;\n-        int min_h =  (resizable.minh == -1) ? 1 : resizable.minh;\n-\n-        hints.min_width = (min_w < 1) ? 1 : min_w;\n-        hints.min_height = (min_h < 1) ? 1 : min_h;\n-        hints.max_width = (resizable.maxw == -1) ? G_MAXINT : resizable.maxw;\n-        hints.max_height = (resizable.maxh == -1) ? G_MAXINT : resizable.maxh;\n+        hints.min_width = (resizable.minw == -1)\n+                     ? 1\n+                     : NONNEGATIVE_OR(resizable.minw - geometry.extents.width, 1);\n+        hints.min_height = (resizable.minh == -1)\n+                     ? 1\n+                     : NONNEGATIVE_OR(resizable.minh - geometry.extents.height, 1);\n+        hints.max_width = (resizable.maxw == -1)\n+                    ? G_MAXINT\n+                    : NONNEGATIVE_OR(resizable.maxw - geometry.extents.width, 1);\n+        hints.max_height = (resizable.maxh == -1)\n+                    ? G_MAXINT\n+                    : NONNEGATIVE_OR(resizable.maxh - geometry.extents.height, 1);\n@@ -1195,1 +1217,1 @@\n-        newH = NONNEGATIVE_OR (h - geometry.extents.height, 1);\n+        newH = NONNEGATIVE_OR(h - geometry.extents.height, 1);\n@@ -1222,11 +1244,1 @@\n-                int cw = get_view_width();\n-                int ch = get_view_height();\n-\n-                int ww = cw + geometry.extents.width;\n-                int wh = ch + geometry.extents.height;\n-\n-                notify_window_resize((state & GDK_WINDOW_STATE_MAXIMIZED)\n-                                            ? com_sun_glass_events_WindowEvent_MAXIMIZE\n-                                            : com_sun_glass_events_WindowEvent_RESIZE,\n-                                            ww, wh);\n-                notify_view_resize(cw, ch);\n+                notify_current_sizes();\n@@ -1246,1 +1258,1 @@\n-    if (!resizable.value || resizable.maxw != -1 || resizable.maxh != - 1) {\n+    if (!resizable.value) {\n@@ -1276,1 +1288,1 @@\n-        if (!resizable.value || resizable.maxw != -1 || resizable.maxh != - 1) {\n+        if (!resizable.value) {\n@@ -1317,1 +1329,1 @@\n-        if (!resizable.value || resizable.maxw != -1 || resizable.maxh != - 1) {\n+        if (!resizable.value) {\n@@ -1361,2 +1373,2 @@\n-    resizable.minw = NONNEGATIVE_OR(w - geometry.extents.width, 1);\n-    resizable.minh = NONNEGATIVE_OR(h - geometry.extents.height, 1);\n+    resizable.minw = w;\n+    resizable.minh = h;\n@@ -1368,2 +1380,2 @@\n-    resizable.maxw = NONNEGATIVE_OR(w - geometry.extents.width, 1);\n-    resizable.maxh = NONNEGATIVE_OR(h - geometry.extents.height, 1);\n+    resizable.maxw = (w == -1) ? -1 : w;\n+    resizable.maxh = (h == -1) ? -1 : h;\n@@ -1434,4 +1446,10 @@\n-int WindowContext::get_view_width() {\n-    return (gtk_widget_get_realized(gtk_widget))\n-                ? gdk_window_get_width(gdk_window)\n-                : geometry.width;\n+void WindowContext::get_view_size(int *width, int *height) {\n+    if (gtk_widget_get_realized(gtk_widget)) {\n+        *width = gdk_window_get_width(gdk_window);\n+        *height = gdk_window_get_height(gdk_window);\n+    } else {\n+        *width = geometry.width;\n+        *height = geometry.height;\n+    }\n+\n+    LOG2(\"get_view_size: %d, %d\\n\", *width, *height);\n@@ -1440,4 +1458,23 @@\n-int WindowContext::get_view_height() {\n-    return (gtk_widget_get_realized(gtk_widget))\n-               ? gdk_window_get_height(gdk_window)\n-               : geometry.height;\n+void WindowContext::get_window_size(int *width, int *height) {\n+    int ww, wh;\n+    get_view_size(&ww, &wh);\n+\n+    if (gtk_widget_get_realized(gtk_widget)) {\n+        gint root_x, root_y, origin_x, origin_y;\n+        gdk_window_get_root_origin(gdk_window, &root_x, &root_y);\n+        gdk_window_get_origin(gdk_window, &origin_x, &origin_y);\n+\n+        \/\/ Here is detected if there are any decorations as it might vary, for example\n+        \/\/ if the window is fullscreen\n+        if ((origin_x - root_x) > 0) {\n+            ww += geometry.extents.width;\n+        }\n+\n+        if ((origin_y - root_y) > 0) {\n+            wh += geometry.extents.height;\n+        }\n+    }\n+\n+    LOG2(\"get_window_size: %d, %d\\n\", ww, wh);\n+    *width = ww;\n+    *height = wh;\n@@ -1448,3 +1485,6 @@\n-    LOG2(\"resize: %d, %d\\n\", width, height);\n-    int newW = (width <= 0) ? get_view_width() : width;\n-    int newH = (height <= 0) ? get_view_height() : height;\n+    LOG2(\"resize (requested): %d, %d\\n\", width, height);\n+    int current_width, current_height;\n+    get_view_size(&current_width, &current_height);\n+\n+    int newW = (width <= 0) ? current_width : width;\n+    int newH = (height <= 0) ? current_height : height;\n@@ -1455,1 +1495,1 @@\n-        newW = resizable.minw;\n+        newW = NONNEGATIVE_OR(resizable.minw - geometry.extents.width, 1);\n@@ -1459,1 +1499,1 @@\n-        newH = resizable.minh;\n+        newH = NONNEGATIVE_OR(resizable.minh - geometry.extents.height, 1);\n@@ -1463,1 +1503,1 @@\n-        newW = resizable.maxw;\n+        newW = NONNEGATIVE_OR(resizable.maxw - geometry.extents.width, 1);\n@@ -1467,1 +1507,1 @@\n-        newH = resizable.maxh;\n+        newH = NONNEGATIVE_OR(resizable.maxh - geometry.extents.height, 1);\n@@ -1470,1 +1510,2 @@\n-    bool notify = false;\n+    LOG2(\"resize (real): %d, %d\\n\", newW, newH);\n+\n@@ -1473,1 +1514,0 @@\n-\n@@ -1475,3 +1515,1 @@\n-        if (get_view_width() == newW && get_view_height() == newH) {\n-            notify = true;\n-        }\n+        if (current_width == newW && current_height == newH)  notify_current_sizes();\n@@ -1482,11 +1520,1 @@\n-        notify = true;\n-    }\n-\n-    if (notify) {\n-        int w = newW + geometry.extents.width;\n-        int h = newH + geometry.extents.height;\n-\n-        LOG2(\"resize -> notify: %d, %d\\n\", w, h);\n-\n-        notify_window_resize(com_sun_glass_events_WindowEvent_RESIZE, w, h);\n-        notify_view_resize(newW, newH);\n+        notify_current_sizes();\n@@ -1574,2 +1602,2 @@\n-        int cw = get_view_width();\n-        int ch = get_view_height();\n+        int cw, ch;\n+        get_view_size(&cw, &ch);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.cpp","additions":99,"deletions":71,"binary":false,"changes":170,"status":"modified"},{"patch":"@@ -232,2 +232,2 @@\n-    int get_view_width();\n-    int get_view_height();\n+    void get_view_size(int *, int *);\n+    void get_window_size(int *, int *);\n@@ -245,0 +245,1 @@\n+    void notify_current_sizes();\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.h","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -108,2 +108,2 @@\n-            testStage.setWidth(200);\n-            testStage.setHeight(200);\n+            testStage.setWidth(300);\n+            testStage.setHeight(300);\n@@ -114,2 +114,8 @@\n-            testStage.setMaxWidth(100);\n-            testStage.setMaxHeight(100);\n+            testStage.setMaxWidth(250);\n+            testStage.setMaxHeight(250);\n+        });\n+\n+        Button btnUnsetMaxSize = new Button(\"Unset Max Size\");\n+        btnUnsetMaxSize.setOnAction(e -> {\n+            testStage.setMaxWidth(Double.MAX_VALUE);\n+            testStage.setMaxHeight(Double.MAX_VALUE);\n@@ -130,1 +136,1 @@\n-                btnResize, btnMaxSize, btnMove, btnIconify, btnMaxminize, btnFullScreen, btnResizable);\n+                btnResize, btnMaxSize, btnUnsetMaxSize, btnMove, btnIconify, btnMaxminize, btnFullScreen, btnResizable);\n@@ -151,1 +157,0 @@\n-        stage.setAlwaysOnTop(true);\n","filename":"tests\/manual\/stage\/TestStage.java","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import javafx.scene.Parent;\n@@ -38,1 +37,0 @@\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -62,3 +60,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n@@ -70,1 +66,1 @@\n-        Util.sleep(300);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -75,3 +71,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n@@ -80,1 +74,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -85,3 +79,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n@@ -96,1 +88,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -98,1 +90,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -103,3 +95,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n@@ -112,1 +102,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -114,1 +104,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -122,1 +112,1 @@\n-        double delta = (stageStyle == StageStyle.DECORATED) ? DECORATED_DELTA : 1.0;\n+        double delta = (stageStyle == StageStyle.DECORATED) ? DECORATED_DELTA : SIZING_DELTA;\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/CenterOnScreenTest.java","additions":11,"deletions":21,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -65,3 +65,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n@@ -71,1 +69,1 @@\n-        Util.doTimeLine(500,\n+        Util.doTimeLine(LONG_WAIT,\n@@ -76,1 +74,1 @@\n-        Util.sleep(500);\n+        Util.sleep(LONG_WAIT);\n@@ -81,3 +79,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n@@ -87,1 +83,1 @@\n-        Util.sleep(500);\n+        Util.sleep(LONG_WAIT);\n@@ -93,1 +89,1 @@\n-        Util.sleep(500);\n+        Util.sleep(LONG_WAIT);\n@@ -98,3 +94,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n@@ -104,1 +98,1 @@\n-        Util.doTimeLine(500,\n+        Util.doTimeLine(LONG_WAIT,\n@@ -113,1 +107,1 @@\n-        Util.sleep(500);\n+        Util.sleep(LONG_WAIT);\n@@ -115,2 +109,4 @@\n-        assertEquals(POS_X, getStage().getX(), \"Window failed to restore position set while fullscreened\");\n-        assertEquals(POS_Y, getStage().getY(),  \"Window failed to restore position set while fullscreened\");\n+        assertEquals(POS_X, getStage().getX(), POSITION_DELTA,\n+                \"Window failed to restore position set while fullscreened\");\n+        assertEquals(POS_Y, getStage().getY(), POSITION_DELTA,\n+                \"Window failed to restore position set while fullscreened\");\n@@ -120,3 +116,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n@@ -126,1 +120,1 @@\n-        Util.doTimeLine(500,\n+        Util.doTimeLine(LONG_WAIT,\n@@ -135,1 +129,1 @@\n-        Util.sleep(500);\n+        Util.sleep(LONG_WAIT);\n@@ -137,2 +131,2 @@\n-        assertEquals(WIDTH, getStage().getWidth(), \"Window failed to restore size set while fullscreened\");\n-        assertEquals(HEIGHT, getStage().getHeight(),  \"Window failed to restore size set while fullscreened\");\n+        assertEquals(WIDTH, getStage().getWidth(), SIZING_DELTA, \"Window failed to restore size set while fullscreened\");\n+        assertEquals(HEIGHT, getStage().getHeight(), SIZING_DELTA, \"Window failed to restore size set while fullscreened\");\n@@ -142,4 +136,4 @@\n-        assertEquals(WIDTH, getStage().getWidth(), \"Stage's width should have remained\");\n-        assertEquals(HEIGHT, getStage().getHeight(), \"Stage's height should have remained\");\n-        assertEquals(POS_X, getStage().getX(), \"Stage's X position should have remained\");\n-        assertEquals(POS_Y, getStage().getY(), \"Stage's Y position should have remained\");\n+        assertEquals(WIDTH, getStage().getWidth(), SIZING_DELTA, \"Stage's width should have remained\");\n+        assertEquals(HEIGHT, getStage().getHeight(), SIZING_DELTA, \"Stage's height should have remained\");\n+        assertEquals(POS_X, getStage().getX(), POSITION_DELTA,  \"Stage's X position should have remained\");\n+        assertEquals(POS_Y, getStage().getY(), POSITION_DELTA, \"Stage's Y position should have remained\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/FullScreenTest.java","additions":22,"deletions":28,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    @EnumSource(value = StageStyle.class, mode = EnumSource.Mode.INCLUDE, names = {\"UNDECORATED\", \"TRANSPARENT\"})\n+    @EnumSource(names = {\"UNDECORATED\", \"TRANSPARENT\"})\n@@ -58,1 +58,1 @@\n-        Util.doTimeLine(300,\n+        Util.doTimeLine(SHORT_WAIT,\n@@ -67,1 +67,1 @@\n-        Util.sleep(300);\n+        Util.sleep(SHORT_WAIT);\n@@ -69,2 +69,2 @@\n-        assertEquals(POS_X, getStage().getX(), \"Stage maximized position changed\");\n-        assertEquals(POS_Y, getStage().getY(), \"Stage maximized position changed\");\n+        assertEquals(POS_X, getStage().getX(), POSITION_DELTA, \"Stage maximized position changed\");\n+        assertEquals(POS_Y, getStage().getY(), POSITION_DELTA, \"Stage maximized position changed\");\n@@ -74,3 +74,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n@@ -80,1 +78,1 @@\n-        Util.doTimeLine(300,\n+        Util.doTimeLine(SHORT_WAIT,\n@@ -85,1 +83,1 @@\n-        Util.sleep(300);\n+        Util.sleep(SHORT_WAIT);\n@@ -90,3 +88,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n@@ -95,1 +91,1 @@\n-        Util.sleep(300);\n+        Util.sleep(SHORT_WAIT);\n@@ -101,1 +97,1 @@\n-        Util.sleep(300);\n+        Util.sleep(SHORT_WAIT);\n@@ -106,4 +102,4 @@\n-        assertEquals(WIDTH, getStage().getWidth(), \"Stage's width should have remained\");\n-        assertEquals(HEIGHT, getStage().getHeight(), \"Stage's height should have remained\");\n-        assertEquals(POS_X, getStage().getX(), \"Stage's X position should have remained\");\n-        assertEquals(POS_Y, getStage().getY(), \"Stage's Y position should have remained\");\n+        assertEquals(WIDTH, getStage().getWidth(), SIZING_DELTA, \"Stage's width should have remained\");\n+        assertEquals(HEIGHT, getStage().getHeight(), SIZING_DELTA, \"Stage's height should have remained\");\n+        assertEquals(POS_X, getStage().getX(), POSITION_DELTA, \"Stage's X position should have remained\");\n+        assertEquals(POS_Y, getStage().getY(), POSITION_DELTA, \"Stage's Y position should have remained\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/MaximizeTest.java","additions":15,"deletions":19,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -73,3 +73,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n@@ -84,1 +82,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -92,3 +90,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n@@ -104,1 +100,1 @@\n-        Util.sleep(1000);\n+        Util.sleep(LONG_WAIT);\n@@ -111,3 +107,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n@@ -126,1 +120,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -128,2 +122,2 @@\n-        assertEquals(NEW_WIDTH, getStage().getWidth(), \"Stage should have resized\");\n-        assertEquals(NEW_HEIGHT, getStage().getHeight(), \"Stage should have resized\");\n+        assertEquals(NEW_WIDTH, getStage().getWidth(), SIZING_DELTA, \"Stage should have resized\");\n+        assertEquals(NEW_HEIGHT, getStage().getHeight(), SIZING_DELTA, \"Stage should have resized\");\n@@ -133,4 +127,2 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n-    void testMaximizeMaxSize(StageStyle stageStyle) {\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n+    void testMaxSize(StageStyle stageStyle) {\n@@ -139,2 +131,0 @@\n-            s.setWidth(WIDTH);\n-            s.setHeight(HEIGHT);\n@@ -145,10 +135,1 @@\n-        Util.doTimeLine(500,\n-                () -> getStage().setMaximized(true),\n-                () -> getStage().isMaximized(),\n-                () -> {\n-                    assertTrue(getStage().getWidth() > MAX_WIDTH, \"Stage width should be maximized\");\n-                    assertTrue(getStage().getHeight() > MAX_HEIGHT, \"Stage width should be maximized\");\n-                },\n-                () -> getStage().setMaximized(false));\n-\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -156,15 +137,3 @@\n-        assertEquals(WIDTH, getStage().getWidth(), \"Stage width should have been restored\");\n-        assertEquals(HEIGHT, getStage().getHeight(), \"Stage height should have been restored\");\n-    }\n-\n-    @ParameterizedTest(name = PARAMETERIZED_TEST_DISPLAY)\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n-    void testFullScreenMaxSize(StageStyle stageStyle) {\n-        setupStageWithStyle(stageStyle, s -> {\n-            s.initStyle(stageStyle);\n-            s.setWidth(WIDTH);\n-            s.setHeight(HEIGHT);\n-            s.setMaxWidth(MAX_WIDTH);\n-            s.setMaxHeight(MAX_HEIGHT);\n+        Util.runAndWait(() -> {\n+            getStage().setWidth(NEW_WIDTH);\n+            getStage().setHeight(NEW_HEIGHT);\n@@ -173,25 +142,1 @@\n-        Util.doTimeLine(500,\n-                () -> getStage().setFullScreen(true),\n-                () -> getStage().isFullScreen(),\n-                () -> {\n-                    assertTrue(getStage().getWidth() > MAX_WIDTH, \"Stage width should be maximized\");\n-                    assertTrue(getStage().getHeight() > MAX_HEIGHT, \"Stage width should be maximized\");\n-                },\n-                () -> getStage().setFullScreen(false));\n-\n-        Util.sleep(500);\n-\n-        assertEquals(WIDTH, getStage().getWidth(), \"Stage width should have been restored\");\n-        assertEquals(HEIGHT, getStage().getHeight(), \"Stage height should have been restored\");\n-    }\n-\n-    @ParameterizedTest(name = PARAMETERIZED_TEST_DISPLAY)\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n-    void testMaxSize(StageStyle stageStyle) {\n-        setupStageWithStyle(stageStyle, s -> {\n-            s.initStyle(stageStyle);\n-            s.setMaxWidth(MAX_WIDTH);\n-            s.setMaxHeight(MAX_HEIGHT);\n-        });\n+        Util.sleep(MEDIUM_WAIT);\n@@ -199,1 +144,4 @@\n-        Util.sleep(500);\n+        assertEquals(MAX_WIDTH, getStage().getWidth(), SIZING_DELTA,\n+                \"Stage width should have been limited to max width\");\n+        assertEquals(MAX_HEIGHT, getStage().getHeight(), SIZING_DELTA,\n+                \"Stage height should have been limited to max height\");\n@@ -201,0 +149,1 @@\n+        \/\/ Reset it\n@@ -202,0 +151,2 @@\n+            getStage().setMaxWidth(Double.MAX_VALUE);\n+            getStage().setMaxHeight(Double.MAX_VALUE);\n@@ -206,1 +157,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -208,2 +159,4 @@\n-        assertEquals(MAX_WIDTH, getStage().getWidth(), \"Stage width should have been limited to max width\");\n-        assertEquals(MAX_HEIGHT, getStage().getHeight(), \"Stage height should have been limited to max height\");\n+        assertEquals(NEW_WIDTH, getStage().getWidth(), SIZING_DELTA,\n+                \"Stage width should have been accepted after removing min width\");\n+        assertEquals(NEW_HEIGHT, getStage().getHeight(), SIZING_DELTA,\n+                \"Stage height should have been accepted after removing min height\");\n@@ -213,3 +166,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n@@ -222,1 +173,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -229,1 +180,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -231,2 +182,4 @@\n-        assertEquals(MAX_WIDTH, getStage().getWidth(), \"Stage width should have been limited to max width\");\n-        assertEquals(NEW_HEIGHT, getStage().getHeight(), \"Only max width should be limited\");\n+        assertEquals(MAX_WIDTH, getStage().getWidth(), SIZING_DELTA,\n+                \"Stage width should have been limited to max width\");\n+        assertEquals(NEW_HEIGHT, getStage().getHeight(), SIZING_DELTA,\n+                \"Only max width should be limited\");\n@@ -236,3 +189,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n@@ -245,1 +196,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -252,1 +203,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -254,2 +205,4 @@\n-        assertEquals(NEW_WIDTH, getStage().getWidth(), \"Only max height should be limited\");\n-        assertEquals(MAX_HEIGHT, getStage().getHeight(), \"Stage height should have been limited to max height\");\n+        assertEquals(NEW_WIDTH, getStage().getWidth(), SIZING_DELTA,\n+                \"Only max height should be limited\");\n+        assertEquals(MAX_HEIGHT, getStage().getHeight(), SIZING_DELTA,\n+                \"Stage height should have been limited to max height\");\n@@ -259,3 +212,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n@@ -269,1 +220,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -276,1 +227,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -278,2 +229,4 @@\n-        assertEquals(MIN_WIDTH, getStage().getWidth(), \"Stage width should have been limited to min width\");\n-        assertEquals(MIN_HEIGHT, getStage().getHeight(),  \"Stage height should have been limited to min height\");\n+        assertEquals(MIN_WIDTH, getStage().getWidth(), SIZING_DELTA,\n+                \"Stage width should have been limited to min width\");\n+        assertEquals(MIN_HEIGHT, getStage().getHeight(), SIZING_DELTA,\n+                \"Stage height should have been limited to min height\");\n@@ -283,3 +236,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n@@ -292,1 +243,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -299,1 +250,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -301,2 +252,4 @@\n-        assertEquals(MIN_WIDTH, getStage().getWidth(), \"Stage width should have been limited to min width\");\n-        assertEquals(NEW_HEIGHT, getStage().getHeight(),  \"Only min width should be limited\");\n+        assertEquals(MIN_WIDTH, getStage().getWidth(), SIZING_DELTA,\n+                \"Stage width should have been limited to min width\");\n+        assertEquals(NEW_HEIGHT, getStage().getHeight(), SIZING_DELTA,\n+                \"Only min width should be limited\");\n@@ -306,3 +259,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n@@ -315,1 +266,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -322,1 +273,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -324,2 +275,4 @@\n-        assertEquals(NEW_WIDTH, getStage().getWidth(),  \"Only min height should be limited\");\n-        assertEquals(MIN_HEIGHT, getStage().getHeight(), \"Stage height should have been limited to min height\");\n+        assertEquals(NEW_WIDTH, getStage().getWidth(), SIZING_DELTA,\n+                \"Only min height should be limited\");\n+        assertEquals(MIN_HEIGHT, getStage().getHeight(), SIZING_DELTA,\n+                \"Stage height should have been limited to min height\");\n@@ -329,3 +282,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n@@ -335,1 +286,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -342,3 +293,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n@@ -351,1 +300,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -353,1 +302,1 @@\n-        assertEquals(WIDTH, getStage().getWidth(), \"Stage do not match the set width\");\n+        assertEquals(WIDTH, getStage().getWidth(), SIZING_DELTA, \"Stage do not match the set width\");\n@@ -358,3 +307,1 @@\n-    @EnumSource(value = StageStyle.class,\n-            mode = EnumSource.Mode.INCLUDE,\n-            names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\"})\n@@ -367,1 +314,1 @@\n-        Util.sleep(500);\n+        Util.sleep(MEDIUM_WAIT);\n@@ -370,1 +317,1 @@\n-        assertEquals(HEIGHT, getStage().getHeight(), \"Stage do not match the set height\");\n+        assertEquals(HEIGHT, getStage().getHeight(), SIZING_DELTA, \"Stage do not match the set height\");\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/SizingTest.java","additions":70,"deletions":123,"binary":false,"changes":193,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import javafx.scene.Parent;\n@@ -53,0 +52,6 @@\n+    protected static final int SHORT_WAIT = 300;\n+    protected static final int MEDIUM_WAIT = 500;\n+    protected static final int LONG_WAIT = 1000;\n+    protected static final double SIZING_DELTA = 1.0;\n+    protected static final double POSITION_DELTA = 1.0;\n+\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/stage\/StageTestBase.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -57,0 +57,3 @@\n+    private static final int WAIT = 1000;\n+    private static final int SHORT_WAIT = 100;\n+\n@@ -105,1 +108,1 @@\n-        sleep(1000);\n+        sleep(WAIT);\n@@ -121,1 +124,1 @@\n-        sleep(1000);\n+        sleep(WAIT);\n@@ -131,1 +134,1 @@\n-    @EnumSource(value = StageStyle.class, mode = EnumSource.Mode.INCLUDE, names = {\"DECORATED\", \"UNDECORATED\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\"})\n@@ -143,1 +146,1 @@\n-        sleep(1000);\n+        sleep(WAIT);\n@@ -160,1 +163,1 @@\n-        sleep(100);\n+        sleep(SHORT_WAIT);\n@@ -171,1 +174,1 @@\n-    @EnumSource(value = StageStyle.class, mode = EnumSource.Mode.INCLUDE, names = {\"DECORATED\", \"UNDECORATED\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\"})\n@@ -183,1 +186,1 @@\n-        sleep(1000);\n+        sleep(WAIT);\n@@ -195,1 +198,1 @@\n-        sleep(100);\n+        sleep(SHORT_WAIT);\n@@ -205,1 +208,1 @@\n-    @EnumSource(value = StageStyle.class, mode = EnumSource.Mode.INCLUDE, names = {\"DECORATED\", \"UNDECORATED\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\"})\n@@ -219,1 +222,1 @@\n-        sleep(1000);\n+        sleep(WAIT);\n@@ -231,1 +234,1 @@\n-    @EnumSource(value = StageStyle.class, mode = EnumSource.Mode.INCLUDE, names = {\"DECORATED\", \"UNDECORATED\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\"})\n@@ -244,1 +247,1 @@\n-        sleep(1000);\n+        sleep(WAIT);\n@@ -262,1 +265,1 @@\n-        sleep(100);\n+        sleep(SHORT_WAIT);\n@@ -273,1 +276,1 @@\n-    @EnumSource(value = StageStyle.class, mode = EnumSource.Mode.INCLUDE, names = {\"DECORATED\", \"UNDECORATED\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\"})\n@@ -286,1 +289,1 @@\n-        sleep(1000);\n+        sleep(WAIT);\n@@ -298,1 +301,1 @@\n-        sleep(100);\n+        sleep(SHORT_WAIT);\n@@ -308,1 +311,1 @@\n-    @EnumSource(value = StageStyle.class, mode = EnumSource.Mode.INCLUDE, names = {\"DECORATED\", \"UNDECORATED\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\"})\n@@ -312,1 +315,1 @@\n-        Util.doTimeLine(1000,\n+        Util.doTimeLine(WAIT,\n@@ -340,1 +343,1 @@\n-    @EnumSource(value = StageStyle.class, mode = EnumSource.Mode.INCLUDE, names = {\"DECORATED\", \"UNDECORATED\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\"})\n@@ -344,1 +347,1 @@\n-        Util.doTimeLine(1000,\n+        Util.doTimeLine(WAIT,\n@@ -372,1 +375,1 @@\n-    @EnumSource(value = StageStyle.class, mode = EnumSource.Mode.INCLUDE, names = {\"DECORATED\", \"UNDECORATED\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\"})\n@@ -376,1 +379,1 @@\n-        Util.doTimeLine(1000,\n+        Util.doTimeLine(WAIT,\n@@ -403,1 +406,1 @@\n-    @EnumSource(value = StageStyle.class, mode = EnumSource.Mode.INCLUDE, names = {\"DECORATED\", \"UNDECORATED\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\"})\n@@ -407,1 +410,1 @@\n-        Util.doTimeLine(1000,\n+        Util.doTimeLine(WAIT,\n@@ -432,1 +435,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageAttributesTest.java","additions":28,"deletions":25,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -52,1 +51,2 @@\n-    private static final double TOLERANCE = 0.00;\n+    private static final double TOLERANCE = 0.07;\n+    private static final int WAIT = 300;\n@@ -82,2 +82,1 @@\n-    @EnumSource(value = StageStyle.class, mode = EnumSource.Mode.INCLUDE, names = {\"UNDECORATED\", \"DECORATED\",\n-            \"UTILITY\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"UTILITY\"})\n@@ -87,1 +86,1 @@\n-        Util.doTimeLine(300,\n+        Util.doTimeLine(WAIT,\n@@ -102,2 +101,1 @@\n-    @EnumSource(value = StageStyle.class, mode = EnumSource.Mode.INCLUDE, names = {\"UNDECORATED\", \"DECORATED\",\n-            \"UTILITY\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"UTILITY\"})\n@@ -107,1 +105,1 @@\n-        Util.doTimeLine(300,\n+        Util.doTimeLine(WAIT,\n@@ -119,2 +117,1 @@\n-    @EnumSource(value = StageStyle.class, mode = EnumSource.Mode.INCLUDE, names = {\"UNDECORATED\", \"DECORATED\",\n-            \"UTILITY\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"UTILITY\"})\n@@ -124,1 +121,1 @@\n-        Util.doTimeLine(300,\n+        Util.doTimeLine(WAIT,\n@@ -136,2 +133,1 @@\n-    @EnumSource(value = StageStyle.class, mode = EnumSource.Mode.INCLUDE, names = {\"UNDECORATED\", \"DECORATED\",\n-            \"UTILITY\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"UTILITY\"})\n@@ -141,1 +137,1 @@\n-        Util.doTimeLine(300,\n+        Util.doTimeLine(WAIT,\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageLocationTest.java","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+    private static final int WAIT = 300;\n@@ -47,1 +48,1 @@\n-    @EnumSource(value = StageStyle.class, mode = EnumSource.Mode.INCLUDE, names = {\"DECORATED\", \"UNDECORATED\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\"})\n@@ -52,1 +53,1 @@\n-        Util.doTimeLine(300,\n+        Util.doTimeLine(WAIT,\n@@ -61,1 +62,1 @@\n-    @EnumSource(value = StageStyle.class, mode = EnumSource.Mode.INCLUDE, names = {\"DECORATED\", \"UNDECORATED\"})\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\"})\n@@ -66,1 +67,1 @@\n-        Util.doTimeLine(300,\n+        Util.doTimeLine(WAIT,\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageMixedSizeTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}