{"files":[{"patch":"@@ -27,1 +27,0 @@\n-import com.sun.glass.events.ViewEvent;\n@@ -108,4 +107,0 @@\n-        if (getWindow() != null && !getWindow().isVisible()) {\n-            notifyView(ViewEvent.FULLSCREEN_ENTER);\n-        }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkView.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -143,5 +143,0 @@\n-\n-        if (!isVisible()) {\n-            notifyStateChanged(WindowEvent.MAXIMIZE);\n-        }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkWindow.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -364,1 +364,1 @@\n-        LOG0(\"jViewNotifyRepaint\\n\");\n+\/\/        LOG0(\"jViewNotifyRepaint\\n\");\n@@ -373,0 +373,1 @@\n+\/\/        LOG4(\"jViewNotifyRepaint %d, %d, %d, %d\\n\", rect->x, rect->y, rect->width, rect->height);\n@@ -1242,0 +1243,1 @@\n+        notify_window_resize(GDK_WINDOW_STATE_MAXIMIZED);\n@@ -1252,0 +1254,2 @@\n+        mainEnv->CallVoidMethod(jview, jViewNotifyView, com_sun_glass_events_ViewEvent_FULLSCREEN_ENTER);\n+        CHECK_JNI_EXCEPTION(mainEnv)\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_window.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,0 +25,24 @@\n+\/*\n+ * Copyright (c) 2025 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n@@ -26,0 +50,1 @@\n+import javafx.animation.AnimationTimer;\n@@ -29,0 +54,5 @@\n+import javafx.beans.property.ReadOnlyBooleanProperty;\n+import javafx.beans.property.ReadOnlyDoubleProperty;\n+import javafx.beans.property.ReadOnlyObjectProperty;\n+import javafx.beans.property.ReadOnlyProperty;\n+import javafx.beans.property.ReadOnlyStringProperty;\n@@ -30,0 +60,1 @@\n+import javafx.beans.value.ChangeListener;\n@@ -31,0 +62,2 @@\n+import javafx.collections.ObservableList;\n+import javafx.geometry.HPos;\n@@ -32,0 +65,3 @@\n+import javafx.geometry.Pos;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.Node;\n@@ -33,0 +69,1 @@\n+import javafx.scene.control.Alert;\n@@ -34,1 +71,0 @@\n-import javafx.scene.control.ButtonType;\n@@ -38,1 +74,1 @@\n-import javafx.scene.control.Dialog;\n+import javafx.scene.control.Control;\n@@ -41,0 +77,1 @@\n+import javafx.scene.control.ScrollPane;\n@@ -43,0 +80,1 @@\n+import javafx.scene.control.Tab;\n@@ -51,0 +89,2 @@\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Priority;\n@@ -54,0 +94,3 @@\n+import javafx.stage.FileChooser;\n+import javafx.stage.Modality;\n+import javafx.stage.Screen;\n@@ -56,0 +99,1 @@\n+import javafx.util.StringConverter;\n@@ -57,0 +101,1 @@\n+import java.io.File;\n@@ -59,1 +104,2 @@\n-import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.DoubleConsumer;\n@@ -62,2 +108,1 @@\n-    private List<Stage> stages = new ArrayList<>();\n-    private Stage currentStage = null;\n+    private final ObservableList<Stage> stages = FXCollections.observableArrayList();\n@@ -66,23 +111,5 @@\n-    private final Label lblWidth = new Label();\n-    private final Label lblHeight = new Label();\n-    private final Label lblMinWidth = new Label();\n-    private final Label lblMinHeight = new Label();\n-    private final Label lblMaxWidth = new Label();\n-    private final Label lblMaxHeight = new Label();\n-    private final Label lblX = new Label();\n-    private final Label lblY = new Label();\n-    private final Label lblSceneWidth = new Label();\n-    private final Label lblSceneHeight = new Label();\n-    private final Label lblSceneX = new Label();\n-    private final Label lblSceneY = new Label();\n-    private final Label lblCurrentStage = new Label();\n-    private final ComboBox<StageStyle> cbStageStyle = new ComboBox<>(FXCollections.observableArrayList(StageStyle.values()));\n-    private final CheckBox cbIsFullScreen = new CheckBox(\"Is FullScreen\");\n-    private final CheckBox cbIsMaximized = new CheckBox(\"Is Maximized\");\n-    private final CheckBox cbIsIconified = new CheckBox(\"Is Iconified\");\n-    private final CheckBox cbIsResizable = new CheckBox(\"Is Resizable\");\n-\n-    private final Button btnMaxminize = new Button(\"Maximize\");\n-    private final Button btnFullScreen = new Button(\"FullScreen\");\n-    private final Button btnIconify = new Button(\"Iconify\");\n-    private final Button btnResizable = new Button(\"Resizable\");\n+    private final ComboBox<StageStyle> cbStageStyle =\n+            new ComboBox<>(FXCollections.observableArrayList(StageStyle.values()));\n+    private final ComboBox<Modality> cbModality = new ComboBox<>(FXCollections.observableArrayList(Modality.values()));\n+    private final ComboBox<Stage> cbOwner = new ComboBox<>();\n+\n@@ -92,2 +119,6 @@\n-    private final Button btnSelectNone = new Button(\"Select None\");\n-    private final Button btnHide = new Button(\"Hide\");\n+    private final Button btnCreateShow = new Button(\"Create\/Show\");\n+    private final Button btnSelectLast = new Button(\"Select Last\");\n+    private final Button btnSelectPrevious = new Button(\"◀\");\n+    private final Button btnSelectNone = new Button(\"None\");\n+    private final Button btnSelectNext = new Button(\"▶\");\n+    private final Button btnHide = new Button(\"Hide\/Close\");\n@@ -95,6 +126,2 @@\n-    private final Button btnSizeToScene = new Button(\"Size to scene\");\n-    private final Button btnCenterOnScreen = new Button(\"Center on screen\");\n-    private final Button btnResize = new Button(\"Resize\");\n-    private final Button btnMaxSize = new Button(\"Set Max Size\");\n-    private final Button btnUnsetMaxSize = new Button(\"Unset Max Size\");\n-    private final Button btnMove = new Button(\"Move\");\n+    private final Button btnSizeToScene = new Button(\"Size to Scene\");\n+    private final Button btnCenterOnScreen = new Button(\"Center on Screen\");\n@@ -102,1 +129,1 @@\n-    private final Button btnStack = new Button(\"Stack\");\n+    private final PropertyEditor propertyEditor = new PropertyEditor();\n@@ -105,0 +132,3 @@\n+    private final ObjectProperty<Modality> initModality = new SimpleObjectProperty<>(Modality.NONE);\n+    private final ObjectProperty<Stage> initOwner = new SimpleObjectProperty<>(null);\n+    private Stage currentStage = null;\n@@ -106,0 +136,2 @@\n+    private static final double MAX_WIDTH = 7680;\n+    private static final double MAX_HEIGHT = 4320;\n@@ -108,19 +140,14 @@\n-        boolean noStagesCreated = stages.isEmpty();\n-\n-        btnShow.setDisable(noStagesCreated);\n-        btnHide.setDisable(noStagesCreated);\n-        btnSizeToScene.setDisable(noStagesCreated);\n-        btnCenterOnScreen.setDisable(noStagesCreated);\n-        btnResize.setDisable(noStagesCreated);\n-        btnMaxSize.setDisable(noStagesCreated);\n-        btnUnsetMaxSize.setDisable(noStagesCreated);\n-        btnMove.setDisable(noStagesCreated);\n-        btnIconify.setDisable(noStagesCreated);\n-        btnMaxminize.setDisable(noStagesCreated);\n-        btnFullScreen.setDisable(noStagesCreated);\n-        btnResizable.setDisable(noStagesCreated);\n-        btnToFront.setDisable(noStagesCreated);\n-        btnToBack.setDisable(noStagesCreated);\n-        btnFocus.setDisable(noStagesCreated);\n-        btnSelectNone.setDisable(noStagesCreated);\n-        btnStack.setDisable(noStagesCreated);\n+        boolean disabled = stages.isEmpty() || currentStage == null;\n+\n+        btnShow.setDisable(disabled);\n+        btnHide.setDisable(disabled);\n+        btnSizeToScene.setDisable(disabled);\n+        btnCenterOnScreen.setDisable(disabled);\n+        btnToFront.setDisable(disabled);\n+        btnToBack.setDisable(disabled);\n+        btnFocus.setDisable(disabled);\n+        btnSelectNone.setDisable(disabled);\n+\n+        btnSelectLast.setDisable(stages.isEmpty() || currentStage == stages.getLast());\n+        btnSelectNext.setDisable(stages.isEmpty() || currentStage == null || currentStage == stages.getLast());\n+        btnSelectPrevious.setDisable(stages.isEmpty() || currentStage == null  || currentStage == stages.getFirst());\n@@ -131,36 +158,1 @@\n-            cbIsMaximized.selectedProperty().unbind();\n-            cbIsFullScreen.selectedProperty().unbind();\n-            cbIsIconified.selectedProperty().unbind();\n-            cbIsResizable.selectedProperty().unbind();\n-            lblWidth.textProperty().unbind();\n-            lblHeight.textProperty().unbind();\n-            lblMinWidth.textProperty().unbind();\n-            lblMinHeight.textProperty().unbind();\n-            lblMaxWidth.textProperty().unbind();\n-            lblMaxHeight.textProperty().unbind();\n-            lblX.textProperty().unbind();\n-            lblY.textProperty().unbind();\n-            lblSceneWidth.textProperty().unbind();\n-            lblSceneHeight.textProperty().unbind();\n-            lblSceneX.textProperty().unbind();\n-            lblSceneY.textProperty().unbind();\n-            lblCurrentStage.textProperty().unbind();\n-\n-\n-            cbIsMaximized.setSelected(false);\n-            cbIsFullScreen.setSelected(false);\n-            cbIsIconified.setSelected(false);\n-            cbIsResizable.setSelected(false);\n-            lblWidth.setText(\"Width: 0.00\");\n-            lblHeight.setText(\"Height: 0.00\");\n-            lblMinWidth.setText(\"Min Width: 0.00\");\n-            lblMinHeight.setText(\"Min Height: 0.00\");\n-            lblMaxWidth.setText(\"Max Width: 0.00\");\n-            lblMaxHeight.setText(\"Max Height: 0.00\");\n-            lblX.setText(\"X: 0.00\");\n-            lblY.setText(\"Y: 0.00\");\n-            lblSceneWidth.setText(\"Width: 0.00\");\n-            lblSceneHeight.setText(\"Height: 0.00\");\n-            lblSceneX.setText(\"X: 0.00\");\n-            lblSceneY.setText(\"Y: 0.00\");\n-            lblCurrentStage.setText(\"Current Stage: None\");\n+            propertyEditor.unbind();\n@@ -168,24 +160,1 @@\n-            Scene scene = currentStage.getScene();\n-\n-            cbIsMaximized.selectedProperty().bind(currentStage.maximizedProperty());\n-            cbIsFullScreen.selectedProperty().bind(currentStage.fullScreenProperty());\n-            cbIsIconified.selectedProperty().bind(currentStage.iconifiedProperty());\n-            cbIsResizable.selectedProperty().bind(currentStage.resizableProperty());\n-\n-\n-            lblWidth.textProperty().bind(Bindings.format(\"Width: %.2f\", currentStage.widthProperty()));\n-            lblHeight.textProperty().bind(Bindings.format(\"Height: %.2f\", currentStage.heightProperty()));\n-            lblMinWidth.textProperty().bind(Bindings.format(\"Min Width: %.2f\", currentStage.minWidthProperty()));\n-            lblMinHeight.textProperty().bind(Bindings.format(\"Min Height: %.2f\", currentStage.minHeightProperty()));\n-            lblMaxWidth.textProperty().bind(Bindings.format(\"Max Width: %.2f\", currentStage.maxWidthProperty()));\n-            lblMaxHeight.textProperty().bind(Bindings.format(\"Max Height: %.2f\", currentStage.maxHeightProperty()));\n-            lblX.textProperty().bind(Bindings.format(\"X: %.2f\", currentStage.xProperty()));\n-            lblY.textProperty().bind(Bindings.format(\"Y: %.2f\", currentStage.yProperty()));\n-            lblCurrentStage.textProperty().bind(Bindings.format(\"Current Stage: %s\", currentStage.titleProperty()));\n-\n-            if (scene != null) {\n-                lblSceneWidth.textProperty().bind(Bindings.format(\"Width: %.2f\", scene.widthProperty()));\n-                lblSceneHeight.textProperty().bind(Bindings.format(\"Height: %.2f\", scene.heightProperty()));\n-                lblSceneX.textProperty().bind(Bindings.format(\"X: %.2f\", scene.xProperty()));\n-                lblSceneY.textProperty().bind(Bindings.format(\"Y: %.2f\", scene.yProperty()));\n-            }\n+            propertyEditor.bindToStage(currentStage);\n@@ -195,1 +164,1 @@\n-    private final CheckBox cbAlwaysOnTop = new CheckBox(\"Command Always On Top\");\n+    private final CheckBox cbCommandAlwaysOnTop = new CheckBox(\"Command Always On Top\");\n@@ -200,11 +169,14 @@\n-        initStyle.bind(cbStageStyle.valueProperty());\n-        stage.setAlwaysOnTop(true);\n-\n-        cbAlwaysOnTop.setSelected(stage.isAlwaysOnTop());\n-        cbAlwaysOnTop.setOnAction(e -> stage.setAlwaysOnTop(cbAlwaysOnTop.isSelected()));\n-\n-        btnMaxminize.setOnAction(e -> {\n-            if (currentStage != null) {\n-                currentStage.setMaximized(!currentStage.isMaximized());\n-            }\n-        });\n+        cbModality.getSelectionModel().select(Modality.NONE);\n+        cbOwner.itemsProperty().bind(Bindings.createObjectBinding(() -> {\n+            ObservableList<Stage> listWithNull = FXCollections.observableArrayList();\n+            listWithNull.add(null);\n+            listWithNull.addAll(stages);\n+            return listWithNull;\n+        }, stages));\n+\n+        cbOwner.setConverter(new StringConverter<>() {\n+            @Override\n+            public String toString(Stage stage) {\n+                if (stage == null) {\n+                    return \"None\";\n+                }\n@@ -212,3 +184,1 @@\n-        btnFullScreen.setOnAction(e -> {\n-            if (currentStage != null) {\n-                currentStage.setFullScreen(!currentStage.isFullScreen());\n+                return stage.getTitle();\n@@ -216,1 +186,0 @@\n-        });\n@@ -218,3 +187,3 @@\n-        btnIconify.setOnAction(e -> {\n-            if (currentStage != null) {\n-                currentStage.setIconified(!currentStage.isIconified());\n+            @Override\n+            public Stage fromString(String string) {\n+                return null;\n@@ -224,5 +193,3 @@\n-        btnResizable.setOnAction(e -> {\n-            if (currentStage != null) {\n-                currentStage.setResizable(!currentStage.isResizable());\n-            }\n-        });\n+        initStyle.bind(cbStageStyle.valueProperty());\n+        initModality.bind(cbModality.valueProperty());\n+        initOwner.bind(cbOwner.valueProperty());\n@@ -244,0 +211,5 @@\n+        btnCreateShow.setOnAction(e -> {\n+            createTestStage();\n+            currentStage.show();\n+        });\n+\n@@ -247,0 +219,1 @@\n+            updateCommandButtonsState();\n@@ -249,4 +222,4 @@\n-        btnHide.setOnAction(e -> {\n-            if (currentStage != null) {\n-                currentStage.hide();\n-            }\n+        btnSelectLast.setOnAction(e -> {\n+            currentStage = stages.get(stages.size() - 1);\n+            updateBindings();\n+            updateCommandButtonsState();\n@@ -255,3 +228,8 @@\n-        btnShow.setOnAction(e -> {\n-            if (currentStage != null) {\n-                currentStage.show();\n+        btnSelectNext.setOnAction(e -> {\n+            if (!stages.isEmpty()) {\n+                int index = stages.indexOf(currentStage);\n+                if (index < stages.size() - 1) {\n+                    currentStage = stages.get(index + 1);\n+                    updateBindings();\n+                    updateCommandButtonsState();\n+                }\n@@ -261,3 +239,8 @@\n-        btnSizeToScene.setOnAction(e -> {\n-            if (currentStage != null) {\n-                currentStage.sizeToScene();\n+        btnSelectPrevious.setOnAction(e -> {\n+            if (!stages.isEmpty()) {\n+                int index = stages.indexOf(currentStage);\n+                if (index > 0) {\n+                    currentStage = stages.get(index - 1);\n+                    updateBindings();\n+                    updateCommandButtonsState();\n+                }\n@@ -267,1 +250,1 @@\n-        btnCenterOnScreen.setOnAction(e -> {\n+        btnHide.setOnAction(e -> {\n@@ -269,3 +252,2 @@\n-                currentStage.centerOnScreen();\n-            }\n-        });\n+                boolean isShowing = currentStage.isShowing();\n+                currentStage.hide();\n@@ -273,14 +255,5 @@\n-        btnResize.setOnAction(e -> {\n-            if (currentStage != null) {\n-                double[] dimensions = showValuesDialog(\n-                        \"Resize Stage\",\n-                        \"Width:\",\n-                        \"Height:\",\n-                        currentStage.getWidth(),\n-                        currentStage.getHeight(),\n-                        50,\n-                        2000);\n-\n-                if (dimensions != null) {\n-                    currentStage.setWidth(dimensions[0]);\n-                    currentStage.setHeight(dimensions[1]);\n+                if (!isShowing) {\n+                    stages.remove(currentStage);\n+                    currentStage = stages.isEmpty() ? null : stages.getLast();\n+                    updateCommandButtonsState();\n+                    updateBindings();\n@@ -291,1 +264,1 @@\n-        btnMaxSize.setOnAction(e -> {\n+        btnShow.setOnAction(e -> {\n@@ -293,13 +266,1 @@\n-                double[] dimensions = showValuesDialog(\n-                        \"Set Max Size\",\n-                        \"Max Width:\",\n-                        \"Max Height:\",\n-                        currentStage.getMaxWidth(),\n-                        currentStage.getMaxHeight(),\n-                        50,\n-                        2000);\n-\n-                if (dimensions != null) {\n-                    currentStage.setMaxWidth(dimensions[0]);\n-                    currentStage.setMaxHeight(dimensions[1]);\n-                }\n+                currentStage.show();\n@@ -309,1 +270,1 @@\n-        btnUnsetMaxSize.setOnAction(e -> {\n+        btnSizeToScene.setOnAction(e -> {\n@@ -311,2 +272,1 @@\n-                currentStage.setMaxWidth(Double.MAX_VALUE);\n-                currentStage.setMaxHeight(Double.MAX_VALUE);\n+                currentStage.sizeToScene();\n@@ -316,1 +276,1 @@\n-        btnMove.setOnAction(e -> {\n+        btnCenterOnScreen.setOnAction(e -> {\n@@ -318,13 +278,1 @@\n-                double[] position = showValuesDialog(\n-                        \"Move Stage\",\n-                        \"X Position:\",\n-                        \"Y Position:\",\n-                        currentStage.getX(),\n-                        currentStage.getY(),\n-                        0,\n-                        3000);\n-\n-                if (position != null) {\n-                    currentStage.setX(position[0]);\n-                    currentStage.setY(position[1]);\n-                }\n+                currentStage.centerOnScreen();\n@@ -340,15 +288,0 @@\n-        btnStack.setOnAction(e -> {\n-            if (!stages.isEmpty()) {\n-                double xOffset = 0;\n-                double yOffset = 0;\n-\n-                for (Stage stageWindow : stages) {\n-                    stageWindow.setX(xOffset);\n-                    stageWindow.setY(yOffset);\n-                    stageWindow.show();\n-                    xOffset += 50;\n-                    yOffset += 50;\n-                }\n-            }\n-        });\n-\n@@ -357,10 +290,6 @@\n-        cbIsMaximized.setDisable(true);\n-        cbIsFullScreen.setDisable(true);\n-        cbIsIconified.setDisable(true);\n-        cbIsResizable.setDisable(true);\n-\n-        FlowPane commandPane = new FlowPane(cbStageStyle, btnCreate, btnShow, btnHide, btnSizeToScene,\n-                btnCenterOnScreen, btnResize, btnMaxSize, btnUnsetMaxSize, btnMove, btnIconify, btnMaxminize,\n-                btnFullScreen, btnResizable, btnToFront, btnToBack, btnStack, btnFocus, btnSelectNone, cbAlwaysOnTop);\n-        commandPane.setHgap(5);\n-        commandPane.setVgap(5);\n+        FlowPane flow0 = new FlowPane(label(\"Style: \", cbStageStyle), label(\"Modality: \", cbModality),\n+                label(\"Owner: \", cbOwner));\n+        FlowPane flow1 = new FlowPane(btnCreate, btnShow, btnCreateShow, btnHide);\n+        FlowPane flow2 = new FlowPane(btnCenterOnScreen, btnSizeToScene);\n+        FlowPane flow3 = new FlowPane(btnToFront, btnToBack, btnSelectNone, btnSelectLast, btnSelectPrevious,\n+                btnSelectNext, btnFocus);\n@@ -368,0 +297,4 @@\n+        List.of(flow0, flow1, flow2, flow3).forEach(flow -> {\n+            flow.setHgap(5);\n+            flow.setVgap(5);\n+        });\n@@ -369,8 +302,3 @@\n-        VBox stagePropertiesBox = new VBox(\n-                lblCurrentStage,\n-                cbIsIconified, cbIsMaximized,\n-                cbIsFullScreen, cbIsResizable,\n-                lblMinWidth, lblMinHeight, lblMaxWidth, lblMaxHeight,\n-                lblWidth, lblHeight, lblX, lblY\n-        );\n-        stagePropertiesBox.setSpacing(5);\n+        VBox commandPane = new VBox(cbCommandAlwaysOnTop, flow0, flow1, flow2, flow3);\n+        commandPane.setSpacing(5);\n+        commandPane.setFillWidth(true);\n@@ -378,4 +306,2 @@\n-        VBox scenePropertiesBox = new VBox(\n-                lblSceneWidth, lblSceneHeight, lblSceneX, lblSceneY\n-        );\n-        scenePropertiesBox.setSpacing(5);\n+        TitledPane commandPaneTitledPane = new TitledPane(\"Commands\", commandPane);\n+        commandPaneTitledPane.setCollapsible(false);\n@@ -383,2 +309,2 @@\n-        TitledPane stagePropertiesPane = new TitledPane(\"Stage Properties:\", stagePropertiesBox);\n-        stagePropertiesPane.setCollapsible(false);\n+        TitledPane editorTitledPane = new TitledPane(\"Properties\", propertyEditor);\n+        editorTitledPane.setCollapsible(false);\n@@ -386,2 +312,3 @@\n-        TitledPane scenePropertiesPane = new TitledPane(\"Scene Properties:\", scenePropertiesBox);\n-        scenePropertiesPane.setCollapsible(false);\n+        Tab editorTab = new Tab(\"Edit\");\n+        editorTab.setClosable(false);\n+        editorTab.setContent(editorTitledPane);\n@@ -390,3 +317,2 @@\n-                commandPane,\n-                stagePropertiesPane,\n-                scenePropertiesPane\n+                commandPaneTitledPane,\n+                editorTitledPane\n@@ -397,1 +323,2 @@\n-        Scene scene = new Scene(root, 500, 600);\n+\n+        Scene scene = new Scene(root);\n@@ -400,0 +327,24 @@\n+        stage.setOnShown(e -> {\n+            Rectangle2D stageBounds = new Rectangle2D(\n+                    stage.getX(),\n+                    stage.getY(),\n+                    stage.getWidth(),\n+                    stage.getHeight()\n+            );\n+\n+            Screen currentScreen = Screen.getScreens()\n+                    .stream()\n+                    .filter(screen -> screen.getVisualBounds().intersects(stageBounds))\n+                    .findFirst()\n+                    .orElse(Screen.getPrimary());\n+\n+            Rectangle2D visualBounds = currentScreen.getVisualBounds();\n+            stage.setHeight(visualBounds.getHeight());\n+\n+            double x = visualBounds.getMaxX() - stage.getWidth();\n+            double y = visualBounds.getMaxY() - stage.getHeight();\n+\n+            stage.setX(x);\n+            stage.setY(y);\n+        });\n+        stage.setWidth(500);\n@@ -403,0 +354,7 @@\n+    private HBox label(String label, Control control) {\n+        HBox hbox = new HBox(new Label(label), control);\n+        hbox.setSpacing(5);\n+        hbox.setAlignment(Pos.CENTER_LEFT);\n+        return hbox;\n+    }\n+\n@@ -431,0 +389,2 @@\n+        newStage.initModality(initModality.getValue());\n+        newStage.initOwner(initOwner.getValue());\n@@ -446,1 +406,1 @@\n-                currentStage = stages.isEmpty() ? null : stages.get(stages.size() - 1);\n+                currentStage = stages.isEmpty() ? null : stages.getLast();\n@@ -456,44 +416,0 @@\n-    private double[] showValuesDialog(String title, String firstLabel, String secondLabel,\n-                                      double defaultFirst, double defaultSecond,\n-                                      double minValue, double maxValue) {\n-        Dialog<double[]> dialog = new Dialog<>();\n-        dialog.setTitle(title);\n-        dialog.setHeaderText(\"Enter values:\");\n-\n-        dialog.getDialogPane().getButtonTypes().addAll(ButtonType.OK, ButtonType.CANCEL);\n-\n-        Spinner<Double> firstSpinner = new Spinner<>();\n-        SpinnerValueFactory.DoubleSpinnerValueFactory firstValueFactory =\n-                new SpinnerValueFactory.DoubleSpinnerValueFactory(minValue, maxValue, defaultFirst, 1.0);\n-        firstSpinner.setValueFactory(firstValueFactory);\n-        firstSpinner.setEditable(true);\n-\n-        Spinner<Double> secondSpinner = new Spinner<>();\n-        SpinnerValueFactory.DoubleSpinnerValueFactory secondValueFactory =\n-                new SpinnerValueFactory.DoubleSpinnerValueFactory(minValue, maxValue, defaultSecond, 1.0);\n-        secondSpinner.setValueFactory(secondValueFactory);\n-        secondSpinner.setEditable(true);\n-\n-        GridPane grid = new GridPane();\n-        grid.setHgap(10);\n-        grid.setVgap(10);\n-        grid.setPadding(new Insets(20, 150, 10, 10));\n-\n-        grid.add(new Label(firstLabel), 0, 0);\n-        grid.add(firstSpinner, 1, 0);\n-        grid.add(new Label(secondLabel), 0, 1);\n-        grid.add(secondSpinner, 1, 1);\n-\n-        dialog.getDialogPane().setContent(grid);\n-\n-        dialog.setResultConverter(dialogButton -> {\n-            if (dialogButton == ButtonType.OK) {\n-                return new double[] {firstSpinner.getValue(), secondSpinner.getValue()};\n-            }\n-            return null;\n-        });\n-\n-        Optional<double[]> result = dialog.showAndWait();\n-        return result.orElse(null);\n-    }\n-\n@@ -505,2 +421,1 @@\n-        if (currentStage != null) {\n-            StackPane root = new StackPane();\n+        StackPane root = new StackPane();\n@@ -508,2 +423,2 @@\n-            TextField textField = new TextField();\n-            textField.setPromptText(\"Enter text here\");\n+        TextField textField = new TextField();\n+        textField.setPromptText(\"Enter text here\");\n@@ -511,3 +426,3 @@\n-            root.getChildren().add(textField);\n-            setupContextMenu(root);\n-            Scene scene = new Scene(root, 300, 200);\n+        root.getChildren().add(textField);\n+        setupContextMenu(root);\n+        Scene scene = new Scene(root, 300, 200);\n@@ -515,3 +430,1 @@\n-            currentStage.setScene(scene);\n-            updateSceneBindings(scene);\n-        }\n+        currentStage.setScene(scene);\n@@ -521,13 +434,64 @@\n-        if (currentStage != null) {\n-            StackPane root = new StackPane();\n-\n-            StackPane coloredBox = new StackPane();\n-            coloredBox.setBackground(Background.fill(Color.CORNFLOWERBLUE));\n-\n-            Tooltip tooltip = new Tooltip(\"The quick brown fox jumps over the lazy dog.\");\n-            Tooltip.install(coloredBox, tooltip);\n-            root.getChildren().add(coloredBox);\n-            setupContextMenu(root);\n-            Scene scene = new Scene(root, 300, 200);\n-            currentStage.setScene(scene);\n-            updateSceneBindings(scene);\n+        StackPane root = new StackPane();\n+\n+        StackPane coloredBox = new StackPane();\n+        coloredBox.setBackground(Background.fill(Color.CORNFLOWERBLUE));\n+\n+        Tooltip tooltip = new Tooltip(\"The quick brown fox jumps over the lazy dog.\");\n+        Tooltip.install(coloredBox, tooltip);\n+        root.getChildren().add(coloredBox);\n+        setupContextMenu(root);\n+        Scene scene = new Scene(root, 300, 200);\n+        currentStage.setScene(scene);\n+    }\n+\n+    private void createRainbowSceneAnimation() {\n+        Label fpsLabel = new Label(\"FPS: 0\");\n+        fpsLabel.setStyle(\"-fx-font-size: 20; -fx-text-fill: white; -fx-background-color: rgba(0,0,0,0.5); -fx-padding: 5;\");\n+\n+        StackPane root = new StackPane();\n+        root.getChildren().add(fpsLabel);\n+        StackPane.setAlignment(fpsLabel, Pos.TOP_RIGHT);\n+\n+        Scene scene = new Scene(root, 600, 400);\n+\n+        final double[] hue = {0};\n+\n+        AnimationTimer timer = new AnimationTimer() {\n+            private long lastFpsTime = 0;\n+            private int frameCount = 0;\n+\n+            @Override\n+            public void handle(long now) {\n+                hue[0] += 0.5;\n+                if (hue[0] >= 360) {\n+                    hue[0] = 0;\n+                }\n+                Color color = Color.hsb(hue[0], 1.0, 1.0);\n+                root.setBackground(new Background(new BackgroundFill(color, CornerRadii.EMPTY, Insets.EMPTY)));\n+\n+                frameCount++;\n+                if (lastFpsTime == 0) {\n+                    lastFpsTime = now;\n+                } else if (now - lastFpsTime >= 1_000_000_000) {\n+                    double fps = frameCount * 1e9 \/ (now - lastFpsTime);\n+                    fpsLabel.setText(String.format(\"FPS: %.1f\", fps));\n+                    frameCount = 0;\n+                    lastFpsTime = now;\n+                }\n+            }\n+        };\n+\n+        timer.start();\n+        setupContextMenu(root);\n+\n+        currentStage.setScene(scene);\n+    }\n+\n+    private void createAlert(boolean windowModal) {\n+        Alert alert = new Alert(Alert.AlertType.INFORMATION);\n+        alert.setTitle(\"Alert\");\n+        alert.setHeaderText(\"The quick brown fox jumps over the lazy dog.\");\n+\n+        if (windowModal) {\n+            alert.initModality(Modality.WINDOW_MODAL);\n+            alert.initOwner(currentStage);\n@@ -535,0 +499,2 @@\n+\n+        alert.showAndWait();\n@@ -537,5 +503,13 @@\n-    private void updateSceneBindings(Scene scene) {\n-        lblSceneWidth.textProperty().bind(Bindings.format(\"Width: %.2f\", scene.widthProperty()));\n-        lblSceneHeight.textProperty().bind(Bindings.format(\"Height: %.2f\", scene.heightProperty()));\n-        lblSceneX.textProperty().bind(Bindings.format(\"X: %.2f\", scene.xProperty()));\n-        lblSceneY.textProperty().bind(Bindings.format(\"Y: %.2f\", scene.yProperty()));\n+    private void createFileOpen() {\n+        FileChooser fileChooser = new FileChooser();\n+        fileChooser.setTitle(\"Open Resource File\");\n+        fileChooser.getExtensionFilters().addAll(\n+                new FileChooser.ExtensionFilter(\"All Files\", \"*.*\")\n+        );\n+        File file = fileChooser.showOpenDialog(currentStage);\n+\n+        if (file != null) {\n+            new Alert(Alert.AlertType.INFORMATION, \"File selected: \" + file.getAbsolutePath()).showAndWait();\n+        } else {\n+            new Alert(Alert.AlertType.WARNING, \"No file selected\").showAndWait();\n+        }\n@@ -544,1 +518,1 @@\n-    private void setupContextMenu(StackPane root) {\n+    private void setupContextMenu(Node root) {\n@@ -546,1 +520,1 @@\n-        MenuItem textFieldMenuItem = new MenuItem(\"Create Scene with TextField\");\n+        MenuItem textFieldMenuItem = new MenuItem(\"Scene with TextField\");\n@@ -548,1 +522,1 @@\n-        MenuItem tooltipBoxMenuItem = new MenuItem(\"Create Scene with Tooltip Box\");\n+        MenuItem tooltipBoxMenuItem = new MenuItem(\"Scene with Tooltip Box\");\n@@ -550,1 +524,12 @@\n-        contextMenu.getItems().addAll(textFieldMenuItem, tooltipBoxMenuItem);\n+        MenuItem rainbowSceneMenuItem = new MenuItem(\"Rainbow Scene\");\n+        rainbowSceneMenuItem.setOnAction(e -> createRainbowSceneAnimation());\n+        MenuItem alertMenuItem = new MenuItem(\"Alert - Application Modal\");\n+        alertMenuItem.setOnAction(e -> createAlert(false));\n+        MenuItem alertWindowModalMenuItem = new MenuItem(\"Alert - Window Modal\");\n+        alertWindowModalMenuItem.setOnAction(e -> createAlert(true));\n+        MenuItem fileOpenMenuItem = new MenuItem(\"File Open\");\n+        fileOpenMenuItem.setOnAction(e -> createFileOpen());\n+\n+\n+        contextMenu.getItems().addAll(textFieldMenuItem, tooltipBoxMenuItem,\n+                rainbowSceneMenuItem, alertMenuItem, alertWindowModalMenuItem, fileOpenMenuItem);\n@@ -553,0 +538,158 @@\n+\n+    class PropertyEditor extends VBox {\n+        private final PropertyEditorPane stagePane = new PropertyEditorPane(\"Stage\");\n+        private final PropertyEditorPane scenePane = new PropertyEditorPane(\"Scene\");\n+\n+        private final ObjectProperty<Scene> sceneProperty = new SimpleObjectProperty<>();\n+\n+        PropertyEditor() {\n+            getChildren().addAll(stagePane, scenePane);\n+            stagePane.setMaxHeight(550);\n+            setFillWidth(true);\n+        }\n+\n+        public void bindToStage(Stage stage) {\n+            unbind();\n+\n+            stagePane.addStringProperty(\"Title\", stage.titleProperty(), stage::setTitle);\n+            stagePane.addBooleanProperty(\"Always OnTop\", stage.alwaysOnTopProperty(), stage::setAlwaysOnTop);\n+            stagePane.addBooleanProperty(\"FullScreen\", stage.fullScreenProperty(), stage::setFullScreen);\n+            stagePane.addBooleanProperty(\"Maximized\", stage.maximizedProperty(), stage::setMaximized);\n+            stagePane.addBooleanProperty(\"Iconified\", stage.iconifiedProperty(), stage::setIconified);\n+            stagePane.addBooleanProperty(\"Resizeable\", stage.resizableProperty(), stage::setResizable);\n+            stagePane.addDoublePropery(\"X\", stage.xProperty(), stage::setX, 0, MAX_WIDTH * 2, 1.0);\n+            stagePane.addDoublePropery(\"Y\", stage.yProperty(), stage::setY, 0, MAX_HEIGHT * 2, 1.0);\n+            stagePane.addDoublePropery(\"Width\", stage.widthProperty(), stage::setWidth, 1, MAX_WIDTH, 1.0);\n+            stagePane.addDoublePropery(\"Height\", stage.heightProperty(), stage::setHeight, 1, MAX_HEIGHT, 1.0);\n+            stagePane.addDoublePropery(\"Min Width\", stage.minWidthProperty(), stage::setMinWidth, 1, MAX_WIDTH, 1.0);\n+            stagePane.addDoublePropery(\"Min Height\", stage.minHeightProperty(), stage::setMinHeight, 1, MAX_HEIGHT,\n+                    1.0);\n+            stagePane.addDoublePropery(\"Max Width\", stage.maxWidthProperty(), stage::setMaxWidth, 1, Double.MAX_VALUE,\n+                    1.0);\n+            stagePane.addDoublePropery(\"Max Height\", stage.maxHeightProperty(), stage::setMaxHeight, 1,\n+                    Double.MAX_VALUE, 1.0);\n+            stagePane.addDoublePropery(\"RenderScale X\", stage.renderScaleXProperty(), stage::setRenderScaleX, 0, 2,\n+                    0.25);\n+            stagePane.addDoublePropery(\"RenderScale Y\", stage.renderScaleYProperty(), stage::setRenderScaleY, 0, 2,\n+                    0.25);\n+            stagePane.addDoublePropery(\"Opacity\", stage.opacityProperty(), stage::setOpacity, 0, 1, 0.1);\n+\n+            sceneProperty.bind(stage.sceneProperty());\n+            bindScene(stage.getScene());\n+\n+            sceneProperty.addListener((obs, oldScene, newScene) -> {\n+                if (newScene != null) {\n+                    bindScene(newScene);\n+                }\n+            });\n+        }\n+\n+        private void bindScene(Scene scene) {\n+            scenePane.unbind();\n+            scenePane.addDoubleLabelProperty(\"X\", scene.xProperty());\n+            scenePane.addDoubleLabelProperty(\"Y\", scene.yProperty());\n+            scenePane.addDoubleLabelProperty(\"Width\", scene.widthProperty());\n+            scenePane.addDoubleLabelProperty(\"Height\", scene.heightProperty());\n+        }\n+\n+        public void unbind() {\n+            scenePane.unbind();\n+            stagePane.unbind();\n+        }\n+    }\n+\n+    class PropertyEditorPane extends TitledPane {\n+        private int currentRow = 0;\n+        private final List<Runnable> clearChangeListeners = new ArrayList<>();\n+        private final GridPane gridPane = new GridPane();\n+\n+        PropertyEditorPane(String title) {\n+            setText(title);\n+            ScrollPane propertiesScrollPane = new ScrollPane(propertyEditor);\n+            propertiesScrollPane.setFitToWidth(true);\n+            propertiesScrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);\n+            propertiesScrollPane.setContent(gridPane);\n+\n+            gridPane.setHgap(5);\n+            gridPane.setVgap(5);\n+            gridPane.setPadding(new Insets(10));\n+\n+            setContent(propertiesScrollPane);\n+        }\n+\n+        private <T> void addListener(ReadOnlyProperty<T> property, ChangeListener<T> changeListener) {\n+            property.addListener(changeListener);\n+            clearChangeListeners.add(() -> property.removeListener(changeListener));\n+        }\n+\n+        private void addLabel(String label) {\n+            Label lbl = new Label(label);\n+            gridPane.add(lbl, 0, currentRow);\n+            GridPane.setHgrow(lbl, Priority.SOMETIMES);\n+            GridPane.setHalignment(lbl, HPos.RIGHT);\n+        }\n+\n+        public void addDoubleLabelProperty(String label, ReadOnlyDoubleProperty property) {\n+            addLabel(label);\n+            Label lbl = new Label();\n+            lbl.textProperty().bind(property.asString(\"%.2f\"));\n+            gridPane.add(lbl, 1, currentRow);\n+            GridPane.setHgrow(lbl, Priority.ALWAYS);\n+            currentRow++;\n+        }\n+\n+        public void addDoublePropery(String label, ReadOnlyDoubleProperty property, DoubleConsumer setConsumer,\n+                                      double min, double max,\n+                                      double amountToStepBy) {\n+            addLabel(label);\n+            Spinner<Double> spinner = new Spinner<>();\n+            spinner.setEditable(true);\n+            SpinnerValueFactory.DoubleSpinnerValueFactory spinnerValueFactory =\n+                    new SpinnerValueFactory.DoubleSpinnerValueFactory(min, max, property.get(), amountToStepBy);\n+            spinner.setValueFactory(spinnerValueFactory);\n+            gridPane.add(spinner, 1, currentRow);\n+            GridPane.setHgrow(spinner, Priority.ALWAYS);\n+\n+            addListener(property, (obs, oldValue, newValue) -> {\n+                if (!newValue.equals(spinner.getValue())) {\n+                    spinnerValueFactory.setValue((Double) newValue);\n+                }\n+            });\n+\n+            spinner.valueProperty().addListener((observable, oldValue, newValue) -> {\n+                if (!newValue.equals(oldValue)) {\n+                    setConsumer.accept(newValue);\n+                }\n+            });\n+\n+            currentRow++;\n+        }\n+\n+        public void addStringProperty(String label, ReadOnlyStringProperty property, Consumer<String> setConsumer) {\n+            addLabel(label);\n+            TextField textField = new TextField(property.get());\n+            gridPane.add(textField, 1, currentRow);\n+            GridPane.setHgrow(textField, Priority.ALWAYS);\n+\n+            addListener(property, (obs, oldValue, newValue) -> textField.setText(newValue));\n+            textField.setOnAction(e -> setConsumer.accept(textField.getText()));\n+            currentRow++;\n+        }\n+\n+        public void addBooleanProperty(String label, ReadOnlyBooleanProperty property, Consumer<Boolean> setConsumer) {\n+            addLabel(label);\n+            CheckBox checkBox = new CheckBox();\n+            checkBox.setSelected(property.get());\n+            gridPane.add(checkBox, 1, currentRow);\n+\n+            addListener(property, (obs, oldValue, newValue) -> checkBox.setSelected(newValue));\n+            checkBox.setOnAction(e -> setConsumer.accept(checkBox.isSelected()));\n+            currentRow++;\n+        }\n+\n+        public void unbind() {\n+            clearChangeListeners.forEach(Runnable::run);\n+            gridPane.getChildren().clear();\n+            currentRow = 0;\n+        }\n+    }\n","filename":"tests\/manual\/stage\/TestStage.java","additions":464,"deletions":321,"binary":false,"changes":785,"status":"modified"}]}