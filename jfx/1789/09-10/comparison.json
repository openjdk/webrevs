{"files":[{"patch":"@@ -37,1 +37,0 @@\n-import test.util.Util;\n@@ -42,1 +41,0 @@\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n@@ -309,126 +307,0 @@\n-\n-    @ParameterizedTest(name = PARAMETERIZED_TEST_DISPLAY)\n-    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\"})\n-    void testStageStatePrecedenceOrderIconifiedMaximizedBeforeShow(StageStyle stageStyle) throws InterruptedException {\n-        setupStages(false, false, stageStyle);\n-\n-        Util.doTimeLine(WAIT,\n-                () -> {\n-                    Color color = getColor(200, 200);\n-                    assertColorEquals(BOTTOM_COLOR, color, TOLERANCE);\n-\n-                    topStage.setIconified(true);\n-                    topStage.setMaximized(true);\n-                    topStage.show();\n-                },\n-                () -> {\n-                    assertTrue(topStage.isIconified());\n-                    assertTrue(topStage.isMaximized());\n-\n-                    Color color = getColor(200, 200);\n-                    \/\/ Should remain iconified\n-                    assertColorEquals(BOTTOM_COLOR, color, TOLERANCE);\n-                },\n-                () -> topStage.setIconified(false),\n-                () -> {\n-                    assertTrue(topStage.isMaximized());\n-                    assertFalse(topStage.isIconified());\n-\n-                    Color color = getColor(200, 200);\n-                    assertColorEquals(TOP_COLOR, color, TOLERANCE);\n-                });\n-    }\n-\n-    @ParameterizedTest(name = PARAMETERIZED_TEST_DISPLAY)\n-    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\"})\n-    void testStageStatePrecedenceOrderIconifiedFullScreenBeforeShow(StageStyle stageStyle) throws InterruptedException {\n-        setupStages(false, false, stageStyle);\n-\n-        Util.doTimeLine(WAIT,\n-                () -> {\n-                    Color color = getColor(200, 200);\n-                    assertColorEquals(BOTTOM_COLOR, color, TOLERANCE);\n-\n-                    topStage.setIconified(true);\n-                    topStage.setFullScreen(true);\n-                    topStage.show();\n-                },\n-                () -> {\n-                    assertTrue(topStage.isIconified());\n-                    assertTrue(topStage.isFullScreen());\n-\n-                    Color color = getColor(200, 200);\n-                    \/\/ Should remain iconified\n-                    assertColorEquals(BOTTOM_COLOR, color, TOLERANCE);\n-                },\n-                () -> topStage.setIconified(false),\n-                () -> {\n-                    assertTrue(topStage.isFullScreen());\n-                    assertFalse(topStage.isIconified());\n-\n-                    Color color = getColor(200, 200);\n-                    assertColorEquals(TOP_COLOR, color, TOLERANCE);\n-                });\n-    }\n-\n-    @ParameterizedTest(name = PARAMETERIZED_TEST_DISPLAY)\n-    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\"})\n-    void testStageStatePrecedenceOrderIconifiedMaximizedAfterShow(StageStyle stageStyle) throws InterruptedException {\n-        setupStages(true, true, stageStyle);\n-\n-        Util.doTimeLine(WAIT,\n-                () -> {\n-                    Color color = getColor(200, 200);\n-                    assertColorEquals(TOP_COLOR, color, TOLERANCE);\n-\n-                    topStage.setIconified(true);\n-                    topStage.setMaximized(true);\n-                },\n-                () -> {\n-                    assertTrue(topStage.isMaximized());\n-                    assertTrue(topStage.isIconified());\n-\n-                    Color color = getColor(200, 200);\n-                    \/\/ Should remain iconified\n-                    assertColorEquals(BOTTOM_COLOR, color, TOLERANCE);\n-                },\n-                () -> topStage.setIconified(false),\n-                () -> {\n-                    assertTrue(topStage.isMaximized());\n-                    assertFalse(topStage.isIconified());\n-\n-                    Color color = getColor(200, 200);\n-                    assertColorEquals(TOP_COLOR, color, TOLERANCE);\n-                });\n-    }\n-\n-    @ParameterizedTest(name = PARAMETERIZED_TEST_DISPLAY)\n-    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\"})\n-    void testStageStatePrecedenceOrderIconifiedFullScreenAfterShow(StageStyle stageStyle) throws InterruptedException {\n-        setupStages(true, true, stageStyle);\n-\n-        Util.doTimeLine(WAIT,\n-                () -> {\n-                    Color color = getColor(200, 200);\n-                    assertColorEquals(TOP_COLOR, color, TOLERANCE);\n-\n-                    topStage.setIconified(true);\n-                    topStage.setFullScreen(true);\n-                },\n-                () -> {\n-                    assertTrue(topStage.isFullScreen());\n-                    assertTrue(topStage.isIconified());\n-\n-                    Color color = getColor(200, 200);\n-                    \/\/ Should remain iconified\n-                    assertColorEquals(BOTTOM_COLOR, color, TOLERANCE);\n-                },\n-                () -> topStage.setIconified(false),\n-                () -> {\n-                    assertTrue(topStage.isFullScreen());\n-                    assertFalse(topStage.isIconified());\n-\n-                    Color color = getColor(200, 200);\n-                    assertColorEquals(TOP_COLOR, color, TOLERANCE);\n-                });\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageAttributesTest.java","additions":0,"deletions":128,"binary":false,"changes":128,"status":"modified"}]}