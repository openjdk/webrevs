{"files":[{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.stage;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Group;\n+import javafx.scene.Scene;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.paint.Color;\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Stage;\n+import javafx.stage.WindowEvent;\n+import test.util.Util;\n+import test.robot.testharness.VisualTestBase;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+\n+public class StageFocusTest extends VisualTestBase {\n+\n+    static CountDownLatch startupLatch;\n+    static CountDownLatch eventReceivedLatch;\n+\n+    static final int STAGE_SIZE = 200;\n+\n+    static final int STAGE_X = 100;\n+    static final int STAGE_Y = 100;\n+\n+    static final int TIMEOUT = 2000; \/\/ ms\n+    static final double TOLERANCE = 0.07;\n+\n+    private Stage theStage = null;\n+\n+    @BeforeAll\n+    public static void setupOnce() throws Exception {\n+        startupLatch = new CountDownLatch(1);\n+        eventReceivedLatch = new CountDownLatch(1);\n+    }\n+\n+    \/**\n+     * Checks whether Stage is actually shown when calling show()\n+     *\n+     * Meant as a \"canary\" test of sorts to ensure other tests relying on\n+     * Stage being actually shown and on foreground work fine.\n+     *\/\n+    @Test\n+    public void testStageHasFocusAfterShow() throws InterruptedException {\n+        Util.runAndWait(() -> {\n+            theStage = getStage(false);\n+\n+            Group root = new Group();\n+            Scene scene = new Scene(root, STAGE_SIZE, STAGE_SIZE);\n+            scene.setFill(Color.LIGHTGREEN);\n+            scene.setOnKeyPressed(e -> {\n+                if (e.getCode() == KeyCode.A) {\n+                    eventReceivedLatch.countDown();\n+                }\n+            });\n+\n+            theStage.setScene(scene);\n+            theStage.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> {\n+                Platform.runLater(() -> {\n+                    theStage.setX(STAGE_X);\n+                    theStage.setY(STAGE_Y);\n+                    startupLatch.countDown();\n+                });\n+            });\n+            theStage.show();\n+        });\n+\n+        assertTrue(startupLatch.await(TIMEOUT, TimeUnit.MILLISECONDS), \"Timeout waiting for test stage to be shown\");\n+\n+        \/\/ check if isFocused returns true\n+        assertTrue(\n+            theStage.isFocused(),\n+            \"Stage.isFocused() returned false! Stage does not have focus after showing. Some tests might fail because of this. \" +\n+            \"If that is the case, try re-running the tests with '--no-daemon' flag in Gradle.\"\n+        );\n+\n+        \/\/ give UI a bit of time to finish showing transition\n+        \/\/ ex. on Windows above latch is set despite the UI still \"animating\" the show\n+        sleep(500);\n+\n+        \/\/ check if window is on top\n+        Util.runAndWait(() -> {\n+            Color color = getColor(STAGE_SIZE \/ 2, STAGE_SIZE \/ 2);\n+            assertColorEquals(Color.LIGHTGREEN, color, TOLERANCE);\n+        });\n+\n+        \/\/ check if we actually have focus and key presses are registered by the app\n+        Util.runAndWait(() -> {\n+            getRobot().keyPress(KeyCode.A);\n+        });\n+        assertTrue(\n+            eventReceivedLatch.await(TIMEOUT, TimeUnit.MILLISECONDS),\n+            \"Event received latch timed out! Stage most probably did not have focus after showing. Some tests might fail because of this. \" +\n+            \"If that is the case, try re-running the tests with '--no-daemon' flag in Gradle.\"\n+        );\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageFocusTest.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"}]}