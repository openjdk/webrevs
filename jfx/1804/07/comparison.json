{"files":[{"patch":"@@ -0,0 +1,224 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.stage;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Group;\n+import javafx.scene.Scene;\n+import javafx.scene.image.PixelReader;\n+import javafx.scene.image.WritableImage;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.paint.Color;\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+import javafx.stage.WindowEvent;\n+import test.util.Util;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.FieldSource;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+\n+\/\/ NOTE: This test does NOT extend VisualTestBase, as the focus issues mostly happen\n+\/\/ on primaryStage delivered via Application.start()\n+public class StageFocusTest {\n+    static CountDownLatch launchLatch = new CountDownLatch(1);\n+\n+    static final int STAGE_SIZE = 200;\n+\n+    static final int STAGE_X = 100;\n+    static final int STAGE_Y = 100;\n+\n+    static final int TIMEOUT = 2000; \/\/ ms\n+    static final double TOLERANCE = 0.07;\n+\n+    static final Color SCENE_COLOR = Color.LIGHTGREEN;\n+\n+    static List<Stage> testStages = new ArrayList<Stage>();\n+    static Robot robot;\n+\n+    \/\/ NOTE: junit5 (at least the version we use) does not support parameterized class-level tests yet\n+    \/\/ As such, Before\/AfterEach need to be hacked this way\n+    private Stage currentTestStage = null;\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage primaryStage) {\n+            Platform.setImplicitExit(false);\n+            assertNotNull(primaryStage);\n+\n+            testStages.add(primaryStage);\n+            testStages.add(new Stage());\n+            launchLatch.countDown();\n+        }\n+    }\n+\n+\n+    @BeforeAll\n+    public static void setupOnce() throws InterruptedException {\n+        Util.launch(launchLatch, TestApp.class);\n+        Util.runAndWait(() -> robot = new Robot());\n+    }\n+\n+    @AfterAll\n+    public static void doTeardownOnce() {\n+        Util.shutdown();\n+    }\n+\n+    \/\/ @BeforeEach\n+    public void setupEach(Stage stage) {\n+        currentTestStage = stage;\n+    }\n+\n+    @AfterEach\n+    public void doTeardownEach() throws InterruptedException {\n+        hideTestStage(currentTestStage);\n+        currentTestStage = null;\n+    }\n+\n+    private String colorToString(Color c) {\n+        int r = (int)(c.getRed() * 255.0);\n+        int g = (int)(c.getGreen() * 255.0);\n+        int b = (int)(c.getBlue() * 255.0);\n+        int a = (int)(c.getOpacity() * 255.0);\n+        return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\n+    }\n+\n+    private boolean checkColorEquals(Color expected, Color actual, double delta) {\n+        double deltaRed = Math.abs(expected.getRed() - actual.getRed());\n+        double deltaGreen = Math.abs(expected.getGreen() - actual.getGreen());\n+        double deltaBlue = Math.abs(expected.getBlue() - actual.getBlue());\n+        double deltaOpacity = Math.abs(expected.getOpacity() - actual.getOpacity());\n+        return deltaRed <= delta && deltaGreen <= delta && deltaBlue <= delta && deltaOpacity <= delta;\n+    }\n+\n+    private void initTestStage(Stage stage, CountDownLatch eventReceivedLatch) throws InterruptedException {\n+        CountDownLatch showLatch = new CountDownLatch(1);\n+\n+        Util.runAndWait(() -> {\n+            Group root = new Group();\n+            Scene scene = new Scene(root, STAGE_SIZE, STAGE_SIZE);\n+            scene.setFill(SCENE_COLOR);\n+            scene.setOnKeyPressed(e -> {\n+                if (e.getCode() == KeyCode.A) {\n+                    eventReceivedLatch.countDown();\n+                }\n+            });\n+\n+            stage.initStyle(StageStyle.UNDECORATED);\n+            stage.setX(STAGE_X);\n+            stage.setY(STAGE_Y);\n+            stage.setScene(scene);\n+            stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> {\n+                showLatch.countDown();\n+            });\n+            stage.show();\n+        });\n+\n+        assertTrue(showLatch.await(TIMEOUT, TimeUnit.MILLISECONDS), \"Timeout waiting for test stage to be shown\");\n+    }\n+\n+    private void hideTestStage(Stage stage) throws InterruptedException {\n+        CountDownLatch hiddenLatch = new CountDownLatch(1);\n+\n+        Util.runAndWait(() -> {\n+            stage.addEventHandler(WindowEvent.WINDOW_HIDDEN, e -> {\n+                hiddenLatch.countDown();\n+            });\n+            stage.hide();\n+        });\n+\n+        assertTrue(hiddenLatch.await(TIMEOUT, TimeUnit.MILLISECONDS), \"Timeout waiting for test stage to hide\");\n+    }\n+\n+    \/**\n+     * Checks whether Stage is actually shown when calling show()\n+     *\n+     * Meant as a \"canary\" test of sorts to ensure other tests relying on\n+     * Stage being actually shown and on foreground work fine.\n+     *\n+     * This checks both the Stage provided by Application.start() as well as\n+     * a newly created Stage.\n+     *\/\n+    @ParameterizedTest\n+    @FieldSource(\"testStages\")\n+    public void testStageHasFocusAfterShow(Stage stage) throws InterruptedException {\n+        \/\/ TODO once we upgrade JUnit5 and have parameterized class-level tests\n+        \/\/      this can be removed and be an actual @BeforeEach\n+        setupEach(stage);\n+\n+        \/\/ initialize and show test stage\n+        CountDownLatch eventReceivedLatch = new CountDownLatch(1);\n+        initTestStage(stage, eventReceivedLatch);\n+\n+        \/\/ check if isFocused returns true\n+        assertTrue(\n+            stage.isFocused(),\n+            \"Stage.isFocused() returned false! Stage does not have focus after showing. \" +\n+            \"Some tests might fail because of this. Try re-running the tests with '--no-daemon' flag in Gradle.\"\n+        );\n+\n+        \/\/ give UI a bit of time to finish showing transition\n+        \/\/ ex. on Windows above latch is set despite the UI still \"animating\" the show\n+        Thread.sleep(500);\n+\n+        \/\/ check if window is on top\n+        Util.runAndWait(() -> {\n+            WritableImage capture = robot.getScreenCapture(null, STAGE_X, STAGE_Y, STAGE_SIZE, STAGE_SIZE, false);\n+            PixelReader captureReader = capture.getPixelReader();\n+            for (int x = 0; x < STAGE_SIZE; ++x) {\n+                for (int y = 0; y < STAGE_SIZE; ++y) {\n+                    Color color = captureReader.getColor(x, y);\n+                    assertTrue(checkColorEquals(SCENE_COLOR, color, TOLERANCE),\n+                        \"Color \" + colorToString(color) + \" did not match color \" + colorToString(SCENE_COLOR) + \". Stage is not on top after showing! \" +\n+                        \"Some tests might fail because of this. Try re-running the tests with '--no-daemon' flag in Gradle.\"\n+                    );\n+                }\n+            }\n+        });\n+\n+        \/\/ check if we actually have focus and key presses are registered by the app\n+        Util.runAndWait(() -> {\n+            robot.keyPress(KeyCode.A);\n+        });\n+        assertTrue(\n+            eventReceivedLatch.await(TIMEOUT, TimeUnit.MILLISECONDS),\n+            \"Stage did not receive the key stroke generated by Robot! This might happen if the Stage did not receive focus after showing. \" +\n+            \"Some tests might fail because of this. Try re-running the tests with '--no-daemon' flag in Gradle.\"\n+        );\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageFocusTest.java","additions":224,"deletions":0,"binary":false,"changes":224,"status":"added"}]}