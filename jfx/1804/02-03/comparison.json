{"files":[{"patch":"@@ -41,0 +41,1 @@\n+import test.robot.testharness.VisualTestBase;\n@@ -48,1 +49,2 @@\n-public class StageFocusTest {\n+\n+public class StageFocusTest extends VisualTestBase {\n@@ -53,1 +55,1 @@\n-    static final double STAGE_SIZE = 200;\n+    static final int STAGE_SIZE = 200;\n@@ -55,2 +57,2 @@\n-    static final double STAGE_X = 100;\n-    static final double STAGE_Y = 100;\n+    static final int STAGE_X = 100;\n+    static final int STAGE_Y = 100;\n@@ -58,1 +60,2 @@\n-    static Stage theStage = null;\n+    static final int TIMEOUT = 2000; \/\/ ms\n+    static final double TOLERANCE = 0.07;\n@@ -60,1 +63,1 @@\n-    Robot robot;\n+    private Stage theStage = null;\n@@ -62,4 +65,5 @@\n-    public static class TestApp extends Application {\n-        @Override\n-        public void start(Stage stage) {\n-            Platform.setImplicitExit(false);\n+    @BeforeAll\n+    public static void setupOnce() throws Exception {\n+        startupLatch = new CountDownLatch(1);\n+        eventReceivedLatch = new CountDownLatch(1);\n+    }\n@@ -67,1 +71,10 @@\n-            theStage = stage;\n+    \/**\n+     * Checks whether Stage is actually shown when calling show()\n+     *\n+     * Meant as a \"canary\" test of sorts to ensure other tests relying on\n+     * Stage being actually shown and on foreground work fine.\n+     *\/\n+    @Test\n+    public void testStageHasFocusAfterShow() throws InterruptedException {\n+        Util.runAndWait(() -> {\n+            theStage = getStage(false);\n@@ -78,2 +91,2 @@\n-            stage.setScene(scene);\n-            stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> {\n+            theStage.setScene(scene);\n+            theStage.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> {\n@@ -81,2 +94,2 @@\n-                    stage.setX(STAGE_X);\n-                    stage.setY(STAGE_Y);\n+                    theStage.setX(STAGE_X);\n+                    theStage.setY(STAGE_Y);\n@@ -86,3 +99,2 @@\n-            stage.show();\n-        }\n-    }\n+            theStage.show();\n+        });\n@@ -90,6 +102,1 @@\n-    @BeforeAll\n-    public static void setupOnce() throws Exception {\n-        startupLatch = new CountDownLatch(1);\n-        eventReceivedLatch = new CountDownLatch(1);\n-        Util.launch(startupLatch, TestApp.class);\n-    }\n+        assertTrue(startupLatch.await(TIMEOUT, TimeUnit.MILLISECONDS), \"Timeout waiting for test stage to be shown\");\n@@ -97,4 +104,6 @@\n-    @AfterAll\n-    public static void teardown() {\n-        Util.shutdown();\n-    }\n+        \/\/ check if isFocused returns true\n+        assertTrue(\n+            theStage.isFocused(),\n+            \"Stage.isFocused() returned false! Stage does not have focus after showing. Some tests might fail because of this. \" +\n+            \"If that is the case, try re-running the tests with '--no-daemon' flag in Gradle.\"\n+        );\n@@ -102,4 +111,3 @@\n-    @BeforeEach\n-    public void setup() {\n-        Util.runAndWait(() -> robot = new Robot());\n-    }\n+        \/\/ give UI a bit of time to finish showing transition\n+        \/\/ ex. on Windows above latch is set despite the UI still \"animating\" the show\n+        sleep(500);\n@@ -107,11 +115,5 @@\n-    \/**\n-     * Checks whether Stage is actually shown when calling show()\n-     *\n-     * Meant as a \"canary\" test of sorts to ensure other tests relying on\n-     * Stage being actually shown and on foreground work fine.\n-     *\/\n-    @Test\n-    public void testStageHasFocusAfterShow() throws InterruptedException {\n-        \/\/ ensures UI finished showing the Stage\n-        Util.sleep(250);\n-        assertTrue(theStage.isFocused());\n+        \/\/ check if window is on top\n+        Util.runAndWait(() -> {\n+            Color color = getColor(STAGE_SIZE \/ 2, STAGE_SIZE \/ 2);\n+            assertColorEquals(Color.LIGHTGREEN, color, TOLERANCE);\n+        });\n@@ -119,0 +121,1 @@\n+        \/\/ check if we actually have focus and key presses are registered by the app\n@@ -120,1 +123,1 @@\n-            robot.keyPress(KeyCode.A);\n+            getRobot().keyPress(KeyCode.A);\n@@ -123,2 +126,2 @@\n-            eventReceivedLatch.await(2000, TimeUnit.MILLISECONDS),\n-            \"Event received latch timed out! Stage most probably did not have focus after showing. Some tests might fail because of this.\" +\n+            eventReceivedLatch.await(TIMEOUT, TimeUnit.MILLISECONDS),\n+            \"Event received latch timed out! Stage most probably did not have focus after showing. Some tests might fail because of this. \" +\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageFocusTest.java","additions":49,"deletions":46,"binary":false,"changes":95,"status":"modified"}]}