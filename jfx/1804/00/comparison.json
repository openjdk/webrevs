{"files":[{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.stage;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Group;\n+import javafx.scene.Scene;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.paint.Color;\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Stage;\n+import javafx.stage.WindowEvent;\n+import test.util.Util;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class StageFocusTest {\n+\n+    static CountDownLatch startupLatch;\n+\n+    static final double STAGE_SIZE = 200;\n+\n+    static final double STAGE_X = 100;\n+    static final double STAGE_Y = 100;\n+\n+    static boolean receivedEvent = false;\n+\n+    Robot robot;\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage stage) {\n+            Platform.setImplicitExit(false);\n+\n+            Group root = new Group();\n+            Scene scene = new Scene(root, STAGE_SIZE, STAGE_SIZE);\n+            scene.setFill(Color.LIGHTGREEN);\n+            scene.setOnKeyPressed(e -> {\n+                if (e.getCode() == KeyCode.A)\n+                    receivedEvent = true;\n+            });\n+\n+            stage.setScene(scene);\n+            stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> {\n+                Platform.runLater(() -> {\n+                    stage.setX(STAGE_X);\n+                    stage.setY(STAGE_Y);\n+                    startupLatch.countDown();\n+                });\n+            });\n+            stage.show();\n+        }\n+    }\n+\n+    @BeforeAll\n+    public static void setupOnce() throws Exception {\n+        startupLatch = new CountDownLatch(1);\n+        Util.launch(startupLatch, TestApp.class);\n+    }\n+\n+    @AfterAll\n+    public static void teardown() {\n+        Util.shutdown();\n+    }\n+\n+    @BeforeEach\n+    public void setup() {\n+        Util.runAndWait(() -> robot = new Robot());\n+    }\n+\n+    \/**\n+     * Checks whether Stage is actually shown when calling show()\n+     *\n+     * Meant as a \"canary\" test of sorts to ensure other tests relying on\n+     * Stage being actually shown and on foreground work fine.\n+     *\/\n+    @Test\n+    public void testStageHasFocusAfterShow() {\n+        Util.sleep(250);\n+        Util.runAndWait(() -> {\n+            robot.keyPress(KeyCode.A);\n+        });\n+        assertTrue(receivedEvent, \"Expected key press has NOT been received! Stage did not have focus after showing. Some tests might fail because of this.\" +\n+                                  \"If that is the case, try re-running the tests with '--no-daemon' flag in Gradle.\");\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageFocusTest.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"}]}