{"files":[{"patch":"@@ -28,0 +28,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -41,0 +43,1 @@\n+import javafx.stage.StageStyle;\n@@ -43,1 +46,0 @@\n-import test.robot.testharness.VisualTestBase;\n@@ -46,0 +48,1 @@\n+import org.junit.jupiter.api.AfterEach;\n@@ -47,2 +50,2 @@\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.FieldSource;\n@@ -50,0 +53,1 @@\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -52,4 +56,4 @@\n-public class StageFocusTest extends VisualTestBase {\n-\n-    static CountDownLatch startupLatch;\n-    static CountDownLatch eventReceivedLatch;\n+\/\/ NOTE: This test does NOT extend VisualTestBase, as the focus issues mostly happen\n+\/\/ on primaryStage delivered via Application.start()\n+public class StageFocusTest {\n+    static CountDownLatch launchLatch = new CountDownLatch(1);\n@@ -67,1 +71,19 @@\n-    private Stage theStage = null;\n+    static List<Stage> testStages = new ArrayList<Stage>();\n+    static Robot robot;\n+\n+    \/\/ NOTE: junit5 (at least the version we use) does not support parameterized class-level tests yet\n+    \/\/ As such, Before\/AfterEach need to be hacked this way\n+    private Stage currentTestStage = null;\n+\n+    public static class TestApp extends Application {\n+        @Override\n+        public void start(Stage primaryStage) {\n+            Platform.setImplicitExit(false);\n+            assertNotNull(primaryStage);\n+\n+            testStages.add(primaryStage);\n+            testStages.add(new Stage());\n+            launchLatch.countDown();\n+        }\n+    }\n+\n@@ -70,3 +92,5 @@\n-    public static void setupOnce() throws Exception {\n-        startupLatch = new CountDownLatch(1);\n-        eventReceivedLatch = new CountDownLatch(1);\n+    public static void setupOnce() throws InterruptedException {\n+        Util.launch(launchLatch, TestApp.class);\n+        assertTrue(launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS), \"Timeout waiting for test stage to be shown\");\n+\n+        Util.runAndWait(() -> robot = new Robot());\n@@ -75,10 +99,23 @@\n-    \/**\n-     * Checks whether Stage is actually shown when calling show()\n-     *\n-     * Meant as a \"canary\" test of sorts to ensure other tests relying on\n-     * Stage being actually shown and on foreground work fine.\n-     *\/\n-    @Test\n-    public void testStageHasFocusAfterShow() throws InterruptedException {\n-        Util.runAndWait(() -> {\n-            theStage = getStage(false);\n+    @AfterAll\n+    public static void doTeardownOnce() {\n+        Util.shutdown();\n+    }\n+\n+    \/\/ @BeforeEach\n+    public void setupEach(Stage stage) {\n+        currentTestStage = stage;\n+    }\n+\n+    @AfterEach\n+    public void doTeardownEach() throws InterruptedException {\n+        hideTestStage(currentTestStage);\n+        currentTestStage = null;\n+    }\n+\n+    private String colorToString(Color c) {\n+        int r = (int)(c.getRed() * 255.0);\n+        int g = (int)(c.getGreen() * 255.0);\n+        int b = (int)(c.getBlue() * 255.0);\n+        int a = (int)(c.getOpacity() * 255.0);\n+        return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\n+    }\n@@ -86,0 +123,13 @@\n+    private void assertColorEquals(Color expected, Color actual, double delta) {\n+        double deltaRed = Math.abs(expected.getRed() - actual.getRed());\n+        double deltaGreen = Math.abs(expected.getGreen() - actual.getGreen());\n+        double deltaBlue = Math.abs(expected.getBlue() - actual.getBlue());\n+        double deltaOpacity = Math.abs(expected.getOpacity() - actual.getOpacity());\n+        assertTrue(deltaRed <= delta && deltaGreen <= delta && deltaBlue <= delta && deltaOpacity <= delta,\n+            \"Color \" + colorToString(actual) + \" did not match color \" + colorToString(expected));\n+    }\n+\n+    private void initTestStage(Stage stage, CountDownLatch eventReceivedLatch) throws InterruptedException {\n+        CountDownLatch showLatch = new CountDownLatch(1);\n+\n+        Util.runAndWait(() -> {\n@@ -95,7 +145,19 @@\n-            theStage.setScene(scene);\n-            theStage.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> {\n-                Platform.runLater(() -> {\n-                    theStage.setX(STAGE_X);\n-                    theStage.setY(STAGE_Y);\n-                    startupLatch.countDown();\n-                });\n+            stage.initStyle(StageStyle.UNDECORATED);\n+            stage.setX(STAGE_X);\n+            stage.setY(STAGE_Y);\n+            stage.setScene(scene);\n+            stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> {\n+                showLatch.countDown();\n+            });\n+            stage.show();\n+        });\n+\n+        assertTrue(showLatch.await(TIMEOUT, TimeUnit.MILLISECONDS), \"Timeout waiting for test stage to be shown\");\n+    }\n+\n+    private void hideTestStage(Stage stage) throws InterruptedException {\n+        CountDownLatch hiddenLatch = new CountDownLatch(1);\n+\n+        Util.runAndWait(() -> {\n+            stage.addEventHandler(WindowEvent.WINDOW_HIDDEN, e -> {\n+                hiddenLatch.countDown();\n@@ -103,1 +165,1 @@\n-            theStage.show();\n+            stage.hide();\n@@ -106,1 +168,22 @@\n-        assertTrue(startupLatch.await(TIMEOUT, TimeUnit.MILLISECONDS), \"Timeout waiting for test stage to be shown\");\n+        assertTrue(hiddenLatch.await(TIMEOUT, TimeUnit.MILLISECONDS), \"Timeout waiting for test stage to hide\");\n+    }\n+\n+    \/**\n+     * Checks whether Stage is actually shown when calling show()\n+     *\n+     * Meant as a \"canary\" test of sorts to ensure other tests relying on\n+     * Stage being actually shown and on foreground work fine.\n+     *\n+     * This checks both the Stage provided by Application.start() as well as\n+     * a newly created Stage.\n+     *\/\n+    @ParameterizedTest\n+    @FieldSource(\"testStages\")\n+    public void testStageHasFocusAfterShow(Stage stage) throws InterruptedException {\n+        \/\/ TODO once we upgrade JUnit5 and have parameterized class-level tests\n+        \/\/      this can be removed and be an actual @BeforeEach\n+        setupEach(stage);\n+\n+        \/\/ initialize and show test stage\n+        CountDownLatch eventReceivedLatch = new CountDownLatch(1);\n+        initTestStage(stage, eventReceivedLatch);\n@@ -110,3 +193,3 @@\n-            theStage.isFocused(),\n-            \"Stage.isFocused() returned false! Stage does not have focus after showing. Some tests might fail because of this. \" +\n-            \"If that is the case, try re-running the tests with '--no-daemon' flag in Gradle.\"\n+            stage.isFocused(),\n+            \"Stage.isFocused() returned false! Stage does not have focus after showing. \" +\n+            \"Some tests might fail because of this. Try re-running the tests with '--no-daemon' flag in Gradle.\"\n@@ -117,1 +200,1 @@\n-        sleep(500);\n+        Thread.sleep(500);\n@@ -121,1 +204,1 @@\n-            WritableImage capture = getRobot().getScreenCapture(null, STAGE_X, STAGE_Y, STAGE_SIZE, STAGE_SIZE, false);\n+            WritableImage capture = robot.getScreenCapture(null, STAGE_X, STAGE_Y, STAGE_SIZE, STAGE_SIZE, false);\n@@ -133,1 +216,1 @@\n-            getRobot().keyPress(KeyCode.A);\n+            robot.keyPress(KeyCode.A);\n@@ -137,2 +220,2 @@\n-            \"Event received latch timed out! Stage most probably did not have focus after showing. Some tests might fail because of this. \" +\n-            \"If that is the case, try re-running the tests with '--no-daemon' flag in Gradle.\"\n+            \"The Stage did not receive the key stroke generated by Robot! This might happen if the Stage did not receive focus after showing. \" +\n+            \"Some tests might fail because of this. Try re-running the tests with '--no-daemon' flag in Gradle.\"\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/StageFocusTest.java","additions":121,"deletions":38,"binary":false,"changes":159,"status":"modified"}]}