{"files":[{"patch":"@@ -117,0 +117,2 @@\n+     *              If the number is negative, the call is equivalent to calling\n+     *              {@link #increment(int)} with the absolute value of {@code steps}.\n@@ -122,1 +124,1 @@\n-     * Attempts to omcrement the {@link #valueProperty() value} by the given\n+     * Attempts to increment the {@link #valueProperty() value} by the given\n@@ -126,0 +128,2 @@\n+     *              If the number is negative, the call is equivalent to calling\n+     *              {@link #decrement(int)} with the absolute number of {@code steps}.\n@@ -175,3 +179,3 @@\n-     * The wrapAround property is used to specify whether the value factory should\n-     * be circular. For example, should an integer-based value model increment\n-     * from the maximum value back to the minimum value (and vice versa).\n+     * Specifies whether this {@code SpinnerValueFactory} wraps around from the maximum value to\n+     * the minimum value, and vice versa. The semantics of the wrap-around behavior are specified\n+     * by implementations of this class.\n@@ -412,2 +416,8 @@\n-     *\n-     * <p>Note that the default {@link #converterProperty() converter} is implemented\n+     * <p>\n+     * If {@link #wrapAroundProperty wrapAround} is {@code true}, the {@code IntegerSpinnerValueFactory} will step from\n+     * the minimum value to the maximum value (and vice versa). As a consequence of that, the number\n+     * of steps required to wrap around to the same value is {@code N+1}, where {@code N} is the number of steps between\n+     * {@link #minProperty min} (inclusive) and {@link #maxProperty max} (inclusive). The new value after a step is\n+     * {@code val = (val + amountToStepBy) % (max - min + 1)}.\n+     * <p>\n+     * Note that the default {@link #converterProperty() converter} is implemented\n@@ -609,2 +619,7 @@\n-     *\n-     * <p>Note that the default {@link #converterProperty() converter} is implemented\n+     * <p>\n+     * If {@link #wrapAroundProperty wrapAround} is {@code true}, the {@code DoubleSpinnerValueFactory} will step\n+     * through from the maximum value to the minimum value seamlessly; that is, any step up from the maximum value\n+     * is equal to the same step up from the minimum value (and vice versa). The new value after a step is\n+     * {@code val = (val + amountToStepBy) % (max - min)}.\n+     * <p>\n+     * Note that the default {@link #converterProperty() converter} is implemented\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/SpinnerValueFactory.java","additions":23,"deletions":8,"binary":false,"changes":31,"status":"modified"}]}