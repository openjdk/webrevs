{"files":[{"patch":"@@ -65,1 +65,1 @@\n-        if (isObserved() && isActive()) {\n+        if (isSubscribed() && isActive()) {\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ConditionalBinding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    public static <T> ExpressionHelper<T> addListener(ExpressionHelper<T> helper, ObservableValue<T> observable, InvalidationListener listener) {\n+    public static <T> ExpressionHelper<T> addListener(ExpressionHelper<T> helper, ObservableValue<T> observable, InvalidationListener listener, Runnable observed) {\n@@ -53,0 +53,1 @@\n+\n@@ -54,1 +55,8 @@\n-        return (helper == null)? new SingleInvalidation<>(observable, listener) : helper.addListener(listener);\n+\n+        if (helper == null) {\n+            observed.run();\n+\n+            return new SingleInvalidation<>(observable, listener);\n+        }\n+\n+        return helper.addListener(listener);\n@@ -64,1 +72,1 @@\n-    public static <T> ExpressionHelper<T> addListener(ExpressionHelper<T> helper, ObservableValue<T> observable, ChangeListener<? super T> listener) {\n+    public static <T> ExpressionHelper<T> addListener(ExpressionHelper<T> helper, ObservableValue<T> observable, ChangeListener<? super T> listener, Runnable observed) {\n@@ -68,1 +76,8 @@\n-        return (helper == null)? new SingleChange<>(observable, listener) : helper.addListener(listener);\n+\n+        if (helper == null) {\n+            observed.run();\n+\n+            return new SingleChange<>(observable, listener);\n+        }\n+\n+        return helper.addListener(listener);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/ExpressionHelper.java","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-        if (isObserved() && indirectSource != newIndirectSource) {  \/\/ only resubscribe when observed and the indirect source changed\n+        if (isSubscribed() && indirectSource != newIndirectSource) {  \/\/ only resubscribe when observed and the indirect source changed\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/FlatMappedBinding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import javafx.beans.InvalidationListener;\n@@ -30,1 +29,0 @@\n-import javafx.beans.value.ChangeListener;\n@@ -41,1 +39,0 @@\n-    private boolean wasObserved;\n@@ -44,18 +41,2 @@\n-    public void addListener(ChangeListener<? super T> listener) {\n-        super.addListener(listener);\n-\n-        updateSubscriptionAfterAdd();\n-    }\n-\n-    @Override\n-    public void removeListener(ChangeListener<? super T> listener) {\n-        super.removeListener(listener);\n-\n-        updateSubscriptionAfterRemove();\n-    }\n-\n-    @Override\n-    public void addListener(InvalidationListener listener) {\n-        super.addListener(listener);\n-\n-        updateSubscriptionAfterAdd();\n+    protected boolean allowValidation() {\n+        return isSubscribed();\n@@ -65,4 +46,22 @@\n-    public void removeListener(InvalidationListener listener) {\n-        super.removeListener(listener);\n-\n-        updateSubscriptionAfterRemove();\n+    protected final void observed() {\n+        subscription = observeSources(); \/\/ start observing source\n+\n+        \/*\n+         * Although the act of registering a listener already attempts to make\n+         * this binding valid, allowValidation won't allow it as the binding is\n+         * not observed yet. This is because isObserved will not yet return true\n+         * when the process of registering the listener hasn't completed yet.\n+         *\n+         * As the binding must be valid after it becomes observed the first time\n+         * 'get' is called again.\n+         *\n+         * See com.sun.javafx.binding.ExpressionHelper (which is used\n+         * by ObjectBinding) where it will do a call to ObservableValue#getValue\n+         * BEFORE adding the actual listener. This results in ObjectBinding#get\n+         * to be called in which the #allowValidation call will block it from\n+         * becoming valid as the condition is \"isObserved()\"; this is technically\n+         * correct as the listener wasn't added yet, but means we must call\n+         * #get again to make this binding valid.\n+         *\/\n+\n+        get(); \/\/ make binding valid as source wasn't tracked until now\n@@ -72,45 +71,4 @@\n-    protected boolean allowValidation() {\n-        return isObserved();\n-    }\n-\n-    \/**\n-     * Called after a listener was added to start observing inputs if they're not observed already.\n-     *\/\n-    private void updateSubscriptionAfterAdd() {\n-        if (!wasObserved) { \/\/ was first observer registered?\n-            subscription = observeSources(); \/\/ start observing source\n-\n-            \/*\n-             * Although the act of registering a listener already attempts to make\n-             * this binding valid, allowValidation won't allow it as the binding is\n-             * not observed yet. This is because isObserved will not yet return true\n-             * when the process of registering the listener hasn't completed yet.\n-             *\n-             * As the binding must be valid after it becomes observed the first time\n-             * 'get' is called again.\n-             *\n-             * See com.sun.javafx.binding.ExpressionHelper (which is used\n-             * by ObjectBinding) where it will do a call to ObservableValue#getValue\n-             * BEFORE adding the actual listener. This results in ObjectBinding#get\n-             * to be called in which the #allowValidation call will block it from\n-             * becoming valid as the condition is \"isObserved()\"; this is technically\n-             * correct as the listener wasn't added yet, but means we must call\n-             * #get again to make this binding valid.\n-             *\/\n-\n-            get(); \/\/ make binding valid as source wasn't tracked until now\n-            wasObserved = true;\n-        }\n-    }\n-\n-    \/**\n-     * Called after a listener was removed to stop observing inputs if this was the last listener\n-     * observing this binding.\n-     *\/\n-    private void updateSubscriptionAfterRemove() {\n-        if (wasObserved && !isObserved()) { \/\/ was last observer unregistered?\n-            subscription.unsubscribe();\n-            subscription = null;\n-            invalidate(); \/\/ make binding invalid as source is no longer tracked\n-            wasObserved = false;\n-        }\n+    protected final void unobserved() {\n+        subscription.unsubscribe();\n+        subscription = null;\n+        invalidate(); \/\/ make binding invalid as source is no longer tracked\n@@ -126,0 +84,32 @@\n+\n+    \/**\n+     * Checks if this binding has a subscription associated with it. This is similar to {@link #isObserved()} but\n+     * with a different timing. This call returns {@code false} before {@link #observeSources()} is called, and\n+     * {@code true} after the call completes. Similarly, this method returns {@code true} before\n+     * {@link Subscription#unsubscribe()} is called, and becomes {@code false} after it completes.<p>\n+     *\n+     * The table below shows the two flags and how they change when the first listener is added and when the\n+     * last listener is removed:\n+     *\n+     * <table>\n+     * <tr><th>State<\/th><th>isObserved<\/th><th>isSubscribed<\/th><\/tr>\n+     * <tr><td>{@code addListener} called with first listener<\/td><td>false<\/td><td>false<\/td><\/tr>\n+     * <tr><td>{@code observed} called<\/td><td>false<\/td><td>false<\/td><\/tr>\n+     * <tr><td>{@code observeSources} called<\/td><td>false<\/td><td>false<\/td><\/tr>\n+     * <tr><td>{@code observeSources} completes, returning a {@code Subscription}<\/td><td>false<\/td><td>true<\/td><\/tr>\n+     * <tr><td>{@code observed} completes<\/td><td>false<\/td><td>true<\/td><\/tr>\n+     * <tr><td>{@code addListener} completes<\/td><td>true<\/td><td>true<\/td><\/tr>\n+     * <tr><td><br><\/td><\/tr>\n+     * <tr><td>{@code removeListener} called with last listener<\/td><td>true<\/td><td>true<\/td><\/tr>\n+     * <tr><td>{@code unobserved} called<\/td><td>false<\/td><td>true<\/td><\/tr>\n+     * <tr><td>{@code unsubscribe} on {@code Subscription} called<\/td><td>false<\/td><td>true<\/td><\/tr>\n+     * <tr><td>{@code unsubscribe} on {@code Subscription} completes<\/td><td>false<\/td><td>false<\/td><\/tr>\n+     * <tr><td>{@code unobserved} completes<\/td><td>false<\/td><td>false<\/td><\/tr>\n+     * <tr><td>{@code removeListener} completes<\/td><td>false<\/td><td>false<\/td><\/tr>\n+     * <\/table>\n+     *\n+     * @return {@code true} if this binding has a {@link Subscription} associated with it, otherwise {@code false}\n+     *\/\n+    protected final boolean isSubscribed() {\n+        return subscription != null;\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/binding\/LazyObjectBinding.java","additions":60,"deletions":70,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -87,1 +87,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Boolean> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -92,1 +99,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -97,1 +104,25 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Boolean> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/BooleanBinding.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -139,1 +139,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -144,1 +151,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -149,1 +156,25 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/DoubleBinding.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -89,1 +89,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -94,1 +101,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -99,1 +106,25 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/FloatBinding.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -89,1 +89,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -94,1 +101,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -99,1 +106,25 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/IntegerBinding.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -94,1 +94,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -102,0 +102,17 @@\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n+    }\n+\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/LongBinding.java","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -89,1 +89,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<T> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -94,1 +101,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -99,1 +106,20 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<T> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n@@ -213,1 +239,2 @@\n-    protected final boolean isObserved() {\n+    @Override\n+    public final boolean isObserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/ObjectBinding.java","additions":32,"deletions":5,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -88,1 +88,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<String> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -93,1 +100,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -98,1 +105,25 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<String> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/binding\/StringBinding.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -81,1 +81,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Boolean> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -86,1 +93,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -91,1 +98,25 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Boolean> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/BooleanPropertyBase.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -84,1 +84,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -89,1 +96,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -94,1 +101,25 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/DoublePropertyBase.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -84,1 +84,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -89,1 +96,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -94,1 +101,25 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/FloatPropertyBase.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -84,1 +84,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -89,1 +96,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -94,1 +101,25 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/IntegerPropertyBase.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -84,1 +84,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -89,1 +96,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -94,1 +101,25 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/LongPropertyBase.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -83,1 +83,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<T> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -88,1 +95,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -93,1 +100,25 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<T> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ObjectPropertyBase.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -57,1 +57,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Boolean> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -62,1 +69,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -67,1 +74,25 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Boolean> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyBooleanPropertyBase.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -57,1 +57,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -62,1 +69,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -67,1 +74,25 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyDoublePropertyBase.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -57,1 +57,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -62,1 +69,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -67,1 +74,25 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyFloatPropertyBase.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -57,1 +57,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -62,1 +69,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -67,1 +74,25 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyIntegerPropertyBase.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -57,1 +57,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -62,1 +69,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -67,1 +74,25 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<Number> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyLongPropertyBase.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -59,1 +59,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<T> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -64,1 +71,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -69,1 +76,25 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<T> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyObjectPropertyBase.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -57,1 +57,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<String> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -62,1 +69,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -67,1 +74,25 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<String> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/ReadOnlyStringPropertyBase.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -81,1 +81,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<String> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -86,1 +93,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -91,1 +98,25 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<String> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/StringPropertyBase.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, () -> {});\n@@ -230,1 +230,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, () -> {});\n@@ -258,0 +258,5 @@\n+    @Override\n+    public boolean isObserved() {\n+        return helper != null;\n+    }\n+\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanBooleanProperty.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -215,1 +215,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, () -> {});\n@@ -231,1 +231,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, () -> {});\n@@ -259,0 +259,5 @@\n+    @Override\n+    public boolean isObserved() {\n+        return helper != null;\n+    }\n+\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanDoubleProperty.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, () -> {});\n@@ -230,1 +230,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, () -> {});\n@@ -258,0 +258,5 @@\n+    @Override\n+    public boolean isObserved() {\n+        return helper != null;\n+    }\n+\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanFloatProperty.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, () -> {});\n@@ -230,1 +230,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, () -> {});\n@@ -258,0 +258,5 @@\n+    @Override\n+    public boolean isObserved() {\n+        return helper != null;\n+    }\n+\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanIntegerProperty.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, () -> {});\n@@ -230,1 +230,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, () -> {});\n@@ -258,0 +258,5 @@\n+    @Override\n+    public boolean isObserved() {\n+        return helper != null;\n+    }\n+\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanLongProperty.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -217,1 +217,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, () -> {});\n@@ -233,1 +233,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, () -> {});\n@@ -261,0 +261,5 @@\n+    @Override\n+    public boolean isObserved() {\n+        return helper != null;\n+    }\n+\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanObjectProperty.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -213,1 +213,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, () -> {});\n@@ -229,1 +229,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, () -> {});\n@@ -256,0 +256,5 @@\n+\n+    @Override\n+    public boolean isObserved() {\n+        return helper != null;\n+    }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanStringProperty.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -148,0 +148,11 @@\n+    \/**\n+     * Checks if this {@code ObservableValue} is currently observed. If unknown or\n+     * unsupported, {@code true} is returned.\n+     *\n+     * @return {@code true} if this ObservableValue currently has one or more\n+     *     listeners registered on it, otherwise {@code false}\n+     *\/\n+    default boolean isObserved() {\n+        return true;\n+    }\n+\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/value\/ObservableValue.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -65,1 +65,1 @@\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n+        helper = ExpressionHelper.addListener(helper, this, listener, this::observed);\n@@ -73,1 +73,8 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<T> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n@@ -81,1 +88,25 @@\n-        helper = ExpressionHelper.removeListener(helper, listener);\n+        ExpressionHelper<T> newHelper = ExpressionHelper.removeListener(helper, listener);\n+        boolean unobserved = newHelper == null && helper != null;\n+\n+        helper = newHelper;\n+\n+        if (unobserved) {\n+            unobserved();  \/\/ when called, isObserved should already be returning false\n+        }\n+    }\n+\n+    @Override\n+    public final boolean isObserved() {\n+        return helper != null;\n+    }\n+\n+    \/**\n+     * Called immediately before this observable transitions from unobserved to observed.\n+     *\/\n+    protected void observed() {\n+    }\n+\n+    \/**\n+     * Called immediately after this observable transitions from observed to unobserved.\n+     *\/\n+    protected void unobserved() {\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/value\/ObservableValueBase.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-        ExpressionHelper.addListener(helper, null, invalidationListener[0]);\n+        ExpressionHelper.addListener(helper, null, invalidationListener[0], () -> {});\n@@ -79,1 +79,1 @@\n-        ExpressionHelper.addListener(helper, observable, (InvalidationListener) null);\n+        ExpressionHelper.addListener(helper, observable, (InvalidationListener) null, () -> {});\n@@ -89,1 +89,1 @@\n-        ExpressionHelper.addListener(helper, null, changeListener[0]);\n+        ExpressionHelper.addListener(helper, null, changeListener[0], () -> {});\n@@ -94,1 +94,1 @@\n-        ExpressionHelper.addListener(helper, observable, (ChangeListener) null);\n+        ExpressionHelper.addListener(helper, observable, (ChangeListener) null, () -> {});\n@@ -112,1 +112,1 @@\n-        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[0]);\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[0], () -> {});\n@@ -126,1 +126,1 @@\n-        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[1]);\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[1], () -> {});\n@@ -136,1 +136,1 @@\n-        helper = ExpressionHelper.addListener(helper, observable, changeListener[1]);\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[1], () -> {});\n@@ -155,1 +155,1 @@\n-        helper = ExpressionHelper.addListener(helper, observable, changeListener[0]);\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[0], () -> {});\n@@ -172,1 +172,1 @@\n-        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[1]);\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[1], () -> {});\n@@ -184,1 +184,1 @@\n-        helper = ExpressionHelper.addListener(helper, observable, changeListener[1]);\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[1], () -> {});\n@@ -205,2 +205,2 @@\n-        helper = ExpressionHelper.addListener(helper, observable, changeListener[0]);\n-        helper = ExpressionHelper.addListener(helper, observable, changeListener[1]);\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[0], () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[1], () -> {});\n@@ -208,2 +208,2 @@\n-        helper = ExpressionHelper.addListener(helper, observable, weakListener);\n-        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[0]);\n+        helper = ExpressionHelper.addListener(helper, observable, weakListener, () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[0], () -> {});\n@@ -213,2 +213,2 @@\n-        helper = ExpressionHelper.addListener(helper, observable, weakListener);\n-        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[1]);\n+        helper = ExpressionHelper.addListener(helper, observable, weakListener, () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[1], () -> {});\n@@ -219,2 +219,2 @@\n-        helper = ExpressionHelper.addListener(helper, observable, weakListener);\n-        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[2]);\n+        helper = ExpressionHelper.addListener(helper, observable, weakListener, () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[2], () -> {});\n@@ -229,2 +229,2 @@\n-        helper = ExpressionHelper.addListener(helper, observable, changeListener[0]);\n-        helper = ExpressionHelper.addListener(helper, observable, changeListener[1]);\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[0], () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[1], () -> {});\n@@ -234,1 +234,1 @@\n-        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[0]);\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[0], () -> {});\n@@ -238,2 +238,2 @@\n-        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[2]);\n-        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[1]);\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[2], () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[1], () -> {});\n@@ -266,1 +266,1 @@\n-                    helper = ExpressionHelper.addListener(helper, ExpressionHelperTest.this.observable, invalidationListener[index++]);\n+                    helper = ExpressionHelper.addListener(helper, ExpressionHelperTest.this.observable, invalidationListener[index++], () -> {});\n@@ -270,2 +270,2 @@\n-        helper = ExpressionHelper.addListener(helper, observable, addingListener);\n-        helper = ExpressionHelper.addListener(helper, observable, changeListener[0]);\n+        helper = ExpressionHelper.addListener(helper, observable, addingListener, () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[0], () -> {});\n@@ -313,5 +313,5 @@\n-        helper = ExpressionHelper.addListener(helper, observable, removingListener);\n-        helper = ExpressionHelper.addListener(helper, observable, changeListener[0]);\n-        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[0]);\n-        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[2]);\n-        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[1]);\n+        helper = ExpressionHelper.addListener(helper, observable, removingListener, () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[0], () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[0], () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[2], () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[1], () -> {});\n@@ -348,2 +348,2 @@\n-        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[0]);\n-        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[1]);\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[0], () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[1], () -> {});\n@@ -351,2 +351,2 @@\n-        helper = ExpressionHelper.addListener(helper, observable, weakListener);\n-        helper = ExpressionHelper.addListener(helper, observable, changeListener[0]);\n+        helper = ExpressionHelper.addListener(helper, observable, weakListener, () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[0], () -> {});\n@@ -357,2 +357,2 @@\n-        helper = ExpressionHelper.addListener(helper, observable, weakListener);\n-        helper = ExpressionHelper.addListener(helper, observable, changeListener[1]);\n+        helper = ExpressionHelper.addListener(helper, observable, weakListener, () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[1], () -> {});\n@@ -364,2 +364,2 @@\n-        helper = ExpressionHelper.addListener(helper, observable, weakListener);\n-        helper = ExpressionHelper.addListener(helper, observable, changeListener[2]);\n+        helper = ExpressionHelper.addListener(helper, observable, weakListener, () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[2], () -> {});\n@@ -375,2 +375,2 @@\n-        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[0]);\n-        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[1]);\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[0], () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[1], () -> {});\n@@ -380,1 +380,1 @@\n-        helper = ExpressionHelper.addListener(helper, observable, changeListener[0]);\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[0], () -> {});\n@@ -384,2 +384,2 @@\n-        helper = ExpressionHelper.addListener(helper, observable, changeListener[2]);\n-        helper = ExpressionHelper.addListener(helper, observable, changeListener[1]);\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[2], () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[1], () -> {});\n@@ -415,1 +415,1 @@\n-                    helper = ExpressionHelper.addListener(helper, ExpressionHelperTest.this.observable, changeListener[index++]);\n+                    helper = ExpressionHelper.addListener(helper, ExpressionHelperTest.this.observable, changeListener[index++], () -> {});\n@@ -419,2 +419,2 @@\n-        helper = ExpressionHelper.addListener(helper, observable, addingListener);\n-        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[0]);\n+        helper = ExpressionHelper.addListener(helper, observable, addingListener, () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[0], () -> {});\n@@ -462,5 +462,5 @@\n-        helper = ExpressionHelper.addListener(helper, observable, removingListener);\n-        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[0]);\n-        helper = ExpressionHelper.addListener(helper, observable, changeListener[0]);\n-        helper = ExpressionHelper.addListener(helper, observable, changeListener[2]);\n-        helper = ExpressionHelper.addListener(helper, observable, changeListener[1]);\n+        helper = ExpressionHelper.addListener(helper, observable, removingListener, () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[0], () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[0], () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[2], () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[1], () -> {});\n@@ -495,2 +495,2 @@\n-        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[0]);\n-        helper = ExpressionHelper.addListener(helper, observable, changeListener[0]);\n+        helper = ExpressionHelper.addListener(helper, observable, invalidationListener[0], () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, changeListener[0], () -> {});\n@@ -523,1 +523,1 @@\n-        helper = ExpressionHelper.addListener(helper, observable,(o) -> {throw new RuntimeException();});\n+        helper = ExpressionHelper.addListener(helper, observable,(o) -> {throw new RuntimeException();}, () -> {});\n@@ -532,2 +532,2 @@\n-        helper = ExpressionHelper.addListener(helper, observable, (o) -> {called.set(0); throw new RuntimeException();});\n-        helper = ExpressionHelper.addListener(helper, observable, (o) -> {called.set(1); throw new RuntimeException();});\n+        helper = ExpressionHelper.addListener(helper, observable, (o) -> {called.set(0); throw new RuntimeException();}, () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, (o) -> {called.set(1); throw new RuntimeException();}, () -> {});\n@@ -543,1 +543,1 @@\n-        helper = ExpressionHelper.addListener(helper, observable, (value, o1, o2) -> {throw new RuntimeException();});\n+        helper = ExpressionHelper.addListener(helper, observable, (value, o1, o2) -> {throw new RuntimeException();}, () -> {});\n@@ -552,2 +552,2 @@\n-        helper = ExpressionHelper.addListener(helper, observable, (value, o1, o2) -> {called.set(0); throw new RuntimeException();});\n-        helper = ExpressionHelper.addListener(helper, observable, (value, o1, o2) -> {called.set(1); throw new RuntimeException();});\n+        helper = ExpressionHelper.addListener(helper, observable, (value, o1, o2) -> {called.set(0); throw new RuntimeException();}, () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, (value, o1, o2) -> {called.set(1); throw new RuntimeException();}, () -> {});\n@@ -565,4 +565,4 @@\n-        helper = ExpressionHelper.addListener(helper, observable, (value, o1, o2) -> {called.set(0); throw new RuntimeException();});\n-        helper = ExpressionHelper.addListener(helper, observable, (value, o1, o2) -> {called.set(1); throw new RuntimeException();});\n-        helper = ExpressionHelper.addListener(helper, observable, (o) -> {called.set(2); throw new RuntimeException();});\n-        helper = ExpressionHelper.addListener(helper, observable, (o) -> {called.set(3); throw new RuntimeException();});\n+        helper = ExpressionHelper.addListener(helper, observable, (value, o1, o2) -> {called.set(0); throw new RuntimeException();}, () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, (value, o1, o2) -> {called.set(1); throw new RuntimeException();}, () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, (o) -> {called.set(2); throw new RuntimeException();}, () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, (o) -> {called.set(3); throw new RuntimeException();}, () -> {});\n@@ -584,1 +584,1 @@\n-        helper = ExpressionHelper.addListener(helper, observable,(o) -> {throw new RuntimeException();});\n+        helper = ExpressionHelper.addListener(helper, observable,(o) -> {throw new RuntimeException();}, () -> {});\n@@ -598,2 +598,2 @@\n-        helper = ExpressionHelper.addListener(helper, observable, (o) -> {throw new RuntimeException();});\n-        helper = ExpressionHelper.addListener(helper, observable, (o) -> {throw new RuntimeException();});\n+        helper = ExpressionHelper.addListener(helper, observable, (o) -> {throw new RuntimeException();}, () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, (o) -> {throw new RuntimeException();}, () -> {});\n@@ -611,1 +611,1 @@\n-        helper = ExpressionHelper.addListener(helper, observable, (value, o1, o2) -> {throw new RuntimeException();});\n+        helper = ExpressionHelper.addListener(helper, observable, (value, o1, o2) -> {throw new RuntimeException();}, () -> {});\n@@ -624,2 +624,2 @@\n-        helper = ExpressionHelper.addListener(helper, observable, (value, o1, o2) -> {throw new RuntimeException();});\n-        helper = ExpressionHelper.addListener(helper, observable, (value, o1, o2) -> {throw new RuntimeException();});\n+        helper = ExpressionHelper.addListener(helper, observable, (value, o1, o2) -> {throw new RuntimeException();}, () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, (value, o1, o2) -> {throw new RuntimeException();}, () -> {});\n@@ -638,4 +638,4 @@\n-        helper = ExpressionHelper.addListener(helper, observable, (value, o1, o2) -> { throw new RuntimeException();});\n-        helper = ExpressionHelper.addListener(helper, observable, (value, o1, o2) -> { throw new RuntimeException();});\n-        helper = ExpressionHelper.addListener(helper, observable, (o) -> { throw new RuntimeException();});\n-        helper = ExpressionHelper.addListener(helper, observable, (o) -> {throw new RuntimeException();});\n+        helper = ExpressionHelper.addListener(helper, observable, (value, o1, o2) -> { throw new RuntimeException();}, () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, (value, o1, o2) -> { throw new RuntimeException();}, () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, (o) -> { throw new RuntimeException();}, () -> {});\n+        helper = ExpressionHelper.addListener(helper, observable, (o) -> {throw new RuntimeException();}, () -> {});\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ExpressionHelperTest.java","additions":74,"deletions":74,"binary":false,"changes":148,"status":"modified"},{"patch":"@@ -314,1 +314,1 @@\n-            helper = ExpressionHelper.addListener(helper, this, changeListener);\n+            helper = ExpressionHelper.addListener(helper, this, changeListener, () -> {});\n@@ -326,1 +326,1 @@\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n+            helper = ExpressionHelper.addListener(helper, this, listener, () -> {});\n@@ -333,0 +333,5 @@\n+        @Override\n+        public boolean isObserved() {\n+            return helper != null;\n+        }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TextArea.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-            helper = ExpressionHelper.addListener(helper, this, changeListener);\n+            helper = ExpressionHelper.addListener(helper, this, changeListener, () -> {});\n@@ -126,1 +126,1 @@\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n+            helper = ExpressionHelper.addListener(helper, this, listener, () -> {});\n@@ -132,0 +132,5 @@\n+\n+        @Override\n+        public boolean isObserved() {\n+            return helper != null;\n+        }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TextField.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1434,1 +1434,1 @@\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n+            helper = ExpressionHelper.addListener(helper, this, listener, () -> {});\n@@ -1442,1 +1442,1 @@\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n+            helper = ExpressionHelper.addListener(helper, this, listener, () -> {});\n@@ -1449,0 +1449,4 @@\n+        @Override public boolean isObserved() {\n+            return helper != null;\n+        }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TextInputControl.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n-import com.sun.javafx.binding.ExpressionHelper;\n-import javafx.beans.InvalidationListener;\n-import javafx.beans.binding.BooleanExpression;\n+import javafx.beans.binding.BooleanBinding;\n@@ -44,1 +42,1 @@\n-public class TreeShowingExpression extends BooleanExpression {\n+public class TreeShowingExpression extends BooleanBinding {\n@@ -51,2 +49,0 @@\n-    private ExpressionHelper<Boolean> helper;\n-    private boolean valid;\n@@ -73,0 +69,1 @@\n+    @Override\n@@ -78,1 +75,0 @@\n-        valid = false;  \/\/ prevents unregistration from triggering an invalidation notification\n@@ -82,37 +78,0 @@\n-    @Override\n-    public void addListener(InvalidationListener listener) {\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n-    }\n-\n-    @Override\n-    public void removeListener(InvalidationListener listener) {\n-        helper = ExpressionHelper.removeListener(helper, listener);\n-    }\n-\n-    @Override\n-    public void addListener(ChangeListener<? super Boolean> listener) {\n-        helper = ExpressionHelper.addListener(helper, this, listener);\n-    }\n-\n-    @Override\n-    public void removeListener(ChangeListener<? super Boolean> listener) {\n-        helper = ExpressionHelper.removeListener(helper, listener);\n-    }\n-\n-    protected void invalidate() {\n-        if (valid) {\n-            valid = false;\n-            ExpressionHelper.fireValueChangedEvent(helper);\n-        }\n-    }\n-\n-    @Override\n-    public boolean get() {\n-        if (!valid) {\n-            updateTreeShowing();\n-            valid = true;\n-        }\n-\n-        return treeShowing;\n-    }\n-\n@@ -152,0 +111,5 @@\n+\n+    @Override\n+    protected boolean computeValue() {\n+        return treeShowing;\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/TreeShowingExpression.java","additions":8,"deletions":44,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -8610,1 +8610,1 @@\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n+            helper = ExpressionHelper.addListener(helper, this, listener, () -> {});\n@@ -8620,1 +8620,1 @@\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n+            helper = ExpressionHelper.addListener(helper, this, listener, () -> {});\n@@ -8628,0 +8628,5 @@\n+        @Override\n+        public final boolean isObserved() {\n+            return helper != null;\n+        }\n+\n@@ -9763,1 +9768,1 @@\n-            extends ReadOnlyObjectProperty<Transform> {\n+            extends ReadOnlyObjectPropertyBase<Transform> {\n@@ -9770,2 +9775,0 @@\n-        private ExpressionHelper<Transform> helper;\n-\n@@ -9775,20 +9778,0 @@\n-        @Override\n-        public void addListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override\n-        public void removeListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n-        @Override\n-        public void addListener(ChangeListener<? super Transform> listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override\n-        public void removeListener(ChangeListener<? super Transform> listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n@@ -9822,1 +9805,1 @@\n-                ExpressionHelper.fireValueChangedEvent(helper);\n+                fireValueChangedEvent();\n@@ -9832,2 +9815,1 @@\n-            extends ReadOnlyObjectProperty<Bounds> {\n-        private ExpressionHelper<Bounds> helper;\n+            extends ReadOnlyObjectPropertyBase<Bounds> {\n@@ -9835,1 +9817,0 @@\n-\n@@ -9838,20 +9819,0 @@\n-        @Override\n-        public void addListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override\n-        public void removeListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n-        @Override\n-        public void addListener(ChangeListener<? super Bounds> listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override\n-        public void removeListener(ChangeListener<? super Bounds> listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n@@ -9871,1 +9832,1 @@\n-                ExpressionHelper.fireValueChangedEvent(helper);\n+                fireValueChangedEvent();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":11,"deletions":50,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -916,1 +916,1 @@\n-    private final class InsetsProperty extends ReadOnlyObjectProperty<Insets> {\n+    private final class InsetsProperty extends ReadOnlyObjectPropertyBase<Insets> {\n@@ -918,1 +918,0 @@\n-        private ExpressionHelper<Insets> helper = null;\n@@ -923,16 +922,0 @@\n-        @Override public void addListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override public void removeListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n-        @Override public void addListener(ChangeListener<? super Insets> listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override public void removeListener(ChangeListener<? super Insets> listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n@@ -943,1 +926,1 @@\n-            ExpressionHelper.fireValueChangedEvent(helper);\n+            fireValueChangedEvent();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Region.java","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import com.sun.javafx.binding.ExpressionHelper;\n@@ -36,0 +35,1 @@\n+import javafx.beans.property.ReadOnlyDoublePropertyBase;\n@@ -49,2 +49,0 @@\n-import javafx.beans.InvalidationListener;\n-import javafx.beans.value.ChangeListener;\n@@ -1204,1 +1202,1 @@\n-    private abstract class TileSizeProperty extends ReadOnlyDoubleProperty {\n+    private abstract class TileSizeProperty extends ReadOnlyDoublePropertyBase {\n@@ -1206,1 +1204,0 @@\n-        private ExpressionHelper<Number> helper;\n@@ -1216,1 +1213,0 @@\n-\n@@ -1227,20 +1223,0 @@\n-        @Override\n-        public void addListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override\n-        public void removeListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n-        @Override\n-        public void addListener(ChangeListener<? super Number> listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override\n-        public void removeListener(ChangeListener<? super Number> listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n@@ -1260,1 +1236,1 @@\n-                ExpressionHelper.fireValueChangedEvent(helper);\n+                fireValueChangedEvent();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/TilePane.java","additions":3,"deletions":27,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import com.sun.javafx.binding.ExpressionHelper;\n@@ -44,1 +43,1 @@\n-import javafx.beans.InvalidationListener;\n+\n@@ -47,0 +46,1 @@\n+import javafx.beans.property.ReadOnlyBooleanPropertyBase;\n@@ -48,1 +48,0 @@\n-import javafx.beans.value.ChangeListener;\n@@ -677,1 +676,1 @@\n-            extends ReadOnlyBooleanProperty {\n+            extends ReadOnlyBooleanPropertyBase {\n@@ -679,1 +678,0 @@\n-        private ExpressionHelper<Boolean> helper;\n@@ -683,20 +681,0 @@\n-        @Override\n-        public void addListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override\n-        public void removeListener(InvalidationListener listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n-        @Override\n-        public void addListener(ChangeListener<? super Boolean> listener) {\n-            helper = ExpressionHelper.addListener(helper, this, listener);\n-        }\n-\n-        @Override\n-        public void removeListener(ChangeListener<? super Boolean> listener) {\n-            helper = ExpressionHelper.removeListener(helper, listener);\n-        }\n-\n@@ -716,1 +694,1 @@\n-                ExpressionHelper.fireValueChangedEvent(helper);\n+                fireValueChangedEvent();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/transform\/Transform.java","additions":4,"deletions":26,"binary":false,"changes":30,"status":"modified"}]}