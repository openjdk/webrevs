{"files":[{"patch":"@@ -289,0 +289,4 @@\n+    public static boolean isInitialCssState(Node node) {\n+        return nodeAccessor.isInitialCssState(node);\n+    }\n+\n@@ -394,0 +398,1 @@\n+        boolean isInitialCssState(Node node);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/NodeHelper.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -73,1 +73,2 @@\n-        TransitionDefinition transition = this.origin != null && getBean() instanceof Node node ?\n+        \/\/ If the value is applied for the first time, we don't start a transition.\n+        TransitionDefinition transition = getBean() instanceof Node node && !NodeHelper.isInitialCssState(node) ?\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableBooleanProperty.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -73,3 +73,2 @@\n-        \/\/ If this.origin == null, we're setting the value for the first time.\n-        \/\/ No transition should be started in this case.\n-        TransitionDefinition transition = this.origin != null && getBean() instanceof Node node ?\n+        \/\/ If the value is applied for the first time, we don't start a transition.\n+        TransitionDefinition transition = getBean() instanceof Node node && !NodeHelper.isInitialCssState(node) ?\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableDoubleProperty.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -73,1 +73,2 @@\n-        TransitionDefinition transition = this.origin != null && getBean() instanceof Node node ?\n+        \/\/ If the value is applied for the first time, we don't start a transition.\n+        TransitionDefinition transition = getBean() instanceof Node node && !NodeHelper.isInitialCssState(node) ?\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableFloatProperty.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -73,1 +73,2 @@\n-        TransitionDefinition transition = this.origin != null && getBean() instanceof Node node ?\n+        \/\/ If the value is applied for the first time, we don't start a transition.\n+        TransitionDefinition transition = getBean() instanceof Node node && !NodeHelper.isInitialCssState(node) ?\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableIntegerProperty.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -74,3 +74,2 @@\n-        \/\/ If this.origin == null, we're setting the value for the first time.\n-        \/\/ No transition should be started in this case.\n-        TransitionDefinition transition = this.origin != null && getBean() instanceof Node node ?\n+        \/\/ If the value is applied for the first time, we don't start a transition.\n+        TransitionDefinition transition = getBean() instanceof Node node && !NodeHelper.isInitialCssState(node) ?\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableLongProperty.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -106,2 +106,1 @@\n-        \/\/ If this.origin == null, we're setting the value for the first time.\n-        \/\/ No transition should be started in this case.\n+        \/\/ If the value is applied for the first time, we don't start a transition.\n@@ -109,1 +108,1 @@\n-            this.origin != null && getBean() instanceof Node node ?\n+            getBean() instanceof Node node && !NodeHelper.isInitialCssState(node) ?\n@@ -149,2 +148,1 @@\n-        \/\/ If this.origin == null, we're setting the value for the first time.\n-        \/\/ No transition should be started in this case.\n+        \/\/ If the value is applied for the first time, we don't start a transition.\n@@ -152,1 +150,1 @@\n-            this.origin != null && getBean() instanceof Node node ?\n+            getBean() instanceof Node node && !NodeHelper.isInitialCssState(node) ?\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableObjectProperty.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -74,2 +74,1 @@\n-        \/\/ If this.origin == null, we're setting the value for the first time.\n-        \/\/ No transition should be started in this case.\n+        \/\/ If the value is applied for the first time, we don't start a transition.\n@@ -77,1 +76,1 @@\n-            this.origin != null && getBean() instanceof Node node ?\n+            getBean() instanceof Node node && !NodeHelper.isInitialCssState(node) ?\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableStringProperty.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -598,0 +598,5 @@\n+            @Override\n+            public boolean isInitialCssState(Node node) {\n+                return node.initialCssState;\n+            }\n+\n@@ -1013,0 +1018,2 @@\n+                    resetInitialCssStateFlag();\n+\n@@ -1107,0 +1114,4 @@\n+            if (oldScene != null) {\n+                oldScene.unregisterClearInitialCssStageFlag(this);\n+            }\n+\n@@ -1109,0 +1120,2 @@\n+            } else {\n+                resetInitialCssStateFlag();\n@@ -10069,0 +10082,19 @@\n+    \/**\n+     * A node is considered to be in its initial CSS state if it wasn't shown in a scene graph before.\n+     * This flag is cleared after CSS processing was completed in a Scene pulse event. Note that manual\n+     * calls to {@link #applyCss()} or similar methods will not clear this flag, since we consider all\n+     * CSS processing before the Scene pulse to be part of the node's initial state.\n+     *\/\n+    private boolean initialCssState = true;\n+\n+    private void resetInitialCssStateFlag() {\n+        initialCssState = true;\n+        Scene scene = getScene();\n+        if (scene != null) {\n+            scene.registerClearInitialCssStateFlag(this);\n+        }\n+    }\n+\n+    void clearInitialCssStateFlag() {\n+        initialCssState = false;\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -592,0 +592,23 @@\n+\n+        if (!clearInitialCssStateNodes.isEmpty()) {\n+            for (var node : clearInitialCssStateNodes) {\n+                node.clearInitialCssStateFlag();\n+            }\n+\n+            clearInitialCssStateNodes.clear();\n+        }\n+    }\n+\n+    \/**\n+     * A list of nodes that have expressed their interest to be notified when the next CSS pass\n+     * is completed. Nodes will use this event to determine whether they are in their initial\n+     * CSS state (see {@link Node#initialCssState}.\n+     *\/\n+    private final Set<Node> clearInitialCssStateNodes = Collections.newSetFromMap(new IdentityHashMap<>());\n+\n+    void registerClearInitialCssStateFlag(Node node) {\n+        clearInitialCssStateNodes.add(node);\n+    }\n+\n+    void unregisterClearInitialCssStageFlag(Node node) {\n+        clearInitialCssStateNodes.remove(node);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Scene.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -201,1 +201,0 @@\n-        stage.show();\n@@ -220,0 +219,1 @@\n+        stage.show();\n@@ -243,0 +243,1 @@\n+        stage.show();\n@@ -274,0 +275,1 @@\n+        stage.show();\n@@ -304,0 +306,1 @@\n+        stage.show();\n@@ -327,0 +330,1 @@\n+        stage.show();\n@@ -350,0 +354,1 @@\n+        stage.show();\n@@ -367,0 +372,1 @@\n+        stage.show();\n@@ -406,0 +412,1 @@\n+        stage.show();\n@@ -430,0 +437,1 @@\n+        stage.show();\n@@ -454,0 +462,1 @@\n+        stage.show();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/StyleableProperty_transition_Test.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-        stage.show();\n@@ -92,1 +91,1 @@\n-        node.applyCss();\n+        stage.show();\n@@ -135,1 +134,1 @@\n-        node.applyCss();\n+        stage.show();\n@@ -164,1 +163,1 @@\n-        node.applyCss();\n+        stage.show();\n@@ -202,1 +201,1 @@\n-        node.applyCss();\n+        stage.show();\n@@ -240,1 +239,1 @@\n-        node.applyCss();\n+        stage.show();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Node_transitionEvent_Test.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -70,1 +70,0 @@\n-        stage.show();\n@@ -191,0 +190,4 @@\n+        \/\/ Showing the stage causes the first Scene CSS pass, after which the node is\n+        \/\/ eligible for CSS transitions.\n+        stage.show();\n+\n@@ -216,0 +219,4 @@\n+        \/\/ Showing the stage causes the first Scene CSS pass, after which the node is\n+        \/\/ eligible for CSS transitions.\n+        stage.show();\n+\n@@ -241,0 +248,4 @@\n+        \/\/ Showing the stage causes the first Scene CSS pass, after which the node is\n+        \/\/ eligible for CSS transitions.\n+        stage.show();\n+\n@@ -254,0 +265,67 @@\n+    @Test\n+    public void testTransitionIsStartedWhenInitialPropertyIsNotSpecifiedInStylesheet() {\n+        String url = \"data:text\/css;base64,\" + Base64.getUrlEncoder().encodeToString(\"\"\"\n+            .testClass { transition: all 1s; }\n+            .testClass:hover { -fx-opacity: 0.5; }\n+            \"\"\".getBytes(StandardCharsets.UTF_8));\n+\n+        scene.getStylesheets().add(url);\n+        node.getStyleClass().add(\"testClass\");\n+        node.applyCss();\n+        assertNull(NodeShim.getTransitionTimers(node));\n+\n+        stage.show();\n+        node.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"hover\"), true);\n+        toolkit.firePulse();\n+        assertEquals(1, NodeShim.getTransitionTimers(node).size());\n+    }\n+\n+    @Test\n+    public void testTransitionIsOnlyStartedAfterSceneHasProcessedCSS() {\n+        String url = \"data:text\/css;base64,\" + Base64.getUrlEncoder().encodeToString(\"\"\"\n+            .testClass { -fx-opacity: 0; transition: all 1s; }\n+            .testClass:hover { -fx-opacity: 1; }\n+            \"\"\".getBytes(StandardCharsets.UTF_8));\n+\n+        scene.getStylesheets().add(url);\n+        node.getStyleClass().add(\"testClass\");\n+        node.applyCss();\n+        assertNull(NodeShim.getTransitionTimers(node));\n+\n+        \/\/ Even though we apply CSS here, no transition is started because the Scene has not\n+        \/\/ processed CSS in response to a pulse event yet.\n+        node.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"hover\"), true);\n+        node.applyCss();\n+        assertNull(NodeShim.getTransitionTimers(node));\n+\n+        \/\/ This will fire the first pulse event, which also does not start the transition\n+        \/\/ because the initial CSS pass only establishes the initial CSS state for the node.\n+        node.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"hover\"), false);\n+        stage.show();\n+        assertNull(NodeShim.getTransitionTimers(node));\n+\n+        \/\/ This will fire the second pulse event, which will start the transition.\n+        node.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"hover\"), true);\n+        toolkit.firePulse();\n+        assertEquals(1, NodeShim.getTransitionTimers(node).size());\n+    }\n+\n+    @Test\n+    public void testInitialCssStateFlagIsSetWhenAddedToOrRemovedFromScene() {\n+        stage.show();\n+\n+        \/\/ The initial CSS pass is already done, so the initialCssState flag is cleared.\n+        assertFalse(NodeHelper.isInitialCssState(node));\n+\n+        \/\/ Removing the node from the scene resets the initialCssState flag.\n+        ((Group)scene.getRoot()).getChildren().remove(0);\n+        assertTrue(NodeHelper.isInitialCssState(node));\n+\n+        \/\/ The initialCssState flag is set on a newly-created node.\n+        var node2 = new Rectangle();\n+        assertTrue(NodeHelper.isInitialCssState(node2));\n+\n+        \/\/ The flag is also set when the new node is added to the scene.\n+        ((Group)scene.getRoot()).getChildren().add(node2);\n+        assertTrue(NodeHelper.isInitialCssState(node));\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Node_transition_Test.java","additions":79,"deletions":1,"binary":false,"changes":80,"status":"modified"}]}