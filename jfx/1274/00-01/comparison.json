{"files":[{"patch":"@@ -740,0 +740,30 @@\n+    \/**\n+     * When DatePicker looses focus with misformatted text in the editor,\n+     * checks that the value is not changed, and the text is reverted to the value\n+     *\/\n+    @Test\n+    public void testFocusLostWithTypo() {\n+        \/\/datePicker.setEditable(true); \/\/ other test cases have it .is this necessary?\n+\n+        Button button = new Button();\n+        StageLoader stageLoader = new StageLoader(new HBox(datePicker, button));\n+\n+        \/\/ initial value\n+        datePicker.setValue(LocalDate.of(2015, 03, 25));\n+        assertEquals(\"3\/25\/2015\",datePicker.getEditor().getText());\n+\n+        \/\/ set misformatted text\n+        \/\/stageLoader.getStage().requestFocus(); \/\/ other test cases have it . is this necessary?\n+        datePicker.requestFocus();\n+        datePicker.getEditor().setText(\"11\/24\/20xx\");\n+\n+        \/\/ loosing focus triggers cancelEdit() because the text cannot be parsed\n+        button.requestFocus();\n+\n+        \/\/ check that value remains unchanged, and text is reverted\n+        assertEquals(LocalDate.of(2015, 03, 25),datePicker.getValue());\n+        assertEquals(\"3\/25\/2015\",datePicker.getEditor().getText());\n+\n+        stageLoader.dispose();\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/DatePickerTest.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1,214 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package test.robot.javafx.scene;\n-\n-import java.time.LocalDate;\n-import java.time.format.DateTimeFormatter;\n-import java.util.concurrent.CountDownLatch;\n-\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n-import javafx.application.Application;\n-import javafx.application.Platform;\n-import javafx.beans.value.ChangeListener;\n-import javafx.scene.Scene;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.DatePicker;\n-import javafx.scene.input.KeyCode;\n-import javafx.scene.input.MouseButton;\n-import javafx.scene.layout.VBox;\n-import javafx.scene.robot.Robot;\n-import javafx.stage.Stage;\n-import javafx.stage.StageStyle;\n-import javafx.stage.WindowEvent;\n-import javafx.util.StringConverter;\n-\n-import test.util.Util;\n-\n-public class DatePickerOnFocusLostTest {\n-\n-    static CountDownLatch startupLatch = new CountDownLatch(1);\n-    static Robot robot;\n-    static volatile Stage stage;\n-    static volatile Scene scene;\n-    static final int SCENE_WIDTH = 200;\n-    static final int SCENE_HEIGHT = SCENE_WIDTH;\n-    static VBox root;\n-    DatePicker datePicker;\n-    Button button; \/\/ a button to steal the focus\n-\n-    int onChangeListenerCalled; \/\/ counter for onChangeListener callbacks\n-\n-    String INITIAL_DATE_TEXT = \"2015-03-25\";\n-    \/\/ set up a specific time format, coz it is not known what will be used when running the test\n-    DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n-    LocalDate now = LocalDate.parse(INITIAL_DATE_TEXT); \/\/ LocalDate.parse() uses the same format\n-\n-    private void mouseClick(double x, double y) {\n-        Util.runAndWait(() -> {\n-            robot.mouseMove((int) (scene.getWindow().getX() + scene.getX() + x),\n-                    (int) (scene.getWindow().getY() + scene.getY() + y));\n-            robot.mousePress(MouseButton.PRIMARY);\n-            robot.mouseRelease(MouseButton.PRIMARY);\n-        });\n-    }\n-\n-    @Test\n-    public void testDatePickerCommitNoTypo() throws Exception {\n-        testDatePickerCommit(false);\n-    }\n-\n-    @Test\n-    public void testDatePickerCannotCommitTypo() throws Exception {\n-        testDatePickerCommit(true);\n-    }\n-\n-    \/\/ This test is for verifying a specific behavior.\n-    \/\/ 1. Click on datePicker\n-    \/\/ 2. Modify with keystrokes the day of month value, optionally with typo\n-    \/\/ 3. Click on button to grab the focus and hence attempt to datePicker.commitValue()\n-    \/\/ 4. Verify that in case of typo, the value was reverted, as well as the editor's text\n-    public void testDatePickerCommit(boolean typo) throws Exception {\n-\n-        Thread.sleep(1000); \/\/ Wait for stage to layout\n-        onChangeListenerCalled = 0;\n-\n-        \/\/ 1 datepicker gets focus\n-        mouseClick(datePicker.getLayoutX() + datePicker.getWidth() \/ 2,\n-                datePicker.getLayoutY() + datePicker.getHeight() \/ 2);\n-\n-        \/\/ 2 type, maybe with typo\n-        Util.runAndWait(() -> {\n-            try {\n-                robot.keyType(KeyCode.BACK_SPACE);\n-                robot.keyType(KeyCode.BACK_SPACE);\n-                Thread.sleep(100);\n-                if (typo) {\n-                    robot.keyType(KeyCode.X);\n-                    robot.keyType(KeyCode.X);\n-                } else {\n-                    robot.keyType(KeyCode.NUMPAD1);\n-                    robot.keyType(KeyCode.NUMPAD5);\n-\n-                }\n-\n-            } catch (Exception e) {\n-                throw new RuntimeException(e);\n-            }\n-        });\n-\n-        Thread.sleep(100);\n-\n-        \/\/ 3 button want focus\n-        mouseClick(button.getLayoutX() + button.getWidth() \/ 2, button.getLayoutY() + button.getHeight() \/ 2);\n-        Thread.sleep(100);\n-\n-        \/\/ 4 check that in case of typo the text value is reverted (fixed by patch for JDK-8303478)\n-        Assert.assertEquals(typo,INITIAL_DATE_TEXT.equals(datePicker.getEditor().getText()));\n-\n-        \/\/ 5 check that in case of typo, the value has not changed (already working as expected before the patch)\n-        Assert.assertEquals(typo, datePicker.valueProperty().get().equals(now));\n-\n-        \/\/ 6 check if onChangeListener was called (already working as expected before the patch)\n-        if (typo)\n-            Assert.assertEquals(onChangeListenerCalled, 0);\n-        else\n-            Assert.assertEquals(onChangeListenerCalled, 1);\n-\n-    }\n-\n-    @After\n-    public void resetUI() {\n-        Util.runAndWait(() -> {\n-            root.getChildren().clear();\n-        });\n-    }\n-\n-    @Before\n-    public void setupUI() {\n-        Util.runAndWait(() -> {\n-\n-            datePicker = new DatePicker(now);\n-\n-            datePicker.setConverter(\n-                    new StringConverter<>() {\n-\n-                        @Override\n-                        public String toString(LocalDate date) {\n-                            return (date != null) ? dateFormatter.format(date) : \"\";\n-                        }\n-\n-                        @Override\n-                        public LocalDate fromString(String string) {\n-                            return (string != null && !string.isEmpty())\n-                                    ? LocalDate.parse(string, dateFormatter)\n-                                    : null;\n-                        }\n-                    });\n-\n-            \/\/ Note that change listener was already beeing called as expected before the patch\n-            ChangeListener chListener = (observable, oldValue, newValue) -> {\n-                onChangeListenerCalled++;\n-            };\n-            datePicker.valueProperty().addListener(chListener);\n-\n-            root.getChildren().add(datePicker);\n-            button = new Button(\"...\");\n-            root.getChildren().add(button);\n-\n-        });\n-    }\n-\n-    @BeforeClass\n-    public static void initFX() throws Exception {\n-        Util.launch(startupLatch, TestApp.class);\n-    }\n-\n-    @AfterClass\n-    public static void exit() {\n-        Util.shutdown(stage);\n-    }\n-\n-    public static class TestApp extends Application {\n-        @Override\n-        public void start(Stage primaryStage) {\n-            robot = new Robot();\n-            stage = primaryStage;\n-            root = new VBox();\n-            scene = new Scene(root, SCENE_WIDTH, SCENE_HEIGHT);\n-            stage.setScene(scene);\n-            stage.initStyle(StageStyle.UNDECORATED);\n-            stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> Platform.runLater(startupLatch::countDown));\n-            stage.setAlwaysOnTop(true);\n-            stage.show();\n-        }\n-    }\n-\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/DatePickerOnFocusLostTest.java","additions":0,"deletions":214,"binary":false,"changes":214,"status":"deleted"}]}