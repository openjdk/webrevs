{"files":[{"patch":"@@ -256,0 +256,1 @@\n+          <li><a href=\"#introtransitions\">Transitions<\/a>\n@@ -280,0 +281,1 @@\n+          <li><a href=\"#typeeasingfunction\">&lt;easing-function&gt;<\/a><\/li>\n@@ -683,0 +685,74 @@\n+\n+    <h3><a id=\"introtransitions\">Transitions<\/a><\/h3>\n+    <p>JavaFX supports <em>implicit transitions<\/em> for properties that are styled by CSS. When a property value is\n+        changed, it smoothly transitions to the new value over a period of time. Implicit transitions are supported\n+        for all primitive types, as well as for types that implement <code>javafx.animation.Interpolatable<\/code>.<\/p>\n+    <p>Transitions can be defined for any node in the JavaFX scene graph with the following properties:<\/p>\n+    <table class=\"csspropertytable\">\n+    <caption>Transition Properties<\/caption>\n+      <thead>\n+        <tr>\n+        <th class=\"propertyname\" scope=\"col\">CSS Property<\/th>\n+        <th class=\"value\" scope=\"col\">Values<\/th>\n+        <th scope=\"col\">Default<\/th>\n+        <th scope=\"col\">Comments<\/th>\n+        <\/tr>\n+      <\/thead>\n+      <tbody>\n+        <tr>\n+        <th class=\"propertyname\" scope=\"row\">transition&#8209;property<\/th>\n+          <td class=\"value\">[ none | all | &lt;custom&#8209;ident&gt;# ]<\/td>\n+          <td class=\"default\">all<\/td>\n+          <td>The name of the CSS property to which the transition is applied.<\/td>\n+        <\/tr>\n+        <tr>\n+        <th class=\"propertyname\" scope=\"row\">transition&#8209;duration<\/th>\n+          <td class=\"value\"><a href=\"#typeduration\" class=\"typelink\">&lt;duration&gt;#<\/a><\/td>\n+          <td class=\"default\">0s<\/td>\n+          <td>The duration of the transition, not including an optional delay before the transition starts.<\/td>\n+        <\/tr>\n+        <tr>\n+        <th class=\"propertyname\" scope=\"row\">transition&#8209;timing&#8209;function<\/th>\n+          <td class=\"value\"><a href=\"#typeeasingfunction\" class=\"typelink\">&lt;easing&#8209;function&gt;#<\/a><\/td>\n+          <td class=\"default\">ease<\/td>\n+          <td>The easing function that is used to calculate the intermediate values.<\/td>\n+        <\/tr>\n+        <tr>\n+        <th class=\"propertyname\" scope=\"row\">transition&#8209;delay<\/th>\n+          <td class=\"value\"><a href=\"#typeduration\" class=\"typelink\">&lt;duration&gt;#<\/a><\/td>\n+          <td class=\"default\">0s<\/td>\n+          <td>The delay after which the transition starts. If a negative delay is specified, the transition starts\n+              as if it had already been running for the specified time.<\/td>\n+        <\/tr>\n+        <tr>\n+        <th class=\"propertyname\" scope=\"row\">transition<\/th>\n+        <td class=\"value\">\n+            &lt;single-transition&gt;#\n+            <br\/><br\/>\n+            <strong>where<\/strong> &lt;single&#8209;transition&gt; = [ none | all | &lt;custom&#8209;ident&gt; ] ||\n+            <a href=\"#typeduration\" class=\"typelink\">&lt;duration&gt;<\/a> ||\n+            <a href=\"#typeeasingfunction\" class=\"typelink\">&lt;easing&#8209;function&gt;<\/a> ||\n+            <a href=\"#typeduration\" class=\"typelink\">&lt;duration&gt;<\/a>\n+        <\/td>\n+        <td class=\"default\"><\/td>\n+        <td>Short-hand notation for the individual properties. Note that while the order of the values generally\n+            doesn't matter, the first duration is always assigned to the <strong>transition-duration<\/strong>\n+            property, while the second duration is always assigned to the <strong>transition-delay<\/strong>\n+            property.<\/td>\n+        <\/tr>\n+      <\/tbody>\n+    <\/table>\n+    <h4>Example<\/h4>\n+    <p>A button that smoothly changes its opacity on mouse-hover can be defined in a stylesheet like this:<\/p>\n+    <p class=\"example\">\n+        .button {<\/br>\n+        &nbsp;&nbsp;&nbsp; -fx-opacity: 0.8;<\/br>\n+        &nbsp;&nbsp;&nbsp; transition-property: -fx-opacity;<\/br>\n+        &nbsp;&nbsp;&nbsp; transition-duration: 0.5s;<\/br>\n+        }<\/br>\n+        <\/br>\n+        .button:hover {<\/br>\n+        &nbsp;&nbsp;&nbsp; -fx-opacity: 1;<\/br>\n+        }\n+    <\/p>\n+\n@@ -1582,0 +1658,122 @@\n+\n+    <h3><a id=\"typeeasingfunction\">&lt;easing-function&gt;<\/a><\/h3>\n+    <p class=\"grammar\">linear | &lt;cubic-bezier-easing-function&gt; | &lt;step-easing-function&gt; | &lt;fx-easing-function&gt;<\/p>\n+    <p><strong>Linear<\/strong> <span class=\"grammar\" style=\"font-size: smaller;\">linear<\/span><br\/>\n+       The linear easing function is a simple linear mapping from the input progress value to the output progress value.<\/p>\n+    <figure style=\"display: inline-block\">\n+        <img src=\"easing-linear.svg\" width=\"200\" alt=\"Linear easing function\">\n+    <\/figure>\n+    <p><strong>Cubic Bézier Easing Functions<\/strong> <span class=\"grammar\" style=\"font-size: smaller;\">&lt;cubic-bezier-easing-function&gt;<\/span><\/br><\/p>\n+    <p class=\"grammar\">ease | ease-in | ease-out | ease-in-out | cubic-bezier(<a href=\"#typenumber\" class=\"typelink\">&lt;number&nbsp;[0,1]&gt;<\/a>, <a href=\"#typenumber\" class=\"typelink\">&lt;number&gt;<\/a>, <a href=\"#typenumber\" class=\"typelink\">&lt;number&nbsp;[0,1]&gt;<\/a>, <a href=\"#typenumber\" class=\"typelink\">&lt;number&gt;<\/a>)<\/p>\n+    <p>The values have the following meaning:<\/p>\n+    <table style=\"margin-left: 40px;\">\n+        <tr>\n+            <td style=\"width: 120px; vertical-align: top\"><span class=\"grammar\">ease<\/span><\/td>\n+            <td>equivalent to <span class=\"grammar\">cubic-bezier(0.25, 0.1, 0.25, 1)<\/span><\/td>\n+        <\/tr>\n+        <tr>\n+            <td style=\"width: 120px; vertical-align: top\"><span class=\"grammar\">ease-in<\/span><\/td>\n+            <td>equivalent to <span class=\"grammar\">cubic-bezier(0.42, 0, 1, 1)<\/span><\/td>\n+        <\/tr>\n+        <tr>\n+            <td style=\"width: 120px; vertical-align: top\"><span class=\"grammar\">ease-out<\/span><\/td>\n+            <td>equivalent to <span class=\"grammar\">cubic-bezier(0, 0, 0.58, 1)<\/span><\/td>\n+        <\/tr>\n+        <tr>\n+            <td style=\"width: 120px; vertical-align: top\"><span class=\"grammar\">ease-in-out<\/span><\/td>\n+            <td>equivalent to <span class=\"grammar\">cubic-bezier(0.42, 0, 0.58, 1)<\/span><\/td>\n+        <\/tr>\n+        <tr>\n+            <td style=\"width: 120px; vertical-align: top\"><span class=\"grammar\">cubic-bezier<\/span><\/td>\n+            <td>defines the control points P1 and P2 using four real numbers: (x<sub>P1<\/sub>, y<sub>P1<\/sub>, x<sub>P2<\/sub>, y<sub>P2<\/sub>)<\/td>\n+        <\/tr>\n+    <\/table>\n+    <p>A cubic Bézier function is defined by four control points, where P0 is fixed at (0,0) and P3 is fixed at (1,1).\n+       P1 and P2 are restricted to the interval [0,1] on the input progress axis:<\/p>\n+    <figure style=\"display: inline-block\">\n+        <img src=\"easing-cubicbezier.svg\" width=\"200\" alt=\"Cubic Bèzier easing function\">\n+    <\/figure>\n+    <p><strong>Step Easing Functions<\/strong> <span class=\"grammar\" style=\"font-size: smaller;\">&lt;step-easing-function&gt;<\/span><\/p>\n+    <p class=\"grammar\">step-start | step-end | steps(<a href=\"#typenumber\" class=\"typelink\">&lt;integer&gt;<\/a>[,&lt;step-position&gt;]?)<\/p>\n+    <p class=\"grammar\">where &lt;step-position&gt; = jump-start | jump-end | jump-none | jump-both | start | end<\/p>\n+    <p>The values have the following meaning:<\/p>\n+    <table style=\"margin-left: 40px;\">\n+        <tr>\n+            <td style=\"width: 120px; vertical-align: top\"><span class=\"grammar\">step-start<\/span><\/td>\n+            <td>equivalent to <span class=\"grammar\">steps(1, start)<\/span><\/td>\n+        <\/tr>\n+        <tr>\n+            <td style=\"width: 120px; vertical-align: top\"><span class=\"grammar\">step-end<\/span><\/td>\n+            <td>equivalent to <span class=\"grammar\">steps(1, end)<\/span><\/td>\n+        <\/tr>\n+        <tr>\n+            <td style=\"width: 120px; vertical-align: top\"><span class=\"grammar\">steps<\/span><\/td>\n+            <td>defines a step function with <a href=\"#typenumber\" class=\"typelink\">&lt;integer&gt;<\/a> intervals\n+                and an optional <span class=\"grammar\">&lt;step-position&gt;<\/span>;<br\/>if omitted,\n+                <span class=\"grammar\">end<\/span> is implied<\/span>\n+            <\/td>\n+        <\/tr>\n+        <tr><td><br\/><\/td><\/tr>\n+        <tr>\n+            <td style=\"width: 120px; vertical-align: top\"><span class=\"grammar\">jump-start<\/span><\/td>\n+            <td>the interval starts with a rise point when the input progress value is 0<\/td>\n+        <\/tr>\n+        <tr>\n+            <td style=\"width: 120px; vertical-align: top\"><span class=\"grammar\">jump-end<\/span><\/td>\n+            <td>the interval ends with a rise point when the input progress value is 1<\/td>\n+        <\/tr>\n+        <tr>\n+            <td style=\"width: 120px; vertical-align: top\"><span class=\"grammar\">jump-none<\/span><\/td>\n+            <td>all rise points are within the open interval (0..1)<\/td>\n+        <\/tr>\n+        <tr>\n+            <td style=\"width: 120px; vertical-align: top\"><span class=\"grammar\">jump-both<\/span><\/td>\n+            <td>the interval starts with a rise point when the input progress value is 0,\n+                and ends with a rise point when the input progress value is 1<\/td>\n+        <\/tr>\n+        <tr>\n+            <td style=\"width: 120px; vertical-align: top\"><span class=\"grammar\">start<\/span><\/td>\n+            <td>equivalent to <span class=\"grammar\">jump-start<\/span><\/td>\n+        <\/tr>\n+        <tr>\n+            <td style=\"width: 120px; vertical-align: top\"><span class=\"grammar\">end<\/span><\/td>\n+            <td>equivalent to <span class=\"grammar\">jump-end<\/span><\/td>\n+        <\/tr>\n+    <\/table>\n+    <p>Examples of step easing functions:<\/p>\n+    <figure style=\"display: inline-block\">\n+        <img src=\"easing-stepstart.svg\" width=\"200\" alt=\"jump-start easing function\">\n+        <figcaption style=\"margin-left: 30px\" class=\"grammar\">steps(3, jump-start)<\/figcaption>\n+    <\/figure>\n+    <figure style=\"display: inline-block\">\n+        <img src=\"easing-stepend.svg\" width=\"200\" alt=\"jump-end easing function\">\n+        <figcaption style=\"margin-left: 30px\" class=\"grammar\">steps(3, jump-end)<\/figcaption>\n+    <\/figure>\n+    <figure style=\"display: inline-block\">\n+        <img src=\"easing-stepnone.svg\" width=\"200\" alt=\"jump-none easing function\">\n+        <figcaption style=\"margin-left: 30px\" class=\"grammar\">steps(3, jump-none)<\/figcaption>\n+    <\/figure>\n+    <figure style=\"display: inline-block\">\n+        <img src=\"easing-stepboth.svg\" width=\"200\" alt=\"jump-both easing function\">\n+        <figcaption style=\"margin-left: 30px\" class=\"grammar\">steps(3, jump-both)<\/figcaption>\n+    <\/figure>\n+    <p><strong>SMIL 3.0 Easing Functions<\/strong> <span class=\"grammar\" style=\"font-size: smaller;\">&lt;fx-easing-function&gt;<\/span><\/br><\/p>\n+    <p class=\"grammar\">-fx-ease-in | -fx-ease-out | -fx-ease-both<\/p>\n+    <p>The values have the following meaning:<\/p>\n+    <table style=\"margin-left: 40px;\">\n+        <tr>\n+            <td style=\"width: 120px; vertical-align: top\"><span class=\"grammar\">-fx-ease-in<\/span><\/td>\n+            <td>SMIL 3.0 ease-in function with an acceleration factor of 0.2<\/td>\n+        <\/tr>\n+        <tr>\n+            <td style=\"width: 120px; vertical-align: top\"><span class=\"grammar\">-fx-ease-out<\/span><\/td>\n+            <td>SMIL 3.0 ease-out function with a deceleration factor of 0.2<\/td>\n+        <\/tr>\n+        <tr>\n+            <td style=\"width: 120px; vertical-align: top\"><span class=\"grammar\">-fx-ease-both<\/span><\/td>\n+            <td>SMIL 3.0 ease-in\/out function with an acceleration and decelaration factor of 0.2<\/td>\n+        <\/tr>\n+    <\/table>\n+    <p>These functions are provided for compatibility with <code>javafx.animation.Interpolator<\/code>\n+       implementations of SMIL 3.0 cubic bezier easing functions.<\/p>\n+\n","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/cssref.html","additions":198,"deletions":0,"binary":false,"changes":198,"status":"modified"},{"patch":"@@ -0,0 +1,20 @@\n+<svg viewBox=\"-120 -25 660 660\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\">\r\n+  <rect x=\"0\" y=\"0\" width=\"512\" height=\"512\" style=\"fill: #e3e3e3; stroke: rgb(100, 100, 100); stroke-width: 6px;\"><\/rect>\r\n+  <ellipse style=\"stroke: #000; paint-order: stroke; stroke-width: 0px; fill: #06c;\" cx=\"512\" cy=\"0\" rx=\"20\" ry=\"20\"><\/ellipse>\r\n+  <line style=\"fill: none; stroke: rgb(200, 0, 255); stroke-width: 8px;\" x1=\"-1.607\" y1=\"511.412\" x2=\"315.63\" y2=\"452.116\"><\/line>\r\n+  <ellipse style=\"paint-order: stroke; stroke-width: 0px; fill: rgb(200, 0, 255);\" cy=\"452\" rx=\"20\" cx=\"315\"><\/ellipse>\r\n+  <ellipse style=\"stroke: #000; paint-order: stroke; stroke-width: 0px; fill: #06c;\" cx=\"0\" cy=\"512\" rx=\"20\"><\/ellipse>\r\n+  <line style=\"fill: none; stroke-width: 8px; stroke: rgb(200, 0, 255);\" x1=\"511.309\" y1=\"-0.021\" x2=\"109.574\" y2=\"151.185\"><\/line>\r\n+  <path style=\"stroke: #06c; stroke-width: 12px; fill: none;\" d=\"M 0 512 C 307.2 460.8 102.4 153.6 512 0\"><\/path>\r\n+  <text style=\"font-family: sans-serif; font-size: 40px; text-anchor: middle; white-space: pre;\" x=\"256\" y=\"620\">input progress<\/text>\r\n+  <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"-7\" y=\"580\">0<\/text>\r\n+  <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"500.144\" y=\"580\">1<\/text>\r\n+  <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"-55\" y=\"522\">0<\/text>\r\n+  <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"-55\" y=\"15\">1<\/text>\r\n+  <text style=\"font-family: sans-serif; font-size: 40px; text-anchor: middle; white-space: pre;\" x=\"-95\" y=\"256\" transform=\"matrix(0, -1, 1, 0, -337.415588, 147.415619)\">output progress<\/text>\r\n+  <ellipse style=\"paint-order: stroke; stroke-width: 0px; fill: rgb(200, 0, 255);\" cy=\"149\" rx=\"20\" cx=\"113\"><\/ellipse>\r\n+  <text style=\"font-family: sans-serif; font-size: 50px; font-weight: 700; white-space: pre;\" x=\"7.287\" y=\"469.082\">P0<\/text>\r\n+  <text style=\"font-family: sans-serif; font-size: 50px; font-weight: 700; white-space: pre;\" x=\"345.278\" y=\"469.082\">P1<\/text>\r\n+  <text style=\"font-family: sans-serif; font-size: 50px; font-weight: 700; white-space: pre;\" x=\"25.076\" y=\"169.634\">P2<\/text>\r\n+  <text style=\"font-family: sans-serif; font-size: 50px; font-weight: 700; white-space: pre;\" x=\"440.152\" y=\"82.171\">P3<\/text>\r\n+<\/svg>\n\\ No newline at end of file\n","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/easing-cubicbezier.svg","additions":20,"deletions":0,"binary":false,"changes":20,"status":"added"},{"patch":"@@ -0,0 +1,12 @@\n+<svg viewBox=\"-120 -25 660 660\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\">\r\n+  <rect x=\"0\" y=\"0\" width=\"512\" height=\"512\" style=\"fill: #e3e3e3; stroke: rgb(100, 100, 100); stroke-width: 6px;\"><\/rect>\r\n+  <ellipse style=\"stroke: #000; paint-order: stroke; stroke-width: 0px; fill: #06c;\" cx=\"0\" cy=\"512\" rx=\"20\"><\/ellipse>\r\n+  <ellipse style=\"stroke: #000; paint-order: stroke; stroke-width: 0px; fill: #06c;\" cx=\"512\" cy=\"0\" rx=\"20\" ry=\"20\"><\/ellipse>\r\n+  <path style=\"stroke: #06c; stroke-width: 12px;\" d=\"M 0 512 L 512 0\"><\/path>\r\n+  <text style=\"font-family: sans-serif; font-size: 40px; text-anchor: middle; white-space: pre;\" x=\"256\" y=\"620\">input progress<\/text>\r\n+  <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"-7\" y=\"580\">0<\/text>\r\n+  <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"500.144\" y=\"580\">1<\/text>\r\n+  <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"-55\" y=\"522\">0<\/text>\r\n+  <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"-55\" y=\"15\">1<\/text>\r\n+  <text style=\"font-family: sans-serif; font-size: 40px; text-anchor: middle; white-space: pre;\" x=\"-95\" y=\"256\" transform=\"matrix(0, -1, 1, 0, -337.415588, 147.415619)\">output progress<\/text>\r\n+<\/svg>\n\\ No newline at end of file\n","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/easing-linear.svg","additions":12,"deletions":0,"binary":false,"changes":12,"status":"added"},{"patch":"@@ -0,0 +1,24 @@\n+<svg viewBox=\"-120 -25 660 660\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\">\r\n+    <rect x=\"0\" y=\"0\" width=\"512\" height=\"512\" style=\"fill: #e3e3e3; stroke: rgb(100, 100, 100); stroke-width: 6px;\"><\/rect>\r\n+    <ellipse style=\"paint-order: stroke; stroke: rgb(0, 102, 204); fill: #e3e3e3; stroke-width: 20px;\" cx=\"0\" cy=\"512\" rx=\"10\"><\/ellipse>\r\n+    <path style=\"stroke: rgb(0, 102, 204); stroke-width: 12px; stroke-dasharray: 22;\" d=\"M 0 482 L 0 372\"><\/path>\r\n+    <ellipse style=\"stroke: #000; paint-order: stroke; stroke-width: 0px; fill: #06c;\" cx=\"0\" cy=\"384\" rx=\"20\"><\/ellipse>\r\n+    <path style=\"stroke: #06c; stroke-width: 12px;\" d=\"M 0 384 L 171 384\"><\/path>\r\n+    <ellipse style=\"paint-order: stroke; stroke: rgb(0, 102, 204); fill: #e3e3e3; stroke-width: 20px;\" cx=\"171\" cy=\"384\" rx=\"10\"><\/ellipse>\r\n+    <path style=\"stroke: rgb(0, 102, 204); stroke-width: 12px; stroke-dasharray: 22;\" d=\"M 171 354 L 171 256\"><\/path>\r\n+    <ellipse style=\"stroke: #000; paint-order: stroke; stroke-width: 0px; fill: #06c;\" cx=\"171\" cy=\"256\" rx=\"20\" ry=\"20\"><\/ellipse>\r\n+    <path style=\"stroke: #06c; stroke-width: 12px;\" d=\"M 171 256 L 341 256\"><\/path>\r\n+    <ellipse style=\"paint-order: stroke; stroke: rgb(0, 102, 204); fill: #e3e3e3; stroke-width: 20px;\" cx=\"341\" cy=\"256\" rx=\"10\"><\/ellipse>\r\n+    <path style=\"stroke: rgb(0, 102, 204); stroke-width: 12px; stroke-dasharray: 22;\" d=\"M 341 226 L 341 128\"><\/path>\r\n+    <ellipse style=\"stroke: #000; paint-order: stroke; stroke-width: 0px; fill: #06c;\" cx=\"341\" cy=\"128\" rx=\"20\" ry=\"20\"><\/ellipse>\r\n+    <path style=\"stroke: #06c; stroke-width: 12px;\" d=\"M 341 128 L 512 128\"><\/path>\r\n+    <ellipse style=\"stroke: #000; paint-order: stroke; stroke-width: 0px; fill: #06c;\" cx=\"512\" cy=\"0\" rx=\"20\" ry=\"20\"><\/ellipse>\r\n+    <path style=\"stroke: rgb(0, 102, 204); stroke-width: 12px; stroke-dasharray: 22;\" d=\"M 512 98 L 512 0\"><\/path>\r\n+    <ellipse style=\"paint-order: stroke; stroke: rgb(0, 102, 204); fill: #e3e3e3; stroke-width: 20px;\" cx=\"512\" cy=\"128\" rx=\"10\"><\/ellipse>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; text-anchor: middle; white-space: pre;\" x=\"256\" y=\"620\">input progress<\/text>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"-7\" y=\"580\">0<\/text>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"500.144\" y=\"580\">1<\/text>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"-55\" y=\"522\">0<\/text>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"-55\" y=\"15\">1<\/text>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; text-anchor: middle; white-space: pre;\" x=\"-95\" y=\"256\" transform=\"matrix(0, -1, 1, 0, -337.415588, 147.415619)\">output progress<\/text>\r\n+<\/svg>\r\n","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/easing-stepboth.svg","additions":24,"deletions":0,"binary":false,"changes":24,"status":"added"},{"patch":"@@ -0,0 +1,22 @@\n+<svg viewBox=\"-120 -25 660 660\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\">\r\n+    <rect x=\"0\" y=\"0\" width=\"512\" height=\"512\" style=\"fill: #e3e3e3; stroke: rgb(100, 100, 100); stroke-width: 6px;\"><\/rect>\r\n+    <ellipse style=\"stroke: #000; paint-order: stroke; stroke-width: 0px; fill: #06c;\" cx=\"0\" cy=\"512\" rx=\"20\"><\/ellipse>\r\n+    <path style=\"stroke: #06c; stroke-width: 12px;\" d=\"M 0 512 L 171 512\"><\/path>\r\n+    <ellipse style=\"paint-order: stroke; stroke: rgb(0, 102, 204); fill: #e3e3e3; stroke-width: 20px;\" cx=\"171\" cy=\"512\" rx=\"10\"><\/ellipse>\r\n+    <path style=\"stroke: rgb(0, 102, 204); stroke-width: 12px; stroke-dasharray: 22;\" d=\"M 171 482 L 171 372\"><\/path>\r\n+    <ellipse style=\"stroke: #000; paint-order: stroke; stroke-width: 0px; fill: #06c;\" cx=\"171\" cy=\"341\" rx=\"20\" ry=\"20\"><\/ellipse>\r\n+    <path style=\"stroke: #06c; stroke-width: 12px;\" d=\"M 171 341 L 341 341\"><\/path>\r\n+    <ellipse style=\"paint-order: stroke; stroke: rgb(0, 102, 204); fill: #e3e3e3; stroke-width: 20px;\" cx=\"341\" cy=\"341\" rx=\"10\"><\/ellipse>\r\n+    <path style=\"stroke: rgb(0, 102, 204); stroke-width: 12px; stroke-dasharray: 22;\" d=\"M 341 311 L 341 201\"><\/path>\r\n+    <ellipse style=\"stroke: #000; paint-order: stroke; stroke-width: 0px; fill: #06c;\" cx=\"341\" cy=\"171\" rx=\"20\" ry=\"20\"><\/ellipse>\r\n+    <path style=\"stroke: #06c; stroke-width: 12px;\" d=\"M 341 171 L 512 171\"><\/path>\r\n+    <ellipse style=\"paint-order: stroke; stroke: rgb(0, 102, 204); fill: #e3e3e3; stroke-width: 20px;\" cx=\"512\" cy=\"171\" rx=\"10\"><\/ellipse>\r\n+    <path style=\"stroke: rgb(0, 102, 204); stroke-width: 12px; stroke-dasharray: 22;\" d=\"M 512 140 L 512 30\"><\/path>\r\n+    <ellipse style=\"stroke: #000; paint-order: stroke; stroke-width: 0px; fill: #06c;\" cx=\"512\" cy=\"0\" rx=\"20\" ry=\"20\"><\/ellipse>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; text-anchor: middle; white-space: pre;\" x=\"256\" y=\"620\">input progress<\/text>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"-7\" y=\"580\">0<\/text>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"500.144\" y=\"580\">1<\/text>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"-55\" y=\"522\">0<\/text>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"-55\" y=\"15\">1<\/text>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; text-anchor: middle; white-space: pre;\" x=\"-95\" y=\"256\" transform=\"matrix(0, -1, 1, 0, -337.415588, 147.415619)\">output progress<\/text>\r\n+<\/svg>\r\n","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/easing-stepend.svg","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -0,0 +1,20 @@\n+<svg viewBox=\"-120 -25 660 660\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\">\r\n+    <rect x=\"0\" y=\"0\" width=\"512\" height=\"512\" style=\"stroke-width: 6px; stroke: rgb(81, 81, 81); fill: rgb(227, 227, 227);\"><\/rect>\r\n+    <ellipse style=\"stroke: #000; paint-order: stroke; stroke-width: 0px; fill: #06c;\" cx=\"0\" cy=\"512\" rx=\"20\"><\/ellipse>\r\n+    <path style=\"stroke: #06c; stroke-width: 12px;\" d=\"M 0 512 L 171 512\"><\/path>\r\n+    <ellipse style=\"paint-order: stroke; stroke: rgb(0, 102, 204); stroke-width: 20px; fill: rgb(227, 227, 227);\" cx=\"171\" cy=\"512\" rx=\"10\"><\/ellipse>\r\n+    <path style=\"stroke: rgb(0, 102, 204); stroke-width: 12px; stroke-dasharray: 22;\" d=\"M 171 482 L 171 256\"><\/path>\r\n+    <ellipse style=\"stroke: #000; paint-order: stroke; stroke-width: 0px; fill: #06c;\" cx=\"171\" cy=\"256\" rx=\"20\" ry=\"20\"><\/ellipse>\r\n+    <path style=\"stroke: #06c; stroke-width: 12px;\" d=\"M 171 256 L 341 256\"><\/path>\r\n+    <ellipse style=\"paint-order: stroke; stroke: rgb(0, 102, 204); stroke-width: 20px; fill: rgb(227, 227, 227);\" cx=\"341\" cy=\"256\" rx=\"10\"><\/ellipse>\r\n+    <path style=\"stroke: rgb(0, 102, 204); stroke-width: 12px; stroke-dasharray: 22;\" d=\"M 341 226 L 341 0\"><\/path>\r\n+    <ellipse style=\"stroke: #000; paint-order: stroke; stroke-width: 0px; fill: #06c;\" cx=\"341\" cy=\"0\" rx=\"20\" ry=\"20\"><\/ellipse>\r\n+    <path style=\"stroke: #06c; stroke-width: 12px;\" d=\"M 341 0 L 512 0\"><\/path>\r\n+    <ellipse style=\"paint-order: stroke; stroke: rgb(0, 102, 204); stroke-width: 0px; fill: rgb(0, 102, 204);\" cx=\"512\" cy=\"0\" rx=\"20\"><\/ellipse>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; text-anchor: middle; white-space: pre;\" x=\"256\" y=\"620\">input progress<\/text>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"-7\" y=\"580\">0<\/text>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"500.144\" y=\"580\">1<\/text>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"-55\" y=\"522\">0<\/text>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"-55\" y=\"15\">1<\/text>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; text-anchor: middle; white-space: pre;\" x=\"-95\" y=\"256\" transform=\"matrix(0, -1, 1, 0, -337.415588, 147.415619)\">output progress<\/text>\r\n+<\/svg>\n\\ No newline at end of file\n","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/easing-stepnone.svg","additions":20,"deletions":0,"binary":false,"changes":20,"status":"added"},{"patch":"@@ -0,0 +1,22 @@\n+<svg viewBox=\"-120 -25 660 660\" xmlns=\"http:\/\/www.w3.org\/2000\/svg\">\r\n+    <rect x=\"0\" y=\"0\" width=\"512\" height=\"512\" style=\"fill: #e3e3e3; stroke: rgb(100, 100, 100); stroke-width: 6px;\"><\/rect>\r\n+    <ellipse style=\"paint-order: stroke; stroke: rgb(0, 102, 204); fill: #e3e3e3; stroke-width: 20px;\" cx=\"0\" cy=\"512\" rx=\"10\"><\/ellipse>\r\n+    <path style=\"stroke: rgb(0, 102, 204); stroke-width: 12px; stroke-dasharray: 22;\" d=\"M 0 482 L 0 372\"><\/path>\r\n+    <ellipse style=\"stroke: #000; paint-order: stroke; stroke-width: 0px; fill: #06c;\" cx=\"0\" cy=\"341\" rx=\"20\"><\/ellipse>\r\n+    <path style=\"stroke: #06c; stroke-width: 12px;\" d=\"M 0 341 L 171 341\"><\/path>\r\n+    <ellipse style=\"paint-order: stroke; stroke: rgb(0, 102, 204); fill: #e3e3e3; stroke-width: 20px;\" cx=\"171\" cy=\"341\" rx=\"10\"><\/ellipse>\r\n+    <path style=\"stroke: rgb(0, 102, 204); stroke-width: 12px; stroke-dasharray: 22;\" d=\"M 171 311 L 171 201\"><\/path>\r\n+    <ellipse style=\"stroke: #000; paint-order: stroke; stroke-width: 0px; fill: #06c;\" cx=\"171\" cy=\"171\" rx=\"20\" ry=\"20\"><\/ellipse>\r\n+    <path style=\"stroke: #06c; stroke-width: 12px;\" d=\"M 171 171 L 341 171\"><\/path>\r\n+    <ellipse style=\"paint-order: stroke; stroke: rgb(0, 102, 204); fill: #e3e3e3; stroke-width: 20px;\" cx=\"341\" cy=\"171\" rx=\"10\"><\/ellipse>\r\n+    <path style=\"stroke: rgb(0, 102, 204); stroke-width: 12px; stroke-dasharray: 22;\" d=\"M 341 140 L 341 30\"><\/path>\r\n+    <ellipse style=\"stroke: #000; paint-order: stroke; stroke-width: 0px; fill: #06c;\" cx=\"341\" cy=\"0\" rx=\"20\" ry=\"20\"><\/ellipse>\r\n+    <path style=\"stroke: #06c; stroke-width: 12px;\" d=\"M 341 0 L 512 0\"><\/path>\r\n+    <ellipse style=\"stroke: #000; paint-order: stroke; stroke-width: 0px; fill: #06c;\" cx=\"512\" cy=\"0\" rx=\"20\" ry=\"20\"><\/ellipse>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; text-anchor: middle; white-space: pre;\" x=\"256\" y=\"620\">input progress<\/text>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"-7\" y=\"580\">0<\/text>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"500.144\" y=\"580\">1<\/text>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"-55\" y=\"522\">0<\/text>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; white-space: pre;\" x=\"-55\" y=\"15\">1<\/text>\r\n+    <text style=\"font-family: sans-serif; font-size: 40px; text-anchor: middle; white-space: pre;\" x=\"-95\" y=\"256\" transform=\"matrix(0, -1, 1, 0, -337.415588, 147.415619)\">output progress<\/text>\r\n+<\/svg>\r\n","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/easing-stepstart.svg","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.animation;\n+\n+import com.sun.javafx.util.Utils;\n+import com.sun.scenario.animation.AbstractPrimaryTimer;\n+import javafx.animation.AnimationTimer;\n+\n+public final class AnimationTimerHelper {\n+\n+    static {\n+        Utils.forceInit(AnimationTimer.class);\n+    }\n+\n+    private static Accessor accessor;\n+\n+    public static void setAccessor(Accessor accessor) {\n+        AnimationTimerHelper.accessor = accessor;\n+    }\n+\n+    public static AbstractPrimaryTimer getPrimaryTimer(AnimationTimer timer) {\n+        return accessor.getPrimaryTimer(timer);\n+    }\n+\n+    public interface Accessor {\n+        AbstractPrimaryTimer getPrimaryTimer(AnimationTimer timer);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/animation\/AnimationTimerHelper.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.animation;\n+\n+import com.sun.javafx.util.Utils;\n+import javafx.animation.Interpolator;\n+\n+public final class InterpolatorHelper {\n+\n+    static {\n+        Utils.forceInit(Interpolator.class);\n+    }\n+\n+    private static Accessor accessor;\n+\n+    public static void setAccessor(Accessor accessor) {\n+        InterpolatorHelper.accessor = accessor;\n+    }\n+\n+    public static double curve(Interpolator interpolator, double t) {\n+        return accessor.curve(interpolator, t);\n+    }\n+\n+    public interface Accessor {\n+        double curve(Interpolator interpolator, double t);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/animation\/InterpolatorHelper.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,155 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css;\n+\n+import javafx.animation.Interpolator;\n+import javafx.animation.Interpolator.StepPosition;\n+import javafx.css.ParsedValue;\n+import javafx.css.StyleConverter;\n+import javafx.scene.text.Font;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+\/**\n+ * Converts a parsed value to an {@link Interpolator}.\n+ * <p>\n+ * If the value is a {@code ParsedValue}, its value represents one of the singleton instances:\n+ * <ol>\n+ *     <li>{@code linear}\n+ *     <li>{@code ease}, {@code ease-in}, {@code ease-out}, {@code ease-in-out}\n+ *     <li>{@code step-start}, {@code step-end}\n+ * <\/ol>\n+ * <p>\n+ * If the value is a {@code ParsedValue} array, the first element represents the name of the function\n+ * ({@code cubic-bezier} or {@code steps}), and the second element contains a list of arguments.\n+ *\/\n+public class InterpolatorConverter extends StyleConverter<Object, Interpolator> {\n+\n+    private static class Holder {\n+        static final InterpolatorConverter INSTANCE = new InterpolatorConverter();\n+        static final SequenceConverter SEQUENCE_INSTANCE = new SequenceConverter();\n+    }\n+\n+    public static StyleConverter<Object, Interpolator> getInstance() {\n+        return Holder.INSTANCE;\n+    }\n+\n+    \/\/ We're using the CSS definitions of EASE_IN and EASE_OUT here, which are different from\n+    \/\/ SMIL 3.0's definitions that are used for Interpolator.EASE_IN and Interpolator.EASE_OUT.\n+    \/\/ https:\/\/www.w3.org\/TR\/css-easing-1\/#cubic-bezier-easing-functions\n+    \/\/\n+    public static final Interpolator CSS_EASE = Interpolator.SPLINE(0.25, 0.1, 0.25, 1);\n+    public static final Interpolator CSS_EASE_IN = Interpolator.SPLINE(0.42, 0, 1, 1);\n+    public static final Interpolator CSS_EASE_OUT = Interpolator.SPLINE(0, 0, 0.58, 1);\n+    public static final Interpolator CSS_EASE_IN_OUT = Interpolator.SPLINE(0.42, 0, 0.58, 1);\n+\n+    \/\/ We're using an LRU cache (least recently used) to limit the number of redundant instances.\n+    private static final Map<ParsedValue<?, ?>, Interpolator> CACHE = new LinkedHashMap<>(10, 0.75f, true) {\n+        @Override\n+        protected boolean removeEldestEntry(Map.Entry<ParsedValue<?, ?>, Interpolator> eldest) {\n+            return size() > 20;\n+        }\n+    };\n+\n+    private InterpolatorConverter() {}\n+\n+    @Override\n+    public Interpolator convert(ParsedValue<Object, Interpolator> value, Font font) {\n+        if (value.getValue() instanceof ParsedValue<?, ?> pv && pv.getValue() instanceof String name) {\n+            return switch (name) {\n+                case \"ease\" -> CSS_EASE;\n+                case \"ease-in\" -> CSS_EASE_IN;\n+                case \"ease-out\" -> CSS_EASE_OUT;\n+                case \"ease-in-out\" -> CSS_EASE_IN_OUT;\n+                case \"step-start\" -> Interpolator.STEP_START;\n+                case \"step-end\" -> Interpolator.STEP_END;\n+                case \"linear\" -> Interpolator.LINEAR;\n+                case \"-fx-ease-in\" -> Interpolator.EASE_IN;\n+                case \"-fx-ease-out\" -> Interpolator.EASE_OUT;\n+                case \"-fx-ease-both\" -> Interpolator.EASE_BOTH;\n+                default -> throw new AssertionError();\n+            };\n+        }\n+\n+        if (value.getValue() instanceof ParsedValue<?, ?>[] pv && pv[0].getValue() instanceof String funcName) {\n+            return switch (funcName) {\n+                case \"cubic-bezier(\" -> CACHE.computeIfAbsent(value, key -> {\n+                    List<Double> args = arguments(key);\n+                    return Interpolator.SPLINE(args.get(0), args.get(1), args.get(2), args.get(3));\n+                });\n+\n+                case \"steps(\" -> CACHE.computeIfAbsent(value, key -> {\n+                    List<Object> args = arguments(key);\n+                    String position = args.get(1) != null ? (String)args.get(1) : \"end\";\n+                    return Interpolator.STEPS((int)args.get(0), switch (position) {\n+                        case \"jump-start\", \"start\" -> StepPosition.START;\n+                        case \"jump-both\" -> StepPosition.BOTH;\n+                        case \"jump-none\" -> StepPosition.NONE;\n+                        default -> StepPosition.END;\n+                    });\n+                });\n+\n+                default -> throw new AssertionError();\n+            };\n+        }\n+\n+        throw new AssertionError();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private <T> List<T> arguments(ParsedValue<?, ?> value) {\n+        ParsedValue<?, ?>[] values = (ParsedValue<?, ?>[])value.getValue();\n+        return (List<T>)values[1].getValue();\n+    }\n+\n+    \/**\n+     * Converts a sequence of parsed values to an array of {@link Interpolator} instances.\n+     *\/\n+    public static final class SequenceConverter\n+            extends StyleConverter<ParsedValue<?, Interpolator>[], Interpolator[]> {\n+        public static SequenceConverter getInstance() {\n+            return Holder.SEQUENCE_INSTANCE;\n+        }\n+\n+        private SequenceConverter() {}\n+\n+        @Override\n+        @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+        public Interpolator[] convert(\n+                ParsedValue<ParsedValue<?, Interpolator>[], Interpolator[]> value,\n+                Font font) {\n+            ParsedValue[] layers = value.getValue();\n+            Interpolator[] interpolators = new Interpolator[layers.length];\n+\n+            for (int layer = 0; layer < layers.length; layer++) {\n+                interpolators[layer] = InterpolatorConverter.getInstance().convert(layers[layer], font);\n+            }\n+\n+            return interpolators;\n+        }\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/InterpolatorConverter.java","additions":155,"deletions":0,"binary":false,"changes":155,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css;\n+\n+import javafx.animation.Interpolator;\n+import javafx.util.Duration;\n+import java.util.Objects;\n+\n+\/**\n+ * {@code TransitionDefinition} describes how a {@link javafx.css.StyleableProperty} changes from one\n+ * value to another when its value is changed implicitly by the CSS subsystem. The transition can be\n+ * smooth, for example using linear or Bézier interpolation, or discrete using stepwise interpolation.\n+ *\n+ * @param propertyName the CSS property name, or \"all\" to target any property\n+ * @param duration duration of the transition\n+ * @param delay delay after which the transition is started; if negative, the transition starts\n+ *              immediately, but will appear to have begun at an earlier point in time\n+ * @param interpolator interpolator for the transition\n+ *\/\n+public record TransitionDefinition(String propertyName, Duration duration,\n+                                   Duration delay, Interpolator interpolator) {\n+\n+    \/**\n+     * Creates a new {@code TransitionDefinition} instance.\n+     *\n+     * @throws NullPointerException if any of the arguments is {@code null}\n+     * @throws IllegalArgumentException if the duration is negative\n+     *\/\n+    public TransitionDefinition {\n+        Objects.requireNonNull(propertyName, \"propertyName cannot be null\");\n+        Objects.requireNonNull(duration, \"duration cannot be null\");\n+        Objects.requireNonNull(delay, \"delay cannot be null\");\n+        Objects.requireNonNull(interpolator, \"interpolator cannot be null\");\n+\n+        propertyName = \"all\".equalsIgnoreCase(propertyName) ? \"all\" : propertyName;\n+\n+        if (duration.lessThan(Duration.ZERO)) {\n+            throw new IllegalArgumentException(\"duration cannot be negative\");\n+        }\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/TransitionDefinition.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,158 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css;\n+\n+import javafx.animation.Interpolator;\n+import javafx.css.CssMetaData;\n+import javafx.css.ParsedValue;\n+import javafx.css.Size;\n+import javafx.css.StyleConverter;\n+import javafx.css.Styleable;\n+import javafx.scene.text.Font;\n+import javafx.util.Duration;\n+import java.util.Arrays;\n+import java.util.Map;\n+\n+\/**\n+ * Converts an array of parsed values to a {@link TransitionDefinition}.\n+ * The array must contain four elements, all of which may be {@code null}:\n+ * <ol>\n+ *     <li>property: {@code ParsedValue<?, String>}\n+ *     <li>duration: {@code ParsedValue<?, Duration>}\n+ *     <li>delay: {@code ParsedValue<?, Duration>}\n+ *     <li>timingFunction: {@code ParsedValue<?, Interpolator>}\n+ * <\/ol>\n+ *\/\n+@SuppressWarnings(\"rawtypes\")\n+public final class TransitionDefinitionConverter extends StyleConverter<ParsedValue[], TransitionDefinition> {\n+\n+    private static class Holder {\n+        static final TransitionDefinitionConverter INSTANCE = new TransitionDefinitionConverter();\n+        static final SequenceConverter SEQUENCE_INSTANCE = new SequenceConverter();\n+    }\n+\n+    public static StyleConverter<ParsedValue[], TransitionDefinition> getInstance() {\n+        return Holder.INSTANCE;\n+    }\n+\n+    private TransitionDefinitionConverter() {}\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public TransitionDefinition convert(ParsedValue<ParsedValue[], TransitionDefinition> value, Font font) {\n+        ParsedValue[] values = value.getValue();\n+        ParsedValue<?, String> parsedProperty = values[0];\n+        ParsedValue<ParsedValue<?, Size>, Duration> parsedDuration = values[1];\n+        ParsedValue<ParsedValue<?, Size>, Duration> parsedDelay = values[2];\n+        ParsedValue<?, Interpolator> parsedInterpolator = values[3];\n+\n+        String propertyName = parsedProperty != null ? parsedProperty.convert(null) : \"all\";\n+        Duration duration = parsedDuration != null ? parsedDuration.convert(null) : Duration.ZERO;\n+        Duration delay = parsedDelay != null ? parsedDelay.convert(null) : Duration.ZERO;\n+        Interpolator interpolator = parsedInterpolator != null ?\n+            parsedInterpolator.convert(null) : InterpolatorConverter.CSS_EASE;\n+\n+        return new TransitionDefinition(\n+            propertyName.intern(), duration.lessThan(Duration.ZERO) ? Duration.ZERO : duration, delay, interpolator);\n+    }\n+\n+    \/**\n+     * Converts a sequence of parsed values to an array of {@link TransitionDefinition} instances.\n+     *\/\n+    public static final class SequenceConverter\n+            extends StyleConverter<ParsedValue<ParsedValue[], TransitionDefinition>[], TransitionDefinition[]> {\n+        private static final TransitionDefinition[] EMPTY_TRANSITION = new TransitionDefinition[0];\n+        private static final String[] EMPTY_STRING = new String[0];\n+        private static final Duration[] EMPTY_DURATION = new Duration[0];\n+        private static final Interpolator[] EMPTY_INTERPOLATOR = new Interpolator[0];\n+\n+        public static SequenceConverter getInstance() {\n+            return Holder.SEQUENCE_INSTANCE;\n+        }\n+\n+        private SequenceConverter() {}\n+\n+        @Override\n+        public TransitionDefinition[] convert(Map<CssMetaData<? extends Styleable, ?>, Object> convertedValues) {\n+            String[] properties = EMPTY_STRING;\n+            Duration[] durations = EMPTY_DURATION;\n+            Duration[] delays = EMPTY_DURATION;\n+            Interpolator[] timingFunctions = EMPTY_INTERPOLATOR;\n+\n+            for (Map.Entry<CssMetaData<? extends Styleable, ?>, Object> entry : convertedValues.entrySet()) {\n+                switch (entry.getKey().getProperty()) {\n+                    case \"transition-property\" -> properties = (String[]) entry.getValue();\n+                    case \"transition-duration\" -> durations = (Duration[]) entry.getValue();\n+                    case \"transition-delay\" -> delays = (Duration[]) entry.getValue();\n+                    case \"transition-timing-function\" -> timingFunctions = (Interpolator[]) entry.getValue();\n+                }\n+            }\n+\n+            if (properties.length == 0 || durations.length == 0) {\n+                return EMPTY_TRANSITION;\n+            }\n+\n+            \/\/ The length of the 'transition-property' list determines the number of transitions in the sequence.\n+            TransitionDefinition[] transitions = new TransitionDefinition[properties.length];\n+\n+            \/\/ If any of the remaining sub-properties doesn't have enough values, missing values are filled in\n+            \/\/ by repeating the list of values until we have enough values for the sequence.\n+            for (int i = 0; i < transitions.length; ++i) {\n+                Interpolator timingFunction = timingFunctions.length == 0 ?\n+                    InterpolatorConverter.CSS_EASE : timingFunctions[i % timingFunctions.length];\n+                Duration duration = durations[i % durations.length];\n+                Duration delay = delays.length == 0 ? Duration.ZERO : delays[i % delays.length];\n+                transitions[i] = new TransitionDefinition(properties[i], duration, delay, timingFunction);\n+            }\n+\n+            return transitions;\n+        }\n+\n+        @Override\n+        public TransitionDefinition[] convert(\n+                ParsedValue<ParsedValue<ParsedValue[], TransitionDefinition>[], TransitionDefinition[]> value,\n+                Font font) {\n+            ParsedValue<ParsedValue[], TransitionDefinition>[] layers = value.getValue();\n+            if (layers.length == 0) {\n+                return EMPTY_TRANSITION;\n+            }\n+\n+            TransitionDefinition[] transitions = new TransitionDefinition[layers.length];\n+            int numTransitions = 0;\n+\n+            for (ParsedValue<ParsedValue[], TransitionDefinition> layer : layers) {\n+                TransitionDefinition transition = TransitionDefinitionConverter.getInstance().convert(layer, font);\n+                if (transition != null) {\n+                    transitions[numTransitions++] = transition;\n+                }\n+            }\n+\n+            return numTransitions == transitions.length ?\n+                   transitions : Arrays.copyOf(transitions, numTransitions);\n+        }\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/TransitionDefinitionConverter.java","additions":158,"deletions":0,"binary":false,"changes":158,"status":"added"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css;\n+\n+import com.sun.javafx.scene.NodeHelper;\n+import javafx.animation.Interpolator;\n+import javafx.css.CssMetaData;\n+import javafx.css.Styleable;\n+import javafx.css.StyleableProperty;\n+import javafx.css.converter.DurationConverter;\n+import javafx.css.converter.StringConverter;\n+import javafx.scene.Node;\n+import javafx.util.Duration;\n+import java.util.List;\n+\n+\/**\n+ * An implementation of {@link CssMetaData} for the {@code transition} property that includes the\n+ * four sub-properties {@code transition-property}, {@code transition-duration}, {@code transition-delay}\n+ * and {@code transition-timing-function}.\n+ *\/\n+public class TransitionDefinitionCssMetaData extends CssMetaData<Node, TransitionDefinition[]> {\n+\n+    private static class Holder {\n+        static final TransitionDefinitionCssMetaData INSTANCE = new TransitionDefinitionCssMetaData();\n+    }\n+\n+    public static TransitionDefinitionCssMetaData getInstance() {\n+        return Holder.INSTANCE;\n+    }\n+\n+    public TransitionDefinitionCssMetaData() {\n+        super(\"transition\", TransitionDefinitionConverter.SequenceConverter.getInstance(),\n+              new TransitionDefinition[0], false, createSubProperties());\n+    }\n+\n+    private static final String[] PROPERTY_ALL = new String[] { \"all\" };\n+\n+    private static final Duration[] DURATION_ZERO = new Duration[] { Duration.ZERO };\n+\n+    private static final Interpolator[] INTERPOLATOR_EASE = new Interpolator[] { InterpolatorConverter.CSS_EASE };\n+\n+    @Override\n+    public boolean isSettable(Node node) {\n+        return true;\n+    }\n+\n+    @Override\n+    public StyleableProperty<TransitionDefinition[]> getStyleableProperty(Node node) {\n+        return NodeHelper.getTransitionProperty(node);\n+    }\n+\n+    private static <S extends Styleable> List<CssMetaData<? extends Styleable, ?>> createSubProperties() {\n+        return List.of(\n+            new CssMetaData<S, String[]>(\"transition-property\",\n+                    StringConverter.SequenceConverter.getInstance(), PROPERTY_ALL, false) {\n+                @Override\n+                public boolean isSettable(S styleable) {\n+                    return false;\n+                }\n+\n+                @Override\n+                public StyleableProperty<String[]> getStyleableProperty(S styleable) {\n+                    return null;\n+                }\n+            },\n+            new CssMetaData<S, Duration[]>(\"transition-duration\",\n+                    DurationConverter.SequenceConverter.getInstance(), DURATION_ZERO, false) {\n+                @Override\n+                public boolean isSettable(S styleable) {\n+                    return false;\n+                }\n+\n+                @Override\n+                public StyleableProperty<Duration[]> getStyleableProperty(S styleable) {\n+                    return null;\n+                }\n+            },\n+            new CssMetaData<S, Duration[]>(\"transition-delay\",\n+                    DurationConverter.SequenceConverter.getInstance(), DURATION_ZERO, false) {\n+                @Override\n+                public boolean isSettable(S styleable) {\n+                    return false;\n+                }\n+\n+                @Override\n+                public StyleableProperty<Duration[]> getStyleableProperty(S styleable) {\n+                    return null;\n+                }\n+            },\n+            new CssMetaData<S, Interpolator[]>(\"transition-timing-function\",\n+                    InterpolatorConverter.SequenceConverter.getInstance(), INTERPOLATOR_EASE, false) {\n+                @Override\n+                public boolean isSettable(S styleable) {\n+                    return false;\n+                }\n+\n+                @Override\n+                public StyleableProperty<Interpolator[]> getStyleableProperty(S styleable) {\n+                    return null;\n+                }\n+            }\n+        );\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/TransitionDefinitionCssMetaData.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css;\n+\n+import javafx.css.StyleableProperty;\n+\n+\/**\n+ * {@code TransitionMediator} encapsulates the interactions between a {@link TransitionTimer} and its target.\n+ *\/\n+public abstract class TransitionMediator {\n+\n+    private TransitionTimer timer;\n+\n+    \/**\n+     * Starts the transition timer with the specified transition definition.\n+     *\n+     * @param definition the transition definition\n+     *\/\n+    public final void run(TransitionDefinition definition) {\n+        \/\/ Might return 'null' if the transition duration is zero or the target node is not showing.\n+        timer = TransitionTimer.run(this, definition);\n+    }\n+\n+    \/**\n+     * Cancels the transition timer.\n+     *\n+     * @param forceStop if {@code true}, the transition timer is stopped unconditionally\n+     * @return {@code true} if the timer was cancelled, {@code false} otherwise\n+     * @see TransitionTimer#cancel(boolean)\n+     *\/\n+    public final boolean cancel(boolean forceStop) {\n+        return timer == null || timer.cancel(forceStop);\n+    }\n+\n+    \/**\n+     * Gets the running {@code TransitionTimer}.\n+     *\n+     * @return the {@code TransitionTimer}, or {@code null} if no timer is running\n+     *\/\n+    public final TransitionTimer getTimer() {\n+        return timer;\n+    }\n+\n+    \/**\n+     * Returns the styleable property targeted by the transition.\n+     *\n+     * @return the styleable property\n+     *\/\n+    public abstract StyleableProperty<?> getStyleableProperty();\n+\n+    \/**\n+     * Derived classes should implement this method to compute a new intermediate value\n+     * based on the current progress, and update the {@link StyleableProperty} accordingly.\n+     *\n+     * @param progress the progress of the transition, ranging from 0 to 1\n+     *\/\n+    public abstract void onUpdate(double progress);\n+\n+    \/**\n+     * Occurs when the timer has stopped and the mediator should be discarded.\n+     * Derived classes should implement this method to clear any references to this mediator.\n+     *\/\n+    public abstract void onStop();\n+\n+    \/**\n+     * Returns whether the target value of the transition associated with the specified mediator\n+     * equals the target value of the transition associated with this mediator.\n+     *\n+     * @param mediator the other mediator\n+     * @return {@code true} if the target values are equal, {@code false} otherwise\n+     *\/\n+    public abstract boolean equalsTargetValue(TransitionMediator mediator);\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/TransitionMediator.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,363 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css;\n+\n+import com.sun.javafx.animation.AnimationTimerHelper;\n+import com.sun.javafx.animation.InterpolatorHelper;\n+import com.sun.javafx.scene.NodeHelper;\n+import com.sun.javafx.util.Utils;\n+import javafx.animation.AnimationTimer;\n+import javafx.animation.Interpolator;\n+import javafx.beans.property.Property;\n+import javafx.css.StyleableProperty;\n+import javafx.css.TransitionEvent;\n+import javafx.event.EventType;\n+import javafx.scene.Node;\n+import javafx.util.Duration;\n+\n+\/**\n+ * {@code TransitionTimer} is the base class for timers that compute intermediate\n+ * values for implicit transitions of a {@link StyleableProperty}.\n+ *\/\n+public final class TransitionTimer extends AnimationTimer {\n+\n+    private final Node targetNode;\n+    private final Interpolator interpolator;\n+    private final TransitionMediator mediator;\n+    private double reversingShorteningFactor;\n+    private long startTime, endTime, delay, duration; \/\/ in nanoseconds\n+    private long currentTime; \/\/ in nanoseconds\n+    private boolean updating;\n+    private boolean started;\n+\n+    private TransitionTimer(TransitionMediator mediator, TransitionDefinition definition) {\n+        long now = AnimationTimerHelper.getPrimaryTimer(this).nanos();\n+        this.delay = millisToNanos(definition.delay().toMillis());\n+        this.duration = millisToNanos(definition.duration().toMillis());\n+        this.targetNode = (Node)((Property<?>)mediator.getStyleableProperty()).getBean();\n+        this.interpolator = definition.interpolator();\n+        this.mediator = mediator;\n+        this.currentTime = now;\n+        this.startTime = now + delay;\n+        this.endTime = startTime + duration;\n+        this.reversingShorteningFactor = 1;\n+    }\n+\n+    \/**\n+     * Starts the specified transition timer with the specified transition definition.\n+     * If the combined duration of the transition is zero or if the targeted node is not\n+     * showing, no transition timer is started, no events are dispatched, and this method\n+     * returns {@code null}.\n+     *\n+     * @param mediator the {@code TransitionMediator} for the targeted property\n+     * @param definition the {@code TransitionDefinition} used to initialize the {@code timer}\n+     * @return the {@code timer} instance if the timer was started, {@code null} otherwise\n+     *\/\n+    public static TransitionTimer run(TransitionMediator mediator, TransitionDefinition definition) {\n+        \/\/ The transition timer is only started if the targeted node is showing, i.e. if it is part\n+        \/\/ of the scene graph and the node is visible.\n+        if (!(mediator.getStyleableProperty() instanceof Property<?> property)\n+                || !(property.getBean() instanceof Node node)\n+                || !NodeHelper.isTreeShowing(node)) {\n+            mediator.onUpdate(1);\n+            return null;\n+        }\n+\n+        long delay = millisToNanos(definition.delay().toMillis());\n+        long duration = millisToNanos(definition.duration().toMillis());\n+        long combinedDuration = Math.max(duration, 0) + delay;\n+\n+        var existingTimer = (TransitionTimer)NodeHelper.findTransitionTimer(node, property);\n+        if (existingTimer != null) {\n+            \/\/ If we already have a timer that targets the specified property, and the existing\n+            \/\/ timer has the same target value as the new timer, we discard the new timer and\n+            \/\/ return the existing timer. This scenario can sometimes happen when a CSS value\n+            \/\/ is redundantly applied, which would cause unexpected animations if we allowed\n+            \/\/ the new timer to interrupt the existing timer.\n+            if (existingTimer.mediator.equalsTargetValue(mediator)) {\n+                return existingTimer;\n+            }\n+\n+            \/\/ Here we know that the new timer has a different target value than the existing\n+            \/\/ timer, which means that the new timer is a reversing timer that needs to be\n+            \/\/ adjusted by the reversing shortening algorithm.\n+            if (combinedDuration > 0) {\n+                var newTimer = new TransitionTimer(mediator, definition);\n+                newTimer.adjustReversingTimings(existingTimer);\n+                existingTimer.stop(TransitionEvent.CANCEL);\n+                newTimer.start();\n+                return newTimer;\n+            }\n+\n+            existingTimer.stop(TransitionEvent.CANCEL);\n+            mediator.onUpdate(1);\n+            return null;\n+        }\n+\n+        \/\/ We only need a timer if the combined duration is non-zero.\n+        if (combinedDuration > 0) {\n+            var timer = new TransitionTimer(mediator, definition);\n+            timer.start();\n+            return timer;\n+        }\n+\n+        \/\/ If the combined duration is zero, we just call onUpdate without starting a timer.\n+        \/\/ This updates the value of the target property to the end value, and no events will be fired.\n+        mediator.onUpdate(1);\n+        return null;\n+    }\n+\n+    \/**\n+     * Cancels this timer if it is currently running. If {@code forceStop} is {@code false}, the timer\n+     * will only be stopped if this method was not called from the timer's {@link #update(double)} method;\n+     * i.e. a timer will not stop itself while trying to set the new value of a styleable property.\n+     *\n+     * @param forceStop if {@code true}, the timer is stopped unconditionally\n+     * @return {@code true} if the timer was cancelled, {@code false} otherwise\n+     *\/\n+    public boolean cancel(boolean forceStop) {\n+        if (forceStop || !pollUpdating()) {\n+            stop(TransitionEvent.CANCEL);\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    \/**\n+     * Returns the property targeted by this timer.\n+     *\n+     * @return the property\n+     *\/\n+    public Property<?> getTargetProperty() {\n+        return (Property<?>)mediator.getStyleableProperty();\n+    }\n+\n+    \/**\n+     * Called once per frame to update the {@code TransitionTimer}.\n+     * <p>\n+     * This method fires {@link TransitionEvent#START} when the timer enters its active\n+     * interval, and {@link TransitionEvent#END} event when the timer has reached the end\n+     * of its active interval.\n+     *\n+     * @param now the timestamp of the current frame, in nanoseconds\n+     *\/\n+    @Override\n+    public void handle(long now) {\n+        currentTime = Math.min(now, endTime);\n+\n+        if (!started && currentTime >= startTime) {\n+            started = true;\n+            fireTransitionEvent(TransitionEvent.START);\n+        }\n+\n+        if (started) {\n+            double progress = getProgress();\n+            if (progress >= 0) {\n+                update(progress);\n+            }\n+\n+            if (progress == 1) {\n+                stop(TransitionEvent.END);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Starts this timer, and adds it to the list of running transitions.\n+     *\/\n+    @Override\n+    public void start() {\n+        super.start();\n+        NodeHelper.addTransitionTimer(targetNode, this);\n+        fireTransitionEvent(TransitionEvent.RUN);\n+    }\n+\n+    \/**\n+     * This method is unused, calling it will throw {@link UnsupportedOperationException}.\n+     *\/\n+    @Override\n+    public void stop() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    \/**\n+     * Stops the running transition and fires the specified event.\n+     * This happens when the value of a CSS property targeted by a transition is changed by the user,\n+     * when the transition is interrupted by another transition, or when it ends normally.\n+     *\n+     * @param eventType the event type that is fired after the timer is stopped\n+     *\/\n+    public void stop(EventType<TransitionEvent> eventType) {\n+        super.stop();\n+        mediator.onStop();\n+        NodeHelper.removeTransitionTimer(targetNode, this);\n+        fireTransitionEvent(eventType);\n+    }\n+\n+    \/**\n+     * Skips the rest of a running transition and updates the property to the target value.\n+     * This happens when the targeted node is removed from the scene graph or becomes invisible.\n+     *\/\n+    public void complete() {\n+        update(1);\n+        stop(TransitionEvent.CANCEL);\n+    }\n+\n+    \/**\n+     * Updates the transition mediator by mapping the specified input progress to an output progress\n+     * value using the timer's interpolator, and then calling {@link TransitionMediator#onUpdate(double)}}\n+     * with the output progress value.\n+     *\n+     * @param progress the input progress value\n+     *\/\n+    private void update(double progress) {\n+        try {\n+            updating = true;\n+            mediator.onUpdate(InterpolatorHelper.curve(interpolator, progress));\n+        } catch (Throwable ex) {\n+            Thread currentThread = Thread.currentThread();\n+            currentThread.getUncaughtExceptionHandler().uncaughtException(currentThread, ex);\n+        } finally {\n+            updating = false;\n+        }\n+    }\n+\n+    \/**\n+     * Polls whether the timer is currently updating the value of the property.\n+     * After this method is called, the {@link #updating} flag is {@code false}.\n+     *\n+     * @return {@code true} if the timer is currently updating the property, {@code false} otherwise\n+     *\/\n+    private boolean pollUpdating() {\n+        boolean updating = this.updating;\n+        this.updating = false;\n+        return updating;\n+    }\n+\n+    \/**\n+     * Gets the progress of this timer along the input progress axis.\n+     *\n+     * @return the input progress, ranging from 0 to 1\n+     *\/\n+    private double getProgress() {\n+        if (currentTime <= startTime) {\n+            return 0.0;\n+        }\n+\n+        if (currentTime < endTime) {\n+            return (double)(currentTime - startTime) \/ (double)(endTime - startTime);\n+        }\n+\n+        return 1.0;\n+    }\n+\n+    \/**\n+     * If a running transition is interrupted by a new transition, we adjust the start time and\n+     * end time of the new transition with the reversing shortening factor of the old transition.\n+     * Note that the reversing shortening factor is computed in output progress space (value),\n+     * not in input progress space (time).\n+     * <p>\n+     * This algorithm fixes transition asymmetries that can happen when a transition is interrupted\n+     * by a reverse transition. Consider a linear transition that animates a value over 4s, but is\n+     * interrupted after 1s. When the transition is interrupted, the value has progressed one\n+     * quarter of the value space in one quarter of the duration. However, the reverse transition\n+     * now takes the entire duration (4s) to progress just one quarter of the original value space,\n+     * which means that the transition speed is much slower than what would be expected.\n+     *\n+     * @param existingTimer the timer of the running transition\n+     * @see <a href=\"https:\/\/www.w3.org\/TR\/css-transitions-1\/#reversing\">Faster reversing of interrupted transitions<\/a>\n+     *\/\n+    private void adjustReversingTimings(TransitionTimer existingTimer) {\n+        double progress = InterpolatorHelper.curve(existingTimer.interpolator, existingTimer.getProgress());\n+\n+        if (progress > 0 && progress < 1) {\n+            double oldFactor = existingTimer.reversingShorteningFactor;\n+            double newFactor = progress * oldFactor + (1 - oldFactor);\n+            reversingShorteningFactor = Utils.clamp(0, newFactor, 1);\n+        }\n+\n+        if (delay < 0) {\n+            delay = (long)(delay * reversingShorteningFactor);\n+            startTime = currentTime + delay;\n+        }\n+\n+        duration = (long)(duration * reversingShorteningFactor);\n+        endTime = startTime + duration;\n+    }\n+\n+    \/**\n+     * Fires a {@link TransitionEvent} of the specified type.\n+     * The elapsed time is computed according to the CSS Transitions specification.\n+     *\n+     * @param eventType the event type\n+     *\/\n+    private void fireTransitionEvent(EventType<TransitionEvent> eventType) {\n+        try {\n+            long elapsedTime; \/\/ nanoseconds\n+\n+            \/\/ Elapsed time specification: https:\/\/www.w3.org\/TR\/css-transitions-1\/#event-transitionevent\n+            if (eventType == TransitionEvent.RUN || eventType == TransitionEvent.START) {\n+                elapsedTime = Math.min(Math.max(-delay, 0), duration);\n+            } else if (eventType == TransitionEvent.CANCEL) {\n+                elapsedTime = Math.max(0, currentTime - startTime);\n+            } else if (eventType == TransitionEvent.END) {\n+                elapsedTime = duration;\n+            } else {\n+                throw new IllegalArgumentException(\"eventType\");\n+            }\n+\n+            targetNode.fireEvent(\n+                new TransitionEvent(\n+                    eventType,\n+                    mediator.getStyleableProperty(),\n+                    Duration.millis(nanosToMillis(elapsedTime))));\n+        } catch (Throwable ex) {\n+            Thread currentThread = Thread.currentThread();\n+            currentThread.getUncaughtExceptionHandler().uncaughtException(currentThread, ex);\n+        }\n+    }\n+\n+    \/**\n+     * Converts the specified duration in nanoseconds to fractional milliseconds.\n+     *\n+     * @param nanos the duration in nanoseconds\n+     * @return the duration in fractional milliseconds\n+     *\/\n+    private static double nanosToMillis(long nanos) {\n+        return nanos \/ 1_000_000.0;\n+    }\n+\n+    \/**\n+     * Converts the specified duration in fractional milliseconds to nanoseconds.\n+     *\n+     * @param millis the duration in fractional milliseconds\n+     * @return the duration in nanoseconds\n+     *\/\n+    private static long millisToNanos(double millis) {\n+        return (long)(millis * 1_000_000.0);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/TransitionTimer.java","additions":363,"deletions":0,"binary":false,"changes":363,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import com.sun.javafx.css.TransitionDefinition;\n+import com.sun.javafx.css.TransitionTimer;\n@@ -41,0 +43,1 @@\n+import javafx.beans.property.Property;\n@@ -315,0 +318,20 @@\n+    public static StyleableProperty<TransitionDefinition[]> getTransitionProperty(Node node) {\n+        return nodeAccessor.getTransitionProperty(node);\n+    }\n+\n+    public static TransitionDefinition findTransitionDefinition(Node node, CssMetaData<? extends Styleable, ?> metadata) {\n+        return nodeAccessor.findTransitionDefinition(node, metadata);\n+    }\n+\n+    public static void addTransitionTimer(Node node, TransitionTimer timer) {\n+        nodeAccessor.addTransitionTimer(node, timer);\n+    }\n+\n+    public static void removeTransitionTimer(Node node, TransitionTimer timer) {\n+        nodeAccessor.removeTransitionTimer(node, timer);\n+    }\n+\n+    public static TransitionTimer findTransitionTimer(Node node, Property<?> property) {\n+        return nodeAccessor.findTransitionTimer(node, property);\n+    }\n+\n@@ -375,0 +398,5 @@\n+        StyleableProperty<TransitionDefinition[]> getTransitionProperty(Node node);\n+        TransitionDefinition findTransitionDefinition(Node node, CssMetaData<? extends Styleable, ?> metadata);\n+        void addTransitionTimer(Node node, TransitionTimer timer);\n+        void removeTransitionTimer(Node node, TransitionTimer timer);\n+        TransitionTimer findTransitionTimer(Node node, Property<?> property);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/NodeHelper.java","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.scenario.animation;\n+\n+import javafx.animation.Interpolator;\n+import java.util.Objects;\n+\n+\/**\n+ * Implementation of a step interpolator as described by\n+ * <a href=\"https:\/\/www.w3.org\/TR\/css-easing-1\/#step-easing-algo\">CSS Easing Functions Level 1<\/a>\n+ *\/\n+public final class StepInterpolator extends Interpolator {\n+\n+    private final int intervals;\n+    private final StepPosition position;\n+\n+    public StepInterpolator(int intervals, StepPosition position) {\n+        if (position == StepPosition.NONE && intervals <= 1) {\n+            throw new IllegalArgumentException(\"intervals must be greater than 1\");\n+        }\n+\n+        if (intervals <= 0) {\n+            throw new IllegalArgumentException(\"intervals must be greater than 0\");\n+        }\n+\n+        this.position = Objects.requireNonNull(position, \"position cannot be null\");\n+        this.intervals = intervals;\n+    }\n+\n+    @Override\n+    protected double curve(double t) {\n+        \/\/ JavaFX interpolators are not usually valid outside the interval [0..1], but\n+        \/\/ this implementation ensures that the output value is correct even for points\n+        \/\/ on the curve that are outside of this interval.\n+        boolean before = t < 0;\n+\n+        if (before) {\n+            t = 0;\n+        } else if (t > 1) {\n+            t = 1;\n+        }\n+\n+        int step = (int)(t * intervals);\n+\n+        if (position == StepPosition.START || position == StepPosition.BOTH) {\n+            ++step;\n+        }\n+\n+        if (before && (t * intervals % 1 == 0)) {\n+            --step;\n+        }\n+\n+        if (t >= 0 && step < 0) {\n+            step = 0;\n+        }\n+\n+        int jumps = switch (position) {\n+            case START, END -> intervals;\n+            case NONE -> intervals - 1;\n+            case BOTH -> intervals + 1;\n+        };\n+\n+        if (t <= 1 && step > jumps) {\n+            step = jumps;\n+        }\n+\n+        return (double)step \/ jumps;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Integer.hashCode(intervals) + 31 * position.hashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        return obj instanceof StepInterpolator other\n+            && intervals == other.intervals\n+            && position == other.position;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"StepInterpolator [intervals=\" + intervals + \", position=\" + position + \"]\";\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/scenario\/animation\/StepInterpolator.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import com.sun.javafx.animation.AnimationTimerHelper;\n@@ -52,0 +53,9 @@\n+    static {\n+        AnimationTimerHelper.setAccessor(new AnimationTimerHelper.Accessor() {\n+            @Override\n+            public AbstractPrimaryTimer getPrimaryTimer(AnimationTimer timer) {\n+                return timer.timer;\n+            }\n+        });\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/animation\/AnimationTimer.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-\n+import com.sun.javafx.animation.InterpolatorHelper;\n@@ -32,0 +32,1 @@\n+import com.sun.scenario.animation.StepInterpolator;\n@@ -47,0 +48,9 @@\n+    static {\n+        InterpolatorHelper.setAccessor(new InterpolatorHelper.Accessor() {\n+            @Override\n+            public double curve(Interpolator interpolator, double t) {\n+                return interpolator.curve(t);\n+            }\n+        });\n+    }\n+\n@@ -259,0 +269,63 @@\n+    \/**\n+     * Specifies the step position of a step interpolator.\n+     * <p>\n+     * The step position determines the location of rise points in the input progress interval, which are the\n+     * locations on the input progress axis where the output progress value jumps from one step to the next.\n+     *\n+     * @since 22\n+     *\/\n+    public enum StepPosition {\n+        \/**\n+         * The interval starts with a rise point when the input progress value is 0.\n+         *\/\n+        START,\n+\n+        \/**\n+         * The interval ends with a rise point when the input progress value is 1.\n+         *\/\n+        END,\n+\n+        \/**\n+         * All rise points are within the open interval (0..1).\n+         *\/\n+        BOTH,\n+\n+        \/**\n+         * The interval starts with a rise point when the input progress value is 0,\n+         * and ends with a rise point when the input progress value is 1.\n+         *\/\n+        NONE\n+    }\n+\n+    \/**\n+     * Built-in interpolator instance that is equivalent to {@code STEPS(1, StepPosition.START)}.\n+     *\n+     * @since 22\n+     *\/\n+    public static final Interpolator STEP_START = STEPS(1, StepPosition.START);\n+\n+    \/**\n+     * Built-in interpolator instance that is equivalent to {@code STEPS(1, StepPosition.END)}.\n+     *\n+     * @since 22\n+     *\/\n+    public static final Interpolator STEP_END = STEPS(1, StepPosition.END);\n+\n+    \/**\n+     * Creates a step interpolator that divides the input time into a series of intervals, each\n+     * interval being equal in length, where each interval maps to a constant output time value.\n+     * The output time value is determined by the {@link StepPosition}.\n+     *\n+     * @param intervals the number of intervals in the step interpolator\n+     * @param position the {@code StepPosition} of the step interpolator\n+     * @throws IllegalArgumentException if {@code intervals} is less than 1, or if {@code intervals} is\n+     *                                  less than 2 when {@code position} is {@link StepPosition#NONE}\n+     * @throws NullPointerException if {@code position} is {@code null}\n+     * @return a new step interpolator\n+     *\n+     * @since 22\n+     *\/\n+    public static Interpolator STEPS(int intervals, StepPosition position) {\n+        return new StepInterpolator(intervals, position);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/animation\/Interpolator.java","additions":75,"deletions":2,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import com.sun.javafx.css.InterpolatorConverter;\n@@ -32,0 +33,2 @@\n+import com.sun.javafx.css.TransitionDefinition;\n+import com.sun.javafx.css.TransitionDefinitionConverter;\n@@ -33,0 +36,1 @@\n+import javafx.animation.Interpolator;\n@@ -85,0 +89,1 @@\n+import javafx.util.Duration;\n@@ -101,0 +106,1 @@\n+import java.util.Arrays;\n@@ -642,0 +648,37 @@\n+    \/\/ Return true if the token is a time type or an identifier\n+    \/\/ (which would indicate a lookup).\n+    private boolean isTime(Token token) {\n+        switch (token.getType()) {\n+            case CssLexer.SECONDS:\n+            case CssLexer.MS:\n+                return true;\n+            default:\n+                return token.getType() == CssLexer.IDENT;\n+        }\n+    }\n+\n+    private Size time(Token token) throws ParseException {\n+        return switch (token.getType()) {\n+            case CssLexer.SECONDS -> {\n+                String sval = token.getText().trim();\n+                double v = Double.parseDouble(sval.substring(0, sval.length() - 1).trim());\n+                yield new Size(v, SizeUnits.S);\n+            }\n+\n+            case CssLexer.MS -> {\n+                String sval = token.getText().trim();\n+                double v = Double.parseDouble(sval.substring(0, sval.length() - 2).trim());\n+                yield new Size(v, SizeUnits.MS);\n+            }\n+\n+            default -> {\n+                if (LOGGER.isLoggable(Level.FINEST)) {\n+                    LOGGER.finest(\"Expected \\'<duration>\\'\");\n+                }\n+                ParseException re = new ParseException(\"Expected \\'<duration>\\'\", token, this);\n+                reportError(createError(re.toString()));\n+                throw re;\n+            }\n+        };\n+    }\n+\n@@ -830,0 +873,10 @@\n+        } else if (\"transition\".equals(prop)) {\n+            return parseTransitionLayers(root);\n+        } else if (\"transition-duration\".equals(prop)) {\n+            return parseDurationLayers(root, false);\n+        } else if (\"transition-delay\".equals(prop)) {\n+            return parseDurationLayers(root, true);\n+        } else if (\"transition-timing-function\".equals(prop)) {\n+            return parseEasingFunctionLayers(root);\n+        } else if (\"transition-property\".equals(prop)) {\n+            return parseTransitionPropertyLayers(root);\n@@ -954,0 +1007,42 @@\n+    private ParsedValueImpl<?, Size> parseTime(final Term root) throws ParseException {\n+        if (root.token == null || !isTime(root.token)) {\n+            error(root, \"Expected \\'<duration>\\'\");\n+        }\n+\n+        if (root.token.getType() != CssLexer.IDENT) {\n+            Size time = time(root.token);\n+            return new ParsedValueImpl<>(time, null);\n+        }\n+\n+        String key = root.token.getText();\n+        return switch (key) {\n+            case \"initial\", \"inherit\" -> new ParsedValueImpl<>(new Size(0, SizeUnits.S), null);\n+            case \"indefinite\" -> new ParsedValueImpl<>(new Size(Double.POSITIVE_INFINITY, SizeUnits.S), null);\n+            default -> new ParsedValueImpl<>(key, null, true);\n+        };\n+    }\n+\n+    private ParsedValueImpl<ParsedValue<?, Size>, Duration> parseDuration(\n+            Term term, boolean allowNegative) throws ParseException {\n+        ParsedValue<?, Size> time = parseTime(term);\n+        if (!allowNegative && time.getValue() instanceof Size size && size.getValue() < 0) {\n+            error(term, \"Invalid \\'<duration>\\'\");\n+        }\n+\n+        return new ParsedValueImpl<>(time, DurationConverter.getInstance());\n+    }\n+\n+    private ParsedValueImpl<ParsedValue<ParsedValue<?, Size>, Duration>[], Duration[]>\n+            parseDurationLayers(Term term, boolean allowNegative) throws ParseException {\n+        int nLayers = numberOfLayers(term);\n+        ParsedValue<ParsedValue<?, Size>, Duration>[] layers = new ParsedValueImpl[nLayers];\n+\n+        for (int i = 0; i < nLayers; ++i) {\n+            layers[i] = parseDuration(term, allowNegative);\n+            term = nextLayer(term);\n+        }\n+\n+        return new ParsedValueImpl<ParsedValue<ParsedValue<?, Size>, Duration>[], Duration[]>(\n+                layers, DurationConverter.SequenceConverter.getInstance());\n+    }\n+\n@@ -3838,0 +3933,192 @@\n+    \/\/ https:\/\/www.w3.org\/TR\/css-transitions-1\/#transition-shorthand-property\n+    private ParsedValueImpl<ParsedValue<ParsedValue[], TransitionDefinition>[], TransitionDefinition[]>\n+            parseTransitionLayers(Term term) throws ParseException {\n+        int nLayers = numberOfLayers(term);\n+        ParsedValue<ParsedValue[], TransitionDefinition>[] layers = new ParsedValue[nLayers];\n+\n+        for (int i = 0; i < nLayers; ++i) {\n+            layers[i] = parseTransition(term);\n+            term = nextLayer(term);\n+        }\n+\n+        return new ParsedValueImpl<ParsedValue<ParsedValue[], TransitionDefinition>[], TransitionDefinition[]>(\n+            layers, TransitionDefinitionConverter.SequenceConverter.getInstance());\n+    }\n+\n+    private ParsedValueImpl<ParsedValue[], TransitionDefinition> parseTransition(Term term)\n+            throws ParseException {\n+        ParsedValue<?, String> parsedProperty = null;\n+        ParsedValue<ParsedValue<?, Size>, Duration> parsedDuration = null;\n+        ParsedValue<ParsedValue<?, Size>, Duration> parsedDelay = null;\n+        ParsedValue<?, Interpolator> parsedTimingFunction = null;\n+\n+        for (int i = 0; i < 4; ++i) {\n+            if (term == null) {\n+                break;\n+            }\n+\n+            if (isEasingFunction(term.token)) {\n+                if (parsedTimingFunction != null) {\n+                    error(term, \"Expected \\'<single-transition-property>\\' or \\'<duration>\\'\");\n+                }\n+\n+                parsedTimingFunction = parseEasingFunction(term);\n+            } else if (isTransitionProperty(term.token)) {\n+                if (parsedProperty != null) {\n+                    error(term, \"Expected \\'<easing-function>\\' or \\'<duration>\\'\");\n+                }\n+\n+                parsedProperty = parseTransitionProperty(term);\n+            } else if (isTime(term.token)) {\n+                if (parsedDuration == null) {\n+                    parsedDuration = parseDuration(term, false);\n+                } else if (parsedDelay == null) {\n+                    parsedDelay = parseDuration(term, true);\n+                }\n+            } else {\n+                List<String> args = new ArrayList<>();\n+                if (parsedTimingFunction == null) args.add(\"\\'<easing-function>\\'\");\n+                if (parsedProperty == null) args.add(\"\\'<single-transition-property>\\'\");\n+                if (parsedDuration == null || parsedDelay == null) args.add(\"\\'<duration>\\'\");\n+                error(term, \"Expected \" + String.join(\" or \", args));\n+            }\n+\n+            term = term.nextInSeries;\n+        }\n+\n+        if (parsedProperty == null && parsedDuration == null && parsedTimingFunction == null) {\n+            error(term, \"Expected \\'<single-transition>#\\'\");\n+        }\n+\n+        return new ParsedValueImpl<ParsedValue[], TransitionDefinition>(new ParsedValue[] {\n+            parsedProperty, parsedDuration, parsedDelay, parsedTimingFunction\n+        }, TransitionDefinitionConverter.getInstance());\n+    }\n+\n+    \/*\n+     * https:\/\/www.w3.org\/TR\/css-transitions-1\/#transition-property-property\n+     *\/\n+    private ParsedValueImpl<ParsedValue<String, String>[], String[]> parseTransitionPropertyLayers(Term term)\n+            throws ParseException {\n+        int nLayers = numberOfLayers(term);\n+        ParsedValue<String, String>[] layers = new ParsedValue[nLayers];\n+\n+        for (int i = 0; i < nLayers; ++i) {\n+            layers[i] = parseTransitionProperty(term);\n+            term = nextLayer(term);\n+        }\n+\n+        return new ParsedValueImpl<ParsedValue<String, String>[], String[]>(\n+            layers, StringConverter.SequenceConverter.getInstance());\n+    }\n+\n+    private ParsedValueImpl<String, String> parseTransitionProperty(Term term) throws ParseException {\n+        if (term == null || !isTransitionProperty(term.token)) {\n+            error(term,  \"Expected \\'<transition-property>\\'\");\n+        }\n+\n+        return new ParsedValueImpl<String, String>(term.token.getText(), null);\n+    }\n+\n+    private boolean isTransitionProperty(Token token) {\n+        int ttype;\n+        String str;\n+        return token != null\n+            && ((ttype = token.getType()) == CssLexer.STRING || ttype == CssLexer.IDENT)\n+            && (str = token.getText()) != null\n+            && !str.isEmpty();\n+    }\n+\n+    \/*\n+     * https:\/\/www.w3.org\/TR\/css-easing-1\/#easing-functions\n+     *\/\n+    private ParsedValueImpl<ParsedValue<?, Interpolator>[], Interpolator[]>\n+            parseEasingFunctionLayers(Term term) throws ParseException {\n+        int nLayers = numberOfLayers(term);\n+        ParsedValue<?, Interpolator>[] layers = new ParsedValue[nLayers];\n+\n+        for (int i = 0; i < nLayers; ++i) {\n+            layers[i] = parseEasingFunction(term);\n+            term = nextLayer(term);\n+        }\n+\n+        return new ParsedValueImpl<ParsedValue<?, Interpolator>[], Interpolator[]>(\n+            layers, InterpolatorConverter.SequenceConverter.getInstance());\n+    }\n+\n+    private ParsedValueImpl<?, Interpolator> parseEasingFunction(Term term) throws ParseException {\n+        if (term == null || !isEasingFunction(term.token)) {\n+            error(term,  \"Expected \\'<easing-function>\\'\");\n+        }\n+\n+        return switch (term.token.getText()) {\n+            case \"cubic-bezier(\" -> {\n+                Double[] args = new Double[4];\n+                Term arg = term.firstArg;\n+\n+                for (int j = 0; j < 4; ++j, arg = arg.nextArg) {\n+                    if (arg == null || arg.token == null || arg.token.getType() != CssLexer.NUMBER\n+                            || (args[j] = Double.parseDouble(arg.token.getText())) < 0 || args[j] > 1) {\n+                        error(arg != null ? arg : term,  \"Expected \\'<number [0,1]>\\'\");\n+                    }\n+                }\n+\n+                yield new ParsedValueImpl<>(new ParsedValueImpl[] {\n+                        new ParsedValueImpl(term.token.getText(), null),\n+                        new ParsedValueImpl(Arrays.asList(args), null)\n+                    }, InterpolatorConverter.getInstance());\n+            }\n+\n+            case \"steps(\" -> {\n+                Object[] args = new Object[2];\n+                Term arg = term.firstArg;\n+                if (arg == null || arg.token == null || arg.token.getType() != CssLexer.NUMBER) {\n+                    error(arg,  \"Expected \\'<integer>\\'\");\n+                } else {\n+                    args[0] = Integer.parseInt(arg.token.getText());\n+                }\n+\n+                arg = arg.nextArg;\n+                if (arg != null) {\n+                    if (isStepPosition(arg.token)) {\n+                        args[1] = arg.token.getText();\n+                    } else {\n+                        error(arg != null ? arg : term, \"Expected \\'<step-position>\\'\");\n+                    }\n+                }\n+\n+                yield new ParsedValueImpl<>(new ParsedValueImpl[] {\n+                        new ParsedValueImpl(term.token.getText(), null),\n+                        new ParsedValueImpl(Arrays.asList(args), null)\n+                    }, InterpolatorConverter.getInstance());\n+            }\n+\n+            default -> {\n+                yield new ParsedValueImpl<>(\n+                    new ParsedValueImpl(term.token.getText(), null),\n+                    InterpolatorConverter.getInstance());\n+            }\n+        };\n+    }\n+\n+    \/\/ https:\/\/www.w3.org\/TR\/css-easing-1\/#easing-functions\n+    \/\/ <easing-function> = linear | <cubic-bezier-easing-function> | <step-easing-function>\n+    private boolean isEasingFunction(Token token) throws ParseException {\n+        return token != null && switch (token.getText()) {\n+            case \"linear\" -> true;\n+            case \"ease\", \"ease-in\", \"ease-out\", \"ease-in-out\", \"cubic-bezier(\" -> true;\n+            case \"step-start\", \"step-end\", \"steps(\" -> true;\n+            case \"-fx-ease-in\", \"-fx-ease-out\", \"-fx-ease-both\" -> true;\n+            default -> false;\n+        };\n+    }\n+\n+    \/\/ https:\/\/www.w3.org\/TR\/css-easing-1\/#step-easing-functions\n+    \/\/ <step-position> = jump-start | jump-end | jump-none | jump-both | start | end\n+    private boolean isStepPosition(Token token) throws ParseException {\n+        return token != null && switch (token.getText()) {\n+            case \"jump-start\", \"jump-end\", \"jump-none\", \"jump-both\", \"start\", \"end\" -> true;\n+            default -> false;\n+        };\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/CssParser.java","additions":288,"deletions":1,"binary":false,"changes":289,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import com.sun.javafx.css.TransitionMediator;\n+import com.sun.javafx.css.TransitionDefinition;\n+import com.sun.javafx.scene.NodeHelper;\n@@ -30,0 +33,1 @@\n+import javafx.scene.Node;\n@@ -68,2 +72,10 @@\n-        \/\/ call set here in case it has been overridden in the javafx.beans.property\n-        set(v.booleanValue());\n+        TransitionDefinition transition = this.origin != null && getBean() instanceof Node node ?\n+            NodeHelper.findTransitionDefinition(node, getCssMetaData()) : null;\n+\n+        if (transition != null) {\n+            mediator = new TransitionMediatorImpl(get(), v != null && v);\n+            mediator.run(transition);\n+        } else {\n+            setValue(v);\n+        }\n+\n@@ -78,0 +90,5 @@\n+\n+        \/\/ Calling the 'bind' method always cancels a transition timer.\n+        if (mediator != null) {\n+            mediator.cancel(true);\n+        }\n@@ -84,1 +101,4 @@\n-        origin = StyleOrigin.USER;\n+\n+        if (mediator == null || mediator.cancel(false)) {\n+            origin = StyleOrigin.USER;\n+        }\n@@ -92,0 +112,31 @@\n+    private TransitionMediatorImpl mediator = null;\n+\n+    private class TransitionMediatorImpl extends TransitionMediator {\n+        private final boolean oldValue;\n+        private final boolean newValue;\n+\n+        public TransitionMediatorImpl(boolean oldValue, boolean newValue) {\n+            this.oldValue = oldValue;\n+            this.newValue = newValue;\n+        }\n+\n+        @Override\n+        public void onUpdate(double progress) {\n+            set(progress > 0 ? newValue : oldValue);\n+        }\n+\n+        @Override\n+        public void onStop() {\n+            mediator = null;\n+        }\n+\n+        @Override\n+        public StyleableProperty<?> getStyleableProperty() {\n+            return StyleableBooleanProperty.this;\n+        }\n+\n+        @Override\n+        public boolean equalsTargetValue(TransitionMediator mediator) {\n+            return newValue == ((TransitionMediatorImpl) mediator).newValue;\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableBooleanProperty.java","additions":55,"deletions":4,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import com.sun.javafx.css.TransitionMediator;\n+import com.sun.javafx.css.TransitionDefinition;\n+import com.sun.javafx.scene.NodeHelper;\n@@ -30,0 +33,1 @@\n+import javafx.scene.Node;\n@@ -68,1 +72,12 @@\n-        setValue(v);\n+        \/\/ If this.origin == null, we're setting the value for the first time.\n+        \/\/ No transition should be started in this case.\n+        TransitionDefinition transition = this.origin != null && getBean() instanceof Node node ?\n+            NodeHelper.findTransitionDefinition(node, getCssMetaData()) : null;\n+\n+        if (transition != null) {\n+            mediator = new TransitionMediatorImpl(get(), v != null ? v.doubleValue() : 0);\n+            mediator.run(transition);\n+        } else {\n+            setValue(v);\n+        }\n+\n@@ -77,0 +92,5 @@\n+\n+        \/\/ Calling the 'bind' method always cancels a transition timer.\n+        if (mediator != null) {\n+            mediator.cancel(true);\n+        }\n@@ -83,1 +103,4 @@\n-        origin = StyleOrigin.USER;\n+\n+        if (mediator == null || mediator.cancel(false)) {\n+            origin = StyleOrigin.USER;\n+        }\n@@ -91,0 +114,31 @@\n+    private TransitionMediatorImpl mediator = null;\n+\n+    private class TransitionMediatorImpl extends TransitionMediator {\n+        private final double oldValue;\n+        private final double newValue;\n+\n+        public TransitionMediatorImpl(double oldValue, double newValue) {\n+            this.oldValue = oldValue;\n+            this.newValue = newValue;\n+        }\n+\n+        @Override\n+        public void onUpdate(double progress) {\n+            set(progress < 1 ? oldValue + (newValue - oldValue) * progress : newValue);\n+        }\n+\n+        @Override\n+        public void onStop() {\n+            mediator = null;\n+        }\n+\n+        @Override\n+        public StyleableProperty<?> getStyleableProperty() {\n+            return StyleableDoubleProperty.this;\n+        }\n+\n+        @Override\n+        public boolean equalsTargetValue(TransitionMediator mediator) {\n+            return newValue == ((TransitionMediatorImpl) mediator).newValue;\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableDoubleProperty.java","additions":57,"deletions":3,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import com.sun.javafx.css.TransitionMediator;\n+import com.sun.javafx.css.TransitionDefinition;\n+import com.sun.javafx.scene.NodeHelper;\n@@ -30,0 +33,1 @@\n+import javafx.scene.Node;\n@@ -68,1 +72,10 @@\n-        setValue(v);\n+        TransitionDefinition transition = this.origin != null && getBean() instanceof Node node ?\n+            NodeHelper.findTransitionDefinition(node, getCssMetaData()) : null;\n+\n+        if (transition != null) {\n+            mediator = new TransitionMediatorImpl(get(), v != null ? v.floatValue() : 0);\n+            mediator.run(transition);\n+        } else {\n+            setValue(v);\n+        }\n+\n@@ -77,0 +90,5 @@\n+\n+        \/\/ Calling the 'bind' method always cancels a transition timer.\n+        if (mediator != null) {\n+            mediator.cancel(true);\n+        }\n@@ -83,1 +101,4 @@\n-        origin = StyleOrigin.USER;\n+\n+        if (mediator == null || mediator.cancel(false)) {\n+            origin = StyleOrigin.USER;\n+        }\n@@ -91,0 +112,5 @@\n+    private TransitionMediatorImpl mediator = null;\n+\n+    private class TransitionMediatorImpl extends TransitionMediator {\n+        private final float oldValue;\n+        private final float newValue;\n@@ -92,0 +118,25 @@\n+        public TransitionMediatorImpl(float oldValue, float newValue) {\n+            this.oldValue = oldValue;\n+            this.newValue = newValue;\n+        }\n+\n+        @Override\n+        public void onUpdate(double progress) {\n+            set(progress < 1 ? oldValue + (newValue - oldValue) * (float)progress : newValue);\n+        }\n+\n+        @Override\n+        public void onStop() {\n+            mediator = null;\n+        }\n+\n+        @Override\n+        public StyleableProperty<?> getStyleableProperty() {\n+            return StyleableFloatProperty.this;\n+        }\n+\n+        @Override\n+        public boolean equalsTargetValue(TransitionMediator mediator) {\n+            return newValue == ((TransitionMediatorImpl) mediator).newValue;\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableFloatProperty.java","additions":54,"deletions":3,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import com.sun.javafx.css.TransitionMediator;\n+import com.sun.javafx.css.TransitionDefinition;\n+import com.sun.javafx.scene.NodeHelper;\n@@ -30,0 +33,1 @@\n+import javafx.scene.Node;\n@@ -68,1 +72,10 @@\n-        setValue(v);\n+        TransitionDefinition transition = this.origin != null && getBean() instanceof Node node ?\n+            NodeHelper.findTransitionDefinition(node, getCssMetaData()) : null;\n+\n+        if (transition != null) {\n+            mediator = new TransitionMediatorImpl(get(), v != null ? v.intValue() : 0);\n+            mediator.run(transition);\n+        } else {\n+            setValue(v);\n+        }\n+\n@@ -77,0 +90,5 @@\n+\n+        \/\/ Calling the 'bind' method always cancels a transition timer.\n+        if (mediator != null) {\n+            mediator.cancel(true);\n+        }\n@@ -83,1 +101,4 @@\n-        origin = StyleOrigin.USER;\n+\n+        if (mediator == null || mediator.cancel(false)) {\n+            origin = StyleOrigin.USER;\n+        }\n@@ -91,0 +112,5 @@\n+    private TransitionMediatorImpl mediator = null;\n+\n+    private final class TransitionMediatorImpl extends TransitionMediator {\n+        private final int oldValue;\n+        private final int newValue;\n@@ -92,0 +118,25 @@\n+        public TransitionMediatorImpl(int oldValue, int newValue) {\n+            this.oldValue = oldValue;\n+            this.newValue = newValue;\n+        }\n+\n+        @Override\n+        public void onUpdate(double progress) {\n+            set(progress < 1 ? oldValue + (int)((newValue - oldValue) * progress) : newValue);\n+        }\n+\n+        @Override\n+        public void onStop() {\n+            mediator = null;\n+        }\n+\n+        @Override\n+        public StyleableProperty<?> getStyleableProperty() {\n+            return StyleableIntegerProperty.this;\n+        }\n+\n+        @Override\n+        public boolean equalsTargetValue(TransitionMediator mediator) {\n+            return newValue == ((TransitionMediatorImpl) mediator).newValue;\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableIntegerProperty.java","additions":54,"deletions":3,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,3 @@\n+import com.sun.javafx.css.TransitionMediator;\n+import com.sun.javafx.css.TransitionDefinition;\n+import com.sun.javafx.scene.NodeHelper;\n@@ -30,0 +33,1 @@\n+import javafx.scene.Node;\n@@ -68,1 +72,12 @@\n-        setValue(v);\n+        \/\/ If this.origin == null, we're setting the value for the first time.\n+        \/\/ No transition should be started in this case.\n+        TransitionDefinition transition = this.origin != null && getBean() instanceof Node node ?\n+            NodeHelper.findTransitionDefinition(node, getCssMetaData()) : null;\n+\n+        if (transition != null) {\n+            mediator = new TransitionMediatorImpl(get(), v != null ? v.longValue() : 0);\n+            mediator.run(transition);\n+        } else {\n+            setValue(v);\n+        }\n+\n@@ -77,0 +92,5 @@\n+\n+        \/\/ Calling the 'bind' method always cancels a transition timer.\n+        if (mediator != null) {\n+            mediator.cancel(true);\n+        }\n@@ -83,1 +103,4 @@\n-        origin = StyleOrigin.USER;\n+\n+        if (mediator == null || mediator.cancel(false)) {\n+            origin = StyleOrigin.USER;\n+        }\n@@ -91,0 +114,5 @@\n+    private TransitionMediatorImpl mediator = null;\n+\n+    private final class TransitionMediatorImpl extends TransitionMediator {\n+        private final long oldValue;\n+        private final long newValue;\n@@ -92,0 +120,25 @@\n+        public TransitionMediatorImpl(long oldValue, long newValue) {\n+            this.oldValue = oldValue;\n+            this.newValue = newValue;\n+        }\n+\n+        @Override\n+        public void onUpdate(double progress) {\n+            set(progress < 1 ? oldValue + (long)((newValue - oldValue) * progress) : newValue);\n+        }\n+\n+        @Override\n+        public void onStop() {\n+            mediator = null;\n+        }\n+\n+        @Override\n+        public StyleableProperty<?> getStyleableProperty() {\n+            return StyleableLongProperty.this;\n+        }\n+\n+        @Override\n+        public boolean equalsTargetValue(TransitionMediator mediator) {\n+            return newValue == ((TransitionMediatorImpl) mediator).newValue;\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableLongProperty.java","additions":56,"deletions":3,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+import com.sun.javafx.css.TransitionMediator;\n+import com.sun.javafx.css.TransitionDefinition;\n+import com.sun.javafx.scene.NodeHelper;\n+import javafx.animation.Interpolatable;\n@@ -30,0 +34,2 @@\n+import javafx.scene.Node;\n+import java.util.Objects;\n@@ -68,2 +74,27 @@\n-    public void applyStyle(StyleOrigin origin, T v) {\n-        set(v);\n+    public void applyStyle(StyleOrigin origin, T newValue) {\n+        T oldValue;\n+\n+        if (newValue == null) {\n+            set(null);\n+        } else if (!(newValue instanceof Interpolatable<?>)\n+                   || ((oldValue = get()) == null)\n+                   || !(newValue.getClass().isInstance(oldValue))) {\n+            \/\/ Consider a case where T := Paint. Now 'oldValue' could be a Color instance, while 'newValue' could\n+            \/\/ be a LinearGradient instance. Both types implement Interpolatable, but with different type arguments.\n+            \/\/ We detect this case by checking whether 'newValue' is an instance of 'oldValue' (so that\n+            \/\/ oldValue.interpolate(newValue, t) succeeds), and skipping the transition when the test fails.\n+            set(newValue);\n+        } else {\n+            \/\/ If this.origin == null, we're setting the value for the first time.\n+            \/\/ No transition should be started in this case.\n+            TransitionDefinition transition = this.origin != null && getBean() instanceof Node node ?\n+                NodeHelper.findTransitionDefinition(node, getCssMetaData()) : null;\n+\n+            if (transition != null) {\n+                mediator = new TransitionMediatorImpl(oldValue, newValue);\n+                mediator.run(transition);\n+            } else {\n+                set(newValue);\n+            }\n+        }\n+\n@@ -78,0 +109,5 @@\n+\n+        \/\/ Calling the 'bind' method always cancels a transition timer.\n+        if (mediator != null) {\n+            mediator.cancel(true);\n+        }\n@@ -84,1 +120,9 @@\n-        origin = StyleOrigin.USER;\n+\n+        \/\/ Calling the 'set' method cancels the transition timer, but not if the 'set' method was\n+        \/\/ directly called by the timer itself (i.e. a timer will not accidentally cancel itself).\n+        \/\/ Note that indirect cancellation is still possible: a timer may fire a transition event,\n+        \/\/ which could cause user code to be executed that invokes this 'set' method. In that case,\n+        \/\/ the call will cancel the timer.\n+        if (mediator == null || mediator.cancel(false)) {\n+            origin = StyleOrigin.USER;\n+        }\n@@ -92,0 +136,1 @@\n+    private TransitionMediatorImpl mediator = null;\n@@ -93,0 +138,31 @@\n+    private final class TransitionMediatorImpl extends TransitionMediator {\n+        private final T oldValue;\n+        private final T newValue;\n+\n+        TransitionMediatorImpl(T oldValue, T newValue) {\n+            this.oldValue = oldValue;\n+            this.newValue = newValue;\n+        }\n+\n+        @Override\n+        @SuppressWarnings(\"unchecked\")\n+        public void onUpdate(double progress) {\n+            set(progress < 1 ? ((Interpolatable<T>)oldValue).interpolate(newValue, progress) : newValue);\n+        }\n+\n+        @Override\n+        public void onStop() {\n+            mediator = null;\n+        }\n+\n+        @Override\n+        public StyleableProperty<?> getStyleableProperty() {\n+            return StyleableObjectProperty.this;\n+        }\n+\n+        @Override\n+        @SuppressWarnings(\"unchecked\")\n+        public boolean equalsTargetValue(TransitionMediator mediator) {\n+            return Objects.equals(newValue, ((TransitionMediatorImpl)mediator).newValue);\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableObjectProperty.java","additions":79,"deletions":3,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,15 @@\n- * <p>The {@link javafx.css.StyleablePropertyFactory StyleablePropertyFactory}\n- * greatly simplifies creating a StyleableProperty and its corresponding CssMetaData.<\/p>\n+ * In addition to being styleable via CSS, a {@code StyleableProperty} implementation can opt to\n+ * support implicit CSS transitions by extending one of the following classes:\n+ * <ul>\n+ *     <li>{@link StyleableBooleanProperty}\n+ *     <li>{@link StyleableDoubleProperty}\n+ *     <li>{@link StyleableFloatProperty}\n+ *     <li>{@link StyleableIntegerProperty}\n+ *     <li>{@link StyleableLongProperty}\n+ *     <li>{@link StyleableObjectProperty}\n+ * <\/ul>\n+ *\n+ * <p>{@link StyleablePropertyFactory} greatly simplifies creating a {@code StyleableProperty} and\n+ * its corresponding {@link CssMetaData}. All properties created using {@code StyleablePropertyFactory}\n+ * support implicit CSS transitions.\n+ *\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/StyleableProperty.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.css;\n+\n+import javafx.animation.Transition;\n+import javafx.event.Event;\n+import javafx.event.EventType;\n+import javafx.scene.Node;\n+import javafx.util.Duration;\n+import java.util.Objects;\n+\n+\/**\n+ * An event that signals the creation, beginning, completion and cancellation of implicit CSS transitions.\n+ * <p>\n+ * Note that this event is not raised for explicit transitions that are created using the {@link Transition} class.\n+ *\n+ * @since 22\n+ *\/\n+public final class TransitionEvent extends Event {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    \/**\n+     * Common supertype for all {@code TransitionEvent} types.\n+     *\/\n+    public static final EventType<TransitionEvent> ANY =\n+            new EventType<>(Event.ANY, \"TRANSITION\");\n+\n+    \/**\n+     * This event occurs when a transition has been created and added to the list of running\n+     * transitions of a {@link Node}.\n+     *\/\n+    public static final EventType<TransitionEvent> RUN =\n+            new EventType<>(TransitionEvent.ANY, \"TRANSITION_RUN\");\n+\n+    \/**\n+     * This event occurs when a running transition enters its active period, which happens\n+     * at the end of the delay phase.\n+     *\/\n+    public static final EventType<TransitionEvent> START =\n+            new EventType<>(TransitionEvent.ANY, \"TRANSITION_START\");\n+\n+    \/**\n+     * This event occurs when a running transition has reached the end of its active period.\n+     * If the transition is cancelled prior to reaching the end of its active period, this\n+     * event does not occur.\n+     *\/\n+    public static final EventType<TransitionEvent> END =\n+            new EventType<>(TransitionEvent.ANY, \"TRANSITION_END\");\n+\n+    \/**\n+     * This event occurs when a running transition was cancelled before it has reached the\n+     * end of its active period.\n+     *\/\n+    public static final EventType<TransitionEvent> CANCEL =\n+            new EventType<>(TransitionEvent.ANY, \"TRANSITION_CANCEL\");\n+\n+    private final StyleableProperty<?> property;\n+    private final Duration elapsedTime;\n+\n+    \/**\n+     * Creates a new instance of the {@code TransitionEvent} class.\n+     *\n+     * @param eventType the event type\n+     * @param property the {@code StyleableProperty} that is targeted by the transition\n+     * @param elapsedTime the time that has elapsed since the transition has entered its active period\n+     * @throws NullPointerException if {@code eventType}, {@code property} or {@code elapsedTime} is {@code null}\n+     *\/\n+    public TransitionEvent(EventType<? extends Event> eventType,\n+                           StyleableProperty<?> property,\n+                           Duration elapsedTime) {\n+        super(Objects.requireNonNull(eventType, \"eventType cannot be null\"));\n+        this.property = Objects.requireNonNull(property, \"property cannot be null\");\n+        this.elapsedTime = Objects.requireNonNull(elapsedTime, \"elapsedTime cannot be null\");\n+    }\n+\n+    \/**\n+     * Gets the {@code StyleableProperty} that is targeted by the transition.\n+     *\n+     * @return the {@code StyleableProperty}\n+     *\/\n+    public StyleableProperty<?> getProperty() {\n+        return property;\n+    }\n+\n+    \/**\n+     * Gets the time that has elapsed since the transition has entered its active period,\n+     * not including the time spent in the delay phase.\n+     *\n+     * @return the elapsed time, or zero if the transition has not entered its active period\n+     *\/\n+    public Duration getElapsedTime() {\n+        return elapsedTime;\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/TransitionEvent.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+        static final SequenceConverter SEQUENCE_INSTANCE = new SequenceConverter();\n@@ -81,0 +82,34 @@\n+    \/**\n+     * Converts a sequence of parsed values to an array of {@link Duration} instances.\n+     *\n+     * @since 22\n+     *\/\n+    public static final class SequenceConverter extends StyleConverter<ParsedValue<ParsedValue<?, Size>, Duration>[], Duration[]> {\n+        \/**\n+         * Gets the {@code SequenceConverter} instance.\n+         * @return the {@code SequenceConverter} instance\n+         *\/\n+        public static SequenceConverter getInstance() {\n+            return Holder.SEQUENCE_INSTANCE;\n+        }\n+\n+        private SequenceConverter() {}\n+\n+        @Override\n+        public Duration[] convert(\n+                ParsedValue<ParsedValue<ParsedValue<?, Size>, Duration>[], Duration[]> value, Font font) {\n+            ParsedValue<?, Duration>[] values = value.getValue();\n+            Duration[] durations = new Duration[values.length];\n+            for (int p = 0; p < values.length; p++) {\n+                durations[p] = values[p].convert(font);\n+            }\n+\n+            return durations;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"Duration.SequenceConverter\";\n+        }\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/converter\/DurationConverter.java","additions":36,"deletions":1,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,0 +68,1 @@\n+import com.sun.javafx.css.TransitionDefinitionCssMetaData;\n@@ -640,5 +641,7 @@\n-        for (int n = 0; n < numStyleables; n++) {\n-\n-            @SuppressWarnings(\"unchecked\") \/\/ this is a widening conversion\n-            final CssMetaData<Styleable,Object> cssMetaData =\n-                    (CssMetaData<Styleable,Object>)styleables.get(n);\n+        for (int n = -1; n < numStyleables; n++) {\n+            \/\/ The 'transition' property is a special pseudo-property that is always processed\n+            \/\/ before other CSS properties, as its value might affect the transitions that are\n+            \/\/ applied to other properties.\n+            final CssMetaData<Styleable, ?> cssMetaData = n < 0 ?\n+                    (CssMetaData<Styleable, ?>)(CssMetaData<?, ?>)TransitionDefinitionCssMetaData.getInstance() :\n+                    (CssMetaData<Styleable, ?>)styleables.get(n);\n@@ -832,1 +835,0 @@\n-        for(int n=0; n<max; n++) {\n@@ -834,3 +836,7 @@\n-            @SuppressWarnings(\"unchecked\") \/\/ this is a widening conversion\n-            final CssMetaData<Styleable,Object> cssMetaData =\n-                    (CssMetaData<Styleable,Object>)styleables.get(n);\n+        for (int n = -1; n < max; n++) {\n+            \/\/ The 'transition' property is a special pseudo-property that is always processed\n+            \/\/ before other CSS properties, as its value might affect the transitions that are\n+            \/\/ applied to other properties.\n+            final CssMetaData<Styleable, ?> cssMetaData = n < 0 ?\n+                    (CssMetaData<Styleable, ?>)(CssMetaData<?, ?>)TransitionDefinitionCssMetaData.getInstance() :\n+                    (CssMetaData<Styleable, ?>)styleables.get(n);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/CssStyleHelper.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import javafx.beans.property.Property;\n@@ -62,0 +63,1 @@\n+import javafx.css.StyleOrigin;\n@@ -107,0 +109,1 @@\n+import java.util.Arrays;\n@@ -125,0 +128,3 @@\n+import com.sun.javafx.css.TransitionDefinition;\n+import com.sun.javafx.css.TransitionDefinitionCssMetaData;\n+import com.sun.javafx.css.TransitionTimer;\n@@ -627,0 +633,30 @@\n+\n+            @Override\n+            public StyleableProperty<TransitionDefinition[]> getTransitionProperty(Node node) {\n+                if (node.transitions == null) {\n+                    node.transitions = node.new TransitionDefinitionCollection();\n+                }\n+\n+                return node.transitions;\n+            }\n+\n+            @Override\n+            public TransitionDefinition findTransitionDefinition(\n+                    Node node, CssMetaData<? extends Styleable, ?> metadata) {\n+                return node.transitions == null ? null : node.transitions.find(metadata);\n+            }\n+\n+            @Override\n+            public void addTransitionTimer(Node node, TransitionTimer timer) {\n+                node.addTransitionTimer(timer);\n+            }\n+\n+            @Override\n+            public void removeTransitionTimer(Node node, TransitionTimer timer) {\n+                node.removeTransitionTimer(timer);\n+            }\n+\n+            @Override\n+            public TransitionTimer findTransitionTimer(Node node, Property<?> property) {\n+                return node.findTransitionTimer(property);\n+            }\n@@ -1060,0 +1096,3 @@\n+            if (newScene == null) {\n+                completeTransitionTimers();\n+            }\n@@ -8600,0 +8639,6 @@\n+            if (!value) {\n+                \/\/ When this node is removed from the scene graph or becomes invisible, we complete\n+                \/\/ all running transitions for this node. This ensures that a node is not affected\n+                \/\/ by a transition when it is no longer useful.\n+                completeTransitionTimers();\n+            }\n@@ -8920,0 +8965,183 @@\n+\n+    \/* *************************************************************************\n+     *                                                                         *\n+     *                           CSS Transitions                               *\n+     *                                                                         *\n+     **************************************************************************\/\n+\n+    private List<TransitionTimer> transitionTimers;\n+\n+    \/**\n+     * Called by animatable {@link StyleableProperty} implementations in order to register\n+     * a running {@link TransitionTimer} with this {@code Node}. This allows the node\n+     * to keep track of running timers that are targeting its properties.\n+     *\n+     * @param timer the transition timer\n+     *\/\n+    private void addTransitionTimer(TransitionTimer timer) {\n+        if (transitionTimers == null) {\n+            transitionTimers = new ArrayList<>(4);\n+        }\n+\n+        transitionTimers.add(timer);\n+    }\n+\n+    \/**\n+     * Removes a timer that was previously registered with {@link #addTransitionTimer}.\n+     * This method is called by animatable {@link StyleableProperty} implementations\n+     * when their {@link TransitionTimer} has completed.\n+     *\n+     * @param timer the transition timer\n+     *\/\n+    private void removeTransitionTimer(TransitionTimer timer) {\n+        if (transitionTimers != null) {\n+            transitionTimers.remove(timer);\n+        }\n+    }\n+\n+    \/**\n+     * Finds the transition timer that targets the specified {@code property}.\n+     *\n+     * @param property the targeted property\n+     * @return the transition timer, or {@code null} if the property is not\n+     *         targeted by a transition timer\n+     *\/\n+    private TransitionTimer findTransitionTimer(Property<?> property) {\n+        if (transitionTimers == null) {\n+            return null;\n+        }\n+\n+        for (int i = 0, max = transitionTimers.size(); i < max; ++i) {\n+            TransitionTimer timer = transitionTimers.get(i);\n+\n+            \/\/ We use an identity comparison here because we're looking for the exact property\n+            \/\/ instance that was targeted by the transition timer on this node.\n+            if (timer.getTargetProperty() == property) {\n+                return timer;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    \/**\n+     * Completes all running timers, which skips the rest of their animation and sets\n+     * the property to the target value.\n+     *\/\n+    \/\/ package-private for testing\n+    void completeTransitionTimers() {\n+        if (transitionTimers == null || transitionTimers.isEmpty()) {\n+            return;\n+        }\n+\n+        \/\/ Make a copy of the list, because completing the timers causes them to be removed\n+        \/\/ from the list, which would result in a ConcurrentModificationException.\n+        for (TransitionTimer timer : List.copyOf(transitionTimers)) {\n+            timer.complete();\n+        }\n+    }\n+\n+    \/\/ package-private for testing\n+    List<TransitionTimer> getTransitionTimers() {\n+        return transitionTimers;\n+    }\n+\n+    \/**\n+     * Contains descriptions of the animated transitions that are currently defined for\n+     * properties of this {@code Node}.\n+     * <p>\n+     * All property transitions are implicit, which means they are started automatically by\n+     * the CSS subsystem when a property value is changed. Explicit property changes, such as\n+     * by calling {@link Property#setValue(Object)}, do not trigger an animated transition.\n+     *\/\n+    private class TransitionDefinitionCollection\n+            extends ArrayList<TransitionDefinition>\n+            implements StyleableProperty<TransitionDefinition[]> {\n+        private StyleOrigin origin;\n+\n+        \/**\n+         * Returns the transition for the property referenced by the specified CSS metadata,\n+         * or {@code null} if no transition was found.\n+         *\n+         * @param metadata the CSS metadata of the property\n+         * @return the {@code TransitionDefinition} specified for the property referenced by the\n+         *         CSS metadata, {@code null} otherwise\n+         *\/\n+        TransitionDefinition find(CssMetaData<? extends Styleable, ?> metadata) {\n+            int size = size();\n+            if (size == 0) {\n+                return null;\n+            }\n+\n+            \/\/ We look for a matching transition in reverse, since multiple transitions might be specified\n+            \/\/ for the same property. In this case, the last transition takes precedence.\n+            for (int i = size - 1; i >= 0; --i) {\n+                TransitionDefinition transition = get(i);\n+\n+                boolean selected = \"all\".equals(transition.propertyName())\n+                    || metadata.getProperty().equals(transition.propertyName());\n+\n+                if (selected) {\n+                    return transition;\n+                }\n+            }\n+\n+            List<CssMetaData<? extends Styleable, ?>> subMetadata = metadata.getSubProperties();\n+            if (subMetadata == null) {\n+                return null;\n+            }\n+\n+            \/\/ We also need to search for matching sub-properties, since a transition might be defined\n+            \/\/ for a sub-property (for example, '-fx-background-color') but must be applied to the base\n+            \/\/ property (-fx-background).\n+            for (int i = 0, max = subMetadata.size(); i < max; ++i) {\n+                TransitionDefinition transition = find(subMetadata.get(i));\n+                if (transition != null) {\n+                    return transition;\n+                }\n+            }\n+\n+            return null;\n+        }\n+\n+        @Override\n+        public TransitionDefinition[] getValue() {\n+            return toArray(TransitionDefinition[]::new);\n+        }\n+\n+        @Override\n+        public void setValue(TransitionDefinition[] value) {\n+            clear();\n+            addAll(Arrays.asList(value));\n+            this.origin = StyleOrigin.USER;\n+        }\n+\n+        @Override\n+        public void applyStyle(StyleOrigin origin, TransitionDefinition[] value) {\n+            setValue(value);\n+            this.origin = origin;\n+        }\n+\n+        @Override\n+        public StyleOrigin getStyleOrigin() {\n+            return origin;\n+        }\n+\n+        @Override\n+        public CssMetaData<? extends Styleable, TransitionDefinition[]> getCssMetaData() {\n+            return TransitionDefinitionCssMetaData.getInstance();\n+        }\n+    }\n+\n+    private TransitionDefinitionCollection transitions;\n+\n+    \/\/ package-private for testing\n+    List<TransitionDefinition> getTransitionDefinitions() {\n+        if (transitions == null) {\n+            transitions = new TransitionDefinitionCollection();\n+        }\n+\n+        return transitions;\n+    }\n+\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":228,"deletions":0,"binary":false,"changes":228,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import com.sun.javafx.css.TransitionDefinition;\n+import com.sun.javafx.css.TransitionTimer;\n@@ -34,0 +36,1 @@\n+import java.util.List;\n@@ -88,0 +91,12 @@\n+\n+    public static List<TransitionDefinition> getTransitionDefinitions(Node n) {\n+        return n.getTransitionDefinitions();\n+    }\n+\n+    public static List<TransitionTimer> getTransitionTimers(Node n) {\n+        return n.getTransitionTimers();\n+    }\n+\n+    public static void completeTransitionTimers(Node n) {\n+        n.completeTransitionTimers();\n+    }\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/javafx\/scene\/NodeShim.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+--add-opens javafx.graphics\/javafx.css=ALL-UNNAMED\n","filename":"modules\/javafx.graphics\/src\/test\/addExports","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,245 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.css;\n+\n+import com.sun.javafx.css.TransitionMediator;\n+import com.sun.javafx.css.TransitionDefinition;\n+import com.sun.javafx.css.TransitionTimer;\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.css.StyleableProperty;\n+import javafx.css.TransitionEvent;\n+import javafx.scene.Group;\n+import javafx.scene.NodeShim;\n+import javafx.scene.Scene;\n+import javafx.scene.shape.Rectangle;\n+import javafx.stage.Stage;\n+import javafx.util.Duration;\n+import java.util.ArrayList;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static javafx.animation.Interpolator.*;\n+import static javafx.util.Duration.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class TransitionTimerTest {\n+\n+    private Stage stage;\n+    private Rectangle node;\n+\n+    private static class TimerWrapper {\n+        final TransitionMediator mediator;\n+        TransitionTimer timer;\n+        long now;\n+\n+        TimerWrapper(TransitionMediator mediator) {\n+            this.mediator = mediator;\n+        }\n+\n+        void run(TransitionDefinition definition) {\n+            mediator.run(definition);\n+            timer = mediator.getTimer();\n+            now = Toolkit.getToolkit().getPrimaryTimer().nanos();\n+        }\n+\n+        void fire(Duration elapsedTime) {\n+            now += (long)(elapsedTime.toMillis()) * 1_000_000;\n+            timer.handle(now);\n+        }\n+    }\n+\n+    private class TestTransitionMediator extends TransitionMediator {\n+        @Override\n+        public void onUpdate(double progress) {}\n+\n+        @Override\n+        public void onStop() {}\n+\n+        @Override\n+        public StyleableProperty<?> getStyleableProperty() {\n+            return (StyleableProperty<?>)node.opacityProperty();\n+        }\n+\n+        @Override\n+        public boolean equalsTargetValue(TransitionMediator mediator) {\n+            return false;\n+        }\n+    }\n+\n+    @BeforeEach\n+    public void startup() {\n+        node = new Rectangle();\n+        stage = new Stage();\n+        stage.setScene(new Scene(new Group(node)));\n+        stage.show();\n+    }\n+\n+    @AfterEach\n+    public void teardown() {\n+        ((Group)stage.getScene().getRoot()).getChildren().clear(); \/\/ stops running timers\n+        stage.close();\n+    }\n+\n+    @Test\n+    public void testTimerEndsWithProgressExactlyOne() {\n+        var trace = new ArrayList<Double>();\n+        var transition = new TransitionDefinition(\"-fx-opacity\", seconds(1), ZERO, LINEAR);\n+        var timer = new TimerWrapper(new TestTransitionMediator() {\n+            @Override public void onUpdate(double progress) {\n+                trace.add(progress);\n+            }\n+        });\n+\n+        timer.run(transition);\n+        timer.fire(seconds(0.4));\n+        assertEquals(1, trace.size());\n+        assertTrue(trace.get(0) > 0.3 && trace.get(0) < 0.5);\n+\n+        timer.fire(seconds(0.7));\n+        assertEquals(2, trace.size());\n+        assertTrue(trace.get(1) == 1.0); \/\/ must be exactly 1\n+    }\n+\n+    @Test\n+    public void testTimerStopsWhenProgressIsOne() {\n+        var flag = new boolean[1];\n+        var transition = new TransitionDefinition(\"-fx-opacity\", seconds(1), ZERO, LINEAR);\n+        var timer = new TimerWrapper(new TestTransitionMediator() {\n+            @Override public void onStop() {\n+                flag[0] = true;\n+            }\n+        });\n+\n+        timer.run(transition);\n+        timer.fire(seconds(0.9));\n+        assertFalse(flag[0]);\n+        timer.fire(seconds(0.2));\n+        assertTrue(flag[0]);\n+    }\n+\n+    @Test\n+    public void testRunningTimerCanBeCancelled() {\n+        var transition = new TransitionDefinition(\"-fx-opacity\", seconds(1), ZERO, LINEAR);\n+        var timer = new TimerWrapper(new TestTransitionMediator());\n+\n+        timer.run(transition);\n+        timer.fire(seconds(0.2));\n+        assertEquals(1, NodeShim.getTransitionTimers(node).size());\n+        assertTrue(timer.mediator.cancel(false));\n+        assertEquals(0, NodeShim.getTransitionTimers(node).size());\n+    }\n+\n+    @Test\n+    public void testTimerDoesNotStopItselfWhenSettingValue() {\n+        var flag = new boolean[1];\n+        var transition = new TransitionDefinition(\"-fx-opacity\", seconds(1), ZERO, LINEAR);\n+        var timer = new TimerWrapper(new TestTransitionMediator() {\n+            @Override public void onUpdate(double progress) {\n+                flag[0] = cancel(false);\n+            }\n+        });\n+\n+        timer.run(transition);\n+        timer.fire(seconds(0.2));\n+        assertFalse(flag[0]);\n+    }\n+\n+    @Test\n+    public void testTimerFollowsExpectedOutputProgressCurve() {\n+        final int steps = 100;\n+        var expectedOutput = new ArrayList<Double>(steps);\n+        var actualOutput = new ArrayList<Double>(steps);\n+        var transition = new TransitionDefinition(\"-fx-opacity\", seconds(1), ZERO, EASE_BOTH);\n+        var timer = new TimerWrapper(new TestTransitionMediator() {\n+            @Override public void onUpdate(double progress) {\n+                actualOutput.add(progress);\n+            }\n+        });\n+\n+        timer.run(transition);\n+\n+        for (int i = 0; i < steps; ++i) {\n+            double elapsed = 1D \/ (double)steps;\n+            timer.fire(seconds(elapsed));\n+\n+            double progress = (double)(i + 1) \/ (double)steps;\n+            expectedOutput.add(EASE_BOTH.interpolate(0D, 1D, progress));\n+        }\n+\n+        assertEquals(expectedOutput, actualOutput);\n+    }\n+\n+    @Test\n+    public void testInterruptingTransitionIsShortened() {\n+        var transition = new TransitionDefinition(\"-fx-opacity\", seconds(1), ZERO, LINEAR);\n+        var timer1 = new TimerWrapper(new TestTransitionMediator());\n+        var timer2 = new TimerWrapper(new TestTransitionMediator());\n+        var trace = new ArrayList<TransitionEvent>();\n+        node.addEventHandler(TransitionEvent.ANY, trace::add);\n+\n+        \/\/ Start timer1 and advance 0.25s into the first transition.\n+        timer1.run(transition);\n+        timer1.fire(seconds(0.25));\n+        assertEquals(2, trace.size());\n+        assertSame(TransitionEvent.RUN, trace.get(0).getEventType());\n+        assertSame(TransitionEvent.START, trace.get(1).getEventType());\n+\n+        \/\/ Now we start timer2. This immediately cancels timer1 and adjusts the duration\n+        \/\/ of timer2 so that it completes in less time than specified.\n+        timer2.run(transition);\n+        assertEquals(4, trace.size());\n+        assertSame(TransitionEvent.CANCEL, trace.get(2).getEventType());\n+        assertSame(TransitionEvent.RUN, trace.get(3).getEventType());\n+\n+        \/\/ Advance 0.25s into the second transition, completing timer2.\n+        timer2.fire(seconds(0.25));\n+        assertEquals(6, trace.size());\n+        assertSame(TransitionEvent.START, trace.get(4).getEventType());\n+        assertSame(TransitionEvent.END, trace.get(5).getEventType());\n+    }\n+\n+    @Test\n+    public void testRedundantTransitionIsDiscarded() {\n+        var transition = new TransitionDefinition(\"-fx-opacity\", seconds(1), ZERO, LINEAR);\n+\n+        var timer1 = new TimerWrapper(new TestTransitionMediator() {\n+            @Override public boolean equalsTargetValue(TransitionMediator mediator) {\n+                return true;\n+            }\n+        });\n+\n+        var timer2 = new TimerWrapper(new TestTransitionMediator());\n+\n+        \/\/ Start timer1. This adds it to the list of running timers.\n+        timer1.run(transition);\n+\n+        \/\/ Now we start timer2. Since both timers target the same property of the same node, and timer2\n+        \/\/ has the same target value as timer1, it is discarded and timer1 is returned instead.\n+        timer2.run(transition);\n+        assertSame(timer1.timer, timer2.timer);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/TransitionTimerTest.java","additions":245,"deletions":0,"binary":false,"changes":245,"status":"added"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.css.converters;\n+\n+import com.sun.javafx.css.InterpolatorConverter;\n+import com.sun.javafx.css.ParsedValueImpl;\n+import javafx.animation.Interpolator;\n+import javafx.animation.Interpolator.StepPosition;\n+import javafx.css.ParsedValue;\n+import java.util.List;\n+import java.util.Locale;\n+import org.junit.jupiter.api.Test;\n+\n+import static javafx.animation.Interpolator.*;\n+import static com.sun.javafx.css.InterpolatorConverter.*;\n+import static test.javafx.animation.InterpolatorUtils.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class InterpolatorConverterTest {\n+\n+    @Test\n+    public void testConvertLinearInterpolator() {\n+        var value = new ParsedValueImpl<Object, Interpolator>(new ParsedValueImpl<>(\"linear\", null), null);\n+        var result = InterpolatorConverter.getInstance().convert(value, null);\n+        assertInterpolatorEquals(LINEAR, result);\n+    }\n+\n+    @Test\n+    public void testConvertEaseInterpolator() {\n+        var value = new ParsedValueImpl<Object, Interpolator>(new ParsedValueImpl<>(\"ease\", null), null);\n+        var result = InterpolatorConverter.getInstance().convert(value, null);\n+        assertInterpolatorEquals(CSS_EASE, result);\n+    }\n+\n+    @Test\n+    public void testConvertEaseInInterpolator() {\n+        var value = new ParsedValueImpl<Object, Interpolator>(new ParsedValueImpl<>(\"ease-in\", null), null);\n+        var result = InterpolatorConverter.getInstance().convert(value, null);\n+        assertInterpolatorEquals(CSS_EASE_IN, result);\n+    }\n+\n+    @Test\n+    public void testConvertEaseOutInterpolator() {\n+        var value = new ParsedValueImpl<Object, Interpolator>(new ParsedValueImpl<>(\"ease-out\", null), null);\n+        var result = InterpolatorConverter.getInstance().convert(value, null);\n+        assertInterpolatorEquals(CSS_EASE_OUT, result);\n+    }\n+\n+    @Test\n+    public void testConvertEaseInOutInterpolator() {\n+        var value = new ParsedValueImpl<Object, Interpolator>(new ParsedValueImpl<>(\"ease-in-out\", null), null);\n+        var result = InterpolatorConverter.getInstance().convert(value, null);\n+        assertInterpolatorEquals(CSS_EASE_IN_OUT, result);\n+    }\n+\n+    @Test\n+    public void testConvertFxEaseInInterpolator() {\n+        var value = new ParsedValueImpl<Object, Interpolator>(new ParsedValueImpl<>(\"-fx-ease-in\", null), null);\n+        var result = InterpolatorConverter.getInstance().convert(value, null);\n+        assertInterpolatorEquals(EASE_IN, result);\n+    }\n+\n+    @Test\n+    public void testConvertFxEaseOutInterpolator() {\n+        var value = new ParsedValueImpl<Object, Interpolator>(new ParsedValueImpl<>(\"-fx-ease-out\", null), null);\n+        var result = InterpolatorConverter.getInstance().convert(value, null);\n+        assertInterpolatorEquals(EASE_OUT, result);\n+    }\n+\n+    @Test\n+    public void testConvertFxEaseBothInterpolator() {\n+        var value = new ParsedValueImpl<Object, Interpolator>(new ParsedValueImpl<>(\"-fx-ease-both\", null), null);\n+        var result = InterpolatorConverter.getInstance().convert(value, null);\n+        assertInterpolatorEquals(EASE_BOTH, result);\n+    }\n+\n+    @Test\n+    public void testConvertCubicBezierInterpolator() {\n+        var value = new ParsedValueImpl<Object, Interpolator>(new ParsedValue[] {\n+            new ParsedValueImpl<>(\"cubic-bezier(\", null),\n+            new ParsedValueImpl<>(List.of(0.1, 0.2, 0.3, 0.4), null) },\n+            null);\n+        var result = InterpolatorConverter.getInstance().convert(value, null);\n+        assertInterpolatorEquals(SPLINE(0.1, 0.2, 0.3, 0.4), result);\n+    }\n+\n+    @Test\n+    public void testConvertStepStartInterpolator() {\n+        var value = new ParsedValueImpl<Object, Interpolator>(new ParsedValueImpl<>(\"step-start\", null), null);\n+        var result = InterpolatorConverter.getInstance().convert(value, null);\n+        assertInterpolatorEquals(STEP_START, result);\n+    }\n+\n+    @Test\n+    public void testConvertStepEndInterpolator() {\n+        var value = new ParsedValueImpl<Object, Interpolator>(new ParsedValueImpl<>(\"step-end\", null), null);\n+        var result = InterpolatorConverter.getInstance().convert(value, null);\n+        assertInterpolatorEquals(STEP_END, result);\n+    }\n+\n+    @Test\n+    public void testConvertStepsInterpolator() {\n+        for (var stepPosition : StepPosition.values()) {\n+            var cssName = \"jump-\" + stepPosition.toString().toLowerCase(Locale.ROOT).replace('_', '-');\n+            var value = new ParsedValueImpl<Object, Interpolator>(new ParsedValue[] {\n+                new ParsedValueImpl<>(\"steps(\", null),\n+                new ParsedValueImpl<>(List.of(3, cssName), null) },\n+                null);\n+            var result = InterpolatorConverter.getInstance().convert(value, null);\n+            assertInterpolatorEquals(STEPS(3, stepPosition), result);\n+        }\n+    }\n+\n+    @Test\n+    public void testRepeatedConversionReturnsCachedInterpolator() {\n+        var result1 = InterpolatorConverter.getInstance().convert(\n+            new ParsedValueImpl<>(new ParsedValueImpl[] {\n+                new ParsedValueImpl<>(\"cubic-bezier(\", null),\n+                new ParsedValueImpl<>(List.of(0.1, 0.2, 0.3, 0.4), null) }, null),\n+            null);\n+        var result2 = InterpolatorConverter.getInstance().convert(\n+            new ParsedValueImpl<>(new ParsedValueImpl[] {\n+                new ParsedValueImpl<>(\"cubic-bezier(\", null),\n+                new ParsedValueImpl<>(List.of(0.1, 0.2, 0.3, 0.4), null) }, null),\n+            null);\n+        assertSame(result1, result2);\n+    }\n+\n+    @Test\n+    public void testConvertInterpolatorSequence() {\n+        var value1 = new ParsedValueImpl<Object, Interpolator>(new ParsedValueImpl<>(\"linear\", null), null);\n+        var value2 = new ParsedValueImpl<Object, Interpolator>(new ParsedValueImpl<>(\"ease\", null), null);\n+        var value3 = new ParsedValueImpl<Object, Interpolator>(new ParsedValueImpl<>(\"ease-in\", null), null);\n+        ParsedValue<ParsedValue<?, Interpolator>[], Interpolator[]> values = new ParsedValueImpl<>(\n+            new ParsedValue[] { value1, value2, value3 }, null);\n+\n+        var result = InterpolatorConverter.SequenceConverter.getInstance().convert(values, null);\n+        assertEquals(3, result.length);\n+        assertInterpolatorEquals(LINEAR, result[0]);\n+        assertInterpolatorEquals(CSS_EASE, result[1]);\n+        assertInterpolatorEquals(CSS_EASE_IN, result[2]);\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/converters\/InterpolatorConverterTest.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"},{"patch":"@@ -0,0 +1,240 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.css.converters;\n+\n+import com.sun.javafx.css.TransitionDefinition;\n+import com.sun.javafx.css.TransitionDefinitionConverter;\n+import com.sun.javafx.css.TransitionDefinitionCssMetaData;\n+import com.sun.javafx.css.InterpolatorConverter;\n+import com.sun.javafx.css.ParsedValueImpl;\n+import javafx.scene.Node;\n+import javafx.animation.Interpolator;\n+import javafx.css.CssMetaData;\n+import javafx.css.ParsedValue;\n+import javafx.css.Size;\n+import javafx.css.SizeUnits;\n+import javafx.css.Styleable;\n+import javafx.css.StyleableProperty;\n+import javafx.css.converter.DurationConverter;\n+import javafx.util.Duration;\n+import java.util.Map;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+\n+import static com.sun.javafx.css.InterpolatorConverter.*;\n+import static com.sun.javafx.css.TransitionDefinitionConverter.SequenceConverter;\n+import static test.javafx.animation.InterpolatorUtils.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class TransitionDefinitionConverterTest {\n+\n+    private static void assertTransitionEquals(\n+            String property, Duration duration, Duration delay, Interpolator interpolator,\n+            TransitionDefinition transition) {\n+        assertEquals(property, transition.propertyName());\n+        assertEquals(duration, transition.duration());\n+        assertEquals(delay, transition.delay());\n+        assertInterpolatorEquals(interpolator, transition.interpolator());\n+    }\n+\n+    @Test\n+    public void testConvertParsedValuesToImplicitTransitionWithDefaults() {\n+        var value = new ParsedValueImpl<ParsedValue[], TransitionDefinition>(new ParsedValue[] {\n+            new ParsedValueImpl<String, String>(\"test\", null),\n+            new ParsedValueImpl<>(new ParsedValueImpl<>(new Size(1, SizeUnits.S), null), DurationConverter.getInstance()),\n+            null,\n+            null\n+        }, null);\n+\n+        var result = TransitionDefinitionConverter.getInstance().convert(value, null);\n+        assertTransitionEquals(\"test\", Duration.seconds(1), Duration.ZERO, CSS_EASE, result);\n+    }\n+\n+    @Test\n+    public void testConvertParsedValuesToImplicitTransition() {\n+        var value = new ParsedValueImpl<ParsedValue[], TransitionDefinition>(new ParsedValue[] {\n+            new ParsedValueImpl<String, String>(\"test\", null),\n+            new ParsedValueImpl<>(new ParsedValueImpl<>(new Size(1, SizeUnits.S), null), DurationConverter.getInstance()),\n+            new ParsedValueImpl<>(new ParsedValueImpl<>(new Size(0.25, SizeUnits.S), null), DurationConverter.getInstance()),\n+            new ParsedValueImpl<>(new ParsedValueImpl<String, String>(\"ease-in\", null), InterpolatorConverter.getInstance()),\n+        }, null);\n+\n+        var result = TransitionDefinitionConverter.getInstance().convert(value, null);\n+        assertTransitionEquals(\"test\", Duration.seconds(1), Duration.seconds(0.25), CSS_EASE_IN, result);\n+    }\n+\n+    @Test\n+    public void testConvertParsedValuesWithNegativeDurationIsCoercedToZeroDuration() {\n+        var value = new ParsedValueImpl<ParsedValue[], TransitionDefinition>(new ParsedValue[] {\n+            new ParsedValueImpl<String, String>(\"test\", null),\n+            new ParsedValueImpl<>(new ParsedValueImpl<>(new Size(-1, SizeUnits.S), null), DurationConverter.getInstance()),\n+            null,\n+            null\n+        }, null);\n+\n+        var transition = TransitionDefinitionConverter.getInstance().convert(value, null);\n+        assertEquals(Duration.ZERO, transition.duration());\n+    }\n+\n+    @Nested\n+    class SequenceConverterTest {\n+\n+        @Test\n+        public void testConvertParsedValuesToImplicitTransitions() {\n+            var value1 = new ParsedValueImpl<ParsedValue[], TransitionDefinition>(new ParsedValue[] {\n+                new ParsedValueImpl<String, String>(\"test1\", null),\n+                new ParsedValueImpl<>(new ParsedValueImpl<>(new Size(1, SizeUnits.S), null), DurationConverter.getInstance()),\n+                null,\n+                null\n+            }, null);\n+\n+            var value2 = new ParsedValueImpl<ParsedValue[], TransitionDefinition>(new ParsedValue[] {\n+                new ParsedValueImpl<String, String>(\"test2\", null),\n+                new ParsedValueImpl<>(new ParsedValueImpl<>(new Size(0.5, SizeUnits.S), null), DurationConverter.getInstance()),\n+                new ParsedValueImpl<>(new ParsedValueImpl<>(new Size(-1.5, SizeUnits.S), null), DurationConverter.getInstance()),\n+                new ParsedValueImpl<>(new ParsedValueImpl<String, String>(\"ease-in\", null), InterpolatorConverter.getInstance()),\n+            }, null);\n+\n+            ParsedValue<ParsedValue<ParsedValue[], TransitionDefinition>[], TransitionDefinition[]> values =\n+                new ParsedValueImpl<>(new ParsedValue[] { value1, value2 }, null);\n+\n+            var result = SequenceConverter.getInstance().convert(values, null);\n+            assertEquals(2, result.length);\n+            assertTransitionEquals(\"test1\", Duration.seconds(1), Duration.ZERO, CSS_EASE, result[0]);\n+            assertTransitionEquals(\"test2\", Duration.seconds(0.5), Duration.seconds(-1.5), CSS_EASE_IN, result[1]);\n+        }\n+\n+        @Test\n+        public void testConvertSubPropertiesToImplicitTransitionsWithDefaults() {\n+            var metadata = new TestImplicitTransitionCssMetaData();\n+            Map<CssMetaData<? extends Styleable, ?>, Object> values = Map.of(\n+                metadata.transitionProperty(), new String[] { \"test\" },\n+                metadata.transitionDuration(), new Duration[] { Duration.seconds(1) }\n+            );\n+\n+            var result = SequenceConverter.getInstance().convert(values);\n+            assertEquals(1, result.length);\n+            assertTransitionEquals(\"test\", Duration.seconds(1), Duration.ZERO, CSS_EASE, result[0]);\n+        }\n+\n+        @Test\n+        public void testConvertSubPropertiesToImplicitTransitions() {\n+            var metadata = new TestImplicitTransitionCssMetaData();\n+            Map<CssMetaData<? extends Styleable, ?>, Object> values = Map.of(\n+                metadata.transitionProperty(), new String[] { \"test\" },\n+                metadata.transitionDuration(), new Duration[] { Duration.seconds(1) },\n+                metadata.transitionDelay(), new Duration[] { Duration.seconds(0.25) },\n+                metadata.transitionTimingFunction(), new Interpolator[] { CSS_EASE_IN }\n+            );\n+\n+            var result = SequenceConverter.getInstance().convert(values);\n+            assertEquals(1, result.length);\n+            assertTransitionEquals(\"test\", Duration.seconds(1), Duration.seconds(0.25), CSS_EASE_IN, result[0]);\n+        }\n+\n+        @Test\n+        public void testUnmatchedValuesAreRepeated() {\n+            var metadata = new TestImplicitTransitionCssMetaData();\n+            Map<CssMetaData<? extends Styleable, ?>, Object> values = Map.of(\n+                metadata.transitionProperty(), new String[] { \"test1\", \"test2\", \"test3\", \"test4\" },\n+                metadata.transitionDuration(), new Duration[] { Duration.seconds(1), Duration.seconds(2) },\n+                metadata.transitionDelay(), new Duration[] { Duration.seconds(0.25) },\n+                metadata.transitionTimingFunction(), new Interpolator[] { CSS_EASE_IN, CSS_EASE_OUT }\n+            );\n+\n+            var result = SequenceConverter.getInstance().convert(values);\n+            assertEquals(4, result.length);\n+            assertTransitionEquals(\"test1\", Duration.seconds(1), Duration.seconds(0.25), CSS_EASE_IN, result[0]);\n+            assertTransitionEquals(\"test2\", Duration.seconds(2), Duration.seconds(0.25), CSS_EASE_OUT, result[1]);\n+            assertTransitionEquals(\"test3\", Duration.seconds(1), Duration.seconds(0.25), CSS_EASE_IN, result[2]);\n+            assertTransitionEquals(\"test4\", Duration.seconds(2), Duration.seconds(0.25), CSS_EASE_OUT, result[3]);\n+        }\n+\n+        @Test\n+        public void testConvertSubPropertiesWithMissingPropertyNameYieldsNoResult() {\n+            var metadata = new TestImplicitTransitionCssMetaData();\n+            Map<CssMetaData<? extends Styleable, ?>, Object> values = Map.of(\n+                metadata.transitionDuration(), new Duration[] { Duration.seconds(1) }\n+            );\n+\n+            var result = SequenceConverter.getInstance().convert(values);\n+            assertEquals(0, result.length);\n+        }\n+\n+        @Test\n+        public void testConvertSubPropertiesWithMissingDurationYieldsNoResult() {\n+            var metadata = new TestImplicitTransitionCssMetaData();\n+            Map<CssMetaData<? extends Styleable, ?>, Object> values = Map.of(\n+                metadata.transitionProperty(), new String[] { \"test\" }\n+            );\n+\n+            var result = SequenceConverter.getInstance().convert(values);\n+            assertEquals(0, result.length);\n+        }\n+\n+        private static class TestImplicitTransitionCssMetaData extends TransitionDefinitionCssMetaData {\n+            @Override\n+            public boolean isSettable(Node styleable) {\n+                return false;\n+            }\n+\n+            @Override\n+            public StyleableProperty<TransitionDefinition[]> getStyleableProperty(Node styleable) {\n+                return null;\n+            }\n+\n+            CssMetaData<? extends Styleable, ?> transitionProperty() {\n+                return getSubProperties().stream()\n+                    .filter(p -> p.getProperty().equals(\"transition-property\"))\n+                    .findFirst()\n+                    .orElseThrow();\n+            }\n+\n+            CssMetaData<? extends Styleable, ?> transitionDuration() {\n+                return getSubProperties().stream()\n+                    .filter(p -> p.getProperty().equals(\"transition-duration\"))\n+                    .findFirst()\n+                    .orElseThrow();\n+            }\n+\n+            CssMetaData<? extends Styleable, ?> transitionDelay() {\n+                return getSubProperties().stream()\n+                    .filter(p -> p.getProperty().equals(\"transition-delay\"))\n+                    .findFirst()\n+                    .orElseThrow();\n+            }\n+\n+            CssMetaData<? extends Styleable, ?> transitionTimingFunction() {\n+                return getSubProperties().stream()\n+                    .filter(p -> p.getProperty().equals(\"transition-timing-function\"))\n+                    .findFirst()\n+                    .orElseThrow();\n+            }\n+        }\n+\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/converters\/TransitionDefinitionConverterTest.java","additions":240,"deletions":0,"binary":false,"changes":240,"status":"added"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.scenario.animation;\n+\n+import com.sun.javafx.animation.InterpolatorHelper;\n+import com.sun.scenario.animation.StepInterpolator;\n+import javafx.animation.Interpolator.StepPosition;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/**\n+ * Step easing functions as defined by\n+ * <a href=\"https:\/\/www.w3.org\/TR\/css-easing-1\/#step-easing-functions\">CSS Easing Functions Level 1<\/a>\n+ *\/\n+public class StepInterpolatorTest {\n+\n+    \/*\n+     *    1 ─┤            ‗‗‗‗‗\n+     *       │           ⁞\n+     *       │      ‗‗‗‗‗⁞\n+     *  0.5 ─┤     ⁞\n+     *       │‗‗‗‗‗⁞\n+     *       ⁞\n+     *    0 ─⁞_________________\n+     *       0       0.5      1\n+     *\/\n+    @Test\n+    public void testStart() {\n+        var interpolator = new StepInterpolatorMock(3, ONE_THIRD, StepPosition.START);\n+        assertRise(interpolator, 0, 0);\n+        assertRise(interpolator, ONE_THIRD, ONE_THIRD);\n+        assertRise(interpolator, TWO_THIRDS, TWO_THIRDS);\n+        assertEquals(1, interpolator.curve(1), 0.001);\n+    }\n+\n+    \/*\n+     *    1 ─┤                 ●\n+     *       │                 ⁞\n+     *       │            ‗‗‗‗‗⁞\n+     *  0.5 ─┤           ⁞\n+     *       │      ‗‗‗‗‗⁞\n+     *       │     ⁞\n+     *    0 ─┤‗‗‗‗‗⁞____________\n+     *       0       0.5       1\n+     *\/\n+    @Test\n+    public void testEnd() {\n+        var interpolator = new StepInterpolatorMock(3, ONE_THIRD, StepPosition.END);\n+        assertEquals(0, interpolator.curve(0), 0.001);\n+        assertRise(interpolator, 0, ONE_THIRD);\n+        assertRise(interpolator, ONE_THIRD, TWO_THIRDS);\n+        assertRise(interpolator, TWO_THIRDS, 1);\n+    }\n+\n+    \/*\n+     *    1 ─┤            ‗‗‗‗‗\n+     *       │           ⁞\n+     *       │           ⁞\n+     *  0.5 ─┤      ‗‗‗‗‗⁞\n+     *       │     ⁞\n+     *       │     ⁞\n+     *    0 ─┤‗‗‗‗‗⁞___________\n+     *       0       0.5      1\n+     *\/\n+    @Test\n+    public void testNone() {\n+        var interpolator = new StepInterpolatorMock(3, 0.5, StepPosition.NONE);\n+        assertEquals(0, interpolator.curve(0), 0.001);\n+        assertRise(interpolator, 0, ONE_THIRD);\n+        assertRise(interpolator, 0.5, TWO_THIRDS);\n+        assertEquals(1, interpolator.curve(1), 0.001);\n+    }\n+\n+    \/*\n+     *    1 ─┤              ●\n+     *       │          ‗‗‗‗⁞\n+     *  0.5 ─┤     ‗‗‗‗⁞\n+     *       │‗‗‗‗⁞\n+     *    0 ─⁞_______________\n+     *       0      0.5     1\n+     *\/\n+    @Test\n+    public void testBoth() {\n+        var interpolator = new StepInterpolatorMock(3, 0.25, StepPosition.BOTH);\n+        assertRise(interpolator, 0, 0);\n+        assertRise(interpolator, 0.25, ONE_THIRD);\n+        assertRise(interpolator, 0.5, TWO_THIRDS);\n+        assertRise(interpolator, 0.75, 1);\n+    }\n+\n+    private static final double ONE_THIRD = 1.0 \/ 3.0;\n+    private static final double TWO_THIRDS = 2.0 \/ 3.0;\n+\n+    private static void assertRise(StepInterpolatorMock interpolator, double output, double input) {\n+        assertEquals(output, interpolator.curve(input - 0.001), 0.001);\n+        assertEquals(output + interpolator.stepSize, interpolator.curve(input), 0.001);\n+        assertEquals(output + interpolator.stepSize, interpolator.curve(input + 0.001), 0.001);\n+    }\n+\n+    private static class StepInterpolatorMock {\n+        final double stepSize;\n+        final StepInterpolator interpolator;\n+\n+        StepInterpolatorMock(int intervals, double stepSize, StepPosition position) {\n+            this.interpolator = new StepInterpolator(intervals, position);\n+            this.stepSize = stepSize;\n+        }\n+\n+        double curve(double t) {\n+            return InterpolatorHelper.curve(interpolator, t);\n+        }\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/scenario\/animation\/StepInterpolatorTest.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.animation;\n+\n+import org.junit.jupiter.api.Assertions;\n+import javafx.animation.Interpolator;\n+\n+public class InterpolatorUtils {\n+\n+    \/**\n+     * Asserts that both interpolators are equal by sampling their outputs.\n+     *\/\n+    public static void assertInterpolatorEquals(Interpolator expected, Interpolator actual) {\n+        Assertions.assertTrue(equals(expected, actual), \"Interpolators do not produce equal outputs\");\n+    }\n+\n+    \/**\n+     * Determines whether two interpolators are equal by sampling their outputs.\n+     *\/\n+    public static boolean equals(Interpolator int1, Interpolator int2) {\n+        final int numSamples = 16;\n+\n+        for (int i = 0; i < numSamples; ++i) {\n+            double d1 = int1.interpolate(0D, 1D, (double)i \/ numSamples);\n+            double d2 = int2.interpolate(0D, 1D, (double)i \/ numSamples);\n+            if (Math.abs(d2 - d1) > 0.001) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/animation\/InterpolatorUtils.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -0,0 +1,242 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.css;\n+\n+import javafx.animation.Interpolator;\n+import javafx.animation.Interpolator.StepPosition;\n+import javafx.css.CssParser;\n+import javafx.css.Declaration;\n+import javafx.css.Rule;\n+import javafx.css.Stylesheet;\n+import javafx.util.Duration;\n+import com.sun.javafx.css.TransitionDefinition;\n+import org.junit.jupiter.api.Test;\n+\n+import static javafx.animation.Interpolator.*;\n+import static javafx.util.Duration.*;\n+import static com.sun.javafx.css.InterpolatorConverter.*;\n+import static test.javafx.animation.InterpolatorUtils.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class CssParser_transition_Test {\n+\n+    private Stylesheet parse(String stylesheetText) {\n+        CssParser.errorsProperty().clear();\n+        return new CssParser().parse(stylesheetText);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private <T> T[] values(String property, Rule rule) {\n+        for (Declaration decl : rule.getDeclarations()) {\n+            if (decl.getProperty().equals(property)) {\n+                return (T[])decl.getParsedValue().convert(null);\n+            }\n+        }\n+\n+        fail(\"Property not found\");\n+        return (T[])new Object[0];\n+    }\n+\n+    private void assertTransition(TransitionDefinition expected, TransitionDefinition actual) {\n+        assertEquals(expected.propertyName(), actual.propertyName());\n+        assertEquals(expected.duration(), actual.duration());\n+        assertEquals(expected.delay(), actual.delay());\n+        assertInterpolatorEquals(expected.interpolator(), actual.interpolator());\n+    }\n+\n+    private void assertStartsWith(String expected, String actual) {\n+        assertTrue(actual.startsWith(expected), \"Expected: \" + expected + \", but was: \" + actual);\n+    }\n+\n+    \/*\n+     * Default values specified by https:\/\/www.w3.org\/TR\/css-transitions-1\n+     *\n+     *     transition-property: 'all'\n+     *     transition-duration: '0s'\n+     *     transition-timing-function: 'ease'\n+     *     transition-delay: '0s'\n+     *\/\n+    @Test\n+    public void testDefaultValues() {\n+        Stylesheet stylesheet = parse(\"\"\"\n+            .rule1 { transition: foo; }\n+            .rule2 { transition: 1s; }\n+            .rule3 { transition: linear; }\n+        \"\"\");\n+\n+        assertTransition(\n+            new TransitionDefinition(\"foo\", seconds(0), seconds(0), CSS_EASE),\n+            ((TransitionDefinition[])values(\"transition\", stylesheet.getRules().get(0)))[0]);\n+\n+        assertTransition(\n+            new TransitionDefinition(\"all\", seconds(1), seconds(0), CSS_EASE),\n+            ((TransitionDefinition[])values(\"transition\", stylesheet.getRules().get(1)))[0]);\n+\n+        assertTransition(\n+            new TransitionDefinition(\"all\", seconds(0), seconds(0), LINEAR),\n+            ((TransitionDefinition[])values(\"transition\", stylesheet.getRules().get(2)))[0]);\n+    }\n+\n+    @Test\n+    public void testTransitionDuration() {\n+        Stylesheet stylesheet = parse(\"\"\"\n+            .rule1 { transition-duration: 1s; }\n+            .rule2 { transition-duration: 1s, 0.5s, 0.25ms, 0s; }\n+            .rule3 { transition-duration: indefinite; }\n+            .err1 { transition-duration: 10; }\n+            .err2 { transition-duration: -5s; }\n+        \"\"\");\n+\n+        assertArrayEquals(new Duration[] { seconds(1) },\n+            values(\"transition-duration\", stylesheet.getRules().get(0)));\n+\n+        assertArrayEquals(new Duration[] { seconds(1), seconds(0.5), millis(0.25), ZERO },\n+            values(\"transition-duration\", stylesheet.getRules().get(1)));\n+\n+        assertArrayEquals(new Duration[] { INDEFINITE },\n+            values(\"transition-duration\", stylesheet.getRules().get(2)));\n+\n+        assertStartsWith(\"Expected '<duration>'\", CssParser.errorsProperty().get(0).getMessage());\n+        assertStartsWith(\"Invalid '<duration>'\", CssParser.errorsProperty().get(2).getMessage());\n+    }\n+\n+    @Test\n+    public void testTransitionDelay() {\n+        Stylesheet stylesheet = parse(\"\"\"\n+            .rule1 { transition-delay: 1s; }\n+            .rule2 { transition-delay: 1s, 0.5s, 0.25ms; }\n+            .rule3 { transition-delay: 10; }\n+        \"\"\");\n+\n+        assertArrayEquals(new Duration[] { seconds(1) },\n+            values(\"transition-delay\", stylesheet.getRules().get(0)));\n+\n+        assertArrayEquals(new Duration[] { seconds(1), seconds(0.5), millis(0.25) },\n+            values(\"transition-delay\", stylesheet.getRules().get(1)));\n+\n+        assertStartsWith(\"Expected '<duration>'\", CssParser.errorsProperty().get(0).getMessage());\n+    }\n+\n+    @Test\n+    public void testTransitionProperty() {\n+        Stylesheet stylesheet = parse(\"\"\"\n+            .rule1 { transition-property: foo; }\n+            .rule2 { transition-property: foo, bar, baz; }\n+            .rule3 { transition-property: 10; }\n+        \"\"\");\n+\n+        assertArrayEquals(new String[] {\"foo\"},\n+            values(\"transition-property\", stylesheet.getRules().get(0)));\n+\n+        assertArrayEquals(new String[] {\"foo\", \"bar\", \"baz\"},\n+            values(\"transition-property\", stylesheet.getRules().get(1)));\n+\n+        assertStartsWith(\"Expected '<transition-property>'\", CssParser.errorsProperty().get(0).getMessage());\n+    }\n+\n+    @Test\n+    public void testTransitionTimingFunction() {\n+        Stylesheet stylesheet = parse(\"\"\"\n+            .rule1 { transition-timing-function: linear; }\n+            .rule2 { transition-timing-function: ease, ease-in, ease-out, ease-in-out, cubic-bezier(0.1, 0.2, 0.3, 0.4); }\n+            .rule3 { transition-timing-function: step-start, step-end,\n+                                                 steps(3, jump-start), steps(3, jump-end),\n+                                                 steps(3, jump-none), steps(3, jump-both),\n+                                                 steps(3, start), steps(3, end); }\n+            .rule4 { transition-timing-function: steps(3); }\n+            .err1 { transition-timing-function: cubic-bezier(2, 0, 0, 0); }\n+            .err2 { transition-timing-function: steps(2, 3); }\n+            .err3 { transition-timing-function: steps(1, foo); }\n+            .err4 { transition-timing-function: steps(foo, start); }\n+        \"\"\");\n+\n+        Interpolator[] values = values(\"transition-timing-function\", stylesheet.getRules().get(0));\n+        assertInterpolatorEquals(LINEAR, values[0]);\n+\n+        values = values(\"transition-timing-function\", stylesheet.getRules().get(1));\n+        assertInterpolatorEquals(CSS_EASE, values[0]);\n+        assertInterpolatorEquals(CSS_EASE_IN, values[1]);\n+        assertInterpolatorEquals(CSS_EASE_OUT, values[2]);\n+        assertInterpolatorEquals(CSS_EASE_IN_OUT, values[3]);\n+        assertInterpolatorEquals(SPLINE(0.1, 0.2, 0.3, 0.4), values[4]);\n+\n+        values = values(\"transition-timing-function\", stylesheet.getRules().get(2));\n+        assertInterpolatorEquals(STEP_START, values[0]);\n+        assertInterpolatorEquals(STEP_END, values[1]);\n+        assertInterpolatorEquals(STEPS(3, StepPosition.START), values[2]);\n+        assertInterpolatorEquals(STEPS(3, StepPosition.END), values[3]);\n+        assertInterpolatorEquals(STEPS(3, StepPosition.NONE), values[4]);\n+        assertInterpolatorEquals(STEPS(3, StepPosition.BOTH), values[5]);\n+        assertInterpolatorEquals(STEPS(3, StepPosition.START), values[6]);\n+        assertInterpolatorEquals(STEPS(3, StepPosition.END), values[7]);\n+\n+        values = values(\"transition-timing-function\", stylesheet.getRules().get(3));\n+        assertInterpolatorEquals(STEPS(3, StepPosition.END), values[0]);\n+\n+        assertStartsWith(\"Expected '<number [0,1]>'\", CssParser.errorsProperty().get(0).getMessage());\n+        assertStartsWith(\"Expected '<step-position>'\", CssParser.errorsProperty().get(2).getMessage());\n+        assertStartsWith(\"Expected '<step-position>'\", CssParser.errorsProperty().get(4).getMessage());\n+        assertStartsWith(\"Expected '<integer>'\", CssParser.errorsProperty().get(6).getMessage());\n+    }\n+\n+    @Test\n+    public void testShorthandTransition() {\n+        Stylesheet stylesheet = parse(\"\"\"\n+            .rule0 { transition: all 0.25s; }\n+            .rule1 { transition: none 0.25s; }\n+            .rule2 { transition: ease all 125ms; }\n+            .rule3 { transition: foo 0.3s 0.4s cubic-bezier(0.1, 0.2, 0.3, .4); }\n+            .rule4 { transition: 0.3s foo cubic-bezier(0.1, 0.2, 0.3, .4) 0.4s; }\n+            .rule5 { transition: linear linear 0.5s; }\n+            .rule6 { transition: foo bar; }\n+        \"\"\");\n+\n+        assertTransition(\n+            new TransitionDefinition(\"all\", seconds(0.25), seconds(0), CSS_EASE),\n+            ((TransitionDefinition[])values(\"transition\", stylesheet.getRules().get(0)))[0]);\n+\n+        assertEquals(\"null\",\n+            stylesheet.getRules().get(1).getDeclarations().get(0).getParsedValue().convert(null));\n+\n+        assertTransition(\n+            new TransitionDefinition(\"all\", seconds(0.125), seconds(0), CSS_EASE),\n+            ((TransitionDefinition[])values(\"transition\", stylesheet.getRules().get(2)))[0]);\n+\n+        assertTransition(\n+            new TransitionDefinition(\"foo\", seconds(0.3), seconds(0.4),\n+                                     SPLINE(0.1, 0.2, 0.3, .4)),\n+            ((TransitionDefinition[])values(\"transition\", stylesheet.getRules().get(3)))[0]);\n+\n+        assertTransition(\n+            new TransitionDefinition(\"foo\", seconds(0.3), seconds(0.4),\n+                                     SPLINE(0.1, 0.2, 0.3, .4)),\n+            ((TransitionDefinition[])values(\"transition\", stylesheet.getRules().get(4)))[0]);\n+\n+        assertStartsWith(\"Expected '<single-transition-property>'\", CssParser.errorsProperty().get(0).getMessage());\n+        assertStartsWith(\"Expected '<easing-function>'\", CssParser.errorsProperty().get(2).getMessage());\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/CssParser_transition_Test.java","additions":242,"deletions":0,"binary":false,"changes":242,"status":"added"},{"patch":"@@ -0,0 +1,260 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene;\n+\n+import test.com.sun.javafx.pgstub.StubToolkit;\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.css.PseudoClass;\n+import javafx.css.TransitionEvent;\n+import javafx.scene.Group;\n+import javafx.scene.NodeShim;\n+import javafx.scene.Scene;\n+import javafx.scene.shape.Rectangle;\n+import javafx.stage.Stage;\n+import javafx.util.Duration;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/**\n+ * The following invariants must hold for transition events:\n+ * 1. For every RUN event there will be exactly one END or CANCEL, never both.\n+ * 2. For every START event there will be exactly one END or CANCEL, never both.\n+ * 3. Every END event is preceded by a corresponding START event.\n+ *\/\n+public class Node_transitionEvent_Test {\n+\n+    private StubToolkit toolkit;\n+    private Stage stage;\n+    private Scene scene;\n+    private Rectangle node;\n+\n+    @BeforeEach\n+    public void startup() {\n+        toolkit = (StubToolkit)Toolkit.getToolkit();\n+        node = new Rectangle();\n+        scene = new Scene(new Group(node));\n+        stage = new Stage();\n+        stage.setScene(scene);\n+        stage.show();\n+    }\n+\n+    @AfterEach\n+    public void teardown() {\n+        stage.close();\n+    }\n+\n+    @Test\n+    public void testRegularPlayback() {\n+        String url = \"data:text\/css;base64,\" + Base64.getUrlEncoder().encodeToString(\"\"\"\n+            .testClass {\n+                -fx-opacity: 0;\n+                transition: -fx-opacity 0.75s 0.25s;\n+            }\n+\n+            .testClass:hover {\n+                -fx-opacity: 1;\n+            }\n+            \"\"\".getBytes(StandardCharsets.UTF_8));\n+\n+        toolkit.setCurrentTime(0);\n+        scene.getStylesheets().add(url);\n+        node.getStyleClass().add(\"testClass\");\n+        node.applyCss();\n+\n+        List<TransitionEvent> trace = new ArrayList<>();\n+        node.addEventHandler(TransitionEvent.ANY, trace::add);\n+        node.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"hover\"), true);\n+        node.applyCss();\n+\n+        \/\/ The transition starts with a delay, which means the elapsed time is 0.\n+        assertEquals(1, trace.size());\n+        assertSame(TransitionEvent.RUN, trace.get(0).getEventType());\n+        assertEquals(Duration.millis(0), trace.get(0).getElapsedTime());\n+\n+        \/\/ After 0.5s, the transition is in the active period (elapsed time was 0 at START).\n+        toolkit.setCurrentTime(500);\n+        toolkit.handleAnimation();\n+        assertEquals(2, trace.size());\n+        assertSame(TransitionEvent.START, trace.get(1).getEventType());\n+        assertEquals(Duration.millis(0), trace.get(1).getElapsedTime());\n+\n+        \/\/ After 1s, the transition has already ended (elapsed time was 0.75s at END).\n+        toolkit.setCurrentTime(1000);\n+        toolkit.handleAnimation();\n+        assertEquals(3, trace.size());\n+        assertSame(TransitionEvent.END, trace.get(2).getEventType());\n+        assertEquals(Duration.millis(750), trace.get(2).getElapsedTime());\n+    }\n+\n+    @Test\n+    public void testPlaybackIsElidedWhenDurationIsZero() {\n+        String url = \"data:text\/css;base64,\" + Base64.getUrlEncoder().encodeToString(\"\"\"\n+            .testClass {\n+                -fx-opacity: 0;\n+                transition: -fx-opacity 0s;\n+            }\n+\n+            .testClass:hover {\n+                -fx-opacity: 1;\n+            }\n+            \"\"\".getBytes(StandardCharsets.UTF_8));\n+\n+        toolkit.setCurrentTime(0);\n+        scene.getStylesheets().add(url);\n+        node.getStyleClass().add(\"testClass\");\n+        node.applyCss();\n+\n+        List<TransitionEvent> trace = new ArrayList<>();\n+        node.addEventHandler(TransitionEvent.ANY, trace::add);\n+        node.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"hover\"), true);\n+        node.applyCss();\n+        assertEquals(0, trace.size());\n+\n+        toolkit.setCurrentTime(1);\n+        toolkit.handleAnimation();\n+        assertEquals(0, trace.size());\n+    }\n+\n+    @Test\n+    public void testInterruptedPlayback() {\n+        String url = \"data:text\/css;base64,\" + Base64.getUrlEncoder().encodeToString(\"\"\"\n+            .testClass {\n+                -fx-opacity: 0;\n+                transition: -fx-opacity 0.75s 0.25s;\n+            }\n+\n+            .testClass:hover {\n+                -fx-opacity: 1;\n+            }\n+            \"\"\".getBytes(StandardCharsets.UTF_8));\n+\n+        toolkit.setCurrentTime(0);\n+        scene.getStylesheets().add(url);\n+        node.getStyleClass().add(\"testClass\");\n+        node.applyCss();\n+\n+        List<TransitionEvent> trace = new ArrayList<>();\n+        node.addEventHandler(TransitionEvent.ANY, trace::add);\n+        node.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"hover\"), true);\n+        node.applyCss();\n+\n+        \/\/ The animation advances 500ms and is then cancelled, which means that the\n+        \/\/ elapsed time is 250ms (since we have a 250ms delay).\n+        toolkit.setCurrentTime(500);\n+        toolkit.handleAnimation();\n+        NodeShim.completeTransitionTimers(node);\n+\n+        assertEquals(3, trace.size());\n+        assertSame(TransitionEvent.RUN, trace.get(0).getEventType());\n+        assertSame(TransitionEvent.START, trace.get(1).getEventType());\n+        assertSame(TransitionEvent.CANCEL, trace.get(2).getEventType());\n+        assertEquals(Duration.millis(0), trace.get(0).getElapsedTime());\n+        assertEquals(Duration.millis(0), trace.get(1).getElapsedTime());\n+        assertEquals(Duration.millis(250), trace.get(2).getElapsedTime());\n+    }\n+\n+    @Test\n+    public void testInterruptedPlaybackWithNegativeDelay() {\n+        String url = \"data:text\/css;base64,\" + Base64.getUrlEncoder().encodeToString(\"\"\"\n+            .testClass {\n+                -fx-opacity: 0;\n+                transition: -fx-opacity 1s -0.25s;\n+            }\n+\n+            .testClass:hover {\n+                -fx-opacity: 1;\n+            }\n+            \"\"\".getBytes(StandardCharsets.UTF_8));\n+\n+        toolkit.setCurrentTime(0);\n+        scene.getStylesheets().add(url);\n+        node.getStyleClass().add(\"testClass\");\n+        node.applyCss();\n+\n+        List<TransitionEvent> trace = new ArrayList<>();\n+        node.addEventHandler(TransitionEvent.ANY, trace::add);\n+        node.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"hover\"), true);\n+        node.applyCss();\n+\n+        \/\/ The animation advances 500ms and is then cancelled, which means that the\n+        \/\/ elapsed time is 750ms (since we started with a negative 250ms delay).\n+        toolkit.setCurrentTime(500);\n+        toolkit.handleAnimation();\n+        NodeShim.completeTransitionTimers(node);\n+\n+        assertEquals(3, trace.size());\n+        assertSame(TransitionEvent.RUN, trace.get(0).getEventType());\n+        assertSame(TransitionEvent.START, trace.get(1).getEventType());\n+        assertSame(TransitionEvent.CANCEL, trace.get(2).getEventType());\n+        assertEquals(Duration.millis(250), trace.get(0).getElapsedTime());\n+        assertEquals(Duration.millis(250), trace.get(1).getElapsedTime());\n+        assertEquals(Duration.millis(750), trace.get(2).getElapsedTime());\n+    }\n+\n+    @Test\n+    public void testInterruptedPlaybackDuringDelayPhase() {\n+        String url = \"data:text\/css;base64,\" + Base64.getUrlEncoder().encodeToString(\"\"\"\n+            .testClass {\n+                -fx-opacity: 0;\n+                transition: -fx-opacity 1s 0.5s;\n+            }\n+\n+            .testClass:hover {\n+                -fx-opacity: 1;\n+            }\n+            \"\"\".getBytes(StandardCharsets.UTF_8));\n+\n+        toolkit.setCurrentTime(0);\n+        scene.getStylesheets().add(url);\n+        node.getStyleClass().add(\"testClass\");\n+        node.applyCss();\n+\n+        List<TransitionEvent> trace = new ArrayList<>();\n+        node.addEventHandler(TransitionEvent.ANY, trace::add);\n+        node.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"hover\"), true);\n+        node.applyCss();\n+\n+        \/\/ The animation advances 250ms and is then cancelled, which means that we're\n+        \/\/ still in the delay phase. The elapsed time of the CANCEL event will be 0.\n+        toolkit.setCurrentTime(250);\n+        toolkit.handleAnimation();\n+        NodeShim.completeTransitionTimers(node);\n+\n+        assertEquals(2, trace.size());\n+        assertSame(TransitionEvent.RUN, trace.get(0).getEventType());\n+        assertSame(TransitionEvent.CANCEL, trace.get(1).getEventType());\n+        assertEquals(Duration.millis(0), trace.get(0).getElapsedTime());\n+        assertEquals(Duration.millis(0), trace.get(1).getElapsedTime());\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Node_transitionEvent_Test.java","additions":260,"deletions":0,"binary":false,"changes":260,"status":"added"},{"patch":"@@ -0,0 +1,252 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene;\n+\n+import test.com.sun.javafx.pgstub.StubToolkit;\n+import com.sun.javafx.css.TransitionDefinition;\n+import com.sun.javafx.css.TransitionTimer;\n+import com.sun.javafx.scene.NodeHelper;\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.animation.Interpolator;\n+import javafx.css.CssMetaData;\n+import javafx.css.PseudoClass;\n+import javafx.scene.Group;\n+import javafx.scene.Node;\n+import javafx.scene.NodeShim;\n+import javafx.scene.Scene;\n+import javafx.scene.shape.Rectangle;\n+import javafx.stage.Stage;\n+import javafx.util.Duration;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+import java.util.List;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static com.sun.javafx.css.InterpolatorConverter.*;\n+import static test.javafx.animation.InterpolatorUtils.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class Node_transition_Test {\n+\n+    private StubToolkit toolkit;\n+    private Stage stage;\n+    private Scene scene;\n+    private Rectangle node;\n+\n+    @BeforeEach\n+    public void startup() {\n+        toolkit = (StubToolkit)Toolkit.getToolkit();\n+        node = new Rectangle();\n+        scene = new Scene(new Group(node));\n+        stage = new Stage();\n+        stage.setScene(scene);\n+        stage.show();\n+    }\n+\n+    @AfterEach\n+    public void teardown() {\n+        stage.close();\n+    }\n+\n+    private static void assertTransitionEquals(\n+            String property, Duration duration, Duration delay, Interpolator interpolator,\n+            TransitionDefinition transition) {\n+        assertEquals(property, transition.propertyName());\n+        assertEquals(duration, transition.duration());\n+        assertEquals(delay, transition.delay());\n+        assertInterpolatorEquals(interpolator, transition.interpolator());\n+    }\n+\n+    @Test\n+    public void testInlineStyleTransitionIsApplied() {\n+        node.setStyle(\"transition: -fx-fill 1s, ALL 2s ease-in-out;\");\n+        node.applyCss();\n+\n+        List<TransitionDefinition> transitions = NodeShim.getTransitionDefinitions(node);\n+        assertEquals(2, transitions.size());\n+        assertTransitionEquals(\"-fx-fill\", Duration.seconds(1), Duration.ZERO, CSS_EASE, transitions.get(0));\n+        assertTransitionEquals(\"all\", Duration.seconds(2), Duration.ZERO, CSS_EASE_IN_OUT, transitions.get(1));\n+    }\n+\n+    @Test\n+    public void testPropertyNameIsCaseSensitive() {\n+        CssMetaData<?, ?> opacityProperty = Node.getClassCssMetaData().stream()\n+            .filter(md -> md.getProperty().equals(\"-fx-opacity\"))\n+            .findFirst()\n+            .orElseThrow();\n+\n+        node.setStyle(\"transition: -fx-OPACITY 1s\");\n+        node.applyCss();\n+        assertNull(NodeHelper.findTransitionDefinition(node, opacityProperty));\n+\n+        node.setStyle(\"transition: -fx-opacity 1s\");\n+        node.applyCss();\n+        assertNotNull(NodeHelper.findTransitionDefinition(node, opacityProperty));\n+    }\n+\n+    @Test\n+    public void testAllIdentifierIsCaseInsensitive() {\n+        node.setStyle(\"transition: ALL 1s\");\n+        node.applyCss();\n+        List<TransitionDefinition> transitions = NodeShim.getTransitionDefinitions(node);\n+        assertEquals(1, transitions.size());\n+        assertTransitionEquals(\"all\", Duration.seconds(1), Duration.ZERO, CSS_EASE, transitions.get(0));\n+\n+        node.setStyle(\"transition: all 1s\");\n+        node.applyCss();\n+        transitions = NodeShim.getTransitionDefinitions(node);\n+        assertEquals(1, transitions.size());\n+        assertTransitionEquals(\"all\", Duration.seconds(1), Duration.ZERO, CSS_EASE, transitions.get(0));\n+    }\n+\n+    @Test\n+    public void testLastOccurrenceOfMultiplyReferencedPropertyIsSelected() {\n+        node.setStyle(\"transition: -fx-fill 1s, -fx-fill 2s ease-in-out;\");\n+        node.applyCss();\n+\n+        CssMetaData<?, ?> propertyMetadata = node.getCssMetaData().stream()\n+            .filter(m -> m.getProperty().equals(\"-fx-fill\"))\n+            .findFirst()\n+            .orElseThrow();\n+        TransitionDefinition transition = NodeHelper.findTransitionDefinition(node, propertyMetadata);\n+        assertTransitionEquals(\"-fx-fill\", Duration.seconds(2), Duration.ZERO, CSS_EASE_IN_OUT, transition);\n+    }\n+\n+    @Test\n+    public void testTransitionsAreAppliedWhenPseudoClassIsChanged() {\n+        String url = \"data:text\/css;base64,\" + Base64.getUrlEncoder().encodeToString(\"\"\"\n+            .testClass {\n+                -fx-background-color: green;\n+                transition: -fx-background-color 1s 0.5s ease, -fx-scale-x 1s, -fx-scale-y 1s;\n+            }\n+\n+            .testClass:hover {\n+                -fx-background-color: red;\n+                -fx-scale-x: 1.2;\n+                -fx-scale-y: 1.2;\n+                transition: -fx-background-color 1s;\n+            }\n+            \"\"\".getBytes(StandardCharsets.UTF_8));\n+\n+        scene.getStylesheets().add(url);\n+        node.getStyleClass().add(\"testClass\");\n+        node.applyCss();\n+\n+        List<TransitionDefinition> transitions = NodeShim.getTransitionDefinitions(node);\n+        assertEquals(3, transitions.size());\n+        assertTransitionEquals(\"-fx-background-color\", Duration.seconds(1), Duration.seconds(0.5), CSS_EASE, transitions.get(0));\n+        assertTransitionEquals(\"-fx-scale-x\", Duration.seconds(1), Duration.ZERO, CSS_EASE, transitions.get(1));\n+        assertTransitionEquals(\"-fx-scale-y\", Duration.seconds(1), Duration.ZERO, CSS_EASE, transitions.get(2));\n+\n+        node.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"hover\"), true);\n+        node.applyCss();\n+\n+        transitions = NodeShim.getTransitionDefinitions(node);\n+        assertEquals(1, transitions.size());\n+        assertTransitionEquals(\"-fx-background-color\", Duration.seconds(1), Duration.ZERO, CSS_EASE, transitions.get(0));\n+    }\n+\n+    @Test\n+    public void testRunningTimersAreTrackedInNode() {\n+        String url = \"data:text\/css;base64,\" + Base64.getUrlEncoder().encodeToString(\"\"\"\n+            .testClass { -fx-opacity: 0; transition: all 1s; }\n+            .testClass:hover { -fx-opacity: 1; }\n+            \"\"\".getBytes(StandardCharsets.UTF_8));\n+\n+        toolkit.setCurrentTime(0);\n+        scene.getStylesheets().add(url);\n+        node.getStyleClass().add(\"testClass\");\n+        node.applyCss();\n+\n+        List<TransitionTimer> timers = NodeShim.getTransitionTimers(node);\n+        assertNull(timers);\n+\n+        \/\/ The hover state starts the timer.\n+        node.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"hover\"), true);\n+        node.applyCss();\n+        timers = NodeShim.getTransitionTimers(node);\n+        assertEquals(1, timers.size());\n+        assertNotNull(timers.get(0));\n+\n+        \/\/ Complete the timer, which removes it from the list.\n+        toolkit.setCurrentTime(2000);\n+        toolkit.handleAnimation();\n+        assertEquals(0, timers.size());\n+    }\n+\n+    @Test\n+    public void testRunningTimerIsCompletedWhenNodeIsRemovedFromSceneGraph() {\n+        String url = \"data:text\/css;base64,\" + Base64.getUrlEncoder().encodeToString(\"\"\"\n+            .testClass { -fx-opacity: 0; transition: all 1s; }\n+            .testClass:hover { -fx-opacity: 1; }\n+            \"\"\".getBytes(StandardCharsets.UTF_8));\n+\n+        scene.getStylesheets().add(url);\n+        node.getStyleClass().add(\"testClass\");\n+        node.applyCss();\n+        assertNull(NodeShim.getTransitionTimers(node));\n+\n+        \/\/ The hover state starts the timer.\n+        node.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"hover\"), true);\n+        node.applyCss();\n+        assertEquals(1, NodeShim.getTransitionTimers(node).size());\n+        assertTrue(node.getOpacity() < 1);\n+\n+        \/\/ The original node is removed from the scene graph, causing the timer to complete early\n+        \/\/ with the target value of the transition.\n+        scene.setRoot(new Group());\n+        assertEquals(0, NodeShim.getTransitionTimers(node).size());\n+        assertEquals(1, node.getOpacity(), 0.001);\n+    }\n+\n+    @Test\n+    public void testRunningTimerIsCompletedWhenNodeBecomesInvisible() {\n+        String url = \"data:text\/css;base64,\" + Base64.getUrlEncoder().encodeToString(\"\"\"\n+            .testClass { -fx-opacity: 0; transition: all 1s; }\n+            .testClass:hover { -fx-opacity: 1; }\n+            \"\"\".getBytes(StandardCharsets.UTF_8));\n+\n+        scene.getStylesheets().add(url);\n+        node.getStyleClass().add(\"testClass\");\n+        node.applyCss();\n+        assertNull(NodeShim.getTransitionTimers(node));\n+\n+        \/\/ The hover state starts the timer.\n+        node.pseudoClassStateChanged(PseudoClass.getPseudoClass(\"hover\"), true);\n+        node.applyCss();\n+        assertEquals(1, NodeShim.getTransitionTimers(node).size());\n+        assertTrue(node.getOpacity() < 1);\n+\n+        \/\/ The node is made invisible, causing the timer to complete early with the\n+        \/\/ target value of the transition.\n+        node.setVisible(false);\n+        assertEquals(0, NodeShim.getTransitionTimers(node).size());\n+        assertEquals(1, node.getOpacity(), 0.001);\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Node_transition_Test.java","additions":252,"deletions":0,"binary":false,"changes":252,"status":"added"},{"patch":"@@ -0,0 +1,148 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.scene.text.Font;\n+import javafx.scene.text.FontWeight;\n+import javafx.stage.Stage;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Base64;\n+\n+public class CssTransitionsTest extends Application {\n+\n+    @Override\n+    public void start(Stage stage) {\n+        var tab1 = new Tab(\"transition\", new ScrollPane(createTransitionTab()));\n+        var tab2 = new Tab(\"transition-delay\", new ScrollPane(createTransitionDelayTab()));\n+        var tab3 = new Tab(\"transition-timing-function\", new ScrollPane(createTransitionTimingFunctionTab()));\n+\n+        var tabPane = new TabPane(tab1, tab2, tab3);\n+        stage.setScene(new Scene(tabPane));\n+        stage.setTitle(\"CSS Transitions\");\n+        stage.show();\n+    }\n+\n+    private Region createTransitionTab() {\n+        return createContent(\"\"\"\n+            .rect {\n+              -fx-min-width: 100;\n+              -fx-min-height: 100;\n+              -fx-background-color: red;\n+              transition: -fx-min-width 2s, -fx-min-height 4s;\n+            }\n+\n+            .rect:hover {\n+              -fx-min-width: 300;\n+              -fx-min-height: 300;\n+            }\n+            \"\"\",\n+            new RectInfo(\".rect\", \".rect\"));\n+    }\n+\n+    private Region createTransitionDelayTab() {\n+        return createContent(\"\"\"\n+                .rect {\n+                  -fx-min-width: 100;\n+                  -fx-min-height: 100;\n+                  -fx-background-color: red;\n+                  transition-property: -fx-min-width;\n+                  transition-duration: 3s;\n+                  transition-delay: 1s;\n+                }\n+\n+                .rect:hover {\n+                  -fx-min-width: 300;\n+                }\n+                \"\"\",\n+                new RectInfo(\".rect\", \".rect\"));\n+    }\n+\n+    private Region createTransitionTimingFunctionTab() {\n+        return createContent(\"\"\"\n+            .rect {\n+              -fx-min-width: 100;\n+              -fx-min-height: 50;\n+              -fx-background-color: red;\n+              transition-property: -fx-min-width;\n+              transition-duration: 2s;\n+            }\n+\n+            .rect:hover {\n+              -fx-min-width: 300;\n+            }\n+\n+            #rect1 { transition-timing-function: linear; }\n+            #rect2 { transition-timing-function: ease; }\n+            #rect3 { transition-timing-function: ease-in; }\n+            #rect4 { transition-timing-function: ease-out; }\n+            #rect5 { transition-timing-function: ease-in-out; }\n+            \"\"\",\n+            new RectInfo(\"#rect1\", \"rect1\"),\n+            new RectInfo(\"#rect2\", \"rect2\"),\n+            new RectInfo(\"#rect3\", \"rect3\"),\n+            new RectInfo(\"#rect4\", \"rect4\"),\n+            new RectInfo(\"#rect5\", \"rect5\"));\n+    }\n+\n+    private Region createContent(String stylesheet, RectInfo... rects) {\n+        var text = new Label(stylesheet);\n+        text.setFont(Font.font(\"monospace\", FontWeight.BOLD, 12));\n+        text.setTextFill(Color.rgb(50, 50, 50));\n+\n+        var container = new VBox(10, text);\n+        var uri = \"data:charset=utf-8;base64,\" + Base64.getEncoder().encodeToString(\n+            stylesheet.getBytes(StandardCharsets.UTF_8));;\n+        container.getStylesheets().add(uri);\n+        container.setPadding(new Insets(10));\n+\n+        for (RectInfo rectInfo : rects) {\n+            var rect = new Label(rectInfo.caption());\n+            rect.setId(rectInfo.id());\n+            rect.setAlignment(Pos.TOP_LEFT);\n+            rect.getStyleClass().add(\"rect\");\n+            rect.setPadding(new Insets(5));\n+            container.getChildren().add(rect);\n+        }\n+\n+        return container;\n+    }\n+\n+    private record RectInfo(String caption, String id) {}\n+\n+    public static void main(String[] args) {\n+        Application.launch(args);\n+    }\n+\n+}\n","filename":"tests\/manual\/graphics\/CssTransitionsTest.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"added"}]}