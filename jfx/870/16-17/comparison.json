{"files":[{"patch":"","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/animation\/doc-files\/easing-stepboth.svg","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/easing-stepboth.svg","status":"copied"},{"patch":"","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/animation\/doc-files\/easing-stepend.svg","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/easing-stepend.svg","status":"copied"},{"patch":"","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/animation\/doc-files\/easing-stepnone.svg","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/easing-stepnone.svg","status":"copied"},{"patch":"","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/animation\/doc-files\/easing-stepstart.svg","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/easing-stepstart.svg","status":"copied"},{"patch":"@@ -688,2 +688,2 @@\n-        changed, it smoothly transitions to the new value over a period of time. Implicit transitions are supported\n-        for all primitive types, as well as for types that implement <code>javafx.animation.Interpolatable<\/code>.<\/p>\n+        changed, it transitions to its new value over a period of time. Implicit transitions are supported for all\n+        primitive types, as well as for types that implement <code>javafx.animation.Interpolatable<\/code>.<\/p>\n","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/cssref.html","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    private final int intervals;\n+    private final int intervalCount;\n@@ -40,3 +40,3 @@\n-    public StepInterpolator(int intervals, StepPosition position) {\n-        if (position == StepPosition.NONE && intervals <= 1) {\n-            throw new IllegalArgumentException(\"intervals must be greater than 1\");\n+    public StepInterpolator(int intervalCount, StepPosition position) {\n+        if (position == StepPosition.NONE && intervalCount <= 1) {\n+            throw new IllegalArgumentException(\"intervalCount must be greater than 1\");\n@@ -45,2 +45,2 @@\n-        if (intervals <= 0) {\n-            throw new IllegalArgumentException(\"intervals must be greater than 0\");\n+        if (intervalCount <= 0) {\n+            throw new IllegalArgumentException(\"intervalCount must be greater than 0\");\n@@ -50,1 +50,1 @@\n-        this.intervals = intervals;\n+        this.intervalCount = intervalCount;\n@@ -66,1 +66,1 @@\n-        int step = (int)(t * intervals);\n+        int step = (int)(t * intervalCount);\n@@ -72,1 +72,1 @@\n-        if (before && (t * intervals % 1 == 0)) {\n+        if (before && (t * intervalCount % 1 == 0)) {\n@@ -81,3 +81,3 @@\n-            case START, END -> intervals;\n-            case NONE -> intervals - 1;\n-            case BOTH -> intervals + 1;\n+            case START, END -> intervalCount;\n+            case NONE -> intervalCount - 1;\n+            case BOTH -> intervalCount + 1;\n@@ -95,1 +95,1 @@\n-        return Integer.hashCode(intervals) + 31 * position.hashCode();\n+        return Integer.hashCode(intervalCount) + 31 * position.hashCode();\n@@ -101,1 +101,1 @@\n-            && intervals == other.intervals\n+            && intervalCount == other.intervalCount\n@@ -107,1 +107,1 @@\n-        return \"StepInterpolator [intervals=\" + intervals + \", position=\" + position + \"]\";\n+        return \"StepInterpolator [intervalCount=\" + intervalCount + \", position=\" + position + \"]\";\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/scenario\/animation\/StepInterpolator.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -280,0 +280,2 @@\n+         * <p>\n+         * <img width=\"200\" src=\"doc-files\/easing-stepstart.svg\" alt=\"START\"\/>\n@@ -285,0 +287,2 @@\n+         * <p>\n+         * <img width=\"200\" src=\"doc-files\/easing-stepend.svg\" alt=\"END\"\/>\n@@ -291,0 +295,2 @@\n+         * <p>\n+         * <img width=\"200\" src=\"doc-files\/easing-stepboth.svg\" alt=\"BOTH\"\/>\n@@ -296,0 +302,2 @@\n+         * <p>\n+         * <img width=\"200\" src=\"doc-files\/easing-stepnone.svg\" alt=\"NONE\"\/>\n@@ -319,1 +327,1 @@\n-     * @param intervals the number of intervals in the step interpolator\n+     * @param intervalCount the number of intervals in the step interpolator\n@@ -328,2 +336,2 @@\n-    public static Interpolator STEPS(int intervals, StepPosition position) {\n-        return new StepInterpolator(intervals, position);\n+    public static Interpolator STEPS(int intervalCount, StepPosition position) {\n+        return new StepInterpolator(intervalCount, position);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/animation\/Interpolator.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"}]}