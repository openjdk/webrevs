{"files":[{"patch":"@@ -195,1 +195,1 @@\n-        return lights == null || lights[0] == null;\n+        return lights == null || lights.length == 0 || lights[0] == null;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/sg\/prism\/NGShape3D.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -2149,1 +2149,1 @@\n-        WritableImage result = Scene.doSnapshot(getScene(), x, y, w, h,\n+        WritableImage result = Scene.doSnapshot(getScene(), getSubScene(), x, y, w, h,\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,0 +95,1 @@\n+import java.util.stream.Stream;\n@@ -1303,1 +1304,1 @@\n-    static WritableImage doSnapshot(Scene scene,\n+    static WritableImage doSnapshot(Scene scene, SubScene subScene,\n@@ -1349,7 +1350,6 @@\n-        \/\/ Grab the lights from the scene\n-        context.lights = null;\n-        if (scene != null && !scene.lights.isEmpty()) {\n-            context.lights = new NGLightBase[scene.lights.size()];\n-            for (int i = 0; i < scene.lights.size(); i++) {\n-                context.lights[i] = scene.lights.get(i).getPeer();\n-            }\n+        \/\/ Grab the lights from the scene or subscene\n+        Stream<NGLightBase> lights;\n+        if (subScene != null) {\n+            lights = Optional.of(subScene).stream().flatMap(s -> s.getLights().stream()).map(LightBase::getPeer);\n+        } else {\n+            lights = Optional.ofNullable(scene).stream().flatMap(s -> s.lights.stream()).map(LightBase::getPeer);\n@@ -1358,0 +1358,2 @@\n+        context.lights = lights.toArray(NGLightBase[]::new);\n+\n@@ -1397,1 +1399,1 @@\n-        return doSnapshot(this, 0, 0, w, h,\n+        return doSnapshot(this, null, 0, 0, w, h,\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Scene.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -933,0 +933,3 @@\n+    List<LightBase> getLights() {\n+        return lights;\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/SubScene.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,161 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene;\n+\n+import javafx.geometry.Pos;\n+import javafx.scene.Node;\n+import javafx.scene.PointLight;\n+import javafx.scene.Scene;\n+import javafx.scene.SubScene;\n+import javafx.scene.image.PixelReader;\n+import javafx.scene.image.WritableImage;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Color;\n+import javafx.scene.paint.PhongMaterial;\n+import javafx.scene.shape.Box;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import test.util.Util;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+public class SnapshotLightsTest extends SnapshotCommon {\n+\n+    static final int BOX_DIM = 50;\n+\n+    @BeforeAll\n+    public static void setupOnce() {\n+        doSetupOnce();\n+    }\n+\n+    @AfterAll\n+    public static void teardownOnce() {\n+        doTeardownOnce();\n+    }\n+\n+    @BeforeEach\n+    public void setupEach() {\n+        assertNotNull(myApp);\n+        assertNotNull(myApp.primaryStage);\n+        assertTrue(myApp.primaryStage.isShowing());\n+    }\n+\n+    @AfterEach\n+    public void teardownEach() {\n+    }\n+\n+    private Scene buildScene(boolean inSubScene) {\n+        Box boxNode = new Box(BOX_DIM, BOX_DIM, BOX_DIM - 10);\n+        boxNode.setMaterial(new PhongMaterial(Color.WHITE));\n+\n+        StackPane pane = new StackPane(boxNode);\n+        pane.setAlignment(Pos.CENTER);\n+\n+        PointLight light = new PointLight(Color.BLUE);\n+        light.setTranslateZ(-150);\n+        pane.getChildren().add(light);\n+\n+        if (inSubScene) {\n+            SubScene ss = new SubScene(pane, BOX_DIM, BOX_DIM);\n+            StackPane subSceneRoot = new StackPane(ss);\n+            subSceneRoot.setAlignment(Pos.CENTER);\n+            return new Scene(subSceneRoot, BOX_DIM, BOX_DIM);\n+        } else {\n+            return new Scene(pane, BOX_DIM, BOX_DIM);\n+        }\n+    }\n+\n+    private void compareSnapshots(WritableImage base, WritableImage comp) {\n+        assertEquals(base.getWidth(), comp.getWidth(), 0.1);\n+        assertEquals(base.getHeight(), comp.getHeight(), 0.1);\n+\n+        PixelReader baseReader = base.getPixelReader();\n+        PixelReader compReader = comp.getPixelReader();\n+\n+        assertEquals(baseReader.getArgb(BOX_DIM \/ 2, BOX_DIM \/ 2), compReader.getArgb(BOX_DIM \/ 2, BOX_DIM \/ 2));\n+    }\n+\n+    public SnapshotLightsTest() {\n+    }\n+\n+    @Test\n+    public void testSceneNodeSnapshotLighting() throws Exception {\n+        Util.runAndWait(() -> {\n+            Scene scene = buildScene(false);\n+            WritableImage baseSnapshot = scene.snapshot(null);\n+\n+            Node boxNode = scene.getRoot().getChildrenUnmodifiable().get(0);\n+            WritableImage nodeSnapshot = boxNode.snapshot(null, null);\n+\n+            compareSnapshots(baseSnapshot, nodeSnapshot);\n+        });\n+    }\n+\n+    @Test\n+    public void testSubSceneNodeSnapshotLighting() throws Exception {\n+        Util.runAndWait(() -> {\n+            Scene scene = buildScene(true);\n+            WritableImage baseSnapshot = scene.snapshot(null);\n+\n+            SubScene ss = (SubScene)scene.getRoot().getChildrenUnmodifiable().get(0);\n+            Node boxNode = ss.getRoot().getChildrenUnmodifiable().get(0);\n+            WritableImage nodeSnapshot = boxNode.snapshot(null, null);\n+\n+            compareSnapshots(baseSnapshot, nodeSnapshot);\n+        });\n+    }\n+\n+    @Test\n+    public void testSubSceneSnapshotWithSceneLights() throws Exception {\n+        Util.runAndWait(() -> {\n+            Scene scene = buildScene(true);\n+\n+            \/\/ SubScene is \"separated\" from Scene, so Scene's lights should not be included\n+            \/\/ Add an extra red light to make sure it is actually not included\n+            PointLight light = new PointLight(Color.RED);\n+            light.setTranslateZ(-150);\n+            StackPane sceneRootPane = (StackPane)scene.getRoot();\n+            sceneRootPane.getChildren().add(light);\n+\n+            WritableImage baseSnapshot = scene.snapshot(null);\n+\n+            SubScene ss = (SubScene)scene.getRoot().getChildrenUnmodifiable().get(0);\n+            WritableImage subSceneSnapshot = ss.snapshot(null, null);\n+\n+            Node boxNode = ss.getRoot().getChildrenUnmodifiable().get(0);\n+            WritableImage nodeSnapshot = boxNode.snapshot(null, null);\n+\n+            compareSnapshots(baseSnapshot, subSceneSnapshot);\n+            compareSnapshots(baseSnapshot, nodeSnapshot);\n+        });\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/SnapshotLightsTest.java","additions":161,"deletions":0,"binary":false,"changes":161,"status":"added"}]}