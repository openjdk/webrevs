{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,4 +48,3 @@\n- * Note that the ArrayCache[BYTE\/INT\/FLOAT\/DOUBLE] files are nearly identical except\n- * for a few type and name differences. Typically, the [BYTE]ArrayCache.java file\n- * is edited manually and then [INT\/FLOAT\/DOUBLE]ArrayCache.java\n- * files are generated with the following command lines:\n+ * Note that the ArrayCache[Byte\/Double\/Int] files are nearly identical except\n+ * for their array type [byte\/double\/int] and class name differences.\n+ * ArrayCache[Byte\/Double\/Int] class deals with dirty arrays.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/ArrayCacheByte.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -48,4 +48,3 @@\n- * Note that the ArrayCache[BYTE\/INT\/FLOAT\/DOUBLE] files are nearly identical except\n- * for a few type and name differences. Typically, the [BYTE]ArrayCache.java file\n- * is edited manually and then [INT\/FLOAT\/DOUBLE]ArrayCache.java\n- * files are generated with the following command lines:\n+ * Note that the ArrayCache[Byte\/Double\/Int] files are nearly identical except\n+ * for their array type [byte\/double\/int] and class name differences.\n+ * ArrayCache[Byte\/Double\/Int] class deals with dirty arrays.\n@@ -169,1 +168,1 @@\n-                    fill(array, fromIndex, toIndex, 0.0d);\n+                    fill(array, fromIndex, toIndex, \/*(double)*\/ 0.0);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/ArrayCacheDouble.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,4 +48,3 @@\n- * Note that the ArrayCache[BYTE\/INT\/FLOAT\/DOUBLE] files are nearly identical except\n- * for a few type and name differences. Typically, the [BYTE]ArrayCache.java file\n- * is edited manually and then [INT\/FLOAT\/DOUBLE]ArrayCache.java\n- * files are generated with the following command lines:\n+ * Note that the ArrayCache[Byte\/Double\/Int] files are nearly identical except\n+ * for their array type [byte\/double\/int] and class name differences.\n+ * ArrayCache[Byte\/Double\/Int] class deals with dirty arrays.\n@@ -169,1 +168,1 @@\n-                    fill(array, fromIndex, toIndex, 0);\n+                    fill(array, fromIndex, toIndex, \/*(int)*\/ 0);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/ArrayCacheInt.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -47,4 +47,3 @@\n- * Note that the ArrayCache[BYTE\/INT\/FLOAT\/DOUBLE] files are nearly identical except\n- * for a few type and name differences. Typically, the [BYTE]ArrayCache.java file\n- * is edited manually and then [INT\/FLOAT\/DOUBLE]ArrayCache.java\n- * files are generated with the following command lines:\n+ * Note that the ArrayCache[Int\/IntClean] files are nearly identical except\n+ * for their array type [byte\/double\/int] and class name differences.\n+ * ArrayCache[Int]Clean class deals with zero-filled arrays.\n@@ -172,1 +171,1 @@\n-                    fill(array, fromIndex, toIndex, 0);\n+                    fill(array, fromIndex, toIndex, \/*(int)*\/ 0);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/ArrayCacheIntClean.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -7,1 +7,1 @@\n- * published by the Free Software Foundation. Oracle designates this\n+ * published by the Free Software Foundation.  Oracle designates this\n@@ -13,1 +13,1 @@\n- * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/DPQSSorterContext.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,7 +29,26 @@\n-    public void moveTo(double x0, double y0);\n-    public void lineTo(double x1, double y1);\n-    public void quadTo(double xc, double yc,\n-                       double x1, double y1);\n-    public void curveTo(double xc0, double yc0,\n-                        double xc1, double yc1,\n-                        double x1, double y1);\n+    \/**\n+     * @see java.awt.geom.Path2D.Double#moveTo\n+     *\/\n+    public void moveTo(double x, double y);\n+\n+    \/**\n+     * @see java.awt.geom.Path2D.Double#lineTo\n+     *\/\n+    public void lineTo(double x, double y);\n+\n+    \/**\n+     * @see java.awt.geom.Path2D.Double#quadTo\n+     *\/\n+    public void quadTo(double x1, double y1,\n+                       double x2, double y2);\n+\n+    \/**\n+     * @see java.awt.geom.Path2D.Double#curveTo\n+     *\/\n+    public void curveTo(double x1, double y1,\n+                        double x2, double y2,\n+                        double x3, double y3);\n+\n+    \/**\n+     * @see java.awt.geom.Path2D.Double#closePath\n+     *\/\n@@ -37,0 +56,9 @@\n+\n+    \/**\n+     * Called after the last segment of the last subpath when the\n+     * iteration of the path segments is completely done.  This\n+     * method serves to trigger the end of path processing in the\n+     * consumer that would normally be triggered when a\n+     * {@link java.awt.geom.PathIterator PathIterator}\n+     * returns {@code true} from its {@code done} method.\n+     *\/\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/DPathConsumer2D.java","additions":36,"deletions":8,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -351,2 +351,9 @@\n-        \/\/ small arraycopy (2, 4 or 6) but with offset:\n-        System.arraycopy(pts, off, buf, segIdx, len);\n+\n+        if (len == 2) {\n+            \/\/ most probable case:\n+            buf[segIdx    ] = pts[off    ];\n+            buf[segIdx + 1] = pts[off + 1];\n+        } else {\n+            \/\/ small arraycopy (4 or 6) but with offset:\n+            System.arraycopy(pts, off, buf, segIdx, len);\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/Dasher.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -173,1 +173,1 @@\n-            \/\/ 1561 occurences\n+            \/\/ 1561 occurrences\n@@ -188,1 +188,1 @@\n-            \/\/ 14 occurences\n+            \/\/ 14 occurrences\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/MergeSort.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -627,1 +627,1 @@\n-            \/\/ if context is maked as DIRTY:\n+            \/\/ if context is marked as DIRTY:\n@@ -830,1 +830,1 @@\n-        int lastY = -1; \/\/ last emited row\n+        int lastY = -1; \/\/ last emitted row\n@@ -883,1 +883,1 @@\n-                            = edgePtrs_ref.widenArray(_edgePtrs, edgePtrsLen, \/\/ bad mark ? TODO: fix edge ptr mark\n+                            = edgePtrs_ref.widenArray(_edgePtrs, edgePtrsLen,\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/Renderer.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -175,1 +175,1 @@\n-        \/\/ if context is maked as DIRTY:\n+        \/\/ if context is marked as DIRTY:\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/RendererContext.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -183,2 +183,2 @@\n-            \/\/ h = s² \/ (8 r)\n-            \/\/ so s² = (8 h * r)\n+            \/\/ h = s^2 \/ (8 r)\n+            \/\/ so s^2 = (8 h * r)\n@@ -190,1 +190,1 @@\n-            \/\/ chord limit (s²):\n+            \/\/ chord limit (s^2):\n@@ -597,1 +597,0 @@\n-\n@@ -1158,1 +1157,0 @@\n-\n@@ -1305,1 +1303,0 @@\n-\n@@ -1334,0 +1331,1 @@\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/Stroker.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,0 +108,14 @@\n+            final double det = a * d - c * b;\n+\n+            if (Math.abs(det) <= (2.0d * Double.MIN_VALUE)) {\n+                \/\/ This rendering engine takes one dimensional curves and turns\n+                \/\/ them into 2D shapes by giving them width.\n+                \/\/ However, if everything is to be passed through a singular\n+                \/\/ transformation, these 2D shapes will be squashed down to 1D\n+                \/\/ again so, nothing can be drawn.\n+\n+                \/\/ Every path needs an initial moveTo and a pathDone.\n+                out.moveTo(0.0d, 0.0d);\n+                out.pathDone();\n+                return null;\n+            }\n@@ -310,1 +324,3 @@\n-            feedConsumer(rdrCtx, p2d, tf, pc2d);\n+            if (pc2d != null) {\n+                feedConsumer(rdrCtx, p2d, tf, pc2d);\n+            }\n@@ -314,1 +330,3 @@\n-            feedConsumer(rdrCtx, pi, pc2d);\n+            if (pc2d != null) {\n+                feedConsumer(rdrCtx, pi, pc2d);\n+            }\n@@ -327,5 +345,6 @@\n-\n-        if (shape instanceof Path2D) {\n-            feedConsumer(rdrCtx, (Path2D)shape, null, pc2d);\n-        } else {\n-            feedConsumer(rdrCtx, shape.getPathIterator(null), pc2d);\n+        if (pc2d != null) {\n+            if (shape instanceof Path2D) {\n+                feedConsumer(rdrCtx, (Path2D)shape, null, pc2d);\n+            } else {\n+                feedConsumer(rdrCtx, shape.getPathIterator(null), pc2d);\n+            }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/impl\/shape\/DMarlinPrismUtils.java","additions":27,"deletions":8,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,4 +90,1 @@\n-        \/*\n-            System.out.println(\"BLUE_PIXEL: \" + BLUE_PIXEL);\n-            System.out.println(\"RED_PIXEL:  \" + RED_PIXEL);\n-         *\/\n+\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/marlin\/HugePolygonClipTest.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,226 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.com.sun.marlin;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Method;\n+\n+import java.util.Locale;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.beans.value.ObservableValue;\n+import javafx.scene.Group;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.stage.Stage;\n+import javafx.stage.WindowEvent;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Slider;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Circle;\n+import javafx.scene.shape.Rectangle;\n+\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import test.util.Util;\n+import static test.util.Util.TIMEOUT;\n+\n+\/**\n+ * @test\n+ * @bug 8312603\n+ * @summary Check the crash with MarlinFX renderer if scaleX or scaleY is pure 0.0\n+ *\/\n+public class ScaleX0Test {\n+\n+    private final static int SIZE = 800;\n+\n+    static CountDownLatch launchLatch = new CountDownLatch(1);\n+\n+    static final ByteArrayOutputStream out = new ByteArrayOutputStream(1024 * 1024);\n+    static PrintStream defaultErrorStream = System.err;\n+\n+    static {\n+        Locale.setDefault(Locale.US);\n+\n+        System.setProperty(\"prism.verbose\", \"false\");\n+        \/\/ Enable Marlin logging\n+        System.setProperty(\"prism.marlin.log\", \"true\");\n+    }\n+\n+    @BeforeClass\n+    public static void setupOnce() throws Exception {\n+        defaultErrorStream = System.err;\n+        \/\/ Capture stderr:\n+        System.setErr(new PrintStream(out, true));\n+\n+        CountDownLatch startupLatch = new CountDownLatch(1);\n+        Util.startup(startupLatch, () -> {\n+            Platform.setImplicitExit(false);\n+            startupLatch.countDown();\n+        });\n+    }\n+\n+    @AfterClass\n+    public static void teardownOnce() {\n+        System.setErr(defaultErrorStream);\n+        Util.shutdown();\n+    }\n+\n+    @Test(timeout = 15000)\n+    public void testMarlinAIOOBEwhenScaleXIs0() {\n+        Scene scene = createScene();\n+\n+        Platform.runLater(() -> {\n+            Stage stage = new Stage();\n+            stage.setScene(scene);\n+            stage.addEventHandler(WindowEvent.WINDOW_SHOWN, e -> Platform.runLater(launchLatch::countDown));\n+            stage.show();\n+        });\n+\n+        try {\n+            if (!launchLatch.await(TIMEOUT, TimeUnit.MILLISECONDS)) {\n+                Assert.fail(\"Timeout waiting for stage to show\");\n+            }\n+            \/\/ Wait to ensure stderr will contain the potential exception:\n+            Thread.sleep(500L);\n+\n+        } catch (InterruptedException ie) {\n+            Logger.getLogger(ScaleX0Test.class.getName()).log(Level.SEVERE, \"interrupted\", ie);\n+        }\n+\n+        \/\/ Restore stderr:\n+        System.err.flush();\n+        System.setErr(defaultErrorStream);\n+\n+        \/\/ Get stderr to check exception:\n+        String stdErr = out.toString();\n+\n+        if (!stdErr.isEmpty()) {\n+            System.err.println(\"Captured System.err output (\" + stdErr.length() + \" chars):\");\n+            System.err.println(\"---------------------------------------\");\n+            System.err.println(stdErr);\n+            System.err.println(\"---------------------------------------\");\n+        }\n+\n+        if (stdErr.contains(\"ArrayIndexOutOfBoundsException\")) {\n+            Assert.fail(\"ArrayIndexOutOfBoundsException thrown !\");\n+        }\n+    }\n+\n+    private static Scene createScene() {\n+        Slider slider = new Slider(0, 2, 0) {\n+            {\n+                setBlockIncrement((getMax() - getMin()) \/ 4);\n+                setMajorTickUnit((getMax() - getMin()) \/ 4);\n+                setMinorTickCount(2);\n+                setPrefWidth(200);\n+                setShowTickLabels(true);\n+                setShowTickMarks(true);\n+            }\n+        };\n+\n+        Group leftPane = new Group();\n+        NodeAndGraphic leftNode = create();\n+        preparePane(leftPane, leftNode.node);\n+\n+        try {\n+            String propertyName = \"scaleXProperty\"; \/\/ Works fine for translateXProperty\n+            Method method = leftNode.graphic.getClass().getMethod(propertyName, (Class[]) null);\n+            Object bindableObj = method.invoke(leftNode.graphic);\n+            Method bindMethod = bindableObj.getClass().getMethod(\"bind\", ObservableValue.class);\n+            bindMethod.invoke(bindableObj, slider.valueProperty());\n+        } catch (Throwable th) {\n+            Logger.getLogger(ScaleX0Test.class.getName()).log(Level.SEVERE, \"bind exception\", th);\n+        }\n+\n+        Pane leftContainer = new Pane() {\n+            {\n+                setStyle(\"-fx-border-color: rosybrown;\");\n+                getChildren().add(leftPane);\n+                setPrefSize(300, 300);\n+                setMaxSize(300, 300);\n+                setMinSize(300, 300);\n+            }\n+        };\n+\n+        GridPane.setConstraints(leftContainer, 0, 2);\n+        GridPane field = new GridPane() {\n+            {\n+                getChildren().addAll(slider, leftContainer);\n+            }\n+        };\n+\n+        return new Scene(field, SIZE, SIZE, Color.WHITE);\n+    }\n+\n+    private static NodeAndGraphic create() {\n+        Button button = new Button(\"Button\");\n+        button.setLayoutX(50);\n+        button.setLayoutY(50);\n+        button.setPrefSize(100, 50);\n+        button.setMinSize(100, 50);\n+        button.setMaxSize(100, 50);\n+\n+        Circle circle = new Circle(20);\n+        circle.setFill(Color.LIGHTGREEN);\n+        circle.setStroke(Color.DARKGREEN);\n+        circle.getStrokeDashArray().add(10.);\n+        circle.getStrokeDashArray().add(8.);\n+\n+        button.setGraphic(circle);\n+\n+        return new NodeAndGraphic(button, button.getGraphic());\n+    }\n+\n+    private static void preparePane(Group pane, Node node) {\n+        pane.getChildren().clear();\n+        Rectangle bounds = new Rectangle(300, 300, Color.TRANSPARENT);\n+        pane.getChildren().add(bounds);\n+        pane.setClip(new Rectangle(300, 300));\n+        pane.getChildren().add(node);\n+    }\n+\n+    final static class NodeAndGraphic {\n+\n+        final Node node;\n+        final Object graphic;\n+\n+        NodeAndGraphic(Node node, Object graphic) {\n+            this.node = node;\n+            this.graphic = graphic;\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/marlin\/ScaleX0Test.java","additions":226,"deletions":0,"binary":false,"changes":226,"status":"added"}]}