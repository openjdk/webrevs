{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/marlin\/DPathConsumer2D.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,253 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package test.com.sun.marlin;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.PrintStream;\n-import java.lang.reflect.Method;\n-import static org.junit.Assert.assertEquals;\n-\n-import java.util.Locale;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-\n-import javafx.application.Application;\n-import javafx.application.Platform;\n-import javafx.beans.value.ObservableValue;\n-import javafx.scene.Group;\n-import javafx.scene.Node;\n-import javafx.scene.Scene;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.Labeled;\n-import javafx.scene.control.Slider;\n-import javafx.scene.layout.GridPane;\n-import javafx.scene.layout.Pane;\n-import javafx.scene.paint.Color;\n-import javafx.scene.shape.Circle;\n-import javafx.scene.shape.Rectangle;\n-import javafx.stage.Stage;\n-\n-import org.junit.AfterClass;\n-import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n-import test.util.Util;\n-\n-\/**\n- * @test\n- * @bug 8312603\n- * @summary Check the crash with MarlinFX renderer\n- *\/\n-public class Scale0Test {\n-\n-    private final static int SIZE = 800;\n-\n-    \/\/ Used to launch the application before running any test\n-    private static final CountDownLatch launchLatch = new CountDownLatch(1);\n-\n-    \/\/ Singleton Application instance\n-    static MyApp myApp;\n-\n-    static final ByteArrayOutputStream out = new ByteArrayOutputStream(2048 * 1024);\n-    static final PrintStream defaultErrorStream = System.err;\n-\n-    static {\n-        Locale.setDefault(Locale.US);\n-\n-        System.setProperty(\"prism.verbose\", \"false\");\n-        \/\/ enable Marlin logging & internal checks:\n-        System.setProperty(\"prism.marlin.log\", \"true\");\n-    }\n-\n-    \/\/ Application class. An instance is created and initialized before running\n-    \/\/ the first test, and it lives through the execution of all tests.\n-    public static class MyApp extends Application {\n-\n-        Stage stage = null;\n-\n-        public MyApp() {\n-            super();\n-        }\n-\n-        @Override\n-        public void init() {\n-            Scale0Test.myApp = this;\n-        }\n-\n-        @Override\n-        public void start(Stage primaryStage) throws Exception {\n-            this.stage = primaryStage;\n-            launchLatch.countDown();\n-        }\n-    }\n-\n-    @BeforeClass\n-    public static void setupOnce() throws Exception {\n-        \/\/ Capture stderr:\n-        System.setErr(new PrintStream(out, true));\n-\n-        Util.launch(launchLatch, MyApp.class);\n-        assertEquals(0, launchLatch.getCount());\n-    }\n-\n-    @AfterClass\n-    public static void teardownOnce() {\n-        Util.shutdown();\n-    }\n-\n-    @Test(timeout = 15000)\n-    public void TestBug() {\n-\n-        Platform.runLater(() -> {\n-            myApp.stage.setScene(createScene());\n-            myApp.stage.show();\n-        });\n-\n-        try {\n-            Thread.sleep(2000L);\n-        } catch (InterruptedException ie) {\n-            Logger.getLogger(Scale0Test.class.getName()).log(Level.SEVERE, \"interrupted\", ie);\n-        }\n-\n-        \/\/ Restore stderr:\n-        System.setErr(defaultErrorStream);\n-\n-        \/\/ Get stderr to check exception:\n-        final String stdErr = out.toString();\n-\n-        if (!stdErr.isEmpty()) {\n-            System.err.println(\"Captured System.err output (\" + stdErr.length() + \" chars):\");\n-            System.err.println(\"---------------------------------------\");\n-            System.err.println(stdErr);\n-            System.err.println(\"---------------------------------------\");\n-        }\n-\n-        if (stdErr.contains(\"ArrayIndexOutOfBoundsException\")) {\n-            Assert.fail(\"ArrayIndexOutOfBoundsException thrown !\");\n-        }\n-    }\n-\n-    private Group leftPane;\n-    private Slider slider;\n-\n-    private Scene createScene() {\n-        slider = new Slider(0, 2, 0) {\n-            {\n-                setBlockIncrement((getMax() - getMin()) \/ 4);\n-                setMajorTickUnit((getMax() - getMin()) \/ 4);\n-                setMinorTickCount(2);\n-                setPrefWidth(200);\n-                setShowTickLabels(true);\n-                setShowTickMarks(true);\n-            }\n-        };\n-        leftPane = new Group();\n-\n-        final NodeAndGraphic leftNode = create();\n-        preparePane(this.leftPane, leftNode.node);\n-\n-        try {\n-            String propertyName = \"scaleXProperty\"; \/\/Works fine for translateXProperty\n-            Method method = leftNode.graphic.getClass().getMethod(propertyName, (Class[]) null);\n-            Object bindableObj = method.invoke(leftNode.graphic);\n-            Method bindMethod = bindableObj.getClass().getMethod(\"bind\", ObservableValue.class);\n-            bindMethod.invoke(bindableObj, slider.valueProperty());\n-        } catch (Throwable th) {\n-            Logger.getLogger(Scale0Test.class.getName()).log(Level.SEVERE, \"bind exception\", th);\n-        }\n-\n-        final Pane leftContainer = new Pane() {\n-            {\n-                setStyle(\"-fx-border-color: rosybrown;\");\n-                getChildren().add(leftPane);\n-                setPrefSize(300, 300);\n-                setMaxSize(300, 300);\n-                setMinSize(300, 300);\n-            }\n-        };\n-        GridPane.setConstraints(leftContainer, 0, 2);\n-\n-        GridPane field = new GridPane() {\n-            {\n-                getChildren().addAll(slider, leftContainer);\n-            }\n-        };\n-\n-        return new Scene(field, SIZE, SIZE, Color.WHITE);\n-    }\n-\n-    private static NodeAndGraphic create() {\n-        Button button = new Button();\n-        button.setLayoutX(50);\n-        button.setLayoutY(50);\n-        button.setPrefSize(100, 50);\n-        button.setMinSize(100, 50);\n-        button.setMaxSize(100, 50);\n-        if (button instanceof Labeled) {\n-            Labeled l = (Labeled) button;\n-            Circle circle = new Circle(10);\n-            circle.setFill(Color.LIGHTGREEN);\n-            circle.setStroke(Color.DARKGREEN);\n-            circle.getStrokeDashArray().add(10.);\n-            circle.getStrokeDashArray().add(8.);\n-            l.setGraphic(circle);\n-        }\n-        return new NodeAndGraphic(button, button.getGraphic());\n-    }\n-\n-    private static void preparePane(Group pane, Node node) {\n-        pane.getChildren().clear();\n-        final Rectangle bounds = new Rectangle() {\n-            {\n-                setWidth(300);\n-                setHeight(300);\n-                setFill(Color.TRANSPARENT);\n-            }\n-        };\n-\n-        pane.getChildren().add(bounds);\n-        pane.setClip(new Rectangle() {\n-            {\n-                setWidth(300);\n-                setHeight(300);\n-            }\n-        });\n-        pane.getChildren().add(node);\n-    }\n-\n-    final static class NodeAndGraphic {\n-\n-        final Node node;\n-        final Object graphic;\n-\n-        NodeAndGraphic(Node node, Object graphic) {\n-            this.node = node;\n-            this.graphic = graphic;\n-        }\n-    }\n-\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/marlin\/Scale0Test.java","additions":0,"deletions":253,"binary":false,"changes":253,"status":"deleted"},{"patch":"@@ -0,0 +1,213 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.com.sun.marlin;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.lang.reflect.Method;\n+\n+import java.util.Locale;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.beans.value.ObservableValue;\n+import javafx.scene.Group;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Slider;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Circle;\n+import javafx.scene.shape.Rectangle;\n+import javafx.stage.Stage;\n+\n+import org.junit.AfterClass;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import test.util.Util;\n+\n+\/**\n+ * @test\n+ * @bug 8312603\n+ * @summary Check the crash with MarlinFX renderer if scaleX or scaleY is pure 0.0\n+ *\/\n+public class ScaleX0Test {\n+\n+    private final static int SIZE = 800;\n+\n+    static final ByteArrayOutputStream out = new ByteArrayOutputStream(2048 * 1024);\n+    static final PrintStream defaultErrorStream = System.err;\n+\n+    static {\n+        Locale.setDefault(Locale.US);\n+\n+        System.setProperty(\"prism.verbose\", \"false\");\n+        \/\/ Enable Marlin logging\n+        System.setProperty(\"prism.marlin.log\", \"true\");\n+    }\n+\n+    @BeforeClass\n+    public static void setupOnce() throws Exception {\n+        CountDownLatch startupLatch = new CountDownLatch(1);\n+        Util.startup(startupLatch, () -> {\n+            Platform.setImplicitExit(false);\n+            startupLatch.countDown();\n+        });\n+    }\n+\n+    @AfterClass\n+    public static void teardownOnce() {\n+        Util.shutdown();\n+    }\n+\n+    @Test(timeout = 15000)\n+    public void testMarlinAIOOBEwhenScaleXIs0() {\n+\n+        Scene scene = createScene();\n+\n+        \/\/ Capture stderr:\n+        System.setErr(new PrintStream(out, true));\n+\n+        Platform.runLater(() -> {\n+            Stage stage = new Stage();\n+            stage.setScene(scene);\n+            stage.show();\n+        });\n+\n+        try {\n+            Thread.sleep(2000L);\n+        } catch (InterruptedException ie) {\n+            Logger.getLogger(ScaleX0Test.class.getName()).log(Level.SEVERE, \"interrupted\", ie);\n+        }\n+\n+        \/\/ Restore stderr:\n+        System.setErr(defaultErrorStream);\n+\n+        \/\/ Get stderr to check exception:\n+        String stdErr = out.toString();\n+\n+        if (!stdErr.isEmpty()) {\n+            System.err.println(\"Captured System.err output (\" + stdErr.length() + \" chars):\");\n+            System.err.println(\"---------------------------------------\");\n+            System.err.println(stdErr);\n+            System.err.println(\"---------------------------------------\");\n+        }\n+\n+        if (stdErr.contains(\"ArrayIndexOutOfBoundsException\")) {\n+            Assert.fail(\"ArrayIndexOutOfBoundsException thrown !\");\n+        }\n+    }\n+\n+    private static Scene createScene() {\n+        Slider slider = new Slider(0, 2, 0) {\n+            {\n+                setBlockIncrement((getMax() - getMin()) \/ 4);\n+                setMajorTickUnit((getMax() - getMin()) \/ 4);\n+                setMinorTickCount(2);\n+                setPrefWidth(200);\n+                setShowTickLabels(true);\n+                setShowTickMarks(true);\n+            }\n+        };\n+\n+        Group leftPane = new Group();\n+        NodeAndGraphic leftNode = create();\n+        preparePane(leftPane, leftNode.node);\n+\n+        try {\n+            String propertyName = \"scaleXProperty\"; \/\/ Works fine for translateXProperty\n+            Method method = leftNode.graphic.getClass().getMethod(propertyName, (Class[]) null);\n+            Object bindableObj = method.invoke(leftNode.graphic);\n+            Method bindMethod = bindableObj.getClass().getMethod(\"bind\", ObservableValue.class);\n+            bindMethod.invoke(bindableObj, slider.valueProperty());\n+        } catch (Throwable th) {\n+            Logger.getLogger(ScaleX0Test.class.getName()).log(Level.SEVERE, \"bind exception\", th);\n+        }\n+\n+        Pane leftContainer = new Pane() {\n+            {\n+                setStyle(\"-fx-border-color: rosybrown;\");\n+                getChildren().add(leftPane);\n+                setPrefSize(300, 300);\n+                setMaxSize(300, 300);\n+                setMinSize(300, 300);\n+            }\n+        };\n+\n+        GridPane.setConstraints(leftContainer, 0, 2);\n+        GridPane field = new GridPane() {\n+            {\n+                getChildren().addAll(slider, leftContainer);\n+            }\n+        };\n+\n+        return new Scene(field, SIZE, SIZE, Color.WHITE);\n+    }\n+\n+    private static NodeAndGraphic create() {\n+        Button button = new Button(\"Button\");\n+        button.setLayoutX(50);\n+        button.setLayoutY(50);\n+        button.setPrefSize(100, 50);\n+        button.setMinSize(100, 50);\n+        button.setMaxSize(100, 50);\n+\n+        Circle circle = new Circle(20);\n+        circle.setFill(Color.LIGHTGREEN);\n+        circle.setStroke(Color.DARKGREEN);\n+        circle.getStrokeDashArray().add(10.);\n+        circle.getStrokeDashArray().add(8.);\n+\n+        button.setGraphic(circle);\n+\n+        return new NodeAndGraphic(button, button.getGraphic());\n+    }\n+\n+    private static void preparePane(Group pane, Node node) {\n+        pane.getChildren().clear();\n+        Rectangle bounds = new Rectangle(300, 300, Color.TRANSPARENT);\n+        pane.getChildren().add(bounds);\n+        pane.setClip(new Rectangle(300, 300));\n+        pane.getChildren().add(node);\n+    }\n+\n+    final static class NodeAndGraphic {\n+\n+        final Node node;\n+        final Object graphic;\n+\n+        NodeAndGraphic(Node node, Object graphic) {\n+            this.node = node;\n+            this.graphic = graphic;\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/marlin\/ScaleX0Test.java","additions":213,"deletions":0,"binary":false,"changes":213,"status":"added"}]}