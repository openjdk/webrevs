{"files":[{"patch":"@@ -45,5 +45,0 @@\n-    public static void setDataAccessRestriction(Dragboard dragboard,\n-            boolean restricted) {\n-        dragboardAccessor.setDataAccessRestriction(dragboard, restricted);\n-    }\n-\n@@ -67,1 +62,0 @@\n-        void setDataAccessRestriction(Dragboard dragboard, boolean restricted);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/input\/DragboardHelper.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -66,5 +66,0 @@\n-    \/\/ TODO: JDK-8344111: Consider removing this obsolete method\n-    public static void initSecurityDialog(Stage stage, boolean securityDialog) {\n-        stageAccessor.initSecurityDialog(stage, securityDialog);\n-    }\n-\n@@ -94,1 +89,0 @@\n-        public void initSecurityDialog(Stage stage, boolean securityDialog);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/stage\/StageHelper.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-    public TKStage createTKStage(Window peerWindow, boolean securityDialog, StageStyle stageStyle, boolean primary, Modality modality, TKStage owner, boolean rtl) {\n+    public TKStage createTKStage(Window peerWindow, StageStyle stageStyle, boolean primary, Modality modality, TKStage owner, boolean rtl) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/DummyToolkit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -363,1 +363,1 @@\n-    public abstract TKStage createTKStage(Window peerWindow, boolean securityDialog, StageStyle stageStyle, boolean primary, Modality modality, TKStage owner, boolean rtl);\n+    public abstract TKStage createTKStage(Window peerWindow, StageStyle stageStyle, boolean primary, Modality modality, TKStage owner, boolean rtl);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/Toolkit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -100,28 +100,0 @@\n-    \/\/ TODO: JDK-8344111: Consider removing this obsolete method\n-    \/\/ Default fullscreen allows limited keyboard input.\n-    \/\/ It will only receive events from the following keys:\n-    \/\/ DOWN, UP, LEFT, RIGHT, SPACE, TAB, PAGE_UP, PAGE_DOWN,\n-    \/\/ HOME, END, ENTER.\n-    private static boolean allowableFullScreenKeys(int key) {\n-        switch (key) {\n-            case KeyEvent.VK_DOWN:\n-            case KeyEvent.VK_UP:\n-            case KeyEvent.VK_LEFT:\n-            case KeyEvent.VK_RIGHT:\n-            case KeyEvent.VK_SPACE:\n-            case KeyEvent.VK_TAB:\n-            case KeyEvent.VK_PAGE_DOWN:\n-            case KeyEvent.VK_PAGE_UP:\n-            case KeyEvent.VK_HOME:\n-            case KeyEvent.VK_END:\n-            case KeyEvent.VK_ENTER:\n-                return true;\n-        }\n-        return false;\n-    }\n-\n-    \/\/ TODO: JDK-8344111: Consider removing this obsolete method\n-    private boolean checkFullScreenKeyEvent(int type, int key, char chars[], int modifiers) {\n-        return scene.getWindowStage().isTrustedFullScreen() || allowableFullScreenKeys(key);\n-    }\n-\n@@ -210,5 +182,0 @@\n-                        if (view.isInFullscreen()) {\n-                            if (!checkFullScreenKeyEvent(type, key, chars, modifiers)) {\n-                                break;\n-                            }\n-                        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/GlassViewEventHandler.java","additions":0,"deletions":33,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -611,1 +611,1 @@\n-    @Override public TKStage createTKStage(Window peerWindow, boolean securityDialog, StageStyle stageStyle, boolean primary, Modality modality, TKStage owner, boolean rtl) {\n+    @Override public TKStage createTKStage(Window peerWindow, StageStyle stageStyle, boolean primary, Modality modality, TKStage owner, boolean rtl) {\n@@ -613,1 +613,1 @@\n-        WindowStage stage = new WindowStage(peerWindow, securityDialog, stageStyle, modality, owner);\n+        WindowStage stage = new WindowStage(peerWindow, stageStyle, modality, owner);\n@@ -684,3 +684,1 @@\n-        boolean securityDialog = owner instanceof WindowStage ?\n-                ((WindowStage)owner).isSecurityDialog() : false;\n-        WindowStage stage = new WindowStage(peerWindow, securityDialog, popupStyle, null, owner);\n+        WindowStage stage = new WindowStage(peerWindow, popupStyle, null, owner);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/QuantumToolkit.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,0 @@\n-    private final boolean securityDialog;\n@@ -91,1 +90,1 @@\n-    public WindowStage(javafx.stage.Window peerWindow, boolean securityDialog, final StageStyle stageStyle, Modality modality, TKStage owner) {\n+    public WindowStage(javafx.stage.Window peerWindow, final StageStyle stageStyle, Modality modality, TKStage owner) {\n@@ -95,1 +94,0 @@\n-        this.securityDialog = securityDialog;\n@@ -119,4 +117,0 @@\n-    final boolean isSecurityDialog() {\n-        return securityDialog;\n-    }\n-\n@@ -184,3 +178,0 @@\n-            if (securityDialog) {\n-                platformWindow.setLevel(Window.Level.FLOATING);\n-            }\n@@ -563,3 +554,0 @@\n-        \/\/ The securityDialog flag takes precedence over alwaysOnTop\n-        if (securityDialog) return;\n-\n@@ -583,6 +571,0 @@\n-    \/\/ TODO: JDK-8344111: Consider removing this obsolete method\n-    \/\/ Return true if this stage is trusted for full screen (it always is)\n-    boolean isTrustedFullScreen() {\n-        return true;\n-    }\n-\n@@ -594,1 +576,0 @@\n-    \/\/ TODO: JDK-8344111: Consider removing this obsolete field\n@@ -616,2 +597,1 @@\n-                final boolean isTrusted = isTrustedFullScreen();\n-                if (!isTrusted && !fullScreenFromUserEvent) {\n+                if (!fullScreenFromUserEvent) {\n@@ -630,1 +610,1 @@\n-                        if (isTrusted && (fxStage != null)) {\n+                        if (fxStage != null) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/WindowStage.java","additions":4,"deletions":24,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -3076,2 +3076,0 @@\n-                \/\/ Data dropped to the app can be accessed without restriction\n-                DragboardHelper.setDataAccessRestriction(dndGesture.dragboard, false);\n@@ -3083,2 +3081,0 @@\n-                    DragboardHelper.setDataAccessRestriction(\n-                            dndGesture.dragboard, true);\n@@ -3222,5 +3218,0 @@\n-                            \/\/ Putting data to dragboard finished, restrict access to them\n-                            if (dragboard != null) {\n-                                DragboardHelper.setDataAccessRestriction(\n-                                        dragboard, true);\n-                            }\n@@ -3258,5 +3249,0 @@\n-                \/\/ Putting data to dragboard finished, restrict access to them\n-                if (dragboard != null) {\n-                    DragboardHelper.setDataAccessRestriction(\n-                            dragboard, true);\n-                }\n@@ -3472,3 +3458,0 @@\n-            \/\/ The app can see what it puts to dragboard without restriction\n-            DragboardHelper.setDataAccessRestriction(dragboard, false);\n-\n@@ -3524,3 +3507,0 @@\n-                \/\/ DRAG_DONE event is delivered to gesture source, it can access\n-                \/\/ its own data without restriction\n-                DragboardHelper.setDataAccessRestriction(dndGesture.dragboard, false);\n@@ -3530,1 +3510,0 @@\n-                    DragboardHelper.setDataAccessRestriction(dndGesture.dragboard, true);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Scene.java","additions":0,"deletions":21,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -155,5 +155,0 @@\n-            \/\/ TODO: JDK-8344111: Consider removing this obsolete method\n-            @Override\n-            public void setDataAccessRestriction(Dragboard dragboard, boolean restricted) {\n-            }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/input\/Dragboard.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -192,4 +192,0 @@\n-            @Override public void initSecurityDialog(Stage stage, boolean securityDialog) {\n-                stage.initSecurityDialog(securityDialog);\n-            }\n-\n@@ -283,35 +279,0 @@\n-    \/\/ Flag indicating that this stage is being used to show a security dialog\n-    private boolean securityDialog = false;\n-\n-    \/\/ TODO: JDK-8344111: Consider removing this obsolete method\n-    \/**\n-     * Sets a flag indicating that this stage is used for a security dialog and\n-     * must always be on top. If set, this will cause the window to be always\n-     * on top, regardless of the setting of the alwaysOnTop property.\n-     * NOTE: this flag must be set prior to showing the stage the first time.\n-     *\n-     * @param securityDialog flag indicating that this Stage is being used to\n-     * show a security dialog that should be always-on-top\n-     *\n-     * @throws IllegalStateException if this property is set after the stage\n-     * has ever been made visible.\n-     *\n-     * @defaultValue false\n-     *\/\n-    final void initSecurityDialog(boolean securityDialog) {\n-        if (hasBeenVisible) {\n-            throw new IllegalStateException(\"Cannot set securityDialog once stage has been set visible\");\n-        }\n-\n-        this.securityDialog = securityDialog;\n-    }\n-\n-    \/**\n-     * Returns the state of the securityDialog flag.\n-     *\n-     * @return a flag indicating whether or not this is a security dialog\n-     *\/\n-    final boolean isSecurityDialog() {\n-        return securityDialog;\n-    }\n-\n@@ -1128,2 +1089,2 @@\n-            setPeer(toolkit.createTKStage(this, isSecurityDialog(),\n-                    stageStyle, isPrimary(), getModality(), tkStage, rtl));\n+            setPeer(toolkit.createTKStage(this, stageStyle, isPrimary(),\n+                    getModality(), tkStage, rtl));\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/stage\/Stage.java","additions":2,"deletions":41,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -34,4 +34,0 @@\n-    public static boolean isSecurityDialog(Stage stage) {\n-        return stage.isSecurityDialog();\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/javafx\/stage\/StageShim.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -122,1 +122,1 @@\n-    public TKStage createTKStage(Window peerWindow, boolean securityDialog, StageStyle stageStyle, boolean primary, Modality modality, TKStage owner, boolean rtl) {\n+    public TKStage createTKStage(Window peerWindow, StageStyle stageStyle, boolean primary, Modality modality, TKStage owner, boolean rtl) {\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubToolkit.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}