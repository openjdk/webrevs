{"files":[{"patch":"@@ -53,1 +53,2 @@\n-        featureName = lowerCaseTextValue(featureName);\n+        String lowerCaseFeatureName = lowerCaseTextValue(featureName);\n+        String lowerCaseFeatureValue = lowerCaseTextValue(featureValue);\n@@ -55,1 +56,1 @@\n-        return switch (featureName) {\n+        return switch (lowerCaseFeatureName) {\n@@ -57,1 +58,1 @@\n-            case \"min-width\" -> rangeQueryExpression(SizeQueryType.WIDTH, featureValue,\n+            case \"min-width\" -> rangeQueryExpression(SizeQueryType.WIDTH, lowerCaseFeatureValue,\n@@ -60,1 +61,1 @@\n-            case \"max-width\" -> rangeQueryExpression(SizeQueryType.WIDTH, featureValue,\n+            case \"max-width\" -> rangeQueryExpression(SizeQueryType.WIDTH, lowerCaseFeatureValue,\n@@ -63,1 +64,1 @@\n-            case \"min-height\" -> rangeQueryExpression(SizeQueryType.HEIGHT, featureValue,\n+            case \"min-height\" -> rangeQueryExpression(SizeQueryType.HEIGHT, lowerCaseFeatureValue,\n@@ -66,1 +67,1 @@\n-            case \"max-height\" -> rangeQueryExpression(SizeQueryType.HEIGHT, featureValue,\n+            case \"max-height\" -> rangeQueryExpression(SizeQueryType.HEIGHT, lowerCaseFeatureValue,\n@@ -69,1 +70,1 @@\n-            case \"min-aspect-ratio\" -> rangeQueryExpression(SizeQueryType.ASPECT_RATIO, featureValue,\n+            case \"min-aspect-ratio\" -> rangeQueryExpression(SizeQueryType.ASPECT_RATIO, lowerCaseFeatureValue,\n@@ -72,1 +73,1 @@\n-            case \"max-aspect-ratio\" -> rangeQueryExpression(SizeQueryType.ASPECT_RATIO, featureValue,\n+            case \"max-aspect-ratio\" -> rangeQueryExpression(SizeQueryType.ASPECT_RATIO, lowerCaseFeatureValue,\n@@ -80,2 +81,3 @@\n-                 \"aspect-ratio\" -> rangeQueryExpression(SizeQueryType.of(featureName),\n-                                                        featureValue, ComparisonOp.EQUAL.getExpressionSupplier());\n+                 \"aspect-ratio\" -> rangeQueryExpression(SizeQueryType.of(lowerCaseFeatureName),\n+                                                        lowerCaseFeatureValue,\n+                                                        ComparisonOp.EQUAL.getExpressionSupplier());\n@@ -85,1 +87,1 @@\n-                boolean portrait = switch (checkNotNullValue(featureName, lowerCaseTextValue(featureValue))) {\n+                boolean portrait = switch (checkNotNullValue(lowerCaseFeatureName, lowerCaseFeatureValue)) {\n@@ -92,1 +94,1 @@\n-                    featureName, featureValue,\n+                    lowerCaseFeatureName, lowerCaseFeatureValue,\n@@ -101,1 +103,1 @@\n-                boolean fullscreen = switch (checkNotNullValue(featureName, lowerCaseTextValue(featureValue))) {\n+                boolean fullscreen = switch (checkNotNullValue(lowerCaseFeatureName, lowerCaseFeatureValue)) {\n@@ -108,1 +110,1 @@\n-                    featureName, featureValue,\n+                    lowerCaseFeatureName, lowerCaseFeatureValue,\n@@ -114,2 +116,2 @@\n-                featureName,\n-                checkNotNullValue(featureName, lowerCaseTextValue(featureValue)),\n+                lowerCaseFeatureName,\n+                checkNotNullValue(lowerCaseFeatureName, lowerCaseFeatureValue),\n@@ -117,1 +119,1 @@\n-                enumValue(ColorScheme::valueOf, featureName, featureValue));\n+                enumValue(ColorScheme::valueOf, lowerCaseFeatureName, featureValue));\n@@ -120,1 +122,1 @@\n-                featureName, lowerCaseTextValue(featureValue), \"reduce\", MediaQueryContext::isReducedMotion);\n+                lowerCaseFeatureName, lowerCaseFeatureValue, \"reduce\", MediaQueryContext::isReducedMotion);\n@@ -123,1 +125,1 @@\n-                featureName, lowerCaseTextValue(featureValue), \"reduce\", MediaQueryContext::isReducedTransparency);\n+                lowerCaseFeatureName, lowerCaseFeatureValue, \"reduce\", MediaQueryContext::isReducedTransparency);\n@@ -126,1 +128,1 @@\n-                featureName, lowerCaseTextValue(featureValue), \"reduce\", MediaQueryContext::isReducedData);\n+                lowerCaseFeatureName, lowerCaseFeatureValue, \"reduce\", MediaQueryContext::isReducedData);\n@@ -129,1 +131,1 @@\n-                featureName, lowerCaseTextValue(featureValue), \"persistent\", MediaQueryContext::isPersistentScrollBars);\n+                lowerCaseFeatureName, lowerCaseFeatureValue, \"persistent\", MediaQueryContext::isPersistentScrollBars);\n@@ -150,1 +152,2 @@\n-                                    featureValue, comparison.getExpressionSupplier());\n+                                    lowerCaseTextValue(featureValue),\n+                                    comparison.getExpressionSupplier());\n@@ -176,1 +179,1 @@\n-                                                   String featureValue,\n+                                                   String lowerCaseFeatureValue,\n@@ -180,1 +183,1 @@\n-            checkNotNullValue(featureType.getFeatureName(), featureValue));\n+            checkNotNullValue(featureType.getFeatureName(), lowerCaseFeatureValue));\n@@ -221,1 +224,1 @@\n-    private static Size lengthValue(String featureName, String text) {\n+    private static Size lengthValue(String featureName, String lowerCaseText) {\n@@ -224,2 +227,2 @@\n-        for (int i = 0; i < text.length(); i++) {\n-            if (!Character.isDigit(text.charAt(i))) {\n+        for (int i = 0; i < lowerCaseText.length(); i++) {\n+            if (!Character.isDigit(lowerCaseText.charAt(i))) {\n@@ -232,1 +235,1 @@\n-            return new Size(Double.parseDouble(text), SizeUnits.PX);\n+            return new Size(Double.parseDouble(lowerCaseText), SizeUnits.PX);\n@@ -235,1 +238,1 @@\n-        double value = Double.parseDouble(text.substring(0, unitIndex));\n+        double value = Double.parseDouble(lowerCaseText.substring(0, unitIndex));\n@@ -237,1 +240,1 @@\n-        return new Size(value, switch (text.substring(unitIndex).toLowerCase(Locale.ROOT)) {\n+        return new Size(value, switch (lowerCaseText.substring(unitIndex)) {\n@@ -247,1 +250,1 @@\n-                String.format(\"Invalid value <%s> for media feature <%s>\", text, featureName));\n+                String.format(\"Invalid value <%s> for media feature <%s>\", lowerCaseText, featureName));\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/MediaFeatures.java","additions":34,"deletions":31,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -109,0 +109,1 @@\n+                   (prefers-color-scheme: LIGHT),\n@@ -110,1 +111,6 @@\n-                   (prefers-reduced-transparency: no-preference) {\n+                   (prefers-Reduced-MOTION),\n+                   (prefers-reduced-transparency: no-preference),\n+                   (prefers-reduced-transparency: NO-PREFERENCE),\n+                   (width >= 100px),\n+                   (HEIGHT < 1000Px),\n+                   (max-HEIGHT: 500PX) {\n@@ -119,0 +125,2 @@\n+                FunctionExpression.of(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT),\n+                FunctionExpression.of(\"prefers-reduced-motion\", null, _ -> null, true),\n@@ -120,1 +128,5 @@\n-                FunctionExpression.of(\"prefers-reduced-transparency\", \"no-preference\", _ -> null, false)\n+                FunctionExpression.of(\"prefers-reduced-transparency\", \"no-preference\", _ -> null, false),\n+                FunctionExpression.of(\"prefers-reduced-transparency\", \"no-preference\", _ -> null, false),\n+                GreaterOrEqualExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX)),\n+                LessExpression.of(SizeQueryType.HEIGHT, new Size(1000, SizeUnits.PX)),\n+                LessOrEqualExpression.of(SizeQueryType.HEIGHT, new Size(500, SizeUnits.PX))\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/CssParser_mediaQuery_Test.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"}]}