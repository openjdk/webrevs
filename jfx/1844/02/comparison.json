{"files":[{"patch":"@@ -65,0 +65,4 @@\n+            h5 {\n+                font-size: 14px;\n+                margin: 18px 0px 10px 0px;\n+            }\n@@ -845,0 +849,3 @@\n+        Syntactically, media features resemble CSS properties: they consist of a feature name, a colon, and a value to\n+        test for. Media features are always enclosed in parentheses. They may also be written in boolean form as just a\n+        feature name, or in range form using arithmetic comparison operators.\n@@ -851,6 +858,5 @@\n-    <p>Syntactically, media features resemble CSS properties: they consist of a feature name, a colon, and a value to\n-        test for. Media features are always enclosed in parentheses. They may also be written in boolean form as just a\n-        feature name. In this case, the media feature is evaluated in a <strong>boolean context<\/strong>. This is a\n-        convenient shorthand for features that have a reasonable default value. A media feature that is evaluated in a\n-        boolean context evaluates to <code>true<\/code> if it would be <code>true<\/code> for any value <em>other<\/em>\n-        than the reasonable default value.\n+    <h5>Evaluating Media Features in a Boolean Context<\/h5>\n+    <p>If the colon and value is omitted, the media feature is evaluated in a boolean context.\n+        This is a convenient shorthand for features that have a reasonable default value. A media feature that is\n+        evaluated in a boolean context evaluates to <code>true<\/code> if it would be <code>true<\/code> for any value\n+        <em>other<\/em> than the reasonable default value.\n@@ -860,0 +866,27 @@\n+    <h5>Evaluating Media Features in a Range Context<\/h5>\n+    <p>A media feature with a range type can be evaluated in a range context with two forms:\n+        <ol>\n+            <li>The <strong>basic form<\/strong> consists of a feature name, an arithmetic comparison operator,\n+                and a value. For example:<br>\n+                <code>\n+                    (width &gt; 600px)<br>\n+                    (500px &lt;= height)<br>\n+                <\/code>\n+                <br>\n+            <li>The <strong>interval form<\/strong> consists of a feature name, nested between two comparison\n+                operators and two values. For example:<br>\n+                <code>\n+                    (400px &gt;= width &gt;= 600px)<br>\n+                    (10em &lt; height &lt;= 20em)<br>\n+                <\/code>\n+        <\/ol>\n+        Rather than evaluating media features in a range context, they can also be evaluated in a discrete context by\n+        writing the feature name with a \"min-\" or \"max-\" prefix:\n+        <ul>\n+            <li>Using the \"min-\" prefix on a feature name is equivalent to using the <code>&gt;=<\/code> operator, for example:<br>\n+                <code>(min-height: 500px)<\/code> is equivalent to <code>(height &gt;= 500px)<\/code><br>\n+                <br>\n+            <li>Using the \"max-\" prefix on a feature name is equivalent to using the <code>&lt;=<\/code> operator, for example:<br>\n+                <code>(max-width: 600px)<\/code> is equivalent to <code>(width &lt;= 600px)<\/code><br>\n+        <\/ul>\n+    <h5>Combining Media Features<\/h5>\n@@ -901,1 +934,1 @@\n-    <table class=\"cssmisctable\" id=\"mediafeatures\">\n+    <table class=\"csspropertytable\" id=\"mediafeatures\">\n@@ -903,1 +936,1 @@\n-        <thead>\n+        <tbody>\n@@ -905,3 +938,40 @@\n-                <th>Media feature<\/th>\n-                <th>Values<\/th>\n-                <th>Boolean Context<\/th>\n+                <th class=\"propertyname subheader\">Viewport Characteristics<\/th>\n+                <th class=\"subheader\">Value<\/th>\n+                <th class=\"subheader\">Type<\/th>\n+                <th class=\"subheader\">Comments<\/th>\n+            <\/tr>\n+            <tr>\n+                <td class=\"value\">width<\/td>\n+                <td class=\"value\"><a href=\"#typelength\" class=\"typeref\">&lt;length&gt;<\/a><\/td>\n+                <td>range<\/td>\n+                <td><\/td>\n+            <\/tr>\n+            <tr>\n+                <td class=\"value\">height<\/td>\n+                <td class=\"value\"><a href=\"#typelength\" class=\"typeref\">&lt;length&gt;<\/a><\/td>\n+                <td>range<\/td>\n+                <td><\/td>\n+            <\/tr>\n+            <tr>\n+                <td class=\"value\">aspect-ratio<\/td>\n+                <td class=\"value\"><a href=\"#typenumber\" class=\"typeref\">&lt;number&gt;<\/a><\/td>\n+                <td>range<\/td>\n+                <td>aspect ratio = width \/ height<\/td>\n+            <\/tr>\n+            <tr>\n+                <td class=\"value\">orientation<\/td>\n+                <td class=\"value\">portrait | landscape<\/td>\n+                <td>discrete<\/td>\n+                <td>portrait if height &gt;= width, landscape otherwise<\/td>\n+            <\/tr>\n+            <tr>\n+                <td class=\"value\">display-mode<\/td>\n+                <td class=\"value\">fullscreen | standalone<\/td>\n+                <td>discrete<\/td>\n+                <td><\/td>\n+            <\/tr>\n+            <tr>\n+                <th class=\"propertyname subheader\">User Preference<\/th>\n+                <th class=\"subheader\">Value<\/th>\n+                <th class=\"subheader\">Type<\/th>\n+                <th class=\"subheader\">Comments<\/th>\n@@ -909,2 +979,0 @@\n-        <\/thead>\n-        <tbody>\n@@ -914,1 +982,2 @@\n-                <td>not applicable<\/td>\n+                <td>discrete<\/td>\n+                <td><\/td>\n@@ -919,0 +988,1 @@\n+                <td>discrete<\/td>\n@@ -924,0 +994,1 @@\n+                <td>discrete<\/td>\n@@ -929,0 +1000,1 @@\n+                <td>discrete<\/td>\n@@ -934,0 +1006,1 @@\n+                <td>discrete<\/td>\n","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/cssref.html","additions":87,"deletions":14,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -3,3 +3,3 @@\n-   width=\"92.604164mm\"\n-   height=\"19.843748mm\"\n-   viewBox=\"0 0 92.604164 19.843748\"\n+   width=\"350\"\n+   height=\"110\"\n+   viewBox=\"0 0 92.604167 29.104167\"\n@@ -12,164 +12,185 @@\n-  <g\n-     id=\"layer1\"\n-     transform=\"translate(-15.875,-15.875001)\">\n-    <rect\n-       style=\"fill:none;fill-opacity:1;stroke:#000000;stroke-width:0;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n-       id=\"rect11\"\n-       width=\"92.604164\"\n-       height=\"19.84375\"\n-       x=\"15.875\"\n-       y=\"15.875002\" \/>\n-    <path\n-       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n-       d=\"M 18.520833,18.520834 V 23.8125\"\n-       id=\"path1\" \/>\n-    <path\n-       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n-       d=\"M 19.843749,18.520834 V 23.8125\"\n-       id=\"path2\" \/>\n-    <path\n-       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n-       d=\"m 18.520833,21.166667 h 5.291666\"\n-       id=\"path3\" \/>\n-    <rect\n-       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n-       id=\"rect3\"\n-       width=\"4.791666\"\n-       height=\"4.791667\"\n-       x=\"24.0625\"\n-       y=\"18.770834\"\n-       ry=\"1.1979167\" \/>\n-    <rect\n-       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n-       id=\"rect3-3\"\n-       width=\"4.7916636\"\n-       height=\"4.791667\"\n-       x=\"95.5\"\n-       y=\"18.770834\"\n-       ry=\"1.1979167\" \/>\n-    <text\n-       xml:space=\"preserve\"\n-       style=\"font-style:normal;font-weight:bold;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n-       x=\"26.020889\"\n-       y=\"21.951246\"\n-       id=\"text3\"><tspan\n-         id=\"tspan3\"\n-         style=\"font-size:2.82222px;stroke-width:0.264583\"\n-         x=\"26.020889\"\n-         y=\"21.951246\">(<\/tspan><\/text>\n-    <text\n-       xml:space=\"preserve\"\n-       style=\"font-style:normal;font-weight:bold;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n-       x=\"97.458389\"\n-       y=\"21.951244\"\n-       id=\"text3-4\"><tspan\n-         id=\"tspan3-3\"\n-         style=\"font-size:2.82222px;stroke-width:0.264583\"\n-         x=\"97.458389\"\n-         y=\"21.951244\">)<\/tspan><\/text>\n-    <rect\n-       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n-       id=\"rect3-0\"\n-       width=\"4.7916646\"\n-       height=\"4.791667\"\n-       x=\"59.78125\"\n-       y=\"18.770834\"\n-       ry=\"1.1979167\" \/>\n-    <text\n-       xml:space=\"preserve\"\n-       style=\"font-style:normal;font-weight:bold;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n-       x=\"61.739639\"\n-       y=\"21.951244\"\n-       id=\"text3-8\"><tspan\n-         id=\"tspan3-8\"\n-         style=\"font-size:2.82222px;stroke-width:0.264583\"\n-         x=\"61.739639\"\n-         y=\"21.951244\">:<\/tspan><\/text>\n-    <path\n-       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n-       d=\"m 29.104166,21.166667 h 5.291667\"\n-       id=\"path4\" \/>\n-    <rect\n-       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n-       id=\"rect4\"\n-       width=\"20.666666\"\n-       height=\"4.791667\"\n-       x=\"34.645832\"\n-       y=\"18.770834\" \/>\n-    <rect\n-       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n-       id=\"rect4-9\"\n-       width=\"20.666664\"\n-       height=\"4.791666\"\n-       x=\"51.84375\"\n-       y=\"28.031252\" \/>\n-    <rect\n-       style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n-       id=\"rect4-3\"\n-       width=\"20.666666\"\n-       height=\"4.791667\"\n-       x=\"69.041664\"\n-       y=\"18.770834\" \/>\n-    <text\n-       xml:space=\"preserve\"\n-       style=\"font-style:normal;font-weight:bold;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n-       x=\"36.079296\"\n-       y=\"22.232056\"\n-       id=\"text3-1\"><tspan\n-         id=\"tspan3-6\"\n-         style=\"font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:2.82222px;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583\"\n-         x=\"36.079296\"\n-         y=\"22.232056\">feature name<\/tspan><\/text>\n-    <text\n-       xml:space=\"preserve\"\n-       style=\"font-style:normal;font-weight:bold;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n-       x=\"53.277214\"\n-       y=\"31.492472\"\n-       id=\"text3-1-1\"><tspan\n-         id=\"tspan3-6-8\"\n-         style=\"font-size:2.82222px;stroke-width:0.264583\"\n-         x=\"53.277214\"\n-         y=\"31.492472\">feature name<\/tspan><\/text>\n-    <text\n-       xml:space=\"preserve\"\n-       style=\"font-style:normal;font-weight:bold;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n-       x=\"70.475128\"\n-       y=\"22.232056\"\n-       id=\"text3-1-0\"><tspan\n-         id=\"tspan3-6-5\"\n-         style=\"font-size:2.82222px;stroke-width:0.264583\"\n-         x=\"70.475128\"\n-         y=\"22.232056\">feature value<\/tspan><\/text>\n-    <path\n-       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n-       d=\"m 55.562497,21.166667 h 3.96875\"\n-       id=\"path5\" \/>\n-    <path\n-       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n-       d=\"m 64.822913,21.166667 h 3.96875\"\n-       id=\"path6\" \/>\n-    <path\n-       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n-       d=\"m 89.95833,21.166667 h 5.291666\"\n-       id=\"path7\" \/>\n-    <path\n-       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n-       d=\"m 100.54166,21.166667 h 5.29167\"\n-       id=\"path8\" \/>\n-    <path\n-       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n-       d=\"M 104.51041,18.520834 V 23.8125\"\n-       id=\"path9\" \/>\n-    <path\n-       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n-       d=\"M 105.83333,18.520834 V 23.8125\"\n-       id=\"path10\" \/>\n-    <path\n-       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n-       d=\"m 30.427083,21.166667 c 0,0 2.645833,0 2.645833,2.645833 v 3.96875 c 0,2.645834 2.645834,2.645833 2.645834,2.645833 -10e-7,1e-6 16.0075,0 16.0075,0\"\n-       id=\"path11\" \/>\n-    <path\n-       style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n-       d=\"m 93.92708,21.166668 c 0,0 -2.645833,0 -2.645833,2.645833 v 3.96875 c 0,2.645834 -2.645834,2.645833 -2.645834,2.645833 10e-7,1e-6 -16.0075,0 -16.0075,0\"\n-       id=\"path11-8\" \/>\n-  <\/g>\n+  <rect\n+     style=\"fill:none;fill-opacity:1;stroke:#000000;stroke-width:0;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n+     id=\"rect11\"\n+     width=\"92.604164\"\n+     height=\"19.84375\"\n+     x=\"0\"\n+     y=\"9.0734864e-07\" \/>\n+  <path\n+     style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+     d=\"M 2.645833,2.645833 V 7.937499\"\n+     id=\"path1\" \/>\n+  <path\n+     style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+     d=\"M 3.968749,2.645833 V 7.937499\"\n+     id=\"path2\" \/>\n+  <path\n+     style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+     d=\"M 2.645833,5.291666 H 7.937499\"\n+     id=\"path3\" \/>\n+  <rect\n+     style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n+     id=\"rect3\"\n+     width=\"4.791666\"\n+     height=\"4.791667\"\n+     x=\"8.1875\"\n+     y=\"2.895833\"\n+     ry=\"1.1979167\" \/>\n+  <rect\n+     style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n+     id=\"rect3-3\"\n+     width=\"4.7916636\"\n+     height=\"4.791667\"\n+     x=\"79.625\"\n+     y=\"2.895833\"\n+     ry=\"1.1979167\" \/>\n+  <text\n+     xml:space=\"preserve\"\n+     style=\"font-style:normal;font-weight:bold;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n+     x=\"10.145889\"\n+     y=\"6.0762453\"\n+     id=\"text3\"><tspan\n+       id=\"tspan3\"\n+       style=\"font-size:2.82222px;stroke-width:0.264583\"\n+       x=\"10.145889\"\n+       y=\"6.0762453\">(<\/tspan><\/text>\n+  <text\n+     xml:space=\"preserve\"\n+     style=\"font-style:normal;font-weight:bold;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n+     x=\"81.583389\"\n+     y=\"6.0762434\"\n+     id=\"text3-4\"><tspan\n+       id=\"tspan3-3\"\n+       style=\"font-size:2.82222px;stroke-width:0.264583\"\n+       x=\"81.583389\"\n+       y=\"6.0762434\">)<\/tspan><\/text>\n+  <rect\n+     style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n+     id=\"rect3-0\"\n+     width=\"4.7916646\"\n+     height=\"4.791667\"\n+     x=\"43.90625\"\n+     y=\"2.895833\"\n+     ry=\"1.1979167\" \/>\n+  <text\n+     xml:space=\"preserve\"\n+     style=\"font-style:normal;font-weight:bold;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n+     x=\"45.864639\"\n+     y=\"6.0762434\"\n+     id=\"text3-8\"><tspan\n+       id=\"tspan3-8\"\n+       style=\"font-size:2.82222px;stroke-width:0.264583\"\n+       x=\"45.864639\"\n+       y=\"6.0762434\">:<\/tspan><\/text>\n+  <path\n+     style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+     d=\"m 13.229166,5.291666 h 5.291667\"\n+     id=\"path4\" \/>\n+  <rect\n+     style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n+     id=\"rect4\"\n+     width=\"20.666666\"\n+     height=\"4.791667\"\n+     x=\"18.770832\"\n+     y=\"2.895833\" \/>\n+  <rect\n+     style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n+     id=\"rect4-9\"\n+     width=\"20.666664\"\n+     height=\"4.791666\"\n+     x=\"35.96875\"\n+     y=\"12.156251\" \/>\n+  <rect\n+     style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n+     id=\"rect4-9-5\"\n+     width=\"20.666664\"\n+     height=\"4.791666\"\n+     x=\"35.96875\"\n+     y=\"21.416666\" \/>\n+  <rect\n+     style=\"fill:#ffffff;fill-opacity:1;stroke:#000000;stroke-width:0.5;stroke-linecap:round;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1;paint-order:normal\"\n+     id=\"rect4-3\"\n+     width=\"20.666666\"\n+     height=\"4.791667\"\n+     x=\"53.166664\"\n+     y=\"2.895833\" \/>\n+  <text\n+     xml:space=\"preserve\"\n+     style=\"font-style:normal;font-weight:bold;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n+     x=\"20.204296\"\n+     y=\"6.3570547\"\n+     id=\"text3-1\"><tspan\n+       id=\"tspan3-6\"\n+       style=\"font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:2.82222px;font-family:sans-serif;-inkscape-font-specification:sans-serif;stroke-width:0.264583\"\n+       x=\"20.204296\"\n+       y=\"6.3570547\">feature name<\/tspan><\/text>\n+  <text\n+     xml:space=\"preserve\"\n+     style=\"font-style:normal;font-weight:bold;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n+     x=\"37.402214\"\n+     y=\"15.617471\"\n+     id=\"text3-1-1\"><tspan\n+       id=\"tspan3-6-8\"\n+       style=\"font-size:2.82222px;stroke-width:0.264583\"\n+       x=\"37.402214\"\n+       y=\"15.617471\">feature name<\/tspan><\/text>\n+  <text\n+     xml:space=\"preserve\"\n+     style=\"font-style:normal;font-weight:bold;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n+     x=\"38.836418\"\n+     y=\"24.87789\"\n+     id=\"text3-1-1-6\"><tspan\n+       id=\"tspan3-6-8-3\"\n+       style=\"font-size:2.82222px;stroke-width:0.264583\"\n+       x=\"38.836418\"\n+       y=\"24.87789\">range form<\/tspan><\/text>\n+  <text\n+     xml:space=\"preserve\"\n+     style=\"font-style:normal;font-weight:bold;font-size:2.82222px;line-height:1.25;font-family:sans-serif;fill:#000000;fill-opacity:1;stroke:none;stroke-width:0.264583\"\n+     x=\"54.600128\"\n+     y=\"6.3570547\"\n+     id=\"text3-1-0\"><tspan\n+       id=\"tspan3-6-5\"\n+       style=\"font-size:2.82222px;stroke-width:0.264583\"\n+       x=\"54.600128\"\n+       y=\"6.3570547\">feature value<\/tspan><\/text>\n+  <path\n+     style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+     d=\"m 39.687497,5.291666 h 3.96875\"\n+     id=\"path5\" \/>\n+  <path\n+     style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+     d=\"m 48.947913,5.291666 h 3.96875\"\n+     id=\"path6\" \/>\n+  <path\n+     style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+     d=\"m 74.08333,5.291666 h 5.291666\"\n+     id=\"path7\" \/>\n+  <path\n+     style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+     d=\"m 84.66666,5.291666 h 5.29167\"\n+     id=\"path8\" \/>\n+  <path\n+     style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+     d=\"M 88.63541,2.645833 V 7.937499\"\n+     id=\"path9\" \/>\n+  <path\n+     style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+     d=\"M 89.95833,2.645833 V 7.937499\"\n+     id=\"path10\" \/>\n+  <path\n+     style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+     d=\"m 14.552083,5.291666 c 0,0 2.645833,0 2.645833,2.645833 v 3.96875 c 0,2.645834 2.645834,2.645833 2.645834,2.645833 -1e-6,10e-7 16.0075,0 16.0075,0\"\n+     id=\"path11\" \/>\n+  <path\n+     style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+     d=\"m 17.197916,11.906249 -1e-6,9.260417 c 0,2.645834 2.645835,2.645833 2.645835,2.645833 -1e-6,1e-6 16.007499,0 16.007499,0\"\n+     id=\"path11-3\" \/>\n+  <path\n+     style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+     d=\"m 78.05208,5.291667 c 0,0 -2.645833,0 -2.645833,2.645833 v 3.96875 c 0,2.645834 -2.645834,2.645833 -2.645834,2.645833 10e-7,1e-6 -16.0075,0 -16.0075,0\"\n+     id=\"path11-8\" \/>\n+  <path\n+     style=\"fill:none;stroke:#000000;stroke-width:0.5;stroke-linecap:butt;stroke-linejoin:miter;stroke-dasharray:none;stroke-opacity:1\"\n+     d=\"m 75.406248,11.906249 -0.1175,9.260417 c -0.03357,2.645621 -2.645834,2.645833 -2.645834,2.645833 10e-7,1e-6 -16.0075,0 -16.0075,0\"\n+     id=\"path11-8-0\" \/>\n","filename":"modules\/javafx.graphics\/src\/main\/docs\/javafx\/scene\/doc-files\/media-feature.svg","additions":188,"deletions":167,"binary":false,"changes":355,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import com.sun.javafx.scene.ScenePreferences;\n+import com.sun.javafx.scene.SceneContext;\n@@ -46,1 +46,1 @@\n- * All properties in this class can be read from any thread in order to allow {@link ScenePreferences} to safely\n+ * All properties in this class can be read from any thread in order to allow {@link SceneContext} to safely\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/PreferenceProperties.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media;\n+\n+import com.sun.javafx.css.media.expression.EqualExpression;\n+import com.sun.javafx.css.media.expression.GreaterExpression;\n+import com.sun.javafx.css.media.expression.GreaterOrEqualExpression;\n+import com.sun.javafx.css.media.expression.LessExpression;\n+import com.sun.javafx.css.media.expression.LessOrEqualExpression;\n+import com.sun.javafx.css.media.expression.RangeExpression;\n+\n+enum ComparisonOp {\n+\n+    LESS(LessExpression::of),\n+    LESS_OR_EQUAL(LessOrEqualExpression::of),\n+    GREATER(GreaterExpression::of),\n+    GREATER_OR_EQUAL(GreaterOrEqualExpression::of),\n+    EQUAL(EqualExpression::of);\n+\n+    ComparisonOp(RangeExpression.Supplier supplier) {\n+        this.supplier = supplier;\n+    }\n+\n+    private final RangeExpression.Supplier supplier;\n+\n+    public RangeExpression.Supplier getExpressionSupplier() {\n+        return supplier;\n+    }\n+\n+    public ComparisonOp flipped() {\n+        return switch (this) {\n+            case LESS -> GREATER;\n+            case LESS_OR_EQUAL -> GREATER_OR_EQUAL;\n+            case GREATER -> LESS;\n+            case GREATER_OR_EQUAL -> LESS_OR_EQUAL;\n+            case EQUAL -> EQUAL;\n+        };\n+    }\n+\n+    public boolean isSameDirection(ComparisonOp other) {\n+        return switch (this) {\n+            case LESS, LESS_OR_EQUAL -> other == LESS || other == LESS_OR_EQUAL;\n+            case GREATER, GREATER_OR_EQUAL -> other == GREATER || other == GREATER_OR_EQUAL;\n+            default -> false;\n+        };\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/ComparisonOp.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media;\n+\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.Set;\n+\n+public enum ContextAwareness {\n+\n+    \/**\n+     * Indicates that the media query probes the viewport size (width or height).\n+     *\/\n+    VIEWPORT_SIZE,\n+\n+    \/**\n+     * Indicates that the media query probes the full-screen state.\n+     *\/\n+    FULLSCREEN;\n+\n+    public static Set<ContextAwareness> combine(Set<ContextAwareness> first, Set<ContextAwareness> second) {\n+        var result = EnumSet.copyOf(first);\n+        result.addAll(second);\n+        return result;\n+    }\n+\n+    public static Set<ContextAwareness> of(ContextAwareness... awareness) {\n+        var result = EnumSet.noneOf(ContextAwareness.class);\n+        Collections.addAll(result, awareness);\n+        return result;\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/ContextAwareness.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.css.media.expression.ConjunctionExpression;\n@@ -29,0 +30,1 @@\n+import com.sun.javafx.css.media.expression.RangeExpression;\n@@ -30,0 +32,2 @@\n+import javafx.css.Size;\n+import javafx.css.SizeUnits;\n@@ -41,1 +45,1 @@\n-     * Returns a {@code MediaQuery} that evaluates the specified feature.\n+     * Returns a {@code MediaQuery} that evaluates the specified feature in a discrete context.\n@@ -48,6 +52,2 @@\n-    public static MediaQuery featureQueryExpression(String featureName, String featureValue) {\n-        featureName = featureName.toLowerCase(Locale.ROOT).intern();\n-\n-        if (featureValue != null) {\n-            featureValue = featureValue.toLowerCase(Locale.ROOT).intern();\n-        }\n+    public static MediaQuery discreteQueryExpression(String featureName, String featureValue) {\n+        featureName = lowerCaseTextValue(featureName);\n@@ -56,1 +56,58 @@\n-            case \"prefers-color-scheme\" -> new FunctionExpression<>(\n+            \/\/ Discrete min-\/max-features are just features in a range context in disguise.\n+            case \"min-width\" -> rangeQueryExpression(SizeQueryType.WIDTH, featureValue,\n+                                                     ComparisonOp.GREATER_OR_EQUAL.getExpressionSupplier());\n+\n+            case \"max-width\" -> rangeQueryExpression(SizeQueryType.WIDTH, featureValue,\n+                                                     ComparisonOp.LESS_OR_EQUAL.getExpressionSupplier());\n+\n+            case \"min-height\" -> rangeQueryExpression(SizeQueryType.HEIGHT, featureValue,\n+                                                      ComparisonOp.GREATER_OR_EQUAL.getExpressionSupplier());\n+\n+            case \"max-height\" -> rangeQueryExpression(SizeQueryType.HEIGHT, featureValue,\n+                                                      ComparisonOp.LESS_OR_EQUAL.getExpressionSupplier());\n+\n+            case \"min-aspect-ratio\" -> rangeQueryExpression(SizeQueryType.ASPECT_RATIO, featureValue,\n+                                                            ComparisonOp.GREATER_OR_EQUAL.getExpressionSupplier());\n+\n+            case \"max-aspect-ratio\" -> rangeQueryExpression(SizeQueryType.ASPECT_RATIO, featureValue,\n+                                                            ComparisonOp.LESS_OR_EQUAL.getExpressionSupplier());\n+\n+            \/\/ We have to account for range-based features used in a discrete context (e.g. \"width: 500px\").\n+            \/\/ This is unusual because in most cases these features will be evaluated in a range context, which\n+            \/\/ is handled in rangeQueryExpression().\n+            case \"width\",\n+                 \"height\",\n+                 \"aspect-ratio\" -> rangeQueryExpression(SizeQueryType.of(featureName),\n+                                                        featureValue, ComparisonOp.EQUAL.getExpressionSupplier());\n+\n+            \/\/ Portrait if height >= width, landscape otherwise.\n+            case \"orientation\" -> {\n+                boolean portrait = switch (checkNotNullValue(featureName, lowerCaseTextValue(featureValue))) {\n+                    case \"landscape\" -> false;\n+                    case \"portrait\" -> true;\n+                    default -> throw unknownValue(\"orientation\", featureValue);\n+                };\n+\n+                yield FunctionExpression.of(\n+                    featureName, featureValue,\n+                    context -> portrait\n+                        ? context.getWidth() <= context.getHeight()\n+                        : context.getWidth() > context.getHeight(),\n+                    true, ContextAwareness.VIEWPORT_SIZE);\n+            }\n+\n+            \/\/ We only support \"standalone\" and \"fullscreen\" display modes, not \"minimal-ui\" and \"browser\".\n+            case \"display-mode\" -> {\n+                boolean fullscreen = switch (checkNotNullValue(featureName, lowerCaseTextValue(featureValue))) {\n+                    case \"standalone\" -> false;\n+                    case \"fullscreen\" -> true;\n+                    default -> throw unknownValue(\"display-mode\", featureValue);\n+                };\n+\n+                yield FunctionExpression.of(\n+                    featureName, featureValue,\n+                    context -> context.isFullScreen() == fullscreen,\n+                    true, ContextAwareness.FULLSCREEN);\n+            }\n+\n+            case \"prefers-color-scheme\" -> FunctionExpression.of(\n@@ -58,1 +115,1 @@\n-                checkNotNullValue(featureName, featureValue),\n+                checkNotNullValue(featureName, lowerCaseTextValue(featureValue)),\n@@ -63,1 +120,1 @@\n-                featureName, featureValue, \"reduce\", MediaQueryContext::isReducedMotion);\n+                featureName, lowerCaseTextValue(featureValue), \"reduce\", MediaQueryContext::isReducedMotion);\n@@ -66,1 +123,1 @@\n-                featureName, featureValue, \"reduce\", MediaQueryContext::isReducedTransparency);\n+                featureName, lowerCaseTextValue(featureValue), \"reduce\", MediaQueryContext::isReducedTransparency);\n@@ -69,1 +126,1 @@\n-                featureName, featureValue, \"reduce\", MediaQueryContext::isReducedData);\n+                featureName, lowerCaseTextValue(featureValue), \"reduce\", MediaQueryContext::isReducedData);\n@@ -72,1 +129,1 @@\n-                featureName, featureValue, \"persistent\", MediaQueryContext::isPersistentScrollBars);\n+                featureName, lowerCaseTextValue(featureValue), \"persistent\", MediaQueryContext::isPersistentScrollBars);\n@@ -79,0 +136,49 @@\n+    \/**\n+     * Returns a {@code MediaQuery} that evaluates the specified feature in a range context.\n+     *\n+     * @param featureName the name of the media feature\n+     * @param featureValue the value of the media feature\n+     * @param comparison the comparison operator\n+     * @throws IllegalArgumentException if {@code featureName} or {@code featureValue} is invalid,\n+     *                                  or if {@code comparison} is {@code null}\n+     * @return the {@code MediaQuery}\n+     *\/\n+    public static MediaQuery rangeQueryExpression(String featureName,\n+                                                  String featureValue,\n+                                                  ComparisonOp comparison) {\n+        return rangeQueryExpression(SizeQueryType.of(lowerCaseTextValue(featureName)),\n+                                    featureValue, comparison.getExpressionSupplier());\n+    }\n+\n+    \/**\n+     * Returns a {@code MediaQuery} that evaluates the specified feature as an interval in a range context.\n+     *\n+     * @param featureName the name of the media feature\n+     * @param featureValue1 the first value of the media feature\n+     * @param featureValue2 the second value of the media feature\n+     * @param comparison1 the first comparison operator\n+     * @param comparison2 the second comparison operator\n+     * @throws IllegalArgumentException if {@code featureName}, {@code featureValue1}, or {@code featureValue2} is invalid,\n+     *                                  or if {@code comparison1} or {@code comparison2} is {@code null}\n+     * @return the {@code MediaQuery}\n+     *\/\n+    public static MediaQuery rangeQueryExpression(String featureName,\n+                                                  String featureValue1,\n+                                                  String featureValue2,\n+                                                  ComparisonOp comparison1,\n+                                                  ComparisonOp comparison2) {\n+        return ConjunctionExpression.of(\n+            rangeQueryExpression(featureName, featureValue1, comparison1.flipped()),\n+            rangeQueryExpression(featureName, featureValue2, comparison2));\n+    }\n+\n+    private static MediaQuery rangeQueryExpression(SizeQueryType featureType,\n+                                                   String featureValue,\n+                                                   RangeExpression.Supplier supplier) {\n+        Size size = lengthValue(\n+            featureType.getFeatureName(),\n+            checkNotNullValue(featureType.getFeatureName(), featureValue));\n+\n+        return supplier.rangeExpression(featureType, size);\n+    }\n+\n@@ -84,1 +190,1 @@\n-            return new FunctionExpression<>(featureName, featureValue, argument, false);\n+            return FunctionExpression.of(featureName, featureValue, argument, false);\n@@ -88,1 +194,1 @@\n-            return new FunctionExpression<>(featureName, featureValue, argument, true);\n+            return FunctionExpression.of(featureName, featureValue, argument, true);\n@@ -91,2 +197,1 @@\n-        throw new IllegalArgumentException(\n-            String.format(\"Unknown value <%s> for media feature <%s>\", featureValue, featureName));\n+        throw unknownValue(featureName, featureValue);\n@@ -95,1 +200,1 @@\n-    private static String checkNotNullValue(String featureName, String featureValue) {\n+    private static <T> T checkNotNullValue(String featureName, T featureValue) {\n@@ -108,2 +213,1 @@\n-            throw new IllegalArgumentException(\n-                String.format(\"Unknown value <%s> for media feature <%s>\", featureValue, featureName));\n+            throw unknownValue(featureName, featureValue);\n@@ -112,0 +216,39 @@\n+\n+    private static String lowerCaseTextValue(String text) {\n+        return text != null ? text.toLowerCase(Locale.ROOT).intern() : null;\n+    }\n+\n+    private static Size lengthValue(String featureName, String text) {\n+        int unitIndex = -1;\n+\n+        for (int i = 0; i < text.length(); i++) {\n+            if (!Character.isDigit(text.charAt(i))) {\n+                unitIndex = i;\n+                break;\n+            }\n+        }\n+\n+        if (unitIndex == -1) {\n+            return new Size(Double.parseDouble(text), SizeUnits.PX);\n+        }\n+\n+        double value = Double.parseDouble(text.substring(0, unitIndex));\n+\n+        return new Size(value, switch (text.substring(unitIndex).toLowerCase(Locale.ROOT)) {\n+            case \"px\" -> SizeUnits.PX;\n+            case \"em\" -> SizeUnits.EM;\n+            case \"ex\" -> SizeUnits.EX;\n+            case \"cm\" -> SizeUnits.CM;\n+            case \"mm\" -> SizeUnits.MM;\n+            case \"in\" -> SizeUnits.IN;\n+            case \"pt\" -> SizeUnits.PT;\n+            case \"pc\" -> SizeUnits.PC;\n+            default -> throw new IllegalArgumentException(\n+                String.format(\"Invalid value <%s> for media feature <%s>\", text, featureName));\n+        });\n+    }\n+\n+    private static RuntimeException unknownValue(String featureName, String featureValue) {\n+        return new IllegalArgumentException(\n+            String.format(\"Unknown value <%s> for media feature <%s>\", featureValue, featureName));\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/MediaFeatures.java","additions":163,"deletions":20,"binary":false,"changes":183,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import com.sun.javafx.css.media.expression.RangeExpression;\n+import java.util.Set;\n@@ -45,1 +47,10 @@\n-                NegationExpression {\n+                NegationExpression,\n+                RangeExpression {\n+\n+    \/**\n+     * Gets the context awareness flags of this media query, indicating which aspects of the\n+     * media query context are probed by the query.\n+     *\n+     * @return the context awareness flags\n+     *\/\n+    Set<ContextAwareness> getContextAwareness();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/MediaQuery.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+\n+\/**\n+ * A cache for {@link MediaQuery} instances that is used to deduplicate media queries. More specifically,\n+ * this cache ensures that only a single instance of any distinct media query exists at any point in time.\n+ * This cache holds weak references, ensuring that media queries that are no longer in use will be eligible\n+ * for garbage collection.\n+ *\/\n+public final class MediaQueryCache {\n+\n+    private MediaQueryCache() {}\n+\n+    private static final Map<MediaQuery, WeakReference<MediaQuery>> CACHE = new WeakHashMap<>();\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static synchronized <T extends MediaQuery> T getCachedMediaQuery(T query) {\n+        if (CACHE.get(query) instanceof WeakReference<MediaQuery> wref\n+                && wref.get() instanceof MediaQuery cachedQuery) {\n+            return (T)cachedQuery;\n+        }\n+\n+        CACHE.put(query, new WeakReference<>(query));\n+        return query;\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/MediaQueryCache.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -28,1 +28,1 @@\n-import com.sun.javafx.scene.ScenePreferences;\n+import com.sun.javafx.scene.SceneContext;\n@@ -35,1 +35,1 @@\n-public sealed interface MediaQueryContext permits ScenePreferences {\n+public sealed interface MediaQueryContext permits SceneContext {\n@@ -71,0 +71,36 @@\n+\n+    \/**\n+     * Provides the value for the {@code display-mode} media feature.\n+     *\n+     * @return {@code true} if the application is in full-screen mode\n+     *\/\n+    boolean isFullScreen();\n+\n+    \/**\n+     * Provides the value for the {@code width} media feature.\n+     *\n+     * @return the width\n+     *\/\n+    double getWidth();\n+\n+    \/**\n+     * Provides the value for the {@code height} media feature.\n+     *\n+     * @return the height\n+     *\/\n+    double getHeight();\n+\n+    \/**\n+     * Notifies the media query context that a query has been evaluated and provides its current value.\n+     * <p>\n+     * The context can then re-evaluate the query at its own discretion and compare the evaluated value with\n+     * the stored value to determine if it is necessary to re-apply CSS. This is an optimization to minimize\n+     * CSS invalidation. For example, range-based queries like \"width\" and \"height\" can change very often when\n+     * the scene is resized (but the evaluated value doesn't change often in a query like \"width < 500\").\n+     * If not for this optimization, we would have to speculatively re-apply CSS on every resize just to catch\n+     * the case when a range-based query changes its value.\n+     *\n+     * @param query the query\n+     * @param currentValue the query value\n+     *\/\n+    void notifyQueryEvaluated(MediaQuery query, boolean currentValue);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/MediaQueryContext.java","additions":38,"deletions":2,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -43,2 +43,0 @@\n- * <p>\n- * This parser implements the subset of the grammar that is required for JavaFX CSS.\n@@ -58,0 +56,12 @@\n+    private static final Predicate<Token> GREATER = token -> token.getType() == CssLexer.GREATER;\n+    private static final Predicate<Token> LESS = token -> token.getType() == CssLexer.LESS;\n+    private static final Predicate<Token> EQUALS = token -> token.getType() == CssLexer.EQUALS;\n+    private static final Predicate<Token> GREATER_LESS_EQUALS = token -> switch (token.getType()) {\n+        case CssLexer.GREATER, CssLexer.LESS, CssLexer.EQUALS -> true;\n+        default -> false;\n+    };\n+    private static final Predicate<Token> LENGTH = token -> switch (token.getType()) {\n+        case CssLexer.NUMBER, CssLexer.CM, CssLexer.EMS, CssLexer.EXS, CssLexer.IN, CssLexer.MM,\n+             CssLexer.PC, CssLexer.PT, CssLexer.PX -> true;\n+        default -> false;\n+    };\n@@ -106,1 +116,1 @@\n-                        expressions.add(new ConstantExpression(false));\n+                        expressions.add(ConstantExpression.of(false));\n@@ -135,1 +145,1 @@\n-            return mediaInParens != null ? new NegationExpression(mediaInParens) : null;\n+            return mediaInParens != null ? NegationExpression.of(mediaInParens) : null;\n@@ -208,1 +218,1 @@\n-     *     <media-in-parens> = ( <media-condition> ) | <media-feature>\n+     *     <media-in-parens> = ( <media-condition> ) | <discrete-media-feature> | <range-media-feature>\n@@ -215,1 +225,1 @@\n-        \/\/ <media-feature>\n+        \/\/ <discrete-media-feature>\n@@ -217,1 +227,6 @@\n-            return parseMediaFeature(tokens);\n+            return parseDiscreteMediaFeature(tokens);\n+        }\n+\n+        \/\/ <range-media-feature>\n+        if (tokens.matches(LPAREN, LENGTH) || tokens.matches(LPAREN, IDENT, GREATER_LESS_EQUALS)) {\n+            return parseRangeMediaFeature(tokens);\n@@ -237,1 +252,1 @@\n-     * Parses a {@code media-feature} production.\n+     * Parses a {@code discrete-media-feature} production.\n@@ -240,1 +255,1 @@\n-     *     <media-feature> = ( [ <mf-plain> | <mf-boolean> ] )\n+     *     <discrete-media-feature> = ( [ <mf-plain> | <mf-boolean> ] )\n@@ -248,1 +263,1 @@\n-    private MediaQuery parseMediaFeature(TokenStream tokens) {\n+    private MediaQuery parseDiscreteMediaFeature(TokenStream tokens) {\n@@ -273,1 +288,1 @@\n-            return MediaFeatures.featureQueryExpression(\n+            return MediaFeatures.discreteQueryExpression(\n@@ -282,0 +297,140 @@\n+    \/**\n+     * Parses a {@code range-media-feature} production.\n+     *\n+     * <pre>{@code\n+     *     <range-media-feature> = ( <mf-name> <mf-comparison> <mf-value>\n+     *                             | <mf-value> <mf-comparison> <mf-name>\n+     *                             | <mf-value> <mf-lt> <mf-name> <mf-lt> <mf-value>\n+     *                             | <mf-value> <mf-gt> <mf-name> <mf-gt> <mf-value> )\n+     *     <mf-name> = <ident>\n+     *     <mf-value> = <number> | <dimension>\n+     *     <mf-lt> = '<' '='?\n+     *     <mf-gt> = '>' '='?\n+     *     <mf-eq> = '='\n+     *     <mf-comparison> = <mf-lt> | <mf-gt> | <mf-eq>\n+     * }<\/pre>\n+     *\n+     * @param tokens the token stream\n+     * @return the expression\n+     *\/\n+    private MediaQuery parseRangeMediaFeature(TokenStream tokens) {\n+        class LocalMethods {\n+            \/**\n+             * Parses a {@code <mf-name> <mf-comparison> <mf-value>} production.\n+             *\/\n+            static MediaQuery parseNameFirst(TokenStream tokens, BiConsumer<Token, String> errorHandler) {\n+                Token featureName = tokens.consumeIf(IDENT);\n+                if (featureName == null) {\n+                    errorHandler.accept(tokens.consume(), \"Expected IDENT\");\n+                    return null;\n+                }\n+\n+                ComparisonOp operator = parseComparisonOp(tokens);\n+                if (operator == null) {\n+                    errorHandler.accept(tokens.consume(), \"Expected <comparison>\");\n+                    return null;\n+                }\n+\n+                Token featureValue = tokens.consumeIf(LENGTH);\n+                if (featureValue == null) {\n+                    errorHandler.accept(tokens.consume(), \"Expected <length>\");\n+                    return null;\n+                }\n+\n+                try {\n+                    return MediaFeatures.rangeQueryExpression(\n+                        featureName.getText(), featureValue.getText(), operator);\n+                } catch (IllegalArgumentException ex) {\n+                    errorHandler.accept(tokens.consume(), ex.getMessage());\n+                    return null;\n+                }\n+            }\n+\n+            \/**\n+             * Parses any of the following productions:\n+             *\n+             * <pre>{@code\n+             *     1. <mf-value> <mf-comparison> <mf-name>\n+             *     2. <mf-value> <mf-lt> <mf-name> <mf-lt> <mf-value>\n+             *     3. <mf-value> <mf-gt> <mf-name> <mf-gt> <mf-value>\n+             * }<\/pre>\n+             *\/\n+            static MediaQuery parseValueFirst(TokenStream tokens, BiConsumer<Token, String> errorHandler) {\n+                Token featureValue1 = tokens.consumeIf(LENGTH);\n+                if (featureValue1 == null) {\n+                    errorHandler.accept(tokens.consume(), \"Expected <length>\");\n+                    return null;\n+                }\n+\n+                ComparisonOp operator1 = parseComparisonOp(tokens);\n+                if (operator1 == null) {\n+                    errorHandler.accept(tokens.consume(), \"Expected <comparison>\");\n+                    return null;\n+                }\n+\n+                Token featureName = tokens.consumeIf(IDENT);\n+                if (featureName == null) {\n+                    errorHandler.accept(tokens.consume(), \"Expected IDENT\");\n+                    return null;\n+                }\n+\n+                \/\/ An interval query of the form X >= Y >= Z restricts the operators to the same \"direction\"\n+                \/\/ and excludes the equality operator. For example, if the first operator is LESS, the second\n+                \/\/ operator can only be LESS or LESS_OR_EQUAL.\n+                ComparisonOp operator2 = operator1 == ComparisonOp.EQUAL ? null : parseComparisonOp(tokens);\n+                if (operator2 == null || !operator2.isSameDirection(operator1)) {\n+                    return MediaFeatures.rangeQueryExpression(\n+                        featureName.getText(), featureValue1.getText(), operator1.flipped());\n+                }\n+\n+                Token featureValue2 = tokens.consumeIf(LENGTH);\n+                if (featureValue2 == null) {\n+                    errorHandler.accept(tokens.consume(), \"Expected <length>\");\n+                    return null;\n+                }\n+\n+                try {\n+                    return MediaFeatures.rangeQueryExpression(\n+                        featureName.getText(),\n+                        featureValue1.getText(), featureValue2.getText(),\n+                        operator1, operator2);\n+                } catch (IllegalArgumentException ex) {\n+                    errorHandler.accept(tokens.consume(), ex.getMessage());\n+                    return null;\n+                }\n+            }\n+\n+            static ComparisonOp parseComparisonOp(TokenStream tokens) {\n+                if (tokens.consumeIf(GREATER) != null) {\n+                    return tokens.consumeIf(EQUALS) != null\n+                        ? ComparisonOp.GREATER_OR_EQUAL\n+                        : ComparisonOp.GREATER;\n+                } else if (tokens.consumeIf(LESS) != null) {\n+                    return tokens.consumeIf(EQUALS) != null\n+                        ? ComparisonOp.LESS_OR_EQUAL\n+                        : ComparisonOp.LESS;\n+                } else if (tokens.consumeIf(EQUALS) != null) {\n+                    return ComparisonOp.EQUAL;\n+                } else {\n+                    return null;\n+                }\n+            }\n+        }\n+\n+        if (tokens.consumeIf(LPAREN) == null) {\n+            errorHandler.accept(tokens.consume(), \"Expected LPAREN\");\n+            return null;\n+        }\n+\n+        MediaQuery query = tokens.matches(LENGTH)\n+            ? LocalMethods.parseValueFirst(tokens, errorHandler)\n+            : LocalMethods.parseNameFirst(tokens, errorHandler);\n+\n+        if (query != null && tokens.consumeIf(RPAREN) == null) {\n+            errorHandler.accept(tokens.consume(), \"Expected RPAREN\");\n+            return null;\n+        }\n+\n+        return query;\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/MediaQueryParser.java","additions":166,"deletions":11,"binary":false,"changes":177,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import com.sun.javafx.css.media.expression.EqualExpression;\n@@ -31,0 +32,4 @@\n+import com.sun.javafx.css.media.expression.GreaterExpression;\n+import com.sun.javafx.css.media.expression.GreaterOrEqualExpression;\n+import com.sun.javafx.css.media.expression.LessExpression;\n+import com.sun.javafx.css.media.expression.LessOrEqualExpression;\n@@ -33,0 +38,3 @@\n+import com.sun.javafx.css.media.expression.RangeExpression;\n+import javafx.css.Size;\n+import javafx.css.SizeUnits;\n@@ -50,1 +58,6 @@\n-        NEGATION(5);\n+        NEGATION(5),\n+        EQUAL(6),\n+        GREATER(7),\n+        GREATER_OR_EQUAL(8),\n+        LESS(9),\n+        LESS_OR_EQUAL(10);\n@@ -59,0 +72,5 @@\n+                case EqualExpression _ -> EQUAL;\n+                case GreaterExpression _ -> GREATER;\n+                case GreaterOrEqualExpression _ -> GREATER_OR_EQUAL;\n+                case LessExpression _ -> LESS;\n+                case LessOrEqualExpression _ -> LESS_OR_EQUAL;\n@@ -91,1 +109,1 @@\n-                os.writeInt(stringStore.addString(expr.featureName()));\n+                os.writeInt(stringStore.addString(expr.getFeatureName()));\n@@ -93,2 +111,2 @@\n-                if (expr.featureValue() != null) {\n-                    os.writeInt(stringStore.addString(expr.featureValue()));\n+                if (expr.getFeatureValue() != null) {\n+                    os.writeInt(stringStore.addString(expr.getFeatureValue()));\n@@ -101,1 +119,1 @@\n-                writeBinary(expr.expression(), os, stringStore);\n+                writeBinary(expr.getExpression(), os, stringStore);\n@@ -104,2 +122,2 @@\n-                writeBinary(expr.left(), os, stringStore);\n-                writeBinary(expr.right(), os, stringStore);\n+                writeBinary(expr.getLeft(), os, stringStore);\n+                writeBinary(expr.getRight(), os, stringStore);\n@@ -109,2 +127,8 @@\n-                writeBinary(expr.left(), os, stringStore);\n-                writeBinary(expr.right(), os, stringStore);\n+                writeBinary(expr.getLeft(), os, stringStore);\n+                writeBinary(expr.getRight(), os, stringStore);\n+            }\n+\n+            case RangeExpression expr -> {\n+                os.writeInt(stringStore.addString(expr.getFeatureName()));\n+                os.writeDouble(expr.getFeatureValue().getValue());\n+                os.writeByte(expr.getFeatureValue().getUnits().ordinal());\n@@ -121,1 +145,1 @@\n-                yield MediaFeatures.featureQueryExpression(featureName, featureValue);\n+                yield MediaFeatures.discreteQueryExpression(featureName, featureValue);\n@@ -123,4 +147,9 @@\n-            case CONSTANT -> new ConstantExpression(is.readBoolean());\n-            case NEGATION -> new NegationExpression(readBinary(is, strings));\n-            case CONJUNCTION -> new ConjunctionExpression(readBinary(is, strings), readBinary(is, strings));\n-            case DISJUNCTION -> new DisjunctionExpression(readBinary(is, strings), readBinary(is, strings));\n+            case CONSTANT -> ConstantExpression.of(is.readBoolean());\n+            case NEGATION -> NegationExpression.of(readBinary(is, strings));\n+            case CONJUNCTION -> ConjunctionExpression.of(readBinary(is, strings), readBinary(is, strings));\n+            case DISJUNCTION -> DisjunctionExpression.of(readBinary(is, strings), readBinary(is, strings));\n+            case EQUAL -> EqualExpression.of(SizeQueryType.of(strings[is.readInt()]), readSize(is));\n+            case GREATER -> GreaterExpression.of(SizeQueryType.of(strings[is.readInt()]), readSize(is));\n+            case GREATER_OR_EQUAL -> GreaterOrEqualExpression.of(SizeQueryType.of(strings[is.readInt()]), readSize(is));\n+            case LESS -> LessExpression.of(SizeQueryType.of(strings[is.readInt()]), readSize(is));\n+            case LESS_OR_EQUAL -> LessOrEqualExpression.of(SizeQueryType.of(strings[is.readInt()]), readSize(is));\n@@ -129,0 +158,6 @@\n+\n+    private static final SizeUnits[] SIZE_UNITS = SizeUnits.values();\n+\n+    private static Size readSize(DataInputStream is) throws IOException {\n+        return new Size(is.readDouble(), SIZE_UNITS[is.readByte()]);\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/MediaQuerySerializer.java","additions":49,"deletions":14,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -84,1 +84,5 @@\n-            if (queries.get(i).evaluate(context)) {\n+            MediaQuery query = queries.get(i);\n+            boolean value = query.evaluate(context);\n+            context.notifyQueryEvaluated(query, value);\n+\n+            if (value) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/MediaRule.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media;\n+\n+public enum SizeQueryType {\n+\n+    WIDTH(\"width\", MediaQueryContext::getWidth),\n+    HEIGHT(\"height\", MediaQueryContext::getHeight),\n+    ASPECT_RATIO(\"aspect-ratio\", context -> context.getWidth() \/ context.getHeight());\n+\n+    SizeQueryType(String featureName, SizeSupplier supplier) {\n+        this.featureName = featureName;\n+        this.supplier = supplier;\n+    }\n+\n+    public static SizeQueryType of(String name) {\n+        for (SizeQueryType value : VALUES) {\n+            if (value.featureName.equals(name)) {\n+                return value;\n+            }\n+        }\n+\n+        throw new IllegalArgumentException(String.format(\"Unknown media feature <%s>\", name));\n+    }\n+\n+    private final String featureName;\n+    private final SizeSupplier supplier;\n+\n+    public String getFeatureName() {\n+        return featureName;\n+    }\n+\n+    public SizeSupplier getSupplier() {\n+        return supplier;\n+    }\n+\n+    private static final SizeQueryType[] VALUES = values();\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/SizeQueryType.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media;\n+\n+public interface SizeSupplier {\n+\n+    double get(MediaQueryContext context);\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/SizeSupplier.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.css.media.ContextAwareness;\n@@ -29,0 +30,1 @@\n+import com.sun.javafx.css.media.MediaQueryCache;\n@@ -32,0 +34,1 @@\n+import java.util.Set;\n@@ -36,1 +39,1 @@\n-public record ConjunctionExpression(MediaQuery left, MediaQuery right) implements MediaQuery {\n+public final class ConjunctionExpression implements MediaQuery {\n@@ -38,3 +41,15 @@\n-    public ConjunctionExpression {\n-        Objects.requireNonNull(left, \"left cannot be null\");\n-        Objects.requireNonNull(right, \"right cannot be null\");\n+    private final MediaQuery left;\n+    private final MediaQuery right;\n+    private final Set<ContextAwareness> contextAwareness;\n+\n+    private ConjunctionExpression(MediaQuery left, MediaQuery right) {\n+        this.left = Objects.requireNonNull(left, \"left cannot be null\");\n+        this.right = Objects.requireNonNull(right, \"right cannot be null\");\n+        this.contextAwareness = ContextAwareness.combine(left.getContextAwareness(), right.getContextAwareness());\n+    }\n+\n+    \/**\n+     * Returns the conjunction of the specified expressions.\n+     *\/\n+    public static ConjunctionExpression of(MediaQuery left, MediaQuery right) {\n+        return MediaQueryCache.getCachedMediaQuery(new ConjunctionExpression(left, right));\n@@ -51,1 +66,1 @@\n-        var result = new ConjunctionExpression(expressions.get(0), expressions.get(1));\n+        var result = of(expressions.get(0), expressions.get(1));\n@@ -54,1 +69,1 @@\n-            result = new ConjunctionExpression(result, expressions.get(i));\n+            result = of(result, expressions.get(i));\n@@ -60,0 +75,25 @@\n+    public MediaQuery getLeft() {\n+        return left;\n+    }\n+\n+    public MediaQuery getRight() {\n+        return right;\n+    }\n+\n+    @Override\n+    public Set<ContextAwareness> getContextAwareness() {\n+        return contextAwareness;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        return obj instanceof ConjunctionExpression other\n+            && left.equals(other.left)\n+            && right.equals(other.right);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(ConjunctionExpression.class, left, right);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/expression\/ConjunctionExpression.java","additions":46,"deletions":6,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.css.media.ContextAwareness;\n@@ -29,0 +30,1 @@\n+import com.sun.javafx.css.media.MediaQueryCache;\n@@ -30,0 +32,3 @@\n+import java.util.EnumSet;\n+import java.util.Objects;\n+import java.util.Set;\n@@ -34,1 +39,22 @@\n-public record ConstantExpression(boolean value) implements MediaQuery {\n+public final class ConstantExpression implements MediaQuery {\n+\n+    private static final Set<ContextAwareness> NONE = EnumSet.noneOf(ContextAwareness.class);\n+\n+    private final boolean value;\n+\n+    private ConstantExpression(boolean value) {\n+        this.value = value;\n+    }\n+\n+    public static ConstantExpression of(boolean value) {\n+        return MediaQueryCache.getCachedMediaQuery(new ConstantExpression(value));\n+    }\n+\n+    public boolean value() {\n+        return value;\n+    }\n+\n+    @Override\n+    public Set<ContextAwareness> getContextAwareness() {\n+        return NONE;\n+    }\n@@ -41,0 +67,10 @@\n+    @Override\n+    public boolean equals(Object obj) {\n+        return obj instanceof ConstantExpression other && value == other.value ;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(ConstantExpression.class, value);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/expression\/ConstantExpression.java","additions":37,"deletions":1,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.css.media.ContextAwareness;\n@@ -29,0 +30,1 @@\n+import com.sun.javafx.css.media.MediaQueryCache;\n@@ -32,0 +34,1 @@\n+import java.util.Set;\n@@ -36,1 +39,1 @@\n-public record DisjunctionExpression(MediaQuery left, MediaQuery right) implements MediaQuery {\n+public final class DisjunctionExpression implements MediaQuery {\n@@ -38,3 +41,15 @@\n-    public DisjunctionExpression {\n-        Objects.requireNonNull(left, \"left cannot be null\");\n-        Objects.requireNonNull(right, \"right cannot be null\");\n+    private final MediaQuery left;\n+    private final MediaQuery right;\n+    private final Set<ContextAwareness> contextAwareness;\n+\n+    private DisjunctionExpression(MediaQuery left, MediaQuery right) {\n+        this.left = Objects.requireNonNull(left, \"left cannot be null\");\n+        this.right = Objects.requireNonNull(right, \"right cannot be null\");\n+        this.contextAwareness = ContextAwareness.combine(left.getContextAwareness(), right.getContextAwareness());\n+    }\n+\n+    \/**\n+     * Returns the disjunction of the specified expressions.\n+     *\/\n+    public static DisjunctionExpression of(MediaQuery left, MediaQuery right) {\n+        return MediaQueryCache.getCachedMediaQuery(new DisjunctionExpression(left, right));\n@@ -51,1 +66,1 @@\n-        var result = new DisjunctionExpression(expressions.get(0), expressions.get(1));\n+        var result = of(expressions.get(0), expressions.get(1));\n@@ -54,1 +69,1 @@\n-            result = new DisjunctionExpression(result, expressions.get(i));\n+            result = of(result, expressions.get(i));\n@@ -60,0 +75,25 @@\n+    public MediaQuery getLeft() {\n+        return left;\n+    }\n+\n+    public MediaQuery getRight() {\n+        return right;\n+    }\n+\n+    @Override\n+    public Set<ContextAwareness> getContextAwareness() {\n+        return contextAwareness;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        return obj instanceof DisjunctionExpression other\n+            && left.equals(other.left)\n+            && right.equals(other.right);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(DisjunctionExpression.class, left, right);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/expression\/DisjunctionExpression.java","additions":46,"deletions":6,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media.expression;\n+\n+import com.sun.javafx.css.media.MediaQueryCache;\n+import com.sun.javafx.css.media.SizeQueryType;\n+import com.sun.javafx.css.media.MediaQueryContext;\n+import javafx.css.Size;\n+\n+\/**\n+ * Evaluates whether a media feature is equal to a specified value.\n+ *\/\n+public final class EqualExpression extends RangeExpression {\n+\n+    private EqualExpression(SizeQueryType featureType, Size featureValue) {\n+        super(featureType, featureValue);\n+    }\n+\n+    public static EqualExpression of(SizeQueryType featureType, Size featureValue) {\n+        return MediaQueryCache.getCachedMediaQuery(new EqualExpression(featureType, featureValue));\n+    }\n+\n+    @Override\n+    public boolean evaluate(MediaQueryContext context) {\n+        return getFeatureType().getSupplier().get(context) == getFeatureValue().pixels();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\" + getFeatureName() + \" = \" + getFeatureValue() + \")\";\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/expression\/EqualExpression.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.css.media.ContextAwareness;\n@@ -29,0 +30,1 @@\n+import com.sun.javafx.css.media.MediaQueryCache;\n@@ -31,0 +33,1 @@\n+import java.util.Set;\n@@ -35,5 +38,0 @@\n- *\n- * @param featureName the feature name\n- * @param featureValue the feature value, or {@code null} to indicate a boolean context\n- * @param function the evaluation function\n- * @param value the expected return value of the function\n@@ -41,4 +39,37 @@\n-public record FunctionExpression<T>(String featureName,\n-                                    String featureValue,\n-                                    Function<MediaQueryContext, T> function,\n-                                    T value) implements MediaQuery {\n+public final class FunctionExpression<T> implements MediaQuery {\n+\n+    private final String featureName;\n+    private final String featureValue;\n+    private final Function<MediaQueryContext, T> function;\n+    private final Set<ContextAwareness> contextAwareness;\n+    private final T value;\n+\n+    private FunctionExpression(String featureName,\n+                               String featureValue,\n+                               Function<MediaQueryContext, T> function,\n+                               T value,\n+                               ContextAwareness... contextAwareness) {\n+        this.featureName = Objects.requireNonNull(featureName, \"featureName cannot be null\");\n+        this.featureValue = featureValue;\n+        this.function = Objects.requireNonNull(function, \"function cannot be null\");\n+        this.contextAwareness = ContextAwareness.of(contextAwareness);\n+        this.value = value;\n+    }\n+\n+    \/**\n+     * Returns an interned {@code FunctionExpression}.\n+     *\n+     * @param featureName the feature name\n+     * @param featureValue the feature value, or {@code null} to indicate a boolean context\n+     * @param function the evaluation function\n+     * @param value the expected return value of the function+\n+     * @param contextAwareness the context awareness of the function, see {@link MediaQuery#getContextAwareness()}\n+     *\/\n+    public static <T> FunctionExpression<T> of(String featureName,\n+                                               String featureValue,\n+                                               Function<MediaQueryContext, T> function,\n+                                               T value,\n+                                               ContextAwareness... contextAwareness) {\n+        return MediaQueryCache.getCachedMediaQuery(\n+            new FunctionExpression<>(featureName, featureValue, function, value, contextAwareness));\n+    }\n@@ -46,3 +77,11 @@\n-    public FunctionExpression {\n-        Objects.requireNonNull(featureName, \"featureName cannot be null\");\n-        Objects.requireNonNull(function, \"function cannot be null\");\n+    public String getFeatureName() {\n+        return featureName;\n+    }\n+\n+    public String getFeatureValue() {\n+        return featureValue;\n+    }\n+\n+    @Override\n+    public Set<ContextAwareness> getContextAwareness() {\n+        return contextAwareness;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/expression\/FunctionExpression.java","additions":51,"deletions":12,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media.expression;\n+\n+import com.sun.javafx.css.media.MediaQueryCache;\n+import com.sun.javafx.css.media.SizeQueryType;\n+import com.sun.javafx.css.media.MediaQueryContext;\n+import javafx.css.Size;\n+\n+\/**\n+ * Evaluates whether a media feature is greater than a specified value.\n+ *\/\n+public final class GreaterExpression extends RangeExpression {\n+\n+    private GreaterExpression(SizeQueryType featureType, Size featureValue) {\n+        super(featureType, featureValue);\n+    }\n+\n+    public static GreaterExpression of(SizeQueryType featureType, Size featureValue) {\n+        return MediaQueryCache.getCachedMediaQuery(new GreaterExpression(featureType, featureValue));\n+    }\n+\n+    @Override\n+    public boolean evaluate(MediaQueryContext context) {\n+        return getFeatureType().getSupplier().get(context) > getFeatureValue().pixels();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\" + getFeatureName() + \" > \" + getFeatureValue() + \")\";\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/expression\/GreaterExpression.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media.expression;\n+\n+import com.sun.javafx.css.media.MediaQueryCache;\n+import com.sun.javafx.css.media.SizeQueryType;\n+import com.sun.javafx.css.media.MediaQueryContext;\n+import javafx.css.Size;\n+\n+\/**\n+ * Evaluates whether a media feature is greater than or equal to a specified value.\n+ *\/\n+public final class GreaterOrEqualExpression extends RangeExpression {\n+\n+    private GreaterOrEqualExpression(SizeQueryType featureType, Size featureValue) {\n+        super(featureType, featureValue);\n+    }\n+\n+    public static GreaterOrEqualExpression of(SizeQueryType featureType, Size featureValue) {\n+        return MediaQueryCache.getCachedMediaQuery(new GreaterOrEqualExpression(featureType, featureValue));\n+    }\n+\n+    @Override\n+    public boolean evaluate(MediaQueryContext context) {\n+        return getFeatureType().getSupplier().get(context) >= getFeatureValue().pixels();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\" + getFeatureName() + \" >= \" + getFeatureValue() + \")\";\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/expression\/GreaterOrEqualExpression.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media.expression;\n+\n+import com.sun.javafx.css.media.MediaQueryCache;\n+import com.sun.javafx.css.media.SizeQueryType;\n+import com.sun.javafx.css.media.MediaQueryContext;\n+import javafx.css.Size;\n+\n+\/**\n+ * Evaluates whether a media feature is less than a specified value.\n+ *\/\n+public final class LessExpression extends RangeExpression {\n+\n+    private LessExpression(SizeQueryType featureType, Size featureValue) {\n+        super(featureType, featureValue);\n+    }\n+\n+    public static LessExpression of(SizeQueryType featureType, Size featureValue) {\n+        return MediaQueryCache.getCachedMediaQuery(new LessExpression(featureType, featureValue));\n+    }\n+\n+    @Override\n+    public boolean evaluate(MediaQueryContext context) {\n+        return getFeatureType().getSupplier().get(context) < getFeatureValue().pixels();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\" + getFeatureName() + \" < \" + getFeatureValue() + \")\";\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/expression\/LessExpression.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media.expression;\n+\n+import com.sun.javafx.css.media.MediaQueryCache;\n+import com.sun.javafx.css.media.SizeQueryType;\n+import com.sun.javafx.css.media.MediaQueryContext;\n+import javafx.css.Size;\n+\n+\/**\n+ * Evaluates whether a media feature is less than or equal to a specified value.\n+ *\/\n+public final class LessOrEqualExpression extends RangeExpression {\n+\n+    private LessOrEqualExpression(SizeQueryType featureType, Size featureValue) {\n+        super(featureType, featureValue);\n+    }\n+\n+    public static LessOrEqualExpression of(SizeQueryType featureType, Size featureValue) {\n+        return MediaQueryCache.getCachedMediaQuery(new LessOrEqualExpression(featureType, featureValue));\n+    }\n+\n+    @Override\n+    public boolean evaluate(MediaQueryContext context) {\n+        return getFeatureType().getSupplier().get(context) <= getFeatureValue().pixels();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"(\" + getFeatureName() + \" <= \" + getFeatureValue() + \")\";\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/expression\/LessOrEqualExpression.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.css.media.ContextAwareness;\n@@ -29,0 +30,1 @@\n+import com.sun.javafx.css.media.MediaQueryCache;\n@@ -31,0 +33,1 @@\n+import java.util.Set;\n@@ -35,1 +38,1 @@\n-public record NegationExpression(MediaQuery expression) implements MediaQuery {\n+public final class NegationExpression implements MediaQuery {\n@@ -37,2 +40,29 @@\n-    public NegationExpression {\n-        Objects.requireNonNull(expression, \"expression cannot be null\");\n+    private final MediaQuery expression;\n+    private final Set<ContextAwareness> contextAwareness;\n+\n+    private NegationExpression(MediaQuery expression) {\n+        this.expression = Objects.requireNonNull(expression, \"expression cannot be null\");\n+        this.contextAwareness = expression.getContextAwareness();\n+    }\n+\n+    public static NegationExpression of(MediaQuery expression) {\n+        return MediaQueryCache.getCachedMediaQuery(new NegationExpression(expression));\n+    }\n+\n+    public MediaQuery getExpression() {\n+        return expression;\n+    }\n+\n+    @Override\n+    public Set<ContextAwareness> getContextAwareness() {\n+        return contextAwareness;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        return obj instanceof NegationExpression other && expression.equals(other.expression) ;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(NegationExpression.class, expression);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/expression\/NegationExpression.java","additions":33,"deletions":3,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.css.media.expression;\n+\n+import com.sun.javafx.css.media.ContextAwareness;\n+import com.sun.javafx.css.media.MediaQuery;\n+import com.sun.javafx.css.media.SizeQueryType;\n+import javafx.css.Size;\n+import java.util.EnumSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+\/**\n+ * Base class for expressions that are evaluated in a range context.\n+ *\/\n+public sealed abstract class RangeExpression implements MediaQuery\n+        permits EqualExpression,\n+                GreaterExpression,\n+                GreaterOrEqualExpression,\n+                LessExpression,\n+                LessOrEqualExpression {\n+\n+    private static final Set<ContextAwareness> VIEWPORT_SIZE = EnumSet.of(ContextAwareness.VIEWPORT_SIZE);\n+\n+    private final SizeQueryType featureType;\n+    private final Size featureValue;\n+\n+    RangeExpression(SizeQueryType featureType, Size featureValue) {\n+        this.featureType = Objects.requireNonNull(featureType, \"featureType cannot be null\");\n+        this.featureValue = Objects.requireNonNull(featureValue, \"featureValue cannot be null\");\n+    }\n+\n+    public final SizeQueryType getFeatureType() {\n+        return featureType;\n+    }\n+\n+    public final String getFeatureName() {\n+        return featureType.getFeatureName();\n+    }\n+\n+    public final Size getFeatureValue() {\n+        return featureValue;\n+    }\n+\n+    @Override\n+    public Set<ContextAwareness> getContextAwareness() {\n+        return VIEWPORT_SIZE;\n+    }\n+\n+    @Override\n+    public final boolean equals(Object obj) {\n+        if (obj == null || getClass() != obj.getClass()) {\n+            return false;\n+        }\n+\n+        RangeExpression other = (RangeExpression)obj;\n+        return other.featureType == featureType\n+            && other.featureValue.equals(featureValue);\n+    }\n+\n+    @Override\n+    public final int hashCode() {\n+        return Objects.hash(getClass(), featureType, featureValue);\n+    }\n+\n+    public interface Supplier {\n+        RangeExpression rangeExpression(SizeQueryType featureType, Size featureValue);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/media\/expression\/RangeExpression.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -52,0 +52,2 @@\n+    public static final int LESS = 48;\n+    public static final int EQUALS = 49;\n@@ -873,1 +875,0 @@\n-\n@@ -878,0 +879,10 @@\n+                    case '<':\n+                        token = new Token(LESS,\"<\", line, offset);\n+                        offset = pos;\n+                        break;\n+\n+                    case '=':\n+                        token = new Token(EQUALS,\"=\", line, offset);\n+                        offset = pos;\n+                        break;\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/parser\/CssLexer.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -286,0 +286,4 @@\n+    public static void scheduleReapplyCSS(Node node) {\n+        nodeAccessor.scheduleReapplyCSS(node);\n+    }\n+\n@@ -402,0 +406,1 @@\n+        void scheduleReapplyCSS(Node node);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/NodeHelper.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,270 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.scene;\n+\n+import com.sun.javafx.application.PlatformImpl;\n+import com.sun.javafx.beans.property.NullCoalescingPropertyBase;\n+import com.sun.javafx.css.media.ContextAwareness;\n+import com.sun.javafx.css.media.MediaQuery;\n+import com.sun.javafx.css.media.MediaQueryContext;\n+import com.sun.javafx.css.media.MediaRule;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import javafx.application.ColorScheme;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.value.ObservableValue;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.stage.Stage;\n+import javafx.stage.Window;\n+\n+public final class SceneContext implements Scene.Preferences, MediaQueryContext {\n+\n+    private final Scene scene;\n+\n+    \/**\n+     * All media queries are interned, such that only a single instance exists for each distinct\n+     * media query. This allows us to use an IdentityHashMap instead of a regular HashMap, saving\n+     * us deep equality comparisons on a hot path.\n+     *\/\n+    private final Map<MediaQuery, Boolean> viewportSizeAwareQueries = new IdentityHashMap<>();\n+    private final Map<MediaQuery, Boolean> fullScreenAwareQueries = new IdentityHashMap<>();\n+\n+    public SceneContext(Scene scene) {\n+        this.scene = scene;\n+\n+        scene.windowProperty()\n+            .flatMap(Window::showingProperty)\n+            .orElse(false)\n+            .subscribe(this::onShowingChanged);\n+\n+        scene.windowProperty()\n+            .map(w -> w instanceof Stage stage ? stage : null)\n+            .flatMap(Stage::fullScreenProperty)\n+            .subscribe(this::onFullScreenChanged);\n+    }\n+\n+    \/**\n+     * Called by {@link Node} when CSS is reapplied for the root node.\n+     *\/\n+    public void notifyReapplyCSS() {\n+        \/\/ Clear the registered context-aware queries, as they will be re-registered on the next CSS pass\n+        \/\/ if they are evaluated (i.e. at least one selector that depends on the media query matches).\n+        viewportSizeAwareQueries.clear();\n+        fullScreenAwareQueries.clear();\n+    }\n+\n+    \/**\n+     * Called by {@link Scene} when its size has changed.\n+     *\/\n+    public void notifySizeChanged() {\n+        \/\/ We evaluate all queries that we know could potentially change when the scene size has changed.\n+        boolean changed = viewportSizeAwareQueries.entrySet().stream()\n+            .anyMatch(entry -> entry.getKey().evaluate(this) != entry.getValue());\n+\n+        if (changed && scene.getRoot() instanceof Node root) {\n+            NodeHelper.scheduleReapplyCSS(root);\n+        }\n+    }\n+\n+    \/**\n+     * Called by {@link MediaRule} when a media query has been evaluated.\n+     *\/\n+    @Override\n+    public void notifyQueryEvaluated(MediaQuery query, boolean currentValue) {\n+        Set<ContextAwareness> contextAwareness = query.getContextAwareness();\n+        if (contextAwareness.isEmpty()) {\n+            return;\n+        }\n+\n+        if (contextAwareness.contains(ContextAwareness.VIEWPORT_SIZE)) {\n+            viewportSizeAwareQueries.put(query, currentValue);\n+        }\n+\n+        if (contextAwareness.contains(ContextAwareness.FULLSCREEN)) {\n+            fullScreenAwareQueries.put(query, currentValue);\n+        }\n+    }\n+\n+    @Override\n+    public double getWidth() {\n+        return scene.getWidth();\n+    }\n+\n+    @Override\n+    public double getHeight() {\n+        return scene.getHeight();\n+    }\n+\n+    @Override\n+    public boolean isFullScreen() {\n+        return scene.getWindow() instanceof Stage stage && stage.isFullScreen();\n+    }\n+\n+    private final MediaProperty<ColorScheme> colorScheme = new MediaProperty<>(\n+            \"colorScheme\", PlatformImpl.getPlatformPreferences().colorSchemeProperty());\n+\n+    @Override\n+    public ObjectProperty<ColorScheme> colorSchemeProperty() {\n+        return colorScheme;\n+    }\n+\n+    @Override\n+    public ColorScheme getColorScheme() {\n+        return colorScheme.get();\n+    }\n+\n+    @Override\n+    public void setColorScheme(ColorScheme colorScheme) {\n+        this.colorScheme.set(colorScheme);\n+    }\n+\n+    private final MediaProperty<Boolean> persistentScrollBars = new MediaProperty<>(\n+            \"persistentScrollBars\", PlatformImpl.getPlatformPreferences().persistentScrollBarsProperty());\n+\n+    @Override\n+    public ObjectProperty<Boolean> persistentScrollBarsProperty() {\n+        return persistentScrollBars;\n+    }\n+\n+    @Override\n+    public boolean isPersistentScrollBars() {\n+        return persistentScrollBars.get();\n+    }\n+\n+    @Override\n+    public void setPersistentScrollBars(Boolean value) {\n+        this.persistentScrollBars.set(value);\n+    }\n+\n+    private final MediaProperty<Boolean> reducedMotion = new MediaProperty<>(\n+            \"reducedMotion\", PlatformImpl.getPlatformPreferences().reducedMotionProperty());\n+\n+    @Override\n+    public ObjectProperty<Boolean> reducedMotionProperty() {\n+        return reducedMotion;\n+    }\n+\n+    @Override\n+    public boolean isReducedMotion() {\n+        return reducedMotion.get();\n+    }\n+\n+    @Override\n+    public void setReducedMotion(Boolean value) {\n+        this.reducedMotion.set(value);\n+    }\n+\n+    private final MediaProperty<Boolean> reducedTransparency = new MediaProperty<>(\n+            \"reducedTransparency\", PlatformImpl.getPlatformPreferences().reducedTransparencyProperty());\n+\n+    @Override\n+    public ObjectProperty<Boolean> reducedTransparencyProperty() {\n+        return reducedTransparency;\n+    }\n+\n+    @Override\n+    public boolean isReducedTransparency() {\n+        return reducedTransparency.get();\n+    }\n+\n+    @Override\n+    public void setReducedTransparency(Boolean value) {\n+        this.reducedTransparency.set(value);\n+    }\n+\n+    private final MediaProperty<Boolean> reducedData = new MediaProperty<>(\n+            \"reducedData\", PlatformImpl.getPlatformPreferences().reducedDataProperty());\n+\n+    @Override\n+    public ObjectProperty<Boolean> reducedDataProperty() {\n+        return reducedData;\n+    }\n+\n+    @Override\n+    public boolean isReducedData() {\n+        return reducedData.get();\n+    }\n+\n+    @Override\n+    public void setReducedData(Boolean value) {\n+        this.reducedData.set(value);\n+    }\n+\n+    private void onShowingChanged(Boolean showing) {\n+        for (var property : List.of(colorScheme, persistentScrollBars, reducedData,\n+                                    reducedMotion, reducedTransparency)) {\n+            if (showing) {\n+                property.connect();\n+            } else {\n+                property.disconnect();\n+            }\n+        }\n+    }\n+\n+    private void onFullScreenChanged() {\n+        \/\/ We evaluate all queries that we know could potentially change when the full-screen state has changed.\n+        boolean changed = fullScreenAwareQueries.entrySet().stream()\n+            .anyMatch(entry -> entry.getKey().evaluate(this) != entry.getValue());\n+\n+        if (changed && scene.getRoot() instanceof Node root) {\n+            NodeHelper.scheduleReapplyCSS(root);\n+        }\n+    }\n+\n+    \/**\n+     * Property implementation for media features that causes CSS to be re-applied when the property\n+     * value is changed. This is required to re-evaluate media queries in stylesheets.\n+     *\/\n+    private class MediaProperty<T> extends NullCoalescingPropertyBase<T> {\n+        private final String name;\n+\n+        MediaProperty(String name, ObservableValue<T> defaultValue) {\n+            super(defaultValue);\n+            this.name = name;\n+        }\n+\n+        @Override\n+        public Object getBean() {\n+            return scene;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return name;\n+        }\n+\n+        @Override\n+        protected void onInvalidated() {\n+            Node root = scene.getRoot();\n+            if (root != null) {\n+                NodeHelper.scheduleReapplyCSS(root);\n+            }\n+        }\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/SceneContext.java","additions":270,"deletions":0,"binary":false,"changes":270,"status":"added"},{"patch":"@@ -113,0 +113,4 @@\n+    public static SceneContext getSceneContext(Scene scene) {\n+        return sceneAccessor.getSceneContext(scene);\n+    }\n+\n@@ -158,0 +162,2 @@\n+\n+        SceneContext getSceneContext(Scene scene);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/SceneHelper.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,183 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.javafx.scene;\n-\n-import com.sun.javafx.application.PlatformImpl;\n-import com.sun.javafx.beans.property.NullCoalescingPropertyBase;\n-import com.sun.javafx.css.media.MediaQueryContext;\n-import java.util.List;\n-import javafx.application.ColorScheme;\n-import javafx.beans.property.ObjectProperty;\n-import javafx.beans.value.ObservableValue;\n-import javafx.scene.Node;\n-import javafx.scene.Scene;\n-import javafx.stage.Window;\n-\n-public final class ScenePreferences implements Scene.Preferences, MediaQueryContext {\n-\n-    private final Scene scene;\n-\n-    public ScenePreferences(Scene scene) {\n-        this.scene = scene;\n-\n-        scene.windowProperty()\n-            .flatMap(Window::showingProperty)\n-            .orElse(false)\n-            .subscribe(this::onShowingChanged);\n-    }\n-\n-    private final MediaProperty<ColorScheme> colorScheme = new MediaProperty<>(\n-            \"colorScheme\", PlatformImpl.getPlatformPreferences().colorSchemeProperty());\n-\n-    @Override\n-    public ObjectProperty<ColorScheme> colorSchemeProperty() {\n-        return colorScheme;\n-    }\n-\n-    @Override\n-    public ColorScheme getColorScheme() {\n-        return colorScheme.get();\n-    }\n-\n-    @Override\n-    public void setColorScheme(ColorScheme colorScheme) {\n-        this.colorScheme.set(colorScheme);\n-    }\n-\n-    private final MediaProperty<Boolean> persistentScrollBars = new MediaProperty<>(\n-            \"persistentScrollBars\", PlatformImpl.getPlatformPreferences().persistentScrollBarsProperty());\n-\n-    @Override\n-    public ObjectProperty<Boolean> persistentScrollBarsProperty() {\n-        return persistentScrollBars;\n-    }\n-\n-    @Override\n-    public boolean isPersistentScrollBars() {\n-        return persistentScrollBars.get();\n-    }\n-\n-    @Override\n-    public void setPersistentScrollBars(Boolean value) {\n-        this.persistentScrollBars.set(value);\n-    }\n-\n-    private final MediaProperty<Boolean> reducedMotion = new MediaProperty<>(\n-            \"reducedMotion\", PlatformImpl.getPlatformPreferences().reducedMotionProperty());\n-\n-    @Override\n-    public ObjectProperty<Boolean> reducedMotionProperty() {\n-        return reducedMotion;\n-    }\n-\n-    @Override\n-    public boolean isReducedMotion() {\n-        return reducedMotion.get();\n-    }\n-\n-    @Override\n-    public void setReducedMotion(Boolean value) {\n-        this.reducedMotion.set(value);\n-    }\n-\n-    private final MediaProperty<Boolean> reducedTransparency = new MediaProperty<>(\n-            \"reducedTransparency\", PlatformImpl.getPlatformPreferences().reducedTransparencyProperty());\n-\n-    @Override\n-    public ObjectProperty<Boolean> reducedTransparencyProperty() {\n-        return reducedTransparency;\n-    }\n-\n-    @Override\n-    public boolean isReducedTransparency() {\n-        return reducedTransparency.get();\n-    }\n-\n-    @Override\n-    public void setReducedTransparency(Boolean value) {\n-        this.reducedTransparency.set(value);\n-    }\n-\n-    private final MediaProperty<Boolean> reducedData = new MediaProperty<>(\n-            \"reducedData\", PlatformImpl.getPlatformPreferences().reducedDataProperty());\n-\n-    @Override\n-    public ObjectProperty<Boolean> reducedDataProperty() {\n-        return reducedData;\n-    }\n-\n-    @Override\n-    public boolean isReducedData() {\n-        return reducedData.get();\n-    }\n-\n-    @Override\n-    public void setReducedData(Boolean value) {\n-        this.reducedData.set(value);\n-    }\n-\n-    private void onShowingChanged(Boolean showing) {\n-        for (var property : List.of(colorScheme, persistentScrollBars, reducedData,\n-                                    reducedMotion, reducedTransparency)) {\n-            if (showing) {\n-                property.connect();\n-            } else {\n-                property.disconnect();\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Property implementation for media features that causes CSS to be re-applied when the property\n-     * value is changed. This is required to re-evaluate media queries in stylesheets.\n-     *\/\n-    private class MediaProperty<T> extends NullCoalescingPropertyBase<T> {\n-        private final String name;\n-\n-        MediaProperty(String name, ObservableValue<T> defaultValue) {\n-            super(defaultValue);\n-            this.name = name;\n-        }\n-\n-        @Override\n-        public Object getBean() {\n-            return scene;\n-        }\n-\n-        @Override\n-        public String getName() {\n-            return name;\n-        }\n-\n-        @Override\n-        protected void onInvalidated() {\n-            Node root = scene.getRoot();\n-            if (root != null) {\n-                NodeHelper.reapplyCSS(root);\n-            }\n-        }\n-    }\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/ScenePreferences.java","additions":0,"deletions":183,"binary":false,"changes":183,"status":"deleted"},{"patch":"@@ -67,1 +67,2 @@\n-     * Version 7: media queries\n+     * Version 7: user-preference media queries\n+     * Version 8: viewport characteristics media queries\n@@ -69,1 +70,1 @@\n-    final static int BINARY_CSS_VERSION = 7;\n+    final static int BINARY_CSS_VERSION = 8;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/Stylesheet.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -614,0 +614,6 @@\n+            @Override\n+            public void scheduleReapplyCSS(Node node) {\n+                node.cssFlag = CssFlags.REAPPLY;\n+                Toolkit.getToolkit().requestNextPulse();\n+            }\n+\n@@ -9870,2 +9876,2 @@\n-\n-        if (getScene() == null) return;\n+        var scene = getScene();\n+        if (scene == null) return;\n@@ -9889,0 +9895,4 @@\n+        if (scene.getRoot() == this) {\n+            SceneHelper.getSceneContext(scene).notifyReapplyCSS();\n+        }\n+\n@@ -10108,0 +10118,4 @@\n+            if (getScene() instanceof Scene scene && scene.getRoot() == this) {\n+                SceneHelper.getSceneContext(scene).notifyReapplyCSS();\n+            }\n+\n@@ -10143,1 +10157,1 @@\n-        return scene != null ? scene.preferences : null;\n+        return scene != null ? SceneHelper.getSceneContext(scene) : null;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import com.sun.javafx.scene.ScenePreferences;\n+import com.sun.javafx.scene.SceneContext;\n@@ -37,1 +37,0 @@\n-import com.sun.javafx.css.media.MediaQueryContext;\n@@ -509,0 +508,5 @@\n+\n+                        @Override\n+                        public SceneContext getSceneContext(Scene scene) {\n+                            return scene.context;\n+                        }\n@@ -1823,0 +1827,1 @@\n+        context.notifySizeChanged();\n@@ -1863,0 +1868,1 @@\n+        context.notifySizeChanged();\n@@ -2768,2 +2774,5 @@\n-            if (w != Scene.this.getWidth()) Scene.this.setWidth(w);\n-            if (h != Scene.this.getHeight()) Scene.this.setHeight(h);\n+            boolean widthChanged = w != Scene.this.getWidth();\n+            boolean heightChanged = h != Scene.this.getHeight();\n+            if (widthChanged) Scene.this.setWidth(w);\n+            if (heightChanged) Scene.this.setHeight(h);\n+            if (widthChanged || heightChanged) Scene.this.context.notifySizeChanged();\n@@ -5710,1 +5719,1 @@\n-    final ScenePreferences preferences = new ScenePreferences(this);\n+    private final SceneContext context = new SceneContext(this);\n@@ -5719,1 +5728,1 @@\n-        return preferences;\n+        return context;\n@@ -5991,1 +6000,1 @@\n-    public sealed interface Preferences permits ScenePreferences {\n+    public sealed interface Preferences permits SceneContext {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Scene.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.css.media;\n+\n+import com.sun.javafx.css.media.MediaQuery;\n+import com.sun.javafx.css.media.SizeQueryType;\n+import com.sun.javafx.css.media.expression.ConjunctionExpression;\n+import com.sun.javafx.css.media.expression.ConstantExpression;\n+import com.sun.javafx.css.media.expression.DisjunctionExpression;\n+import com.sun.javafx.css.media.expression.EqualExpression;\n+import com.sun.javafx.css.media.expression.FunctionExpression;\n+import com.sun.javafx.css.media.expression.GreaterExpression;\n+import com.sun.javafx.css.media.expression.GreaterOrEqualExpression;\n+import com.sun.javafx.css.media.expression.LessExpression;\n+import com.sun.javafx.css.media.expression.LessOrEqualExpression;\n+import com.sun.javafx.css.media.expression.NegationExpression;\n+import java.util.function.Supplier;\n+import javafx.css.Size;\n+import javafx.css.SizeUnits;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class MediaQueryCacheTest {\n+\n+    enum MediaQueryDeduplicationTest {\n+        CONJUNCTION(() -> ConjunctionExpression.of(ConstantExpression.of(true), ConstantExpression.of(false))),\n+        DISJUNCTION(() -> DisjunctionExpression.of(ConstantExpression.of(true), ConstantExpression.of(false))),\n+        CONSTANT(() -> ConstantExpression.of(true)),\n+        FUNCTION(() -> FunctionExpression.of(\"test\", \"value\", _ -> 0, 0)),\n+        NEGATION(() -> NegationExpression.of(ConstantExpression.of(true))),\n+        GREATER(() -> GreaterExpression.of(SizeQueryType.WIDTH, new Size(1, SizeUnits.PX))),\n+        GREATER_OR_EQUAL(() -> GreaterOrEqualExpression.of(SizeQueryType.WIDTH, new Size(1, SizeUnits.PX))),\n+        LESS(() -> LessExpression.of(SizeQueryType.WIDTH, new Size(1, SizeUnits.PX))),\n+        LESS_OR_EQUAL(() -> LessOrEqualExpression.of(SizeQueryType.WIDTH, new Size(1, SizeUnits.PX))),\n+        EQUAL(() -> EqualExpression.of(SizeQueryType.WIDTH, new Size(1, SizeUnits.PX)));\n+\n+        MediaQueryDeduplicationTest(Supplier<MediaQuery> supplier) {\n+            this.supplier = supplier;\n+        }\n+\n+        final Supplier<MediaQuery> supplier;\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(MediaQueryDeduplicationTest.class)\n+    void equalMediaQueriesAreDeduplicated(MediaQueryDeduplicationTest test) {\n+        assertSame(test.supplier.get(), test.supplier.get());\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/media\/MediaQueryCacheTest.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+import com.sun.javafx.css.media.SizeQueryType;\n@@ -31,0 +32,1 @@\n+import com.sun.javafx.css.media.expression.EqualExpression;\n@@ -32,0 +34,4 @@\n+import com.sun.javafx.css.media.expression.GreaterExpression;\n+import com.sun.javafx.css.media.expression.GreaterOrEqualExpression;\n+import com.sun.javafx.css.media.expression.LessExpression;\n+import com.sun.javafx.css.media.expression.LessOrEqualExpression;\n@@ -35,0 +41,2 @@\n+import javafx.css.Size;\n+import javafx.css.SizeUnits;\n@@ -57,1 +65,1 @@\n-        var expected = new ConstantExpression(true);\n+        var expected = ConstantExpression.of(true);\n@@ -61,1 +69,1 @@\n-        expected = new ConstantExpression(false);\n+        expected = ConstantExpression.of(false);\n@@ -68,1 +76,1 @@\n-        var expected = new FunctionExpression<>(\"prefers-reduced-motion\", \"reduce\", _ -> null, true);\n+        var expected = FunctionExpression.of(\"prefers-reduced-motion\", \"reduce\", _ -> null, true);\n@@ -72,1 +80,1 @@\n-        expected = new FunctionExpression<>(\"prefers-reduced-motion\", null, _ -> null, true);\n+        expected = FunctionExpression.of(\"prefers-reduced-motion\", null, _ -> null, true);\n@@ -79,1 +87,1 @@\n-        var expected = new NegationExpression(new ConstantExpression(true));\n+        var expected = NegationExpression.of(ConstantExpression.of(true));\n@@ -86,1 +94,1 @@\n-        var expected = new ConjunctionExpression(new ConstantExpression(true), new ConstantExpression(false));\n+        var expected = ConjunctionExpression.of(ConstantExpression.of(true), ConstantExpression.of(false));\n@@ -93,1 +101,36 @@\n-        var expected = new DisjunctionExpression(new ConstantExpression(true), new ConstantExpression(false));\n+        var expected = DisjunctionExpression.of(ConstantExpression.of(true), ConstantExpression.of(false));\n+        var actual = deserialize(serialize(expected));\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void serializeGreaterOrEqualExpression() throws IOException {\n+        var expected = GreaterOrEqualExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX));\n+        var actual = deserialize(serialize(expected));\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void serializeGreaterExpression() throws IOException {\n+        var expected = GreaterExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX));\n+        var actual = deserialize(serialize(expected));\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void serializeLessOrEqualExpression() throws IOException {\n+        var expected = LessOrEqualExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX));\n+        var actual = deserialize(serialize(expected));\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void serializeLessExpression() throws IOException {\n+        var expected = LessExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX));\n+        var actual = deserialize(serialize(expected));\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void serializeEqualExpression() throws IOException {\n+        var expected = EqualExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX));\n@@ -100,4 +143,4 @@\n-        var expected = new ConjunctionExpression(\n-            new DisjunctionExpression(\n-                new FunctionExpression<>(\"prefers-reduced-motion\", \"reduce\", _ -> null, true),\n-                new FunctionExpression<>(\"prefers-reduced-transparency\", \"no-preference\", _ -> null, false)\n+        var expected = ConjunctionExpression.of(\n+            DisjunctionExpression.of(\n+                FunctionExpression.of(\"prefers-reduced-motion\", \"reduce\", _ -> null, true),\n+                FunctionExpression.of(\"prefers-reduced-transparency\", \"no-preference\", _ -> null, false)\n@@ -105,3 +148,3 @@\n-            new ConjunctionExpression(\n-                new NegationExpression(\n-                    new FunctionExpression<>(\"prefers-reduced-motion\", null, _ -> null, true)\n+            ConjunctionExpression.of(\n+                NegationExpression.of(\n+                    FunctionExpression.of(\"prefers-reduced-motion\", null, _ -> null, true)\n@@ -109,1 +152,1 @@\n-                new ConstantExpression(true)\n+                ConstantExpression.of(true)\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/media\/MediaQuerySerializerTest.java","additions":58,"deletions":15,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import com.sun.javafx.css.media.SizeQueryType;\n@@ -32,0 +33,1 @@\n+import com.sun.javafx.css.media.expression.EqualExpression;\n@@ -33,0 +35,4 @@\n+import com.sun.javafx.css.media.expression.GreaterExpression;\n+import com.sun.javafx.css.media.expression.GreaterOrEqualExpression;\n+import com.sun.javafx.css.media.expression.LessExpression;\n+import com.sun.javafx.css.media.expression.LessOrEqualExpression;\n@@ -36,0 +42,2 @@\n+import javafx.css.Size;\n+import javafx.css.SizeUnits;\n@@ -37,1 +45,0 @@\n-import org.junit.jupiter.api.Test;\n@@ -39,0 +46,1 @@\n+import org.junit.jupiter.api.Test;\n@@ -55,1 +63,1 @@\n-            new FunctionExpression<>(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT),\n+            FunctionExpression.of(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT),\n@@ -70,1 +78,1 @@\n-            new NegationExpression(new FunctionExpression<>(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT)),\n+            NegationExpression.of(FunctionExpression.of(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT)),\n@@ -90,1 +98,1 @@\n-            new FunctionExpression<>(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT),\n+            FunctionExpression.of(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT),\n@@ -93,1 +101,1 @@\n-            new FunctionExpression<>(\"prefers-reduced-motion\", \"reduce\", _ -> null, true),\n+            FunctionExpression.of(\"prefers-reduced-motion\", \"reduce\", _ -> null, true),\n@@ -110,3 +118,3 @@\n-                new FunctionExpression<>(\"prefers-color-scheme\", \"dark\", _ -> null, ColorScheme.DARK),\n-                new FunctionExpression<>(\"prefers-reduced-motion\", null, _ -> null, true),\n-                new FunctionExpression<>(\"prefers-reduced-transparency\", \"no-preference\", _ -> null, false)\n+                FunctionExpression.of(\"prefers-color-scheme\", \"dark\", _ -> null, ColorScheme.DARK),\n+                FunctionExpression.of(\"prefers-reduced-motion\", null, _ -> null, true),\n+                FunctionExpression.of(\"prefers-reduced-transparency\", \"no-preference\", _ -> null, false)\n@@ -128,3 +136,3 @@\n-            List.of(new ConjunctionExpression(\n-                new FunctionExpression<>(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT),\n-                new FunctionExpression<>(\"prefers-reduced-motion\", \"reduce\", _ -> null, true)\n+            List.of(ConjunctionExpression.of(\n+                FunctionExpression.of(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT),\n+                FunctionExpression.of(\"prefers-reduced-motion\", \"reduce\", _ -> null, true)\n@@ -148,5 +156,5 @@\n-            new ConjunctionExpression(\n-                new ConjunctionExpression(\n-                    new FunctionExpression<>(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT),\n-                    new FunctionExpression<>(\"prefers-reduced-motion\", \"reduce\", _ -> false, true)),\n-                new FunctionExpression<>(\"prefers-reduced-transparency\", \"no-preference\", _ -> false, false)\n+            ConjunctionExpression.of(\n+                ConjunctionExpression.of(\n+                    FunctionExpression.of(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT),\n+                    FunctionExpression.of(\"prefers-reduced-motion\", \"reduce\", _ -> false, true)),\n+                FunctionExpression.of(\"prefers-reduced-transparency\", \"no-preference\", _ -> false, false)\n@@ -169,3 +177,3 @@\n-            new DisjunctionExpression(\n-                new FunctionExpression<>(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT),\n-                new FunctionExpression<>(\"prefers-reduced-motion\", \"reduce\", _ -> null, true)\n+            DisjunctionExpression.of(\n+                FunctionExpression.of(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT),\n+                FunctionExpression.of(\"prefers-reduced-motion\", \"reduce\", _ -> null, true)\n@@ -189,5 +197,5 @@\n-            new DisjunctionExpression(\n-                new DisjunctionExpression(\n-                    new FunctionExpression<>(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT),\n-                    new FunctionExpression<>(\"prefers-reduced-motion\", \"reduce\", _ -> false, true)),\n-                new FunctionExpression<>(\"-fx-prefers-persistent-scrollbars\", \"persistent\", _ -> false, true)\n+            DisjunctionExpression.of(\n+                DisjunctionExpression.of(\n+                    FunctionExpression.of(\"prefers-color-scheme\", \"light\", _ -> null, ColorScheme.LIGHT),\n+                    FunctionExpression.of(\"prefers-reduced-motion\", \"reduce\", _ -> false, true)),\n+                FunctionExpression.of(\"-fx-prefers-persistent-scrollbars\", \"persistent\", _ -> false, true)\n@@ -211,1 +219,1 @@\n-        assertEquals(new ConstantExpression(false), mediaRule.getQueries().getFirst());\n+        assertEquals(ConstantExpression.of(false), mediaRule.getQueries().getFirst());\n@@ -225,1 +233,1 @@\n-            new FunctionExpression<>(\"prefers-reduced-motion\", null, _ -> null, true),\n+            FunctionExpression.of(\"prefers-reduced-motion\", null, _ -> null, true),\n@@ -240,1 +248,1 @@\n-            new FunctionExpression<>(\"prefers-reduced-transparency\", null, _ -> null, true),\n+            FunctionExpression.of(\"prefers-reduced-transparency\", null, _ -> null, true),\n@@ -255,1 +263,1 @@\n-            new FunctionExpression<>(\"-fx-prefers-persistent-scrollbars\", null, _ -> null, true),\n+            FunctionExpression.of(\"-fx-prefers-persistent-scrollbars\", null, _ -> null, true),\n@@ -281,1 +289,1 @@\n-        assertEquals(new ConstantExpression(false), mediaRule.getQueries().getFirst());\n+        assertEquals(ConstantExpression.of(false), mediaRule.getQueries().getFirst());\n@@ -290,0 +298,4 @@\n+\n+            @media (invalid-feature > 100px) {\n+                .foo { bar: baz; }\n+            }\n@@ -292,3 +304,7 @@\n-        var mediaRule = RuleHelper.getMediaRule(stylesheet.getRules().getFirst());\n-        assertEquals(1, mediaRule.getQueries().size());\n-        assertEquals(new ConstantExpression(false), mediaRule.getQueries().getFirst());\n+        var mediaRule1 = RuleHelper.getMediaRule(stylesheet.getRules().get(0));\n+        assertEquals(1, mediaRule1.getQueries().size());\n+        assertEquals(ConstantExpression.of(false), mediaRule1.getQueries().getFirst());\n+\n+        var mediaRule2 = RuleHelper.getMediaRule(stylesheet.getRules().get(1));\n+        assertEquals(1, mediaRule2.getQueries().size());\n+        assertEquals(ConstantExpression.of(false), mediaRule2.getQueries().getFirst());\n@@ -303,0 +319,4 @@\n+\n+            @media (width > invalid-value) {\n+                .foo { bar: baz; }\n+            }\n@@ -305,3 +325,7 @@\n-        var mediaRule = RuleHelper.getMediaRule(stylesheet.getRules().getFirst());\n-        assertEquals(1, mediaRule.getQueries().size());\n-        assertEquals(new ConstantExpression(false), mediaRule.getQueries().getFirst());\n+        var mediaRule1 = RuleHelper.getMediaRule(stylesheet.getRules().get(0));\n+        assertEquals(1, mediaRule1.getQueries().size());\n+        assertEquals(ConstantExpression.of(false), mediaRule1.getQueries().getFirst());\n+\n+        var mediaRule2 = RuleHelper.getMediaRule(stylesheet.getRules().get(1));\n+        assertEquals(1, mediaRule2.getQueries().size());\n+        assertEquals(ConstantExpression.of(false), mediaRule2.getQueries().getFirst());\n@@ -323,2 +347,2 @@\n-                new FunctionExpression<>(\"prefers-reduced-motion\", \"reduce\", _ -> null, true),\n-                new ConstantExpression(false) \/\/ the rest of the query is malformed and evaluates to false\n+                FunctionExpression.of(\"prefers-reduced-motion\", \"reduce\", _ -> null, true),\n+                ConstantExpression.of(false) \/\/ the rest of the query is malformed and evaluates to false\n@@ -339,1 +363,1 @@\n-        assertEquals(new ConstantExpression(false), mediaRule.getQueries().getFirst());\n+        assertEquals(ConstantExpression.of(false), mediaRule.getQueries().getFirst());\n@@ -353,2 +377,2 @@\n-                new ConstantExpression(false), \/\/ the malformed query evaluates to false\n-                new FunctionExpression<>(\"prefers-reduced-motion\", \"reduce\", _ -> null, true)\n+                ConstantExpression.of(false), \/\/ the malformed query evaluates to false\n+                FunctionExpression.of(\"prefers-reduced-motion\", \"reduce\", _ -> null, true)\n@@ -373,0 +397,197 @@\n+\n+    @Test\n+    void parseRangeForm_leadingValue() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (100px >= width) {\n+                .foo { bar: baz; }\n+            }\n+\n+            @media (100px > width) {\n+                .foo { bar: baz; }\n+            }\n+\n+            @media (100px <= width) {\n+                .foo { bar: baz; }\n+            }\n+\n+            @media (100px < width) {\n+                .foo { bar: baz; }\n+            }\n+\n+            @media (100px = width) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        assertEquals(5, stylesheet.getRules().size());\n+        assertEquals(\n+            List.of(LessOrEqualExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX))),\n+            RuleHelper.getMediaRule(stylesheet.getRules().get(0)).getQueries());\n+        assertEquals(\n+            List.of(LessExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX))),\n+            RuleHelper.getMediaRule(stylesheet.getRules().get(1)).getQueries());\n+        assertEquals(\n+            List.of(GreaterOrEqualExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX))),\n+            RuleHelper.getMediaRule(stylesheet.getRules().get(2)).getQueries());\n+        assertEquals(\n+            List.of(GreaterExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX))),\n+            RuleHelper.getMediaRule(stylesheet.getRules().get(3)).getQueries());\n+        assertEquals(\n+            List.of(EqualExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX))),\n+            RuleHelper.getMediaRule(stylesheet.getRules().get(4)).getQueries());\n+    }\n+\n+    @Test\n+    void parseRangeForm_trailingValue() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (width >= 100px) {\n+                .foo { bar: baz; }\n+            }\n+\n+            @media (width > 100px) {\n+                .foo { bar: baz; }\n+            }\n+\n+            @media (width <= 100px) {\n+                .foo { bar: baz; }\n+            }\n+\n+            @media (width < 100px) {\n+                .foo { bar: baz; }\n+            }\n+\n+            @media (width = 100px) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        assertEquals(5, stylesheet.getRules().size());\n+        assertEquals(\n+            List.of(GreaterOrEqualExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX))),\n+            RuleHelper.getMediaRule(stylesheet.getRules().get(0)).getQueries());\n+        assertEquals(\n+            List.of(GreaterExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX))),\n+            RuleHelper.getMediaRule(stylesheet.getRules().get(1)).getQueries());\n+        assertEquals(\n+            List.of(LessOrEqualExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX))),\n+            RuleHelper.getMediaRule(stylesheet.getRules().get(2)).getQueries());\n+        assertEquals(\n+            List.of(LessExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX))),\n+            RuleHelper.getMediaRule(stylesheet.getRules().get(3)).getQueries());\n+        assertEquals(\n+            List.of(EqualExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX))),\n+            RuleHelper.getMediaRule(stylesheet.getRules().get(4)).getQueries());\n+    }\n+\n+    @Test\n+    void parseRangeForm_interval() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (50px > width >= 100px) {\n+                .foo { bar: baz; }\n+            }\n+\n+            @media (50px >= width > 100px) {\n+                .foo { bar: baz; }\n+            }\n+\n+            @media (50px < width <= 100px) {\n+                .foo { bar: baz; }\n+            }\n+\n+            @media (50px <= width < 100px) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        assertEquals(4, stylesheet.getRules().size());\n+        assertEquals(\n+            List.of(ConjunctionExpression.of(\n+                LessExpression.of(SizeQueryType.WIDTH, new Size(50, SizeUnits.PX)),\n+                GreaterOrEqualExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX)))),\n+            RuleHelper.getMediaRule(stylesheet.getRules().get(0)).getQueries());\n+        assertEquals(\n+            List.of(ConjunctionExpression.of(\n+                LessOrEqualExpression.of(SizeQueryType.WIDTH, new Size(50, SizeUnits.PX)),\n+                GreaterExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX)))),\n+            RuleHelper.getMediaRule(stylesheet.getRules().get(1)).getQueries());\n+        assertEquals(\n+            List.of(ConjunctionExpression.of(\n+                GreaterExpression.of(SizeQueryType.WIDTH, new Size(50, SizeUnits.PX)),\n+                LessOrEqualExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX)))),\n+            RuleHelper.getMediaRule(stylesheet.getRules().get(2)).getQueries());\n+        assertEquals(\n+            List.of(ConjunctionExpression.of(\n+                GreaterOrEqualExpression.of(SizeQueryType.WIDTH, new Size(50, SizeUnits.PX)),\n+                LessExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX)))),\n+            RuleHelper.getMediaRule(stylesheet.getRules().get(3)).getQueries());\n+    }\n+\n+    @Test\n+    void parseRangeForm_invalidInterval() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (50px > width = 100px) {\n+                .foo { bar: baz; }\n+            }\n+\n+            @media (50px > width < 100px) {\n+                .foo { bar: baz; }\n+            }\n+\n+            @media (50px < width > 100px) {\n+                .foo { bar: baz; }\n+            }\n+\n+            @media (50px = width < 100px) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        assertEquals(4, stylesheet.getRules().size());\n+        assertEquals(\n+            List.of(ConstantExpression.of(false)), \/\/ error: interval has trailing '=' operator\n+            RuleHelper.getMediaRule(stylesheet.getRules().get(0)).getQueries());\n+        assertEquals(\n+            List.of(ConstantExpression.of(false)), \/\/ error: operators have different directions\n+            RuleHelper.getMediaRule(stylesheet.getRules().get(1)).getQueries());\n+        assertEquals(\n+            List.of(ConstantExpression.of(false)), \/\/ error: operators have different directions\n+            RuleHelper.getMediaRule(stylesheet.getRules().get(2)).getQueries());\n+        assertEquals(\n+            List.of(ConstantExpression.of(false)), \/\/ error: interval has leading '=' operator\n+            RuleHelper.getMediaRule(stylesheet.getRules().get(3)).getQueries());\n+    }\n+\n+    @Test\n+    void parseRangeForm_prefix() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (min-width: 100px) {\n+                .foo { bar: baz; }\n+            }\n+\n+            @media (max-width: 100px) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        assertEquals(2, stylesheet.getRules().size());\n+        assertEquals(\n+            List.of(GreaterOrEqualExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX))),\n+            RuleHelper.getMediaRule(stylesheet.getRules().get(0)).getQueries());\n+        assertEquals(\n+            List.of(LessOrEqualExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX))),\n+            RuleHelper.getMediaRule(stylesheet.getRules().get(1)).getQueries());\n+    }\n+\n+    @Test\n+    void parseRangeValue_asDiscrete() {\n+        Stylesheet stylesheet = new CssParser().parse(\"\"\"\n+            @media (width: 100px) {\n+                .foo { bar: baz; }\n+            }\n+            \"\"\");\n+\n+        assertEquals(1, stylesheet.getRules().size());\n+        assertEquals(\n+            List.of(EqualExpression.of(SizeQueryType.WIDTH, new Size(100, SizeUnits.PX))),\n+            RuleHelper.getMediaRule(stylesheet.getRules().getFirst()).getQueries());\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/CssParser_mediaQuery_Test.java","additions":261,"deletions":40,"binary":false,"changes":301,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import com.sun.javafx.css.media.MediaQuery;\n@@ -816,1 +817,1 @@\n-            new FunctionExpression<>(\"prefers-color-scheme\", \"dark\", _ -> null, ColorScheme.DARK),\n+            FunctionExpression.of(\"prefers-color-scheme\", \"dark\", _ -> null, ColorScheme.DARK),\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/StylesheetTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.javafx.tk.Toolkit;\n@@ -59,0 +60,1 @@\n+        stage.show();\n@@ -106,1 +108,1 @@\n-        rect.applyCss();\n+        Toolkit.getToolkit().firePulse();\n@@ -110,1 +112,1 @@\n-        rect.applyCss();\n+        Toolkit.getToolkit().firePulse();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/Scene_preferences_Test.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}