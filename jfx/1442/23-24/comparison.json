{"files":[{"patch":"@@ -109,1 +109,2 @@\n-     * requested string length, and the maximum end index.\n+     * requested string length, and the maximum end index. <code>0 <= start <= end <= length<\/code>;\n+     * see {@link #validateRange(String)}.\n@@ -114,1 +115,1 @@\n-     * @param maxEndIndex The maximum end index to return. Needs to be equal or greater than startIndex\n+     * @param endIndex The maximum end index to return. Needs to be equal or greater than startIndex\n@@ -117,3 +118,3 @@\n-    static int getEndIndex(int startIndex, int length, int maxEndIndex) {\n-        if (length < 0 || length > maxEndIndex) {\n-            return maxEndIndex;\n+    static int getEndIndex(int startIndex, int length, int endIndex) {\n+        if (length < 0 || (endIndex - startIndex) <= length) {\n+            return endIndex;\n@@ -121,4 +122,1 @@\n-        int res = Math.min(startIndex + length, maxEndIndex);\n-        \/\/ In case there was an overflow, return the maximum end index\n-        if (res < 0) return maxEndIndex;\n-        return res;\n+        return startIndex + length;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinTextRangeProvider.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -87,9 +87,1 @@\n-                Arguments.of(60, 50, Integer.MIN_VALUE, 60),\n-\n-                \/\/ No range check for startIndex\n-                Arguments.of(20, -10, 9, 20),\n-\n-                \/\/ No range check for maxEndIndex\n-                Arguments.of(-1, -1, 2, -1),\n-                Arguments.of(Integer.MIN_VALUE, 100, 50, Integer.MIN_VALUE),\n-                Arguments.of(Integer.MIN_VALUE, 50, Integer.MIN_VALUE, Integer.MIN_VALUE)\n+                Arguments.of(60, 50, Integer.MIN_VALUE, 60)\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/win\/WinTextRangeProviderTest.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"}]}