{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,0 +105,20 @@\n+    \/**\n+     * In the context of substrings, this method calculates the end index based on the start index,\n+     * requested string length, and the maximum end index.\n+     *\n+     * @param startIndex The start index in a string. Needs to be 0 or more (not checked in the code).\n+     * @param length The requested length of a string when starting from \"start\".\n+     *               Negative numbers are treated as full length.\n+     * @param maxEndIndex The maximum end index to return. Needs to be equal or greater than startIndex\n+     *                    (not checked in the code).\n+     *\/\n+    static int getEndIndex(int startIndex, int length, int maxEndIndex) {\n+        if (length < 0 || length > maxEndIndex) {\n+            return maxEndIndex;\n+        }\n+        int res = Math.min(startIndex + length, maxEndIndex);\n+        \/\/ In case there was an overflow, return the maximum end index\n+        if (res < 0) return maxEndIndex;\n+        return res;\n+    }\n+\n@@ -361,0 +381,6 @@\n+    \/**\n+     *\n+     * Returns the text contained in the TEXT attribute, starting from the start index and ending at the end index.\n+     *\n+     * @param maxLength The maximum length of the returned string\n+     *\/\n@@ -365,1 +391,1 @@\n-        int endOffset = maxLength != -1 ? Math.min(end, start + maxLength) : end;\n+        int endOffset = getEndIndex(start, maxLength, end);\n@@ -381,1 +407,1 @@\n-                start = Math.max(0, Math.min(start + requestedCount, length - 1));\n+                start = getEndIndex(start, requestedCount, length - 1);\n@@ -485,1 +511,1 @@\n-                offset = Math.max(0, Math.min(offset + requestedCount, length));\n+                offset = getEndIndex(offset, requestedCount, length);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinTextRangeProvider.java","additions":30,"deletions":4,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.glass.ui.win;\n+\n+\/**\n+ * Provides access to the {@link WinTextRangeProvider} class by making its\n+ * package-private fields and methods public for test cases in\n+ * {@link test.com.sun.glass.ui.win.WinTextRangeProviderTest WinTextRangeProviderTest}.\n+ *\/\n+public class WinTextRangeProviderShim {\n+    public static int getEndIndex(int start, int length, int maxEndIndex) {\n+        return WinTextRangeProvider.getEndIndex(start, length, maxEndIndex);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/com\/sun\/glass\/ui\/win\/WinTextRangeProviderShim.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -8,0 +8,1 @@\n+--add-exports javafx.graphics\/com.sun.glass.ui.win=ALL-UNNAMED\n","filename":"modules\/javafx.graphics\/src\/test\/addExports","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -9,0 +9,1 @@\n+--add-exports javafx.graphics\/com.sun.glass.ui.win=ALL-UNNAMED\n","filename":"tests\/system\/src\/test\/addExports","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.com.sun.glass.ui.win;\n+\n+import com.sun.javafx.PlatformUtil;\n+import com.sun.glass.ui.win.WinTextRangeProviderShim;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Stream;\n+import javafx.application.Platform;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@EnabledOnOs({OS.WINDOWS})\n+public class WinTextRangeProviderTest {\n+\n+    private static final CountDownLatch startupLatch = new CountDownLatch(1);\n+    private static final PrintStream defaultErrorStream = System.err;\n+    protected static final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+\n+    @BeforeAll\n+    static void doSetup() throws Exception {\n+        System.setErr(new PrintStream(out, true));\n+\n+        Platform.startup(() -> {\n+            startupLatch.countDown();\n+        });\n+\n+        if (!startupLatch.await(15, TimeUnit.SECONDS)) {\n+            System.setErr(defaultErrorStream);\n+            System.err.println(out);\n+            fail(\"Timeout waiting for FX runtime to start\");\n+        }\n+\n+        Thread.sleep(250);\n+        System.setErr(defaultErrorStream);\n+    }\n+\n+    @AfterAll\n+    static void doTeardown() {\n+        Platform.exit();\n+    }\n+\n+    static Stream<Arguments> getEndIndex() {\n+        return Stream.of(\n+                Arguments.of(1, 0, 1, 2),\n+                Arguments.of(1, 0, 2, 1),\n+                Arguments.of(1, -1, 2, -1),\n+                Arguments.of(1, 0, Integer.MAX_VALUE, 1),\n+                Arguments.of(1, 0, Integer.MAX_VALUE, Integer.MAX_VALUE),\n+                Arguments.of(55, 50, Integer.MAX_VALUE, 50),\n+                Arguments.of(50, 50, -1, 55),\n+                Arguments.of(55, 50, 10, 55),\n+                Arguments.of(60, 50, 10, Integer.MAX_VALUE),\n+                Arguments.of(60, 50, 10, Integer.MIN_VALUE),\n+                Arguments.of(50, 50, Integer.MIN_VALUE, Integer.MIN_VALUE)\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    public void getEndIndex(Integer expected, Integer startIndex, Integer length, Integer maxEndIndex) {\n+        assertEquals(expected, WinTextRangeProviderShim.getEndIndex(startIndex, length, maxEndIndex));\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/win\/WinTextRangeProviderTest.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"}]}