{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-class WinTextRangeProvider {\n+final class WinTextRangeProvider {\n@@ -105,0 +105,16 @@\n+    \/**\n+     * Calculate the end index based on the start index, requested length and the maximum end index.\n+     *\n+     * @implNote Code does not work if values near Integer.MAX_VALUE are used. For isntance, if 2147483645 is passed as start, 5 as length, and 2147483647 as maxEndIndex, the result will negative.\n+     *\n+     * @param startIndex The start index in a string. Needs to be 0 or more (not checked in the code).\n+     * @param length The requested length of a string when starting from \"start\". Negative numbers are treated as full length.\n+     * @param maxEndIndex The maximum end index to return. Needs to be equal or greater than startIndex (not checked in the code).\n+     *\/\n+    static int calculateEndIndex(int startIndex, int length, int maxEndIndex) {\n+        if (length < 0 || length > maxEndIndex) {\n+            return maxEndIndex;\n+        }\n+        return Math.min(startIndex + length, maxEndIndex);\n+    }\n+\n@@ -365,1 +381,1 @@\n-        int endOffset = maxLength != -1 ? Math.min(end, start + maxLength) : end;\n+        int endOffset = calculateEndIndex(start, maxLength, end);\n@@ -381,1 +397,1 @@\n-                start = Math.max(0, Math.min(start + requestedCount, length - 1));\n+                start = calculateEndIndex(start, requestedCount, length - 1);\n@@ -485,1 +501,1 @@\n-                offset = Math.max(0, Math.min(offset + requestedCount, length));\n+                offset = calculateEndIndex(offset, requestedCount, length);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinTextRangeProvider.java","additions":21,"deletions":5,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.glass.ui.win;\n+\n+\/**\n+ * Provides access to the {@link WinTextRangeProvider} class by making its\n+ * package-private fields and methods public for test cases in\n+ * {@link test.com.sun.glass.ui.win.WinTextRangeProviderTest WinTextRangeProviderTest}.\n+ *\/\n+public class WinTextRangeProviderShim {\n+    public static int getValidStringIndex(int start, int requestedSteps, int maxEnd) {\n+        return WinTextRangeProvider.getValidStringIndex(start, requestedSteps, maxEnd);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/com\/sun\/glass\/ui\/win\/WinTextRangeProviderShim.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -8,0 +8,1 @@\n+--add-exports javafx.graphics\/com.sun.glass.ui.win=ALL-UNNAMED\n","filename":"modules\/javafx.graphics\/src\/test\/addExports","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.com.sun.glass.ui.win;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+import com.sun.glass.ui.win.WinTextRangeProviderShim;\n+\n+public class WinTextRangeProviderTest {\n+    @Test\n+    public void getValidStringIndex() {\n+        assertEquals(1, WinTextRangeProviderShim.getValidStringIndex(0, 1, 2));\n+        assertEquals(1, WinTextRangeProviderShim.getValidStringIndex(0, 2, 1));\n+        assertEquals(1, WinTextRangeProviderShim.getValidStringIndex(-1, 2, 1));\n+        assertEquals(1, WinTextRangeProviderShim.getValidStringIndex(0, Integer.MAX_VALUE, 1));\n+        assertEquals(1, WinTextRangeProviderShim.getValidStringIndex(0, Integer.MAX_VALUE, Integer.MAX_VALUE));\n+        assertEquals(55, WinTextRangeProviderShim.getValidStringIndex(50, Integer.MAX_VALUE, 55));\n+        assertEquals(50, WinTextRangeProviderShim.getValidStringIndex(50, -1, 55));\n+        assertEquals(55, WinTextRangeProviderShim.getValidStringIndex(50, 10, 55));\n+        assertEquals(60, WinTextRangeProviderShim.getValidStringIndex(50, 10, Integer.MAX_VALUE));\n+        assertEquals(60, WinTextRangeProviderShim.getValidStringIndex(50, 10, Integer.MIN_VALUE));\n+        assertEquals(50, WinTextRangeProviderShim.getValidStringIndex(50, Integer.MIN_VALUE, Integer.MIN_VALUE));\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/glass\/ui\/win\/WinTextRangeProviderTest.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"}]}