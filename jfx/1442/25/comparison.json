{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+\n+import com.sun.javafx.util.Utils;\n@@ -101,2 +103,20 @@\n-        start = Math.max(0, Math.min(start, length));\n-        end = Math.max(start, Math.min(end, length));\n+        start = Utils.clamp(0, start, length);\n+        end = Utils.clamp(start, end, length);\n+    }\n+\n+    \/**\n+     * In the context of substrings, this method calculates the end index based on the start index,\n+     * requested string length, and the maximum end index. <code>0 <= start <= end <= length<\/code>;\n+     * see {@link #validateRange(String)}.\n+     *\n+     * @param startIndex The start index in a string. Needs to be 0 or more (not checked in the code).\n+     * @param length The requested length of a string when starting from \"start\".\n+     *               Negative numbers are treated as full length.\n+     * @param endIndex The maximum end index to return. Needs to be equal or greater than startIndex\n+     *                    (not checked in the code).\n+     *\/\n+    static int getEndIndex(int startIndex, int length, int endIndex) {\n+        if (length < 0 || (endIndex - startIndex) <= length) {\n+            return endIndex;\n+        }\n+        return startIndex + length;\n@@ -361,0 +381,5 @@\n+    \/**\n+     * Returns the text contained in the TEXT attribute, starting from the start index and ending at the end index.\n+     *\n+     * @param maxLength The maximum length of the returned string\n+     *\/\n@@ -365,1 +390,1 @@\n-        int endOffset = maxLength != -1 ? Math.min(end, start + maxLength) : end;\n+        int endOffset = getEndIndex(start, maxLength, end);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinTextRangeProvider.java","additions":29,"deletions":4,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.glass.ui.win;\n+\n+\/**\n+ * Provides access to the {@link WinTextRangeProvider} class by making its\n+ * package-private fields and methods public for test cases in\n+ * {@link test.com.sun.glass.ui.win.WinTextRangeProviderTest WinTextRangeProviderTest}.\n+ *\/\n+public class WinTextRangeProviderShim {\n+    public static int getEndIndex(int start, int length, int maxEndIndex) {\n+        return WinTextRangeProvider.getEndIndex(start, length, maxEndIndex);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/com\/sun\/glass\/ui\/win\/WinTextRangeProviderShim.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -17,1 +17,1 @@\n-\t\t\t<attribute name=\"add-exports\" value=\"javafx.graphics\/com.sun.glass.ui=ALL-UNNAMED:javafx.graphics\/com.sun.glass.ui.monocle=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.sg.prism=ALL-UNNAMED:javafx.graphics\/com.sun.prism.impl=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.image.impl=ALL-UNNAMED:javafx.graphics\/com.sun.glass.events=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.application=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.css=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.geom=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.tk=ALL-UNNAMED:javafx.graphics\/com.sun.glass.ui.mac=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.scene.text=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.text=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.font=ALL-UNNAMED\"\/>\n+\t\t\t<attribute name=\"add-exports\" value=\"javafx.graphics\/com.sun.glass.ui=ALL-UNNAMED:javafx.graphics\/com.sun.glass.ui.monocle=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.sg.prism=ALL-UNNAMED:javafx.graphics\/com.sun.prism.impl=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.image.impl=ALL-UNNAMED:javafx.graphics\/com.sun.glass.events=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.application=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.css=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.geom=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.tk=ALL-UNNAMED:javafx.graphics\/com.sun.glass.ui.mac=ALL-UNNAMED:javafx.graphics\/com.sun.glass.ui.win=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.scene.text=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.text=ALL-UNNAMED:javafx.graphics\/com.sun.javafx.font=ALL-UNNAMED\"\/>\n","filename":"tests\/system\/src\/test\/.classpath","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -9,0 +9,1 @@\n+--add-exports javafx.graphics\/com.sun.glass.ui.win=ALL-UNNAMED\n","filename":"tests\/system\/src\/test\/addExports","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.com.sun.glass.ui.win;\n+\n+import com.sun.javafx.PlatformUtil;\n+import com.sun.glass.ui.win.WinTextRangeProviderShim;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.stream.Stream;\n+\n+import test.util.Util;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+\n+public class WinTextRangeProviderTest {\n+\n+    private static final CountDownLatch startupLatch = new CountDownLatch(1);\n+\n+    @BeforeAll\n+    static void initFX() throws Exception {\n+        assumeTrue(PlatformUtil.isWindows());\n+        Util.startup(startupLatch, () -> startupLatch.countDown());\n+    }\n+\n+    @AfterAll\n+    static void shutdown() {\n+        Util.shutdown();\n+    }\n+\n+    static Stream<Arguments> getEndIndexParameters() {\n+        return Stream.of(\n+                Arguments.of(1, 0, 1, 2),\n+                Arguments.of(1, 0, 2, 1),\n+                Arguments.of(55, 50, 10, 55),\n+                Arguments.of(60, 50, 10, Integer.MAX_VALUE),\n+                Arguments.of(1, 0, Integer.MAX_VALUE, 1),\n+                Arguments.of(50, 50, Integer.MAX_VALUE, 50),\n+                Arguments.of(Integer.MAX_VALUE, 0, Integer.MAX_VALUE, Integer.MAX_VALUE),\n+                Arguments.of(60, 50, -1, 60),\n+                Arguments.of(60, 50, Integer.MIN_VALUE, 60)\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"getEndIndexParameters\")\n+    public void testGetEndIndex(Integer expected, Integer startIndex, Integer length, Integer maxEndIndex) {\n+        assertEquals(expected, WinTextRangeProviderShim.getEndIndex(startIndex, length, maxEndIndex));\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/win\/WinTextRangeProviderTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}