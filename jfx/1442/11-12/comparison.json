{"files":[{"patch":"@@ -40,1 +40,1 @@\n-final class WinTextRangeProvider {\n+class WinTextRangeProvider {\n@@ -108,2 +108,0 @@\n-     * @implNote Code does not work if values near Integer.MAX_VALUE are used. For isntance, if 2147483645 is passed as start, 5 as length, and 2147483647 as maxEndIndex, the result will negative.\n-     *\n@@ -114,1 +112,1 @@\n-    static int calculateEndIndex(int startIndex, int length, int maxEndIndex) {\n+    static int getEndIndex(int startIndex, int length, int maxEndIndex) {\n@@ -118,1 +116,4 @@\n-        return Math.min(startIndex + length, maxEndIndex);\n+        int res = Math.min(startIndex + length, maxEndIndex);\n+        \/\/ In case there was an overflow, return the maximum end index\n+        if (res < 0) return maxEndIndex;\n+        return res;\n@@ -377,0 +378,6 @@\n+    \/**\n+     *\n+     * Returns the text contained in the TEXT attribute, starting from the start index and ending at the end index.\n+     *\n+     * @param maxLength The maximum length of the returned string\n+     *\/\n@@ -381,1 +388,1 @@\n-        int endOffset = calculateEndIndex(start, maxLength, end);\n+        int endOffset = getEndIndex(start, maxLength, end);\n@@ -397,1 +404,1 @@\n-                start = calculateEndIndex(start, requestedCount, length - 1);\n+                start = getEndIndex(start, requestedCount, length - 1);\n@@ -501,1 +508,1 @@\n-                offset = calculateEndIndex(offset, requestedCount, length);\n+                offset = getEndIndex(offset, requestedCount, length);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinTextRangeProvider.java","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-    public static int getValidStringIndex(int start, int requestedSteps, int maxEnd) {\n-        return WinTextRangeProvider.getValidStringIndex(start, requestedSteps, maxEnd);\n+    public static int getEndIndex(int start, int length, int maxEndIndex) {\n+        return WinTextRangeProvider.getEndIndex(start, length, maxEndIndex);\n","filename":"modules\/javafx.graphics\/src\/shims\/java\/com\/sun\/glass\/ui\/win\/WinTextRangeProviderShim.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,2 +27,2 @@\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n@@ -30,0 +30,5 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.stream.Stream;\n@@ -32,13 +37,21 @@\n-    @Test\n-    public void getValidStringIndex() {\n-        assertEquals(1, WinTextRangeProviderShim.getValidStringIndex(0, 1, 2));\n-        assertEquals(1, WinTextRangeProviderShim.getValidStringIndex(0, 2, 1));\n-        assertEquals(1, WinTextRangeProviderShim.getValidStringIndex(-1, 2, 1));\n-        assertEquals(1, WinTextRangeProviderShim.getValidStringIndex(0, Integer.MAX_VALUE, 1));\n-        assertEquals(1, WinTextRangeProviderShim.getValidStringIndex(0, Integer.MAX_VALUE, Integer.MAX_VALUE));\n-        assertEquals(55, WinTextRangeProviderShim.getValidStringIndex(50, Integer.MAX_VALUE, 55));\n-        assertEquals(50, WinTextRangeProviderShim.getValidStringIndex(50, -1, 55));\n-        assertEquals(55, WinTextRangeProviderShim.getValidStringIndex(50, 10, 55));\n-        assertEquals(60, WinTextRangeProviderShim.getValidStringIndex(50, 10, Integer.MAX_VALUE));\n-        assertEquals(60, WinTextRangeProviderShim.getValidStringIndex(50, 10, Integer.MIN_VALUE));\n-        assertEquals(50, WinTextRangeProviderShim.getValidStringIndex(50, Integer.MIN_VALUE, Integer.MIN_VALUE));\n+\n+    static Stream<Arguments> getEndIndex() {\n+        return Stream.of(\n+                Arguments.of(1, 0, 1, 2),\n+                Arguments.of(1, 0, 2, 1),\n+                Arguments.of(1, -1, 2, -1),\n+                Arguments.of(1, 0, Integer.MAX_VALUE, 1),\n+                Arguments.of(1, 0, Integer.MAX_VALUE, Integer.MAX_VALUE),\n+                Arguments.of(55, 50, Integer.MAX_VALUE, 50),\n+                Arguments.of(50, 50, -1, 55),\n+                Arguments.of(55, 50, 10, 55),\n+                Arguments.of(60, 50, 10, Integer.MAX_VALUE),\n+                Arguments.of(60, 50, 10, Integer.MIN_VALUE),\n+                Arguments.of(50, 50, Integer.MIN_VALUE, Integer.MIN_VALUE)\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    public void getEndIndex(Integer expected, Integer startIndex, Integer length, Integer maxEndIndex) {\n+        assertEquals(expected, WinTextRangeProviderShim.getEndIndex(startIndex, length, maxEndIndex));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/glass\/ui\/win\/WinTextRangeProviderTest.java","additions":28,"deletions":15,"binary":false,"changes":43,"status":"modified"}]}