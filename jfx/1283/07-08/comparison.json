{"files":[{"patch":"@@ -44,0 +44,2 @@\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -48,0 +50,2 @@\n+import javafx.scene.control.SeparatorMenuItem;\n+import javafx.scene.layout.BorderPane;\n@@ -55,0 +59,1 @@\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -279,1 +284,2 @@\n-    public MenuBar createSimpleMenuBar() {\n+    @Test\n+    public void testJDK8309935() {\n@@ -281,13 +287,33 @@\n-\n-        menuBar.setUseSystemMenuBar(true);\n-\n-        Menu systemMenu = new Menu(\"systemMenu\");\n-        menuBar.getMenus().add(systemMenu);\n-\n-        var newItem = new MenuItem();\n-        newItem.setVisible(false);\n-        systemMenu.getItems().add(newItem);\n-\n-        Platform.runLater(() -> {\n-            javafx.scene.control.Menu systemMenuContributions = new Menu(\"123\");\n-            systemMenu.getItems().add(systemMenuContributions);\n+        AtomicReference<Throwable> throwableRef = new AtomicReference();\n+        Util.runAndWait(() -> {\n+            Thread.currentThread().setUncaughtExceptionHandler((t, e) -> {\n+                e.printStackTrace();\n+                throwableRef.set(e);\n+            });\n+            menuBar.setUseSystemMenuBar(true);\n+            Menu menu1 = new Menu(\"menu 1\");\n+            menu1.getItems().add(new MenuItem(\"item 1\"));\n+            menu1.getItems().add(new MenuItem(\"item 2\"));\n+            menuBar.getMenus().add(menu1);\n+            Menu menu2 = new Menu(\" menu 2\");\n+            menu2.getItems().add(new MenuItem(\"item 1\"));\n+            menu2.getItems().add(new MenuItem(\"item 2\"));\n+            menu2.getItems().add(new SeparatorMenuItem());\n+            menuBar.getMenus().add(menu2);\n+            Menu test1 = new Menu(\"test 1\");\n+            test1.getItems().add(new MenuItem(\"item 1\"));\n+            test1.getItems().add(new MenuItem(\"item 2\"));\n+            Menu test2 = new Menu(\"test 2\");\n+            test2.getItems().add(new MenuItem(\"item 1\"));\n+            test2.getItems().add(new MenuItem(\"item 2\"));\n+            menu2.addEventFilter(Menu.ON_SHOWING, e -> {\n+                menu2.getItems().removeIf(o -> Objects.equals(o.getText(), test1.getText()));\n+                menu2.getItems().add(test1);\n+                menu2.getItems().removeIf(o -> Objects.equals(o.getText(), test2.getText()));\n+                menu2.getItems().add(test2);\n+            });\n+            BorderPane root = new BorderPane();\n+            root.setTop(menuBar);\n+            Stage stage = new Stage();\n+            stage.setScene(new Scene(root));\n+            stage.show();\n@@ -295,2 +321,27 @@\n-\n-        return menuBar;\n+        Util.runAndWait(() -> {\n+            menuBar.getMenus().forEach(menu -> {\n+                menu.setVisible(false);\n+            });\n+        });\n+        Util.runAndWait(() -> {\n+            menuBar.getMenus().forEach(menu -> {\n+                menu.setVisible(true);\n+            });\n+        });\n+        Util.runAndWait(() -> {\n+            Menu test3 = new Menu(\"test 3\");\n+            test3.getItems().add(new MenuItem(\"item 1\"));\n+            test3.getItems().add(new MenuItem(\"item 2\"));\n+            Menu test4 = new Menu(\"test 4\");\n+            test4.getItems().add(new MenuItem(\"item 1\"));\n+            test4.getItems().add(new MenuItem(\"item 2\"));\n+            menuBar.getMenus().get(1).getItems().addAll(test3, test4);\n+        });\n+        \/\/ Some waiting is necessary. runAndWait twice makes it reliable.\n+        Util.runAndWait(() -> {\n+        });\n+        Util.runAndWait(() -> {\n+        });\n+        if (throwableRef.get() != null) {\n+            fail(throwableRef.get());\n+        }\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/tk\/quantum\/SystemMenuBarTest.java","additions":67,"deletions":16,"binary":false,"changes":83,"status":"modified"}]}