{"files":[{"patch":"@@ -2477,1 +2477,6 @@\n-        addNative(project, \"prismES2\")\n+        if (IS_LINUX) {\n+            addNative(project, \"prismES2GLX\")\n+            addNative(project, \"prismES2EGLX11\")\n+        } else {\n+            addNative(project, \"prismES2\")\n+        }\n@@ -5327,2 +5332,1 @@\n-                             \"com\/sun\/prism\/es2\/EGL*\",\n-                             \"com\/sun\/prism\/es2\/X11GL*\"\n+                             \"com\/sun\/prism\/es2\/Linux*\",\n@@ -5465,1 +5469,5 @@\n-                libs += ['prismES2'];\n+                if (IS_LINUX) {\n+                    libs += ['prismES2GLX', 'prismES2EGLX11'];\n+                } else {\n+                    libs += ['prismES2'];\n+                }\n","filename":"build.gradle","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -143,1 +143,1 @@\n-def es2EglfbCFlags = [extraCFlags, \"-DIS_EGLFB\", \"-DLINUX\", \"-D_GNU_SOURCE\"].flatten()\n+def es2EglfbCFlags = [extraCFlags, \"-DIS_MONOCLE_EGLFB\", \"-DLINUX\", \"-D_GNU_SOURCE\"].flatten()\n@@ -145,1 +145,1 @@\n-def es2MonocleCFlags = [extraCFlags, \"-DIS_EGLFB\", \"-DLINUX\"].flatten()\n+def es2MonocleCFlags = [extraCFlags, \"-DIS_MONOCLE_EGLFB\", \"-DLINUX\"].flatten()\n@@ -148,1 +148,1 @@\n-def es2X11CFlags = [extraCFlags, \"-DUSE_XSHM\", \"-DDEBUG\", \"-DIS_EGLX11\", \"-DLINUX\"].flatten()\n+def es2X11CFlags = [extraCFlags, \"-DUSE_XSHM\", \"-DDEBUG\", \"-DIS_MONOCLE_EGLX11\", \"-DLINUX\"].flatten()\n","filename":"buildSrc\/armv6hf.gradle","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-    \"com\/sun\/prism\/es2\/gl\/x11\",\n+    \"com\/sun\/prism\/es2\/gl\/linux\",\n","filename":"buildSrc\/ios.gradle","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -250,2 +250,14 @@\n-LINUX.prismES2 = [:]\n-LINUX.prismES2.nativeSource = [\n+LINUX.prismES2GLX = [:]\n+LINUX.prismES2GLX.nativeSource = [\n+        file(\"${project(\"graphics\").projectDir}\/src\/main\/native-prism-es2\"),\n+        file(\"${project(\"graphics\").projectDir}\/src\/main\/native-prism-es2\/GL\"),\n+        file(\"${project(\"graphics\").projectDir}\/src\/main\/native-prism-es2\/linux\/glx\")\n+]\n+LINUX.prismES2GLX.compiler = compiler\n+LINUX.prismES2GLX.ccFlags = [\"-DLINUX\", \"-DIS_LINUX_GLX\", cFlags].flatten()\n+LINUX.prismES2GLX.linker = linker\n+LINUX.prismES2GLX.linkFlags = IS_STATIC_BUILD ? linkFlags : [linkFlags, \"-lX11\", \"-lXxf86vm\", \"-lGL\"].flatten()\n+LINUX.prismES2GLX.lib = \"prism_es2_glx\"\n+\n+LINUX.prismES2EGLX11 = [:]\n+LINUX.prismES2EGLX11.nativeSource = [\n@@ -254,1 +266,1 @@\n-    file(\"${project(\"graphics\").projectDir}\/src\/main\/native-prism-es2\/x11\")\n+    file(\"${project(\"graphics\").projectDir}\/src\/main\/native-prism-es2\/linux\/egl\")\n@@ -256,5 +268,5 @@\n-LINUX.prismES2.compiler = compiler\n-LINUX.prismES2.ccFlags = [\"-DLINUX\", cFlags].flatten()\n-LINUX.prismES2.linker = linker\n-LINUX.prismES2.linkFlags =IS_STATIC_BUILD ? linkFlags : [linkFlags, \"-lX11\", \"-lXxf86vm\", \"-lGL\"].flatten()\n-LINUX.prismES2.lib = \"prism_es2\"\n+LINUX.prismES2EGLX11.compiler = compiler\n+LINUX.prismES2EGLX11.ccFlags = [\"-DLINUX\", \"-DIS_LINUX_EGL\", cFlags].flatten()\n+LINUX.prismES2EGLX11.linker = linker\n+LINUX.prismES2EGLX11.linkFlags = IS_STATIC_BUILD ? linkFlags : [linkFlags, \"-lX11\", \"-lGL\", \"-lEGL\"].flatten()\n+LINUX.prismES2EGLX11.lib = \"prism_es2_egl_x11\"\n","filename":"buildSrc\/linux.gradle","additions":20,"deletions":8,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,4 +50,0 @@\n-    static {\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            String libName = \"prism_es2\";\n@@ -55,14 +51,2 @@\n-            String eglType = PlatformUtil.getEmbeddedType();\n-            if (\"monocle\".equals(eglType)) {\n-                isEglfb = true;\n-                libName = \"prism_es2_monocle\";\n-            }\n-            if (PrismSettings.verbose) {\n-                System.out.println(\"Loading ES2 native library ... \" + libName);\n-            }\n-            NativeLibLoader.loadLibrary(libName);\n-            if (PrismSettings.verbose) {\n-                System.out.println(\"\\tsucceeded.\");\n-            }\n-            return null;\n-        });\n+    static {\n+        loadNativeLib();\n@@ -106,0 +90,16 @@\n+    private static void loadNativeLib() {\n+        if (PlatformUtil.isLinux()) {\n+            \/\/Linux will have to decide between EGL and GLX\n+            return;\n+        }\n+        String libName = \"prism_es2\";\n+\n+        String eglType = PlatformUtil.getEmbeddedType();\n+        if (\"monocle\".equals(eglType)) {\n+            isEglfb = true;\n+            libName = \"prism_es2_monocle\";\n+        }\n+\n+        GLFactory.loadNativeLib(libName);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/ES2Pipeline.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import com.sun.glass.utils.NativeLibLoader;\n@@ -32,0 +33,1 @@\n+import java.util.Arrays;\n@@ -63,2 +65,1 @@\n-\n-        final String factoryClassName;\n+        final FactoryLoader loader;\n@@ -66,4 +67,10 @@\n-            if (\"monocle\".equals(PlatformUtil.getEmbeddedType()))\n-                factoryClassName = \"com.sun.prism.es2.MonocleGLFactory\";\n-            else\n-                factoryClassName = \"com.sun.prism.es2.X11GLFactory\";\n+            if (\"monocle\".equals(PlatformUtil.getEmbeddedType())) {\n+                loader = new FactoryLoader(\"com.sun.prism.es2.MonocleGLFactory\");\n+            } else {\n+                if (System.getProperty(\"prism.es2.forceGLX\", \"false\").equals(\"true\")) {\n+                    loader = new FactoryLoader(\"com.sun.prism.es2.LinuxGLXFactory\");\n+                } else {\n+                    loader = new FactoryLoader(\"com.sun.prism.es2.LinuxEGLFactory\",\n+                            \"com.sun.prism.es2.LinuxGLXFactory\");\n+                }\n+            }\n@@ -71,1 +78,1 @@\n-            factoryClassName = \"com.sun.prism.es2.WinGLFactory\";\n+            loader = new FactoryLoader(\"com.sun.prism.es2.WinGLFactory\");\n@@ -73,1 +80,1 @@\n-            factoryClassName = \"com.sun.prism.es2.MacGLFactory\";\n+            loader = new FactoryLoader(\"com.sun.prism.es2.MacGLFactory\");\n@@ -75,1 +82,1 @@\n-            factoryClassName = \"com.sun.prism.es2.IOSGLFactory\";\n+            loader = new FactoryLoader(\"com.sun.prism.es2.IOSGLFactory\");\n@@ -77,1 +84,1 @@\n-            factoryClassName = \"com.sun.prism.es2.MonocleGLFactory\";\n+            loader = new FactoryLoader(\"com.sun.prism.es2.MonocleGLFactory\");\n@@ -79,1 +86,1 @@\n-            factoryClassName = null;\n+            loader = null;\n@@ -82,0 +89,1 @@\n+\n@@ -83,1 +91,1 @@\n-            System.out.println(\"GLFactory using \" + factoryClassName);\n+            System.out.println(\"GLFactory using \" + loader);\n@@ -85,0 +93,1 @@\n+\n@@ -86,2 +95,1 @@\n-        GLFactory tmp = factoryClassName == null ? null :\n-            AccessController.doPrivileged(new FactoryLoader(factoryClassName));\n+        GLFactory tmp = loader == null ? null : AccessController.doPrivileged(loader);\n@@ -92,3 +100,3 @@\n-        private final String factoryClassName;\n-        FactoryLoader(String factoryClassName) {\n-            this.factoryClassName = factoryClassName;\n+        private final String[] factoryClassNames;\n+        FactoryLoader(String... factoryClassNames) {\n+            this.factoryClassNames = factoryClassNames;\n@@ -99,9 +107,10 @@\n-            GLFactory factory = null;\n-            try {\n-                factory = (GLFactory) Class.forName(factoryClassName).getDeclaredConstructor().newInstance();\n-            } catch (Throwable t) {\n-                System.err.println(\"GLFactory.static - Platform: \"\n-                        + System.getProperty(\"os.name\")\n-                        + \" - not available: \"\n-                        + factoryClassName);\n-                t.printStackTrace();\n+            for (String factoryClassName : factoryClassNames) {\n+                try {\n+                    return (GLFactory) Class.forName(factoryClassName).getDeclaredConstructor().newInstance();\n+                } catch (Throwable t) {\n+                    System.err.println(\"GLFactory.static - Platform: \"\n+                            + System.getProperty(\"os.name\")\n+                            + \" - not available: \"\n+                            + factoryClassName);\n+                    t.printStackTrace();\n+                }\n@@ -109,1 +118,2 @@\n-            return factory;\n+\n+            return null;\n@@ -111,0 +121,19 @@\n+\n+        @Override\n+        public String toString() {\n+            return \"{\" + Arrays.toString(factoryClassNames) + \"}\";\n+        }\n+    }\n+\n+    static void loadNativeLib(String libName) {\n+        @SuppressWarnings(\"removal\")\n+        var dummy = AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n+            if (PrismSettings.verbose) {\n+                System.out.println(\"Loading ES2 native library ... \" + libName);\n+            }\n+            NativeLibLoader.loadLibrary(libName);\n+            if (PrismSettings.verbose) {\n+                System.out.println(\"\\tsucceeded.\");\n+            }\n+            return null;\n+        });\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/GLFactory.java","additions":57,"deletions":28,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,4 @@\n+    public IOSGLFactory() {\n+        loadNativeLib(\"prism_es2\");\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/IOSGLFactory.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.prism.es2;\n+\n+class LinuxEGLContext extends LinuxGLContext {\n+    public LinuxEGLContext(long nativeCtxInfo) {\n+        super(nativeCtxInfo);\n+    }\n+\n+    public LinuxEGLContext(GLDrawable drawable, GLPixelFormat pixelFormat, boolean vSyncRequest) {\n+        super(drawable, pixelFormat, vSyncRequest);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/LinuxEGLContext.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.prism.es2;\n+\n+\n+class LinuxEGLDrawable extends LinuxGLDrawable {\n+    public LinuxEGLDrawable(GLPixelFormat pixelFormat) {\n+        super(pixelFormat);\n+    }\n+\n+    public LinuxEGLDrawable(long nativeWindow, GLPixelFormat pixelFormat) {\n+        super(nativeWindow, pixelFormat);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/LinuxEGLDrawable.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.prism.es2;\n+\n+import com.sun.prism.es2.GLPixelFormat.Attributes;\n+\n+class LinuxEGLFactory extends LinuxGLFactory {\n+\n+    public LinuxEGLFactory() {\n+        loadNativeLib(\"prism_es2_egl_x11\");\n+    }\n+\n+    @Override\n+    GLContext createGLContext(long nativeCtxInfo) {\n+        return new LinuxEGLContext(nativeCtxInfo);\n+    }\n+\n+    @Override\n+    GLContext createGLContext(GLDrawable drawable, GLPixelFormat pixelFormat,\n+            GLContext shareCtx, boolean vSyncRequest) {\n+        \/\/ No need to pass down shareCtx as we don't use shared ctx on X11\n+        return new LinuxEGLContext(drawable, pixelFormat, vSyncRequest);\n+    }\n+\n+    @Override\n+    GLDrawable createDummyGLDrawable(GLPixelFormat pixelFormat) {\n+        return new LinuxEGLDrawable(pixelFormat);\n+    }\n+\n+    @Override\n+    GLDrawable createGLDrawable(long nativeWindow, GLPixelFormat pixelFormat) {\n+        return new LinuxEGLDrawable(nativeWindow, pixelFormat);\n+    }\n+\n+    @Override\n+    GLPixelFormat createGLPixelFormat(long nativeScreen, Attributes attributes) {\n+        return new LinuxEGLPixelFormat(nativeScreen, attributes);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/LinuxEGLFactory.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.prism.es2;\n+\n+\n+class LinuxEGLPixelFormat extends LinuxGLPixelFormat {\n+    public LinuxEGLPixelFormat(long nativeScreen, Attributes attrs) {\n+        super(nativeScreen, attrs);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/LinuxEGLPixelFormat.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.prism.es2;\n+\n+abstract class LinuxGLContext extends GLContext {\n+\n+    private static native long nInitialize(long nativeDInfo, long nativePFInfo, boolean vSyncRequest);\n+    private static native long nGetNativeHandle(long nativeCtxInfo);\n+    private static native void nMakeCurrent(long nativeCtxInfo, long nativeDInfo);\n+\n+    LinuxGLContext(long nativeCtxInfo) {\n+        this.nativeCtxInfo = nativeCtxInfo;\n+    }\n+\n+    LinuxGLContext(GLDrawable drawable, GLPixelFormat pixelFormat, boolean vSyncRequest) {\n+        \/\/ holds the list of attributes to be translated for native call\n+        int[] attrArr = new int[GLPixelFormat.Attributes.NUM_ITEMS];\n+\n+        GLPixelFormat.Attributes attrs = pixelFormat.getAttributes();\n+\n+        attrArr[GLPixelFormat.Attributes.RED_SIZE] = attrs.getRedSize();\n+        attrArr[GLPixelFormat.Attributes.GREEN_SIZE] = attrs.getGreenSize();\n+        attrArr[GLPixelFormat.Attributes.BLUE_SIZE] = attrs.getBlueSize();\n+        attrArr[GLPixelFormat.Attributes.ALPHA_SIZE] = attrs.getAlphaSize();\n+        attrArr[GLPixelFormat.Attributes.DEPTH_SIZE] = attrs.getDepthSize();\n+        attrArr[GLPixelFormat.Attributes.DOUBLEBUFFER] = attrs.isDoubleBuffer() ? 1 : 0;\n+        attrArr[GLPixelFormat.Attributes.ONSCREEN] = attrs.isOnScreen() ? 1 : 0;\n+\n+        \/\/ return the context info object created on the default screen\n+        nativeCtxInfo = nInitialize(drawable.getNativeDrawableInfo(), pixelFormat.getNativePFInfo(), vSyncRequest);\n+    }\n+\n+    @Override\n+    long getNativeHandle() {\n+        return nGetNativeHandle(nativeCtxInfo);\n+    }\n+\n+    @Override\n+    void makeCurrent(GLDrawable drawable) {\n+        nMakeCurrent(nativeCtxInfo, drawable.getNativeDrawableInfo());\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/LinuxGLContext.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.prism.es2;\n+\n+\n+abstract class LinuxGLDrawable extends GLDrawable {\n+\n+    private static native long nCreateDrawable(long nativeWindow, long nativeCtxInfo);\n+    private static native void nReleaseDrawable(long nativeCtxInfo);\n+    private static native long nGetDummyDrawable(long nativeCtxInfo);\n+    private static native boolean nSwapBuffers(long nativeDInfo);\n+\n+    LinuxGLDrawable(GLPixelFormat pixelFormat) {\n+        super(0L, pixelFormat);\n+\n+        long nDInfo = nGetDummyDrawable(pixelFormat.getNativePFInfo());\n+        setNativeDrawableInfo(nDInfo);\n+    }\n+\n+    LinuxGLDrawable(long nativeWindow, GLPixelFormat pixelFormat) {\n+        super(nativeWindow, pixelFormat);\n+\n+        long nDInfo = nCreateDrawable(nativeWindow, pixelFormat.getNativePFInfo());\n+        setNativeDrawableInfo(nDInfo);\n+    }\n+\n+    @Override\n+    boolean swapBuffers(GLContext glCtx) {\n+        return nSwapBuffers(getNativeDrawableInfo());\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        nReleaseDrawable(nativeDrawableInfo);\n+        nativeDrawableInfo = 0;\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/LinuxGLDrawable.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.prism.es2;\n+\n+import com.sun.prism.es2.GLPixelFormat.Attributes;\n+\n+import java.util.HashMap;\n+\n+abstract class LinuxGLFactory extends GLFactory {\n+    private static native long nInitialize(int[] attrArr);\n+    private static native int nGetAdapterOrdinal(long nativeScreen);\n+    private static native int nGetAdapterCount();\n+    private static native int nGetDefaultScreen(long nativeCtxInfo);\n+    private static native long nGetDisplay(long nativeCtxInfo);\n+    private static native long nGetVisualID(long nativeCtxInfo);\n+\n+    \/\/ Entries must be in lowercase and null string is a wild card\n+    \/\/ Limit es2 pipe qualification check to supported drivers and GPUs\n+    private final GLGPUInfo[] preQualificationFilter = {\n+        new GLGPUInfo(\"advanced micro devices\", null),\n+        new GLGPUInfo(\"amd\", null),\n+        new GLGPUInfo(\"ati\", null),\n+        new GLGPUInfo(\"intel\", null),\n+        new GLGPUInfo(\"nvidia\", null),\n+        new GLGPUInfo(\"nouveau\", null),\n+        new GLGPUInfo(\"x.org\", null)\n+    };\n+\n+    private final GLGPUInfo[] rejectList = {\n+        new GLGPUInfo(\"ati\", \"radeon x1300\"),\n+        new GLGPUInfo(\"ati\", \"radeon x1350\"),\n+        new GLGPUInfo(\"ati\", \"radeon x1400\"),\n+        new GLGPUInfo(\"ati\", \"radeon x1450\"),\n+        new GLGPUInfo(\"ati\", \"radeon x1500\"),\n+        new GLGPUInfo(\"ati\", \"radeon x1550\"),\n+        new GLGPUInfo(\"ati\", \"radeon x1600\"),\n+        new GLGPUInfo(\"ati\", \"radeon x1650\"),\n+        new GLGPUInfo(\"ati\", \"radeon x1700\"),\n+        new GLGPUInfo(\"ati\", \"radeon x1800\"),\n+        new GLGPUInfo(\"ati\", \"radeon x1900\"),\n+        new GLGPUInfo(\"ati\", \"radeon x1950\"),\n+        new GLGPUInfo(\"x.org\", \"amd rv505\"),\n+        new GLGPUInfo(\"x.org\", \"amd rv515\"),\n+        new GLGPUInfo(\"x.org\", \"amd rv516\"),\n+        new GLGPUInfo(\"x.org\", \"amd r520\"),\n+        new GLGPUInfo(\"x.org\", \"amd rv530\"),\n+        new GLGPUInfo(\"x.org\", \"amd rv535\"),\n+        new GLGPUInfo(\"x.org\", \"amd rv560\"),\n+        new GLGPUInfo(\"x.org\", \"amd rv570\"),\n+        new GLGPUInfo(\"x.org\", \"amd r580\"),\n+        new GLGPUInfo(\"nvidia\", \"geforce 6100\"),\n+        new GLGPUInfo(\"nvidia\", \"geforce 6150\"),\n+        new GLGPUInfo(\"nvidia\", \"geforce 6200\"),\n+        new GLGPUInfo(\"nvidia\", \"geforce 6500\"),\n+        new GLGPUInfo(\"nvidia\", \"geforce 6600\"),\n+        new GLGPUInfo(\"nvidia\", \"geforce 6700\"),\n+        new GLGPUInfo(\"nvidia\", \"geforce 6800\"),\n+        new GLGPUInfo(\"nvidia\", \"geforce 7025\"),\n+        new GLGPUInfo(\"nvidia\", \"geforce 7100\"),\n+        new GLGPUInfo(\"nvidia\", \"geforce 7150\"),\n+        new GLGPUInfo(\"nvidia\", \"geforce 7200\"),\n+        new GLGPUInfo(\"nvidia\", \"geforce 7300\"),\n+        new GLGPUInfo(\"nvidia\", \"geforce 7350\"),\n+        new GLGPUInfo(\"nvidia\", \"geforce 7500\"),\n+        new GLGPUInfo(\"nvidia\", \"geforce 7600\"),\n+        new GLGPUInfo(\"nvidia\", \"geforce 7650\"),\n+        new GLGPUInfo(\"nvidia\", \"geforce 7800\"),\n+        new GLGPUInfo(\"nvidia\", \"geforce 7900\"),\n+        new GLGPUInfo(\"nvidia\", \"geforce 7950\")\n+    };\n+\n+    @Override\n+    GLGPUInfo[] getPreQualificationFilter() {\n+        return preQualificationFilter;\n+    }\n+\n+    @Override\n+    GLGPUInfo[] getRejectList() {\n+        return rejectList;\n+    }\n+\n+    @Override\n+    boolean initialize(Class psClass, Attributes attrs) {\n+        \/\/ return the context info object create on the default screen\n+        nativeCtxInfo = nInitialize(LinuxGLPixelFormat.getAttributesArray(attrs));\n+\n+        if (nativeCtxInfo == 0) {\n+            \/\/ current pipe doesn't support this pixelFormat request\n+            return false;\n+        } else {\n+            gl2 = true;\n+            return true;\n+        }\n+    }\n+\n+    @Override\n+    int getAdapterCount() {\n+        return nGetAdapterCount();\n+    }\n+\n+    @Override\n+    int getAdapterOrdinal(long nativeScreen) {\n+        return nGetAdapterOrdinal(nativeScreen);\n+    }\n+\n+    @Override\n+    void updateDeviceDetails(HashMap deviceDetails) {\n+        deviceDetails.put(\"XVisualID\", Long.valueOf(nGetVisualID(nativeCtxInfo)));\n+        deviceDetails.put(\"XDisplay\", Long.valueOf(nGetDisplay(nativeCtxInfo)));\n+        deviceDetails.put(\"XScreenID\", Integer.valueOf(nGetDefaultScreen(nativeCtxInfo)));\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/LinuxGLFactory.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.prism.es2;\n+\n+\n+abstract class LinuxGLPixelFormat extends GLPixelFormat {\n+\n+    private static native long nCreatePixelFormat(long nativeScreen, int[] attrArr);\n+\n+    static int[] getAttributesArray(Attributes attrs) {\n+        \/\/ holds the list of attributes to be translated for native call\n+        int[] attrArr = new int[Attributes.NUM_ITEMS];\n+\n+        attrArr[Attributes.RED_SIZE] = attrs.getRedSize();\n+        attrArr[Attributes.GREEN_SIZE] = attrs.getGreenSize();\n+        attrArr[Attributes.BLUE_SIZE] = attrs.getBlueSize();\n+        attrArr[Attributes.ALPHA_SIZE] = attrs.getAlphaSize();\n+        attrArr[Attributes.DEPTH_SIZE] = attrs.getDepthSize();\n+        attrArr[Attributes.DOUBLEBUFFER] = attrs.isDoubleBuffer() ? 1 : 0;\n+        attrArr[Attributes.ONSCREEN] = attrs.isOnScreen() ? 1 : 0;\n+\n+        return attrArr;\n+    }\n+\n+    LinuxGLPixelFormat(long nativeScreen, Attributes attrs) {\n+        super(nativeScreen, attrs);\n+\n+        long nativePF = nCreatePixelFormat(nativeScreen, getAttributesArray(attrs));\n+        setNativePFInfo(nativePF);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/LinuxGLPixelFormat.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.prism.es2;\n+\n+\n+class LinuxGLXContext extends LinuxGLContext {\n+    public LinuxGLXContext(long nativeCtxInfo) {\n+        super(nativeCtxInfo);\n+    }\n+\n+    public LinuxGLXContext(GLDrawable drawable, GLPixelFormat pixelFormat, boolean vSyncRequest) {\n+        super(drawable, pixelFormat, vSyncRequest);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/LinuxGLXContext.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.prism.es2;\n+\n+\n+class LinuxGLXDrawable extends LinuxGLDrawable {\n+    public LinuxGLXDrawable(GLPixelFormat pixelFormat) {\n+        super(pixelFormat);\n+    }\n+\n+    public LinuxGLXDrawable(long nativeWindow, GLPixelFormat pixelFormat) {\n+        super(nativeWindow, pixelFormat);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/LinuxGLXDrawable.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.prism.es2;\n+\n+import com.sun.prism.es2.GLPixelFormat.Attributes;\n+\n+class LinuxGLXFactory extends LinuxGLFactory {\n+\n+    public LinuxGLXFactory() {\n+        loadNativeLib(\"prism_es2_glx\");\n+    }\n+\n+    @Override\n+    GLContext createGLContext(long nativeCtxInfo) {\n+        return new LinuxGLXContext(nativeCtxInfo);\n+    }\n+\n+    @Override\n+    GLContext createGLContext(GLDrawable drawable, GLPixelFormat pixelFormat,\n+            GLContext shareCtx, boolean vSyncRequest) {\n+        \/\/ No need to pass down shareCtx as we don't use shared ctx on X11\n+        return new LinuxGLXContext(drawable, pixelFormat, vSyncRequest);\n+    }\n+\n+    @Override\n+    GLDrawable createDummyGLDrawable(GLPixelFormat pixelFormat) {\n+        return new LinuxGLXDrawable(pixelFormat);\n+    }\n+\n+    @Override\n+    GLDrawable createGLDrawable(long nativeWindow, GLPixelFormat pixelFormat) {\n+        return new LinuxGLXDrawable(nativeWindow, pixelFormat);\n+    }\n+\n+    @Override\n+    GLPixelFormat createGLPixelFormat(long nativeScreen, Attributes attributes) {\n+        return new LinuxGLXPixelFormat(nativeScreen, attributes);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/LinuxGLXFactory.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.prism.es2;\n+\n+\n+class LinuxGLXPixelFormat extends LinuxGLPixelFormat {\n+    public LinuxGLXPixelFormat(long nativeScreen, Attributes attrs) {\n+        super(nativeScreen, attrs);\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/LinuxGLXPixelFormat.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.prism.es2;\n-\n-\n-\n-class X11GLContext extends GLContext {\n-\n-    private static native long nInitialize(long nativeDInfo, long nativePFInfo,\n-            boolean vSyncRequest);\n-    private static native long nGetNativeHandle(long nativeCtxInfo);\n-    private static native void nMakeCurrent(long nativeCtxInfo, long nativeDInfo);\n-\n-    X11GLContext(long nativeCtxInfo) {\n-        this.nativeCtxInfo = nativeCtxInfo;\n-    }\n-\n-    X11GLContext(GLDrawable drawable, GLPixelFormat pixelFormat,\n-            boolean vSyncRequest) {\n-\n-        \/\/ holds the list of attributes to be translated for native call\n-        int attrArr[] = new int[GLPixelFormat.Attributes.NUM_ITEMS];\n-\n-        GLPixelFormat.Attributes attrs = pixelFormat.getAttributes();\n-\n-        attrArr[GLPixelFormat.Attributes.RED_SIZE] = attrs.getRedSize();\n-        attrArr[GLPixelFormat.Attributes.GREEN_SIZE] = attrs.getGreenSize();\n-        attrArr[GLPixelFormat.Attributes.BLUE_SIZE] = attrs.getBlueSize();\n-        attrArr[GLPixelFormat.Attributes.ALPHA_SIZE] = attrs.getAlphaSize();\n-        attrArr[GLPixelFormat.Attributes.DEPTH_SIZE] = attrs.getDepthSize();\n-        attrArr[GLPixelFormat.Attributes.DOUBLEBUFFER] = attrs.isDoubleBuffer() ? 1 : 0;\n-        attrArr[GLPixelFormat.Attributes.ONSCREEN] = attrs.isOnScreen() ? 1 : 0;\n-\n-        \/\/ return the context info object created on the default screen\n-        nativeCtxInfo = nInitialize(drawable.getNativeDrawableInfo(),\n-                pixelFormat.getNativePFInfo(), vSyncRequest);\n-    }\n-\n-    @Override\n-    long getNativeHandle() {\n-        return nGetNativeHandle(nativeCtxInfo);\n-    }\n-\n-    @Override\n-    void makeCurrent(GLDrawable drawable) {\n-        nMakeCurrent(nativeCtxInfo, drawable.getNativeDrawableInfo());\n-    }\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/X11GLContext.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.prism.es2;\n-\n-\n-class X11GLDrawable extends GLDrawable {\n-\n-    private static native long nCreateDrawable(long nativeWindow, long nativeCtxInfo);\n-    private static native void nReleaseDrawable(long nativeCtxInfo);\n-    private static native long nGetDummyDrawable(long nativeCtxInfo);\n-    private static native boolean nSwapBuffers(long nativeDInfo);\n-\n-    X11GLDrawable(GLPixelFormat pixelFormat) {\n-\n-        super(0L, pixelFormat);\n-        long nDInfo = nGetDummyDrawable(pixelFormat.getNativePFInfo());\n-        setNativeDrawableInfo(nDInfo);\n-    }\n-\n-    X11GLDrawable(long nativeWindow, GLPixelFormat pixelFormat) {\n-        super(nativeWindow, pixelFormat);\n-        long nDInfo = nCreateDrawable(nativeWindow, pixelFormat.getNativePFInfo());\n-        setNativeDrawableInfo(nDInfo);\n-    }\n-\n-    @Override\n-    boolean swapBuffers(GLContext glCtx) {\n-        return nSwapBuffers(getNativeDrawableInfo());\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        nReleaseDrawable(nativeDrawableInfo);\n-        nativeDrawableInfo = 0;\n-    }\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/X11GLDrawable.java","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -1,174 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.prism.es2;\n-\n-import com.sun.prism.es2.GLPixelFormat.Attributes;\n-import java.util.HashMap;\n-\n-class X11GLFactory extends GLFactory {\n-\n-    private static native long nInitialize(int[] attrArr);\n-    private static native int nGetAdapterOrdinal(long nativeScreen);\n-    private static native int nGetAdapterCount();\n-    private static native int nGetDefaultScreen(long nativeCtxInfo);\n-    private static native long nGetDisplay(long nativeCtxInfo);\n-    private static native long nGetVisualID(long nativeCtxInfo);\n-\n-    \/\/ Entries must be in lowercase and null string is a wild card\n-    \/\/ Limit es2 pipe qualification check to supported drivers and GPUs\n-    private GLGPUInfo preQualificationFilter[] = {\n-        new GLGPUInfo(\"advanced micro devices\", null),\n-        new GLGPUInfo(\"amd\", null),\n-        new GLGPUInfo(\"ati\", null),\n-        new GLGPUInfo(\"intel\", null),\n-        new GLGPUInfo(\"nvidia\", null),\n-        new GLGPUInfo(\"nouveau\", null),\n-        new GLGPUInfo(\"x.org\", null)\n-    };\n-\n-    private GLGPUInfo rejectList[] = {\n-        new GLGPUInfo(\"ati\", \"radeon x1300\"),\n-        new GLGPUInfo(\"ati\", \"radeon x1350\"),\n-        new GLGPUInfo(\"ati\", \"radeon x1400\"),\n-        new GLGPUInfo(\"ati\", \"radeon x1450\"),\n-        new GLGPUInfo(\"ati\", \"radeon x1500\"),\n-        new GLGPUInfo(\"ati\", \"radeon x1550\"),\n-        new GLGPUInfo(\"ati\", \"radeon x1600\"),\n-        new GLGPUInfo(\"ati\", \"radeon x1650\"),\n-        new GLGPUInfo(\"ati\", \"radeon x1700\"),\n-        new GLGPUInfo(\"ati\", \"radeon x1800\"),\n-        new GLGPUInfo(\"ati\", \"radeon x1900\"),\n-        new GLGPUInfo(\"ati\", \"radeon x1950\"),\n-        new GLGPUInfo(\"x.org\", \"amd rv505\"),\n-        new GLGPUInfo(\"x.org\", \"amd rv515\"),\n-        new GLGPUInfo(\"x.org\", \"amd rv516\"),\n-        new GLGPUInfo(\"x.org\", \"amd r520\"),\n-        new GLGPUInfo(\"x.org\", \"amd rv530\"),\n-        new GLGPUInfo(\"x.org\", \"amd rv535\"),\n-        new GLGPUInfo(\"x.org\", \"amd rv560\"),\n-        new GLGPUInfo(\"x.org\", \"amd rv570\"),\n-        new GLGPUInfo(\"x.org\", \"amd r580\"),\n-        new GLGPUInfo(\"nvidia\", \"geforce 6100\"),\n-        new GLGPUInfo(\"nvidia\", \"geforce 6150\"),\n-        new GLGPUInfo(\"nvidia\", \"geforce 6200\"),\n-        new GLGPUInfo(\"nvidia\", \"geforce 6500\"),\n-        new GLGPUInfo(\"nvidia\", \"geforce 6600\"),\n-        new GLGPUInfo(\"nvidia\", \"geforce 6700\"),\n-        new GLGPUInfo(\"nvidia\", \"geforce 6800\"),\n-        new GLGPUInfo(\"nvidia\", \"geforce 7025\"),\n-        new GLGPUInfo(\"nvidia\", \"geforce 7100\"),\n-        new GLGPUInfo(\"nvidia\", \"geforce 7150\"),\n-        new GLGPUInfo(\"nvidia\", \"geforce 7200\"),\n-        new GLGPUInfo(\"nvidia\", \"geforce 7300\"),\n-        new GLGPUInfo(\"nvidia\", \"geforce 7350\"),\n-        new GLGPUInfo(\"nvidia\", \"geforce 7500\"),\n-        new GLGPUInfo(\"nvidia\", \"geforce 7600\"),\n-        new GLGPUInfo(\"nvidia\", \"geforce 7650\"),\n-        new GLGPUInfo(\"nvidia\", \"geforce 7800\"),\n-        new GLGPUInfo(\"nvidia\", \"geforce 7900\"),\n-        new GLGPUInfo(\"nvidia\", \"geforce 7950\")\n-    };\n-\n-    @Override\n-    GLGPUInfo[] getPreQualificationFilter() {\n-        return preQualificationFilter;\n-    }\n-\n-    @Override\n-    GLGPUInfo[] getRejectList() {\n-        return rejectList;\n-    }\n-\n-    @Override\n-    GLContext createGLContext(long nativeCtxInfo) {\n-        return new X11GLContext(nativeCtxInfo);\n-    }\n-\n-    @Override\n-    GLContext createGLContext(GLDrawable drawable, GLPixelFormat pixelFormat,\n-            GLContext shareCtx, boolean vSyncRequest) {\n-        \/\/ No need to pass down shareCtx as we don't use shared ctx on X11\n-        return new X11GLContext(drawable, pixelFormat, vSyncRequest);\n-    }\n-\n-    @Override\n-    GLDrawable createDummyGLDrawable(GLPixelFormat pixelFormat) {\n-        return new X11GLDrawable(pixelFormat);\n-    }\n-\n-    @Override\n-    GLDrawable createGLDrawable(long nativeWindow, GLPixelFormat pixelFormat) {\n-        return new X11GLDrawable(nativeWindow, pixelFormat);\n-    }\n-\n-    @Override\n-    GLPixelFormat createGLPixelFormat(long nativeScreen, Attributes attributes) {\n-        return new X11GLPixelFormat(nativeScreen, attributes);\n-    }\n-\n-    @Override\n-    boolean initialize(Class psClass, Attributes attrs) {\n-\n-        \/\/ holds the list of attributes to be translated for native call\n-        int attrArr[] = new int[GLPixelFormat.Attributes.NUM_ITEMS];\n-\n-        attrArr[GLPixelFormat.Attributes.RED_SIZE] = attrs.getRedSize();\n-        attrArr[GLPixelFormat.Attributes.GREEN_SIZE] = attrs.getGreenSize();\n-        attrArr[GLPixelFormat.Attributes.BLUE_SIZE] = attrs.getBlueSize();\n-        attrArr[GLPixelFormat.Attributes.ALPHA_SIZE] = attrs.getAlphaSize();\n-        attrArr[GLPixelFormat.Attributes.DEPTH_SIZE] = attrs.getDepthSize();\n-        attrArr[GLPixelFormat.Attributes.DOUBLEBUFFER] = attrs.isDoubleBuffer() ? 1 : 0;\n-        attrArr[GLPixelFormat.Attributes.ONSCREEN] = attrs.isOnScreen() ? 1 : 0;\n-\n-        \/\/ return the context info object create on the default screen\n-        nativeCtxInfo = nInitialize(attrArr);\n-\n-        if (nativeCtxInfo == 0) {\n-            \/\/ current pipe doesn't support this pixelFormat request\n-            return false;\n-        } else {\n-            gl2 = true;\n-            return true;\n-        }\n-    }\n-\n-    @Override\n-    int getAdapterCount() {\n-        return nGetAdapterCount();\n-    }\n-\n-    @Override\n-    int getAdapterOrdinal(long nativeScreen) {\n-        return nGetAdapterOrdinal(nativeScreen);\n-    }\n-\n-    @Override\n-    void updateDeviceDetails(HashMap deviceDetails) {\n-        deviceDetails.put(\"XVisualID\", Long.valueOf(nGetVisualID(nativeCtxInfo)));\n-        deviceDetails.put(\"XDisplay\", Long.valueOf(nGetDisplay(nativeCtxInfo)));\n-        deviceDetails.put(\"XScreenID\", Integer.valueOf(nGetDefaultScreen(nativeCtxInfo)));\n-    }\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/X11GLFactory.java","additions":0,"deletions":174,"binary":false,"changes":174,"status":"deleted"},{"patch":"@@ -1,50 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.prism.es2;\n-\n-\n-class X11GLPixelFormat extends GLPixelFormat {\n-\n-    private static native long nCreatePixelFormat(long nativeScreen, int[] attrArr);\n-\n-    X11GLPixelFormat(long nativeScreen, Attributes attrs) {\n-        super(nativeScreen, attrs);\n-\n-        \/\/ holds the list of attributes to be translated for native call\n-        int attrArr[] = new int[GLPixelFormat.Attributes.NUM_ITEMS];\n-\n-        attrArr[GLPixelFormat.Attributes.RED_SIZE] = attrs.getRedSize();\n-        attrArr[GLPixelFormat.Attributes.GREEN_SIZE] = attrs.getGreenSize();\n-        attrArr[GLPixelFormat.Attributes.BLUE_SIZE] = attrs.getBlueSize();\n-        attrArr[GLPixelFormat.Attributes.ALPHA_SIZE] = attrs.getAlphaSize();\n-        attrArr[GLPixelFormat.Attributes.DEPTH_SIZE] = attrs.getDepthSize();\n-        attrArr[GLPixelFormat.Attributes.DOUBLEBUFFER] = attrs.isDoubleBuffer() ? 1 : 0;\n-        attrArr[GLPixelFormat.Attributes.ONSCREEN] = attrs.isOnScreen() ? 1 : 0;\n-        long nativePF = nCreatePixelFormat(nativeScreen, attrArr);\n-        setNativePFInfo(nativePF);\n-\n-    }\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/X11GLPixelFormat.java","additions":0,"deletions":50,"binary":false,"changes":50,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -103,0 +103,1 @@\n+#ifdef IS_LINUX_IS_GLX\n@@ -106,3 +107,0 @@\n-    if (ctxInfo->context != NULL) {\n-#if defined(IS_GLX)\n-        glXDestroyContext(ctxInfo->display, ctxInfo->context);\n@@ -110,1 +108,7 @@\n-#ifdef IS_EGL\n+#ifdef IS_LINUX_EGL\n+    if (ctxInfo->eglExtensionStr != NULL) {\n+        free(ctxInfo->eglExtensionStr);\n+    }\n+#endif\n+    if (ctxInfo->context != NULL) {\n+#if defined(IS_MONOCLE_EGL) || defined(IS_LINUX_EGL)\n@@ -112,0 +116,3 @@\n+#endif\n+#ifdef IS_LINUX_GLX\n+        glXDestroyContext(ctxInfo->display, ctxInfo->context);\n@@ -115,0 +122,1 @@\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/GLContext.c","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-#ifdef IS_GLX\n+#if defined(IS_LINUX_GLX) || defined(IS_LINUX_EGL)\n@@ -62,3 +62,0 @@\n-        if (pfInfo->dummyCmap != None) {\n-            XFreeColormap(pfInfo->display, pfInfo->dummyCmap);\n-        }\n@@ -67,0 +64,5 @@\n+\n+#ifdef IS_LINUX_EGL\n+    eglTerminate(pfInfo->eglDisplay);\n+#endif\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/GLPixelFormat.c","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,4 +33,3 @@\n-#if defined(IS_EGLX11) || defined(IS_EGLFB)\n-#define IS_EGL\n-#else\n-#define IS_GLX\n+\n+#if defined(IS_MONOCLE_EGLX11) || defined(IS_MONOCLE_EGLFB)\n+#define IS_MONOCLE_EGL\n@@ -45,0 +44,7 @@\n+\n+#ifdef IS_LINUX_EGL\n+#include <EGL\/egl.h>\n+#include <EGL\/eglext.h>\n+#endif\n+\n+#ifdef IS_LINUX_GLX\n@@ -48,0 +54,2 @@\n+#endif\n+\n@@ -60,1 +68,1 @@\n-#define  MAX_GLX_ATTRS_LENGTH 50\n+#define MAX_GL_ATTRS_LENGTH 50\n@@ -62,1 +70,1 @@\n-#ifdef IS_EGL\n+#ifdef IS_MONOCLE_EGL\n@@ -79,1 +87,1 @@\n-#define IS_EGL\n+#define IS_MONOCLE_EGL\n@@ -159,1 +167,0 @@\n-    GLXFBConfig fbConfig;\n@@ -161,0 +168,3 @@\n+\n+#ifdef IS_LINUX_GLX\n+    GLXFBConfig fbConfig;\n@@ -164,0 +174,6 @@\n+#ifdef IS_LINUX_EGL\n+    EGLConfig eglConfig;\n+    EGLDisplay eglDisplay;\n+#endif\n+#endif\n+\n@@ -182,1 +198,2 @@\n-#ifdef IS_EGL\n+\n+#ifdef IS_MONOCLE_EGL\n@@ -186,1 +203,1 @@\n-#ifndef IS_EGLFB\n+#ifndef IS_MONOCLE_EGLFB\n@@ -190,0 +207,4 @@\n+#ifdef IS_LINUX_EGL\n+    EGLSurface eglSurface;\n+    EGLSurface eglDisplay;\n+#endif\n@@ -228,1 +249,1 @@\n-#ifdef IS_EGL\n+#ifdef IS_MONOCLE_EGL\n@@ -233,1 +254,7 @@\n-     GLXContext context;\n+#ifdef IS_LINUX_GLX\n+    GLXContext context;\n+#endif\n+#ifdef IS_LINUX_EGL\n+    EGLContext context;\n+    EGLDisplay eglDisplay;\n+#endif\n@@ -236,1 +263,1 @@\n-#if defined(IS_GLX) || defined( IS_EGLX11)\n+#if defined(IS_LINUX_GLX) || defined(IS_LINUX_EGL) || defined(IS_MONOCLE_EGLX11)\n@@ -264,0 +291,4 @@\n+#ifdef IS_LINUX_EGL\n+    char *eglExtensionStr;\n+#endif\n+#ifdef IS_LINUX_GLX\n@@ -266,0 +297,1 @@\n+#endif\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/PrismES2Defs.h","additions":46,"deletions":14,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -0,0 +1,324 @@\n+\/*\n+ * Copyright (c) 2024 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <jni.h>\n+#include <stdlib.h>\n+#include <assert.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <math.h>\n+\n+#include \"..\/PrismES2Defs.h\"\n+#include \"com_sun_prism_es2_LinuxGLContext.h\"\n+\n+extern const char* eglGetErrorString(EGLint error);\n+\n+\/*\n+ * Class:     com_sun_prism_es2_LinuxGLContext\n+ * Method:    nInitialize\n+ * Signature: (JJZ)J\n+ *\/\n+JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_LinuxGLContext_nInitialize\n+(JNIEnv *env, jclass class, jlong nativeDInfo, jlong nativePFInfo,\n+        jboolean vSyncRequested) {\n+    const char *glVersion;\n+    const char *glVendor;\n+    const char *glRenderer;\n+    char *tmpVersionStr;\n+    int versionNumbers[2];\n+    const char *glExtensions;\n+    const char *eglExtensions;\n+\n+    PixelFormatInfo *pfInfo = (PixelFormatInfo *) jlong_to_ptr(nativePFInfo);\n+    EGLDisplay eglDisplay = pfInfo->eglDisplay;\n+\n+    ContextInfo *ctxInfo = NULL;\n+    EGLContext eglContext = eglCreateContext(eglDisplay, pfInfo->eglConfig, EGL_NO_CONTEXT, NULL);\n+\n+    if (eglContext == EGL_NO_CONTEXT) {\n+        fprintf(stderr, \"Prism ES2 Error: Initialize - eglCreateContext failed [%s]\\n\", eglGetErrorString(eglGetError()));\n+        return 0;\n+    }\n+\n+    if (!eglMakeCurrent(eglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE, eglContext)) {\n+        fprintf(stderr, \"Prism ES2 Error: Initialize - eglMakeCurrent failed [%s]\\n\",  eglGetErrorString(eglGetError()));\n+        eglDestroyContext(eglDisplay, eglContext);\n+        return 0;\n+    }\n+\n+    \/* Get the OpenGL version *\/\n+    glVersion = (char *) glGetString(GL_VERSION);\n+    if (glVersion == NULL) {\n+        eglDestroyContext(eglDisplay, eglContext);\n+        fprintf(stderr, \"glVersion == null\\n\");\n+        return 0;\n+    }\n+\n+    \/* find out the version, major and minor version number *\/\n+    tmpVersionStr = strdup(glVersion);\n+    extractVersionInfo(tmpVersionStr, versionNumbers);\n+    free(tmpVersionStr);\n+\n+\/*\n+    fprintf(stderr, \"GL_VERSION string = %s\\n\", glVersion);\n+    fprintf(stderr, \"GL_VERSION (major.minor) = %d.%d\\n\",\n+            versionNumbers[0], versionNumbers[1]);\n+*\/\n+\n+    \/*\n+     * Targeted Cards: Intel HD Graphics, Intel HD Graphics 2000\/3000,\n+     * Radeon HD 2350, GeForce FX (with newer drivers), GeForce 7 series or higher\n+     *\n+     * Check for OpenGL 2.1 or later.\n+     *\/\n+    if ((versionNumbers[0] < 2) || ((versionNumbers[0] == 2) && (versionNumbers[1] < 1))) {\n+        eglDestroyContext(eglDisplay, eglContext);\n+        fprintf(stderr, \"Prism-ES2 Error : GL_VERSION (major.minor) = %d.%d\\n\",\n+                versionNumbers[0], versionNumbers[1]);\n+        return 0;\n+    }\n+\n+    \/* Get the OpenGL vendor and renderer *\/\n+    glVendor = (const char *) glGetString(GL_VENDOR);\n+    if (glVendor == NULL) {\n+        glVendor = \"<UNKNOWN>\";\n+    }\n+    glRenderer = (const char *) glGetString(GL_RENDERER);\n+    if (glRenderer == NULL) {\n+        glRenderer = \"<UNKNOWN>\";\n+    }\n+\n+    glExtensions = (const char *) glGetString(GL_EXTENSIONS);\n+    if (glExtensions == NULL) {\n+        eglDestroyContext(eglDisplay, eglContext);\n+        fprintf(stderr, \"glExtensions == null\\n\");\n+        return 0;\n+    }\n+\n+    \/\/ We use GL_ARB_pixel_buffer_object as an guide to\n+    \/\/ determine PS 3.0 capable.\n+    if (!isExtensionSupported(glExtensions, \"GL_ARB_pixel_buffer_object\")) {\n+        eglDestroyContext(eglDisplay, eglContext);\n+        fprintf(stderr, \"GL profile isn't PS 3.0 capable\\n\");\n+        return 0;\n+    }\n+\n+    eglExtensions = (const char *) eglQueryString(eglDisplay, EGL_EXTENSIONS);\n+    if (eglExtensions == NULL) {\n+        eglDestroyContext(eglDisplay, eglContext);\n+        fprintf(stderr, \"eglExtensions == null\\n\");\n+        return 0;\n+    }\n+\n+    \/*\n+        fprintf(stderr, \"glExtensions: %s\\n\", glExtensions);\n+        fprintf(stderr, \"glxExtensions: %s\\n\", glxExtensions);\n+    *\/\n+\n+    \/* allocate the structure *\/\n+    ctxInfo = (ContextInfo *) malloc(sizeof (ContextInfo));\n+    if (ctxInfo == NULL) {\n+        fprintf(stderr, \"Prism ES2 Error: Initialize - Failed in malloc\\n\");\n+        return 0;\n+    }\n+\n+    \/* initialize the structure *\/\n+    initializeCtxInfo(ctxInfo);\n+    ctxInfo->versionStr = strdup(glVersion);\n+    ctxInfo->vendorStr = strdup(glVendor);\n+    ctxInfo->rendererStr = strdup(glRenderer);\n+    ctxInfo->glExtensionStr = strdup(glExtensions);\n+    ctxInfo->eglExtensionStr = strdup(eglExtensions);\n+    ctxInfo->versionNumbers[0] = versionNumbers[0];\n+    ctxInfo->versionNumbers[1] = versionNumbers[1];\n+    ctxInfo->context = eglContext;\n+\n+    \/* set function pointers *\/\n+    ctxInfo->glActiveTexture = (PFNGLACTIVETEXTUREPROC)\n+            eglGetProcAddress(\"glActiveTexture\");\n+    ctxInfo->glAttachShader = (PFNGLATTACHSHADERPROC)\n+            eglGetProcAddress(\"glAttachShader\");\n+    ctxInfo->glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)\n+            eglGetProcAddress(\"glBindAttribLocation\");\n+    ctxInfo->glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC)\n+            eglGetProcAddress(\"glBindFramebuffer\");\n+    ctxInfo->glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC)\n+            eglGetProcAddress(\"glBindRenderbuffer\");\n+    ctxInfo->glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)\n+            eglGetProcAddress(\"glCheckFramebufferStatus\");\n+    ctxInfo->glCreateProgram = (PFNGLCREATEPROGRAMPROC)\n+            eglGetProcAddress(\"glCreateProgram\");\n+    ctxInfo->glCreateShader = (PFNGLCREATESHADERPROC)\n+            eglGetProcAddress(\"glCreateShader\");\n+    ctxInfo->glCompileShader = (PFNGLCOMPILESHADERPROC)\n+            eglGetProcAddress(\"glCompileShader\");\n+    ctxInfo->glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)\n+            eglGetProcAddress(\"glDeleteBuffers\");\n+    ctxInfo->glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)\n+            eglGetProcAddress(\"glDeleteFramebuffers\");\n+    ctxInfo->glDeleteProgram = (PFNGLDELETEPROGRAMPROC)\n+            eglGetProcAddress(\"glDeleteProgram\");\n+    ctxInfo->glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC)\n+            eglGetProcAddress(\"glDeleteRenderbuffers\");\n+    ctxInfo->glDeleteShader = (PFNGLDELETESHADERPROC)\n+            eglGetProcAddress(\"glDeleteShader\");\n+    ctxInfo->glDetachShader = (PFNGLDETACHSHADERPROC)\n+            eglGetProcAddress(\"glDetachShader\");\n+    ctxInfo->glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)\n+            eglGetProcAddress(\"glDisableVertexAttribArray\");\n+    ctxInfo->glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)\n+            eglGetProcAddress(\"glEnableVertexAttribArray\");\n+    ctxInfo->glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)\n+            eglGetProcAddress(\"glFramebufferRenderbuffer\");\n+    ctxInfo->glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)\n+            eglGetProcAddress(\"glFramebufferTexture2D\");\n+    ctxInfo->glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)\n+            eglGetProcAddress(\"glGenFramebuffers\");\n+    ctxInfo->glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC)\n+            eglGetProcAddress(\"glGenRenderbuffers\");\n+    ctxInfo->glGetProgramiv = (PFNGLGETPROGRAMIVPROC)\n+            eglGetProcAddress(\"glGetProgramiv\");\n+    ctxInfo->glGetShaderiv = (PFNGLGETSHADERIVPROC)\n+            eglGetProcAddress(\"glGetShaderiv\");\n+    ctxInfo->glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)\n+            eglGetProcAddress(\"glGetUniformLocation\");\n+    ctxInfo->glLinkProgram = (PFNGLLINKPROGRAMPROC)\n+            eglGetProcAddress(\"glLinkProgram\");\n+    ctxInfo->glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC)\n+            eglGetProcAddress(\"glRenderbufferStorage\");\n+    ctxInfo->glShaderSource = (PFNGLSHADERSOURCEPROC)\n+            eglGetProcAddress(\"glShaderSource\");\n+    ctxInfo->glUniform1f = (PFNGLUNIFORM1FPROC)\n+            eglGetProcAddress(\"glUniform1f\");\n+    ctxInfo->glUniform2f = (PFNGLUNIFORM2FPROC)\n+            eglGetProcAddress(\"glUniform2f\");\n+    ctxInfo->glUniform3f = (PFNGLUNIFORM3FPROC)\n+            eglGetProcAddress(\"glUniform3f\");\n+    ctxInfo->glUniform4f = (PFNGLUNIFORM4FPROC)\n+            eglGetProcAddress(\"glUniform4f\");\n+    ctxInfo->glUniform4fv = (PFNGLUNIFORM4FVPROC)\n+            eglGetProcAddress(\"glUniform4fv\");\n+    ctxInfo->glUniform1i = (PFNGLUNIFORM1IPROC)\n+            eglGetProcAddress(\"glUniform1i\");\n+    ctxInfo->glUniform2i = (PFNGLUNIFORM2IPROC)\n+            eglGetProcAddress(\"glUniform2i\");\n+    ctxInfo->glUniform3i = (PFNGLUNIFORM3IPROC)\n+            eglGetProcAddress(\"glUniform3i\");\n+    ctxInfo->glUniform4i = (PFNGLUNIFORM4IPROC)\n+            eglGetProcAddress(\"glUniform4i\");\n+    ctxInfo->glUniform4iv = (PFNGLUNIFORM4IVPROC)\n+            eglGetProcAddress(\"glUniform4iv\");\n+    ctxInfo->glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)\n+            eglGetProcAddress(\"glUniformMatrix4fv\");\n+    ctxInfo->glUseProgram = (PFNGLUSEPROGRAMPROC)\n+            eglGetProcAddress(\"glUseProgram\");\n+    ctxInfo->glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)\n+            eglGetProcAddress(\"glValidateProgram\");\n+    ctxInfo->glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)\n+            eglGetProcAddress(\"glVertexAttribPointer\");\n+    ctxInfo->glGenBuffers = (PFNGLGENBUFFERSPROC)\n+            eglGetProcAddress(\"glGenBuffers\");\n+    ctxInfo->glBindBuffer = (PFNGLBINDBUFFERPROC)\n+            eglGetProcAddress(\"glBindBuffer\");\n+    ctxInfo->glBufferData = (PFNGLBUFFERDATAPROC)\n+            eglGetProcAddress(\"glBufferData\");\n+    ctxInfo->glBufferSubData = (PFNGLBUFFERSUBDATAPROC)\n+            eglGetProcAddress(\"glBufferSubData\");\n+    ctxInfo->glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)\n+            eglGetProcAddress(\"glGetShaderInfoLog\");\n+    ctxInfo->glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC)\n+            eglGetProcAddress(\"glGetProgramInfoLog\");\n+    ctxInfo->glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC)\n+            eglGetProcAddress(\"glTexImage2DMultisample\");\n+    ctxInfo->glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)\n+            eglGetProcAddress(\"glRenderbufferStorageMultisample\");\n+    ctxInfo->glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)\n+            eglGetProcAddress(\"glBlitFramebuffer\");\n+\n+    ctxInfo->state.vSyncEnabled = JNI_FALSE;\n+    ctxInfo->vSyncRequested = vSyncRequested;\n+    ctxInfo->eglDisplay = eglDisplay;\n+    ctxInfo->display = pfInfo->display;\n+\n+    initState(ctxInfo);\n+\n+    \/\/ Release context once we are all done\n+    if (!eglMakeCurrent(eglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT)) {\n+        fprintf(stderr, \"Prism ES2 Error: Initialize - eglMakeCurrent failed [%s]\\n\", eglGetErrorString(eglGetError()));\n+        eglDestroyContext(eglDisplay, eglContext);\n+        return 0;\n+    }\n+\n+    return ptr_to_jlong(ctxInfo);\n+}\n+\n+\/*\n+ * Class:     com_sun_prism_es2_LinuxGLContext\n+ * Method:    nGetNativeHandle\n+ * Signature: (J)J\n+ *\/\n+JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_LinuxGLContext_nGetNativeHandle\n+(JNIEnv *env, jclass class, jlong nativeCtxInfo) {\n+    ContextInfo *ctxInfo = (ContextInfo *) jlong_to_ptr(nativeCtxInfo);\n+    if (ctxInfo == NULL) {\n+        return 0;\n+    }\n+\n+    return ptr_to_jlong(ctxInfo->context);\n+}\n+\n+\/*\n+ * Class:     com_sun_prism_es2_LinuxGLContext\n+ * Method:    nMakeCurrent\n+ * Signature: (JJ)V\n+ *\/\n+JNIEXPORT void JNICALL Java_com_sun_prism_es2_LinuxGLContext_nMakeCurrent\n+(JNIEnv *env, jclass class, jlong nativeCtxInfo, jlong nativeDInfo) {\n+    ContextInfo *ctxInfo = (ContextInfo *) jlong_to_ptr(nativeCtxInfo);\n+    DrawableInfo *dInfo = (DrawableInfo *) jlong_to_ptr(nativeDInfo);\n+    int interval;\n+    jboolean vSyncNeeded;\n+\n+    if (dInfo == NULL || ctxInfo == NULL) {\n+        return;\n+    }\n+\n+    if (!eglMakeCurrent(ctxInfo->eglDisplay, dInfo->eglSurface, dInfo->eglSurface, ctxInfo->context)) {\n+        fprintf(stderr, \"Prism ES2 Error: MakeCurrent - eglMakeCurrent failed [%s]\\n\", eglGetErrorString(eglGetError()));\n+        return;\n+    }\n+\n+    vSyncNeeded = ctxInfo->vSyncRequested && dInfo->onScreen;\n+    interval = (vSyncNeeded) ? 1 : 0;\n+    if (vSyncNeeded == ctxInfo->state.vSyncEnabled) {\n+        return;\n+    }\n+    ctxInfo->state.vSyncEnabled = vSyncNeeded;\n+\n+    if (dInfo->eglSurface != EGL_NO_SURFACE && !eglSwapInterval(ctxInfo->eglDisplay, interval)) {\n+        fprintf(stderr, \"Prism ES2 Error: MakeCurrent - eglSwapInterval failed [%s]\\n\", eglGetErrorString(eglGetError()));\n+        return;\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/linux\/egl\/LinuxGLContext.c","additions":324,"deletions":0,"binary":false,"changes":324,"status":"added"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <jni.h>\n+#include <stdlib.h>\n+#include <assert.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <math.h>\n+\n+#include \"..\/PrismES2Defs.h\"\n+#include \"com_sun_prism_es2_LinuxGLDrawable.h\"\n+\n+extern void initializeDrawableInfo(DrawableInfo *dInfo);\n+extern void deleteDrawableInfo(DrawableInfo *dInfo);\n+extern const char* eglGetErrorString(EGLint error);\n+\n+\/*\n+ * Class:     com_sun_prism_es2_LinuxGLDrawable\n+ * Method:    nCreateDrawable\n+ * Signature: (JJ)J\n+ *\/\n+JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_LinuxGLDrawable_nCreateDrawable\n+(JNIEnv *env, jclass class, jlong nativeWindow, jlong nativePFInfo) {\n+    DrawableInfo *dInfo = NULL;\n+    PixelFormatInfo *pfInfo = (PixelFormatInfo *) jlong_to_ptr(nativePFInfo);\n+    if (pfInfo == NULL) {\n+        return 0;\n+    }\n+    \/* allocate the structure *\/\n+    dInfo = (DrawableInfo *) malloc(sizeof (DrawableInfo));\n+    if (dInfo == NULL) {\n+        fprintf(stderr, \"Prism ES2 Error: CreateDrawable - Failed in malloc\\n\");\n+        return 0;\n+    }\n+\n+    EGLSurface eglSurface = eglCreateWindowSurface(pfInfo->eglDisplay, pfInfo->eglConfig,\n+                                        (EGLNativeWindowType) jlong_to_ptr(nativeWindow), NULL);\n+\n+    if (eglSurface == EGL_NO_SURFACE) {\n+        fprintf(stderr, \"Prism ES2 Error: CreateDrawable - Could not create EGL surface [%s]\\n\", eglGetErrorString(eglGetError()));\n+        return 0;\n+    }\n+\n+    \/* initialize the structure *\/\n+    memset(dInfo, 0, sizeof(DrawableInfo));\n+\n+    \/\/ Use the dummyWin that was already created in the pfInfo\n+    \/\/ since this is an non-onscreen drawable.\n+    dInfo->display = pfInfo->display;\n+    dInfo->eglDisplay = pfInfo->eglDisplay;\n+    dInfo->win = (Window) jlong_to_ptr(nativeWindow);\n+    dInfo->onScreen = JNI_TRUE;\n+    dInfo->eglSurface = eglSurface;\n+\n+    return ptr_to_jlong(dInfo);\n+}\n+\n+\/*\n+ * Class:     com_sun_prism_es2_LinuxGLDrawable\n+ * Method:    nGetDummyDrawable\n+ * Signature: (J)J\n+ *\/\n+JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_LinuxGLDrawable_nGetDummyDrawable\n+(JNIEnv *env, jclass class, jlong nativePFInfo) {\n+    DrawableInfo *dInfo = NULL;\n+    PixelFormatInfo *pfInfo = (PixelFormatInfo *) jlong_to_ptr(nativePFInfo);\n+    if (pfInfo == NULL) {\n+        return 0;\n+    }\n+\n+    \/* allocate the structure *\/\n+    dInfo = (DrawableInfo *) malloc(sizeof (DrawableInfo));\n+    if (dInfo == NULL) {\n+        fprintf(stderr, \"Prism ES2 Error: GetDummyDrawable - Failed in malloc\\n\");\n+        return 0;\n+    }\n+\n+    \/* initialize the structure *\/\n+    memset(dInfo, 0, sizeof(DrawableInfo));\n+\n+    \/\/ Use the dummyWin that was already created in the pfInfo\n+    \/\/ since this is an non-onscreen drawable.\n+    dInfo->display = pfInfo->display;\n+    dInfo->win = pfInfo->dummyWin;\n+    dInfo->onScreen = JNI_FALSE;\n+\n+    return ptr_to_jlong(dInfo);\n+}\n+\n+\/*\n+ * Class:     com_sun_prism_es2_LinuxGLDrawable\n+ * Method:    nSwapBuffers\n+ * Signature: (J)Z\n+ *\/\n+JNIEXPORT jboolean JNICALL Java_com_sun_prism_es2_LinuxGLDrawable_nSwapBuffers\n+(JNIEnv *env, jclass class, jlong nativeDInfo) {\n+    DrawableInfo *dInfo = (DrawableInfo *) jlong_to_ptr(nativeDInfo);\n+    if (dInfo == NULL) {\n+        return JNI_FALSE;\n+    }\n+\n+    return eglSwapBuffers(eglGetCurrentDisplay(), dInfo->eglSurface);\n+}\n+\n+\/*\n+ * Class:     com_sun_prism_es2_LinuxGLDrawable\n+ * Method:    nReleaseDrawable\n+ * Signature: (J)V\n+ *\/\n+JNIEXPORT void JNICALL Java_com_sun_prism_es2_LinuxGLDrawable_nReleaseDrawable\n+(JNIEnv *env, jclass class, jlong nativeDInfo) {\n+    DrawableInfo *dInfo = (DrawableInfo *) jlong_to_ptr(nativeDInfo);\n+\n+    if (dInfo == NULL) {\n+        return;\n+    }\n+\n+    if (!eglDestroySurface(dInfo->eglDisplay, dInfo->eglSurface)) {\n+        fprintf(stderr, \"Prism ES2 Error: ReleaseDrawable - Could not destroy EGL surface [%s]\\n\", eglGetErrorString(eglGetError()));\n+    }\n+\n+    free(dInfo);\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/linux\/egl\/LinuxGLDrawable.c","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"},{"patch":"@@ -0,0 +1,359 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <jni.h>\n+#include <stdlib.h>\n+#include <assert.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <math.h>\n+#include <X11\/Xutil.h>\n+\n+#define ERROR_CODE_TO_STR(value) case value: return #value;\n+\n+#include \"..\/PrismES2Defs.h\"\n+#include \"com_sun_prism_es2_LinuxGLFactory.h\"\n+#ifdef STATIC_BUILD\n+JNIEXPORT jint JNICALL\n+JNI_OnLoad_prism_es2(JavaVM *vm, void * reserved) {\n+#ifdef JNI_VERSION_1_8\n+    \/\/min. returned JNI_VERSION required by JDK8 for builtin libraries\n+    JNIEnv *env;\n+    if ((*vm)->GetEnv(vm, (void **)&env, JNI_VERSION_1_8) != JNI_OK) {\n+        return JNI_VERSION_1_4;\n+    }\n+    return JNI_VERSION_1_8;\n+#else\n+    return JNI_VERSION_1_4;\n+#endif\n+}\n+#endif\n+\n+\n+void setEGLAttrs(jint *attrs, int *eglAttrs) {\n+    int index = 0;\n+\n+    eglAttrs[index++] = EGL_RENDERABLE_TYPE;\n+    eglAttrs[index++] = EGL_OPENGL_BIT;\n+\n+    eglAttrs[index++] = EGL_SURFACE_TYPE;\n+    eglAttrs[index++] = EGL_WINDOW_BIT;\n+\n+    eglAttrs[index++] = EGL_RED_SIZE;\n+    eglAttrs[index++] = attrs[RED_SIZE];\n+    eglAttrs[index++] = EGL_GREEN_SIZE;\n+    eglAttrs[index++] = attrs[GREEN_SIZE];\n+    eglAttrs[index++] = EGL_BLUE_SIZE;\n+    eglAttrs[index++] = attrs[BLUE_SIZE];\n+    eglAttrs[index++] = EGL_ALPHA_SIZE;\n+    eglAttrs[index++] = attrs[ALPHA_SIZE];\n+\n+    eglAttrs[index++] = EGL_DEPTH_SIZE;\n+    eglAttrs[index++] = attrs[DEPTH_SIZE];\n+\n+    eglAttrs[index] = EGL_NONE;\n+}\n+\n+void printAndReleaseResources(EGLDisplay eglDisplay, EGLSurface eglSurface, EGLContext eglContext,\n+                              const char *message) {\n+    if (message != NULL) {\n+        fprintf(stderr, \"%s\\n\", message);\n+    }\n+\n+    if (eglDisplay == EGL_NO_DISPLAY) {\n+        return;\n+    }\n+\n+    eglMakeCurrent(eglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);\n+\n+    if (eglContext != EGL_NO_CONTEXT) {\n+        eglDestroyContext(eglDisplay, eglContext);\n+    }\n+\n+    if (eglSurface != EGL_NO_SURFACE) {\n+        eglDestroySurface(eglDisplay, eglSurface);\n+    }\n+}\n+\n+const char* eglGetErrorString(EGLint error) {\n+    switch(error) {\n+        ERROR_CODE_TO_STR(EGL_SUCCESS)\n+        ERROR_CODE_TO_STR(EGL_NOT_INITIALIZED)\n+        ERROR_CODE_TO_STR(EGL_BAD_ACCESS)\n+        ERROR_CODE_TO_STR(EGL_BAD_ALLOC)\n+        ERROR_CODE_TO_STR(EGL_BAD_ATTRIBUTE)\n+        ERROR_CODE_TO_STR(EGL_BAD_CONTEXT)\n+        ERROR_CODE_TO_STR(EGL_BAD_CONFIG)\n+        ERROR_CODE_TO_STR(EGL_BAD_CURRENT_SURFACE)\n+        ERROR_CODE_TO_STR(EGL_BAD_DISPLAY)\n+        ERROR_CODE_TO_STR(EGL_BAD_SURFACE)\n+        ERROR_CODE_TO_STR(EGL_BAD_MATCH)\n+        ERROR_CODE_TO_STR(EGL_BAD_PARAMETER)\n+        ERROR_CODE_TO_STR(EGL_BAD_NATIVE_PIXMAP)\n+        ERROR_CODE_TO_STR(EGL_BAD_NATIVE_WINDOW)\n+        ERROR_CODE_TO_STR(EGL_CONTEXT_LOST)\n+        default:\n+            return \"UNKNOWN EGL ERROR\";\n+    }\n+}\n+\n+\n+\/*\n+ * Class:     com_sun_prism_es2_LinuxGLFactory\n+ * Method:    nInitialize\n+ * Signature: ([I[J)J\n+ *\/\n+JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_LinuxGLFactory_nInitialize\n+(JNIEnv *env, jclass class, jintArray attrArr) {\n+\n+    EGLint eglAttrs[MAX_GL_ATTRS_LENGTH];\n+    jint *attrs;\n+    ContextInfo *ctxInfo = NULL;\n+\n+    const char *glVersion;\n+    const char *glVendor;\n+    const char *glRenderer;\n+    char *tmpVersionStr;\n+    int versionNumbers[2];\n+    const char *glExtensions;\n+    const char *eglExtensions;\n+    EGLint majorVersion;\n+    EGLint minorVersion;\n+    Display *display = NULL;\n+    EGLDisplay eglDisplay;\n+    EGLConfig eglConfig;\n+    int num_configs;\n+\n+    if (attrArr == NULL) {\n+        return 0;\n+    }\n+\n+    attrs = (*env)->GetIntArrayElements(env, attrArr, NULL);\n+    setEGLAttrs(attrs, eglAttrs);\n+    (*env)->ReleaseIntArrayElements(env, attrArr, attrs, JNI_ABORT);\n+\n+    display = XOpenDisplay(0);\n+    if (display == NULL) {\n+        return 0;\n+    }\n+\n+    eglDisplay = eglGetDisplay(display);\n+\n+    if (eglDisplay == EGL_NO_DISPLAY) {\n+        fprintf(stderr, \"Prism ES2 Error: Initialize - EGL_NO_DISPLAY\\n\");\n+        return 0;\n+    }\n+\n+    if (!eglBindAPI(EGL_OPENGL_API)) {\n+        fprintf(stderr, \"Prism ES2 Error: Initialize - cannot bind EGL_OPENGL_API.\\n\");\n+        return 0;\n+    }\n+\n+    if (!eglInitialize(eglDisplay, &majorVersion, &minorVersion)) {\n+        fprintf(stderr, \"Prism ES2 Error: Initialize - eglInitialize failed. Version: %d.%d\\n\",\n+                majorVersion, minorVersion);\n+        return 0;\n+    }\n+\n+    if ((eglGetConfigs(eglDisplay, NULL, 0, &num_configs) != EGL_TRUE) || (num_configs == 0)) {\n+        fprintf(stderr, \"Prism ES2 Error: Initialize - no EGL configuration available\\n\");\n+        return 0;\n+    }\n+\n+    if (eglChooseConfig(eglDisplay, eglAttrs, &eglConfig, 1, &num_configs) != EGL_TRUE) {\n+        fprintf(stderr, \"Prism ES2 Error: Initialize - eglChooseConfig failed\\n\");\n+        return 0;\n+    }\n+\n+    EGLContext eglContext = eglCreateContext(eglDisplay, eglConfig, EGL_NO_CONTEXT, NULL);\n+\n+    if (!eglMakeCurrent(eglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE, eglContext)) {\n+        printAndReleaseResources(eglDisplay, EGL_NO_SURFACE, eglContext,\n+                \"Prism ES2 Error: eglMakeCurrent failed\");\n+        return 0;\n+    }\n+\n+    \/* Get the OpenGL version *\/\n+    glVersion = (char *) glGetString(GL_VERSION);\n+    if (glVersion == NULL) {\n+        printAndReleaseResources(eglDisplay, EGL_NO_SURFACE, eglContext,\n+                \"glVersion == null\");\n+        return 0;\n+    }\n+\n+    \/* find out the version, major and minor version number *\/\n+    tmpVersionStr = strdup(glVersion);\n+    extractVersionInfo(tmpVersionStr, versionNumbers);\n+    free(tmpVersionStr);\n+\n+\/\/    fprintf(stderr, \"GL_VERSION string = %s\\n\", glVersion);\n+\/\/    fprintf(stderr, \"GL_VERSION (major.minor) = %d.%d\\n\",\n+\/\/            versionNumbers[0], versionNumbers[1]);\n+\n+    \/*\n+     * Targeted Cards: Intel HD Graphics, Intel HD Graphics 2000\/3000,\n+     * Radeon HD 2350, GeForce FX (with newer drivers), GeForce 7 series or higher\n+     *\n+     * Check for OpenGL 2.1 or later.\n+     *\/\n+    if ((versionNumbers[0] < 2) || ((versionNumbers[0] == 2) && (versionNumbers[1] < 1))) {\n+        fprintf(stderr, \"Prism-ES2 Error: GL_VERSION (major.minor) = %d.%d\\n\",\n+                versionNumbers[0], versionNumbers[1]);\n+        printAndReleaseResources(eglDisplay, EGL_NO_SURFACE, eglContext, NULL);\n+        return 0;\n+    }\n+\n+    \/* Get the OpenGL vendor and renderer *\/\n+    glVendor = (char *) glGetString(GL_VENDOR);\n+    if (glVendor == NULL) {\n+        glVendor = \"<UNKNOWN>\";\n+    }\n+    glRenderer = (char *) glGetString(GL_RENDERER);\n+    if (glRenderer == NULL) {\n+        glRenderer = \"<UNKNOWN>\";\n+    }\n+\n+    glExtensions = (char *) glGetString(GL_EXTENSIONS);\n+    if (glExtensions == NULL) {\n+        printAndReleaseResources(eglDisplay, EGL_NO_SURFACE, eglContext,\n+                \"Prism-ES2 Error : glExtensions == null\");\n+        return 0;\n+    }\n+\n+    \/\/ We use GL_ARB_pixel_buffer_object as an guide to\n+    \/\/ determine PS 3.0 capable.\n+    if (!isExtensionSupported(glExtensions, \"GL_ARB_pixel_buffer_object\")) {\n+            printAndReleaseResources(eglDisplay, EGL_NO_SURFACE, eglContext,\n+             \"GL profile isn't PS 3.0 capable\");\n+        return 0;\n+    }\n+\n+    eglExtensions = (const char *) eglQueryString(eglDisplay, EGL_EXTENSIONS);\n+    if (eglExtensions == NULL) {\n+            printAndReleaseResources(eglDisplay, EGL_NO_SURFACE, eglContext,\n+                \"eglExtensions == null\");\n+        return 0;\n+    }\n+\n+    \/* Note: We are only storing the string information of a driver.\n+     Assuming a system with a single or homogeneous GPUs. For the case\n+     of heterogeneous GPUs system the string information will need to move to\n+     GLContext class. *\/\n+    \/* allocate the structure *\/\n+    ctxInfo = (ContextInfo *) malloc(sizeof (ContextInfo));\n+    if (ctxInfo == NULL) {\n+        fprintf(stderr, \"Prism ES2 Error: Initialize - Failed in malloc\\n\");\n+        return 0;\n+    }\n+\n+    \/* initialize the structure *\/\n+    initializeCtxInfo(ctxInfo);\n+    ctxInfo->versionStr = strdup(glVersion);\n+    ctxInfo->vendorStr = strdup(glVendor);\n+    ctxInfo->rendererStr = strdup(glRenderer);\n+    ctxInfo->glExtensionStr = strdup(glExtensions);\n+    ctxInfo->eglExtensionStr = strdup(eglExtensions);\n+    ctxInfo->versionNumbers[0] = versionNumbers[0];\n+    ctxInfo->versionNumbers[1] = versionNumbers[1];\n+    ctxInfo->gl2 = JNI_TRUE;\n+    ctxInfo->eglDisplay = eglDisplay;\n+\n+    return ptr_to_jlong(ctxInfo);\n+}\n+\n+\/*\n+ * Class:     com_sun_prism_es2_LinuxGLFactory\n+ * Method:    nGetAdapterOrdinal\n+ * Signature: (J)I\n+ *\/\n+JNIEXPORT jint JNICALL Java_com_sun_prism_es2_LinuxGLFactory_nGetAdapterOrdinal\n+(JNIEnv *env, jclass class, jlong screen) {\n+    \/\/TODO: Needs implementation to handle multi-monitors (RT-27437)\n+    return 0;\n+}\n+\n+\/*\n+ * Class:     com_sun_prism_es2_LinuxGLFactory\n+ * Method:    nGetAdapterCount\n+ * Signature: ()I\n+ *\/\n+JNIEXPORT jint JNICALL Java_com_sun_prism_es2_LinuxGLFactory_nGetAdapterCount\n+(JNIEnv *env, jclass class) {\n+    \/\/TODO: Needs implementation to handle multi-monitors (RT-27437)\n+    return 1;\n+}\n+\n+\/*\n+ * Class:     com_sun_prism_es2_LinuxGLFactory\n+ * Method:    nGetDefaultScreen\n+ * Signature: (J)I\n+ *\/\n+JNIEXPORT jint JNICALL Java_com_sun_prism_es2_LinuxGLFactory_nGetDefaultScreen\n+(JNIEnv *env, jclass class, jlong nativeCtxInfo) {\n+    ContextInfo *ctxInfo = (ContextInfo *) jlong_to_ptr(nativeCtxInfo);\n+    if (ctxInfo == NULL) {\n+        return 0;\n+    }\n+    return (jint) ctxInfo->screen;\n+}\n+\n+\/*\n+ * Class:     com_sun_prism_es2_LinuxGLFactory\n+ * Method:    nGetDisplay\n+ * Signature: (J)J\n+ *\/\n+JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_LinuxGLFactory_nGetDisplay\n+(JNIEnv *env, jclass class, jlong nativeCtxInfo) {\n+    ContextInfo *ctxInfo = (ContextInfo *) jlong_to_ptr(nativeCtxInfo);\n+    if (ctxInfo == NULL) {\n+        return 0;\n+    }\n+\n+    return (jlong) ptr_to_jlong(ctxInfo->display);\n+}\n+\n+\/*\n+ * Class:     com_sun_prism_es2_LinuxGLFactory\n+ * Method:    nGetVisualID\n+ * Signature: (J)J\n+ *\/\n+JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_LinuxGLFactory_nGetVisualID\n+(JNIEnv *env, jclass class, jlong nativeCtxInfo) {\n+    ContextInfo *ctxInfo = (ContextInfo *) jlong_to_ptr(nativeCtxInfo);\n+    if (ctxInfo == NULL) {\n+        return 0;\n+    }\n+    return (jlong) ctxInfo->visualID;\n+}\n+\n+\/*\n+ * Class:     com_sun_prism_es2_X11_LinuxGLFactory\n+ * Method:    nGetIsGL2\n+ * Signature: (J)Z\n+ *\/\n+JNIEXPORT jboolean JNICALL Java_com_sun_prism_es2_LinuxGLFactory_nGetIsGL2\n+(JNIEnv *env, jclass class, jlong nativeCtxInfo) {\n+    return ((ContextInfo *)jlong_to_ptr(nativeCtxInfo))->gl2;\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/linux\/egl\/LinuxGLFactory.c","additions":359,"deletions":0,"binary":false,"changes":359,"status":"added"},{"patch":"@@ -0,0 +1,163 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <jni.h>\n+#include <stdlib.h>\n+#include <assert.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <math.h>\n+\n+#include \"..\/PrismES2Defs.h\"\n+#include \"com_sun_prism_es2_LinuxGLPixelFormat.h\"\n+\n+extern void setEGLAttrs(jint *attrs, int *eglAttrs);\n+extern void printAndReleaseResources(EGLDisplay eglDisplay, EGLSurface eglSurface, EGLContext eglContext,\n+                                    const char *message);\n+\n+static EGLDisplay getPlatformDisplay(void * display) {\n+    EGLDisplay eglDisplay = NULL;\n+\n+    const char* extensions = eglQueryString(NULL, EGL_EXTENSIONS);\n+\n+    if (strstr(extensions, \"EGL_KHR_platform_base\") != NULL) {\n+        PFNEGLGETPLATFORMDISPLAYPROC getPlatformDisplay = (void *) eglGetProcAddress(\"eglGetPlatformDisplay\");\n+\n+        if (getPlatformDisplay != NULL) {\n+            eglDisplay = getPlatformDisplay(EGL_PLATFORM_X11_KHR, display, NULL);\n+\n+            if (eglDisplay != EGL_NO_DISPLAY) {\n+                goto out;\n+            }\n+        }\n+    }\n+\n+    if (strstr(extensions, \"EGL_EXT_platform_base\") != NULL) {\n+        PFNEGLGETPLATFORMDISPLAYEXTPROC getPlatformDisplay =  (void *) eglGetProcAddress(\"eglGetPlatformDisplayEXT\");\n+\n+        if (getPlatformDisplay != NULL) {\n+            eglDisplay = getPlatformDisplay(EGL_PLATFORM_X11_EXT, display, NULL);\n+\n+            if (eglDisplay != EGL_NO_DISPLAY) {\n+                goto out;\n+            }\n+        }\n+    }\n+\n+    eglDisplay = eglGetDisplay((EGLNativeDisplayType) display);\n+\n+out:\n+    return eglDisplay;\n+}\n+\/*\n+ * Class:     com_sun_prism_es2_LinuxGLPixelFormat\n+ * Method:    nCreatePixelFormat\n+ * Signature: (J[I)J\n+ *\/\n+JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_LinuxGLPixelFormat_nCreatePixelFormat\n+(JNIEnv *env, jclass class, jlong nativeScreen, jintArray attrArr) {\n+    int eglAttrs[MAX_GL_ATTRS_LENGTH]; \/* value, attr pair plus a None *\/\n+    jint *attrs;\n+    PixelFormatInfo *pfInfo = NULL;\n+\n+    EGLConfig eglConfig;\n+    int num_configs;\n+    Display *display;\n+    int screen;\n+    Window root;\n+    Window win = None;\n+\n+    if (attrArr == NULL) {\n+        return 0;\n+    }\n+    attrs = (*env)->GetIntArrayElements(env, attrArr, NULL);\n+    setEGLAttrs(attrs, eglAttrs);\n+    (*env)->ReleaseIntArrayElements(env, attrArr, attrs, JNI_ABORT);\n+\n+    \/\/ RT-27386\n+    \/\/ TODO: Need to use nativeScreen to create this requested pixelformat\n+    \/\/ currently hack to work on a single monitor system\n+    display = XOpenDisplay(0);\n+    if (display == NULL) {\n+        fprintf(stderr, \"Prism ES2 Error: XOpenDisplay failed\\n\");\n+        return 0;\n+    }\n+\n+    screen = DefaultScreen(display);\n+\n+    EGLDisplay eglDisplay = getPlatformDisplay(display);\n+\n+    if (eglDisplay == EGL_NO_DISPLAY) {\n+        fprintf(stderr, \"Prism ES2 Error: CreatePixelFormat - no supported display found\\n\");\n+        return 0;\n+    }\n+\n+    if (!eglInitialize(eglDisplay, NULL, NULL)) {\n+        fprintf(stderr, \"Prism ES2 Error: CreatePixelFormat - eglInitialize failed.\\n\");\n+        return 0;\n+    }\n+\n+    if (!eglBindAPI(EGL_OPENGL_API)) {\n+        fprintf(stderr, \"Prism ES2 Error: CreatePixelFormat - cannot bind EGL_OPENGL_API.\\n\");\n+        return 0;\n+    }\n+\n+    if ((eglGetConfigs(eglDisplay, NULL, 0, &num_configs) != EGL_TRUE) || (num_configs == 0)) {\n+        fprintf(stderr, \"Prism ES2 Error: CreatePixelFormat - no EGL configuration available\\n\");\n+        return 0;\n+    }\n+\n+    if (eglChooseConfig(eglDisplay, eglAttrs, &eglConfig, 1, &num_configs) != EGL_TRUE) {\n+        fprintf(stderr, \"Prism ES2 Error: CreatePixelFormat - eglChooseConfig failed\\n\");\n+        return 0;\n+    }\n+\n+    root = RootWindow(display, screen);\n+\n+    win = XCreateSimpleWindow(display, root, 0, 0, 1, 1, 0,\n+                              WhitePixel(display, screen),\n+                              WhitePixel(display, screen));\n+\n+    if (win == None) {\n+        printAndReleaseResources(eglDisplay, NULL, NULL, \"Prism ES2 Error: XCreateWindow failed\");\n+        return 0;\n+    }\n+\n+    \/* allocate the structure *\/\n+    pfInfo = (PixelFormatInfo *) malloc(sizeof (PixelFormatInfo));\n+    if (pfInfo == NULL) {\n+        fprintf(stderr, \"Prism ES2 Error: CreatePixelFormat - Failed in malloc\\n\");\n+        return 0;\n+    }\n+\n+    \/* initialize the structure *\/\n+    initializePixelFormatInfo(pfInfo);\n+    pfInfo->display = display;\n+    pfInfo->dummyWin = win;\n+    pfInfo->eglConfig = eglConfig;\n+    pfInfo->eglDisplay = eglDisplay;\n+\n+    return ptr_to_jlong(pfInfo);\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/linux\/egl\/LinuxGLPixelFormat.c","additions":163,"deletions":0,"binary":false,"changes":163,"status":"added"},{"patch":"@@ -34,1 +34,1 @@\n-#include \"com_sun_prism_es2_X11GLContext.h\"\n+#include \"com_sun_prism_es2_LinuxGLContext.h\"\n@@ -37,1 +37,1 @@\n- * Class:     com_sun_prism_es2_X11GLContext\n+ * Class:     com_sun_prism_es2_LinuxGLContext\n@@ -41,1 +41,1 @@\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_X11GLContext_nInitialize\n+JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_LinuxGLContext_nInitialize\n@@ -301,1 +301,1 @@\n- * Class:     com_sun_prism_es2_X11GLContext\n+ * Class:     com_sun_prism_es2_LinuxGLContext\n@@ -305,1 +305,1 @@\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_X11GLContext_nGetNativeHandle\n+JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_LinuxGLContext_nGetNativeHandle\n@@ -315,1 +315,1 @@\n- * Class:     com_sun_prism_es2_X11GLContext\n+ * Class:     com_sun_prism_es2_LinuxGLContext\n@@ -319,1 +319,1 @@\n-JNIEXPORT void JNICALL Java_com_sun_prism_es2_X11GLContext_nMakeCurrent\n+JNIEXPORT void JNICALL Java_com_sun_prism_es2_LinuxGLContext_nMakeCurrent\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/linux\/glx\/LinuxGLContext.c","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/x11\/X11GLContext.c","status":"renamed"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <jni.h>\n+#include <stdlib.h>\n+#include <assert.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <math.h>\n+\n+#include \"..\/PrismES2Defs.h\"\n+#include \"com_sun_prism_es2_LinuxGLDrawable.h\"\n+\n+\/*\n+ * Class:     com_sun_prism_es2_LinuxGLDrawable\n+ * Method:    nCreateDrawable\n+ * Signature: (JJ)J\n+ *\/\n+JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_LinuxGLDrawable_nCreateDrawable\n+(JNIEnv *env, jclass class, jlong nativeWindow, jlong nativePFInfo) {\n+    DrawableInfo *dInfo = NULL;\n+    PixelFormatInfo *pfInfo = (PixelFormatInfo *) jlong_to_ptr(nativePFInfo);\n+    if (pfInfo == NULL) {\n+        return 0;\n+    }\n+\n+    \/* allocate the structure *\/\n+    dInfo = (DrawableInfo *) malloc(sizeof (DrawableInfo));\n+    if (dInfo == NULL) {\n+        fprintf(stderr, \"nCreateDrawable: Failed in malloc\\n\");\n+        return 0;\n+    }\n+\n+    \/* initialize the structure *\/\n+    memset(dInfo, 0, sizeof(DrawableInfo));\n+\n+    \/\/ Use the dummyWin that was already created in the pfInfo\n+    \/\/ since this is an non-onscreen drawable.\n+    dInfo->display = pfInfo->display;\n+    dInfo->win = (Window) jlong_to_ptr(nativeWindow);\n+    dInfo->onScreen = JNI_TRUE;\n+\n+    return ptr_to_jlong(dInfo);\n+}\n+\n+\/*\n+ * Class:     com_sun_prism_es2_LinuxGLDrawable\n+ * Method:    nGetDummyDrawable\n+ * Signature: (J)J\n+ *\/\n+JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_LinuxGLDrawable_nGetDummyDrawable\n+(JNIEnv *env, jclass class, jlong nativePFInfo) {\n+    DrawableInfo *dInfo = NULL;\n+    PixelFormatInfo *pfInfo = (PixelFormatInfo *) jlong_to_ptr(nativePFInfo);\n+    if (pfInfo == NULL) {\n+        return 0;\n+    }\n+\n+    \/* allocate the structure *\/\n+    dInfo = (DrawableInfo *) malloc(sizeof (DrawableInfo));\n+    if (dInfo == NULL) {\n+        fprintf(stderr, \"nGetDummyDrawable: Failed in malloc\\n\");\n+        return 0;\n+    }\n+\n+    \/* initialize the structure *\/\n+    memset(dInfo, 0, sizeof(DrawableInfo));\n+\n+    \/\/ Use the dummyWin that was already created in the pfInfo\n+    \/\/ since this is an non-onscreen drawable.\n+    dInfo->display = pfInfo->display;\n+    dInfo->win = pfInfo->dummyWin;\n+    dInfo->onScreen = JNI_FALSE;\n+\n+    return ptr_to_jlong(dInfo);\n+}\n+\n+\/*\n+ * Class:     com_sun_prism_es2_LinuxGLDrawable\n+ * Method:    nSwapBuffers\n+ * Signature: (J)Z\n+ *\/\n+JNIEXPORT jboolean JNICALL Java_com_sun_prism_es2_LinuxGLDrawable_nSwapBuffers\n+(JNIEnv *env, jclass class, jlong nativeDInfo) {\n+    DrawableInfo *dInfo = (DrawableInfo *) jlong_to_ptr(nativeDInfo);\n+    if (dInfo == NULL) {\n+        return JNI_FALSE;\n+    }\n+    glXSwapBuffers(dInfo->display, dInfo->win);\n+    return JNI_TRUE;\n+}\n+\n+\/*\n+ * Class:     com_sun_prism_es2_LinuxGLDrawable\n+ * Method:    nReleaseDrawable\n+ * Signature: (J)V\n+ *\/\n+JNIEXPORT void JNICALL Java_com_sun_prism_es2_LinuxGLDrawable_nReleaseDrawable\n+(JNIEnv *env, jclass class, jlong nativeDInfo) {\n+    DrawableInfo *dInfo = (DrawableInfo *) jlong_to_ptr(nativeDInfo);\n+    if (dInfo == NULL) {\n+        return;\n+    }\n+\n+    free(dInfo);\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/linux\/glx\/LinuxGLDrawable.c","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-#include \"com_sun_prism_es2_X11GLFactory.h\"\n+#include \"com_sun_prism_es2_LinuxGLFactory.h\"\n@@ -162,1 +162,1 @@\n- * Class:     com_sun_prism_es2_X11GLFactory\n+ * Class:     com_sun_prism_es2_LinuxGLFactory\n@@ -166,1 +166,1 @@\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_X11GLFactory_nInitialize\n+JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_LinuxGLFactory_nInitialize\n@@ -169,1 +169,1 @@\n-    int glxAttrs[MAX_GLX_ATTRS_LENGTH]; \/* value, attr pair plus a None *\/\n+    int glxAttrs[MAX_GL_ATTRS_LENGTH]; \/* value, attr pair plus a None *\/\n@@ -380,1 +380,1 @@\n- * Class:     com_sun_prism_es2_X11GLFactory\n+ * Class:     com_sun_prism_es2_LinuxGLFactory\n@@ -384,1 +384,1 @@\n-JNIEXPORT jint JNICALL Java_com_sun_prism_es2_X11GLFactory_nGetAdapterOrdinal\n+JNIEXPORT jint JNICALL Java_com_sun_prism_es2_LinuxGLFactory_nGetAdapterOrdinal\n@@ -391,1 +391,1 @@\n- * Class:     com_sun_prism_es2_X11GLFactory\n+ * Class:     com_sun_prism_es2_LinuxGLFactory\n@@ -395,1 +395,1 @@\n-JNIEXPORT jint JNICALL Java_com_sun_prism_es2_X11GLFactory_nGetAdapterCount\n+JNIEXPORT jint JNICALL Java_com_sun_prism_es2_LinuxGLFactory_nGetAdapterCount\n@@ -402,1 +402,1 @@\n- * Class:     com_sun_prism_es2_X11GLFactory\n+ * Class:     com_sun_prism_es2_LinuxGLFactory\n@@ -406,1 +406,1 @@\n-JNIEXPORT jint JNICALL Java_com_sun_prism_es2_X11GLFactory_nGetDefaultScreen\n+JNIEXPORT jint JNICALL Java_com_sun_prism_es2_LinuxGLFactory_nGetDefaultScreen\n@@ -416,1 +416,1 @@\n- * Class:     com_sun_prism_es2_X11GLFactory\n+ * Class:     com_sun_prism_es2_LinuxGLFactory\n@@ -420,1 +420,1 @@\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_X11GLFactory_nGetDisplay\n+JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_LinuxGLFactory_nGetDisplay\n@@ -430,1 +430,1 @@\n- * Class:     com_sun_prism_es2_X11GLFactory\n+ * Class:     com_sun_prism_es2_LinuxGLFactory\n@@ -434,1 +434,1 @@\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_X11GLFactory_nGetVisualID\n+JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_LinuxGLFactory_nGetVisualID\n@@ -444,1 +444,1 @@\n- * Class:     com_sun_prism_es2_X11_X11GLFactory\n+ * Class:     com_sun_prism_es2_X11_LinuxGLFactory\n@@ -448,1 +448,1 @@\n-JNIEXPORT jboolean JNICALL Java_com_sun_prism_es2_X11GLFactory_nGetIsGL2\n+JNIEXPORT jboolean JNICALL Java_com_sun_prism_es2_LinuxGLFactory_nGetIsGL2\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/linux\/glx\/LinuxGLFactory.c","additions":17,"deletions":17,"binary":false,"changes":34,"previous_filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/x11\/X11GLFactory.c","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-#include \"com_sun_prism_es2_X11GLPixelFormat.h\"\n+#include \"com_sun_prism_es2_LinuxGLPixelFormat.h\"\n@@ -42,1 +42,1 @@\n- * Class:     com_sun_prism_es2_X11GLPixelFormat\n+ * Class:     com_sun_prism_es2_LinuxGLPixelFormat\n@@ -46,1 +46,1 @@\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_X11GLPixelFormat_nCreatePixelFormat\n+JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_LinuxGLPixelFormat_nCreatePixelFormat\n@@ -48,1 +48,1 @@\n-    int glxAttrs[MAX_GLX_ATTRS_LENGTH]; \/* value, attr pair plus a None *\/\n+    int glxAttrs[MAX_GL_ATTRS_LENGTH]; \/* value, attr pair plus a None *\/\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/linux\/glx\/LinuxGLPixelFormat.c","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/x11\/X11GLPixelFormat.c","status":"renamed"},{"patch":"@@ -1,128 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <jni.h>\n-#include <stdlib.h>\n-#include <assert.h>\n-#include <stdio.h>\n-#include <string.h>\n-#include <math.h>\n-\n-#include \"..\/PrismES2Defs.h\"\n-#include \"com_sun_prism_es2_X11GLDrawable.h\"\n-\n-\/*\n- * Class:     com_sun_prism_es2_X11GLDrawable\n- * Method:    nCreateDrawable\n- * Signature: (JJ)J\n- *\/\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_X11GLDrawable_nCreateDrawable\n-(JNIEnv *env, jclass class, jlong nativeWindow, jlong nativePFInfo) {\n-    DrawableInfo *dInfo = NULL;\n-    PixelFormatInfo *pfInfo = (PixelFormatInfo *) jlong_to_ptr(nativePFInfo);\n-    if (pfInfo == NULL) {\n-        return 0;\n-    }\n-\n-    \/* allocate the structure *\/\n-    dInfo = (DrawableInfo *) malloc(sizeof (DrawableInfo));\n-    if (dInfo == NULL) {\n-        fprintf(stderr, \"nCreateDrawable: Failed in malloc\\n\");\n-        return 0;\n-    }\n-\n-    \/* initialize the structure *\/\n-    memset(dInfo, 0, sizeof(DrawableInfo));\n-\n-    \/\/ Use the dummyWin that was already created in the pfInfo\n-    \/\/ since this is an non-onscreen drawable.\n-    dInfo->display = pfInfo->display;\n-    dInfo->win = (Window) jlong_to_ptr(nativeWindow);\n-    dInfo->onScreen = JNI_TRUE;\n-\n-    return ptr_to_jlong(dInfo);\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_X11GLDrawable\n- * Method:    nGetDummyDrawable\n- * Signature: (J)J\n- *\/\n-JNIEXPORT jlong JNICALL Java_com_sun_prism_es2_X11GLDrawable_nGetDummyDrawable\n-(JNIEnv *env, jclass class, jlong nativePFInfo) {\n-    DrawableInfo *dInfo = NULL;\n-    PixelFormatInfo *pfInfo = (PixelFormatInfo *) jlong_to_ptr(nativePFInfo);\n-    if (pfInfo == NULL) {\n-        return 0;\n-    }\n-\n-    \/* allocate the structure *\/\n-    dInfo = (DrawableInfo *) malloc(sizeof (DrawableInfo));\n-    if (dInfo == NULL) {\n-        fprintf(stderr, \"nGetDummyDrawable: Failed in malloc\\n\");\n-        return 0;\n-    }\n-\n-    \/* initialize the structure *\/\n-    memset(dInfo, 0, sizeof(DrawableInfo));\n-\n-    \/\/ Use the dummyWin that was already created in the pfInfo\n-    \/\/ since this is an non-onscreen drawable.\n-    dInfo->display = pfInfo->display;\n-    dInfo->win = pfInfo->dummyWin;\n-    dInfo->onScreen = JNI_FALSE;\n-\n-    return ptr_to_jlong(dInfo);\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_X11GLDrawable\n- * Method:    nSwapBuffers\n- * Signature: (J)Z\n- *\/\n-JNIEXPORT jboolean JNICALL Java_com_sun_prism_es2_X11GLDrawable_nSwapBuffers\n-(JNIEnv *env, jclass class, jlong nativeDInfo) {\n-    DrawableInfo *dInfo = (DrawableInfo *) jlong_to_ptr(nativeDInfo);\n-    if (dInfo == NULL) {\n-        return JNI_FALSE;\n-    }\n-    glXSwapBuffers(dInfo->display, dInfo->win);\n-    return JNI_TRUE;\n-}\n-\n-\/*\n- * Class:     com_sun_prism_es2_X11GLDrawable\n- * Method:    nReleaseDrawable\n- * Signature: (J)V\n- *\/\n-JNIEXPORT void JNICALL Java_com_sun_prism_es2_X11GLDrawable_nReleaseDrawable\n-(JNIEnv *env, jclass class, jlong nativeDInfo) {\n-    DrawableInfo *dInfo = (DrawableInfo *) jlong_to_ptr(nativeDInfo);\n-    if (dInfo == NULL) {\n-        return;\n-    }\n-\n-    free(dInfo);\n-}\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/x11\/X11GLDrawable.c","additions":0,"deletions":128,"binary":false,"changes":128,"status":"deleted"}]}