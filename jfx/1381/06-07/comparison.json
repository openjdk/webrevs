{"files":[{"patch":"@@ -8,1 +8,1 @@\n-  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_17\" project-jdk-name=\"17\" project-jdk-type=\"JavaSDK\">\n+  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_21\" default=\"true\" project-jdk-name=\"17\" project-jdk-type=\"JavaSDK\">\n","filename":".idea\/misc.xml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -270,2 +270,2 @@\n-LINUX.prismES2EGL.linkFlags = IS_STATIC_BUILD ? linkFlags : [linkFlags, \"-lGL\", \"-lEGL\"].flatten()\n-LINUX.prismES2EGL.lib = \"prism_es2_egl\"\n+LINUX.prismES2EGL.linkFlags = IS_STATIC_BUILD ? linkFlags : [linkFlags, \"-lX11\", \"-lGL\", \"-lEGL\"].flatten()\n+LINUX.prismES2EGL.lib = \"prism_es2_egl_x11\"\n","filename":"buildSrc\/linux.gradle","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-        loadNativeLib(\"prism_es2_egl\");\n+        loadNativeLib(\"prism_es2_egl_x11\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/LinuxEGLFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,6 +120,0 @@\n-#ifdef IS_LINUX_EGL\n-        EGLDisplay eglDisplay = eglGetDisplay(EGL_DEFAULT_DISPLAY);\n-        eglDestroySurface(eglDisplay, ctxInfo->eglSurface);\n-        eglDestroyContext(eglDisplay, ctxInfo->context);\n-#endif\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/GLContext.c","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        eglDestroySurface(eglGetDisplay(EGL_DEFAULT_DISPLAY), dInfo->eglSurface);\n+        eglDestroySurface(dInfo->eglDisplay, dInfo->eglSurface);\n@@ -72,0 +72,1 @@\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/GLDrawable.c","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-#ifdef IS_LINUX_IS_GLX\n+#if defined(IS_LINUX_GLX) || defined(IS_LINUX_EGL)\n@@ -66,7 +66,1 @@\n-    if (pfInfo->eglDisplay != NULL) {\n-        if (pfInfo->dummySurface != EGL_NO_SURFACE) {\n-            eglDestroySurface(pfInfo->eglDisplay, pfInfo->dummySurface);\n-        }\n-\n-        eglTerminate(pfInfo->eglDisplay);\n-    }\n+    eglTerminate(pfInfo->eglDisplay);\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/GLPixelFormat.c","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -166,2 +166,0 @@\n-\n-#ifdef IS_LINUX_GLX\n@@ -170,0 +168,2 @@\n+\n+#ifdef IS_LINUX_GLX\n@@ -177,1 +177,0 @@\n-    EGLSurface dummySurface;\n@@ -210,0 +209,1 @@\n+    EGLSurface eglDisplay;\n@@ -255,1 +255,1 @@\n-     GLXContext context;\n+    GLXContext context;\n@@ -259,1 +259,1 @@\n-    EGLDisplay eglSurface;\n+    EGLDisplay eglDisplay;\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/PrismES2Defs.h","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    EGLDisplay eglDisplay = eglGetDisplay(EGL_DEFAULT_DISPLAY);\n+    EGLDisplay eglDisplay = pfInfo->eglDisplay;\n@@ -262,0 +262,2 @@\n+    ctxInfo->eglDisplay = eglDisplay;\n+    ctxInfo->display = pfInfo->display;\n@@ -302,1 +304,0 @@\n-    EGLDisplay eglDisplay = eglGetDisplay(EGL_DEFAULT_DISPLAY);\n@@ -304,1 +305,1 @@\n-    if (!eglMakeCurrent(eglDisplay, dInfo->eglSurface, dInfo->eglSurface, ctxInfo->context)) {\n+    if (!eglMakeCurrent(ctxInfo->eglDisplay, dInfo->eglSurface, dInfo->eglSurface, ctxInfo->context)) {\n@@ -316,1 +317,1 @@\n-    if (dInfo->eglSurface != EGL_NO_SURFACE && !eglSwapInterval(eglDisplay, interval)) {\n+    if (dInfo->eglSurface != EGL_NO_SURFACE && !eglSwapInterval(ctxInfo->eglDisplay, interval)) {\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/linux\/egl\/LinuxGLContext.c","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -72,0 +72,3 @@\n+    dInfo->display = pfInfo->display;\n+    dInfo->eglDisplay = pfInfo->eglDisplay;\n+    dInfo->win = (Window) jlong_to_ptr(nativeWindow);\n@@ -101,1 +104,1 @@\n-    \/\/ Use the dummySurface that was already created in the pfInfo\n+    \/\/ Use the dummyWin that was already created in the pfInfo\n@@ -103,1 +106,2 @@\n-    dInfo->eglSurface = pfInfo->dummySurface;\n+    dInfo->display = pfInfo->display;\n+    dInfo->win = pfInfo->dummyWin;\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/linux\/egl\/LinuxGLDrawable.c","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include <X11\/Xutil.h>\n@@ -143,0 +144,1 @@\n+    Display *display = NULL;\n@@ -155,1 +157,6 @@\n-    eglDisplay = eglGetDisplay(EGL_DEFAULT_DISPLAY);\n+    display = XOpenDisplay(0);\n+    if (display == NULL) {\n+        return 0;\n+    }\n+\n+    eglDisplay = eglGetDisplay(display);\n@@ -274,0 +281,1 @@\n+    ctxInfo->eglDisplay = eglDisplay;\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/linux\/egl\/LinuxGLFactory.c","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+extern void setEGLAttrs(jint *attrs, int *eglAttrs);\n@@ -38,1 +39,0 @@\n-extern const char* eglGetErrorString(EGLint error);\n@@ -40,2 +40,2 @@\n-void setEGLPbufferAttrs(jint *attrs, int *eglAttrs) {\n-    int index = 0;\n+static EGLDisplay getPlatformDisplay(void * display) {\n+    EGLDisplay eglDisplay = NULL;\n@@ -43,2 +43,1 @@\n-    eglAttrs[index++] = EGL_RENDERABLE_TYPE;\n-    eglAttrs[index++] = EGL_OPENGL_BIT;\n+    const char* extensions = eglQueryString(NULL, EGL_EXTENSIONS);\n@@ -46,2 +45,2 @@\n-    eglAttrs[index++] = EGL_SURFACE_TYPE;\n-    eglAttrs[index++] = EGL_PBUFFER_BIT;\n+    if (strstr(extensions, \"EGL_KHR_platform_base\") != NULL) {\n+        PFNEGLGETPLATFORMDISPLAYPROC getPlatformDisplay = (void *) eglGetProcAddress(\"eglGetPlatformDisplay\");\n@@ -49,8 +48,2 @@\n-    eglAttrs[index++] = EGL_RED_SIZE;\n-    eglAttrs[index++] = attrs[RED_SIZE];\n-    eglAttrs[index++] = EGL_GREEN_SIZE;\n-    eglAttrs[index++] = attrs[GREEN_SIZE];\n-    eglAttrs[index++] = EGL_BLUE_SIZE;\n-    eglAttrs[index++] = attrs[BLUE_SIZE];\n-    eglAttrs[index++] = EGL_ALPHA_SIZE;\n-    eglAttrs[index++] = attrs[ALPHA_SIZE];\n+        if (getPlatformDisplay != NULL) {\n+            eglDisplay = getPlatformDisplay(EGL_PLATFORM_X11_KHR, display, NULL);\n@@ -58,2 +51,5 @@\n-    eglAttrs[index++] = EGL_DEPTH_SIZE;\n-    eglAttrs[index++] = attrs[DEPTH_SIZE];\n+            if (eglDisplay != EGL_NO_DISPLAY) {\n+                goto out;\n+            }\n+        }\n+    }\n@@ -61,2 +57,13 @@\n-    eglAttrs[index] = EGL_NONE;\n-}\n+    if (strstr(extensions, \"EGL_EXT_platform_base\") != NULL) {\n+        PFNEGLGETPLATFORMDISPLAYEXTPROC getPlatformDisplay =  (void *) eglGetProcAddress(\"eglGetPlatformDisplayEXT\");\n+\n+        if (getPlatformDisplay != NULL) {\n+            eglDisplay = getPlatformDisplay(EGL_PLATFORM_X11_EXT, display, NULL);\n+\n+            if (eglDisplay != EGL_NO_DISPLAY) {\n+                goto out;\n+            }\n+        }\n+    }\n+\n+    eglDisplay = eglGetDisplay((EGLNativeDisplayType) display);\n@@ -64,0 +71,3 @@\n+out:\n+    return eglDisplay;\n+}\n@@ -77,0 +87,1 @@\n+    Display *display;\n@@ -78,0 +89,2 @@\n+    Window root;\n+    Window win = None;\n@@ -83,1 +96,1 @@\n-    setEGLPbufferAttrs(attrs, eglAttrs);\n+    setEGLAttrs(attrs, eglAttrs);\n@@ -86,1 +99,12 @@\n-    EGLDisplay eglDisplay = eglGetDisplay(EGL_DEFAULT_DISPLAY);\n+    \/\/ RT-27386\n+    \/\/ TODO: Need to use nativeScreen to create this requested pixelformat\n+    \/\/ currently hack to work on a single monitor system\n+    display = XOpenDisplay(0);\n+    if (display == NULL) {\n+        fprintf(stderr, \"Prism ES2 Error: XOpenDisplay failed\\n\");\n+        return 0;\n+    }\n+\n+    screen = DefaultScreen(display);\n+\n+    EGLDisplay eglDisplay = getPlatformDisplay(display);\n@@ -113,5 +137,1 @@\n-    EGLint pbufferAttribs[] = {\n-        EGL_WIDTH, 1,\n-        EGL_HEIGHT, 1,\n-        EGL_NONE\n-    };\n+    root = RootWindow(display, screen);\n@@ -119,1 +139,3 @@\n-    EGLSurface pbufferSurface = eglCreatePbufferSurface(eglDisplay, eglConfig, pbufferAttribs);\n+    win = XCreateSimpleWindow(display, root, 0, 0, 1, 1, 0,\n+                              WhitePixel(display, screen),\n+                              WhitePixel(display, screen));\n@@ -121,3 +143,2 @@\n-    if (pbufferSurface == EGL_NO_SURFACE) {\n-        fprintf(stderr, \"Prism ES2 Error: CreatePixelFormat - eglCreatePbufferSurface failed [%s]\\n\",\n-                        eglGetErrorString(eglGetError()));\n+    if (win == None) {\n+        printAndReleaseResources(eglDisplay, NULL, NULL, \"Prism ES2 Error: XCreateWindow failed\");\n@@ -136,2 +157,2 @@\n-\n-    pfInfo->dummySurface = pbufferSurface;\n+    pfInfo->display = display;\n+    pfInfo->dummyWin = win;\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/linux\/egl\/LinuxGLPixelFormat.c","additions":53,"deletions":32,"binary":false,"changes":85,"status":"modified"}]}