{"files":[{"patch":"@@ -270,2 +270,2 @@\n-LINUX.prismES2EGL.linkFlags = IS_STATIC_BUILD ? linkFlags : [linkFlags, \"-lX11\", \"-lGL\", \"-lEGL\"].flatten()\n-LINUX.prismES2EGL.lib = \"prism_es2_egl_x11\"\n+LINUX.prismES2EGL.linkFlags = IS_STATIC_BUILD ? linkFlags : [linkFlags, \"-lGL\", \"-lEGL\"].flatten()\n+LINUX.prismES2EGL.lib = \"prism_es2_egl\"\n","filename":"buildSrc\/linux.gradle","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-        loadNativeLib(\"prism_es2_egl_x11\");\n+        loadNativeLib(\"prism_es2_egl\");\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/prism\/es2\/LinuxEGLFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -121,1 +121,3 @@\n-        eglDestroyContext(ctxInfo->eglDisplay, ctxInfo->context);\n+        EGLDisplay eglDisplay = eglGetDisplay(EGL_DEFAULT_DISPLAY);\n+        eglDestroySurface(eglDisplay, ctxInfo->eglSurface);\n+        eglDestroyContext(eglDisplay, ctxInfo->context);\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/GLContext.c","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,0 +64,6 @@\n+#ifdef IS_LINUX_EGL\n+    if (dInfo->eglSurface != NULL) {\n+        eglDestroySurface(eglGetDisplay(EGL_DEFAULT_DISPLAY), dInfo->eglSurface);\n+    }\n+#endif\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/GLDrawable.c","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-#ifdef IS_GLX\n+#ifdef IS_LINUX_IS_GLX\n@@ -64,0 +64,11 @@\n+\n+#ifdef IS_LINUX_EGL\n+    if (pfInfo->eglDisplay != NULL) {\n+        if (pfInfo->dummySurface != EGL_NO_SURFACE) {\n+            eglDestroySurface(pfInfo->eglDisplay, pfInfo->dummySurface);\n+        }\n+\n+        eglTerminate(pfInfo->eglDisplay);\n+    }\n+#endif\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/GLPixelFormat.c","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -166,2 +166,0 @@\n-    Display *display;\n-    Window dummyWin;\n@@ -170,0 +168,2 @@\n+    Display *display;\n+    Window dummyWin;\n@@ -177,0 +177,1 @@\n+    EGLSurface dummySurface;\n@@ -258,1 +259,0 @@\n-    EGLDisplay eglDisplay;\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/PrismES2Defs.h","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    EGLDisplay eglDisplay = pfInfo->eglDisplay;\n+    EGLDisplay eglDisplay = eglGetDisplay(EGL_DEFAULT_DISPLAY);\n@@ -262,2 +262,0 @@\n-    ctxInfo->eglDisplay = eglDisplay;\n-    ctxInfo->display = pfInfo->display;\n@@ -304,0 +302,1 @@\n+    EGLDisplay eglDisplay = eglGetDisplay(EGL_DEFAULT_DISPLAY);\n@@ -305,1 +304,1 @@\n-    if (!eglMakeCurrent(ctxInfo->eglDisplay, dInfo->eglSurface, dInfo->eglSurface, ctxInfo->context)) {\n+    if (!eglMakeCurrent(eglDisplay, dInfo->eglSurface, dInfo->eglSurface, ctxInfo->context)) {\n@@ -317,1 +316,1 @@\n-    if (dInfo->eglSurface != EGL_NO_SURFACE && !eglSwapInterval(ctxInfo->eglDisplay, interval)) {\n+    if (dInfo->eglSurface != EGL_NO_SURFACE && !eglSwapInterval(eglDisplay, interval)) {\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/linux\/egl\/LinuxGLContext.c","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -72,2 +72,0 @@\n-    dInfo->display = pfInfo->display;\n-    dInfo->win = (Window) jlong_to_ptr(nativeWindow);\n@@ -103,1 +101,1 @@\n-    \/\/ Use the dummyWin that was already created in the pfInfo\n+    \/\/ Use the dummySurface that was already created in the pfInfo\n@@ -105,2 +103,1 @@\n-    dInfo->display = pfInfo->display;\n-    dInfo->win = pfInfo->dummyWin;\n+    dInfo->eglSurface = pfInfo->dummySurface;\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/linux\/egl\/LinuxGLDrawable.c","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include <X11\/Xutil.h>\n@@ -144,1 +143,0 @@\n-    Display *display = NULL;\n@@ -157,6 +155,1 @@\n-    display = XOpenDisplay(0);\n-    if (display == NULL) {\n-        return 0;\n-    }\n-\n-    eglDisplay = eglGetDisplay(display);\n+    eglDisplay = eglGetDisplay(EGL_DEFAULT_DISPLAY);\n@@ -281,1 +274,0 @@\n-    ctxInfo->eglDisplay = eglDisplay;\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/linux\/egl\/LinuxGLFactory.c","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-extern void setEGLAttrs(jint *attrs, int *eglAttrs);\n@@ -39,0 +38,26 @@\n+extern const char* eglGetErrorString(EGLint error);\n+\n+void setEGLPbufferAttrs(jint *attrs, int *eglAttrs) {\n+    int index = 0;\n+\n+    eglAttrs[index++] = EGL_RENDERABLE_TYPE;\n+    eglAttrs[index++] = EGL_OPENGL_BIT;\n+\n+    eglAttrs[index++] = EGL_SURFACE_TYPE;\n+    eglAttrs[index++] = EGL_PBUFFER_BIT;\n+\n+    eglAttrs[index++] = EGL_RED_SIZE;\n+    eglAttrs[index++] = attrs[RED_SIZE];\n+    eglAttrs[index++] = EGL_GREEN_SIZE;\n+    eglAttrs[index++] = attrs[GREEN_SIZE];\n+    eglAttrs[index++] = EGL_BLUE_SIZE;\n+    eglAttrs[index++] = attrs[BLUE_SIZE];\n+    eglAttrs[index++] = EGL_ALPHA_SIZE;\n+    eglAttrs[index++] = attrs[ALPHA_SIZE];\n+\n+    eglAttrs[index++] = EGL_DEPTH_SIZE;\n+    eglAttrs[index++] = attrs[DEPTH_SIZE];\n+\n+    eglAttrs[index] = EGL_NONE;\n+}\n+\n@@ -52,1 +77,0 @@\n-    Display *display;\n@@ -54,2 +78,0 @@\n-    Window root;\n-    Window win = None;\n@@ -61,1 +83,1 @@\n-    setEGLAttrs(attrs, eglAttrs);\n+    setEGLPbufferAttrs(attrs, eglAttrs);\n@@ -64,12 +86,1 @@\n-    \/\/ RT-27386\n-    \/\/ TODO: Need to use nativeScreen to create this requested pixelformat\n-    \/\/ currently hack to work on a single monitor system\n-    display = XOpenDisplay(0);\n-    if (display == NULL) {\n-        fprintf(stderr, \"Prism ES2 Error: XOpenDisplay failed\\n\");\n-        return 0;\n-    }\n-\n-    screen = DefaultScreen(display);\n-\n-    EGLDisplay eglDisplay = eglGetDisplay(display);\n+    EGLDisplay eglDisplay = eglGetDisplay(EGL_DEFAULT_DISPLAY);\n@@ -102,1 +113,5 @@\n-    root = RootWindow(display, screen);\n+    EGLint pbufferAttribs[] = {\n+        EGL_WIDTH, 1,\n+        EGL_HEIGHT, 1,\n+        EGL_NONE\n+    };\n@@ -104,3 +119,1 @@\n-    win = XCreateSimpleWindow(display, root, 0, 0, 1, 1, 0,\n-                              WhitePixel(display, screen),\n-                              WhitePixel(display, screen));\n+    EGLSurface pbufferSurface = eglCreatePbufferSurface(eglDisplay, eglConfig, pbufferAttribs);\n@@ -108,2 +121,3 @@\n-    if (win == None) {\n-        printAndReleaseResources(eglDisplay, NULL, NULL, \"Prism ES2 Error: XCreateWindow failed\");\n+    if (pbufferSurface == EGL_NO_SURFACE) {\n+        fprintf(stderr, \"Prism ES2 Error: CreatePixelFormat - eglCreatePbufferSurface failed [%s]\\n\",\n+                        eglGetErrorString(eglGetError()));\n@@ -122,2 +136,2 @@\n-    pfInfo->display = display;\n-    pfInfo->dummyWin = win;\n+\n+    pfInfo->dummySurface = pbufferSurface;\n","filename":"modules\/javafx.graphics\/src\/main\/native-prism-es2\/linux\/egl\/LinuxGLPixelFormat.c","additions":39,"deletions":25,"binary":false,"changes":64,"status":"modified"}]}