{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -134,3 +135,1 @@\n- * Tests Node initialization from a background thread, per\n- *\n- * https:\/\/openjfx.io\/javadoc\/23\/javafx.graphics\/javafx\/scene\/Node.html\n+ * Tests Node initialization from a background thread, per the {@link Node} specification.\n@@ -146,2 +145,3 @@\n- * The test creates a visible node of a given type, and at the same time, starts a number of background threads\n- * which also create nodes of the same type.  Each such thread makes repeated accesses of its own node for the duration\n+ * The test creates a visible node on the JavaFX application thread, and at the same time,\n+ * starts a number of background threads which also create nodes of the same type.\n+ * Each such thread makes repeated accesses of its own node for the duration\n@@ -647,0 +647,1 @@\n+            c.setId(\"Tooltip\");\n@@ -730,2 +731,10 @@\n-        T visibleNode = generator.get();\n-        String title = visibleNode.getClass().getSimpleName();\n+        AtomicReference<T> ref = new AtomicReference();\n+        runAndWait(() -> {\n+            T n = generator.get();\n+            ref.set(n);\n+        });\n+        T visibleNode = ref.get();\n+        String title = visibleNode.getId();\n+        if (title == null) {\n+            title = visibleNode.getClass().getSimpleName();\n+        }\n@@ -742,15 +751,12 @@\n-                new Thread(title) {\n-                    @Override\n-                    public void run() {\n-                        try {\n-                            T n = generator.get();\n-                            int count = 0;\n-                            while (running.get()) {\n-                                operation.accept(n);\n-\n-                                count++;\n-                                if ((count % 100) == 0) {\n-                                    inFx(() -> {\n-                                        operation.accept(visibleNode);\n-                                    });\n-                                }\n+                new Thread(() -> {\n+                    try {\n+                        T n = generator.get();\n+                        int count = 0;\n+                        while (running.get()) {\n+                            operation.accept(n);\n+\n+                            count++;\n+                            if ((count % 100) == 0) {\n+                                runAndWait(() -> {\n+                                    operation.accept(visibleNode);\n+                                });\n@@ -758,2 +764,0 @@\n-                        } finally {\n-                            counter.countDown();\n@@ -761,0 +765,2 @@\n+                    } finally {\n+                        counter.countDown();\n@@ -762,1 +768,1 @@\n-                }.start();\n+                }, title).start();\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/NodeInitializationBackgroundThreadTest.java","additions":31,"deletions":25,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -42,1 +42,2 @@\n- * Similar to VisualTestBase, but more convenient.\n+ * Base class for robot-based tests which creates a stage with the the BorderPane content\n+ * to be used by individual tests.\n@@ -62,0 +63,2 @@\n+            content.setPrefWidth(STAGE_WIDTH);\n+            content.setPrefHeight(STAGE_HEIGHT);\n@@ -64,2 +67,0 @@\n-            stage.setWidth(STAGE_WIDTH);\n-            stage.setHeight(STAGE_HEIGHT);\n@@ -153,1 +154,1 @@\n-        inFx(() -> {\n+        runAndWait(() -> {\n@@ -164,1 +165,1 @@\n-        inFx(() -> {\n+        runAndWait(() -> {\n@@ -173,4 +174,2 @@\n-    public void inFx(Runnable r) {\n-        Util.runAndWait(() -> {\n-            r.run();\n-        });\n+    public void runAndWait(Runnable r) {\n+        Util.runAndWait(r);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/testharness\/RobotTestBase.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"}]}