{"files":[{"patch":"@@ -0,0 +1,947 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.robot.javafx.scene;\n+\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import java.time.LocalDate;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import java.util.function.Supplier;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.geometry.Pos;\n+import javafx.geometry.Side;\n+import javafx.scene.Node;\n+import javafx.scene.canvas.Canvas;\n+import javafx.scene.canvas.GraphicsContext;\n+import javafx.scene.chart.AreaChart;\n+import javafx.scene.chart.BarChart;\n+import javafx.scene.chart.BubbleChart;\n+import javafx.scene.chart.CategoryAxis;\n+import javafx.scene.chart.Chart;\n+import javafx.scene.chart.LineChart;\n+import javafx.scene.chart.NumberAxis;\n+import javafx.scene.chart.PieChart;\n+import javafx.scene.chart.PieChart.Data;\n+import javafx.scene.chart.ScatterChart;\n+import javafx.scene.chart.StackedAreaChart;\n+import javafx.scene.chart.StackedBarChart;\n+import javafx.scene.chart.XYChart;\n+import javafx.scene.chart.XYChart.Series;\n+import javafx.scene.control.Accordion;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.ColorPicker;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Control;\n+import javafx.scene.control.DatePicker;\n+import javafx.scene.control.Hyperlink;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ListView;\n+import javafx.scene.control.MenuButton;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.Pagination;\n+import javafx.scene.control.PasswordField;\n+import javafx.scene.control.RadioButton;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.Spinner;\n+import javafx.scene.control.SpinnerValueFactory;\n+import javafx.scene.control.SplitMenuButton;\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TabPane;\n+import javafx.scene.control.TableColumn;\n+import javafx.scene.control.TableView;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.TextInputControl;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.control.ToolBar;\n+import javafx.scene.control.TreeItem;\n+import javafx.scene.control.TreeTableColumn;\n+import javafx.scene.control.TreeTableView;\n+import javafx.scene.control.TreeView;\n+import javafx.scene.control.skin.AccordionSkin;\n+import javafx.scene.control.skin.ButtonSkin;\n+import javafx.scene.control.skin.CheckBoxSkin;\n+import javafx.scene.control.skin.ChoiceBoxSkin;\n+import javafx.scene.control.skin.ColorPickerSkin;\n+import javafx.scene.control.skin.ComboBoxListViewSkin;\n+import javafx.scene.control.skin.DatePickerSkin;\n+import javafx.scene.control.skin.HyperlinkSkin;\n+import javafx.scene.control.skin.LabelSkin;\n+import javafx.scene.control.skin.ListViewSkin;\n+import javafx.scene.control.skin.MenuButtonSkin;\n+import javafx.scene.control.skin.PaginationSkin;\n+import javafx.scene.control.skin.RadioButtonSkin;\n+import javafx.scene.control.skin.ScrollPaneSkin;\n+import javafx.scene.control.skin.SpinnerSkin;\n+import javafx.scene.control.skin.SplitMenuButtonSkin;\n+import javafx.scene.control.skin.TabPaneSkin;\n+import javafx.scene.control.skin.TableViewSkin;\n+import javafx.scene.control.skin.TextAreaSkin;\n+import javafx.scene.control.skin.TextFieldSkin;\n+import javafx.scene.control.skin.TitledPaneSkin;\n+import javafx.scene.control.skin.ToggleButtonSkin;\n+import javafx.scene.control.skin.ToolBarSkin;\n+import javafx.scene.control.skin.TreeTableViewSkin;\n+import javafx.scene.control.skin.TreeViewSkin;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.Region;\n+import javafx.scene.paint.Color;\n+import javafx.scene.text.Text;\n+import javafx.scene.text.TextFlow;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import test.robot.testharness.RobotTestBase;\n+\n+\/**\n+ * Stress tests the Node initialization from a background thread, per the {@link Node} specification:\n+ * \"Node objects may be constructed and modified on any thread as long they are not yet attached to a Scene in a Window\n+ * that is showing. An application must attach nodes to such a Scene or modify them on the JavaFX Application Thread.\"\n+ *\n+ * Notable exceptions to this rule:\n+ * - HTMLEditor\n+ * - MenuBar\n+ * - WebView\n+ *\n+ * The test creates a visible node on the JavaFX application thread, and at the same time,\n+ * starts a number of background threads which also create nodes of the same type.\n+ * Each such thread makes repeated accesses of its own node for the duration\n+ * of test.\n+ *\n+ * Also, the visible node gets accessed periodically in the FX application thread just to shake things up.\n+ *\n+ * NOTE: I suspect this test might be a bit unstable and\/or platform-dependent, due to its multi-threaded nature.\n+ *\n+ * TODO add remaining Nodes to the test.\n+ *\/\n+public class NodeInitializationStressTest extends RobotTestBase {\n+    private static final int DURATION = 5000;\n+    private static final AtomicLong seq = new AtomicLong();\n+    private static final AtomicBoolean failed = new AtomicBoolean();\n+    \/\/ for debugging purposes: setting this to true will skip working tests\n+    \/\/ TODO remove once all the tests pass\n+    private static final boolean SKIP_TEST = false;\n+\n+    @Test\n+    public void accordion() {\n+        assumeFalse(SKIP_TEST);\n+        test(() -> {\n+            Accordion c = new Accordion();\n+            c.setSkin(new AccordionSkin(c));\n+            c.getPanes().add(new TitledPane(\"Accordion\", new BorderPane()));\n+            c.getPanes().add(new TitledPane(\"Accordion\", new BorderPane()));\n+            return c;\n+        }, (c) -> {\n+            accessControl(c);\n+            TitledPane t = (TitledPane)c.getPanes().get(0);\n+            t.setExpanded(nextBoolean());\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8349091\") \/\/ FIX\n+    @Test\n+    public void areaChart() {\n+        test(() -> {\n+            AreaChart c = new AreaChart(createNumberAxis(\"x\"), createNumberAxis(\"y\"));\n+            c.getData().setAll(createNumberSeries());\n+            return c;\n+        }, (c) -> {\n+            c.getData().setAll(createNumberSeries());\n+            accessChart(c);\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8349091\") \/\/ FIX\n+    @Test\n+    public void barChart() {\n+        test(() -> {\n+            BarChart c = new BarChart(createCategoryAxis(\"x\"), createNumberAxis(\"y\"));\n+            c.getData().setAll(createCategorySeries());\n+            return c;\n+        }, (c) -> {\n+            c.getData().setAll(createCategorySeries());\n+            accessChart(c);\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8349091\") \/\/ FIX\n+    @Test\n+    public void bubbleChart() {\n+        test(() -> {\n+            BubbleChart c = new BubbleChart(createNumberAxis(\"x\"), createNumberAxis(\"y\"));\n+            c.getData().setAll(createNumberSeries());\n+            return c;\n+        }, (c) -> {\n+            c.getData().setAll(createNumberSeries());\n+            accessChart(c);\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8347392\") \/\/ FIX\n+    @Test\n+    public void button() {\n+        test(() -> {\n+            Button c = new Button();\n+            c.setSkin(new ButtonSkin(c));\n+            return c;\n+        }, (c) -> {\n+            accessControl(c);\n+            c.setAlignment(Pos.CENTER);\n+            c.setText(nextString());\n+            c.setDefaultButton(true);\n+        });\n+    }\n+\n+    @Test\n+    public void canvas() {\n+        assumeFalse(SKIP_TEST);\n+        test(() -> {\n+            return new Canvas(200, 200);\n+        }, (c) -> {\n+            accessNode(c);\n+            GraphicsContext g = c.getGraphicsContext2D();\n+            g.setFill(nextColor());\n+            g.setStroke(Color.BLACK);\n+            g.setLineWidth(nextBoolean() ? 0.0 : 1.0);\n+            g.fillRect(nextDouble(200), nextDouble(200), nextDouble(50), nextDouble(50));\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8347392\") \/\/ FIX\n+    @Test\n+    public void checkBox() {\n+        test(() -> {\n+            CheckBox c = new CheckBox(\"checkbox\");\n+            c.setSkin(new CheckBoxSkin(c));\n+            return c;\n+        }, (c) -> {\n+            c.setAllowIndeterminate(true);\n+            c.setSelected(true);\n+            accessControl(c);\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8347392\") \/\/ FIX\n+    @Test\n+    public void choiceBox() {\n+        test(() -> {\n+            ChoiceBox c = new ChoiceBox();\n+            c.setSkin(new ChoiceBoxSkin(c));\n+            return c;\n+        }, (c) -> {\n+            c.getItems().setAll(\"ChoiceBox\", \"1\", \"2\");\n+            c.getSelectionModel().select(0);\n+            accessControl(c);\n+        });\n+    }\n+\n+    @Test\n+    public void colorPicker() {\n+        assumeFalse(SKIP_TEST);\n+        test(() -> {\n+            ColorPicker c = new ColorPicker();\n+            c.setSkin(new ColorPickerSkin(c));\n+            c.setValue(Color.GREEN);\n+            return c;\n+        }, (c) -> {\n+            c.show(); \/\/ does not fail here, unlike DatePicker?\n+            c.setValue(Color.RED);\n+            c.prefHeight(-1);\n+            c.setValue(Color.BLACK);\n+            c.prefWidth(-1);\n+            accessControl(c);\n+        });\n+    }\n+\n+    @Test\n+    public void comboBox() {\n+        assumeFalse(SKIP_TEST);\n+        test(() -> {\n+            ComboBox c = new ComboBox();\n+            c.setSkin(new ComboBoxListViewSkin(c));\n+            c.getItems().setAll(\"ComboBox\", \"1\", \"2\");\n+            return c;\n+        }, (c) -> {\n+            c.setEditable(true);\n+            c.getItems().setAll(\"ComboBox\", nextString(), \"2\");\n+            c.getSelectionModel().select(0);\n+            accessControl(c);\n+            c.show(); \/\/ does not fail here\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8349004\") \/\/ FIX\n+    @Test\n+    public void datePicker() {\n+        test(() -> {\n+            DatePicker c = new DatePicker();\n+            c.setSkin(new DatePickerSkin(c));\n+            return c;\n+        }, (c) -> {\n+            c.show(); \/\/ fails here\n+            c.setValue(LocalDate.now());\n+            c.prefHeight(-1);\n+            c.setValue(LocalDate.EPOCH);\n+            c.prefWidth(-1);\n+            accessControl(c);\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8347392\") \/\/ FIX\n+    @Test\n+    public void hyperlink() {\n+        test(() -> {\n+            Hyperlink c = new Hyperlink(\"Hyperlink\");\n+            c.setSkin(new HyperlinkSkin(c));\n+            return c;\n+        }, (c) -> {\n+            c.setVisited(true);\n+            accessControl(c);\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8347392\") \/\/ FIX\n+    @Test\n+    public void label() {\n+        test(() -> {\n+            Label c = new Label(\"Label\");\n+            c.setSkin(new LabelSkin(c));\n+            return c;\n+        }, (c) -> {\n+            c.setLabelFor(c);\n+            accessControl(c);\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8349091\") \/\/ FIX\n+    @Test\n+    public void lineChart() {\n+        test(() -> {\n+            LineChart c = new LineChart(createNumberAxis(\"x\"), createNumberAxis(\"y\"));\n+            c.getData().setAll(createNumberSeries());\n+            return c;\n+        }, (c) -> {\n+            c.getData().setAll(createNumberSeries());\n+            accessChart(c);\n+        });\n+    }\n+\n+    @Test\n+    public void listView() {\n+        assumeFalse(SKIP_TEST);\n+        test(() -> {\n+            ListView c = new ListView();\n+            c.setSkin(new ListViewSkin(c));\n+            return c;\n+        }, (c) -> {\n+            c.getItems().setAll(\"ListView\", \"1\", \"2\");\n+            c.getSelectionModel().select(0);\n+            accessControl(c);\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8349096\") \/\/ FIX\n+    @Test\n+    public void menuButton() {\n+        test(() -> {\n+            MenuButton c = new MenuButton();\n+            c.setSkin(new MenuButtonSkin(c));\n+            return c;\n+        }, (c) -> {\n+            c.getItems().setAll(new MenuItem(\"MenuButton\"));\n+            c.setPopupSide(Side.RIGHT);\n+            accessControl(c);\n+            c.show();\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8349105\") \/\/ FIX\n+    @Test\n+    public void pagination() {\n+        test(() -> {\n+            Pagination c = new Pagination();\n+            c.setSkin(new PaginationSkin(c));\n+            return c;\n+        }, (c) -> {\n+            c.setPageFactory((pageIndex) -> {\n+                return new Label(pageIndex + \" \" + nextString());\n+            });\n+            c.setPageCount(100);\n+            c.setCurrentPageIndex(nextInt(100));\n+            accessControl(c);\n+        });\n+    }\n+\n+    @Test\n+    public void passwordField() {\n+        assumeFalse(SKIP_TEST);\n+        test(() -> {\n+            PasswordField c = new PasswordField();\n+            c.setSkin(new TextFieldSkin(c));\n+            return c;\n+        }, (c) -> {\n+            accessTextInputControl(c);\n+            c.setAlignment(Pos.CENTER);\n+            c.getCharacters();\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8349090\") \/\/ FIX\n+    @Test\n+    public void pieChart() {\n+        test(() -> {\n+            PieChart c = new PieChart();\n+            c.getData().setAll(createPieSeries());\n+            return c;\n+        }, (c) -> {\n+            c.getData().setAll(createPieSeries());\n+            accessChart(c);\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8347392\") \/\/ FIX\n+    @Test\n+    public void radioButton() {\n+        test(() -> {\n+            RadioButton c = new RadioButton(\"RadioButton\");\n+            c.setSkin(new RadioButtonSkin(c));\n+            return c;\n+        }, (c) -> {\n+            accessControl(c);\n+            c.setSelected(nextBoolean());\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8349091\") \/\/ FIX\n+    @Test\n+    public void scatterChart() {\n+        test(() -> {\n+            ScatterChart c = new ScatterChart(createNumberAxis(\"x\"), createNumberAxis(\"y\"));\n+            c.getData().setAll(createNumberSeries());\n+            return c;\n+        }, (c) -> {\n+            c.getData().setAll(createNumberSeries());\n+            accessChart(c);\n+        });\n+    }\n+\n+    @Test\n+    public void scrollPane() {\n+        assumeFalse(SKIP_TEST);\n+        test(() -> {\n+            ScrollPane c = new ScrollPane(new Label(\"ScrollPane\"));\n+            c.setSkin(new ScrollPaneSkin(c));\n+            return c;\n+        }, (c) -> {\n+            c.setPannable(nextBoolean());\n+            accessControl(c);\n+        });\n+    }\n+\n+    @Test\n+    public void spinner() {\n+        assumeFalse(SKIP_TEST);\n+        test(() -> {\n+            Spinner c = new Spinner();\n+            c.setSkin(new SpinnerSkin(c));\n+            c.setValueFactory(new SpinnerValueFactory.IntegerSpinnerValueFactory(0, 100, 50, 1));\n+            return c;\n+        }, (c) -> {\n+            c.setEditable(nextBoolean());\n+            accessControl(c);\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8349096\") \/\/ FIX\n+    @Test\n+    public void splitMenuButton() {\n+        test(() -> {\n+            SplitMenuButton c = new SplitMenuButton();\n+            c.setSkin(new SplitMenuButtonSkin(c));\n+            return c;\n+        }, (c) -> {\n+            c.getItems().setAll(new MenuItem(\"SplitMenuButton\"));\n+            c.setPopupSide(Side.RIGHT);\n+            accessControl(c);\n+            c.show();\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8349091\") \/\/ FIX\n+    @Test\n+    public void stackedAreaChart() {\n+        test(() -> {\n+            StackedAreaChart c = new StackedAreaChart(createNumberAxis(\"x\"), createNumberAxis(\"y\"));\n+            c.getData().setAll(createNumberSeries());\n+            return c;\n+        }, (c) -> {\n+            c.getData().setAll(createNumberSeries());\n+            accessChart(c);\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8349091\") \/\/ FIX\n+    @Test\n+    public void stackedBarChart() {\n+        test(() -> {\n+            StackedBarChart c = new StackedBarChart(createCategoryAxis(\"x\"), createNumberAxis(\"y\"));\n+            c.getData().setAll(createCategorySeries());\n+            return c;\n+        }, (c) -> {\n+            c.getData().setAll(createCategorySeries());\n+            accessChart(c);\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8349098\") \/\/ FIX\n+    @Test\n+    public void tabPane() {\n+        test(() -> {\n+            TabPane c = new TabPane();\n+            c.setSkin(new TabPaneSkin(c));\n+            c.getTabs().setAll(createTabs());\n+            return c;\n+        }, (c) -> {\n+            c.getTabs().setAll(createTabs());\n+            accessControl(c);\n+        });\n+    }\n+\n+    @Test\n+    public void tableView() {\n+        assumeFalse(SKIP_TEST);\n+        test(() -> {\n+            TableView<String> c = new TableView<>();\n+            c.setSkin(new TableViewSkin(c));\n+            c.getItems().setAll(createTableItems());\n+            TableColumn<String,String> col = new TableColumn<>(\"Table\");\n+            col.setCellValueFactory((cdf) -> {\n+                Object v = cdf.getValue();\n+                return new SimpleObjectProperty(v.toString());\n+            });\n+            c.getColumns().add(col);\n+            return c;\n+        }, (c) -> {\n+            c.getItems().setAll(createTableItems());\n+            accessControl(c);\n+        });\n+    }\n+\n+    @Test\n+    public void text() {\n+        assumeFalse(SKIP_TEST);\n+        test(() -> {\n+            return new Text(nextString());\n+        }, (c) -> {\n+            c.setText(nextString());\n+            accessNode(c);\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8347392\") \/\/ FIX\n+    @Test\n+    public void textArea() {\n+        test(() -> {\n+            TextArea c = new TextArea();\n+            c.setSkin(new TextAreaSkin(c));\n+            return c;\n+        }, (c) -> {\n+            accessTextInputControl(c);\n+        });\n+    }\n+\n+    @Test\n+    public void textField() {\n+        assumeFalse(SKIP_TEST);\n+        test(() -> {\n+            TextField c = new TextField();\n+            c.setSkin(new TextFieldSkin(c));\n+            return c;\n+        }, (c) -> {\n+            accessTextInputControl(c);\n+            c.setAlignment(Pos.CENTER);\n+            c.getCharacters();\n+        });\n+    }\n+\n+    @Test\n+    public void textFlow() {\n+        assumeFalse(SKIP_TEST);\n+        test(() -> {\n+            TextFlow c = new TextFlow();\n+            c.getChildren().setAll(createTextItems());\n+            return c;\n+        }, (c) -> {\n+            c.getChildren().setAll(createTextItems());\n+            accessRegion(c);\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8347392\") \/\/ FIX\n+    @Test\n+    public void titledPane() {\n+        test(() -> {\n+            TitledPane c = new TitledPane(\"TitledPane\", null);\n+            c.setSkin(new TitledPaneSkin(c));\n+            return c;\n+        }, (c) -> {\n+            c.setAnimated(nextBoolean());\n+            c.setExpanded(nextBoolean());\n+            c.setContent(new Label(nextString()));\n+            accessControl(c);\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8347392\") \/\/ FIX\n+    @Test\n+    public void toggleButton() {\n+        test(() -> {\n+            ToggleButton c = new ToggleButton(\"ToggleButton\");\n+            c.setSkin(new ToggleButtonSkin(c));\n+            return c;\n+        }, (c) -> {\n+            accessControl(c);\n+            c.setSelected(nextBoolean());\n+        });\n+    }\n+\n+    @Test\n+    public void toolBar() {\n+        assumeFalse(SKIP_TEST);\n+        test(() -> {\n+            ToolBar c = new ToolBar();\n+            c.setSkin(new ToolBarSkin(c));\n+            c.getItems().setAll(createButtons());\n+            return c;\n+        }, (c) -> {\n+            c.getItems().setAll(createButtons());\n+            accessControl(c);\n+        });\n+    }\n+\n+    @Disabled(\"JDK-8348100\") \/\/ FIX\n+    @Test\n+    public void tooltip() {\n+        \/\/ TODO will have a better test in JDK-8348100\n+    }\n+\n+    @Test\n+    public void treeTableView() {\n+        assumeFalse(SKIP_TEST);\n+        test(() -> {\n+            TreeTableView<String> c = new TreeTableView<>();\n+            c.setSkin(new TreeTableViewSkin(c));\n+            c.setRoot(createRoot());\n+            TreeTableColumn<String,String> col = new TreeTableColumn<>(\"TreeTable\");\n+            col.setCellValueFactory((cdf) -> {\n+                Object v = cdf.getValue();\n+                return new SimpleObjectProperty(v.toString());\n+            });\n+            c.getColumns().add(col);\n+            return c;\n+        }, (c) -> {\n+            c.setRoot(createRoot());\n+            accessControl(c);\n+        });\n+    }\n+\n+    @Test\n+    public void treeView() {\n+        assumeFalse(SKIP_TEST);\n+        Supplier<TreeItem<String>> gen = () -> {\n+            TreeItem<String> root = new TreeItem<>(null);\n+            return root;\n+        };\n+\n+        test(() -> {\n+            TreeView<String> c = new TreeView<>();\n+            c.setSkin(new TreeViewSkin(c));\n+            c.setRoot(createRoot());\n+            return c;\n+        }, (c) -> {\n+            c.setRoot(createRoot());\n+            accessControl(c);\n+        });\n+    }\n+\n+    private void accessTextInputControl(TextInputControl c) {\n+        accessControl(c);\n+        c.setPromptText(\"yo\");\n+        c.setText(nextString());\n+        c.prefHeight(-1);\n+    }\n+\n+    private void accessChart(Chart c) {\n+        String title = c.getClass().getSimpleName();\n+        c.setTitle(title);\n+        c.setAnimated(true);\n+        accessRegion(c);\n+    }\n+\n+    private void accessControl(Control c) {\n+        accessRegion(c);\n+        c.getCssMetaData();\n+    }\n+\n+    private void accessNode(Node c) {\n+        c.setFocusTraversable(true);\n+        c.requestFocus();\n+        c.toFront();\n+    }\n+\n+    private void accessRegion(Region c) {\n+        accessNode(c);\n+        c.prefHeight(-1);\n+        c.prefWidth(-1);\n+        c.setPrefWidth(20);\n+        c.setPrefHeight(20);\n+    }\n+\n+    private <T extends Node> void test(Supplier<T> generator, Consumer<T> operation) {\n+        AtomicReference<T> ref = new AtomicReference();\n+        runAndWait(() -> {\n+            T n = generator.get();\n+            ref.set(n);\n+        });\n+        T visibleNode = ref.get();\n+        String title = visibleNode.getId();\n+        if (title == null) {\n+            title = visibleNode.getClass().getSimpleName();\n+        }\n+\n+        setTitle(title);\n+        setContent(visibleNode);\n+\n+        int threadCount = 1 + Runtime.getRuntime().availableProcessors() * 2;\n+        AtomicBoolean running = new AtomicBoolean(true);\n+        int additionalThreads = 2; \/\/ jiggler + tight loop\n+        CountDownLatch counter = new CountDownLatch(threadCount + additionalThreads);\n+\n+        try {\n+            \/\/ construct nodes in a tight loop\n+            new Thread(() -> {\n+                try {\n+                    while (running.get()) {\n+                        T n = generator.get();\n+                    }\n+                } finally {\n+                    counter.countDown();\n+                }\n+            }, \"tight loop \" + title).start();\n+\n+            \/\/ periodically \"jiggle\" the visible node in the fx thread\n+            new Thread(() -> {\n+                try {\n+                    Random r = new Random();\n+                    while (running.get()) {\n+                        sleep(1 + r.nextInt(50));\n+                        runAndWait(() -> {\n+                            operation.accept(visibleNode);\n+                        });\n+                    }\n+                } finally {\n+                    counter.countDown();\n+                }\n+            }, \"jiggler \" + title).start();\n+\n+            \/\/ stress test from multiple background threads\n+            for (int i = 0; i < threadCount; i++) {\n+                new Thread(() -> {\n+                    try {\n+                        T n = generator.get();\n+                        while (running.get()) {\n+                            operation.accept(n);\n+                        }\n+                    } finally {\n+                        counter.countDown();\n+                    }\n+                }, title).start();\n+            }\n+\n+            sleep(DURATION);\n+        } finally {\n+            running.set(false);\n+        }\n+\n+        \/\/ let all threads finish\n+        try {\n+            counter.await(500, TimeUnit.SECONDS);\n+        } catch (InterruptedException e) {\n+            fail(e);\n+        }\n+    }\n+\n+    private static boolean nextBoolean() {\n+        \/\/ creating new Random instances each time to avoid additional synchronization\n+        return new Random().nextBoolean();\n+    }\n+\n+    private static Color nextColor() {\n+        Random r = new Random();\n+        return Color.hsb(360 * r.nextDouble(), r.nextDouble(), r.nextDouble(), r.nextDouble());\n+    }\n+\n+    private static double nextDouble(int min, int max) {\n+        return min + new Random().nextDouble() * (max - min);\n+    }\n+\n+    private static double nextDouble(int max) {\n+        return max * new Random().nextDouble();\n+    }\n+\n+    private static int nextInt(int max) {\n+        return new Random().nextInt(max);\n+    }\n+\n+    private static String nextString() {\n+        long ix = seq.incrementAndGet();\n+        return \"_a\" + ix + \"\\nyo!\";\n+    }\n+\n+    private static List<Node> createButtons() {\n+        int sz = new Random().nextInt(5);\n+        ArrayList<Node> a = new ArrayList<>(sz);\n+        for (int i = 0; i < sz; i++) {\n+            a.add(new Button(nextString()));\n+        }\n+        return a;\n+    }\n+\n+    private static CategoryAxis createCategoryAxis(String text) {\n+        CategoryAxis a = new CategoryAxis();\n+        a.setLabel(text);\n+        return a;\n+    }\n+\n+    private static NumberAxis createNumberAxis(String text) {\n+        NumberAxis a = new NumberAxis();\n+        a.setLabel(text);\n+        return a;\n+    }\n+\n+    private static Series<String, Number> createCategorySeries() {\n+        String name = \"S\" + seq.incrementAndGet();\n+        XYChart.Series s = new XYChart.Series();\n+        s.setName(name);\n+        for (int i = 0; i < 7; i++) {\n+            double v = nextDouble(-20, 20);\n+            String cat = String.valueOf(i);\n+            s.getData().add(new XYChart.Data(cat, v));\n+        }\n+        return s;\n+    }\n+\n+    private static Series<Number, Number> createNumberSeries() {\n+        String name = \"S\" + seq.incrementAndGet();\n+        XYChart.Series s = new XYChart.Series();\n+        s.setName(name);\n+        for (int i = 0; i < 7; i++) {\n+            double v = nextDouble(-20, 20);\n+            s.getData().add(new XYChart.Data(i, v));\n+        }\n+        return s;\n+    }\n+\n+    private static List<PieChart.Data> createPieSeries() {\n+        Random rnd = new Random();\n+        int sz = 1 + rnd.nextInt(20);\n+        ArrayList<Data> a = new ArrayList<>(sz);\n+        for (int i = 0; i < sz; i++) {\n+            a.add(new PieChart.Data(\"N\" + i, rnd.nextDouble()));\n+        }\n+        return a;\n+    }\n+\n+    private static TreeItem<String> createRoot() {\n+        TreeItem<String> root = new TreeItem<>(null);\n+        int sz = new Random().nextInt(20);\n+        for (int i = 0; i < sz; i++) {\n+            root.getChildren().add(new TreeItem<>(nextString()));\n+        }\n+        root.setExpanded(nextBoolean());\n+        return root;\n+    }\n+\n+    private static List<Tab> createTabs() {\n+        ArrayList<Tab> a = new ArrayList<>();\n+        for (int i = 0; i < 3; i++) {\n+            a.add(new Tab(nextString()));\n+        }\n+        return a;\n+    }\n+\n+    private static List<String> createTableItems() {\n+        int sz = new Random().nextInt(20);\n+        ArrayList<String> a = new ArrayList<>(sz);\n+        for (int i = 0; i < sz; i++) {\n+            a.add(nextString());\n+        }\n+        return a;\n+    }\n+\n+    private static List<Text> createTextItems() {\n+        int sz = new Random().nextInt(20);\n+        ArrayList<Text> a = new ArrayList<>(sz);\n+        for (int i = 0; i < sz; i++) {\n+            a.add(new Text(nextString()));\n+        }\n+        return a;\n+    }\n+\n+    @BeforeAll\n+    public static void beforeAll() {\n+        \/\/ this might be made a part of the base class (RobotTestBase)\n+        Thread.setDefaultUncaughtExceptionHandler((t, e) -> {\n+            e.printStackTrace();\n+            failed.set(true);\n+            \/\/ we could also accumulate stack trace(s) and send them to fail() in afterEach()\n+        });\n+    }\n+\n+    @BeforeEach\n+    public void beforeEach() {\n+        failed.set(false);\n+    }\n+\n+    @AfterEach\n+    public void afterEach() {\n+        if (failed.get()) {\n+            fail();\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/NodeInitializationStressTest.java","additions":947,"deletions":0,"binary":false,"changes":947,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-import java.util.concurrent.CountDownLatch;\n@@ -31,1 +30,0 @@\n-import javafx.application.Application;\n@@ -35,1 +33,0 @@\n-import javafx.scene.Scene;\n@@ -39,5 +36,0 @@\n-import javafx.scene.input.MouseButton;\n-import javafx.scene.layout.BorderPane;\n-import javafx.scene.robot.Robot;\n-import javafx.stage.Stage;\n-import org.junit.jupiter.api.AfterAll;\n@@ -46,1 +38,0 @@\n-import org.junit.jupiter.api.BeforeAll;\n@@ -49,0 +40,1 @@\n+import test.robot.testharness.RobotTestBase;\n@@ -54,1 +46,1 @@\n-public abstract class BehaviorRobotTestBase<C extends Control> {\n+public abstract class BehaviorRobotTestBase<C extends Control> extends RobotTestBase {\n@@ -56,2 +48,0 @@\n-    protected static final int STAGE_WIDTH = 400;\n-    protected static final int STAGE_HEIGHT = 300;\n@@ -60,8 +50,0 @@\n-    private static CountDownLatch startupLatch;\n-    \/** Scene valid only during test *\/\n-    protected static Scene scene;\n-    \/** Stage valid only during test *\/\n-    protected static Stage stage;\n-    protected static BorderPane content;\n-    \/** The Robot instance *\/\n-    protected static Robot robot;\n@@ -77,17 +59,0 @@\n-    public static class App extends Application {\n-        @Override\n-        public void start(Stage primaryStage) throws Exception {\n-            stage = primaryStage;\n-            robot = new Robot();\n-            content = new BorderPane();\n-            scene = new Scene(content);\n-            stage.setScene(scene);\n-            stage.setWidth(STAGE_WIDTH);\n-            stage.setHeight(STAGE_HEIGHT);\n-            stage.setOnShown(l -> {\n-                Platform.runLater(() -> startupLatch.countDown());\n-            });\n-            stage.show();\n-        }\n-    }\n-\n@@ -110,11 +75,0 @@\n-    @BeforeAll\n-    public static void initFX() throws Exception {\n-        startupLatch = new CountDownLatch(1);\n-        Util.launch(startupLatch, App.class);\n-    }\n-\n-    @AfterAll\n-    public static void teardownOnce() {\n-        Util.shutdown();\n-    }\n-\n@@ -346,58 +300,0 @@\n-    \/**\n-     * Triggers and waits for 10 pulses to complete in this test's scene.\n-     *\/\n-    protected void waitForIdle() {\n-        Util.waitForIdle(scene);\n-    }\n-\n-    \/**\n-     * Performs the mouse click with the {@code MouseButton.PRIMARY} via Robot.\n-     * Must be called from the FX Application thread.\n-     *\/\n-    protected void mouseClick() {\n-        mouseClick(MouseButton.PRIMARY);\n-    }\n-\n-    \/**\n-     * Performs the mouse click with the specified button via Robot.\n-     * Must be called from the FX Application thread.\n-     * @param b the button\n-     *\/\n-    protected void mouseClick(MouseButton b) {\n-        robot.mouseClick(b);\n-    }\n-\n-    \/**\n-     * Performs the mouse press with the {@code MouseButton.PRIMARY} via Robot.\n-     * Must be called from the FX Application thread.\n-     *\/\n-    protected void mousePress() {\n-        mousePress(MouseButton.PRIMARY);\n-    }\n-\n-    \/**\n-     * Performs the mouse press with the specified button via Robot.\n-     * Must be called from the FX Application thread.\n-     * @param b the button\n-     *\/\n-    protected void mousePress(MouseButton b) {\n-        robot.mousePress(b);\n-    }\n-\n-    \/**\n-     * Performs the mouse release with the {@code MouseButton.PRIMARY} via Robot.\n-     * Must be called from the FX Application thread.\n-     *\/\n-    protected void mouseRelease() {\n-        mouseRelease(MouseButton.PRIMARY);\n-    }\n-\n-    \/**\n-     * Performs the mouse release with the specified button via Robot.\n-     * Must be called from the FX Application thread.\n-     * @param b the button\n-     *\/\n-    protected void mouseRelease(MouseButton b) {\n-        robot.mouseRelease(b);\n-    }\n-\n@@ -408,20 +304,0 @@\n-\n-    \/**\n-     * To be used only for debugging, to be able to observe the intermediate state of the UI.\n-     * Please do not use this method in the actual tests.\n-     * @param seconds the number of seconds to sleep\n-     * @return the Runnable\n-     *\/\n-    protected Runnable sleep(int seconds) {\n-        return exe(() -> {\n-            try {\n-                Thread.sleep(seconds * 1000L);\n-            } catch (Exception e) {\n-            }\n-        });\n-    }\n-\n-    \/\/ debugging aid\n-    protected void p(Object v) {\n-        System.out.println(v);\n-    }\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/control\/behavior\/BehaviorRobotTestBase.java","additions":3,"deletions":127,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -0,0 +1,189 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package test.robot.testharness;\n+\n+import static org.junit.jupiter.api.Assertions.fail;\n+import java.util.concurrent.CountDownLatch;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.scene.input.MouseButton;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Stage;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import test.util.Util;\n+\n+\/**\n+ * Base class for robot-based tests which creates a stage with the the BorderPane content\n+ * to be used by individual tests.\n+ *\/\n+public class RobotTestBase {\n+    protected static final int STAGE_WIDTH = 400;\n+    protected static final int STAGE_HEIGHT = 300;\n+    private static CountDownLatch startupLatch;\n+    \/** Scene valid only during test *\/\n+    protected static Scene scene;\n+    \/** Stage valid only during test *\/\n+    protected static Stage stage;\n+    protected static BorderPane content;\n+    \/** The Robot instance *\/\n+    protected static Robot robot;\n+\n+    public static class App extends Application {\n+        @Override\n+        public void start(Stage primaryStage) throws Exception {\n+            stage = primaryStage;\n+            robot = new Robot();\n+            content = new BorderPane();\n+            content.setPrefWidth(STAGE_WIDTH);\n+            content.setPrefHeight(STAGE_HEIGHT);\n+            scene = new Scene(content);\n+            stage.setScene(scene);\n+            stage.setOnShown(l -> {\n+                Platform.runLater(() -> startupLatch.countDown());\n+            });\n+            stage.show();\n+        }\n+    }\n+\n+    @BeforeAll\n+    public static void initFX() throws Exception {\n+        startupLatch = new CountDownLatch(1);\n+        Util.launch(startupLatch, App.class);\n+    }\n+\n+    @AfterAll\n+    public static void teardownOnce() {\n+        Util.shutdown();\n+    }\n+\n+    \/**\n+     * Triggers and waits for 10 pulses to complete in this test's scene.\n+     *\/\n+    protected void waitForIdle() {\n+        Util.waitForIdle(scene);\n+    }\n+\n+    \/**\n+     * Performs the mouse click with the {@code MouseButton.PRIMARY} via Robot.\n+     * Must be called from the FX Application thread.\n+     *\/\n+    protected void mouseClick() {\n+        mouseClick(MouseButton.PRIMARY);\n+    }\n+\n+    \/**\n+     * Performs the mouse click with the specified button via Robot.\n+     * Must be called from the FX Application thread.\n+     * @param b the button\n+     *\/\n+    protected void mouseClick(MouseButton b) {\n+        robot.mouseClick(b);\n+    }\n+\n+    \/**\n+     * Performs the mouse press with the {@code MouseButton.PRIMARY} via Robot.\n+     * Must be called from the FX Application thread.\n+     *\/\n+    protected void mousePress() {\n+        mousePress(MouseButton.PRIMARY);\n+    }\n+\n+    \/**\n+     * Performs the mouse press with the specified button via Robot.\n+     * Must be called from the FX Application thread.\n+     * @param b the button\n+     *\/\n+    protected void mousePress(MouseButton b) {\n+        robot.mousePress(b);\n+    }\n+\n+    \/**\n+     * Performs the mouse release with the {@code MouseButton.PRIMARY} via Robot.\n+     * Must be called from the FX Application thread.\n+     *\/\n+    protected void mouseRelease() {\n+        mouseRelease(MouseButton.PRIMARY);\n+    }\n+\n+    \/**\n+     * Performs the mouse release with the specified button via Robot.\n+     * Must be called from the FX Application thread.\n+     * @param b the button\n+     *\/\n+    protected void mouseRelease(MouseButton b) {\n+        robot.mouseRelease(b);\n+    }\n+\n+    \/\/ debugging aid\n+    protected void p(Object v) {\n+        System.out.println(v);\n+    }\n+\n+    \/**\n+     * Sets the center Node inside the main Scene's BorderPane,\n+     * waits for idle.\n+     * @param n the node\n+     *\/\n+    public void setContent(Node n) {\n+        runAndWait(() -> {\n+            content.setCenter(n);\n+        });\n+        waitForIdle();\n+    }\n+\n+    \/**\n+     * Sets the main window title.\n+     * @param title the title\n+     *\/\n+    public void setTitle(String title) {\n+        runAndWait(() -> {\n+            stage.setTitle(title);\n+        });\n+    }\n+\n+    \/**\n+     * Executes code in the FX Application thread.\n+     * @param r the code to execute\n+     *\/\n+    public void runAndWait(Runnable r) {\n+        Util.runAndWait(r);\n+    }\n+\n+    \/**\n+     * Thread.sleep() alias that fails the test if an {@code InterruptedException} gets thrown.\n+     * @param milliseconds the number of milliseconds to sleep\n+     *\/\n+    protected void sleep(int milliseconds) {\n+        try {\n+            Thread.sleep(milliseconds);\n+        } catch (InterruptedException e) {\n+            fail(e);\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/testharness\/RobotTestBase.java","additions":189,"deletions":0,"binary":false,"changes":189,"status":"added"}]}