{"files":[{"patch":"@@ -40,1 +40,0 @@\n-import javafx.application.Platform;\n@@ -42,1 +41,0 @@\n-import javafx.geometry.Point2D;\n@@ -92,1 +90,0 @@\n-import javafx.scene.control.Tooltip;\n@@ -127,1 +124,0 @@\n-import javafx.util.Duration;\n@@ -148,1 +144,3 @@\n- * of test.  Also, the visible node gets accessed periodically just to shake things up.\n+ * of test.\n+ *\n+ * Also, the visible node gets accessed periodically in the FX application thread just to shake things up.\n@@ -158,1 +156,1 @@\n-    \/\/ for debugging purposes: setting this to false will skip working tests\n+    \/\/ for debugging purposes: setting this to true will skip working tests\n@@ -236,1 +234,1 @@\n-            return new Canvas(30, 30);\n+            return new Canvas(200, 200);\n@@ -240,1 +238,1 @@\n-            g.setFill(Color.RED);\n+            g.setFill(nextColor());\n@@ -242,1 +240,2 @@\n-            g.fillRect(5, 5, 5, 5);\n+            g.setLineWidth(nextBoolean() ? 0.0 : 1.0);\n+            g.fillRect(nextDouble(200), nextDouble(200), nextDouble(50), nextDouble(50));\n@@ -661,18 +660,1 @@\n-        test(() -> {\n-            Tooltip t = new Tooltip(\"this is a tooltip\");\n-            t.setShowDelay(Duration.ZERO);\n-            t.setHideDelay(Duration.ZERO);\n-            Label c = new Label(\"testing tooltip\");\n-            c.setSkin(new LabelSkin(c));\n-            c.setTooltip(t);\n-            c.setId(\"Tooltip\");\n-            return c;\n-        }, (c) -> {\n-            Tooltip t = c.getTooltip();\n-            t.isShowing();\n-            t.setGraphic(new Label(\"yo!\"));\n-            if (Platform.isFxApplicationThread()) {\n-                Point2D p = c.localToScreen(c.getWidth() \/ 2.0, c.getHeight() \/ 2.0);\n-                robot.mouseMove(p);\n-            }\n-        });\n+        \/\/ TODO will have a better test in JDK-8348100\n@@ -770,1 +752,2 @@\n-        CountDownLatch counter = new CountDownLatch(threadCount + 1);\n+        int additionalThreads = 2; \/\/ jiggler + tight loop\n+        CountDownLatch counter = new CountDownLatch(threadCount + additionalThreads);\n@@ -773,1 +756,1 @@\n-            \/\/ construct nodes in a fast loop\n+            \/\/ construct nodes in a tight loop\n@@ -782,1 +765,16 @@\n-            }, \"fast loop \" + title).start();\n+            }, \"tight loop \" + title).start();\n+\n+            \/\/ periodically \"jiggle\" the visible node in the fx thread\n+            new Thread(() -> {\n+                try {\n+                    Random r = new Random();\n+                    while (running.get()) {\n+                        sleep(1 + r.nextInt(50));\n+                        runAndWait(() -> {\n+                            operation.accept(visibleNode);\n+                        });\n+                    }\n+                } finally {\n+                    counter.countDown();\n+                }\n+            }, \"jiggler \" + title).start();\n@@ -789,1 +787,0 @@\n-                        int count = 0;\n@@ -792,7 +789,0 @@\n-\n-                            count++;\n-                            if ((count % 100) == 0) {\n-                                runAndWait(() -> {\n-                                    operation.accept(visibleNode);\n-                                });\n-                            }\n@@ -820,0 +810,1 @@\n+        \/\/ creating new Random instances each time to avoid additional synchronization\n@@ -823,2 +814,11 @@\n-    private static double nextDouble() {\n-        return new Random().nextInt(50) - 25;\n+    private static Color nextColor() {\n+        Random r = new Random();\n+        return Color.hsb(360 * r.nextDouble(), r.nextDouble(), r.nextDouble(), r.nextDouble());\n+    }\n+\n+    private static double nextDouble(int min, int max) {\n+        return min + new Random().nextDouble() * (max - min);\n+    }\n+\n+    private static double nextDouble(int max) {\n+        return max * new Random().nextDouble();\n@@ -862,1 +862,1 @@\n-            double v = nextDouble();\n+            double v = nextDouble(-20, 20);\n@@ -874,1 +874,1 @@\n-            double v = nextDouble();\n+            double v = nextDouble(-20, 20);\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/NodeInitializationStressTest.java","additions":42,"deletions":42,"binary":false,"changes":84,"status":"modified"}]}