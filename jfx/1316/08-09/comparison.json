{"files":[{"patch":"@@ -412,0 +412,8 @@\n+\n+            \/*\n+             * Note: the size of the elements array MUST always be greater than the\n+             * requested capacity as the contains check relies on there always being\n+             * at least one empty bucket.\n+             *\/\n+\n+            assert elements.length > requestedCapacity : \"must have more buckets than capacity\";\n@@ -457,1 +465,6 @@\n-            int start = bucket;\n+\n+            \/*\n+             * Note: because the open addressed set always has spare capacity\n+             * this loop will always exit because an unused bucket is encountered\n+             * at some point.\n+             *\/\n@@ -469,4 +482,0 @@\n-\n-                if (bucket == start) {\n-                    return false;  \/\/ all elements were checked, none matched\n-                }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/FixedCapacitySet.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,225 @@\n+package test.com.sun.javafx.css;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n+\n+import com.sun.javafx.css.FixedCapacitySet;\n+\n+public class FixedCapacitySetTest {\n+    private final Set<Object> elements = new HashSet<>();\n+\n+    @ParameterizedTest\n+    @EnumSource(Scenario.class)\n+    void sizeShouldMatchExpected(Scenario scenario) {\n+        FixedCapacitySet<Object> set = createSet(scenario);\n+\n+        assertEquals(scenario.size, set.size(), \"must have size \" + scenario.size + \": \" + scenario);\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(Scenario.class)\n+    void containsShouldFindExpectedElements(Scenario scenario) {\n+        FixedCapacitySet<Object> set = createSet(scenario);\n+\n+        for(int i = 0; i < scenario.size; i++) {\n+            assertTrue(set.contains(\"\" + i), \"must contain \" + i + \": \" + scenario);\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(Scenario.class)\n+    void containsShouldNotFindMissingElements(Scenario scenario) {\n+        FixedCapacitySet<Object> set = createSet(scenario);\n+\n+        for(int i = 0; i < 100; i++) {\n+            assertFalse(set.contains(\"A\" + i), \"must not contain A\" + i + \": \" + scenario);\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(Scenario.class)\n+    void iterationShouldResultInExpectedElements(Scenario scenario) {\n+        FixedCapacitySet<Object> set = createSet(scenario);\n+        Set<Object> iterationResult = new HashSet<>();\n+\n+        set.forEach(iterationResult::add);\n+\n+        assertEquals(elements, iterationResult, \"iteration must return \" + elements + \": \" + scenario);\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(Scenario.class)\n+    void iterationShouldThrowExceptionWhenThereAreNoMoreElements(Scenario scenario) {\n+        FixedCapacitySet<Object> set = createSet(scenario);\n+\n+        Iterator<Object> iterator = set.iterator();\n+\n+        for(int i = 0; i < scenario.size; i++) {\n+            iterator.next();\n+        }\n+\n+        assertThrows(NoSuchElementException.class, iterator::next, \"exception expected when iterating past last element: \" + scenario);\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(Scenario.class)\n+    void addShouldRejectNullValues(Scenario scenario) {\n+        FixedCapacitySet<Object> set = createSet(scenario);\n+\n+        if(scenario.size != 0) {\n+            assertThrows(NullPointerException.class, () -> set.add(null), \"exception expected when adding null: \" + scenario);\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(Scenario.class)\n+    void addShouldRejectExceedingCapacity(Scenario scenario) {\n+        FixedCapacitySet<Object> set = createSet(scenario);\n+\n+        \/\/ fill up partially filled sets first:\n+        while(set.size() < scenario.capacity) {\n+            set.add(\"\" + set.size());\n+        }\n+\n+        if(scenario.size != 0) {\n+            assertThrows(IllegalStateException.class, () -> set.add(\"A\"), \"exception expected when exceeding capacity: \" + scenario);\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(Scenario.class)\n+    void addShouldIgnoreDuplicateElement(Scenario scenario) {\n+        FixedCapacitySet<Object> set = createSet(scenario);\n+\n+        if(scenario.size != 0) {\n+            assertFalse(set.add(\"0\"), \"adding duplicate element should return false: \" + scenario);\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(Scenario.class)\n+    void hashCodeShouldMatchContract(Scenario scenario) {\n+        FixedCapacitySet<Object> set = createSet(scenario);\n+\n+        assertEquals(elements.hashCode(), set.hashCode(), \"hashCode must match contract: \" + scenario);\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(Scenario.class)\n+    void isSuperSetOfShouldWork(Scenario scenario) {\n+        FixedCapacitySet<Object> set = createSet(scenario);\n+\n+        assertTrue(set.isSuperSetOf(set), \"isSuperSetOf with same set should return true: \" + scenario);\n+        assertTrue(set.isSuperSetOf(elements), \"isSuperSetOf with equivalent set should return true: \" + scenario);\n+\n+        List<Object> extendedSet = Stream.concat(elements.stream(), Stream.of(\"A\")).toList();\n+\n+        assertTrue(set.isSuperSetOf(extendedSet), \"isSuperSetOf with extended equivalent set should return true: \" + scenario);\n+\n+        if(scenario.size > 1) {\n+            Set<Object> partialSet = new HashSet<>(elements);\n+\n+            partialSet.remove(\"1\");\n+\n+            assertFalse(set.isSuperSetOf(partialSet), \"isSuperSetOf with collection missing an element should return false: \" + scenario);\n+        }\n+\n+        if(scenario.size == 0) {\n+            assertTrue(set.isSuperSetOf(Set.of()), \"isSuperSetOf with empty set should return true: \" + scenario);\n+        }\n+\n+        if(scenario.size != 0) {\n+            assertFalse(set.isSuperSetOf(Set.of(\"A\")), \"isSuperSetOf with collection containing missing element should return false: \" + scenario);\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(Scenario.class)\n+    void removalMethodsShouldThrowUnsupportedOperationException(Scenario scenario) {\n+        FixedCapacitySet<Object> set = createSet(scenario);\n+\n+        if(scenario.size != 0) {\n+            assertThrows(UnsupportedOperationException.class, () -> set.remove(\"0\"), \"expected exception when calling remove: \" + scenario);\n+            assertThrows(UnsupportedOperationException.class, () -> set.clear(), \"expected exception when calling clear: \" + scenario);\n+        }\n+\n+        assertThrows(UnsupportedOperationException.class, () -> set.iterator().remove(), \"expected exception when calling remove on iterator: \" + scenario);\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(Scenario.class)\n+    void afterFreezingAddShouldThrowUnsupportedOperationException(Scenario scenario) {\n+        FixedCapacitySet<Object> set = createSet(scenario);\n+\n+        set.freeze();\n+\n+        assertThrows(UnsupportedOperationException.class, () -> set.add(\"A\"), \"expected exception when calling add on frozen set: \" + scenario);\n+    }\n+\n+    @Test\n+    void creationShouldRejectNegativeSize() {\n+        assertThrows(NegativeArraySizeException.class, () -> FixedCapacitySet.of(-1));\n+    }\n+\n+    @Test\n+    void openAddressedSpecialCasewhenMultipleElementsHashToLastBucketShouldStoreElementsInStartingBuckets() {\n+        FixedCapacitySet<Object> set = FixedCapacitySet.of(10);  \/\/ 10 results in open addressed variant, with 16 buckets\n+\n+        \/\/ carefully selected elements that all hash to last bucket (bucket 15):\n+        set.addAll(Set.of(\"10\", \"21\", \"32\"));\n+\n+        assertTrue(set.contains(\"10\"));\n+        assertTrue(set.contains(\"21\"));\n+        assertTrue(set.contains(\"32\"));\n+    }\n+\n+    private FixedCapacitySet<Object> createSet(Scenario scenario) {\n+        FixedCapacitySet<Object> set = FixedCapacitySet.of(scenario.capacity);\n+\n+        for(int i = 0; i < scenario.size; i++) {\n+            set.add(\"\" + i);\n+            elements.add(\"\" + i);\n+        }\n+\n+        return set;\n+    }\n+\n+    enum Scenario {\n+        EMPTY(0, 0),\n+        ONE_FULLY_FILLED(1, 1),\n+        TWO_FULLY_FILLED(2, 2),\n+        THREE_FULLY_FILLED(3, 3),\n+        FIVE_FULLY_FILLED(5, 5),\n+        NINE_FULLY_FILLED(9, 9),\n+        TEN_FULLY_FILLED(10, 10),\n+        TWENTY_FULLY_FILLED(20, 20),\n+\n+        ONE_BUT_EMPTY(1, 0),\n+        TWO_BUT_EMPTY(2, 0),\n+        TWO_HALF_FILLED(2, 1),\n+        THREE_PARTIALLY_FILLED(3, 2),\n+        FIVE_PARTIALLY_FILLED(5, 4),\n+        TWENTY_ALMOST_FILLED(20, 19);\n+\n+        private int capacity;\n+        private int size;\n+\n+        Scenario(int capacity, int size) {\n+            this.capacity = capacity;\n+            this.size = size;\n+        }\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/css\/FixedCapacitySetTest.java","additions":225,"deletions":0,"binary":false,"changes":225,"status":"added"}]}