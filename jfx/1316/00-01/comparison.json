{"files":[{"patch":"@@ -0,0 +1,25 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n@@ -57,0 +82,19 @@\n+    \/**\n+     * Creates a new {@link FixedCapacitySet} with the given maximum capacity.\n+     * If the capacity is exceeded, fixed capacity sets do not grow, but instead\n+     * throw an {@link IllegalStateException}.\n+     *\n+     * @param <T> the element type\n+     * @param maximumCapacity the maximum possible number of elements the set can hold, cannot be negative\n+     * @return a new empty set, never {@code null}\n+     *\/\n+    public static <T> FixedCapacitySet<T> of(int maximumCapacity) {\n+        return maximumCapacity == 0 ? empty()\n+             : maximumCapacity == 1 ? new Single<>()\n+             : maximumCapacity == 2 ? new Duo<>()\n+             : maximumCapacity < 10 ? new Hashless<>(maximumCapacity)  \/\/ will reject negative values\n+                                    : new OpenAddressed<>(maximumCapacity);\n+    }\n+\n+    private boolean frozen;\n+\n@@ -81,1 +125,3 @@\n-    public abstract void freeze();\n+    public final void freeze() {\n+        this.frozen = true;\n+    }\n@@ -84,7 +130,2 @@\n-     * Creates a new {@link FixedCapacitySet} with the given maximum capacity.\n-     * If the capacity is exceeded, fixed capacity sets do not grow, but instead\n-     * throw an {@link IllegalStateException}.\n-     *\n-     * @param <T> the element type\n-     * @param maximumCapacity the maximum possible number of elements the set can hold, cannot be negative\n-     * @return a new empty set, never {@code null}\n+     * Checks if the set is allowed to be mutated, and throws an\n+     * {@link UnsupportedEncodingException} otherwise.\n@@ -92,6 +133,4 @@\n-    public static <T> FixedCapacitySet<T> of(int maximumCapacity) {\n-        return maximumCapacity == 0 ? empty()\n-             : maximumCapacity == 1 ? new Single<>()\n-             : maximumCapacity == 2 ? new Duo<>()\n-             : maximumCapacity < 10 ? new Hashless<>(maximumCapacity)  \/\/ will reject negative values\n-                                    : new OpenAddressed<>(maximumCapacity);\n+    protected final void ensureNotFrozen() {\n+        if (frozen) {\n+            throw new UnsupportedOperationException();\n+        }\n@@ -107,6 +146,0 @@\n-        private boolean frozen;\n-\n-        @Override\n-        public void freeze() {\n-            frozen = true;\n-        }\n@@ -154,3 +187,1 @@\n-            if (frozen) {\n-                throw new UnsupportedOperationException();\n-            }\n+            ensureNotFrozen();\n@@ -197,6 +228,0 @@\n-        private boolean frozen;\n-\n-        @Override\n-        public void freeze() {\n-            frozen = true;\n-        }\n@@ -242,3 +267,1 @@\n-            if (frozen) {\n-                throw new UnsupportedOperationException();\n-            }\n+            ensureNotFrozen();\n@@ -296,1 +319,0 @@\n-        private boolean frozen;\n@@ -303,5 +325,0 @@\n-        @Override\n-        public void freeze() {\n-            frozen = true;\n-        }\n-\n@@ -358,3 +375,1 @@\n-            if (frozen) {\n-                throw new UnsupportedOperationException();\n-            }\n+            ensureNotFrozen();\n@@ -412,1 +427,0 @@\n-        private boolean frozen;\n@@ -419,5 +433,0 @@\n-        @Override\n-        public void freeze() {\n-            frozen = true;\n-        }\n-\n@@ -503,3 +512,1 @@\n-            if (frozen) {\n-                throw new UnsupportedOperationException();\n-            }\n+            ensureNotFrozen();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/css\/FixedCapacitySet.java","additions":57,"deletions":50,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.util.Collections;\n@@ -79,1 +78,1 @@\n-     * @deprecated for future removal, use {@link #getStyleClassNames()} instead\n+     * @deprecated use {@link #getStyleClassNames()} instead\n@@ -81,0 +80,1 @@\n+    @Deprecated(forRemoval = true)\n@@ -82,1 +82,1 @@\n-        return Collections.unmodifiableList(new ArrayList<>(selectorStyleClassNames));\n+        return List.copyOf(selectorStyleClassNames);\n@@ -88,1 +88,1 @@\n-     * @deprecated for future removal, {@code StyleClass} wrapper has become unnecessary, use {@link #getStyleClassNames()} instead\n+     * @deprecated {@code StyleClass} wrapper has become unnecessary, use {@link #getStyleClassNames()} instead\n@@ -90,0 +90,1 @@\n+    @Deprecated(forRemoval = true)\n@@ -137,0 +138,1 @@\n+     * @since 23\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/css\/SimpleSelector.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"}]}