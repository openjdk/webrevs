{"files":[{"patch":"@@ -10,2 +10,2 @@\n-JavaFX SDK is required to build the tool.  You can use a JavaFX SDK that you build or you can download the JavaFX SDK.\n-The latest SDK can be found here:\n+JavaFX SDK 24+ and JDK 23+ are required to build and run the tool.\n+You can use a JavaFX SDK that you build or you can download the JavaFX SDK found here:\n@@ -13,1 +13,1 @@\n-https:\/\/jdk.java.net\/javafx21\/\n+https:\/\/jdk.java.net\/\n@@ -18,2 +18,2 @@\n-The tool uses `ant` to build a non-modular JAR.  You'll need to specify the path to JavaFX SDK 20+\n-(using absolute path, the script apparently does not understand ~ symbols):\n+The tool uses `ant` to build a non-modular JAR.  You'll need to specify the path to JavaFX SDK\n+using absolute path:\n@@ -27,2 +27,0 @@\n-The tool requires JDK 21+ and JavaFX 21+.\n-\n@@ -32,1 +30,1 @@\n-java -p <JAVAFX>\/javafx-sdk-21\/lib\/ --add-modules ALL-MODULE-PATH -jar MonkeyTester.jar\n+java -p <JAVAFX>\/javafx-sdk-24\/lib\/ --add-modules ALL-MODULE-PATH -jar MonkeyTester.jar\n@@ -45,2 +43,0 @@\n-\n-\n","filename":"tests\/manual\/monkey\/README.md","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n-This build requires javafx.home property, pointing to JavaFX SDK (21+) directory, e.g.:\n+This build requires javafx.home property, pointing to JavaFX SDK directory, e.g.:\n@@ -23,0 +23,1 @@\n+\t\t<delete includeEmptyDirs=\"true\" dir=\"dist\" failonerror=\"false\" \/>\n@@ -43,2 +44,2 @@\n-\t\t\tsource=\"21\"\n-\t\t\ttarget=\"21\"\n+\t\t\tsource=\"23\"\n+\t\t\ttarget=\"23\"\n@@ -48,1 +49,1 @@\n-\t\t\t<compilerarg line=\"--module-path ${javafx.home}\/lib --add-modules javafx.base,javafx.graphics,javafx.controls,javafx.swing,javafx.web\"\/>\n+\t\t\t<compilerarg line=\"--module-path ${javafx.home}\/lib --add-modules javafx.base,javafx.graphics,javafx.controls,javafx.media,javafx.swing,javafx.web\"\/>\n","filename":"tests\/manual\/monkey\/build.xml","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,1 @@\n+import com.oracle.tools.fx.monkey.sheets.PropertiesMonitor;\n@@ -53,0 +54,1 @@\n+import com.oracle.tools.fx.monkey.tools.ModalWindow;\n@@ -149,0 +151,1 @@\n+        FX.item(m, \"Platform Preferences Monitor\", this::openPlatformPreferencesMonitor);\n@@ -285,0 +288,4 @@\n+\n+    private void openPlatformPreferencesMonitor() {\n+        PropertiesMonitor.openPreferences(this);\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/MainWindow.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+            new DemoPage(\"AnchorPane\", AnchorPanePage::new),\n@@ -38,0 +39,1 @@\n+            new DemoPage(\"BorderPane\", BorderPanePage::new),\n@@ -40,1 +42,1 @@\n-            \/\/ TODO ButtonBar\n+            new DemoPage(\"ButtonBar\", ButtonBarPage::new),\n@@ -47,0 +49,1 @@\n+            \/\/ TODO DialogPane\n@@ -48,0 +51,2 @@\n+            new DemoPage(\"FlowPane\", FlowPanePage::new),\n+            new DemoPage(\"GridPane\", GridPanePage::new),\n@@ -51,1 +56,0 @@\n-            \/\/ TODO InputField: DoubleField, IntegerField, WebColorField\n@@ -55,0 +59,1 @@\n+            new DemoPage(\"MediaPlayer\", MediaPlayerPage::new),\n@@ -60,1 +65,1 @@\n-            \/\/ TODO ProgressIndicator\n+            new DemoPage(\"ProgressIndicator\", ProgressIndicatorPage::new),\n@@ -65,1 +70,1 @@\n-            \/\/ TODO Separator\n+            new DemoPage(\"Separator\", SeparatorPage::new),\n@@ -67,1 +72,1 @@\n-            \/\/ TODO Slider\n+            new DemoPage(\"Slider\", SliderPage::new),\n@@ -70,1 +75,0 @@\n-            \/\/ TODO SplitPane\n@@ -73,0 +77,2 @@\n+            new DemoPage(\"StackPane\", StackPanePage::new),\n+            new DemoPage(\"Stage\", StagePage::new),\n@@ -79,0 +85,1 @@\n+            new DemoPage(\"TilePane\", TilePanePage::new),\n@@ -83,1 +90,0 @@\n-            \/\/ TODO in tables: Cell, DateCell, IndexedCell* ?\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/Pages.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+        addChoice(\"(T:11, B:22, L:33, R:44)\", createBorder(Color.rgb(127, 127, 127, 0.5), 11, 44, 22, 33));\n@@ -60,0 +61,2 @@\n+        return new Border(new BorderStroke(color, style, radii, widths));\n+    }\n@@ -61,4 +64,4 @@\n-        BorderStroke[] strokes = {\n-            new BorderStroke(color, style, radii, widths)\n-        };\n-        return new Border(strokes);\n+    private static Border createBorder(Color color, double top, double right, double bottom, double left) {\n+        BorderStrokeStyle style = BorderStrokeStyle.SOLID;\n+        BorderWidths widths = new BorderWidths(top, right, bottom, left);\n+        return new Border(new BorderStroke(color, style, null, widths));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/BorderOption.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,1 +111,1 @@\n-    private void select(Number value, boolean initial) {\n+    public void select(Number value, boolean initial) {\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/DoubleOption.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,4 @@\n+\n+        property.addListener((s,prev,v) -> {\n+            selectValue(v);\n+        });\n@@ -94,0 +98,15 @@\n+    \/**\n+     * Selects the specified value.\n+     *\/\n+    public void selectValue(T value) {\n+        List<NamedValue<T>> items = getItems();\n+        int sz = items.size();\n+        for (int i = 0; i < sz; i++) {\n+            NamedValue<T> item = items.get(i);\n+            if (Objects.equals(value, item.getValue())) {\n+                select(i);\n+                return;\n+            }\n+        }\n+    }\n+\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/ObjectOption.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n@@ -31,0 +33,1 @@\n+import javafx.beans.property.ObjectProperty;\n@@ -32,0 +35,1 @@\n+import javafx.geometry.VerticalDirection;\n@@ -33,0 +37,5 @@\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.Pane;\n@@ -35,0 +44,5 @@\n+import javafx.scene.paint.Color;\n+import javafx.scene.text.Text;\n+import javafx.scene.text.TextFlow;\n+import com.oracle.tools.fx.monkey.sheets.PropertiesMonitor;\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -36,0 +50,2 @@\n+import com.oracle.tools.fx.monkey.util.Utils;\n+import com.oracle.tools.fx.monkey.util.VerticalLabel;\n@@ -38,1 +54,1 @@\n- * Pane content Options.\n+ * Pane Content Options.\n@@ -260,0 +276,52 @@\n+        s.addChoiceSupplier(\"48 items, pref=20\", () -> {\n+            return b.get().\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                d().pref(20).\n+                build();\n+        });\n@@ -273,0 +341,6 @@\n+        childChoices((text, gen) -> {\n+            s.addChoiceSupplier(text, () -> {\n+                Node n = gen.get();\n+                return List.of(n);\n+            });\n+        });\n@@ -277,0 +351,124 @@\n+    public static Node manyTextNodes(int count) {\n+        TextFlow f = new TextFlow();\n+        for (int i = 0; i < count; i++) {\n+            Text t = new Text(i + \" \");\n+            t.setFill(i % 2 == 0 ? Color.BLACK : Color.GREEN);\n+            t.getStyleClass().add(\"T1000\");\n+            f.getChildren().add(t);\n+\n+            t.setOnContextMenuRequested((ev) -> {\n+                ContextMenu m = new ContextMenu();\n+                FX.item(m, \"Show Properties Monitor...\", () -> {\n+                    PropertiesMonitor.open(t);\n+                });\n+                FX.item(m, \"Delete\", () -> {\n+                    if (t.getParent() instanceof Pane p) {\n+                        p.getChildren().remove(t);\n+                    }\n+                });\n+                m.show(t, ev.getScreenX(), ev.getScreenY());\n+            });\n+        }\n+        return f;\n+    }\n+\n+    public static Region rectangle(double minw, double minh, double prefw, double prefh, double maxw, double maxh) {\n+        Region r = new Region();\n+        if (minw > 0) {\n+            r.setMinWidth(minw);\n+        }\n+        if (minh > 0) {\n+            r.setMinHeight(minh);\n+        }\n+        if (prefw > 0) {\n+            r.setPrefWidth(prefw);\n+        }\n+        if (prefh > 0) {\n+            r.setPrefHeight(prefh);\n+        }\n+        if (maxw > 0) {\n+            r.setMaxWidth(maxw);\n+        }\n+        if (maxh > 0) {\n+            r.setMaxHeight(maxh);\n+        }\n+        r.setBackground(Background.fill(Utils.nextColor()));\n+        return r;\n+    }\n+\n+    public static Node verticalLabel(VerticalDirection dir) {\n+        VerticalLabel n = new VerticalLabel(dir, \"Label with the VERTICAL content orientation; direction = \" + dir);\n+        n.setBackground(Background.fill(Utils.nextColor()));\n+        return n;\n+    }\n+\n+    public static Node horizontalLabel() {\n+        Label n = new Label(\"Label with the HORIZONTAL content orientation.\");\n+        n.setWrapText(true);\n+        n.setBackground(Background.fill(Utils.nextColor()));\n+        return n;\n+    }\n+\n+    public static void addChildOption(ObservableList<MenuItem> menu, ObservableList<Node> children, Consumer<Node> cx) {\n+        childChoices((text, gen) -> {\n+            MenuItem mi = new MenuItem(text);\n+            mi.setOnAction((ev) -> {\n+                Node n = gen.get();\n+                if (cx != null) {\n+                    cx.accept(n);\n+                }\n+                children.add(n);\n+            });\n+            menu.add(mi);\n+        });\n+    }\n+\n+    public static Node childOption(String name, ObjectProperty<Node> p, Consumer<Node> cx) {\n+        ObjectOption<Node> op = new ObjectOption<>(name, p);\n+        op.addChoice(\"<null>\", null);\n+        childChoices((text, gen) -> {\n+            op.addChoiceSupplier(text, () -> {\n+                Node n = gen.get();\n+                if (cx != null) {\n+                    cx.accept(n);\n+                }\n+                return n;\n+            });\n+        });\n+        op.selectInitialValue();\n+        return op;\n+    }\n+\n+    private static void childChoices(BiConsumer<String, Supplier<Node>> client) {\n+        client.accept(\"1000 text nodes\", () -> {\n+            return PaneContentOptions.manyTextNodes(1000);\n+        });\n+        client.accept(\"Label\", () -> {\n+            return new Label(\"Label\");\n+        });\n+        client.accept(\"Biased Label: DOWN\", () -> {\n+            return verticalLabel(VerticalDirection.DOWN);\n+        });\n+        client.accept(\"Biased Label: UP\", () -> {\n+            return verticalLabel(VerticalDirection.UP);\n+        });\n+        client.accept(\"Biased Label: HORIZONTAL\", () -> {\n+            return horizontalLabel();\n+        });\n+        client.accept(\"Min (200 x 100)\", () -> {\n+            return rectangle(200, 100, -1, -1, -1, -1);\n+        });\n+        client.accept(\"Pref (333.3 x 222.2)\", () -> {\n+            return rectangle(-1, -1, 333.3, 222.2, -1, -1);\n+        });\n+        client.accept(\"Max (600 x 500)\", () -> {\n+            return rectangle(-1, -1, -1, -1, 600, 500);\n+        });\n+        client.accept(\"Min (50 x 75), Pref(150 x 99)\", () -> {\n+            return rectangle(50, 75, 150, 99, -1, -1);\n+        });\n+        client.accept(\"Pref (300 x 30), Max (600 x 500)\", () -> {\n+            return rectangle(-1, -1, 300, 30, 600, 500);\n+        });\n+    }\n+\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/PaneContentOptions.java","additions":200,"deletions":2,"binary":false,"changes":202,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,0 +90,4 @@\n+    public void addChoice(String value) {\n+        field.getItems().add(new NamedValue<>(value, value));\n+    }\n+\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/options\/TextChoiceOption.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.util.function.Consumer;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.Menu;\n+import javafx.scene.control.MenuButton;\n+import javafx.scene.layout.AnchorPane;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.Region;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.options.PaneContentOptions;\n+import com.oracle.tools.fx.monkey.sheets.PropertiesMonitor;\n+import com.oracle.tools.fx.monkey.sheets.RegionPropertySheet;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.Menus;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import com.oracle.tools.fx.monkey.util.Utils;\n+\n+\/**\n+ * AnchorPane Page.\n+ *\/\n+public class AnchorPanePage extends TestPaneBase {\n+    private final AnchorPane pane;\n+\n+    public AnchorPanePage() {\n+        super(\"AnchorPanePage\");\n+\n+        pane = new AnchorPane() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+\n+        MenuButton addButton = new MenuButton(\"Add\");\n+        PaneContentOptions.addChildOption(addButton.getItems(), pane.getChildren(), this::createMenu);\n+\n+        Button clearButton = new Button(\"Remove All\");\n+        clearButton.setOnAction((ev) -> {\n+            pane.getChildren().clear();\n+        });\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"AnchorPane\");\n+        op.option(\"Children:\", Utils.buttons(addButton, clearButton));\n+        RegionPropertySheet.appendTo(op, pane);\n+\n+        setContent(pane);\n+        setOptions(op);\n+    }\n+\n+    private void createMenu(Node n) {\n+        FX.setPopupMenu(n, () -> {\n+            ContextMenu m = new ContextMenu();\n+            anchorMenu(m, \"Set Bottom Anchor\", (off) -> {\n+                AnchorPane.setBottomAnchor(n, off);\n+            });\n+            anchorMenu(m, \"Set Left Anchor\", (off) -> {\n+                AnchorPane.setLeftAnchor(n, off);\n+            });\n+            anchorMenu(m, \"Set Right Anchor\", (off) -> {\n+                AnchorPane.setRightAnchor(n, off);\n+            });\n+            anchorMenu(m, \"Set Top Anchor\", (off) -> {\n+                AnchorPane.setTopAnchor(n, off);\n+            });\n+            FX.separator(m);\n+            FX.item(m, \"Clear Anchors\", () -> {\n+                AnchorPane.setBottomAnchor(n, null);\n+                AnchorPane.setLeftAnchor(n, null);\n+                AnchorPane.setRightAnchor(n, null);\n+                AnchorPane.setTopAnchor(n, null);\n+            });\n+            if(n instanceof Region r) {\n+                FX.separator(m);\n+                Menus.sizeSubMenus(m, r);\n+            }\n+            FX.separator(m);\n+            FX.item(m, \"Delete\", () -> {\n+                if (n.getParent() instanceof Pane p) {\n+                    p.getChildren().remove(n);\n+                }\n+            });\n+            FX.separator(m);\n+            FX.item(m, \"Show Properties Monitor...\", () -> {\n+                PropertiesMonitor.open(n);\n+            });\n+            return m;\n+        });\n+    }\n+\n+    private static void anchorMenu(ContextMenu cm, String text, Consumer<Double> client) {\n+        Menu m = FX.menu(cm, text);\n+        anchor(m, client, null);\n+        anchor(m, client, -100.0);\n+        anchor(m, client, -50.0);\n+        anchor(m, client, 0.0);\n+        anchor(m, client, 50.0);\n+        anchor(m, client, 100.0);\n+        anchor(m, client, 200.0);\n+        anchor(m, client, 300.0);\n+    }\n+\n+    private static void anchor(Menu m, Consumer<Double> client, Double value) {\n+        String name = value == null ? \"<null>\" : String.valueOf(value);\n+        FX.item(m, name, () -> {\n+            client.accept(value);\n+        });\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/AnchorPanePage.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.geometry.Pos;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.Region;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.options.PaneContentOptions;\n+import com.oracle.tools.fx.monkey.sheets.PropertiesMonitor;\n+import com.oracle.tools.fx.monkey.sheets.RegionPropertySheet;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.Menus;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import com.oracle.tools.fx.monkey.util.Utils;\n+\n+\/**\n+ * BorderPane Page.\n+ *\/\n+public class BorderPanePage extends TestPaneBase {\n+    private final BorderPane pane;\n+\n+    public BorderPanePage() {\n+        super(\"BorderPanePage\");\n+\n+        pane = new BorderPane() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+\n+        Button clear = new Button(\"Remove All\");\n+        clear.setOnAction((ev) -> {\n+            pane.getChildren().clear();\n+        });\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"BorderPane\");\n+        op.option(\"Bottom:\", PaneContentOptions.childOption(\"center\", pane.bottomProperty(), this::createMenu));\n+        op.option(\"Center:\", PaneContentOptions.childOption(\"center\", pane.centerProperty(), this::createMenu));\n+        op.option(\"Left:\", PaneContentOptions.childOption(\"left\", pane.leftProperty(), this::createMenu));\n+        op.option(\"Right:\", PaneContentOptions.childOption(\"right\", pane.rightProperty(), this::createMenu));\n+        op.option(\"Top:\", PaneContentOptions.childOption(\"top\", pane.topProperty(), this::createMenu));\n+        op.option(Utils.buttons(clear));\n+        RegionPropertySheet.appendTo(op, pane);\n+\n+        setContent(pane);\n+        setOptions(op);\n+    }\n+\n+    private void createMenu(Node n) {\n+        FX.setPopupMenu(n, () -> {\n+            ContextMenu cm = new ContextMenu();\n+            Menus.enumSubMenu(cm, \"Alignment\", Pos.class, true, (v) -> BorderPane.setAlignment(n, v), () -> BorderPane.getAlignment(n));\n+            Menus.marginSubMenu(cm, (v) -> BorderPane.setMargin(n, v), () -> BorderPane.getMargin(n));\n+            if(n instanceof Region r) {\n+                FX.separator(cm);\n+                Menus.sizeSubMenus(cm, r);\n+            }\n+            FX.separator(cm);\n+            FX.item(cm, \"Remove\", () -> {\n+                if (n.getParent() instanceof Pane p) {\n+                    p.getChildren().remove(n);\n+                }\n+            });\n+            FX.separator(cm);\n+            FX.item(cm, \"Show Properties Monitor...\", () -> {\n+                PropertiesMonitor.open(n);\n+            });\n+            return cm;\n+        });\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/BorderPanePage.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import javafx.beans.property.StringProperty;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ButtonBar;\n+import javafx.scene.control.ButtonBar.ButtonData;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.MenuButton;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.skin.ButtonBarSkin;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.options.DoubleOption;\n+import com.oracle.tools.fx.monkey.options.TextChoiceOption;\n+import com.oracle.tools.fx.monkey.sheets.ControlPropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * ButtonBar Page.\n+ *\/\n+public class ButtonBarPage extends TestPaneBase implements HasSkinnable {\n+    private final ButtonBar control;\n+\n+    public ButtonBarPage() {\n+        super(\"ButtonBarPage\");\n+\n+        control = new ButtonBar() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+\n+        OptionPane op = new OptionPane();\n+        op.option(\"Buttons:\", createButtonsOption());\n+        op.option(\"Button Min Width:\", DoubleOption.of(\"buttonMinWidth\", control.buttonMinWidthProperty()));\n+        op.option(\"Button Order:\", createButtonOrderOption(\"buttonOrder\", control.buttonOrderProperty()));\n+        ControlPropertySheet.appendTo(op, control);\n+\n+        setContent(control);\n+        setOptions(op);\n+    }\n+\n+    private Node createButtonsOption() {\n+        MenuButton m = new MenuButton(\"Add\");\n+        ArrayList<MenuItem> items = new ArrayList<>();\n+        for (ButtonData d: ButtonData.values()) {\n+            String name = d.toString();\n+            Button b = new Button(name);\n+            MenuItem mi = new MenuItem(name);\n+            mi.setOnAction((ev) -> {\n+                MenuItem remove = new MenuItem(\"Remove\");\n+                remove.setOnAction((ev2) -> {\n+                    control.getButtons().remove(b);\n+                });\n+                ContextMenu cm = new ContextMenu(remove);\n+                b.setContextMenu(cm);\n+                ButtonBar.setButtonData(b, d);\n+                control.getButtons().add(b);\n+            });\n+            items.add(mi);\n+        }\n+        items.sort(new Comparator<MenuItem>() {\n+            @Override\n+            public int compare(MenuItem a, MenuItem b) {\n+                String sa = a.getText();\n+                String sb = b.getText();\n+                return sa.compareTo(sb);\n+            }\n+        });\n+        m.getItems().setAll(items);\n+        return m;\n+    }\n+\n+    private Node createButtonOrderOption(String name, StringProperty p) {\n+        TextChoiceOption op = new TextChoiceOption(name, true, p);\n+        op.addChoice(ButtonBar.BUTTON_ORDER_NONE);\n+        op.addChoice(ButtonBar.BUTTON_ORDER_LINUX);\n+        op.addChoice(ButtonBar.BUTTON_ORDER_MAC_OS);\n+        op.addChoice(ButtonBar.BUTTON_ORDER_WINDOWS);\n+        return op;\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new ButtonBarSkin(control));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ButtonBarPage.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -157,10 +157,0 @@\n-        op.addChoiceSupplier(\"<snapshot>\", () -> {\n-            try {\n-                \/\/ FIX windows throws Errors if this check is not done\n-                if(source.getScene() != null) {\n-                    return source.snapshot(null, null);\n-                }\n-            } catch(Throwable e) {\n-            }\n-            return null;\n-        });\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/DnDPage.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,113 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.geometry.HPos;\n+import javafx.geometry.Orientation;\n+import javafx.geometry.Pos;\n+import javafx.geometry.VPos;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.MenuButton;\n+import javafx.scene.layout.FlowPane;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.Region;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.options.DoubleOption;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.PaneContentOptions;\n+import com.oracle.tools.fx.monkey.sheets.PropertiesMonitor;\n+import com.oracle.tools.fx.monkey.sheets.RegionPropertySheet;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.Menus;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import com.oracle.tools.fx.monkey.util.Utils;\n+\n+\/**\n+ * FlowPane Page.\n+ *\/\n+public class FlowPanePage extends TestPaneBase {\n+    private final FlowPane pane;\n+\n+    public FlowPanePage() {\n+        super(\"FlowPanePage\");\n+\n+        pane = new FlowPane() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+\n+        MenuButton addButton = new MenuButton(\"Add\");\n+        PaneContentOptions.addChildOption(addButton.getItems(), pane.getChildren(), this::createMenu);\n+\n+        Button clearButton = FX.button(\"Clear Items\", () -> {\n+            pane.getChildren().clear();\n+        });\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"FlowPane\");\n+        op.option(\"Alignment:\", new EnumOption<>(\"alignment\", Pos.class, pane.alignmentProperty()));\n+        op.option(\"Children:\", Utils.buttons(addButton, clearButton));\n+        op.option(\"Column HAlignment:\", new EnumOption<>(\"columnHalignment\", HPos.class, pane.columnHalignmentProperty()));\n+        op.option(\"HGap:\", DoubleOption.of(\"hgap\", pane.hgapProperty(), 0, 10, 20, 30, 100));\n+        op.option(\"Orientation:\", new EnumOption<>(\"orientation\", Orientation.class, pane.orientationProperty()));\n+        op.option(\"Pref Wrap Length:\", DoubleOption.of(\"vgap\", pane.prefWrapLengthProperty(), 0, 100, 200, 300, 400, 500));\n+        op.option(\"Row VAlignment:\", new EnumOption<>(\"rowValignment\", VPos.class, pane.rowValignmentProperty()));\n+        op.option(\"VGap:\", DoubleOption.of(\"vgap\", pane.vgapProperty(), 0, 10, 20, 30, 100));\n+        RegionPropertySheet.appendTo(op, pane);\n+\n+        setContent(pane);\n+        setOptions(op);\n+    }\n+\n+    private void createMenu(Node n) {\n+        FX.setPopupMenu(n, () -> {\n+            ContextMenu cm = new ContextMenu();\n+            Menus.marginSubMenu(cm, (v) -> FlowPane.setMargin(n, v), () -> FlowPane.getMargin(n));\n+            if(n instanceof Region r) {\n+                FX.separator(cm);\n+                Menus.sizeSubMenus(cm, r);\n+            }\n+            FX.separator(cm);\n+            FX.item(cm, \"Remove\", () -> {\n+                if (n.getParent() instanceof Pane p) {\n+                    p.getChildren().remove(n);\n+                }\n+            });\n+            FX.separator(cm);\n+            FX.item(cm, \"Show Properties Monitor...\", () -> {\n+                PropertiesMonitor.open(n);\n+            });\n+            return cm;\n+        });\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/FlowPanePage.java","additions":113,"deletions":0,"binary":false,"changes":113,"status":"added"},{"patch":"@@ -0,0 +1,163 @@\n+\/*\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javafx.collections.ObservableList;\n+import javafx.geometry.HPos;\n+import javafx.geometry.Pos;\n+import javafx.geometry.VPos;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.MenuButton;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.Priority;\n+import javafx.scene.layout.Region;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.PaneContentOptions;\n+import com.oracle.tools.fx.monkey.sheets.Options;\n+import com.oracle.tools.fx.monkey.sheets.PropertiesMonitor;\n+import com.oracle.tools.fx.monkey.sheets.RegionPropertySheet;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.Menus;\n+import com.oracle.tools.fx.monkey.util.ObjectSelector;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import com.oracle.tools.fx.monkey.util.Utils;\n+\n+\/**\n+ * GridPane Page.\n+ *\/\n+public class GridPanePage extends TestPaneBase {\n+    static record GridCoordinates(int col, int row) { }\n+\n+    private final GridPane pane;\n+\n+    public GridPanePage() {\n+        super(\"GridPanePage\");\n+\n+        pane = new GridPane() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+\n+        MenuButton addButton = new MenuButton(\"Add\");\n+        PaneContentOptions.addChildOption(addButton.getItems(), pane.getChildren(), this::createMenu);\n+\n+        Button clearButton = FX.button(\"Clear Items\", () -> {\n+            pane.getChildren().clear();\n+        });\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"GridPane\");\n+        op.option(\"Alignment:\", new EnumOption<Pos>(\"alignment\", Pos.class, pane.alignmentProperty()));\n+        op.option(\"Children:\", createChildrenOptions(pane.getChildren()));\n+        op.option(Utils.buttons(addButton, clearButton));\n+        op.option(new BooleanOption(\"gridLinesVisible\", \"grid lines visible\", pane.gridLinesVisibleProperty()));\n+        op.option(\"HGap:\", Options.spacing(\"hgap\", pane.hgapProperty()));\n+        op.option(\"VGap:\", Options.spacing(\"vgap\", pane.vgapProperty()));\n+        RegionPropertySheet.appendTo(op, pane);\n+\n+        setContent(pane);\n+        setOptions(op);\n+    }\n+\n+    private Region createRegion() {\n+        Region r = new Region();\n+        r.setPrefWidth(100);\n+        r.setPrefHeight(100);\n+        r.setMinWidth(50);\n+        r.setMinHeight(50);\n+        r.setBackground(Background.fill(Utils.nextColor()));\n+        createMenu(r);\n+        return r;\n+    }\n+\n+    public Node createChildrenOptions(ObservableList<Node> children) {\n+        ObjectSelector<Map<GridCoordinates, Node>> s = new ObjectSelector<>(\"children\", (m) -> {\n+            children.clear();\n+            if (m != null) {\n+                for (Map.Entry<GridCoordinates, Node> en: m.entrySet()) {\n+                    GridCoordinates c = en.getKey();\n+                    Node n = en.getValue();\n+                    pane.add(n, c.col(), c.row());\n+                }\n+            }\n+        });\n+        \/\/ TODO add more templates here\n+        s.addChoice(\"<empty>\", new HashMap<>());\n+        s.addChoiceSupplier(\"Diagonal\", () -> {\n+            Map<GridCoordinates, Node> m = new HashMap<>();\n+            m.put(new GridCoordinates(0, 0), createRegion());\n+            m.put(new GridCoordinates(1, 1), createRegion());\n+            m.put(new GridCoordinates(2, 2), createRegion());\n+            return m;\n+        });\n+        return s;\n+    }\n+\n+    private void createMenu(Node n) {\n+        FX.setPopupMenu(n, () -> {\n+            ContextMenu cm = new ContextMenu();\n+            Menus.intSubMenu(cm, \"Column Index\", (v) -> GridPane.setColumnIndex(n, v), () -> GridPane.getColumnIndex(n), 0, 10);\n+            Menus.intSubMenu(cm, \"Column Span\", (v) -> GridPane.setColumnSpan(n, v), () -> GridPane.getColumnSpan(n), 0, 10);\n+            Menus.booleanSubMenu(cm, \"Fill Height\", (v) -> GridPane.setFillHeight(n, v), () -> GridPane.isFillHeight(n));\n+            Menus.booleanSubMenu(cm, \"Fill Width\", (v) -> GridPane.setFillWidth(n, v), () -> GridPane.isFillWidth(n));\n+            Menus.enumSubMenu(cm, \"HAlignment\", HPos.class, true, (v) -> GridPane.setHalignment(n, v), () -> GridPane.getHalignment(n));\n+            Menus.enumSubMenu(cm, \"HGrow\", Priority.class, true, (v) -> GridPane.setHgrow(n, v), () -> GridPane.getHgrow(n));\n+            Menus.marginSubMenu(cm, (v) -> GridPane.setMargin(n, v), () -> GridPane.getMargin(n));\n+            Menus.intSubMenu(cm, \"Row Index\", (v) -> GridPane.setRowIndex(n, v), () -> GridPane.getRowIndex(n), 0, 10);\n+            Menus.intSubMenu(cm, \"Row Span\", (v) -> GridPane.setRowSpan(n, v), () -> GridPane.getRowSpan(n), 0, 10);\n+            Menus.enumSubMenu(cm, \"Valignment\", VPos.class, true, (v) -> GridPane.setValignment(n, v), () -> GridPane.getValignment(n));\n+            Menus.enumSubMenu(cm, \"VGrow\", Priority.class, true, (v) -> GridPane.setVgrow(n, v), () -> GridPane.getVgrow(n));\n+            if(n instanceof Region r) {\n+                FX.separator(cm);\n+                Menus.sizeSubMenus(cm, r);\n+            }\n+            FX.separator(cm);\n+            FX.item(cm, \"Remove\", () -> {\n+                if (n.getParent() instanceof Pane p) {\n+                    p.getChildren().remove(n);\n+                }\n+            });\n+            FX.separator(cm);\n+            FX.item(cm, \"Show Properties Monitor...\", () -> {\n+                PropertiesMonitor.open(n);\n+            });\n+            return cm;\n+        });\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/GridPanePage.java","additions":163,"deletions":0,"binary":false,"changes":163,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import javafx.geometry.Insets;\n@@ -34,0 +33,1 @@\n+import javafx.scene.control.MenuButton;\n@@ -35,1 +35,0 @@\n-import javafx.scene.layout.BorderPane;\n@@ -37,0 +36,1 @@\n+import javafx.scene.layout.Pane;\n@@ -45,0 +45,1 @@\n+import com.oracle.tools.fx.monkey.sheets.PropertiesMonitor;\n@@ -47,0 +48,1 @@\n+import com.oracle.tools.fx.monkey.util.Menus;\n@@ -70,4 +72,2 @@\n-        \/\/ TODO menu button\n-        Button addButton = FX.button(\"Add Item\", () -> {\n-            addItem(box.getChildren());\n-        });\n+        MenuButton addButton = new MenuButton(\"Add\");\n+        PaneContentOptions.addChildOption(addButton.getItems(), box.getChildren(), this::createMenu);\n@@ -89,3 +89,1 @@\n-        BorderPane bp = new BorderPane(box);\n-        bp.setPadding(new Insets(0, 10, 0, 0));\n-        setContent(bp);\n+        setContent(box);\n@@ -108,9 +106,1 @@\n-        r.setOnContextMenuRequested((ev) -> {\n-            ContextMenu m = new ContextMenu();\n-            FX.item(m, \"width=\" + r.getWidth());\n-            FX.separator(m);\n-            FX.item(m, \"min width=\" + r.getMinWidth());\n-            FX.item(m, \"pref width=\" + r.getPrefWidth());\n-            FX.item(m, \"max width=\" + r.getMaxWidth());\n-            m.show(r, ev.getScreenX(), ev.getScreenY());\n-        });\n+        createMenu(r);\n@@ -120,0 +110,23 @@\n+    private void createMenu(Node n) {\n+        FX.setPopupMenu(n, () -> {\n+            ContextMenu cm = new ContextMenu();\n+            Menus.enumSubMenu(cm, \"HGrow\", Priority.class, true, (v) -> HBox.setHgrow(n, v), () -> HBox.getHgrow(n));\n+            Menus.marginSubMenu(cm, (v) -> HBox.setMargin(n, v), () -> HBox.getMargin(n));\n+            if(n instanceof Region r) {\n+                FX.separator(cm);\n+                Menus.sizeSubMenus(cm, r);\n+            }\n+            FX.separator(cm);\n+            FX.item(cm, \"Remove\", () -> {\n+                if (n.getParent() instanceof Pane p) {\n+                    p.getChildren().remove(n);\n+                }\n+            });\n+            FX.separator(cm);\n+            FX.item(cm, \"Show Properties Monitor...\", () -> {\n+                PropertiesMonitor.open(n);\n+            });\n+            return cm;\n+        });\n+    }\n+\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/HBoxPage.java","additions":32,"deletions":19,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -0,0 +1,226 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import java.io.File;\n+import javafx.beans.binding.Bindings;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Priority;\n+import javafx.scene.media.Media;\n+import javafx.scene.media.MediaPlayer;\n+import javafx.scene.media.MediaView;\n+import javafx.stage.FileChooser;\n+import javafx.util.Duration;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.DoubleOption;\n+import com.oracle.tools.fx.monkey.sheets.NodePropertySheet;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import com.oracle.tools.fx.monkey.util.Utils;\n+\n+\/**\n+ * MediaView Test Page.\n+ *\/\n+public class MediaPlayerPage extends TestPaneBase {\n+    private final MediaView mediaView;\n+    private final Label currentTime = new Label();\n+    private final Label status = new Label();\n+    private String sourceURI;\n+    private Media media;\n+    private MediaPlayer player;\n+    private final SimpleBooleanProperty autoPlay = new SimpleBooleanProperty();\n+    private final SimpleBooleanProperty mute = new SimpleBooleanProperty();\n+    private final SimpleDoubleProperty volume = new SimpleDoubleProperty(1.0);\n+    \/\/ TODO\n+    \/\/  setAudioSpectrumInterval(double)\n+    \/\/  setAudioSpectrumListener(AudioSpectrumListener)\n+    \/\/  setAudioSpectrumNumBands(int)\n+    \/\/  setAudioSpectrumThreshold(int)\n+    \/\/  setBalance(double)\n+    \/\/  setCycleCount(int)\n+    \/\/  setRate(double)\n+    \/\/  setStartTime(Duration)\n+    \/\/  setStopTime(Duration)\n+    \/\/  setVolume(double)\n+\n+    public MediaPlayerPage() {\n+        super(\"MediaPlayerPage\");\n+\n+        sceneProperty().addListener((src, p, scene) -> {\n+            if (scene == null) {\n+                if (player != null) {\n+                    player.stop();\n+                    player.dispose();\n+                    player = null;\n+                }\n+            }\n+        });\n+\n+        Button playButton = new Button(\"Play\");\n+        playButton.setOnAction((ev) -> play());\n+\n+        Button stopButton = new Button(\"Stop\");\n+        stopButton.setOnAction((ev) -> stop());\n+\n+        mediaView = new MediaView();\n+        mediaView.setOnError((ev) -> {\n+            System.out.println(ev);\n+        });\n+\n+        OptionPane op = new OptionPane();\n+        \/\/ media\n+        op.section(\"Media\");\n+        op.option(\"Source URI:\", createSourceOption(\"source\"));\n+        op.option(new HBox(5, playButton, stopButton));\n+        \/\/ player\n+        op.section(\"MediaPlayer\");\n+        op.option(\"Current Time:\", currentTime);\n+        op.option(\"Status:\", status);\n+\/\/            setAudioSpectrumInterval(double)\n+\/\/            setAudioSpectrumListener(AudioSpectrumListener)\n+\/\/            setAudioSpectrumNumBands(int)\n+\/\/            setAudioSpectrumThreshold(int)\n+        op.option(new BooleanOption(\"autoPlay\", \"auto play\", autoPlay));\n+\/\/            setBalance(double)\n+\/\/            setCycleCount(int)\n+        op.option(new BooleanOption(\"mute\", \"mute\", mute));\n+\/\/            setRate(double)\n+\/\/            setStartTime(Duration)\n+\/\/            setStopTime(Duration)\n+        op.option(\"Volume:\", DoubleOption.of(\"volume\", volume, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0));\n+        \/\/ view\n+        op.section(\"MediaView\");\n+        op.option(\"Fit Height:\", DoubleOption.of(\"fitHeight\", mediaView.fitHeightProperty(), -1.0, 10.0, 100.0, 500.0));\n+        op.option(\"Fit Width:\", DoubleOption.of(\"fitWidth\", mediaView.fitWidthProperty(), -1.0, 10.0, 100.0, 500.0));\n+        op.option(new BooleanOption(\"preserveRatio\", \"preserve ratio\", mediaView.preserveRatioProperty()));\n+        op.option(new BooleanOption(\"smooth\", \"smooth\", mediaView.smoothProperty()));\n+\/\/            setViewport(Rectangle2D)\n+        op.option(\"X:\", DoubleOption.of(\"x\", mediaView.xProperty(), -10.0, 0.0, 10));\n+        op.option(\"Y:\", DoubleOption.of(\"y\", mediaView.yProperty(), -10.0, 0.0, 10));\n+        NodePropertySheet.appendTo(op, mediaView);\n+\n+        setOptions(op);\n+        setContent(new ScrollPane(mediaView));\n+    }\n+\n+    private Node createSourceOption(String name) {\n+        TextField uri = new TextField();\n+        uri.setPromptText(\"URI\");\n+        Button button = new Button(\"Browse...\");\n+        button.setOnAction((ev) -> {\n+            FileChooser fc = new FileChooser();\n+            if (sourceURI != null) {\n+                File f = parseFileURI(sourceURI);\n+                if (f != null) {\n+                    fc.setInitialDirectory(f.getParentFile());\n+                    fc.setInitialFileName(f.getName());\n+                }\n+            }\n+            File file = fc.showOpenDialog(FX.getParentWindow(this));\n+            if (file != null) {\n+                String s = file.toURI().toString();\n+                uri.setText(s);\n+                sourceURI = s;\n+            }\n+        });\n+        HBox hb = new HBox(5, uri, button);\n+        HBox.setHgrow(uri, Priority.ALWAYS);\n+        return hb;\n+    }\n+\n+    private static File parseFileURI(String text) {\n+        \/\/ FIX\n+        return null;\n+    }\n+\n+    private MediaPlayer player() {\n+        if (player == null) {\n+            String uri = sourceURI;\n+            if (Utils.isBlank(uri)) {\n+                player = null;\n+            } else {\n+                try {\n+                    Media m = new Media(uri);\n+\n+                    player = new MediaPlayer(m);\n+                    player.autoPlayProperty().bind(autoPlay);\n+                    player.muteProperty().bind(mute);\n+                    player.volumeProperty().bind(volume);\n+                    \/\/ TODO\n+\/\/                  setAudioSpectrumInterval(double)\n+\/\/                  setAudioSpectrumListener(AudioSpectrumListener)\n+\/\/                  setAudioSpectrumNumBands(int)\n+\/\/                  setAudioSpectrumThreshold(int)\n+\/\/                  setBalance(double)\n+\/\/                  setCycleCount(int)\n+\/\/                  setRate(double)\n+\/\/                  setStartTime(Duration)\n+\/\/                  setStopTime(Duration)\n+                    currentTime.textProperty().bind(Bindings.createStringBinding(() -> {\n+                        Duration t = player.getCurrentTime();\n+                        return String.valueOf(t);\n+                    }, player.currentTimeProperty()));\n+                    status.textProperty().bind(Bindings.createStringBinding(() -> {\n+                        MediaPlayer.Status s = player.getStatus();\n+                        return String.valueOf(s);\n+                    }, player.statusProperty()));\n+                    player.setOnError(() -> {\n+                        p(\"ON ERROR\");\n+                        player.getError().printStackTrace();\n+                    });\n+                    mediaView.setMediaPlayer(player);\n+                } catch (Throwable e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        }\n+        return player;\n+    }\n+\n+    private void play() {\n+        MediaPlayer p = player();\n+        if(p != null) {\n+            p.play();\n+        }\n+    }\n+\n+    private void stop() {\n+        if (player != null) {\n+            player.stop();\n+        }\n+    }\n+\n+    private static void p(Object x) {\n+        System.out.println(x);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/MediaPlayerPage.java","additions":226,"deletions":0,"binary":false,"changes":226,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -143,0 +143,5 @@\n+        s.addChoiceSupplier(\"No Custom Menus\", () -> {\n+            Menu m = new Menu(\"No Custom Menus\");\n+            m.getItems().add(new MenuItem(\"Regular Menu Item\"));\n+            return List.of(m);\n+        });\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/MenuBarPage.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import javafx.scene.control.Button;\n@@ -36,0 +37,2 @@\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Priority;\n@@ -99,1 +102,9 @@\n-        return s;\n+\n+        Button b = new Button(\"Reload\");\n+        b.setOnAction((ev) -> {\n+            var v = s.getSelectedValue();\n+            data.setAll(v);\n+        });\n+        HBox hb = new HBox(s, b);\n+        HBox.setHgrow(s, Priority.ALWAYS);\n+        return hb;\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/PieChartPage.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.control.ProgressIndicator;\n+import javafx.scene.control.skin.ProgressIndicatorSkin;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.options.DoubleOption;\n+import com.oracle.tools.fx.monkey.sheets.ControlPropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * ProgressIndicator Page.\n+ *\/\n+public class ProgressIndicatorPage extends TestPaneBase implements HasSkinnable {\n+    private final ProgressIndicator control;\n+\n+    public ProgressIndicatorPage() {\n+        super(\"ProgressIndicatorPage\");\n+\n+        control = new ProgressIndicator() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"ProgressIndicator\");\n+        op.option(\"Progress:\", DoubleOption.of(\"progress\", control.progressProperty(), -1.0, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0));\n+        ControlPropertySheet.appendTo(op, control);\n+\n+        setContent(control);\n+        setOptions(op);\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new ProgressIndicatorSkin(control));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ProgressIndicatorPage.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,0 @@\n-import javafx.scene.image.Image;\n-import javafx.scene.image.ImageView;\n@@ -41,0 +39,2 @@\n+import com.oracle.tools.fx.monkey.sheets.Options;\n+import com.oracle.tools.fx.monkey.util.CustomPane;\n@@ -68,1 +68,1 @@\n-        op.option(new BooleanOption(\"fitToWidth\", \"fit to width\", control.fitToHeightProperty()));\n+        op.option(new BooleanOption(\"fitToWidth\", \"fit to width\", control.fitToWidthProperty()));\n@@ -70,5 +70,5 @@\n-        op.option(\"HMax: TODO\", null); \/\/ TODO\n-        op.option(\"HMin: TODO\", null); \/\/ TODO\n-        op.option(\"HValue: TODO\", null); \/\/ TODO\n-        op.option(\"Min Viewport Height: TODO\", null); \/\/ TODO\n-        op.option(\"Min Viewport Width: TODO\", null); \/\/ TODO\n+        op.option(\"HMax:\", Options.doubleOption(\"hmax\", control.hmaxProperty()));\n+        op.option(\"HMin:\", Options.doubleOption(\"hmin\", control.hminProperty()));\n+        op.option(\"HValue:\", Options.doubleOption(\"hvalue\", control.hvalueProperty()));\n+        op.option(\"Min Viewport Height:\", Options.doubleOption(\"minViewportHeight\", control.minViewportHeightProperty()));\n+        op.option(\"Min Viewport Width:\", Options.doubleOption(\"minViewportWidth\", control.minViewportWidthProperty()));\n@@ -76,2 +76,2 @@\n-        op.option(\"Pref Viewport Height: TODO\", null); \/\/ TODO\n-        op.option(\"Pref Viewport Width: TODO\", null); \/\/ TODO\n+        op.option(\"Pref Viewport Height:\", Options.doubleOption(\"prefViewportHeight\", control.prefViewportHeightProperty()));\n+        op.option(\"Pref Viewport Width:\", Options.doubleOption(\"prefViewportWidth\", control.prefViewportWidthProperty()));\n@@ -79,4 +79,4 @@\n-        op.option(\"Viewport Bounds: TODO\", null); \/\/ TODO\n-        op.option(\"VMax: TODO\", null); \/\/ TODO\n-        op.option(\"VMin: TODO\", null); \/\/ TODO\n-        op.option(\"VValue: TODO\", null); \/\/ TODO\n+        op.option(\"Viewport Bounds:\", Options.boundsOption(\"viewportBounds\", control.viewportBoundsProperty()));\n+        op.option(\"VMax:\", Options.doubleOption(\"vmax\", control.vmaxProperty()));\n+        op.option(\"VMin:\", Options.doubleOption(\"vmin\", control.vminProperty()));\n+        op.option(\"VValue:\", Options.doubleOption(\"vvalue\", control.vvalueProperty()));\n@@ -112,0 +112,1 @@\n+        op.addChoiceSupplier(\"Panel\", CustomPane::create);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ScrollPanePage.java","additions":16,"deletions":15,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.geometry.HPos;\n+import javafx.geometry.Orientation;\n+import javafx.geometry.Pos;\n+import javafx.geometry.VPos;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.control.Separator;\n+import javafx.scene.control.skin.SeparatorSkin;\n+import javafx.scene.layout.BorderPane;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.sheets.ControlPropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * Separator Page.\n+ *\/\n+public class SeparatorPage extends TestPaneBase implements HasSkinnable {\n+    private final Separator control;\n+\n+    public SeparatorPage() {\n+        super(\"SeparatorPage\");\n+\n+        control = new Separator() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"Separator\");\n+        op.option(\"Horizontal Alignment:\", new EnumOption<>(\"halignment\", false, HPos.class, control.halignmentProperty()));\n+        op.option(\"Orientation:\", new EnumOption<>(\"orientation\", true, Orientation.class, control.orientationProperty()));\n+        op.option(\"Vertical Alignment:\", new EnumOption<>(\"valignment\", false, VPos.class, control.valignmentProperty()));\n+        ControlPropertySheet.appendTo(op, control);\n+\n+        setContent(control);\n+        BorderPane.setAlignment(control, Pos.CENTER);\n+        setOptions(op);\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new SeparatorSkin(control));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/SeparatorPage.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.beans.property.ObjectProperty;\n+import javafx.geometry.Orientation;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.Node;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.skin.SliderSkin;\n+import javafx.util.StringConverter;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.DoubleOption;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.IntOption;\n+import com.oracle.tools.fx.monkey.options.ObjectOption;\n+import com.oracle.tools.fx.monkey.sheets.ControlPropertySheet;\n+import com.oracle.tools.fx.monkey.util.HasSkinnable;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+\n+\/**\n+ * Slider Page.\n+ *\/\n+public class SliderPage extends TestPaneBase implements HasSkinnable {\n+    private final Slider control;\n+\n+    public SliderPage() {\n+        super(\"SliderPage\");\n+\n+        control = new Slider() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"Slider\");\n+        op.option(\"Block Increment:\", DoubleOption.of(\"blockIncrement\", control.blockIncrementProperty(), 0.0, 1.0));\n+        op.option(\"Label Formatter:\", createLabelFormatterOption(\"labelFormatter\", control.labelFormatterProperty()));\n+        op.option(\"Major Tick Unit:\", DoubleOption.of(\"majorTickUnit\", control.majorTickUnitProperty(), 1.0, 10.0));\n+        op.option(\"Max:\", DoubleOption.of(\"max\", control.maxProperty(), 100.0));\n+        op.option(\"Min:\", DoubleOption.of(\"min\", control.minProperty(), 0.0));\n+        op.option(\"Minor Tick Count:\", new IntOption(\"minorTickUnit\", 0, Integer.MAX_VALUE, control.minorTickCountProperty()));\n+        op.option(\"Orientation:\", new EnumOption<>(\"orientation\", true, Orientation.class, control.orientationProperty()));\n+        op.option(\"Value:\", DoubleOption.of(\"value\", control.valueProperty(), 0.0));\n+        op.option(new BooleanOption(\"valueChanging\", \"value changing\", control.valueChangingProperty()));\n+        op.option(new BooleanOption(\"showTickLabels\", \"show tick labels\", control.showTickLabelsProperty()));\n+        op.option(new BooleanOption(\"showTickMarks\", \"show tick marks\", control.showTickMarksProperty()));\n+        op.option(new BooleanOption(\"snapToTicks\", \"snap to ticks\", control.snapToTicksProperty()));\n+        ControlPropertySheet.appendTo(op, control);\n+\n+        setContent(control);\n+        setOptions(op);\n+    }\n+\n+    private Node createLabelFormatterOption(String name, ObjectProperty<StringConverter<Double>> p) {\n+        var original = p.get();\n+        ObjectOption<StringConverter<Double>> op = new ObjectOption<>(name, p);\n+        op.addChoiceSupplier(\"Quoted\", () -> {\n+            return new StringConverter<Double>() {\n+                @Override\n+                public String toString(Double x) {\n+                    return \"\\\"\" + x + \"\\\"\";\n+                }\n+\n+                @Override\n+                public Double fromString(String s) {\n+                    return s == null ? null : Double.parseDouble(s);\n+                }\n+            };\n+        });\n+        op.addChoiceSupplier(\"Number\", () -> {\n+            return new StringConverter<Double>() {\n+                @Override\n+                public String toString(Double x) {\n+                    return x == null ? null : String.valueOf(x);\n+                }\n+\n+                @Override\n+                public Double fromString(String s) {\n+                    return s == null ? null : Double.parseDouble(s);\n+                }\n+            };\n+        });\n+        op.addChoice(\"<default>\", original);\n+        op.addChoice(\"<null>\", null);\n+        op.selectInitialValue();\n+        return op;\n+    }\n+\n+    @Override\n+    public void nullSkin() {\n+        control.setSkin(null);\n+    }\n+\n+    @Override\n+    public void newSkin() {\n+        control.setSkin(new SliderSkin(control));\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/SliderPage.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.geometry.Pos;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.MenuButton;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.StackPane;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.PaneContentOptions;\n+import com.oracle.tools.fx.monkey.sheets.PropertiesMonitor;\n+import com.oracle.tools.fx.monkey.sheets.RegionPropertySheet;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.Menus;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import com.oracle.tools.fx.monkey.util.Utils;\n+\n+\/**\n+ * StackPane Page.\n+ *\/\n+public class StackPanePage extends TestPaneBase {\n+    private final StackPane pane;\n+\n+    public StackPanePage() {\n+        super(\"StackPanePage\");\n+\n+        pane = new StackPane() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+\n+        MenuButton addButton = new MenuButton(\"Add\");\n+        PaneContentOptions.addChildOption(addButton.getItems(), pane.getChildren(), this::createMenu);\n+\n+        Button clearButton = FX.button(\"Clear Items\", () -> {\n+            pane.getChildren().clear();\n+        });\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"StackPane\");\n+        op.option(\"Alignment:\", new EnumOption<>(\"alignment\", Pos.class, pane.alignmentProperty()));\n+        op.option(\"Children:\", Utils.buttons(addButton, clearButton));\n+        RegionPropertySheet.appendTo(op, pane);\n+\n+        setContent(pane);\n+        setOptions(op);\n+    }\n+\n+    private void createMenu(Node n) {\n+        FX.setPopupMenu(n, () -> {\n+            ContextMenu cm = new ContextMenu();\n+            Menus.enumSubMenu(cm, \"Alignment\", Pos.class, true, (v) -> StackPane.setAlignment(n, v), () -> StackPane.getAlignment(n));\n+            Menus.marginSubMenu(cm, (v) -> StackPane.setMargin(n, v), () -> StackPane.getMargin(n));\n+            if(n instanceof Region r) {\n+                FX.separator(cm);\n+                Menus.sizeSubMenus(cm, r);\n+            }\n+            FX.separator(cm);\n+            FX.item(cm, \"Remove\", () -> {\n+                if (n.getParent() instanceof Pane p) {\n+                    p.getChildren().remove(n);\n+                }\n+            });\n+            FX.separator(cm);\n+            FX.item(cm, \"Show Properties Monitor...\", () -> {\n+                PropertiesMonitor.open(n);\n+            });\n+            return cm;\n+        });\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/StackPanePage.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,259 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ReadOnlyBooleanProperty;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.beans.property.SimpleStringProperty;\n+import javafx.geometry.Insets;\n+import javafx.scene.Node;\n+import javafx.scene.control.ToggleButton;\n+import javafx.scene.layout.HBox;\n+import javafx.stage.Modality;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+import com.oracle.tools.fx.monkey.options.BooleanOption;\n+import com.oracle.tools.fx.monkey.options.DoubleOption;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.TextChoiceOption;\n+import com.oracle.tools.fx.monkey.tools.CustomStage;\n+import com.oracle.tools.fx.monkey.util.BooleanConsumer;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import com.oracle.tools.fx.monkey.util.TextTemplates;\n+\n+\/**\n+ * Stage Page.\n+ *\/\n+public class StagePage extends TestPaneBase {\n+    private final ToggleButton button;\n+    private Stage stage;\n+    private final SimpleBooleanProperty alwaysOnTop = new SimpleBooleanProperty();\n+    private final SimpleBooleanProperty focused = new SimpleBooleanProperty();\n+    private final SimpleBooleanProperty fullScreen = new SimpleBooleanProperty();\n+    private final SimpleStringProperty fullScreenExitHint = new SimpleStringProperty();\n+    private final SimpleBooleanProperty iconified = new SimpleBooleanProperty(false);\n+    private final SimpleBooleanProperty maximized = new SimpleBooleanProperty(false);\n+    private final SimpleDoubleProperty maxHeight = new SimpleDoubleProperty(Double.MAX_VALUE);\n+    private final SimpleDoubleProperty maxWidth = new SimpleDoubleProperty(Double.MAX_VALUE);\n+    private final SimpleDoubleProperty minHeight = new SimpleDoubleProperty(0);\n+    private final SimpleDoubleProperty minWidth = new SimpleDoubleProperty(0);\n+    private final SimpleObjectProperty<Modality> modality = new SimpleObjectProperty<>(Modality.NONE);\n+    private final SimpleDoubleProperty opacity = new SimpleDoubleProperty(1.0);\n+    private final SimpleBooleanProperty owner = new SimpleBooleanProperty();\n+    private final SimpleDoubleProperty renderScaleX = new SimpleDoubleProperty(1.0);\n+    private final SimpleDoubleProperty renderScaleY = new SimpleDoubleProperty(1.0);\n+    private final SimpleBooleanProperty resizable = new SimpleBooleanProperty(true);\n+    private final SimpleBooleanProperty showing = new SimpleBooleanProperty();\n+    private final SimpleObjectProperty<StageStyle> stageStyle = new SimpleObjectProperty<>(StageStyle.DECORATED);\n+    private final SimpleStringProperty title = new SimpleStringProperty();\n+\n+    public StagePage() {\n+        super(\"WindowPage\");\n+\n+        button = new ToggleButton(\"Show Stage\");\n+        button.setOnAction((ev) -> {\n+            toggleStage();\n+        });\n+\n+        OptionPane op = createOptionPane();\n+\n+        HBox p = new HBox(4, button);\n+        p.setPadding(new Insets(4));\n+\n+        setContent(p);\n+        setOptions(op);\n+    }\n+\n+    private OptionPane createOptionPane() {\n+        OptionPane op = new OptionPane();\n+\n+        \/\/ stage\n+        op.section(\"Stage\");\n+        op.option(new BooleanOption(\"fullScreen\", \"full screen\", fullScreen));\n+        op.option(\"Full Screen Hint:\", textChoices(\"fullScreenHint\", fullScreenExitHint));\n+        op.option(new BooleanOption(\"iconified\", \"iconified\", iconified));\n+        op.option(new BooleanOption(\"maximized\", \"maximized\", maximized));\n+        op.option(\"Max Height:\", maxHeight(\"maxHeight\", maxHeight));\n+        op.option(\"Max Width:\", maxHeight(\"maxWidth\", maxWidth));\n+        op.option(\"Min Height:\", maxHeight(\"minHeight\", minHeight));\n+        op.option(\"Min Width:\", maxHeight(\"minWidth\", minWidth));\n+        op.option(new BooleanOption(\"resizable\", \"resizable\", resizable));\n+        op.option(\"Title:\", textChoices(\"title\", title));\n+\n+        \/\/ init\n+        op.section(\"Stage Initialization\");\n+        op.option(new BooleanOption(\"alwaysOnTop\", \"always on top\", alwaysOnTop));\n+        op.option(\"Modality:\", new EnumOption(\"modality\", Modality.class, modality));\n+        op.option(new BooleanOption(\"owner\", \"set owner\", owner));\n+        op.option(\"Stage Style:\", new EnumOption(\"stageStyle\", StageStyle.class, stageStyle));\n+\n+        \/\/ window\n+        op.section(\"Window\");\n+        op.option(new BooleanOption(\"focused\", \"focused\", focused));\n+        op.option(\"Opacity:\", opacity(\"opacity\", opacity));\n+        op.option(\"Render Scale X:\", scale(\"renderScaleX\", renderScaleX));\n+        op.option(\"Render Scale Y:\", scale(\"renderScaleY\", renderScaleY));\n+        return op;\n+    }\n+\n+    private Stage createStage() {\n+        Stage s = new CustomStage(stageStyle.get());\n+\n+        \/\/ init\n+        s.setAlwaysOnTop(alwaysOnTop.get());\n+        s.initModality(modality.get());\n+        s.initOwner(owner.get() ? FX.getParentWindow(this) : null);\n+\n+        \/\/ properties\n+        link(fullScreen, s.fullScreenProperty(), s::setFullScreen);\n+        \/\/ TODO fullScreenExitCombination\n+        s.fullScreenExitHintProperty().bindBidirectional(fullScreenExitHint);\n+        link(iconified, s.iconifiedProperty(), s::setIconified);\n+        link(maximized, s.maximizedProperty(), s::setMaximized);\n+        s.maxHeightProperty().bindBidirectional(maxHeight);\n+        s.maxWidthProperty().bindBidirectional(maxWidth);\n+        s.minHeightProperty().bindBidirectional(minHeight);\n+        s.minWidthProperty().bindBidirectional(minWidth);\n+        s.resizableProperty().bindBidirectional(resizable);\n+        \/\/ TODO scene\n+        s.titleProperty().bindBidirectional(title);\n+\n+        \/\/ window\n+        link(focused, s.focusedProperty(), null);\n+        \/\/ TODO forceIntegerRenderScale\n+        \/\/ TODO height, ro\n+        \/\/ TODO setOnXXX\n+        s.opacityProperty().bindBidirectional(opacity);\n+        s.renderScaleXProperty().bindBidirectional(renderScaleX);\n+        s.renderScaleYProperty().bindBidirectional(renderScaleY);\n+        \/\/ TODO width, ro\n+        \/\/ TODO x,y\n+        link(showing, s.showingProperty(), null);\n+        return s;\n+    }\n+\n+    private void setSceneFocused(Stage s, boolean on) {\n+        if (on) {\n+            s.requestFocus();\n+        }\n+    }\n+\n+    private void setSceneShowing(Stage s, boolean on) {\n+        if (on) {\n+            s.show();\n+        } else {\n+            s.hide();\n+        }\n+    }\n+\n+    private static Node maxHeight(String name, DoubleProperty p) {\n+        DoubleOption op = new DoubleOption(name, p);\n+        op.addChoice(0);\n+        op.addChoice(10.0);\n+        op.addChoice(33.3);\n+        op.addChoice(100.0);\n+        op.addChoice(\"Double.MAX_VALUE\", Double.MAX_VALUE);\n+        op.addChoice(\"Double.POSITIVE_INFINITY\", Double.POSITIVE_INFINITY);\n+        op.addChoice(\"NaN\", Double.NaN);\n+        op.selectInitialValue();\n+        return op;\n+    }\n+\n+    private static Node opacity(String name, DoubleProperty p) {\n+        DoubleOption op = new DoubleOption(name, p);\n+        op.addChoice(0);\n+        op.addChoice(0.5);\n+        op.addChoice(1.0);\n+        op.addChoice(\"NaN\", Double.NaN);\n+        op.selectInitialValue();\n+        return op;\n+    }\n+\n+    private static Node scale(String name, DoubleProperty p) {\n+        DoubleOption op = new DoubleOption(name, p);\n+        op.addChoice(0);\n+        op.addChoice(0.5);\n+        op.addChoice(1.0);\n+        op.addChoice(2.0);\n+        op.addChoice(\"NaN\", Double.NaN);\n+        op.selectInitialValue();\n+        return op;\n+    }\n+\n+    private Node textChoices(String name, SimpleStringProperty p) {\n+        TextChoiceOption op = new TextChoiceOption(name, true, p);\n+        op.addChoice(\"<null>\", null);\n+        op.addChoice(\"Short\", \"We are now full screen\");\n+        op.addChoice(\"Multi-line\", \"One.\\nTwo.\\nThree.\");\n+        op.addChoice(\"Lorem Impsum\", TextTemplates.loremIpsum());\n+        return op;\n+    }\n+\n+    private void toggleStage() {\n+        if (stage == null) {\n+            stage = createStage();\n+            stage.show();\n+            stage.showingProperty().addListener((s, p, on) -> {\n+                if (!on) {\n+                    button.setSelected(false);\n+                    stage = null;\n+                }\n+            });\n+        } else {\n+            stage.hide();\n+            stage = null;\n+            button.setSelected(false);\n+        }\n+    }\n+\n+    private void close() {\n+        if (stage != null) {\n+            stage.hide();\n+            stage = null;\n+            button.setSelected(false);\n+        }\n+    }\n+\n+    private static void link(BooleanProperty ui, ReadOnlyBooleanProperty main, BooleanConsumer c) {\n+        main.addListener((s, p, v) -> {\n+            ui.set(v);\n+        });\n+        if (c != null) {\n+            ui.addListener((s, p, v) -> {\n+                if (main.get() != v) {\n+                    c.consume(v);\n+                }\n+            });\n+            boolean val = ui.get();\n+            c.consume(val);\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/StagePage.java","additions":259,"deletions":0,"binary":false,"changes":259,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -220,0 +220,10 @@\n+        s.addChoiceSupplier(\"200\", () -> {\n+            var cs = columnBuilder();\n+            for (int i = 1; i < 200; i++) {\n+                cs.col(\"C\" + i);\n+                if(i % 2 == 0) {\n+                    cs.pref(30 + i);\n+                }\n+            }\n+            return cs.asList();\n+        });\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TableViewPage.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import javafx.scene.layout.BorderPane;\n@@ -51,0 +52,1 @@\n+import com.oracle.tools.fx.monkey.util.LayoutInfoVisualizer;\n@@ -64,2 +66,0 @@\n-    private final BooleanOption showChars;\n-    private final BooleanOption showCaretPaths;\n@@ -70,0 +70,2 @@\n+    private final BorderPane container;\n+    private final LayoutInfoVisualizer visualizer;\n@@ -91,0 +93,2 @@\n+        visualizer = new LayoutInfoVisualizer();\n+\n@@ -111,4 +115,0 @@\n-        showChars = new BooleanOption(\"showChars\", \"show characters\", (v) -> updateShowCharacters(v));\n-\n-        showCaretPaths = new BooleanOption(\"showCaretPaths\", \"show caret paths\", (v) -> updateShowCaretPaths(v));\n-\n@@ -122,1 +122,0 @@\n-\n@@ -124,3 +123,5 @@\n-        op.option(showChars);\n-        op.option(showCaretPaths);\n-\n+        op.option(new BooleanOption(\"showCaretAndRange\", visualizer.caretOptionText(), visualizer.showCaretAndRange));\n+\/\/        op.option(new BooleanOption(\"useLegacyAPI\", \"(use TextFlow API)\", visualizer.legacyAPI));\n+\/\/        op.option(new BooleanOption(\"showLines\", \"show text lines\", visualizer.showLines));\n+\/\/        op.option(new BooleanOption(\"showBounds\", \"show layout bounds\", visualizer.showLayoutBounds));\n+\/\/        op.option(new BooleanOption(\"includeLineSpacing\", \"include lineSpacing \", visualizer.includeLineSpace));\n@@ -134,1 +135,3 @@\n-        setContent(textFlow);\n+        container = new BorderPane(textFlow);\n+\n+        setContent(container);\n@@ -138,0 +141,1 @@\n+        visualizer.attach(container, textFlow);\n@@ -169,1 +173,1 @@\n-            t(\"BOLD \", f, \"-fx-font-weight:bold;\"),\n+            t(\"BOLD900 \", f, \"-fx-font-weight:900;\"),\n@@ -173,0 +177,1 @@\n+            t(\"strike-through \", f, \"-fx-strikethrough:true;\"),\n@@ -186,2 +191,2 @@\n-            t(\"BOLD \", f, \"-fx-font-weight:100; -fx-scale-x:200%;\"),\n-            t(\"BOLD \", f, \"-fx-font-weight:900;\"),\n+            t(\"Weight100-Scale200% \", f, \"-fx-font-weight:100; -fx-scale-x:200%;\"),\n+            t(\"BOLD900 \", f, \"-fx-font-weight:900;\"),\n@@ -190,0 +195,1 @@\n+            t(\"strike-through \", f, \"-fx-strikethrough:true;\"),\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextFlowPage.java","additions":21,"deletions":15,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import javafx.scene.layout.BorderPane;\n@@ -51,0 +52,1 @@\n+import com.oracle.tools.fx.monkey.util.LayoutInfoVisualizer;\n@@ -52,1 +54,1 @@\n-import com.oracle.tools.fx.monkey.util.ShowCharacterRuns;\n+import com.oracle.tools.fx.monkey.util.StdoutMouseListener;\n@@ -61,1 +63,0 @@\n-    private final BooleanOption showChars;\n@@ -64,0 +65,2 @@\n+    private final BorderPane container;\n+    private final LayoutInfoVisualizer visualizer;\n@@ -74,1 +77,1 @@\n-        showChars = new BooleanOption(\"showChars\", \"show characters\", (v) -> updateShowCharacters(v));\n+        visualizer = new LayoutInfoVisualizer();\n@@ -95,1 +98,0 @@\n-\n@@ -97,0 +99,6 @@\n+        op.option(new BooleanOption(\"showCaretAndRange\", visualizer.caretOptionText(), visualizer.showCaretAndRange));\n+\/\/        op.option(new BooleanOption(\"useLegacyAPI\", \"(use Text API)\", visualizer.legacyAPI));\n+\/\/        op.option(new BooleanOption(\"showLines\", \"show text lines\", visualizer.showLines));\n+\/\/        op.option(new BooleanOption(\"showBounds\", \"show layout bounds\", visualizer.showLayoutBounds));\n+\/\/        op.option(new BooleanOption(\"includeLineSpacing\", \"include lineSpacing\", visualizer.includeLineSpace));\n+\/\/        op.separator();\n@@ -98,1 +106,0 @@\n-        op.option(showChars);\n@@ -103,0 +110,2 @@\n+        container = new BorderPane(text);\n+\n@@ -108,1 +117,1 @@\n-        scroll.setContent(new Group(text));\n+        scroll.setContent(container);\n@@ -114,9 +123,1 @@\n-        updateShowCharacters(false);\n-    }\n-\n-    private void updateShowCharacters(boolean on) {\n-        if (on) {\n-            ShowCharacterRuns.createFor(text);\n-        } else {\n-            ShowCharacterRuns.remove(text);\n-        }\n+        visualizer.attach(container, text);\n@@ -142,1 +143,7 @@\n-        FX.item(m, \"Accessibility Attributes\", () -> AccessibilityPropertyViewer.open(pick));\n+        FX.item(m, \"Accessibility Attributes\", () -> {\n+            AccessibilityPropertyViewer.open(pick);\n+        });\n+        StdoutMouseListener.attach(m, text);\n+        if (text != pick.getIntersectedNode()) {\n+            StdoutMouseListener.attach(m, pick.getIntersectedNode());\n+        }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TextPage.java","additions":24,"deletions":17,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.pages;\n+\n+import javafx.geometry.Orientation;\n+import javafx.geometry.Pos;\n+import javafx.scene.AccessibleAttribute;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.MenuButton;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.TilePane;\n+import com.oracle.tools.fx.monkey.Loggers;\n+import com.oracle.tools.fx.monkey.options.DoubleOption;\n+import com.oracle.tools.fx.monkey.options.EnumOption;\n+import com.oracle.tools.fx.monkey.options.IntOption;\n+import com.oracle.tools.fx.monkey.options.PaneContentOptions;\n+import com.oracle.tools.fx.monkey.sheets.PropertiesMonitor;\n+import com.oracle.tools.fx.monkey.sheets.RegionPropertySheet;\n+import com.oracle.tools.fx.monkey.util.FX;\n+import com.oracle.tools.fx.monkey.util.Menus;\n+import com.oracle.tools.fx.monkey.util.OptionPane;\n+import com.oracle.tools.fx.monkey.util.TestPaneBase;\n+import com.oracle.tools.fx.monkey.util.Utils;\n+\n+\/**\n+ * TilePane Page.\n+ *\/\n+public class TilePanePage extends TestPaneBase {\n+    private final TilePane pane;\n+\n+    public TilePanePage() {\n+        super(\"TilePanePage\");\n+\n+        pane = new TilePane() {\n+            @Override\n+            public Object queryAccessibleAttribute(AccessibleAttribute a, Object... ps) {\n+                Object v = super.queryAccessibleAttribute(a, ps);\n+                Loggers.accessibility.log(a, v);\n+                return v;\n+            }\n+        };\n+\n+        MenuButton addButton = new MenuButton(\"Add\");\n+        PaneContentOptions.addChildOption(addButton.getItems(), pane.getChildren(), this::createMenu);\n+\n+        Button clearButton = FX.button(\"Clear Items\", () -> {\n+            pane.getChildren().clear();\n+        });\n+\n+        OptionPane op = new OptionPane();\n+        op.section(\"FlowPane\");\n+        op.option(\"Alignment:\", new EnumOption<>(\"alignment\", Pos.class, pane.alignmentProperty()));\n+        op.option(\"Children:\", Utils.buttons(addButton, clearButton));\n+        op.option(\"HGap:\", DoubleOption.of(\"hgap\", pane.hgapProperty(), 0, 10, 20, 30, 100));\n+        op.option(\"Orientation:\", new EnumOption<>(\"orientation\", Orientation.class, pane.orientationProperty()));\n+        op.option(\"Pref Columns:\", new IntOption(\"prefColumns\", -1, Integer.MAX_VALUE, pane.prefColumnsProperty()));\n+        op.option(\"Pref Rows:\", new IntOption(\"prefRows\", -1, Integer.MAX_VALUE, pane.prefRowsProperty()));\n+        op.option(\"Pref Tile Height:\", DoubleOption.of(\"prefTileHeight\", pane.prefTileHeightProperty(), 0, 100, 200, 300, 400, 500));\n+        op.option(\"Pref Tile Width:\", DoubleOption.of(\"prefTileWidth\", pane.prefTileWidthProperty(), 0, 100, 200, 300, 400, 500));\n+        op.option(\"Tile Alignment:\", new EnumOption<>(\"tileAlignment\", Pos.class, pane.tileAlignmentProperty()));\n+        op.option(\"VGap:\", DoubleOption.of(\"vgap\", pane.vgapProperty(), 0, 10, 20, 30, 100));\n+        RegionPropertySheet.appendTo(op, pane);\n+\n+        setContent(pane);\n+        setOptions(op);\n+    }\n+\n+    private void createMenu(Node n) {\n+        FX.setPopupMenu(n, () -> {\n+            ContextMenu cm = new ContextMenu();\n+            Menus.enumSubMenu(cm, \"Alignment\", Pos.class, true, (v) -> TilePane.setAlignment(n, v), () -> TilePane.getAlignment(n));\n+            Menus.marginSubMenu(cm, (v) -> TilePane.setMargin(n, v), () -> TilePane.getMargin(n));\n+            if(n instanceof Region r) {\n+                FX.separator(cm);\n+                Menus.sizeSubMenus(cm, r);\n+            }\n+            FX.separator(cm);\n+            FX.item(cm, \"Remove\", () -> {\n+                if (n.getParent() instanceof Pane p) {\n+                    p.getChildren().remove(n);\n+                }\n+            });\n+            FX.separator(cm);\n+            FX.item(cm, \"Show Properties Monitor...\", () -> {\n+                PropertiesMonitor.open(n);\n+            });\n+            return cm;\n+        });\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TilePanePage.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import javafx.scene.control.ContextMenu;\n@@ -38,0 +39,2 @@\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.Region;\n@@ -44,0 +47,2 @@\n+import com.oracle.tools.fx.monkey.sheets.PropertiesMonitor;\n+import com.oracle.tools.fx.monkey.util.FX;\n@@ -45,0 +50,1 @@\n+import com.oracle.tools.fx.monkey.util.Menus;\n@@ -55,1 +61,1 @@\n-        super(\"TitledPane\");\n+        super(\"TitledPanePage\");\n@@ -85,0 +91,1 @@\n+        createMenu(p);\n@@ -94,0 +101,1 @@\n+        createMenu(t);\n@@ -103,0 +111,1 @@\n+        createMenu(t);\n@@ -125,0 +134,21 @@\n+\n+    private void createMenu(Node n) {\n+        FX.setPopupMenu(n, () -> {\n+            ContextMenu cm = new ContextMenu();\n+            if(n instanceof Region r) {\n+                FX.separator(cm);\n+                Menus.sizeSubMenus(cm, r);\n+            }\n+            FX.separator(cm);\n+            FX.item(cm, \"Remove\", () -> {\n+                if (n.getParent() instanceof Pane p) {\n+                    p.getChildren().remove(n);\n+                }\n+            });\n+            FX.separator(cm);\n+            FX.item(cm, \"Show Properties Monitor...\", () -> {\n+                PropertiesMonitor.open(n);\n+            });\n+            return cm;\n+        });\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TitledPanePage.java","additions":32,"deletions":2,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,1 @@\n+import com.oracle.tools.fx.monkey.util.Menus;\n@@ -182,1 +183,1 @@\n-        n.setOnContextMenuRequested((ev) -> {\n+        FX.setPopupMenu(n, () -> {\n@@ -184,2 +185,0 @@\n-            FX.item(m, \"Remove\", () -> control.getItems().remove(n));\n-            FX.separator(m);\n@@ -188,3 +187,3 @@\n-            FX.item(m, \"Pref(50)\", () -> n.setPrefWidth(50));\n-            FX.item(m, \"Pref(200)\", () -> n.setPrefWidth(200));\n-            FX.item(m, \"Pref(500)\", () -> n.setPrefWidth(500));\n+            Menus.sizeSubMenus(m, n);\n+            FX.separator(m);\n+            FX.item(m, \"Remove\", () -> control.getItems().remove(n));\n@@ -193,1 +192,1 @@\n-            m.show(n, ev.getScreenX(), ev.getScreenY());\n+            return m;\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/ToolBarPage.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -234,0 +234,10 @@\n+        s.addChoiceSupplier(\"200\", () -> {\n+            var cs = columnBuilder();\n+            for (int i = 1; i < 200; i++) {\n+                cs.col(\"C\" + i);\n+                if(i % 2 == 0) {\n+                    cs.pref(30 + i);\n+                }\n+            }\n+            return cs.asList();\n+        });\n@@ -339,1 +349,2 @@\n-            TreeItem<DataRow> root = new TreeItem<>();\n+            \/\/ root cannot have null value JDK-8341281\n+            TreeItem<DataRow> root = new TreeItem<>(new DataRow());\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/TreeTableViewPage.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import javafx.geometry.Insets;\n@@ -34,0 +33,1 @@\n+import javafx.scene.control.MenuButton;\n@@ -35,1 +35,1 @@\n-import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.Pane;\n@@ -45,0 +45,1 @@\n+import com.oracle.tools.fx.monkey.sheets.PropertiesMonitor;\n@@ -47,0 +48,1 @@\n+import com.oracle.tools.fx.monkey.util.Menus;\n@@ -70,4 +72,2 @@\n-        \/\/ TODO menu button\n-        Button addButton = FX.button(\"Add Item\", () -> {\n-            addItem(box.getChildren());\n-        });\n+        MenuButton addButton = new MenuButton(\"Add\");\n+        PaneContentOptions.addChildOption(addButton.getItems(), box.getChildren(), this::createMenu);\n@@ -88,3 +88,1 @@\n-        BorderPane bp = new BorderPane(box);\n-        bp.setPadding(new Insets(0, 10, 0, 0));\n-        setContent(bp);\n+        setContent(box);\n@@ -107,0 +105,3 @@\n+        createMenu(r);\n+        return r;\n+    }\n@@ -108,8 +109,20 @@\n-        r.setOnContextMenuRequested((ev) -> {\n-            ContextMenu m = new ContextMenu();\n-            FX.item(m, \"height=\" + r.getHeight());\n-            FX.separator(m);\n-            FX.item(m, \"min height=\" + r.getMinHeight());\n-            FX.item(m, \"pref height=\" + r.getPrefHeight());\n-            FX.item(m, \"max height=\" + r.getMaxHeight());\n-            m.show(r, ev.getScreenX(), ev.getScreenY());\n+    private void createMenu(Node n) {\n+        FX.setPopupMenu(n, () -> {\n+            ContextMenu cm = new ContextMenu();\n+            Menus.marginSubMenu(cm, (v) -> VBox.setMargin(n, v), () -> VBox.getMargin(n));\n+            Menus.enumSubMenu(cm, \"VGrow\", Priority.class, true, (v) -> VBox.setVgrow(n, v), () -> VBox.getVgrow(n));\n+            if(n instanceof Region r) {\n+                FX.separator(cm);\n+                Menus.sizeSubMenus(cm, r);\n+            }\n+            FX.separator(cm);\n+            FX.item(cm, \"Remove\", () -> {\n+                if (n.getParent() instanceof Pane p) {\n+                    p.getChildren().remove(n);\n+                }\n+            });\n+            FX.separator(cm);\n+            FX.item(cm, \"Show Properties Monitor...\", () -> {\n+                PropertiesMonitor.open(n);\n+            });\n+            return cm;\n@@ -117,1 +130,0 @@\n-        return r;\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/pages\/VBoxPage.java","additions":31,"deletions":19,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import com.oracle.tools.fx.monkey.util.StdoutMouseListener;\n@@ -78,1 +79,1 @@\n-        op.addChoiceSupplier(\"Standard Context Menu\", () -> createStandardContextMenu(picker));\n+        op.addChoiceSupplier(\"Standard Context Menu\", () -> createStandardContextMenu(c, picker));\n@@ -84,1 +85,1 @@\n-    private static ContextMenu createStandardContextMenu(Picker picker) {\n+    private static ContextMenu createStandardContextMenu(Control c, Picker picker) {\n@@ -90,1 +91,1 @@\n-                populate(this, pick);\n+                populate(this, c, pick);\n@@ -96,1 +97,1 @@\n-    private static void populate(ContextMenu m, PickResult pick) {\n+    private static void populate(ContextMenu m, Control c, PickResult pick) {\n@@ -102,2 +103,10 @@\n-        FX.item(m, \"Show Properties Monitor...\", () -> PropertiesMonitor.open(source));\n-        FX.item(m, \"Accessibility Attributes...\", () -> AccessibilityPropertyViewer.open(pick));\n+        FX.item(m, \"Show Properties Monitor...\", () -> {\n+            PropertiesMonitor.open(source);\n+        });\n+        FX.item(m, \"Accessibility Attributes...\", () -> {\n+            AccessibilityPropertyViewer.open(pick);\n+        });\n+        StdoutMouseListener.attach(m, c);\n+        if (c != source) {\n+            StdoutMouseListener.attach(m, source);\n+        }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/ControlPropertySheet.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-        op.option(\"Clip: TODO\", null); \/\/ TODO\n+        op.option(\"Clip:\", Options.clip(\"clip\", n, n.clipProperty()));\n@@ -66,1 +66,0 @@\n-        \/\/op.option(\"On Various Events: TODO\", null); \/\/ TODO own section?\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/NodePropertySheet.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,3 @@\n+import java.util.ArrayList;\n+import javafx.beans.binding.Bindings;\n+import javafx.beans.binding.ObjectBinding;\n@@ -32,0 +35,3 @@\n+import javafx.geometry.BoundingBox;\n+import javafx.geometry.Bounds;\n+import javafx.geometry.Insets;\n@@ -36,0 +42,2 @@\n+import javafx.scene.layout.BackgroundFill;\n+import javafx.scene.layout.CornerRadii;\n@@ -43,0 +51,7 @@\n+import javafx.scene.shape.ClosePath;\n+import javafx.scene.shape.CubicCurveTo;\n+import javafx.scene.shape.Ellipse;\n+import javafx.scene.shape.MoveTo;\n+import javafx.scene.shape.Path;\n+import javafx.scene.shape.PathElement;\n+import javafx.scene.shape.Shape;\n@@ -113,0 +128,14 @@\n+    public static Node doubleOption(String name, Property<Number> p) {\n+        DoubleOption d = new DoubleOption(name, p);\n+        d.addChoice(\"0\", Double.valueOf(0));\n+        d.addChoice(\"10\", 10.0);\n+        d.addChoice(\"33.3\", 33.3);\n+        d.addChoice(\"100\", 100.0);\n+        d.addChoice(\"Double.MAX_VALUE\", Double.MAX_VALUE);\n+        d.addChoice(\"Double.MIN_VALUE\", Double.MIN_VALUE);\n+        d.addChoice(\"Double.POSITIVE_INFINITY\", Double.POSITIVE_INFINITY);\n+        d.addChoice(\"NaN\", Double.NaN);\n+        d.select(p.getValue(), true);\n+        return d;\n+    }\n+\n@@ -119,0 +148,1 @@\n+        op.addChoice(\"<null>\", null);\n@@ -151,1 +181,4 @@\n-        op.addChoice(\"<null>\", null);\n+        op.addChoiceSupplier(\"Negative Insets\", () -> {\n+            BackgroundFill f = new BackgroundFill(Color.rgb(0, 0, 255, 0.5), new CornerRadii(10), new Insets(-10, -10, -10, -10));\n+            return new Background(f);\n+        });\n@@ -199,0 +232,94 @@\n+\n+    public static Node boundsOption(String name, ObjectProperty<Bounds> p) {\n+        Bounds[] bounds = {\n+            b(0, 0, 0, 0),\n+            b(0, 0, 10, 10),\n+            b(0, 0, 1000, 1000),\n+            b(-500, -500, 1000, 1000)\n+        };\n+\n+        ObjectOption<Bounds> op = new ObjectOption<>(name, p);\n+        op.addChoice(\"<null>\", null);\n+        for(Bounds b: bounds) {\n+            String s =\n+                \"@\" + b.getMinX() + \",\" + b.getMinY() +\n+                \"  [\" + b.getWidth() + \"x\" + b.getHeight() + \"]\";\n+            op.addChoice(s, b);\n+        }\n+        op.selectInitialValue();\n+        return op;\n+    }\n+\n+    private static Bounds b(double x, double y, double w, double h) {\n+        return new BoundingBox(x, y, 0.0, w, h, 0.0);\n+    }\n+\n+    public static Node shape(String name, Node n, ObjectProperty<Shape> prop) {\n+        ObjectOption<Shape> op = new ObjectOption<>(name, prop);\n+        op.addChoice(\"<null>\", null);\n+        op.addChoiceSupplier(\"Leaf\", () -> new LeafShape(n));\n+        op.selectInitialValue();\n+        return op;\n+    }\n+\n+    public static Node clip(String name, Node n, ObjectProperty<Node> prop) {\n+        ObjectOption<Node> op = new ObjectOption<>(name, prop);\n+        op.addChoice(\"<null>\", null);\n+        op.addChoiceSupplier(\"Ellipse\", () -> {\n+            return new EllipseClip(n);\n+        });\n+        op.selectInitialValue();\n+        return op;\n+    }\n+\n+    private static class EllipseClip extends Ellipse {\n+        private final Node owner;\n+        private final ObjectBinding<Bounds> binding;\n+\n+        public EllipseClip(Node n) {\n+            this.owner = n;\n+            binding = Bindings.createObjectBinding(n::getLayoutBounds, n.layoutBoundsProperty());\n+            binding.addListener((p) -> {\n+                update();\n+            });\n+            update();\n+        }\n+\n+        private void update() {\n+            Bounds b = binding.get();\n+            double rx = b.getWidth() \/ 2.0;\n+            double ry = b.getHeight() \/ 2.0;\n+            setCenterX(rx);\n+            setCenterY(ry);\n+            setRadiusX(rx);\n+            setRadiusY(ry);\n+        }\n+    }\n+\n+    private static class LeafShape extends Path {\n+        private final Node owner;\n+        private final ObjectBinding<Bounds> binding;\n+\n+        public LeafShape(Node n) {\n+            this.owner = n;\n+            binding = Bindings.createObjectBinding(n::getLayoutBounds, n.layoutBoundsProperty());\n+            binding.addListener((p) -> {\n+                update();\n+            });\n+            update();\n+        }\n+\n+        private void update() {\n+            ArrayList<PathElement> a = new ArrayList<>();\n+            Bounds b = binding.get();\n+            double w = b.getWidth();\n+            double h = b.getHeight();\n+            if ((w > 0.0) && (h > 0.0)) {\n+                a.add(new MoveTo(0.0, 0.0));\n+                a.add(new CubicCurveTo(0.0, 0.0, w, 0.0, w, h));\n+                a.add(new CubicCurveTo(w, h, 0.0, h, 0.0, 0.0));\n+                a.add(new ClosePath());\n+            }\n+            getElements().setAll(a);\n+        }\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/Options.java","additions":129,"deletions":2,"binary":false,"changes":131,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,6 @@\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.application.Platform;\n@@ -36,0 +42,2 @@\n+import javafx.beans.binding.Bindings;\n+import javafx.beans.property.SimpleBooleanProperty;\n@@ -39,0 +47,1 @@\n+import javafx.collections.MapChangeListener;\n@@ -40,0 +49,1 @@\n+import javafx.collections.ObservableMap;\n@@ -51,0 +61,1 @@\n+import javafx.util.Duration;\n@@ -55,1 +66,1 @@\n- * Monitors Public Properties\n+ * Monitors Public Properties or Platform Preferences.\n@@ -58,0 +69,1 @@\n+    private static final long HIGHLIGHT_DURATION = 3_000;\n@@ -59,0 +71,2 @@\n+    private static Timeline timeline;\n+    private static HashSet<Entry> highlighted = new HashSet<>();\n@@ -60,1 +74,1 @@\n-    public PropertiesMonitor(Node owner) {\n+    private PropertiesMonitor(boolean wideKey, TreeItem<Entry> root, Runnable onHiding) {\n@@ -62,1 +76,1 @@\n-        table.setColumnResizePolicy(TreeTableView.CONSTRAINED_RESIZE_POLICY_FLEX_NEXT_COLUMN);\n+        table.setColumnResizePolicy(TreeTableView.CONSTRAINED_RESIZE_POLICY_SUBSEQUENT_COLUMNS);\n@@ -65,1 +79,1 @@\n-            c.setCellFactory((tc) -> createCell());\n+            c.setCellFactory((tc) -> createCell(false));\n@@ -67,1 +81,1 @@\n-            c.setPrefWidth(120);\n+            c.setPrefWidth(wideKey ? 300 : 120);\n@@ -72,1 +86,1 @@\n-            c.setCellFactory((tc) -> createCell());\n+            c.setCellFactory((tc) -> createCell(false));\n@@ -79,2 +93,2 @@\n-            c.setCellFactory((tc) -> createCell());\n-            c.setCellValueFactory((f) -> f.getValue().getValue().getValue());\n+            c.setCellFactory((tc) -> createCell(true));\n+            c.setCellValueFactory((f) -> f.getValue().getValue().valueProperty());\n@@ -85,1 +99,1 @@\n-        table.setRoot(collectProperties(owner));\n+        table.setRoot(root);\n@@ -87,0 +101,21 @@\n+\n+        \/\/ disconnect listeners on window hiding\n+        if (onHiding != null) {\n+            sceneProperty().addListener((s, p, scene) -> {\n+                if (scene != null) {\n+                    if (scene.getWindow() == null) {\n+                        scene.windowProperty().addListener((s2, p2, win) -> {\n+                            if (win != null) {\n+                                win.setOnHiding((ev) -> {\n+                                    onHiding.run();\n+                                });\n+                            }\n+                        });\n+                    } else {\n+                        scene.getWindow().setOnHiding((ev) -> {\n+                            onHiding.run();\n+                        });\n+                    }\n+                }\n+            });\n+        }\n@@ -92,1 +127,2 @@\n-            PropertiesMonitor p = new PropertiesMonitor(node);\n+            TreeItem<Entry> root = collectProperties(node);\n+            PropertiesMonitor p = new PropertiesMonitor(false, root, null);\n@@ -97,1 +133,7 @@\n-    private TreeTableCell createCell() {\n+    public static void openPreferences(Object parent) {\n+        PrefRoot root = new PrefRoot();\n+        PropertiesMonitor p = new PropertiesMonitor(true, root, root::disconnect);\n+        OptionWindow.open(parent, \"Platform Preferences Monitor\", 1190, 900, p);\n+    }\n+\n+    private TreeTableCell createCell(boolean trackChanges) {\n@@ -113,0 +155,1 @@\n+\n@@ -116,0 +159,1 @@\n+                    backgroundProperty().unbind();\n@@ -118,0 +162,11 @@\n+                    if (trackChanges) {\n+                        backgroundProperty().bind(Bindings.createObjectBinding(\n+                            () -> {\n+                                return\n+                                    en.highlightedProperty().get() ?\n+                                    Background.fill(Color.rgb(255, 255, 0, 0.5)) :\n+                                    null;\n+                            },\n+                            en.highlightedProperty())\n+                        );\n+                    }\n@@ -141,1 +196,1 @@\n-                Entry en = createEntry(n, p);\n+                Entry en = createEntry(n.getClass(), n, p);\n@@ -149,0 +204,1 @@\n+            a.add(new Entry(\"properties\", \"ObservableMap\", n.getProperties()));\n@@ -150,6 +206,0 @@\n-            Collections.sort(a, new Comparator<Entry>() {\n-                @Override\n-                public int compare(Entry a, Entry b) {\n-                    return a.getName().compareTo(b.getName());\n-                }\n-            });\n@@ -172,0 +222,11 @@\n+        addSorted(ti, a);\n+    }\n+\n+    static void addSorted(TreeItem<Entry> item, ArrayList<Entry> a) {\n+        Collections.sort(a, new Comparator<Entry>() {\n+            @Override\n+            public int compare(Entry a, Entry b) {\n+                return a.getName().compareTo(b.getName());\n+            }\n+        });\n+\n@@ -173,1 +234,1 @@\n-            ti.getChildren().add(new TreeItem<>(en));\n+            item.getChildren().add(new TreeItem<>(en));\n@@ -177,1 +238,1 @@\n-    private static Entry createEntry(Node n, PropertyDescriptor pd) {\n+    private static Entry createEntry(Class<?> cs, Object n, PropertyDescriptor pd) {\n@@ -191,1 +252,1 @@\n-            Method m = n.getClass().getMethod(pname);\n+            Method m = cs.getMethod(pname);\n@@ -197,1 +258,1 @@\n-                    return new Entry(pd.getName(), type, val);\n+                    return new Entry(name, type, val);\n@@ -206,0 +267,29 @@\n+    private static void highlight(Entry en) {\n+        if (en.setHighlight()) {\n+            highlighted.add(en);\n+            if (timeline == null) {\n+                timeline = new Timeline(\n+                    new KeyFrame(Duration.millis(250), (ev) -> {\n+                        clearExpiredHighlights();\n+                    }));\n+                timeline.setCycleCount(Timeline.INDEFINITE);\n+                timeline.play();\n+            }\n+        }\n+    }\n+\n+    private static void clearExpiredHighlights() {\n+        Iterator<Entry> it = highlighted.iterator();\n+        while (it.hasNext()) {\n+            Entry en = it.next();\n+            if (en.checkHighlightExpired()) {\n+                it.remove();\n+            }\n+        }\n+        if (highlighted.isEmpty()) {\n+            timeline.stop();\n+            timeline = null;\n+        }\n+    }\n+\n+    \/\/ a name-value or a header\n@@ -208,1 +298,1 @@\n-        private final String type;\n+        private String type;\n@@ -211,0 +301,2 @@\n+        private SimpleBooleanProperty highlighted;\n+        private long expiration = -1;\n@@ -218,0 +310,26 @@\n+        public SimpleBooleanProperty highlightedProperty() {\n+            if (highlighted == null) {\n+                highlighted = new SimpleBooleanProperty();\n+            }\n+            return highlighted;\n+        }\n+\n+        public boolean setHighlight() {\n+            if(expiration < 0) {\n+                \/\/ suppress first initialization\n+                expiration = 0;\n+                return false;\n+            }\n+            highlightedProperty().set(true);\n+            expiration = System.currentTimeMillis() + HIGHLIGHT_DURATION;\n+            return true;\n+        }\n+\n+        public boolean checkHighlightExpired() {\n+            if (System.currentTimeMillis() >= expiration) {\n+                highlightedProperty().set(false);\n+                return true;\n+            }\n+            return false;\n+        }\n+\n@@ -226,1 +344,1 @@\n-        public SimpleObjectProperty<Object> getValue() {\n+        public SimpleObjectProperty<Object> valueProperty() {\n@@ -247,0 +365,5 @@\n+                    } else if (prop instanceof ObservableMap p) {\n+                        p.addListener((Observable x) -> {\n+                            setValue(p.toString());\n+                        });\n+                        setValue(p.toString());\n@@ -258,1 +381,2 @@\n-            value.set(x);\n+            valueProperty().set(x);\n+            highlight(this);\n@@ -265,0 +389,4 @@\n+        public void setType(String s) {\n+            type = s;\n+        }\n+\n@@ -270,0 +398,77 @@\n+\n+    \/\/ for use with Platform Preferences\n+    static class PrefRoot\n+        extends TreeItem<Entry>\n+        implements MapChangeListener<String, Object>\n+    {\n+        private HashMap<String,Entry> props = new HashMap<>();\n+\n+        public PrefRoot() {\n+            super(null);\n+\n+            TreeItem<Entry> ti = new TreeItem<>(new Entry(\"Platform\", null, null));\n+            ti.setExpanded(true);\n+            getChildren().add(ti);\n+            {\n+                Entry en = new Entry(\"accessibilityActive\", \"Boolean\", Platform.accessibilityActiveProperty());\n+                ti.getChildren().add(new TreeItem<>(en));\n+            }\n+\n+            Platform.Preferences pref = Platform.getPreferences();\n+\n+            ti = new TreeItem<>(new Entry(\"Platform.Preferences\", null, null));\n+            ti.setExpanded(true);\n+            getChildren().add(ti);\n+            {\n+                ArrayList<Entry> a = new ArrayList<>();\n+                try {\n+                    BeanInfo inf = Introspector.getBeanInfo(Platform.Preferences.class);\n+                    PropertyDescriptor[] ps = inf.getPropertyDescriptors();\n+                    for (PropertyDescriptor p: ps) {\n+                        Entry en = createEntry(Platform.Preferences.class, pref, p);\n+                        if (en != null) {\n+                            a.add(en);\n+                        }\n+                    }\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+                addSorted(ti, a);\n+            }\n+\n+            ti = new TreeItem<>(new Entry(\"All Properties\", null, null));\n+            ti.setExpanded(true);\n+            getChildren().add(ti);\n+            {\n+                ArrayList<Entry> a = new ArrayList<>();\n+                for (String k: pref.keySet()) {\n+                    Object v = pref.get(k);\n+                    SimpleObjectProperty p = new SimpleObjectProperty(v);\n+                    String type = v == null ? \"<null>\" : v.getClass().getSimpleName();\n+                    Entry en = new Entry(k, type, p);\n+                    props.put(k, en);\n+                    a.add(en);\n+                }\n+                addSorted(ti, a);\n+            }\n+\n+            pref.addListener(this);\n+        }\n+\n+        public void disconnect() {\n+            Platform.getPreferences().removeListener(this);\n+        }\n+\n+        @Override\n+        public void onChanged(Change<? extends String, ? extends Object> change) {\n+            String key = change.getKey();\n+            Entry en = props.get(key);\n+            if (en != null) {\n+                Object v = Platform.getPreferences().get(key);\n+                if (v != null) {\n+                    en.setType(v.getClass().getSimpleName());\n+                }\n+                en.setValue(v);\n+            }\n+        }\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/PropertiesMonitor.java","additions":231,"deletions":26,"binary":false,"changes":257,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-        op.option(\"Shape: TODO\", null); \/\/ TODO\n+        op.option(\"Shape:\", Options.shape(\"shape\", r, r.shapeProperty()));\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/RegionPropertySheet.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,5 @@\n+import java.util.function.UnaryOperator;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.scene.Node;\n+import javafx.scene.control.TextFormatter;\n+import javafx.scene.control.TextFormatter.Change;\n@@ -28,0 +33,1 @@\n+import javafx.util.StringConverter;\n@@ -30,0 +36,1 @@\n+import com.oracle.tools.fx.monkey.options.ObjectOption;\n@@ -33,1 +40,1 @@\n- * Text Input Control Property Sheet.\n+ * TextInputControl Property Sheet.\n@@ -36,1 +43,1 @@\n-    public static void appendTo(OptionPane op, boolean multiLine, TextInputControl control) {\n+    public static void appendTo(OptionPane op, boolean multiLine, TextInputControl c) {\n@@ -38,5 +45,5 @@\n-        op.option(new BooleanOption(\"editable\", \"editable\", control.editableProperty()));\n-        op.option(\"Font:\", new FontOption(\"font\", false, control.fontProperty()));\n-        op.option(\"Prompt Text:\", Options.promptText(\"promptText\", true, control.promptTextProperty()));\n-        op.option(\"Text:\", Options.textOption(\"text\", multiLine, true, control.textProperty()));\n-        op.option(\"Text Formatter: TODO\", null); \/\/ TODO\n+        op.option(new BooleanOption(\"editable\", \"editable\", c.editableProperty()));\n+        op.option(\"Font:\", new FontOption(\"font\", false, c.fontProperty()));\n+        op.option(\"Prompt Text:\", Options.promptText(\"promptText\", true, c.promptTextProperty()));\n+        op.option(\"Text:\", Options.textOption(\"text\", multiLine, true, c.textProperty()));\n+        op.option(\"Text Formatter:\", createTextFormatterOption(\"textFormatter\", c.textFormatterProperty()));\n@@ -44,1 +51,40 @@\n-        ControlPropertySheet.appendTo(op, control);\n+        ControlPropertySheet.appendTo(op, c);\n+    }\n+\n+    private static Node createTextFormatterOption(String name, ObjectProperty<TextFormatter<?>> p) {\n+        ObjectOption<TextFormatter<?>> op = new ObjectOption<>(name, p);\n+        op.addChoice(\"<null>\", null);\n+        op.addChoiceSupplier(\"with FILTER\", () -> createFormatter(true, false, null));\n+        op.addChoiceSupplier(\"with value \\\"converter\\\"\", () -> createFormatter(false, true, null));\n+        op.addChoiceSupplier(\"with FILTER + value \\\"converter\\\"\", () -> createFormatter(true, true, null));\n+        op.selectInitialValue();\n+        return op;\n+    }\n+\n+    private static <V> TextFormatter<V> createFormatter(boolean withFilter, boolean withConverter, V defaultValue) {\n+        StringConverter<V> converter = null;\n+        if (withFilter) {\n+            converter = new StringConverter<V>() {\n+                @Override\n+                public String toString(Object x) {\n+                    return x == null ? null : \"\\\"\" + x + \"\\\"\";\n+                }\n+\n+                @Override\n+                public V fromString(String s) {\n+                    return (V)s;\n+                }\n+            };\n+        }\n+\n+        UnaryOperator<TextFormatter.Change> filter = null;\n+        if (withFilter) {\n+            filter = new UnaryOperator<TextFormatter.Change>() {\n+                @Override\n+                public Change apply(Change ch) {\n+                    ch.setText(ch.getText().toUpperCase());\n+                    return ch;\n+                }\n+            };\n+        }\n+        return new TextFormatter<V>(converter, defaultValue, filter);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/TextInputControlPropertySheet.java","additions":55,"deletions":9,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n-        System.out.println(source);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/sheets\/TypeSpecificContextMenu.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -173,1 +173,7 @@\n-            Object x = c.getContent(f);\n+            Object x;\n+            try {\n+                x = c.getContent(f);\n+            } catch(Throwable e) {\n+                x = \"Error getting clipboard content for \" + f + \"\\n\" + e;\n+            }\n+\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/ClipboardViewer.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,2 @@\n+import javafx.scene.control.Tab;\n+import javafx.scene.control.TabPane;\n@@ -39,0 +41,3 @@\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Priority;\n+import javafx.scene.layout.Region;\n@@ -49,1 +54,2 @@\n-    private static String oldStylesheet;\n+    private static String oldCustom;\n+    private static String oldQuick;\n@@ -85,0 +91,1 @@\n+        Button resetButton = FX.button(\"Reset\", this::reset);\n@@ -96,3 +103,0 @@\n-        r++;\n-        p.add(new Label(\"Custom CSS:\"), 0, r);\n-        p.add(updateButton, 1, r);\n@@ -100,2 +104,15 @@\n-        setTop(p);\n-        setCenter(cssField);\n+        Region spacer = new Region();\n+        HBox hb = new HBox(resetButton, spacer, updateButton);\n+        HBox.setHgrow(spacer, Priority.ALWAYS);\n+        hb.setPadding(new Insets(5, 10, 5, 10));\n+        BorderPane cssPane = new BorderPane(cssField);\n+        cssPane.setBottom(hb);\n+        cssPane.setPadding(new Insets(2));\n+\n+        TabPane tp = new TabPane();\n+        tp.getTabs().setAll(\n+            new Tab(\"Custom CSS\", cssPane),\n+            new Tab(\"Quick\", p)\n+            );\n+\n+        setCenter(tp);\n@@ -104,1 +121,1 @@\n-            update();\n+            updateQuick();\n@@ -111,1 +128,1 @@\n-        update();\n+        updateQuick();\n@@ -139,0 +156,5 @@\n+        String css = cssField.getText();\n+        applyStyleSheet(css, false);\n+    }\n+\n+    private void updateQuick() {\n@@ -143,1 +165,0 @@\n-\n@@ -145,3 +166,1 @@\n-        \/\/System.out.println(css); \/\/ FIX\n-\n-        applyStyleSheet(css);\n+        applyStyleSheet(css, true);\n@@ -151,2 +170,0 @@\n-        String css = cssField.getText();\n-\n@@ -164,3 +181,0 @@\n-        sb.append(css);\n-        sb.append(\"\\n\");\n-\n@@ -196,1 +210,1 @@\n-    private static void applyStyleSheet(String styleSheet) {\n+    private static void applyStyleSheet(String styleSheet, boolean quick) {\n@@ -199,1 +213,1 @@\n-            for (Window w : Window.getWindows()) {\n+            for (Window w: Window.getWindows()) {\n@@ -203,2 +217,8 @@\n-                    if (oldStylesheet != null) {\n-                        sheets.remove(oldStylesheet);\n+                    if (quick) {\n+                        if (oldQuick != null) {\n+                            sheets.remove(oldQuick);\n+                        }\n+                    } else {\n+                        if (oldCustom != null) {\n+                            sheets.remove(oldCustom);\n+                        }\n@@ -210,1 +230,23 @@\n-        oldStylesheet = ss;\n+\n+        if (quick) {\n+            oldQuick = ss;\n+        } else {\n+            oldCustom = ss;\n+        }\n+    }\n+\n+    private void reset() {\n+        for (Window w: Window.getWindows()) {\n+            Scene scene = w.getScene();\n+            if (scene != null) {\n+                ObservableList<String> sheets = scene.getStylesheets();\n+                if (oldCustom != null) {\n+                    sheets.remove(oldCustom);\n+                }\n+                if (oldQuick != null) {\n+                    sheets.remove(oldQuick);\n+                }\n+            }\n+        }\n+        oldCustom = null;\n+        oldQuick = null;\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/CssPlaygroundPane.java","additions":65,"deletions":23,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.tools;\n+\n+import java.util.Arrays;\n+import java.util.Comparator;\n+import javafx.scene.Group;\n+import javafx.scene.Parent;\n+import javafx.scene.Scene;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.input.ContextMenuEvent;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.Border;\n+import javafx.scene.layout.BorderStroke;\n+import javafx.scene.layout.BorderStrokeStyle;\n+import javafx.scene.layout.BorderWidths;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Circle;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+import com.oracle.tools.fx.monkey.util.CustomPane;\n+import com.oracle.tools.fx.monkey.util.FX;\n+\n+\/**\n+ * Custom Stage Tester.\n+ *\/\n+public class CustomStage extends Stage {\n+    public CustomStage(StageStyle style) {\n+        super(style);\n+\n+        setTitle(\"Stage [\" + style + \"]\");\n+        setWidth(700);\n+        setHeight(500);\n+\n+        setUiPanel();\n+    }\n+\n+    private void setContent(Parent n) {\n+        Scene sc = new Scene(n);\n+        sc.setFill(Color.TRANSPARENT);\n+        sc.setOnContextMenuRequested(this::createPopupMenu);\n+        setScene(sc);\n+    }\n+\n+    private void createPopupMenu(ContextMenuEvent ev) {\n+        ContextMenu m = new ContextMenu();\n+        FX.item(m, \"Irregular Shape\", this::setIrregularShape);\n+        FX.item(m, \"UI Panel\", this::setUiPanel);\n+        FX.item(m, \"TextArea\", this::setTextArea);\n+        FX.item(m, \"Empty\", this::setEmpty);\n+        FX.separator(m);\n+        FX.item(m, \"Size to Scene\", this::sizeToScene);\n+        FX.item(m, \"To Back\", this::toBack);\n+        FX.item(m, \"To Front\", this::toFront);\n+        FX.separator(m);\n+        FX.item(m, \"Close\", this::hide);\n+        m.show(this, ev.getScreenX(), ev.getScreenY());\n+    }\n+\n+    private void setEmpty() {\n+        setContent(new Group());\n+    }\n+\n+    private void setIrregularShape() {\n+        Circle c = new Circle(100, Color.RED);\n+        StackPane g = new StackPane(c);\n+        g.setBorder(new Border(new BorderStroke(Color.rgb(0, 0, 0, 0.3), BorderStrokeStyle.SOLID, null, new BorderWidths(4))));\n+        g.setBackground(Background.fill(Color.TRANSPARENT));\n+        setContent(g);\n+    }\n+\n+    private void setUiPanel() {\n+        CustomPane p = CustomPane.create();\n+        setContent(p);\n+    }\n+\n+    private void setTextArea() {\n+        setContent(new TextArea());\n+    }\n+\n+    public static void addMenu(MenuBar m) {\n+        StageStyle[] styles = StageStyle.values();\n+        Arrays.sort(styles, new Comparator<StageStyle>() {\n+            @Override\n+            public int compare(StageStyle a, StageStyle b) {\n+                return a.toString().compareTo(b.toString());\n+            }\n+        });\n+\n+        for (StageStyle st: styles) {\n+            FX.item(m, st.toString(), () -> {\n+                new CustomStage(st).show();\n+            });\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/CustomStage.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -123,1 +123,1 @@\n-        textArea = new TextArea(\"Arabic: العربية\\nHebrew: עברית\");\n+        textArea = new TextArea(\"Arabic: السَّلَامُ عَلَيْكُمْ\\nHebrew: עברית\");\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/EmbeddedFxTextArea.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,3 @@\n+import java.awt.Font;\n+import java.awt.GraphicsEnvironment;\n+import javax.swing.JComboBox;\n@@ -35,0 +38,1 @@\n+import javax.swing.text.JTextComponent;\n@@ -74,0 +78,2 @@\n+            int fontSize = 36;\n+\n@@ -75,0 +81,1 @@\n+            updateFont(textArea, fontSize);\n@@ -76,0 +83,11 @@\n+            updateFont(textField, fontSize);\n+\n+            String[] names = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();\n+            JComboBox<String> fonts = new JComboBox(names);\n+            fonts.addActionListener((ev) -> {\n+                String name = (String)fonts.getSelectedItem();\n+                Font f = new Font(name, Font.PLAIN, fontSize);\n+                textArea.setFont(f);\n+                textField.setFont(f);\n+            });\n+\n@@ -78,0 +96,1 @@\n+            p.add(fonts, BorderLayout.NORTH);\n@@ -84,0 +103,5 @@\n+\n+    private static void updateFont(JTextComponent c, float size) {\n+        Font f = c.getFont().deriveFont(size);\n+        c.setFont(f);\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/EmbeddedJTextAreaWindow.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+import javafx.scene.input.Clipboard;\n+import javafx.scene.input.ClipboardContent;\n@@ -35,0 +37,1 @@\n+import com.oracle.tools.fx.monkey.util.Native2Ascii;\n@@ -52,1 +55,6 @@\n-        ToolBar tp = new ToolBar(clearButton);\n+        Button copyButton = FX.button(\"Copy\", this::copy);\n+\n+        ToolBar tp = new ToolBar(\n+            copyButton,\n+            clearButton\n+        );\n@@ -60,1 +68,1 @@\n-    private void clear() {\n+    void clear() {\n@@ -64,0 +72,10 @@\n+    void copy() {\n+        String s = textField.getSelectedText();\n+        if (s.length() == 0) {\n+            s = textField.getText();\n+        }\n+        ClipboardContent cc = new ClipboardContent();\n+        cc.putString(s);\n+        Clipboard.getSystemClipboard().setContent(cc);\n+    }\n+\n@@ -69,1 +87,1 @@\n-        sb.append(\", text=\").append(ev.getText());\n+        sb.append(\", text=\").append(fmt(ev.getText()));\n@@ -125,4 +143,11 @@\n-        } else if (s.length() == 1) {\n-            char c = s.charAt(0);\n-            if (c > 0x20) {\n-                return s;\n+        }\n+\n+        boolean ascii = true;\n+        boolean printable = true;\n+\n+        int len = s.length();\n+        for (int i = 0; i < len; i++) {\n+            char c = s.charAt(i);\n+            if (c < 0x20) {\n+                printable = false;\n+                ascii = false;\n@@ -130,0 +155,7 @@\n+            if (c > 0x7f) {\n+                ascii = false;\n+            }\n+        }\n+\n+        if (ascii && printable) {\n+            return s;\n@@ -133,1 +165,0 @@\n-        sb.append('<');\n@@ -136,3 +167,5 @@\n-            sb.append(\"\\\\u\");\n-            sb.append(hex(c >> 4));\n-            sb.append(hex(c));\n+            if (c < 0x20) {\n+                Native2Ascii.escape(sb, c);\n+            } else {\n+                sb.append(c);\n+            }\n@@ -140,3 +173,0 @@\n-        sb.append('>');\n-        return sb.toString();\n-    }\n@@ -144,2 +174,6 @@\n-    private static char hex(int nibble) {\n-        return \"0123456789ABCDEF\".charAt(nibble & 0x0f);\n+        if (!ascii) {\n+            sb.append(\" <\");\n+            sb.append(Native2Ascii.native2ascii(s));\n+            sb.append(\">\");\n+        }\n+        return sb.toString();\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/KeyboardEventViewer.java","additions":51,"deletions":17,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-package com.oracle.tools.fx.monkey;\n+package com.oracle.tools.fx.monkey.tools;\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/ModalWindow.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/ModalWindow.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import com.oracle.tools.fx.monkey.util.Native2Ascii;\n@@ -131,1 +132,1 @@\n-            String text = native2ascii(s);\n+            String text = Native2Ascii.native2ascii(s);\n@@ -136,1 +137,1 @@\n-            String text = ascii2native(s);\n+            String text = Native2Ascii.ascii2native(s);\n@@ -143,83 +144,0 @@\n-    private String ascii2native(String text) {\n-        if (text == null) {\n-            return null;\n-        }\n-\n-        int sz = text.length();\n-        StringBuilder sb = new StringBuilder(sz);\n-        for (int i = 0; i < sz; i++) {\n-            char c = text.charAt(i);\n-            switch (c) {\n-            case '\\\\':\n-                int u = toUnicode(text, i + 1);\n-                if (u < 0) {\n-                    sb.append(c);\n-                } else {\n-                    sb.append((char)u);\n-                    i += 5;\n-                }\n-                break;\n-            default:\n-                sb.append(c);\n-                break;\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    public static String native2ascii(String text) {\n-        if (text == null) {\n-            return null;\n-        }\n-\n-        int sz = text.length();\n-        StringBuilder sb = new StringBuilder(sz + 256);\n-        for (int i = 0; i < sz; i++) {\n-            char c = text.charAt(i);\n-            switch (c) {\n-            case ' ':\n-            case '\\n':\n-                sb.append(c);\n-                break;\n-            default:\n-                if ((c > ' ') && (c < 0x7f)) {\n-                    sb.append(c);\n-                } else {\n-                    sb.append(\"\\\\u\");\n-                    sb.append(hex(c >> 12));\n-                    sb.append(hex(c >> 8));\n-                    sb.append(hex(c >> 4));\n-                    sb.append(hex(c));\n-                }\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    private static char hex(int n) {\n-        return \"0123456789abcdef\".charAt(n & 0x0f);\n-    }\n-\n-    private int toUnicode(String text, int ix) {\n-        if (text.length() < (ix + 5)) {\n-            return -1;\n-        }\n-\n-        char c = text.charAt(ix++);\n-        switch (c) {\n-        case 'u':\n-        case 'U':\n-            break;\n-        default:\n-            return -1;\n-        }\n-\n-        try {\n-            String s = text.substring(ix, ix + 4);\n-            int v = Integer.parseInt(s, 16);\n-            return v;\n-        } catch (NumberFormatException e) {\n-            return -1;\n-        }\n-    }\n-\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/Native2AsciiPane.java","additions":4,"deletions":86,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import javafx.geometry.Insets;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.PasswordField;\n+import javafx.scene.control.RadioButton;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TextField;\n+import javafx.scene.control.ToggleGroup;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Priority;\n+\n+\/**\n+ * Custom Pane with Typical Controls.\n+ *\/\n+public class CustomPane extends GridPane {\n+    private CustomPane(boolean innerScroll) {\n+        super(10, 5);\n+\n+        TextField loginField = new TextField();\n+        PasswordField passField = new PasswordField();\n+        Button button = new Button(\"Login\");\n+        RadioButton rb1 = new RadioButton(\"1\");\n+        RadioButton rb2 = new RadioButton(\"2\");\n+        RadioButton rb3 = new RadioButton(\"3\");\n+        new ToggleGroup().getToggles().addAll(rb1, rb2, rb3);\n+        HBox spacer = new HBox(10, rb1, rb2, rb3);\n+\n+        setPadding(new Insets(20));\n+        int r = 0;\n+        add(new Label(\"Login:\"), 0, r);\n+        add(loginField, 1, r, 2, 1);\n+        r++;\n+        add(new Label(\"Password:\"), 0, r);\n+        add(passField, 1, r, 2, 1);\n+        r++;\n+        add(spacer, 1, r);\n+        add(button, 2, r);\n+        if (innerScroll) {\n+            r++;\n+            add(new ScrollPane(new CustomPane(false)), 1, r, 2, 2);\n+        }\n+\n+        GridPane.setHgrow(loginField, Priority.ALWAYS);\n+        GridPane.setHgrow(passField, Priority.ALWAYS);\n+        GridPane.setHgrow(spacer, Priority.ALWAYS);\n+    }\n+\n+    public static CustomPane create() {\n+        return new CustomPane(true);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/CustomPane.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.util.function.Consumer;\n@@ -74,0 +75,7 @@\n+    public static Menu menu(ContextMenu cm, String text) {\n+        Menu m = new Menu(text);\n+        applyMnemonic(m);\n+        cm.getItems().add(m);\n+        return m;\n+    }\n+\n@@ -103,0 +111,10 @@\n+    public static CheckMenuItem checkItem(ContextMenu m, String name, boolean selected, Consumer<Boolean> client) {\n+        CheckMenuItem mi = new CheckMenuItem(name);\n+        mi.setSelected(selected);\n+        mi.selectedProperty().addListener((s, p, on) -> {\n+            client.accept(on);\n+        });\n+        m.getItems().add(mi);\n+        return mi;\n+    }\n+\n@@ -162,2 +180,2 @@\n-    public static final void item(ContextMenu m, String name) {\n-        item(m, name, null);\n+    public static MenuItem item(ContextMenu m, String name) {\n+        return item(m, name, null);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/FX.java","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,3 @@\n+import java.text.DecimalFormat;\n+import javafx.geometry.Insets;\n+\n@@ -31,0 +34,2 @@\n+    private static final DecimalFormat FORMAT_2DP = new DecimalFormat(\"#0.##\");\n+\n@@ -41,0 +46,16 @@\n+\n+    public static String format2DP(double v) {\n+        return FORMAT_2DP.format(v);\n+    }\n+\n+    public static String formatInsets(Insets v) {\n+        if(v == null) {\n+            return \"null\";\n+        }\n+        return \"Insets {\" +\n+            \"T=\" + format2DP(v.getTop()) +\n+            \" R=\" + format2DP(v.getRight()) +\n+            \" B=\" + format2DP(v.getBottom()) +\n+            \" L=\" + format2DP(v.getLeft()) +\n+            \"}\";\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/Formats.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,554 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javafx.animation.KeyFrame;\n+import javafx.animation.Timeline;\n+import javafx.beans.binding.Bindings;\n+import javafx.beans.binding.BooleanBinding;\n+import javafx.beans.property.SimpleBooleanProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.event.EventHandler;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Point2D;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.Group;\n+import javafx.scene.Node;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.Region;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.LineTo;\n+import javafx.scene.shape.MoveTo;\n+import javafx.scene.shape.Path;\n+import javafx.scene.shape.PathElement;\n+import javafx.scene.shape.Rectangle;\n+\/\/import javafx.scene.text.CaretInfo;\n+import javafx.scene.text.HitInfo;\n+\/\/import javafx.scene.text.LayoutInfo;\n+import javafx.scene.text.Text;\n+import javafx.scene.text.TextFlow;\n+\/\/import javafx.scene.text.TextLineInfo;\n+import javafx.util.Duration;\n+\n+\/**\n+ * Visualizes text geometry available via LayoutInfo API.\n+ *\n+ * show caret and shape modifiers:\n+ * caret:\n+ * - SHIFT: legacy caret API\n+ * - no modifiers: new caret API\n+ *\n+ * selection (click and drag):\n+ * - SHIFT: new selection API\n+ * - SHORTCUT: new strike-through API\n+ * - OPTION: new underline API\n+ * - no modifiers: legacy selection API\n+ *\n+ * https:\/\/bugs.openjdk.org\/browse\/JDK-8341670 [Text,TextFlow] Public API for Text Layout Info (Enhancement - P4)\n+ * https:\/\/bugs.openjdk.org\/browse\/JDK-8341672: [Text\/TextFlow] getRangeInfo (Enhancement - P4)\n+ * https:\/\/bugs.openjdk.org\/browse\/JDK-8341671: [Text\/TextFlow] getCaretInfo (Enhancement - P4)\n+ * https:\/\/bugs.openjdk.org\/browse\/JDK-8341438 TextFlow: incorrect caretShape(), hitTest(), rangeShape() with non-empty padding\/border\n+ * https:\/\/bugs.openjdk.org\/browse\/JDK-8317120 RFE: TextFlow.rangeShape() ignores lineSpacing\n+ * https:\/\/bugs.openjdk.org\/browse\/JDK-8317122 RFE: TextFlow.preferredHeight ignores lineSpacing\n+ *\/\n+public class LayoutInfoVisualizer {\n+\n+\/\/    public final SimpleBooleanProperty legacyAPI = new SimpleBooleanProperty();\n+    public final SimpleBooleanProperty showCaretAndRange = new SimpleBooleanProperty();\n+\/\/    public final SimpleBooleanProperty showLines = new SimpleBooleanProperty();\n+\/\/    public final SimpleBooleanProperty showLayoutBounds = new SimpleBooleanProperty();\n+\/\/    public final SimpleBooleanProperty includeLineSpace = new SimpleBooleanProperty();\n+\n+    private Pane parent;\n+    private final BooleanBinding isAnimating;\n+    private final SimpleObjectProperty<Node> owner = new SimpleObjectProperty<>();\n+    private Timeline animation;\n+\/\/    private Path boundsPath;\n+    private Path caretPath;\n+    private Path selectionPath;\n+    private Path strikeThroughPath;\n+    private Path underlinePath;\n+\/\/    private Group lines;\n+    private EventHandler<MouseEvent> mouseListener;\n+    private int startIndex;\n+    private boolean useSelectionShape;\n+    private boolean useStrikeThroughShape;\n+    private boolean useUnderlineShape;\n+\n+    \/** FIX JDK-8341438 TextFlow: incorrect caretShape(), hitTest(), rangeShape() with non-empty padding\/border *\/\n+    \/\/ show the problem in the legacy code\n+    private static final boolean CORRECT_FOR_8341438_BUG = false;\n+\n+    private static final double CARET_VIEW_ORDER = 1000;\n+    private static final double RANGE_VIEW_ORDER = 1010;\n+    private static final double TEXT_LINES_VIEW_ORDER = 1020;\n+    private static final double BOUNDS_VIEW_ORDER = 1030;\n+\n+    public LayoutInfoVisualizer() {\n+        isAnimating = Bindings.createBooleanBinding(() -> {\n+                return\n+                    (owner.get() != null);\n+\/\/                &&\n+\/\/                    (\n+\/\/                        showLines.get() ||\n+\/\/                        showLayoutBounds.get()\n+\/\/                    );\n+            },\n+            owner\n+\/\/            showLines,\n+\/\/            showLayoutBounds\n+        );\n+        isAnimating.addListener((p) -> update());\n+        showCaretAndRange.addListener((p) -> updateCaretAndRange());\n+    }\n+\n+    public void attach(Pane parent, Text t) {\n+        this.parent = parent;\n+        owner.set(t);\n+    }\n+\n+    public void attach(Pane parent, TextFlow t) {\n+        this.parent = parent;\n+        owner.set(t);\n+    }\n+\n+    public String caretOptionText() {\n+        String ctrl = FX.isMac() ? \"command\" : \"ctrl\";\n+        return String.format(\"caret and range (shift: strike-through, %s: underline)\", ctrl);\n+    }\n+\n+    Node owner() {\n+        return owner.get();\n+    }\n+\n+    void update() {\n+        if (isAnimating.get()) {\n+            if (animation == null) {\n+                animation = new Timeline(\n+                    new KeyFrame(Duration.millis(100), (ev) -> refresh())\n+                );\n+                animation.setCycleCount(Timeline.INDEFINITE);\n+                animation.setDelay(Duration.millis(20));\n+                animation.play();\n+            }\n+        } else {\n+            if (animation != null) {\n+                animation.stop();\n+                animation = null;\n+                refresh();\n+            }\n+        }\n+    }\n+\n+    void refresh() {\n+\/\/        updateLayoutBounds();\n+\/\/        updateTextLines();\n+    }\n+\n+    private void updateCaretAndRange() {\n+        if (showCaretAndRange.get()) {\n+            \/\/ caret\n+            if (caretPath == null) {\n+                caretPath = new Path();\n+                caretPath.setStrokeWidth(1);\n+                caretPath.setStroke(Color.RED);\n+                caretPath.setManaged(false);\n+                caretPath.setViewOrder(CARET_VIEW_ORDER);\n+                parent.getChildren().add(caretPath);\n+            }\n+\n+            \/\/ selection\n+            if (selectionPath == null) {\n+                selectionPath = new Path();\n+                selectionPath.setStrokeWidth(0);\n+                selectionPath.setFill(Color.rgb(0, 128, 255, 0.3));\n+                selectionPath.setManaged(false);\n+                selectionPath.setViewOrder(RANGE_VIEW_ORDER);\n+                parent.getChildren().add(selectionPath);\n+            }\n+\n+            \/\/ strike through\n+            if (strikeThroughPath == null) {\n+                strikeThroughPath = new Path();\n+                strikeThroughPath.setStrokeWidth(0);\n+                strikeThroughPath.setFill(Color.rgb(0, 128, 0, 0.3));\n+                strikeThroughPath.setManaged(false);\n+                strikeThroughPath.setViewOrder(RANGE_VIEW_ORDER);\n+                parent.getChildren().add(strikeThroughPath);\n+            }\n+\n+            \/\/ underline\n+            if (underlinePath == null) {\n+                underlinePath = new Path();\n+                underlinePath.setStrokeWidth(0);\n+                underlinePath.setFill(Color.rgb(0, 0, 0, 0.3));\n+                underlinePath.setManaged(false);\n+                underlinePath.setViewOrder(RANGE_VIEW_ORDER);\n+                parent.getChildren().add(underlinePath);\n+            }\n+\n+            \/\/ mouse\n+            if (mouseListener == null) {\n+                mouseListener = this::handleMouseEvent;\n+                owner().addEventHandler(MouseEvent.ANY, mouseListener);\n+            }\n+        } else {\n+            \/\/ mouse\n+            if (mouseListener != null) {\n+                owner().removeEventHandler(MouseEvent.ANY, mouseListener);\n+                mouseListener = null;\n+            }\n+\n+            \/\/ caret\n+            if (caretPath != null) {\n+                parent.getChildren().remove(caretPath);\n+                caretPath = null;\n+            }\n+\n+            \/\/ selection\n+            if (selectionPath != null) {\n+                parent.getChildren().remove(selectionPath);\n+                selectionPath = null;\n+            }\n+\n+            \/\/ strike through\n+            if (strikeThroughPath != null) {\n+                parent.getChildren().remove(strikeThroughPath);\n+                strikeThroughPath = null;\n+            }\n+\n+            \/\/ underline\n+            if (underlinePath == null) {\n+                parent.getChildren().remove(underlinePath);\n+                underlinePath = null;\n+            }\n+        }\n+    }\n+\n+\/\/    private void updateLayoutBounds() {\n+\/\/        if (showLayoutBounds.get()) {\n+\/\/            if (boundsPath == null) {\n+\/\/                boundsPath = new Path();\n+\/\/                boundsPath.setViewOrder(BOUNDS_VIEW_ORDER);\n+\/\/                boundsPath.setStrokeWidth(0);\n+\/\/                boundsPath.setFill(Color.rgb(255, 128, 0, 0.1));\n+\/\/                boundsPath.setManaged(false);\n+\/\/                parent.getChildren().add(boundsPath);\n+\/\/            }\n+\/\/\n+\/\/            LayoutInfo la = layoutInfo();\n+\/\/            List<Rectangle2D> rs = List.of(la.getBounds(includeLineSpace.get()));\n+\/\/            PathElement[] ps = toPathElementsArray(rs);\n+\/\/            boundsPath.getElements().setAll(ps);\n+\/\/        } else {\n+\/\/            if (boundsPath != null) {\n+\/\/                parent.getChildren().remove(boundsPath);\n+\/\/                boundsPath = null;\n+\/\/            }\n+\/\/        }\n+\/\/    }\n+\n+\/\/    private void updateTextLines() {\n+\/\/        if (showLines.get()) {\n+\/\/            if (lines == null) {\n+\/\/                lines = new Group();\n+\/\/                lines.setAutoSizeChildren(false);\n+\/\/                lines.setViewOrder(TEXT_LINES_VIEW_ORDER);\n+\/\/                lines.setManaged(false);\n+\/\/                parent.getChildren().add(lines);\n+\/\/            }\n+\/\/            lines.getChildren().setAll(createTextLinesShapes());\n+\/\/        } else {\n+\/\/            if (lines != null) {\n+\/\/                parent.getChildren().remove(lines);\n+\/\/                lines = null;\n+\/\/            }\n+\/\/        }\n+\/\/    }\n+\n+\/\/    private LayoutInfo layoutInfo() {\n+\/\/        Node n = owner();\n+\/\/        if (n instanceof Text t) {\n+\/\/            return t.getLayoutInfo();\n+\/\/        } else if (n instanceof TextFlow t) {\n+\/\/            return t.getLayoutInfo();\n+\/\/        }\n+\/\/        return null;\n+\/\/    }\n+\n+    private int getTextLength() {\n+        Node n = owner();\n+        if (n instanceof Text t) {\n+            return t.getText().length();\n+        } else if (n instanceof TextFlow t) {\n+            return FX.getTextLength(t);\n+        }\n+        return 0;\n+    }\n+\n+    private HitInfo hitInfo(MouseEvent ev) {\n+        Node n = owner();\n+        double x = ev.getScreenX();\n+        double y = ev.getScreenY();\n+        Point2D p = n.screenToLocal(x, y);\n+        if (n instanceof Text t) {\n+            return t.hitTest(p);\n+        } else if (n instanceof TextFlow t) {\n+            if (CORRECT_FOR_8341438_BUG) {\n+                Insets m = t.getInsets();\n+                p = p.subtract(m.getLeft(), m.getTop()); \/\/ TODO rtl?\n+            }\n+            return t.hitTest(p);\n+        }\n+        return null;\n+    }\n+\n+    private static PathElement[] toPathElementsArray(List<Rectangle2D> rs) {\n+        ArrayList<PathElement> a = new ArrayList<>();\n+        for (Rectangle2D r : rs) {\n+            a.add(new MoveTo(r.getMinX(), r.getMinY()));\n+            a.add(new LineTo(r.getMaxX(), r.getMinY()));\n+            a.add(new LineTo(r.getMaxX(), r.getMaxY()));\n+            a.add(new LineTo(r.getMinX(), r.getMaxY()));\n+            a.add(new LineTo(r.getMinX(), r.getMinY()));\n+        }\n+        return a.toArray(PathElement[]::new);\n+    }\n+\n+    private static Color color(int index) {\n+        switch (index % 3) {\n+        case 0:\n+            return Color.rgb(255, 0, 0, 0.3);\n+        case 1:\n+            return Color.rgb(0, 255, 0, 0.3);\n+        default:\n+            return Color.rgb(0, 0, 255, 0.3);\n+        }\n+    }\n+\n+\/\/    private List<Node> createTextLinesShapes() {\n+\/\/        LayoutInfo la = layoutInfo();\n+\/\/        List<TextLineInfo> lines = la.getTextLines(includeLineSpace.get());\n+\/\/        ArrayList<Node> a = new ArrayList<>();\n+\/\/        int i = 0;\n+\/\/        for (TextLineInfo line : lines) {\n+\/\/            Rectangle2D b = line.bounds();\n+\/\/            Color c = color(i++);\n+\/\/            Rectangle r = new Rectangle(b.getMinX(), b.getMinY(), b.getWidth(), b.getHeight());\n+\/\/            r.setFill(c);\n+\/\/            r.setStrokeWidth(0);\n+\/\/            r.setManaged(false);\n+\/\/            a.add(r);\n+\/\/        }\n+\/\/        return a;\n+\/\/    }\n+\n+    private PathElement[] fix_8341438(PathElement[] es) {\n+        Insets m = ((TextFlow)owner()).getInsets();\n+        double dx = m.getLeft(); \/\/ FIX rtl?\n+        double dy = m.getTop();\n+\n+        if (CORRECT_FOR_8341438_BUG) {\n+            PathElement[] rv = new PathElement[es.length];\n+            for (int i = 0; i < es.length; i++) {\n+                PathElement em = es[i];\n+                PathElement shifted;\n+                if (em instanceof MoveTo v) {\n+                    shifted = new MoveTo(v.getX() + dx, v.getY() + dy);\n+                } else if (em instanceof LineTo v) {\n+                    shifted = new LineTo(v.getX() + dx, v.getY() + dy);\n+                } else {\n+                    shifted = em;\n+                }\n+                rv[i] = shifted;\n+            }\n+            return rv;\n+        } else {\n+            return es;\n+        }\n+    }\n+\n+\/\/    private static PathElement[] createCaretShape(CaretInfo ci) {\n+\/\/        ArrayList<PathElement> a = new ArrayList<>();\n+\/\/        for (int i = 0; i < ci.getPartCount(); i++) {\n+\/\/            Rectangle2D r = ci.getPartAt(i);\n+\/\/            a.add(new MoveTo(r.getMinX(), r.getMinY()));\n+\/\/            a.add(new LineTo(r.getMaxX(), r.getMaxY()));\n+\/\/        }\n+\/\/        return a.toArray(PathElement[]::new);\n+\/\/    }\n+\n+    private PathElement[] createCaretShape(int charIndex, boolean leading) {\n+        boolean legacy = true; \/\/legacyAPI.get();\n+        Node n = owner();\n+        if (n instanceof Text t) {\n+            if (legacy) {\n+                return t.caretShape(charIndex, leading);\n+            }\n+\/\/            else {\n+\/\/                CaretInfo ci = layoutInfo().caretInfo(charIndex, leading);\n+\/\/                return createCaretShape(ci);\n+\/\/            }\n+        } else if (n instanceof TextFlow t) {\n+            if (legacy) {\n+                return fix_8341438(t.caretShape(charIndex, leading));\n+            }\n+\/\/            else {\n+\/\/                CaretInfo ci = layoutInfo().caretInfo(charIndex, leading);\n+\/\/                return createCaretShape(ci);\n+\/\/            }\n+        }\n+        return new PathElement[0];\n+    }\n+\n+    void handleMouseEvent(MouseEvent ev) {\n+        \/\/ caret\n+        HitInfo h = hitInfo(ev);\n+        int charIndex = h.getCharIndex();\n+        boolean leading = h.isLeading();\n+        caretPath.getElements().setAll(createCaretShape(charIndex, leading));\n+\n+        \/\/ range\n+        var t = ev.getEventType();\n+        if (t == MouseEvent.MOUSE_PRESSED) {\n+            startIndex = h.getInsertionIndex();\n+            \/\/ drag: selection, drag+shift: stroke-through, drag+shortcut:underline\n+            useSelectionShape = !ev.isShiftDown() && !ev.isShortcutDown();\n+            useStrikeThroughShape = ev.isShiftDown() && !ev.isShortcutDown();\n+            useUnderlineShape = !ev.isShiftDown() && ev.isShortcutDown();\n+            ev.consume();\n+        } else if (t == MouseEvent.MOUSE_DRAGGED) {\n+            int start = startIndex;\n+            int end = h.getInsertionIndex();\n+            if (end < start) {\n+                int tmp = end;\n+                end = start;\n+                start = tmp;\n+            }\n+\n+            if (useSelectionShape) {\n+                PathElement[] es = createSelectionShape(start, end);\n+                selectionPath.getElements().setAll(es);\n+            }\n+\n+            if (useStrikeThroughShape) {\n+                PathElement[] es = createStrikeThroughShape(start, end);\n+                strikeThroughPath.getElements().setAll(es);\n+            }\n+\n+            if (useUnderlineShape) {\n+                PathElement[] es = createUnderlineShape(start, end);\n+                underlinePath.getElements().setAll(es);\n+            }\n+\n+            ev.consume();\n+        } else if (t == MouseEvent.MOUSE_RELEASED) {\n+            selectionPath.getElements().clear();\n+            strikeThroughPath.getElements().clear();\n+            underlinePath.getElements().clear();\n+            ev.consume();\n+        }\n+    }\n+\n+    private PathElement[] createSelectionShape(int start, int end) {\n+        boolean legacy = true; \/\/legacyAPI.get();\n+        Node n = owner();\n+        if (n instanceof Text t) {\n+            if (legacy) {\n+                return t.rangeShape(start, end);\n+            }\n+\/\/            else {\n+\/\/                return createSelectionShape(t.getLayoutInfo(), start, end);\n+\/\/            }\n+        } else if (n instanceof TextFlow t) {\n+            if (legacy) {\n+                return fix_8341438(t.rangeShape(start, end));\n+            }\n+\/\/            else {\n+\/\/                return createSelectionShape(t.getLayoutInfo(), start, end);\n+\/\/            }\n+        }\n+        return new PathElement[0];\n+    }\n+\n+    private PathElement[] createStrikeThroughShape(int start, int end) {\n+        boolean legacy = true; \/\/legacyAPI.get();\n+        Node n = owner();\n+        if (n instanceof Text t) {\n+\/\/            if (legacy) {\n+\/\/                return t.strikeThroughShape(start, end);\n+\/\/            } else {\n+\/\/                return createStrikeThroughShape(t.getLayoutInfo(), start, end);\n+\/\/            }\n+        } else if (n instanceof TextFlow t) {\n+\/\/            if (legacy) {\n+\/\/                return fix_8341438(t.strikeThroughShape(start, end));\n+\/\/            }\n+\/\/            else {\n+\/\/                return createStrikeThroughShape(t.getLayoutInfo(), start, end);\n+\/\/            }\n+        }\n+        return new PathElement[0];\n+    }\n+\n+    private PathElement[] createUnderlineShape(int start, int end) {\n+        boolean legacy = true; \/\/legacyAPI.get();\n+        Node n = owner();\n+        if (n instanceof Text t) {\n+            if (legacy) {\n+                return t.underlineShape(start, end);\n+            }\n+\/\/            else {\n+\/\/                return createUnderlineShape(t.getLayoutInfo(), start, end);\n+\/\/            }\n+        } else if (n instanceof TextFlow t) {\n+            if (legacy) {\n+                return fix_8341438(t.underlineShape(start, end));\n+            }\n+\/\/            else {\n+\/\/                return createUnderlineShape(t.getLayoutInfo(), start, end);\n+\/\/            }\n+        }\n+        return new PathElement[0];\n+    }\n+\n+\/\/    private PathElement[] createSelectionShape(LayoutInfo la, int start, int end) {\n+\/\/        List<Rectangle2D> rs = la.selectionShape(start, end, includeLineSpace.get());\n+\/\/        return toPathElementsArray(rs);\n+\/\/    }\n+\/\/\n+\/\/    private PathElement[] createStrikeThroughShape(LayoutInfo la, int start, int end) {\n+\/\/        List<Rectangle2D> rs = la.strikeThroughShape(start, end);\n+\/\/        return toPathElementsArray(rs);\n+\/\/    }\n+\/\/\n+\/\/    private PathElement[] createUnderlineShape(LayoutInfo la, int start, int end) {\n+\/\/        List<Rectangle2D> rs = la.underlineShape(start, end);\n+\/\/        return toPathElementsArray(rs);\n+\/\/    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/LayoutInfoVisualizer.java","additions":554,"deletions":0,"binary":false,"changes":554,"status":"added"},{"patch":"@@ -0,0 +1,178 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import java.util.ArrayList;\n+import java.util.Objects;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.geometry.Insets;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.Menu;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.layout.Region;\n+\n+\/**\n+ * Context Menus\n+ *\/\n+public class Menus {\n+    \/**\n+     * Creates a submenu with the specified values.\n+     *\/\n+    public static <T> Menu subMenu(ContextMenu cm, String text, Function<T, String> fmt, Consumer<T> setter, Supplier<T> getter, T... values) {\n+        \/\/ we could pass the property instead and to highlight the chosen value with a checkmark for example\n+        Menu m = FX.menu(cm, text);\n+        for (T value: values) {\n+            T v = getter == null ? null : getter.get();\n+            String name;\n+            if(fmt == null) {\n+                name = String.valueOf(value);\n+            } else {\n+                name = fmt.apply(value);\n+            }\n+            if ((getter != null) && Objects.equals(v, value)) {\n+                name += \" ✓\";\n+            }\n+            item(m, name, () -> {\n+                setter.accept(value);\n+            });\n+        }\n+        return m;\n+    }\n+\n+    public static void marginSubMenu(ContextMenu cm, Consumer<Insets> setter, Supplier<Insets> getter) {\n+        Insets[] values = {\n+            null,\n+            new Insets(0),\n+            new Insets(10, 0, 0, 0),\n+            new Insets(0, 10, 0, 0),\n+            new Insets(0, 0, 10, 0),\n+            new Insets(0, 0, 0, 10),\n+            new Insets(10, 20, 30, 40)\n+        };\n+        subMenu(cm, \"Margin\", Formats::formatInsets, setter, getter, values);\n+    }\n+\n+    public static <E extends Enum> void enumSubMenu(ContextMenu cm, String text, Class<E> type, boolean includeNull, Consumer<E> setter, Supplier<E> getter) {\n+        E[] values = includeNull ? Utils.withNull(type) : type.getEnumConstants();\n+        subMenu(cm, text, null, setter, getter, values);\n+    }\n+\n+    public static void intSubMenu(ContextMenu cm, String text, Consumer<Integer> setter, Supplier<Integer> getter, int min, int max) {\n+        ArrayList<Integer> vs = new ArrayList<>();\n+        for (int i = min; i <= max; i++) {\n+            vs.add(i);\n+        }\n+        Integer[] values = vs.toArray(Integer[]::new);\n+        subMenu(cm, text, null, setter, getter, values);\n+    }\n+\n+    public static void booleanSubMenu(ContextMenu cm, String text, Consumer<Boolean> setter, Supplier<Boolean> getter) {\n+        boolean val = Boolean.TRUE.equals(getter.get());\n+        FX.checkItem(cm, text, val, setter);\n+    }\n+\n+    private static void subMenu(ContextMenu cm, String text, DoubleProperty p, double[] values) {\n+        Menu m = FX.menu(cm, text);\n+        double val = p.get();\n+        for (double v: values) {\n+            String name = format(v);\n+            if (v == val) {\n+                name += \" ✓\";\n+            }\n+            item(m, name, () -> {\n+                p.set(v);\n+            });\n+        }\n+    }\n+\n+    public static void sizeSubMenus(ContextMenu cm, Region r) {\n+        double[] min = {\n+            Region.USE_COMPUTED_SIZE,\n+            Region.USE_PREF_SIZE,\n+            0,\n+            10,\n+            25,\n+            50,\n+            100,\n+            250,\n+            500\n+        };\n+        subMenu(cm, \"Min Height\", r.minHeightProperty(), min);\n+        subMenu(cm, \"Min Width\", r.minWidthProperty(), min);\n+\n+        double[] pref = {\n+            Region.USE_COMPUTED_SIZE,\n+            0,\n+            10,\n+            25,\n+            50,\n+            100,\n+            250,\n+            500\n+        };\n+        subMenu(cm, \"Pref Height\", r.prefHeightProperty(), pref);\n+        subMenu(cm, \"Pref Width\", r.prefWidthProperty(), pref);\n+\n+        double[] max = {\n+            Region.USE_COMPUTED_SIZE,\n+            Region.USE_PREF_SIZE,\n+            0,\n+            10,\n+            25,\n+            50,\n+            100,\n+            250,\n+            500,\n+            1000,\n+            2500,\n+            5000,\n+            Double.POSITIVE_INFINITY\n+        };\n+        subMenu(cm, \"Max Height\", r.maxHeightProperty(), max);\n+        subMenu(cm, \"Max Width\", r.maxWidthProperty(), max);\n+    }\n+\n+    private static String format(double v) {\n+        if (v == Region.USE_COMPUTED_SIZE) {\n+            return \"USE_COMPUTED_SIZE\";\n+        } else if (v == Region.USE_PREF_SIZE) {\n+            return \"USE_PREF_SIZE\";\n+        } else if (v == Double.POSITIVE_INFINITY) {\n+            return \"INFINITY\";\n+        }\n+        return Formats.format2DP(v);\n+    }\n+\n+    private static MenuItem item(Menu m, String text, Runnable action) {\n+        MenuItem mi = new MenuItem(text);\n+        mi.setMnemonicParsing(false);\n+        mi.setOnAction((ev) -> action.run());\n+        m.getItems().add(mi);\n+        return mi;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/Menus.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"added"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+\/**\n+ * Native to ASCII Conversion Utility.\n+ *\/\n+public class Native2Ascii {\n+    public static String native2ascii(String text) {\n+        if (text == null) {\n+            return null;\n+        }\n+\n+        int sz = text.length();\n+        StringBuilder sb = new StringBuilder(sz + 256);\n+        for (int i = 0; i < sz; i++) {\n+            char c = text.charAt(i);\n+            switch (c) {\n+            case ' ':\n+            case '\\n':\n+                sb.append(c);\n+                break;\n+            default:\n+                if ((c > ' ') && (c < 0x7f)) {\n+                    sb.append(c);\n+                } else {\n+                    escape(sb, c);\n+                }\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static void escape(StringBuilder sb, char c) {\n+        sb.append(\"\\\\u\");\n+        sb.append(hex(c >> 12));\n+        sb.append(hex(c >> 8));\n+        sb.append(hex(c >> 4));\n+        sb.append(hex(c));\n+    }\n+\n+    private static char hex(int n) {\n+        return \"0123456789abcdef\".charAt(n & 0x0f);\n+    }\n+\n+    private static int toUnicode(String text, int ix) {\n+        if (text.length() < (ix + 5)) {\n+            return -1;\n+        }\n+\n+        char c = text.charAt(ix++);\n+        switch (c) {\n+        case 'u':\n+        case 'U':\n+            break;\n+        default:\n+            return -1;\n+        }\n+\n+        try {\n+            String s = text.substring(ix, ix + 4);\n+            int v = Integer.parseInt(s, 16);\n+            return v;\n+        } catch (NumberFormatException e) {\n+            return -1;\n+        }\n+    }\n+\n+    public static String ascii2native(String text) {\n+        if (text == null) {\n+            return null;\n+        }\n+\n+        int sz = text.length();\n+        StringBuilder sb = new StringBuilder(sz);\n+        for (int i = 0; i < sz; i++) {\n+            char c = text.charAt(i);\n+            switch (c) {\n+            case '\\\\':\n+                int u = toUnicode(text, i + 1);\n+                if (u < 0) {\n+                    sb.append(c);\n+                } else {\n+                    sb.append((char)u);\n+                    i += 5;\n+                }\n+                break;\n+            default:\n+                sb.append(c);\n+                break;\n+            }\n+        }\n+        return sb.toString();\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/Native2Ascii.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import javafx.event.EventHandler;\n+import javafx.scene.Node;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.input.MouseEvent;\n+\n+\/**\n+ * MouseListener which prints to stdout.\n+ *\/\n+public class StdoutMouseListener {\n+    private static final EventHandler<MouseEvent> listener = StdoutMouseListener::handle;\n+    private static final Object KEY = new Object();\n+\n+    private StdoutMouseListener() {\n+    }\n+\n+    public static void attach(ContextMenu m, Node n) {\n+        if (n != null) {\n+            String name = \"Mouse Listener (\" + Utils.simpleName(n) + \")\";\n+            FX.checkItem(m, name, StdoutMouseListener.isRegistered(n), (on) -> {\n+                update(n, on);\n+            });\n+        }\n+    }\n+\n+    static boolean isRegistered(Node n) {\n+        return n.getProperties().containsKey(KEY);\n+    }\n+\n+    static void update(Node n, boolean on) {\n+        if (on) {\n+            if (!isRegistered(n)) {\n+                n.addEventHandler(MouseEvent.ANY, listener);\n+                n.getProperties().put(KEY, Boolean.TRUE);\n+            }\n+        } else {\n+            n.removeEventHandler(MouseEvent.ANY, listener);\n+            n.getProperties().remove(KEY);\n+        }\n+    }\n+\n+    static void handle(MouseEvent ev) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(ev.getEventType());\n+        sb.append(\" (\");\n+        sb.append(Utils.fmt(ev.getX())).append(\", \").append(Utils.fmt(ev.getY()));\n+        sb.append(\") screen=(\");\n+        sb.append(Utils.fmt(ev.getScreenX())).append(\", \").append(Utils.fmt(ev.getScreenY()));\n+        sb.append(\")\");\n+        System.out.println(sb);\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/StdoutMouseListener.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-    public static final String RIGHT_TO_LEFT = \"العربية\" + \"העברעאיש (עברית) איז אַ סעמיטישע שפּראַך. מען שרייבט העברעאיש מיט די 22 אותיות פוHello, world!נעם אלף בית לשון קודש. די\";\n+    public static final String RIGHT_TO_LEFT = \"السَّلَامُ عَلَيْكُمْ\" + \"העברעאיש (עברית) איז אַ סעמיטישע שפּראַך. מען שרייבט העברעאיש מיט די 22 אותיות פוHello, world!נעם אלף בית לשון קודש. די\";\n@@ -91,1 +91,1 @@\n-    private static String loremIpsum() {\n+    public static String loremIpsum() {\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/TextTemplates.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,4 @@\n+import java.lang.reflect.Array;\n+import java.text.DecimalFormat;\n+import java.util.ArrayList;\n+import java.util.Random;\n@@ -28,2 +32,0 @@\n-import java.util.function.Supplier;\n-import javafx.application.Platform;\n@@ -37,0 +39,1 @@\n+import javafx.scene.paint.Color;\n@@ -45,0 +48,3 @@\n+    private static final DecimalFormat DOUBLE_FORMAT = new DecimalFormat(\"0.###\");\n+    private static final Random random = new Random();\n+\n@@ -97,0 +103,36 @@\n+\n+    public static String fmt(double v) {\n+        return DOUBLE_FORMAT.format(v);\n+    }\n+\n+    public static String simpleName(Object x) {\n+        if (x == null) {\n+            return \"<null>\";\n+        }\n+        Class<?> c = (x instanceof Class) ? (Class<?>)x : x.getClass();\n+        String s = c.getSimpleName();\n+        if (!isBlank(s)) {\n+            return s;\n+        }\n+        s = c.getName();\n+        int ix = s.lastIndexOf('.');\n+        if (ix < 0) {\n+            return s;\n+        }\n+        return s.substring(ix + 1);\n+    }\n+\n+    public static Color nextColor() {\n+        double hue = 360 * random.nextDouble();\n+        double saturation = 0.5 + 0.5 * random.nextDouble();\n+        double brightness = random.nextDouble();\n+        double opacity = random.nextDouble();\n+        return Color.hsb(hue, saturation, brightness, opacity);\n+    }\n+\n+    public static <T extends Enum> T[] withNull(Class<T> type) {\n+        T[] values = type.getEnumConstants();\n+        T[] a = (T[])Array.newInstance(type, values.length + 1);\n+        System.arraycopy(values, 0, a, 1, values.length);\n+        return a;\n+    }\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/Utils.java","additions":45,"deletions":3,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -0,0 +1,322 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.tools.fx.monkey.util;\n+\n+import javafx.beans.property.BooleanProperty;\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.ReadOnlyObjectProperty;\n+import javafx.beans.property.StringProperty;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Orientation;\n+import javafx.geometry.VerticalDirection;\n+import javafx.scene.Node;\n+import javafx.scene.control.ContentDisplay;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.OverrunStyle;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.paint.Paint;\n+import javafx.scene.text.Font;\n+import javafx.scene.text.TextAlignment;\n+import javafx.scene.transform.Rotate;\n+\n+\/**\n+ * Vertical Label with VERTICAL content orientation.\n+ *\/\n+public class VerticalLabel extends Pane {\n+    private final InternalLabel label = new InternalLabel();\n+    private final VerticalDirection direction;\n+\n+    public VerticalLabel(VerticalDirection direction, String text) {\n+        this.direction = direction;\n+        this.label.getTransforms().add(new Rotate(direction == VerticalDirection.DOWN ? 90 : -90, 0, 0));\n+\n+        \/*\n+         * Add label as managed control, even though most of the methods of Parent are overriden here,\n+         * like computeXXX and layoutChildren. Having the control managed will propagate any needed\n+         * layout changes up to this Pane, so it can be resized accordingly when for example the Label's\n+         * text changes.\n+         *\/\n+\n+        this.label.setText(text);\n+        this.getChildren().add(label);\n+        setWrapText(true);\n+    }\n+\n+    public VerticalLabel(VerticalDirection direction) {\n+        this(direction, \"\");\n+    }\n+\n+    @Override\n+    public Orientation getContentBias() {\n+        return label.isWrapText() ? Orientation.VERTICAL : null;\n+    }\n+\n+    @Override\n+    protected void layoutChildren() {\n+        label.resizeRelocate(\n+            direction == VerticalDirection.DOWN ? getWidth() : 0,\n+            direction == VerticalDirection.DOWN ? 0 : getHeight(),\n+            getHeight(),\n+            getWidth()\n+        );\n+    }\n+\n+    @Override\n+    protected double computePrefWidth(double height) {\n+        return label.computePrefHeight(height);\n+    }\n+\n+    @Override\n+    protected double computePrefHeight(double width) {\n+        return label.computePrefWidth(width);\n+    }\n+\n+    @Override\n+    protected double computeMaxWidth(double height) {\n+        return label.computeMaxHeight(height);\n+    }\n+\n+    @Override\n+    protected double computeMaxHeight(double width) {\n+        return label.computeMaxWidth(width);\n+    }\n+\n+    @Override\n+    protected double computeMinWidth(double height) {\n+        return label.computeMinHeight(height);\n+    }\n+\n+    @Override\n+    protected double computeMinHeight(double width) {\n+        return label.computeMinWidth(width);\n+    }\n+\n+    \/\/ Delegate methods:\n+\n+    public ObjectProperty<Node> labelForProperty() {\n+        return label.labelForProperty();\n+    }\n+\n+    public final StringProperty textProperty() {\n+        return label.textProperty();\n+    }\n+\n+    public final String getText() {\n+        return label.getText();\n+    }\n+\n+    public void setText(String text) {\n+        label.setText(text);\n+    }\n+\n+    public final void setLabelFor(Node value) {\n+        label.setLabelFor(value);\n+    }\n+\n+    public final Node getLabelFor() {\n+        return label.getLabelFor();\n+    }\n+\n+    public final ObjectProperty<TextAlignment> textAlignmentProperty() {\n+        return label.textAlignmentProperty();\n+    }\n+\n+    public final void setTextAlignment(TextAlignment value) {\n+        label.setTextAlignment(value);\n+    }\n+\n+    public final TextAlignment getTextAlignment() {\n+        return label.getTextAlignment();\n+    }\n+\n+    public final ObjectProperty<OverrunStyle> textOverrunProperty() {\n+        return label.textOverrunProperty();\n+    }\n+\n+    public final void setTextOverrun(OverrunStyle value) {\n+        label.setTextOverrun(value);\n+    }\n+\n+    public final OverrunStyle getTextOverrun() {\n+        return label.getTextOverrun();\n+    }\n+\n+    public final StringProperty ellipsisStringProperty() {\n+        return label.ellipsisStringProperty();\n+    }\n+\n+    public final void setEllipsisString(String value) {\n+        label.setEllipsisString(value);\n+    }\n+\n+    public final String getEllipsisString() {\n+        return label.getEllipsisString();\n+    }\n+\n+    public final BooleanProperty wrapTextProperty() {\n+        return label.wrapTextProperty();\n+    }\n+\n+    public final boolean isWrapText() {\n+        return label.isWrapText();\n+    }\n+\n+    public void setWrapText(boolean wrapText) {\n+        label.setWrapText(wrapText);\n+    }\n+\n+    public final ObjectProperty<Font> fontProperty() {\n+        return label.fontProperty();\n+    }\n+\n+    public final void setFont(Font value) {\n+        label.setFont(value);\n+    }\n+\n+    public final Font getFont() {\n+        return label.getFont();\n+    }\n+\n+    public final ObjectProperty<Node> graphicProperty() {\n+        return label.graphicProperty();\n+    }\n+\n+    public final void setGraphic(Node value) {\n+        label.setGraphic(value);\n+    }\n+\n+    public final Node getGraphic() {\n+        return label.getGraphic();\n+    }\n+\n+    public final ObjectProperty<ContextMenu> contextMenuProperty() {\n+        return label.contextMenuProperty();\n+    }\n+\n+    public final void setContextMenu(ContextMenu value) {\n+        label.setContextMenu(value);\n+    }\n+\n+    public final BooleanProperty underlineProperty() {\n+        return label.underlineProperty();\n+    }\n+\n+    public final void setUnderline(boolean value) {\n+        label.setUnderline(value);\n+    }\n+\n+    public final DoubleProperty lineSpacingProperty() {\n+        return label.lineSpacingProperty();\n+    }\n+\n+    public final void setLineSpacing(double value) {\n+        label.setLineSpacing(value);\n+    }\n+\n+    public final double getLineSpacing() {\n+        return label.getLineSpacing();\n+    }\n+\n+    public final ObjectProperty<ContentDisplay> contentDisplayProperty() {\n+        return label.contentDisplayProperty();\n+    }\n+\n+    public final void setContentDisplay(ContentDisplay value) {\n+        label.setContentDisplay(value);\n+    }\n+\n+    public final ReadOnlyObjectProperty<Insets> labelPaddingProperty() {\n+        return label.labelPaddingProperty();\n+    }\n+\n+    public final Insets getLabelPadding() {\n+        return label.getLabelPadding();\n+    }\n+\n+    public final DoubleProperty graphicTextGapProperty() {\n+        return label.graphicTextGapProperty();\n+    }\n+\n+    public final void setGraphicTextGap(double value) {\n+        label.setGraphicTextGap(value);\n+    }\n+\n+    public final double getGraphicTextGap() {\n+        return label.getGraphicTextGap();\n+    }\n+\n+    public final void setTextFill(Paint value) {\n+        label.setTextFill(value);\n+    }\n+\n+    public final Paint getTextFill() {\n+        return label.getTextFill();\n+    }\n+\n+    public final ObjectProperty<Paint> textFillProperty() {\n+        return label.textFillProperty();\n+    }\n+\n+    public final BooleanProperty mnemonicParsingProperty() {\n+        return label.mnemonicParsingProperty();\n+    }\n+\n+    \/**\n+     * Inner class to make compute(...) methods accessible.\n+     *\/\n+    private static class InternalLabel extends Label {\n+        @Override\n+        public double computePrefWidth(double height) {\n+            return super.computePrefWidth(height);\n+        }\n+\n+        @Override\n+        public double computePrefHeight(double width) {\n+            return super.computePrefHeight(width);\n+        }\n+\n+        @Override\n+        public double computeMaxWidth(double height) {\n+            return super.computeMaxWidth(height);\n+        }\n+\n+        @Override\n+        public double computeMaxHeight(double width) {\n+            return super.computeMaxHeight(width);\n+        }\n+\n+        @Override\n+        public double computeMinWidth(double height) {\n+            return super.computeMinWidth(height);\n+        }\n+\n+        @Override\n+        public double computeMinHeight(double width) {\n+            return super.computeMinHeight(width);\n+        }\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/VerticalLabel.java","additions":322,"deletions":0,"binary":false,"changes":322,"status":"added"},{"patch":"@@ -33,1 +33,1 @@\n-        \"Arabic\", \"العربية\",\n+        \"Arabic\", \"السَّلَامُ عَلَيْكُمْ\",\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/util\/WritingSystemsDemo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+    requires javafx.media;\n","filename":"tests\/manual\/monkey\/src\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}