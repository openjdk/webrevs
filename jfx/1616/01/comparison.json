{"files":[{"patch":"@@ -2887,0 +2887,13 @@\n+\/\/ Add a project declaration for each incubator module here, leaving the\n+\/\/ incubator placeholder lines as an example.\n+\/\/ BEGIN: incubator placeholder\n+\/\/project(\":incubator.mymod\") {\n+\/\/    project.ext.buildModule = true\n+\/\/    project.ext.includeSources = true\n+\/\/    project.ext.moduleRuntime = true\n+\/\/    project.ext.moduleName = \"jfx.incubator.mymod\"\n+\/\/    project.ext.incubating = true\n+\/\/    ...\n+\/\/}\n+\/\/ END: incubator placeholder\n+\n@@ -4042,1 +4055,17 @@\n-    def dependentProjects = [ 'base', 'graphics', 'controls', 'media', 'jsobject', 'web', 'swing', 'fxml' ]\n+    def dependentProjects = [\n+        'base',\n+        'graphics',\n+        'controls',\n+\n+        \/\/ Add an entry for each incubator module here, leaving the incubator\n+        \/\/ placeholder lines as an example.\n+        \/\/ BEGIN: incubator placeholder\n+        \/\/'incubator.mymod',\n+        \/\/ END: incubator placeholder\n+\n+        'media',\n+        'jsobject',\n+        'web',\n+        'swing',\n+        'fxml'\n+    ]\n@@ -4484,2 +4513,17 @@\n-            project(\":base\"), project(\":graphics\"), project(\":controls\"), project(\":media\"),\n-            project(\":swing\"), \/*project(\":swt\"),*\/ project(\":fxml\"), project(\":jsobject\"), project(\":web\")]\n+        project(\":base\"),\n+        project(\":graphics\"),\n+        project(\":controls\"),\n+\n+        \/\/ Add an entry for each incubator module here, leaving the incubator\n+        \/\/ placeholder lines as an example.\n+        \/\/ BEGIN: incubator placeholder\n+        \/\/project(\":incubator.mymod\"),\n+        \/\/ END: incubator placeholder\n+\n+        project(\":media\"),\n+        project(\":swing\"),\n+        \/*project(\":swt\"),*\/\n+        project(\":fxml\"),\n+        project(\":jsobject\"),\n+        project(\":web\")\n+    ]\n@@ -5865,0 +5909,2 @@\n+            def incubating = project.hasProperty(\"incubating\") && project.ext.incubating\n+\n@@ -5906,0 +5952,4 @@\n+                        if (incubating) {\n+                            args(\"--do-not-resolve-by-default\")\n+                            args(\"--warn-if-resolved=incubating\")\n+                        }\n","filename":"build.gradle","additions":53,"deletions":3,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+\/**\n+ * Module utilities.\n+ *\/\n+public class ModuleUtil {\n+\n+    private static final Set<Module> warnedModules = new HashSet<>();\n+    private static final Set<Package> warnedPackages = new HashSet<>();\n+\n+    private static final Module MODULE_JAVA_BASE = Module.class.getModule();\n+\n+    \/**\n+     * Prints a warning that an incubator module was loaded. This warning is\n+     * printed to {@code System.err} one time per module.\n+     * An incubator module should call this method from the static initializer\n+     * of each primary class in the module. A primary class is a publicly exported\n+     * class that provides functionality that can be used by an application.\n+     * An incubator module should choose the set of primary classes such that\n+     * any application using an incubating API would access at least one of the\n+     * primary classes.\n+     *\/\n+    public static void incubatorWarning() {\n+        var stackWalker = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE);\n+        var callerClass = stackWalker.walk(s ->\n+            s.dropWhile(f -> {\n+                var clazz = f.getDeclaringClass();\n+                return ModuleUtil.class.equals(clazz) || MODULE_JAVA_BASE.equals(clazz.getModule());\n+            })\n+            .map(StackWalker.StackFrame::getDeclaringClass)\n+            .findFirst()\n+            .orElseThrow(IllegalStateException::new));\n+        \/\/System.err.println(\"callerClass = \" + callerClass);\n+        var callerModule = callerClass.getModule();\n+\n+        \/\/ If we are using incubating API from the unnamed module, issue\n+        \/\/ a warning one time for each package. This is not a supported\n+        \/\/ mode, but can happen if the modular jar is put on the classpath.\n+        if (!callerModule.isNamed()) {\n+            var callerPackage = callerClass.getPackage();\n+            if (!warnedPackages.contains(callerPackage)) {\n+                System.err.println(\"WARNING: Using incubating API from an unnamed module: \" + callerPackage);\n+                warnedPackages.add(callerPackage);\n+            }\n+            return;\n+        }\n+\n+        \/\/ Issue warning one time for this module\n+        if (!warnedModules.contains(callerModule)) {\n+            \/\/ FIXME: Check whether this module is jlinked into the runtime\n+            \/\/ and thus has already printed a warning. Skip the warning in that\n+            \/\/ case to avoid duplicate warnings.\n+            System.err.println(\"WARNING: Using incubator modules: \" + callerModule.getName());\n+            warnedModules.add(callerModule);\n+        }\n+    }\n+\n+    \/\/ Prevent instantiation\n+    private ModuleUtil() {\n+    }\n+}\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/ModuleUtil.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -50,0 +50,7 @@\n+\n+        \/\/ Add an entry for each incubator module here, leaving the incubator\n+        \/\/ placeholder lines as an example.\n+        \/\/ BEGIN: incubator placeholder\n+        \/\/jfx.incubator.mymod,\n+        \/\/ END: incubator placeholder\n+\n","filename":"modules\/javafx.base\/src\/main\/java\/module-info.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,1 +26,17 @@\n-include \"base\", \"graphics\", \"controls\", \"swing\", \"swt\", \"fxml\", \"jsobject\", \"web\", \"media\", \"systemTests\"\n+include \"base\",\n+        \"graphics\",\n+        \"controls\",\n+\n+        \/\/ Add an entry for each incubator module here, leaving the incubator\n+        \/\/ placeholder lines as an example.\n+        \/\/ BEGIN: incubator placeholder\n+        \/\/\"incubator.mymod\",\n+        \/\/ END: incubator placeholder\n+\n+        \"swing\",\n+        \"swt\",\n+        \"fxml\",\n+        \"jsobject\",\n+        \"web\",\n+        \"media\",\n+        \"systemTests\"\n@@ -31,0 +47,7 @@\n+\n+\/\/ Add an entry for each incubator module here, leaving the incubator\n+\/\/ placeholder lines as an example.\n+\/\/ BEGIN: incubator placeholder\n+\/\/project(\":incubator.mymod\").projectDir = file(\"modules\/jfx.incubator.mymod\")\n+\/\/ END: incubator placeholder\n+\n","filename":"settings.gradle","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"}]}