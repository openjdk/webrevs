{"files":[{"patch":"@@ -8534,0 +8534,39 @@\n+    \/**\n+     * Requests to move the focus from this {@code Node} in the specified direction.\n+     * The {@code Node} serves as a reference point and does not have to be focused or focusable.\n+     * A successful traversal results in a new {@code Node} being focused.\n+     * <p>\n+     * This method is expected to be called in response to a {@code KeyEvent}; therefore the {@code Node}\n+     * receiving focus will have the {@link #focusVisibleProperty() focusVisible} property set.\n+     *\n+     * @param direction the direction of focus traversal\n+     * @return {@code true} if traversal was successful\n+     * @since 24\n+     *\/\n+    public final boolean requestFocusTraversal(TraversalDirection direction) {\n+        Direction d;\n+        switch (direction) {\n+        case DOWN:\n+            d = Direction.DOWN;\n+            break;\n+        case LEFT:\n+            d = Direction.LEFT;\n+            break;\n+        case NEXT:\n+            d = Direction.NEXT;\n+            break;\n+        case PREVIOUS:\n+            d = Direction.PREVIOUS;\n+            break;\n+        case RIGHT:\n+            d = Direction.RIGHT;\n+            break;\n+        case UP:\n+            d = Direction.UP;\n+            break;\n+        default:\n+            return false;\n+        }\n+        return traverse(d, TraversalMethod.KEY);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Node.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javafx.scene;\n+\n+\/**\n+ * Specifies the direction of focus traversal.\n+ *\n+ * @since 24\n+ * @see Node#requestFocusTraversal(TraversalDirection)\n+ *\/\n+public enum TraversalDirection {\n+    \/** Indicates a focus change to the node below the currently focused node. *\/\n+    DOWN,\n+    \/** Indicates a focus change to the node to the left of the currently focused node. *\/\n+    LEFT,\n+    \/** Indicates a focus change to the next focusable node. *\/\n+    NEXT,\n+    \/** Indicates a focus change to the previous focusable node. *\/\n+    PREVIOUS,\n+    \/** Indicates a focus change to the node to the right of the currently focused node. *\/\n+    RIGHT,\n+    \/** Indicates a focus change to the node above the currently focused node. *\/\n+    UP;\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/TraversalDirection.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,180 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.scene;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import java.util.stream.Stream;\n+import javafx.scene.Group;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.scene.TraversalDirection;\n+import javafx.scene.shape.Rectangle;\n+import javafx.stage.Stage;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+\/**\n+ * Tests Node focus traversal public API.\n+ *\/\n+public final class NodeTraversalTest {\n+    private Stage stage;\n+    private Group root;\n+    private Scene scene;\n+    \/**\n+     * 3x3 grid of nodes:\n+     * <pre>\n+     *   1  2  3\n+     *   4  5  6\n+     *   7  8  9\n+     * <\/pre>\n+     *\/\n+    private Node[] nodes;\n+\n+    \/\/ Parameters: [from, direction, to]\n+    public static Stream<Arguments> data() {\n+        return Stream.of(\n+            Arguments.of(1, TraversalDirection.NEXT, 2),\n+            Arguments.of(1, TraversalDirection.PREVIOUS, 9),\n+            Arguments.of(1, TraversalDirection.UP, 1),\n+            Arguments.of(1, TraversalDirection.DOWN, 4),\n+            Arguments.of(1, TraversalDirection.LEFT, 1),\n+            Arguments.of(1, TraversalDirection.RIGHT, 2),\n+\n+            Arguments.of(2, TraversalDirection.NEXT, 3),\n+            Arguments.of(2, TraversalDirection.PREVIOUS, 1),\n+            Arguments.of(2, TraversalDirection.UP, 2),\n+            Arguments.of(2, TraversalDirection.DOWN, 5),\n+            Arguments.of(2, TraversalDirection.LEFT, 1),\n+            Arguments.of(2, TraversalDirection.RIGHT, 3),\n+\n+            Arguments.of(3, TraversalDirection.NEXT, 4),\n+            Arguments.of(3, TraversalDirection.PREVIOUS, 2),\n+            Arguments.of(3, TraversalDirection.UP, 3),\n+            Arguments.of(3, TraversalDirection.DOWN, 6),\n+            Arguments.of(3, TraversalDirection.LEFT, 2),\n+            Arguments.of(3, TraversalDirection.RIGHT, 3),\n+\n+            Arguments.of(4, TraversalDirection.NEXT, 5),\n+            Arguments.of(4, TraversalDirection.PREVIOUS, 3),\n+            Arguments.of(4, TraversalDirection.UP, 1),\n+            Arguments.of(4, TraversalDirection.DOWN, 7),\n+            Arguments.of(4, TraversalDirection.LEFT, 4),\n+            Arguments.of(4, TraversalDirection.RIGHT, 5),\n+\n+            Arguments.of(5, TraversalDirection.NEXT, 6),\n+            Arguments.of(5, TraversalDirection.PREVIOUS, 4),\n+            Arguments.of(5, TraversalDirection.UP, 2),\n+            Arguments.of(5, TraversalDirection.DOWN, 8),\n+            Arguments.of(5, TraversalDirection.LEFT, 4),\n+            Arguments.of(5, TraversalDirection.RIGHT, 6),\n+\n+            Arguments.of(6, TraversalDirection.NEXT, 7),\n+            Arguments.of(6, TraversalDirection.PREVIOUS, 5),\n+            Arguments.of(6, TraversalDirection.UP, 3),\n+            Arguments.of(6, TraversalDirection.DOWN, 9),\n+            Arguments.of(6, TraversalDirection.LEFT, 5),\n+            Arguments.of(6, TraversalDirection.RIGHT, 6),\n+\n+            Arguments.of(7, TraversalDirection.NEXT, 8),\n+            Arguments.of(7, TraversalDirection.PREVIOUS, 6),\n+            Arguments.of(7, TraversalDirection.UP, 4),\n+            Arguments.of(7, TraversalDirection.DOWN, 7),\n+            Arguments.of(7, TraversalDirection.LEFT, 7),\n+            Arguments.of(7, TraversalDirection.RIGHT, 8),\n+\n+            Arguments.of(8, TraversalDirection.NEXT, 9),\n+            Arguments.of(8, TraversalDirection.PREVIOUS, 7),\n+            Arguments.of(8, TraversalDirection.UP, 5),\n+            Arguments.of(8, TraversalDirection.DOWN, 8),\n+            Arguments.of(8, TraversalDirection.LEFT, 7),\n+            Arguments.of(8, TraversalDirection.RIGHT, 9),\n+\n+            Arguments.of(9, TraversalDirection.NEXT, 1),\n+            Arguments.of(9, TraversalDirection.PREVIOUS, 8),\n+            Arguments.of(9, TraversalDirection.UP, 6),\n+            Arguments.of(9, TraversalDirection.DOWN, 9),\n+            Arguments.of(9, TraversalDirection.LEFT, 8),\n+            Arguments.of(9, TraversalDirection.RIGHT, 9));\n+    }\n+\n+    @BeforeEach\n+    public void beforeEach() {\n+        stage = new Stage();\n+        root = new Group();\n+        scene = new Scene(root, 500, 500);\n+        stage.setScene(scene);\n+\n+        nodes = createNodes();\n+\n+        stage.show();\n+        stage.requestFocus();\n+    }\n+\n+    @AfterEach\n+    public void afterEach() {\n+        stage.hide();\n+        stage = null;\n+        scene = null;\n+        nodes = null;\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"data\")\n+    public void requestFocusTraversal(int from, TraversalDirection dir, int to) {\n+        nodes[from - 1].requestFocus();\n+        nodes[from - 1].requestFocusTraversal(dir);\n+        String msg = getFocused();\n+        assertTrue(nodes[to - 1].isFocused(), msg);\n+    }\n+\n+    private String getFocused() {\n+        for (Node n: nodes) {\n+            if (n.isFocused()) {\n+                return \"(Focused:\" + n.getId() + \")\";\n+            }\n+        }\n+        return \"none\";\n+    }\n+\n+    private Node[] createNodes() {\n+        Node[] ns = new Node[9];\n+        int ix = 0;\n+        for (int row = 0; row < 3; row++) {\n+            for (int col = 0; col < 3; col++) {\n+                Node n = new Rectangle(10 + col * 50, 10 + row * 50, 40, 40);\n+                n.setFocusTraversable(true);\n+                n.setId(String.valueOf(ix + 1));\n+                ns[ix] = n;\n+                root.getChildren().add(n);\n+                ix++;\n+            }\n+        }\n+        return ns;\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/scene\/NodeTraversalTest.java","additions":180,"deletions":0,"binary":false,"changes":180,"status":"added"}]}