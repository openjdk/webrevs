{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import javafx.animation.AnimationTimer;\n@@ -31,0 +32,1 @@\n+import com.sun.javafx.util.Logging;\n@@ -64,0 +66,5 @@\n+    \/\/ This property is used to control the number of exceptions that can be thrown by a timer callback\n+    \/\/ before we stop logging them to prevent spamming the log.\n+    private static final String FAILING_TIMER_THRESHOLD_PROP = \"com.sun.scenario.animation.failingTimerThreshold\";\n+    public static final int FAILING_TIMER_THRESHOLD = Settings.getInt(FAILING_TIMER_THRESHOLD_PROP, 100);\n+\n@@ -82,1 +89,2 @@\n-    private PulseReceiver receivers[] = new PulseReceiver[2];\n+    @SuppressWarnings(\"unchecked\")\n+    private ReceiverRecord<PulseReceiver>[] receivers = new ReceiverRecord[2];\n@@ -87,2 +95,3 @@\n-    private TimerReceiver animationTimers[] = new TimerReceiver[2]; \/\/ frameJobList\n-                                                                     \/\/ snapshot\n+    @SuppressWarnings(\"unchecked\")\n+    private ReceiverRecord<TimerReceiver>[] animationTimers = new ReceiverRecord[2]; \/\/ frameJobList\n+                                                                                     \/\/ snapshot\n@@ -149,1 +158,1 @@\n-        receivers[receiversLength++] = target;\n+        receivers[receiversLength++] = ReceiverRecord.ofPulseReceiver(target);\n@@ -161,1 +170,1 @@\n-            if (target == receivers[i]) {\n+            if (target == receivers[i].receiver()) {\n@@ -183,1 +192,1 @@\n-        animationTimers[animationTimersLength++] = timer;\n+        animationTimers[animationTimersLength++] = ReceiverRecord.ofAnimationTimer(timer);\n@@ -195,1 +204,1 @@\n-            if (timer == animationTimers[i]) {\n+            if (timer == animationTimers[i].receiver()) {\n@@ -311,1 +320,2 @@\n-        final PulseReceiver receiversSnapshot[] = receivers;\n+\n+        final ReceiverRecord<PulseReceiver>[] receiversSnapshot = receivers;\n@@ -313,4 +323,7 @@\n-        try {\n-            receiversLocked = true;\n-            for (int i = 0; i < rLength; i++) {\n-                receiversSnapshot[i].timePulse(TickCalculation.fromNano(now));\n+        receiversLocked = true;\n+\n+        for (int i = 0; i < rLength; i++) {\n+            try {\n+                receiversSnapshot[i].receiver().timePulse(TickCalculation.fromNano(now));\n+            } catch (Throwable e) {\n+                receiversSnapshot[i].handleException(e);\n@@ -318,2 +331,0 @@\n-        } finally {\n-            receiversLocked = false;\n@@ -321,0 +332,2 @@\n+\n+        receiversLocked = false;\n@@ -323,1 +336,1 @@\n-        final TimerReceiver animationTimersSnapshot[] = animationTimers;\n+        final ReceiverRecord<TimerReceiver>[] animationTimersSnapshot = animationTimers;\n@@ -325,5 +338,8 @@\n-        try {\n-            animationTimersLocked = true;\n-            \/\/ After every frame, call any frame jobs\n-            for (int i = 0; i < aTLength; i++) {\n-                animationTimersSnapshot[i].handle(now);\n+        animationTimersLocked = true;\n+\n+        \/\/ After every frame, call any frame jobs\n+        for (int i = 0; i < aTLength; i++) {\n+            try {\n+                animationTimersSnapshot[i].receiver().handle(now);\n+            } catch (Throwable e) {\n+                animationTimersSnapshot[i].handleException(e);\n@@ -331,2 +347,0 @@\n-        } finally {\n-            animationTimersLocked = false;\n@@ -334,0 +348,2 @@\n+\n+        animationTimersLocked = false;\n@@ -336,0 +352,44 @@\n+    private static abstract class ReceiverRecord<T> {\n+\n+        static ReceiverRecord<TimerReceiver> ofAnimationTimer(TimerReceiver receiver) {\n+            return new ReceiverRecord<>() {\n+                @Override TimerReceiver receiver() { return receiver; }\n+                @Override Class<?> type() { return AnimationTimer.class; }\n+            };\n+        }\n+\n+        static ReceiverRecord<PulseReceiver> ofPulseReceiver(PulseReceiver receiver) {\n+            return new ReceiverRecord<>() {\n+                @Override PulseReceiver receiver() { return receiver; }\n+                @Override Class<?> type() { return PulseReceiver.class; }\n+            };\n+        }\n+\n+        abstract T receiver();\n+        abstract Class<?> type();\n+\n+        int exceptionsThrown;\n+\n+        void handleException(Throwable e) {\n+            if (exceptionsThrown < FAILING_TIMER_THRESHOLD) {\n+                exceptionsThrown++;\n+\n+                try {\n+                    Thread thread = Thread.currentThread();\n+                    thread.getUncaughtExceptionHandler().uncaughtException(thread, e);\n+                } catch (Throwable ignored) {\n+                    \/\/ The uncaught exception handler shouldn't throw exceptions, but if it does,\n+                    \/\/ we will swallow it to prevent it from bubbling up.\n+                }\n+            } else if (exceptionsThrown == FAILING_TIMER_THRESHOLD) {\n+                exceptionsThrown++;\n+\n+                if (Logging.getJavaFXLogger().isLoggable(System.Logger.Level.WARNING)) {\n+                    Logging.getJavaFXLogger().warning(\n+                        \"Too many exceptions thrown by \" + type().getSimpleName() + \", ignoring further exceptions.\" +\n+                        \" The cut-off number can be set with the system property \" + FAILING_TIMER_THRESHOLD_PROP +\n+                        \" (current = \" + FAILING_TIMER_THRESHOLD + \").\");\n+                }\n+            }\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/scenario\/animation\/AbstractPrimaryTimer.java","additions":83,"deletions":23,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -93,0 +95,142 @@\n+    @Test\n+    public void testExceptionInAnimationTimerIsHandledInPrimaryTimer() {\n+        Thread currentThread = Thread.currentThread();\n+        String currentMethodName = currentThread.getStackTrace()[0].getMethodName();\n+        Throwable[] uncaughtException = new Exception[1];\n+        Thread.UncaughtExceptionHandler exceptionHandler = currentThread.getUncaughtExceptionHandler();\n+        currentThread.setUncaughtExceptionHandler((_, e) -> uncaughtException[0] = e);\n+\n+        try {\n+            var timer1 = new AnimationTimer() {\n+                @Override\n+                public void handle(long now) {\n+                    throw new RuntimeException(currentMethodName);\n+                }\n+            };\n+\n+            var flag = new Flag();\n+            var timer2 = new AnimationTimer() {\n+                @Override\n+                public void handle(long now) {\n+                    flag.flag();\n+                }\n+            };\n+\n+            timer.addAnimationTimer(timer1::handle);\n+            timer.addAnimationTimer(timer2::handle);\n+            assertFalse(flag.isFlagged());\n+\n+            timer.simulatePulse();\n+            assertTrue(flag.isFlagged());\n+            assertEquals(currentMethodName, uncaughtException[0].getMessage());\n+        } finally {\n+            currentThread.setUncaughtExceptionHandler(exceptionHandler);\n+        }\n+    }\n+\n+    @Test\n+    public void testExceptionInPulseReceiverIsHandledInPrimaryTimer() {\n+        Thread currentThread = Thread.currentThread();\n+        String currentMethodName = currentThread.getStackTrace()[0].getMethodName();\n+        Throwable[] uncaughtException = new Exception[1];\n+        Thread.UncaughtExceptionHandler exceptionHandler = currentThread.getUncaughtExceptionHandler();\n+        currentThread.setUncaughtExceptionHandler((_, e) -> uncaughtException[0] = e);\n+\n+        try {\n+            var receiver1 = new PulseReceiver() {\n+                @Override\n+                public void timePulse(long now) {\n+                    throw new RuntimeException(currentMethodName);\n+                }\n+            };\n+\n+            var flag = new Flag();\n+            var receiver2 = new PulseReceiver() {\n+                @Override\n+                public void timePulse(long now) {\n+                    flag.flag();\n+                }\n+            };\n+\n+            timer.addPulseReceiver(receiver1);\n+            timer.addPulseReceiver(receiver2);\n+            assertFalse(flag.isFlagged());\n+\n+            timer.simulatePulse();\n+            assertTrue(flag.isFlagged());\n+            assertEquals(currentMethodName, uncaughtException[0].getMessage());\n+        } finally {\n+            currentThread.setUncaughtExceptionHandler(exceptionHandler);\n+        }\n+    }\n+\n+    @Test\n+    public void testExceptionsInNoisyFailingAnimationTimerAreNotReported() {\n+        Thread currentThread = Thread.currentThread();\n+        String currentMethodName = currentThread.getStackTrace()[0].getMethodName();\n+        List<Throwable> uncaughtExceptions = new ArrayList<>();\n+        Thread.UncaughtExceptionHandler exceptionHandler = currentThread.getUncaughtExceptionHandler();\n+        currentThread.setUncaughtExceptionHandler((_, e) -> uncaughtExceptions.add(e));\n+\n+        try {\n+            var animTimer = new AnimationTimer() {\n+                @Override\n+                public void handle(long now) {\n+                    throw new RuntimeException(currentMethodName);\n+                }\n+            };\n+\n+            timer.addAnimationTimer(animTimer::handle);\n+\n+            for (int i = 0; i < AbstractPrimaryTimer.FAILING_TIMER_THRESHOLD; ++i) {\n+                timer.simulatePulse();\n+            }\n+\n+            assertEquals(AbstractPrimaryTimer.FAILING_TIMER_THRESHOLD, uncaughtExceptions.size());\n+            assertTrue(uncaughtExceptions.stream().allMatch(e -> e.getMessage().equals(currentMethodName)));\n+\n+            \/\/ The following exceptions are not reported\n+            for (int i = 0; i < 3; ++i) {\n+                timer.simulatePulse();\n+                assertEquals(AbstractPrimaryTimer.FAILING_TIMER_THRESHOLD, uncaughtExceptions.size());\n+            }\n+        } finally {\n+            currentThread.setUncaughtExceptionHandler(exceptionHandler);\n+        }\n+    }\n+\n+    @Test\n+    public void testExceptionsInNoisyFailingPulseReceiverAreNotReported() {\n+        Thread currentThread = Thread.currentThread();\n+        String currentMethodName = currentThread.getStackTrace()[0].getMethodName();\n+        List<Throwable> uncaughtExceptions = new ArrayList<>();\n+        Thread.UncaughtExceptionHandler exceptionHandler = currentThread.getUncaughtExceptionHandler();\n+        currentThread.setUncaughtExceptionHandler((_, e) -> uncaughtExceptions.add(e));\n+\n+        try {\n+            var receiver = new PulseReceiver() {\n+                @Override\n+                public void timePulse(long now) {\n+                    throw new RuntimeException(currentMethodName);\n+                }\n+            };\n+\n+            timer.addPulseReceiver(receiver);\n+\n+            for (int i = 0; i < AbstractPrimaryTimer.FAILING_TIMER_THRESHOLD; ++i) {\n+                timer.simulatePulse();\n+            }\n+\n+            assertEquals(AbstractPrimaryTimer.FAILING_TIMER_THRESHOLD, uncaughtExceptions.size());\n+            assertTrue(uncaughtExceptions.stream().allMatch(e -> e.getMessage().equals(currentMethodName)));\n+\n+            \/\/ The following exceptions are not reported\n+            for (int i = 0; i < 3; ++i) {\n+                timer.simulatePulse();\n+                assertEquals(AbstractPrimaryTimer.FAILING_TIMER_THRESHOLD, uncaughtExceptions.size());\n+            }\n+        } finally {\n+            currentThread.setUncaughtExceptionHandler(exceptionHandler);\n+        }\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/scenario\/animation\/AbstractPrimaryTimerTest.java","additions":145,"deletions":1,"binary":false,"changes":146,"status":"modified"}]}