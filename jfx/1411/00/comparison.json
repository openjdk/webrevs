{"files":[{"patch":"@@ -57,1 +57,1 @@\n-    static void requestFocusOnControlOnlyIfCurrentFocusOwnerIsChild(Control c) {\n+    static boolean controlShouldRequestFocusIfCurrentFocusOwnerIsChild(Control c) {\n@@ -61,1 +61,1 @@\n-            c.requestFocus();\n+            return true;\n@@ -66,2 +66,1 @@\n-                    c.requestFocus();\n-                    break;\n+                    return true;\n@@ -72,0 +71,7 @@\n+        return false;\n+    }\n+\n+    static void requestFocusOnControlOnlyIfCurrentFocusOwnerIsChild(Control c) {\n+        if (controlShouldRequestFocusIfCurrentFocusOwnerIsChild(c)) {\n+            c.requestFocus();\n+        }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ControlUtils.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -430,0 +430,2 @@\n+        boolean listShouldRequestFocus = false;\n+\n@@ -432,0 +434,6 @@\n+            \/\/ The cell is going to be updated, and the current focus owner might be removed from it.\n+            \/\/ Before that happens, check if it has the list as a parent (otherwise the user might have\n+            \/\/ clicked out of the list entirely and given focus to something else), so the list can\n+            \/\/ request the focus back, once the edit commit ends.\n+            listShouldRequestFocus = ControlUtils.controlShouldRequestFocusIfCurrentFocusOwnerIsChild(list);\n+\n@@ -450,2 +458,1 @@\n-            \/\/ owner has the list as a parent (otherwise the user might have\n-            \/\/ clicked out of the list entirely and given focus to something else.\n+            \/\/ owner had the list as a parent.\n@@ -453,1 +460,3 @@\n-            ControlUtils.requestFocusOnControlOnlyIfCurrentFocusOwnerIsChild(list);\n+            if (listShouldRequestFocus) {\n+                list.requestFocus();\n+            }\n@@ -472,1 +481,1 @@\n-            \/\/ clicked out of the list entirely and given focus to something else.\n+            \/\/ clicked out of the list entirely and given focus to something else).\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/ListCell.java","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -357,0 +357,10 @@\n+        boolean tableShouldRequestFocus = false;\n+\n+        if (table != null) {\n+            \/\/ The cell is going to be updated, and the current focus owner might be removed from it.\n+            \/\/ Before that happens, check if it has the table as a parent (otherwise the user might have\n+            \/\/ clicked out of the table entirely and given focus to something else), so the table can\n+            \/\/ request the focus back, once the edit commit ends.\n+            tableShouldRequestFocus = ControlUtils.controlShouldRequestFocusIfCurrentFocusOwnerIsChild(table);\n+        }\n+\n@@ -378,2 +388,1 @@\n-            \/\/ owner has the table as a parent (otherwise the user might have\n-            \/\/ clicked out of the table entirely and given focus to something else.\n+            \/\/ owner had the table as a parent.\n@@ -381,1 +390,3 @@\n-            ControlUtils.requestFocusOnControlOnlyIfCurrentFocusOwnerIsChild(table);\n+            if (tableShouldRequestFocus) {\n+                table.requestFocus();\n+            }\n@@ -397,1 +408,1 @@\n-            \/\/ clicked out of the table entirely and given focus to something else.\n+            \/\/ clicked out of the table entirely and given focus to something else).\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TableCell.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -407,0 +407,2 @@\n+        boolean treeShouldRequestFocus = false;\n+\n@@ -409,0 +411,6 @@\n+            \/\/ The cell is going to be updated, and the current focus owner might be removed from it.\n+            \/\/ Before that happens, check if it has the tree as a parent (otherwise the user might have\n+            \/\/ clicked out of the tree entirely and given focus to something else), so the tree can\n+            \/\/ request the focus back, once the edit commit ends.\n+            treeShouldRequestFocus = ControlUtils.controlShouldRequestFocusIfCurrentFocusOwnerIsChild(tree);\n+\n@@ -421,1 +429,1 @@\n-            \/\/ reset the editing item in the TreetView\n+            \/\/ reset the editing item in the TreeView\n@@ -425,2 +433,1 @@\n-            \/\/ owner has the tree as a parent (otherwise the user might have\n-            \/\/ clicked out of the tree entirely and given focus to something else.\n+            \/\/ owner had the tree as a parent.\n@@ -428,1 +435,3 @@\n-            ControlUtils.requestFocusOnControlOnlyIfCurrentFocusOwnerIsChild(tree);\n+            if (treeShouldRequestFocus) {\n+                tree.requestFocus();\n+            }\n@@ -450,1 +459,1 @@\n-            \/\/ clicked out of the tree entirely and given focus to something else.\n+            \/\/ clicked out of the tree entirely and given focus to something else).\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeCell.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -374,0 +374,10 @@\n+        boolean tableShouldRequestFocus = false;\n+\n+        if (table != null) {\n+            \/\/ The cell is going to be updated, and the current focus owner might be removed from it.\n+            \/\/ Before that happens, check if it has the table as a parent (otherwise the user might have\n+            \/\/ clicked out of the table entirely and given focus to something else), so the table can\n+            \/\/ request the focus back, once the edit commit ends.\n+            tableShouldRequestFocus = ControlUtils.controlShouldRequestFocusIfCurrentFocusOwnerIsChild(table);\n+        }\n+\n@@ -395,2 +405,1 @@\n-            \/\/ owner has the table as a parent (otherwise the user might have\n-            \/\/ clicked out of the table entirely and given focus to something else.\n+            \/\/ owner had the table as a parent.\n@@ -398,1 +407,3 @@\n-            ControlUtils.requestFocusOnControlOnlyIfCurrentFocusOwnerIsChild(table);\n+            if (tableShouldRequestFocus) {\n+                table.requestFocus();\n+            }\n@@ -414,1 +425,1 @@\n-            \/\/ clicked out of the table entirely and given focus to something else.\n+            \/\/ clicked out of the table entirely and given focus to something else).\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TreeTableCell.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+import javafx.scene.control.skin.ListCellSkin;\n@@ -1265,0 +1266,82 @@\n+    @Test\n+    public void testListViewRemainsFocusedAfterEditCancel() {\n+        listView.setCellFactory(TextFieldListCell.forListView());\n+        listView.setEditable(true);\n+        listView.getItems().add(\"John\");\n+\n+        StageLoader sl = new StageLoader(new Button(), listView);\n+        listView.requestFocus();\n+        assertTrue(listView.isFocused());\n+\n+        VirtualFlowTestUtils.BLOCK_STAGE_LOADER_DISPOSE = true;\n+        ListCell cell = (ListCell) VirtualFlowTestUtils.getCell(listView, 0);\n+        VirtualFlowTestUtils.BLOCK_STAGE_LOADER_DISPOSE = false;\n+        assertTrue(cell.getSkin() instanceof ListCellSkin);\n+        assertNull(cell.getGraphic());\n+        assertEquals(\"John\", cell.getText());\n+\n+        listView.edit(0);\n+\n+        Toolkit.getToolkit().firePulse();\n+        assertNotNull(cell.getGraphic());\n+        assertTrue(cell.getGraphic() instanceof TextField);\n+\n+        TextField textField = (TextField) cell.getGraphic();\n+        assertEquals(\"John\", textField.getText());\n+\n+        textField.setText(\"Andrew\");\n+        textField.requestFocus();\n+        Toolkit.getToolkit().firePulse();\n+        assertTrue(textField.isFocused());\n+        assertFalse(listView.isFocused());\n+\n+        KeyEventFirer keyboard = new KeyEventFirer(textField);\n+        keyboard.doKeyPress(KeyCode.ESCAPE);\n+\n+        assertEquals(\"John\", cell.getText());\n+        assertTrue(listView.isFocused());\n+\n+        sl.dispose();\n+    }\n+\n+    @Test\n+    public void testListViewRemainsFocusedAfterEditCommit() {\n+        listView.setCellFactory(TextFieldListCell.forListView());\n+        listView.setEditable(true);\n+        listView.getItems().add(\"John\");\n+\n+        StageLoader sl = new StageLoader(new Button(), listView);\n+        listView.requestFocus();\n+        assertTrue(listView.isFocused());\n+\n+        VirtualFlowTestUtils.BLOCK_STAGE_LOADER_DISPOSE = true;\n+        ListCell cell = (ListCell) VirtualFlowTestUtils.getCell(listView, 0);\n+        VirtualFlowTestUtils.BLOCK_STAGE_LOADER_DISPOSE = false;\n+        assertTrue(cell.getSkin() instanceof ListCellSkin);\n+        assertNull(cell.getGraphic());\n+        assertEquals(\"John\", cell.getText());\n+\n+        listView.edit(0);\n+\n+        Toolkit.getToolkit().firePulse();\n+        assertNotNull(cell.getGraphic());\n+        assertTrue(cell.getGraphic() instanceof TextField);\n+\n+        TextField textField = (TextField) cell.getGraphic();\n+        assertEquals(\"John\", textField.getText());\n+\n+        textField.setText(\"Andrew\");\n+        textField.requestFocus();\n+        Toolkit.getToolkit().firePulse();\n+        assertTrue(textField.isFocused());\n+        assertFalse(listView.isFocused());\n+\n+        KeyEventFirer keyboard = new KeyEventFirer(textField);\n+        keyboard.doKeyPress(KeyCode.ENTER);\n+\n+        assertEquals(\"Andrew\", cell.getText());\n+        assertTrue(listView.isFocused());\n+\n+        sl.dispose();\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/ListViewTest.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -2219,0 +2219,101 @@\n+    @Test\n+    public void testTableViewRemainsFocusedAfterEditCancel() {\n+        TableView<Person> table = new TableView<>();\n+        table.setEditable(true);\n+\n+        table.setItems(FXCollections.observableArrayList(\n+                new Person(\"John\", \"Smith\", \"john.smith@example.com\")));\n+\n+        TableColumn<Person,String> first = new TableColumn<>(\"first\");\n+        first.setCellValueFactory(new PropertyValueFactory<>(\"firstName\"));\n+        first.setCellFactory(TextFieldTableCell.forTableColumn());\n+        table.getColumns().add(first);\n+\n+        StageLoader sl = new StageLoader(new Button(), table);\n+\n+        table.requestFocus();\n+        assertTrue(table.isFocused());\n+\n+        \/\/ get the cell at (0,0)\n+        VirtualFlowTestUtils.BLOCK_STAGE_LOADER_DISPOSE = true;\n+        TableCell cell = (TableCell) VirtualFlowTestUtils.getCell(table, 0, 0);\n+        VirtualFlowTestUtils.BLOCK_STAGE_LOADER_DISPOSE = false;\n+        assertTrue(cell.getSkin() instanceof TableCellSkin);\n+        assertNull(cell.getGraphic());\n+        assertEquals(\"John\", cell.getText());\n+\n+        \/\/ set the table to be editing the first cell at 0,0\n+        table.edit(0, first);\n+\n+        Toolkit.getToolkit().firePulse();\n+        assertNotNull(cell.getGraphic());\n+        assertTrue(cell.getGraphic() instanceof TextField);\n+\n+        TextField textField = (TextField) cell.getGraphic();\n+        assertEquals(\"John\", textField.getText());\n+\n+        textField.setText(\"Andrew\");\n+        textField.requestFocus();\n+        Toolkit.getToolkit().firePulse();\n+        assertTrue(textField.isFocused());\n+        assertFalse(table.isFocused());\n+\n+        KeyEventFirer keyboard = new KeyEventFirer(textField);\n+        keyboard.doKeyPress(KeyCode.ESCAPE);\n+\n+        assertEquals(\"John\", cell.getText());\n+        assertTrue(table.isFocused());\n+\n+        sl.dispose();\n+    }\n+\n+    @Test\n+    public void testTableViewRemainsFocusedAfterEditCommit() {\n+        TableView<Person> table = new TableView<>();\n+        table.setEditable(true);\n+\n+        table.setItems(FXCollections.observableArrayList(\n+                new Person(\"John\", \"Smith\", \"john.smith@example.com\")));\n+\n+        TableColumn<Person,String> first = new TableColumn<>(\"first\");\n+        first.setCellValueFactory(new PropertyValueFactory<>(\"firstName\"));\n+        first.setCellFactory(TextFieldTableCell.forTableColumn());\n+        table.getColumns().add(first);\n+\n+        StageLoader sl = new StageLoader(new Button(), table);\n+        table.requestFocus();\n+        assertTrue(table.isFocused());\n+\n+        \/\/ get the cell at (0,0)\n+        VirtualFlowTestUtils.BLOCK_STAGE_LOADER_DISPOSE = true;\n+        TableCell cell = (TableCell) VirtualFlowTestUtils.getCell(table, 0, 0);\n+        VirtualFlowTestUtils.BLOCK_STAGE_LOADER_DISPOSE = false;\n+        assertTrue(cell.getSkin() instanceof TableCellSkin);\n+        assertNull(cell.getGraphic());\n+        assertEquals(\"John\", cell.getText());\n+\n+        \/\/ set the table to be editing the first cell at 0,0\n+        table.edit(0, first);\n+\n+        Toolkit.getToolkit().firePulse();\n+        assertNotNull(cell.getGraphic());\n+        assertTrue(cell.getGraphic() instanceof TextField);\n+\n+        TextField textField = (TextField) cell.getGraphic();\n+        assertEquals(\"John\", textField.getText());\n+\n+        textField.setText(\"Andrew\");\n+        textField.requestFocus();\n+        Toolkit.getToolkit().firePulse();\n+        assertTrue(textField.isFocused());\n+        assertFalse(table.isFocused());\n+\n+        KeyEventFirer keyboard = new KeyEventFirer(textField);\n+        keyboard.doKeyPress(KeyCode.ENTER);\n+\n+        assertEquals(\"Andrew\", cell.getText());\n+        assertTrue(table.isFocused());\n+\n+        sl.dispose();\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewTest.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -3305,0 +3305,110 @@\n+    @Test\n+    public void testTreeTableViewRemainsFocusedAfterEditCancel() {\n+        TreeTableView<Person> table = new TreeTableView<>();\n+        table.setEditable(true);\n+\n+        TreeItem<Person> root = new TreeItem<>(new Person(\"Root\", null, null));\n+        root.setExpanded(true);\n+        table.setRoot(root);\n+        table.setShowRoot(false);\n+        root.getChildren().setAll(FXCollections.observableArrayList(\n+                new TreeItem<>(new Person(\"John\", \"Smith\", \"john.smith@example.com\"))));\n+\n+        TreeTableColumn<Person,String> first = new TreeTableColumn<>(\"first\");\n+        first.setCellValueFactory(new TreeItemPropertyValueFactory<>(\"firstName\"));\n+        first.setCellFactory(TextFieldTreeTableCell.forTreeTableColumn());\n+        table.getColumns().add(first);\n+\n+        StageLoader sl = new StageLoader(new Button(), table);\n+\n+        table.requestFocus();\n+        assertTrue(table.isFocused());\n+\n+        \/\/ get the cell at (0,0)\n+        VirtualFlowTestUtils.BLOCK_STAGE_LOADER_DISPOSE = true;\n+        TreeTableCell cell = (TreeTableCell) VirtualFlowTestUtils.getCell(table, 0, 0);\n+        VirtualFlowTestUtils.BLOCK_STAGE_LOADER_DISPOSE = false;\n+        assertTrue(cell.getSkin() instanceof TreeTableCellSkin);\n+        assertNull(cell.getGraphic());\n+        assertEquals(\"John\", cell.getText());\n+\n+        \/\/ set the table to be editing the first cell at 0,0\n+        table.edit(0, first);\n+\n+        Toolkit.getToolkit().firePulse();\n+        assertNotNull(cell.getGraphic());\n+        assertTrue(cell.getGraphic() instanceof TextField);\n+\n+        TextField textField = (TextField) cell.getGraphic();\n+        assertEquals(\"John\", textField.getText());\n+\n+        textField.setText(\"Andrew\");\n+        textField.requestFocus();\n+        Toolkit.getToolkit().firePulse();\n+        assertTrue(textField.isFocused());\n+        assertFalse(table.isFocused());\n+\n+        KeyEventFirer keyboard = new KeyEventFirer(textField);\n+        keyboard.doKeyPress(KeyCode.ESCAPE);\n+\n+        assertEquals(\"John\", cell.getText());\n+        assertTrue(table.isFocused());\n+\n+        sl.dispose();\n+    }\n+\n+    @Test\n+    public void testTreeTableViewRemainsFocusedAfterEditCommit() {\n+        TreeTableView<Person> table = new TreeTableView<>();\n+        table.setEditable(true);\n+\n+        TreeItem<Person> root = new TreeItem<>(new Person(\"Root\", null, null));\n+        root.setExpanded(true);\n+        table.setRoot(root);\n+        table.setShowRoot(false);\n+        root.getChildren().setAll(FXCollections.observableArrayList(\n+                new TreeItem<>(new Person(\"John\", \"Smith\", \"john.smith@example.com\"))));\n+\n+        TreeTableColumn<Person,String> first = new TreeTableColumn<>(\"first\");\n+        first.setCellValueFactory(new TreeItemPropertyValueFactory<>(\"firstName\"));\n+        first.setCellFactory(TextFieldTreeTableCell.forTreeTableColumn());\n+        table.getColumns().add(first);\n+\n+        StageLoader sl = new StageLoader(new Button(), table);\n+\n+        table.requestFocus();\n+        assertTrue(table.isFocused());\n+\n+        \/\/ get the cell at (0,0)\n+        VirtualFlowTestUtils.BLOCK_STAGE_LOADER_DISPOSE = true;\n+        TreeTableCell cell = (TreeTableCell) VirtualFlowTestUtils.getCell(table, 0, 0);\n+        VirtualFlowTestUtils.BLOCK_STAGE_LOADER_DISPOSE = false;\n+        assertTrue(cell.getSkin() instanceof TreeTableCellSkin);\n+        assertNull(cell.getGraphic());\n+        assertEquals(\"John\", cell.getText());\n+\n+        \/\/ set the table to be editing the first cell at 0,0\n+        table.edit(0, first);\n+\n+        Toolkit.getToolkit().firePulse();\n+        assertNotNull(cell.getGraphic());\n+        assertTrue(cell.getGraphic() instanceof TextField);\n+\n+        TextField textField = (TextField) cell.getGraphic();\n+        assertEquals(\"John\", textField.getText());\n+\n+        textField.setText(\"Andrew\");\n+        textField.requestFocus();\n+        Toolkit.getToolkit().firePulse();\n+        assertTrue(textField.isFocused());\n+        assertFalse(table.isFocused());\n+\n+        KeyEventFirer keyboard = new KeyEventFirer(textField);\n+        keyboard.doKeyPress(KeyCode.ENTER);\n+\n+        assertEquals(\"Andrew\", cell.getText());\n+        assertTrue(table.isFocused());\n+\n+        sl.dispose();\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewTest.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import javafx.scene.control.skin.TreeCellSkin;\n@@ -2346,0 +2347,92 @@\n+    @Test\n+    public void testTreeViewRemainsFocusedAfterEditCancel() {\n+        treeView.setCellFactory(TextFieldTreeCell.forTreeView());\n+        treeView.setEditable(true);\n+        treeView.setRoot(new TreeItem<>(\"Root\"));\n+        treeView.getRoot().setExpanded(true);\n+        treeView.setShowRoot(false);\n+\n+        TreeItem<String> item = new TreeItem<>(\"John\");\n+        treeView.getRoot().getChildren().add(item);\n+\n+        StageLoader sl = new StageLoader(new Button(), treeView);\n+        treeView.requestFocus();\n+        assertTrue(treeView.isFocused());\n+\n+        VirtualFlowTestUtils.BLOCK_STAGE_LOADER_DISPOSE = true;\n+        TreeCell cell = (TreeCell) VirtualFlowTestUtils.getCell(treeView, 0);\n+        VirtualFlowTestUtils.BLOCK_STAGE_LOADER_DISPOSE = false;\n+        assertTrue(cell.getSkin() instanceof TreeCellSkin);\n+        assertNull(cell.getGraphic());\n+        assertEquals(\"John\", cell.getText());\n+\n+        treeView.edit(item);\n+\n+        Toolkit.getToolkit().firePulse();\n+        assertNotNull(cell.getGraphic());\n+        assertTrue(cell.getGraphic() instanceof TextField);\n+\n+        TextField textField = (TextField) cell.getGraphic();\n+        assertEquals(\"John\", textField.getText());\n+\n+        textField.setText(\"Andrew\");\n+        textField.requestFocus();\n+        Toolkit.getToolkit().firePulse();\n+        assertTrue(textField.isFocused());\n+        assertFalse(treeView.isFocused());\n+\n+        KeyEventFirer keyboard = new KeyEventFirer(textField);\n+        keyboard.doKeyPress(KeyCode.ESCAPE);\n+\n+        assertEquals(\"John\", cell.getText());\n+        assertTrue(treeView.isFocused());\n+\n+        sl.dispose();\n+    }\n+\n+    @Test\n+    public void testTreeViewRemainsFocusedAfterEditCommit() {\n+        treeView.setCellFactory(TextFieldTreeCell.forTreeView());\n+        treeView.setEditable(true);\n+        treeView.setRoot(new TreeItem<>(\"Root\"));\n+        treeView.getRoot().setExpanded(true);\n+        treeView.setShowRoot(false);\n+\n+        TreeItem<String> item = new TreeItem<>(\"John\");\n+        treeView.getRoot().getChildren().add(item);\n+\n+        StageLoader sl = new StageLoader(new Button(), treeView);\n+        treeView.requestFocus();\n+        assertTrue(treeView.isFocused());\n+\n+        VirtualFlowTestUtils.BLOCK_STAGE_LOADER_DISPOSE = true;\n+        TreeCell cell = (TreeCell) VirtualFlowTestUtils.getCell(treeView, 0);\n+        VirtualFlowTestUtils.BLOCK_STAGE_LOADER_DISPOSE = false;\n+        assertTrue(cell.getSkin() instanceof TreeCellSkin);\n+        assertNull(cell.getGraphic());\n+        assertEquals(\"John\", cell.getText());\n+\n+        treeView.edit(item);\n+\n+        Toolkit.getToolkit().firePulse();\n+        assertNotNull(cell.getGraphic());\n+        assertTrue(cell.getGraphic() instanceof TextField);\n+\n+        TextField textField = (TextField) cell.getGraphic();\n+        assertEquals(\"John\", textField.getText());\n+\n+        textField.setText(\"Andrew\");\n+        textField.requestFocus();\n+        Toolkit.getToolkit().firePulse();\n+        assertTrue(textField.isFocused());\n+        assertFalse(treeView.isFocused());\n+\n+        KeyEventFirer keyboard = new KeyEventFirer(textField);\n+        keyboard.doKeyPress(KeyCode.ENTER);\n+\n+        assertEquals(\"Andrew\", cell.getText());\n+        assertTrue(treeView.isFocused());\n+\n+        sl.dispose();\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeViewTest.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"modified"}]}