{"files":[{"patch":"@@ -2131,2 +2131,0 @@\n-        testImplementation group: \"junit\", name: \"junit\", version: \"${junitVersion}\"\n-        testImplementation group: \"org.hamcrest\", name: \"hamcrest-core\", version: \"${hamcrestVersion}\"\n@@ -2142,1 +2140,0 @@\n-        testRuntimeOnly group: \"org.junit.vintage\", name: \"junit-vintage-engine\", version: \"${junitJupiterVersion}\"\n","filename":"build.gradle","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -76,5 +76,0 @@\n-dependencies {\n-    testImplementation group: \"junit\", name: \"junit\", version: \"4.13.2\"\n-    testImplementation group: \"org.hamcrest\", name: \"hamcrest-core\", version: \"1.3\"\n-}\n-\n","filename":"buildSrc\/build.gradle","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -158,8 +158,0 @@\n-      <component group=\"junit\" name=\"junit\" version=\"4.13.2\">\n-         <artifact name=\"junit-4.13.2.jar\">\n-            <sha256 value=\"8e495b634469d64fb8acfa3495a065cbacc8a0fff55ce1e31007be4c16dc57d3\" origin=\"Generated by Gradle\"\/>\n-         <\/artifact>\n-         <artifact name=\"junit-4.13.2.pom\">\n-            <sha256 value=\"569b6977ee4603c965c1c46c3058fa6e969291b0160eb6964dd092cd89eadd94\" origin=\"Generated by Gradle\"\/>\n-         <\/artifact>\n-      <\/component>\n@@ -297,13 +289,0 @@\n-      <component group=\"org.hamcrest\" name=\"hamcrest-core\" version=\"1.3\">\n-         <artifact name=\"hamcrest-core-1.3.jar\">\n-            <sha256 value=\"66fdef91e9739348df7a096aa384a5685f4e875584cce89386a7a47251c4d8e9\" origin=\"Generated by Gradle\"\/>\n-         <\/artifact>\n-         <artifact name=\"hamcrest-core-1.3.pom\">\n-            <sha256 value=\"fde386a7905173a1b103de6ab820727584b50d0e32282e2797787c20a64ffa93\" origin=\"Generated by Gradle\"\/>\n-         <\/artifact>\n-      <\/component>\n-      <component group=\"org.hamcrest\" name=\"hamcrest-parent\" version=\"1.3\">\n-         <artifact name=\"hamcrest-parent-1.3.pom\">\n-            <sha256 value=\"6d535f94efb663bdb682c9f27a50335394688009642ba7a9677504bc1be4129b\" origin=\"Generated by Gradle\"\/>\n-         <\/artifact>\n-      <\/component>\n@@ -374,8 +353,0 @@\n-      <component group=\"org.junit.vintage\" name=\"junit-vintage-engine\" version=\"5.11.3\">\n-         <artifact name=\"junit-vintage-engine-5.11.3.jar\">\n-            <sha256 value=\"d58022419bc76b3df4f479a2b3599d95e24464cd68fb7c2267f1a1a871215c47\" origin=\"Generated by Gradle\"\/>\n-         <\/artifact>\n-         <artifact name=\"junit-vintage-engine-5.11.3.module\">\n-            <sha256 value=\"febb8ac2926d42184951086d28316a9f401f8c4a143215b84257970871060684\" origin=\"Generated by Gradle\"\/>\n-         <\/artifact>\n-      <\/component>\n","filename":"gradle\/verification-metadata.xml","additions":0,"deletions":29,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,2 @@\n+import java.util.Objects;\n+import java.util.function.Predicate;\n@@ -58,5 +60,1 @@\n-import org.hamcrest.BaseMatcher;\n-import org.hamcrest.CoreMatchers;\n-import org.hamcrest.Description;\n-import org.hamcrest.Matcher;\n-import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -68,1 +66,1 @@\n-        final PropertyReference propertyReference;\n+        final PropertyReference<T> propertyReference;\n@@ -71,1 +69,1 @@\n-        final Matcher<T> matcher;\n+        final Predicate<T> matcher;\n@@ -74,1 +72,1 @@\n-            this(name,style,value,CoreMatchers.equalTo(value));\n+            this(name, style, value, arg -> Objects.equals(arg, value));\n@@ -77,2 +75,2 @@\n-        Data(String name, String style, T value, Matcher<T> matcher) {\n-            this.propertyReference = new PropertyReference(MyStyleable.class, name);\n+        Data(String name, String style, T value, Predicate<T> matcher) {\n+            this.propertyReference = new PropertyReference<>(MyStyleable.class, name);\n@@ -86,1 +84,0 @@\n-\n@@ -88,35 +85,25 @@\n-            Arguments.of(new Data(\"myBoolean\", \"-my-boolean: true;\", Boolean.TRUE)),\n-            Arguments.of(new Data(\"myColor\", \"-my-color: red;\", Color.RED)),\n-            Arguments.of(new Data(\"myDuration\", \"-my-duration: 30ms;\", Duration.millis(30))),\n-            Arguments.of(new Data(\"myEffect\", \"-my-effect: innershadow(gaussian, red, 10, .5, 1, 1);\",\n-                        new InnerShadow(BlurType.GAUSSIAN, Color.RED, 10, .5, 1, 1),\n-                        new BaseMatcher<InnerShadow>() {\n-                            @Override\n-                            public boolean matches(Object o) {\n-                                InnerShadow actual = (InnerShadow)o;\n-                                return (actual.getBlurType() == BlurType.GAUSSIAN &&\n-                                        actual.getColor().equals(Color.RED) &&\n-                                        Double.compare(actual.getRadius(),10d) ==  0 &&\n-                                        Double.compare(actual.getChoke(),.5d) ==  0 &&\n-                                        Double.compare(actual.getOffsetX(),1d) ==  0 &&\n-                                        Double.compare(actual.getOffsetY(),1d) ==  0);\n-                            }\n-                            @Override\n-                            public void describeTo(Description description) {\n-                                description.appendText(\"InnerShadow(BlurType.GAUSSIAN, Color.RED, 10, .5, 1, 1)\");\n-                            }\n-                        })\n-                ),\n-            Arguments.of(new Data(\"myPos\", \"-my-pos: bottom-right;\", Pos.BOTTOM_RIGHT)),\n-            Arguments.of(new Data(\"myFont\", \"-my-font: 18 system;\", Font.font(\"system\", 18))),\n-            Arguments.of(new Data(\"myInsets\", \"-my-insets: 1 2 3 4;\", new Insets(1,2,3,4))),\n-            Arguments.of(new Data(\"myInsets\", \"-my-insets: 5;\", new Insets(5,5,5,5))),\n-            Arguments.of(new Data(\"myInsets\", \"-my-insets: 7 8;\", new Insets(7,8,7,8))),\n-            Arguments.of(new Data(\"myInsets\", \"-my-insets: 9 10 11;\", new Insets(9,10,11,10))),\n-            Arguments.of(new Data(\"myPaint\", \"-my-paint: linear-gradient(from 0% 0% to 100% 100%, red 0%, black 100%);\",\n-                        new LinearGradient(0,0,1,1,true, CycleMethod.NO_CYCLE,new Stop[] { new Stop(0,Color.RED), new Stop(1,Color.BLACK) }))\n-                ),\n-            Arguments.of(new Data(\"myNumber\", \"-my-number: 2em;\", Font.getDefault().getSize()*2)),\n-            Arguments.of(new Data(\"myString\", \"-my-string: \\\"yaba daba do\\\";\", \"yaba daba do\")),\n-            Arguments.of(new Data(\"myUrl\", \"-my-url: url('http:\/\/www.oracle.com');\", \"http:\/\/www.oracle.com\")),\n-            Arguments.of(new Data(\"mySelected\", \"-my-selected: false;\", Boolean.FALSE))\n+            Arguments.of(new Data<>(\"myBoolean\", \"-my-boolean: true;\", Boolean.TRUE)),\n+            Arguments.of(new Data<>(\"myColor\", \"-my-color: red;\", Color.RED)),\n+            Arguments.of(new Data<>(\"myDuration\", \"-my-duration: 30ms;\", Duration.millis(30))),\n+            Arguments.of(new Data<>(\"myEffect\", \"-my-effect: innershadow(gaussian, red, 10, .5, 1, 1);\",\n+                    new InnerShadow(BlurType.GAUSSIAN, Color.RED, 10, .5, 1, 1),\n+                    actual -> (actual.getBlurType() == BlurType.GAUSSIAN\n+                            && actual.getColor().equals(Color.RED)\n+                            && Double.compare(actual.getRadius(), 10d) == 0\n+                            && Double.compare(actual.getChoke(), .5d) == 0\n+                            && Double.compare(actual.getOffsetX(), 1d) == 0\n+                            && Double.compare(actual.getOffsetY(), 1d) == 0))),\n+            Arguments.of(new Data<>(\"myPos\", \"-my-pos: bottom-right;\", Pos.BOTTOM_RIGHT)),\n+            Arguments.of(new Data<>(\"myFont\", \"-my-font: 18 system;\", Font.font(\"system\", 18))),\n+            Arguments.of(new Data<>(\"myInsets\", \"-my-insets: 1 2 3 4;\", new Insets(1,2,3,4))),\n+            Arguments.of(new Data<>(\"myInsets\", \"-my-insets: 5;\", new Insets(5,5,5,5))),\n+            Arguments.of(new Data<>(\"myInsets\", \"-my-insets: 7 8;\", new Insets(7,8,7,8))),\n+            Arguments.of(new Data<>(\"myInsets\", \"-my-insets: 9 10 11;\", new Insets(9,10,11,10))),\n+            Arguments.of(new Data<>(\"myPaint\", \"-my-paint: linear-gradient(from 0% 0% to 100% 100%, red 0%, black 100%);\",\n+                    new LinearGradient(0, 0, 1, 1, true, CycleMethod.NO_CYCLE,\n+                            new Stop(0, Color.RED),\n+                            new Stop(1, Color.BLACK)))),\n+            Arguments.of(new Data<>(\"myNumber\", \"-my-number: 2em;\", Font.getDefault().getSize()*2)),\n+            Arguments.of(new Data<>(\"myString\", \"-my-string: \\\"yaba daba do\\\";\", \"yaba daba do\")),\n+            Arguments.of(new Data<>(\"myUrl\", \"-my-url: url('http:\/\/www.oracle.com');\", \"http:\/\/www.oracle.com\")),\n+            Arguments.of(new Data<>(\"mySelected\", \"-my-selected: false;\", Boolean.FALSE))\n@@ -128,1 +115,1 @@\n-    public void theTest(Data data) {\n+    public <T> void testCssStyling(Data<T> data) {\n@@ -135,2 +122,2 @@\n-        ReadOnlyProperty prop = data.propertyReference.getProperty(styleable);\n-        assertThat(prop.getValue(), data.matcher);\n+        ReadOnlyProperty<T> prop = data.propertyReference.getProperty(styleable);\n+        assertTrue(data.matcher.test(prop.getValue()), prop.getValue() + \" does not match expected value\");\n@@ -144,1 +131,1 @@\n-        private static final StyleablePropertyFactory fac = new StyleablePropertyFactory<>(null);\n+        private static final StyleablePropertyFactory<Styleable> fac = new StyleablePropertyFactory<>(null);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/css\/StyleablePropertyFactoryTest.java","additions":38,"deletions":51,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,3 @@\n-import static org.junit.Assert.fail;\n-\n-import java.util.Timer;\n-import java.util.TimerTask;\n-\n+import javafx.embed.swt.FXCanvas;\n+import javafx.scene.Scene;\n+import javafx.scene.layout.Region;\n@@ -41,5 +39,2 @@\n-import org.junit.Test;\n-\n-import javafx.embed.swt.FXCanvas;\n-import javafx.scene.Scene;\n-import javafx.scene.layout.Region;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -47,3 +42,3 @@\n-public class FXCanvasScaledTest {\n-\n-    private int cnt;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.TimeUnit;\n@@ -51,1 +46,1 @@\n-    static Shell shell;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -53,1 +48,1 @@\n-    static Display display;\n+public class FXCanvasScaledTest extends SWTTest {\n@@ -56,1 +51,4 @@\n-    final static int TARGET_BASE_SIZE = 101;\n+    static final int TARGET_BASE_SIZE = 101;\n+\n+    private int cnt;\n+    private FXCanvas canvas;\n@@ -58,1 +56,2 @@\n-    @Test(timeout = 10000)\n+    @Test\n+    @Timeout(value = 10000, unit = TimeUnit.MILLISECONDS)\n@@ -60,6 +59,13 @@\n-        System.setProperty(\"sun.java2d.uiScale.enabled\", \"true\");\n-        System.setProperty(\"sun.java2d.uiScale\", \"125%\");\n-        System.setProperty(\"glass.win.uiScale\", \"125%\");\n-        System.setProperty(\"glass.win.renderScale\", \"125%\");\n-        System.setProperty(\"glass.gtk.uiScale\", \"1.25\");\n-        System.setProperty(\"swt.autoScale\", \"125\");\n+        runOnSwtThread(() -> {\n+            System.setProperty(\"sun.java2d.uiScale.enabled\", \"true\");\n+            System.setProperty(\"sun.java2d.uiScale\", \"125%\");\n+            System.setProperty(\"glass.win.uiScale\", \"125%\");\n+            System.setProperty(\"glass.win.renderScale\", \"125%\");\n+            System.setProperty(\"glass.gtk.uiScale\", \"1.25\");\n+            System.setProperty(\"swt.autoScale\", \"125\");\n+\n+            \/\/ Start the Application\n+            Display display = Display.getCurrent();\n+            Shell shell = new Shell(display);\n+            shell.setLayout(new FillLayout());\n+            shell.open();\n@@ -67,6 +73,2 @@\n-        \/\/ Start the Application\n-        display = new Display();\n-        shell = new Shell(display);\n-        shell.setLayout(new FillLayout());\n-        final FXCanvas canvas = new FXCanvas(shell, SWT.NONE);\n-        initFX(canvas);\n+            canvas = new FXCanvas(shell, SWT.NONE);\n+            initFX(canvas);\n@@ -74,29 +76,30 @@\n-        Timer t = new Timer();\n-        TimerTask task = new TimerTask() {\n-            @Override\n-            public void run() {\n-                switch (cnt) {\n-                    case 0:\n-                        display.asyncExec(() -> canvas.setBounds(0, 0, 201, 201));\n-                        break;\n-                    case 1:\n-                        display.asyncExec(() -> canvas.setBounds(0, 0, TARGET_BASE_SIZE, TARGET_BASE_SIZE));\n-                        break;\n-                    case 2:\n-                        t.cancel();\n-                        display.asyncExec(() -> {\n-                            \/\/ Capture painted component. Bounds are in pt, so size is 101 and not 127\n-                            GC gc = new GC(canvas);\n-                            final Image image = new Image(display, canvas.getBounds());\n-                            gc.copyArea(image, canvas.getBounds().x, canvas.getBounds().y);\n-                            gc.dispose();\n-                            PaletteData palette = image.getImageData().palette;\n-                            int referenceWhitePixel = image.getImageData().getPixel(0, 0);\n-                            RGB referenceRGB = palette.getRGB(referenceWhitePixel);\n-                            \/\/ check if there is a diagonal, which should be the right border\n-                            for (int x = 10; x < 30; x++) {\n-                                for (int y = 80; y < 100; y++) {\n-                                    int pixel = image.getImageData().getPixel(x, y);\n-                                    RGB rgb = palette.getRGB(pixel);\n-                                    if (!referenceRGB.equals(rgb)) {\n-                                        fail(\"image is skewed\");\n+            Timer t = new Timer();\n+            TimerTask task = new TimerTask() {\n+                @Override\n+                public void run() {\n+                    switch (cnt) {\n+                        case 0:\n+                            display.asyncExec(() -> canvas.setBounds(0, 0, 201, 201));\n+                            break;\n+                        case 1:\n+                            display.asyncExec(() -> canvas.setBounds(0, 0, TARGET_BASE_SIZE, TARGET_BASE_SIZE));\n+                            break;\n+                        case 2:\n+                            t.cancel();\n+                            display.asyncExec(() -> {\n+                                \/\/ Capture painted component. Bounds are in pt, so size is 101 and not 127\n+                                GC gc = new GC(canvas);\n+                                final Image image = new Image(display, canvas.getBounds());\n+                                gc.copyArea(image, canvas.getBounds().x, canvas.getBounds().y);\n+                                gc.dispose();\n+                                PaletteData palette = image.getImageData().palette;\n+                                int referenceWhitePixel = image.getImageData().getPixel(0, 0);\n+                                RGB referenceRGB = palette.getRGB(referenceWhitePixel);\n+                                \/\/ check if there is a diagonal, which should be the right border\n+                                for (int x = 10; x < 30; x++) {\n+                                    for (int y = 80; y < 100; y++) {\n+                                        int pixel = image.getImageData().getPixel(x, y);\n+                                        RGB rgb = palette.getRGB(pixel);\n+                                        if (!referenceRGB.equals(rgb)) {\n+                                            fail(\"image is skewed\");\n+                                        }\n@@ -105,4 +108,5 @@\n-                            }\n-                            shell.close();\n-                        });\n-                        break;\n+                                shell.close();\n+                            });\n+                            break;\n+                    }\n+                    cnt++;\n@@ -110,4 +114,2 @@\n-                cnt++;\n-            }\n-        };\n-        t.schedule(task, 500, 500);\n+            };\n+            t.schedule(task, 500, 500);\n@@ -115,6 +117,6 @@\n-        shell.open();\n-        while (!shell.isDisposed()) {\n-            if (!display.readAndDispatch())\n-                display.sleep();\n-        }\n-        display.dispose();\n+            while (!shell.isDisposed()) {\n+                if (!display.readAndDispatch()) {\n+                    display.sleep();\n+                }\n+            }\n+        });\n","filename":"modules\/javafx.swt\/src\/test\/java\/test\/javafx\/embed\/swt\/FXCanvasScaledTest.java","additions":75,"deletions":73,"binary":false,"changes":148,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,2 @@\n-import org.junit.Rule;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -37,1 +37,1 @@\n-import static org.junit.Assert.assertSame;\n+import java.util.concurrent.TimeUnit;\n@@ -39,1 +39,1 @@\n-public class FXCanvasTest {\n+import static org.junit.jupiter.api.Assertions.assertSame;\n@@ -41,2 +41,1 @@\n-    @Rule\n-    public SwtRule ctx = new SwtRule();\n+public class FXCanvasTest extends SWTTest {\n@@ -44,5 +43,1 @@\n-    @Test(timeout = 10000)\n-    public void getFXCanvas() throws Throwable {\n-        final Shell shell = new Shell(Display.getCurrent());\n-        final FXCanvas canvas = new FXCanvas(shell, SWT.NONE);\n-        shell.open();\n+    private FXCanvas canvas;\n@@ -50,3 +45,8 @@\n-        \/\/ create and hook scene\n-        Scene scene = new Scene(new Group());\n-        canvas.setScene(scene);\n+    @Test\n+    @Timeout(value = 10000, unit = TimeUnit.MILLISECONDS)\n+    public void testFXCanvas() throws Throwable {\n+        runOnSwtThread(() -> {\n+            Display display = Display.getCurrent();\n+            Shell shell = new Shell(display);\n+            canvas = new FXCanvas(shell, SWT.NONE);\n+            shell.open();\n@@ -54,2 +54,3 @@\n-        \/\/ check FXCanvas is properly retrieved\n-        assertSame(canvas, FXCanvas.getFXCanvas(canvas.getScene()));\n+            \/\/ create and hook scene\n+            Scene scene = new Scene(new Group());\n+            canvas.setScene(scene);\n@@ -57,2 +58,13 @@\n-        \/\/ FIXME: We cannot close the shell here because of https:\/\/bugs.eclipse.org\/bugs\/show_bug.cgi?id=435066.\n-        \/\/ shell.close();\n+            display.asyncExec(() -> {\n+                \/\/ check FXCanvas is properly retrieved\n+                assertSame(canvas, FXCanvas.getFXCanvas(canvas.getScene()));\n+\n+                shell.close();\n+            });\n+\n+            while (!shell.isDisposed()) {\n+                if (!display.readAndDispatch()) {\n+                    display.sleep();\n+                }\n+            }\n+        });\n","filename":"modules\/javafx.swt\/src\/test\/java\/test\/javafx\/embed\/swt\/FXCanvasTest.java","additions":31,"deletions":19,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,2 @@\n-import org.junit.Rule;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.assertNotNull;\n+import java.util.concurrent.TimeUnit;\n@@ -41,1 +41,1 @@\n-public class SWTCursorsTest {\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -43,2 +43,1 @@\n-    @Rule\n-    public SwtRule ctx = new SwtRule();\n+public class SWTCursorsTest extends SWTTest {\n@@ -46,1 +45,4 @@\n-    @Test(timeout = 10000)\n+    private FXCanvas canvas;\n+\n+    @Test\n+    @Timeout(value = 10000, unit = TimeUnit.MILLISECONDS)\n@@ -48,3 +50,9 @@\n-        final Shell shell = new Shell(Display.getCurrent());\n-        final FXCanvas canvas = new FXCanvas(shell, SWT.NONE);\n-        shell.open();\n+        runOnSwtThread(() -> {\n+            Display display = Display.getCurrent();\n+            final Shell shell = new Shell(display);\n+            canvas = new FXCanvas(shell, SWT.NONE);\n+            shell.open();\n+\n+            \/\/ create and hook scene\n+            Scene scene = new Scene(new Group());\n+            canvas.setScene(scene);\n@@ -52,3 +60,3 @@\n-        \/\/ create and hook scene\n-        Scene scene = new Scene(new Group());\n-        canvas.setScene(scene);\n+            \/\/ set image cursor to scene\n+            Image cursorImage = new Image(\"test\/javafx\/embed\/swt\/cursor.png\");\n+            scene.setCursor(new ImageCursor(cursorImage));\n@@ -56,3 +64,2 @@\n-        \/\/ set image cursor to scene\n-        Image cursorImage = new Image(\"test\/javafx\/embed\/swt\/cursor.png\");\n-        scene.setCursor(new ImageCursor(cursorImage));\n+            display.asyncExec(() -> {\n+                assertNotNull(canvas.getCursor());\n@@ -60,2 +67,2 @@\n-        Display.getCurrent().asyncExec(() -> {\n-            assertNotNull(canvas.getCursor());\n+                shell.close();\n+            });\n@@ -63,2 +70,5 @@\n-            \/\/ FIXME: We cannot close the shell here because of https:\/\/bugs.eclipse.org\/bugs\/show_bug.cgi?id=435066.\n-            \/\/shell.close();\n+            while (!shell.isDisposed()) {\n+                if (!display.readAndDispatch()) {\n+                    display.sleep();\n+                }\n+            }\n","filename":"modules\/javafx.swt\/src\/test\/java\/test\/javafx\/embed\/swt\/SWTCursorsTest.java","additions":31,"deletions":21,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.embed.swt;\n+\n+import javafx.application.Platform;\n+import org.eclipse.swt.widgets.Display;\n+import org.junit.jupiter.api.BeforeAll;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class SWTTest {\n+\n+    private static Display display;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        Platform.setImplicitExit(false);\n+\n+        display = Display.getDefault();\n+    }\n+\n+    protected final void runOnSwtThread(Runnable runnable) throws Throwable {\n+        final AtomicReference<Throwable> throwableRef = new AtomicReference<>();\n+\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        display.asyncExec(() -> {\n+            try {\n+                runnable.run();\n+            } catch (Throwable e) {\n+                throwableRef.set(e);\n+            } finally {\n+                display.asyncExec(latch::countDown);\n+            }\n+        });\n+\n+        while (latch.getCount() > 0) {\n+            \/\/ run SWT event loop\n+            if (!display.readAndDispatch()) {\n+                display.sleep();\n+            }\n+        }\n+\n+        Throwable thrown = throwableRef.get();\n+        if (thrown != null) {\n+            throw thrown;\n+        }\n+    }\n+}\n","filename":"modules\/javafx.swt\/src\/test\/java\/test\/javafx\/embed\/swt\/SWTTest.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -1,87 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.javafx.embed.swt;\n-\n-import org.eclipse.swt.widgets.Display;\n-import org.junit.rules.MethodRule;\n-import org.junit.runners.model.FrameworkMethod;\n-import org.junit.runners.model.Statement;\n-\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-\/**\n- * A {@code MethodRule} to execute test methods synchronously on the SWT UI thread. The execution will wait for any\n- * asynchronous runnables scheduled by the test method on the SWT UI thread during its execution.\n- *\/\n-public class SwtRule implements MethodRule {\n-\n-    private void rethrow(final AtomicReference<Throwable> throwableRef) throws Throwable {\n-        Throwable thrown = throwableRef.get();\n-        if (thrown != null) {\n-            throw thrown;\n-        }\n-    }\n-\n-    @Override\n-    public Statement apply(final Statement base, final FrameworkMethod testMethod, final Object target) {\n-        return new Statement() {\n-\n-            @Override\n-            public void evaluate() throws Throwable {\n-                Display display = Display.getDefault();\n-\n-                \/\/ keep track of exceptions thrown in UI thread\n-                final AtomicReference<Throwable> throwableRef = new AtomicReference<>();\n-\n-                final CountDownLatch latch = new CountDownLatch(1);\n-                display.asyncExec(() -> {\n-                    try {\n-                        \/\/ ensure test method is synchronously executed (without spawning a new thread)\n-                        testMethod.invokeExplosively(target);\n-                    } catch (Throwable throwable) {\n-                        throwableRef.set(throwable);\n-                    } finally {\n-                        display.asyncExec(() -> {\n-                            \/\/ wait for any runnables scheduled (asynchronously)\n-                            \/\/ by test method on the UI thread\n-                            latch.countDown();\n-                        });\n-                    }\n-                });\n-\n-                while (latch.getCount() > 0) {\n-                    \/\/ run SWT event loop\n-                    if (!display.readAndDispatch()) {\n-                        display.sleep();\n-                    }\n-                }\n-\n-                rethrow(throwableRef);\n-            }\n-        };\n-    }\n-}\n","filename":"modules\/javafx.swt\/src\/test\/java\/test\/javafx\/embed\/swt\/SwtRule.java","additions":0,"deletions":87,"binary":false,"changes":87,"status":"deleted"},{"patch":"@@ -27,1 +27,0 @@\n-import static org.junit.Assume.assumeFalse;\n@@ -29,0 +28,2 @@\n+import static org.junit.jupiter.api.Assumptions.assumeFalse;\n+\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/NodeInitializationStressTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}