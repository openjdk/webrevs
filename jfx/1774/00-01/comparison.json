{"files":[{"patch":"@@ -28,4 +28,3 @@\n-import java.util.Timer;\n-import java.util.TimerTask;\n-import java.util.concurrent.TimeUnit;\n-\n+import javafx.embed.swt.FXCanvas;\n+import javafx.scene.Scene;\n+import javafx.scene.layout.Region;\n@@ -40,4 +39,0 @@\n-\n-import javafx.embed.swt.FXCanvas;\n-import javafx.scene.Scene;\n-import javafx.scene.layout.Region;\n@@ -47,1 +42,3 @@\n-import static org.junit.jupiter.api.Assertions.fail;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.TimeUnit;\n@@ -49,1 +46,1 @@\n-public class FXCanvasScaledTest {\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -51,1 +48,1 @@\n-    private int cnt;\n+public class FXCanvasScaledTest extends SWTTest {\n@@ -54,1 +51,4 @@\n-    final static int TARGET_BASE_SIZE = 101;\n+    static final int TARGET_BASE_SIZE = 101;\n+\n+    private int cnt;\n+    private FXCanvas canvas;\n@@ -58,7 +58,14 @@\n-    public void testScale() {\n-        System.setProperty(\"sun.java2d.uiScale.enabled\", \"true\");\n-        System.setProperty(\"sun.java2d.uiScale\", \"125%\");\n-        System.setProperty(\"glass.win.uiScale\", \"125%\");\n-        System.setProperty(\"glass.win.renderScale\", \"125%\");\n-        System.setProperty(\"glass.gtk.uiScale\", \"1.25\");\n-        System.setProperty(\"swt.autoScale\", \"125\");\n+    public void testScale() throws Throwable {\n+        runOnSwtThread(() -> {\n+            System.setProperty(\"sun.java2d.uiScale.enabled\", \"true\");\n+            System.setProperty(\"sun.java2d.uiScale\", \"125%\");\n+            System.setProperty(\"glass.win.uiScale\", \"125%\");\n+            System.setProperty(\"glass.win.renderScale\", \"125%\");\n+            System.setProperty(\"glass.gtk.uiScale\", \"1.25\");\n+            System.setProperty(\"swt.autoScale\", \"125\");\n+\n+            \/\/ Start the Application\n+            Display display = Display.getCurrent();\n+            Shell shell = new Shell(display);\n+            shell.setLayout(new FillLayout());\n+            shell.open();\n@@ -66,6 +73,2 @@\n-        \/\/ Start the Application\n-        Display display = new Display();\n-        Shell shell = new Shell(display);\n-        shell.setLayout(new FillLayout());\n-        final FXCanvas canvas = new FXCanvas(shell, SWT.NONE);\n-        initFX(canvas);\n+            canvas = new FXCanvas(shell, SWT.NONE);\n+            initFX(canvas);\n@@ -73,29 +76,30 @@\n-        Timer t = new Timer();\n-        TimerTask task = new TimerTask() {\n-            @Override\n-            public void run() {\n-                switch (cnt) {\n-                    case 0:\n-                        display.asyncExec(() -> canvas.setBounds(0, 0, 201, 201));\n-                        break;\n-                    case 1:\n-                        display.asyncExec(() -> canvas.setBounds(0, 0, TARGET_BASE_SIZE, TARGET_BASE_SIZE));\n-                        break;\n-                    case 2:\n-                        t.cancel();\n-                        display.asyncExec(() -> {\n-                            \/\/ Capture painted component. Bounds are in pt, so size is 101 and not 127\n-                            GC gc = new GC(canvas);\n-                            final Image image = new Image(display, canvas.getBounds());\n-                            gc.copyArea(image, canvas.getBounds().x, canvas.getBounds().y);\n-                            gc.dispose();\n-                            PaletteData palette = image.getImageData().palette;\n-                            int referenceWhitePixel = image.getImageData().getPixel(0, 0);\n-                            RGB referenceRGB = palette.getRGB(referenceWhitePixel);\n-                            \/\/ check if there is a diagonal, which should be the right border\n-                            for (int x = 10; x < 30; x++) {\n-                                for (int y = 80; y < 100; y++) {\n-                                    int pixel = image.getImageData().getPixel(x, y);\n-                                    RGB rgb = palette.getRGB(pixel);\n-                                    if (!referenceRGB.equals(rgb)) {\n-                                        fail(\"image is skewed\");\n+            Timer t = new Timer();\n+            TimerTask task = new TimerTask() {\n+                @Override\n+                public void run() {\n+                    switch (cnt) {\n+                        case 0:\n+                            display.asyncExec(() -> canvas.setBounds(0, 0, 201, 201));\n+                            break;\n+                        case 1:\n+                            display.asyncExec(() -> canvas.setBounds(0, 0, TARGET_BASE_SIZE, TARGET_BASE_SIZE));\n+                            break;\n+                        case 2:\n+                            t.cancel();\n+                            display.asyncExec(() -> {\n+                                \/\/ Capture painted component. Bounds are in pt, so size is 101 and not 127\n+                                GC gc = new GC(canvas);\n+                                final Image image = new Image(display, canvas.getBounds());\n+                                gc.copyArea(image, canvas.getBounds().x, canvas.getBounds().y);\n+                                gc.dispose();\n+                                PaletteData palette = image.getImageData().palette;\n+                                int referenceWhitePixel = image.getImageData().getPixel(0, 0);\n+                                RGB referenceRGB = palette.getRGB(referenceWhitePixel);\n+                                \/\/ check if there is a diagonal, which should be the right border\n+                                for (int x = 10; x < 30; x++) {\n+                                    for (int y = 80; y < 100; y++) {\n+                                        int pixel = image.getImageData().getPixel(x, y);\n+                                        RGB rgb = palette.getRGB(pixel);\n+                                        if (!referenceRGB.equals(rgb)) {\n+                                            fail(\"image is skewed\");\n+                                        }\n@@ -104,4 +108,5 @@\n-                            }\n-                            shell.close();\n-                        });\n-                        break;\n+                                shell.close();\n+                            });\n+                            break;\n+                    }\n+                    cnt++;\n@@ -109,4 +114,2 @@\n-                cnt++;\n-            }\n-        };\n-        t.schedule(task, 500, 500);\n+            };\n+            t.schedule(task, 500, 500);\n@@ -114,4 +117,4 @@\n-        shell.open();\n-        while (!shell.isDisposed()) {\n-            if (!display.readAndDispatch()) {\n-                display.sleep();\n+            while (!shell.isDisposed()) {\n+                if (!display.readAndDispatch()) {\n+                    display.sleep();\n+                }\n@@ -119,2 +122,1 @@\n-        }\n-        display.dispose();\n+        });\n","filename":"modules\/javafx.swt\/src\/test\/java\/test\/javafx\/embed\/swt\/FXCanvasScaledTest.java","additions":70,"deletions":68,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -41,1 +41,3 @@\n-public class FXCanvasTest {\n+public class FXCanvasTest extends SWTTest {\n+\n+    private FXCanvas canvas;\n@@ -45,5 +47,10 @@\n-    public void getFXCanvas() throws Throwable {\n-        Display display = new Display();\n-        Shell shell = new Shell(display);\n-        final FXCanvas canvas = new FXCanvas(shell, SWT.NONE);\n-        shell.open();\n+    public void testFXCanvas() throws Throwable {\n+        runOnSwtThread(() -> {\n+            Display display = Display.getCurrent();\n+            Shell shell = new Shell(display);\n+            canvas = new FXCanvas(shell, SWT.NONE);\n+            shell.open();\n+\n+            \/\/ create and hook scene\n+            Scene scene = new Scene(new Group());\n+            canvas.setScene(scene);\n@@ -51,3 +58,3 @@\n-        \/\/ create and hook scene\n-        Scene scene = new Scene(new Group());\n-        canvas.setScene(scene);\n+            display.asyncExec(() -> {\n+                \/\/ check FXCanvas is properly retrieved\n+                assertSame(canvas, FXCanvas.getFXCanvas(canvas.getScene()));\n@@ -55,2 +62,2 @@\n-        \/\/ check FXCanvas is properly retrieved\n-        assertSame(canvas, FXCanvas.getFXCanvas(canvas.getScene()));\n+                shell.close();\n+            });\n@@ -58,3 +65,4 @@\n-        while (!shell.isDisposed()) {\n-            if (!display.readAndDispatch()) {\n-                display.sleep();\n+            while (!shell.isDisposed()) {\n+                if (!display.readAndDispatch()) {\n+                    display.sleep();\n+                }\n@@ -62,2 +70,1 @@\n-        }\n-        display.dispose();\n+        });\n","filename":"modules\/javafx.swt\/src\/test\/java\/test\/javafx\/embed\/swt\/FXCanvasTest.java","additions":23,"deletions":16,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -43,1 +43,3 @@\n-public class SWTCursorsTest {\n+public class SWTCursorsTest extends SWTTest {\n+\n+    private FXCanvas canvas;\n@@ -47,5 +49,6 @@\n-    public void testImageCursor() {\n-        Display display = new Display();\n-        final Shell shell = new Shell(display);\n-        final FXCanvas canvas = new FXCanvas(shell, SWT.NONE);\n-        shell.open();\n+    public void testImageCursor() throws Throwable {\n+        runOnSwtThread(() -> {\n+            Display display = Display.getCurrent();\n+            final Shell shell = new Shell(display);\n+            canvas = new FXCanvas(shell, SWT.NONE);\n+            shell.open();\n@@ -53,3 +56,3 @@\n-        \/\/ create and hook scene\n-        Scene scene = new Scene(new Group());\n-        canvas.setScene(scene);\n+            \/\/ create and hook scene\n+            Scene scene = new Scene(new Group());\n+            canvas.setScene(scene);\n@@ -57,3 +60,3 @@\n-        \/\/ set image cursor to scene\n-        Image cursorImage = new Image(\"test\/javafx\/embed\/swt\/cursor.png\");\n-        scene.setCursor(new ImageCursor(cursorImage));\n+            \/\/ set image cursor to scene\n+            Image cursorImage = new Image(\"test\/javafx\/embed\/swt\/cursor.png\");\n+            scene.setCursor(new ImageCursor(cursorImage));\n@@ -61,3 +64,2 @@\n-        display.asyncExec(() -> {\n-            assertNotNull(canvas.getCursor());\n-        });\n+            display.asyncExec(() -> {\n+                assertNotNull(canvas.getCursor());\n@@ -65,3 +67,7 @@\n-        while (!shell.isDisposed()) {\n-            if (!display.readAndDispatch()) {\n-                display.sleep();\n+                shell.close();\n+            });\n+\n+            while (!shell.isDisposed()) {\n+                if (!display.readAndDispatch()) {\n+                    display.sleep();\n+                }\n@@ -69,2 +75,1 @@\n-        }\n-        display.dispose();\n+        });\n","filename":"modules\/javafx.swt\/src\/test\/java\/test\/javafx\/embed\/swt\/SWTCursorsTest.java","additions":25,"deletions":20,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2025 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.embed.swt;\n+\n+import javafx.application.Platform;\n+import org.eclipse.swt.widgets.Display;\n+import org.junit.jupiter.api.BeforeAll;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+public abstract class SWTTest {\n+\n+    private static Display display;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        Platform.setImplicitExit(false);\n+\n+        display = Display.getDefault();\n+    }\n+\n+    protected final void runOnSwtThread(Runnable runnable) throws Throwable {\n+        final AtomicReference<Throwable> throwableRef = new AtomicReference<>();\n+\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        display.asyncExec(() -> {\n+            try {\n+                runnable.run();\n+            } catch (Throwable e) {\n+                throwableRef.set(e);\n+            } finally {\n+                display.asyncExec(latch::countDown);\n+            }\n+        });\n+\n+        while (latch.getCount() > 0) {\n+            \/\/ run SWT event loop\n+            if (!display.readAndDispatch()) {\n+                display.sleep();\n+            }\n+        }\n+\n+        Throwable thrown = throwableRef.get();\n+        if (thrown != null) {\n+            throw thrown;\n+        }\n+    }\n+}\n","filename":"modules\/javafx.swt\/src\/test\/java\/test\/javafx\/embed\/swt\/SWTTest.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}