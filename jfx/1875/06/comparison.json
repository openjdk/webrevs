{"files":[{"patch":"@@ -49,1 +49,1 @@\n-    protected final AsyncOperationListener listener;\n+    protected final AsyncOperationListener<V> listener;\n@@ -51,2 +51,2 @@\n-    private int progressGranularity = 100;\n-    private int progressMax, lastProgress, progressIncrement, nextProgress, bytesRead;\n+    private long progressGranularity = 100;\n+    private long progressMax, lastProgress, progressIncrement, nextProgress, bytesRead;\n@@ -112,2 +112,2 @@\n-        final int last = lastProgress;\n-        final int max = progressMax;\n+        final long last = lastProgress;\n+        final long max = progressMax;\n@@ -126,1 +126,1 @@\n-    protected int getProgressMax() {\n+    protected long getProgressMax() {\n@@ -130,1 +130,1 @@\n-    protected void setProgressMax(int progressMax) {\n+    protected void setProgressMax(long progressMax) {\n@@ -148,1 +148,1 @@\n-    protected int getProgressGranularity() {\n+    protected long getProgressGranularity() {\n@@ -152,1 +152,1 @@\n-    protected void setProgressGranularity(int progressGranularity) {\n+    protected void setProgressGranularity(long progressGranularity) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/runtime\/async\/AbstractAsyncOperation.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -32,8 +32,1 @@\n-import java.io.OutputStream;\n-import java.net.HttpURLConnection;\n-import java.net.URL;\n-import java.net.URLConnection;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.Objects;\n@@ -49,9 +42,12 @@\n-    protected final String url;\n-    protected final String method;\n-    protected final String outboundContent;\n-    protected int fileSize;\n-    private Map<String, String> headers = new HashMap<>();\n-    private Map<String, List<String>> responseHeaders = new HashMap<>();\n-\n-    protected AbstractRemoteResource(String url, AsyncOperationListener<T> listener) {\n-        this(url, \"GET\", listener);\n+    \/**\n+     * @param stream an {@link InputStream}, cannot be {@code null}\n+     * @param size the size of the stream, or -1 if unknown\n+     *\/\n+    public record SizedStream(InputStream stream, long size) {}\n+\n+    \/**\n+     * An interface to provide a stream with a known (or unknown) size that\n+     * allows {@link IOException} to be thrown.\n+     *\/\n+    public interface SizedStreamSupplier {\n+        SizedStream get() throws IOException;\n@@ -60,3 +56,1 @@\n-    protected AbstractRemoteResource(String url, String method, AsyncOperationListener<T> listener) {\n-        this(url, method, null, listener);\n-    }\n+    private final SizedStreamSupplier sizedStreamSupplier;\n@@ -64,1 +58,1 @@\n-    protected AbstractRemoteResource(String url, String method, String outboundContent, AsyncOperationListener<T> listener) {\n+    protected AbstractRemoteResource(SizedStreamSupplier sizedStreamSupplier, AsyncOperationListener<T> listener) {\n@@ -66,3 +60,2 @@\n-        this.url = url;\n-        this.method = method;\n-        this.outboundContent = outboundContent;\n+\n+        this.sizedStreamSupplier = Objects.requireNonNull(sizedStreamSupplier, \"sizedStreamSupplier\");\n@@ -71,1 +64,1 @@\n-    protected abstract T processStream(InputStream stream) throws IOException;\n+    protected abstract T processStream(InputStream stream);\n@@ -75,33 +68,3 @@\n-        URL u = new URL(url);\n-        InputStream stream = null;\n-        final String protocol = u.getProtocol();\n-        if(protocol.equals(\"http\") || protocol.equals(\"https\")) {\n-            HttpURLConnection conn = (HttpURLConnection) u.openConnection();\n-            conn.setRequestMethod(method);\n-            conn.setDoInput(true);\n-\n-            for (Map.Entry<String,String> entry : headers.entrySet()) {\n-                String key = entry.getKey();\n-                String value = entry.getValue();\n-                if (value != null && !value.equals(\"\"))\n-                    conn.setRequestProperty(key, value);\n-            }\n-            if(outboundContent != null && method.equals(\"POST\")) {\n-                conn.setDoOutput(true);\n-                byte[] outBytes = outboundContent.getBytes(\"utf-8\");\n-                conn.setRequestProperty(\"Content-Length\", String.valueOf(outBytes.length));\n-                OutputStream out = conn.getOutputStream();\n-                out.write(outBytes);\n-                out.close();\n-            }\n-            conn.connect();\n-            fileSize = conn.getContentLength();\n-            setProgressMax(fileSize);\n-            responseHeaders = conn.getHeaderFields();\n-\n-            stream = new ProgressInputStream(conn.getInputStream());\n-        } else { \/\/ protocol is something other than http...\n-            URLConnection con = u.openConnection();\n-            setProgressMax(con.getContentLength());\n-            stream = new ProgressInputStream(con.getInputStream());\n-        }\n+        SizedStream sizedStream = sizedStreamSupplier.get();\n+\n+        setProgressMax(sizedStream.size);\n@@ -109,1 +72,1 @@\n-        try {\n+        try (ProgressInputStream stream = new ProgressInputStream(sizedStream.stream)) {\n@@ -112,3 +75,0 @@\n-        finally {\n-            stream.close();\n-        }\n@@ -149,22 +109,0 @@\n-\n-    public void setHeader(String header, String value) {\n-        headers.put(header, value);\n-    }\n-\n-    public String getResponseHeader(String header) {\n-        String value = null;\n-        List<String> list = responseHeaders.get(header);\n-        \/\/ return a csv of the strings.\n-        if(list != null) {\n-            StringBuilder sb = new StringBuilder();\n-            Iterator iter = list.iterator();\n-            while(iter.hasNext()) {\n-                sb.append(iter.next());\n-                if(iter.hasNext()) {\n-                    sb.append(',');\n-                }\n-            }\n-            value = sb.toString();\n-        }\n-        return value;\n-    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/runtime\/async\/AbstractRemoteResource.java","additions":22,"deletions":84,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-    public void onProgress(int progressValue, int progressMax);\n+    public void onProgress(long progressValue, long progressMax);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/runtime\/async\/AsyncOperationListener.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -135,1 +135,6 @@\n-    public AsyncOperation loadImageAsync(AsyncOperationListener<? extends ImageLoader> listener, String url, double width, double height, boolean preserveRatio, boolean smooth) {\n+    public AsyncOperation loadImageAsync(AsyncOperationListener<ImageLoader> listener, String url, double width, double height, boolean preserveRatio, boolean smooth) {\n+        throw new UnsupportedOperationException(\"Not supported yet.\");\n+    }\n+\n+    @Override\n+    public AsyncOperation loadImageAsync(AsyncOperationListener<ImageLoader> listener, InputStream stream, double width, double height, boolean preserveRatio, boolean smooth) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/DummyToolkit.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -523,1 +523,1 @@\n-                                          AsyncOperationListener<? extends ImageLoader> listener,\n+                                          AsyncOperationListener<ImageLoader> listener,\n@@ -528,1 +528,6 @@\n-\n+    public abstract AsyncOperation loadImageAsync(\n+                                          AsyncOperationListener<ImageLoader> listener,\n+                                          InputStream stream,\n+                                          double width, double height,\n+                                          boolean preserveRatio,\n+                                          boolean smooth);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/Toolkit.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.io.IOException;\n@@ -230,1 +229,1 @@\n-        extends AbstractRemoteResource<PrismImageLoader2>\n+        extends AbstractRemoteResource<com.sun.javafx.tk.ImageLoader>\n@@ -240,2 +239,2 @@\n-                AsyncOperationListener<PrismImageLoader2> listener,\n-                String url,\n+                AsyncOperationListener<com.sun.javafx.tk.ImageLoader> listener,\n+                SizedStreamSupplier sizedStreamSupplier,\n@@ -244,1 +243,1 @@\n-            super(url, listener);\n+            super(sizedStreamSupplier, listener);\n@@ -252,1 +251,1 @@\n-        protected PrismImageLoader2 processStream(InputStream stream) throws IOException {\n+        protected PrismImageLoader2 processStream(InputStream stream) {\n@@ -256,5 +255,0 @@\n-        @Override\n-        public PrismImageLoader2 call() throws IOException {\n-            return AsyncImageLoader.super.call();\n-        }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/PrismImageLoader2.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -60,0 +60,3 @@\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.net.URLConnection;\n@@ -95,0 +98,2 @@\n+import com.sun.javafx.runtime.async.AbstractRemoteResource.SizedStream;\n+import com.sun.javafx.runtime.async.AbstractRemoteResource.SizedStreamSupplier;\n@@ -817,2 +822,2 @@\n-    @Override public AbstractRemoteResource<? extends ImageLoader> loadImageAsync(\n-            AsyncOperationListener listener, String url,\n+    @Override public AbstractRemoteResource<ImageLoader> loadImageAsync(\n+            AsyncOperationListener<ImageLoader> listener, String url,\n@@ -820,1 +825,33 @@\n-        return new PrismImageLoader2.AsyncImageLoader(listener, url, width, height, preserveRatio, smooth);\n+\n+        SizedStreamSupplier sizedStreamSupplier = () -> {\n+            URL u = new URL(url);\n+            String protocol = u.getProtocol();\n+\n+            if (\"http\".equals(protocol) || \"https\".equals(protocol)) {\n+                HttpURLConnection conn = (HttpURLConnection) u.openConnection();\n+\n+                conn.setRequestMethod(\"GET\");\n+                conn.connect();\n+\n+                long size = conn.getContentLengthLong();\n+\n+                return new SizedStream(conn.getInputStream(), size);\n+            }\n+\n+            \/\/ protocol is something other than http...\n+            URLConnection conn = u.openConnection();\n+            long size = conn.getContentLengthLong();\n+\n+            return new SizedStream(conn.getInputStream(), size);\n+        };\n+\n+        return new PrismImageLoader2.AsyncImageLoader(listener, sizedStreamSupplier, width, height, preserveRatio, smooth);\n+    }\n+\n+    @Override public AbstractRemoteResource<ImageLoader> loadImageAsync(\n+            AsyncOperationListener<ImageLoader> listener, InputStream stream,\n+            double width, double height, boolean preserveRatio, boolean smooth) {\n+\n+        SizedStreamSupplier sizedStreamSupplier = () -> new SizedStream(stream, -1);\n+\n+        return new PrismImageLoader2.AsyncImageLoader(listener, sizedStreamSupplier, width, height, preserveRatio, smooth);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/QuantumToolkit.java","additions":40,"deletions":3,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -623,0 +623,3 @@\n+     * <p>\n+     * The image loading is performed immediately and is completed when this\n+     * constructor returns.\n@@ -636,0 +639,4 @@\n+     * <p>\n+     * If loading in the background is requested, then the {@link #progressProperty() progress} property can\n+     * be monitored for loading progress. Otherwise, the image loading is performed\n+     * immediately and is completed when this constructor returns.\n@@ -639,1 +646,1 @@\n-     *      is being loaded in the background\n+     *      should be loaded in the background\n@@ -651,0 +658,3 @@\n+     * <p>\n+     * The image loading is performed immediately and is completed when this\n+     * constructor returns.\n@@ -674,0 +684,4 @@\n+     * <p>\n+     * If loading in the background is requested, then the {@link #progressProperty() progress} property can\n+     * be monitored for loading progress. Otherwise, the image loading is performed\n+     * immediately and is completed when this constructor returns.\n@@ -685,1 +699,1 @@\n-     *      is being loaded in the background\n+     *      should be loaded in the background\n@@ -704,0 +718,3 @@\n+     * <p>\n+     * The image loading is performed immediately and is completed when this\n+     * constructor returns. The stream is consumed but not closed.\n@@ -713,0 +730,22 @@\n+    \/**\n+     * Constructs an {@code Image} with content loaded from the specified\n+     * input stream.\n+     * <p>\n+     * If {@code backgroundLoading} is {@code true}, the {@link #progressProperty() progress} property\n+     * can be monitored for loading progress. The stream will be consumed asynchronously;\n+     * the caller must not read from or close it. It will be closed automatically when loading completes.\n+     * <p>\n+     * If {@code backgroundLoading} is {@code false}, the image is loaded immediately and\n+     * completed when this constructor returns. The stream is consumed but not closed.\n+     *\n+     * @param is the stream from which to load the image\n+     * @param backgroundLoading indicates whether the image\n+     *      should be loaded in the background\n+     * @throws NullPointerException if input stream is null\n+     * @since 26\n+     *\/\n+    public Image(@NamedArg(\"is\") InputStream is, @NamedArg(\"backgroundLoading\") boolean backgroundLoading) {\n+        this(null, validateInputStream(is), 0, 0, false, false, backgroundLoading);\n+        initialize(null);\n+    }\n+\n@@ -715,0 +754,3 @@\n+     * <p>\n+     * The image loading is performed immediately and is completed when this\n+     * constructor returns. The stream is consumed but not closed.\n@@ -734,0 +776,31 @@\n+    \/**\n+     * Constructs a new {@code Image} with the specified parameters.\n+     * <p>\n+     * If {@code backgroundLoading} is {@code true}, the {@link #progressProperty() progress} property\n+     * can be monitored for loading progress. The stream will be consumed asynchronously;\n+     * the caller must not read from or close it. It will be closed automatically when loading completes.\n+     * <p>\n+     * If {@code backgroundLoading} is {@code false}, the image is loaded immediately and\n+     * completed when this constructor returns. The stream is consumed but not closed.\n+     *\n+     * @param is the stream from which to load the image\n+     * @param requestedWidth the image's bounding box width\n+     * @param requestedHeight the image's bounding box height\n+     * @param preserveRatio indicates whether to preserve the aspect ratio of\n+     *      the original image when scaling to fit the image within the\n+     *      specified bounding box\n+     * @param smooth indicates whether to use a better quality filtering\n+     *      algorithm or a faster one when scaling this image to fit within\n+     *      the specified bounding box\n+     * @param backgroundLoading indicates whether the image\n+     *      should be loaded in the background\n+     * @throws NullPointerException if input stream is null\n+     * @since 26\n+     *\/\n+    public Image(@NamedArg(\"is\") InputStream is, @NamedArg(\"requestedWidth\") double requestedWidth, @NamedArg(\"requestedHeight\") double requestedHeight,\n+                 @NamedArg(\"preserveRatio\") boolean preserveRatio, @NamedArg(\"smooth\") boolean smooth, @NamedArg(\"backgroundLoading\") boolean backgroundLoading) {\n+        this(null, validateInputStream(is), requestedWidth, requestedHeight,\n+             preserveRatio, smooth, backgroundLoading);\n+        initialize(null);\n+    }\n+\n@@ -813,1 +886,1 @@\n-        } else if (isBackgroundLoading() && (inputSource == null)) {\n+        } else if (isBackgroundLoading()) {\n@@ -1050,1 +1123,1 @@\n-        public void onProgress(int cur, int max) {\n+        public void onProgress(long cur, long max) {\n@@ -1068,3 +1141,5 @@\n-            return loadImageAsync(this, url,\n-                                  requestedWidth, requestedHeight,\n-                                  preserveRatio, smooth);\n+            if(inputSource == null) {\n+                return loadImageAsync(this, url, requestedWidth, requestedHeight, preserveRatio, smooth);\n+            }\n+\n+            return loadImageAsync(this, inputSource, requestedWidth, requestedHeight, preserveRatio, smooth);\n@@ -1091,1 +1166,1 @@\n-            AsyncOperationListener<? extends ImageLoader> listener,\n+            AsyncOperationListener<ImageLoader> listener,\n@@ -1099,0 +1174,9 @@\n+    private static AsyncOperation loadImageAsync(\n+        AsyncOperationListener<ImageLoader> listener,\n+        InputStream stream, double width, double height,\n+        boolean preserveRatio, boolean smooth) {\n+        return Toolkit.getToolkit().loadImageAsync(listener, stream,\n+                                                   width, height,\n+                                                   preserveRatio, smooth);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/image\/Image.java","additions":92,"deletions":8,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -115,2 +115,2 @@\n-            final AsyncOperationListener listener,\n-            final String url, final double loadWidth, final double loadHeight,\n+            final AsyncOperationListener<ImageLoader> listener,\n+            final Object url, final double loadWidth, final double loadHeight,\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubImageLoaderFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -606,1 +606,1 @@\n-            AsyncOperationListener listener, String url, double width, double height,\n+            AsyncOperationListener<ImageLoader> listener, String url, double width, double height,\n@@ -612,0 +612,8 @@\n+    @Override\n+    public AsyncOperation loadImageAsync(\n+            AsyncOperationListener<ImageLoader> listener, InputStream stream, double width, double height,\n+            boolean preserveRatio, boolean smooth) {\n+        return imageLoaderFactory.createAsyncImageLoader(\n+                listener, stream, width, height, preserveRatio, smooth);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubToolkit.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import javafx.beans.InvalidationListener;\n@@ -42,0 +41,2 @@\n+\n+import javafx.beans.InvalidationListener;\n@@ -157,0 +158,29 @@\n+    @Test\n+    public void loadImageStreamAsyncProgressTest() {\n+        final InputStream stream = new ByteArrayInputStream(new byte[0]);\n+        registerImage(stream, 200, 100);\n+\n+        final Image image = new Image(stream, true);\n+\n+        final StubAsyncImageLoader lastAsyncImageLoader =\n+                getLastAsyncImageLoader();\n+\n+        lastAsyncImageLoader.setProgress(0, 100);\n+        final float p1 = (float) image.getProgress();\n+\n+        lastAsyncImageLoader.setProgress(33, 100);\n+        final float p2 = (float) image.getProgress();\n+\n+        lastAsyncImageLoader.setProgress(66, 100);\n+        final float p3 = (float) image.getProgress();\n+\n+        lastAsyncImageLoader.setProgress(200, 100);\n+        final float p4 = (float) image.getProgress();\n+\n+        lastAsyncImageLoader.finish();\n+\n+        assertTrue(p1 < p2);\n+        assertTrue(p2 < p3);\n+        assertTrue(p3 == p4);\n+    }\n+\n@@ -531,1 +561,1 @@\n-            new Image(null, true);\n+            new Image((String)null, true);\n@@ -542,0 +572,7 @@\n+    @Test\n+    public void createImageAsyncFromNullInputStreamTest() {\n+        assertThrows(NullPointerException.class, () -> {\n+            new Image((InputStream) null, true);\n+        });\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/image\/ImageTest.java","additions":39,"deletions":2,"binary":false,"changes":41,"status":"modified"}]}