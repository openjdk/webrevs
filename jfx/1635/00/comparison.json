{"files":[{"patch":"@@ -168,9 +168,1 @@\n-        registerChangeListener(control.indexProperty(), e -> {\n-            \/\/ Fix for RT-36661, where empty table cells were showing content, as they\n-            \/\/ had incorrect table cell indices (but the table row index was correct).\n-            \/\/ Note that we only do the update on empty cells to avoid the issue\n-            \/\/ noted below in requestCellUpdate().\n-            if (getSkinnable().isEmpty()) {\n-                requestCellUpdate();\n-            }\n-        });\n+        registerChangeListener(control.indexProperty(), e -> requestCellUpdate());\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TableRowSkinBase.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+\n+import java.util.List;\n@@ -208,0 +210,26 @@\n+\n+    @Test\n+    void testUpdateRowIndexManually() {\n+        TableView<String> table = ControlUtils.createTableView();\n+\n+        TableRow<String> row = new TableRow<>();\n+        row.updateTableView(table);\n+\n+        stageLoader = new StageLoader(row);\n+\n+        row.updateIndex(0);\n+\n+        List<TableCell<String, String>> cells = row.getChildrenUnmodifiable().stream().\n+                filter(TableCell.class::isInstance).map(e -> (TableCell<String, String>) e).toList();\n+        for (TableCell<String, String> cell : cells) {\n+            assertEquals(0, cell.getIndex());\n+        }\n+\n+        row.updateIndex(1);\n+\n+        cells = row.getChildrenUnmodifiable().stream().\n+                filter(TableCell.class::isInstance).map(e -> (TableCell<String, String>) e).toList();\n+        for (TableCell<String, String> cell : cells) {\n+            assertEquals(1, cell.getIndex());\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewRowTest.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -6332,0 +6332,50 @@\n+\n+    @Test\n+    void testReSetItemsWithSameItemShouldUpdateCellIndices() {\n+        table.setFixedCellSize(24);\n+\n+        final TableColumn<String, String> c = new TableColumn<>(\"C\");\n+        c.setCellValueFactory(value -> new SimpleStringProperty(value.getValue()));\n+        table.getColumns().add(c);\n+\n+        for (int i = 0; i < 60; i++) {\n+            table.getItems().add(String.valueOf(i));\n+        }\n+        String lastItem = \"UniqueLastItem\";\n+        table.getItems().add(lastItem);\n+\n+        stageLoader = new StageLoader(table);\n+        stageLoader.getStage().setWidth(300);\n+        stageLoader.getStage().setHeight(300);\n+\n+        \/\/ Scroll to the bottom.\n+        VirtualScrollBar scrollBar = VirtualFlowTestUtils.getVirtualFlowVerticalScrollbar(table);\n+        scrollBar.setValue(1);\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        IndexedCell<String> row = VirtualFlowTestUtils.getCell(table, 60);\n+        assertEquals(lastItem, row.getItem());\n+\n+        List<TableCell<String, String>> cells = row.getChildrenUnmodifiable().stream().\n+                filter(TableCell.class::isInstance).map(e -> (TableCell<String, String>) e).toList();\n+\n+        for (TableCell<String, String> cell : cells) {\n+            assertEquals(60, cell.getIndex());\n+        }\n+\n+        \/\/ Re-set the items, but reuse one item from the previous items list.\n+        table.setItems(FXCollections.observableArrayList(lastItem));\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        row = VirtualFlowTestUtils.getCell(table, 0);\n+        assertEquals(lastItem, row.getItem());\n+\n+        cells = row.getChildrenUnmodifiable().stream().\n+                filter(TableCell.class::isInstance).map(e -> (TableCell<String, String>) e).toList();\n+\n+        for (TableCell<String, String> cell : cells) {\n+            assertEquals(0, cell.getIndex());\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TableViewTest.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+\n+import java.util.List;\n@@ -993,0 +995,26 @@\n+\n+    @Test\n+    void testUpdateRowIndexManually() {\n+        TreeTableView<String> table = ControlUtils.createTreeTableView();\n+\n+        TreeTableRow<String> row = new TreeTableRow<>();\n+        row.updateTreeTableView(table);\n+\n+        stageLoader = new StageLoader(row);\n+\n+        row.updateIndex(0);\n+\n+        List<TreeTableCell<String, String>> cells = row.getChildrenUnmodifiable().stream().\n+                filter(TreeTableCell.class::isInstance).map(e -> (TreeTableCell<String, String>) e).toList();\n+        for (TreeTableCell<String, String> cell : cells) {\n+            assertEquals(0, cell.getIndex());\n+        }\n+\n+        row.updateIndex(1);\n+\n+        cells = row.getChildrenUnmodifiable().stream().\n+                filter(TreeTableCell.class::isInstance).map(e -> (TreeTableCell<String, String>) e).toList();\n+        for (TreeTableCell<String, String> cell : cells) {\n+            assertEquals(1, cell.getIndex());\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableRowTest.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -7539,0 +7539,54 @@\n+\n+    @Test\n+    void testReSetItemsWithSameItemShouldUpdateCellIndices() {\n+        treeTableView.setRoot(new TreeItem<>());\n+        treeTableView.getRoot().setExpanded(true);\n+        treeTableView.setShowRoot(false);\n+        treeTableView.setFixedCellSize(24);\n+\n+        final TreeTableColumn<String, String> c = new TreeTableColumn<>(\"C\");\n+        c.setCellValueFactory(value -> new SimpleStringProperty(value.getValue().getValue()));\n+        treeTableView.getColumns().add(c);\n+\n+        for (int i = 0; i < 60; i++) {\n+            treeTableView.getRoot().getChildren().add(new TreeItem<>(String.valueOf(i)));\n+        }\n+        String lastItem = \"UniqueLastItem\";\n+        TreeItem<String> lastTreeItem = new TreeItem<>(lastItem);\n+        treeTableView.getRoot().getChildren().add(lastTreeItem);\n+\n+        stageLoader = new StageLoader(treeTableView);\n+        stageLoader.getStage().setWidth(300);\n+        stageLoader.getStage().setHeight(300);\n+\n+        \/\/ Scroll to the bottom.\n+        VirtualScrollBar scrollBar = VirtualFlowTestUtils.getVirtualFlowVerticalScrollbar(treeTableView);\n+        scrollBar.setValue(1);\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        IndexedCell<String> row = VirtualFlowTestUtils.getCell(treeTableView, 60);\n+        assertEquals(lastItem, row.getItem());\n+\n+        List<TreeTableCell<String, String>> cells = row.getChildrenUnmodifiable().stream().\n+                filter(TreeTableCell.class::isInstance).map(e -> (TreeTableCell<String, String>) e).toList();\n+\n+        for (TreeTableCell<String, String> cell : cells) {\n+            assertEquals(60, cell.getIndex());\n+        }\n+\n+        \/\/ Re-set the items, but reuse one item from the previous items list.\n+        treeTableView.getRoot().getChildren().setAll(lastTreeItem);\n+\n+        Toolkit.getToolkit().firePulse();\n+\n+        row = VirtualFlowTestUtils.getCell(treeTableView, 0);\n+        assertEquals(lastItem, row.getItem());\n+\n+        cells = row.getChildrenUnmodifiable().stream().\n+                filter(TreeTableCell.class::isInstance).map(e -> (TreeTableCell<String, String>) e).toList();\n+\n+        for (TreeTableCell<String, String> cell : cells) {\n+            assertEquals(0, cell.getIndex());\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TreeTableViewTest.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"modified"}]}