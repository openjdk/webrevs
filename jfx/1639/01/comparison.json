{"files":[{"patch":"@@ -61,1 +61,0 @@\n-void (*fp_pw_deinit)(void);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/fp_pipewire.h","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -132,4 +132,0 @@\n-    if (!sessionClosed) {\n-        fp_pw_deinit();\n-    }\n-\n@@ -581,0 +577,7 @@\n+        if (!pw.loop) {\n+            \/\/ in case someone called the pw_deinit before\n+            DEBUG_SCREENCAST(\"pw_init\\n\", NULL);\n+            fp_pw_init(NULL, NULL);\n+            pw.loop = fp_pw_thread_loop_new(\"JFX Pipewire Thread\", NULL);\n+        }\n+\n@@ -705,1 +708,0 @@\n-    LOAD_SYMBOL(fp_pw_deinit, \"pw_deinit\");\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/screencast_pipewire.c","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,156 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.embed.swing;\n+\n+import java.awt.Robot;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import javafx.application.Platform;\n+import javafx.scene.paint.Color;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+import org.junit.jupiter.api.Timeout;\n+import test.util.Util;\n+\n+@TestMethodOrder(OrderAnnotation.class)\n+public class LinuxScreencastHangCrashTest {\n+\n+    private static Robot robot;\n+    private static javafx.scene.robot.Robot jfxRobot;\n+\n+    private static final int DELAY_BEFORE_SESSION_CLOSE = 2000;\n+    private static final int DELAY_WAIT_FOR_SESSION_TO_CLOSE = DELAY_BEFORE_SESSION_CLOSE + 250;\n+    private static final int DELAY_KEEP_SESSION = DELAY_BEFORE_SESSION_CLOSE - 1000;\n+\n+    private static volatile boolean isFxStarted = false;\n+\n+    @BeforeAll\n+    public static void init() throws Exception {\n+        Assumptions.assumeTrue(!Util.isOnWayland()); \/\/ JDK-8335470\n+        Assumptions.assumeTrue(Util.isOnWayland());\n+        robot = new Robot();\n+    }\n+\n+\n+    static void awtPixel() {\n+        System.out.println(\"awtPixel on \" + Thread.currentThread().getName());\n+        java.awt.Color pixelColor = robot.getPixelColor(100, 100);\n+        System.out.println(\"\\tAWT pixelColor: \" + pixelColor);\n+    }\n+\n+    private static void awtPixelOnFxThread() throws InterruptedException {\n+        System.out.println(\"awtPixelOnFxThread\");\n+        initFX();\n+        CountDownLatch latch = new CountDownLatch(1);\n+        Platform.runLater(() -> {\n+            awtPixel();\n+            latch.countDown();\n+        });\n+        if (!latch.await(5, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"Timed out waiting for awt pixel on FX thread\");\n+        }\n+    }\n+\n+    private static void fxPixel() throws InterruptedException {\n+        System.out.println(\"fxPixel\");\n+        initFX();\n+\n+        CountDownLatch latch = new CountDownLatch(1);\n+        Platform.runLater(() -> {\n+            Color pixelColor = jfxRobot.getPixelColor(100, 100);\n+            System.out.println(\"\\tFX pixelColor: \" + pixelColor);\n+            latch.countDown();\n+        });\n+        if (!latch.await(5, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"Timed out waiting for FX pixelColor\");\n+        }\n+    }\n+\n+    private static void initFX() {\n+        if (!isFxStarted) {\n+            System.out.println(\"Platform.startup\");\n+            Platform.startup(() -> {\n+                jfxRobot = new javafx.scene.robot.Robot();\n+            });\n+            isFxStarted = true;\n+        }\n+    }\n+\n+    @Test\n+    @Order(1)\n+    @Timeout(value=30)\n+    public void testHang() throws Exception {\n+        awtPixel();\n+        robot.delay(DELAY_WAIT_FOR_SESSION_TO_CLOSE);\n+\n+        initFX();\n+        robot.delay(500);\n+        awtPixel();\n+        robot.delay(DELAY_WAIT_FOR_SESSION_TO_CLOSE);\n+\n+        awtPixelOnFxThread();\n+        robot.delay(DELAY_WAIT_FOR_SESSION_TO_CLOSE);\n+\n+        fxPixel();\n+        robot.delay(DELAY_WAIT_FOR_SESSION_TO_CLOSE);\n+\n+        awtPixelOnFxThread();\n+        robot.delay(DELAY_WAIT_FOR_SESSION_TO_CLOSE);\n+\n+        awtPixel();\n+        robot.delay(DELAY_WAIT_FOR_SESSION_TO_CLOSE);\n+    }\n+\n+    @Test\n+    @Order(2)\n+    @Timeout(value=60)\n+    public void testCrash() {\n+        List.of(\n+                DELAY_KEEP_SESSION,\n+                DELAY_BEFORE_SESSION_CLOSE, \/\/ 3 following are just in case\n+                DELAY_BEFORE_SESSION_CLOSE - 25,\n+                DELAY_BEFORE_SESSION_CLOSE + 25\n+        ).forEach(delay -> {\n+            System.out.println(\"Testing with delay: \" + delay);\n+            try {\n+                awtPixel();\n+                robot.delay(delay);\n+                fxPixel();\n+                robot.delay(delay);\n+                awtPixelOnFxThread();\n+                robot.delay(delay);\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/embed\/swing\/LinuxScreencastHangCrashTest.java","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"}]}