{"files":[{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -50,1 +50,1 @@\n-    @Before\n+    @BeforeEach\n@@ -103,1 +103,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -105,1 +105,3 @@\n-        Bindings.bindContentBidirectional(null, op2);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.bindContentBidirectional(null, op2);\n+        });\n@@ -108,1 +110,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -110,1 +112,3 @@\n-        Bindings.bindContentBidirectional(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.bindContentBidirectional(op1, null);\n+        });\n@@ -113,1 +117,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -115,1 +119,3 @@\n-        Bindings.bindContentBidirectional(op1, op1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.bindContentBidirectional(op1, op1);\n+        });\n@@ -161,1 +167,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -163,1 +169,3 @@\n-        Bindings.unbindContentBidirectional(null, op2);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContentBidirectional(null, op2);\n+        });\n@@ -166,1 +174,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -168,1 +176,3 @@\n-        Bindings.unbindContentBidirectional(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContentBidirectional(op1, null);\n+        });\n@@ -171,1 +181,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -173,1 +183,3 @@\n-        Bindings.unbindContentBidirectional(op1, op1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.unbindContentBidirectional(op1, op1);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/BidirectionalContentBindingListTest.java","additions":28,"deletions":16,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -38,1 +38,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -53,1 +53,1 @@\n-    @Before\n+    @BeforeEach\n@@ -105,1 +105,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -107,1 +107,3 @@\n-        Bindings.bindContentBidirectional(null, op2);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.bindContentBidirectional(null, op2);\n+        });\n@@ -110,1 +112,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -112,1 +114,3 @@\n-        Bindings.bindContentBidirectional(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.bindContentBidirectional(op1, null);\n+        });\n@@ -115,1 +119,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -117,1 +121,3 @@\n-        Bindings.bindContentBidirectional(op1, op1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.bindContentBidirectional(op1, op1);\n+        });\n@@ -167,1 +173,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -169,1 +175,3 @@\n-        Bindings.unbindContentBidirectional(null, op2);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContentBidirectional(null, op2);\n+        });\n@@ -172,1 +180,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -174,1 +182,3 @@\n-        Bindings.unbindContentBidirectional(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContentBidirectional(op1, null);\n+        });\n@@ -177,1 +187,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -179,1 +189,3 @@\n-        Bindings.unbindContentBidirectional(op1, op1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.unbindContentBidirectional(op1, op1);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/BidirectionalContentBindingMapTest.java","additions":28,"deletions":16,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -38,1 +38,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -49,1 +49,1 @@\n-    @Before\n+    @BeforeEach\n@@ -101,1 +101,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -103,1 +103,3 @@\n-        Bindings.bindContentBidirectional(null, op2);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.bindContentBidirectional(null, op2);\n+        });\n@@ -106,1 +108,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -108,1 +110,3 @@\n-        Bindings.bindContentBidirectional(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.bindContentBidirectional(op1, null);\n+        });\n@@ -111,1 +115,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -113,1 +117,3 @@\n-        Bindings.bindContentBidirectional(op1, op1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.bindContentBidirectional(op1, op1);\n+        });\n@@ -163,1 +169,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -165,1 +171,3 @@\n-        Bindings.unbindContentBidirectional(null, op2);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContentBidirectional(null, op2);\n+        });\n@@ -168,1 +176,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -170,1 +178,3 @@\n-        Bindings.unbindContentBidirectional(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContentBidirectional(op1, null);\n+        });\n@@ -173,1 +183,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -175,1 +185,3 @@\n-        Bindings.unbindContentBidirectional(op1, op1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.unbindContentBidirectional(op1, op1);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/BidirectionalContentBindingSetTest.java","additions":28,"deletions":16,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -50,1 +50,1 @@\n-    @Before\n+    @BeforeEach\n@@ -87,1 +87,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -89,1 +89,3 @@\n-        Bindings.bindContent(null, op2);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.bindContent(null, op2);\n+        });\n@@ -92,1 +94,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -94,1 +96,3 @@\n-        Bindings.bindContent(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.bindContent(op1, null);\n+        });\n@@ -97,1 +101,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -99,1 +103,3 @@\n-        Bindings.bindContent(op2, op2);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.bindContent(op2, op2);\n+        });\n@@ -126,1 +132,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -128,1 +134,3 @@\n-        Bindings.unbindContent(null, op2);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContent(null, op2);\n+        });\n@@ -131,1 +139,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -133,1 +141,3 @@\n-        Bindings.unbindContent(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContent(op1, null);\n+        });\n@@ -136,1 +146,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -138,1 +148,3 @@\n-        Bindings.unbindContent(op2, op2);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.unbindContent(op2, op2);\n+        });\n@@ -141,0 +153,1 @@\n+\n@@ -172,1 +185,1 @@\n-        final int hc2 = ContentBinding.bind(op1, op2).hashCode();\n+         final int hc2 = ContentBinding.bind(op1, op2).hashCode();\n@@ -177,2 +190,2 @@\n-    public void testEquals() {\n-        final Object golden = ContentBinding.bind(op1, op2);\n+     public void testEquals() {\n+     final Object golden = ContentBinding.bind(op1, op2);\n@@ -190,1 +203,1 @@\n-    }\n+     }\n@@ -212,2 +225,2 @@\n-                throw new AssertionError(\"We don't expect any exceptions in this test!\", e);\n-            }\n+                    throw new AssertionError(\"We don't expect any exceptions in this test!\", e);\n+                }\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ContentBindingListTest.java","additions":35,"deletions":22,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -38,1 +38,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -53,1 +53,1 @@\n-    @Before\n+    @BeforeEach\n@@ -90,1 +90,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -92,1 +92,1 @@\n-        Bindings.bindContent(null, op2);\n+        assertThrows(NullPointerException.class, () -> Bindings.bindContent(null, op2));\n@@ -95,1 +95,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -97,1 +97,1 @@\n-        Bindings.bindContent(op1, null);\n+        assertThrows(NullPointerException.class, () -> Bindings.bindContent(op1, null));\n@@ -100,1 +100,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -102,1 +102,1 @@\n-        Bindings.bindContent(op2, op2);\n+        assertThrows(IllegalArgumentException.class, () -> Bindings.bindContent(op2, op2));\n@@ -130,1 +130,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -132,1 +132,3 @@\n-        Bindings.unbindContent(null, op2);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContent(null, op2);\n+        });\n@@ -135,1 +137,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -137,1 +139,3 @@\n-        Bindings.unbindContent(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContent(op1, null);\n+        });\n@@ -140,1 +144,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -142,1 +146,3 @@\n-        Bindings.unbindContent(op2, op2);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.unbindContent(op2, op2);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ContentBindingMapTest.java","additions":22,"deletions":16,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -38,1 +38,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -49,1 +49,1 @@\n-    @Before\n+    @BeforeEach\n@@ -86,15 +86,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void testBind_Null_X() {\n-        Bindings.bindContent(null, op2);\n-    }\n-\n-    @Test(expected = NullPointerException.class)\n-    public void testBind_X_Null() {\n-        Bindings.bindContent(op1, null);\n-    }\n-\n-    @Test(expected = IllegalArgumentException.class)\n-    public void testBind_X_Self() {\n-        Bindings.bindContent(op2, op2);\n-    }\n-\n@@ -126,1 +111,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -128,1 +113,3 @@\n-        Bindings.unbindContent(null, op2);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContent(null, op2);\n+        });\n@@ -131,1 +118,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -133,1 +120,3 @@\n-        Bindings.unbindContent(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContent(op1, null);\n+        });\n@@ -136,1 +125,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -138,1 +127,3 @@\n-        Bindings.unbindContent(op2, op2);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.unbindContent(op2, op2);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ContentBindingSetTest.java","additions":16,"deletions":25,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ErrorLoggingUtiltity.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -32,1 +32,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -166,2 +166,0 @@\n-\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ExpressionHelperBaseTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,3 +28,5 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n@@ -38,2 +40,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -70,1 +72,1 @@\n-    @Before\n+    @BeforeEach\n@@ -82,1 +84,1 @@\n-    @Test (expected = NullPointerException.class)\n+    @Test\n@@ -84,1 +86,3 @@\n-        ExpressionHelper.addListener(helper, null, invalidationListener[0]);\n+        assertThrows(NullPointerException.class, () -> {\n+            ExpressionHelper.addListener(helper, null, invalidationListener[0]);\n+        });\n@@ -87,1 +91,1 @@\n-    @Test (expected = NullPointerException.class)\n+    @Test\n@@ -89,1 +93,3 @@\n-        ExpressionHelper.addListener(helper, observable, (InvalidationListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ExpressionHelper.addListener(helper, observable, (InvalidationListener) null);\n+        });\n@@ -92,1 +98,1 @@\n-    @Test (expected = NullPointerException.class)\n+    @Test\n@@ -94,1 +100,3 @@\n-        ExpressionHelper.removeListener(helper, (InvalidationListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ExpressionHelper.removeListener(helper, (InvalidationListener) null);\n+        });\n@@ -97,1 +105,1 @@\n-    @Test (expected = NullPointerException.class)\n+    @Test\n@@ -99,1 +107,3 @@\n-        ExpressionHelper.addListener(helper, null, changeListener[0]);\n+        assertThrows(NullPointerException.class, () -> {\n+            ExpressionHelper.addListener(helper, null, changeListener[0]);\n+        });\n@@ -102,1 +112,1 @@\n-    @Test (expected = NullPointerException.class)\n+    @Test\n@@ -104,1 +114,3 @@\n-        ExpressionHelper.addListener(helper, observable, (ChangeListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ExpressionHelper.addListener(helper, observable, (ChangeListener) null);\n+        });\n@@ -107,1 +119,1 @@\n-    @Test (expected = NullPointerException.class)\n+    @Test\n@@ -109,1 +121,3 @@\n-        ExpressionHelper.removeListener(helper, (ChangeListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ExpressionHelper.removeListener(helper, (ChangeListener) null);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ExpressionHelperTest.java","additions":32,"deletions":18,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -46,2 +46,2 @@\n-import static org.junit.Assert.*;\n-import org.junit.Before;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.BeforeEach;\n@@ -67,1 +67,1 @@\n-    @Before\n+    @BeforeEach\n@@ -166,1 +166,1 @@\n-                           || Arrays.asList(invalidationListener2, invalidationListener1).equals(ExpressionHelperUtility.getInvalidationListeners(observableList)));\n+                || Arrays.asList(invalidationListener2, invalidationListener1).equals(ExpressionHelperUtility.getInvalidationListeners(observableList)));\n@@ -197,1 +197,1 @@\n-                           || Arrays.asList(changeListener2, changeListener1).equals(ExpressionHelperUtility.getChangeListeners(observableList)));\n+                || Arrays.asList(changeListener2, changeListener1).equals(ExpressionHelperUtility.getChangeListeners(observableList)));\n@@ -228,1 +228,1 @@\n-                           || Arrays.asList(listChangeListener2, listChangeListener1).equals(ExpressionHelperUtility.getListChangeListeners(observableList)));\n+                || Arrays.asList(listChangeListener2, listChangeListener1).equals(ExpressionHelperUtility.getListChangeListeners(observableList)));\n@@ -259,1 +259,1 @@\n-                           || Arrays.asList(invalidationListener2, invalidationListener1).equals(ExpressionHelperUtility.getInvalidationListeners(observableMap)));\n+                || Arrays.asList(invalidationListener2, invalidationListener1).equals(ExpressionHelperUtility.getInvalidationListeners(observableMap)));\n@@ -290,1 +290,1 @@\n-                           || Arrays.asList(changeListener2, changeListener1).equals(ExpressionHelperUtility.getChangeListeners(observableMap)));\n+                || Arrays.asList(changeListener2, changeListener1).equals(ExpressionHelperUtility.getChangeListeners(observableMap)));\n@@ -321,1 +321,1 @@\n-                           || Arrays.asList(mapChangeListener2, mapChangeListener1).equals(ExpressionHelperUtility.getMapChangeListeners(observableMap)));\n+                || Arrays.asList(mapChangeListener2, mapChangeListener1).equals(ExpressionHelperUtility.getMapChangeListeners(observableMap)));\n@@ -352,1 +352,1 @@\n-                           || Arrays.asList(invalidationListener2, invalidationListener1).equals(ExpressionHelperUtility.getInvalidationListeners(observableSet)));\n+                || Arrays.asList(invalidationListener2, invalidationListener1).equals(ExpressionHelperUtility.getInvalidationListeners(observableSet)));\n@@ -383,1 +383,1 @@\n-                           || Arrays.asList(changeListener2, changeListener1).equals(ExpressionHelperUtility.getChangeListeners(observableSet)));\n+                || Arrays.asList(changeListener2, changeListener1).equals(ExpressionHelperUtility.getChangeListeners(observableSet)));\n@@ -414,1 +414,1 @@\n-                           || Arrays.asList(setChangeListener2, setChangeListener1).equals(ExpressionHelperUtility.getSetChangeListeners(observableSet)));\n+                || Arrays.asList(setChangeListener2, setChangeListener1).equals(ExpressionHelperUtility.getSetChangeListeners(observableSet)));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ExpressionHelperUtilityTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -45,2 +45,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -69,1 +70,1 @@\n-    @Before\n+    @BeforeEach\n@@ -91,1 +92,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -93,1 +94,3 @@\n-        ListExpressionHelper.addListener(null, null, invalidationListener[0]);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListExpressionHelper.addListener(null, null, invalidationListener[0]);\n+        });\n@@ -96,1 +99,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -98,1 +101,3 @@\n-        ListExpressionHelper.addListener(null, observable, (InvalidationListener)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListExpressionHelper.addListener(null, observable, (InvalidationListener) null);\n+        });\n@@ -101,1 +106,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -103,1 +108,3 @@\n-        ListExpressionHelper.removeListener(null, (InvalidationListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListExpressionHelper.removeListener(null, (InvalidationListener) null);\n+        });\n@@ -106,1 +113,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -108,1 +115,3 @@\n-        ListExpressionHelper.addListener(null, null, changeListener[0]);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListExpressionHelper.addListener(null, null, changeListener[0]);\n+        });\n@@ -111,1 +120,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -113,1 +122,3 @@\n-        ListExpressionHelper.addListener(null, observable, (ChangeListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListExpressionHelper.addListener(null, observable, (ChangeListener) null);\n+        });\n@@ -116,1 +127,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -118,1 +129,3 @@\n-        ListExpressionHelper.removeListener(null, (ChangeListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListExpressionHelper.removeListener(null, (ChangeListener) null);\n+        });\n@@ -121,1 +134,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -123,1 +136,3 @@\n-        ListExpressionHelper.addListener(null, null, listChangeListener[0]);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListExpressionHelper.addListener(null, null, listChangeListener[0]);\n+        });\n@@ -126,1 +141,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -128,1 +143,3 @@\n-        ListExpressionHelper.addListener(null, observable, (ListChangeListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListExpressionHelper.addListener(null, observable, (ListChangeListener) null);\n+        });\n@@ -131,1 +148,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -133,1 +150,3 @@\n-        ListExpressionHelper.removeListener(null, (ListChangeListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListExpressionHelper.removeListener(null, (ListChangeListener) null);\n+        });\n@@ -954,2 +973,0 @@\n-\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ListExpressionHelperTest.java","additions":40,"deletions":23,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -53,1 +53,1 @@\n-    @Before\n+    @BeforeEach\n@@ -65,1 +65,1 @@\n-            new InvalidationListenerMock(), new InvalidationListenerMock(), new InvalidationListenerMock()\n+                new InvalidationListenerMock(), new InvalidationListenerMock(), new InvalidationListenerMock()\n@@ -68,1 +68,1 @@\n-            new ChangeListenerMock(UNDEFINED), new ChangeListenerMock(UNDEFINED), new ChangeListenerMock(UNDEFINED)\n+                new ChangeListenerMock(UNDEFINED), new ChangeListenerMock(UNDEFINED), new ChangeListenerMock(UNDEFINED)\n@@ -71,1 +71,1 @@\n-            new MockMapObserver<>(), new MockMapObserver<>(), new MockMapObserver<>()\n+                new MockMapObserver<>(), new MockMapObserver<>(), new MockMapObserver<>()\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/MapExpressionHelperTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -44,3 +44,3 @@\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -48,1 +48,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -104,1 +104,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -110,1 +110,1 @@\n-    @Before\n+    @BeforeEach\n@@ -384,1 +384,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -386,1 +386,3 @@\n-        select = Bindings.selectString(null, \"next\", \"name\");\n+        assertThrows(NullPointerException.class, () -> {\n+            select = Bindings.selectString(null, \"next\", \"name\");\n+        });\n@@ -400,1 +402,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -402,1 +404,3 @@\n-        select = Bindings.selectString(a.nextProperty(), null, \"name\");\n+        assertThrows(NullPointerException.class, () -> {\n+            select = Bindings.selectString(a.nextProperty(), null, \"name\");\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/SelectBindingTest.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -52,1 +52,1 @@\n-    @Before\n+    @BeforeEach\n@@ -62,1 +62,1 @@\n-            new InvalidationListenerMock(), new InvalidationListenerMock(), new InvalidationListenerMock()\n+                new InvalidationListenerMock(), new InvalidationListenerMock(), new InvalidationListenerMock()\n@@ -65,1 +65,1 @@\n-            new ChangeListenerMock(UNDEFINED), new ChangeListenerMock(UNDEFINED), new ChangeListenerMock(UNDEFINED)\n+                new ChangeListenerMock(UNDEFINED), new ChangeListenerMock(UNDEFINED), new ChangeListenerMock(UNDEFINED)\n@@ -68,1 +68,1 @@\n-            new MockSetObserver<>(), new MockSetObserver<>(), new MockSetObserver<>()\n+                new MockSetObserver<>(), new MockSetObserver<>(), new MockSetObserver<>()\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/SetExpressionHelperTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -53,2 +53,4 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -82,1 +84,1 @@\n-    @Before\n+    @BeforeEach\n@@ -112,1 +114,1 @@\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), doubleV);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), doubleV);\n@@ -118,1 +120,1 @@\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), floatV);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), floatV);\n@@ -124,1 +126,1 @@\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), longV);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), longV);\n@@ -130,1 +132,1 @@\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), intV);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), intV);\n@@ -136,1 +138,1 @@\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), booleanV);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), booleanV);\n@@ -142,1 +144,1 @@\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), dateV);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), dateV);\n@@ -153,1 +155,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -155,1 +157,3 @@\n-        Bindings.convert(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.convert(null);\n+        });\n@@ -172,1 +176,1 @@\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), dateV);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), dateV);\n@@ -187,1 +191,1 @@\n-        assertEquals(\"\" + double0 + double1 + float0 + float1 + long0 + long1 + int0 + int1+ boolean0 + boolean1 + string0 + string1 + date0 + date1, s.get());\n+        assertEquals(\"\" + double0 + double1 + float0 + float1 + long0 + long1 + int0 + int1 + boolean0 + boolean1 + string0 + string1 + date0 + date1, s.get());\n@@ -195,1 +199,3 @@\n-        assertEquals(\"\" + double1 + double1 + float1 + float1 + long1 + long1 + int1 + int1 + boolean1 + boolean1 + string1 + string1 + date1 + date1, s.get());\n+        assertEquals(\n+                \"\" + double1 + double1 + float1 + float1 + long1 + long1 + int1 + int1 + boolean1 + boolean1 + string1 +\n+                        string1 + date1 + date1, s.get());\n@@ -198,1 +204,3 @@\n-        assertEquals(\"\" + double1 + double1 + float1 + float1 + long1 + long1 + int1 + int1 + boolean1 + boolean1 + \"null\" + string1 + \"null\" + date1, s.get());\n+        assertEquals(\n+                \"\" + double1 + double1 + float1 + float1 + long1 + long1 + int1 + int1 + boolean1 + boolean1 + \"null\" +\n+                        string1 + \"null\" + date1, s.get());\n@@ -216,1 +224,1 @@\n-            DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), dateV);\n+            DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), dateV);\n@@ -226,4 +234,8 @@\n-                    doubleV, double1, floatV, float1, longV, long1, intV, int1, booleanV, boolean1, stringV, string1, dateV, date1);\n-            DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), doubleV, floatV, longV, intV, booleanV, stringV, dateV);\n-            assertEquals(String.format(Locale.GERMAN, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n-                    double0, double1, float0, float1, long0, long1, int0, int1, boolean0, boolean1, string0, string1, date0, date1), s.get());\n+                    doubleV, double1, floatV, float1, longV, long1, intV, int1, booleanV, boolean1, stringV, string1,\n+                    dateV, date1);\n+            DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), doubleV, floatV, longV, intV,\n+                    booleanV, stringV, dateV);\n+            assertEquals(\n+                    String.format(Locale.GERMAN, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n+                            double0, double1, float0, float1, long0, long1, int0, int1, boolean0, boolean1, string0,\n+                            string1, date0, date1), s.get());\n@@ -237,2 +249,4 @@\n-            assertEquals(String.format(Locale.GERMAN, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n-                    double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, string1, string1, date1, date1), s.get());\n+            assertEquals(\n+                    String.format(Locale.GERMAN, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n+                            double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, string1,\n+                            string1, date1, date1), s.get());\n@@ -241,2 +255,4 @@\n-            assertEquals(String.format(Locale.GERMAN, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %s, %tc\",\n-                    double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, \"null\", string1, \"null\", date1), s.get());\n+            assertEquals(\n+                    String.format(Locale.GERMAN, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %s, %tc\",\n+                            double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, \"null\",\n+                            string1, \"null\", date1), s.get());\n@@ -258,1 +274,1 @@\n-            DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), dateV);\n+            DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), dateV);\n@@ -268,4 +284,8 @@\n-                    doubleV, double1, floatV, float1, longV, long1, intV, int1, booleanV, boolean1, stringV, string1, dateV, date1);\n-            DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), doubleV, floatV, longV, intV, booleanV, stringV, dateV);\n-            assertEquals(String.format(Locale.US, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n-                    double0, double1, float0, float1, long0, long1, int0, int1, boolean0, boolean1, string0, string1, date0, date1), s.get());\n+                    doubleV, double1, floatV, float1, longV, long1, intV, int1, booleanV, boolean1, stringV, string1,\n+                    dateV, date1);\n+            DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), doubleV, floatV, longV, intV,\n+                    booleanV, stringV, dateV);\n+            assertEquals(\n+                    String.format(Locale.US, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n+                            double0, double1, float0, float1, long0, long1, int0, int1, boolean0, boolean1, string0,\n+                            string1, date0, date1), s.get());\n@@ -279,2 +299,4 @@\n-            assertEquals(String.format(Locale.US, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n-                    double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, string1, string1, date1, date1), s.get());\n+            assertEquals(\n+                    String.format(Locale.US, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n+                            double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, string1,\n+                            string1, date1, date1), s.get());\n@@ -284,1 +306,2 @@\n-                    double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, \"null\", string1, \"null\", date1), s.get());\n+                    double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, \"null\", string1,\n+                    \"null\", date1), s.get());\n@@ -290,1 +313,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -292,1 +315,3 @@\n-        Bindings.format(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.format(null);\n+        });\n@@ -295,1 +320,1 @@\n-    @Test(expected=IllegalFormatException.class)\n+    @Test\n@@ -297,1 +322,3 @@\n-        Bindings.format(\"%tc\", double0);\n+        assertThrows(IllegalFormatException.class, () -> {\n+            Bindings.format(\"%tc\", double0);\n+        });\n@@ -300,1 +327,1 @@\n-    @Test(expected=IllegalFormatException.class)\n+    @Test\n@@ -302,1 +329,3 @@\n-        Bindings.format(\"%tc\", doubleV);\n+        assertThrows(IllegalFormatException.class, () -> {\n+            Bindings.format(\"%tc\", doubleV);\n+        });\n@@ -316,1 +345,1 @@\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), dateV);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), dateV);\n@@ -326,4 +355,8 @@\n-                doubleV, double1, floatV, float1, longV, long1, intV, int1, booleanV, boolean1, stringV, string1, dateV, date1);\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), doubleV, floatV, longV, intV, booleanV, stringV, dateV);\n-        assertEquals(String.format(Locale.GERMAN, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n-                double0, double1, float0, float1, long0, long1, int0, int1, boolean0, boolean1, string0, string1, date0, date1), s.get());\n+                doubleV, double1, floatV, float1, longV, long1, intV, int1, booleanV, boolean1, stringV, string1, dateV,\n+                date1);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), doubleV, floatV, longV, intV, booleanV,\n+                stringV, dateV);\n+        assertEquals(\n+                String.format(Locale.GERMAN, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n+                        double0, double1, float0, float1, long0, long1, int0, int1, boolean0, boolean1, string0,\n+                        string1, date0, date1), s.get());\n@@ -337,2 +370,4 @@\n-        assertEquals(String.format(Locale.GERMAN, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n-                double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, string1, string1, date1, date1), s.get());\n+        assertEquals(\n+                String.format(Locale.GERMAN, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n+                        double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, string1,\n+                        string1, date1, date1), s.get());\n@@ -342,1 +377,2 @@\n-                double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, \"null\", string1, \"null\", date1), s.get());\n+                double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, \"null\", string1, \"null\",\n+                date1), s.get());\n@@ -360,1 +396,1 @@\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), dateV);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), dateV);\n@@ -370,2 +406,4 @@\n-                doubleV, double1, floatV, float1, longV, long1, intV, int1, booleanV, boolean1, stringV, string1, dateV, date1);\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), doubleV, floatV, longV, intV, booleanV, stringV, dateV);\n+                doubleV, double1, floatV, float1, longV, long1, intV, int1, booleanV, boolean1, stringV, string1, dateV,\n+                date1);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), doubleV, floatV, longV, intV, booleanV,\n+                stringV, dateV);\n@@ -373,1 +411,2 @@\n-                double0, double1, float0, float1, long0, long1, int0, int1, boolean0, boolean1, string0, string1, date0, date1), s.get());\n+                double0, double1, float0, float1, long0, long1, int0, int1, boolean0, boolean1, string0, string1, date0,\n+                date1), s.get());\n@@ -382,1 +421,2 @@\n-                double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, string1, string1, date1, date1), s.get());\n+                double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, string1, string1, date1,\n+                date1), s.get());\n@@ -385,2 +425,4 @@\n-        assertEquals(String.format(Locale.US, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %s, %tc\",\n-                double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, \"null\", string1, \"null\", date1), s.get());\n+        assertEquals(\n+                String.format(Locale.US, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %s, %tc\", double1,\n+                        double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, \"null\", string1, \"null\",\n+                        date1), s.get());\n@@ -389,1 +431,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -391,1 +433,3 @@\n-        Bindings.format(Locale.US, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.format(Locale.US, null);\n+        });\n@@ -394,1 +438,1 @@\n-    @Test(expected=IllegalFormatException.class)\n+    @Test\n@@ -396,1 +440,3 @@\n-        Bindings.format(Locale.US, \"%tc\", double0);\n+        assertThrows(IllegalFormatException.class, () -> {\n+            Bindings.format(Locale.US, \"%tc\", double0);\n+        });\n@@ -399,1 +445,1 @@\n-    @Test(expected=IllegalFormatException.class)\n+    @Test\n@@ -401,1 +447,3 @@\n-        Bindings.format(Locale.US, \"%tc\", doubleV);\n+        assertThrows(IllegalFormatException.class, () -> {\n+            Bindings.format(Locale.US, \"%tc\", doubleV);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/StringFormatterTest.java","additions":108,"deletions":60,"binary":false,"changes":168,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/TestLogging.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -45,3 +45,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -60,1 +61,1 @@\n-    @Before\n+    @BeforeEach\n@@ -88,1 +89,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -90,1 +91,3 @@\n-        ListListenerHelper.addListener(helper, (InvalidationListener)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListListenerHelper.addListener(helper, (InvalidationListener)null);\n+        });\n@@ -93,1 +96,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -95,1 +98,3 @@\n-        ListListenerHelper.removeListener(helper, (InvalidationListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListListenerHelper.removeListener(helper, (InvalidationListener) null);\n+        });\n@@ -98,1 +103,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -100,1 +105,3 @@\n-        ListListenerHelper.removeListener(helper, (ListChangeListener<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListListenerHelper.removeListener(helper, (ListChangeListener<Object>) null);\n+        });\n@@ -103,1 +110,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -105,1 +112,3 @@\n-        ListListenerHelper.addListener(helper, (ListChangeListener<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListListenerHelper.addListener(helper, (ListChangeListener<Object>) null);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ListListenerHelperTest.java","additions":23,"deletions":14,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -44,3 +44,1 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -59,1 +57,1 @@\n-    @Before\n+    @BeforeEach\n@@ -87,1 +85,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -89,1 +87,3 @@\n-        MapListenerHelper.addListener(helper, (InvalidationListener)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            MapListenerHelper.addListener(helper, (InvalidationListener)null);\n+        });\n@@ -92,1 +92,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -94,1 +95,3 @@\n-        MapListenerHelper.removeListener(helper, (InvalidationListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            MapListenerHelper.removeListener(helper, (InvalidationListener) null);\n+        });\n@@ -97,1 +100,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -99,1 +103,3 @@\n-        MapListenerHelper.removeListener(helper, (MapChangeListener<Object, Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            MapListenerHelper.removeListener(helper, (MapChangeListener<Object, Object>) null);\n+        });\n@@ -102,1 +108,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -104,1 +111,3 @@\n-        MapListenerHelper.addListener(helper, (MapChangeListener<Object, Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            MapListenerHelper.addListener(helper, (MapChangeListener<Object, Object>) null);\n+        });\n@@ -107,0 +116,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/MapListenerHelperTest.java","additions":24,"deletions":14,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -35,3 +35,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -44,1 +44,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/MappingChangeTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,3 +32,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -40,1 +40,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/NonIterableChangeTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -44,3 +44,1 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -59,1 +57,1 @@\n-    @Before\n+    @BeforeEach\n@@ -87,1 +85,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -89,1 +87,3 @@\n-        SetListenerHelper.addListener(helper, (InvalidationListener)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            SetListenerHelper.addListener(helper, (InvalidationListener)null);\n+        });\n@@ -92,1 +92,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -94,1 +95,3 @@\n-        SetListenerHelper.removeListener(helper, (InvalidationListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            SetListenerHelper.removeListener(helper, (InvalidationListener) null);\n+        });\n@@ -97,1 +100,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -99,1 +103,3 @@\n-        SetListenerHelper.removeListener(helper, (SetChangeListener<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            SetListenerHelper.removeListener(helper, (SetChangeListener<Object>) null);\n+        });\n@@ -102,1 +108,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -104,1 +111,3 @@\n-        SetListenerHelper.addListener(helper, (SetChangeListener<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            SetListenerHelper.addListener(helper, (SetChangeListener<Object>) null);\n+        });\n@@ -107,0 +116,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/SetListenerHelperTest.java","additions":24,"deletions":14,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -29,2 +29,4 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import org.junit.jupiter.api.Test;\n@@ -44,2 +46,2 @@\n-                                      .append(compositeDispatcher)\n-                                      .append(terminalDispatcher);\n+                        .append(compositeDispatcher)\n+                        .append(terminalDispatcher);\n@@ -47,2 +49,2 @@\n-        Assert.assertNotNull(eventDispatchChain.dispatchEvent(\n-                                                    new EmptyEvent()));\n+        assertNotNull(eventDispatchChain.dispatchEvent(\n+                new EmptyEvent()));\n@@ -50,1 +52,1 @@\n-        Assert.assertEquals(1, terminalDispatcher.getCapturingEventCount());\n+        assertEquals(1, terminalDispatcher.getCapturingEventCount());\n@@ -54,1 +56,1 @@\n-        Assert.assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n+        assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n@@ -56,1 +58,1 @@\n-        Assert.assertEquals(1, terminalDispatcher.getCapturingEventCount());\n+        assertEquals(1, terminalDispatcher.getCapturingEventCount());\n@@ -60,1 +62,1 @@\n-        Assert.assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n+        assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n@@ -62,1 +64,1 @@\n-        Assert.assertEquals(1, terminalDispatcher.getCapturingEventCount());\n+        assertEquals(1, terminalDispatcher.getCapturingEventCount());\n@@ -66,1 +68,1 @@\n-        Assert.assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n+        assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n@@ -68,1 +70,1 @@\n-        Assert.assertEquals(1, terminalDispatcher.getCapturingEventCount());\n+        assertEquals(1, terminalDispatcher.getCapturingEventCount());\n@@ -72,1 +74,1 @@\n-        Assert.assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n+        assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n@@ -74,1 +76,1 @@\n-        Assert.assertEquals(2, terminalDispatcher.getCapturingEventCount());\n+        assertEquals(2, terminalDispatcher.getCapturingEventCount());\n@@ -78,1 +80,1 @@\n-        Assert.assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n+        assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n@@ -80,1 +82,1 @@\n-        Assert.assertEquals(3, terminalDispatcher.getCapturingEventCount());\n+        assertEquals(3, terminalDispatcher.getCapturingEventCount());\n@@ -84,1 +86,1 @@\n-        Assert.assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n+        assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n@@ -86,1 +88,1 @@\n-        Assert.assertEquals(4, terminalDispatcher.getCapturingEventCount());\n+        assertEquals(4, terminalDispatcher.getCapturingEventCount());\n@@ -97,18 +99,18 @@\n-        Assert.assertEquals(expectedChild1CapturingEventCount,\n-                            compositeDispatcher.getFirstChildDispatcher()\n-                                               .getCapturingEventCount());\n-        Assert.assertEquals(expectedChild2CapturingEventCount,\n-                            compositeDispatcher.getSecondChildDispatcher()\n-                                               .getCapturingEventCount());\n-        Assert.assertEquals(expectedChild3CapturingEventCount,\n-                            compositeDispatcher.getThirdChildDispatcher()\n-                                               .getCapturingEventCount());\n-        Assert.assertEquals(expectedChild1BubblingEventCount,\n-                            compositeDispatcher.getFirstChildDispatcher()\n-                                               .getBubblingEventCount());\n-        Assert.assertEquals(expectedChild2BubblingEventCount,\n-                            compositeDispatcher.getSecondChildDispatcher()\n-                                               .getBubblingEventCount());\n-        Assert.assertEquals(expectedChild3BubblingEventCount,\n-                            compositeDispatcher.getThirdChildDispatcher()\n-                                               .getBubblingEventCount());\n+        assertEquals(expectedChild1CapturingEventCount,\n+                compositeDispatcher.getFirstChildDispatcher()\n+                        .getCapturingEventCount());\n+        assertEquals(expectedChild2CapturingEventCount,\n+                compositeDispatcher.getSecondChildDispatcher()\n+                        .getCapturingEventCount());\n+        assertEquals(expectedChild3CapturingEventCount,\n+                compositeDispatcher.getThirdChildDispatcher()\n+                        .getCapturingEventCount());\n+        assertEquals(expectedChild1BubblingEventCount,\n+                compositeDispatcher.getFirstChildDispatcher()\n+                        .getBubblingEventCount());\n+        assertEquals(expectedChild2BubblingEventCount,\n+                compositeDispatcher.getSecondChildDispatcher()\n+                        .getBubblingEventCount());\n+        assertEquals(expectedChild3BubblingEventCount,\n+                compositeDispatcher.getThirdChildDispatcher()\n+                        .getBubblingEventCount());\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/event\/CompositeEventDispatcherTest.java","additions":39,"deletions":37,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -36,1 +36,1 @@\n-import org.junit.Assert;\n+import org.junit.jupiter.api.Assertions;\n@@ -38,2 +38,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -44,1 +44,1 @@\n-    @Before\n+    @BeforeEach\n@@ -62,2 +62,2 @@\n-        assertFalse(\"must not have handler after adding filter\", compositeEventHandler.hasHandler());\n-        assertTrue(\"must have filter\", compositeEventHandler.hasFilter());\n+        assertFalse(compositeEventHandler.hasHandler(), \"must not have handler after adding filter\");\n+        assertTrue(compositeEventHandler.hasFilter(), \"must have filter\");\n@@ -65,2 +65,2 @@\n-        assertFalse(\"must not have filter\", compositeEventHandler.hasFilter());\n-        assertFalse(\"must not have handler\", compositeEventHandler.hasHandler());\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter\");\n+        assertFalse(compositeEventHandler.hasHandler(), \"must not have handler\");\n@@ -79,4 +79,4 @@\n-        assertTrue(\"sanity: really added?\", CompositeEventHandlerShim.containsHandler(\n-                compositeEventHandler, weakEventHandler));\n-        assertFalse(\"must not have filter after adding handler\", compositeEventHandler.hasFilter());\n-        assertTrue(\"must have handler\", compositeEventHandler.hasHandler());\n+        assertTrue(CompositeEventHandlerShim.containsHandler(\n+                compositeEventHandler, weakEventHandler), \"sanity: really added?\");\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter after adding handler\");\n+        assertTrue(compositeEventHandler.hasHandler(), \"must have handler\");\n@@ -84,2 +84,2 @@\n-        assertFalse(\"must not have handler\", compositeEventHandler.hasHandler());\n-        assertFalse(\"must not have filter\", compositeEventHandler.hasFilter());\n+        assertFalse(compositeEventHandler.hasHandler(), \"must not have handler\");\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter\");\n@@ -101,2 +101,2 @@\n-        assertFalse(\"must not have handler after adding filter\", compositeEventHandler.hasHandler());\n-        assertTrue(\"must have filter\", compositeEventHandler.hasFilter());\n+        assertFalse(compositeEventHandler.hasHandler(), \"must not have handler after adding filter\");\n+        assertTrue(compositeEventHandler.hasFilter(), \"must have filter\");\n@@ -104,2 +104,2 @@\n-        assertFalse(\"must not have filter\", compositeEventHandler.hasFilter());\n-        assertFalse(\"must not have handler\", compositeEventHandler.hasHandler());\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter\");\n+        assertFalse(compositeEventHandler.hasHandler(), \"must not have handler\");\n@@ -118,4 +118,4 @@\n-        assertTrue(\"sanity: really added?\", CompositeEventHandlerShim.containsHandler(\n-                compositeEventHandler, weakEventHandler));\n-        assertFalse(\"must not have filter after adding handler\", compositeEventHandler.hasFilter());\n-        assertTrue(\"must have handler\", compositeEventHandler.hasHandler());\n+        assertTrue(CompositeEventHandlerShim.containsHandler(\n+                compositeEventHandler, weakEventHandler), \"sanity: really added?\");\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter after adding handler\");\n+        assertTrue(compositeEventHandler.hasHandler(), \"must have handler\");\n@@ -123,2 +123,2 @@\n-        assertFalse(\"must not have filter\", compositeEventHandler.hasFilter());\n-        assertFalse(\"must not have handler\", compositeEventHandler.hasHandler());\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter\");\n+        assertFalse(compositeEventHandler.hasHandler(), \"must not have handler\");\n@@ -135,2 +135,2 @@\n-        assertFalse(\"must not have handler after adding filter\", compositeEventHandler.hasHandler());\n-        assertTrue(\"must have filter\", compositeEventHandler.hasFilter());\n+        assertFalse(compositeEventHandler.hasHandler(), \"must not have handler after adding filter\");\n+        assertTrue(compositeEventHandler.hasFilter(), \"must have filter\");\n@@ -138,2 +138,2 @@\n-        assertFalse(\"must not have filter\", compositeEventHandler.hasFilter());\n-        assertFalse(\"must not have handler\", compositeEventHandler.hasHandler());\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter\");\n+        assertFalse(compositeEventHandler.hasHandler(), \"must not have handler\");\n@@ -150,4 +150,4 @@\n-        assertTrue(\"sanity: really added?\", CompositeEventHandlerShim.containsHandler(\n-                compositeEventHandler, eventCountingHandler));\n-        assertFalse(\"must not have filter after adding handler\", compositeEventHandler.hasFilter());\n-        assertTrue(\"must have handler\", compositeEventHandler.hasHandler());\n+        assertTrue(CompositeEventHandlerShim.containsHandler(\n+                compositeEventHandler, eventCountingHandler), \"sanity: really added?\");\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter after adding handler\");\n+        assertTrue(compositeEventHandler.hasHandler(), \"must have handler\");\n@@ -155,2 +155,2 @@\n-        assertFalse(\"must not have filter\", compositeEventHandler.hasFilter());\n-        assertFalse(\"must not have handler\", compositeEventHandler.hasHandler());\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter\");\n+        assertFalse(compositeEventHandler.hasHandler(), \"must not have handler\");\n@@ -168,2 +168,2 @@\n-        assertFalse(\"must not have filter after set handler\", compositeEventHandler.hasFilter());\n-        assertTrue(\"must have handler\", compositeEventHandler.hasHandler());\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter after set handler\");\n+        assertTrue(compositeEventHandler.hasHandler(), \"must have handler\");\n@@ -171,2 +171,2 @@\n-        assertFalse(\"must not have filter\", compositeEventHandler.hasFilter());\n-        assertFalse(\"must not have handler\", compositeEventHandler.hasHandler());\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter\");\n+        assertFalse(compositeEventHandler.hasHandler(), \"must not have handler\");\n@@ -184,2 +184,2 @@\n-        Assert.assertTrue(\n-            CompositeEventHandlerShim.containsHandler(compositeEventHandler, weakEventHandler));\n+        assertTrue(\n+                CompositeEventHandlerShim.containsHandler(compositeEventHandler, weakEventHandler));\n@@ -187,1 +187,1 @@\n-        Assert.assertEquals(0, eventCountingHandler.getEventCount());\n+        assertEquals(0, eventCountingHandler.getEventCount());\n@@ -189,1 +189,1 @@\n-        Assert.assertEquals(1, eventCountingHandler.getEventCount());\n+        assertEquals(1, eventCountingHandler.getEventCount());\n@@ -193,1 +193,1 @@\n-        Assert.assertFalse(\n+        assertFalse(\n@@ -196,1 +196,1 @@\n-        Assert.assertEquals(1, eventCountingHandler.getEventCount());\n+        assertEquals(1, eventCountingHandler.getEventCount());\n@@ -198,1 +198,1 @@\n-        Assert.assertEquals(1, eventCountingHandler.getEventCount());\n+        assertEquals(1, eventCountingHandler.getEventCount());\n@@ -210,1 +210,1 @@\n-        Assert.assertTrue(\n+        assertTrue(\n@@ -213,1 +213,1 @@\n-        Assert.assertEquals(1, eventCountingFilter.getEventCount());\n+        assertEquals(1, eventCountingFilter.getEventCount());\n@@ -215,1 +215,1 @@\n-        Assert.assertEquals(1, eventCountingFilter.getEventCount());\n+        assertEquals(1, eventCountingFilter.getEventCount());\n@@ -219,1 +219,1 @@\n-        Assert.assertFalse(\n+        assertFalse(\n@@ -222,1 +222,1 @@\n-        Assert.assertEquals(1, eventCountingFilter.getEventCount());\n+        assertEquals(1, eventCountingFilter.getEventCount());\n@@ -224,1 +224,1 @@\n-        Assert.assertEquals(1, eventCountingFilter.getEventCount());\n+        assertEquals(1, eventCountingFilter.getEventCount());\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/event\/CompositeEventHandlerTest.java","additions":52,"deletions":52,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import org.junit.Assert;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -53,1 +53,1 @@\n-        Assert.assertTrue(event instanceof ValueEvent);\n+        assertTrue(event instanceof ValueEvent);\n@@ -58,1 +58,1 @@\n-                                    valueEvent.getValue()));\n+                    valueEvent.getValue()));\n@@ -63,1 +63,1 @@\n-                                    valueEvent.getValue()));\n+                    valueEvent.getValue()));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/event\/EventChangingDispatcher.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,2 +31,3 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -47,1 +48,1 @@\n-                                             .append(dispatcherC);\n+                .append(dispatcherC);\n@@ -49,1 +50,1 @@\n-        Assert.assertEquals(\"(B->(C))\", eventDispatchTree.toString());\n+        assertEquals(\"(B->(C))\", eventDispatchTree.toString());\n@@ -65,5 +66,5 @@\n-                    eventDispatchTree.createTree()\n-                                     .append(dispatchers[0])\n-                                     .append(dispatchers[1])\n-                                     .append(dispatchers[2])\n-                                     .append(dispatchers[3]));\n+                                 eventDispatchTree.createTree()\n+                                .append(dispatchers[0])\n+                                .append(dispatchers[1])\n+                                .append(dispatchers[2])\n+                                .append(dispatchers[3]));\n@@ -73,6 +74,6 @@\n-                    eventDispatchTree.createTree()\n-                                     .append(dispatchers[4])\n-                                     .append(dispatchers[6])\n-                                     .prepend(dispatchers[2])\n-                                     .prepend(dispatchers[1])\n-                                     .prepend(dispatchers[0]));\n+                                 eventDispatchTree.createTree()\n+                                .append(dispatchers[4])\n+                                .append(dispatchers[6])\n+                                .prepend(dispatchers[2])\n+                                .prepend(dispatchers[1])\n+                                .prepend(dispatchers[0]));\n@@ -82,7 +83,7 @@\n-                    eventDispatchTree.createTree()\n-                                     .prepend(dispatchers[7])\n-                                     .prepend(dispatchers[5])\n-                                     .prepend(dispatchers[4])\n-                                     .prepend(dispatchers[2])\n-                                     .prepend(dispatchers[1])\n-                                     .prepend(dispatchers[0]));\n+                                 eventDispatchTree.createTree()\n+                                .prepend(dispatchers[7])\n+                                .prepend(dispatchers[5])\n+                                .prepend(dispatchers[4])\n+                                .prepend(dispatchers[2])\n+                                .prepend(dispatchers[1])\n+                                .prepend(dispatchers[0]));\n@@ -92,7 +93,7 @@\n-                    eventDispatchTree.createTree()\n-                                     .prepend(dispatchers[2])\n-                                     .prepend(dispatchers[1])\n-                                     .prepend(dispatchers[0])\n-                                     .append(dispatchers[4])\n-                                     .append(dispatchers[5])\n-                                     .append(dispatchers[8]));\n+                                 eventDispatchTree.createTree()\n+                                .prepend(dispatchers[2])\n+                                .prepend(dispatchers[1])\n+                                .prepend(dispatchers[0])\n+                                .append(dispatchers[4])\n+                                .append(dispatchers[5])\n+                                .append(dispatchers[8]));\n@@ -107,8 +108,8 @@\n-                    eventDispatchTree.createTree()\n-                                     .append(dispatchers[0])\n-                                     .append(dispatchers[1])\n-                                     .append(dispatchers[2])\n-                                     .append(dispatchers[4])\n-                                     .append(dispatchers[6])\n-                                     .append(dispatchers[10])\n-                                     .append(dispatchers[11]));\n+                                 eventDispatchTree.createTree()\n+                                .append(dispatchers[0])\n+                                .append(dispatchers[1])\n+                                .append(dispatchers[2])\n+                                .append(dispatchers[4])\n+                                .append(dispatchers[6])\n+                                .append(dispatchers[10])\n+                                .append(dispatchers[11]));\n@@ -117,9 +118,9 @@\n-                    eventDispatchTree.createTree()\n-                                     .append(dispatchers[9])\n-                                     .append(dispatchers[0])\n-                                     .append(dispatchers[1])\n-                                     .append(dispatchers[2])\n-                                     .append(dispatchers[4])\n-                                     .append(dispatchers[6])\n-                                     .append(dispatchers[10])\n-                                     .append(dispatchers[11]));\n+                                 eventDispatchTree.createTree()\n+                                .append(dispatchers[9])\n+                                .append(dispatchers[0])\n+                                .append(dispatchers[1])\n+                                .append(dispatchers[2])\n+                                .append(dispatchers[4])\n+                                .append(dispatchers[6])\n+                                .append(dispatchers[10])\n+                                .append(dispatchers[11]));\n@@ -144,1 +145,1 @@\n-        Assert.assertEquals(\n+        assertEquals(\n@@ -146,2 +147,2 @@\n-                    + \"(7->(10),8->(10))))))),\"\n-                    + \"0->(1->(2->(4->(6->(10->(11)))))))\",\n+                        + \"(7->(10),8->(10))))))),\"\n+                        + \"0->(1->(2->(4->(6->(10->(11)))))))\",\n@@ -166,2 +167,2 @@\n-                    eventDispatchTree.createTree().append(dispatchers[2])\n-                                                  .append(dispatchers[4]));\n+                        eventDispatchTree.createTree().append(dispatchers[2])\n+                                .append(dispatchers[4]));\n@@ -171,3 +172,3 @@\n-                    eventDispatchTree.createTree().append(dispatchers[2])\n-                                                  .append(dispatchers[5])\n-                                                  .append(dispatchers[7]));\n+                        eventDispatchTree.createTree().append(dispatchers[2])\n+                                .append(dispatchers[5])\n+                                .append(dispatchers[7]));\n@@ -177,2 +178,2 @@\n-                    eventDispatchTree.createTree().append(dispatchers[3])\n-                                                  .append(dispatchers[6]));\n+                        eventDispatchTree.createTree().append(dispatchers[3])\n+                                .append(dispatchers[6]));\n@@ -222,1 +223,1 @@\n-            Assert.assertEquals(\n+            assertEquals(\n@@ -232,1 +233,1 @@\n-            Assert.assertEquals(\n+            assertEquals(\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/event\/EventDispatchTreeTest.java","additions":59,"deletions":58,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -28,3 +28,3 @@\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -34,1 +34,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -47,1 +47,1 @@\n-    @Before\n+    @BeforeEach\n@@ -166,1 +166,1 @@\n-        assertEquals(message, expected, received.getValue());\n+        assertEquals(expected, received.getValue(), message);\n@@ -168,1 +168,1 @@\n-            assertSame(\"received event\", sent, received);\n+            assertSame(sent, received, \"received event\");\n@@ -170,1 +170,1 @@\n-            assertNotSame(\"received event\", sent, received);\n+            assertNotSame(sent, received, \"received event\");\n@@ -178,4 +178,4 @@\n-                                      .append(eventHandlerManager)\n-                                      .append(new EventChangingDispatcher(\n-                                                      Operation.add(4),\n-                                                      Operation.div(3)));\n+                        .append(eventHandlerManager)\n+                        .append(new EventChangingDispatcher(\n+                                Operation.add(4),\n+                                Operation.div(3)));\n@@ -186,2 +186,2 @@\n-                                          new ValueEvent(2));\n-        Assert.assertEquals(2, valueEvent.getValue());\n+                new ValueEvent(2));\n+        assertEquals(2, valueEvent.getValue());\n@@ -190,2 +190,2 @@\n-                                          new ValueEvent(5));\n-        Assert.assertEquals(3, valueEvent.getValue());\n+                new ValueEvent(5));\n+        assertEquals(3, valueEvent.getValue());\n@@ -221,1 +221,1 @@\n-        Assert.assertEquals(0, emptyEventCountingHandler.getEventCount());\n+        assertEquals(0, emptyEventCountingHandler.getEventCount());\n@@ -223,1 +223,1 @@\n-        Assert.assertEquals(1, emptyEventCountingHandler.getEventCount());\n+        assertEquals(1, emptyEventCountingHandler.getEventCount());\n@@ -225,1 +225,1 @@\n-        Assert.assertEquals(2, emptyEventCountingHandler.getEventCount());\n+        assertEquals(2, emptyEventCountingHandler.getEventCount());\n@@ -285,1 +285,1 @@\n-        Assert.assertEquals(0, emptyEventCountingHandler.getEventCount());\n+        assertEquals(0, emptyEventCountingHandler.getEventCount());\n@@ -287,1 +287,1 @@\n-        Assert.assertEquals(1, emptyEventCountingHandler.getEventCount());\n+        assertEquals(1, emptyEventCountingHandler.getEventCount());\n@@ -289,1 +289,1 @@\n-        Assert.assertEquals(2, emptyEventCountingHandler.getEventCount());\n+        assertEquals(2, emptyEventCountingHandler.getEventCount());\n@@ -328,1 +328,1 @@\n-        Assert.assertEquals(0, emptyEventCountingHandler.getEventCount());\n+        assertEquals(0, emptyEventCountingHandler.getEventCount());\n@@ -330,1 +330,1 @@\n-        Assert.assertEquals(1, emptyEventCountingHandler.getEventCount());\n+        assertEquals(1, emptyEventCountingHandler.getEventCount());\n@@ -332,1 +332,1 @@\n-        Assert.assertEquals(2, emptyEventCountingHandler.getEventCount());\n+        assertEquals(2, emptyEventCountingHandler.getEventCount());\n@@ -426,4 +426,4 @@\n-                                      .append(eventHandlerManager)\n-                                      .append(new EventChangingDispatcher(\n-                                                      Operation.add(4),\n-                                                      Operation.div(3)));\n+                        .append(eventHandlerManager)\n+                        .append(new EventChangingDispatcher(\n+                                Operation.add(4),\n+                                Operation.div(3)));\n@@ -444,2 +444,2 @@\n-                                          new ValueEvent(35));\n-        Assert.assertEquals(16, valueEvent.getValue());\n+                new ValueEvent(35));\n+        assertEquals(16, valueEvent.getValue());\n@@ -478,5 +478,5 @@\n-        Assert.assertEquals(5, rootEventCounter.getEventCount());\n-        Assert.assertEquals(3, valueEventCounter.getEventCount());\n-        Assert.assertEquals(1, valueAEventCounter.getEventCount());\n-        Assert.assertEquals(1, valueBEventCounter.getEventCount());\n-        Assert.assertEquals(2, emptyEventCounter.getEventCount());\n+        assertEquals(5, rootEventCounter.getEventCount());\n+        assertEquals(3, valueEventCounter.getEventCount());\n+        assertEquals(1, valueAEventCounter.getEventCount());\n+        assertEquals(1, valueBEventCounter.getEventCount());\n+        assertEquals(2, emptyEventCounter.getEventCount());\n@@ -515,5 +515,5 @@\n-        Assert.assertEquals(5, rootEventCounter.getEventCount());\n-        Assert.assertEquals(3, valueEventCounter.getEventCount());\n-        Assert.assertEquals(1, valueAEventCounter.getEventCount());\n-        Assert.assertEquals(1, valueBEventCounter.getEventCount());\n-        Assert.assertEquals(2, emptyEventCounter.getEventCount());\n+        assertEquals(5, rootEventCounter.getEventCount());\n+        assertEquals(3, valueEventCounter.getEventCount());\n+        assertEquals(1, valueAEventCounter.getEventCount());\n+        assertEquals(1, valueBEventCounter.getEventCount());\n+        assertEquals(2, emptyEventCounter.getEventCount());\n@@ -528,2 +528,2 @@\n-                                      .append(eventHandlerManager)\n-                                      .append(eventCountingDispatcher);\n+                        .append(eventHandlerManager)\n+                        .append(eventCountingDispatcher);\n@@ -544,3 +544,3 @@\n-        Assert.assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n-        Assert.assertEquals(1, eventCountingFilter.getEventCount());\n-        Assert.assertEquals(\n+        assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n+        assertEquals(1, eventCountingFilter.getEventCount());\n+        assertEquals(\n@@ -548,1 +548,1 @@\n-        Assert.assertEquals(1, eventCountingHandler.getEventCount());\n+        assertEquals(1, eventCountingHandler.getEventCount());\n@@ -559,3 +559,3 @@\n-        Assert.assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n-        Assert.assertEquals(2, eventCountingFilter.getEventCount());\n-        Assert.assertEquals(\n+        assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n+        assertEquals(2, eventCountingFilter.getEventCount());\n+        assertEquals(\n@@ -563,1 +563,1 @@\n-        Assert.assertEquals(2, eventCountingHandler.getEventCount());\n+        assertEquals(2, eventCountingHandler.getEventCount());\n@@ -572,2 +572,2 @@\n-                                      .append(eventHandlerManager)\n-                                      .append(eventCountingDispatcher);\n+                        .append(eventHandlerManager)\n+                        .append(eventCountingDispatcher);\n@@ -588,3 +588,3 @@\n-        Assert.assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n-        Assert.assertEquals(1, eventCountingFilter.getEventCount());\n-        Assert.assertEquals(\n+        assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n+        assertEquals(1, eventCountingFilter.getEventCount());\n+        assertEquals(\n@@ -592,1 +592,1 @@\n-        Assert.assertEquals(0, eventCountingHandler.getEventCount());\n+        assertEquals(0, eventCountingHandler.getEventCount());\n@@ -601,3 +601,3 @@\n-        Assert.assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n-        Assert.assertEquals(2, eventCountingFilter.getEventCount());\n-        Assert.assertEquals(\n+        assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n+        assertEquals(2, eventCountingFilter.getEventCount());\n+        assertEquals(\n@@ -605,1 +605,1 @@\n-        Assert.assertEquals(0, eventCountingHandler.getEventCount());\n+        assertEquals(0, eventCountingHandler.getEventCount());\n@@ -608,1 +608,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -610,4 +610,7 @@\n-        eventHandlerManager.addEventHandler(\n-                null,\n-                event -> {\n-                });\n+        assertThrows(NullPointerException.class, () -> {\n+                    eventHandlerManager.addEventHandler(\n+                            null,\n+                            event -> {\n+                            });\n+                }\n+        );\n@@ -616,1 +619,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -618,1 +621,3 @@\n-        eventHandlerManager.addEventHandler(Event.ANY, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            eventHandlerManager.addEventHandler(Event.ANY, null);\n+        });\n@@ -621,1 +626,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -623,4 +629,7 @@\n-        eventHandlerManager.removeEventHandler(\n-                null,\n-                event -> {\n-                });\n+        assertThrows(NullPointerException.class, () -> {\n+                    eventHandlerManager.removeEventHandler(\n+                            null,\n+                            event -> {\n+                            });\n+                }\n+        );\n@@ -629,1 +638,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -631,1 +640,3 @@\n-        eventHandlerManager.removeEventHandler(Event.ANY, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            eventHandlerManager.removeEventHandler(Event.ANY, null);\n+        });\n@@ -634,1 +645,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -636,4 +648,7 @@\n-        eventHandlerManager.addEventFilter(\n-                null,\n-                event -> {\n-                });\n+        assertThrows(NullPointerException.class, () -> {\n+                    eventHandlerManager.addEventFilter(\n+                            null,\n+                            event -> {\n+                            });\n+                }\n+        );\n@@ -642,1 +657,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -644,1 +659,3 @@\n-        eventHandlerManager.addEventFilter(Event.ANY, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            eventHandlerManager.addEventFilter(Event.ANY, null);\n+        });\n@@ -647,1 +664,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -649,4 +667,7 @@\n-        eventHandlerManager.removeEventHandler(\n-                null,\n-                event -> {\n-                });\n+        assertThrows(NullPointerException.class, () -> {\n+                    eventHandlerManager.removeEventHandler(\n+                            null,\n+                            event -> {\n+                            });\n+                }\n+        );\n@@ -655,1 +676,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -657,1 +678,3 @@\n-        eventHandlerManager.removeEventHandler(Event.ANY, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            eventHandlerManager.removeEventHandler(Event.ANY, null);\n+        });\n@@ -660,1 +683,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -662,4 +686,7 @@\n-        eventHandlerManager.setEventHandler(\n-                null,\n-                event -> {\n-                });\n+        assertThrows(NullPointerException.class, () -> {\n+                    eventHandlerManager.setEventHandler(\n+                            null,\n+                            event -> {\n+                            });\n+                }\n+        );\n@@ -675,3 +702,3 @@\n-                                     new ValueEvent(eventType, initialValue),\n-                                     StubEventDispatchChain.EMPTY_CHAIN);\n-        Assert.assertEquals(calculatedValue, valueEvent.getValue());\n+                        new ValueEvent(eventType, initialValue),\n+                        StubEventDispatchChain.EMPTY_CHAIN);\n+        assertEquals(calculatedValue, valueEvent.getValue());\n@@ -683,2 +710,2 @@\n-                       new EmptyEvent(),\n-                       StubEventDispatchChain.EMPTY_CHAIN);\n+                new EmptyEvent(),\n+                StubEventDispatchChain.EMPTY_CHAIN);\n@@ -691,2 +718,2 @@\n-                       new ValueEvent(eventType, 0),\n-                       StubEventDispatchChain.EMPTY_CHAIN);\n+                new ValueEvent(eventType, 0),\n+                StubEventDispatchChain.EMPTY_CHAIN);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/event\/EventHandlerManagerTest.java","additions":128,"deletions":101,"binary":false,"changes":229,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -32,1 +32,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/runtime\/ModuleTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,3 +32,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -110,1 +110,1 @@\n-    @Before\n+    @BeforeEach\n@@ -183,1 +183,1 @@\n-        assertTrue(message, version.matches(SVSTR));\n+        assertTrue(version.matches(SVSTR), message);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/runtime\/VersionInfoTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/InvalidationListenerMock.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,3 +30,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -36,1 +36,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -40,1 +41,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -42,1 +43,3 @@\n-        new WeakInvalidationListener(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            new WeakInvalidationListener(null);\n+        });\n@@ -45,0 +48,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/WeakInvalidationListenerTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -31,3 +31,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -40,2 +40,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -54,1 +55,1 @@\n-    @Before\n+    @BeforeEach\n@@ -204,1 +205,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -206,3 +207,5 @@\n-        final BooleanProperty v = new SimpleBooleanProperty(true);\n-        property.bind(v);\n-        property.set(true);\n+        assertThrows(RuntimeException.class, () -> {\n+            final BooleanProperty v = new SimpleBooleanProperty(true);\n+            property.bind(v);\n+            property.set(true);\n+        });\n@@ -211,0 +214,1 @@\n+\n@@ -351,1 +355,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -353,1 +357,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -356,0 +362,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/BooleanPropertyBaseTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -50,1 +50,1 @@\n-    @BeforeClass\n+    @BeforeAll\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/BooleanPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,3 +31,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -40,2 +40,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -55,1 +56,1 @@\n-    @Before\n+    @BeforeEach\n@@ -205,1 +206,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -207,3 +208,5 @@\n-        final DoubleProperty v = new SimpleDoubleProperty(Math.PI);\n-        property.bind(v);\n-        property.set(Math.PI);\n+        assertThrows(RuntimeException.class, () -> {\n+            final DoubleProperty v = new SimpleDoubleProperty(Math.PI);\n+            property.bind(v);\n+            property.set(Math.PI);\n+        });\n@@ -212,0 +215,1 @@\n+\n@@ -356,1 +360,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -358,1 +362,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -361,0 +367,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/DoublePropertyBaseTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -51,1 +51,1 @@\n-    @BeforeClass\n+    @BeforeAll\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/DoublePropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,3 +31,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -40,2 +40,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -57,1 +58,1 @@\n-    @Before\n+    @BeforeEach\n@@ -207,1 +208,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -209,3 +210,5 @@\n-        final FloatProperty v = new SimpleFloatProperty(PI);\n-        property.bind(v);\n-        property.set(PI);\n+        assertThrows(RuntimeException.class, () -> {\n+            final FloatProperty v = new SimpleFloatProperty(PI);\n+            property.bind(v);\n+            property.set(PI);\n+        });\n@@ -214,0 +217,1 @@\n+\n@@ -360,1 +364,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -362,1 +366,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -365,0 +371,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/FloatPropertyBaseTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -51,1 +51,1 @@\n-    @BeforeClass\n+    @BeforeAll\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/FloatPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,3 +31,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -40,2 +41,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -56,1 +57,1 @@\n-    @Before\n+    @BeforeEach\n@@ -206,1 +207,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -208,3 +209,5 @@\n-        final IntegerProperty v = new SimpleIntegerProperty(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final IntegerProperty v = new SimpleIntegerProperty(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -213,0 +216,1 @@\n+\n@@ -351,1 +355,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -353,1 +357,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -356,0 +362,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/IntegerPropertyBaseTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -50,1 +50,1 @@\n-    @BeforeClass\n+    @BeforeAll\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/IntegerPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -64,1 +64,1 @@\n-    @Before\n+    @BeforeEach\n@@ -479,1 +479,1 @@\n-    @Test(expected = RuntimeException.class)\n+    @Test\n@@ -481,3 +481,5 @@\n-        final ListProperty<Object> v = new SimpleListProperty<>(VALUE_1a);\n-        property.bind(v);\n-        property.set(VALUE_1a);\n+        assertThrows(RuntimeException.class, () -> {\n+            final ListProperty<Object> v = new SimpleListProperty<>(VALUE_1a);\n+            property.bind(v);\n+            property.set(VALUE_1a);\n+        });\n@@ -486,0 +488,1 @@\n+\n@@ -585,1 +588,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -587,1 +590,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -590,0 +595,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ListPropertyBaseTest.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -41,2 +41,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ListPropertyTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,3 +31,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -40,2 +41,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -56,1 +57,1 @@\n-    @Before\n+    @BeforeEach\n@@ -206,1 +207,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -208,3 +209,5 @@\n-        final LongProperty v = new SimpleLongProperty(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final LongProperty v = new SimpleLongProperty(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -213,0 +216,1 @@\n+\n@@ -351,1 +355,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -353,1 +357,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -356,0 +362,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/LongPropertyBaseTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -50,1 +50,1 @@\n-    @BeforeClass\n+    @BeforeAll\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/LongPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -44,1 +44,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -84,1 +84,1 @@\n-    @Before\n+    @BeforeEach\n@@ -502,1 +502,1 @@\n-    @Test(expected = RuntimeException.class)\n+    @Test\n@@ -504,3 +504,5 @@\n-        final MapProperty<Object, Object> v = new SimpleMapProperty<>(VALUE_1a);\n-        property.bind(v);\n-        property.set(VALUE_1a);\n+        assertThrows(RuntimeException.class, () -> {\n+            final MapProperty<Object, Object> v = new SimpleMapProperty<>(VALUE_1a);\n+            property.bind(v);\n+            property.set(VALUE_1a);\n+        });\n@@ -509,0 +511,1 @@\n+\n@@ -608,1 +611,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -610,1 +613,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -613,0 +618,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/MapPropertyBaseTest.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -43,2 +43,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/MapPropertyTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,3 +31,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -39,2 +40,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -57,1 +58,1 @@\n-    @Before\n+    @BeforeEach\n@@ -207,1 +208,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -209,3 +210,5 @@\n-        final ObjectProperty<Object> v = new SimpleObjectProperty<>(VALUE_1a);\n-        property.bind(v);\n-        property.set(VALUE_1a);\n+        assertThrows(RuntimeException.class, () -> {\n+            final ObjectProperty<Object> v = new SimpleObjectProperty<>(VALUE_1a);\n+            property.bind(v);\n+            property.set(VALUE_1a);\n+        });\n@@ -214,0 +217,1 @@\n+\n@@ -278,1 +282,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -280,1 +284,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -283,0 +289,1 @@\n+\n@@ -446,1 +453,0 @@\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ObjectPropertyBaseTest.java","additions":19,"deletions":13,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -45,1 +45,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -58,1 +58,1 @@\n-            ArrayList<WeakReference<Property<?>>> refs) {\n+                           ArrayList<WeakReference<Property<?>>> refs) {\n@@ -66,1 +66,1 @@\n-        assertEquals(msg, numExpected, count);\n+        assertEquals(numExpected, count, msg);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ObjectPropertyLeakTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -37,1 +37,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ObjectPropertyTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -31,2 +31,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,1 @@\n-    @Before\n+    @BeforeEach\n@@ -73,1 +73,1 @@\n-    @Test(expected=IllegalStateException.class)\n+    @Test\n@@ -75,1 +75,3 @@\n-        Person.NO_READ.get(person);\n+        assertThrows(IllegalStateException.class, () -> {\n+            Person.NO_READ.get(person);\n+        });\n@@ -78,1 +80,2 @@\n-    @Test(expected=IllegalStateException.class)\n+\n+    @Test\n@@ -80,1 +83,3 @@\n-        Person.NO_READ.getProperty(person);\n+        assertThrows(IllegalStateException.class, () -> {\n+            Person.NO_READ.getProperty(person);\n+        });\n@@ -83,0 +88,1 @@\n+\n@@ -99,1 +105,1 @@\n-    @Test(expected=IllegalStateException.class)\n+    @Test\n@@ -101,1 +107,3 @@\n-        Person.NO_WRITE.set(person, 1);\n+        assertThrows(IllegalStateException.class, () -> {\n+            Person.NO_WRITE.set(person, 1);\n+        });\n@@ -104,0 +112,1 @@\n+\n@@ -111,1 +120,1 @@\n-    @Test(expected=IllegalStateException.class)\n+    @Test\n@@ -113,1 +122,3 @@\n-        Person.NO_READ_WRITE.get(person);\n+        assertThrows(IllegalStateException.class, () -> {\n+            Person.NO_READ_WRITE.get(person);\n+        });\n@@ -116,1 +127,2 @@\n-    @Test(expected=IllegalStateException.class)\n+\n+    @Test\n@@ -118,1 +130,3 @@\n-        Person.NO_READ_WRITE.set(person, 1);\n+        assertThrows(IllegalStateException.class, () -> {\n+            Person.NO_READ_WRITE.set(person, 1);\n+        });\n@@ -120,1 +134,0 @@\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/PropertyReferenceTest.java","additions":28,"deletions":15,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -35,1 +35,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -42,1 +42,1 @@\n-    @Before public void setUp() {\n+    @BeforeEach public void setUp() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/PropertyReferenceWithInterfacesTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyBooleanPropertyBaseTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -35,2 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,1 @@\n-    @Before\n+    @BeforeEach\n@@ -127,1 +127,0 @@\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyBooleanPropertyTest.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,3 +33,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -42,2 +43,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -59,1 +60,1 @@\n-    @Before\n+    @BeforeEach\n@@ -322,1 +323,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -324,3 +325,5 @@\n-        final BooleanProperty v = new SimpleBooleanProperty(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final BooleanProperty v = new SimpleBooleanProperty(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -329,0 +332,1 @@\n+\n@@ -553,1 +557,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -555,1 +559,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -558,0 +564,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyBooleanWrapperTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n@@ -106,1 +106,0 @@\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyDoublePropertyBaseTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -35,2 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,1 @@\n-    @Before\n+    @BeforeEach\n@@ -127,1 +127,0 @@\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyDoublePropertyTest.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,3 +33,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -42,2 +43,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -60,1 +61,1 @@\n-    @Before\n+    @BeforeEach\n@@ -323,1 +324,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -325,3 +326,5 @@\n-        final DoubleProperty v = new SimpleDoubleProperty(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final DoubleProperty v = new SimpleDoubleProperty(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -330,0 +333,1 @@\n+\n@@ -554,1 +558,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -556,1 +560,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -559,0 +565,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyDoubleWrapperTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n@@ -106,1 +106,0 @@\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyFloatPropertyBaseTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -35,2 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,1 @@\n-    @Before\n+    @BeforeEach\n@@ -127,1 +127,0 @@\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyFloatPropertyTest.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,3 +33,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -42,2 +43,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -60,1 +61,1 @@\n-    @Before\n+    @BeforeEach\n@@ -323,1 +324,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -325,3 +326,5 @@\n-        final FloatProperty v = new SimpleFloatProperty(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final FloatProperty v = new SimpleFloatProperty(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -330,0 +333,1 @@\n+\n@@ -554,1 +558,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -556,1 +560,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -559,0 +565,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyFloatWrapperTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n@@ -106,1 +106,0 @@\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyIntegerPropertyBaseTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -35,2 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyIntegerPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,3 +33,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -42,2 +43,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -59,1 +60,1 @@\n-    @Before\n+    @BeforeEach\n@@ -322,1 +323,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -324,3 +325,5 @@\n-        final IntegerProperty v = new SimpleIntegerProperty(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final IntegerProperty v = new SimpleIntegerProperty(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -329,0 +332,1 @@\n+\n@@ -553,1 +557,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -555,1 +559,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -558,0 +564,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyIntegerWrapperTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -52,1 +52,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyListPropertyBaseTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -38,1 +38,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -44,1 +44,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyListPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -59,1 +59,1 @@\n-    @Before\n+    @BeforeEach\n@@ -322,1 +322,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -324,3 +324,5 @@\n-        final ListProperty<Object> v = new SimpleListProperty<>(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final ListProperty<Object> v = new SimpleListProperty<>(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -329,0 +331,1 @@\n+\n@@ -553,1 +556,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -555,1 +558,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -558,0 +563,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyListWrapperTest.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyLongPropertyBaseTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -36,2 +36,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyLongPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,3 +33,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -42,2 +43,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -59,1 +60,1 @@\n-    @Before\n+    @BeforeEach\n@@ -322,1 +323,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -324,3 +325,5 @@\n-        final LongProperty v = new SimpleLongProperty(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final LongProperty v = new SimpleLongProperty(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -329,0 +332,1 @@\n+\n@@ -553,1 +557,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -555,1 +559,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -558,0 +564,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyLongWrapperTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -54,1 +54,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyMapPropertyBaseTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -38,1 +38,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -44,1 +44,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyMapPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -59,1 +59,1 @@\n-    @Before\n+    @BeforeEach\n@@ -322,1 +322,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -324,3 +324,5 @@\n-        final MapProperty<Object, Object> v = new SimpleMapProperty<>(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final MapProperty<Object, Object> v = new SimpleMapProperty<>(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -329,0 +331,1 @@\n+\n@@ -553,1 +556,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -555,1 +558,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -558,0 +563,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyMapWrapperTest.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -47,1 +47,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyObjectPropertyBaseTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,2 +33,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyObjectPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,3 +33,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -41,2 +42,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -58,1 +59,1 @@\n-    @Before\n+    @BeforeEach\n@@ -321,1 +322,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -323,3 +324,5 @@\n-        final ObjectProperty<Object> v = new SimpleObjectProperty<>(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final ObjectProperty<Object> v = new SimpleObjectProperty<>(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -328,0 +331,1 @@\n+\n@@ -552,1 +556,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -554,1 +558,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -557,0 +563,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyObjectWrapperTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -52,1 +52,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlySetPropertyBaseTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -38,1 +38,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -44,1 +44,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlySetPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -57,1 +57,1 @@\n-    @Before\n+    @BeforeEach\n@@ -320,1 +320,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -322,3 +322,5 @@\n-        final SetProperty<Object> v = new SimpleSetProperty<>(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final SetProperty<Object> v = new SimpleSetProperty<>(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -327,0 +329,1 @@\n+\n@@ -551,1 +554,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -553,1 +556,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -556,0 +561,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlySetWrapperTest.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyStringPropertyBaseTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,2 +33,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyStringPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,3 +33,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -42,2 +43,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -59,1 +60,1 @@\n-    @Before\n+    @BeforeEach\n@@ -322,1 +323,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -324,3 +325,5 @@\n-        final StringProperty v = new SimpleStringProperty(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final StringProperty v = new SimpleStringProperty(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -329,0 +332,1 @@\n+\n@@ -553,1 +557,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -555,1 +559,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -558,0 +564,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyStringWrapperTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -64,1 +64,1 @@\n-    @Before\n+    @BeforeEach\n@@ -438,1 +438,1 @@\n-    @Test(expected = RuntimeException.class)\n+    @Test\n@@ -440,3 +440,5 @@\n-        final SetProperty<Object> v = new SimpleSetProperty<>(VALUE_1a);\n-        property.bind(v);\n-        property.set(VALUE_1a);\n+        assertThrows(RuntimeException.class, () -> {\n+            final SetProperty<Object> v = new SimpleSetProperty<>(VALUE_1a);\n+            property.bind(v);\n+            property.set(VALUE_1a);\n+        });\n@@ -445,0 +447,1 @@\n+\n@@ -544,1 +547,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -546,1 +549,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -549,0 +554,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SetPropertyBaseTest.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -41,2 +41,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SetPropertyTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,1 +33,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SimpleBooleanPropertyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,1 +33,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SimpleDoublePropertyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,1 +33,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SimpleFloatPropertyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,1 +33,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SimpleIntegerPropertyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SimpleListPropertyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,1 +33,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SimpleLongPropertyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,1 +33,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SimpleObjectPropertyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,1 +33,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SimpleStringPropertyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,3 +31,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -39,2 +40,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -57,1 +58,1 @@\n-    @Before\n+    @BeforeEach\n@@ -206,1 +207,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -208,3 +209,5 @@\n-        final StringProperty v = new SimpleStringProperty(VALUE_1a);\n-        property.bind(v);\n-        property.set(VALUE_1a);\n+        assertThrows(RuntimeException.class, () -> {\n+            final StringProperty v = new SimpleStringProperty(VALUE_1a);\n+            property.bind(v);\n+            property.set(VALUE_1a);\n+        });\n@@ -213,0 +216,1 @@\n+\n@@ -277,1 +281,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -279,1 +283,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -282,0 +288,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/StringPropertyBaseTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -37,1 +37,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/StringPropertyTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanBooleanPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanBooleanProperty_prim_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanDoublePropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanDoubleProperty_prim_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanFloatPropertyBuilderaTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanFloatProperty_prim_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanIntegerPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanIntegerProperty_prim_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanLongPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanLongProperty_prim_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanObjectPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanStringPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanBooleanPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanBooleanProperty_prim_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanDoublePropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanDoubleProperty_prim_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanFloatPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanFloatProperty_prim_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanIntegerPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanIntegerProperty_prim_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanLongPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanLongProperty_prim_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanObjectPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -44,1 +44,1 @@\n-*\/\n+ *\/\n@@ -54,1 +54,1 @@\n-    @Before\n+    @BeforeEach\n@@ -64,1 +64,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -66,5 +66,7 @@\n-        try {\n-            this.property = extractProperty(null);\n-        } catch (NoSuchMethodException e) {\n-            fail();\n-        }\n+        assertThrows(NullPointerException.class, () -> {\n+            try {\n+                this.property = extractProperty(null);\n+            } catch (NoSuchMethodException e) {\n+                fail();\n+            }\n+        });\n@@ -91,1 +93,1 @@\n-    @Test(expected = UndeclaredThrowableException.class)\n+    @Test\n@@ -93,2 +95,4 @@\n-        bean.setFailureMode(true);\n-        property.getValue();\n+        assertThrows(UndeclaredThrowableException.class, () -> {\n+            bean.setFailureMode(true);\n+            property.getValue();\n+        });\n@@ -97,0 +101,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanPropertyTestBase.java","additions":19,"deletions":14,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanStringPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/ChangeListenerMock.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,2 +34,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -47,1 +48,1 @@\n-    @Before\n+    @BeforeEach\n@@ -181,1 +182,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -183,1 +184,3 @@\n-        valueModel.addListener((InvalidationListener)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            valueModel.addListener((InvalidationListener)null);\n+        });\n@@ -186,1 +189,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -188,1 +192,3 @@\n-        valueModel.addListener((ChangeListener<Object>)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            valueModel.addListener((ChangeListener<Object>)null);\n+        });\n@@ -191,1 +197,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -193,1 +200,3 @@\n-        valueModel.removeListener((InvalidationListener)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            valueModel.removeListener((InvalidationListener)null);\n+        });\n@@ -196,1 +205,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -198,1 +208,3 @@\n-        valueModel.removeListener((ChangeListener<Object>)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            valueModel.removeListener((ChangeListener<Object>)null);\n+        });\n@@ -201,0 +213,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/ObservableValueBaseTest.java","additions":24,"deletions":11,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/ObservableValueFluentBindingsTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -34,1 +34,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -38,1 +38,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -40,1 +40,3 @@\n-        new WeakChangeListener<>(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            new WeakChangeListener<>(null);\n+        });\n@@ -43,0 +45,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/WeakChangeListenerTest.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -36,1 +36,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -40,1 +40,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingToStringTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,3 +38,3 @@\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -59,1 +59,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -64,1 +64,1 @@\n-    @Before\n+    @BeforeEach\n@@ -90,1 +90,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -92,1 +92,3 @@\n-        Bindings.size((ObservableList<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.size((ObservableList<Object>) null);\n+        });\n@@ -95,0 +97,1 @@\n+\n@@ -113,1 +116,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -115,1 +118,3 @@\n-        Bindings.isEmpty((ObservableList<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.isEmpty((ObservableList<Object>) null);\n+        });\n@@ -118,0 +123,1 @@\n+\n@@ -136,1 +142,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -138,1 +144,3 @@\n-        Bindings.isNotEmpty((ObservableList<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.isNotEmpty((ObservableList<Object>) null);\n+        });\n@@ -141,0 +149,1 @@\n+\n@@ -192,1 +201,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -194,1 +203,3 @@\n-        Bindings.valueAt(null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.valueAt(null, 0);\n+        });\n@@ -197,1 +208,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -199,1 +211,3 @@\n-        Bindings.valueAt(property, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.valueAt(property, -1);\n+        });\n@@ -202,0 +216,1 @@\n+\n@@ -265,1 +280,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -267,1 +282,3 @@\n-        Bindings.valueAt((ObservableList<Object>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.valueAt((ObservableList<Object>)null, index);\n+        });\n@@ -270,1 +287,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -272,1 +290,3 @@\n-        Bindings.valueAt(property, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.valueAt(property, null);\n+        });\n@@ -275,0 +295,1 @@\n+\n@@ -333,1 +354,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -335,1 +356,3 @@\n-        Bindings.booleanValueAt(null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.booleanValueAt(null, 0);\n+        });\n@@ -338,1 +361,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -340,2 +364,4 @@\n-        final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n-        Bindings.booleanValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n+            Bindings.booleanValueAt(localProperty, -1);\n+        });\n@@ -344,0 +370,1 @@\n+\n@@ -425,1 +452,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -427,1 +454,3 @@\n-        Bindings.booleanValueAt((ObservableList<Boolean>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.booleanValueAt((ObservableList<Boolean>)null, index);\n+        });\n@@ -430,1 +459,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -432,2 +462,4 @@\n-        final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n-        Bindings.booleanValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n+            Bindings.booleanValueAt(localProperty, null);\n+        });\n@@ -436,0 +468,1 @@\n+\n@@ -494,1 +527,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -496,1 +529,3 @@\n-        Bindings.doubleValueAt(null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.doubleValueAt(null, 0);\n+        });\n@@ -499,1 +534,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -501,2 +537,4 @@\n-        final ListProperty<Double> localProperty = new SimpleListProperty<>();\n-        Bindings.doubleValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<Double> localProperty = new SimpleListProperty<>();\n+            Bindings.doubleValueAt(localProperty, -1);\n+        });\n@@ -505,0 +543,1 @@\n+\n@@ -586,1 +625,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -588,1 +627,3 @@\n-        Bindings.doubleValueAt((ObservableList<Double>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.doubleValueAt((ObservableList<Double>)null, index);\n+        });\n@@ -591,1 +632,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -593,2 +635,4 @@\n-        final ListProperty<Double> localProperty = new SimpleListProperty<>();\n-        Bindings.doubleValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<Double> localProperty = new SimpleListProperty<>();\n+            Bindings.doubleValueAt(localProperty, null);\n+        });\n@@ -597,0 +641,1 @@\n+\n@@ -655,1 +700,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -657,1 +702,3 @@\n-        Bindings.floatValueAt((ObservableFloatArray) null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.floatValueAt((ObservableFloatArray) null, 0);\n+        });\n@@ -660,1 +707,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -662,2 +710,4 @@\n-        final ListProperty<Float> localProperty = new SimpleListProperty<>();\n-        Bindings.floatValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<Float> localProperty = new SimpleListProperty<>();\n+            Bindings.floatValueAt(localProperty, -1);\n+        });\n@@ -666,0 +716,1 @@\n+\n@@ -747,1 +798,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -749,1 +800,3 @@\n-        Bindings.floatValueAt((ObservableList<Float>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.floatValueAt((ObservableList<Float>)null, index);\n+        });\n@@ -752,1 +805,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -754,2 +808,4 @@\n-        final ListProperty<Float> localProperty = new SimpleListProperty<>();\n-        Bindings.floatValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<Float> localProperty = new SimpleListProperty<>();\n+            Bindings.floatValueAt(localProperty, null);\n+        });\n@@ -758,0 +814,1 @@\n+\n@@ -816,1 +873,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -818,1 +875,3 @@\n-        Bindings.integerValueAt((ObservableIntegerArray) null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.integerValueAt((ObservableIntegerArray) null, 0);\n+        });\n@@ -821,1 +880,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -823,2 +883,4 @@\n-        final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n-        Bindings.integerValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n+            Bindings.integerValueAt(localProperty, -1);\n+        });\n@@ -827,0 +889,1 @@\n+\n@@ -908,1 +971,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -910,1 +973,3 @@\n-        Bindings.integerValueAt((ObservableList<Integer>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.integerValueAt((ObservableList<Integer>)null, index);\n+        });\n@@ -913,1 +978,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -915,2 +981,4 @@\n-        final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n-        Bindings.integerValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n+            Bindings.integerValueAt(localProperty, null);\n+        });\n@@ -919,0 +987,1 @@\n+\n@@ -977,1 +1046,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -979,1 +1048,3 @@\n-        Bindings.longValueAt(null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.longValueAt(null, 0);\n+        });\n@@ -982,1 +1053,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -984,2 +1056,4 @@\n-        final ListProperty<Long> localProperty = new SimpleListProperty<>();\n-        Bindings.longValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<Long> localProperty = new SimpleListProperty<>();\n+            Bindings.longValueAt(localProperty, -1);\n+        });\n@@ -988,0 +1062,1 @@\n+\n@@ -1069,1 +1144,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -1071,1 +1146,3 @@\n-        Bindings.longValueAt((ObservableList<Long>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.longValueAt((ObservableList<Long>)null, index);\n+        });\n@@ -1074,1 +1151,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -1076,2 +1154,4 @@\n-        final ListProperty<Long> localProperty = new SimpleListProperty<>();\n-        Bindings.longValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<Long> localProperty = new SimpleListProperty<>();\n+            Bindings.longValueAt(localProperty, null);\n+        });\n@@ -1080,0 +1160,1 @@\n+\n@@ -1138,1 +1219,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -1140,1 +1221,3 @@\n-        Bindings.stringValueAt(null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.stringValueAt(null, 0);\n+        });\n@@ -1143,1 +1226,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -1145,2 +1229,4 @@\n-        final ListProperty<String> localProperty = new SimpleListProperty<>();\n-        Bindings.stringValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<String> localProperty = new SimpleListProperty<>();\n+            Bindings.stringValueAt(localProperty, -1);\n+        });\n@@ -1149,0 +1235,1 @@\n+\n@@ -1219,1 +1306,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -1221,1 +1308,3 @@\n-        Bindings.stringValueAt((ObservableList<String>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.stringValueAt((ObservableList<String>)null, index);\n+        });\n@@ -1224,1 +1313,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -1226,2 +1316,4 @@\n-        final ListProperty<String> localProperty = new SimpleListProperty<>();\n-        Bindings.stringValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<String> localProperty = new SimpleListProperty<>();\n+            Bindings.stringValueAt(localProperty, null);\n+        });\n@@ -1229,2 +1321,0 @@\n-\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsArrayTest.java","additions":172,"deletions":82,"binary":false,"changes":254,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -38,2 +38,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -47,1 +47,1 @@\n-    @Before\n+    @BeforeEach\n@@ -139,1 +139,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -141,1 +141,3 @@\n-        Bindings.and(null, op1);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.and(null, op1);\n+        });\n@@ -144,1 +146,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -146,1 +149,3 @@\n-        Bindings.and(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.and(op1, null);\n+        });\n@@ -149,0 +154,1 @@\n+\n@@ -234,1 +240,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -236,1 +242,3 @@\n-        Bindings.or(null, op1);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.or(null, op1);\n+        });\n@@ -239,1 +247,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -241,1 +250,3 @@\n-        Bindings.or(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.or(op1, null);\n+        });\n@@ -244,0 +255,1 @@\n+\n@@ -277,1 +289,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -279,1 +291,3 @@\n-        Bindings.not(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.not(null);\n+        });\n@@ -282,0 +296,1 @@\n+\n@@ -341,1 +356,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -343,1 +358,3 @@\n-        Bindings.equal((ObservableBooleanValue)null, op1);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.equal((ObservableBooleanValue)null, op1);\n+        });\n@@ -346,1 +363,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -348,1 +366,3 @@\n-        Bindings.equal(op1, (ObservableBooleanValue)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.equal(op1, (ObservableBooleanValue)null);\n+        });\n@@ -351,0 +371,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsBooleanTest.java","additions":39,"deletions":18,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -39,2 +39,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -48,1 +49,1 @@\n-    @Before\n+    @BeforeEach\n@@ -139,1 +140,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -141,1 +142,3 @@\n-        Bindings.isNull(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.isNull(null);\n+        });\n@@ -144,1 +147,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -146,1 +150,3 @@\n-        Bindings.isNotNull(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.isNotNull(null);\n+        });\n@@ -149,0 +155,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsIsNullTest.java","additions":16,"deletions":9,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -36,3 +36,3 @@\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -57,1 +57,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -62,1 +62,1 @@\n-    @Before\n+    @BeforeEach\n@@ -88,1 +88,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -90,1 +90,3 @@\n-        Bindings.size((ObservableList<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.size((ObservableList<Object>) null);\n+        });\n@@ -93,0 +95,1 @@\n+\n@@ -111,1 +114,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -113,1 +116,3 @@\n-        Bindings.isEmpty((ObservableList<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.isEmpty((ObservableList<Object>) null);\n+        });\n@@ -116,0 +121,1 @@\n+\n@@ -134,1 +140,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -136,1 +142,3 @@\n-        Bindings.isNotEmpty((ObservableList<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.isNotEmpty((ObservableList<Object>) null);\n+        });\n@@ -139,0 +147,1 @@\n+\n@@ -190,1 +199,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -192,1 +201,3 @@\n-        Bindings.valueAt(null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.valueAt(null, 0);\n+        });\n@@ -195,1 +206,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -197,1 +209,3 @@\n-        Bindings.valueAt(property, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.valueAt(property, -1);\n+        });\n@@ -200,0 +214,1 @@\n+\n@@ -263,1 +278,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -265,1 +280,3 @@\n-        Bindings.valueAt((ObservableList<Object>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.valueAt((ObservableList<Object>)null, index);\n+        });\n@@ -268,1 +285,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -270,1 +288,3 @@\n-        Bindings.valueAt(property, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.valueAt(property, null);\n+        });\n@@ -273,0 +293,1 @@\n+\n@@ -331,1 +352,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -333,1 +354,3 @@\n-        Bindings.booleanValueAt(null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.booleanValueAt(null, 0);\n+        });\n@@ -336,1 +359,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -338,2 +362,4 @@\n-        final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n-        Bindings.booleanValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n+            Bindings.booleanValueAt(localProperty, -1);\n+        });\n@@ -342,0 +368,1 @@\n+\n@@ -423,1 +450,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -425,1 +452,3 @@\n-        Bindings.booleanValueAt((ObservableList<Boolean>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.booleanValueAt((ObservableList<Boolean>)null, index);\n+        });\n@@ -428,1 +457,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -430,2 +460,4 @@\n-        final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n-        Bindings.booleanValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n+            Bindings.booleanValueAt(localProperty, null);\n+        });\n@@ -434,0 +466,1 @@\n+\n@@ -492,1 +525,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -494,1 +527,3 @@\n-        Bindings.doubleValueAt(null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.doubleValueAt(null, 0);\n+        });\n@@ -497,1 +532,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -499,2 +535,4 @@\n-        final ListProperty<Double> localProperty = new SimpleListProperty<>();\n-        Bindings.doubleValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<Double> localProperty = new SimpleListProperty<>();\n+            Bindings.doubleValueAt(localProperty, -1);\n+        });\n@@ -503,0 +541,1 @@\n+\n@@ -584,1 +623,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -586,1 +625,3 @@\n-        Bindings.doubleValueAt((ObservableList<Double>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.doubleValueAt((ObservableList<Double>)null, index);\n+        });\n@@ -589,1 +630,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -591,2 +633,4 @@\n-        final ListProperty<Double> localProperty = new SimpleListProperty<>();\n-        Bindings.doubleValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<Double> localProperty = new SimpleListProperty<>();\n+            Bindings.doubleValueAt(localProperty, null);\n+        });\n@@ -595,0 +639,1 @@\n+\n@@ -653,1 +698,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -655,1 +700,3 @@\n-        Bindings.floatValueAt((ObservableList) null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.floatValueAt((ObservableList) null, 0);\n+        });\n@@ -658,1 +705,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -660,2 +708,4 @@\n-        final ListProperty<Float> localProperty = new SimpleListProperty<>();\n-        Bindings.floatValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<Float> localProperty = new SimpleListProperty<>();\n+            Bindings.floatValueAt(localProperty, -1);\n+        });\n@@ -664,0 +714,1 @@\n+\n@@ -745,1 +796,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -747,1 +798,3 @@\n-        Bindings.floatValueAt((ObservableList<Float>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.floatValueAt((ObservableList<Float>)null, index);\n+        });\n@@ -750,1 +803,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -752,2 +806,4 @@\n-        final ListProperty<Float> localProperty = new SimpleListProperty<>();\n-        Bindings.floatValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<Float> localProperty = new SimpleListProperty<>();\n+            Bindings.floatValueAt(localProperty, null);\n+        });\n@@ -756,0 +812,1 @@\n+\n@@ -814,1 +871,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -816,1 +873,3 @@\n-        Bindings.integerValueAt((ObservableList) null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.integerValueAt((ObservableList) null, 0);\n+        });\n@@ -819,1 +878,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -821,2 +881,4 @@\n-        final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n-        Bindings.integerValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n+            Bindings.integerValueAt(localProperty, -1);\n+        });\n@@ -825,0 +887,1 @@\n+\n@@ -906,1 +969,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -908,1 +971,3 @@\n-        Bindings.integerValueAt((ObservableList<Integer>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.integerValueAt((ObservableList<Integer>)null, index);\n+        });\n@@ -911,1 +976,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -913,2 +979,4 @@\n-        final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n-        Bindings.integerValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n+            Bindings.integerValueAt(localProperty, null);\n+        });\n@@ -917,0 +985,1 @@\n+\n@@ -975,1 +1044,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -977,1 +1046,3 @@\n-        Bindings.longValueAt(null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.longValueAt(null, 0);\n+        });\n@@ -980,1 +1051,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -982,2 +1054,4 @@\n-        final ListProperty<Long> localProperty = new SimpleListProperty<>();\n-        Bindings.longValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<Long> localProperty = new SimpleListProperty<>();\n+            Bindings.longValueAt(localProperty, -1);\n+        });\n@@ -986,0 +1060,1 @@\n+\n@@ -1067,1 +1142,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -1069,1 +1144,3 @@\n-        Bindings.longValueAt((ObservableList<Long>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.longValueAt((ObservableList<Long>)null, index);\n+        });\n@@ -1072,1 +1149,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -1074,2 +1152,4 @@\n-        final ListProperty<Long> localProperty = new SimpleListProperty<>();\n-        Bindings.longValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<Long> localProperty = new SimpleListProperty<>();\n+            Bindings.longValueAt(localProperty, null);\n+        });\n@@ -1078,0 +1158,1 @@\n+\n@@ -1136,1 +1217,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -1138,1 +1219,3 @@\n-        Bindings.stringValueAt(null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.stringValueAt(null, 0);\n+        });\n@@ -1141,1 +1224,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -1143,2 +1227,4 @@\n-        final ListProperty<String> localProperty = new SimpleListProperty<>();\n-        Bindings.stringValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<String> localProperty = new SimpleListProperty<>();\n+            Bindings.stringValueAt(localProperty, -1);\n+        });\n@@ -1147,0 +1233,1 @@\n+\n@@ -1217,1 +1304,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -1219,1 +1306,3 @@\n-        Bindings.stringValueAt((ObservableList<String>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.stringValueAt((ObservableList<String>)null, index);\n+        });\n@@ -1222,1 +1311,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -1224,2 +1314,4 @@\n-        final ListProperty<String> localProperty = new SimpleListProperty<>();\n-        Bindings.stringValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<String> localProperty = new SimpleListProperty<>();\n+            Bindings.stringValueAt(localProperty, null);\n+        });\n@@ -1227,2 +1319,0 @@\n-\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsListTest.java","additions":172,"deletions":82,"binary":false,"changes":254,"status":"modified"},{"patch":"@@ -37,3 +37,3 @@\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -59,1 +59,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -64,1 +64,1 @@\n-    @Before\n+    @BeforeEach\n@@ -93,1 +93,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -95,1 +95,3 @@\n-        Bindings.size((ObservableMap<String, Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.size((ObservableMap<String, Object>) null);\n+        });\n@@ -98,0 +100,1 @@\n+\n@@ -117,1 +120,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -119,1 +122,3 @@\n-        Bindings.isEmpty((ObservableMap<String, Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.isEmpty((ObservableMap<String, Object>) null);\n+        });\n@@ -122,0 +127,1 @@\n+\n@@ -141,1 +147,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -143,1 +149,3 @@\n-        Bindings.isNotEmpty((ObservableMap<String, Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.isNotEmpty((ObservableMap<String, Object>) null);\n+        });\n@@ -146,0 +154,1 @@\n+\n@@ -185,1 +194,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -187,1 +196,3 @@\n-        Bindings.valueAt(null, key1);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.valueAt(null, key1);\n+        });\n@@ -190,0 +201,1 @@\n+\n@@ -242,1 +254,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -244,1 +256,3 @@\n-        Bindings.valueAt((ObservableMap<String, Object>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.valueAt((ObservableMap<String, Object>)null, index);\n+        });\n@@ -247,1 +261,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -249,1 +264,3 @@\n-        Bindings.valueAt(property, (ObservableValue<String>)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.valueAt(property, (ObservableValue<String>)null);\n+        });\n@@ -252,0 +269,1 @@\n+\n@@ -313,1 +331,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -315,1 +333,3 @@\n-        Bindings.booleanValueAt(null, key1);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.booleanValueAt(null, key1);\n+        });\n@@ -318,0 +338,1 @@\n+\n@@ -391,1 +412,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -393,1 +414,3 @@\n-        Bindings.booleanValueAt((ObservableMap<String, Boolean>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.booleanValueAt((ObservableMap<String, Boolean>)null, index);\n+        });\n@@ -396,1 +419,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -398,2 +422,4 @@\n-        final MapProperty<String, Boolean> localProperty = new SimpleMapProperty<>();\n-        Bindings.booleanValueAt(localProperty, (ObservableValue<String>)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final MapProperty<String, Boolean> localProperty = new SimpleMapProperty<>();\n+            Bindings.booleanValueAt(localProperty, (ObservableValue<String>)null);\n+        });\n@@ -402,0 +428,1 @@\n+\n@@ -463,1 +490,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -465,1 +492,3 @@\n-        Bindings.doubleValueAt(null, key1);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.doubleValueAt(null, key1);\n+        });\n@@ -468,0 +497,1 @@\n+\n@@ -541,1 +571,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -543,1 +573,3 @@\n-        Bindings.doubleValueAt((ObservableMap<String, Double>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.doubleValueAt((ObservableMap<String, Double>)null, index);\n+        });\n@@ -546,1 +578,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -548,2 +581,4 @@\n-        final MapProperty<String, Double> localProperty = new SimpleMapProperty<>();\n-        Bindings.doubleValueAt(localProperty, (ObservableValue<String>)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final MapProperty<String, Double> localProperty = new SimpleMapProperty<>();\n+            Bindings.doubleValueAt(localProperty, (ObservableValue<String>)null);\n+        });\n@@ -552,0 +587,1 @@\n+\n@@ -613,1 +649,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -615,1 +651,3 @@\n-        Bindings.floatValueAt(null, key1);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.floatValueAt(null, key1);\n+        });\n@@ -618,0 +656,1 @@\n+\n@@ -691,1 +730,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -693,1 +732,3 @@\n-        Bindings.floatValueAt((ObservableMap<String, Float>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.floatValueAt((ObservableMap<String, Float>)null, index);\n+        });\n@@ -696,1 +737,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -698,2 +740,4 @@\n-        final MapProperty<String, Float> localProperty = new SimpleMapProperty<>();\n-        Bindings.floatValueAt(localProperty, (ObservableValue<String>)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final MapProperty<String, Float> localProperty = new SimpleMapProperty<>();\n+            Bindings.floatValueAt(localProperty, (ObservableValue<String>)null);\n+        });\n@@ -702,0 +746,1 @@\n+\n@@ -763,1 +808,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -765,1 +810,3 @@\n-        Bindings.integerValueAt(null, key1);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.integerValueAt(null, key1);\n+        });\n@@ -768,0 +815,1 @@\n+\n@@ -841,1 +889,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -843,1 +891,3 @@\n-        Bindings.integerValueAt((ObservableMap<String, Integer>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.integerValueAt((ObservableMap<String, Integer>)null, index);\n+        });\n@@ -846,1 +896,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -848,2 +899,4 @@\n-        final MapProperty<String, Integer> localProperty = new SimpleMapProperty<>();\n-        Bindings.integerValueAt(localProperty, (ObservableValue<String>)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final MapProperty<String, Integer> localProperty = new SimpleMapProperty<>();\n+            Bindings.integerValueAt(localProperty, (ObservableValue<String>)null);\n+        });\n@@ -852,0 +905,1 @@\n+\n@@ -913,1 +967,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -915,1 +969,3 @@\n-        Bindings.longValueAt(null, key1);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.longValueAt(null, key1);\n+        });\n@@ -918,0 +974,1 @@\n+\n@@ -991,1 +1048,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -993,1 +1050,3 @@\n-        Bindings.longValueAt((ObservableMap<String, Long>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.longValueAt((ObservableMap<String, Long>)null, index);\n+        });\n@@ -996,1 +1055,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -998,2 +1058,4 @@\n-        final MapProperty<String, Long> localProperty = new SimpleMapProperty<>();\n-        Bindings.longValueAt(localProperty, (ObservableValue<String>)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final MapProperty<String, Long> localProperty = new SimpleMapProperty<>();\n+            Bindings.longValueAt(localProperty, (ObservableValue<String>)null);\n+        });\n@@ -1002,0 +1064,1 @@\n+\n@@ -1050,1 +1113,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -1052,1 +1115,3 @@\n-        Bindings.stringValueAt(null, key1);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.stringValueAt(null, key1);\n+        });\n@@ -1055,0 +1120,1 @@\n+\n@@ -1116,1 +1182,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -1118,1 +1184,3 @@\n-        Bindings.stringValueAt((ObservableMap<String, String>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.stringValueAt((ObservableMap<String, String>)null, index);\n+        });\n@@ -1121,1 +1189,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -1123,2 +1192,4 @@\n-        final MapProperty<String, String> localProperty = new SimpleMapProperty<>();\n-        Bindings.stringValueAt(localProperty, (ObservableValue<String>)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final MapProperty<String, String> localProperty = new SimpleMapProperty<>();\n+            Bindings.stringValueAt(localProperty, (ObservableValue<String>)null);\n+        });\n@@ -1126,2 +1197,0 @@\n-\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsMapTest.java","additions":131,"deletions":62,"binary":false,"changes":193,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -36,1 +36,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -47,1 +47,1 @@\n-    @Before\n+    @BeforeEach\n@@ -73,1 +73,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -75,1 +75,3 @@\n-        Bindings.size((ObservableSet<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.size((ObservableSet<Object>) null);\n+        });\n@@ -78,0 +80,1 @@\n+\n@@ -97,1 +100,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -99,1 +102,3 @@\n-        Bindings.isEmpty((ObservableSet<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.isEmpty((ObservableSet<Object>) null);\n+        });\n@@ -102,0 +107,1 @@\n+\n@@ -121,1 +127,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -123,1 +129,3 @@\n-        Bindings.isNotEmpty((ObservableSet<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.isNotEmpty((ObservableSet<Object>) null);\n+        });\n@@ -125,0 +133,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsSetTest.java","additions":19,"deletions":10,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/DependencyUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,2 +43,2 @@\n-import static org.junit.Assert.*;\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -63,1 +63,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/ListBindingTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -47,1 +47,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -73,1 +73,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/MapBindingTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -66,1 +66,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/SetBindingTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,2 +36,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -73,1 +74,1 @@\n-    @Before\n+    @BeforeEach\n@@ -189,1 +190,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -191,1 +192,3 @@\n-        Bindings.when(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.when(null);\n+        });\n@@ -194,1 +197,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -196,1 +200,3 @@\n-        generatePropertyProperty(null, p0);\n+        assertThrows(NullPointerException.class, () -> {\n+            generatePropertyProperty(null, p0);\n+        });\n@@ -199,1 +205,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -201,1 +208,3 @@\n-        generatePropertyProperty(p0, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            generatePropertyProperty(p0, null);\n+        });\n@@ -204,1 +213,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -206,1 +216,3 @@\n-        generatePropertyPrimitive(null, v1);\n+        assertThrows(NullPointerException.class, () -> {\n+            generatePropertyPrimitive(null, v1);\n+        });\n@@ -209,1 +221,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -211,1 +224,3 @@\n-        generatePrimitiveProperty(v0, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            generatePrimitiveProperty(v0, null);\n+        });\n@@ -213,0 +228,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/WhenTestBase.java","additions":29,"deletions":13,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -55,3 +55,4 @@\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -74,1 +75,1 @@\n-    @Before\n+    @BeforeEach\n@@ -420,1 +421,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -422,1 +423,3 @@\n-        NumberExpressionBase.numberExpression(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            NumberExpressionBase.numberExpression(null);\n+        });\n@@ -425,1 +428,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -427,10 +430,12 @@\n-        NumberExpressionBase.numberExpression(new ObservableNumberValue() {\n-            @Override public void addListener(InvalidationListener observer) {}\n-            @Override public void addListener(ChangeListener observer) {}\n-            @Override public void removeListener(InvalidationListener observer) {}\n-            @Override public void removeListener(ChangeListener observer) {}\n-            @Override public Number getValue() {return null;}\n-            @Override public int intValue() {return 0;}\n-            @Override public long longValue() {return 0L;}\n-            @Override public float floatValue() {return 0.0f;}\n-            @Override public double doubleValue() {return 0.0;}\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            NumberExpressionBase.numberExpression(new ObservableNumberValue() {\n+                @Override public void addListener(InvalidationListener observer) {}\n+                @Override public void addListener(ChangeListener observer) {}\n+                @Override public void removeListener(InvalidationListener observer) {}\n+                @Override public void removeListener(ChangeListener observer) {}\n+                @Override public Number getValue() {return null;}\n+                @Override public int intValue() {return 0;}\n+                @Override public long longValue() {return 0L;}\n+                @Override public float floatValue() {return 0.0f;}\n+                @Override public double doubleValue() {return 0.0;}\n+            });\n@@ -450,1 +455,1 @@\n-    @Ignore(\"RT-33413\")\n+    @Disabled(\"RT-33413\")\n@@ -475,1 +480,1 @@\n-    @Ignore(\"RT-33413\")\n+    @Disabled(\"RT-33413\")\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/AbstractNumberExpressionTest.java","additions":26,"deletions":21,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -28,2 +28,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -42,2 +43,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -50,1 +51,1 @@\n-    @Before\n+    @BeforeEach\n@@ -198,1 +199,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -200,1 +201,3 @@\n-        BooleanExpression.booleanExpression(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            BooleanExpression.booleanExpression(null);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/BooleanExpressionTest.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -38,1 +38,2 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -40,2 +41,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -56,1 +57,1 @@\n-    @Before\n+    @BeforeEach\n@@ -214,1 +215,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -216,1 +217,3 @@\n-        DoubleExpression.doubleExpression(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            DoubleExpression.doubleExpression(null);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/DoubleExpressionTest.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,2 +28,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -41,2 +42,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -57,1 +58,1 @@\n-    @Before\n+    @BeforeEach\n@@ -216,1 +217,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -218,1 +219,3 @@\n-        FloatExpression.floatExpression(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            FloatExpression.floatExpression(null);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/FloatExpressionTest.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -43,2 +43,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -59,1 +60,1 @@\n-    @Before\n+    @BeforeEach\n@@ -217,1 +218,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -219,1 +220,3 @@\n-        IntegerExpression.integerExpression(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            IntegerExpression.integerExpression(null);\n+        });\n@@ -221,0 +224,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/IntegerExpressionTest.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -39,3 +39,3 @@\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -57,1 +57,1 @@\n-    @Before\n+    @BeforeEach\n@@ -65,1 +65,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -95,1 +95,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -97,1 +97,3 @@\n-        op1.valueAt(-1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            op1.valueAt(-1);\n+        });\n@@ -100,0 +102,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/ListExpressionTest.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -42,2 +42,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -58,1 +59,1 @@\n-    @Before\n+    @BeforeEach\n@@ -216,1 +217,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -218,1 +219,3 @@\n-        LongExpression.longExpression(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            LongExpression.longExpression(null);\n+        });\n@@ -220,0 +223,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/LongExpressionTest.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -60,1 +60,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/MapExpressionTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -39,2 +39,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -49,1 +50,1 @@\n-    @Before\n+    @BeforeEach\n@@ -125,1 +126,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -127,1 +128,3 @@\n-        ObjectExpression.objectExpression(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ObjectExpression.objectExpression(null);\n+        });\n@@ -130,1 +133,2 @@\n-     @Test\n+\n+    @Test\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/ObjectExpressionTest.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -53,1 +53,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/SetExpressionTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,3 +28,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -40,2 +40,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -51,1 +52,1 @@\n-    @Before\n+    @BeforeEach\n@@ -291,1 +292,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -293,1 +294,3 @@\n-        StringExpression.stringExpression(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            StringExpression.stringExpression(null);\n+        });\n@@ -296,0 +299,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/StringExpressionTest.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -91,1 +91,1 @@\n-                FXCollections.observableArrayList(\"foobar\"));\n+                        FXCollections.observableArrayList(\"foobar\"));\n@@ -209,1 +209,1 @@\n-    \/\/test sort on bigger elements, so that it is sorted with mergesort and not insert sort\n+        \/\/test sort on bigger elements, so that it is sorted with mergesort and not insert sort\n@@ -251,1 +251,1 @@\n-    @Test(expected=ClassCastException.class)\n+    @Test\n@@ -255,1 +255,1 @@\n-        FXCollections.sort(seq);\n+        assertThrows(ClassCastException.class, () -> FXCollections.sort(seq));\n@@ -258,0 +258,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/FXCollectionsTest.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -35,3 +35,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -46,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n@@ -347,1 +347,1 @@\n-         \/\/ \"c\", \"a\", \"d\" before \"b\" was added\n+        \/\/ \"c\", \"a\", \"d\" before \"b\" was added\n@@ -432,1 +432,1 @@\n-    @Test(expected=IllegalStateException.class)\n+    @Test\n@@ -434,1 +434,3 @@\n-        builder.nextAdd(0, 1);\n+        assertThrows(IllegalStateException.class, () -> {\n+            builder.nextAdd(0, 1);\n+        });\n@@ -437,1 +439,2 @@\n-    @Test(expected=IllegalStateException.class)\n+\n+    @Test\n@@ -439,1 +442,3 @@\n-        builder.nextRemove(0, (String)null);\n+        assertThrows(IllegalStateException.class, () -> {\n+            builder.nextRemove(0, (String)null);\n+        });\n@@ -442,1 +447,2 @@\n-    @Test(expected=IllegalStateException.class)\n+\n+    @Test\n@@ -444,1 +450,3 @@\n-        builder.nextRemove(0, Collections.EMPTY_LIST);\n+        assertThrows(IllegalStateException.class, () -> {\n+            builder.nextRemove(0, Collections.EMPTY_LIST);\n+        });\n@@ -447,1 +455,2 @@\n-    @Test(expected=IllegalStateException.class)\n+\n+    @Test\n@@ -449,1 +458,3 @@\n-        builder.nextUpdate(0);\n+        assertThrows(IllegalStateException.class, () -> {\n+            builder.nextUpdate(0);\n+        });\n@@ -452,1 +463,2 @@\n-    @Test(expected=IllegalStateException.class)\n+\n+    @Test\n@@ -454,1 +466,3 @@\n-        builder.nextSet(0, null);\n+        assertThrows(IllegalStateException.class, () -> {\n+            builder.nextSet(0, null);\n+        });\n@@ -457,1 +471,2 @@\n-    @Test(expected=IllegalStateException.class)\n+\n+    @Test\n@@ -459,1 +474,3 @@\n-        builder.nextReplace(0, 1, Collections.EMPTY_LIST);\n+        assertThrows(IllegalStateException.class, () -> {\n+            builder.nextReplace(0, 1, Collections.EMPTY_LIST);\n+        });\n@@ -462,0 +479,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ListChangeBuilderTest.java","additions":35,"deletions":17,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -64,6 +64,6 @@\n-            assertFalse(\"Negative from index\", from < 0);\n-            assertFalse(\"Negative to index\", to < 0);\n-            assertFalse(\"from index is greater then to index\", from > to);\n-            assertFalse(\"No change in both elements and size\", from == to && sizeChanged == false);\n-            assertFalse(\"from index is greater than array size\", from < to && from >= observableArray.size());\n-            assertFalse(\"to index is greater than array size\", from < to && to > observableArray.size());\n+            assertFalse(from < 0, \"Negative from index\");\n+            assertFalse(to < 0, \"Negative to index\");\n+            assertFalse(from > to, \"from index is greater then to index\");\n+            assertFalse(from == to && sizeChanged == false, \"No change in both elements and size\");\n+            assertFalse(from < to && from >= observableArray.size(), \"from index is greater than array size\");\n+            assertFalse(from < to && to > observableArray.size(), \"to index is greater than array size\");\n@@ -80,1 +80,1 @@\n-        assertFalse(\"Too many array change events\", tooManyCalls);\n+        assertFalse(tooManyCalls, \"Too many array change events\");\n@@ -86,3 +86,3 @@\n-                       int from,\n-                       int to) {\n-        assertFalse(\"Too many array change events\", tooManyCalls);\n+                                         int from,\n+                                         int to) {\n+        assertFalse(tooManyCalls, \"Too many array change events\");\n@@ -96,4 +96,4 @@\n-                       boolean sizeChanged,\n-                       int from,\n-                       int to) {\n-        assertFalse(\"Too many array change events\", tooManyCalls);\n+                      boolean sizeChanged,\n+                      int from,\n+                      int to) {\n+        assertFalse(tooManyCalls, \"Too many array change events\");\n@@ -107,1 +107,1 @@\n-        assertFalse(\"Too many array change events\", tooManyCalls);\n+        assertFalse(tooManyCalls, \"Too many array change events\");\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/MockArrayObserver.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import static org.junit.Assert.* ;\n+import static org.junit.jupiter.api.Assertions.* ;\n@@ -97,3 +97,3 @@\n-                       List<E> removed,\n-                       int from,\n-                       int to) {\n+                                List<E> removed,\n+                                int from,\n+                                int to) {\n@@ -105,3 +105,3 @@\n-                       List<E> removed,\n-                       int from,\n-                       int to) {\n+                               List<E> removed,\n+                               int from,\n+                               int to) {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/MockListObserver.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -60,1 +60,1 @@\n-        assertTrue(\"Missing call to the observer # \" + call, call < calls.size());\n+        assertTrue(call < calls.size(), \"Missing call to the observer # \" + call);\n@@ -68,1 +68,1 @@\n-            assertTrue(Arrays.toString(calls) + \" doesn't contain \"  + c, this.calls.contains(c));\n+            assertTrue(this.calls.contains(c), Arrays.toString(calls) + \" doesn't contain \" + c);\n@@ -75,1 +75,1 @@\n-            assertTrue(calls + \" doesn't contain \"  + t, this.calls.contains(new Call<>(t.key, t.val, null)));\n+            assertTrue(this.calls.contains(new Call<>(t.key, t.val, null)), calls + \" doesn't contain \" + t);\n@@ -84,1 +84,1 @@\n-        assertTrue(\"Missing call to the observer # \" + call, call < calls.size());\n+        assertTrue(call < calls.size(), \"Missing call to the observer # \" + call);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/MockMapObserver.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -63,1 +63,1 @@\n-        assertTrue(\"Missing call to the observer # \" + call, call < calls.size());\n+        assertTrue(call < calls.size(), \"Missing call to the observer # \" + call);\n@@ -70,1 +70,1 @@\n-            assertTrue(Arrays.toString(calls) + \" doesn't contain \"  + c, this.calls.contains(c));\n+            assertTrue(this.calls.contains(c), () -> Arrays.toString(calls) + \" doesn't contain \" + c);\n@@ -77,1 +77,1 @@\n-            assertTrue(calls + \" doesn't contain \"  + t, this.calls.contains(new Call<>(t.val, null)));\n+            assertTrue(this.calls.contains(new Call<>(t.val, null)), () -> calls + \" doesn't contain \" + t);\n@@ -86,1 +86,1 @@\n-        assertTrue(\"Missing call to the observer # \" + call, call < calls.size());\n+        assertTrue(call < calls.size(), \"Missing call to the observer # \" + call);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/MockSetObserver.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,4 +33,4 @@\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import static org.junit.Assert.* ;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.* ;\n@@ -41,1 +41,1 @@\n-@Ignore\n+@Disabled\n@@ -110,1 +110,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/TransformationListTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -38,4 +38,4 @@\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -77,1 +77,1 @@\n-    @Before\n+    @BeforeEach\n@@ -92,2 +92,2 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -95,2 +95,1 @@\n-        list.add(null);\n-\n+        assertThrows(NullPointerException.class, () -> list.add(null));\n@@ -99,2 +98,2 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -102,2 +101,1 @@\n-        list.add( 1, null);\n-\n+        assertThrows(NullPointerException.class, () -> list.add(1, null));\n@@ -106,2 +104,2 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -109,2 +107,1 @@\n-        list.addAll(Arrays.asList(\"a\", null, \"b\"));\n-\n+        assertThrows(NullPointerException.class, () -> list.addAll(Arrays.asList(\"a\", null, \"b\")));\n@@ -113,2 +110,2 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -116,2 +113,1 @@\n-        list.addAll(\"a\", null, \"b\");\n-\n+        assertThrows(NullPointerException.class, () -> list.addAll(Arrays.asList(\"a\", null, \"b\")));\n@@ -120,2 +116,2 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -123,2 +119,1 @@\n-        list.addAll(1, Arrays.asList(\"a\", null, \"b\"));\n-\n+        assertThrows(NullPointerException.class, () -> list.addAll(1, Arrays.asList(\"a\", null, \"b\")));\n@@ -127,2 +122,2 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -130,2 +125,1 @@\n-        list.set(1, null);\n-\n+        assertThrows(NullPointerException.class, () -> list.set(1, null));\n@@ -134,2 +128,2 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -137,2 +131,1 @@\n-        list.setAll(\"a\", null);\n-\n+        assertThrows(NullPointerException.class, () -> list.setAll(\"a\", null));\n@@ -141,2 +134,2 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -144,1 +137,1 @@\n-        list.setAll(Arrays.asList(\"a\", null, \"b\"));\n+        assertThrows(NullPointerException.class, () -> list.setAll(Arrays.asList(\"a\", null, \"b\")));\n@@ -147,2 +140,2 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -150,2 +143,1 @@\n-        list.listIterator().add(null);\n-\n+        assertThrows(NullPointerException.class, () -> list.listIterator().add(null));\n@@ -153,2 +145,3 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+\n+    @Test\n+    @Disabled\n@@ -158,1 +151,1 @@\n-        it.set(null);\n+        assertThrows(NullPointerException.class, () -> it.set(null));\n@@ -161,2 +154,2 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -164,1 +157,1 @@\n-        list.subList(0, 1).add(null);\n+        assertThrows(NullPointerException.class, () -> list.subList(0, 1).add(null));\n@@ -167,2 +160,2 @@\n-    @Test(expected = NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -170,1 +163,1 @@\n-        list.subList(0, 1).add(0, null);\n+        assertThrows(NullPointerException.class, () -> list.subList(0, 1).add(0, null));\n@@ -173,2 +166,2 @@\n-    @Test(expected = NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -176,1 +169,1 @@\n-        list.subList(0, 1).addAll(Collections.<String>singleton(null));\n+        assertThrows(NullPointerException.class, () -> list.subList(0, 1).addAll(Collections.<String>singleton(null)));\n@@ -179,2 +172,2 @@\n-    @Test(expected = NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -182,1 +175,1 @@\n-        list.subList(0, 1).addAll(0, Collections.<String>singleton(null));\n+        assertThrows(NullPointerException.class, () -> list.subList(0, 1).addAll(0, Collections.<String>singleton(null)));\n@@ -185,2 +178,2 @@\n-    @Test(expected = NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -188,1 +181,1 @@\n-        list.subList(0, 1).set(0, null);\n+        assertThrows(NullPointerException.class, () -> list.subList(0, 1).set(0, null));\n@@ -191,2 +184,2 @@\n-    @Test(expected = NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -194,1 +187,1 @@\n-        list.subList(0, 1).listIterator().add(null);\n+        assertThrows(NullPointerException.class, () -> list.subList(0, 1).listIterator().add(null));\n@@ -354,0 +347,1 @@\n+\n@@ -367,0 +361,1 @@\n+\n@@ -380,0 +375,1 @@\n+\n@@ -393,0 +389,1 @@\n+\n@@ -406,0 +403,1 @@\n+\n@@ -419,0 +417,1 @@\n+\n@@ -446,0 +445,1 @@\n+\n@@ -459,0 +459,1 @@\n+\n@@ -473,1 +474,1 @@\n-    @Test(expected=ConcurrentModificationException.class)\n+    @Test\n@@ -475,6 +476,8 @@\n-        ListIterator<String> it1 = list.listIterator();\n-        ListIterator<String> it2 = list.listIterator();\n-        it1.next();\n-        it2.next();\n-        it1.remove();\n-        it2.remove();\n+        assertThrows(ConcurrentModificationException.class, () -> {\n+            ListIterator<String> it1 = list.listIterator();\n+            ListIterator<String> it2 = list.listIterator();\n+            it1.next();\n+            it2.next();\n+            it1.remove();\n+            it2.remove();\n+        });\n@@ -483,1 +486,0 @@\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/VetoableObservableListTest.java","additions":71,"deletions":69,"binary":false,"changes":140,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -37,1 +37,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -41,1 +41,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -43,1 +43,3 @@\n-        new WeakListChangeListener<>(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            new WeakListChangeListener<>(null);\n+        });\n@@ -46,0 +48,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/WeakListChangeListenerTest.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -36,1 +36,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -40,1 +40,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -42,1 +42,3 @@\n-        new WeakMapChangeListener<>(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            new WeakMapChangeListener<>(null);\n+        });\n@@ -45,0 +47,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/WeakMapChangeListenerTest.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -36,1 +36,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -40,1 +40,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -42,1 +42,3 @@\n-        new WeakSetChangeListener<>(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            new WeakSetChangeListener<>(null);\n+        });\n@@ -45,0 +47,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/WeakSetChangeListenerTest.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -38,4 +38,4 @@\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -49,1 +49,1 @@\n-    @Before\n+    @BeforeEach\n@@ -60,1 +60,1 @@\n-    @Ignore\n+    @Disabled\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/event\/EventSerializationEventExists.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -53,1 +53,1 @@\n-    @Before\n+    @BeforeEach\n@@ -92,1 +92,1 @@\n-    @Test(expected=InvalidObjectException.class)\n+    @Test\n@@ -98,3 +98,5 @@\n-        objectOutputStream.writeObject(e);\n-        turnToInput();\n-        EventType eType = (EventType) objectInputStream.readObject();\n+        assertThrows(InvalidObjectException.class, () -> {\n+            objectOutputStream.writeObject(e);\n+            turnToInput();\n+            EventType eType = (EventType) objectInputStream.readObject();\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/event\/EventSerializationTest.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -31,1 +31,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -38,1 +39,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -40,1 +41,3 @@\n-        new EventType(Event.ANY, ActionEvent.ACTION.getName());\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new EventType(Event.ANY, ActionEvent.ACTION.getName());\n+        });\n@@ -43,0 +46,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/event\/EventTest.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -238,1 +238,1 @@\n-        \/\/ 0, +infinity, -infinity, Nan, positive value, negative value\n+    \/\/ 0, +infinity, -infinity, Nan, positive value, negative value\n@@ -240,1 +240,1 @@\n-        \/\/ 0, +infinity, -infinity, Nan, positive value, negative value\n+    \/\/ 0, +infinity, -infinity, Nan, positive value, negative value\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/DurationTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,2 +33,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/BigDecimalStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved\n@@ -30,1 +30,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/BigIntegerStringConverterTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -31,2 +31,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/BooleanStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -31,2 +31,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/ByteStringConverterTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -31,2 +31,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/CharacterStringConverterTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -31,2 +31,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/DefaultStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -31,2 +31,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/DoubleStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -31,2 +31,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/FloatStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -31,2 +31,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/IntegerStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -31,2 +31,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/LongStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -34,2 +34,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/PercentageStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -31,2 +31,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/ShortStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}