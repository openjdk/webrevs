{"files":[{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -50,1 +50,1 @@\n-    @Before\n+    @BeforeEach\n@@ -103,1 +103,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -105,1 +105,3 @@\n-        Bindings.bindContentBidirectional(null, op2);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.bindContentBidirectional(null, op2);\n+        });\n@@ -108,1 +110,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -110,1 +112,3 @@\n-        Bindings.bindContentBidirectional(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.bindContentBidirectional(op1, null);\n+        });\n@@ -113,1 +117,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -115,1 +119,3 @@\n-        Bindings.bindContentBidirectional(op1, op1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.bindContentBidirectional(op1, op1);\n+        });\n@@ -161,1 +167,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -163,1 +169,3 @@\n-        Bindings.unbindContentBidirectional(null, op2);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContentBidirectional(null, op2);\n+        });\n@@ -166,1 +174,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -168,1 +176,3 @@\n-        Bindings.unbindContentBidirectional(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContentBidirectional(op1, null);\n+        });\n@@ -171,1 +181,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -173,1 +183,3 @@\n-        Bindings.unbindContentBidirectional(op1, op1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.unbindContentBidirectional(op1, op1);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/BidirectionalContentBindingListTest.java","additions":28,"deletions":16,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -38,1 +38,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -53,1 +53,1 @@\n-    @Before\n+    @BeforeEach\n@@ -105,1 +105,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -107,1 +107,3 @@\n-        Bindings.bindContentBidirectional(null, op2);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.bindContentBidirectional(null, op2);\n+        });\n@@ -110,1 +112,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -112,1 +114,3 @@\n-        Bindings.bindContentBidirectional(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.bindContentBidirectional(op1, null);\n+        });\n@@ -115,1 +119,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -117,1 +121,3 @@\n-        Bindings.bindContentBidirectional(op1, op1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.bindContentBidirectional(op1, op1);\n+        });\n@@ -167,1 +173,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -169,1 +175,3 @@\n-        Bindings.unbindContentBidirectional(null, op2);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContentBidirectional(null, op2);\n+        });\n@@ -172,1 +180,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -174,1 +182,3 @@\n-        Bindings.unbindContentBidirectional(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContentBidirectional(op1, null);\n+        });\n@@ -177,1 +187,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -179,1 +189,3 @@\n-        Bindings.unbindContentBidirectional(op1, op1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.unbindContentBidirectional(op1, op1);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/BidirectionalContentBindingMapTest.java","additions":28,"deletions":16,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -38,1 +38,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -49,1 +49,1 @@\n-    @Before\n+    @BeforeEach\n@@ -101,1 +101,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -103,1 +103,3 @@\n-        Bindings.bindContentBidirectional(null, op2);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.bindContentBidirectional(null, op2);\n+        });\n@@ -106,1 +108,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -108,1 +110,3 @@\n-        Bindings.bindContentBidirectional(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.bindContentBidirectional(op1, null);\n+        });\n@@ -111,1 +115,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -113,1 +117,3 @@\n-        Bindings.bindContentBidirectional(op1, op1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.bindContentBidirectional(op1, op1);\n+        });\n@@ -163,1 +169,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -165,1 +171,3 @@\n-        Bindings.unbindContentBidirectional(null, op2);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContentBidirectional(null, op2);\n+        });\n@@ -168,1 +176,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -170,1 +178,3 @@\n-        Bindings.unbindContentBidirectional(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContentBidirectional(op1, null);\n+        });\n@@ -173,1 +183,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -175,1 +185,3 @@\n-        Bindings.unbindContentBidirectional(op1, op1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.unbindContentBidirectional(op1, op1);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/BidirectionalContentBindingSetTest.java","additions":28,"deletions":16,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -50,1 +50,1 @@\n-    @Before\n+    @BeforeEach\n@@ -87,1 +87,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -89,1 +89,3 @@\n-        Bindings.bindContent(null, op2);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.bindContent(null, op2);\n+        });\n@@ -92,1 +94,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -94,1 +96,3 @@\n-        Bindings.bindContent(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.bindContent(op1, null);\n+        });\n@@ -97,1 +101,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -99,1 +103,3 @@\n-        Bindings.bindContent(op2, op2);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.bindContent(op2, op2);\n+        });\n@@ -126,1 +132,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -128,1 +134,3 @@\n-        Bindings.unbindContent(null, op2);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContent(null, op2);\n+        });\n@@ -131,1 +139,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -133,1 +141,3 @@\n-        Bindings.unbindContent(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContent(op1, null);\n+        });\n@@ -136,1 +146,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -138,1 +148,3 @@\n-        Bindings.unbindContent(op2, op2);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.unbindContent(op2, op2);\n+        });\n@@ -141,0 +153,1 @@\n+\n@@ -172,1 +185,1 @@\n-        final int hc2 = ContentBinding.bind(op1, op2).hashCode();\n+         final int hc2 = ContentBinding.bind(op1, op2).hashCode();\n@@ -177,2 +190,2 @@\n-    public void testEquals() {\n-        final Object golden = ContentBinding.bind(op1, op2);\n+     public void testEquals() {\n+     final Object golden = ContentBinding.bind(op1, op2);\n@@ -190,1 +203,1 @@\n-    }\n+     }\n@@ -212,2 +225,2 @@\n-                throw new AssertionError(\"We don't expect any exceptions in this test!\", e);\n-            }\n+                    throw new AssertionError(\"We don't expect any exceptions in this test!\", e);\n+                }\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ContentBindingListTest.java","additions":35,"deletions":22,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -38,1 +38,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -53,1 +53,1 @@\n-    @Before\n+    @BeforeEach\n@@ -90,15 +90,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void testBind_Null_X() {\n-        Bindings.bindContent(null, op2);\n-    }\n-\n-    @Test(expected = NullPointerException.class)\n-    public void testBind_X_Null() {\n-        Bindings.bindContent(op1, null);\n-    }\n-\n-    @Test(expected = IllegalArgumentException.class)\n-    public void testBind_X_Self() {\n-        Bindings.bindContent(op2, op2);\n-    }\n-\n@@ -130,1 +115,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -132,1 +117,3 @@\n-        Bindings.unbindContent(null, op2);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContent(null, op2);\n+        });\n@@ -135,1 +122,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -137,1 +124,3 @@\n-        Bindings.unbindContent(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContent(op1, null);\n+        });\n@@ -140,1 +129,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -142,1 +131,3 @@\n-        Bindings.unbindContent(op2, op2);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.unbindContent(op2, op2);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ContentBindingMapTest.java","additions":16,"deletions":25,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -38,1 +38,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -49,1 +49,1 @@\n-    @Before\n+    @BeforeEach\n@@ -86,15 +86,0 @@\n-    @Test(expected = NullPointerException.class)\n-    public void testBind_Null_X() {\n-        Bindings.bindContent(null, op2);\n-    }\n-\n-    @Test(expected = NullPointerException.class)\n-    public void testBind_X_Null() {\n-        Bindings.bindContent(op1, null);\n-    }\n-\n-    @Test(expected = IllegalArgumentException.class)\n-    public void testBind_X_Self() {\n-        Bindings.bindContent(op2, op2);\n-    }\n-\n@@ -126,1 +111,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -128,1 +113,3 @@\n-        Bindings.unbindContent(null, op2);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContent(null, op2);\n+        });\n@@ -131,1 +118,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -133,1 +120,3 @@\n-        Bindings.unbindContent(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.unbindContent(op1, null);\n+        });\n@@ -136,1 +125,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -138,1 +127,3 @@\n-        Bindings.unbindContent(op2, op2);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.unbindContent(op2, op2);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ContentBindingSetTest.java","additions":16,"deletions":25,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ErrorLoggingUtiltity.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -32,1 +32,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -166,2 +166,0 @@\n-\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ExpressionHelperBaseTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,3 +28,5 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n@@ -38,2 +40,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -70,1 +72,1 @@\n-    @Before\n+    @BeforeEach\n@@ -82,1 +84,1 @@\n-    @Test (expected = NullPointerException.class)\n+    @Test\n@@ -84,1 +86,3 @@\n-        ExpressionHelper.addListener(helper, null, invalidationListener[0]);\n+        assertThrows(NullPointerException.class, () -> {\n+            ExpressionHelper.addListener(helper, null, invalidationListener[0]);\n+        });\n@@ -87,1 +91,1 @@\n-    @Test (expected = NullPointerException.class)\n+    @Test\n@@ -89,1 +93,3 @@\n-        ExpressionHelper.addListener(helper, observable, (InvalidationListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ExpressionHelper.addListener(helper, observable, (InvalidationListener) null);\n+        });\n@@ -92,1 +98,1 @@\n-    @Test (expected = NullPointerException.class)\n+    @Test\n@@ -94,1 +100,3 @@\n-        ExpressionHelper.removeListener(helper, (InvalidationListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ExpressionHelper.removeListener(helper, (InvalidationListener) null);\n+        });\n@@ -97,1 +105,1 @@\n-    @Test (expected = NullPointerException.class)\n+    @Test\n@@ -99,1 +107,3 @@\n-        ExpressionHelper.addListener(helper, null, changeListener[0]);\n+        assertThrows(NullPointerException.class, () -> {\n+            ExpressionHelper.addListener(helper, null, changeListener[0]);\n+        });\n@@ -102,1 +112,1 @@\n-    @Test (expected = NullPointerException.class)\n+    @Test\n@@ -104,1 +114,3 @@\n-        ExpressionHelper.addListener(helper, observable, (ChangeListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ExpressionHelper.addListener(helper, observable, (ChangeListener) null);\n+        });\n@@ -107,1 +119,1 @@\n-    @Test (expected = NullPointerException.class)\n+    @Test\n@@ -109,1 +121,3 @@\n-        ExpressionHelper.removeListener(helper, (ChangeListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ExpressionHelper.removeListener(helper, (ChangeListener) null);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ExpressionHelperTest.java","additions":32,"deletions":18,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -46,2 +46,2 @@\n-import static org.junit.Assert.*;\n-import org.junit.Before;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.BeforeEach;\n@@ -67,1 +67,1 @@\n-    @Before\n+    @BeforeEach\n@@ -166,1 +166,1 @@\n-                           || Arrays.asList(invalidationListener2, invalidationListener1).equals(ExpressionHelperUtility.getInvalidationListeners(observableList)));\n+                || Arrays.asList(invalidationListener2, invalidationListener1).equals(ExpressionHelperUtility.getInvalidationListeners(observableList)));\n@@ -197,1 +197,1 @@\n-                           || Arrays.asList(changeListener2, changeListener1).equals(ExpressionHelperUtility.getChangeListeners(observableList)));\n+                || Arrays.asList(changeListener2, changeListener1).equals(ExpressionHelperUtility.getChangeListeners(observableList)));\n@@ -228,1 +228,1 @@\n-                           || Arrays.asList(listChangeListener2, listChangeListener1).equals(ExpressionHelperUtility.getListChangeListeners(observableList)));\n+                || Arrays.asList(listChangeListener2, listChangeListener1).equals(ExpressionHelperUtility.getListChangeListeners(observableList)));\n@@ -259,1 +259,1 @@\n-                           || Arrays.asList(invalidationListener2, invalidationListener1).equals(ExpressionHelperUtility.getInvalidationListeners(observableMap)));\n+                || Arrays.asList(invalidationListener2, invalidationListener1).equals(ExpressionHelperUtility.getInvalidationListeners(observableMap)));\n@@ -290,1 +290,1 @@\n-                           || Arrays.asList(changeListener2, changeListener1).equals(ExpressionHelperUtility.getChangeListeners(observableMap)));\n+                || Arrays.asList(changeListener2, changeListener1).equals(ExpressionHelperUtility.getChangeListeners(observableMap)));\n@@ -321,1 +321,1 @@\n-                           || Arrays.asList(mapChangeListener2, mapChangeListener1).equals(ExpressionHelperUtility.getMapChangeListeners(observableMap)));\n+                || Arrays.asList(mapChangeListener2, mapChangeListener1).equals(ExpressionHelperUtility.getMapChangeListeners(observableMap)));\n@@ -352,1 +352,1 @@\n-                           || Arrays.asList(invalidationListener2, invalidationListener1).equals(ExpressionHelperUtility.getInvalidationListeners(observableSet)));\n+                || Arrays.asList(invalidationListener2, invalidationListener1).equals(ExpressionHelperUtility.getInvalidationListeners(observableSet)));\n@@ -383,1 +383,1 @@\n-                           || Arrays.asList(changeListener2, changeListener1).equals(ExpressionHelperUtility.getChangeListeners(observableSet)));\n+                || Arrays.asList(changeListener2, changeListener1).equals(ExpressionHelperUtility.getChangeListeners(observableSet)));\n@@ -414,1 +414,1 @@\n-                           || Arrays.asList(setChangeListener2, setChangeListener1).equals(ExpressionHelperUtility.getSetChangeListeners(observableSet)));\n+                || Arrays.asList(setChangeListener2, setChangeListener1).equals(ExpressionHelperUtility.getSetChangeListeners(observableSet)));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ExpressionHelperUtilityTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -45,2 +45,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -69,1 +70,1 @@\n-    @Before\n+    @BeforeEach\n@@ -91,1 +92,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -93,1 +94,3 @@\n-        ListExpressionHelper.addListener(null, null, invalidationListener[0]);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListExpressionHelper.addListener(null, null, invalidationListener[0]);\n+        });\n@@ -96,1 +99,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -98,1 +101,3 @@\n-        ListExpressionHelper.addListener(null, observable, (InvalidationListener)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListExpressionHelper.addListener(null, observable, (InvalidationListener) null);\n+        });\n@@ -101,1 +106,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -103,1 +108,3 @@\n-        ListExpressionHelper.removeListener(null, (InvalidationListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListExpressionHelper.removeListener(null, (InvalidationListener) null);\n+        });\n@@ -106,1 +113,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -108,1 +115,3 @@\n-        ListExpressionHelper.addListener(null, null, changeListener[0]);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListExpressionHelper.addListener(null, null, changeListener[0]);\n+        });\n@@ -111,1 +120,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -113,1 +122,3 @@\n-        ListExpressionHelper.addListener(null, observable, (ChangeListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListExpressionHelper.addListener(null, observable, (ChangeListener) null);\n+        });\n@@ -116,1 +127,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -118,1 +129,3 @@\n-        ListExpressionHelper.removeListener(null, (ChangeListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListExpressionHelper.removeListener(null, (ChangeListener) null);\n+        });\n@@ -121,1 +134,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -123,1 +136,3 @@\n-        ListExpressionHelper.addListener(null, null, listChangeListener[0]);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListExpressionHelper.addListener(null, null, listChangeListener[0]);\n+        });\n@@ -126,1 +141,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -128,1 +143,3 @@\n-        ListExpressionHelper.addListener(null, observable, (ListChangeListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListExpressionHelper.addListener(null, observable, (ListChangeListener) null);\n+        });\n@@ -131,1 +148,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -133,1 +150,3 @@\n-        ListExpressionHelper.removeListener(null, (ListChangeListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListExpressionHelper.removeListener(null, (ListChangeListener) null);\n+        });\n@@ -954,2 +973,0 @@\n-\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ListExpressionHelperTest.java","additions":40,"deletions":23,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -53,1 +53,1 @@\n-    @Before\n+    @BeforeEach\n@@ -65,1 +65,1 @@\n-            new InvalidationListenerMock(), new InvalidationListenerMock(), new InvalidationListenerMock()\n+                new InvalidationListenerMock(), new InvalidationListenerMock(), new InvalidationListenerMock()\n@@ -68,1 +68,1 @@\n-            new ChangeListenerMock(UNDEFINED), new ChangeListenerMock(UNDEFINED), new ChangeListenerMock(UNDEFINED)\n+                new ChangeListenerMock(UNDEFINED), new ChangeListenerMock(UNDEFINED), new ChangeListenerMock(UNDEFINED)\n@@ -71,1 +71,1 @@\n-            new MockMapObserver<>(), new MockMapObserver<>(), new MockMapObserver<>()\n+                new MockMapObserver<>(), new MockMapObserver<>(), new MockMapObserver<>()\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/MapExpressionHelperTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -44,3 +44,4 @@\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -104,1 +105,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -110,1 +111,1 @@\n-    @Before\n+    @BeforeEach\n@@ -384,1 +385,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -386,1 +387,3 @@\n-        select = Bindings.selectString(null, \"next\", \"name\");\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.selectString(null, \"next\", \"name\");\n+        });\n@@ -400,1 +403,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -402,1 +405,3 @@\n-        select = Bindings.selectString(a.nextProperty(), null, \"name\");\n+        assertThrows(NullPointerException.class, () -> {\n+            select = Bindings.selectString(a.nextProperty(), null, \"name\");\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/SelectBindingTest.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -52,1 +52,1 @@\n-    @Before\n+    @BeforeEach\n@@ -62,1 +62,1 @@\n-            new InvalidationListenerMock(), new InvalidationListenerMock(), new InvalidationListenerMock()\n+                new InvalidationListenerMock(), new InvalidationListenerMock(), new InvalidationListenerMock()\n@@ -65,1 +65,1 @@\n-            new ChangeListenerMock(UNDEFINED), new ChangeListenerMock(UNDEFINED), new ChangeListenerMock(UNDEFINED)\n+                new ChangeListenerMock(UNDEFINED), new ChangeListenerMock(UNDEFINED), new ChangeListenerMock(UNDEFINED)\n@@ -68,1 +68,1 @@\n-            new MockSetObserver<>(), new MockSetObserver<>(), new MockSetObserver<>()\n+                new MockSetObserver<>(), new MockSetObserver<>(), new MockSetObserver<>()\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/SetExpressionHelperTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -53,2 +53,4 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -82,1 +84,1 @@\n-    @Before\n+    @BeforeEach\n@@ -112,1 +114,1 @@\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), doubleV);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), doubleV);\n@@ -118,1 +120,1 @@\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), floatV);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), floatV);\n@@ -124,1 +126,1 @@\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), longV);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), longV);\n@@ -130,1 +132,1 @@\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), intV);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), intV);\n@@ -136,1 +138,1 @@\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), booleanV);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), booleanV);\n@@ -142,1 +144,1 @@\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), dateV);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), dateV);\n@@ -153,1 +155,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -155,1 +157,3 @@\n-        Bindings.convert(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.convert(null);\n+        });\n@@ -172,1 +176,1 @@\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), dateV);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), dateV);\n@@ -185,3 +189,7 @@\n-        s = Bindings.concat(doubleV, double1, floatV, float1, longV, long1, intV, int1, booleanV, boolean1, stringV, string1, dateV, date1);\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), doubleV, floatV, longV, intV, booleanV, stringV, dateV);\n-        assertEquals(\"\" + double0 + double1 + float0 + float1 + long0 + long1 + int0 + int1+ boolean0 + boolean1 + string0 + string1 + date0 + date1, s.get());\n+        s = Bindings.concat(doubleV, double1, floatV, float1, longV, long1, intV, int1, booleanV, boolean1, stringV,\n+                string1, dateV, date1);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), doubleV, floatV, longV, intV, booleanV,\n+                stringV, dateV);\n+        assertEquals(\n+                \"\" + double0 + double1 + float0 + float1 + long0 + long1 + int0 + int1 + boolean0 + boolean1 + string0 +\n+                        string1 + date0 + date1, s.get());\n@@ -195,1 +203,3 @@\n-        assertEquals(\"\" + double1 + double1 + float1 + float1 + long1 + long1 + int1 + int1 + boolean1 + boolean1 + string1 + string1 + date1 + date1, s.get());\n+        assertEquals(\n+                \"\" + double1 + double1 + float1 + float1 + long1 + long1 + int1 + int1 + boolean1 + boolean1 + string1 +\n+                        string1 + date1 + date1, s.get());\n@@ -198,1 +208,3 @@\n-        assertEquals(\"\" + double1 + double1 + float1 + float1 + long1 + long1 + int1 + int1 + boolean1 + boolean1 + \"null\" + string1 + \"null\" + date1, s.get());\n+        assertEquals(\n+                \"\" + double1 + double1 + float1 + float1 + long1 + long1 + int1 + int1 + boolean1 + boolean1 + \"null\" +\n+                        string1 + \"null\" + date1, s.get());\n@@ -216,1 +228,1 @@\n-            DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), dateV);\n+            DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), dateV);\n@@ -226,4 +238,8 @@\n-                    doubleV, double1, floatV, float1, longV, long1, intV, int1, booleanV, boolean1, stringV, string1, dateV, date1);\n-            DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), doubleV, floatV, longV, intV, booleanV, stringV, dateV);\n-            assertEquals(String.format(Locale.GERMAN, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n-                    double0, double1, float0, float1, long0, long1, int0, int1, boolean0, boolean1, string0, string1, date0, date1), s.get());\n+                    doubleV, double1, floatV, float1, longV, long1, intV, int1, booleanV, boolean1, stringV, string1,\n+                    dateV, date1);\n+            DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), doubleV, floatV, longV, intV,\n+                    booleanV, stringV, dateV);\n+            assertEquals(\n+                    String.format(Locale.GERMAN, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n+                            double0, double1, float0, float1, long0, long1, int0, int1, boolean0, boolean1, string0,\n+                            string1, date0, date1), s.get());\n@@ -237,2 +253,4 @@\n-            assertEquals(String.format(Locale.GERMAN, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n-                    double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, string1, string1, date1, date1), s.get());\n+            assertEquals(\n+                    String.format(Locale.GERMAN, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n+                            double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, string1,\n+                            string1, date1, date1), s.get());\n@@ -241,2 +259,4 @@\n-            assertEquals(String.format(Locale.GERMAN, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %s, %tc\",\n-                    double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, \"null\", string1, \"null\", date1), s.get());\n+            assertEquals(\n+                    String.format(Locale.GERMAN, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %s, %tc\",\n+                            double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, \"null\",\n+                            string1, \"null\", date1), s.get());\n@@ -258,1 +278,1 @@\n-            DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), dateV);\n+            DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), dateV);\n@@ -268,4 +288,8 @@\n-                    doubleV, double1, floatV, float1, longV, long1, intV, int1, booleanV, boolean1, stringV, string1, dateV, date1);\n-            DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), doubleV, floatV, longV, intV, booleanV, stringV, dateV);\n-            assertEquals(String.format(Locale.US, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n-                    double0, double1, float0, float1, long0, long1, int0, int1, boolean0, boolean1, string0, string1, date0, date1), s.get());\n+                    doubleV, double1, floatV, float1, longV, long1, intV, int1, booleanV, boolean1, stringV, string1,\n+                    dateV, date1);\n+            DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), doubleV, floatV, longV, intV,\n+                    booleanV, stringV, dateV);\n+            assertEquals(\n+                    String.format(Locale.US, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n+                            double0, double1, float0, float1, long0, long1, int0, int1, boolean0, boolean1, string0,\n+                            string1, date0, date1), s.get());\n@@ -279,2 +303,4 @@\n-            assertEquals(String.format(Locale.US, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n-                    double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, string1, string1, date1, date1), s.get());\n+            assertEquals(\n+                    String.format(Locale.US, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n+                            double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, string1,\n+                            string1, date1, date1), s.get());\n@@ -284,1 +310,2 @@\n-                    double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, \"null\", string1, \"null\", date1), s.get());\n+                    double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, \"null\", string1,\n+                    \"null\", date1), s.get());\n@@ -290,4 +317,1 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testConvertWithDefaultLocale_Null() {\n-        Bindings.format(null);\n-    }\n+    public class BindingsTest {\n@@ -295,4 +319,6 @@\n-    @Test(expected=IllegalFormatException.class)\n-    public void testConvertWithDefaultLocale_IllegalObject() {\n-        Bindings.format(\"%tc\", double0);\n-    }\n+        @Test\n+        public void testConvertWithDefaultLocale_Null() {\n+            assertThrows(NullPointerException.class, () -> {\n+                Bindings.format(null);\n+            });\n+        }\n@@ -300,3 +326,13 @@\n-    @Test(expected=IllegalFormatException.class)\n-    public void testConvertWithDefaultLocale_IllegalValueModel() {\n-        Bindings.format(\"%tc\", doubleV);\n+        @Test\n+        public void testConvertWithDefaultLocale_IllegalObject() {\n+            assertThrows(IllegalFormatException.class, () -> {\n+                Bindings.format(\"%tc\", double0);\n+            });\n+        }\n+\n+        @Test\n+        public void testConvertWithDefaultLocale_IllegalValueModel() {\n+            assertThrows(IllegalFormatException.class, () -> {\n+                Bindings.format(\"%tc\", doubleV);\n+            });\n+        }\n@@ -316,1 +352,1 @@\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), dateV);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), dateV);\n@@ -326,4 +362,8 @@\n-                doubleV, double1, floatV, float1, longV, long1, intV, int1, booleanV, boolean1, stringV, string1, dateV, date1);\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), doubleV, floatV, longV, intV, booleanV, stringV, dateV);\n-        assertEquals(String.format(Locale.GERMAN, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n-                double0, double1, float0, float1, long0, long1, int0, int1, boolean0, boolean1, string0, string1, date0, date1), s.get());\n+                doubleV, double1, floatV, float1, longV, long1, intV, int1, booleanV, boolean1, stringV, string1, dateV,\n+                date1);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), doubleV, floatV, longV, intV, booleanV,\n+                stringV, dateV);\n+        assertEquals(\n+                String.format(Locale.GERMAN, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n+                        double0, double1, float0, float1, long0, long1, int0, int1, boolean0, boolean1, string0,\n+                        string1, date0, date1), s.get());\n@@ -337,2 +377,4 @@\n-        assertEquals(String.format(Locale.GERMAN, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n-                double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, string1, string1, date1, date1), s.get());\n+        assertEquals(\n+                String.format(Locale.GERMAN, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %tc, %tc\",\n+                        double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, string1,\n+                        string1, date1, date1), s.get());\n@@ -342,1 +384,2 @@\n-                double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, \"null\", string1, \"null\", date1), s.get());\n+                double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, \"null\", string1, \"null\",\n+                date1), s.get());\n@@ -360,1 +403,1 @@\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), dateV);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), dateV);\n@@ -370,2 +413,4 @@\n-                doubleV, double1, floatV, float1, longV, long1, intV, int1, booleanV, boolean1, stringV, string1, dateV, date1);\n-        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), doubleV, floatV, longV, intV, booleanV, stringV, dateV);\n+                doubleV, double1, floatV, float1, longV, long1, intV, int1, booleanV, boolean1, stringV, string1, dateV,\n+                date1);\n+        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), doubleV, floatV, longV, intV, booleanV,\n+                stringV, dateV);\n@@ -373,1 +418,2 @@\n-                double0, double1, float0, float1, long0, long1, int0, int1, boolean0, boolean1, string0, string1, date0, date1), s.get());\n+                double0, double1, float0, float1, long0, long1, int0, int1, boolean0, boolean1, string0, string1, date0,\n+                date1), s.get());\n@@ -382,1 +428,2 @@\n-                double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, string1, string1, date1, date1), s.get());\n+                double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, string1, string1, date1,\n+                date1), s.get());\n@@ -385,2 +432,4 @@\n-        assertEquals(String.format(Locale.US, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %s, %tc\",\n-                double1, double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, \"null\", string1, \"null\", date1), s.get());\n+        assertEquals(\n+                String.format(Locale.US, \"%8.3e, %8.3e, %6.3f, %6.3f, %d, %d, %d, %d, %s, %s, %s, %s, %s, %tc\", double1,\n+                        double1, float1, float1, long1, long1, int1, int1, boolean1, boolean1, \"null\", string1, \"null\",\n+                        date1), s.get());\n@@ -389,1 +438,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -391,1 +440,3 @@\n-        Bindings.format(Locale.US, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.format(Locale.US, null);\n+        });\n@@ -394,1 +445,1 @@\n-    @Test(expected=IllegalFormatException.class)\n+    @Test\n@@ -396,1 +447,3 @@\n-        Bindings.format(Locale.US, \"%tc\", double0);\n+        assertThrows(IllegalFormatException.class, () -> {\n+            Bindings.format(Locale.US, \"%tc\", double0);\n+        });\n@@ -399,1 +452,1 @@\n-    @Test(expected=IllegalFormatException.class)\n+    @Test\n@@ -401,1 +454,3 @@\n-        Bindings.format(Locale.US, \"%tc\", doubleV);\n+        assertThrows(IllegalFormatException.class, () -> {\n+            Bindings.format(Locale.US, \"%tc\", doubleV);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/StringFormatterTest.java","additions":122,"deletions":67,"binary":false,"changes":189,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/TestLogging.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -48,0 +48,1 @@\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -60,1 +61,1 @@\n-    @Before\n+    @BeforeEach\n@@ -88,1 +89,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -90,1 +91,3 @@\n-        ListListenerHelper.addListener(helper, (InvalidationListener)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListListenerHelper.addListener(helper, (InvalidationListener)null);\n+        });\n@@ -93,1 +96,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -95,1 +98,3 @@\n-        ListListenerHelper.removeListener(helper, (InvalidationListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListListenerHelper.removeListener(helper, (InvalidationListener) null);\n+        });\n@@ -98,1 +103,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -100,1 +105,3 @@\n-        ListListenerHelper.removeListener(helper, (ListChangeListener<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListListenerHelper.removeListener(helper, (ListChangeListener<Object>) null);\n+        });\n@@ -103,1 +110,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -105,1 +112,3 @@\n-        ListListenerHelper.addListener(helper, (ListChangeListener<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ListListenerHelper.addListener(helper, (ListChangeListener<Object>) null);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ListListenerHelperTest.java","additions":20,"deletions":11,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -44,3 +44,1 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -59,1 +57,1 @@\n-    @Before\n+    @BeforeEach\n@@ -87,1 +85,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -89,1 +87,3 @@\n-        MapListenerHelper.addListener(helper, (InvalidationListener)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            MapListenerHelper.addListener(helper, (InvalidationListener)null);\n+        });\n@@ -92,1 +92,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -94,1 +95,3 @@\n-        MapListenerHelper.removeListener(helper, (InvalidationListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            MapListenerHelper.removeListener(helper, (InvalidationListener) null);\n+        });\n@@ -97,1 +100,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -99,1 +103,3 @@\n-        MapListenerHelper.removeListener(helper, (MapChangeListener<Object, Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            MapListenerHelper.removeListener(helper, (MapChangeListener<Object, Object>) null);\n+        });\n@@ -102,1 +108,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -104,1 +111,3 @@\n-        MapListenerHelper.addListener(helper, (MapChangeListener<Object, Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            MapListenerHelper.addListener(helper, (MapChangeListener<Object, Object>) null);\n+        });\n@@ -107,0 +116,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/MapListenerHelperTest.java","additions":24,"deletions":14,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -35,3 +35,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -44,1 +44,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/MappingChangeTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,3 +32,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -40,1 +40,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/NonIterableChangeTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -44,3 +44,1 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -59,1 +57,1 @@\n-    @Before\n+    @BeforeEach\n@@ -87,1 +85,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -89,1 +87,3 @@\n-        SetListenerHelper.addListener(helper, (InvalidationListener)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            SetListenerHelper.addListener(helper, (InvalidationListener)null);\n+        });\n@@ -92,1 +92,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -94,1 +95,3 @@\n-        SetListenerHelper.removeListener(helper, (InvalidationListener) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            SetListenerHelper.removeListener(helper, (InvalidationListener) null);\n+        });\n@@ -97,1 +100,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -99,1 +103,3 @@\n-        SetListenerHelper.removeListener(helper, (SetChangeListener<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            SetListenerHelper.removeListener(helper, (SetChangeListener<Object>) null);\n+        });\n@@ -102,1 +108,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -104,1 +111,3 @@\n-        SetListenerHelper.addListener(helper, (SetChangeListener<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            SetListenerHelper.addListener(helper, (SetChangeListener<Object>) null);\n+        });\n@@ -107,0 +116,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/SetListenerHelperTest.java","additions":24,"deletions":14,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -29,2 +29,4 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import org.junit.jupiter.api.Test;\n@@ -44,2 +46,2 @@\n-                                      .append(compositeDispatcher)\n-                                      .append(terminalDispatcher);\n+                        .append(compositeDispatcher)\n+                        .append(terminalDispatcher);\n@@ -47,2 +49,2 @@\n-        Assert.assertNotNull(eventDispatchChain.dispatchEvent(\n-                                                    new EmptyEvent()));\n+        assertNotNull(eventDispatchChain.dispatchEvent(\n+                new EmptyEvent()));\n@@ -50,1 +52,1 @@\n-        Assert.assertEquals(1, terminalDispatcher.getCapturingEventCount());\n+        assertEquals(1, terminalDispatcher.getCapturingEventCount());\n@@ -54,1 +56,1 @@\n-        Assert.assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n+        assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n@@ -56,1 +58,1 @@\n-        Assert.assertEquals(1, terminalDispatcher.getCapturingEventCount());\n+        assertEquals(1, terminalDispatcher.getCapturingEventCount());\n@@ -60,1 +62,1 @@\n-        Assert.assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n+        assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n@@ -62,1 +64,1 @@\n-        Assert.assertEquals(1, terminalDispatcher.getCapturingEventCount());\n+        assertEquals(1, terminalDispatcher.getCapturingEventCount());\n@@ -66,1 +68,1 @@\n-        Assert.assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n+        assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n@@ -68,1 +70,1 @@\n-        Assert.assertEquals(1, terminalDispatcher.getCapturingEventCount());\n+        assertEquals(1, terminalDispatcher.getCapturingEventCount());\n@@ -72,1 +74,1 @@\n-        Assert.assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n+        assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n@@ -74,1 +76,1 @@\n-        Assert.assertEquals(2, terminalDispatcher.getCapturingEventCount());\n+        assertEquals(2, terminalDispatcher.getCapturingEventCount());\n@@ -78,1 +80,1 @@\n-        Assert.assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n+        assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n@@ -80,1 +82,1 @@\n-        Assert.assertEquals(3, terminalDispatcher.getCapturingEventCount());\n+        assertEquals(3, terminalDispatcher.getCapturingEventCount());\n@@ -84,1 +86,1 @@\n-        Assert.assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n+        assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n@@ -86,1 +88,1 @@\n-        Assert.assertEquals(4, terminalDispatcher.getCapturingEventCount());\n+        assertEquals(4, terminalDispatcher.getCapturingEventCount());\n@@ -97,18 +99,18 @@\n-        Assert.assertEquals(expectedChild1CapturingEventCount,\n-                            compositeDispatcher.getFirstChildDispatcher()\n-                                               .getCapturingEventCount());\n-        Assert.assertEquals(expectedChild2CapturingEventCount,\n-                            compositeDispatcher.getSecondChildDispatcher()\n-                                               .getCapturingEventCount());\n-        Assert.assertEquals(expectedChild3CapturingEventCount,\n-                            compositeDispatcher.getThirdChildDispatcher()\n-                                               .getCapturingEventCount());\n-        Assert.assertEquals(expectedChild1BubblingEventCount,\n-                            compositeDispatcher.getFirstChildDispatcher()\n-                                               .getBubblingEventCount());\n-        Assert.assertEquals(expectedChild2BubblingEventCount,\n-                            compositeDispatcher.getSecondChildDispatcher()\n-                                               .getBubblingEventCount());\n-        Assert.assertEquals(expectedChild3BubblingEventCount,\n-                            compositeDispatcher.getThirdChildDispatcher()\n-                                               .getBubblingEventCount());\n+        assertEquals(expectedChild1CapturingEventCount,\n+                compositeDispatcher.getFirstChildDispatcher()\n+                        .getCapturingEventCount());\n+        assertEquals(expectedChild2CapturingEventCount,\n+                compositeDispatcher.getSecondChildDispatcher()\n+                        .getCapturingEventCount());\n+        assertEquals(expectedChild3CapturingEventCount,\n+                compositeDispatcher.getThirdChildDispatcher()\n+                        .getCapturingEventCount());\n+        assertEquals(expectedChild1BubblingEventCount,\n+                compositeDispatcher.getFirstChildDispatcher()\n+                        .getBubblingEventCount());\n+        assertEquals(expectedChild2BubblingEventCount,\n+                compositeDispatcher.getSecondChildDispatcher()\n+                        .getBubblingEventCount());\n+        assertEquals(expectedChild3BubblingEventCount,\n+                compositeDispatcher.getThirdChildDispatcher()\n+                        .getBubblingEventCount());\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/event\/CompositeEventDispatcherTest.java","additions":39,"deletions":37,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -36,1 +36,1 @@\n-import org.junit.Assert;\n+import org.junit.jupiter.api.Assertions;\n@@ -38,2 +38,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -44,1 +44,1 @@\n-    @Before\n+    @BeforeEach\n@@ -62,2 +62,2 @@\n-        assertFalse(\"must not have handler after adding filter\", compositeEventHandler.hasHandler());\n-        assertTrue(\"must have filter\", compositeEventHandler.hasFilter());\n+        assertFalse(compositeEventHandler.hasHandler(), \"must not have handler after adding filter\");\n+        assertTrue(compositeEventHandler.hasFilter(), \"must have filter\");\n@@ -65,2 +65,2 @@\n-        assertFalse(\"must not have filter\", compositeEventHandler.hasFilter());\n-        assertFalse(\"must not have handler\", compositeEventHandler.hasHandler());\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter\");\n+        assertFalse(compositeEventHandler.hasHandler(), \"must not have handler\");\n@@ -79,4 +79,4 @@\n-        assertTrue(\"sanity: really added?\", CompositeEventHandlerShim.containsHandler(\n-                compositeEventHandler, weakEventHandler));\n-        assertFalse(\"must not have filter after adding handler\", compositeEventHandler.hasFilter());\n-        assertTrue(\"must have handler\", compositeEventHandler.hasHandler());\n+        assertTrue(CompositeEventHandlerShim.containsHandler(\n+                compositeEventHandler, weakEventHandler), \"sanity: really added?\");\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter after adding handler\");\n+        assertTrue(compositeEventHandler.hasHandler(), \"must have handler\");\n@@ -84,2 +84,2 @@\n-        assertFalse(\"must not have handler\", compositeEventHandler.hasHandler());\n-        assertFalse(\"must not have filter\", compositeEventHandler.hasFilter());\n+        assertFalse(compositeEventHandler.hasHandler(), \"must not have handler\");\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter\");\n@@ -101,2 +101,2 @@\n-        assertFalse(\"must not have handler after adding filter\", compositeEventHandler.hasHandler());\n-        assertTrue(\"must have filter\", compositeEventHandler.hasFilter());\n+        assertFalse(compositeEventHandler.hasHandler(), \"must not have handler after adding filter\");\n+        assertTrue(compositeEventHandler.hasFilter(), \"must have filter\");\n@@ -104,2 +104,2 @@\n-        assertFalse(\"must not have filter\", compositeEventHandler.hasFilter());\n-        assertFalse(\"must not have handler\", compositeEventHandler.hasHandler());\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter\");\n+        assertFalse(compositeEventHandler.hasHandler(), \"must not have handler\");\n@@ -118,4 +118,4 @@\n-        assertTrue(\"sanity: really added?\", CompositeEventHandlerShim.containsHandler(\n-                compositeEventHandler, weakEventHandler));\n-        assertFalse(\"must not have filter after adding handler\", compositeEventHandler.hasFilter());\n-        assertTrue(\"must have handler\", compositeEventHandler.hasHandler());\n+        assertTrue(CompositeEventHandlerShim.containsHandler(\n+                compositeEventHandler, weakEventHandler), \"sanity: really added?\");\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter after adding handler\");\n+        assertTrue(compositeEventHandler.hasHandler(), \"must have handler\");\n@@ -123,2 +123,2 @@\n-        assertFalse(\"must not have filter\", compositeEventHandler.hasFilter());\n-        assertFalse(\"must not have handler\", compositeEventHandler.hasHandler());\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter\");\n+        assertFalse(compositeEventHandler.hasHandler(), \"must not have handler\");\n@@ -135,2 +135,2 @@\n-        assertFalse(\"must not have handler after adding filter\", compositeEventHandler.hasHandler());\n-        assertTrue(\"must have filter\", compositeEventHandler.hasFilter());\n+        assertFalse(compositeEventHandler.hasHandler(), \"must not have handler after adding filter\");\n+        assertTrue(compositeEventHandler.hasFilter(), \"must have filter\");\n@@ -138,2 +138,2 @@\n-        assertFalse(\"must not have filter\", compositeEventHandler.hasFilter());\n-        assertFalse(\"must not have handler\", compositeEventHandler.hasHandler());\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter\");\n+        assertFalse(compositeEventHandler.hasHandler(), \"must not have handler\");\n@@ -150,4 +150,4 @@\n-        assertTrue(\"sanity: really added?\", CompositeEventHandlerShim.containsHandler(\n-                compositeEventHandler, eventCountingHandler));\n-        assertFalse(\"must not have filter after adding handler\", compositeEventHandler.hasFilter());\n-        assertTrue(\"must have handler\", compositeEventHandler.hasHandler());\n+        assertTrue(CompositeEventHandlerShim.containsHandler(\n+                compositeEventHandler, eventCountingHandler), \"sanity: really added?\");\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter after adding handler\");\n+        assertTrue(compositeEventHandler.hasHandler(), \"must have handler\");\n@@ -155,2 +155,2 @@\n-        assertFalse(\"must not have filter\", compositeEventHandler.hasFilter());\n-        assertFalse(\"must not have handler\", compositeEventHandler.hasHandler());\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter\");\n+        assertFalse(compositeEventHandler.hasHandler(), \"must not have handler\");\n@@ -168,2 +168,2 @@\n-        assertFalse(\"must not have filter after set handler\", compositeEventHandler.hasFilter());\n-        assertTrue(\"must have handler\", compositeEventHandler.hasHandler());\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter after set handler\");\n+        assertTrue(compositeEventHandler.hasHandler(), \"must have handler\");\n@@ -171,2 +171,2 @@\n-        assertFalse(\"must not have filter\", compositeEventHandler.hasFilter());\n-        assertFalse(\"must not have handler\", compositeEventHandler.hasHandler());\n+        assertFalse(compositeEventHandler.hasFilter(), \"must not have filter\");\n+        assertFalse(compositeEventHandler.hasHandler(), \"must not have handler\");\n@@ -184,2 +184,2 @@\n-        Assert.assertTrue(\n-            CompositeEventHandlerShim.containsHandler(compositeEventHandler, weakEventHandler));\n+        assertTrue(\n+                CompositeEventHandlerShim.containsHandler(compositeEventHandler, weakEventHandler));\n@@ -187,1 +187,1 @@\n-        Assert.assertEquals(0, eventCountingHandler.getEventCount());\n+        assertEquals(0, eventCountingHandler.getEventCount());\n@@ -189,1 +189,1 @@\n-        Assert.assertEquals(1, eventCountingHandler.getEventCount());\n+        assertEquals(1, eventCountingHandler.getEventCount());\n@@ -193,1 +193,1 @@\n-        Assert.assertFalse(\n+        assertFalse(\n@@ -196,1 +196,1 @@\n-        Assert.assertEquals(1, eventCountingHandler.getEventCount());\n+        assertEquals(1, eventCountingHandler.getEventCount());\n@@ -198,1 +198,1 @@\n-        Assert.assertEquals(1, eventCountingHandler.getEventCount());\n+        assertEquals(1, eventCountingHandler.getEventCount());\n@@ -210,1 +210,1 @@\n-        Assert.assertTrue(\n+        assertTrue(\n@@ -213,1 +213,1 @@\n-        Assert.assertEquals(1, eventCountingFilter.getEventCount());\n+        assertEquals(1, eventCountingFilter.getEventCount());\n@@ -215,1 +215,1 @@\n-        Assert.assertEquals(1, eventCountingFilter.getEventCount());\n+        assertEquals(1, eventCountingFilter.getEventCount());\n@@ -219,1 +219,1 @@\n-        Assert.assertFalse(\n+        assertFalse(\n@@ -222,1 +222,1 @@\n-        Assert.assertEquals(1, eventCountingFilter.getEventCount());\n+        assertEquals(1, eventCountingFilter.getEventCount());\n@@ -224,1 +224,1 @@\n-        Assert.assertEquals(1, eventCountingFilter.getEventCount());\n+        assertEquals(1, eventCountingFilter.getEventCount());\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/event\/CompositeEventHandlerTest.java","additions":52,"deletions":52,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import org.junit.Assert;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -53,1 +53,1 @@\n-        Assert.assertTrue(event instanceof ValueEvent);\n+        assertTrue(event instanceof ValueEvent);\n@@ -58,1 +58,1 @@\n-                                    valueEvent.getValue()));\n+                    valueEvent.getValue()));\n@@ -63,1 +63,1 @@\n-                                    valueEvent.getValue()));\n+                    valueEvent.getValue()));\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/event\/EventChangingDispatcher.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,2 +31,3 @@\n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -47,1 +48,1 @@\n-                                             .append(dispatcherC);\n+                .append(dispatcherC);\n@@ -49,1 +50,1 @@\n-        Assert.assertEquals(\"(B->(C))\", eventDispatchTree.toString());\n+        assertEquals(\"(B->(C))\", eventDispatchTree.toString());\n@@ -65,5 +66,5 @@\n-                    eventDispatchTree.createTree()\n-                                     .append(dispatchers[0])\n-                                     .append(dispatchers[1])\n-                                     .append(dispatchers[2])\n-                                     .append(dispatchers[3]));\n+                                 eventDispatchTree.createTree()\n+                                .append(dispatchers[0])\n+                                .append(dispatchers[1])\n+                                .append(dispatchers[2])\n+                                .append(dispatchers[3]));\n@@ -73,6 +74,6 @@\n-                    eventDispatchTree.createTree()\n-                                     .append(dispatchers[4])\n-                                     .append(dispatchers[6])\n-                                     .prepend(dispatchers[2])\n-                                     .prepend(dispatchers[1])\n-                                     .prepend(dispatchers[0]));\n+                                 eventDispatchTree.createTree()\n+                                .append(dispatchers[4])\n+                                .append(dispatchers[6])\n+                                .prepend(dispatchers[2])\n+                                .prepend(dispatchers[1])\n+                                .prepend(dispatchers[0]));\n@@ -82,7 +83,7 @@\n-                    eventDispatchTree.createTree()\n-                                     .prepend(dispatchers[7])\n-                                     .prepend(dispatchers[5])\n-                                     .prepend(dispatchers[4])\n-                                     .prepend(dispatchers[2])\n-                                     .prepend(dispatchers[1])\n-                                     .prepend(dispatchers[0]));\n+                                 eventDispatchTree.createTree()\n+                                .prepend(dispatchers[7])\n+                                .prepend(dispatchers[5])\n+                                .prepend(dispatchers[4])\n+                                .prepend(dispatchers[2])\n+                                .prepend(dispatchers[1])\n+                                .prepend(dispatchers[0]));\n@@ -92,7 +93,7 @@\n-                    eventDispatchTree.createTree()\n-                                     .prepend(dispatchers[2])\n-                                     .prepend(dispatchers[1])\n-                                     .prepend(dispatchers[0])\n-                                     .append(dispatchers[4])\n-                                     .append(dispatchers[5])\n-                                     .append(dispatchers[8]));\n+                                 eventDispatchTree.createTree()\n+                                .prepend(dispatchers[2])\n+                                .prepend(dispatchers[1])\n+                                .prepend(dispatchers[0])\n+                                .append(dispatchers[4])\n+                                .append(dispatchers[5])\n+                                .append(dispatchers[8]));\n@@ -107,8 +108,8 @@\n-                    eventDispatchTree.createTree()\n-                                     .append(dispatchers[0])\n-                                     .append(dispatchers[1])\n-                                     .append(dispatchers[2])\n-                                     .append(dispatchers[4])\n-                                     .append(dispatchers[6])\n-                                     .append(dispatchers[10])\n-                                     .append(dispatchers[11]));\n+                                 eventDispatchTree.createTree()\n+                                .append(dispatchers[0])\n+                                .append(dispatchers[1])\n+                                .append(dispatchers[2])\n+                                .append(dispatchers[4])\n+                                .append(dispatchers[6])\n+                                .append(dispatchers[10])\n+                                .append(dispatchers[11]));\n@@ -117,9 +118,9 @@\n-                    eventDispatchTree.createTree()\n-                                     .append(dispatchers[9])\n-                                     .append(dispatchers[0])\n-                                     .append(dispatchers[1])\n-                                     .append(dispatchers[2])\n-                                     .append(dispatchers[4])\n-                                     .append(dispatchers[6])\n-                                     .append(dispatchers[10])\n-                                     .append(dispatchers[11]));\n+                                 eventDispatchTree.createTree()\n+                                .append(dispatchers[9])\n+                                .append(dispatchers[0])\n+                                .append(dispatchers[1])\n+                                .append(dispatchers[2])\n+                                .append(dispatchers[4])\n+                                .append(dispatchers[6])\n+                                .append(dispatchers[10])\n+                                .append(dispatchers[11]));\n@@ -144,1 +145,1 @@\n-        Assert.assertEquals(\n+        assertEquals(\n@@ -146,2 +147,2 @@\n-                    + \"(7->(10),8->(10))))))),\"\n-                    + \"0->(1->(2->(4->(6->(10->(11)))))))\",\n+                        + \"(7->(10),8->(10))))))),\"\n+                        + \"0->(1->(2->(4->(6->(10->(11)))))))\",\n@@ -166,2 +167,2 @@\n-                    eventDispatchTree.createTree().append(dispatchers[2])\n-                                                  .append(dispatchers[4]));\n+                        eventDispatchTree.createTree().append(dispatchers[2])\n+                                .append(dispatchers[4]));\n@@ -171,3 +172,3 @@\n-                    eventDispatchTree.createTree().append(dispatchers[2])\n-                                                  .append(dispatchers[5])\n-                                                  .append(dispatchers[7]));\n+                        eventDispatchTree.createTree().append(dispatchers[2])\n+                                .append(dispatchers[5])\n+                                .append(dispatchers[7]));\n@@ -177,2 +178,2 @@\n-                    eventDispatchTree.createTree().append(dispatchers[3])\n-                                                  .append(dispatchers[6]));\n+                        eventDispatchTree.createTree().append(dispatchers[3])\n+                                .append(dispatchers[6]));\n@@ -222,1 +223,1 @@\n-            Assert.assertEquals(\n+            assertEquals(\n@@ -232,1 +233,1 @@\n-            Assert.assertEquals(\n+            assertEquals(\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/event\/EventDispatchTreeTest.java","additions":59,"deletions":58,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -28,3 +28,3 @@\n-import org.junit.Assert;\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -34,1 +34,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -47,1 +47,1 @@\n-    @Before\n+    @BeforeEach\n@@ -166,1 +166,1 @@\n-        assertEquals(message, expected, received.getValue());\n+        assertEquals(expected, received.getValue(), message);\n@@ -168,1 +168,1 @@\n-            assertSame(\"received event\", sent, received);\n+            assertSame(sent, received, \"received event\");\n@@ -170,1 +170,1 @@\n-            assertNotSame(\"received event\", sent, received);\n+            assertNotSame(sent, received, \"received event\");\n@@ -178,4 +178,4 @@\n-                                      .append(eventHandlerManager)\n-                                      .append(new EventChangingDispatcher(\n-                                                      Operation.add(4),\n-                                                      Operation.div(3)));\n+                        .append(eventHandlerManager)\n+                        .append(new EventChangingDispatcher(\n+                                Operation.add(4),\n+                                Operation.div(3)));\n@@ -186,2 +186,2 @@\n-                                          new ValueEvent(2));\n-        Assert.assertEquals(2, valueEvent.getValue());\n+                new ValueEvent(2));\n+        assertEquals(2, valueEvent.getValue());\n@@ -190,2 +190,2 @@\n-                                          new ValueEvent(5));\n-        Assert.assertEquals(3, valueEvent.getValue());\n+                new ValueEvent(5));\n+        assertEquals(3, valueEvent.getValue());\n@@ -221,1 +221,1 @@\n-        Assert.assertEquals(0, emptyEventCountingHandler.getEventCount());\n+        assertEquals(0, emptyEventCountingHandler.getEventCount());\n@@ -223,1 +223,1 @@\n-        Assert.assertEquals(1, emptyEventCountingHandler.getEventCount());\n+        assertEquals(1, emptyEventCountingHandler.getEventCount());\n@@ -225,1 +225,1 @@\n-        Assert.assertEquals(2, emptyEventCountingHandler.getEventCount());\n+        assertEquals(2, emptyEventCountingHandler.getEventCount());\n@@ -285,1 +285,1 @@\n-        Assert.assertEquals(0, emptyEventCountingHandler.getEventCount());\n+        assertEquals(0, emptyEventCountingHandler.getEventCount());\n@@ -287,1 +287,1 @@\n-        Assert.assertEquals(1, emptyEventCountingHandler.getEventCount());\n+        assertEquals(1, emptyEventCountingHandler.getEventCount());\n@@ -289,1 +289,1 @@\n-        Assert.assertEquals(2, emptyEventCountingHandler.getEventCount());\n+        assertEquals(2, emptyEventCountingHandler.getEventCount());\n@@ -328,1 +328,1 @@\n-        Assert.assertEquals(0, emptyEventCountingHandler.getEventCount());\n+        assertEquals(0, emptyEventCountingHandler.getEventCount());\n@@ -330,1 +330,1 @@\n-        Assert.assertEquals(1, emptyEventCountingHandler.getEventCount());\n+        assertEquals(1, emptyEventCountingHandler.getEventCount());\n@@ -332,1 +332,1 @@\n-        Assert.assertEquals(2, emptyEventCountingHandler.getEventCount());\n+        assertEquals(2, emptyEventCountingHandler.getEventCount());\n@@ -426,4 +426,4 @@\n-                                      .append(eventHandlerManager)\n-                                      .append(new EventChangingDispatcher(\n-                                                      Operation.add(4),\n-                                                      Operation.div(3)));\n+                        .append(eventHandlerManager)\n+                        .append(new EventChangingDispatcher(\n+                                Operation.add(4),\n+                                Operation.div(3)));\n@@ -444,2 +444,2 @@\n-                                          new ValueEvent(35));\n-        Assert.assertEquals(16, valueEvent.getValue());\n+                new ValueEvent(35));\n+        assertEquals(16, valueEvent.getValue());\n@@ -478,5 +478,5 @@\n-        Assert.assertEquals(5, rootEventCounter.getEventCount());\n-        Assert.assertEquals(3, valueEventCounter.getEventCount());\n-        Assert.assertEquals(1, valueAEventCounter.getEventCount());\n-        Assert.assertEquals(1, valueBEventCounter.getEventCount());\n-        Assert.assertEquals(2, emptyEventCounter.getEventCount());\n+        assertEquals(5, rootEventCounter.getEventCount());\n+        assertEquals(3, valueEventCounter.getEventCount());\n+        assertEquals(1, valueAEventCounter.getEventCount());\n+        assertEquals(1, valueBEventCounter.getEventCount());\n+        assertEquals(2, emptyEventCounter.getEventCount());\n@@ -515,5 +515,5 @@\n-        Assert.assertEquals(5, rootEventCounter.getEventCount());\n-        Assert.assertEquals(3, valueEventCounter.getEventCount());\n-        Assert.assertEquals(1, valueAEventCounter.getEventCount());\n-        Assert.assertEquals(1, valueBEventCounter.getEventCount());\n-        Assert.assertEquals(2, emptyEventCounter.getEventCount());\n+        assertEquals(5, rootEventCounter.getEventCount());\n+        assertEquals(3, valueEventCounter.getEventCount());\n+        assertEquals(1, valueAEventCounter.getEventCount());\n+        assertEquals(1, valueBEventCounter.getEventCount());\n+        assertEquals(2, emptyEventCounter.getEventCount());\n@@ -528,2 +528,2 @@\n-                                      .append(eventHandlerManager)\n-                                      .append(eventCountingDispatcher);\n+                        .append(eventHandlerManager)\n+                        .append(eventCountingDispatcher);\n@@ -544,3 +544,3 @@\n-        Assert.assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n-        Assert.assertEquals(1, eventCountingFilter.getEventCount());\n-        Assert.assertEquals(\n+        assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n+        assertEquals(1, eventCountingFilter.getEventCount());\n+        assertEquals(\n@@ -548,1 +548,1 @@\n-        Assert.assertEquals(1, eventCountingHandler.getEventCount());\n+        assertEquals(1, eventCountingHandler.getEventCount());\n@@ -559,3 +559,3 @@\n-        Assert.assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n-        Assert.assertEquals(2, eventCountingFilter.getEventCount());\n-        Assert.assertEquals(\n+        assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n+        assertEquals(2, eventCountingFilter.getEventCount());\n+        assertEquals(\n@@ -563,1 +563,1 @@\n-        Assert.assertEquals(2, eventCountingHandler.getEventCount());\n+        assertEquals(2, eventCountingHandler.getEventCount());\n@@ -572,2 +572,2 @@\n-                                      .append(eventHandlerManager)\n-                                      .append(eventCountingDispatcher);\n+                        .append(eventHandlerManager)\n+                        .append(eventCountingDispatcher);\n@@ -588,3 +588,3 @@\n-        Assert.assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n-        Assert.assertEquals(1, eventCountingFilter.getEventCount());\n-        Assert.assertEquals(\n+        assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n+        assertEquals(1, eventCountingFilter.getEventCount());\n+        assertEquals(\n@@ -592,1 +592,1 @@\n-        Assert.assertEquals(0, eventCountingHandler.getEventCount());\n+        assertEquals(0, eventCountingHandler.getEventCount());\n@@ -601,3 +601,3 @@\n-        Assert.assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n-        Assert.assertEquals(2, eventCountingFilter.getEventCount());\n-        Assert.assertEquals(\n+        assertNull(eventDispatchChain.dispatchEvent(new EmptyEvent()));\n+        assertEquals(2, eventCountingFilter.getEventCount());\n+        assertEquals(\n@@ -605,1 +605,1 @@\n-        Assert.assertEquals(0, eventCountingHandler.getEventCount());\n+        assertEquals(0, eventCountingHandler.getEventCount());\n@@ -608,1 +608,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -610,4 +610,7 @@\n-        eventHandlerManager.addEventHandler(\n-                null,\n-                event -> {\n-                });\n+        assertThrows(NullPointerException.class, () -> {\n+                    eventHandlerManager.addEventHandler(\n+                            null,\n+                            event -> {\n+                            });\n+                }\n+        );\n@@ -616,1 +619,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -618,1 +621,3 @@\n-        eventHandlerManager.addEventHandler(Event.ANY, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            eventHandlerManager.addEventHandler(Event.ANY, null);\n+        });\n@@ -621,1 +626,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -623,4 +629,7 @@\n-        eventHandlerManager.removeEventHandler(\n-                null,\n-                event -> {\n-                });\n+        assertThrows(NullPointerException.class, () -> {\n+                    eventHandlerManager.removeEventHandler(\n+                            null,\n+                            event -> {\n+                            });\n+                }\n+        );\n@@ -629,1 +638,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -631,1 +640,3 @@\n-        eventHandlerManager.removeEventHandler(Event.ANY, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            eventHandlerManager.removeEventHandler(Event.ANY, null);\n+        });\n@@ -634,1 +645,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -636,4 +648,7 @@\n-        eventHandlerManager.addEventFilter(\n-                null,\n-                event -> {\n-                });\n+        assertThrows(NullPointerException.class, () -> {\n+                    eventHandlerManager.addEventFilter(\n+                            null,\n+                            event -> {\n+                            });\n+                }\n+        );\n@@ -642,1 +657,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -644,1 +659,3 @@\n-        eventHandlerManager.addEventFilter(Event.ANY, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            eventHandlerManager.addEventFilter(Event.ANY, null);\n+        });\n@@ -647,1 +664,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -649,4 +667,7 @@\n-        eventHandlerManager.removeEventHandler(\n-                null,\n-                event -> {\n-                });\n+        assertThrows(NullPointerException.class, () -> {\n+                    eventHandlerManager.removeEventHandler(\n+                            null,\n+                            event -> {\n+                            });\n+                }\n+        );\n@@ -655,1 +676,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -657,1 +678,3 @@\n-        eventHandlerManager.removeEventHandler(Event.ANY, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            eventHandlerManager.removeEventHandler(Event.ANY, null);\n+        });\n@@ -660,1 +683,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -662,4 +686,7 @@\n-        eventHandlerManager.setEventHandler(\n-                null,\n-                event -> {\n-                });\n+        assertThrows(NullPointerException.class, () -> {\n+                    eventHandlerManager.setEventHandler(\n+                            null,\n+                            event -> {\n+                            });\n+                }\n+        );\n@@ -675,3 +702,3 @@\n-                                     new ValueEvent(eventType, initialValue),\n-                                     StubEventDispatchChain.EMPTY_CHAIN);\n-        Assert.assertEquals(calculatedValue, valueEvent.getValue());\n+                        new ValueEvent(eventType, initialValue),\n+                        StubEventDispatchChain.EMPTY_CHAIN);\n+        assertEquals(calculatedValue, valueEvent.getValue());\n@@ -683,2 +710,2 @@\n-                       new EmptyEvent(),\n-                       StubEventDispatchChain.EMPTY_CHAIN);\n+                new EmptyEvent(),\n+                StubEventDispatchChain.EMPTY_CHAIN);\n@@ -691,2 +718,2 @@\n-                       new ValueEvent(eventType, 0),\n-                       StubEventDispatchChain.EMPTY_CHAIN);\n+                new ValueEvent(eventType, 0),\n+                StubEventDispatchChain.EMPTY_CHAIN);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/event\/EventHandlerManagerTest.java","additions":128,"deletions":101,"binary":false,"changes":229,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -32,1 +32,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/runtime\/ModuleTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,3 +32,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -110,1 +110,1 @@\n-    @Before\n+    @BeforeEach\n@@ -183,1 +183,1 @@\n-        assertTrue(message, version.matches(SVSTR));\n+        assertTrue(version.matches(SVSTR), message);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/runtime\/VersionInfoTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/InvalidationListenerMock.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,3 +30,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -36,1 +36,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -40,1 +41,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -42,1 +43,3 @@\n-        new WeakInvalidationListener(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            new WeakInvalidationListener(null);\n+        });\n@@ -45,0 +48,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/WeakInvalidationListenerTest.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -31,3 +31,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -40,2 +40,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -54,1 +55,1 @@\n-    @Before\n+    @BeforeEach\n@@ -204,1 +205,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -206,3 +207,5 @@\n-        final BooleanProperty v = new SimpleBooleanProperty(true);\n-        property.bind(v);\n-        property.set(true);\n+        assertThrows(RuntimeException.class, () -> {\n+            final BooleanProperty v = new SimpleBooleanProperty(true);\n+            property.bind(v);\n+            property.set(true);\n+        });\n@@ -211,0 +214,1 @@\n+\n@@ -351,1 +355,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -353,1 +357,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -356,0 +362,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/BooleanPropertyBaseTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -50,1 +50,1 @@\n-    @BeforeClass\n+    @BeforeAll\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/BooleanPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,3 +31,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -40,2 +40,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -55,1 +56,1 @@\n-    @Before\n+    @BeforeEach\n@@ -205,1 +206,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -207,3 +208,5 @@\n-        final DoubleProperty v = new SimpleDoubleProperty(Math.PI);\n-        property.bind(v);\n-        property.set(Math.PI);\n+        assertThrows(RuntimeException.class, () -> {\n+            final DoubleProperty v = new SimpleDoubleProperty(Math.PI);\n+            property.bind(v);\n+            property.set(Math.PI);\n+        });\n@@ -212,0 +215,1 @@\n+\n@@ -356,1 +360,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -358,1 +362,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -361,0 +367,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/DoublePropertyBaseTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -51,1 +51,1 @@\n-    @BeforeClass\n+    @BeforeAll\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/DoublePropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,3 +31,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -40,2 +40,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -57,1 +58,1 @@\n-    @Before\n+    @BeforeEach\n@@ -207,1 +208,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -209,3 +210,5 @@\n-        final FloatProperty v = new SimpleFloatProperty(PI);\n-        property.bind(v);\n-        property.set(PI);\n+        assertThrows(RuntimeException.class, () -> {\n+            final FloatProperty v = new SimpleFloatProperty(PI);\n+            property.bind(v);\n+            property.set(PI);\n+        });\n@@ -214,0 +217,1 @@\n+\n@@ -360,1 +364,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -362,1 +366,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -365,0 +371,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/FloatPropertyBaseTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -51,1 +51,1 @@\n-    @BeforeClass\n+    @BeforeAll\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/FloatPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,3 +31,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -40,2 +41,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -56,1 +57,1 @@\n-    @Before\n+    @BeforeEach\n@@ -206,1 +207,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -208,3 +209,5 @@\n-        final IntegerProperty v = new SimpleIntegerProperty(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final IntegerProperty v = new SimpleIntegerProperty(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -213,0 +216,1 @@\n+\n@@ -351,1 +355,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -353,1 +357,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -356,0 +362,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/IntegerPropertyBaseTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -50,1 +50,1 @@\n-    @BeforeClass\n+    @BeforeAll\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/IntegerPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -64,1 +64,1 @@\n-    @Before\n+    @BeforeEach\n@@ -479,1 +479,1 @@\n-    @Test(expected = RuntimeException.class)\n+    @Test\n@@ -481,3 +481,5 @@\n-        final ListProperty<Object> v = new SimpleListProperty<>(VALUE_1a);\n-        property.bind(v);\n-        property.set(VALUE_1a);\n+        assertThrows(RuntimeException.class, () -> {\n+            final ListProperty<Object> v = new SimpleListProperty<>(VALUE_1a);\n+            property.bind(v);\n+            property.set(VALUE_1a);\n+        });\n@@ -486,0 +488,1 @@\n+\n@@ -585,1 +588,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -587,1 +590,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -590,0 +595,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ListPropertyBaseTest.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -41,2 +41,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ListPropertyTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,3 +31,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -40,2 +41,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -56,1 +57,1 @@\n-    @Before\n+    @BeforeEach\n@@ -206,1 +207,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -208,3 +209,5 @@\n-        final LongProperty v = new SimpleLongProperty(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final LongProperty v = new SimpleLongProperty(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -213,0 +216,1 @@\n+\n@@ -351,1 +355,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -353,1 +357,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -356,0 +362,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/LongPropertyBaseTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -50,1 +50,1 @@\n-    @BeforeClass\n+    @BeforeAll\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/LongPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -44,1 +44,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -84,1 +84,1 @@\n-    @Before\n+    @BeforeEach\n@@ -502,1 +502,1 @@\n-    @Test(expected = RuntimeException.class)\n+    @Test\n@@ -504,3 +504,5 @@\n-        final MapProperty<Object, Object> v = new SimpleMapProperty<>(VALUE_1a);\n-        property.bind(v);\n-        property.set(VALUE_1a);\n+        assertThrows(RuntimeException.class, () -> {\n+            final MapProperty<Object, Object> v = new SimpleMapProperty<>(VALUE_1a);\n+            property.bind(v);\n+            property.set(VALUE_1a);\n+        });\n@@ -509,0 +511,1 @@\n+\n@@ -608,1 +611,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -610,1 +613,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -613,0 +618,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/MapPropertyBaseTest.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -43,2 +43,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/MapPropertyTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,3 +31,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -39,2 +40,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -57,1 +58,1 @@\n-    @Before\n+    @BeforeEach\n@@ -207,1 +208,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -209,3 +210,5 @@\n-        final ObjectProperty<Object> v = new SimpleObjectProperty<>(VALUE_1a);\n-        property.bind(v);\n-        property.set(VALUE_1a);\n+        assertThrows(RuntimeException.class, () -> {\n+            final ObjectProperty<Object> v = new SimpleObjectProperty<>(VALUE_1a);\n+            property.bind(v);\n+            property.set(VALUE_1a);\n+        });\n@@ -214,0 +217,1 @@\n+\n@@ -278,1 +282,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -280,1 +284,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -283,0 +289,1 @@\n+\n@@ -446,1 +453,0 @@\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ObjectPropertyBaseTest.java","additions":19,"deletions":13,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -45,1 +45,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -58,1 +58,1 @@\n-            ArrayList<WeakReference<Property<?>>> refs) {\n+                           ArrayList<WeakReference<Property<?>>> refs) {\n@@ -66,1 +66,1 @@\n-        assertEquals(msg, numExpected, count);\n+        assertEquals(numExpected, count, msg);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ObjectPropertyLeakTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -37,1 +37,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ObjectPropertyTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -31,2 +31,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,1 @@\n-    @Before\n+    @BeforeEach\n@@ -73,1 +73,1 @@\n-    @Test(expected=IllegalStateException.class)\n+    @Test\n@@ -75,1 +75,3 @@\n-        Person.NO_READ.get(person);\n+        assertThrows(IllegalStateException.class, () -> {\n+            Person.NO_READ.get(person);\n+        });\n@@ -78,1 +80,2 @@\n-    @Test(expected=IllegalStateException.class)\n+\n+    @Test\n@@ -80,1 +83,3 @@\n-        Person.NO_READ.getProperty(person);\n+        assertThrows(IllegalStateException.class, () -> {\n+            Person.NO_READ.getProperty(person);\n+        });\n@@ -83,0 +88,1 @@\n+\n@@ -99,1 +105,1 @@\n-    @Test(expected=IllegalStateException.class)\n+    @Test\n@@ -101,1 +107,3 @@\n-        Person.NO_WRITE.set(person, 1);\n+        assertThrows(IllegalStateException.class, () -> {\n+            Person.NO_WRITE.set(person, 1);\n+        });\n@@ -104,0 +112,1 @@\n+\n@@ -111,1 +120,1 @@\n-    @Test(expected=IllegalStateException.class)\n+    @Test\n@@ -113,1 +122,3 @@\n-        Person.NO_READ_WRITE.get(person);\n+        assertThrows(IllegalStateException.class, () -> {\n+            Person.NO_READ_WRITE.get(person);\n+        });\n@@ -116,1 +127,2 @@\n-    @Test(expected=IllegalStateException.class)\n+\n+    @Test\n@@ -118,1 +130,3 @@\n-        Person.NO_READ_WRITE.set(person, 1);\n+        assertThrows(IllegalStateException.class, () -> {\n+            Person.NO_READ_WRITE.set(person, 1);\n+        });\n@@ -120,1 +134,0 @@\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/PropertyReferenceTest.java","additions":28,"deletions":15,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -35,1 +35,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -42,1 +42,1 @@\n-    @Before public void setUp() {\n+    @BeforeEach public void setUp() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/PropertyReferenceWithInterfacesTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyBooleanPropertyBaseTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -35,2 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,1 @@\n-    @Before\n+    @BeforeEach\n@@ -127,1 +127,0 @@\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyBooleanPropertyTest.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,3 +33,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -42,2 +43,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -59,1 +60,1 @@\n-    @Before\n+    @BeforeEach\n@@ -322,1 +323,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -324,3 +325,5 @@\n-        final BooleanProperty v = new SimpleBooleanProperty(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final BooleanProperty v = new SimpleBooleanProperty(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -329,0 +332,1 @@\n+\n@@ -553,1 +557,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -555,1 +559,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -558,0 +564,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyBooleanWrapperTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n@@ -106,1 +106,0 @@\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyDoublePropertyBaseTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -35,2 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,1 @@\n-    @Before\n+    @BeforeEach\n@@ -127,1 +127,0 @@\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyDoublePropertyTest.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,3 +33,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -42,2 +43,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -60,1 +61,1 @@\n-    @Before\n+    @BeforeEach\n@@ -323,1 +324,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -325,3 +326,5 @@\n-        final DoubleProperty v = new SimpleDoubleProperty(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final DoubleProperty v = new SimpleDoubleProperty(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -330,0 +333,1 @@\n+\n@@ -554,1 +558,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -556,1 +560,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -559,0 +565,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyDoubleWrapperTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n@@ -106,1 +106,0 @@\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyFloatPropertyBaseTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -35,2 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,1 @@\n-    @Before\n+    @BeforeEach\n@@ -127,1 +127,0 @@\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyFloatPropertyTest.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,3 +33,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -42,2 +43,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -60,1 +61,1 @@\n-    @Before\n+    @BeforeEach\n@@ -323,1 +324,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -325,3 +326,5 @@\n-        final FloatProperty v = new SimpleFloatProperty(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final FloatProperty v = new SimpleFloatProperty(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -330,0 +333,1 @@\n+\n@@ -554,1 +558,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -556,1 +560,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -559,0 +565,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyFloatWrapperTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n@@ -106,1 +106,0 @@\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyIntegerPropertyBaseTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -35,2 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyIntegerPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,3 +33,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -42,2 +43,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -59,1 +60,1 @@\n-    @Before\n+    @BeforeEach\n@@ -322,1 +323,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -324,3 +325,5 @@\n-        final IntegerProperty v = new SimpleIntegerProperty(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final IntegerProperty v = new SimpleIntegerProperty(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -329,0 +332,1 @@\n+\n@@ -553,1 +557,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -555,1 +559,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -558,0 +564,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyIntegerWrapperTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -52,1 +52,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyListPropertyBaseTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -38,1 +38,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -44,1 +44,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyListPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -59,1 +59,1 @@\n-    @Before\n+    @BeforeEach\n@@ -322,1 +322,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -324,3 +324,5 @@\n-        final ListProperty<Object> v = new SimpleListProperty<>(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final ListProperty<Object> v = new SimpleListProperty<>(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -329,0 +331,1 @@\n+\n@@ -553,1 +556,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -555,1 +558,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -558,0 +563,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyListWrapperTest.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyLongPropertyBaseTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -36,2 +36,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyLongPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,3 +33,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -42,2 +43,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -59,1 +60,1 @@\n-    @Before\n+    @BeforeEach\n@@ -322,1 +323,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -324,3 +325,5 @@\n-        final LongProperty v = new SimpleLongProperty(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final LongProperty v = new SimpleLongProperty(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -329,0 +332,1 @@\n+\n@@ -553,1 +557,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -555,1 +559,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -558,0 +564,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyLongWrapperTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -54,1 +54,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyMapPropertyBaseTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -38,1 +38,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -44,1 +44,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyMapPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -59,1 +59,1 @@\n-    @Before\n+    @BeforeEach\n@@ -322,1 +322,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -324,3 +324,5 @@\n-        final MapProperty<Object, Object> v = new SimpleMapProperty<>(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final MapProperty<Object, Object> v = new SimpleMapProperty<>(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -329,0 +331,1 @@\n+\n@@ -553,1 +556,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -555,1 +558,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -558,0 +563,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyMapWrapperTest.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -47,1 +47,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyObjectPropertyBaseTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,2 +33,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyObjectPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,3 +33,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -41,2 +42,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -58,1 +59,1 @@\n-    @Before\n+    @BeforeEach\n@@ -321,1 +322,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -323,3 +324,5 @@\n-        final ObjectProperty<Object> v = new SimpleObjectProperty<>(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final ObjectProperty<Object> v = new SimpleObjectProperty<>(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -328,0 +331,1 @@\n+\n@@ -552,1 +556,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -554,1 +558,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -557,0 +563,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyObjectWrapperTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -52,1 +52,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlySetPropertyBaseTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -38,1 +38,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -44,1 +44,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlySetPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -57,1 +57,1 @@\n-    @Before\n+    @BeforeEach\n@@ -320,1 +320,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -322,3 +322,5 @@\n-        final SetProperty<Object> v = new SimpleSetProperty<>(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final SetProperty<Object> v = new SimpleSetProperty<>(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -327,0 +329,1 @@\n+\n@@ -551,1 +554,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -553,1 +556,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -556,0 +561,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlySetWrapperTest.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -46,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyStringPropertyBaseTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,2 +33,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyStringPropertyTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,3 +33,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -42,2 +43,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -59,1 +60,1 @@\n-    @Before\n+    @BeforeEach\n@@ -322,1 +323,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -324,3 +325,5 @@\n-        final StringProperty v = new SimpleStringProperty(VALUE_1);\n-        property.bind(v);\n-        property.set(VALUE_1);\n+        assertThrows(RuntimeException.class, () -> {\n+            final StringProperty v = new SimpleStringProperty(VALUE_1);\n+            property.bind(v);\n+            property.set(VALUE_1);\n+        });\n@@ -329,0 +332,1 @@\n+\n@@ -553,1 +557,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -555,1 +559,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -558,0 +564,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/ReadOnlyStringWrapperTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -64,1 +64,1 @@\n-    @Before\n+    @BeforeEach\n@@ -438,1 +438,1 @@\n-    @Test(expected = RuntimeException.class)\n+    @Test\n@@ -440,3 +440,5 @@\n-        final SetProperty<Object> v = new SimpleSetProperty<>(VALUE_1a);\n-        property.bind(v);\n-        property.set(VALUE_1a);\n+        assertThrows(RuntimeException.class, () -> {\n+            final SetProperty<Object> v = new SimpleSetProperty<>(VALUE_1a);\n+            property.bind(v);\n+            property.set(VALUE_1a);\n+        });\n@@ -445,0 +447,1 @@\n+\n@@ -544,1 +547,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -546,1 +549,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -549,0 +554,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SetPropertyBaseTest.java","additions":16,"deletions":10,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -41,2 +41,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SetPropertyTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,1 +33,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SimpleBooleanPropertyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,1 +33,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SimpleDoublePropertyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,1 +33,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SimpleFloatPropertyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,1 +33,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SimpleIntegerPropertyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SimpleListPropertyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,1 +33,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SimpleLongPropertyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,1 +33,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SimpleObjectPropertyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,1 +33,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/SimpleStringPropertyTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,3 +31,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -39,2 +40,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -57,1 +58,1 @@\n-    @Before\n+    @BeforeEach\n@@ -206,1 +207,1 @@\n-    @Test(expected=RuntimeException.class)\n+    @Test\n@@ -208,3 +209,5 @@\n-        final StringProperty v = new SimpleStringProperty(VALUE_1a);\n-        property.bind(v);\n-        property.set(VALUE_1a);\n+        assertThrows(RuntimeException.class, () -> {\n+            final StringProperty v = new SimpleStringProperty(VALUE_1a);\n+            property.bind(v);\n+            property.set(VALUE_1a);\n+        });\n@@ -213,0 +216,1 @@\n+\n@@ -277,1 +281,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -279,1 +283,3 @@\n-        property.bind(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            property.bind(null);\n+        });\n@@ -282,0 +288,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/StringPropertyBaseTest.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -37,1 +37,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/StringPropertyTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanBooleanPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanBooleanProperty_prim_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanDoublePropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanDoubleProperty_prim_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanFloatPropertyBuilderaTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanFloatProperty_prim_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanIntegerPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanIntegerProperty_prim_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanLongPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanLongProperty_prim_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanObjectPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/JavaBeanStringPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanBooleanPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanBooleanProperty_prim_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanDoublePropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanDoubleProperty_prim_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanFloatPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanFloatProperty_prim_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanIntegerPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanIntegerProperty_prim_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanLongPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanLongProperty_prim_Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanObjectPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -44,1 +44,1 @@\n-*\/\n+ *\/\n@@ -54,1 +54,1 @@\n-    @Before\n+    @BeforeEach\n@@ -64,1 +64,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -66,5 +66,8 @@\n-        try {\n-            this.property = extractProperty(null);\n-        } catch (NoSuchMethodException e) {\n-            fail();\n-        }\n+        assertThrows(NullPointerException.class, () -> {\n+            try {\n+                this.property = extractProperty(null);\n+            }\n+            catch (NoSuchMethodException e) {\n+                fail();\n+            }\n+        });\n@@ -91,1 +94,1 @@\n-    @Test(expected = UndeclaredThrowableException.class)\n+    @Test\n@@ -93,2 +96,4 @@\n-        bean.setFailureMode(true);\n-        property.getValue();\n+        assertThrows(UndeclaredThrowableException.class, () -> {\n+            bean.setFailureMode(true);\n+            property.getValue();\n+        });\n@@ -97,0 +102,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanPropertyTestBase.java","additions":20,"deletions":14,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanStringPropertyTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/ChangeListenerMock.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,2 +34,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -47,1 +48,1 @@\n-    @Before\n+    @BeforeEach\n@@ -181,1 +182,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -183,1 +184,3 @@\n-        valueModel.addListener((InvalidationListener)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            valueModel.addListener((InvalidationListener)null);\n+        });\n@@ -186,1 +189,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -188,1 +192,3 @@\n-        valueModel.addListener((ChangeListener<Object>)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            valueModel.addListener((ChangeListener<Object>)null);\n+        });\n@@ -191,1 +197,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -193,1 +200,3 @@\n-        valueModel.removeListener((InvalidationListener)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            valueModel.removeListener((InvalidationListener)null);\n+        });\n@@ -196,1 +205,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -198,1 +208,3 @@\n-        valueModel.removeListener((ChangeListener<Object>)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            valueModel.removeListener((ChangeListener<Object>)null);\n+        });\n@@ -201,0 +213,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/ObservableValueBaseTest.java","additions":24,"deletions":11,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/ObservableValueFluentBindingsTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -34,1 +34,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -38,1 +38,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -40,1 +40,3 @@\n-        new WeakChangeListener<>(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            new WeakChangeListener<>(null);\n+        });\n@@ -43,0 +45,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/beans\/value\/WeakChangeListenerTest.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -36,1 +36,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -40,1 +40,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingToStringTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,3 +38,3 @@\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -59,1 +59,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -64,1 +64,1 @@\n-    @Before\n+    @BeforeEach\n@@ -90,1 +90,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -92,1 +92,3 @@\n-        Bindings.size((ObservableList<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.size((ObservableList<Object>) null);\n+        });\n@@ -95,0 +97,1 @@\n+\n@@ -113,1 +116,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -115,1 +118,3 @@\n-        Bindings.isEmpty((ObservableList<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.isEmpty((ObservableList<Object>) null);\n+        });\n@@ -118,0 +123,1 @@\n+\n@@ -136,1 +142,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -138,1 +144,3 @@\n-        Bindings.isNotEmpty((ObservableList<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.isNotEmpty((ObservableList<Object>) null);\n+        });\n@@ -141,0 +149,1 @@\n+\n@@ -192,1 +201,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -194,1 +203,3 @@\n-        Bindings.valueAt(null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.valueAt(null, 0);\n+        });\n@@ -197,1 +208,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -199,1 +211,3 @@\n-        Bindings.valueAt(property, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.valueAt(property, -1);\n+        });\n@@ -202,0 +216,1 @@\n+\n@@ -265,1 +280,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -267,1 +282,3 @@\n-        Bindings.valueAt((ObservableList<Object>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.valueAt((ObservableList<Object>)null, index);\n+        });\n@@ -270,1 +287,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -272,1 +290,3 @@\n-        Bindings.valueAt(property, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.valueAt(property, null);\n+        });\n@@ -275,0 +295,1 @@\n+\n@@ -333,1 +354,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -335,1 +356,3 @@\n-        Bindings.booleanValueAt(null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.booleanValueAt(null, 0);\n+        });\n@@ -338,1 +361,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -340,2 +364,4 @@\n-        final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n-        Bindings.booleanValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n+            Bindings.booleanValueAt(localProperty, -1);\n+        });\n@@ -344,0 +370,1 @@\n+\n@@ -425,1 +452,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -427,1 +454,3 @@\n-        Bindings.booleanValueAt((ObservableList<Boolean>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.booleanValueAt((ObservableList<Boolean>)null, index);\n+        });\n@@ -430,1 +459,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -432,2 +462,4 @@\n-        final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n-        Bindings.booleanValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n+            Bindings.booleanValueAt(localProperty, null);\n+        });\n@@ -436,0 +468,1 @@\n+\n@@ -494,1 +527,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -496,1 +529,3 @@\n-        Bindings.doubleValueAt(null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.doubleValueAt(null, 0);\n+        });\n@@ -499,1 +534,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -501,2 +537,4 @@\n-        final ListProperty<Double> localProperty = new SimpleListProperty<>();\n-        Bindings.doubleValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<Double> localProperty = new SimpleListProperty<>();\n+            Bindings.doubleValueAt(localProperty, -1);\n+        });\n@@ -505,0 +543,1 @@\n+\n@@ -586,1 +625,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -588,1 +627,3 @@\n-        Bindings.doubleValueAt((ObservableList<Double>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.doubleValueAt((ObservableList<Double>)null, index);\n+        });\n@@ -591,1 +632,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -593,2 +635,4 @@\n-        final ListProperty<Double> localProperty = new SimpleListProperty<>();\n-        Bindings.doubleValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<Double> localProperty = new SimpleListProperty<>();\n+            Bindings.doubleValueAt(localProperty, null);\n+        });\n@@ -597,0 +641,1 @@\n+\n@@ -655,1 +700,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -657,1 +702,3 @@\n-        Bindings.floatValueAt((ObservableFloatArray) null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.floatValueAt((ObservableFloatArray) null, 0);\n+        });\n@@ -660,1 +707,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -662,2 +710,4 @@\n-        final ListProperty<Float> localProperty = new SimpleListProperty<>();\n-        Bindings.floatValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<Float> localProperty = new SimpleListProperty<>();\n+            Bindings.floatValueAt(localProperty, -1);\n+        });\n@@ -666,0 +716,1 @@\n+\n@@ -747,1 +798,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -749,1 +800,3 @@\n-        Bindings.floatValueAt((ObservableList<Float>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.floatValueAt((ObservableList<Float>)null, index);\n+        });\n@@ -752,1 +805,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -754,2 +808,4 @@\n-        final ListProperty<Float> localProperty = new SimpleListProperty<>();\n-        Bindings.floatValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<Float> localProperty = new SimpleListProperty<>();\n+            Bindings.floatValueAt(localProperty, null);\n+        });\n@@ -758,0 +814,1 @@\n+\n@@ -816,1 +873,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -818,1 +875,3 @@\n-        Bindings.integerValueAt((ObservableIntegerArray) null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.integerValueAt((ObservableIntegerArray) null, 0);\n+        });\n@@ -821,1 +880,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -823,2 +883,4 @@\n-        final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n-        Bindings.integerValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n+            Bindings.integerValueAt(localProperty, -1);\n+        });\n@@ -827,0 +889,1 @@\n+\n@@ -908,1 +971,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -910,1 +973,3 @@\n-        Bindings.integerValueAt((ObservableList<Integer>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.integerValueAt((ObservableList<Integer>)null, index);\n+        });\n@@ -913,1 +978,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -915,2 +981,4 @@\n-        final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n-        Bindings.integerValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n+            Bindings.integerValueAt(localProperty, null);\n+        });\n@@ -919,0 +987,1 @@\n+\n@@ -977,1 +1046,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -979,1 +1048,3 @@\n-        Bindings.longValueAt(null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.longValueAt(null, 0);\n+        });\n@@ -982,1 +1053,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -984,2 +1056,4 @@\n-        final ListProperty<Long> localProperty = new SimpleListProperty<>();\n-        Bindings.longValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<Long> localProperty = new SimpleListProperty<>();\n+            Bindings.longValueAt(localProperty, -1);\n+        });\n@@ -988,0 +1062,1 @@\n+\n@@ -1069,1 +1144,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -1071,1 +1146,3 @@\n-        Bindings.longValueAt((ObservableList<Long>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.longValueAt((ObservableList<Long>)null, index);\n+        });\n@@ -1074,1 +1151,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -1076,2 +1154,4 @@\n-        final ListProperty<Long> localProperty = new SimpleListProperty<>();\n-        Bindings.longValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<Long> localProperty = new SimpleListProperty<>();\n+            Bindings.longValueAt(localProperty, null);\n+        });\n@@ -1080,0 +1160,1 @@\n+\n@@ -1138,1 +1219,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -1140,1 +1221,3 @@\n-        Bindings.stringValueAt(null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.stringValueAt(null, 0);\n+        });\n@@ -1143,1 +1226,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -1145,2 +1229,4 @@\n-        final ListProperty<String> localProperty = new SimpleListProperty<>();\n-        Bindings.stringValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<String> localProperty = new SimpleListProperty<>();\n+            Bindings.stringValueAt(localProperty, -1);\n+        });\n@@ -1149,0 +1235,1 @@\n+\n@@ -1219,1 +1306,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -1221,1 +1308,3 @@\n-        Bindings.stringValueAt((ObservableList<String>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.stringValueAt((ObservableList<String>)null, index);\n+        });\n@@ -1224,1 +1313,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -1226,2 +1316,4 @@\n-        final ListProperty<String> localProperty = new SimpleListProperty<>();\n-        Bindings.stringValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<String> localProperty = new SimpleListProperty<>();\n+            Bindings.stringValueAt(localProperty, null);\n+        });\n@@ -1229,2 +1321,0 @@\n-\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsArrayTest.java","additions":172,"deletions":82,"binary":false,"changes":254,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -38,2 +38,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -47,1 +47,1 @@\n-    @Before\n+    @BeforeEach\n@@ -139,1 +139,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -141,1 +141,3 @@\n-        Bindings.and(null, op1);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.and(null, op1);\n+        });\n@@ -144,1 +146,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -146,1 +149,3 @@\n-        Bindings.and(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.and(op1, null);\n+        });\n@@ -149,0 +154,1 @@\n+\n@@ -234,1 +240,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -236,1 +242,3 @@\n-        Bindings.or(null, op1);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.or(null, op1);\n+        });\n@@ -239,1 +247,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -241,1 +250,3 @@\n-        Bindings.or(op1, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.or(op1, null);\n+        });\n@@ -244,0 +255,1 @@\n+\n@@ -277,1 +289,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -279,1 +291,3 @@\n-        Bindings.not(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.not(null);\n+        });\n@@ -282,0 +296,1 @@\n+\n@@ -341,1 +356,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -343,1 +358,3 @@\n-        Bindings.equal((ObservableBooleanValue)null, op1);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.equal((ObservableBooleanValue)null, op1);\n+        });\n@@ -346,1 +363,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -348,1 +366,3 @@\n-        Bindings.equal(op1, (ObservableBooleanValue)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.equal(op1, (ObservableBooleanValue)null);\n+        });\n@@ -351,0 +371,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsBooleanTest.java","additions":39,"deletions":18,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -39,2 +39,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -48,1 +49,1 @@\n-    @Before\n+    @BeforeEach\n@@ -139,1 +140,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -141,1 +142,3 @@\n-        Bindings.isNull(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.isNull(null);\n+        });\n@@ -144,1 +147,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -146,1 +150,3 @@\n-        Bindings.isNotNull(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.isNotNull(null);\n+        });\n@@ -149,0 +155,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsIsNullTest.java","additions":16,"deletions":9,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -36,3 +36,3 @@\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -57,1 +57,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -62,1 +62,1 @@\n-    @Before\n+    @BeforeEach\n@@ -88,1 +88,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -90,1 +90,3 @@\n-        Bindings.size((ObservableList<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.size((ObservableList<Object>) null);\n+        });\n@@ -93,0 +95,1 @@\n+\n@@ -111,1 +114,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -113,1 +116,3 @@\n-        Bindings.isEmpty((ObservableList<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.isEmpty((ObservableList<Object>) null);\n+        });\n@@ -116,0 +121,1 @@\n+\n@@ -134,1 +140,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -136,1 +142,3 @@\n-        Bindings.isNotEmpty((ObservableList<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.isNotEmpty((ObservableList<Object>) null);\n+        });\n@@ -139,0 +147,1 @@\n+\n@@ -190,1 +199,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -192,1 +201,3 @@\n-        Bindings.valueAt(null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.valueAt(null, 0);\n+        });\n@@ -195,1 +206,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -197,1 +209,3 @@\n-        Bindings.valueAt(property, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Bindings.valueAt(property, -1);\n+        });\n@@ -200,0 +214,1 @@\n+\n@@ -263,1 +278,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -265,1 +280,3 @@\n-        Bindings.valueAt((ObservableList<Object>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.valueAt((ObservableList<Object>)null, index);\n+        });\n@@ -268,1 +285,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -270,1 +288,3 @@\n-        Bindings.valueAt(property, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.valueAt(property, null);\n+        });\n@@ -273,0 +293,1 @@\n+\n@@ -331,1 +352,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -333,1 +354,3 @@\n-        Bindings.booleanValueAt(null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.booleanValueAt(null, 0);\n+        });\n@@ -336,1 +359,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -338,2 +362,4 @@\n-        final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n-        Bindings.booleanValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n+            Bindings.booleanValueAt(localProperty, -1);\n+        });\n@@ -342,0 +368,1 @@\n+\n@@ -423,1 +450,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -425,1 +452,3 @@\n-        Bindings.booleanValueAt((ObservableList<Boolean>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.booleanValueAt((ObservableList<Boolean>)null, index);\n+        });\n@@ -428,1 +457,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -430,2 +460,4 @@\n-        final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n-        Bindings.booleanValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<Boolean> localProperty = new SimpleListProperty<>();\n+            Bindings.booleanValueAt(localProperty, null);\n+        });\n@@ -434,0 +466,1 @@\n+\n@@ -492,1 +525,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -494,1 +527,3 @@\n-        Bindings.doubleValueAt(null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.doubleValueAt(null, 0);\n+        });\n@@ -497,1 +532,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -499,2 +535,4 @@\n-        final ListProperty<Double> localProperty = new SimpleListProperty<>();\n-        Bindings.doubleValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<Double> localProperty = new SimpleListProperty<>();\n+            Bindings.doubleValueAt(localProperty, -1);\n+        });\n@@ -503,0 +541,1 @@\n+\n@@ -584,1 +623,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -586,1 +625,3 @@\n-        Bindings.doubleValueAt((ObservableList<Double>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.doubleValueAt((ObservableList<Double>)null, index);\n+        });\n@@ -589,1 +630,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -591,2 +633,4 @@\n-        final ListProperty<Double> localProperty = new SimpleListProperty<>();\n-        Bindings.doubleValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<Double> localProperty = new SimpleListProperty<>();\n+            Bindings.doubleValueAt(localProperty, null);\n+        });\n@@ -595,0 +639,1 @@\n+\n@@ -653,1 +698,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -655,1 +700,3 @@\n-        Bindings.floatValueAt((ObservableList) null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.floatValueAt((ObservableList) null, 0);\n+        });\n@@ -658,1 +705,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -660,2 +708,4 @@\n-        final ListProperty<Float> localProperty = new SimpleListProperty<>();\n-        Bindings.floatValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<Float> localProperty = new SimpleListProperty<>();\n+            Bindings.floatValueAt(localProperty, -1);\n+        });\n@@ -664,0 +714,1 @@\n+\n@@ -745,1 +796,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -747,1 +798,3 @@\n-        Bindings.floatValueAt((ObservableList<Float>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.floatValueAt((ObservableList<Float>)null, index);\n+        });\n@@ -750,1 +803,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -752,2 +806,4 @@\n-        final ListProperty<Float> localProperty = new SimpleListProperty<>();\n-        Bindings.floatValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<Float> localProperty = new SimpleListProperty<>();\n+            Bindings.floatValueAt(localProperty, null);\n+        });\n@@ -756,0 +812,1 @@\n+\n@@ -814,1 +871,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -816,1 +873,3 @@\n-        Bindings.integerValueAt((ObservableList) null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.integerValueAt((ObservableList) null, 0);\n+        });\n@@ -819,1 +878,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -821,2 +881,4 @@\n-        final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n-        Bindings.integerValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n+            Bindings.integerValueAt(localProperty, -1);\n+        });\n@@ -825,0 +887,1 @@\n+\n@@ -906,1 +969,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -908,1 +971,3 @@\n-        Bindings.integerValueAt((ObservableList<Integer>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.integerValueAt((ObservableList<Integer>)null, index);\n+        });\n@@ -911,1 +976,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -913,2 +979,4 @@\n-        final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n-        Bindings.integerValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<Integer> localProperty = new SimpleListProperty<>();\n+            Bindings.integerValueAt(localProperty, null);\n+        });\n@@ -917,0 +985,1 @@\n+\n@@ -975,1 +1044,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -977,1 +1046,3 @@\n-        Bindings.longValueAt(null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.longValueAt(null, 0);\n+        });\n@@ -980,1 +1051,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -982,2 +1054,4 @@\n-        final ListProperty<Long> localProperty = new SimpleListProperty<>();\n-        Bindings.longValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<Long> localProperty = new SimpleListProperty<>();\n+            Bindings.longValueAt(localProperty, -1);\n+        });\n@@ -986,0 +1060,1 @@\n+\n@@ -1067,1 +1142,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -1069,1 +1144,3 @@\n-        Bindings.longValueAt((ObservableList<Long>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.longValueAt((ObservableList<Long>)null, index);\n+        });\n@@ -1072,1 +1149,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -1074,2 +1152,4 @@\n-        final ListProperty<Long> localProperty = new SimpleListProperty<>();\n-        Bindings.longValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<Long> localProperty = new SimpleListProperty<>();\n+            Bindings.longValueAt(localProperty, null);\n+        });\n@@ -1078,0 +1158,1 @@\n+\n@@ -1136,1 +1217,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -1138,1 +1219,3 @@\n-        Bindings.stringValueAt(null, 0);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.stringValueAt(null, 0);\n+        });\n@@ -1141,1 +1224,2 @@\n-    @Test(expected = IllegalArgumentException.class)\n+\n+    @Test\n@@ -1143,2 +1227,4 @@\n-        final ListProperty<String> localProperty = new SimpleListProperty<>();\n-        Bindings.stringValueAt(localProperty, -1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            final ListProperty<String> localProperty = new SimpleListProperty<>();\n+            Bindings.stringValueAt(localProperty, -1);\n+        });\n@@ -1147,0 +1233,1 @@\n+\n@@ -1217,1 +1304,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -1219,1 +1306,3 @@\n-        Bindings.stringValueAt((ObservableList<String>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.stringValueAt((ObservableList<String>)null, index);\n+        });\n@@ -1222,1 +1311,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -1224,2 +1314,4 @@\n-        final ListProperty<String> localProperty = new SimpleListProperty<>();\n-        Bindings.stringValueAt(localProperty, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final ListProperty<String> localProperty = new SimpleListProperty<>();\n+            Bindings.stringValueAt(localProperty, null);\n+        });\n@@ -1227,2 +1319,0 @@\n-\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsListTest.java","additions":172,"deletions":82,"binary":false,"changes":254,"status":"modified"},{"patch":"@@ -37,3 +37,3 @@\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -59,1 +59,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -64,1 +64,1 @@\n-    @Before\n+    @BeforeEach\n@@ -93,1 +93,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -95,1 +95,3 @@\n-        Bindings.size((ObservableMap<String, Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.size((ObservableMap<String, Object>) null);\n+        });\n@@ -98,0 +100,1 @@\n+\n@@ -117,1 +120,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -119,1 +122,3 @@\n-        Bindings.isEmpty((ObservableMap<String, Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.isEmpty((ObservableMap<String, Object>) null);\n+        });\n@@ -122,0 +127,1 @@\n+\n@@ -141,1 +147,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -143,1 +149,3 @@\n-        Bindings.isNotEmpty((ObservableMap<String, Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.isNotEmpty((ObservableMap<String, Object>) null);\n+        });\n@@ -146,0 +154,1 @@\n+\n@@ -185,1 +194,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -187,1 +196,3 @@\n-        Bindings.valueAt(null, key1);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.valueAt(null, key1);\n+        });\n@@ -190,0 +201,1 @@\n+\n@@ -242,1 +254,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -244,1 +256,3 @@\n-        Bindings.valueAt((ObservableMap<String, Object>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.valueAt((ObservableMap<String, Object>)null, index);\n+        });\n@@ -247,1 +261,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -249,1 +264,3 @@\n-        Bindings.valueAt(property, (ObservableValue<String>)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.valueAt(property, (ObservableValue<String>)null);\n+        });\n@@ -252,0 +269,1 @@\n+\n@@ -313,1 +331,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -315,1 +333,3 @@\n-        Bindings.booleanValueAt(null, key1);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.booleanValueAt(null, key1);\n+        });\n@@ -318,0 +338,1 @@\n+\n@@ -391,1 +412,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -393,1 +414,3 @@\n-        Bindings.booleanValueAt((ObservableMap<String, Boolean>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.booleanValueAt((ObservableMap<String, Boolean>)null, index);\n+        });\n@@ -396,1 +419,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -398,2 +422,4 @@\n-        final MapProperty<String, Boolean> localProperty = new SimpleMapProperty<>();\n-        Bindings.booleanValueAt(localProperty, (ObservableValue<String>)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final MapProperty<String, Boolean> localProperty = new SimpleMapProperty<>();\n+            Bindings.booleanValueAt(localProperty, (ObservableValue<String>)null);\n+        });\n@@ -402,0 +428,1 @@\n+\n@@ -463,1 +490,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -465,1 +492,3 @@\n-        Bindings.doubleValueAt(null, key1);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.doubleValueAt(null, key1);\n+        });\n@@ -468,0 +497,1 @@\n+\n@@ -541,1 +571,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -543,1 +573,3 @@\n-        Bindings.doubleValueAt((ObservableMap<String, Double>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.doubleValueAt((ObservableMap<String, Double>)null, index);\n+        });\n@@ -546,1 +578,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -548,2 +581,4 @@\n-        final MapProperty<String, Double> localProperty = new SimpleMapProperty<>();\n-        Bindings.doubleValueAt(localProperty, (ObservableValue<String>)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final MapProperty<String, Double> localProperty = new SimpleMapProperty<>();\n+            Bindings.doubleValueAt(localProperty, (ObservableValue<String>)null);\n+        });\n@@ -552,0 +587,1 @@\n+\n@@ -613,1 +649,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -615,1 +651,3 @@\n-        Bindings.floatValueAt(null, key1);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.floatValueAt(null, key1);\n+        });\n@@ -618,0 +656,1 @@\n+\n@@ -691,1 +730,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -693,1 +732,3 @@\n-        Bindings.floatValueAt((ObservableMap<String, Float>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.floatValueAt((ObservableMap<String, Float>)null, index);\n+        });\n@@ -696,1 +737,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -698,2 +740,4 @@\n-        final MapProperty<String, Float> localProperty = new SimpleMapProperty<>();\n-        Bindings.floatValueAt(localProperty, (ObservableValue<String>)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final MapProperty<String, Float> localProperty = new SimpleMapProperty<>();\n+            Bindings.floatValueAt(localProperty, (ObservableValue<String>)null);\n+        });\n@@ -702,0 +746,1 @@\n+\n@@ -763,1 +808,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -765,1 +810,3 @@\n-        Bindings.integerValueAt(null, key1);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.integerValueAt(null, key1);\n+        });\n@@ -768,0 +815,1 @@\n+\n@@ -841,1 +889,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -843,1 +891,3 @@\n-        Bindings.integerValueAt((ObservableMap<String, Integer>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.integerValueAt((ObservableMap<String, Integer>)null, index);\n+        });\n@@ -846,1 +896,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -848,2 +899,4 @@\n-        final MapProperty<String, Integer> localProperty = new SimpleMapProperty<>();\n-        Bindings.integerValueAt(localProperty, (ObservableValue<String>)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final MapProperty<String, Integer> localProperty = new SimpleMapProperty<>();\n+            Bindings.integerValueAt(localProperty, (ObservableValue<String>)null);\n+        });\n@@ -852,0 +905,1 @@\n+\n@@ -913,1 +967,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -915,1 +969,3 @@\n-        Bindings.longValueAt(null, key1);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.longValueAt(null, key1);\n+        });\n@@ -918,0 +974,1 @@\n+\n@@ -991,1 +1048,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -993,1 +1050,3 @@\n-        Bindings.longValueAt((ObservableMap<String, Long>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.longValueAt((ObservableMap<String, Long>)null, index);\n+        });\n@@ -996,1 +1055,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -998,2 +1058,4 @@\n-        final MapProperty<String, Long> localProperty = new SimpleMapProperty<>();\n-        Bindings.longValueAt(localProperty, (ObservableValue<String>)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final MapProperty<String, Long> localProperty = new SimpleMapProperty<>();\n+            Bindings.longValueAt(localProperty, (ObservableValue<String>)null);\n+        });\n@@ -1002,0 +1064,1 @@\n+\n@@ -1050,1 +1113,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -1052,1 +1115,3 @@\n-        Bindings.stringValueAt(null, key1);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.stringValueAt(null, key1);\n+        });\n@@ -1055,0 +1120,1 @@\n+\n@@ -1116,1 +1182,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -1118,1 +1184,3 @@\n-        Bindings.stringValueAt((ObservableMap<String, String>)null, index);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.stringValueAt((ObservableMap<String, String>)null, index);\n+        });\n@@ -1121,1 +1189,2 @@\n-    @Test(expected = NullPointerException.class)\n+\n+    @Test\n@@ -1123,2 +1192,4 @@\n-        final MapProperty<String, String> localProperty = new SimpleMapProperty<>();\n-        Bindings.stringValueAt(localProperty, (ObservableValue<String>)null);\n+        assertThrows(NullPointerException.class, () -> {\n+            final MapProperty<String, String> localProperty = new SimpleMapProperty<>();\n+            Bindings.stringValueAt(localProperty, (ObservableValue<String>)null);\n+        });\n@@ -1126,2 +1197,0 @@\n-\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsMapTest.java","additions":131,"deletions":62,"binary":false,"changes":193,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -36,1 +36,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -47,1 +47,1 @@\n-    @Before\n+    @BeforeEach\n@@ -73,1 +73,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -75,1 +75,3 @@\n-        Bindings.size((ObservableSet<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.size((ObservableSet<Object>) null);\n+        });\n@@ -78,0 +80,1 @@\n+\n@@ -97,1 +100,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -99,1 +102,3 @@\n-        Bindings.isEmpty((ObservableSet<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.isEmpty((ObservableSet<Object>) null);\n+        });\n@@ -102,0 +107,1 @@\n+\n@@ -121,1 +127,1 @@\n-    @Test(expected = NullPointerException.class)\n+    @Test\n@@ -123,1 +129,3 @@\n-        Bindings.isNotEmpty((ObservableSet<Object>) null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.isNotEmpty((ObservableSet<Object>) null);\n+        });\n@@ -125,0 +133,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/BindingsSetTest.java","additions":19,"deletions":10,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/DependencyUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,2 +43,2 @@\n-import static org.junit.Assert.*;\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -63,1 +63,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/ListBindingTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -47,1 +47,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -73,1 +73,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/MapBindingTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,2 +39,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -66,1 +66,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/SetBindingTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,2 +36,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -73,1 +74,1 @@\n-    @Before\n+    @BeforeEach\n@@ -189,1 +190,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -191,1 +192,3 @@\n-        Bindings.when(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.when(null);\n+        });\n@@ -194,1 +197,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -196,1 +200,3 @@\n-        generatePropertyProperty(null, p0);\n+        assertThrows(NullPointerException.class, () -> {\n+            generatePropertyProperty(null, p0);\n+        });\n@@ -199,1 +205,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -201,1 +208,3 @@\n-        generatePropertyProperty(p0, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            generatePropertyProperty(p0, null);\n+        });\n@@ -204,1 +213,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -206,1 +216,3 @@\n-        generatePropertyPrimitive(null, v1);\n+        assertThrows(NullPointerException.class, () -> {\n+            generatePropertyPrimitive(null, v1);\n+        });\n@@ -209,1 +221,2 @@\n-    @Test(expected=NullPointerException.class)\n+\n+    @Test\n@@ -211,1 +224,3 @@\n-        generatePrimitiveProperty(v0, null);\n+        assertThrows(NullPointerException.class, () -> {\n+            generatePrimitiveProperty(v0, null);\n+        });\n@@ -213,0 +228,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/WhenTestBase.java","additions":29,"deletions":13,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -55,3 +55,4 @@\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -74,1 +75,1 @@\n-    @Before\n+    @BeforeEach\n@@ -420,1 +421,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -422,1 +423,3 @@\n-        NumberExpressionBase.numberExpression(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            NumberExpressionBase.numberExpression(null);\n+        });\n@@ -425,1 +428,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -427,10 +430,12 @@\n-        NumberExpressionBase.numberExpression(new ObservableNumberValue() {\n-            @Override public void addListener(InvalidationListener observer) {}\n-            @Override public void addListener(ChangeListener observer) {}\n-            @Override public void removeListener(InvalidationListener observer) {}\n-            @Override public void removeListener(ChangeListener observer) {}\n-            @Override public Number getValue() {return null;}\n-            @Override public int intValue() {return 0;}\n-            @Override public long longValue() {return 0L;}\n-            @Override public float floatValue() {return 0.0f;}\n-            @Override public double doubleValue() {return 0.0;}\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            NumberExpressionBase.numberExpression(new ObservableNumberValue() {\n+                @Override public void addListener(InvalidationListener observer) {}\n+                @Override public void addListener(ChangeListener observer) {}\n+                @Override public void removeListener(InvalidationListener observer) {}\n+                @Override public void removeListener(ChangeListener observer) {}\n+                @Override public Number getValue() {return null;}\n+                @Override public int intValue() {return 0;}\n+                @Override public long longValue() {return 0L;}\n+                @Override public float floatValue() {return 0.0f;}\n+                @Override public double doubleValue() {return 0.0;}\n+            });\n@@ -450,1 +455,1 @@\n-    @Ignore(\"RT-33413\")\n+    @Disabled(\"RT-33413\")\n@@ -475,1 +480,1 @@\n-    @Ignore(\"RT-33413\")\n+    @Disabled(\"RT-33413\")\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/AbstractNumberExpressionTest.java","additions":24,"deletions":19,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -28,2 +28,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -42,2 +43,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -50,1 +51,1 @@\n-    @Before\n+    @BeforeEach\n@@ -198,1 +199,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -200,1 +201,3 @@\n-        BooleanExpression.booleanExpression(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            BooleanExpression.booleanExpression(null);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/BooleanExpressionTest.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -38,1 +38,2 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -40,2 +41,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -56,1 +57,1 @@\n-    @Before\n+    @BeforeEach\n@@ -214,1 +215,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -216,1 +217,3 @@\n-        DoubleExpression.doubleExpression(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            DoubleExpression.doubleExpression(null);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/DoubleExpressionTest.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,2 +28,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -41,2 +42,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -57,1 +58,1 @@\n-    @Before\n+    @BeforeEach\n@@ -216,1 +217,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -218,1 +219,3 @@\n-        FloatExpression.floatExpression(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            FloatExpression.floatExpression(null);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/FloatExpressionTest.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -43,2 +43,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -59,1 +60,1 @@\n-    @Before\n+    @BeforeEach\n@@ -217,1 +218,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -219,1 +220,3 @@\n-        IntegerExpression.integerExpression(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            IntegerExpression.integerExpression(null);\n+        });\n@@ -221,0 +224,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/IntegerExpressionTest.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -39,3 +39,3 @@\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -57,1 +57,1 @@\n-    @Before\n+    @BeforeEach\n@@ -65,1 +65,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -95,1 +95,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -97,1 +97,3 @@\n-        op1.valueAt(-1);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            op1.valueAt(-1);\n+        });\n@@ -100,0 +102,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/ListExpressionTest.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -42,2 +42,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -58,1 +59,1 @@\n-    @Before\n+    @BeforeEach\n@@ -216,1 +217,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -218,1 +219,3 @@\n-        LongExpression.longExpression(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            LongExpression.longExpression(null);\n+        });\n@@ -220,0 +223,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/LongExpressionTest.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -60,1 +60,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/MapExpressionTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -39,2 +39,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -49,1 +50,1 @@\n-    @Before\n+    @BeforeEach\n@@ -125,1 +126,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -127,1 +128,3 @@\n-        ObjectExpression.objectExpression(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            ObjectExpression.objectExpression(null);\n+        });\n@@ -130,1 +133,2 @@\n-     @Test\n+\n+    @Test\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/ObjectExpressionTest.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -53,1 +53,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/SetExpressionTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,3 +28,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -40,2 +40,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -51,1 +52,1 @@\n-    @Before\n+    @BeforeEach\n@@ -291,1 +292,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -293,1 +294,3 @@\n-        StringExpression.stringExpression(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            StringExpression.stringExpression(null);\n+        });\n@@ -296,0 +299,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/StringExpressionTest.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -91,1 +91,1 @@\n-                FXCollections.observableArrayList(\"foobar\"));\n+                        FXCollections.observableArrayList(\"foobar\"));\n@@ -209,1 +209,1 @@\n-    \/\/test sort on bigger elements, so that it is sorted with mergesort and not insert sort\n+        \/\/test sort on bigger elements, so that it is sorted with mergesort and not insert sort\n@@ -251,1 +251,1 @@\n-    @Test(expected=ClassCastException.class)\n+    @Test\n@@ -255,1 +255,1 @@\n-        FXCollections.sort(seq);\n+        assertThrows(ClassCastException.class, () -> FXCollections.sort(seq));\n@@ -258,0 +258,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/FXCollectionsTest.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -35,3 +35,3 @@\n-import org.junit.Before;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -46,1 +46,1 @@\n-    @Before\n+    @BeforeEach\n@@ -347,1 +347,1 @@\n-         \/\/ \"c\", \"a\", \"d\" before \"b\" was added\n+        \/\/ \"c\", \"a\", \"d\" before \"b\" was added\n@@ -432,1 +432,1 @@\n-    @Test(expected=IllegalStateException.class)\n+    @Test\n@@ -434,1 +434,3 @@\n-        builder.nextAdd(0, 1);\n+        assertThrows(IllegalStateException.class, () -> {\n+            builder.nextAdd(0, 1);\n+        });\n@@ -437,1 +439,2 @@\n-    @Test(expected=IllegalStateException.class)\n+\n+    @Test\n@@ -439,1 +442,3 @@\n-        builder.nextRemove(0, (String)null);\n+        assertThrows(IllegalStateException.class, () -> {\n+            builder.nextRemove(0, (String)null);\n+        });\n@@ -442,1 +447,2 @@\n-    @Test(expected=IllegalStateException.class)\n+\n+    @Test\n@@ -444,1 +450,3 @@\n-        builder.nextRemove(0, Collections.EMPTY_LIST);\n+        assertThrows(IllegalStateException.class, () -> {\n+            builder.nextRemove(0, Collections.EMPTY_LIST);\n+        });\n@@ -447,1 +455,2 @@\n-    @Test(expected=IllegalStateException.class)\n+\n+    @Test\n@@ -449,1 +458,3 @@\n-        builder.nextUpdate(0);\n+        assertThrows(IllegalStateException.class, () -> {\n+            builder.nextUpdate(0);\n+        });\n@@ -452,1 +463,2 @@\n-    @Test(expected=IllegalStateException.class)\n+\n+    @Test\n@@ -454,1 +466,3 @@\n-        builder.nextSet(0, null);\n+        assertThrows(IllegalStateException.class, () -> {\n+            builder.nextSet(0, null);\n+        });\n@@ -457,1 +471,2 @@\n-    @Test(expected=IllegalStateException.class)\n+\n+    @Test\n@@ -459,1 +474,3 @@\n-        builder.nextReplace(0, 1, Collections.EMPTY_LIST);\n+        assertThrows(IllegalStateException.class, () -> {\n+            builder.nextReplace(0, 1, Collections.EMPTY_LIST);\n+        });\n@@ -462,0 +479,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ListChangeBuilderTest.java","additions":35,"deletions":17,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -64,6 +64,6 @@\n-            assertFalse(\"Negative from index\", from < 0);\n-            assertFalse(\"Negative to index\", to < 0);\n-            assertFalse(\"from index is greater then to index\", from > to);\n-            assertFalse(\"No change in both elements and size\", from == to && sizeChanged == false);\n-            assertFalse(\"from index is greater than array size\", from < to && from >= observableArray.size());\n-            assertFalse(\"to index is greater than array size\", from < to && to > observableArray.size());\n+            assertFalse(from < 0, \"Negative from index\");\n+            assertFalse(to < 0, \"Negative to index\");\n+            assertFalse(from > to, \"from index is greater then to index\");\n+            assertFalse(from == to && sizeChanged == false, \"No change in both elements and size\");\n+            assertFalse(from < to && from >= observableArray.size(), \"from index is greater than array size\");\n+            assertFalse(from < to && to > observableArray.size(), \"to index is greater than array size\");\n@@ -80,1 +80,1 @@\n-        assertFalse(\"Too many array change events\", tooManyCalls);\n+        assertFalse(tooManyCalls, \"Too many array change events\");\n@@ -86,3 +86,3 @@\n-                       int from,\n-                       int to) {\n-        assertFalse(\"Too many array change events\", tooManyCalls);\n+                                         int from,\n+                                         int to) {\n+        assertFalse(tooManyCalls, \"Too many array change events\");\n@@ -96,4 +96,4 @@\n-                       boolean sizeChanged,\n-                       int from,\n-                       int to) {\n-        assertFalse(\"Too many array change events\", tooManyCalls);\n+                      boolean sizeChanged,\n+                      int from,\n+                      int to) {\n+        assertFalse(tooManyCalls, \"Too many array change events\");\n@@ -107,1 +107,1 @@\n-        assertFalse(\"Too many array change events\", tooManyCalls);\n+        assertFalse(tooManyCalls, \"Too many array change events\");\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/MockArrayObserver.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import static org.junit.Assert.* ;\n+import static org.junit.jupiter.api.Assertions.* ;\n@@ -97,3 +97,3 @@\n-                       List<E> removed,\n-                       int from,\n-                       int to) {\n+                                List<E> removed,\n+                                int from,\n+                                int to) {\n@@ -105,3 +105,3 @@\n-                       List<E> removed,\n-                       int from,\n-                       int to) {\n+                               List<E> removed,\n+                               int from,\n+                               int to) {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/MockListObserver.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -60,1 +60,1 @@\n-        assertTrue(\"Missing call to the observer # \" + call, call < calls.size());\n+        assertTrue(call < calls.size(), \"Missing call to the observer # \" + call);\n@@ -68,1 +68,1 @@\n-            assertTrue(Arrays.toString(calls) + \" doesn't contain \"  + c, this.calls.contains(c));\n+            assertTrue(this.calls.contains(c), Arrays.toString(calls) + \" doesn't contain \" + c);\n@@ -75,1 +75,1 @@\n-            assertTrue(calls + \" doesn't contain \"  + t, this.calls.contains(new Call<>(t.key, t.val, null)));\n+            assertTrue(this.calls.contains(new Call<>(t.key, t.val, null)), calls + \" doesn't contain \" + t);\n@@ -84,1 +84,1 @@\n-        assertTrue(\"Missing call to the observer # \" + call, call < calls.size());\n+        assertTrue(call < calls.size(), \"Missing call to the observer # \" + call);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/MockMapObserver.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -63,1 +63,1 @@\n-        assertTrue(\"Missing call to the observer # \" + call, call < calls.size());\n+        assertTrue(call < calls.size(), \"Missing call to the observer # \" + call);\n@@ -70,1 +70,1 @@\n-            assertTrue(Arrays.toString(calls) + \" doesn't contain \"  + c, this.calls.contains(c));\n+            assertTrue(this.calls.contains(c), () -> Arrays.toString(calls) + \" doesn't contain \" + c);\n@@ -77,1 +77,1 @@\n-            assertTrue(calls + \" doesn't contain \"  + t, this.calls.contains(new Call<>(t.val, null)));\n+            assertTrue(this.calls.contains(new Call<>(t.val, null)), () -> calls + \" doesn't contain \" + t);\n@@ -86,1 +86,1 @@\n-        assertTrue(\"Missing call to the observer # \" + call, call < calls.size());\n+        assertTrue(call < calls.size(), \"Missing call to the observer # \" + call);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/MockSetObserver.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-                .subList(0, 2);\n+                    .subList(0, 2);\n@@ -215,1 +215,1 @@\n-                .subList(0, 0);\n+                    .subList(0, 0);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ModifiableObservableListBaseTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,4 +33,4 @@\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import static org.junit.Assert.* ;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.* ;\n@@ -41,1 +41,1 @@\n-@Ignore\n+@Disabled\n@@ -110,1 +110,1 @@\n-    @Before\n+    @BeforeEach\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/TransformationListTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -38,4 +38,4 @@\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -77,1 +77,1 @@\n-    @Before\n+    @BeforeEach\n@@ -92,2 +92,2 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -99,2 +99,2 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -106,2 +106,2 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -113,2 +113,2 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -120,2 +120,2 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -127,2 +127,2 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -134,2 +134,2 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -141,2 +141,2 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -147,2 +147,2 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -153,2 +153,3 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+\n+    @Test\n+    @Disabled\n@@ -161,2 +162,2 @@\n-    @Test(expected=NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -167,2 +168,2 @@\n-    @Test(expected = NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -173,2 +174,2 @@\n-    @Test(expected = NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -179,2 +180,2 @@\n-    @Test(expected = NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -185,2 +186,2 @@\n-    @Test(expected = NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -191,2 +192,2 @@\n-    @Test(expected = NullPointerException.class)\n-    @Ignore\n+    @Test\n+    @Disabled\n@@ -473,1 +474,1 @@\n-    @Test(expected=ConcurrentModificationException.class)\n+    @Test\n@@ -475,6 +476,8 @@\n-        ListIterator<String> it1 = list.listIterator();\n-        ListIterator<String> it2 = list.listIterator();\n-        it1.next();\n-        it2.next();\n-        it1.remove();\n-        it2.remove();\n+        assertThrows(ConcurrentModificationException.class, () -> {\n+            ListIterator<String> it1 = list.listIterator();\n+            ListIterator<String> it2 = list.listIterator();\n+            it1.next();\n+            it2.next();\n+            it1.remove();\n+            it2.remove();\n+        });\n@@ -484,0 +487,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/VetoableObservableListTest.java","additions":48,"deletions":44,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -37,1 +37,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -41,1 +41,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -43,1 +43,3 @@\n-        new WeakListChangeListener<>(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            new WeakListChangeListener<>(null);\n+        });\n@@ -46,0 +48,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/WeakListChangeListenerTest.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -36,1 +36,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -40,1 +40,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -42,1 +42,3 @@\n-        new WeakMapChangeListener<>(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            new WeakMapChangeListener<>(null);\n+        });\n@@ -45,0 +47,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/WeakMapChangeListenerTest.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -36,1 +36,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -40,1 +40,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -42,1 +42,3 @@\n-        new WeakSetChangeListener<>(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            new WeakSetChangeListener<>(null);\n+        });\n@@ -45,0 +47,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/WeakSetChangeListenerTest.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -38,4 +38,4 @@\n-import org.junit.Before;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -49,1 +49,1 @@\n-    @Before\n+    @BeforeEach\n@@ -60,1 +60,1 @@\n-    @Ignore\n+    @Disabled\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/event\/EventSerializationEventExists.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -53,1 +53,1 @@\n-    @Before\n+    @BeforeEach\n@@ -92,1 +92,1 @@\n-    @Test(expected=InvalidObjectException.class)\n+    @Test\n@@ -98,3 +98,5 @@\n-        objectOutputStream.writeObject(e);\n-        turnToInput();\n-        EventType eType = (EventType) objectInputStream.readObject();\n+        assertThrows(InvalidObjectException.class, () -> {\n+            objectOutputStream.writeObject(e);\n+            turnToInput();\n+            EventType eType = (EventType) objectInputStream.readObject();\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/event\/EventSerializationTest.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -31,1 +31,2 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -38,1 +39,1 @@\n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n@@ -40,1 +41,3 @@\n-        new EventType(Event.ANY, ActionEvent.ACTION.getName());\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new EventType(Event.ANY, ActionEvent.ACTION.getName());\n+        });\n@@ -43,0 +46,1 @@\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/event\/EventTest.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -238,1 +238,1 @@\n-        \/\/ 0, +infinity, -infinity, Nan, positive value, negative value\n+    \/\/ 0, +infinity, -infinity, Nan, positive value, negative value\n@@ -240,1 +240,1 @@\n-        \/\/ 0, +infinity, -infinity, Nan, positive value, negative value\n+    \/\/ 0, +infinity, -infinity, Nan, positive value, negative value\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/DurationTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -33,2 +33,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -43,1 +43,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/BigDecimalStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved\n@@ -30,1 +30,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -32,2 +32,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -40,1 +40,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/BigIntegerStringConverterTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -31,2 +31,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/BooleanStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -31,2 +31,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/ByteStringConverterTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -31,2 +31,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/CharacterStringConverterTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -31,2 +31,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/DefaultStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -31,2 +31,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/DoubleStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -31,2 +31,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/FloatStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -31,2 +31,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/IntegerStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -31,2 +31,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -39,1 +39,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/LongStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -34,2 +34,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -42,1 +42,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/PercentageStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -31,2 +31,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -41,1 +41,1 @@\n-    @Before public void setup() {\n+    @BeforeEach public void setup() {\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/util\/converter\/ShortStringConverterTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,10 +36,10 @@\n-import org.junit.After;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.junit.Ignore;\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-\n-@Ignore(\"JDK-8290292\")\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Disabled;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@Disabled(\"JDK-8290292\")\n@@ -55,1 +55,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -461,1 +461,1 @@\n-    @After\n+    @AfterEach\n@@ -487,1 +487,1 @@\n-        assertTrue(\"Unexpected len: \" + len, len >= 0);\n+        assertTrue(len >= 0, \"Unexpected len: \" + len);\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/com\/sun\/webkit\/SharedBufferTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -36,11 +36,11 @@\n-import org.junit.After;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.junit.Ignore;\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-\n-@Ignore(\"JDK-8290292\")\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Disabled;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@Disabled(\"JDK-8290292\")\n@@ -57,1 +57,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -563,1 +563,1 @@\n-    @After\n+    @AfterEach\n@@ -600,1 +600,1 @@\n-            assertEquals(\"Unexpected len\", 0, len);\n+            assertEquals(0, len, \"Unexpected len\");\n@@ -608,1 +608,1 @@\n-        assertTrue(\"Unexpected len: \" + len, len >= 0);\n+        assertTrue(len >= 0, \"Unexpected len: \" + len);\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/com\/sun\/webkit\/SimpleSharedBufferInputStreamTest.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -40,3 +40,3 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -70,2 +70,1 @@\n-        assertEquals(\"quux=corge; foo=bar; baz=qux\",\n-                get(\"http:\/\/example.org\/grault\"));\n+        assertEquals(\"quux=corge; foo=bar; baz=qux\", get(\"http:\/\/example.org\/grault\"));\n@@ -131,4 +130,2 @@\n-        assertEquals(\"quux=corge; foo=bar; baz=qux\",\n-                get(\"http:\/\/Example.org\/grault\"));\n-        assertEquals(\"quux=corge; foo=bar; baz=qux\",\n-                get(\"http:\/\/EXAMPLE.ORG\/grault\"));\n+        assertEquals(\"quux=corge; foo=bar; baz=qux\", get(\"http:\/\/Example.org\/grault\"));\n+        assertEquals(\"quux=corge; foo=bar; baz=qux\", get(\"http:\/\/EXAMPLE.ORG\/grault\"));\n@@ -147,12 +144,6 @@\n-        assertEquals(\"grault=garply; quux=courge; foo=bar; baz=qux\",\n-                get(\"http:\/\/example.org\/lvl1\/lvl2\/lvl3\/lvl4\"));\n-        assertEquals(\"grault=garply; quux=courge; foo=bar; baz=qux\",\n-                get(\"http:\/\/example.org\/lvl1\/lvl2\/lvl3\"));\n-        assertEquals(\"grault=garply; quux=courge; foo=bar; baz=qux\",\n-                get(\"http:\/\/example.org\/lvl1\/lvl2\"));\n-        assertEquals(\"quux=courge; foo=bar; baz=qux\",\n-                get(\"http:\/\/example.org\/lvl1\/lvl2A\"));\n-        assertEquals(\"quux=courge; foo=bar; baz=qux\",\n-                get(\"http:\/\/example.org\/lvl1\/lvlA\"));\n-        assertEquals(\"quux=courge; foo=bar; baz=qux\",\n-                get(\"http:\/\/example.org\/lvl1\"));\n+        assertEquals(\"grault=garply; quux=courge; foo=bar; baz=qux\", get(\"http:\/\/example.org\/lvl1\/lvl2\/lvl3\/lvl4\"));\n+        assertEquals(\"grault=garply; quux=courge; foo=bar; baz=qux\", get(\"http:\/\/example.org\/lvl1\/lvl2\/lvl3\"));\n+        assertEquals(\"grault=garply; quux=courge; foo=bar; baz=qux\", get(\"http:\/\/example.org\/lvl1\/lvl2\"));\n+        assertEquals(\"quux=courge; foo=bar; baz=qux\", get(\"http:\/\/example.org\/lvl1\/lvl2A\"));\n+        assertEquals(\"quux=courge; foo=bar; baz=qux\", get(\"http:\/\/example.org\/lvl1\/lvlA\"));\n+        assertEquals(\"quux=courge; foo=bar; baz=qux\", get(\"http:\/\/example.org\/lvl1\"));\n@@ -176,2 +167,1 @@\n-        assertEquals(\"foo=bar; baz=qux; quux=courge; grault=garply\",\n-                get(\"https:\/\/example.org\/\"));\n+        assertEquals(\"foo=bar; baz=qux; quux=courge; grault=garply\", get(\"https:\/\/example.org\/\"));\n@@ -191,2 +181,1 @@\n-        assertEquals(\"quux=courge; baz=qux; foo=bar\",\n-                get(\"http:\/\/example.org\/lvl1\/lvl2\"));\n+        assertEquals(\"quux=courge; baz=qux; foo=bar\", get(\"http:\/\/example.org\/lvl1\/lvl2\"));\n@@ -201,2 +190,1 @@\n-        assertEquals(\"foo=bar; baz=qux; quux=courge\",\n-                get(\"http:\/\/example.org\/\"));\n+        assertEquals(\"foo=bar; baz=qux; quux=courge\", get(\"http:\/\/example.org\/\"));\n@@ -208,2 +196,1 @@\n-        assertEquals(\"baz=qux; quux=courge; foo=bar\",\n-                get(\"http:\/\/example.org\/\"));\n+        assertEquals(\"baz=qux; quux=courge; foo=bar\", get(\"http:\/\/example.org\/\"));\n@@ -222,2 +209,1 @@\n-        assertEquals(\"grault=garply; baz=qux; foo=bar; quux=courge\",\n-                get(\"http:\/\/example.org\/lvl1\/lvl2\"));\n+        assertEquals(\"grault=garply; baz=qux; foo=bar; quux=courge\", get(\"http:\/\/example.org\/lvl1\/lvl2\"));\n@@ -270,2 +256,1 @@\n-        assertEquals(\"quux=corge; foo=bar; baz=qux\",\n-                get(\"http:\/\/example.org\/grault\"));\n+        assertEquals(\"quux=corge; foo=bar; baz=qux\", get(\"http:\/\/example.org\/grault\"));\n@@ -277,2 +262,1 @@\n-        assertEquals(\"quux=corge2; foo=bar2; baz=qux2\",\n-                get(\"http:\/\/example.org\/grault\"));\n+        assertEquals(\"quux=corge2; foo=bar2; baz=qux2\", get(\"http:\/\/example.org\/grault\"));\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/com\/sun\/webkit\/network\/CookieManagerTest.java","additions":19,"deletions":35,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -34,3 +34,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -446,1 +446,1 @@\n-            CookieModel expected, CookieShim actual)\n+                                         CookieModel expected, CookieShim actual)\n@@ -450,1 +450,1 @@\n-            assertEquals(\"Unexpected cookie\" + s, expected, actual);\n+            assertEquals(expected, actual,\"Unexpected cookie\" + s);\n@@ -454,19 +454,11 @@\n-        assertEquals(\"Unexpected name\" + s, expected.name, actual.getName());\n-        assertEquals(\"Unexpected value\" + s, expected.value, actual.getValue());\n-        assertEquals(\"Unexpected expiryTime\" + s,\n-                expected.expiryTime, actual.getExpiryTime());\n-        assertEquals(\"Unexpected domain\" + s,\n-                expected.domain, actual.getDomain());\n-        assertEquals(\"Unexpected path\" + s, expected.path, actual.getPath());\n-        assertTrue(\"Unexpected creationTime\" + s,\n-                expected.creationTime.equals(actual.getCreationTime()));\n-        assertEquals(\"Unexpected lastAccessTime\" + s,\n-                expected.creationTime.baseTime(), actual.getLastAccessTime());\n-        assertEquals(\"Unexpected persistent flag\" + s,\n-                expected.persistent, actual.getPersistent());\n-        assertEquals(\"Unexpected hostOnly flag\" + s,\n-                false, actual.getHostOnly());\n-        assertEquals(\"Unexpected secureOnly flag\" + s,\n-                expected.secureOnly, actual.getSecureOnly());\n-        assertEquals(\"Unexpected httpOnly flag\" + s,\n-                expected.httpOnly, actual.getHttpOnly());\n+        assertEquals(expected.name, actual.getName(),\"Unexpected name\" + s);\n+        assertEquals(expected.value, actual.getValue(),\"Unexpected value\" + s);\n+        assertEquals(expected.expiryTime, actual.getExpiryTime(), \"Unexpected expiryTime\" + s);\n+        assertEquals(expected.domain, actual.getDomain(), \"Unexpected domain\" + s);\n+        assertEquals(expected.path, actual.getPath(), \"Unexpected path\" + s);\n+        assertTrue(expected.creationTime.equals(actual.getCreationTime()), \"Unexpected creationTime\" + s);\n+        assertEquals(expected.creationTime.baseTime(), actual.getLastAccessTime(), \"Unexpected lastAccessTime\" + s);\n+        assertEquals(expected.persistent, actual.getPersistent(), \"Unexpected persistent flag\" + s);\n+        assertEquals(false, actual.getHostOnly(), \"Unexpected hostOnly flag\" + s);\n+        assertEquals(expected.secureOnly, actual.getSecureOnly(), \"Unexpected secureOnly flag\" + s);\n+        assertEquals(expected.httpOnly, actual.getHttpOnly(), \"Unexpected httpOnly flag\" + s);\n@@ -586,8 +578,4 @@\n-        assertEquals(\"\/foo\",\n-                CookieShim.defaultPath(uri(\"http:\/\/hostname\/foo\/bar\")));\n-        assertEquals(\"\/foo\",\n-                CookieShim.defaultPath(uri(\"http:\/\/hostname\/foo\/bar?\")));\n-        assertEquals(\"\/foo\",\n-                CookieShim.defaultPath(uri(\"http:\/\/hostname\/foo\/bar?query\")));\n-        assertEquals(\"\/foo\",\n-                CookieShim.defaultPath(uri(\"http:\/\/hostname\/foo\/bar?query=push\")));\n+        assertEquals(\"\/foo\", CookieShim.defaultPath(uri(\"http:\/\/hostname\/foo\/bar\")));\n+        assertEquals(\"\/foo\", CookieShim.defaultPath(uri(\"http:\/\/hostname\/foo\/bar?\")));\n+        assertEquals(\"\/foo\", CookieShim.defaultPath(uri(\"http:\/\/hostname\/foo\/bar?query\")));\n+        assertEquals(\"\/foo\", CookieShim.defaultPath(uri(\"http:\/\/hostname\/foo\/bar?query=push\")));\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/com\/sun\/webkit\/network\/CookieTest.java","additions":21,"deletions":33,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -34,3 +34,3 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -302,2 +302,3 @@\n-            assertEquals(\"Unexpected result, date string: [\" + dateString\n-                    + \"],\", expectedResult, DF.format(new Date(actualResult)));\n+            assertEquals(expectedResult, DF.format(new Date(actualResult)),\n+                    \"Unexpected result, date string: [\" + dateString\n+                            + \"],\");\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/com\/sun\/webkit\/network\/DateParserTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -102,2 +102,2 @@\n-        assertEquals(\"Unexpected result, domain: [\" + domain + \"],\",\n-                expectedResult, PublicSuffixesShim.isPublicSuffix(domain));\n+        assertEquals(expectedResult, PublicSuffixesShim.isPublicSuffix(domain),\n+                \"Unexpected result, domain: [\" + domain + \"],\");\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/com\/sun\/webkit\/network\/PublicSuffixesTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -31,2 +31,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/com\/sun\/webkit\/network\/UtilTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,3 +29,3 @@\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -40,1 +40,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -407,8 +407,8 @@\n-        assertEquals(\"Unexpected content type\" + s,\n-                testCase.contentType, c.getContentType());\n-        assertEquals(\"Unexpected content encoding\" + s,\n-                null, c.getContentEncoding());\n-        assertEquals(\"Unexpected content length\" + s,\n-                testCase.content.length, c.getContentLength());\n-        assertArrayEquals(\"Unexpected content\" + s,\n-                testCase.content, readContent(c));\n+        assertEquals(testCase.contentType, c.getContentType(),\n+                \"Unexpected content type\" + s);\n+        assertEquals(null, c.getContentEncoding(),\n+                \"Unexpected content encoding\" + s);\n+        assertEquals(testCase.content.length, c.getContentLength(),\n+                \"Unexpected content length\" + s);\n+        assertArrayEquals(testCase.content, readContent(c),\n+                \"Unexpected content\" + s);\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/com\/sun\/webkit\/network\/data\/DataURLConnectionTest.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -54,1 +54,1 @@\n-                \"\", \"a\", \"aa\", \"a a\", \"a a. a a.\"\n+                    \"\", \"a\", \"aa\", \"a a\", \"a a. a a.\"\n@@ -61,1 +61,1 @@\n-                    length + 1, length + 2, length + 10\n+                        length + 1, length + 2, length + 10\n@@ -66,3 +66,2 @@\n-                    assertEquals(\"Unexpected result, type: \" + type\n-                            + \", string: \" + string + \", position: \" + position,\n-                            length, result);\n+                    assertEquals(length, result, \"Unexpected result, type: \" + type\n+                            + \", string: \" + string + \", position: \" + position);\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/com\/sun\/webkit\/text\/TextBreakIteratorTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -35,3 +35,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertSame;\n-import org.junit.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import org.junit.jupiter.api.Test;\n@@ -69,24 +69,13 @@\n-            assertEquals(\"WebView.contextMenuEnabled\",\n-                    main.isContextMenuEnabled(), test.isContextMenuEnabled());\n-            assertEquals(\"WebView.fontScale\",\n-                    main.getFontScale(), test.getFontScale(), 0.0);\n-            assertEquals(\"WebView.fontSmoothingType\",\n-                    main.getFontSmoothingType(), test.getFontSmoothingType());\n-            assertEquals(\"WebView.height\",\n-                    main.getHeight(), test.getHeight(), 0.0);\n-            assertEquals(\"WebView.maxHeight\",\n-                    main.getMaxHeight(), test.getMaxHeight(), 0.0);\n-            assertEquals(\"WebView.minHeight\",\n-                    main.getMinHeight(), test.getMinHeight(), 0.0);\n-            assertEquals(\"WebView.prefHeight\",\n-                    main.getPrefHeight(), test.getPrefHeight(), 0.0);\n-            assertEquals(\"WebView.width\",\n-                    main.getWidth(), test.getWidth(), 0.0);\n-            assertEquals(\"WebView.maxWidth\",\n-                    main.getMaxWidth(), test.getMaxWidth(), 0.0);\n-            assertEquals(\"WebView.minWidth\",\n-                    main.getMinWidth(), test.getMinWidth(), 0.0);\n-            assertEquals(\"WebView.prefWidth\",\n-                    main.getPrefWidth(), test.getPrefWidth(), 0.0);\n-            assertEquals(\"WebView.zoom\", main.getZoom(), test.getZoom(), 0.0);\n-            assertEquals(\"WebPage zoom factor\",\n+            assertEquals(main.isContextMenuEnabled(), test.isContextMenuEnabled(), \"WebView.contextMenuEnabled\");\n+            assertEquals(main.getFontScale(), test.getFontScale(), 0.0, \"WebView.fontScale\");\n+            assertEquals(main.getFontSmoothingType(), test.getFontSmoothingType(), \"WebView.fontSmoothingType\");\n+            assertEquals(main.getHeight(), test.getHeight(), 0.0, \"WebView.height\");\n+            assertEquals(main.getMaxHeight(), test.getMaxHeight(), 0.0, \"WebView.maxHeight\");\n+            assertEquals(main.getMinHeight(), test.getMinHeight(), 0.0, \"WebView.minHeight\");\n+            assertEquals(main.getPrefHeight(), test.getPrefHeight(), 0.0, \"WebView.prefHeight\");\n+            assertEquals(main.getWidth(), test.getWidth(), 0.0, \"WebView.width\");\n+            assertEquals(main.getMaxWidth(), test.getMaxWidth(), 0.0, \"WebView.maxWidth\");\n+            assertEquals(main.getMinWidth(), test.getMinWidth(), 0.0, \"WebView.minWidth\");\n+            assertEquals(main.getPrefWidth(), test.getPrefWidth(), 0.0, \"WebView.prefWidth\");\n+            assertEquals(main.getZoom(), test.getZoom(), 0.0, \"WebView.zoom\");\n+            assertEquals(\n@@ -95,1 +84,3 @@\n-                    0.0);\n+                    0.0,\n+                    \"WebPage zoom factor\"\n+            );\n@@ -112,6 +103,3 @@\n-            assertEquals(\"WebEngine.javaScriptEnabled\",\n-                    web.isJavaScriptEnabled(), test.isJavaScriptEnabled());\n-            assertEquals(\"WebEngine.userAgent\",\n-                    web.getUserAgent(), test.getUserAgent());\n-            assertEquals(\"WebEngine.userStyleSheetLocation\",\n-                    web.getUserStyleSheetLocation(), test.getUserStyleSheetLocation());\n+            assertEquals(web.isJavaScriptEnabled(), test.isJavaScriptEnabled(), \"WebEngine.javaScriptEnabled\");\n+            assertEquals(web.getUserAgent(), test.getUserAgent(), \"WebEngine.userAgent\");\n+            assertEquals(web.getUserStyleSheetLocation(), test.getUserStyleSheetLocation(), \"WebEngine.userStyleSheetLocation\");\n@@ -133,3 +121,3 @@\n-        assertSame(\"WebEngine.document\", web.getDocument(), doc.get());\n-        assertSame(\"WebEngine.title\",    web.getTitle(),    title.get());\n-        assertSame(\"WebEngine.location\", web.getLocation(), loc.get());\n+        assertSame(web.getDocument(), doc.get(), \"WebEngine.document\");\n+        assertSame(web.getTitle(), title.get(), \"WebEngine.title\");\n+        assertSame(web.getLocation(), loc.get(), \"WebEngine.location\");\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/BindingTest.java","additions":25,"deletions":37,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -43,4 +43,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -329,1 +329,1 @@\n-        assertEquals(\"Loading Long SelectorList completed successfully\", SUCCEEDED, getLoadState());\n+        assertEquals(SUCCEEDED, getLoadState(), \"Loading Long SelectorList completed successfully\");\n@@ -335,34 +335,34 @@\n-                \"<html>\\n\" +\n-                \"  <head>\\n\" +\n-                \"    <style>\\n\" +\n-                \"      button {\\n\" +\n-                \"        background-color: black; color: white; display: block; font-size: 32px;\\n\" +\n-                \"        width: 200px; height: 100px; padding: 0; border: none;\\n\" +\n-                \"        border-radius: 32px;\\n\" +\n-                \"      }\\n\" +\n-                \"      .bad0 {\\n\" +\n-                \"        background-color: red;\\n\" +\n-                \"      }\\n\" +\n-                \"      .bad1 {\\n\" +\n-                \"        border-bottom-left-radius: 0;\\n\" +\n-                \"        background-color: blue;\\n\" +\n-                \"      }\\n\" +\n-                \"      .bad2 {\\n\" +\n-                \"        border-bottom-left-radius: 0;\\n\" +\n-                \"        border-bottom-right-radius: 0;\\n\" +\n-                \"        background-color: green;\\n\" +\n-                \"      }\\n\" +\n-                \"      .bad3 {\\n\" +\n-                \"        border-bottom-left-radius: 0;\\n\" +\n-                \"        border-bottom-right-radius: 0;\\n\" +\n-                \"        border-top-right-radius: 0;\\n\" +\n-                \"      }\\n\" +\n-                \"    <\/style>\\n\" +\n-                \"  <\/head>\\n\" +\n-                \"  <body style='margin: 0px 0px;'>\\n\" +\n-                \"    <button class=\\\"bad0\\\">A<\/button>\\n\" +\n-                \"    <button class=\\\"bad1\\\">B<\/button>\\n\" +\n-                \"    <button class=\\\"bad2\\\">C<\/button>\\n\" +\n-                \"    <button class=\\\"bad3\\\">D<\/button>\\n\" +\n-                \"  <\/body>\\n\" +\n-                \"<\/html>\"\n+                        \"<html>\\n\" +\n+                        \"  <head>\\n\" +\n+                        \"    <style>\\n\" +\n+                        \"      button {\\n\" +\n+                        \"        background-color: black; color: white; display: block; font-size: 32px;\\n\" +\n+                        \"        width: 200px; height: 100px; padding: 0; border: none;\\n\" +\n+                        \"        border-radius: 32px;\\n\" +\n+                        \"      }\\n\" +\n+                        \"      .bad0 {\\n\" +\n+                        \"        background-color: red;\\n\" +\n+                        \"      }\\n\" +\n+                        \"      .bad1 {\\n\" +\n+                        \"        border-bottom-left-radius: 0;\\n\" +\n+                        \"        background-color: blue;\\n\" +\n+                        \"      }\\n\" +\n+                        \"      .bad2 {\\n\" +\n+                        \"        border-bottom-left-radius: 0;\\n\" +\n+                        \"        border-bottom-right-radius: 0;\\n\" +\n+                        \"        background-color: green;\\n\" +\n+                        \"      }\\n\" +\n+                        \"      .bad3 {\\n\" +\n+                        \"        border-bottom-left-radius: 0;\\n\" +\n+                        \"        border-bottom-right-radius: 0;\\n\" +\n+                        \"        border-top-right-radius: 0;\\n\" +\n+                        \"      }\\n\" +\n+                        \"    <\/style>\\n\" +\n+                        \"  <\/head>\\n\" +\n+                        \"  <body style='margin: 0px 0px;'>\\n\" +\n+                        \"    <button class=\\\"bad0\\\">A<\/button>\\n\" +\n+                        \"    <button class=\\\"bad1\\\">B<\/button>\\n\" +\n+                        \"    <button class=\\\"bad2\\\">C<\/button>\\n\" +\n+                        \"    <button class=\\\"bad3\\\">D<\/button>\\n\" +\n+                        \"  <\/body>\\n\" +\n+                        \"<\/html>\"\n@@ -377,1 +377,1 @@\n-            assertFalse(\"Color should not be red:\" + pixelAt0x0, isColorsSimilar(Color.RED, pixelAt0x0, 1));\n+            assertFalse(isColorsSimilar(Color.RED, pixelAt0x0, 1), \"Color should not be red:\" + pixelAt0x0);\n@@ -379,1 +379,1 @@\n-            assertFalse(\"Color should not be red:\" + pixelAt199x0, isColorsSimilar(Color.RED, pixelAt199x0, 1));\n+            assertFalse(isColorsSimilar(Color.RED, pixelAt199x0, 1), \"Color should not be red:\" + pixelAt199x0);\n@@ -381,1 +381,1 @@\n-            assertFalse(\"Color should not be red:\" + pixelAt0x99, isColorsSimilar(Color.RED, pixelAt0x99, 1));\n+            assertFalse(isColorsSimilar(Color.RED, pixelAt0x99, 1), \"Color should not be red:\" + pixelAt0x99);\n@@ -383,1 +383,1 @@\n-            assertFalse(\"Color should not be red:\" + pixelAt199x99, isColorsSimilar(Color.RED, pixelAt199x99, 1));\n+            assertFalse(isColorsSimilar(Color.RED, pixelAt199x99, 1), \"Color should not be red:\" + pixelAt199x99);\n@@ -386,1 +386,1 @@\n-            assertFalse(\"Color should not be blue:\" + pixelAt0x100, isColorsSimilar(Color.BLUE, pixelAt0x100, 1));\n+            assertFalse(isColorsSimilar(Color.BLUE, pixelAt0x100, 1), \"Color should not be blue:\" + pixelAt0x100);\n@@ -388,1 +388,1 @@\n-            assertFalse(\"Color should not be blue:\" + pixelAt199x100, isColorsSimilar(Color.BLUE, pixelAt199x100, 1));\n+            assertFalse(isColorsSimilar(Color.BLUE, pixelAt199x100, 1), \"Color should not be blue:\" + pixelAt199x100);\n@@ -390,1 +390,1 @@\n-            assertTrue(\"Color should be opaque blue:\" + pixel0x199, isColorsSimilar(Color.BLUE, pixel0x199, 1));\n+            assertTrue(isColorsSimilar(Color.BLUE, pixel0x199, 1), \"Color should be opaque blue:\" + pixel0x199);\n@@ -392,1 +392,1 @@\n-            assertFalse(\"Color should not be blue:\" + pixelAt199x199, isColorsSimilar(Color.BLUE, pixelAt199x199, 1));\n+            assertFalse(isColorsSimilar(Color.BLUE, pixelAt199x199, 1), \"Color should not be blue:\" + pixelAt199x199);\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/CSSTest.java","additions":48,"deletions":48,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -45,2 +45,2 @@\n-import org.junit.Test;\n-import org.junit.Ignore;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Disabled;\n@@ -162,1 +162,1 @@\n-    @Ignore(\"JDK-8290238\")\n+    @Disabled(\"JDK-8290238\")\n@@ -200,1 +200,1 @@\n-                       .replaceAll(\"DEFAULT\", defaultValue);\n+                .replaceAll(\"DEFAULT\", defaultValue);\n@@ -282,1 +282,1 @@\n-                                    r.getWidth(), r.getHeight());\n+                            r.getWidth(), r.getHeight());\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/CallbackTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -37,3 +37,3 @@\n-import org.junit.After;\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -50,1 +50,1 @@\n-        final String htmlCanvasContent = \"\\n\"\n+    final String htmlCanvasContent = \"\\n\"\n@@ -73,9 +73,9 @@\n-        final int[] wrongPixelArray = {255, 0, 0, 255,\n-                                       255, 0, 0, 255,\n-                                       255, 0, 0, 255,\n-                                       255, 0, 0, 255,\n-                                       255, 0, 0, 255,\n-                                       255, 0, 0, 255,\n-                                       255, 0, 0, 255,\n-                                       255, 0, 0, 255,};\n-        *\/\n+         final int[] wrongPixelArray = {255, 0, 0, 255,\n+         255, 0, 0, 255,\n+         255, 0, 0, 255,\n+         255, 0, 0, 255,\n+         255, 0, 0, 255,\n+         255, 0, 0, 255,\n+         255, 0, 0, 255,\n+         255, 0, 0, 255,};\n+         *\/\n@@ -85,7 +85,7 @@\n-                                          255, 0, 0, 255,\n-                                          255, 0, 0, 255,\n-                                          255, 0, 0, 255,\n-                                          0, 0, 0, 0,\n-                                          0, 0, 0, 0,\n-                                          0, 0, 0, 0,\n-                                          0, 0, 0, 0};\n+                255, 0, 0, 255,\n+                255, 0, 0, 255,\n+                255, 0, 0, 255,\n+                0, 0, 0, 0,\n+                0, 0, 0, 0,\n+                0, 0, 0, 0,\n+                0, 0, 0, 0};\n@@ -95,1 +95,1 @@\n-            assertEquals(\"Device Pixel Ratio should be 1\", 1, (int) getEngine().executeScript(\"window.devicePixelRatio\"));\n+            assertEquals(1, (int) getEngine().executeScript(\"window.devicePixelRatio\"), \"Device Pixel Ratio should be 1\");\n@@ -99,1 +99,1 @@\n-                assertEquals(\"StrokeRect pixel data is same\", expectedPixelArray[i - 16], (int)obj.getSlot(i));\n+                assertEquals(expectedPixelArray[i - 16], (int)obj.getSlot(i), \"StrokeRect pixel data is same\");\n@@ -117,4 +117,2 @@\n-            assertEquals(\"Arc startAngle\", redColor,\n-                    (int) getEngine().executeScript(\"document.getElementById('canvas').getContext('2d').getImageData(260,213,1,1).data[0]\"));\n-            assertEquals(\"Arc endAngle\", redColor,\n-                    (int) getEngine().executeScript(\"document.getElementById('canvas').getContext('2d').getImageData(300,75,1,1).data[0]\"));\n+            assertEquals(redColor, (int) getEngine().executeScript(\"document.getElementById('canvas').getContext('2d').getImageData(260,213,1,1).data[0]\"), \"Arc startAngle\");\n+            assertEquals(redColor, (int) getEngine().executeScript(\"document.getElementById('canvas').getContext('2d').getImageData(300,75,1,1).data[0]\"), \"Arc endAngle\");\n@@ -127,16 +125,16 @@\n-            + \"<canvas id='canvaspattern' width='100' height='100'><\/canvas>\\n\"\n-            + \"<svg id='svgpattern'><\/svg>\\n\"\n-            + \"<script>\\n\"\n-            + \"var patternCanvas = document.createElement('canvas');\\n\"\n-            + \"var patternCtx = patternCanvas.getContext('2d');\\n\"\n-            + \"patternCanvas.width = patternCanvas.height = 30;\\n\"\n-            + \"patternCtx.fillStyle = 'red';\\n\"\n-            + \"patternCtx.fillRect(0, 0, 20, 20);\\n\"\n-            + \"\\n\"\n-            + \"var ctx = document.getElementById('canvaspattern').getContext('2d');\\n\"\n-            + \"var pattern = ctx.createPattern(patternCanvas, 'repeat');\\n\"\n-            + \"var matrix = document.getElementById('svgpattern').createSVGMatrix();\\n\"\n-            + \"pattern.setTransform(matrix.translate(10, 10));\\n\"\n-            + \"ctx.fillStyle = pattern;\\n\"\n-            + \"ctx.fillRect(0, 0, 100, 100);\\n\"\n-            + \"<\/script>\\n\";\n+                + \"<canvas id='canvaspattern' width='100' height='100'><\/canvas>\\n\"\n+                + \"<svg id='svgpattern'><\/svg>\\n\"\n+                + \"<script>\\n\"\n+                + \"var patternCanvas = document.createElement('canvas');\\n\"\n+                + \"var patternCtx = patternCanvas.getContext('2d');\\n\"\n+                + \"patternCanvas.width = patternCanvas.height = 30;\\n\"\n+                + \"patternCtx.fillStyle = 'red';\\n\"\n+                + \"patternCtx.fillRect(0, 0, 20, 20);\\n\"\n+                + \"\\n\"\n+                + \"var ctx = document.getElementById('canvaspattern').getContext('2d');\\n\"\n+                + \"var pattern = ctx.createPattern(patternCanvas, 'repeat');\\n\"\n+                + \"var matrix = document.getElementById('svgpattern').createSVGMatrix();\\n\"\n+                + \"pattern.setTransform(matrix.translate(10, 10));\\n\"\n+                + \"ctx.fillStyle = pattern;\\n\"\n+                + \"ctx.fillRect(0, 0, 100, 100);\\n\"\n+                + \"<\/script>\\n\";\n@@ -147,6 +145,23 @@\n-            assertEquals(\"Pattern top-left corner\", 0, (int) getEngine().executeScript(\n-                \"document.getElementById('canvaspattern').getContext('2d').getImageData(1, 1, 1, 1).data[0]\"));\n-            assertEquals(\"First rect top-left\", redColor, (int) getEngine().executeScript(\n-                \"document.getElementById('canvaspattern').getContext('2d').getImageData(11, 11, 1, 1).data[0]\"));\n-            assertEquals(\"First rect center\", redColor, (int) getEngine().executeScript(\n-                \"document.getElementById('canvaspattern').getContext('2d').getImageData(21, 21, 1, 1).data[0]\"));\n+            assertEquals(\n+                    0,\n+                    (int) getEngine().executeScript(\n+                            \"document.getElementById('canvaspattern').getContext('2d').getImageData(1, 1, 1, 1).data[0]\"\n+                    ),\n+                    \"Pattern top-left corner\"\n+            );\n+\n+            assertEquals(\n+                    redColor,\n+                    (int) getEngine().executeScript(\n+                            \"document.getElementById('canvaspattern').getContext('2d').getImageData(11, 11, 1, 1).data[0]\"\n+                    ),\n+                    \"First rect top-left\"\n+            );\n+\n+            assertEquals(\n+                    redColor,\n+                    (int) getEngine().executeScript(\n+                            \"document.getElementById('canvaspattern').getContext('2d').getImageData(21, 21, 1, 1).data[0]\"\n+                    ),\n+                    \"First rect center\"\n+            );\n@@ -171,1 +186,1 @@\n-         , mime);\n+            , mime);\n@@ -178,3 +193,4 @@\n-        assertFalse(String.format(\"Test failed with exception:\\n%s\", exMessage),\n-            exMessage.contains(\"Exception\") || exMessage.contains(\"Error\"));\n-\n+        assertFalse(\n+                exMessage.contains(\"Exception\") || exMessage.contains(\"Error\"),\n+                String.format(\"Test failed with exception:\\n%s\", exMessage)\n+        );\n@@ -188,1 +204,1 @@\n-        assertNotNull(\"Base64 decoded image data must be valid\", imgBytes);\n+        assertNotNull(imgBytes, \"Base64 decoded image data must be valid\");\n@@ -197,2 +213,2 @@\n-        assertTrue(\"Two Color.WHITE must be 100% equal\", isColorsSimilar(Color.WHITE, Color.WHITE, 0));\n-        assertTrue(\"Color.BLACK & Color.WHITE must be 100% different\", isColorsSimilar(Color.WHITE, Color.BLACK, 100));\n+        assertTrue(isColorsSimilar(Color.WHITE, Color.WHITE, 0), \"Two Color.WHITE must be 100% equal\");\n+        assertTrue(isColorsSimilar(Color.WHITE, Color.BLACK, 100), \"Color.BLACK & Color.WHITE must be 100% different\");\n@@ -200,2 +216,2 @@\n-        assertFalse(\"Color.BLACK & Color.WHITE must be different by at least 80%\", isColorsSimilar(Color.WHITE, Color.BLACK, 80));\n-        assertFalse(\"(0, 0, 0, 0) & Color.WHITE must be at least 99.99% different\", isColorsSimilar(Color.WHITE, new Color(0, true), 99.99f));\n+        assertFalse(isColorsSimilar(Color.WHITE, Color.BLACK, 80), \"Color.BLACK & Color.WHITE must be different by at least 80%\");\n+        assertFalse(isColorsSimilar(Color.WHITE, new Color(0, true), 99.99f), \"(0, 0, 0, 0) & Color.WHITE must be at least 99.99% different\");\n@@ -203,3 +219,3 @@\n-        assertTrue(\"Color.RED must be 100% equal to (255, 0, 0, 255)\", isColorsSimilar(Color.RED, new Color(255, 0, 0, 255), 0));\n-        assertTrue(\"Color.RED must be at least 99% similar to (255, 0, 0, 250)\", isColorsSimilar(Color.RED, new Color(255, 0, 0, 250), 1));\n-        assertTrue(\"Color.RED must be at least 95% similar to (250, 5, 5, 250)\", isColorsSimilar(Color.RED, new Color(250, 5, 5, 250), 5));\n+        assertTrue(isColorsSimilar(Color.RED, new Color(255, 0, 0, 255), 0), \"Color.RED must be 100% equal to (255, 0, 0, 255)\");\n+        assertTrue(isColorsSimilar(Color.RED, new Color(255, 0, 0, 250), 1), \"Color.RED must be at least 99% similar to (255, 0, 0, 250)\");\n+        assertTrue(isColorsSimilar(Color.RED, new Color(250, 5, 5, 250), 5), \"Color.RED must be at least 95% similar to (250, 5, 5, 250)\");\n@@ -207,3 +223,3 @@\n-        assertTrue(\"Color.GREEN must be 100% equal to (0, 255, 0, 255)\", isColorsSimilar(Color.GREEN, new Color(0, 255, 0, 255), 0));\n-        assertTrue(\"Color.GREEN must be at least 99% similar to (0, 255, 0, 250)\", isColorsSimilar(Color.GREEN, new Color(0, 255, 0, 250), 1));\n-        assertTrue(\"Color.GREEN must be at least 95% similar to (5, 250, 5, 250)\", isColorsSimilar(Color.GREEN, new Color(5, 250, 5, 250), 5));\n+        assertTrue(isColorsSimilar(Color.GREEN, new Color(0, 255, 0, 255), 0), \"Color.GREEN must be 100% equal to (0, 255, 0, 255)\");\n+        assertTrue(isColorsSimilar(Color.GREEN, new Color(0, 255, 0, 250), 1), \"Color.GREEN must be at least 99% similar to (0, 255, 0, 250)\");\n+        assertTrue(isColorsSimilar(Color.GREEN, new Color(5, 250, 5, 250), 5), \"Color.GREEN must be at least 95% similar to (5, 250, 5, 250)\");\n@@ -211,3 +227,3 @@\n-        assertTrue(\"Color.BLUE must be 100% equal to (0, 255, 0, 255)\", isColorsSimilar(Color.BLUE, new Color(0, 0, 255, 255), 0));\n-        assertTrue(\"Color.BLUE must be at least 99% similar to (0, 0, 255, 250)\", isColorsSimilar(Color.BLUE, new Color(0, 0, 255, 250), 1));\n-        assertTrue(\"Color.BLUE must be at least 95% similar to (5, 5, 250, 250)\", isColorsSimilar(Color.BLUE, new Color(5, 5, 250, 250), 5));\n+        assertTrue(isColorsSimilar(Color.BLUE, new Color(0, 0, 255, 255), 0), \"Color.BLUE must be 100% equal to (0, 255, 0, 255)\");\n+        assertTrue(isColorsSimilar(Color.BLUE, new Color(0, 0, 255, 250), 1), \"Color.BLUE must be at least 99% similar to (0, 0, 255, 250)\");\n+        assertTrue(isColorsSimilar(Color.BLUE, new Color(5, 5, 250, 250), 5), \"Color.BLUE must be at least 95% similar to (5, 5, 250, 250)\");\n@@ -215,2 +231,2 @@\n-        assertTrue(\"(0, 0, 0, 0) must be at least 95% similar to (5, 5, 5, 5)\", isColorsSimilar(new Color(0, true), new Color(5, 5, 5, 5), 5));\n-        assertFalse(\"(0, 0, 0, 0) and (5, 5, 5, 5) must be different by at least 1%\", isColorsSimilar(new Color(0, true), new Color(5, 5, 5, 5), 1));\n+        assertTrue(isColorsSimilar(new Color(0, true), new Color(5, 5, 5, 5), 5), \"(0, 0, 0, 0) must be at least 95% similar to (5, 5, 5, 5)\");\n+        assertFalse(isColorsSimilar(new Color(0, true), new Color(5, 5, 5, 5), 1), \"(0, 0, 0, 0) and (5, 5, 5, 5) must be different by at least 1%\");\n@@ -218,2 +234,2 @@\n-        assertTrue(\"Color.RED must be at least 25% similar to Color.GREEN\", isColorsSimilar(Color.RED, Color.GREEN, 75));\n-        assertFalse(\"Color.RED and Color.GREEN must be different by at least 70%\", isColorsSimilar(Color.RED, Color.GREEN, 70));\n+        assertTrue(isColorsSimilar(Color.RED, Color.GREEN, 75), \"Color.RED must be at least 25% similar to Color.GREEN\");\n+        assertFalse(isColorsSimilar(Color.RED, Color.GREEN, 70), \"Color.RED and Color.GREEN must be different by at least 70%\");\n@@ -228,1 +244,1 @@\n-        assertTrue(\"Color should be opaque red:\" + pixelAt25x25, isColorsSimilar(Color.RED, pixelAt25x25, 1));\n+        assertTrue(isColorsSimilar(Color.RED, pixelAt25x25, 1), \"Color should be opaque red:\" + pixelAt25x25);\n@@ -232,1 +248,1 @@\n-        assertTrue(\"Color should be transparent black:\" + pixelAt75x25, isColorsSimilar(new Color(0, true), pixelAt75x25, 1));\n+        assertTrue(isColorsSimilar(new Color(0, true), pixelAt75x25, 1), \"Color should be transparent black:\" + pixelAt75x25);\n@@ -241,1 +257,1 @@\n-        assertTrue(\"Color should be opaque red:\" + pixelAt25x25, isColorsSimilar(Color.RED, pixelAt25x25, 1));\n+        assertTrue(isColorsSimilar(Color.RED, pixelAt25x25, 1), \"Color should be opaque red:\" + pixelAt25x25);\n@@ -245,1 +261,1 @@\n-        assertTrue(\"Color should be transparent black:\" + pixelAt75x25, isColorsSimilar(Color.BLACK, pixelAt75x25, 1));\n+        assertTrue(isColorsSimilar(Color.BLACK, pixelAt75x25, 1), \"Color should be transparent black:\" + pixelAt75x25);\n@@ -248,1 +264,1 @@\n-    @After\n+    @AfterEach\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/CanvasTest.java","additions":91,"deletions":75,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-import static org.junit.Assert.fail;\n-import org.junit.Test;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/CheckFxThreadTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,6 +28,6 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -37,1 +37,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -61,8 +61,8 @@\n-                for (int i = 0 ; i < ee.getLength() ; i++) {\n-                    Node n = ee.item(i);\n-                    String s = ((ElementImpl)n).getId();\n-                    String newId = \"new\" + s;\n-                    ((ElementImpl)n).setId(newId);\n-                    assertEquals(\"New element id\", newId, ((ElementImpl)n).getId());\n-                    numProcessed++;\n-                }\n+            for (int i = 0 ; i < ee.getLength() ; i++) {\n+                Node n = ee.item(i);\n+                String s = ((ElementImpl)n).getId();\n+                String newId = \"new\" + s;\n+                ((ElementImpl)n).setId(newId);\n+                assertEquals(newId, ((ElementImpl)n).getId(), \"New element id\");\n+                numProcessed++;\n+            }\n@@ -70,1 +70,1 @@\n-            assertTrue(\"Number of processed Elements is equal to 0\", numProcessed > 0);\n+            assertTrue(numProcessed > 0, \"Number of processed Elements is equal to 0\");\n@@ -79,1 +79,1 @@\n-            assertEquals(\"Text content of an empty paragraph\", \"\", textContent);\n+            assertEquals(\"\", textContent, \"Text content of an empty paragraph\");\n@@ -99,2 +99,2 @@\n-            assertSame(\"Sibling expected\", right2, n.getNextSibling());\n-            assertSame(\"Sibling expected\", n, right2.getPreviousSibling());\n+            assertSame(right2, n.getNextSibling(), \"Sibling expected\");\n+            assertSame(n, right2.getPreviousSibling(), \"Sibling expected\");\n@@ -103,2 +103,2 @@\n-            assertSame(\"Sibling expected\", left2, right2.getPreviousSibling());\n-            assertSame(\"Parent check\", p2, right2.getParentNode());\n+            assertSame(left2, right2.getPreviousSibling(), \"Sibling expected\");\n+            assertSame(p2, right2.getParentNode(), \"Parent check\");\n@@ -109,1 +109,1 @@\n-            assertSame(\"Returned node\", n, ret);\n+            assertSame(n, ret, \"Returned node\");\n@@ -129,2 +129,2 @@\n-            assertSame(\"Sibling expected\", right2, n.getNextSibling());\n-            assertSame(\"Sibling expected\", n, right2.getPreviousSibling());\n+            assertSame(right2, n.getNextSibling(), \"Sibling expected\");\n+            assertSame(n, right2.getPreviousSibling(), \"Sibling expected\");\n@@ -142,2 +142,2 @@\n-            assertSame(\"Sibling expected\", left2, right2.getPreviousSibling());\n-            assertSame(\"Parent check\", p2, right2.getParentNode());\n+            assertSame(left2, right2.getPreviousSibling(), \"Sibling expected\");\n+            assertSame(p2, right2.getParentNode(), \"Parent check\");\n@@ -148,1 +148,1 @@\n-            assertSame(\"Returned node\", n, ret);\n+            assertSame(n, ret, \"Returned node\");\n@@ -173,1 +173,1 @@\n-            assertEquals(\"Returned node\", n, ret);\n+            assertEquals(n, ret, \"Returned node\");\n@@ -200,1 +200,1 @@\n-            assertEquals(\"Returned node\", old, ret);\n+            assertEquals(old, ret, \"Returned node\");\n@@ -218,1 +218,1 @@\n-            assertEquals(\"Returned node\", n, ret);\n+            assertEquals(n, ret, \"Returned node\");\n@@ -234,5 +234,5 @@\n-                    @Override\n-                    public void handleEvent(Event evt) {\n-                        evtTarget[0] = evt.getTarget();\n-                    }\n-                };\n+                @Override\n+                public void handleEvent(Event evt) {\n+                    evtTarget[0] = evt.getTarget();\n+                }\n+            };\n@@ -240,1 +240,1 @@\n-                                               listener, false);\n+                    listener, false);\n@@ -243,1 +243,1 @@\n-            assertEquals(\"event target2\", evtTarget[0], n);\n+            assertEquals(evtTarget[0], n, \"event target2\");\n@@ -246,1 +246,1 @@\n-            assertEquals(\"Returned node\", n, ret);\n+            assertEquals(n, ret, \"Returned node\");\n@@ -254,2 +254,2 @@\n-            assertEquals(\"P element's node type\", Node.ELEMENT_NODE, p.getNodeType());\n-            assertEquals(\"P element's tag name\", \"P\", p.getTagName());\n+            assertEquals(Node.ELEMENT_NODE, p.getNodeType(), \"P element's node type\");\n+            assertEquals(\"P\", p.getTagName(), \"P element's tag name\");\n@@ -258,1 +258,1 @@\n-            assertEquals(\"Paragraph child count\", 3, children.getLength());\n+            assertEquals(3, children.getLength(), \"Paragraph child count\");\n@@ -260,1 +260,1 @@\n-            assertEquals(\"Text node type\", Node.TEXT_NODE, text.getNodeType());\n+            assertEquals(Node.TEXT_NODE, text.getNodeType(), \"Text node type\");\n@@ -262,1 +262,1 @@\n-            assertEquals(\"Comment node type\", Node.COMMENT_NODE, comment.getNodeType());\n+            assertEquals(Node.COMMENT_NODE, comment.getNodeType(), \"Comment node type\");\n@@ -264,1 +264,1 @@\n-            assertEquals(\"SPAN element's node type\", Node.ELEMENT_NODE, element.getNodeType());\n+            assertEquals(Node.ELEMENT_NODE, element.getNodeType(), \"SPAN element's node type\");\n@@ -267,4 +267,4 @@\n-            assertEquals(\"SPAN element's tag name\", \"SPAN\", span.getTagName());\n-            assertTrue(\"SPAN has 'class' attribute\", span.hasAttribute(\"class\"));\n-            assertTrue(\"SPAN has 'CLASS' attribute\", span.hasAttribute(\"CLASS\"));\n-            assertEquals(\"SPAN attributes count\", 1, span.getAttributes().getLength());\n+            assertEquals(\"SPAN\", span.getTagName(), \"SPAN element's tag name\");\n+            assertTrue(span.hasAttribute(\"class\"), \"SPAN has 'class' attribute\");\n+            assertTrue(span.hasAttribute(\"CLASS\"), \"SPAN has 'CLASS' attribute\");\n+            assertEquals(1, span.getAttributes().getLength(), \"SPAN attributes count\");\n@@ -273,1 +273,1 @@\n-            assertEquals(\"Attr node type\", Node.ATTRIBUTE_NODE, attr.getNodeType());\n+            assertEquals(Node.ATTRIBUTE_NODE, attr.getNodeType(), \"Attr node type\");\n@@ -275,1 +275,1 @@\n-            assertEquals(\"SPAN element child count\", 1, children.getLength());\n+            assertEquals(1, children.getLength(), \"SPAN element child count\");\n@@ -277,1 +277,1 @@\n-            assertEquals(\"SPAN text node type\", Node.TEXT_NODE, text.getNodeType());\n+            assertEquals(Node.TEXT_NODE, text.getNodeType(), \"SPAN text node type\");\n@@ -286,1 +286,1 @@\n-            assertEquals(\"P element typification\", \"left\", elp.getAlign());\n+            assertEquals(\"left\", elp.getAlign(), \"P element typification\");\n@@ -290,1 +290,1 @@\n-            assertEquals(\"Image element typification\", \"file:\/\/\/C:\/test.png\", eli.getSrc());\n+            assertEquals(\"file:\/\/\/C:\/test.png\", eli.getSrc(), \"Image element typification\");\n@@ -322,8 +322,8 @@\n-                \"click\",\n-                true,\n-                true,\n-                ((DocumentView)htmlDoc).getDefaultView(),\n-                10,\n-                0, 0, 0, 0,\n-                true, true, true, true,\n-                (short)1, (EventTarget)body);\n+                    \"click\",\n+                    true,\n+                    true,\n+                    ((DocumentView)htmlDoc).getDefaultView(),\n+                    10,\n+                    0, 0, 0, 0,\n+                    true, true, true, true,\n+                    (short)1, (EventTarget)body);\n@@ -332,1 +332,1 @@\n-            assertEquals(\"Wrong body initial state\", \"bodyClass\", body.getClassName());\n+            assertEquals(\"bodyClass\", body.getClassName(), \"Wrong body initial state\");\n@@ -338,1 +338,1 @@\n-            assertEquals(\"JS EventHandler does not work directly\", \"testClass\", body.getClassName());\n+            assertEquals(\"testClass\", body.getClassName(), \"JS EventHandler does not work directly\");\n@@ -346,1 +346,1 @@\n-            assertEquals(\"Java EventHandler does not work directly\", \"newTestClass\", body.getClassName());\n+            assertEquals(\"newTestClass\", body.getClassName(), \"Java EventHandler does not work directly\");\n@@ -354,1 +354,1 @@\n-            assertEquals(\"JS EventHandler does not work from Java call\", \"testClass\", body.getClassName());\n+            assertEquals(\"testClass\", body.getClassName(), \"JS EventHandler does not work from Java call\");\n@@ -371,1 +371,1 @@\n-            assertEquals(\"Style extraction\", \"blue\", style.getPropertyValue(\"background-color\"));\n+            assertEquals(\"blue\", style.getPropertyValue(\"background-color\"), \"Style extraction\");\n@@ -382,1 +382,1 @@\n-                assertEquals(\"Style type\", \"text\/css\", type);\n+                assertEquals(\"text\/css\", type, \"Style type\");\n@@ -385,1 +385,1 @@\n-                    assertEquals(\"Style media\", \"screen\", media);\n+                    assertEquals(\"screen\", media, \"Style media\");\n@@ -391,6 +391,6 @@\n-                    case CSSRule.MEDIA_RULE:\n-                        CSSRuleList mediaRl = ((CSSMediaRule)r).getCssRules();\n-                        break;\n-                    case CSSRule.IMPORT_RULE:\n-                        String url = ((CSSImportRule)r).getHref();\n-                        break;\n+                        case CSSRule.MEDIA_RULE:\n+                            CSSRuleList mediaRl = ((CSSMediaRule)r).getCssRules();\n+                            break;\n+                        case CSSRule.IMPORT_RULE:\n+                            String url = ((CSSImportRule)r).getHref();\n+                            break;\n@@ -435,1 +435,1 @@\n-            assertEquals(\"Created attribute\", attributeName, attr.getName());\n+            assertEquals(attributeName, attr.getName(), \"Created attribute\");\n@@ -442,7 +442,4 @@\n-            int oldChildrenCount, Node leftSibling, Node rightSibling) {\n-        assertSame(\"Children count\",\n-                oldChildrenCount - 1, parent.getChildNodes().getLength());\n-        assertSame(\"Left sibling's next sibling\",\n-                rightSibling, leftSibling.getNextSibling());\n-        assertSame(\"Right sibling's previous sibling\",\n-                leftSibling, rightSibling.getPreviousSibling());\n+                                    int oldChildrenCount, Node leftSibling, Node rightSibling) {\n+        assertSame(oldChildrenCount - 1, parent.getChildNodes().getLength(), \"Children count\");\n+        assertSame(rightSibling, leftSibling.getNextSibling(), \"Left sibling's next sibling\");\n+        assertSame(leftSibling, rightSibling.getPreviousSibling(), \"Right sibling's previous sibling\");\n@@ -452,4 +449,2 @@\n-        assertEquals(\"Children count\",\n-                oldChildrenCount + 1, parent.getChildNodes().getLength());\n-        assertEquals(\"Added node's parent\",\n-                parent, n.getParentNode());\n+        assertEquals(oldChildrenCount + 1, parent.getChildNodes().getLength(), \"Children count\");\n+        assertEquals(parent, n.getParentNode(), \"Added node's parent\");\n@@ -459,4 +454,2 @@\n-        assertSame(\"Added node's previous sibling\",\n-                leftSibling, n.getPreviousSibling());\n-        assertSame(\"Added node's next sibling\",\n-                rightSibling, n.getNextSibling());\n+        assertSame(leftSibling, n.getPreviousSibling(), \"Added node's previous sibling\");\n+        assertSame(rightSibling, n.getNextSibling(), \"Added node's next sibling\");\n@@ -465,2 +458,1 @@\n-            assertSame(\"Previous sibling's next sibling\",\n-                    n, leftSibling.getNextSibling());\n+            assertSame(n, leftSibling.getNextSibling(), \"Previous sibling's next sibling\");\n@@ -469,2 +461,1 @@\n-            assertSame(\"Next sibling's previous sibling\",\n-                    n, rightSibling.getPreviousSibling());\n+            assertSame(n, rightSibling.getPreviousSibling(), \"Next sibling's previous sibling\");\n@@ -474,3 +465,3 @@\n-        assertNull(\"Removed node's parent\", n.getParentNode());\n-        assertNull(\"Removed node's previous sibling\", n.getPreviousSibling());\n-        assertNull(\"Removed node's next sibling\", n.getNextSibling());\n+        assertNull(n.getParentNode(), \"Removed node's parent\");\n+        assertNull(n.getPreviousSibling(), \"Removed node's previous sibling\");\n+        assertNull(n.getNextSibling(), \"Removed node's next sibling\");\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/DOMTest.java","additions":88,"deletions":97,"binary":false,"changes":185,"status":"modified"},{"patch":"@@ -34,4 +34,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n-import org.junit.Test;\n-import org.junit.After;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.AfterEach;\n@@ -161,1 +161,1 @@\n-    @After\n+    @AfterEach\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/DebuggerTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -36,6 +36,6 @@\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.AfterAll;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -58,1 +58,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -72,1 +72,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -82,1 +82,1 @@\n-    @After\n+    @AfterEach\n@@ -223,1 +223,1 @@\n-        throws IOException, DirectoryLockShim.DirectoryAlreadyInUseException\n+            throws IOException, DirectoryLockShim.DirectoryAlreadyInUseException\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/DirectoryLockTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -43,2 +43,2 @@\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -48,2 +48,2 @@\n-import static org.junit.Assert.*;\n-import org.junit.Before;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.BeforeEach;\n@@ -96,1 +96,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -104,2 +104,1 @@\n-        assertTrue(\"Timeout waiting for FX runtime to start\",\n-                startupLatch.await(15, TimeUnit.SECONDS));\n+        assertTrue(startupLatch.await(15, TimeUnit.SECONDS), \"Timeout waiting for FX runtime to start\");\n@@ -162,2 +161,1 @@\n-            assertTrue(\"Timeout waiting for content to load\",\n-                    loadLatch.await(5, TimeUnit.SECONDS));\n+            assertTrue(loadLatch.await(5, TimeUnit.SECONDS), \"Timeout waiting for content to load\");\n@@ -177,1 +175,1 @@\n-        assertNotNull(\"Document\", doc);\n+        assertNotNull(doc, \"Document\");\n@@ -180,1 +178,1 @@\n-        assertNotNull(\"DOM nodes\", nodeList);\n+        assertNotNull(nodeList, \"DOM nodes\");\n@@ -213,1 +211,1 @@\n-        assertEquals(\"Active references (\" + msg + \")\", exCount, count);\n+        assertEquals(exCount, count, \"Active references (\" + msg + \")\");\n@@ -216,1 +214,1 @@\n-    @Before\n+    @BeforeEach\n@@ -229,1 +227,1 @@\n-\/\/ ---------------------------------------------------------------\n+    \/\/ ---------------------------------------------------------------\n@@ -232,5 +230,5 @@\n-            \"Link: <a id=\\\"link0\\\" href=click>click me 0<\/a><br>\" +\n-            \"Link: <a id=\\\"link1\\\" href=click>click me 1<\/a><br>\" +\n-            \"Link: <a id=\\\"link2\\\" href=click>click me 2<\/a><br>\" +\n-            \"Link: <a id=\\\"link3\\\" href=click>click me 3<\/a><br>\" +\n-            \"<\/html><\/body>\";\n+                    \"Link: <a id=\\\"link0\\\" href=click>click me 0<\/a><br>\" +\n+                    \"Link: <a id=\\\"link1\\\" href=click>click me 1<\/a><br>\" +\n+                    \"Link: <a id=\\\"link2\\\" href=click>click me 2<\/a><br>\" +\n+                    \"Link: <a id=\\\"link3\\\" href=click>click me 3<\/a><br>\" +\n+                    \"<\/html><\/body>\";\n@@ -240,2 +238,2 @@\n-            \"Link: <a id=\\\"link0\\\" href=click>click me 0<\/a><br>\" +\n-             \"<\/html><\/body>\";\n+                    \"Link: <a id=\\\"link0\\\" href=click>click me 0<\/a><br>\" +\n+                    \"<\/html><\/body>\";\n@@ -272,1 +270,1 @@\n-        assertEquals(\"Click count\", 1, listeners.get(0).getClickCount());\n+        assertEquals(1, listeners.get(0).getClickCount(), \"Click count\");\n@@ -313,1 +311,1 @@\n-        assertEquals(\"Click count\", 1, listeners.get(0).get().getClickCount());\n+        assertEquals(1, listeners.get(0).get().getClickCount(), \"Click count\");\n@@ -375,3 +373,3 @@\n-        assertEquals(\"Click count\", 2, listeners.get(0).get().getClickCount());\n-        assertEquals(\"Click count\", 1, listeners.get(1).get().getClickCount());\n-        assertEquals(\"Click count\", 2, listeners.get(2).get().getClickCount());\n+        assertEquals(2, listeners.get(0).get().getClickCount(), \"Click count\");\n+        assertEquals(1, listeners.get(1).get().getClickCount(), \"Click count\");\n+        assertEquals(2, listeners.get(2).get().getClickCount(), \"Click count\");\n@@ -401,3 +399,3 @@\n-        assertEquals(\"Click count\", 3, listeners.get(0).get().getClickCount());\n-        assertEquals(\"Click count\", 2, listeners.get(1).get().getClickCount());\n-        assertEquals(\"Click count\", 3, listeners.get(2).get().getClickCount());\n+        assertEquals(3, listeners.get(0).get().getClickCount(), \"Click count\");\n+        assertEquals(2, listeners.get(1).get().getClickCount(), \"Click count\");\n+        assertEquals(3, listeners.get(2).get().getClickCount(), \"Click count\");\n@@ -427,2 +425,2 @@\n-        assertEquals(\"Click count\", 4, listeners.get(0).get().getClickCount());\n-        assertEquals(\"Click count\", 4, listeners.get(2).get().getClickCount());\n+        assertEquals(4, listeners.get(0).get().getClickCount(), \"Click count\");\n+        assertEquals(4, listeners.get(2).get().getClickCount(), \"Click count\");\n@@ -499,1 +497,1 @@\n-        assertEquals(\"Click count\", 1, listeners.get(0).getClickCount());\n+        assertEquals(1, listeners.get(0).getClickCount(), \"Click count\");\n@@ -544,2 +542,2 @@\n-        assertEquals(\"Click count\", 1, listeners1.get(0).getClickCount());\n-        assertEquals(\"Click count\", 0, listeners2.get(0).getClickCount());\n+        assertEquals(1, listeners1.get(0).getClickCount(), \"Click count\");\n+        assertEquals(0, listeners2.get(0).getClickCount(), \"Click count\");\n@@ -554,2 +552,2 @@\n-        assertEquals(\"Click count\", 1, listeners1.get(0).getClickCount());\n-        assertEquals(\"Click count\", 1, listeners2.get(0).getClickCount());\n+        assertEquals(1, listeners1.get(0).getClickCount(), \"Click count\");\n+        assertEquals(1, listeners2.get(0).getClickCount(), \"Click count\");\n@@ -569,2 +567,2 @@\n-        assertEquals(\"Click count\", 1, listeners1.get(0).getClickCount());\n-        assertEquals(\"Click count\", 2, listeners2.get(0).getClickCount());\n+        assertEquals(1, listeners1.get(0).getClickCount(), \"Click count\");\n+        assertEquals(2, listeners2.get(0).getClickCount(), \"Click count\");\n@@ -591,1 +589,1 @@\n-        assertEquals(\"Click count\", 2, listeners2.get(0).getClickCount());\n+        assertEquals(2, listeners2.get(0).getClickCount(), \"Click count\");\n@@ -625,1 +623,1 @@\n-        assertEquals(\"Click count\", 1, listeners.get(0).getClickCount());\n+        assertEquals(1, listeners.get(0).getClickCount(), \"Click count\");\n@@ -637,1 +635,1 @@\n-        assertEquals(\"Click count\", 1, listeners.get(0).getClickCount());\n+        assertEquals(1, listeners.get(0).getClickCount(), \"Click count\");\n@@ -682,1 +680,1 @@\n-        assertEquals(\"Click count\", 3, listeners.get(0).get().getClickCount());\n+        assertEquals(3, listeners.get(0).get().getClickCount(), \"Click count\");\n@@ -703,1 +701,1 @@\n-        assertEquals(\"Click count\", 3, listeners.get(0).get().getClickCount());\n+        assertEquals(3, listeners.get(0).get().getClickCount(), \"Click count\");\n@@ -732,1 +730,1 @@\n-        assertEquals(\"Click count\", 6, listeners.get(1).get().getClickCount() + listeners.get(0).get().getClickCount());\n+        assertEquals(6, listeners.get(1).get().getClickCount() + listeners.get(0).get().getClickCount(), \"Click count\");\n@@ -755,1 +753,1 @@\n-        assertEquals(\"Click count\", 6, listeners.get(1).get().getClickCount() + listeners.get(0).get().getClickCount());\n+        assertEquals(6, listeners.get(1).get().getClickCount() + listeners.get(0).get().getClickCount(), \"Click count\");\n@@ -812,1 +810,1 @@\n-        assertEquals(\"Click count\", 2, listeners.get(0).get().getClickCount());\n+        assertEquals(2, listeners.get(0).get().getClickCount(), \"Click count\");\n@@ -886,1 +884,1 @@\n-        assertEquals(\"Click count\", 3, listeners.get(0).get().getClickCount());\n+        assertEquals(3, listeners.get(0).get().getClickCount(), \"Click count\");\n@@ -900,2 +898,2 @@\n-        assertEquals(\"Click count\", 4, listeners.get(0).get().getClickCount());\n-        assertEquals(\"Click count\", 4, listeners.get(2).get().getClickCount());\n+        assertEquals(4, listeners.get(0).get().getClickCount(), \"Click count\");\n+        assertEquals(4, listeners.get(2).get().getClickCount(), \"Click count\");\n@@ -918,1 +916,1 @@\n-        assertEquals(\"Click count\", 2, listeners.get(4).get().getClickCount());\n+        assertEquals(2, listeners.get(4).get().getClickCount(), \"Click count\");\n@@ -958,2 +956,2 @@\n-        assertEquals(\"Click count\", 1, listeners.get(0).getClickCount());\n-        assertEquals(\"Click count\", 1, listeners.get(1).getClickCount());\n+        assertEquals(1, listeners.get(0).getClickCount(), \"Click count\");\n+        assertEquals(1, listeners.get(1).getClickCount(), \"Click count\");\n@@ -970,2 +968,2 @@\n-        assertEquals(\"Click count\", 1, listeners.get(0).getClickCount());\n-        assertEquals(\"Click count\", 2, listeners.get(1).getClickCount());\n+        assertEquals(1, listeners.get(0).getClickCount(), \"Click count\");\n+        assertEquals(2, listeners.get(1).getClickCount(), \"Click count\");\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/EventListenerLeakTest.java","additions":52,"deletions":54,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -42,4 +42,4 @@\n-import static org.junit.Assert.assertArrayEquals;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -47,2 +47,2 @@\n-import org.junit.Before;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -90,1 +90,1 @@\n-    @Before\n+    @BeforeEach\n@@ -102,2 +102,2 @@\n-        assertTrue(\"Page load is not finished yet\", getLoadState() == SUCCEEDED);\n-        assertNotNull(\"Document should not be null\", getEngine().getDocument());\n+        assertTrue(getLoadState() == SUCCEEDED, \"Page load is not finished yet\");\n+        assertNotNull(getEngine().getDocument(), \"Document should not be null\");\n@@ -122,1 +122,2 @@\n-            assertEquals(\"Unexpected file content received\", \"Hello World\", getEngine().executeScript(\"window.result\"));\n+            assertEquals(\"Hello World\", getEngine().executeScript(\"window.result\"),\n+                    \"Unexpected file content received\");\n@@ -129,1 +130,2 @@\n-            assertEquals(\"Unexpected file content received\", \"Hello World\", getEngine().executeScript(\"window.result\"));\n+            assertEquals(\"Hello World\", getEngine().executeScript(\"window.result\"),\n+                    \"Unexpected file content received\");\n@@ -136,1 +138,2 @@\n-            assertEquals(\"Unexpected file content received\", \"lo W\", getEngine().executeScript(\"window.result\"));\n+            assertEquals(\"lo W\", getEngine().executeScript(\"window.result\"),\n+                    \"Unexpected file content received\");\n@@ -143,1 +146,2 @@\n-            assertEquals(\"Unexpected file content received\", \"lo World\", getEngine().executeScript(\"window.result\"));\n+            assertEquals(\"lo World\", getEngine().executeScript(\"window.result\"),\n+                    \"Unexpected file content received\");\n@@ -150,1 +154,2 @@\n-            assertEquals(\"Unexpected file content received\", \"Hello World\", getEngine().executeScript(\"window.result\"));\n+            assertEquals(\"Hello World\", getEngine().executeScript(\"window.result\"),\n+                    \"Unexpected file content received\");\n@@ -157,1 +162,2 @@\n-            assertEquals(\"Unexpected file content received\", \"o World\", getEngine().executeScript(\"window.result\"));\n+            assertEquals(\"o World\", getEngine().executeScript(\"window.result\"),\n+                    \"Unexpected file content received\");\n@@ -164,1 +170,2 @@\n-            assertEquals(\"Unexpected file content received\", \"Hel\", getEngine().executeScript(\"window.result\"));\n+            assertEquals(\"Hel\", getEngine().executeScript(\"window.result\"),\n+                    \"Unexpected file content received\");\n@@ -171,1 +178,2 @@\n-            assertEquals(\"Unexpected file content received\", \"Hello Wo\", getEngine().executeScript(\"window.result\"));\n+            assertEquals(\"Hello Wo\", getEngine().executeScript(\"window.result\"),\n+                    \"Unexpected file content received\");\n@@ -178,1 +186,2 @@\n-            assertEquals(\"Unexpected file content received\", \"\", getEngine().executeScript(\"window.result\"));\n+            assertEquals(\"\", getEngine().executeScript(\"window.result\"),\n+                    \"Unexpected file content received\");\n@@ -185,1 +194,2 @@\n-            assertEquals(\"Unexpected file content received\", \"World\", getEngine().executeScript(\"window.result\"));\n+            assertEquals(\"World\", getEngine().executeScript(\"window.result\"),\n+                    \"Unexpected file content received\");\n@@ -192,1 +202,2 @@\n-            assertEquals(\"Unexpected file content received\", \"rld\", getEngine().executeScript(\"window.result\"));\n+            assertEquals(\"rld\", getEngine().executeScript(\"window.result\"),\n+                    \"Unexpected file content received\");\n@@ -199,1 +210,2 @@\n-            assertEquals(\"Unexpected file content received\", \"\", getEngine().executeScript(\"window.result\"));\n+            assertEquals(\"\", getEngine().executeScript(\"window.result\"),\n+                    \"Unexpected file content received\");\n@@ -209,1 +221,1 @@\n-        assertNotNull(\"BinaryFile content should not be null\", expectedBinaryData);\n+        assertNotNull(expectedBinaryData, \"BinaryFile content should not be null\");\n@@ -215,2 +227,2 @@\n-                assertNotNull(\"BinaryFile content read should not be null\", binBytes);\n-                assertArrayEquals(\"Unexpected file content received\", expectedBinaryData, binBytes);\n+                assertNotNull(binBytes, \"BinaryFile content read should not be null\");\n+                assertArrayEquals(expectedBinaryData, binBytes, \"Unexpected file content received\");\n@@ -229,2 +241,6 @@\n-                assertEquals(String.format(\"%s length must be equal in both Java & JavaScript\", fileList),\n-                                       expectedArrayBuffer.length, obj.getMember(\"length\"));\n+                String filePath = fileList[0];\n+                int expectedLength = expectedArrayBuffer.length;\n+                int actualLength = (Integer) obj.getMember(\"length\");\n+                String message = String.format(\"File at %s: Expected length %d but got %d\",\n+                        filePath, expectedLength, actualLength);\n+                assertEquals(expectedLength, actualLength, message);\n@@ -232,1 +248,1 @@\n-                    assertEquals(\"Unexpected file content received\", expectedArrayBuffer[i], ((Number)(obj.getSlot(i))).byteValue());\n+                    assertEquals(expectedArrayBuffer[i], ((Number)(obj.getSlot(i))).byteValue(),\"Unexpected file content received\");\n@@ -247,3 +263,2 @@\n-                    assertNotNull(\"window.result must have base64 encoded data\", encodedData);\n-                    assertEquals(\"Base64 EncodedData is not same as window.result\",\n-                                   \"data:text\/plain;base64,SGVsbG8gV29ybGQ=\", encodedData);\n+                    assertNotNull(encodedData, \"window.result must have base64 encoded data\");\n+                    assertEquals(\"data:text\/plain;base64,SGVsbG8gV29ybGQ=\", encodedData, \"Base64 EncodedData is not same as window.result\");\n@@ -253,3 +268,3 @@\n-                    assertNotNull(\"Base64 decoded data must be valid\", decodedData);\n-                    assertEquals(\"Base64 DecodedData is not same as File Content\",\n-                        new String(expectedArrayBuffer, \"utf-8\"), new String(decodedData, \"utf-8\"));\n+                    assertNotNull(decodedData, \"Base64 decoded data must be valid\");\n+                    assertEquals(new String(expectedArrayBuffer, \"utf-8\"), new String(decodedData, \"utf-8\"),\n+                            \"Base64 DecodedData is not same as File Content\");\n@@ -268,2 +283,2 @@\n-            assertEquals(\"Unexpected file content received\", \"failed due to abort\",\n-                          getEngine().executeScript(\"window.result\"));\n+            assertEquals(\"failed due to abort\", getEngine().executeScript(\"window.result\"),\n+                    \"Unexpected file content received\");\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/FileReaderTest.java","additions":50,"deletions":35,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -39,3 +39,3 @@\n-import org.junit.After;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n@@ -44,4 +44,9 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.stream.Stream;\n@@ -49,1 +54,0 @@\n-@RunWith(Parameterized.class)\n@@ -54,22 +58,10 @@\n-    \/\/ To arguments from junit data provider.\n-    private final String element;\n-    private final String selector;\n-\n-    \/\/ TODO: junit 4.11 provides an option to label arguments.\n-    @Parameters\n-    public static Collection<String[]> data() {\n-        return Arrays.asList(new String[][] {\n-            {\"<input type='checkbox'\/>\", \"check-box\"},\n-            {\"<input type='radio'\/>\", \"radio-button\"},\n-            {\"<input type='button'\/>\", \"button\"},\n-            {\"<input type='text'\/>\", \"text-field\"},\n-            {\"<meter value='06'>60%<\/meter>\", \"progress-bar\"},\n-            {\"<input type='range'\/>\", \"slider\"},\n-            \/\/ TODO: Add other form controls once it is enabled\n-            \/\/ from WebKit.\n-        });\n-    }\n-\n-    public FormControlsTest(final String element, final String selector) {\n-        this.element = element;\n-        this.selector = selector;\n+    static Stream<Arguments> dataProvider() {\n+        return Stream.of(\n+                Arguments.of(\"<input type='checkbox'\/>\", \"check-box\"),\n+                Arguments.of(\"<input type='radio'\/>\", \"radio-button\"),\n+                Arguments.of(\"<input type='button'\/>\", \"button\"),\n+                Arguments.of(\"<input type='text'\/>\", \"text-field\"),\n+                Arguments.of(\"<meter value='06'>60%<\/meter>\", \"progress-bar\"),\n+                Arguments.of(\"<input type='range'\/>\", \"slider\")\n+                \/\/ TODO: Add other form controls once it is enabled from WebKit.\n+        );\n@@ -78,1 +70,1 @@\n-    private void printWithFormControl(final Runnable testBody) {\n+    private void printWithFormControl(final Runnable testBody, String element, String selector) {\n@@ -87,2 +79,2 @@\n-        assertFalse(String.format(\"%s:Test failed with exception:\\n%s\", selector, exMessage),\n-            exMessage.contains(\"Exception\") || exMessage.contains(\"Error\"));\n+        assertFalse(exMessage.contains(\"Exception\") || exMessage.contains(\"Error\"),\n+                String.format(\"%s: Test failed with exception:\\n%s\", selector, exMessage));\n@@ -91,2 +83,3 @@\n-    @Test\n-    public void testRendering() {\n+    @ParameterizedTest\n+    @MethodSource(\"dataProvider\")\n+    public void testRendering(String element, String selector) {\n@@ -98,5 +91,3 @@\n-            \/\/ Check whether control is added as a children of WebView.\n-            assertEquals(\n-                String.format(\"%s control doesn't exists as child of WebView\", selector),\n-                1,\n-                elements.size());\n+            \/\/ Check whether control is added as a child of WebView.\n+            assertEquals(1, elements.size(),\n+                    String.format(\"%s control doesn't exist as child of WebView\", selector));\n@@ -104,4 +95,3 @@\n-            \/\/ Check whether Node's styleClass contains given selector.\n-            assertTrue(\n-                String.format(\"%s styleClass=%s is incorrect\", node.getTypeSelector(), selector),\n-                node.getStyleClass().contains(selector));\n+            \/\/ Check whether Node's styleClass contains the given selector.\n+            assertTrue(node.getStyleClass().contains(selector),\n+                    String.format(\"%s styleClass=%s is incorrect\", node.getTypeSelector(), selector));\n@@ -110,1 +100,1 @@\n-        printWithFormControl(testBody);\n+        printWithFormControl(testBody, element, selector);\n@@ -113,2 +103,3 @@\n-    @Test\n-    public void testPrint() {\n+    @ParameterizedTest\n+    @MethodSource(\"dataProvider\")\n+    public void testPrint(String element, String selector) {\n@@ -121,1 +112,1 @@\n-        printWithFormControl(testBody);\n+        printWithFormControl(testBody, element, selector);\n@@ -124,2 +115,3 @@\n-    @Test\n-    public void testPrintByPageNumber() {\n+    @ParameterizedTest\n+    @MethodSource(\"dataProvider\")\n+    public void testPrintByPageNumber(String element, String selector) {\n@@ -131,1 +123,2 @@\n-        printWithFormControl(testBody);\n+\n+        printWithFormControl(testBody, element, selector);\n@@ -134,1 +127,1 @@\n-    @After\n+    @AfterEach\n@@ -139,1 +132,0 @@\n-\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/FormControlsTest.java","additions":45,"deletions":53,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-import org.junit.Test;\n-import org.junit.Ignore;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Disabled;\n@@ -38,2 +38,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -48,1 +48,1 @@\n-    @Ignore(\"JDK-8290237\")\n+    @Disabled(\"JDK-8290237\")\n@@ -55,5 +55,5 @@\n-                \"<input id='pasteTarget'><\/input>\" +\n-                \"<script>\"+\n-                \"srcInput.onpaste = function(e) {\" +\n-                \"pasteTarget.value = e.clipboardData.getData('text\/plain');}\" +\n-                \"<\/script>\");\n+                        \"<input id='pasteTarget'><\/input>\" +\n+                        \"<script>\"+\n+                        \"srcInput.onpaste = function(e) {\" +\n+                        \"pasteTarget.value = e.clipboardData.getData('text\/plain');}\" +\n+                        \"<\/script>\");\n@@ -62,2 +62,1 @@\n-            assertTrue(\"LoadContent completed successfully\",\n-                    getEngine().getLoadWorker().getState() == SUCCEEDED);\n+            assertTrue(getEngine().getLoadWorker().getState() == SUCCEEDED, \"LoadContent completed successfully\");\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/HTMLEditingTest.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import org.junit.Test;\n-import org.junit.Before;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.BeforeEach;\n@@ -37,5 +37,5 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -67,1 +67,1 @@\n-    @Before\n+    @BeforeEach\n@@ -75,0 +75,4 @@\n+        \/\/ Assuming executeScript is a method that returns an Object\n+        Object historyState = executeScript(historyStateScript);\n+        Object historyLength = executeScript(historyLengthScript);\n+\n@@ -76,2 +80,2 @@\n-        assertNull(historyStateScript + \" : Failed\",\n-                executeScript(historyStateScript));\n+        assertNull(historyState, historyStateScript + \" : Failed\");\n+\n@@ -79,2 +83,1 @@\n-        assertEquals(historyLengthScript + \" : Failed\",\n-                1, executeScript(historyLengthScript));\n+        assertEquals(1, historyLength, historyLengthScript + \" : Failed\");\n@@ -85,2 +88,1 @@\n-        assertNotNull(historyStateScript + \" : Failed\",\n-                executeScript(historyStateScript));\n+        assertNotNull(executeScript(historyStateScript), historyStateScript + \" : Failed\");\n@@ -88,2 +90,1 @@\n-        assertEquals(\"history.state.push1key Failed\",\n-                1, executeScript(\"history.state.push1key\"));\n+        assertEquals(1, executeScript(\"history.state.push1key\"), \"history.state.push1key Failed\");\n@@ -93,2 +94,1 @@\n-        assertEquals(historyLengthScript + \" : Failed\",\n-                2, executeScript(historyLengthScript));\n+        assertEquals(2, executeScript(historyLengthScript), historyLengthScript + \" : Failed\");\n@@ -97,2 +97,1 @@\n-        assertTrue(historyPushScript1 + \" : Failed\",\n-                getEngine().getLocation().endsWith(firstLoadUrl));\n+        assertTrue(getEngine().getLocation().endsWith(firstLoadUrl), historyPushScript1 + \" : Failed\");\n@@ -103,2 +102,1 @@\n-        assertEquals(\"history.state.push1key Failed\",\n-                2, executeScript(\"history.state.push2key\"));\n+        assertEquals(2, executeScript(\"history.state.push2key\"), \"history.state.push1key Failed\");\n@@ -108,2 +106,1 @@\n-        assertEquals(historyLengthScript + \" : Failed\",\n-                3, executeScript(historyLengthScript));\n+        assertEquals(3, executeScript(historyLengthScript), historyLengthScript + \" : Failed\");\n@@ -112,2 +109,1 @@\n-        assertTrue(historyPushScript2 + \" : Failed\",\n-                getEngine().getLocation().endsWith(secondLoadUrl));\n+        assertTrue(getEngine().getLocation().endsWith(secondLoadUrl), historyPushScript2 + \" : Failed\");\n@@ -117,2 +113,1 @@\n-        assertEquals(historyLengthScript + \" : Failed\",\n-                3, executeScript(historyLengthScript));\n+        assertEquals(3, executeScript(historyLengthScript), historyLengthScript + \" : Failed\");\n@@ -120,2 +115,1 @@\n-        assertEquals(\"history.state.replaceObject Failed\",\n-                3, executeScript(\"history.state.replaceObject\"));\n+        assertEquals(3, executeScript(\"history.state.replaceObject\"), \"history.state.replaceObject Failed\");\n@@ -124,2 +118,1 @@\n-        assertTrue(historyPushScript2 + \" : Failed\",\n-                getEngine().getLocation().endsWith(replaceLoadUrl));\n+        assertTrue(getEngine().getLocation().endsWith(replaceLoadUrl), historyPushScript2 + \" : Failed\");\n@@ -163,1 +156,1 @@\n-            assertEquals(\"history navigation using javascript failed\", 2, historyListenerIndex.get());\n+            assertEquals(2, historyListenerIndex.get(), \"history navigation using javascript failed\");\n@@ -178,3 +171,3 @@\n-        assertNotNull(\"Document shouldn't be null after history.pushState\", getEngine().getDocument());\n-        assertTrue(\"location must end with pushState.html\", getEngine().getLocation().endsWith(\"pushState.html\"));\n-        assertEquals(\"history count should be incremented\", initialHistorySize + 1, history.size());\n+        assertNotNull(getEngine().getDocument(), \"Document shouldn't be null after history.pushState\");\n+        assertTrue(getEngine().getLocation().endsWith(\"pushState.html\"), \"location must end with pushState.html\");\n+        assertEquals(initialHistorySize + 1, history.size(), \"history count should be incremented\");\n@@ -194,3 +187,3 @@\n-        assertNotNull(\"Document shouldn't be null after history.replaceState\", getEngine().getDocument());\n-        assertTrue(\"location must end with replaceState.html\", getEngine().getLocation().endsWith(\"replaceState.html\"));\n-        assertEquals(\"history count shouldn't be incremented\", initialHistorySize, history.size());\n+        assertNotNull(getEngine().getDocument(), \"Document shouldn't be null after history.replaceState\");\n+        assertTrue(getEngine().getLocation().endsWith(\"replaceState.html\"), \"location must end with replaceState.html\");\n+        assertEquals(initialHistorySize, history.size(), \"history count shouldn't be incremented\");\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/HistoryStateTest.java","additions":32,"deletions":39,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -36,4 +36,4 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n@@ -65,1 +65,1 @@\n-            assertEquals(\"max size is wrong\", history.getMaxSize(), 99);\n+            assertEquals(history.getMaxSize(), 99, \"max size is wrong\");\n@@ -81,2 +81,2 @@\n-                assertTrue(\"entries: change is wrong\", c.wasAdded());\n-                assertTrue(\"entries: size is wrong\", c.getAddedSubList().size() == 1);\n+                assertTrue(c.wasAdded(), \"entries: change is wrong\");\n+                assertTrue(c.getAddedSubList().size() == 1, \"entries: size is wrong\");\n@@ -102,2 +102,2 @@\n-                assertEquals(\"entries: old title is wrong\", \"3\", oldValue);\n-                assertEquals(\"entries: new title is wrong\", \"hello\", newValue);\n+                assertEquals(oldValue, \"entries: old title is wrong\", \"3\");\n+                assertEquals(newValue, \"entries: new title is wrong\", \"hello\");\n@@ -123,2 +123,2 @@\n-                assertEquals(\"currentIndexProperty: old index is wrong\", 2, oldValue);\n-                assertEquals(\"currentIndexProperty: new index is wrong\", 1, newValue);\n+                assertEquals(2, oldValue, \"currentIndexProperty: old index is wrong\");\n+                assertEquals(1, newValue, \"currentIndexProperty: new index is wrong\");\n@@ -200,1 +200,1 @@\n-            assertEquals(\"entries: size is wrong\", 2, history.getEntries().size());\n+            assertEquals(2, history.getEntries().size(), \"entries: size is wrong\");\n@@ -202,1 +202,1 @@\n-            \/\/assertEquals(\"entries: title is wrong\", \"2\", history.getEntries().get(0).getTitle());\n+            \/\/assertEquals(history.getEntries().get(0).getTitle(), \"entries: title is wrong\", \"2\");\n@@ -253,1 +253,1 @@\n-            assertEquals(\"maxSizeProperty: wrong value\", 0, history.getEntries().size());\n+            assertEquals(0, history.getEntries().size(), \"maxSizeProperty: wrong value\");\n@@ -269,3 +269,3 @@\n-        assertEquals(\"entries: size is wrong\", size, history.getEntries().size());\n-        assertEquals(\"currentIndex: index is wrong\", index, history.getCurrentIndex());\n-        assertEquals(\"entries: url is wrong\", file.toURI().toString(), history.getEntries().get(index).getUrl());\n+        assertEquals(size, history.getEntries().size(), \"entries: size is wrong\");\n+        assertEquals(index, history.getCurrentIndex(), \"currentIndex: index is wrong\");\n+        assertEquals(file.toURI().toString(), history.getEntries().get(index).getUrl(), \"entries: url is wrong\");\n@@ -275,1 +275,1 @@\n-        \/\/ assertEquals(\"entries: title is wrong\", title, history.getEntries().get(index).getTitle());\n+        \/\/ assertEquals(title, history.getEntries().get(index).getTitle(), \"entries: title is wrong\");\n@@ -294,2 +294,2 @@\n-                    newValue.getTime() < startTime ||\n-                    newValue.getTime() > curTime)\n+                        newValue.getTime() < startTime ||\n+                        newValue.getTime() > curTime)\n@@ -298,3 +298,3 @@\n-                                       \", newValue=\" + newValue.getTime() +\n-                                       \", startTime=\" + startTime +\n-                                       \", curTime=\" + curTime);\n+                            \", newValue=\" + newValue.getTime() +\n+                            \", startTime=\" + startTime +\n+                            \", curTime=\" + curTime);\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/HistoryTest.java","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-import org.junit.Test;\n-import org.junit.Ignore;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Disabled;\n@@ -36,1 +36,1 @@\n-@Ignore(\"JDK-8280421\")\n+@Disabled(\"JDK-8280421\")\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/IrresponsiveScriptTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,2 +31,3 @@\n-import static org.junit.Assert.*;\n-import org.junit.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -688,1 +689,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -692,2 +693,4 @@\n-        submit(() -> {\n-            getEngine().executeScript(doc.toString());\n+        assertThrows(NullPointerException.class, () -> {\n+            submit(() -> {\n+                getEngine().executeScript(doc.toString());\n+            });\n@@ -698,1 +701,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -706,2 +709,4 @@\n-        submit(() -> {\n-            doc.getMember(\"beforeload\");\n+        assertThrows(NullPointerException.class, () -> {\n+            submit(() -> {\n+                doc.getMember(\"beforeload\");\n+            });\n@@ -712,1 +717,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -716,2 +721,4 @@\n-        submit(() -> {\n-            doc.setMember(\"newMember\", \"newvalue\");\n+        assertThrows(NullPointerException.class, () -> {\n+            submit(() -> {\n+                doc.setMember(\"newMember\", \"newvalue\");\n+            });\n@@ -722,1 +729,1 @@\n-    @Test(expected=NullPointerException.class)\n+    @Test\n@@ -729,2 +736,4 @@\n-        submit(() -> {\n-            doc.removeMember(\"oldMember\");\n+        assertThrows(NullPointerException.class, () -> {\n+            submit(() -> {\n+                doc.removeMember(\"oldMember\");\n+            });\n@@ -735,2 +744,2 @@\n-    @Test(expected=NullPointerException.class)\n-    public void testcheckJSPeerEval() {\n+    @Test\n+    void testcheckJSPeerEval() {\n@@ -740,2 +749,4 @@\n-        submit(() -> {\n-            doc.eval(\"x\");\n+        assertThrows(NullPointerException.class, () -> {\n+            submit(() -> {\n+                doc.eval(\"x\");\n+            });\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/JavaScriptBridgeTest.java","additions":29,"deletions":18,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -50,1 +50,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -146,1 +146,1 @@\n-        assertTrue(\"All JSObjects are disposed\", JSObjectShim.test_getPeerCount() == 0);\n+        assertTrue(JSObjectShim.test_getPeerCount() == 0, \"All JSObjects are disposed\");\n@@ -159,4 +159,4 @@\n-                \"<head><\/head>\\n\" +\n-                \"<body> <a href=#>hello<\/a><p> Paragraph <\/p>\\n\" +\n-                \"<div> Div Block <\/div> <iframe> iframe <\/iframe> <br> <\/body>\\n\" +\n-                \"<\/html>\";\n+                        \"<head><\/head>\\n\" +\n+                        \"<body> <a href=#>hello<\/a><p> Paragraph <\/p>\\n\" +\n+                        \"<div> Div Block <\/div> <iframe> iframe <\/iframe> <br> <\/body>\\n\" +\n+                        \"<\/html>\";\n@@ -166,1 +166,1 @@\n-        assertTrue(\"Load task completed successfully\", getLoadState() == SUCCEEDED);\n+        assertTrue(getLoadState() == SUCCEEDED, \"Load task completed successfully\");\n@@ -177,1 +177,1 @@\n-            assertNotNull(\"Document should not be null\", doc);\n+            assertNotNull(doc, \"Document should not be null\");\n@@ -182,1 +182,1 @@\n-            assertEquals(\"Expected NodeImpl(tag:html) HashCount\", initialHashCount+1, NodeImplShim.test_getHashCount());\n+            assertEquals(initialHashCount+1, NodeImplShim.test_getHashCount(), \"Expected NodeImpl(tag:html) HashCount\");\n@@ -187,1 +187,1 @@\n-            assertEquals(\"Expected NodeImpl(tag:head) HashCount\", initialHashCount+2, NodeImplShim.test_getHashCount());\n+            assertEquals(initialHashCount+2, NodeImplShim.test_getHashCount(), \"Expected NodeImpl(tag:head) HashCount\");\n@@ -192,1 +192,1 @@\n-            assertEquals(\"Expected NodeImpl(tag:body) HashCount\", initialHashCount+3, NodeImplShim.test_getHashCount());\n+            assertEquals(initialHashCount+3, NodeImplShim.test_getHashCount(), \"Expected NodeImpl(tag:body) HashCount\");\n@@ -197,1 +197,1 @@\n-            assertEquals(\"Expected NodeImpl(tag:p) HashCount\", initialHashCount+4, NodeImplShim.test_getHashCount());\n+            assertEquals(initialHashCount+4, NodeImplShim.test_getHashCount(), \"Expected NodeImpl(tag:p) HashCount\");\n@@ -202,1 +202,1 @@\n-            assertEquals(\"Expected NodeImpl(tag:div) HashCount\", initialHashCount+5, NodeImplShim.test_getHashCount());\n+            assertEquals(initialHashCount+5, NodeImplShim.test_getHashCount(), \"Expected NodeImpl(tag:div) HashCount\");\n@@ -207,1 +207,1 @@\n-            assertEquals(\"Expected NodeImpl(tag:iframe) HashCount\", initialHashCount+6, NodeImplShim.test_getHashCount());\n+            assertEquals(initialHashCount+6, NodeImplShim.test_getHashCount(), \"Expected NodeImpl(tag:iframe) HashCount\");\n@@ -212,1 +212,1 @@\n-            assertEquals(\"Expected NodeImpl(tag:br) HashCount\", initialHashCount+7, NodeImplShim.test_getHashCount());\n+            assertEquals(initialHashCount+7, NodeImplShim.test_getHashCount(), \"Expected NodeImpl(tag:br) HashCount\");\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/LeakTest.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -36,6 +36,6 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-import org.junit.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.Test;\n@@ -92,2 +92,1 @@\n-            assertTrue(\"LoadWorker.running should be false\",\n-                    state == SCHEDULED || state == RUNNING);\n+            assertTrue(state == SCHEDULED || state == RUNNING, \"LoadWorker.running should be false\");\n@@ -95,2 +94,1 @@\n-            assertTrue(\"LoadWorker.running should be true\",\n-                    state == SUCCEEDED || state == FAILED);\n+            assertTrue(state == SUCCEEDED || state == FAILED, \"LoadWorker.running should be true\");\n@@ -115,5 +113,5 @@\n-                    assertEquals(\"LoadWorker.totalWork\", -1, worker.getTotalWork(), 0);\n-                    assertEquals(\"LoadWorker.workDone\", -1, worker.getWorkDone(), 0);\n-                    assertEquals(\"LoadWorker.progress\", -1, worker.getProgress(), 0);\n-                    assertNull(\"LoadWorker.exception should be null\", worker.getException());\n-                    assertEquals(\"LoadWorker.message\", \"\", worker.getMessage());\n+                    assertEquals(-1, worker.getTotalWork(), 0, \"LoadWorker.totalWork\");\n+                    assertEquals(-1, worker.getWorkDone(), 0, \"LoadWorker.workDone\");\n+                    assertEquals(-1, worker.getProgress(), 0, \"LoadWorker.progress\");\n+                    assertNull(worker.getException(), \"LoadWorker.exception should be null\");\n+                    assertEquals(\"\", worker.getMessage(), \"LoadWorker.message\");\n@@ -123,11 +121,8 @@\n-                    assertEquals(\"LoadWorker.state\",\n-                            (newValue == RUNNING ? SCHEDULED : READY),\n-                            oldValue);\n-                    assertEquals(\"LoadWorker.totalWork\", 100.0, worker.getTotalWork(), 0);\n-                    assertEquals(\"LoadWorker.workDone\", 0.0, worker.getWorkDone(), 0);\n-                    assertEquals(\"LoadWorker.progress\", 0.0, worker.getProgress(), 0);\n-                    assertNull(\"LoadWorker.exception should be null\", worker.getException());\n-                    assertTrue(\"LoadWorker.message should read 'Loading [url]'\",\n-                            worker.getMessage().matches(\"Loading .*\" + currentUrl));\n-\n-                    assertNull(\"WebEngine.document should be null\", web.getDocument());\n+                    assertEquals((newValue == RUNNING ? SCHEDULED : READY), oldValue, \"LoadWorker.state\");\n+                    assertEquals(100.0, worker.getTotalWork(), 0, \"LoadWorker.totalWork\");\n+                    assertEquals(0.0, worker.getWorkDone(), 0, \"LoadWorker.workDone\");\n+                    assertEquals(0.0, worker.getProgress(), 0, \"LoadWorker.progress\");\n+                    assertNull(worker.getException(), \"LoadWorker.exception should be null\");\n+                    assertTrue(worker.getMessage().matches(\"Loading .*\" + currentUrl), \"LoadWorker.message should read 'Loading [url]'\");\n+\n+                    assertNull(web.getDocument(), \"WebEngine.document should be null\");\n@@ -137,1 +132,1 @@\n-                    \/\/ assertNull(\"WebEngine.title should be null\", web.getTitle());\n+                    \/\/ assertNull(web.getTitle(), \"WebEngine.title should be null\");\n@@ -139,2 +134,1 @@\n-                    assertTrue(\"WebEngine.location should be set\",\n-                            web.getLocation().endsWith(currentUrl));\n+                    assertTrue(web.getLocation().endsWith(currentUrl), \"WebEngine.location should be set\");\n@@ -143,11 +137,9 @@\n-                    assertEquals(\"LoadWorker.state\", RUNNING, oldValue);\n-                    assertEquals(\"LoadWorker.totalWork\", 100.0, worker.getTotalWork(), 0);\n-                    assertEquals(\"LoadWorker.workDone\", 100.0, worker.getWorkDone(), 0);\n-                    assertEquals(\"LoadWorker.progress\", 1.0, worker.getProgress(), 0);\n-                    assertNull(\"LoadWorker.exception should be null\", worker.getException());\n-                    assertTrue(\"LoadWorker.message should read 'Loading complete'\",\n-                            worker.getMessage().startsWith(\"Loading complete\"));\n-\n-                    assertNotNull(\"WebEngine.document should be set\", web.getDocument());\n-                    assertTrue(\"WebEngine.location should be set\",\n-                            web.getLocation().endsWith(currentUrl));\n+                    assertEquals(RUNNING, oldValue, \"LoadWorker.state\");\n+                    assertEquals(100.0, worker.getTotalWork(), 0, \"LoadWorker.totalWork\");\n+                    assertEquals(100.0, worker.getWorkDone(), 0, \"LoadWorker.workDone\");\n+                    assertEquals(1.0, worker.getProgress(), 0, \"LoadWorker.progress\");\n+                    assertNull(worker.getException(), \"LoadWorker.exception should be null\");\n+                    assertTrue(worker.getMessage().startsWith(\"Loading complete\"), \"LoadWorker.message should read 'Loading complete'\");\n+\n+                    assertNotNull(web.getDocument(), \"WebEngine.document should be set\");\n+                    assertTrue(web.getLocation().endsWith(currentUrl), \"WebEngine.location should be set\");\n@@ -159,1 +151,1 @@\n-                        assertNull(\"WebEngine.title should be null\", web.getTitle());\n+                        assertNull(web.getTitle(), \"WebEngine.title should be null\");\n@@ -161,1 +153,1 @@\n-                        assertNotNull(\"WebEngine.title should be set\", web.getTitle());\n+                        assertNotNull(web.getTitle(), \"WebEngine.title should be set\");\n@@ -166,5 +158,4 @@\n-                    assertEquals(\"LoadWorker.state\", RUNNING, oldValue);\n-                    assertEquals(\"LoadWorker.totalWork\", 100.0, worker.getTotalWork(), 0);\n-                    assertNotNull(\"LoadWorker.exception should be set\", worker.getException());\n-                    assertTrue(\"LoadWorker.message should read 'Loading failed'\",\n-                            worker.getMessage().startsWith(\"Loading failed\"));\n+                    assertEquals(RUNNING, oldValue, \"LoadWorker.state\");\n+                    assertEquals(100.0, worker.getTotalWork(), 0, \"LoadWorker.totalWork\");\n+                    assertNotNull(worker.getException(), \"LoadWorker.exception should be set\");\n+                    assertTrue(worker.getMessage().startsWith(\"Loading failed\"), \"LoadWorker.message should read 'Loading failed'\");\n@@ -188,5 +179,4 @@\n-        assertTrue(\"State.READY was never set\", log.contains(READY));\n-        assertTrue(\"State.SCHEDULED was never set\", log.contains(SCHEDULED));\n-        assertTrue(\"State.RUNNING was never set\", log.contains(RUNNING));\n-        assertTrue(\"Neither State.SUCCEEDED nor State.FAILED has been set\",\n-                log.contains(SUCCEEDED) || log.contains(FAILED));\n+        assertTrue(log.contains(READY), \"State.READY was never set\");\n+        assertTrue(log.contains(SCHEDULED), \"State.SCHEDULED was never set\");\n+        assertTrue(log.contains(RUNNING), \"State.RUNNING was never set\");\n+        assertTrue(log.contains(SUCCEEDED) || log.contains(FAILED), \"Neither State.SUCCEEDED nor State.FAILED has been set\");\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/LoadNotificationsTest.java","additions":42,"deletions":52,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -32,5 +32,6 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assume.assumeTrue;\n+import org.junit.jupiter.api.Timeout;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n@@ -42,1 +43,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -61,3 +62,3 @@\n-        assertTrue(\"Load task completed successfully\", getLoadState() == SUCCEEDED);\n-        assertTrue(\"Location.endsWith(FILE)\", web.getLocation().endsWith(FILE));\n-        assertNotNull(\"Document should not be null\", web.getDocument());\n+        assertTrue(getLoadState() == SUCCEEDED, \"Load task completed successfully\");\n+        assertTrue(web.getLocation().endsWith(FILE), \"Location.endsWith(FILE)\");\n+        assertNotNull(web.getDocument(),\"Document should not be null\");\n@@ -66,1 +67,2 @@\n-    @Test public void testLoadBadUrl() {\n+    @Test\n+    public void testLoadBadUrl() {\n@@ -71,3 +73,3 @@\n-        assertTrue(\"Load task failed\", getLoadState() == FAILED);\n-        assertEquals(\"Location\", URL, web.getLocation());\n-        assertNull(\"Document should be null\", web.getDocument());\n+        assertTrue(getLoadState() == FAILED, \"Load task failed\");\n+        assertEquals(URL, web.getLocation(), \"Location\");\n+        assertNull(web.getDocument(), \"Document should be null\");\n@@ -76,1 +78,2 @@\n-    @Test public void testLoadHtmlContent() {\n+    @Test\n+    public void testLoadHtmlContent() {\n@@ -81,3 +84,3 @@\n-        assertTrue(\"Load task completed successfully\", getLoadState() == SUCCEEDED);\n-        assertEquals(\"Location\", \"\", web.getLocation());\n-        assertNotNull(\"Document should not be null\", web.getDocument());\n+        assertTrue(getLoadState() == SUCCEEDED, \"Load task completed successfully\");\n+        assertEquals(\"\", web.getLocation(), \"Location\");\n+        assertNotNull(web.getDocument(), \"Document should not be null\");\n@@ -86,1 +89,2 @@\n-    @Test public void testLoadPlainContent() {\n+    @Test\n+    public void testLoadPlainContent() {\n@@ -92,2 +96,2 @@\n-        assertTrue(\"Load task completed successfully\", getLoadState() == SUCCEEDED);\n-        assertEquals(\"Location\", \"\", web.getLocation());\n+        assertTrue(getLoadState() == SUCCEEDED, \"Load task completed successfully\");\n+        assertEquals(\"\", web.getLocation(), \"Location\");\n@@ -98,1 +102,1 @@\n-            assertNotNull(\"Document should not be null\", doc);\n+            assertNotNull(doc, \"Document should not be null\");\n@@ -102,2 +106,2 @@\n-            assertEquals(\"Plain text should not be interpreted as HTML\",\n-                    TEXT, text);\n+            assertEquals(TEXT, text,\n+                    \"Plain text should not be interpreted as HTML\");\n@@ -107,1 +111,2 @@\n-    @Test public void testLoadEmpty() {\n+    @Test\n+    public void testLoadEmpty() {\n@@ -117,3 +122,3 @@\n-        assertTrue(\"Load task completed successfully\", getLoadState() == SUCCEEDED);\n-        assertEquals(\"Location\", \"about:blank\", web.getLocation());\n-        assertNull(\"Title should be null\", web.getTitle());\n+        assertTrue(getLoadState() == SUCCEEDED, \"Load task completed successfully\");\n+        assertEquals(\"about:blank\", web.getLocation(), \"Location\");\n+        assertNull(web.getTitle(), \"Title should be null\");\n@@ -123,1 +128,1 @@\n-            assertNotNull(\"Document should not be null\", doc);\n+            assertNotNull(doc, \"Document should not be null\");\n@@ -126,2 +131,2 @@\n-            assertNotNull(\"There should be an HTML element\", html);\n-            assertEquals(\"HTML element should have tag HTML\", \"HTML\", html.getTagName());\n+            assertNotNull(html, \"There should be an HTML element\");\n+            assertEquals(\"HTML\", html.getTagName(),\"HTML element should have tag HTML\");\n@@ -130,2 +135,2 @@\n-            assertNotNull(\"HTML element should have two children\", htmlNodes);\n-            assertEquals(\"HTML element should have two children\", 2, htmlNodes.getLength());\n+            assertNotNull(htmlNodes, \"HTML element should have two children\");\n+            assertEquals(2, htmlNodes.getLength(), \"HTML element should have two children\");\n@@ -135,4 +140,4 @@\n-            assertNotNull(\"There should be a HEAD element\", head);\n-            assertEquals(\"HEAD element should have tag HEAD\", \"HEAD\", head.getTagName());\n-            assertTrue(\"HEAD element should have no children\",\n-                    headNodes == null || headNodes.getLength() == 0);\n+            assertNotNull(head, \"There should be a HEAD element\");\n+            assertEquals(\"HEAD\", head.getTagName(), \"HEAD element should have tag HEAD\");\n+            assertTrue(headNodes == null || headNodes.getLength() == 0,\n+                    \"HEAD element should have no children\");\n@@ -142,4 +147,4 @@\n-            assertNotNull(\"There should be a BODY element\", body);\n-            assertEquals(\"BODY element should have tag BODY\", \"BODY\", body.getTagName());\n-            assertTrue(\"BODY element should have no children\",\n-                    bodyNodes == null || bodyNodes.getLength() == 0);\n+            assertNotNull(body, \"There should be a BODY element\");\n+            assertEquals(\"BODY\", body.getTagName(), \"BODY element should have tag BODY\");\n+            assertTrue(bodyNodes == null || bodyNodes.getLength() == 0,\n+                    \"BODY element should have no children\");\n@@ -149,1 +154,2 @@\n-    @Test public void testLoadUrlWithEncodedSpaces() {\n+    @Test\n+    public void testLoadUrlWithEncodedSpaces() {\n@@ -154,1 +160,1 @@\n-        assertEquals(\"Unexpected location\", URL, web.getLocation());\n+        assertEquals(URL, web.getLocation(), \"Unexpected location\");\n@@ -157,1 +163,2 @@\n-    @Test public void testLoadUrlWithUnencodedSpaces() {\n+    @Test\n+    public void testLoadUrlWithUnencodedSpaces() {\n@@ -162,2 +169,2 @@\n-        assertEquals(\"Unexpected location\",\n-                URL.replace(\" \", \"%20\"), web.getLocation());\n+        assertEquals(URL.replace(\" \", \"%20\"), web.getLocation(),\n+                \"Unexpected location\");\n@@ -166,1 +173,2 @@\n-    @Test public void testLoadContentWithLocalScript() {\n+    @Test\n+    public void testLoadContentWithLocalScript() {\n@@ -183,4 +191,4 @@\n-        assertEquals(\"Unexpected result\", \"ALERT: foo\", result.toString());\n-        assertEquals(\"Unexpected load state\", SUCCEEDED, getLoadState());\n-        assertEquals(\"Unexpected location\", \"\", webEngine.getLocation());\n-        assertNotNull(\"Document is null\", webEngine.getDocument());\n+        assertEquals(\"ALERT: foo\", result.toString(), \"Unexpected result\");\n+        assertEquals(SUCCEEDED, getLoadState(), \"Unexpected load state\");\n+        assertEquals(\"\", webEngine.getLocation(), \"Unexpected location\");\n+        assertNotNull(webEngine.getDocument(), \"Document is null\");\n@@ -189,1 +197,2 @@\n-    @Test public void testLoadLocalCSS() {\n+    @Test\n+    public void testLoadLocalCSS() {\n@@ -192,4 +201,6 @@\n-            assertEquals(\"Font weight should be bold\", \"700\", getEngine().executeScript(\n-                \"window.getComputedStyle(document.getElementById('p3')).getPropertyValue('font-weight')\"));\n-            assertEquals(\"font style should be italic\", \"italic\", getEngine().executeScript(\n-                \"window.getComputedStyle(document.getElementById('p3')).getPropertyValue('font-style')\"));\n+            assertEquals(\"700\", getEngine().executeScript(\n+                \"window.getComputedStyle(document.getElementById('p3')).getPropertyValue('font-weight')\"),\n+                    \"Font weight should be bold\");\n+            assertEquals(\"italic\", getEngine().executeScript(\n+                \"window.getComputedStyle(document.getElementById('p3')).getPropertyValue('font-style')\"),\n+                    \"font style should be italic\");\n@@ -199,1 +210,2 @@\n-    @Test public void testLoadTitleChanged() {\n+    @Test\n+    public void testLoadTitleChanged() {\n@@ -206,2 +218,2 @@\n-                assertTrue(\"loadContent in SUCCEEDED State\", webEngine.getLoadWorker().getState() == SUCCEEDED);\n-                assertEquals(\"Title\", \"Lorem Ipsum\", webEngine.getTitle());\n+                assertTrue(webEngine.getLoadWorker().getState() == SUCCEEDED,\"loadContent in SUCCEEDED State\");\n+                assertEquals(\"Lorem Ipsum\", webEngine.getTitle(), \"Title\");\n@@ -220,1 +232,2 @@\n-    @Test public void testLoadContentTitleChanged() {\n+    @Test\n+    public void testLoadContentTitleChanged() {\n@@ -227,2 +240,2 @@\n-                assertTrue(\"loadContent in SUCCEEDED State\", webEngine.getLoadWorker().getState() == SUCCEEDED);\n-                assertEquals(\"Title\", TITLE, webEngine.getTitle());\n+                assertTrue(webEngine.getLoadWorker().getState() == SUCCEEDED, \"loadContent in SUCCEEDED State\");\n+                assertEquals(TITLE, webEngine.getTitle(), \"Title\");\n@@ -246,1 +259,2 @@\n-    @Test public void loadContentOnLocationChange() throws Exception {\n+    @Test\n+    public void loadContentOnLocationChange() throws Exception {\n@@ -258,1 +272,1 @@\n-                    assertTrue(\"loadContent in READY State\", webEngine.getLoadWorker().getState() == READY);\n+                    assertTrue(webEngine.getLoadWorker().getState() == READY, \"loadContent in READY State\");\n@@ -269,1 +283,1 @@\n-            assertTrue(\"load task completed successfully\", webEngine.getLoadWorker().getState() == SUCCEEDED);\n+            assertTrue(webEngine.getLoadWorker().getState() == SUCCEEDED, \"load task completed successfully\");\n@@ -283,1 +297,2 @@\n-    @Test public void loadUrlOnLocationChange() throws Exception {\n+    @Test\n+    public void loadUrlOnLocationChange() throws Exception {\n@@ -293,1 +308,1 @@\n-                    assertTrue(\"Load in READY State\", webEngine.getLoadWorker().getState() == READY);\n+                    assertTrue(webEngine.getLoadWorker().getState() == READY, \"Load in READY State\");\n@@ -304,1 +319,1 @@\n-            assertTrue(\"loadContent task running\", webEngine.getLoadWorker().getState() == RUNNING);\n+            assertTrue(webEngine.getLoadWorker().getState() == RUNNING, \"loadContent task running\");\n@@ -318,1 +333,2 @@\n-    @Test public void loadJarFile() throws Exception {\n+    @Test\n+    public void loadJarFile() throws Exception {\n@@ -323,2 +339,2 @@\n-        assertEquals(\"archive-root0.html failed to load src='archive-r0.js'\",\n-                \"loaded\", executeScript(\"jsr0()\").toString());\n+        assertEquals(\"loaded\", executeScript(\"jsr0()\").toString(),\n+                \"archive-root0.html failed to load src='archive-r0.js'\");\n@@ -326,2 +342,2 @@\n-        assertEquals(\"archive-root0.html failed to load src='c\/archive-c0.js'\",\n-                \"loaded\", executeScript(\"jsc0()\").toString());\n+        assertEquals(\"loaded\", executeScript(\"jsc0()\").toString(),\n+                \"archive-root0.html failed to load src='c\/archive-c0.js'\");\n@@ -332,2 +348,2 @@\n-        assertEquals(\"archive-root1.html failed to load src='.\/archive-r0.js'\",\n-                \"loaded\", executeScript(\"jsr0()\").toString());\n+        assertEquals(\"loaded\", executeScript(\"jsr0()\").toString(),\n+                \"archive-root1.html failed to load src='.\/archive-r0.js'\");\n@@ -335,2 +351,2 @@\n-        assertEquals(\"archive-root1.html failed to load src='.\/c\/archive-c0.js'\",\n-                \"loaded\", executeScript(\"jsc0()\").toString());\n+        assertEquals(\"loaded\", executeScript(\"jsc0()\").toString(),\n+                \"archive-root1.html failed to load src='.\/c\/archive-c0.js'\");\n@@ -341,2 +357,2 @@\n-        assertEquals(\"archive-root2.html failed to load src='.\/c\/..\/archive-r0.js'\",\n-                \"loaded\", executeScript(\"jsr0()\").toString());\n+        assertEquals(\"loaded\", executeScript(\"jsr0()\").toString(),\n+                \"archive-root2.html failed to load src='.\/c\/..\/archive-r0.js'\");\n@@ -344,2 +360,2 @@\n-        assertEquals(\"archive-root2.html failed to load src='.\/c\/.\/.\/.\/archive-c0.js'\",\n-                \"loaded\", executeScript(\"jsc0()\").toString());\n+        assertEquals(\"loaded\", executeScript(\"jsc0()\").toString(),\n+                \"archive-root2.html failed to load src='.\/c\/.\/.\/.\/archive-c0.js'\");\n@@ -369,1 +385,3 @@\n-    @Test(timeout = 30000) public void loadJrtResource() throws Exception {\n+    @Test\n+    @Timeout(30)\n+    public void loadJrtResource() throws Exception {\n@@ -383,2 +401,2 @@\n-        assertEquals(\"Failed to load \" + jrtResources[0],\n-                1, executeScript(\"document.getElementsByTagName('img').length\"));\n+        assertEquals(1, executeScript(\"document.getElementsByTagName('img').length\"),\n+                \"Failed to load \" + jrtResources[0]);\n@@ -386,2 +404,2 @@\n-        assertEquals(\"Failed to Render \" + jrtResources[0],\n-                16, executeScript(\"document.getElementsByTagName('img')[0].naturalWidth\"));\n+        Integer actualWidth = (Integer) executeScript(\"document.getElementsByTagName('img')[0].naturalWidth\");\n+        assertEquals(16, actualWidth, \"Failed to Render \" + jrtResources[0]);\n@@ -402,1 +420,1 @@\n-                    assertTrue(msg, imageEvent.loaded == jrtResources.length);\n+                    assertTrue(imageEvent.loaded == jrtResources.length, msg);\n@@ -426,1 +444,2 @@\n-    @Test public void jsRegexpTrapTest() {\n+    @Test\n+    public void jsRegexpTrapTest() {\n@@ -430,1 +449,1 @@\n-        assertTrue(\"Load task completed successfully\", getLoadState() == SUCCEEDED);\n+        assertTrue(getLoadState() == SUCCEEDED, \"Load task completed successfully\");\n@@ -434,1 +453,2 @@\n-    @Test public void testSynchronousDataRequest() {\n+    @Test\n+    public void testSynchronousDataRequest() {\n@@ -440,1 +460,1 @@\n-        assertTrue(\"Load task completed successfully\", getLoadState() == SUCCEEDED);\n+        assertTrue(getLoadState() == SUCCEEDED, \"Load task completed successfully\");\n@@ -445,1 +465,1 @@\n-            assertNotNull(\"Document should not be null\", doc);\n+            assertNotNull(doc, \"Document should not be null\");\n@@ -449,2 +469,1 @@\n-            assertEquals(\"Found expected text\",\n-                    TEXT, text);\n+            assertEquals(TEXT, text, \"Found expected text\");\n@@ -466,1 +485,1 @@\n-        assertNotNull(\"Found target element\", c);\n+        assertNotNull(c, \"Found target element\");\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/LoadTest.java","additions":113,"deletions":94,"binary":false,"changes":207,"status":"modified"},{"patch":"@@ -28,3 +28,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -32,4 +32,4 @@\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -73,1 +73,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -78,1 +78,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -83,1 +83,1 @@\n-    @After\n+    @AfterEach\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/LocalStorageTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertTrue;\n-import org.junit.Test;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Test;\n@@ -36,1 +36,1 @@\n-        assertTrue(\"MathML token height is lesser than expected \" + height, height > 1);\n+        assertTrue(height > 1, \"MathML token height is lesser than expected \" + height);\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/MathMLRenderTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,2 +44,0 @@\n-import org.junit.Ignore;\n-import org.junit.Test;\n@@ -47,1 +45,0 @@\n-\n@@ -49,6 +46,10 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import org.junit.jupiter.api.Timeout;\n@@ -59,2 +60,2 @@\n-        assertEquals(\"Unexpected HttpURLConnection.getFollowRedirects() result\",\n-                true, HttpURLConnection.getFollowRedirects());\n+        assertEquals(true, HttpURLConnection.getFollowRedirects(),\n+                \"Unexpected HttpURLConnection.getFollowRedirects() result\");\n@@ -62,2 +63,2 @@\n-        assertEquals(\"Unexpected HttpURLConnection.getFollowRedirects() result\",\n-                true, HttpURLConnection.getFollowRedirects());\n+        assertEquals(true, HttpURLConnection.getFollowRedirects(),\n+                \"Unexpected HttpURLConnection.getFollowRedirects() result\");\n@@ -140,1 +141,2 @@\n-    @Test(expected = IllegalStateException.class) public void testDOMObjectThreadOwnership() {\n+    @Test\n+    public void testDOMObjectThreadOwnership() {\n@@ -153,1 +155,3 @@\n-           obj.resultObject.toString();\n+           assertThrows(IllegalStateException.class, () -> {\n+                obj.resultObject.toString();\n+           });\n@@ -177,1 +181,3 @@\n-    @Test(timeout = 30000) public void testDOMTimer() {\n+    @Test\n+    @Timeout(30)\n+    public void testDOMTimer() {\n@@ -210,2 +216,1 @@\n-            assertTrue(msg,\n-                    ((stat.firedTime + 20) - stat.createdTime) >= stat.interval);\n+            assertTrue(((stat.firedTime + 20) - stat.createdTime) >= stat.interval, msg);\n@@ -215,2 +220,1 @@\n-            assertTrue(msg,\n-                    (stat.firedTime - stat.createdTime) <= (stat.interval + 1000));\n+            assertTrue((stat.firedTime - stat.createdTime) <= (stat.interval + 1000), msg);\n@@ -277,1 +281,1 @@\n-            assertEquals(\"Offset must equal to file length\", length, offset);\n+            assertEquals(length, offset, \"Offset must equal to file length\");\n@@ -372,3 +376,3 @@\n-            assertFalse(\"ICU text wrap failed \",\n-                (Boolean) getEngine().executeScript(\n-                \"document.getElementById('idwrap').clientHeight == document.getElementById('idword').clientHeight\"));\n+            assertFalse((Boolean) getEngine().executeScript(\n+                            \"document.getElementById('idwrap').clientHeight == document.getElementById('idword').clientHeight\"),\n+                    \"ICU text wrap failed\");\n@@ -398,2 +402,1 @@\n-            assertTrue(\"No callback received from window.requestAnimationFrame\",\n-                    latch.await(10, TimeUnit.SECONDS));\n+            assertTrue(latch.await(10, TimeUnit.SECONDS), \"No callback received from window.requestAnimationFrame\");\n@@ -409,1 +412,1 @@\n-        assertTrue(\"UserAgentString does not contain \" + fxVersionString, userAgentString.contains(fxVersionString));\n+        assertTrue(userAgentString.contains(fxVersionString), \"UserAgentString does not contain \" + fxVersionString);\n@@ -412,1 +415,1 @@\n-        assertTrue(\"File does not exist: \" + webkitLicense, webkitLicense.exists());\n+        assertTrue(webkitLicense.exists(), \"File does not exist: \" + webkitLicense);\n@@ -417,2 +420,2 @@\n-            assertTrue(\"webkitVersion should not be empty\", webkitVersion.length() > 0);\n-            assertTrue(\"UserAgentString does not contain: \" + webkitVersion, userAgentString.contains(webkitVersion));\n+            assertTrue(webkitVersion.length() > 0, \"webkitVersion should not be empty\");\n+            assertTrue(userAgentString.contains(webkitVersion), \"UserAgentString does not contain: \" + webkitVersion);\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/MiscellaneousTest.java","additions":33,"deletions":30,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -33,3 +33,3 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -48,6 +48,6 @@\n-                    \"<body style='margin: 0px;'>\\n\" +\n-                    \"<p style='opacity: 1.0; height: 100px; margin: 0px; background-color:#000; color: #fff;'>text<\/p>\\n\" +\n-                    \"<p style='opacity: 0.5; height: 100px; margin: 0px; background-color:#000; color: #fff;'>text<\/p>\\n\" +\n-                    \"<p style='opacity: 0.0; height: 100px; margin: 0px; background-color:#000; color: #fff;'>text<\/p>\\n\" +\n-                    \"<\/body>\\n\" +\n-                    \"<\/html>\");\n+                \"<body style='margin: 0px;'>\\n\" +\n+                \"<p style='opacity: 1.0; height: 100px; margin: 0px; background-color:#000; color: #fff;'>text<\/p>\\n\" +\n+                \"<p style='opacity: 0.5; height: 100px; margin: 0px; background-color:#000; color: #fff;'>text<\/p>\\n\" +\n+                \"<p style='opacity: 0.0; height: 100px; margin: 0px; background-color:#000; color: #fff;'>text<\/p>\\n\" +\n+                \"<\/body>\\n\" +\n+                \"<\/html>\");\n@@ -55,4 +55,4 @@\n-                final WebPage webPage = WebEngineShim.getPage(getEngine());\n-                assertNotNull(webPage);\n-                final BufferedImage img = WebPageShim.paint(webPage, 0, 0, 800, 600);\n-                assertNotNull(img);\n+            final WebPage webPage = WebEngineShim.getPage(getEngine());\n+            assertNotNull(webPage);\n+            final BufferedImage img = WebPageShim.paint(webPage, 0, 0, 800, 600);\n+            assertNotNull(img);\n@@ -60,6 +60,6 @@\n-                final Color pixelAt400x50 = new Color(img.getRGB(400, 50), true);\n-                assertTrue(\"Color should be black:\" + pixelAt400x50, isColorsSimilar(Color.BLACK, pixelAt400x50, 1));\n-                final Color pixelAt400x150 = new Color(img.getRGB(400, 150), true);\n-                assertTrue(\"Color should be gray:\" + pixelAt400x150, isColorsSimilar(Color.GRAY, pixelAt400x150, 1));\n-                final Color pixelAt400x250 = new Color(img.getRGB(400, 250), true);\n-                assertTrue(\"Color should be white:\" + pixelAt400x250, isColorsSimilar(Color.WHITE, pixelAt400x250, 1));\n+            final Color pixelAt400x50 = new Color(img.getRGB(400, 50), true);\n+            assertTrue(isColorsSimilar(Color.BLACK, pixelAt400x50, 1), \"Color should be black:\" + pixelAt400x50);\n+            final Color pixelAt400x150 = new Color(img.getRGB(400, 150), true);\n+            assertTrue(isColorsSimilar(Color.GRAY, pixelAt400x150, 1), \"Color should be gray:\" + pixelAt400x150);\n+            final Color pixelAt400x250 = new Color(img.getRGB(400, 250), true);\n+            assertTrue(isColorsSimilar(Color.WHITE, pixelAt400x250, 1), \"Color should be white:\" + pixelAt400x250);\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/OpacityTest.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -57,2 +57,3 @@\n-            assertEquals(\"First rect center\", greenColor, (int) getEngine().executeScript(\n-                    \"document.getElementById('myCanvas').getContext('2d').getImageData(21, 21, 1, 1).data[1]\"));\n+            assertEquals(greenColor, (int) getEngine().executeScript(\n+                            \"document.getElementById('myCanvas').getContext('2d').getImageData(21, 21, 1, 1).data[1]\"),\n+                    \"First rect center\");\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/PathContructorTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -34,1 +34,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -67,1 +67,1 @@\n-                assertTrue(\"Expected element '\" + s + \"' to be activated\", (boolean) getEngine().executeScript(\"isActivated('\" + s + \"')\"));\n+                assertTrue((boolean) getEngine().executeScript(\"isActivated('\" + s + \"')\"), \"Expected element '\" + s + \"' to be activated\");\n@@ -102,1 +102,1 @@\n-                assertFalse(\"Expected element '\" + s + \"' not to be activated\", (boolean) getEngine().executeScript(\"isActivated('\" + s + \"')\"));\n+                assertFalse((boolean) getEngine().executeScript(\"isActivated('\" + s + \"')\"), \"Expected element '\" + s + \"' not to be activated\");\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/SVGPointerEventsTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,5 +34,6 @@\n-import org.junit.Test;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import org.junit.jupiter.api.Timeout;\n@@ -47,1 +48,3 @@\n-    @Test(timeout = 30000) public void testSvgGetTotalLength() throws Exception {\n+    @Test\n+    @Timeout(30)\n+    public void testSvgGetTotalLength() throws Exception {\n@@ -76,2 +79,1 @@\n-            assertEquals(msg,\n-                    expected[0], totalLength, expected[1]);\n+            assertEquals((double) expected[0], totalLength, (double) expected[1], msg);\n@@ -81,1 +83,2 @@\n-    @Test public void testSVGRenderingWithGradient() {\n+    @Test\n+    public void testSVGRenderingWithGradient() {\n@@ -83,12 +86,12 @@\n-                    \"<body style='margin: 0px 0px;'>\\n\" +\n-                    \"<svg width='400' height='150'>\\n\" +\n-                    \"<defs>\\n\" +\n-                    \"<linearGradient id='grad1' x1='0%' y1='0%' x2='100%' y2='100%'>\\n\" +\n-                    \"<stop offset='0%' style='stop-color:red' \/>\\n\" +\n-                    \"<stop offset='100%' style='stop-color:yellow' \/>\\n\" +\n-                    \"<\/linearGradient>\\n\" +\n-                    \"<\/defs>\\n\" +\n-                    \"<rect width='400' height='150' fill='url(#grad1)' \/>\\n\" +\n-                    \"<\/svg>\\n\" +\n-                    \"<\/body>\\n\" +\n-                    \"<\/html>\");\n+                \"<body style='margin: 0px 0px;'>\\n\" +\n+                \"<svg width='400' height='150'>\\n\" +\n+                \"<defs>\\n\" +\n+                \"<linearGradient id='grad1' x1='0%' y1='0%' x2='100%' y2='100%'>\\n\" +\n+                \"<stop offset='0%' style='stop-color:red' \/>\\n\" +\n+                \"<stop offset='100%' style='stop-color:yellow' \/>\\n\" +\n+                \"<\/linearGradient>\\n\" +\n+                \"<\/defs>\\n\" +\n+                \"<rect width='400' height='150' fill='url(#grad1)' \/>\\n\" +\n+                \"<\/svg>\\n\" +\n+                \"<\/body>\\n\" +\n+                \"<\/html>\");\n@@ -102,1 +105,1 @@\n-            assertTrue(\"Color should be opaque red:\" + pixelAt0x0, isColorsSimilar(Color.RED, pixelAt0x0, 1));\n+            assertTrue(isColorsSimilar(Color.RED, pixelAt0x0, 1), \"Color should be opaque red:\" + pixelAt0x0);\n@@ -105,2 +108,2 @@\n-            assertTrue(\"Color should be almost red:\" + pixelAt100x36, isColorsSimilar(Color.RED, pixelAt100x36, 40));\n-            assertFalse(\"Color shouldn't be yellow:\" + pixelAt100x36, isColorsSimilar(Color.YELLOW, pixelAt100x36, 10));\n+            assertTrue(isColorsSimilar(Color.RED, pixelAt100x36, 40), \"Color should be almost red:\" + pixelAt100x36);\n+            assertFalse(isColorsSimilar(Color.YELLOW, pixelAt100x36, 10), \"Color shouldn't be yellow:\" + pixelAt100x36);\n@@ -109,2 +112,2 @@\n-            assertFalse(\"Color shouldn't be red:\" + pixelAt200x75, isColorsSimilar(Color.RED, pixelAt200x75, 10));\n-            assertTrue(\"Color should look like yellow:\" + pixelAt200x75, isColorsSimilar(Color.YELLOW, pixelAt200x75, 40));\n+            assertFalse(isColorsSimilar(Color.RED, pixelAt200x75, 10), \"Color shouldn't be red:\" + pixelAt200x75);\n+            assertTrue(isColorsSimilar(Color.YELLOW, pixelAt200x75, 40), \"Color should look like yellow:\" + pixelAt200x75);\n@@ -113,1 +116,1 @@\n-            assertTrue(\"Color should be opaque yellow:\" + pixelAt399x145, isColorsSimilar(Color.YELLOW, pixelAt399x145, 1));\n+            assertTrue(isColorsSimilar(Color.YELLOW, pixelAt399x145, 1), \"Color should be opaque yellow:\" + pixelAt399x145);\n@@ -117,1 +120,2 @@\n-    @Test public void testCrashOnScrollableSVG() {\n+    @Test\n+    public void testCrashOnScrollableSVG() {\n@@ -127,1 +131,1 @@\n-            assertTrue(\"Color should be opaque red:\" + pixelAt0x0, isColorsSimilar(Color.RED, pixelAt0x0, 1));\n+            assertTrue(isColorsSimilar(Color.RED, pixelAt0x0, 1), \"Color should be opaque red:\" + pixelAt0x0);\n@@ -129,1 +133,1 @@\n-            assertTrue(\"Color should be opaque red:\" + pixelAt50x50, isColorsSimilar(Color.RED, pixelAt50x50, 1));\n+            assertTrue(isColorsSimilar(Color.RED, pixelAt50x50, 1), \"Color should be opaque red:\" + pixelAt50x50);\n@@ -131,1 +135,1 @@\n-            assertTrue(\"Color should be opaque red:\" + pixelAt99x99, isColorsSimilar(Color.RED, pixelAt99x99, 1));\n+            assertTrue(isColorsSimilar(Color.RED, pixelAt99x99, 1), \"Color should be opaque red:\" + pixelAt99x99);\n@@ -135,1 +139,1 @@\n-            assertTrue(\"Color should be white:\" + pixelAt100x100, isColorsSimilar(Color.WHITE, pixelAt100x100, 1));\n+            assertTrue(isColorsSimilar(Color.WHITE, pixelAt100x100, 1), \"Color should be white:\" + pixelAt100x100);\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/SVGTest.java","additions":36,"deletions":32,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-import org.junit.Test;\n-import static org.junit.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -50,4 +50,4 @@\n-        assertEquals(\"screen.width\", (int)screenSize.getWidth(), width);\n-        assertEquals(\"screen.height\", (int)screenSize.getHeight(), height);\n-        assertEquals(\"screen.availWidth\", (int)availSize.getWidth(), availWidth);\n-        assertEquals(\"screen.availHeight\", (int)availSize.getHeight(), availHeight);\n+        assertEquals((int)screenSize.getWidth(), width, \"screen.width\");\n+        assertEquals((int)screenSize.getHeight(), height, \"screen.height\");\n+        assertEquals((int)availSize.getWidth(), availWidth, \"screen.availWidth\");\n+        assertEquals((int)availSize.getHeight(), availHeight, \"screen.availHeight\");\n@@ -56,3 +56,3 @@\n-        assertTrue(\"screen.depth >= 0\", depth >= 0);\n-        assertTrue(\"screen.width >= screen.availWidth\", width >= availWidth);\n-        assertTrue(\"screen.height >= screen.availHeight\", height >= availHeight);\n+        assertTrue(depth >= 0, \"screen.depth >= 0\");\n+        assertTrue(width >= availWidth, \"screen.width >= screen.availWidth\");\n+        assertTrue(height >= availHeight, \"screen.height >= screen.availHeight\");\n@@ -70,1 +70,1 @@\n-            assertEquals(\"window.outerWidth\", windowWidth, outerWidth);\n+            assertEquals(windowWidth, outerWidth, \"window.outerWidth\");\n@@ -73,1 +73,1 @@\n-            assertEquals(\"window.outerHeight\", windowHeight, outerHeight);\n+            assertEquals(windowHeight, outerHeight, \"window.outerHeight\");\n@@ -77,2 +77,2 @@\n-        assertTrue(\"window.outerWidth >= window.innerWidth\", outerWidth >= innerWidth);\n-        assertTrue(\"window.outerHeight >= window.innerHeight\", outerHeight >= innerHeight);\n+        assertTrue(outerWidth >= innerWidth, \"window.outerWidth >= window.innerWidth\");\n+        assertTrue(outerHeight >= innerHeight, \"window.outerHeight >= window.innerHeight\");\n@@ -83,1 +83,1 @@\n-                                int windowWidth, int windowHeight) {\n+                                 int windowWidth, int windowHeight) {\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/ScreenAndWindowTest.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -32,4 +32,4 @@\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n@@ -37,3 +37,7 @@\n-import org.junit.runners.Parameterized;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.provider.Arguments;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+import java.util.stream.Stream;\n@@ -41,1 +45,0 @@\n-@RunWith(Parameterized.class)\n@@ -45,2 +48,2 @@\n-    private final String hashValue;\n-    private final String expected;\n+    private final String hashValue = \"\";\n+    private final String expected = \"\";\n@@ -51,27 +54,0 @@\n-    \/\/ TODO: junit 4.11 provides an option to label arguments.\n-    @Parameters\n-    public static Collection<String[]> data() {\n-        return Arrays.asList(new String[][] {\n-            \/\/ shasum -b -a 1 subresource-integrity-test.js | awk '{ print $1 }' | xxd -r -p | base64\n-            {\"sha1-\/kpzvnGzRkcE9OFn5j8qRE61nZY=\", LOADED},\n-            \/\/ shasum -b -a 224 subresource-integrity-test.js | awk '{ print $1 }' | xxd -r -p | base64\n-            {\"sha224-zgiBbbuKJixMVEkaOXnvpSYZGsx7SbSZ0QOckg==\", LOADED},\n-            \/\/ shasum -b -a 256 subresource-integrity-test.js | awk '{ print $1 }' | xxd -r -p | base64\n-            {\"sha256-vcl3cFaIDAtcQBkUZFdY+tW\/bjrg6vX1R+hQ8uB5tHc=\", LOADED},\n-            \/\/ shasum -b -a 384 subresource-integrity-test.js | awk '{ print $1 }' | xxd -r -p | base64\n-            {\"sha384-+GrI+cacF05VlQitRghQhs1by9CSIyc8XgZTbymUg2oA0EYdLiPMtilnFP3LDbkY\", LOADED},\n-            \/\/ shasum -b -a 512 subresource-integrity-test.js | awk '{ print $1 }' | xxd -r -p | base64\n-            {\"sha512-V8m3j61x5soaVcO83NuHavY7Yn4MQYoUgrqJe38f6QYG9QzzgWbVDB1SrZsZ2CVR1IsOnV2MLhnDaZhWOwHDsw==\", LOADED},\n-            \/\/ Only sha256, sha384, sha512 are validated, rest will be ignored and loaded\n-            \/\/ Ref. https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/Security\/Subresource_Integrity#Using_Subresource_Integrity\n-            {\"sha1-0000000000000000000000000000\", LOADED},\n-            {\"sha224-0000000000000000000000000000000000000000\", LOADED},\n-            \/\/ negative tests, change the hash value and ensure it fails\n-            {\"sha256-Vcl3cFaIDAtcQBkUZFdY+tW\/bjrg6vX1R+hQ8uB5tHc=\", NOT_LOADED},\n-            {\"sha384-+grI+cacF05VlQitRghQhs1by9CSIyc8XgZTbymUg2oA0EYdLiPMtilnFP3LDbkY\", NOT_LOADED},\n-            {\"sha512-v8m3j61x5soaVcO83NuHavY7Yn4MQYoUgrqJe38f6QYG9QzzgWbVDB1SrZsZ2CVR1IsOnV2MLhnDaZhWOwHDsw==\", NOT_LOADED},\n-            \/\/ should load for invalid hash algorithm\n-            {\"unknown-0000\", LOADED},\n-            {\"\", LOADED},\n-        });\n-    }\n@@ -79,3 +55,24 @@\n-    public SubresourceIntegrityTest(final String hashValue, final String expected) {\n-        this.hashValue = hashValue;\n-        this.expected = expected;\n+    static Stream<Arguments> dataProvider() {\n+        return Stream.of(\n+                \/\/ shasum -b -a 1 subresource-integrity-test.js | awk '{ print $1 }' | xxd -r -p | base64\n+                Arguments.of(\"sha1-\/kpzvnGzRkcE9OFn5j8qRE61nZY=\", LOADED),\n+                \/\/ shasum -b -a 224 subresource-integrity-test.js | awk '{ print $1 }' | xxd -r -p | base64\n+                Arguments.of(\"sha224-zgiBbbuKJixMVEkaOXnvpSYZGsx7SbSZ0QOckg==\", LOADED),\n+                \/\/ shasum -b -a 256 subresource-integrity-test.js | awk '{ print $1 }' | xxd -r -p | base64\n+                Arguments.of(\"sha256-vcl3cFaIDAtcQBkUZFdY+tW\/bjrg6vX1R+hQ8uB5tHc=\", LOADED),\n+                \/\/ shasum -b -a 384 subresource-integrity-test.js | awk '{ print $1 }' | xxd -r -p | base64\n+                Arguments.of(\"sha384-+GrI+cacF05VlQitRghQhs1by9CSIyc8XgZTbymUg2oA0EYdLiPMtilnFP3LDbkY\", LOADED),\n+                \/\/ shasum -b -a 512 subresource-integrity-test.js | awk '{ print $1 }' | xxd -r -p | base64\n+                Arguments.of(\"sha512-V8m3j61x5soaVcO83NuHavY7Yn4MQYoUgrqJe38f6QYG9QzzgWbVDB1SrZsZ2CVR1IsOnV2MLhnDaZhWOwHDsw==\", LOADED),\n+                \/\/ Only sha256, sha384, sha512 are validated, rest will be ignored and loaded\n+                \/\/ Ref. https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/Security\/Subresource_Integrity#Using_Subresource_Integrity\n+                Arguments.of(\"sha1-0000000000000000000000000000\", LOADED),\n+                Arguments.of(\"sha224-0000000000000000000000000000000000000000\", LOADED),\n+                \/\/ negative tests, change the hash value and ensure it fails\n+                Arguments.of(\"sha256-Vcl3cFaIDAtcQBkUZFdY+tW\/bjrg6vX1R+hQ8uB5tHc=\", NOT_LOADED),\n+                Arguments.of(\"sha384-+grI+cacF05VlQitRghQhs1by9CSIyc8XgZTbymUg2oA0EYdLiPMtilnFP3LDbkY\", NOT_LOADED),\n+                Arguments.of(\"sha512-v8m3j61x5soaVcO83NuHavY7Yn4MQYoUgrqJe38f6QYG9QzzgWbVDB1SrZsZ2CVR1IsOnV2MLhnDaZhWOwHDsw==\", NOT_LOADED),\n+                \/\/ should load for invalid hash algorithm\n+                Arguments.of(\"unknown-0000\", LOADED),\n+                Arguments.of(\"\", LOADED)\n+        );\n@@ -84,1 +81,1 @@\n-    @Before\n+    @BeforeEach\n@@ -93,3 +90,3 @@\n-                \"<head><script src='%s' integrity='%s' crossorigin='anonymous'><\/script><\/head>\\n\" +\n-                \"<body>%s<\/body>\\n\" +\n-                \"<\/html>\", scriptUrl, hashValue, NOT_LOADED);\n+                        \"<head><script src='%s' integrity='%s' crossorigin='anonymous'><\/script><\/head>\\n\" +\n+                        \"<body>%s<\/body>\\n\" +\n+                        \"<\/html>\", scriptUrl, hashValue, NOT_LOADED);\n@@ -100,1 +97,2 @@\n-    @Test\n+    @ParameterizedTest\n+    @MethodSource(\"dataProvider\")\n@@ -108,1 +106,1 @@\n-    @After\n+    @AfterEach\n@@ -115,1 +113,0 @@\n-\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/SubresourceIntegrityTest.java","additions":44,"deletions":47,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -30,3 +30,3 @@\n-import org.junit.After;\n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import org.junit.jupiter.api.Test;\n@@ -42,21 +42,21 @@\n-        + \"<!DOCTYPE html>\\n\"\n-        + \"<html>\\n\"\n-        + \"<body>\\n\"\n-        + \"<canvas id=\\\"theCanvas\\\" width=\\\"200\\\" height=\\\"100\\\">\\n\"\n-        + \"<\/canvas>\\n\"\n-        + \"<p id = \\\"encodedText\\\">\\n\"\n-        + \"<\/p>\\n\"\n-        + \"<script>\\n\"\n-        + \"var c = document.getElementById(\\\"theCanvas\\\");\\n\"\n-        + \"var ctx = c.getContext(\\\"2d\\\");\\n\"\n-        + \"var my_gradient=ctx.createLinearGradient(0,0,0,75);\\n\"\n-        + \"my_gradient.addColorStop(0,\\\"red\\\");\\n\"\n-        + \"my_gradient.addColorStop(0.5,\\\"green\\\");\\n\"\n-        + \"my_gradient.addColorStop(1,\\\"blue\\\");\\n\"\n-        + \"ctx.fillStyle=my_gradient;\\n\"\n-        + \"ctx.fillRect(0,0,150,75);\\n\"\n-        + \"var dataURL = c.toDataURL();\\n\"\n-        + \"document.getElementById(\\\"encodedText\\\").innerHTML=dataURL;\\n\"\n-        + \"<\/script>\\n\"\n-        + \"<\/body>\\n\"\n-        + \"<\/html>\\n\";\n+            + \"<!DOCTYPE html>\\n\"\n+            + \"<html>\\n\"\n+            + \"<body>\\n\"\n+            + \"<canvas id=\\\"theCanvas\\\" width=\\\"200\\\" height=\\\"100\\\">\\n\"\n+            + \"<\/canvas>\\n\"\n+            + \"<p id = \\\"encodedText\\\">\\n\"\n+            + \"<\/p>\\n\"\n+            + \"<script>\\n\"\n+            + \"var c = document.getElementById(\\\"theCanvas\\\");\\n\"\n+            + \"var ctx = c.getContext(\\\"2d\\\");\\n\"\n+            + \"var my_gradient=ctx.createLinearGradient(0,0,0,75);\\n\"\n+            + \"my_gradient.addColorStop(0,\\\"red\\\");\\n\"\n+            + \"my_gradient.addColorStop(0.5,\\\"green\\\");\\n\"\n+            + \"my_gradient.addColorStop(1,\\\"blue\\\");\\n\"\n+            + \"ctx.fillStyle=my_gradient;\\n\"\n+            + \"ctx.fillRect(0,0,150,75);\\n\"\n+            + \"var dataURL = c.toDataURL();\\n\"\n+            + \"document.getElementById(\\\"encodedText\\\").innerHTML=dataURL;\\n\"\n+            + \"<\/script>\\n\"\n+            + \"<\/body>\\n\"\n+            + \"<\/html>\\n\";\n@@ -74,2 +74,1 @@\n-        Assert.assertFalse(\"ClassNotFoundException found\",\n-                            bytes.toString().contains(\"ClassNotFoundException\"));\n+        assertFalse(bytes.toString().contains(\"ClassNotFoundException\"), \"ClassNotFoundException found\");\n@@ -78,1 +77,1 @@\n-    @After\n+    @AfterEach\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/SwingDependencyTest.java","additions":26,"deletions":27,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-import org.junit.BeforeClass;\n+import org.junit.jupiter.api.BeforeAll;\n@@ -56,1 +56,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -223,1 +223,1 @@\n-                Boolean oldValue, Boolean newValue) {\n+                            Boolean oldValue, Boolean newValue) {\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/TestBase.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,10 +55,10 @@\n-import org.junit.After;\n-import org.junit.AfterClass;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.fail;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.AfterAll;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n@@ -83,1 +83,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -97,1 +97,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -107,1 +107,1 @@\n-    @Before\n+    @BeforeEach\n@@ -112,1 +112,1 @@\n-    @After\n+    @AfterEach\n@@ -714,1 +714,1 @@\n-        implements EventHandler<WebErrorEvent>\n+            implements EventHandler<WebErrorEvent>\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/UserDataDirectoryTest.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -32,3 +32,4 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import org.junit.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import org.junit.jupiter.api.Test;\n@@ -48,1 +49,1 @@\n-        assertEquals(\"HTML document\", HTML, getHtml(page));\n+        assertEquals(HTML, getHtml(page), \"HTML document\");\n@@ -52,1 +53,1 @@\n-        assertNull(\"XML document\", getHtml(page));\n+        assertNull(getHtml(page), \"XML document\");\n@@ -55,1 +56,1 @@\n-        assertEquals(\"Empty document\", PLAIN, getHtml(page));\n+        assertEquals(PLAIN, getHtml(page), \"Empty document\");\n@@ -58,1 +59,1 @@\n-        assertEquals(\"Empty text\/plain document\", PLAIN, getHtml(page));\n+        assertEquals(PLAIN, getHtml(page), \"Empty text\/plain document\");\n@@ -76,1 +77,1 @@\n-            assertEquals(\"Expected two frames : \", 2, WebPageShim.getFramesCount(page));\n+            assertEquals(2, WebPageShim.getFramesCount(page), \"Expected two frames : \");\n@@ -82,1 +83,1 @@\n-            assertEquals(\"Expected single frame : \", 1, WebPageShim.getFramesCount(page));\n+            assertEquals(1, WebPageShim.getFramesCount(page), \"Expected single frame : \");\n@@ -92,1 +93,1 @@\n-    @Test(expected = IllegalStateException.class)\n+    @Test\n@@ -94,2 +95,4 @@\n-        WebPage page = WebEngineShim.getPage(getEngine());\n-        page.getClientTextLocation(0);\n+        assertThrows(IllegalStateException.class, () -> {\n+            WebPage page = WebEngineShim.getPage(getEngine());\n+            page.getClientTextLocation(0);\n+        });\n@@ -98,1 +101,1 @@\n-    @Test(expected = IllegalStateException.class)\n+    @Test\n@@ -100,2 +103,4 @@\n-        WebPage page = WebEngineShim.getPage(getEngine());\n-        page.getClientLocationOffset(0, 0);\n+        assertThrows(IllegalStateException.class, () -> {\n+            WebPage page = WebEngineShim.getPage(getEngine());\n+            page.getClientLocationOffset(0, 0);\n+        });\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/WebPageTest.java","additions":20,"deletions":15,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -29,3 +29,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -33,1 +33,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/WebViewResizabilityTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n@@ -38,1 +38,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -71,3 +71,2 @@\n-        assertEquals(\"WebView.fontScale\", scale, view.getFontScale(), DELTA);\n-        assertEquals(\"WebPage.zoomFactor\",\n-                scale, WebEngineShim.getPage(view.getEngine()).getZoomFactor(true), DELTA);\n+        assertEquals(scale, view.getFontScale(), DELTA, \"WebView.fontScale\");\n+        assertEquals(scale, WebEngineShim.getPage(view.getEngine()).getZoomFactor(true), DELTA, \"WebPage.zoomFactor\");\n@@ -83,1 +82,1 @@\n-        assertEquals(\"WebView.zoom\", zoom, view.getZoom(), DELTA);\n+        assertEquals(zoom, view.getZoom(), DELTA, \"WebView.zoom\");\n@@ -99,10 +98,10 @@\n-            \"<!DOCTYPE html><html><head><\/head>\" +\n-            \"<body>\" +\n-            \"   <div style=\\\"font: 19px system-ui\\\">\" +\n-            \"       <div style=\\\"font-style: italic;\\\">\" +\n-            \"           <span id=\\\"six\\\" style=\\\"font-weight: 600;\\\">Hello, World<\/span>\" +\n-            \"           <span id=\\\"nine\\\" style=\\\"font-weight: 900;\\\">Hello, World<\/span>\" +\n-            \"       <\/div>\" +\n-            \"   <\/div>\" +\n-            \"<\/body> <\/html>\"\n-            );\n+                \"<!DOCTYPE html><html><head><\/head>\" +\n+                        \"<body>\" +\n+                        \"   <div style=\\\"font: 19px system-ui\\\">\" +\n+                        \"       <div style=\\\"font-style: italic;\\\">\" +\n+                        \"           <span id=\\\"six\\\" style=\\\"font-weight: 600;\\\">Hello, World<\/span>\" +\n+                        \"           <span id=\\\"nine\\\" style=\\\"font-weight: 900;\\\">Hello, World<\/span>\" +\n+                        \"       <\/div>\" +\n+                        \"   <\/div>\" +\n+                        \"<\/body> <\/html>\"\n+        );\n@@ -110,3 +109,4 @@\n-            assertFalse(\"Font weight test failed \",\n-                (Boolean) getEngine().executeScript(\n-                \"document.getElementById('six').offsetWidth == document.getElementById('nine').offsetWidth\"));\n+            assertFalse(\n+                    (Boolean) getEngine().executeScript(\n+                            \"document.getElementById('six').offsetWidth == document.getElementById('nine').offsetWidth\"),\n+                    \"Font weight test failed \");\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/WebViewTest.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -34,1 +34,1 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n@@ -47,1 +47,1 @@\n-        assertTrue(\"Load task completed successfully\", getLoadState() == State.SUCCEEDED);\n+        assertTrue(getLoadState() == State.SUCCEEDED, \"Load task completed successfully\");\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/WebWorkerTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}