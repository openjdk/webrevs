{"files":[{"patch":"@@ -90,0 +90,15 @@\n+    @Test\n+    public void testBind_Null_X() {\n+        assertThrows(NullPointerException.class, () -> Bindings.bindContent(null, op2));\n+    }\n+\n+    @Test\n+    public void testBind_X_Null() {\n+        assertThrows(NullPointerException.class, () -> Bindings.bindContent(op1, null));\n+    }\n+\n+    @Test\n+    public void testBind_X_Self() {\n+        assertThrows(IllegalArgumentException.class, () -> Bindings.bindContent(op2, op2));\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/ContentBindingMapTest.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -49,1 +48,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -388,1 +387,1 @@\n-            Bindings.selectString(null, \"next\", \"name\");\n+            select = Bindings.selectString(null, \"next\", \"name\");\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/SelectBindingTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -189,7 +189,3 @@\n-        s = Bindings.concat(doubleV, double1, floatV, float1, longV, long1, intV, int1, booleanV, boolean1, stringV,\n-                string1, dateV, date1);\n-        DependencyUtils.checkDependencies(((StringBinding) s).getDependencies(), doubleV, floatV, longV, intV, booleanV,\n-                stringV, dateV);\n-        assertEquals(\n-                \"\" + double0 + double1 + float0 + float1 + long0 + long1 + int0 + int1 + boolean0 + boolean1 + string0 +\n-                        string1 + date0 + date1, s.get());\n+        s = Bindings.concat(doubleV, double1, floatV, float1, longV, long1, intV, int1, booleanV, boolean1, stringV, string1, dateV, date1);\n+        DependencyUtils.checkDependencies(((StringBinding)s).getDependencies(), doubleV, floatV, longV, intV, booleanV, stringV, dateV);\n+        assertEquals(\"\" + double0 + double1 + float0 + float1 + long0 + long1 + int0 + int1 + boolean0 + boolean1 + string0 + string1 + date0 + date1, s.get());\n@@ -317,8 +313,6 @@\n-    public class BindingsTest {\n-\n-        @Test\n-        public void testConvertWithDefaultLocale_Null() {\n-            assertThrows(NullPointerException.class, () -> {\n-                Bindings.format(null);\n-            });\n-        }\n+    @Test\n+    public void testConvertWithDefaultLocale_Null() {\n+        assertThrows(NullPointerException.class, () -> {\n+            Bindings.format(null);\n+        });\n+    }\n@@ -326,6 +320,6 @@\n-        @Test\n-        public void testConvertWithDefaultLocale_IllegalObject() {\n-            assertThrows(IllegalFormatException.class, () -> {\n-                Bindings.format(\"%tc\", double0);\n-            });\n-        }\n+    @Test\n+    public void testConvertWithDefaultLocale_IllegalObject() {\n+        assertThrows(IllegalFormatException.class, () -> {\n+            Bindings.format(\"%tc\", double0);\n+        });\n+    }\n@@ -333,6 +327,5 @@\n-        @Test\n-        public void testConvertWithDefaultLocale_IllegalValueModel() {\n-            assertThrows(IllegalFormatException.class, () -> {\n-                Bindings.format(\"%tc\", doubleV);\n-            });\n-        }\n+    @Test\n+    public void testConvertWithDefaultLocale_IllegalValueModel() {\n+        assertThrows(IllegalFormatException.class, () -> {\n+            Bindings.format(\"%tc\", doubleV);\n+        });\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/binding\/StringFormatterTest.java","additions":20,"deletions":27,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -45,3 +45,3 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/com\/sun\/javafx\/collections\/ListListenerHelperTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,2 +28,2 @@\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/binding\/expression\/AbstractNumberExpressionTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-                    .subList(0, 2);\n+                .subList(0, 2);\n@@ -215,1 +215,1 @@\n-                    .subList(0, 0);\n+                .subList(0, 0);\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/ModifiableObservableListBaseTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -95,2 +95,1 @@\n-        list.add(null);\n-\n+        assertThrows(NullPointerException.class, () -> list.add(null));\n@@ -102,2 +101,1 @@\n-        list.add( 1, null);\n-\n+        assertThrows(NullPointerException.class, () -> list.add(1, null));\n@@ -109,2 +107,1 @@\n-        list.addAll(Arrays.asList(\"a\", null, \"b\"));\n-\n+        assertThrows(NullPointerException.class, () -> list.addAll(Arrays.asList(\"a\", null, \"b\")));\n@@ -116,2 +113,1 @@\n-        list.addAll(\"a\", null, \"b\");\n-\n+        assertThrows(NullPointerException.class, () -> list.addAll(Arrays.asList(\"a\", null, \"b\")));\n@@ -123,2 +119,1 @@\n-        list.addAll(1, Arrays.asList(\"a\", null, \"b\"));\n-\n+        assertThrows(NullPointerException.class, () -> list.addAll(1, Arrays.asList(\"a\", null, \"b\")));\n@@ -130,2 +125,1 @@\n-        list.set(1, null);\n-\n+        assertThrows(NullPointerException.class, () -> list.set(1, null));\n@@ -137,2 +131,1 @@\n-        list.setAll(\"a\", null);\n-\n+        assertThrows(NullPointerException.class, () -> list.setAll(\"a\", null));\n@@ -144,1 +137,1 @@\n-        list.setAll(Arrays.asList(\"a\", null, \"b\"));\n+        assertThrows(NullPointerException.class, () -> list.setAll(Arrays.asList(\"a\", null, \"b\")));\n@@ -150,2 +143,1 @@\n-        list.listIterator().add(null);\n-\n+        assertThrows(NullPointerException.class, () -> list.listIterator().add(null));\n@@ -159,1 +151,1 @@\n-        it.set(null);\n+        assertThrows(NullPointerException.class, () -> it.set(null));\n@@ -165,1 +157,1 @@\n-        list.subList(0, 1).add(null);\n+        assertThrows(NullPointerException.class, () -> list.subList(0, 1).add(null));\n@@ -171,1 +163,1 @@\n-        list.subList(0, 1).add(0, null);\n+        assertThrows(NullPointerException.class, () -> list.subList(0, 1).add(0, null));\n@@ -177,1 +169,1 @@\n-        list.subList(0, 1).addAll(Collections.<String>singleton(null));\n+        assertThrows(NullPointerException.class, () -> list.subList(0, 1).addAll(Collections.<String>singleton(null)));\n@@ -183,1 +175,1 @@\n-        list.subList(0, 1).addAll(0, Collections.<String>singleton(null));\n+        assertThrows(NullPointerException.class, () -> list.subList(0, 1).addAll(0, Collections.<String>singleton(null)));\n@@ -189,1 +181,1 @@\n-        list.subList(0, 1).set(0, null);\n+        assertThrows(NullPointerException.class, () -> list.subList(0, 1).set(0, null));\n@@ -195,1 +187,1 @@\n-        list.subList(0, 1).listIterator().add(null);\n+        assertThrows(NullPointerException.class, () -> list.subList(0, 1).listIterator().add(null));\n@@ -355,0 +347,1 @@\n+\n@@ -368,0 +361,1 @@\n+\n@@ -381,0 +375,1 @@\n+\n@@ -394,0 +389,1 @@\n+\n@@ -407,0 +403,1 @@\n+\n@@ -420,0 +417,1 @@\n+\n@@ -447,0 +445,1 @@\n+\n@@ -460,0 +459,1 @@\n+\n@@ -486,2 +486,0 @@\n-\n-\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/VetoableObservableListTest.java","additions":24,"deletions":26,"binary":false,"changes":50,"status":"modified"}]}