{"files":[{"patch":"@@ -70,0 +70,1 @@\n+                        scene.entireSceneNeedsRepaint();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/GlassWindowEventHandler.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.javafx.stage;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.paint.Color;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Timeout;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n+\n+import static test.util.Util.TIMEOUT;\n+\n+import test.robot.testharness.VisualTestBase;\n+\n+\/**\n+ * Test that scene changes made while a stage is iconified get drawn after the\n+ * stage is de-iconified.\n+ *\n+ * Note: on macOS you should run these tests with the Desktop & Dock\n+ * \"Minimize windows into application icon\" setting turned off. When this\n+ * setting is turned on the OS keeps generating new NSScreen objects and the\n+ * resulting notifications will mask the original JavaFX bug.\n+ *\/\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n+public class DrawAfterDeiconifyTest extends VisualTestBase {\n+\n+    private static final int WIDTH = 300;\n+    private static final int HEIGHT = 300;\n+\n+    private static final Color FIRST_COLOR = Color.LIME;\n+    private static final Color SECOND_COLOR = Color.HOTPINK;\n+\n+    private static final double TOLERANCE = 0.07;\n+\n+    private Stage stage;\n+    private int centerX;\n+    private int centerY;\n+\n+    public void redrawsAfterDeiconify(StageStyle stageStyle, final boolean maximized) throws Exception {\n+        final CountDownLatch stageShownLatch = new CountDownLatch(1);\n+\n+        runAndWait(() -> {\n+            stage = getStage(false);\n+            stage.initStyle(stageStyle);\n+            Scene scene = new Scene(new Pane(), WIDTH, HEIGHT);\n+            scene.setFill(FIRST_COLOR);\n+            stage.setScene(scene);\n+            stage.setOnShown(e -> {\n+                Platform.runLater(() -> {\n+                    stage.setMaximized(maximized);\n+                    centerX = (int)(stage.getX() + stage.getWidth() \/ 2.0);\n+                    centerY = (int)(stage.getY() + stage.getHeight() \/ 2.0);\n+                    stageShownLatch.countDown();\n+                });\n+            });\n+            stage.show();\n+        });\n+\n+        Assertions.assertTrue(stageShownLatch.await(TIMEOUT, TimeUnit.MILLISECONDS), \"Timeout waiting for stage to be shown\");\n+\n+        waitFirstFrame();\n+        runAndWait(() -> {\n+            Color color = getColor(centerX, centerY);\n+            assertColorEquals(FIRST_COLOR, color, TOLERANCE);\n+            stage.setIconified(true);\n+        });\n+\n+        \/\/ Update the scene and then wait for a pulse to clear the pending\n+        \/\/ paint request.\n+        runAndWait(() -> stage.getScene().setFill(SECOND_COLOR));\n+        waitNextFrame();\n+\n+        \/\/ Deiconify and verify that the scene change gets redrawn\n+        runAndWait(() -> stage.setIconified(false));\n+        waitNextFrame();\n+        runAndWait(() -> {\n+            Color color = getColor(centerX, centerY);\n+            assertColorEquals(SECOND_COLOR, color, TOLERANCE);\n+        });\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n+    public void stageRedrawsAfterDeiconify(StageStyle stageStyle) throws Exception {\n+        redrawsAfterDeiconify(stageStyle, false);\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\"})\n+    public void maximizedStageRedrawsAfterDeiconify(StageStyle stageStyle) throws Exception {\n+        redrawsAfterDeiconify(stageStyle, true);\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/stage\/DrawAfterDeiconifyTest.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"}]}