{"files":[{"patch":"@@ -315,2 +315,3 @@\n-        uniform = topLeftHorizontalRadius == topRightHorizontalRadius &&\n-                topLeftVerticalRadius == topRightVerticalRadius &&\n+        uniform = topLeftHorizontalRadius == topLeftVerticalRadius &&\n+                topLeftHorizontalRadius == topRightVerticalRadius &&\n+                topLeftHorizontalRadius == topRightHorizontalRadius &&\n@@ -318,1 +319,2 @@\n-                topLeftVerticalRadius == bottomRightVerticalRadius &&\n+                topLeftHorizontalRadius == bottomRightVerticalRadius &&\n+                topLeftHorizontalRadius == bottomLeftVerticalRadius &&\n@@ -320,1 +322,2 @@\n-                topLeftVerticalRadius == bottomLeftVerticalRadius &&\n+                topLeftHorizontalRadiusAsPercent == topLeftVerticalRadiusAsPercent &&\n+                topLeftHorizontalRadiusAsPercent == topRightVerticalRadiusAsPercent &&\n@@ -322,1 +325,0 @@\n-                topLeftVerticalRadiusAsPercent == topRightVerticalRadiusAsPercent &&\n@@ -324,3 +326,3 @@\n-                topLeftVerticalRadiusAsPercent == bottomRightVerticalRadiusAsPercent &&\n-                topLeftHorizontalRadiusAsPercent == bottomLeftHorizontalRadiusAsPercent &&\n-                topLeftVerticalRadiusAsPercent == bottomLeftVerticalRadiusAsPercent;\n+                topLeftHorizontalRadiusAsPercent == bottomRightVerticalRadiusAsPercent &&\n+                topLeftHorizontalRadiusAsPercent == bottomLeftVerticalRadiusAsPercent &&\n+                topLeftHorizontalRadiusAsPercent == bottomLeftHorizontalRadiusAsPercent;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/CornerRadii.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -29,1 +29,3 @@\n-import org.junit.Test;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import java.util.stream.DoubleStream;\n@@ -31,1 +33,1 @@\n-import static org.junit.Assert.*;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -36,1 +38,2 @@\n-    @Test public void instanceCreation_singleConstructor() {\n+    @Test\n+    public void instanceCreation_singleConstructor() {\n@@ -56,1 +59,1 @@\n-    @Test(expected = IllegalArgumentException.class)\n+    @Test\n@@ -58,1 +61,64 @@\n-        new CornerRadii(-1);\n+        assertThrows(IllegalArgumentException.class, () -> new CornerRadii(-1));\n+    }\n+\n+    @Nested\n+    class IsUniformTests {\n+        @Test\n+        public void isUniform_1ArgConstructor() {\n+            assertTrue(new CornerRadii(1).isUniform());\n+        }\n+\n+        @Test\n+        public void isUniform_2ArgConstructor() {\n+            assertTrue(new CornerRadii(1, false).isUniform());\n+            assertTrue(new CornerRadii(1, true).isUniform());\n+        }\n+\n+        @Test\n+        public void isUniform_5ArgConstructor() {\n+            for (boolean percent : new boolean[] { true, false }) {\n+                assertTrue(new CornerRadii(0, 0, 0, 0, percent).isUniform());\n+                assertTrue(new CornerRadii(1, 1, 1, 1, percent).isUniform());\n+                assertFalse(new CornerRadii(1, 0, 0, 0, percent).isUniform());\n+                assertFalse(new CornerRadii(0, 1, 0, 0, percent).isUniform());\n+                assertFalse(new CornerRadii(0, 0, 1, 0, percent).isUniform());\n+                assertFalse(new CornerRadii(0, 0, 0, 1, percent).isUniform());\n+                assertFalse(new CornerRadii(1, 1, 0, 0, percent).isUniform());\n+                assertFalse(new CornerRadii(0, 1, 1, 0, percent).isUniform());\n+                assertFalse(new CornerRadii(0, 0, 1, 1, percent).isUniform());\n+                assertFalse(new CornerRadii(1, 0, 0, 1, percent).isUniform());\n+                assertFalse(new CornerRadii(1, 0, 1, 0, percent).isUniform());\n+                assertFalse(new CornerRadii(0, 1, 0, 1, percent).isUniform());\n+                assertFalse(new CornerRadii(1, 1, 1, 0, percent).isUniform());\n+                assertFalse(new CornerRadii(0, 1, 1, 1, percent).isUniform());\n+                assertFalse(new CornerRadii(1, 0, 1, 1, percent).isUniform());\n+                assertFalse(new CornerRadii(1, 1, 0, 1, percent).isUniform());\n+            }\n+        }\n+\n+        @Test\n+        public void isUniform_16ArgConstructor() {\n+            final int max = 1 << 16;\n+            double[] arg = new double[16];\n+\n+            \/\/ Test all combinations of constructor arguments with a radius of either 0 or 1.\n+            for (int i = 0; i < max; ++i) {\n+                boolean uniform = true;\n+\n+                for (int j = 0; j < 16; ++j) {\n+                    arg[j] = (i >> j) & 1;\n+                    uniform &= arg[j] == arg[j < 8 ? 0 : 8]; \/\/ args 0-8 must be equal, and args 8-16 must be equal\n+                }\n+\n+                var cornerRadii = new CornerRadii(\n+                    arg[0], arg[1], arg[2], arg[3], arg[4], arg[5], arg[6], arg[7],\n+                    arg[8] > 0, arg[9] > 0, arg[10] > 0, arg[11] > 0, arg[12] > 0, arg[13] > 0, arg[14] > 0, arg[15] > 0);\n+\n+                final boolean expectUniform = uniform;\n+\n+                assertEquals(expectUniform, cornerRadii.isUniform(), () ->\n+                    \"Expected \" + (expectUniform ? \"\" : \"not \") + \"isUniform for constructor: \" +\n+                    String.join(\", \", DoubleStream.of(arg).limit(8).mapToObj(Double::toString).toList()) + \", \" +\n+                    String.join(\", \", DoubleStream.of(arg).skip(8).mapToObj(d -> Boolean.toString(d > 0)).toList()));\n+            }\n+        }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/CornerRadiiTest.java","additions":71,"deletions":5,"binary":false,"changes":76,"status":"modified"}]}