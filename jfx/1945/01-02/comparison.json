{"files":[{"patch":"@@ -38,0 +38,1 @@\n+import com.sun.javafx.scene.LayoutFlags;\n@@ -66,0 +67,2 @@\n+import java.util.List;\n+import java.util.Objects;\n@@ -67,0 +70,1 @@\n+import java.util.stream.Stream;\n@@ -72,0 +76,1 @@\n+import javafx.scene.Parent;\n@@ -78,0 +83,1 @@\n+import javafx.scene.layout.HBox;\n@@ -1611,4 +1617,5 @@\n-    public void testLayoutXYTriggersParentSizeChange() {\n-        final Group rootGroup = new Group();\n-        final Group subGroup = new Group();\n-        ParentShim.getChildren(rootGroup).add(subGroup);\n+    public void testLayoutXYTriggersParentSizeChangeForManagedChild() {\n+        Rectangle r1 = new Rectangle(50, 50);\n+        Rectangle r2 = new Rectangle(1, 1);\n+        Group group = new Group(r1, r2);\n+        HBox root = new HBox(group);\n@@ -1616,4 +1623,1 @@\n-        Rectangle r = new Rectangle(50,50);\n-        r.setManaged(false);\n-        Rectangle staticR = new Rectangle(1,1);\n-        ParentShim.getChildren(subGroup).addAll(r, staticR);\n+        r1.setManaged(false);\n@@ -1621,2 +1625,4 @@\n-        assertEquals(50,subGroup.getLayoutBounds().getWidth(), 1e-10);\n-        assertEquals(50,subGroup.getLayoutBounds().getHeight(), 1e-10);\n+        \/\/ Assert expected initial state:\n+        assertLayoutFlags(group, LayoutFlags.NEEDS_LAYOUT, LayoutFlags.NEEDS_LAYOUT);\n+        assertEquals(50, group.getLayoutBounds().getWidth());\n+        assertEquals(50, group.getLayoutBounds().getHeight());\n@@ -1624,1 +1630,12 @@\n-        r.setLayoutX(50);\n+        root.layout();\n+\n+        \/\/ Assert everything is clean after layout:\n+        assertLayoutFlags(group, LayoutFlags.CLEAN, LayoutFlags.CLEAN);\n+        assertEquals(50, group.getLayoutBounds().getWidth());\n+        assertEquals(50, group.getLayoutBounds().getHeight());\n+\n+        \/\/ Test for Layout X change:\n+        r1.setLayoutX(50);\n+\n+        \/\/ Assert layout is required:\n+        assertLayoutFlags(group, LayoutFlags.NEEDS_LAYOUT, LayoutFlags.CLEAN);\n@@ -1626,1 +1643,1 @@\n-        rootGroup.layout();\n+        root.layout();\n@@ -1628,2 +1645,4 @@\n-        assertEquals(100,subGroup.getLayoutBounds().getWidth(), 1e-10);\n-        assertEquals(50,subGroup.getLayoutBounds().getHeight(), 1e-10);\n+        \/\/ Assert that all is clean, and the change has been applied:\n+        assertLayoutFlags(group, LayoutFlags.CLEAN, LayoutFlags.CLEAN);\n+        assertEquals(100, group.getLayoutBounds().getWidth());\n+        assertEquals(50, group.getLayoutBounds().getHeight());\n@@ -1631,0 +1650,12 @@\n+        \/\/ Test for Layout Y change:\n+        r1.setLayoutY(40);\n+\n+        \/\/ Assert layout is required:\n+        assertLayoutFlags(group, LayoutFlags.NEEDS_LAYOUT, LayoutFlags.CLEAN);\n+\n+        root.layout();\n+\n+        \/\/ Assert that all is clean, and the change has been applied:\n+        assertLayoutFlags(group, LayoutFlags.CLEAN, LayoutFlags.CLEAN);\n+        assertEquals(100, group.getLayoutBounds().getWidth());\n+        assertEquals(90, group.getLayoutBounds().getHeight());\n@@ -1634,7 +1665,4 @@\n-    public void testLayoutXYWontBreakLayout() {\n-        final Group rootGroup = new Group();\n-        final AnchorPane pane = new AnchorPane();\n-        ParentShim.getChildren(rootGroup).add(pane);\n-\n-        Rectangle r = new Rectangle(50,50);\n-        ParentShim.getChildren(pane).add(r);\n+    public void testLayoutXYWillRelayoutAndUndoChangesToManagedChild() {\n+        Rectangle r = new Rectangle(50, 50);\n+        AnchorPane pane = new AnchorPane(r);\n+        Group root = new Group(pane);\n@@ -1645,1 +1673,12 @@\n-        rootGroup.layout();\n+        \/\/ Assert expected initial state:\n+        assertLayoutFlags(pane, LayoutFlags.NEEDS_LAYOUT, LayoutFlags.NEEDS_LAYOUT);\n+\n+        root.layout();\n+\n+        \/\/ Assert everything is clean after layout:\n+        assertLayoutFlags(pane, LayoutFlags.DIRTY_BRANCH, LayoutFlags.CLEAN);\n+        assertEquals(10, r.getLayoutX());\n+        assertEquals(10, r.getLayoutY());\n+\n+        \/\/ Note: above we expected all to be clean, but code in width\/height change listeners interferes\n+        \/\/ and draws the wrong conclusions. Relayout and reassert should fix this harmless situation:\n@@ -1647,2 +1686,1 @@\n-        assertEquals(10, r.getLayoutX(), 1e-10);\n-        assertEquals(10, r.getLayoutY(), 1e-10);\n+        root.layout();\n@@ -1650,0 +1688,6 @@\n+        \/\/ Assert everything is clean after layout:\n+        assertLayoutFlags(pane, LayoutFlags.CLEAN, LayoutFlags.CLEAN);\n+        assertEquals(10, r.getLayoutX());\n+        assertEquals(10, r.getLayoutY());\n+\n+        \/\/ Test for Layout X change:\n@@ -1652,2 +1696,14 @@\n-        assertEquals(50, r.getLayoutX(), 1e-10);\n-        assertEquals(10, r.getLayoutY(), 1e-10);\n+        \/\/ Assert layout is required:\n+        assertLayoutFlags(pane, LayoutFlags.NEEDS_LAYOUT, LayoutFlags.NEEDS_LAYOUT);\n+        assertEquals(50, r.getLayoutX());\n+        assertEquals(10, r.getLayoutY());\n+\n+        root.layout();\n+\n+        \/\/ Assert that all is clean, and the change has been reverted:\n+        assertLayoutFlags(pane, LayoutFlags.CLEAN, LayoutFlags.CLEAN);\n+        assertEquals(10, r.getLayoutX());\n+        assertEquals(10, r.getLayoutY());\n+\n+        \/\/ Test for Layout Y change:\n+        r.setLayoutY(40);\n@@ -1655,1 +1711,4 @@\n-        rootGroup.layout();\n+        \/\/ Assert layout is required:\n+        assertLayoutFlags(pane, LayoutFlags.NEEDS_LAYOUT, LayoutFlags.NEEDS_LAYOUT);\n+        assertEquals(10, r.getLayoutX());\n+        assertEquals(40, r.getLayoutY());\n@@ -1657,2 +1716,1 @@\n-        assertEquals(10, r.getLayoutX(), 1e-10);\n-        assertEquals(10, r.getLayoutY(), 1e-10);\n+        root.layout();\n@@ -1660,0 +1718,37 @@\n+        \/\/ Assert that all is clean, and the change has been reverted:\n+        assertLayoutFlags(pane, LayoutFlags.CLEAN, LayoutFlags.CLEAN);\n+        assertEquals(10, r.getLayoutX());\n+        assertEquals(10, r.getLayoutY());\n+    }\n+\n+    @Test\n+    public void onLayoutPositionChangeShouldTriggerNeedsLayoutIfInLayoutChildrenOfDirectChild() {\n+        Rectangle r = new Rectangle(50, 50);\n+        AnchorPane pane = new AnchorPane(r);\n+        HBox root = new HBox(pane);\n+\n+        AnchorPane.setLeftAnchor(r, 10d);\n+        AnchorPane.setTopAnchor(r, 10d);\n+\n+        \/\/ Assert expected initial state:\n+        assertLayoutFlags(pane, LayoutFlags.NEEDS_LAYOUT, LayoutFlags.NEEDS_LAYOUT);\n+\n+        root.layout();\n+\n+        \/*\n+         * Note: we really expect the layout graph to be \"CLEAN\" after this, however\n+         * there is logic for the width\/height fields that currently is a bit too\n+         * eager (and in this situation doesn't set the flags correct either, but\n+         * its relatively harmless). We assert it below, but if this ever changes,\n+         * these asserts can be removed:\n+         *\/\n+\n+        assertLayoutFlags(pane, LayoutFlags.DIRTY_BRANCH, LayoutFlags.CLEAN);\n+        assertEquals(10, r.getLayoutX());\n+        assertEquals(10, r.getLayoutY());\n+        root.layout();  \/\/ this should \"correct\" the harmless intermediate state\n+\n+        \/\/ Assert expected final state:\n+        assertLayoutFlags(pane, LayoutFlags.CLEAN, LayoutFlags.CLEAN);\n+        assertEquals(10, r.getLayoutX());\n+        assertEquals(10, r.getLayoutY());\n@@ -2073,0 +2168,9 @@\n+\n+    private static void assertLayoutFlags(Parent leaf, LayoutFlags... flags) {\n+        List<Parent> subtree = Stream.iterate(leaf, Objects::nonNull, Parent::getParent).toList().reversed();\n+\n+        for (int i = 0; i < subtree.size(); i++) {\n+            Parent p = subtree.get(i);\n+            assertEquals(flags[i], ParentShim.getLayoutFlag(p), \"\" + p);\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/NodeTest.java","additions":133,"deletions":29,"binary":false,"changes":162,"status":"modified"}]}