{"files":[{"patch":"@@ -317,11 +317,4 @@\n-    private StringProperty promptText = new SimpleStringProperty(this, \"promptText\", \"\") {\n-        @Override protected void invalidated() {\n-            \/\/ Strip out newlines\n-            String txt = get();\n-            if (txt != null && txt.contains(\"\\n\")) {\n-                txt = txt.replace(\"\\n\", \"\");\n-                if (isBound()) {\n-                    unbind();\n-                }\n-                set(txt);\n-            }\n+    private StringProperty promptText;\n+    public final StringProperty promptTextProperty() {\n+        if (promptText == null) {\n+            promptText = new SimpleStringProperty(this, \"promptText\", \"\");\n@@ -329,4 +322,4 @@\n-    };\n-    public final StringProperty promptTextProperty() { return promptText; }\n-    public final String getPromptText() { return promptText.get(); }\n-    public final void setPromptText(String value) { promptText.set(value); }\n+        return promptText;\n+    }\n+    public final String getPromptText() { return promptText == null ? \"\" : promptText.get();  }\n+    public final void setPromptText(String value) { promptTextProperty().set(value); }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/TextInputControl.java","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import javafx.beans.binding.Bindings;\n@@ -147,1 +148,0 @@\n-\n@@ -737,0 +737,7 @@\n+        promptNode.textProperty().bind(Bindings.createStringBinding(() -> {\n+            String s = getSkinnable().getPromptText();\n+            if (s == null) {\n+                return \"\";\n+            }\n+            return s.replace(\"\\n\", \"\");\n+        }, getSkinnable().promptTextProperty()));\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TextFieldSkin.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,6 +28,1 @@\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertSame;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.junit.jupiter.api.Assertions.fail;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -35,0 +30,2 @@\n+\n+import com.sun.javafx.tk.Toolkit;\n@@ -44,0 +41,5 @@\n+import javafx.scene.control.skin.TextAreaSkin;\n+import javafx.scene.control.skin.TextInputSkinShim;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.text.Text;\n+import javafx.stage.Stage;\n@@ -56,0 +58,4 @@\n+    private Scene scene;\n+    private Stage stage;\n+    private StackPane root;\n+\n@@ -65,0 +71,3 @@\n+        if (stage != null) {\n+            stage.hide();\n+        }\n@@ -68,0 +77,9 @@\n+    private void initStage() {\n+        \/\/This step is not needed (Just to make sure StubToolkit is loaded into VM)\n+        Toolkit tk = Toolkit.getToolkit();\n+        root = new StackPane();\n+        scene = new Scene(root);\n+        stage = new Stage();\n+        stage.setScene(scene);\n+    }\n+\n@@ -249,0 +267,36 @@\n+    @Test\n+    public void testPromptTextWithBindingWithLineBreaks() {\n+        initStage();\n+        txtArea.setSkin(new TextAreaSkin(txtArea));\n+        String promptWithLineBreaks = \"Prompt\\nwith\\nLineBreaks\";\n+        StringProperty promptProperty = new SimpleStringProperty(promptWithLineBreaks);\n+        txtArea.promptTextProperty().bind(promptProperty);\n+        root.getChildren().add(txtArea);\n+        Text promptNode = TextInputSkinShim.getPromptNode(txtArea);\n+        assertEquals(promptWithLineBreaks, promptNode.getText());\n+        txtArea.promptTextProperty().unbind();\n+    }\n+\n+    @Test\n+    public void testPromptTextInTextArea() {\n+        initStage();\n+        txtArea.setSkin(new TextAreaSkin(txtArea));\n+        String promptWithLineBreaks = \"Prompt\\nwith\\nLineBreaks\";\n+        txtArea.setPromptText(promptWithLineBreaks);\n+        root.getChildren().add(txtArea);\n+        Text promptNode = TextInputSkinShim.getPromptNode(txtArea);\n+        assertEquals(promptWithLineBreaks, promptNode.getText());\n+    }\n+\n+    @Test\n+    public void testPromptTextWithNullValue() {\n+        initStage();\n+        txtArea.setSkin(new TextAreaSkin(txtArea));\n+        String promptWithNull = null;\n+        StringProperty promptPropertyNull = new SimpleStringProperty(promptWithNull);\n+        txtArea.promptTextProperty().bind(promptPropertyNull);\n+        root.getChildren().add(txtArea);\n+        Text promptNode = TextInputSkinShim.getPromptNode(txtArea);\n+        assertNull(promptNode);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TextAreaTest.java","additions":60,"deletions":6,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import javafx.scene.text.Text;\n@@ -36,3 +37,0 @@\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.MethodSource;\n-import org.junit.jupiter.params.provider.Arguments;\n@@ -44,1 +42,0 @@\n-import static org.junit.jupiter.api.Assertions.assertNotSame;\n@@ -47,8 +44,0 @@\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n-import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n-import static org.junit.jupiter.api.Assertions.assertTimeout;\n-import static org.junit.jupiter.api.Assertions.assertNotEquals;\n-import org.junit.jupiter.api.Assumptions;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.params.provider.Arguments;\n@@ -261,0 +250,53 @@\n+\n+    @Test\n+    public void testPromptTextWithBindingWithLineBreaks() {\n+        initStage();\n+        txtField.setSkin(new TextFieldSkin(txtField));\n+        String promptWithLineBreaks = \"Prompt\\nwith\\nLineBreaks\";\n+        StringProperty promptProperty = new SimpleStringProperty(promptWithLineBreaks);\n+        txtField.promptTextProperty().bind(promptProperty);\n+        root.getChildren().add(txtField);\n+        Text promptNode = TextInputSkinShim.getPromptNode(txtField);\n+        assertEquals(promptWithLineBreaks.replace(\"\\n\",\"\"), promptNode.getText());\n+        txtField.promptTextProperty().unbind();\n+    }\n+\n+    @Test\n+    public void testPromptTextWithBindingWithoutLineBreaks() {\n+        initStage();\n+        txtField.setSkin(new TextFieldSkin(txtField));\n+        String promptWithoutLineBreaks = \"Prompt without LineBreaks\";\n+        StringProperty promptProperty = new SimpleStringProperty(promptWithoutLineBreaks);\n+        txtField.promptTextProperty().bind(promptProperty);\n+        root.getChildren().add(txtField);\n+        Text promptNode = TextInputSkinShim.getPromptNode(txtField);\n+        assertEquals(promptWithoutLineBreaks, promptNode.getText());\n+        txtField.promptTextProperty().unbind();\n+    }\n+\n+    @Test\n+    public void testPromptTextWhenSettingValueWithLineBreaks() {\n+        initStage();\n+        txtField.setSkin(new TextFieldSkin(txtField));\n+        String promptWithoutLineBreaks = \"Prompt without LineBreaks\";\n+        String promptWithLineBreaks = \"Prompt\\nwith\\nLineBreaks\";\n+        txtField.setPromptText(promptWithoutLineBreaks);\n+        root.getChildren().add(txtField);\n+        Text promptNode = TextInputSkinShim.getPromptNode(txtField);\n+        assertEquals(promptWithoutLineBreaks, promptNode.getText());\n+        txtField.setPromptText(promptWithLineBreaks);\n+        assertEquals(promptWithLineBreaks.replace(\"\\n\",\"\"), promptNode.getText());\n+    }\n+\n+    @Test\n+    public void testPromptTextWithNullValue() {\n+        initStage();\n+        txtField.setSkin(new TextFieldSkin(txtField));\n+        String promptWithNull = null;\n+        StringProperty promptPropertyNull = new SimpleStringProperty(promptWithNull);\n+        txtField.promptTextProperty().bind(promptPropertyNull);\n+        root.getChildren().add(txtField);\n+        Text promptNode = TextInputSkinShim.getPromptNode(txtField);\n+        assertNull(promptNode);\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TextFieldTest.java","additions":54,"deletions":12,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -110,33 +110,0 @@\n-    @ParameterizedTest\n-    @MethodSource(\"parameters\")\n-    public void bindPromptTextWithoutLineBreaks(Class<?> type) {\n-        setup(type);\n-        String promptWithoutLinebreaks = \"Prompt without\\tlinebreaks\";\n-        StringProperty promptProperty = new SimpleStringProperty(promptWithoutLinebreaks);\n-        textInput.promptTextProperty().bind(promptProperty);\n-        assertEquals(promptWithoutLinebreaks, textInput.getPromptText());\n-        textInput.promptTextProperty().unbind();\n-    }\n-\n-    @ParameterizedTest\n-    @MethodSource(\"parameters\")\n-    public void bindPromptTextWithLineBreaks(Class<?> type) {\n-        setup(type);\n-        String promptWithLinebreaks = \"Prompt\\nwith\\nLineBreaks\\nand\\nmixed\\tcharacters \\uD83C\\uDF0D\";\n-        StringProperty promptProperty = new SimpleStringProperty(promptWithLinebreaks);\n-        textInput.promptTextProperty().bind(promptProperty);\n-        String expectedPromptWithoutLineBreaks = promptWithLinebreaks.replace(\"\\n\", \"\");\n-        assertEquals(expectedPromptWithoutLineBreaks, textInput.getPromptText());\n-        textInput.promptTextProperty().unbind();\n-    }\n-\n-    @ParameterizedTest\n-    @MethodSource(\"parameters\")\n-    public void bindPromptTextWithNull(Class<?> type) {\n-        setup(type);\n-        StringProperty promptPropertyNull = new SimpleStringProperty(null);\n-        textInput.promptTextProperty().bind(promptPropertyNull);\n-        assertNull(textInput.getPromptText());\n-        textInput.promptTextProperty().unbind();\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TextInputControlTest.java","additions":0,"deletions":33,"binary":false,"changes":33,"status":"modified"}]}