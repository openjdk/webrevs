{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates.\n@@ -131,0 +131,4 @@\n+        nl();\n+        addSegment(\"Styled with CSS\");\n+        addWavyUnderline(0, 6, \"squiggly-css\");\n+        highlight(12, 3, \"highlight1\", \"highlight2\");\n","filename":"apps\/samples\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/DemoModel.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates.\n@@ -87,0 +87,14 @@\n+\n+.squiggly-css {\n+    -fx-stroke-width:0.6;\n+    -fx-stroke: blue;\n+}\n+\n+.highlight1 {\n+    -fx-fill:red;\n+}\n+\n+.highlight2 {\n+    -fx-stroke-width:1;\n+    -fx-stroke-fill:black;\n+}\n","filename":"apps\/samples\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/RichTextAreaDemo.css","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -224,0 +224,19 @@\n+        \/**\n+         * Adds a wavy underline (typically used as a spell checker indicator) with the specified style name(s).\n+         * <p>\n+         * The corresponding styles should define CSS properties applicable to {@link javafx.scene.shape.Path}.\n+         *\n+         * @param start the start offset\n+         * @param length the end offset\n+         * @param css the style name(s)\n+         * @return this {@code Builder} instance\n+         * @since 25\n+         *\/\n+        public Builder addWavyUnderline(int start, int length, String ... css) {\n+            int end = start + length;\n+            highlights().add((cell) -> {\n+                cell.addSquiggly(start, end, css);\n+            });\n+            return this;\n+        }\n+\n@@ -246,0 +265,1 @@\n+         * The corresponding styles should define CSS properties applicable to {@link javafx.scene.text.Text}.\n@@ -261,0 +281,1 @@\n+         * The corresponding styles should define CSS properties applicable to {@link javafx.scene.text.Text}.\n@@ -276,0 +297,1 @@\n+         * The corresponding styles should define CSS properties applicable to {@link javafx.scene.text.Text}.\n@@ -334,0 +356,20 @@\n+        \/**\n+         * Adds a highlight with the specified style name(s).\n+         * Use translucent colors to enable multiple highlights in the same region of text.\n+         * <p>\n+         * The corresponding styles should define CSS properties applicable to {@link javafx.scene.shape.Path}.\n+         *\n+         * @param start the start offset\n+         * @param length the end offset\n+         * @param css the style name(s)\n+         * @return this {@code Builder} instance\n+         * @since 25\n+         *\/\n+        public Builder addHighlight(int start, int length, String ... css) {\n+            int end = start + length;\n+            highlights().add((cell) -> {\n+                cell.addHighlight(start, end, css);\n+            });\n+            return this;\n+        }\n+\n@@ -374,0 +416,4 @@\n+            List<Consumer<TextCell>> _highlights = highlights;\n+            StyleAttributeMap _paragraphAttributes = paragraphAttributes;\n+            List<StyledSegment> _segments = (segments == null ? null : List.copyOf(segments));\n+\n@@ -377,1 +423,1 @@\n-                    return paragraphAttributes;\n+                    return _paragraphAttributes;\n@@ -382,1 +428,1 @@\n-                    return segments;\n+                    return _segments;\n@@ -387,1 +433,1 @@\n-                    if (segments == null) {\n+                    if (_segments == null) {\n@@ -392,1 +438,1 @@\n-                    for (StyledSegment seg : segments) {\n+                    for (StyledSegment seg : _segments) {\n@@ -400,1 +446,1 @@\n-                    return highlights;\n+                    return _highlights;\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/model\/RichParagraph.java","additions":52,"deletions":6,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -190,0 +190,16 @@\n+    \/**\n+     * Adds a highlight of the given color to the specified range within the last paragraph,\n+     * with the specified style name(s).\n+     *\n+     * @param start the start offset\n+     * @param length the length of the highlight\n+     * @param css the highlight style name(s)\n+     * @return this model instance\n+     * @since 25\n+     *\/\n+    public SimpleViewOnlyStyledModel highlight(int start, int length, String ... css) {\n+        Paragraph p = lastParagraph();\n+        p.addHighlight(start, length, css);\n+        return this;\n+    }\n+\n@@ -204,0 +220,16 @@\n+    \/**\n+     * Adds a wavy underline (typically used as a spell checker indicator)\n+     * to the specified range within the last paragraph, with the specified style name(s).\n+     *\n+     * @param start the start offset\n+     * @param length the length of the highlight\n+     * @param css the highlight style name(s)\n+     * @return this model instance\n+     * @since 25\n+     *\/\n+    public SimpleViewOnlyStyledModel addWavyUnderline(int start, int length, String ... css) {\n+        Paragraph p = lastParagraph();\n+        p.addSquiggly(start, length, css);\n+        return this;\n+    }\n+\n@@ -298,1 +330,1 @@\n-            StyleAttributeMap pa = par.getParagraphAttributes();\n+            StyleAttributeMap pa = par.paragraphAttributes;\n@@ -412,0 +444,7 @@\n+        void addHighlight(int start, int length, String[] css) {\n+            int end = start + length;\n+            highlights().add((cell) -> {\n+                cell.addHighlight(start, end, css);\n+            });\n+        }\n+\n@@ -425,0 +464,7 @@\n+        void addSquiggly(int start, int length, String[] css) {\n+            int end = start + length;\n+            highlights().add((cell) -> {\n+                cell.addSquiggly(start, end, css);\n+            });\n+        }\n+\n@@ -497,8 +543,0 @@\n-        \/**\n-         * Returns the paragraph attributes.\n-         * @return the paragraph attributes, can be null\n-         *\/\n-        StyleAttributeMap getParagraphAttributes() {\n-            return paragraphAttributes;\n-        }\n-\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/model\/SimpleViewOnlyStyledModel.java","additions":48,"deletions":10,"binary":false,"changes":58,"status":"modified"}]}