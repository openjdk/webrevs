{"files":[{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.scene.text;\n+\n+\/**\n+ * TabAdvancePolicy provides the next tab advance for any given position within the TextLayout.\n+ *\/\n+public interface TabAdvancePolicy {\n+\n+    \/**\n+     * Provides the next tab stop for the given position.\n+     * A value of 0 or less indicates that there are no more stops.\n+     *\n+     * @param offset the offset of the text layout relative to the owner {@code Node} edge\n+     * @param position the current position\n+     * @return the next tab stop\n+     *\/\n+    public float nextTabStop(float offset, float position);\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/text\/TabAdvancePolicy.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -222,1 +222,2 @@\n-     * Sets the tab size for the TextLayout.\n+     * Sets the tab size and the tab advance policy for the TextLayout.\n+     * A non-{@code null} policy will override the fixed tab size.\n@@ -224,3 +225,3 @@\n-     * @param spaces the number of spaces represented by a tab. Default is 8.\n-     * Minimum is 1, lower values will be clamped to 1.\n-     * @return returns true if the call modifies the layout internal state.\n+     * @param tabSize the tab size\n+     * @param policy the tab advance policy, or null\n+     * @return returns true if the call modifies the layout internal state\n@@ -228,1 +229,1 @@\n-    public boolean setTabSize(int spaces);\n+    public boolean setTabAdvancePolicy(int tabSize, TabAdvancePolicy policy);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/text\/TextLayout.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import javafx.scene.layout.Region;\n@@ -54,0 +55,7 @@\n+\n+    \/**\n+     * Returns the {@code Region} which contains the layout for this TextSpan.\n+     *\n+     * @return the layout root, or null\n+     *\/\n+    public Region getLayoutRootRegion();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/text\/TextSpan.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.text;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import javafx.scene.text.TabStop;\n+import javafx.scene.text.TabStopPolicy;\n+import javafx.scene.text.TextFlow;\n+import com.sun.javafx.scene.text.TabAdvancePolicy;\n+\n+\/**\n+ * This TabAdvancePolicy converts the high level {@code TabStopPolicy}\n+ * to {@code TabAdvancePolicy} that the text layout can use.\n+ *\/\n+public class DefaultTabAdvancePolicy implements TabAdvancePolicy {\n+    private final TextFlow flow;\n+    private final float[] stops;\n+    private final float interval;\n+\n+    private DefaultTabAdvancePolicy(TextFlow flow, float[] tabs, float interval) {\n+        this.flow = flow;\n+        this.stops = tabs;\n+        this.interval = interval;\n+    }\n+\n+    public static DefaultTabAdvancePolicy of(TextFlow flow, TabStopPolicy p) {\n+        List<TabStop> tabs = p.tabStops();\n+        float[] stops = new float[tabs.size()];\n+        for (int i = 0; i < stops.length; i++) {\n+            TabStop stop = tabs.get(i);\n+            stops[i] = (float)stop.getPosition();\n+        }\n+        Arrays.sort(stops);\n+        float interval = (float)p.getDefaultInterval();\n+        return new DefaultTabAdvancePolicy(flow, stops, interval);\n+    }\n+\n+    @Override\n+    public float nextTabStop(float offset, float position) {\n+        for (int i = 0; i < stops.length; i++) {\n+            double p = stops[i] + offset;\n+            if (position < p) {\n+                return (float)(p);\n+            }\n+        }\n+        if (interval <= 0.0f) {\n+            return -1.0f;\n+        }\n+        return FixedTabAdvancePolicy.nextPosition(position - offset, interval) + offset;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder(64);\n+        sb.append(\"DefaultTabAdvancePolicy{\");\n+        sb.append(\", stops=[\");\n+        for (int i = 0; i < stops.length; i++) {\n+            if (i > 0) {\n+                sb.append(\", \");\n+            }\n+            sb.append(stops[i]);\n+        }\n+        sb.append(\"], interval=\").append(interval);\n+        sb.append(\"}\");\n+        return sb.toString();\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/DefaultTabAdvancePolicy.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.text;\n+\n+import com.sun.javafx.scene.text.TabAdvancePolicy;\n+\n+\/**\n+ * TabAdvancePolicy based on a fixed tab size.\n+ *\/\n+public class FixedTabAdvancePolicy implements TabAdvancePolicy {\n+\n+    private final float tabAdvance;\n+\n+    \/**\n+     * Creates a tab advance policy for the given tab size.\n+     *\n+     * @param tabSize the tab size\n+     * @param spaceAdvance the advance of the space character\n+     *\/\n+    public FixedTabAdvancePolicy(int tabSize, float spaceAdvance) {\n+        this.tabAdvance = Math.max(1, tabSize) * spaceAdvance;\n+    }\n+\n+    @Override\n+    public float nextTabStop(float offset, float position) {\n+        if (tabAdvance == 0.0) {\n+            return -1.0f;\n+        }\n+        return nextPosition(position, tabAdvance);\n+    }\n+\n+    static float nextPosition(float position, float tabAdvance) {\n+        \/\/ there is a weird case (tabAdvance=57.6 and position=172.79999)\n+        \/\/ when the original formula\n+        \/\/ float f = ((int)(position \/ tabAdvance) + 1) * tabAdvance;\n+        \/\/ returns the same pos=172.79999 next=172.79999\n+        float n = (position \/ tabAdvance);\n+        return ((int)(n + Math.ulp(n)) + 1) * tabAdvance;\n+    }\n+\n+    @Override\n+    public boolean equals(Object x) {\n+        if (x == this) {\n+            return true;\n+        } else if (x instanceof FixedTabAdvancePolicy p) {\n+            return tabAdvance == p.tabAdvance;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int h = FixedTabAdvancePolicy.class.hashCode();\n+        return h * 31 + Float.floatToIntBits(tabAdvance);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"FixedTabAdvancePolicy{tabAdvance=\" + tabAdvance + \"}\";\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/FixedTabAdvancePolicy.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -34,0 +34,1 @@\n+import javafx.scene.layout.Region;\n@@ -49,0 +50,1 @@\n+import com.sun.javafx.scene.text.TabAdvancePolicy;\n@@ -50,0 +52,1 @@\n+import com.sun.javafx.scene.text.TextLine;\n@@ -83,1 +86,1 @@\n-    private int tabSize = DEFAULT_TAB_SIZE;\n+    private TabAdvancePolicy tabAdvancePolicy;\n@@ -236,1 +239,1 @@\n-    public com.sun.javafx.scene.text.TextLine[] getLines() {\n+    public TextLine[] getLines() {\n@@ -678,3 +681,4 @@\n-    public boolean setTabSize(int spaces) {\n-        if (spaces < 1) {\n-            spaces = 1;\n+    public boolean setTabAdvancePolicy(int tabSize, TabAdvancePolicy policy) {\n+        if (policy == null) {\n+            float spaceAdvance = getSpaceAdvance();\n+            policy = new FixedTabAdvancePolicy(tabSize, spaceAdvance);\n@@ -682,2 +686,2 @@\n-        if (tabSize != spaces) {\n-            tabSize = spaces;\n+        if (tabAdvancePolicy == null || (!tabAdvancePolicy.equals(policy))) {\n+            tabAdvancePolicy = policy;\n@@ -1073,2 +1077,1 @@\n-    private float getTabAdvance() {\n-        float spaceAdvance = 0;\n+    private float getSpaceAdvance() {\n@@ -1076,1 +1079,1 @@\n-            \/* Rich text case - use the first font (for now) *\/\n+            \/\/ TextFlow case - use the first font\n@@ -1082,2 +1085,1 @@\n-                    spaceAdvance = strike.getCharAdvance(' ');\n-                    break;\n+                    return strike.getCharAdvance(' ');\n@@ -1086,0 +1088,1 @@\n+            return 0.0f;\n@@ -1087,1 +1090,1 @@\n-            spaceAdvance = strike.getCharAdvance(' ');\n+            return strike.getCharAdvance(' ');\n@@ -1089,1 +1092,0 @@\n-        return tabSize * spaceAdvance;\n@@ -1200,1 +1202,0 @@\n-        float tabAdvance = 0;\n@@ -1202,1 +1203,3 @@\n-            tabAdvance = getTabAdvance();\n+            if (tabAdvancePolicy == null) {\n+                setTabAdvancePolicy(TextLayout.DEFAULT_TAB_SIZE, null);\n+            }\n@@ -1232,0 +1235,1 @@\n+        float layoutShift = Float.NaN;\n@@ -1236,0 +1240,1 @@\n+\n@@ -1237,1 +1242,7 @@\n-                float tabStop = ((int)(lineWidth \/ tabAdvance) +1) * tabAdvance;\n+                if (Float.isNaN(layoutShift)) {\n+                    layoutShift = computeLayoutShift(run.getTextSpan());\n+                }\n+                float tabStop = tabAdvancePolicy.nextTabStop(layoutShift, lineWidth);\n+                if (tabStop <= 0.0f) {\n+                    tabStop = lineWidth + getSpaceAdvance();\n+                }\n@@ -1658,0 +1669,11 @@\n+\n+    private float computeLayoutShift(TextSpan span) {\n+        if (span != null) {\n+            Region root = span.getLayoutRootRegion();\n+            if (root != null) {\n+                \/\/ TODO ltr\n+                return -(float)root.snappedLeftInset();\n+            }\n+        }\n+        return 0.0f;\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismTextLayout.java","additions":39,"deletions":17,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package javafx.scene.text;\n+\n+\/**\n+ * This class encapsulates an immutable single tab stop within the {@link TabStopPolicy}.\n+ *\n+ * @since 25\n+ *\/\n+public final class TabStop {\n+    private final double position;\n+\n+    \/**\n+     * Constructs a new tab stop with the specified position.\n+     *\n+     * @param position the position in pixels\n+     *\/\n+    public TabStop(double position) {\n+        this.position = position;\n+    }\n+\n+    \/**\n+     * Returns the position, in pixels, of the tab.\n+     * @return the position of the tab\n+     *\/\n+    public final double getPosition() {\n+        return position;\n+    }\n+\n+    @Override\n+    public boolean equals(Object x) {\n+        if (x == this) {\n+            return true;\n+        } else if (x instanceof TabStop p) {\n+            return position == p.position;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int h = TabStop.class.hashCode();\n+        h = 31 * h + Double.hashCode(position);\n+        return h;\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/TabStop.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.scene.text;\n+\n+import javafx.beans.property.DoubleProperty;\n+import javafx.beans.property.SimpleDoubleProperty;\n+import javafx.collections.FXCollections;\n+import javafx.collections.ObservableList;\n+import javafx.scene.layout.Region;\n+\n+\/**\n+ * The TabStopPolicy determines the tab stop positions within the text layout.\n+ *\n+ * @since 25\n+ *\/\n+public final class TabStopPolicy {\n+    private final ObservableList<TabStop> tabStops = FXCollections.observableArrayList();\n+    private final SimpleDoubleProperty defaultInterval = new SimpleDoubleProperty(0.0);\n+\n+    \/**\n+     * Constructs a new {@code TabStopPolicy} instance, with an empty list of stops.\n+     *\/\n+    public TabStopPolicy() {\n+    }\n+\n+    \/**\n+     * The list of tab stops.\n+     *\n+     * @return the non-null list of tab stops\n+     *\/\n+    public final ObservableList<TabStop> tabStops() {\n+        return tabStops;\n+    }\n+\n+    \/**\n+     * Specifies the default tab stop interval for tabs beyond the last stop provided\n+     * by {@link #tabStops()}.  This is a fixed repeating distance (in pixels) to the\n+     * next tab stop computed at regular intervals relative to the leading edge\n+     * of the {@code TextFlow} node.\n+     * <p>\n+     * A value of less than or equal 0 disables the default interval.\n+     *\n+     * @return the default tab interval property\n+     * @defaultValue 0\n+     *\/\n+    public final DoubleProperty defaultIntervalProperty() {\n+        return defaultInterval;\n+    }\n+\n+    public final double getDefaultInterval() {\n+        return defaultInterval.get();\n+    }\n+\n+    public final void setDefaultInterval(double value) {\n+        defaultInterval.set(value);\n+    }\n+\n+    @Override\n+    public boolean equals(Object x) {\n+        if (x == this) {\n+            return true;\n+        } else if (x instanceof TabStopPolicy p) {\n+            return\n+                (getDefaultInterval() == p.getDefaultInterval()) &&\n+                tabStops().equals(p.tabStops());\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int h = TabStopPolicy.class.hashCode();\n+        h = 31 * h + tabStops().hashCode();\n+        h = 31 * h + Double.hashCode(getDefaultInterval());\n+        return h;\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/TabStopPolicy.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -68,0 +68,1 @@\n+import javafx.scene.layout.Region;\n@@ -282,1 +283,2 @@\n-                @Override public String getText() {\n+                @Override\n+                public String getText() {\n@@ -285,1 +287,3 @@\n-                @Override public Object getFont() {\n+\n+                @Override\n+                public Object getFont() {\n@@ -288,1 +292,11 @@\n-                @Override public RectBounds getBounds() {\n+\n+                @Override\n+                public RectBounds getBounds() {\n+                    return null;\n+                }\n+\n+                @Override\n+                public Region getLayoutRootRegion() {\n+                    if (getParent() instanceof TextFlow f) {\n+                        return f;\n+                    }\n@@ -318,1 +332,1 @@\n-            layout.setTabSize(getTabSize());\n+            layout.setTabAdvancePolicy(getTabSize(), null);\n@@ -1945,1 +1959,1 @@\n-                            if (layout.setTabSize(get())) {\n+                            if (layout.setTabAdvancePolicy(getTabSize(), null)) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/Text.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import javafx.beans.InvalidationListener;\n+import javafx.beans.Observable;\n@@ -34,0 +36,1 @@\n+import javafx.beans.property.SimpleObjectProperty;\n@@ -42,0 +45,1 @@\n+import javafx.event.EventHandler;\n@@ -51,0 +55,1 @@\n+import javafx.scene.layout.Region;\n@@ -52,0 +57,1 @@\n+import javafx.scene.transform.TransformChangedEvent;\n@@ -56,0 +62,1 @@\n+import com.sun.javafx.scene.text.TabAdvancePolicy;\n@@ -60,0 +67,1 @@\n+import com.sun.javafx.text.DefaultTabAdvancePolicy;\n@@ -503,0 +511,8 @@\n+\n+        @Override\n+        public Region getLayoutRootRegion() {\n+            if (node.getParent() instanceof TextFlow f) {\n+                return f;\n+            }\n+            return null;\n+        }\n@@ -509,1 +525,0 @@\n-            layout.setTabSize(getTabSize());\n@@ -533,0 +548,1 @@\n+            layout.setTabAdvancePolicy(getTabSize(), getTabAdvancePolicy());\n@@ -615,0 +631,4 @@\n+     * <p>\n+     * Note that this method should not be used to control the tab placement when multiple {@code Text} nodes\n+     * with different fonts are contained within this {@code TextFlow}.\n+     * In this case, {@link #setTabStopPolicy(TabStopPolicy)} should be used instead.\n@@ -630,1 +650,3 @@\n-                @Override protected void invalidated() {\n+\n+                @Override\n+                protected void invalidated() {\n@@ -632,1 +654,1 @@\n-                    if (layout.setTabSize(get())) {\n+                    if (layout.setTabAdvancePolicy(getTabSize(), getTabAdvancePolicy())) {\n@@ -649,0 +671,90 @@\n+    \/**\n+     * Determines the tab stop positions within this {@code TextFlow}.\n+     * <p>\n+     * A non-null {@code TabStopPolicy} overrides values set by {@link #setTabSize(int)},\n+     * as well as any values set by {@link Text#setTabSize(int)} in individual {@code Text} instances within\n+     * this {@code TextFlow}.\n+     *\n+     * @defaultValue null\n+     *\n+     * @since 25\n+     *\/\n+    private SimpleObjectProperty<TabStopPolicy> tabStopPolicy;\n+\n+    public final ObjectProperty<TabStopPolicy> tabStopPolicyProperty() {\n+        if (tabStopPolicy == null) {\n+            tabStopPolicy = new SimpleObjectProperty<>() {\n+\n+                class Monitor implements InvalidationListener, EventHandler<TransformChangedEvent> {\n+\n+                    @Override\n+                    public void invalidated(Observable p) {\n+                        updateTabAdvancePolicy();\n+                    }\n+\n+                    @Override\n+                    public void handle(TransformChangedEvent ev) {\n+                        updateTabAdvancePolicy();\n+                    }\n+                };\n+\n+                private Monitor monitor = new Monitor();\n+                private TabStopPolicy old;\n+\n+                {\n+                    sceneProperty().addListener(monitor);\n+                    localToSceneTransformProperty().addListener(monitor);\n+                }\n+\n+                @Override\n+                public Object getBean() {\n+                    return TextFlow.this;\n+                }\n+\n+                @Override\n+                public String getName() {\n+                    return \"tabStopPolicy\";\n+                }\n+\n+                @Override\n+                protected void invalidated() {\n+                    if (old != null) {\n+                        old.tabStops().removeListener(monitor);\n+                        old.defaultIntervalProperty().removeListener(monitor);\n+                    }\n+\n+                    TabStopPolicy p = get();\n+                    if (p != null) {\n+                        \/\/ FIX does this create a memory leak?\n+                        p.tabStops().addListener(monitor);\n+                        p.defaultIntervalProperty().addListener(monitor);\n+                    }\n+                    old = p;\n+                    updateTabAdvancePolicy();\n+                }\n+\n+                private void updateTabAdvancePolicy() {\n+                    TextLayout layout = getTextLayout();\n+                    if (layout.setTabAdvancePolicy(getTabSize(), getTabAdvancePolicy())) {\n+                        requestLayout();\n+                    }\n+                }\n+            };\n+        }\n+        return tabStopPolicy;\n+    }\n+\n+    public final TabStopPolicy getTabStopPolicy() {\n+        return tabStopPolicy == null ? null : tabStopPolicy.get();\n+    }\n+\n+    public final void setTabStopPolicy(TabStopPolicy policy) {\n+        tabStopPolicyProperty().set(policy);\n+    }\n+\n+    private TabAdvancePolicy getTabAdvancePolicy() {\n+        \/\/ isolates the public tab stop policy from the internal tab advance policy\n+        TabStopPolicy p = getTabStopPolicy();\n+        return p == null ? null : DefaultTabAdvancePolicy.of(this, p);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/TextFlow.java","additions":115,"deletions":3,"binary":false,"changes":118,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import javafx.scene.layout.Region;\n@@ -59,0 +60,5 @@\n+\n+        @Override\n+        public Region getLayoutRootRegion() {\n+            return null;\n+        }\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/text\/TextHitInfoTest.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import javafx.scene.layout.Region;\n@@ -75,0 +76,5 @@\n+\n+        @Override\n+        public Region getLayoutRootRegion() {\n+            return null;\n+        }\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/text\/TextLayoutTest.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}