{"files":[{"patch":"@@ -22,1 +22,1 @@\n-    private Screen[] screens = null;\n+    private Screen[] screens;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/headless\/HeadlessApplication.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -21,1 +21,1 @@\n-    private Window activeWindow = null;\n+    private HeadlessWindow activeWindow = null;\n@@ -179,1 +179,1 @@\n-        ((HeadlessWindow)activeWindow).getScreenCapture(x, y, width, height, data, scaleToFit);\n+        activeWindow.getScreenCapture(x, y, width, height, data, scaleToFit);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/headless\/HeadlessRobot.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -12,1 +12,1 @@\n-import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n@@ -17,1 +17,1 @@\n-    private static final AtomicInteger ptrCount = new AtomicInteger(0);\n+    private static final AtomicLong ptrCount = new AtomicLong(0);\n@@ -32,0 +32,2 @@\n+    private final int stride = 1000;\n+\n@@ -287,1 +289,1 @@\n-        int idx = 1000 * my + mx;\n+        int idx = stride * my + mx;\n@@ -294,6 +296,1 @@\n-        Color color = Color.color(\n-                r \/ 255.0,\n-                g \/ 255.0,\n-                b \/ 255.0,\n-                a \/ 255.0\n-        );\n+        Color color = Color.rgb(r, g, b, a);\n@@ -307,1 +304,1 @@\n-                int fidx = (y + i) * 1000 + x + j;\n+                int fidx = (y + i) * stride + x + j;\n@@ -319,1 +316,0 @@\n-        int stride = 1000;\n@@ -334,1 +330,0 @@\n-        int stride = 1000;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/headless\/HeadlessWindow.java","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -6,1 +6,0 @@\n-import java.util.concurrent.CountDownLatch;\n@@ -24,26 +23,0 @@\n-    void runLater(Runnable r) {\n-        invokeLater(r);\n-    }\n-\n-    void invokeAndWait(final Runnable r) {\n-        final CountDownLatch latch = new CountDownLatch(1);\n-        runnableQueue.add(() -> {\n-            try {\n-                r.run();\n-            } finally {\n-                latch.countDown();\n-            }\n-        });\n-        try {\n-            latch.await();\n-        } catch (InterruptedException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    void stopProcessing() {\n-        for (RunLoopEntry entry : activeRunLoops) {\n-            runnableQueue.add(() -> entry.active = false);\n-        }\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/headless\/NestedRunnableProcessor.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"}]}