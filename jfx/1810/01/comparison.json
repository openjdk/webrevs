{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,1 +87,1 @@\n-        public void handlePreferencesChanged(Map<String, Object> preferences) {\n+        public void handlePreferencesChanged(Map<String, Object> preferences, int suggestedDelayMillis) {\n@@ -258,1 +258,1 @@\n-    protected void notifyPreferencesChanged(Map<String, Object> preferences) {\n+    protected void notifyPreferencesChanged(Map<String, Object> preferences, int suggestedDelayMillis) {\n@@ -261,1 +261,1 @@\n-            handler.handlePreferencesChanged(preferences);\n+            handler.handlePreferencesChanged(preferences, suggestedDelayMillis);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/Application.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import com.sun.javafx.application.preferences.DelayedChangeAggregator;\n@@ -60,0 +61,1 @@\n+import javafx.collections.MapChangeListener;\n@@ -921,0 +923,1 @@\n+    private static DelayedChangeAggregator platformPreferencesAggregator;\n@@ -940,0 +943,1 @@\n+        platformPreferences.addListener(PlatformImpl::checkHighContrastThemeChanged);\n@@ -941,0 +945,1 @@\n+        platformPreferencesAggregator = new DelayedChangeAggregator(platformPreferences::update);\n@@ -951,0 +956,3 @@\n+     * @param suggestedDelayMillis a suggestion from the native implementation to delay the publication of\n+     *                             changed preferences for the specified amount of time, because more changes\n+     *                             may be coming\n@@ -952,1 +960,1 @@\n-    public static void updatePreferences(Map<String, Object> preferences) {\n+    public static void updatePreferences(Map<String, Object> preferences, int suggestedDelayMillis) {\n@@ -954,2 +962,1 @@\n-            checkHighContrastThemeChanged(preferences);\n-            platformPreferences.update(preferences);\n+            platformPreferencesAggregator.update(preferences, suggestedDelayMillis);\n@@ -961,1 +968,1 @@\n-            runLater(() -> updatePreferences(preferencesCopy));\n+            runLater(() -> updatePreferences(preferencesCopy, suggestedDelayMillis));\n@@ -977,5 +984,9 @@\n-    private static void checkHighContrastThemeChanged(Map<String, Object> preferences) {\n-        if (Boolean.TRUE.equals(preferences.get(\"Windows.SPI.HighContrast\"))) {\n-            setAccessibilityTheme(preferences.get(\"Windows.SPI.HighContrastColorScheme\") instanceof String s ? s : null);\n-        } else {\n-            setAccessibilityTheme(null);\n+    private static void checkHighContrastThemeChanged(MapChangeListener.Change<? extends String, ?> change) {\n+        if (change.getKey().equals(\"Windows.SPI.HighContrast\")\n+                || change.getKey().equals(\"Windows.SPI.HighContrastColorScheme\")) {\n+            setAccessibilityTheme(\n+                platformPreferences\n+                    .getBoolean(\"Windows.SPI.HighContrast\")\n+                    .filter(Boolean::booleanValue)\n+                    .flatMap(_ -> platformPreferences.getString(\"Windows.SPI.HighContrastColorScheme\"))\n+                    .orElse(null));\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformImpl.java","additions":20,"deletions":9,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.application.preferences;\n+\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.animation.AnimationTimer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+\/**\n+ * Aggregates multiple subsequent sets of changes into a single changeset, and notifies a consumer.\n+ * Due to its delayed nature, the consumer may not be notified immediately when a changeset arrives.\n+ *\/\n+public class DelayedChangeAggregator extends AnimationTimer {\n+\n+    private final Consumer<Map<String, Object>> changeConsumer;\n+    private final Map<String, Object> currentChangeSet;\n+    private long elapsedTimeNanos;\n+    private boolean running;\n+\n+    public DelayedChangeAggregator(Consumer<Map<String, Object>> changeConsumer) {\n+        this.changeConsumer = changeConsumer;\n+        this.currentChangeSet = new HashMap<>();\n+    }\n+\n+    \/**\n+     * Integrates the specified changeset into the current changeset, and applies the current changeset\n+     * after the specified delay period. The delay is added to the current time, but will not elapse\n+     * before any previous delays are scheduled to elapse.\n+     *\n+     * @param changeset the changeset\n+     * @param delayMillis the delay period, in milliseconds\n+     *\/\n+    public void update(Map<String, Object> changeset, int delayMillis) {\n+        if (delayMillis > 0 || !currentChangeSet.isEmpty()) {\n+            long newElapsedTimeNanos = now() + (long)delayMillis * 1000000;\n+            elapsedTimeNanos = Math.max(elapsedTimeNanos, newElapsedTimeNanos);\n+            currentChangeSet.putAll(changeset);\n+\n+            if (!running) {\n+                running = true;\n+                start();\n+            }\n+        } else {\n+            changeConsumer.accept(changeset);\n+        }\n+    }\n+\n+    @Override\n+    public void handle(long now) {\n+        if (now >= elapsedTimeNanos) {\n+            stop();\n+            running = false;\n+            changeConsumer.accept(currentChangeSet);\n+            currentChangeSet.clear();\n+        }\n+    }\n+\n+    protected long now() {\n+        return Toolkit.getToolkit().getPrimaryTimer().nanos();\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/DelayedChangeAggregator.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -368,2 +368,2 @@\n-                public void handlePreferencesChanged(Map<String, Object> preferences) {\n-                    PlatformImpl.updatePreferences(preferences);\n+                public void handlePreferencesChanged(Map<String, Object> preferences, int suggestedDelayMillis) {\n+                    PlatformImpl.updatePreferences(preferences, suggestedDelayMillis);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/QuantumToolkit.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -192,1 +192,1 @@\n-            env->CallVoidMethod(application, jApplicationNotifyPreferencesChanged, unmodifiablePreferences);\n+            env->CallVoidMethod(application, jApplicationNotifyPreferencesChanged, unmodifiablePreferences, 0);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/PlatformSupport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -353,1 +353,1 @@\n-    jApplicationNotifyPreferencesChanged = env->GetMethodID(jApplicationCls, \"notifyPreferencesChanged\", \"(Ljava\/util\/Map;)V\");\n+    jApplicationNotifyPreferencesChanged = env->GetMethodID(jApplicationCls, \"notifyPreferencesChanged\", \"(Ljava\/util\/Map;I)V\");\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_general.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -230,1 +230,1 @@\n-    extern jmethodID jApplicationNotifyPreferencesChanged; \/\/ notifyPreferencesChanged(Ljava\/util\/Map;)V\n+    extern jmethodID jApplicationNotifyPreferencesChanged; \/\/ notifyPreferencesChanged(Ljava\/util\/Map;I)V\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_general.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -970,1 +970,1 @@\n-            env, jClass, \"notifyPreferencesChanged\", \"(Ljava\/util\/Map;)V\");\n+            env, jClass, \"notifyPreferencesChanged\", \"(Ljava\/util\/Map;I)V\");\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -310,1 +310,1 @@\n-                unmodifiablePreferences);\n+                unmodifiablePreferences, 0);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/PlatformSupport.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -185,0 +185,2 @@\n+            \/\/ Usually, the WM_THEMECHANGED and WM_SYSCOLORCHANGE messages are followed by other\n+            \/\/ messages or WinRT callbacks that may change platform preferences.\n@@ -186,2 +188,2 @@\n-                    PlatformSupport::PreferenceType(PlatformSupport::PT_SYSTEM_COLORS |\n-                                                    PlatformSupport::PT_UI_SETTINGS))) {\n+                    PlatformSupport::PreferenceType(PlatformSupport::PT_SYSTEM_COLORS | PlatformSupport::PT_SYSTEM_PARAMS),\n+                    \/* delayedChangesExpected: *\/ msg == WM_THEMECHANGED || msg == WM_SYSCOLORCHANGE)) {\n@@ -335,1 +337,1 @@\n-        env->GetMethodID(cls, \"notifyPreferencesChanged\", \"(Ljava\/util\/Map;)V\");\n+        env->GetMethodID(cls, \"notifyPreferencesChanged\", \"(Ljava\/util\/Map;I)V\");\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassApplication.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,0 +93,4 @@\n+        ComPtr<IUISettings4> settings4;\n+        RO_CHECKED(\"IUISettings::QueryInterface<IUISettings4>\",\n+                   settings->QueryInterface<IUISettings4>(&settings4));\n+\n@@ -97,1 +101,10 @@\n-        EventRegistrationToken token;\n+        EventRegistrationToken unusedToken1;\n+        settings4->add_AdvancedEffectsEnabledChanged(\n+            Callback<ITypedEventHandler<UISettings*, IInspectable*>>(\n+                [this](IUISettings*, IInspectable*) {\n+                    updatePreferences(PT_UI_SETTINGS, false);\n+                    return S_OK;\n+                }).Get(),\n+            &unusedToken1);\n+\n+        EventRegistrationToken unusedToken2;\n@@ -101,1 +114,1 @@\n-                    updatePreferences(PT_UI_SETTINGS);\n+                    updatePreferences(PT_UI_SETTINGS, false);\n@@ -104,1 +117,1 @@\n-            &token);\n+            &unusedToken2);\n@@ -126,1 +139,1 @@\n-                    updatePreferences(PT_NETWORK_INFORMATION);\n+                    updatePreferences(PT_NETWORK_INFORMATION, false);\n@@ -153,0 +166,1 @@\n+        queryUIColors(prefs);\n@@ -170,1 +184,1 @@\n-bool PlatformSupport::updatePreferences(PreferenceType preferenceType) const\n+bool PlatformSupport::updatePreferences(PreferenceType preferenceType, bool delayedChangesExpected) const\n@@ -188,1 +202,2 @@\n-            env->CallVoidMethod(application, javaIDs.Application.notifyPreferencesChangedMID, unmodifiablePreferences);\n+            env->CallVoidMethod(application, javaIDs.Application.notifyPreferencesChangedMID,\n+                                unmodifiablePreferences, delayedChangesExpected ? SUGGESTED_DELAY_MILLIS : 0);\n@@ -205,1 +220,1 @@\n-            return updatePreferences(PreferenceType(PT_SYSTEM_PARAMS | PT_UI_SETTINGS));\n+            return updatePreferences(PT_SYSTEM_PARAMS, true);\n@@ -208,1 +223,1 @@\n-            return updatePreferences(PT_SYSTEM_PARAMS);\n+            return updatePreferences(PT_SYSTEM_PARAMS, false);\n@@ -212,1 +227,1 @@\n-        return updatePreferences(PT_UI_SETTINGS);\n+        return updatePreferences(PT_SYSTEM_COLORS, false);\n@@ -252,1 +267,1 @@\n-void PlatformSupport::queryUISettings(jobject properties) const\n+void PlatformSupport::queryUIColors(jobject properties) const\n@@ -289,0 +304,7 @@\n+}\n+\n+void PlatformSupport::queryUISettings(jobject properties) const\n+{\n+    if (!this->settings) {\n+        return;\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/PlatformSupport.cpp","additions":33,"deletions":11,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    bool updatePreferences(PreferenceType) const;\n+    bool updatePreferences(PreferenceType, bool delayedChangesExpected) const;\n@@ -68,1 +68,1 @@\n-    *\/\n+     *\/\n@@ -72,0 +72,5 @@\n+    \/**\n+     * Suggested aggregation delay for changes that come in over a period of time.\n+     *\/\n+    static constexpr int SUGGESTED_DELAY_MILLIS = 1000;\n+\n@@ -91,0 +96,1 @@\n+    void queryUIColors(jobject properties) const;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/PlatformSupport.h","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,144 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.javafx.application.preferences;\n+\n+import com.sun.javafx.application.preferences.DelayedChangeAggregator;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class DelayedChangeAggregatorTest {\n+\n+    static final int SHORT_DELAY = 100;\n+    static final int LONG_DELAY = 1000;\n+\n+    @Test\n+    void changeSetIsAppliedImmediately() {\n+        var consumer = new HashMap<String, Object>();\n+        var aggregator = new TestDelayedChangeAggregator(consumer::putAll);\n+        aggregator.update(Map.of(\"testKey\", \"testValue\"), 0);\n+        assertEquals(Map.of(\"testKey\", \"testValue\"), consumer);\n+    }\n+\n+    @Test\n+    void subsequentChangeSetsAreAppliedImmediately() {\n+        var consumer = new HashMap<String, Object>();\n+        var aggregator = new TestDelayedChangeAggregator(consumer::putAll);\n+        aggregator.update(Map.of(\"testKey1\", \"testValue1\"), 0);\n+        assertEquals(Map.of(\"testKey1\", \"testValue1\"), consumer);\n+        aggregator.update(Map.of(\"testKey2\", \"testValue2\"), 0);\n+        assertEquals(Map.of(\"testKey1\", \"testValue1\", \"testKey2\", \"testValue2\"), consumer);\n+    }\n+\n+    @Test\n+    void changeSetIsAppliedWithDelay() {\n+        var consumer = new HashMap<String, Object>();\n+        var aggregator = new TestDelayedChangeAggregator(consumer::putAll);\n+\n+        aggregator.update(Map.of(\"testKey\", \"testValue\"), SHORT_DELAY);\n+        assertEquals(Map.of(), consumer);\n+\n+        \/\/ Advance the time half-way through the delay period.\n+        aggregator.setTime(SHORT_DELAY \/ 2);\n+        assertEquals(Map.of(), consumer);\n+\n+        \/\/ Advance the time to a millisecond before the end of the delay period.\n+        aggregator.setTime(SHORT_DELAY - 1);\n+        assertEquals(Map.of(), consumer);\n+\n+        \/\/ When the delay period has elapsed, the change is applied.\n+        aggregator.setTime(SHORT_DELAY);\n+        assertEquals(Map.of(\"testKey\", \"testValue\"), consumer);\n+    }\n+\n+    @Test\n+    void subsequentChangeSetsAreAppliedWithDelay() {\n+        var consumer = new HashMap<String, Object>();\n+        var aggregator = new TestDelayedChangeAggregator(consumer::putAll);\n+\n+        aggregator.update(Map.of(\"testKey1\", \"testValue1\"), SHORT_DELAY);\n+        assertEquals(Map.of(), consumer);\n+\n+        aggregator.setTime(SHORT_DELAY \/ 2);\n+        aggregator.update(Map.of(\"testKey2\", \"testValue2\"), SHORT_DELAY);\n+        assertEquals(Map.of(), consumer);\n+\n+        aggregator.setTime((int)(SHORT_DELAY * 1.5));\n+        assertEquals(Map.of(\"testKey1\", \"testValue1\", \"testKey2\", \"testValue2\"), consumer);\n+    }\n+\n+    @Test\n+    void changeSetWithShortDelayWaitsForLastChangeSetWithLongDelay() {\n+        var consumer = new HashMap<String, Object>();\n+        var aggregator = new TestDelayedChangeAggregator(consumer::putAll);\n+\n+        aggregator.update(Map.of(\"testKey1\", \"testValue1\"), LONG_DELAY);\n+        assertEquals(Map.of(), consumer);\n+\n+        \/\/ Advance the time half-way through the delay period.\n+        aggregator.setTime(LONG_DELAY \/ 2);\n+        assertEquals(Map.of(), consumer);\n+\n+        \/\/ The new changeset waits for the current changeset's delay period to elapse.\n+        aggregator.update(Map.of(\"testKey2\", \"testValue2\"), SHORT_DELAY);\n+        assertEquals(Map.of(), consumer);\n+\n+        \/\/ Advance to the end of the first delay period. Both changesets are applied.\n+        aggregator.setTime(LONG_DELAY);\n+        assertEquals(Map.of(\"testKey1\", \"testValue1\", \"testKey2\", \"testValue2\"), consumer);\n+    }\n+\n+    private static class TestDelayedChangeAggregator extends DelayedChangeAggregator {\n+        private long nanos;\n+\n+        public TestDelayedChangeAggregator(Consumer<Map<String, Object>> changeConsumer) {\n+            super(changeConsumer);\n+        }\n+\n+        void setTime(int millis) {\n+            nanos = (long)millis * 1000000;\n+            handle(nanos);\n+        }\n+\n+        @Override\n+        protected long now() {\n+            return nanos;\n+        }\n+\n+        @Override\n+        public void start() {\n+            \/\/ no-op\n+        }\n+\n+        @Override\n+        public void stop() {\n+            \/\/ no-op\n+        }\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/application\/preferences\/DelayedChangeAggregatorTest.java","additions":144,"deletions":0,"binary":false,"changes":144,"status":"added"}]}