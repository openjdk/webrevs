{"files":[{"patch":"@@ -945,4 +945,1 @@\n-        platformPreferencesAggregator = new DelayedChangeAggregator(\n-            platformPreferences::update,\n-            Toolkit.getToolkit().getPrimaryTimer()::nanos,\n-            PlatformImpl::runLater);\n+        platformPreferencesAggregator = new DelayedChangeAggregator(platformPreferences::update);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformImpl.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import com.sun.javafx.tk.Toolkit;\n+import javafx.animation.AnimationTimer;\n@@ -30,1 +32,0 @@\n-import java.util.concurrent.Executor;\n@@ -32,1 +33,0 @@\n-import java.util.function.LongSupplier;\n@@ -37,3 +37,0 @@\n- * <p>\n- * This class is not thread-safe and can only safely be used on a single thread; this applies to the\n- * {@link #update(Map, int)}} method as well as the delayed executor.\n@@ -41,1 +38,1 @@\n-public final class DelayedChangeAggregator {\n+public class DelayedChangeAggregator extends AnimationTimer {\n@@ -43,2 +40,0 @@\n-    private final Executor delayedExecutor;\n-    private final LongSupplier nanoTimeSupplier;\n@@ -48,1 +43,1 @@\n-    private int serial;\n+    private boolean running;\n@@ -50,3 +45,1 @@\n-    public DelayedChangeAggregator(Consumer<Map<String, Object>> changeConsumer,\n-                                   LongSupplier nanoTimeSupplier,\n-                                   Executor delayedExecutor) {\n+    public DelayedChangeAggregator(Consumer<Map<String, Object>> changeConsumer) {\n@@ -54,2 +47,0 @@\n-        this.nanoTimeSupplier = nanoTimeSupplier;\n-        this.delayedExecutor = delayedExecutor;\n@@ -69,2 +60,1 @@\n-            int currentSerial = ++serial;\n-            long newElapsedTimeNanos = nanoTimeSupplier.getAsLong() + (long)delayMillis * 1000000;\n+            long newElapsedTimeNanos = now() + (long)delayMillis * 1000000;\n@@ -73,1 +63,5 @@\n-            delayedExecutor.execute(() -> update(currentSerial));\n+\n+            if (!running) {\n+                running = true;\n+                start();\n+            }\n@@ -79,8 +73,7 @@\n-    private void update(int expectedSerial) {\n-        if (expectedSerial == serial) {\n-            if (nanoTimeSupplier.getAsLong() < elapsedTimeNanos) {\n-                delayedExecutor.execute(() -> update(expectedSerial));\n-            } else {\n-                changeConsumer.accept(currentChangeSet);\n-                currentChangeSet.clear();\n-            }\n+    @Override\n+    public void handle(long now) {\n+        if (now >= elapsedTimeNanos) {\n+            stop();\n+            running = false;\n+            changeConsumer.accept(currentChangeSet);\n+            currentChangeSet.clear();\n@@ -89,0 +82,4 @@\n+\n+    protected long now() {\n+        return Toolkit.getToolkit().getPrimaryTimer().nanos();\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/preferences\/DelayedChangeAggregator.java","additions":22,"deletions":25,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.ArrayList;\n@@ -31,1 +30,0 @@\n-import java.util.List;\n@@ -33,2 +31,1 @@\n-import java.util.concurrent.Executor;\n-import java.util.function.LongSupplier;\n+import java.util.function.Consumer;\n@@ -47,1 +44,1 @@\n-        var aggregator = new DelayedChangeAggregator(consumer::putAll, () -> 0, Runnable::run);\n+        var aggregator = new TestDelayedChangeAggregator(consumer::putAll);\n@@ -55,1 +52,1 @@\n-        var aggregator = new DelayedChangeAggregator(consumer::putAll, () -> 0, Runnable::run);\n+        var aggregator = new TestDelayedChangeAggregator(consumer::putAll);\n@@ -64,1 +61,0 @@\n-        var executor = new ExecutorImpl();\n@@ -66,1 +62,1 @@\n-        var aggregator = new DelayedChangeAggregator(consumer::putAll, executor, executor);\n+        var aggregator = new TestDelayedChangeAggregator(consumer::putAll);\n@@ -72,1 +68,1 @@\n-        executor.setTime(SHORT_DELAY \/ 2);\n+        aggregator.setTime(SHORT_DELAY \/ 2);\n@@ -76,1 +72,1 @@\n-        executor.setTime(SHORT_DELAY - 1);\n+        aggregator.setTime(SHORT_DELAY - 1);\n@@ -80,1 +76,1 @@\n-        executor.setTime(SHORT_DELAY);\n+        aggregator.setTime(SHORT_DELAY);\n@@ -86,1 +82,0 @@\n-        var executor = new ExecutorImpl();\n@@ -88,1 +83,1 @@\n-        var aggregator = new DelayedChangeAggregator(consumer::putAll, executor, executor);\n+        var aggregator = new TestDelayedChangeAggregator(consumer::putAll);\n@@ -93,1 +88,1 @@\n-        executor.setTime(SHORT_DELAY \/ 2);\n+        aggregator.setTime(SHORT_DELAY \/ 2);\n@@ -97,1 +92,1 @@\n-        executor.setTime((int)(SHORT_DELAY * 1.5));\n+        aggregator.setTime((int)(SHORT_DELAY * 1.5));\n@@ -103,1 +98,0 @@\n-        var executor = new ExecutorImpl();\n@@ -105,1 +99,1 @@\n-        var aggregator = new DelayedChangeAggregator(consumer::putAll, executor, executor);\n+        var aggregator = new TestDelayedChangeAggregator(consumer::putAll);\n@@ -111,1 +105,1 @@\n-        executor.setTime(LONG_DELAY \/ 2);\n+        aggregator.setTime(LONG_DELAY \/ 2);\n@@ -119,1 +113,1 @@\n-        executor.setTime(LONG_DELAY);\n+        aggregator.setTime(LONG_DELAY);\n@@ -123,3 +117,2 @@\n-    private static class ExecutorImpl implements Executor, LongSupplier {\n-        final List<Runnable> commands = new ArrayList<>();\n-        long nanos;\n+    private static class TestDelayedChangeAggregator extends DelayedChangeAggregator {\n+        private long nanos;\n@@ -127,3 +120,2 @@\n-        @Override\n-        public void execute(Runnable command) {\n-            commands.add(command);\n+        public TestDelayedChangeAggregator(Consumer<Map<String, Object>> changeConsumer) {\n+            super(changeConsumer);\n@@ -132,4 +124,3 @@\n-        void run() {\n-            var copy = List.copyOf(commands);\n-            commands.clear();\n-            copy.forEach(Runnable::run);\n+        void setTime(int millis) {\n+            nanos = (long)millis * 1000000;\n+            handle(nanos);\n@@ -139,1 +130,1 @@\n-        public long getAsLong() {\n+        protected long now() {\n@@ -143,3 +134,8 @@\n-        void setTime(int millis) {\n-            nanos = (long)millis * 1000000;\n-            run();\n+        @Override\n+        public void start() {\n+            \/\/ no-op\n+        }\n+\n+        @Override\n+        public void stop() {\n+            \/\/ no-op\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/application\/preferences\/DelayedChangeAggregatorTest.java","additions":29,"deletions":33,"binary":false,"changes":62,"status":"modified"}]}