{"files":[{"patch":"@@ -92,3 +92,0 @@\n-    \/\/ *** NOTE: Multiple node mode is not yet fully implemented *** \/\/\n-    private static final boolean USE_MULTIPLE_NODES = false;\n-\n@@ -164,0 +161,1 @@\n+        this.textArea = control;\n@@ -167,3 +165,0 @@\n-\/\/        control.setInputMap(behavior.getInputMap());\n-\n-        this.textArea = control;\n@@ -193,2 +188,0 @@\n-\/\/        setManaged(false);\n-\n@@ -251,3 +244,18 @@\n-        for (int i = 0, n = USE_MULTIPLE_NODES ? control.getParagraphs().size() : 1; i < n; i++) {\n-            CharSequence paragraph = (n == 1) ? control.textProperty().getValueSafe() : control.getParagraphs().get(i);\n-            addParagraphNode(i, paragraph.toString());\n+        String s = control.textProperty().getValueSafe();\n+        \/\/ used to be addParagraphNode, now we have a single paragraph node of type Text\n+        \/\/ keeping paragraphNodes Group for compatibility\n+        {\n+            final TextArea textArea = getSkinnable();\n+            Text paragraphNode = new Text(s);\n+            paragraphNode.setTextOrigin(VPos.TOP);\n+            paragraphNode.setManaged(false);\n+            paragraphNode.getStyleClass().add(\"text\");\n+            paragraphNode.boundsTypeProperty().addListener((observable, oldValue, newValue) -> {\n+                invalidateMetrics();\n+                updateFontMetrics();\n+            });\n+            paragraphNodes.getChildren().add(paragraphNode);\n+\n+            paragraphNode.fontProperty().bind(textArea.fontProperty());\n+            paragraphNode.fillProperty().bind(textFillProperty());\n+            paragraphNode.selectionFillProperty().bind(highlightTextFillProperty());\n@@ -322,34 +330,5 @@\n-        if (USE_MULTIPLE_NODES) {\n-            registerListChangeListener(control.getParagraphs(), change -> {\n-                while (change.next()) {\n-                    int from = change.getFrom();\n-                    int to = change.getTo();\n-                    List<? extends CharSequence> removed = (List<? extends CharSequence>) change.getRemoved();\n-                    if (from < to) {\n-\n-                        if (removed.isEmpty()) {\n-                            \/\/ This is an add\n-                            for (int i = from, n = to; i < n; i++) {\n-                                addParagraphNode(i, change.getList().get(i).toString());\n-                            }\n-                        } else {\n-                            \/\/ This is an update\n-                            for (int i = from, n = to; i < n; i++) {\n-                                Node node = paragraphNodes.getChildren().get(i);\n-                                Text paragraphNode = (Text) node;\n-                                paragraphNode.setText(change.getList().get(i).toString());\n-                            }\n-                        }\n-                    } else {\n-                        \/\/ This is a remove\n-                        paragraphNodes.getChildren().subList(from, from + removed.size()).clear();\n-                    }\n-                }\n-            });\n-        } else {\n-            registerInvalidationListener(control.textProperty(), e -> {\n-                invalidateMetrics();\n-                ((Text)paragraphNodes.getChildren().get(0)).setText(control.textProperty().getValueSafe());\n-                contentView.requestLayout();\n-            });\n-        }\n+        registerInvalidationListener(control.textProperty(), e -> {\n+            invalidateMetrics();\n+            getTextNode().setText(control.textProperty().getValueSafe());\n+            contentView.requestLayout();\n+        });\n@@ -748,11 +727,3 @@\n-    @Override protected PathElement[] getUnderlineShape(int start, int end) {\n-        int pStart = 0;\n-        for (Node node : paragraphNodes.getChildren()) {\n-            Text p = (Text)node;\n-            int pEnd = pStart + p.textProperty().getValueSafe().length();\n-            if (pEnd >= start) {\n-                return p.underlineShape(start - pStart, end - pStart);\n-            }\n-            pStart = pEnd + 1;\n-        }\n-        return null;\n+    @Override\n+    protected PathElement[] getUnderlineShape(int start, int end) {\n+        return getTextNode().underlineShape(start, end);\n@@ -762,11 +733,3 @@\n-    @Override protected PathElement[] getRangeShape(int start, int end) {\n-        int pStart = 0;\n-        for (Node node : paragraphNodes.getChildren()) {\n-            Text p = (Text)node;\n-            int pEnd = pStart + p.textProperty().getValueSafe().length();\n-            if (pEnd >= start) {\n-                return p.rangeShape(start - pStart, end - pStart);\n-            }\n-            pStart = pEnd + 1;\n-        }\n-        return null;\n+    @Override\n+    protected PathElement[] getRangeShape(int start, int end) {\n+        return getTextNode().rangeShape(start, end);\n@@ -776,18 +739,6 @@\n-    @Override protected void addHighlight(List<? extends Node> nodes, int start) {\n-        int pStart = 0;\n-        Text paragraphNode = null;\n-        for (Node node : paragraphNodes.getChildren()) {\n-            Text p = (Text)node;\n-            int pEnd = pStart + p.textProperty().getValueSafe().length();\n-            if (pEnd >= start) {\n-                paragraphNode = p;\n-                break;\n-            }\n-            pStart = pEnd + 1;\n-        }\n-\n-        if (paragraphNode != null) {\n-            for (Node node : nodes) {\n-                node.setLayoutX(paragraphNode.getLayoutX());\n-                node.setLayoutY(paragraphNode.getLayoutY());\n-            }\n+    @Override\n+    protected void addHighlight(List<? extends Node> nodes, int start) {\n+        Text paragraphNode = getTextNode();\n+        for (Node node : nodes) {\n+            node.setLayoutX(paragraphNode.getLayoutX());\n+            node.setLayoutY(paragraphNode.getLayoutY());\n@@ -850,3 +801,4 @@\n-    @Override public double computeBaselineOffset(double topInset, double rightInset, double bottomInset, double leftInset) {\n-        Text firstParagraph = (Text) paragraphNodes.getChildren().get(0);\n-        return Utils.getAscent(getSkinnable().getFont(), firstParagraph.getBoundsType())\n+    @Override\n+    public double computeBaselineOffset(double topInset, double rightInset, double bottomInset, double leftInset) {\n+        Text p = getTextNode();\n+        return Utils.getAscent(getSkinnable().getFont(), p.getBoundsType())\n@@ -857,20 +809,2 @@\n-        int n = paragraphNodes.getChildren().size();\n-\n-        int paragraphIndex = 0;\n-        int offset = index;\n-\n-        String paragraph = null;\n-        while (paragraphIndex < n) {\n-            Text paragraphNode = (Text)paragraphNodes.getChildren().get(paragraphIndex);\n-            paragraph = paragraphNode.getText();\n-            int count = paragraph.length() + 1;\n-\n-            if (offset < count) {\n-                break;\n-            }\n-\n-            offset -= count;\n-            paragraphIndex++;\n-        }\n-\n-        return offset == paragraph.length() ? '\\n' : paragraph.charAt(offset);\n+        String paragraph = getTextNode().getText();\n+        return index == paragraph.length() ? '\\n' : paragraph.charAt(index);\n@@ -880,1 +814,2 @@\n-    @Override protected int getInsertionPoint(double x, double y) {\n+    @Override\n+    protected int getInsertionPoint(double x, double y) {\n@@ -882,0 +817,1 @@\n+        Text paragraphNode = getTextNode();\n@@ -883,33 +819,12 @@\n-        int n = paragraphNodes.getChildren().size();\n-        int index = -1;\n-\n-        if (n > 0) {\n-            if (y < contentView.snappedTopInset()) {\n-                \/\/ Select the character at x in the first row\n-                Text paragraphNode = (Text)paragraphNodes.getChildren().get(0);\n-                index = getNextInsertionPoint(paragraphNode, x, -1, VerticalDirection.DOWN);\n-            } else if (y > contentView.snappedTopInset() + contentView.getHeight()) {\n-                \/\/ Select the character at x in the last row\n-                int lastParagraphIndex = n - 1;\n-                Text lastParagraphView = (Text)paragraphNodes.getChildren().get(lastParagraphIndex);\n-\n-                index = getNextInsertionPoint(lastParagraphView, x, -1, VerticalDirection.UP)\n-                        + (textArea.getLength() - lastParagraphView.getText().length());\n-            } else {\n-                \/\/ Select the character at x in the row at y\n-                int paragraphOffset = 0;\n-                for (int i = 0; i < n; i++) {\n-                    Text paragraphNode = (Text)paragraphNodes.getChildren().get(i);\n-\n-                    Bounds bounds = paragraphNode.getBoundsInLocal();\n-                    double paragraphViewY = paragraphNode.getLayoutY() + bounds.getMinY();\n-                    if (y >= paragraphViewY\n-                            && y < paragraphViewY + paragraphNode.getBoundsInLocal().getHeight()) {\n-                        index = getInsertionPoint(paragraphNode,\n-                                x - paragraphNode.getLayoutX(),\n-                                y - paragraphNode.getLayoutY()) + paragraphOffset;\n-                        break;\n-                    }\n-\n-                    paragraphOffset += paragraphNode.getText().length() + 1;\n-                }\n+        if (y < contentView.snappedTopInset()) {\n+            return 0;\n+        } else if (y > contentView.snappedTopInset() + contentView.getHeight()) {\n+            return (textArea.getLength() - paragraphNode.getText().length());\n+        } else {\n+            Bounds bounds = paragraphNode.getBoundsInLocal();\n+            double paragraphViewY = paragraphNode.getLayoutY() + bounds.getMinY();\n+            if (y >= paragraphViewY\n+                    && y < paragraphViewY + paragraphNode.getBoundsInLocal().getHeight()) {\n+                return getInsertionPoint(paragraphNode,\n+                        x - paragraphNode.getLayoutX(),\n+                        y - paragraphNode.getLayoutY());\n@@ -919,1 +834,1 @@\n-        return index;\n+        return -1;\n@@ -959,1 +874,2 @@\n-    @Override public Rectangle2D getCharacterBounds(int index) {\n+    @Override\n+    public Rectangle2D getCharacterBounds(int index) {\n@@ -961,11 +877,1 @@\n-\n-        int paragraphIndex = paragraphNodes.getChildren().size();\n-        int paragraphOffset = textArea.getLength() + 1;\n-\n-        Text paragraphNode = null;\n-        do {\n-            paragraphNode = (Text)paragraphNodes.getChildren().get(--paragraphIndex);\n-            paragraphOffset -= paragraphNode.getText().length() + 1;\n-        } while (index < paragraphOffset);\n-\n-        int characterIndex = index - paragraphOffset;\n+        Text paragraphNode = getTextNode();\n@@ -974,2 +880,2 @@\n-        if (characterIndex == paragraphNode.getText().length()) {\n-            characterIndex--;\n+        if (index == paragraphNode.getText().length()) {\n+            index--;\n@@ -980,1 +886,1 @@\n-        characterBoundingPath.getElements().addAll(paragraphNode.rangeShape(characterIndex, characterIndex + 1));\n+        characterBoundingPath.getElements().addAll(paragraphNode.rangeShape(index, index + 1));\n@@ -1042,17 +948,0 @@\n-    private void addParagraphNode(int i, String string) {\n-        final TextArea textArea = getSkinnable();\n-        Text paragraphNode = new Text(string);\n-        paragraphNode.setTextOrigin(VPos.TOP);\n-        paragraphNode.setManaged(false);\n-        paragraphNode.getStyleClass().add(\"text\");\n-        paragraphNode.boundsTypeProperty().addListener((observable, oldValue, newValue) -> {\n-            invalidateMetrics();\n-            updateFontMetrics();\n-        });\n-        paragraphNodes.getChildren().add(i, paragraphNode);\n-\n-        paragraphNode.fontProperty().bind(textArea.fontProperty());\n-        paragraphNode.fillProperty().bind(textFillProperty());\n-        paragraphNode.selectionFillProperty().bind(highlightTextFillProperty());\n-    }\n-\n@@ -1072,6 +961,0 @@\n-    private int getNextInsertionPoint(Text paragraphNode, double x, int from,\n-        VerticalDirection scrollDirection) {\n-        \/\/ TODO\n-        return 0;\n-    }\n-\n@@ -1155,2 +1038,1 @@\n-        Text firstParagraph = (Text)paragraphNodes.getChildren().get(0);\n-        lineHeight = Utils.getLineHeight(getSkinnable().getFont(), firstParagraph.getBoundsType());\n+        lineHeight = Utils.getLineHeight(getSkinnable().getFont(), getTextNode().getBoundsType());\n@@ -1176,1 +1058,1 @@\n-    \/\/ package for testing only!\n+    \/\/ package protected for testing\n@@ -1178,3 +1060,0 @@\n-        if (USE_MULTIPLE_NODES) {\n-            throw new IllegalArgumentException(\"Multiple node traversal is not yet implemented.\");\n-        }\n@@ -1322,6 +1201,2 @@\n-            final List<Node> paragraphNodesChildren = paragraphNodes.getChildren();\n-\n-            for (int i = 0; i < paragraphNodesChildren.size(); i++) {\n-                Node node = paragraphNodesChildren.get(i);\n-                Text paragraphNode = (Text)node;\n-                paragraphNode.setWrappingWidth(wrappingWidth);\n+            Text paragraphNode = getTextNode();\n+            paragraphNode.setWrappingWidth(wrappingWidth);\n@@ -1329,3 +1204,3 @@\n-                Bounds bounds = paragraphNode.getBoundsInLocal();\n-                paragraphNode.setLayoutX(leftPadding);\n-                paragraphNode.setLayoutY(y);\n+            Bounds bounds = paragraphNode.getBoundsInLocal();\n+            paragraphNode.setLayoutX(leftPadding);\n+            paragraphNode.setLayoutY(y);\n@@ -1333,2 +1208,1 @@\n-                y += bounds.getHeight();\n-            }\n+            y += bounds.getHeight();\n@@ -1366,9 +1240,1 @@\n-                    int paragraphIndex = paragraphNodesChildren.size();\n-                    int paragraphOffset = textArea.getLength() + 1;\n-                    Text paragraphNode = null;\n-                    do {\n-                        paragraphNode = (Text)paragraphNodesChildren.get(--paragraphIndex);\n-                        paragraphOffset -= paragraphNode.getText().length() + 1;\n-                    } while (anchorPos < paragraphOffset);\n-\n-                    updateTextNodeCaretPos(anchorPos - paragraphOffset);\n+                    updateTextNodeCaretPos(anchorPos);\n@@ -1393,10 +1259,1 @@\n-                int paragraphIndex = paragraphNodesChildren.size();\n-                int paragraphOffset = textArea.getLength() + 1;\n-\n-                Text paragraphNode = null;\n-                do {\n-                    paragraphNode = (Text)paragraphNodesChildren.get(--paragraphIndex);\n-                    paragraphOffset -= paragraphNode.getText().length() + 1;\n-                } while (caretPos < paragraphOffset);\n-\n-                updateTextNodeCaretPos(caretPos - paragraphOffset);\n+                updateTextNodeCaretPos(caretPos);\n@@ -1421,24 +1278,11 @@\n-            for (int i = 0, max = paragraphNodesChildren.size(); i < max; i++) {\n-                Node paragraphNode = paragraphNodesChildren.get(i);\n-                Text textNode = (Text)paragraphNode;\n-                int paragraphLength = textNode.getText().length() + 1;\n-                if (end > start && start < paragraphLength) {\n-                    textNode.setSelectionStart(start);\n-                    textNode.setSelectionEnd(Math.min(end, paragraphLength));\n-\n-                    Path selectionHighlightPath = new Path();\n-                    selectionHighlightPath.setManaged(false);\n-                    selectionHighlightPath.setStroke(null);\n-                    PathElement[] selectionShape = textNode.getSelectionShape();\n-                    if (selectionShape != null) {\n-                        selectionHighlightPath.getElements().addAll(selectionShape);\n-                    }\n-                    selectionHighlightGroup.getChildren().add(selectionHighlightPath);\n-                    selectionHighlightGroup.setVisible(true);\n-                    selectionHighlightPath.setLayoutX(textNode.getLayoutX());\n-                    selectionHighlightPath.setLayoutY(textNode.getLayoutY());\n-                    updateHighlightFill();\n-                } else {\n-                    textNode.setSelectionStart(-1);\n-                    textNode.setSelectionEnd(-1);\n-                    selectionHighlightGroup.setVisible(false);\n+            int paragraphLength = paragraphNode.getText().length() + 1;\n+            if (end > start && start < paragraphLength) {\n+                paragraphNode.setSelectionStart(start);\n+                paragraphNode.setSelectionEnd(Math.min(end, paragraphLength));\n+\n+                Path selectionHighlightPath = new Path();\n+                selectionHighlightPath.setManaged(false);\n+                selectionHighlightPath.setStroke(null);\n+                PathElement[] selectionShape = paragraphNode.getSelectionShape();\n+                if (selectionShape != null) {\n+                    selectionHighlightPath.getElements().addAll(selectionShape);\n@@ -1446,2 +1290,9 @@\n-                start = Math.max(0, start - paragraphLength);\n-                end   = Math.max(0, end   - paragraphLength);\n+                selectionHighlightGroup.getChildren().add(selectionHighlightPath);\n+                selectionHighlightGroup.setVisible(true);\n+                selectionHighlightPath.setLayoutX(paragraphNode.getLayoutX());\n+                selectionHighlightPath.setLayoutY(paragraphNode.getLayoutY());\n+                updateHighlightFill();\n+            } else {\n+                paragraphNode.setSelectionStart(-1);\n+                paragraphNode.setSelectionEnd(-1);\n+                selectionHighlightGroup.setVisible(false);\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TextAreaSkin.java","additions":94,"deletions":243,"binary":false,"changes":337,"status":"modified"}]}