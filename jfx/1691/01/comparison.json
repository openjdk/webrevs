{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,5 +82,6 @@\n-    static final Text helper = new Text();\n-    static final double DEFAULT_WRAPPING_WIDTH = helper.getWrappingWidth();\n-    static final double DEFAULT_LINE_SPACING = helper.getLineSpacing();\n-    static final String DEFAULT_TEXT = helper.getText();\n-    static final TextBoundsType DEFAULT_BOUNDS_TYPE = helper.getBoundsType();\n+    private static final Text textInstance = new Text();\n+    private static final double DEFAULT_WRAPPING_WIDTH = textInstance.getWrappingWidth();\n+    private static final double DEFAULT_LINE_SPACING = textInstance.getLineSpacing();\n+    private static final String DEFAULT_TEXT = textInstance.getText();\n+    private static final TextBoundsType DEFAULT_BOUNDS_TYPE = textInstance.getBoundsType();\n+    private static final AtomicBoolean helperGuard = new AtomicBoolean(false);\n@@ -97,1 +98,2 @@\n-    static final TextLayout layout = Toolkit.getToolkit().getTextLayoutFactory().createLayout();\n+    private static final TextLayout layoutInstance = Toolkit.getToolkit().getTextLayoutFactory().createLayout();\n+    private static final AtomicBoolean layoutGuard = new AtomicBoolean(false);\n@@ -99,6 +101,3 @@\n-    public static double getAscent(Font font, TextBoundsType boundsType) {\n-        layout.setContent(\"\", FontHelper.getNativeFont(font));\n-        layout.setWrapWidth(0);\n-        layout.setLineSpacing(0);\n-        if (boundsType == TextBoundsType.LOGICAL_VERTICAL_CENTER) {\n-            layout.setBoundsType(TextLayout.BOUNDS_CENTER);\n+    private static Text helper() {\n+        if (helperGuard.compareAndSet(false, true)) {\n+            return textInstance;\n@@ -106,1 +105,1 @@\n-            layout.setBoundsType(0);\n+            return new Text();\n@@ -108,1 +107,0 @@\n-        return -layout.getBounds().getMinY();\n@@ -111,6 +109,9 @@\n-    public static double getLineHeight(Font font, TextBoundsType boundsType) {\n-        layout.setContent(\"\", FontHelper.getNativeFont(font));\n-        layout.setWrapWidth(0);\n-        layout.setLineSpacing(0);\n-        if (boundsType == TextBoundsType.LOGICAL_VERTICAL_CENTER) {\n-            layout.setBoundsType(TextLayout.BOUNDS_CENTER);\n+    private static void release(Text t) {\n+        if (t == textInstance) {\n+            helperGuard.set(false);\n+        }\n+    }\n+\n+    private static TextLayout layout() {\n+        if (layoutGuard.compareAndSet(false, true)) {\n+            return layoutInstance;\n@@ -118,1 +119,1 @@\n-            layout.setBoundsType(0);\n+            return Toolkit.getToolkit().getTextLayoutFactory().createLayout();\n@@ -120,0 +121,1 @@\n+    }\n@@ -121,2 +123,40 @@\n-        \/\/ JDK-8093957: Use the line bounds specifically, to include font leading.\n-        return layout.getLines()[0].getBounds().getHeight();\n+    private static void release(TextLayout t) {\n+        if (t == layoutInstance) {\n+            layoutGuard.set(false);\n+        }\n+    }\n+\n+    public static double getAscent(Font font, TextBoundsType boundsType) {\n+        TextLayout layout = layout();\n+        try {\n+            layout.setContent(\"\", FontHelper.getNativeFont(font));\n+            layout.setWrapWidth(0);\n+            layout.setLineSpacing(0);\n+            if (boundsType == TextBoundsType.LOGICAL_VERTICAL_CENTER) {\n+                layout.setBoundsType(TextLayout.BOUNDS_CENTER);\n+            } else {\n+                layout.setBoundsType(0);\n+            }\n+            return -layout.getBounds().getMinY();\n+        } finally {\n+            release(layout);\n+        }\n+    }\n+\n+    public static double getLineHeight(Font font, TextBoundsType boundsType) {\n+        TextLayout layout = layout();\n+        try {\n+            layout.setContent(\"\", FontHelper.getNativeFont(font));\n+            layout.setWrapWidth(0);\n+            layout.setLineSpacing(0);\n+            if (boundsType == TextBoundsType.LOGICAL_VERTICAL_CENTER) {\n+                layout.setBoundsType(TextLayout.BOUNDS_CENTER);\n+            } else {\n+                layout.setBoundsType(0);\n+            }\n+\n+            \/\/ JDK-8093957: Use the line bounds specifically, to include font leading.\n+            return layout.getLines()[0].getBounds().getHeight();\n+        } finally {\n+            release(layout);\n+        }\n@@ -126,3 +166,8 @@\n-        layout.setContent(text != null ? text : \"\", FontHelper.getNativeFont(font));\n-        layout.setWrapWidth((float)wrappingWidth);\n-        return layout.getBounds().getWidth();\n+        TextLayout layout = layout();\n+        try {\n+            layout.setContent(text != null ? text : \"\", FontHelper.getNativeFont(font));\n+            layout.setWrapWidth((float)wrappingWidth);\n+            return layout.getBounds().getWidth();\n+        } finally {\n+            release(layout);\n+        }\n@@ -136,7 +181,13 @@\n-        layout.setContent(text != null ? text : \"\", FontHelper.getNativeFont(font));\n-        layout.setWrapWidth((float)wrappingWidth);\n-        layout.setLineSpacing((float)lineSpacing);\n-        if (boundsType == TextBoundsType.LOGICAL_VERTICAL_CENTER) {\n-            layout.setBoundsType(TextLayout.BOUNDS_CENTER);\n-        } else {\n-            layout.setBoundsType(0);\n+        TextLayout layout = layout();\n+        try {\n+            layout.setContent(text != null ? text : \"\", FontHelper.getNativeFont(font));\n+            layout.setWrapWidth((float)wrappingWidth);\n+            layout.setLineSpacing((float)lineSpacing);\n+            if (boundsType == TextBoundsType.LOGICAL_VERTICAL_CENTER) {\n+                layout.setBoundsType(TextLayout.BOUNDS_CENTER);\n+            } else {\n+                layout.setBoundsType(0);\n+            }\n+            return layout.getBounds().getHeight();\n+        } finally {\n+            release(layout);\n@@ -144,1 +195,0 @@\n-        return layout.getBounds().getHeight();\n@@ -155,7 +205,0 @@\n-        \/\/ Layout the text with given font, wrapping width and line spacing\n-        layout.setContent(text, FontHelper.getNativeFont(font));\n-        layout.setWrapWidth((float)wrappingWidth);\n-        layout.setLineSpacing((float)lineSpacing);\n-\n-        \/\/ The text could be spread over multiple lines\n-        \/\/ We need to find out on which line the mnemonic character lies\n@@ -164,1 +207,0 @@\n-        int totalLines = layout.getLines().length;\n@@ -166,2 +208,2 @@\n-        while (i < totalLines) {\n-            lineLength = layout.getLines()[i].getLength();\n+        int totalLines;\n+        double lineHeight;\n@@ -169,4 +211,21 @@\n-            if ((mnemonicIndex >= start) &&\n-                (mnemonicIndex < (start + lineLength))) {\n-                \/\/ mnemonic lies on line 'i'\n-                break;\n+        \/\/ Layout the text with given font, wrapping width and line spacing\n+        TextLayout layout = layout();\n+        try {\n+            layout.setContent(text, FontHelper.getNativeFont(font));\n+            layout.setWrapWidth((float)wrappingWidth);\n+            layout.setLineSpacing((float)lineSpacing);\n+\n+            \/\/ The text could be spread over multiple lines\n+            \/\/ We need to find out on which line the mnemonic character lies\n+            totalLines = layout.getLines().length;\n+            while (i < totalLines) {\n+                lineLength = layout.getLines()[i].getLength();\n+\n+                if ((mnemonicIndex >= start) &&\n+                    (mnemonicIndex < (start + lineLength))) {\n+                    \/\/ mnemonic lies on line 'i'\n+                    break;\n+                }\n+\n+                start += lineLength;\n+                i++;\n@@ -175,2 +234,5 @@\n-            start += lineLength;\n-            i++;\n+            \/\/ Find x and y offsets of mnemonic character position\n+            \/\/ in line numbered 'i'\n+            lineHeight = layout.getBounds().getHeight() \/ totalLines;\n+        } finally {\n+            release(layout);\n@@ -179,3 +241,0 @@\n-        \/\/ Find x and y offsets of mnemonic character position\n-        \/\/ in line numbered 'i'\n-        double lineHeight = layout.getBounds().getHeight() \/ totalLines;\n@@ -198,15 +257,20 @@\n-        helper.setText(text);\n-        helper.setFont(font);\n-        helper.setWrappingWidth(0);\n-        helper.setLineSpacing(0);\n-        \/\/ The -2 is a fudge to make sure the result more often matches\n-        \/\/ what we get from using computeTextWidth instead. It's not yet\n-        \/\/ clear what causes the small discrepancies.\n-        Bounds bounds = helper.getLayoutBounds();\n-        Point2D endPoint = new Point2D(width - 2, bounds.getMinY() + bounds.getHeight() \/ 2);\n-        final int index = helper.hitTest(endPoint).getCharIndex();\n-        \/\/ RESTORE STATE\n-        helper.setWrappingWidth(DEFAULT_WRAPPING_WIDTH);\n-        helper.setLineSpacing(DEFAULT_LINE_SPACING);\n-        helper.setText(DEFAULT_TEXT);\n-        return index;\n+        Text helper = helper();\n+        try {\n+            helper.setText(text);\n+            helper.setFont(font);\n+            helper.setWrappingWidth(0);\n+            helper.setLineSpacing(0);\n+            \/\/ The -2 is a fudge to make sure the result more often matches\n+            \/\/ what we get from using computeTextWidth instead. It's not yet\n+            \/\/ clear what causes the small discrepancies.\n+            Bounds bounds = helper.getLayoutBounds();\n+            Point2D endPoint = new Point2D(width - 2, bounds.getMinY() + bounds.getHeight() \/ 2);\n+            final int index = helper.hitTest(endPoint).getCharIndex();\n+            \/\/ RESTORE STATE\n+            helper.setWrappingWidth(DEFAULT_WRAPPING_WIDTH);\n+            helper.setLineSpacing(DEFAULT_LINE_SPACING);\n+            helper.setText(DEFAULT_TEXT);\n+            return index;\n+        } finally {\n+            release(helper);\n+        }\n@@ -498,14 +562,27 @@\n-        helper.setText(text);\n-        helper.setFont(font);\n-        helper.setWrappingWidth((int)Math.ceil(width));\n-        helper.setBoundsType(boundsType);\n-        helper.setLineSpacing(lineSpacing);\n-\n-        boolean leading =  (truncationStyle == LEADING_ELLIPSIS ||\n-                            truncationStyle == LEADING_WORD_ELLIPSIS);\n-        boolean center =   (truncationStyle == CENTER_ELLIPSIS ||\n-                            truncationStyle == CENTER_WORD_ELLIPSIS);\n-        boolean trailing = !(leading || center);\n-        boolean wordTrim = (truncationStyle == WORD_ELLIPSIS ||\n-                            truncationStyle == LEADING_WORD_ELLIPSIS ||\n-                            truncationStyle == CENTER_WORD_ELLIPSIS);\n+        Text helper = helper();\n+        try {\n+            helper.setText(text);\n+            helper.setFont(font);\n+            helper.setWrappingWidth((int)Math.ceil(width));\n+            helper.setBoundsType(boundsType);\n+            helper.setLineSpacing(lineSpacing);\n+\n+            boolean leading =  (truncationStyle == LEADING_ELLIPSIS ||\n+                                truncationStyle == LEADING_WORD_ELLIPSIS);\n+            boolean center =   (truncationStyle == CENTER_ELLIPSIS ||\n+                                truncationStyle == CENTER_WORD_ELLIPSIS);\n+            boolean trailing = !(leading || center);\n+            boolean wordTrim = (truncationStyle == WORD_ELLIPSIS ||\n+                                truncationStyle == LEADING_WORD_ELLIPSIS ||\n+                                truncationStyle == CENTER_WORD_ELLIPSIS);\n+\n+            String result = text;\n+            boolean truncated = false;\n+            int len = (result != null) ? result.length() : 0;\n+            int centerLen = -1;\n+\n+            Point2D centerPoint = null;\n+            if (center) {\n+                \/\/ Find index of character in the middle of the visual text area\n+                centerPoint = new Point2D((width - eWidth) \/ 2, height \/ 2 - helper.getBaselineOffset());\n+            }\n@@ -513,4 +590,3 @@\n-        String result = text;\n-        boolean truncated = false;\n-        int len = (result != null) ? result.length() : 0;\n-        int centerLen = -1;\n+            \/\/ Find index of character at the bottom left of the text area.\n+            \/\/ This should be the first character of a line that would be clipped.\n+            Point2D endPoint = new Point2D(0, height - helper.getBaselineOffset());\n@@ -518,9 +594,8 @@\n-        Point2D centerPoint = null;\n-        if (center) {\n-            \/\/ Find index of character in the middle of the visual text area\n-            centerPoint = new Point2D((width - eWidth) \/ 2, height \/ 2 - helper.getBaselineOffset());\n-        }\n-\n-        \/\/ Find index of character at the bottom left of the text area.\n-        \/\/ This should be the first character of a line that would be clipped.\n-        Point2D endPoint = new Point2D(0, height - helper.getBaselineOffset());\n+            int hit = helper.hitTest(endPoint).getCharIndex();\n+            if (hit >= len) {\n+                helper.setBoundsType(TextBoundsType.LOGICAL); \/\/ restore\n+                return text;\n+            }\n+            if (center) {\n+                hit = helper.hitTest(centerPoint).getCharIndex();\n+            }\n@@ -528,8 +603,2 @@\n-        int hit = helper.hitTest(endPoint).getCharIndex();\n-        if (hit >= len) {\n-            helper.setBoundsType(TextBoundsType.LOGICAL); \/\/ restore\n-            return text;\n-        }\n-        if (center) {\n-            hit = helper.hitTest(centerPoint).getCharIndex();\n-        }\n+            if (hit > 0 && hit < len) {\n+                \/\/ Step one, make a truncation estimate.\n@@ -537,2 +606,20 @@\n-        if (hit > 0 && hit < len) {\n-            \/\/ Step one, make a truncation estimate.\n+                if (center || trailing) {\n+                    int ind = hit;\n+                    if (center) {\n+                        \/\/ This is for the first part, i.e. beginning of text up to ellipsis.\n+                        if (wordTrim) {\n+                            int brInd = lastBreakCharIndex(text, ind + 1);\n+                            if (brInd >= 0) {\n+                                ind = brInd + 1;\n+                            } else {\n+                                brInd = firstBreakCharIndex(text, ind);\n+                                if (brInd >= 0) {\n+                                    ind = brInd + 1;\n+                                }\n+                            }\n+                        }\n+                        centerLen = ind + eLen;\n+                    } \/\/ else: text node wraps at words, so wordTrim is not needed here.\n+                    result = result.substring(0, ind) + ellipsis;\n+                    truncated = true;\n+                }\n@@ -540,5 +627,13 @@\n-            if (center || trailing) {\n-                int ind = hit;\n-                if (center) {\n-                    \/\/ This is for the first part, i.e. beginning of text up to ellipsis.\n-                    if (wordTrim) {\n+                if (leading || center) {\n+                    \/\/ The hit is an index counted from the beginning, but we need\n+                    \/\/ the opposite, i.e. an index counted from the end.  However,\n+                    \/\/ the Text node does not support wrapped line layout in the\n+                    \/\/ reverse direction, starting at the bottom right corner.\n+\n+                    \/\/ We'll simulate by assuming the index will be a similar\n+                    \/\/ number, then back up 10 characters just to add some slop.\n+                    \/\/ For example, the ending lines might pack tighter than the\n+                    \/\/ beginning lines, and therefore fit a higher number of\n+                    \/\/ characters.\n+                    int ind = Math.max(0, len - hit - 10);\n+                    if (ind > 0 && wordTrim) {\n@@ -555,22 +650,3 @@\n-                    centerLen = ind + eLen;\n-                } \/\/ else: text node wraps at words, so wordTrim is not needed here.\n-                result = result.substring(0, ind) + ellipsis;\n-                truncated = true;\n-            }\n-\n-            if (leading || center) {\n-                \/\/ The hit is an index counted from the beginning, but we need\n-                \/\/ the opposite, i.e. an index counted from the end.  However,\n-                \/\/ the Text node does not support wrapped line layout in the\n-                \/\/ reverse direction, starting at the bottom right corner.\n-\n-                \/\/ We'll simulate by assuming the index will be a similar\n-                \/\/ number, then back up 10 characters just to add some slop.\n-                \/\/ For example, the ending lines might pack tighter than the\n-                \/\/ beginning lines, and therefore fit a higher number of\n-                \/\/ characters.\n-                int ind = Math.max(0, len - hit - 10);\n-                if (ind > 0 && wordTrim) {\n-                    int brInd = lastBreakCharIndex(text, ind + 1);\n-                    if (brInd >= 0) {\n-                        ind = brInd + 1;\n+                    if (center) {\n+                        \/\/ This is for the second part, i.e. from ellipsis to end of text.\n+                        result = result + text.substring(ind);\n@@ -578,4 +654,2 @@\n-                        brInd = firstBreakCharIndex(text, ind);\n-                        if (brInd >= 0) {\n-                            ind = brInd + 1;\n-                        }\n+                        result = ellipsis + text.substring(ind);\n+                        truncated = true;\n@@ -584,8 +658,0 @@\n-                if (center) {\n-                    \/\/ This is for the second part, i.e. from ellipsis to end of text.\n-                    result = result + text.substring(ind);\n-                } else {\n-                    result = ellipsis + text.substring(ind);\n-                    truncated = true;\n-                }\n-            }\n@@ -593,23 +659,10 @@\n-            \/\/ Step two, check if text still overflows after we added the ellipsis.\n-            \/\/ If so, remove one char or word at a time.\n-            while (true) {\n-                helper.setText(result);\n-                int hit2 = helper.hitTest(endPoint).getCharIndex();\n-                if (center && hit2 < centerLen) {\n-                    \/\/ No room for text after ellipsis. Maybe there is a newline\n-                    \/\/ here, and the next line falls outside the view.\n-                    if (hit2 > 0 && result.charAt(hit2-1) == '\\n') {\n-                        hit2--;\n-                    }\n-                    \/\/ should have used StringBuilder\n-                    result = text.substring(0, hit2) + ellipsis;\n-                    truncated = true;\n-                    break;\n-                } else if (hit2 > 0 && hit2 < result.length()) {\n-                    if (leading) {\n-                        int ind = eLen + 1; \/\/ Past ellipsis and first char.\n-                        if (wordTrim) {\n-                            int brInd = firstBreakCharIndex(result, ind);\n-                            if (brInd >= 0) {\n-                                ind = brInd + 1;\n-                            }\n+                \/\/ Step two, check if text still overflows after we added the ellipsis.\n+                \/\/ If so, remove one char or word at a time.\n+                while (true) {\n+                    helper.setText(result);\n+                    int hit2 = helper.hitTest(endPoint).getCharIndex();\n+                    if (center && hit2 < centerLen) {\n+                        \/\/ No room for text after ellipsis. Maybe there is a newline\n+                        \/\/ here, and the next line falls outside the view.\n+                        if (hit2 > 0 && result.charAt(hit2-1) == '\\n') {\n+                            hit2--;\n@@ -617,1 +670,2 @@\n-                        result = ellipsis + result.substring(ind);\n+                        \/\/ should have used StringBuilder\n+                        result = text.substring(0, hit2) + ellipsis;\n@@ -619,6 +673,9 @@\n-                    } else if (center) {\n-                        int ind = centerLen + 1; \/\/ Past ellipsis and first char.\n-                        if (wordTrim) {\n-                            int brInd = firstBreakCharIndex(result, ind);\n-                            if (brInd >= 0) {\n-                                ind = brInd + 1;\n+                        break;\n+                    } else if (hit2 > 0 && hit2 < result.length()) {\n+                        if (leading) {\n+                            int ind = eLen + 1; \/\/ Past ellipsis and first char.\n+                            if (wordTrim) {\n+                                int brInd = firstBreakCharIndex(result, ind);\n+                                if (brInd >= 0) {\n+                                    ind = brInd + 1;\n+                                }\n@@ -626,8 +683,9 @@\n-                        }\n-                        result = result.substring(0, centerLen) + result.substring(ind);\n-                    } else {\n-                        int ind = result.length() - eLen - 1; \/\/ Before last char and ellipsis.\n-                        if (wordTrim) {\n-                            int brInd = lastBreakCharIndex(result, ind);\n-                            if (brInd >= 0) {\n-                                ind = brInd;\n+                            result = ellipsis + result.substring(ind);\n+                            truncated = true;\n+                        } else if (center) {\n+                            int ind = centerLen + 1; \/\/ Past ellipsis and first char.\n+                            if (wordTrim) {\n+                                int brInd = firstBreakCharIndex(result, ind);\n+                                if (brInd >= 0) {\n+                                    ind = brInd + 1;\n+                                }\n@@ -635,0 +693,11 @@\n+                            result = result.substring(0, centerLen) + result.substring(ind);\n+                        } else {\n+                            int ind = result.length() - eLen - 1; \/\/ Before last char and ellipsis.\n+                            if (wordTrim) {\n+                                int brInd = lastBreakCharIndex(result, ind);\n+                                if (brInd >= 0) {\n+                                    ind = brInd;\n+                                }\n+                            }\n+                            result = result.substring(0, ind) + ellipsis;\n+                            truncated = true;\n@@ -636,2 +705,2 @@\n-                        result = result.substring(0, ind) + ellipsis;\n-                        truncated = true;\n+                    } else {\n+                        break;\n@@ -639,2 +708,0 @@\n-                } else {\n-                    break;\n@@ -643,0 +710,9 @@\n+            \/\/ RESTORE STATE\n+            helper.setWrappingWidth(DEFAULT_WRAPPING_WIDTH);\n+            helper.setLineSpacing(DEFAULT_LINE_SPACING);\n+            helper.setText(DEFAULT_TEXT);\n+            helper.setBoundsType(DEFAULT_BOUNDS_TYPE);\n+            textTruncated.set(truncated);\n+            return result;\n+        } finally {\n+            release(helper);\n@@ -644,7 +720,0 @@\n-        \/\/ RESTORE STATE\n-        helper.setWrappingWidth(DEFAULT_WRAPPING_WIDTH);\n-        helper.setLineSpacing(DEFAULT_LINE_SPACING);\n-        helper.setText(DEFAULT_TEXT);\n-        helper.setBoundsType(DEFAULT_BOUNDS_TYPE);\n-        textTruncated.set(truncated);\n-        return result;\n@@ -653,1 +722,0 @@\n-\n@@ -924,1 +992,0 @@\n-\n","filename":"modules\/javafx.controls\/src\/main\/java\/com\/sun\/javafx\/scene\/control\/skin\/Utils.java","additions":263,"deletions":196,"binary":false,"changes":459,"status":"modified"},{"patch":"@@ -218,1 +218,0 @@\n-    @Disabled(\"JDK-8347392\") \/\/ FIX\n@@ -230,1 +229,1 @@\n-            c.setDefaultButton(true);\n+            c.setDefaultButton(nextBoolean());\n@@ -249,1 +248,0 @@\n-    @Disabled(\"JDK-8347392\") \/\/ FIX\n@@ -258,2 +256,2 @@\n-            c.setAllowIndeterminate(true);\n-            c.setSelected(true);\n+            c.setAllowIndeterminate(nextBoolean());\n+            c.setSelected(nextBoolean());\n@@ -264,1 +262,0 @@\n-    @Disabled(\"JDK-8347392\") \/\/ FIX\n@@ -273,2 +270,2 @@\n-            c.getItems().setAll(\"ChoiceBox\", \"1\", \"2\");\n-            c.getSelectionModel().select(0);\n+            c.getItems().setAll(\"ChoiceBox\", \"1\", \"2\", \"3\");\n+            c.getSelectionModel().select(nextInt(4));\n@@ -332,1 +329,0 @@\n-    @Disabled(\"JDK-8347392\") \/\/ FIX\n@@ -341,1 +337,1 @@\n-            c.setVisited(true);\n+            c.setVisited(nextBoolean());\n@@ -346,1 +342,0 @@\n-    @Disabled(\"JDK-8347392\") \/\/ FIX\n@@ -450,1 +445,0 @@\n-    @Disabled(\"JDK-8347392\") \/\/ FIX\n@@ -595,1 +589,0 @@\n-    @Disabled(\"JDK-8347392\") \/\/ FIX\n@@ -605,0 +598,1 @@\n+            c.setWrapText(nextBoolean());\n@@ -635,1 +629,1 @@\n-    @Disabled(\"JDK-8347392\") \/\/ FIX\n+    @Disabled(\"JDK-8349255\") \/\/ FIX\n@@ -651,1 +645,0 @@\n-    @Disabled(\"JDK-8347392\") \/\/ FIX\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/javafx\/scene\/NodeInitializationStressTest.java","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"}]}