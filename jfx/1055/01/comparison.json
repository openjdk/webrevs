{"files":[{"patch":"@@ -287,2 +287,1 @@\n-            \/* Not need to check for compact as bidi disables the simple case *\/\n-            int gi = 0;\n+            \/* No need to check for compact as bidi disables the simple case *\/\n@@ -290,3 +289,2 @@\n-            while (runWidth > width) {\n-                float glyphWidth = positions[(gi+1)<<1] - positions[gi<<1];\n-                if (runWidth - glyphWidth <= width) {\n+            for (int gi = 0; gi < glyphCount; gi++) {\n+                if ((runWidth - positions[gi<<1]) <= width) {\n@@ -295,2 +293,0 @@\n-                runWidth -= glyphWidth;\n-                gi++;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/TextRun.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,214 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.text;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+\n+import javafx.application.Platform;\n+import javafx.stage.Stage;\n+import javafx.scene.Scene;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.text.Font;\n+import javafx.scene.text.Text;\n+import javafx.application.Application;\n+\n+import java.io.OutputStream;\n+import java.io.PrintStream;\n+import java.util.Timer;\n+import java.util.TimerTask;\n+\n+public class ArabicWrappingTest extends Application {\n+\n+    static PrintStream systemErr = System.err;\n+    static SystemErrFilter systemErrFilter;\n+\n+    static class SystemErrFilter extends PrintStream {\n+        private boolean foundException = false;\n+        private String exceptionMsg;\n+\n+        public SystemErrFilter(OutputStream out) {\n+            super(out);\n+        }\n+\n+        @Override\n+        public synchronized void print(String s) {\n+            System.out.flush();\n+            if (s.indexOf(\"Exception\") >= 0) {\n+                foundException = true;\n+                exceptionMsg = s;\n+            }\n+            super.print(s);\n+        }\n+\n+        boolean checkException() {\n+            return foundException;\n+        }\n+\n+        String getExceptionString() {\n+            return exceptionMsg;\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void initFX() {\n+        systemErrFilter = new SystemErrFilter(System.err);\n+        System.setErr(systemErrFilter);\n+        new Thread(() -> {\n+            Application.launch(ArabicWrappingTest.class);\n+        }).start();\n+    }\n+\n+    @AfterClass\n+    public static void exitTest() {\n+        Platform.exit();\n+    }\n+\n+    static volatile boolean testDone = false;\n+    static volatile boolean testPassed;\n+\n+    @Test\n+    public void testWrapping() {\n+\n+       while (!ArabicWrappingTest.testDone) {\n+           try {\n+               Thread.sleep(2000);\n+           } catch (Exception e) {\n+           }\n+       }\n+\n+       assertTrue(ArabicWrappingTest.testPassed);\n+    }\n+\n+    public static void main(String[] args) {\n+        initFX();\n+        try {\n+            wrappingTest.testWrapping();\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+        } finally {\n+            exitTest();\n+        }\n+    }\n+\n+    static final int MAX_WW = 200;\n+    static final int MIN_WW =   5;\n+\n+    static String text = \"Arabic \\u0643\\u064e\\u062a\\u064e\\u0628\\u064e\\u200e kataba.\";\n+    static ArabicWrappingTest wrappingTest;\n+\n+    @Override\n+    public void start(Stage stage) throws Exception {\n+        wrappingTest = this;\n+        fontNames = Font.getFontNames().toArray(new String[0]);\n+        maxFonts = fontNames.length > MAXFONTS ? MAXFONTS : fontNames.length;\n+        String[] tmpFonts = new String[maxFonts+4];\n+        tmpFonts[0] = \"System Regular\";\n+        tmpFonts[1] = \"SansSerif Regular\";\n+        tmpFonts[2] = \"Serif Regular\";\n+        tmpFonts[3] = \"Monospaced Regular\";\n+        System.arraycopy(fontNames, 0, tmpFonts, 4, maxFonts);\n+        fontNames = tmpFonts;\n+        maxFonts = fontNames.length;\n+        textNode = new Text(text);\n+        font = new Font(fontNames[fontIndex++], 12);\n+        System.out.println(font); System.out.flush();\n+        textNode.setFont(font);\n+        textNode.setWrappingWidth(MAX_WW);\n+\n+        HBox hbox = new HBox();\n+        hbox.getChildren().addAll(textNode);\n+        Scene scene = new Scene(hbox);\n+        stage.setScene(scene);\n+        stage.setTitle(\"Test bidi text wrapping\");\n+        stage.setWidth(MAX_WW+50);\n+        stage.setHeight(600);\n+        stage.show();\n+\n+        timer = new Timer();\n+        timer.schedule(new TimerTask() {\n+            @Override\n+            public void run() {\n+                Platform.runLater(wrappingTest::updateWrapWidth);\n+            }}, 1000, 10);\n+    }\n+\n+    static String[] fontNames;\n+    static int fontIndex = 0;\n+    static final int MAXFONTS = 12; \/\/ else test takes too long\n+    static int maxFonts;\n+    Timer timer;\n+    Text textNode;\n+    boolean shrink = true;\n+    Font font;\n+\n+    boolean nextFont() {\n+        if (fontIndex >= maxFonts) {\n+            return false;\n+        } else {\n+            font = new Font(fontNames[fontIndex++], 12);\n+            textNode.setFont(font);\n+            System.out.println(\"font=\"+font+\" fonts to go = \" + (maxFonts-fontIndex));\n+            System.out.flush();\n+            return true;\n+        }\n+    }\n+\n+    void updateWrapWidth() {\n+\n+        if ((systemErrFilter != null) && systemErrFilter.checkException()) {\n+            timer.cancel();\n+            System.setErr(systemErr);\n+            System.err.println(\"Exception with font \" + font);\n+            System.err.print(systemErrFilter.getExceptionString());\n+            ArabicWrappingTest.testPassed = false;\n+            ArabicWrappingTest.testDone = true;\n+            return;\n+        }\n+\n+        double cww = textNode.getWrappingWidth();\n+        double delta = (shrink) ? -1 : 1;\n+        if (cww < MIN_WW) {\n+           shrink = false;\n+        }\n+        if (cww > MAX_WW) {\n+           if (!nextFont()) {\n+               timer.cancel();\n+               System.setErr(systemErr);\n+               ArabicWrappingTest.testPassed = true;\n+               ArabicWrappingTest.testDone = true;\n+               return;\n+           } else {\n+               shrink = true;\n+               cww = MAX_WW;\n+               delta = -1;\n+           }\n+        }\n+       textNode.setWrappingWidth(cww+delta);\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/text\/ArabicWrappingTest.java","additions":214,"deletions":0,"binary":false,"changes":214,"status":"added"}]}