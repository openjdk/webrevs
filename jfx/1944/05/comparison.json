{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates.\n@@ -75,1 +75,1 @@\n-            StyledOutput out = StyledOutput.forPlainText();\n+            StyledOutput out = StyledOutput.forPlainText(getLineEnding());\n","filename":"apps\/samples\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/CodeCellTextModel.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates.\n@@ -73,1 +73,1 @@\n-            StyledOutput out = StyledOutput.forPlainText();\n+            StyledOutput out = StyledOutput.forPlainText(getLineEnding());\n","filename":"apps\/samples\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/TextCellTextModel.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import com.sun.jfx.incubator.scene.control.richtext.util.RichUtils;\n+import jfx.incubator.scene.control.richtext.LineEnding;\n@@ -34,1 +36,1 @@\n-    private String newline = System.getProperty(\"line.separator\");\n+    private final String newline;\n@@ -36,10 +38,3 @@\n-    public StringBuilderStyledOutput(int initialCapacity) {\n-        sb = new StringBuilder(initialCapacity);\n-    }\n-\n-    public StringBuilderStyledOutput() {\n-        this(1024);\n-    }\n-\n-    public void setLineSeparator(String s) {\n-        newline = s;\n+    public StringBuilderStyledOutput(LineEnding lineEnding) {\n+        sb = new StringBuilder(1024);\n+        newline = RichUtils.getLineEnding(lineEnding);\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/StringBuilderStyledOutput.java","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+import jfx.incubator.scene.control.richtext.LineEnding;\n@@ -170,0 +171,11 @@\n+    public static String getLineEnding(LineEnding v) {\n+        if(v == null) {\n+            return System.getProperty(\"line.separator\");\n+        }\n+        return switch(v) {\n+        case CR -> \"\\r\";\n+        case CRLF -> \"\\r\\n\";\n+        case LF -> \"\\n\";\n+        };\n+    }\n+\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/util\/RichUtils.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import javafx.beans.property.SimpleObjectProperty;\n@@ -89,0 +90,1 @@\n+    private SimpleObjectProperty<LineEnding> lineEnding;\n@@ -118,0 +120,3 @@\n+        if (m != null) {\n+            m.setLineEnding(getLineEnding());\n+        }\n@@ -428,2 +433,1 @@\n-        try (StringBuilderStyledOutput out = new StringBuilderStyledOutput()) {\n-            out.setLineSeparator(\"\\n\");\n+        try (StringBuilderStyledOutput out = new StringBuilderStyledOutput(m.getLineEnding())) {\n@@ -452,0 +456,37 @@\n+\n+    \/**\n+     * Specifies the line ending characters.\n+     * A {@code null} value results in the platform line ending as reported by\n+     * the {@code line.separator} system property.\n+     * <p>\n+     * Modifying this property causes corresponding update in the underlying model, if the latter is not {@code null}.\n+     *\n+     * @return the line ending property\n+     * @since 26\n+     * @defaultValue null\n+     *\/\n+    public final ObjectProperty<LineEnding> lineEndingProperty() {\n+        if (lineEnding == null) {\n+            lineEnding = new SimpleObjectProperty<>(this, \"lineEnding\") {\n+                @Override\n+                protected void invalidated() {\n+                    StyledTextModel m = getModel();\n+                    if (m != null) {\n+                        m.setLineEnding(get());\n+                    }\n+                }\n+            };\n+        }\n+        return lineEnding;\n+    }\n+\n+    public final LineEnding getLineEnding() {\n+        if (lineEnding == null) {\n+            return null;\n+        }\n+        return lineEnding.get();\n+    }\n+\n+    public final void setLineEnding(LineEnding v) {\n+        lineEndingProperty().set(v);\n+    }\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/CodeArea.java","additions":43,"deletions":2,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jfx.incubator.scene.control.richtext;\n+\n+\/**\n+ * Specifies line separator (line ending) characters.\n+ *\n+ * @since 26\n+ *\/\n+public enum LineEnding {\n+    \/** Classic Mac OS *\/\n+    CR,\n+    \/** Windows *\/\n+    CRLF,\n+    \/** macOS\/Unix *\/\n+    LF\n+}\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/LineEnding.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -1454,3 +1454,1 @@\n-        \/\/ TODO JDK-8370140 (line separator property)\n-        String lineSeparator = System.getProperty(\"line.separator\");\n-\n+        String lineSeparator = RichUtils.getLineEnding(m.getLineEnding());\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/RichTextArea.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n@@ -33,0 +33,1 @@\n+import com.sun.jfx.incubator.scene.control.richtext.util.RichUtils;\n@@ -64,1 +65,1 @@\n-        StringBuilderStyledOutput out = new StringBuilderStyledOutput();\n+        StringBuilderStyledOutput out = new StringBuilderStyledOutput(m.getLineEnding());\n@@ -71,2 +72,1 @@\n-        Charset charset = Charset.forName(\"utf-8\");\n-        byte[] newline = System.getProperty(\"line.separator\").getBytes(charset);\n+        byte[] newline = RichUtils.getLineEnding(m.getLineEnding()).getBytes(StandardCharsets.UTF_8);\n@@ -83,1 +83,1 @@\n-                    byte[] b = text.getBytes(charset);\n+                    byte[] b = text.getBytes(StandardCharsets.UTF_8);\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/model\/PlainTextFormatHandler.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import jfx.incubator.scene.control.richtext.LineEnding;\n@@ -58,1 +59,11 @@\n-        return new StringBuilderStyledOutput();\n+        return new StringBuilderStyledOutput(null);\n+    }\n+\n+    \/**\n+     * Creates an instance of a plain text StyledOutput with the specified line ending characters.\n+     * @param lineEnding the line ending characters\n+     * @return the instance of a plain text StyledOutput\n+     * @since 26\n+     *\/\n+    public static StyledOutput forPlainText(LineEnding lineEnding) {\n+        return new StringBuilderStyledOutput(lineEnding);\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/model\/StyledOutput.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+import jfx.incubator.scene.control.richtext.LineEnding;\n@@ -287,0 +288,1 @@\n+    private LineEnding lineEnding;\n@@ -1010,0 +1012,22 @@\n+\n+    \/**\n+     * Specifies the line ending characters.\n+     * A {@code null} value results in the platform line ending as reported by\n+     * the {@code line.separator} system property.\n+     *\n+     * @return the line ending value\n+     * @defaultValue null\n+     * @since 26\n+     *\/\n+    public final LineEnding getLineEnding() {\n+        return lineEnding;\n+    }\n+\n+    \/**\n+     * Sets the line ending characters.\n+     * @param value the line ending value, can be null\n+     * @since 26\n+     *\/\n+    public final void setLineEnding(LineEnding value) {\n+        lineEnding = value;\n+    }\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/model\/StyledTextModel.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import jfx.incubator.scene.control.richtext.LineEnding;\n@@ -222,0 +223,1 @@\n+        control.setLineEnding(LineEnding.LF);\n@@ -266,0 +268,39 @@\n+\n+    @Test\n+    public void lineEnding() {\n+        String nl = System.getProperty(\"line.separator\");\n+        control.setText(\"1\\n2\\n3\");\n+        assertEquals(3, control.getParagraphCount());\n+        t(null, \"1\" + nl + \"2\" + nl + \"3\");\n+        t(LineEnding.CR, \"1\\r2\\r3\");\n+        t(LineEnding.CRLF, \"1\\r\\n2\\r\\n3\");\n+        t(LineEnding.LF, \"1\\n2\\n3\");\n+    }\n+\n+    private void t(LineEnding lineEnding, String expected) {\n+        control.setLineEnding(lineEnding);\n+        assertEquals(lineEnding, control.getLineEnding());\n+        assertEquals(lineEnding, control.lineEndingProperty().get());\n+        assertEquals(expected, control.getText());\n+        control.select(TextPos.ZERO, control.getDocumentEnd());\n+        control.copy();\n+        assertEquals(expected, Clipboard.getSystemClipboard().getString());\n+    }\n+\n+    @Test\n+    public void setText() {\n+        String expected = \"1\\n2\\n3\\n4\";\n+        String[] variants = {\n+            \"1\\n2\\n3\\n4\",\n+            \"1\\r2\\r3\\r4\",\n+            \"1\\r\\n2\\r\\n3\\r\\n4\",\n+            \"1\\r2\\n3\\r\\n4\"\n+        };\n+        control.setLineEnding(LineEnding.LF);\n+        for (int i = 0; i < variants.length; i++) {\n+            String s = variants[i];\n+            control.setText(s);\n+            String text = control.getText();\n+            assertEquals(expected, text, \"variant=\" + i);\n+        }\n+    }\n","filename":"modules\/jfx.incubator.richtext\/src\/test\/java\/test\/jfx\/incubator\/scene\/control\/richtext\/CodeAreaTest.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+import jfx.incubator.scene.control.richtext.LineEnding;\n@@ -64,0 +65,1 @@\n+import jfx.incubator.scene.control.richtext.model.StyledTextModel;\n@@ -82,0 +84,1 @@\n+    private static final String NL = System.getProperty(\"line.separator\");\n@@ -339,2 +342,21 @@\n-        String nl = System.getProperty(\"line.separator\");\n-        assertEquals(nl + \"4\", Clipboard.getSystemClipboard().getString());\n+        assertEquals(NL + \"4\", Clipboard.getSystemClipboard().getString());\n+    }\n+\n+    @Test\n+    public void copyLineEnding() {\n+        control.appendText(\"1\\n2\\n3\");\n+        assertEquals(3, control.getParagraphCount());\n+        t(null, \"1\" + NL + \"2\" + NL + \"3\");\n+        t(LineEnding.CR, \"1\\r2\\r3\");\n+        t(LineEnding.CRLF, \"1\\r\\n2\\r\\n3\");\n+        t(LineEnding.LF, \"1\\n2\\n3\");\n+    }\n+\n+    private void t(LineEnding lineEnding, String expected) {\n+        StyledTextModel m = control.getModel();\n+        m.setLineEnding(lineEnding);\n+        assertEquals(lineEnding, m.getLineEnding());\n+        assertEquals(expected, text());\n+        control.select(TextPos.ZERO, control.getDocumentEnd());\n+        control.copy();\n+        assertEquals(expected, Clipboard.getSystemClipboard().getString());\n","filename":"modules\/jfx.incubator.richtext\/src\/test\/java\/test\/jfx\/incubator\/scene\/control\/richtext\/RichTextAreaTest.java","additions":24,"deletions":2,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jfx.incubator.scene.control.richtext.LineEnding;\n@@ -43,0 +44,1 @@\n+import test.jfx.incubator.scene.control.richtext.support.RTUtil;\n@@ -275,0 +277,15 @@\n+\n+    @Test\n+    public void lineEnding() {\n+        String nl = System.getProperty(\"line.separator\");\n+        RichTextModel m = createModel(\"1\\n2\\n3\");\n+        assertEquals(3, m.size());\n+        m.setLineEnding(null);\n+        assertEquals(\"1\" + nl + \"2\" + nl + \"3\", RTUtil.getText(m));\n+        m.setLineEnding(LineEnding.CR);\n+        assertEquals(\"1\\r2\\r3\", RTUtil.getText(m));\n+        m.setLineEnding(LineEnding.CRLF);\n+        assertEquals(\"1\\r\\n2\\r\\n3\", RTUtil.getText(m));\n+        m.setLineEnding(LineEnding.LF);\n+        assertEquals(\"1\\n2\\n3\", RTUtil.getText(m));\n+    }\n","filename":"modules\/jfx.incubator.richtext\/src\/test\/java\/test\/jfx\/incubator\/scene\/control\/richtext\/model\/TestRichTextModel.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jfx.incubator.scene.control.richtext.model.StyledTextModel;\n@@ -78,0 +79,21 @@\n+    \/**\n+     * Extracts plain text from the supplied StyledTextModel, using {@code write(DataFormat.PLAIN_TEXT)} method.\n+     *\n+     * @param model the model\n+     * @return the plain text\n+     *\/\n+    public static String getText(StyledTextModel model) {\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        try {\n+            try {\n+                model.write(null, DataFormat.PLAIN_TEXT, out);\n+                byte[] b = out.toByteArray();\n+                return new String(b, StandardCharsets.UTF_8);\n+            } finally {\n+                out.close();\n+            }\n+        } catch (IOException e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n","filename":"modules\/jfx.incubator.richtext\/src\/test\/java\/test\/jfx\/incubator\/scene\/control\/richtext\/support\/RTUtil.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"}]}