{"files":[{"patch":"@@ -37,1 +37,0 @@\n-#import \"GlassTouches.h\"\n@@ -754,3 +753,0 @@\n-            \/\/ Abort listerning to global touch input events\n-            [GlassTouches terminate];\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassApplication.m","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#import <Cocoa\/Cocoa.h>\n-#import <jni.h>\n-\n-#import \"GlassViewDelegate.h\"\n-\n-\/\/ Helper class to handle system wide touch input events\n-@interface GlassTouches : NSObject\n-{\n-@private\n-    GlassViewDelegate*      curConsumer;\n-    CFMachPortRef           eventTap;\n-    CFRunLoopSourceRef      runLoopSource;\n-    NSMutableDictionary*    touches;\n-    jlong                   lastTouchId;\n-}\n-\n-+ (void)startTracking:(GlassViewDelegate *)delegate;\n-+ (void)stopTracking:(GlassViewDelegate *)delegate;\n-+ (void)terminate;\n-\n-@end\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassTouches.h","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,451 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#import \"common.h\"\n-#import \"com_sun_glass_events_TouchEvent.h\"\n-\n-#import \"GlassMacros.h\"\n-#import \"GlassTouches.h\"\n-#import \"GlassKey.h\"\n-#import \"GlassHelper.h\"\n-#import \"GlassStatics.h\"\n-\n-\n-\/\/#define VERBOSE\n-#ifndef VERBOSE\n-    #define LOG(MSG, ...)\n-#else\n-    #define LOG(MSG, ...) GLASS_LOG(MSG, ## __VA_ARGS__);\n-#endif\n-\n-\n-static GlassTouches* glassTouches = nil;\n-static BOOL useEventTap = NO;\n-\n-\n-@interface GlassTouches (hidden)\n-\n-- (void)releaseTouches;\n-\n-- (void)terminateImpl;\n-\n-- (void)enableTouchInputEventTap;\n-\n-- (void)sendJavaTouchEvent:(NSEvent *)theEvent;\n-- (void)notifyTouch:(JNIEnv*)env    identity:(const id)identity\n-                                    phase:(NSUInteger)phase\n-                                    pos:(const NSPoint*)pos;\n-@end\n-\n-\n-static jint getTouchStateFromPhase(NSUInteger phase)\n-{\n-    switch (phase)\n-    {\n-        case NSTouchPhaseBegan:\n-            return com_sun_glass_events_TouchEvent_TOUCH_PRESSED;\n-        case NSTouchPhaseMoved:\n-            return com_sun_glass_events_TouchEvent_TOUCH_MOVED;\n-        case NSTouchPhaseStationary:\n-            return com_sun_glass_events_TouchEvent_TOUCH_STILL;\n-        case NSTouchPhaseEnded:\n-        case NSTouchPhaseCancelled:\n-            return com_sun_glass_events_TouchEvent_TOUCH_RELEASED;\n-    }\n-    return 0;\n-}\n-\n-\n-static BOOL isTouchEnded(NSUInteger phase)\n-{\n-    return phase == NSTouchPhaseEnded || phase == NSTouchPhaseCancelled;\n-}\n-\n-\n-static BOOL hasTouchWithIdentity(const id identity, const NSSet* touchPoints)\n-{\n-    for (const NSTouch* touch in touchPoints)\n-    {\n-        if ([identity isEqual:touch.identity])\n-        {\n-            return YES;\n-        }\n-    }\n-    return NO;\n-}\n-\n-\n-typedef struct\n-{\n-    jlong touchId;\n-    jfloat x;\n-    jfloat y;\n-} TouchPoint;\n-\n-\n-static CGEventRef listenTouchEvents(CGEventTapProxy proxy, CGEventType type,\n-                             CGEventRef event, void* refcon)\n-{\n-    if (type == kCGEventTapDisabledByTimeout ||\n-        type == kCGEventTapDisabledByUserInput)\n-    {\n-        \/\/ OS may disable event tap if it handles events too slowly\n-        \/\/ or for some other reason based on user input.\n-        \/\/ This is undesirable, so enable event tap after such a reset.\n-        [glassTouches enableTouchInputEventTap];\n-        LOG(\"TOUCHES: listenTouchEvents: re-enable event tap, type = %d\\n\", type);\n-        return event;\n-    }\n-\n-    if (type == NSEventTypeGesture)\n-    {\n-        LOG(\"TOUCHES: listenTouchEvents: process NSEventTypeGesture\\n\");\n-        NSEvent* theEvent = [NSEvent eventWithCGEvent:event];\n-        if (theEvent)\n-        {\n-            if (glassTouches)\n-            {\n-                [glassTouches sendJavaTouchEvent:theEvent];\n-            }\n-        }\n-    } else {\n-        LOG(\"TOUCHES: listenTouchEvents: unknown event ignored, type = %d\\n\", type);\n-    }\n-\n-    return event;\n-}\n-\n-\n-@implementation GlassTouches\n-\n-+ (void)startTracking:(GlassViewDelegate *)delegate\n-{\n-    if (!glassTouches)\n-    {\n-        glassTouches = [[GlassTouches alloc] init];\n-    }\n-\n-    if (glassTouches)\n-    {\n-        glassTouches->curConsumer = delegate;\n-    }\n-\n-    LOG(\"TOUCHES: startTracking: delegate=%p\\n\", glassTouches->curConsumer);\n-}\n-\n-+ (void)stopTracking:(GlassViewDelegate *)delegate\n-{\n-    if (!glassTouches || glassTouches->curConsumer != delegate)\n-    {\n-        return;\n-    }\n-\n-    \/\/ Keep updating java touch point counter, just have no view to notify.\n-    glassTouches->curConsumer = nil;\n-\n-    LOG(\"TOUCHES: stopTracking: delegate=%p\\n\", glassTouches->curConsumer);\n-}\n-\n-+ (void)terminate\n-{\n-    \/\/ Should be called right after Application's run loop terminate\n-    [glassTouches terminateImpl];\n-    glassTouches = nil;\n-}\n-\n-- (id)init\n-{\n-    useEventTap = YES;\n-    if (@available(macOS 10.15, *)) {\n-        useEventTap = NO;\n-    }\n-\n-    self = [super init];\n-    if (self != nil)\n-    {\n-        self->curConsumer   = nil;\n-        self->eventTap      = nil;\n-        self->runLoopSource = nil;\n-        self->touches       = nil;\n-        self->lastTouchId   = 0;\n-\n-        if (useEventTap) {\n-            \/\/\n-            \/\/ Notes after fixing JDK-8097372:\n-            \/\/\n-            \/\/  Don't use NSMachPort and NSRunLoop to integrate CFMachPortRef\n-            \/\/  instance into run loop.\n-            \/\/\n-            \/\/ Ignoring the above \"don't\"s results into performance degradation\n-            \/\/ referenced in the bug.\n-            \/\/\n-\n-            self->eventTap = CGEventTapCreate(kCGHIDEventTap,\n-                                              kCGHeadInsertEventTap,\n-                                              kCGEventTapOptionListenOnly,\n-                                              CGEventMaskBit(NSEventTypeGesture),\n-                                              listenTouchEvents, nil);\n-\n-            LOG(\"TOUCHES: eventTap=%p\\n\", self->eventTap);\n-\n-            if (self->eventTap)\n-            {   \/\/ Create a run loop source.\n-                self->runLoopSource = CFMachPortCreateRunLoopSource(\n-                                                            kCFAllocatorDefault,\n-                                                            self->eventTap, 0);\n-\n-                LOG(\"TOUCHES: runLoopSource=%p\\n\", self->runLoopSource);\n-\n-                \/\/ Add to the current run loop.\n-                CFRunLoopAddSource(CFRunLoopGetCurrent(), self->runLoopSource,\n-                                   kCFRunLoopCommonModes);\n-            }\n-        }\n-    }\n-    return self;\n-}\n-\n-@end\n-\n-\n-@implementation GlassTouches (hidden)\n-- (void)terminateImpl\n-{\n-    if (useEventTap) {\n-        LOG(\"TOUCHES: terminateImpl eventTap=%p runLoopSource=%p\\n\", self->eventTap,\n-            self->runLoopSource);\n-\n-        if (self->runLoopSource)\n-        {\n-            CFRunLoopRemoveSource(CFRunLoopGetCurrent(), self->runLoopSource,\n-                                  kCFRunLoopCommonModes);\n-            CFRelease(self->runLoopSource);\n-            self->runLoopSource = nil;\n-        }\n-\n-        if (self->eventTap)\n-        {\n-            CFRelease(self->eventTap);\n-            self->eventTap = nil;\n-        }\n-    }\n-    [self releaseTouches];\n-}\n-\n-- (void)enableTouchInputEventTap\n-{\n-    if (useEventTap) {\n-        CGEventTapEnable(self->eventTap, true);\n-    }\n-}\n-\n-- (void)sendJavaTouchEvent:(NSEvent *)theEvent\n-{\n-    jint modifiers = GetJavaModifiers(theEvent);\n-\n-    const NSSet* touchPoints =\n-            [theEvent touchesMatchingPhase:NSTouchPhaseAny inView:nil];\n-\n-    \/\/\n-    \/\/ Known issues with OSX touch input:\n-    \/\/ - multiple 'NSTouchPhaseBegan' for the same touch point;\n-    \/\/ - missing 'NSTouchPhaseEnded' for released touch points\n-    \/\/  (JDK-8127622, JDK-8127136);\n-    \/\/\n-\n-    \/\/\n-    \/\/ Find just released touch points that are not in the cache already.\n-    \/\/ Don't send TouchEvent#TOUCH_RELEASED for these touch points.\n-    \/\/\n-    jint noReleaseTouchPointCount = 0;\n-    for (NSTouch* touch in touchPoints)\n-    {\n-        NSUInteger phase = touch.phase;\n-        BOOL isPhaseEnded = isTouchEnded(phase);\n-\n-        if (!isPhaseEnded)\n-        {\n-            continue;\n-        }\n-\n-        if (self->touches == nil ||\n-            [self->touches objectForKey:touch.identity] == nil)\n-        {\n-            ++noReleaseTouchPointCount;\n-        }\n-    }\n-\n-    \/\/\n-    \/\/ Find cached touch points that are not in the curent set of touch points.\n-    \/\/ Should send TouchEvent#TOUCH_RELEASED for these touch points.\n-    \/\/\n-    NSMutableArray* releaseTouchIds = nil;\n-    if (self->touches != nil)\n-    {\n-        for (id identity in self->touches)\n-        {\n-            if (!hasTouchWithIdentity(identity, touchPoints))\n-            {\n-                if (!releaseTouchIds)\n-                {\n-                    releaseTouchIds = [NSMutableArray array];\n-                }\n-                [releaseTouchIds addObject:identity];\n-            }\n-        }\n-    }\n-\n-    const jint touchPointCount =\n-            (jint)touchPoints.count\n-                - (jint)noReleaseTouchPointCount  + (jint)(releaseTouchIds == nil ? 0 : releaseTouchIds.count);\n-    if (!touchPointCount)\n-    {\n-        return;\n-    }\n-\n-    GET_MAIN_JENV;\n-    const jclass jGestureSupportClass = [GlassHelper ClassForName:\"com.sun.glass.ui.mac.MacGestureSupport\"\n-                                                          withEnv:env];\n-    if (jGestureSupportClass)\n-    {\n-        (*env)->CallStaticVoidMethod(env, jGestureSupportClass,\n-                                     javaIDs.GestureSupport.notifyBeginTouchEvent,\n-                                     [self->curConsumer jView], modifiers,\n-                                     touchPointCount);\n-    }\n-    GLASS_CHECK_EXCEPTION(env);\n-\n-    if (self->touches == nil && touchPointCount)\n-    {\n-        self->touches = [[NSMutableDictionary alloc] init];\n-    }\n-\n-    if (releaseTouchIds != nil)\n-    {\n-        for (id identity in releaseTouchIds)\n-        {\n-            [self notifyTouch:env\n-                            identity:identity\n-                            phase:NSTouchPhaseEnded\n-                            pos:nil];\n-        }\n-    }\n-\n-    for (NSTouch* touch in touchPoints)\n-    {\n-        if (![touch respondsToSelector:@selector(type)]\n-            || (NSInteger) [touch performSelector:@selector(type)] == 1 \/* NSTouchTypeIndirect *\/) {\n-\n-            const NSPoint pos = touch.normalizedPosition;\n-            [self notifyTouch:env\n-                            identity:touch.identity\n-                            phase:touch.phase\n-                            pos:&pos];\n-        }\n-    }\n-\n-    if (jGestureSupportClass)\n-    {\n-        (*env)->CallStaticVoidMethod(env, jGestureSupportClass,\n-                                     javaIDs.GestureSupport.notifyEndTouchEvent,\n-                                     [self->curConsumer jView]);\n-    }\n-    GLASS_CHECK_EXCEPTION(env);\n-\n-    if ([self->touches count] == 0)\n-    {\n-        [self releaseTouches];\n-        self->lastTouchId = 0;\n-    }\n-}\n-\n-- (void)notifyTouch:(JNIEnv*)env identity:(const id)identity phase:(NSUInteger)phase\n-                    pos:(const NSPoint*)pos;\n-{\n-    const BOOL isPhaseEnded = isTouchEnded(phase);\n-\n-    TouchPoint tp;\n-    NSValue* ctnr = [self->touches objectForKey:identity];\n-    if (ctnr == nil)\n-    {\n-        if (isPhaseEnded)\n-        {\n-            return;\n-        }\n-        tp.touchId = ++(self->lastTouchId);\n-\n-        if (phase != NSTouchPhaseBegan)\n-        {   \/\/ Adjust 'phase'. By some reason OS X sometimes doesn't send\n-            \/\/ 'NSTouchPhaseBegan' for the just appeared touch point.\n-            phase = NSTouchPhaseBegan;\n-        }\n-    }\n-    else\n-    {\n-        [ctnr getValue:&tp];\n-\n-        if (phase == NSTouchPhaseBegan)\n-        {   \/\/ Adjust 'phase'. This is needed as OS X sometimes sends\n-            \/\/ multiple 'NSTouchPhaseBegan' for the same touch point.\n-            phase = NSTouchPhaseStationary;\n-        }\n-    }\n-\n-    if (pos)\n-    {   \/\/ update stored position\n-        tp.x = (jfloat)pos->x;\n-        tp.y = (jfloat)pos->y;\n-    }\n-\n-    if (isPhaseEnded)\n-    {\n-        [self->touches removeObjectForKey:identity];\n-    }\n-    else\n-    {\n-        ctnr = [NSValue valueWithBytes:&tp objCType:@encode(TouchPoint)];\n-        [self->touches setObject:ctnr forKey:identity];\n-    }\n-\n-    const jclass jGestureSupportClass = [GlassHelper ClassForName:\"com.sun.glass.ui.mac.MacGestureSupport\"\n-                                                          withEnv:env];\n-    if (jGestureSupportClass)\n-    {\n-        (*env)->CallStaticVoidMethod(env, jGestureSupportClass,\n-                                     javaIDs.GestureSupport.notifyNextTouchEvent,\n-                                     [self->curConsumer jView],\n-                                     getTouchStateFromPhase(phase),\n-                                     tp.touchId, tp.x, tp.y);\n-    }\n-    GLASS_CHECK_EXCEPTION(env);\n-}\n-\n-- (void)releaseTouches\n-{\n-    [self->touches release];\n-    self->touches = nil;\n-}\n-\n-@end\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassTouches.m","additions":0,"deletions":451,"binary":false,"changes":451,"status":"deleted"},{"patch":"@@ -47,1 +47,0 @@\n-#import \"GlassTouches.h\"\n@@ -201,2 +200,0 @@\n-    [GlassTouches stopTracking:self];\n-\n@@ -419,1 +416,0 @@\n-            [GlassTouches startTracking:self];\n@@ -425,1 +421,0 @@\n-            [GlassTouches stopTracking:self];\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassViewDelegate.m","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#import \"GlassTouches.h\"\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassWindow+Overrides.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-#import \"GlassTouches.h\"\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassWindow.m","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}