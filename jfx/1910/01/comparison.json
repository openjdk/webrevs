{"files":[{"patch":"@@ -505,0 +505,5 @@\n+\/\/ Specifies whether to enable a screenshot on failing system tests that\n+\/\/ use the ScreenCaptureTestWatcher annotation\n+defineProperty(\"TEST_SCREENSHOT\", \"false\")\n+ext.IS_TEST_SCREENSHOT = Boolean.parseBoolean(TEST_SCREENSHOT);\n+\n@@ -2185,0 +2190,1 @@\n+        systemProperty 'test.screenshot', IS_TEST_SCREENSHOT\n","filename":"build.gradle","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,9 @@\n- * when a test fails.\n+ * when a test fails.  The function is disabled by default and must be enabled using the system property\n+ * by adding\n+ * {@code -Dtest.screenshot=true} command line argument.\n+ * <p>\n+ * Using Safari or Firefox, the screenshot {@code data:} URL can be pasted into the address bar\n+ * to view the image (other browsers like Chrome might not accept a long URL).\n+ * <p>\n+ * Alternatively, the base-64 encoded string can be copied to a text file and decoded with `base64 -d INPUT OUTPUT.png`\n+ * command or its equivalent.\n@@ -43,0 +51,3 @@\n+\n+    private static final String PROPERTY = \"test.screenshot\";\n+\n@@ -45,2 +56,3 @@\n-        \/\/ the data url can be pasted into Safari address bar to view the screenshot\n-        ScreenshotCapture.writeScreenshot();\n+        if (Boolean.getBoolean(PROPERTY)) {\n+            ScreenshotCapture.writeScreenshot();\n+        }\n","filename":"tests\/system\/src\/test\/java\/test\/util\/ScreenCaptureTestWatcher.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"}]}