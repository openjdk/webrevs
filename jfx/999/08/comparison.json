{"files":[{"patch":"@@ -85,1 +85,0 @@\n-def gtk2CCFlags = [ \"-Wno-deprecated-declarations\" ];\n@@ -87,1 +86,0 @@\n-def gtk2LinkFlags = [ ];\n@@ -90,29 +88,0 @@\n-\/\/ Create $buildDir\/linux_tools.properties file and load props from it\n-setupTools(\"linux_gtk2\",\n-    { propFile ->\n-        ByteArrayOutputStream results1 = new ByteArrayOutputStream();\n-        exec {\n-            commandLine(\"${toolchainDir}pkg-config\", \"--cflags\", \"gtk+-2.0\", \"gthread-2.0\", \"xtst\")\n-            setStandardOutput(results1);\n-        }\n-        propFile << \"cflagsGTK2=\" << results1.toString().trim() << \"\\n\";\n-\n-        ByteArrayOutputStream results3 = new ByteArrayOutputStream();\n-        exec {\n-            commandLine(\"${toolchainDir}pkg-config\", \"--libs\", \"gtk+-2.0\", \"gthread-2.0\", \"xtst\")\n-            setStandardOutput(results3);\n-        }\n-        propFile << \"libsGTK2=\" << results3.toString().trim()  << \"\\n\";\n-    },\n-    { properties ->\n-        def cflagsGTK2 = properties.getProperty(\"cflagsGTK2\")\n-        def libsGTK2 = properties.getProperty(\"libsGTK2\")\n-        if (cflagsGTK2 && libsGTK2) {\n-            gtk2CCFlags.addAll(cflagsGTK2.split(\" \"))\n-            gtk2LinkFlags.addAll(libsGTK2.split(\" \"))\n-        } else {\n-            throw new IllegalStateException(\"GTK2 development packages not found. If GTK2 packages are installed, please remove the build directory and try again.\")\n-        }\n-    }\n-)\n-\n@@ -219,1 +188,1 @@\n-LINUX.glass.variants = [\"glass\", \"glassgtk2\", \"glassgtk3\"]\n+LINUX.glass.variants = [\"glass\", \"glassgtk3\"]\n@@ -237,10 +206,0 @@\n-LINUX.glass.glassgtk2 = [:]\n-LINUX.glass.glassgtk2.nativeSource =  ft_gtk.getFiles()\n-LINUX.glass.glassgtk2.compiler = compiler\n-LINUX.glass.glassgtk2.ccFlags = IS_STATIC_BUILD ?\n-        [\"-fno-threadsafe-statics\", cppFlags, gtk2CCFlags].flatten() :\n-        [cppFlags, gtk2CCFlags, \"-Werror\"].flatten()\n-LINUX.glass.glassgtk2.linker = linker\n-LINUX.glass.glassgtk2.linkFlags = IS_STATIC_BUILD ? linkFlags : [linkFlags, gtk2LinkFlags].flatten()\n-LINUX.glass.glassgtk2.lib = \"glassgtk2\"\n-\n","filename":"buildSrc\/linux.gradle","additions":1,"deletions":42,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import java.lang.reflect.Method;\n@@ -54,0 +53,1 @@\n+\n@@ -56,2 +56,0 @@\n-    private static final String SWT_INTERNAL_CLASS =\n-            \"org.eclipse.swt.internal.gtk.OS\";\n@@ -59,9 +57,2 @@\n-    private static boolean gtk2WarningIssued = false;\n-    private static final String GTK2_ALREADY_LOADED_WARNING =\n-        \"WARNING: Found GTK 2 library already loaded\";\n-    private static final String GTK2_SPECIFIED_WARNING =\n-        \"WARNING: A command line option has enabled the GTK 2 library\";\n-    private static final String GTK2_FALLBACK_WARNING =\n-        \"WARNING: Using GTK 2 library because GTK 3 cannot be loaded \";\n-    private static final String GTK2_DEPRECATION_WARNING =\n-        \"WARNING: The JavaFX GTK 2 library is deprecated and will be removed in a future release\";\n+    private static final String GTK2_REMOVED_EXCEPTION =\n+        \"FATAL: The JavaFX GTK 2 library specified in \\\"jdk.gtk.version\\\" was removed and is no longer available.\";\n@@ -69,0 +60,2 @@\n+    private static final String GTK_INVALID_VERSION_EXCEPTION =\n+        \"FATAL: The JavaFX GTK %d library specified in \\\"jdk.gtk.version\\\" is invalid.\";\n@@ -71,15 +64,2 @@\n-        \/\/check for SWT-GTK lib presence\n-        @SuppressWarnings(\"removal\")\n-        Class<?> OS = AccessController.\n-                doPrivileged((PrivilegedAction<Class<?>>) () -> {\n-                    try {\n-                        return Class.forName(SWT_INTERNAL_CLASS, true,\n-                                ClassLoader.getSystemClassLoader());\n-                    } catch (Exception e) {}\n-                    try {\n-                        return Class.forName(SWT_INTERNAL_CLASS, true,\n-                                Thread.currentThread().getContextClassLoader());\n-                    } catch (Exception e) {}\n-                    return null;\n-                });\n-        if (OS != null) {\n+        String gtkVersion = System.getProperty(\"org.eclipse.swt.internal.gtk.version\");\n+        if (gtkVersion != null && gtkVersion.contains(\".\")) {\n@@ -87,26 +67,6 @@\n-            logger.fine(\"SWT-GTK library found. Try to obtain GTK version.\");\n-            @SuppressWarnings(\"removal\")\n-            Method method = AccessController.\n-                    doPrivileged((PrivilegedAction<Method>) () -> {\n-                        try {\n-                            return OS.getMethod(\"gtk_major_version\");\n-                        } catch (Exception e) {\n-                            return null;\n-                        }\n-                    });\n-            int ver = 0;\n-            if (method != null) {\n-                try {\n-                    ver = ((Number)method.invoke(OS)).intValue();\n-                } catch (Exception e) {\n-                    logger.warning(\"Method gtk_major_version() of \" +\n-                         \"the org.eclipse.swt.internal.gtk.OS class \" +\n-                         \"returns error. SWT GTK version cannot be detected. \" +\n-                         \"GTK3 will be used as default.\");\n-                    ver = 3;\n-                }\n-            }\n-            if (ver < 2 || ver > 3) {\n-                logger.warning(\"SWT-GTK uses unsupported major GTK version \"\n-                        + ver + \". GTK3 will be used as default.\");\n-                ver = 3;\n+            logger.fine(String.format(\"SWT-GTK library found. Gtk Version = %s.\", gtkVersion));\n+            String[] vers = gtkVersion.split(\"\\\\.\");\n+            int ver = Integer.parseInt(vers[0]);\n+\n+            if (ver != 3) {\n+                throw new UnsupportedOperationException(\"SWT-GTK uses unsupported major GTK version \" + ver + \" .\");\n@@ -114,0 +74,1 @@\n+\n@@ -115,5 +76,0 @@\n-            if (ver == 2 && !gtk2WarningIssued) {\n-                System.err.println(GTK2_ALREADY_LOADED_WARNING);\n-                System.err.println(GTK2_DEPRECATION_WARNING);\n-                gtk2WarningIssued = true;\n-            }\n@@ -165,1 +121,1 @@\n-        final int gtkVersion = forcedGtkVersion == 0 ?\n+        int gtkVersion = forcedGtkVersion == 0 ?\n@@ -168,7 +124,1 @@\n-                int ret = 0;\n-                if (\"3\".equals(v) || v.startsWith(\"3.\")) {\n-                    ret = 3;\n-                } else if (\"2\".equals(v) || v.startsWith(\"2.\")) {\n-                    ret = 2;\n-                }\n-                return ret;\n+                return Character.getNumericValue(v.charAt(0));\n@@ -177,4 +127,6 @@\n-        if (gtkVersion == 2 && !gtk2WarningIssued) {\n-            System.err.println(GTK2_SPECIFIED_WARNING);\n-            System.err.println(GTK2_DEPRECATION_WARNING);\n-            gtk2WarningIssued = true;\n+        if (gtkVersion != 3) {\n+            if (gtkVersion == 2) {\n+                throw new UnsupportedOperationException(GTK2_REMOVED_EXCEPTION);\n+            }\n+\n+            throw new UnsupportedOperationException(GTK_INVALID_VERSION_EXCEPTION.formatted(gtkVersion));\n@@ -207,10 +159,0 @@\n-            } else if (libraryToLoad == QUERY_LOAD_GTK2) {\n-                if (gtkVersionVerbose) {\n-                    System.out.println(\"Glass GTK library to load is glassgtk2\");\n-                }\n-                NativeLibLoader.loadLibrary(\"glassgtk2\");\n-                if (!gtk2WarningIssued) {\n-                    System.err.println(GTK2_FALLBACK_WARNING);\n-                    System.err.println(GTK2_DEPRECATION_WARNING);\n-                    gtk2WarningIssued = true;\n-                }\n@@ -223,1 +165,1 @@\n-                throw new UnsupportedOperationException(\"Internal Error\");\n+                throw new UnsupportedOperationException(\"Unable to load glass GTK library.\");\n@@ -228,5 +170,1 @@\n-        int version = _initGTK(gtkVersion, gtkVersionVerbose, overrideUIScale);\n-\n-        if (version == -1) {\n-            throw new RuntimeException(\"Error loading GTK libraries\");\n-        }\n+        _initGTK(gtkVersion, gtkVersionVerbose, overrideUIScale);\n@@ -249,1 +187,0 @@\n-    @Native private static final int QUERY_LOAD_GTK2 = 2;\n@@ -257,1 +194,1 @@\n-    private static native int _initGTK(int version, boolean verbose, float overrideUIScale);\n+    private static native void _initGTK(int version, boolean verbose, float overrideUIScale);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkApplication.java","additions":25,"deletions":88,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n- * Signature: (IZ)I\n+ * Signature: (IZ)V\n@@ -100,1 +100,1 @@\n-JNIEXPORT jint JNICALL Java_com_sun_glass_ui_gtk_GtkApplication__1initGTK\n+JNIEXPORT void JNICALL Java_com_sun_glass_ui_gtk_GtkApplication__1initGTK\n@@ -115,1 +115,14 @@\n-    return JNI_TRUE;\n+    \/\/ Major version is checked before loading\n+    if (version == 3\n+        && gtk_check_version(version, GTK_3_MIN_MINOR_VERSION, GTK_3_MIN_MICRO_VERSION)) {\n+        char message[100];\n+        snprintf(message, sizeof(message),\n+                 \"Minimum GTK version required is %d.%d.%d. System has %d.%d.%d.\",\n+                 version, GTK_3_MIN_MINOR_VERSION, GTK_3_MIN_MICRO_VERSION,\n+                 gtk_major_version, gtk_minor_version, gtk_micro_version);\n+\n+        jclass uoe = env->FindClass(\"java\/lang\/UnsupportedOperationException\");\n+        env->ThrowNew(uoe, message);\n+\n+        return;\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/GlassApplication.cpp","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -45,0 +45,3 @@\n+#define GTK_3_MIN_MINOR_VERSION 8\n+#define GTK_3_MIN_MICRO_VERSION 0\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/glass_general.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -50,4 +50,0 @@\n-static const char * gtk2_chain[] = {\n-   \"libglassgtk2.so\", \"libglassgtk3.so\", 0\n-};\n-\n@@ -55,1 +51,1 @@\n-   \"libglassgtk3.so\", \"libglassgtk2.so\", 0\n+   \"libglassgtk3.so\", 0\n@@ -94,2 +90,1 @@\n-static char ** two_to_three[] = {\n-    gtk2_versioned, gtk2_not_versioned,\n+static char ** gtk3_lib_options[] = {\n@@ -100,2 +95,1 @@\n-static char ** three_to_two[] = {\n-    gtk3_versioned, gtk3_not_versioned,\n+static char ** gtk2_lib_options[] = {\n@@ -132,1 +126,1 @@\n-         printf(\"checking GTK version %d\\n\",wantVersion);\n+         printf(\"checking GTK version %d\\n\", wantVersion);\n@@ -136,1 +130,1 @@\n-     char *** use_chain = three_to_two;\n+     char *** use_chain = gtk3_lib_options;\n@@ -147,6 +141,14 @@\n-     if (!found) {\n-         if (wantVersion == 0 || wantVersion == 3) {\n-             use_chain = three_to_two;\n-         } else if (wantVersion == 2) {\n-             use_chain = two_to_three;\n-         } else {\n+    if (!found) {\n+        char *** bad_use_chain = gtk2_lib_options;\n+        for (i = 0; bad_use_chain[i] && !found; i++) {\n+            found = try_libraries_noload(bad_use_chain[i]);\n+            if (found && gtk_versionDebug) {\n+                printf(\"found already loaded unsupported GTK library %s\\n\", bad_use_chain[i][1]);\n+            }\n+        }\n+\n+        if (found) {\n+           return -1;\n+        }\n+\n+        if (wantVersion != 0 && wantVersion != 3) {\n@@ -158,1 +160,0 @@\n-             use_chain = three_to_two;\n@@ -211,4 +212,1 @@\n-\n-    if (version == '2') {\n-        return com_sun_glass_ui_gtk_GtkApplication_QUERY_LOAD_GTK2;\n-    } else if (version == '3') {\n+    if (version == '3') {\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/gtk\/launcher.c","additions":20,"deletions":22,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.com.sun.glass.ui.gtk;\n-\n-import com.sun.javafx.PlatformUtil;\n-import java.io.ByteArrayOutputStream;\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assume.assumeTrue;\n-\n-public class Gtk2Deprecation1Test extends Gtk2DeprecationCommon {\n-\n-    @BeforeClass\n-    public static void setup() throws Exception {\n-        doSetup(true);\n-    }\n-\n-    @AfterClass\n-    public static void teardown() {\n-        doTeardown();\n-    }\n-\n-    @Test\n-    public void testDeprecationMessage() throws Exception {\n-        assumeTrue(PlatformUtil.isLinux());\n-\n-        final String output = out.toString();\n-        System.err.println(output);\n-        assertTrue(\"Missing warning message\", output.contains(\"WARNING\"));\n-        assertTrue(\"Missing warning message\", output.contains(\"deprecated\"));\n-        assertTrue(\"Missing warning message\", output.contains(\"removed\"));\n-    }\n-\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/gtk\/Gtk2Deprecation1Test.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.com.sun.glass.ui.gtk;\n-\n-import com.sun.javafx.PlatformUtil;\n-import java.io.ByteArrayOutputStream;\n-\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assume.assumeTrue;\n-\n-public class Gtk2Deprecation2Test extends Gtk2DeprecationCommon {\n-\n-    @BeforeClass\n-    public static void setup() throws Exception {\n-        doSetup(false);\n-    }\n-\n-    @AfterClass\n-    public static void teardown() {\n-        doTeardown();\n-    }\n-\n-    @Test\n-    public void testNoDeprecationMessage() throws Exception {\n-        assumeTrue(PlatformUtil.isLinux());\n-\n-        final String output = out.toString();\n-        System.err.println(output);\n-        assertFalse(\"Unexpected warning message\", output.contains(\"WARNING\"));\n-        assertFalse(\"Unexpected warning message\", output.contains(\"deprecated\"));\n-        assertFalse(\"Unexpected warning message\", output.contains(\"removed\"));\n-    }\n-\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/gtk\/Gtk2Deprecation2Test.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.com.sun.glass.ui.gtk;\n-\n-import com.sun.javafx.PlatformUtil;\n-import java.io.ByteArrayOutputStream;\n-import java.io.PrintStream;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-import javafx.application.Platform;\n-import test.util.Util;\n-\n-import static org.junit.Assert.fail;\n-\n-public class Gtk2DeprecationCommon {\n-\n-    private static final CountDownLatch startupLatch = new CountDownLatch(1);\n-    private static final PrintStream defaultErrorStream = System.err;\n-    protected static final ByteArrayOutputStream out = new ByteArrayOutputStream();\n-\n-    public static void doSetup(boolean forceGtk2) throws Exception {\n-        if (!PlatformUtil.isLinux()) return;\n-\n-        if (forceGtk2) {\n-            System.setProperty(\"jdk.gtk.version\", \"2\");\n-        }\n-\n-        System.setErr(new PrintStream(out, true));\n-\n-        Platform.startup(() -> {\n-            startupLatch.countDown();\n-        });\n-\n-        if (!startupLatch.await(15, TimeUnit.SECONDS)) {\n-            System.setErr(defaultErrorStream);\n-            System.err.println(out.toString());\n-            fail(\"Timeout waiting for FX runtime to start\");\n-        }\n-\n-        Thread.sleep(250);\n-        System.setErr(defaultErrorStream);\n-    }\n-\n-    public static void doTeardown() {\n-        if (!PlatformUtil.isLinux()) return;\n-\n-        Platform.exit();\n-    }\n-\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/gtk\/Gtk2DeprecationCommon.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.com.sun.glass.ui.gtk;\n+\n+import com.sun.javafx.PlatformUtil;\n+import javafx.application.Platform;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.Assert.fail;\n+\n+public class Gtk2RemovalTest {\n+\n+    private static boolean shouldExit;\n+\n+    @Test\n+    public void testGtk2Removal() {\n+        if (!PlatformUtil.isLinux()) return;\n+\n+        System.setProperty(\"jdk.gtk.version\", \"2\");\n+\n+        Assertions.assertThrows(UnsupportedOperationException.class,\n+                () -> Platform.startup(() -> { shouldExit = true; }),\n+                \"Gtk 2 should throw exception\");\n+    }\n+\n+    @AfterAll\n+    public static void doTeardown() {\n+        if (!PlatformUtil.isLinux()) return;\n+\n+        if (shouldExit) {\n+            Platform.exit();\n+        }\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/glass\/ui\/gtk\/Gtk2RemovalTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"}]}