{"files":[{"patch":"@@ -115,2 +115,2 @@\n-        Objects.requireNonNull(col);\n-        onProposedChange(Collections.unmodifiableList(new ArrayList<>(col)), 0, size());\n+        List<E> elements = unmodifiableList(col);\n+        onProposedChange(elements, 0, size());\n@@ -119,1 +119,1 @@\n-            return list.setAll(col);\n+            return list.setAll(elements);\n@@ -194,1 +194,1 @@\n-        return new VetoableIteratorDecorator(new ModCountAccessorImpl(),list.iterator(), 0);\n+        return new VetoableIteratorDecorator(this, new ModCountAccessorImpl(), list.iterator(), 0);\n@@ -237,2 +237,2 @@\n-        Objects.requireNonNull(c);\n-        onProposedChange(Collections.unmodifiableList(new ArrayList<>(c)), size(), size());\n+        List<E> elements = unmodifiableList(c);\n+        onProposedChange(elements, size(), size());\n@@ -241,1 +241,1 @@\n-            boolean ret = list.addAll(c);\n+            boolean ret = list.addAll(elements);\n@@ -253,1 +253,0 @@\n-        Objects.requireNonNull(c);\n@@ -255,1 +254,2 @@\n-        onProposedChange(Collections.unmodifiableList(new ArrayList<>(c)), index, index);\n+        List<E> elements = unmodifiableList(c);\n+        onProposedChange(elements, index, index);\n@@ -258,1 +258,1 @@\n-            boolean ret = list.addAll(index, c);\n+            boolean ret = list.addAll(index, elements);\n@@ -270,2 +270,2 @@\n-        Objects.requireNonNull(c);\n-        removeFromList(this, 0, c, false);\n+        Collection<?> elements = safeCollection(c);\n+        removeFromList(this, 0, elements, false);\n@@ -274,1 +274,1 @@\n-            boolean ret = list.removeAll(c);\n+            boolean ret = list.removeAll(elements);\n@@ -286,2 +286,2 @@\n-        Objects.requireNonNull(c);\n-        removeFromList(this, 0, c, true);\n+        Collection<?> elements = safeCollection(c);\n+        removeFromList(this, 0, elements, true);\n@@ -290,1 +290,1 @@\n-            boolean ret = list.retainAll(c);\n+            boolean ret = list.retainAll(elements);\n@@ -362,1 +362,1 @@\n-        return new VetoableListIteratorDecorator(new ModCountAccessorImpl(), list.listIterator(), 0);\n+        return new VetoableListIteratorDecorator(this, new ModCountAccessorImpl(), list.listIterator(), 0);\n@@ -367,1 +367,1 @@\n-        return new VetoableListIteratorDecorator(new ModCountAccessorImpl(), list.listIterator(index), index);\n+        return new VetoableListIteratorDecorator(this, new ModCountAccessorImpl(), list.listIterator(index), index);\n@@ -372,1 +372,1 @@\n-        return new VetoableSubListDecorator(new ModCountAccessorImpl(), list.subList(fromIndex, toIndex), fromIndex);\n+        return new VetoableSubListDecorator(this, new ModCountAccessorImpl(), list.subList(fromIndex, toIndex), fromIndex);\n@@ -390,1 +390,21 @@\n-    private class VetoableSubListDecorator implements List<E> {\n+    \/**\n+     * Returns the specified collection as an unmodifiable list that can safely be used in all bulk\n+     * operations without triggering {@link ConcurrentModificationException}.\n+     *\/\n+    private <T> List<T> unmodifiableList(Collection<? extends T> c) {\n+        Objects.requireNonNull(c);\n+        return !(c instanceof List<?>) || (c instanceof VetoableSubListDecorator<?> d && d.parent == this)\n+            ? Collections.unmodifiableList(new ArrayList<>(c))\n+            : Collections.unmodifiableList((List<T>)c);\n+    }\n+\n+    \/**\n+     * Returns a collection that can safely be used in the {@link #removeAll(Collection)} and\n+     * {@link #retainAll(Collection)} operations without triggering {@link ConcurrentModificationException}.\n+     *\/\n+    private <T> Collection<T> safeCollection(Collection<T> c) {\n+        Objects.requireNonNull(c);\n+        return c instanceof VetoableSubListDecorator<?> d && d.parent == this\n+            ? (List<T>)Arrays.asList(c.toArray())\n+            : c;\n+    }\n@@ -392,0 +412,2 @@\n+    private static class VetoableSubListDecorator<E> implements List<E> {\n+        private final VetoableListDecorator parent;\n@@ -397,1 +419,2 @@\n-        public VetoableSubListDecorator(ModCountAccessor modCountAccessor, List<E> subList, int offset) {\n+        public VetoableSubListDecorator(VetoableListDecorator<E> parent, ModCountAccessor modCountAccessor, List<E> subList, int offset) {\n+            this.parent = parent;\n@@ -426,1 +449,1 @@\n-            return new VetoableIteratorDecorator(new ModCountAccessorImplSub(), subList.iterator(), offset);\n+            return new VetoableIteratorDecorator(parent, new ModCountAccessorImplSub(), subList.iterator(), offset);\n@@ -444,1 +467,1 @@\n-            onProposedChange(Collections.<E>singletonList(e), offset + size(), offset + size());\n+            parent.onProposedChange(Collections.<E>singletonList(e), offset + size(), offset + size());\n@@ -474,1 +497,0 @@\n-            Objects.requireNonNull(c);\n@@ -476,1 +498,2 @@\n-            onProposedChange(Collections.unmodifiableList(new ArrayList<>(c)), offset + size(), offset + size());\n+            List<E> elements = parent.unmodifiableList(c);\n+            parent.onProposedChange(elements, offset + size(), offset + size());\n@@ -479,1 +502,1 @@\n-                boolean res =  subList.addAll(c);\n+                boolean res =  subList.addAll(elements);\n@@ -491,1 +514,0 @@\n-            Objects.requireNonNull(c);\n@@ -494,1 +516,2 @@\n-            onProposedChange(Collections.unmodifiableList(new ArrayList<>(c)), offset + index, offset + index);\n+            List<E> elements = parent.unmodifiableList(c);\n+            parent.onProposedChange(elements, offset + index, offset + index);\n@@ -497,1 +520,1 @@\n-                boolean res = subList.addAll(index, c);\n+                boolean res = subList.addAll(index, elements);\n@@ -509,1 +532,0 @@\n-            Objects.requireNonNull(c);\n@@ -511,1 +533,2 @@\n-            removeFromList(this, offset, c, false);\n+            Collection<?> elements = parent.safeCollection(c);\n+            parent.removeFromList(this, offset, elements, false);\n@@ -514,1 +537,1 @@\n-                boolean res = subList.removeAll(c);\n+                boolean res = subList.removeAll(elements);\n@@ -526,1 +549,0 @@\n-            Objects.requireNonNull(c);\n@@ -528,1 +550,2 @@\n-            removeFromList(this, offset, c, true);\n+            Collection<?> elements = parent.safeCollection(c);\n+            parent.removeFromList(this, offset, elements, true);\n@@ -531,1 +554,1 @@\n-                boolean res = subList.retainAll(c);\n+                boolean res = subList.retainAll(elements);\n@@ -544,1 +567,1 @@\n-            onProposedChange(Collections.<E>emptyList(), offset, offset + size());\n+            parent.onProposedChange(Collections.<E>emptyList(), offset, offset + size());\n@@ -563,1 +586,1 @@\n-            onProposedChange(Collections.singletonList(element), offset + index, offset + index + 1);\n+            parent.onProposedChange(Collections.singletonList(element), offset + index, offset + index + 1);\n@@ -571,1 +594,1 @@\n-            onProposedChange(Collections.singletonList(element), offset + index, offset + index);\n+            parent.onProposedChange(Collections.singletonList(element), offset + index, offset + index);\n@@ -585,1 +608,1 @@\n-            onProposedChange(Collections.<E>emptyList(), offset + index, offset + index + 1);\n+            parent.onProposedChange(Collections.<E>emptyList(), offset + index, offset + index + 1);\n@@ -612,1 +635,1 @@\n-            return new VetoableListIteratorDecorator(new ModCountAccessorImplSub(),\n+            return new VetoableListIteratorDecorator(parent, new ModCountAccessorImplSub(),\n@@ -619,1 +642,1 @@\n-            return new VetoableListIteratorDecorator(new ModCountAccessorImplSub(),\n+            return new VetoableListIteratorDecorator(parent, new ModCountAccessorImplSub(),\n@@ -626,1 +649,1 @@\n-            return new VetoableSubListDecorator(new ModCountAccessorImplSub(),\n+            return new VetoableSubListDecorator(parent, new ModCountAccessorImplSub(),\n@@ -681,2 +704,2 @@\n-    private class VetoableIteratorDecorator implements Iterator<E> {\n-\n+    private static class VetoableIteratorDecorator<E> implements Iterator<E> {\n+        final VetoableListDecorator<E> parent;\n@@ -690,1 +713,2 @@\n-        public VetoableIteratorDecorator(ModCountAccessor modCountAccessor, Iterator<E> it, int offset) {\n+        public VetoableIteratorDecorator(VetoableListDecorator<E> parent, ModCountAccessor modCountAccessor, Iterator<E> it, int offset) {\n+            this.parent = parent;\n@@ -717,1 +741,1 @@\n-            onProposedChange(Collections.<E>emptyList(), offset + lastReturned, offset + lastReturned + 1);\n+            parent.onProposedChange(Collections.<E>emptyList(), offset + lastReturned, offset + lastReturned + 1);\n@@ -744,1 +768,1 @@\n-    private class VetoableListIteratorDecorator extends VetoableIteratorDecorator implements ListIterator<E> {\n+    private static class VetoableListIteratorDecorator<E> extends VetoableIteratorDecorator<E> implements ListIterator<E> {\n@@ -748,2 +772,2 @@\n-        public VetoableListIteratorDecorator(ModCountAccessor modCountAccessor, ListIterator<E> it, int offset) {\n-            super(modCountAccessor, it, offset);\n+        public VetoableListIteratorDecorator(VetoableListDecorator<E> parent, ModCountAccessor modCountAccessor, ListIterator<E> it, int offset) {\n+            super(parent, modCountAccessor, it, offset);\n@@ -785,1 +809,1 @@\n-            onProposedChange(Collections.singletonList(e), offset + lastReturned, offset + lastReturned + 1);\n+            parent.onProposedChange(Collections.singletonList(e), offset + lastReturned, offset + lastReturned + 1);\n@@ -792,1 +816,1 @@\n-            onProposedChange(Collections.singletonList(e), offset + cursor, offset + cursor);\n+            parent.onProposedChange(Collections.singletonList(e), offset + cursor, offset + cursor);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/collections\/VetoableListDecorator.java","additions":75,"deletions":51,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -208,0 +208,7 @@\n+    @Test\n+    public void testAddAll_subList() {\n+        list.addAll(list.subList(0, 2));\n+        assertEquals(List.of(\"foo\", \"bar\", \"ham\", \"eggs\", \"foo\", \"bar\"), list);\n+        assertSingleCall(new String[] {\"foo\", \"bar\"}, new int[] {4, 4});\n+    }\n+\n@@ -214,0 +221,7 @@\n+    @Test\n+    public void testAddAll_indexed_subList() {\n+        list.addAll(1, list.subList(0, 2));\n+        assertEquals(List.of(\"foo\", \"foo\", \"bar\", \"bar\", \"ham\", \"eggs\"), list);\n+        assertSingleCall(new String[] {\"foo\", \"bar\"}, new int[] {1, 1});\n+    }\n+\n@@ -250,0 +264,7 @@\n+    @Test\n+    public void testRemoveAll_subList() {\n+        list.removeAll(list.subList(0, 1));\n+        assertEquals(List.of(\"bar\", \"ham\", \"eggs\"), list);\n+        assertSingleCall(new String[0], new int[] {0, 1});\n+    }\n+\n@@ -268,0 +289,7 @@\n+    @Test\n+    public void testRetainAll_subList() {\n+        list.retainAll(list.subList(0, 2));\n+        assertEquals(List.of(\"foo\", \"bar\"), list);\n+        assertSingleCall(new String[0], new int[] {2, 4});\n+    }\n+\n@@ -280,0 +308,7 @@\n+    @Test\n+    public void testSetAll_subList() {\n+        list.setAll(list.subList(0, 2));\n+        assertEquals(List.of(\"foo\", \"bar\"), list);\n+        assertSingleCall(new String[] {\"foo\", \"bar\"}, new int[] {0, 4});\n+    }\n+\n@@ -314,0 +349,16 @@\n+    @Test\n+    public void testSubList_addAll_subList() {\n+        var subList = list.subList(0, 3);\n+        subList.addAll(subList.subList(0, 2));\n+        assertEquals(List.of(\"foo\", \"bar\", \"ham\", \"foo\", \"bar\"), subList);\n+        assertSingleCall(new String[] {\"foo\", \"bar\"}, new int[] {3, 3});\n+    }\n+\n+    @Test\n+    public void testSubList_addAll_indexed_subList() {\n+        var subList = list.subList(0, 3);\n+        subList.addAll(1, subList.subList(0, 2));\n+        assertEquals(List.of(\"foo\", \"foo\", \"bar\", \"bar\", \"ham\"), subList);\n+        assertSingleCall(new String[] {\"foo\", \"bar\"}, new int[] {1, 1});\n+    }\n+\n@@ -332,0 +383,8 @@\n+    @Test\n+    public void testSubList_removeAll_subList() {\n+        var subList = list.subList(0, 3);\n+        subList.removeAll(subList.subList(0, 1));\n+        assertEquals(List.of(\"bar\", \"ham\"), subList);\n+        assertSingleCall(new String[0], new int[] {0, 1});\n+    }\n+\n@@ -338,0 +397,8 @@\n+    @Test\n+    public void testSubList_retainAll_subList() {\n+        var subList = list.subList(0, 3);\n+        subList.retainAll(subList.subList(0, 1));\n+        assertEquals(List.of(\"foo\"), subList);\n+        assertSingleCall(new String[0], new int[] {1, 3});\n+    }\n+\n","filename":"modules\/javafx.base\/src\/test\/java\/test\/javafx\/collections\/VetoableObservableListTest.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"modified"}]}