{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.util.function.Function;\n@@ -45,0 +46,1 @@\n+import javafx.beans.property.SimpleObjectProperty;\n@@ -70,1 +72,0 @@\n-import javafx.scene.control.Control;\n@@ -165,1 +166,1 @@\n-     * nodes into the Control {@link Control#getChildren() children} list, as\n+     * nodes into the Control {@link TabPane#getChildren() children} list, as\n@@ -168,1 +169,1 @@\n-     * @param control The control that this skin should be installed onto.\n+     * @param control The TabPane that this skin should be installed onto.\n@@ -259,0 +260,39 @@\n+    \/**\n+     * This property allows to control the graphic for the overflow menu items,\n+     * by generating graphic {@code Node}s when the menu is shown.\n+     * <p>\n+     * When this property is {@code null}, the menu provides only the basic graphic copied from the corresponding\n+     * {@link Tab} - either an {@link ImageView} or a {@link Label} with an {@link ImageView} as its graphic.\n+     * <p>\n+     * Changing this property while the menu is shown has no effect.\n+     *\n+     * @since 25\n+     * @defaultValue null\n+     *\/\n+    private ObjectProperty<Function<Tab, Node>> menuGraphicFactory;\n+\n+    public final ObjectProperty<Function<Tab, Node>> menuGraphicFactoryProperty() {\n+        if (menuGraphicFactory == null) {\n+            menuGraphicFactory = new SimpleObjectProperty<>() {\n+                @Override\n+                public Object getBean() {\n+                    return TabPaneSkin.this;\n+                }\n+\n+                @Override\n+                public String getName() {\n+                    return \"menuGraphicFactory\";\n+                }\n+            };\n+        }\n+        return menuGraphicFactory;\n+    }\n+\n+    public final Function<Tab,Node> getMenuGraphicFactory() {\n+        return menuGraphicFactory == null ? null : menuGraphicFactory.get();\n+    }\n+\n+    public final void setMenuGraphicFactory(Function<Tab,Node> f) {\n+        menuGraphicFactoryProperty().set(f);\n+    }\n+\n@@ -488,7 +528,4 @@\n-    \/**\n-     * VERY HACKY - this lets us 'duplicate' Label and ImageView nodes to be used in a\n-     * Tab and the tabs menu at the same time.\n-     *\/\n-    private static Node clone(Node n) {\n-        if (n == null) {\n-            return null;\n+    private Node prepareGraphic(Tab t) {\n+        Function<Tab, Node> f = getMenuGraphicFactory();\n+        if (f != null) {\n+            return f.apply(t);\n@@ -496,2 +533,7 @@\n-        if (n instanceof ImageView) {\n-            ImageView iv = (ImageView) n;\n+\n+        Node n = t.getGraphic();\n+        return extractGraphic(n);\n+    }\n+\n+    private Node extractGraphic(Node n) {\n+        if (n instanceof ImageView v) {\n@@ -499,1 +541,1 @@\n-            imageview.imageProperty().bind(iv.imageProperty());\n+            imageview.imageProperty().bind(v.imageProperty());\n@@ -501,4 +543,2 @@\n-        }\n-        if (n instanceof Label) {\n-            Label l = (Label)n;\n-            Label label = new Label(l.getText(), clone(l.getGraphic()));\n+        } else if (n instanceof Label l) {\n+            Label label = new Label(l.getText(), extractGraphic(l.getGraphic()));\n@@ -507,0 +547,2 @@\n+        } else {\n+            return null;\n@@ -508,1 +550,0 @@\n-        return null;\n@@ -1512,1 +1553,0 @@\n-            getProperties().put(ContextMenu.class, tab.getContextMenu());\n@@ -1770,2 +1810,0 @@\n-            setupPopupMenu();\n-\n@@ -1833,1 +1871,0 @@\n-            getProperties().put(ContextMenu.class, popup);\n@@ -1931,1 +1968,2 @@\n-                TabMenuItem item = new TabMenuItem(tab);\n+                Node graphic = prepareGraphic(tab);\n+                TabMenuItem item = new TabMenuItem(tab, graphic);\n@@ -1947,0 +1985,3 @@\n+            if (popup == null) {\n+                setupPopupMenu();\n+            }\n@@ -1956,4 +1997,0 @@\n-    } \/* End TabControlButtons*\/\n-\n-    static class TabMenuItem extends RadioMenuItem {\n-        Tab tab;\n@@ -1961,3 +1998,3 @@\n-        private InvalidationListener disableListener = new InvalidationListener() {\n-            @Override public void invalidated(Observable o) {\n-                setDisable(tab.isDisable());\n+        private ContextMenu test_getTabsMenu() {\n+            if (popup == null) {\n+                setupPopupMenu();\n@@ -1965,1 +2002,3 @@\n-        };\n+            return popup;\n+        }\n+    } \/* End TabControlButtons*\/\n@@ -1967,2 +2006,3 @@\n-        private WeakInvalidationListener weakDisableListener =\n-                new WeakInvalidationListener(disableListener);\n+    \/** The MenuItem for use in the overflow menu *\/\n+    static class TabMenuItem extends RadioMenuItem {\n+        private Tab tab;\n@@ -1970,2 +2010,2 @@\n-        public TabMenuItem(final Tab tab) {\n-            super(tab.getText(), TabPaneSkin.clone(tab.getGraphic()));\n+        public TabMenuItem(Tab tab, Node graphic) {\n+            super(tab.getText(), graphic);\n@@ -1973,2 +2013,1 @@\n-            setDisable(tab.isDisable());\n-            tab.disableProperty().addListener(weakDisableListener);\n+            disableProperty().bind(tab.disableProperty());\n@@ -1982,0 +2021,1 @@\n+        \/\/ is this really necessary?\n@@ -1984,1 +2024,1 @@\n-            tab.disableProperty().removeListener(weakDisableListener);\n+            disableProperty().unbind();\n@@ -2350,1 +2390,1 @@\n-        return tabHeaderArea.controlButtons.popup;\n+        return tabHeaderArea.controlButtons.test_getTabsMenu();\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/TabPaneSkin.java","additions":79,"deletions":39,"binary":false,"changes":118,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+import java.util.function.Function;\n@@ -58,0 +59,1 @@\n+import javafx.scene.Node;\n@@ -61,0 +63,1 @@\n+import javafx.scene.control.MenuItem;\n@@ -76,0 +79,1 @@\n+import javafx.scene.shape.Path;\n@@ -1341,0 +1345,45 @@\n+\n+    private ContextMenu setupMenuGraphicFactory() {\n+        TabPaneSkin skin = new TabPaneSkin(tabPane);\n+        skin.setMenuGraphicFactory(new Function<Tab, Node>() {\n+            @Override\n+            public Node apply(Tab t) {\n+                return new Path();\n+            }\n+        });\n+        tabPane.setSkin(skin);\n+\n+        tabPane.setMaxSize(20, 20);\n+        root.getChildren().add(tabPane);\n+        tabPane.getTabs().addAll(tab1, tab2, tab3);\n+        show();\n+        tk.firePulse();\n+\n+        ContextMenu menu = TabPaneSkinShim.getTabsMenu(skin);\n+        assertNotNull(menu);\n+        assertEquals(3, menu.getItems().size());\n+        return menu;\n+    }\n+\n+    @Test\n+    public void menuGraphicFactory() {\n+        ContextMenu menu = setupMenuGraphicFactory();\n+        for (MenuItem mi : menu.getItems()) {\n+            assertTrue(mi.getGraphic() instanceof Path);\n+        }\n+    }\n+\n+    @Test\n+    public void menuBindings() {\n+        ContextMenu menu = setupMenuGraphicFactory();\n+        MenuItem mi = menu.getItems().get(0);\n+\n+        assertFalse(mi.isDisable());\n+        assertEquals(\"one\", mi.getText());\n+\n+        tab1.setText(\"yo\");\n+        tab1.setDisable(true);\n+\n+        assertTrue(mi.isDisable());\n+        assertEquals(\"yo\", mi.getText());\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TabPaneTest.java","additions":50,"deletions":1,"binary":false,"changes":51,"status":"modified"}]}