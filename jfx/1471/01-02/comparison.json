{"files":[{"patch":"@@ -4366,0 +4366,1 @@\n+    options.tags(\"interpolationType:a:Interpolation type:\")\n","filename":"build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-     * If a paint is not interpolatable, {@code startValue} is returned for {@code t == 0},\n+     * If a paint is not interpolatable, {@code startValue} is returned for {@code t < 0.5},\n@@ -94,1 +94,1 @@\n-        return t > 0 ? endValue : startValue;\n+        return t < 0.5 ? startValue : endValue;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/paint\/PaintUtils.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -157,4 +157,2 @@\n-     * Utility function that interpolates between two double values, taking into account whether\n-     * the values are absolute or percentage-based. If one value is absolute and the other is a\n-     * percentage, then {@code from} is returned when {@code t == 0}, and {@code to} is returned\n-     * otherwise.\n+     * Utility function that interpolates between two discrete values, returning {@code from}\n+     * when {@code t < 0.5}, and {@code to} otherwise.\n@@ -162,8 +160,10 @@\n-    public static double interpolate(double from, double to,\n-                                     boolean fromIsPercentage, boolean toIsPercentage,\n-                                     double t) {\n-        if (fromIsPercentage == toIsPercentage) {\n-            return interpolate(from, to, t);\n-        }\n-\n-        return t > 0 ? to : from;\n+    public static <T> T interpolateDiscrete(T from, T to, double t) {\n+        return t < 0.5 ? from : to;\n+    }\n+\n+    \/**\n+     * Utility function that interpolates between two discrete values, returning {@code from}\n+     * when {@code t < 0.5}, and {@code to} otherwise.\n+     *\/\n+    public static double interpolateDiscrete(double from, double to, double t) {\n+        return t < 0.5 ? from : to;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/util\/Utils.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -32,0 +32,31 @@\n+ * <p>\n+ * Component values can be interpolated in different ways, depending on the semantics of the component type:\n+ * <table class=\"striped\">\n+ *     <caption><b>Interpolation types<\/b><\/caption>\n+ *     <tbody>\n+ *         <tr><td><a id=\"default\" style=\"white-space: nowrap\">default<\/a><\/td>\n+ *             <td>Component types that implement {@code Interpolatable} are interpolated by calling the\n+ *                 {@link #interpolate(Object, double)} method.<\/td>\n+ *         <\/tr>\n+ *         <tr><td><a id=\"linear\" style=\"white-space: nowrap\">linear<\/a><\/td>\n+ *             <td>Two components are combined by linear interpolation such that {@code t = 0} produces\n+ *                 the start value, and {@code t = 1} produces the end value. This interpolation type\n+ *                 is usually applicable for numeric components.<\/td>\n+ *         <\/tr>\n+ *         <tr><td><a id=\"discrete\" style=\"white-space: nowrap\">discrete<\/a><\/td>\n+ *             <td>If two components cannot be meaningfully combined, the intermediate component value\n+ *                 is equal to the start value for {@code t < 0.5} and equal to the end value for\n+ *                 {@code t >= 0.5}.<\/td>\n+ *         <\/tr>\n+ *         <tr><td><a id=\"pairwise\" style=\"white-space: nowrap\">pairwise<\/a><\/td>\n+ *             <td>Two lists are combined by pairwise interpolation. If the start list has fewer elements than\n+ *                 the target list, the missing elements are copied from the target list. If the start list has\n+ *                 more elements than the target list, the excess elements are discarded.\n+ *             <\/td>\n+ *         <\/tr>\n+ *         <tr><td style=\"white-space: nowrap\">(see prose)<\/td>\n+ *             <td>Some component types are interpolated in specific ways not covered here.\n+ *                 Refer to their respective documentation for more information.<\/td>\n+ *         <\/tr>\n+ *     <\/tbody>\n+ * <\/table>\n@@ -44,1 +75,1 @@\n-     * The returned value may not be a new instance; an implementation might also return one of the\n+     * The returned value may not be a new instance; the implementation might also return one of the\n@@ -48,5 +79,5 @@\n-     * <p>\n-     * An implementation is not required to reject interpolation factors less than 0 or larger than 1,\n-     * but this specification gives no meaning to values returned outside of this range. For example,\n-     * an implementation might clamp the interpolation factor to [0..1], or it might continue the linear\n-     * interpolation outside of this range.\n+     *\n+     * @implSpec An implementation is not required to reject interpolation factors less than 0 or larger\n+     *           than 1, but this specification gives no meaning to values returned outside of this range.\n+     *           For example, an implementation might clamp the interpolation factor to [0..1], or it might\n+     *           continue the linear interpolation outside of this range.\n@@ -56,0 +87,1 @@\n+     * @throws NullPointerException if {@code endValue} is {@code null}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/animation\/Interpolatable.java","additions":38,"deletions":6,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ import java.util.Objects;\n@@ -43,1 +44,2 @@\n-     * The inset on the top side\n+     * The inset on the top side.\n+     *\n@@ -45,0 +47,1 @@\n+     * @interpolationType <a href=\"..\/animation\/Interpolatable.html#linear\">linear<\/a>\n@@ -50,1 +53,2 @@\n-     * The inset on the right side\n+     * The inset on the right side.\n+     *\n@@ -52,0 +56,1 @@\n+     * @interpolationType <a href=\"..\/animation\/Interpolatable.html#linear\">linear<\/a>\n@@ -57,1 +62,2 @@\n-     * The inset on the bottom side\n+     * The inset on the bottom side.\n+     *\n@@ -59,0 +65,1 @@\n+     * @interpolationType <a href=\"..\/animation\/Interpolatable.html#linear\">linear<\/a>\n@@ -64,1 +71,2 @@\n-     * The inset on the left side\n+     * The inset on the left side.\n+     *\n@@ -66,0 +74,1 @@\n+     * @interpolationType <a href=\"..\/animation\/Interpolatable.html#linear\">linear<\/a>\n@@ -107,0 +116,1 @@\n+     * @throws NullPointerException {@inheritDoc}\n@@ -111,0 +121,2 @@\n+        Objects.requireNonNull(endValue, \"endValue cannot be null\");\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/geometry\/Insets.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Objects;\n@@ -54,0 +55,1 @@\n+     *\n@@ -55,0 +57,1 @@\n+     * @interpolationType <a href=\"..\/animation\/Interpolatable.html#linear\">linear<\/a>\n@@ -69,0 +72,1 @@\n+     *\n@@ -70,0 +74,1 @@\n+     * @interpolationType <a href=\"..\/animation\/Interpolatable.html#linear\">linear<\/a>\n@@ -361,0 +366,1 @@\n+     * @throws NullPointerException {@inheritDoc}\n@@ -365,0 +371,2 @@\n+        Objects.requireNonNull(endValue, \"endValue cannot be null\");\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/geometry\/Point2D.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.Objects;\n@@ -55,0 +56,1 @@\n+     *\n@@ -56,0 +58,1 @@\n+     * @interpolationType <a href=\"..\/animation\/Interpolatable.html#linear\">linear<\/a>\n@@ -70,0 +73,1 @@\n+     *\n@@ -71,0 +75,1 @@\n+     * @interpolationType <a href=\"..\/animation\/Interpolatable.html#linear\">linear<\/a>\n@@ -85,0 +90,1 @@\n+     *\n@@ -86,0 +92,1 @@\n+     * @interpolationType <a href=\"..\/animation\/Interpolatable.html#linear\">linear<\/a>\n@@ -399,0 +406,1 @@\n+     * @throws NullPointerException {@inheritDoc}\n@@ -403,0 +411,2 @@\n+        Objects.requireNonNull(endValue, \"endValue cannot be null\");\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/geometry\/Point3D.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -142,0 +142,1 @@\n+     *\n@@ -143,0 +144,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#pairwise\">pairwise<\/a>\n@@ -151,0 +153,1 @@\n+     *\n@@ -152,0 +155,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#pairwise\">pairwise<\/a>\n@@ -163,0 +167,1 @@\n+     *\n@@ -164,0 +169,1 @@\n+     * @interpolationType the intermediate value is derived from {@link #getFills() fills}\n@@ -639,0 +645,1 @@\n+     * @throws NullPointerException {@inheritDoc}\n@@ -643,0 +650,2 @@\n+        Objects.requireNonNull(endValue, \"endValue cannot be null\");\n+\n@@ -651,2 +660,5 @@\n-        List<BackgroundFill> newFills = Utils.interpolateListsPairwise(fills, endValue.fills, t);\n-        List<BackgroundImage> newImages = Utils.interpolateListsPairwise(images, endValue.images, t);\n+        List<BackgroundFill> newFills = fills == endValue.fills ?\n+            fills : Utils.interpolateListsPairwise(fills, endValue.fills, t);\n+\n+        List<BackgroundImage> newImages = images == endValue.images ?\n+            images : Utils.interpolateListsPairwise(images, endValue.images, t);\n@@ -654,1 +666,1 @@\n-        if (newFills == this.fills && newImages == this.images) {\n+        if (newFills == fills && newImages == images) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Background.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import javafx.scene.paint.LinearGradient;\n@@ -34,0 +35,3 @@\n+import javafx.scene.paint.RadialGradient;\n+\n+import java.util.Objects;\n@@ -44,0 +48,10 @@\n+ * <p>\n+ * {@code BackgroundFill} supports interpolation between the following heterogeneous paint combinations:\n+ * <ul>\n+ *     <li>{@link Color} ↔ {@link LinearGradient}\n+ *     <li>{@link Color} ↔ {@link RadialGradient}\n+ * <\/ul>\n+ * Heterogeneous paint interpolation converts the {@code Color} to a visually identical gradient paint,\n+ * and then performs a gradient paint interpolation. If heterogeneous paints cannot be interpolated as\n+ * described, the paints are interpolated <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discretely<\/a>.\n+ *\n@@ -50,0 +64,1 @@\n+     *\n@@ -51,0 +66,1 @@\n+     * @interpolationType see {@link BackgroundFill}\n@@ -60,0 +76,1 @@\n+     *\n@@ -61,0 +78,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#default\">default<\/a>\n@@ -71,0 +89,1 @@\n+     *\n@@ -72,0 +91,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#default\">default<\/a>\n@@ -111,0 +131,1 @@\n+     * @throws NullPointerException {@inheritDoc}\n@@ -115,0 +136,2 @@\n+        Objects.requireNonNull(endValue, \"endValue cannot be null\");\n+\n@@ -133,1 +156,1 @@\n-        if (newFill == fill && newRadii == radii && newInsets == insets) {\n+        if (isSame(newFill, newRadii, newInsets)) {\n@@ -137,1 +160,1 @@\n-        if (newFill == endValue.fill && newRadii == endValue.radii && newInsets == endValue.insets) {\n+        if (endValue.isSame(newFill, newRadii, newInsets)) {\n@@ -144,0 +167,6 @@\n+    private boolean isSame(Paint fill, CornerRadii radii, Insets insets) {\n+        return this.fill == fill\n+            && this.radii == radii\n+            && this.insets == insets;\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BackgroundFill.java","additions":31,"deletions":2,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Objects;\n@@ -56,0 +57,1 @@\n+     *\n@@ -57,0 +59,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -65,0 +68,1 @@\n+     *\n@@ -66,1 +70,2 @@\n-     * is to be repeated along the x-axis of the region\n+     *         is to be repeated along the x-axis of the region\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -75,0 +80,1 @@\n+     *\n@@ -76,1 +82,2 @@\n-     * is to be repeated along the y-axis of the region\n+     *         is to be repeated along the y-axis of the region\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -84,0 +91,1 @@\n+     *\n@@ -85,0 +93,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#default\">default<\/a>\n@@ -91,0 +100,1 @@\n+     *\n@@ -92,0 +102,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#default\">default<\/a>\n@@ -145,0 +156,1 @@\n+     * @throws NullPointerException {@inheritDoc}\n@@ -149,0 +161,2 @@\n+        Objects.requireNonNull(endValue, \"endValue cannot be null\");\n+\n@@ -165,0 +179,12 @@\n+        BackgroundRepeat newRepeatX, newRepeatY;\n+        Image newImage;\n+\n+        if (t < 0.5) {\n+            newRepeatX = this.repeatX;\n+            newRepeatY = this.repeatY;\n+            newImage = this.image;\n+        } else {\n+            newRepeatX = endValue.repeatX;\n+            newRepeatY = endValue.repeatY;\n+            newImage = endValue.image;\n+        }\n@@ -166,5 +192,1 @@\n-        if (image == endValue.image\n-                && repeatX == endValue.repeatX\n-                && repeatY == endValue.repeatY\n-                && position == newPosition\n-                && size == newSize) {\n+        if (isSame(newImage, newRepeatX, newRepeatY, newPosition, newSize)) {\n@@ -174,1 +196,1 @@\n-        if (endValue.position == newPosition && endValue.size == newSize) {\n+        if (endValue.isSame(newImage, newRepeatX, newRepeatY, newPosition, newSize)) {\n@@ -178,1 +200,13 @@\n-        return new BackgroundImage(endValue.image, endValue.repeatX, endValue.repeatY, newPosition, newSize);\n+        return new BackgroundImage(newImage, newRepeatX, newRepeatY, newPosition, newSize);\n+    }\n+\n+    private boolean isSame(Image image,\n+                           BackgroundRepeat repeatX,\n+                           BackgroundRepeat repeatY,\n+                           BackgroundPosition position,\n+                           BackgroundSize size) {\n+        return this.image == image\n+            && this.repeatX == repeatX\n+            && this.repeatY == repeatY\n+            && this.position == position\n+            && this.size == size;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BackgroundImage.java","additions":43,"deletions":9,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.util.Objects;\n@@ -54,1 +55,1 @@\n-public final class BackgroundPosition implements Interpolatable<BackgroundPosition> {\n+public class BackgroundPosition implements Interpolatable<BackgroundPosition> {\n@@ -73,2 +74,3 @@\n-     * @return the Side along the horizontal axis to which the BackgroundImage is\n-     * anchored\n+     *\n+     * @return the Side along the horizontal axis to which the BackgroundImage is anchored\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -82,2 +84,2 @@\n-     * @return the Side along the vertical axis to which the BackgroundImage is\n-     * anchored\n+     * @return the Side along the vertical axis to which the BackgroundImage is anchored\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -95,0 +97,1 @@\n+     *\n@@ -96,0 +99,4 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> if one\n+     *                    value is absolute and the other is a {@link #isHorizontalAsPercentage() percentage},\n+     *                    or if the background is anchored at different {@link #getHorizontalSide() sides};\n+     *                    otherwise <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n@@ -106,0 +113,1 @@\n+     *\n@@ -107,0 +115,4 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> if one\n+     *                    value is absolute and the other is a {@link #isVerticalAsPercentage() percentage},\n+     *                    or if the background is anchored at different {@link #getVerticalSide() sides};\n+     *                    otherwise <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n@@ -114,0 +126,1 @@\n+     *\n@@ -115,0 +128,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -122,0 +136,1 @@\n+     *\n@@ -123,0 +138,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -183,0 +199,1 @@\n+     * @throws NullPointerException {@inheritDoc}\n@@ -187,1 +204,3 @@\n-        if (t <= 0 || equals(endValue)) {\n+        Objects.requireNonNull(endValue, \"endValue cannot be null\");\n+\n+        if (t <= 0) {\n@@ -195,5 +214,18 @@\n-        double horizontalPosition = horizontalSide == endValue.horizontalSide ?\n-            Utils.interpolate(\n-                this.horizontalPosition, endValue.horizontalPosition,\n-                this.horizontalAsPercentage, endValue.horizontalAsPercentage, t) :\n-            endValue.horizontalPosition;\n+        double newHorizontalPosition, newVerticalPosition;\n+        boolean newHorizontalAsPercentage, newVerticalAsPercentage;\n+        Side newHorizontalSide, newVerticalSide;\n+\n+        if (this.horizontalSide == endValue.horizontalSide\n+                && this.horizontalAsPercentage == endValue.horizontalAsPercentage) {\n+            newHorizontalPosition = Utils.interpolate(this.horizontalPosition, endValue.horizontalPosition, t);\n+            newHorizontalAsPercentage = this.horizontalAsPercentage;\n+            newHorizontalSide = this.horizontalSide;\n+        } else if (t < 0.5) {\n+            newHorizontalPosition = this.horizontalPosition;\n+            newHorizontalAsPercentage = this.horizontalAsPercentage;\n+            newHorizontalSide = this.horizontalSide;\n+        } else {\n+            newHorizontalPosition = endValue.horizontalPosition;\n+            newHorizontalAsPercentage = endValue.horizontalAsPercentage;\n+            newHorizontalSide = endValue.horizontalSide;\n+        }\n@@ -201,5 +233,24 @@\n-        double verticalPosition = verticalSide == endValue.verticalSide ?\n-            Utils.interpolate(\n-                this.verticalPosition, endValue.verticalPosition,\n-                this.verticalAsPercentage, endValue.verticalAsPercentage, t) :\n-            endValue.verticalPosition;\n+        if (this.verticalSide == endValue.verticalSide\n+                && this.verticalAsPercentage == endValue.verticalAsPercentage) {\n+            newVerticalPosition = Utils.interpolate(this.verticalPosition, endValue.verticalPosition, t);\n+            newVerticalAsPercentage = this.verticalAsPercentage;\n+            newVerticalSide = this.verticalSide;\n+        } else if (t < 0.5) {\n+            newVerticalPosition = this.verticalPosition;\n+            newVerticalAsPercentage = this.verticalAsPercentage;\n+            newVerticalSide = this.verticalSide;\n+        } else {\n+            newVerticalPosition = endValue.verticalPosition;\n+            newVerticalAsPercentage = endValue.verticalAsPercentage;\n+            newVerticalSide = endValue.verticalSide;\n+        }\n+\n+        if (isSame(newHorizontalSide, newHorizontalPosition, newHorizontalAsPercentage,\n+                   newVerticalSide, newVerticalPosition, newVerticalAsPercentage)) {\n+            return this;\n+        }\n+\n+        if (endValue.isSame(newHorizontalSide, newHorizontalPosition, newHorizontalAsPercentage,\n+                            newVerticalSide, newVerticalPosition, newVerticalAsPercentage)) {\n+            return endValue;\n+        }\n@@ -208,2 +259,12 @@\n-            endValue.horizontalSide, horizontalPosition, endValue.horizontalAsPercentage,\n-            endValue.verticalSide, verticalPosition, endValue.verticalAsPercentage);\n+            newHorizontalSide, newHorizontalPosition, newHorizontalAsPercentage,\n+            newVerticalSide, newVerticalPosition, newVerticalAsPercentage);\n+    }\n+\n+    private boolean isSame(Side horizontalSide, double horizontalPosition, boolean horizontalAsPercentage,\n+                           Side verticalSide, double verticalPosition, boolean verticalAsPercentage) {\n+        return this.horizontalSide == horizontalSide\n+            && this.horizontalPosition == horizontalPosition\n+            && this.horizontalAsPercentage == horizontalAsPercentage\n+            && this.verticalSide == verticalSide\n+            && this.verticalPosition == verticalPosition\n+            && this.verticalAsPercentage == verticalAsPercentage;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BackgroundPosition.java","additions":79,"deletions":18,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Objects;\n@@ -87,0 +88,1 @@\n+     *\n@@ -88,1 +90,6 @@\n-     * BackgroundImage should render\n+     *         BackgroundImage should render\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n+     *                    if {@link #isCover() cover} or {@link #isContain() contain} is set, if one value\n+     *                    is absolute and the other value is a {@link #isWidthAsPercentage() percentage},\n+     *                    or if the width is {@link #AUTO}; otherwise\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n@@ -98,0 +105,1 @@\n+     *\n@@ -99,1 +107,6 @@\n-     * BackgroundImage should render\n+     *         BackgroundImage should render\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n+     *                    if {@link #isCover() cover} or {@link #isContain() contain} is set, if one value\n+     *                    is absolute and the other value is a {@link #isHeightAsPercentage() percentage},\n+     *                    or if the height is {@link #AUTO}; otherwise\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n@@ -107,0 +120,1 @@\n+     *\n@@ -108,0 +122,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -115,0 +130,1 @@\n+     *\n@@ -116,0 +132,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -124,0 +141,1 @@\n+     *\n@@ -125,0 +143,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -133,0 +152,1 @@\n+     *\n@@ -134,0 +154,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -188,0 +209,1 @@\n+     * @throws NullPointerException {@inheritDoc}\n@@ -192,1 +214,3 @@\n-        if (t <= 0 || equals(endValue)) {\n+        Objects.requireNonNull(endValue, \"endValue cannot be null\");\n+\n+        if (t <= 0) {\n@@ -196,1 +220,1 @@\n-        if (t >= 1 || !isInterpolatable() || !endValue.isInterpolatable()) {\n+        if (t >= 1) {\n@@ -200,3 +224,27 @@\n-        double width = this.width != AUTO && endValue.width != AUTO ?\n-            Utils.interpolate(this.width, endValue.width, this.widthAsPercentage, endValue.widthAsPercentage, t) :\n-            endValue.width;\n+        if (cover || contain || endValue.cover || endValue.contain) {\n+            return t < 0.5 ? this : endValue;\n+        }\n+\n+        double newWidth = interpolate(\n+            this.width, endValue.width, this.widthAsPercentage, endValue.widthAsPercentage, t);\n+\n+        double newHeight = interpolate(\n+            this.height, endValue.height, this.heightAsPercentage, endValue.heightAsPercentage, t);\n+\n+        boolean newWidthAsPercentage, newHeightAsPercentage;\n+\n+        if (t < 0.5) {\n+            newWidthAsPercentage = this.widthAsPercentage;\n+            newHeightAsPercentage = this.heightAsPercentage;\n+        } else {\n+            newWidthAsPercentage = endValue.widthAsPercentage;\n+            newHeightAsPercentage = endValue.heightAsPercentage;\n+        }\n+\n+        if (isSame(newWidth, newHeight, newWidthAsPercentage, newHeightAsPercentage)) {\n+            return this;\n+        }\n+\n+        if (endValue.isSame(newWidth, newHeight, newWidthAsPercentage, newHeightAsPercentage)) {\n+            return endValue;\n+        }\n@@ -204,3 +252,2 @@\n-        double height = this.height != AUTO && endValue.height != AUTO ?\n-            Utils.interpolate(this.height, endValue.height, this.heightAsPercentage, endValue.heightAsPercentage, t) :\n-            endValue.height;\n+        return new BackgroundSize(newWidth, newHeight, newWidthAsPercentage, newHeightAsPercentage, false, false);\n+    }\n@@ -208,3 +255,5 @@\n-        return new BackgroundSize(width, height,\n-                                  endValue.widthAsPercentage, endValue.heightAsPercentage,\n-                                  endValue.contain, endValue.cover);\n+    private boolean isSame(double width, double height, boolean widthAsPercentage, boolean heightAsPercentage) {\n+        return this.width == width\n+            && this.height == height\n+            && this.widthAsPercentage == widthAsPercentage\n+            && this.heightAsPercentage == heightAsPercentage;\n@@ -213,2 +262,6 @@\n-    private boolean isInterpolatable() {\n-        return !cover && !contain && (width != AUTO || height != AUTO);\n+    private static double interpolate(double start, double end,\n+                                      boolean startIsPercentage, boolean endIsPercentage,\n+                                      double t) {\n+        return startIsPercentage == endIsPercentage && start != AUTO && end != AUTO ?\n+            Utils.interpolate(start, end, t) :\n+            Utils.interpolateDiscrete(start, end, t);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BackgroundSize.java","additions":68,"deletions":15,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -170,2 +170,3 @@\n-     * @return the list of BorderStrokes which together define the stroked\n-     * portion of this Border\n+     *\n+     * @return the list of BorderStrokes which together define the stroked portion of this Border\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#pairwise\">pairwise<\/a>\n@@ -185,0 +186,1 @@\n+     *\n@@ -186,1 +188,2 @@\n-     * instead of stroke for this Border\n+     *         instead of stroke for this Border\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#pairwise\">pairwise<\/a>\n@@ -415,0 +418,1 @@\n+     * @throws NullPointerException {@inheritDoc}\n@@ -419,0 +423,2 @@\n+        Objects.requireNonNull(endValue, \"endValue cannot be null\");\n+\n@@ -427,2 +433,5 @@\n-        List<BorderImage> newImages = Utils.interpolateListsPairwise(images, endValue.images, t);\n-        List<BorderStroke> newStrokes = Utils.interpolateListsPairwise(strokes, endValue.strokes, t);\n+        List<BorderImage> newImages = images == endValue.images ?\n+            images : Utils.interpolateListsPairwise(images, endValue.images, t);\n+\n+        List<BorderStroke> newStrokes = strokes == endValue.strokes ?\n+            strokes : Utils.interpolateListsPairwise(strokes, endValue.strokes, t);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/Border.java","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.Objects;\n@@ -58,0 +59,1 @@\n+     *\n@@ -59,0 +61,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -67,0 +70,1 @@\n+     *\n@@ -68,1 +72,2 @@\n-     * is to be repeated along the x-axis of the region\n+     *         is to be repeated along the x-axis of the region\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -77,0 +82,1 @@\n+     *\n@@ -78,1 +84,2 @@\n-     * is to be repeated along the y-axis of the region\n+     *         is to be repeated along the y-axis of the region\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -88,0 +95,1 @@\n+     *\n@@ -89,0 +97,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#default\">default<\/a>\n@@ -107,0 +116,1 @@\n+     *\n@@ -108,0 +118,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#default\">default<\/a>\n@@ -116,0 +127,1 @@\n+     *\n@@ -117,0 +129,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -124,0 +137,1 @@\n+     *\n@@ -125,0 +139,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#default\">default<\/a>\n@@ -193,0 +208,1 @@\n+     * @throws NullPointerException {@inheritDoc}\n@@ -197,0 +213,2 @@\n+        Objects.requireNonNull(endValue, \"endValue cannot be null\");\n+\n@@ -213,0 +231,15 @@\n+        Image newImage;\n+        BorderRepeat newRepeatX, newRepeatY;\n+        boolean newFilled;\n+\n+        if (t < 0.5) {\n+            newImage = this.image;\n+            newRepeatX = this.repeatX;\n+            newRepeatY = this.repeatY;\n+            newFilled = this.filled;\n+        } else {\n+            newImage = endValue.image;\n+            newRepeatX = endValue.repeatX;\n+            newRepeatY = endValue.repeatY;\n+            newFilled = endValue.filled;\n+        }\n@@ -214,7 +247,1 @@\n-        if (filled == endValue.filled\n-                && image == endValue.image\n-                && repeatX == endValue.repeatX\n-                && repeatY == endValue.repeatY\n-                && widths == newWidths\n-                && slices == newSlices\n-                && insets == newInsets) {\n+        if (isSame(newImage, newWidths, newSlices, newFilled, newRepeatX, newRepeatY)) {\n@@ -224,3 +251,1 @@\n-        if (endValue.widths == newWidths\n-                && endValue.slices == newSlices\n-                && endValue.insets == newInsets) {\n+        if (endValue.isSame(newImage, newWidths, newSlices, newFilled, newRepeatX, newRepeatY)) {\n@@ -230,2 +255,12 @@\n-        return new BorderImage(\n-            endValue.image, newWidths, newInsets, newSlices, endValue.filled, endValue.repeatX, endValue.repeatY);\n+        return new BorderImage(endValue.image, newWidths, newInsets, newSlices,\n+                               endValue.filled, endValue.repeatX, endValue.repeatY);\n+    }\n+\n+    private boolean isSame(Image image, BorderWidths widths, BorderWidths slices, boolean filled,\n+                           BorderRepeat repeatX, BorderRepeat repeatY) {\n+        return this.image == image\n+            && this.widths == widths\n+            && this.slices == slices\n+            && this.filled == filled\n+            && this.repeatX == repeatX\n+            && this.repeatY == repeatY;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BorderImage.java","additions":49,"deletions":14,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import javafx.scene.paint.LinearGradient;\n@@ -34,0 +35,1 @@\n+import javafx.scene.paint.RadialGradient;\n@@ -35,0 +37,1 @@\n+import java.util.Objects;\n@@ -47,0 +50,9 @@\n+ * <p>\n+ * {@code BorderStroke} supports interpolation between the following heterogeneous paint combinations:\n+ * <ul>\n+ *     <li>{@link Color} ↔ {@link LinearGradient}\n+ *     <li>{@link Color} ↔ {@link RadialGradient}\n+ * <\/ul>\n+ * Heterogeneous paint interpolation converts the {@code Color} to a visually identical gradient paint,\n+ * and then performs a gradient paint interpolation. If heterogeneous paints cannot be interpolated as\n+ * described, the paints are interpolated <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discretely<\/a>.\n@@ -50,1 +62,1 @@\n-public final class BorderStroke implements Interpolatable<BorderStroke> {\n+public class BorderStroke implements Interpolatable<BorderStroke> {\n@@ -77,0 +89,1 @@\n+     * @interpolationType see {@link BorderStroke}\n@@ -90,0 +103,1 @@\n+     * @interpolationType see {@link BorderStroke}\n@@ -100,0 +114,1 @@\n+     * @interpolationType see {@link BorderStroke}\n@@ -110,0 +125,1 @@\n+     * @interpolationType see {@link BorderStroke}\n@@ -119,0 +135,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -129,0 +146,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -140,0 +158,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -151,0 +170,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -158,0 +178,1 @@\n+     *\n@@ -159,0 +180,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#default\">default<\/a>\n@@ -166,0 +188,1 @@\n+     *\n@@ -167,0 +190,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#default\">default<\/a>\n@@ -178,0 +202,1 @@\n+     *\n@@ -179,0 +204,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#default\">default<\/a>\n@@ -366,0 +392,1 @@\n+     * @throws NullPointerException {@inheritDoc}\n@@ -370,0 +397,2 @@\n+        Objects.requireNonNull(endValue, \"endValue cannot be null\");\n+\n@@ -390,0 +419,13 @@\n+        BorderStrokeStyle newTopStyle, newRightStyle, newBottomStyle, newLeftStyle;\n+\n+        if (t < 0.5) {\n+            newTopStyle = this.topStyle;\n+            newRightStyle = this.rightStyle;\n+            newBottomStyle = this.bottomStyle;\n+            newLeftStyle = this.leftStyle;\n+        } else {\n+            newTopStyle = endValue.topStyle;\n+            newRightStyle = endValue.rightStyle;\n+            newBottomStyle = endValue.bottomStyle;\n+            newLeftStyle = endValue.leftStyle;\n+        }\n@@ -391,6 +433,3 @@\n-        if (topStyle == endValue.topStyle\n-                && rightStyle == endValue.rightStyle\n-                && bottomStyle == endValue.bottomStyle\n-                && leftStyle == endValue.leftStyle\n-                && isSame(newTopStroke, newRightStroke, newBottomStroke, newLeftStroke,\n-                          newRadii, newWidths, newInsets)) {\n+        if (isSame(newTopStroke, newRightStroke, newBottomStroke, newLeftStroke,\n+                   newTopStyle, newRightStyle, newBottomStyle, newLeftStyle,\n+                   newRadii, newWidths, newInsets)) {\n@@ -401,0 +440,1 @@\n+                            newTopStyle, newRightStyle, newBottomStyle, newLeftStyle,\n@@ -406,1 +446,1 @@\n-                                endValue.topStyle, endValue.rightStyle, endValue.bottomStyle, endValue.leftStyle,\n+                                newTopStyle, newRightStyle, newBottomStyle, newLeftStyle,\n@@ -411,0 +451,2 @@\n+                           BorderStrokeStyle topStyle, BorderStrokeStyle rightStyle,\n+                           BorderStrokeStyle bottomStyle, BorderStrokeStyle leftStyle,\n@@ -416,0 +458,4 @@\n+            && this.topStyle == topStyle\n+            && this.rightStyle == rightStyle\n+            && this.bottomStyle == bottomStyle\n+            && this.leftStyle == leftStyle\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BorderStroke.java","additions":54,"deletions":8,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Objects;\n@@ -76,0 +77,1 @@\n+     *\n@@ -77,0 +79,4 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a> if both values are\n+     *                    absolute or both values are {@link #isTopAsPercentage() percentages}, and both\n+     *                    values are not the special value {@link #AUTO};\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -86,0 +92,1 @@\n+     *\n@@ -87,0 +94,4 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a> if both values are\n+     *                    absolute or both values are {@link #isRightAsPercentage() percentages}, and both\n+     *                    values are not the special value {@link #AUTO};\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -96,0 +107,1 @@\n+     *\n@@ -97,0 +109,4 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a> if both values are\n+     *                    absolute or both values are {@link #isBottomAsPercentage() percentages}, and both\n+     *                    values are not the special value {@link #AUTO};\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -106,0 +122,1 @@\n+     *\n@@ -107,0 +124,4 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a> if both values are\n+     *                    absolute or both values are {@link #isLeftAsPercentage() percentages}, and both\n+     *                    values are not the special value {@link #AUTO};\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -114,0 +135,1 @@\n+     *\n@@ -115,0 +137,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -122,0 +145,1 @@\n+     *\n@@ -123,0 +147,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -130,0 +155,1 @@\n+     *\n@@ -131,0 +157,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -138,0 +165,1 @@\n+     *\n@@ -139,0 +167,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -230,0 +259,1 @@\n+     * @throws NullPointerException {@inheritDoc}\n@@ -234,0 +264,2 @@\n+        Objects.requireNonNull(endValue, \"endValue cannot be null\");\n+\n@@ -242,4 +274,69 @@\n-        double top = Utils.interpolate(this.top, endValue.top, this.topAsPercentage, endValue.topAsPercentage, t);\n-        double right = Utils.interpolate(this.right, endValue.right, this.rightAsPercentage, endValue.rightAsPercentage, t);\n-        double bottom = Utils.interpolate(this.bottom, endValue.bottom, this.bottomAsPercentage, endValue.bottomAsPercentage, t);\n-        double left = Utils.interpolate(this.left, endValue.left, this.leftAsPercentage, endValue.leftAsPercentage, t);\n+        double newTop, newRight, newBottom, newLeft;\n+        boolean newTopAsPercentage, newRightAsPercentage, newBottomAsPercentage, newLeftAsPercentage;\n+\n+        if (this.topAsPercentage == endValue.topAsPercentage) {\n+            newTop = interpolate(this.top, endValue.top, t);\n+            newTopAsPercentage = this.topAsPercentage;\n+        } else if (t < 0.5) {\n+            newTop = this.top;\n+            newTopAsPercentage = this.topAsPercentage;\n+        } else {\n+            newTop = endValue.top;\n+            newTopAsPercentage = endValue.topAsPercentage;\n+        }\n+\n+        if (this.rightAsPercentage == endValue.rightAsPercentage) {\n+            newRight = interpolate(this.right, endValue.right, t);\n+            newRightAsPercentage = this.rightAsPercentage;\n+        } else if (t < 0.5) {\n+            newRight = this.right;\n+            newRightAsPercentage = this.rightAsPercentage;\n+        } else {\n+            newRight = endValue.right;\n+            newRightAsPercentage = endValue.rightAsPercentage;\n+        }\n+\n+        if (this.bottomAsPercentage == endValue.bottomAsPercentage) {\n+            newBottom = interpolate(this.bottom, endValue.bottom, t);\n+            newBottomAsPercentage = this.bottomAsPercentage;\n+        } else if (t < 0.5) {\n+            newBottom = this.bottom;\n+            newBottomAsPercentage = this.bottomAsPercentage;\n+        } else {\n+            newBottom = endValue.bottom;\n+            newBottomAsPercentage = endValue.bottomAsPercentage;\n+        }\n+\n+        if (this.leftAsPercentage == endValue.leftAsPercentage) {\n+            newLeft = interpolate(this.left, endValue.left, t);\n+            newLeftAsPercentage = this.leftAsPercentage;\n+        } else if (t < 0.5) {\n+            newLeft = this.left;\n+            newLeftAsPercentage = this.leftAsPercentage;\n+        } else {\n+            newLeft = endValue.left;\n+            newLeftAsPercentage = endValue.leftAsPercentage;\n+        }\n+\n+        if (isSame(newTop, newRight, newBottom, newLeft,\n+                   newTopAsPercentage, newRightAsPercentage,\n+                   newBottomAsPercentage, newLeftAsPercentage)) {\n+            return this;\n+        }\n+\n+        if (endValue.isSame(newTop, newRight, newBottom, newLeft,\n+                            newTopAsPercentage, newRightAsPercentage,\n+                            newBottomAsPercentage, newLeftAsPercentage)) {\n+            return endValue;\n+        }\n+\n+        return new BorderWidths(\n+            newTop, newRight, newBottom, newLeft,\n+            newTopAsPercentage, newRightAsPercentage, newBottomAsPercentage, newLeftAsPercentage);\n+    }\n+\n+    private static double interpolate(double start, double end, double t) {\n+        return start != AUTO && end != AUTO ?\n+            Utils.interpolate(start, end, t) :\n+            Utils.interpolateDiscrete(start, end, t);\n+    }\n@@ -247,2 +344,11 @@\n-        return new BorderWidths(top, right, bottom, left, endValue.topAsPercentage, endValue.rightAsPercentage,\n-                                endValue.bottomAsPercentage, endValue.leftAsPercentage);\n+    private boolean isSame(double top, double right, double bottom, double left,\n+                           boolean topAsPercentage, boolean rightAsPercentage,\n+                           boolean bottomAsPercentage, boolean leftAsPercentage) {\n+        return this.top == top\n+            && this.right == right\n+            && this.bottom == bottom\n+            && this.left == left\n+            && this.topAsPercentage == topAsPercentage\n+            && this.rightAsPercentage == rightAsPercentage\n+            && this.bottomAsPercentage == bottomAsPercentage\n+            && this.leftAsPercentage == leftAsPercentage;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/BorderWidths.java","additions":112,"deletions":6,"binary":false,"changes":118,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Objects;\n@@ -53,0 +54,1 @@\n+     *\n@@ -54,0 +56,3 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a> if both values are\n+     *                    absolute or both values are {@link #isTopLeftHorizontalRadiusAsPercentage() percentages},\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -60,0 +65,1 @@\n+     *\n@@ -61,0 +67,3 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a> if both values are\n+     *                    absolute or both values are {@link #isTopLeftVerticalRadiusAsPercentage() percentages},\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -67,0 +76,1 @@\n+     *\n@@ -68,0 +78,3 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a> if both values are\n+     *                    absolute or both values are {@link #isTopRightVerticalRadiusAsPercentage() percentages},\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -74,0 +87,1 @@\n+     *\n@@ -75,0 +89,3 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a> if both values are\n+     *                    absolute or both values are {@link #isTopRightHorizontalRadiusAsPercentage() percentages},\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -81,0 +98,1 @@\n+     *\n@@ -82,0 +100,3 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a> if both values are\n+     *                    absolute or both values are {@link #isBottomRightHorizontalRadiusAsPercentage() percentages},\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -88,0 +109,1 @@\n+     *\n@@ -89,0 +111,3 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a> if both values are\n+     *                    absolute or both values are {@link #isBottomRightVerticalRadiusAsPercentage() percentages},\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -95,0 +120,1 @@\n+     *\n@@ -96,0 +122,3 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a> if both values are\n+     *                    absolute or both values are {@link #isBottomLeftVerticalRadiusAsPercentage() percentages},\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -102,0 +131,1 @@\n+     *\n@@ -103,0 +133,3 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a> if both values are\n+     *                    absolute or both values are {@link #isBottomLeftHorizontalRadiusAsPercentage() percentages},\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -108,1 +141,2 @@\n-     * indicates whether {@code topLeftHorizontalRadius} is interpreted as a value or a percentage.\n+     * Indicates whether {@code topLeftHorizontalRadius} is interpreted as a value or a percentage.\n+     *\n@@ -110,0 +144,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -115,1 +150,2 @@\n-     * indicates whether {@code topLeftVerticalRadius} is interpreted as a value or a percentage.\n+     * Indicates whether {@code topLeftVerticalRadius} is interpreted as a value or a percentage.\n+     *\n@@ -117,0 +153,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -122,1 +159,2 @@\n-     * indicates whether {@code topRightVerticalRadius} is interpreted as a value or a percentage.\n+     * Indicates whether {@code topRightVerticalRadius} is interpreted as a value or a percentage.\n+     *\n@@ -124,0 +162,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -129,1 +168,2 @@\n-     * indicates whether {@code topRightHorizontalRadius} is interpreted as a value or a percentage.\n+     * Indicates whether {@code topRightHorizontalRadius} is interpreted as a value or a percentage.\n+     *\n@@ -131,0 +171,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -136,1 +177,2 @@\n-     * indicates whether {@code bottomRightHorizontalRadius} is interpreted as a value or a percentage.\n+     * Indicates whether {@code bottomRightHorizontalRadius} is interpreted as a value or a percentage.\n+     *\n@@ -138,0 +180,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -143,1 +186,2 @@\n-     * indicates whether {@code bottomRightVerticalRadius} is interpreted as a value or a percentage.\n+     * Indicates whether {@code bottomRightVerticalRadius} is interpreted as a value or a percentage.\n+     *\n@@ -145,0 +189,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -150,1 +195,2 @@\n-     * indicates whether {@code bottomLeftVerticalRadius} is interpreted as a value or a percentage.\n+     * Indicates whether {@code bottomLeftVerticalRadius} is interpreted as a value or a percentage.\n+     *\n@@ -152,0 +198,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -157,1 +204,2 @@\n-     * indicates whether {@code bottomLeftHorizontalRadius} is interpreted as a value or a percentage.\n+     * Indicates whether {@code bottomLeftHorizontalRadius} is interpreted as a value or a percentage.\n+     *\n@@ -159,0 +207,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -366,0 +415,1 @@\n+     * @throws NullPointerException {@inheritDoc}\n@@ -370,1 +420,3 @@\n-        if (t <= 0 || equals(endValue)) {\n+        Objects.requireNonNull(endValue, \"endValue cannot be null\");\n+\n+        if (t <= 0) {\n@@ -378,4 +430,4 @@\n-        return uniform && endValue.uniform ?\n-            interpolateUniform(endValue, t) :\n-            interpolateNonUniform(endValue, t);\n-    }\n+        if (uniform && endValue.uniform) {\n+            double newRadius = interpolate(\n+                this.topLeftHorizontalRadius, endValue.topLeftHorizontalRadius,\n+                this.topLeftHorizontalRadiusAsPercentage, endValue.topLeftHorizontalRadiusAsPercentage, t);\n@@ -383,4 +435,3 @@\n-    private CornerRadii interpolateUniform(CornerRadii endValue, double t) {\n-        double radius = Utils.interpolate(\n-            this.topLeftHorizontalRadius, endValue.topLeftHorizontalRadius,\n-            this.topLeftHorizontalRadiusAsPercentage, endValue.topLeftHorizontalRadiusAsPercentage, t);\n+            boolean newRadiusAsPercentage = t < 0.5 ?\n+                this.topLeftHorizontalRadiusAsPercentage :\n+                endValue.topLeftHorizontalRadiusAsPercentage;\n@@ -388,2 +439,4 @@\n-        return new CornerRadii(radius, endValue.topLeftHorizontalRadiusAsPercentage);\n-    }\n+            if (topLeftHorizontalRadius == newRadius\n+                    && topLeftHorizontalRadiusAsPercentage == newRadiusAsPercentage) {\n+                return this;\n+            }\n@@ -391,2 +444,38 @@\n-    private CornerRadii interpolateNonUniform(CornerRadii endValue, double t) {\n-        double topLeftHorizontalRadius = Utils.interpolate(\n+            if (endValue.topLeftHorizontalRadius == newRadius\n+                    && endValue.topLeftHorizontalRadiusAsPercentage == newRadiusAsPercentage) {\n+                return endValue;\n+            }\n+\n+            return new CornerRadii(newRadius, newRadiusAsPercentage);\n+        }\n+\n+        boolean newTopLeftHorizontalRadiusAsPercentage,\n+                newTopLeftVerticalRadiusAsPercentage,\n+                newTopRightVerticalRadiusAsPercentage,\n+                newTopRightHorizontalRadiusAsPercentage,\n+                newBottomRightHorizontalRadiusAsPercentage,\n+                newBottomRightVerticalRadiusAsPercentage,\n+                newBottomLeftVerticalRadiusAsPercentage,\n+                newBottomLeftHorizontalRadiusAsPercentage;\n+\n+        if (t < 0.5) {\n+            newTopLeftHorizontalRadiusAsPercentage = this.topLeftHorizontalRadiusAsPercentage;\n+            newTopLeftVerticalRadiusAsPercentage = this.topLeftVerticalRadiusAsPercentage;\n+            newTopRightVerticalRadiusAsPercentage = this.topRightVerticalRadiusAsPercentage;\n+            newTopRightHorizontalRadiusAsPercentage = this.topRightHorizontalRadiusAsPercentage;\n+            newBottomRightHorizontalRadiusAsPercentage = this.bottomRightHorizontalRadiusAsPercentage;\n+            newBottomRightVerticalRadiusAsPercentage = this.bottomRightVerticalRadiusAsPercentage;\n+            newBottomLeftVerticalRadiusAsPercentage = this.bottomLeftVerticalRadiusAsPercentage;\n+            newBottomLeftHorizontalRadiusAsPercentage = this.bottomLeftHorizontalRadiusAsPercentage;\n+        } else {\n+            newTopLeftHorizontalRadiusAsPercentage = endValue.topLeftHorizontalRadiusAsPercentage;\n+            newTopLeftVerticalRadiusAsPercentage = endValue.topLeftVerticalRadiusAsPercentage;\n+            newTopRightVerticalRadiusAsPercentage = endValue.topRightVerticalRadiusAsPercentage;\n+            newTopRightHorizontalRadiusAsPercentage = endValue.topRightHorizontalRadiusAsPercentage;\n+            newBottomRightHorizontalRadiusAsPercentage = endValue.bottomRightHorizontalRadiusAsPercentage;\n+            newBottomRightVerticalRadiusAsPercentage = endValue.bottomRightVerticalRadiusAsPercentage;\n+            newBottomLeftVerticalRadiusAsPercentage = endValue.bottomLeftVerticalRadiusAsPercentage;\n+            newBottomLeftHorizontalRadiusAsPercentage = endValue.bottomLeftHorizontalRadiusAsPercentage;\n+        }\n+\n+        double newTopLeftHorizontalRadius = interpolate(\n@@ -396,1 +485,1 @@\n-        double topLeftVerticalRadius = Utils.interpolate(\n+        double newTopLeftVerticalRadius = interpolate(\n@@ -400,1 +489,1 @@\n-        double topRightVerticalRadius = Utils.interpolate(\n+        double newTopRightVerticalRadius = interpolate(\n@@ -404,1 +493,1 @@\n-        double topRightHorizontalRadius = Utils.interpolate(\n+        double newTopRightHorizontalRadius = interpolate(\n@@ -408,1 +497,1 @@\n-        double bottomRightHorizontalRadius = Utils.interpolate(\n+        double newBottomRightHorizontalRadius = interpolate(\n@@ -412,1 +501,1 @@\n-        double bottomRightVerticalRadius = Utils.interpolate(\n+        double newBottomRightVerticalRadius = interpolate(\n@@ -416,1 +505,1 @@\n-        double bottomLeftVerticalRadius = Utils.interpolate(\n+        double newBottomLeftVerticalRadius = interpolate(\n@@ -420,1 +509,1 @@\n-        double bottomLeftHorizontalRadius = Utils.interpolate(\n+        double newBottomLeftHorizontalRadius = interpolate(\n@@ -424,0 +513,22 @@\n+        if (isSame(newTopLeftHorizontalRadius, newTopLeftVerticalRadius,\n+                   newTopRightVerticalRadius, newTopRightHorizontalRadius,\n+                   newBottomRightHorizontalRadius, newBottomRightVerticalRadius,\n+                   newBottomLeftVerticalRadius, newBottomLeftHorizontalRadius,\n+                   newTopLeftHorizontalRadiusAsPercentage, newTopLeftVerticalRadiusAsPercentage,\n+                   newTopRightVerticalRadiusAsPercentage, newTopRightHorizontalRadiusAsPercentage,\n+                   newBottomRightHorizontalRadiusAsPercentage, newBottomRightVerticalRadiusAsPercentage,\n+                   newBottomLeftVerticalRadiusAsPercentage, newBottomLeftHorizontalRadiusAsPercentage)) {\n+            return this;\n+        }\n+\n+        if (endValue.isSame(newTopLeftHorizontalRadius, newTopLeftVerticalRadius,\n+                            newTopRightVerticalRadius, newTopRightHorizontalRadius,\n+                            newBottomRightHorizontalRadius, newBottomRightVerticalRadius,\n+                            newBottomLeftVerticalRadius, newBottomLeftHorizontalRadius,\n+                            newTopLeftHorizontalRadiusAsPercentage, newTopLeftVerticalRadiusAsPercentage,\n+                            newTopRightVerticalRadiusAsPercentage, newTopRightHorizontalRadiusAsPercentage,\n+                            newBottomRightHorizontalRadiusAsPercentage, newBottomRightVerticalRadiusAsPercentage,\n+                            newBottomLeftVerticalRadiusAsPercentage, newBottomLeftHorizontalRadiusAsPercentage)) {\n+            return endValue;\n+        }\n+\n@@ -425,8 +536,42 @@\n-            topLeftHorizontalRadius, topLeftVerticalRadius,\n-            topRightVerticalRadius, topRightHorizontalRadius,\n-            bottomRightHorizontalRadius, bottomRightVerticalRadius,\n-            bottomLeftVerticalRadius, bottomLeftHorizontalRadius,\n-            endValue.topLeftHorizontalRadiusAsPercentage, endValue.topLeftVerticalRadiusAsPercentage,\n-            endValue.topRightVerticalRadiusAsPercentage, endValue.topRightHorizontalRadiusAsPercentage,\n-            endValue.bottomRightHorizontalRadiusAsPercentage, endValue.bottomRightVerticalRadiusAsPercentage,\n-            endValue.bottomLeftVerticalRadiusAsPercentage, endValue.bottomLeftHorizontalRadiusAsPercentage);\n+            newTopLeftHorizontalRadius, newTopLeftVerticalRadius,\n+            newTopRightVerticalRadius, newTopRightHorizontalRadius,\n+            newBottomRightHorizontalRadius, newBottomRightVerticalRadius,\n+            newBottomLeftVerticalRadius, newBottomLeftHorizontalRadius,\n+            newTopLeftHorizontalRadiusAsPercentage, newTopLeftVerticalRadiusAsPercentage,\n+            newTopRightVerticalRadiusAsPercentage, newTopRightHorizontalRadiusAsPercentage,\n+            newBottomRightHorizontalRadiusAsPercentage, newBottomRightVerticalRadiusAsPercentage,\n+            newBottomLeftVerticalRadiusAsPercentage, newBottomLeftHorizontalRadiusAsPercentage);\n+    }\n+\n+    private static double interpolate(double start, double end,\n+                                      boolean startIsPercentage, boolean endIsPercentage,\n+                                      double t) {\n+        return startIsPercentage == endIsPercentage ?\n+            Utils.interpolate(start, end, t) :\n+            Utils.interpolateDiscrete(start, end, t);\n+    }\n+\n+    private boolean isSame(double topLeftHorizontalRadius, double topLeftVerticalRadius,\n+                           double topRightVerticalRadius, double topRightHorizontalRadius,\n+                           double bottomRightHorizontalRadius, double bottomRightVerticalRadius,\n+                           double bottomLeftVerticalRadius, double bottomLeftHorizontalRadius,\n+                           boolean topLeftHorizontalRadiusAsPercentage, boolean topLeftVerticalRadiusAsPercentage,\n+                           boolean topRightVerticalRadiusAsPercentage, boolean topRightHorizontalRadiusAsPercentage,\n+                           boolean bottomRightHorizontalRadiusAsPercentage, boolean bottomRightVerticalRadiusAsPercentage,\n+                           boolean bottomLeftVerticalRadiusAsPercentage, boolean bottomLeftHorizontalRadiusAsPercentage) {\n+        return this.topLeftHorizontalRadius == topLeftHorizontalRadius\n+            && this.topLeftVerticalRadius == topLeftVerticalRadius\n+            && this.topRightVerticalRadius == topRightVerticalRadius\n+            && this.topRightHorizontalRadius == topRightHorizontalRadius\n+            && this.bottomRightHorizontalRadius == bottomRightHorizontalRadius\n+            && this.bottomRightVerticalRadius == bottomRightVerticalRadius\n+            && this.bottomLeftVerticalRadius == bottomLeftVerticalRadius\n+            && this.bottomLeftHorizontalRadius == bottomLeftHorizontalRadius\n+            && this.topLeftHorizontalRadiusAsPercentage == topLeftHorizontalRadiusAsPercentage\n+            && this.topLeftVerticalRadiusAsPercentage == topLeftVerticalRadiusAsPercentage\n+            && this.topRightVerticalRadiusAsPercentage == topRightVerticalRadiusAsPercentage\n+            && this.topRightHorizontalRadiusAsPercentage == topRightHorizontalRadiusAsPercentage\n+            && this.bottomRightHorizontalRadiusAsPercentage == bottomRightHorizontalRadiusAsPercentage\n+            && this.bottomRightVerticalRadiusAsPercentage == bottomRightVerticalRadiusAsPercentage\n+            && this.bottomLeftVerticalRadiusAsPercentage == bottomLeftVerticalRadiusAsPercentage\n+            && this.bottomLeftHorizontalRadiusAsPercentage == bottomLeftHorizontalRadiusAsPercentage;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/CornerRadii.java","additions":181,"deletions":36,"binary":false,"changes":217,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Objects;\n@@ -1844,0 +1845,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n@@ -1853,0 +1855,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n@@ -1862,0 +1865,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n@@ -1871,0 +1875,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n@@ -1939,0 +1944,3 @@\n+     *\n+     * @throws NullPointerException {@inheritDoc}\n+     * @since 23\n@@ -1940,1 +1948,4 @@\n-    @Override public Color interpolate(Color endValue, double t) {\n+    @Override\n+    public Color interpolate(Color endValue, double t) {\n+        Objects.requireNonNull(endValue, \"endValue cannot be null\");\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/paint\/Color.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.util.Objects;\n@@ -155,0 +156,3 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n+     *                    if both values are absolute or both values are {@link #isProportional() proportional},\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -167,0 +171,3 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n+     *                    if both values are absolute or both values are {@link #isProportional() proportional},\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -180,0 +187,3 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n+     *                    if both values are absolute or both values are {@link #isProportional() proportional},\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -193,0 +203,3 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n+     *                    if both values are absolute or both values are {@link #isProportional() proportional},\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -211,0 +224,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -226,0 +240,1 @@\n+    private int hash;\n@@ -278,0 +293,1 @@\n+     * @throws NullPointerException {@inheritDoc}\n@@ -282,0 +298,2 @@\n+        Objects.requireNonNull(endValue, \"endValue cannot be null\");\n+\n@@ -286,1 +304,1 @@\n-        if (t >= 1 || proportional != endValue.proportional) {\n+        if (t >= 1) {\n@@ -290,0 +308,4 @@\n+        if (proportional != endValue.proportional) {\n+            return Utils.interpolateDiscrete(this, endValue, t);\n+        }\n+\n@@ -291,1 +313,1 @@\n-            endValue.image,\n+            Utils.interpolateDiscrete(image, endValue.image, t),\n@@ -296,1 +318,1 @@\n-            endValue.proportional);\n+            proportional);\n@@ -313,0 +335,16 @@\n+    @Override\n+    public int hashCode() {\n+        if (hash == 0) {\n+            long bits = 17L;\n+            bits = 37L * bits + Double.doubleToLongBits(x);\n+            bits = 37L * bits + Double.doubleToLongBits(y);\n+            bits = 37L * bits + Double.doubleToLongBits(width);\n+            bits = 37L * bits + Double.doubleToLongBits(height);\n+            bits = 37L * bits + ((proportional) ? 1231L : 1237L);\n+            bits = 37L * bits + image.hashCode();\n+            hash = (int) (bits ^ (bits >> 32));\n+        }\n+\n+        return hash;\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/paint\/ImagePattern.java","additions":41,"deletions":3,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-\n+import java.util.Objects;\n@@ -83,1 +83,1 @@\n-     * point on a unit square that will be scaled to match the size of the\n+     * point on a unit square that will be scaled to match the size of\n@@ -85,1 +85,1 @@\n-     (\n+     *\n@@ -88,0 +88,3 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n+     *                    if both values are absolute or both values are {@link #isProportional() proportional},\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -98,1 +101,1 @@\n-     * point on a unit square that will be scaled to match the size of the\n+     * point on a unit square that will be scaled to match the size of\n@@ -103,0 +106,3 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n+     *                    if both values are absolute or both values are {@link #isProportional() proportional},\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -113,1 +119,1 @@\n-     * point on a unit square that will be scaled to match the size of the\n+     * point on a unit square that will be scaled to match the size of\n@@ -118,0 +124,3 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n+     *                    if both values are absolute or both values are {@link #isProportional() proportional},\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -128,1 +137,1 @@\n-     * point on a unit square that will be scaled to match the size of the\n+     * point on a unit square that will be scaled to match the size of\n@@ -133,0 +142,3 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n+     *                    if both values are absolute or both values are {@link #isProportional() proportional},\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -150,0 +162,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -164,0 +177,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -185,0 +199,3 @@\n+     * @interpolationType Stop list interpolation produces smooth transitions of gradient stops by allowing\n+     *                    the insertion of new stops along the gradient. At most, the intermediate stop list\n+     *                    has the combined number of gradient stops of both the start list and the target list.\n@@ -316,0 +333,1 @@\n+     * @throws NullPointerException {@inheritDoc}\n@@ -320,0 +338,2 @@\n+        Objects.requireNonNull(endValue, \"endValue cannot be null\");\n+\n@@ -326,1 +346,1 @@\n-        if (t >= 1.0 || proportional != endValue.proportional) {\n+        if (t >= 1.0) {\n@@ -330,5 +350,28 @@\n-        double newStartX = Utils.interpolate(this.startX, endValue.startX, t);\n-        double newStartY = Utils.interpolate(this.startY, endValue.startY, t);\n-        double newEndX = Utils.interpolate(this.endX, endValue.endX, t);\n-        double newEndY = Utils.interpolate(this.endY, endValue.endY, t);\n-        List<Stop> newStops = Stop.interpolateLists(this.stops, endValue.stops, t);\n+        double newStartX, newStartY, newEndX, newEndY;\n+        boolean newProportional;\n+\n+        if (this.proportional == endValue.proportional) {\n+            newStartX = Utils.interpolate(this.startX, endValue.startX, t);\n+            newStartY = Utils.interpolate(this.startY, endValue.startY, t);\n+            newEndX = Utils.interpolate(this.endX, endValue.endX, t);\n+            newEndY = Utils.interpolate(this.endY, endValue.endY, t);\n+            newProportional = this.proportional;\n+        } else if (t < 0.5) {\n+            newStartX = this.startX;\n+            newStartY = this.startY;\n+            newEndX = this.endX;\n+            newEndY = this.endY;\n+            newProportional = this.proportional;\n+        } else {\n+            newStartX = endValue.startX;\n+            newStartY = endValue.startY;\n+            newEndX = endValue.endX;\n+            newEndY = endValue.endY;\n+            newProportional = endValue.proportional;\n+        }\n+\n+        CycleMethod newCycleMethod = Utils.interpolateDiscrete(this.cycleMethod, endValue.cycleMethod, t);\n+\n+        \/\/ Optimization: if both lists are equal, we don't compute a new intermediate list.\n+        List<Stop> newStops = this.stops.equals(endValue.stops) ?\n+            null : Stop.interpolateLists(this.stops, endValue.stops, t);\n@@ -336,2 +379,2 @@\n-        if (cycleMethod == endValue.cycleMethod\n-                && isSame(newStartX, newStartY, newEndX, newEndY, newStops)) {\n+        if (isSame(newStartX, newStartY, newEndX, newEndY, newProportional,\n+                   newCycleMethod, Objects.requireNonNullElse(newStops, this.stops))) {\n@@ -341,1 +384,2 @@\n-        if (endValue.isSame(newStartX, newStartY, newEndX, newEndY, newStops)) {\n+        if (endValue.isSame(newStartX, newStartY, newEndX, newEndY, newProportional,\n+                            newCycleMethod, Objects.requireNonNullElse(newStops, endValue.stops))) {\n@@ -346,1 +390,2 @@\n-                                  endValue.proportional, endValue.cycleMethod, newStops, 0);\n+                                  newProportional, newCycleMethod,\n+                                  Objects.requireNonNullElse(newStops, this.stops), 0);\n@@ -349,1 +394,2 @@\n-    private boolean isSame(double startX, double startY, double endX, double endY, List<Stop> stops) {\n+    private boolean isSame(double startX, double startY, double endX, double endY,\n+                           boolean proportional, CycleMethod cycleMethod, List<Stop> stops) {\n@@ -354,0 +400,2 @@\n+            && this.proportional == proportional\n+            && this.cycleMethod == cycleMethod\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/paint\/LinearGradient.java","additions":65,"deletions":17,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-\n+import java.util.Objects;\n@@ -76,2 +76,4 @@\n-     * @return the angle in degrees from the center of the gradient\n-     * to the focus point to which the first color is mapped\n+     *\n+     * @return the angle in degrees from the center of the gradient to the focus point\n+     *         to which the first color is mapped\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n@@ -90,2 +92,4 @@\n-     * @return the distance from the center of the gradient to the\n-     * focus point to which the first color is mapped\n+     *\n+     * @return the distance from the center of the gradient to the focus point to which\n+     *         the first color is mapped\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n@@ -102,1 +106,1 @@\n-     * point on a unit square that will be scaled to match the size of the\n+     * point on a unit square that will be scaled to match the size of\n@@ -106,2 +110,1 @@\n-     * @return the X coordinate of the center point of the circle defining the\n-     * gradient\n+     * @return the X coordinate of the center point of the circle defining the gradient\n@@ -109,0 +112,3 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n+     *                    if both values are absolute or both values are {@link #isProportional() proportional},\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -123,2 +129,1 @@\n-     * @return the X coordinate of the center point of the circle defining the\n-     * gradient\n+     * @return the X coordinate of the center point of the circle defining the gradient\n@@ -126,0 +131,3 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n+     *                    if both values are absolute or both values are {@link #isProportional() proportional},\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -139,2 +147,1 @@\n-     * @return the radius of the circle defining the extents of the color\n-     * gradient\n+     * @return the radius of the circle defining the extents of the color gradient\n@@ -142,0 +149,3 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n+     *                    if both values are absolute or both values are {@link #isProportional() proportional},\n+     *                    <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a> otherwise\n@@ -158,2 +168,1 @@\n-     * @return true if the center and radius values are proportional, otherwise\n-     * absolute\n+     * @return true if the center and radius values are proportional, otherwise absolute\n@@ -161,0 +170,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -175,0 +185,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#discrete\">discrete<\/a>\n@@ -196,0 +207,1 @@\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#pairwise\">pairwise<\/a>\n@@ -337,0 +349,1 @@\n+     * @throws NullPointerException {@inheritDoc}\n@@ -341,0 +354,2 @@\n+        Objects.requireNonNull(endValue, \"endValue cannot be null\");\n+\n@@ -347,1 +362,1 @@\n-        if (t >= 1.0 || proportional != endValue.proportional) {\n+        if (t >= 1.0) {\n@@ -351,0 +366,20 @@\n+        double newCenterX, newCenterY, newRadius;\n+        boolean newProportional;\n+\n+        if (this.proportional == endValue.proportional) {\n+            newCenterX = Utils.interpolate(this.centerX, endValue.centerX, t);\n+            newCenterY = Utils.interpolate(this.centerY, endValue.centerY, t);\n+            newRadius = Utils.interpolate(this.radius, endValue.radius, t);\n+            newProportional = this.proportional;\n+        } else if (t < 0.5) {\n+            newCenterX = this.centerX;\n+            newCenterY = this.centerY;\n+            newRadius = this.radius;\n+            newProportional = this.proportional;\n+        } else {\n+            newCenterX = endValue.centerX;\n+            newCenterY = endValue.centerY;\n+            newRadius = endValue.radius;\n+            newProportional = endValue.proportional;\n+        }\n+\n@@ -353,4 +388,5 @@\n-        double newCenterX = Utils.interpolate(this.centerX, endValue.centerX, t);\n-        double newCenterY = Utils.interpolate(this.centerY, endValue.centerY, t);\n-        double newRadius = Utils.interpolate(this.radius, endValue.radius, t);\n-        List<Stop> newStops = Stop.interpolateLists(this.stops, endValue.stops, t);\n+        CycleMethod newCycleMethod = Utils.interpolateDiscrete(this.cycleMethod, endValue.cycleMethod, t);\n+\n+        \/\/ Optimization: if both lists are equal, we don't compute a new intermediate list.\n+        List<Stop> newStops = this.stops.equals(endValue.stops) ?\n+            null : Stop.interpolateLists(this.stops, endValue.stops, t);\n@@ -358,2 +394,2 @@\n-        if (cycleMethod == endValue.cycleMethod\n-                && isSame(newFocusAngle, newFocusDistance, newCenterX, newCenterY, newRadius, newStops)) {\n+        if (isSame(newFocusAngle, newFocusDistance, newCenterX, newCenterY, newRadius, newProportional,\n+                   newCycleMethod, Objects.requireNonNullElse(newStops, this.stops))) {\n@@ -363,1 +399,2 @@\n-        if (endValue.isSame(newFocusAngle, newFocusDistance, newCenterX, newCenterY, newRadius, newStops)) {\n+        if (endValue.isSame(newFocusAngle, newFocusDistance, newCenterX, newCenterY, newRadius, newProportional,\n+                            newCycleMethod, Objects.requireNonNullElse(newStops, endValue.stops))) {\n@@ -367,2 +404,2 @@\n-        return new RadialGradient(newFocusAngle, newFocusDistance, newCenterX, newCenterY, newRadius,\n-                                  endValue.proportional, endValue.cycleMethod, newStops, 0);\n+        return new RadialGradient(newFocusAngle, newFocusDistance, newCenterX, newCenterY, newRadius, newProportional,\n+                                  newCycleMethod, Objects.requireNonNullElse(newStops, this.stops), 0);\n@@ -372,1 +409,1 @@\n-                           double radius, List<Stop> stops) {\n+                           double radius, boolean proportional, CycleMethod cycleMethod, List<Stop> stops) {\n@@ -378,0 +415,2 @@\n+            && this.proportional == proportional\n+            && this.cycleMethod == cycleMethod\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/paint\/RadialGradient.java","additions":64,"deletions":25,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -143,1 +143,2 @@\n-     * @return a new unmodifiable list, or {@code firstList} when {@code t <= 0} or both lists are equal\n+     * @return the interpolated list, which may also be {@code firstList} or {@code secondList};\n+     *         if a new list is returned, it is unmodifiable\n@@ -149,1 +150,1 @@\n-        if (t <= 0 || firstList.equals(secondList)) {\n+        if (t <= 0) {\n@@ -176,1 +177,1 @@\n-                    interpolateVirtualStop(first, second, secondList.get(j - 1), t);\n+                    interpolateVirtualStop(first, second, secondList.get(j - 1), 1 - t);\n@@ -202,1 +203,1 @@\n-     * stop X that matches the offset of A2, and then interpolates between A2 and X.\n+     * stop X that matches the offset of A2, and then interpolates between X and A2.\n@@ -207,1 +208,1 @@\n-        Color colorR = A2.color.interpolate(colorX, t);\n+        Color colorR = colorX.interpolate(A2.color, t);\n@@ -220,1 +221,1 @@\n-    private final double offset;\n+    private double offset;\n@@ -229,2 +230,2 @@\n-     * @return position of the Stop within the gradient\n-     *         (ranging from {@code 0} to {@code 1})\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n+     * @return position of the Stop within the gradient (ranging from {@code 0} to {@code 1})\n@@ -241,1 +242,1 @@\n-    private final Color color;\n+    private Color color;\n@@ -245,0 +246,2 @@\n+     *\n+     * @interpolationType <a href=\"..\/..\/animation\/Interpolatable.html#linear\">linear<\/a>\n@@ -261,1 +264,0 @@\n-     * @throws NullPointerException if {@code color} is null\n@@ -265,1 +267,1 @@\n-        this.color = Objects.requireNonNull(color, \"color cannot be null\");\n+        this.color = Objects.requireNonNullElse(color, Color.TRANSPARENT);\n@@ -271,0 +273,1 @@\n+     * @throws NullPointerException {@inheritDoc}\n@@ -275,0 +278,2 @@\n+        Objects.requireNonNull(endValue, \"endValue cannot be null\");\n+\n@@ -285,2 +290,0 @@\n-        double offset = Utils.interpolate(this.offset, endValue.offset, t);\n-\n@@ -291,0 +294,1 @@\n+        double offset = Utils.interpolate(this.offset, endValue.offset, t);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/paint\/Stop.java","additions":17,"deletions":13,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -113,6 +113,6 @@\n-            BackgroundFill a = new BackgroundFill(Color.ORANGE, new CornerRadii(2), new Insets(2));\n-            BackgroundFill b = new BackgroundFill(Color.RED, new CornerRadii(4), new Insets(6));\n-            BackgroundFill r = a.interpolate(b, 0.5);\n-            assertEquals(Color.ORANGE.interpolate(Color.RED, 0.5), r.getFill());\n-            assertEquals(new CornerRadii(3), r.getRadii());\n-            assertEquals(new Insets(4), r.getInsets());\n+            BackgroundFill startValue = new BackgroundFill(Color.ORANGE, new CornerRadii(2), new Insets(2));\n+            BackgroundFill endValue = new BackgroundFill(Color.RED, new CornerRadii(4), new Insets(6));\n+            BackgroundFill actual = startValue.interpolate(endValue, 0.5);\n+            assertEquals(Color.ORANGE.interpolate(Color.RED, 0.5), actual.getFill());\n+            assertEquals(new CornerRadii(3), actual.getRadii());\n+            assertEquals(new Insets(4), actual.getInsets());\n@@ -125,6 +125,6 @@\n-            BackgroundFill a = new BackgroundFill(gradient1, new CornerRadii(2), new Insets(2));\n-            BackgroundFill b = new BackgroundFill(gradient2, new CornerRadii(4), new Insets(6));\n-            BackgroundFill r = a.interpolate(b, 0.5);\n-            assertEquals(gradient1.interpolate(gradient2, 0.5), r.getFill());\n-            assertEquals(new CornerRadii(3), r.getRadii());\n-            assertEquals(new Insets(4), r.getInsets());\n+            BackgroundFill startValue = new BackgroundFill(gradient1, new CornerRadii(2), new Insets(2));\n+            BackgroundFill endValue = new BackgroundFill(gradient2, new CornerRadii(4), new Insets(6));\n+            BackgroundFill actual = startValue.interpolate(endValue, 0.5);\n+            assertEquals(gradient1.interpolate(gradient2, 0.5), actual.getFill());\n+            assertEquals(new CornerRadii(3), actual.getRadii());\n+            assertEquals(new Insets(4), actual.getInsets());\n@@ -136,12 +136,12 @@\n-            BackgroundFill a = new BackgroundFill(gradient, new CornerRadii(2), new Insets(2));\n-            BackgroundFill b = new BackgroundFill(Color.ORANGE, new CornerRadii(4), new Insets(6));\n-\n-            BackgroundFill r = a.interpolate(b, 0.5);\n-            assertEquals(gradient.interpolate(PaintUtils.newSolidGradient(gradient, Color.ORANGE), 0.5), r.getFill());\n-            assertEquals(new CornerRadii(3), r.getRadii());\n-            assertEquals(new Insets(4), r.getInsets());\n-\n-            r = b.interpolate(a, 0.5);\n-            assertEquals(PaintUtils.newSolidGradient(gradient, Color.ORANGE).interpolate(gradient, 0.5), r.getFill());\n-            assertEquals(new CornerRadii(3), r.getRadii());\n-            assertEquals(new Insets(4), r.getInsets());\n+            BackgroundFill startValue = new BackgroundFill(gradient, new CornerRadii(2), new Insets(2));\n+            BackgroundFill endValue = new BackgroundFill(Color.ORANGE, new CornerRadii(4), new Insets(6));\n+\n+            BackgroundFill actual = startValue.interpolate(endValue, 0.5);\n+            assertEquals(gradient.interpolate(PaintUtils.newSolidGradient(gradient, Color.ORANGE), 0.5), actual.getFill());\n+            assertEquals(new CornerRadii(3), actual.getRadii());\n+            assertEquals(new Insets(4), actual.getInsets());\n+\n+            actual = endValue.interpolate(startValue, 0.5);\n+            assertEquals(PaintUtils.newSolidGradient(gradient, Color.ORANGE).interpolate(gradient, 0.5), actual.getFill());\n+            assertEquals(new CornerRadii(3), actual.getRadii());\n+            assertEquals(new Insets(4), actual.getInsets());\n@@ -154,6 +154,6 @@\n-            BackgroundFill a = new BackgroundFill(gradient1, new CornerRadii(2), new Insets(2));\n-            BackgroundFill b = new BackgroundFill(gradient2, new CornerRadii(4), new Insets(6));\n-            BackgroundFill r = a.interpolate(b, 0.5);\n-            assertEquals(gradient1.interpolate(gradient2, 0.5), r.getFill());\n-            assertEquals(new CornerRadii(3), r.getRadii());\n-            assertEquals(new Insets(4), r.getInsets());\n+            BackgroundFill startValue = new BackgroundFill(gradient1, new CornerRadii(2), new Insets(2));\n+            BackgroundFill endValue = new BackgroundFill(gradient2, new CornerRadii(4), new Insets(6));\n+            BackgroundFill actual = startValue.interpolate(endValue, 0.5);\n+            assertEquals(gradient1.interpolate(gradient2, 0.5), actual.getFill());\n+            assertEquals(new CornerRadii(3), actual.getRadii());\n+            assertEquals(new Insets(4), actual.getInsets());\n@@ -165,12 +165,12 @@\n-            BackgroundFill a = new BackgroundFill(gradient, new CornerRadii(2), new Insets(2));\n-            BackgroundFill b = new BackgroundFill(Color.ORANGE, new CornerRadii(4), new Insets(6));\n-\n-            BackgroundFill r = a.interpolate(b, 0.5);\n-            assertEquals(gradient.interpolate(PaintUtils.newSolidGradient(gradient, Color.ORANGE), 0.5), r.getFill());\n-            assertEquals(new CornerRadii(3), r.getRadii());\n-            assertEquals(new Insets(4), r.getInsets());\n-\n-            r = b.interpolate(a, 0.5);\n-            assertEquals(PaintUtils.newSolidGradient(gradient, Color.ORANGE).interpolate(gradient, 0.5), r.getFill());\n-            assertEquals(new CornerRadii(3), r.getRadii());\n-            assertEquals(new Insets(4), r.getInsets());\n+            BackgroundFill startValue = new BackgroundFill(gradient, new CornerRadii(2), new Insets(2));\n+            BackgroundFill endValue = new BackgroundFill(Color.ORANGE, new CornerRadii(4), new Insets(6));\n+\n+            BackgroundFill actual = startValue.interpolate(endValue, 0.5);\n+            assertEquals(gradient.interpolate(PaintUtils.newSolidGradient(gradient, Color.ORANGE), 0.5), actual.getFill());\n+            assertEquals(new CornerRadii(3), actual.getRadii());\n+            assertEquals(new Insets(4), actual.getInsets());\n+\n+            actual = endValue.interpolate(startValue, 0.5);\n+            assertEquals(PaintUtils.newSolidGradient(gradient, Color.ORANGE).interpolate(gradient, 0.5), actual.getFill());\n+            assertEquals(new CornerRadii(3), actual.getRadii());\n+            assertEquals(new Insets(4), actual.getInsets());\n@@ -180,11 +180,20 @@\n-        public void incompatibleFillsReturnsEndFillWhenInterpolationFactorIsLargerThanZero() {\n-            var pattern = new ImagePattern(new Image(new ByteArrayInputStream(new byte[] {})));\n-            BackgroundFill a = new BackgroundFill(pattern, new CornerRadii(2), new Insets(2));\n-            BackgroundFill b = new BackgroundFill(Color.RED, new CornerRadii(4), new Insets(6));\n-            BackgroundFill c = a.interpolate(b, 0);\n-            assertSame(a, c);\n-\n-            c = a.interpolate(b, 0.5);\n-            assertEquals(b.getFill(), c.getFill());\n-            assertEquals(new CornerRadii(3), c.getRadii());\n-            assertEquals(new Insets(4), c.getInsets());\n+        public void incompatibleFillsReturnsStartFillOrEndFill() {\n+            var imagePattern = new ImagePattern(new Image(new ByteArrayInputStream(new byte[] {})));\n+            BackgroundFill startValue = new BackgroundFill(imagePattern, new CornerRadii(2), new Insets(2));\n+            BackgroundFill endValue = new BackgroundFill(Color.RED, new CornerRadii(4), new Insets(6));\n+            BackgroundFill actual;\n+\n+            actual = startValue.interpolate(endValue, 0.25);\n+            assertEquals(startValue.getFill(), actual.getFill());\n+            assertEquals(new CornerRadii(2.5), actual.getRadii());\n+            assertEquals(new Insets(3), actual.getInsets());\n+\n+            actual = startValue.interpolate(endValue, 0.5);\n+            assertEquals(endValue.getFill(), actual.getFill());\n+            assertEquals(new CornerRadii(3), actual.getRadii());\n+            assertEquals(new Insets(4), actual.getInsets());\n+\n+            actual = startValue.interpolate(endValue, 0.75);\n+            assertEquals(endValue.getFill(), actual.getFill());\n+            assertEquals(new CornerRadii(3.5), actual.getRadii());\n+            assertEquals(new Insets(5), actual.getInsets());\n@@ -195,3 +204,3 @@\n-            BackgroundFill a = new BackgroundFill(Color.ORANGE, new CornerRadii(2), new Insets(2));\n-            BackgroundFill b = new BackgroundFill(Color.ORANGE, new CornerRadii(2), new Insets(2));\n-            assertSame(a, a.interpolate(b, 0.5));\n+            BackgroundFill startValue = new BackgroundFill(Color.ORANGE, new CornerRadii(2), new Insets(2));\n+            BackgroundFill endValue = new BackgroundFill(Color.ORANGE, new CornerRadii(2), new Insets(2));\n+            assertSame(startValue, startValue.interpolate(endValue, 0.5));\n@@ -202,4 +211,4 @@\n-            BackgroundFill a = new BackgroundFill(Color.ORANGE, new CornerRadii(2), new Insets(2));\n-            BackgroundFill b = new BackgroundFill(Color.RED, new CornerRadii(4), new Insets(6));\n-            assertSame(a, a.interpolate(b, 0));\n-            assertSame(a, a.interpolate(b, -1));\n+            BackgroundFill startValue = new BackgroundFill(Color.ORANGE, new CornerRadii(2), new Insets(2));\n+            BackgroundFill endValue = new BackgroundFill(Color.RED, new CornerRadii(4), new Insets(6));\n+            assertSame(startValue, startValue.interpolate(endValue, 0));\n+            assertSame(startValue, startValue.interpolate(endValue, -1));\n@@ -210,4 +219,4 @@\n-            BackgroundFill a = new BackgroundFill(Color.ORANGE, new CornerRadii(2), new Insets(2));\n-            BackgroundFill b = new BackgroundFill(Color.RED, new CornerRadii(4), new Insets(6));\n-            assertSame(b, a.interpolate(b, 1));\n-            assertSame(b, a.interpolate(b, 1.5));\n+            BackgroundFill startValue = new BackgroundFill(Color.ORANGE, new CornerRadii(2), new Insets(2));\n+            BackgroundFill endValue = new BackgroundFill(Color.RED, new CornerRadii(4), new Insets(6));\n+            assertSame(endValue, startValue.interpolate(endValue, 1));\n+            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BackgroundFillTest.java","additions":73,"deletions":64,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -250,1 +250,1 @@\n-            var a = new BackgroundImage(\n+            var startValue = new BackgroundImage(\n@@ -255,1 +255,1 @@\n-            var b = new BackgroundImage(\n+            var endValue = new BackgroundImage(\n@@ -260,1 +260,1 @@\n-            assertSame(a, a.interpolate(b, 0.5));\n+            assertSame(startValue, startValue.interpolate(endValue, 0.5));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BackgroundImageTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -183,0 +183,38 @@\n+        @Test\n+        public void interpolateComponentWithAbsoluteAndPercentageMismatch() {\n+            record TestCase(BackgroundPosition endValue, BackgroundPosition expected) {}\n+\n+            final double v0 = 0, v25 = 10, v50 = 20, v100 = 40;\n+            final var startValue = new BackgroundPosition(Side.LEFT, v0, false, Side.TOP, v0, false);\n+\n+            \/\/ For each component: interpolation with t=0.25 returns start value on absolute\/percentage mismatch.\n+            for (var testCase : new TestCase[] {\n+                new TestCase(\n+                    new BackgroundPosition(Side.LEFT, v100, false, Side.TOP, v100, false),\n+                    new BackgroundPosition(Side.LEFT, v25, false, Side.TOP, v25, false)),\n+                new TestCase(\n+                    new BackgroundPosition(Side.LEFT, v100, true, Side.TOP, v100, false),\n+                    new BackgroundPosition(Side.LEFT, v0, false, Side.TOP, v25, false)),\n+                new TestCase(\n+                    new BackgroundPosition(Side.LEFT, v100, false, Side.TOP, v100, true),\n+                    new BackgroundPosition(Side.LEFT, v25, false, Side.TOP, v0, false))\n+            }) {\n+                assertEquals(testCase.expected, startValue.interpolate(testCase.endValue, 0.25));\n+            }\n+\n+            \/\/ For each component: interpolation with t=0.5 returns end value on absolute\/percentage mismatch.\n+            for (var testCase : new TestCase[] {\n+                new TestCase(\n+                    new BackgroundPosition(Side.LEFT, v100, false, Side.TOP, v100, false),\n+                    new BackgroundPosition(Side.LEFT, v50, false, Side.TOP, v50, false)),\n+                new TestCase(\n+                    new BackgroundPosition(Side.LEFT, v100, true, Side.TOP, v100, false),\n+                    new BackgroundPosition(Side.LEFT, v100, true, Side.TOP, v50, false)),\n+                new TestCase(\n+                    new BackgroundPosition(Side.LEFT, v100, false, Side.TOP, v100, true),\n+                    new BackgroundPosition(Side.LEFT, v50, false, Side.TOP, v100, true))\n+            }) {\n+                assertEquals(testCase.expected, startValue.interpolate(testCase.endValue, 0.5));\n+            }\n+        }\n+\n@@ -185,2 +223,2 @@\n-            var a = new BackgroundPosition(Side.LEFT, 0, false, Side.TOP, 0, false);\n-            var b = new BackgroundPosition(Side.LEFT, 10, false, Side.TOP, 20, false);\n+            var startValue = new BackgroundPosition(Side.LEFT, 0, false, Side.TOP, 0, false);\n+            var endValue = new BackgroundPosition(Side.LEFT, 10, false, Side.TOP, 20, false);\n@@ -188,1 +226,1 @@\n-            assertEquals(expected, a.interpolate(b, 0.5));\n+            assertEquals(expected, startValue.interpolate(endValue, 0.5));\n@@ -193,3 +231,5 @@\n-            var a = new BackgroundPosition(Side.LEFT, 10, false, Side.TOP, 20, false);\n-            var b = new BackgroundPosition(Side.LEFT, 10, false, Side.TOP, 20, false);\n-            assertSame(a, a.interpolate(b, 0.5));\n+            var startValue = new BackgroundPosition(Side.LEFT, 10, false, Side.TOP, 20, false);\n+            var endValue = new BackgroundPosition(Side.LEFT, 10, false, Side.TOP, 20, false);\n+            assertSame(startValue, startValue.interpolate(endValue, 0.25));\n+            assertSame(startValue, startValue.interpolate(endValue, 0.5));\n+            assertSame(startValue, startValue.interpolate(endValue, 0.75));\n@@ -200,4 +240,4 @@\n-            var a = new BackgroundPosition(Side.LEFT, 0, false, Side.TOP, 0, false);\n-            var b = new BackgroundPosition(Side.LEFT, 10, false, Side.TOP, 20, false);\n-            assertSame(a, a.interpolate(b, 0));\n-            assertSame(a, a.interpolate(b, -0.5));\n+            var startValue = new BackgroundPosition(Side.LEFT, 0, false, Side.TOP, 0, false);\n+            var endValue = new BackgroundPosition(Side.LEFT, 10, false, Side.TOP, 20, false);\n+            assertSame(startValue, startValue.interpolate(endValue, 0));\n+            assertSame(startValue, startValue.interpolate(endValue, -0.5));\n@@ -208,4 +248,4 @@\n-            var a = new BackgroundPosition(Side.LEFT, 0, false, Side.TOP, 0, false);\n-            var b = new BackgroundPosition(Side.LEFT, 10, false, Side.TOP, 20, false);\n-            assertSame(b, a.interpolate(b, 1));\n-            assertSame(b, a.interpolate(b, 1.5));\n+            var startValue = new BackgroundPosition(Side.LEFT, 0, false, Side.TOP, 0, false);\n+            var endValue = new BackgroundPosition(Side.LEFT, 10, false, Side.TOP, 20, false);\n+            assertSame(endValue, startValue.interpolate(endValue, 1));\n+            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n@@ -216,4 +256,4 @@\n-            var a = new BackgroundPosition(Side.LEFT, 0, false, Side.TOP, 0, false);\n-            var b = new BackgroundPosition(Side.LEFT, 10, true, Side.TOP, 20, true);\n-            assertEquals(a, a.interpolate(b, 0)); \/\/ equal to 'a' for t == 0\n-            assertEquals(b, a.interpolate(b, 0.1)); \/\/ equal to 'b' otherwise\n+            var startValue = new BackgroundPosition(Side.LEFT, 0, false, Side.TOP, 0, false);\n+            var endValue = new BackgroundPosition(Side.LEFT, 10, true, Side.TOP, 20, true);\n+            assertEquals(startValue, startValue.interpolate(endValue, 0.25)); \/\/ equal to 'startValue' for t < 0.5\n+            assertEquals(endValue, startValue.interpolate(endValue, 0.5)); \/\/ equal to 'endValue' otherwise\n@@ -224,2 +264,2 @@\n-            var a = new BackgroundPosition(Side.LEFT, 0, false, Side.TOP, 0, false);\n-            var b = new BackgroundPosition(Side.RIGHT, 10, false, Side.TOP, 20, false);\n+            var startValue = new BackgroundPosition(Side.LEFT, 0, false, Side.TOP, 0, false);\n+            var endValue = new BackgroundPosition(Side.RIGHT, 10, false, Side.TOP, 20, false);\n@@ -227,1 +267,1 @@\n-            assertEquals(expect, a.interpolate(b, 0.5));\n+            assertEquals(expect, startValue.interpolate(endValue, 0.5));\n@@ -229,2 +269,2 @@\n-            a = new BackgroundPosition(Side.LEFT, 0, false, Side.TOP, 0, false);\n-            b = new BackgroundPosition(Side.LEFT, 10, false, Side.BOTTOM, 20, false);\n+            startValue = new BackgroundPosition(Side.LEFT, 0, false, Side.TOP, 0, false);\n+            endValue = new BackgroundPosition(Side.LEFT, 10, false, Side.BOTTOM, 20, false);\n@@ -232,1 +272,1 @@\n-            assertEquals(expect, a.interpolate(b, 0.5));\n+            assertEquals(expect, startValue.interpolate(endValue, 0.5));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BackgroundPositionTest.java","additions":64,"deletions":24,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -275,0 +275,38 @@\n+        @Test\n+        public void interpolateComponentWithAbsoluteAndPercentageMismatch() {\n+            record TestCase(BackgroundSize endValue, BackgroundSize expected) {}\n+\n+            final double v0 = 0, v25 = 10, v50 = 20, v100 = 40;\n+            final var startValue = new BackgroundSize(v0, v0, false, false, false, false);\n+\n+            \/\/ For each component: interpolation with t=0.25 returns start value on absolute\/percentage mismatch.\n+            for (var testCase : new TestCase[] {\n+                new TestCase(\n+                    new BackgroundSize(v100, v100, false, false, false, false),\n+                    new BackgroundSize(v25, v25, false, false, false, false)),\n+                new TestCase(\n+                    new BackgroundSize(v100, v100, true, false, false, false),\n+                    new BackgroundSize(v0, v25, false, false, false, false)),\n+                new TestCase(\n+                    new BackgroundSize(v100, v100, false, true, false, false),\n+                    new BackgroundSize(v25, v0, false, false, false, false))\n+            }) {\n+                assertEquals(testCase.expected, startValue.interpolate(testCase.endValue, 0.25));\n+            }\n+\n+            \/\/ For each component: interpolation with t=0.5 returns end value on absolute\/percentage mismatch.\n+            for (var testCase : new TestCase[] {\n+                new TestCase(\n+                    new BackgroundSize(v100, v100, false, false, false, false),\n+                    new BackgroundSize(v50, v50, false, false, false, false)),\n+                new TestCase(\n+                    new BackgroundSize(v100, v100, true, false, false, false),\n+                    new BackgroundSize(v100, v50, true, false, false, false)),\n+                new TestCase(\n+                    new BackgroundSize(v100, v100, false, true, false, false),\n+                    new BackgroundSize(v50, v100, false, true, false, false))\n+            }) {\n+                assertEquals(testCase.expected, startValue.interpolate(testCase.endValue, 0.5));\n+            }\n+        }\n+\n@@ -277,2 +315,2 @@\n-            var a = new BackgroundSize(10, 20, false, false, false, false);\n-            var b = new BackgroundSize(20, 40, false, false, false, false);\n+            var startValue = new BackgroundSize(10, 20, false, false, false, false);\n+            var endValue = new BackgroundSize(20, 40, false, false, false, false);\n@@ -280,1 +318,1 @@\n-            assertEquals(expect, a.interpolate(b, 0.5));\n+            assertEquals(expect, startValue.interpolate(endValue, 0.5));\n@@ -285,3 +323,5 @@\n-            var a = new BackgroundSize(10, 20, false, false, false, false);\n-            var b = new BackgroundSize(10, 20, false, false, false, false);\n-            assertSame(a, a.interpolate(b, 0.5));\n+            var startValue = new BackgroundSize(10, 20, false, false, false, false);\n+            var endValue = new BackgroundSize(10, 20, false, false, false, false);\n+            assertSame(startValue, startValue.interpolate(endValue, 0.25));\n+            assertSame(startValue, startValue.interpolate(endValue, 0.5));\n+            assertSame(startValue, startValue.interpolate(endValue, 0.75));\n@@ -292,4 +332,4 @@\n-            var a = new BackgroundSize(10, 20, false, false, false, false);\n-            var b = new BackgroundSize(20, 40, false, false, false, false);\n-            assertSame(a, a.interpolate(b, 0));\n-            assertSame(a, a.interpolate(b, -0.5));\n+            var startValue = new BackgroundSize(10, 20, false, false, false, false);\n+            var endValue = new BackgroundSize(20, 40, false, false, false, false);\n+            assertSame(startValue, startValue.interpolate(endValue, 0));\n+            assertSame(startValue, startValue.interpolate(endValue, -0.5));\n@@ -300,4 +340,4 @@\n-            var a = new BackgroundSize(10, 20, false, false, false, false);\n-            var b = new BackgroundSize(20, 40, false, false, false, false);\n-            assertSame(b, a.interpolate(b, 1));\n-            assertSame(b, a.interpolate(b, 1.5));\n+            var startValue = new BackgroundSize(10, 20, false, false, false, false);\n+            var endValue = new BackgroundSize(20, 40, false, false, false, false);\n+            assertSame(endValue, startValue.interpolate(endValue, 1));\n+            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n@@ -308,2 +348,2 @@\n-            var a = new BackgroundSize(10, 20, false, false, false, false);\n-            var b = new BackgroundSize(AUTO, 40, false, false, false, false);\n+            var startValue = new BackgroundSize(10, 20, false, false, false, false);\n+            var endValue = new BackgroundSize(AUTO, 40, false, false, false, false);\n@@ -311,1 +351,1 @@\n-            assertEquals(expect, a.interpolate(b, 0.5));\n+            assertEquals(expect, startValue.interpolate(endValue, 0.5));\n@@ -313,2 +353,2 @@\n-            a = new BackgroundSize(20, 10, false, false, false, false);\n-            b = new BackgroundSize(40, AUTO, false, false, false, false);\n+            startValue = new BackgroundSize(20, 10, false, false, false, false);\n+            endValue = new BackgroundSize(40, AUTO, false, false, false, false);\n@@ -316,1 +356,1 @@\n-            assertEquals(expect, a.interpolate(b, 0.5));\n+            assertEquals(expect, startValue.interpolate(endValue, 0.5));\n@@ -320,12 +360,15 @@\n-        public void notInterpolatableReturnsEndInstance() {\n-            var a = new BackgroundSize(10, 10, false, false, false, true);\n-            var b = new BackgroundSize(20, 20, false, false, false, false);\n-            assertSame(b, a.interpolate(b, 0.5));\n-\n-            a = new BackgroundSize(10, 10, false, false, false, false);\n-            b = new BackgroundSize(20, 20, false, false, true, false);\n-            assertSame(b, a.interpolate(b, 0.5));\n-\n-            a = new BackgroundSize(AUTO, AUTO, false, false, false, false);\n-            b = new BackgroundSize(20, 20, false, false, false, false);\n-            assertSame(b, a.interpolate(b, 0.5));\n+        public void notInterpolatableReturnsStartOrEndInstance() {\n+            var startValue = new BackgroundSize(10, 10, false, false, false, true);\n+            var endValue = new BackgroundSize(20, 20, false, false, false, false);\n+            assertSame(startValue, startValue.interpolate(endValue, 0.25));\n+            assertSame(endValue, startValue.interpolate(endValue, 0.5));\n+\n+            startValue = new BackgroundSize(10, 10, false, false, false, false);\n+            endValue = new BackgroundSize(20, 20, false, false, true, false);\n+            assertSame(startValue, startValue.interpolate(endValue, 0.25));\n+            assertSame(endValue, startValue.interpolate(endValue, 0.5));\n+\n+            startValue = new BackgroundSize(AUTO, AUTO, false, false, false, false);\n+            endValue = new BackgroundSize(20, 20, false, false, false, false);\n+            assertSame(startValue, startValue.interpolate(endValue, 0.25));\n+            assertSame(endValue, startValue.interpolate(endValue, 0.5));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BackgroundSizeTest.java","additions":75,"deletions":32,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -742,1 +742,1 @@\n-            var a = new Background(\n+            var startValue = new Background(\n@@ -749,1 +749,1 @@\n-            var b = new Background(\n+            var endValue = new Background(\n@@ -763,1 +763,1 @@\n-            var actual = a.interpolate(b, 0.5);\n+            var actual = startValue.interpolate(endValue, 0.5);\n@@ -771,1 +771,1 @@\n-            var a = new Background(\n+            var startValue = new Background(\n@@ -777,1 +777,1 @@\n-            var b = new Background(\n+            var endValue = new Background(\n@@ -797,1 +797,1 @@\n-            assertEquals(expect, a.interpolate(b, 0.5));\n+            assertEquals(expect, startValue.interpolate(endValue, 0.5));\n@@ -802,3 +802,3 @@\n-            var a = new Background(new BackgroundFill(Color.RED, new CornerRadii(10), new Insets(10)));\n-            var b = new Background(new BackgroundFill(Color.RED, new CornerRadii(10), new Insets(10)));\n-            assertSame(a, a.interpolate(b, 0.5));\n+            var startValue = new Background(new BackgroundFill(Color.RED, new CornerRadii(10), new Insets(10)));\n+            var endValue = new Background(new BackgroundFill(Color.RED, new CornerRadii(10), new Insets(10)));\n+            assertSame(startValue, startValue.interpolate(endValue, 0.5));\n@@ -809,4 +809,4 @@\n-            var a = new Background(new BackgroundFill(Color.RED, new CornerRadii(10), new Insets(10)));\n-            var b = new Background(new BackgroundFill(Color.GREEN, new CornerRadii(15), new Insets(20)));\n-            assertSame(a, a.interpolate(b, 0));\n-            assertSame(a, a.interpolate(b, -0.5));\n+            var startValue = new Background(new BackgroundFill(Color.RED, new CornerRadii(10), new Insets(10)));\n+            var endValue = new Background(new BackgroundFill(Color.GREEN, new CornerRadii(15), new Insets(20)));\n+            assertSame(startValue, startValue.interpolate(endValue, 0));\n+            assertSame(startValue, startValue.interpolate(endValue, -0.5));\n@@ -817,4 +817,4 @@\n-            var a = new Background(new BackgroundFill(Color.RED, new CornerRadii(10), new Insets(10)));\n-            var b = new Background(new BackgroundFill(Color.GREEN, new CornerRadii(15), new Insets(20)));\n-            assertSame(b, a.interpolate(b, 1));\n-            assertSame(b, a.interpolate(b, 1.5));\n+            var startValue = new Background(new BackgroundFill(Color.RED, new CornerRadii(10), new Insets(10)));\n+            var endValue = new Background(new BackgroundFill(Color.GREEN, new CornerRadii(15), new Insets(20)));\n+            assertSame(endValue, startValue.interpolate(endValue, 1));\n+            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BackgroundTest.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -50,2 +50,2 @@\n-            var a = new BorderStroke(RED, SOLID, new CornerRadii(10), new BorderWidths(5), new Insets(2));\n-            var b = new BorderStroke(GREEN, DOTTED, new CornerRadii(20), new BorderWidths(15), new Insets(6));\n+            var startValue = new BorderStroke(RED, SOLID, new CornerRadii(10), new BorderWidths(5), new Insets(2));\n+            var endValue = new BorderStroke(GREEN, DOTTED, new CornerRadii(20), new BorderWidths(15), new Insets(6));\n@@ -53,1 +53,1 @@\n-            assertEquals(expect, a.interpolate(b, 0.5));\n+            assertEquals(expect, startValue.interpolate(endValue, 0.5));\n@@ -58,3 +58,3 @@\n-            var a = new BorderStroke(RED, SOLID, new CornerRadii(10), new BorderWidths(5), new Insets(2));\n-            var b = new BorderStroke(RED, SOLID, new CornerRadii(10), new BorderWidths(5), new Insets(2));\n-            assertSame(a, a.interpolate(b, 0.5));\n+            var startValue = new BorderStroke(RED, SOLID, new CornerRadii(10), new BorderWidths(5), new Insets(2));\n+            var endValue = new BorderStroke(RED, SOLID, new CornerRadii(10), new BorderWidths(5), new Insets(2));\n+            assertSame(startValue, startValue.interpolate(endValue, 0.5));\n@@ -65,4 +65,4 @@\n-            var a = new BorderStroke(RED, SOLID, new CornerRadii(10), new BorderWidths(5), new Insets(2));\n-            var b = new BorderStroke(GREEN, SOLID, new CornerRadii(20), new BorderWidths(15), new Insets(6));\n-            assertSame(a, a.interpolate(b, 0));\n-            assertSame(a, a.interpolate(b, -0.5));\n+            var startValue = new BorderStroke(RED, SOLID, new CornerRadii(10), new BorderWidths(5), new Insets(2));\n+            var endValue = new BorderStroke(GREEN, SOLID, new CornerRadii(20), new BorderWidths(15), new Insets(6));\n+            assertSame(startValue, startValue.interpolate(endValue, 0));\n+            assertSame(startValue, startValue.interpolate(endValue, -0.5));\n@@ -73,4 +73,4 @@\n-            var a = new BorderStroke(RED, SOLID, new CornerRadii(10), new BorderWidths(5), new Insets(2));\n-            var b = new BorderStroke(GREEN, SOLID, new CornerRadii(20), new BorderWidths(15), new Insets(6));\n-            assertSame(b, a.interpolate(b, 1));\n-            assertSame(b, a.interpolate(b, 1.5));\n+            var startValue = new BorderStroke(RED, SOLID, new CornerRadii(10), new BorderWidths(5), new Insets(2));\n+            var endValue = new BorderStroke(GREEN, SOLID, new CornerRadii(20), new BorderWidths(15), new Insets(6));\n+            assertSame(endValue, startValue.interpolate(endValue, 1));\n+            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BorderStrokeTest.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -588,1 +588,1 @@\n-            var a = new Border(\n+            var startValue = new Border(\n@@ -593,1 +593,1 @@\n-            var b = new Border(\n+            var endValue = new Border(\n@@ -603,1 +603,1 @@\n-            assertEquals(expect, a.interpolate(b, 0.5));\n+            assertEquals(expect, startValue.interpolate(endValue, 0.5));\n@@ -608,1 +608,1 @@\n-            var a = new Border(\n+            var startValue = new Border(\n@@ -612,1 +612,1 @@\n-            var b = new Border(\n+            var endValue = new Border(\n@@ -624,1 +624,1 @@\n-            var actual = a.interpolate(b, 0.5);\n+            var actual = startValue.interpolate(endValue, 0.5);\n@@ -632,3 +632,3 @@\n-            var a = new Border(new BorderStroke(Color.RED, BorderStrokeStyle.SOLID, new CornerRadii(10), new BorderWidths(10)));\n-            var b = new Border(new BorderStroke(Color.RED, BorderStrokeStyle.SOLID, new CornerRadii(10), new BorderWidths(10)));\n-            assertSame(a, a.interpolate(b, 0.5));\n+            var startValue = new Border(new BorderStroke(Color.RED, BorderStrokeStyle.SOLID, new CornerRadii(10), new BorderWidths(10)));\n+            var endValue = new Border(new BorderStroke(Color.RED, BorderStrokeStyle.SOLID, new CornerRadii(10), new BorderWidths(10)));\n+            assertSame(startValue, startValue.interpolate(endValue, 0.5));\n@@ -639,4 +639,4 @@\n-            var a = new Border(new BorderStroke(Color.RED, BorderStrokeStyle.SOLID, new CornerRadii(10), new BorderWidths(10)));\n-            var b = new Border(new BorderStroke(Color.GREEN, BorderStrokeStyle.SOLID, new CornerRadii(20), new BorderWidths(20)));\n-            assertSame(a, a.interpolate(b, 0));\n-            assertSame(a, a.interpolate(b, -0.5));\n+            var startValue = new Border(new BorderStroke(Color.RED, BorderStrokeStyle.SOLID, new CornerRadii(10), new BorderWidths(10)));\n+            var endValue = new Border(new BorderStroke(Color.GREEN, BorderStrokeStyle.SOLID, new CornerRadii(20), new BorderWidths(20)));\n+            assertSame(startValue, startValue.interpolate(endValue, 0));\n+            assertSame(startValue, startValue.interpolate(endValue, -0.5));\n@@ -647,4 +647,4 @@\n-            var a = new Border(new BorderStroke(Color.RED, BorderStrokeStyle.SOLID, new CornerRadii(10), new BorderWidths(10)));\n-            var b = new Border(new BorderStroke(Color.GREEN, BorderStrokeStyle.SOLID, new CornerRadii(20), new BorderWidths(20)));\n-            assertSame(b, a.interpolate(b, 1));\n-            assertSame(b, a.interpolate(b, 1.5));\n+            var startValue = new Border(new BorderStroke(Color.RED, BorderStrokeStyle.SOLID, new CornerRadii(10), new BorderWidths(10)));\n+            var endValue = new Border(new BorderStroke(Color.GREEN, BorderStrokeStyle.SOLID, new CornerRadii(20), new BorderWidths(20)));\n+            assertSame(endValue, startValue.interpolate(endValue, 1));\n+            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BorderTest.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -39,2 +39,1 @@\n-    @Test\n-    public void instanceCreation() {\n+    @Test public void instanceCreation() {\n@@ -215,5 +214,47 @@\n-        public void interpolateBetweenDifferentValuesReturnsNewInstance() {\n-            var a = new BorderWidths(10, 20, 30, 40, true, false, true, false);\n-            var b = new BorderWidths(20, 40, 60, 80, true, false, true, false);\n-            var expect = new BorderWidths(15, 30, 45, 60, true, false, true, false);\n-            assertEquals(expect, a.interpolate(b, 0.5));\n+        public void interpolateComponentWithAbsoluteAndPercentageMismatch() {\n+            record TestCase(BorderWidths endValue, BorderWidths expected) {}\n+\n+            final double v0 = 10, v25 = 12.5, v50 = 15, v100 = 20;\n+            final var startValue = new BorderWidths(v0, v0, v0, v0, false, false, false, false);\n+\n+            \/\/ For each component: interpolation with t=0.25 returns start value on absolute\/percentage mismatch\n+            for (var testCase : new TestCase[] {\n+                new TestCase(\n+                    new BorderWidths(v100, v100, v100, v100, false, false, false, false),\n+                    new BorderWidths(v25, v25, v25, v25, false, false, false, false)),\n+                new TestCase(\n+                    new BorderWidths(v100, v100, v100, v100, true, false, false, false),\n+                    new BorderWidths(v0, v25, v25, v25, false, false, false, false)),\n+                new TestCase(\n+                    new BorderWidths(v100, v100, v100, v100, false, true, false, false),\n+                    new BorderWidths(v25, v0, v25, v25, false, false, false, false)),\n+                new TestCase(\n+                    new BorderWidths(v100, v100, v100, v100, false, false, true, false),\n+                    new BorderWidths(v25, v25, v0, v25, false, false, false, false)),\n+                new TestCase(\n+                    new BorderWidths(v100, v100, v100, v100, false, false, false, true),\n+                    new BorderWidths(v25, v25, v25, v0, false, false, false, false))\n+            }) {\n+                assertEquals(testCase.expected, startValue.interpolate(testCase.endValue, 0.25));\n+            }\n+\n+            \/\/ For each component: interpolation with t=0.5 returns end value on absolute\/percentage mismatch\n+            for (var testCase : new TestCase[] {\n+                new TestCase(\n+                    new BorderWidths(v100, v100, v100, v100, false, false, false, false),\n+                    new BorderWidths(v50, v50, v50, v50, false, false, false, false)),\n+                new TestCase(\n+                    new BorderWidths(v100, v100, v100, v100, true, false, false, false),\n+                    new BorderWidths(v100, v50, v50, v50, true, false, false, false)),\n+                new TestCase(\n+                    new BorderWidths(v100, v100, v100, v100, false, true, false, false),\n+                    new BorderWidths(v50, v100, v50, v50, false, true, false, false)),\n+                new TestCase(\n+                    new BorderWidths(v100, v100, v100, v100, false, false, true, false),\n+                    new BorderWidths(v50, v50, v100, v50, false, false, true, false)),\n+                new TestCase(\n+                    new BorderWidths(v100, v100, v100, v100, false, false, false, true),\n+                    new BorderWidths(v50, v50, v50, v100, false, false, false, true))\n+            }) {\n+                assertEquals(testCase.expected, startValue.interpolate(testCase.endValue, 0.5));\n+            }\n@@ -223,4 +264,16 @@\n-        public void interpolateBetweenEqualValuesReturnsStartInstance() {\n-            var a = new BorderWidths(10, 20, 30, 40, true, false, true, false);\n-            var b = new BorderWidths(10, 20, 30, 40, true, false, true, false);\n-            assertSame(a, a.interpolate(b, 0.5));\n+        public void interpolateReturnsStartOrEndInstanceWhenResultIsEqual() {\n+            var startValue = new BorderWidths(10, 20, 30, 40, true, true, true, true);\n+            var endValue = new BorderWidths(20, 40, 60, 80, false, false, false, false);\n+            assertSame(startValue, startValue.interpolate(endValue, 0.25));\n+            assertSame(endValue, startValue.interpolate(endValue, 0.5));\n+        }\n+\n+        @Test\n+        public void interpolateBetweenDifferentValuesReturnsNewInstance() {\n+            var startValue = new BorderWidths(10, 20, 30, 40, true, false, true, false);\n+            var endValue = new BorderWidths(20, 40, 60, 80, true, false, true, false);\n+            var expect = new BorderWidths(15, 30, 45, 60, true, false, true, false);\n+            var actual = startValue.interpolate(endValue, 0.5);\n+            assertEquals(expect, actual);\n+            assertNotSame(startValue, actual);\n+            assertNotSame(endValue, actual);\n@@ -230,9 +283,6 @@\n-        public void interpolateBetweenAbsoluteAndRelativeValuesReturnsStartInstanceOrNewInstanceEqualToEndValue() {\n-            var a = new BorderWidths(10, 20, 30, 40, false, false, false, false);\n-            var b = new BorderWidths(10, 20, 30, 40, true, false, false, false);\n-            assertSame(a, a.interpolate(b, 0)); \/\/ start value for t == 0\n-\n-            var v = a.interpolate(b, 0.5); \/\/ new instance for t > 0\n-            assertEquals(b, v);\n-            assertNotSame(a, v);\n-            assertNotSame(b, v);\n+        public void interpolateBetweenEqualValuesReturnsStartInstance() {\n+            var startValue = new BorderWidths(10, 20, 30, 40, true, false, true, false);\n+            var endValue = new BorderWidths(10, 20, 30, 40, true, false, true, false);\n+            assertSame(startValue, startValue.interpolate(endValue, 0.25));\n+            assertSame(startValue, startValue.interpolate(endValue, 0.5));\n+            assertSame(startValue, startValue.interpolate(endValue, 0.75));\n@@ -243,4 +293,4 @@\n-            var a = new BorderWidths(10, 20, 30, 40, true, false, true, false);\n-            var b = new BorderWidths(20, 40, 60, 80, true, false, true, false);\n-            assertSame(a, a.interpolate(b, 0));\n-            assertSame(a, a.interpolate(b, -1));\n+            var startValue = new BorderWidths(10, 20, 30, 40, true, false, true, false);\n+            var endValue = new BorderWidths(20, 40, 60, 80, true, false, true, false);\n+            assertSame(startValue, startValue.interpolate(endValue, 0));\n+            assertSame(startValue, startValue.interpolate(endValue, -1));\n@@ -251,4 +301,4 @@\n-            var a = new BorderWidths(10, 20, 30, 40, true, false, true, false);\n-            var b = new BorderWidths(20, 40, 60, 80, true, false, true, false);\n-            assertSame(b, a.interpolate(b, 1));\n-            assertSame(b, a.interpolate(b, 1.5));\n+            var startValue = new BorderWidths(10, 20, 30, 40, true, false, true, false);\n+            var endValue = new BorderWidths(20, 40, 60, 80, true, false, true, false);\n+            assertSame(endValue, startValue.interpolate(endValue, 1));\n+            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/BorderWidthsTest.java","additions":78,"deletions":28,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -160,0 +160,90 @@\n+        @Test\n+        public void interpolateComponentWithAbsoluteAndPercentageMismatch() {\n+            record TestCase(CornerRadii endValue, CornerRadii expected) {}\n+\n+            final double v0 = 10, v25 = 12.5, v50 = 15, v100 = 20;\n+            final var startValue = new CornerRadii(\n+                v0, v0, v0, v0, v0, v0, v0, v0, false, false, false, false, false, false, false, false);\n+\n+            \/\/ For each component: interpolation with t=0.25 returns start value on absolute\/percentage mismatch.\n+            for (var testCase : new TestCase[] {\n+                new TestCase(\n+                    new CornerRadii(v100, v100, v100, v100, v100, v100, v100, v100, false, false, false, false, false, false, false, false),\n+                    new CornerRadii(v25, v25, v25, v25, v25, v25, v25, v25, false, false, false, false, false, false, false, false)),\n+                new TestCase(\n+                    new CornerRadii(v100, v100, v100, v100, v100, v100, v100, v100, true, false, false, false, false, false, false, false),\n+                    new CornerRadii(v0, v25, v25, v25, v25, v25, v25, v25, false, false, false, false, false, false, false, false)),\n+                new TestCase(\n+                    new CornerRadii(v100, v100, v100, v100, v100, v100, v100, v100, false, true, false, false, false, false, false, false),\n+                    new CornerRadii(v25, v0, v25, v25, v25, v25, v25, v25, false, false, false, false, false, false, false, false)),\n+                new TestCase(\n+                    new CornerRadii(v100, v100, v100, v100, v100, v100, v100, v100, false, false, true, false, false, false, false, false),\n+                    new CornerRadii(v25, v25, v0, v25, v25, v25, v25, v25, false, false, false, false, false, false, false, false)),\n+                new TestCase(\n+                    new CornerRadii(v100, v100, v100, v100, v100, v100, v100, v100, false, false, false, true, false, false, false, false),\n+                    new CornerRadii(v25, v25, v25, v0, v25, v25, v25, v25, false, false, false, false, false, false, false, false)),\n+                new TestCase(\n+                    new CornerRadii(v100, v100, v100, v100, v100, v100, v100, v100, false, false, false, false, true, false, false, false),\n+                    new CornerRadii(v25, v25, v25, v25, v0, v25, v25, v25, false, false, false, false, false, false, false, false)),\n+                new TestCase(\n+                    new CornerRadii(v100, v100, v100, v100, v100, v100, v100, v100, false, false, false, false, false, true, false, false),\n+                    new CornerRadii(v25, v25, v25, v25, v25, v0, v25, v25, false, false, false, false, false, false, false, false)),\n+                new TestCase(\n+                    new CornerRadii(v100, v100, v100, v100, v100, v100, v100, v100, false, false, false, false, false, false, true, false),\n+                    new CornerRadii(v25, v25, v25, v25, v25, v25, v0, v25, false, false, false, false, false, false, false, false)),\n+                new TestCase(\n+                    new CornerRadii(v100, v100, v100, v100, v100, v100, v100, v100, false, false, false, false, false, false, false, true),\n+                    new CornerRadii(v25, v25, v25, v25, v25, v25, v25, v0, false, false, false, false, false, false, false, false)),\n+            }) {\n+                assertEquals(testCase.expected, startValue.interpolate(testCase.endValue, 0.25));\n+            }\n+\n+            \/\/ For each component: interpolation with t=0.5 returns end value on absolute\/percentage mismatch\n+            for (var testCase : new TestCase[] {\n+                new TestCase(\n+                    new CornerRadii(v100, v100, v100, v100, v100, v100, v100, v100, false, false, false, false, false, false, false, false),\n+                    new CornerRadii(v50, v50, v50, v50, v50, v50, v50, v50, false, false, false, false, false, false, false, false)),\n+                new TestCase(\n+                    new CornerRadii(v100, v100, v100, v100, v100, v100, v100, v100, true, false, false, false, false, false, false, false),\n+                    new CornerRadii(v100, v50, v50, v50, v50, v50, v50, v50, true, false, false, false, false, false, false, false)),\n+                new TestCase(\n+                    new CornerRadii(v100, v100, v100, v100, v100, v100, v100, v100, false, true, false, false, false, false, false, false),\n+                    new CornerRadii(v50, v100, v50, v50, v50, v50, v50, v50, false, true, false, false, false, false, false, false)),\n+                new TestCase(\n+                    new CornerRadii(v100, v100, v100, v100, v100, v100, v100, v100, false, false, true, false, false, false, false, false),\n+                    new CornerRadii(v50, v50, v100, v50, v50, v50, v50, v50, false, false, true, false, false, false, false, false)),\n+                new TestCase(\n+                    new CornerRadii(v100, v100, v100, v100, v100, v100, v100, v100, false, false, false, true, false, false, false, false),\n+                    new CornerRadii(v50, v50, v50, v100, v50, v50, v50, v50, false, false, false, true, false, false, false, false)),\n+                new TestCase(\n+                    new CornerRadii(v100, v100, v100, v100, v100, v100, v100, v100, false, false, false, false, true, false, false, false),\n+                    new CornerRadii(v50, v50, v50, v50, v100, v50, v50, v50, false, false, false, false, true, false, false, false)),\n+                new TestCase(\n+                    new CornerRadii(v100, v100, v100, v100, v100, v100, v100, v100, false, false, false, false, false, true, false, false),\n+                    new CornerRadii(v50, v50, v50, v50, v50, v100, v50, v50, false, false, false, false, false, true, false, false)),\n+                new TestCase(\n+                    new CornerRadii(v100, v100, v100, v100, v100, v100, v100, v100, false, false, false, false, false, false, true, false),\n+                    new CornerRadii(v50, v50, v50, v50, v50, v50, v100, v50, false, false, false, false, false, false, true, false)),\n+                new TestCase(\n+                    new CornerRadii(v100, v100, v100, v100, v100, v100, v100, v100, false, false, false, false, false, false, false, true),\n+                    new CornerRadii(v50, v50, v50, v50, v50, v50, v50, v100, false, false, false, false, false, false, false, true)),\n+            }) {\n+                assertEquals(testCase.expected, startValue.interpolate(testCase.endValue, 0.5));\n+            }\n+        }\n+\n+        @Test\n+        public void interpolateReturnsStartOrEndInstanceWhenResultIsEqual() {\n+            \/\/ non-uniform values\n+            var startValue = new CornerRadii(10, 20, 30, 40, true);\n+            var endValue = new CornerRadii(20, 40, 60, 80, false);\n+            assertSame(startValue, startValue.interpolate(endValue, 0.25));\n+            assertSame(endValue, startValue.interpolate(endValue, 0.5));\n+\n+            \/\/ uniform values\n+            startValue = new CornerRadii(10, true);\n+            endValue = new CornerRadii(20, false);\n+            assertSame(startValue, startValue.interpolate(endValue, 0.25));\n+            assertSame(endValue, startValue.interpolate(endValue, 0.5));\n+        }\n+\n@@ -163,2 +253,2 @@\n-            var a = new CornerRadii(10, 20, 30, 40, false);\n-            var b = new CornerRadii(20, 40, 60, 80, false);\n+            var startValue = new CornerRadii(10, 20, 30, 40, false);\n+            var endValue = new CornerRadii(20, 40, 60, 80, false);\n@@ -166,1 +256,1 @@\n-            assertEquals(expect, a.interpolate(b, 0.5));\n+            assertEquals(expect, startValue.interpolate(endValue, 0.5));\n@@ -169,2 +259,2 @@\n-            a = new CornerRadii(10, 10, 10, 10, false);\n-            b = new CornerRadii(20, 20, 20, 20, false);\n+            startValue = new CornerRadii(10, 10, 10, 10, false);\n+            endValue = new CornerRadii(20, 20, 20, 20, false);\n@@ -172,1 +262,1 @@\n-            assertEquals(expect, a.interpolate(b, 0.5));\n+            assertEquals(expect, startValue.interpolate(endValue, 0.5));\n@@ -178,3 +268,5 @@\n-            var a = new CornerRadii(10, 20, 30, 40, false);\n-            var b = new CornerRadii(10, 20, 30, 40, false);\n-            assertSame(a, a.interpolate(b, 0.5));\n+            var startValue = new CornerRadii(10, 20, 30, 40, false);\n+            var endValue = new CornerRadii(10, 20, 30, 40, false);\n+            assertSame(startValue, startValue.interpolate(endValue, 0.25));\n+            assertSame(startValue, startValue.interpolate(endValue, 0.5));\n+            assertSame(startValue, startValue.interpolate(endValue, 0.75));\n@@ -183,15 +275,5 @@\n-            a = new CornerRadii(10, 10, 10, 10, false);\n-            b = new CornerRadii(10, 10, 10, 10, false);\n-            assertSame(a, a.interpolate(b, 0.5));\n-        }\n-\n-        @Test\n-        public void interpolateBetweenAbsoluteAndRelativeValuesReturnsStartInstanceOrNewInstanceEqualToEndValue() {\n-            var a = new CornerRadii(10, 20, 30, 40, false);\n-            var b = new CornerRadii(0.5, 0.6, 0.7, 0.8, true);\n-            assertSame(a, a.interpolate(b, 0)); \/\/ start value for t == 0\n-\n-            var v = a.interpolate(b, 0.5); \/\/ new instance for t > 0\n-            assertEquals(b, v);\n-            assertNotSame(a, v);\n-            assertNotSame(b, v);\n+            startValue = new CornerRadii(10, 10, 10, 10, false);\n+            endValue = new CornerRadii(10, 10, 10, 10, false);\n+            assertSame(startValue, startValue.interpolate(endValue, 0.25));\n+            assertSame(startValue, startValue.interpolate(endValue, 0.5));\n+            assertSame(startValue, startValue.interpolate(endValue, 0.75));\n@@ -202,4 +284,4 @@\n-            var a = new CornerRadii(10, 20, 30, 40, false);\n-            var b = new CornerRadii(20, 30, 40, 50, false);\n-            assertSame(a, a.interpolate(b, 0));\n-            assertSame(a, a.interpolate(b, -1));\n+            var startValue = new CornerRadii(10, 20, 30, 40, false);\n+            var endValue = new CornerRadii(20, 30, 40, 50, false);\n+            assertSame(startValue, startValue.interpolate(endValue, 0));\n+            assertSame(startValue, startValue.interpolate(endValue, -1));\n@@ -210,4 +292,4 @@\n-            var a = new CornerRadii(10, 20, 30, 40, false);\n-            var b = new CornerRadii(20, 30, 40, 50, false);\n-            assertSame(b, a.interpolate(b, 1));\n-            assertSame(b, a.interpolate(b, 1.5));\n+            var startValue = new CornerRadii(10, 20, 30, 40, false);\n+            var endValue = new CornerRadii(20, 30, 40, 50, false);\n+            assertSame(endValue, startValue.interpolate(endValue, 1));\n+            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/CornerRadiiTest.java","additions":114,"deletions":32,"binary":false,"changes":146,"status":"modified"},{"patch":"@@ -954,3 +954,3 @@\n-            var a = new Color(0.2, 0.4, 0.6, 0.8);\n-            var b = new Color(0.3, 0.5, 0.7, 0.9);\n-            assertEquals(new Color(0.25, 0.45, 0.65, 0.85), a.interpolate(b, 0.5));\n+            var startValue = new Color(0.2, 0.4, 0.6, 0.8);\n+            var endValue = new Color(0.3, 0.5, 0.7, 0.9);\n+            assertEquals(new Color(0.25, 0.45, 0.65, 0.85), startValue.interpolate(endValue, 0.5));\n@@ -961,3 +961,3 @@\n-            var a = new Color(0.2, 0.4, 0.6, 0.8);\n-            var b = new Color(0.2, 0.4, 0.6, 0.8);\n-            assertSame(a, a.interpolate(b, 0.5));\n+            var startValue = new Color(0.2, 0.4, 0.6, 0.8);\n+            var endValue = new Color(0.2, 0.4, 0.6, 0.8);\n+            assertSame(startValue, startValue.interpolate(endValue, 0.5));\n@@ -968,4 +968,4 @@\n-            var a = new Color(0.2, 0.4, 0.6, 0.8);\n-            var b = new Color(0.3, 0.5, 0.7, 0.9);\n-            assertSame(a, a.interpolate(b, 0));\n-            assertSame(a, a.interpolate(b, -1));\n+            var startValue = new Color(0.2, 0.4, 0.6, 0.8);\n+            var endValue = new Color(0.3, 0.5, 0.7, 0.9);\n+            assertSame(startValue, startValue.interpolate(endValue, 0));\n+            assertSame(startValue, startValue.interpolate(endValue, -1));\n@@ -976,4 +976,4 @@\n-            var a = new Color(0.2, 0.4, 0.6, 0.8);\n-            var b = new Color(0.3, 0.5, 0.7, 0.9);\n-            assertSame(b, a.interpolate(b, 1));\n-            assertSame(b, a.interpolate(b, 1.5));\n+            var startValue = new Color(0.2, 0.4, 0.6, 0.8);\n+            var endValue = new Color(0.3, 0.5, 0.7, 0.9);\n+            assertSame(endValue, startValue.interpolate(endValue, 1));\n+            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/paint\/ColorTest.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -94,2 +94,2 @@\n-            var a = new ImagePattern(image, 10, 20, 30, 40, false);\n-            var b = new ImagePattern(image, 20, 30, 40, 50, false);\n+            var startValue = new ImagePattern(image, 10, 20, 30, 40, false);\n+            var endValue = new ImagePattern(image, 20, 30, 40, 50, false);\n@@ -97,1 +97,1 @@\n-            assertEquals(expected, a.interpolate(b, 0.5));\n+            assertEquals(expected, startValue.interpolate(endValue, 0.5));\n@@ -103,4 +103,4 @@\n-            var a = new ImagePattern(image, 10, 20, 30, 40, false);\n-            var b = new ImagePattern(image, 20, 30, 40, 50, true);\n-            assertSame(a, a.interpolate(b, 0));\n-            assertSame(b, a.interpolate(b, 0.5));\n+            var startValue = new ImagePattern(image, 10, 20, 30, 40, false);\n+            var endValue = new ImagePattern(image, 20, 30, 40, 50, true);\n+            assertSame(startValue, startValue.interpolate(endValue, 0));\n+            assertSame(endValue, startValue.interpolate(endValue, 0.5));\n@@ -112,3 +112,3 @@\n-            var a = new ImagePattern(image, 10, 20, 30, 40, false);\n-            var b = new ImagePattern(image, 10, 20, 30, 40, false);\n-            assertSame(a, a.interpolate(b, 0.5));\n+            var startValue = new ImagePattern(image, 10, 20, 30, 40, false);\n+            var endValue = new ImagePattern(image, 10, 20, 30, 40, false);\n+            assertSame(startValue, startValue.interpolate(endValue, 0.5));\n@@ -120,4 +120,4 @@\n-            var a = new ImagePattern(image, 10, 20, 30, 40, false);\n-            var b = new ImagePattern(image, 20, 30, 40, 50, false);\n-            assertSame(a, a.interpolate(b, 0));\n-            assertSame(a, a.interpolate(b, -0.5));\n+            var startValue = new ImagePattern(image, 10, 20, 30, 40, false);\n+            var endValue = new ImagePattern(image, 20, 30, 40, 50, false);\n+            assertSame(startValue, startValue.interpolate(endValue, 0));\n+            assertSame(startValue, startValue.interpolate(endValue, -0.5));\n@@ -129,4 +129,4 @@\n-            var a = new ImagePattern(image, 10, 20, 30, 40, false);\n-            var b = new ImagePattern(image, 20, 30, 40, 50, false);\n-            assertSame(b, a.interpolate(b, 1));\n-            assertSame(b, a.interpolate(b, 1.5));\n+            var startValue = new ImagePattern(image, 10, 20, 30, 40, false);\n+            var endValue = new ImagePattern(image, 20, 30, 40, 50, false);\n+            assertSame(endValue, startValue.interpolate(endValue, 1));\n+            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/paint\/ImagePatternTest.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -465,1 +465,1 @@\n-            var a = new LinearGradient(\n+            var startValue = new LinearGradient(\n@@ -470,1 +470,1 @@\n-            var b = new LinearGradient(\n+            var endValue = new LinearGradient(\n@@ -480,1 +480,1 @@\n-            assertEquals(expected, a.interpolate(b, 0.5));\n+            assertEquals(expected, startValue.interpolate(endValue, 0.5));\n@@ -484,2 +484,2 @@\n-        public void interpolateBetweenProportionalAndNonProportionalReturnsStartInstanceOrEndInstance() {\n-            var a = new LinearGradient(\n+        public void interpolateBetweenProportionalAndNonProportionalReturnsStartValuesOrEndValues() {\n+            var startValue = new LinearGradient(\n@@ -490,1 +490,1 @@\n-            var b = new LinearGradient(\n+            var endValue = new LinearGradient(\n@@ -495,2 +495,3 @@\n-            assertSame(a, a.interpolate(b, 0));\n-            assertSame(b, a.interpolate(b, 0.5));\n+            assertSame(startValue, startValue.interpolate(endValue, 0.25));\n+            assertSame(endValue, startValue.interpolate(endValue, 0.5));\n+            assertSame(endValue, startValue.interpolate(endValue, 0.75));\n@@ -501,1 +502,1 @@\n-            var a = new LinearGradient(\n+            var startValue = new LinearGradient(\n@@ -506,1 +507,1 @@\n-            var b = new LinearGradient(\n+            var endValue = new LinearGradient(\n@@ -511,1 +512,1 @@\n-            assertSame(a, a.interpolate(b, 0.5));\n+            assertSame(startValue, startValue.interpolate(endValue, 0.5));\n@@ -516,1 +517,1 @@\n-            var a = new LinearGradient(\n+            var startValue = new LinearGradient(\n@@ -521,1 +522,1 @@\n-            var b = new LinearGradient(\n+            var endValue = new LinearGradient(\n@@ -526,2 +527,2 @@\n-            assertSame(a, a.interpolate(b, 0));\n-            assertSame(a, a.interpolate(b, -1));\n+            assertSame(startValue, startValue.interpolate(endValue, 0));\n+            assertSame(startValue, startValue.interpolate(endValue, -1));\n@@ -532,1 +533,1 @@\n-            var a = new LinearGradient(\n+            var startValue = new LinearGradient(\n@@ -537,1 +538,1 @@\n-            var b = new LinearGradient(\n+            var endValue = new LinearGradient(\n@@ -542,2 +543,2 @@\n-            assertSame(b, a.interpolate(b, 1));\n-            assertSame(b, a.interpolate(b, 1.5));\n+            assertSame(endValue, startValue.interpolate(endValue, 1));\n+            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/paint\/LinearGradientTest.java","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -493,1 +493,1 @@\n-            var a = new RadialGradient(\n+            var startValue = new RadialGradient(\n@@ -498,1 +498,1 @@\n-            var b = new RadialGradient(\n+            var endValue = new RadialGradient(\n@@ -508,1 +508,1 @@\n-            assertEquals(expected, a.interpolate(b, 0.5));\n+            assertEquals(expected, startValue.interpolate(endValue, 0.5));\n@@ -513,1 +513,1 @@\n-            var a = new RadialGradient(\n+            var startValue = new RadialGradient(\n@@ -518,1 +518,1 @@\n-            var b = new RadialGradient(\n+            var endValue = new RadialGradient(\n@@ -523,2 +523,3 @@\n-            assertSame(a, a.interpolate(b, 0));\n-            assertSame(b, a.interpolate(b, 0.5));\n+            assertSame(startValue, startValue.interpolate(endValue, 0.25));\n+            assertSame(endValue, startValue.interpolate(endValue, 0.5));\n+            assertSame(endValue, startValue.interpolate(endValue, 0.75));\n@@ -529,1 +530,1 @@\n-            var a = new RadialGradient(\n+            var startValue = new RadialGradient(\n@@ -534,1 +535,1 @@\n-            var b = new RadialGradient(\n+            var endValue = new RadialGradient(\n@@ -539,1 +540,1 @@\n-            assertSame(a, a.interpolate(b, 0.5));\n+            assertSame(startValue, startValue.interpolate(endValue, 0.5));\n@@ -544,1 +545,1 @@\n-            var a = new RadialGradient(\n+            var startValue = new RadialGradient(\n@@ -549,1 +550,1 @@\n-            var b = new RadialGradient(\n+            var endValue = new RadialGradient(\n@@ -554,2 +555,2 @@\n-            assertSame(a, a.interpolate(b, 0));\n-            assertSame(a, a.interpolate(b, -1));\n+            assertSame(startValue, startValue.interpolate(endValue, 0));\n+            assertSame(startValue, startValue.interpolate(endValue, -1));\n@@ -560,1 +561,1 @@\n-            var a = new RadialGradient(\n+            var startValue = new RadialGradient(\n@@ -565,1 +566,1 @@\n-            var b = new RadialGradient(\n+            var endValue = new RadialGradient(\n@@ -570,2 +571,2 @@\n-            assertSame(b, a.interpolate(b, 1));\n-            assertSame(b, a.interpolate(b, 1.5));\n+            assertSame(endValue, startValue.interpolate(endValue, 1));\n+            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/paint\/RadialGradientTest.java","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-        assertThrows(NullPointerException.class, () -> normalize(new Stop(0.5, null)));\n+        assertEquals(zeroOneList, normalize(new Stop(0.5, null)));\n@@ -211,1 +211,1 @@\n-        public void differentSize_sameFirstAndLastOffset() {\n+        public void firstListLargerThanSecondList_sameFirstAndLastOffset() {\n@@ -214,0 +214,1 @@\n+\n@@ -219,0 +220,30 @@\n+\n+            \/\/ An interpolation factor close to zero should yield a stop list very similar to the first list\n+            expected = firstList;\n+            assertSimilar(expected, StopShim.interpolateLists(firstList, secondList, 0.001));\n+\n+            \/\/ An interpolation factor close to one should yield a stop list very similar to the second list,\n+            \/\/ but with a different number of stops (3 instead of 2).\n+            expected = List.of(new Stop(0, color1), new Stop(0.5, color2), new Stop(1, color3));\n+            assertSimilar(expected, StopShim.interpolateLists(firstList, secondList, 0.999));\n+        }\n+\n+        @Test\n+        public void firstListSmallerThanSecondList_sameFirstAndLastOffset() {\n+            var firstList = normalize(List.of(new Stop(0, color1), new Stop(1, color3)));\n+            var secondList = normalize(List.of(new Stop(0, color1), new Stop(0.5, color3), new Stop(1, color1)));\n+\n+            var expected = List.of(\n+                new Stop(0, color1),\n+                new Stop(0.5, color2.interpolate(color3, 0.5)),\n+                new Stop(1, color2));\n+            assertEquals(expected, StopShim.interpolateLists(firstList, secondList, 0.5));\n+\n+            \/\/ An interpolation factor close to zero should yield a stop list very similar to the first list,\n+            \/\/ but with a different number of stops (3 instead of 2).\n+            expected = List.of( new Stop(0, color1), new Stop(0.5, color2), new Stop(1, color3));\n+            assertSimilar(expected, StopShim.interpolateLists(firstList, secondList, 0.001));\n+\n+            \/\/ An interpolation factor close to one should yield a stop list very similar to the second list.\n+            expected = secondList;\n+            assertSimilar(expected, StopShim.interpolateLists(firstList, secondList, 0.999));\n@@ -234,0 +265,19 @@\n+\n+        private void assertSimilar(List<Stop> a, List<Stop> b) {\n+            assertEquals(a.size(), b.size());\n+            for (int i = 0; i < a.size(); ++i) {\n+                assertSimilar(a.get(i), b.get(i));\n+            }\n+        }\n+\n+        private void assertSimilar(Stop a, Stop b) {\n+            assertSimilar(a.getColor(), b.getColor());\n+            assertTrue(Math.abs(a.getOffset() - b.getOffset()) < 0.1);\n+        }\n+\n+        private void assertSimilar(Color a, Color b) {\n+            assertTrue(Math.abs(a.getRed() - b.getRed()) < 0.01);\n+            assertTrue(Math.abs(a.getGreen() - b.getGreen()) < 0.01);\n+            assertTrue(Math.abs(a.getBlue() - b.getBlue()) < 0.01);\n+            assertTrue(Math.abs(a.getOpacity() - b.getOpacity()) < 0.01);\n+        }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/paint\/StopListTest.java","additions":52,"deletions":2,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -50,2 +50,3 @@\n-    public void testNullColor() {\n-        assertThrows(NullPointerException.class, () -> new Stop(0.2f, null));\n+    public void testNullColorIsTransparent() {\n+        var stop = new Stop(0.2f, null);\n+        assertEquals(TRANSPARENT, stop.getColor());\n@@ -109,3 +110,3 @@\n-            var a = new Stop(0, RED);\n-            var b = new Stop(1, GREEN);\n-            assertEquals(new Stop(0.5, RED.interpolate(GREEN, 0.5)), a.interpolate(b, 0.5));\n+            var startValue = new Stop(0, RED);\n+            var endValue = new Stop(1, GREEN);\n+            assertEquals(new Stop(0.5, RED.interpolate(GREEN, 0.5)), startValue.interpolate(endValue, 0.5));\n@@ -116,3 +117,3 @@\n-            var a = new Stop(0.25, RED);\n-            var b = new Stop(0.25, RED);\n-            assertSame(a, a.interpolate(b, 0.5));\n+            var startValue = new Stop(0.25, RED);\n+            var endValue = new Stop(0.25, RED);\n+            assertSame(startValue, startValue.interpolate(endValue, 0.5));\n@@ -123,4 +124,4 @@\n-            var a = new Stop(0.25, RED);\n-            var b = new Stop(0.75, GREEN);\n-            assertSame(a, a.interpolate(b, 0));\n-            assertSame(a, a.interpolate(b, -1));\n+            var startValue = new Stop(0.25, RED);\n+            var endValue = new Stop(0.75, GREEN);\n+            assertSame(startValue, startValue.interpolate(endValue, 0));\n+            assertSame(startValue, startValue.interpolate(endValue, -1));\n@@ -131,4 +132,4 @@\n-            var a = new Stop(0.25, RED);\n-            var b = new Stop(0.75, GREEN);\n-            assertSame(b, a.interpolate(b, 1));\n-            assertSame(b, a.interpolate(b, 1.5));\n+            var startValue = new Stop(0.25, RED);\n+            var endValue = new Stop(0.75, GREEN);\n+            assertSame(endValue, startValue.interpolate(endValue, 1));\n+            assertSame(endValue, startValue.interpolate(endValue, 1.5));\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/paint\/StopTest.java","additions":17,"deletions":16,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -50,0 +50,2 @@\n+        var tab4 = new Tab(\"backgrounds\", new ScrollPane(createBackgroundTransitionsTab()));\n+        var tab5 = new Tab(\"borders\", new ScrollPane(createBorderTransitionsTab()));\n@@ -51,1 +53,1 @@\n-        var tabPane = new TabPane(tab1, tab2, tab3);\n+        var tabPane = new TabPane(tab1, tab2, tab3, tab4, tab5);\n@@ -118,0 +120,69 @@\n+\n+    private Region createBackgroundTransitionsTab() {\n+        return createContent(\"\"\"\n+            .rect {\n+              -fx-min-width: 100;\n+              -fx-min-height: 50;\n+              transition: all 2s;\n+            }\n+\n+            .rect:hover {\n+              -fx-min-width: 300;\n+            }\n+\n+            \/\/ Color transition\n+            #rect1 { -fx-background-color: red; }\n+            #rect1:hover { -fx-background-color: blue; }\n+\n+            \/\/ LinearGradient transition\n+            #rect2 { -fx-background-color: linear-gradient(to right, red, blue); }\n+            #rect2:hover { -fx-background-color: linear-gradient(to right, purple, yellow); }\n+\n+            \/\/ LinearGradient transition with different number of stops\n+            #rect3 { -fx-background-color: linear-gradient(to right, red, green); }\n+            #rect3:hover { -fx-background-color: linear-gradient(to right, red, yellow, blue); }\n+\n+            \/\/ RadialGradient transition with different number of stops\n+            #rect4 { -fx-background-color: radial-gradient(radius 100%, red, green); }\n+            #rect4:hover { -fx-background-color: radial-gradient(radius 100%, red, yellow, blue); }\n+            \"\"\",\n+            new RectInfo(\"#rect1\", \"rect1\"),\n+            new RectInfo(\"#rect2\", \"rect2\"),\n+            new RectInfo(\"#rect3\", \"rect3\"),\n+            new RectInfo(\"#rect4\", \"rect4\"));\n+    }\n+\n+    private Region createBorderTransitionsTab() {\n+        return createContent(\"\"\"\n+            .rect {\n+              -fx-min-width: 100;\n+              -fx-min-height: 50;\n+              -fx-border-width: 10;\n+              transition: all 2s;\n+            }\n+\n+            .rect:hover {\n+              -fx-min-width: 300;\n+            }\n+\n+            \/\/ Color transition\n+            #rect1 { -fx-border-color: red; }\n+            #rect1:hover { -fx-border-color: blue; }\n+\n+            \/\/ LinearGradient transition\n+            #rect2 { -fx-border-color: linear-gradient(to right, red, blue); }\n+            #rect2:hover { -fx-border-color: linear-gradient(to right, purple, yellow); }\n+\n+            \/\/ LinearGradient transition with different number of stops\n+            #rect3 { -fx-border-color: linear-gradient(to right, red, green); }\n+            #rect3:hover { -fx-border-color: linear-gradient(to right, red, yellow, blue); }\n+\n+            \/\/ RadialGradient transition with different number of stops\n+            #rect4 { -fx-border-color: radial-gradient(radius 100%, red, green); }\n+            #rect4:hover { -fx-border-color: radial-gradient(radius 100%, red, yellow, blue); }\n+            \"\"\",\n+            new RectInfo(\"#rect1\", \"rect1\"),\n+            new RectInfo(\"#rect2\", \"rect2\"),\n+            new RectInfo(\"#rect3\", \"rect3\"),\n+            new RectInfo(\"#rect4\", \"rect4\"));\n+    }\n","filename":"tests\/manual\/graphics\/CssTransitionsTest.java","additions":72,"deletions":1,"binary":false,"changes":73,"status":"modified"}]}