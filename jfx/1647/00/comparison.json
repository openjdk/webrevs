{"files":[{"patch":"@@ -76,0 +76,1 @@\n+import java.lang.Runtime.Version\n@@ -237,23 +238,0 @@\n-String[] parseJavaVersion(String jRuntimeVersion) {\n-    def jVersion = jRuntimeVersion.split(\"[-\\\\+]\")[0]\n-    def tmpBuildNumber = \"0\"\n-    if (jVersion.startsWith(\"1.\")) {\n-        \/\/ This is a pre-JEP-223 version string\n-        def dashbIdx = jRuntimeVersion.lastIndexOf(\"-b\")\n-        if (dashbIdx != -1) {\n-            tmpBuildNumber = jRuntimeVersion.substring(dashbIdx + 2)\n-        }\n-    } else {\n-        \/\/ This is a post-JEP-223 version string\n-        def plusIdx = jRuntimeVersion.indexOf(\"+\")\n-        if (plusIdx != -1) {\n-            tmpBuildNumber = jRuntimeVersion.substring(plusIdx + 1)\n-        }\n-    }\n-    def jBuildNumber = tmpBuildNumber.split(\"[-\\\\+]\")[0]\n-    def versionInfo = new String[2];\n-    versionInfo[0] = jVersion\n-    versionInfo[1] = jBuildNumber\n-    return versionInfo\n-}\n-\n@@ -421,5 +399,0 @@\n-defineProperty(\"javaRuntimeVersion\", System.getProperty(\"java.runtime.version\"))\n-def javaVersionInfo = parseJavaVersion(javaRuntimeVersion)\n-defineProperty(\"javaVersion\", javaVersionInfo[0])\n-defineProperty(\"javaBuildNumber\", javaVersionInfo[1])\n-\n@@ -766,2 +739,3 @@\n-def inStream = new java.io.BufferedReader(new java.io.InputStreamReader(new java.lang.ProcessBuilder(JAVA, \"-fullversion\").start().getErrorStream()));\n-try {\n+Version jdkVersionInfo;\n+try (BufferedReader inStream = new java.io.BufferedReader(new java.io.InputStreamReader(\n+        new java.lang.ProcessBuilder(JAVA, \"-fullversion\").start().getErrorStream()))) {\n@@ -774,5 +748,1 @@\n-\n-            defineProperty(\"jdkRuntimeVersion\", ver)\n-            def jdkVersionInfo = parseJavaVersion(ver)\n-            defineProperty(\"jdkVersion\", jdkVersionInfo[0])\n-            defineProperty(\"jdkBuildNumber\", jdkVersionInfo[1])\n+            jdkVersionInfo = Version.parse(ver);\n@@ -785,2 +755,1 @@\n-\/\/            def status = compareJdkVersion(jdkVersion, \"18\")\n-\/\/            ext.jdk18OrLater = (status >= 0)\n+\/\/            ext.jdk18OrLater = jdkVersionInfo.feature() >= 18\n@@ -788,2 +757,1 @@\n-            def status = compareJdkVersion(jdkVersion, \"24\")\n-            ext.jdk24OrLater = (status >= 0)\n+            ext.jdk24OrLater = jdkVersionInfo.feature() >= 24\n@@ -792,2 +760,0 @@\n-} finally {\n-    inStream.close();\n@@ -795,1 +761,1 @@\n-if (!project.hasProperty(\"jdkRuntimeVersion\")) throw new Exception(\"Unable to determine the version of Java in JDK_HOME at $JDK_HOME\");\n+if (jdkVersionInfo == null) throw new Exception(\"Unable to determine the version of Java in JDK_HOME at $JDK_HOME\");\n@@ -1514,6 +1480,9 @@\n-logger.quiet(\"java.runtime.version: ${javaRuntimeVersion}\")\n-logger.quiet(\"java version: ${javaVersion}\")\n-logger.quiet(\"java build number: ${javaBuildNumber}\")\n-logger.quiet(\"jdk.runtime.version: ${jdkRuntimeVersion}\")\n-logger.quiet(\"jdk version: ${jdkVersion}\")\n-logger.quiet(\"jdk build number: ${jdkBuildNumber}\")\n+\n+Version javaVersionInfo = Runtime.version()\n+logger.quiet(\"java.runtime.version: \" + javaVersionInfo)\n+logger.quiet(\"java version: \" + javaVersionInfo.feature())\n+logger.quiet(\"java build number: \" + javaVersionInfo.build().orElse(0))\n+\n+logger.quiet(\"jdk.runtime.version: \" + jdkVersionInfo)\n+logger.quiet(\"jdk version: \" + jdkVersionInfo.feature())\n+logger.quiet(\"jdk build \" + javaVersionInfo.build().orElse(0))\n@@ -1953,35 +1922,0 @@\n-\n-\/**\n- * Parses a JDK version string. The string must be in one of the following\n- * two formats:\n- *\n- *     major.minor.subminor\n- * or\n- *     major.minor.subminor_update\n- *\n- * In both cases a list of 4 integers is returned, with element 3 set to\n- * 0 in the former case.\n- *\/\n-List parseJdkVersion(String version) {\n-    def arr = version.split(\"[_\\\\.]\");\n-    def intArr = [];\n-    arr.each { s -> intArr += Integer.parseInt(s); }\n-    while (intArr.size() < 4) intArr += 0;\n-    return intArr;\n-}\n-\n-\/**\n- * Returns -1, 0, or 1 depending on whether JDK version \"a\" is less than,\n- * equal to, or grater than version \"b\".\n- *\/\n-int compareJdkVersion(String a, String b) {\n-    def aIntArr = parseJdkVersion(a);\n-    def bIntArr = parseJdkVersion(b);\n-\n-    for (int i = 0; i < 4; i++) {\n-        if (aIntArr[i] < bIntArr[i]) return -1;\n-        if (aIntArr[i] > bIntArr[i]) return  1;\n-    }\n-    return 0;\n-}\n-\n@@ -1999,9 +1933,3 @@\n-        def status = compareJdkVersion(jdkVersion, jfxBuildJdkVersionMin);\n-        if (status < 0) {\n-            fail(\"java version mismatch: JDK version (${jdkVersion}) < minimum version (${jfxBuildJdkVersionMin})\")\n-        } else if (status == 0) {\n-            def buildNum = Integer.parseInt(jdkBuildNumber)\n-            def minBuildNum = Integer.parseInt(jfxBuildJdkBuildnumMin)\n-            if (buildNum != 0 && buildNum < minBuildNum) {\n-                fail(\"JDK build number ($buildNum) < minimum build number ($minBuildNum)\")\n-            }\n+        Version minVersionInfo = Version.parse(\"${jfxBuildJdkVersionMin}+${jfxBuildJdkBuildnumMin}\") \/\/ from build.properties\n+        if (jdkVersionInfo.compareTo(minVersionInfo) < 0) {\n+            fail(\"java version mismatch: JDK version (${jdkVersionInfo}) < minimum version (${minVersionInfo})\")\n","filename":"build.gradle","additions":20,"deletions":92,"binary":false,"changes":112,"status":"modified"}]}