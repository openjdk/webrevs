{"files":[{"patch":"@@ -28,5 +28,0 @@\n-import static javafx.concurrent.Worker.State.SUCCEEDED;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-import java.util.concurrent.CountDownLatch;\n@@ -35,0 +30,1 @@\n+import javafx.concurrent.Worker;\n@@ -38,4 +34,4 @@\n-import org.junit.AfterClass;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -44,0 +40,6 @@\n+import java.util.concurrent.CountDownLatch;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n@@ -45,0 +47,1 @@\n+\n@@ -49,2 +52,2 @@\n-\n-    private WebView webView;\n+    public static Stage primaryStage;\n+    public static WebView webView;\n@@ -53,1 +56,0 @@\n-        Stage primaryStage = null;\n@@ -62,2 +64,5 @@\n-            Platform.setImplicitExit(false);\n-            this.primaryStage = primaryStage;\n+            CSSRoundingTest.primaryStage = primaryStage;\n+            webView = new WebView();\n+            Scene scene = new Scene(webView, 150, 100);\n+            primaryStage.setScene(scene);\n+            primaryStage.show();\n@@ -68,1 +73,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -73,1 +78,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -78,11 +83,2 @@\n-    @Before\n-    public void setupTestObjects() {\n-        Platform.runLater(() -> {\n-            webView = new WebView();\n-            Scene scene = new Scene(webView, 150, 100);\n-            cssRoundingTestApp.primaryStage.setScene(scene);\n-            cssRoundingTestApp.primaryStage.show();\n-        });\n-    }\n-\n-    @Test public void testCSSroundingForLinearLayout() {\n+    @Test\n+    public void testCSSroundingForLinearLayout() {\n@@ -95,13 +91,12 @@\n-            webView.getEngine().getLoadWorker().stateProperty().\n-                    addListener((observable, oldValue, newValue) -> {\n-                        if (newValue == SUCCEEDED) {\n-                            webView.requestFocus();\n-                        }\n-                    });\n-\n-            webView.focusedProperty().\n-                    addListener((observable, oldValue, newValue) -> {\n-                        if (newValue) {\n-                            webViewStateLatch.countDown();\n-                        }\n-                    });\n+            webView.getEngine().getLoadWorker().stateProperty().addListener((observable, oldValue, newValue) -> {\n+                if (newValue == Worker.State.SUCCEEDED) {\n+                    webView.requestFocus();\n+                }\n+            });\n+\n+            webView.focusedProperty().addListener((observable, oldValue, newValue) -> {\n+                if (newValue) {\n+                    webViewStateLatch.countDown();\n+                }\n+            });\n+\n@@ -152,2 +147,2 @@\n-        assertTrue(\"Timeout when waiting for focus change \", Util.await(webViewStateLatch));\n-        \/\/introduce sleep , so that web contents would be loaded , then take snapshot for testing\n+        assertTrue(Util.await(webViewStateLatch), \"Timeout when waiting for focus change\");\n+        \/\/ Introduce sleep to ensure web contents are loaded\n@@ -170,1 +165,0 @@\n-\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/CSSRoundingTest.java","additions":37,"deletions":43,"binary":false,"changes":80,"status":"modified"}]}