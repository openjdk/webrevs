{"files":[{"patch":"@@ -194,1 +194,1 @@\n-\n+#if !PLATFORM(JAVA)\n@@ -198,0 +198,5 @@\n+#else \/\/ required to round a floating-point number down to the nearest integer value otherwise it will introduce 1px extra height\n+    if (m_style.lineHeight.isPercentOrCalculated())\n+        return floorf(minimumValueForLength(m_style.lineHeight, fontSize()));\n+    return floorf(m_style.lineHeight.value());\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/layout\/formattingContexts\/inline\/InlineLevelBox.h","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,173 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.javafx.scene.web;\n+\n+import static javafx.concurrent.Worker.State.SUCCEEDED;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import java.util.concurrent.CountDownLatch;\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.scene.Scene;\n+import javafx.scene.web.WebView;\n+import javafx.stage.Stage;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import test.util.Util;\n+\n+public class CSSRoundingTest {\n+    private static final CountDownLatch launchLatch = new CountDownLatch(1);\n+\n+    \/\/ Maintain one application instance\n+    static CSSRoundingTestApp cssRoundingTestApp;\n+\n+    private WebView webView;\n+\n+    public static class CSSRoundingTestApp extends Application {\n+        Stage primaryStage = null;\n+\n+        @Override\n+        public void init() {\n+            CSSRoundingTest.cssRoundingTestApp = this;\n+        }\n+\n+        @Override\n+        public void start(Stage primaryStage) throws Exception {\n+            Platform.setImplicitExit(false);\n+            this.primaryStage = primaryStage;\n+            launchLatch.countDown();\n+        }\n+    }\n+\n+    @BeforeClass\n+    public static void setupOnce() {\n+        Util.launch(launchLatch, CSSRoundingTestApp.class);\n+    }\n+\n+    @AfterClass\n+    public static void tearDownOnce() {\n+        Util.shutdown();\n+    }\n+\n+    @Before\n+    public void setupTestObjects() {\n+        Platform.runLater(() -> {\n+            webView = new WebView();\n+            Scene scene = new Scene(webView, 150, 100);\n+            cssRoundingTestApp.primaryStage.setScene(scene);\n+            cssRoundingTestApp.primaryStage.show();\n+        });\n+    }\n+\n+    @Test public void testCSSroundingForLinearLayout() {\n+\n+        final CountDownLatch webViewStateLatch = new CountDownLatch(1);\n+\n+        Util.runAndWait(() -> {\n+            assertNotNull(webView);\n+\n+            webView.getEngine().getLoadWorker().stateProperty().\n+                    addListener((observable, oldValue, newValue) -> {\n+                        if (newValue == SUCCEEDED) {\n+                            webView.requestFocus();\n+                        }\n+                    });\n+\n+            webView.focusedProperty().\n+                    addListener((observable, oldValue, newValue) -> {\n+                        if (newValue) {\n+                            webViewStateLatch.countDown();\n+                        }\n+                    });\n+            String content = \"\"\"\n+                <html>\n+                <head>\n+                <style type=\"text\/css\">\n+                    body, div {\n+                        margin: 0;\n+                        padding: 0;\n+                        border: 0;\n+                    }\n+                    #top, #bottom {\n+                        line-height: 1.5;\n+                        font-size: 70%;\n+                        background:green;\n+                        color:white;\n+                        width:100%;\n+                    }\n+                    #top {\n+                        padding:.6em 0 .7em;\n+                    }\n+                    #bottom {\n+                      position:absolute;\n+                      top:2.8em;\n+                    }\n+                <\/style>\n+                <\/head>\n+                <body>\n+                <div id=\"top\">no gap below<\/div>\n+                <div id=\"bottom\">no gap above<\/div>\n+                <div id=\"description\"><\/div>\n+                <div id=\"console\"><\/div>\n+                <script>\n+                description(\"This test checks that floating point rounding doesn't cause misalignment.  There should be no gap between the divs.\");\n+                var divtop = document.getElementById(\"top\").getBoundingClientRect();\n+                var divbottom = document.getElementById(\"bottom\").getBoundingClientRect();\n+                console.log(\"divtop.bottom: \" + divtop.bottom);\n+                console.log(\"divbottom.top: \" + divbottom.top);\n+                window.testResults = { topBottom: Math.round(divtop.bottom), bottomTop: Math.round(divbottom.top) };\n+                <\/script>\n+                <\/body>\n+                <\/html>\n+                \"\"\";\n+            webView.getEngine().loadContent(content);\n+        });\n+\n+        assertTrue(\"Timeout when waiting for focus change \", Util.await(webViewStateLatch));\n+        \/\/introduce sleep , so that web contents would be loaded , then take snapshot for testing\n+        Util.sleep(1000);\n+\n+        Util.runAndWait(() -> {\n+            webView.getEngine().executeScript(\"\"\"\n+                var divtop = document.getElementById(\"top\").getBoundingClientRect();\n+                var divbottom = document.getElementById(\"bottom\").getBoundingClientRect();\n+                var topBottom = Math.round(divtop.bottom);\n+                var bottomTop = Math.round(divbottom.top);\n+                window.testResults = { topBottom: topBottom, bottomTop: bottomTop };\n+                \"\"\");\n+\n+            int topBottom = ((Number) webView.getEngine().executeScript(\"window.testResults.topBottom\")).intValue();\n+            int bottomTop = ((Number) webView.getEngine().executeScript(\"window.testResults.bottomTop\")).intValue();\n+\n+            assertEquals(31, topBottom);\n+            assertEquals(31, bottomTop);\n+\n+        });\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/web\/CSSRoundingTest.java","additions":173,"deletions":0,"binary":false,"changes":173,"status":"added"}]}