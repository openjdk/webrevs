{"files":[{"patch":"@@ -1,508 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.javafx.scene.web;\n-\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileReader;\n-import java.io.IOException;\n-import java.net.HttpURLConnection;\n-import java.util.ArrayList;\n-import java.util.Random;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-import javafx.application.Platform;\n-import javafx.beans.value.ChangeListener;\n-import javafx.concurrent.Worker.State;\n-import javafx.scene.web.WebEngine;\n-import javafx.scene.web.WebView;\n-import netscape.javascript.JSObject;\n-import org.junit.Ignore;\n-import org.junit.Test;\n-import org.w3c.dom.Document;\n-\n-import static java.lang.String.format;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-\n-public class MiscellaneousTest extends TestBase {\n-\n-    @Test public void testNoEffectOnFollowRedirects() {\n-        assertEquals(\"Unexpected HttpURLConnection.getFollowRedirects() result\",\n-                true, HttpURLConnection.getFollowRedirects());\n-        load(\"test\/html\/ipsum.html\");\n-        assertEquals(\"Unexpected HttpURLConnection.getFollowRedirects() result\",\n-                true, HttpURLConnection.getFollowRedirects());\n-    }\n-\n-    @Test public void testRT22458() throws Exception {\n-        final WebEngine webEngine = createWebEngine();\n-        Platform.runLater(() -> {\n-            webEngine.load(format(\"file:\/\/%d.ajax.googleapis.com\/ajax\",\n-                                  new Random().nextInt()));\n-        });\n-        Thread.sleep(200);\n-        long startTime = System.currentTimeMillis();\n-        DummyClass.dummyField++;\n-        long time = System.currentTimeMillis() - startTime;\n-        if (time > 2000) {\n-            fail(format(\"DummyClass took %f seconds to load\", time \/ 1000.));\n-        }\n-    }\n-\n-    private static final class DummyClass {\n-        private static int dummyField;\n-    }\n-\n-    @Test public void testRT30835() throws Exception {\n-        class Record {\n-            private final Document document;\n-            private final String location;\n-            public Record(Document document, String location) {\n-                this.document = document;\n-                this.location = location;\n-            }\n-        }\n-        final ArrayList<Record> records = new ArrayList<>();\n-        ChangeListener<State> listener = (ov, oldValue, newValue) -> {\n-            if (newValue == State.SUCCEEDED) {\n-                records.add(new Record(\n-                        getEngine().getDocument(),\n-                        getEngine().getLocation()));\n-            }\n-        };\n-        submit(() -> {\n-            getEngine().getLoadWorker().stateProperty().addListener(listener);\n-        });\n-        String location = new File(\"src\/test\/resources\/test\/html\/RT30835.html\")\n-                .toURI().toASCIIString().replaceAll(\"^file:\/\", \"file:\/\/\/\");\n-        load(location);\n-        assertEquals(1, records.size());\n-        assertNotNull(records.get(0).document);\n-        assertEquals(location, records.get(0).location);\n-    }\n-\n-    @Test public void testRT26306() {\n-        loadContent(\n-                \"<script language='javascript'>\\n\" +\n-                \"var s = '0123456789abcdef';\\n\" +\n-                \"while (true) {\\n\" +\n-                \"    alert(s.length);\\n\" +\n-                \"    s = s + s;\\n\" +\n-                \"}\\n\" +\n-                \"<\/script>\");\n-    }\n-\n-    @Test public void testWebViewWithoutSceneGraph() {\n-        submit(() -> {\n-             WebEngine engine = new WebView().getEngine();\n-             engine.getLoadWorker().stateProperty().addListener(\n-                    (observable, oldValue, newValue) -> {\n-                        if (State.SUCCEEDED == newValue) {\n-                            engine.executeScript(\n-                                \"window.scrollTo\" +\n-                                \"(0, document.documentElement.scrollHeight)\");\n-                        }\n-                    });\n-             engine.loadContent(\"<body> <a href=#>hello<\/a><\/body>\");\n-        });\n-    }\n-\n-    \/\/ JDK-8133775\n-    @Test(expected = IllegalStateException.class) public void testDOMObjectThreadOwnership() {\n-          class IllegalStateExceptionChecker {\n-              public Object resultObject;\n-              public void start() {\n-                 WebEngine engine = new WebEngine();\n-                 \/\/ Get DOM object from JavaFX Application Thread.\n-                 resultObject = engine.executeScript(\"document.createElement('span')\");\n-              }\n-           }\n-           IllegalStateExceptionChecker obj = new IllegalStateExceptionChecker();\n-           submit(obj::start);\n-           \/\/ Try accessing the resultObject created in JavaFX Application Thread\n-           \/\/ from someother thread. It should throw an exception.\n-           obj.resultObject.toString();\n-     }\n-\n-    \/\/ JDK-8162715\n-    public class TimerCallback {\n-        private static final int INTERVAL_COUNT = 20;\n-        private final CountDownLatch latch = new CountDownLatch(INTERVAL_COUNT);\n-        private class Stat {\n-            private long firedTime;\n-            private long createdTime;\n-            private long interval;\n-        }\n-        private Stat[] stats = new Stat[INTERVAL_COUNT];\n-\n-        public void call(long createdTime, long interval, int index) {\n-            Stat stat = new Stat();\n-            stat.firedTime = System.currentTimeMillis();\n-            stat.createdTime = createdTime;\n-            stat.interval = interval;\n-            stats[index] = stat;\n-            latch.countDown();\n-        }\n-    }\n-\n-    @Test(timeout = 30000) public void testDOMTimer() {\n-        final TimerCallback timer = new TimerCallback();\n-        final WebEngine webEngine = createWebEngine();\n-        submit(() -> {\n-            final JSObject window = (JSObject) webEngine.executeScript(\"window\");\n-            assertNotNull(window);\n-            window.setMember(\"timer\", timer);\n-            \/\/ Try various intervals\n-            for (int i = 0; i < timer.INTERVAL_COUNT; i++) {\n-                int timeout = i * (1000 \/ timer.INTERVAL_COUNT);\n-                webEngine.executeScript(\"window.setTimeout(\"\n-                                      + \"timer.call.bind(timer, Date.now(),\"\n-                                      \/\/ pass 'i' to call to test time\n-                                      + timeout +\",\" + i + \"),\"\n-                                      \/\/ set 'i' as a timeout interval\n-                                      + timeout + \")\");\n-            }\n-\n-        });\n-\n-        try {\n-            timer.latch.await();\n-        } catch (InterruptedException e) {\n-            throw new AssertionError(e);\n-        }\n-        for (TimerCallback.Stat stat : timer.stats) {\n-            assertNotNull(stat);\n-            final String msg = String.format(\n-                    \"expected delta:%d, actual delta:%d\",\n-                    stat.interval,\n-                    stat.firedTime - stat.createdTime);\n-            \/\/ Timer should not fire too early. Added 20 ms offset to compensate\n-            \/\/ the floating point approximation issues while dealing with timer.\n-            assertTrue(msg,\n-                    ((stat.firedTime + 20) - stat.createdTime) >= stat.interval);\n-            \/\/ Timer should not be too late. Since it is not a real time system,\n-            \/\/ we can't expect the timer to be fire at exactly on the requested\n-            \/\/ time, give a 1000 ms extra time.\n-            assertTrue(msg,\n-                    (stat.firedTime - stat.createdTime) <= (stat.interval + 1000));\n-        }\n-    }\n-\n-\n-    @Test public void testCookieEnabled() throws Exception {\n-        final WebEngine webEngine = createWebEngine();\n-        String location = new File(\"src\/test\/resources\/test\/html\/cookie.html\")\n-                .toURI().toASCIIString().replaceAll(\"^file:\/\", \"file:\/\/\/\");\n-        Platform.runLater(() -> {\n-            webEngine.load(location);\n-        });\n-        Thread.sleep(1000);\n-        submit(() -> {\n-            final JSObject window = (JSObject) webEngine.executeScript(\"window\");\n-            assertNotNull(window);\n-            webEngine.executeScript(\"var cookieEnabled = navigator.cookieEnabled\");\n-            assertTrue((Boolean)window.getMember(\"cookieEnabled\"));\n-        });\n-    }\n-\n-    \/\/ This test case will be removed once we implement Websql feature.\n-    @Test public void testWebSQLUndefined() {\n-        final WebEngine webEngine = createWebEngine();\n-        submit(() -> {\n-            assertEquals(\"undefined\", webEngine.executeScript(\"window.openDatabase\"));\n-        });\n-    }\n-\n-    private WebEngine createWebEngine() {\n-        return submit(() -> new WebEngine());\n-    }\n-\n-    \/**\n-     * @test\n-     * @bug 8180825\n-     * Checks CSS FontFace supports ArrayBuffer and ArrayBufferView arguments.\n-     * This test is derived based on a DRT testcase written as part of\n-     * WebKit changeset https:\/\/trac.webkit.org\/changeset\/200921\/webkit\n-    *\/\n-    public class FontFaceTestHelper {\n-        private final CountDownLatch latch = new CountDownLatch(1);\n-\n-        public final byte[] ttfFileContent;\n-\n-        FontFaceTestHelper(String ttfPath) throws Exception {\n-            final File ttfFile = new File(ttfPath);\n-            assertNotNull(ttfFile);\n-            assertTrue(ttfFile.canRead());\n-            assertTrue(ttfFile.length() > 0);\n-            final int length = (int) ttfFile.length();\n-            ttfFileContent = new byte[length];\n-            \/\/ Read ttf file contents\n-            int offset = 0;\n-            final FileInputStream ttfFileStream = new FileInputStream(ttfFile);\n-            assertNotNull(ttfFileContent);\n-            while (offset < length) {\n-                final int available = ttfFileStream.available();\n-                ttfFileStream.read(ttfFileContent, offset, available);\n-                offset += available;\n-            }\n-            assertEquals(\"Offset must equal to file length\", length, offset);\n-        }\n-\n-        \/\/ Will be called from JS to indicate test complete\n-        public void finish() {\n-            latch.countDown();\n-        }\n-\n-        private String failureMsg;\n-        \/\/ Will be called from JS to pass failure message\n-        public void failed(String msg) {\n-            failureMsg = msg;\n-        }\n-\n-        void waitForCompletion() {\n-            try {\n-                latch.await();\n-            } catch (InterruptedException e) {\n-                throw new AssertionError(e);\n-            }\n-\n-            if (failureMsg != null) {\n-                fail(failureMsg);\n-            }\n-        }\n-    }\n-\n-    @Test public void testFontFace() throws Exception {\n-        final FontFaceTestHelper fontFaceHelper = new FontFaceTestHelper(\"src\/main\/native\/Tools\/TestWebKitAPI\/Tests\/mac\/Ahem.ttf\");\n-        loadContent(\n-                \"<body>\\n\" +\n-                \"<span id='probe1' style='font-size: 100px;'>l<\/span>\\n\" +\n-                \"<span id='probe2' style='font-size: 100px;'>l<\/span>\\n\" +\n-                \"<\/body>\\n\"\n-        );\n-        submit(() -> {\n-            final JSObject window = (JSObject) getEngine().executeScript(\"window\");\n-            assertNotNull(window);\n-            assertEquals(\"undefined\", window.getMember(\"fontFaceHelper\"));\n-            window.setMember(\"fontFaceHelper\", fontFaceHelper);\n-            assertTrue(window.getMember(\"fontFaceHelper\") instanceof FontFaceTestHelper);\n-            \/\/ Create font-face object from byte[]\n-            getEngine().executeScript(\n-                \"var byteArray = new Uint8Array(fontFaceHelper.ttfFileContent);\\n\" +\n-                \"var arrayBuffer = byteArray.buffer;\\n\" +\n-                \"window.fontFace1 = new FontFace('WebFont1', arrayBuffer, {});\\n\" +\n-                \"window.fontFace2 = new FontFace('WebFont2', byteArray, {});\\n\"\n-            );\n-            assertEquals(\"loaded\", getEngine().executeScript(\"fontFace1.status\"));\n-            assertEquals(\"loaded\", getEngine().executeScript(\"fontFace2.status\"));\n-            \/\/ Add font-face to Document, so that it could be usable on styles\n-            getEngine().executeScript(\n-                \"document.fonts.add(fontFace1);\\n\" +\n-                \"document.fonts.add(fontFace2);\\n\" +\n-                \"document.getElementById('probe1').style.fontFamily = 'WebFont1';\\n\" +\n-                \"document.getElementById('probe2').style.fontFamily = 'WebFont2';\\n\"\n-            );\n-\n-            \/\/ Ensure web font is applied by checking width property of bounding rect.\n-            assertEquals(100, getEngine().executeScript(\"document.getElementById('probe1').getBoundingClientRect().width\"));\n-            assertEquals(100, getEngine().executeScript(\"document.getElementById('probe2').getBoundingClientRect().width\"));\n-            getEngine().executeScript(\n-                \"fontFace1.loaded.then(function() {\\n\" +\n-                \"   return fontFace2.loaded;\\n\" +\n-                \"}, function() {\\n\" +\n-                \"   fontFaceHelper.failed(\\\"fontFace1's promise should be successful\\\");\\n\" +\n-                \"   fontFaceHelper.finish();\\n\" +\n-                \"}).then(function() {\\n\" +\n-                \"   fontFaceHelper.finish();\\n\" +\n-                \"}, function() {\\n\" +\n-                \"   fontFaceHelper.failed(\\\"fontFace2's promise should be successful\\\");\\n\" +\n-                \"   fontFaceHelper.finish();\\n\" +\n-                \"});\\n\"\n-            );\n-        });\n-        fontFaceHelper.waitForCompletion();\n-    }\n-\n-    \/**\n-     * @test\n-     * @bug 8178360\n-     * Check for ICU word wrap. Compare element height which has single word vs multiline text which doesn't have\n-     * breakable text.\n-     *\/\n-    @Test public void testICUTextWrap() {\n-        loadContent(\n-        \"<p id='idword'>Lorem ipsum<\/p>\" +\n-        \"<p id='idwrap'>Lorem​Ipsum​Dolor​Sit​Amet​Consectetur​Adipiscing​Elit​Sed​Do​Eiusmod​Tempor​Incididunt​Ut​\" +\n-        \"Labore​Et​Dolore​Magna​Aliqua​Ut​Enim​Ad​Minim​Veniam​Quis​Nostrud​Exercitation​Ullamco​Laboris​Nisi​Ut​Aliqu\" +\n-        \"ip​Ex​Ea​Commodo​Consequat​Duis​Aute​Irure​Dolor​In​Reprehenderit​In​Voluptate​Velit​Esse​Cillum​Dolore​Eu​Fug\" +\n-        \"iat​Nulla​Pariatur​Excepteur​Sint​Occaecat​Cupidatat​Non​Proident​Sunt​In​Culpa​Qui​Officia​Deserunt​Mollit\" +\n-        \"​Anim​Id​Est​Laborum<\/p>\"\n-        );\n-\n-        submit(()->{\n-            assertFalse(\"ICU text wrap failed \",\n-                (Boolean) getEngine().executeScript(\n-                \"document.getElementById('idwrap').clientHeight == document.getElementById('idword').clientHeight\"));\n-        });\n-    }\n-\n-    \/**\n-     * @test\n-     * @bug 8185132\n-     * Check window.requestAnimationFrame functionality\n-     *\/\n-    @Test public void testRequestAnimationFrame() {\n-        final CountDownLatch latch = new CountDownLatch(1);\n-        loadContent(\"hello\");\n-        submit(() -> {\n-            final JSObject window =\n-                (JSObject) getEngine().executeScript(\"window\");\n-            assertNotNull(window);\n-            assertNotNull(window.getMember(\"requestAnimationFrame\"));\n-            window.setMember(\"latch\", latch);\n-            getEngine().executeScript(\n-                    \"window.requestAnimationFrame(function() {\\n\" +\n-                    \"latch.countDown(); });\");\n-        });\n-\n-        try {\n-            assertTrue(\"No callback received from window.requestAnimationFrame\",\n-                    latch.await(10, TimeUnit.SECONDS));\n-        } catch (InterruptedException e) {\n-            throw new AssertionError(e);\n-        }\n-    }\n-\n-    private void verifyUserAgentString(String userAgentString) {\n-        final String fxVersion = System.getProperty(\"javafx.runtime.version\");\n-        final String numericStr = fxVersion.split(\"[^0-9]\")[0];\n-        final String fxVersionString = \"JavaFX\/\" + numericStr;\n-        assertTrue(\"UserAgentString does not contain \" + fxVersionString, userAgentString.contains(fxVersionString));\n-\n-        File webkitLicense = new File(\"src\/main\/legal\/webkit.md\");\n-        assertTrue(\"File does not exist: \" + webkitLicense, webkitLicense.exists());\n-\n-        try (final BufferedReader licenseText = new BufferedReader(new FileReader(webkitLicense))) {\n-            final String firstLine = licenseText.readLine().trim();\n-            final String webkitVersion = firstLine.substring(firstLine.lastIndexOf(\" \") + 2);\n-            assertTrue(\"webkitVersion should not be empty\", webkitVersion.length() > 0);\n-            assertTrue(\"UserAgentString does not contain: \" + webkitVersion, userAgentString.contains(webkitVersion));\n-        } catch (IOException ex){\n-            throw new AssertionError(ex);\n-        }\n-    }\n-\n-    \/**\n-     * @test\n-     * @bug 8193207\n-     * Check UserAgentString for javafx runtime version and webkit version\n-     *\/\n-    @Test public void testUserAgentString() {\n-        submit(() -> {\n-            final String userAgentString = getEngine().getUserAgent();\n-            verifyUserAgentString(userAgentString);\n-        });\n-    }\n-\n-    \/**\n-     * @test\n-     * @bug 8275138\n-     * Check UserAgentString from JavaScript for javafx runtime version and webkit version\n-     *\/\n-    @Test public void testUserAgentStringJS() {\n-        final WebEngine webEngine = createWebEngine();\n-        submit(() -> {\n-            final JSObject window = (JSObject) webEngine.executeScript(\"window\");\n-            assertNotNull(window);\n-            webEngine.executeScript(\"var userAgent = navigator.userAgent\");\n-            String userAgentString = (String)window.getMember(\"userAgent\");\n-            assertNotNull(userAgentString);\n-            verifyUserAgentString(userAgentString);\n-        });\n-    }\n-\n-    @Test public void testShadowDOMWithLoadContent() {\n-        loadContent(\"<html>\\n\" +\n-                    \"  <body>\\n\" +\n-                    \"    <template id='element-details-template'>\\n\" +\n-                    \"      <style>\\n\" +\n-                    \"        p { font-weight: bold; }\\n\" +\n-                    \"      <\/style>\\n\" +\n-                    \"    <\/template>\\n\" +\n-                    \"    <element-details>\\n\" +\n-                    \"    <\/element-details>\\n\" +\n-                    \"    <script>\\n\" +\n-                    \"    customElements.define('element-details',\\n\" +\n-                    \"      class extends HTMLElement {\\n\" +\n-                    \"        constructor() {\\n\" +\n-                    \"          super();\\n\" +\n-                    \"          const template = document\\n\" +\n-                    \"            .getElementById('element-details-template')\\n\" +\n-                    \"            .content;\\n\" +\n-                    \"          const shadowRoot = this.attachShadow({mode: 'open'})\\n\" +\n-                    \"            .appendChild(template.cloneNode(true));\\n\" +\n-                    \"        }\\n\" +\n-                    \"      })\\n\" +\n-                    \"    <\/script>\\n\" +\n-                    \"  <\/body>\\n\" +\n-                    \"<\/html>\");\n-    }\n-\n-    @Test public void testWindows1251EncodingWithXML() {\n-        loadContent(\n-            \"<script>\\n\" +\n-            \"const text = '<?xml version=\\\"1.0\\\" encoding=\\\"windows-1251\\\"?><test\/>';\\n\" +\n-            \"const parser = new DOMParser();\\n\" +\n-            \"window.xmlDoc = parser.parseFromString(text, 'text\/xml');\\n\" +\n-            \"<\/script>\"\n-        );\n-        submit(() -> {\n-            \/\/ WebKit injects error message into body incase of encoding error, otherwise\n-            \/\/ body should be null.\n-            assertNull(getEngine().executeScript(\"window.xmlDoc.body\"));\n-        });\n-    }\n-\n-    @Test public void jrtCssFileIsNotRejected() {\n-        submit(() -> {\n-            try {\n-                getEngine().setUserStyleSheetLocation(\"jrt:\/javafx.web\/html\/imported-styles.css\");\n-            } catch (IllegalArgumentException e) {\n-                \/\/ A jrt file is supposed to be a valid argument\n-                throw new AssertionError(e);\n-            } catch (RuntimeException e) {\n-                \/\/ The css file cannot be loaded in the tests (since they are not modularized).\n-                \/\/ We thus simply ignore this exception here\n-            }\n-        });\n-    }\n-}\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/MiscellaneousTest.java","additions":0,"deletions":508,"binary":false,"changes":508,"status":"deleted"},{"patch":"@@ -1,9 +0,0 @@\n-<!DOCTYPE html>\n-<html>\n-<head>\n-    <meta http-equiv=\"Refresh\" content=\"100; URL=ipsum.html\" \/>\n-<\/head>\n-<body>\n-test cookie\n-<\/body>\n-<\/html>\n","filename":"modules\/javafx.web\/src\/test\/resources\/test\/html\/cookie.html","additions":0,"deletions":9,"binary":false,"changes":9,"status":"deleted"}]}