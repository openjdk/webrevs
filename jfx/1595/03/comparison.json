{"files":[{"patch":"@@ -339,1 +339,0 @@\n-ext.RUNJAVAPOLICYFILE = 'run.java.policy'\n@@ -343,1 +342,0 @@\n-ext.TESTJAVAPOLICYFILE = 'test.java.policy'\n@@ -3794,1 +3792,0 @@\n-        systemProperty 'java.security.manager', 'allow'\n@@ -4036,1 +4033,0 @@\n-    File testJavaPolicyFile = new File(rootProject.buildDir, TESTJAVAPOLICYFILE);\n@@ -4187,1 +4183,0 @@\n-        systemProperties 'worker.patch.policy': cygpath(testJavaPolicyFile.path)\n@@ -4194,2 +4189,0 @@\n-        systemProperty 'java.security.manager', 'allow'\n-\n@@ -4979,12 +4972,0 @@\n-        def outputPolicyDir = \"${modulesConfDir}\/java.base\/security\"\n-        def outputPolicyFile = file(\"${outputPolicyDir}\/java.policy.extra\")\n-\n-        outputs.file(outputPolicyFile)\n-        moduleProjList.each { project ->\n-            def policyDir = \"${project.projectDir}\/src\/main\/conf\/security\"\n-            def policyFile = file(\"${policyDir}\/java.policy\")\n-            if (policyFile.exists()) {\n-                inputs.file(policyFile)\n-            }\n-        }\n-\n@@ -5034,10 +5015,0 @@\n-\n-            \/\/ concatecate java.policy files into a single file\n-            \/\/\n-            mkdir outputPolicyDir\n-            outputPolicyFile.delete()\n-            moduleProjList.each { project ->\n-                def policyDir = \"${project.projectDir}\/src\/main\/conf\/security\"\n-                def policyFile = file(\"${policyDir}\/java.policy\")\n-                if (policyFile.exists()) outputPolicyFile << policyFile.text\n-            }\n@@ -5780,4 +5751,0 @@\n-        \/\/ And a test java.policy file\n-        File testJavaPolicyFile = new File(rootProject.buildDir, TESTJAVAPOLICYFILE)\n-        \/\/ and the non-test version to go with run.args\n-        File runJavaPolicyFile = new File(rootProject.buildDir, RUNJAVAPOLICYFILE);\n@@ -5787,2 +5754,0 @@\n-        outputs.file(testJavaPolicyFile)\n-        outputs.file(runJavaPolicyFile)\n@@ -5804,3 +5769,0 @@\n-            testJavaPolicyFile.delete()\n-            runJavaPolicyFile.delete()\n-\n@@ -5822,10 +5784,0 @@\n-                        String themod = dir.toURI()\n-                        testJavaPolicyFile <<  \"grant codeBase \\\"${themod}\\\" {\\n\" +\n-                        \"    permission java.security.AllPermission;\\n\" +\n-                        \"};\\n\"\n-\n-                        dir = new File(rootProject.buildDir, \"modular-sdk\/modules\/${project.ext.moduleName}\")\n-                        themod = dir.toURI()\n-                        runJavaPolicyFile <<  \"grant codeBase \\\"${themod}\\\" {\\n\" +\n-                        \"    permission java.security.AllPermission;\\n\" +\n-                        \"};\\n\"\n@@ -5856,11 +5808,0 @@\n-\n-                        String themod = dir.toURI()\n-                        testJavaPolicyFile <<  \"grant codeBase \\\"${themod}\\\" {\\n\" +\n-                        \"    permission java.security.AllPermission;\\n\" +\n-                        \"};\\n\"\n-\n-                        dir = new File(TEST_SDK_PATH, \"sdk\/lib\/${project.ext.moduleName}.jar\")\n-                        themod = dir.toURI()\n-                        runJavaPolicyFile <<  \"grant codeBase \\\"${themod}\\\" {\\n\" +\n-                        \"    permission java.security.AllPermission;\\n\" +\n-                        \"};\\n\"\n","filename":"build.gradle","additions":0,"deletions":59,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -1,4 +0,0 @@\n-grant codeBase \"jrt:\/javafx.base\" {\n-    permission java.security.AllPermission;\n-};\n-\n","filename":"modules\/javafx.base\/src\/main\/conf\/security\/java.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -36,107 +36,3 @@\n- * <p>\n- * The target name is the name of the JavaFX permission (see below). The naming\n- * convention follows the hierarchical property naming convention.\n- * Also, an asterisk can be used to represent all JavaFX permissions.\n- * <\/p>\n- *\n- * <p>\n- * The following table lists all the possible {@code FXPermission}\n- * target names, and for each provides a description of what the permission\n- * allows and a discussion of the risks of granting code the permission.\n- * <\/p>\n- *\n- * <table border=1>\n- * <caption>FXPermission Table<\/caption>\n- * <tr>\n- * <th style=\"padding: 5px;\" scope=\"col\">Permission Target Name<\/th>\n- * <th style=\"padding: 5px;\" scope=\"col\">What the Permission Allows<\/th>\n- * <th style=\"padding: 5px;\" scope=\"col\">Risks of Allowing this Permission<\/th>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th style=\"padding: 5px;\" scope=\"row\">accessClipboard<\/th>\n- *   <td style=\"padding: 5px;\">Posting and retrieval of information to and from the system clipboard<\/td>\n- *   <td style=\"padding: 5px;\">This would allow a malicious application to share or read\n- *       potentially sensitive or confidential information.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th style=\"padding: 5px;\" scope=\"row\">accessWindowList<\/th>\n- *   <td style=\"padding: 5px;\">Accessing the list of all JavaFX Windows<\/td>\n- *   <td style=\"padding: 5px;\">Providing access to the complete list of all JavaFX windows could give\n- *       a malicious application the ability to modify a security dialog.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th style=\"padding: 5px;\" scope=\"row\">createRobot<\/th>\n- *   <td style=\"padding: 5px;\">Creating JavaFX Robot objects<\/td>\n- *   <td style=\"padding: 5px;\">The JavaFX Robot object allows code to generate native-level\n- *       mouse and keyboard events as well as read the screen. It could allow\n- *       malicious code to control the system, run other programs, read the\n- *       display, and deny mouse and keyboard access to the user.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th style=\"padding: 5px;\" scope=\"row\">createTransparentWindow<\/th>\n- *   <td style=\"padding: 5px;\">Creating transparent windows<\/td>\n- *   <td style=\"padding: 5px;\">Transparent windows are not limited to a rectangular region that\n- *       obscures what is underneath the window.\n- *       This can make it difficult to distinguish parts of the window\n- *       from other application windows or the platform desktop, and can be used\n- *       to allow a malicious application to trick a user into entering\n- *       sensitive data, especially in conjunction with either\n- *       {@code setWindowAlwaysOnTop} or {@code unrestrictedFullScreen}.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th style=\"padding: 5px;\" scope=\"row\">loadFont<\/th>\n- *   <td style=\"padding: 5px;\">Loading a custom font, either via the\n- *       {@link javafx.scene.text.Font#loadFont} method or a jar file containing\n- *       embedded fonts listed in the jar manifest<\/td>\n- *   <td style=\"padding: 5px;\">Loading a custom font might allow a malicious application to provide a\n- *       malformed font. Such a font could crash the application, allowing the\n- *       malicious application to take control of the system, if there are any\n- *       bugs in the underlying platform font implementation.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th style=\"padding: 5px;\" scope=\"row\">modifyFXMLClassLoader<\/th>\n- *   <td style=\"padding: 5px;\">Setting the ClassLoader used to load FXML objects, and removing the\n- *       restriction against loading system classes<\/td>\n- *   <td style=\"padding: 5px;\">Allowing an application to set an arbitrary ClassLoader might enable\n- *       a malicious application to load classes with elevated permissions. Also\n- *       removing the restriction against loading system classes with a null\n- *       ClassLoader, might allow the application access to classes they would\n- *       otherwise be denied from accessing.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th style=\"padding: 5px;\" scope=\"row\">setWindowAlwaysOnTop<\/th>\n- *   <td style=\"padding: 5px;\">Setting the always-on-top property of a window:\n- *       {@link javafx.stage.Stage#setAlwaysOnTop}<\/td>\n- *   <td style=\"padding: 5px;\">The malicious window might make itself look and behave like the\n- *       platform desktop, so that information entered by the unsuspecting user\n- *       is captured and subsequently misused,\n- *       especially in conjunction with the {@code createTransparentWindow}\n- *       permission.<\/td>\n- * <\/tr>\n- *\n- * <tr>\n- *   <th style=\"padding: 5px;\" scope=\"row\">unrestrictedFullScreen<\/th>\n- *   <td style=\"padding: 5px;\">Allow unrestricted full-screen access, including keyboard events\n- *       and warning banner<\/td>\n- *   <td style=\"padding: 5px;\">This permission allows an application to enter full-screen mode at any\n- *       time, override the warning banner, and disable the function of\n- *       the ESC key to exit from full-screen mode.\n- *       All keyboard input will be delivered to the application while in\n- *       full-screen mode, rather than being limited to KEY_PRESSED and\n- *       KEY_RELEASED events for a subset of keys. See\n- *       {@link javafx.stage.Stage#setFullScreen}.\n- *       This could allow a malicious window to\n- *       look and behave like the platform desktop, so that information entered\n- *       by the unsuspecting user is captured and subsequently misused,\n- *       especially in conjunction with the {@code createTransparentWindow}\n- *       permission.<\/td>\n- * <\/tr>\n- *\n- * <\/table>\n+ * @apiNote\n+ * This permission cannot be used for controlling access to resources anymore\n+ * as the Security Manager is no longer supported.\n@@ -148,1 +44,0 @@\n- * @see java.lang.SecurityManager\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/util\/FXPermission.java","additions":3,"deletions":108,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -1,4 +0,0 @@\n-grant codeBase \"jrt:\/javafx.controls\" {\n-    permission java.security.AllPermission;\n-};\n-\n","filename":"modules\/javafx.controls\/src\/main\/conf\/security\/java.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant codeBase \"jrt:\/javafx.fxml\" {\n-    permission java.security.AllPermission;\n-};\n-\n","filename":"modules\/javafx.fxml\/src\/main\/conf\/security\/java.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant codeBase \"jrt:\/javafx.graphics\" {\n-    permission java.security.AllPermission;\n-};\n-\n","filename":"modules\/javafx.graphics\/src\/main\/conf\/security\/java.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -60,0 +60,10 @@\n+\n+    static {\n+        @SuppressWarnings(\"removal\")\n+        var sm = System.getSecurityManager();\n+        if (sm != null) {\n+            throw new UnsupportedOperationException(\"JavaFX does not support running with the Security Manager\");\n+        }\n+\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/LauncherImpl.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -66,0 +66,9 @@\n+    static {\n+        @SuppressWarnings(\"removal\")\n+        var sm = System.getSecurityManager();\n+        if (sm != null) {\n+            throw new UnsupportedOperationException(\"JavaFX does not support running with the Security Manager\");\n+        }\n+\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformImpl.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -136,9 +136,0 @@\n-     * <p>\n-     * If a security manager is present, the application must have\n-     * the {@link javafx.util.FXPermission} \"createTransparentWindow\"\n-     * in order to create a transparent window.\n-     * If the application doesn't have the required permission, it\n-     * won't be able to use this feature; it will appear as if the the platform\n-     * doesn't support transparent windows, and\n-     * {@code Platform.isSupported(TRANSPARENT_WINDOW)} will return {@code false}.\n-     * <\/p>\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/ConditionalFeature.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -495,2 +495,0 @@\n-     * If a {@code SecurityManager} is installed and it denies access to the\n-     * specified file a {@code SecurityException} may be thrown.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/print\/JobSettings.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,2 +69,0 @@\n-     * @throws SecurityException if the application does not\n-     * have permission to browse printers.\n@@ -103,2 +101,0 @@\n-     * @throws SecurityException if the application does not\n-     * have permission to browse printers.\n@@ -120,2 +116,0 @@\n-     * @throws SecurityException if the application does not\n-     * have permission to browse printers.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/print\/Printer.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -110,2 +110,0 @@\n-     * @throws SecurityException if a job does not have permission\n-     * to initiate a printer job.\n@@ -134,2 +132,0 @@\n-     * @throws SecurityException if a job does not have permission\n-     * to initiate a printer job.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/print\/PrinterJob.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -118,10 +118,1 @@\n- * If a security manager is present, the application must have the\n- * {@link javafx.util.FXPermission} \"accessClipboard\" in order for the\n- * Clipboard returned from Clipboard.getSystemClipboard() to be\n- * accessible from outside the JavaFX application. For compatibility with\n- * previous versions of the JDK the equivalent {@code AWTPermission}\n- * \"accessClipboard\" will also allow the FX clipboard to be accessible from\n- * outside the JavaFX application.\n- * <\/p>\n- * <p>\n- * If the application lacks permission or if the platform doesn't support\n+ * If the platform doesn't support\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/input\/Clipboard.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -59,3 +59,1 @@\n-     * interactions. If a security manager is present, the application must\n-     * have the {@link javafx.util.FXPermission} {@code \"createRobot\"} permission\n-     * in order to construct a {@code Robot} object.\n+     * interactions.\n@@ -65,3 +63,0 @@\n-     * @throws SecurityException if a security manager exists and the application\n-     * does not have the {@link javafx.util.FXPermission} {@code \"createRobot\"}\n-     * permission.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/robot\/Robot.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -371,8 +371,0 @@\n-     * If a security manager is present, the application\n-     * must have both permission to read from the specified URL location\n-     * and the {@link javafx.util.FXPermission} \"loadFont\".\n-     * If the application does not have permission to read from the specified\n-     * URL location, then null is returned.\n-     * If the application does not have the \"loadFont\" permission then this method\n-     * will return the default system font with the specified font size.\n-     * <p>\n@@ -417,9 +409,0 @@\n-     * If a security manager is present, the application\n-     * must have both permission to read from the specified URL location\n-     * and the {@link javafx.util.FXPermission} \"loadFont\".\n-     * If the application does not have permission to read from the specified\n-     * URL location, then null is returned.\n-     * If the application does not have the \"loadFont\" permission then this method\n-     * will return an array of one element which is the default\n-     *  system font with the specified font size.\n-     * <p>\n@@ -516,5 +499,0 @@\n-     * If a security manager is present, the application\n-     * must have the {@link javafx.util.FXPermission} \"loadFont\".\n-     * If the application does not have permission then this method\n-     * will return the default system font with the specified font size.\n-     * <p>\n@@ -559,5 +537,0 @@\n-     * If a security manager is present, the application\n-     * must have the {@link javafx.util.FXPermission} \"loadFont\".\n-     * If the application does not have permission then this method\n-     * will return the default system font with the specified font size.\n-     * <p>\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/text\/Font.java","additions":0,"deletions":27,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -626,0 +626,1 @@\n+     * <p>\n@@ -628,27 +629,1 @@\n-     * <p>\n-     * If a security manager is present, the application must have the\n-     * {@link javafx.util.FXPermission} \"unrestrictedFullScreen\" in order\n-     * to enter full-screen mode with no restrictions. Applications without\n-     * permission will have the following restrictions:\n-     * <\/p>\n-     * <ul>\n-     *  <li>Applications can only enter full-screen mode in response\n-     *   to user input. More specifically, entering is allowed from mouse\n-     *   ({@code Node.mousePressed\/mouseReleased\/mouseClicked}) or keyboard\n-     *   ({@code Node.keyPressed\/keyReleased\/keyTyped}) event handlers. It is\n-     *   not allowed to enter full-screen mode in response to {@code ESC}\n-     *   key. Attempting to enter full-screen mode from any other context will\n-     *   be ignored.\n-     *   <p>\n-     *   If {@code Stage} was constructed as full-screen but not visible\n-     *   it will enter full-screen mode upon becoming visible, with the same\n-     *   limitations to when this is allowed to happen as when setting\n-     *   {@code fullScreen} to {@code true}.\n-     *   <\/p>\n-     *  <\/li>\n-     *  <li> If the application was allowed to enter full-screen mode\n-     *   it will have limited keyboard input. It will only receive KEY_PRESSED\n-     *   and KEY_RELEASED events from the following keys:\n-     *   {@code UP, DOWN, LEFT, RIGHT, SPACE, TAB, PAGE_UP, PAGE_DOWN, HOME, END, ENTER}\n-     *  <\/li>\n-     * <\/ul>\n+     *\n@@ -859,7 +834,0 @@\n-     * If a security manager is present, the application must have the\n-     * {@link javafx.util.FXPermission} \"setWindowAlwaysOnTop\" in order for\n-     * this property to have any effect. If the application does not have\n-     * permission, attempting to set this property will be ignored\n-     * and the property value will be restored to {@code false}.\n-     * <\/p>\n-     * <p>\n@@ -1293,5 +1261,0 @@\n-     * If a security manager is present, the application must have the\n-     * {@link javafx.util.FXPermission} \"unrestrictedFullScreen\" to modify the\n-     * exit key combination. If the application does not have permission, the\n-     * value of this property will be ignored, in which case the\n-     * default key combination will be used.\n@@ -1330,7 +1293,0 @@\n-     * <p>\n-     * If a security manager is present, the application must have the\n-     * {@link javafx.util.FXPermission} \"unrestrictedFullScreen\" to modify the\n-     * exit hint. If the application does not have permission, the\n-     * value of this property will be ignored, in which case the\n-     * default message will be displayed.\n-     * <\/p>\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/stage\/Stage.java","additions":2,"deletions":46,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -1,4 +0,0 @@\n-grant codeBase \"jrt:\/javafx.media\" {\n-    permission java.security.AllPermission;\n-};\n-\n","filename":"modules\/javafx.media\/src\/main\/conf\/security\/java.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant codeBase \"jrt:\/javafx.swing\" {\n-    permission java.security.AllPermission;\n-};\n-\n","filename":"modules\/javafx.swing\/src\/main\/conf\/security\/java.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -1,4 +0,0 @@\n-grant codeBase \"jrt:\/javafx.web\" {\n-    permission java.security.AllPermission;\n-};\n-\n","filename":"modules\/javafx.web\/src\/main\/conf\/security\/java.policy","additions":0,"deletions":4,"binary":false,"changes":4,"status":"deleted"},{"patch":"@@ -35,1 +35,0 @@\n-import java.security.Permission;\n@@ -54,1 +53,0 @@\n-import static javafx.scene.web.WebErrorEvent.USER_DATA_DIRECTORY_SECURITY_ERROR;\n@@ -403,63 +401,0 @@\n-    @SuppressWarnings(\"removal\")\n-    @Test\n-    public void testSecurityError() {\n-        String url = new File(\"src\/test\/resources\/test\/html\/ipsum.html\")\n-                .toURI().toASCIIString();\n-        SecurityManager oldSecurityManager = System.getSecurityManager();\n-        System.setSecurityManager(new CustomSecurityManager(FOO));\n-        try {\n-            webEngine.setUserDataDirectory(FOO);\n-            load(webEngine, url);\n-        } finally {\n-            System.setSecurityManager(oldSecurityManager);\n-        }\n-        assertSame(FOO, webEngine.getUserDataDirectory());\n-        assertNotLocked(FOO);\n-        assertHasNoLocalStorage(webEngine);\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    @Test\n-    public void testSecurityErrorWithPassiveHandler() {\n-        String url = new File(\"src\/test\/resources\/test\/html\/ipsum.html\")\n-                .toURI().toASCIIString();\n-        SecurityManager oldSecurityManager = System.getSecurityManager();\n-        System.setSecurityManager(new CustomSecurityManager(FOO));\n-        ErrorHandler handler = new ErrorHandler();\n-        try {\n-            System.err.println(\"The following error is expected\");\n-            webEngine.setUserDataDirectory(FOO);\n-            webEngine.setOnError(handler);\n-            load(webEngine, url);\n-        } finally {\n-            System.setSecurityManager(oldSecurityManager);\n-        }\n-        assertSame(FOO, webEngine.getUserDataDirectory());\n-        assertNotLocked(FOO);\n-        assertHasNoLocalStorage(webEngine);\n-        assertOccurred(USER_DATA_DIRECTORY_SECURITY_ERROR, handler);\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    @Test\n-    public void testSecurityErrorWithRecoveringHandler() {\n-        String url = new File(\"src\/test\/resources\/test\/html\/ipsum.html\")\n-                .toURI().toASCIIString();\n-        SecurityManager oldSecurityManager = System.getSecurityManager();\n-        System.setSecurityManager(new CustomSecurityManager(FOO));\n-        try {\n-            webEngine.setUserDataDirectory(FOO);\n-            EventHandler<WebErrorEvent> h = event -> {\n-                webEngine.setUserDataDirectory(BAR);\n-            };\n-            webEngine.setOnError(h);\n-            assertSame(FOO, webEngine.getUserDataDirectory());\n-            load(webEngine, url);\n-        } finally {\n-            System.setSecurityManager(oldSecurityManager);\n-        }\n-        assertSame(BAR, webEngine.getUserDataDirectory());\n-        assertLocked(BAR);\n-        assertHasLocalStorage(webEngine);\n-    }\n-\n@@ -723,21 +658,0 @@\n-\n-    @SuppressWarnings(\"removal\")\n-    private static final class CustomSecurityManager extends SecurityManager {\n-        private final String path;\n-\n-        private CustomSecurityManager(File path) {\n-            try {\n-                this.path = path.getCanonicalPath();\n-            } catch (IOException ex) {\n-                throw new AssertionError(ex);\n-            }\n-        }\n-\n-        @Override public void checkPermission(Permission perm) {\n-            if (perm instanceof FilePermission\n-                    && perm.getName().startsWith(path))\n-            {\n-                super.checkPermission(perm);\n-            }\n-        }\n-    }\n","filename":"modules\/javafx.web\/src\/test\/java\/test\/javafx\/scene\/web\/UserDataDirectoryTest.java","additions":0,"deletions":86,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -1,93 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.security.AllPermission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n-\n-import javafx.application.Application;\n-import javafx.application.Platform;\n-import javafx.scene.Scene;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.Label;\n-import javafx.scene.layout.HBox;\n-import javafx.scene.layout.VBox;\n-import javafx.scene.web.WebView;\n-import javafx.stage.Stage;\n-\n-@SuppressWarnings(\"removal\")\n-public class HTTP2SecurityManagerTest {\n-\n-    public static class MainWindow extends Application {\n-\n-        @Override\n-        public void start(Stage stage) throws Exception {\n-            VBox instructions =  new VBox(\n-                new Label(\" This test loads a web page with a security manager set,\"),\n-                new Label(\" and a Policy that grants AllPermission.\"),\n-                new Label(\"\"),\n-                new Label(\" Check the console output for an AccessControllException:\"),\n-                new Label(\" Click 'Pass' if there is NO exception\"),\n-                new Label(\" Click 'Fail' if an AccessControlException is logged\")\n-            );\n-\n-            Button passButton = new Button(\"Pass\");\n-            passButton.setOnAction(e -> {\n-                Platform.exit();\n-            });\n-\n-            Button failButton = new Button(\"Fail\");\n-            failButton.setOnAction(e -> {\n-                Platform.exit();\n-                throw new AssertionError(\"Unexpected AccessControlException\");\n-            });\n-\n-            HBox buttonBox = new HBox(20, passButton, failButton);\n-\n-            WebView webView = new WebView();\n-            webView.getEngine().load(\"https:\/\/www.oracle.com\/java\/\");\n-            VBox root = new VBox(10, buttonBox, instructions, webView);\n-            Scene scene = new Scene(root);\n-            stage.setScene(scene);\n-            stage.show();\n-        }\n-\n-    }\n-\n-    public static void main(String[] args) {\n-        Policy.setPolicy(new Policy() {\n-            @Override\n-            public PermissionCollection getPermissions(ProtectionDomain domain) {\n-                Permissions permissions = new Permissions();\n-                permissions.add(new AllPermission());\n-                return permissions;\n-            }\n-        });\n-        System.setSecurityManager(new SecurityManager());\n-        Application.launch(MainWindow.class);\n-    }\n-}\n","filename":"tests\/manual\/web\/HTTP2SecurityManagerTest.java","additions":0,"deletions":93,"binary":false,"changes":93,"status":"deleted"},{"patch":"@@ -1,149 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.com.sun.javafx.css;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import java.security.Permission;\n-import java.util.List;\n-import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n-import javafx.collections.ObservableSet;\n-import javafx.css.CssMetaData;\n-import javafx.css.Declaration;\n-import javafx.css.PseudoClass;\n-import javafx.css.Rule;\n-import javafx.css.Selector;\n-import javafx.css.Styleable;\n-import javafx.css.Stylesheet;\n-import javafx.scene.paint.Color;\n-import org.junit.jupiter.api.Test;\n-import com.sun.javafx.css.StyleManager;\n-\n-public class StylesheetWithSecurityManagerTest {\n-\n-    static final Styleable styleable = new Styleable() {\n-        @Override\n-        public String getTypeSelector() {\n-            return \"*\";\n-        }\n-\n-        @Override\n-        public String getId() {\n-            return null;\n-        }\n-\n-        ObservableList<String> styleClasses = FXCollections.observableArrayList(\"root\");\n-        @Override\n-        public ObservableList<String> getStyleClass() {\n-            return styleClasses;\n-        }\n-\n-        @Override\n-        public String getStyle() {\n-            return null;\n-        }\n-\n-        @Override\n-        public List<CssMetaData<? extends Styleable, ?>> getCssMetaData() {\n-            return null;\n-        }\n-\n-        @Override\n-        public Styleable getStyleableParent() {\n-            return null;\n-        }\n-\n-        @Override\n-        public ObservableSet<PseudoClass> getPseudoClassStates() {\n-            return FXCollections.<PseudoClass>emptyObservableSet();\n-        }\n-    };\n-\n-    @SuppressWarnings(\"removal\")\n-    @Test\n-    public void testRT_38395() throws Exception {\n-\n-        System.setSecurityManager(new TestSecurityManager());\n-        Stylesheet stylesheet = StyleManager.loadStylesheet(\"com\/sun\/javafx\/scene\/control\/skin\/modena\/modena.css\");\n-        assertNotNull(stylesheet);\n-\n-        Color base = null;\n-        for(Rule rule : stylesheet.getRules()) {\n-            for (Selector s : rule.getSelectors()) {\n-                if (s.applies(styleable)) {\n-                    for(Declaration decl : rule.getDeclarations()) {\n-                        if (\"-fx-base\".equals(decl.getProperty())) {\n-                            base = (Color)decl.getParsedValue().convert(null);\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        assertNotNull(base);\n-        Color expected = Color.web(\"#ececec\");\n-        assertEquals(expected.getRed(), base.getGreen(), 1E-6);\n-        assertEquals(expected.getGreen(), base.getGreen(), 1E-6);\n-        assertEquals(expected.getBlue(), base.getBlue(), 1E-6);\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    @Test\n-    public void testRT_38395_import_local() throws Exception {\n-        System.setSecurityManager(new TestSecurityManager());\n-        Stylesheet stylesheet = StyleManager.loadStylesheet(\"test\/com\/sun\/javafx\/css\/StylesheetTest_importLocal.css\");\n-        assertNotNull(stylesheet);\n-\n-        Color base = null;\n-        for(Rule rule : stylesheet.getRules()) {\n-            for (Selector s : rule.getSelectors()) {\n-                if (s.applies(styleable)) {\n-                    for(Declaration decl : rule.getDeclarations()) {\n-                        if (\"-fx-base\".equals(decl.getProperty())) {\n-                            base = (Color)decl.getParsedValue().convert(null);\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        assertNotNull(base);\n-        Color expected = Color.web(\"#cccccc\");\n-        assertEquals(expected.getRed(), base.getGreen(), 1E-6);\n-        assertEquals(expected.getGreen(), base.getGreen(), 1E-6);\n-        assertEquals(expected.getBlue(), base.getBlue(), 1E-6);\n-    }\n-\n-    \/\/\n-    \/\/ The code in URLConverter that this attempts to test only checks to see whether or not there is a SecurityManager.\n-    \/\/\n-    @SuppressWarnings(\"removal\")\n-    static class TestSecurityManager extends SecurityManager {\n-        @Override\n-        public void checkPermission(Permission perm) {\n-            return;\n-        }\n-    }\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/css\/StylesheetWithSecurityManagerTest.java","additions":0,"deletions":149,"binary":false,"changes":149,"status":"deleted"},{"patch":"@@ -56,1 +56,1 @@\n-                testAppName, null, null, jvmArgs);\n+                testAppName, null, jvmArgs);\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/css\/imagecacheleaktest\/ImageCacheLeakTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-            testAppName, null, null, jvmArgs);\n+            testAppName, null, jvmArgs);\n","filename":"tests\/system\/src\/test\/java\/test\/javafx\/scene\/shape\/meshmanagercacheleaktest\/MeshManagerCacheLeakTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,3 +52,1 @@\n-                        null,\n-                        null\n-                        );\n+                        null);\n","filename":"tests\/system\/src\/test\/java\/test\/launchertest\/JarLauncherTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -119,3 +119,1 @@\n-                        d.testPldrName,\n-                        null\n-                        );\n+                        d.testPldrName);\n","filename":"tests\/system\/src\/test\/java\/test\/launchertest\/MainLauncherTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,1 +75,0 @@\n-                        null,\n","filename":"tests\/system\/src\/test\/java\/test\/launchertest\/ModuleLauncherTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-                Util.createApplicationLaunchCommand(testAppName, null, null);\n+                Util.createApplicationLaunchCommand(testAppName, null);\n","filename":"tests\/system\/src\/test\/java\/test\/launchertest\/PlatformExitTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,298 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.robot.helloworld;\n-\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.junit.jupiter.api.Assumptions.assumeTrue;\n-import java.awt.AWTPermission;\n-import java.security.AllPermission;\n-import java.security.Permission;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-import javafx.geometry.Rectangle2D;\n-import javafx.scene.Group;\n-import javafx.scene.Scene;\n-import javafx.scene.paint.Color;\n-import javafx.scene.robot.Robot;\n-import javafx.stage.Screen;\n-import javafx.stage.Stage;\n-import javafx.stage.StageStyle;\n-import javafx.util.FXPermission;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.Timeout;\n-import com.sun.javafx.PlatformUtil;\n-import test.robot.testharness.VisualTestBase;\n-\n-\/**\n- * Basic visual tests using glass Robot to sample pixels.\n- *\/\n-@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n-public class CustomSecurityManagerTest extends VisualTestBase {\n-\n-    private Stage testStage1;\n-    private Scene testScene1;\n-    private Stage testStage2;\n-    private Scene testScene2;\n-\n-    private static final double TOLERANCE = 0.07;\n-\n-    private static final int WIDTH = 400;\n-    private static final int HEIGHT = 300;\n-\n-    Rectangle2D screenBounds;\n-\n-    @SuppressWarnings(\"removal\")\n-    static class MySecurityManager extends SecurityManager {\n-        private final boolean permissive;\n-\n-        MySecurityManager(boolean permissive) {\n-            this.permissive = permissive;\n-        }\n-\n-        @Override public void checkPermission(Permission perm) {\n-            \/\/ Grant access if we are permissive\n-            if (permissive) {\n-                return;\n-            }\n-\n-            \/\/ Grant access unless one of the following is required\n-            if (!(perm instanceof AllPermission)\n-                    && !(perm instanceof FXPermission)\n-                    && !(perm instanceof AWTPermission)) {\n-                return;\n-            }\n-\n-            super.checkPermission(perm);\n-        }\n-\n-        @Override public void checkPermission(Permission perm, Object context) {\n-            assertNotNull(context);\n-            checkPermission(perm);\n-        }\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    @AfterEach\n-    public void cleanup() {\n-        System.setSecurityManager(null);\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    private void doTestOnTopCommon(SecurityManager sm, boolean expectedOnTop) {\n-        \/\/ Skip on Linux due to 8145152\n-        assumeTrue(!PlatformUtil.isLinux());\n-\n-        System.setSecurityManager(sm);\n-        try {\n-            runAndWait(() -> {\n-                testStage1 = getStage(false);\n-                testScene1 = new Scene(new Group(), WIDTH, HEIGHT);\n-                testScene1.setFill(Color.RED);\n-                testStage1.setScene(testScene1);\n-                testStage1.setAlwaysOnTop(true);\n-                testStage1.show();\n-            });\n-            waitFirstFrame();\n-            runAndWait(() -> {\n-                testStage2 = getStage(false);\n-                testScene2 = new Scene(new Group(), WIDTH, HEIGHT);\n-                testScene2.setFill(Color.GREEN);\n-                testStage2.setScene(testScene2);\n-                testStage2.show();\n-                testStage2.toFront();\n-            });\n-            waitFirstFrame();\n-        } finally {\n-            System.setSecurityManager(null);\n-        }\n-        runAndWait(() -> {\n-            boolean propertyState = testStage1.alwaysOnTopProperty().get();\n-            if (expectedOnTop) {\n-                assertTrue(propertyState);\n-            } else {\n-                assertFalse(propertyState);\n-            }\n-            Color color = getColor(testScene1, WIDTH \/ 2, HEIGHT \/ 2);\n-            if (expectedOnTop) {\n-                assertColorEquals(Color.RED, color, TOLERANCE);\n-            } else {\n-                assertColorEquals(Color.GREEN, color, TOLERANCE);\n-            }\n-        });\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    private void doTestFullScreenCommon(SecurityManager sm,\n-                                        boolean initFullScreen,\n-                                        boolean expectedFullScreen)\n-    {\n-        \/\/ Readback of FullScreen window is not stable on Linux\n-        assumeTrue(!PlatformUtil.isLinux());\n-\n-        runAndWait(() -> {\n-            screenBounds = Screen.getPrimary().getVisualBounds();\n-        });\n-\n-        System.setSecurityManager(sm);\n-        try {\n-            runAndWait(() -> {\n-                testStage1 = getStage(false);\n-                testStage1.initStyle(StageStyle.DECORATED);\n-                testScene1 = new Scene(new Group(), WIDTH, HEIGHT);\n-                testScene1.setFill(Color.LIME);\n-                testStage1.setScene(testScene1);\n-                if (initFullScreen) {\n-                    testStage1.setFullScreen(true);\n-                }\n-                testStage1.setX((screenBounds.getWidth() - WIDTH) \/ 2);\n-                testStage1.setY((screenBounds.getHeight() - HEIGHT) \/ 2);\n-                testStage1.show();\n-                testStage1.toFront();\n-            });\n-            waitFirstFrame();\n-            if (!initFullScreen) {\n-                runAndWait(() -> {\n-                    testStage1.setFullScreen(true);\n-                });\n-                waitFirstFrame();\n-            }\n-        } finally {\n-            System.setSecurityManager(null);\n-        }\n-\n-        \/\/ Give full-screen transition time to settle down\n-        sleep(1000);\n-\n-        runAndWait(() -> {\n-            boolean propertyState = testStage1.fullScreenProperty().get();\n-            if (expectedFullScreen) {\n-                assertTrue(propertyState);\n-            } else {\n-                assertFalse(propertyState);\n-            }\n-            final int offset = 10;\n-            for (int row = 0; row < 2; row++) {\n-                int y = row == 0 ? (int)screenBounds.getMinY() + offset : (int)screenBounds.getMaxY() - offset - 1;\n-\n-                for (int col = 0; col < 2; col++) {\n-                    int x = col == 0 ? (int)screenBounds.getMinX() + offset : (int)screenBounds.getMaxX() - offset - 1;\n-                    Color color = getColor(x, y);\n-                    if (expectedFullScreen) {\n-                        assertColorEquals(Color.LIME, color, TOLERANCE);\n-                    } else {\n-                        assertColorDoesNotEqual(Color.LIME, color, TOLERANCE);\n-                    }\n-                }\n-            }\n-        });\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    private void doTestRobotCommon(SecurityManager sm, boolean expectedCreateRobot) {\n-        final AtomicReference<Robot> robot = new AtomicReference<>();\n-        System.setSecurityManager(sm);\n-        try {\n-            runAndWait(() -> {\n-                try {\n-                    robot.set(new Robot());\n-                } catch (SecurityException ex) {\n-                    robot.set(null);\n-                }\n-            });\n-        } finally {\n-            System.setSecurityManager(null);\n-        }\n-        if (expectedCreateRobot) {\n-            assertNotNull(robot.get());\n-        } else {\n-            assertNull(robot.get());\n-        }\n-    }\n-\n-    @Test\n-    public void testOnTopNoSecurityManager() {\n-        doTestOnTopCommon(null, true);\n-    }\n-\n-    @Test\n-    public void testOnTopPermissiveSecurityManager() {\n-        doTestOnTopCommon(new MySecurityManager(true), true);\n-    }\n-\n-    @Test\n-    public void testOnTopRestrictiveSecurityManager() {\n-        doTestOnTopCommon(new MySecurityManager(false), false);\n-    }\n-\n-    @Test\n-    public void testFullScreenInitNoSecurityManager() {\n-        doTestFullScreenCommon(null, true, true);\n-    }\n-\n-    @Test\n-    public void testFullScreenInitPermissiveSecurityManager() {\n-        doTestFullScreenCommon(new MySecurityManager(true), true, true);\n-    }\n-\n-    @Test\n-    public void testFullScreenInitRestrictiveSecurityManager() {\n-        doTestFullScreenCommon(new MySecurityManager(false), true, false);\n-    }\n-\n-    @Test\n-    public void testFullScreenAfterNoSecurityManager() {\n-        doTestFullScreenCommon(null, false, true);\n-    }\n-\n-    @Test\n-    public void testFullScreenAfterPermissiveSecurityManager() {\n-        doTestFullScreenCommon(new MySecurityManager(true), false, true);\n-    }\n-\n-    @Test\n-    public void testFullScreenAfterRestrictiveSecurityManager() {\n-        doTestFullScreenCommon(new MySecurityManager(false), false, false);\n-    }\n-\n-    @Test\n-    public void testRobotNoSecurityManager() {\n-        doTestRobotCommon(null, true);\n-    }\n-\n-    @Test\n-    public void testRobotPermissiveSecurityManager() {\n-        doTestRobotCommon(new MySecurityManager(true), true);\n-    }\n-\n-    @Test\n-    public void testRobotRestrictiveSecurityManager() {\n-        doTestRobotCommon(new MySecurityManager(false), false);\n-    }\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/helloworld\/CustomSecurityManagerTest.java","additions":0,"deletions":298,"binary":false,"changes":298,"status":"deleted"},{"patch":"@@ -0,0 +1,182 @@\n+\/*\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.helloworld;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javafx.geometry.Rectangle2D;\n+import javafx.scene.Group;\n+import javafx.scene.Scene;\n+import javafx.scene.paint.Color;\n+import javafx.scene.robot.Robot;\n+import javafx.stage.Screen;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.Timeout;\n+import com.sun.javafx.PlatformUtil;\n+import test.robot.testharness.VisualTestBase;\n+\n+\/**\n+ * Basic visual tests using glass Robot to sample pixels.\n+ *\/\n+@Timeout(value=15000, unit=TimeUnit.MILLISECONDS)\n+public class StageRobotTest extends VisualTestBase {\n+\n+    private Stage testStage1;\n+    private Scene testScene1;\n+    private Stage testStage2;\n+    private Scene testScene2;\n+\n+    private static final double TOLERANCE = 0.07;\n+\n+    private static final int WIDTH = 400;\n+    private static final int HEIGHT = 300;\n+\n+    Rectangle2D screenBounds;\n+\n+    @AfterEach\n+    public void cleanup() {\n+    }\n+\n+    private void doTestOnTopCommon(boolean expectedOnTop) {\n+        \/\/ Skip on Linux due to 8145152\n+        assumeTrue(!PlatformUtil.isLinux());\n+\n+        runAndWait(() -> {\n+            testStage1 = getStage(false);\n+            testScene1 = new Scene(new Group(), WIDTH, HEIGHT);\n+            testScene1.setFill(Color.RED);\n+            testStage1.setScene(testScene1);\n+            testStage1.setAlwaysOnTop(true);\n+            testStage1.show();\n+        });\n+        waitFirstFrame();\n+        runAndWait(() -> {\n+            testStage2 = getStage(false);\n+            testScene2 = new Scene(new Group(), WIDTH, HEIGHT);\n+            testScene2.setFill(Color.GREEN);\n+            testStage2.setScene(testScene2);\n+            testStage2.show();\n+            testStage2.toFront();\n+        });\n+        waitFirstFrame();\n+        runAndWait(() -> {\n+            boolean propertyState = testStage1.alwaysOnTopProperty().get();\n+            if (expectedOnTop) {\n+                assertTrue(propertyState);\n+            } else {\n+                assertFalse(propertyState);\n+            }\n+            Color color = getColor(testScene1, WIDTH \/ 2, HEIGHT \/ 2);\n+            if (expectedOnTop) {\n+                assertColorEquals(Color.RED, color, TOLERANCE);\n+            } else {\n+                assertColorEquals(Color.GREEN, color, TOLERANCE);\n+            }\n+        });\n+    }\n+\n+    private void doTestFullScreenCommon(boolean initFullScreen,\n+                                        boolean expectedFullScreen)\n+    {\n+        \/\/ Readback of FullScreen window is not stable on Linux\n+        assumeTrue(!PlatformUtil.isLinux());\n+\n+        runAndWait(() -> {\n+            screenBounds = Screen.getPrimary().getVisualBounds();\n+        });\n+\n+        runAndWait(() -> {\n+            testStage1 = getStage(false);\n+            testStage1.initStyle(StageStyle.DECORATED);\n+            testScene1 = new Scene(new Group(), WIDTH, HEIGHT);\n+            testScene1.setFill(Color.LIME);\n+            testStage1.setScene(testScene1);\n+            if (initFullScreen) {\n+                testStage1.setFullScreen(true);\n+            }\n+            testStage1.setX((screenBounds.getWidth() - WIDTH) \/ 2);\n+            testStage1.setY((screenBounds.getHeight() - HEIGHT) \/ 2);\n+            testStage1.show();\n+            testStage1.toFront();\n+        });\n+        waitFirstFrame();\n+        if (!initFullScreen) {\n+            runAndWait(() -> {\n+                testStage1.setFullScreen(true);\n+            });\n+            waitFirstFrame();\n+        }\n+\n+        \/\/ Give full-screen transition time to settle down\n+        sleep(1000);\n+\n+        runAndWait(() -> {\n+            boolean propertyState = testStage1.fullScreenProperty().get();\n+            if (expectedFullScreen) {\n+                assertTrue(propertyState);\n+            } else {\n+                assertFalse(propertyState);\n+            }\n+            final int offset = 10;\n+            for (int row = 0; row < 2; row++) {\n+                int y = row == 0 ? (int)screenBounds.getMinY() + offset : (int)screenBounds.getMaxY() - offset - 1;\n+\n+                for (int col = 0; col < 2; col++) {\n+                    int x = col == 0 ? (int)screenBounds.getMinX() + offset : (int)screenBounds.getMaxX() - offset - 1;\n+                    Color color = getColor(x, y);\n+                    if (expectedFullScreen) {\n+                        assertColorEquals(Color.LIME, color, TOLERANCE);\n+                    } else {\n+                        assertColorDoesNotEqual(Color.LIME, color, TOLERANCE);\n+                    }\n+                }\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void testOnTop() {\n+        doTestOnTopCommon(true);\n+    }\n+\n+    @Test\n+    public void testFullScreenInit() {\n+        doTestFullScreenCommon(true, true);\n+    }\n+\n+    @Test\n+    public void testFullScreenAfter() {\n+        doTestFullScreenCommon(false, true);\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/helloworld\/StageRobotTest.java","additions":182,"deletions":0,"binary":false,"changes":182,"status":"added"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.sandbox;\n-\n-\/**\n- * Global constants for sandbox tests.\n- *\/\n-public class Constants {\n-\n-    \/\/ Test timeout in milliseconds\n-    public static final int TIMEOUT = 30000;\n-\n-    \/\/ Time in milliseconds to show the stage\n-    public static final int SHOWTIME = 2500;\n-\n-    \/\/ Error exit codes. Note that 0 and 1 are reserved for normal exit and\n-    \/\/ failure to launch java, respectively\n-    public static final int ERROR_NONE = 2;\n-\n-    public static final int ERROR_TIMEOUT = 3;\n-    public static final int ERROR_SECURITY_EXCEPTION = 4;\n-    public static final int ERROR_NO_SECURITY_EXCEPTION = 5;\n-    public static final int ERROR_UNEXPECTED_EXCEPTION = 6;\n-\n-    \/\/ No need to ever create an instance of this class\n-    private Constants() {}\n-\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/sandbox\/Constants.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -1,146 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.sandbox;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.fail;\n-import static org.junit.jupiter.api.Assumptions.assumeTrue;\n-import static test.sandbox.Constants.ERROR_NONE;\n-import static test.sandbox.Constants.ERROR_NO_SECURITY_EXCEPTION;\n-import static test.sandbox.Constants.ERROR_SECURITY_EXCEPTION;\n-import static test.sandbox.Constants.ERROR_TIMEOUT;\n-import static test.sandbox.Constants.ERROR_UNEXPECTED_EXCEPTION;\n-import java.util.ArrayList;\n-import java.util.concurrent.TimeUnit;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Disabled;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.Timeout;\n-import com.sun.javafx.PlatformUtil;\n-\n-\/**\n- * Unit test for running JavaFX apps in a sandbox with a restrictive\n- * security manager.\n- *\/\n-@Timeout(value=25000, unit=TimeUnit.MILLISECONDS)\n-public class SandboxAppTest {\n-\n-    private static final String className = SandboxAppTest.class.getName();\n-    private static final String pkgName = className.substring(0, className.lastIndexOf(\".\"));\n-\n-    private static String getTestPolicyFile(String policy) {\n-        return SandboxAppTest.class.getResource(policy).toExternalForm();\n-    }\n-\n-    private void runSandboxedApp(String appName) throws Exception {\n-        runSandboxedApp(appName, ERROR_NONE);\n-    }\n-\n-    private void runSandboxedApp(String appName, int exitCode) throws Exception {\n-        runSandboxedApp(appName, exitCode, \"test.policy\");\n-    }\n-\n-    private void runSandboxedApp(String appName, int exitCode, String policy) throws Exception {\n-        final String testAppName = pkgName + \".app.\" + appName;\n-        final String testPolicy = getTestPolicyFile(policy);\n-\n-        final ArrayList<String> cmd =\n-                test.util.Util.createApplicationLaunchCommand(\n-                        testAppName,\n-                        null,\n-                        testPolicy\n-                );\n-\n-        final ProcessBuilder builder = new ProcessBuilder(cmd);\n-        builder.redirectError(ProcessBuilder.Redirect.INHERIT);\n-        builder.redirectOutput(ProcessBuilder.Redirect.INHERIT);\n-        Process process = builder.start();\n-        int retVal = process.waitFor();\n-        switch (retVal) {\n-            case 0:\n-            case ERROR_NONE:\n-                assertEquals(exitCode, retVal, testAppName + \": Unexpected 'success' exit code;\");\n-                break;\n-\n-            case 1:\n-                fail(testAppName\n-                        + \": unable to launch java application\");\n-\n-            case ERROR_TIMEOUT:\n-                fail(testAppName\n-                        + \": Application timeout\");\n-            case ERROR_SECURITY_EXCEPTION:\n-                fail(testAppName\n-                        + \": Application failed with a security exception\");\n-            case ERROR_NO_SECURITY_EXCEPTION:\n-                fail(testAppName\n-                        + \": Application did not get expected security exception\");\n-            case ERROR_UNEXPECTED_EXCEPTION:\n-                fail(testAppName\n-                        + \": Application failed with unexpected exception\");\n-\n-           default:\n-               fail(testAppName\n-                        + \": Unexpected error exit: \" + retVal);\n-        }\n-    }\n-\n-    @BeforeEach\n-    public void setupEach() {\n-        if (PlatformUtil.isWindows()) {\n-            assumeTrue(Boolean.getBoolean(\"unstable.test\")); \/\/ JDK-8255486\n-        }\n-    }\n-\n-    \/\/ TEST CASES\n-\n-    @Test\n-    public void testFXApp() throws Exception {\n-        runSandboxedApp(\"FXApp\");\n-    }\n-\n-    @Test\n-    public void testFXNonApp() throws Exception {\n-        runSandboxedApp(\"FXNonApp\");\n-    }\n-\n-    @Disabled(\"JDK-8202451\")\n-    @Test\n-    public void testJFXPanelApp() throws Exception {\n-        runSandboxedApp(\"JFXPanelApp\");\n-    }\n-\n-    @Disabled(\"JDK-8202451\")\n-    @Test\n-    public void testJFXPanelImplicitExitApp() throws Exception {\n-        runSandboxedApp(\"JFXPanelImplicitExitApp\", 0);\n-    }\n-\n-    @Test\n-    public void testFXWebApp() throws Exception {\n-        runSandboxedApp(\"FXWebApp\", ERROR_NONE, \"empty.policy\");\n-    }\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/sandbox\/SandboxAppTest.java","additions":0,"deletions":146,"binary":false,"changes":146,"status":"deleted"},{"patch":"@@ -1,105 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.sandbox.app;\n-\n-import javafx.animation.KeyFrame;\n-import javafx.animation.Timeline;\n-import javafx.application.Application;\n-import javafx.scene.Scene;\n-import javafx.stage.Stage;\n-import javafx.util.Duration;\n-\n-import static test.sandbox.Constants.*;\n-\n-\/**\n- * FX application to test running with a security manager installed. Note that\n- * the toolkit will be initialized by the Java 8 launcher.\n- *\/\n-public class FXApp extends Application {\n-\n-    \/**\n-     * @param args the command line arguments\n-     *\/\n-    public static void main(String[] args) {\n-        Util.setupTimeoutThread();\n-\n-        try {\n-            try {\n-                \/\/ Ensure that we are running with a restrictive\n-                \/\/ security manager\n-                System.getProperty(\"sun.something\");\n-                System.err.println(\"*** Did not get expected security exception\");\n-                System.exit(ERROR_NO_SECURITY_EXCEPTION);\n-            } catch (SecurityException ex) {\n-                \/\/ This is expected\n-            }\n-            Application.launch(args);\n-        } catch (SecurityException ex) {\n-            ex.printStackTrace(System.err);\n-            System.exit(ERROR_SECURITY_EXCEPTION);\n-        } catch (RuntimeException ex) {\n-            ex.printStackTrace(System.err);\n-            Throwable cause = ex.getCause();\n-            if (cause instanceof ExceptionInInitializerError) {\n-                cause = cause.getCause();\n-                if (cause instanceof SecurityException) {\n-                    System.exit(ERROR_SECURITY_EXCEPTION);\n-                }\n-            }\n-            System.exit(ERROR_UNEXPECTED_EXCEPTION);\n-        } catch (Error | Exception t) {\n-            t.printStackTrace(System.err);\n-            System.exit(ERROR_UNEXPECTED_EXCEPTION);\n-        }\n-    }\n-\n-    @Override\n-    public void start(final Stage stage) {\n-        try {\n-            Scene scene = Util.createScene();\n-            stage.setScene(scene);\n-            stage.setX(0);\n-            stage.setY(0);\n-            stage.show();\n-\n-            \/\/ Hide the stage after the specified amount of time\n-            KeyFrame kf = new KeyFrame(Duration.millis(SHOWTIME), e -> stage.hide());\n-            Timeline timeline = new Timeline(kf);\n-            timeline.play();\n-        } catch (SecurityException ex) {\n-            ex.printStackTrace(System.err);\n-            System.exit(ERROR_SECURITY_EXCEPTION);\n-        } catch (Error | Exception ex) {\n-            ex.printStackTrace(System.err);\n-            System.exit(ERROR_UNEXPECTED_EXCEPTION);\n-        }\n-    }\n-\n-    @Override public void stop() {\n-        System.exit(ERROR_NONE);\n-    }\n-\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/sandbox\/app\/FXApp.java","additions":0,"deletions":105,"binary":false,"changes":105,"status":"deleted"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.sandbox.app;\n-\n-\/**\n- * FX application to test running with a security manager installed. Note that\n- * since this class does not extend Application, the toolkit will not yet be\n- * initialized prior to main being called.\n- *\/\n-public class FXNonApp {\n-    \/**\n-     * @param args the command line arguments\n-     *\/\n-    public static void main(String[] args) {\n-        FXApp.main(args);\n-    }\n-\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/sandbox\/app\/FXNonApp.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"},{"patch":"@@ -1,178 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.sandbox.app;\n-\n-import javafx.animation.KeyFrame;\n-import javafx.animation.Timeline;\n-import javafx.application.Application;\n-import javafx.scene.Scene;\n-import javafx.scene.control.Button;\n-import javafx.scene.input.MouseButton;\n-import javafx.scene.input.MouseEvent;\n-import javafx.scene.layout.HBox;\n-import javafx.scene.paint.Color;\n-import javafx.scene.web.WebView;\n-import javafx.util.Duration;\n-import javafx.stage.Stage;\n-import javafx.stage.Window;\n-\n-import com.sun.javafx.scene.control.CustomColorDialog;\n-\n-import java.util.Objects;\n-\n-import static test.sandbox.Constants.ERROR_NONE;\n-import static test.sandbox.Constants.ERROR_NO_SECURITY_EXCEPTION;\n-import static test.sandbox.Constants.ERROR_SECURITY_EXCEPTION;\n-import static test.sandbox.Constants.ERROR_UNEXPECTED_EXCEPTION;\n-import static test.sandbox.Constants.SHOWTIME;\n-\n-\/**\n- * FX application to test running with a security manager installed. Note that\n- * the toolkit will be initialized by the Java 8 launcher.\n- *\/\n-public class FXWebApp extends Application {\n-\n-    \/**\n-     * @param args the command line arguments\n-     *\/\n-    public static void main(String[] args) {\n-        Util.setupTimeoutThread();\n-\n-        try {\n-            try {\n-                \/\/ Ensure that we are running with a restrictive\n-                \/\/ security manager\n-                System.getProperty(\"sun.something\");\n-                System.err.println(\"*** Did not get expected security exception\");\n-                System.exit(ERROR_NO_SECURITY_EXCEPTION);\n-            } catch (SecurityException ex) {\n-                \/\/ This is expected\n-            }\n-            Application.launch(args);\n-        } catch (SecurityException ex) {\n-            ex.printStackTrace(System.err);\n-            System.exit(ERROR_SECURITY_EXCEPTION);\n-        } catch (RuntimeException ex) {\n-            ex.printStackTrace(System.err);\n-            Throwable cause = ex.getCause();\n-            if (cause instanceof ExceptionInInitializerError) {\n-                cause = cause.getCause();\n-                if (cause instanceof SecurityException) {\n-                    System.exit(ERROR_SECURITY_EXCEPTION);\n-                }\n-            }\n-            System.exit(ERROR_UNEXPECTED_EXCEPTION);\n-        } catch (Error | Exception t) {\n-            t.printStackTrace(System.err);\n-            System.exit(ERROR_UNEXPECTED_EXCEPTION);\n-        }\n-    }\n-\n-    private String selectedColor;\n-\n-    @Override\n-    public void start(final Stage stage) {\n-        try {\n-            WebView webView = new WebView();\n-            webView.getEngine().setOnAlert(event -> selectedColor = event.getData());\n-            webView.getEngine().loadContent(\"<head>\" +\n-                    \"<script>\" +\n-                    \"   function logColor(event) {\" +\n-                    \"        var color = document.querySelector(\\\"#color\\\");\\n\" +\n-                    \"        alert(\\\"color: \\\" + color.value);\" +\n-                    \"   }\\n\" +\n-                    \"   setTimeout(\\n\" +\n-                    \"     () => {\\n\" +\n-                    \"        var color = document.querySelector(\\\"#color\\\");\\n\" +\n-                    \"        color.addEventListener(\\\"change\\\", logColor, false);\" +\n-                    \"        alert(\\\"color: \\\" + color.value);\" +\n-                    \"     }, 100);\" +\n-                    \"<\/script>\" +\n-                    \"<\/head><body><input id=\\\"color\\\" type=\\\"color\\\" value=\\\"#000000\\\"><\/body>\");\n-            Scene scene = new Scene(webView, 400, 300);\n-            stage.setScene(scene);\n-            stage.setX(0);\n-            stage.setY(0);\n-            stage.show();\n-\n-            \/\/ Simulate click to show the ColorChooser dialog after\n-            \/\/ the specified amount of time\n-            KeyFrame kf0 = new KeyFrame(Duration.millis(500), e -> {\n-\n-                    webView.fireEvent(new MouseEvent(MouseEvent.MOUSE_PRESSED, 20,\n-                            20, (int) (stage.getX() + scene.getX() + 20),\n-                            (int) (stage.getY() + scene.getY() + 20), MouseButton.PRIMARY, 1,\n-                            false, false, false, false, true, false, false, true, false, false, null));\n-                    webView.fireEvent(new MouseEvent(MouseEvent.MOUSE_RELEASED, 20,\n-                            20, (int) (stage.getX() + scene.getX() + 20),\n-                            (int) (stage.getY() + scene.getY() + 20), MouseButton.PRIMARY, 1,\n-                            false, false, false, false, false, false, false, true, false, false, null));\n-\n-            });\n-            \/\/ Interact with the ColorChooserDialog window\n-            KeyFrame kf1 = new KeyFrame(Duration.millis(1000), e -> {\n-                Window.getWindows().stream()\n-                        .filter(w -> w.getScene().getRoot() instanceof CustomColorDialog)\n-                        .findFirst()\n-                        .map(w -> (CustomColorDialog) w.getScene().getRoot())\n-                        .ifPresentOrElse(dialog -> {\n-                            if (Double.isNaN(dialog.getDialog().getMinWidth()) ||\n-                                    Double.isNaN(dialog.getDialog().getMinHeight())) {\n-                                \/\/ Unexpected, the ColorChooserDialog window should\n-                                \/\/ have valid dimensions\n-                                System.exit(ERROR_UNEXPECTED_EXCEPTION);\n-                            }\n-                            dialog.setCustomColor(Color.web(\"#ff0000\"));\n-                            HBox box = (HBox) dialog.lookup(\"#buttons-hbox\");\n-                            Button ok = (Button) box.getChildren().get(0);\n-                            ok.fire();\n-                        }, () -> {\n-                            \/\/ Unexpected, there should be a ColorChooserDialog\n-                            System.exit(ERROR_UNEXPECTED_EXCEPTION);\n-                        });\n-            });\n-            \/\/ Hide the stage after the specified amount of time\n-            KeyFrame kf2 = new KeyFrame(Duration.millis(SHOWTIME), e -> stage.hide());\n-            Timeline timeline = new Timeline(kf0, kf1, kf2);\n-            timeline.play();\n-        } catch (SecurityException ex) {\n-            ex.printStackTrace(System.err);\n-            System.exit(ERROR_SECURITY_EXCEPTION);\n-        } catch (Error | Exception ex) {\n-            ex.printStackTrace(System.err);\n-            System.exit(ERROR_UNEXPECTED_EXCEPTION);\n-        }\n-    }\n-\n-    @Override public void stop() {\n-        if (Objects.equals(selectedColor, \"color: #ff0000\")) {\n-            System.exit(ERROR_NONE);\n-        }\n-        \/\/ Unexpected, the color wasn't changed\n-        System.exit(ERROR_UNEXPECTED_EXCEPTION);\n-    }\n-\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/sandbox\/app\/FXWebApp.java","additions":0,"deletions":178,"binary":false,"changes":178,"status":"deleted"},{"patch":"@@ -1,161 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.sandbox.app;\n-\n-import java.awt.BorderLayout;\n-import java.awt.Dimension;\n-import java.awt.FlowLayout;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicReference;\n-import javafx.application.Platform;\n-import javafx.embed.swing.JFXPanel;\n-import javafx.scene.Scene;\n-import javax.swing.JButton;\n-import javax.swing.JFrame;\n-import javax.swing.JPanel;\n-import javax.swing.SwingUtilities;\n-import javax.swing.Timer;\n-\n-import static test.sandbox.Constants.*;\n-\n-\/**\n- * JFXPanel application to test running with a security manager installed.\n- * The main program in this class will run the test such that the application\n- * will be shutdown by an explicit call to System.exit().\n- *\/\n-public class JFXPanelApp {\n-\n-    private final AtomicBoolean createSceneDone = new AtomicBoolean(false);\n-    private final AtomicReference<Throwable> err = new AtomicReference<>(null);\n-\n-    private void initApp(final boolean implicitExit) throws Exception {\n-        final JFrame frame = new JFrame(\"JFXPanel Test\");\n-        frame.setLayout(new BorderLayout());\n-\n-        JPanel swingPanel = new JPanel();\n-        swingPanel.setLayout(new FlowLayout());\n-        frame.getContentPane().add(swingPanel, BorderLayout.NORTH);\n-\n-        JButton swingButton = new JButton(\"Swing Button\");\n-        swingButton.addActionListener(e -> System.err.println(\"Hi\"));\n-        swingPanel.add(swingButton);\n-\n-        \/\/ Create javafx panel\n-        final JFXPanel jfxPanel = new JFXPanel();\n-        jfxPanel.setPreferredSize(new Dimension(400,300));\n-        frame.getContentPane().add(jfxPanel, BorderLayout.CENTER);\n-\n-        \/\/ create JavaFX scene\n-        createScene(jfxPanel);\n-        if (!implicitExit) {\n-            Platform.setImplicitExit(false);\n-        }\n-\n-        \/\/ show frame\n-        frame.pack();\n-        frame.setVisible(true);\n-\n-        \/\/ Hide the frame after the specified amount of time\n-        Timer timer = new Timer(SHOWTIME, e -> {\n-            \/\/ Verify that the FX scene was created successfully\n-            if (!createSceneDone.get()) {\n-                System.exit(ERROR_TIMEOUT);\n-            }\n-            Throwable t = err.get();\n-            if (t != null) {\n-                if (t instanceof SecurityException) {\n-                    System.exit(ERROR_SECURITY_EXCEPTION);\n-                } else if (t instanceof ExceptionInInitializerError) {\n-                    Throwable cause = t.getCause();\n-                    if (cause instanceof SecurityException) {\n-                        System.exit(ERROR_SECURITY_EXCEPTION);\n-                    }\n-                }\n-                System.exit(ERROR_UNEXPECTED_EXCEPTION);\n-            }\n-\n-            if (implicitExit) {\n-                frame.setVisible(false);\n-                frame.dispose();\n-            } else {\n-                System.exit(ERROR_NONE);\n-            }\n-        });\n-        timer.setRepeats(false);\n-        timer.start();\n-    }\n-\n-    private void createScene(final JFXPanel jfxPanel) throws Exception {\n-        Platform.runLater(() -> {\n-            try {\n-                final Scene scene = Util.createScene();\n-                jfxPanel.setScene(scene);\n-            } catch (Error | Exception t) {\n-                t.printStackTrace();\n-                err.set(t);\n-            } finally {\n-                createSceneDone.set(true);\n-            }\n-        });\n-    }\n-\n-    public JFXPanelApp(boolean implicitExit) {\n-        try {\n-            try {\n-                \/\/ Ensure that we are running with a restrictive\n-                \/\/ security manager\n-                System.getProperty(\"sun.something\");\n-                System.err.println(\"*** Did not get expected security exception\");\n-                System.exit(ERROR_NO_SECURITY_EXCEPTION);\n-            } catch (SecurityException ex) {\n-                \/\/ This is expected\n-            }\n-            initApp(implicitExit);\n-        } catch (SecurityException ex) {\n-            ex.printStackTrace(System.err);\n-            System.exit(ERROR_SECURITY_EXCEPTION);\n-        } catch (ExceptionInInitializerError ex) {\n-            Throwable cause = ex.getCause();\n-            if (cause instanceof SecurityException) {\n-                System.exit(ERROR_SECURITY_EXCEPTION);\n-            }\n-            System.exit(ERROR_UNEXPECTED_EXCEPTION);\n-        } catch (Error | Exception ex) {\n-            ex.printStackTrace(System.err);\n-            System.exit(ERROR_UNEXPECTED_EXCEPTION);\n-        }\n-    }\n-\n-    public static void runTest(final boolean implicitExit) {\n-        Util.setupTimeoutThread();\n-        SwingUtilities.invokeLater(() -> new JFXPanelApp(implicitExit));\n-    }\n-\n-    public static void main(String[] args) {\n-        runTest(false);\n-    }\n-\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/sandbox\/app\/JFXPanelApp.java","additions":0,"deletions":161,"binary":false,"changes":161,"status":"deleted"},{"patch":"@@ -1,38 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.sandbox.app;\n-\n-\/**\n- * JFXPanel application to test running with a security manager installed.\n- * The main program in this class will run the test such that the application\n- * will implicitly exit when the JFrame is disposed.\n- *\/\n-public class JFXPanelImplicitExitApp {\n-\n-    public static void main(String[] args) {\n-        JFXPanelApp.runTest(true);\n-    }\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/sandbox\/app\/JFXPanelImplicitExitApp.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -1,106 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package test.sandbox.app;\n-\n-import java.io.InputStream;\n-import java.net.URL;\n-import java.net.URLConnection;\n-import javafx.fxml.FXMLLoader;\n-import javafx.scene.Parent;\n-import javafx.scene.Scene;\n-import javafx.scene.control.Label;\n-import javafx.scene.layout.VBox;\n-import javafx.scene.paint.Color;\n-import javafx.scene.web.WebEngine;\n-import javafx.scene.web.WebView;\n-\n-import static test.sandbox.Constants.*;\n-\n-\/**\n- *\n- * @author kcr\n- *\/\n-public class Util {\n-    private static final int WIDTH = 400;\n-    private static final int HEIGHT = 300;\n-\n-    private static final String CSS_FILE_NAME = \"test.css\";\n-    private static final String FXML_FILE_NAME = \"test.fxml\";\n-    private static final String HTML_FILE_NAME = \"test.html\";\n-\n-    \/\/ Convert the requested resource name into a URL string, and verify\n-    \/\/ that the resource can be accessed.\n-    private static URL toURL(String resourceName) throws Exception {\n-        URL url = FXApp.class.getResource(resourceName);\n-        URLConnection conn = url.openConnection();\n-        InputStream stream = conn.getInputStream();\n-        stream.close();\n-        return url;\n-    }\n-\n-    \/\/ Create a JavaFX scene and populate it with content\n-    public static Scene createScene() throws Exception {\n-        VBox root = new VBox(10);\n-        Scene scene = new Scene(root, WIDTH, HEIGHT);\n-        scene.setFill(Color.WHITE);\n-\n-        final String styleSheet = toURL(CSS_FILE_NAME).toExternalForm();\n-        scene.getStylesheets().clear();\n-        scene.getStylesheets().add(styleSheet);\n-\n-        Label label = new Label();\n-        label.setText(\"Label\");\n-\n-        final URL fxmlFile = toURL(FXML_FILE_NAME);\n-        Parent fxmlRoot = (Parent)FXMLLoader.load(fxmlFile);\n-\n-        final String webURLString = toURL(HTML_FILE_NAME).toExternalForm();\n-        WebView webView = new WebView();\n-        WebEngine webEngine = webView.getEngine();\n-        webEngine.load(webURLString);\n-\n-        root.getChildren().addAll(label, fxmlRoot, webView);\n-        return scene;\n-    }\n-\n-    public static void setupTimeoutThread() {\n-        \/\/ Timeout thread\n-        Thread th = new Thread(() -> {\n-            try {\n-                Thread.sleep(TIMEOUT);\n-            } catch (InterruptedException ex) {\n-                System.exit(ERROR_UNEXPECTED_EXCEPTION);\n-            }\n-            System.exit(ERROR_TIMEOUT);\n-        });\n-        th.setDaemon(true);\n-        th.start();\n-    }\n-\n-    \/\/ No need to ever create an instance of this class\n-    private Util() {}\n-\n-}\n","filename":"tests\/system\/src\/test\/java\/test\/sandbox\/app\/Util.java","additions":0,"deletions":106,"binary":false,"changes":106,"status":"deleted"},{"patch":"@@ -66,1 +66,0 @@\n-                        null,\n","filename":"tests\/system\/src\/test\/java\/test\/shutdowntest\/ShutdownHookTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -174,2 +174,1 @@\n-            String testPldrName,\n-            String testPolicy) throws IOException {\n+            String testPldrName) throws IOException {\n@@ -177,1 +176,1 @@\n-        return createApplicationLaunchCommand(testAppName, testPldrName, testPolicy, null);\n+        return createApplicationLaunchCommand(testAppName, testPldrName, null);\n@@ -183,1 +182,0 @@\n-            String testPolicy,\n@@ -193,1 +191,0 @@\n-        final String workerPatchPolicy = System.getProperty(\"worker.patch.policy\");\n@@ -223,58 +220,0 @@\n-        if (testPolicy != null) {\n-\n-            cmd.add(\"-Djava.security.manager\");\n-\n-            try {\n-                if (workerPatchPolicy != null) {\n-                    \/\/ with Jigsaw, we need to create a merged java.policy\n-                    \/\/ file that contains the permissions for the patchmodule classes\n-                    \/\/ as well as the permissions needed for this test\n-\n-                    File wpp = new File(workerPatchPolicy);\n-                    if (!wpp.exists()) {\n-                        throw new RuntimeException(\"Missing workerPatchPolicy\");\n-                    }\n-\n-                    File tempFile = null;\n-                    if (workerDebug) {\n-                        String baseAppName = isJar\n-                                ? testAppName.substring(0, testAppName.length() - 4)\n-                                : testAppName;\n-                        final int lastSlashIdx = baseAppName.lastIndexOf(\"\/\");\n-                        if (lastSlashIdx >= 0) {\n-                            baseAppName = baseAppName.substring(lastSlashIdx + 1);\n-                        }\n-                        tempFile = new File(workerPatchPolicy +\n-                                \"_\" + baseAppName);\n-                    } else {\n-                        tempFile = File.createTempFile(\"java\", \"policy\");\n-                        tempFile.deleteOnExit();\n-                    }\n-\n-                    BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));\n-\n-                    BufferedReader reader1 = new BufferedReader(new FileReader(wpp));\n-                    URL url = new URL(testPolicy);\n-                    BufferedReader reader2 = new BufferedReader(new FileReader(url.getFile()));\n-\n-                    String line = null;\n-                    while ((line = reader1.readLine()) != null) {\n-                        writer.write(line);\n-                        writer.newLine();\n-                    }\n-                    while ((line = reader2.readLine()) != null) {\n-                        writer.write(line);\n-                        writer.newLine();\n-                    }\n-                    writer.close();\n-                    cmd.add(\"-Djava.security.policy=\" +\n-                        tempFile.getAbsolutePath().replaceAll(\"\\\\\\\\\",\"\/\"));\n-                } else {\n-                    cmd.add(\"-Djava.security.policy=\" + testPolicy);\n-                }\n-            } catch (IOException e) {\n-                throw e;\n-            }\n-\n-        }\n-\n","filename":"tests\/system\/src\/test\/java\/test\/util\/Util.java","additions":2,"deletions":63,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -1,29 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-.label {\n-    -fx-font-size: 35;\n-    -fx-text-fill: green;\n-}\n","filename":"tests\/system\/src\/test\/resources\/test\/sandbox\/app\/test.css","additions":0,"deletions":29,"binary":false,"changes":29,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-\n-<!--\n-\/*\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n--->\n-\n-<?import java.lang.*?>\n-<?import java.util.*?>\n-<?import java.net.*?>\n-<?import javafx.collections.*?>\n-<?import javafx.scene.*?>\n-<?import javafx.scene.control.*?>\n-<?import javafx.scene.layout.*?>\n-<?import javafx.scene.text.*?>\n-\n-<Group id=\"Sample\" xmlns:fx=\"http:\/\/javafx.com\/fxml\">\n-    <children>\n-        <Text fill=\"RED\" text=\"FXML Text\">\n-          <font>\n-              <Font size=\"31.0\"\/>\n-          <\/font>\n-        <\/Text>\n-    <\/children>\n-<\/Group>\n","filename":"tests\/system\/src\/test\/resources\/test\/sandbox\/app\/test.fxml","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,38 +0,0 @@\n-<!DOCTYPE HTML PUBLIC \"-\/\/W3C\/\/DTD HTML 4.01 Transitional\/\/EN\">\n-\n-<!--\n-\/*\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n--->\n-\n-<html>\n-  <head>\n-    <title><\/title>\n-    <meta http-equiv=\"Content-Type\" content=\"text\/html; charset=UTF-8\">\n-  <\/head>\n-  <body>\n-    <P style=\"font-size: 40; color: blue\">WebView Text<\/P>\n-  <\/body>\n-<\/html>\n","filename":"tests\/system\/src\/test\/resources\/test\/sandbox\/app\/test.html","additions":0,"deletions":38,"binary":false,"changes":38,"status":"deleted"},{"patch":"@@ -1,9 +0,0 @@\n-\/\/ Policy file for SandboxAppTest.testFXWebApp test\n-\/\/ Use as follows: -Djava.security.policy=empty.policy\n-\n-\/\/ No permissions to read resource files are granted\n-\/\/ FX permission to access the window list is only granted for\n-\/\/ the purpose of the test\n-grant {\n-    permission javafx.util.FXPermission \"accessWindowList\";\n-};\n","filename":"tests\/system\/src\/test\/resources\/test\/sandbox\/empty.policy","additions":0,"deletions":9,"binary":false,"changes":9,"status":"deleted"},{"patch":"@@ -1,7 +0,0 @@\n-\/\/ Policy file for sandbox tests\n-\/\/ Use as follows: -Djava.security.policy=test.policy\n-\n-\/\/ Grant permission to read resource files\n-grant {\n-    permission java.io.FilePermission \"<<ALL FILES>>\", \"read\";\n-};\n","filename":"tests\/system\/src\/test\/resources\/test\/sandbox\/test.policy","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"}]}