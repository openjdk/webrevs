{"files":[{"patch":"@@ -23,0 +23,1 @@\n+\t<classpathentry kind=\"src\" path=\"\/manualTests-util\"\/>\n","filename":"tests\/manual\/text\/.classpath","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,7 +26,1 @@\n-import javafx.application.Application;\n-import javafx.application.Platform;\n-import javafx.scene.layout.HBox;\n-import javafx.scene.layout.VBox;\n-import javafx.scene.Group;\n-import javafx.scene.Scene;\n-import javafx.scene.control.Button;\n+import javafx.scene.Node;\n@@ -35,1 +29,1 @@\n-import javafx.stage.Stage;\n+import javafx.scene.layout.VBox;\n@@ -38,0 +32,1 @@\n+import com.oracle.util.testing.ManualTestWindow;\n@@ -39,22 +34,1 @@\n-public class EmojiTest extends Application {\n-\n-   static String instructions =\n-      \"\"\"\n-        This tests rendering of Emoji glyphs which is only supported on macOS.\n-        On macOS you should see a yellow-coloured smiling face image,\n-        embedded between 'ab' and 'cd'.\n-        On other platforms it may be a missing glyph, or an empty space, or\n-        a similar rendering as a greyscale\/B&W glyph.\n-        Principally, you are checking that the emoji is rendered on macOS in\n-        each of the controls and nodes displayed in the test, and that the\n-        editable text field handles selection of the emoji glyph with the\n-        same background as other glyphs - this presumes the emoji image has\n-        transparent background pixels.\n-        There are 3 different ways it is displayed to verify\n-        1) Text node. 2) Label control, 3) TextField Control\n-        Press the Pass or Fail button as appropriate and the test will exit.\n-        If what you see is not explained here, ask before filing a bug.\n-\n-\n-        \"\"\";\n-\n+public class EmojiTest extends ManualTestWindow {\n@@ -65,2 +39,21 @@\n-    private void quit() {\n-        Platform.exit();\n+    public EmojiTest() {\n+        super(\n+            \"Emoji Rendering Test (macOS)\",\n+            \"\"\"\n+            This tests rendering of Emoji glyphs which is only supported on macOS.\n+            On macOS you should see a yellow-coloured smiling face image,\n+            embedded between 'ab' and 'cd'.\n+            On other platforms it may be a missing glyph, or an empty space, or\n+            a similar rendering as a greyscale\/B&W glyph.\n+            Principally, you are checking that the emoji is rendered on macOS in\n+            each of the controls and nodes displayed in the test, and that the\n+            editable text field handles selection of the emoji glyph with the\n+            same background as other glyphs - this presumes the emoji image has\n+            transparent background pixels.\n+            There are 3 different ways it is displayed to verify\n+            1) Text node. 2) Label control, 3) TextField Control\n+            Press the Pass or Fail button as appropriate and the test will exit.\n+            If what you see is not explained here, ask before filing a bug.\n+            \"\"\",\n+            1200, 800\n+        );\n@@ -70,14 +63,1 @@\n-    public void start(Stage stage) {\n-        Button passButton = new Button(\"Pass\");\n-        Button failButton = new Button(\"Fail\");\n-        passButton.setOnAction(e -> this.quit());\n-        failButton.setOnAction(e -> {\n-            this.quit();\n-            throw new AssertionError(\"The Emoji was not rendered on macOS\");\n-        });\n-\n-        HBox hbox = new HBox(10, passButton, failButton);\n-\n-        Text instTA = new Text(instructions);\n-        instTA.setWrappingWidth(500);\n-\n+    protected Node createContent() {\n@@ -93,12 +73,6 @@\n-        VBox vbox = new VBox();\n-        Scene scene = new Scene(vbox);\n-        vbox.getChildren().add(instTA);\n-        vbox.getChildren().add(hbox);\n-        vbox.getChildren().add(text);\n-        vbox.getChildren().add(label);\n-        vbox.getChildren().add(textField);\n-        stage.setWidth(600);\n-        stage.setHeight(600);\n-        stage.setScene(scene);\n-\n-        stage.show();\n+        return new VBox(\n+            2,\n+            text,\n+            label,\n+            textField\n+        );\n@@ -106,1 +80,0 @@\n-\n","filename":"tests\/manual\/text\/EmojiTest.java","additions":33,"deletions":60,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<classpath>\n+\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/base\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/controls\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/graphics\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.junit.JUNIT_CONTAINER\/5\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"test\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry kind=\"src\" path=\"src\"\/>\n+\t<classpathentry kind=\"output\" path=\"bin\"\/>\n+<\/classpath>\n","filename":"tests\/manual\/util\/.classpath","additions":30,"deletions":0,"binary":false,"changes":30,"status":"added"},{"patch":"@@ -3,1 +3,1 @@\n-    <name>manualTests-UI<\/name>\n+    <name>manualTests-util<\/name>\n","filename":"tests\/manual\/util\/.project","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"tests\/manual\/UI\/.project","status":"copied"},{"patch":"","filename":"tests\/manual\/util\/.settings\/org.eclipse.core.resources.prefs","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":".settings\/org.eclipse.core.resources.prefs","status":"copied"},{"patch":"@@ -0,0 +1,38 @@\n+# Test Utilities\n+\n+## ManualTestWindow\n+\n+This facility provides the base class for manual tests which displays the test instructions,\n+the UI under test, and the Pass\/Fail buttons.\n+\n+Example:\n+\n+```java\n+public class ManualTestExample extends ManualTestWindow {\n+    public ManualTestExample() {\n+        super(\n+            \"Manual Test Example\",\n+            \"\"\"\n+            Instructions:\n+            1. you will see a button named \"Test\"\n+            2. press the button\n+            3. verify that the button can be pressed\"\"\",\n+            400, 250\n+        );\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        launch(args);\n+    }\n+\n+    @Override\n+    protected Node createContent() {\n+        return new Button(\"Test\");\n+    }\n+}\n+```\n+\n+Resulting application window:\n+\n+![screenshot](doc\/ManualTestWindow.png)\n+\n","filename":"tests\/manual\/util\/README.md","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"filename":"tests\/manual\/util\/doc\/ManualTestWindow.png","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,201 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.oracle.util.testing;\n+\n+import javafx.application.Application;\n+import javafx.application.Platform;\n+import javafx.geometry.Insets;\n+import javafx.scene.Node;\n+import javafx.scene.Parent;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.ContextMenu;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.effect.BlurType;\n+import javafx.scene.effect.DropShadow;\n+import javafx.scene.input.Clipboard;\n+import javafx.scene.input.ClipboardContent;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Priority;\n+import javafx.scene.layout.Region;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.scene.text.Text;\n+import javafx.scene.text.TextFlow;\n+import javafx.stage.Stage;\n+\n+\/**\n+ * Provides the base class for manual tests which displays the test instructions,\n+ * the UI under test, and the Pass\/Fail buttons.\n+ * <p>\n+ * Example:\n+ * <pre>{@code public class ManualTestExample extends ManualTestWindow {\n+ *    public ManualTestExample() {\n+ *        super(\n+ *            \"Manual Test Example\",\n+ *            \"\"\"\n+ *            Instructions:\n+ *            1. you will see a button named \"Test\"\n+ *            2. press the button\n+ *            3. verify that the button can be pressed\"\"\",\n+ *            400, 250\n+ *        );\n+ *     }\n+ *\n+ *     public static void main(String[] args) throws Exception {\n+ *         launch(args);\n+ *     }\n+ *\n+ *     @Override\n+ *     protected Node createContent() {\n+ *         return new Button(\"Test\");\n+ *     }\n+ * }\n+ * }<\/pre>\n+ *\/\n+public abstract class ManualTestWindow extends Application {\n+    \/**\n+     * This method creates the {@code Node} containing elements under test,\n+     * to be shown below the instructions and above the \"Pass\"\/\"Fail\" buttons.\n+     * @return the node\n+     *\/\n+    protected abstract Node createContent();\n+\n+    private final String title;\n+    private final String instructions;\n+    private double width = 1000;\n+    private double height = 800;\n+\n+    public ManualTestWindow(String title, String instructions) {\n+        this.title = title;\n+        this.instructions = instructions;\n+    }\n+\n+    public ManualTestWindow(String title, String instructions, double width, double height) {\n+        this(title, instructions);\n+        this.width = width;\n+        this.height = height;\n+    }\n+\n+    private Parent createContent(Stage stage) {\n+        Node content = createContent();\n+\n+        BlurType blurType = BlurType.GAUSSIAN;\n+        Color color = Color.gray(0, 0.5);\n+        double radius = 10;\n+        double spread = 0;\n+        double offsetX = 1;\n+        double offsetY = 1;\n+        DropShadow shadow = new DropShadow(blurType, color, radius, spread, offsetX, offsetY);\n+\n+        BorderPane cp = new BorderPane(content);\n+        cp.setMargin(content, new Insets(10));\n+        cp.setBackground(Background.fill(Color.gray(1)));\n+        cp.setEffect(shadow);\n+\n+        Node instructionField = toTextFlow(instructions);\n+\n+        Region fill = new Region();\n+\n+        Button failButton = new Button(\"Fail\");\n+        setIcon(failButton, \"✘\", Color.RED);\n+        failButton.setMinWidth(100);\n+        failButton.setOnAction((ev) -> {\n+            Platform.exit();\n+            throw new AssertionError(\"Failed Manual Test: \" + stage.getTitle());\n+        });\n+\n+        Button passButton = new Button(\"Pass\");\n+        setIcon(passButton, \"✔\", Color.GREEN);\n+        passButton.setMinWidth(100);\n+        passButton.setOnAction((ev) -> {\n+            Platform.exit();\n+        });\n+\n+        HBox buttons = new HBox(\n+            10,\n+            fill,\n+            failButton,\n+            passButton\n+        );\n+        HBox.setHgrow(fill, Priority.ALWAYS);\n+\n+        VBox vb = new VBox(\n+            10,\n+            instructionField,\n+            cp,\n+            buttons\n+        );\n+        vb.setPadding(new Insets(10));\n+        VBox.setVgrow(cp, Priority.ALWAYS);\n+        return vb;\n+    }\n+\n+    \/**\n+     * Prepares the Application primary stage: creates the content {@code Node} to be tested,\n+     * creates the manual test UI, sets the {@code Scene}.\n+     * This method is called before the primary stage is shown.\n+     * @param stage the primary stage\n+     *\/\n+    protected void prepareStage(Stage stage) {\n+        Parent content = createContent(stage);\n+        stage.setWidth(width);\n+        stage.setHeight(height);\n+        stage.setTitle(title);\n+        stage.setScene(new Scene(content));\n+    }\n+\n+    @Override\n+    public void start(Stage stage) throws Exception {\n+        prepareStage(stage);\n+        stage.show();\n+    }\n+\n+    private static Node toTextFlow(String text) {\n+        TextFlow f = new TextFlow();\n+        Text t = new Text(text);\n+        f.getChildren().add(t);\n+        f.setOnContextMenuRequested((ev) -> {\n+            ContextMenu m = new ContextMenu();\n+            MenuItem mi = new MenuItem(\"Copy Instructions\");\n+            mi.setOnAction((e) -> {\n+                ClipboardContent cc = new ClipboardContent();\n+                cc.putString(text);\n+                Clipboard.getSystemClipboard().setContent(cc);\n+            });\n+            m.getItems().setAll(mi);\n+            m.show(f, ev.getScreenX(), ev.getScreenY());\n+        });\n+        return f;\n+    }\n+\n+    private static void setIcon(Button b, String text, Color c) {\n+        Text t = new Text(text);\n+        t.setFill(c);\n+        b.setGraphic(t);\n+    }\n+}\n","filename":"tests\/manual\/util\/src\/com\/oracle\/util\/testing\/ManualTestWindow.java","additions":201,"deletions":0,"binary":false,"changes":201,"status":"added"}]}