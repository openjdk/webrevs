{"files":[{"patch":"@@ -537,2 +537,2 @@\n-                        Math.ceil(xAxis.getValueForDisplay(lineTo.getX()).doubleValue()),\n-                        Math.ceil(yAxis.getValueForDisplay(lineTo.getY()).doubleValue()))\n+                        Math.round(xAxis.getValueForDisplay(lineTo.getX()).doubleValue()),\n+                        Math.round(yAxis.getValueForDisplay(lineTo.getY()).doubleValue()))\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/AreaChartTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -16,1 +16,1 @@\n- * for all headless tests.\n+ * for all headless tests. Some rules are somewhat derived from the real font loading in JavaFX.\n@@ -25,1 +25,1 @@\n-     * An unknown font has no text width.\n+     * An unknown font will fall back to the system font. Note that this is the same behaviour in JavaFX.\n@@ -29,1 +29,1 @@\n-        Font font = new Font(\"bla\", 12);\n+        Font font = new Font(\"bla\", 10);\n@@ -31,1 +31,7 @@\n-        assertEquals(0, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+        assertEquals(\"bla\", font.getName());\n+        assertEquals(\"System\", font.getFamily());\n+        assertEquals(\"Regular\", font.getStyle());\n+        assertEquals(10, font.getSize());\n+\n+        assertEquals(100, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+        assertEquals(10, Utils.computeTextHeight(font, \"ABCDEFGHIJ\", 0, null));\n@@ -39,1 +45,6 @@\n-        Font font = new Font(\"System\", 12);\n+        Font font = new Font(\"System\", 10);\n+\n+        assertEquals(\"System\", font.getName());\n+        assertEquals(\"System\", font.getFamily());\n+        assertEquals(\"Regular\", font.getStyle());\n+        assertEquals(10, font.getSize());\n@@ -41,1 +52,2 @@\n-        assertEquals(0, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+        assertEquals(100, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+        assertEquals(10, Utils.computeTextHeight(font, \"ABCDEFGHIJ\", 0, null));\n@@ -59,0 +71,1 @@\n+        assertEquals(12, Utils.computeTextHeight(defaultFont, \"ABCDEFGHIJ\", 0, null));\n@@ -76,0 +89,1 @@\n+        assertEquals(20, Utils.computeTextHeight(font, \"ABCDEFGHIJ\", 0, null));\n@@ -98,0 +112,1 @@\n+        assertEquals(20, Utils.computeTextHeight(font, \"ABCDEFGHIJ\", 0, null));\n@@ -105,1 +120,1 @@\n-        Font font = new Font(\"System Regular\", 12);\n+        Font font = new Font(\"System Regular\", 11);\n@@ -107,1 +122,2 @@\n-        assertEquals(120, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+        assertEquals(110, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+        assertEquals(11, Utils.computeTextHeight(font, \"ABCDEFGHIJ\", 0, null));\n@@ -115,1 +131,1 @@\n-        Font font = Font.font(\"System\", 12);\n+        Font font = Font.font(\"System\", 11);\n@@ -118,1 +134,2 @@\n-        assertEquals(120, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+        assertEquals(110, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+        assertEquals(11, Utils.computeTextHeight(font, \"ABCDEFGHIJ\", 0, null));\n@@ -126,1 +143,1 @@\n-        Font font = Font.font(\"System\", FontWeight.NORMAL, 12);\n+        Font font = Font.font(\"System\", FontWeight.NORMAL, 11);\n@@ -129,1 +146,2 @@\n-        assertEquals(120, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+        assertEquals(110, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+        assertEquals(11, Utils.computeTextHeight(font, \"ABCDEFGHIJ\", 0, null));\n@@ -137,1 +155,1 @@\n-        Font font = Font.font(\"System\", FontWeight.BOLD, 12);\n+        Font font = Font.font(\"System\", FontWeight.BOLD, 13);\n@@ -140,1 +158,2 @@\n-        assertEquals(130, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+        assertEquals(140, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+        assertEquals(13, Utils.computeTextHeight(font, \"ABCDEFGHIJ\", 0, null));\n@@ -148,1 +167,1 @@\n-        Font font = Font.font(\"System\", FontPosture.ITALIC, 12);\n+        Font font = Font.font(\"System\", FontPosture.ITALIC, 11);\n@@ -151,1 +170,2 @@\n-        assertEquals(120, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+        assertEquals(110, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+        assertEquals(11, Utils.computeTextHeight(font, \"ABCDEFGHIJ\", 0, null));\n@@ -159,1 +179,1 @@\n-        Font font = Font.font(\"System\", FontWeight.BOLD, FontPosture.ITALIC, 12);\n+        Font font = Font.font(\"System\", FontWeight.BOLD, FontPosture.ITALIC, 13);\n@@ -162,1 +182,2 @@\n-        assertEquals(130, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+        assertEquals(140, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+        assertEquals(13, Utils.computeTextHeight(font, \"ABCDEFGHIJ\", 0, null));\n@@ -170,1 +191,1 @@\n-        Font font = Font.font(\"Amble\", 12);\n+        Font font = Font.font(\"Amble\", 11);\n@@ -172,1 +193,2 @@\n-        assertEquals(120, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+        assertEquals(110, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+        assertEquals(11, Utils.computeTextHeight(font, \"ABCDEFGHIJ\", 0, null));\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/StubFontContractTest.java","additions":42,"deletions":20,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import java.util.Arrays;\n@@ -44,0 +43,6 @@\n+\/**\n+ * Stub implementation of the {@link FontLoader} for testing purposes.\n+ * <br>\n+ * Can recognize and load some fonts we defined below, will otherwise fall back to the\n+ * System font (like in the real font loader).\n+ *\/\n@@ -48,2 +53,2 @@\n-        StubFont nativeFont = new StubFont();\n-        nativeFont.font = font;\n+        StubFont stub = new StubFont();\n+        stub.font = font;\n@@ -51,26 +56,20 @@\n-        String name = font.getName().trim().toLowerCase(Locale.ROOT);\n-        switch (name) {\n-            case \"system regular\" -> FontHelper.setNativeFont(font, nativeFont, font.getName(), \"System\", \"Regular\");\n-            case \"system bold\" -> FontHelper.setNativeFont(font, nativeFont, font.getName(), \"System\", \"Bold\");\n-            case \"system italic\" -> FontHelper.setNativeFont(font, nativeFont, font.getName(), \"System\", \"Italic\");\n-            case \"system bold italic\" ->\n-                    FontHelper.setNativeFont(font, nativeFont, font.getName(), \"System\", \"Bold Italic\");\n-            case \"amble regular\" -> FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble\", \"Regular\");\n-            case \"amble bold\" -> FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble\", \"Bold\");\n-            case \"amble italic\" -> FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble\", \"Italic\");\n-            case \"amble bold italic\" ->\n-                    FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble\", \"Bold Italic\");\n-            case \"amble condensed\" -> FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble Cn\", \"Regular\");\n-            case \"amble bold condensed\" ->\n-                    FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble Cn\", \"Bold\");\n-            case \"amble condensed italic\" ->\n-                    FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble Cn\", \"Italic\");\n-            case \"amble bold condensed italic\" ->\n-                    FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble Cn\", \"Bold Italic\");\n-            case \"amble light\" -> FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble Lt\", \"Regular\");\n-            case \"amble light italic\" ->\n-                    FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble Lt\", \"Italic\");\n-            case \"amble light condensed\" ->\n-                    FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble LtCn\", \"Regular\");\n-            case \"amble light condensed italic\" ->\n-                    FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble LtCn\", \"Italic\");\n+        String name = font.getName();\n+        String nameLower = name.trim().toLowerCase(Locale.ROOT);\n+        switch (nameLower) {\n+            case \"system regular\" -> FontHelper.setNativeFont(font, stub, name, \"System\", \"Regular\");\n+            case \"system bold\" -> FontHelper.setNativeFont(font, stub, name, \"System\", \"Bold\");\n+            case \"system italic\" -> FontHelper.setNativeFont(font, stub, name, \"System\", \"Italic\");\n+            case \"system bold italic\" -> FontHelper.setNativeFont(font, stub, name, \"System\", \"Bold Italic\");\n+            case \"amble regular\" -> FontHelper.setNativeFont(font, stub, name, \"Amble\", \"Regular\");\n+            case \"amble bold\" -> FontHelper.setNativeFont(font, stub, name, \"Amble\", \"Bold\");\n+            case \"amble italic\" -> FontHelper.setNativeFont(font, stub, name, \"Amble\", \"Italic\");\n+            case \"amble bold italic\" -> FontHelper.setNativeFont(font, stub, name, \"Amble\", \"Bold Italic\");\n+            case \"amble condensed\" -> FontHelper.setNativeFont(font, stub, name, \"Amble Cn\", \"Regular\");\n+            case \"amble bold condensed\" -> FontHelper.setNativeFont(font, stub, name, \"Amble Cn\", \"Bold\");\n+            case \"amble condensed italic\" -> FontHelper.setNativeFont(font, stub, name, \"Amble Cn\", \"Italic\");\n+            case \"amble bold condensed italic\" -> FontHelper.setNativeFont(font, stub, name, \"Amble Cn\", \"Bold Italic\");\n+            case \"amble light\" -> FontHelper.setNativeFont(font, stub, name, \"Amble Lt\", \"Regular\");\n+            case \"amble light italic\" -> FontHelper.setNativeFont(font, stub, name, \"Amble Lt\", \"Italic\");\n+            case \"amble light condensed\" -> FontHelper.setNativeFont(font, stub, name, \"Amble LtCn\", \"Regular\");\n+            case \"amble light condensed italic\" -> FontHelper.setNativeFont(font, stub, name, \"Amble LtCn\", \"Italic\");\n+            default -> FontHelper.setNativeFont(font, stub, name, \"System\", \"Regular\");\n@@ -82,1 +81,1 @@\n-        return Arrays.asList(\"System\", \"Amble\", \"Amble Cn\", \"Amble Lt\", \"Amble LtCn\");\n+        return List.of(\"System\", \"Amble\", \"Amble Cn\", \"Amble Lt\", \"Amble LtCn\");\n@@ -87,1 +86,1 @@\n-        return Arrays.asList(\"System Regular\", \"System Bold\", \"System Italic\", \"System Bold Italic\",\n+        return List.of(\"System Regular\", \"System Bold\", \"System Italic\", \"System Bold Italic\",\n@@ -100,2 +99,1 @@\n-            case \"amble cn\" -> List.of(\"Amble Condensed\", \"Amble Bold Condensed\", \"Amble Condensed Italic\",\n-                    \"Amble Bold Condensed Italic\");\n+            case \"amble cn\" -> List.of(\"Amble Condensed\", \"Amble Bold Condensed\", \"Amble Condensed Italic\", \"Amble Bold Condensed Italic\");\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubFontLoader.java","additions":31,"deletions":33,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -36,0 +36,6 @@\n+\/**\n+ * Stub implementation of the {@link TextLayout} for testing purposes.\n+ * <br>\n+ * Can calculate the bounds of text by simply using the size of the font.\n+ * If the text is bold, the font will be 1 pixel bigger.\n+ *\/\n@@ -95,1 +101,2 @@\n-        double fontSize = nullFontSize;\n+        double fontSizeH = nullFontSize;\n+        double fontSizeW = nullFontSize;\n@@ -97,1 +104,2 @@\n-            fontSize = font.getSize();\n+            fontSizeH = font.getSize();\n+            fontSizeW = font.getSize();\n@@ -102,1 +110,1 @@\n-                fontSize++;\n+                fontSizeW++;\n@@ -108,1 +116,1 @@\n-        double height = fontSize * lines.length + spacing * (lines.length - 1);\n+        double height = fontSizeH * lines.length + spacing * (lines.length - 1);\n@@ -128,1 +136,1 @@\n-            width = Math.max(width, fontSize * length);\n+            width = Math.max(width, fontSizeW * length);\n@@ -130,2 +138,2 @@\n-        return bounds.deriveWithNewBounds(0, (float)-fontSize, 0,\n-                (float)width, (float)(height-fontSize), 0);\n+        return bounds.deriveWithNewBounds(0, (float)-fontSizeH, 0,\n+                (float)width, (float)(height-fontSizeH), 0);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubTextLayout.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"}]}