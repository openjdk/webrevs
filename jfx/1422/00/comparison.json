{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -537,2 +537,2 @@\n-                        xAxis.getValueForDisplay(lineTo.getX()).doubleValue(),\n-                        yAxis.getValueForDisplay(lineTo.getY()).doubleValue())\n+                        Math.ceil(xAxis.getValueForDisplay(lineTo.getX()).doubleValue()),\n+                        Math.ceil(yAxis.getValueForDisplay(lineTo.getY()).doubleValue()))\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/AreaChartTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,1 +111,1 @@\n-        assertEquals(\"10 478 234 37 254 432 234 83 499 375 234 140 \", bounds);\n+        assertEquals(\"10 453 218 35 238 409 218 79 465 355 218 133 \", bounds);\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/chart\/StackedBarChartTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -153,1 +153,3 @@\n-        textInput.setStyle(\"-fx-font: 24 Helvetica\");\n+        assertEquals(Font.font(\"System\", 12), textInput.getFont());\n+\n+        textInput.setStyle(\"-fx-font: 24 Amble\");\n@@ -156,1 +158,1 @@\n-        assertEquals(Font.font(\"Helvetica\", 24), textInput.getFont());\n+        assertEquals(Font.font(\"Amble\", 24), textInput.getFont());\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/TextInputControlTest.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,175 @@\n+package test.javafx.scene.control.skin;\n+\n+import com.sun.javafx.scene.control.skin.Utils;\n+import javafx.scene.control.Label;\n+import javafx.scene.text.Font;\n+import javafx.scene.text.FontPosture;\n+import javafx.scene.text.FontWeight;\n+import org.junit.jupiter.api.Test;\n+import test.com.sun.javafx.scene.control.infrastructure.StageLoader;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+\/**\n+ * This is a test for fonts, font loading and their computed sizes.\n+ * Note that while we only test the stub font loading here, we still want to verify some basic rules that apply\n+ * for all headless tests.\n+ * <p>\n+ * See the javadoc for every method to get more details.\n+ * @see test.com.sun.javafx.pgstub.StubFontLoader\n+ * @see test.com.sun.javafx.pgstub.StubTextLayout\n+ *\/\n+class StubFontContractTest {\n+\n+    \/**\n+     * An unknown font has no text width.\n+     *\/\n+    @Test\n+    public void testUnknownFont() {\n+        Font font = new Font(\"bla\", 12);\n+\n+        assertEquals(0, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+    }\n+\n+    \/**\n+     * Even if the font name is equal with a family name, we do not know the font by name.\n+     *\/\n+    @Test\n+    public void testFamilyAsFontName() {\n+        Font font = new Font(\"System\", 12);\n+\n+        assertEquals(0, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+    }\n+\n+    \/**\n+     * System Regular is the default font for headless testing but also for JavaFX itself.\n+     * 12 is the default font size for headless testing. This is different from JavaFX, as size from the OS will be used.\n+     *\/\n+    @Test\n+    public void testDefaultFont() {\n+        Label lbl = new Label();\n+        Font defaultFont = lbl.getFont();\n+\n+        assertEquals(\"System Regular\", defaultFont.getName());\n+        assertEquals(\"System\", defaultFont.getFamily());\n+        assertEquals(\"Regular\", defaultFont.getStyle());\n+        assertEquals(12, defaultFont.getSize());\n+\n+        assertEquals(120, Utils.computeTextWidth(defaultFont, \"ABCDEFGHIJ\", -1));\n+    }\n+\n+    @Test\n+    public void testDefaultFontSet() {\n+        Label lbl = new Label();\n+        Font font = lbl.getFont();\n+\n+        assertEquals(\"System Regular\", font.getName());\n+        assertEquals(12, font.getSize());\n+\n+        lbl.setFont(Font.font(\"system\", FontWeight.BOLD, 20));\n+\n+        font = lbl.getFont();\n+        assertEquals(\"System Bold\", font.getName());\n+        assertEquals(20, font.getSize());\n+\n+        assertEquals(210, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+    }\n+\n+    @Test\n+    public void testDefaultFontCssSet() {\n+        Label lbl = new Label();\n+        Font font = lbl.getFont();\n+\n+        assertEquals(\"System Regular\", font.getName());\n+        assertEquals(12, font.getSize());\n+\n+        StageLoader stageLoader = new StageLoader(lbl);\n+\n+        lbl.setStyle(\"-fx-font: bold 20px System;\");\n+        lbl.applyCss();\n+\n+        stageLoader.dispose();\n+\n+        font = lbl.getFont();\n+        assertEquals(\"System Bold\", font.getName());\n+        assertEquals(20, font.getSize());\n+\n+        assertEquals(210, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+    }\n+\n+    \/**\n+     * System Regular is a font that is available for testing.\n+     *\/\n+    @Test\n+    public void testFontByName() {\n+        Font font = new Font(\"System Regular\", 12);\n+\n+        assertEquals(120, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+    }\n+\n+    \/**\n+     * The System family is available for testing.\n+     *\/\n+    @Test\n+    public void testFontByFamily() {\n+        Font font = Font.font(\"System\", 12);\n+\n+        assertEquals(\"Regular\", font.getStyle());\n+        assertEquals(120, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+    }\n+\n+    \/**\n+     * The system font can be loaded with a normal weight.\n+     *\/\n+    @Test\n+    public void testFontByFamilyNormal() {\n+        Font font = Font.font(\"System\", FontWeight.NORMAL, 12);\n+\n+        assertEquals(\"Regular\", font.getStyle());\n+        assertEquals(120, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+    }\n+\n+    \/**\n+     * The system font can also be bold. In that case it is a bit wider than the normal one.\n+     *\/\n+    @Test\n+    public void testFontByFamilyBold() {\n+        Font font = Font.font(\"System\", FontWeight.BOLD, 12);\n+\n+        assertEquals(\"Bold\", font.getStyle());\n+        assertEquals(130, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+    }\n+\n+    \/**\n+     * The system font can also be italic.\n+     *\/\n+    @Test\n+    public void testFontByFamilyItalic() {\n+        Font font = Font.font(\"System\", FontPosture.ITALIC, 12);\n+\n+        assertEquals(\"Italic\", font.getStyle());\n+        assertEquals(120, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+    }\n+\n+    \/**\n+     * The system font can also be bold and Italic. In that case it is a bit wider than the normal one.\n+     *\/\n+    @Test\n+    public void testFontByFamilyBoldItalic() {\n+        Font font = Font.font(\"System\", FontWeight.BOLD, FontPosture.ITALIC, 12);\n+\n+        assertEquals(\"Bold Italic\", font.getStyle());\n+        assertEquals(130, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+    }\n+\n+    \/**\n+     * Amble is the other font we support for headless testing.\n+     *\/\n+    @Test\n+    public void testAmbleFont() {\n+        Font font = Font.font(\"Amble\", 12);\n+\n+        assertEquals(120, Utils.computeTextWidth(font, \"ABCDEFGHIJ\", -1));\n+    }\n+\n+}\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/StubFontContractTest.java","additions":175,"deletions":0,"binary":false,"changes":175,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,2 +85,0 @@\n-        \/\/Force the column to have default font, otherwise font Amble is applied and mess with header width size\n-        column.setStyle(\"-fx-font: System;\");\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/skin\/TableColumnHeaderTest.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,1 @@\n+\n@@ -51,30 +52,25 @@\n-        if (name.equals(\"system\") || name.equals(\"system regular\")) {\n-            FontHelper.setNativeFont(font, nativeFont, font.getName(), \"System\", \"Regular\");\n-        } else if (name.equals(\"amble regular\")) {\n-            FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble\", \"Regular\");\n-        } else if (name.equals(\"amble bold\")) {\n-            FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble\", \"Bold\");\n-        } else if (name.equals(\"amble italic\")) {\n-            FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble\", \"Italic\");\n-        } else if (name.equals(\"amble bold italic\")) {\n-            FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble\",\n-                    \"Bold Italic\");\n-        } else if (name.equals(\"amble condensed\")) {\n-            FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble Cn\", \"Regular\");\n-        } else if (name.equals(\"amble bold condensed\")) {\n-            FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble Cn\", \"Bold\");\n-        } else if (name.equals(\"amble condensed italic\")) {\n-            FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble Cn\", \"Italic\");\n-        } else if (name.equals(\"amble bold condensed italic\")) {\n-            FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble Cn\",\n-                    \"Bold Italic\");\n-        } else if (name.equals(\"amble light\")) {\n-            FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble Lt\", \"Regular\");\n-        } else if (name.equals(\"amble light italic\")) {\n-            FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble Lt\", \"Italic\");\n-        } else if (name.equals(\"amble light condensed\")) {\n-            FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble LtCn\",\n-                    \"Regular\");\n-        } else if (name.equals(\"amble light condensed italic\")) {\n-            FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble LtCn\",\n-                    \"Italic\");\n+        switch (name) {\n+            case \"system regular\" -> FontHelper.setNativeFont(font, nativeFont, font.getName(), \"System\", \"Regular\");\n+            case \"system bold\" -> FontHelper.setNativeFont(font, nativeFont, font.getName(), \"System\", \"Bold\");\n+            case \"system italic\" -> FontHelper.setNativeFont(font, nativeFont, font.getName(), \"System\", \"Italic\");\n+            case \"system bold italic\" ->\n+                    FontHelper.setNativeFont(font, nativeFont, font.getName(), \"System\", \"Bold Italic\");\n+            case \"amble regular\" -> FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble\", \"Regular\");\n+            case \"amble bold\" -> FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble\", \"Bold\");\n+            case \"amble italic\" -> FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble\", \"Italic\");\n+            case \"amble bold italic\" ->\n+                    FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble\", \"Bold Italic\");\n+            case \"amble condensed\" -> FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble Cn\", \"Regular\");\n+            case \"amble bold condensed\" ->\n+                    FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble Cn\", \"Bold\");\n+            case \"amble condensed italic\" ->\n+                    FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble Cn\", \"Italic\");\n+            case \"amble bold condensed italic\" ->\n+                    FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble Cn\", \"Bold Italic\");\n+            case \"amble light\" -> FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble Lt\", \"Regular\");\n+            case \"amble light italic\" ->\n+                    FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble Lt\", \"Italic\");\n+            case \"amble light condensed\" ->\n+                    FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble LtCn\", \"Regular\");\n+            case \"amble light condensed italic\" ->\n+                    FontHelper.setNativeFont(font, nativeFont, font.getName(), \"Amble LtCn\", \"Italic\");\n@@ -86,1 +82,1 @@\n-        return Arrays.asList(\"Amble\", \"Amble Cn\", \"Amble Lt\", \"Amble LtCn\");\n+        return Arrays.asList(\"System\", \"Amble\", \"Amble Cn\", \"Amble Lt\", \"Amble LtCn\");\n@@ -91,5 +87,4 @@\n-        return Arrays.asList(\"Amble Regular\", \"Amble Bold\", \"Amble Italic\",\n-                \"Amble Bold Italic\", \"Amble Condensed\", \"Amble Bold Condensed\",\n-                \"Amble Condensed Italic\", \"Amble Bold Condensed Italic\",\n-                \"Amble Light\", \"Amble Light Italic\", \"Amble Light Condensed\",\n-                \"Amble Light Condensed Italic\");\n+        return Arrays.asList(\"System Regular\", \"System Bold\", \"System Italic\", \"System Bold Italic\",\n+                \"Amble Regular\", \"Amble Bold\", \"Amble Italic\", \"Amble Bold Italic\",\n+                \"Amble Condensed\", \"Amble Bold Condensed\", \"Amble Condensed Italic\", \"Amble Bold Condensed Italic\",\n+                \"Amble Light\", \"Amble Light Italic\", \"Amble Light Condensed\", \"Amble Light Condensed Italic\");\n@@ -100,15 +95,11 @@\n-        String lower = family.trim().toLowerCase(Locale.ROOT);\n-        if (\"amble\".equals(lower)) {\n-            return Arrays.asList(\"Amble Regular\", \"Amble Bold\", \"Amble Italic\",\n-                    \"Amble Bold Italic\");\n-        } else if (\"amble cn\".equals(lower)) {\n-            return Arrays.asList(\"Amble Condensed\", \"Amble Bold Condensed\",\n-                    \"Amble Condensed Italic\", \"Amble Bold Condensed Italic\");\n-        } else if (\"amble lt\".equals(lower)) {\n-            return Arrays.asList(\"Amble Light\", \"Amble Light Italic\");\n-        } else if (\"amble ltcn\".equals(lower)) {\n-            return Arrays.asList(\"Amble Light Condensed\",\n-                    \"Amble Light Condensed Italic\");\n-        } else {\n-            return Arrays.asList();\n-        }\n+        String familyLower = family.trim().toLowerCase(Locale.ROOT);\n+\n+        return switch (familyLower) {\n+            case \"system\" -> List.of(\"System Regular\", \"System Bold\", \"System Italic\", \"System Bold Italic\");\n+            case \"amble\" -> List.of(\"Amble Regular\", \"Amble Bold\", \"Amble Italic\", \"Amble Bold Italic\");\n+            case \"amble cn\" -> List.of(\"Amble Condensed\", \"Amble Bold Condensed\", \"Amble Condensed Italic\",\n+                    \"Amble Bold Condensed Italic\");\n+            case \"amble lt\" -> List.of(\"Amble Light\", \"Amble Light Italic\");\n+            case \"amble ltcn\" -> List.of(\"Amble Light Condensed\", \"Amble Light Condensed Italic\");\n+            default -> List.of();\n+        };\n@@ -120,2 +111,1 @@\n-        family = family.trim();\n-        String fam = family.toLowerCase(Locale.ROOT);\n+        String fam = family.trim().toLowerCase(Locale.ROOT);\n@@ -123,9 +113,17 @@\n-        if (\"amble\".equals(fam)) {\n-            if (weight != null\n-                    && weight.ordinal() < FontWeight.NORMAL.ordinal()) {\n-                name = name + \" Light\";\n-            } else if (weight != null\n-                    && weight.ordinal() > FontWeight.NORMAL.ordinal()) {\n-                name = name + \" Bold\";\n-            } else if (posture != FontPosture.ITALIC) {\n-                name = name + \" Regular\";\n+        if (fam.startsWith(\"system\")) {\n+            name = \"System\";\n+        } else if (fam.startsWith(\"amble\")) {\n+            name = \"Amble\";\n+        }\n+\n+        switch (fam) {\n+            case \"amble\", \"system\" -> {\n+                if (weight != null\n+                        && weight.ordinal() < FontWeight.NORMAL.ordinal()) {\n+                    name = name + \" Light\";\n+                } else if (weight != null\n+                        && weight.ordinal() > FontWeight.NORMAL.ordinal()) {\n+                    name = name + \" Bold\";\n+                } else if (posture != FontPosture.ITALIC) {\n+                    name = name + \" Regular\";\n+                }\n@@ -133,7 +131,9 @@\n-        } else if (\"amble cn\".equals(fam) || \"amble condensed\".equals(fam)) {\n-            if (weight != null\n-                    && weight.ordinal() < FontWeight.NORMAL.ordinal()) {\n-                name = name + \" Light\";\n-            } else if (weight != null\n-                    && weight.ordinal() > FontWeight.NORMAL.ordinal()) {\n-                name = name + \" Bold\";\n+            case \"amble cn\", \"amble condensed\" -> {\n+                if (weight != null\n+                        && weight.ordinal() < FontWeight.NORMAL.ordinal()) {\n+                    name = name + \" Light\";\n+                } else if (weight != null\n+                        && weight.ordinal() > FontWeight.NORMAL.ordinal()) {\n+                    name = name + \" Bold\";\n+                }\n+                name = name + \" Condensed\";\n@@ -141,11 +141,12 @@\n-            name = name + \" Condensed\";\n-        } else if (\"amble lt\".equals(fam)) {\n-            if (weight.ordinal() <= FontWeight.NORMAL.ordinal()) {\n-                name = name + \" Light\";\n-            } else if (weight != null\n-                    && weight.ordinal() < FontWeight.BOLD.ordinal()\n-                    && posture != FontPosture.ITALIC) {\n-                name = name + \" Regular\";\n-            } else if (weight != null\n-                    && weight.ordinal() >= FontWeight.BOLD.ordinal()) {\n-                name = name + \" Bold\";\n+            case \"amble lt\" -> {\n+                if (weight != null\n+                        && weight.ordinal() <= FontWeight.NORMAL.ordinal()) {\n+                    name = name + \" Light\";\n+                } else if (weight != null\n+                        && weight.ordinal() < FontWeight.BOLD.ordinal()\n+                        && posture != FontPosture.ITALIC) {\n+                    name = name + \" Regular\";\n+                } else if (weight != null\n+                        && weight.ordinal() >= FontWeight.BOLD.ordinal()) {\n+                    name = name + \" Bold\";\n+                }\n@@ -153,6 +154,9 @@\n-        } else if (\"amble ltcn\".equals(fam)) {\n-            if (weight.ordinal() <= FontWeight.NORMAL.ordinal()) {\n-                name = name + \" Light\";\n-            } else if (weight != null\n-                    && weight.ordinal() >= FontWeight.BOLD.ordinal()) {\n-                name = name + \" Bold\";\n+            case \"amble ltcn\" -> {\n+                if (weight != null\n+                        && weight.ordinal() <= FontWeight.NORMAL.ordinal()) {\n+                    name = name + \" Light\";\n+                } else if (weight != null\n+                        && weight.ordinal() >= FontWeight.BOLD.ordinal()) {\n+                    name = name + \" Bold\";\n+                }\n+                name = name + \" Condensed\";\n@@ -160,1 +164,0 @@\n-            name = name + \" Condensed\";\n@@ -162,0 +165,1 @@\n+\n@@ -165,2 +169,2 @@\n-        String fn = \"Amble\" + name;\n-        return new Font(fn, size);\n+\n+        return new Font(name, size);\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubFontLoader.java","additions":94,"deletions":90,"binary":false,"changes":184,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,1 +95,11 @@\n-        final double fontSize = (font == null ? nullFontSize : font.getSize());\n+        double fontSize = nullFontSize;\n+        if (font != null) {\n+            fontSize = font.getSize();\n+\n+            \/\/ For better testing, we make bold text a little bit bigger.\n+            boolean bold = font.getStyle().toLowerCase().contains(\"bold\");\n+            if (bold) {\n+                fontSize++;\n+            }\n+        }\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubTextLayout.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -110,1 +110,1 @@\n-        assertNull(E.getFont().getStyle());\n+        assertEquals(\"Regular\", E.getFont().getStyle());\n@@ -115,2 +115,2 @@\n-        assertNull(D.getFont().getStyle());\n-        assertNull(E.getFont().getStyle());\n+        assertEquals(\"Regular\", D.getFont().getStyle());\n+        assertEquals(\"Regular\", E.getFont().getStyle());\n@@ -197,1 +197,1 @@\n-        assertNull(E.getFont().getStyle());\n+        assertEquals(\"Regular\", E.getFont().getStyle());\n@@ -205,2 +205,2 @@\n-        assertNull(D.getFont().getStyle());\n-        assertNull(E.getFont().getStyle());\n+        assertEquals(\"Regular\", D.getFont().getStyle());\n+        assertEquals(\"Regular\", E.getFont().getStyle());\n@@ -485,1 +485,1 @@\n-        assertNull(C.getFont().getStyle());\n+        assertEquals(\"Regular\", C.getFont().getStyle());\n@@ -521,1 +521,1 @@\n-        assertNull(C.getFont().getStyle());\n+        assertEquals(\"Regular\", C.getFont().getStyle());\n@@ -556,1 +556,1 @@\n-        assertNull(C.getFont().getStyle());\n+        assertEquals(\"Regular\", C.getFont().getStyle());\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/CssStyleHelperTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}