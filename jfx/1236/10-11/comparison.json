{"files":[{"patch":"@@ -30,0 +30,3 @@\n+\/**\n+ * Represents a full line of text that is all rendered on a single line.\n+ *\/\n@@ -32,1 +35,1 @@\n-     * Returns the list of GlyphList in the line. The list is visually orderded.\n+     * Returns the list of GlyphList in the line. The list is visually ordered.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/text\/TextLine.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,7 @@\n+\/**\n+ * Represents a sequence of characters all using the same font, or\n+ * an embedded object if no font is supplied.\n+ * <p>\n+ * A text span can contain line breaks if the text should span multiple\n+ * lines.\n+ *\/\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/text\/TextSpan.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -994,1 +994,1 @@\n-    private TextLine createLine(int start, int end, int startOffset) {\n+    private TextLine createLine(int start, int end, int startOffset, float collapsedSpaceWidth) {\n@@ -1016,5 +1016,1 @@\n-        \/*\n-         * Calculate the width of trailing spaces for the new TextLine so they\n-         * can be excluded when doing later alignment calculations:\n-         *\/\n-        float trailingSpaceWidth = computeTrailingSpaceWidth(lineRuns);\n+        width -= collapsedSpaceWidth;\n@@ -1024,1 +1020,1 @@\n-                            width, ascent, descent, leading, trailingSpaceWidth);\n+                            width, ascent, descent, leading);\n@@ -1028,1 +1024,1 @@\n-     * Computes the size of the white space trailing a given line defined by the start offset and length.\n+     * Computes the size of the white space trailing a given run.\n@@ -1030,5 +1026,2 @@\n-     * <p>Note: textRuns is split in such a way that it matches the line, so the last text run's last\n-     * character is the point of a line break.\n-     *\n-     * @param textRuns the text runs the line consists off\n-     * @return the X size of the white space trailing the line\n+     * @param run the run to compute trailing space width for, cannot be {@code null}\n+     * @return the X size of the white space trailing the run\n@@ -1036,2 +1029,1 @@\n-    private float computeTrailingSpaceWidth(TextRun[] textRuns) {\n-        TextRun textRun = textRuns[textRuns.length - 1];\n+    private float computeTrailingSpaceWidth(TextRun run) {\n@@ -1047,2 +1039,2 @@\n-        for (int i = textRun.getGlyphCount() - 1; i >= 0; i--) {\n-            int textOffset = textRun.getStart() + textRun.getCharOffset(i);\n+        for (int i = run.getGlyphCount() - 1; i >= 0; i--) {\n+            int textOffset = run.getStart() + run.getCharOffset(i);\n@@ -1054,1 +1046,1 @@\n-            trailingSpaceWidth += textRun.getAdvance(i);\n+            trailingSpaceWidth += run.getAdvance(i);\n@@ -1166,0 +1158,88 @@\n+    \/*\n+     * The way JavaFX lays out text:\n+     *\n+     * JavaFX distinguishes between soft wraps and hard wraps. Soft wraps\n+     * occur when a wrap width has been set and the text requires wrapping\n+     * to stay within the set wrap width. Hard wraps are explicitly part of\n+     * the text in the form of line feeds (LF) and carriage returns (CR).\n+     * Hard wrapping considers a singular LF or CR, or the combination of\n+     * CR+LF (or LF+CR) as a single wrap location. Hard wrapping also occurs\n+     * between TextSpans when multiple TextSpans were supplied (for wrapping\n+     * purposes, there is no difference between two TextSpans and a single\n+     * TextSpan where the text was concatenated with a line break in between).\n+     *\n+     * Soft wrapping occurs when a wrap width has been set. This occurs at\n+     * the first character that does not fit.\n+     *\n+     * - If that character is not a white space, the break is set immediately\n+     *   after the first white space encountered before that character\n+     *   - If there is no white space before the preferred break character, the\n+     *     break is done at the first character that does not fit (the wrap\n+     *     then occurs in the middle of a (long) word)\n+     * - If the preferred break character is white space, and it is followed by\n+     *   more white space, the break is moved to the end of the white space (thus\n+     *   a break in white space always occurs at first non white space character\n+     *   following a white space sequence)\n+     *\n+     * White space collapsing:\n+     *\n+     * Only white space that is present at soft wrapped locations is collapsed to\n+     * zero. Any other white space is preserved. This includes white space between\n+     * words, leading and trailing white space, and white space around hard wrapped\n+     * locations.\n+     *\n+     * Alignment:\n+     *\n+     * The alignment calculation only looks at the width of all the significant\n+     * characters in each line. Significant characters are any non white space\n+     * characters and any white space that has been preserved (white space that wasn't\n+     * collapsed due to soft wrapping).\n+     *\n+     * Alignment does not take text effects, such as strike through and underline, into\n+     * account. This means that such effects can appear unaligned. Trailing spaces at a\n+     * soft wrap location (that are underlined for example), may show the underline go\n+     * outside the logical bounds of the text.\n+     *\n+     * Example, where <SW> indicates a soft wrap location, and <LF> is a line feed:\n+     *\n+     *     \"   The   quick <SW>brown fox jumps <SW> over the <LF> lazy dog   \"\n+     *\n+     * Would be rendered as (left aligned):\n+     *\n+     *     \"   The   quick\"\n+     *     \"brown fox jumps\"\n+     *     \"over the \"\n+     *     \" lazy dog   \"\n+     *\n+     * The alignment calculation uses the above bounds indicated by the double\n+     * quotes, and so right aligned text would look like:\n+     *\n+     *      \"   The   quick\"\n+     *     \"brown fox jumps\"\n+     *           \"over the \"\n+     *        \" lazy dog   \"\n+     *\n+     * Note that only the white space at the soft wrap locations is collapsed.\n+     * In all other locations the space was preserved (the space between words\n+     * where no soft wrap occurred, the leading and trailing space, and the\n+     * space around the hard wrapped location).\n+     *\n+     * Text effects have no effect on the alignment, and so with underlining on\n+     * the right right aligned text would look like:\n+     *\n+     *      \"___The___quick_\"     (one collapsed space becomes visible here)\n+     *     \"brown_fox_jumps__\"    (two collapsed spaces become visible here)\n+     *           \"over_the_\"\n+     *        \"_lazy_dog___\"\n+     *\n+     * Note that text alignment has not changed at all, but the bounds are exceeded\n+     * in some locations to allow for the underline. Controls displaying such texts\n+     * will likely clip the underlined parts exceeding the bounds.\n+     *\n+     * Users wishing to mitigate some of these perhaps surprising results can ensure\n+     * they use trimmed texts, and avoid the use of line breaks, or at least ensure\n+     * that line breaks are not preceded or succeeded by white space (activating\n+     * line wrapping is not equivalent to collapsing any consecutive white space\n+     * no matter where it occurs).\n+     *\/\n+\n@@ -1233,1 +1313,2 @@\n-                \/* Only keep whitespaces (not tabs) in the current run to avoid\n+                \/*\n+                 * Only keep white spaces (not tabs) in the current run to avoid\n@@ -1235,0 +1316,5 @@\n+                 *\n+                 * If the run is a tab, the run will be always of length 1 (see\n+                 * buildRuns()). As there is no \"next\" character that can be selected\n+                 * as the wrap index in this run, the white space skipping logic\n+                 * below won't skip tabs.\n@@ -1236,0 +1322,1 @@\n+\n@@ -1239,1 +1326,1 @@\n-                \/\/ Don't take spaces into account at the preferred wrap index:\n+                \/\/ Don't take white space into account at the preferred wrap index:\n@@ -1338,1 +1425,1 @@\n-                TextLine line = createLine(startIndex, i, startOffset);\n+                TextLine line = createLine(startIndex, i, startOffset, computeTrailingSpaceWidth(runs[i]));\n@@ -1347,1 +1434,1 @@\n-        linesList.add(createLine(startIndex, runCount - 1, startOffset));\n+        linesList.add(createLine(startIndex, runCount - 1, startOffset, 0));\n@@ -1368,1 +1455,1 @@\n-            float unusedWidth = fullWidth - bounds.getWidth() + (wrapWidth > 0 ? line.getTrailingSpaceWidth() : 0);\n+            float unusedWidth = fullWidth - bounds.getWidth();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismTextLayout.java","additions":110,"deletions":23,"binary":false,"changes":133,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-    private final float trailingSpaceWidth;\n@@ -41,1 +40,1 @@\n-                    float width, float ascent, float descent, float leading, float trailingSpaceWidth) {\n+                    float width, float ascent, float descent, float leading) {\n@@ -47,1 +46,0 @@\n-        this.trailingSpaceWidth = trailingSpaceWidth;\n@@ -74,4 +72,0 @@\n-    public float getTrailingSpaceWidth() {\n-        return trailingSpaceWidth;\n-    }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/TextLine.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -326,1 +326,1 @@\n-            0.0f, List.of(309.6504f), List.of(0.0f),\n+            0.0f, List.of(309.6504f),\n@@ -339,1 +339,1 @@\n-            0.0f, List.of(180.0293f, 122.41992f), List.of(0.0f, 0.0f),\n+            0.0f, List.of(180.0293f, 122.41992f),\n@@ -350,1 +350,1 @@\n-            0.0f, List.of(180.0293f + 79.2129f, 122.41992f + 79.2129f), List.of(0.0f, 0.0f),\n+            0.0f, List.of(180.0293f + 79.2129f, 122.41992f + 79.2129f),\n@@ -355,2 +355,3 @@\n-         * Checks that single trailing white spaces are ignored for alignment\n-         * purposes when wrapping is enabled in simple text.\n+         * Checks that single white spaces are ignored for alignment\n+         * purposes when wrapping is enabled in simple text. This soft\n+         * wraps after \"jumps\".\n@@ -358,1 +359,1 @@\n-        SIMPLE(new Parameters(\n+        SOFT_WRAP(new Parameters(\n@@ -361,1 +362,1 @@\n-            200.0f, List.of(180.0293f, 122.41992f), List.of(7.20117f, 0.0f),\n+            200.0f, List.of(180.0293f, 122.41992f),\n@@ -366,2 +367,4 @@\n-         * Checks that multiple trailing white spaces are ignored for alignment\n-         * purposes when wrapping is enabled in simple text.\n+         * Checks that trailing white spaces are NOT stripped even when\n+         * some lines are soft wrapped. This soft wraps after \"jumps\"\n+         * and has 4 trailing spaces on the 2nd line where no soft\n+         * wrap occurs, and so they should be kept intact.\n@@ -369,1 +372,13 @@\n-        SIMPLE_WITH_EXTRA_TRAILING_SPACE(new Parameters(\n+        SOFT_WRAP_WITH_TRAILING_SPACE(new Parameters(\n+            \"The quick brown fox jumps over the lazy dog    \",\n+            Font.font(\"Monaco\", 12),\n+            200.0f, List.of(180.0293f, 122.41992f + 28.80469f),\n+            12.0f, 4.001953f\n+        )),\n+\n+        \/**\n+         * Checks that multiple white spaces are ignored for alignment\n+         * purposes when wrapping is enabled in simple text. This soft\n+         * wraps after \"jumps\".\n+         *\/\n+        SOFT_WRAP_WITH_EXTRA_SPACE(new Parameters(\n@@ -372,1 +387,1 @@\n-            200.0f, List.of(180.0293f, 122.41992f), List.of(79.2129f, 0.0f),\n+            200.0f, List.of(180.0293f, 122.41992f),\n@@ -377,2 +392,3 @@\n-         * Checks that single trailing white spaces are ignored for alignment\n-         * purposes when wrapping is enabled in complex text.\n+         * Checks that single white spaces are ignored for alignment\n+         * purposes when wrapping is enabled in complex text. This soft\n+         * wraps after \"jumps\".\n@@ -380,1 +396,1 @@\n-        COMPLEX(new Parameters(\n+        SOFT_WRAP_WITH_COMPLEX_TEXT(new Parameters(\n@@ -383,1 +399,1 @@\n-            200.0f, List.of(189.89649f, 122.583984f), List.of(7.20117f, 0.0f),\n+            200.0f, List.of(189.89649f, 122.583984f),\n@@ -388,2 +404,3 @@\n-         * Checks that multiple trailing white spaces are ignored for alignment\n-         * purposes when wrapping is enabled in complex text.\n+         * Checks that multiple white spaces are ignored for alignment\n+         * purposes when wrapping is enabled in complex text. This soft\n+         * wraps after \"jumps\".\n@@ -391,1 +408,1 @@\n-        COMPLEX_WITH_EXTRA_TRAILING_SPACE(new Parameters(\n+        SOFT_WRAP_WITH_COMPLEX_TEXT_AND_EXTRA_TRAILING_SPACE(new Parameters(\n@@ -394,1 +411,1 @@\n-            200.0f, List.of(189.89649f, 122.583984f), List.of(79.2129f, 0.0f),\n+            200.0f, List.of(189.89649f, 122.583984f),\n@@ -404,1 +421,1 @@\n-        record Parameters(String text, Font font, float wrapWidth, List<Float> lineWidths, List<Float> trailingWhiteSpaceWidths, float ascent, float descent) {\n+        record Parameters(String text, Font font, float wrapWidth, List<Float> lineWidths, float ascent, float descent) {\n@@ -410,1 +427,0 @@\n-                assert trailingWhiteSpaceWidths != null;\n@@ -414,1 +430,0 @@\n-                assert lineWidths.size() == trailingWhiteSpaceWidths.size();\n@@ -450,1 +465,1 @@\n-            RectBounds expectedBounds = new RectBounds(0, -ASCENT, p.lineWidths.get(i) + p.trailingWhiteSpaceWidths.get(i), DESCENT);\n+            RectBounds expectedBounds = new RectBounds(0, -ASCENT, p.lineWidths.get(i), DESCENT);\n@@ -466,1 +481,1 @@\n-            RectBounds expectedBounds = new RectBounds(CENTER - 0.5f * p.lineWidths.get(i), -ASCENT, CENTER + 0.5f * p.lineWidths.get(i) + p.trailingWhiteSpaceWidths.get(i), DESCENT);\n+            RectBounds expectedBounds = new RectBounds(CENTER - 0.5f * p.lineWidths.get(i), -ASCENT, CENTER + 0.5f * p.lineWidths.get(i), DESCENT);\n@@ -482,1 +497,1 @@\n-            RectBounds expectedBounds = new RectBounds(WRAP - p.lineWidths.get(i), -ASCENT, WRAP + p.trailingWhiteSpaceWidths.get(i), DESCENT);\n+            RectBounds expectedBounds = new RectBounds(WRAP - p.lineWidths.get(i), -ASCENT, WRAP, DESCENT);\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/text\/TextLayoutTest.java","additions":40,"deletions":25,"binary":false,"changes":65,"status":"modified"}]}