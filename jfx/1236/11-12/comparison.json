{"files":[{"patch":"@@ -48,0 +48,1 @@\n+import com.sun.javafx.text.TextRun;\n@@ -60,8 +61,3 @@\n-    class TestSpan implements TextSpan {\n-        String text;\n-        Object font;\n-        TestSpan(Object text, Object font) {\n-            this.text = (String)text;\n-            this.font = font;\n-        }\n-        @Override public String getText() {\n+    record TestSpan(String text, Object font) implements TextSpan {\n+        @Override\n+        public String getText() {\n@@ -70,1 +66,3 @@\n-        @Override public Object getFont() {\n+\n+        @Override\n+        public Object getFont() {\n@@ -73,1 +71,3 @@\n-        @Override public RectBounds getBounds() {\n+\n+        @Override\n+        public RectBounds getBounds() {\n@@ -83,1 +83,1 @@\n-            spans[i>>1] = new TestSpan(content[i++], content[i++]);\n+            spans[i>>1] = new TestSpan((String) content[i++], content[i++]);\n@@ -354,0 +354,21 @@\n+        \/**\n+         * Checks that a character after tabs align, even if there were\n+         * some preceding characters (that don't exceed the tab advance width)\n+         *\/\n+        HARD_WRAP_WITH_TABS(new Parameters(\n+            \"\\tA A\\n\" + \"x\\tA A\\n\" + \"xx\\tA A\",  \/\/ expect same width for all three, as the \"x\" character falls within tab advance width\n+            Font.font(\"Monaco\", 12),\n+            0.0f, List.of(79.21289f, 79.21289f, 79.21289f),\n+            12.0f, 4.001953f\n+        )),\n+\n+        \/**\n+         * Checks that tabs are a multiple of the tab advance.\n+         *\/\n+        HARD_WRAP_WITH_MULTIPLE_TABS(new Parameters(\n+            \"\\t\\n\" + \"\\t\\t\\n\" + \"\\t\\t\\t\",  \/\/ expect width ratio 1:2:3\n+            Font.font(\"Monaco\", 12),\n+            0.0f, List.of(57.609375f, 57.609375f * 2, 57.609375f * 3),\n+            12.0f, 4.001953f\n+        )),\n+\n@@ -366,0 +387,13 @@\n+        \/**\n+         * Checks that leading white spaces are NOT stripped even when\n+         * some lines are soft wrapped. This soft wraps after \"fox\"\n+         * and has 4 leading spaces on the 1st line where no soft\n+         * wrap occurs, and so they should be kept intact.\n+         *\/\n+        SOFT_WRAP_WITH_LEADING_SPACE(new Parameters(\n+            \"    The quick brown fox jumps over the lazy dog\",\n+            Font.font(\"Monaco\", 12),\n+            200.0f, List.of(136.82226f + 28.80469f, 165.62695f),\n+            12.0f, 4.001953f\n+        )),\n+\n@@ -452,3 +486,10 @@\n-        \/\/ split content on line feeds (without removing the line feeds):\n-        layout.setContent(Arrays.stream(p.text.split(\"(?<=\\n)\")).map(text -> new TestSpan(text, FontHelper.getNativeFont(p.font))).toArray(TextSpan[]::new));\n-        layout.setWrapWidth(p.wrapWidth);\n+        for (String contentType : new String[] {\"rich text (spans)\", \"plain text\"}) {\n+            if (contentType.equals(\"plain text\")) {\n+                layout.setContent(p.text, FontHelper.getNativeFont(p.font));\n+            }\n+            else {\n+                \/\/ split content on line feeds (without removing the line feeds):\n+                layout.setContent(Arrays.stream(p.text.split(\"(?<=\\n)\")).map(text -> new TestSpan(text, FontHelper.getNativeFont(p.font))).toArray(TextSpan[]::new));\n+            }\n+\n+            layout.setWrapWidth(p.wrapWidth);\n@@ -456,1 +497,1 @@\n-        \/\/ LEFT ALIGNMENT\n+            \/\/ LEFT ALIGNMENT\n@@ -458,1 +499,1 @@\n-        layout.setAlignment(0);  \/\/ 0 == left\n+            layout.setAlignment(0);  \/\/ 0 == left\n@@ -460,1 +501,1 @@\n-        assertLineCount(p.lineCount());\n+            assertLineCount(p.lineCount());\n@@ -462,5 +503,5 @@\n-        for (int i = 0; i < p.lineCount(); i++) {\n-            TextLine[] lines = layout.getLines();\n-            String description = \"left aligned: line \" + i + \" for \" + c.parameters;\n-            RectBounds expectedBounds = new RectBounds(0, -ASCENT, p.lineWidths.get(i), DESCENT);\n-            Point2D expectedLocation = new Point2D(0, i * (ASCENT + DESCENT));\n+            for (int i = 0; i < p.lineCount(); i++) {\n+                TextLine line = layout.getLines()[i];\n+                String description = \"left aligned \" + contentType + \": line \" + i + \" for \" + c.parameters;\n+                RectBounds expectedBounds = new RectBounds(0, -ASCENT, p.lineWidths.get(i), DESCENT);\n+                Point2D expectedLocation = new Point2D(0, i * (ASCENT + DESCENT));\n@@ -468,3 +509,3 @@\n-            assertEquals(expectedBounds, lines[i].getBounds(), description);\n-            assertEquals(expectedLocation, lines[i].getRuns()[0].getLocation(), description);\n-        }\n+                assertEquals(expectedBounds, line.getBounds(), description);\n+                assertEquals(expectedLocation, line.getRuns()[0].getLocation(), description);\n+            }\n@@ -472,1 +513,1 @@\n-        \/\/ CENTER ALIGNMENT\n+            \/\/ CENTER ALIGNMENT\n@@ -474,1 +515,1 @@\n-        layout.setAlignment(1);  \/\/ 1 == center\n+            layout.setAlignment(1);  \/\/ 1 == center\n@@ -476,1 +517,1 @@\n-        assertLineCount(p.lineCount());\n+            assertLineCount(p.lineCount());\n@@ -478,5 +519,5 @@\n-        for (int i = 0; i < p.lineCount(); i++) {\n-            TextLine[] lines = layout.getLines();\n-            String description = \"centered: line \" + i + \" for \" + p;\n-            RectBounds expectedBounds = new RectBounds(CENTER - 0.5f * p.lineWidths.get(i), -ASCENT, CENTER + 0.5f * p.lineWidths.get(i), DESCENT);\n-            Point2D expectedLocation = new Point2D(CENTER - 0.5f * p.lineWidths.get(i), i * (ASCENT + DESCENT));\n+            for (int i = 0; i < p.lineCount(); i++) {\n+                TextLine line = layout.getLines()[i];\n+                String description = \"centered \" + contentType + \": line \" + i + \" for \" + p;\n+                RectBounds expectedBounds = new RectBounds(CENTER - 0.5f * p.lineWidths.get(i), -ASCENT, CENTER + 0.5f * p.lineWidths.get(i), DESCENT);\n+                Point2D expectedLocation = new Point2D(CENTER - 0.5f * p.lineWidths.get(i), i * (ASCENT + DESCENT));\n@@ -484,3 +525,3 @@\n-            assertEquals(expectedBounds, lines[i].getBounds(), description);\n-            assertEquals(expectedLocation, lines[i].getRuns()[0].getLocation(), description);\n-        }\n+                assertEquals(expectedBounds, line.getBounds(), description);\n+                assertEquals(expectedLocation, line.getRuns()[0].getLocation(), description);\n+            }\n@@ -488,1 +529,1 @@\n-        \/\/ RIGHT ALIGNMENT\n+            \/\/ RIGHT ALIGNMENT\n@@ -490,1 +531,1 @@\n-        layout.setAlignment(2);  \/\/ 2 == right\n+            layout.setAlignment(2);  \/\/ 2 == right\n@@ -492,1 +533,1 @@\n-        assertLineCount(p.lineCount());\n+            assertLineCount(p.lineCount());\n@@ -494,5 +535,5 @@\n-        for (int i = 0; i < p.lineCount(); i++) {\n-            TextLine[] lines = layout.getLines();\n-            String description = \"right aligned: line \" + i + \" for \" + p;\n-            RectBounds expectedBounds = new RectBounds(WRAP - p.lineWidths.get(i), -ASCENT, WRAP, DESCENT);\n-            Point2D expectedLocation = new Point2D(WRAP - p.lineWidths.get(i), i * (ASCENT + DESCENT));\n+            for (int i = 0; i < p.lineCount(); i++) {\n+                TextLine line = layout.getLines()[i];\n+                String description = \"right aligned \" + contentType + \": line \" + i + \" for \" + p;\n+                RectBounds expectedBounds = new RectBounds(WRAP - p.lineWidths.get(i), -ASCENT, WRAP, DESCENT);\n+                Point2D expectedLocation = new Point2D(WRAP - p.lineWidths.get(i), i * (ASCENT + DESCENT));\n@@ -500,3 +541,3 @@\n-            assertEquals(expectedBounds, lines[i].getBounds(), description);\n-            assertEquals(expectedLocation, lines[i].getRuns()[0].getLocation(), description);\n-        }\n+                assertEquals(expectedBounds, line.getBounds(), description);\n+                assertEquals(expectedLocation, line.getRuns()[0].getLocation(), description);\n+            }\n@@ -504,1 +545,1 @@\n-        \/\/ JUSTIFIED ALIGNMENT\n+            \/\/ JUSTIFIED ALIGNMENT\n@@ -506,1 +547,1 @@\n-        layout.setAlignment(3);  \/\/ 3 == justified\n+            layout.setAlignment(3);  \/\/ 3 == justified\n@@ -508,1 +549,1 @@\n-        assertLineCount(p.lineCount());\n+            assertLineCount(p.lineCount());\n@@ -510,6 +551,7 @@\n-        for (int i = 0; i < p.lineCount(); i++) {\n-            TextLine[] lines = layout.getLines();\n-            String description = \"justified: line \" + i + \" for \" + p;\n-            boolean lastLine = i == p.lineCount() - 1;\n-            RectBounds expectedBounds = new RectBounds(0, -ASCENT, lastLine ? p.lineWidths.get(i) : WRAP, DESCENT);\n-            Point2D expectedLocation = new Point2D(0, i * (ASCENT + DESCENT));\n+            for (int i = 0; i < p.lineCount(); i++) {\n+                TextLine line = layout.getLines()[i];\n+                String description = \"justified \" + contentType + \": line \" + i + \" for \" + p;\n+                GlyphList[] runs = line.getRuns();\n+                boolean lastLine = i == p.lineCount() - 1 || (runs[runs.length - 1] instanceof TextRun tr && tr.isLinebreak());\n+                RectBounds expectedBounds = new RectBounds(0, -ASCENT, lastLine ? p.lineWidths.get(i) : WRAP, DESCENT);\n+                Point2D expectedLocation = new Point2D(0, i * (ASCENT + DESCENT));\n@@ -517,2 +559,3 @@\n-            assertEquals(expectedBounds, lines[i].getBounds(), description);\n-            assertEquals(expectedLocation, lines[i].getRuns()[0].getLocation(), description);\n+                assertEquals(expectedBounds, line.getBounds(), description);\n+                assertEquals(expectedLocation, line.getRuns()[0].getLocation(), description);\n+            }\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/text\/TextLayoutTest.java","additions":101,"deletions":58,"binary":false,"changes":159,"status":"modified"}]}