{"files":[{"patch":"@@ -1351,1 +1351,1 @@\n-        float fullWidth = Math.max(wrapWidth, layoutWidth);\n+        float fullWidth = wrapWidth > 0 ? wrapWidth : layoutWidth;  \/\/ layoutWidth = widest line, wrapWidth is user set\n@@ -1368,1 +1368,1 @@\n-            float unusedWidth = wrapWidth - bounds.getWidth() + line.getTrailingSpaceWidth();\n+            float unusedWidth = fullWidth - bounds.getWidth() + line.getTrailingSpaceWidth();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismTextLayout.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import java.util.List;\n+\n@@ -33,0 +35,2 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n@@ -97,20 +101,0 @@\n-    private void assertLineLocations(Point2D... locations) {\n-        assertLineCount(locations.length);\n-\n-        TextLine[] lines = layout.getLines();\n-\n-        for (int i = 0; i < lines.length; i++) {\n-            assertEquals(locations[i], lines[i].getRuns()[0].getLocation(), \"line \" + i);\n-        }\n-    }\n-\n-    private void assertGlyphsPerRun(int... glyphCount) {\n-        GlyphList[] runs = layout.getRuns();\n-\n-        assertEquals(glyphCount.length, runs.length, \"number of glyph counts given does not match number of runs\");\n-\n-        for (int i = 0; i < runs.length; i++) {\n-            assertEquals(glyphCount[i], runs[i].getGlyphCount(), \"run \" + i);\n-        }\n-    }\n-\n@@ -322,2 +306,2 @@\n-    void shouldWrapIgnoringTrailingWhiteSpace() {\n-        layout.setWrapWidth(200);\n+    void shouldIgnoreAlignmentWhenWrappingIsDisabled() {\n+        layout.setContent(\"The quick brown fox jumps over the lazy dog\", font);\n@@ -325,1 +309,2 @@\n-        setContent(layout, \"The quick brown fox jumps over the lazy dog\", font);\n+        for (int i = 0; i < 3; i++) {\n+            layout.setAlignment(i);\n@@ -327,1 +312,4 @@\n-        layout.setAlignment(0);  \/\/ 0 == left\n+            assertLineCount(1);\n+            assertLineBounds(new RectBounds(0, -12, 309.6504f, 4.001953f));\n+        }\n+    }\n@@ -329,9 +317,31 @@\n-        assertGlyphsPerRun(26, 17);\n-        assertLineBounds(\n-            new RectBounds(0, -12, 187.23047f, 4.001953f),\n-            new RectBounds(0, -12, 122.41992f, 4.001953f)\n-        );\n-        assertLineLocations(\n-            new Point2D(0, 0),\n-            new Point2D(0, 16.001953f)\n-        );\n+    enum Case {\n+        SIMPLE(new Parameters(\n+            \"The quick brown fox jumps over the lazy dog\",\n+            Font.font(\"Monaco\", 12),\n+            200.0f, List.of(180.0293f, 122.41992f), List.of(7.20117f, 0.0f),\n+            12.0f, 4.001953f\n+        )),\n+        SIMPLE_WITH_EXTRA_TRAILING_SPACE(new Parameters(\n+            \"The quick brown fox jumps           over the lazy dog\",\n+            Font.font(\"Monaco\", 12),\n+            200.0f, List.of(180.0293f, 122.41992f), List.of(79.2129f, 0.0f),\n+            12.0f, 4.001953f\n+        )),\n+        COMPLEX(new Parameters(\n+            \"The quick brown लोमड़ी jumps over the lazy कुत्ता\",\n+            Font.font(\"Monaco\", 12),\n+            200.0f, List.of(189.89649f, 122.583984f), List.of(7.20117f, 0.0f),\n+            12.0f, 4.001953f\n+        )),\n+        COMPLEX_WITH_EXTRA_TRAILING_SPACE(new Parameters(\n+            \"The quick brown लोमड़ी jumps           over the lazy कुत्ता\",\n+            Font.font(\"Monaco\", 12),\n+            200.0f, List.of(189.89649f, 122.583984f), List.of(79.2129f, 0.0f),\n+            12.0f, 4.001953f\n+        ));\n+\n+        Parameters parameters;\n+\n+        Case(Parameters parameters) {\n+            this.parameters = parameters;\n+        }\n@@ -339,1 +349,30 @@\n-        layout.setAlignment(1);  \/\/ 1 == center\n+        record Parameters(String text, Font font, float wrapWidth, List<Float> lineWidths, List<Float> trailingWhiteSpaceWidths, float ascent, float descent) {\n+            Parameters {\n+                assert text != null;\n+                assert font != null;\n+                assert wrapWidth > 0;\n+                assert lineWidths != null;\n+                assert trailingWhiteSpaceWidths != null;\n+                assert ascent > 0;\n+                assert descent > 0;\n+                assert lineWidths.size() == trailingWhiteSpaceWidths.size();\n+            }\n+\n+            int lineCount() {\n+                return lineWidths.size();\n+            }\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(Case.class)\n+    void caseTest(Case c) {\n+        Case.Parameters p = c.parameters;\n+\n+        final float ASCENT = p.ascent;\n+        final float DESCENT = p.descent;\n+        final float WRAP = p.wrapWidth;\n+        final float CENTER = 0.5f * WRAP;\n+\n+        layout.setContent(p.text, FontHelper.getNativeFont(p.font));\n+        layout.setWrapWidth(p.wrapWidth);\n@@ -341,39 +380,1 @@\n-        assertGlyphsPerRun(26, 17);\n-        assertLineBounds(\n-            new RectBounds(9.985352f, -12, 197.21582f, 4.001953f),\n-            new RectBounds(38.79004f, -12, 161.20996f, 4.001953f)\n-        );\n-        assertLineLocations(\n-            new Point2D(9.985352f, 0),\n-            new Point2D(38.79004f, 16.001953f)\n-        );\n-\n-        layout.setAlignment(2);  \/\/ 2 == right\n-\n-        assertGlyphsPerRun(26, 17);\n-        assertLineBounds(\n-            new RectBounds(19.970703f, -12, 207.20117f, 4.001953f),\n-            new RectBounds(77.58008f, -12, 200.0f, 4.001953f)\n-        );\n-        assertLineLocations(\n-            new Point2D(19.970703f, 0),\n-            new Point2D(77.58008f, 16.001953f)\n-        );\n-\n-        layout.setAlignment(3);  \/\/ 3 == justify\n-\n-        assertGlyphsPerRun(26, 17);\n-        assertLineBounds(\n-            new RectBounds(0, -12, 200.0f, 4.001953f),\n-            new RectBounds(0, -12, 122.41992f, 4.001953f)\n-        );\n-        assertLineLocations(\n-            new Point2D(0, 0),\n-            new Point2D(0, 16.001953f)\n-        );\n-\n-        \/\/ Same tests with 10 additional spaces on the break point;\n-        \/\/ note how starting location of each line doesn't change for the same\n-        \/\/ alignment (but the bound width does) despite the different content:\n-\n-        setContent(layout, \"The quick brown fox jumps           over the lazy dog\", font);\n+        \/\/ LEFT ALIGNMENT\n@@ -383,9 +384,13 @@\n-        assertGlyphsPerRun(36, 17);\n-        assertLineBounds(\n-            new RectBounds(0, -12, 259.2422f, 4.001953f),\n-            new RectBounds(0, -12, 122.41992f, 4.001953f)\n-        );\n-        assertLineLocations(\n-            new Point2D(0, 0),\n-            new Point2D(0, 16.001953f)\n-        );\n+        assertLineCount(p.lineCount());\n+\n+        for (int i = 0; i < p.lineCount(); i++) {\n+            TextLine[] lines = layout.getLines();\n+            String description = \"left aligned: line \" + i + \" for \" + c.parameters;\n+            RectBounds expectedBounds = new RectBounds(0, -ASCENT, p.lineWidths.get(i) + p.trailingWhiteSpaceWidths.get(i), DESCENT);\n+            Point2D expectedLocation = new Point2D(0, i * (ASCENT + DESCENT));\n+\n+            assertEquals(expectedBounds, lines[i].getBounds(), description);\n+            assertEquals(expectedLocation, lines[i].getRuns()[0].getLocation(), description);\n+        }\n+\n+        \/\/ CENTER ALIGNMENT\n@@ -395,34 +400,1 @@\n-        assertGlyphsPerRun(36, 17);\n-        assertLineBounds(\n-            new RectBounds(9.985352f, -12, 269.22754f, 4.001953f),\n-            new RectBounds(38.79004f, -12, 161.20996f, 4.001953f)\n-        );\n-        assertLineLocations(\n-            new Point2D(9.985352f, 0),\n-            new Point2D(38.79004f, 16.001953f)\n-        );\n-\n-        layout.setAlignment(2);  \/\/ 2 == right\n-\n-        assertGlyphsPerRun(36, 17);\n-        assertLineBounds(\n-            new RectBounds(19.970703f, -12, 279.2129f, 4.001953f),\n-            new RectBounds(77.58008f, -12, 200.0f, 4.001953f)\n-        );\n-        assertLineLocations(\n-            new Point2D(19.970703f, 0),\n-            new Point2D(77.58008f, 16.001953f)\n-        );\n-\n-        layout.setAlignment(3);  \/\/ 3 == justify\n-\n-        assertGlyphsPerRun(36, 17);\n-        assertLineBounds(\n-            new RectBounds(0, -12, 259.2422f, 4.001953f),\n-            new RectBounds(0, -12, 122.41992f, 4.001953f)\n-        );\n-        assertLineLocations(\n-            new Point2D(0, 0),\n-            new Point2D(0, 16.001953f)\n-        );\n-    }\n+        assertLineCount(p.lineCount());\n@@ -430,3 +402,5 @@\n-    @Test\n-    void shouldWrapIgnoringTrailingWhiteSpaceComplex() {\n-        layout.setWrapWidth(200);\n+        for (int i = 0; i < p.lineCount(); i++) {\n+            TextLine[] lines = layout.getLines();\n+            String description = \"centered: line \" + i + \" for \" + p;\n+            RectBounds expectedBounds = new RectBounds(CENTER - 0.5f * p.lineWidths.get(i), -ASCENT, CENTER + 0.5f * p.lineWidths.get(i) + p.trailingWhiteSpaceWidths.get(i), DESCENT);\n+            Point2D expectedLocation = new Point2D(CENTER - 0.5f * p.lineWidths.get(i), i * (ASCENT + DESCENT));\n@@ -434,1 +408,3 @@\n-        setContent(layout, \"The quick brown लोमड़ी jumps over the lazy कुत्ता\", font);\n+            assertEquals(expectedBounds, lines[i].getBounds(), description);\n+            assertEquals(expectedLocation, lines[i].getRuns()[0].getLocation(), description);\n+        }\n@@ -436,1 +412,1 @@\n-        layout.setAlignment(0);  \/\/ 0 == left\n+        \/\/ RIGHT ALIGNMENT\n@@ -438,9 +414,1 @@\n-        assertGlyphsPerRun(16, 6, 6, 14, 4);\n-        assertLineBounds(\n-            new RectBounds(0, -12, 197.09766f, 4.001953f),\n-            new RectBounds(0, -12, 122.583984f, 4.001953f)\n-        );\n-        assertLineLocations(\n-            new Point2D(0, 0),\n-            new Point2D(0, 16.001953f)\n-        );\n+        layout.setAlignment(2);  \/\/ 2 == center\n@@ -448,1 +416,1 @@\n-        layout.setAlignment(1);  \/\/ 1 == center\n+        assertLineCount(p.lineCount());\n@@ -450,39 +418,5 @@\n-        assertGlyphsPerRun(16, 6, 6, 14, 4);\n-        assertLineBounds(\n-            new RectBounds(5.051758f, -12, 202.14941f, 4.001953f),\n-            new RectBounds(38.708008f, -12, 161.29199f, 4.001953f)\n-        );\n-        assertLineLocations(\n-            new Point2D(5.051758f, 0),\n-            new Point2D(38.708008f, 16.001953f)\n-        );\n-\n-        layout.setAlignment(2);  \/\/ 2 == right\n-\n-        assertGlyphsPerRun(16, 6, 6, 14, 4);\n-        assertLineBounds(\n-            new RectBounds(10.103516f, -12, 207.20117f, 4.001953f),\n-            new RectBounds(77.416016f, -12, 200.0f, 4.001953f)\n-        );\n-        assertLineLocations(\n-            new Point2D(10.103516f, 0),\n-            new Point2D(77.416016f, 16.001953f)\n-        );\n-\n-        layout.setAlignment(3);  \/\/ 3 == justify\n-\n-        assertGlyphsPerRun(16, 6, 6, 14, 4);\n-        assertLineBounds(\n-            new RectBounds(0, -12, 200.0f, 4.001953f),\n-            new RectBounds(0, -12, 122.583984f, 4.001953f)\n-        );\n-        assertLineLocations(\n-            new Point2D(0, 0),\n-            new Point2D(0, 16.001953f)\n-        );\n-\n-        \/\/ Same tests with 10 additional spaces on the break point;\n-        \/\/ note how starting location of each line doesn't change for the same\n-        \/\/ alignment (but the bound width does) despite the different content:\n-\n-        setContent(layout, \"The quick brown लोमड़ी jumps           over the lazy कुत्ता\", font);\n+        for (int i = 0; i < p.lineCount(); i++) {\n+            TextLine[] lines = layout.getLines();\n+            String description = \"right aligned: line \" + i + \" for \" + p;\n+            RectBounds expectedBounds = new RectBounds(WRAP - p.lineWidths.get(i), -ASCENT, WRAP + p.trailingWhiteSpaceWidths.get(i), DESCENT);\n+            Point2D expectedLocation = new Point2D(WRAP - p.lineWidths.get(i), i * (ASCENT + DESCENT));\n@@ -490,1 +424,3 @@\n-        layout.setAlignment(0);  \/\/ 0 == left\n+            assertEquals(expectedBounds, lines[i].getBounds(), description);\n+            assertEquals(expectedLocation, lines[i].getRuns()[0].getLocation(), description);\n+        }\n@@ -492,9 +428,1 @@\n-        assertGlyphsPerRun(16, 6, 16, 14, 4);\n-        assertLineBounds(\n-            new RectBounds(0, -12, 269.10938f, 4.001953f),\n-            new RectBounds(0, -12, 122.583984f, 4.001953f)\n-        );\n-        assertLineLocations(\n-            new Point2D(0, 0),\n-            new Point2D(0, 16.001953f)\n-        );\n+        \/\/ JUSTIFIED ALIGNMENT\n@@ -502,1 +430,3 @@\n-        layout.setAlignment(1);  \/\/ 1 == center\n+        layout.setAlignment(3);  \/\/ 3 == justified\n+\n+        assertLineCount(p.lineCount());\n@@ -504,33 +434,10 @@\n-        assertGlyphsPerRun(16, 6, 16, 14, 4);\n-        assertLineBounds(\n-            new RectBounds(5.051758f, -12, 274.16113f, 4.001953f),\n-            new RectBounds(38.708008f, -12, 161.29199f, 4.001953f)\n-        );\n-        assertLineLocations(\n-            new Point2D(5.051758f, 0),\n-            new Point2D(38.708008f, 16.001953f)\n-        );\n-\n-        layout.setAlignment(2);  \/\/ 2 == right\n-\n-        assertGlyphsPerRun(16, 6, 16, 14, 4);\n-        assertLineBounds(\n-            new RectBounds(10.103516f, -12, 279.2129f, 4.001953f),\n-            new RectBounds(77.416016f, -12, 200.0f, 4.001953f)\n-        );\n-        assertLineLocations(\n-            new Point2D(10.103516f, 0),\n-            new Point2D(77.416016f, 16.001953f)\n-        );\n-\n-        layout.setAlignment(3);  \/\/ 3 == justify\n-\n-        assertGlyphsPerRun(16, 6, 16, 14, 4);\n-        assertLineBounds(\n-            new RectBounds(0, -12, 269.10938f, 4.001953f),\n-            new RectBounds(0, -12, 122.583984f, 4.001953f)\n-        );\n-        assertLineLocations(\n-            new Point2D(0, 0),\n-            new Point2D(0, 16.001953f)\n-        );\n+        for (int i = 0; i < p.lineCount(); i++) {\n+            TextLine[] lines = layout.getLines();\n+            String description = \"justified: line \" + i + \" for \" + p;\n+            boolean lastLine = i == p.lineCount() - 1;\n+            RectBounds expectedBounds = new RectBounds(0, -ASCENT, lastLine ? p.lineWidths.get(i) : WRAP, DESCENT);\n+            Point2D expectedLocation = new Point2D(0, i * (ASCENT + DESCENT));\n+\n+            assertEquals(expectedBounds, lines[i].getBounds(), description);\n+            assertEquals(expectedLocation, lines[i].getRuns()[0].getLocation(), description);\n+        }\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/text\/TextLayoutTest.java","additions":121,"deletions":214,"binary":false,"changes":335,"status":"modified"}]}