{"files":[{"patch":"@@ -457,1 +457,1 @@\n-                    for (TextRun r: lines[i].runs) {\n+                    for (TextRun r: lines[i].getRuns()) {\n@@ -762,1 +762,1 @@\n-                for (TextRun r : lines[index].runs) {\n+                for (TextRun r : lines[index].getRuns()) {\n@@ -1014,2 +1014,2 @@\n-         * Subtract the width of trailing spaces for the new TextLine so they're not taken into account\n-         * for alignment calculations:\n+         * Calculate the width of trailing spaces for the new TextLine so they're\n+         * can be excluded when doing later alignment calculations:\n@@ -1017,2 +1017,1 @@\n-\n-        width -= computeTrailingSpaceWidth(startOffset, length, lineRuns);\n+        float trailingSpaceWidth = computeTrailingSpaceWidth(startOffset, length, lineRuns);\n@@ -1022,1 +1021,1 @@\n-                            width, ascent, descent, leading);\n+                            width, ascent, descent, leading, trailingSpaceWidth);\n@@ -1025,1 +1024,17 @@\n-    private float computeTrailingSpaceWidth(int startOffset, int length, TextRun[] lineRuns) {\n+    \/**\n+     * Computes the size of the white space trailing a given line defined by the start offset and length.\n+     *\n+     * <p>Note: textRuns is split in such a way that it matches the line, so the last text run's last\n+     * character is the point of a line break.\n+     *\n+     * @param startOffset the character offset of the start of a line in the text\n+     * @param length the length of the line\n+     * @param textRuns the text runs the line consists off\n+     * @return the X size of the white space trailing the line\n+     *\/\n+    private float computeTrailingSpaceWidth(int startOffset, int length, TextRun[] textRuns) {\n+        int run = textRuns.length;\n+        TextRun textRun = textRuns[--run];\n+        int textOffset = startOffset + length;\n+        int runOffset = textRun.getLength();\n+        float trailingSpaceWidth = 0;\n@@ -1027,1 +1042,0 @@\n-        int trailingSpaces = 0;\n@@ -1029,3 +1043,4 @@\n-        for (int i = length + startOffset - 1; i >= startOffset; i--) {\n-            if (chars[i] != ' ') {\n-                break;\n+        while (--textOffset >= startOffset && Character.isWhitespace(chars[textOffset])) {\n+            while (runOffset < 0) {  \/\/ just in case the trailing white spaces are split over multiple runs (unsure if this can ever happen)\n+                textRun = textRuns[--run];\n+                runOffset = textRun.getLength();\n@@ -1034,23 +1049,1 @@\n-            trailingSpaces++;\n-        }\n-\n-        float trailingSpaceWidth = 0;\n-\n-        if (trailingSpaces > 0) {\n-            int lineRunCount = lineRuns.length;\n-\n-            for (int j = 0; j < lineRunCount; j++) {\n-                TextRun textRun = lineRuns[j];\n-                int runStart = textRun.getStart();\n-                int runEnd = textRun.getEnd();\n-\n-                for (int k = runStart; k < runEnd; k++) {\n-                    if (Character.isWhitespace(chars[k])) {\n-                        trailingSpaceWidth += textRun.positions[k];\n-\n-                        if (--trailingSpaces == 0) {\n-                            return trailingSpaceWidth;\n-                        }\n-                    }\n-                }\n-            }\n+            trailingSpaceWidth += textRun.getAdvance(--runOffset);\n@@ -1370,1 +1363,2 @@\n-            float lineX = (fullWidth - bounds.getWidth()) * align;\n+            float unusedWidth = wrapWidth - bounds.getWidth() + line.getTrailingSpaceWidth();\n+            float lineX = unusedWidth * align;\n@@ -1388,1 +1382,1 @@\n-                        float inc = (fullWidth - bounds.getWidth()) \/ wsCount;\n+                        float inc = unusedWidth \/ wsCount;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismTextLayout.java","additions":31,"deletions":37,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -31,5 +31,8 @@\n-    TextRun[] runs;\n-    RectBounds bounds;\n-    float lsb, rsb, leading;\n-    int start;\n-    int length;\n+    private final TextRun[] runs;\n+    private final RectBounds bounds;\n+    private final int start;\n+    private final int length;\n+    private final float leading;\n+    private final float trailingSpaceWidth;\n+\n+    private float lsb, rsb;\n@@ -38,1 +41,1 @@\n-                    float width, float ascent, float descent, float leading) {\n+                    float width, float ascent, float descent, float leading, float trailingSpaceWidth) {\n@@ -44,0 +47,1 @@\n+        this.trailingSpaceWidth = trailingSpaceWidth;\n@@ -70,0 +74,4 @@\n+    public float getTrailingSpaceWidth() {\n+        return trailingSpaceWidth;\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/TextLine.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"}]}