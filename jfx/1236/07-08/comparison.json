{"files":[{"patch":"@@ -1368,1 +1368,1 @@\n-            float unusedWidth = fullWidth - bounds.getWidth() + line.getTrailingSpaceWidth();\n+            float unusedWidth = fullWidth - bounds.getWidth() + (wrapWidth > 0 ? line.getTrailingSpaceWidth() : 0);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismTextLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.Arrays;\n@@ -318,0 +319,39 @@\n+\n+        \/**\n+         * Checks that alignment variations have no effect when not wrapping.\n+         *\/\n+        NO_WRAP(new Parameters(\n+            \"The quick brown fox jumps over the lazy dog\",\n+            Font.font(\"Monaco\", 12),\n+            0.0f, List.of(309.6504f), List.of(0.0f),\n+            12.0f, 4.001953f\n+        )),\n+\n+        \/**\n+         * Checks that the individual lines of hard wrapped text are still\n+         * taking alignment into account (in this specific case, the first\n+         * line, which is the widest line, will not be aligned, but the 2nd\n+         * line will be aligned as it is less wide).\n+         *\/\n+        HARD_WRAP(new Parameters(\n+            \"The quick brown fox jumps\\nover the lazy dog\",\n+            Font.font(\"Monaco\", 12),\n+            0.0f, List.of(180.0293f, 122.41992f), List.of(0.0f, 0.0f),\n+            12.0f, 4.001953f\n+        )),\n+\n+        \/**\n+         * Checks that trailing white space is NOT ignored when wrapping\n+         * is not enabled.\n+         *\/\n+        HARD_WRAP_WITH_EXTRA_TRAILING_SPACE(new Parameters(\n+            \"The quick brown fox jumps           \\nover the lazy dog           \",\n+            Font.font(\"Monaco\", 12),\n+            0.0f, List.of(180.0293f + 79.2129f, 122.41992f + 79.2129f), List.of(0.0f, 0.0f),\n+            12.0f, 4.001953f\n+        )),\n+\n+        \/**\n+         * Checks that single trailing white spaces are ignored for alignment\n+         * purposes when wrapping is enabled in simple text.\n+         *\/\n@@ -324,0 +364,5 @@\n+\n+        \/**\n+         * Checks that multiple trailing white spaces are ignored for alignment\n+         * purposes when wrapping is enabled in simple text.\n+         *\/\n@@ -330,0 +375,5 @@\n+\n+        \/**\n+         * Checks that single trailing white spaces are ignored for alignment\n+         * purposes when wrapping is enabled in complex text.\n+         *\/\n@@ -336,0 +386,5 @@\n+\n+        \/**\n+         * Checks that multiple trailing white spaces are ignored for alignment\n+         * purposes when wrapping is enabled in complex text.\n+         *\/\n@@ -353,1 +408,1 @@\n-                assert wrapWidth > 0;\n+                assert wrapWidth >= 0;\n@@ -358,0 +413,1 @@\n+                assert lineWidths.size() > 0;\n@@ -364,0 +420,4 @@\n+\n+            float maxWidth() {\n+                return lineWidths.stream().max(Float::compareTo).orElseThrow();\n+            }\n@@ -374,1 +434,1 @@\n-        final float WRAP = p.wrapWidth;\n+        final float WRAP = p.wrapWidth == 0 ? p.maxWidth() : p.wrapWidth;\n@@ -377,1 +437,2 @@\n-        layout.setContent(p.text, FontHelper.getNativeFont(p.font));\n+        \/\/ split content on line feeds (without removing the line feeds):\n+        layout.setContent(Arrays.stream(p.text.split(\"(?<=\\n)\")).map(text -> new TestSpan(text, FontHelper.getNativeFont(p.font))).toArray(TextSpan[]::new));\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/text\/TextLayoutTest.java","additions":64,"deletions":3,"binary":false,"changes":67,"status":"modified"}]}