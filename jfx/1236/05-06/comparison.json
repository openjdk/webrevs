{"files":[{"patch":"@@ -996,0 +996,3 @@\n+\n+        assert count > 0 : \"number of TextRuns in a TextLine cannot be less than one: \" + count;\n+\n@@ -1014,1 +1017,1 @@\n-         * Calculate the width of trailing spaces for the new TextLine so they're\n+         * Calculate the width of trailing spaces for the new TextLine so they\n@@ -1017,1 +1020,1 @@\n-        float trailingSpaceWidth = computeTrailingSpaceWidth(startOffset, length, lineRuns);\n+        float trailingSpaceWidth = computeTrailingSpaceWidth(lineRuns);\n@@ -1030,2 +1033,0 @@\n-     * @param startOffset the character offset of the start of a line in the text\n-     * @param length the length of the line\n@@ -1035,5 +1036,2 @@\n-    private float computeTrailingSpaceWidth(int startOffset, int length, TextRun[] textRuns) {\n-        int run = textRuns.length;\n-        TextRun textRun = textRuns[--run];\n-        int textOffset = startOffset + length;\n-        int runOffset = textRun.getLength();\n+    private float computeTrailingSpaceWidth(TextRun[] textRuns) {\n+        TextRun textRun = textRuns[textRuns.length - 1];\n@@ -1043,4 +1041,11 @@\n-        while (--textOffset >= startOffset && Character.isWhitespace(chars[textOffset])) {\n-            while (runOffset < 0) {  \/\/ just in case the trailing white spaces are split over multiple runs (unsure if this can ever happen)\n-                textRun = textRuns[--run];\n-                runOffset = textRun.getLength();\n+        \/*\n+         * As the loop below exits when encountering a non-white space character,\n+         * testing each trailing glyph in turn for white space is safe, as white\n+         * space is always represented with only a single glyph:\n+         *\/\n+\n+        for (int i = textRun.getGlyphCount() - 1; i >= 0; i--) {\n+            int textOffset = textRun.getStart() + textRun.getCharOffset(i);\n+\n+            if (!Character.isWhitespace(chars[textOffset])) {\n+                break;\n@@ -1049,1 +1054,1 @@\n-            trailingSpaceWidth += textRun.getAdvance(--runOffset);\n+            trailingSpaceWidth += textRun.getAdvance(i);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/text\/PrismTextLayout.java","additions":19,"deletions":14,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-    @Disabled\n+    @Disabled(\"JDK-8087615\")\n@@ -322,1 +322,1 @@\n-    void shouldWrap() {\n+    void shouldWrapIgnoringTrailingWhiteSpace() {\n@@ -430,0 +430,108 @@\n+    @Test\n+    void shouldWrapIgnoringTrailingWhiteSpaceComplex() {\n+        layout.setWrapWidth(200);\n+\n+        setContent(layout, \"The quick brown लोमड़ी jumps over the lazy कुत्ता\", font);\n+\n+        layout.setAlignment(0);  \/\/ 0 == left\n+\n+        assertGlyphsPerRun(16, 6, 6, 14, 4);\n+        assertLineBounds(\n+            new RectBounds(0, -12, 197.09766f, 4.001953f),\n+            new RectBounds(0, -12, 122.583984f, 4.001953f)\n+        );\n+        assertLineLocations(\n+            new Point2D(0, 0),\n+            new Point2D(0, 16.001953f)\n+        );\n+\n+        layout.setAlignment(1);  \/\/ 1 == center\n+\n+        assertGlyphsPerRun(16, 6, 6, 14, 4);\n+        assertLineBounds(\n+            new RectBounds(5.051758f, -12, 202.14941f, 4.001953f),\n+            new RectBounds(38.708008f, -12, 161.29199f, 4.001953f)\n+        );\n+        assertLineLocations(\n+            new Point2D(5.051758f, 0),\n+            new Point2D(38.708008f, 16.001953f)\n+        );\n+\n+        layout.setAlignment(2);  \/\/ 2 == right\n+\n+        assertGlyphsPerRun(16, 6, 6, 14, 4);\n+        assertLineBounds(\n+            new RectBounds(10.103516f, -12, 207.20117f, 4.001953f),\n+            new RectBounds(77.416016f, -12, 200.0f, 4.001953f)\n+        );\n+        assertLineLocations(\n+            new Point2D(10.103516f, 0),\n+            new Point2D(77.416016f, 16.001953f)\n+        );\n+\n+        layout.setAlignment(3);  \/\/ 3 == justify\n+\n+        assertGlyphsPerRun(16, 6, 6, 14, 4);\n+        assertLineBounds(\n+            new RectBounds(0, -12, 200.0f, 4.001953f),\n+            new RectBounds(0, -12, 122.583984f, 4.001953f)\n+        );\n+        assertLineLocations(\n+            new Point2D(0, 0),\n+            new Point2D(0, 16.001953f)\n+        );\n+\n+        \/\/ Same tests with 10 additional spaces on the break point;\n+        \/\/ note how starting location of each line doesn't change for the same\n+        \/\/ alignment (but the bound width does) despite the different content:\n+\n+        setContent(layout, \"The quick brown लोमड़ी jumps           over the lazy कुत्ता\", font);\n+\n+        layout.setAlignment(0);  \/\/ 0 == left\n+\n+        assertGlyphsPerRun(16, 6, 16, 14, 4);\n+        assertLineBounds(\n+            new RectBounds(0, -12, 269.10938f, 4.001953f),\n+            new RectBounds(0, -12, 122.583984f, 4.001953f)\n+        );\n+        assertLineLocations(\n+            new Point2D(0, 0),\n+            new Point2D(0, 16.001953f)\n+        );\n+\n+        layout.setAlignment(1);  \/\/ 1 == center\n+\n+        assertGlyphsPerRun(16, 6, 16, 14, 4);\n+        assertLineBounds(\n+            new RectBounds(5.051758f, -12, 274.16113f, 4.001953f),\n+            new RectBounds(38.708008f, -12, 161.29199f, 4.001953f)\n+        );\n+        assertLineLocations(\n+            new Point2D(5.051758f, 0),\n+            new Point2D(38.708008f, 16.001953f)\n+        );\n+\n+        layout.setAlignment(2);  \/\/ 2 == right\n+\n+        assertGlyphsPerRun(16, 6, 16, 14, 4);\n+        assertLineBounds(\n+            new RectBounds(10.103516f, -12, 279.2129f, 4.001953f),\n+            new RectBounds(77.416016f, -12, 200.0f, 4.001953f)\n+        );\n+        assertLineLocations(\n+            new Point2D(10.103516f, 0),\n+            new Point2D(77.416016f, 16.001953f)\n+        );\n+\n+        layout.setAlignment(3);  \/\/ 3 == justify\n+\n+        assertGlyphsPerRun(16, 6, 16, 14, 4);\n+        assertLineBounds(\n+            new RectBounds(0, -12, 269.10938f, 4.001953f),\n+            new RectBounds(0, -12, 122.583984f, 4.001953f)\n+        );\n+        assertLineLocations(\n+            new Point2D(0, 0),\n+            new Point2D(0, 16.001953f)\n+        );\n+    }\n","filename":"tests\/system\/src\/test\/java\/test\/com\/sun\/javafx\/text\/TextLayoutTest.java","additions":110,"deletions":2,"binary":false,"changes":112,"status":"modified"}]}