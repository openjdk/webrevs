{"files":[{"patch":"@@ -88,0 +88,1 @@\n+        textArea.setUndoRedoEnabled(false);\n@@ -91,1 +92,1 @@\n-        textArea.clearUndoRedo();\n+        textArea.setUndoRedoEnabled(true);\n","filename":"apps\/samples\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/UsageExamples.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -101,0 +101,1 @@\n+ *   textArea.setUndoRedoEnabled(false);\n@@ -104,1 +105,1 @@\n- *   textArea.clearUndoRedo();\n+ *   textArea.setUndoRedoEnabled(true);\n@@ -793,0 +794,26 @@\n+    \/**\n+     * Indicates whether undo\/redo functionality is enabled in the model.\n+     * Returns {@code false} if the model is {@code null}.\n+     * @return true if undo\/redo functionality is enabled in the model\n+     * @since 26\n+     *\/\n+    public final boolean isUndoRedoEnabled() {\n+        StyledTextModel m = getModel();\n+        return (m == null ? false : m.isUndoRedoEnabled());\n+    }\n+\n+    \/**\n+     * Controls whether undo\/redo functionality is enabled in the model.\n+     * Setting the value to {@code false} clears existing undo\/redo entries.\n+     * This method does nothing if the model is {@code null}.\n+     * @param on true to enable undo\/redo\n+     * @since 26\n+     * @see #clearUndoRedo()\n+     *\/\n+    public final void setUndoRedoEnabled(boolean on) {\n+        StyledTextModel m = getModel();\n+        if (m != null) {\n+            m.setUndoRedoEnabled(on);\n+        }\n+    }\n+\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/RichTextArea.java","additions":28,"deletions":1,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -296,0 +296,1 @@\n+    private boolean undoRedoEnabled = true;\n@@ -665,1 +666,1 @@\n-        return replace(resolver, start, end, input, true);\n+        return replace(resolver, start, end, input, isUndoRedoEnabled());\n@@ -781,1 +782,2 @@\n-        UndoableChange ch = UndoableChange.create(this, evStart, evEnd);\n+        boolean allowUndo = isUndoRedoEnabled();\n+        UndoableChange ch = allowUndo ? UndoableChange.create(this, evStart, evEnd) : null;\n@@ -810,1 +812,3 @@\n-            add(ch, end);\n+            if (allowUndo) {\n+                add(ch, end);\n+            }\n@@ -835,0 +839,23 @@\n+    \/**\n+     * Indicates whether undo\/redo functionality is enabled.\n+     * @return true if undo\/redo functionality is enabled\n+     * @since 26\n+     *\/\n+    public final boolean isUndoRedoEnabled() {\n+        return undoRedoEnabled;\n+    }\n+\n+    \/**\n+     * Controls whether undo\/redo functionality is enabled.\n+     * Setting the value to {@code false} clears existing undo\/redo entries.\n+     * @param on true to enable undo\/redo\n+     * @see #clearUndoRedo()\n+     * @since 26\n+     *\/\n+    public final void setUndoRedoEnabled(boolean on) {\n+        undoRedoEnabled = on;\n+        if (!on) {\n+            clearUndoRedo();\n+        }\n+    }\n+\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/model\/StyledTextModel.java","additions":30,"deletions":3,"binary":false,"changes":33,"status":"modified"}]}