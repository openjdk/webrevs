{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates.\n@@ -69,1 +69,1 @@\n-        replace(null, TextPos.ZERO, TextPos.ZERO, text, false);\n+        replace(null, TextPos.ZERO, TextPos.ZERO, text);\n","filename":"apps\/samples\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/CodeCellTextModel.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates.\n@@ -67,1 +67,1 @@\n-        replace(null, TextPos.ZERO, TextPos.ZERO, text, false);\n+        replace(null, TextPos.ZERO, TextPos.ZERO, text);\n","filename":"apps\/samples\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/notebook\/TextCellTextModel.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -228,1 +228,1 @@\n-        m.replace(null, p, p, StyledInput.of(text, style), false);\n+        m.replace(null, p, p, StyledInput.of(text, style));\n","filename":"apps\/samples\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/ModelChoice.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates.\n@@ -88,0 +88,1 @@\n+        textArea.setUndoRedoEnabled(false);\n@@ -91,0 +92,1 @@\n+        textArea.setUndoRedoEnabled(true);\n","filename":"apps\/samples\/RichTextAreaDemo\/src\/com\/oracle\/demo\/richtext\/rta\/UsageExamples.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -292,1 +292,1 @@\n-                TextPos p = m.replace(vflow, start, end, typed, true);\n+                TextPos p = m.replace(vflow, start, end, typed);\n@@ -351,1 +351,1 @@\n-            TextPos pos = m.replace(vflow, start, end, StyledInput.of(\"\\n\"), true);\n+            TextPos pos = m.replace(vflow, start, end, StyledInput.of(\"\\n\"));\n@@ -939,1 +939,1 @@\n-                control.getModel().replace(vflow, start, p, StyledInput.EMPTY, true);\n+                control.getModel().replace(vflow, start, p, StyledInput.EMPTY);\n@@ -955,1 +955,1 @@\n-                    control.getModel().replace(vflow, start, end, StyledInput.EMPTY, true);\n+                    control.getModel().replace(vflow, start, end, StyledInput.EMPTY);\n@@ -981,1 +981,1 @@\n-                control.getModel().replace(vflow, p0, p1, StyledInput.EMPTY, true);\n+                control.getModel().replace(vflow, p0, p1, StyledInput.EMPTY);\n@@ -998,1 +998,1 @@\n-            control.getModel().replace(vflow, start, end, StyledInput.EMPTY, true);\n+            control.getModel().replace(vflow, start, end, StyledInput.EMPTY);\n@@ -1185,1 +1185,1 @@\n-                TextPos p = m.replace(vflow, start, end, in, true);\n+                TextPos p = m.replace(vflow, start, end, in);\n@@ -1587,1 +1587,1 @@\n-                    p = control.replaceText(caret, p, \"\", true);\n+                    p = control.replaceText(caret, p, \"\");\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/RichTextAreaBehavior.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.jfx.incubator.scene.control.richtext;\n+\n+import com.sun.javafx.util.Utils;\n+import jfx.incubator.scene.control.richtext.StyleResolver;\n+import jfx.incubator.scene.control.richtext.TextPos;\n+import jfx.incubator.scene.control.richtext.model.StyledInput;\n+import jfx.incubator.scene.control.richtext.model.StyledTextModel;\n+\n+\/**\n+ * Provides access to internal methods in StyledTextModel.\n+ *\/\n+public class StyledTextModelHelper {\n+    public interface Accessor {\n+        public TextPos replace(StyledTextModel m, StyleResolver r, TextPos start, TextPos end, StyledInput in, boolean allowUndo);\n+    }\n+\n+    static {\n+        Utils.forceInit(StyledTextModel.class);\n+    }\n+\n+    private static Accessor accessor;\n+\n+    public static void setAccessor(Accessor a) {\n+        if (accessor != null) {\n+            throw new IllegalStateException();\n+        }\n+        accessor = a;\n+    }\n+\n+    public static TextPos replace(StyledTextModel m, StyleResolver r, TextPos start, TextPos end, StyledInput in, boolean allowUndo) {\n+        return accessor.replace(m, r, start, end, in, allowUndo);\n+    }\n+}\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/StyledTextModelHelper.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,1 +105,1 @@\n-        model.replace(resolver, start, endAfter, in, false);\n+        StyledTextModelHelper.replace(model, resolver, start, endAfter, in, false);\n@@ -110,1 +110,1 @@\n-        model.replace(resolver, start, endBefore, in, false);\n+        StyledTextModelHelper.replace(model, resolver, start, endBefore, in, false);\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/com\/sun\/jfx\/incubator\/scene\/control\/richtext\/UndoableChange.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -446,1 +446,1 @@\n-        getModel().replace(null, TextPos.ZERO, end, text, true);\n+        getModel().replace(null, TextPos.ZERO, end, text);\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/CodeArea.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,3 +102,5 @@\n- *   textArea.appendText(\"RichTextArea\\n\", heading);\n- *   textArea.appendText(\"Example:\\nText is \", StyleAttributeMap.EMPTY);\n- *   textArea.appendText(\"monospaced.\\n\", mono);\n+ *   textArea.setUndoRedoEnabled(false);\n+ *   textArea.appendText(\"RichTextArea\\n\", heading, false);\n+ *   textArea.appendText(\"Example:\\nText is \", StyleAttributeMap.EMPTY, false);\n+ *   textArea.appendText(\"monospaced.\\n\", mono, false);\n+ *   textArea.setUndoRedoEnabled(true);\n@@ -801,0 +803,26 @@\n+    \/**\n+     * Indicates whether undo\/redo functionality is enabled in the model.\n+     * Returns {@code false} if the model is {@code null}.\n+     * @return true if undo\/redo functionality is enabled in the model\n+     * @since 26\n+     *\/\n+    public final boolean isUndoRedoEnabled() {\n+        StyledTextModel m = getModel();\n+        return (m == null ? false : m.isUndoRedoEnabled());\n+    }\n+\n+    \/**\n+     * Controls whether undo\/redo functionality is enabled in the model.\n+     * Setting the value to {@code false} clears existing undo\/redo entries.\n+     * This method does nothing if the model is {@code null}.\n+     * @param on true to enable undo\/redo\n+     * @since 26\n+     * @see #clearUndoRedo()\n+     *\/\n+    public final void setUndoRedoEnabled(boolean on) {\n+        StyledTextModel m = getModel();\n+        if (m != null) {\n+            m.setUndoRedoEnabled(on);\n+        }\n+    }\n+\n@@ -1077,1 +1105,1 @@\n-     * {@code appendText(text, StyleAttributeMap.EMPTY);}\n+     * {@code appendText(text, StyleAttributeMap.EMPTY, true);}\n@@ -1135,1 +1163,1 @@\n-     * Clears the document, creating an undo entry.\n+     * Clears the document.\n@@ -1142,1 +1170,1 @@\n-        replaceText(TextPos.ZERO, end, StyledInput.EMPTY, true);\n+        replaceText(TextPos.ZERO, end, StyledInput.EMPTY);\n@@ -1558,1 +1586,1 @@\n-        return replaceText(pos, pos, in, true);\n+        return replaceText(pos, pos, in);\n@@ -1571,1 +1599,1 @@\n-        return replaceText(pos, pos, in, true);\n+        return replaceText(pos, pos, in);\n@@ -1900,1 +1928,0 @@\n-     * @param allowUndo when true, creates an undo-redo entry\n@@ -1905,1 +1932,1 @@\n-    public final TextPos replaceText(TextPos start, TextPos end, String text, boolean allowUndo) {\n+    public final TextPos replaceText(TextPos start, TextPos end, String text) {\n@@ -1907,1 +1934,1 @@\n-        return m.replace(vflow(), start, end, text, allowUndo);\n+        return m.replace(vflow(), start, end, text);\n@@ -1916,1 +1943,0 @@\n-     * @param createUndo when true, creates an undo-redo entry\n@@ -1921,1 +1947,1 @@\n-    public final TextPos replaceText(TextPos start, TextPos end, StyledInput in, boolean createUndo) {\n+    public final TextPos replaceText(TextPos start, TextPos end, StyledInput in) {\n@@ -1923,1 +1949,1 @@\n-        return m.replace(vflow(), start, end, in, createUndo);\n+        return m.replace(vflow(), start, end, in);\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/RichTextArea.java","additions":40,"deletions":14,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,1 +126,1 @@\n-     * This is a convenience shortcut for {@link #replace(StyleResolver, TextPos, TextPos, String, boolean)}.\n+     * This is a convenience shortcut for {@link #replace(StyleResolver, TextPos, TextPos, String)}.\n@@ -134,1 +134,1 @@\n-        replace(null, p, p, text, false);\n+        replace(null, p, p, text);\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/model\/BasicTextModel.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+import com.sun.jfx.incubator.scene.control.richtext.StyledTextModelHelper;\n@@ -71,2 +72,2 @@\n- * {@link #replace(StyleResolver, TextPos, TextPos, String, boolean)},\n- * {@link #replace(StyleResolver, TextPos, TextPos, StyledInput, boolean)},\n+ * {@link #replace(StyleResolver, TextPos, TextPos, String)},\n+ * {@link #replace(StyleResolver, TextPos, TextPos, StyledInput)},\n@@ -252,2 +253,2 @@\n-     * {@link #replace(StyleResolver, TextPos, TextPos, StyledInput, boolean)}, and\n-     * {@link #replace(StyleResolver, TextPos, TextPos, String, boolean)}.\n+     * {@link #replace(StyleResolver, TextPos, TextPos, StyledInput)}, and\n+     * {@link #replace(StyleResolver, TextPos, TextPos, String)}.\n@@ -282,1 +283,4 @@\n-    static { ModuleUtil.incubatorWarning(); }\n+    static {\n+        ModuleUtil.incubatorWarning();\n+        initAccessor();\n+    }\n@@ -292,0 +296,1 @@\n+    private boolean undoRedoEnabled = true;\n@@ -304,0 +309,9 @@\n+    private static void initAccessor() {\n+        StyledTextModelHelper.setAccessor(new StyledTextModelHelper.Accessor() {\n+            @Override\n+            public TextPos replace(StyledTextModel m, StyleResolver r, TextPos start, TextPos end, StyledInput in, boolean allowUndo) {\n+                return m.replace(r, start, end, in, allowUndo);\n+            }\n+        });\n+    }\n+\n@@ -619,0 +633,2 @@\n+     * It creates an undo\/redo entry if\n+     * {@link #isUndoRedoEnabled()} returns {@code true}.\n@@ -624,1 +640,0 @@\n-     * @param allowUndo when true, creates an undo-redo entry\n@@ -628,1 +643,1 @@\n-    public final TextPos replace(StyleResolver resolver, TextPos start, TextPos end, String text, boolean allowUndo) {\n+    public final TextPos replace(StyleResolver resolver, TextPos start, TextPos end, String text) {\n@@ -634,1 +649,1 @@\n-        return replace(resolver, start, end, in, allowUndo);\n+        return replace(resolver, start, end, in);\n@@ -643,0 +658,1 @@\n+     * It creates an undo\/redo entry if {@link #isUndoRedoEnabled()} returns {@code true}.\n@@ -648,1 +664,0 @@\n-     * @param allowUndo when true, creates an undo-redo entry\n@@ -652,1 +667,6 @@\n-    public final TextPos replace(StyleResolver resolver, TextPos start, TextPos end, StyledInput input, boolean allowUndo) {\n+    public final TextPos replace(StyleResolver resolver, TextPos start, TextPos end, StyledInput input) {\n+        return replace(resolver, start, end, input, isUndoRedoEnabled());\n+    }\n+\n+    \/\/ only UndoableChange is allowed to disable undo\/redo records\n+    private final TextPos replace(StyleResolver resolver, TextPos start, TextPos end, StyledInput input, boolean allowUndo) {\n@@ -727,1 +747,4 @@\n-     * Applies the style attributes to the specified range in the document.<p>\n+     * Applies the style attributes to the specified range in the document.\n+     * It creates an undo\/redo entry if\n+     * {@link #isUndoRedoEnabled()} returns {@code true}.\n+     * <p>\n@@ -731,2 +754,0 @@\n-     * <p>\n-     * This operation is undoable.\n@@ -766,1 +787,2 @@\n-        UndoableChange ch = UndoableChange.create(this, evStart, evEnd);\n+        boolean allowUndo = isUndoRedoEnabled();\n+        UndoableChange ch = allowUndo ? UndoableChange.create(this, evStart, evEnd) : null;\n@@ -795,1 +817,3 @@\n-            add(ch, end);\n+            if (allowUndo) {\n+                add(ch, end);\n+            }\n@@ -820,0 +844,24 @@\n+    \/**\n+     * Indicates whether undo\/redo functionality is enabled.\n+     * @return true if undo\/redo functionality is enabled\n+     * @defaultValue {@code true}\n+     * @since 26\n+     *\/\n+    public final boolean isUndoRedoEnabled() {\n+        return undoRedoEnabled;\n+    }\n+\n+    \/**\n+     * Controls whether undo\/redo functionality is enabled.\n+     * Setting the value to {@code false} clears existing undo\/redo entries.\n+     * @param on true to enable undo\/redo\n+     * @see #clearUndoRedo()\n+     * @since 26\n+     *\/\n+    public final void setUndoRedoEnabled(boolean on) {\n+        undoRedoEnabled = on;\n+        if (!on) {\n+            clearUndoRedo();\n+        }\n+    }\n+\n@@ -984,1 +1032,2 @@\n-        replace(r, TextPos.ZERO, end, in, false);\n+        replace(r, TextPos.ZERO, end, in);\n+        clearUndoRedo();\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/model\/StyledTextModel.java","additions":65,"deletions":16,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -264,1 +264,2 @@\n-            rta.replaceText(ime.start, rEnd, text, false);\n+            \/\/ TODO JDK-8370447 may need to coalesce undo events for composed events but not for commit ones\n+            rta.replaceText(ime.start, rEnd, text);\n","filename":"modules\/jfx.incubator.richtext\/src\/main\/java\/jfx\/incubator\/scene\/control\/richtext\/skin\/RichTextAreaSkin.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -82,0 +82,2 @@\n+    private static final StyleAttributeMap ITALIC = StyleAttributeMap.builder().setItalic(true).build();\n+    private static final String NL = System.getProperty(\"line.separator\");\n@@ -268,0 +270,3 @@\n+        \/\/ undo\n+        control.undo();\n+        assertEquals(\"\", text());\n@@ -277,0 +282,3 @@\n+        \/\/ undo\n+        control.undo();\n+        assertEquals(\"\", text());\n@@ -284,0 +292,4 @@\n+        assertEquals(\"a\" + NL + \"b\", text());\n+        \/\/ undo\n+        control.undo();\n+        assertEquals(\"\", text());\n@@ -288,1 +300,1 @@\n-        TestStyledInput in = TestStyledInput.plainText(\"a\\nb\");\n+        TestStyledInput in = TestStyledInput.plainText(\"a\\nbbb\");\n@@ -290,2 +302,7 @@\n-        control.applyStyle(TextPos.ZERO, TextPos.ofLeading(0, 1), BOLD);\n-        assertEquals(TextPos.ofLeading(1, 1), p);\n+        control.applyStyle(TextPos.ZERO, TextPos.ofLeading(1, 3), BOLD);\n+        assertEquals(TextPos.ofLeading(1, 3), p);\n+        control.select(TextPos.ofLeading(1, 0));\n+        assertEquals(BOLD, control.getActiveStyleAttributeMap());\n+        \/\/ undo\n+        control.undo();\n+        assertEquals(StyleAttributeMap.EMPTY, control.getActiveStyleAttributeMap());\n@@ -484,0 +501,25 @@\n+    @Test\n+    public void insertTextWithStyles() {\n+        TextPos p = control.appendText(\"a\", BOLD);\n+        assertEquals(TextPos.ofLeading(0, 1), p);\n+        p = control.insertText(TextPos.ZERO, \"b\", ITALIC);\n+        assertEquals(TextPos.ofLeading(0, 1), p);\n+        control.select(p);\n+        assertEquals(ITALIC, control.getActiveStyleAttributeMap());\n+        assertEquals(\"ba\", text());\n+        \/\/ undo\n+        control.undo();\n+        assertEquals(\"a\", text());\n+    }\n+\n+    @Test\n+    public void insertTextFromStyledInput() {\n+        TestStyledInput in = TestStyledInput.plainText(\"a\\nb\");\n+        TextPos p = control.appendText(in);\n+        assertEquals(TextPos.ofLeading(1, 1), p);\n+        assertEquals(\"a\" + NL + \"b\", text());\n+        \/\/ undo\n+        control.undo();\n+        assertEquals(\"\", text());\n+    }\n+\n@@ -575,0 +617,1 @@\n+        control.appendText(\"should not see me\");\n@@ -579,0 +622,3 @@\n+        \/\/ read clears undo buffer\n+        control.undo();\n+        assertEquals(text1, text2);\n@@ -605,1 +651,1 @@\n-        control.replaceText(TextPos.ofLeading(0, 1), TextPos.ofLeading(0, 3), \"-\", false);\n+        control.replaceText(TextPos.ofLeading(0, 1), TextPos.ofLeading(0, 3), \"-\");\n@@ -613,1 +659,1 @@\n-        control.replaceText(TextPos.ofLeading(0, 1), TextPos.ofLeading(0, 3), in, false);\n+        control.replaceText(TextPos.ofLeading(0, 1), TextPos.ofLeading(0, 3), in);\n@@ -617,0 +663,13 @@\n+    @Test\n+    public void setStyle() {\n+        TestStyledInput in = TestStyledInput.plainText(\"a\\nbbb\");\n+        TextPos p = control.appendText(in);\n+        control.setStyle(TextPos.ZERO, TextPos.ofLeading(1, 3), BOLD);\n+        assertEquals(TextPos.ofLeading(1, 3), p);\n+        control.select(TextPos.ofLeading(1, 0));\n+        assertEquals(BOLD, control.getActiveStyleAttributeMap());\n+        \/\/ allow undo\n+        control.undo();\n+        assertEquals(StyleAttributeMap.EMPTY, control.getActiveStyleAttributeMap());\n+    }\n+\n@@ -714,0 +773,38 @@\n+    @Test\n+    public void undoRedoEnabled() {\n+        \/\/ api\n+        assertTrue(control.isUndoRedoEnabled());\n+        control.setUndoRedoEnabled(false);\n+        assertFalse(control.isUndoRedoEnabled());\n+        control.setModel(null);\n+        control.setUndoRedoEnabled(true);\n+        assertFalse(control.isUndoRedoEnabled());\n+        control.setModel(new RichTextModel());\n+        assertTrue(control.isUndoRedoEnabled());\n+        \/\/ undo-redo enabled\n+        control.appendText(\"1\");\n+        assertEquals(\"1\", text());\n+        control.undo();\n+        assertEquals(\"\", text());\n+        \/\/ undo-redo disabled\n+        control.setUndoRedoEnabled(false);\n+        control.appendText(\"2\");\n+        assertEquals(\"2\", text());\n+        control.undo();\n+        assertEquals(\"2\", text());\n+        \/\/ disabling undo-redo clears undo stack\n+        control.setUndoRedoEnabled(true);\n+        control.appendText(\"3\");\n+        assertEquals(\"23\", text());\n+        assertTrue(control.isUndoable());\n+        control.setUndoRedoEnabled(false);\n+        assertFalse(control.isUndoable());\n+        control.setUndoRedoEnabled(true);\n+        control.appendText(\"4\");\n+        assertEquals(\"234\", text());\n+        control.undo();\n+        assertEquals(\"23\", text());\n+        control.undo();\n+        assertEquals(\"23\", text());\n+    }\n+\n","filename":"modules\/jfx.incubator.richtext\/src\/test\/java\/test\/jfx\/incubator\/scene\/control\/richtext\/RichTextAreaTest.java","additions":102,"deletions":5,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        model.replace(null, TextPos.ZERO, TextPos.ZERO, \"111\\n\", false);\n+        model.replace(null, TextPos.ZERO, TextPos.ZERO, \"111\\n\");\n","filename":"modules\/jfx.incubator.richtext\/src\/test\/java\/test\/jfx\/incubator\/scene\/control\/richtext\/model\/HTMLExportTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-            m.replace(null, TextPos.ZERO, TextPos.ZERO, \"\\n\", true);\n+            m.replace(null, TextPos.ZERO, TextPos.ZERO, \"\\n\");\n@@ -69,1 +69,1 @@\n-                m.replace(null, t(0, 0), t(0, 6), \"\", false);\n+                m.replace(null, t(0, 0), t(0, 6), \"\");\n@@ -82,1 +82,1 @@\n-                m.replace(null, t(0, 0), t(0, 2), \"\", false);\n+                m.replace(null, t(0, 0), t(0, 2), \"\");\n@@ -96,1 +96,1 @@\n-                m.replace(null, t(0, 2), t(1, 0), \"\", false);\n+                m.replace(null, t(0, 2), t(1, 0), \"\");\n@@ -112,1 +112,1 @@\n-                m.replace(null, t(2, 0), t(1, 0), \"\", false);\n+                m.replace(null, t(2, 0), t(1, 0), \"\");\n@@ -149,1 +149,1 @@\n-                m.replace(null, p, p, \"\\n\", false);\n+                m.replace(null, p, p, \"\\n\");\n@@ -161,1 +161,1 @@\n-            m.replace(null, p, p, in, false);\n+            m.replace(null, p, p, in);\n@@ -259,1 +259,1 @@\n-        m.replace(null, TextPos.ZERO, TextPos.ZERO, text, false);\n+        m.replace(null, TextPos.ZERO, TextPos.ZERO, text);\n","filename":"modules\/jfx.incubator.richtext\/src\/test\/java\/test\/jfx\/incubator\/scene\/control\/richtext\/model\/TestRichTextModel.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-                m.replace(null, TextPos.ZERO, TextPos.ZERO, \"\\n\", false);\n+                m.replace(null, TextPos.ZERO, TextPos.ZERO, \"\\n\");\n@@ -61,1 +61,1 @@\n-                m.replace(null, TextPos.ZERO, TextPos.ZERO, \"\\n\\n\", false);\n+                m.replace(null, TextPos.ZERO, TextPos.ZERO, \"\\n\\n\");\n@@ -70,1 +70,1 @@\n-                m.replace(null, TextPos.ZERO, TextPos.ZERO, \"\\n\", false);\n+                m.replace(null, TextPos.ZERO, TextPos.ZERO, \"\\n\");\n@@ -79,1 +79,1 @@\n-                m.replace(null, TextPos.ofLeading(0, 2), TextPos.ofLeading(0, 2), \"\\n\", false);\n+                m.replace(null, TextPos.ofLeading(0, 2), TextPos.ofLeading(0, 2), \"\\n\");\n@@ -88,1 +88,1 @@\n-                m.replace(null, TextPos.ofLeading(0, 4), TextPos.ofLeading(0, 4), \"\\n\", false);\n+                m.replace(null, TextPos.ofLeading(0, 4), TextPos.ofLeading(0, 4), \"\\n\");\n@@ -99,1 +99,1 @@\n-                m.replace(null, p(0, 13), p(0, 0), \"\", false);\n+                m.replace(null, p(0, 13), p(0, 0), \"\");\n@@ -110,1 +110,1 @@\n-                m.replace(null, p(0, 4), p(1, 0), \"\", false);\n+                m.replace(null, p(0, 4), p(1, 0), \"\");\n@@ -128,1 +128,1 @@\n-                TextPos end = m.replace(null, TextPos.ZERO, TextPos.ZERO, in, false);\n+                TextPos end = m.replace(null, TextPos.ZERO, TextPos.ZERO, in);\n","filename":"modules\/jfx.incubator.richtext\/src\/test\/java\/test\/jfx\/incubator\/scene\/control\/richtext\/model\/TestRichTextModelAttributes.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        control.replaceText(TextPos.ZERO, end, text, false);\n+        control.replaceText(TextPos.ZERO, end, text);\n","filename":"modules\/jfx.incubator.richtext\/src\/test\/java\/test\/jfx\/incubator\/scene\/control\/richtext\/support\/RTUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}