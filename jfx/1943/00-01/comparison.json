{"files":[{"patch":"@@ -53,1 +53,0 @@\n-import com.sun.javafx.PreviewFeature;\n@@ -468,2 +467,2 @@\n-     * Note that a dialog with the {@link StageStyle#EXTENDED} style must also specify a {@link HeaderBar}\n-     * with the {@link #setHeaderBar(HeaderBar)} method, as otherwise the dialog window will not be draggable.\n+     * Note that a dialog with the {@link StageStyle#EXTENDED} style must also specify a {@link HeaderBar} with\n+     * the {@link DialogPane#setHeaderBar(HeaderBar)} method, as otherwise the dialog window will not be draggable.\n@@ -586,56 +585,0 @@\n-    \/\/ --- header bar\n-    private ObjectProperty<HeaderBar> headerBar;\n-\n-    \/**\n-     * Specifies the {@link HeaderBar} for the dialog. The {@code HeaderBar} will be placed at the\n-     * top of the dialog window, and extend the entire width of the window. This property will only\n-     * be used if the dialog window is configured with the {@link StageStyle#EXTENDED} style; it has\n-     * no effect for other styles.\n-     *\n-     * @return the {@code headerBar} property\n-     * @defaultValue {@code null}\n-     * @since 26\n-     * @deprecated This is a preview feature which may be changed or removed in a future release.\n-     *\/\n-    @Deprecated(since = \"26\")\n-    public final ObjectProperty<HeaderBar> headerBarProperty() {\n-        if (headerBar == null) {\n-            PreviewFeature.HEADER_BAR.checkEnabled();\n-            headerBar = new SimpleObjectProperty<>(this, \"headerBar\") {\n-                @Override\n-                protected void invalidated() {\n-                    dialog.setHeaderBar(get());\n-                }\n-            };\n-        }\n-\n-        return headerBar;\n-    }\n-\n-    \/**\n-     * Gets the value of the {@link #headerBarProperty() headerBar} property.\n-     *\n-     * @return the {@code HeaderBar}\n-     * @since 26\n-     * @deprecated This is a preview feature which may be changed or removed in a future release.\n-     *\/\n-    @Deprecated(since = \"26\")\n-    public final HeaderBar getHeaderBar() {\n-        PreviewFeature.HEADER_BAR.checkEnabled();\n-        return headerBar != null ? headerBar.get() : null;\n-    }\n-\n-    \/**\n-     * Sets the value of the {@link #headerBarProperty() headerBar} property.\n-     *\n-     * @param value the new value\n-     * @since 26\n-     * @deprecated This is a preview feature which may be changed or removed in a future release.\n-     *\/\n-    @Deprecated(since = \"26\")\n-    public final void setHeaderBar(HeaderBar value) {\n-        PreviewFeature.HEADER_BAR.checkEnabled();\n-        if (headerBar != null || value != null) {\n-            headerBarProperty().set(value);\n-        }\n-    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Dialog.java","additions":2,"deletions":59,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+import com.sun.javafx.PreviewFeature;\n+import com.sun.javafx.css.StyleManager;\n@@ -54,0 +56,1 @@\n+import javafx.css.converter.StringConverter;\n@@ -55,0 +58,1 @@\n+import javafx.geometry.HPos;\n@@ -56,0 +60,1 @@\n+import javafx.geometry.VPos;\n@@ -63,0 +68,1 @@\n+import javafx.scene.layout.HeaderBar;\n@@ -67,3 +73,1 @@\n-\n-import com.sun.javafx.css.StyleManager;\n-import javafx.css.converter.StringConverter;\n+import javafx.stage.StageStyle;\n@@ -216,0 +220,2 @@\n+        headerTextPanel.setVisible(false);\n+        headerTextPanel.setManaged(false);\n@@ -221,0 +227,2 @@\n+        contentLabel.setVisible(false);\n+        contentLabel.setManaged(false);\n@@ -433,0 +441,68 @@\n+    \/\/ --- header bar\n+    private ObjectProperty<HeaderBar> headerBar;\n+\n+    \/**\n+     * Specifies the {@link HeaderBar} for the dialog. The {@code HeaderBar} will be placed at the\n+     * top of the dialog window, and extend the entire width of the window. This property will only\n+     * be used if the dialog window is configured with the {@link StageStyle#EXTENDED} style; it has\n+     * no effect for other styles.\n+     *\n+     * @return the {@code headerBar} property\n+     * @defaultValue {@code null}\n+     * @since 26\n+     * @deprecated This is a preview feature which may be changed or removed in a future release.\n+     *\/\n+    @Deprecated(since = \"26\")\n+    public final ObjectProperty<HeaderBar> headerBarProperty() {\n+        if (headerBar == null) {\n+            PreviewFeature.HEADER_BAR.checkEnabled();\n+            headerBar = new SimpleObjectProperty<>(this, \"headerBar\") {\n+                WeakReference<HeaderBar> wref = new WeakReference<>(null);\n+\n+                @Override\n+                protected void invalidated() {\n+                    HeaderBar oldValue = wref.get();\n+                    if (oldValue != null) {\n+                        getChildren().remove(oldValue);\n+                    }\n+\n+                    HeaderBar newValue = get();\n+                    if (newValue != null) {\n+                        getChildren().add(newValue);\n+                    }\n+\n+                    wref = new WeakReference<>(newValue);\n+                }\n+            };\n+        }\n+\n+        return headerBar;\n+    }\n+\n+    \/**\n+     * Gets the value of the {@link #headerBarProperty() headerBar} property.\n+     *\n+     * @return the {@code HeaderBar}\n+     * @since 26\n+     * @deprecated This is a preview feature which may be changed or removed in a future release.\n+     *\/\n+    @Deprecated(since = \"26\")\n+    public final HeaderBar getHeaderBar() {\n+        PreviewFeature.HEADER_BAR.checkEnabled();\n+        return headerBar != null ? headerBar.get() : null;\n+    }\n+\n+    \/**\n+     * Sets the value of the {@link #headerBarProperty() headerBar} property.\n+     *\n+     * @param value the new value\n+     * @since 26\n+     * @deprecated This is a preview feature which may be changed or removed in a future release.\n+     *\/\n+    @Deprecated(since = \"26\")\n+    public final void setHeaderBar(HeaderBar value) {\n+        PreviewFeature.HEADER_BAR.checkEnabled();\n+        if (headerBar != null || value != null) {\n+            headerBarProperty().set(value);\n+        }\n+    }\n@@ -881,0 +957,1 @@\n+        final HeaderBar headerBar = getHeaderBar();\n@@ -886,0 +963,3 @@\n+        final double headerBarPrefHeight = headerBar != null\n+            ? Utils.boundedSize(headerBar.prefHeight(w), headerBar.minHeight(w), headerBar.maxHeight(w))\n+            : 0;\n@@ -897,1 +977,1 @@\n-            expandableContentPrefHeight = h - (headerPrefHeight + contentAndGraphicHeight + buttonBarPrefHeight);\n+            expandableContentPrefHeight = h - (headerBarPrefHeight + headerPrefHeight + contentAndGraphicHeight + buttonBarPrefHeight);\n@@ -901,1 +981,1 @@\n-            contentAreaHeight = h - (headerPrefHeight + expandableContentPrefHeight + buttonBarPrefHeight);\n+            contentAreaHeight = h - (headerBarPrefHeight + headerPrefHeight + expandableContentPrefHeight + buttonBarPrefHeight);\n@@ -905,0 +985,4 @@\n+        if (headerBar != null) {\n+            layoutInArea(headerBar, 0, 0, w, headerBarPrefHeight, 0, HPos.LEFT, VPos.TOP);\n+        }\n+\n@@ -906,1 +990,1 @@\n-        double y = topPadding;\n+        double y = topPadding + headerBarPrefHeight;\n@@ -936,0 +1020,1 @@\n+        double headerBarMinWidth = getHeaderBar() instanceof HeaderBar hb ? hb.minWidth(height) : 0;\n@@ -952,1 +1037,1 @@\n-        return snapSizeX(minWidth);\n+        return snapSizeX(Math.max(minWidth, headerBarMinWidth));\n@@ -959,0 +1044,1 @@\n+        double headerBarMinHeight = getHeaderBar() instanceof HeaderBar hb ? hb.minHeight(width) : 0;\n@@ -979,0 +1065,1 @@\n+                headerBarMinHeight +\n@@ -994,0 +1081,2 @@\n+        double headerBarPrefWidth = getHeaderBar() instanceof HeaderBar hb\n+            ? Utils.boundedSize(hb.prefWidth(height), hb.minWidth(height), hb.maxWidth(height)) : 0;\n@@ -1006,1 +1095,1 @@\n-        return snapSizeX(prefWidth);\n+        return snapSizeX(Math.max(prefWidth, headerBarPrefWidth));\n@@ -1015,0 +1104,2 @@\n+        double headerBarPrefHeight = getHeaderBar() instanceof HeaderBar hb\n+            ? Utils.boundedSize(hb.prefHeight(width), hb.minHeight(width), hb.maxHeight(width)) : 0;\n@@ -1032,0 +1123,1 @@\n+               headerBarPrefHeight +\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/DialogPane.java","additions":101,"deletions":9,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import javafx.scene.layout.HeaderBar;\n@@ -165,3 +164,0 @@\n-    \/\/ --- header bar\n-    public abstract void setHeaderBar(HeaderBar headerBar);\n-\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/FXDialog.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,2 +37,0 @@\n-import javafx.scene.layout.BorderPane;\n-import javafx.scene.layout.HeaderBar;\n@@ -67,1 +65,1 @@\n-    private final Scene scene;\n+    private Scene scene;\n@@ -71,2 +69,0 @@\n-\n-    private HeaderBar headerBar;\n@@ -89,2 +85,0 @@\n-        scene = new Scene(DUMMY_ROOT);\n-        stage.setScene(scene);\n@@ -122,1 +116,0 @@\n-        updateRoot();\n@@ -146,5 +139,0 @@\n-    @Override public void setHeaderBar(HeaderBar headerBar) {\n-        this.headerBar = headerBar;\n-        updateRoot();\n-    }\n-\n@@ -153,1 +141,10 @@\n-        updateRoot();\n+\n+        if (scene == null) {\n+            scene = new Scene(dialogPane);\n+            stage.setScene(scene);\n+        } else {\n+            scene.setRoot(dialogPane);\n+        }\n+\n+        dialogPane.autosize();\n+        stage.sizeToScene();\n@@ -157,0 +154,1 @@\n+        scene.setRoot(dialogPane);\n@@ -162,0 +160,1 @@\n+        scene.setRoot(dialogPane);\n@@ -259,16 +258,0 @@\n-    private void updateRoot() {\n-        if (getStyle() == StageStyle.EXTENDED && headerBar != null) {\n-            if (scene.getRoot() instanceof BorderPane borderPane) {\n-                borderPane.setTop(headerBar);\n-                borderPane.setCenter(dialogPane);\n-            } else {\n-                scene.setRoot(new BorderPane(dialogPane, headerBar, null, null, null));\n-            }\n-        } else {\n-            scene.setRoot(dialogPane != null ? dialogPane : DUMMY_ROOT);\n-        }\n-\n-        scene.getRoot().autosize();\n-        stage.sizeToScene();\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/HeavyweightDialog.java","additions":14,"deletions":31,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,2 @@\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n@@ -31,0 +32,1 @@\n+import javafx.geometry.BoundingBox;\n@@ -40,0 +42,1 @@\n+import javafx.scene.layout.HeaderBar;\n@@ -154,0 +157,23 @@\n+\n+    @Test\n+    public void headerBarIsLocatedAtTopOfDialogPane() {\n+        var headerBar = new HeaderBar();\n+        headerBar.setMinHeight(20);\n+        headerBar.setPrefHeight(20);\n+        dialogPane.setHeaderBar(headerBar);\n+        dialogPane.resize(1000, 1000);\n+        dialogPane.applyCss();\n+        dialogPane.layout();\n+\n+        assertEquals(\n+            new BoundingBox(0, 0, 1000, 20),\n+            dialogPane.lookup(\"HeaderBar\").getLayoutBounds());\n+\n+        dialogPane.getChildren().stream()\n+            .filter(Node::isVisible)\n+            .filter(c -> c != headerBar)\n+            .forEach(child ->\n+                assertTrue(child.getLayoutY() >= headerBar.getHeight(), () ->\n+                    child.getClass().getSimpleName() + \" must be located below HeaderBar, layoutY = \" + child.getLayoutBounds())\n+            );\n+    }\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/DialogPaneTest.java","additions":28,"deletions":2,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -28,1 +28,3 @@\n-import javafx.scene.layout.HeaderBar;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n@@ -35,1 +37,0 @@\n-import javafx.scene.layout.BorderPane;\n@@ -37,6 +38,0 @@\n-import javafx.stage.StageStyle;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.EnumSource;\n@@ -121,27 +116,0 @@\n-    @ParameterizedTest\n-    @EnumSource(value = StageStyle.class, names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\", \"UNIFIED\"})\n-    public void testRootOfNonExtendedStageIsDialogPane(StageStyle style) {\n-        dialog.initStyle(style);\n-        dialog.setHeaderBar(new HeaderBar()); \/\/ header bar is ignored\n-        assertSame(dialog.getDialogPane(), dialog.getDialogPane().getScene().getRoot());\n-    }\n-\n-    @Test\n-    public void testRootOfExtendedStageWithoutHeaderBarIsDialogPane() {\n-        dialog.initStyle(StageStyle.EXTENDED);\n-        assertSame(dialog.getDialogPane(), dialog.getDialogPane().getScene().getRoot());\n-    }\n-\n-    @Test\n-    public void testRootOfExtendedStageWithHeaderBarIsBorderPane() {\n-        dialog.initStyle(StageStyle.EXTENDED);\n-        dialog.setHeaderBar(new HeaderBar());\n-\n-        if (dialog.getDialogPane().getScene().getRoot() instanceof BorderPane root) {\n-            assertSame(dialog.getDialogPane(), root.getCenter());\n-            assertSame(dialog.getHeaderBar(), root.getTop());\n-        } else {\n-            fail(\"Root of extended stage is not a BorderPane\");\n-        }\n-    }\n-\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/DialogTest.java","additions":3,"deletions":35,"binary":false,"changes":38,"status":"modified"}]}