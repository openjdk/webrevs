{"files":[{"patch":"@@ -46,0 +46,1 @@\n+import javafx.scene.layout.HeaderBar;\n@@ -52,0 +53,1 @@\n+import com.sun.javafx.PreviewFeature;\n@@ -464,4 +466,4 @@\n-     * Specifies the style for this dialog. This must be done prior to making\n-     * the dialog visible. The style is one of: StageStyle.DECORATED,\n-     * StageStyle.UNDECORATED, StageStyle.TRANSPARENT, StageStyle.UTILITY,\n-     * or StageStyle.UNIFIED.\n+     * Specifies the style for this dialog. This must be done prior to making the dialog visible.\n+     * <p>\n+     * Note that a dialog with the {@link StageStyle#EXTENDED} style must also specify a {@link HeaderBar}\n+     * with the {@link #setHeaderBar(HeaderBar)} method, as otherwise the dialog window will not be draggable.\n@@ -584,0 +586,56 @@\n+    \/\/ --- header bar\n+    private ObjectProperty<HeaderBar> headerBar;\n+\n+    \/**\n+     * Specifies the {@link HeaderBar} for the dialog. The {@code HeaderBar} will be placed at the\n+     * top of the dialog window, and extend the entire width of the window. This property will only\n+     * be used if the dialog window is configured with the {@link StageStyle#EXTENDED} style; it has\n+     * no effect for other styles.\n+     *\n+     * @return the {@code headerBar} property\n+     * @defaultValue {@code null}\n+     * @since 26\n+     * @deprecated This is a preview feature which may be changed or removed in a future release.\n+     *\/\n+    @Deprecated(since = \"26\")\n+    public final ObjectProperty<HeaderBar> headerBarProperty() {\n+        if (headerBar == null) {\n+            PreviewFeature.HEADER_BAR.checkEnabled();\n+            headerBar = new SimpleObjectProperty<>(this, \"headerBar\") {\n+                @Override\n+                protected void invalidated() {\n+                    dialog.setHeaderBar(get());\n+                }\n+            };\n+        }\n+\n+        return headerBar;\n+    }\n+\n+    \/**\n+     * Gets the value of the {@link #headerBarProperty() headerBar} property.\n+     *\n+     * @return the {@code HeaderBar}\n+     * @since 26\n+     * @deprecated This is a preview feature which may be changed or removed in a future release.\n+     *\/\n+    @Deprecated(since = \"26\")\n+    public final HeaderBar getHeaderBar() {\n+        PreviewFeature.HEADER_BAR.checkEnabled();\n+        return headerBar != null ? headerBar.get() : null;\n+    }\n+\n+    \/**\n+     * Sets the value of the {@link #headerBarProperty() headerBar} property.\n+     *\n+     * @param value the new value\n+     * @since 26\n+     * @deprecated This is a preview feature which may be changed or removed in a future release.\n+     *\/\n+    @Deprecated(since = \"26\")\n+    public final void setHeaderBar(HeaderBar value) {\n+        PreviewFeature.HEADER_BAR.checkEnabled();\n+        if (headerBar != null || value != null) {\n+            headerBarProperty().set(value);\n+        }\n+    }\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/Dialog.java","additions":62,"deletions":4,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import javafx.scene.layout.HeaderBar;\n@@ -164,0 +165,3 @@\n+    \/\/ --- header bar\n+    public abstract void setHeaderBar(HeaderBar headerBar);\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/FXDialog.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,2 @@\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.HeaderBar;\n@@ -65,1 +67,1 @@\n-    private Scene scene;\n+    private final Scene scene;\n@@ -69,0 +71,2 @@\n+\n+    private HeaderBar headerBar;\n@@ -85,0 +89,2 @@\n+        scene = new Scene(DUMMY_ROOT);\n+        stage.setScene(scene);\n@@ -116,0 +122,1 @@\n+        updateRoot();\n@@ -139,0 +146,5 @@\n+    @Override public void setHeaderBar(HeaderBar headerBar) {\n+        this.headerBar = headerBar;\n+        updateRoot();\n+    }\n+\n@@ -141,10 +153,1 @@\n-\n-        if (scene == null) {\n-            scene = new Scene(dialogPane);\n-            stage.setScene(scene);\n-        } else {\n-            scene.setRoot(dialogPane);\n-        }\n-\n-        dialogPane.autosize();\n-        stage.sizeToScene();\n+        updateRoot();\n@@ -154,1 +157,0 @@\n-        scene.setRoot(dialogPane);\n@@ -160,1 +162,0 @@\n-        scene.setRoot(dialogPane);\n@@ -258,0 +259,16 @@\n+    private void updateRoot() {\n+        if (getStyle() == StageStyle.EXTENDED && headerBar != null) {\n+            if (scene.getRoot() instanceof BorderPane borderPane) {\n+                borderPane.setTop(headerBar);\n+                borderPane.setCenter(dialogPane);\n+            } else {\n+                scene.setRoot(new BorderPane(dialogPane, headerBar, null, null, null));\n+            }\n+        } else {\n+            scene.setRoot(dialogPane != null ? dialogPane : DUMMY_ROOT);\n+        }\n+\n+        scene.getRoot().autosize();\n+        stage.sizeToScene();\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/HeavyweightDialog.java","additions":31,"deletions":14,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,1 @@\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n+import javafx.scene.layout.HeaderBar;\n@@ -37,0 +35,1 @@\n+import javafx.scene.layout.BorderPane;\n@@ -38,0 +37,6 @@\n+import javafx.stage.StageStyle;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n@@ -105,0 +110,38 @@\n+    @Test\n+    public void testInitialDialogPaneIsAttachedToScene() {\n+        class TestDialog extends Dialog<ButtonType> {\n+            TestDialog() {\n+                assertNotNull(getDialogPane().getScene());\n+            }\n+        }\n+\n+        assertDoesNotThrow(TestDialog::new);\n+    }\n+\n+    @ParameterizedTest\n+    @EnumSource(value = StageStyle.class, names = {\"DECORATED\", \"UNDECORATED\", \"TRANSPARENT\", \"UTILITY\", \"UNIFIED\"})\n+    public void testRootOfNonExtendedStageIsDialogPane(StageStyle style) {\n+        dialog.initStyle(style);\n+        dialog.setHeaderBar(new HeaderBar()); \/\/ header bar is ignored\n+        assertSame(dialog.getDialogPane(), dialog.getDialogPane().getScene().getRoot());\n+    }\n+\n+    @Test\n+    public void testRootOfExtendedStageWithoutHeaderBarIsDialogPane() {\n+        dialog.initStyle(StageStyle.EXTENDED);\n+        assertSame(dialog.getDialogPane(), dialog.getDialogPane().getScene().getRoot());\n+    }\n+\n+    @Test\n+    public void testRootOfExtendedStageWithHeaderBarIsBorderPane() {\n+        dialog.initStyle(StageStyle.EXTENDED);\n+        dialog.setHeaderBar(new HeaderBar());\n+\n+        if (dialog.getDialogPane().getScene().getRoot() instanceof BorderPane root) {\n+            assertSame(dialog.getDialogPane(), root.getCenter());\n+            assertSame(dialog.getHeaderBar(), root.getTop());\n+        } else {\n+            fail(\"Root of extended stage is not a BorderPane\");\n+        }\n+    }\n+\n","filename":"modules\/javafx.controls\/src\/test\/java\/test\/javafx\/scene\/control\/DialogTest.java","additions":47,"deletions":4,"binary":false,"changes":51,"status":"modified"}]}