{"files":[{"patch":"@@ -182,0 +182,43 @@\n+    \/**\n+     * Remove any default menus that are normally added to the system\n+     * menu bar. Only effective when the system menu bar is in use.\n+     *\n+     * @return the use default menus property\n+     * @since JavaFX 24\n+     *\/\n+    public final BooleanProperty useDefaultMenusProperty() {\n+        if (useDefaultMenus == null) {\n+            useDefaultMenus = new StyleableBooleanProperty(true) {\n+\n+                @Override\n+                public CssMetaData<MenuBar,Boolean> getCssMetaData() {\n+                    return StyleableProperties.USE_DEFAULT_MENUS;\n+                }\n+\n+                @Override\n+                public Object getBean() {\n+                    return MenuBar.this;\n+                }\n+\n+                @Override\n+                public String getName() {\n+                    return \"useDefaultMenus\";\n+                }\n+\n+                @Override\n+                public void bind(final ObservableValue<? extends Boolean> rawObservable) {\n+                    throw new RuntimeException(BIND_MSG);\n+                }\n+\n+            };\n+        }\n+        return useDefaultMenus;\n+    }\n+\n+    private BooleanProperty useDefaultMenus;\n+    public final void setUseDefaultMenus(boolean value) {\n+        useDefaultMenusProperty().setValue(value);\n+    }\n+    public final boolean isUseDefaultMenus() {\n+        return useDefaultMenus == null ? true : useDefaultMenus.getValue();\n+    }\n@@ -226,0 +269,13 @@\n+        private static final CssMetaData<MenuBar, Boolean> USE_DEFAULT_MENUS =\n+                new CssMetaData<>(\"-fx-use-default-menus\",\n+                                                        BooleanConverter.getInstance(),\n+                                                        true) {\n+            @Override public boolean isSettable(MenuBar n) {\n+                return n.useDefaultMenus == null || !n.useDefaultMenus.isBound();\n+            }\n+\n+            @Override public StyleableProperty<Boolean> getStyleableProperty(MenuBar n) {\n+                return (StyleableProperty<Boolean>)n.useDefaultMenusProperty();\n+            }\n+        };\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/MenuBar.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -241,0 +241,3 @@\n+            lh.addInvalidationListener(control.useDefaultMenusProperty(), (v) -> {\n+                rebuildUI();\n+            });\n@@ -823,0 +826,3 @@\n+            boolean useDefaultMenus = !getSkinnable().isUseSystemMenuBar() || getSkinnable().isUseDefaultMenus();\n+            Toolkit.getToolkit().getSystemMenu().setUseDefaultMenus(useDefaultMenus);\n+\n","filename":"modules\/javafx.controls\/src\/main\/java\/javafx\/scene\/control\/skin\/MenuBarSkin.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -337,0 +337,5 @@\n+    public void removeDefaultMenus(MenuBar menubar) {\n+        checkEventThread();\n+        \/\/ To override in subclasses\n+    }\n+\n@@ -816,0 +821,15 @@\n+    \/**\n+     * Hides the current application. Only implemented on Mac.\n+     *\/\n+    public void hideApplication() {}\n+\n+    \/**\n+     * Hides all other applications. Only implemented on Mac.\n+     *\/\n+    public void hideOtherApplications() {}\n+\n+    \/**\n+     * Undoes the effects of hideOtherApplications. Only implemented on Mac.\n+     *\/\n+    public void showAllApplications() {}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/Application.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -222,0 +222,12 @@\n+    @Override public void hideApplication() {\n+        _hide();\n+    }\n+\n+    @Override public void hideOtherApplications() {\n+        _hideOtherApplications();\n+    }\n+\n+    @Override public void showAllApplications() {\n+        _unhideAllApplications();\n+    }\n+\n@@ -266,1 +278,1 @@\n-        menubar.add(this.appleMenu);\n+        menubar.insert(this.appleMenu, 0);\n@@ -277,0 +289,6 @@\n+    @Override public void removeDefaultMenus(MenuBar menubar) {\n+        if (appleMenu != null) {\n+            menubar.remove(appleMenu);\n+            appleMenu = null;\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacApplication.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -980,0 +980,20 @@\n+    public static void hideApplication() {\n+        var application = com.sun.glass.ui.Application.GetApplication();\n+        if (application != null) {\n+            application.hideApplication();\n+        }\n+    }\n+\n+    public static void hideOtherApplications() {\n+        var application = com.sun.glass.ui.Application.GetApplication();\n+        if (application != null) {\n+            application.hideOtherApplications();\n+        }\n+    }\n+\n+    public static void showAllApplications() {\n+        var application = com.sun.glass.ui.Application.GetApplication();\n+        if (application != null) {\n+            application.showAllApplications();\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/application\/PlatformImpl.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+    public void setUseDefaultMenus(boolean use);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/TKSystemMenu.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+    private boolean             useDefaultMenus = true;\n@@ -78,2 +79,3 @@\n-            app.installDefaultMenus(glassSystemMenuBar);\n-\n+            if (useDefaultMenus) {\n+                app.installDefaultMenus(glassSystemMenuBar);\n+            }\n@@ -94,0 +96,13 @@\n+    @Override public void setUseDefaultMenus(boolean use) {\n+        if (use != useDefaultMenus) {\n+            if (glassSystemMenuBar != null) {\n+                if (useDefaultMenus) {\n+                    Application.GetApplication().removeDefaultMenus(glassSystemMenuBar);\n+                } else {\n+                    Application.GetApplication().installDefaultMenus(glassSystemMenuBar);\n+                }\n+            }\n+            useDefaultMenus = use;\n+        }\n+    }\n+\n@@ -109,1 +124,1 @@\n-             * Leave the Apple menu in place\n+             * Leave the Apple menu in place, if using\n@@ -111,1 +126,2 @@\n-            for (int index = existingSize - 1; index >= 1; index--) {\n+            int limit = (useDefaultMenus ? 1 : 0);\n+            for (int index = existingSize - 1; index >= limit; index--) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/GlassSystemMenu.java","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.application;\n+\n+import com.sun.javafx.application.PlatformImpl;\n+\n+\/**\n+ * This class provides services for an Application. This includes\n+ * methods to show and hide other applications.\n+ *\n+ * @since JavaFX 24\n+ *\/\n+public final class ApplicationServices {\n+\n+    \/\/ To prevent instantiation\n+    private ApplicationServices() {\n+    }\n+\n+    \/**\n+     * Hide the application.\n+     *\/\n+    public static void hideApplication() {\n+        PlatformImpl.hideApplication();\n+    }\n+\n+    \/**\n+     * Hide applications other than the current one.\n+     *\/\n+    public static void hideOtherApplications() {\n+        PlatformImpl.hideOtherApplications();\n+    }\n+\n+    \/**\n+     * Show all applications.\n+     *\/\n+    public static void showAllApplications() {\n+        PlatformImpl.showAllApplications();\n+    }\n+\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/application\/ApplicationServices.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -55,7 +55,0 @@\n-@interface NSMenuItem (SPI)\n-\n-\/\/ Apple's SPI\n-- setAppleMenu:(NSMenuItem*)item;\n-\n-@end\n-\n@@ -345,6 +338,0 @@\n-        if ([[glassmenu->item title] compare:@\"Apple\"] == NSOrderedSame)\n-        {\n-            LOG(\"calling setAppleMenu\");\n-            [NSApp performSelector:@selector(setAppleMenu:) withObject:glassmenu->item];\n-        }\n-\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassMenu.m","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -932,0 +932,4 @@\n+        @Override\n+        public void setUseDefaultMenus(boolean use) {\n+        }\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/pgstub\/StubToolkit.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,195 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javafx.application.Application;\n+import javafx.application.ApplicationServices;\n+import javafx.application.Platform;\n+import javafx.scene.control.Menu;\n+import javafx.scene.control.MenuBar;\n+import javafx.scene.control.MenuItem;\n+import javafx.scene.control.SeparatorMenuItem;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.input.KeyCode;\n+import javafx.scene.input.KeyCombination;\n+import javafx.scene.input.KeyCodeCombination;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.layout.Priority;\n+import javafx.scene.Scene;\n+import javafx.stage.Stage;\n+\n+public class DefaultAppMenu extends Application {\n+    private final TextArea messageArea = new TextArea(\"\");\n+    private final MenuBar menuBar = new MenuBar();\n+    private final Menu applicationMenu = new Menu(\"Ignored\");\n+    private final Menu testMenu = new Menu(\"Test\");\n+    private final MenuItem toggleSystemMenus = new MenuItem();\n+    private final MenuItem toggleDefaultMenus = new MenuItem();\n+\n+    private Scene scene = null;\n+\n+    public static void main(String[] args) {\n+        Application.launch(DefaultAppMenu.class, args);\n+    }\n+\n+    private void updateUI() {\n+        if (menuBar.isUseSystemMenuBar()) {\n+            toggleSystemMenus.setText(\"Turn off system menu bar\");\n+        } else {\n+            toggleSystemMenus.setText(\"Turn on system menu bar\");\n+        }\n+\n+        if (menuBar.isUseDefaultMenus()) {\n+            toggleDefaultMenus.setText(\"Hide default menus\");\n+        } else {\n+            toggleDefaultMenus.setText(\"Show default menus\");\n+        }\n+\n+        if (menuBar.isUseSystemMenuBar()) {\n+            messageArea.appendText(\"System menu bar is ON and \");\n+        } else {\n+            messageArea.appendText(\"System menu bar is OFF and \");\n+        }\n+\n+        if (menuBar.isUseDefaultMenus()) {\n+            messageArea.appendText(\"default menus are ON\\n\");\n+        } else {\n+            messageArea.appendText(\"default menus are OFF\\n\");\n+        }\n+\n+        if (!menuBar.isUseSystemMenuBar() || menuBar.isUseDefaultMenus()) {\n+            messageArea.appendText(\"Using default application menu\\n\");\n+            menuBar.getMenus().remove(applicationMenu);\n+        } else {\n+            messageArea.appendText(\"Using custom application menu\\n\");\n+            if (!menuBar.getMenus().contains(applicationMenu)) {\n+                var toPrepend = new ArrayList<Menu>();\n+                toPrepend.add(applicationMenu);\n+                menuBar.getMenus().addAll(0, toPrepend);\n+            }\n+        }\n+    }\n+\n+    private MenuItem addItem(Menu menu, String title) {\n+        var item = new MenuItem(title);\n+        item.setOnAction(e -> {\n+            messageArea.appendText(title + \"\\n\");\n+        });\n+        menu.getItems().add(item);\n+        return item;\n+    }\n+\n+    private void buildApplicationMenu() {\n+        var item = addItem(applicationMenu, \"Custom menu item\");\n+        item.setAccelerator(new KeyCodeCombination(KeyCode.E, KeyCombination.SHORTCUT_DOWN));\n+        item.setOnAction(e -> {\n+            messageArea.appendText(\"Custom menu item\\n\");\n+        });\n+\n+        applicationMenu.getItems().add(new SeparatorMenuItem());\n+\n+        item = addItem(applicationMenu, \"Hide DefaultAppMenu\");\n+        item.setAccelerator(new KeyCodeCombination(KeyCode.H, KeyCombination.SHORTCUT_DOWN));\n+        item.setOnAction(e -> {\n+            ApplicationServices.hideApplication();\n+        });\n+\n+        item = addItem(applicationMenu, \"Hide Others\");\n+        item.setAccelerator(new KeyCodeCombination(KeyCode.H, KeyCombination.SHORTCUT_DOWN, KeyCombination.SHIFT_DOWN));\n+        item.setOnAction(e -> {\n+            ApplicationServices.hideOtherApplications();\n+        });\n+\n+        item = addItem(applicationMenu, \"Show All\");\n+        item.setOnAction(e -> {\n+            ApplicationServices.showAllApplications();\n+        });\n+\n+        applicationMenu.getItems().add(new SeparatorMenuItem());\n+\n+        item = addItem(applicationMenu, \"Quit DefaultAppMenu\");\n+        item.setAccelerator(new KeyCodeCombination(KeyCode.Q, KeyCombination.SHORTCUT_DOWN));\n+        item.setOnAction(e -> {\n+            Platform.exit();\n+        });\n+    }\n+\n+    private Menu buildTestMenu() {\n+        toggleSystemMenus.setAccelerator(new KeyCodeCombination(KeyCode.S, KeyCombination.SHORTCUT_DOWN));\n+        toggleSystemMenus.setOnAction(e -> {\n+            if (menuBar.isUseSystemMenuBar()) {\n+                menuBar.setUseSystemMenuBar(false);\n+                updateUI();\n+            } else {\n+                menuBar.setUseSystemMenuBar(true);\n+                updateUI();\n+            }\n+        });\n+        testMenu.getItems().add(toggleSystemMenus);\n+\n+        toggleDefaultMenus.setAccelerator(new KeyCodeCombination(KeyCode.D, KeyCombination.SHORTCUT_DOWN));\n+        toggleDefaultMenus.setOnAction(e -> {\n+            if (menuBar.isUseDefaultMenus()) {\n+                menuBar.setUseDefaultMenus(false);\n+                updateUI();\n+            } else {\n+                menuBar.setUseDefaultMenus(true);\n+                updateUI();\n+            }\n+        });\n+        testMenu.getItems().add(toggleDefaultMenus);\n+\n+        testMenu.getItems().add(new SeparatorMenuItem());\n+\n+        addItem(testMenu, \"Test item one\");\n+        addItem(testMenu, \"Test item two\");\n+        addItem(testMenu, \"Test item three\");\n+        addItem(testMenu, \"Test item four\");\n+\n+        return testMenu;\n+    }\n+\n+    @Override\n+    public void start(Stage stage) {\n+        messageArea.setEditable(false);\n+        messageArea.appendText(\"Use items in the Test menu to test the system menu bar\\n\");\n+\n+        buildApplicationMenu();\n+        buildTestMenu();\n+\n+        menuBar.getMenus().add(testMenu);\n+        menuBar.setUseSystemMenuBar(true);\n+        updateUI();\n+\n+        var box = new VBox(menuBar, messageArea);\n+        box.setVgrow(messageArea, Priority.ALWAYS);\n+        scene = new Scene(box, 640, 640);\n+\n+        stage.setScene(scene);\n+        stage.setTitle(\"Menu Key Test\");\n+        stage.show();\n+    }\n+}\n","filename":"tests\/manual\/controls\/DefaultAppMenu.java","additions":195,"deletions":0,"binary":false,"changes":195,"status":"added"}]}