{"files":[{"patch":"@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -41,5 +39,0 @@\n-    \/\/ NOTE: since this class can be initialized by application code in some\n-    \/\/ cases, we must encapsulate all calls to System.getProperty(\"...\") in\n-    \/\/ a doPrivileged block except for standard JVM properties such as\n-    \/\/ os.name, os.version, os.arch, java.vm.name, etc.\n-\n@@ -56,3 +49,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String str1 = AccessController.doPrivileged((PrivilegedAction<String>) () -> System.getProperty(\"javafx.platform\"));\n-        javafxPlatform = str1;\n+        javafxPlatform = System.getProperty(\"javafx.platform\");\n@@ -62,11 +53,3 @@\n-        @SuppressWarnings(\"removal\")\n-        boolean bool1 = AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> Boolean.getBoolean(\"com.sun.javafx.isEmbedded\"));\n-        embedded = bool1;\n-\n-        @SuppressWarnings(\"removal\")\n-        String str2 = AccessController.doPrivileged((PrivilegedAction<String>) () -> System.getProperty(\"glass.platform\", \"\").toLowerCase(Locale.ROOT));\n-        embeddedType = str2;\n-\n-        @SuppressWarnings(\"removal\")\n-        boolean bool2 = AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> Boolean.getBoolean(\"use.egl\"));\n-        useEGL = bool2;\n+        embedded = Boolean.getBoolean(\"com.sun.javafx.isEmbedded\");\n+        embeddedType = System.getProperty(\"glass.platform\", \"\").toLowerCase(Locale.ROOT);\n+        useEGL = Boolean.getBoolean(\"use.egl\");\n@@ -75,4 +58,2 @@\n-            @SuppressWarnings(\"removal\")\n-            boolean bool3 = AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> Boolean.getBoolean(\"doNativeComposite\"));\n-            doEGLCompositing = bool3;\n-        } else\n+            doEGLCompositing = Boolean.getBoolean(\"doNativeComposite\");\n+        } else {\n@@ -80,0 +61,1 @@\n+        }\n@@ -153,3 +135,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String useGles2 =\n-                AccessController.doPrivileged((PrivilegedAction<String>) () -> System.getProperty(\"use.gles2\"));\n+        String useGles2 = System.getProperty(\"use.gles2\");\n@@ -263,1 +243,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -273,18 +252,0 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            final File rtDir = getRTDir();\n-            final String propertyFilename = \"javafx.platform.properties\";\n-            File rtProperties = new File(rtDir, propertyFilename);\n-            \/\/ First look for javafx.platform.properties in the JavaFX runtime\n-            \/\/ Then in the installation directory of the JRE\n-            if (rtProperties.exists()) {\n-                loadPropertiesFromFile(rtProperties);\n-                return null;\n-            }\n-            String javaHome = System.getProperty(\"java.home\");\n-            File javaHomeProperties = new File(javaHome,\n-                                               \"lib\" + File.separator\n-                                               + propertyFilename);\n-            if (javaHomeProperties.exists()) {\n-                loadPropertiesFromFile(javaHomeProperties);\n-                return null;\n-            }\n@@ -292,9 +253,25 @@\n-            String javafxRuntimePath = System.getProperty(\"javafx.runtime.path\");\n-            File javafxRuntimePathProperties = new File(javafxRuntimePath,\n-                                                     File.separator + propertyFilename);\n-            if (javafxRuntimePathProperties.exists()) {\n-               loadPropertiesFromFile(javafxRuntimePathProperties);\n-               return null;\n-            }\n-            return null;\n-        });\n+        final File rtDir = getRTDir();\n+        final String propertyFilename = \"javafx.platform.properties\";\n+        File rtProperties = new File(rtDir, propertyFilename);\n+        \/\/ First look for javafx.platform.properties in the JavaFX runtime\n+        \/\/ Then in the installation directory of the JRE\n+        if (rtProperties.exists()) {\n+            loadPropertiesFromFile(rtProperties);\n+            return;\n+        }\n+        String javaHome = System.getProperty(\"java.home\");\n+        File javaHomeProperties = new File(javaHome,\n+                                           \"lib\" + File.separator\n+                                           + propertyFilename);\n+        if (javaHomeProperties.exists()) {\n+            loadPropertiesFromFile(javaHomeProperties);\n+            return;\n+        }\n+\n+        String javafxRuntimePath = System.getProperty(\"javafx.runtime.path\");\n+        File javafxRuntimePathProperties = new File(javafxRuntimePath,\n+                                                 File.separator + propertyFilename);\n+        if (javafxRuntimePathProperties.exists()) {\n+           loadPropertiesFromFile(javafxRuntimePathProperties);\n+           return;\n+        }\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/PlatformUtil.java","additions":33,"deletions":56,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -57,2 +55,1 @@\n-    @SuppressWarnings(\"removal\")\n-    private static long THRESHOLD = AccessController.doPrivileged((PrivilegedAction<Integer>) () -> Integer.getInteger(\"javafx.pulseLogger.threshold\", 17));\n+    private static long THRESHOLD = Integer.getInteger(\"javafx.pulseLogger.threshold\", 17);\n@@ -63,3 +60,1 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final int EXIT_ON_PULSE =\n-            AccessController.doPrivileged((PrivilegedAction<Integer>) () -> Integer.getInteger(\"javafx.pulseLogger.exitOnPulse\", 0));\n+    private static final int EXIT_ON_PULSE = Integer.getInteger(\"javafx.pulseLogger.exitOnPulse\", 0);\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/logging\/PrintLogger.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -105,1 +103,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -107,1 +104,1 @@\n-        return AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> Boolean.getBoolean(\"javafx.pulseLogger\"));\n+        return Boolean.getBoolean(\"javafx.pulseLogger\");\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/logging\/PulseLogger.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -39,1 +37,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -41,2 +38,1 @@\n-            = AccessController.doPrivileged((PrivilegedAction<Boolean>) ()\n-                    -> Boolean.getBoolean(\"sun.reflect.debugModuleAccessChecks\"));\n+            = Boolean.getBoolean(\"sun.reflect.debugModuleAccessChecks\");\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/property\/MethodHelper.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,24 +52,11 @@\n-\n-        @SuppressWarnings(\"removal\")\n-        var dummy = java.security.AccessController.doPrivileged(\n-            new java.security.PrivilegedAction<>() {\n-                @Override\n-                public Object run() {\n-                    \/* The thread must be a member of a thread group\n-                     * which will not get GCed before VM exit.\n-                     * Make its parent the top-level thread group.\n-                     *\/\n-                    ThreadGroup tg = Thread.currentThread().getThreadGroup();\n-                    for (ThreadGroup tgn = tg;\n-                         tgn != null;\n-                         tg = tgn, tgn = tg.getParent());\n-                    Thread t =\n-                        new Thread(tg, disposerInstance, \"Property Disposer\");\n-                    t.setContextClassLoader(null);\n-                    t.setDaemon(true);\n-                    t.setPriority(Thread.MAX_PRIORITY);\n-                    t.start();\n-                    return null;\n-                }\n-            }\n-        );\n+        \/* The thread must be a member of a thread group\n+         * which will not get GCed before VM exit.\n+         * Make its parent the top-level thread group.\n+         *\/\n+        ThreadGroup tg = Thread.currentThread().getThreadGroup();\n+        for (ThreadGroup tgn = tg; tgn != null; tg = tgn, tgn = tg.getParent());\n+        Thread t = new Thread(tg, disposerInstance, \"Property Disposer\");\n+        t.setContextClassLoader(null);\n+        t.setDaemon(true);\n+        t.setPriority(Thread.MAX_PRIORITY);\n+        t.start();\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/property\/adapter\/Disposer.java","additions":11,"deletions":24,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.security.PrivilegedExceptionAction;\n@@ -291,1 +290,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -294,13 +292,7 @@\n-            return AccessController.doPrivileged(\n-                new PrivilegedExceptionAction<Method>() {\n-                    @Override\n-                    public Method run() throws Exception {\n-                        Class<?> t = getTrampolineClass();\n-                        Class<?>[] types = {\n-                            Method.class, Object.class, Object[].class\n-                        };\n-                        Method b = t.getDeclaredMethod(\"invoke\", types);\n-                        b.setAccessible(true);\n-                        return b;\n-                    }\n-                });\n+            Class<?> t = getTrampolineClass();\n+            Class<?>[] types = {\n+                Method.class, Object.class, Object[].class\n+            };\n+            Method b = t.getDeclaredMethod(\"invoke\", types);\n+            b.setAccessible(true);\n+            return b;\n","filename":"modules\/javafx.base\/src\/main\/java\/com\/sun\/javafx\/reflect\/MethodUtil.java","additions":7,"deletions":15,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -40,4 +40,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -99,3 +95,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n-\n@@ -116,1 +109,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -119,9 +111,7 @@\n-        return AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> {\n-            try {\n-                return (Boolean)MethodHelper.invoke(descriptor.getGetter(), getBean(), (Object[])null);\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-        }, acc);\n+        try {\n+            return (Boolean)MethodHelper.invoke(descriptor.getGetter(), getBean(), (Object[])null);\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n@@ -137,1 +127,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -143,12 +132,8 @@\n-\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            try {\n-                MethodHelper.invoke(descriptor.getSetter(), getBean(), new Object[] {value});\n-                ExpressionHelper.fireValueChangedEvent(helper);\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-            return null;\n-        }, acc);\n+        try {\n+            MethodHelper.invoke(descriptor.getSetter(), getBean(), new Object[] {value});\n+            ExpressionHelper.fireValueChangedEvent(helper);\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanBooleanProperty.java","additions":15,"deletions":30,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -40,4 +40,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -99,3 +95,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n-\n@@ -116,1 +109,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -119,10 +111,8 @@\n-        return AccessController.doPrivileged((PrivilegedAction<Double>) () -> {\n-            try {\n-                return ((Number)MethodHelper.invoke(\n-                    descriptor.getGetter(), getBean(), (Object[])null)).doubleValue();\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-        }, acc);\n+        try {\n+            return ((Number)MethodHelper.invoke(\n+                descriptor.getGetter(), getBean(), (Object[])null)).doubleValue();\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n@@ -138,1 +128,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -144,12 +133,8 @@\n-\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            try {\n-                MethodHelper.invoke(descriptor.getSetter(), getBean(), new Object[] {value});\n-                ExpressionHelper.fireValueChangedEvent(helper);\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-            return null;\n-        }, acc);\n+        try {\n+            MethodHelper.invoke(descriptor.getSetter(), getBean(), new Object[] {value});\n+            ExpressionHelper.fireValueChangedEvent(helper);\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanDoubleProperty.java","additions":16,"deletions":31,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -40,4 +40,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -99,3 +95,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n-\n@@ -116,1 +109,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -119,10 +111,8 @@\n-        return AccessController.doPrivileged((PrivilegedAction<Float>) () -> {\n-            try {\n-                return ((Number)MethodHelper.invoke(\n-                    descriptor.getGetter(), getBean(), (Object[])null)).floatValue();\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-        }, acc);\n+        try {\n+            return ((Number)MethodHelper.invoke(\n+                descriptor.getGetter(), getBean(), (Object[])null)).floatValue();\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n@@ -138,1 +128,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -144,11 +133,8 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            try {\n-                MethodHelper.invoke(descriptor.getSetter(), getBean(), new Object[] {value});\n-                ExpressionHelper.fireValueChangedEvent(helper);\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-            return null;\n-        }, acc);\n+        try {\n+            MethodHelper.invoke(descriptor.getSetter(), getBean(), new Object[] {value});\n+            ExpressionHelper.fireValueChangedEvent(helper);\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanFloatProperty.java","additions":16,"deletions":30,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -40,4 +40,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -99,3 +95,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n-\n@@ -119,10 +112,8 @@\n-        return AccessController.doPrivileged((PrivilegedAction<Integer>) () -> {\n-            try {\n-                return ((Number)MethodHelper.invoke(\n-                    descriptor.getGetter(), getBean(), (Object[])null)).intValue();\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-        }, acc);\n+        try {\n+            return ((Number)MethodHelper.invoke(\n+                descriptor.getGetter(), getBean(), (Object[])null)).intValue();\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n@@ -138,1 +129,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -144,11 +134,8 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            try {\n-                MethodHelper.invoke(descriptor.getSetter(), getBean(), new Object[] {value});\n-                ExpressionHelper.fireValueChangedEvent(helper);\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-            return null;\n-        }, acc);\n+        try {\n+            MethodHelper.invoke(descriptor.getSetter(), getBean(), new Object[] {value});\n+            ExpressionHelper.fireValueChangedEvent(helper);\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanIntegerProperty.java","additions":16,"deletions":29,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -40,4 +40,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-\n@@ -99,3 +95,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n-\n@@ -116,1 +109,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -119,10 +111,8 @@\n-        return AccessController.doPrivileged((PrivilegedAction<Long>) () -> {\n-            try {\n-                return ((Number)MethodHelper.invoke(\n-                    descriptor.getGetter(), getBean(), (Object[])null)).longValue();\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-        }, acc);\n+        try {\n+            return ((Number)MethodHelper.invoke(\n+                descriptor.getGetter(), getBean(), (Object[])null)).longValue();\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n@@ -138,1 +128,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -144,11 +133,8 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            try {\n-                MethodHelper.invoke(descriptor.getSetter(), getBean(), new Object[] {value});\n-                ExpressionHelper.fireValueChangedEvent(helper);\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-            return null;\n-        }, acc);\n+        try {\n+            MethodHelper.invoke(descriptor.getSetter(), getBean(), new Object[] {value});\n+            ExpressionHelper.fireValueChangedEvent(helper);\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanLongProperty.java","additions":16,"deletions":30,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -40,4 +40,0 @@\n-import java.security.AccessController;\n-import java.security.AccessControlContext;\n-import java.security.PrivilegedAction;\n-\n@@ -101,3 +97,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n-\n@@ -118,1 +111,0 @@\n-    @SuppressWarnings({\"removal\",\"unchecked\"})\n@@ -121,9 +113,7 @@\n-        return AccessController.doPrivileged((PrivilegedAction<T>) () -> {\n-            try {\n-                return (T)MethodHelper.invoke(descriptor.getGetter(), getBean(), (Object[])null);\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-        }, acc);\n+        try {\n+            return (T)MethodHelper.invoke(descriptor.getGetter(), getBean(), (Object[])null);\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n@@ -139,1 +129,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -145,12 +134,8 @@\n-\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            try {\n-                MethodHelper.invoke(descriptor.getSetter(), getBean(), new Object[] {value});\n-                ExpressionHelper.fireValueChangedEvent(helper);\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-            return null;\n-        }, acc);\n+        try {\n+            MethodHelper.invoke(descriptor.getSetter(), getBean(), new Object[] {value});\n+            ExpressionHelper.fireValueChangedEvent(helper);\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanObjectProperty.java","additions":15,"deletions":30,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -40,4 +40,0 @@\n-import java.security.AccessController;\n-import java.security.AccessControlContext;\n-import java.security.PrivilegedAction;\n-\n@@ -99,3 +95,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n-\n@@ -116,1 +109,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -119,9 +111,7 @@\n-        return AccessController.doPrivileged((PrivilegedAction<String>) () -> {\n-            try {\n-                return (String)MethodHelper.invoke(descriptor.getGetter(), getBean(), (Object[])null);\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-        }, acc);\n+        try {\n+            return (String)MethodHelper.invoke(descriptor.getGetter(), getBean(), (Object[])null);\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n@@ -137,1 +127,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -143,11 +132,8 @@\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            try {\n-                MethodHelper.invoke(descriptor.getSetter(), getBean(), new Object[] {value});\n-                ExpressionHelper.fireValueChangedEvent(helper);\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-            return null;\n-        }, acc);\n+        try {\n+            MethodHelper.invoke(descriptor.getSetter(), getBean(), new Object[] {value});\n+            ExpressionHelper.fireValueChangedEvent(helper);\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/JavaBeanStringProperty.java","additions":15,"deletions":29,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -36,4 +36,0 @@\n-import java.security.AccessController;\n-import java.security.AccessControlContext;\n-import java.security.PrivilegedAction;\n-\n@@ -88,3 +84,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n-\n@@ -105,1 +98,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -108,9 +100,7 @@\n-        return AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> {\n-            try {\n-                return (Boolean)MethodHelper.invoke(descriptor.getGetter(), getBean(), (Object[])null);\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-        }, acc);\n+        try {\n+            return (Boolean)MethodHelper.invoke(descriptor.getGetter(), getBean(), (Object[])null);\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanBooleanProperty.java","additions":7,"deletions":17,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -36,4 +36,0 @@\n-import java.security.AccessController;\n-import java.security.AccessControlContext;\n-import java.security.PrivilegedAction;\n-\n@@ -88,3 +84,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n-\n@@ -105,1 +98,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -108,10 +100,8 @@\n-        return AccessController.doPrivileged((PrivilegedAction<Double>) () -> {\n-            try {\n-                return ((Number)MethodHelper.invoke(\n-                    descriptor.getGetter(), getBean(), (Object[])null)).doubleValue();\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-        }, acc);\n+        try {\n+            return ((Number)MethodHelper.invoke(\n+                descriptor.getGetter(), getBean(), (Object[])null)).doubleValue();\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanDoubleProperty.java","additions":8,"deletions":18,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -36,4 +36,0 @@\n-import java.security.AccessController;\n-import java.security.AccessControlContext;\n-import java.security.PrivilegedAction;\n-\n@@ -88,3 +84,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n-\n@@ -105,1 +98,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -108,10 +100,8 @@\n-        return AccessController.doPrivileged((PrivilegedAction<Float>) () -> {\n-            try {\n-                return ((Number)MethodHelper.invoke(\n-                    descriptor.getGetter(), getBean(), (Object[])null)).floatValue();\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-        }, acc);\n+        try {\n+            return ((Number)MethodHelper.invoke(\n+                descriptor.getGetter(), getBean(), (Object[])null)).floatValue();\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanFloatProperty.java","additions":8,"deletions":18,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -36,4 +36,0 @@\n-import java.security.AccessController;\n-import java.security.AccessControlContext;\n-import java.security.PrivilegedAction;\n-\n@@ -88,3 +84,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n-\n@@ -105,1 +98,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -108,10 +100,8 @@\n-        return AccessController.doPrivileged((PrivilegedAction<Integer>) () -> {\n-            try {\n-                return ((Number)MethodHelper.invoke(\n-                    descriptor.getGetter(), getBean(), (Object[])null)).intValue();\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-        }, acc);\n+        try {\n+            return ((Number)MethodHelper.invoke(\n+                descriptor.getGetter(), getBean(), (Object[])null)).intValue();\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanIntegerProperty.java","additions":8,"deletions":18,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -36,4 +36,0 @@\n-import java.security.AccessController;\n-import java.security.AccessControlContext;\n-import java.security.PrivilegedAction;\n-\n@@ -88,3 +84,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n-\n@@ -105,1 +98,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -108,10 +100,8 @@\n-        return AccessController.doPrivileged((PrivilegedAction<Long>) () -> {\n-            try {\n-                return ((Number)MethodHelper.invoke(\n-                    descriptor.getGetter(), getBean(), (Object[])null)).longValue();\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-        }, acc);\n+        try {\n+            return ((Number)MethodHelper.invoke(\n+                descriptor.getGetter(), getBean(), (Object[])null)).longValue();\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanLongProperty.java","additions":8,"deletions":18,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -36,4 +36,0 @@\n-import java.security.AccessController;\n-import java.security.AccessControlContext;\n-import java.security.PrivilegedAction;\n-\n@@ -90,3 +86,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n-\n@@ -107,1 +100,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -110,9 +102,7 @@\n-        return AccessController.doPrivileged((PrivilegedAction<T>) () -> {\n-            try {\n-                return (T)MethodHelper.invoke(descriptor.getGetter(), getBean(), (Object[])null);\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-        }, acc);\n+        try {\n+            return (T)MethodHelper.invoke(descriptor.getGetter(), getBean(), (Object[])null);\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanObjectProperty.java","additions":7,"deletions":17,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -36,4 +36,0 @@\n-import java.security.AccessController;\n-import java.security.AccessControlContext;\n-import java.security.PrivilegedAction;\n-\n@@ -88,3 +84,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc = AccessController.getContext();\n-\n@@ -105,1 +98,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -108,9 +100,7 @@\n-        return AccessController.doPrivileged((PrivilegedAction<String>) () -> {\n-            try {\n-                return (String)MethodHelper.invoke(descriptor.getGetter(), getBean(), (Object[])null);\n-            } catch (IllegalAccessException e) {\n-                throw new UndeclaredThrowableException(e);\n-            } catch (InvocationTargetException e) {\n-                throw new UndeclaredThrowableException(e);\n-            }\n-        }, acc);\n+        try {\n+            return (String)MethodHelper.invoke(descriptor.getGetter(), getBean(), (Object[])null);\n+        } catch (IllegalAccessException e) {\n+            throw new UndeclaredThrowableException(e);\n+        } catch (InvocationTargetException e) {\n+            throw new UndeclaredThrowableException(e);\n+        }\n","filename":"modules\/javafx.base\/src\/main\/java\/javafx\/beans\/property\/adapter\/ReadOnlyJavaBeanStringProperty.java","additions":7,"deletions":17,"binary":false,"changes":24,"status":"modified"}]}