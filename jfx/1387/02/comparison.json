{"files":[{"patch":"@@ -4,2 +4,7 @@\n-\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\"\/>\n-\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/base\">\n+\t<classpathentry kind=\"src\" path=\"src\/main\/resources\"\/>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/controls\">\n@@ -15,1 +20,6 @@\n-\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/controls\">\n+\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/base\">\n+\t\t<attributes>\n+\t\t\t<attribute name=\"module\" value=\"true\"\/>\n+\t\t<\/attributes>\n+\t<\/classpathentry>\n+\t<classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"\/swing\">\n","filename":"tests\/performance\/3DLighting\/.classpath","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,207 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package attenuation;\n+\n+import javafx.animation.Animation;\n+import javafx.animation.AnimationTimer;\n+import javafx.animation.TranslateTransition;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Slider;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.paint.Color;\n+import javafx.scene.text.Font;\n+import javafx.scene.text.Text;\n+import javafx.scene.text.TextBoundsType;\n+import javafx.util.Duration;\n+import javafx.util.converter.NumberStringConverter;\n+\n+\/**\n+ * Responsible for performance measurements.\n+ *\/\n+final class Benchmark {\n+\n+    private final static double SPHERE_RADIUS = 50;\n+\n+    private final Environment environment;\n+    private final FPSCounter fpsCouner = new FPSCounter();\n+    private final TranslateTransition animation = createAnimation();\n+\n+    Benchmark(Environment environment) {\n+        this.environment = environment;\n+    }\n+\n+    private TranslateTransition createAnimation() {\n+        var anim = new TranslateTransition(Duration.seconds(2));\n+        anim.setAutoReverse(true);\n+        anim.setCycleCount(Animation.INDEFINITE);\n+        anim.setFromZ(150);\n+        anim.setToZ(0);\n+        return anim;\n+    }\n+\n+    Button createStopButton() {\n+        var stopGraphic = new Text(\"⏹\");\n+        stopGraphic.setBoundsType(TextBoundsType.VISUAL);\n+        stopGraphic.setFill(Color.RED);\n+        stopGraphic.setFont(Font.font(20));\n+\n+        var stopButton = new Button(\"\", stopGraphic);\n+        stopButton.setPadding(new Insets(2.5));\n+        stopButton.setAlignment(Pos.CENTER_RIGHT);\n+        stopButton.setTooltip(new Tooltip(\"Stop measurements\"));\n+        stopButton.setOnAction(e -> stopMeasurement());\n+        return stopButton;\n+    }\n+\n+    Button createPlayButton() {\n+        var playGraphic = new Text(\"▶\");\n+        playGraphic.setBoundsType(TextBoundsType.VISUAL);\n+        playGraphic.setFill(Color.GREEN);\n+        playGraphic.setFont(Font.font(40));\n+\n+        var playButton = new Button(\"\", playGraphic);\n+        playButton.setPadding(new Insets(1, 2, 2, 3));\n+        playButton.setTooltip(new Tooltip(\"Start measurements\"));\n+        playButton.setOnAction(e -> startMeasurement());\n+        return playButton;\n+    }\n+\n+    HBox createSphereControls() {\n+        var subdivisionSlider = new Slider(10, 1000, 60);\n+        subdivisionSlider.setMajorTickUnit(50);\n+        setupSlider(subdivisionSlider);\n+\n+        var subdivisionLabel = new Label();\n+        subdivisionLabel.textProperty().bindBidirectional(subdivisionSlider.valueProperty(), new NumberStringConverter(\"#\"));\n+\n+        var sphere = new Button(\"Sphere\");\n+        sphere.setOnAction(e -> switchTo(Models.createSphere(SPHERE_RADIUS, (int) subdivisionSlider.getValue())));\n+\n+        return new HBox(sphere, subdivisionSlider, subdivisionLabel);\n+    }\n+\n+    HBox createMeshControls() {\n+        var quadSlider = new Slider(100, 5000, 1000);\n+        quadSlider.setMajorTickUnit(100);\n+        setupSlider(quadSlider);\n+\n+        var quadLabel = new Label();\n+        quadLabel.textProperty().bindBidirectional(quadSlider.valueProperty(), new NumberStringConverter(\"#\"));\n+\n+        var mesh = new Button(\"Mesh\");\n+        mesh.setOnAction(e -> switchTo(Models.createMeshView((int) quadSlider.getValue())));\n+\n+        return new HBox(mesh, quadSlider, quadLabel);\n+    }\n+\n+    private void setupSlider(Slider slider) {\n+        slider.setMinorTickCount(0);\n+        slider.setShowTickLabels(true);\n+        slider.setShowTickMarks(true);\n+        slider.setSnapToTicks(true);\n+    }\n+\n+    private void switchTo(Node node) {\n+        stopMeasurement();\n+        animation.setNode(node);\n+        environment.switchTo(node);\n+    }\n+\n+    private void startMeasurement() {\n+        animation.playFromStart();\n+        fpsCouner.start();\n+    }\n+\n+    private void stopMeasurement() {\n+        fpsCouner.stop();\n+        fpsCouner.reset();\n+        animation.stop();\n+    }\n+\n+    private final class FPSCounter extends AnimationTimer {\n+\n+        private int skipFrames = 100;\n+        private long lastTime = -1;\n+        private long elapsedTime;\n+        private int elapsedFrames;\n+        private long totalElapsedTime;\n+        private int totalElapsedFrames;\n+\n+        @Override\n+        public void handle(long now) {\n+            if (skipFrames > 0) {\n+                --skipFrames;\n+                return;\n+            }\n+\n+            if (lastTime < 0) {\n+                lastTime = System.nanoTime();\n+                elapsedTime = 0;\n+                elapsedFrames = 0;\n+                totalElapsedTime = 0;\n+                totalElapsedFrames = 0;\n+                return;\n+            }\n+\n+            long currTime = System.nanoTime();\n+            elapsedTime += currTime - lastTime;\n+            elapsedFrames += 1;\n+            totalElapsedTime += currTime - lastTime;\n+            totalElapsedFrames += 1;\n+\n+            double elapsedSeconds = elapsedTime \/ 1e9;\n+            double totalElapsedSeconds = totalElapsedTime \/ 1e9;\n+            if (elapsedSeconds >= 5.0) {\n+                double fps = elapsedFrames \/ elapsedSeconds;\n+                System.out.println();\n+                System.out.println(\"instant fps: \" + fps);\n+                double avgFps = totalElapsedFrames \/ totalElapsedSeconds;\n+                System.out.println(\"average fps: \" + avgFps);\n+                System.out.flush();\n+                elapsedTime = 0;\n+                elapsedFrames = 0;\n+            }\n+\n+            lastTime = currTime;\n+        }\n+\n+        private void reset() {\n+            skipFrames = 100;\n+            lastTime = -1;\n+            elapsedTime = 0;\n+            elapsedFrames = 0;\n+            totalElapsedTime = 0;\n+            totalElapsedFrames = 0;\n+            System.out.println();\n+            System.out.println(\" --------------------- \");\n+        }\n+    }\n+}\n","filename":"tests\/performance\/3DLighting\/src\/main\/java\/attenuation\/Benchmark.java","additions":207,"deletions":0,"binary":false,"changes":207,"status":"added"},{"patch":"@@ -1,132 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package attenuation;\n-\n-import javafx.beans.binding.When;\n-import javafx.beans.property.BooleanProperty;\n-import javafx.beans.property.ObjectProperty;\n-import javafx.scene.Group;\n-import javafx.scene.control.CheckBox;\n-import javafx.scene.control.ColorPicker;\n-import javafx.scene.image.Image;\n-import javafx.scene.image.WritableImage;\n-import javafx.scene.layout.GridPane;\n-import javafx.scene.layout.Pane;\n-import javafx.scene.paint.Color;\n-import javafx.scene.paint.PhongMaterial;\n-import javafx.scene.shape.Box;\n-import javafx.scene.transform.Rotate;\n-\n-class Boxes extends Group {\n-\n-    private static final PhongMaterial MATERIAL = new PhongMaterial();\n-\n-    \/**\n-     * Creates a box-like structure with 3 edges.\n-     *\n-     * @param size distance from the center of the box to an edge\n-     *\/\n-    Boxes(double size) {\n-        var back = createBox(size);\n-        back.setTranslateZ(size);\n-        var right = createBox(size);\n-        right.setRotationAxis(Rotate.Y_AXIS);\n-        right.setRotate(90);\n-        right.setTranslateX(size * 2);\n-        right.setTranslateZ(-size);\n-        var left = createBox(size);\n-        left.setRotationAxis(Rotate.Y_AXIS);\n-        left.setRotate(90);\n-        left.setTranslateX(-size * 2);\n-        left.setTranslateZ(-size);\n-        getChildren().addAll(left, back, right);\n-    }\n-\n-    private Box createBox(double size) {\n-        var box = new Box(size * 4, size * 4, 1);\n-        box.setMaterial(MATERIAL);\n-        return box;\n-    }\n-\n-    static Pane createBoxesControls() {\n-        var diffColorOn = new CheckBox(\"Diff Color\");\n-        diffColorOn.setSelected(true);\n-        var diffColorPicker = new ColorPicker(Color.WHITE);\n-        MATERIAL.diffuseColorProperty().bind(new When(diffColorOn.selectedProperty())\n-                .then(diffColorPicker.valueProperty()).otherwise((Color) null));\n-\n-        var specColorOn = new CheckBox(\"Spec Color\");\n-        var specColorPicker = new ColorPicker(Color.BLACK);\n-        MATERIAL.specularColorProperty().bind(new When(specColorOn.selectedProperty())\n-                .then(specColorPicker.valueProperty()).otherwise((Color) null));\n-\n-        var specPower = Controls.createSliderControl(\"Spec Power\", MATERIAL.specularPowerProperty(), 0, 400, MATERIAL.getSpecularPower());\n-\n-        var diffMapOn = new CheckBox(\"Diff Map\");\n-        var diffMapPicker = new ColorPicker(Color.BLACK);\n-        setupMapBindings(MATERIAL.diffuseMapProperty(), diffMapPicker.valueProperty(), diffMapOn.selectedProperty());\n-\n-        var specMapOn = new CheckBox(\"Spec Map\");\n-        var specMapPicker = new ColorPicker(Color.BLACK);\n-        setupMapBindings(MATERIAL.specularMapProperty(), specMapPicker.valueProperty(), specMapOn.selectedProperty());\n-\n-        var selfIllumMapOn = new CheckBox(\"SelfIllum Map\");\n-        var selfIllumMapPicker = new ColorPicker(Color.BLACK);\n-        setupMapBindings(MATERIAL.selfIlluminationMapProperty(), selfIllumMapPicker.valueProperty(), selfIllumMapOn.selectedProperty());\n-\n-        var gridPane = new GridPane();\n-        int row = 0;\n-        gridPane.add(diffColorOn, 0, row);\n-        gridPane.add(diffColorPicker, 1, row);\n-        row++;\n-        gridPane.add(specColorOn, 0, row);\n-        gridPane.add(specColorPicker, 1, row);\n-        row++;\n-        gridPane.add(specPower, 0, row, 2, 1);\n-        row++;\n-        gridPane.add(diffMapOn, 0, row);\n-        gridPane.add(diffMapPicker, 1, row);\n-        row++;\n-        gridPane.add(specMapOn, 0, row);\n-        gridPane.add(specMapPicker, 1, row);\n-        row++;\n-        gridPane.add(selfIllumMapOn, 0, row);\n-        gridPane.add(selfIllumMapPicker, 1, row);\n-        return gridPane;\n-    }\n-\n-    private static void setupMapBindings(ObjectProperty<Image> map, ObjectProperty<Color> colorProp, BooleanProperty on) {\n-        var image = createMapImage(colorProp);\n-        map.bind(new When(on).then(image).otherwise((WritableImage) null));\n-    }\n-\n-    static Image createMapImage(ObjectProperty<Color> colorProp) {\n-        var image = new WritableImage(1, 1);\n-        image.getPixelWriter().setColor(0, 0, colorProp.get());\n-        colorProp.addListener((obs, ov, nv) -> image.getPixelWriter().setColor(0, 0, nv));\n-        return image;\n-    }\n-}\n","filename":"tests\/performance\/3DLighting\/src\/main\/java\/attenuation\/Boxes.java","additions":0,"deletions":132,"binary":false,"changes":132,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import javafx.scene.PointLight;\n@@ -43,0 +42,3 @@\n+\/**\n+ * Camera controls for a 3D environment.\n+ *\/\n","filename":"tests\/performance\/3DLighting\/src\/main\/java\/attenuation\/CameraScene3D.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package attenuation;\n+\n+import java.awt.Desktop;\n+import java.awt.image.BufferedImage;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import javax.imageio.ImageIO;\n+\n+import javafx.embed.swing.SwingFXUtils;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Alert.AlertType;\n+import javafx.scene.image.Image;\n+\n+\/**\n+ * Utility class for creating screenshots.\n+ *\/\n+final class CaptureUtils {\n+\n+    enum Format {\n+        BMP,\n+        GIF,\n+        JPG,\n+        PNG,\n+        TIF\n+    }\n+\n+    private static final Path FOLDER = Path.of(\"screenshots\");\n+\n+    private static int imageNum = 1;\n+\n+    static void capture(Image fxImage, Format extension) {\n+        BufferedImage image = SwingFXUtils.fromFXImage(fxImage, null);\n+        BufferedImage rgbImage = new BufferedImage(image.getWidth(), image.getHeight(), BufferedImage.TYPE_3BYTE_BGR);\n+        rgbImage.getGraphics().drawImage(image, 0, 0, null);\n+\n+        String formatName = extension.name().toLowerCase();\n+        var file = FOLDER.resolve(Path.of(\"screenshot\" + imageNum + \".\" + formatName)).toAbsolutePath().toFile();\n+        try {\n+            Files.createDirectories(FOLDER);\n+            if (!ImageIO.write(rgbImage, formatName, file)) {\n+                throw new IOException(\"No writer found for \" + formatName);\n+            }\n+            Desktop.getDesktop().open(FOLDER.toAbsolutePath().toFile());\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+            var alert = new Alert(AlertType.ERROR);\n+            alert.setContentText(e.getMessage());\n+            alert.showAndWait();\n+        }\n+        imageNum++;\n+    }\n+}\n","filename":"tests\/performance\/3DLighting\/src\/main\/java\/attenuation\/CaptureUtils.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,2 @@\n+import javafx.geometry.VPos;\n+import javafx.scene.AmbientLight;\n@@ -47,0 +49,2 @@\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.layout.GridPane;\n@@ -49,1 +53,0 @@\n-import javafx.scene.layout.VBox;\n@@ -54,0 +57,3 @@\n+\/**\n+ * Utility class for creating adjustment controls.\n+ *\/\n@@ -56,1 +62,5 @@\n-    static TitledPane addPointLightControls(PointLight light) {\n+    static Node createLightControls(AmbientLight light) {\n+        return createTitlePane(light, null);\n+    }\n+\n+    static Node createLightControls(PointLight light) {\n@@ -58,1 +68,6 @@\n-        return createLightControls(light, controls);\n+        return createTitlePane(light, controls);\n+    }\n+\n+    static Node createLightControls(SpotLight light) {\n+        var controls = createSpotLightControls(light);\n+        return createTitlePane(light, controls);\n@@ -61,6 +76,4 @@\n-    static TitledPane addSpotLightControls(SpotLight light) {\n-        var ia = createSliderControl(\"inner\", light.innerAngleProperty(), 0, 180, light.getInnerAngle());\n-        var oa = createSliderControl(\"outer\", light.outerAngleProperty(), 0, 180, light.getOuterAngle());\n-        var fo = createSliderControl(\"falloff\", light.falloffProperty(), -5, 5, light.getFalloff());\n-        VBox controls = createPointLightControls(light);\n-        controls.getChildren().addAll(ia, oa, fo);\n+    static Node createLightControls(DirectionalLight light) {\n+        var controls = createDirectionControls(light.getTransforms(), light.directionProperty());\n+        return createTitlePane(light, controls);\n+    }\n@@ -68,3 +81,17 @@\n-        List<Node> directionControls = createDirectionControls(light.getTransforms(), light.directionProperty());\n-        controls.getChildren().addAll(directionControls);\n-        return createLightControls(light, controls);\n+    private static Pane createSpotLightControls(SpotLight light) {\n+        GridPane gridPane = createPointLightControls(light);\n+\n+        var ia = createSliderControl(light.innerAngleProperty(), 0, 180, light.getInnerAngle());\n+        var oa = createSliderControl(light.outerAngleProperty(), 0, 180, light.getOuterAngle());\n+        var fo = createSliderControl(light.falloffProperty(), -5, 5, light.getFalloff());\n+        gridPane.addRow(gridPane.getRowCount(), createLabel(\"inner\", \"Inner angle\"), ia);\n+        gridPane.addRow(gridPane.getRowCount(), createLabel(\"outer\", \"Outer angle\"), oa);\n+        gridPane.addRow(gridPane.getRowCount(), createLabel(\"falloff\", \"Falloff factor\"), fo);\n+\n+        GridPane directionControls = createDirectionControls(light.getTransforms(), light.directionProperty());\n+        var children = List.copyOf(directionControls.getChildren());\n+        int rowCount = gridPane.getRowCount();\n+        for (var child : children) {\n+            gridPane.add(child, GridPane.getColumnIndex(child), GridPane.getRowIndex(child) + rowCount);\n+        }\n+        return gridPane;\n@@ -73,6 +100,20 @@\n-    private static VBox createPointLightControls(PointLight light) {\n-        var range = createSliderControl(\"range\", light.maxRangeProperty(), 0, 500, 150);\n-        var c = createSliderControl(\"constant\", light.constantAttenuationProperty(), -1, 1, light.getConstantAttenuation());\n-        var lc = createSliderControl(\"linear\", light.linearAttenuationProperty(), -0.1, 0.1, light.getLinearAttenuation());\n-        var qc = createSliderControl(\"quadratic\", light.quadraticAttenuationProperty(), -0.01, 0.01, light.getQuadraticAttenuation());\n-        return new VBox(range, c, lc, qc);\n+    private static GridPane createPointLightControls(PointLight light) {\n+        var gridPane = new GridPane();\n+\n+        var x = createSliderControl(light.translateXProperty(), -100, 100, light.getTranslateX());\n+        var y = createSliderControl(light.translateYProperty(), -100, 100, light.getTranslateY());\n+        var z = createSliderControl(light.translateZProperty(), -100, 100, light.getTranslateZ());\n+        gridPane.addRow(gridPane.getRowCount(), createLabel(\"x\", \"Translate x\"), x);\n+        gridPane.addRow(gridPane.getRowCount(), createLabel(\"y\", \"Translate y\"), y);\n+        gridPane.addRow(gridPane.getRowCount(), createLabel(\"z\", \"Translate z\"), z);\n+\n+        var range = createSliderControl(light.maxRangeProperty(), 0, 500, 150);\n+        var ca = createSliderControl(light.constantAttenuationProperty(), -1, 1, light.getConstantAttenuation());\n+        var la = createSliderControl(light.linearAttenuationProperty(), -0.1, 0.1, light.getLinearAttenuation());\n+        var qa = createSliderControl(light.quadraticAttenuationProperty(), -0.01, 0.01, light.getQuadraticAttenuation());\n+        gridPane.addRow(gridPane.getRowCount(), createLabel(\"range\", \"Range\"), range);\n+        gridPane.addRow(gridPane.getRowCount(), createLabel(\"const\", \"Constant attenuation factor\"), ca);\n+        gridPane.addRow(gridPane.getRowCount(), createLabel(\"linear\", \"Linear attenuation factor\"), la);\n+        gridPane.addRow(gridPane.getRowCount(), createLabel(\"quad\", \"Quadratic attenuation factor\"), qa);\n+\n+        return gridPane;\n@@ -81,4 +122,28 @@\n-    static TitledPane addDirectionalLightControls(DirectionalLight light) {\n-        List<Node> directionControls = createDirectionControls(light.getTransforms(), light.directionProperty());\n-        var controls = new VBox(directionControls.toArray(new Node[0]));\n-        return createLightControls(light, controls);\n+    private static GridPane createDirectionControls(ObservableList<Transform> transforms, ObjectProperty<Point3D> dirProp) {\n+        var gridPane = new GridPane();\n+\n+        var transX = new Rotate(0, Rotate.X_AXIS);\n+        var transY = new Rotate(0, Rotate.Y_AXIS);\n+        var transZ = new Rotate(0, Rotate.Z_AXIS);\n+        transforms.addAll(transX, transY, transZ);\n+        var rotX = createSliderControl(transX.angleProperty(), -180, 180, 0);\n+        var rotY = createSliderControl(transY.angleProperty(), -180, 180, 0);\n+        var rotZ = createSliderControl(transZ.angleProperty(), -180, 180, 0);\n+        gridPane.addRow(gridPane.getRowCount(), createLabel(\"rot x\", \"Rotate x\"), rotX);\n+        gridPane.addRow(gridPane.getRowCount(), createLabel(\"rot y\", \"Rotate y\"), rotY);\n+        gridPane.addRow(gridPane.getRowCount(), createLabel(\"rot z\", \"Rotate z\"), rotZ);\n+\n+        var sliderX = createSlider(-5, 5, dirProp.get().getX());\n+        var sliderY = createSlider(-5, 5, dirProp.get().getY());\n+        var sliderZ = createSlider(-5, 5, dirProp.get().getZ());\n+        dirProp.bind(Bindings.createObjectBinding(() ->\n+            new Point3D(sliderX.getValue(), sliderY.getValue(), sliderZ.getValue()),\n+            sliderX.valueProperty(), sliderY.valueProperty(), sliderZ.valueProperty()));\n+        var dirX = createSliderControl(sliderX);\n+        var dirY = createSliderControl(sliderY);\n+        var dirZ = createSliderControl(sliderZ);\n+        gridPane.addRow(gridPane.getRowCount(), createLabel(\"dir x\", \"Direction x\"), dirX);\n+        gridPane.addRow(gridPane.getRowCount(), createLabel(\"dir y\", \"Direction y\"), dirY);\n+        gridPane.addRow(gridPane.getRowCount(), createLabel(\"dir z\", \"Direction z\"), dirZ);\n+\n+        return gridPane;\n@@ -87,1 +152,1 @@\n-    static TitledPane createLightControls(LightBase light, Pane content) {\n+    private static TitledPane createTitlePane(LightBase light, Pane content) {\n@@ -101,20 +166,5 @@\n-    private static List<Node> createDirectionControls(ObservableList<Transform> transforms, ObjectProperty<Point3D> directionProperty) {\n-        var transX = new Rotate(0, Rotate.X_AXIS);\n-        var transY = new Rotate(0, Rotate.Y_AXIS);\n-        var transZ = new Rotate(0, Rotate.Z_AXIS);\n-        transforms.addAll(transX, transY, transZ);\n-        var rotX = createSliderControl(\"rot x\", transX.angleProperty(), -180, 180, 0);\n-        var rotY = createSliderControl(\"rot y\", transY.angleProperty(), -180, 180, 0);\n-        var rotZ = createSliderControl(\"rot z\", transZ.angleProperty(), -180, 180, 0);\n-\n-        var sliderX = createSlider(-5, 5, directionProperty.get().getX());\n-        var sliderY = createSlider(-5, 5, directionProperty.get().getY());\n-        var sliderZ = createSlider(-5, 5, directionProperty.get().getZ());\n-        directionProperty.bind(Bindings.createObjectBinding(() ->\n-            new Point3D(sliderX.getValue(), sliderY.getValue(), sliderZ.getValue()),\n-            sliderX.valueProperty(), sliderY.valueProperty(), sliderZ.valueProperty()));\n-        var dirX = createSliderControl(\"dir x\", sliderX);\n-        var dirY = createSliderControl(\"dir y\", sliderY);\n-        var dirZ = createSliderControl(\"dir z\", sliderZ);\n-\n-        return List.of(rotX, rotY, rotZ, dirX, dirY, dirZ);\n+    private static Label createLabel(String name, String tooltipText) {\n+        var label = new Label(name);\n+        label.setTooltip(new Tooltip(tooltipText));\n+        GridPane.setValignment(label, VPos.TOP);\n+        return label;\n@@ -123,1 +173,1 @@\n-    static HBox createSliderControl(String name, DoubleProperty property, double min, double max, double start) {\n+    static HBox createSliderControl(DoubleProperty property, double min, double max, double start) {\n@@ -126,1 +176,1 @@\n-        return createSliderControl(name, slider);\n+        return createSliderControl(slider);\n@@ -129,3 +179,2 @@\n-    private static HBox createSliderControl(String name, Slider slider) {\n-        var tf = createTextField(slider);\n-        return new HBox(5, new Label(name), slider, tf);\n+    private static HBox createSliderControl(Slider slider) {\n+        return new HBox(slider, createTextField(slider));\n","filename":"tests\/performance\/3DLighting\/src\/main\/java\/attenuation\/Controls.java","additions":98,"deletions":49,"binary":false,"changes":147,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.util.ArrayList;\n@@ -31,0 +30,3 @@\n+import attenuation.CaptureUtils.Format;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.geometry.Insets;\n@@ -39,0 +41,11 @@\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.Tooltip;\n+import javafx.scene.image.Image;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BackgroundImage;\n+import javafx.scene.layout.BackgroundSize;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.VBox;\n@@ -41,1 +54,0 @@\n-import javafx.scene.shape.MeshView;\n@@ -43,1 +55,3 @@\n-import javafx.scene.shape.TriangleMesh;\n+import javafx.scene.text.Font;\n+import javafx.scene.text.Text;\n+import javafx.scene.text.TextBoundsType;\n@@ -45,0 +59,3 @@\n+\/**\n+ * The 3D environment. Includes the lights and shapes.\n+ *\/\n@@ -47,5 +64,4 @@\n-    private final static double LIGHT_REP_RADIUS = 2;\n-    private final static double LIGHT_Z_DIST = 50;\n-    private final static double LIGHT_X_DIST = 50;\n-\n-    private final static double SPHERE_RADIUS = 50;\n+    static final Image BACKGROUND_IMAGE = new Image(CameraScene3D.class.getResourceAsStream(\"background.jpg\"));\n+    private static final double LIGHT_REP_RADIUS = 2;\n+    private static final double LIGHT_X_DIST = 50;\n+    static final double LIGHT_Z_DIST = 50;\n@@ -56,1 +72,1 @@\n-    final List<AmbientLight> ambientLights = List.of(ambientLight1, ambientLight2, ambientLight3);\n+    private final List<AmbientLight> ambientLights = List.of(ambientLight1, ambientLight2, ambientLight3);\n@@ -61,1 +77,1 @@\n-    final List<DirectionalLight> directionalLights = List.of(directionalLight1, directionalLight2, directionalLight3);\n+    private final List<DirectionalLight> directionalLights = List.of(directionalLight1, directionalLight2, directionalLight3);\n@@ -66,1 +82,1 @@\n-    final List<PointLight> pointLights = List.of(pointLight1, pointLight2, pointLight3);\n+    private final List<PointLight> pointLights = List.of(pointLight1, pointLight2, pointLight3);\n@@ -71,1 +87,1 @@\n-    final List<SpotLight> spotLights = List.of(spotLight1, spotLight2, spotLight3);\n+    private final List<SpotLight> spotLights = List.of(spotLight1, spotLight2, spotLight3);\n@@ -73,2 +89,2 @@\n-    private Group shapeGroup = new Group();\n-    private Group lightsGroup = new Group();\n+    private final Group shapeGroup = new Group();\n+    private final Group lightsGroup = new Group();\n@@ -77,1 +93,2 @@\n-        setStyle(\"-fx-background-color: teal\");\n+        setPrefWidth(BACKGROUND_IMAGE.getWidth() \/ 2.5);\n+        setPrefHeight(BACKGROUND_IMAGE.getHeight() \/ 2.5);\n@@ -80,1 +97,1 @@\n-        zoom.set(-350);\n+        zoom.set(-570);\n@@ -105,1 +122,1 @@\n-        lightRepMat.setSelfIlluminationMap(Boxes.createMapImage(light.colorProperty()));\n+        lightRepMat.selfIlluminationMapProperty().bind(light.colorProperty().map(MaterialControls::imageOf));\n@@ -119,6 +136,7 @@\n-    void forceDefaultLight(boolean force) {\n-        if (force) {\n-            rootGroup.getChildren().remove(lightsGroup);\n-        } else {\n-            rootGroup.getChildren().add(lightsGroup);\n-        }\n+    Node createLightsControls() {\n+        var controls = new VBox();\n+        ambientLights.forEach(light -> controls.getChildren().add(Controls.createLightControls(light)));\n+        pointLights.forEach(light -> controls.getChildren().add(Controls.createLightControls(light)));\n+        spotLights.forEach(light -> controls.getChildren().add(Controls.createLightControls(light)));\n+        directionalLights.forEach(light -> controls.getChildren().add(Controls.createLightControls(light)));\n+        return controls;\n@@ -127,2 +145,6 @@\n-    Group createBoxes() {\n-        return new Boxes(LIGHT_Z_DIST);\n+    Node createBackgroundControls() {\n+        var bgProp = new SimpleObjectProperty<Image>();\n+        var bgSize = new BackgroundSize(BackgroundSize.AUTO, BackgroundSize.AUTO, false, false, false, true);\n+        backgroundProperty().bind(bgProp.map(image -> new Background(new BackgroundImage(image, null, null, null, bgSize))));\n+        Node controls = MaterialControls.createMapControls(bgProp, MaterialControls.createFileChooser());\n+        return new HBox(new Label(\"Background\"), controls);\n@@ -131,2 +153,15 @@\n-    Sphere createSphere(int subdivisions) {\n-        return new Sphere(SPHERE_RADIUS, subdivisions);\n+    Node createScreenshotControls() {\n+        var formats = new ChoiceBox<Format>();\n+        formats.getItems().addAll(Format.values());\n+        formats.setValue(Format.PNG);\n+\n+        var graphic = new Text(\"📷\");\n+        graphic.setBoundsType(TextBoundsType.VISUAL);\n+        graphic.setFont(Font.font(32));\n+\n+        var screenshotButton = new Button(\"\", graphic);\n+        screenshotButton.setPadding(new Insets(2));\n+        screenshotButton.setTooltip(new Tooltip(\"Capture screenshot\"));\n+        screenshotButton.setOnAction(e -> CaptureUtils.capture(snapshot(null, null), formats.getValue()));\n+\n+        return new HBox(2, screenshotButton, formats);\n@@ -135,35 +170,10 @@\n-    MeshView createMeshView(int quadNum) {\n-        \/\/ Points and texCoords array defining a single quad that will\n-        \/\/ be referenced by all pairs of triangles in the faces array\n-        final float[] points = {\n-            -75.0f,  75.0f, 0.0f,\n-             75.0f,  75.0f, 0.0f,\n-             75.0f, -75.0f, 0.0f,\n-            -75.0f, -75.0f, 0.0f\n-        };\n-        final float[] texCoords = {\n-            0.0f, 0.0f,\n-            1.0f, 0.0f,\n-            1.0f, 1.0f,\n-            0.0f, 1.0f\n-        };\n-        \/\/ List of faces defining a single quad (pair of triangles).\n-        \/\/ This is replicated for the desired number of quads\n-        var face = List.of(\n-            0, 0, 1, 1, 2, 2,\n-            0, 0, 2, 2, 3, 3\n-        );\n-\n-        var faces = new ArrayList<Integer>(quadNum * face.size());\n-        for (int i = 0; i < quadNum; i++) {\n-            faces.addAll(face);\n-        }\n-\n-        var mesh = new TriangleMesh();\n-        mesh.getPoints().setAll(points);\n-        mesh.getTexCoords().setAll(texCoords);\n-        int[] array = faces.stream().mapToInt(i -> i).toArray();\n-        mesh.getFaces().setAll(array);\n-\n-        var mv = new MeshView(mesh);\n-        return mv;\n+    Node createDefaultLightControl() {\n+        var checkBox = new CheckBox(\"Force default light\");\n+        checkBox.setOnAction(e -> {\n+            if (checkBox.isSelected()) {\n+                rootGroup.getChildren().remove(lightsGroup);\n+            } else {\n+                rootGroup.getChildren().add(lightsGroup);\n+            }\n+        });\n+        return checkBox;\n","filename":"tests\/performance\/3DLighting\/src\/main\/java\/attenuation\/Environment.java","additions":73,"deletions":63,"binary":false,"changes":136,"status":"modified"},{"patch":"@@ -1,87 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package attenuation;\n-\n-import javafx.animation.AnimationTimer;\n-\n-final class FPSCounter extends AnimationTimer {\n-\n-    private int skipFrames = 100;\n-    private long lastTime = -1;\n-    private long elapsedTime;\n-    private int elapsedFrames;\n-    private long totalElapsedTime;\n-    private int totalElapsedFrames;\n-\n-    @Override\n-    public void handle(long now) {\n-        if (skipFrames > 0) {\n-            --skipFrames;\n-            return;\n-        }\n-\n-        if (lastTime < 0) {\n-            lastTime = System.nanoTime();\n-            elapsedTime = 0;\n-            elapsedFrames = 0;\n-            totalElapsedTime = 0;\n-            totalElapsedFrames = 0;\n-            return;\n-        }\n-\n-        long currTime = System.nanoTime();\n-        elapsedTime += currTime - lastTime;\n-        elapsedFrames += 1;\n-        totalElapsedTime += currTime - lastTime;\n-        totalElapsedFrames += 1;\n-\n-        double elapsedSeconds = elapsedTime \/ 1e9;\n-        double totalElapsedSeconds = totalElapsedTime \/ 1e9;\n-        if (elapsedSeconds >= 5.0) {\n-            double fps = elapsedFrames \/ elapsedSeconds;\n-            System.out.println();\n-            System.out.println(\"instant fps: \" + fps);\n-            double avgFps = totalElapsedFrames \/ totalElapsedSeconds;\n-            System.out.println(\"average fps: \" + avgFps);\n-            System.out.flush();\n-            elapsedTime = 0;\n-            elapsedFrames = 0;\n-        }\n-\n-        lastTime = currTime;\n-    }\n-\n-    void reset() {\n-        skipFrames = 100;\n-        lastTime = -1;\n-        elapsedTime = 0;\n-        elapsedFrames = 0;\n-        totalElapsedTime = 0;\n-        totalElapsedFrames = 0;\n-        System.out.println();\n-        System.out.println(\" --------------------- \");\n-    }\n-}\n","filename":"tests\/performance\/3DLighting\/src\/main\/java\/attenuation\/FPSCounter.java","additions":0,"deletions":87,"binary":false,"changes":87,"status":"deleted"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package attenuation;\n+\n+import attenuation.Models.Model;\n+import javafx.application.Application;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.scene.control.ChoiceBox;\n+import javafx.scene.control.ContentDisplay;\n+import javafx.scene.control.ScrollPane;\n+import javafx.scene.control.TitledPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Priority;\n+import javafx.scene.layout.VBox;\n+import javafx.stage.Stage;\n+\n+\/**\n+ * A utility application for testing 3D features, including lighting, materials, and performance.\n+ * <p>\n+ * <b>Important<\/b>: when measuring performance, make sure that no other application on your system is rendering heavy\n+ * graphics, like videos, to a screen, as this will corrupt the measurement.\n+ *\/\n+public class LightingApplication extends Application {\n+\n+    private final Environment environment = new Environment();\n+    private final Benchmark benchmark = new Benchmark(environment);\n+\n+    @Override\n+    public void start(Stage stage) throws Exception {\n+        Node perfControls = createPerformanceControls();\n+        Node modelsControls = createModelsControls();\n+\n+        Node backgroundControls = environment.createBackgroundControls();\n+        Node screenshotControls = environment.createScreenshotControls();\n+        Node defaultLightControl = environment.createDefaultLightControl();\n+        Node lightsControls = environment.createLightsControls();\n+\n+        var controls = new VBox(perfControls, modelsControls, backgroundControls, screenshotControls,\n+                defaultLightControl, lightsControls);\n+\n+        var hBox = new HBox(new ScrollPane(controls), environment);\n+        HBox.setHgrow(environment, Priority.ALWAYS);\n+\n+        stage.setScene(new Scene(hBox));\n+        stage.setTitle(\"3DLighting\");\n+        stage.show();\n+    }\n+\n+    private Node createPerformanceControls() {\n+        var playButton = benchmark.createPlayButton();\n+        var stopButton = benchmark.createStopButton();\n+\n+        Node sphereControls = benchmark.createSphereControls();\n+        Node meshControls = benchmark.createMeshControls();\n+\n+        var titlePane = new TitledPane(\"Performance\", new VBox(sphereControls, meshControls));\n+        titlePane.setGraphic(new HBox(5, playButton, stopButton));\n+        titlePane.setContentDisplay(ContentDisplay.RIGHT);\n+        titlePane.setExpanded(false);\n+        return titlePane;\n+    }\n+\n+    private Node createModelsControls() {\n+        var models = new ChoiceBox<Model>();\n+        models.getItems().addAll(Model.values());\n+        models.setValue(Model.NONE);\n+        models.setOnAction(e -> environment.switchTo(Models.createModel(models.getValue())));\n+\n+        var titlePane = new TitledPane(\"Models\", MaterialControls.create());\n+        titlePane.setGraphic(models);\n+        titlePane.setContentDisplay(ContentDisplay.RIGHT);\n+        titlePane.setExpanded(false);\n+        return titlePane;\n+    }\n+\n+    public static void main(String[] args) {\n+        launch(args);\n+    }\n+}\n","filename":"tests\/performance\/3DLighting\/src\/main\/java\/attenuation\/LightingApplication.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"},{"patch":"@@ -1,166 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package attenuation;\n-\n-import javafx.animation.Animation;\n-import javafx.animation.TranslateTransition;\n-import javafx.application.Application;\n-import javafx.scene.Node;\n-import javafx.scene.Scene;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.CheckBox;\n-import javafx.scene.control.Label;\n-import javafx.scene.control.ScrollPane;\n-import javafx.scene.control.Slider;\n-import javafx.scene.control.TitledPane;\n-import javafx.scene.layout.HBox;\n-import javafx.scene.layout.Priority;\n-import javafx.scene.layout.VBox;\n-import javafx.stage.Stage;\n-import javafx.util.Duration;\n-import javafx.util.converter.NumberStringConverter;\n-\n-\/**\n- * A sample application for measuring FPS for various 3D nodes with environmental lighting.\n- * <p>\n- * <b>Important<\/b>: make sure that no other application on your system is rendering heavy graphics, like videos, to a screen,\n- * as this will corrupt the measurement.\n- *\/\n-public class LightingSample extends Application {\n-\n-    private final Environment environment = new Environment();\n-    private final TranslateTransition animation = createAnimation();\n-    private final FPSCounter fpsCouner = new FPSCounter();\n-\n-    @Override\n-    public void start(Stage stage) throws Exception {\n-        var sphereControls = createSphereControls();\n-        var meshControls = createMeshControls();\n-        var boxesControls = createBoxesControls();\n-\n-        var playButton = new Button(\"Start\");\n-        playButton.setOnAction(e -> startMeasurement());\n-\n-        var stopButton = new Button(\"Stop\");\n-        stopButton.setOnAction(e -> stopMeasurement());\n-\n-        var animationControls = new HBox(5, playButton, stopButton);\n-\n-        var defaultLightButton = new CheckBox(\"Force default light\");\n-        defaultLightButton.setOnAction(e -> environment.forceDefaultLight(defaultLightButton.isSelected()));\n-\n-        var controls = new VBox(sphereControls, meshControls, animationControls, boxesControls, defaultLightButton);\n-\n-        environment.ambientLights.forEach(light -> controls.getChildren().add(Controls.createLightControls(light, null)));\n-        environment.pointLights.forEach(light -> controls.getChildren().add(Controls.addPointLightControls(light)));\n-        environment.spotLights.forEach(light -> controls.getChildren().add(Controls.addSpotLightControls(light)));\n-        environment.directionalLights.forEach(light -> controls.getChildren().add(Controls.addDirectionalLightControls(light)));\n-\n-        var hBox = new HBox(new ScrollPane(controls), environment);\n-        HBox.setHgrow(environment, Priority.ALWAYS);\n-        stage.setScene(new Scene(hBox));\n-        stage.setWidth(1100);\n-        stage.setHeight(735);\n-        stage.show();\n-    }\n-\n-    private HBox createMeshControls() {\n-        var quadSlider = new Slider(100, 5000, 1000);\n-        quadSlider.setMajorTickUnit(100);\n-        setupSlider(quadSlider);\n-\n-        var quadLabel = new Label();\n-        quadLabel.textProperty().bindBidirectional(quadSlider.valueProperty(), new NumberStringConverter(\"#\"));\n-\n-        var mesh = new Button(\"Mesh\");\n-        mesh.setOnAction(e -> switchTo(environment.createMeshView((int) quadSlider.getValue())));\n-\n-        var meshBox = new HBox(mesh, quadSlider, quadLabel);\n-        return meshBox;\n-    }\n-\n-    private HBox createSphereControls() {\n-        var subdivisionSlider = new Slider(10, 1000, 60);\n-        subdivisionSlider.setMajorTickUnit(50);\n-        setupSlider(subdivisionSlider);\n-\n-        var subdivisionLabel = new Label();\n-        subdivisionLabel.textProperty().bindBidirectional(subdivisionSlider.valueProperty(), new NumberStringConverter(\"#\"));\n-\n-        var sphere = new Button(\"Sphere\");\n-        sphere.setOnAction(e -> switchTo(environment.createSphere((int) subdivisionSlider.getValue())));\n-\n-        var sphereBox = new HBox(sphere, subdivisionSlider, subdivisionLabel);\n-        return sphereBox;\n-    }\n-\n-    private Node createBoxesControls() {\n-        var box = new Button(\"Create\");\n-\n-        var titlePane = new TitledPane(\"Boxes\", new VBox(1, box, new HBox(Boxes.createBoxesControls())));\n-\n-        titlePane.setExpanded(false);\n-        box.setOnAction(e -> switchTo(environment.createBoxes()));\n-        return titlePane;\n-    }\n-\n-    private void setupSlider(Slider slider) {\n-        slider.setMinorTickCount(0);\n-        slider.setShowTickLabels(true);\n-        slider.setShowTickMarks(true);\n-        slider.setSnapToTicks(true);\n-    }\n-\n-   private TranslateTransition createAnimation() {\n-        var anim = new TranslateTransition(Duration.seconds(2));\n-        anim.setAutoReverse(true);\n-        anim.setCycleCount(Animation.INDEFINITE);\n-        anim.setFromZ(150);\n-        anim.setToZ(0);\n-        return anim;\n-    }\n-\n-    private void switchTo(Node node) {\n-        stopMeasurement();\n-        environment.switchTo(node);\n-        animation.setNode(node);\n-    }\n-\n-    private void startMeasurement() {\n-        animation.playFromStart();\n-        fpsCouner.start();\n-    }\n-\n-    private void stopMeasurement() {\n-        fpsCouner.stop();\n-        fpsCouner.reset();\n-        animation.stop();\n-    }\n-\n-    public static void main(String[] args) {\n-        launch(args);\n-    }\n-}\n","filename":"tests\/performance\/3DLighting\/src\/main\/java\/attenuation\/LightingSample.java","additions":0,"deletions":166,"binary":false,"changes":166,"status":"deleted"},{"patch":"@@ -0,0 +1,176 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package attenuation;\n+\n+import java.util.Optional;\n+\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.geometry.Insets;\n+import javafx.geometry.VPos;\n+import javafx.scene.Node;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ColorPicker;\n+import javafx.scene.control.ContentDisplay;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.RadioButton;\n+import javafx.scene.control.ToggleGroup;\n+import javafx.scene.image.Image;\n+import javafx.scene.image.WritableImage;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.scene.paint.PhongMaterial;\n+import javafx.scene.text.Font;\n+import javafx.scene.text.Text;\n+import javafx.scene.text.TextBoundsType;\n+import javafx.stage.FileChooser;\n+import javafx.stage.FileChooser.ExtensionFilter;\n+\n+\/**\n+ * Utility class for creating material adjustment controls.\n+ *\/\n+final class MaterialControls {\n+\n+    static final PhongMaterial MATERIAL = new PhongMaterial();\n+\n+    static Pane create() {\n+        var diffColorOn = new CheckBox(\"Diff Color\");\n+        diffColorOn.setSelected(true);\n+        var diffColorPicker = new ColorPicker(Color.WHITE);\n+        MATERIAL.diffuseColorProperty().bind(diffColorOn.selectedProperty().flatMap(s -> s ? diffColorPicker.valueProperty() : null));\n+\n+        var specColorOn = new CheckBox(\"Spec Color\");\n+        var specColorPicker = new ColorPicker(Color.BLACK);\n+        MATERIAL.specularColorProperty().bind(specColorOn.selectedProperty().flatMap(s -> s ? specColorPicker.valueProperty() : null));\n+\n+        var specPower = Controls.createSliderControl(MATERIAL.specularPowerProperty(), 0, 400, MATERIAL.getSpecularPower());\n+\n+        var chooser = createFileChooser();\n+        var diffMapControls = createMapControls(MATERIAL.diffuseMapProperty(), chooser);\n+        var specMapControls = createMapControls(MATERIAL.specularMapProperty(), chooser);\n+        var selfIllumMapControls = createMapControls(MATERIAL.selfIlluminationMapProperty(), chooser);\n+        var bumpMapControls = createMapControls(MATERIAL.bumpMapProperty(), chooser);\n+\n+        var gridPane = new GridPane();\n+        gridPane.addRow(gridPane.getRowCount(), diffColorOn, diffColorPicker);\n+        gridPane.addRow(gridPane.getRowCount(), specColorOn, specColorPicker);\n+        gridPane.add(new HBox(createLabel(\"Spec power\"), specPower), 0, gridPane.getRowCount(), 2, 1);\n+        gridPane.addRow(gridPane.getRowCount(), createLabel(\"Diff Map\"), diffMapControls);\n+        gridPane.addRow(gridPane.getRowCount(), createLabel(\"Spec Map\"), specMapControls);\n+        gridPane.addRow(gridPane.getRowCount(), createLabel(\"Self-illum Map\"), selfIllumMapControls);\n+        gridPane.addRow(gridPane.getRowCount(), createLabel(\"Bump Map\"), bumpMapControls);\n+        return gridPane;\n+    }\n+\n+    static FileChooser createFileChooser() {\n+        var chooser = new FileChooser();\n+        chooser.setTitle(\"Select image\");\n+        chooser.setSelectedExtensionFilter(new ExtensionFilter(\"Image\", \".bmp\", \".jpg\", \".jpeg\", \".gif\", \".png\", \".tif\", \".tiff\"));\n+        return chooser;\n+    }\n+\n+    private static Node createLabel(String text) {\n+        var label = new Label(text);\n+        GridPane.setValignment(label, VPos.TOP);\n+        return label;\n+    }\n+\n+    static Node createMapControls(ObjectProperty<Image> mapProp, FileChooser chooser) {\n+        var noneButton = new RadioButton(\"None\");\n+        noneButton.setOnAction(e -> mapProp.set(null));\n+        noneButton.setSelected(true);\n+\n+        var imageButton = createImageButton(mapProp, chooser);\n+        var colorButton = createColorButton(mapProp);\n+\n+        var toggleGroup = new ToggleGroup();\n+        toggleGroup.getToggles().addAll(noneButton, colorButton, imageButton);\n+\n+        return new VBox(1, noneButton, colorButton, imageButton);\n+    }\n+\n+    private static RadioButton createColorButton(ObjectProperty<Image> mapProp) {\n+        var picker = new ColorPicker(Color.BLACK);\n+\n+        var colorButton = new RadioButton(\" \");\n+        colorButton.setContentDisplay(ContentDisplay.CENTER);\n+        colorButton.setGraphicTextGap(0);\n+        colorButton.setGraphic(picker);\n+        colorButton.selectedProperty().subscribe(selected -> {\n+            if (selected) {\n+                mapProp.bind(picker.valueProperty().map(MaterialControls::imageOf));\n+            } else {\n+                mapProp.unbind();\n+            }\n+        });\n+        return colorButton;\n+    }\n+\n+    private static RadioButton createImageButton(ObjectProperty<Image> mapProp, FileChooser chooser) {\n+        var chosenImage = new SimpleObjectProperty<>(Environment.BACKGROUND_IMAGE);\n+\n+        var graphic = new Text(\"📂\");\n+        graphic.setBoundsType(TextBoundsType.VISUAL);\n+        graphic.setFill(Color.rgb(235, 163, 0));\n+        graphic.setFont(Font.font(20));\n+\n+        var openButton = new Button(\"\", graphic);\n+        openButton.setPadding(new Insets(2, 2, 3, 3));\n+        openButton.setOnAction(e -> {\n+            Optional.ofNullable(chooser.showOpenDialog(null)).ifPresent(file -> {\n+                try {\n+                    chosenImage.setValue(new Image(file.toURI().toURL().toExternalForm()));\n+                    chooser.setInitialDirectory(file.getParentFile());\n+                } catch (Exception e1) {\n+                    e1.printStackTrace();\n+                }\n+            });\n+        });\n+\n+        var imageButton = new RadioButton(\" \");\n+        imageButton.setGraphic(openButton);\n+        imageButton.setContentDisplay(ContentDisplay.CENTER);\n+        imageButton.setGraphicTextGap(0);\n+        imageButton.selectedProperty().subscribe(selected -> {\n+            if (selected) {\n+                mapProp.bind(chosenImage);\n+            } else {\n+                mapProp.unbind();\n+            }\n+        });\n+        return imageButton;\n+    }\n+\n+    static Image imageOf(Color color) {\n+        var image = new WritableImage(1, 1);\n+        image.getPixelWriter().setColor(0, 0, color);\n+        return image;\n+    }\n+}\n","filename":"tests\/performance\/3DLighting\/src\/main\/java\/attenuation\/MaterialControls.java","additions":176,"deletions":0,"binary":false,"changes":176,"status":"added"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package attenuation;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javafx.scene.Group;\n+import javafx.scene.Node;\n+import javafx.scene.shape.Box;\n+import javafx.scene.shape.Cylinder;\n+import javafx.scene.shape.MeshView;\n+import javafx.scene.shape.Sphere;\n+import javafx.scene.shape.TriangleMesh;\n+import javafx.scene.transform.Rotate;\n+\n+\/**\n+ * Utility class for creating 3D shapes.\n+ *\/\n+final class Models {\n+\n+    enum Model {\n+        NONE,\n+        BOXES,\n+        BOX,\n+        CYLINDER,\n+        SPHERE\n+    }\n+\n+    static Node createModel(Model model) {\n+        return switch (model) {\n+            case NONE -> new Group();\n+            case BOXES -> createBoxes(Environment.LIGHT_Z_DIST);\n+            case BOX -> createBox(Environment.LIGHT_Z_DIST, Environment.LIGHT_Z_DIST);\n+            case CYLINDER -> createCylinder(30, 150, Environment.LIGHT_Z_DIST);\n+            case SPHERE -> createSphere(50, Environment.LIGHT_Z_DIST);\n+        };\n+    }\n+\n+    \/**\n+     * Creates a box-like structure with 3 edges.\n+     *\n+     * @param size distance from the center of the box to an edge\n+     *\/\n+    private static Group createBoxes(double size) {\n+        var back = createBox(size, size);\n+        var right = createBox(size, -size);\n+        right.setRotationAxis(Rotate.Y_AXIS);\n+        right.setRotate(90);\n+        right.setTranslateX(size * 2);\n+        var left = createBox(size, -size);\n+        left.setRotationAxis(Rotate.Y_AXIS);\n+        left.setRotate(90);\n+        left.setTranslateX(-size * 2);\n+        return new Group(left, back , right);\n+    }\n+\n+    private static Box createBox(double size, double distance) {\n+        var shape = new Box(size * 4, size * 4, 1);\n+        shape.setTranslateZ(distance);\n+        shape.setMaterial(MaterialControls.MATERIAL);\n+        return shape;\n+    }\n+\n+    private static Cylinder createCylinder(double radius, double height, double distance) {\n+        var shape = new Cylinder(radius, height);\n+        shape.setTranslateZ(distance);\n+        shape.setMaterial(MaterialControls.MATERIAL);\n+        return shape;\n+    }\n+\n+    static Sphere createSphere(double radius, double distance) {\n+        var shape = new Sphere(radius);\n+        shape.setTranslateZ(distance);\n+        shape.setMaterial(MaterialControls.MATERIAL);\n+        return shape;\n+    }\n+\n+    static MeshView createMeshView(int quadNum) {\n+        \/\/ Points and texCoords array defining a single quad that will\n+        \/\/ be referenced by all pairs of triangles in the faces array\n+        final float[] points = {\n+            -75.0f,  75.0f, 0.0f,\n+             75.0f,  75.0f, 0.0f,\n+             75.0f, -75.0f, 0.0f,\n+            -75.0f, -75.0f, 0.0f\n+        };\n+        final float[] texCoords = {\n+            0.0f, 0.0f,\n+            1.0f, 0.0f,\n+            1.0f, 1.0f,\n+            0.0f, 1.0f\n+        };\n+        \/\/ List of faces defining a single quad (pair of triangles).\n+        \/\/ This is replicated for the desired number of quads\n+        var face = List.of(\n+            0, 0, 1, 1, 2, 2,\n+            0, 0, 2, 2, 3, 3\n+        );\n+\n+        var faces = new ArrayList<Integer>(quadNum * face.size());\n+        for (int i = 0; i < quadNum; i++) {\n+            faces.addAll(face);\n+        }\n+\n+        var mesh = new TriangleMesh();\n+        mesh.getPoints().setAll(points);\n+        mesh.getTexCoords().setAll(texCoords);\n+        int[] array = faces.stream().mapToInt(i -> i).toArray();\n+        mesh.getFaces().setAll(array);\n+\n+        return new MeshView(mesh);\n+    }\n+}\n","filename":"tests\/performance\/3DLighting\/src\/main\/java\/attenuation\/Models.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"},{"filename":"tests\/performance\/3DLighting\/src\/main\/resources\/lighting3D\/background.jpg","binary":true,"status":"added"}]}