{"files":[{"patch":"@@ -224,1 +224,0 @@\n-                node.clearDirtyTree(); \/\/ Need to clear dirty (by translation) flags in the children\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/sg\/prism\/CacheFilter.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-    protected void clearDirty() {\n+    public void clearDirty() {\n@@ -249,4 +249,0 @@\n-\n-                for (int i = 0; i < startPos; ++i) {\n-                    orderedChildren.get(i).clearDirtyTree();\n-                }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/sg\/prism\/NGGroup.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -903,5 +903,17 @@\n-    protected void clearDirty() {\n-        dirty = DirtyFlag.CLEAN;\n-        childDirty = false;\n-        dirtyBounds.makeEmpty();\n-        dirtyChildrenAccumulated = 0;\n+    public void clearDirty() {\n+        if (dirty != DirtyFlag.CLEAN || childDirty) {\n+            dirty = DirtyFlag.CLEAN;\n+            childDirty = false;\n+            dirtyBounds.makeEmpty();\n+            dirtyChildrenAccumulated = 0;\n+\n+            if (this instanceof NGGroup) {\n+                List<NGNode> children = ((NGGroup) this).getChildren();\n+                for (NGNode child : children) {\n+                    child.clearDirty();\n+                }\n+            }\n+        }\n+        if (getClipNode() != null) {\n+            getClipNode().clearDirty();\n+        }\n@@ -924,16 +936,0 @@\n-    public void clearDirtyTree() {\n-        clearDirty();\n-        if (getClipNode() != null) {\n-            getClipNode().clearDirtyTree();\n-        }\n-        if (this instanceof NGGroup) {\n-            List<NGNode> children = ((NGGroup) this).getChildren();\n-            for (int i = 0; i < children.size(); ++i) {\n-                NGNode child = children.get(i);\n-                if (child.dirty != DirtyFlag.CLEAN || child.childDirty) {\n-                    child.clearDirtyTree();\n-                }\n-            }\n-        }\n-    }\n-\n@@ -1411,6 +1407,0 @@\n-        \/\/ If we are going to cull a node\/group that's dirty,\n-        \/\/ make sure it's dirty flags are properly cleared.\n-        if (cullingBits == 0 && (dirty != DirtyFlag.CLEAN || childDirty)) {\n-            clearDirtyTree();\n-        }\n-\n@@ -1958,2 +1948,1 @@\n-        \/\/ Clear the visuals changed flag\n-        clearDirty();\n+\n@@ -2129,1 +2118,0 @@\n-            clearDirtyTree();\n@@ -2154,1 +2142,0 @@\n-            clearDirtyTree();\n@@ -2204,1 +2191,0 @@\n-            clearDirtyTree();\n@@ -2211,2 +2197,0 @@\n-        clipNode.clearDirty(); \/\/ as render() is not called on the clipNode,\n-                               \/\/ make sure the dirty flags are cleared\n@@ -2218,1 +2202,0 @@\n-            clearDirtyTree();\n@@ -2227,1 +2210,0 @@\n-            clearDirtyTree();\n@@ -2259,7 +2241,0 @@\n-            \/\/ There may have been some errors in the application of the\n-            \/\/ effect and we would not know to what extent the nodes were\n-            \/\/ rendered and cleared or left dirty.  clearDirtyTree() will\n-            \/\/ clear both this node its clip node, and it will not recurse\n-            \/\/ to the children unless they are still marked dirty.  It should\n-            \/\/ be cheap if there was no problem and thorough if there was...\n-            clearDirtyTree();\n@@ -2274,1 +2249,0 @@\n-            clearDirtyTree();\n@@ -2289,1 +2263,0 @@\n-            getClipNode().clearDirtyTree();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/sg\/prism\/NGNode.java","additions":18,"deletions":45,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -442,1 +442,1 @@\n-     * When cleaning the dirty tree, we also have to keep in mind\n+     * When cleaning the dirty flag, we also have to keep in mind\n@@ -445,2 +445,2 @@\n-    @Override public void clearDirtyTree() {\n-        super.clearDirtyTree();\n+    @Override public void clearDirty() {\n+        super.clearDirty();\n@@ -448,1 +448,1 @@\n-            ngShape.clearDirtyTree();\n+            ngShape.clearDirty();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/sg\/prism\/NGRegion.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -108,0 +108,8 @@\n+    @Override\n+    public void clearDirty() {\n+        super.clearDirty();\n+        if (root != null) {\n+            root.clearDirty();\n+        }\n+    }\n+\n@@ -223,1 +231,0 @@\n-            root.clearDirtyTree();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/sg\/prism\/NGSubScene.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -391,0 +391,3 @@\n+\n+        \/\/ Ensure the dirty flags are cleared\n+        root.clearDirty();\n@@ -452,2 +455,0 @@\n-                \/\/ There may be occluded dirty Nodes however, so we need to clear them\n-                root.clearDirtyTree();\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/ViewPainter.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -131,0 +131,1 @@\n+        root.clearDirty();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/DirtyRegionClipTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -93,0 +93,1 @@\n+        root.clearDirty();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/GridDirtyRegionTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-        root.clearDirtyTree();\n+        root.clearDirty();\n@@ -162,1 +162,1 @@\n-        root.clearDirtyTree();\n+        root.clearDirty();\n@@ -183,1 +183,1 @@\n-        root.clearDirtyTree();\n+        root.clearDirty();\n@@ -203,1 +203,1 @@\n-        root.clearDirtyTree();\n+        root.clearDirty();\n@@ -224,1 +224,1 @@\n-        root.clearDirtyTree();\n+        root.clearDirty();\n@@ -245,1 +245,1 @@\n-        root.clearDirtyTree();\n+        root.clearDirty();\n@@ -258,1 +258,1 @@\n-        root.clearDirtyTree();\n+        root.clearDirty();\n@@ -271,1 +271,1 @@\n-        root.clearDirtyTree();\n+        root.clearDirty();\n@@ -284,1 +284,1 @@\n-        root.clearDirtyTree();\n+        root.clearDirty();\n@@ -297,1 +297,1 @@\n-        root.clearDirtyTree();\n+        root.clearDirty();\n@@ -310,1 +310,1 @@\n-        root.clearDirtyTree();\n+        root.clearDirty();\n@@ -323,1 +323,1 @@\n-        root.clearDirtyTree();\n+        root.clearDirty();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/com\/sun\/javafx\/sg\/prism\/RenderRootTest.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1244,1 +1244,1 @@\n-        peer.clearDirtyTree();\n+        peer.clearDirty();\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/RegionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package test.robot.com.sun.prism;\n+\n+import javafx.beans.property.ObjectProperty;\n+import javafx.beans.property.SimpleObjectProperty;\n+import javafx.geometry.Bounds;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Group;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Label;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.Pane;\n+import javafx.scene.layout.StackPane;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.scene.shape.Circle;\n+import javafx.scene.shape.Line;\n+import javafx.stage.Stage;\n+import org.junit.Test;\n+import test.robot.testharness.VisualTestBase;\n+import test.util.Util;\n+\n+public class NGNodeDirtyFlagTest extends VisualTestBase {\n+\n+    private static final double TOLERANCE = 0.07;\n+\n+    @Test\n+    public void testNGNodesNotDirty() throws InterruptedException {\n+        StackPane root = new StackPane();\n+\n+        Util.runAndWait(() -> {\n+            Stage stage = getStage();\n+            stage.setScene(new Scene(root, 500, 400));\n+            stage.show();\n+        });\n+\n+        ObjectProperty<Color> lineColor = new SimpleObjectProperty<>(Color.DARKGREEN);\n+        ObjectProperty<Color> circleColor = new SimpleObjectProperty<>(Color.DARKGREEN);\n+\n+        Util.runAndWait(() -> {\n+            var contents = new HBox();\n+            contents.setSpacing(10);\n+            contents.setPadding(new Insets(10));\n+            contents.getChildren().add(contentElement(\"L\", lineColor, circleColor));\n+            contents.getChildren().add(contentElement(\"R\", lineColor, circleColor));\n+            root.getChildren().add(contents);\n+\n+            Pane sideArea = createSideArea();\n+            StackPane.setAlignment(sideArea, Pos.CENTER_RIGHT);\n+            root.getChildren().add(sideArea);\n+        });\n+\n+        Util.waitForIdle(root.getScene());\n+\n+        for (int i = 0; i < 5; i++) {\n+            Util.runAndWait(() -> lineColor.set(Color.LIGHTGREEN));\n+            Util.waitForIdle(root.getScene());\n+            Util.runAndWait(() -> circleColor.set(Color.LIGHTGREEN));\n+            Util.waitForIdle(root.getScene());\n+\n+            checkLineColor(root, lineColor.get());\n+\n+            Util.runAndWait(() -> lineColor.set(Color.DARKGREEN));\n+            Util.waitForIdle(root.getScene());\n+            Util.runAndWait(() -> circleColor.set(Color.DARKGREEN));\n+            Util.waitForIdle(root.getScene());\n+\n+            checkLineColor(root, lineColor.get());\n+        }\n+    }\n+\n+    private void checkLineColor(StackPane root, Color expected) {\n+        Util.runAndWait(() -> {\n+            checkColor(root.lookup(\"#Line-L\"), expected);\n+            checkColor(root.lookup(\"#Line-R\"), expected);\n+        });\n+    }\n+\n+    private void checkColor(Node node, Color expected) {\n+        Bounds screenBounds = node.localToScreen(node.getBoundsInLocal());\n+        assertColorEquals(expected, getColor((int) (screenBounds.getMinX() + 1), (int) (screenBounds.getMinY() + 1)), TOLERANCE);\n+    }\n+\n+    private Pane contentElement(String id, ObjectProperty<Color> lineColor, ObjectProperty<Color> circleColor) {\n+        var group = new Group();\n+        group.setId(id);\n+        group.setManaged(false);\n+\n+        double lineWidth = 220;\n+\n+        var line = new Line(20, 50, lineWidth, 50);\n+        line.setId(\"Line-\" + id);\n+        line.setStrokeWidth(4);\n+        lineColor.addListener((ov, o, n) -> line.setStroke(n));\n+        group.getChildren().add(line);\n+\n+        var circle = new Circle(5);\n+        circle.setCenterX(lineWidth + 20);\n+        circle.setCenterY(50);\n+        circle.setId(\"Circle-\" + id);\n+        circleColor.addListener((ov, o, n) -> circle.setFill(n));\n+        circle.setFill(Color.LIGHTGREEN);\n+        group.getChildren().add(circle);\n+\n+        var result = new StackPane(group);\n+        result.setId(id);\n+        result.setStyle(\"-fx-background-color: lightgrey; -fx-border-color: black; -fx-border-width: 1;\");\n+        result.setMinSize(lineWidth + 40, 200);\n+\n+        return result;\n+    }\n+\n+    private Pane createSideArea() {\n+        VBox result = new VBox();\n+        result.setPrefSize(150, 9900);\n+        result.setMaxWidth(200);\n+        result.setStyle(\"-fx-background-color: lightblue;\");\n+        result.getChildren().add(new Label(\"SideArea\"));\n+        return result;\n+    }\n+}\n","filename":"tests\/system\/src\/test\/java\/test\/robot\/com\/sun\/prism\/NGNodeDirtyFlagTest.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"}]}