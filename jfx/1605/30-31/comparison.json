{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import javafx.beans.property.BooleanProperty;\n@@ -31,0 +32,4 @@\n+import javafx.css.CssMetaData;\n+import javafx.css.StyleConverter;\n+import javafx.css.Styleable;\n+import javafx.css.StyleableBooleanProperty;\n@@ -41,0 +46,2 @@\n+import java.util.List;\n+import java.util.stream.Stream;\n@@ -51,1 +58,1 @@\n- * event that is targeted at {@code HeaderBarBase} is not consumed by the application.\n+ * event that is targeted at the header bar is not consumed by the application.\n@@ -53,8 +60,7 @@\n- * {@code HeaderBar} is a layout container that allows applications to place scene graph nodes\n- * in three areas: {@link #leadingProperty() leading}, {@link #centerProperty() center}, and\n- * {@link #trailingProperty() trailing}. All areas can be {@code null}. {@code HeaderBar} ensures that\n- * the leading and trailing areas account for the default window buttons (minimize, maximize, close).\n- * If a child is configured to be centered in the {@code center} area, it is laid out with respect to\n- * the stage, and not with respect to the {@code center} area. This ensures that the child will appear\n- * centered in the stage regardless of leading or trailing children or the platform-specific placement\n- * of default window buttons.\n+ * {@code HeaderBar} is a layout container that allows applications to place scene graph nodes in three areas:\n+ * {@link #leadingProperty() leading}, {@link #centerProperty() center}, and {@link #trailingProperty() trailing}.\n+ * All areas can be {@code null}. The {@link #overlappingSystemInsetProperty() overlappingSystemInset} property\n+ * controls whether the leading and trailing areas account for the default window buttons (minimize, maximize,\n+ * close). If a child is configured to be centered in the {@code center} area, it is laid out with respect to the\n+ * stage, and not with respect to the {@code center} area. This ensures that the child will appear centered in the\n+ * stage regardless of leading or trailing children or the platform-specific placement of default window buttons.\n@@ -63,4 +69,4 @@\n- * {@code HeaderBar} honors the minimum, preferred, and maximum sizes of its children. As a consequence,\n- * its computed minimum size is sufficient to accommodate all of its children. If a child's resizable\n- * range prevents it from be resized to fit within its position, it will be vertically centered relative\n- * to the available space; this alignment can be customized with a layout constraint.\n+ * {@code HeaderBar} honors the minimum, preferred, and maximum sizes of its children. As a consequence, its\n+ * computed minimum size is sufficient to accommodate all of its children. If a child's resizable range prevents\n+ * it from be resized to fit within its position, it will be vertically centered relative to the available space;\n+ * this alignment can be customized with a layout constraint.\n@@ -68,2 +74,2 @@\n- * The default {@link #minHeightProperty() minHeight} of the {@code HeaderBar} is set to match the height\n- * of the platform-specific default window buttons.\n+ * The default {@link #minHeightProperty() minHeight} of the {@code HeaderBar} is set to match the height of the\n+ * platform-specific default window buttons.\n@@ -201,6 +207,1 @@\n-    private final ObjectProperty<Node> leading = new NodeProperty() {\n-        @Override\n-        public String getName() {\n-            return \"leading\";\n-        }\n-    };\n+    private final ObjectProperty<Node> leading = new NodeProperty(\"leading\");\n@@ -223,6 +224,1 @@\n-    private final ObjectProperty<Node> center = new NodeProperty() {\n-        @Override\n-        public String getName() {\n-            return \"center\";\n-        }\n-    };\n+    private final ObjectProperty<Node> center = new NodeProperty(\"center\");\n@@ -248,6 +244,1 @@\n-    private final ObjectProperty<Node> trailing = new NodeProperty() {\n-        @Override\n-        public String getName() {\n-            return \"trailing\";\n-        }\n-    };\n+    private final ObjectProperty<Node> trailing = new NodeProperty(\"trailing\");\n@@ -267,0 +258,38 @@\n+    \/**\n+     * Specifies whether the system-provided window buttons overlap the content of this {@code HeaderBar},\n+     * or whether they are laid out next to the content of the header bar, taking up space in its layout.\n+     *\/\n+    private final StyleableBooleanProperty overlappingSystemInset = new StyleableBooleanProperty() {\n+        @Override\n+        public Object getBean() {\n+            return HeaderBar.this;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return \"systemInset\";\n+        }\n+\n+        @Override\n+        protected void invalidated() {\n+            requestLayout();\n+        }\n+\n+        @Override\n+        public CssMetaData<? extends Styleable, Boolean> getCssMetaData() {\n+            return OVERLAPPING_SYSTEM_INSET;\n+        }\n+    };\n+\n+    public final BooleanProperty overlappingSystemInsetProperty() {\n+        return overlappingSystemInset;\n+    }\n+\n+    public final boolean isOverlappingSystemInset() {\n+        return overlappingSystemInset.get();\n+    }\n+\n+    public final void setOverlappingSystemInset(boolean value) {\n+        overlappingSystemInset.set(value);\n+    }\n+\n@@ -276,0 +305,1 @@\n+        double systemInsetWidth;\n@@ -291,0 +321,6 @@\n+        if (isOverlappingSystemInset()) {\n+            systemInsetWidth = 0;\n+        } else {\n+            systemInsetWidth = getLeftSystemInset().getWidth() + getRightSystemInset().getWidth();\n+        }\n+\n@@ -296,2 +332,1 @@\n-             + getLeftSystemInset().getWidth()\n-             + getRightSystemInset().getWidth();\n+             + systemInsetWidth;\n@@ -359,2 +394,0 @@\n-        double leftSystemInset = getLeftSystemInset().getWidth();\n-        double rightSystemInset = getRightSystemInset().getWidth();\n@@ -366,0 +399,8 @@\n+        double leftSystemInsetWidth, rightSystemInsetWidth;\n+\n+        if (isOverlappingSystemInset()) {\n+            leftSystemInsetWidth = rightSystemInsetWidth = 0;\n+        } else {\n+            leftSystemInsetWidth = getLeftSystemInset().getWidth();\n+            rightSystemInsetWidth = getRightSystemInset().getWidth();\n+        }\n@@ -370,2 +411,2 @@\n-            insideX = insets.getRight() + leftSystemInset;\n-            insideWidth = width - insideX - insets.getLeft() - rightSystemInset;\n+            insideX = insets.getRight() + leftSystemInsetWidth;\n+            insideWidth = width - insideX - insets.getLeft() - rightSystemInsetWidth;\n@@ -375,2 +416,2 @@\n-            insideX = insets.getLeft() + leftSystemInset;\n-            insideWidth = width - insideX - insets.getRight() - rightSystemInset;\n+            insideX = insets.getLeft() + leftSystemInsetWidth;\n+            insideWidth = width - insideX - insets.getRight() - rightSystemInsetWidth;\n@@ -515,1 +556,2 @@\n-    private abstract class NodeProperty extends ObjectPropertyBase<Node> {\n+    private final class NodeProperty extends ObjectPropertyBase<Node> {\n+        private final String name;\n@@ -518,0 +560,4 @@\n+        NodeProperty(String name) {\n+            this.name = name;\n+        }\n+\n@@ -523,0 +569,5 @@\n+        @Override\n+        public String getName() {\n+            return name;\n+        }\n+\n@@ -536,0 +587,34 @@\n+\n+    private static final CssMetaData<HeaderBar, Boolean> OVERLAPPING_SYSTEM_INSET = new CssMetaData<>(\n+            \"-fx-overlapping-system-inset\", StyleConverter.getBooleanConverter(), false) {\n+        @Override\n+        public boolean isSettable(HeaderBar headerBar) {\n+            return headerBar == null || !headerBar.overlappingSystemInset.isBound();\n+        }\n+\n+        @Override\n+        public StyleableBooleanProperty getStyleableProperty(HeaderBar headerBar) {\n+            return headerBar.overlappingSystemInset;\n+        }\n+    };\n+\n+    private static final List<CssMetaData<? extends Styleable, ?>> METADATA =\n+        Stream.concat(\n+            Region.getClassCssMetaData().stream(),\n+            Stream.of(OVERLAPPING_SYSTEM_INSET))\n+        .toList();\n+\n+    @Override\n+    public List<CssMetaData<? extends Styleable, ?>> getCssMetaData() {\n+        return METADATA;\n+    }\n+\n+    \/**\n+     * Gets the {@code CssMetaData} associated with this class, which includes the\n+     * {@code CssMetaData} of its superclasses.\n+     *\n+     * @return the {@code CssMetaData}\n+     *\/\n+    public static List<CssMetaData<? extends Styleable, ?>> getClassCssMetaData() {\n+        return METADATA;\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/HeaderBar.java","additions":127,"deletions":42,"binary":false,"changes":169,"status":"modified"},{"patch":"@@ -213,4 +213,4 @@\n-     * The absolute minimum height of {@link #leftSystemInsetProperty() leftSystemInset} and\n-     * {@link #rightSystemInsetProperty() rightSystemInset}. This is a platform-dependent value\n-     * that a {@code HeaderBarBase} implementation can use to define a reasonable minimum height\n-     * for the header bar area.\n+     * The system-provided reasonable minimum height of {@link #leftSystemInsetProperty() leftSystemInset}\n+     * {@link #rightSystemInsetProperty() rightSystemInset}. This is a platform-dependent value that a\n+     * {@code HeaderBarBase} implementation can use to define a reasonable minimum height for the header\n+     * bar area.\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/HeaderBarBase.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -254,1 +254,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -267,0 +266,1 @@\n+        @SuppressWarnings(\"unchecked\")\n@@ -284,1 +284,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -297,0 +296,1 @@\n+        @SuppressWarnings(\"unchecked\")\n@@ -314,1 +314,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -322,0 +321,1 @@\n+        @SuppressWarnings(\"unchecked\")\n@@ -339,1 +339,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -347,0 +346,1 @@\n+        @SuppressWarnings(\"unchecked\")\n@@ -363,0 +363,44 @@\n+    @ParameterizedTest\n+    @CsvSource({\n+        \"TOP_LEFT, 10, 10, 50, 50\",\n+        \"CENTER, 10, 25, 50, 50\",\n+        \"BOTTOM_LEFT, 10, 40, 50, 50\"\n+    })\n+    void alignmentOfLeadingChild_notResizable_withOverlappingLeftSystemInset(\n+            Pos pos, double x, double y, double width, double height) {\n+        @SuppressWarnings(\"unchecked\")\n+        var leftSystemInset = (ObjectProperty<Dimension2D>)ReflectionUtils.getFieldValue(headerBar, \"leftSystemInset\");\n+        leftSystemInset.set(new Dimension2D(100, 100));\n+        var leading = new Rectangle(50, 50);\n+        HeaderBar.setAlignment(leading, pos);\n+        HeaderBar.setMargin(leading, new Insets(10));\n+        headerBar.setOverlappingSystemInset(true);\n+        headerBar.setLeading(leading);\n+        headerBar.resize(1000, 100);\n+        headerBar.layout();\n+\n+        assertBounds(x, y, width, height, leading);\n+    }\n+\n+    @ParameterizedTest\n+    @CsvSource({\n+        \"TOP_RIGHT, 940, 10, 50, 50\",\n+        \"CENTER, 940, 25, 50, 50\",\n+        \"BOTTOM_RIGHT, 940, 40, 50, 50\"\n+    })\n+    void alignmentOfTrailingChild_notResizable_withOverlappingRightSystemInset(\n+            Pos pos, double x, double y, double width, double height) {\n+        @SuppressWarnings(\"unchecked\")\n+        var rightSystemInset = (ObjectProperty<Dimension2D>)ReflectionUtils.getFieldValue(headerBar, \"rightSystemInset\");\n+        rightSystemInset.set(new Dimension2D(100, 100));\n+        var trailing = new Rectangle(50, 50);\n+        HeaderBar.setAlignment(trailing, pos);\n+        HeaderBar.setMargin(trailing, new Insets(10));\n+        headerBar.setOverlappingSystemInset(true);\n+        headerBar.setTrailing(trailing);\n+        headerBar.resize(1000, 100);\n+        headerBar.layout();\n+\n+        assertBounds(x, y, width, height, trailing);\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/HeaderBarTest.java","additions":48,"deletions":4,"binary":false,"changes":52,"status":"modified"}]}