{"files":[{"patch":"@@ -187,0 +187,2 @@\n+        var size = isUtilityWindow() ? toolbarStyle.utilitySize : toolbarStyle.size;\n+\n@@ -189,2 +191,2 @@\n-                ? new WindowControlsMetrics(empty, toolbarStyle.size, minHeight)\n-                : new WindowControlsMetrics(toolbarStyle.size, empty, minHeight)\n+                ? new WindowControlsMetrics(empty, size, minHeight)\n+                : new WindowControlsMetrics(size, empty, minHeight)\n@@ -203,0 +205,1 @@\n+            this.utilitySize = new Dimension2D(height, height); \/\/ width intentionally set to height\n@@ -207,0 +210,1 @@\n+        final Dimension2D utilitySize;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacWindow.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.javafx.scene.layout;\n+\n+import com.sun.javafx.PlatformUtil;\n+import javafx.beans.value.ObservableValue;\n+import javafx.event.EventHandler;\n+import javafx.scene.Node;\n+import javafx.scene.Scene;\n+import javafx.scene.input.MouseEvent;\n+import javafx.scene.layout.HeaderButtonType;\n+import javafx.stage.Modality;\n+import javafx.stage.Stage;\n+import javafx.util.Subscription;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+public final class HeaderButtonBehavior implements EventHandler<MouseEvent> {\n+\n+    private final Node node;\n+    private final HeaderButtonType type;\n+    private final Subscription subscription;\n+\n+    public HeaderButtonBehavior(Node node, HeaderButtonType type) {\n+        this.node = Objects.requireNonNull(node);\n+        this.type = Objects.requireNonNull(type);\n+\n+        ObservableValue<Stage> stage = node.sceneProperty()\n+            .flatMap(Scene::windowProperty)\n+            .map(w -> w instanceof Stage s ? s : null);\n+\n+        subscription = Subscription.combine(\n+            type == HeaderButtonType.MAXIMIZE\n+                ? stage.flatMap(Stage::resizableProperty).subscribe(this::onResizableChanged)\n+                : Subscription.EMPTY,\n+            stage.flatMap(Stage::fullScreenProperty).subscribe(this::onFullScreenChanged),\n+            () -> node.removeEventHandler(MouseEvent.MOUSE_RELEASED, this)\n+        );\n+\n+        node.addEventHandler(MouseEvent.MOUSE_RELEASED, this);\n+        node.setFocusTraversable(false);\n+    }\n+\n+    public void dispose() {\n+        subscription.unsubscribe();\n+    }\n+\n+    @Override\n+    public void handle(MouseEvent event) {\n+        if (!node.getLayoutBounds().contains(event.getX(), event.getY())) {\n+            return;\n+        }\n+\n+        switch (type) {\n+            case CLOSE -> getStage().ifPresent(Stage::close);\n+            case ICONIFY -> getStage().ifPresent(stage -> stage.setIconified(true));\n+            case MAXIMIZE -> getStage().ifPresent(stage -> {\n+                    \/\/ On macOS, a non-modal window is put into full-screen mode when the maximize button is clicked,\n+                    \/\/ but enlarged to cover the desktop when the option key is pressed at the same time.\n+                    if (PlatformUtil.isMac() && stage.getModality() == Modality.NONE && !event.isAltDown()) {\n+                        stage.setFullScreen(!stage.isFullScreen());\n+                    } else {\n+                        stage.setMaximized(!stage.isMaximized());\n+                    }\n+                });\n+        }\n+    }\n+\n+    private Optional<Stage> getStage() {\n+        Scene scene = node.getScene();\n+        if (scene == null) {\n+            return Optional.empty();\n+        }\n+\n+        return scene.getWindow() instanceof Stage stage\n+            ? Optional.of(stage)\n+            : Optional.empty();\n+    }\n+\n+    private void onResizableChanged(Boolean resizable) {\n+        if (!node.disableProperty().isBound()) {\n+            node.setDisable(resizable == Boolean.FALSE);\n+        }\n+    }\n+\n+    private void onFullScreenChanged(Boolean fullScreen) {\n+        if (!node.visibleProperty().isBound() && !node.managedProperty().isBound()) {\n+            node.setVisible(fullScreen != Boolean.TRUE);\n+            node.setManaged(fullScreen != Boolean.TRUE);\n+        }\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/scene\/layout\/HeaderButtonBehavior.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -3081,1 +3081,1 @@\n-                        case MINIMIZE -> HeaderAreaType.MINIMIZE;\n+                        case ICONIFY -> HeaderAreaType.MINIMIZE;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Scene.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import com.sun.javafx.scene.layout.HeaderButtonBehavior;\n@@ -39,0 +40,1 @@\n+import javafx.scene.input.MouseEvent;\n@@ -95,0 +97,4 @@\n+     * <p>\n+     * This property can be set on any {@link Node}. Specifying a header button type also provides the behavior\n+     * associated with the button type. If the default behavior is not desired, applications can register an\n+     * event filter on the child node that consumes the {@link MouseEvent#MOUSE_RELEASED} event.\n@@ -101,0 +107,10 @@\n+\n+        if (child.getProperties().get(HeaderButtonBehavior.class) instanceof HeaderButtonBehavior behavior) {\n+            behavior.dispose();\n+        }\n+\n+        if (value != null) {\n+            child.getProperties().put(HeaderButtonBehavior.class, new HeaderButtonBehavior(child, value));\n+        } else {\n+            child.getProperties().remove(HeaderButtonBehavior.class);\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/HeaderBarBase.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -35,5 +35,0 @@\n- * <p>\n- * This property can be set on any {@link Node}. Applications are still required to provide their own\n- * click handlers to programmatically trigger the actions associated with header buttons, i.e. call\n- * appropriate stage methods like {@link Stage#setIconified(boolean)}, {@link Stage#setMaximized(boolean)}\n- * or {@link Stage#close()}.\n@@ -45,0 +40,1 @@\n+\n@@ -46,1 +42,1 @@\n-     * Identifies the minimize button.\n+     * Identifies the iconify button.\n@@ -51,1 +47,1 @@\n-    MINIMIZE,\n+    ICONIFY,\n@@ -55,0 +51,5 @@\n+     * <p>\n+     * This button toggles the {@link Stage#isMaximized()} or {@link Stage#isFullScreen()} property,\n+     * depending on platform-specific invocation semantics. For example, on macOS the button will\n+     * put the window into full-screen mode by default, but maximize it to cover the desktop when\n+     * the option key is pressed.\n@@ -58,0 +59,2 @@\n+     * @see Stage#isFullScreen()\n+     * @see Stage#setFullScreen(boolean)\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/HeaderButtonType.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -198,0 +198,5 @@\n+    \/\/ When we switch to full-screen mode, we always need the standard window buttons to be shown.\n+    [[self->nsWindow standardWindowButton:NSWindowCloseButton] setHidden:NO];\n+    [[self->nsWindow standardWindowButton:NSWindowMiniaturizeButton] setHidden:NO];\n+    [[self->nsWindow standardWindowButton:NSWindowZoomButton] setHidden:NO];\n+\n@@ -213,0 +218,7 @@\n+\n+    \/\/ When we exit full-screen mode, hide the standard window buttons if they were previously hidden.\n+    if (!self->isStandardButtonsVisible) {\n+        [[self->nsWindow standardWindowButton:NSWindowCloseButton] setHidden:YES];\n+        [[self->nsWindow standardWindowButton:NSWindowMiniaturizeButton] setHidden:YES];\n+        [[self->nsWindow standardWindowButton:NSWindowZoomButton] setHidden:YES];\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassWindow+Overrides.m","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,1 @@\n+    BOOL                isStandardButtonsVisible;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassWindow.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -377,0 +377,11 @@\n+        bool isTitled = (jStyleMask & com_sun_glass_ui_Window_TITLED) != 0;\n+        bool isClosable = (jStyleMask & com_sun_glass_ui_Window_CLOSABLE) != 0;\n+        bool isMinimizable = (jStyleMask & com_sun_glass_ui_Window_MINIMIZABLE) != 0;\n+        bool isMaximizable = (jStyleMask & com_sun_glass_ui_Window_MAXIMIZABLE) != 0;\n+        bool isTransparent = (jStyleMask & com_sun_glass_ui_Window_TRANSPARENT) != 0;\n+        bool isUtility = (jStyleMask & com_sun_glass_ui_Window_UTILITY) != 0;\n+        bool isPopup = (jStyleMask & com_sun_glass_ui_Window_POPUP) != 0;\n+        bool isUnified = (jStyleMask & com_sun_glass_ui_Window_UNIFIED) != 0;\n+        bool isExtended = (jStyleMask & com_sun_glass_ui_Window_EXTENDED) != 0;\n+        bool isNonClientOverlay = (jStyleMask & com_sun_glass_ui_Window_NON_CLIENT_OVERLAY) != 0;\n+\n@@ -379,1 +390,1 @@\n-        if ((jStyleMask&com_sun_glass_ui_Window_TITLED) != 0)\n+        if (isTitled)\n@@ -384,3 +395,0 @@\n-        bool isUtility = (jStyleMask & com_sun_glass_ui_Window_UTILITY) != 0;\n-        bool isPopup = (jStyleMask & com_sun_glass_ui_Window_POPUP) != 0;\n-\n@@ -388,1 +396,1 @@\n-        if ((jStyleMask&com_sun_glass_ui_Window_TRANSPARENT) == 0)\n+        if (!isTransparent)\n@@ -390,1 +398,1 @@\n-            if ((jStyleMask&com_sun_glass_ui_Window_CLOSABLE) != 0)\n+            if (isClosable)\n@@ -395,2 +403,1 @@\n-            if (((jStyleMask&com_sun_glass_ui_Window_MINIMIZABLE) != 0) ||\n-                ((jStyleMask&com_sun_glass_ui_Window_MAXIMIZABLE) != 0))\n+            if (isMinimizable || isMaximizable)\n@@ -403,1 +410,1 @@\n-            if ((jStyleMask&com_sun_glass_ui_Window_EXTENDED) != 0) {\n+            if (isExtended) {\n@@ -407,1 +414,1 @@\n-            if ((jStyleMask&com_sun_glass_ui_Window_UNIFIED) != 0) {\n+            if (isUnified) {\n@@ -413,1 +420,9 @@\n-                styleMask = styleMask | NSWindowStyleMaskUtilityWindow | NSWindowStyleMaskNonactivatingPanel;\n+                styleMask = styleMask | NSWindowStyleMaskNonactivatingPanel;\n+\n+                \/\/ The NSWindowStyleMaskUtilityWindow style makes the close button appear very small (because the\n+                \/\/ title bar is thinner than normal). This doesn't work well with client-side title bars in extended\n+                \/\/ windows: the point of a client-side title bar is its ability to host custom controls, so it can't\n+                \/\/ be very thin. We therefore only add this style for non-extended windows.\n+                if (!isExtended) {\n+                    styleMask |= NSWindowStyleMaskUtilityWindow;\n+                }\n@@ -431,0 +446,1 @@\n+        window->isStandardButtonsVisible = YES;\n@@ -432,1 +448,1 @@\n-        if ((jStyleMask & com_sun_glass_ui_Window_EXTENDED) != 0) {\n+        if (isExtended) {\n@@ -437,1 +453,2 @@\n-            if ((jStyleMask & com_sun_glass_ui_Window_NON_CLIENT_OVERLAY) == 0) {\n+            \/\/ An extended window without non-client controls has no visible standard window buttons.\n+            if (!isNonClientOverlay) {\n@@ -441,0 +458,1 @@\n+                window->isStandardButtonsVisible = NO;\n@@ -444,1 +462,1 @@\n-        if ((jStyleMask & com_sun_glass_ui_Window_UNIFIED) != 0) {\n+        if (isUnified) {\n@@ -449,3 +467,8 @@\n-        if ((jStyleMask & com_sun_glass_ui_Window_UTILITY) != 0) {\n-            [[window->nsWindow standardWindowButton:NSWindowMiniaturizeButton] setHidden:YES];\n-            [[window->nsWindow standardWindowButton:NSWindowZoomButton] setHidden:YES];\n+        if (isUtility) {\n+            \/\/ When we hide the standard window buttons, they are still part of the button group that activates\n+            \/\/ the hover appearance (the icons inside the buttons) when the cursor is over any of the buttons.\n+            \/\/ This leads to the close button receiving the hover appearance when the mouse cursor is over one\n+            \/\/ of the hidden buttons. Setting the hidden buttons' frame to an empty rectangle fixes this.\n+            [[window->nsWindow standardWindowButton:NSWindowMiniaturizeButton] setFrame:CGRectMake(0, 0, 0, 0)];\n+            [[window->nsWindow standardWindowButton:NSWindowZoomButton] setFrame:CGRectMake(0, 0, 0, 0)];\n+\n@@ -462,2 +485,1 @@\n-        window->isDecorated = (jStyleMask&com_sun_glass_ui_Window_TITLED) != 0 ||\n-                              (jStyleMask&com_sun_glass_ui_Window_EXTENDED) != 0;\n+        window->isDecorated = isTitled || isExtended;\n@@ -481,2 +503,1 @@\n-        window->isTransparent = (jStyleMask & com_sun_glass_ui_Window_TRANSPARENT) != 0;\n-        if (window->isTransparent == YES)\n+        if (isTransparent)\n@@ -494,0 +515,1 @@\n+        window->isTransparent = isTransparent;\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassWindow.m","additions":43,"deletions":21,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -252,1 +252,1 @@\n-        HeaderBarBase.setHeaderButtonType(iconifyButton, HeaderButtonType.MINIMIZE);\n+        HeaderBarBase.setHeaderButtonType(iconifyButton, HeaderButtonType.ICONIFY);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/StageTesterWindow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}