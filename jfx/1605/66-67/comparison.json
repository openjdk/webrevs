{"files":[{"patch":"@@ -83,0 +83,1 @@\n+import javafx.scene.layout.HeaderDragType;\n@@ -85,0 +86,1 @@\n+import javafx.scene.transform.NonInvertibleTransformException;\n@@ -3068,5 +3070,11 @@\n-            pickRay.set(x, y, 1, 0, Double.POSITIVE_INFINITY);\n-            var pickResultChooser = new PickResultChooser();\n-            root.pickNode(pickRay, pickResultChooser);\n-            Node intersectedNode = pickResultChooser.getIntersectedNode();\n-            Boolean draggable = intersectedNode instanceof HeaderBar ? true : null;\n+            try {\n+                Point2D p = root.getLocalToSceneTransform().inverseTransform(x, y);\n+                pickRay.set(p.getX(), p.getY(), 1, 0, Double.POSITIVE_INFINITY);\n+            } catch (NonInvertibleTransformException e) {\n+                return null;\n+            }\n+\n+            var chooser = new PickResultChooser();\n+            root.pickNode(pickRay, chooser);\n+            Node intersectedNode = chooser.getIntersectedNode();\n+            HeaderDragType dragType = intersectedNode instanceof HeaderBar ? HeaderDragType.DRAGGABLE : null;\n@@ -3076,1 +3084,5 @@\n-                    return draggable == Boolean.TRUE ? HeaderAreaType.DRAGBAR : null;\n+                    return dragType == HeaderDragType.DRAGGABLE_SUBTREE\n+                        || dragType == HeaderDragType.DRAGGABLE\n+                        || HeaderBar.getDragType(chooser.getIntersectedNode()) == HeaderDragType.DRAGGABLE\n+                            ? HeaderAreaType.DRAGBAR\n+                            : null;\n@@ -3087,2 +3099,4 @@\n-                if (draggable == null && HeaderBar.isDraggable(intersectedNode) instanceof Boolean value) {\n-                    draggable = value;\n+                if (dragType == null\n+                        && HeaderBar.getDragType(intersectedNode) instanceof HeaderDragType type\n+                        && type != HeaderDragType.DRAGGABLE) {\n+                    dragType = type;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Scene.java","additions":22,"deletions":8,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -64,1 +64,2 @@\n- * can specify draggable content nodes of the {@code HeaderBar} with the {@link #setDraggable} method.\n+ * can specify draggable content nodes of the {@code HeaderBar} with the {@link #setDragType(Node, HeaderDragType)}\n+ * method.\n@@ -173,1 +174,1 @@\n-    private static final String DRAGGABLE = \"headerbar-draggable\";\n+    private static final String DRAG_TYPE = \"headerbar-drag-type\";\n@@ -179,1 +180,1 @@\n-     * Specifies whether the child and its subtree is a draggable part of the {@code HeaderBar}.\n+     * Specifies whether the child is a draggable part of the {@code HeaderBar}.\n@@ -181,3 +182,1 @@\n-     * If set to a non-null value, the value will apply for the entire subtree of the child unless\n-     * another node in the subtree specifies a different value. Setting the value to {@code null}\n-     * will remove the flag.\n+     * Setting the value to {@code null} will remove the flag.\n@@ -186,2 +185,1 @@\n-     * @param value a {@code Boolean} value indicating whether the child and its subtree is draggable,\n-     *              or {@code null} to remove the flag\n+     * @param value the {@code HeaderDragType}, or {@code null} to remove the flag\n@@ -189,2 +187,2 @@\n-    public static void setDraggable(Node child, Boolean value) {\n-        Pane.setConstraint(child, DRAGGABLE, value);\n+    public static void setDragType(Node child, HeaderDragType value) {\n+        Pane.setConstraint(child, DRAG_TYPE, value);\n@@ -194,1 +192,1 @@\n-     * Returns whether the child and its subtree is a draggable part of the {@code HeaderBar}.\n+     * Returns whether the child is a draggable part of the {@code HeaderBar}.\n@@ -197,2 +195,1 @@\n-     * @return a {@code Boolean} value indicating whether the child and its subtree is draggable,\n-     *         or {@code null} if not set\n+     * @return the {@code HeaderDragType}, or {@code null} if not set\n@@ -200,2 +197,2 @@\n-    public static Boolean isDraggable(Node child) {\n-        return (Boolean)Pane.getConstraint(child, DRAGGABLE);\n+    public static HeaderDragType getDragType(Node child) {\n+        return (HeaderDragType)Pane.getConstraint(child, DRAG_TYPE);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/HeaderBar.java","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package javafx.scene.layout;\n+\n+import javafx.scene.Node;\n+\n+\/**\n+ * Specifies whether a node is a draggable part of a {@link HeaderBar}.\n+ *\n+ * @since 25\n+ * @deprecated This is a preview feature which may be changed or removed in a future release.\n+ * @see HeaderBar#setDragType(Node, HeaderDragType)\n+ *\/\n+@Deprecated(since = \"25\")\n+public enum HeaderDragType {\n+\n+    \/**\n+     * The node is not a draggable part of the {@code HeaderBar}.\n+     * <p>\n+     * If the node inherits {@link #DRAGGABLE_SUBTREE} from its parent, the inheritance stops and\n+     * descendants of the node will not inherit {@code DRAGGABLE_SUBTREE}.\n+     *\/\n+    NONE,\n+\n+    \/**\n+     * The node is a draggable part of the {@code HeaderBar}.\n+     * <p>\n+     * This drag type does not apply to descendants of the node. However, it does not stop an inherited\n+     * {@link #DRAGGABLE_SUBTREE} drag type from being inherited by descendants of the node.\n+     *\/\n+    DRAGGABLE,\n+\n+    \/**\n+     * The node and its descendants are a draggable part of the {@code HeaderBar}.\n+     * <p>\n+     * This drag type is inherited by descendants of the node until a descendant specifies {@link #NONE}.\n+     *\/\n+    DRAGGABLE_SUBTREE\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/HeaderDragType.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -29,0 +29,3 @@\n+import com.sun.javafx.scene.SceneHelper;\n+import com.sun.javafx.tk.HeaderAreaType;\n+import com.sun.javafx.tk.TKSceneListener;\n@@ -35,0 +38,1 @@\n+import javafx.scene.Scene;\n@@ -36,0 +40,2 @@\n+import javafx.scene.layout.HeaderDragType;\n+import javafx.scene.layout.StackPane;\n@@ -37,0 +43,1 @@\n+import javafx.stage.Stage;\n@@ -42,0 +49,1 @@\n+import test.com.sun.javafx.pgstub.StubScene;\n@@ -438,0 +446,140 @@\n+\n+    @Nested\n+    class PickingTest {\n+        \/**\n+         * For picking tests, we use a header bar with four nested boxes, arranged from left to right.\n+         *\n+         * <pre>\n+         *     0        50       100      150      200\n+         *     ┌────────┬───────────────────────────────────┐\n+         *     │  (HB)  │  box1  ┌──────────────────────────┤\n+         *     │        │        │  box2  ┌─────────────────┤\n+         *     │        │        │        │  box3  ┌────────┤\n+         *     │        │        │        │        │  box4  │\n+         *     ╞════════╧════════╧════════╧════════╧════════╡\n+         *     │                                            │\n+         * <\/pre>\n+         *\/\n+        private static class TestHeaderBar extends HeaderBar {\n+            final Box box4 = new Box(null, 50, 0, 50, 100);\n+            final Box box3 = new Box(box4, 50, 0, 100, 100);\n+            final Box box2 = new Box(box3, 50, 0, 150, 100);\n+            final Box box1 = new Box(box2, 50, 0, 200, 100);\n+\n+            TestHeaderBar() {\n+                resize(250, 100);\n+                setCenter(box1);\n+            }\n+        }\n+\n+        private static class Box extends StackPane {\n+            Box(Node child, double x, double y, double width, double height) {\n+                setManaged(false);\n+                resizeRelocate(x, y, width, height);\n+\n+                if (child != null) {\n+                    getChildren().add(child);\n+                }\n+            }\n+        }\n+\n+        @Test\n+         void pickDraggableNode() {\n+            var headerBar = new TestHeaderBar();\n+            HeaderBar.setDragType(headerBar.box1, HeaderDragType.DRAGGABLE);\n+\n+            var scene = new Scene(headerBar, 250, 200);\n+            var stage = new Stage();\n+            stage.setScene(scene);\n+            stage.show();\n+\n+            \/\/ 1. HeaderBar is always draggable\n+            assertEquals(HeaderAreaType.DRAGBAR, pickHeaderArea(scene, 10, 10));\n+\n+            \/\/ 2. box1 is draggable because its drag type is DRAGGABLE\n+            assertEquals(HeaderAreaType.DRAGBAR, pickHeaderArea(scene, 60, 10));\n+\n+            \/\/ 3. box2\/box3\/box4 are not draggable, because they don't inherit DRAGGABLE from box1\n+            assertNull(pickHeaderArea(scene, 110, 10));\n+            assertNull(pickHeaderArea(scene, 160, 10));\n+            assertNull(pickHeaderArea(scene, 210, 10));\n+        }\n+\n+        @Test\n+        void pickDraggableNodeInSubtree() {\n+            var headerBar = new TestHeaderBar();\n+            HeaderBar.setDragType(headerBar.box1, HeaderDragType.DRAGGABLE_SUBTREE);\n+\n+            var scene = new Scene(headerBar, 250, 200);\n+            var stage = new Stage();\n+            stage.setScene(scene);\n+            stage.show();\n+\n+            \/\/ 1. HeaderBar is always draggable\n+            assertEquals(HeaderAreaType.DRAGBAR, pickHeaderArea(scene, 10, 10));\n+\n+            \/\/ 2. box1 is draggable because its drag type is DRAGGABLE_SUBTREE\n+            assertEquals(HeaderAreaType.DRAGBAR, pickHeaderArea(scene, 60, 10));\n+\n+            \/\/ 3. box2\/box3\/box4 are draggable, because they inherit DRAGGABLE_SUBTREE from box1\n+            assertEquals(HeaderAreaType.DRAGBAR, pickHeaderArea(scene, 110, 10));\n+            assertEquals(HeaderAreaType.DRAGBAR, pickHeaderArea(scene, 160, 10));\n+            assertEquals(HeaderAreaType.DRAGBAR, pickHeaderArea(scene, 210, 10));\n+        }\n+\n+        @Test\n+        void stopInheritanceOfDraggableSubtree() {\n+            var headerBar = new TestHeaderBar();\n+            HeaderBar.setDragType(headerBar.box1, HeaderDragType.DRAGGABLE_SUBTREE);\n+            HeaderBar.setDragType(headerBar.box3, HeaderDragType.NONE);\n+\n+            var scene = new Scene(headerBar, 250, 200);\n+            var stage = new Stage();\n+            stage.setScene(scene);\n+            stage.show();\n+\n+            \/\/ 1. HeaderBar is always draggable\n+            assertEquals(HeaderAreaType.DRAGBAR, pickHeaderArea(scene, 10, 10));\n+\n+            \/\/ 2. box1 is draggable because its drag type is DRAGGABLE_SUBTREE\n+            assertEquals(HeaderAreaType.DRAGBAR, pickHeaderArea(scene, 60, 10));\n+\n+            \/\/ 3. box2 is draggable, because it inherits DRAGGABLE_SUBTREE from box1\n+            assertEquals(HeaderAreaType.DRAGBAR, pickHeaderArea(scene, 110, 10));\n+\n+            \/\/ 4. box3\/box4 are not draggable, because NONE stops the inherited DRAGGABLE_SUBTREE\n+            assertNull(pickHeaderArea(scene, 160, 10));\n+            assertNull(pickHeaderArea(scene, 210, 10));\n+        }\n+\n+        @Test\n+        void draggableNodeDoesNotStopInheritanceOfDraggableSubtree() {\n+            var headerBar = new TestHeaderBar();\n+            HeaderBar.setDragType(headerBar.box1, HeaderDragType.DRAGGABLE_SUBTREE);\n+            HeaderBar.setDragType(headerBar.box3, HeaderDragType.DRAGGABLE);\n+\n+            var scene = new Scene(headerBar, 250, 200);\n+            var stage = new Stage();\n+            stage.setScene(scene);\n+            stage.show();\n+\n+            \/\/ 1. HeaderBar is always draggable\n+            assertEquals(HeaderAreaType.DRAGBAR, pickHeaderArea(scene, 10, 10));\n+\n+            \/\/ 2. box1 is draggable because its drag type is DRAGGABLE_SUBTREE\n+            assertEquals(HeaderAreaType.DRAGBAR, pickHeaderArea(scene, 60, 10));\n+\n+            \/\/ 3. box2 is draggable, because it inherits DRAGGABLE_SUBTREE from box1\n+            assertEquals(HeaderAreaType.DRAGBAR, pickHeaderArea(scene, 110, 10));\n+\n+            \/\/ 4. box3\/box4 are draggable, because DRAGGABLE doesn't stop the inherited DRAGGABLE_SUBTREE from box1\n+            assertEquals(HeaderAreaType.DRAGBAR, pickHeaderArea(scene, 160, 10));\n+            assertEquals(HeaderAreaType.DRAGBAR, pickHeaderArea(scene, 210, 10));\n+        }\n+\n+        private static HeaderAreaType pickHeaderArea(Scene scene, double x, double y) {\n+            var peer = (StubScene)SceneHelper.getPeer(scene);\n+            TKSceneListener listener = ReflectionUtils.getFieldValue(peer, \"listener\");\n+            return listener.pickHeaderArea(x, y);\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/test\/java\/test\/javafx\/scene\/layout\/HeaderBarTest.java","additions":148,"deletions":0,"binary":false,"changes":148,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+import javafx.scene.layout.HeaderDragType;\n@@ -199,2 +200,1 @@\n-        HeaderBar.setDraggable(leadingContent, true);\n-        HeaderBar.setDraggable(menuBar, false);\n+        HeaderBar.setDragType(leadingContent, HeaderDragType.DRAGGABLE);\n@@ -223,1 +223,0 @@\n-            HeaderBar.setDraggable(adaptiveButtonHeight, false);\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/tools\/StageTesterWindow.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}