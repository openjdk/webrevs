{"files":[{"patch":"@@ -32,2 +32,0 @@\n-import javafx.collections.FXCollections;\n-import javafx.collections.ObservableList;\n@@ -35,0 +33,2 @@\n+import javafx.scene.layout.Region;\n+import javafx.util.Subscription;\n@@ -39,0 +39,1 @@\n+import java.util.Objects;\n@@ -238,0 +239,1 @@\n+    private Region headerBar;\n@@ -458,0 +460,34 @@\n+    \/**\n+     * Registers a user-provided header bar with this window.\n+     * <p>\n+     * The registration will be accepted, but ignored if the window is not an extended\n+     * window, or if another header bar is already registered.\n+     *\n+     * @param headerBar the header bar\n+     * @return a {@code Subscription} to unregister\n+     *\/\n+    public final Subscription registerHeaderBar(Region headerBar) {\n+        Objects.requireNonNull(headerBar);\n+\n+        if (!isExtendedWindow() || this.headerBar != null) {\n+            return Subscription.EMPTY;\n+        }\n+\n+        this.headerBar = headerBar;\n+\n+        Subscription subscription = headerBar.heightProperty().subscribe(\n+            value -> onHeaderBarHeightChanged(value.doubleValue()));\n+\n+        return () -> {\n+            this.headerBar = null;\n+            subscription.unsubscribe();\n+        };\n+    }\n+\n+    \/**\n+     * Called when the height of a registered user-provided header bar has changed.\n+     *\n+     * @param height the height of the header bar\n+     *\/\n+    protected void onHeaderBarHeightChanged(double height) {}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/Window.java","additions":38,"deletions":2,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-        this, \"metrics\", new WindowOverlayMetrics(HorizontalDirection.RIGHT, new Dimension2D(0, 0)));\n+        this, \"metrics\", new WindowOverlayMetrics(HorizontalDirection.RIGHT, new Dimension2D(0, 0), 0));\n@@ -427,0 +427,1 @@\n+        \/\/ Update the overlay metrics if they have changed.\n@@ -430,1 +431,1 @@\n-                new Dimension2D(totalWidth, totalHeight));\n+                new Dimension2D(totalWidth, totalHeight), totalHeight);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/WindowControlsOverlay.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+ * @param minHeight the minimum height of the window buttons\n@@ -39,1 +40,1 @@\n-public record WindowOverlayMetrics(HorizontalDirection placement, Dimension2D size) {\n+public record WindowOverlayMetrics(HorizontalDirection placement, Dimension2D size, double minHeight) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/WindowOverlayMetrics.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import javafx.beans.value.ObservableValue;\n@@ -53,0 +52,5 @@\n+\n+        if (isExtendedWindow()) {\n+            \/\/ The default window metrics correspond to a small toolbar style.\n+            updateWindowOverlayMetrics(NSWindowToolbarStyle.SMALL);\n+        }\n@@ -185,0 +189,2 @@\n+    private native void _setToolbarStyle(long ptr, int style);\n+\n@@ -186,4 +192,19 @@\n-    public ObservableValue<WindowOverlayMetrics> getWindowOverlayMetrics() {\n-        HorizontalDirection direction = _isRightToLeftLayoutDirection()\n-            ? HorizontalDirection.RIGHT\n-            : HorizontalDirection.LEFT;\n+    protected void onHeaderBarHeightChanged(double height) {\n+        var toolbarStyle = NSWindowToolbarStyle.ofHeight(height);\n+        _setToolbarStyle(getRawHandle(), toolbarStyle.style);\n+        updateWindowOverlayMetrics(toolbarStyle);\n+    }\n+\n+    private void updateWindowOverlayMetrics(NSWindowToolbarStyle toolbarStyle) {\n+        windowOverlayMetrics.set(new WindowOverlayMetrics(\n+            _isRightToLeftLayoutDirection()\n+                ? HorizontalDirection.RIGHT\n+                : HorizontalDirection.LEFT,\n+            toolbarStyle.size,\n+            NSWindowToolbarStyle.SMALL.size.getHeight()));\n+    }\n+\n+    private enum NSWindowToolbarStyle {\n+        SMALL(68, 28, 1), \/\/ NSWindowToolbarStyleExpanded\n+        MEDIUM(78, 38, 4), \/\/ NSWindowToolbarStyleUnifiedCompact\n+        LARGE(90, 52, 3); \/\/ NSWindowToolbarStyleUnified\n@@ -191,1 +212,4 @@\n-        windowOverlayMetrics.set(new WindowOverlayMetrics(direction, new Dimension2D(78, 38)));\n+        NSWindowToolbarStyle(double width, double height, int style) {\n+            this.size = new Dimension2D(width, height);\n+            this.style = style;\n+        }\n@@ -193,1 +217,8 @@\n-        return windowOverlayMetrics;\n+        final Dimension2D size;\n+        final int style;\n+\n+        static NSWindowToolbarStyle ofHeight(double height) {\n+            if (height >= LARGE.size.getHeight()) return LARGE;\n+            if (height >= MEDIUM.size.getHeight()) return MEDIUM;\n+            return SMALL;\n+        }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacWindow.java","additions":38,"deletions":7,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -171,3 +171,1 @@\n-\n-        leftSystemInsetProperty().subscribe(this::updateDefaultMinHeight);\n-        rightSystemInsetProperty().subscribe(this::updateDefaultMinHeight);\n+        minSystemHeightProperty().subscribe(this::updateMinHeight);\n@@ -495,1 +493,1 @@\n-    private void updateDefaultMinHeight() {\n+    private void updateMinHeight() {\n@@ -498,1 +496,1 @@\n-        \/\/ Only change the default minHeight if it was not set by a stylesheet or application code.\n+        \/\/ Only change minHeight if it was not set by a stylesheet or application code.\n@@ -500,2 +498,1 @@\n-            double height = Math.max(getLeftSystemInset().getHeight(), getRightSystemInset().getHeight());\n-            ((StyleableDoubleProperty)minHeightProperty()).applyStyle(null, height);\n+            ((StyleableDoubleProperty)minHeightProperty()).applyStyle(null, getMinSystemHeight());\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/HeaderBar.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import javafx.beans.property.ReadOnlyDoubleProperty;\n+import javafx.beans.property.ReadOnlyDoubleWrapper;\n@@ -113,4 +115,8 @@\n-            subscription = windowStage\n-                .getPlatformWindow()\n-                .getWindowOverlayMetrics()\n-                .subscribe(this::onMetricsChanged);\n+            subscription = Subscription.combine(\n+                windowStage\n+                    .getPlatformWindow()\n+                    .getWindowOverlayMetrics()\n+                    .subscribe(this::onMetricsChanged),\n+                windowStage\n+                    .getPlatformWindow()\n+                    .registerHeaderBar(this));\n@@ -134,1 +140,5 @@\n-        } else if (currentMetrics.placement() == HorizontalDirection.LEFT) {\n+            minSystemHeight.set(0);\n+            return;\n+        }\n+\n+        if (currentMetrics.placement() == HorizontalDirection.LEFT) {\n@@ -144,0 +154,2 @@\n+\n+        minSystemHeight.set(currentMetrics.minHeight());\n@@ -193,0 +205,22 @@\n+\n+    \/**\n+     * The absolute minimum height of {@link #leftSystemInsetProperty() leftSystemInset} and\n+     * {@link #rightSystemInsetProperty() rightSystemInset}. This is a platform-dependent value\n+     * that a {@code HeaderBarBase} implementation can use to define a reasonable minimum height\n+     * for the header bar area.\n+     *\/\n+    private final ReadOnlyDoubleWrapper minSystemHeight =\n+        new ReadOnlyDoubleWrapper(this, \"minSystemHeight\") {\n+            @Override\n+            protected void invalidated() {\n+                requestLayout();\n+            }\n+        };\n+\n+    public final ReadOnlyDoubleProperty minSystemHeightProperty() {\n+        return minSystemHeight.getReadOnlyProperty();\n+    }\n+\n+    public final double getMinSystemHeight() {\n+        return minSystemHeight.get();\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/layout\/HeaderBarBase.java","additions":39,"deletions":5,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -1506,0 +1506,23 @@\n+\/*\n+ * Class:     com_sun_glass_ui_mac_MacWindow\n+ * Method:    _setToolbarStyle\n+ * Signature: (JI)V\n+ *\/\n+JNIEXPORT void JNICALL Java_com_sun_glass_ui_mac_MacWindow__1setToolbarStyle\n+(JNIEnv *env, jobject jWindow, jlong jPtr, jint style)\n+{\n+    LOG(\"Java_com_sun_glass_ui_mac_MacWindow__1setToolbarStyle\");\n+    if (!jPtr) return;\n+\n+    GLASS_ASSERT_MAIN_JAVA_THREAD(env);\n+    GLASS_POOL_ENTER;\n+    {\n+        GlassWindow *window = getGlassWindow(env, jPtr);\n+        if (window && window->nsWindow) {\n+            [window->nsWindow setToolbarStyle:style];\n+        }\n+    }\n+    GLASS_POOL_EXIT;\n+    GLASS_CHECK_EXCEPTION(env);\n+}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/mac\/GlassWindow.m","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"}]}