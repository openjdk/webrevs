{"files":[{"patch":"@@ -29,1 +29,1 @@\n-\n+import javafx.scene.Node;\n@@ -72,1 +72,1 @@\n-        public void handleMenuEvent(View view, int x, int y, int xAbs,\n+        public boolean handleMenuEvent(View view, int x, int y, int xAbs,\n@@ -74,0 +74,1 @@\n+            return false;\n@@ -368,2 +369,10 @@\n-        public boolean handleDragAreaHitTestEvent(double x, double y) {\n-            return false;\n+        \/**\n+         * Returns the draggable area node at the specified coordinates, or {@code null}\n+         * if the specified coordinates do not intersect with a draggable area.\n+         *\n+         * @param x the X coordinate\n+         * @param y the Y coordinate\n+         * @return the draggable area node, or {@code null}\n+         *\/\n+        public Node pickDragAreaNode(double x, double y) {\n+            return null;\n@@ -579,1 +588,1 @@\n-    private void handleMenuEvent(int x, int y, int xAbs, int yAbs, boolean isKeyboardTrigger) {\n+    protected boolean handleMenuEvent(int x, int y, int xAbs, int yAbs, boolean isKeyboardTrigger) {\n@@ -581,1 +590,1 @@\n-            this.eventHandler.handleMenuEvent(this, x, y, xAbs, yAbs, isKeyboardTrigger);\n+            return this.eventHandler.handleMenuEvent(this, x, y, xAbs, yAbs, isKeyboardTrigger);\n@@ -583,0 +592,1 @@\n+        return false;\n@@ -953,5 +963,2 @@\n-        if (!inFullscreen\n-                && nonClientHandler != null\n-                && nonClientHandler.handleMouseEvent(type, button, x, y, xAbs, yAbs, clickCount)) {\n-            return;\n-        }\n+        boolean handled = !inFullscreen && nonClientHandler != null\n+            && nonClientHandler.handleMouseEvent(type, button, x, y, xAbs, yAbs, clickCount);\n@@ -960,1 +967,1 @@\n-        if (MouseEvent.isNonClientEvent(type)) {\n+        if (handled || MouseEvent.isNonClientEvent(type)) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/View.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -267,1 +267,1 @@\n-        return eventHandler.handleDragAreaHitTestEvent(wx, wy);\n+        return eventHandler.pickDragAreaNode(wx, wy) != null;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/gtk\/GtkWindow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -171,1 +171,1 @@\n-                if (eventHandler != null && eventHandler.handleDragAreaHitTestEvent(wx, wy)) {\n+                if (eventHandler != null && eventHandler.pickDragAreaNode(wx, wy) != null) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/mac\/MacWindow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,0 +98,22 @@\n+\n+    @Override\n+    protected void notifyMenu(int x, int y, int xAbs, int yAbs, boolean isKeyboardTrigger) {\n+        \/\/ If all of the following conditions are satisfied, we open a system menu at the specified coordinates:\n+        \/\/ 1. The application didn't consume the menu event.\n+        \/\/ 2. The window is an EXTENDED window.\n+        \/\/ 3. The menu event occurred on a draggable area.\n+        if (!handleMenuEvent(x, y, xAbs, yAbs, isKeyboardTrigger)) {\n+            var window = (WinWindow)getWindow();\n+            if (!window.isExtendedWindow()) {\n+                return;\n+            }\n+\n+            double wx = x \/ window.getPlatformScaleX();\n+            double wy = y \/ window.getPlatformScaleY();\n+\n+            EventHandler eventHandler = getEventHandler();\n+            if (eventHandler != null && eventHandler.pickDragAreaNode(wx, wy) != null) {\n+                window.showSystemMenu(x, y);\n+            }\n+        }\n+    }\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinView.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import com.sun.glass.events.MouseEvent;\n@@ -374,1 +373,0 @@\n-            boolean handled = overlay.handleMouseEvent(type, button, wx, wy);\n@@ -376,9 +374,2 @@\n-            \/\/ A right click on a non-client header bar area opens the system menu.\n-            if (!handled && type == MouseEvent.NC_UP && button == MouseEvent.BUTTON_RIGHT) {\n-                View.EventHandler eventHandler = view != null ? view.getEventHandler() : null;\n-                if (eventHandler != null && eventHandler.handleDragAreaHitTestEvent(wx, wy)) {\n-                    _showSystemMenu(getRawHandle(), x, y);\n-                }\n-            }\n-\n-            return handled;\n+            \/\/ Give the window button overlay the first chance to handle the event.\n+            return overlay.handleMouseEvent(type, button, wx, wy);\n@@ -388,0 +379,10 @@\n+    \/**\n+     * Opens a system menu at the specified coordinates.\n+     *\n+     * @param x the X coordinate in physical pixels\n+     * @param y the Y coordinate in physical pixels\n+     *\/\n+    public void showSystemMenu(int x, int y) {\n+        _showSystemMenu(getRawHandle(), x, y);\n+    }\n+\n@@ -424,1 +425,1 @@\n-        if (eventHandler != null && eventHandler.handleDragAreaHitTestEvent(wx, wy)) {\n+        if (eventHandler != null && eventHandler.pickDragAreaNode(wx, wy) != null) {\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinWindow.java","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import javafx.scene.Node;\n@@ -87,1 +88,1 @@\n-    public void menuEvent(double x, double y, double xAbs, double yAbs,\n+    public boolean menuEvent(double x, double y, double xAbs, double yAbs,\n@@ -125,1 +126,2 @@\n-     * Tests whether the specified coordinate identifies a draggable area.\n+     * Returns the draggable area node at the specified coordinates, or {@code null}\n+     * if the specified coordinates do not intersect with a draggable area.\n@@ -129,1 +131,1 @@\n-     * @return {@code true} if the area is draggable, {@code false} otherwise\n+     * @return the draggable area node, or {@code null}\n@@ -131,1 +133,1 @@\n-    public boolean dragAreaHitTest(double x, double y);\n+    public Node pickDragAreaNode(double x, double y);\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/TKSceneListener.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+import javafx.scene.Node;\n@@ -458,3 +459,3 @@\n-    @Override public void handleMenuEvent(final View view,\n-                                          final int x, final int y, final int xAbs, final int yAbs,\n-                                          final boolean isKeyboardTrigger)\n+    @Override public boolean handleMenuEvent(final View view,\n+                                             final int x, final int y, final int xAbs, final int yAbs,\n+                                             final boolean isKeyboardTrigger)\n@@ -470,17 +471,17 @@\n-            QuantumToolkit.runWithoutRenderLock(() -> {\n-                return AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                    if (scene.sceneListener != null) {\n-                        double pScaleX, pScaleY, spx, spy, sx, sy;\n-                        final Window w = view.getWindow();\n-                        if (w != null) {\n-                            pScaleX = w.getPlatformScaleX();\n-                            pScaleY = w.getPlatformScaleY();\n-                            Screen scr = w.getScreen();\n-                            if (scr != null) {\n-                                spx = scr.getPlatformX();\n-                                spy = scr.getPlatformY();\n-                                sx = scr.getX();\n-                                sy = scr.getY();\n-                            } else {\n-                                spx = spy = sx = sy = 0.0;\n-                            }\n+            return QuantumToolkit.runWithoutRenderLock(() -> {\n+                return AccessController.doPrivileged((PrivilegedAction<Boolean>) () -> {\n+                    if (scene.sceneListener == null) {\n+                        return false;\n+                    }\n+\n+                    double pScaleX, pScaleY, spx, spy, sx, sy;\n+                    final Window w = view.getWindow();\n+                    if (w != null) {\n+                        pScaleX = w.getPlatformScaleX();\n+                        pScaleY = w.getPlatformScaleY();\n+                        Screen scr = w.getScreen();\n+                        if (scr != null) {\n+                            spx = scr.getPlatformX();\n+                            spy = scr.getPlatformY();\n+                            sx = scr.getX();\n+                            sy = scr.getY();\n@@ -488,1 +489,0 @@\n-                            pScaleX = pScaleY = 1.0;\n@@ -491,4 +491,3 @@\n-                        scene.sceneListener.menuEvent(x \/ pScaleX, y \/ pScaleY,\n-                                                      sx + (xAbs - spx) \/ pScaleX,\n-                                                      sy + (yAbs - spy) \/ pScaleY,\n-                                                      isKeyboardTrigger);\n+                    } else {\n+                        pScaleX = pScaleY = 1.0;\n+                        spx = spy = sx = sy = 0.0;\n@@ -496,1 +495,5 @@\n-                    return null;\n+\n+                    return scene.sceneListener.menuEvent(x \/ pScaleX, y \/ pScaleY,\n+                                                         sx + (xAbs - spx) \/ pScaleX,\n+                                                         sy + (yAbs - spy) \/ pScaleY,\n+                                                         isKeyboardTrigger);\n@@ -1411,1 +1414,1 @@\n-    public boolean handleDragAreaHitTestEvent(double x, double y) {\n+    public Node pickDragAreaNode(double x, double y) {\n@@ -1414,1 +1417,1 @@\n-                return scene.sceneListener.dragAreaHitTest(x, y);\n+                return scene.sceneListener.pickDragAreaNode(x, y);\n@@ -1417,1 +1420,1 @@\n-            return false;\n+            return null;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/javafx\/tk\/quantum\/GlassViewEventHandler.java","additions":32,"deletions":29,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -1906,1 +1906,1 @@\n-    private void processMenuEvent(double x2, double y2, double xAbs, double yAbs, boolean isKeyboardTrigger) {\n+    private boolean processMenuEvent(double x2, double y2, double xAbs, double yAbs, boolean isKeyboardTrigger) {\n@@ -1940,0 +1940,2 @@\n+        boolean handled = false;\n+\n@@ -1943,1 +1945,1 @@\n-            Event.fireEvent(eventTarget, context);\n+            handled = EventUtil.fireEvent(eventTarget, context) == null;\n@@ -1946,0 +1948,2 @@\n+\n+        return handled;\n@@ -2745,1 +2749,1 @@\n-        public void menuEvent(double x, double y, double xAbs, double yAbs,\n+        public boolean menuEvent(double x, double y, double xAbs, double yAbs,\n@@ -2747,1 +2751,1 @@\n-            Scene.this.processMenuEvent(x, y, xAbs,yAbs, isKeyboardTrigger);\n+            return Scene.this.processMenuEvent(x, y, xAbs,yAbs, isKeyboardTrigger);\n@@ -3005,1 +3009,1 @@\n-        public boolean dragAreaHitTest(double x, double y) {\n+        public Node pickDragAreaNode(double x, double y) {\n@@ -3007,5 +3011,3 @@\n-            if (root != null) {\n-                pickRay.set(x, y, 1, 0, Double.POSITIVE_INFINITY);\n-                var pickResultChooser = new PickResultChooser();\n-                root.pickNode(pickRay, pickResultChooser);\n-                var intersectedNode = pickResultChooser.getIntersectedNode();\n+            if (root == null) {\n+                return null;\n+            }\n@@ -3013,0 +3015,7 @@\n+            pickRay.set(x, y, 1, 0, Double.POSITIVE_INFINITY);\n+            var pickResultChooser = new PickResultChooser();\n+            root.pickNode(pickRay, pickResultChooser);\n+            Node intersectedNode = pickResultChooser.getIntersectedNode();\n+            Boolean draggable = intersectedNode instanceof HeaderBarBase ? true : null;\n+\n+            while (intersectedNode != null) {\n@@ -3014,1 +3023,1 @@\n-                    return true;\n+                    return draggable == Boolean.TRUE ? intersectedNode : null;\n@@ -3017,6 +3026,2 @@\n-                while (intersectedNode != null) {\n-                    if (HeaderBarBase.isDraggable(intersectedNode) instanceof Boolean value) {\n-                        return value;\n-                    }\n-\n-                    intersectedNode = intersectedNode.getParent();\n+                if (draggable == null && HeaderBarBase.isDraggable(intersectedNode) instanceof Boolean value) {\n+                    draggable = value;\n@@ -3025,1 +3030,1 @@\n-                return false;\n+                intersectedNode = intersectedNode.getParent();\n@@ -3028,1 +3033,1 @@\n-            return false;\n+            return null;\n","filename":"modules\/javafx.graphics\/src\/main\/java\/javafx\/scene\/Scene.java","additions":24,"deletions":19,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -551,1 +551,1 @@\n-                HandleViewNonClientMouseEvent(GetHWND(), msg, wParam, lParam);\n+                HandleNonClientMouseEvents(msg, wParam, lParam);\n@@ -573,1 +573,1 @@\n-                HandleViewNonClientMouseEvent(GetHWND(), msg, wParam, lParam);\n+                HandleNonClientMouseEvents(msg, wParam, lParam);\n@@ -628,0 +628,14 @@\n+void GlassWindow::HandleNonClientMouseEvents(UINT msg, WPARAM wParam, LPARAM lParam)\n+{\n+    HandleViewNonClientMouseEvent(GetHWND(), msg, wParam, lParam);\n+    LRESULT result;\n+\n+    \/\/ If the right mouse button was released on a HTCAPTION area, we synthesize a WM_CONTEXTMENU event.\n+    \/\/ This allows JavaFX applications to respond to context menu events in the non-client header bar area.\n+    if (msg == WM_NCRBUTTONUP\n+            && HandleNCHitTestEvent(GET_X_LPARAM(lParam), GET_Y_LPARAM(lParam), result)\n+            && result == HTCAPTION) {\n+        HandleViewMenuEvent(GetHWND(), WM_CONTEXTMENU, (WPARAM)GetHWND(), ::GetMessagePos());\n+    }\n+}\n+\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassWindow.cpp","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -191,0 +191,1 @@\n+    void HandleNonClientMouseEvents(UINT msg, WPARAM wParam, LPARAM lParam);\n","filename":"modules\/javafx.graphics\/src\/main\/native-glass\/win\/GlassWindow.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}