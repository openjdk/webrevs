{"files":[{"patch":"@@ -1,173 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.oracle.tools.fx.monkey;\n-\n-import javafx.application.Platform;\n-import javafx.geometry.Insets;\n-import javafx.geometry.NodeOrientation;\n-import javafx.geometry.Pos;\n-import javafx.scene.Parent;\n-import javafx.scene.Scene;\n-import javafx.scene.control.Button;\n-import javafx.scene.control.CheckBox;\n-import javafx.scene.control.SplitPane;\n-import javafx.scene.layout.Background;\n-import javafx.scene.layout.BorderPane;\n-import javafx.scene.layout.HeaderBar;\n-import javafx.scene.layout.HeaderButtonType;\n-import javafx.scene.layout.HBox;\n-import javafx.scene.layout.VBox;\n-import javafx.scene.paint.Color;\n-import javafx.stage.Modality;\n-import javafx.stage.Stage;\n-import javafx.stage.StageStyle;\n-import javafx.stage.Window;\n-\n-public final class ExtendedWindow {\n-\n-    private ExtendedWindow() {}\n-\n-    public static void showSimpleHeaderBar(StageStyle style, NodeOrientation orientation) {\n-        var stage = new Stage();\n-\n-        var headerBar = new HeaderBar();\n-        headerBar.setBackground(Background.fill(Color.LIGHTSKYBLUE));\n-\n-        var resizable = new CheckBox(\"Resizable\");\n-        resizable.selectedProperty().bindBidirectional(stage.resizableProperty());\n-\n-        var fullScreen = new Button(\"Full-screen\");\n-        fullScreen.setOnAction(e -> stage.setFullScreen(!stage.isFullScreen()));\n-\n-        var content = new HBox(resizable, fullScreen);\n-        content.setSpacing(10);\n-        content.setAlignment(Pos.CENTER);\n-        headerBar.setCenter(content);\n-        HeaderBar.setAlignment(content, Pos.CENTER);\n-\n-        var root = new BorderPane();\n-        root.setTop(headerBar);\n-\n-        var scene = new Scene(root);\n-        scene.setNodeOrientation(orientation);\n-\n-        stage.initStyle(style);\n-        stage.setScene(scene);\n-        stage.setWidth(800);\n-        stage.setHeight(500);\n-        stage.show();\n-    }\n-\n-    public static void showSplitHeaderBar(StageStyle style, NodeOrientation orientation) {\n-        var stage = new Stage();\n-\n-        var leftHeaderBar = new HeaderBar();\n-        leftHeaderBar.setBackground(Background.fill(Color.VIOLET));\n-        leftHeaderBar.setTrailingSystemPadding(false);\n-\n-        var rightHeaderBar = new HeaderBar();\n-        rightHeaderBar.setBackground(Background.fill(Color.LIGHTSKYBLUE));\n-        rightHeaderBar.setLeadingSystemPadding(false);\n-\n-        var resizable = new CheckBox(\"Resizable\");\n-        resizable.selectedProperty().bindBidirectional(stage.resizableProperty());\n-\n-        var fullScreen = new Button(\"Full-screen\");\n-        fullScreen.setOnAction(e -> stage.setFullScreen(!stage.isFullScreen()));\n-\n-        var content = new HBox(resizable, fullScreen);\n-        content.setSpacing(10);\n-        content.setAlignment(Pos.CENTER);\n-        rightHeaderBar.setCenter(content);\n-        HeaderBar.setAlignment(content, Pos.CENTER);\n-\n-        var left = new BorderPane();\n-        left.setTop(leftHeaderBar);\n-\n-        var right = new BorderPane();\n-        right.setTop(rightHeaderBar);\n-\n-        var root = new SplitPane(left, right);\n-\n-        var scene = new Scene(root);\n-        scene.setNodeOrientation(orientation);\n-\n-        stage.initStyle(style);\n-        stage.setScene(scene);\n-        stage.setWidth(800);\n-        stage.setHeight(500);\n-        stage.show();\n-    }\n-\n-    public static void showCustomHeaderButtons(StageStyle style, NodeOrientation orientation) {\n-        var stage = new Stage();\n-\n-        var headerBar = new HeaderBar();\n-        headerBar.setBackground(Background.fill(Color.LIGHTSKYBLUE));\n-        headerBar.setMinHeight(40);\n-\n-        var resizable = new CheckBox(\"Resizable\");\n-        resizable.selectedProperty().bindBidirectional(stage.resizableProperty());\n-\n-        var fullScreen = new Button(\"Full-screen\");\n-        fullScreen.setOnAction(e -> stage.setFullScreen(!stage.isFullScreen()));\n-\n-        var minimize = new Button(\"Minimize\");\n-        minimize.setOnAction(e -> stage.setIconified(true));\n-        HeaderBar.setHeaderButtonType(minimize, HeaderButtonType.MINIMIZE);\n-\n-        var maximize = new Button(\"Maximize\/restore\");\n-        maximize.setOnAction(e -> stage.setMaximized(!stage.isMaximized()));\n-        HeaderBar.setHeaderButtonType(maximize, HeaderButtonType.MAXIMIZE);\n-\n-        var close = new Button(\"Close\");\n-        close.setOnAction(e -> stage.close());\n-        HeaderBar.setHeaderButtonType(close, HeaderButtonType.CLOSE);\n-\n-        var headerButtons = new HBox(minimize, maximize, close);\n-        headerButtons.setAlignment(Pos.CENTER);\n-        headerButtons.setSpacing(5);\n-        headerBar.setTrailing(headerButtons);\n-\n-        var content = new HBox(resizable, fullScreen);\n-        content.setSpacing(10);\n-        content.setAlignment(Pos.CENTER);\n-        headerBar.setCenter(content);\n-        HeaderBar.setAlignment(content, Pos.CENTER);\n-\n-        var root = new BorderPane();\n-        root.setTop(headerBar);\n-\n-        var scene = new Scene(root);\n-        scene.setNodeOrientation(orientation);\n-\n-        stage.initStyle(style);\n-        stage.initDefaultHeaderButtons(false);\n-        stage.setScene(scene);\n-        stage.setWidth(800);\n-        stage.setHeight(500);\n-        stage.show();\n-    }\n-}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/ExtendedWindow.java","additions":0,"deletions":173,"binary":false,"changes":173,"status":"deleted"},{"patch":"@@ -40,1 +40,0 @@\n-import javafx.scene.control.Menu;\n@@ -47,1 +46,0 @@\n-import javafx.stage.StageStyle;\n@@ -159,27 +157,1 @@\n-        FX.item(m, \"Open Modal Window\", this::openModalWindow);\n-        var stageMenu = new Menu(\"Open Extended Window\");\n-        FX.item(stageMenu, \"Single HeaderBar, EXTENDED\",\n-                () -> ExtendedWindow.showSimpleHeaderBar(StageStyle.EXTENDED, NodeOrientation.INHERIT));\n-        FX.item(stageMenu, \"Single HeaderBar, EXTENDED, RIGHT__TO__LEFT\",\n-                () -> ExtendedWindow.showSimpleHeaderBar(StageStyle.EXTENDED, NodeOrientation.RIGHT_TO_LEFT));\n-        FX.item(stageMenu, \"Single HeaderBar, EXTENDED__UTILITY\",\n-                () -> ExtendedWindow.showSimpleHeaderBar(StageStyle.EXTENDED_UTILITY, NodeOrientation.INHERIT));\n-        FX.item(stageMenu, \"Single HeaderBar, EXTENDED__UTILITY, RIGHT__TO__LEFT\",\n-                () -> ExtendedWindow.showSimpleHeaderBar(StageStyle.EXTENDED_UTILITY, NodeOrientation.RIGHT_TO_LEFT));\n-        FX.item(stageMenu, \"Split HeaderBar, EXTENDED\",\n-                () -> ExtendedWindow.showSplitHeaderBar(StageStyle.EXTENDED, NodeOrientation.INHERIT));\n-        FX.item(stageMenu, \"Split HeaderBar, EXTENDED, RIGHT__TO__LEFT\",\n-                () -> ExtendedWindow.showSplitHeaderBar(StageStyle.EXTENDED, NodeOrientation.RIGHT_TO_LEFT));\n-        FX.item(stageMenu, \"Split HeaderBar, EXTENDED__UTILITY\",\n-                () -> ExtendedWindow.showSplitHeaderBar(StageStyle.EXTENDED_UTILITY, NodeOrientation.INHERIT));\n-        FX.item(stageMenu, \"Split HeaderBar, EXTENDED__UTILITY, RIGHT__TO__LEFT\",\n-                () -> ExtendedWindow.showSplitHeaderBar(StageStyle.EXTENDED_UTILITY, NodeOrientation.RIGHT_TO_LEFT));\n-        FX.item(stageMenu, \"HeaderBar with custom buttons, EXTENDED\",\n-                () -> ExtendedWindow.showCustomHeaderButtons(StageStyle.EXTENDED, NodeOrientation.INHERIT));\n-        FX.item(stageMenu, \"HeaderBar with custom buttons, EXTENDED, RIGHT__TO__LEFT\",\n-                () -> ExtendedWindow.showCustomHeaderButtons(StageStyle.EXTENDED, NodeOrientation.RIGHT_TO_LEFT));\n-        FX.item(stageMenu, \"HeaderBar with custom buttons, EXTENDED__UTILITY\",\n-                () -> ExtendedWindow.showCustomHeaderButtons(StageStyle.EXTENDED_UTILITY, NodeOrientation.INHERIT));\n-        FX.item(stageMenu, \"HeaderBar with custom buttons, EXTENDED__UTILITY, RIGHT__TO__LEFT\",\n-                () -> ExtendedWindow.showCustomHeaderButtons(StageStyle.EXTENDED_UTILITY, NodeOrientation.RIGHT_TO_LEFT));\n-        FX.item(m, stageMenu);\n+        FX.item(m, \"Stage Tester\", this::openStageTesterWindow);\n@@ -245,2 +217,2 @@\n-    private void openModalWindow() {\n-        new ModalWindow(this).show();\n+    private void openStageTesterWindow() {\n+        new StageTesterWindow(this).show();\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/MainWindow.java","additions":3,"deletions":31,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1,66 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.oracle.tools.fx.monkey;\n-\n-import javafx.application.Platform;\n-import javafx.scene.Scene;\n-import javafx.scene.control.Button;\n-import javafx.scene.layout.BorderPane;\n-import javafx.scene.layout.HBox;\n-import javafx.stage.Modality;\n-import javafx.stage.Stage;\n-import javafx.stage.Window;\n-\n-\/**\n- * Test Modal Window\n- *\/\n-public class ModalWindow extends Stage {\n-    public ModalWindow(Window owner) {\n-        Button b1 = new Button(\"Does Nothing\");\n-        b1.setDefaultButton(false);\n-\n-        Button b2 = new Button(\"Platform.exit()\");\n-        b2.setDefaultButton(false);\n-        b2.setOnAction((ev) -> Platform.exit());\n-\n-        Button b3 = new Button(\"OK\");\n-        b3.setOnAction((ev) -> hide());\n-\n-        HBox bp = new HBox(b1, b2, b3);\n-        \/\/ FIX BUG: default button property ignored on macOS, ENTER goes to the first button\n-        b3.setDefaultButton(true);\n-\n-        BorderPane p = new BorderPane();\n-        p.setBottom(bp);\n-        System.out.println(b2.isDefaultButton() + \" \" + b3.isDefaultButton());\n-\n-        setTitle(\"Modal Window\");\n-        setScene(new Scene(p));\n-        initModality(Modality.APPLICATION_MODAL);\n-        initOwner(owner);\n-        setWidth(500);\n-        setHeight(200);\n-    }\n-}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/ModalWindow.java","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -0,0 +1,276 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.oracle.tools.fx.monkey;\n+\n+import javafx.application.Platform;\n+import javafx.collections.FXCollections;\n+import javafx.geometry.Insets;\n+import javafx.geometry.NodeOrientation;\n+import javafx.geometry.Pos;\n+import javafx.scene.Parent;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Button;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.Label;\n+import javafx.scene.control.SplitPane;\n+import javafx.scene.control.TextField;\n+import javafx.scene.layout.Background;\n+import javafx.scene.layout.BorderPane;\n+import javafx.scene.layout.GridPane;\n+import javafx.scene.layout.HeaderBar;\n+import javafx.scene.layout.HeaderBarBase;\n+import javafx.scene.layout.HeaderButtonType;\n+import javafx.scene.layout.HBox;\n+import javafx.scene.layout.VBox;\n+import javafx.scene.paint.Color;\n+import javafx.stage.Modality;\n+import javafx.stage.Stage;\n+import javafx.stage.StageStyle;\n+import javafx.stage.Window;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+\n+public final class StageTesterWindow extends Stage {\n+\n+    public StageTesterWindow(Stage owner) {\n+        var pane = new GridPane();\n+        pane.setHgap(10);\n+        pane.setVgap(10);\n+\n+        pane.add(new Label(\"Title\"), 0, 0);\n+        var titleTextField = new TextField(\"My Stage\");\n+        pane.add(titleTextField, 1, 0);\n+\n+        pane.add(new Label(\"Modality\"), 0, 1);\n+        var modalities = Arrays.stream(Modality.values()).map(Enum::name).toList();\n+        var modalityComboBox = new ComboBox<>(FXCollections.observableArrayList(modalities));\n+        modalityComboBox.getSelectionModel().select(0);\n+        pane.add(modalityComboBox, 1, 1);\n+\n+        pane.add(new Label(\"StageStyle\"), 0, 2);\n+        var stageStyles = Arrays.stream(StageStyle.values()).map(Enum::name).toList();\n+        var stageStyleComboBox = new ComboBox<>(FXCollections.observableArrayList(stageStyles));\n+        stageStyleComboBox.getSelectionModel().select(0);\n+        pane.add(stageStyleComboBox, 1, 2);\n+\n+        pane.add(new Label(\"NodeOrientation\"), 0, 3);\n+        var nodeOrientations = Arrays.stream(NodeOrientation.values()).map(Enum::name).toList();\n+        var nodeOrientationComboBox = new ComboBox<>(FXCollections.observableArrayList(nodeOrientations));\n+        nodeOrientationComboBox.getSelectionModel().select(2);\n+        pane.add(nodeOrientationComboBox, 1, 3);\n+\n+        pane.add(new Label(\"HeaderBar\"), 0, 4);\n+        var headerBarComboBox = new ComboBox<>(FXCollections.observableArrayList(\"None\", \"Simple\", \"Split\"));\n+        headerBarComboBox.getSelectionModel().select(0);\n+        pane.add(headerBarComboBox, 1, 4);\n+\n+        pane.add(new Label(\"DefaultHeaderButtons\"), 0, 5);\n+        var defaultHeaderButtonsCheckBox = new CheckBox();\n+        defaultHeaderButtonsCheckBox.setSelected(true);\n+        pane.add(defaultHeaderButtonsCheckBox, 1, 5);\n+\n+        pane.add(new Label(\"AlwaysOnTop\"), 0, 6);\n+        var alwaysOnTopCheckBox = new CheckBox();\n+        pane.add(alwaysOnTopCheckBox, 1, 6);\n+\n+        pane.add(new Label(\"Resizable\"), 0, 7);\n+        var resizableCheckBox = new CheckBox();\n+        resizableCheckBox.setSelected(true);\n+        pane.add(resizableCheckBox, 1, 7);\n+\n+        pane.add(new Label(\"Iconified\"), 0, 8);\n+        var iconifiedCheckBox = new CheckBox();\n+        pane.add(iconifiedCheckBox, 1, 8);\n+\n+        pane.add(new Label(\"Maximized\"), 0, 9);\n+        var maximizedCheckBox = new CheckBox();\n+        pane.add(maximizedCheckBox, 1, 9);\n+\n+        pane.add(new Label(\"FullScreen\"), 0, 10);\n+        var fullScreenCheckBox = new CheckBox();\n+        pane.add(fullScreenCheckBox, 1, 10);\n+\n+        pane.add(new Label(\"FullScreenExitHint\"), 0, 11);\n+        var fullScreenExitHintTextField = new TextField();\n+        pane.add(fullScreenExitHintTextField, 1, 11);\n+\n+        var showStageButton = new Button(\"Show Stage\");\n+        showStageButton.setOnAction(event -> {\n+            var newStage = new Stage();\n+            newStage.initStyle(StageStyle.valueOf(stageStyleComboBox.getValue()));\n+            newStage.initModality(Modality.valueOf(modalityComboBox.getValue()));\n+            newStage.initDefaultHeaderButtons(defaultHeaderButtonsCheckBox.isSelected());\n+            newStage.setTitle(titleTextField.getText());\n+            newStage.setAlwaysOnTop(alwaysOnTopCheckBox.isSelected());\n+            newStage.setResizable(resizableCheckBox.isSelected());\n+            newStage.setIconified(iconifiedCheckBox.isSelected());\n+            newStage.setMaximized(maximizedCheckBox.isSelected());\n+            newStage.setFullScreen(fullScreenCheckBox.isSelected());\n+            newStage.setFullScreenExitHint(fullScreenExitHintTextField.getText().isEmpty()\n+                                           ? null : fullScreenExitHintTextField.getText());\n+\n+            if (newStage.getModality() != Modality.NONE) {\n+                newStage.initOwner(StageTesterWindow.this);\n+            }\n+\n+            Parent root = switch (headerBarComboBox.getValue().toLowerCase(Locale.ROOT)) {\n+                case \"simple\" -> createSimpleHeaderBarRoot(newStage, !defaultHeaderButtonsCheckBox.isSelected());\n+                case \"split\" -> createSplitHeaderBarRoot(newStage, !defaultHeaderButtonsCheckBox.isSelected());\n+                default -> new BorderPane(createWindowActions(newStage));\n+            };\n+\n+            var scene = new Scene(root);\n+            scene.setNodeOrientation(NodeOrientation.valueOf(nodeOrientationComboBox.getValue()));\n+\n+            newStage.setWidth(800);\n+            newStage.setHeight(500);\n+            newStage.setScene(scene);\n+            newStage.show();\n+        });\n+\n+        var root = new BorderPane(pane);\n+        root.setPadding(new Insets(20));\n+        root.setBottom(showStageButton);\n+        BorderPane.setAlignment(showStageButton, Pos.CENTER);\n+        BorderPane.setMargin(showStageButton, new Insets(30, 0, 0, 0));\n+\n+        initModality(Modality.APPLICATION_MODAL);\n+        initOwner(owner);\n+        setScene(new Scene(root));\n+        setTitle(\"Stage Tester\");\n+    }\n+\n+    private Parent createSimpleHeaderBarRoot(Stage stage, boolean customWindowButtons) {\n+        var headerBar = new HeaderBar();\n+        headerBar.setBackground(Background.fill(Color.LIGHTSKYBLUE));\n+        headerBar.setCenter(new TextField() {{ setPromptText(\"Search...\"); }});\n+\n+        var sizeComboBox = new ComboBox<>(FXCollections.observableArrayList(\"Small\", \"Medium\", \"Large\"));\n+        sizeComboBox.getSelectionModel().select(0);\n+\n+        Runnable updateMinHeight = () -> headerBar.setMinHeight(\n+            switch (sizeComboBox.getValue().toLowerCase(Locale.ROOT)) {\n+                case \"large\" -> 80;\n+                case \"medium\" -> 40;\n+                default -> headerBar.getMinSystemHeight();\n+            });\n+\n+        sizeComboBox.valueProperty().subscribe(event -> updateMinHeight.run());\n+        headerBar.minSystemHeightProperty().subscribe(event -> updateMinHeight.run());\n+        headerBar.setLeading(new Button(\"✨\"));\n+\n+        var trailingNodes = new HBox(sizeComboBox);\n+        trailingNodes.setAlignment(Pos.CENTER);\n+        trailingNodes.setSpacing(5);\n+        headerBar.setTrailing(trailingNodes);\n+\n+        if (customWindowButtons) {\n+            trailingNodes.getChildren().addAll(createCustomWindowButtons());\n+        }\n+\n+        var borderPane = new BorderPane();\n+        borderPane.setTop(headerBar);\n+        borderPane.setCenter(createWindowActions(stage));\n+\n+        return borderPane;\n+    }\n+\n+    private Parent createSplitHeaderBarRoot(Stage stage, boolean customWindowButtons) {\n+        var leftHeaderBar = new HeaderBar();\n+        leftHeaderBar.setBackground(Background.fill(Color.VIOLET));\n+        leftHeaderBar.setLeading(new Button(\"✨\"));\n+        leftHeaderBar.setCenter(new TextField() {{ setPromptText(\"Search...\"); }});\n+        leftHeaderBar.setTrailingSystemPadding(false);\n+\n+        var rightHeaderBar = new HeaderBar();\n+        rightHeaderBar.setBackground(Background.fill(Color.LIGHTSKYBLUE));\n+        rightHeaderBar.setLeadingSystemPadding(false);\n+\n+        var sizeComboBox = new ComboBox<>(FXCollections.observableArrayList(\"Small\", \"Medium\", \"Large\"));\n+        sizeComboBox.getSelectionModel().select(0);\n+\n+        Runnable updateMinHeight = () -> rightHeaderBar.setMinHeight(\n+            switch (sizeComboBox.getValue().toLowerCase(Locale.ROOT)) {\n+                case \"large\" -> 80;\n+                case \"medium\" -> 40;\n+                default -> rightHeaderBar.getMinSystemHeight();\n+            });\n+\n+        sizeComboBox.valueProperty().subscribe(event -> updateMinHeight.run());\n+        rightHeaderBar.minSystemHeightProperty().subscribe(event -> updateMinHeight.run());\n+\n+        var trailingNodes = new HBox(sizeComboBox);\n+        trailingNodes.setAlignment(Pos.CENTER);\n+        trailingNodes.setSpacing(5);\n+        rightHeaderBar.setTrailing(trailingNodes);\n+\n+        if (customWindowButtons) {\n+            trailingNodes.getChildren().addAll(createCustomWindowButtons());\n+        }\n+\n+        rightHeaderBar.setTrailing(trailingNodes);\n+\n+        var left = new BorderPane();\n+        left.setTop(leftHeaderBar);\n+        left.setCenter(createWindowActions(stage));\n+\n+        var right = new BorderPane();\n+        right.setTop(rightHeaderBar);\n+\n+        return new SplitPane(left, right);\n+    }\n+\n+    private List<Parent> createCustomWindowButtons() {\n+        var iconifyButton = new Button(\"Iconify\");\n+        var maximizeButton = new Button(\"Maximize\");\n+        var closeButton = new Button(\"Close\");\n+        HeaderBarBase.setHeaderButtonType(iconifyButton, HeaderButtonType.MINIMIZE);\n+        HeaderBarBase.setHeaderButtonType(maximizeButton, HeaderButtonType.MAXIMIZE);\n+        HeaderBarBase.setHeaderButtonType(closeButton, HeaderButtonType.CLOSE);\n+        return List.of(iconifyButton, maximizeButton, closeButton);\n+    }\n+\n+    private Parent createWindowActions(Stage stage) {\n+        var toggleFullScreenButton = new Button(\"Enter\/Exit Full Screen\");\n+        toggleFullScreenButton.setOnAction(event -> stage.setFullScreen(!stage.isFullScreen()));\n+\n+        var toggleMaximizedButton = new Button(\"Maximize\/Restore\");\n+        toggleMaximizedButton.setOnAction(event -> stage.setMaximized(!stage.isMaximized()));\n+\n+        var toggleIconifiedButton = new Button(\"Iconify\");\n+        toggleIconifiedButton.setOnAction(event -> stage.setIconified(true));\n+\n+        var closeButton = new Button(\"Close\");\n+        closeButton.setOnAction(event -> stage.close());\n+\n+        var root = new VBox(toggleFullScreenButton, toggleMaximizedButton, toggleIconifiedButton, closeButton);\n+        root.setSpacing(10);\n+        root.setAlignment(Pos.CENTER);\n+        return root;\n+    }\n+}\n","filename":"tests\/manual\/monkey\/src\/com\/oracle\/tools\/fx\/monkey\/StageTesterWindow.java","additions":276,"deletions":0,"binary":false,"changes":276,"status":"added"}]}