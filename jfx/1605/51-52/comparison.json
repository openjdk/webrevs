{"files":[{"patch":"@@ -142,1 +142,1 @@\n-public final class HeaderButtonOverlay extends Region {\n+public class HeaderButtonOverlay extends Region {\n@@ -328,0 +328,8 @@\n+    protected Region getButtonGlyph(HeaderButtonType buttonType) {\n+         return (Region)(switch (buttonType) {\n+            case ICONIFY -> iconifyButton;\n+            case MAXIMIZE -> maximizeButton;\n+            case CLOSE -> closeButton;\n+        }).getChildrenUnmodifiable().getFirst();\n+    }\n+\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/HeaderButtonOverlay.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.glass.ui.win;\n+\n+import com.sun.glass.ui.HeaderButtonOverlay;\n+import com.sun.javafx.binding.StringConstant;\n+import javafx.beans.value.ObservableValue;\n+import javafx.scene.Scene;\n+import javafx.scene.layout.HeaderButtonType;\n+import javafx.stage.Window;\n+\n+\/**\n+ * Windows-specific version of {@link HeaderButtonOverlay} that tweaks the scaling of header button glyphs.\n+ *\/\n+public class WinHeaderButtonOverlay extends HeaderButtonOverlay {\n+\n+    private static final String HEADER_BUTTONS_STYLESHEET = \"WindowDecoration.css\";\n+\n+    \/**\n+     * These are additional scale factors for the header button glyphs at various DPI scales to account\n+     * for differences in the way the glyphs are rendered by JavaFX and Windows. Slightly adjusting\n+     * the scaling makes the JavaFX glyphs look more similar to the native glyphs drawn by Windows.\n+     * The values must be listed in 25% increments. DPI scales outside of the listed range default\n+     * to an additional scaling factor of 1.\n+     *\/\n+    private static final double[][] SCALE_FACTORS = new double[][] {\n+        { 1.0, 1.0 },\n+        { 1.25, 1.1 },\n+        { 1.5, 1.15 },\n+        { 1.75, 1.0 },\n+        { 2.0, 1.15 },\n+        { 2.25, 1.05 },\n+        { 2.5, 0.95 },\n+    };\n+\n+    public WinHeaderButtonOverlay(boolean utility, boolean rightToLeft) {\n+        super(getStylesheet(), utility, rightToLeft);\n+\n+        var windowProperty = sceneProperty().flatMap(Scene::windowProperty);\n+\n+        windowProperty\n+            .flatMap(Window::renderScaleXProperty)\n+            .orElse(1.0)\n+            .map(v -> getGlyphScaleFactor(v.doubleValue()))\n+            .subscribe(this::updateGlyphScaleX);\n+\n+        windowProperty\n+            .flatMap(Window::renderScaleYProperty)\n+            .orElse(1.0)\n+            .map(v -> getGlyphScaleFactor(v.doubleValue()))\n+            .subscribe(this::updateGlyphScaleY);\n+    }\n+\n+    private double getGlyphScaleFactor(double scale) {\n+        for (double[] mapping : SCALE_FACTORS) {\n+            if (scale >= (mapping[0] - 0.125) && scale <= (mapping[0] + 0.125)) {\n+                return mapping[1];\n+            }\n+        }\n+\n+        return 1.0;\n+    }\n+\n+    private void updateGlyphScaleX(double scale) {\n+        for (var buttonType : HeaderButtonType.values()) {\n+            getButtonGlyph(buttonType).setScaleX(scale);\n+        }\n+    }\n+\n+    private void updateGlyphScaleY(double scale) {\n+        for (var buttonType : HeaderButtonType.values()) {\n+            getButtonGlyph(buttonType).setScaleY(scale);\n+        }\n+    }\n+\n+    private static ObservableValue<String> getStylesheet() {\n+        var url = WinHeaderButtonOverlay.class.getResource(HEADER_BUTTONS_STYLESHEET);\n+        if (url == null) {\n+            throw new RuntimeException(\"Resource not found: \" + HEADER_BUTTONS_STYLESHEET);\n+        }\n+\n+        return StringConstant.valueOf(url.toExternalForm());\n+    }\n+}\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinHeaderButtonOverlay.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -34,1 +34,0 @@\n-import com.sun.javafx.binding.StringConstant;\n@@ -46,2 +45,0 @@\n-    private static final String HEADER_BUTTONS_STYLESHEET = \"WindowDecoration.css\";\n-\n@@ -386,7 +383,1 @@\n-        var url = getClass().getResource(HEADER_BUTTONS_STYLESHEET);\n-        if (url == null) {\n-            throw new RuntimeException(\"Resource not found: \" + HEADER_BUTTONS_STYLESHEET);\n-        }\n-\n-        var overlay = new HeaderButtonOverlay(\n-            StringConstant.valueOf(url.toExternalForm()),\n+        var overlay = new WinHeaderButtonOverlay(\n","filename":"modules\/javafx.graphics\/src\/main\/java\/com\/sun\/glass\/ui\/win\/WinWindow.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"}]}