{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (C) 2008-2021 Apple Inc. All rights reserved.\n+ * Copyright (C) 2008-2023 Apple Inc. All rights reserved.\n@@ -262,2 +262,2 @@\n-            uint64_t a = tagInt(instruction, makeDiversifier(0x12, index, currentValue));\n-            uint64_t b = tagInt(instruction, makeDiversifier(0x13, index, currentValue));\n+            uint64_t a = tagInt<PACKeyType::ProcessIndependent>(instruction, makeDiversifier(0x12, index, currentValue));\n+            uint64_t b = tagInt<PACKeyType::ProcessIndependent>(instruction, makeDiversifier(0x13, index, currentValue));\n@@ -275,1 +275,1 @@\n-                return untagInt(m_hash, makeDiversifier(initializationNamespace, index, pin()));\n+                return untagInt<PACKeyType::ProcessIndependent>(m_hash, makeDiversifier(initializationNamespace, index, pin()));\n@@ -282,1 +282,1 @@\n-                m_hash = tagInt(static_cast<uint64_t>(value), makeDiversifier(initializationNamespace, index, pin()));\n+                m_hash = tagInt<PACKeyType::ProcessIndependent>(static_cast<uint64_t>(value), makeDiversifier(initializationNamespace, index, pin()));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/assembler\/AssemblerBuffer.h","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -4233,0 +4233,2 @@\n+        ASSERT(src1 != scratch1);\n+        ASSERT(src2 != scratch1);\n@@ -4234,1 +4236,2 @@\n-        \/\/ This is a signed multiple of two 64-bit values, producing a 64-bit result.\n+        \/\/ mul<64> does a signed multiple of two 64-bit values, producing a 64-bit result.\n+        if (cond != Overflow) {\n@@ -4236,2 +4239,0 @@\n-\n-        if (cond != Overflow)\n@@ -4239,0 +4240,1 @@\n+        }\n@@ -4242,0 +4244,4 @@\n+        \/\/ dest may equal src1 or src2. So, we should always compute dest after we've\n+        \/\/ computed the smulh result in scratch1 so as not to corrupt src1 and src2.\n+        m_assembler.mul<64>(dest, src1, src2);\n+\n@@ -4253,5 +4259,0 @@\n-    Jump branchMul64(ResultCondition cond, RegisterID src, RegisterID dest)\n-    {\n-        return branchMul64(cond, dest, src, dest);\n-    }\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/assembler\/MacroAssemblerARM64.h","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -3382,1 +3382,1 @@\n-                if (lowWidth + highWidth != datasize || maskBitCount != lowWidth)\n+                if (lowWidth + highWidth != datasize || maskBitCount != lowWidth || lowWidth == datasize)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/b3\/B3LowerToAir.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-        if (!(mask + 1))\n+        if (mask == static_cast<T>(-1))\n@@ -138,0 +138,1 @@\n+        if constexpr (std::is_signed_v<T>) {\n@@ -139,1 +140,2 @@\n-            return IntRange(INT_MIN & mask, mask & INT_MAX);\n+                return IntRange(std::numeric_limits<T>::min() & mask, mask & std::numeric_limits<T>::max());\n+        }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/b3\/B3ReduceStrength.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -119,0 +119,8 @@\n+                case ExtractRegister64:\n+                    VALIDATE(inst.args[2].isImm(), (\"At \", inst, \" in \", *block));\n+                    VALIDATE(inst.args[2].asTrustedImm32().m_value < 64, (\"At \", inst, \" in \", *block));\n+                    break;\n+                case ExtractRegister32:\n+                    VALIDATE(inst.args[2].isImm(), (\"At \", inst, \" in \", *block));\n+                    VALIDATE(inst.args[2].asTrustedImm32().m_value < 32, (\"At \", inst, \" in \", *block));\n+                    break;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/b3\/air\/AirValidate.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -882,0 +882,1 @@\n+void testCheckAdd64Range();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/b3\/testb3.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -502,0 +502,1 @@\n+    RUN(testCheckAdd64Range());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/b3\/testb3_1.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -748,0 +748,26 @@\n+void testCheckAdd64Range()\n+{\n+    Procedure proc;\n+    BasicBlock* root = proc.addBlock();\n+\n+    Value* x0  = root->appendNew<ArgumentRegValue>(proc, Origin(), GPRInfo::argumentGPR0);\n+    Value* b1  = root->appendNew<Value>(proc, JSC::B3::BitAnd, Origin(), x0, root->appendNew<Const64Value>(proc, Origin(), 0xffffffff00000000LL));\n+    Value* b2  = root->appendNew<Value>(proc, JSC::B3::Sub, Origin(), b1, root->appendNew<Const64Value>(proc, Origin(), 0xffffffff00000000LL));\n+    Value* b3  = root->appendNew<Value>(proc, JSC::B3::ZShr, Origin(), b2, root->appendNew<Const32Value>(proc, Origin(), 28));\n+    Value* b4  = root->appendNew<Const64Value>(proc, Origin(), 0x7fffffffffffff00LL);\n+\n+    CheckValue* checkAdd = root->appendNew<CheckValue>(proc, CheckAdd, Origin(), b3, b4);\n+    checkAdd->setGenerator(\n+        [&] (CCallHelpers& jit, const StackmapGenerationParams&) {\n+            AllowMacroScratchRegisterUsage allowScratch(jit);\n+            jit.move(CCallHelpers::TrustedImm32(42), GPRInfo::returnValueGPR);\n+            jit.emitFunctionEpilogue();\n+            jit.ret();\n+        });\n+    root->appendNewControlValue(proc, Return, Origin(), checkAdd);\n+\n+    auto code = compileProc(proc);\n+\n+    CHECK(invoke<int64_t>(*code, 0x8ffffffe00000000LL) == 42.0);\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/b3\/testb3_5.cpp","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -599,0 +599,5 @@\n+                    if (bytecode.m_getPutInfo.initializationMode() == InitializationMode::ScopedArgumentInitialization) {\n+                        ASSERT(bytecode.m_value.isArgument());\n+                        unsigned argumentIndex = bytecode.m_value.toArgument() - 1;\n+                        symbolTable->prepareToWatchScopedArgument(iter->value, argumentIndex);\n+                    } else\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/bytecode\/CodeBlock.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -598,0 +598,3 @@\n+\n+                unsigned varOrAnonymous = UINT_MAX;\n+\n@@ -601,5 +604,0 @@\n-                    \/\/ Stores to these variables via the ScopedArguments object will not do\n-                    \/\/ notifyWrite(), since that would be cumbersome. Also, watching formal\n-                    \/\/ parameters when \"arguments\" is in play is unlikely to be super profitable.\n-                    \/\/ So, we just disable it.\n-                    entry.disableWatching(m_vm);\n@@ -607,0 +605,6 @@\n+IGNORE_WARNINGS_BEGIN(\"dangling-reference\")\n+                    const Identifier& ident =\n+                        static_cast<const BindingNode*>(parameters.at(i).first)->boundProperty();\n+IGNORE_WARNINGS_END\n+\n+                    varOrAnonymous = addConstant(ident);\n@@ -608,1 +612,2 @@\n-                OpPutToScope::emit(this, m_lexicalEnvironmentRegister, UINT_MAX, virtualRegisterForArgumentIncludingThis(1 + i), GetPutInfo(ThrowIfNotFound, ResolvedClosureVar, InitializationMode::NotInitialization, ecmaMode), SymbolTableOrScopeDepth::symbolTable(VirtualRegister { symbolTableConstantIndex }), offset.offset());\n+\n+                OpPutToScope::emit(this, m_lexicalEnvironmentRegister, varOrAnonymous, virtualRegisterForArgumentIncludingThis(1 + i), GetPutInfo(ThrowIfNotFound, ResolvedClosureVar, InitializationMode::ScopedArgumentInitialization, ecmaMode), SymbolTableOrScopeDepth::symbolTable(VirtualRegister { symbolTableConstantIndex }), offset.offset());\n@@ -642,1 +647,1 @@\n-IGNORE_GCC_WARNINGS_BEGIN(\"dangling-reference\")\n+IGNORE_WARNINGS_BEGIN(\"dangling-reference\")\n@@ -645,1 +650,1 @@\n-IGNORE_GCC_WARNINGS_END\n+IGNORE_WARNINGS_END\n@@ -1341,0 +1346,1 @@\n+IGNORE_WARNINGS_BEGIN(\"dangling-reference\")\n@@ -1342,0 +1348,1 @@\n+IGNORE_WARNINGS_END\n@@ -5587,0 +5594,1 @@\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/bytecompiler\/BytecodeGenerator.cpp","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2568,0 +2568,1 @@\n+            Node* thisValue = addToGraph(ToThis, OpInfo(ECMAMode::strict()), OpInfo(getPrediction()), get(virtualRegisterForArgumentIncludingThis(0, registerOffset)));\n@@ -2570,1 +2571,1 @@\n-            Node* object = addToGraph(ToObject, OpInfo(errorStringIndex), OpInfo(SpecNone), get(virtualRegisterForArgumentIncludingThis(0, registerOffset)));\n+            Node* object = addToGraph(ToObject, OpInfo(errorStringIndex), OpInfo(SpecNone), thisValue);\n@@ -8741,0 +8742,3 @@\n+\n+                \/\/ Keep scope alive until after put.\n+                addToGraph(Phantom, scopeNode);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/dfg\/DFGByteCodeParser.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -113,3 +113,3 @@\n-                \/\/ There shouldn't be such a thing as a strict subtype of SideState. That's what allows\n-                \/\/ us to use a fast != check, below.\n-                ASSERT(!heap.isStrictSubtypeOf(SideState));\n+                \/\/ There shouldn't be such a thing as a strict subtype of SideState or HeapObjectCount.\n+                \/\/ That's what allows us to use a fast != check, below.\n+                ASSERT(!heap.isStrictSubtypeOf(SideState) && !heap.isStrictSubtypeOf(HeapObjectCount));\n@@ -117,1 +117,1 @@\n-                if (heap != SideState)\n+                if (heap != SideState && heap != HeapObjectCount)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/dfg\/DFGClobbersExitState.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -6693,1 +6693,0 @@\n-        move(op1GPR, resultGPR);\n@@ -6696,1 +6695,1 @@\n-            branchMul64(Overflow, op2GPR, resultGPR));\n+            branchMul64(Overflow, op1GPR, op2GPR, resultGPR));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/dfg\/DFGSpeculativeJIT.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -134,1 +134,1 @@\n-        return false;\n+        return DFG::mergeDoubleFormatState(m_doubleFormatState, NotUsingDoubleFormat);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/dfg\/DFGVariableAccessData.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -132,2 +132,0 @@\n-bool A64DOpcode::s_initialized = false;\n-\n@@ -136,3 +134,0 @@\n-    if (s_initialized)\n-        return;\n-\n@@ -156,2 +151,0 @@\n-\n-    s_initialized = true;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/disassembler\/ARM64\/A64DOpcode.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -84,1 +84,2 @@\n-        init();\n+        static std::once_flag once;\n+        std::call_once(once, init);\n@@ -246,2 +247,0 @@\n-\n-    static bool s_initialized;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/disassembler\/ARM64\/A64DOpcode.h","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -8773,1 +8773,1 @@\n-        m_out.branch(m_out.equal(m_out.loadPtr(structure, m_heaps.Structure_classInfo), m_out.constIntPtr(m_node->isInternalPromise() ? JSInternalPromise::info() : JSPromise::info())), usually(checkGlobalObjectCase), rarely(slowCase));\n+        m_out.branch(m_out.equal(loadCompactPtr(structure, m_heaps.Structure_classInfo), m_out.constIntPtr(m_node->isInternalPromise() ? JSInternalPromise::info() : JSPromise::info())), usually(checkGlobalObjectCase), rarely(slowCase));\n@@ -8829,1 +8829,1 @@\n-        m_out.branch(m_out.equal(m_out.loadPtr(structure, m_heaps.Structure_classInfo), m_out.constIntPtr(JSClass::info())), usually(checkGlobalObjectCase), rarely(slowCase));\n+        m_out.branch(m_out.equal(loadCompactPtr(structure, m_heaps.Structure_classInfo), m_out.constIntPtr(JSClass::info())), usually(checkGlobalObjectCase), rarely(slowCase));\n@@ -9554,1 +9554,1 @@\n-        LValue classInfo = m_out.loadPtr(structure, m_heaps.Structure_classInfo);\n+        LValue classInfo = loadCompactPtr(structure, m_heaps.Structure_classInfo);\n@@ -17261,2 +17261,2 @@\n-            LValue classInfo = m_out.loadPtr(structure, m_heaps.Structure_classInfo);\n-            ValueFromBlock otherAtStart = m_out.anchor(classInfo);\n+            LValue cellClassInfo = loadCompactPtr(structure, m_heaps.Structure_classInfo);\n+            ValueFromBlock otherAtStart = m_out.anchor(cellClassInfo);\n@@ -22711,0 +22711,10 @@\n+    LValue loadCompactPtr(LValue value, AbstractHeap& heap)\n+    {\n+#if HAVE(36BIT_ADDRESS)\n+        LValue shifted = m_out.zeroExtPtr(m_out.load32(value, heap));\n+        return m_out.shl(shifted, m_out.constIntPtr(4));\n+#else\n+        return m_out.loadPtr(value, heap);\n+#endif\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/ftl\/FTLLowerDFGToB3.cpp","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -387,1 +387,2 @@\n-    \/\/ Use this API to report non-GC memory referenced by GC objects. Be sure to\n+    \/\/ Note that:\n+    \/\/ 1. Use this API to report non-GC memory referenced by GC objects. Be sure to\n@@ -390,0 +391,3 @@\n+    \/\/ 2. Use this API may trigger JSRopeString::resolveRope. If this API need\n+    \/\/ to be used when resolving a rope string, then make sure to call this API\n+    \/\/ after the rope string is completely resolved.\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/heap\/Heap.h","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (C) 2016-2021 Apple Inc. All rights reserved.\n+ * Copyright (C) 2016-2023 Apple Inc. All rights reserved.\n@@ -37,0 +37,23 @@\n+constexpr size_t dataCacheLineSize()\n+{\n+#if CPU(ARM64) || CPU(X86_64)\n+    return 64;\n+#else\n+    return 32; \/\/ This is a conservative assumption.\n+#endif\n+}\n+\n+\/\/ We require cacheLineAdjustment to be 2 * halfAlignment because we always apply the cacheLineAdjustment\n+\/\/ after we've calibrated for the cell address to start at an odd halfAlignment. This way, adding\n+\/\/ cacheLineAdjustment still keeps the cell address starting at an odd halfAlignment.\n+static_assert(PreciseAllocation::cacheLineAdjustment == 2 * PreciseAllocation::halfAlignment);\n+\n+\/\/ The purpose of cacheLineAdjustment is to ensure that the JSObject header word and its butterfly\n+\/\/ are both in the same cache line. Therefore, cacheLineAdjustment must be greater than sizeof(JSObject)\n+\/\/ in order for the adjustment to adequately push the start of the object into the next cache line.\n+static_assert(PreciseAllocation::cacheLineAdjustment >= sizeof(JSObject));\n+\n+\/\/ Also, by definition, cacheLineAdjustment must be smaller than dataCacheLineSize. Otherwise, there's\n+\/\/ not way to fit the JSObject header word and its butterfly in a cache line.\n+static_assert(PreciseAllocation::cacheLineAdjustment <= dataCacheLineSize());\n+\n@@ -38,0 +61,11 @@\n+{\n+    \/\/ Checks if the allocated pointer is 16 byte aligned. If it's 16 byte aligned,\n+    \/\/ then the object will have halfAlignment because headerSize() ensures that it\n+    \/\/ has an odd halfAlignment at the end.\n+    uintptr_t allocatedPointer = bitwise_cast<uintptr_t>(memory);\n+    uintptr_t maskedPointer = allocatedPointer & (PreciseAllocation::alignment - 1);\n+    ASSERT(!maskedPointer || maskedPointer == PreciseAllocation::halfAlignment);\n+    return maskedPointer;\n+}\n+\n+static inline bool isCacheAlignedForPreciseAllocation(void* memory)\n@@ -40,1 +74,3 @@\n-    return !(allocatedPointer & (PreciseAllocation::alignment - 1));\n+    uintptr_t cellStart = allocatedPointer + PreciseAllocation::headerSize();\n+    uintptr_t cacheLineOffsetForCellStart = cellStart % dataCacheLineSize();\n+    return dataCacheLineSize() - cacheLineOffsetForCellStart >= PreciseAllocation::cacheLineAdjustment;\n@@ -48,1 +84,1 @@\n-    size_t adjustedAlignmentAllocationSize = headerSize() + size + halfAlignment;\n+    size_t adjustedAlignmentAllocationSize = headerSize() + size + halfAlignment + cacheLineAdjustment;\n@@ -56,4 +92,5 @@\n-    bool adjustedAlignment = false;\n-    if (!isAlignedForPreciseAllocation(space)) {\n-        space = bitwise_cast<void*>(bitwise_cast<uintptr_t>(space) + halfAlignment);\n-        adjustedAlignment = true;\n+    unsigned adjustment = halfAlignment;\n+    space = bitwise_cast<void*>(bitwise_cast<uintptr_t>(space) + halfAlignment);\n+    if (UNLIKELY(!isAlignedForPreciseAllocation(space))) {\n+        space = bitwise_cast<void*>(bitwise_cast<uintptr_t>(space) - halfAlignment);\n+        adjustment -= halfAlignment;\n@@ -63,1 +100,8 @@\n-    if (scribbleFreeCells())\n+    if (!isCacheAlignedForPreciseAllocation(space)) {\n+        space = bitwise_cast<void*>(bitwise_cast<uintptr_t>(space) + cacheLineAdjustment);\n+        adjustment += cacheLineAdjustment;\n+        ASSERT(isCacheAlignedForPreciseAllocation(space));\n+        ASSERT(isAlignedForPreciseAllocation(space));\n+    }\n+\n+    if (UNLIKELY(scribbleFreeCells()))\n@@ -65,1 +109,1 @@\n-    return new (NotNull, space) PreciseAllocation(heap, size, subspace, indexInSpace, adjustedAlignment);\n+    return new (NotNull, space) PreciseAllocation(heap, size, subspace, indexInSpace, adjustment);\n@@ -71,1 +115,1 @@\n-    size_t adjustedAlignmentAllocationSize = headerSize() + size + halfAlignment;\n+    size_t adjustedAlignmentAllocationSize = headerSize() + size + halfAlignment + cacheLineAdjustment;\n@@ -77,1 +121,1 @@\n-    bool oldAdjustedAlignment = m_adjustedAlignment;\n+    unsigned oldAdjustment = m_adjustment;\n@@ -80,2 +124,2 @@\n-    void* newBasePointer = subspace->alignedMemoryAllocator()->tryReallocateMemory(oldBasePointer, adjustedAlignmentAllocationSize);\n-    if (!newBasePointer)\n+    void* newSpace = subspace->alignedMemoryAllocator()->tryReallocateMemory(oldBasePointer, adjustedAlignmentAllocationSize);\n+    if (!newSpace)\n@@ -84,6 +128,14 @@\n-    PreciseAllocation* newAllocation = bitwise_cast<PreciseAllocation*>(newBasePointer);\n-    bool newAdjustedAlignment = false;\n-    if (!isAlignedForPreciseAllocation(newBasePointer)) {\n-        newAdjustedAlignment = true;\n-        newAllocation = bitwise_cast<PreciseAllocation*>(bitwise_cast<uintptr_t>(newBasePointer) + halfAlignment);\n-        ASSERT(isAlignedForPreciseAllocation(static_cast<void*>(newAllocation)));\n+    void* newBasePointer = newSpace;\n+    unsigned newAdjustment = halfAlignment;\n+    newBasePointer = bitwise_cast<void*>(bitwise_cast<uintptr_t>(newBasePointer) + halfAlignment);\n+    if (UNLIKELY(!isAlignedForPreciseAllocation(newBasePointer))) {\n+        newBasePointer = bitwise_cast<void*>(bitwise_cast<uintptr_t>(newBasePointer) - halfAlignment);\n+        newAdjustment -= halfAlignment;\n+        ASSERT(isAlignedForPreciseAllocation(newBasePointer));\n+    }\n+\n+    if (!isCacheAlignedForPreciseAllocation(newBasePointer)) {\n+        newBasePointer = bitwise_cast<void*>(bitwise_cast<uintptr_t>(newBasePointer) + cacheLineAdjustment);\n+        newAdjustment += cacheLineAdjustment;\n+        ASSERT(isCacheAlignedForPreciseAllocation(newBasePointer));\n+        ASSERT(isAlignedForPreciseAllocation(newBasePointer));\n@@ -92,23 +144,4 @@\n-    \/\/ We have 4 patterns.\n-    \/\/ oldAdjustedAlignment = true  newAdjustedAlignment = true  => Do nothing.\n-    \/\/ oldAdjustedAlignment = true  newAdjustedAlignment = false => Shift forward by halfAlignment\n-    \/\/ oldAdjustedAlignment = false newAdjustedAlignment = true  => Shift backward by halfAlignment\n-    \/\/ oldAdjustedAlignment = false newAdjustedAlignment = false => Do nothing.\n-\n-    if (oldAdjustedAlignment != newAdjustedAlignment) {\n-        if (oldAdjustedAlignment) {\n-            ASSERT(!newAdjustedAlignment);\n-            ASSERT(newAllocation == newBasePointer);\n-            \/\/ Old   [ 8 ][  content  ]\n-            \/\/ Now   [   ][  content  ]\n-            \/\/ New   [  content  ]...\n-            memmove(newBasePointer, bitwise_cast<char*>(newBasePointer) + halfAlignment, oldCellSize + PreciseAllocation::headerSize());\n-        } else {\n-            ASSERT(newAdjustedAlignment);\n-            ASSERT(newAllocation != newBasePointer);\n-            ASSERT(newAllocation == bitwise_cast<void*>(bitwise_cast<char*>(newBasePointer) + halfAlignment));\n-            \/\/ Old   [  content  ]\n-            \/\/ Now   [  content  ][   ]\n-            \/\/ New   [ 8 ][  content  ]\n-            memmove(bitwise_cast<char*>(newBasePointer) + halfAlignment, newBasePointer, oldCellSize + PreciseAllocation::headerSize());\n-        }\n+    PreciseAllocation* newAllocation = bitwise_cast<PreciseAllocation*>(newBasePointer);\n+    if (oldAdjustment != newAdjustment) {\n+        void* basePointerAfterRealloc = bitwise_cast<void*>(bitwise_cast<uintptr_t>(newSpace) + oldAdjustment);\n+        memmove(newBasePointer, basePointerAfterRealloc, oldCellSize + PreciseAllocation::headerSize());\n@@ -118,1 +151,1 @@\n-    newAllocation->m_adjustedAlignment = newAdjustedAlignment;\n+    newAllocation->m_adjustment = newAdjustment;\n@@ -128,1 +161,1 @@\n-    size_t adjustedAlignmentAllocationSize = headerSize() + size + halfAlignment;\n+    size_t adjustedAlignmentAllocationSize = headerSize() + size + halfAlignment + cacheLineAdjustment;\n@@ -134,4 +167,12 @@\n-    bool adjustedAlignment = false;\n-    if (!isAlignedForPreciseAllocation(space)) {\n-        space = bitwise_cast<void*>(bitwise_cast<uintptr_t>(space) + halfAlignment);\n-        adjustedAlignment = true;\n+    unsigned adjustment = halfAlignment;\n+    space = bitwise_cast<void*>(bitwise_cast<uintptr_t>(space) + halfAlignment);\n+    if (UNLIKELY(!isAlignedForPreciseAllocation(space))) {\n+        space = bitwise_cast<void*>(bitwise_cast<uintptr_t>(space) - halfAlignment);\n+        adjustment -= halfAlignment;\n+        ASSERT(isAlignedForPreciseAllocation(space));\n+    }\n+\n+    if (!isCacheAlignedForPreciseAllocation(space)) {\n+        space = bitwise_cast<void*>(bitwise_cast<uintptr_t>(space) + cacheLineAdjustment);\n+        adjustment += cacheLineAdjustment;\n+        ASSERT(isCacheAlignedForPreciseAllocation(space));\n@@ -141,1 +182,1 @@\n-    if (scribbleFreeCells())\n+    if (UNLIKELY(scribbleFreeCells()))\n@@ -143,1 +184,1 @@\n-    PreciseAllocation* preciseAllocation = new (NotNull, space) PreciseAllocation(heap, size, subspace, 0, adjustedAlignment);\n+    PreciseAllocation* preciseAllocation = new (NotNull, space) PreciseAllocation(heap, size, subspace, 0, adjustment);\n@@ -153,1 +194,1 @@\n-    bool adjustedAlignment = m_adjustedAlignment;\n+    unsigned adjustment = m_adjustment;\n@@ -159,4 +200,1 @@\n-    void* space = basePointer;\n-    ASSERT((!isAlignedForPreciseAllocation(basePointer)) == adjustedAlignment);\n-    if (adjustedAlignment)\n-        space = bitwise_cast<void*>(bitwise_cast<uintptr_t>(basePointer) + halfAlignment);\n+    void* space = bitwise_cast<void*>(bitwise_cast<uintptr_t>(basePointer) + adjustment);\n@@ -164,1 +202,1 @@\n-    PreciseAllocation* preciseAllocation = new (NotNull, space) PreciseAllocation(heap, size, subspace, 0, adjustedAlignment);\n+    PreciseAllocation* preciseAllocation = new (NotNull, space) PreciseAllocation(heap, size, subspace, 0, adjustment);\n@@ -170,1 +208,1 @@\n-PreciseAllocation::PreciseAllocation(Heap& heap, size_t size, Subspace* subspace, unsigned indexInSpace, bool adjustedAlignment)\n+PreciseAllocation::PreciseAllocation(Heap& heap, size_t size, Subspace* subspace, unsigned indexInSpace, unsigned adjustment)\n@@ -175,1 +213,1 @@\n-    , m_adjustedAlignment(adjustedAlignment)\n+    , m_adjustment(adjustment)\n@@ -182,0 +220,1 @@\n+    ASSERT(m_adjustment == adjustment);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/heap\/PreciseAllocation.cpp","additions":97,"deletions":58,"binary":false,"changes":155,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (C) 2016-2021 Apple Inc. All rights reserved.\n+ * Copyright (C) 2016-2023 Apple Inc. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include <wtf\/StdLibExtras.h>\n@@ -158,1 +159,6 @@\n-    static constexpr unsigned headerSize() { return ((sizeof(PreciseAllocation) + halfAlignment - 1) & ~(halfAlignment - 1)) | halfAlignment; }\n+    static constexpr unsigned cacheLineAdjustment = 2 * halfAlignment;\n+\n+    \/\/ The header size must be packed to full alignment size. Because the cell start address\n+    \/\/ always begins immediately after the header, this allows isAlignedForPreciseAllocation()\n+    \/\/ to trivially infer the alignment of the cell from the alignment of the header.\n+    static constexpr unsigned headerSize() { return roundUpToMultipleOf<alignment>(sizeof(PreciseAllocation)); }\n@@ -161,1 +167,1 @@\n-    PreciseAllocation(Heap&, size_t, Subspace*, unsigned indexInSpace, bool adjustedAlignment);\n+    PreciseAllocation(Heap&, size_t, Subspace*, unsigned indexInSpace, unsigned adjustment);\n@@ -169,1 +175,4 @@\n-    bool m_adjustedAlignment : 1;\n+    \/\/ Worst case adjustment needed would be halfAlignment + portionOfObjectThatMustFitInCacheLine\n+    \/\/ which is 8 + 16 -> 24 bytes i.e. will fit in 5 bits. If we need more bits in the future, we\n+    \/\/ can also encode this number of uintptr_t words to save 3 bits.\n+    unsigned m_adjustment : 5;\n@@ -179,3 +188,1 @@\n-    if (m_adjustedAlignment)\n-        return bitwise_cast<char*>(this) - halfAlignment;\n-    return bitwise_cast<void*>(this);\n+    return bitwise_cast<char*>(this) - m_adjustment;\n@@ -185,1 +192,0 @@\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/heap\/PreciseAllocation.h","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2875,1 +2875,1 @@\n-        bineq t0, NotInitialization, .noNeedForTDZCheck\n+        bilt t0, NotInitialization, .noNeedForTDZCheck\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/llint\/LowLevelInterpreter32_64.asm","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3072,1 +3072,1 @@\n-        bineq t0, NotInitialization, .noNeedForTDZCheck\n+        bilt t0, NotInitialization, .noNeedForTDZCheck\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/llint\/LowLevelInterpreter64.asm","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-    static bool verifySubRangeLength(const ArrayBuffer& buffer, size_t byteOffset, size_t numElements, unsigned elementSize)\n+    static bool verifySubRangeLength(size_t byteLength, size_t byteOffset, size_t numElements, unsigned elementSize)\n@@ -145,1 +145,0 @@\n-        size_t byteLength = buffer.byteLength();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/ArrayBufferView.h","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -58,1 +58,6 @@\n-        if (!ArrayBufferView::verifySubRangeLength(buffer.get(), byteOffset, byteLength.value_or(0), 1))\n+        if (!ArrayBufferView::verifySubRangeLength(buffer->byteLength(), byteOffset, byteLength.value_or(0), 1))\n+            return nullptr;\n+    } else if (buffer->isGrowableShared()) {\n+        \/\/ For growable buffer, we extra-check whether byteOffset and length are within maxByteLength.\n+        \/\/ This does not hit in normal condition, just extra hardening.\n+        if (!ArrayBufferView::verifySubRangeLength(buffer->maxByteLength().value(), byteOffset, byteLength.value_or(0), 1))\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/DataView.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-    if (!ArrayBufferView::verifySubRangeLength(*buffer, byteOffset, length.value_or(0), sizeof(typename Adaptor::Type)))\n+    if (!ArrayBufferView::verifySubRangeLength(buffer->byteLength(), byteOffset, length.value_or(0), sizeof(typename Adaptor::Type)))\n@@ -114,1 +114,6 @@\n-        if (!ArrayBufferView::verifySubRangeLength(buffer.get(), byteOffset, length.value_or(0), sizeof(typename Adaptor::Type)))\n+        if (!ArrayBufferView::verifySubRangeLength(buffer->byteLength(), byteOffset, length.value_or(0), sizeof(typename Adaptor::Type)))\n+            return nullptr;\n+    } else if (buffer->isGrowableShared()) {\n+        \/\/ For growable buffer, we extra-check whether byteOffset and length are within maxByteLength.\n+        \/\/ This does not hit in normal condition, just extra hardening.\n+        if (!ArrayBufferView::verifySubRangeLength(buffer->maxByteLength().value(), byteOffset, length.value_or(0), sizeof(typename Adaptor::Type)))\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/GenericTypedArrayViewInlines.h","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -86,1 +86,2 @@\n-    NotInitialization    \/\/ \"x = 20;\"\n+    NotInitialization,   \/\/ \"x = 20;\"\n+    ScopedArgumentInitialization \/\/ Assign to scoped argument, which also has NotInitialization semantics.\n@@ -123,1 +124,2 @@\n-        \"NotInitialization\"\n+        \"NotInitialization\",\n+        \"ScopedArgumentInitialization\"\n@@ -135,0 +137,1 @@\n+    case InitializationMode::ScopedArgumentInitialization:\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/GetPutInfo.h","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-    if (!ArrayBufferView::verifySubRangeLength(*buffer, byteOffset, byteLength.value_or(0), sizeof(uint8_t))) {\n+    if (!ArrayBufferView::verifySubRangeLength(buffer->byteLength(), byteOffset, byteLength.value_or(0), sizeof(uint8_t))) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/JSDataView.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-    if (!ArrayBufferView::verifySubRangeLength(*buffer, byteOffset, length.value_or(0), elementSize)) {\n+    if (!ArrayBufferView::verifySubRangeLength(buffer->byteLength(), byteOffset, length.value_or(0), elementSize)) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/JSGenericTypedArrayViewInlines.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -180,4 +180,1 @@\n-    \/\/ If we resolved a string that didn't previously exist, notify the heap that we've grown.\n-    if (atomString.impl()->hasOneRef())\n-        vm.heap.reportExtraMemoryAllocated(atomString.impl()->cost());\n-\n+    size_t sizeToReport = atomString.impl()->hasOneRef() ? atomString.impl()->cost() : 0;\n@@ -185,1 +182,2 @@\n-\n+    \/\/ If we resolved a string that didn't previously exist, notify the heap that we've grown.\n+    vm.heap.reportExtraMemoryAllocated(sizeToReport);\n@@ -246,1 +244,0 @@\n-        vm.heap.reportExtraMemoryAllocated(newImpl->cost());\n@@ -248,0 +245,1 @@\n+        size_t sizeToReport = newImpl->cost();\n@@ -251,0 +249,1 @@\n+        vm.heap.reportExtraMemoryAllocated(sizeToReport);\n@@ -260,1 +259,0 @@\n-    vm.heap.reportExtraMemoryAllocated(newImpl->cost());\n@@ -262,0 +260,1 @@\n+    size_t sizeToReport = newImpl->cost();\n@@ -265,0 +264,1 @@\n+    vm.heap.reportExtraMemoryAllocated(sizeToReport);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/JSString.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -297,2 +297,1 @@\n-        if (impl->hasOneRef())\n-            vm.heap.reportExtraMemoryAllocated(impl->cost());\n+        size_t sizeToReport = impl->hasOneRef() ? impl->cost() : 0;\n@@ -300,0 +299,1 @@\n+        vm.heap.reportExtraMemoryAllocated(sizeToReport);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/JSStringInlines.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"Watchpoint.h\"\n@@ -113,1 +114,1 @@\n-        if (i < namedLength)\n+        if (i < namedLength) {\n@@ -115,1 +116,5 @@\n-        else\n+\n+            auto* watchpointSet = m_table->getWatchpointSet(i);\n+            if (watchpointSet)\n+                watchpointSet->touch(vm, \"Write to ScopedArgument.\");\n+        } else\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/ScopedArguments.h","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+    result->m_watchpointSets.fill(nullptr, length);\n@@ -83,0 +84,1 @@\n+    result->m_watchpointSets = this->m_watchpointSets;\n@@ -96,0 +98,2 @@\n+        m_watchpointSets.resize(newLength);\n+        m_watchpointSets.fill(nullptr, newLength);\n@@ -102,1 +106,1 @@\n-    for (unsigned i = std::min(m_length, newLength); i--;)\n+    for (unsigned i = std::min(m_length, newLength); i--;) {\n@@ -104,0 +108,2 @@\n+        result->m_watchpointSets[i] = this->m_watchpointSets[i];\n+    }\n@@ -122,0 +128,9 @@\n+void ScopedArgumentsTable::trySetWatchpointSet(uint32_t i, WatchpointSet* watchpoints)\n+{\n+    ASSERT(watchpoints);\n+    if (i >= m_watchpointSets.size())\n+        return;\n+\n+    m_watchpointSets[i] = watchpoints;\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/ScopedArgumentsTable.cpp","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+class WatchpointSet;\n+\n@@ -70,0 +72,1 @@\n+    WatchpointSet* getWatchpointSet(uint32_t i) const { return m_watchpointSets.at(i); }\n@@ -77,0 +80,1 @@\n+    void trySetWatchpointSet(uint32_t index, WatchpointSet* watchpoints);\n@@ -99,0 +103,1 @@\n+    Vector<WatchpointSet*> m_watchpointSets;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/ScopedArgumentsTable.h","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -917,0 +917,18 @@\n+    Locker<JSCellLock> cellLocker(NoLockingNecessary);\n+\n+    PropertyTable* table = nullptr;\n+    size_t beforeOutOfLineCapacity = this->outOfLineCapacity();\n+    size_t afterOutOfLineCapacity = beforeOutOfLineCapacity;\n+    if (isUncacheableDictionary()) {\n+        table = propertyTableOrNull();\n+        ASSERT(table);\n+        PropertyOffset maxOffset = invalidOffset;\n+        if (unsigned propertyCount = table->size())\n+            maxOffset = offsetForPropertyNumber(propertyCount - 1, m_inlineCapacity);\n+        afterOutOfLineCapacity = outOfLineCapacity(maxOffset);\n+    }\n+\n+    \/\/ This is the only case we shrink butterfly in this function. We should take a cell lock to protect against concurrent access to the butterfly.\n+    if (beforeOutOfLineCapacity != afterOutOfLineCapacity)\n+        cellLocker = Locker { object->cellLock() };\n+\n@@ -922,1 +940,0 @@\n-    size_t beforeOutOfLineCapacity = this->outOfLineCapacity();\n@@ -924,3 +941,0 @@\n-        PropertyTable* table = propertyTableOrNull();\n-        ASSERT(table);\n-\n@@ -958,1 +972,1 @@\n-    size_t afterOutOfLineCapacity = this->outOfLineCapacity();\n+    ASSERT(this->outOfLineCapacity() == afterOutOfLineCapacity);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/Structure.cpp","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -155,1 +155,0 @@\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/SymbolTable.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -683,0 +683,1 @@\n+\n@@ -694,1 +695,1 @@\n-        ASSERT_WITH_SECURITY_IMPLICATION(m_arguments);\n+        RELEASE_ASSERT_WITH_SECURITY_IMPLICATION(m_arguments);\n@@ -702,0 +703,10 @@\n+    void prepareToWatchScopedArgument(SymbolTableEntry& entry, uint32_t i)\n+    {\n+        entry.prepareToWatch();\n+        if (!m_arguments)\n+            return;\n+\n+        WatchpointSet* watchpoints = entry.watchpointSet();\n+        m_arguments->trySetWatchpointSet(i, watchpoints);\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/SymbolTable.h","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -798,1 +798,1 @@\n-        ControlData(BBQJIT& generator, BlockType blockType, BlockSignature signature, LocalOrTempIndex enclosedHeight)\n+        ControlData(BBQJIT& generator, BlockType blockType, BlockSignature signature, LocalOrTempIndex enclosedHeight, RegisterSet liveScratchGPRs = { })\n@@ -838,2 +838,2 @@\n-                \/\/ We intentionally exclude GPRInfo::nonPreservedNonArgumentGPR1 from argument locations. See explanation in addIf and emitIndirectCall.\n-                gprSetCopy.remove(GPRInfo::nonPreservedNonArgumentGPR1);\n+                liveScratchGPRs.forEach([&] (auto r) { gprSetCopy.remove(r); });\n+\n@@ -850,0 +850,11 @@\n+        \/\/ Re-use the argument layout of another block (eg. else will re-use the argument\/result locations from if)\n+        enum BranchCallingConventionReuseTag { UseBlockCallingConventionOfOtherBranch };\n+        ControlData(BranchCallingConventionReuseTag, BlockType blockType, ControlData& otherBranch)\n+            : m_signature(otherBranch.m_signature)\n+            , m_blockType(blockType)\n+            , m_argumentLocations(otherBranch.m_argumentLocations)\n+            , m_resultLocations(otherBranch.m_resultLocations)\n+            , m_enclosedHeight(otherBranch.m_enclosedHeight)\n+        {\n+        }\n+\n@@ -7042,1 +7053,4 @@\n-        result = ControlData(*this, BlockType::If, signature, currentControlData().enclosedHeight() + currentControlData().implicitSlots() + enclosingStack.size() - signature->as<FunctionSignature>()->argumentCount());\n+        RegisterSet liveScratchGPRs;\n+        liveScratchGPRs.add(conditionLocation.asGPR(), IgnoreVectors);\n+\n+        result = ControlData(*this, BlockType::If, signature, currentControlData().enclosedHeight() + currentControlData().implicitSlots() + enclosingStack.size() - signature->as<FunctionSignature>()->argumentCount(), liveScratchGPRs);\n@@ -7055,1 +7069,1 @@\n-            result.setIfBranch(m_jit.branchTest32(ResultCondition::Zero, GPRInfo::nonPreservedNonArgumentGPR1));\n+            result.setIfBranch(m_jit.branchTest32(ResultCondition::Zero, conditionLocation.asGPR()));\n@@ -7062,1 +7076,1 @@\n-        ControlData dataElse(*this, BlockType::Block, data.signature(), data.enclosedHeight());\n+        ControlData dataElse(ControlData::UseBlockCallingConventionOfOtherBranch, BlockType::Block, data);\n@@ -7089,1 +7103,1 @@\n-        ControlData dataElse(*this, BlockType::Block, data.signature(), data.enclosedHeight());\n+        ControlData dataElse(ControlData::UseBlockCallingConventionOfOtherBranch, BlockType::Block, data);\n@@ -7939,2 +7953,1 @@\n-        \/\/ Why can we still call calleeCode after saveValuesAcrossCallAndPassArguments? This is because we ensured that calleeCode is GPRInfo::nonPreservedNonArgumentGPR1,\n-        \/\/ and any argument locations will not include GPRInfo::nonPreservedNonArgumentGPR1.\n+        \/\/ Why can we still call calleeCode after saveValuesAcrossCallAndPassArguments? CalleeCode is a scratch and not any argument GPR.\n@@ -9664,0 +9677,15 @@\n+#if ASSERT_ENABLED\n+        for (size_t i = 0; i < dstVector.size(); ++i) {\n+            for (size_t j = i + 1; j < dstVector.size(); ++j)\n+                ASSERT(dstVector[i] != dstVector[j]);\n+        }\n+\n+        \/\/ This algorithm assumes at most one cycle: https:\/\/xavierleroy.org\/publi\/parallel-move.pdf\n+        for (size_t i = 0; i < srcVector.size(); ++i) {\n+            for (size_t j = i + 1; j < srcVector.size(); ++j) {\n+                ASSERT(srcVector[i].isConst() || srcVector[j].isConst()\n+                    || locationOf(srcVector[i]) != locationOf(srcVector[j]));\n+            }\n+        }\n+#endif\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmBBQJIT.cpp","additions":37,"deletions":9,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+#include <cstring>\n+#include <span>\n+#include <wtf\/Assertions.h>\n+\n@@ -57,0 +61,6 @@\n+template<typename T, typename U>\n+void memcpySpan(std::span<T> destination, std::span<U> source)\n+{\n+    RELEASE_ASSERT(destination.size() == source.size());\n+    static_assert(sizeof(T) == sizeof(U));\n+    memcpy(destination.data(), source.data(), destination.size() * sizeof(T));\n@@ -59,0 +69,11 @@\n+template<typename T>\n+void memsetSpan(std::span<T> destination, uint8_t byte)\n+{\n+    memset(destination.data(), byte, destination.size() * sizeof(T));\n+}\n+\n+} \/\/ namespace WTF\n+\n+using WTF::memcpySpan;\n+using WTF::memsetSpan;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/Algorithms.h","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -316,0 +316,4 @@\n+#if !defined(HAVE_SCHEDULING_POLICIES) && PLATFORM(COCOA)\n+#define HAVE_SCHEDULING_POLICIES 1\n+#endif\n+\n@@ -707,4 +711,0 @@\n-#if PLATFORM(IOS_FAMILY)\n-#define HAVE_UIKEYBOARDIMPL_SMARTINSERTDELETE_CLASS_METHOD 1\n-#endif\n-\n@@ -1495,0 +1495,29 @@\n+\n+#if (PLATFORM(MACCATALYST) && __IPHONE_OS_VERSION_MIN_REQUIRED >= 170000) \\\n+    || (PLATFORM(IOS) && __IPHONE_OS_VERSION_MIN_REQUIRED >= 170000) \\\n+    || (PLATFORM(APPLETV) && __TV_OS_VERSION_MAX_ALLOWED >= 170000) \\\n+    || (PLATFORM(WATCHOS) && __WATCH_OS_VERSION_MIN_REQUIRED >= 100000) \\\n+    || PLATFORM(VISION)\n+#define HAVE_UI_USER_INTERFACE_IDIOM_VISION 1\n+#endif\n+\n+#if (PLATFORM(MAC) && __MAC_OS_X_VERSION_MIN_REQUIRED >= 140000) \\\n+    || (PLATFORM(MACCATALYST) && __IPHONE_OS_VERSION_MIN_REQUIRED >= 170000) \\\n+    || (PLATFORM(IOS) && __IPHONE_OS_VERSION_MIN_REQUIRED >= 170000) \\\n+    || (PLATFORM(APPLETV) && __TV_OS_VERSION_MAX_ALLOWED >= 170000) \\\n+    || (PLATFORM(WATCHOS) && __WATCH_OS_VERSION_MIN_REQUIRED >= 100000)\n+#define HAVE_AVSPEECHSYNTHESIS_VOICES_CHANGE_NOTIFICATION 1\n+#endif\n+\n+#if PLATFORM(VISION)\n+#define HAVE_APPLE_THERMAL_MITIGATION_SUPPORT 1\n+#endif\n+\n+#if !PLATFORM(VISION)\n+#define HAVE_IDLE_SLEEP_STATE 1\n+#endif\n+\n+#if !defined(HAVE_UI_TEXT_SELECTION_DISPLAY_INTERACTION) \\\n+    && ((PLATFORM(IOS) || PLATFORM(MACCATALYST)) && __IPHONE_OS_VERSION_MIN_REQUIRED >= 170000)\n+#define HAVE_UI_TEXT_SELECTION_DISPLAY_INTERACTION 1\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/PlatformHave.h","additions":33,"deletions":4,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (C) 2018-2022 Apple Inc. All rights reserved.\n+ * Copyright (C) 2018-2023 Apple Inc. All rights reserved.\n@@ -33,0 +33,5 @@\n+enum class PACKeyType {\n+    ProcessIndependent,\n+    ProcessDependent\n+};\n+\n@@ -431,1 +436,1 @@\n-template <typename IntType>\n+template <typename IntType, PACKeyType keyType = PACKeyType::ProcessDependent>\n@@ -435,1 +440,3 @@\n-    return bitwise_cast<IntType>(ptrauth_auth_data(bitwise_cast<void*>(ptrInt), ptrauth_key_process_dependent_data, tag));\n+    if constexpr (keyType == PACKeyType::ProcessDependent)\n+        return bitwise_cast<IntType>(ptrauth_auth_data(bitwise_cast<void*>(ptrInt), ptrauth_key_process_dependent_data, tag));\n+    return bitwise_cast<IntType>(ptrauth_auth_data(bitwise_cast<void*>(ptrInt), ptrauth_key_process_independent_data, tag));\n@@ -473,1 +480,1 @@\n-template <PtrTag tag, typename IntType>\n+template <PtrTag tag, typename IntType, PACKeyType keyType = PACKeyType::ProcessDependent>\n@@ -477,1 +484,3 @@\n-    return bitwise_cast<IntType>(ptrauth_sign_unauthenticated(bitwise_cast<void*>(ptrInt), ptrauth_key_process_dependent_data, tag));\n+    if constexpr (keyType == PACKeyType::ProcessDependent)\n+        return bitwise_cast<IntType>(ptrauth_sign_unauthenticated(bitwise_cast<void*>(ptrInt), ptrauth_key_process_dependent_data, tag));\n+    return bitwise_cast<IntType>(ptrauth_sign_unauthenticated(bitwise_cast<void*>(ptrInt), ptrauth_key_process_independent_data, tag));\n@@ -480,1 +489,1 @@\n-template <typename IntType>\n+template <typename IntType, PACKeyType keyType = PACKeyType::ProcessDependent>\n@@ -484,1 +493,3 @@\n-    return bitwise_cast<IntType>(ptrauth_sign_unauthenticated(bitwise_cast<void*>(ptrInt), ptrauth_key_process_dependent_data, tag));\n+    if constexpr (keyType == PACKeyType::ProcessDependent)\n+        return bitwise_cast<IntType>(ptrauth_sign_unauthenticated(bitwise_cast<void*>(ptrInt), ptrauth_key_process_dependent_data, tag));\n+    return bitwise_cast<IntType>(ptrauth_sign_unauthenticated(bitwise_cast<void*>(ptrInt), ptrauth_key_process_independent_data, tag));\n@@ -539,1 +550,1 @@\n-template <PtrTag, typename IntType>\n+template <PtrTag, typename IntType, PACKeyType>\n@@ -546,1 +557,1 @@\n-template <typename IntType>\n+template <typename IntType, PACKeyType>\n@@ -553,1 +564,1 @@\n-template <typename IntType>\n+template <typename IntType, PACKeyType>\n@@ -569,0 +580,18 @@\n+template <PACKeyType keyType, PtrTag tag, typename IntType>\n+inline IntType tagInt(IntType ptrInt)\n+{\n+    return tagInt<tag, IntType, keyType>(ptrInt);\n+}\n+\n+template <PACKeyType keyType, typename IntType>\n+inline IntType tagInt(IntType ptrInt, PtrTag tag)\n+{\n+    return tagInt<IntType, keyType>(ptrInt, tag);\n+}\n+\n+template <PACKeyType keyType, typename IntType>\n+inline IntType untagInt(IntType ptrInt, PtrTag tag)\n+{\n+    return untagInt<IntType, keyType>(ptrInt, tag);\n+}\n+\n@@ -573,0 +602,1 @@\n+using WTF::PACKeyType;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/PtrTag.h","additions":40,"deletions":10,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -285,0 +285,9 @@\n+template<typename Target, typename Source, typename PtrTraits>\n+inline Ref<Target> checkedDowncast(Ref<Source, PtrTraits> source)\n+{\n+    static_assert(!std::is_same_v<Source, Target>, \"Unnecessary cast to same type\");\n+    static_assert(std::is_base_of_v<Source, Target>, \"Should be a downcast\");\n+    RELEASE_ASSERT(is<Target>(source));\n+    return static_reference_cast<Target>(WTFMove(source));\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/Ref.h","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -268,0 +268,9 @@\n+template<typename Target, typename Source, typename PtrTraits, typename RefDerefTraits>\n+inline RefPtr<Target> checkedDowncast(RefPtr<Source, PtrTraits, RefDerefTraits> source)\n+{\n+    static_assert(!std::is_same_v<Source, Target>, \"Unnecessary cast to same type\");\n+    static_assert(std::is_base_of_v<Source, Target>, \"Should be a downcast\");\n+    RELEASE_ASSERT(!source || is<Target>(*source));\n+    return static_pointer_cast<Target>(WTFMove(source));\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/RefPtr.h","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -74,0 +74,17 @@\n+template<typename Target, typename Source>\n+inline match_constness_t<Source, Target>& checkedDowncast(Source& source)\n+{\n+    static_assert(!std::is_same_v<Source, Target>, \"Unnecessary cast to same type\");\n+    static_assert(std::is_base_of_v<Source, Target>, \"Should be a downcast\");\n+    RELEASE_ASSERT(is<Target>(source));\n+    return static_cast<match_constness_t<Source, Target>&>(source);\n+}\n+template<typename Target, typename Source>\n+inline match_constness_t<Source, Target>* checkedDowncast(Source* source)\n+{\n+    static_assert(!std::is_same_v<Source, Target>, \"Unnecessary cast to same type\");\n+    static_assert(std::is_base_of_v<Source, Target>, \"Should be a downcast\");\n+    RELEASE_ASSERT(!source || is<Target>(*source));\n+    return static_cast<match_constness_t<Source, Target>*>(source);\n+}\n+\n@@ -137,0 +154,1 @@\n+using WTF::checkedDowncast;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/TypeCasts.h","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1224,1 +1224,0 @@\n-                StringView urlScheme = parsedDataView(0, m_url.m_schemeEnd);\n@@ -1226,0 +1225,1 @@\n+                StringView urlScheme = parsedDataView(0, m_url.m_schemeEnd);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/URLParser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -571,0 +571,1 @@\n+    Modules\/web-locks\/WebLock.h\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Headers.cmake","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -71,2 +71,3 @@\n-        if (!workerThread->runLoop().terminated())\n-            mainThreadConnection = workerThread->workerLoaderProxy().createCacheStorageConnection();\n+        auto* workerLoaderProxy = workerThread->workerLoaderProxy();\n+        if (!workerThread->runLoop().terminated() && workerLoaderProxy)\n+            mainThreadConnection = workerLoaderProxy->createCacheStorageConnection();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/cache\/WorkerCacheStorageConnection.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-            return entry.value->objectStore().info().identifier() == identifier;\n+            return entry.value->objectStore()->info().identifier() == identifier;\n@@ -165,1 +165,1 @@\n-    ASSERT(m_objectStores.contains(&index.objectStore()));\n+    ASSERT(!index.objectStore() || m_objectStores.contains(index.objectStore().get()));\n@@ -228,2 +228,2 @@\n-        if (indexToDelete)\n-            indexToDelete->objectStore().deleteIndex(*this, indexToDelete->info().identifier());\n+        if (indexToDelete && indexToDelete->objectStore())\n+            indexToDelete->objectStore()->deleteIndex(*this, indexToDelete->info().identifier());\n@@ -231,3 +231,3 @@\n-        auto& objectStore = index->objectStore();\n-        auto indexToReRegister = objectStore.takeIndexByIdentifier(identifier).releaseNonNull();\n-        objectStore.info().deleteIndex(identifier);\n+        if (auto objectStore = index->objectStore()) {\n+            auto indexToReRegister = objectStore->takeIndexByIdentifier(identifier).releaseNonNull();\n+            objectStore->info().deleteIndex(identifier);\n@@ -235,2 +235,3 @@\n-        objectStore.info().addExistingIndex(index->info());\n-        objectStore.registerIndex(WTFMove(indexToReRegister));\n+            objectStore->info().addExistingIndex(index->info());\n+            objectStore->registerIndex(WTFMove(indexToReRegister));\n+        }\n@@ -247,1 +248,1 @@\n-        return m_versionChangeAddedObjectStores.contains(&entry.value->objectStore());\n+        return m_versionChangeAddedObjectStores.contains(entry.value->objectStore().get());\n@@ -291,1 +292,1 @@\n-        index->objectStore().maybeRestoreDeletedIndex(*index);\n+        index->objectStore()->maybeRestoreDeletedIndex(*index);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/server\/MemoryBackingStoreTransaction.cpp","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-    auto transaction = m_objectStore.writeTransaction();\n+    auto transaction = m_objectStore->writeTransaction();\n@@ -92,2 +92,2 @@\n-    ASSERT(m_objectStore.writeTransaction());\n-    ASSERT(m_objectStore.writeTransaction()->isAborting());\n+    ASSERT(m_objectStore->writeTransaction());\n+    ASSERT(m_objectStore->writeTransaction()->isAborting());\n@@ -100,2 +100,2 @@\n-    ASSERT(m_objectStore.writeTransaction());\n-    ASSERT(m_objectStore.writeTransaction()->isAborting());\n+    ASSERT(m_objectStore->writeTransaction());\n+    ASSERT(m_objectStore->writeTransaction()->isAborting());\n@@ -127,1 +127,1 @@\n-    return type == IndexedDB::IndexRecordType::Key ? IDBGetResult(*keyValue) : IDBGetResult(*keyValue, m_objectStore.valueForKeyRange(*keyValue), m_objectStore.info().keyPath());\n+    return type == IndexedDB::IndexRecordType::Key ? IDBGetResult(*keyValue) : IDBGetResult(*keyValue, m_objectStore->valueForKeyRange(*keyValue), m_objectStore->info().keyPath());\n@@ -157,1 +157,1 @@\n-    result = { type, m_objectStore.info().keyPath() };\n+    result = { type, m_objectStore->info().keyPath() };\n@@ -182,1 +182,1 @@\n-                result.addValue(m_objectStore.valueForKeyRange(keyValue));\n+                result.addValue(m_objectStore->valueForKeyRange(keyValue));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/server\/MemoryIndex.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-    MemoryObjectStore& objectStore() { return m_objectStore; }\n+    WeakPtr<MemoryObjectStore> objectStore() { return m_objectStore; }\n@@ -99,1 +99,1 @@\n-    MemoryObjectStore& m_objectStore;\n+    WeakPtr<MemoryObjectStore> m_objectStore;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/server\/MemoryIndex.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,2 +75,2 @@\n-        IDBValue value = { m_index.objectStore().valueForKey(m_currentPrimaryKey), { }, { } };\n-        getResult = { m_currentKey, m_currentPrimaryKey, WTFMove(value), m_index.objectStore().info().keyPath() };\n+        IDBValue value = { m_index.objectStore()->valueForKey(m_currentPrimaryKey), { }, { } };\n+        getResult = { m_currentKey, m_currentPrimaryKey, WTFMove(value), m_index.objectStore()->info().keyPath() };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/server\/MemoryIndexCursor.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-class MemoryObjectStore : public RefCounted<MemoryObjectStore> {\n+class MemoryObjectStore : public RefCounted<MemoryObjectStore>, public CanMakeWeakPtr<MemoryObjectStore> {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/indexeddb\/server\/MemoryObjectStore.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-            if (auto* connection = m_iceTransport->connection())\n+            if (auto connection = m_iceTransport->connection())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/mediastream\/RTCDtlsTransport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,2 +81,2 @@\n-        if (m_connection)\n-            m_connection->processIceTransportStateChange(*this);\n+        if (auto connection = this->connection())\n+            connection->processIceTransportStateChange(*this);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/mediastream\/RTCIceTransport.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    RTCPeerConnection* connection() const { return m_connection.get(); }\n+    RefPtr<RTCPeerConnection> connection() const { return m_connection.get(); }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/mediastream\/RTCIceTransport.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -201,1 +201,2 @@\n-    workerGlobalScope.thread().workerLoaderProxy().postTaskToLoader(WTFMove(completionHandler));\n+    if (auto* workerLoaderProxy = workerGlobalScope.thread().workerLoaderProxy())\n+        workerLoaderProxy->postTaskToLoader(WTFMove(completionHandler));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/permissions\/Permissions.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -67,0 +67,4 @@\n+    auto* workerLoaderProxy = m_scope->thread().workerLoaderProxy();\n+    if (!workerLoaderProxy)\n+        return completionHandler(false);\n+\n@@ -70,1 +74,1 @@\n-    m_scope->thread().workerLoaderProxy().postTaskToLoader([callbackIdentifier, contextIdentifier = m_scope->identifier(), origin = WTFMove(origin).isolatedCopy()](auto& context) mutable {\n+    workerLoaderProxy->postTaskToLoader([callbackIdentifier, contextIdentifier = m_scope->identifier(), origin = WTFMove(origin).isolatedCopy()](auto& context) mutable {\n@@ -97,0 +101,4 @@\n+    auto* workerLoaderProxy = m_scope->thread().workerLoaderProxy();\n+    if (!workerLoaderProxy)\n+        return completionHandler(Exception { InvalidStateError });\n+\n@@ -100,1 +108,1 @@\n-    m_scope->thread().workerLoaderProxy().postTaskToLoader([callbackIdentifier, contextIdentifier = m_scope->identifier(), origin = WTFMove(origin).isolatedCopy()](auto& context) mutable {\n+    workerLoaderProxy->postTaskToLoader([callbackIdentifier, contextIdentifier = m_scope->identifier(), origin = WTFMove(origin).isolatedCopy()](auto& context) mutable {\n@@ -127,0 +135,4 @@\n+    auto* workerLoaderProxy = m_scope->thread().workerLoaderProxy();\n+    if (!workerLoaderProxy)\n+        return completionHandler(Exception { InvalidStateError });\n+\n@@ -130,1 +142,1 @@\n-    m_scope->thread().workerLoaderProxy().postTaskToLoader([callbackIdentifier, contextIdentifier = m_scope->identifier(), origin = WTFMove(origin).isolatedCopy()](auto& context) mutable {\n+    workerLoaderProxy->postTaskToLoader([callbackIdentifier, contextIdentifier = m_scope->identifier(), origin = WTFMove(origin).isolatedCopy()](auto& context) mutable {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/storage\/WorkerStorageConnection.cpp","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+    static constexpr unsigned maxNameLength = { 1024 };\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/web-locks\/WebLock.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -202,0 +202,5 @@\n+    if (name.length() > WebLock::maxNameLength) {\n+        releasePromise->reject(NotSupportedError, makeString(\"Lock name cannot cannot be longer than \"_s, WebLock::maxNameLength, \" characters\"));\n+        return;\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/web-locks\/WebLockManager.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -122,1 +122,5 @@\n-    thread().messagingProxy().postTaskToAudioWorklet([name = WTFMove(name).isolatedCopy(), parameterDescriptors = crossThreadCopy(WTFMove(parameterDescriptors))](AudioWorklet& worklet) mutable {\n+    auto* messagingProxy = thread().messagingProxy();\n+    if (!messagingProxy)\n+        return Exception { InvalidStateError };\n+\n+    messagingProxy->postTaskToAudioWorklet([name = WTFMove(name).isolatedCopy(), parameterDescriptors = crossThreadCopy(WTFMove(parameterDescriptors))](AudioWorklet& worklet) mutable {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/AudioWorkletGlobalScope.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+    m_workletThread->clearProxies();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/AudioWorkletMessagingProxy.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    , m_messagingProxy(messagingProxy)\n+    , m_messagingProxy(&messagingProxy)\n@@ -54,1 +54,6 @@\n-WorkerLoaderProxy& AudioWorkletThread::workerLoaderProxy()\n+void AudioWorkletThread::clearProxies()\n+{\n+    m_messagingProxy = nullptr;\n+}\n+\n+WorkerLoaderProxy* AudioWorkletThread::workerLoaderProxy()\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/AudioWorkletThread.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -50,0 +50,2 @@\n+    void clearProxies() final;\n+\n@@ -51,1 +53,1 @@\n-    WorkerLoaderProxy& workerLoaderProxy() final;\n+    WorkerLoaderProxy* workerLoaderProxy() final;\n@@ -54,1 +56,1 @@\n-    AudioWorkletMessagingProxy& messagingProxy() { return m_messagingProxy; }\n+    AudioWorkletMessagingProxy* messagingProxy() { return m_messagingProxy; }\n@@ -63,1 +65,1 @@\n-    AudioWorkletMessagingProxy& m_messagingProxy;\n+    AudioWorkletMessagingProxy* m_messagingProxy; \/\/ FIXME: Adopt CheckedPtr.\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/AudioWorkletThread.h","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-        if (!overrideRect->width || !overrideRect->height)\n+        if (overrideRect->width <= 0 || overrideRect->height <= 0 || overrideRect->x < 0 || overrideRect->y < 0)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webcodecs\/WebCodecsVideoFrameAlgorithms.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -346,2 +346,2 @@\n-    else\n-        downcast<WorkerGlobalScope>(context).thread().workerLoaderProxy().postTaskToLoader(WTFMove(reportRegistrableDomain));\n+    else if (auto* workerLoaderProxy = downcast<WorkerGlobalScope>(context).thread().workerLoaderProxy())\n+        workerLoaderProxy->postTaskToLoader(WTFMove(reportRegistrableDomain));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/websockets\/WebSocket.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -349,1 +349,1 @@\n-    , m_loaderProxy(m_workerGlobalScope->thread().workerLoaderProxy())\n+    , m_loaderProxy(*m_workerGlobalScope->thread().workerLoaderProxy())\n@@ -377,1 +377,2 @@\n-                downcast<WorkerOrWorkletGlobalScope>(context).workerOrWorkletThread()->workerLoaderProxy().postTaskToLoader([peer = WTFMove(peer)](ScriptExecutionContext& context) {\n+                if (auto* workerLoaderProxy = downcast<WorkerOrWorkletGlobalScope>(context).workerOrWorkletThread()->workerLoaderProxy()) {\n+                    workerLoaderProxy->postTaskToLoader([peer = WTFMove(peer)](ScriptExecutionContext& context) {\n@@ -381,0 +382,1 @@\n+                }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/websockets\/WorkerThreadableWebSocketChannel.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    , m_viewerReferenceSpace(makeUnique<WebXRViewerSpace>(document, *this))\n+    , m_viewerReferenceSpace(WebXRViewerSpace::create(document, *this))\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webxr\/WebXRSession.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-    const WebXRViewerSpace& viewerReferenceSpace() const { return *m_viewerReferenceSpace; }\n+    const WebXRViewerSpace& viewerReferenceSpace() const { return m_viewerReferenceSpace; }\n@@ -149,1 +149,1 @@\n-    std::unique_ptr<WebXRViewerSpace> m_viewerReferenceSpace;\n+    Ref<WebXRViewerSpace> m_viewerReferenceSpace;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webxr\/WebXRSession.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-class WebXRViewerSpace : public WebXRSpace {\n+class WebXRViewerSpace : public RefCounted<WebXRViewerSpace>, public WebXRSpace {\n@@ -79,1 +79,4 @@\n-    WebXRViewerSpace(Document&, WebXRSession&);\n+    static Ref< WebXRViewerSpace> create(Document& document, WebXRSession& session)\n+    {\n+        return adoptRef(*new WebXRViewerSpace(document, session));\n+    }\n@@ -82,0 +85,3 @@\n+    using RefCounted::ref;\n+    using RefCounted::deref;\n+\n@@ -83,0 +89,2 @@\n+    WebXRViewerSpace(Document&, WebXRSession&);\n+\n@@ -86,2 +94,2 @@\n-    void refEventTarget() final { RELEASE_ASSERT_NOT_REACHED(); }\n-    void derefEventTarget() final { RELEASE_ASSERT_NOT_REACHED(); }\n+    void refEventTarget() final { ref(); }\n+    void derefEventTarget() final { deref(); }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webxr\/WebXRSpace.h","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -345,1 +345,2 @@\n-    if (!node())\n+    RefPtr node = this->node();\n+    if (!node)\n@@ -348,1 +349,1 @@\n-    if (node()->isLink())\n+    if (node->isLink())\n@@ -350,1 +351,1 @@\n-    if (node()->isTextNode())\n+    if (node->isTextNode())\n@@ -352,2 +353,2 @@\n-    if (node()->hasTagName(selectTag)) {\n-        auto& selectElement = downcast<HTMLSelectElement>(*node());\n+    if (node->hasTagName(selectTag)) {\n+        auto& selectElement = downcast<HTMLSelectElement>(*node);\n@@ -356,1 +357,1 @@\n-    if (is<HTMLImageElement>(*node()) && downcast<HTMLImageElement>(*node()).hasAttributeWithoutSynchronization(usemapAttr))\n+    if (auto* image = dynamicDowncast<HTMLImageElement>(node.get()); image && image->hasAttributeWithoutSynchronization(usemapAttr))\n@@ -358,1 +359,1 @@\n-    if (node()->hasTagName(liTag))\n+    if (node->hasTagName(liTag))\n@@ -360,1 +361,1 @@\n-    if (node()->hasTagName(buttonTag))\n+    if (node->hasTagName(buttonTag))\n@@ -362,1 +363,1 @@\n-    if (node()->hasTagName(legendTag))\n+    if (node->hasTagName(legendTag))\n@@ -364,1 +365,1 @@\n-    if (node()->hasTagName(canvasTag))\n+    if (node->hasTagName(canvasTag))\n@@ -368,3 +369,2 @@\n-    if (is<HTMLInputElement>(node())) {\n-        HTMLInputElement& input = downcast<HTMLInputElement>(*node());\n-        if (input.isCheckbox())\n+    if (auto* input = dynamicDowncast<HTMLInputElement>(node.get())) {\n+        if (input->isCheckbox())\n@@ -372,1 +372,1 @@\n-        if (input.isRadioButton())\n+        if (input->isRadioButton())\n@@ -374,1 +374,1 @@\n-        if (input.isTextButton())\n+        if (input->isTextButton())\n@@ -378,1 +378,1 @@\n-        if (input.isDateField() || input.isTimeField())\n+        if (input->isDateField() || input->isTimeField())\n@@ -382,1 +382,1 @@\n-        if (input.isColorControl())\n+        if (input->isColorControl())\n@@ -385,1 +385,1 @@\n-        if (input.isInputTypeHidden())\n+        if (input->isInputTypeHidden())\n@@ -387,1 +387,1 @@\n-        if (input.isRangeControl())\n+        if (input->isRangeControl())\n@@ -389,1 +389,1 @@\n-        if (input.isSearchField())\n+        if (input->isSearchField())\n@@ -401,1 +401,1 @@\n-    if (node()->hasTagName(codeTag))\n+    if (node->hasTagName(codeTag))\n@@ -403,1 +403,1 @@\n-        if (node()->hasTagName(delTag))\n+    if (node->hasTagName(delTag))\n@@ -405,1 +405,1 @@\n-        if (node()->hasTagName(insTag))\n+    if (node->hasTagName(insTag))\n@@ -407,1 +407,1 @@\n-        if (node()->hasTagName(subTag))\n+    if (node->hasTagName(subTag))\n@@ -409,1 +409,1 @@\n-        if (node()->hasTagName(supTag))\n+    if (node->hasTagName(supTag))\n@@ -414,1 +414,1 @@\n-    if (node()->hasTagName(ddTag))\n+    if (node->hasTagName(ddTag))\n@@ -416,1 +416,1 @@\n-    if (node()->hasTagName(dtTag))\n+    if (node->hasTagName(dtTag))\n@@ -418,1 +418,1 @@\n-    if (node()->hasTagName(dlTag))\n+    if (node->hasTagName(dlTag))\n@@ -420,1 +420,1 @@\n-    if (node()->hasTagName(menuTag) || node()->hasTagName(olTag) || node()->hasTagName(ulTag))\n+    if (node->hasTagName(menuTag) || node->hasTagName(olTag) || node->hasTagName(ulTag))\n@@ -422,1 +422,1 @@\n-    if (node()->hasTagName(fieldsetTag))\n+    if (node->hasTagName(fieldsetTag))\n@@ -424,1 +424,1 @@\n-    if (node()->hasTagName(figureTag))\n+    if (node->hasTagName(figureTag))\n@@ -426,1 +426,1 @@\n-    if (node()->hasTagName(pTag))\n+    if (node->hasTagName(pTag))\n@@ -428,1 +428,1 @@\n-    if (is<HTMLLabelElement>(node()))\n+    if (is<HTMLLabelElement>(node.get()))\n@@ -430,1 +430,1 @@\n-    if (node()->hasTagName(dfnTag))\n+    if (node->hasTagName(dfnTag))\n@@ -432,1 +432,1 @@\n-    if (node()->hasTagName(divTag))\n+    if (node->hasTagName(divTag))\n@@ -434,1 +434,1 @@\n-    if (is<HTMLFormElement>(node()))\n+    if (is<HTMLFormElement>(node.get()))\n@@ -436,1 +436,1 @@\n-    if (node()->hasTagName(articleTag))\n+    if (node->hasTagName(articleTag))\n@@ -438,1 +438,1 @@\n-    if (node()->hasTagName(mainTag))\n+    if (node->hasTagName(mainTag))\n@@ -440,1 +440,1 @@\n-    if (node()->hasTagName(navTag))\n+    if (node->hasTagName(navTag))\n@@ -442,1 +442,1 @@\n-    if (node()->hasTagName(asideTag))\n+    if (node->hasTagName(asideTag))\n@@ -444,1 +444,1 @@\n-    if (node()->hasTagName(searchTag))\n+    if (node->hasTagName(searchTag))\n@@ -450,1 +450,1 @@\n-    if (node()->hasTagName(sectionTag))\n+    if (node->hasTagName(sectionTag))\n@@ -452,1 +452,1 @@\n-    if (node()->hasTagName(addressTag))\n+    if (node->hasTagName(addressTag))\n@@ -454,1 +454,1 @@\n-    if (node()->hasTagName(blockquoteTag))\n+    if (node->hasTagName(blockquoteTag))\n@@ -456,1 +456,1 @@\n-    if (node()->hasTagName(captionTag))\n+    if (node->hasTagName(captionTag))\n@@ -458,1 +458,1 @@\n-    if (node()->hasTagName(dialogTag))\n+    if (node->hasTagName(dialogTag))\n@@ -460,1 +460,1 @@\n-    if (node()->hasTagName(markTag) || equalLettersIgnoringASCIICase(getAttribute(roleAttr), \"mark\"_s))\n+    if (node->hasTagName(markTag) || equalLettersIgnoringASCIICase(getAttribute(roleAttr), \"mark\"_s))\n@@ -462,1 +462,1 @@\n-    if (node()->hasTagName(preTag))\n+    if (node->hasTagName(preTag))\n@@ -464,1 +464,1 @@\n-    if (is<HTMLDetailsElement>(node()))\n+    if (is<HTMLDetailsElement>(node.get()))\n@@ -466,1 +466,1 @@\n-    if (auto* summaryElement = dynamicDowncast<HTMLSummaryElement>(node()); summaryElement && summaryElement->isActiveSummary())\n+    if (auto* summaryElement = dynamicDowncast<HTMLSummaryElement>(node.get()); summaryElement && summaryElement->isActiveSummary())\n@@ -475,1 +475,1 @@\n-    if (is<HTMLVideoElement>(node()))\n+    if (is<HTMLVideoElement>(node.get()))\n@@ -477,1 +477,1 @@\n-    if (is<HTMLAudioElement>(node()))\n+    if (is<HTMLAudioElement>(node.get()))\n@@ -482,1 +482,1 @@\n-    if (node()->hasTagName(modelTag))\n+    if (node->hasTagName(modelTag))\n@@ -487,1 +487,1 @@\n-    if (node()->hasTagName(htmlTag))\n+    if (node->hasTagName(htmlTag))\n@@ -492,1 +492,1 @@\n-    if (node()->hasTagName(headerTag) && !isDescendantOfElementType({ articleTag, sectionTag }))\n+    if (node->hasTagName(headerTag) && !isDescendantOfElementType({ articleTag, sectionTag }))\n@@ -497,1 +497,1 @@\n-    if (node()->hasTagName(footerTag)) {\n+    if (node->hasTagName(footerTag)) {\n@@ -503,1 +503,1 @@\n-    if (node()->hasTagName(timeTag))\n+    if (node->hasTagName(timeTag))\n@@ -505,1 +505,1 @@\n-    if (node()->hasTagName(hrTag))\n+    if (node->hasTagName(hrTag))\n@@ -511,1 +511,1 @@\n-    if (is<Element>(*node()) && downcast<Element>(*node()).isFocusable())\n+    if (auto* element = dynamicDowncast<Element>(node.get()); element && element->isFocusable())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/accessibility\/AccessibilityNodeObject.cpp","additions":59,"deletions":59,"binary":false,"changes":118,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+    RETURN_IF_EXCEPTION(scope, Exception { ExistingExceptionError });\n@@ -45,1 +46,0 @@\n-    scope.assertNoExceptionExceptTermination();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/InternalWritableStream.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+#include <JavaScriptCore\/ArrayConventions.h>\n@@ -532,0 +533,1 @@\n+ * Version 15. changed the terminator of the indexed property section in array.\n@@ -533,1 +535,1 @@\n-static constexpr unsigned CurrentVersion = 14;\n+static constexpr unsigned CurrentVersion = 15;\n@@ -542,0 +544,2 @@\n+static_assert(TerminatorTag > MAX_ARRAY_INDEX);\n+\n@@ -554,1 +558,1 @@\n- *     ArrayTag <length:uint32_t>(<index:uint32_t><value:Value>)* TerminatorTag\n+ *     ArrayTag <length:uint32_t>(<index:uint32_t><value:Value>)* TerminatorTag (NonIndexPropertiesTag (<name:StringData><value:Value>)*) TerminatorTag\n@@ -2364,0 +2368,1 @@\n+                    write(TerminatorTag); \/\/ Terminate the indexed property section.\n@@ -3161,0 +3166,9 @@\n+        auto makeArrayBufferView = [&] (auto view) -> bool {\n+            if (!view)\n+                return false;\n+            arrayBufferView = toJS(m_lexicalGlobalObject, m_globalObject, WTFMove(view));\n+            if (!arrayBufferView)\n+                return false;\n+            return true;\n+        };\n+\n@@ -3163,2 +3177,1 @@\n-            arrayBufferView = toJS(m_lexicalGlobalObject, m_globalObject, DataView::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n-            return true;\n+            return makeArrayBufferView(DataView::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n@@ -3166,2 +3179,1 @@\n-            arrayBufferView = toJS(m_lexicalGlobalObject, m_globalObject, Int8Array::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n-            return true;\n+            return makeArrayBufferView(Int8Array::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n@@ -3169,2 +3181,1 @@\n-            arrayBufferView = toJS(m_lexicalGlobalObject, m_globalObject, Uint8Array::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n-            return true;\n+            return makeArrayBufferView(Uint8Array::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n@@ -3172,2 +3183,1 @@\n-            arrayBufferView = toJS(m_lexicalGlobalObject, m_globalObject, Uint8ClampedArray::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n-            return true;\n+            return makeArrayBufferView(Uint8ClampedArray::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n@@ -3175,2 +3185,1 @@\n-            arrayBufferView = toJS(m_lexicalGlobalObject, m_globalObject, Int16Array::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n-            return true;\n+            return makeArrayBufferView(Int16Array::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n@@ -3178,2 +3187,1 @@\n-            arrayBufferView = toJS(m_lexicalGlobalObject, m_globalObject, Uint16Array::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n-            return true;\n+            return makeArrayBufferView(Uint16Array::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n@@ -3181,2 +3189,1 @@\n-            arrayBufferView = toJS(m_lexicalGlobalObject, m_globalObject, Int32Array::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n-            return true;\n+            return makeArrayBufferView(Int32Array::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n@@ -3184,2 +3191,1 @@\n-            arrayBufferView = toJS(m_lexicalGlobalObject, m_globalObject, Uint32Array::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n-            return true;\n+            return makeArrayBufferView(Uint32Array::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n@@ -3187,2 +3193,1 @@\n-            arrayBufferView = toJS(m_lexicalGlobalObject, m_globalObject, Float32Array::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n-            return true;\n+            return makeArrayBufferView(Float32Array::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n@@ -3190,2 +3195,1 @@\n-            arrayBufferView = toJS(m_lexicalGlobalObject, m_globalObject, Float64Array::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n-            return true;\n+            return makeArrayBufferView(Float64Array::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n@@ -3193,2 +3197,1 @@\n-            arrayBufferView = toJS(m_lexicalGlobalObject, m_globalObject, BigInt64Array::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n-            return true;\n+            return makeArrayBufferView(BigInt64Array::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n@@ -3196,2 +3199,1 @@\n-            arrayBufferView = toJS(m_lexicalGlobalObject, m_globalObject, BigUint64Array::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n-            return true;\n+            return makeArrayBufferView(BigUint64Array::wrappedAs(arrayBuffer.releaseNonNull(), byteOffset, length).get());\n@@ -4159,1 +4161,2 @@\n-        if (!isTypeExposedToGlobalObject(*m_globalObject, tag))\n+        if (!isTypeExposedToGlobalObject(*m_globalObject, tag)) {\n+            fail();\n@@ -4161,0 +4164,1 @@\n+        }\n@@ -4716,0 +4720,10 @@\n+\n+            if (m_version >= 15) {\n+                if (index == TerminatorTag) {\n+                    \/\/ We reached the end of the indexed properties section.\n+                    if (!read(index)) {\n+                        fail();\n+                        goto error;\n+                    }\n+                    \/\/ At this point, we're either done with the array or is starting the\n+                    \/\/ non-indexed property section.\n@@ -4721,1 +4735,11 @@\n-            } else if (index == NonIndexPropertiesTag) {\n+                    }\n+                    if (index == NonIndexPropertiesTag)\n+                        goto objectStartVisitMember;\n+                }\n+            } else {\n+                if (index == TerminatorTag) {\n+                    JSObject* outArray = outputObjectStack.last();\n+                    outValue = outArray;\n+                    outputObjectStack.removeLast();\n+                    break;\n+                } else if (index == NonIndexPropertiesTag)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/SerializedScriptValue.cpp","additions":52,"deletions":28,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -384,1 +384,1 @@\n-    std::optional<FontDescription> overrideFontDescription;\n+    bool isGeneric = false;\n@@ -387,1 +387,1 @@\n-        if (auto genericFamilyOptional = resolveGenericFamily(fontDescription, familyName))\n+        if (auto genericFamilyOptional = resolveGenericFamily(fontDescription, familyName)) {\n@@ -389,0 +389,2 @@\n+            isGeneric = true;\n+        }\n@@ -401,1 +403,1 @@\n-        return face->fontRanges(*fontDescriptionForLookup, fontPaletteValues, fontFeatureValues);\n+        return { face->fontRanges(*fontDescriptionForLookup, fontPaletteValues, fontFeatureValues), isGeneric };\n@@ -410,1 +412,1 @@\n-    return FontRanges { WTFMove(font) };\n+    return { FontRanges { WTFMove(font) }, isGeneric };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/CSSFontSelector.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -378,2 +378,3 @@\n-    m_contents->wrapperDeleteRule(index);\n-\n+    bool success = m_contents->wrapperDeleteRule(index);\n+    if (!success)\n+        return Exception { InvalidStateError };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/CSSStyleSheet.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -305,1 +305,1 @@\n-        if (!m_childRules.isEmpty())\n+        if (!m_childRules.isEmpty() || !m_layerRulesBeforeImportRules.isEmpty())\n@@ -330,1 +330,1 @@\n-void StyleSheetContents::wrapperDeleteRule(unsigned index)\n+bool StyleSheetContents::wrapperDeleteRule(unsigned index)\n@@ -338,1 +338,1 @@\n-        return;\n+        return true;\n@@ -346,1 +346,1 @@\n-        return;\n+        return true;\n@@ -351,0 +351,1 @@\n+        \/\/ Deleting @namespace rule when list contains anything other than @import or @namespace rules is not allowed.\n@@ -352,1 +353,1 @@\n-            return;\n+            return false;\n@@ -354,1 +355,1 @@\n-        return;\n+        return true;\n@@ -359,0 +360,1 @@\n+    return true;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/StyleSheetContents.cpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-    void wrapperDeleteRule(unsigned index);\n+    bool wrapperDeleteRule(unsigned index);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/css\/StyleSheetContents.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,1 +120,4 @@\n-        downcast<WorkerGlobalScope>(*context).thread().workerLoaderProxy().postTaskToLoader([protectedThis = WTFMove(protectedThis), task = WTFMove(task)](auto& context) {\n+    auto* workerLoaderProxy = downcast<WorkerGlobalScope>(*context).thread().workerLoaderProxy();\n+    if (!workerLoaderProxy)\n+        return;\n+    workerLoaderProxy->postTaskToLoader([protectedThis = WTFMove(protectedThis), task = WTFMove(task)](auto& context) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/BroadcastChannel.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2342,0 +2342,6 @@\n+    std::optional<RenderStyle> updatedDocumentStyle;\n+    if (!parentStyle && m_needsFullStyleRebuild) {\n+        updatedDocumentStyle.emplace(Style::resolveForDocument(*this));\n+        parentStyle = &*updatedDocumentStyle;\n+    }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Document.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    bool parseXML(const String&, Element* contextElement, OptionSet<ParserContentPolicy> = { ParserContentPolicy::AllowScriptingContent, ParserContentPolicy::AllowPluginContent });\n+    WEBCORE_EXPORT bool parseXML(const String&, Element* contextElement, OptionSet<ParserContentPolicy> = { ParserContentPolicy::AllowScriptingContent, ParserContentPolicy::AllowPluginContent });\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/DocumentFragment.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3979,0 +3979,1 @@\n+    document().styleScope().flushPendingUpdate();\n@@ -3984,1 +3985,1 @@\n-        if (mode == ResolveComputedStyleMode::Normal && !document().hasPendingStyleRecalc() && existingComputedStyle())\n+        if (mode != ResolveComputedStyleMode::RenderedOnly && !document().hasPendingStyleRecalc() && existingComputedStyle())\n@@ -4007,1 +4008,1 @@\n-                return nullptr;\n+                rootmost = nullptr;\n@@ -4013,0 +4014,1 @@\n+    if (!rootmostInvalidElement) {\n@@ -4016,1 +4018,0 @@\n-    if (!rootmostInvalidElement)\n@@ -4018,0 +4019,1 @@\n+    }\n@@ -4034,0 +4036,5 @@\n+        if (computedStyle && computedStyle->containerType() != ContainerType::Normal && mode != ResolveComputedStyleMode::Editability) {\n+            \/\/ If we find a query container we need to bail out and do full style update to resolve it.\n+            if (document().updateStyleIfNeeded())\n+                return this->computedStyle();\n+        };\n@@ -4107,1 +4114,1 @@\n-    return resolveComputedStyle();\n+    return resolveComputedStyle(ResolveComputedStyleMode::Editability);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Element.cpp","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -846,1 +846,1 @@\n-    enum class ResolveComputedStyleMode : bool { Normal, RenderedOnly };\n+    enum class ResolveComputedStyleMode : uint8_t { Normal, RenderedOnly, Editability };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Element.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -354,1 +354,1 @@\n-    auto& context = *scriptExecutionContext();\n+    Ref context = *scriptExecutionContext();\n@@ -357,1 +357,1 @@\n-        InspectorInstrumentation::willDispatchEvent(downcast<Document>(context), event);\n+        InspectorInstrumentation::willDispatchEvent(downcast<Document>(context.get()), event);\n@@ -402,1 +402,1 @@\n-        InspectorInstrumentation::didDispatchEvent(downcast<Document>(context), event);\n+        InspectorInstrumentation::didDispatchEvent(downcast<Document>(context.get()), event);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/EventTarget.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -90,0 +90,1 @@\n+        Ref document { m_document };\n@@ -93,1 +94,1 @@\n-        m_document.eventLoop().queueTask(TaskSource::MediaElement, [weakThis = WTFMove(weakThis)]() mutable {\n+        document->eventLoop().queueTask(TaskSource::MediaElement, [weakThis = WTFMove(weakThis)]() mutable {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/FullscreenManager.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -492,1 +492,1 @@\n-    ScriptExecutionContext* scriptExecutionContext() const final; \/\/ Implemented in Document.h\n+    ScriptExecutionContext* scriptExecutionContext() const final; \/\/ Implemented in DocumentInlines.h.\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Node.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -778,1 +778,2 @@\n-        thread->workerLoaderProxy().postTaskToLoader([callback = WTFMove(callback)](auto&& context) {\n+        if (auto* workerLoaderProxy = thread->workerLoaderProxy()) {\n+            workerLoaderProxy->postTaskToLoader([callback = WTFMove(callback)](auto&& context) {\n@@ -781,0 +782,1 @@\n+        }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/ScriptExecutionContext.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,0 +35,7 @@\n+Ref<XMLDocument> XMLDocument::createXHTML(LocalFrame* frame, const Settings& settings, const URL& url)\n+{\n+    auto document = adoptRef(*new XMLDocument(frame, settings, url, { DocumentClass::XML, DocumentClass::XHTML }));\n+    document->addToContextsMap();\n+    return document;\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/XMLDocument.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -42,6 +42,1 @@\n-    static Ref<XMLDocument> createXHTML(LocalFrame* frame, const Settings& settings, const URL& url)\n-    {\n-        auto document = adoptRef(*new XMLDocument(frame, settings, url, { DocumentClass::XML, DocumentClass::XHTML }));\n-        document->addToContextsMap();\n-        return document;\n-    }\n+    WEBCORE_EXPORT static Ref<XMLDocument> createXHTML(LocalFrame*, const Settings&, const URL&);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/XMLDocument.h","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -83,1 +83,0 @@\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/fileapi\/BlobURL.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -6751,0 +6751,4 @@\n+    auto* page = document().page();\n+    if (!page || page->mediaPlaybackIsSuspended())\n+        return;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLMediaElement.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+#include \"ScriptDisallowedScope.h\"\n@@ -324,1 +325,8 @@\n-    return document().frame()->loader().subframeLoader().requestObject(*this, relativeURL, getNameAttribute(), mimeType, paramNames, paramValues);\n+    Ref document = this->document();\n+    if (ScriptDisallowedScope::InMainThread::isScriptAllowed())\n+        return document->frame()->loader().subframeLoader().requestObject(*this, relativeURL, getNameAttribute(), mimeType, paramNames, paramValues);\n+\n+    document->eventLoop().queueTask(TaskSource::Networking, [this, protectedThis = Ref { *this }, document, relativeURL, nameAttribute = getNameAttribute(), mimeType, paramNames, paramValues]() mutable {\n+        document->frame()->loader().subframeLoader().requestObject(*this, relativeURL, nameAttribute, mimeType, paramNames, paramValues);\n+    });\n+    return true;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLPlugInImageElement.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-    return downcast<Element>(*firstChild());\n+    return checkedDowncast<Element>(*firstChild());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/shadow\/DateTimeEditElement.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-    Ref textNode = downcast<Text>(*firstChild());\n+    Ref textNode = checkedDowncast<Text>(*firstChild());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/shadow\/DateTimeFieldElement.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-    return downcast<HTMLSummaryElement>(shadowHost())->isActiveSummary() && HTMLDivElement::rendererIsNeeded(style);\n+    return checkedDowncast<HTMLSummaryElement>(shadowHost())->isActiveSummary() && HTMLDivElement::rendererIsNeeded(style);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/shadow\/DetailsMarkerControl.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    return downcast<HTMLProgressElement>(shadowHost());\n+    return checkedDowncast<HTMLProgressElement>(shadowHost());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/shadow\/ProgressShadowElement.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-    auto& input = downcast<HTMLInputElement>(*element()->shadowHost());\n+    auto& input = checkedDowncast<HTMLInputElement>(*element()->shadowHost());\n@@ -139,1 +139,1 @@\n-    auto& input = downcast<HTMLInputElement>(*element()->shadowHost());\n+    auto& input = checkedDowncast<HTMLInputElement>(*element()->shadowHost());\n@@ -561,1 +561,1 @@\n-    return downcast<HTMLInputElement>(shadowHost());\n+    return checkedDowncast<HTMLInputElement>(shadowHost());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/shadow\/SliderThumbElement.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+#include <wtf\/RefPtr.h>\n@@ -85,1 +86,2 @@\n-    return is<HTMLInputElement>(element) && downcast<HTMLInputElement>(element)->hasAutoFillStrongPasswordButton();\n+    RefPtr input = dynamicDowncast<HTMLInputElement>(element);\n+    return input && input->hasAutoFillStrongPasswordButton();\n@@ -194,1 +196,1 @@\n-    return downcast<RenderTextControlInnerBlock>(HTMLDivElement::renderer());\n+    return checkedDowncast<RenderTextControlInnerBlock>(HTMLDivElement::renderer());\n@@ -199,1 +201,1 @@\n-    auto style = downcast<HTMLTextFormControlElement>(*shadowHost()).createInnerTextStyle(*shadowHostStyle);\n+    auto style = checkedDowncast<HTMLTextFormControlElement>(*shadowHost()).createInnerTextStyle(*shadowHostStyle);\n@@ -222,2 +224,2 @@\n-    auto& controlElement = downcast<HTMLTextFormControlElement>(*containingShadowRoot()->host());\n-    style.style->setDisplay(controlElement.isPlaceholderVisible() ? DisplayType::Block : DisplayType::None);\n+    Ref controlElement = checkedDowncast<HTMLTextFormControlElement>(*containingShadowRoot()->host());\n+    style.style->setDisplay(controlElement->isPlaceholderVisible() ? DisplayType::Block : DisplayType::None);\n@@ -225,3 +227,2 @@\n-    if (is<HTMLInputElement>(controlElement)) {\n-        auto& inputElement = downcast<HTMLInputElement>(controlElement);\n-        style.style->setTextOverflow(inputElement.shouldTruncateText(*shadowHostStyle) ? TextOverflow::Ellipsis : TextOverflow::Clip);\n+    if (RefPtr inputElement = dynamicDowncast<HTMLInputElement>(controlElement.get())) {\n+        style.style->setTextOverflow(inputElement->shouldTruncateText(*shadowHostStyle) ? TextOverflow::Ellipsis : TextOverflow::Clip);\n@@ -274,1 +275,1 @@\n-    RefPtr input = downcast<HTMLInputElement>(shadowHost());\n+    RefPtr input = checkedDowncast<HTMLInputElement>(shadowHost());\n@@ -326,2 +327,2 @@\n-    auto& inputElement = downcast<HTMLInputElement>(*shadowHost());\n-    elementStyle.style->setVisibility(elementStyle.style->visibility() == Visibility::Hidden || inputElement.value().isEmpty() ? Visibility::Hidden : Visibility::Visible);\n+    Ref inputElement = checkedDowncast<HTMLInputElement>(*shadowHost());\n+    elementStyle.style->setVisibility(elementStyle.style->visibility() == Visibility::Hidden || inputElement->value().isEmpty() ? Visibility::Hidden : Visibility::Visible);\n@@ -337,1 +338,1 @@\n-    RefPtr<HTMLInputElement> input(downcast<HTMLInputElement>(shadowHost()));\n+    RefPtr input = checkedDowncast<HTMLInputElement>(shadowHost());\n@@ -364,1 +365,1 @@\n-    const RefPtr<HTMLInputElement> input = downcast<HTMLInputElement>(shadowHost());\n+    RefPtr input = checkedDowncast<HTMLInputElement>(shadowHost());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/shadow\/TextControlInnerElements.cpp","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -313,0 +313,13 @@\n+    auto isValidDamage = [&] {\n+        \/\/ Check for consistency.\n+        if (!damagedLine->leadingInlineItemPosition) {\n+            \/\/ We have to start at the first line if damage points to the leading inline item.\n+            return !damagedLine->index;\n+        }\n+        return true;\n+    };\n+    if (!isValidDamage()) {\n+        ASSERT_NOT_REACHED();\n+        m_inlineDamage.reset();\n+        return;\n+    }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/layout\/formattingContexts\/inline\/invalidation\/InlineInvalidation.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -71,0 +71,5 @@\n+        if (layoutResult.displayContent.boxes.size() && canidateLineIndex > layoutResult.displayContent.boxes[0].lineIndex()) {\n+            \/\/ We should never generate lines _before_ the damaged line.\n+            ASSERT_NOT_REACHED();\n+            return { };\n+        }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/layout\/integration\/inline\/LayoutIntegrationInlineContentBuilder.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -279,0 +279,29 @@\n+struct ForbidCopyPasteScope : public PageLevelForbidScope {\n+    explicit ForbidCopyPasteScope(Page* page)\n+        : PageLevelForbidScope(page)\n+        , m_oldDOMPasteAllowed(page->settings().domPasteAllowed())\n+        , m_oldJavaScriptCanAccessClipboard(page->settings().javaScriptCanAccessClipboard())\n+        , m_oldClipboardAccessPolicy(page->settings().clipboardAccessPolicy())\n+    {\n+        if (m_page) {\n+            m_page->settings().setDOMPasteAllowed(false);\n+            m_page->settings().setJavaScriptCanAccessClipboard(false);\n+            m_page->settings().setClipboardAccessPolicy(ClipboardAccessPolicy::Deny);\n+        }\n+    }\n+\n+    ~ForbidCopyPasteScope()\n+    {\n+        if (m_page) {\n+            m_page->settings().setDOMPasteAllowed(m_oldDOMPasteAllowed);\n+            m_page->settings().setJavaScriptCanAccessClipboard(m_oldJavaScriptCanAccessClipboard);\n+            m_page->settings().setClipboardAccessPolicy(m_oldClipboardAccessPolicy);\n+        }\n+    }\n+private:\n+    bool m_oldDOMPasteAllowed;\n+    bool m_oldJavaScriptCanAccessClipboard;\n+    ClipboardAccessPolicy m_oldClipboardAccessPolicy;\n+};\n+\n+\n@@ -3586,0 +3615,1 @@\n+        ForbidCopyPasteScope forbidCopyPaste(m_frame.page());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/FrameLoader.cpp","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -727,0 +727,3 @@\n+\n+    Ref protectedThis { *this };\n+\n@@ -728,5 +731,3 @@\n-    ASSERT(!m_resource->resourceToRevalidate());\n-    \/\/ FIXME (129394): We should cancel the load when a decode error occurs instead of continuing the load to completion.\n-    ASSERT(!m_resource->errorOccurred() || m_resource->status() == CachedResource::DecodeError || !m_resource->isLoading());\n-    LOG(ResourceLoading, \"Received '%s'.\", m_resource->url().string().latin1().data());\n-    logResourceLoaded(m_frame.get(), m_resource->type());\n+    CachedResourceHandle resource = m_resource.get();\n+    if (!resource)\n+        return;\n@@ -734,2 +735,5 @@\n-    Ref<SubresourceLoader> protectedThis(*this);\n-    CachedResourceHandle<CachedResource> protectResource(m_resource.get());\n+    ASSERT(!resource->resourceToRevalidate());\n+    \/\/ FIXME (129394): We should cancel the load when a decode error occurs instead of continuing the load to completion.\n+    ASSERT(!resource->errorOccurred() || resource->status() == CachedResource::DecodeError || !resource->isLoading());\n+    LOG(ResourceLoading, \"Received '%s'.\", resource->url().string().latin1().data());\n+    logResourceLoaded(m_frame.get(), resource->type());\n@@ -745,1 +749,1 @@\n-        const auto* timing = m_resource->response().deprecatedNetworkLoadMetricsOrNull();\n+        const auto* timing = resource->response().deprecatedNetworkLoadMetricsOrNull();\n@@ -749,1 +753,1 @@\n-    if (m_resource->type() != CachedResource::Type::MainResource)\n+    if (resource->type() != CachedResource::Type::MainResource)\n@@ -753,1 +757,1 @@\n-    m_resource->finishLoading(resourceData(), networkLoadMetrics);\n+    resource->finishLoading(resourceData(), networkLoadMetrics);\n@@ -760,1 +764,1 @@\n-    m_resource->finish();\n+    resource->finish();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/SubresourceLoader.cpp","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-WorkerThreadableLoader::MainThreadBridge::MainThreadBridge(ThreadableLoaderClientWrapper& workerClientWrapper, WorkerLoaderProxy& loaderProxy, ScriptExecutionContextIdentifier contextIdentifier, const String& taskMode,\n+WorkerThreadableLoader::MainThreadBridge::MainThreadBridge(ThreadableLoaderClientWrapper& workerClientWrapper, WorkerLoaderProxy* loaderProxy, ScriptExecutionContextIdentifier contextIdentifier, const String& taskMode,\n@@ -119,0 +119,1 @@\n+    ASSERT(m_loaderProxy);\n@@ -127,1 +128,1 @@\n-    if (auto* client = m_loaderProxy.reportingClient())\n+    if (auto* client = m_loaderProxy ? m_loaderProxy->reportingClient() : nullptr)\n@@ -147,1 +148,1 @@\n-        optionsCopy->options.serviceWorkerRegistrationIdentifier = activeServiceWorker->registrationIdentifier();\n+            optionsCopy->options.serviceWorkerRegistrationIdentifier = activeServiceWorker->registrationIdentifier();\n@@ -161,0 +162,3 @@\n+    if (!m_loaderProxy)\n+        return;\n+\n@@ -162,1 +166,1 @@\n-    m_loaderProxy.postTaskToLoader([this, request = WTFMove(request).isolatedCopy(), options = WTFMove(optionsCopy), contentSecurityPolicyIsolatedCopy = WTFMove(contentSecurityPolicyIsolatedCopy), crossOriginEmbedderPolicyCopy = WTFMove(crossOriginEmbedderPolicyCopy)](ScriptExecutionContext& context) mutable {\n+    m_loaderProxy->postTaskToLoader([this, request = WTFMove(request).isolatedCopy(), options = WTFMove(optionsCopy), contentSecurityPolicyIsolatedCopy = WTFMove(contentSecurityPolicyIsolatedCopy), crossOriginEmbedderPolicyCopy = WTFMove(crossOriginEmbedderPolicyCopy)](ScriptExecutionContext& context) mutable {\n@@ -178,0 +182,3 @@\n+    if (!m_loaderProxy)\n+        return;\n+\n@@ -179,1 +186,1 @@\n-    m_loaderProxy.postTaskToLoader([self = std::unique_ptr<WorkerThreadableLoader::MainThreadBridge>(this)] (ScriptExecutionContext& context) {\n+    m_loaderProxy->postTaskToLoader([self = std::unique_ptr<WorkerThreadableLoader::MainThreadBridge>(this)] (ScriptExecutionContext& context) {\n@@ -189,9 +196,11 @@\n-    m_loaderProxy.postTaskToLoader([this] (ScriptExecutionContext& context) {\n-        ASSERT(isMainThread());\n-        ASSERT_UNUSED(context, context.isDocument());\n-\n-        if (!m_mainThreadLoader)\n-            return;\n-        m_mainThreadLoader->cancel();\n-        m_mainThreadLoader = nullptr;\n-    });\n+    if (m_loaderProxy) {\n+        m_loaderProxy->postTaskToLoader([this] (ScriptExecutionContext& context) {\n+            ASSERT(isMainThread());\n+            ASSERT_UNUSED(context, context.isDocument());\n+\n+            if (!m_mainThreadLoader)\n+                return;\n+            m_mainThreadLoader->cancel();\n+            m_mainThreadLoader = nullptr;\n+        });\n+    }\n@@ -210,1 +219,4 @@\n-    m_loaderProxy.postTaskToLoader([this](auto&) {\n+    if (!m_loaderProxy)\n+        return;\n+\n+    m_loaderProxy->postTaskToLoader([this](auto&) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/WorkerThreadableLoader.cpp","additions":27,"deletions":15,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-        MainThreadBridge(ThreadableLoaderClientWrapper&, WorkerLoaderProxy&, ScriptExecutionContextIdentifier, const String& taskMode, ResourceRequest&&, const ThreadableLoaderOptions&, const String& outgoingReferrer, WorkerOrWorkletGlobalScope&);\n+        MainThreadBridge(ThreadableLoaderClientWrapper&, WorkerLoaderProxy*, ScriptExecutionContextIdentifier, const String& taskMode, ResourceRequest&&, const ThreadableLoaderOptions&, const String& outgoingReferrer, WorkerOrWorkletGlobalScope&);\n@@ -123,1 +123,1 @@\n-        WorkerLoaderProxy& m_loaderProxy;\n+        WorkerLoaderProxy* m_loaderProxy;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/WorkerThreadableLoader.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-        m_decodedSheetText = m_decoder->decodeAndFlush(contiguousData->data(), data->size());\n+        m_decodedSheetText = protectedDecoder()->decodeAndFlush(contiguousData->data(), data->size());\n@@ -119,0 +119,5 @@\n+Ref<TextResourceDecoder> CachedCSSStyleSheet::protectedDecoder() const\n+{\n+    return m_decoder;\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/cache\/CachedCSSStyleSheet.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+    Ref<TextResourceDecoder> protectedDecoder() const;\n@@ -57,1 +58,1 @@\n-    const TextResourceDecoder* textResourceDecoder() const final { return m_decoder.get(); }\n+    const TextResourceDecoder* textResourceDecoder() const final { return m_decoder.ptr(); }\n@@ -65,1 +66,1 @@\n-    RefPtr<TextResourceDecoder> m_decoder;\n+    Ref<TextResourceDecoder> m_decoder;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/cache\/CachedCSSStyleSheet.h","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -689,1 +689,4 @@\n-        downcast<WorkerGlobalScope>(context).thread().workerLoaderProxy().postTaskToLoader([request = request.isolatedCopy()] (ScriptExecutionContext& context) {\n+        auto* workerLoaderProxy = downcast<WorkerGlobalScope>(context).thread().workerLoaderProxy();\n+        if (!workerLoaderProxy)\n+            return;\n+        workerLoaderProxy->postTaskToLoader([request = request.isolatedCopy()] (ScriptExecutionContext& context) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/cache\/MemoryCache.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -181,0 +181,6 @@\n+#if PLATFORM(GTK) || PLATFORM(WPE)\n+        || url.protocolIs(\"resource\"_s)\n+#endif\n+#if ENABLE(PDFJS)\n+        || url.protocolIs(\"webkit-pdfjs-viewer\"_s)\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/SecurityOrigin.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -69,1 +69,2 @@\n-    scope->thread().workerBadgeProxy().setAppBadge(badge);\n+    if (auto* workerBadgeProxy = scope->thread().workerBadgeProxy())\n+        workerBadgeProxy->setAppBadge(badge);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/WorkerNavigator.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"SharedBuffer.h\"\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/Pasteboard.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"SharedBuffer.h\"\n@@ -68,1 +69,0 @@\n-class SharedBuffer;\n@@ -303,0 +303,6 @@\n+#if PLATFORM(MAC)\n+    WEBCORE_EXPORT static RefPtr<SharedBuffer> bufferConvertedToPasteboardType(const PasteboardBuffer&, const String& pasteboardType);\n+#else\n+    static RefPtr<SharedBuffer> bufferConvertedToPasteboardType(const PasteboardBuffer& pasteboardBuffer, const String&) { return pasteboardBuffer.data; };\n+#endif\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/Pasteboard.h","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+struct PasteboardBuffer;\n@@ -75,1 +76,1 @@\n-    WEBCORE_EXPORT RefPtr<SharedBuffer> bufferForType(const String& pasteboardType) const;\n+    WEBCORE_EXPORT PasteboardBuffer bufferForType(const String& pasteboardType) const;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/PlatformPasteboard.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include <span>\n@@ -75,0 +76,2 @@\n+    std::span<T> span() { return { data(), size() }; }\n+    std::span<const T> span() const { return { data(), size() }; }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/audio\/AudioArray.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -547,2 +547,2 @@\n-    int sourceLength = resamplerSourceBus->length();\n-    int destinationLength = sourceLength \/ sampleRateRatio;\n+    size_t sourceLength = resamplerSourceBus->length();\n+    size_t destinationLength = sourceLength \/ sampleRateRatio;\n@@ -556,4 +556,3 @@\n-        const float* source = resamplerSourceBus->channel(i)->data();\n-        float* destination = destinationBus->channel(i)->mutableData();\n-\n-        SincResampler::processBuffer(source, destination, sourceLength, sampleRateRatio);\n+        auto* sourceChannel = resamplerSourceBus->channel(i);\n+        auto* destinationChannel = destinationBus->channel(i);\n+        SincResampler::processBuffer(sourceChannel->span(), destinationChannel->mutableSpan(), sampleRateRatio);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/audio\/AudioBus.cpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include <span>\n@@ -84,0 +85,3 @@\n+    std::span<const float> span() const { return { data(), length() }; }\n+    std::span<float> mutableSpan() { return { mutableData(), length() }; }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/audio\/AudioChannel.h","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include <wtf\/Algorithms.h>\n@@ -69,1 +70,1 @@\n-        m_kernels[0]->process(destination->channel(0)->mutableData(), framesToProcess);\n+        m_kernels[0]->process(destination->channel(0)->mutableSpan(), framesToProcess);\n@@ -83,1 +84,2 @@\n-            m_kernels[channelIndex]->process(destination->channel(channelIndex)->mutableData() + m_outputFramesReady, framesThisTime);\n+            auto* channel = destination->channel(channelIndex);\n+            m_kernels[channelIndex]->process(channel->mutableSpan().subspan(m_outputFramesReady), framesThisTime);\n@@ -90,1 +92,1 @@\n-void MultiChannelResampler::provideInputForChannel(float* buffer, size_t framesToProcess, unsigned channelIndex)\n+void MultiChannelResampler::provideInputForChannel(std::span<float> buffer, size_t framesToProcess, unsigned channelIndex)\n@@ -98,1 +100,2 @@\n-        m_multiChannelBus->setChannelMemory(0, buffer, framesToProcess);\n+        RELEASE_ASSERT(framesToProcess <= buffer.size());\n+        m_multiChannelBus->setChannelMemory(0, buffer.data(), framesToProcess);\n@@ -104,1 +107,1 @@\n-    memcpy(buffer, m_multiChannelBus->channel(channelIndex)->data(), sizeof(float) * framesToProcess);\n+    memcpySpan(buffer.subspan(0, framesToProcess), m_multiChannelBus->channel(channelIndex)->span().subspan(0, framesToProcess));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/audio\/MultiChannelResampler.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    void provideInputForChannel(float* buffer, size_t framesToProcess, unsigned channelIndex);\n+    void provideInputForChannel(std::span<float> buffer, size_t framesToProcess, unsigned channelIndex);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/audio\/MultiChannelResampler.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+#include <wtf\/Algorithms.h>\n@@ -128,1 +129,1 @@\n-SincResampler::SincResampler(double scaleFactor, unsigned requestFrames, Function<void(float* buffer, size_t framesToProcess)>&& provideInput)\n+SincResampler::SincResampler(double scaleFactor, unsigned requestFrames, Function<void(std::span<float> buffer, size_t framesToProcess)>&& provideInput)\n@@ -134,2 +135,2 @@\n-    , m_r1(m_inputBuffer.data())\n-    , m_r2(m_inputBuffer.data() + kernelSize \/ 2)\n+    , m_r1(m_inputBuffer.data(), m_inputBuffer.size())\n+    , m_r2(m_inputBuffer.span().subspan(kernelSize \/ 2))\n@@ -148,4 +149,4 @@\n-    m_r0 = m_inputBuffer.data() + (isSecondLoad ? kernelSize : kernelSize \/ 2);\n-    m_r3 = m_r0 + m_requestFrames - kernelSize;\n-    m_r4 = m_r0 + m_requestFrames - kernelSize \/ 2;\n-    m_blockSize = m_r4 - m_r2;\n+    m_r0 = m_inputBuffer.span().subspan(isSecondLoad ? kernelSize : kernelSize \/ 2);\n+    m_r3 = m_r0.subspan(m_requestFrames - kernelSize);\n+    m_r4 = m_r0.subspan(m_requestFrames - kernelSize \/ 2);\n+    m_blockSize = std::distance(m_r2.begin(), m_r4.begin());\n@@ -155,1 +156,1 @@\n-    ASSERT(m_r1 == m_inputBuffer.data());\n+    ASSERT(m_r1.data() == m_inputBuffer.data());\n@@ -157,1 +158,1 @@\n-    ASSERT((m_r2 - m_r1) == (m_r4 - m_r3));\n+    ASSERT(std::distance(m_r1.begin(), m_r2.begin()) == std::distance(m_r3.begin(), m_r4.begin()));\n@@ -159,1 +160,1 @@\n-    ASSERT(m_r2 <= m_r3);\n+    ASSERT(m_r2.begin() <= m_r3.begin());\n@@ -203,1 +204,1 @@\n-void SincResampler::processBuffer(const float* source, float* destination, unsigned numberOfSourceFrames, double scaleFactor)\n+void SincResampler::processBuffer(std::span<const float> source, std::span<float> destination, double scaleFactor)\n@@ -205,1 +206,2 @@\n-    SincResampler resampler(scaleFactor, AudioUtilities::renderQuantumSize, [source, numberOfSourceFrames](float* buffer, size_t framesToProcess) mutable {\n+    RELEASE_ASSERT(destination.size() == static_cast<size_t>(source.size() \/ scaleFactor));\n+    SincResampler resampler(scaleFactor, AudioUtilities::renderQuantumSize, [&source](std::span<float> buffer, size_t framesToProcess) mutable {\n@@ -207,2 +209,5 @@\n-        size_t framesToCopy = std::min<size_t>(numberOfSourceFrames, framesToProcess);\n-        memcpy(buffer, source, sizeof(float) * framesToCopy);\n+        size_t framesToCopy = std::min(source.size(), framesToProcess);\n+\n+        IGNORE_WARNINGS_BEGIN(\"restrict\")\n+        memcpySpan(buffer.subspan(0, framesToCopy), source.subspan(0, framesToCopy));\n+        IGNORE_WARNINGS_END\n@@ -212,1 +217,1 @@\n-            memset(buffer + framesToCopy, 0, sizeof(float) * (framesToProcess - framesToCopy));\n+            memsetSpan(buffer.subspan(framesToCopy, framesToProcess - framesToCopy), 0);\n@@ -214,2 +219,1 @@\n-        numberOfSourceFrames -= framesToCopy;\n-        source += framesToCopy;\n+        source = source.subspan(framesToCopy);\n@@ -218,5 +222,2 @@\n-    unsigned numberOfDestinationFrames = static_cast<unsigned>(numberOfSourceFrames \/ scaleFactor);\n-    unsigned remaining = numberOfDestinationFrames;\n-\n-    while (remaining) {\n-        unsigned framesThisTime = std::min<unsigned>(remaining, AudioUtilities::renderQuantumSize);\n+    while (!destination.empty()) {\n+        unsigned framesThisTime = std::min<size_t>(destination.size(), AudioUtilities::renderQuantumSize);\n@@ -224,3 +225,1 @@\n-\n-        destination += framesThisTime;\n-        remaining -= framesThisTime;\n+        destination = destination.subspan(framesThisTime);\n@@ -230,1 +229,1 @@\n-void SincResampler::process(float* destination, size_t framesToProcess)\n+void SincResampler::process(std::span<float> destination, size_t framesToProcess)\n@@ -243,0 +242,1 @@\n+    size_t destinationIndex = 0;\n@@ -252,2 +252,2 @@\n-            float* k1 = m_kernelStorage.data() + offsetIndex * kernelSize;\n-            float* k2 = k1 + kernelSize;\n+            auto k1 = m_kernelStorage.span().subspan(offsetIndex * kernelSize);\n+            auto k2 = k1.subspan(kernelSize);\n@@ -256,2 +256,2 @@\n-            ASSERT(!(reinterpret_cast<uintptr_t>(k1) & 0x0F));\n-            ASSERT(!(reinterpret_cast<uintptr_t>(k2) & 0x0F));\n+            ASSERT(!(reinterpret_cast<uintptr_t>(k1.data()) & 0x0F));\n+            ASSERT(!(reinterpret_cast<uintptr_t>(k2.data()) & 0x0F));\n@@ -260,1 +260,1 @@\n-            float* inputP = m_r1 + sourceIndexI;\n+            auto inputP = m_r1.subspan(sourceIndexI);\n@@ -265,1 +265,1 @@\n-            *destination++ = convolve(inputP, k1, k2, kernelInterpolationFactor);\n+            destination[destinationIndex++] = convolve(inputP.data(), k1.data(), k2.data(), kernelInterpolationFactor);\n@@ -281,1 +281,1 @@\n-        memcpy(m_r1, m_r3, sizeof(float) * kernelSize);\n+        memcpySpan(m_r1.subspan(0, kernelSize), m_r3.subspan(0, kernelSize));\n@@ -284,1 +284,1 @@\n-        if (m_r0 == m_r2)\n+        if (m_r0.data() == m_r2.data())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/audio\/SincResampler.cpp","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include <span>\n@@ -46,1 +47,1 @@\n-    SincResampler(double scaleFactor, unsigned requestFrames, Function<void(float* buffer, size_t framesToProcess)>&& provideInput);\n+    SincResampler(double scaleFactor, unsigned requestFrames, Function<void(std::span<float> buffer, size_t framesToProcess)>&& provideInput);\n@@ -50,2 +51,2 @@\n-    \/\/ Processes numberOfSourceFrames from source to produce numberOfSourceFrames \/ scaleFactor frames in destination.\n-    WEBCORE_EXPORT static void processBuffer(const float* source, float* destination, unsigned numberOfSourceFrames, double scaleFactor);\n+    \/\/ Processes samples in `source` to produce source.size() \/ scaleFactor frames in `destination`.\n+    WEBCORE_EXPORT static void processBuffer(std::span<const float> source, std::span<float> destination, double scaleFactor);\n@@ -54,1 +55,1 @@\n-    void process(float* destination, size_t framesToProcess);\n+    void process(std::span<float> destination, size_t framesToProcess);\n@@ -56,1 +57,1 @@\n-protected:\n+private:\n@@ -75,1 +76,1 @@\n-    Function<void(float* buffer, size_t framesToProcess)> m_provideInput;\n+    Function<void(std::span<float> buffer, size_t framesToProcess)> m_provideInput;\n@@ -78,1 +79,1 @@\n-    unsigned m_blockSize { 0 };\n+    size_t m_blockSize { 0 };\n@@ -85,1 +86,1 @@\n-    \/\/ Pointers to the various regions inside |m_inputBuffer|. See the diagram at\n+    \/\/ Spans to the various regions inside |m_inputBuffer|. See the diagram at\n@@ -87,5 +88,5 @@\n-    float* m_r0 { nullptr };\n-    float* const m_r1 { nullptr };\n-    float* const m_r2 { nullptr };\n-    float* m_r3 { nullptr };\n-    float* m_r4 { nullptr };\n+    std::span<float> m_r0;\n+    const std::span<float> m_r1;\n+    const std::span<float> m_r2;\n+    std::span<float> m_r3;\n+    std::span<float> m_r4;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/audio\/SincResampler.h","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -526,1 +526,1 @@\n-    callOnMainThread([weakThis = WeakPtr { *this }, callback = WTFMove(callback), &keyStatusVector]() mutable {\n+    callOnMainThread([weakThis = WeakPtr { *this }, callback = WTFMove(callback), keyStatusVector = WTFMove(keyStatusVector)]() mutable {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/encryptedmedia\/clearkey\/CDMClearKey.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-    float letterSpacing() const { return m_letterSpacing; }\n+    float letterSpacing() const { return std::isnan(m_letterSpacing) ? 0.0f : m_letterSpacing; }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/FontCascade.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-            return fontFamilySpecification.fontRanges(description);\n+            return { fontFamilySpecification.fontRanges(description), true };\n@@ -457,0 +457,9 @@\n+    \/\/ https:\/\/drafts.csswg.org\/css-fonts-4\/#char-handling-issues\n+    \/\/ \"If a given character is a Private-Use Area Unicode codepoint, user agents must only match font families named in the font-family list that are not generic families. If none of the families named in the font-family list contain a glyph for that codepoint, user agents must display some form of missing glyph symbol for that character rather than attempting installed font fallback for that codepoint.\"\n+    if (isPrivateUseAreaCharacter(character)) {\n+        auto font = FontCache::forCurrentThread().lastResortFallbackFont(description);\n+        GlyphData glyphData(0, font.ptr());\n+        m_systemFallbackFontSet.add(WTFMove(font));\n+        return glyphData; \/\/ 0 is the font's reserved .notdef glyph\n+    }\n+\n@@ -515,1 +524,1 @@\n-    if (!glyphData.glyph) {\n+    if (!glyphData.font) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/FontCascadeFonts.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"platform\/text\/CharacterProperties.h\"\n@@ -41,1 +42,5 @@\n-FontRanges::FontRanges() = default;\n+FontRanges::FontRanges(FontRanges&& other, bool isGeneric)\n+: m_ranges { WTFMove(other.m_ranges) }\n+, m_isGeneric { isGeneric }\n+{\n+}\n@@ -80,0 +85,3 @@\n+    if (isGeneric() && isPrivateUseAreaCharacter(character))\n+        return GlyphData();\n+\n@@ -89,1 +97,1 @@\n-                    if (glyphData.glyph) {\n+                    if (glyphData.font) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/FontRanges.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-    FontRanges();\n+    FontRanges() = default;\n@@ -78,0 +78,1 @@\n+    FontRanges(FontRanges&& other, bool isGeneric);\n@@ -92,0 +93,1 @@\n+    bool isGeneric() const { return m_isGeneric; }\n@@ -95,0 +97,1 @@\n+    bool m_isGeneric { false };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/FontRanges.h","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -421,1 +421,4 @@\n-        const Font* font = fallbackRangesAt(i).fontForCharacter(baseCharacter);\n+        auto& fontRanges = fallbackRangesAt(i);\n+        if (fontRanges.isGeneric() && isPrivateUseAreaCharacter(baseCharacter))\n+            continue;\n+        const Font* font = fontRanges.fontForCharacter(baseCharacter);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/coretext\/FontCascadeCoreText.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -353,2 +353,1 @@\n-    return equalLettersIgnoringASCIICase(familyNameString, \"sans\"_s)\n-        || equalLettersIgnoringASCIICase(familyNameString, \"sans-serif\"_s)\n+    return equalLettersIgnoringASCIICase(familyNameString, \"sans-serif\"_s)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/freetype\/FontCacheFreeType.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"CairoUtilities.h\"\n@@ -902,1 +903,1 @@\n-        uintptr_t nativeImageID = reinterpret_cast<uintptr_t>(m_compositedNativeImage->platformImage().get());\n+        uintptr_t nativeImageID = getSurfaceUniqueID(m_compositedNativeImage->platformImage().get());\n@@ -922,1 +923,1 @@\n-        if (layerState.update.isVisible && layerState.update.nativeImageID != nativeImageID) {\n+        if (layerState.update.isVisible && (!nativeImageID || layerState.update.nativeImageID != nativeImageID)) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/texmap\/coordinated\/CoordinatedGraphicsLayer.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -101,0 +101,6 @@\n+inline bool isPrivateUseAreaCharacter(UChar32 character)\n+{\n+    auto block = ublock_getCode(character);\n+    return block == UBLOCK_PRIVATE_USE_AREA || block == UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_A || block == UBLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_B;\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/text\/CharacterProperties.h","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -222,1 +222,4 @@\n-    RenderMultiColumnSet* columnSet = m_lastSetWorkedOn ? m_lastSetWorkedOn : firstMultiColumnSet();\n+    if (m_lastSetWorkedOn && m_lastSetWorkedOn->fragmentedFlow() != this)\n+        m_lastSetWorkedOn = nullptr;\n+\n+    RenderMultiColumnSet* columnSet = m_lastSetWorkedOn ? m_lastSetWorkedOn.get() : firstMultiColumnSet();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderMultiColumnFlow.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -123,1 +123,1 @@\n-    RenderMultiColumnSet* m_lastSetWorkedOn { nullptr };\n+    mutable WeakPtr<RenderMultiColumnSet> m_lastSetWorkedOn { nullptr };\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderMultiColumnFlow.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"FullscreenManager.h\"\n@@ -179,1 +178,1 @@\n-static bool contentSizeAlmostEqualsFrameSize(const IntSize& frameContentsSize, const LayoutSize& contentSize, float deviceScaleFactor)\n+static bool areAspectRatiosEssentiallyEqual(const LayoutSize& intrinsicSize, const LayoutSize& contentSize, float deviceScaleFactor)\n@@ -181,2 +180,1 @@\n-    LayoutUnit pointSizeLayoutUnits = LayoutUnit(deviceScaleFactor);\n-    return absoluteValue(frameContentsSize.width() - contentSize.width()) <= pointSizeLayoutUnits && absoluteValue(frameContentsSize.height() - contentSize.height()) <= pointSizeLayoutUnits;\n+    return WTF::areEssentiallyEqual(intrinsicSize.aspectRatio(), contentSize.aspectRatio(), deviceScaleFactor \/ std::min<LayoutUnit>(contentSize.width(), contentSize.height()));\n@@ -196,1 +194,1 @@\n-    if (inElementOrVideoFullscreen() && contentSizeAlmostEqualsFrameSize(view().frameView().layoutSize(), contentSize(), page().deviceScaleFactor()))\n+    if (videoElement().isFullscreen() && areAspectRatiosEssentiallyEqual(intrinsicSize, contentSize(), page().deviceScaleFactor()))\n@@ -299,9 +297,0 @@\n-bool RenderVideo::inElementOrVideoFullscreen() const\n-{\n-    bool result = videoElement().isFullscreen();\n-#if ENABLE(FULLSCREEN_API)\n-    result = result || document().fullscreenManager().isFullscreen();\n-#endif\n-    return result;\n-}\n-\n@@ -324,1 +313,1 @@\n-    bool fitToFillInFullscreen = inElementOrVideoFullscreen() && contentSizeAlmostEqualsFrameSize(view().frameView().layoutSize(), contentSize(), page().deviceScaleFactor());\n+    bool fitToFillInFullscreen = videoElement().isFullscreen() && areAspectRatiosEssentiallyEqual(intrinsicSize(), contentSize(), page().deviceScaleFactor());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderVideo.cpp","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -89,1 +89,0 @@\n-    bool inElementOrVideoFullscreen() const;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/RenderVideo.h","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -140,0 +140,6 @@\n+void RenderSVGResource::removeAllClientsFromCache(bool markForInvalidation)\n+{\n+    WeakHashSet<RenderObject> visitedRenderers;\n+    removeAllClientsFromCacheIfNeeded(markForInvalidation, &visitedRenderers);\n+}\n+\n@@ -158,1 +164,1 @@\n-static void removeFromCacheAndInvalidateDependencies(RenderElement& renderer, bool needsLayout)\n+static void removeFromCacheAndInvalidateDependencies(RenderElement& renderer, bool needsLayout, WeakHashSet<RenderObject>* visitedRenderers)\n@@ -185,1 +191,1 @@\n-            RenderSVGResource::markForLayoutAndParentResourceInvalidation(*renderer, needsLayout);\n+            RenderSVGResource::markForLayoutAndParentResourceInvalidationIfNeeded(*renderer, needsLayout, visitedRenderers);\n@@ -198,0 +204,6 @@\n+{\n+    WeakHashSet<RenderObject> visitedRenderers;\n+    markForLayoutAndParentResourceInvalidationIfNeeded(object, needsLayout, &visitedRenderers);\n+}\n+\n+void RenderSVGResource::markForLayoutAndParentResourceInvalidationIfNeeded(RenderObject& object, bool needsLayout, WeakHashSet<RenderObject>* visitedRenderers)\n@@ -201,0 +213,6 @@\n+    if (visitedRenderers) {\n+        auto addResult = visitedRenderers->add(object);\n+        if (!addResult.isNewEntry)\n+            return;\n+    }\n+\n@@ -229,1 +247,1 @@\n-        removeFromCacheAndInvalidateDependencies(downcast<RenderElement>(object), needsLayout);\n+        removeFromCacheAndInvalidateDependencies(downcast<RenderElement>(object), needsLayout, visitedRenderers);\n@@ -234,1 +252,1 @@\n-        removeFromCacheAndInvalidateDependencies(*current, needsLayout);\n+        removeFromCacheAndInvalidateDependencies(*current, needsLayout, visitedRenderers);\n@@ -238,1 +256,2 @@\n-            downcast<RenderSVGResourceContainer>(*current).removeAllClientsFromCache();\n+            bool markForInvalidation = true;\n+            downcast<RenderSVGResourceContainer>(*current).removeAllClientsFromCacheIfNeeded(markForInvalidation, visitedRenderers);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/svg\/RenderSVGResource.cpp","additions":24,"deletions":5,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -23,0 +23,1 @@\n+#include <wtf\/WeakHashSet.h>\n@@ -60,1 +61,2 @@\n-    virtual void removeAllClientsFromCache(bool markForInvalidation = true) = 0;\n+    void removeAllClientsFromCache(bool markForInvalidation = true);\n+    virtual void removeAllClientsFromCacheIfNeeded(bool markForInvalidation, WeakHashSet<RenderObject>* visitedRenderers) = 0;\n@@ -75,0 +77,1 @@\n+    static void markForLayoutAndParentResourceInvalidationIfNeeded(RenderObject&, bool needsLayout, WeakHashSet<RenderObject>* visitedRenderers);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/svg\/RenderSVGResource.h","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-void RenderSVGResourceClipper::removeAllClientsFromCache(bool markForInvalidation)\n+void RenderSVGResourceClipper::removeAllClientsFromCacheIfNeeded(bool markForInvalidation, WeakHashSet<RenderObject>* visitedRenderers)\n@@ -65,1 +65,1 @@\n-    markAllClientsForInvalidation(markForInvalidation ? LayoutAndBoundariesInvalidation : ParentOnlyInvalidation);\n+    markAllClientsForInvalidationIfNeeded(markForInvalidation ? LayoutAndBoundariesInvalidation : ParentOnlyInvalidation, visitedRenderers);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/svg\/RenderSVGResourceClipper.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    void removeAllClientsFromCache(bool markForInvalidation = true) override;\n+    void removeAllClientsFromCacheIfNeeded(bool markForInvalidation, WeakHashSet<RenderObject>* visitedRenderers) override;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/svg\/RenderSVGResourceClipper.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,0 +96,6 @@\n+{\n+    WeakHashSet<RenderObject> visitedRenderers;\n+    markAllClientsForInvalidationIfNeeded(mode, &visitedRenderers);\n+}\n+\n+void RenderSVGResourceContainer::markAllClientsForInvalidationIfNeeded(InvalidationMode mode, WeakHashSet<RenderObject>* visitedRenderers)\n@@ -114,1 +120,1 @@\n-            downcast<RenderSVGResourceContainer>(*client).removeAllClientsFromCache(markForInvalidation);\n+            downcast<RenderSVGResourceContainer>(*client).removeAllClientsFromCacheIfNeeded(markForInvalidation, visitedRenderers);\n@@ -121,1 +127,1 @@\n-        RenderSVGResource::markForLayoutAndParentResourceInvalidation(*client, needsLayout);\n+        RenderSVGResource::markForLayoutAndParentResourceInvalidationIfNeeded(*client, needsLayout, visitedRenderers);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/svg\/RenderSVGResourceContainer.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+    void markAllClientsForInvalidationIfNeeded(InvalidationMode, WeakHashSet<RenderObject>* visitedRenderers);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/svg\/RenderSVGResourceContainer.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-void RenderSVGResourceFilter::removeAllClientsFromCache(bool markForInvalidation)\n+void RenderSVGResourceFilter::removeAllClientsFromCacheIfNeeded(bool markForInvalidation, WeakHashSet<RenderObject>* visitedRenderers)\n@@ -59,1 +59,1 @@\n-    LOG(Filters, \"RenderSVGResourceFilter %p removeAllClientsFromCache\", this);\n+    LOG(Filters, \"RenderSVGResourceFilter %p removeAllClientsFromCacheIfNeeded\", this);\n@@ -63,1 +63,1 @@\n-    markAllClientsForInvalidation(markForInvalidation ? LayoutAndBoundariesInvalidation : ParentOnlyInvalidation);\n+    markAllClientsForInvalidationIfNeeded(markForInvalidation ? LayoutAndBoundariesInvalidation : ParentOnlyInvalidation, visitedRenderers);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/svg\/RenderSVGResourceFilter.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-    void removeAllClientsFromCache(bool markForInvalidation = true) override;\n+    void removeAllClientsFromCacheIfNeeded(bool markForInvalidation, WeakHashSet<RenderObject>* visitedRenderers) override;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/svg\/RenderSVGResourceFilter.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-void RenderSVGResourceGradient::removeAllClientsFromCache(bool markForInvalidation)\n+void RenderSVGResourceGradient::removeAllClientsFromCacheIfNeeded(bool markForInvalidation, WeakHashSet<RenderObject>* visitedRenderers)\n@@ -48,1 +48,1 @@\n-    markAllClientsForInvalidation(markForInvalidation ? RepaintInvalidation : ParentOnlyInvalidation);\n+    markAllClientsForInvalidationIfNeeded(markForInvalidation ? RepaintInvalidation : ParentOnlyInvalidation, visitedRenderers);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/svg\/RenderSVGResourceGradient.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    void removeAllClientsFromCache(bool markForInvalidation = true) final;\n+    void removeAllClientsFromCacheIfNeeded(bool markForInvalidation, WeakHashSet<RenderObject>* visitedRenderers) final;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/svg\/RenderSVGResourceGradient.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-void RenderSVGResourceMarker::removeAllClientsFromCache(bool markForInvalidation)\n+void RenderSVGResourceMarker::removeAllClientsFromCacheIfNeeded(bool markForInvalidation, WeakHashSet<RenderObject>* visitedRenderers)\n@@ -59,1 +59,1 @@\n-    markAllClientsForInvalidation(markForInvalidation ? LayoutAndBoundariesInvalidation : ParentOnlyInvalidation);\n+    markAllClientsForInvalidationIfNeeded(markForInvalidation ? LayoutAndBoundariesInvalidation : ParentOnlyInvalidation, visitedRenderers);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/svg\/RenderSVGResourceMarker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-    void removeAllClientsFromCache(bool markForInvalidation = true) override;\n+    void removeAllClientsFromCacheIfNeeded(bool markForInvalidation, WeakHashSet<RenderObject>* visitedRenderers) override;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/svg\/RenderSVGResourceMarker.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-void RenderSVGResourceMasker::removeAllClientsFromCache(bool markForInvalidation)\n+void RenderSVGResourceMasker::removeAllClientsFromCacheIfNeeded(bool markForInvalidation, WeakHashSet<RenderObject>* visitedRenderers)\n@@ -50,1 +50,1 @@\n-    markAllClientsForInvalidation(markForInvalidation ? LayoutAndBoundariesInvalidation : ParentOnlyInvalidation);\n+    markAllClientsForInvalidationIfNeeded(markForInvalidation ? LayoutAndBoundariesInvalidation : ParentOnlyInvalidation, visitedRenderers);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/svg\/RenderSVGResourceMasker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    void removeAllClientsFromCache(bool markForInvalidation = true) override;\n+    void removeAllClientsFromCacheIfNeeded(bool markForInvalidation, WeakHashSet<RenderObject>* visitedRenderers) override;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/svg\/RenderSVGResourceMasker.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-void RenderSVGResourcePattern::removeAllClientsFromCache(bool markForInvalidation)\n+void RenderSVGResourcePattern::removeAllClientsFromCacheIfNeeded(bool markForInvalidation, WeakHashSet<RenderObject>* visitedRenderers)\n@@ -55,1 +55,1 @@\n-    markAllClientsForInvalidation(markForInvalidation ? RepaintInvalidation : ParentOnlyInvalidation);\n+    markAllClientsForInvalidationIfNeeded(markForInvalidation ? RepaintInvalidation : ParentOnlyInvalidation, visitedRenderers);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/svg\/RenderSVGResourcePattern.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    void removeAllClientsFromCache(bool markForInvalidation = true) override;\n+    void removeAllClientsFromCacheIfNeeded(bool markForInvalidation, WeakHashSet<RenderObject>* visitedRenderers) override;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/svg\/RenderSVGResourcePattern.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    void removeAllClientsFromCache(bool = true) override { }\n+    void removeAllClientsFromCacheIfNeeded(bool, WeakHashSet<RenderObject>*) override { }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/svg\/RenderSVGResourceSolidColor.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -190,1 +190,5 @@\n-        if (!placeholder.isDescendantOf(&container))\n+#if PLATFORM(JAVA)\n+       if (spannerAndPlaceholder.value.get() != nullptr)\n+        {\n+#endif\n+            if (!placeholder.isDescendantOf(&container))\n@@ -192,2 +196,5 @@\n-        placeholdersToRestore.append(&placeholder);\n-    }\n+            placeholdersToRestore.append(&placeholder);\n+#if PLATFORM(JAVA)\n+        }\n+#endif\n+     }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/updating\/RenderTreeBuilderMultiColumn.cpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1117,0 +1117,3 @@\n+    if (!is<CSSFunctionValue>(value))\n+        return GridTrackSize(GridLength(0));\n+\n@@ -1608,1 +1611,3 @@\n-    ASSERT(value.isPair());\n+    if (!is<CSSValuePair>(value))\n+        return FontCascadeDescription::initialFontSizeAdjust();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/style\/StyleBuilderConverter.h","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -973,1 +973,4 @@\n-        ASSERT(CSSPropertyParserHelpers::isSystemFontShorthand(valueID));\n+        if (!CSSPropertyParserHelpers::isSystemFontShorthand(valueID)) {\n+            \/\/ Early return if the invalid CSSValueID is set while using CSSOM API.\n+            return;\n+        }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/style\/StyleBuilderCustom.h","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+#include \"DocumentFragment.h\"\n+#include \"FragmentScriptingPermission.h\"\n@@ -47,0 +49,1 @@\n+#include \"XMLDocument.h\"\n@@ -289,0 +292,11 @@\n+bool testDocumentFragmentParseXML(const String& chunk, OptionSet<ParserContentPolicy> parserContentPolicy)\n+{\n+    ProcessWarming::prewarmGlobally();\n+\n+    auto settings = Settings::create(nullptr);\n+    auto document = WebCore::XMLDocument::createXHTML(nullptr, settings, URL());\n+    auto fragment = document->createDocumentFragment();\n+\n+    return fragment->parseXML(chunk, nullptr, parserContentPolicy);\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/testing\/js\/WebCoreTestSupport.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include <wtf\/OptionSet.h>\n@@ -43,0 +44,1 @@\n+enum class ParserContentPolicy : uint8_t;\n@@ -124,0 +126,5 @@\n+#if !PLATFORM(JAVA)\n+bool testDocumentFragmentParseXML(const String&, OptionSet<WebCore::ParserContentPolicy>) TEST_SUPPORT_EXPORT;\n+#else\n+TEST_SUPPORT_EXPORT bool testDocumentFragmentParseXML(const String&, OptionSet<WebCore::ParserContentPolicy>);\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/testing\/js\/WebCoreTestSupport.h","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -145,1 +145,2 @@\n-    thread().workerReportingProxy().workerGlobalScopeDestroyed();\n+    if (auto* workerReportingProxy = thread().workerReportingProxy())\n+        workerReportingProxy->workerGlobalScopeDestroyed();\n@@ -220,1 +221,2 @@\n-        connection = workerThread->workerLoaderProxy().createRTCDataChannelRemoteHandlerConnection();\n+        if (auto* workerLoaderProxy = workerThread->workerLoaderProxy())\n+            connection = workerLoaderProxy->createRTCDataChannelRemoteHandlerConnection();\n@@ -310,1 +312,2 @@\n-        workerGlobalScope.thread().workerReportingProxy().workerGlobalScopeClosed();\n+        if (auto* workerReportingProxy = workerGlobalScope.thread().workerReportingProxy())\n+            workerReportingProxy->workerGlobalScopeClosed();\n@@ -439,1 +442,2 @@\n-    thread().workerReportingProxy().postExceptionToWorkerObject(errorMessage, lineNumber, columnNumber, sourceURL);\n+    if (auto* workerReportingProxy = thread().workerReportingProxy())\n+        workerReportingProxy->postExceptionToWorkerObject(errorMessage, lineNumber, columnNumber, sourceURL);\n@@ -477,0 +481,4 @@\n+    auto* workerLoaderProxy = thread().workerLoaderProxy();\n+    if (!workerLoaderProxy)\n+        return false;\n+\n@@ -479,1 +487,1 @@\n-    thread().workerLoaderProxy().postTaskToLoader([&semaphore, &success, &key, &wrappedKey](auto& context) {\n+    workerLoaderProxy->postTaskToLoader([&semaphore, &success, &key, &wrappedKey](auto& context) {\n@@ -490,0 +498,4 @@\n+    auto* workerLoaderProxy = thread().workerLoaderProxy();\n+    if (!workerLoaderProxy)\n+        return false;\n+\n@@ -492,1 +504,1 @@\n-    thread().workerLoaderProxy().postTaskToLoader([&semaphore, &success, &key, &wrappedKey](auto& context) {\n+    workerLoaderProxy->postTaskToLoader([&semaphore, &success, &key, &wrappedKey](auto& context) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerGlobalScope.cpp","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -108,3 +108,3 @@\n-    else\n-        m_loaderContextIdentifier = downcast<WorkerGlobalScope>(*m_scriptExecutionContext).thread().workerLoaderProxy().loaderContextIdentifier();\n-\n+    else if (auto* workerLoaderProxy = downcast<WorkerGlobalScope>(*m_scriptExecutionContext).thread().workerLoaderProxy())\n+        m_loaderContextIdentifier = workerLoaderProxy->loaderContextIdentifier();\n+    ASSERT(m_loaderContextIdentifier);\n@@ -121,0 +121,3 @@\n+\n+    if (m_workerThread)\n+        m_workerThread->clearProxies();\n@@ -426,1 +429,3 @@\n-    m_workerThread = nullptr;\n+    if (RefPtr workerThread = std::exchange(m_workerThread, nullptr))\n+        workerThread->clearProxies();\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerMessagingProxy.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-    m_workerScope.thread().workerLoaderProxy().postTaskToLoader([task = WTFMove(task)](auto& context) mutable {\n+    m_workerScope.thread().workerLoaderProxy()->postTaskToLoader([task = WTFMove(task)](auto& context) mutable {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerNotificationClient.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+    virtual void clearProxies() = 0;\n+\n@@ -58,1 +60,1 @@\n-    virtual WorkerLoaderProxy& workerLoaderProxy() = 0;\n+    virtual WorkerLoaderProxy* workerLoaderProxy() = 0;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerOrWorkletThread.h","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -103,4 +103,4 @@\n-    , m_workerLoaderProxy(workerLoaderProxy)\n-    , m_workerDebuggerProxy(workerDebuggerProxy)\n-    , m_workerReportingProxy(workerReportingProxy)\n-    , m_workerBadgeProxy(badgeProxy)\n+    , m_workerLoaderProxy(&workerLoaderProxy)\n+    , m_workerDebuggerProxy(&workerDebuggerProxy)\n+    , m_workerReportingProxy(&workerReportingProxy)\n+    , m_workerBadgeProxy(&badgeProxy)\n@@ -206,0 +206,8 @@\n+void WorkerThread::clearProxies()\n+{\n+    m_workerLoaderProxy = nullptr;\n+    m_workerDebuggerProxy = nullptr;\n+    m_workerReportingProxy = nullptr;\n+    m_workerBadgeProxy = nullptr;\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerThread.cpp","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -98,4 +98,5 @@\n-    WorkerBadgeProxy& workerBadgeProxy() const { return m_workerBadgeProxy; }\n-    WorkerDebuggerProxy* workerDebuggerProxy() const final { return &m_workerDebuggerProxy; }\n-    WorkerLoaderProxy& workerLoaderProxy() final { return m_workerLoaderProxy; }\n-    WorkerReportingProxy& workerReportingProxy() const { return m_workerReportingProxy; }\n+    WorkerBadgeProxy* workerBadgeProxy() const { return m_workerBadgeProxy; }\n+    WorkerDebuggerProxy* workerDebuggerProxy() const final { return m_workerDebuggerProxy; }\n+    WorkerLoaderProxy* workerLoaderProxy() final { return m_workerLoaderProxy; }\n+    WorkerReportingProxy* workerReportingProxy() const { return m_workerReportingProxy; }\n+\n@@ -114,0 +115,2 @@\n+    void clearProxies() override;\n+\n@@ -139,4 +142,4 @@\n-    WorkerLoaderProxy& m_workerLoaderProxy;\n-    WorkerDebuggerProxy& m_workerDebuggerProxy;\n-    WorkerReportingProxy& m_workerReportingProxy;\n-    WorkerBadgeProxy& m_workerBadgeProxy;\n+    WorkerLoaderProxy* m_workerLoaderProxy; \/\/ FIXME: Use CheckedPtr.\n+    WorkerDebuggerProxy* m_workerDebuggerProxy; \/\/ FIXME: Use CheckedPtr.\n+    WorkerReportingProxy* m_workerReportingProxy; \/\/ FIXME: Use CheckedPtr.\n+    WorkerBadgeProxy* m_workerBadgeProxy; \/\/ FIXME: Use CheckedPtr.\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/WorkerThread.h","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -99,0 +99,2 @@\n+\n+    m_serviceWorkerThread->clearProxies();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/service\/context\/ServiceWorkerThreadProxy.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,0 +124,2 @@\n+\n+    m_workerThread->clearProxies();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/workers\/shared\/context\/SharedWorkerThreadProxy.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,0 +64,3 @@\n+#if LIBXML_VERSION >= 21200\n+    static void parseErrorFunc(void* userData, const xmlError*);\n+#else\n@@ -65,0 +68,1 @@\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/XSLTProcessor.h","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,0 +62,3 @@\n+#if LIBXML_VERSION >= 21200\n+void XSLTProcessor::parseErrorFunc(void* userData, const xmlError* error)\n+#else\n@@ -63,0 +66,1 @@\n+#endif\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/xml\/XSLTProcessorLibxslt.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}