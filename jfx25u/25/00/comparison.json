{"files":[{"patch":"@@ -1484,0 +1484,1 @@\n+op :op_instanceof_return_location\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/bytecode\/BytecodeList.rb","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-        case OpInstanceof::getPrototype:\n+        case OpInstanceof::getHasInstance:\n@@ -116,1 +116,1 @@\n-        case OpInstanceof::instanceof:\n+        case OpInstanceof::getPrototype:\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/bytecode\/LLIntPrototypeLoadAdaptiveStructureWatchpoint.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -196,0 +196,2 @@\n+            else if (callInstruction.opcodeID() == op_instanceof)\n+                jumpTarget = LLINT_RETURN_LOCATION(op_instanceof);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/dfg\/DFGOSRExitCompilerCommon.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,0 +78,1 @@\n+    macro(op_instanceof) \\\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/llint\/LLIntOpcode.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2731,1 +2731,0 @@\n-        auto& dst = callFrame->uncheckedR(destinationFor(pc->as<OpInstanceof>(), bytecodeIndex.checkpoint()).virtualRegister());\n@@ -2733,3 +2732,0 @@\n-        auto value = getOperand(callFrame, bytecode.m_value);\n-        auto hasInstanceOrPrototype = JSValue::decode(result);\n-\n@@ -2737,1 +2733,2 @@\n-        case OpInstanceof::getHasInstance: {\n+        case OpInstanceof::getHasInstance: \/\/ First one is not handled by checkpoint.\n+        case OpInstanceof::instanceof: \/\/ No inlined calls exist at the last checkpoint.\n@@ -2740,1 +2737,0 @@\n-        }\n@@ -2742,17 +2738,4 @@\n-            auto constructor = getOperand(callFrame, bytecode.m_constructor);\n-            ASSERT(constructor.isObject());\n-            if (hasInstanceOrPrototype != globalObject->functionProtoHasInstanceSymbolFunction() || !constructor.getObject()->structure()->typeInfo().implementsDefaultHasInstance()) {\n-                dst = jsBoolean(constructor.getObject()->hasInstance(globalObject, value, hasInstanceOrPrototype));\n-                RETURN_IF_EXCEPTION(throwScope, { });\n-                break;\n-            }\n-            if (!value.isObject()) {\n-                dst = jsBoolean(false);\n-                break;\n-            }\n-            hasInstanceOrPrototype = constructor.get(globalObject, vm.propertyNames->prototype);\n-            RETURN_IF_EXCEPTION(throwScope, { });\n-            FALLTHROUGH;\n-        }\n-        case OpInstanceof::instanceof:\n-            bool result = JSObject::defaultHasInstance(globalObject, value, hasInstanceOrPrototype);\n+            auto& dst = callFrame->uncheckedR(bytecode.m_dst);\n+            auto value = getOperand(callFrame, bytecode.m_value);\n+            auto prototype = JSValue::decode(result);\n+            bool result = JSObject::defaultHasInstance(globalObject, value, prototype);\n@@ -2763,0 +2746,1 @@\n+        }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/llint\/LLIntSlowPaths.cpp","additions":7,"deletions":23,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -3278,0 +3278,9 @@\n+    jmp .getPrototype\n+\n+.getHasInstanceInlinedGetterOSRReturnPoint:\n+    # This can only be reached if we're exiting to the LLInt and we're exiting\n+    # from an inlined getter for Symbol.hasInstance. Other exits e.g. for a \"prototype\"\n+    # getter will exit directly to op_checkpoint_osr_exit_from_inlined_call_trampoline.\n+    getterSetterOSRExitReturnPoint(op_instanceof, size)\n+    valueProfile(size, OpInstanceof, m_hasInstanceValueProfile, r0, t2)\n+    store(r0, m_hasInstanceOrPrototype)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/llint\/LowLevelInterpreter64.asm","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -739,1 +739,1 @@\n-    addq 2 * SlotSize, sp\n+    addp 2 * SlotSize, sp\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/llint\/WebAssembly.asm","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -335,0 +335,3 @@\n+    if (globalObject->isHavingABadTime()) [[unlikely]]\n+        return nullptr;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/runtime\/JSGlobalObjectInlines.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4105,1 +4105,1 @@\n-    if (ControlType::isAnyCatch(data) && &data != &currentData) {\n+    if (!Options::useWasmIPInt() && ControlType::isAnyCatch(data) && &data != &currentData) {\n@@ -4142,0 +4142,11 @@\n+        if (Options::useWasmIPInt()) {\n+            for (unsigned controlIndex = 0; controlIndex < m_parser->controlStack().size(); ++controlIndex) {\n+                auto& data = m_parser->controlStack()[controlIndex].controlData;\n+                if (ControlType::isAnyCatch(data)) {\n+                    auto* load = loadFromScratchBuffer(indexInBuffer, pointer, pointerType());\n+                    m_currentBlock->appendNew<VariableValue>(m_proc, Set, origin(), data.exception(), load);\n+                } else if (ControlType::isTry(data))\n+                    ++indexInBuffer;\n+            }\n+        }\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/JavaScriptCore\/wasm\/WasmOMGIRGenerator.cpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -91,0 +91,12 @@\n+struct DoubleMarkableTraits {\n+    constexpr static bool isEmptyValue(double value)\n+    {\n+        return std::isnan(value);\n+    }\n+\n+    constexpr static double emptyValue()\n+    {\n+        return std::numeric_limits<double>::quiet_NaN();\n+    }\n+};\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WTF\/wtf\/Markable.h","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -196,1 +196,1 @@\n-                    if (m_index == m_input.length() - 1) {\n+                    if (regexPosition == m_input.length() - 1) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/url-pattern\/URLPatternTokenizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,1 +91,0 @@\n-    if (m_startedRendering) {\n@@ -96,0 +95,2 @@\n+\n+    if (m_startedRendering) {\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Modules\/webaudio\/OfflineAudioDestinationNode.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -834,0 +834,1 @@\n+crypto\/SerializedCryptoKeyWrap.cpp\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/Sources.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,12 +53,0 @@\n-struct WebAnimationsMarkableDoubleTraits {\n-    static bool isEmptyValue(double value)\n-    {\n-        return std::isnan(value);\n-    }\n-\n-    static constexpr double emptyValue()\n-    {\n-        return std::numeric_limits<double>::quiet_NaN();\n-    }\n-};\n-\n@@ -74,1 +62,1 @@\n-using MarkableDouble = Markable<double, WebAnimationsMarkableDoubleTraits>;\n+using MarkableDouble = Markable<double, WTF::DoubleMarkableTraits>;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/animation\/WebAnimationTypes.h","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -58,3 +58,4 @@\n-            if (UNLIKELY(reason))\n-                *reason = \"Has Abort Event Listener\"_s;\n-            return true;\n+            bool isReachable = containsWebCoreOpaqueRoot(visitor, abortSignal);\n+            if (UNLIKELY(isReachable && reason))\n+                *reason = \"Has Abort Event Listener And Is Referenced By Other Objects\"_s;\n+            return isReachable;\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/bindings\/js\/JSAbortSignalCustom.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (C) 2025 Apple Inc. All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in the\n+ *    documentation and\/or other materials provided with the distribution.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY APPLE INC. AND ITS CONTRIBUTORS ``AS IS''\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n+ * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n+ * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL APPLE INC. OR ITS CONTRIBUTORS\n+ * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n+ * THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+\n+#include \"config.h\"\n+#include \"SerializedCryptoKeyWrap.h\"\n+\n+#include <wtf\/CompletionHandler.h>\n+#include <wtf\/NeverDestroyed.h>\n+#include <wtf\/WorkQueue.h>\n+#if ENABLE(WEB_CRYPTO) && PLATFORM(JAVA)\n+namespace WebCore {\n+\n+void getDefaultWebCryptoMasterKey(CompletionHandler<void(std::optional<Vector<uint8_t>>&&)>&& handler)\n+{\n+    static NeverDestroyed<Ref<WorkQueue>> queue { WorkQueue::create(\"org.WebKit.WebCryptoMasterKey\"_s) };\n+    queue.get().get().dispatch([handler = WTFMove(handler)] mutable {\n+        auto key = defaultWebCryptoMasterKey();\n+        WorkQueue::protectedMain()->dispatch([handler = WTFMove(handler), key = WTFMove(key)] mutable {\n+            handler(WTFMove(key));\n+        });\n+    });\n+}\n+\n+}\n+#endif \/\/ ENABLE(WEB_CRYPTO)\n\\ No newline at end of file\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/crypto\/SerializedCryptoKeyWrap.cpp","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (C) 2014-2024 Apple Inc. All rights reserved.\n+ * Copyright (C) 2014-2025 Apple Inc. All rights reserved.\n@@ -44,0 +44,1 @@\n+WEBCORE_EXPORT void getDefaultWebCryptoMasterKey(CompletionHandler<void(std::optional<Vector<uint8_t>>&&)>&&);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/crypto\/SerializedCryptoKeyWrap.h","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"ExceptionOr.h\"\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/crypto\/algorithms\/CryptoAlgorithmAESCFB.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"ExceptionOr.h\"\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/crypto\/algorithms\/CryptoAlgorithmHMAC.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"ExceptionOr.h\"\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/crypto\/gcrypt\/CryptoAlgorithmEd25519GCrypt.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -8879,1 +8879,1 @@\n-        parent->didRemoveTouchEventHandler(*this);\n+        parent->didRemoveTouchEventHandler(*this, removal);\n@@ -10707,0 +10707,5 @@\n+void Document::willBeDisconnectedFromFrame(Document& parentDocument)\n+{\n+    parentDocument.didRemoveTouchEventHandler(*this, EventHandlerRemoval::All);\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Document.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1971,0 +1971,1 @@\n+    void willBeDisconnectedFromFrame(Document&);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Document.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -465,1 +465,1 @@\n-#if ENABLE(TOUCH_EVENTS) && PLATFORM(IOS_FAMILY) && (ASSERT_ENABLED || ENABLE(SECURITY_ASSERTIONS))\n+#if ENABLE(TOUCH_EVENTS) && PLATFORM(IOS_FAMILY) && ASSERT_ENABLED\n@@ -467,3 +467,3 @@\n-        ASSERT_WITH_SECURITY_IMPLICATION(!document->touchEventListenersContain(*this));\n-        ASSERT_WITH_SECURITY_IMPLICATION(!document->touchEventHandlersContain(*this));\n-        ASSERT_WITH_SECURITY_IMPLICATION(!document->touchEventTargetsContain(*this));\n+        ASSERT(!document->touchEventListenersContain(*this));\n+        ASSERT(!document->touchEventHandlersContain(*this));\n+        ASSERT(!document->touchEventTargetsContain(*this));\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/dom\/Node.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -81,0 +81,2 @@\n+        if (RefPtr innerDocument = contentDocument())\n+            innerDocument->willBeDisconnectedFromFrame(protectedDocument());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/HTMLFrameOwnerElement.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -252,0 +252,1 @@\n+\n@@ -253,2 +254,6 @@\n-    if (auto* context = existingDrawingContext())\n-        context->unwindStateStack(stackSize - 1);\n+    auto* context = existingDrawingContext();\n+    while (m_stateStack.size() > 1) {\n+        m_stateStack.removeLast();\n+        if (context)\n+            context->restore();\n+    }\n@@ -306,1 +311,1 @@\n-    m_stateStack.resize(1);\n+    ASSERT(m_stateStack.size() == 1);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/html\/canvas\/CanvasRenderingContext2DBase.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -496,0 +496,3 @@\n+    RefPtr document = m_document.get();\n+    if (!document)\n+        return;\n@@ -510,1 +513,1 @@\n-            m_client->didReceiveResponse(m_document->identifier(), identifier, response);\n+            m_client->didReceiveResponse(document->identifier(), identifier, response);\n@@ -516,1 +519,1 @@\n-            m_client->didReceiveResponse(m_document->identifier(), identifier, ResourceResponse::filter(response, m_options.credentials == FetchOptions::Credentials::Include ? ResourceResponse::PerformExposeAllHeadersCheck::No : ResourceResponse::PerformExposeAllHeadersCheck::Yes));\n+            m_client->didReceiveResponse(document->identifier(), identifier, ResourceResponse::filter(response, m_options.credentials == FetchOptions::Credentials::Include ? ResourceResponse::PerformExposeAllHeadersCheck::No : ResourceResponse::PerformExposeAllHeadersCheck::Yes));\n@@ -522,1 +525,1 @@\n-    m_client->didFinishLoading(m_document->identifier(), identifier, metrics);\n+    m_client->didFinishLoading(document->identifier(), identifier, metrics);\n@@ -541,0 +544,3 @@\n+    RefPtr document = m_document.get();\n+    if (!document)\n+        return;\n@@ -542,1 +548,1 @@\n-        m_client->didFail(m_document->identifier(), error); \/\/ May cause the client to get destroyed.\n+        m_client->didFail(document->identifier(), error); \/\/ May cause the client to get destroyed.\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/loader\/DocumentThreadableLoader.cpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-    CheckedPtr renderer = downcast<RenderImage>(element.renderer());\n+    CheckedPtr renderer = dynamicDowncast<RenderImage>(element.renderer());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/ImageAnalysisQueue.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -582,1 +582,2 @@\n-    scrollingTree()->scrollingTreeNodeScrollbarVisibilityDidChange(scrollingNodeID(), orientation, isVisible);\n+    if (RefPtr tree = scrollingTree())\n+        tree->scrollingTreeNodeScrollbarVisibilityDidChange(scrollingNodeID(), orientation, isVisible);\n@@ -587,1 +588,2 @@\n-    scrollingTree()->scrollingTreeNodeScrollbarMinimumThumbLengthDidChange(scrollingNodeID(), orientation, minimumThumbLength);\n+    if (RefPtr tree = scrollingTree())\n+        tree->scrollingTreeNodeScrollbarMinimumThumbLengthDidChange(scrollingNodeID(), orientation, minimumThumbLength);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/page\/scrolling\/ScrollingTreeScrollingNode.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -453,1 +453,1 @@\n-        LOG(EME, \"EME - ClearKey - session %s is in an invalid state\", sessionId.utf8().data());\n+        LOG(EME, \"EME - ClearKey - session %s is in an invalid state\", m_sessionID.utf8().data());\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/encryptedmedia\/clearkey\/CDMClearKey.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -133,4 +133,0 @@\n-#if USE(SKIA)\n-    sk_sp<SkShader> m_shader;\n-#endif\n-\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/Gradient.h","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-void PlatformDisplay::clearSharingGLContext()\n+void PlatformDisplay::clearGLContexts()\n@@ -132,1 +132,1 @@\n-    invalidateSkiaGLContexts();\n+    clearSkiaGLContext();\n@@ -163,1 +163,2 @@\n-    clearSharingGLContext();\n+\n+    clearGLContexts();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/PlatformDisplay.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-    void clearSharingGLContext();\n+    void clearGLContexts();\n@@ -137,1 +137,1 @@\n-    void invalidateSkiaGLContexts();\n+    void clearSkiaGLContext();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/PlatformDisplay.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -180,1 +180,1 @@\n-    , m_timingFunction(animation.timingFunction()->clone())\n+    , m_timingFunction(animation.defaultTimingFunctionForKeyframes() ? animation.defaultTimingFunctionForKeyframes()->clone() : animation.timingFunction()->clone())\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/graphics\/texmap\/TextureMapperAnimation.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -356,0 +356,1 @@\n+    bool skipNextComplete = true;\n@@ -358,0 +359,4 @@\n+        if (skipNextComplete && buffer.isComplete()) {\n+            skipNextComplete = false;\n+            continue;\n+        }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/image-decoders\/webp\/WEBPImageDecoder.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -290,0 +290,5 @@\n+void ResourceRequestBase::resetTimeoutInterval()\n+{\n+    setTimeoutInterval(s_defaultTimeoutInterval);\n+}\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/network\/ResourceRequestBase.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -150,0 +150,1 @@\n+    WEBCORE_EXPORT void resetTimeoutInterval();\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/platform\/network\/ResourceRequestBase.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -97,2 +97,5 @@\n-        for (size_t i = 0; i < m_zeroLengthLinecapLocations.size(); ++i)\n-            strokeBoundingBox.unite(zeroLengthSubpathRect(m_zeroLengthLinecapLocations[i], strokeWidth));\n+        for (auto& zeroLengthLinecapLocation : m_zeroLengthLinecapLocations) {\n+            auto subpathRect = zeroLengthSubpathRect(zeroLengthLinecapLocation, strokeWidth);\n+            if (!subpathRect.isNaN())\n+                strokeBoundingBox.unite(subpathRect);\n+        }\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/rendering\/svg\/legacy\/LegacyRenderSVGPath.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -102,0 +102,1 @@\n+#if USE(CAIRO)\n@@ -103,0 +104,4 @@\n+#else\n+    const auto colorSpace = DestinationColorSpace::SRGB();\n+#endif\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/WebCore\/svg\/graphics\/filters\/SVGFilter.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -269,2 +269,2 @@\n-    alignas(8) unsigned char seed[CC_SHA1_DIGEST_LENGTH];\n-    (void)CC_SHA256(&rawSeed, rawSeedLength, seed);\n+    alignas(8) std::array<unsigned char, CC_SHA256_DIGEST_LENGTH> defaultSeed;\n+    (void)CC_SHA256(&rawSeed, rawSeedLength, defaultSeed.data());\n@@ -276,2 +276,1 @@\n-    const unsigned char defaultSeed[CC_SHA1_DIGEST_LENGTH] = { \"DefaultSeed\\x12\\x34\\x56\\x78\\x9a\\xbc\\xde\\xf0\" };\n-    memcpy(m_tzoneKey.seed, defaultSeed, CC_SHA1_DIGEST_LENGTH);\n+    const std::array<unsigned char, CC_SHA1_DIGEST_LENGTH> defaultSeed = { \"DefaultSeed\\x12\\x34\\x56\\x78\\x9a\\xbc\\xde\\xf0\" };\n@@ -280,1 +279,1 @@\n-    uint64_t* seedPtr = reinterpret_cast<uint64_t*>(seed);\n+    const uint64_t* seedPtr = reinterpret_cast<const uint64_t*>(defaultSeed.data());\n@@ -282,1 +281,1 @@\n-    unsigned remainingBytes = CC_SHA1_DIGEST_LENGTH;\n+    unsigned remainingBytes = defaultSeed.size();\n@@ -288,2 +287,2 @@\n-    unsigned char* seedBytes = reinterpret_cast<unsigned char*>(seedPtr);\n-    while (remainingBytes > sizeof(m_tzoneKeySeed)) {\n+    const unsigned char* seedBytes = reinterpret_cast<const unsigned char*>(seedPtr);\n+    while (remainingBytes) {\n@@ -297,2 +296,2 @@\n-        for (unsigned i = 0; i < CC_SHA1_DIGEST_LENGTH; ++i)\n-            TZONE_LOG_DEBUG(\" %02x\", seed[i]);\n+        for (unsigned char byte : defaultSeed)\n+            TZONE_LOG_DEBUG(\" %02x\", byte);\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/bmalloc\/bmalloc\/TZoneHeapManager.cpp","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -6,1 +6,1 @@\n-SET_PROJECT_VERSION(2 48 0)\n+SET_PROJECT_VERSION(2 48 7)\n@@ -212,2 +212,2 @@\n-    CALCULATE_LIBRARY_VERSIONS_FROM_LIBTOOL_TRIPLE(WEBKIT 109 5 72)\n-    CALCULATE_LIBRARY_VERSIONS_FROM_LIBTOOL_TRIPLE(JAVASCRIPTCORE 45 3 27)\n+    CALCULATE_LIBRARY_VERSIONS_FROM_LIBTOOL_TRIPLE(WEBKIT 109 12 72)\n+    CALCULATE_LIBRARY_VERSIONS_FROM_LIBTOOL_TRIPLE(JAVASCRIPTCORE 45 10 27)\n@@ -215,2 +215,2 @@\n-    CALCULATE_LIBRARY_VERSIONS_FROM_LIBTOOL_TRIPLE(WEBKIT 17 5 17)\n-    CALCULATE_LIBRARY_VERSIONS_FROM_LIBTOOL_TRIPLE(JAVASCRIPTCORE 8 3 8)\n+    CALCULATE_LIBRARY_VERSIONS_FROM_LIBTOOL_TRIPLE(WEBKIT 17 12 17)\n+    CALCULATE_LIBRARY_VERSIONS_FROM_LIBTOOL_TRIPLE(JAVASCRIPTCORE 8 10 8)\n@@ -218,2 +218,2 @@\n-    CALCULATE_LIBRARY_VERSIONS_FROM_LIBTOOL_TRIPLE(WEBKIT 15 5 11)\n-    CALCULATE_LIBRARY_VERSIONS_FROM_LIBTOOL_TRIPLE(JAVASCRIPTCORE 6 3 5)\n+    CALCULATE_LIBRARY_VERSIONS_FROM_LIBTOOL_TRIPLE(WEBKIT 15 12 11)\n+    CALCULATE_LIBRARY_VERSIONS_FROM_LIBTOOL_TRIPLE(JAVASCRIPTCORE 6 10 5)\n","filename":"modules\/javafx.web\/src\/main\/native\/Source\/cmake\/OptionsGTK.cmake","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -145,1 +145,2 @@\n-    m_currentScriptCallbackID = task.parentScriptCallbackID;\n+    auto currentScriptCallbackID = task.parentScriptCallbackID;\n+    m_currentScriptCallbackID = currentScriptCallbackID;\n@@ -149,0 +150,3 @@\n+\n+    m_currentScriptCallbackID = currentScriptCallbackID;\n+\n","filename":"modules\/javafx.web\/src\/main\/native\/Tools\/TestRunnerShared\/UIScriptContext\/UIScriptContext.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}