{"files":[{"patch":"@@ -42,0 +42,8 @@\n+    - name: 'Build Android or iOS'\n+      id: build-android-ios\n+      run: |\n+        cd build\/${{ inputs.platform }}\n+        make LOG=cmdlines static-libs-image\n+      shell: bash\n+      if: inputs.platform == 'android-linux-aarch64' || inputs.platform == 'ios-macos-aarch64'\n+\n@@ -48,0 +56,1 @@\n+      if: inputs.platform != 'android-linux-aarch64' && inputs.platform != 'ios-macos-aarch64'\n","filename":".github\/actions\/do-build\/action.yml","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -44,0 +44,4 @@\n+        echo \"build\/${{ inputs.platform }} contents...\"\n+        ls build\/${{ inputs.platform }}\n+        echo \"static libs contents...\"\n+        ls build\/${{ inputs.platform }}\/images\/static-libs\/\n@@ -63,0 +67,4 @@\n+        \n+        echo \"bundles contents...\"\n+        ls bundles\n+        echo \"input platform: ${{ inputs.platform }}\"\n@@ -78,0 +86,8 @@\n+\n+    - name: 'Upload static image artifact'\n+      uses: actions\/upload-artifact@v4\n+      with:\n+        name: ${{ inputs.platform }}\n+        path: build\/${{ inputs.platform }}\/images\/static-libs\/\n+        retention-days: 1\n+      if: inputs.platform == 'android-linux-aarch64' || inputs.platform == 'ios-macos-aarch64'\n","filename":".github\/actions\/upload-bundles\/action.yml","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,139 @@\n+#\n+# Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+name: 'Build (android)'\n+\n+on:\n+  workflow_call:\n+    inputs:\n+      platform:\n+        required: true\n+        type: string\n+      extra-conf-options:\n+        required: false\n+        type: string\n+      make-target:\n+        required: false\n+        type: string\n+        default: 'product-bundles test-bundles'\n+      debug-levels:\n+        required: false\n+        type: string\n+        default: '[ \"release\" ]'\n+      gcc-major-version:\n+        required: true\n+        type: string\n+      gcc-package-suffix:\n+        required: false\n+        type: string\n+        default: ''\n+      apt-architecture:\n+        required: false\n+        type: string\n+      apt-extra-packages:\n+        required: false\n+        type: string\n+      configure-arguments:\n+        required: false\n+        type: string\n+      make-arguments:\n+        required: false\n+        type: string\n+\n+jobs:\n+  build-android:\n+    name: build\n+    runs-on: ubuntu-22.04\n+\n+    steps:\n+      - name: 'Checkout the JDK source'\n+        uses: actions\/checkout@v4\n+\n+      - name: 'Get the BootJDK'\n+        id: bootjdk\n+        uses: .\/.github\/actions\/get-bootjdk\n+        with:\n+          platform: linux-x64\n+\n+      - name: 'Get JTReg'\n+        id: jtreg\n+        uses: .\/.github\/actions\/get-jtreg\n+\n+      - name: 'Get GTest'\n+        id: gtest\n+        uses: .\/.github\/actions\/get-gtest\n+\n+      - name: 'Set architecture'\n+        id: arch\n+        run: |\n+          # Set a proper suffix for packages if using a different architecture\n+          if [[ '${{ inputs.apt-architecture }}' != '' ]]; then\n+            echo 'suffix=:${{ inputs.apt-architecture }}' >> $GITHUB_OUTPUT\n+          fi\n+\n+      # Upgrading apt to solve libc6 installation bugs, see JDK-8260460.\n+      - name: 'Install toolchain and dependencies'\n+        run: |\n+          # Install dependencies using apt-get\n+          if [[ '${{ inputs.apt-architecture }}' != '' ]]; then\n+            sudo dpkg --add-architecture ${{ inputs.apt-architecture }}\n+          fi\n+          sudo apt-get update\n+          sudo apt-get install --only-upgrade apt\n+          sudo apt-get install gcc-${{ inputs.gcc-major-version }}${{ inputs.gcc-package-suffix }} g++-${{ inputs.gcc-major-version }}${{ inputs.gcc-package-suffix }} libxrandr-dev${{ steps.arch.outputs.suffix }} libxtst-dev${{ steps.arch.outputs.suffix }} libcups2-dev${{ steps.arch.outputs.suffix }} libasound2-dev${{ steps.arch.outputs.suffix }} ${{ inputs.apt-extra-packages }}\n+          sudo update-alternatives --install \/usr\/bin\/gcc gcc \/usr\/bin\/gcc-${{ inputs.gcc-major-version }} 100 --slave \/usr\/bin\/g++ g++ \/usr\/bin\/g++-${{ inputs.gcc-major-version }}\n+\n+      - name: 'Configure'\n+        run: >\n+          bash configure\n+          --with-conf-name=android-linux-aarch64\n+          --enable-headless-only\n+          --with-boot-jdk=${{ steps.bootjdk.outputs.path }}\n+          --with-toolchain-path=$ANDROID_NDK_HOME\/toolchains\/llvm\/prebuilt\/linux-x86_64\/bin\n+          --with-sysroot=$ANDROID_NDK_HOME\/toolchains\/llvm\/prebuilt\/linux-x86_64\/sysroot\n+          --with-toolchain-type=clang\n+          --with-jvm-variants=minimal\n+          --host=aarch64-linux-android\n+          --target=aarch64-linux-android\n+          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n+          ${{ matrix.flags }}\n+          ${{ inputs.extra-conf-options }} ${{ inputs.configure-arguments }} || (\n+          echo \"Dumping config.log:\" &&\n+          cat config.log &&\n+          exit 1)\n+\n+      - name: 'Build'\n+        id: build\n+        uses: .\/.github\/actions\/do-build\n+        with:\n+          make-target: '${{ inputs.make-target }} ${{ inputs.make-arguments }}'\n+          platform: android-linux-aarch64\n+          debug-suffix: '${{ matrix.suffix }}'\n+\n+      - name: 'Upload bundles'\n+        uses: .\/.github\/actions\/upload-bundles\n+        with:\n+          platform: android-linux-aarch64\n+          debug-suffix: '${{ matrix.suffix }}'\n","filename":".github\/workflows\/build-android-static.yml","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -0,0 +1,117 @@\n+#\n+# Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+name: 'Build (ios)'\n+\n+on:\n+  workflow_call:\n+    inputs:\n+      platform:\n+        required: true\n+        type: string\n+      runs-on:\n+        required: true\n+        type: string\n+      extra-conf-options:\n+        required: false\n+        type: string\n+      make-target:\n+        required: false\n+        type: string\n+        default: 'product-bundles test-bundles'\n+      debug-levels:\n+        required: false\n+        type: string\n+        default: '[ \"release\" ]'\n+      xcode-toolset-version:\n+        required: true\n+        type: string\n+      configure-arguments:\n+        required: false\n+        type: string\n+      make-arguments:\n+        required: false\n+        type: string\n+\n+jobs:\n+  build-macos:\n+    name: build\n+    runs-on: ${{ inputs.runs-on }}\n+\n+    steps:\n+      - name: 'Checkout the JDK source'\n+        uses: actions\/checkout@v4\n+\n+      - name: 'Get the BootJDK'\n+        id: bootjdk\n+        uses: .\/.github\/actions\/get-bootjdk\n+        with:\n+          platform: ${{ inputs.platform }}\n+\n+      - name: 'Get JTReg'\n+        id: jtreg\n+        uses: .\/.github\/actions\/get-jtreg\n+\n+      - name: 'Get GTest'\n+        id: gtest\n+        uses: .\/.github\/actions\/get-gtest\n+\n+      - name: 'Install toolchain and dependencies'\n+        run: |\n+          # Run Homebrew installation and xcode-select\n+          brew install autoconf make\n+          sudo xcode-select --switch \/Applications\/Xcode_${{ inputs.xcode-toolset-version }}.app\/Contents\/Developer\n+          # This will make GNU make available as 'make' and not only as 'gmake'\n+          echo '\/usr\/local\/opt\/make\/libexec\/gnubin' >> $GITHUB_PATH\n+          wget -P \/tmp https:\/\/github.com\/apple\/cups\/archive\/refs\/tags\/v2.3.6.zip && unzip \/tmp\/v2.3.6.zip -d \/tmp\n+      - name: 'Configure'\n+        run: >\n+          bash configure\n+          --with-conf-name=ios-macos-aarch64\n+          --enable-headless-only\n+          --with-boot-jdk=${{ steps.bootjdk.outputs.path }}\n+          --openjdk-target=aarch64-macos-ios\n+          --with-cups-include=\/tmp\/cups-2.3.6\n+          --with-sysroot=\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/iPhoneOS.platform\/Developer\/SDKs\/iPhoneOS.sdk\n+          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n+          ${{ matrix.flags }}\n+          ${{ inputs.extra-conf-options }} ${{ inputs.configure-arguments }} || (\n+          echo \"Dumping config.log:\" &&\n+          cat config.log &&\n+          exit 1)\n+\n+      - name: 'Build'\n+        id: build\n+        uses: .\/.github\/actions\/do-build\n+        with:\n+          make-target: '${{ inputs.make-target }} ${{ inputs.make-arguments }}'\n+          platform: ios-macos-aarch64\n+          debug-suffix: '${{ matrix.suffix }}'\n+\n+      - name: 'Upload bundles'\n+        uses: .\/.github\/actions\/upload-bundles\n+        with:\n+          platform: ios-macos-aarch64\n+          debug-suffix: '${{ matrix.suffix }}'\n","filename":".github\/workflows\/build-ios-static.yml","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -37,1 +37,1 @@\n-        description: 'Platform(s) to execute on (comma separated, e.g. \"linux-x64, macos, aarch64\")'\n+        description: 'Platform(s) to execute on (comma separated, e.g. \"android-linux-aarch64, ios-macos-aarch64, linux-x64, macos, aarch64\")'\n@@ -39,1 +39,1 @@\n-        default: 'linux-x64, linux-x86, linux-x64-variants, linux-cross-compile, macos-x64, macos-aarch64, windows-x64, windows-aarch64, docs'\n+        default: 'android-linux-aarch64, ios-macos-aarch64, linux-x64, linux-x86, linux-x64-variants, linux-cross-compile, macos-x64, macos-aarch64, windows-x64, windows-aarch64, docs'\n@@ -61,0 +61,2 @@\n+      android-linux-aarch64: ${{ steps.include.outputs.android-linux-aarch64 }}\n+      ios-macos-aarch64: ${{ steps.include.outputs.ios-macos-aarch64 }}\n@@ -91,1 +93,1 @@\n-                input='${{ secrets.JDK_SUBMIT_PLATFORMS }}'\n+                input='android-linux-aarch64, ios-macos-aarch64'\n@@ -113,0 +115,2 @@\n+          echo \"android-linux-aarch64=$(check_platform android-linux-aarch64 android linux aarch64)\" >> $GITHUB_OUTPUT\n+          echo \"ios-macos-aarch64=$(check_platform ios-macos-aarch64 ios macos aarch64)\" >> $GITHUB_OUTPUT\n@@ -127,0 +131,24 @@\n+  build-android-linux-aarch64:\n+    name: android-linux-aarch64\n+    needs: select\n+    uses: .\/.github\/workflows\/build-android-static.yml\n+    with:\n+      platform: linux-x64\n+      gcc-major-version: '10'\n+      configure-arguments: ${{ github.event.inputs.configure-arguments }}\n+      make-arguments: ${{ github.event.inputs.make-arguments }}\n+    # The linux-x64 jdk bundle is used as buildjdk for the cross-compile job\n+    if: needs.select.outputs.android-linux-aarch64 == 'true'\n+\n+  build-ios-macos-aarch64:\n+    name: ios-macos-aarch64\n+    needs: select\n+    uses: .\/.github\/workflows\/build-ios-static.yml\n+    with:\n+      platform: macos-aarch64\n+      runs-on: 'macos-14'\n+      xcode-toolset-version: '14.3.1'\n+      configure-arguments: ${{ github.event.inputs.configure-arguments }}\n+      make-arguments: ${{ github.event.inputs.make-arguments }}\n+    if: needs.select.outputs.ios-macos-aarch64 == 'true'\n+\n@@ -351,0 +379,2 @@\n+      - build-android-linux-aarch64\n+      - build-ios-macos-aarch64\n@@ -391,0 +421,1 @@\n+        if: needs.select.outputs.android-linux-aarch64 == 'false'\n","filename":".github\/workflows\/main.yml","additions":34,"deletions":3,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -0,0 +1,10 @@\n+# sample configure command for ios\n+\n+bash configure \\\n+--enable-headless-only \\\n+--with-boot-jdk=\/opt\/jdk-22.jdk\/Contents\/Home \\\n+--with-build-jdk=\/opt\/jdk-23.jdk\/Contents\/Home \\\n+--openjdk-target=aarch64-macos-ios \\\n+--with-cups-include=..\/support\/cups-2.3.6 \\\n+--with-sysroot=\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/iPhoneOS.platform\/Developer\/SDKs\/iPhoneOS.sdk\n+\n","filename":"configure-ios.sh","additions":10,"deletions":0,"binary":false,"changes":10,"status":"added"},{"patch":"@@ -245,1 +245,3 @@\n-$(foreach v, $(JVM_VARIANTS), $(eval $(call DeclareHotspotGensrcRecipe,$v)))\n+ifeq ($(call isTargetOs, android ios), false)\n+  $(foreach v, $(JVM_VARIANTS), $(eval $(call DeclareHotspotGensrcRecipe,$v)))\n+endif\n@@ -261,1 +263,3 @@\n-$(foreach v, $(JVM_VARIANTS), $(eval $(call DeclareHotspotStaticLibsRecipe,$v)))\n+ifeq ($(call isTargetOs, android ios), false)\n+  $(foreach v, $(JVM_VARIANTS), $(eval $(call DeclareHotspotStaticLibsRecipe,$v)))\n+endif\n","filename":"make\/Main.gmk","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-fi\n+endif\n","filename":"make\/common\/modules\/LauncherCommon.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -216,1 +216,1 @@\n-      ifeq ($(call isTargetOs, macosx aix), true)\n+      ifeq ($(call isTargetOs, macosx aix ios), true)\n","filename":"make\/common\/native\/Paths.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-ifeq ($(call isTargetOs, linux aix), true)\n+ifeq ($(call isTargetOs, linux aix android), true)\n","filename":"make\/modules\/java.desktop\/Gensrc.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-ifeq ($(call isTargetOs, macosx), true)\n+ifeq ($(call isTargetOs, macosx android ios), true)\n","filename":"make\/modules\/java.desktop\/Java.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,3 @@\n-include lib\/Awt2dLibraries.gmk\n+ifeq ($(call isTargetOs, android ios), false)\n+  include lib\/Awt2dLibraries.gmk\n+endif\n@@ -43,1 +45,1 @@\n-ifeq ($(call isTargetOs, aix), false)\n+ifeq ($(call isTargetOs, aix android ios), false)\n","filename":"make\/modules\/java.desktop\/Lib.gmk","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,25 +33,26 @@\n-$(eval $(call SetupJdkLibrary, BUILD_LIBINSTRUMENT, \\\n-    NAME := instrument, \\\n-    OPTIMIZATION := LOW, \\\n-    CFLAGS_windows := -Dstrcasecmp=stricmp, \\\n-    CFLAGS_debug := -DJPLIS_LOGGING, \\\n-    CFLAGS_release := -DNO_JPLIS_LOGGING, \\\n-    EXTRA_HEADER_DIRS := java.base:libjli, \\\n-    LDFLAGS_linux := -L$(call FindLibDirForModule, java.base), \\\n-    LDFLAGS_macosx := -L$(call FindLibDirForModule, java.base), \\\n-    LDFLAGS_aix := -L$(SUPPORT_OUTPUTDIR)\/native\/java.base, \\\n-    JDK_LIBS := $(JDKLIB_LIBS), \\\n-    JDK_LIBS_linux := -ljli, \\\n-    JDK_LIBS_macosx := -ljli, \\\n-    JDK_LIBS_aix := -ljli_static, \\\n-    JDK_LIBS_windows := $(WIN_JAVA_LIB) \\\n-        $(SUPPORT_OUTPUTDIR)\/native\/java.base\/libjli\/jli.lib jvm.lib, \\\n-    LIBS_unix := $(LIBZ_LIBS), \\\n-    LIBS_linux := $(LIBDL), \\\n-    LIBS_aix := $(LIBDL) -liconv, \\\n-    LIBS_macosx := -liconv \\\n-        -framework ApplicationServices \\\n-        -framework Cocoa \\\n-        -framework Security, \\\n-    LIBS_windows := advapi32.lib, \\\n-))\n+ifeq ($(call isTargetOs, android ios), false)\n+  $(eval $(call SetupJdkLibrary, BUILD_LIBINSTRUMENT, \\\n+      NAME := instrument, \\\n+      OPTIMIZATION := LOW, \\\n+      CFLAGS_windows := -Dstrcasecmp=stricmp, \\\n+      CFLAGS_debug := -DJPLIS_LOGGING, \\\n+      CFLAGS_release := -DNO_JPLIS_LOGGING, \\\n+      EXTRA_HEADER_DIRS := java.base:libjli, \\\n+      LDFLAGS_linux := -L$(call FindLibDirForModule, java.base), \\\n+      LDFLAGS_macosx := -L$(call FindLibDirForModule, java.base), \\\n+      LDFLAGS_aix := -L$(SUPPORT_OUTPUTDIR)\/native\/java.base, \\\n+      JDK_LIBS := $(JDKLIB_LIBS), \\\n+      JDK_LIBS_linux := -ljli, \\\n+      JDK_LIBS_macosx := -ljli, \\\n+      JDK_LIBS_aix := -ljli_static, \\\n+      JDK_LIBS_windows := $(WIN_JAVA_LIB) \\\n+          $(SUPPORT_OUTPUTDIR)\/native\/java.base\/libjli\/jli.lib jvm.lib, \\\n+      LIBS_unix := $(LIBZ_LIBS), \\\n+      LIBS_linux := $(LIBDL), \\\n+      LIBS_aix := $(LIBDL) -liconv, \\\n+      LIBS_macosx := -liconv \\\n+          -framework ApplicationServices \\\n+          -framework Cocoa \\\n+          -framework Security, \\\n+      LIBS_windows := advapi32.lib, \\\n+  ))\n@@ -59,4 +60,8 @@\n-ifeq ($(call isTargetOs, aix), true)\n-  $(BUILD_LIBINSTRUMENT): $(call FindStaticLib, java.base, jli_static)\n-else\n-  $(BUILD_LIBINSTRUMENT): $(call FindLib, java.base, jli)\n+  ifeq ($(call isTargetOs, aix), true)\n+    $(BUILD_LIBINSTRUMENT): $(call FindStaticLib, java.base, jli_static)\n+  else\n+    $(BUILD_LIBINSTRUMENT): $(call FindLib, java.base, jli)\n+  endif\n+  $(BUILD_LIBINSTRUMENT): $(call FindLib, java.base, java)\n+\n+  TARGETS += $(BUILD_LIBINSTRUMENT)\n@@ -64,1 +69,0 @@\n-$(BUILD_LIBINSTRUMENT): $(call FindLib, java.base, java)\n@@ -66,1 +70,1 @@\n-TARGETS += $(BUILD_LIBINSTRUMENT)\n+################################################################################\n","filename":"make\/modules\/java.instrument\/Lib.gmk","additions":35,"deletions":31,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -56,17 +56,18 @@\n-$(eval $(call SetupJdkLibrary, BUILD_LIBSAPROC, \\\n-    NAME := saproc, \\\n-    LINK_TYPE := $(LIBSAPROC_LINK_TYPE), \\\n-    OPTIMIZATION := HIGH, \\\n-    DISABLED_WARNINGS_gcc := sign-compare, \\\n-    DISABLED_WARNINGS_gcc_ps_core.c := pointer-arith, \\\n-    DISABLED_WARNINGS_clang_ps_core.c := pointer-arith, \\\n-    DISABLED_WARNINGS_clang := sign-compare, \\\n-    DISABLED_WARNINGS_clang_libproc_impl.c := format-nonliteral, \\\n-    DISABLED_WARNINGS_clang_sadis.c := format-nonliteral, \\\n-    CFLAGS := $(LIBSAPROC_CFLAGS), \\\n-    CXXFLAGS := $(LIBSAPROC_CFLAGS) $(LIBSAPROC_CXXFLAGS), \\\n-    EXTRA_SRC := $(LIBSAPROC_EXTRA_SRC), \\\n-    JDK_LIBS_unix := -ljava, \\\n-    JDK_LIBS_windows := $(WIN_JAVA_LIB), \\\n-    LIBS_linux := $(LIBDL), \\\n-    LIBS_macosx := \\\n+ifeq ($(call isTargetOs, android ios), false)\n+  $(eval $(call SetupJdkLibrary, BUILD_LIBSAPROC, \\\n+      NAME := saproc, \\\n+      LINK_TYPE := $(LIBSAPROC_LINK_TYPE), \\\n+      OPTIMIZATION := HIGH, \\\n+      DISABLED_WARNINGS_gcc := sign-compare, \\\n+      DISABLED_WARNINGS_gcc_ps_core.c := pointer-arith, \\\n+      DISABLED_WARNINGS_clang_ps_core.c := pointer-arith, \\\n+      DISABLED_WARNINGS_clang := sign-compare, \\\n+      DISABLED_WARNINGS_clang_libproc_impl.c := format-nonliteral, \\\n+      DISABLED_WARNINGS_clang_sadis.c := format-nonliteral, \\\n+      CFLAGS := $(LIBSAPROC_CFLAGS), \\\n+      CXXFLAGS := $(LIBSAPROC_CFLAGS) $(LIBSAPROC_CXXFLAGS), \\\n+      EXTRA_SRC := $(LIBSAPROC_EXTRA_SRC), \\\n+      JDK_LIBS_unix := -ljava, \\\n+      JDK_LIBS_windows := $(WIN_JAVA_LIB), \\\n+      LIBS_linux := $(LIBDL), \\\n+      LIBS_macosx := \\\n@@ -77,2 +78,5 @@\n-    LIBS_windows := dbgeng.lib, \\\n-))\n+      LIBS_windows := dbgeng.lib, \\\n+  ))\n+\n+  TARGETS += $(BUILD_LIBSAPROC)\n+endif\n@@ -80,1 +84,0 @@\n-TARGETS += $(BUILD_LIBSAPROC)\n","filename":"make\/modules\/jdk.hotspot.agent\/Lib.gmk","additions":23,"deletions":20,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -53,17 +53,18 @@\n-$(eval $(call SetupJdkLibrary, BUILD_LIBJDWP, \\\n-    NAME := jdwp, \\\n-    OPTIMIZATION := LOW, \\\n-    CFLAGS := -DJDWP_LOGGING, \\\n-    DISABLED_WARNINGS_gcc_SDE.c := unused-function, \\\n-    DISABLED_WARNINGS_clang_error_messages.c := format-nonliteral, \\\n-    DISABLED_WARNINGS_clang_EventRequestImpl.c := self-assign, \\\n-    DISABLED_WARNINGS_clang_inStream.c := sometimes-uninitialized, \\\n-    DISABLED_WARNINGS_clang_log_messages.c := format-nonliteral, \\\n-    EXTRA_HEADER_DIRS := \\\n-        include \\\n-        libjdwp\/export, \\\n-    JDK_LIBS := $(JDKLIB_LIBS), \\\n-    LIBS_linux := $(LIBDL), \\\n-    LIBS_macosx := -liconv, \\\n-    LIBS_aix := -liconv, \\\n-))\n+ifeq ($(call isTargetOs, android ios), false)\n+  $(eval $(call SetupJdkLibrary, BUILD_LIBJDWP, \\\n+      NAME := jdwp, \\\n+      OPTIMIZATION := LOW, \\\n+      CFLAGS := -DJDWP_LOGGING, \\\n+      DISABLED_WARNINGS_gcc_SDE.c := unused-function, \\\n+      DISABLED_WARNINGS_clang_error_messages.c := format-nonliteral, \\\n+      DISABLED_WARNINGS_clang_EventRequestImpl.c := self-assign, \\\n+      DISABLED_WARNINGS_clang_inStream.c := sometimes-uninitialized, \\\n+      DISABLED_WARNINGS_clang_log_messages.c := format-nonliteral, \\\n+      EXTRA_HEADER_DIRS := \\\n+          include \\\n+          libjdwp\/export, \\\n+      JDK_LIBS := $(JDKLIB_LIBS), \\\n+      LIBS_linux := $(LIBDL), \\\n+      LIBS_macosx := -liconv, \\\n+      LIBS_aix := -liconv, \\\n+  ))\n@@ -71,1 +72,1 @@\n-$(BUILD_LIBJDWP): $(call FindLib, java.base, java)\n+  $(BUILD_LIBJDWP): $(call FindLib, java.base, java)\n@@ -73,1 +74,2 @@\n-TARGETS += $(BUILD_LIBJDWP)\n+  TARGETS += $(BUILD_LIBJDWP)\n+endif\n","filename":"make\/modules\/jdk.jdwp.agent\/Lib.gmk","additions":21,"deletions":19,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -109,0 +109,1 @@\n+#ifndef TARGET_IOS \/\/ deprecated on ios\n@@ -124,0 +125,1 @@\n+#endif\n","filename":"src\/java.base\/macosx\/native\/libnio\/fs\/UTIFileTypeDetector.c","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#ifndef TARGET_IOS\n@@ -44,0 +45,1 @@\n+#endif\n@@ -274,0 +276,1 @@\n+#ifndef TARGET_IOS\n@@ -317,0 +320,3 @@\n+#else\n+    return 100;\n+#endif\n","filename":"src\/jdk.management\/unix\/native\/libmanagement_ext\/OperatingSystemImpl.c","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}