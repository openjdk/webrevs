{"files":[{"patch":"@@ -461,0 +461,4 @@\n+  elif test \"x$OPENJDK_TARGET_OS\" = xios; then\n+    CFLAGS_OS_DEF_JDK=\"-DMACOSX -D_ALLBSD_SOURCE -DTARGET_IOS -D_DARWIN_UNLIMITED_SELECT\"\n+  elif test \"x$OPENJDK_TARGET_OS\" = xandroid; then\n+    CFLAGS_OS_DEF_JDK=\"-target aarch64-linux-android -D__USE_BSD\"\n@@ -479,0 +483,15 @@\n+<<<<<<< HEAD\n+=======\n+  # Setup some hard coded includes\n+  ALWAYS_CFLAGS_JDK=\" \\\n+      -I\\$(SUPPORT_OUTPUTDIR)\/modules_include\/java.base \\\n+      -I\\$(SUPPORT_OUTPUTDIR)\/modules_include\/java.base\/\\$(OPENJDK_TARGET_OS_INCLUDE_SUBDIR) \\\n+      -I${TOPDIR}\/src\/java.base\/share\/native\/libjava \\\n+      -I${TOPDIR}\/src\/java.base\/$OPENJDK_TARGET_OS_TYPE\/native\/libjava \\\n+      -I${TOPDIR}\/src\/hotspot\/share\/include \\\n+      -I${TOPDIR}\/src\/hotspot\/os\/${HOTSPOT_TARGET_OS_TYPE}\/include\"\n+\n+  if test \"x$OPENJDK_TARGET_OS\" = xios; then\n+    ALWAYS_CFLAGS_JDK=\"$ALWAYS_CFLAGS_JDK -I${TOPDIR}\/src\/java.base\/macosx\/native\/libjava\"\n+  fi\n+>>>>>>> a4ce21604361834a4afa6282c68f68341ea5ffdd\n","filename":"make\/autoconf\/flags-cflags.m4","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -185,0 +185,1 @@\n+<<<<<<< HEAD\n@@ -188,0 +189,5 @@\n+=======\n+    if test \"x$OPENJDK_TARGET_OS\" = xmacosx || test \"x$OPENJDK_TARGET_OS\" = xios ; then\n+      # For full static builds, we're overloading the SHARED_LIBRARY\n+      # variables in order to limit the amount of changes required.\n+>>>>>>> a4ce21604361834a4afa6282c68f68341ea5ffdd\n@@ -226,0 +232,28 @@\n+  if test \"x$OPENJDK_TARGET_OS\" = \"xios\" ; then\n+    if test -n \"$XCODEBUILD\"; then\n+      # On Mac OS X, default toolchain to clang after Xcode 5\n+      XCODE_VERSION_OUTPUT=`\"$XCODEBUILD\" -version | $HEAD -n 1`\n+      $ECHO \"$XCODE_VERSION_OUTPUT\" | $GREP \"Xcode \" > \/dev\/null\n+      if test $? -ne 0; then\n+        AC_MSG_NOTICE([xcodebuild output: $XCODE_VERSION_OUTPUT])\n+        AC_MSG_ERROR([Failed to determine Xcode version.])\n+      fi\n+      XCODE_MAJOR_VERSION=`$ECHO $XCODE_VERSION_OUTPUT | \\\n+          $SED -e 's\/^Xcode \\(@<:@1-9@:>@@<:@0-9.@:>@*\\)\/\\1\/' | \\\n+          $CUT -f 1 -d .`\n+      AC_MSG_NOTICE([Xcode major version: $XCODE_MAJOR_VERSION])\n+      if test $XCODE_MAJOR_VERSION -ge 5; then\n+          DEFAULT_TOOLCHAIN=\"clang\"\n+      else\n+          DEFAULT_TOOLCHAIN=\"gcc\"\n+      fi\n+    else\n+      # If Xcode is not installed, but the command line tools are\n+      # then we can't run xcodebuild. On these systems we should\n+      # default to clang\n+      DEFAULT_TOOLCHAIN=\"clang\"\n+    fi\n+  else\n+    # First toolchain type in the list is the default\n+    DEFAULT_TOOLCHAIN=${VALID_TOOLCHAINS%% *}\n+  fi\n@@ -877,5 +911,7 @@\n-    TOOLCHAIN_EXTRACT_COMPILER_VERSION(BUILD_CC, [BuildC])\n-    TOOLCHAIN_EXTRACT_COMPILER_VERSION(BUILD_CXX, [BuildC++])\n-    TOOLCHAIN_PREPARE_FOR_VERSION_COMPARISONS([BUILD_], [OPENJDK_BUILD_], [build ])\n-    TOOLCHAIN_EXTRACT_LD_VERSION(BUILD_LD, [build linker])\n-    TOOLCHAIN_PREPARE_FOR_LD_VERSION_COMPARISONS([BUILD_], [OPENJDK_BUILD_])\n+    if test \"x$OPENJDK_TARGET_OS\" != \"xandroid\"; then\n+      TOOLCHAIN_EXTRACT_COMPILER_VERSION(BUILD_CC, [BuildC])\n+      TOOLCHAIN_EXTRACT_COMPILER_VERSION(BUILD_CXX, [BuildC++])\n+      TOOLCHAIN_PREPARE_FOR_VERSION_COMPARISONS([BUILD_], [OPENJDK_BUILD_], [build ])\n+      TOOLCHAIN_EXTRACT_LD_VERSION(BUILD_LD, [build linker])\n+      TOOLCHAIN_PREPARE_FOR_LD_VERSION_COMPARISONS([BUILD_], [OPENJDK_BUILD_])\n+    fi\n","filename":"make\/autoconf\/toolchain.m4","additions":41,"deletions":5,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -38,0 +38,21 @@\n+<<<<<<< HEAD\n+=======\n+FindSrcDirsForLib += \\\n+  $(call uniq, $(wildcard \\\n+      $(TOPDIR)\/src\/$(strip $1)\/$(OPENJDK_TARGET_OS)\/native\/lib$(strip $2) \\\n+      $(TOPDIR)\/src\/$(strip $1)\/$(OPENJDK_TARGET_OS_TYPE)\/native\/lib$(strip $2) \\\n+      $(TOPDIR)\/src\/$(strip $1)\/share\/native\/lib$(strip $2)))\n+\n+ifeq ($(OPENJDK_TARGET_OS), ios)\n+  FindSrcDirsForLib += \\\n+    $(call uniq, $(wildcard \\\n+        $(TOPDIR)\/src\/$(strip $1)\/macosx\/native\/lib$(strip $2)))\n+endif\n+\n+ifeq ($(OPENJDK_TARGET_OS), android)\n+  FindSrcDirsForLib += \\\n+    $(call uniq, $(wildcard \\\n+        $(TOPDIR)\/src\/$(strip $1)\/linux\/native\/lib$(strip $2)))\n+endif\n+\n+>>>>>>> a4ce21604361834a4afa6282c68f68341ea5ffdd\n","filename":"make\/common\/JdkNativeCompilation.gmk","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"}]}