{"files":[{"patch":"@@ -2,1 +2,1 @@\n-project=jdk\n+project=mobile\n","filename":".jcheck\/conf","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -13,0 +13,52 @@\n+\n+## Build static image for iOS\n+\n+> [!NOTE]\n+> Follow the instructions in [building.md](building.md) to make sure\n+> you can build the JDK targeting macOS before trying to build for iOS\n+\n+### Pre-requisites\n+Following are the prerequisites to build JDK on Mac targeting iOS:\n+1. Download and install JDK24 for macOS. You can use the JDK you just built targeting macOS in the above note instead.\n+2. Download the [support zip](https:\/\/download2.gluonhq.com\/mobile\/mobile-support-20250106.zip) which contains an ios build for libffi and cups. Unzip it in an easy to use location.\n+3. Install `autoconf` on mac via homebrew: `brew install autoconf`\n+\n+### Clone the mobile repository\n+Clone the openjdk\/mobile repository. The following command can be used:\n+\n+```\n+git clone git@github.com:openjdk\/mobile.git\n+```\n+\n+### Configure\n+Modify the configure script below so that it has the correct paths to the unzipped 'support'\n+directory, and the correct location of the iPhoneOS.platform.\n+\n+```\n+sh configure \\\n+--disable-warnings-as-errors \\\n+--openjdk-target=aarch64-macos-ios \\\n+--with-libffi-include=<support-dir-path>\/libffi\/include \\\n+--with-libffi-lib=<support-dir-path>\/libffi\/libs \\\n+--with-cups-include=<support-dir-path>\/cups-2.3.6\n+--with-sysroot=\/Applications\/Xcode.app\/Contents\/Developer\/Platforms\/iPhoneOS.platform\/Developer\/SDKs\/iPhoneOS.sdk \\\n+```\n+\n+If you need to tell configure the path of your boot JDK, or if configure fails with an error saying\n+it can't find a boot JDK, for instance if you downloaded a JDK in compressed archive form rather\n+than with an installer, you can pass `--with-boot-jdk=<java-directory-path>` to configure.\n+\n+For iOS the default JVM used is Zero, since iOS has no writeable and executable sections. However, if\n+you plan to run the JDK on the simulator for testing purposes, you can use the other JVM variants such\n+as Server. To do this, pass `--with-jvm-variants=server` to configure (Or any other valid option, which\n+are, in no particular order: server, client, minimal, core, zero, custom). Do note that passing zero to\n+this option is redundant since Zero is already the default for iOS.\n+\n+### Build static image\n+Execute the `make` command:\n+\n+```\n+make CONF=ios-aarch64-zero-release static-libs-image\n+```\n+\n+Once the build is successful, it should have created a directory in `build\/ios-aarch64-zero-release\/images\/static-libs\/lib\/zero` with a file `libjvm.a`.\n","filename":"README.md","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -465,0 +465,6 @@\n+  elif test \"x$OPENJDK_TARGET_OS\" = xandroid; then\n+    CFLAGS_OS_DEF_JVM=\"-target aarch64-linux-android -DLINUX -D_ALLBSD_SOURCE -DANDROID\"\n+    CFLAGS_OS_DEF_JDK=\"-target aarch64-linux-android -DLINUX -D__USE_BSD\"\n+  elif test \"x$OPENJDK_TARGET_OS\" = xios; then\n+    CFLAGS_OS_DEF_JVM=\"-D_ALLBSD_SOURCE -D__IOS__ -D_XOPEN_SOURCE\"\n+    CFLAGS_OS_DEF_JDK=\"-D_ALLBSD_SOURCE -D__IOS__\"\n","filename":"make\/autoconf\/flags-cflags.m4","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -136,0 +136,3 @@\n+  if test \"x$OPENJDK_TARGET_OS\" = xandroid; then\n+    JVM_BASIC_ASFLAGS=\"-target aarch64-linux-android\"\n+  fi\n","filename":"make\/autoconf\/flags-other.m4","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,1 +57,5 @@\n-    with_jvm_variants=\"server\"\n+    if test \"x$OPENJDK_TARGET_OS\" = xios; then\n+      with_jvm_variants=\"zero\"\n+    else\n+      with_jvm_variants=\"server\"\n+    fi\n","filename":"make\/autoconf\/hotspot.m4","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -108,0 +108,2 @@\n+      test \"x$OPENJDK_TARGET_OS\" != \"xandroid\" && \\\n+      test \"x$OPENJDK_TARGET_OS\" != \"xios\" && \\\n","filename":"make\/autoconf\/lib-freetype.m4","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  if test \"x$OPENJDK_TARGET_OS\" = xwindows || test \"x$OPENJDK_TARGET_OS\" = xmacosx; then\n+  if test \"x$OPENJDK_TARGET_OS\" = xwindows || test \"x$OPENJDK_TARGET_OS\" = xmacosx || test \"x$OPENJDK_TARGET_OS\" = xandroid || test \"x$OPENJDK_TARGET_OS\" = xios; then\n@@ -55,1 +55,1 @@\n-  if test \"x$OPENJDK_TARGET_OS\" = xwindows || test \"x$OPENJDK_TARGET_OS\" = xmacosx; then\n+  if test \"x$OPENJDK_TARGET_OS\" = xwindows || test \"x$OPENJDK_TARGET_OS\" = xmacosx || test \"x$OPENJDK_TARGET_OS\" = xios; then\n","filename":"make\/autoconf\/libraries.m4","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -201,0 +201,8 @@\n+    *android*)\n+      VAR_OS=android\n+      VAR_OS_TYPE=unix\n+      ;;\n+    *ios*)\n+      VAR_OS=ios\n+      VAR_OS_TYPE=unix\n+      ;;\n@@ -531,0 +539,3 @@\n+  if test \"x$OPENJDK_$1_OS\" = xios; then\n+    HOTSPOT_$1_OS=bsd\n+  fi\n","filename":"make\/autoconf\/platform.m4","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -887,5 +887,7 @@\n-    TOOLCHAIN_EXTRACT_COMPILER_VERSION(BUILD_CC, [BuildC])\n-    TOOLCHAIN_EXTRACT_COMPILER_VERSION(BUILD_CXX, [BuildC++])\n-    TOOLCHAIN_PREPARE_FOR_VERSION_COMPARISONS([BUILD_], [OPENJDK_BUILD_], [build ])\n-    TOOLCHAIN_EXTRACT_LD_VERSION(BUILD_LD, [build linker])\n-    TOOLCHAIN_PREPARE_FOR_LD_VERSION_COMPARISONS([BUILD_], [OPENJDK_BUILD_])\n+    if test \"x$OPENJDK_TARGET_OS\" != \"xandroid\"; then\n+      TOOLCHAIN_EXTRACT_COMPILER_VERSION(BUILD_CC, [BuildC])\n+      TOOLCHAIN_EXTRACT_COMPILER_VERSION(BUILD_CXX, [BuildC++])\n+      TOOLCHAIN_PREPARE_FOR_VERSION_COMPARISONS([BUILD_], [OPENJDK_BUILD_], [build ])\n+      TOOLCHAIN_EXTRACT_LD_VERSION(BUILD_LD, [build linker])\n+      TOOLCHAIN_PREPARE_FOR_LD_VERSION_COMPARISONS([BUILD_], [OPENJDK_BUILD_])\n+    fi\n","filename":"make\/autoconf\/toolchain.m4","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -39,0 +39,12 @@\n+ifeq ($(OPENJDK_TARGET_OS), android)\n+    FindSrcDirsForComponent += \\\n+        $(call uniq, $(wildcard \\\n+            $(TOPDIR)\/src\/$(strip $1)\/linux\/native\/$(strip $2)))\n+endif\n+\n+ifeq ($(OPENJDK_TARGET_OS), ios)\n+    FindSrcDirsForComponent += \\\n+        $(call uniq, $(wildcard \\\n+            $(TOPDIR)\/src\/$(strip $1)\/macosx\/native\/$(strip $2)))\n+endif\n+\n","filename":"make\/common\/JdkNativeCompilation.gmk","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -86,0 +86,7 @@\n+ifeq ($(OPENJDK_TARGET_OS), android)\n+  SRC_SUBDIRS += linux\/classes\n+endif\n+ifeq ($(OPENJDK_TARGET_OS), ios)\n+  SRC_SUBDIRS += macosx\/classes\n+endif\n+\n","filename":"make\/common\/Modules.gmk","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -219,1 +219,1 @@\n-      ifeq ($(call isTargetOs, macosx aix), true)\n+      ifeq ($(call isTargetOs, macosx ios aix), true)\n","filename":"make\/common\/native\/Paths.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,0 +55,8 @@\n+ifeq ($(call isTargetOs, android ios), true)\n+  JVM_CFLAGS_INCLUDES += \\\n+    -I$(TOPDIR)\/src\/hotspot\/os_cpu\/linux_aarch64 \\\n+    -I$(TOPDIR)\/src\/hotspot\/os\/linux \\\n+    -I$(TOPDIR)\/src\/hotspot\/os\/bsd \\\n+    #\n+endif\n+\n","filename":"make\/hotspot\/lib\/JvmFlags.gmk","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-ifeq ($(call isTargetOs, linux aix), true)\n+ifeq ($(call isTargetOs, linux aix android), true)\n","filename":"make\/modules\/java.desktop\/Gensrc.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-ifeq ($(call isTargetOs, macosx), true)\n+ifeq ($(call isTargetOs, macosx android ios), true)\n","filename":"make\/modules\/java.desktop\/Java.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,2 +37,4 @@\n-include lib\/AwtLibraries.gmk\n-include lib\/ClientLibraries.gmk\n+ifeq ($(call isTargetOs, android ios), false)\n+  include lib\/AwtLibraries.gmk\n+  include lib\/ClientLibraries.gmk\n+endif\n@@ -40,1 +42,1 @@\n-ifeq ($(call isTargetOs, aix), false)\n+ifeq ($(call isTargetOs, aix android ios), false)\n","filename":"make\/modules\/java.desktop\/Lib.gmk","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-# libprefs on macosx does not use the unix code\n-ifeq ($(call isTargetOs, macosx), true)\n+# libprefs on macosx or ios does not use the unix code\n+ifeq ($(call isTargetOs, macosx ios), true)\n","filename":"make\/modules\/java.prefs\/Lib.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#if defined(__APPLE__)\n+#if (defined(__APPLE__) && !defined(__IOS__))\n","filename":"src\/hotspot\/os\/bsd\/memMapPrinter_macosx.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -457,0 +457,1 @@\n+#ifndef __IOS__\n@@ -461,0 +462,1 @@\n+#endif\n@@ -467,0 +469,1 @@\n+#ifndef __IOS__\n@@ -474,0 +477,6 @@\n+#else\n+    size_t nlen = strlen(user_home_dir) + 11;\n+    char *iosuser_home = NEW_C_HEAP_ARRAY(char, nlen, mtInternal);\n+    snprintf(iosuser_home, nlen, \"%s\/Documents\", user_home_dir);\n+    Arguments::set_java_home(iosuser_home);\n+#endif\n@@ -1695,0 +1704,3 @@\n+#ifdef __IOS__\n+      ;\n+#else\n@@ -1696,0 +1708,1 @@\n+#endif\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+#ifndef __IOS__\n@@ -485,0 +486,1 @@\n+#endif \/\/ IOS\n","filename":"src\/hotspot\/os\/bsd\/os_perf_bsd.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1372,1 +1372,1 @@\n-#if defined(_ALLBSD_SOURCE)\n+#if defined(_ALLBSD_SOURCE) && !defined(ANDROID)\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -325,0 +325,1 @@\n+#ifndef __IOS__\n@@ -326,0 +327,1 @@\n+#endif\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/os_bsd_zero.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-#if defined(LINUX) || defined(_WIN64) || defined(__APPLE__)\n+#if defined(LINUX) || defined(_WIN64) || (defined(__APPLE__) && !defined(__IOS__))\n","filename":"src\/hotspot\/share\/nmt\/memMapPrinter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-#if defined(LINUX) || defined(_WIN64) || defined(__APPLE__)\n+#if defined(LINUX) || defined(_WIN64) || (defined(__APPLE__) && !defined(__IOS__))\n","filename":"src\/hotspot\/share\/nmt\/memMapPrinter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2496,0 +2496,1 @@\n+#ifndef __IOS__\n@@ -2502,0 +2503,1 @@\n+#endif \/\/ IOS\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1516,0 +1516,1 @@\n+#ifndef __IOS__\n@@ -1517,0 +1518,3 @@\n+#else\n+  char* jimage = format_boot_path(\"%\/Documents\/lib\/\" MODULES_IMAGE_NAME, home, home_len, fileSep, pathSep);\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-#if defined(LINUX) || defined(_WIN64) || defined(__APPLE__)\n+#if defined(LINUX) || defined(_WIN64) || (defined(__APPLE__) && !defined(__IOS__))\n@@ -1164,1 +1164,1 @@\n-#if defined(LINUX) || defined(_WIN64) || defined(__APPLE__)\n+#if defined(LINUX) || defined(_WIN64) || (defined(__APPLE__) && !defined(__IOS__))\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -826,1 +826,1 @@\n-#if defined(LINUX) || defined(_WIN64) || defined(__APPLE__)\n+#if defined(LINUX) || defined(_WIN64) || (defined(__APPLE__) && !defined(__IOS__))\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#if !defined(_WINDOWS) && !defined(__APPLE__)\n+#if !defined(_WINDOWS) && (!defined(__APPLE__) || defined(__IOS__))\n","filename":"src\/hotspot\/share\/utilities\/decoder_elf.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-#ifndef __OpenBSD__\n+#if !defined(__OpenBSD__) && !defined(__IOS__)\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions_gcc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#ifndef __IOS__\n@@ -35,0 +36,10 @@\n+#else\n+#include <stdlib.h>\n+#include <string.h>\n+#include <sys\/param.h>\n+#include <objc\/runtime.h>\n+#include <objc\/objc.h>\n+#include <objc\/message.h>\n+#include <CoreFoundation\/CoreFoundation.h>\n+#include <CoreFoundation\/CFlocale.h>\n+#endif\n@@ -226,0 +237,1 @@\n+#ifndef __IOS__\n@@ -494,0 +506,1 @@\n+#endif\n","filename":"src\/java.base\/macosx\/native\/libjava\/java_props_macosx.c","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#ifndef __IOS__\n@@ -46,0 +47,1 @@\n+#endif\n@@ -240,0 +242,3 @@\n+#ifdef __IOS__\n+static jboolean awtLoaded = 0;\n+#else\n@@ -241,0 +246,1 @@\n+#endif\n@@ -248,0 +254,3 @@\n+#ifdef __IOS__\n+    awtLoaded = 1;\n+#else\n@@ -249,0 +258,1 @@\n+#endif\n@@ -277,0 +287,1 @@\n+#ifndef __IOS__\n@@ -291,0 +302,1 @@\n+#endif\n@@ -324,0 +336,1 @@\n+#ifndef __IOS__\n@@ -325,0 +338,1 @@\n+#endif\n@@ -899,0 +913,1 @@\n+#ifndef __IOS__\n@@ -929,0 +944,3 @@\n+#else\n+  return ContinueInNewThread(ifn, threadStackSize, argc, argv, mode, what, ret);\n+#endif\n","filename":"src\/java.base\/macosx\/native\/libjli\/java_md_macosx.m","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -109,0 +109,1 @@\n+#ifndef __IOS__ \/\/ deprecated on ios\n@@ -124,0 +125,1 @@\n+#endif\n","filename":"src\/java.base\/macosx\/native\/libnio\/fs\/UTIFileTypeDetector.c","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-#if defined(__linux__) || defined(MACOSX)\n+#if defined(__linux__) || defined(MACOSX) || defined(__IOS__)\n","filename":"src\/java.base\/unix\/native\/libjava\/TimeZone_md.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -224,1 +224,1 @@\n-#elif defined(MACOSX)\n+#elif defined(MACOSX) || defined(__IOS__)\n@@ -408,1 +408,1 @@\n-#elif defined(MACOSX)\n+#elif defined(MACOSX) || defined(__IOS__)\n","filename":"src\/java.base\/unix\/native\/libjava\/UnixFileSystem_md.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -526,0 +526,4 @@\n+#ifdef __IOS__\n+    const char *homeDir = getenv(\"HOME\");\n+    sprops.user_dir = strdup(homeDir);\n+#else\n@@ -536,0 +540,1 @@\n+#endif\n","filename":"src\/java.base\/unix\/native\/libjava\/java_props_md.c","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#ifndef __IOS__\n@@ -29,0 +30,1 @@\n+#endif\n","filename":"src\/java.base\/unix\/native\/libnet\/NetworkInterface.c","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,4 @@\n+#ifdef ANDROID\n+#include <netinet\/in.h>\n+#endif\n+\n","filename":"src\/java.base\/unix\/native\/libnet\/net_util_md.h","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -638,1 +638,1 @@\n-#ifndef MACOSX\n+#if !defined(MACOSX) && !defined(__IOS__)\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#ifndef ANDROID\n@@ -39,0 +40,1 @@\n+#endif\n","filename":"src\/jdk.hotspot.agent\/linux\/native\/libsaproc\/elfmacros.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -188,0 +188,3 @@\n+#ifdef ANDROID\n+    return false;\n+#else\n@@ -249,0 +252,1 @@\n+#endif \/\/ ANDROID\n","filename":"src\/jdk.hotspot.agent\/linux\/native\/libsaproc\/ps_core.c","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#ifndef __IOS__\n@@ -27,0 +28,3 @@\n+#else\n+#include <objc\/message.h>\n+#endif\n@@ -43,0 +47,1 @@\n+#ifndef __IOS__\n@@ -44,0 +49,1 @@\n+#endif\n@@ -842,0 +848,1 @@\n+#ifndef __IOS__\n@@ -849,0 +856,1 @@\n+#endif\n@@ -1213,0 +1221,1 @@\n+#ifndef __IOS__\n@@ -1219,0 +1228,1 @@\n+#endif\n","filename":"src\/jdk.hotspot.agent\/macosx\/native\/libsaproc\/MacosxDebuggerLocal.m","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+#ifndef __IOS__\n@@ -44,0 +45,1 @@\n+#endif\n@@ -274,0 +276,1 @@\n+#ifndef __IOS__\n@@ -317,0 +320,3 @@\n+#else \/\/ IOS\n+    return -1;\n+#endif\n","filename":"src\/jdk.management\/unix\/native\/libmanagement_ext\/OperatingSystemImpl.c","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}