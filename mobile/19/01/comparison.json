{"files":[{"patch":"@@ -2,1 +2,1 @@\n-project=jdk\n+project=mobile\n","filename":".jcheck\/conf","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,0 +42,8 @@\n+        *-ios* )\n+            echo $1\n+            exit\n+            ;;\n+        *-android* )\n+            echo $1\n+            exit\n+            ;;\n","filename":"make\/autoconf\/build-aux\/config.sub","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -461,0 +461,4 @@\n+  elif test \"x$OPENJDK_TARGET_OS\" = xios; then\n+    CFLAGS_OS_DEF_JDK=\"-DMACOSX -D_ALLBSD_SOURCE -DTARGET_IOS -D_DARWIN_UNLIMITED_SELECT\"\n+  elif test \"x$OPENJDK_TARGET_OS\" = xandroid; then\n+    CFLAGS_OS_DEF_JDK=\"-target aarch64-linux-android -D__USE_BSD\"\n@@ -488,0 +492,3 @@\n+  if test \"x$OPENJDK_TARGET_OS\" = xios; then\n+    ALWAYS_CFLAGS_JDK=\"$ALWAYS_CFLAGS_JDK -I${TOPDIR}\/src\/java.base\/macosx\/native\/libjava\"\n+  fi\n","filename":"make\/autoconf\/flags-cflags.m4","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -289,1 +289,9 @@\n-  GLOBAL_CPPFLAGS=\"$SYSROOT_CFLAGS\"\n+  if test \"x$OPENJDK_TARGET_OS\" = xios; then\n+    GLOBAL_CPPFLAGS=\"$MACHINE_FLAG $USER_CFLAGS $SYSROOT_CFLAGS\"\n+    AC_SUBST(GLOBAL_CFLAGS)\n+    AC_SUBST(GLOBAL_CXXFLAGS)\n+    AC_SUBST(GLOBAL_LDFLAGS)\n+    AC_SUBST(GLOBAL_CPPFLAGS)\n+  else\n+    GLOBAL_CPPFLAGS=\"$SYSROOT_CFLAGS\"\n+  fi\n","filename":"make\/autoconf\/flags.m4","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -106,1 +106,3 @@\n-      test \"x$OPENJDK_TARGET_OS\" != \"xaix\"; then\n+      test \"x$OPENJDK_TARGET_OS\" != \"xaix\" && \\\n+      test \"x$OPENJDK_TARGET_OS\" != \"xandroid\" && \\\n+      test \"x$OPENJDK_TARGET_OS\" != \"xios\"; then\n","filename":"make\/autoconf\/lib-freetype.m4","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,2 +45,2 @@\n-  if test \"x$OPENJDK_TARGET_OS\" = xwindows || test \"x$OPENJDK_TARGET_OS\" = xmacosx; then\n-    # No X11 support on windows or macosx\n+  if test \"x$OPENJDK_TARGET_OS\" = xwindows || test \"x$OPENJDK_TARGET_OS\" = xmacosx || test \"x$OPENJDK_TARGET_OS\" = xios || test \"x$OPENJDK_TARGET_OS\" = xandroid; then\n+    # No X11 support on windows, macosx, ios or android\n@@ -55,2 +55,2 @@\n-  if test \"x$OPENJDK_TARGET_OS\" = xwindows || test \"x$OPENJDK_TARGET_OS\" = xmacosx; then\n-    # No fontconfig support on windows or macosx\n+  if test \"x$OPENJDK_TARGET_OS\" = xwindows || test \"x$OPENJDK_TARGET_OS\" = xmacosx || test \"x$OPENJDK_TARGET_OS\" = xios || test \"x$OPENJDK_TARGET_OS\" = xandroid; then\n+    # No fontconfig support on windows, macosx, ios or android\n","filename":"make\/autoconf\/libraries.m4","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -205,0 +205,4 @@\n+    *android*)\n+      VAR_OS=android\n+      VAR_OS_TYPE=unix\n+      ;;\n@@ -209,0 +213,4 @@\n+    *ios*)\n+      VAR_OS=ios\n+      VAR_OS_TYPE=unix\n+      ;;\n","filename":"make\/autoconf\/platform.m4","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -189,1 +189,1 @@\n-    if test \"x$OPENJDK_TARGET_OS\" = xmacosx; then\n+    if test \"x$OPENJDK_TARGET_OS\" = xmacosx || test \"x$OPENJDK_TARGET_OS\" = xios ; then\n@@ -234,0 +234,28 @@\n+  if test \"x$OPENJDK_TARGET_OS\" = \"xios\" ; then\n+    if test -n \"$XCODEBUILD\"; then\n+      # On Mac OS X, default toolchain to clang after Xcode 5\n+      XCODE_VERSION_OUTPUT=`\"$XCODEBUILD\" -version | $HEAD -n 1`\n+      $ECHO \"$XCODE_VERSION_OUTPUT\" | $GREP \"Xcode \" > \/dev\/null\n+      if test $? -ne 0; then\n+        AC_MSG_NOTICE([xcodebuild output: $XCODE_VERSION_OUTPUT])\n+        AC_MSG_ERROR([Failed to determine Xcode version.])\n+      fi\n+      XCODE_MAJOR_VERSION=`$ECHO $XCODE_VERSION_OUTPUT | \\\n+          $SED -e 's\/^Xcode \\(@<:@1-9@:>@@<:@0-9.@:>@*\\)\/\\1\/' | \\\n+          $CUT -f 1 -d .`\n+      AC_MSG_NOTICE([Xcode major version: $XCODE_MAJOR_VERSION])\n+      if test $XCODE_MAJOR_VERSION -ge 5; then\n+          DEFAULT_TOOLCHAIN=\"clang\"\n+      else\n+          DEFAULT_TOOLCHAIN=\"gcc\"\n+      fi\n+    else\n+      # If Xcode is not installed, but the command line tools are\n+      # then we can't run xcodebuild. On these systems we should\n+      # default to clang\n+      DEFAULT_TOOLCHAIN=\"clang\"\n+    fi\n+  else\n+    # First toolchain type in the list is the default\n+    DEFAULT_TOOLCHAIN=${VALID_TOOLCHAINS%% *}\n+  fi\n@@ -885,5 +913,7 @@\n-    TOOLCHAIN_EXTRACT_COMPILER_VERSION(BUILD_CC, [BuildC])\n-    TOOLCHAIN_EXTRACT_COMPILER_VERSION(BUILD_CXX, [BuildC++])\n-    TOOLCHAIN_PREPARE_FOR_VERSION_COMPARISONS([BUILD_], [OPENJDK_BUILD_], [build ])\n-    TOOLCHAIN_EXTRACT_LD_VERSION(BUILD_LD, [build linker])\n-    TOOLCHAIN_PREPARE_FOR_LD_VERSION_COMPARISONS([BUILD_], [OPENJDK_BUILD_])\n+    if test \"x$OPENJDK_TARGET_OS\" != \"xandroid\"; then\n+      TOOLCHAIN_EXTRACT_COMPILER_VERSION(BUILD_CC, [BuildC])\n+      TOOLCHAIN_EXTRACT_COMPILER_VERSION(BUILD_CXX, [BuildC++])\n+      TOOLCHAIN_PREPARE_FOR_VERSION_COMPARISONS([BUILD_], [OPENJDK_BUILD_], [build ])\n+      TOOLCHAIN_EXTRACT_LD_VERSION(BUILD_LD, [build linker])\n+      TOOLCHAIN_PREPARE_FOR_LD_VERSION_COMPARISONS([BUILD_], [OPENJDK_BUILD_])\n+    fi\n","filename":"make\/autoconf\/toolchain.m4","additions":36,"deletions":6,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -44,0 +44,12 @@\n+ifeq ($(OPENJDK_TARGET_OS), ios)\n+  FindSrcDirsForLib += \\\n+    $(call uniq, $(wildcard \\\n+        $(TOPDIR)\/src\/$(strip $1)\/macosx\/native\/lib$(strip $2)))\n+endif\n+\n+ifeq ($(OPENJDK_TARGET_OS), android)\n+  FindSrcDirsForLib += \\\n+    $(call uniq, $(wildcard \\\n+        $(TOPDIR)\/src\/$(strip $1)\/linux\/native\/lib$(strip $2)))\n+endif\n+\n","filename":"make\/common\/JdkNativeCompilation.gmk","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -86,0 +86,8 @@\n+ifeq ($(OPENJDK_TARGET_OS), ios)\n+  SRC_SUBDIRS += macosx\/classes\n+endif\n+\n+ifeq ($(OPENJDK_TARGET_OS), android)\n+  SRC_SUBDIRS += linux\/classes\n+endif\n+\n","filename":"make\/common\/Modules.gmk","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,0 +37,5 @@\n+\n+ifeq ($(call isTargetOs, ios), true)\n+  LAUNCHER_CFLAGS += -I$(TOPDIR)\/src\/java.base\/macosx\/native\/libjli\n+fi\n+\n","filename":"make\/common\/modules\/LauncherCommon.gmk","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-ifeq ($(call isTargetOs, macosx), true)\n+ifeq ($(call isTargetOs, macosx ios), true)\n@@ -121,1 +121,1 @@\n-ifeq ($(call isTargetOs, macosx), true)\n+ifeq ($(call isTargetOs, macosx ios), true)\n@@ -163,0 +163,1 @@\n+    CFLAGS_ios := -I$(TOPDIR)\/src\/java.base\/macosx\/native\/libjli, \\\n","filename":"make\/modules\/java.base\/lib\/CoreLibraries.gmk","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#ifndef TARGET_IOS\n@@ -35,0 +36,12 @@\n+#else\n+#include <stdlib.h>\n+#include <string.h>\n+#include <sys\/param.h>\n+#include <objc\/runtime.h>\n+#include <objc\/objc.h>\n+#include <objc\/message.h>\n+#include <CoreFoundation\/CoreFoundation.h>\n+#include <CoreFoundation\/CFlocale.h>\n+\n+#endif\n+\n@@ -37,0 +50,2 @@\n+#ifndef TARGET_IOS\n+\n@@ -495,0 +510,28 @@\n+#else\n+#define LOCALEIDLENGTH  128\n+char *getPosixLocale(int cat) {\n+    char *lc = setlocale(cat, NULL);\n+    if ((lc == NULL) || (strcmp(lc, \"C\") == 0)) {\n+        lc = getenv(\"LANG\");\n+    }\n+    if (lc == NULL) return NULL;\n+    return strdup(lc);\n+  }\n+\n+char *getMacOSXLocale(int cat) {\n+    char localeString[LOCALEIDLENGTH];\n+    \/\/ Get current user locale.\n+    CFLocaleRef loc = CFLocaleCopyCurrent();\n+    char *localstr;\n+    if (CFStringGetCString(CFLocaleGetIdentifier(loc),\n+                           localeString, LOCALEIDLENGTH,\n+                           kCFStringEncodingUTF8))\n+      localstr = strdup(localeString);\n+    else\n+      localstr =  NULL;\n+\n+    CFRelease(loc);\n+    return (localstr);\n+}\n+\n+#endif\n","filename":"src\/java.base\/macosx\/native\/libjava\/java_props_macosx.c","additions":43,"deletions":0,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+#ifndef TARGET_IOS\n@@ -46,0 +47,1 @@\n+#endif\n@@ -216,0 +218,2 @@\n+#elif defined(__arm64__)\n+        preferredJVM = \"zero\";\n@@ -276,0 +280,3 @@\n+#ifdef TARGET_IOS\n+static jboolean awtLoaded = 0;\n+#else\n@@ -277,0 +284,1 @@\n+#endif\n@@ -284,0 +292,3 @@\n+#ifdef TARGET_IOS\n+    awtLoaded = 1;\n+#else\n@@ -285,0 +296,1 @@\n+#endif\n@@ -313,0 +325,1 @@\n+#ifndef TARGET_IOS\n@@ -327,0 +340,1 @@\n+#endif\n@@ -357,0 +371,1 @@\n+#ifndef TARGET_IOS\n@@ -358,0 +373,1 @@\n+#endif\n@@ -940,0 +956,1 @@\n+#ifndef TARGET_IOS\n@@ -970,0 +987,3 @@\n+#else\n+    return ContinueInNewThread(ifn, threadStackSize, argc, argv, mode, what, ret);\n+#endif\n","filename":"src\/java.base\/macosx\/native\/libjli\/java_md_macosx.m","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#ifndef TARGET_IOS\n@@ -29,0 +30,1 @@\n+#endif\n","filename":"src\/java.base\/unix\/native\/libnet\/NetworkInterface.c","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,3 @@\n+#ifdef ANDROID\n+#include <netinet\/in.h>\n+#endif\n","filename":"src\/java.base\/unix\/native\/libnet\/net_util_md.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}