{"files":[{"patch":"@@ -0,0 +1,143 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 6291736\n+  @summary ITEM_STATE_CHANGED triggered after List.removeAll(), XToolkit\n+  @key headful\n+  @run main ISCAfterRemoveAllTest\n+*\/\n+\n+import java.awt.AWTException;\n+import java.awt.FlowLayout;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.List;\n+import java.awt.Point;\n+import java.awt.Robot;\n+\n+import java.awt.event.InputEvent;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseEvent;\n+\n+public class ISCAfterRemoveAllTest implements ItemListener {\n+    List list;\n+    Frame frame;\n+    volatile boolean passed = true;\n+\n+    public static void main(String[] args) throws Exception {\n+        ISCAfterRemoveAllTest test = new ISCAfterRemoveAllTest();\n+        test.start();\n+    }\n+\n+    public void start () throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                list = new List(4, false);\n+                frame = new Frame(\"ISCAfterRemoveAllTest\");\n+                list.add(\"000\");\n+                list.add(\"111\");\n+                list.add(\"222\");\n+                list.add(\"333\");\n+                list.add(\"444\");\n+                list.add(\"555\");\n+                list.add(\"666\");\n+                list.add(\"777\");\n+                list.add(\"888\");\n+                list.add(\"999\");\n+\n+                frame.add(list);\n+                frame.setLayout(new FlowLayout());\n+                frame.setSize(300, 200);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private void test() throws Exception {\n+        Robot r = new Robot();\n+        r.delay(1000);\n+        r.waitForIdle();\n+        EventQueue.invokeAndWait(() -> {\n+            Point loc = list.getLocationOnScreen();\n+            r.mouseMove(loc.x + list.getWidth() \/ 2, loc.y + list.getHeight() \/ 2);\n+        });\n+        r.delay(100);\n+        r.mousePress(InputEvent.BUTTON1_MASK);\n+        r.delay(10);\n+        r.mouseRelease(InputEvent.BUTTON1_MASK);\n+        r.delay(100);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            list.removeAll();\n+\n+            \/\/ The interesting events are generated after removing\n+            list.addItemListener(this);\n+            r.delay(100);\n+\n+            list.requestFocusInWindow();\n+            r.delay(100);\n+            if (KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() != list) {\n+                throw new RuntimeException(\"Test failed - list isn't focus owner.\");\n+            }\n+        });\n+\n+        r.delay(10);\n+        r.keyPress(KeyEvent.VK_UP);\n+        r.delay(10);\n+        r.keyRelease(KeyEvent.VK_UP);\n+        r.delay(100);\n+\n+        \/\/ This is the test case for the 6299853 issue\n+        r.delay(10);\n+        r.keyPress(KeyEvent.VK_SPACE);\n+        r.delay(10);\n+        r.keyRelease(KeyEvent.VK_SPACE);\n+        r.delay(100);\n+\n+        r.waitForIdle();\n+\n+        if (!passed) {\n+            throw new RuntimeException(\"Test failed.\");\n+        }\n+    }\n+\n+    public void itemStateChanged(ItemEvent ie) {\n+        System.out.println(ie);\n+        \/\/ We shouldn't generate any events since the list is empty\n+        passed = false;\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/List\/ISCAfterRemoveAllTest.java","additions":143,"deletions":0,"binary":false,"changes":143,"status":"added"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4322321\n+  @summary tests that List.getSelectedIndexes() doesn't return reference to internal array\n+  @key headful\n+  @run main InstanceOfSelectedArray\n+*\/\n+\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.List;\n+\n+public class InstanceOfSelectedArray {\n+     List testList;\n+     Frame frame;\n+     int[] selected;\n+\n+     public static void main(String[] args) throws Exception {\n+         InstanceOfSelectedArray test = new InstanceOfSelectedArray();\n+         test.start();\n+     }\n+\n+     public void start () throws Exception {\n+         try {\n+             EventQueue.invokeAndWait(() -> {\n+                 testList = new List();\n+                 frame = new Frame(\"InstanceOfSelectedArrayTest\");\n+                 testList.addItem(\"First\");\n+                 testList.addItem(\"Second\");\n+                 testList.addItem(\"Third\");\n+\n+                 frame.add(testList);\n+                 frame.setLayout(new FlowLayout());\n+                 frame.setSize(300, 200);\n+                 frame.setLocationRelativeTo(null);\n+                 frame.setVisible(true);\n+\n+                 testList.select(2);\n+\n+                 selected = testList.getSelectedIndexes();\n+                 selected[0] = 0;\n+                 selected = testList.getSelectedIndexes();\n+\n+                 if (selected[0] == 0) {\n+                     System.out.println(\"List returned the reference to internal array.\");\n+                     System.out.println(\"Test FAILED\");\n+                     throw new RuntimeException(\"Test FAILED\");\n+                 }\n+             });\n+\n+             System.out.println(\"List returned a clone of its internal array.\");\n+             System.out.println(\"Test PASSED\");\n+         } finally {\n+             EventQueue.invokeAndWait(() -> {\n+                 if (frame != null) {\n+                     frame.dispose();\n+                 }\n+             });\n+         }\n+     }\n+}\n","filename":"test\/jdk\/java\/awt\/List\/InstanceOfSelectedArray.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4274839 4281703\n+  @summary tests that List receives mouse enter\/exit events properly\n+  @key headful\n+  @run main ListEnterExitTest\n+*\/\n+\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.List;\n+import java.awt.Point;\n+import java.awt.Robot;\n+\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+public class ListEnterExitTest {\n+    final List list = new List();\n+    final MouseEnterExitListener mouseEnterExitListener = new MouseEnterExitListener();\n+    Frame frame;\n+    volatile Point p;\n+\n+    public static void main(String[] args) throws Exception {\n+        ListEnterExitTest test = new ListEnterExitTest();\n+        test.start();\n+    }\n+\n+    public void start() throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new Frame(\"ListEnterExitTest\");\n+                list.add(\"Item 1\");\n+                list.add(\"Item 2\");\n+                list.addMouseListener(mouseEnterExitListener);\n+                frame.add(list);\n+                frame.setLayout(new FlowLayout());\n+                frame.setSize(300, 200);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+\n+            final Robot robot = new Robot();\n+            robot.delay(1000);\n+            robot.waitForIdle();\n+\n+            EventQueue.invokeAndWait(() -> {\n+                p = list.getLocationOnScreen();\n+            });\n+            robot.mouseMove(p.x + 10, p.y + 10);\n+            robot.delay(100);\n+            robot.waitForIdle();\n+            robot.mouseMove(p.x - 10, p.y - 10);\n+            robot.delay(100);\n+            robot.waitForIdle();\n+            robot.mouseMove(p.x + 10, p.y + 10);\n+\n+            robot.mousePress(InputEvent.BUTTON1_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+\n+            synchronized (mouseEnterExitListener) {\n+                mouseEnterExitListener.wait(2000);\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+        if (!mouseEnterExitListener.isPassed()) {\n+            throw new RuntimeException(\"Haven't receive mouse enter\/exit events\");\n+        }\n+\n+    }\n+\n+}\n+\n+class MouseEnterExitListener extends MouseAdapter {\n+\n+    volatile boolean passed_1 = false;\n+    volatile boolean passed_2 = false;\n+\n+    public void mouseEntered(MouseEvent e) {\n+        passed_1 = true;\n+    }\n+\n+    public void mouseExited(MouseEvent e) {\n+        passed_2 = true;\n+    }\n+\n+    public void mousePressed(MouseEvent e) {\n+        synchronized (this) {\n+            System.out.println(\"mouse pressed\");\n+            this.notifyAll();\n+        }\n+    }\n+\n+    public boolean isPassed() {\n+        return passed_1 & passed_2;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/List\/ListEnterExitTest.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4195583\n+  @summary Tests List.add(String item) to make sure an NPE is not thrown\n+                 when item == null\n+  @key headful\n+  @run main ListNullTest\n+*\/\n+\n+import java.awt.FlowLayout;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.List;\n+import java.awt.Robot;\n+\n+public class ListNullTest {\n+   List list;\n+   Frame frame;\n+\n+   public static void main(String[] args) throws Exception {\n+      ListNullTest test = new ListNullTest();\n+      test.start();\n+   }\n+\n+   public void start () throws Exception {\n+      try {\n+         EventQueue.invokeAndWait(() -> {\n+            list = new List(15);\n+            frame = new Frame(\"ListNullTest\");\n+            frame.add(list);\n+            frame.setLayout(new FlowLayout());\n+            frame.setSize(200, 200);\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n+            list.add(\"\", 0);\n+            list.add((String) null, 1);\n+         });\n+      } finally {\n+         EventQueue.invokeAndWait(() -> {\n+            if (frame != null) {\n+               frame.dispose();\n+            }\n+         });\n+      }\n+   }\n+}\n","filename":"test\/jdk\/java\/awt\/List\/ListNullTest.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 6373369\n+  @summary Bug in WListPeer.getMaxWidth(), checks that the preferred width\n+  of the list is calculated correctly\n+  @requires (os.family == \"windows\")\n+  @key headful\n+  @run main MaxWidthTest\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.FontMetrics;\n+import java.awt.List;\n+import java.awt.TextArea;\n+import java.awt.Toolkit;\n+\n+public class MaxWidthTest {\n+    static Frame frame;\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new Frame(\"MaxWidthTest\");\n+                frame.setLayout(new BorderLayout());\n+                List list = new List();\n+                list.add(\"Very very very long string - the actual width more than the minimum width !!!\");\n+                frame.add(BorderLayout.WEST, list);\n+                frame.add(BorderLayout.CENTER, new TextArea());\n+\n+                frame.setBounds(200, 200, 200, 200);\n+                frame.pack();\n+                frame.setVisible(true);\n+\n+                \/\/ as WListPeer.minimumSize() - just predefined value\n+                FontMetrics fm = frame.getFontMetrics(list.getFont());\n+                int minimum = 20 + fm.stringWidth(\"0123456789abcde\");\n+\n+                \/\/ as WListPeer.preferredSize() - equals to Max.max(minimum,getMaxWidth()+20)\n+                \/\/ getMaxWidth() returns the actual size of the list\n+                int preferred = list.getPreferredSize().width;\n+\n+                System.out.println(preferred + \",\" + minimum);\n+                if (preferred <= minimum) {\n+                    throw new RuntimeException(\"Test failed because the actual width more than the minimum width.\");\n+                }\n+            });\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/List\/MaxWidthTest.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,174 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 6190768\n+  @summary Tests that pressing pg-up \/ pg-down on AWT list doesn't selects the items, on XToolkit\n+  @key headful\n+  @run main PageUPSelectsItemsTest\n+*\/\n+\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.Label;\n+import java.awt.List;\n+import java.awt.Point;\n+import java.awt.Robot;\n+\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class PageUPSelectsItemsTest implements FocusListener, KeyListener {\n+\n+    List list = new List(6, true);\n+    Label label = new Label(\"for focus\");\n+\n+    Frame frame;\n+\n+    final Object LOCK = new Object();\n+    final int ACTION_TIMEOUT = 500;\n+\n+    public static void main(String[] args) throws Exception {\n+        PageUPSelectsItemsTest test = new PageUPSelectsItemsTest();\n+        test.start();\n+    }\n+\n+    public void start() throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                list.add(\"0\");\n+                list.add(\"1\");\n+                list.add(\"2\");\n+                list.add(\"3\");\n+                list.add(\"4\");\n+                list.add(\"5\");\n+                list.add(\"6\");\n+                list.add(\"7\");\n+                list.add(\"8\");\n+                list.add(\"9\");\n+                list.add(\"10\");\n+                list.add(\"11\");\n+                list.add(\"12\");\n+\n+                list.select(8);\n+\n+                list.addFocusListener(this);\n+                list.addKeyListener(this);\n+                frame = new Frame(\"PageUPSelectsItemsTest\");\n+                frame.setLayout(new BorderLayout());\n+                frame.add(BorderLayout.SOUTH, list);\n+                frame.add(BorderLayout.CENTER, label);\n+                frame.setSize(300, 200);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private void test() throws Exception {\n+        synchronized (LOCK) {\n+\n+            Robot r = new Robot();\n+            r.delay(500);\n+\n+            Point loc = label.getLocationOnScreen();\n+            r.mouseMove(loc.x + (int) (label.getWidth() \/ 2), loc.y + (int) (label.getHeight() \/ 2));\n+            r.mousePress(InputEvent.BUTTON1_MASK);\n+            r.delay(10);\n+            r.mouseRelease(InputEvent.BUTTON1_MASK);\n+            r.delay(500);\n+\n+            list.requestFocusInWindow();\n+            LOCK.wait(ACTION_TIMEOUT);\n+            if (KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() != list) {\n+                throw new RuntimeException(\"Test failed - list isn't focus owner.\");\n+            }\n+\n+            r.delay(10);\n+            loc = list.getLocationOnScreen();\n+\n+            r.delay(50);\n+            r.keyPress(KeyEvent.VK_PAGE_UP);\n+            r.delay(50);\n+            r.keyRelease(KeyEvent.VK_PAGE_UP);\n+            r.delay(50);\n+\n+            r.keyPress(KeyEvent.VK_PAGE_DOWN);\n+            r.delay(50);\n+            r.keyRelease(KeyEvent.VK_PAGE_DOWN);\n+            r.delay(50);\n+\n+            r.waitForIdle();\n+            EventQueue.invokeAndWait(new Runnable() {\n+                public void run() {\n+                    System.out.println(\"Dummy block\");\n+                }\n+            });\n+\n+            System.err.println(\"Selected objects: \" + list.getSelectedItems().length);\n+\n+            if (list.getSelectedItems().length > 1) {\n+                throw new RuntimeException(\"Test failed\");\n+            }\n+        }\n+    }\n+\n+    public void focusGained(FocusEvent e) {\n+\n+        synchronized (LOCK) {\n+            LOCK.notifyAll();\n+        }\n+\n+    }\n+\n+    public void focusLost(FocusEvent e) {\n+    }\n+\n+    public void keyPressed(KeyEvent e){\n+        System.out.println(\"keyPressed-\"+e);\n+    }\n+\n+    public void keyReleased(KeyEvent e){\n+        System.out.println(\"keyReleased-\"+e);\n+    }\n+\n+    public void keyTyped(KeyEvent e){\n+        System.out.println(\"keyTyped-\"+e);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/List\/PageUPSelectsItemsTest.java","additions":174,"deletions":0,"binary":false,"changes":174,"status":"added"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 6190746\n+  @summary Tests that list trigger ActionEvent when double clicking a programmatically selected item, XToolkit\n+  @key headful\n+  @run main TriggerActionEventTest\n+*\/\n+\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.List;\n+import java.awt.Point;\n+import java.awt.Robot;\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class TriggerActionEventTest implements ActionListener {\n+    final Object LOCK = new Object();\n+    final int ACTION_TIMEOUT = 1000;\n+\n+    List list;\n+    Frame frame;\n+    volatile Point loc;\n+    private volatile boolean passed = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        TriggerActionEventTest TrgrActnEvntTest = new TriggerActionEventTest();\n+        TrgrActnEvntTest.test(new TestState(0));\n+        TrgrActnEvntTest.test(new TestState(3));\n+    }\n+\n+    private void test(TestState currentState) throws Exception {\n+\n+        synchronized (LOCK) {\n+            System.out.println(\"begin test for: \" + currentState);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                list = new List();\n+\n+                list.clear();\n+                list.add(\"0\");\n+                list.add(\"1\");\n+                list.add(\"2\");\n+                list.add(\"3\");\n+                list.addActionListener(this);\n+\n+                int index = currentState.getSelectedIndex();\n+\n+                list.select(index);\n+\n+                frame = new Frame(\"TriggerActionEventTest\");\n+                frame.setLayout(new BorderLayout());\n+                frame.add(BorderLayout.SOUTH, list);\n+                frame.setSize(200, 200);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+\n+\n+            Robot r = new Robot();\n+            r.delay(500);\n+            EventQueue.invokeAndWait(() -> {\n+                loc = list.getLocationOnScreen();\n+            });\n+\n+            r.mouseMove(loc.x + 10, loc.y + 10);\n+            r.mousePress(InputEvent.BUTTON1_MASK);\n+            r.delay(10);\n+            r.mouseRelease(InputEvent.BUTTON1_MASK);\n+            r.mousePress(InputEvent.BUTTON1_MASK);\n+            r.delay(10);\n+            r.mouseRelease(InputEvent.BUTTON1_MASK);\n+            r.delay(10);\n+\n+\n+            LOCK.wait(ACTION_TIMEOUT);\n+\n+            System.out.println(currentState);\n+            if (!passed) {\n+                throw new RuntimeException(\"Test failed\");\n+            }\n+            this.passed = false;\n+\n+            EventQueue.invokeAndWait(() -> {\n+                list.removeActionListener(this);\n+                frame.remove(list);\n+                frame.setVisible(false);\n+            });\n+\n+        }\n+    }\n+\n+    public void actionPerformed (ActionEvent ae) {\n+        synchronized (LOCK) {\n+            System.out.println(ae);\n+            passed = true;\n+            LOCK.notifyAll();\n+        }\n+    }\n+\n+}\n+\n+class TestState {\n+    private final int selectedIndex;\n+\n+    public TestState(int selectedIndex) {\n+        this.selectedIndex = selectedIndex;\n+    }\n+\n+    public int getSelectedIndex() {\n+        return selectedIndex;\n+    }\n+\n+    public String toString() {\n+        return \"\"+selectedIndex;\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/List\/TriggerActionEventTest.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"}]}