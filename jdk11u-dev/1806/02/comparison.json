{"files":[{"patch":"@@ -49,0 +49,7 @@\n+\n+\/\/ these constants are duplicated in CAccessibility.java\n+#define JAVA_AX_ALL_CHILDREN (-1)\n+#define JAVA_AX_SELECTED_CHILDREN (-2)\n+#define JAVA_AX_VISIBLE_CHILDREN (-3)\n+\/\/ If the value is >=0, it's an index\n+\n@@ -122,0 +129,13 @@\n+\n+@interface ScrollAreaAccessibility : JavaComponentAccessibility {\n+\n+}\n+- (NSArray *)initializeAttributeNamesWithEnv:(JNIEnv *)env;\n+- (NSArray *)accessibilityContentsAttribute;\n+- (BOOL)accessibilityIsContentsAttributeSettable;\n+- (id)accessibilityVerticalScrollBarAttribute;\n+- (BOOL)accessibilityIsVerticalScrollBarAttributeSettable;\n+- (id)accessibilityHorizontalScrollBarAttribute;\n+- (BOOL)accessibilityIsHorizontalScrollBarAttributeSettable;\n+@end\n+\n@@ -378,0 +398,2 @@\n+        } else if ([javaRole isEqualToString:@\"scrollpane\"]) {\n+            newChild = [ScrollAreaAccessibility alloc];\n@@ -1872,0 +1894,99 @@\n+@implementation ScrollAreaAccessibility\n+\n+- (NSArray *)initializeAttributeNamesWithEnv:(JNIEnv *)env\n+{\n+    NSMutableArray *names = (NSMutableArray *)[super initializeAttributeNamesWithEnv:env];\n+\n+    [names addObject:NSAccessibilityHorizontalScrollBarAttribute];\n+    [names addObject:NSAccessibilityVerticalScrollBarAttribute];\n+    [names addObject:NSAccessibilityContentsAttribute];\n+\n+    return names;\n+}\n+\n+- (id)accessibilityHorizontalScrollBarAttribute\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+\n+    NSArray *children = [JavaComponentAccessibility childrenOfParent:self withEnv:env withChildrenCode:JAVA_AX_ALL_CHILDREN allowIgnored:YES];\n+    if ([children count] <= 0) return nil;\n+\n+    \/\/ The scroll bars are in the children.\n+    JavaComponentAccessibility *aElement;\n+    NSEnumerator *enumerator = [children objectEnumerator];\n+    while ((aElement = (JavaComponentAccessibility *)[enumerator nextObject])) {\n+        if ([[aElement accessibilityRoleAttribute] isEqualToString:NSAccessibilityScrollBarRole]) {\n+            jobject elementAxContext = [aElement axContextWithEnv:env];\n+            if (isHorizontal(env, elementAxContext, fComponent)) {\n+                (*env)->DeleteLocalRef(env, elementAxContext);\n+                return aElement;\n+            }\n+            (*env)->DeleteLocalRef(env, elementAxContext);\n+        }\n+    }\n+\n+    return nil;\n+}\n+\n+- (BOOL)accessibilityIsHorizontalScrollBarAttributeSettable\n+{\n+    return NO;\n+}\n+\n+- (id)accessibilityVerticalScrollBarAttribute\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+\n+    NSArray *children = [JavaComponentAccessibility childrenOfParent:self withEnv:env withChildrenCode:JAVA_AX_ALL_CHILDREN allowIgnored:YES];\n+    if ([children count] <= 0) return nil;\n+\n+    \/\/ The scroll bars are in the children.\n+    NSEnumerator *enumerator = [children objectEnumerator];\n+    JavaComponentAccessibility *aElement;\n+    while ((aElement = (JavaComponentAccessibility *)[enumerator nextObject])) {\n+        if ([[aElement accessibilityRoleAttribute] isEqualToString:NSAccessibilityScrollBarRole]) {\n+            jobject elementAxContext = [aElement axContextWithEnv:env];\n+            if (isVertical(env, elementAxContext, fComponent)) {\n+                (*env)->DeleteLocalRef(env, elementAxContext);\n+                return aElement;\n+            }\n+            (*env)->DeleteLocalRef(env, elementAxContext);\n+        }\n+    }\n+\n+    return nil;\n+}\n+\n+- (BOOL)accessibilityIsVerticalScrollBarAttributeSettable\n+{\n+    return NO;\n+}\n+\n+- (NSArray *)accessibilityContentsAttribute\n+{\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+    NSArray *children = [JavaComponentAccessibility childrenOfParent:self withEnv:env withChildrenCode:JAVA_AX_ALL_CHILDREN allowIgnored:YES];\n+\n+    if ([children count] <= 0) return nil;\n+    NSArray *contents = [NSMutableArray arrayWithCapacity:[children count]];\n+\n+    \/\/ The scroll bars are in the children. children less the scroll bars is the contents\n+    NSEnumerator *enumerator = [children objectEnumerator];\n+    JavaComponentAccessibility *aElement;\n+    while ((aElement = (JavaComponentAccessibility *)[enumerator nextObject])) {\n+        if (![[aElement accessibilityRoleAttribute] isEqualToString:NSAccessibilityScrollBarRole]) {\n+            \/\/ no scroll bars in contents\n+            [(NSMutableArray *)contents addObject:aElement];\n+        }\n+    }\n+\n+    return contents;\n+}\n+\n+- (BOOL)accessibilityIsContentsAttributeSettable\n+{\n+    return NO;\n+}\n+\n+@end\n+\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/JavaComponentAccessibility.m","additions":121,"deletions":0,"binary":false,"changes":121,"status":"modified"},{"patch":"@@ -32,6 +32,0 @@\n-\/\/ these constants are duplicated in CAccessibility.java\n-#define JAVA_AX_ALL_CHILDREN (-1)\n-#define JAVA_AX_SELECTED_CHILDREN (-2)\n-#define JAVA_AX_VISIBLE_CHILDREN (-3)\n-\/\/ If the value is >=0, it's an index\n-\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/CommonComponentAccessibility.h","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-@interface IgnoreAccessibility : CommonComponentAccessibility {\n+@interface GroupAccessibility : CommonComponentAccessibility <NSAccessibilityGroup> {\n@@ -34,1 +34,2 @@\n-- (BOOL)isAccessibilityElement;\n+\n+- (NSArray * _Nullable)accessibilityChildren;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/GroupAccessibility.h","additions":3,"deletions":2,"binary":false,"changes":5,"previous_filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/IgnoreAccessibility.h","status":"copied"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"GroupAccessibility.h\"\n+#import \"JNIUtilities.h\"\n+#import \"ThreadUtilities.h\"\n+\/*\n+ * This is the protocol for the components that contain children.\n+ * Basic logic of accessibilityChildren might be overridden in the specific implementing\n+ * classes reflecting the logic of the class.\n+ *\/\n+@implementation GroupAccessibility\n+\n+\/*\n+ * Return all non-ignored children.\n+ *\/\n+- (NSArray *)accessibilityChildren {\n+    JNIEnv *env = [ThreadUtilities getJNIEnv];\n+\n+    NSArray *children = [JavaComponentAccessibility childrenOfParent:self\n+                                                             withEnv:env\n+                                                    withChildrenCode:JAVA_AX_ALL_CHILDREN\n+                                                        allowIgnored:NO];\n+\n+    if ([children count] == 0) {\n+        return nil;\n+    } else {\n+        return children;\n+    }\n+}\n+\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/GroupAccessibility.m","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -37,1 +37,1 @@\n-- (nullable NSString *)accessibilityAttributedString:(NSRange)range;\n+- (nullable NSString *)accessibilityAttributedStringForRange:(NSRange)range;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/StaticTextAccessibility.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-- (nullable NSString *)accessibilityAttributedString:(NSRange)range\n+- (nullable NSString *)accessibilityAttributedStringForRange:(NSRange)range\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/StaticTextAccessibility.m","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-@interface IgnoreAccessibility : CommonComponentAccessibility {\n+@interface ToolbarAccessibility : CommonComponentAccessibility {\n@@ -34,1 +34,1 @@\n-- (BOOL)isAccessibilityElement;\n+- (NSString * _Nonnull)accessibilityRole;\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ToolbarAccessibility.h","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/IgnoreAccessibility.h","status":"copied"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#import \"ToolbarAccessibility.h\"\n+\n+\/*\n+ * Implementation of the accessibility peer for the Toolbar role\n+ *\/\n+@implementation ToolbarAccessibility\n+\n+- (NSString * _Nonnull)accessibilityRole\n+{\n+    return [self accessibilityRoleAttribute];\n+}\n+@end\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/a11y\/ToolbarAccessibility.m","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"}]}