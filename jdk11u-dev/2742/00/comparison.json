{"files":[{"patch":"@@ -400,4 +400,4 @@\n-                if (hframe.getFlag(HeaderFrame.END_STREAM)) {\n-                    if (debug.on()) debug.log(\"handling END_STREAM: %d\", streamid);\n-                    receiveDataFrame(new DataFrame(streamid, DataFrame.END_STREAM, List.of()));\n-                }\n+            }\n+            if (hframe.getFlag(HeaderFrame.END_STREAM)) {\n+                if (debug.on()) debug.log(\"handling END_STREAM: %d\", streamid);\n+                receiveDataFrame(new DataFrame(streamid, DataFrame.END_STREAM, List.of()));\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Stream.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+ * @compile ..\/ReferenceTracker.java\n@@ -75,0 +76,3 @@\n+    String noBodyhttp2URI;\n+    String noBodyhttps2URI;\n+    final ReferenceTracker TRACKER = ReferenceTracker.INSTANCE;\n@@ -90,0 +94,17 @@\n+    \/**\n+     * A function that returns a list of 1) a HEADERS frame with END_STREAM\n+     * ( and with an empty payload ), and 2) two CONTINUATION frames,the first\n+     * is empty and the second contains headers and the END_HEADERS flag\n+     *\/\n+    static BiFunction<Integer,List<ByteBuffer>,List<Http2Frame>> twoContinuation =\n+        (Integer streamid, List<ByteBuffer> encodedHeaders) -> {\n+            List<ByteBuffer> empty =  List.of(ByteBuffer.wrap(new byte[0]));\n+            HeadersFrame hf = new HeadersFrame(streamid, HeaderFrame.END_STREAM, empty);\n+            ContinuationFrame cf = new ContinuationFrame(streamid, 0,empty);\n+            ContinuationFrame cf1 = new ContinuationFrame(streamid,\n+                                                         HeaderFrame.END_HEADERS,\n+                                                         encodedHeaders);\n+\n+                return List.of(hf, cf, cf1);\n+            };\n+\n@@ -115,9 +136,14 @@\n-                { http2URI,  false, oneContinuation },\n-                { https2URI, false, oneContinuation },\n-                { http2URI,  true,  oneContinuation },\n-                { https2URI, true,  oneContinuation },\n-\n-                { http2URI,  false, byteAtATime },\n-                { https2URI, false, byteAtATime },\n-                { http2URI,  true,  byteAtATime },\n-                { https2URI, true,  byteAtATime },\n+                { http2URI,        false, oneContinuation },\n+                { https2URI,       false, oneContinuation },\n+                { http2URI,        true,  oneContinuation },\n+                { https2URI,       true,  oneContinuation },\n+\n+                { noBodyhttp2URI,  false, twoContinuation },\n+                { noBodyhttp2URI,  true,  twoContinuation },\n+                { noBodyhttps2URI, false, twoContinuation },\n+                { noBodyhttps2URI, true,  twoContinuation },\n+\n+                { http2URI,        false, byteAtATime },\n+                { https2URI,       false, byteAtATime },\n+                { http2URI,        true,  byteAtATime },\n+                { https2URI,       true,  byteAtATime },\n@@ -139,2 +165,7 @@\n-            if (!sameClient || client == null)\n-                client = HttpClient.newBuilder().sslContext(sslContext).build();\n+            if (!sameClient || client == null) {\n+                client = HttpClient.newBuilder()\n+                         .proxy(HttpClient.Builder.NO_PROXY)\n+                         .sslContext(sslContext)\n+                         .build();\n+                TRACKER.track(client);\n+            }\n@@ -152,0 +183,7 @@\n+            if(uri.contains(\"nobody\")) {\n+                out.println(\"Got response: \" + resp);\n+                assertTrue(resp.statusCode() == 204,\n+                    \"Expected 204, got:\" + resp.statusCode());\n+                assertEquals(resp.version(), HTTP_2);\n+                continue;\n+            }\n@@ -169,0 +207,1 @@\n+        http2TestServer.addHandler(new Http2NoBodyHandler(), \"\/http2\/nobody\");\n@@ -171,0 +210,1 @@\n+        noBodyhttp2URI = \"http:\/\/localhost:\" + port + \"\/http2\/nobody\";\n@@ -174,0 +214,1 @@\n+        https2TestServer.addHandler(new Http2NoBodyHandler(), \"\/https2\/nobody\");\n@@ -176,0 +217,1 @@\n+        noBodyhttps2URI = \"https:\/\/localhost:\" + port + \"\/https2\/nobody\";\n@@ -188,2 +230,9 @@\n-        http2TestServer.stop();\n-        https2TestServer.stop();\n+        AssertionError fail = TRACKER.check(500);\n+        try {\n+            http2TestServer.stop();\n+            https2TestServer.stop();\n+        } finally {\n+            if (fail != null) {\n+                throw fail;\n+            }\n+        }\n@@ -207,0 +256,11 @@\n+    static class Http2NoBodyHandler implements Http2Handler {\n+        @Override\n+        public void handle(Http2TestExchange t) throws IOException {\n+            try (InputStream is = t.getRequestBody();\n+                 OutputStream os = t.getResponseBody()) {\n+                byte[] bytes = is.readAllBytes();\n+                t.sendResponseHeaders(204, -1);\n+            }\n+        }\n+    }\n+\n@@ -228,1 +288,1 @@\n-            if (responseLength > 0 || responseLength < 0) {\n+            if (responseLength != 0 && rCode != 204) {\n@@ -239,2 +299,1 @@\n-            if (responseLength < 0) {\n-                headerFrames.get(headerFrames.size() -1).setFlag(HeadersFrame.END_STREAM);\n+            if(headerFrames.get(0).getFlag(HeaderFrame.END_STREAM))\n@@ -242,1 +301,0 @@\n-            }\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/ContinuationFrameTest.java","additions":76,"deletions":18,"binary":false,"changes":94,"status":"modified"}]}