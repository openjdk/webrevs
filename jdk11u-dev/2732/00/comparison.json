{"files":[{"patch":"@@ -147,1 +147,1 @@\n-        wsock32.lib winmm.lib version.lib psapi.lib\"\n+        ws2_32.lib winmm.lib version.lib psapi.lib\"\n","filename":"make\/autoconf\/libraries.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -145,4 +145,0 @@\n-inline struct hostent* os::get_host_by_name(char* name) {\n-  return ::gethostbyname(name);\n-}\n-\n","filename":"src\/hotspot\/os\/aix\/os_aix.inline.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -147,4 +147,0 @@\n-inline struct hostent* os::get_host_by_name(char* name) {\n-  return ::gethostbyname(name);\n-}\n-\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.inline.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -139,4 +139,0 @@\n-inline struct hostent* os::get_host_by_name(char* name) {\n-  return ::gethostbyname(name);\n-}\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.inline.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -95,4 +95,0 @@\n-inline struct hostent* os::get_host_by_name(char* name) {\n-  return ::gethostbyname(name);\n-}\n-\n","filename":"src\/hotspot\/os\/solaris\/os_solaris.inline.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5568,4 +5568,0 @@\n-struct hostent* os::get_host_by_name(char* name) {\n-  return (struct hostent*)gethostbyname(name);\n-}\n-\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -822,1 +822,0 @@\n-  static struct hostent* get_host_by_name(char* name);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1075,1 +1075,1 @@\n-#include <winsock2.h>\n+#include <Ws2tcpip.h>\n@@ -1116,1 +1116,2 @@\n-bool networkStream::connect(const char *ip, short port) {\n+\/\/ host could be IP address, or a host name\n+bool networkStream::connect(const char *host, short port) {\n@@ -1118,3 +1119,3 @@\n-  struct sockaddr_in server;\n-  server.sin_family = AF_INET;\n-  server.sin_port = htons(port);\n+  char s_port[6]; \/\/ 5 digits max plus terminator\n+  int ret = os::snprintf(s_port, sizeof(s_port), \"%hu\", (unsigned short) port);\n+  assert(ret > 0, \"snprintf failed: %d\", ret);\n@@ -1122,9 +1123,2 @@\n-  server.sin_addr.s_addr = inet_addr(ip);\n-  if (server.sin_addr.s_addr == (uint32_t)-1) {\n-    struct hostent* host = os::get_host_by_name((char*)ip);\n-    if (host != NULL) {\n-      memcpy(&server.sin_addr, host->h_addr_list[0], host->h_length);\n-    } else {\n-      return false;\n-    }\n-  }\n+  struct addrinfo* addr_info = NULL;\n+  struct addrinfo hints;\n@@ -1132,0 +1126,11 @@\n+  memset(&hints, 0, sizeof(hints));\n+  hints.ai_family = AF_INET;       \/\/ Allow IPv4 only\n+  hints.ai_socktype = SOCK_STREAM; \/\/ TCP only\n+\n+  \/\/ getaddrinfo can resolve both an IP address and a host name\n+  ret = getaddrinfo(host, s_port, &hints, &addr_info);\n+  if (ret != 0) {\n+    warning(\"networkStream::connect getaddrinfo for host %s and port %s failed: %s\",\n+            host, s_port, gai_strerror(ret));\n+    return false;\n+  }\n@@ -1133,2 +1138,3 @@\n-  int result = os::connect(_socket, (struct sockaddr*)&server, sizeof(struct sockaddr_in));\n-  return (result >= 0);\n+  ret = os::connect(_socket, addr_info->ai_addr, (socklen_t)addr_info->ai_addrlen);\n+  freeaddrinfo(addr_info);\n+  return (ret >= 0);\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":22,"deletions":16,"binary":false,"changes":38,"status":"modified"}]}