{"files":[{"patch":"@@ -672,0 +672,14 @@\n+  \/\/ We don't optimize the memory graph for pinned loads, so we may need to raise the\n+  \/\/ root of our search tree through the corresponding slices of MergeMem nodes to\n+  \/\/ get to the node that really creates the memory state for this slice.\n+  if (load_alias_idx >= Compile::AliasIdxRaw) {\n+    while (initial_mem->is_MergeMem()) {\n+      MergeMemNode* mm = initial_mem->as_MergeMem();\n+      Node* p = mm->memory_at(load_alias_idx);\n+      if (p != mm->base_memory()) {\n+        initial_mem = p;\n+      } else {\n+        break;\n+      }\n+    }\n+  }\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8337066\n+ * @summary Test that MergeMem is skipped when looking for stores\n+ * @compile -encoding UTF-8 TestAntiDependencyForPinnedLoads.java\n+ * @run main\/othervm -Xbatch -XX:-TieredCompilation\n+ *                   -XX:CompileCommand=compileonly,java.lang.StringUTF16::reverse\n+ *                   compiler.controldependency.TestAntiDependencyForPinnedLoads\n+ *\/\n+\n+package compiler.controldependency;\n+\n+public class TestAntiDependencyForPinnedLoads {\n+  public static void main(String[] args) {\n+    for(int i = 0; i < 50_000; i++) {\n+      String str = \"YYYY年MM月DD日\";\n+      StringBuffer strBuffer = new StringBuffer(str);\n+      String revStr = strBuffer.reverse().toString();\n+      if (!revStr.equals(\"日DD月MM年YYYY\")) throw new InternalError(\"FAIL\");\n+    }\n+  }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/compiler\/controldependency\/TestAntiDependencyForPinnedLoads.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"}]}