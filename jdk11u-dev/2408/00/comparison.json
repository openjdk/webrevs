{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @requires vm.flagless\n@@ -32,0 +33,1 @@\n+ * @run driver MaxMetaspaceSize\n@@ -48,1 +50,0 @@\n-      processArgs.add(\"-XX:InitialBootClassLoaderMetaspaceSize=1m\");\n@@ -53,1 +54,1 @@\n-    String msg = \"Failed allocating metaspace object\";\n+    String msg = \"OutOfMemoryError: Metaspace\";\n","filename":"test\/hotspot\/jtreg\/runtime\/SharedArchiveFile\/MaxMetaspaceSize.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @requires vm.flagless\n@@ -30,2 +31,0 @@\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n@@ -33,1 +32,1 @@\n- * @run driver ClassFileInstaller -jar whitebox.jar sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar whitebox.jar sun.hotspot.WhiteBox\n@@ -40,0 +39,1 @@\n+import jdk.test.lib.helpers.ClassFileInstaller;\n","filename":"test\/hotspot\/jtreg\/runtime\/SharedArchiveFile\/SharedStrings.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @requires vm.flagless\n@@ -33,3 +34,0 @@\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- *          jdk.jartool\/sun.tools.jar\n@@ -45,0 +43,1 @@\n+import jdk.test.lib.cds.CDSTestUtils;\n@@ -50,1 +49,1 @@\n-        String java_home_dst = System.getProperty(\"user.dir\") + File.separator + \"moved_jdk\";\n+        String java_home_dst = CDSTestUtils.getOutputDir() + File.separator + \"moved_jdk\";\n@@ -57,1 +56,2 @@\n-            TestCommon.executeAndLog(pb, \"dump\");\n+            TestCommon.executeAndLog(pb, \"dump\")\n+                      .shouldHaveExitValue(0);\n@@ -66,0 +66,1 @@\n+            out.shouldHaveExitValue(0);\n@@ -81,0 +82,1 @@\n+            out.shouldHaveExitValue(0);\n@@ -94,1 +96,2 @@\n-            TestCommon.executeAndLog(pb, \"dump\");\n+            TestCommon.executeAndLog(pb, \"dump\")\n+                      .shouldHaveExitValue(0);\n@@ -105,0 +108,1 @@\n+            out.shouldHaveExitValue(0);\n@@ -108,0 +112,10 @@\n+\n+        \/\/ Test with no modules image in the <java home>\/lib directory\n+        renameModulesFile(java_home_dst);\n+        {\n+            ProcessBuilder pb = makeBuilder(java_home_dst + \"\/bin\/java\",\n+                                            \"-version\");\n+            OutputAnalyzer out = TestCommon.executeAndLog(pb, \"exec-missing-modules\");\n+            out.shouldHaveExitValue(1);\n+            out.shouldContain(\"Failed setting boot class path.\");\n+        }\n@@ -145,0 +159,18 @@\n+    static void renameModulesFile(String javaHome) throws Exception {\n+        String modulesDir = javaHome + File.separator + \"lib\";\n+        File origModules = new File(modulesDir, \"modules\");\n+        if (!origModules.exists()) {\n+            throw new RuntimeException(\"modules file not found\");\n+        }\n+\n+        File renamedModules = new File(modulesDir, \"orig_modules\");\n+        if (renamedModules.exists()) {\n+            throw new RuntimeException(\"found orig_modules unexpectedly\");\n+        }\n+\n+        boolean success = origModules.renameTo(renamedModules);\n+        if (!success) {\n+            throw new RuntimeException(\"rename modules file failed\");\n+        }\n+    }\n+\n@@ -155,1 +187,1 @@\n-        String classDir = System.getProperty(\"test.classes\");\n+        String outDir = CDSTestUtils.getOutputDir();\n@@ -157,1 +189,1 @@\n-        String path = classDir + File.separator + newFile;\n+        String path = outDir + File.separator + newFile;\n@@ -159,2 +191,2 @@\n-        Files.copy(Paths.get(classDir, \"hello.jar\"),\n-            Paths.get(classDir, newFile),\n+        Files.copy(Paths.get(outDir, \"hello.jar\"),\n+            Paths.get(outDir, newFile),\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/MoveJDKTest.java","additions":43,"deletions":11,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2021, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8264337\n+ * @summary test default cds archive when turning on VerifySharedSpaces\n+ * @requires vm.flagless\n+ * @requires vm.cds\n+ * @library \/test\/lib\n+ * @run driver VerifyWithDefaultArchive\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class VerifyWithDefaultArchive {\n+    public static void main(String... args) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-Xlog:cds\", \"-XX:+VerifySharedSpaces\", \"-version\");\n+        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+        out.shouldNotContain(\"relocation bitmap CRC error\");\n+        out.shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/VerifyWithDefaultArchive.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -1,2 +1,2 @@\n-\/**\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+\/*\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,5 +28,2 @@\n- * @library \/test\/jdk\/lib\/testlibrary \/test\/lib \/test\/hotspot\/jtreg\/runtime\/appcds\n- * @modules java.base\/jdk.internal.module\n- *          java.management\n- *          jdk.jlink\n- *          jdk.compiler\n+ * @requires vm.flagless\n+ * @library \/test\/jdk\/lib\/testlibrary \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n@@ -35,2 +32,2 @@\n- * @run driver ClassFileInstaller -jar app.jar CheckArchivedModuleApp\n- * @run driver ClassFileInstaller -jar WhiteBox.jar sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar CheckArchivedModuleApp\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar WhiteBox.jar sun.hotspot.WhiteBox\n@@ -48,0 +45,1 @@\n+import jdk.test.lib.helpers.ClassFileInstaller;\n@@ -113,1 +111,1 @@\n-            \"-Xshare:dump\"};\n+            \"-Xshare:dump\", \"-Xlog:cds\"};\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/cacheObject\/ArchivedModuleWithCustomImageTest.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8259070\n+ * @summary Test jcmd to dump dynamic shared archive.\n+ * @requires vm.cds\n+ * @requires vm.flagless\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @modules jdk.jcmd\/sun.tools.common:+open\n+ * @compile ..\/test-classes\/Hello.java JCmdTestDumpBase.java\n+ * @build sun.hotspot.WhiteBox\n+ * @build JCmdTestLingeredApp JCmdTestDynamicDump\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm\/timeout=480 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI JCmdTestDynamicDump\n+ *\/\n+\n+import java.io.File;\n+\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.JDKToolFinder;\n+\n+public class JCmdTestDynamicDump extends JCmdTestDumpBase {\n+    static final String DYNAMIC_DUMP_FILE   = \"mydynamic\";\n+    static final String[] DYNAMIC_MESSAGES  = {\"JCmdTestLingeredApp source: shared objects file (top)\",\n+                                               \"LingeredApp source: shared objects file (top)\",\n+                                               \"Hello source: shared objects file (top)\"};\n+    static void test() throws Exception {\n+        setIsStatic(false);\n+        buildJars();\n+\n+        LingeredApp app  = null;\n+        long pid;\n+\n+        int  test_count = 1;\n+        \/\/ Test dynamic dump with -XX:+RecordDynamicDumpInfo.\n+        print2ln(test_count++ + \" Test dynamic dump with -XX:+RecordDynamicDumpInfo.\");\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\");\n+        pid = app.getPid();\n+        test(DYNAMIC_DUMP_FILE + \"01.jsa\", pid, noBoot, EXPECT_PASS, DYNAMIC_MESSAGES);\n+\n+        \/\/ Test dynamic dump twice to same process.\n+        print2ln(test_count++ + \" Test dynamic dump second time to the same process.\");\n+        test(\"02.jsa\", pid, noBoot,  EXPECT_PASS);\n+        app.stopApp();\n+\n+        \/\/ Test dynamic dump with -XX:-RecordDynamicDumpInfo.\n+        print2ln(test_count++ + \" Test dynamic dump with -XX:-RecordDynamicDumpInfo.\");\n+        app = createLingeredApp(\"-cp\", allJars);\n+        pid = app.getPid();\n+        test(\"01.jsa\", pid, noBoot, EXPECT_FAIL);\n+        app.stopApp();\n+\n+        \/\/ Test dynamic dump with default archive name (null).\n+        print2ln(test_count++ + \" Test dynamic dump with default archive name (null).\");\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\");\n+        pid = app.getPid();\n+        test(null, pid, noBoot, EXPECT_PASS, DYNAMIC_MESSAGES);\n+        app.stopApp();\n+\n+        \/\/ Test dynamic dump with flags -XX:+RecordDynamicDumpInfo -XX:-DynamicDumpSharedSpaces.\n+        print2ln(test_count++ + \" Test dynamic dump with flags -XX:+RecordDynamicDumpInfo -XX:-DynamicDumpSharedSpaces.\");\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\", \"-XX:-DynamicDumpSharedSpaces\");\n+        pid = app.getPid();\n+        test(null, pid, noBoot, EXPECT_PASS, DYNAMIC_MESSAGES);\n+        app.stopApp();\n+\n+        \/\/ Test dynamic dump with flags -XX:-DynamicDumpSharedSpaces -XX:+RecordDynamicDumpInfo.\n+        print2ln(test_count++ + \" Test dynamic dump with flags -XX:-DynamicDumpSharedSpaces -XX:+RecordDynamicDumpInfo.\");\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:-DynamicDumpSharedSpaces\", \"-XX:+RecordDynamicDumpInfo\");\n+        pid = app.getPid();\n+        test(null, pid, noBoot,  EXPECT_PASS, DYNAMIC_MESSAGES);\n+        app.stopApp();\n+\n+        \/\/ Test dynamic with -Xbootclasspath\/a:boot.jar\n+        print2ln(test_count++ + \" Test dynamic with -Xbootclasspath\/a:boot.jar\");\n+        app = createLingeredApp(\"-cp\", testJar, \"-Xbootclasspath\/a:\" + bootJar, \"-XX:+RecordDynamicDumpInfo\");\n+        pid = app.getPid();\n+        test(null, pid, useBoot, EXPECT_PASS, DYNAMIC_MESSAGES);\n+        app.stopApp();\n+\n+        \/\/ Test -XX:+RecordDynamicDump -XX:SharedArchiveFile=test_static.jsa\n+        print2ln(test_count++ + \" Test -XX:+RecordDynamicDumpInfo -XX:SharedArchiveFile=test_static.jsa\");\n+        \/\/ Dump a static archive as base (here do not use the default classes.jsa)\n+        String archiveFile = \"test_static.jsa\";\n+        dumpStaticArchive(archiveFile);\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\",\n+                                \"-XX:SharedArchiveFile=\" + archiveFile);\n+        pid = app.getPid();\n+        test(null, pid, noBoot, EXPECT_PASS, DYNAMIC_MESSAGES);\n+        app.stopApp();\n+\n+        \/\/ Test dynamic dump with -XX:ArchiveClassAtExit will fail.\n+        print2ln(test_count++ + \" Test dynamic dump with -XX:ArchiveClassAtExit will fail.\");\n+        app = createLingeredApp(\"-cp\", allJars,\n+                                \"-Xshare:auto\",\n+                                \"-XX:+RecordDynamicDumpInfo\",\n+                                \"-XX:ArchiveClassesAtExit=AnyName.jsa\");\n+        if (app != null) {\n+            if (app.getProcess().isAlive()) {\n+                throw new RuntimeException(\"The JCmdTestLingeredApp should not start up!\");\n+            }\n+        }\n+    }\n+\n+    \/\/ Dump a static archive, not using TestCommon.dump(...), we do not take jtreg args.\n+    private static void dumpStaticArchive(String archiveFile) throws Exception {\n+        String javapath = JDKToolFinder.getJDKTool(\"java\");\n+        String cmd[] = {javapath, \"-Xshare:dump\",  \"-XX:SharedArchiveFile=\" + archiveFile};\n+        \/\/ Do not use ProcessTools.createTestJvm(cmd) here, it copies jtreg env.\n+        ProcessBuilder pb = new ProcessBuilder(cmd);\n+        CDSTestUtils.executeAndLog(pb, \"dump\")\n+            .shouldHaveExitValue(0);\n+        File file = new File(archiveFile);\n+        if (!file.exists()) {\n+            throw new RuntimeException(\"Cannot dump classes to archive file \" + archiveFile);\n+        }\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        runTest(JCmdTestDynamicDump::test);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/appcds\/jcmd\/JCmdTestDynamicDump.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"}]}