{"files":[{"patch":"@@ -47,0 +47,1 @@\n+import java.util.Arrays;\n@@ -993,1 +994,0 @@\n-            String addrString = addrToString(addr);\n@@ -1001,5 +1001,5 @@\n-                        if (hostEntry.contains(addrString)) {\n-                            host = extractHost(hostEntry, addrString);\n-                            if (host != null) {\n-                                break;\n-                            }\n+                        String[] mapping = hostEntry.split(\"\\\\s+\");\n+                        if (mapping.length >= 2 &&\n+                            Arrays.equals(addr, createAddressByteArray(mapping[0]))) {\n+                            host = mapping[1];\n+                            break;\n@@ -1011,1 +1011,1 @@\n-                        + addrString + \" as hosts file \" + hostsFile\n+                        + Arrays.toString(addr) + \" as hosts file \" + hostsFile\n@@ -1017,1 +1017,1 @@\n-                        + addrString\n+                        + Arrays.toString(addr)\n@@ -1119,16 +1119,0 @@\n-\n-        \/**\n-         * IP Address to host mapping\n-         * use first host alias in list\n-         *\/\n-        private String extractHost(String hostEntry, String addrString) {\n-            String[] mapping = hostEntry.split(\"\\\\s+\");\n-            String host = null;\n-\n-            if (mapping.length >= 2) {\n-                if (mapping[0].equalsIgnoreCase(addrString)) {\n-                    host = mapping[1];\n-                }\n-            }\n-            return host;\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/net\/InetAddress.java","additions":8,"deletions":24,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -59,9 +59,8 @@\n-        try {\n-            \/\/ 10.2.3.4  testHost.testDomain\n-            testHostsMapping(expectedIpv4Address, \"testHost.testDomain\");\n-            \/\/ ::1     ip6-localhost ip6-loopback\n-            testHostsMapping(expectedIpv6LocalhostAddress, \"ip6-localhost\");\n-            \/\/ fe00::0 ip6-localnet\n-            testHostsMapping(expectedIpv6LocalAddress, \"ip6-localnet\");\n-            \/\/ fe80::1 link-local-host\n-            testHostsMapping(expectedIpv6Address, \"link-local-host\");\n+        \/\/ 10.2.3.4  testHost.testDomain\n+        testHostsMapping(expectedIpv4Address, \"testHost.testDomain\");\n+        \/\/ ::1     ip6-localhost ip6-loopback\n+        testHostsMapping(expectedIpv6LocalhostAddress, \"ip6-localhost\");\n+        \/\/ fe00::0 ip6-localnet\n+        testHostsMapping(expectedIpv6LocalAddress, \"ip6-localnet\");\n+        \/\/ fe80::1 link-local-host\n+        testHostsMapping(expectedIpv6Address, \"link-local-host\");\n@@ -69,3 +68,13 @@\n-        } catch (UnknownHostException uhEx) {\n-            System.out.println(\"UHE unexpected caught == \" + uhEx.getMessage());\n-        }\n+        testReverseLookup(\"10.2.3.4\", \"testHost.testDomain\");\n+\n+        testReverseLookup(\"::1\", \"ip6-localhost\");\n+        testReverseLookup(\"0:0:0:0:0:0:0:1\", \"ip6-localhost\");\n+        testReverseLookup(\"0000:0000:0000:0000:0000:0000:0000:0001\", \"ip6-localhost\");\n+\n+        testReverseLookup(\"fe00::0\", \"ip6-localnet\");\n+        testReverseLookup(\"fe00:0:0:0:0:0:0:0\", \"ip6-localnet\");\n+        testReverseLookup(\"fe00:0000:0000:0000:0000:0000:0000:0000\", \"ip6-localnet\");\n+\n+        testReverseLookup(\"fe80::1\", \"link-local-host\");\n+        testReverseLookup(\"fe80:000:0:00:0:000:00:1\", \"link-local-host\");\n+        testReverseLookup(\"fe80:0000:0000:0000:0000:0000:0000:0001\", \"link-local-host\");\n@@ -97,0 +106,11 @@\n+\n+    private static void testReverseLookup(String numericHost, String expectedName)\n+            throws UnknownHostException {\n+        String lookupResult = InetAddress.getByName(numericHost).getHostName();\n+        if (!expectedName.equals(lookupResult)) {\n+            throw new RuntimeException(\n+                String.format(\n+                    \"reverse lookup of \\\"%s\\\" is \\\"%s\\\", should be \\\"%s\\\"\\n\",\n+                    numericHost, lookupResult, expectedName));\n+        }\n+    }\n","filename":"test\/jdk\/java\/net\/InetAddress\/InternalNameServiceWithHostsFileTest.java","additions":32,"deletions":12,"binary":false,"changes":44,"status":"modified"}]}