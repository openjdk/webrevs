{"files":[{"patch":"@@ -186,6 +186,0 @@\n-# Setup the JTReg Regression Test Harness.\n-TOOLCHAIN_SETUP_JTREG\n-\n-# Setup Jib dependency tool\n-TOOLCHAIN_SETUP_JIB\n-\n@@ -195,0 +189,5 @@\n+# Setup the tools needed to test the JDK (JTReg Regression Test Harness\n+# and the Jib dependency tool).\n+LIB_TESTS_SETUP_JTREG\n+LIB_TESTS_SETUP_JIB\n+\n@@ -236,1 +235,1 @@\n-JDKOPT_ENABLE_DISABLE_FAILURE_HANDLER\n+LIB_TESTS_ENABLE_DISABLE_FAILURE_HANDLER\n","filename":"make\/autoconf\/configure.ac","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -524,39 +524,0 @@\n-################################################################################\n-#\n-# Check if building of the jtreg failure handler should be enabled.\n-#\n-AC_DEFUN_ONCE([JDKOPT_ENABLE_DISABLE_FAILURE_HANDLER],\n-[\n-  AC_ARG_ENABLE([jtreg-failure-handler], [AS_HELP_STRING([--enable-jtreg-failure-handler],\n-    [forces build of the jtreg failure handler to be enabled, missing dependencies\n-     become fatal errors. Default is auto, where the failure handler is built if all\n-     dependencies are present and otherwise just disabled.])])\n-\n-  AC_MSG_CHECKING([if jtreg failure handler should be built])\n-\n-  if test \"x$enable_jtreg_failure_handler\" = \"xyes\"; then\n-    if test \"x$JT_HOME\" = \"x\"; then\n-      AC_MSG_ERROR([Cannot enable jtreg failure handler without jtreg.])\n-    else\n-      BUILD_FAILURE_HANDLER=true\n-      AC_MSG_RESULT([yes, forced])\n-    fi\n-  elif test \"x$enable_jtreg_failure_handler\" = \"xno\"; then\n-    BUILD_FAILURE_HANDLER=false\n-    AC_MSG_RESULT([no, forced])\n-  elif test \"x$enable_jtreg_failure_handler\" = \"xauto\" \\\n-      || test \"x$enable_jtreg_failure_handler\" = \"x\"; then\n-    if test \"x$JT_HOME\" = \"x\"; then\n-      BUILD_FAILURE_HANDLER=false\n-      AC_MSG_RESULT([no, missing jtreg])\n-    else\n-      BUILD_FAILURE_HANDLER=true\n-      AC_MSG_RESULT([yes, jtreg present])\n-    fi\n-  else\n-    AC_MSG_ERROR([Invalid value for --enable-jtreg-failure-handler: $enable_jtreg_failure_handler])\n-  fi\n-\n-  AC_SUBST(BUILD_FAILURE_HANDLER)\n-])\n-\n","filename":"make\/autoconf\/jdk-options.m4","additions":0,"deletions":39,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,7 @@\n+################################################################################\n+# Setup libraries and functionalities needed to test the JDK.\n+################################################################################\n+\n+# Minimum supported version\n+JTREG_MINIMUM_VERSION=6.1\n+\n@@ -57,0 +64,170 @@\n+\n+# Setup the JTReg Regression Test Harness.\n+AC_DEFUN_ONCE([LIB_TESTS_SETUP_JTREG],\n+[\n+  AC_ARG_WITH(jtreg, [AS_HELP_STRING([--with-jtreg],\n+      [Regression Test Harness @<:@probed@:>@])])\n+\n+  if test \"x$with_jtreg\" = xno; then\n+    # jtreg disabled\n+    AC_MSG_CHECKING([for jtreg test harness])\n+    AC_MSG_RESULT([no, disabled])\n+  elif test \"x$with_jtreg\" != xyes && test \"x$with_jtreg\" != x; then\n+    # An explicit path is specified, use it.\n+    JT_HOME=\"$with_jtreg\"\n+    UTIL_FIXUP_PATH([JT_HOME])\n+    if test ! -d \"$JT_HOME\"; then\n+      AC_MSG_ERROR([jtreg home directory from --with-jtreg=$with_jtreg does not exist])\n+    fi\n+\n+    if test ! -e \"$JT_HOME\/lib\/jtreg.jar\"; then\n+      AC_MSG_ERROR([jtreg home directory from --with-jtreg=$with_jtreg is not a valid jtreg home])\n+    fi\n+\n+    JTREGEXE=\"$JT_HOME\/bin\/jtreg\"\n+    if test ! -x \"$JTREGEXE\"; then\n+      AC_MSG_ERROR([jtreg home directory from --with-jtreg=$with_jtreg does not contain valid jtreg executable])\n+    fi\n+\n+    AC_MSG_CHECKING([for jtreg test harness])\n+    AC_MSG_RESULT([$JT_HOME])\n+  else\n+    # Try to locate jtreg\n+    if test \"x$JT_HOME\" != x; then\n+      # JT_HOME set in environment, use it\n+      if test ! -d \"$JT_HOME\"; then\n+        AC_MSG_WARN([Ignoring JT_HOME pointing to invalid directory: $JT_HOME])\n+        JT_HOME=\n+      else\n+        if test ! -e \"$JT_HOME\/lib\/jtreg.jar\"; then\n+          AC_MSG_WARN([Ignoring JT_HOME which is not a valid jtreg home: $JT_HOME])\n+          JT_HOME=\n+        elif test ! -x \"$JT_HOME\/bin\/jtreg\"; then\n+          AC_MSG_WARN([Ignoring JT_HOME which does not contain valid jtreg executable: $JT_HOME])\n+          JT_HOME=\n+        else\n+          JTREGEXE=\"$JT_HOME\/bin\/jtreg\"\n+          AC_MSG_NOTICE([Located jtreg using JT_HOME from environment])\n+        fi\n+      fi\n+    fi\n+\n+    if test \"x$JT_HOME\" = x; then\n+      # JT_HOME is not set in environment, or was deemed invalid.\n+      # Try to find jtreg on path\n+      UTIL_LOOKUP_PROGS(JTREGEXE, jtreg)\n+      if test \"x$JTREGEXE\" != x; then\n+        # That's good, now try to derive JT_HOME\n+        JT_HOME=`(cd $($DIRNAME $JTREGEXE)\/.. && pwd)`\n+        if test ! -e \"$JT_HOME\/lib\/jtreg.jar\"; then\n+          AC_MSG_WARN([Ignoring jtreg from path since a valid jtreg home cannot be found])\n+          JT_HOME=\n+          JTREGEXE=\n+        else\n+          AC_MSG_NOTICE([Located jtreg using jtreg executable in path])\n+        fi\n+      fi\n+    fi\n+\n+    AC_MSG_CHECKING([for jtreg test harness])\n+    if test \"x$JT_HOME\" != x; then\n+      AC_MSG_RESULT([$JT_HOME])\n+    else\n+      AC_MSG_RESULT([no, not found])\n+\n+      if test \"x$with_jtreg\" = xyes; then\n+        AC_MSG_ERROR([--with-jtreg was specified, but no jtreg found.])\n+      fi\n+    fi\n+  fi\n+\n+  UTIL_FIXUP_EXECUTABLE(JTREGEXE)\n+  UTIL_FIXUP_PATH(JT_HOME)\n+  AC_SUBST(JT_HOME)\n+\n+  # Verify jtreg version\n+  if test \"x$JT_HOME\" != x; then\n+    AC_MSG_CHECKING([jtreg version number])\n+    # jtreg -version looks like this: \"jtreg 6.1+1-19\"\n+    # Extract actual version part (\"6.1\" in this case)\n+    jtreg_version_full=`$JAVA -jar $JT_HOME\/lib\/jtreg.jar -version | $HEAD -n 1 | $CUT -d ' ' -f 2`\n+    jtreg_version=${jtreg_version_full\/%+*}\n+    AC_MSG_RESULT([$jtreg_version])\n+\n+    # This is a simplified version of TOOLCHAIN_CHECK_COMPILER_VERSION\n+    comparable_actual_version=`$AWK -F. '{ printf(\"%05d%05d%05d%05d\\n\", [$]1, [$]2, [$]3, [$]4) }' <<< \"$jtreg_version\"`\n+    comparable_minimum_version=`$AWK -F. '{ printf(\"%05d%05d%05d%05d\\n\", [$]1, [$]2, [$]3, [$]4) }' <<< \"$JTREG_MINIMUM_VERSION\"`\n+    if test $comparable_actual_version -lt $comparable_minimum_version ; then\n+      AC_MSG_ERROR([jtreg version is too old, at least version $JTREG_MINIMUM_VERSION is required])\n+    fi\n+  fi\n+\n+  AC_SUBST(JTREGEXE)\n+])\n+\n+# Setup the JIB dependency resolver\n+AC_DEFUN_ONCE([LIB_TESTS_SETUP_JIB],\n+[\n+  AC_ARG_WITH(jib, [AS_HELP_STRING([--with-jib],\n+      [Jib dependency management tool @<:@not used@:>@])])\n+\n+  if test \"x$with_jib\" = xno || test \"x$with_jib\" = x; then\n+    # jib disabled\n+    AC_MSG_CHECKING([for jib])\n+    AC_MSG_RESULT(no)\n+  elif test \"x$with_jib\" = xyes; then\n+    AC_MSG_ERROR([Must supply a value to --with-jib])\n+  else\n+    JIB_HOME=\"${with_jib}\"\n+    AC_MSG_CHECKING([for jib])\n+    AC_MSG_RESULT(${JIB_HOME})\n+    if test ! -d \"${JIB_HOME}\"; then\n+      AC_MSG_ERROR([--with-jib must be a directory])\n+    fi\n+    JIB_JAR=$(ls ${JIB_HOME}\/lib\/jib-*.jar)\n+    if test ! -f \"${JIB_JAR}\"; then\n+      AC_MSG_ERROR([Could not find jib jar file in ${JIB_HOME}])\n+    fi\n+  fi\n+\n+  AC_SUBST(JIB_HOME)\n+])\n+\n+################################################################################\n+#\n+# Check if building of the jtreg failure handler should be enabled.\n+#\n+AC_DEFUN_ONCE([LIB_TESTS_ENABLE_DISABLE_FAILURE_HANDLER],\n+[\n+  AC_ARG_ENABLE([jtreg-failure-handler], [AS_HELP_STRING([--enable-jtreg-failure-handler],\n+    [forces build of the jtreg failure handler to be enabled, missing dependencies\n+     become fatal errors. Default is auto, where the failure handler is built if all\n+     dependencies are present and otherwise just disabled.])])\n+\n+  AC_MSG_CHECKING([if jtreg failure handler should be built])\n+\n+  if test \"x$enable_jtreg_failure_handler\" = \"xyes\"; then\n+    if test \"x$JT_HOME\" = \"x\"; then\n+      AC_MSG_ERROR([Cannot enable jtreg failure handler without jtreg.])\n+    else\n+      BUILD_FAILURE_HANDLER=true\n+      AC_MSG_RESULT([yes, forced])\n+    fi\n+  elif test \"x$enable_jtreg_failure_handler\" = \"xno\"; then\n+    BUILD_FAILURE_HANDLER=false\n+    AC_MSG_RESULT([no, forced])\n+  elif test \"x$enable_jtreg_failure_handler\" = \"xauto\" \\\n+      || test \"x$enable_jtreg_failure_handler\" = \"x\"; then\n+    if test \"x$JT_HOME\" = \"x\"; then\n+      BUILD_FAILURE_HANDLER=false\n+      AC_MSG_RESULT([no, missing jtreg])\n+    else\n+      BUILD_FAILURE_HANDLER=true\n+      AC_MSG_RESULT([yes, jtreg present])\n+    fi\n+  else\n+    AC_MSG_ERROR([Invalid value for --enable-jtreg-failure-handler: $enable_jtreg_failure_handler])\n+  fi\n+\n+  AC_SUBST(BUILD_FAILURE_HANDLER)\n+])\n","filename":"make\/autoconf\/lib-tests.m4","additions":178,"deletions":1,"binary":false,"changes":179,"status":"modified"},{"patch":"@@ -64,3 +64,0 @@\n-# Minimum supported version\n-JTREG_MINIMUM_VERSION=6.1\n-\n@@ -1067,131 +1064,0 @@\n-\n-# Setup the JTReg Regression Test Harness.\n-AC_DEFUN_ONCE([TOOLCHAIN_SETUP_JTREG],\n-[\n-  AC_ARG_WITH(jtreg, [AS_HELP_STRING([--with-jtreg],\n-      [Regression Test Harness @<:@probed@:>@])])\n-\n-  if test \"x$with_jtreg\" = xno; then\n-    # jtreg disabled\n-    AC_MSG_CHECKING([for jtreg test harness])\n-    AC_MSG_RESULT([no, disabled])\n-  elif test \"x$with_jtreg\" != xyes && test \"x$with_jtreg\" != x; then\n-    # An explicit path is specified, use it.\n-    JT_HOME=\"$with_jtreg\"\n-    UTIL_FIXUP_PATH([JT_HOME])\n-    if test ! -d \"$JT_HOME\"; then\n-      AC_MSG_ERROR([jtreg home directory from --with-jtreg=$with_jtreg does not exist])\n-    fi\n-\n-    if test ! -e \"$JT_HOME\/lib\/jtreg.jar\"; then\n-      AC_MSG_ERROR([jtreg home directory from --with-jtreg=$with_jtreg is not a valid jtreg home])\n-    fi\n-\n-    JTREGEXE=\"$JT_HOME\/bin\/jtreg\"\n-    if test ! -x \"$JTREGEXE\"; then\n-      AC_MSG_ERROR([jtreg home directory from --with-jtreg=$with_jtreg does not contain valid jtreg executable])\n-    fi\n-\n-    AC_MSG_CHECKING([for jtreg test harness])\n-    AC_MSG_RESULT([$JT_HOME])\n-  else\n-    # Try to locate jtreg\n-    if test \"x$JT_HOME\" != x; then\n-      # JT_HOME set in environment, use it\n-      if test ! -d \"$JT_HOME\"; then\n-        AC_MSG_WARN([Ignoring JT_HOME pointing to invalid directory: $JT_HOME])\n-        JT_HOME=\n-      else\n-        if test ! -e \"$JT_HOME\/lib\/jtreg.jar\"; then\n-          AC_MSG_WARN([Ignoring JT_HOME which is not a valid jtreg home: $JT_HOME])\n-          JT_HOME=\n-        elif test ! -x \"$JT_HOME\/bin\/jtreg\"; then\n-          AC_MSG_WARN([Ignoring JT_HOME which does not contain valid jtreg executable: $JT_HOME])\n-          JT_HOME=\n-        else\n-          JTREGEXE=\"$JT_HOME\/bin\/jtreg\"\n-          AC_MSG_NOTICE([Located jtreg using JT_HOME from environment])\n-        fi\n-      fi\n-    fi\n-\n-    if test \"x$JT_HOME\" = x; then\n-      # JT_HOME is not set in environment, or was deemed invalid.\n-      # Try to find jtreg on path\n-      UTIL_LOOKUP_PROGS(JTREGEXE, jtreg)\n-      if test \"x$JTREGEXE\" != x; then\n-        # That's good, now try to derive JT_HOME\n-        JT_HOME=`(cd $($DIRNAME $JTREGEXE)\/.. && pwd)`\n-        if test ! -e \"$JT_HOME\/lib\/jtreg.jar\"; then\n-          AC_MSG_WARN([Ignoring jtreg from path since a valid jtreg home cannot be found])\n-          JT_HOME=\n-          JTREGEXE=\n-        else\n-          AC_MSG_NOTICE([Located jtreg using jtreg executable in path])\n-        fi\n-      fi\n-    fi\n-\n-    AC_MSG_CHECKING([for jtreg test harness])\n-    if test \"x$JT_HOME\" != x; then\n-      AC_MSG_RESULT([$JT_HOME])\n-    else\n-      AC_MSG_RESULT([no, not found])\n-\n-      if test \"x$with_jtreg\" = xyes; then\n-        AC_MSG_ERROR([--with-jtreg was specified, but no jtreg found.])\n-      fi\n-    fi\n-  fi\n-\n-  UTIL_FIXUP_EXECUTABLE(JTREGEXE)\n-  UTIL_FIXUP_PATH(JT_HOME)\n-  AC_SUBST(JT_HOME)\n-\n-  # Verify jtreg version\n-  if test \"x$JT_HOME\" != x; then\n-    AC_MSG_CHECKING([jtreg version number])\n-    # jtreg -version looks like this: \"jtreg 6.1+1-19\"\n-    # Extract actual version part (\"6.1\" in this case)\n-    jtreg_version_full=`$JAVA -jar $JT_HOME\/lib\/jtreg.jar -version | $HEAD -n 1 | $CUT -d ' ' -f 2`\n-    jtreg_version=${jtreg_version_full\/%+*}\n-    AC_MSG_RESULT([$jtreg_version])\n-\n-    # This is a simplified version of TOOLCHAIN_CHECK_COMPILER_VERSION\n-    comparable_actual_version=`$AWK -F. '{ printf(\"%05d%05d%05d%05d\\n\", [$]1, [$]2, [$]3, [$]4) }' <<< \"$jtreg_version\"`\n-    comparable_minimum_version=`$AWK -F. '{ printf(\"%05d%05d%05d%05d\\n\", [$]1, [$]2, [$]3, [$]4) }' <<< \"$JTREG_MINIMUM_VERSION\"`\n-    if test $comparable_actual_version -lt $comparable_minimum_version ; then\n-      AC_MSG_ERROR([jtreg version is too old, at least version $JTREG_MINIMUM_VERSION is required])\n-    fi\n-  fi\n-\n-  AC_SUBST(JTREGEXE)\n-])\n-\n-# Setup the JIB dependency resolver\n-AC_DEFUN_ONCE([TOOLCHAIN_SETUP_JIB],\n-[\n-  AC_ARG_WITH(jib, [AS_HELP_STRING([--with-jib],\n-      [Jib dependency management tool @<:@not used@:>@])])\n-\n-  if test \"x$with_jib\" = xno || test \"x$with_jib\" = x; then\n-    # jib disabled\n-    AC_MSG_CHECKING([for jib])\n-    AC_MSG_RESULT(no)\n-  elif test \"x$with_jib\" = xyes; then\n-    AC_MSG_ERROR([Must supply a value to --with-jib])\n-  else\n-    JIB_HOME=\"${with_jib}\"\n-    AC_MSG_CHECKING([for jib])\n-    AC_MSG_RESULT(${JIB_HOME})\n-    if test ! -d \"${JIB_HOME}\"; then\n-      AC_MSG_ERROR([--with-jib must be a directory])\n-    fi\n-    JIB_JAR=$(ls ${JIB_HOME}\/lib\/jib-*.jar)\n-    if test ! -f \"${JIB_JAR}\"; then\n-      AC_MSG_ERROR([Could not find jib jar file in ${JIB_HOME}])\n-    fi\n-  fi\n-\n-  AC_SUBST(JIB_HOME)\n-])\n","filename":"make\/autoconf\/toolchain.m4","additions":0,"deletions":134,"binary":false,"changes":134,"status":"modified"}]}