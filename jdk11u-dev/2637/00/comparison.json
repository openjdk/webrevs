{"files":[{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+  @test\n+  @bug 4390019\n+  @summary REGRESSION: Alt-F4 keybinding no longer shuts down java application on Windows\n+  @key headful\n+  @requires (os.family == \"windows\")\n+  @run main NoFocusOwnerAWTTest\n+*\/\n+import java.awt.Frame;\n+import java.awt.BorderLayout;\n+import java.awt.EventQueue;\n+import java.awt.Label;\n+import java.awt.MenuBar;\n+import java.awt.Menu;\n+import java.awt.MenuItem;\n+import java.awt.MenuShortcut;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowAdapter;\n+\n+public class NoFocusOwnerAWTTest {\n+\n+    static boolean actionFired = false;\n+    static boolean closingWindowCalled = false;\n+    static Frame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            if (!System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n+                \/\/ this test is Win32 test only\n+                return;\n+            }\n+            EventQueue.invokeAndWait(() -> {\n+\n+                frame = new Frame(\"No Focus Owner AWT Test\");\n+                frame.addWindowListener(new WindowAdapter() {\n+                    public void windowClosing(WindowEvent e) {\n+                        System.out.println(\"windowClosing() is called.\");\n+                        closingWindowCalled = true;\n+                    }\n+                });\n+                frame.addFocusListener(new FocusListener() {\n+                    public void focusGained(FocusEvent fe) {\n+                        System.out.println(\"focus gained on frame\");\n+                    }\n+                    public void focusLost(FocusEvent fe) {\n+                        System.out.println(\"focus lost on frame\");\n+                    }\n+                });\n+                MenuBar mb = new MenuBar();\n+                Menu m = new Menu(\"This is Menu\");\n+                MenuItem mi = new MenuItem(\"Menu Item\");\n+                mi.setShortcut(new MenuShortcut(KeyEvent.VK_A));\n+                mi.addActionListener( new ActionListener() {\n+                    public void actionPerformed(ActionEvent ae) {\n+                        System.out.println(\"action\");\n+                        actionFired = true;\n+                    }\n+                });\n+                m.add(mi);\n+                mb.add(m);\n+                frame.setMenuBar(mb);\n+                Label lb;\n+                frame.add(lb = new Label(\"press\"));\n+                lb.addFocusListener(new FocusListener() {\n+                    public void focusGained(FocusEvent fe) {\n+                        System.out.println(\"focus gained on label\");\n+                    }\n+                    public void focusLost(FocusEvent fe) {\n+                        System.out.println(\"focus lost on label\");\n+                    }\n+                });\n+                frame.pack();\n+                frame.toFront();\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(100);\n+            robot.delay(1000);\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.waitForIdle();\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+            robot.waitForIdle();\n+            robot.keyPress(KeyEvent.VK_ALT);\n+            robot.keyPress(KeyEvent.VK_F4);\n+            robot.waitForIdle();\n+            robot.keyRelease(KeyEvent.VK_F4);\n+            robot.keyRelease(KeyEvent.VK_ALT);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            if (!actionFired || !closingWindowCalled) {\n+                throw new RuntimeException(\"Test FAILED(actionFired=\"+actionFired+\n+                                       \";closingWindowCalled=\"+closingWindowCalled+\")\");\n+            }\n+        } finally {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+        }\n+    }\n+ }\/\/ class NoFocusOwnerAWTTest\n","filename":"test\/jdk\/java\/awt\/Focus\/NoFocusOwnerAWTTest.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+  @test\n+  @bug 4390019\n+  @summary REGRESSION: Alt-F4 keybinding no longer shuts down java application on Windows\n+  @key headful\n+  @requires (os.family == \"windows\")\n+  @run main NoFocusOwnerSwingTest\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.EventQueue;\n+import java.awt.Label;\n+import java.awt.MenuBar;\n+import java.awt.Menu;\n+import java.awt.MenuItem;\n+import java.awt.MenuShortcut;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowAdapter;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+public class NoFocusOwnerSwingTest {\n+    static boolean closingWindowCalled = false;\n+    static JFrame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            if (!System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n+                \/\/ this test is Win32 test only\n+                return;\n+            }\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame(\"No Focus Owner Swing Test\");\n+                JButton btn;\n+                frame.getContentPane().add(btn = new JButton(\"press\"));\n+                frame.addWindowListener(new WindowAdapter() {\n+                    public void windowClosing(WindowEvent e) {\n+                        System.out.println(\"windowClosing is called\");\n+                        closingWindowCalled = true;\n+                    }\n+                });\n+                frame.pack();\n+                frame.toFront();\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(100);\n+            robot.delay(1000);\n+            robot.keyPress(KeyEvent.VK_ALT);\n+            robot.keyPress(KeyEvent.VK_F4);\n+            robot.waitForIdle();\n+            robot.keyRelease(KeyEvent.VK_F4);\n+            robot.keyRelease(KeyEvent.VK_ALT);\n+            robot.waitForIdle();\n+\n+            if (!closingWindowCalled) {\n+                throw new RuntimeException(\"Test FAILED(closingWindowCalled=\" +\n+                                         closingWindowCalled + \")\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\/\/ class NoFocusOwnerSwingTest\n","filename":"test\/jdk\/java\/awt\/Focus\/NoFocusOwnerSwingTest.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"},{"patch":"@@ -0,0 +1,180 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+  @test\n+  @bug 4504665\n+  @summary MerlinBeta2 - vetoing a focus change causes infinite loop\n+  @key headful\n+  @run main RestoreFocusInfiniteLoopTest\n+*\/\n+\n+import java.awt.AWTException;\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.TextArea;\n+\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyVetoException;\n+import java.beans.VetoableChangeListener;\n+\n+public class RestoreFocusInfiniteLoopTest {\n+    static final int TEST_TIMEOUT = 1000;\n+    static final int DELAY = 100;\n+    static Button b1;\n+    static Frame frame;\n+    static Object b1Monitor;\n+    static Point origin;\n+    static Dimension dim;\n+    static MonitoredFocusListener monitorer;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+\n+                b1Monitor = new Object();\n+                frame = new Frame();\n+                b1 = new Button(\"1\");\n+                Button b2 = new Button(\"2\");\n+                b1.setName(\"b1\");\n+                b2.setName(\"b2\");\n+\n+                frame.setLayout(new FlowLayout());\n+                frame.add(b1);\n+                frame.add(b2);\n+                frame.pack();\n+                frame.setSize(100, 100);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+                FocusVetoableChangeListener vetoer = new FocusVetoableChangeListener(b2);\n+                KeyboardFocusManager.getCurrentKeyboardFocusManager().\n+                    addVetoableChangeListener(\"focusOwner\", vetoer);\n+\n+            });\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(DELAY);\n+            robot.setAutoWaitForIdle(true);\n+            robot.delay(1000);\n+            EventQueue.invokeAndWait(() -> {\n+                monitorer = new MonitoredFocusListener(b1Monitor);\n+                b1.addFocusListener(monitorer);\n+                origin = b1.getLocationOnScreen();\n+                dim = b1.getSize();\n+            });\n+            robot.mouseMove((int)origin.getX() + (int)dim.getWidth()\/2,\n+                            (int)origin.getY() + (int)dim.getHeight()\/2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            if (!b1.isFocusOwner()) {\n+                synchronized (b1Monitor) {\n+                    b1Monitor.wait(TEST_TIMEOUT);\n+                }\n+            }\n+\n+            monitorer.resetFocusLost();\n+            robot.keyPress(KeyEvent.VK_TAB);\n+            robot.keyRelease(KeyEvent.VK_TAB);\n+\n+            if (!monitorer.isFocusLostReceived() || !b1.isFocusOwner()) {\n+               synchronized (b1Monitor) {\n+                    b1Monitor.wait(TEST_TIMEOUT);\n+                }\n+            }\n+            if (!b1.isFocusOwner()) {\n+                throw new RuntimeException(\"Test is FAILED\");\n+            } else {\n+                System.out.println(\"Test is PASSED\");\n+            }\n+        } finally {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+        }\n+    }\n+\n+ }\/\/ class RestoreFocusInfiniteLoopTest\n+\n+class FocusVetoableChangeListener implements VetoableChangeListener {\n+    Component vetoedComponent;\n+    public FocusVetoableChangeListener(Component vetoedComponent) {\n+        this.vetoedComponent = vetoedComponent;\n+    }\n+    public void vetoableChange(PropertyChangeEvent evt)\n+        throws PropertyVetoException\n+    {\n+        Component oldComp = (Component)evt.getOldValue();\n+        Component newComp = (Component)evt.getNewValue();\n+\n+        boolean vetoFocusChange = (newComp == vetoedComponent);\n+        process(evt.getPropertyName(), oldComp, newComp);\n+\n+        if (vetoFocusChange) {\n+            throw new PropertyVetoException(\"message\", evt);\n+        }\n+    }\n+    boolean process(String propName, Component o1, Component o2) {\n+        System.out.println(propName +\n+                           \" old=\" + (o1 != null ? o1.getName() : \"null\") +\n+                           \" new=\" + (o2 != null ? o2.getName() : \"null\"));\n+            return true;\n+        }\n+    }\n+\n+class MonitoredFocusListener extends FocusAdapter {\n+    Object monitor;\n+    boolean focuslost = false;\n+\n+    public void resetFocusLost() {\n+        focuslost = false;\n+    }\n+    public boolean isFocusLostReceived() {\n+        return focuslost;\n+    }\n+    public MonitoredFocusListener(Object monitor) {\n+        this.monitor = monitor;\n+    }\n+\n+    public void focusLost(FocusEvent fe) {\n+        System.out.println(fe.toString());\n+        focuslost = true;\n+    }\n+    public void focusGained(FocusEvent fe) {\n+        System.out.println(fe.toString());\n+        synchronized (monitor) {\n+            monitor.notify();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Focus\/RestoreFocusInfiniteLoopTest.java","additions":180,"deletions":0,"binary":false,"changes":180,"status":"added"},{"patch":"@@ -0,0 +1,173 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+  @test\n+  @bug 4648816\n+  @summary Sometimes focus requests on LW components are delayed\n+  @key headful\n+  @run main SequencedLightweightRequestsTest\n+*\/\n+\n+import java.awt.AWTException;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.TextArea;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.InputEvent;\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JTextField;\n+import javax.swing.SwingUtilities;\n+\n+public class SequencedLightweightRequestsTest implements FocusListener {\n+    final int WAIT_TIME = 5000;\n+\n+    JFrame testFrame;\n+    JButton testButton1;\n+    JButton testButton2;\n+    JTextField testField;\n+\n+    public void focusGained(FocusEvent fe) {\n+        System.err.println(\"FocusGained on \" + fe.getComponent().getName());\n+    }\n+\n+    public void focusLost(FocusEvent fe) {\n+        System.err.println(\"FocusLost on \" + fe.getComponent().getName());\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        SequencedLightweightRequestsTest test =\n+            new SequencedLightweightRequestsTest();\n+        test.start();\n+    }\n+\n+    public void start() throws Exception {\n+        try {\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                testFrame = new JFrame(\"See my components!\");\n+                testButton1 = new JButton(\"Click me!\");\n+                testButton2 = new JButton(\"Do I have focus?\");\n+                testField = new JTextField(\"Do I have focus?\");\n+                testFrame.getContentPane().setLayout(new FlowLayout());\n+                testFrame.getContentPane().add(testButton1);\n+                testFrame.getContentPane().add(testField);\n+                testFrame.getContentPane().add(testButton2);\n+\n+                testButton1.setName(\"Button1\");\n+                testButton2.setName(\"Button2\");\n+                testField.setName(\"textField\");\n+                testButton1.addFocusListener(this);\n+                testButton2.addFocusListener(this);\n+                testField.addFocusListener(this);\n+                testFrame.addFocusListener(this);\n+\n+                testFrame.setSize(300, 100);\n+                testFrame.setLocationRelativeTo(null);\n+                testFrame.setVisible(true);\n+            });\n+\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(100);\n+            robot.setAutoWaitForIdle(true);\n+\n+            \/\/ wait to give to frame time for showing\n+            robot.delay(1000);\n+\n+            \/\/ make sure that first button has focus\n+            Object monitor = new Object();\n+            MonitoredFocusListener monitorer =\n+                          new MonitoredFocusListener(monitor);\n+            Point origin = testButton1.getLocationOnScreen();\n+            Dimension dim = testButton1.getSize();\n+            robot.mouseMove((int)origin.getX() + (int)dim.getWidth()\/2,\n+                            (int)origin.getY() + (int)dim.getHeight()\/2);\n+            robot.mousePress(InputEvent.BUTTON1_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+\n+            if (!testButton1.isFocusOwner()) {\n+                synchronized (monitor) {\n+                    testButton1.addFocusListener(monitorer);\n+                    monitor.wait(WAIT_TIME);\n+                    testButton1.removeFocusListener(monitorer);\n+                }\n+            }\n+\n+            \/\/ if first button still doesn't have focus, test fails\n+            if (!testButton1.isFocusOwner()) {\n+                throw new RuntimeException(\"First button doesn't receive focus\");\n+            }\n+\n+            \/\/ two lightweight requests\n+            java.awt.EventQueue.invokeAndWait(new Runnable() {\n+                public void run() {\n+                    testButton2.requestFocus();\n+                    testField.requestFocus();\n+                }\n+            });\n+\n+            \/\/ make sure third button receives focus\n+            if (!testField.isFocusOwner()) {\n+                synchronized (monitor) {\n+                    testField.addFocusListener(monitorer);\n+                    monitor.wait(WAIT_TIME);\n+                    testField.removeFocusListener(monitorer);\n+                }\n+            }\n+\n+            \/\/ if the text field still doesn't have focus, test fails\n+            if (!testField.isFocusOwner()) {\n+                throw new RuntimeException(\"Text field doesn't receive focus\");\n+            }\n+            System.out.println(\"Test PASSED\");\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (testFrame != null) {\n+                    testFrame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\/\/ class SequencedLightweightRequestsTest\n+\n+class MonitoredFocusListener extends FocusAdapter {\n+    Object monitor;\n+\n+    public MonitoredFocusListener(Object monitor) {\n+        this.monitor = monitor;\n+    }\n+\n+    public void focusGained(FocusEvent fe) {\n+        synchronized (monitor) {\n+            monitor.notify();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Focus\/SequencedLightweightRequestsTest.java","additions":173,"deletions":0,"binary":false,"changes":173,"status":"added"},{"patch":"@@ -0,0 +1,179 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+  @test\n+  @bug 4597455\n+  @summary setFocusable(false) is not moving the focus to next Focusable Component\n+  @key headful\n+  @run main SetFocusableTest\n+*\/\n+\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+\n+public class SetFocusableTest implements KeyListener {\n+    static Object buttonMonitor;\n+    Object tfMonitor;\n+    static final int TEST_TIMEOUT = 5000;\n+    Button button;\n+    Frame frame;\n+    TextField textfield;\n+\n+    public static void main(String[] args) throws Exception {\n+        SetFocusableTest test = new SetFocusableTest();\n+        test.start();\n+    }\n+\n+    public void start() throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                buttonMonitor = new Object();\n+                tfMonitor = new Object();\n+                frame = new Frame();\n+                frame.setTitle(\"Test Frame\");\n+                frame.setLocation(100, 100);\n+                frame.setLayout(new FlowLayout());\n+\n+                button = new Button(\"BUTTON\");\n+                textfield = new TextField(\"First\");\n+\n+                button.addKeyListener(this);\n+                textfield.addKeyListener(this);\n+\n+                frame.add(button);\n+                frame.add(textfield);\n+\n+                frame.setBackground(Color.red);\n+                frame.setSize(500,200);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+                frame.toFront();\n+                button.addFocusListener(new MonitoredFocusListener(buttonMonitor));\n+                textfield.addFocusListener(new MonitoredFocusListener(tfMonitor));\n+            });\n+\n+            Robot robot;\n+            robot = new Robot();\n+            robot.setAutoDelay(100);\n+            robot.setAutoWaitForIdle(true);\n+            robot.delay(1000);\n+\n+            Point buttonOrigin = button.getLocationOnScreen();\n+            Dimension buttonSize = button.getSize();\n+            robot.mouseMove(\n+                (int)buttonOrigin.getX() + (int)buttonSize.getWidth() \/ 2,\n+                (int)buttonOrigin.getY() + (int)buttonSize.getHeight() \/ 2);\n+\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            if (!button.isFocusOwner()) {\n+                synchronized (buttonMonitor) {\n+                    buttonMonitor.wait(TEST_TIMEOUT);\n+                }\n+            }\n+            System.out.println(\"\\n\\nBefore calling the method button.setFocusable(false)\");\n+            System.out.println(\"====================================================\");\n+            System.out.println(\"Button is Focusable(button.isFocusable()) :\"+button.isFocusable());\n+            System.out.println(\"Button is Focus owner(button.isFocusOwner()) :\"+button.isFocusOwner());\n+            System.out.println(\"Button has Focus (button.hasFocus) :\"+button.hasFocus());\n+            System.out.println(\"====================================================\");\n+\n+            button.setFocusable(false);\n+\n+            if (!textfield.isFocusOwner()) {\n+                synchronized (tfMonitor) {\n+                    tfMonitor.wait(TEST_TIMEOUT);\n+                }\n+            }\n+\n+            System.out.println(\"\\nAfter Calling button.setFocusable(false)\");\n+            System.out.println(\"====================================================\");\n+            System.out.println(\"Button is Focusable(button.isFocusable()) :\"+button.isFocusable());\n+            System.out.println(\"Button is Focus owner(button.isFocusOwner()) :\"+button.isFocusOwner());\n+            System.out.println(\"Button has Focus (button.hasFocus()) :\"+button.hasFocus());\n+            System.out.println(\"TextField is Focusable(textfield.isFocusable()) :\"+textfield.isFocusable());\n+            System.out.println(\"TextField is Focus owner(textfield.isFocusOwner()) :\"+textfield.isFocusOwner());\n+            System.out.println(\"TextField has Focus (textfield.hasFocus()) :\"+textfield.hasFocus());\n+            System.out.println(\"====================================================n\\n\\n\\n\");\n+\n+            if (!button.hasFocus() && !button.isFocusOwner() &&\n+                textfield.hasFocus() && textfield.isFocusOwner()){\n+                System.out.println(\"\\n\\n\\nASSERTION :PASSED\");\n+                System.out.println(\"=========================\");\n+                System.out.println(\"Textfield is having the Focus.Transfer of Focus has happend.\");\n+            } else {\n+                System.out.println(\"\\n\\n\\nASSERTION :FAILED\");\n+                System.out.println(\"==========================\");\n+                System.out.println(\"Button is still having the Focus instead of TextField\");\n+                throw new RuntimeException(\"Test FIALED\");\n+            }\n+        } finally {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+        }\n+    }\/\/ start()\n+\n+    public void keyPressed(KeyEvent e) {\n+        System.out.println(\"Key Pressed \");\n+    }\n+    public void keyReleased(KeyEvent ke) {\n+        System.out.println(\"keyReleased called \");\n+    }\n+    public void keyTyped(KeyEvent ke) {\n+        System.out.println(\"keyTyped called \");\n+    }\n+}\/\/ class SetFocusableTest\n+\n+class MonitoredFocusListener extends FocusAdapter {\n+    Object monitor;\n+    public MonitoredFocusListener(Object monitor) {\n+        this.monitor = monitor;\n+    }\n+\n+    public void focusGained(FocusEvent fe) {\n+        System.out.println(fe.toString());\n+        synchronized (monitor) {\n+            monitor.notify();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Focus\/SetFocusableTest.java","additions":179,"deletions":0,"binary":false,"changes":179,"status":"added"}]}