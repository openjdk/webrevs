{"files":[{"patch":"@@ -1865,1 +1865,5 @@\n-    _pc_desc_cache.add_pc_desc(upper);\n+    if (!Thread::current_in_asgct()) {\n+      \/\/ we don't want to modify the cache if we're in ASGCT\n+      \/\/ which is typically called in a signal handler\n+      _pc_desc_cache.add_pc_desc(upper);\n+    }\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -557,2 +557,3 @@\n-  \/\/ !important! make sure all to call thread->set_in_asgct(false) before every return\n-  thread->set_in_asgct(true);\n+\n+  \/\/ signify to other code in the VM that we're in ASGCT\n+  ThreadInAsgct tia(thread);\n@@ -617,1 +618,0 @@\n-  thread->set_in_asgct(false);\n","filename":"src\/hotspot\/share\/prims\/forte.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -324,0 +324,1 @@\n+  _in_asgct = false;\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -765,0 +765,25 @@\n+\n+ private:\n+  bool _in_asgct;\n+ public:\n+  bool in_asgct() const { return _in_asgct; }\n+  void set_in_asgct(bool value) { _in_asgct = value; }\n+  static bool current_in_asgct() {\n+    Thread *cur = Thread::current_or_null_safe();\n+    return cur != nullptr && cur->in_asgct();\n+  }\n+};\n+\n+class ThreadInAsgct {\n+ private:\n+  Thread* _thread;\n+ public:\n+  ThreadInAsgct(Thread* thread) : _thread(thread) {\n+    assert(thread != nullptr, \"invariant\");\n+    assert(!thread->in_asgct(), \"invariant\");\n+    thread->set_in_asgct(true);\n+  }\n+  ~ThreadInAsgct() {\n+    assert(_thread->in_asgct(), \"invariant\");\n+    _thread->set_in_asgct(false);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"}]}