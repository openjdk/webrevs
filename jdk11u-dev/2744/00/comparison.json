{"files":[{"patch":"@@ -1,1 +1,1 @@\n-## GIFLIB v5.2.1\n+## GIFLIB v5.2.2\n@@ -27,1 +27,1 @@\n-https:\/\/sourceforge.net\/p\/giflib\/code\/ci\/master\/tree\/openbsd-reallocarray.c\n+tree\/README\n@@ -29,1 +29,19 @@\n-Copyright (c) 2008 Otto Moerbeek <otto@drijf.net>\n+== Authors ==\n+\n+Gershon Elber <gershon[AT]cs.technion.sc.il>\n+original giflib code\n+\n+Toshio Kuratomi <toshio[AT]tiki-lounge.com>\n+uncompressed gif writing code\n+former maintainer\n+\n+Eric Raymond <esr[AT]snark.thyrsus.com>\n+current as well as long time former maintainer of giflib code\n+\n+There have been many other contributors; see the attributions in the\n+version-control history to learn more.\n+\n+\n+tree\/openbsd-reallocarray.c\n+\n+Copyright (C) 2008 Otto Moerbeek <otto@drijf.net>\n@@ -31,0 +49,2 @@\n+\n+```\n","filename":"src\/java.desktop\/share\/legal\/giflib.md","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-#include <stdlib.h>\n+#include <fcntl.h>\n@@ -40,1 +40,0 @@\n-#include <fcntl.h>\n@@ -42,0 +41,1 @@\n+#include <stdlib.h>\n@@ -58,5 +58,5 @@\n-    \/\/fprintf(stderr, \"### Read: %d\\n\", len);\n-    return\n-    (((GifFilePrivateType*)gif->Private)->Read ?\n-     ((GifFilePrivateType*)gif->Private)->Read(gif,buf,len) :\n-     fread(buf,1,len,((GifFilePrivateType*)gif->Private)->File));\n+    \/\/ fprintf(stderr, \"### Read: %d\\n\", len);\n+    return (((GifFilePrivateType *)gif->Private)->Read\n+                ? ((GifFilePrivateType *)gif->Private)->Read(gif, buf, len)\n+                : fread(buf, 1, len,\n+                        ((GifFilePrivateType *)gif->Private)->File));\n@@ -69,1 +69,2 @@\n-static int DGifGetPrefixChar(GifPrefixType *Prefix, int Code, int ClearCode);\n+static int DGifGetPrefixChar(const GifPrefixType *Prefix, int Code,\n+                             int ClearCode);\n@@ -79,3 +80,1 @@\n-GifFileType *\n-DGifOpenFileName(const char *FileName, int *Error)\n-{\n+GifFileType *DGifOpenFileName(const char *FileName, int *Error) {\n@@ -86,1 +85,1 @@\n-        if (Error != NULL)\n+        if (Error != NULL) {\n@@ -88,0 +87,1 @@\n+        }\n@@ -100,3 +100,1 @@\n-GifFileType *\n-DGifOpenFileHandle(int FileHandle, int *Error)\n-{\n+GifFileType *DGifOpenFileHandle(int FileHandle, int *Error) {\n@@ -110,1 +108,1 @@\n-        if (Error != NULL)\n+        if (Error != NULL) {\n@@ -112,0 +110,1 @@\n+        }\n@@ -116,1 +115,1 @@\n-    \/*@i1@*\/memset(GifFile, '\\0', sizeof(GifFileType));\n+    \/*@i1@*\/ memset(GifFile, '\\0', sizeof(GifFileType));\n@@ -124,1 +123,1 @@\n-        if (Error != NULL)\n+        if (Error != NULL) {\n@@ -126,0 +125,1 @@\n+        }\n@@ -131,1 +131,1 @@\n-    \/*@i1@*\/memset(Private, '\\0', sizeof(GifFilePrivateType));\n+    \/*@i1@*\/ memset(Private, '\\0', sizeof(GifFilePrivateType));\n@@ -134,2 +134,2 @@\n-    _setmode(FileHandle, O_BINARY);    \/* Make sure it is in binary mode. *\/\n-#endif \/* _WIN32 *\/\n+    _setmode(FileHandle, O_BINARY); \/* Make sure it is in binary mode. *\/\n+#endif                                  \/* _WIN32 *\/\n@@ -137,1 +137,1 @@\n-    f = fdopen(FileHandle, \"rb\");    \/* Make it into a stream: *\/\n+    f = fdopen(FileHandle, \"rb\"); \/* Make it into a stream: *\/\n@@ -144,2 +144,2 @@\n-    Private->Read = NULL;        \/* don't use alternate input method (TVT) *\/\n-    GifFile->UserData = NULL;    \/* TVT *\/\n+    Private->Read = NULL;     \/* don't use alternate input method (TVT) *\/\n+    GifFile->UserData = NULL; \/* TVT *\/\n@@ -150,2 +150,3 @@\n-    if (InternalRead(GifFile, (unsigned char *)Buf, GIF_STAMP_LEN) != GIF_STAMP_LEN) {\n-        if (Error != NULL)\n+    if (InternalRead(GifFile, (unsigned char *)Buf, GIF_STAMP_LEN) !=\n+        GIF_STAMP_LEN) {\n+        if (Error != NULL) {\n@@ -153,0 +154,1 @@\n+        }\n@@ -162,1 +164,1 @@\n-        if (Error != NULL)\n+        if (Error != NULL) {\n@@ -164,0 +166,1 @@\n+        }\n@@ -180,1 +183,1 @@\n-    Private->gif89 = (Buf[GIF_VERSION_POS] == '9');\n+    Private->gif89 = (Buf[GIF_VERSION_POS + 1] == '9');\n@@ -188,3 +191,1 @@\n-GifFileType *\n-DGifOpen(void *userData, InputFunc readFunc, int *Error)\n-{\n+GifFileType *DGifOpen(void *userData, InputFunc readFunc, int *Error) {\n@@ -197,1 +198,1 @@\n-        if (Error != NULL)\n+        if (Error != NULL) {\n@@ -199,0 +200,1 @@\n+        }\n@@ -210,1 +212,1 @@\n-        if (Error != NULL)\n+        if (Error != NULL) {\n@@ -212,0 +214,1 @@\n+        }\n@@ -215,1 +218,1 @@\n-    \/*@i1@*\/memset(Private, '\\0', sizeof(GifFilePrivateType));\n+    \/*@i1@*\/ memset(Private, '\\0', sizeof(GifFilePrivateType));\n@@ -222,2 +225,2 @@\n-    Private->Read = readFunc;    \/* TVT *\/\n-    GifFile->UserData = userData;    \/* TVT *\/\n+    Private->Read = readFunc;     \/* TVT *\/\n+    GifFile->UserData = userData; \/* TVT *\/\n@@ -227,2 +230,3 @@\n-    if (InternalRead(GifFile, (unsigned char *)Buf, GIF_STAMP_LEN) != GIF_STAMP_LEN) {\n-        if (Error != NULL)\n+    if (InternalRead(GifFile, (unsigned char *)Buf, GIF_STAMP_LEN) !=\n+        GIF_STAMP_LEN) {\n+        if (Error != NULL) {\n@@ -230,0 +234,1 @@\n+        }\n@@ -238,1 +243,1 @@\n-        if (Error != NULL)\n+        if (Error != NULL) {\n@@ -240,0 +245,1 @@\n+        }\n@@ -248,1 +254,1 @@\n-        if (Error != NULL)\n+        if (Error != NULL) {\n@@ -250,0 +256,1 @@\n+        }\n@@ -256,1 +263,1 @@\n-    Private->gif89 = (Buf[GIF_VERSION_POS] == '9');\n+    Private->gif89 = (Buf[GIF_VERSION_POS + 1] == '9');\n@@ -265,3 +272,1 @@\n-int\n-DGifGetScreenDesc(GifFileType *GifFile)\n-{\n+int DGifGetScreenDesc(GifFileType *GifFile) {\n@@ -281,1 +286,1 @@\n-        DGifGetWord(GifFile, &GifFile->SHeight) == GIF_ERROR)\n+        DGifGetWord(GifFile, &GifFile->SHeight) == GIF_ERROR) {\n@@ -283,0 +288,1 @@\n+    }\n@@ -295,1 +301,1 @@\n-    if (Buf[0] & 0x80) {    \/* Do we have global color map? *\/\n+    if (Buf[0] & 0x80) { \/* Do we have global color map? *\/\n@@ -330,4 +336,2 @@\n-const char *\n-DGifGetGifVersion(GifFileType *GifFile)\n-{\n-    GifFilePrivateType *Private = (GifFilePrivateType *) GifFile->Private;\n+const char *DGifGetGifVersion(GifFileType *GifFile) {\n+    GifFilePrivateType *Private = (GifFilePrivateType *)GifFile->Private;\n@@ -335,1 +339,1 @@\n-    if (Private->gif89)\n+    if (Private->gif89) {\n@@ -337,1 +341,1 @@\n-    else\n+    } else {\n@@ -339,0 +343,1 @@\n+    }\n@@ -344,3 +349,1 @@\n-int\n-DGifGetRecordType(GifFileType *GifFile, GifRecordType* Type)\n-{\n+int DGifGetRecordType(GifFileType *GifFile, GifRecordType *Type) {\n@@ -362,1 +365,1 @@\n-    \/\/fprintf(stderr, \"### DGifGetRecordType: %02x\\n\", Buf);\n+    \/\/ fprintf(stderr, \"### DGifGetRecordType: %02x\\n\", Buf);\n@@ -364,13 +367,13 @@\n-      case DESCRIPTOR_INTRODUCER:\n-          *Type = IMAGE_DESC_RECORD_TYPE;\n-          break;\n-      case EXTENSION_INTRODUCER:\n-          *Type = EXTENSION_RECORD_TYPE;\n-          break;\n-      case TERMINATOR_INTRODUCER:\n-          *Type = TERMINATE_RECORD_TYPE;\n-          break;\n-      default:\n-          *Type = UNDEFINED_RECORD_TYPE;\n-          GifFile->Error = D_GIF_ERR_WRONG_RECORD;\n-          return GIF_ERROR;\n+    case DESCRIPTOR_INTRODUCER:\n+        *Type = IMAGE_DESC_RECORD_TYPE;\n+        break;\n+    case EXTENSION_INTRODUCER:\n+        *Type = EXTENSION_RECORD_TYPE;\n+        break;\n+    case TERMINATOR_INTRODUCER:\n+        *Type = TERMINATE_RECORD_TYPE;\n+        break;\n+    default:\n+        *Type = UNDEFINED_RECORD_TYPE;\n+        GifFile->Error = D_GIF_ERR_WRONG_RECORD;\n+        return GIF_ERROR;\n@@ -382,3 +385,1 @@\n-int\n-DGifGetImageHeader(GifFileType *GifFile)\n-{\n+int DGifGetImageHeader(GifFileType *GifFile) {\n@@ -398,1 +399,1 @@\n-        DGifGetWord(GifFile, &GifFile->Image.Height) == GIF_ERROR)\n+        DGifGetWord(GifFile, &GifFile->Image.Height) == GIF_ERROR) {\n@@ -400,0 +401,1 @@\n+    }\n@@ -418,1 +420,2 @@\n-        GifFile->Image.ColorMap = GifMakeMapObject(1 << BitsPerPixel, NULL);\n+        GifFile->Image.ColorMap =\n+            GifMakeMapObject(1 << BitsPerPixel, NULL);\n@@ -439,2 +442,2 @@\n-    Private->PixelCount = (long)GifFile->Image.Width *\n-       (long)GifFile->Image.Height;\n+    Private->PixelCount =\n+        (long)GifFile->Image.Width * (long)GifFile->Image.Height;\n@@ -450,3 +453,1 @@\n-int\n-DGifGetImageDesc(GifFileType *GifFile)\n-{\n+int DGifGetImageDesc(GifFileType *GifFile) {\n@@ -467,3 +468,3 @@\n-        SavedImage* new_saved_images =\n-            (SavedImage *)reallocarray(GifFile->SavedImages,\n-                            (GifFile->ImageCount + 1), sizeof(SavedImage));\n+        SavedImage *new_saved_images = (SavedImage *)reallocarray(\n+            GifFile->SavedImages, (GifFile->ImageCount + 1),\n+            sizeof(SavedImage));\n@@ -477,1 +478,1 @@\n-             (SavedImage *) malloc(sizeof(SavedImage))) == NULL) {\n+                 (SavedImage *)malloc(sizeof(SavedImage))) == NULL) {\n@@ -486,3 +487,3 @@\n-        sp->ImageDesc.ColorMap = GifMakeMapObject(\n-                                 GifFile->Image.ColorMap->ColorCount,\n-                                 GifFile->Image.ColorMap->Colors);\n+        sp->ImageDesc.ColorMap =\n+            GifMakeMapObject(GifFile->Image.ColorMap->ColorCount,\n+                             GifFile->Image.ColorMap->Colors);\n@@ -496,1 +497,1 @@\n-    sp->ExtensionBlocks = (ExtensionBlock *) NULL;\n+    sp->ExtensionBlocks = (ExtensionBlock *)NULL;\n@@ -506,3 +507,1 @@\n-int\n-DGifGetLine(GifFileType *GifFile, GifPixelType *Line, int LineLen)\n-{\n+int DGifGetLine(GifFileType *GifFile, GifPixelType *Line, int LineLen) {\n@@ -510,1 +509,1 @@\n-    GifFilePrivateType *Private = (GifFilePrivateType *) GifFile->Private;\n+    GifFilePrivateType *Private = (GifFilePrivateType *)GifFile->Private;\n@@ -518,1 +517,1 @@\n-    if (!LineLen)\n+    if (!LineLen) {\n@@ -520,0 +519,1 @@\n+    }\n@@ -528,3 +528,3 @@\n-            \/* We probably won't be called any more, so let's clean up\n-             * everything before we return: need to flush out all the\n-             * rest of image until an empty block (size 0)\n+            \/* We probably won't be called any more, so let's clean\n+             * up everything before we return: need to flush out all\n+             * the rest of image until an empty block (size 0)\n@@ -533,2 +533,3 @@\n-            do\n-                if (DGifGetCodeNext(GifFile, &Dummy) == GIF_ERROR)\n+            do {\n+                if (DGifGetCodeNext(GifFile, &Dummy) ==\n+                    GIF_ERROR) {\n@@ -536,1 +537,2 @@\n-            while (Dummy != NULL) ;\n+                }\n+            } while (Dummy != NULL);\n@@ -539,1 +541,1 @@\n-    } else\n+    } else {\n@@ -541,0 +543,1 @@\n+    }\n@@ -546,3 +549,1 @@\n-int\n-DGifGetPixel(GifFileType *GifFile, GifPixelType Pixel)\n-{\n+int DGifGetPixel(GifFileType *GifFile, GifPixelType Pixel) {\n@@ -550,1 +551,1 @@\n-    GifFilePrivateType *Private = (GifFilePrivateType *) GifFile->Private;\n+    GifFilePrivateType *Private = (GifFilePrivateType *)GifFile->Private;\n@@ -557,2 +558,1 @@\n-    if (--Private->PixelCount > 0xffff0000UL)\n-    {\n+    if (--Private->PixelCount > 0xffff0000UL) {\n@@ -565,3 +565,3 @@\n-            \/* We probably won't be called any more, so let's clean up\n-             * everything before we return: need to flush out all the\n-             * rest of image until an empty block (size 0)\n+            \/* We probably won't be called any more, so let's clean\n+             * up everything before we return: need to flush out all\n+             * the rest of image until an empty block (size 0)\n@@ -570,2 +570,3 @@\n-            do\n-                if (DGifGetCodeNext(GifFile, &Dummy) == GIF_ERROR)\n+            do {\n+                if (DGifGetCodeNext(GifFile, &Dummy) ==\n+                    GIF_ERROR) {\n@@ -573,1 +574,2 @@\n-            while (Dummy != NULL) ;\n+                }\n+            } while (Dummy != NULL);\n@@ -576,1 +578,1 @@\n-    } else\n+    } else {\n@@ -578,0 +580,1 @@\n+    }\n@@ -587,3 +590,2 @@\n-int\n-DGifGetExtension(GifFileType *GifFile, int *ExtCode, GifByteType **Extension)\n-{\n+int DGifGetExtension(GifFileType *GifFile, int *ExtCode,\n+                     GifByteType **Extension) {\n@@ -593,1 +595,1 @@\n-    \/\/fprintf(stderr, \"### -> DGifGetExtension:\\n\");\n+    \/\/ fprintf(stderr, \"### -> DGifGetExtension:\\n\");\n@@ -606,1 +608,2 @@\n-    \/\/fprintf(stderr, \"### <- DGifGetExtension: %02x, about to call next\\n\", Buf);\n+    \/\/ fprintf(stderr, \"### <- DGifGetExtension: %02x, about to call\n+    \/\/ next\\n\", Buf);\n@@ -616,3 +619,1 @@\n-int\n-DGifGetExtensionNext(GifFileType *GifFile, GifByteType ** Extension)\n-{\n+int DGifGetExtensionNext(GifFileType *GifFile, GifByteType **Extension) {\n@@ -622,1 +623,1 @@\n-    \/\/fprintf(stderr, \"### -> DGifGetExtensionNext\\n\");\n+    \/\/ fprintf(stderr, \"### -> DGifGetExtensionNext\\n\");\n@@ -627,1 +628,1 @@\n-    \/\/fprintf(stderr, \"### DGifGetExtensionNext sees %d\\n\", Buf);\n+    \/\/ fprintf(stderr, \"### DGifGetExtensionNext sees %d\\n\", Buf);\n@@ -630,3 +631,4 @@\n-        *Extension = Private->Buf;    \/* Use private unused buffer. *\/\n-        (*Extension)[0] = Buf;  \/* Pascal strings notation (pos. 0 is len.). *\/\n-        \/* coverity[tainted_data,check_return] *\/\n+        *Extension = Private->Buf; \/* Use private unused buffer. *\/\n+        (*Extension)[0] =\n+            Buf; \/* Pascal strings notation (pos. 0 is len.). *\/\n+                 \/* coverity[tainted_data,check_return] *\/\n@@ -637,1 +639,1 @@\n-    } else\n+    } else {\n@@ -639,1 +641,2 @@\n-    \/\/fprintf(stderr, \"### <- DGifGetExtensionNext: %p\\n\", Extension);\n+    }\n+    \/\/ fprintf(stderr, \"### <- DGifGetExtensionNext: %p\\n\", Extension);\n@@ -650,2 +653,1 @@\n-                       GraphicsControlBlock *GCB)\n-{\n+                       GraphicsControlBlock *GCB) {\n@@ -658,2 +660,3 @@\n-    GCB->DelayTime = UNSIGNED_LITTLE_ENDIAN(GifExtension[1], GifExtension[2]);\n-    if (GifExtension[0] & 0x01)\n+    GCB->DelayTime =\n+        UNSIGNED_LITTLE_ENDIAN(GifExtension[1], GifExtension[2]);\n+    if (GifExtension[0] & 0x01) {\n@@ -661,1 +664,1 @@\n-    else\n+    } else {\n@@ -663,0 +666,1 @@\n+    }\n@@ -671,3 +675,2 @@\n-int DGifSavedExtensionToGCB(GifFileType *GifFile,\n-                int ImageIndex, GraphicsControlBlock *GCB)\n-{\n+int DGifSavedExtensionToGCB(GifFileType *GifFile, int ImageIndex,\n+                            GraphicsControlBlock *GCB) {\n@@ -676,1 +679,1 @@\n-    if (ImageIndex < 0 || ImageIndex > GifFile->ImageCount - 1)\n+    if (ImageIndex < 0 || ImageIndex > GifFile->ImageCount - 1) {\n@@ -678,0 +681,1 @@\n+    }\n@@ -684,4 +688,8 @@\n-    for (i = 0; i < GifFile->SavedImages[ImageIndex].ExtensionBlockCount; i++) {\n-        ExtensionBlock *ep = &GifFile->SavedImages[ImageIndex].ExtensionBlocks[i];\n-        if (ep->Function == GRAPHICS_EXT_FUNC_CODE)\n-            return DGifExtensionToGCB(ep->ByteCount, ep->Bytes, GCB);\n+    for (i = 0; i < GifFile->SavedImages[ImageIndex].ExtensionBlockCount;\n+         i++) {\n+        ExtensionBlock *ep =\n+            &GifFile->SavedImages[ImageIndex].ExtensionBlocks[i];\n+        if (ep->Function == GRAPHICS_EXT_FUNC_CODE) {\n+            return DGifExtensionToGCB(ep->ByteCount, ep->Bytes,\n+                                      GCB);\n+        }\n@@ -696,3 +704,1 @@\n-int\n-DGifCloseFile(GifFileType *GifFile, int *ErrorCode)\n-{\n+int DGifCloseFile(GifFileType *GifFile, int *ErrorCode) {\n@@ -701,1 +707,1 @@\n-    if (GifFile == NULL || GifFile->Private == NULL)\n+    if (GifFile == NULL || GifFile->Private == NULL) {\n@@ -703,0 +709,1 @@\n+    }\n@@ -719,1 +726,2 @@\n-    GifFreeExtensions(&GifFile->ExtensionBlockCount, &GifFile->ExtensionBlocks);\n+    GifFreeExtensions(&GifFile->ExtensionBlockCount,\n+                      &GifFile->ExtensionBlocks);\n@@ -721,1 +729,1 @@\n-    Private = (GifFilePrivateType *) GifFile->Private;\n+    Private = (GifFilePrivateType *)GifFile->Private;\n@@ -725,1 +733,1 @@\n-        if (ErrorCode != NULL)\n+        if (ErrorCode != NULL) {\n@@ -727,0 +735,1 @@\n+        }\n@@ -733,1 +742,1 @@\n-        if (ErrorCode != NULL)\n+        if (ErrorCode != NULL) {\n@@ -735,0 +744,1 @@\n+        }\n@@ -742,1 +752,1 @@\n-    if (ErrorCode != NULL)\n+    if (ErrorCode != NULL) {\n@@ -744,0 +754,1 @@\n+    }\n@@ -750,3 +761,1 @@\n-static int\n-DGifGetWord(GifFileType *GifFile, GifWord *Word)\n-{\n+static int DGifGetWord(GifFileType *GifFile, GifWord *Word) {\n@@ -772,3 +781,1 @@\n-int\n-DGifGetCode(GifFileType *GifFile, int *CodeSize, GifByteType **CodeBlock)\n-{\n+int DGifGetCode(GifFileType *GifFile, int *CodeSize, GifByteType **CodeBlock) {\n@@ -793,3 +800,1 @@\n-int\n-DGifGetCodeNext(GifFileType *GifFile, GifByteType **CodeBlock)\n-{\n+int DGifGetCodeNext(GifFileType *GifFile, GifByteType **CodeBlock) {\n@@ -808,3 +813,4 @@\n-        *CodeBlock = Private->Buf;    \/* Use private unused buffer. *\/\n-        (*CodeBlock)[0] = Buf;  \/* Pascal strings notation (pos. 0 is len.). *\/\n-        \/* coverity[tainted_data] *\/\n+        *CodeBlock = Private->Buf; \/* Use private unused buffer. *\/\n+        (*CodeBlock)[0] =\n+            Buf; \/* Pascal strings notation (pos. 0 is len.). *\/\n+                 \/* coverity[tainted_data] *\/\n@@ -817,2 +823,3 @@\n-        Private->Buf[0] = 0;    \/* Make sure the buffer is empty! *\/\n-        Private->PixelCount = 0;    \/* And local info. indicate image read. *\/\n+        Private->Buf[0] = 0; \/* Make sure the buffer is empty! *\/\n+        Private->PixelCount =\n+            0; \/* And local info. indicate image read. *\/\n@@ -827,3 +834,1 @@\n-static int\n-DGifSetupDecompress(GifFileType *GifFile)\n-{\n+static int DGifSetupDecompress(GifFileType *GifFile) {\n@@ -836,2 +841,4 @@\n-    if (InternalRead(GifFile, &CodeSize, 1) < 1) {    \/* Read Code size from file. *\/\n-        return GIF_ERROR;    \/* Failed to read Code size. *\/\n+    if (InternalRead(GifFile, &CodeSize, 1) <\n+        1) { \/* Read Code size from file. *\/\n+        GifFile->Error = D_GIF_ERR_READ_FAILED;\n+        return GIF_ERROR; \/* Failed to read Code size. *\/\n@@ -843,2 +850,3 @@\n-        GifFile->Error = D_GIF_ERR_READ_FAILED;    \/* somewhat bogus error code *\/\n-        return GIF_ERROR;    \/* Failed to read Code size. *\/\n+        GifFile->Error =\n+            D_GIF_ERR_READ_FAILED; \/* somewhat bogus error code *\/\n+        return GIF_ERROR;          \/* Failed to read Code size. *\/\n@@ -847,1 +855,1 @@\n-    Private->Buf[0] = 0;    \/* Input Buffer empty. *\/\n+    Private->Buf[0] = 0; \/* Input Buffer empty. *\/\n@@ -852,3 +860,3 @@\n-    Private->RunningBits = BitsPerPixel + 1;    \/* Number of bits per code. *\/\n-    Private->MaxCode1 = 1 << Private->RunningBits;    \/* Max. code + 1. *\/\n-    Private->StackPtr = 0;    \/* No pixels on the pixel stack. *\/\n+    Private->RunningBits = BitsPerPixel + 1; \/* Number of bits per code. *\/\n+    Private->MaxCode1 = 1 << Private->RunningBits; \/* Max. code + 1. *\/\n+    Private->StackPtr = 0; \/* No pixels on the pixel stack. *\/\n@@ -856,1 +864,1 @@\n-    Private->CrntShiftState = 0;    \/* No information in CrntShiftDWord. *\/\n+    Private->CrntShiftState = 0; \/* No information in CrntShiftDWord. *\/\n@@ -860,1 +868,1 @@\n-    for (i = 0; i <= LZ_MAX_CODE; i++)\n+    for (i = 0; i <= LZ_MAX_CODE; i++) {\n@@ -862,0 +870,1 @@\n+    }\n@@ -872,3 +881,2 @@\n-static int\n-DGifDecompressLine(GifFileType *GifFile, GifPixelType *Line, int LineLen)\n-{\n+static int DGifDecompressLine(GifFileType *GifFile, GifPixelType *Line,\n+                              int LineLen) {\n@@ -879,1 +887,1 @@\n-    GifFilePrivateType *Private = (GifFilePrivateType *) GifFile->Private;\n+    GifFilePrivateType *Private = (GifFilePrivateType *)GifFile->Private;\n@@ -894,2 +902,3 @@\n-        \/* Let pop the stack off before continueing to read the GIF file: *\/\n-        while (StackPtr != 0 && i < LineLen)\n+        \/* Let pop the stack off before continueing to read the GIF\n+         * file: *\/\n+        while (StackPtr != 0 && i < LineLen) {\n@@ -897,0 +906,1 @@\n+        }\n@@ -899,2 +909,2 @@\n-    while (i < LineLen) {    \/* Decode LineLen items. *\/\n-        if (DGifDecompressInput(GifFile, &CrntCode) == GIF_ERROR)\n+    while (i < LineLen) { \/* Decode LineLen items. *\/\n+        if (DGifDecompressInput(GifFile, &CrntCode) == GIF_ERROR) {\n@@ -902,0 +912,1 @@\n+        }\n@@ -904,3 +915,4 @@\n-            \/* Note however that usually we will not be here as we will stop\n-             * decoding as soon as we got all the pixel, or EOF code will\n-             * not be read at all, and DGifGetLine\/Pixel clean everything.  *\/\n+            \/* Note however that usually we will not be here as we\n+             * will stop decoding as soon as we got all the pixel,\n+             * or EOF code will not be read at all, and\n+             * DGifGetLine\/Pixel clean everything.  *\/\n@@ -911,1 +923,1 @@\n-            for (j = 0; j <= LZ_MAX_CODE; j++)\n+            for (j = 0; j <= LZ_MAX_CODE; j++) {\n@@ -913,0 +925,1 @@\n+            }\n@@ -918,3 +931,3 @@\n-            \/* Its regular code - if in pixel range simply add it to output\n-             * stream, otherwise trace to codes linked list until the prefix\n-             * is in pixel range: *\/\n+            \/* Its regular code - if in pixel range simply add it to\n+             * output stream, otherwise trace to codes linked list\n+             * until the prefix is in pixel range: *\/\n@@ -922,1 +935,2 @@\n-                \/* This is simple - its pixel scalar, so add it to output: *\/\n+                \/* This is simple - its pixel scalar, so add it\n+                 * to output: *\/\n@@ -925,4 +939,5 @@\n-                \/* Its a code to needed to be traced: trace the linked list\n-                 * until the prefix is a pixel, while pushing the suffix\n-                 * pixels on our stack. If we done, pop the stack in reverse\n-                 * (thats what stack is good for!) order to output.  *\/\n+                \/* Its a code to needed to be traced: trace the\n+                 * linked list until the prefix is a pixel,\n+                 * while pushing the suffix pixels on our stack.\n+                 * If we done, pop the stack in reverse (thats\n+                 * what stack is good for!) order to output.  *\/\n@@ -932,9 +947,13 @@\n-                    \/* Only allowed if CrntCode is exactly the running code:\n-                     * In that case CrntCode = XXXCode, CrntCode or the\n-                     * prefix code is last code and the suffix char is\n-                     * exactly the prefix of last code! *\/\n-                    if (CrntCode == Private->RunningCode - 2) {\n-                        Suffix[Private->RunningCode - 2] =\n-                           Stack[StackPtr++] = DGifGetPrefixChar(Prefix,\n-                                                                 LastCode,\n-                                                                 ClearCode);\n+                    \/* Only allowed if CrntCode is exactly\n+                     * the running code: In that case\n+                     * CrntCode = XXXCode, CrntCode or the\n+                     * prefix code is last code and the\n+                     * suffix char is exactly the prefix of\n+                     * last code! *\/\n+                    if (CrntCode ==\n+                        Private->RunningCode - 2) {\n+                        Suffix[Private->RunningCode -\n+                               2] = Stack[StackPtr++] =\n+                            DGifGetPrefixChar(\n+                                Prefix, LastCode,\n+                                ClearCode);\n@@ -942,4 +961,5 @@\n-                        Suffix[Private->RunningCode - 2] =\n-                           Stack[StackPtr++] = DGifGetPrefixChar(Prefix,\n-                                                                 CrntCode,\n-                                                                 ClearCode);\n+                        Suffix[Private->RunningCode -\n+                               2] = Stack[StackPtr++] =\n+                            DGifGetPrefixChar(\n+                                Prefix, CrntCode,\n+                                ClearCode);\n@@ -947,1 +967,1 @@\n-                } else\n+                } else {\n@@ -949,0 +969,1 @@\n+                }\n@@ -950,4 +971,5 @@\n-                \/* Now (if image is O.K.) we should not get a NO_SUCH_CODE\n-                 * during the trace. As we might loop forever, in case of\n-                 * defective image, we use StackPtr as loop counter and stop\n-                 * before overflowing Stack[]. *\/\n+                \/* Now (if image is O.K.) we should not get a\n+                 * NO_SUCH_CODE during the trace. As we might\n+                 * loop forever, in case of defective image, we\n+                 * use StackPtr as loop counter and stop before\n+                 * overflowing Stack[]. *\/\n@@ -955,1 +977,2 @@\n-                       CrntPrefix > ClearCode && CrntPrefix <= LZ_MAX_CODE) {\n+                       CrntPrefix > ClearCode &&\n+                       CrntPrefix <= LZ_MAX_CODE) {\n@@ -959,1 +982,2 @@\n-                if (StackPtr >= LZ_MAX_CODE || CrntPrefix > LZ_MAX_CODE) {\n+                if (StackPtr >= LZ_MAX_CODE ||\n+                    CrntPrefix > LZ_MAX_CODE) {\n@@ -967,1 +991,1 @@\n-                while (StackPtr != 0 && i < LineLen)\n+                while (StackPtr != 0 && i < LineLen) {\n@@ -969,0 +993,1 @@\n+                }\n@@ -970,1 +995,3 @@\n-            if (LastCode != NO_SUCH_CODE && Private->RunningCode - 2 < (LZ_MAX_CODE+1) && Prefix[Private->RunningCode - 2] == NO_SUCH_CODE) {\n+            if (LastCode != NO_SUCH_CODE &&\n+                Private->RunningCode - 2 < (LZ_MAX_CODE + 1) &&\n+                Prefix[Private->RunningCode - 2] == NO_SUCH_CODE) {\n@@ -974,4 +1001,6 @@\n-                    \/* Only allowed if CrntCode is exactly the running code:\n-                     * In that case CrntCode = XXXCode, CrntCode or the\n-                     * prefix code is last code and the suffix char is\n-                     * exactly the prefix of last code! *\/\n+                    \/* Only allowed if CrntCode is exactly\n+                     * the running code: In that case\n+                     * CrntCode = XXXCode, CrntCode or the\n+                     * prefix code is last code and the\n+                     * suffix char is exactly the prefix of\n+                     * last code! *\/\n@@ -979,1 +1008,2 @@\n-                       DGifGetPrefixChar(Prefix, LastCode, ClearCode);\n+                        DGifGetPrefixChar(Prefix, LastCode,\n+                                          ClearCode);\n@@ -982,1 +1012,2 @@\n-                       DGifGetPrefixChar(Prefix, CrntCode, ClearCode);\n+                        DGifGetPrefixChar(Prefix, CrntCode,\n+                                          ClearCode);\n@@ -1001,3 +1032,2 @@\n-static int\n-DGifGetPrefixChar(GifPrefixType *Prefix, int Code, int ClearCode)\n-{\n+static int DGifGetPrefixChar(const GifPrefixType *Prefix, int Code,\n+                             int ClearCode) {\n@@ -1019,3 +1049,1 @@\n-int\n-DGifGetLZCodes(GifFileType *GifFile, int *Code)\n-{\n+int DGifGetLZCodes(GifFileType *GifFile, int *Code) {\n@@ -1031,1 +1059,1 @@\n-    if (DGifDecompressInput(GifFile, Code) == GIF_ERROR)\n+    if (DGifDecompressInput(GifFile, Code) == GIF_ERROR) {\n@@ -1033,0 +1061,1 @@\n+    }\n@@ -1035,1 +1064,2 @@\n-        \/* Skip rest of codes (hopefully only NULL terminating block): *\/\n+        \/* Skip rest of codes (hopefully only NULL terminating block):\n+         *\/\n@@ -1037,1 +1067,1 @@\n-            if (DGifGetCodeNext(GifFile, &CodeBlock) == GIF_ERROR)\n+            if (DGifGetCodeNext(GifFile, &CodeBlock) == GIF_ERROR) {\n@@ -1039,1 +1069,2 @@\n-        } while (CodeBlock != NULL) ;\n+            }\n+        } while (CodeBlock != NULL);\n@@ -1058,3 +1089,1 @@\n-static int\n-DGifDecompressInput(GifFileType *GifFile, int *Code)\n-{\n+static int DGifDecompressInput(GifFileType *GifFile, int *Code) {\n@@ -1062,5 +1091,2 @@\n-        0x0000, 0x0001, 0x0003, 0x0007,\n-        0x000f, 0x001f, 0x003f, 0x007f,\n-        0x00ff, 0x01ff, 0x03ff, 0x07ff,\n-        0x0fff\n-    };\n+        0x0000, 0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f,\n+        0x007f, 0x00ff, 0x01ff, 0x03ff, 0x07ff, 0x0fff};\n@@ -1080,1 +1106,2 @@\n-        if (DGifBufferedInput(GifFile, Private->Buf, &NextByte) == GIF_ERROR) {\n+        if (DGifBufferedInput(GifFile, Private->Buf, &NextByte) ==\n+            GIF_ERROR) {\n@@ -1083,2 +1110,2 @@\n-        Private->CrntShiftDWord |=\n-            ((unsigned long)NextByte) << Private->CrntShiftState;\n+        Private->CrntShiftDWord |= ((unsigned long)NextByte)\n+                                   << Private->CrntShiftState;\n@@ -1112,3 +1139,2 @@\n-static int\n-DGifBufferedInput(GifFileType *GifFile, GifByteType *Buf, GifByteType *NextByte)\n-{\n+static int DGifBufferedInput(GifFileType *GifFile, GifByteType *Buf,\n+                             GifByteType *NextByte) {\n@@ -1123,2 +1149,2 @@\n-         * says the LZW termination code should come first.  Therefore we\n-         * shouldn't be inside this routine at that point.\n+         * says the LZW termination code should come first.  Therefore\n+         * we shouldn't be inside this routine at that point.\n@@ -1135,1 +1161,1 @@\n-        Buf[1] = 2;    \/* We use now the second place as last char read! *\/\n+        Buf[1] = 2; \/* We use now the second place as last char read! *\/\n@@ -1145,0 +1171,20 @@\n+\/******************************************************************************\n+ This routine is called in case of error during parsing image. We need to\n+ decrease image counter and reallocate memory for saved images. Not decreasing\n+ ImageCount may lead to null pointer dereference, because the last element in\n+ SavedImages may point to the spoilt image and null pointer buffers.\n+*******************************************************************************\/\n+void DGifDecreaseImageCounter(GifFileType *GifFile) {\n+    GifFile->ImageCount--;\n+    if (GifFile->SavedImages[GifFile->ImageCount].RasterBits != NULL) {\n+        free(GifFile->SavedImages[GifFile->ImageCount].RasterBits);\n+    }\n+\n+    \/\/ Realloc array according to the new image counter.\n+    SavedImage *correct_saved_images = (SavedImage *)reallocarray(\n+        GifFile->SavedImages, GifFile->ImageCount, sizeof(SavedImage));\n+    if (correct_saved_images != NULL) {\n+        GifFile->SavedImages = correct_saved_images;\n+    }\n+}\n+\n@@ -1150,3 +1196,1 @@\n-int\n-DGifSlurp(GifFileType *GifFile)\n-{\n+int DGifSlurp(GifFileType *GifFile) {\n@@ -1163,1 +1207,1 @@\n-        if (DGifGetRecordType(GifFile, &RecordType) == GIF_ERROR)\n+        if (DGifGetRecordType(GifFile, &RecordType) == GIF_ERROR) {\n@@ -1165,0 +1209,1 @@\n+        }\n@@ -1167,86 +1212,112 @@\n-          case IMAGE_DESC_RECORD_TYPE:\n-              if (DGifGetImageDesc(GifFile) == GIF_ERROR)\n-                  return (GIF_ERROR);\n-\n-              sp = &GifFile->SavedImages[GifFile->ImageCount - 1];\n-              \/* Allocate memory for the image *\/\n-              if (sp->ImageDesc.Width <= 0 || sp->ImageDesc.Height <= 0 ||\n-                      sp->ImageDesc.Width > (INT_MAX \/ sp->ImageDesc.Height)) {\n-                  return GIF_ERROR;\n-              }\n-              ImageSize = sp->ImageDesc.Width * sp->ImageDesc.Height;\n-\n-              if (ImageSize > (SIZE_MAX \/ sizeof(GifPixelType))) {\n-                  return GIF_ERROR;\n-              }\n-              sp->RasterBits = (unsigned char *)reallocarray(NULL, ImageSize,\n-                      sizeof(GifPixelType));\n-\n-              if (sp->RasterBits == NULL) {\n-                  return GIF_ERROR;\n-              }\n-\n-              if (sp->ImageDesc.Interlace) {\n-                  int i, j;\n-                   \/*\n-                    * The way an interlaced image should be read -\n-                    * offsets and jumps...\n-                    *\/\n-                  int InterlacedOffset[] = { 0, 4, 2, 1 };\n-                  int InterlacedJumps[] = { 8, 8, 4, 2 };\n-                  \/* Need to perform 4 passes on the image *\/\n-                  for (i = 0; i < 4; i++)\n-                      for (j = InterlacedOffset[i];\n-                       j < sp->ImageDesc.Height;\n-                       j += InterlacedJumps[i]) {\n-                      if (DGifGetLine(GifFile,\n-                              sp->RasterBits+j*sp->ImageDesc.Width,\n-                              sp->ImageDesc.Width) == GIF_ERROR)\n-                          return GIF_ERROR;\n-                      }\n-              }\n-              else {\n-                  if (DGifGetLine(GifFile,sp->RasterBits,ImageSize)==GIF_ERROR)\n-                      return (GIF_ERROR);\n-              }\n-\n-              if (GifFile->ExtensionBlocks) {\n-                  sp->ExtensionBlocks = GifFile->ExtensionBlocks;\n-                  sp->ExtensionBlockCount = GifFile->ExtensionBlockCount;\n-\n-                  GifFile->ExtensionBlocks = NULL;\n-                  GifFile->ExtensionBlockCount = 0;\n-              }\n-              break;\n-\n-          case EXTENSION_RECORD_TYPE:\n-              if (DGifGetExtension(GifFile,&ExtFunction,&ExtData) == GIF_ERROR)\n-                  return (GIF_ERROR);\n-              \/* Create an extension block with our data *\/\n-              if (ExtData != NULL) {\n-                  if (GifAddExtensionBlock(&GifFile->ExtensionBlockCount,\n-                               &GifFile->ExtensionBlocks,\n-                               ExtFunction, ExtData[0], &ExtData[1])\n-                      == GIF_ERROR)\n-                      return (GIF_ERROR);\n-              }\n-              for (;;) {\n-                  if (DGifGetExtensionNext(GifFile, &ExtData) == GIF_ERROR)\n-                      return (GIF_ERROR);\n-                  if (ExtData == NULL)\n-                      break;\n-                  \/* Continue the extension block *\/\n-                  if (ExtData != NULL)\n-                      if (GifAddExtensionBlock(&GifFile->ExtensionBlockCount,\n-                                   &GifFile->ExtensionBlocks,\n-                                   CONTINUE_EXT_FUNC_CODE,\n-                                   ExtData[0], &ExtData[1]) == GIF_ERROR)\n-                              return (GIF_ERROR);\n-              }\n-              break;\n-\n-          case TERMINATE_RECORD_TYPE:\n-              break;\n-\n-          default:    \/* Should be trapped by DGifGetRecordType *\/\n-              break;\n+        case IMAGE_DESC_RECORD_TYPE:\n+            if (DGifGetImageDesc(GifFile) == GIF_ERROR) {\n+                return (GIF_ERROR);\n+            }\n+\n+            sp = &GifFile->SavedImages[GifFile->ImageCount - 1];\n+            \/* Allocate memory for the image *\/\n+            if (sp->ImageDesc.Width <= 0 ||\n+                sp->ImageDesc.Height <= 0 ||\n+                sp->ImageDesc.Width >\n+                    (INT_MAX \/ sp->ImageDesc.Height)) {\n+                DGifDecreaseImageCounter(GifFile);\n+                return GIF_ERROR;\n+            }\n+            ImageSize = sp->ImageDesc.Width * sp->ImageDesc.Height;\n+\n+            if (ImageSize > (SIZE_MAX \/ sizeof(GifPixelType))) {\n+                DGifDecreaseImageCounter(GifFile);\n+                return GIF_ERROR;\n+            }\n+            sp->RasterBits = (unsigned char *)reallocarray(\n+                NULL, ImageSize, sizeof(GifPixelType));\n+\n+            if (sp->RasterBits == NULL) {\n+                DGifDecreaseImageCounter(GifFile);\n+                return GIF_ERROR;\n+            }\n+\n+            if (sp->ImageDesc.Interlace) {\n+                int i, j;\n+                \/*\n+                 * The way an interlaced image should be read -\n+                 * offsets and jumps...\n+                 *\/\n+                static const int InterlacedOffset[] = {0, 4, 2,\n+                                                       1};\n+                static const int InterlacedJumps[] = {8, 8, 4,\n+                                                      2};\n+                \/* Need to perform 4 passes on the image *\/\n+                for (i = 0; i < 4; i++) {\n+                    for (j = InterlacedOffset[i];\n+                         j < sp->ImageDesc.Height;\n+                         j += InterlacedJumps[i]) {\n+                        if (DGifGetLine(\n+                                GifFile,\n+                                sp->RasterBits +\n+                                    j * sp->ImageDesc\n+                                            .Width,\n+                                sp->ImageDesc.Width) ==\n+                            GIF_ERROR) {\n+                            DGifDecreaseImageCounter(\n+                                GifFile);\n+                            return GIF_ERROR;\n+                        }\n+                    }\n+                }\n+            } else {\n+                if (DGifGetLine(GifFile, sp->RasterBits,\n+                                ImageSize) == GIF_ERROR) {\n+                    DGifDecreaseImageCounter(GifFile);\n+                    return GIF_ERROR;\n+                }\n+            }\n+\n+            if (GifFile->ExtensionBlocks) {\n+                sp->ExtensionBlocks = GifFile->ExtensionBlocks;\n+                sp->ExtensionBlockCount =\n+                    GifFile->ExtensionBlockCount;\n+\n+                GifFile->ExtensionBlocks = NULL;\n+                GifFile->ExtensionBlockCount = 0;\n+            }\n+            break;\n+\n+        case EXTENSION_RECORD_TYPE:\n+            if (DGifGetExtension(GifFile, &ExtFunction, &ExtData) ==\n+                GIF_ERROR) {\n+                return (GIF_ERROR);\n+            }\n+            \/* Create an extension block with our data *\/\n+            if (ExtData != NULL) {\n+                if (GifAddExtensionBlock(\n+                        &GifFile->ExtensionBlockCount,\n+                        &GifFile->ExtensionBlocks, ExtFunction,\n+                        ExtData[0], &ExtData[1]) == GIF_ERROR) {\n+                    return (GIF_ERROR);\n+                }\n+            }\n+            for (;;) {\n+                if (DGifGetExtensionNext(GifFile, &ExtData) ==\n+                    GIF_ERROR) {\n+                    return (GIF_ERROR);\n+                }\n+                if (ExtData == NULL) {\n+                    break;\n+                }\n+                \/* Continue the extension block *\/\n+                if (GifAddExtensionBlock(\n+                        &GifFile->ExtensionBlockCount,\n+                        &GifFile->ExtensionBlocks,\n+                        CONTINUE_EXT_FUNC_CODE, ExtData[0],\n+                        &ExtData[1]) == GIF_ERROR) {\n+                    return (GIF_ERROR);\n+                }\n+            }\n+            break;\n+\n+        case TERMINATE_RECORD_TYPE:\n+            break;\n+\n+        default: \/* Should be trapped by DGifGetRecordType *\/\n+            break;\n@@ -1259,1 +1330,1 @@\n-        return(GIF_ERROR);\n+        return (GIF_ERROR);\n","filename":"src\/java.desktop\/share\/native\/libsplashscreen\/giflib\/dgif_lib.c","additions":413,"deletions":342,"binary":false,"changes":755,"status":"modified"},{"patch":"@@ -41,3 +41,1 @@\n-const char *\n-GifErrorString(int ErrorCode)\n-{\n+const char *GifErrorString(int ErrorCode) {\n@@ -47,1 +45,1 @@\n-      case E_GIF_ERR_OPEN_FAILED:\n+    case E_GIF_ERR_OPEN_FAILED:\n@@ -50,1 +48,1 @@\n-      case E_GIF_ERR_WRITE_FAILED:\n+    case E_GIF_ERR_WRITE_FAILED:\n@@ -53,1 +51,1 @@\n-      case E_GIF_ERR_HAS_SCRN_DSCR:\n+    case E_GIF_ERR_HAS_SCRN_DSCR:\n@@ -56,1 +54,1 @@\n-      case E_GIF_ERR_HAS_IMAG_DSCR:\n+    case E_GIF_ERR_HAS_IMAG_DSCR:\n@@ -59,1 +57,1 @@\n-      case E_GIF_ERR_NO_COLOR_MAP:\n+    case E_GIF_ERR_NO_COLOR_MAP:\n@@ -62,1 +60,1 @@\n-      case E_GIF_ERR_DATA_TOO_BIG:\n+    case E_GIF_ERR_DATA_TOO_BIG:\n@@ -65,1 +63,1 @@\n-      case E_GIF_ERR_NOT_ENOUGH_MEM:\n+    case E_GIF_ERR_NOT_ENOUGH_MEM:\n@@ -68,1 +66,1 @@\n-      case E_GIF_ERR_DISK_IS_FULL:\n+    case E_GIF_ERR_DISK_IS_FULL:\n@@ -71,1 +69,1 @@\n-      case E_GIF_ERR_CLOSE_FAILED:\n+    case E_GIF_ERR_CLOSE_FAILED:\n@@ -74,1 +72,1 @@\n-      case E_GIF_ERR_NOT_WRITEABLE:\n+    case E_GIF_ERR_NOT_WRITEABLE:\n@@ -77,1 +75,1 @@\n-      case D_GIF_ERR_OPEN_FAILED:\n+    case D_GIF_ERR_OPEN_FAILED:\n@@ -80,1 +78,1 @@\n-      case D_GIF_ERR_READ_FAILED:\n+    case D_GIF_ERR_READ_FAILED:\n@@ -83,1 +81,1 @@\n-      case D_GIF_ERR_NOT_GIF_FILE:\n+    case D_GIF_ERR_NOT_GIF_FILE:\n@@ -86,1 +84,1 @@\n-      case D_GIF_ERR_NO_SCRN_DSCR:\n+    case D_GIF_ERR_NO_SCRN_DSCR:\n@@ -89,1 +87,1 @@\n-      case D_GIF_ERR_NO_IMAG_DSCR:\n+    case D_GIF_ERR_NO_IMAG_DSCR:\n@@ -92,1 +90,1 @@\n-      case D_GIF_ERR_NO_COLOR_MAP:\n+    case D_GIF_ERR_NO_COLOR_MAP:\n@@ -95,1 +93,1 @@\n-      case D_GIF_ERR_WRONG_RECORD:\n+    case D_GIF_ERR_WRONG_RECORD:\n@@ -98,1 +96,1 @@\n-      case D_GIF_ERR_DATA_TOO_BIG:\n+    case D_GIF_ERR_DATA_TOO_BIG:\n@@ -101,1 +99,1 @@\n-      case D_GIF_ERR_NOT_ENOUGH_MEM:\n+    case D_GIF_ERR_NOT_ENOUGH_MEM:\n@@ -104,1 +102,1 @@\n-      case D_GIF_ERR_CLOSE_FAILED:\n+    case D_GIF_ERR_CLOSE_FAILED:\n@@ -107,1 +105,1 @@\n-      case D_GIF_ERR_NOT_READABLE:\n+    case D_GIF_ERR_NOT_READABLE:\n@@ -110,1 +108,1 @@\n-      case D_GIF_ERR_IMAGE_DEFECT:\n+    case D_GIF_ERR_IMAGE_DEFECT:\n@@ -113,1 +111,1 @@\n-      case D_GIF_ERR_EOF_TOO_SOON:\n+    case D_GIF_ERR_EOF_TOO_SOON:\n@@ -116,1 +114,1 @@\n-      default:\n+    default:\n","filename":"src\/java.desktop\/share\/native\/libsplashscreen\/giflib\/gif_err.c","additions":25,"deletions":27,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-\/** Begin JDK modifications to support building on Windows **\/\n@@ -39,2 +38,1 @@\n-#endif\n-\/** End JDK modifications to support building on Windows **\/\n+#endif \/* _WIN32 *\/\n@@ -43,5 +41,5 @@\n-#define HT_SIZE         8192    \/* 12bits = 4096 or twice as big! *\/\n-#define HT_KEY_MASK     0x1FFF  \/* 13bits keys *\/\n-#define HT_KEY_NUM_BITS 13      \/* 13bits keys *\/\n-#define HT_MAX_KEY      8191    \/* 13bits - 1, maximal code possible *\/\n-#define HT_MAX_CODE     4095    \/* Biggest code possible in 12 bits. *\/\n+#define HT_SIZE 8192       \/* 12bits = 4096 or twice as big! *\/\n+#define HT_KEY_MASK 0x1FFF \/* 13bits keys *\/\n+#define HT_KEY_NUM_BITS 13 \/* 13bits keys *\/\n+#define HT_MAX_KEY 8191    \/* 13bits - 1, maximal code possible *\/\n+#define HT_MAX_CODE 4095   \/* Biggest code possible in 12 bits. *\/\n@@ -51,1 +49,1 @@\n-\/* 2. The key is 12 bits Prefix code + 8 bit new char or 20 bits.           *\/\n+\/* 2. The key is 12 bits Prefix code + 8 bit new char or 20 bits.        *\/\n@@ -53,4 +51,4 @@\n-#define HT_GET_KEY(l)    (l >> 12)\n-#define HT_GET_CODE(l)   (l & 0x0FFF)\n-#define HT_PUT_KEY(l)    (l << 12)\n-#define HT_PUT_CODE(l)   (l & 0x0FFF)\n+#define HT_GET_KEY(l) (l >> 12)\n+#define HT_GET_CODE(l) (l & 0x0FFF)\n+#define HT_PUT_KEY(l) (l << 12)\n+#define HT_PUT_CODE(l) (l & 0x0FFF)\n","filename":"src\/java.desktop\/share\/native\/libsplashscreen\/giflib\/gif_hash.h","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-#define GIFLIB_RELEASE 1\n+#define GIFLIB_RELEASE 2\n@@ -44,2 +44,2 @@\n-#define GIF_ERROR   0\n-#define GIF_OK      1\n+#define GIF_ERROR 0\n+#define GIF_OK 1\n@@ -47,0 +47,1 @@\n+#include <stdbool.h>\n@@ -48,11 +49,2 @@\n-\/** Begin JDK modifications to support building using old compilers**\/\n-\/\/#include <stdbool.h>\n-#ifdef bool\n-#undef bool\n-#endif\n-typedef int bool;\n-#define false 0\n-#define true 1\n-\/** End JDK modifications to support building using old compilers**\/\n-\n-#define GIF_STAMP \"GIFVER\"          \/* First chars in file - GIF stamp.  *\/\n+\n+#define GIF_STAMP \"GIFVER\" \/* First chars in file - GIF stamp.  *\/\n@@ -60,3 +52,3 @@\n-#define GIF_VERSION_POS 3           \/* Version first character in stamp. *\/\n-#define GIF87_STAMP \"GIF87a\"        \/* First chars in file - GIF stamp.  *\/\n-#define GIF89_STAMP \"GIF89a\"        \/* First chars in file - GIF stamp.  *\/\n+#define GIF_VERSION_POS 3    \/* Version first character in stamp. *\/\n+#define GIF87_STAMP \"GIF87a\" \/* First chars in file - GIF stamp.  *\/\n+#define GIF89_STAMP \"GIF89a\" \/* First chars in file - GIF stamp.  *\/\n@@ -78,1 +70,1 @@\n-    GifColorType *Colors;    \/* on malloc(3) heap *\/\n+    GifColorType *Colors; \/* on malloc(3) heap *\/\n@@ -82,3 +74,3 @@\n-    GifWord Left, Top, Width, Height;   \/* Current image dimensions. *\/\n-    bool Interlace;                     \/* Sequential\/Interlaced lines. *\/\n-    ColorMapObject *ColorMap;           \/* The local color map *\/\n+    GifWord Left, Top, Width, Height; \/* Current image dimensions. *\/\n+    bool Interlace;                   \/* Sequential\/Interlaced lines. *\/\n+    ColorMapObject *ColorMap;         \/* The local color map *\/\n@@ -89,7 +81,7 @@\n-    GifByteType *Bytes; \/* on malloc(3) heap *\/\n-    int Function;       \/* The block function code *\/\n-#define CONTINUE_EXT_FUNC_CODE    0x00    \/* continuation subblock *\/\n-#define COMMENT_EXT_FUNC_CODE     0xfe    \/* comment *\/\n-#define GRAPHICS_EXT_FUNC_CODE    0xf9    \/* graphics control (GIF89) *\/\n-#define PLAINTEXT_EXT_FUNC_CODE   0x01    \/* plaintext *\/\n-#define APPLICATION_EXT_FUNC_CODE 0xff    \/* application block (GIF89) *\/\n+    GifByteType *Bytes;            \/* on malloc(3) heap *\/\n+    int Function;                  \/* The block function code *\/\n+#define CONTINUE_EXT_FUNC_CODE 0x00    \/* continuation subblock *\/\n+#define COMMENT_EXT_FUNC_CODE 0xfe     \/* comment *\/\n+#define GRAPHICS_EXT_FUNC_CODE 0xf9    \/* graphics control (GIF89) *\/\n+#define PLAINTEXT_EXT_FUNC_CODE 0x01   \/* plaintext *\/\n+#define APPLICATION_EXT_FUNC_CODE 0xff \/* application block (GIF89) *\/\n@@ -106,9 +98,9 @@\n-    GifWord SWidth, SHeight;         \/* Size of virtual canvas *\/\n-    GifWord SColorResolution;        \/* How many colors can we generate? *\/\n-    GifWord SBackGroundColor;        \/* Background color for virtual canvas *\/\n-    GifByteType AspectByte;          \/* Used to compute pixel aspect ratio *\/\n-    ColorMapObject *SColorMap;       \/* Global colormap, NULL if nonexistent. *\/\n-    int ImageCount;                  \/* Number of current image (both APIs) *\/\n-    GifImageDesc Image;              \/* Current image (low-level API) *\/\n-    SavedImage *SavedImages;         \/* Image sequence (high-level API) *\/\n-    int ExtensionBlockCount;         \/* Count extensions past last image *\/\n+    GifWord SWidth, SHeight;   \/* Size of virtual canvas *\/\n+    GifWord SColorResolution;  \/* How many colors can we generate? *\/\n+    GifWord SBackGroundColor;  \/* Background color for virtual canvas *\/\n+    GifByteType AspectByte;    \/* Used to compute pixel aspect ratio *\/\n+    ColorMapObject *SColorMap; \/* Global colormap, NULL if nonexistent. *\/\n+    int ImageCount;            \/* Number of current image (both APIs) *\/\n+    GifImageDesc Image;        \/* Current image (low-level API) *\/\n+    SavedImage *SavedImages;   \/* Image sequence (high-level API) *\/\n+    int ExtensionBlockCount;   \/* Count extensions past last image *\/\n@@ -121,1 +113,1 @@\n-#define GIF_ASPECT_RATIO(n)    ((n)+15.0\/64.0)\n+#define GIF_ASPECT_RATIO(n) ((n) + 15.0 \/ 64.0)\n@@ -132,1 +124,1 @@\n-typedef int (*InputFunc) (GifFileType *, GifByteType *, int);\n+typedef int (*InputFunc)(GifFileType *, GifByteType *, int);\n@@ -137,1 +129,1 @@\n-typedef int (*OutputFunc) (GifFileType *, const GifByteType *, int);\n+typedef int (*OutputFunc)(GifFileType *, const GifByteType *, int);\n@@ -145,8 +137,8 @@\n-#define DISPOSAL_UNSPECIFIED      0       \/* No disposal specified. *\/\n-#define DISPOSE_DO_NOT            1       \/* Leave image in place *\/\n-#define DISPOSE_BACKGROUND        2       \/* Set area too background color *\/\n-#define DISPOSE_PREVIOUS          3       \/* Restore to previous content *\/\n-    bool UserInputFlag;      \/* User confirmation required before disposal *\/\n-    int DelayTime;           \/* pre-display delay in 0.01sec units *\/\n-    int TransparentColor;    \/* Palette index for transparency, -1 if none *\/\n-#define NO_TRANSPARENT_COLOR    -1\n+#define DISPOSAL_UNSPECIFIED 0 \/* No disposal specified. *\/\n+#define DISPOSE_DO_NOT 1       \/* Leave image in place *\/\n+#define DISPOSE_BACKGROUND 2   \/* Set area too background color *\/\n+#define DISPOSE_PREVIOUS 3     \/* Restore to previous content *\/\n+    bool UserInputFlag;    \/* User confirmation required before disposal *\/\n+    int DelayTime;         \/* pre-display delay in 0.01sec units *\/\n+    int TransparentColor;  \/* Palette index for transparency, -1 if none *\/\n+#define NO_TRANSPARENT_COLOR -1\n@@ -164,1 +156,1 @@\n-int EGifSpew(GifFileType * GifFile);\n+int EGifSpew(GifFileType *GifFile);\n@@ -168,7 +160,7 @@\n-#define E_GIF_SUCCEEDED          0\n-#define E_GIF_ERR_OPEN_FAILED    1    \/* And EGif possible errors. *\/\n-#define E_GIF_ERR_WRITE_FAILED   2\n-#define E_GIF_ERR_HAS_SCRN_DSCR  3\n-#define E_GIF_ERR_HAS_IMAG_DSCR  4\n-#define E_GIF_ERR_NO_COLOR_MAP   5\n-#define E_GIF_ERR_DATA_TOO_BIG   6\n+#define E_GIF_SUCCEEDED 0\n+#define E_GIF_ERR_OPEN_FAILED 1 \/* And EGif possible errors. *\/\n+#define E_GIF_ERR_WRITE_FAILED 2\n+#define E_GIF_ERR_HAS_SCRN_DSCR 3\n+#define E_GIF_ERR_HAS_IMAG_DSCR 4\n+#define E_GIF_ERR_NO_COLOR_MAP 5\n+#define E_GIF_ERR_DATA_TOO_BIG 6\n@@ -176,3 +168,3 @@\n-#define E_GIF_ERR_DISK_IS_FULL   8\n-#define E_GIF_ERR_CLOSE_FAILED   9\n-#define E_GIF_ERR_NOT_WRITEABLE  10\n+#define E_GIF_ERR_DISK_IS_FULL 8\n+#define E_GIF_ERR_CLOSE_FAILED 9\n+#define E_GIF_ERR_NOT_WRITEABLE 10\n@@ -181,3 +173,2 @@\n-int EGifPutScreenDesc(GifFileType *GifFile,\n-                      const int GifWidth, const int GifHeight,\n-                      const int GifColorRes,\n+int EGifPutScreenDesc(GifFileType *GifFile, const int GifWidth,\n+                      const int GifHeight, const int GifColorRes,\n@@ -186,2 +177,1 @@\n-int EGifPutImageDesc(GifFileType *GifFile,\n-                     const int GifLeft, const int GifTop,\n+int EGifPutImageDesc(GifFileType *GifFile, const int GifLeft, const int GifTop,\n@@ -192,2 +182,1 @@\n-int EGifPutLine(GifFileType *GifFile, GifPixelType *GifLine,\n-                int GifLineLen);\n+int EGifPutLine(GifFileType *GifFile, GifPixelType *GifLine, int GifLineLen);\n@@ -197,2 +186,2 @@\n-int EGifPutExtensionBlock(GifFileType *GifFile,\n-                         const int GifExtLen, const void *GifExtension);\n+int EGifPutExtensionBlock(GifFileType *GifFile, const int GifExtLen,\n+                          const void *GifExtension);\n@@ -201,2 +190,1 @@\n-                     const int GifExtLen,\n-                     const void *GifExtension);\n+                     const int GifExtLen, const void *GifExtension);\n@@ -205,2 +193,1 @@\n-int EGifPutCodeNext(GifFileType *GifFile,\n-                    const GifByteType *GifCodeBlock);\n+int EGifPutCodeNext(GifFileType *GifFile, const GifByteType *GifCodeBlock);\n@@ -215,13 +202,14 @@\n-int DGifSlurp(GifFileType * GifFile);\n-GifFileType *DGifOpen(void *userPtr, InputFunc readFunc, int *Error);    \/* new one (TVT) *\/\n-    int DGifCloseFile(GifFileType * GifFile, int *ErrorCode);\n-\n-#define D_GIF_SUCCEEDED          0\n-#define D_GIF_ERR_OPEN_FAILED    101    \/* And DGif possible errors. *\/\n-#define D_GIF_ERR_READ_FAILED    102\n-#define D_GIF_ERR_NOT_GIF_FILE   103\n-#define D_GIF_ERR_NO_SCRN_DSCR   104\n-#define D_GIF_ERR_NO_IMAG_DSCR   105\n-#define D_GIF_ERR_NO_COLOR_MAP   106\n-#define D_GIF_ERR_WRONG_RECORD   107\n-#define D_GIF_ERR_DATA_TOO_BIG   108\n+int DGifSlurp(GifFileType *GifFile);\n+GifFileType *DGifOpen(void *userPtr, InputFunc readFunc,\n+                      int *Error); \/* new one (TVT) *\/\n+int DGifCloseFile(GifFileType *GifFile, int *ErrorCode);\n+\n+#define D_GIF_SUCCEEDED 0\n+#define D_GIF_ERR_OPEN_FAILED 101 \/* And DGif possible errors. *\/\n+#define D_GIF_ERR_READ_FAILED 102\n+#define D_GIF_ERR_NOT_GIF_FILE 103\n+#define D_GIF_ERR_NO_SCRN_DSCR 104\n+#define D_GIF_ERR_NO_IMAG_DSCR 105\n+#define D_GIF_ERR_NO_COLOR_MAP 106\n+#define D_GIF_ERR_WRONG_RECORD 107\n+#define D_GIF_ERR_DATA_TOO_BIG 108\n@@ -229,4 +217,4 @@\n-#define D_GIF_ERR_CLOSE_FAILED   110\n-#define D_GIF_ERR_NOT_READABLE   111\n-#define D_GIF_ERR_IMAGE_DEFECT   112\n-#define D_GIF_ERR_EOF_TOO_SOON   113\n+#define D_GIF_ERR_CLOSE_FAILED 110\n+#define D_GIF_ERR_NOT_READABLE 111\n+#define D_GIF_ERR_IMAGE_DEFECT 112\n+#define D_GIF_ERR_EOF_TOO_SOON 113\n@@ -250,1 +238,0 @@\n-\n@@ -254,1 +241,1 @@\n-extern const char *GifErrorString(int ErrorCode);     \/* new in 2012 - ESR *\/\n+extern const char *GifErrorString(int ErrorCode); \/* new in 2012 - ESR *\/\n@@ -266,1 +253,1 @@\n-                                     const GifColorType *ColorMap);\n+                                        const GifColorType *ColorMap);\n@@ -269,2 +256,2 @@\n-                                     const ColorMapObject *ColorIn2,\n-                                     GifPixelType ColorTransIn2[]);\n+                                        const ColorMapObject *ColorIn2,\n+                                        GifPixelType ColorTransIn2[]);\n@@ -277,1 +264,2 @@\n-extern void GifApplyTranslation(SavedImage *Image, GifPixelType Translation[]);\n+extern void GifApplyTranslation(SavedImage *Image,\n+                                const GifPixelType Translation[]);\n@@ -279,2 +267,1 @@\n-                                ExtensionBlock **ExtensionBlocks,\n-                                int Function,\n+                                ExtensionBlock **ExtensionBlocks, int Function,\n@@ -285,1 +272,1 @@\n-                                  const SavedImage *CopyFrom);\n+                                     const SavedImage *CopyFrom);\n@@ -298,2 +285,1 @@\n-int DGifSavedExtensionToGCB(GifFileType *GifFile,\n-                            int ImageIndex,\n+int DGifSavedExtensionToGCB(GifFileType *GifFile, int ImageIndex,\n@@ -302,2 +288,1 @@\n-                            GifFileType *GifFile,\n-                            int ImageIndex);\n+                            GifFileType *GifFile, int ImageIndex);\n@@ -309,1 +294,1 @@\n-#define GIF_FONT_WIDTH  8\n+#define GIF_FONT_WIDTH 8\n@@ -313,3 +298,2 @@\n-extern void GifDrawText8x8(SavedImage *Image,\n-                     const int x, const int y,\n-                     const char *legend, const int color);\n+extern void GifDrawText8x8(SavedImage *Image, const int x, const int y,\n+                           const char *legend, const int color);\n@@ -317,3 +301,2 @@\n-extern void GifDrawBox(SavedImage *Image,\n-                    const int x, const int y,\n-                    const int w, const int d, const int color);\n+extern void GifDrawBox(SavedImage *Image, const int x, const int y, const int w,\n+                       const int d, const int color);\n@@ -321,3 +304,2 @@\n-extern void GifDrawRectangle(SavedImage *Image,\n-                   const int x, const int y,\n-                   const int w, const int d, const int color);\n+extern void GifDrawRectangle(SavedImage *Image, const int x, const int y,\n+                             const int w, const int d, const int color);\n@@ -325,4 +307,3 @@\n-extern void GifDrawBoxedText8x8(SavedImage *Image,\n-                          const int x, const int y,\n-                          const char *legend,\n-                          const int border, const int bg, const int fg);\n+extern void GifDrawBoxedText8x8(SavedImage *Image, const int x, const int y,\n+                                const char *legend, const int border,\n+                                const int bg, const int fg);\n","filename":"src\/java.desktop\/share\/native\/libsplashscreen\/giflib\/gif_lib.h","additions":97,"deletions":116,"binary":false,"changes":213,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-#include \"gif_lib.h\"\n@@ -38,0 +37,1 @@\n+#include \"gif_lib.h\"\n@@ -40,1 +40,1 @@\n-    #define SIZE_MAX     UINTPTR_MAX\n+#define SIZE_MAX UINTPTR_MAX\n@@ -43,3 +43,3 @@\n-#define EXTENSION_INTRODUCER      0x21\n-#define DESCRIPTOR_INTRODUCER     0x2c\n-#define TERMINATOR_INTRODUCER     0x3b\n+#define EXTENSION_INTRODUCER 0x21\n+#define DESCRIPTOR_INTRODUCER 0x2c\n+#define TERMINATOR_INTRODUCER 0x3b\n@@ -47,2 +47,2 @@\n-#define LZ_MAX_CODE         4095    \/* Biggest code possible in 12 bits. *\/\n-#define LZ_BITS             12\n+#define LZ_MAX_CODE 4095 \/* Biggest code possible in 12 bits. *\/\n+#define LZ_BITS 12\n@@ -50,3 +50,3 @@\n-#define FLUSH_OUTPUT        4096    \/* Impossible code, to signal flush. *\/\n-#define FIRST_CODE          4097    \/* Impossible code, to signal first. *\/\n-#define NO_SUCH_CODE        4098    \/* Impossible code, to signal empty. *\/\n+#define FLUSH_OUTPUT 4096 \/* Impossible code, to signal flush. *\/\n+#define FIRST_CODE 4097   \/* Impossible code, to signal first. *\/\n+#define NO_SUCH_CODE 4098 \/* Impossible code, to signal empty. *\/\n@@ -54,4 +54,4 @@\n-#define FILE_STATE_WRITE    0x01\n-#define FILE_STATE_SCREEN   0x02\n-#define FILE_STATE_IMAGE    0x04\n-#define FILE_STATE_READ     0x08\n+#define FILE_STATE_WRITE 0x01\n+#define FILE_STATE_SCREEN 0x02\n+#define FILE_STATE_IMAGE 0x04\n+#define FILE_STATE_READ 0x08\n@@ -59,2 +59,2 @@\n-#define IS_READABLE(Private)    (Private->FileState & FILE_STATE_READ)\n-#define IS_WRITEABLE(Private)   (Private->FileState & FILE_STATE_WRITE)\n+#define IS_READABLE(Private) (Private->FileState & FILE_STATE_READ)\n+#define IS_WRITEABLE(Private) (Private->FileState & FILE_STATE_WRITE)\n@@ -63,17 +63,19 @@\n-    GifWord FileState, FileHandle,  \/* Where all this data goes to! *\/\n-      BitsPerPixel,     \/* Bits per pixel (Codes uses at least this + 1). *\/\n-      ClearCode,   \/* The CLEAR LZ code. *\/\n-      EOFCode,     \/* The EOF LZ code. *\/\n-      RunningCode, \/* The next code algorithm can generate. *\/\n-      RunningBits, \/* The number of bits required to represent RunningCode. *\/\n-      MaxCode1,    \/* 1 bigger than max. possible code, in RunningBits bits. *\/\n-      LastCode,    \/* The code before the current code. *\/\n-      CrntCode,    \/* Current algorithm code. *\/\n-      StackPtr,    \/* For character stack (see below). *\/\n-      CrntShiftState;    \/* Number of bits in CrntShiftDWord. *\/\n-    unsigned long CrntShiftDWord;   \/* For bytes decomposition into codes. *\/\n-    unsigned long PixelCount;   \/* Number of pixels in image. *\/\n-    FILE *File;    \/* File as stream. *\/\n-    InputFunc Read;     \/* function to read gif input (TVT) *\/\n-    OutputFunc Write;   \/* function to write gif output (MRB) *\/\n-    GifByteType Buf[256];   \/* Compressed input is buffered here. *\/\n+    GifWord FileState, FileHandle, \/* Where all this data goes to! *\/\n+        BitsPerPixel, \/* Bits per pixel (Codes uses at least this + 1). *\/\n+        ClearCode,    \/* The CLEAR LZ code. *\/\n+        EOFCode,      \/* The EOF LZ code. *\/\n+        RunningCode,  \/* The next code algorithm can generate. *\/\n+        RunningBits,  \/* The number of bits required to represent\n+                         RunningCode. *\/\n+        MaxCode1, \/* 1 bigger than max. possible code, in RunningBits bits.\n+                   *\/\n+        LastCode, \/* The code before the current code. *\/\n+        CrntCode, \/* Current algorithm code. *\/\n+        StackPtr, \/* For character stack (see below). *\/\n+        CrntShiftState;           \/* Number of bits in CrntShiftDWord. *\/\n+    unsigned long CrntShiftDWord; \/* For bytes decomposition into codes. *\/\n+    unsigned long PixelCount;     \/* Number of pixels in image. *\/\n+    FILE *File;                   \/* File as stream. *\/\n+    InputFunc Read;               \/* function to read gif input (TVT) *\/\n+    OutputFunc Write;             \/* function to write gif output (MRB) *\/\n+    GifByteType Buf[256];         \/* Compressed input is buffered here. *\/\n@@ -81,1 +83,1 @@\n-    GifByteType Suffix[LZ_MAX_CODE + 1];    \/* So we can trace the codes. *\/\n+    GifByteType Suffix[LZ_MAX_CODE + 1]; \/* So we can trace the codes. *\/\n","filename":"src\/java.desktop\/share\/native\/libsplashscreen\/giflib\/gif_lib_private.h","additions":36,"deletions":34,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include <stdlib.h>\n@@ -35,0 +34,1 @@\n+#include <stdlib.h>\n@@ -40,1 +40,1 @@\n-#define MAX(x, y)    (((x) > (y)) ? (x) : (y))\n+#define MAX(x, y) (((x) > (y)) ? (x) : (y))\n@@ -47,3 +47,1 @@\n-int\n-GifBitSize(int n)\n-{\n+int GifBitSize(int n) {\n@@ -52,2 +50,2 @@\n-    for (i = 1; i <= 8; i++)\n-        if ((1 << i) >= n)\n+    for (i = 1; i <= 8; i++) {\n+        if ((1 << i) >= n) {\n@@ -55,0 +53,2 @@\n+        }\n+    }\n@@ -59,1 +59,1 @@\n-  Color map object functions\n+ Color map object functions\n@@ -66,3 +66,1 @@\n-ColorMapObject *\n-GifMakeMapObject(int ColorCount, const GifColorType *ColorMap)\n-{\n+ColorMapObject *GifMakeMapObject(int ColorCount, const GifColorType *ColorMap) {\n@@ -72,1 +70,2 @@\n-     * make the user know that or should we automatically round up instead? *\/\n+     * make the user know that or should we automatically round up instead?\n+     *\/\n@@ -74,1 +73,1 @@\n-        return ((ColorMapObject *) NULL);\n+        return ((ColorMapObject *)NULL);\n@@ -78,2 +77,2 @@\n-    if (Object == (ColorMapObject *) NULL) {\n-        return ((ColorMapObject *) NULL);\n+    if (Object == (ColorMapObject *)NULL) {\n+        return ((ColorMapObject *)NULL);\n@@ -82,2 +81,3 @@\n-    Object->Colors = (GifColorType *)calloc(ColorCount, sizeof(GifColorType));\n-    if (Object->Colors == (GifColorType *) NULL) {\n+    Object->Colors =\n+        (GifColorType *)calloc(ColorCount, sizeof(GifColorType));\n+    if (Object->Colors == (GifColorType *)NULL) {\n@@ -85,1 +85,1 @@\n-        return ((ColorMapObject *) NULL);\n+        return ((ColorMapObject *)NULL);\n@@ -93,2 +93,2 @@\n-        memcpy((char *)Object->Colors,\n-               (char *)ColorMap, ColorCount * sizeof(GifColorType));\n+        memcpy((char *)Object->Colors, (char *)ColorMap,\n+               ColorCount * sizeof(GifColorType));\n@@ -101,1 +101,1 @@\n-Free a color map object\n+ Free a color map object\n@@ -103,3 +103,1 @@\n-void\n-GifFreeMapObject(ColorMapObject *Object)\n-{\n+void GifFreeMapObject(ColorMapObject *Object) {\n@@ -113,4 +111,1 @@\n-void\n-DumpColorMap(ColorMapObject *Object,\n-             FILE * fp)\n-{\n+void DumpColorMap(ColorMapObject *Object, FILE *fp) {\n@@ -122,2 +117,2 @@\n-                (void)fprintf(fp, \"%3d: %02x %02x %02x   \", i + j,\n-                              Object->Colors[i + j].Red,\n+                (void)fprintf(fp, \"%3d: %02x %02x %02x   \",\n+                              i + j, Object->Colors[i + j].Red,\n@@ -140,5 +135,3 @@\n-ColorMapObject *\n-GifUnionColorMap(const ColorMapObject *ColorIn1,\n-              const ColorMapObject *ColorIn2,\n-              GifPixelType ColorTransIn2[])\n-{\n+ColorMapObject *GifUnionColorMap(const ColorMapObject *ColorIn1,\n+                                 const ColorMapObject *ColorIn2,\n+                                 GifPixelType ColorTransIn2[]) {\n@@ -155,2 +148,2 @@\n-    ColorUnion = GifMakeMapObject(MAX(ColorIn1->ColorCount,\n-                               ColorIn2->ColorCount) * 2, NULL);\n+    ColorUnion = GifMakeMapObject(\n+        MAX(ColorIn1->ColorCount, ColorIn2->ColorCount) * 2, NULL);\n@@ -158,1 +151,1 @@\n-    if (ColorUnion == NULL)\n+    if (ColorUnion == NULL) {\n@@ -160,0 +153,1 @@\n+    }\n@@ -164,1 +158,1 @@\n-    for (i = 0; i < ColorIn1->ColorCount; i++)\n+    for (i = 0; i < ColorIn1->ColorCount; i++) {\n@@ -166,0 +160,1 @@\n+    }\n@@ -175,3 +170,3 @@\n-    while (ColorIn1->Colors[CrntSlot - 1].Red == 0\n-           && ColorIn1->Colors[CrntSlot - 1].Green == 0\n-           && ColorIn1->Colors[CrntSlot - 1].Blue == 0)\n+    while (ColorIn1->Colors[CrntSlot - 1].Red == 0 &&\n+           ColorIn1->Colors[CrntSlot - 1].Green == 0 &&\n+           ColorIn1->Colors[CrntSlot - 1].Blue == 0) {\n@@ -179,0 +174,1 @@\n+    }\n@@ -183,3 +179,3 @@\n-        for (j = 0; j < ColorIn1->ColorCount; j++)\n-            if (memcmp (&ColorIn1->Colors[j], &ColorIn2->Colors[i],\n-                        sizeof(GifColorType)) == 0)\n+        for (j = 0; j < ColorIn1->ColorCount; j++) {\n+            if (memcmp(&ColorIn1->Colors[j], &ColorIn2->Colors[i],\n+                       sizeof(GifColorType)) == 0) {\n@@ -187,0 +183,2 @@\n+            }\n+        }\n@@ -188,3 +186,3 @@\n-        if (j < ColorIn1->ColorCount)\n-            ColorTransIn2[i] = j;    \/* color exists in Color1 *\/\n-        else {\n+        if (j < ColorIn1->ColorCount) {\n+            ColorTransIn2[i] = j; \/* color exists in Color1 *\/\n+        } else {\n@@ -199,1 +197,1 @@\n-        return ((ColorMapObject *) NULL);\n+        return ((ColorMapObject *)NULL);\n@@ -213,1 +211,1 @@\n-        for (j = CrntSlot; j < RoundUpTo; j++)\n+        for (j = CrntSlot; j < RoundUpTo; j++) {\n@@ -215,0 +213,1 @@\n+        }\n@@ -218,3 +217,3 @@\n-            GifColorType *new_map = (GifColorType *)reallocarray(Map,\n-                                 RoundUpTo, sizeof(GifColorType));\n-            if( new_map == NULL ) {\n+            GifColorType *new_map = (GifColorType *)reallocarray(\n+                Map, RoundUpTo, sizeof(GifColorType));\n+            if (new_map == NULL) {\n@@ -222,1 +221,1 @@\n-                return ((ColorMapObject *) NULL);\n+                return ((ColorMapObject *)NULL);\n@@ -237,3 +236,1 @@\n-void\n-GifApplyTranslation(SavedImage *Image, GifPixelType Translation[])\n-{\n+void GifApplyTranslation(SavedImage *Image, const GifPixelType Translation[]) {\n@@ -241,1 +238,2 @@\n-    register int RasterSize = Image->ImageDesc.Height * Image->ImageDesc.Width;\n+    register int RasterSize =\n+        Image->ImageDesc.Height * Image->ImageDesc.Width;\n@@ -243,1 +241,1 @@\n-    for (i = 0; i < RasterSize; i++)\n+    for (i = 0; i < RasterSize; i++) {\n@@ -245,0 +243,1 @@\n+    }\n@@ -250,7 +249,3 @@\n-int\n-GifAddExtensionBlock(int *ExtensionBlockCount,\n-                     ExtensionBlock **ExtensionBlocks,\n-                     int Function,\n-                     unsigned int Len,\n-                     unsigned char ExtData[])\n-{\n+int GifAddExtensionBlock(int *ExtensionBlockCount,\n+                         ExtensionBlock **ExtensionBlocks, int Function,\n+                         unsigned int Len, unsigned char ExtData[]) {\n@@ -259,7 +254,8 @@\n-    if (*ExtensionBlocks == NULL)\n-        *ExtensionBlocks=(ExtensionBlock *)malloc(sizeof(ExtensionBlock));\n-    else {\n-        ExtensionBlock* ep_new = (ExtensionBlock *)reallocarray\n-                                      (*ExtensionBlocks, (*ExtensionBlockCount + 1),\n-                                      sizeof(ExtensionBlock));\n-        if( ep_new == NULL )\n+    if (*ExtensionBlocks == NULL) {\n+        *ExtensionBlocks =\n+            (ExtensionBlock *)malloc(sizeof(ExtensionBlock));\n+    } else {\n+        ExtensionBlock *ep_new = (ExtensionBlock *)reallocarray(\n+            *ExtensionBlocks, (*ExtensionBlockCount + 1),\n+            sizeof(ExtensionBlock));\n+        if (ep_new == NULL) {\n@@ -267,0 +263,1 @@\n+        }\n@@ -270,1 +267,1 @@\n-    if (*ExtensionBlocks == NULL)\n+    if (*ExtensionBlocks == NULL) {\n@@ -272,0 +269,1 @@\n+    }\n@@ -276,1 +274,1 @@\n-    ep->ByteCount=Len;\n+    ep->ByteCount = Len;\n@@ -278,1 +276,1 @@\n-    if (ep->Bytes == NULL)\n+    if (ep->Bytes == NULL) {\n@@ -280,0 +278,1 @@\n+    }\n@@ -288,4 +287,2 @@\n-void\n-GifFreeExtensions(int *ExtensionBlockCount,\n-                  ExtensionBlock **ExtensionBlocks)\n-{\n+void GifFreeExtensions(int *ExtensionBlockCount,\n+                       ExtensionBlock **ExtensionBlocks) {\n@@ -294,1 +291,1 @@\n-    if (*ExtensionBlocks == NULL)\n+    if (*ExtensionBlocks == NULL) {\n@@ -296,0 +293,1 @@\n+    }\n@@ -298,2 +296,1 @@\n-         ep < (*ExtensionBlocks + *ExtensionBlockCount);\n-         ep++)\n+         ep < (*ExtensionBlocks + *ExtensionBlockCount); ep++) {\n@@ -301,0 +298,1 @@\n+    }\n@@ -307,1 +305,1 @@\n- Image block allocation functions\n+   Image block allocation functions\n@@ -313,3 +311,1 @@\n-void\n-FreeLastSavedImage(GifFileType *GifFile)\n-{\n+void FreeLastSavedImage(GifFileType *GifFile) {\n@@ -318,1 +314,1 @@\n-    if ((GifFile == NULL) || (GifFile->SavedImages == NULL))\n+    if ((GifFile == NULL) || (GifFile->SavedImages == NULL)) {\n@@ -320,0 +316,1 @@\n+    }\n@@ -332,1 +329,1 @@\n-    if (sp->RasterBits != NULL)\n+    if (sp->RasterBits != NULL) {\n@@ -334,0 +331,1 @@\n+    }\n@@ -340,3 +338,4 @@\n-     * time.  If this is used in GifFreeSavedImages then it would be inefficient\n-     * (The whole array is going to be deallocated.)  If we just use it when\n-     * we want to free the last Image it's convenient to do it here.\n+     * time.  If this is used in GifFreeSavedImages then it would be\n+     * inefficient (The whole array is going to be deallocated.)  If we just\n+     * use it when we want to free the last Image it's convenient to do it\n+     * here.\n@@ -349,4 +348,4 @@\n-SavedImage *\n-GifMakeSavedImage(GifFileType *GifFile, const SavedImage *CopyFrom)\n-{\n-    if (GifFile->SavedImages == NULL)\n+SavedImage *GifMakeSavedImage(GifFileType *GifFile,\n+                              const SavedImage *CopyFrom) {\n+    \/\/ cppcheck-suppress ctunullpointer\n+    if (GifFile->SavedImages == NULL) {\n@@ -354,4 +353,5 @@\n-    else {\n-        SavedImage* newSavedImages = (SavedImage *)reallocarray(GifFile->SavedImages,\n-                               (GifFile->ImageCount + 1), sizeof(SavedImage));\n-        if( newSavedImages == NULL)\n+    } else {\n+        SavedImage *newSavedImages = (SavedImage *)reallocarray(\n+            GifFile->SavedImages, (GifFile->ImageCount + 1),\n+            sizeof(SavedImage));\n+        if (newSavedImages == NULL) {\n@@ -359,0 +359,1 @@\n+        }\n@@ -361,1 +362,1 @@\n-    if (GifFile->SavedImages == NULL)\n+    if (GifFile->SavedImages == NULL) {\n@@ -363,1 +364,1 @@\n-    else {\n+    } else {\n@@ -370,3 +371,3 @@\n-             * Make our own allocated copies of the heap fields in the\n-             * copied record.  This guards against potential aliasing\n-             * problems.\n+             * Make our own allocated copies of the heap fields in\n+             * the copied record.  This guards against potential\n+             * aliasing problems.\n@@ -378,2 +379,2 @@\n-                                         CopyFrom->ImageDesc.ColorMap->ColorCount,\n-                                         CopyFrom->ImageDesc.ColorMap->Colors);\n+                    CopyFrom->ImageDesc.ColorMap->ColorCount,\n+                    CopyFrom->ImageDesc.ColorMap->Colors);\n@@ -387,4 +388,5 @@\n-            sp->RasterBits = (unsigned char *)reallocarray(NULL,\n-                                                  (CopyFrom->ImageDesc.Height *\n-                                                  CopyFrom->ImageDesc.Width),\n-                                                  sizeof(GifPixelType));\n+            sp->RasterBits = (unsigned char *)reallocarray(\n+                NULL,\n+                (CopyFrom->ImageDesc.Height *\n+                 CopyFrom->ImageDesc.Width),\n+                sizeof(GifPixelType));\n@@ -396,2 +398,3 @@\n-                   sizeof(GifPixelType) * CopyFrom->ImageDesc.Height *\n-                   CopyFrom->ImageDesc.Width);\n+                   sizeof(GifPixelType) *\n+                       CopyFrom->ImageDesc.Height *\n+                       CopyFrom->ImageDesc.Width);\n@@ -401,3 +404,4 @@\n-                sp->ExtensionBlocks = (ExtensionBlock *)reallocarray(NULL,\n-                                      CopyFrom->ExtensionBlockCount,\n-                                      sizeof(ExtensionBlock));\n+                sp->ExtensionBlocks =\n+                    (ExtensionBlock *)reallocarray(\n+                        NULL, CopyFrom->ExtensionBlockCount,\n+                        sizeof(ExtensionBlock));\n@@ -408,2 +412,4 @@\n-                memcpy(sp->ExtensionBlocks, CopyFrom->ExtensionBlocks,\n-                       sizeof(ExtensionBlock) * CopyFrom->ExtensionBlockCount);\n+                memcpy(sp->ExtensionBlocks,\n+                       CopyFrom->ExtensionBlocks,\n+                       sizeof(ExtensionBlock) *\n+                           CopyFrom->ExtensionBlockCount);\n@@ -411,2 +417,1 @@\n-        }\n-        else {\n+        } else {\n@@ -420,3 +425,1 @@\n-void\n-GifFreeSavedImages(GifFileType *GifFile)\n-{\n+void GifFreeSavedImages(GifFileType *GifFile) {\n@@ -435,1 +438,1 @@\n-        if (sp->RasterBits != NULL)\n+        if (sp->RasterBits != NULL) {\n@@ -437,0 +440,1 @@\n+        }\n@@ -438,1 +442,2 @@\n-        GifFreeExtensions(&sp->ExtensionBlockCount, &sp->ExtensionBlocks);\n+        GifFreeExtensions(&sp->ExtensionBlockCount,\n+                          &sp->ExtensionBlocks);\n","filename":"src\/java.desktop\/share\/native\/libsplashscreen\/giflib\/gifalloc.c","additions":130,"deletions":125,"binary":false,"changes":255,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include <sys\/types.h>\n@@ -35,0 +34,1 @@\n+#include <sys\/types.h>\n@@ -37,1 +37,1 @@\n-    #define SIZE_MAX     UINTPTR_MAX\n+#define SIZE_MAX UINTPTR_MAX\n@@ -44,1 +44,1 @@\n-#define MUL_NO_OVERFLOW    ((size_t)1 << (sizeof(size_t) * 4))\n+#define MUL_NO_OVERFLOW ((size_t)1 << (sizeof(size_t) * 4))\n@@ -46,3 +46,1 @@\n-void *\n-openbsd_reallocarray(void *optr, size_t nmemb, size_t size)\n-{\n+void *openbsd_reallocarray(void *optr, size_t nmemb, size_t size) {\n@@ -96,1 +94,1 @@\n-    if (size == 0 || nmemb == 0)\n+    if (size == 0 || nmemb == 0) {\n@@ -98,0 +96,1 @@\n+    }\n","filename":"src\/java.desktop\/share\/native\/libsplashscreen\/giflib\/openbsd-reallocarray.c","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"}]}