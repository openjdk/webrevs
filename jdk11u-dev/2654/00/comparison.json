{"files":[{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Point;\n+import java.awt.Robot;\n+\n+\/*\n+ * @test\n+ * @bug 4189198\n+ * @key headful\n+ * @summary updateClient should post a PaintEvent\n+ *\/\n+\n+public class RepaintTest {\n+    private static volatile Frame frame;\n+    private static volatile Label label;\n+    private static volatile Point frameLoc;\n+\n+    private static final int FRAME_DIM = 100;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new Frame(\"Repaint Tester\");\n+                frame.setSize(FRAME_DIM, FRAME_DIM);\n+                label = new Label(\"Hi\");\n+                frame.add(label);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                label.setBackground(Color.GREEN);\n+                label.repaint();\n+                frameLoc = frame.getLocationOnScreen();\n+            });\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            Color expectedColor = robot.getPixelColor(frameLoc.x + FRAME_DIM \/ 2,\n+                                                      frameLoc.y + FRAME_DIM \/ 2);\n+            if (!Color.GREEN.equals(expectedColor)) {\n+                throw new RuntimeException(\"Test Failed! \\n\" +\n+                        \"PaintEvent was not triggered: \");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                   frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Component\/RepaintTest.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,191 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseListener;\n+\n+\/*\n+ * @test\n+ * @bug 4992908\n+ * @key headful\n+ * @summary Need way to get location of MouseEvent in screen coordinates\n+ *\/\n+\n+\/\/ The test consists of several parts:\n+\/\/ 1. create MouseEvent with new Ctor and checking get(X|Y)OnScreen(),\n+\/\/ getLocationOnScreen(), get(X|Y), getPoint().\n+\/\/ 2. create MouseEvent with old Ctor and checking get(X|Y)OnScreen(),\n+\/\/ getLocationOnScreen(),  get(X|Y), getPoint() .\n+\n+public class MouseEventAbsoluteCoordsTest implements MouseListener {\n+    private static Frame frame;\n+    private static Robot robot;\n+\n+    private static Point mousePositionOnScreen = new Point(200, 200);\n+    private static final Point mousePosition = new Point(100, 100);\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.setAutoDelay(50);\n+\n+            MouseEventAbsoluteCoordsTest cordsTest =\n+                    new MouseEventAbsoluteCoordsTest();\n+            cordsTest.createTestUI();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void createTestUI() throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            frame = new Frame(\"MouseEvent Test Frame\");\n+            frame.setSize(200, 200);\n+            frame.setLocation(300, 400);\n+            frame.addMouseListener(this);\n+            frame.setVisible(true);\n+        });\n+\n+        robot.waitForIdle();\n+        robot.delay(1000);\n+\n+        \/\/ use new MouseEvent's Ctor with user-defined absolute\n+        \/\/ coordinates\n+        System.out.println(\"Stage MOUSE_PRESSED\");\n+        postMouseEventNewCtor(MouseEvent.MOUSE_PRESSED);\n+\n+        System.out.println(\"Stage MOUSE_RELEASED\");\n+        postMouseEventNewCtor(MouseEvent.MOUSE_RELEASED);\n+\n+        System.out.println(\"Stage MOUSE_CLICKED\");\n+        postMouseEventNewCtor(MouseEvent.MOUSE_CLICKED);\n+\n+        \/\/ call syncLocation to get correct on-screen frame position\n+        syncLocationToWindowManager();\n+\n+        \/\/ now we gonna use old MouseEvent's Ctor thus absolute\n+        \/\/ position calculates as frame's location + relative coords\n+        \/\/ of the event.\n+        EventQueue.invokeAndWait(() -> mousePositionOnScreen = new Point(\n+                frame.getLocationOnScreen().x + mousePosition.x,\n+                frame.getLocationOnScreen().y + mousePosition.y));\n+\n+        System.out.println(\"Stage MOUSE_PRESSED\");\n+        postMouseEventOldCtor(MouseEvent.MOUSE_PRESSED);\n+\n+        System.out.println(\"Stage MOUSE_RELEASED\");\n+        postMouseEventOldCtor(MouseEvent.MOUSE_RELEASED);\n+\n+        System.out.println(\"Stage MOUSE_CLICKED\");\n+        postMouseEventOldCtor(MouseEvent.MOUSE_CLICKED);\n+    }\n+\n+    private static void syncLocationToWindowManager() {\n+        Toolkit.getDefaultToolkit().sync();\n+        try {\n+            Thread.sleep(500);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    @Override\n+    public void mousePressed(MouseEvent e) {\n+        checkEventAbsolutePosition(e, \"MousePressed OK\");\n+    };\n+\n+    @Override\n+    public void mouseExited(MouseEvent e) {\n+        System.out.println(\"mouse exited\");\n+    };\n+\n+    @Override\n+    public void mouseReleased(MouseEvent e) {\n+        checkEventAbsolutePosition(e, \"MousePressed OK\");\n+    };\n+\n+    @Override\n+    public void mouseEntered(MouseEvent e) {\n+        System.out.println(\"mouse entered\");\n+    };\n+\n+    @Override\n+    public void mouseClicked(MouseEvent e) {\n+        checkEventAbsolutePosition(e, \"MousePressed OK\");\n+    };\n+\n+    public void postMouseEventNewCtor(int MouseEventType) {\n+        MouseEvent mouseEvt = new MouseEvent(frame,\n+                                       MouseEventType,\n+                                       System.currentTimeMillis(),\n+                                       MouseEvent.BUTTON1_DOWN_MASK,\n+                                       mousePosition.x, mousePosition.y,\n+                                       mousePositionOnScreen.x,\n+                                       mousePositionOnScreen.y,\n+                                       1,\n+                                       false,\n+                                       MouseEvent.NOBUTTON\n+                                       );\n+        frame.dispatchEvent(mouseEvt);\n+    }\n+\n+    public void postMouseEventOldCtor(int MouseEventType) {\n+        MouseEvent oldMouseEvt = new MouseEvent(frame,\n+                                          MouseEventType,\n+                                          System.currentTimeMillis(),\n+                                          MouseEvent.BUTTON1_DOWN_MASK,\n+                                          mousePosition.x, mousePosition.y,\n+                                          1,\n+                                          false,\n+                                          MouseEvent.NOBUTTON\n+                                          );\n+        frame.dispatchEvent(oldMouseEvt);\n+    }\n+\n+    public void checkEventAbsolutePosition(MouseEvent evt, String message) {\n+        if (evt.getXOnScreen() != mousePositionOnScreen.x ||\n+            evt.getYOnScreen() != mousePositionOnScreen.y ||\n+            !evt.getLocationOnScreen().equals( mousePositionOnScreen)) {\n+                System.out.println(\"evt.location = \"+evt.getLocationOnScreen());\n+                System.out.println(\"mouse.location = \"+mousePositionOnScreen);\n+                throw new RuntimeException(\"get(X|Y)OnScreen() or getPointOnScreen() work incorrectly\");\n+        }\n+\n+        if (evt.getX() != mousePosition.x ||\n+            evt.getY() != mousePosition.y ||\n+            !evt.getPoint().equals( mousePosition)) {\n+            throw new RuntimeException(\"get(X|Y)() or getPoint() work incorrectly\");\n+        }\n+        System.out.println(message);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/MouseEventAbsoluteCoordsTest.java","additions":191,"deletions":0,"binary":false,"changes":191,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Robot;\n+\n+\/*\n+ * @test\n+ * @bug 4418155\n+ * @key headful\n+ * @summary Checks Undecorated Frame repaints when shrinking\n+ *\/\n+\n+public class UndecoratedShrink extends Frame {\n+    private static boolean passed = false;\n+    private static UndecoratedShrink frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new UndecoratedShrink();\n+                frame.setUndecorated(true);\n+                frame.setSize(100, 100);\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                frame.setSize(50, 50);\n+                frame.repaint();\n+            });\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            if (!passed) {\n+                throw new RuntimeException(\"Test Fails.\" +\n+                        \" Frame does not get repainted\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        passed = true;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/OtherEvents\/UndecoratedShrink.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JInternalFrame;\n+\n+\/*\n+ * @test\n+ * @bug 4212562\n+ * @summary To check if StackOverflow occurs if foreground is set to null.\n+ *\/\n+\n+public class bug4212562 {\n+    public static void main(String[] args) {\n+        try {\n+            JInternalFrame jif = new JInternalFrame();\n+            jif.getContentPane().setForeground(null);\n+            jif.getForeground();\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Following exception occurred\" +\n+                    \" when getForeground() was called\", e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JInternalFrame\/bug4212562.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.Robot;\n+\n+import static java.awt.RenderingHints.KEY_ANTIALIASING;\n+import static java.awt.RenderingHints.KEY_TEXT_ANTIALIASING;\n+import static java.awt.RenderingHints.VALUE_ANTIALIAS_ON;\n+import static java.awt.RenderingHints.VALUE_TEXT_ANTIALIAS_ON;\n+\n+\/*\n+ * @test\n+ * @bug 4357180\n+ * @key headful\n+ * @summary When both KEY_ANTIALIASING and KEY_TEXT_ANTIALIASING hints\n+ *          were turned on, java aborts with EXCEPTION_ACCESS_VIOLATION\n+ *          at attempt to draw characters in Hebrew or Arabic.\n+ *          This could happen immediately or after several draws,\n+ *          depending on th locale and platform. This test draws\n+ *          large number of characters that are among this range repeatedly.\n+ *\/\n+\n+public class DoubleAntialiasTest extends Panel {\n+    private static Frame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new Frame();\n+                frame.setTitle(\"DoubleAntialiasTest\");\n+                frame.add(new DoubleAntialiasTest());\n+                frame.pack();\n+                frame.setSize(500, 500);\n+                frame.setVisible(true);\n+            });\n+\n+            robot.waitForIdle();\n+            robot.delay(2000);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Following exception occurred\" +\n+                    \" when testing Antialiasing Rendering hints: \", e);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                 if (frame != null) {\n+                     frame.dispose();\n+                 }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        Graphics2D g2 = (Graphics2D) g;\n+        int y = 50;\n+        for (int i = 0; i < 2; i++) {\n+            int k = 5;\n+            for (int j = 0x500; j < 0x700; j++) {\n+                g2.setRenderingHint(KEY_TEXT_ANTIALIASING,\n+                                    VALUE_TEXT_ANTIALIAS_ON);\n+                g2.setRenderingHint(KEY_ANTIALIASING,\n+                                    VALUE_ANTIALIAS_ON);\n+                g2.drawString(String.valueOf((char) j), (5 + k), y);\n+                k = k + 15;\n+            }\n+            k = 5;\n+            y += 50;\n+            for (int j = 0x700; j > 0x500; j--) {\n+                g2.setRenderingHint(KEY_TEXT_ANTIALIASING,\n+                                    VALUE_TEXT_ANTIALIAS_ON);\n+                g2.setRenderingHint(KEY_ANTIALIASING,\n+                                    VALUE_ANTIALIAS_ON);\n+                g2.drawString(String.valueOf((char) j), (5 + k), y);\n+                k = k + 15;\n+            }\n+            y += 50;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/awt\/font\/DoubleAntialiasTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"}]}