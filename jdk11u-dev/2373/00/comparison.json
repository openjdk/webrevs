{"files":[{"patch":"@@ -109,2 +109,2 @@\n-            this.executable = LevelTransitionTest.Helper.getMethod(TrivialMethods.class, name);\n-            this.callable = LevelTransitionTest.Helper.getCallable(new TrivialMethods(), name);\n+            this.executable = MethodHelper.getMethod(TrivialMethods.class, name);\n+            this.callable = MethodHelper.getCallable(new TrivialMethods(), name);\n","filename":"test\/hotspot\/jtreg\/compiler\/tiered\/ConstantGettersTransitionsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @requires vm.compMode != \"Xcomp\"\n@@ -37,0 +38,1 @@\n+ *                   -XX:-BackgroundCompilation\n@@ -46,0 +48,1 @@\n+import jdk.test.lib.Platform;\n@@ -50,1 +53,0 @@\n-import java.util.Objects;\n@@ -102,0 +104,1 @@\n+            System.out.println(\"Levels, current: \" + current + \", expected: \" + expected);\n@@ -111,0 +114,2 @@\n+                System.out.printf(\"Method %s has been compiled to level %d. Expected level is %d%n\",\n+                        method, newLevel, expected);\n@@ -113,1 +118,0 @@\n-            System.out.printf(\"Method %s is compiled on level %d. Expected level is %d%n\", method, newLevel, expected);\n@@ -130,2 +134,3 @@\n-                nextLevel = isMethodProfiled ? CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION\n-                        : CompilerWhiteBoxTest.COMP_LEVEL_FULL_PROFILE;\n+                nextLevel = isTrivial() ? CompilerWhiteBoxTest.COMP_LEVEL_SIMPLE :\n+                            isMethodProfiled ? CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION :\n+                            CompilerWhiteBoxTest.COMP_LEVEL_FULL_PROFILE;\n@@ -152,1 +157,1 @@\n-                || (testCase == ExtendedTestCase.TRIVIAL_CODE_TEST && isMethodProfiled);\n+                || testCase == ExtendedTestCase.TRIVIAL_CODE_TEST;\n@@ -174,36 +179,0 @@\n-    protected static class Helper {\n-        \/**\n-         * Gets method from a specified class using its name\n-         *\n-         * @param aClass type method belongs to\n-         * @param name   the name of the method\n-         * @return {@link Method} that represents corresponding class method\n-         *\/\n-        public static Method getMethod(Class<?> aClass, String name) {\n-            Method method;\n-            try {\n-                method = aClass.getDeclaredMethod(name);\n-            } catch (NoSuchMethodException e) {\n-                throw new Error(\"TESTBUG: Unable to get method \" + name, e);\n-            }\n-            return method;\n-        }\n-\n-        \/**\n-         * Gets {@link Callable} that invokes given method from the given object\n-         *\n-         * @param object the object the specified method is invoked from\n-         * @param name   the name of the method\n-         *\/\n-        public static Callable<Integer> getCallable(Object object, String name) {\n-            Method method = getMethod(object.getClass(), name);\n-            return () -> {\n-                try {\n-                    return Objects.hashCode(method.invoke(object));\n-                } catch (ReflectiveOperationException e) {\n-                    throw new Error(\"TESTBUG: Invocation failure\", e);\n-                }\n-            };\n-        }\n-    }\n-\n@@ -234,2 +203,2 @@\n-            this.executable = LevelTransitionTest.Helper.getMethod(CompileMethodHolder.class, methodName);\n-            this.callable = LevelTransitionTest.Helper.getCallable(new CompileMethodHolder(), methodName);\n+            this.executable = MethodHelper.getMethod(CompileMethodHolder.class, methodName);\n+            this.callable = MethodHelper.getCallable(new CompileMethodHolder(), methodName);\n@@ -261,1 +230,1 @@\n-             * Method considered as trivial by amount of code\n+             * Method considered as trivial by type (constant getter)\n@@ -264,3 +233,1 @@\n-                int var = 0xBAAD_C0DE;\n-                var *= field;\n-                return var;\n+                return 0x42;\n","filename":"test\/hotspot\/jtreg\/compiler\/tiered\/LevelTransitionTest.java","additions":14,"deletions":47,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.tiered;\n+\n+import java.lang.reflect.Method;\n+import java.util.Objects;\n+import java.util.concurrent.Callable;\n+\n+public class MethodHelper {\n+    \/**\n+     * Gets method from a specified class using its name\n+     *\n+     * @param aClass type method belongs to\n+     * @param name   the name of the method\n+     * @return {@link Method} that represents corresponding class method\n+     *\/\n+    public static Method getMethod(Class<?> aClass, String name) {\n+        Method method;\n+        try {\n+            method = aClass.getDeclaredMethod(name);\n+        } catch (NoSuchMethodException e) {\n+            throw new Error(\"TESTBUG: Unable to get method \" + name, e);\n+        }\n+        return method;\n+    }\n+\n+    \/**\n+     * Gets {@link Callable} that invokes given method from the given object\n+     *\n+     * @param object the object the specified method is invoked from\n+     * @param name   the name of the method\n+     *\/\n+    public static Callable<Integer> getCallable(Object object, String name) {\n+        Method method = getMethod(object.getClass(), name);\n+        return () -> {\n+            try {\n+                return Objects.hashCode(method.invoke(object));\n+            } catch (ReflectiveOperationException e) {\n+                throw new Error(\"TESTBUG: Invocation failure\", e);\n+            }\n+        };\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/tiered\/MethodHelper.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}