{"files":[{"patch":"@@ -1253,7 +1253,5 @@\n-    \/\/ Fall through into rest of the clean up code which will move\n-    \/\/ any dependent nodes onto the upper bound test.\n-    new_predicate_proj = upper_bound_proj;\n-\n-    if (iff->is_RangeCheck()) {\n-      new_predicate_proj = insert_initial_skeleton_predicate(iff, loop, if_success_proj, predicate_proj, upper_bound_proj, scale, offset, init, limit, stride, rng, overflow, reason);\n-    }\n+    \/\/ Fall through into rest of the cleanup code which will move any dependent nodes to the skeleton predicates of the\n+    \/\/ upper bound test. We always need to create skeleton predicates in order to properly remove dead loops when later\n+    \/\/ splitting the predicated loop into (unreachable) sub-loops (i.e. done by unrolling, peeling, pre\/main\/post etc.).\n+    new_predicate_proj = insert_initial_skeleton_predicate(iff, loop, if_success_proj, predicate_proj, upper_bound_proj, scale,\n+                                                           offset, init, limit, stride, rng, overflow, reason);\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8297951\n+ * @summary Test that crashes because we do not emit skeleton predicates for normal If nodes for which a range check\n+ *          predicate is created in loop predication.\n+ * @requires vm.debug == true & vm.compiler2.enabled\n+ * @run main\/othervm -XX:-TieredCompilation -Xbatch -XX:-RangeCheckElimination -XX:+BailoutToInterpreterForThrows\n+                     compiler.loopopts.TestMissingSkeletonPredicateForIfNode\n+ *\/\n+package compiler.loopopts;\n+\n+public class TestMissingSkeletonPredicateForIfNode {\n+    static int iFld = 2, x;\n+    static short limit = 10;\n+\n+    public static void main(String[] args) throws Exception {\n+        for (int i = 0; i < 5000; i++) {\n+            try {\n+                test(i % 2 == 0, i % 3);\n+            } catch (Exception e) {\n+                \/\/ Expected\n+            }\n+        }\n+    }\n+\n+    public static void test(boolean flag, int arg) throws Exception {\n+        int sum = 1;\n+        int[] iArr2 = new int[4];\n+        RuntimeException r = new RuntimeException();\n+\n+        for (int i = 0; i < limit; i+=2) { \/\/ Pre\/main\/post + Unrolled once. This results in the following type for the iv phi i: [2..SHORT_MAX]\n+            x = 5 \/ sum;\n+            if (Integer.compareUnsigned(i, iArr2.length) < 0) { \/\/ (**) Loop predication creates a RC predicate for this check\n+                \/\/ After unrolling, we have:\n+                \/\/\n+                \/\/ iArr2[i]\n+                \/\/ iArr2[i+2]\n+                \/\/\n+                \/\/ The type of iArr2[i+2] is [4..SHORT_MAX+2] (we need limit to be short such that we do not have an integer overflow\n+                \/\/ which would set the type to int). However, the type of the CastII node for the index i+2 is [0..3] because its size\n+                \/\/ is only 4. Since the type of i+2 is outside the range of the CastII node, the CastII node is replaced by top and\n+                \/\/ some of the data nodes and memory nodes die. We are left with a broken graph and later assert because of that.\n+                iFld += iArr2[i]; \/\/ RangeCheck node is removed because it shares the same bool as the If (**).\n+                sum += iFld;\n+            } else {\n+                \/\/ Emits an UCT with -XX:+BailoutToInterpreterForThrows and therefore the If (**) satisfies the condition of being a\n+                \/\/ range check if with one of its blocks being an UCT.\n+                throw r;\n+            }\n+            if (i > 50) {\n+                break;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestMissingSkeletonPredicateForIfNode.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}