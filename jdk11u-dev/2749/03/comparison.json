{"files":[{"patch":"@@ -211,1 +211,3 @@\n-        this.jarHandler = null;\n+        \/\/ the application class loader uses the built-in protocol handler to avoid protocol\n+        \/\/ handler lookup when opening JAR files on the class path.\n+        this.jarHandler = new sun.net.www.protocol.jar.Handler();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/URLClassPath.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.compiler.CompilerUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.lib.testlibrary.java.util.jar.JarBuilder;\n+\n+\/*\n+ * @test\n+ * @bug 8308184\n+ * @summary Verify that an application can be launched when the classpath contains large number of\n+ *          jars and the java.protocol.handler.pkgs system property is set\n+ * @library \/test\/lib\/\n+ * @build jdk.test.lib.util.JarBuilder jdk.test.lib.compiler.CompilerUtils\n+ *        jdk.test.lib.process.ProcessTools\n+ * @run driver LargeClasspathWithPkgPrefix\n+ *\/\n+public class LargeClasspathWithPkgPrefix {\n+\n+    private static final Path CWD = Path.of(\".\");\n+\n+    private static final String JAVA_MAIN_CONTENT;\n+\n+    static {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"public class Foo {\\n\")\n+          .append(\"    public static void main(String[] args) throws Exception {\\n\")\n+          .append(\"        if (args.length != 0) {\\n\")\n+          .append(\"            System.out.println(\\\"unexpected args: \\\" + java.util.Arrays.toString(args));\\n\")\n+          .append(\"            System.exit(1);\\n\")\n+          .append(\"        }\\n\")\n+          .append(\"        System.out.println(\\\"Running application on Java version: \\\"\\n\")\n+          .append(\"                    + System.getProperty(\\\"java.version\\\"));\\n\")\n+          .append(\"        System.out.println(\\\"Application launched with java.protocol.handler.pkgs=\\\"\\n\")\n+          .append(\"                    + System.getProperty(\\\"java.protocol.handler.pkgs\\\"));\\n\")\n+          .append(\"        System.out.println(\\\"Application launched with classpath: \\\"\\n\")\n+          .append(\"                    + System.getProperty(\\\"java.class.path\\\"));\\n\")\n+          .append(\"        System.out.println(\\\"Hello World\\\");\\n\")\n+          .append(\"    }\\n\")\n+          .append(\"}\\n\");\n+\n+        JAVA_MAIN_CONTENT = sb.toString();\n+}\n+\n+    public static void main(final String[] args) throws Exception {\n+        \/\/ dir to which the application main's .class file will be compiled to\n+        Path classesDir = Files.createTempDirectory(CWD, \"8308184-classes\").toAbsolutePath();\n+        \/\/ dir contains many jars\n+        Path libDir = Files.createTempDirectory(CWD, \"8308184-libs\").toAbsolutePath();\n+        Files.createDirectories(libDir);\n+\n+        \/\/ trivial jar file\n+        Path jarPath = Path.of(libDir.toString(), \"8308184-dummy.jar\");\n+        createJar(jarPath);\n+\n+        \/\/ create multiple such jar files in the lib dir\n+        int numCopies = 750;\n+        long start = System.currentTimeMillis();\n+        for (int i = 1; i <= numCopies; i++) {\n+            Path dest = Path.of(libDir.toString(), \"8308184-dummy-\" + i + \".jar\");\n+            Files.copy(jarPath, dest);\n+        }\n+        long end = System.currentTimeMillis();\n+        System.out.println(\"Created \" + numCopies + \" jars under \" + libDir\n+                + \", took \" + (end - start) + \" milli seconds\");\n+\n+        \/\/ create the application's main java file\n+        Path fooJavaSrcFile = Path.of(classesDir.toString(), \"Foo.java\");\n+        Files.writeString(fooJavaSrcFile, JAVA_MAIN_CONTENT);\n+\n+        \/\/ compile this java file\n+        compile(fooJavaSrcFile, classesDir);\n+\n+        \/\/ Create the classpath string. It is important that the classes directory which contains\n+        \/\/ application's main class, is at the end of the classpath (or too far into the classpath).\n+        \/\/ The initial entries in the classpath should be jar files.\n+        \/\/ constructed classpath is of the form -cp lib\/*:classes\/\n+        \/\/ (the * in lib\/* is parsed\/interpreted by the java launcher and includes all jars in that\n+        \/\/ directory)\n+        String classpath = File.pathSeparator + libDir.toString() + \"\/*\"\n+                + File.pathSeparator + classesDir.toString();\n+        \/\/ launch the application\n+        launchApplication(classpath);\n+        \/\/ test passed successfully, we don't need the lib directory which has too many jars,\n+        \/\/ anymore. we let the dir stay only if the test fails, for debug purpose\n+        libDir.toFile().deleteOnExit();\n+    }\n+\n+    \/\/ creates a trivial jar file\n+    private static void createJar(Path p) throws Exception {\n+        JarBuilder jb = new JarBuilder(p.toString());\n+        jb.addEntry(\"foobar.txt\", \"foobar\".getBytes());\n+        jb.build();\n+        System.out.println(\"Created jar at \" + p);\n+    }\n+\n+    \/\/ compile <javaFile> to <destDir>\n+    private static void compile(Path javaFile, Path destDir) throws Exception {\n+        boolean compiled = CompilerUtils.compile(javaFile, destDir);\n+        if (!compiled) {\n+            \/\/ compilation failure log\/reason would already be available on System.out\/err\n+            throw new AssertionError(\"Compilation failed for \" + javaFile);\n+        }\n+    }\n+\n+    \/\/ java -Djava.protocol.handler.pkgs=foo.bar.some.nonexistent.pkg -cp <classpath> Foo\n+    private static void launchApplication(String classPath) throws Exception {\n+        String java = JDKToolFinder.getJDKTool(\"java\");\n+        ProcessBuilder pb = new ProcessBuilder(java,\n+                \"-Djava.protocol.handler.pkgs=foo.bar.some.nonexistent.pkg\",\n+                \"-cp\", classPath,\n+                \"Foo\");\n+        pb.directory(CWD.toFile());\n+        System.out.println(\"Launching java application: \" + pb.command());\n+        OutputAnalyzer analyzer = ProcessTools.executeProcess(pb);\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.shouldContain(\"Hello World\");\n+    }\n+}\n","filename":"test\/jdk\/sun\/misc\/URLClassPath\/LargeClasspathWithPkgPrefix.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+package jdk.test.lib.util;\n","filename":"test\/lib\/jdk\/test\/lib\/util\/JarBuilder.java","additions":2,"deletions":1,"binary":false,"changes":3,"previous_filename":"test\/jdk\/lib\/testlibrary\/java\/util\/jar\/JarBuilder.java","status":"copied"}]}