{"files":[{"patch":"@@ -26,0 +26,1 @@\n+#include <string.h>\n@@ -51,1 +52,12 @@\n-    int len = snprintf(NULL, 0, \"%s : %s\", _base_msg, _return_error) + 1;\n+    \/\/ This is error prone, but:\n+    \/\/   - Seems like we cannot use std::string (due to windows\/solaris not\n+    \/\/   building when used, seemingly due to exception libraries not linking).\n+    \/\/   - Seems like we cannot use sprintf due to VS2013 (JDK-8213622).\n+    \/\/\n+    \/\/   We are aiming to do:\n+    \/\/     snprintf(full_message, len, \"%s : %s\", _base_msg, _return_error);\n+    \/\/   but will use strlen + memcpy instead.\n+    size_t base_len = strlen(_base_msg);\n+    const char* between_msg = \" : \";\n+    size_t between_len = strlen(between_msg);\n+    size_t return_len = strlen(_return_error);\n@@ -53,4 +65,2 @@\n-    if (len <= 0) {\n-      _env->HandleError(_return_error);\n-      return;\n-    }\n+    \/\/ +1 for the '\\0'\n+    size_t len = base_len + between_len + return_len + 1;\n@@ -64,1 +74,12 @@\n-    snprintf(full_message, len, \"%s : %s\", _base_msg, _return_error);\n+    \/\/ Now we construct the string using memcpy to not use sprintf\/std::string\n+    \/\/ instead of:\n+    \/\/     snprintf(full_message, len, \"%s : %s\", _base_msg, _return_error);\n+    memcpy(full_message, _base_msg, base_len);\n+    memcpy(full_message + base_len, between_msg, between_len);\n+    memcpy(full_message + base_len + between_len, _return_error, return_len);\n+    full_message[len - 1] = '\\0';\n+\n+    \/\/ -1 due to the '\\0' not counted by strlen but is counted for the allocation.\n+    if (strlen(full_message) != len - 1) {\n+      _env->GetJNIEnv()->FatalError(\"Length of message is not what was expected\");\n+    }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jni\/ExceptionCheckingJniEnv.cpp","additions":27,"deletions":6,"binary":false,"changes":33,"status":"modified"}]}