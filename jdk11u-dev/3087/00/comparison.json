{"files":[{"patch":"@@ -299,0 +299,4 @@\n+<p>All compilers are expected to be able to compile to the C99 language standard,\n+as some C99 features are used in the source code. Microsoft Visual Studio\n+doesn't fully support C99 so in practice shared code is limited to using C99\n+features that it does support.<\/p>\n","filename":"doc\/building.html","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -316,0 +316,5 @@\n+All compilers are expected to be able to compile to the C99 language standard,\n+as some C99 features are used in the source code. Microsoft Visual Studio\n+doesn't fully support C99 so in practice shared code is limited to using C99\n+features that it does support.\n+\n","filename":"doc\/building.md","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -566,1 +566,1 @@\n-    TOOLCHAIN_CFLAGS_JDK_CONLY=\"-xCC -Xa -W0,-noglobal $TOOLCHAIN_CFLAGS\" # C only\n+    TOOLCHAIN_CFLAGS_JDK_CONLY=\"-W0,-noglobal $TOOLCHAIN_CFLAGS\" # C only\n@@ -587,0 +587,24 @@\n+  # CFLAGS C language level for JDK sources (hotspot only uses C++)\n+  # Ideally we would have a common level across all toolchains so that all sources\n+  # are sure to conform to the same standard. Unfortunately neither our sources nor\n+  # our toolchains are in a condition to support that. But what we loosely aim for is\n+  # C99 level.\n+  if test \"x$TOOLCHAIN_TYPE\" = xgcc || test \"x$TOOLCHAIN_TYPE\" = xclang || test \"x$TOOLCHAIN_TYPE\" = xxlc; then\n+    # This raises the language level for older 4.8 gcc, while lowering it for later\n+    # versions. clang and xlclang support the same flag.\n+    LANGSTD_CFLAGS=\"-std=c99\"\n+  elif test \"x$TOOLCHAIN_TYPE\" = xsolstudio; then\n+    # We can't turn on -std=c99 without breaking compilation of the splashscreen\/png\n+    # utilities. But we can enable c99 as below (previously achieved by using -Xa).\n+    # It is the no_lib that makes the difference.\n+    LANGSTD_CFLAGS=\"-xc99=all,no_lib\"\n+  elif test \"x$TOOLCHAIN_TYPE\" = xmicrosoft; then\n+    # MSVC doesn't support C99\/C11 explicitly, unless you compile as C++:\n+    # LANGSTD_CFLAGS=\"\/TP\"\n+    # but that requires numerous changes to the sources files. So we are limited\n+    # to C89\/C90 plus whatever extensions Visual Studio has decided to implement.\n+    # This is the lowest bar for shared code.\n+    LANGSTD_CFLAGS=\"\"\n+  fi\n+  TOOLCHAIN_CFLAGS_JDK_CONLY=\"$LANGSTD_CFLAGS $TOOLCHAIN_CFLAGS_JDK_CONLY\"\n+\n","filename":"make\/autoconf\/flags-cflags.m4","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -385,1 +385,0 @@\n-    CFLAGS_solaris := -xc99=no_lib, \\\n","filename":"make\/lib\/Awt2dLibraries.gmk","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}