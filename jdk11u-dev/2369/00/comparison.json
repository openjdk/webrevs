{"files":[{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 4198809\n+   @key headful\n+   @summary If JMenuItem is disabled and disabled icon is null, throws NPE.\n+   @run main bug4198809\n+*\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JMenuItem;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+public class bug4198809 {\n+    static JFrame frame;\n+    public static void main(String args[]) throws Exception {\n+        UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.motif.MotifLookAndFeel\");\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                frame = new JFrame(\"bug4198809\");\n+                JMenuItem mi = new JMenuItem(\"test\");\n+                mi.setDisabledIcon(null);\n+                mi.setEnabled(false);\n+                frame.getContentPane().add(mi);\n+            } finally {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenuItem\/bug4198809.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 4304129\n+   @summary Tests that ACCELERATOR_KEY and MNEMONIC_KEY properties of\n+            Action are used by JMenuItem(Action) constructor\n+   @run main bug4304129\n+*\/\n+\n+import java.awt.Event;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+\n+import javax.swing.AbstractAction;\n+import javax.swing.JMenuItem;\n+import javax.swing.KeyStroke;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4304129 {\n+    private static int mnemonic = 102;\n+    private static KeyStroke accelerator = KeyStroke.getKeyStroke(\n+                                        KeyEvent.VK_E, Event.CTRL_MASK);\n+\n+    public static void main(String args[]) throws Exception {\n+        JMenuItem mi = new JMenuItem(new TestAction(\"Delete Folder\"));\n+\n+        if (mi.getMnemonic() != mnemonic) {\n+            throw new RuntimeException(\"Failed: mnemonic not set from Action\");\n+        }\n+\n+        if (mi.getAccelerator() == null ||\n+                ! mi.getAccelerator().equals(accelerator)) {\n+\n+            throw new RuntimeException(\"Failed: accelerator not set from Action\");\n+        }\n+    }\n+\n+    static class TestAction extends AbstractAction {\n+        TestAction(String str) {\n+            super(str);\n+            putValue(AbstractAction.ACCELERATOR_KEY, accelerator);\n+            putValue(AbstractAction.MNEMONIC_KEY, new Integer(mnemonic));\n+        }\n+        public void actionPerformed(ActionEvent ev) {\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenuItem\/bug4304129.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,265 @@\n+\/*\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+    @test\n+    @bug 4839464\n+    @summary Shortcoming in the way JMenuItem handles 'propertyChange()' events.\n+    @key headful\n+    @run main bug4839464\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.GridLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+import javax.swing.Action;\n+import javax.swing.AbstractAction;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.KeyStroke;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4839464 {\n+\n+    \/\/ Global variables\n+    public static volatile boolean passed = true;\n+    public static volatile String reason = \"\\nSome actions did not worked:\";\n+\n+    public static AbstractAction action= new AbstractAction() {\n+        public void actionPerformed(ActionEvent e) {\n+            System.out.println(\"An action has performed\");\n+        }\n+    };\n+\n+    public static KeyStroke ks1 =\n+            KeyStroke.getKeyStroke(KeyEvent.VK_F1,\n+                                   KeyEvent.SHIFT_DOWN_MASK);\n+\n+    public static KeyStroke ks2 =\n+            KeyStroke.getKeyStroke(KeyEvent.VK_F1,\n+                                   KeyEvent.CTRL_DOWN_MASK);\n+\n+    public static JFrame frame;\n+\n+    public static JFrame control;\n+    public static JButton changeNameButton;\n+    public static JButton changeMnemonicButton;\n+    public static JButton changeAcceleratorButton;\n+    public static JButton changeShortDescButton;\n+\n+    public static JMenuItem item;\n+\n+    public static Robot r;\n+\n+    public static volatile int btnWidth, btnHeight;\n+    public static volatile Point p;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            r = new Robot();\n+            SwingUtilities.invokeAndWait(() -> {\n+                changeNameButton = new JButton(\"Change name\");\n+                changeMnemonicButton = new JButton(\"On\/Off mnemonic\");\n+                changeAcceleratorButton = new JButton(\"Change accelerator\");\n+                changeShortDescButton = new JButton(\"Change short desc.\");\n+\n+                JMenuBar mb = new JMenuBar();\n+                JMenu test = new JMenu(\"Test\");\n+                mb.add(test);\n+                item = new JMenuItem(action);\n+                test.add(item);\n+                frame = new JFrame(\"Action tester\");\n+                frame.setJMenuBar(mb);\n+                frame.setLayout(new BorderLayout());\n+                frame.add(new JButton(action), BorderLayout.CENTER);\n+                frame.pack();\n+                frame.setLocation(100, 10);\n+                frame.setVisible(true);\n+                r.delay(100);\n+\n+                control = new JFrame(\"Controls\");\n+                control.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+                control.setLayout(new GridLayout(2, 10));\n+                control.add(changeNameButton);\n+                control.add(changeMnemonicButton);\n+                control.add(changeAcceleratorButton);\n+                control.add(changeShortDescButton);\n+                control.pack();\n+                control.setLocation(100, 500);\n+                control.setVisible(true);\n+                r.delay(100);\n+\n+                changeNameButton.addActionListener(new AbstractAction() {\n+                    public void actionPerformed(ActionEvent e) {\n+                        if (\"First Name\".equals(action.getValue(Action.NAME))) {\n+                            action.putValue(Action.NAME, \"Second Name\");\n+                        } else {\n+                            action.putValue(Action.NAME, \"First Name\");\n+                        }\n+                    }\n+                });\n+\n+                changeMnemonicButton.addActionListener(new AbstractAction() {\n+                    public void actionPerformed(ActionEvent e) {\n+                        Integer mnem = (Integer) action.getValue(Action.MNEMONIC_KEY);\n+                        if (mnem.intValue() == 0) {\n+                            action.putValue(Action.MNEMONIC_KEY, new Integer('N'));\n+                        } else {\n+                            action.putValue(Action.MNEMONIC_KEY, new Integer(0));\n+                        }\n+                    }\n+                });\n+\n+                changeAcceleratorButton.addActionListener(new AbstractAction() {\n+                    public void actionPerformed(ActionEvent e) {\n+                        if (action.getValue(Action.ACCELERATOR_KEY) == ks1) {\n+                            action.putValue(Action.ACCELERATOR_KEY, ks2);\n+                        } else {\n+                            action.putValue(Action.ACCELERATOR_KEY, ks1);\n+                        }\n+                    }\n+                });\n+\n+                changeShortDescButton.addActionListener(new AbstractAction() {\n+                    public void actionPerformed(ActionEvent e) {\n+                        String shortDescr = (String) action.getValue(Action.SHORT_DESCRIPTION);\n+                        if (\"Just a text\".equals(shortDescr)) {\n+                            action.putValue(Action.SHORT_DESCRIPTION, null);\n+                        } else {\n+                            action.putValue(Action.SHORT_DESCRIPTION, \"Just a text\");\n+                        }\n+                    }\n+                });\n+\n+                action.putValue(Action.NAME, \"Second Name\");\n+                action.putValue(Action.MNEMONIC_KEY, new Integer('N'));\n+                action.putValue(Action.ACCELERATOR_KEY, ks1);\n+                action.putValue(Action.SHORT_DESCRIPTION, null);\n+            });\n+\n+            r.delay(1000);\n+            r.waitForIdle();\n+            \/\/ Run tests\n+            test();\n+            r.delay(1000);\n+            r.waitForIdle();\n+\n+            if (!passed) {\n+                throw new RuntimeException(reason + \"\\nTest failed.\");\n+            }\n+        } finally {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+            if (control != null) {\n+                control.dispose();\n+            }\n+        }\n+    }\n+\n+    public static boolean compareObjects(Object a, Object b) {\n+        if (a == null) {\n+            return (b == null);\n+        }\n+        return a.equals(b);\n+    }\n+\n+    \/\/ Actual tests\n+    public static void test() throws Exception {\n+        r.delay(500);\n+        Object tmpResult;\n+\n+        \/\/ Check Action.NAME handling\n+        tmpResult = item.getText();\n+        SwingUtilities.invokeAndWait(() -> {\n+            p = changeNameButton.getLocationOnScreen();\n+            btnWidth = changeNameButton.getWidth();\n+            btnHeight = changeNameButton.getHeight();\n+        });\n+\n+        doMouseMove(p, btnWidth, btnHeight);\n+        if (compareObjects(tmpResult, item.getText())) {\n+            passed = false;\n+            reason = reason + \"\\n Action.NAME\";\n+        }\n+\n+        \/\/ Check mnemonics\n+        int tmpInt = item.getMnemonic();\n+        SwingUtilities.invokeAndWait(() -> {\n+            p = changeMnemonicButton.getLocationOnScreen();\n+            btnWidth = changeMnemonicButton.getWidth();\n+            btnHeight = changeMnemonicButton.getHeight();\n+        });\n+\n+        doMouseMove(p, btnWidth, btnHeight);\n+        if (tmpInt == item.getMnemonic()) {\n+            passed = false;\n+            reason = reason + \"\\n Action.MNEMONIC_KEY\";\n+        }\n+\n+        \/\/ Check accelerator binding\n+        tmpResult = item.getAccelerator();\n+        SwingUtilities.invokeAndWait(() -> {\n+            p = changeAcceleratorButton.getLocationOnScreen();\n+            btnWidth = changeAcceleratorButton.getWidth();\n+            btnHeight = changeAcceleratorButton.getHeight();\n+        });\n+\n+        doMouseMove(p, btnWidth, btnHeight);\n+        if (compareObjects(tmpResult, item.getAccelerator())) {\n+            passed = false;\n+            reason = reason + \"\\n Action.ACCELERATOR_KEY\";\n+        }\n+\n+        \/\/ Check short description (should change ToolTipText)\n+        tmpResult = item.getToolTipText();\n+        SwingUtilities.invokeAndWait(() -> {\n+            p = changeShortDescButton.getLocationOnScreen();\n+            btnWidth = changeShortDescButton.getWidth();\n+            btnHeight = changeShortDescButton.getHeight();\n+        });\n+\n+        doMouseMove(p, btnWidth, btnHeight);\n+        if (compareObjects(tmpResult, item.getToolTipText())) {\n+            passed = false;\n+            reason = reason + \"\\n Action.SHORT_DESCRIPTION\";\n+        }\n+    }\n+\n+    public static void doMouseMove(Point p, int width, int height) {\n+        r.mouseMove(p.x + width \/ 2, p.y + height \/ 2);\n+        r.delay(500);\n+        r.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        r.delay(500);\n+        r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        r.delay(500);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenuItem\/bug4839464.java","additions":265,"deletions":0,"binary":false,"changes":265,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*  @test\n+    @bug 4966168\n+    @summary JInternalFrame not serializable in Motif & GTK L&F\n+    @run main bug4966168\n+*\/\n+\n+import javax.swing.AbstractAction;\n+import javax.swing.JButton;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.awt.event.ActionEvent;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+public class bug4966168 {\n+\n+    public static class MyAction extends AbstractAction implements Serializable {\n+        public void actionPerformed(ActionEvent e) {}\n+    }\n+\n+    public static void main(String args[]) throws Exception {\n+        JButton button = new JButton(new MyAction());\n+\n+        ObjectOutputStream out = null;\n+\n+        ByteArrayOutputStream byteStream = new ByteArrayOutputStream();\n+        try {\n+            out = new ObjectOutputStream(byteStream);\n+        } catch (IOException e) {}\n+\n+        if (out != null) {\n+            for (UIManager.LookAndFeelInfo laf :\n+                    UIManager.getInstalledLookAndFeels()) {\n+                try {\n+                    UIManager.setLookAndFeel(laf.getClassName());\n+                    System.out.println(\"Testing LAF: \" + laf.getClassName());\n+                } catch (UnsupportedLookAndFeelException e) {\n+                    System.out.println(\"Look and Feel not set: \" + laf.getClassName());\n+                    continue;\n+                }\n+\n+                out.writeObject(button);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenuItem\/bug4966168.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}