{"files":[{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.xml.XMLConstants;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLStreamConstants;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class GTestResultParser {\n+    private final List<String> _failedTests;\n+\n+    public GTestResultParser(Path file) {\n+        List<String> failedTests = new ArrayList<>();\n+        try (Reader r = Files.newBufferedReader(file)) {\n+            XMLInputFactory factory = XMLInputFactory.newInstance();\n+            factory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\n+            factory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\n+            XMLStreamReader xmlReader = factory.createXMLStreamReader(r);\n+            String testSuite = null;\n+            String testCase = null;\n+            while (xmlReader.hasNext()) {\n+                int code = xmlReader.next();\n+                if (code == XMLStreamConstants.START_ELEMENT) {\n+                    switch (xmlReader.getLocalName()) {\n+                        case \"testsuite\":\n+                            testSuite = xmlReader.getAttributeValue(\"\", \"name\");\n+                            break;\n+                        case \"testcase\":\n+                            testCase = xmlReader.getAttributeValue(\"\", \"name\");\n+                            break;\n+                        case \"failure\":\n+                            String failedStr = testSuite + \"::\" + testCase;\n+                            if (!failedTests.contains(failedStr)) {\n+                                failedTests.add(failedStr);\n+                            }\n+                            break;\n+                        default:\n+                            \/\/ ignore\n+                    }\n+                }\n+            }\n+        } catch (XMLStreamException e) {\n+            throw new IllegalArgumentException(\"can't open parse xml \" + file, e);\n+        } catch (IOException e) {\n+            throw new IllegalArgumentException(\"can't open result file \" + file, e);\n+        }\n+        _failedTests = Collections.unmodifiableList(failedTests);\n+    }\n+\n+    public List<String> failedTests() {\n+        return _failedTests;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gtest\/GTestResultParser.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ *          java.xml\n@@ -32,10 +33,0 @@\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Stream;\n-import java.util.stream.Collectors;\n-\n-import java.io.File;\n-import java.nio.file.Paths;\n-import java.nio.file.Path;\n-\n@@ -45,1 +36,8 @@\n-import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n@@ -80,7 +78,27 @@\n-        pb.command(new String[] {\n-            execPath.toString(),\n-            \"-jdk\",\n-            System.getProperty(\"test.jdk\"),\n-            \"--gtest_catch_exceptions=0\"\n-        });\n-        ProcessTools.executeCommand(pb).shouldHaveExitValue(0);\n+        Path resultFile = Paths.get(\"test_result.xml\");\n+        pb.command(execPath.toAbsolutePath().toString(),\n+                \"-jdk\", Utils.TEST_JDK,\n+                \"--gtest_output=xml:\" + resultFile);\n+        int exitCode = ProcessTools.executeCommand(pb).getExitValue();\n+        if (exitCode != 0) {\n+            List<String> failedTests = failedTests(resultFile);\n+            String message = \"gtest execution failed; exit code = \" + exitCode + \".\";\n+            if (!failedTests.isEmpty()) {\n+                message += \" the failed tests: \" + failedTests;\n+            }\n+            throw new AssertionError(message);\n+        }\n+    }\n+\n+    private static List<String> failedTests(Path xml) {\n+        if (!Files.exists(xml)) {\n+            System.err.println(\"WARNING: test result file (\" + xml + \") hasn't been found\");\n+        }\n+\n+        try {\n+            return new GTestResultParser(xml).failedTests();\n+        } catch (Throwable t) {\n+            System.err.println(\"WARNING: failed to parse result file (\" + xml + \") \" + t);\n+            t.printStackTrace();\n+        }\n+        return Collections.emptyList();\n","filename":"test\/hotspot\/jtreg\/gtest\/GTestWrapper.java","additions":37,"deletions":19,"binary":false,"changes":56,"status":"modified"}]}