{"files":[{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4467840\n+  @summary Generate a PropertyChange when KeyboardFocusManager changes\n+  @key headful\n+  @run main ChangeKFMTest\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.DefaultKeyboardFocusManager;\n+import java.awt.EventQueue;\n+import java.awt.KeyboardFocusManager;\n+\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+\n+public class ChangeKFMTest implements PropertyChangeListener {\n+    static final String CURRENT_PROP_NAME = \"managingFocus\";\n+    boolean current_fired;\n+    boolean not_current_fired;\n+    KeyboardFocusManager kfm;\n+    public static void main(String[] args) throws Exception {\n+        ChangeKFMTest test = new ChangeKFMTest();\n+        test.start();\n+    }\n+\n+    public void start () throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            kfm = new DefaultKeyboardFocusManager();\n+            kfm.addPropertyChangeListener(CURRENT_PROP_NAME, this);\n+            current_fired = false;\n+            not_current_fired = false;\n+            KeyboardFocusManager.setCurrentKeyboardFocusManager(kfm);\n+            if (!current_fired) {\n+                throw new RuntimeException(\"Change to current was not fired on KFM instalation\");\n+            }\n+            if (not_current_fired) {\n+                throw new RuntimeException(\"Change to non-current was fired on KFM instalation\");\n+            } else {\n+                System.out.println(\"Installation was complete correctly\");\n+            }\n+\n+            current_fired = false;\n+            not_current_fired = false;\n+            KeyboardFocusManager.setCurrentKeyboardFocusManager(null);\n+            if (!not_current_fired) {\n+                throw new RuntimeException(\"Change to non-current was not fired on KFM uninstalation\");\n+            }\n+            if (current_fired) {\n+                throw new RuntimeException(\"Change to current was fired on KFM uninstalation\");\n+            } else {\n+                System.out.println(\"Uninstallation was complete correctly\");\n+            }\n+        });\n+    }\n+\n+    public void propertyChange(PropertyChangeEvent e) {\n+        System.out.println(e.toString());\n+        if (!CURRENT_PROP_NAME.equals(e.getPropertyName())) {\n+            throw new RuntimeException(\"Unexpected property name - \" + e.getPropertyName());\n+        }\n+        if (((Boolean)e.getNewValue()).booleanValue()) {\n+            current_fired = true;\n+        } else {\n+            not_current_fired = true;\n+        }\n+        System.out.println(\"current_fired = \" + current_fired);\n+        System.out.println(\"not_current_fired = \" + not_current_fired);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/KeyboardFocusmanager\/ChangeKFMTest.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4458016\n+  @summary KeyboardFocusManager.get[Property|Vetoable]ChangeListeners throw NPE\n+  @key headful\n+  @run main PropertySupportNPETest\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.EventQueue;\n+import java.awt.KeyboardFocusManager;\n+\n+public class PropertySupportNPETest {\n+     public static void main(String[] args) throws Exception {\n+         EventQueue.invokeAndWait(() -> {\n+             KeyboardFocusManager kfm =\n+                     KeyboardFocusManager.getCurrentKeyboardFocusManager();\n+             kfm.getVetoableChangeListeners();\n+             kfm.getVetoableChangeListeners(\"\");\n+             kfm.getPropertyChangeListeners();\n+             kfm.getPropertyChangeListeners(\"\");\n+         });\n+     }\n+ }\n","filename":"test\/jdk\/java\/awt\/KeyboardFocusmanager\/PropertySupportNPETest.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 6215905\n+  @summary Tests that passing null value to Label.setText(String) doesn't\n+            lead to VM crash.\n+  @key headful\n+  @run main NullLabelTest\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.EventQueue;\n+import java.awt.Label;\n+import java.awt.Frame;\n+\n+public class NullLabelTest {\n+\n+    static Frame frame;\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            try {\n+                frame = new Frame();\n+                Label l = new Label(\"A\");\n+                frame.add(l);\n+                frame.setLayout(new BorderLayout());\n+                frame.setSize(200, 200);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+                l.setText(null);\n+            } finally {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Label\/NullLabelTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4087971\n+  @summary Insets does not layout a component correctly\n+  @key headful\n+  @run main InsetsTest\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Insets;\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.border.EmptyBorder;\n+\n+public class InsetsTest {\n+    private int leftInsetValue;\n+    private InsetsClass IC;\n+\n+    public static void main(String[] args) throws Exception {\n+        InsetsTest test = new InsetsTest();\n+        test.start();\n+    }\n+\n+    public void start() throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            try {\n+                IC = new InsetsClass();\n+                IC.setLayout(new BorderLayout());\n+                IC.setSize(200, 200);\n+                IC.setVisible(true);\n+\n+                leftInsetValue = IC.returnLeftInset();\n+                if (leftInsetValue != 30) {\n+                    throw new RuntimeException(\"Test Failed - Left inset\" +\n+                            \"is not taken correctly\");\n+                }\n+            } finally {\n+                if (IC != null) {\n+                    IC.dispose();\n+                }\n+            }\n+        });\n+    }\n+}\n+\n+class InsetsClass extends JFrame {\n+    private int value;\n+    private JPanel panel;\n+\n+    public InsetsClass() {\n+        super(\"TestFrame\");\n+        setBackground(Color.lightGray);\n+\n+        panel = new JPanel();\n+        panel.setBorder(new EmptyBorder(new Insets(30, 30, 30, 30)));\n+        panel.add(new JButton(\"Test Button\"));\n+\n+        getContentPane().add(panel);\n+        pack();\n+        setVisible(true);\n+    }\n+\n+    public int returnLeftInset() {\n+        \/\/ Getting the left inset value\n+        Insets insets = panel.getInsets();\n+        value = insets.left;\n+        return value;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Layout\/InsetsTest.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4092418\n+  @summary Test for drag events been taking by Lightweight Component\n+  @key headful\n+  @run main LWClobberDragEvent\n+*\/\n+\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseListener;\n+import java.awt.event.MouseMotionListener;\n+\n+public class LWClobberDragEvent implements MouseListener, MouseMotionListener {\n+    boolean isDragging;\n+\n+    static Frame frame;\n+    LightweightComp lc;\n+    final static int LWWidth = 200;\n+    final static int LWHeight = 100;\n+    final static int MAX_COUNT = 100;\n+    Point locationOfLW;\n+\n+    public static void main(String[] args) throws Exception {\n+        LWClobberDragEvent test = new LWClobberDragEvent();\n+        try {\n+            test.init();\n+            test.start();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void init() throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            frame = new Frame();\n+            frame.setLayout(new BorderLayout());\n+            isDragging = false;\n+            frame.addMouseMotionListener(this);\n+            frame.addMouseListener(this);\n+\n+            frame.setBackground(Color.white);\n+\n+            lc = new LightweightComp();\n+            lc.setSize(LWWidth, LWHeight);\n+            lc.setLocation(50, 50);\n+            lc.addMouseListener(this);\n+            lc.addMouseMotionListener(this);\n+            frame.add(lc);\n+            frame.pack();\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n+        });\n+    }\n+\n+    public void start() throws Exception {\n+        Robot robot = new Robot();\n+        robot.delay(1000);\n+        robot.waitForIdle();\n+\n+        EventQueue.invokeAndWait(() -> {\n+            locationOfLW = getLocation(lc);\n+            robot.mouseMove(locationOfLW.x + lc.getWidth() \/ 2,\n+                    locationOfLW.y - lc.getHeight() \/ 2);\n+        });\n+\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        robot.delay(1000);\n+        \/\/move mouse till the bottom of LWComponent\n+        for (int i = 1; i < LWHeight + lc.getHeight() \/ 2; i++) {\n+            robot.mouseMove(locationOfLW.x + lc.getWidth() \/ 2,\n+                    locationOfLW.y - lc.getHeight() \/ 2 + i);\n+        }\n+        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+        robot.delay(1000);\n+        System.out.println(\"Test Passed.\");\n+    }\n+\n+    public void mouseClicked(MouseEvent evt) { }\n+\n+    public void mouseReleased(MouseEvent evt) {\n+        if (evt.getSource() == this) {\n+            if (isDragging) {\n+                isDragging = false;\n+            }\n+        } else {\n+        }\n+    }\n+    public Point getLocation( Component co ) throws RuntimeException {\n+       Point pt = null;\n+       boolean bFound = false;\n+       int count = 0;\n+       while ( !bFound ) {\n+          try {\n+             pt = co.getLocationOnScreen();\n+             bFound = true;\n+          } catch ( Exception ex ) {\n+             bFound = false;\n+             count++;\n+          }\n+          if ( !bFound && count > MAX_COUNT ) {\n+             throw new RuntimeException(\"don't see a component to get location\");\n+          }\n+       }\n+       return pt;\n+    }\n+\n+    public void mousePressed(MouseEvent evt) {    }\n+    public void mouseEntered(MouseEvent evt) {    }\n+    public void mouseExited(MouseEvent evt) {    }\n+    public void mouseMoved(MouseEvent evt) {    }\n+\n+    public void mouseDragged(MouseEvent evt) {\n+        if (evt.getSource() == this) {\n+            if (!isDragging) {\n+                isDragging = true;\n+            }\n+        } else {\n+            if (isDragging) {\n+                throw new RuntimeException(\"Test failed: Lightweight got dragging event.\");\n+            }\n+        }\n+    }\n+}\n+\n+class LightweightComp extends Component {\n+    public void paint(Graphics g) {\n+        Dimension d = getSize();\n+        g.setColor(Color.red);\n+        g.fillRect(0, 0, d.width, d.height);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/LightweightComponent\/LWClobberDragEvent.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"},{"patch":"@@ -0,0 +1,151 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4050138\n+  @summary Lightweight components: Enter\/Exit mouse events\n+  incorrectly reported during drag\n+  @key headful\n+  @run main LightweightDragTest\n+*\/\n+\n+import java.awt.AWTException;\n+import java.awt.AWTEvent;\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseEvent;\n+\n+public class LightweightDragTest {\n+    MyComponent c,c2;\n+    static Frame frame;\n+    volatile int x = 0;\n+    volatile int y = 0;\n+    volatile int x2 = 0;\n+    volatile int y2 = 0;\n+\n+    public static void main(String[] args) throws Exception {\n+        LightweightDragTest test = new LightweightDragTest();\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                test.init();\n+            });\n+            test.start();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void init() {\n+        frame = new Frame(\"Test LightWeight Component Drag\");\n+        c = new MyComponent();\n+        c2 = new MyComponent();\n+        frame.add(c, BorderLayout.WEST);\n+        frame.add(c2, BorderLayout.EAST);\n+        frame.setSize(250, 200);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+   public void start() throws Exception {\n+       Robot rb;\n+       try {\n+           rb = new Robot();\n+       } catch (AWTException e) {\n+           throw new Error(\"Could not create robot\");\n+       }\n+       rb.setAutoDelay(10);\n+       rb.delay(1000);\n+       rb.waitForIdle();\n+\n+       EventQueue.invokeAndWait(() -> {\n+           x = c.getLocationOnScreen().x + c.getWidth() \/ 2;\n+           y = c.getLocationOnScreen().y + c.getHeight() \/ 2;\n+           x2 = c2.getLocationOnScreen().x + c2.getWidth() \/ 2;\n+           y2 = c2.getLocationOnScreen().y + c2.getHeight() \/ 2;\n+       });\n+       int xt = x;\n+       int yt = y;\n+       rb.mouseMove(xt, yt);\n+       rb.mousePress(InputEvent.BUTTON1_MASK);\n+       EventQueue.invokeAndWait(() -> {\n+           c.isInside = true;\n+           c2.isInside = false;\n+       });\n+       \/\/ drag\n+       while (xt != x2 || yt != y2) {\n+           if (x2 > xt) ++xt;\n+           if (x2 < xt) --xt;\n+           if (y2 > yt) ++yt;\n+           if (y2 < yt) --yt;\n+           rb.mouseMove(xt, yt);\n+       }\n+       rb.mouseRelease(InputEvent.BUTTON1_MASK);\n+       EventQueue.invokeAndWait(() -> {\n+           if (c.isInside || !c2.isInside) {\n+               throw new Error(\"Test failed: mouse events did not arrive\");\n+           }\n+       });\n+   }\n+}\n+\n+class MyComponent extends Component {\n+    public boolean isInside;\n+    public void paint(Graphics g) {\n+        g.setColor(getBackground());\n+        g.fillRect(0,0,getSize().width,getSize().height);\n+    }\n+    public MyComponent() {\n+        enableEvents(AWTEvent.MOUSE_EVENT_MASK);\n+        setBackground(Color.blue);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(100, 100);\n+    }\n+\n+    public void processEvent(AWTEvent e) {\n+        int eventID = e.getID();\n+        if ((eventID == MouseEvent.MOUSE_ENTERED)) {\n+            setBackground(Color.red);\n+            repaint();\n+            isInside = true;\n+        } else if (eventID == MouseEvent.MOUSE_EXITED) {\n+            setBackground(Color.blue);\n+            repaint();\n+            isInside = false;\n+        }\n+        super.processEvent(e);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/LightweightComponent\/LightweightDragTest.java","additions":151,"deletions":0,"binary":false,"changes":151,"status":"added"}]}