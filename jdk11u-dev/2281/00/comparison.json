{"files":[{"patch":"@@ -1136,1 +1136,1 @@\n-  G1FullCollector collector(this, &_full_gc_memory_manager, explicit_gc, do_clear_all_soft_refs);\n+  G1FullCollector collector(this, explicit_gc, do_clear_all_soft_refs);\n@@ -1424,5 +1424,0 @@\n-  _memory_manager(\"G1 Young Generation\", \"end of minor GC\"),\n-  _full_gc_memory_manager(\"G1 Old Generation\", \"end of major GC\"),\n-  _eden_pool(NULL),\n-  _survivor_pool(NULL),\n-  _old_pool(NULL),\n@@ -1737,14 +1732,0 @@\n-void G1CollectedHeap::initialize_serviceability() {\n-  _eden_pool = new G1EdenPool(this);\n-  _survivor_pool = new G1SurvivorPool(this);\n-  _old_pool = new G1OldGenPool(this);\n-\n-  _full_gc_memory_manager.add_pool(_eden_pool);\n-  _full_gc_memory_manager.add_pool(_survivor_pool);\n-  _full_gc_memory_manager.add_pool(_old_pool);\n-\n-  _memory_manager.add_pool(_eden_pool);\n-  _memory_manager.add_pool(_survivor_pool);\n-  _memory_manager.add_pool(_old_pool, false \/* always_affected_by_gc *\/);\n-}\n-\n@@ -2880,3 +2861,3 @@\n-    TraceCollectorStats tcs(g1mm()->incremental_collection_counters());\n-    TraceMemoryManagerStats tms(&_memory_manager, gc_cause(),\n-                                collector_state()->yc_type() == Mixed \/* allMemoryPoolsAffected *\/);\n+    G1MonitoringScope ms(g1mm(),\n+                         false \/* full_gc *\/,\n+                         collector_state()->yc_type() == Mixed \/* all_memory_pools_affected *\/);\n@@ -4879,1 +4860,1 @@\n-  \/\/ used space has been recored in _summary_bytes_used.\n+  \/\/ used space has been recorded in _summary_bytes_used.\n@@ -5055,0 +5036,8 @@\n+void G1CollectedHeap::initialize_serviceability() {\n+  _g1mm->initialize_serviceability();\n+}\n+\n+MemoryUsage G1CollectedHeap::memory_usage() {\n+  return _g1mm->memory_usage();\n+}\n+\n@@ -5056,4 +5045,1 @@\n-  GrowableArray<GCMemoryManager*> memory_managers(2);\n-  memory_managers.append(&_memory_manager);\n-  memory_managers.append(&_full_gc_memory_manager);\n-  return memory_managers;\n+  return _g1mm->memory_managers();\n@@ -5063,5 +5049,1 @@\n-  GrowableArray<MemoryPool*> memory_pools(3);\n-  memory_pools.append(_eden_pool);\n-  memory_pools.append(_survivor_pool);\n-  memory_pools.append(_old_pool);\n-  return memory_pools;\n+  return _g1mm->memory_pools();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":15,"deletions":33,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-#include \"services\/memoryManager.hpp\"\n@@ -70,0 +69,1 @@\n+class MemoryManager;\n@@ -163,7 +163,0 @@\n-  GCMemoryManager _memory_manager;\n-  GCMemoryManager _full_gc_memory_manager;\n-\n-  MemoryPool* _eden_pool;\n-  MemoryPool* _survivor_pool;\n-  MemoryPool* _old_pool;\n-\n@@ -178,2 +171,0 @@\n-  virtual void initialize_serviceability();\n-\n@@ -976,0 +967,2 @@\n+  virtual void initialize_serviceability();\n+  virtual MemoryUsage memory_usage();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-G1FullCollector::G1FullCollector(G1CollectedHeap* heap, GCMemoryManager* memory_manager, bool explicit_gc, bool clear_soft_refs) :\n+G1FullCollector::G1FullCollector(G1CollectedHeap* heap, bool explicit_gc, bool clear_soft_refs) :\n@@ -108,1 +108,1 @@\n-    _scope(memory_manager, explicit_gc, clear_soft_refs),\n+    _scope(heap->g1mm(), explicit_gc, clear_soft_refs),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-  G1FullCollector(G1CollectedHeap* heap, GCMemoryManager* memory_manager, bool explicit_gc, bool clear_soft_refs);\n+  G1FullCollector(G1CollectedHeap* heap, bool explicit_gc, bool clear_soft_refs);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-G1FullGCScope::G1FullGCScope(GCMemoryManager* memory_manager, bool explicit_gc, bool clear_soft) :\n+G1FullGCScope::G1FullGCScope(G1MonitoringSupport* monitoring_support, bool explicit_gc, bool clear_soft) :\n@@ -39,2 +39,1 @@\n-    _memory_stats(memory_manager, _g1h->gc_cause()),\n-    _collector_stats(_g1h->g1mm()->full_collection_counters()),\n+    _monitoring_scope(monitoring_support, true \/* full_gc *\/, true \/* all_memory_pools_affected *\/),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCScope.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-#include \"gc\/shared\/collectorCounters.hpp\"\n@@ -54,2 +53,1 @@\n-  TraceCollectorStats     _collector_stats;\n-  TraceMemoryManagerStats _memory_stats;\n+  G1MonitoringScope       _monitoring_scope;\n@@ -59,1 +57,1 @@\n-  G1FullGCScope(GCMemoryManager* memory_manager, bool explicit_gc, bool clear_soft);\n+  G1FullGCScope(G1MonitoringSupport* monitoring_support, bool explicit_gc, bool clear_soft);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCScope.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-G1EdenPool::G1EdenPool(G1CollectedHeap* g1h) :\n+G1EdenPool::G1EdenPool(G1CollectedHeap* g1h, size_t initial_size) :\n@@ -45,2 +45,2 @@\n-                    g1h->g1mm()->eden_space_committed(), \/* init_size *\/\n-                    _undefined_max,\n+                    initial_size,\n+                    MemoryUsage::undefined_size(),\n@@ -50,6 +50,1 @@\n-  size_t initial_sz = initial_size();\n-  size_t max_sz     = max_size();\n-  size_t used       = used_in_bytes();\n-  size_t committed  = _g1mm->eden_space_committed();\n-\n-  return MemoryUsage(initial_sz, used, committed, max_sz);\n+  return _g1mm->eden_space_memory_usage(initial_size(), max_size());\n@@ -58,1 +53,1 @@\n-G1SurvivorPool::G1SurvivorPool(G1CollectedHeap* g1h) :\n+G1SurvivorPool::G1SurvivorPool(G1CollectedHeap* g1h, size_t initial_size) :\n@@ -61,2 +56,2 @@\n-                    g1h->g1mm()->survivor_space_committed(), \/* init_size *\/\n-                    _undefined_max,\n+                    initial_size,\n+                    MemoryUsage::undefined_size(),\n@@ -66,6 +61,1 @@\n-  size_t initial_sz = initial_size();\n-  size_t max_sz     = max_size();\n-  size_t used       = used_in_bytes();\n-  size_t committed  = _g1mm->survivor_space_committed();\n-\n-  return MemoryUsage(initial_sz, used, committed, max_sz);\n+  return _g1mm->survivor_space_memory_usage(initial_size(), max_size());\n@@ -74,1 +64,1 @@\n-G1OldGenPool::G1OldGenPool(G1CollectedHeap* g1h) :\n+G1OldGenPool::G1OldGenPool(G1CollectedHeap* g1h, size_t initial_size, size_t max_size) :\n@@ -77,2 +67,2 @@\n-                    g1h->g1mm()->old_space_committed(), \/* init_size *\/\n-                    g1h->g1mm()->old_gen_max(),\n+                    initial_size,\n+                    max_size,\n@@ -82,6 +72,1 @@\n-  size_t initial_sz = initial_size();\n-  size_t max_sz     = max_size();\n-  size_t used       = used_in_bytes();\n-  size_t committed  = _g1mm->old_space_committed();\n-\n-  return MemoryUsage(initial_sz, used, committed, max_sz);\n+  return _g1mm->old_gen_memory_usage(initial_size(), max_size());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MemoryPool.cpp","additions":12,"deletions":27,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-  const static size_t _undefined_max = (size_t) -1;\n@@ -70,8 +69,4 @@\n-  G1EdenPool(G1CollectedHeap* g1h);\n-\n-  size_t used_in_bytes() {\n-    return _g1mm->eden_space_used();\n-  }\n-  size_t max_size() const {\n-    return _undefined_max;\n-  }\n+  G1EdenPool(G1CollectedHeap* g1h, size_t initial_size);\n+\n+  size_t used_in_bytes() { return _g1mm->eden_space_used(); }\n+\n@@ -84,8 +79,4 @@\n-  G1SurvivorPool(G1CollectedHeap* g1h);\n-\n-  size_t used_in_bytes() {\n-    return _g1mm->survivor_space_used();\n-  }\n-  size_t max_size() const {\n-    return _undefined_max;\n-  }\n+  G1SurvivorPool(G1CollectedHeap* g1h, size_t initial_size);\n+\n+  size_t used_in_bytes() { return _g1mm->survivor_space_used(); }\n+\n@@ -98,8 +89,4 @@\n-  G1OldGenPool(G1CollectedHeap* g1h);\n-\n-  size_t used_in_bytes() {\n-    return _g1mm->old_space_used();\n-  }\n-  size_t max_size() const {\n-    return _g1mm->old_gen_max();\n-  }\n+  G1OldGenPool(G1CollectedHeap* g1h, size_t initial_size, size_t max_size);\n+\n+  size_t used_in_bytes() { return _g1mm->old_gen_used(); }\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MemoryPool.hpp","additions":12,"deletions":25,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"gc\/shared\/collectorCounters.hpp\"\n+#include \"gc\/g1\/g1MemoryPool.hpp\"\n@@ -32,0 +32,1 @@\n+#include \"services\/memoryPool.hpp\"\n@@ -33,6 +34,9 @@\n-G1GenerationCounters::G1GenerationCounters(G1MonitoringSupport* g1mm,\n-                                           const char* name,\n-                                           int ordinal, int spaces,\n-                                           size_t min_capacity,\n-                                           size_t max_capacity,\n-                                           size_t curr_capacity)\n+class G1GenerationCounters : public GenerationCounters {\n+protected:\n+  G1MonitoringSupport* _g1mm;\n+\n+public:\n+  G1GenerationCounters(G1MonitoringSupport* g1mm,\n+                       const char* name, int ordinal, int spaces,\n+                       size_t min_capacity, size_t max_capacity,\n+                       size_t curr_capacity)\n@@ -41,0 +45,1 @@\n+};\n@@ -42,4 +47,5 @@\n-\/\/ We pad the capacity three times given that the young generation\n-\/\/ contains three spaces (eden and two survivors).\n-G1YoungGenerationCounters::G1YoungGenerationCounters(G1MonitoringSupport* g1mm,\n-                                                     const char* name)\n+class G1YoungGenerationCounters : public G1GenerationCounters {\n+public:\n+  \/\/ We pad the capacity three times given that the young generation\n+  \/\/ contains three spaces (eden and two survivors).\n+  G1YoungGenerationCounters(G1MonitoringSupport* g1mm, const char* name, size_t max_size)\n@@ -47,5 +53,6 @@\n-               G1MonitoringSupport::pad_capacity(0, 3) \/* min_capacity *\/,\n-               G1MonitoringSupport::pad_capacity(g1mm->young_gen_max(), 3),\n-               G1MonitoringSupport::pad_capacity(0, 3) \/* curr_capacity *\/) {\n-  if (UsePerfData) {\n-    update_all();\n+                         G1MonitoringSupport::pad_capacity(0, 3) \/* min_capacity *\/,\n+                         G1MonitoringSupport::pad_capacity(max_size, 3),\n+                         G1MonitoringSupport::pad_capacity(0, 3) \/* curr_capacity *\/) {\n+    if (UsePerfData) {\n+      update_all();\n+    }\n@@ -53,1 +60,0 @@\n-}\n@@ -55,8 +61,4 @@\n-G1OldGenerationCounters::G1OldGenerationCounters(G1MonitoringSupport* g1mm,\n-                                                 const char* name)\n-  : G1GenerationCounters(g1mm, name, 1 \/* ordinal *\/, 1 \/* spaces *\/,\n-               G1MonitoringSupport::pad_capacity(0) \/* min_capacity *\/,\n-               G1MonitoringSupport::pad_capacity(g1mm->old_gen_max()),\n-               G1MonitoringSupport::pad_capacity(0) \/* curr_capacity *\/) {\n-  if (UsePerfData) {\n-    update_all();\n+  virtual void update_all() {\n+    size_t committed =\n+              G1MonitoringSupport::pad_capacity(_g1mm->young_gen_committed(), 3);\n+    _current_size->set_value(committed);\n@@ -64,1 +66,1 @@\n-}\n+};\n@@ -66,5 +68,11 @@\n-void G1YoungGenerationCounters::update_all() {\n-  size_t committed =\n-            G1MonitoringSupport::pad_capacity(_g1mm->young_gen_committed(), 3);\n-  _current_size->set_value(committed);\n-}\n+class G1OldGenerationCounters : public G1GenerationCounters {\n+public:\n+  G1OldGenerationCounters(G1MonitoringSupport* g1mm, const char* name, size_t max_size)\n+  : G1GenerationCounters(g1mm, name, 1 \/* ordinal *\/, 1 \/* spaces *\/,\n+                         G1MonitoringSupport::pad_capacity(0) \/* min_capacity *\/,\n+                         G1MonitoringSupport::pad_capacity(max_size),\n+                         G1MonitoringSupport::pad_capacity(0) \/* curr_capacity *\/) {\n+    if (UsePerfData) {\n+      update_all();\n+    }\n+  }\n@@ -72,5 +80,6 @@\n-void G1OldGenerationCounters::update_all() {\n-  size_t committed =\n-            G1MonitoringSupport::pad_capacity(_g1mm->old_gen_committed());\n-  _current_size->set_value(committed);\n-}\n+  virtual void update_all() {\n+    size_t committed =\n+              G1MonitoringSupport::pad_capacity(_g1mm->old_gen_committed());\n+    _current_size->set_value(committed);\n+  }\n+};\n@@ -80,0 +89,5 @@\n+  _incremental_memory_manager(\"G1 Young Generation\", \"end of minor GC\"),\n+  _full_gc_memory_manager(\"G1 Old Generation\", \"end of major GC\"),\n+  _eden_space_pool(NULL),\n+  _survivor_space_pool(NULL),\n+  _old_gen_pool(NULL),\n@@ -83,1 +97,2 @@\n-  _old_collection_counters(NULL),\n+  _young_gen_counters(NULL),\n+  _old_gen_counters(NULL),\n@@ -85,8 +100,6 @@\n-  _young_collection_counters(NULL),\n-  _eden_counters(NULL),\n-  _from_counters(NULL),\n-  _to_counters(NULL),\n-\n-  _overall_reserved(0),\n-  _overall_committed(0),    _overall_used(0),\n-  _young_region_num(0),\n+  _eden_space_counters(NULL),\n+  _from_space_counters(NULL),\n+  _to_space_counters(NULL),\n+\n+  _overall_committed(0),\n+  _overall_used(0),\n@@ -94,3 +107,7 @@\n-  _eden_committed(0),       _eden_used(0),\n-  _survivor_committed(0),   _survivor_used(0),\n-  _old_committed(0),        _old_used(0) {\n+  _old_gen_committed(0),\n+\n+  _eden_space_committed(0),\n+  _eden_space_used(0),\n+  _survivor_space_committed(0),\n+  _survivor_space_used(0),\n+  _old_gen_used(0) {\n@@ -98,1 +115,0 @@\n-  _overall_reserved = g1h->max_capacity();\n@@ -101,1 +117,1 @@\n-  \/\/ Counters for GC collections\n+  \/\/ Counters for garbage collections\n@@ -116,12 +132,0 @@\n-  \/\/ timer sampling for all counters supporting sampling only update the\n-  \/\/ used value.  See the take_sample() method.  G1 requires both used and\n-  \/\/ capacity updated so sampling is not currently used.  It might\n-  \/\/ be sufficient to update all counters in take_sample() even though\n-  \/\/ take_sample() only returns \"used\".  When sampling was used, there\n-  \/\/ were some anomolous values emitted which may have been the consequence\n-  \/\/ of not updating all values simultaneously (i.e., see the calculation done\n-  \/\/ in eden_space_used(), is it possible that the values used to\n-  \/\/ calculate either eden_used or survivor_used are being updated by\n-  \/\/ the collector when the sample is being done?).\n-  const bool sampled = false;\n-\n@@ -134,1 +138,1 @@\n-  _old_collection_counters = new G1OldGenerationCounters(this, \"old\");\n+  _old_gen_counters = new G1OldGenerationCounters(this, \"old\", _g1h->max_capacity());\n@@ -139,1 +143,1 @@\n-  _old_space_counters = new HSpaceCounters(_old_collection_counters->name_space(),\n+  _old_space_counters = new HSpaceCounters(_old_gen_counters->name_space(),\n@@ -141,2 +145,2 @@\n-    pad_capacity(overall_reserved()) \/* max_capacity *\/,\n-    pad_capacity(old_space_committed()) \/* init_capacity *\/);\n+    pad_capacity(g1h->max_capacity()) \/* max_capacity *\/,\n+    pad_capacity(_old_gen_committed) \/* init_capacity *\/);\n@@ -148,1 +152,1 @@\n-  _young_collection_counters = new G1YoungGenerationCounters(this, \"young\");\n+  _young_gen_counters = new G1YoungGenerationCounters(this, \"young\", _g1h->max_capacity());\n@@ -150,1 +154,1 @@\n-  const char* young_collection_name_space = _young_collection_counters->name_space();\n+  const char* young_collection_name_space = _young_gen_counters->name_space();\n@@ -154,1 +158,1 @@\n-  _eden_counters = new HSpaceCounters(young_collection_name_space,\n+  _eden_space_counters = new HSpaceCounters(young_collection_name_space,\n@@ -156,2 +160,2 @@\n-    pad_capacity(overall_reserved()) \/* max_capacity *\/,\n-    pad_capacity(eden_space_committed()) \/* init_capacity *\/);\n+    pad_capacity(g1h->max_capacity()) \/* max_capacity *\/,\n+    pad_capacity(_eden_space_committed) \/* init_capacity *\/);\n@@ -162,1 +166,1 @@\n-  _from_counters = new HSpaceCounters(young_collection_name_space,\n+  _from_space_counters = new HSpaceCounters(young_collection_name_space,\n@@ -166,0 +170,4 @@\n+  \/\/ Given that this survivor space is not used, we update it here\n+  \/\/ once to reflect that its used space is 0 so that we don't have to\n+  \/\/ worry about updating it again later.\n+  _from_space_counters->update_used(0);\n@@ -169,1 +177,1 @@\n-  _to_counters = new HSpaceCounters(young_collection_name_space,\n+  _to_space_counters = new HSpaceCounters(young_collection_name_space,\n@@ -171,2 +179,3 @@\n-    pad_capacity(overall_reserved()) \/* max_capacity *\/,\n-    pad_capacity(survivor_space_committed()) \/* init_capacity *\/);\n+    pad_capacity(g1h->max_capacity()) \/* max_capacity *\/,\n+    pad_capacity(_survivor_space_committed) \/* init_capacity *\/);\n+}\n@@ -174,6 +183,38 @@\n-  if (UsePerfData) {\n-    \/\/ Given that this survivor space is not used, we update it here\n-    \/\/ once to reflect that its used space is 0 so that we don't have to\n-    \/\/ worry about updating it again later.\n-    _from_counters->update_used(0);\n-  }\n+G1MonitoringSupport::~G1MonitoringSupport() {\n+  delete _eden_space_pool;\n+  delete _survivor_space_pool;\n+  delete _old_gen_pool;\n+}\n+\n+void G1MonitoringSupport::initialize_serviceability() {\n+  _eden_space_pool = new G1EdenPool(_g1h, _eden_space_committed);\n+  _survivor_space_pool = new G1SurvivorPool(_g1h, _survivor_space_committed);\n+  _old_gen_pool = new G1OldGenPool(_g1h, _old_gen_committed, _g1h->max_capacity());\n+\n+  _full_gc_memory_manager.add_pool(_eden_space_pool);\n+  _full_gc_memory_manager.add_pool(_survivor_space_pool);\n+  _full_gc_memory_manager.add_pool(_old_gen_pool);\n+\n+  _incremental_memory_manager.add_pool(_eden_space_pool);\n+  _incremental_memory_manager.add_pool(_survivor_space_pool);\n+  _incremental_memory_manager.add_pool(_old_gen_pool, false \/* always_affected_by_gc *\/);\n+}\n+\n+MemoryUsage G1MonitoringSupport::memory_usage() {\n+  MutexLockerEx x(MonitoringSupport_lock, Mutex::_no_safepoint_check_flag);\n+  return MemoryUsage(InitialHeapSize, _overall_used, _overall_committed, _g1h->max_capacity());\n+}\n+\n+GrowableArray<GCMemoryManager*> G1MonitoringSupport::memory_managers() {\n+  GrowableArray<GCMemoryManager*> memory_managers(2);\n+  memory_managers.append(&_incremental_memory_manager);\n+  memory_managers.append(&_full_gc_memory_manager);\n+  return memory_managers;\n+}\n+\n+GrowableArray<MemoryPool*> G1MonitoringSupport::memory_pools() {\n+  GrowableArray<MemoryPool*> memory_pools(3);\n+  memory_pools.append(_eden_space_pool);\n+  memory_pools.append(_survivor_space_pool);\n+  memory_pools.append(_old_gen_pool);\n+  return memory_pools;\n@@ -183,4 +224,4 @@\n-  \/\/ Recalculate all the sizes from scratch. We assume that this is\n-  \/\/ called at a point where no concurrent updates to the various\n-  \/\/ values we read here are possible (i.e., at a STW phase at the end\n-  \/\/ of a GC).\n+  assert_heap_locked_or_at_safepoint(true);\n+\n+  MutexLockerEx x(MonitoringSupport_lock, Mutex::_no_safepoint_check_flag);\n+  \/\/ Recalculate all the sizes from scratch.\n@@ -199,4 +240,3 @@\n-  _eden_used = (size_t) eden_list_length * HeapRegion::GrainBytes;\n-  _survivor_used = (size_t) survivor_list_length * HeapRegion::GrainBytes;\n-  _young_region_num = young_list_length;\n-  _old_used = subtract_up_to_zero(_overall_used, _eden_used + _survivor_used);\n+  _eden_space_used = (size_t) eden_list_length * HeapRegion::GrainBytes;\n+  _survivor_space_used = (size_t) survivor_list_length * HeapRegion::GrainBytes;\n+  _old_gen_used = subtract_up_to_zero(_overall_used, _eden_space_used + _survivor_space_used);\n@@ -205,2 +245,2 @@\n-  _survivor_committed = _survivor_used;\n-  _old_committed = HeapRegion::align_up_to_region_byte_size(_old_used);\n+  _survivor_space_committed = _survivor_space_used;\n+  _old_gen_committed = HeapRegion::align_up_to_region_byte_size(_old_gen_used);\n@@ -214,2 +254,2 @@\n-  assert(committed >= (_survivor_committed + _old_committed), \"sanity\");\n-  committed -= _survivor_committed + _old_committed;\n+  assert(committed >= (_survivor_space_committed + _old_gen_committed), \"sanity\");\n+  committed -= _survivor_space_committed + _old_gen_committed;\n@@ -218,1 +258,1 @@\n-  _eden_committed = (size_t) eden_list_max_length * HeapRegion::GrainBytes;\n+  _eden_space_committed = (size_t) eden_list_max_length * HeapRegion::GrainBytes;\n@@ -221,2 +261,2 @@\n-  _eden_committed = MIN2(_eden_committed, committed);\n-  committed -= _eden_committed;\n+  _eden_space_committed = MIN2(_eden_space_committed, committed);\n+  committed -= _eden_space_committed;\n@@ -225,1 +265,1 @@\n-  _old_committed += committed;\n+  _old_gen_committed += committed;\n@@ -227,1 +267,1 @@\n-  _young_gen_committed = _eden_committed + _survivor_committed;\n+  _young_gen_committed = _eden_space_committed + _survivor_space_committed;\n@@ -230,1 +270,1 @@\n-         (_eden_committed + _survivor_committed + _old_committed),\n+         (_eden_space_committed + _survivor_space_committed + _old_gen_committed),\n@@ -234,1 +274,1 @@\n-  _eden_used = MIN2(_eden_used, _eden_committed);\n+  _eden_space_used = MIN2(_eden_space_used, _eden_space_committed);\n@@ -238,17 +278,2 @@\n-  assert(_survivor_used <= _survivor_committed, \"post-condition\");\n-  assert(_old_used <= _old_committed, \"post-condition\");\n-}\n-\n-void G1MonitoringSupport::recalculate_eden_size() {\n-  \/\/ When a new eden region is allocated, only the eden_used size is\n-  \/\/ affected (since we have recalculated everything else at the last GC).\n-\n-  uint young_region_num = _g1h->young_regions_count();\n-  if (young_region_num > _young_region_num) {\n-    uint diff = young_region_num - _young_region_num;\n-    _eden_used += (size_t) diff * HeapRegion::GrainBytes;\n-    \/\/ Somewhat defensive: cap the eden used size to make sure it\n-    \/\/ never exceeds the committed size.\n-    _eden_used = MIN2(_eden_used, _eden_committed);\n-    _young_region_num = young_region_num;\n-  }\n+  assert(_survivor_space_used <= _survivor_space_committed, \"post-condition\");\n+  assert(_old_gen_used <= _old_gen_committed, \"post-condition\");\n@@ -260,10 +285,12 @@\n-    eden_counters()->update_capacity(pad_capacity(eden_space_committed()));\n-    eden_counters()->update_used(eden_space_used());\n-    \/\/ only the to survivor space (s1) is active, so we don't need to\n-    \/\/ update the counters for the from survivor space (s0)\n-    to_counters()->update_capacity(pad_capacity(survivor_space_committed()));\n-    to_counters()->update_used(survivor_space_used());\n-    old_space_counters()->update_capacity(pad_capacity(old_space_committed()));\n-    old_space_counters()->update_used(old_space_used());\n-    old_collection_counters()->update_all();\n-    young_collection_counters()->update_all();\n+    _eden_space_counters->update_capacity(pad_capacity(_eden_space_committed));\n+    _eden_space_counters->update_used(_eden_space_used);\n+   \/\/ only the \"to\" survivor space is active, so we don't need to\n+    \/\/ update the counters for the \"from\" survivor space\n+    _to_space_counters->update_capacity(pad_capacity(_survivor_space_committed));\n+    _to_space_counters->update_used(_survivor_space_used);\n+    _old_space_counters->update_capacity(pad_capacity(_old_gen_committed));\n+    _old_space_counters->update_used(_old_gen_used);\n+\n+    _young_gen_counters->update_all();\n+    _old_gen_counters->update_all();\n+\n@@ -276,1 +303,3 @@\n-  recalculate_eden_size();\n+  \/\/ Recalculate everything - this should be fast enough and we are sure that we do not\n+  \/\/ miss anything.\n+  recalculate_sizes();\n@@ -278,1 +307,1 @@\n-    eden_counters()->update_used(eden_space_used());\n+    _eden_space_counters->update_used(_eden_space_used);\n@@ -281,0 +310,33 @@\n+\n+MemoryUsage G1MonitoringSupport::eden_space_memory_usage(size_t initial_size, size_t max_size) {\n+  MutexLockerEx x(MonitoringSupport_lock, Mutex::_no_safepoint_check_flag);\n+\n+  return MemoryUsage(initial_size,\n+                     _eden_space_used,\n+                     _eden_space_committed,\n+                     max_size);\n+}\n+\n+MemoryUsage G1MonitoringSupport::survivor_space_memory_usage(size_t initial_size, size_t max_size) {\n+  MutexLockerEx x(MonitoringSupport_lock, Mutex::_no_safepoint_check_flag);\n+\n+  return MemoryUsage(initial_size,\n+                     _survivor_space_used,\n+                     _survivor_space_committed,\n+                     max_size);\n+}\n+\n+MemoryUsage G1MonitoringSupport::old_gen_memory_usage(size_t initial_size, size_t max_size) {\n+  MutexLockerEx x(MonitoringSupport_lock, Mutex::_no_safepoint_check_flag);\n+\n+  return MemoryUsage(initial_size,\n+                     _old_gen_used,\n+                     _old_gen_committed,\n+                     max_size);\n+}\n+\n+G1MonitoringScope::G1MonitoringScope(G1MonitoringSupport* g1mm, bool full_gc, bool all_memory_pools_affected) :\n+  _tcs(full_gc ? g1mm->_full_collection_counters : g1mm->_incremental_collection_counters),\n+  _tms(full_gc ? &g1mm->_full_gc_memory_manager : &g1mm->_incremental_memory_manager,\n+       G1CollectedHeap::heap()->gc_cause(), all_memory_pools_affected) {\n+}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonitoringSupport.cpp","additions":191,"deletions":129,"binary":false,"changes":320,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shared\/collectorCounters.hpp\"\n@@ -29,0 +30,3 @@\n+#include \"services\/memoryManager.hpp\"\n+#include \"services\/memoryService.hpp\"\n+#include \"runtime\/mutex.hpp\"\n@@ -33,0 +37,1 @@\n+class MemoryPool;\n@@ -119,0 +124,1 @@\n+  friend class G1MonitoringScope;\n@@ -122,0 +128,8 @@\n+  \/\/ java.lang.management MemoryManager and MemoryPool support\n+  GCMemoryManager _incremental_memory_manager;\n+  GCMemoryManager _full_gc_memory_manager;\n+\n+  MemoryPool* _eden_space_pool;\n+  MemoryPool* _survivor_space_pool;\n+  MemoryPool* _old_gen_pool;\n+\n@@ -132,1 +146,1 @@\n-  GenerationCounters*  _young_collection_counters;\n+  GenerationCounters*  _young_gen_counters;\n@@ -135,1 +149,1 @@\n-  GenerationCounters*  _old_collection_counters;\n+  GenerationCounters*  _old_gen_counters;\n@@ -140,1 +154,1 @@\n-  HSpaceCounters*      _eden_counters;\n+  HSpaceCounters*      _eden_space_counters;\n@@ -142,2 +156,2 @@\n-  HSpaceCounters*      _from_counters;\n-  HSpaceCounters*      _to_counters;\n+  HSpaceCounters*      _from_space_counters;\n+  HSpaceCounters*      _to_space_counters;\n@@ -150,1 +164,0 @@\n-  size_t _overall_reserved;\n@@ -154,1 +167,0 @@\n-  uint   _young_region_num;\n@@ -156,4 +168,6 @@\n-  size_t _eden_committed;\n-  size_t _eden_used;\n-  size_t _survivor_committed;\n-  size_t _survivor_used;\n+  size_t _old_gen_committed;\n+\n+  size_t _eden_space_committed;\n+  size_t _eden_space_used;\n+  size_t _survivor_space_committed;\n+  size_t _survivor_space_used;\n@@ -161,2 +175,1 @@\n-  size_t _old_committed;\n-  size_t _old_used;\n+  size_t _old_gen_used;\n@@ -181,1 +194,1 @@\n-  \/\/ Recalculate only what's necessary when a new eden region is allocated.\n+\n@@ -184,1 +197,1 @@\n- public:\n+public:\n@@ -186,0 +199,7 @@\n+  ~G1MonitoringSupport();\n+\n+  void initialize_serviceability();\n+\n+  MemoryUsage memory_usage();\n+  GrowableArray<GCMemoryManager*> memory_managers();\n+  GrowableArray<MemoryPool*> memory_pools();\n@@ -205,2 +225,1 @@\n-  \/\/ Recalculate only what's necessary when a new eden region is\n-  \/\/ allocated and update any jstat counters that need to be updated.\n+\n@@ -209,6 +228,0 @@\n-  CollectorCounters* incremental_collection_counters() {\n-    return _incremental_collection_counters;\n-  }\n-  CollectorCounters* full_collection_counters() {\n-    return _full_collection_counters;\n-  }\n@@ -218,10 +231,0 @@\n-  GenerationCounters* young_collection_counters() {\n-    return _young_collection_counters;\n-  }\n-  GenerationCounters* old_collection_counters() {\n-    return _old_collection_counters;\n-  }\n-  HSpaceCounters*      old_space_counters() { return _old_space_counters; }\n-  HSpaceCounters*      eden_counters() { return _eden_counters; }\n-  HSpaceCounters*      from_counters() { return _from_counters; }\n-  HSpaceCounters*      to_counters() { return _to_counters; }\n@@ -233,0 +236,1 @@\n+  \/\/ Values may not be consistent wrt to each other.\n@@ -234,16 +238,1 @@\n-  size_t overall_reserved()           { return _overall_reserved;     }\n-  size_t overall_committed()          { return _overall_committed;    }\n-  size_t overall_used()               { return _overall_used;         }\n-\n-  size_t young_gen_committed()        { return _young_gen_committed;  }\n-  size_t young_gen_max()              { return overall_reserved();    }\n-  size_t eden_space_committed()       { return _eden_committed;       }\n-  size_t eden_space_used()            { return _eden_used;            }\n-  size_t survivor_space_committed()   { return _survivor_committed;   }\n-  size_t survivor_space_used()        { return _survivor_used;        }\n-\n-  size_t old_gen_committed()          { return old_space_committed(); }\n-  size_t old_gen_max()                { return overall_reserved();    }\n-  size_t old_space_committed()        { return _old_committed;        }\n-  size_t old_space_used()             { return _old_used;             }\n-};\n+  size_t young_gen_committed()        { return _young_gen_committed; }\n@@ -251,3 +240,2 @@\n-class G1GenerationCounters: public GenerationCounters {\n-protected:\n-  G1MonitoringSupport* _g1mm;\n+  size_t eden_space_used()            { return _eden_space_used; }\n+  size_t survivor_space_used()        { return _survivor_space_used; }\n@@ -255,6 +243,2 @@\n-public:\n-  G1GenerationCounters(G1MonitoringSupport* g1mm,\n-                       const char* name, int ordinal, int spaces,\n-                       size_t min_capacity, size_t max_capacity,\n-                       size_t curr_capacity);\n-};\n+  size_t old_gen_committed()          { return _old_gen_committed; }\n+  size_t old_gen_used()               { return _old_gen_used; }\n@@ -262,4 +246,6 @@\n-class G1YoungGenerationCounters: public G1GenerationCounters {\n-public:\n-  G1YoungGenerationCounters(G1MonitoringSupport* g1mm, const char* name);\n-  virtual void update_all();\n+  \/\/ Monitoring support for MemoryPools. Values in the returned MemoryUsage are\n+  \/\/ guaranteed to be consistent with each other.\n+  MemoryUsage eden_space_memory_usage(size_t initial_size, size_t max_size);\n+  MemoryUsage survivor_space_memory_usage(size_t initial_size, size_t max_size);\n+\n+  MemoryUsage old_gen_memory_usage(size_t initial_size, size_t max_size);\n@@ -268,1 +254,4 @@\n-class G1OldGenerationCounters: public G1GenerationCounters {\n+\/\/ Scope object for java.lang.management support.\n+class G1MonitoringScope : public StackObj {\n+  TraceCollectorStats _tcs;\n+  TraceMemoryManagerStats _tms;\n@@ -270,2 +259,1 @@\n-  G1OldGenerationCounters(G1MonitoringSupport* g1mm, const char* name);\n-  virtual void update_all();\n+  G1MonitoringScope(G1MonitoringSupport* g1mm, bool full_gc, bool all_memory_pools_affected);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonitoringSupport.hpp","additions":53,"deletions":65,"binary":false,"changes":118,"status":"modified"},{"patch":"@@ -61,6 +61,6 @@\n-  nonstatic_field(G1MonitoringSupport, _eden_committed,     size_t)           \\\n-  nonstatic_field(G1MonitoringSupport, _eden_used,          size_t)           \\\n-  nonstatic_field(G1MonitoringSupport, _survivor_committed, size_t)           \\\n-  nonstatic_field(G1MonitoringSupport, _survivor_used,      size_t)           \\\n-  nonstatic_field(G1MonitoringSupport, _old_committed,      size_t)           \\\n-  nonstatic_field(G1MonitoringSupport, _old_used,           size_t)           \\\n+  nonstatic_field(G1MonitoringSupport, _eden_space_committed,     size_t)     \\\n+  nonstatic_field(G1MonitoringSupport, _eden_space_used,          size_t)     \\\n+  nonstatic_field(G1MonitoringSupport, _survivor_space_committed, size_t)     \\\n+  nonstatic_field(G1MonitoringSupport, _survivor_space_used,      size_t)     \\\n+  nonstatic_field(G1MonitoringSupport, _old_gen_committed,        size_t)     \\\n+  nonstatic_field(G1MonitoringSupport, _old_gen_used,             size_t)     \\\n","filename":"src\/hotspot\/share\/gc\/g1\/vmStructs_g1.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -331,0 +331,5 @@\n+MemoryUsage CollectedHeap::memory_usage() {\n+  return MemoryUsage(InitialHeapSize, used(), capacity(), max_capacity());\n+}\n+\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"services\/memoryUsage.hpp\"\n@@ -439,0 +440,1 @@\n+  virtual MemoryUsage memory_usage();\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,0 +91,1 @@\n+Mutex*   MonitoringSupport_lock       = NULL;\n@@ -227,0 +228,2 @@\n+\n+    def(MonitoringSupport_lock     , PaddedMutex  , native   ,   true,  Monitor::_safepoint_check_never);      \/\/ used for serviceability monitoring support\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -97,0 +97,1 @@\n+extern Mutex*   MonitoringSupport_lock;          \/\/ Protects updates to the serviceability memory pools.\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -712,21 +712,1 @@\n-  \/\/ Calculate the memory usage\n-  size_t total_init = 0;\n-  size_t total_used = 0;\n-  size_t total_committed = 0;\n-  size_t total_max = 0;\n-  bool   has_undefined_init_size = false;\n-  bool   has_undefined_max_size = false;\n-\n-  for (int i = 0; i < MemoryService::num_memory_pools(); i++) {\n-    MemoryPool* pool = MemoryService::get_memory_pool(i);\n-    if ((heap && pool->is_heap()) || (!heap && pool->is_non_heap())) {\n-      MemoryUsage u = pool->get_memory_usage();\n-      total_used += u.used();\n-      total_committed += u.committed();\n-\n-      if (u.init_size() == (size_t)-1) {\n-        has_undefined_init_size = true;\n-      }\n-      if (!has_undefined_init_size) {\n-        total_init += u.init_size();\n-      }\n+  MemoryUsage usage;\n@@ -734,5 +714,31 @@\n-      if (u.max_size() == (size_t)-1) {\n-        has_undefined_max_size = true;\n-      }\n-      if (!has_undefined_max_size) {\n-        total_max += u.max_size();\n+  if (heap) {\n+    usage = Universe::heap()->memory_usage();\n+  } else {\n+    \/\/ Calculate the memory usage by summing up the pools.\n+    size_t total_init = 0;\n+    size_t total_used = 0;\n+    size_t total_committed = 0;\n+    size_t total_max = 0;\n+    bool   has_undefined_init_size = false;\n+    bool   has_undefined_max_size = false;\n+\n+    for (int i = 0; i < MemoryService::num_memory_pools(); i++) {\n+      MemoryPool* pool = MemoryService::get_memory_pool(i);\n+      if (pool->is_non_heap()) {\n+        MemoryUsage u = pool->get_memory_usage();\n+        total_used += u.used();\n+        total_committed += u.committed();\n+\n+        if (u.init_size() == MemoryUsage::undefined_size()) {\n+          has_undefined_init_size = true;\n+        }\n+        if (!has_undefined_init_size) {\n+          total_init += u.init_size();\n+        }\n+\n+        if (u.max_size() == MemoryUsage::undefined_size()) {\n+          has_undefined_max_size = true;\n+        }\n+        if (!has_undefined_max_size) {\n+          total_max += u.max_size();\n+        }\n@@ -741,1 +747,0 @@\n-  }\n@@ -743,8 +748,8 @@\n-  \/\/ if any one of the memory pool has undefined init_size or max_size,\n-  \/\/ set it to -1\n-  if (has_undefined_init_size) {\n-    total_init = (size_t)-1;\n-  }\n-  if (has_undefined_max_size) {\n-    total_max = (size_t)-1;\n-  }\n+    \/\/ if any one of the memory pool has undefined init_size or max_size,\n+    \/\/ set it to MemoryUsage::undefined_size()\n+    if (has_undefined_init_size) {\n+      total_init = MemoryUsage::undefined_size();\n+    }\n+    if (has_undefined_max_size) {\n+      total_max = MemoryUsage::undefined_size();\n+    }\n@@ -752,4 +757,2 @@\n-  MemoryUsage usage((heap ? InitialHeapSize : total_init),\n-                    total_used,\n-                    total_committed,\n-                    (heap ? Universe::heap()->max_capacity() : total_max));\n+    usage = MemoryUsage(total_init, total_used, total_committed, total_max);\n+  }\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":42,"deletions":39,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -88,0 +88,2 @@\n+  virtual ~MemoryPool() { }\n+\n","filename":"src\/hotspot\/share\/services\/memoryPool.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,12 +40,12 @@\n-    \/\/ size_t _eden_committed;\n-    static private CIntegerField edenCommittedField;\n-    \/\/ size_t _eden_used;\n-    static private CIntegerField edenUsedField;\n-    \/\/ size_t _survivor_committed;\n-    static private CIntegerField survivorCommittedField;\n-    \/\/ size_t _survivor_used;\n-    static private CIntegerField survivorUsedField;\n-    \/\/ size_t _old_committed;\n-    static private CIntegerField oldCommittedField;\n-    \/\/ size_t _old_used;\n-    static private CIntegerField oldUsedField;\n+    \/\/ size_t _eden_space_committed;\n+    static private CIntegerField edenSpaceCommittedField;\n+    \/\/ size_t _eden_space_used;\n+    static private CIntegerField edenSpaceUsedField;\n+    \/\/ size_t _survivor_space_committed;\n+    static private CIntegerField survivorSpaceCommittedField;\n+    \/\/ size_t _survivor_space_used;\n+    static private CIntegerField survivorSpaceUsedField;\n+    \/\/ size_t _old_gen_committed;\n+    static private CIntegerField oldGenCommittedField;\n+    \/\/ size_t _old_gen_used;\n+    static private CIntegerField oldGenUsedField;\n@@ -64,6 +64,6 @@\n-        edenCommittedField = type.getCIntegerField(\"_eden_committed\");\n-        edenUsedField = type.getCIntegerField(\"_eden_used\");\n-        survivorCommittedField = type.getCIntegerField(\"_survivor_committed\");\n-        survivorUsedField = type.getCIntegerField(\"_survivor_used\");\n-        oldCommittedField = type.getCIntegerField(\"_old_committed\");\n-        oldUsedField = type.getCIntegerField(\"_old_used\");\n+        edenSpaceCommittedField = type.getCIntegerField(\"_eden_space_committed\");\n+        edenSpaceUsedField = type.getCIntegerField(\"_eden_space_used\");\n+        survivorSpaceCommittedField = type.getCIntegerField(\"_survivor_space_committed\");\n+        survivorSpaceUsedField = type.getCIntegerField(\"_survivor_space_used\");\n+        oldGenCommittedField = type.getCIntegerField(\"_old_gen_committed\");\n+        oldGenUsedField = type.getCIntegerField(\"_old_gen_used\");\n@@ -72,2 +72,2 @@\n-    public long edenCommitted() {\n-        return edenCommittedField.getValue(addr);\n+    public long edenSpaceCommitted() {\n+        return edenSpaceCommittedField.getValue(addr);\n@@ -76,2 +76,2 @@\n-    public long edenUsed() {\n-        return edenUsedField.getValue(addr);\n+    public long edenSpaceUsed() {\n+        return edenSpaceUsedField.getValue(addr);\n@@ -80,2 +80,2 @@\n-    public long edenRegionNum() {\n-        return edenUsed() \/ HeapRegion.grainBytes();\n+    public long edenSpaceRegionNum() {\n+        return edenSpaceUsed() \/ HeapRegion.grainBytes();\n@@ -84,2 +84,2 @@\n-    public long survivorCommitted() {\n-        return survivorCommittedField.getValue(addr);\n+    public long survivorSpaceCommitted() {\n+        return survivorSpaceCommittedField.getValue(addr);\n@@ -88,2 +88,2 @@\n-    public long survivorUsed() {\n-        return survivorUsedField.getValue(addr);\n+    public long survivorSpaceUsed() {\n+        return survivorSpaceUsedField.getValue(addr);\n@@ -92,2 +92,2 @@\n-    public long survivorRegionNum() {\n-        return survivorUsed() \/ HeapRegion.grainBytes();\n+    public long survivorSpaceRegionNum() {\n+        return survivorSpaceUsed() \/ HeapRegion.grainBytes();\n@@ -96,2 +96,2 @@\n-    public long oldCommitted() {\n-        return oldCommittedField.getValue(addr);\n+    public long oldGenCommitted() {\n+        return oldGenCommittedField.getValue(addr);\n@@ -100,2 +100,2 @@\n-    public long oldUsed() {\n-        return oldUsedField.getValue(addr);\n+    public long oldGenUsed() {\n+        return oldGenUsedField.getValue(addr);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/G1MonitoringSupport.java","additions":34,"deletions":34,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -249,2 +249,2 @@\n-      long edenRegionNum = g1mm.edenRegionNum();\n-      long survivorRegionNum = g1mm.survivorRegionNum();\n+      long edenSpaceRegionNum = g1mm.edenSpaceRegionNum();\n+      long survivorSpaceRegionNum = g1mm.survivorSpaceRegionNum();\n@@ -253,1 +253,1 @@\n-      long oldRegionNum = oldSet.length() + humongousSet.length();\n+      long oldGenRegionNum = oldSet.length() + humongousSet.length();\n@@ -257,6 +257,6 @@\n-      printG1Space(\"Eden Space:\", edenRegionNum,\n-                   g1mm.edenUsed(), g1mm.edenCommitted());\n-      printG1Space(\"Survivor Space:\", survivorRegionNum,\n-                   g1mm.survivorUsed(), g1mm.survivorCommitted());\n-      printG1Space(\"G1 Old Generation:\", oldRegionNum,\n-                   g1mm.oldUsed(), g1mm.oldCommitted());\n+      printG1Space(\"Eden Space:\", edenSpaceRegionNum,\n+              g1mm.edenSpaceUsed(), g1mm.edenSpaceCommitted());\n+      printG1Space(\"Survivor Space:\", survivorSpaceRegionNum,\n+              g1mm.survivorSpaceUsed(), g1mm.survivorSpaceCommitted());\n+      printG1Space(\"G1 Old Generation:\", oldGenRegionNum,\n+              g1mm.oldGenUsed(), g1mm.oldGenCommitted());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/HeapSummary.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}