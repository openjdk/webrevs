{"files":[{"patch":"@@ -0,0 +1,124 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4774532\n+  @summary tests that DropTargetDragEvent.getDropAction() returns correct value\n+           after DropTargetDragEvent.rejectDrag()\n+  @key headful\n+  @run main RejectDragDropActionTest\n+*\/\n+\n+import java.awt.AWTException;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragGestureRecognizer;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetAdapter;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.InputEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\n+public class RejectDragDropActionTest {\n+\n+    private static volatile boolean incorrectActionDetected = false;\n+\n+    private static final int FRAME_ACTIVATION_TIMEOUT = 3000;\n+\n+    private static Frame frame;\n+    private static DragSource ds;\n+    private static DragGestureListener dgl;\n+    private static DragGestureRecognizer dgr;\n+    private final DropTargetListener dtl = new DropTargetAdapter() {\n+            public void dragEnter(DropTargetDragEvent dtde) {\n+                dtde.rejectDrag();\n+            }\n+            public void dragOver(DropTargetDragEvent dtde) {\n+                if (dtde.getDropAction() == DnDConstants.ACTION_NONE) {\n+                    incorrectActionDetected = true;\n+                }\n+            }\n+            public void drop(DropTargetDropEvent dtde) {\n+                dtde.rejectDrop();\n+            }\n+        };\n+    private final DropTarget dt = new DropTarget(frame, dtl);\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        EventQueue.invokeAndWait(() -> {\n+            frame = new Frame(\"RejectDragDropActionTest\");\n+            ds = DragSource.getDefaultDragSource();\n+            dgl = dge -> dge.startDrag(null, new StringSelection(\"OOKK\"));\n+            dgr = ds.createDefaultDragGestureRecognizer(frame, DnDConstants.ACTION_COPY, dgl);\n+            frame.setBounds(100, 100, 200, 200);\n+            frame.setVisible(true);\n+        });\n+\n+        try {\n+            Robot robot = new Robot();\n+            robot.waitForIdle();\n+            robot.delay(FRAME_ACTIVATION_TIMEOUT);\n+\n+            Point startPoint = frame.getLocationOnScreen();\n+            Point endPoint = new Point(startPoint);\n+            startPoint.translate(50, 50);\n+            endPoint.translate(150, 150);\n+\n+            robot.mouseMove(startPoint.x, startPoint.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            for (Point p = new Point(startPoint); !p.equals(endPoint);\n+                 p.translate(sign(endPoint.x - p.x),\n+                         sign(endPoint.y - p.y))) {\n+                robot.mouseMove(p.x, p.y);\n+                robot.delay(50);\n+            }\n+\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+\n+        if (incorrectActionDetected) {\n+            throw new RuntimeException(\"User action reported incorrectly.\");\n+        }\n+    }\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/RejectDragDropActionTest.java","additions":124,"deletions":0,"binary":false,"changes":124,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4530216\n+  @summary tests that DragSourceListeners are properly removed\n+  @key headful\n+  @run main RemoveDragSourceListenerTest\n+*\/\n+\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceAdapter;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DragSourceMotionListener;\n+\n+\n+public class RemoveDragSourceListenerTest {\n+    public static void main(String[] args) {\n+        class TestDragSourceAdapter extends DragSourceAdapter {}\n+\n+        final DragSource dragSource = DragSource.getDefaultDragSource();\n+\n+        final DragSourceAdapter listeners[] = {\n+                new TestDragSourceAdapter(),\n+                new TestDragSourceAdapter(),\n+                new TestDragSourceAdapter() \/\/ should be three or more listeners\n+        };\n+\n+        for (int i = 0; i < listeners.length; i++) {\n+            dragSource.addDragSourceListener(listeners[i]);\n+        }\n+\n+        DragSourceListener[] dragSourceListeners =\n+                dragSource.getDragSourceListeners();\n+\n+        if (dragSourceListeners.length != listeners.length) {\n+            throw new RuntimeException(\"Unexpected length: \" +\n+                    dragSourceListeners.length);\n+        }\n+\n+        for (int i = 0; i < listeners.length; i++) {\n+            dragSource.removeDragSourceListener(listeners[i]);\n+        }\n+\n+        for (int i = 0; i < listeners.length; i++) {\n+            dragSource.addDragSourceMotionListener(listeners[i]);\n+        }\n+\n+        DragSourceMotionListener[] dragSourceMotionListeners =\n+                dragSource.getDragSourceMotionListeners();\n+\n+        if (dragSourceMotionListeners.length != listeners.length) {\n+            throw new RuntimeException(\"Unexpected length: \" +\n+                    dragSourceMotionListeners.length);\n+        }\n+\n+        for (int i = 0; i < listeners.length; i++) {\n+            dragSource.removeDragSourceMotionListener(listeners[i]);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/RemoveDragSourceListenerTest.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4411368\n+  @summary tests the app doesn't crash if the child drop target is removed\n+           after the parent drop target is removed\n+  @key headful\n+  @run main RemoveParentChildDropTargetTest\n+*\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetAdapter;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\n+public class RemoveParentChildDropTargetTest {\n+\n+    static Frame frame;\n+    static Panel panel;\n+    static Label label;\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        EventQueue.invokeAndWait(() -> {\n+            frame = new Frame(\"RemoveParentChildDropTargetTest\");\n+            panel = new Panel();\n+            label = new Label(\"Label\");\n+            panel.add(label);\n+            frame.add(panel);\n+            frame.pack();\n+\n+            panel.setDropTarget(new DropTarget(panel, new DropTargetAdapter() {\n+                public void drop(DropTargetDropEvent dtde) {}\n+            }));\n+            label.setDropTarget(new DropTarget(label, new DropTargetAdapter() {\n+                public void drop(DropTargetDropEvent dtde) {}\n+            }));\n+            panel.setDropTarget(null);\n+            frame.setVisible(true);\n+\n+            label.setDropTarget(null);\n+        });\n+\n+        EventQueue.invokeAndWait(() -> {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/RemoveParentChildDropTargetTest.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,193 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4484572 4645584\n+  @summary verifies that showing a modal dialog during the drag operation\n+           in the same JVM doesn't cause hang\n+  @key headful\n+  @run main SameJVMModalDialogDeadlockTest\n+*\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.AWTException;\n+import java.awt.Component;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceAdapter;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\n+public class SameJVMModalDialogDeadlockTest implements AWTEventListener {\n+\n+    Frame frame;\n+    boolean shown = false;\n+    boolean finished = false;\n+\n+    final DragSource dragSource = DragSource.getDefaultDragSource();\n+    final Transferable transferable = new StringSelection(\"TEXT\");\n+    final DragSourceAdapter dragSourceAdapter = new DragSourceAdapter() {\n+        public void dragDropEnd(DragSourceDropEvent dsde) {\n+            finished = true;\n+        }\n+        public void dragMouseMoved(DragSourceDragEvent dsde) {\n+            if (shown) {\n+                return;\n+            }\n+\n+            shown = true;\n+            final Dialog d = new Dialog(frame, \"Dialog\");\n+            d.setModal(true);\n+\n+            Runnable r1 = () -> d.setVisible(true);\n+            new Thread(r1).start();\n+        }\n+    };\n+    final DragGestureListener dragGestureListener = dge ->\n+            dge.startDrag(null, transferable);\n+\n+    static final Object SYNC_LOCK = new Object();\n+    static final int FRAME_ACTIVATION_TIMEOUT = 3000;\n+    static final int DROP_COMPLETION_TIMEOUT = 5000;\n+    static final int MOUSE_RELEASE_TIMEOUT = 1000;\n+\n+    Component clickedComponent = null;\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        SameJVMModalDialogDeadlockTest sameJVMModalDialogDeadlockTest =\n+                new SameJVMModalDialogDeadlockTest();\n+        EventQueue.invokeAndWait(sameJVMModalDialogDeadlockTest::init);\n+        sameJVMModalDialogDeadlockTest.start();\n+    }\n+\n+    public void init() {\n+        frame = new Frame(\"SameJVMModalDialogDeadlockTest\");\n+        frame.setTitle(\"Test frame\");\n+        frame.setBounds(100, 100, 200, 200);\n+        dragSource.createDefaultDragGestureRecognizer(frame,\n+                DnDConstants.ACTION_COPY_OR_MOVE, dragGestureListener);\n+\n+        dragSource.addDragSourceMotionListener(dragSourceAdapter);\n+        dragSource.addDragSourceListener(dragSourceAdapter);\n+\n+        frame.getToolkit().addAWTEventListener(this, AWTEvent.MOUSE_EVENT_MASK);\n+        frame.setVisible(true);\n+    }\n+\n+    public void start() throws AWTException, InterruptedException,\n+            InvocationTargetException {\n+        try {\n+            final Robot robot = new Robot();\n+            robot.waitForIdle();\n+            robot.delay(FRAME_ACTIVATION_TIMEOUT);\n+\n+            final Point srcPoint = frame.getLocationOnScreen();\n+            Dimension d = frame.getSize();\n+            srcPoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+            if (!pointInComponent(robot, srcPoint, frame)) {\n+                System.err.println(\"WARNING: Couldn't locate source frame.\");\n+                return;\n+            }\n+\n+            final Point dstPoint = new Point(srcPoint);\n+            dstPoint.translate(d.width \/ 4, d.height \/ 4);\n+\n+            robot.mouseMove(srcPoint.x, srcPoint.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            for (;!srcPoint.equals(dstPoint);\n+                 srcPoint.translate(sign(dstPoint.x - srcPoint.x),\n+                         sign(dstPoint.y - srcPoint.y))) {\n+                robot.mouseMove(srcPoint.x, srcPoint.y);\n+                robot.delay(50);\n+            }\n+\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            robot.delay(DROP_COMPLETION_TIMEOUT);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+\n+        if (!finished) {\n+            throw new RuntimeException(\"DnD not completed\");\n+        }\n+    }\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+\n+    public void reset() {\n+        clickedComponent = null;\n+    }\n+\n+    public void eventDispatched(AWTEvent e) {\n+        if (e.getID() == MouseEvent.MOUSE_RELEASED) {\n+            clickedComponent = (Component)e.getSource();\n+            synchronized (SYNC_LOCK) {\n+                SYNC_LOCK.notifyAll();\n+            }\n+        }\n+    }\n+\n+    boolean pointInComponent(Robot robot, Point p, Component comp)\n+      throws InterruptedException {\n+        robot.waitForIdle();\n+        reset();\n+        robot.mouseMove(p.x, p.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        synchronized (SYNC_LOCK) {\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            SYNC_LOCK.wait(MOUSE_RELEASE_TIMEOUT);\n+        }\n+\n+        Component c = clickedComponent;\n+\n+        while (c != null && c != comp) {\n+            c = c.getParent();\n+        }\n+\n+        return c == comp;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/SameJVMModalDialogDeadlockTest.java","additions":193,"deletions":0,"binary":false,"changes":193,"status":"added"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4187912\n+  @summary Test that incorrectly written DnD code cannot hang the app\n+  @key headful\n+  @run main SkipDropCompleteTest\n+*\/\n+\n+import java.awt.AWTException;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\n+public class SkipDropCompleteTest {\n+    SourceFrame sourceFrame;\n+    TargetFrame targetFrame;\n+    Point sourceLoc;\n+    Point targetLoc;\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        SkipDropCompleteTest skipDropCompleteTest = new SkipDropCompleteTest();\n+        EventQueue.invokeAndWait(skipDropCompleteTest::init);\n+        skipDropCompleteTest.start();\n+    }\n+\n+    public void init() {\n+        sourceFrame = new SourceFrame();\n+        targetFrame = new TargetFrame();\n+\n+        sourceLoc = sourceFrame.getLocation();\n+        Dimension sourceSize = sourceFrame.getSize();\n+        sourceLoc.x += sourceSize.width \/ 2;\n+        sourceLoc.y += sourceSize.height \/ 2;\n+\n+        targetLoc = targetFrame.getLocation();\n+        Dimension targetSize = targetFrame.getSize();\n+        targetLoc.x += targetSize.width \/ 2;\n+        targetLoc.y += targetSize.height \/ 2;\n+    }\n+\n+    public void start() throws AWTException, InterruptedException,\n+            InvocationTargetException {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.delay(1000);\n+            robot.mouseMove(sourceLoc.x, sourceLoc.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            for (;!sourceLoc.equals(targetLoc);\n+                 sourceLoc.translate(sign(targetLoc.x - sourceLoc.x),\n+                                     sign(targetLoc.y - sourceLoc.y))) {\n+                robot.mouseMove(sourceLoc.x, sourceLoc.y);\n+                Thread.sleep(10);\n+            }\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (sourceFrame != null) {\n+                    sourceFrame.dispose();\n+                }\n+                if (targetFrame != null) {\n+                    targetFrame.dispose();\n+                }\n+            });\n+        }\n+\n+        System.out.println(\"test passed\");\n+    }\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/SkipDropCompleteTest\/SkipDropCompleteTest.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Frame;\n+import java.awt.TextArea;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+\n+public class SourceFrame extends Frame\n+        implements DragSourceListener,DragGestureListener {\n+\n+    DragSource dragSource;\n+    TransferableObject transferableObject;\n+        TextArea textArea;\n+\n+    public SourceFrame() {\n+\n+        super(\"SkipDropCompleteTest Source Frame\");\n+\n+        dragSource = new DragSource();\n+        textArea = new TextArea(\"Drag the Text from the SourceFrame\\n\" +\n+            \"and drop it on the TextArea in the\\n\" +\n+            \"Target Frame.\\n\" +\n+            \"Try to do some operation, like closing\\n\" +\n+            \"of the frame.\\n\"+\n+            \"See whether the application hangs.\");\n+        add(textArea);\n+\n+        dragSource.createDefaultDragGestureRecognizer(textArea, DnDConstants.ACTION_COPY, this);\n+\n+        addWindowListener(new WindowAdapter() {\n+                public void windowClosing(WindowEvent e) {\n+                        System.exit(0);\n+                }\n+        });\n+\n+        setSize(250,250);\n+                setLocation(50,50);\n+                setBackground(Color.red);\n+                this.setVisible(true);\n+    }\n+\n+    public void dragEnter(DragSourceDragEvent dsde) { }\n+\n+    public void dragOver(DragSourceDragEvent dsde) { }\n+\n+    public void dragExit(DragSourceEvent dse) { }\n+\n+    public void dropActionChanged(DragSourceDragEvent dsde ) { }\n+\n+    public void dragDropEnd(DragSourceDropEvent dsde) { }\n+\n+    public void dragGestureRecognized(DragGestureEvent dge) {\n+        transferableObject = new TransferableObject(textArea.getText());\n+        dragSource.startDrag(dge, DragSource.DefaultCopyDrop,\n+                transferableObject, this);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/SkipDropCompleteTest\/SourceFrame.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.TextArea;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+\n+public class TargetFrame extends Frame implements DropTargetListener{\n+\n+    DropTarget dropTarget;\n+    TextArea textArea;\n+\n+    public TargetFrame() {\n+        super(\"SkipDropCompleteTest Target Frame\");\n+        textArea = new TextArea();\n+        add(textArea);\n+\n+        addWindowListener(new WindowAdapter() {\n+                public void windowClosing(WindowEvent e) {\n+                        System.exit(0);\n+                }\n+        });\n+\n+        setSize(250,250);\n+        setLocation(350,50);\n+        this.setVisible(true);\n+\n+        dropTarget = new DropTarget(textArea,this);\n+    }\n+\n+    public void dragEnter(DropTargetDragEvent dtde) {\n+                dtde.acceptDrag(DnDConstants.ACTION_COPY);\n+        }\n+\n+    public void dragOver(DropTargetDragEvent dtde) {}\n+\n+    public void dragExit(DropTargetEvent dte) { }\n+\n+    public void dropActionChanged(DropTargetDragEvent dtde ) {}\n+\n+    public void drop(DropTargetDropEvent dtde) {\n+        try {\n+            Transferable transferable = dtde.getTransferable();\n+            dtde.acceptDrop(DnDConstants.ACTION_MOVE);\n+\n+            String str = (String)transferable.getTransferData(TransferableObject.stringFlavor);\n+            textArea.setText(str);\n+        } catch (Exception ufException ) {\n+                  ufException.printStackTrace();\n+                  System.err.println( \"Exception\" + ufException.getMessage());\n+                  dtde.rejectDrop();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/SkipDropCompleteTest\/TargetFrame.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.util.Vector;\n+\n+\n+public class TransferableObject implements Transferable {\n+    private Object data;\n+    private String stringText;\n+    public static DataFlavor stringFlavor,localObjectFlavor;\n+\n+    static\n+    {\n+        \/\/ Data Flavor for Java Local Object\n+        try {\n+                localObjectFlavor = new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType);\n+                stringFlavor = DataFlavor.stringFlavor;\n+        }\n+        catch (ClassNotFoundException e) {\n+                System.out.println(\"Exception \" + e);\n+        }\n+    }\n+\n+    DataFlavor[] dfs;\n+\n+    public TransferableObject(Object data) {\n+        super();\n+        Vector v = new Vector();\n+            if(data instanceof String) {\n+                v.addElement(stringFlavor);\n+                stringText = (String)data;\n+            }\n+            else {\n+                v.addElement(localObjectFlavor);\n+            }\n+\n+            dfs = new DataFlavor[v.size()];\n+        v.copyInto(dfs);\n+\n+        this.data = data;\n+    }\n+\n+    \/\/ Retrieve the data based on the flavor\n+    public Object getTransferData(DataFlavor flavor)\n+        throws UnsupportedFlavorException {\n+\n+        System.out.println(\"\\n ***************************************\");\n+        System.out.println(\" The Flavor passed to retrieve the data : \"\n+                + flavor.getHumanPresentableName());\n+        System.out.println(\" The Flavors supported\");\n+        for (int j = 0; j < dfs.length; j++)\n+            System.out.println(\" Flavor : \" + dfs[j].getHumanPresentableName());\n+\n+        System.out.println(\" ***************************************\\n\");\n+\n+        if (!isDataFlavorSupported(flavor)) {\n+            throw new UnsupportedFlavorException(flavor);\n+        } else if (flavor.equals(stringFlavor)) {\n+            return stringText;\n+        } else if (localObjectFlavor.isMimeTypeEqual(flavor)) {\n+            return data;\n+        }\n+        return null;\n+    }\n+\n+    public DataFlavor[] getTransferDataFlavors(){\n+        return dfs;\n+    }\n+\n+    public boolean isDataFlavorSupported(DataFlavor flavor) {\n+        for (int i = 0 ; i < dfs.length; i++) {\n+            if (dfs[i].match(flavor)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/SkipDropCompleteTest\/TransferableObject.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"}]}