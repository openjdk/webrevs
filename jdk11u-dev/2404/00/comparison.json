{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,0 @@\n-import org.netbeans.jemmy.ComponentChooser;\n-import org.netbeans.jemmy.image.StrictImageComparator;\n@@ -31,1 +29,0 @@\n-import org.testng.annotations.BeforeClass;\n@@ -35,2 +32,4 @@\n-import java.awt.Component;\n-import java.awt.Robot;\n+import java.awt.Dimension;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Toolkit;\n@@ -63,6 +62,0 @@\n-    private static StrictImageComparator sComparator = null;\n-\n-    @BeforeClass\n-    public void init() {\n-        sComparator = new StrictImageComparator();\n-    }\n@@ -73,1 +66,8 @@\n-        Robot rob = new Robot();\n+\n+        \/\/capture some of the background\n+        Dimension screeSize = Toolkit.getDefaultToolkit().getScreenSize();\n+        Point screenCenter = new Point(screeSize.width \/ 2, screeSize.height \/ 2);\n+        Rectangle center = new Rectangle(\n+                screenCenter.x - 50, screenCenter.y - 50,\n+                100, 100);\n+        BufferedImage background = getRobot().createScreenCapture(center);\n@@ -78,1 +78,7 @@\n-        waitImageIsStill(rob, mainFrame);\n+        mainFrame.waitComponentShowing(true);\n+\n+        \/\/make sure the frame is already painted\n+        waitChangedImage(() -> getRobot().createScreenCapture(center),\n+                background, mainFrame.getTimeouts(), \"background\");\n+        \/\/make sure the frame is painted completely\n+        waitStillImage(mainFrame, \"frame\");\n@@ -82,1 +88,1 @@\n-            checkButton(mainFrame, i, rob);\n+            checkButton(mainFrame, i);\n@@ -86,1 +92,1 @@\n-    private void checkButton(JFrameOperator jfo, int i, Robot rob) {\n+    private void checkButton(JFrameOperator jfo, int i) throws InterruptedException {\n@@ -96,5 +102,2 @@\n-        BufferedImage initialButtonImage = capture(rob, button);\n-        assertNotBlack(initialButtonImage);\n-        save(initialButtonImage, \"button\" + i + \".png\");\n-\n-        BufferedImage[] pressedImage = new BufferedImage[1];\n+        BufferedImage notPressed, pressed = null;\n+        notPressed = waitStillImage(button, \"not-pressed-\" + i);\n@@ -111,11 +114,3 @@\n-            button.waitState(new ComponentChooser() {\n-                public boolean checkComponent(Component c) {\n-                    pressedImage[0] = capture(rob, button);\n-                    assertNotBlack(pressedImage[0]);\n-                    return !sComparator.compare(initialButtonImage, pressedImage[0]);\n-                }\n-\n-                public String getDescription() {\n-                    return \"Button with new image\";\n-                }\n-            });\n+            waitChangedImage(() -> capture(button), notPressed,\n+                    button.getTimeouts(), \"after-press-\" + i);\n+            pressed = waitStillImage(button, \"pressed-\" + i);\n@@ -123,3 +118,0 @@\n-            if (pressedImage[0] != null) {\n-                save(pressedImage[0], \"button\" + i + \"_pressed.png\");\n-            }\n@@ -127,0 +119,4 @@\n+            if(pressed != null) {\n+                waitChangedImage(() -> capture(button), pressed,\n+                        button.getTimeouts(), \"released-\" + i);\n+            }\n","filename":"test\/jdk\/sanity\/client\/SwingSet\/src\/ButtonDemoScreenshotTest.java","additions":31,"deletions":35,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n-import static org.jemmy2ext.JemmyExt.EXACT_STRING_COMPARATOR;\n-import static org.jemmy2ext.JemmyExt.assertNotBlack;\n+import static org.jemmy2ext.JemmyExt.*;\n+import static org.testng.Assert.assertFalse;\n@@ -152,1 +152,2 @@\n-            assertNotBlack(capturedImage);\n+            save(capturedImage, \"editor\");\n+            assertFalse(isBlack(capturedImage), \"image blackness\");\n@@ -161,2 +162,1 @@\n-                        JemmyExt.save(capturedImage, \"capturedimage_\" + pageName + \"_\" +\n-                                UIManager.getLookAndFeel().getClass().getSimpleName() + \".png\");\n+                        save(capturedImage, \"capturedimage-\" + pageName);\n","filename":"test\/jdk\/sanity\/client\/SwingSet\/src\/EditorPaneDemoTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import java.awt.AWTException;\n@@ -31,0 +32,1 @@\n+import java.awt.Toolkit;\n@@ -39,0 +41,2 @@\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n@@ -41,0 +45,1 @@\n+import java.util.Date;\n@@ -43,0 +48,1 @@\n+import java.util.function.Supplier;\n@@ -59,0 +65,1 @@\n+import org.netbeans.jemmy.Timeouts;\n@@ -62,0 +69,1 @@\n+import org.netbeans.jemmy.image.ImageComparator;\n@@ -83,0 +91,13 @@\n+    private static Robot robot = null;\n+\n+    public static Robot getRobot() {\n+        try {\n+            if(robot == null) {\n+                robot = new Robot();\n+            }\n+            return robot;\n+        } catch (AWTException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n@@ -92,11 +113,7 @@\n-    public static void assertNotBlack(BufferedImage image) {\n-        int w = image.getWidth();\n-        int h = image.getHeight();\n-        try {\n-            assertFalse(\"All pixels are not black\", IntStream.range(0, w).parallel().allMatch(x\n-                    -> IntStream.range(0, h).allMatch(y -> (image.getRGB(x, y) & 0xffffff) == 0)\n-            ));\n-        } catch (Throwable t) {\n-            save(image, \"allPixelsAreBlack.png\");\n-            throw t;\n-        }\n+    \/**\n+     * Checks if the image is complitely black.\n+     *\/\n+    public static boolean isBlack(BufferedImage image) {\n+        return IntStream.range(0, image.getWidth()).parallel()\n+                   .allMatch(x-> IntStream.range(0, image.getHeight())\n+                       .allMatch(y -> (image.getRGB(x, y) & 0xffffff) == 0));\n@@ -155,8 +172,3 @@\n-    public static void assertEquals(String string, StrictImageComparator comparator, BufferedImage expected, BufferedImage actual) {\n-        try {\n-            assertTrue(string, comparator.compare(expected, actual));\n-        } catch (Error err) {\n-            save(expected, \"expected.png\");\n-            save(actual, \"actual.png\");\n-            throw err;\n-        }\n+    private static final DateFormat timestampFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n+    private static String timeStamp() {\n+        return timestampFormat.format(new Date());\n@@ -165,8 +177,20 @@\n-    public static void assertNotEquals(String string, StrictImageComparator comparator, BufferedImage notExpected, BufferedImage actual) {\n-        try {\n-            assertFalse(string, comparator.compare(notExpected, actual));\n-        } catch (Error err) {\n-            save(notExpected, \"notExpected.png\");\n-            save(actual, \"actual.png\");\n-            throw err;\n-        }\n+    \/**\n+     * Constructs filename with a timestamp.\n+     * @param name File name or a path without the extension\n+     * @param extension File extension (without the dot). Could be null,\n+     *                  in which case timestamp is simply added to the filename (no trailing dot).\n+     * @return file name\n+     *\/\n+    public static String timeStamp(String name, String extension) {\n+        return name + \"-\" + timeStamp() +\n+                ((extension != null) ? (\".\" + extension) : \"\");\n+    }\n+\n+    \/**\n+     * Saves an image into a file. Filename will be constructed from the given fileID and\n+     * a timestamp.\n+     * @param image\n+     * @param fileID\n+     *\/\n+    public static void save(BufferedImage image, String fileID) {\n+        doSave(image, timeStamp(fileID + \"-\" + lafShortName(), \"png\"));\n@@ -175,2 +199,2 @@\n-    public static void save(BufferedImage image, String filename) {\n-        String filepath = filename;\n+    \/\/Saves an image into a file with the provided filename\n+    private static void doSave(BufferedImage image, String filename) {\n@@ -178,1 +202,1 @@\n-            filepath = new File(filename).getCanonicalPath();\n+            String filepath = new File(filename).getCanonicalPath();\n@@ -183,1 +207,1 @@\n-            throw new RuntimeException(\"Failed to save image to \" + filepath, ioe);\n+            throw new RuntimeException(\"Failed to save image to \" + filename, ioe);\n@@ -187,3 +211,10 @@\n-    public static void waitImageIsStill(Robot rob, ComponentOperator operator) {\n-        operator.waitState(new ComponentChooser() {\n-\n+    \/**\n+     * Waits for the displayed image to be still.\n+     * @param imageID an image ID with no extension. Timestamp and LAF information is added to the ID when saving.\n+     * @return last still image\n+     * @throws TimeoutExpiredException if the waiting is unsuccessful\n+     *\/\n+    public static BufferedImage waitStillImage(ComponentOperator operator, String imageID) {\n+        operator.getTimeouts().setTimeout(\"Waiter.TimeDelta\", 1000);\n+        String timestampName = timeStamp(imageID + \"-\" + lafShortName(), \"png\");\n+        class StillImageChooser implements ComponentChooser {\n@@ -191,1 +222,0 @@\n-            private int index = 0;\n@@ -196,3 +226,2 @@\n-                BufferedImage currentImage = capture(rob, operator);\n-                save(currentImage, \"waitImageIsStill\" + index + \".png\");\n-                index++;\n+                BufferedImage currentImage = capture(operator);\n+                doSave(currentImage, timestampName);\n@@ -206,1 +235,1 @@\n-                return \"Image of \" + operator + \" is still\";\n+                return \"A still image of \" + operator;\n@@ -208,1 +237,39 @@\n-        });\n+        }\n+        StillImageChooser chooser = new StillImageChooser();\n+        operator.waitState(chooser);\n+        return chooser.previousImage;\n+    }\n+\n+    \/**\n+     * Waits for the displayed image to change.\n+     * @param reference image to compare to\n+     * @param imageID an image ID with no extension. Timestamp and LAF information is added to the ID when saving.\n+     * @return last (changed) image\n+     * @throws TimeoutExpiredException if the waiting is unsuccessful\n+     *\/\n+    public static BufferedImage waitChangedImage(Supplier<BufferedImage> supplier,\n+                                                 BufferedImage reference,\n+                                                 Timeouts timeouts,\n+                                                 String imageID) throws InterruptedException {\n+        ImageComparator comparator = new StrictImageComparator();\n+        String timestampName = timeStamp(imageID + \"-\" + lafShortName(), \"png\");\n+        class ImageWaitable implements Waitable {\n+            BufferedImage image;\n+\n+            @Override\n+            public Object actionProduced(Object obj) {\n+                image = supplier.get();\n+                doSave(image, timestampName);\n+                return comparator.compare(reference, image) ? null : image;\n+            }\n+\n+            @Override\n+            public String getDescription() {\n+                return \"Waiting screen image to change\";\n+            }\n+        }\n+        ImageWaitable waitable = new ImageWaitable();\n+        Waiter waiter = new Waiter(waitable);\n+        waiter.setTimeouts(timeouts);\n+        waiter.waitAction(null);\n+        return waitable.image;\n@@ -255,1 +322,1 @@\n-    public static BufferedImage capture(Robot rob, ComponentOperator operator) {\n+    public static BufferedImage capture(ComponentOperator operator) {\n@@ -258,1 +325,1 @@\n-        return rob.createScreenCapture(boundary);\n+        return getRobot().createScreenCapture(boundary);\n@@ -339,0 +406,2 @@\n+    private static String lafShortName() { return UIManager.getLookAndFeel().getClass().getSimpleName(); }\n+\n@@ -344,2 +413,1 @@\n-        String lookAndFeelClassName = UIManager.getLookAndFeel().getClass().getSimpleName();\n-        PNGEncoder.captureScreen(\"failure_\" + lookAndFeelClassName + \".png\", PNGEncoder.COLOR_MODE);\n+        save(getRobot().createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize())), \"failure\");\n@@ -347,1 +415,1 @@\n-            Dumper.dumpAll(\"dumpAll_\" + lookAndFeelClassName + \".xml\");\n+            Dumper.dumpAll(timeStamp(\"dumpAll-\" + lafShortName(), \"xml\"));\n@@ -351,1 +419,1 @@\n-        captureWindows(lookAndFeelClassName);\n+        captureWindows();\n@@ -356,1 +424,0 @@\n-     * @param lookAndFeelClassName\n@@ -358,1 +425,1 @@\n-    private static void captureWindows(String lookAndFeelClassName) {\n+    private static void captureWindows() {\n@@ -373,4 +440,8 @@\n-                        ImageIO.write(img, \"png\", new File(\"window_\" + lookAndFeelClassName\n-                                + \"_\" + index++ + \".png\"));\n-                    } catch (IOException e) {\n-                        e.printStackTrace();\n+                        save(img, \"window-\" + index++);\n+                    } catch (RuntimeException e) {\n+                        if (e.getCause() instanceof IOException) {\n+                            System.err.println(\"Failed to save screen images\");\n+                            e.printStackTrace();\n+                        } else {\n+                            throw e;\n+                        }\n","filename":"test\/jdk\/sanity\/client\/lib\/Extensions\/src\/org\/jemmy2ext\/JemmyExt.java","additions":124,"deletions":53,"binary":false,"changes":177,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -221,0 +221,1 @@\n+            frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/sanity\/client\/lib\/SwingSet3\/src\/com\/sun\/swingset3\/demos\/button\/ButtonDemo.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}