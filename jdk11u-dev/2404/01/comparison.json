{"files":[{"patch":"@@ -25,1 +25,0 @@\n-import org.jemmy2ext.JemmyExt;\n@@ -28,2 +27,0 @@\n-import org.netbeans.jemmy.ComponentChooser;\n-import org.netbeans.jemmy.image.StrictImageComparator;\n@@ -32,1 +29,0 @@\n-import org.testng.annotations.BeforeClass;\n@@ -36,1 +32,0 @@\n-import java.awt.Component;\n@@ -40,1 +35,0 @@\n-import java.awt.Robot;\n@@ -68,6 +62,0 @@\n-    private static StrictImageComparator sComparator = null;\n-\n-    @BeforeClass\n-    public void init() {\n-        sComparator = new StrictImageComparator();\n-    }\n@@ -78,1 +66,0 @@\n-        Robot rob = new Robot();\n@@ -85,2 +72,2 @@\n-                screenCenter.x + 50, screenCenter.y + 50);\n-        BufferedImage background = rob.createScreenCapture(center);\n+                100, 100);\n+        BufferedImage background = getRobot().createScreenCapture(center);\n@@ -94,2 +81,2 @@\n-        waitChangedImage(rob, () -> rob.createScreenCapture(center),\n-                background, mainFrame.getTimeouts(), \"background.png\");\n+        waitChangedImage(() -> getRobot().createScreenCapture(center),\n+                background, mainFrame.getTimeouts(), \"background\");\n@@ -97,1 +84,1 @@\n-        waitStillImage(rob, mainFrame, \"frame.png\");\n+        waitStillImage(mainFrame, \"frame\");\n@@ -101,1 +88,1 @@\n-            checkButton(mainFrame, i, rob);\n+            checkButton(mainFrame, i);\n@@ -105,1 +92,1 @@\n-    private void checkButton(JFrameOperator jfo, int i, Robot rob) throws InterruptedException {\n+    private void checkButton(JFrameOperator jfo, int i) throws InterruptedException {\n@@ -116,3 +103,1 @@\n-        notPressed = waitStillImage(rob, button, \"not-pressed-\" + i + \".png\");\n-\n-        BufferedImage[] pressedImage = new BufferedImage[1];\n+        notPressed = waitStillImage(button, \"not-pressed-\" + i);\n@@ -129,3 +114,3 @@\n-            waitChangedImage(rob, () -> capture(rob, button), notPressed,\n-                    button.getTimeouts(), \"pressed-\" + i + \".png\");\n-            pressed = waitStillImage(rob, button, \"pressed.png\");\n+            waitChangedImage(() -> capture(button), notPressed,\n+                    button.getTimeouts(), \"after-press-\" + i);\n+            pressed = waitStillImage(button, \"pressed-\" + i);\n@@ -135,2 +120,2 @@\n-                waitChangedImage(rob, () -> capture(rob, button), pressed,\n-                        button.getTimeouts(), \"released-\" + i + \".png\");\n+                waitChangedImage(() -> capture(button), pressed,\n+                        button.getTimeouts(), \"released-\" + i);\n","filename":"test\/jdk\/sanity\/client\/SwingSet\/src\/ButtonDemoScreenshotTest.java","additions":13,"deletions":28,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-            save(capturedImage, \"editor.png\");\n+            save(capturedImage, \"editor\");\n@@ -162,2 +162,1 @@\n-                        JemmyExt.save(capturedImage, \"capturedimage_\" + pageName + \"_\" +\n-                                UIManager.getLookAndFeel().getClass().getSimpleName() + \".png\");\n+                        save(capturedImage, \"capturedimage-\" + pageName);\n","filename":"test\/jdk\/sanity\/client\/SwingSet\/src\/EditorPaneDemoTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.awt.AWTException;\n@@ -31,0 +32,1 @@\n+import java.awt.Toolkit;\n@@ -39,0 +41,2 @@\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n@@ -41,0 +45,1 @@\n+import java.util.Date;\n@@ -86,0 +91,13 @@\n+    private static Robot robot = null;\n+\n+    public static Robot getRobot() {\n+        try {\n+            if(robot == null) {\n+                robot = new Robot();\n+            }\n+            return robot;\n+        } catch (AWTException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n@@ -154,8 +172,3 @@\n-    public static void assertEquals(String string, StrictImageComparator comparator, BufferedImage expected, BufferedImage actual) {\n-        try {\n-            assertTrue(string, comparator.compare(expected, actual));\n-        } catch (Error err) {\n-            save(expected, \"expected.png\");\n-            save(actual, \"actual.png\");\n-            throw err;\n-        }\n+    private static final DateFormat timestampFormat = new SimpleDateFormat(\"yyyyMMddHHmmss\");\n+    private static String timeStamp() {\n+        return timestampFormat.format(new Date());\n@@ -164,8 +177,20 @@\n-    public static void assertNotEquals(String string, StrictImageComparator comparator, BufferedImage notExpected, BufferedImage actual) {\n-        try {\n-            assertFalse(string, comparator.compare(notExpected, actual));\n-        } catch (Error err) {\n-            save(notExpected, \"notExpected.png\");\n-            save(actual, \"actual.png\");\n-            throw err;\n-        }\n+    \/**\n+     * Constructs filename with a timestamp.\n+     * @param name File name or a path without the extension\n+     * @param extension File extension (without the dot). Could be null,\n+     *                  in which case timestamp is simply added to the filename (no trailing dot).\n+     * @return file name\n+     *\/\n+    public static String timeStamp(String name, String extension) {\n+        return name + \"-\" + timeStamp() +\n+                ((extension != null) ? (\".\" + extension) : \"\");\n+    }\n+\n+    \/**\n+     * Saves an image into a file. Filename will be constructed from the given fileID and\n+     * a timestamp.\n+     * @param image\n+     * @param fileID\n+     *\/\n+    public static void save(BufferedImage image, String fileID) {\n+        doSave(image, timeStamp(fileID + \"-\" + lafShortName(), \"png\"));\n@@ -174,2 +199,2 @@\n-    public static void save(BufferedImage image, String filename) {\n-        String filepath = filename;\n+    \/\/Saves an image into a file with the provided filename\n+    private static void doSave(BufferedImage image, String filename) {\n@@ -177,1 +202,1 @@\n-            filepath = new File(filename).getCanonicalPath();\n+            String filepath = new File(filename).getCanonicalPath();\n@@ -182,1 +207,1 @@\n-            throw new RuntimeException(\"Failed to save image to \" + filepath, ioe);\n+            throw new RuntimeException(\"Failed to save image to \" + filename, ioe);\n@@ -186,25 +211,0 @@\n-    \/**\n-     * Waits for a screen area taken by a component to not be completely black rectangle.\n-     * @return last (non-black) image\n-     * @throws TimeoutExpiredException if the waiting is unsuccessful\n-     *\/\n-    public static BufferedImage waitNotBlack(Robot rob, ComponentOperator operator, String imageName) {\n-        class NonBlackImageChooser implements ComponentChooser {\n-            private BufferedImage image = null;\n-            @Override\n-            public boolean checkComponent(Component comp) {\n-                image = capture(rob, operator);\n-                save(image, imageName);\n-                return !isBlack(image);\n-            }\n-\n-            @Override\n-            public String getDescription() {\n-                return \"A non-black Image of \" + operator;\n-            }\n-        }\n-        NonBlackImageChooser chooser = new NonBlackImageChooser();\n-        operator.waitState(chooser);\n-        return chooser.image;\n-    }\n-\n@@ -213,0 +213,1 @@\n+     * @param imageID an image ID with no extension. Timestamp and LAF information is added to the ID when saving.\n@@ -216,1 +217,1 @@\n-    public static BufferedImage waitStillImage(Robot rob, ComponentOperator operator, String imageName) {\n+    public static BufferedImage waitStillImage(ComponentOperator operator, String imageID) {\n@@ -218,0 +219,1 @@\n+        String timestampName = timeStamp(imageID + \"-\" + lafShortName(), \"png\");\n@@ -224,2 +226,2 @@\n-                BufferedImage currentImage = capture(rob, operator);\n-                save(currentImage, imageName);\n+                BufferedImage currentImage = capture(operator);\n+                doSave(currentImage, timestampName);\n@@ -244,0 +246,1 @@\n+     * @param imageID an image ID with no extension. Timestamp and LAF information is added to the ID when saving.\n@@ -247,2 +250,1 @@\n-    public static BufferedImage waitChangedImage(Robot rob,\n-                                                 Supplier<BufferedImage> supplier,\n+    public static BufferedImage waitChangedImage(Supplier<BufferedImage> supplier,\n@@ -251,1 +253,1 @@\n-                                                 String imageName) throws InterruptedException {\n+                                                 String imageID) throws InterruptedException {\n@@ -253,0 +255,1 @@\n+        String timestampName = timeStamp(imageID + \"-\" + lafShortName(), \"png\");\n@@ -259,1 +262,1 @@\n-                save(image, imageName);\n+                doSave(image, timestampName);\n@@ -319,1 +322,1 @@\n-    public static BufferedImage capture(Robot rob, ComponentOperator operator) {\n+    public static BufferedImage capture(ComponentOperator operator) {\n@@ -322,1 +325,1 @@\n-        return rob.createScreenCapture(boundary);\n+        return getRobot().createScreenCapture(boundary);\n@@ -403,0 +406,2 @@\n+    private static String lafShortName() { return UIManager.getLookAndFeel().getClass().getSimpleName(); }\n+\n@@ -408,2 +413,1 @@\n-        String lookAndFeelClassName = UIManager.getLookAndFeel().getClass().getSimpleName();\n-        PNGEncoder.captureScreen(\"failure_\" + lookAndFeelClassName + \".png\", PNGEncoder.COLOR_MODE);\n+        save(getRobot().createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize())), \"failure\");\n@@ -411,1 +415,1 @@\n-            Dumper.dumpAll(\"dumpAll_\" + lookAndFeelClassName + \".xml\");\n+            Dumper.dumpAll(timeStamp(\"dumpAll-\" + lafShortName(), \"xml\"));\n@@ -415,1 +419,1 @@\n-        captureWindows(lookAndFeelClassName);\n+        captureWindows();\n@@ -420,1 +424,0 @@\n-     * @param lookAndFeelClassName\n@@ -422,1 +425,1 @@\n-    private static void captureWindows(String lookAndFeelClassName) {\n+    private static void captureWindows() {\n@@ -437,4 +440,8 @@\n-                        ImageIO.write(img, \"png\", new File(\"window_\" + lookAndFeelClassName\n-                                + \"_\" + index++ + \".png\"));\n-                    } catch (IOException e) {\n-                        e.printStackTrace();\n+                        save(img, \"window-\" + index++);\n+                    } catch (RuntimeException e) {\n+                        if (e.getCause() instanceof IOException) {\n+                            System.err.println(\"Failed to save screen images\");\n+                            e.printStackTrace();\n+                        } else {\n+                            throw e;\n+                        }\n","filename":"test\/jdk\/sanity\/client\/lib\/Extensions\/src\/org\/jemmy2ext\/JemmyExt.java","additions":71,"deletions":64,"binary":false,"changes":135,"status":"modified"}]}