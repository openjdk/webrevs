{"files":[{"patch":"@@ -439,1 +439,1 @@\n-    CFLAGS_OS_DEF_JVM=\"-DLINUX\"\n+    CFLAGS_OS_DEF_JVM=\"-DLINUX -D_FILE_OFFSET_BITS=64\"\n","filename":"make\/autoconf\/flags-cflags.m4","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -462,1 +462,1 @@\n-  struct stat64 st;\n+  struct stat st;\n@@ -469,1 +469,1 @@\n-  RESTARTABLE(::stat64(fn, &st), ret);\n+  RESTARTABLE(::stat(fn, &st), ret);\n@@ -496,2 +496,2 @@\n-  struct stat64 st;\n-  ret = stat64(LinuxAttachListener::path(), &st);\n+  struct stat st;\n+  ret = stat(LinuxAttachListener::path(), &st);\n@@ -536,1 +536,1 @@\n-  struct stat64 st;\n+  struct stat st;\n@@ -538,1 +538,1 @@\n-  RESTARTABLE(::stat64(fn, &st), ret);\n+  RESTARTABLE(::stat(fn, &st), ret);\n@@ -543,1 +543,1 @@\n-    RESTARTABLE(::stat64(fn, &st), ret);\n+    RESTARTABLE(::stat(fn, &st), ret);\n","filename":"src\/hotspot\/os\/linux\/attachListener_linux.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -6028,1 +6028,1 @@\n-  int fd = ::open64(path, oflag, mode);\n+  int fd = ::open(path, oflag, mode);\n@@ -6033,3 +6033,3 @@\n-    struct stat64 buf64;\n-    int ret = ::fstat64(fd, &buf64);\n-    int st_mode = buf64.st_mode;\n+    struct stat buf;\n+    int ret = ::fstat(fd, &buf);\n+    int st_mode = buf.st_mode;\n@@ -6072,1 +6072,1 @@\n-  return ::open64(path, oflags, S_IREAD | S_IWRITE);\n+  return ::open(path, oflags, S_IREAD | S_IWRITE);\n@@ -6077,1 +6077,1 @@\n-  return (jlong)::lseek64(fd, (off64_t)0, SEEK_CUR);\n+  return (jlong)::lseek(fd, (off_t)0, SEEK_CUR);\n@@ -6082,1 +6082,1 @@\n-  return (jlong)::lseek64(fd, (off64_t)offset, SEEK_SET);\n+  return (jlong)::lseek(fd, (off_t)offset, SEEK_SET);\n@@ -6091,1 +6091,1 @@\n-  struct stat64 buf64;\n+  struct stat buf;\n@@ -6093,2 +6093,2 @@\n-  if (::fstat64(fd, &buf64) >= 0) {\n-    mode = buf64.st_mode;\n+  if (::fstat(fd, &buf) >= 0) {\n+    mode = buf.st_mode;\n@@ -6103,1 +6103,1 @@\n-  if ((cur = ::lseek64(fd, 0L, SEEK_CUR)) == -1) {\n+  if ((cur = ::lseek(fd, 0L, SEEK_CUR)) == -1) {\n@@ -6105,1 +6105,1 @@\n-  } else if ((end = ::lseek64(fd, 0L, SEEK_END)) == -1) {\n+  } else if ((end = ::lseek(fd, 0L, SEEK_END)) == -1) {\n@@ -6107,1 +6107,1 @@\n-  } else if (::lseek64(fd, cur, SEEK_SET) == -1) {\n+  } else if (::lseek(fd, cur, SEEK_SET) == -1) {\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  return (jlong) ::lseek64(fd, offset, whence);\n+  return (jlong) ::lseek(fd, offset, whence);\n@@ -81,1 +81,1 @@\n-  return ::ftruncate64(fd, length);\n+  return ::ftruncate(fd, length);\n","filename":"src\/hotspot\/os\/linux\/os_linux.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}