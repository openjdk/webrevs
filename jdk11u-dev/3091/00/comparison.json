{"files":[{"patch":"@@ -574,1 +574,2 @@\n-       maybe-uninitialized class-memaccess unused-result extra noexcept-type expansion-to-defined\n+       maybe-uninitialized class-memaccess unused-result extra use-after-free noexcept-type \\\n+       expansion-to-defined\n","filename":"make\/lib\/Awt2dLibraries.gmk","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,1 +97,1 @@\n-      _data[i] = init;\n+      data()[i] = init;\n@@ -105,1 +105,11 @@\n-  T* data()                           { return _data; }\n+\n+  T* data() {\n+    return reinterpret_cast<T*>(\n+      reinterpret_cast<char*>(this) + base_offset_in_bytes());\n+  }\n+\n+  const T* data() const {\n+    return reinterpret_cast<const T*>(\n+      reinterpret_cast<const char*>(this) + base_offset_in_bytes());\n+  }\n+\n@@ -110,1 +120,1 @@\n-    while (i-- > 0 && _data[i] != x) ;\n+    while (i-- > 0 && data()[i] != x) ;\n@@ -118,3 +128,3 @@\n-  T    at(int i) const                 { assert(i >= 0 && i< _length, \"oob: 0 <= %d < %d\", i, _length); return _data[i]; }\n-  void at_put(const int i, const T& x) { assert(i >= 0 && i< _length, \"oob: 0 <= %d < %d\", i, _length); _data[i] = x; }\n-  T*   adr_at(const int i)             { assert(i >= 0 && i< _length, \"oob: 0 <= %d < %d\", i, _length); return &_data[i]; }\n+  T    at(int i) const                 { assert(i >= 0 && i< _length, \"oob: 0 <= %d < %d\", i, _length); return data()[i]; }\n+  void at_put(const int i, const T& x) { assert(i >= 0 && i< _length, \"oob: 0 <= %d < %d\", i, _length); data()[i] = x; }\n+  T*   adr_at(const int i)             { assert(i >= 0 && i< _length, \"oob: 0 <= %d < %d\", i, _length); return &data()[i]; }\n","filename":"src\/hotspot\/share\/oops\/array.hpp","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -202,0 +202,11 @@\n+const char* type2name(BasicType t) {\n+  if (t < ARRAY_SIZE(type2name_tab)) {\n+    return type2name_tab[t];\n+  } else if (t == T_ILLEGAL) {\n+    return \"*illegal*\";\n+  } else {\n+    fatal(\"invalid type %d\", t);\n+    return \"invalid type\";\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -684,2 +684,1 @@\n-extern const char* type2name_tab[T_CONFLICT+1];     \/\/ Map a BasicType to a jchar\n-inline const char* type2name(BasicType t) { return (uint)t < T_CONFLICT+1 ? type2name_tab[t] : NULL; }\n+extern const char* type2name_tab[T_CONFLICT+1];     \/\/ Map a BasicType to a char*\n@@ -688,0 +687,2 @@\n+const char* type2name(BasicType t);\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -128,1 +128,2 @@\n-    char name[PATH_MAX + 2], *real;\n+    char name[PATH_MAX + 1], *real;\n+    int snprintf_result;\n@@ -130,2 +131,4 @@\n-    if ((JLI_StrLen(indir) + JLI_StrLen(cmd) + 1)  > PATH_MAX) return 0;\n-    JLI_Snprintf(name, sizeof(name), \"%s%c%s\", indir, FILE_SEPARATOR, cmd);\n+    snprintf_result = JLI_Snprintf(name, sizeof(name), \"%s%c%s\", indir, FILE_SEPARATOR, cmd);\n+    if ((snprintf_result < 0) || (snprintf_result >= (int)sizeof(name))) {\n+      return NULL;\n+    }\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md_common.c","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"}]}