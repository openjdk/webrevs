{"files":[{"patch":"@@ -0,0 +1,41 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4908137\n+  @summary tests that non-zero number of mouse buttons is returned\n+  @key headful\n+*\/\n+\n+import java.awt.MouseInfo;\n+\n+public class ButtonsNumber {\n+\n+    public static void main(String[] args) {\n+\n+        if (MouseInfo.getNumberOfButtons() == 0) {\n+            throw new RuntimeException(\"Zero returned by getNumberOfButtons(). Test failed.\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/MouseInfo\/ButtonsNumber.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"},{"patch":"@@ -0,0 +1,172 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @summary unit test for a new method in Container class: getMousePosition(boolean)\n+  @bug 4009555\n+  @key headful\n+*\/\n+\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+\n+public class ContainerMousePositionTest {\n+    private Button button;\n+    private Frame frame;\n+    private Panel panel;\n+    private static Dimension BUTTON_DIMENSION = new Dimension(100, 100);\n+    private static Dimension FRAME_DIMENSION = new Dimension(200, 200);\n+    private static Point POINT_WITHOUT_COMPONENTS = new Point(10, 10);\n+    private static Point FIRST_BUTTON_LOCATION = new Point(20, 20);\n+    private static int DELAY = 1000;\n+    Robot robot;\n+    volatile int xPos = 0;\n+    volatile int yPos = 0;\n+    Point pMousePosition;\n+\n+    public static void main(String[] args) throws Exception {\n+        ContainerMousePositionTest containerObj = new ContainerMousePositionTest();\n+        containerObj.init();\n+        containerObj.start();\n+    }\n+\n+    public void init() throws Exception {\n+        robot = new Robot();\n+        EventQueue.invokeAndWait(() -> {\n+            button = new Button(\"Button\");\n+            frame = new Frame(\"Testing Component.getMousePosition()\");\n+            panel = new Panel();\n+\n+            button.setSize(BUTTON_DIMENSION);\n+            button.setLocation(FIRST_BUTTON_LOCATION);\n+\n+            panel.setLayout(null);\n+\n+            panel.add(button);\n+            frame.add(panel);\n+            frame.setSize(FRAME_DIMENSION);\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n+        });\n+    }\n+\n+    public void start() throws Exception {\n+        try {\n+            robot.delay(DELAY);\n+            robot.waitForIdle();\n+\n+            EventQueue.invokeAndWait(() -> {\n+                Point p = button.getLocationOnScreen();\n+                xPos = p.x + button.getWidth() \/ 2;\n+                yPos = p.y + button.getHeight() \/ 2;\n+            });\n+            robot.mouseMove(xPos,yPos);\n+            robot.delay(DELAY);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                pMousePosition = frame.getMousePosition(false);\n+                if (pMousePosition != null) {\n+                    throw new RuntimeException(\"Test failed: Container is \" +\n+                            \"overlapped by \" + \" child and it should be taken \" +\n+                            \"into account\");\n+                }\n+                System.out.println(\"Test stage completed: Container is \" +\n+                        \"overlapped by \" + \" child and it was taken into \" +\n+                        \"account\");\n+\n+                pMousePosition = frame.getMousePosition(true);\n+                if (pMousePosition == null) {\n+                    throw new RuntimeException(\"Test failed: Container is \" +\n+                            \"overlapped by \" + \" child and it should not be \" +\n+                            \"taken into account\");\n+                }\n+                System.out.println(\"Test stage completed: Container is \" +\n+                        \"overlapped by \" + \" child and it should not be \" +\n+                        \"taken into account\");\n+                xPos = panel.getLocationOnScreen().x + POINT_WITHOUT_COMPONENTS.x;\n+                yPos = panel.getLocationOnScreen().y + POINT_WITHOUT_COMPONENTS.y;\n+            });\n+\n+            robot.mouseMove(xPos, yPos);\n+\n+            robot.delay(DELAY);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                pMousePosition = panel.getMousePosition(true);\n+                if (pMousePosition == null) {\n+                    throw new RuntimeException(\"Test failed: Pointer was \" +\n+                            \"outside of \" + \"the component so getMousePosition()\" +\n+                            \" should not return null\");\n+                }\n+                System.out.println(\"Test stage completed: Pointer was outside of \" +\n+                        \"the component and getMousePosition() has not returned null\");\n+\n+                pMousePosition = panel.getMousePosition(false);\n+                if (pMousePosition == null) {\n+                    throw new RuntimeException(\"Test failed: Pointer was outside of \" +\n+                            \"the component so getMousePosition() should not return null\");\n+                }\n+                System.out.println(\"Test stage completed: Pointer was outside of \" +\n+                        \"the component and getMousePosition() has not returned null\");\n+                xPos = frame.getLocationOnScreen().x + frame.getWidth() + POINT_WITHOUT_COMPONENTS.x;\n+                yPos = frame.getLocationOnScreen().y + frame.getHeight() + POINT_WITHOUT_COMPONENTS.y;\n+            });\n+            robot.mouseMove(xPos, yPos);\n+\n+            robot.delay(DELAY);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                pMousePosition = frame.getMousePosition(true);\n+                if (pMousePosition != null) {\n+                    throw new RuntimeException(\"Test failed: Pointer was outside of \" +\n+                            \"the Frame widow and getMousePosition() should return null\");\n+                }\n+                System.out.println(\"Test stage completed: Pointer was outside of \" +\n+                        \"the Frame widow and getMousePosition() returned null\");\n+\n+                pMousePosition = frame.getMousePosition(false);\n+                if (pMousePosition != null) {\n+                    throw new RuntimeException(\"Test failed: Pointer was outside of \" +\n+                            \"the Frame widow and getMousePosition() should return null\");\n+                }\n+                System.out.println(\"Test stage completed: Pointer was outside of \" +\n+                        \"the Frame widow and getMousePosition() returned null\");\n+            });\n+            robot.delay(DELAY);\n+\n+            System.out.println(\"ComponentMousePositionTest PASSED.\");\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/MouseInfo\/ContainerMousePositionTest.java","additions":172,"deletions":0,"binary":false,"changes":172,"status":"added"}]}