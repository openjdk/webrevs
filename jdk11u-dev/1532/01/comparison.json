{"files":[{"patch":"@@ -73,1 +73,1 @@\n- * @LastModified: Feb 2019\n+ * @LastModified: Mar 2019\n@@ -234,1 +234,1 @@\n-        \"media\",\n+        \"media-type\",\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/OutputPropertiesFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -705,1 +705,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -768,1 +768,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -909,1 +909,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -1631,1 +1631,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/ToHTMLStream.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1230,1 +1230,1 @@\n-            if (!m_cdataTagOpen && shouldIndent())\n+            if (!m_cdataTagOpen && shouldIndentForText())\n@@ -1269,0 +1269,1 @@\n+            m_isprevtext = true;\n@@ -1535,2 +1536,2 @@\n-     * Used to flush the buffered characters when indentation is on, this method\n-     * will be called when the next node is traversed.\n+     * Flushes the buffered characters when indentation is on. This method\n+     * is called before the next node is traversed.\n@@ -1538,0 +1539,2 @@\n+     * @param isText indicates whether the node to be traversed is text\n+     * @throws org.xml.sax.SAXException\n@@ -1539,1 +1542,1 @@\n-    final protected void flushCharactersBuffer() throws SAXException {\n+    final protected void flushCharactersBuffer(boolean isText) throws SAXException {\n@@ -1552,1 +1555,3 @@\n-                m_childNodeNum++;\n+                if (!isText) {\n+                    m_childNodeNum++;\n+                }\n@@ -1845,1 +1850,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -2089,1 +2094,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -2281,1 +2286,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -2463,2 +2468,1 @@\n-            m_childNodeNum++;\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(true);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/ToStream.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+ * @LastModified: July 2019\n@@ -203,1 +204,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n@@ -270,1 +271,1 @@\n-            flushCharactersBuffer();\n+            flushCharactersBuffer(false);\n","filename":"src\/java.xml\/share\/classes\/com\/sun\/org\/apache\/xml\/internal\/serializer\/ToXMLStream.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n- * @bug 6439439 8087303 8174025 8249867 8261209\n+ * @bug 6439439 8087303 8174025 8223291 8249867 8261209\n@@ -526,1 +526,0 @@\n-        dbf.setValidating(true);\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/prettyprint\/PrettyPrintTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,3 +1,1 @@\n-<a>\n-    <![CDATA[ ]]>\n-<\/a>\n+<a><![CDATA[ ]]><\/a>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/prettyprint\/xmltest1.out","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,2 +1,1 @@\n-<a>\n-    <![CDATA[  abc def \n+<a><![CDATA[  abc def \n@@ -4,2 +3,1 @@\n- test]]>\n-<\/a>\n+ test]]><\/a>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/prettyprint\/xmltest2.out","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,2 +2,1 @@\n-         t\n-    <![CDATA[ ]]>\n+     t<![CDATA[ ]]>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/common\/prettyprint\/xmltest8.out","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package transform;\n+\n+import java.io.StringReader;\n+import java.io.StringWriter;\n+import java.util.Properties;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Templates;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.transform.stream.StreamSource;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+import org.w3c.dom.Document;\n+import org.xml.sax.InputSource;\n+\n+\/*\n+ * @test\n+ * @bug 8219705 8223291\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @run testng transform.OutputPropertiesTest\n+ * @summary Verifies the output properties are set correctly\n+ *\/\n+public class OutputPropertiesTest {\n+    \/*\n+       DataProvider: for testing indentation\n+       Data: xml, expected result\n+     *\/\n+    @DataProvider(name = \"Indentation\")\n+    public Object[][] getData() {\n+        String mix = \"\\n\" +\n+                \"        abc\\n\" +\n+                \"        mix\\n\" +\n+                \"        xyz\\n\" +\n+                \"    \";\n+        return new Object[][]{\n+            {\"abc<![CDATA[data]]>xyz\", \"abcdataxyz\"},\n+            {\"abc<![CDATA[ & ]]>xyz\", \"abc & xyz\"},\n+            {\"<![CDATA[data]]>\", \"data\"},\n+            {\"abc<mix>mix<\/mix>xyz\", mix}\n+        };\n+    }\n+\n+\n+    \/**\n+     * bug 8223291\n+     * Verifies that no extra indentation is added for CDATA.\n+     * @param xml the xml content to be tested\n+     * @param expected the expected result\n+     * @throws Exception\n+     *\/\n+    @Test(dataProvider = \"Indentation\")\n+    public void testIndentation(String xml, String expected) throws Exception\n+    {\n+        StreamSource source = new StreamSource(new StringReader(\"<foo><bar>\" + xml + \"<\/bar><\/foo>\"));\n+        StreamResult result = new StreamResult(new StringWriter());\n+\n+        Transformer tform = TransformerFactory.newInstance().newTransformer();\n+        tform.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+        tform.transform(source, result);\n+\n+        String xml1 = result.getWriter().toString();\n+\n+        Document document = DocumentBuilderFactory.newInstance()\n+            .newDocumentBuilder()\n+            .parse(new InputSource(new StringReader(xml1)));\n+\n+        String resultData = document.getElementsByTagName(\"bar\")\n+            .item(0)\n+            .getTextContent();\n+\n+        Assert.assertEquals(resultData, expected);\n+    }\n+\n+    @Test\n+    public void testOutputProperties() throws Exception {\n+        String xslData = \"<?xml version='1.0'?>\"\n+                + \"<xsl:stylesheet\"\n+                + \" xmlns:xsl='http:\/\/www.w3.org\/1999\/XSL\/Transform'\"\n+                + \" version='1.0'\"\n+                + \">\\n\"\n+                + \"   <xsl:output method='html'\/>\\n\"\n+                + \"   <xsl:template match='\/'>\\n\"\n+                + \"     Hello World! \\n\"\n+                + \"   <\/xsl:template>\\n\"\n+                + \"<\/xsl:stylesheet>\";\n+\n+        System.out.println(xslData);\n+\n+        Templates templates = TransformerFactory.newInstance()\n+                    .newTemplates(new StreamSource(new StringReader(xslData)));\n+\n+        Properties properties = templates.getOutputProperties();\n+        String[] prNames = new String[]{\"method\", \"version\", \"indent\", \"media-type\"};\n+        String[] prValues = new String[]{\"html\", \"4.0\", \"yes\", \"text\/html\"};\n+\n+        for (int i = 0; i < prNames.length; i++) {\n+            String value = properties.getProperty(prNames[i]);\n+            String msg = \"The value of the property '\" + prNames[i] + \"' should be '\"\n+                    + prValues[i] + \"' when the method is '\" + prValues[0] + \"'. \\n\";\n+            Assert.assertEquals(value, prValues[i], msg);\n+            System.out.println(\n+                    prNames[i] + \": actual: \" + value + \", expected: \" + prValues[i]);\n+        }\n+    }\n+\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/transform\/OutputPropertiesTest.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"}]}