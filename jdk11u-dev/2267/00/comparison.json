{"files":[{"patch":"@@ -70,1 +70,2 @@\n-\n+    Component parentComponent;\n+    Object message;\n@@ -91,0 +92,2 @@\n+        this.parentComponent = parentComponent;\n+        this.message = message;\n@@ -122,0 +125,19 @@\n+    private void setProgress(int nr) throws IOException {\n+        if (nr > 0) {\n+            if (nread + nr > nread) {\n+                monitor.setProgress(nread += nr);\n+            } else {\n+                size = in.available();\n+                nread = 0;\n+                monitor.close();\n+                monitor = new ProgressMonitor(this.parentComponent,\n+                                              this.message, null, 0, size);\n+            }\n+        }\n+        if (monitor.isCanceled()) {\n+            InterruptedIOException exc =\n+                    new InterruptedIOException(\"progress\");\n+            exc.bytesTransferred = nread;\n+            throw exc;\n+        }\n+    }\n@@ -129,7 +151,1 @@\n-        if (nr > 0) monitor.setProgress(nread += nr);\n-        if (monitor.isCanceled()) {\n-            InterruptedIOException exc =\n-                                    new InterruptedIOException(\"progress\");\n-            exc.bytesTransferred = nread;\n-            throw exc;\n-        }\n+        setProgress(nr);\n@@ -148,7 +164,1 @@\n-        if (nr > 0) monitor.setProgress(nread += nr);\n-        if (monitor.isCanceled()) {\n-            InterruptedIOException exc =\n-                                    new InterruptedIOException(\"progress\");\n-            exc.bytesTransferred = nread;\n-            throw exc;\n-        }\n+        setProgress(nr);\n@@ -165,1 +175,7 @@\n-        if (nr > 0) monitor.setProgress(nread += nr);\n+        if (nr > 0) {\n+            if ((int)(nread + nr) > nread) {\n+                monitor.setProgress(nread += nr);\n+            } else {\n+                monitor.setProgress(monitor.getMaximum());\n+            }\n+        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/ProgressMonitorInputStream.java","additions":32,"deletions":16,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8054572\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Tests if JComboBox displays correctly when editable\/non-editable\n+ * @run main\/manual ProgressTest\n+ *\/\n+\n+import java.io.InputStream;\n+\n+import javax.swing.JFrame;\n+import javax.swing.ProgressMonitorInputStream;\n+import javax.swing.SwingUtilities;\n+\n+public class ProgressTest {\n+\n+    private static final String instructionsText =\n+            \"A ProgressMonitor will be shown.\" +\n+            \" If it shows blank progressbar after 2048MB bytes read,\"+\n+            \" press Fail else press Pass\";\n+\n+    private static JFrame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        PassFailJFrame pfjFrame = new PassFailJFrame(\"JScrollPane \"\n+                + \"Test Instructions\", instructionsText, 5);\n+\n+        final long SIZE = (long) (Integer.MAX_VALUE * 1.5);\n+\n+        InputStream fileIn = new InputStream() {\n+            long read = 0;\n+\n+            @Override\n+            public int available() {\n+                return (int) Math.min(SIZE - read, Integer.MAX_VALUE);\n+            }\n+\n+            @Override\n+            public int read() {\n+                return (SIZE - read++ > 0) ? 1 : -1;\n+            }\n+        };\n+\n+        ProgressMonitorInputStream pmis =\n+            new ProgressMonitorInputStream(null, \"Reading File\", fileIn);\n+\n+        Thread thread = new Thread() {\n+            public void run() {\n+                byte[] buffer = new byte[512];\n+                int nb = 0;\n+                long total = 0;\n+                while (true) {\n+                    try {\n+                        nb = pmis.read(buffer);\n+                    } catch (Exception e){}\n+                    if (nb == 0) break;\n+                    total += nb;\n+\n+                    pmis.getProgressMonitor().setNote(total\/(1024*1024)+\" MB Read\");\n+                }\n+            }\n+        };\n+        thread.start();\n+        pfjFrame.awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/ProgressMonitor\/ProgressTest.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"}]}