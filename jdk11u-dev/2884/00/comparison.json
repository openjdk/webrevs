{"files":[{"patch":"@@ -299,1 +299,1 @@\n-    private void doClientSide() throws Exception {\n+    protected void doClientSide() throws Exception {\n","filename":"test\/jdk\/javax\/net\/ssl\/templates\/SSLSocketTemplate.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,2 @@\n- * @run main\/othervm ReuseAddr\n+ * @library \/javax\/net\/ssl\/templates\n+ * @run main ReuseAddr\n@@ -35,3 +36,1 @@\n-import java.io.*;\n-import java.net.*;\n-import javax.net.ssl.*;\n+import java.net.ServerSocket;\n@@ -39,1 +38,1 @@\n-public class ReuseAddr {\n+public class ReuseAddr extends SSLSocketTemplate {\n@@ -41,5 +40,3 @@\n-    \/*\n-     * =============================================================\n-     * Set the various variables needed for the tests, then\n-     * specify what tests to run on each side.\n-     *\/\n+    @Override\n+    protected void doServerSide() throws Exception {\n+        super.doServerSide();\n@@ -47,84 +44,5 @@\n-    \/*\n-     * Should we run the client or server in a separate thread?\n-     * Both sides can throw exceptions, but do you have a preference\n-     * as to which side should be the main thread.\n-     *\/\n-    static boolean separateServerThread = true;\n-\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    private final static String pathToStores = \"..\/..\/..\/..\/javax\/net\/ssl\/etc\";\n-    static String keyStoreFile = \"keystore\";\n-    static String trustStoreFile = \"truststore\";\n-    static String passwd = \"passphrase\";\n-\n-    \/*\n-     * Is the server ready to serve?\n-     *\/\n-    volatile static boolean serverReady = false;\n-\n-    \/*\n-     * Turn on SSL debugging?\n-     *\/\n-    static boolean debug = false;\n-\n-    \/*\n-     * If the client or server is doing some kind of object creation\n-     * that the other side depends on, and that thread prematurely\n-     * exits, you may experience a hang.  The test harness will\n-     * terminate all hung threads after its timeout has expired,\n-     * currently 3 minutes by default, but you might try to be\n-     * smart about it....\n-     *\/\n-\n-    \/*\n-     * Define the server side of the test.\n-     *\n-     * If the server prematurely exits, serverReady will be set to true\n-     * to avoid infinite hangs.\n-     *\/\n-    void doServerSide() throws Exception {\n-        SSLServerSocketFactory sslssf =\n-            (SSLServerSocketFactory) SSLServerSocketFactory.getDefault();\n-        SSLServerSocket sslServerSocket =\n-            (SSLServerSocket) sslssf.createServerSocket(serverPort);\n-        serverPort = sslServerSocket.getLocalPort();\n-\n-        \/*\n-         * Signal Client, we're ready for his connect.\n-         *\/\n-        serverReady = true;\n-\n-        SSLSocket sslSocket = (SSLSocket) sslServerSocket.accept();\n-        InputStream sslIS = sslSocket.getInputStream();\n-        OutputStream sslOS = sslSocket.getOutputStream();\n-\n-        sslIS.read();\n-        sslOS.write(85);\n-        sslOS.flush();\n-\n-        sslSocket.close();\n-\n-        \/\/ Close original server socket\n-        sslServerSocket.close();\n-\n-        \/\/ Try rebinding to same port\n-        sslServerSocket =\n-            (SSLServerSocket) sslssf.createServerSocket(serverPort);\n-        sslServerSocket.close();\n-    }\n-\n-    \/*\n-     * Define the client side of the test.\n-     *\n-     * If the server prematurely exits, serverReady will be set to true\n-     * to avoid infinite hangs.\n-     *\/\n-    void doClientSide() throws Exception {\n-\n-        \/*\n-         * Wait for server to get started.\n-         *\/\n-        while (!serverReady) {\n-            Thread.sleep(50);\n+        \/\/ Note that if this port is already used by another test,\n+        \/\/ this test will fail.\n+        System.out.println(\"Try rebinding to same port: \" + serverPort);\n+        try (ServerSocket server = new ServerSocket(serverPort)) {\n+            System.out.println(\"Server port: \" + server.getLocalPort());\n@@ -132,14 +50,0 @@\n-\n-        SSLSocketFactory sslsf =\n-            (SSLSocketFactory) SSLSocketFactory.getDefault();\n-        SSLSocket sslSocket = (SSLSocket)\n-            sslsf.createSocket(\"localhost\", serverPort);\n-\n-        InputStream sslIS = sslSocket.getInputStream();\n-        OutputStream sslOS = sslSocket.getOutputStream();\n-\n-        sslOS.write(280);\n-        sslOS.flush();\n-        sslIS.read();\n-\n-        sslSocket.close();\n@@ -148,11 +52,0 @@\n-    \/*\n-     * =============================================================\n-     * The remainder is just support stuff\n-     *\/\n-\n-    \/\/ use any free port by default\n-    volatile int serverPort = 0;\n-\n-    volatile Exception serverException = null;\n-    volatile Exception clientException = null;\n-\n@@ -160,103 +53,1 @@\n-        String keyFilename =\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                \"\/\" + keyStoreFile;\n-        String trustFilename =\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + pathToStores +\n-                \"\/\" + trustStoreFile;\n-\n-        System.setProperty(\"javax.net.ssl.keyStore\", keyFilename);\n-        System.setProperty(\"javax.net.ssl.keyStorePassword\", passwd);\n-        System.setProperty(\"javax.net.ssl.trustStore\", trustFilename);\n-        System.setProperty(\"javax.net.ssl.trustStorePassword\", passwd);\n-\n-        if (debug)\n-            System.setProperty(\"javax.net.debug\", \"all\");\n-\n-        \/*\n-         * Start the tests.\n-         *\/\n-        new ReuseAddr();\n-    }\n-\n-    Thread clientThread = null;\n-    Thread serverThread = null;\n-\n-    \/*\n-     * Primary constructor, used to drive remainder of the test.\n-     *\n-     * Fork off the other side, then do your work.\n-     *\/\n-    ReuseAddr() throws Exception {\n-        if (separateServerThread) {\n-            startServer(true);\n-            startClient(false);\n-        } else {\n-            startClient(true);\n-            startServer(false);\n-        }\n-\n-        \/*\n-         * Wait for other side to close down.\n-         *\/\n-        if (separateServerThread) {\n-            serverThread.join();\n-        } else {\n-            clientThread.join();\n-        }\n-\n-        \/*\n-         * When we get here, the test is pretty much over.\n-         *\n-         * If the main thread excepted, that propagates back\n-         * immediately.  If the other thread threw an exception, we\n-         * should report back.\n-         *\/\n-        if (serverException != null)\n-            throw serverException;\n-        if (clientException != null)\n-            throw clientException;\n-    }\n-\n-    void startServer(boolean newThread) throws Exception {\n-        if (newThread) {\n-            serverThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doServerSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our server thread just died.\n-                         *\n-                         * Release the client, if not active already...\n-                         *\/\n-                        System.err.println(\"Server died...\");\n-                        serverReady = true;\n-                        serverException = e;\n-                    }\n-                }\n-            };\n-            serverThread.start();\n-        } else {\n-            doServerSide();\n-        }\n-   }\n-\n-    void startClient(boolean newThread) throws Exception {\n-        if (newThread) {\n-            clientThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        doClientSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our client thread just died.\n-                         *\/\n-                        System.err.println(\"Client died...\");\n-                        clientException = e;\n-                    }\n-                }\n-            };\n-            clientThread.start();\n-        } else {\n-            doClientSide();\n-        }\n+        new ReuseAddr().run();\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/ReuseAddr.java","additions":14,"deletions":223,"binary":false,"changes":237,"status":"modified"}]}