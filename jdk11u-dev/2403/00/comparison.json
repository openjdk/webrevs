{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import org.jemmy2ext.JemmyExt;\n@@ -36,0 +37,3 @@\n+import java.awt.Dimension;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n@@ -37,0 +41,1 @@\n+import java.awt.Toolkit;\n@@ -75,0 +80,8 @@\n+        \/\/capture some of the background\n+        Dimension screeSize = Toolkit.getDefaultToolkit().getScreenSize();\n+        Point screenCenter = new Point(screeSize.width \/ 2, screeSize.height \/ 2);\n+        Rectangle center = new Rectangle(\n+                screenCenter.x - 50, screenCenter.y - 50,\n+                screenCenter.x + 50, screenCenter.y + 50);\n+        BufferedImage background = rob.createScreenCapture(center);\n+\n@@ -78,1 +91,7 @@\n-        waitImageIsStill(rob, mainFrame);\n+        mainFrame.waitComponentShowing(true);\n+\n+        \/\/make sure the frame is already painted\n+        waitChangedImage(rob, () -> rob.createScreenCapture(center),\n+                background, mainFrame.getTimeouts(), \"background.png\");\n+        \/\/make sure the frame is painted completely\n+        waitStillImage(rob, mainFrame, \"frame.png\");\n@@ -86,1 +105,1 @@\n-    private void checkButton(JFrameOperator jfo, int i, Robot rob) {\n+    private void checkButton(JFrameOperator jfo, int i, Robot rob) throws InterruptedException {\n@@ -96,3 +115,2 @@\n-        BufferedImage initialButtonImage = capture(rob, button);\n-        assertNotBlack(initialButtonImage);\n-        save(initialButtonImage, \"button\" + i + \".png\");\n+        BufferedImage notPressed, pressed = null;\n+        notPressed = waitStillImage(rob, button, \"not-pressed-\" + i + \".png\");\n@@ -111,11 +129,3 @@\n-            button.waitState(new ComponentChooser() {\n-                public boolean checkComponent(Component c) {\n-                    pressedImage[0] = capture(rob, button);\n-                    assertNotBlack(pressedImage[0]);\n-                    return !sComparator.compare(initialButtonImage, pressedImage[0]);\n-                }\n-\n-                public String getDescription() {\n-                    return \"Button with new image\";\n-                }\n-            });\n+            waitChangedImage(rob, () -> capture(rob, button), notPressed,\n+                    button.getTimeouts(), \"pressed-\" + i + \".png\");\n+            pressed = waitStillImage(rob, button, \"pressed.png\");\n@@ -123,3 +133,0 @@\n-            if (pressedImage[0] != null) {\n-                save(pressedImage[0], \"button\" + i + \"_pressed.png\");\n-            }\n@@ -127,0 +134,4 @@\n+            if(pressed != null) {\n+                waitChangedImage(rob, () -> capture(rob, button), pressed,\n+                        button.getTimeouts(), \"released-\" + i + \".png\");\n+            }\n","filename":"test\/jdk\/sanity\/client\/SwingSet\/src\/ButtonDemoScreenshotTest.java","additions":31,"deletions":20,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n-import static org.jemmy2ext.JemmyExt.EXACT_STRING_COMPARATOR;\n-import static org.jemmy2ext.JemmyExt.assertNotBlack;\n+import static org.jemmy2ext.JemmyExt.*;\n+import static org.testng.Assert.assertFalse;\n@@ -152,1 +152,2 @@\n-            assertNotBlack(capturedImage);\n+            save(capturedImage, \"editor.png\");\n+            assertFalse(isBlack(capturedImage), \"image blackness\");\n","filename":"test\/jdk\/sanity\/client\/SwingSet\/src\/EditorPaneDemoTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+import java.util.function.Supplier;\n@@ -59,0 +60,1 @@\n+import org.netbeans.jemmy.Timeouts;\n@@ -62,0 +64,1 @@\n+import org.netbeans.jemmy.image.ImageComparator;\n@@ -92,11 +95,7 @@\n-    public static void assertNotBlack(BufferedImage image) {\n-        int w = image.getWidth();\n-        int h = image.getHeight();\n-        try {\n-            assertFalse(\"All pixels are not black\", IntStream.range(0, w).parallel().allMatch(x\n-                    -> IntStream.range(0, h).allMatch(y -> (image.getRGB(x, y) & 0xffffff) == 0)\n-            ));\n-        } catch (Throwable t) {\n-            save(image, \"allPixelsAreBlack.png\");\n-            throw t;\n-        }\n+    \/**\n+     * Checks if the image is complitely black.\n+     *\/\n+    public static boolean isBlack(BufferedImage image) {\n+        return IntStream.range(0, image.getWidth()).parallel()\n+                   .allMatch(x-> IntStream.range(0, image.getHeight())\n+                       .allMatch(y -> (image.getRGB(x, y) & 0xffffff) == 0));\n@@ -187,2 +186,24 @@\n-    public static void waitImageIsStill(Robot rob, ComponentOperator operator) {\n-        operator.waitState(new ComponentChooser() {\n+    \/**\n+     * Waits for a screen area taken by a component to not be completely black rectangle.\n+     * @return last (non-black) image\n+     * @throws TimeoutExpiredException if the waiting is unsuccessful\n+     *\/\n+    public static BufferedImage waitNotBlack(Robot rob, ComponentOperator operator, String imageName) {\n+        class NonBlackImageChooser implements ComponentChooser {\n+            private BufferedImage image = null;\n+            @Override\n+            public boolean checkComponent(Component comp) {\n+                image = capture(rob, operator);\n+                save(image, imageName);\n+                return !isBlack(image);\n+            }\n+\n+            @Override\n+            public String getDescription() {\n+                return \"A non-black Image of \" + operator;\n+            }\n+        }\n+        NonBlackImageChooser chooser = new NonBlackImageChooser();\n+        operator.waitState(chooser);\n+        return chooser.image;\n+    }\n@@ -190,0 +211,8 @@\n+    \/**\n+     * Waits for the displayed image to be still.\n+     * @return last still image\n+     * @throws TimeoutExpiredException if the waiting is unsuccessful\n+     *\/\n+    public static BufferedImage waitStillImage(Robot rob, ComponentOperator operator, String imageName) {\n+        operator.getTimeouts().setTimeout(\"Waiter.TimeDelta\", 1000);\n+        class StillImageChooser implements ComponentChooser {\n@@ -191,1 +220,0 @@\n-            private int index = 0;\n@@ -197,2 +225,1 @@\n-                save(currentImage, \"waitImageIsStill\" + index + \".png\");\n-                index++;\n+                save(currentImage, imageName);\n@@ -206,1 +233,1 @@\n-                return \"Image of \" + operator + \" is still\";\n+                return \"A still image of \" + operator;\n@@ -208,1 +235,38 @@\n-        });\n+        }\n+        StillImageChooser chooser = new StillImageChooser();\n+        operator.waitState(chooser);\n+        return chooser.previousImage;\n+    }\n+\n+    \/**\n+     * Waits for the displayed image to change.\n+     * @param reference image to compare to\n+     * @return last (changed) image\n+     * @throws TimeoutExpiredException if the waiting is unsuccessful\n+     *\/\n+    public static BufferedImage waitChangedImage(Robot rob,\n+                                                 Supplier<BufferedImage> supplier,\n+                                                 BufferedImage reference,\n+                                                 Timeouts timeouts,\n+                                                 String imageName) throws InterruptedException {\n+        ImageComparator comparator = new StrictImageComparator();\n+        class ImageWaitable implements Waitable {\n+            BufferedImage image;\n+\n+            @Override\n+            public Object actionProduced(Object obj) {\n+                image = supplier.get();\n+                save(image, imageName);\n+                return comparator.compare(reference, image) ? null : image;\n+            }\n+\n+            @Override\n+            public String getDescription() {\n+                return \"Waiting screen image to change\";\n+            }\n+        }\n+        ImageWaitable waitable = new ImageWaitable();\n+        Waiter waiter = new Waiter(waitable);\n+        waiter.setTimeouts(timeouts);\n+        waiter.waitAction(null);\n+        return waitable.image;\n","filename":"test\/jdk\/sanity\/client\/lib\/Extensions\/src\/org\/jemmy2ext\/JemmyExt.java","additions":83,"deletions":19,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -221,0 +221,1 @@\n+            frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/sanity\/client\/lib\/SwingSet3\/src\/com\/sun\/swingset3\/demos\/button\/ButtonDemo.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}