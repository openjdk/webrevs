{"files":[{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4475478\n+ * @summary Tests that there is no NullPointerException\n+            thrown when we try to set Frame's icon\n+            which has null data\n+ * @key headful\n+ * @run main SetIconImageExceptionTest\n+*\/\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Image;\n+import java.awt.Toolkit;\n+\n+public class SetIconImageExceptionTest {\n+    static Frame f;\n+\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            try {\n+                \/\/ Test with non-existent image to test with null data\n+                \/\/  not throwing NPE\n+                Image icon = Toolkit.getDefaultToolkit().getImage(\"notexistent.gif\");\n+                f = new Frame(\"Frame with icon\");\n+                f.setIconImage(icon);\n+                f.setVisible(true);\n+            } finally {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            }\n+        });\n+    }\n+\n+ }\/\/ class SetIconImageExceptionTest\n+\n","filename":"test\/jdk\/java\/awt\/Icon\/SetIconImageExceptionTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,204 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4366799\n+ * @key headful\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary verifies that Windows applications react to palette\n+ * changes in 8-bit mode correctly.\n+ * @run main\/manual PaletteTester\n+*\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.Frame;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.image.VolatileImage;\n+import javax.swing.ImageIcon;\n+import javax.swing.JPanel;\n+import java.io.File;\n+\n+public class PaletteTester {\n+\n+    static VImageColors demo;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        This test should be run on any Windows platform in 8-bit\n+        (256 color) display mode only. To check for errors, run a browser\n+        application (Firefox or Internet Explorer) at the same time\n+        and switch between this test and the browser (by clicking on the\n+        title bars).\n+\n+        The three panels in this test should look roughly the same (there\n+        may be some dithering differences if you switch display modes\n+        during the test, but the overall look should be the same.  If\n+        completely different colors are being used (either for the orange\n+        background fill, the text, the image, or the rectangles), then the\n+        test has failed.\n+        \"\"\";\n+\n+    private static void init() {\n+\n+        int width = 300, height = 300;\n+\n+        demo = new VImageColors();\n+        Frame f = new Frame(\"PaletteTester\");\n+        f.addWindowListener(new WindowAdapter() {\n+            public void windowClosing(WindowEvent e) {}\n+            public void windowDeiconified(WindowEvent e) { demo.start(); }\n+            public void windowIconified(WindowEvent e) { demo.stop(); }\n+        });\n+        f.add(demo);\n+        f.setSize(new Dimension(width, height));\n+        f.setLocationRelativeTo(null);\n+\n+        PassFailJFrame.addTestWindow(f);\n+        PassFailJFrame.positionTestWindow(f, PassFailJFrame.Position.HORIZONTAL);\n+        f.setVisible(true);\n+\n+        demo.start();\n+\n+    }\/\/End  init()\n+\n+    public static void main( String args[] ) throws Exception {\n+\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                                        .title(\"PaletteTester Instructions\")\n+                                        .instructions(INSTRUCTIONS)\n+                                        .testTimeOut(5)\n+                                        .rows(15)\n+                                        .columns(40)\n+                                        .screenCapture()\n+                                        .build();\n+\n+        EventQueue.invokeAndWait(PaletteTester::init);\n+\n+\n+        try {\n+            passFailJFrame.awaitAndCheck();\n+        } finally {\n+            demo.stop();\n+        }\n+    }\/\/main\n+}\n+\n+\/\/************ Begin classes defined for the test ****************\n+\n+class VImageColors extends JPanel implements Runnable {\n+\n+    VolatileImage vImage;\n+    Image bImage;\n+    private static int width = 300, height = 300;\n+    private Thread thread;\n+    Color fillColor = new Color(240, 188, 136);\n+    Color textColor = new Color(40, 18, 97);\n+    Color rectColor = new Color(0, 150, 0);\n+    File f = new File(System.getProperty(\"test.src\", \".\"), \"duke.gif\");\n+    Image duke = new ImageIcon(f.toString()).getImage();\n+\n+    public void initOffscreen() {\n+        vImage = this.createVolatileImage(getWidth()\/3, getHeight());\n+        bImage = this.createImage(getWidth()\/3, getHeight());\n+    }\n+\n+    public void paint(Graphics g) {\n+        int width = getWidth();\n+        int height = getHeight();\n+\n+        if (vImage == null) {\n+            initOffscreen();\n+        }\n+\n+        \/\/ Render the left panel via VolatileImage\n+        do {\n+            if (\n+                vImage.validate(getGraphicsConfiguration()) ==\n+                VolatileImage.IMAGE_INCOMPATIBLE)\n+            {\n+                vImage = createVolatileImage(width\/3, height);\n+            }\n+            Graphics vg = vImage.createGraphics();\n+            vg.setColor(fillColor);\n+            vg.fillRect(0, 0, width\/3, height);\n+            vg.drawImage(duke, 0, 0, null);\n+            vg.setColor(textColor);\n+            vg.drawString(\"Vol Image\", 5, height-1);\n+            vg.setColor(rectColor);\n+            vg.drawRect(0, 0, width\/3-1, height-1);\n+            vg.dispose();\n+            g.drawImage(vImage, 0, 0, width\/3, height, null);\n+        } while (vImage.contentsLost());\n+\n+        \/\/ Render the middle panel via BufferedImage\n+        Graphics bg = bImage.getGraphics();\n+        bg.setColor(fillColor);\n+        bg.fillRect(0, 0, width\/3, height);\n+        bg.drawImage(duke, 0, 0, null);\n+        bg.setColor(textColor);\n+        bg.drawString(\"Buff Image\", 5, height-1);\n+        bg.setColor(rectColor);\n+        bg.drawRect(0, 0, width\/3-1, height-1);\n+        bg.dispose();\n+        g.drawImage(bImage, width\/3, 0, width\/3, height, null);\n+\n+        \/\/ Render the right panel directly to the screen\n+        g.setColor(fillColor);\n+        g.fillRect(2*(width\/3), 0, width\/3, height);\n+        g.drawImage(duke, 2*(width\/3), 0, null);\n+        g.setColor(textColor);\n+        g.drawString(\"Screen\", 2*(width\/3) + 5, height-1);\n+        g.setColor(rectColor);\n+        g.drawRect(2*(width\/3), 0, width\/3-1, height-1);\n+\n+    }\n+\n+    public void start() {\n+        thread = new Thread(this);\n+        thread.setPriority(Thread.MIN_PRIORITY);\n+        thread.start();\n+    }\n+\n+    public synchronized void stop() {\n+        thread = null;\n+    }\n+\n+    public void run() {\n+        Thread me = Thread.currentThread();\n+        while (thread == me) {\n+            try {\n+                thread.sleep(100);\n+            } catch (InterruptedException e) { break; }\n+        }\n+        thread = null;\n+    }\n+}\n+\n+\/\/************** End classes defined for the test *******************\n","filename":"test\/jdk\/sun\/awt\/PaletteTester.java","additions":204,"deletions":0,"binary":false,"changes":204,"status":"added"},{"patch":"","filename":"test\/jdk\/sun\/awt\/duke.gif","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/awt\/image\/VolatileImage\/duke.gif","status":"copied"}]}