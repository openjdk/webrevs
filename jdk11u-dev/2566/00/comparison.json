{"files":[{"patch":"@@ -0,0 +1,288 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4859006\n+  @summary tests that MIME formats are mapped to flavors properly on X11\n+  @requires (os.family == \"linux\")\n+  @key headful\n+  @run main MimeFormatsTest\n+*\/\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.ClipboardOwner;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.FlavorMap;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.SystemFlavorMap;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.nio.charset.StandardCharsets;\n+\n+\n+public class MimeFormatsTest implements ClipboardOwner {\n+    public static final DataFlavor TEST_FLAVOR =\n+        new DataFlavor(\n+                \"text\/test;charset=UTF-8;class=java.io.InputStream\",\n+                null);\n+\n+    public static class TextTransferable implements Transferable {\n+        private final String text;\n+\n+        public TextTransferable(String text) {\n+            this.text = text;\n+        }\n+\n+        public Object getTransferData(DataFlavor flavor)\n+          throws UnsupportedFlavorException, IOException {\n+            if (!isDataFlavorSupported(TEST_FLAVOR)) {\n+                throw new UnsupportedFlavorException(flavor);\n+            }\n+\n+            return new ByteArrayInputStream(\n+                    text.getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        public DataFlavor[] getTransferDataFlavors(){\n+            return new DataFlavor[] { TEST_FLAVOR };\n+        }\n+\n+        public boolean isDataFlavorSupported(DataFlavor flavor) {\n+            return TEST_FLAVOR.equals(flavor);\n+        }\n+    }\n+\n+    public static final String DATA =\n+        \"\\u0440\\u0443\\u0441\\u0441\\u043a\\u0438\\u0439\";\n+\n+    private String testData = null;\n+\n+    private static final Clipboard clipboard =\n+        Toolkit.getDefaultToolkit().getSystemClipboard();\n+\n+    public void childRun() {\n+        Transferable t = clipboard.getContents(null);\n+        String data = \"\";\n+        try {\n+            data = (String)t.getTransferData(DataFlavor.stringFlavor);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+        System.err.println(\"contents size=\" + data.length());\n+        for (int i = 0; i < data.length(); i++) {\n+            System.err.println(\"     char[\" + i + \"]=\" + (int) data.charAt(i));\n+        }\n+        ClipboardOwner owner = new ClipboardOwner() {\n+                public void lostOwnership(Clipboard clipboard,\n+                                          Transferable contents) {\n+                    System.err.println(\"%d exit\".formatted(\n+                            System.currentTimeMillis()));\n+                    System.err.println(\"Exiting\");\n+                    System.exit(0);\n+                }\n+            };\n+        clipboard.setContents(new StringSelection(data + data), owner);\n+\n+        Object lock = new Object();\n+        synchronized (lock) {\n+            \/\/ Wait to let the parent retrieve the contents.\n+            try {\n+                System.err.println(\"%d wait\".formatted(\n+                        System.currentTimeMillis()));\n+                lock.wait();\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    public void start() {\n+        FlavorMap fm = SystemFlavorMap.getDefaultFlavorMap();\n+        if (fm instanceof SystemFlavorMap) {\n+            SystemFlavorMap sfm = (SystemFlavorMap)fm;\n+            String mimeNative = \"text\/plain;charset=UTF-8\";\n+            sfm.setNativesForFlavor(TEST_FLAVOR,\n+                                    new String[] { mimeNative });\n+            sfm.setFlavorsForNative(mimeNative,\n+                                    new DataFlavor[] { TEST_FLAVOR });\n+        } else {\n+            System.err.println(\"WARNING: system flavor map: \" + fm);\n+            return;\n+        }\n+\n+        clipboard.setContents(new TextTransferable(DATA), this);\n+\n+        try {\n+            String javaPath = System.getProperty(\"java.home\", \"\");\n+            String[] command = {\n+                    javaPath + File.separator + \"bin\" + File.separator + \"java\",\n+                    \"-cp\",\n+                    System.getProperty(\"test.classes\", \".\"),\n+                    \"Child\"\n+            };\n+\n+            Process process = Runtime.getRuntime().exec(command);\n+            ProcessResults pres = ProcessResults.doWaitFor(process);\n+\n+            int returnCode = pres.exitValue;\n+\n+            if (pres.stderr != null && pres.stderr.length() > 0) {\n+                System.err.println(\"========= Child VM System.err ========\");\n+                System.err.print(pres.stderr);\n+                System.err.println(\"======================================\");\n+            }\n+\n+            if (pres.stdout != null && pres.stdout.length() > 0) {\n+                System.err.println(\"========= Child VM System.out ========\");\n+                System.err.print(pres.stdout);\n+                System.err.println(\"======================================\");\n+            }\n+\n+            System.err.println(\"Child return code=\" + returnCode);\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+        }\n+\n+        System.err.println(\"Received data size=\" + testData.length());\n+        for (int i = 0; i < testData.length(); i++) {\n+            System.err.println(\"     char[\" + i + \"]=\" + (int)testData.charAt(i));\n+        }\n+\n+        if (!testData.equals(DATA + DATA)) {\n+            throw new RuntimeException();\n+        }\n+    }\n+\n+    public void lostOwnership(Clipboard clip, Transferable contents) {\n+        Runnable r = new Runnable() {\n+                public void run() {\n+                    try {\n+                        Thread.sleep(100);\n+                    } catch (InterruptedException e) {\n+                        e.printStackTrace();\n+                    }\n+                    Transferable t = clipboard.getContents(null);\n+                    try {\n+                        InputStream is =\n+                            (InputStream)t.getTransferData(TEST_FLAVOR);\n+                        Reader r = new InputStreamReader(is,\n+                                StandardCharsets.UTF_8);\n+                        StringBuffer sb = new StringBuffer();\n+                        int ch = 0;\n+                        while ((ch = r.read()) != -1) {\n+                            System.err.println(\"ch=\" + ch);\n+                            sb.append((char)ch);\n+                        }\n+                        testData = sb.toString();\n+                    } catch (Exception e) {\n+                        e.printStackTrace();\n+                    }\n+                    clipboard.setContents(new TextTransferable(\"\"), null);\n+                }\n+            };\n+        new Thread(r).start();\n+    }\n+\n+    public static void main(String[] args) {\n+        if (!System.getProperty(\"os.name\").startsWith(\"Linux\")) {\n+            return;\n+        }\n+\n+        MimeFormatsTest mimeFormatsTest = new MimeFormatsTest();\n+        mimeFormatsTest.start();\n+    }\n+}\n+\n+class Child {\n+    public static void main(String[] args) {\n+        MimeFormatsTest test = new MimeFormatsTest();\n+        test.childRun();\n+    }\n+}\n+\n+class ProcessResults {\n+    public int exitValue;\n+    public String stdout;\n+    public String stderr;\n+\n+    public ProcessResults() {\n+        exitValue = -1;\n+        stdout = \"\";\n+        stderr = \"\";\n+    }\n+\n+    \/**\n+     * Method to perform a \"wait\" for a process and return its exit value.\n+     * This is a workaround for <code>Process.waitFor()<\/code> never returning.\n+     *\/\n+    public static ProcessResults doWaitFor(Process p) {\n+        ProcessResults pres = new ProcessResults();\n+\n+        InputStream in = null;\n+        InputStream err = null;\n+\n+        try {\n+            in = p.getInputStream();\n+            err = p.getErrorStream();\n+\n+            boolean finished = false;\n+\n+            while (!finished) {\n+                try {\n+                    while (in.available() > 0) {\n+                        pres.stdout += (char)in.read();\n+                    }\n+                    while (err.available() > 0) {\n+                        pres.stderr += (char)err.read();\n+                    }\n+                    \/\/ Ask the process for its exitValue. If the process\n+                    \/\/ is not finished, an IllegalThreadStateException\n+                    \/\/ is thrown. If it is finished, we fall through and\n+                    \/\/ the variable finished is set to true.\n+                    pres.exitValue = p.exitValue();\n+                    finished  = true;\n+                }\n+                catch (IllegalThreadStateException e) {\n+                    \/\/ Process is not finished yet;\n+                    \/\/ Sleep a little to save on CPU cycles\n+                    Thread.currentThread().sleep(500);\n+                }\n+            }\n+            if (in != null) in.close();\n+            if (err != null) err.close();\n+        }\n+        catch (Throwable e) {\n+            System.err.println(\"doWaitFor(): unexpected exception\");\n+            e.printStackTrace();\n+        }\n+        return pres;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/datatransfer\/MimeFormatsTest.java","additions":288,"deletions":0,"binary":false,"changes":288,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 6194489\n+  @summary tests that removeFlavorListener does not throw an exception in any case.\n+  @key headful\n+  @run main RemoveFlavorListenerTest\n+*\/\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.FlavorEvent;\n+import java.awt.datatransfer.FlavorListener;\n+\n+public class RemoveFlavorListenerTest {\n+\n+    public static void main(String[] args) {\n+        try {\n+            FlavorListener fl = new FlavorListener() {\n+                public void flavorsChanged(FlavorEvent e) {}\n+            };\n+            Toolkit.getDefaultToolkit()\n+                    .getSystemClipboard().removeFlavorListener(fl);\n+        } catch (NullPointerException e) {\n+            throw new RuntimeException(\"NullPointerException, test case failed\",\n+                    e);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/datatransfer\/RemoveFlavorListenerTest.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,143 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4516490\n+  @summary verifies that autoscroll is stopped when the drop happens\n+  @key headful\n+  @run main AutoscrollStopTest\n+*\/\n+\n+\n+import java.awt.AWTException;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Insets;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.dnd.Autoscroll;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragGestureRecognizer;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetAdapter;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.InputEvent;\n+\n+\n+public class AutoscrollStopTest extends Frame implements Autoscroll {\n+    static volatile AutoscrollStopTest test = null;\n+\n+    volatile boolean dropHappened = false;\n+\n+    final DragSource dragSource = DragSource.getDefaultDragSource();\n+    final Transferable transferable = new StringSelection(\"TEXT\");\n+    final DragGestureListener dragGestureListener = new DragGestureListener() {\n+            public void dragGestureRecognized(DragGestureEvent dge) {\n+                dge.startDrag(null, transferable);\n+            }\n+        };\n+    final DragGestureRecognizer dragGestureRecognizer =\n+            dragSource.createDefaultDragGestureRecognizer(\n+                    this, DnDConstants.ACTION_COPY_OR_MOVE,\n+                    dragGestureListener);\n+\n+    final DropTargetListener dropTargetListener = new DropTargetAdapter() {\n+        public void drop(DropTargetDropEvent e) {\n+            e.rejectDrop();\n+            dropHappened = true;\n+        }\n+    };\n+\n+    final DropTarget dropTarget = new DropTarget(this, dropTargetListener);\n+\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            test = new AutoscrollStopTest();\n+            test.createUI();\n+        });\n+        try {\n+            test.start();\n+        } finally {\n+            EventQueue.invokeAndWait(test::dispose);\n+        }\n+    }\n+\n+    public static int sign(int n) {\n+        return Integer.compare(n, 0);\n+    }\n+\n+    public void createUI() {\n+        setTitle(\"AutoscrollStopTest\");\n+        setMinimumSize(new Dimension(200, 200));\n+        setLocationRelativeTo(null);\n+        setVisible(true);\n+    }\n+\n+    public void start() throws AWTException {\n+        final Robot robot = new Robot();\n+        try {\n+            robot.setAutoWaitForIdle(true);\n+            robot.setAutoDelay(50);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            final Point srcPoint = this.getLocationOnScreen();\n+            final Dimension d = this.getSize();\n+            srcPoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+            final Point dstPoint = new Point(srcPoint);\n+            dstPoint.translate(d.width \/ 4, d.height \/ 4);\n+\n+            robot.mouseMove(srcPoint.x, srcPoint.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            for (;!srcPoint.equals(dstPoint);\n+                 srcPoint.translate(sign(dstPoint.x - srcPoint.x),\n+                                    sign(dstPoint.y - srcPoint.y))) {\n+                robot.mouseMove(srcPoint.x, srcPoint.y);\n+            }\n+        } finally {\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        }\n+    }\n+\n+    public Insets getAutoscrollInsets() {\n+        final Dimension d = this.getSize();\n+        return new Insets(d.height \/ 2, d.width \/ 2,\n+                d.height \/ 2, d.width \/ 2);\n+    }\n+\n+    public void autoscroll(Point cursorLocation) {\n+        if (dropHappened) {\n+            throw new RuntimeException(\"Test failed\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/AutoscrollStopTest.java","additions":143,"deletions":0,"binary":false,"changes":143,"status":"added"},{"patch":"@@ -0,0 +1,350 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4215643\n+  @summary Tests that the drag source receives mouseReleased event\n+  @key headful\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetContext;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+\n+public class ButtonReleaseTest {\n+\n+    static volatile ButtonPanelFrame buttonPanelFrame;\n+    static final int FRAME_ACTIVATION_TIMEOUT = 1000;\n+    static final int DROP_COMPLETION_TIMEOUT = 4000;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(20);\n+\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                buttonPanelFrame = new ButtonPanelFrame();\n+                buttonPanelFrame.pack();\n+                buttonPanelFrame.setVisible(true);\n+            });\n+\n+            robot.waitForIdle();\n+            robot.delay(FRAME_ACTIVATION_TIMEOUT);\n+\n+            Point p = buttonPanelFrame.getButtonLocation();\n+            Dimension d = buttonPanelFrame.getButtonSize();\n+            p.translate(d.width \/ 2, d.height \/ 2);\n+            robot.mouseMove(p.x, p.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            for (int i = 0; i < d.width; i++) {\n+                p.translate(0, 1);\n+                robot.mouseMove(p.x, p.y);\n+            }\n+\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            try {\n+                Thread.sleep(DROP_COMPLETION_TIMEOUT);\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(\"The test failed.\");\n+            }\n+\n+            if (!buttonPanelFrame.passed()) {\n+                throw new RuntimeException(\n+                        \"The test failed - mouse release was not received.\");\n+            }\n+\n+        } finally {\n+            EventQueue.invokeAndWait(buttonPanelFrame::dispose);\n+        }\n+    }\n+}\n+\n+class ButtonPanelFrame extends Frame {\n+\n+    DnDSource dragSource;\n+    DnDTarget dropTarget;\n+\n+    ButtonPanelFrame() {\n+        Panel mainPanel;\n+\n+        setTitle(\"ButtonReleaseTest - ButtonPanelFrame\");\n+        setSize(200, 200);\n+        setLocationRelativeTo(null);\n+        setLayout(new BorderLayout());\n+\n+        mainPanel = new Panel();\n+        mainPanel.setLayout(new BorderLayout());\n+\n+        mainPanel.setBackground(Color.black);\n+\n+        dropTarget = new DnDTarget(Color.red, Color.yellow);\n+        dragSource = new DnDSource(\"Drag ME!\");\n+\n+        mainPanel.add(dragSource, \"North\");\n+        mainPanel.add(dropTarget, \"Center\");\n+        add(mainPanel, BorderLayout.CENTER);\n+    }\n+\n+    boolean passed() {\n+        return dragSource.passed();\n+    }\n+\n+    Point getButtonLocation() {\n+        return dragSource.getLocationOnScreen();\n+    }\n+\n+    Dimension getButtonSize() {\n+        return dragSource.getSize();\n+    }\n+}\n+\n+class DnDSource extends Button implements Serializable, Transferable,\n+                                          DragGestureListener,\n+                                          DragSourceListener {\n+\n+    private transient DataFlavor df;\n+    private transient int dropAction;\n+    volatile boolean released = false;\n+\n+    DnDSource(String label) {\n+        super(label);\n+\n+        DragSource ds = DragSource.getDefaultDragSource();\n+        ds.createDefaultDragGestureRecognizer(this, DnDConstants.ACTION_COPY,\n+                                              this);\n+        addMouseListener(new MouseAdapter() {\n+            public void mouseReleased(MouseEvent e) {\n+                synchronized(this) {\n+                    released = true;\n+                    notifyAll();\n+                }\n+            }\n+        });\n+        setBackground(Color.yellow);\n+        setForeground(Color.blue);\n+\n+        df = new DataFlavor(DnDSource.class, \"DnDSource\");\n+    }\n+\n+    public void dragGestureRecognized(DragGestureEvent dge) {\n+        dge.startDrag(null, this, this);\n+    }\n+\n+\n+    public void dragEnter(DragSourceDragEvent dsde) {\n+        dsde.getDragSourceContext().setCursor(DragSource.DefaultCopyDrop);\n+    }\n+\n+    public void dragOver(DragSourceDragEvent dsde) {\n+    }\n+\n+    public void dragGestureChanged(DragSourceDragEvent dsde) {\n+    }\n+\n+    public void dragExit(DragSourceEvent dsde) {\n+        dsde.getDragSourceContext().setCursor(null);\n+    }\n+\n+    public void dragDropEnd(DragSourceDropEvent dsde) {\n+    }\n+\n+    public void dropActionChanged(DragSourceDragEvent dsde) {\n+    }\n+\n+    public DataFlavor[] getTransferDataFlavors() {\n+        return new DataFlavor[] { df };\n+    }\n+\n+    public boolean isDataFlavorSupported(DataFlavor sdf) {\n+        return df.equals(sdf);\n+    }\n+\n+    public Object getTransferData(DataFlavor tdf) throws UnsupportedFlavorException , IOException {\n+\n+        Object copy = null;\n+\n+        if (!df.equals(tdf)) {\n+            throw new UnsupportedFlavorException(tdf);\n+        }\n+\n+        Container parent = getParent();\n+        switch (dropAction) {\n+            case DnDConstants.ACTION_COPY:\n+                try {\n+                    copy = this.clone();\n+                } catch (CloneNotSupportedException e) {\n+\n+                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+                    ObjectOutputStream    oos  = new ObjectOutputStream(baos);\n+                    oos.writeObject(this);\n+                    ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n+                    ObjectInputStream ois = new ObjectInputStream(bais);\n+\n+                    try {\n+                      copy = ois.readObject();\n+                    } catch (ClassNotFoundException cnfe) {\n+                      \/\/ do nothing\n+                    }\n+                }\n+                return copy;\n+\n+            case DnDConstants.ACTION_MOVE:\n+                synchronized(this) {\n+                    if (parent != null) parent.remove(this);\n+                }\n+                return this;\n+\n+            case DnDConstants.ACTION_LINK:\n+                return this;\n+\n+            default:\n+                return this;\n+        }\n+    }\n+\n+    boolean passed() {\n+        return !released;\n+    }\n+}\n+\n+class DnDTarget extends Panel implements DropTargetListener {\n+\n+    Color bgColor;\n+    Color htColor;\n+\n+    DnDTarget(Color bgColor, Color htColor) {\n+        super();\n+        this.bgColor = bgColor;\n+        this.htColor = htColor;\n+        setBackground(bgColor);\n+        setDropTarget(new DropTarget(this, this));\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(200, 200);\n+    }\n+\n+    public void dragEnter(DropTargetDragEvent e) {\n+        e.acceptDrag(DnDConstants.ACTION_COPY);\n+        setBackground(htColor);\n+        repaint();\n+    }\n+\n+    public void dragOver(DropTargetDragEvent e) {\n+        e.acceptDrag(DnDConstants.ACTION_COPY);\n+    }\n+\n+    public void dragExit(DropTargetEvent e) {\n+        setBackground(bgColor);\n+        repaint();\n+    }\n+\n+    public void drop(DropTargetDropEvent dtde) {\n+        DropTargetContext dtc = dtde.getDropTargetContext();\n+\n+        if ((dtde.getSourceActions() & DnDConstants.ACTION_COPY) != 0) {\n+            dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+        } else {\n+            dtde.rejectDrop();\n+            return;\n+        }\n+\n+        DataFlavor[] dfs = dtde.getCurrentDataFlavors();\n+\n+        if (dfs != null && dfs.length >= 1) {\n+            Transferable transfer = dtde.getTransferable();\n+            Object obj = null;\n+\n+            try {\n+                obj = transfer.getTransferData(dfs[0]);\n+            } catch (IOException | UnsupportedFlavorException e) {\n+                System.err.println(e.getMessage());\n+                dtc.dropComplete(false);\n+                return;\n+            }\n+\n+            if (obj != null) {\n+                Button button   = null;\n+\n+                try {\n+                    button   = (Button)obj;\n+                } catch (Exception e) {\n+                    System.err.println(e.getMessage());\n+                    dtc.dropComplete(false);\n+                    return;\n+                }\n+                add(button);\n+                repaint();\n+            }\n+        }\n+\n+        setBackground(bgColor);\n+        invalidate();\n+        validate();\n+        repaint();\n+        dtc.dropComplete(true);\n+    }\n+\n+    public void dragScroll(DropTargetDragEvent e) {\n+    }\n+\n+    public void dropActionChanged(DropTargetDragEvent e) {\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/ButtonReleaseTest.java","additions":350,"deletions":0,"binary":false,"changes":350,"status":"added"}]}