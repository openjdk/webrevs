{"files":[{"patch":"@@ -565,8 +565,5 @@\n-  if (log_is_enabled(Info, redefine, class, update)) {\n-    ResourceMark rm;\n-    if (!(*trace_name_printed)) {\n-      log_info(redefine, class, update)(\"adjust: name=%s\", old_method->method_holder()->external_name());\n-      *trace_name_printed = true;\n-    }\n-    log_debug(redefine, class, update, constantpool)\n-          (\"cpc %s entry update: %s(%s)\", entry_type, new_method->name()->as_C_string(), new_method->signature()->as_C_string());\n+  ResourceMark rm;\n+\n+  if (!(*trace_name_printed)) {\n+    log_info(redefine, class, update)(\"adjust: name=%s\", old_method->method_holder()->external_name());\n+    *trace_name_printed = true;\n@@ -574,0 +571,2 @@\n+  log_trace(redefine, class, update, constantpool)\n+    (\"cpc %s entry update: %s\", entry_type, new_method->external_name());\n@@ -820,0 +819,1 @@\n+  ResourceMark rm;\n@@ -821,2 +821,5 @@\n-    if (entry_at(i)->get_interesting_method_entry() != NULL &&\n-        !entry_at(i)->check_no_old_or_obsolete_entries()) {\n+    Method* m = entry_at(i)->get_interesting_method_entry();\n+    if (m != NULL && !entry_at(i)->check_no_old_or_obsolete_entries()) {\n+      log_trace(redefine, class, update, constantpool)\n+        (\"cpcache check found old method entry: class: %s, old: %d, obsolete: %d, method: %s\",\n+         constant_pool()->pool_holder()->external_name(), m->is_old(), m->is_obsolete(), m->external_name());\n","filename":"src\/hotspot\/share\/oops\/cpCache.cpp","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -969,0 +969,2 @@\n+  ResourceMark rm;\n+\n@@ -986,11 +988,5 @@\n-    if (log_is_enabled(Info, redefine, class, update)) {\n-      ResourceMark rm;\n-      if (!(*trace_name_printed)) {\n-        log_info(redefine, class, update)\n-          (\"adjust: klassname=%s for methods from name=%s\",\n-           _klass->external_name(), old_method->method_holder()->external_name());\n-        *trace_name_printed = true;\n-      }\n-      log_debug(redefine, class, update, vtables)\n-        (\"vtable method update: %s(%s), updated default = %s\",\n-         new_method->name()->as_C_string(), new_method->signature()->as_C_string(), updated_default ? \"true\" : \"false\");\n+    if (!(*trace_name_printed)) {\n+      log_info(redefine, class, update)\n+        (\"adjust: klassname=%s for methods from name=%s\",\n+         _klass->external_name(), old_method->method_holder()->external_name());\n+      *trace_name_printed = true;\n@@ -998,0 +994,3 @@\n+    log_trace(redefine, class, update, vtables)\n+      (\"vtable method update: class: %s method: %s, updated default = %s\",\n+       _klass->external_name(), new_method->external_name(), updated_default ? \"true\" : \"false\");\n@@ -1003,0 +1002,2 @@\n+  ResourceMark rm;\n+\n@@ -1007,0 +1008,3 @@\n+      log_trace(redefine, class, update, vtables)\n+        (\"vtable check found old method entry: class: %s old: %d obsolete: %d, method: %s\",\n+         _klass->external_name(), m->is_old(), m->is_obsolete(), m->external_name());\n@@ -1295,1 +1299,1 @@\n-\n+  ResourceMark rm;\n@@ -1297,0 +1301,1 @@\n+\n@@ -1306,8 +1311,3 @@\n-    if (log_is_enabled(Info, redefine, class, update)) {\n-      ResourceMark rm;\n-      if (!(*trace_name_printed)) {\n-        log_info(redefine, class, update)(\"adjust: name=%s\", old_method->method_holder()->external_name());\n-        *trace_name_printed = true;\n-      }\n-      log_trace(redefine, class, update, itables)\n-        (\"itable method update: %s(%s)\", new_method->name()->as_C_string(), new_method->signature()->as_C_string());\n+    if (!(*trace_name_printed)) {\n+      log_info(redefine, class, update)(\"adjust: name=%s\", old_method->method_holder()->external_name());\n+      *trace_name_printed = true;\n@@ -1315,0 +1315,2 @@\n+    log_trace(redefine, class, update, itables)\n+      (\"itable method update: class: %s method: %s\", _klass->external_name(), new_method->external_name());\n@@ -1320,0 +1322,1 @@\n+  ResourceMark rm;\n@@ -1321,0 +1324,1 @@\n+\n@@ -1325,0 +1329,3 @@\n+      log_trace(redefine, class, update, itables)\n+        (\"itable check found old method entry: class: %s old: %d obsolete: %d, method: %s\",\n+         _klass->external_name(), m->is_old(), m->is_obsolete(), m->external_name());\n","filename":"src\/hotspot\/share\/oops\/klassVtable.cpp","additions":27,"deletions":20,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -65,0 +65,2 @@\n+\n+\/\/ This flag is global as the constructor does not reset it:\n@@ -66,1 +68,0 @@\n-bool      VM_RedefineClasses::_has_null_class_loader = false;\n@@ -78,2 +79,0 @@\n-  _has_redefined_Object = false;\n-  _has_null_class_loader = false;\n@@ -3442,1 +3441,4 @@\n-  \/\/ array class vtables also\n+  \/\/ array class vtables also. The _has_redefined_Object flag is global.\n+  \/\/ Once the java.lang.Object has been redefined (by the current or one\n+  \/\/ of the previous VM_RedefineClasses operations) we have to always\n+  \/\/ adjust method entries for array classes.\n@@ -3460,16 +3462,0 @@\n-    \/\/ HotSpot specific optimization! HotSpot does not currently\n-    \/\/ support delegation from the bootstrap class loader to a\n-    \/\/ user-defined class loader. This means that if the bootstrap\n-    \/\/ class loader is the initiating class loader, then it will also\n-    \/\/ be the defining class loader. This also means that classes\n-    \/\/ loaded by the bootstrap class loader cannot refer to classes\n-    \/\/ loaded by a user-defined class loader. Note: a user-defined\n-    \/\/ class loader can delegate to the bootstrap class loader.\n-    \/\/\n-    \/\/ If the current class being redefined has a user-defined class\n-    \/\/ loader as its defining class loader, then we can skip all\n-    \/\/ classes loaded by the bootstrap class loader.\n-    if (!_has_null_class_loader && ik->class_loader() == NULL) {\n-      return;\n-    }\n-\n@@ -3494,7 +3480,11 @@\n-    \/\/ Special case: if the current class being redefined, then new_cp\n-    \/\/ has already been attached to the_class and old_cp has already\n-    \/\/ been added as a previous version. The new_cp doesn't have any\n-    \/\/ cached references to old methods so it doesn't need to be\n-    \/\/ updated. We can simply start with the previous version(s) in\n-    \/\/ that case.\n-    constantPoolHandle other_cp;\n+    \/\/ Special case: if the current class is being redefined by the current\n+    \/\/ VM_RedefineClasses operation, then new_cp has already been attached\n+    \/\/ to the_class and old_cp has already been added as a previous version.\n+    \/\/ The new_cp doesn't have any cached references to old methods so it\n+    \/\/ doesn't need to be updated and we could optimize by skipping it.\n+    \/\/ However, the current class can be marked as being redefined by another\n+    \/\/ VM_RedefineClasses operation which has already executed its doit_prologue\n+    \/\/ and needs cpcache method entries adjusted. For simplicity, the cpcache\n+    \/\/ update is done unconditionally. It should result in doing nothing for\n+    \/\/ classes being redefined by the current VM_RedefineClasses operation.\n+    \/\/ Method entries in the previous version(s) are adjusted as well.\n@@ -3503,7 +3493,5 @@\n-    if (!ik->is_being_redefined()) {\n-      \/\/ this klass' constant pool cache may need adjustment\n-      other_cp = constantPoolHandle(ik->constants());\n-      cp_cache = other_cp->cache();\n-      if (cp_cache != NULL) {\n-        cp_cache->adjust_method_entries(&trace_name_printed);\n-      }\n+    \/\/ this klass' constant pool cache may need adjustment\n+    ConstantPool* other_cp = ik->constants();\n+    cp_cache = other_cp->cache();\n+    if (cp_cache != NULL) {\n+      cp_cache->adjust_method_entries(&trace_name_printed);\n@@ -3950,1 +3938,1 @@\n-  \/\/ Set some flags to control and optimize adjusting method entries\n+  \/\/ Set a flag to control and optimize adjusting method entries\n@@ -3952,1 +3940,0 @@\n-  _has_null_class_loader |= the_class->class_loader() == NULL;\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":23,"deletions":36,"binary":false,"changes":59,"status":"modified"}]}