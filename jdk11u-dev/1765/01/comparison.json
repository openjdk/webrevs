{"files":[{"patch":"@@ -51,1 +51,1 @@\n-        Path nativePath = Paths.get(System.getProperty(\"test.nativepath\"));\n+        Path nativePath = Paths.get(Utils.TEST_NATIVE_PATH);\n","filename":"test\/hotspot\/jtreg\/gtest\/GTestWrapper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,4 +25,1 @@\n-import java.io.File;\n-import java.nio.file.Paths;\n-import java.time.Duration;\n-\n+import jdk.test.lib.Utils;\n@@ -46,1 +43,0 @@\n-\n@@ -50,1 +46,0 @@\n-        String lib = System.getProperty(\"test.nativepath\");\n@@ -63,1 +58,1 @@\n-                    \"-Djava.library.path=\" + lib,\n+                    \"-Djava.library.path=\" + Utils.TEST_NATIVE_PATH,\n@@ -74,1 +69,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/handshake\/HandshakeTransitionTest.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-\/**\n+\/*\n@@ -38,1 +38,0 @@\n-import jdk.test.lib.process.ProcessTools;\n@@ -50,1 +49,1 @@\n-        Path launcher = Paths.get(System.getProperty(\"test.nativepath\"), \"FPRegs\" + (Platform.isWindows() ? \".exe\" : \"\"));\n+        Path launcher = Paths.get(Utils.TEST_NATIVE_PATH, \"FPRegs\" + (Platform.isWindows() ? \".exe\" : \"\"));\n@@ -56,2 +55,2 @@\n-        OutputAnalyzer outputf = new OutputAnalyzer(pb.start());\n-        outputf.shouldHaveExitValue(0);\n+        OutputAnalyzer oa = new OutputAnalyzer(pb.start());\n+        oa.shouldHaveExitValue(0);\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/CalleeSavedRegisters\/FPRegs.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -23,0 +23,2 @@\n+\n+import jdk.test.lib.Utils;\n@@ -60,1 +62,1 @@\n-        String jlp = \"-Djava.library.path=\" + System.getProperty(\"test.nativepath\");\n+        String jlp = \"-Djava.library.path=\" + Utils.TEST_NATIVE_PATH;\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/atExit\/TestAtExit.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-        if ( (args == null) || (args.length < 1) ) {\n+        if ((args == null) || (args.length < 1)) {\n@@ -68,1 +68,1 @@\n-        Path test = Paths.get(System.getProperty(\"test.nativepath\"))\n+        Path test = Paths.get(Utils.TEST_NATIVE_PATH)\n@@ -90,2 +90,3 @@\n-        cmd.addAll(Arrays.asList(args)\n-                         .subList(1, args.length));\n+        var argList = Arrays.asList(args)\n+                            .subList(1, args.length);\n+        cmd.addAll(argList);\n@@ -95,1 +96,1 @@\n-        for (String mode : new String[]{\"sigset\", \"sigaction\"}) {\n+        for (String mode : new String[] {\"sigset\", \"sigaction\"}) {\n@@ -99,1 +100,1 @@\n-                System.out.printf(\"START TESTING: SIGNAL = %s, MODE = %s, SCENARIO=%s%n\",signame, mode, scenario);\n+                System.out.printf(\"START TESTING: SIGNAL = %s, MODE = %s, SCENARIO=%s%n\", signame, mode, scenario);\n@@ -120,1 +121,1 @@\n-                       System.out.println(\"PASSED with exit code 0\");\n+                        System.out.println(\"PASSED with exit code 0\");\n","filename":"test\/hotspot\/jtreg\/runtime\/signal\/SigTestDriver.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,2 +23,1 @@\n-import java.nio.file.Paths;\n-import jdk.test.lib.dcmd.*;\n+\n@@ -26,0 +25,7 @@\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.dcmd.CommandExecutor;\n+import jdk.test.lib.dcmd.JMXExecutor;\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n+\n+import java.nio.file.Paths;\n+\n@@ -45,1 +51,1 @@\n-        return Paths.get(System.getProperty(\"test.nativepath\"), libname)\n+        return Paths.get(Utils.TEST_NATIVE_PATH, libname)\n@@ -51,1 +57,1 @@\n-    public void jmx() throws Throwable {\n+    public void jmx() {\n@@ -56,1 +62,1 @@\n-    public void cli() throws Throwable {\n+    public void cli() {\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/jvmti\/AttachFailed\/AttachFailedTestBase.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import jdk.test.lib.Utils;\n@@ -35,1 +36,1 @@\n-        Path src = Paths.get( System.getProperty(\"test.nativepath\", \".\"))\n+        Path src = Paths.get(Utils.TEST_NATIVE_PATH)\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/NativeLibraryCopier.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,0 +26,4 @@\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.Utils;\n+\n@@ -32,0 +36,3 @@\n+import java.security.AccessController;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n@@ -42,1 +49,0 @@\n-import java.util.function.Predicate;\n@@ -44,0 +50,1 @@\n+import java.util.function.Predicate;\n@@ -45,7 +52,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n-\n-import jdk.test.lib.JDKToolFinder;\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.Utils;\n@@ -57,0 +57,1 @@\n+\n@@ -61,0 +62,1 @@\n+\n@@ -73,1 +75,2 @@\n-     * @param name The process name\n+     *\n+     * @param name           The process name\n@@ -80,2 +83,2 @@\n-    throws IOException {\n-        return startProcess(name, processBuilder, (Consumer<String>)null);\n+            throws IOException {\n+        return startProcess(name, processBuilder, (Consumer<String>) null);\n@@ -88,2 +91,3 @@\n-     * @param name The process name\n-     * @param consumer {@linkplain Consumer} instance to process the in-streams\n+     *\n+     * @param name           The process name\n+     * @param consumer       {@linkplain Consumer} instance to process the in-streams\n@@ -98,1 +102,1 @@\n-    throws IOException {\n+            throws IOException {\n@@ -114,1 +118,2 @@\n-     * @param name The process name\n+     *\n+     * @param name           The process name\n@@ -116,6 +121,6 @@\n-     * @param linePredicate The {@linkplain Predicate} to use on the STDOUT\n-     *                      Used to determine the moment the target app is\n-     *                      properly warmed-up.\n-     *                      It can be null - in that case the warmup is skipped.\n-     * @param timeout The timeout for the warmup waiting; -1 = no wait; 0 = wait forever\n-     * @param unit The timeout {@linkplain TimeUnit}\n+     * @param linePredicate  The {@linkplain Predicate} to use on the STDOUT\n+     *                       Used to determine the moment the target app is\n+     *                       properly warmed-up.\n+     *                       It can be null - in that case the warmup is skipped.\n+     * @param timeout        The timeout for the warmup waiting; -1 = no wait; 0 = wait forever\n+     * @param unit           The timeout {@linkplain TimeUnit}\n@@ -132,1 +137,1 @@\n-    throws IOException, InterruptedException, TimeoutException {\n+            throws IOException, InterruptedException, TimeoutException {\n@@ -144,1 +149,2 @@\n-     * @param name The process name\n+     *\n+     * @param name           The process name\n@@ -146,7 +152,7 @@\n-     * @param lineConsumer  The {@linkplain Consumer} the lines will be forwarded to\n-     * @param linePredicate The {@linkplain Predicate} to use on the STDOUT\n-     *                      Used to determine the moment the target app is\n-     *                      properly warmed-up.\n-     *                      It can be null - in that case the warmup is skipped.\n-     * @param timeout The timeout for the warmup waiting; -1 = no wait; 0 = wait forever\n-     * @param unit The timeout {@linkplain TimeUnit}\n+     * @param lineConsumer   The {@linkplain Consumer} the lines will be forwarded to\n+     * @param linePredicate  The {@linkplain Predicate} to use on the STDOUT\n+     *                       Used to determine the moment the target app is\n+     *                       properly warmed-up.\n+     *                       It can be null - in that case the warmup is skipped.\n+     * @param timeout        The timeout for the warmup waiting; -1 = no wait; 0 = wait forever\n+     * @param unit           The timeout {@linkplain TimeUnit}\n@@ -164,2 +170,2 @@\n-    throws IOException, InterruptedException, TimeoutException {\n-        System.out.println(\"[\"+name+\"]:\" + processBuilder.command().stream().collect(Collectors.joining(\" \")));\n+            throws IOException, InterruptedException, TimeoutException {\n+        System.out.println(\"[\" + name + \"]:\" + String.join(\" \", processBuilder.command()));\n@@ -214,1 +220,1 @@\n-            for(Map.Entry<Thread, StackTraceElement[]> s : Thread.getAllStackTraces().entrySet()) {\n+            for (Map.Entry<Thread, StackTraceElement[]> s : Thread.getAllStackTraces().entrySet()) {\n@@ -238,1 +244,2 @@\n-     * @param name The process name\n+     *\n+     * @param name           The process name\n@@ -240,4 +247,4 @@\n-     * @param linePredicate The {@linkplain Predicate} to use on the STDOUT\n-     *                      Used to determine the moment the target app is\n-     *                      properly warmed-up.\n-     *                      It can be null - in that case the warmup is skipped.\n+     * @param linePredicate  The {@linkplain Predicate} to use on the STDOUT\n+     *                       Used to determine the moment the target app is\n+     *                       properly warmed-up.\n+     *                       It can be null - in that case the warmup is skipped.\n@@ -253,1 +260,1 @@\n-    throws IOException, InterruptedException, TimeoutException {\n+            throws IOException, InterruptedException, TimeoutException {\n@@ -268,1 +275,1 @@\n-     *\n+     * <p>\n@@ -278,1 +285,1 @@\n-     *\n+     * <p>\n@@ -290,1 +297,1 @@\n-     *\n+     * <p>\n@@ -331,2 +338,1 @@\n-        System.out.println(\"\\t\" +  t +\n-                           \" stack: (length = \" + stack.length + \")\");\n+        System.out.println(\"\\t\" + t + \" stack: (length = \" + stack.length + \")\");\n@@ -362,1 +368,1 @@\n-     *\n+     * <p>\n@@ -365,1 +371,1 @@\n-     *\n+     * <p>\n@@ -377,1 +383,0 @@\n-     * @see #executeTestJvm(String...)\n@@ -380,0 +385,1 @@\n+     * @see #executeTestJvm(String...)\n@@ -388,0 +394,1 @@\n+     *\n@@ -399,1 +406,2 @@\n-     * @param pb The ProcessBuilder to execute.\n+     *\n+     * @param pb    The ProcessBuilder to execute.\n@@ -410,3 +418,3 @@\n-               try (PrintStream ps = new PrintStream(p.getOutputStream())) {\n-                   ps.print(input);\n-               }\n+                try (PrintStream ps = new PrintStream(p.getOutputStream())) {\n+                    ps.print(input);\n+                }\n@@ -436,1 +444,1 @@\n-     *\n+     * <p>\n@@ -448,1 +456,2 @@\n-     * @param pb The executed process.\n+     *\n+     * @param pb     The executed process.\n@@ -454,10 +463,7 @@\n-        String exitValue = output == null ? \"null\": Integer.toString(output.getExitValue());\n-        StringBuilder logMsg = new StringBuilder();\n-        final String nl = System.getProperty(\"line.separator\");\n-        logMsg.append(\"--- ProcessLog ---\" + nl);\n-        logMsg.append(\"cmd: \" + getCommandLine(pb) + nl);\n-        logMsg.append(\"exitvalue: \" + exitValue + nl);\n-        logMsg.append(\"stderr: \" + stderr + nl);\n-        logMsg.append(\"stdout: \" + stdout + nl);\n-\n-        return logMsg.toString();\n+        String exitValue = output == null ? \"null\" : Integer.toString(output.getExitValue());\n+        return String.format(\"--- ProcessLog ---%n\" +\n+                             \"cmd: %s%n\" +\n+                             \"exitvalue: %s%n\" +\n+                             \"stderr: %s%n\" +\n+                             \"stdout: %s%n\",\n+                             getCommandLine(pb), exitValue, stderr, stdout);\n@@ -483,1 +489,1 @@\n-     *\n+     * <p>\n@@ -491,1 +497,1 @@\n-        String cmdLine = Arrays.stream(cmds).collect(Collectors.joining(\" \"));\n+        String cmdLine = String.join(\" \", cmds);\n@@ -501,1 +507,1 @@\n-     *\n+     * <p>\n@@ -524,1 +530,1 @@\n-     * @param args Arguments for the executable.\n+     * @param args           Arguments for the executable.\n@@ -530,3 +536,3 @@\n-        String executable = Paths.get(System.getProperty(\"test.nativepath\"), executableName)\n-            .toAbsolutePath()\n-            .toString();\n+        String executable = Paths.get(Utils.TEST_NATIVE_PATH, executableName)\n+                                 .toAbsolutePath()\n+                                 .toString();\n@@ -536,2 +542,1 @@\n-        addJvmLib(pb);\n-        return pb;\n+        return addJvmLib(pb);\n@@ -552,1 +557,1 @@\n-        if ( (currentLibPath != null) && !currentLibPath.isEmpty() ) {\n+        if ((currentLibPath != null) && !currentLibPath.isEmpty() ) {\n@@ -564,1 +569,1 @@\n-                (PrivilegedExceptionAction<Process>) () -> pb.start());\n+                    (PrivilegedExceptionAction<Process>) pb::start);\n@@ -566,3 +571,1 @@\n-            @SuppressWarnings(\"unchecked\")\n-            IOException t = (IOException) e.getException();\n-            throw t;\n+            throw (IOException) e.getException();\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":80,"deletions":77,"binary":false,"changes":157,"status":"modified"}]}