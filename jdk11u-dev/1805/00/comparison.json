{"files":[{"patch":"@@ -125,0 +125,5 @@\n+    \/**\n+     * Argument for command-line option \"--legal-notices\".\n+     *\/\n+    public String legalnotices = \"\";\n+\n@@ -659,0 +664,7 @@\n+            new Option(resources, \"--legal-notices\", 1) {\n+                @Override\n+                public boolean process(String opt,  List<String> args) {\n+                    legalnotices = args.get(0);\n+                    return true;\n+                }\n+            },\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlConfiguration.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -28,0 +28,7 @@\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.Writer;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.InvalidPathException;\n+import java.nio.file.Path;\n@@ -209,0 +216,2 @@\n+\n+        copyLegalFiles(configuration.createindex);\n@@ -231,0 +240,40 @@\n+    private void copyLegalFiles(boolean includeJQuery) throws DocletException {\n+        Path legalNoticesDir;\n+        String legalNotices = configuration.legalnotices;\n+        switch (legalNotices) {\n+            case \"\":\n+            case \"default\" :\n+                Path javaHome = Path.of(System.getProperty(\"java.home\"));\n+                legalNoticesDir = javaHome.resolve(\"legal\").resolve(getClass().getModule().getName());\n+                break;\n+            case \"none\":\n+                return;\n+            default:\n+                try {\n+                    legalNoticesDir = Path.of(legalNotices);\n+                } catch (InvalidPathException e) {\n+                    messages.error(\"doclet.Error_invalid_path_for_legal_notices\",\n+                            legalNotices, e.getMessage());\n+                    return;\n+                }\n+        }\n+\n+        if (Files.exists(legalNoticesDir)) {\n+            try (DirectoryStream<Path> ds = Files.newDirectoryStream(legalNoticesDir)) {\n+                for (Path entry: ds) {\n+                    if (!Files.isRegularFile(entry)) {\n+                        continue;\n+                    }\n+                    if (entry.getFileName().toString().startsWith(\"jquery\") && !includeJQuery) {\n+                        continue;\n+                    }\n+                    DocPath filePath = DocPaths.LEGAL.resolve(entry.getFileName().toString());\n+                    DocFile df = DocFile.createFileForOutput(configuration, filePath);\n+                    df.copyFile(DocFile.createFileForInput(configuration, entry));\n+                }\n+            } catch (IOException e) {\n+                messages.error(\"doclet.Error_copying_legal_notices\", e);\n+            }\n+        }\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDoclet.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -238,0 +238,5 @@\n+# 0: an exception\n+doclet.Error_copying_legal_notices=Error while copying legal notices: {0}\n+# 0: the path; 1: the detail message for the exception\n+doclet.Error_invalid_path_for_legal_notices=Invalid path ''{0}'' for legal notices: {1}\n+\n@@ -324,0 +329,5 @@\n+doclet.usage.legal-notices.parameters=\\\n+    'default' | 'none' | <directory>\n+doclet.usage.legal-notices.description=\\\n+    Control legal notices in the generated output\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/standard.properties","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import java.nio.file.Path;\n@@ -64,0 +65,5 @@\n+    \/** Create a DocFile for a file that will be opened for reading. *\/\n+    public static DocFile createFileForInput(BaseConfiguration configuration, Path file) {\n+        return DocFileFactory.getFactory(configuration).createFileForInput(file);\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/DocFile.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.nio.file.Path;\n@@ -81,0 +82,3 @@\n+    \/** Create a DocFile for a file that will be opened for reading. *\/\n+    abstract DocFile createFileForInput(Path file);\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/DocFileFactory.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-    \/** The name of the directory for the jQuery. *\/\n+    \/** The name of the directory for the jQuery files. *\/\n@@ -133,0 +133,3 @@\n+    \/** The name of the directory for legal files. *\/\n+    public static final DocPath LEGAL = DocPath.create(\"legal\");\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/DocPaths.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -112,0 +112,5 @@\n+    @Override\n+    public DocFile createFileForInput(Path file) {\n+        return new StandardDocFile(file);\n+    }\n+\n@@ -143,1 +148,1 @@\n-        private StandardDocFile(Path file) {\n+        StandardDocFile(Path file) {\n@@ -148,1 +153,1 @@\n-        private StandardDocFile(Location location, DocPath path) {\n+        StandardDocFile(Location location, DocPath path) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/StandardDocFileFactory.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,188 @@\n+\/*\n+ * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8259530\n+ * @summary Generated docs contain MIT\/GPL-licenced works without reproducing the licence\n+ * @library  \/tools\/lib ..\/lib\n+ * @modules  jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build toolbox.ToolBox JavadocTester\n+ * @run main TestLegalNotices\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.function.Predicate;\n+\n+\/\/ import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestLegalNotices extends JavadocTester {\n+    public static void main(String... args) throws Exception {\n+        TestLegalNotices tester = new TestLegalNotices();\n+        tester.runTests(m -> new Object[]{Path.of(m.getName())});\n+    }\n+\n+    private final ToolBox tb = new ToolBox();\n+\n+    enum OptionKind {\n+        UNSET, DEFAULT, NONE, DIR\n+    }\n+\n+    enum IndexKind {\n+        INDEX, NO_INDEX\n+    }\n+\n+\n+    @Test\n+    public void testCombo(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"package p; public class C { }\");\n+        Path legal = base.resolve(\"toy-legal\");\n+        tb.writeFile(legal.resolve(\"TOY-LICENSE\"), \"This is a demo license.\");\n+\n+        for (var optionKind : OptionKind.values()) {\n+            for (var indexKind : IndexKind.values()) {\n+                test(base, src, legal, optionKind, indexKind);\n+            }\n+        }\n+    }\n+\n+    void test(Path base, Path src, Path legal, OptionKind optionKind, IndexKind indexKind) throws IOException {\n+        System.out.println(\"testing \" + optionKind + \" \" + indexKind);\n+        Path out = base.resolve(optionKind + \"-\" + indexKind).resolve(\"out\");\n+        List<String> args = new ArrayList<>();\n+        args.addAll(List.of(\n+                \"-d\", out.toString()));\n+\n+        if (indexKind == IndexKind.NO_INDEX) {\n+            args.add(\"-noindex\");\n+        }\n+\n+        args.addAll(List.of(\n+                \"-Xdoclint:-missing\",\n+                \"--source-path\", src.toString(),\n+                \"p\"));\n+\n+        String value = null;\n+        switch (optionKind) {\n+            case UNSET:\n+                value = null;\n+                break;\n+            case DEFAULT:\n+                value = \"default\";\n+                break;\n+            case NONE:\n+                value = \"none\";\n+                break;\n+            case DIR:\n+                value=  legal.toString();\n+                break;\n+        }\n+        if (value != null) {\n+            args.addAll(List.of(\"--legal-notices\", value));\n+        }\n+        javadoc(args.toArray(new String[0]));\n+\n+        Set<Path> expectFiles = getExpectFiles(optionKind, indexKind, legal);\n+        Set<Path> foundFiles = listFiles(out.resolve(\"legal\"));\n+\n+        checking(\"Checking legal notice files\");\n+        super.out.println(\"Expected: \" + expectFiles);\n+        super.out.println(\"   Found: \" + foundFiles);\n+        if (foundFiles.equals(expectFiles)) {\n+            passed(\"Found all expected files\");\n+        }\n+    }\n+\n+    Set<Path> getExpectFiles(OptionKind optionKind, IndexKind indexKind, Path legal) throws IOException {\n+        switch (optionKind) {\n+            case UNSET:\n+            case DEFAULT:\n+                Path javaHome = Path.of(System.getProperty(\"java.home\"));\n+                Path legal_javadoc = javaHome.resolve(\"legal\").resolve(\"jdk.javadoc\");\n+                return listFiles(legal_javadoc, p -> {\n+                        switch (indexKind) {\n+                            case INDEX:\n+                                return true;\n+                            case NO_INDEX:\n+                                return !p.getFileName().toString().contains(\"jquery\");\n+                            default:\n+                               throw new AssertionError(\"Should not reach\");\n+                        } } );\n+\n+\/*\n+                return listFiles(legal_javadoc, p -> {\n+                        if (indexKind==IndexKind.INDEX) {\n+                            return true;\n+                        }\n+                        else if (indexKind==IndexKind.NO_INDEX) {\n+                            return !p.getFileName().toString().contains(\"jquery\");\n+                        }\n+                        else {\n+                            return false;\n+                        } } );\n+*\/\n+\n+\/*\n+                return listFiles(legal_javadoc, p ->\n+                        (indexKind==IndexKind.INDEX) ? true\n+                      : (indexKind==IndexKind.NO_INDEX) ? !p.getFileName().toString().contains(\"jquery\") : false);\n+*\/\n+\n+            case NONE:\n+                return Collections.emptySet();\n+            case DIR:\n+                return listFiles(legal);\n+        }\n+        throw new IllegalStateException();\n+    }\n+\n+    Set<Path> listFiles(Path dir) throws IOException {\n+        return listFiles(dir, p -> true);\n+    }\n+\n+    Set<Path> listFiles(Path dir, Predicate<Path> filter) throws IOException {\n+        if (!Files.exists(dir)) {\n+            return Collections.emptySet();\n+        }\n+\n+        try (DirectoryStream<Path> ds = Files.newDirectoryStream(dir)) {\n+            Set<Path> files = new TreeSet<>();\n+            for (Path p : ds) {\n+                if (!Files.isDirectory(p) && filter.test(p)) {\n+                    files.add(p.getFileName());\n+                }\n+            }\n+            return files;\n+        }\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testLegalNotices\/TestLegalNotices.java","additions":188,"deletions":0,"binary":false,"changes":188,"status":"added"},{"patch":"@@ -171,2 +171,2 @@\n-            \/\/ ignore this system property name\n-            if (ck.equals(\"javadoc.internal.show.taglets\"))\n+            \/\/ ignore these system property names\n+            if (ck.equals(\"javadoc.internal.show.taglets\") || ck.equals(\"javadoc.legal-notices\"))\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/CheckResourceKeys.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -152,1 +152,3 @@\n-            Set<String> unexpected = new TreeSet<String>(foundFiles);\n+            Set<String> unexpected = foundFiles.stream()\n+                    .filter(p -> !p.startsWith(\"legal\"))\n+                    .collect(Collectors.toCollection(TreeSet::new));\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/api\/basic\/APITest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -152,1 +152,3 @@\n-            Set<String> unexpected = new TreeSet<String>(foundFiles);\n+            Set<String> unexpected = foundFiles.stream()\n+                    .filter(p -> !p.startsWith(\"legal\"))\n+                    .collect(Collectors.toCollection(TreeSet::new));\n","filename":"test\/langtools\/tools\/javadoc\/api\/basic\/APITest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}