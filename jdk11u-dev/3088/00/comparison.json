{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+#include <lcms2_plugin.h>\n@@ -36,35 +37,0 @@\n-\n-#define ALIGNLONG(x) (((x)+3) & ~(3))         \/\/ Aligns to DWORD boundary\n-\n-#ifdef USE_BIG_ENDIAN\n-#define AdjustEndianess32(a)\n-#else\n-\n-static\n-void AdjustEndianess32(cmsUInt8Number *pByte)\n-{\n-    cmsUInt8Number temp1;\n-    cmsUInt8Number temp2;\n-\n-    temp1 = *pByte++;\n-    temp2 = *pByte++;\n-    *(pByte-1) = *pByte;\n-    *pByte++ = temp2;\n-    *(pByte-3) = *pByte;\n-    *pByte = temp1;\n-}\n-\n-#endif\n-\n-\/\/ Transports to properly encoded values - note that icc profiles does use\n-\/\/ big endian notation.\n-\n-static\n-cmsInt32Number TransportValue32(cmsInt32Number Value)\n-{\n-    cmsInt32Number Temp = Value;\n-\n-    AdjustEndianess32((cmsUInt8Number*) &Temp);\n-    return Temp;\n-}\n-\n@@ -787,4 +753,6 @@\n-  cmsSetHeaderFlags(pf, pfHeader.flags);\n-  cmsSetHeaderManufacturer(pf, pfHeader.manufacturer);\n-  cmsSetHeaderModel(pf, pfHeader.model);\n-  cmsSetHeaderAttributes(pf, pfHeader.attributes);\n+  cmsSetHeaderFlags(pf, _cmsAdjustEndianess32(pfHeader.flags));\n+  cmsSetHeaderManufacturer(pf, _cmsAdjustEndianess32(pfHeader.manufacturer));\n+  cmsSetHeaderModel(pf, _cmsAdjustEndianess32(pfHeader.model));\n+  cmsUInt64Number attributes;\n+  _cmsAdjustEndianess64(&attributes, &pfHeader.attributes);\n+  cmsSetHeaderAttributes(pf, attributes);\n@@ -792,5 +760,5 @@\n-  cmsSetHeaderRenderingIntent(pf, pfHeader.renderingIntent);\n-  cmsSetPCS(pf, pfHeader.pcs);\n-  cmsSetColorSpace(pf, pfHeader.colorSpace);\n-  cmsSetDeviceClass(pf, pfHeader.deviceClass);\n-  cmsSetEncodedICCversion(pf, pfHeader.version);\n+  cmsSetHeaderRenderingIntent(pf, _cmsAdjustEndianess32(pfHeader.renderingIntent));\n+  cmsSetPCS(pf, _cmsAdjustEndianess32(pfHeader.pcs));\n+  cmsSetColorSpace(pf, _cmsAdjustEndianess32(pfHeader.colorSpace));\n+  cmsSetDeviceClass(pf, _cmsAdjustEndianess32(pfHeader.deviceClass));\n+  cmsSetEncodedICCversion(pf, _cmsAdjustEndianess32(pfHeader.version));\n","filename":"src\/java.desktop\/share\/native\/liblcms\/LCMS.c","additions":13,"deletions":45,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.color.ColorSpace;\n+import java.awt.color.ICC_Profile;\n+import java.util.Arrays;\n+\n+\/**\n+ * @test\n+ * @bug 8263622\n+ * @summary The ICC_Profile#setData invert the order of bytes for the \"head\" tag\n+ *\/\n+public final class SetHeaderInfo {\n+\n+    public static void main(String[] args) {\n+        int[] cspaces = {ColorSpace.CS_sRGB, ColorSpace.CS_LINEAR_RGB,\n+                         ColorSpace.CS_CIEXYZ, ColorSpace.CS_PYCC,\n+                         ColorSpace.CS_GRAY};\n+        for (int cspace : cspaces) {\n+            ICC_Profile icc = ICC_Profile.getInstance(cspace);\n+            testSame(icc);\n+            testCustom(icc);\n+            \/\/ some corner cases\n+            negative(icc, null);\n+            negative(icc, new byte[0]);\n+            negative(icc, new byte[1]);\n+            byte[] header = icc.getData(ICC_Profile.icSigHead);\n+            negative(icc, new byte[header.length - 1]);\n+        }\n+    }\n+\n+    private static void testSame(ICC_Profile icc) {\n+        byte[] expected = icc.getData(ICC_Profile.icSigHead);\n+        icc.setData(ICC_Profile.icSigHead, expected);\n+        byte[] actual = icc.getData(ICC_Profile.icSigHead);\n+        if (!Arrays.equals(expected, actual)) {\n+            System.err.println(\"Expected: \" + Arrays.toString(expected));\n+            System.err.println(\"Actual:   \" + Arrays.toString(actual));\n+            throw new RuntimeException();\n+        }\n+    }\n+\n+    private static void testCustom(ICC_Profile icc) {\n+        byte[] expected = icc.getData(ICC_Profile.icSigHead);\n+        \/\/ small modification of the default profile\n+        expected[ICC_Profile.icHdrFlags + 3] = 1;\n+        expected[ICC_Profile.icHdrModel + 3] = 1;\n+        icc.setData(ICC_Profile.icSigHead, expected);\n+        byte[] actual = icc.getData(ICC_Profile.icSigHead);\n+        if (!Arrays.equals(expected, actual)) {\n+            System.err.println(\"Expected: \" + Arrays.toString(expected));\n+            System.err.println(\"Actual:   \" + Arrays.toString(actual));\n+            throw new RuntimeException();\n+        }\n+    }\n+\n+    private static void negative(ICC_Profile icc, byte[] tagData) {\n+        try {\n+            icc.setData(ICC_Profile.icSigHead, tagData);\n+            throw new RuntimeException(\"IllegalArgumentException expected\");\n+        } catch (IllegalArgumentException iae) {\n+            \/\/ expected\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/color\/ICC_Profile\/SetHeaderInfo.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"}]}