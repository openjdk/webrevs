{"files":[{"patch":"@@ -1003,2 +1003,3 @@\n-      \/\/ A test which leads to an uncommon trap which should be safe.\n-      \/\/ Later this trap will be converted into a trap that restarts\n+      \/\/ A test which leads to an uncommon trap. It is safe to convert the trap\n+      \/\/ into a trap that restarts at the beginning as long as its test does not\n+      \/\/ depend on intermediate results of the candidate chain.\n@@ -1009,0 +1010,8 @@\n+          \/\/ First check for dependency on a toString that is going away during stacked concats.\n+          if (_multiple &&\n+              ((v1->is_Proj() && is_SB_toString(v1->in(0)) && ctrl_path.member(v1->in(0))) ||\n+               (v2->is_Proj() && is_SB_toString(v2->in(0)) && ctrl_path.member(v2->in(0))))) {\n+            \/\/ iftrue -> if -> bool -> cmpp -> resproj -> tostring\n+            fail = true;\n+            break;\n+          }\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8357105\n+ * @summary Test stacked string concatenations where the toString result\n+ *          of the first StringBuilder chain is wired into an uncommon trap\n+ *          located in the second one.\n+ * @run main\/othervm compiler.stringopts.TestStackedConcatsAppendUncommonTrap\n+ * @run main\/othervm -XX:-TieredCompilation -Xbatch\n+ *                   -XX:CompileOnly=compiler.stringopts.TestStackedConcatsAppendUncommonTrap::*\n+ *                   compiler.stringopts.TestStackedConcatsAppendUncommonTrap\n+ *\/\n+\n+package compiler.stringopts;\n+\n+public class TestStackedConcatsAppendUncommonTrap {\n+\n+    public static void main (String... args) {\n+        for (int i = 0; i < 10000; i++) {\n+            String s = f(\" \");\n+            if (!s.equals(\"    \")) {\n+                throw new RuntimeException(\"wrong result.\");\n+            }\n+        }\n+    }\n+\n+    static String f(String c) {\n+        String s = \" \";\n+        s = new StringBuilder().append(s).append(s).toString();\n+        s = new StringBuilder().append(s).append(s == c ? s : \"  \").toString();\n+        return s;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/stringopts\/TestStackedConcatsAppendUncommonTrap.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"}]}