{"files":[{"patch":"@@ -28,3 +28,5 @@\n-import java.awt.*;\n-import java.awt.geom.*;\n-\n+import java.awt.AlphaComposite;\n+import java.awt.Composite;\n+import java.awt.Paint;\n+import java.awt.geom.AffineTransform;\n+import java.awt.geom.NoninvertibleTransformException;\n@@ -34,3 +36,4 @@\n-import sun.font.*;\n-import sun.java2d.*;\n-import sun.java2d.loops.*;\n+import sun.awt.image.PixelConverter;\n+import sun.font.XRTextRenderer;\n+import sun.java2d.SunGraphics2D;\n+import sun.java2d.loops.XORComposite;\n@@ -71,0 +74,1 @@\n+    int eargb;\n@@ -172,2 +176,4 @@\n-        if (sg2d != null && (validatedPixel != sg2d.pixel  || updatePaint)) {\n-            validatedPixel = sg2d.pixel;\n+        if (sg2d != null && (eargb != sg2d.eargb || updatePaint)) {\n+            eargb = sg2d.eargb;\n+            validatedPixel = PixelConverter.ArgbPre.instance\n+                                           .rgbToPixel(eargb, null);\n","filename":"src\/java.desktop\/unix\/classes\/sun\/java2d\/xr\/XRCompositeManager.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,0 @@\n-import java.awt.Transparency;\n-import sun.awt.X11GraphicsConfig;\n@@ -36,0 +34,1 @@\n+import sun.awt.X11GraphicsConfig;\n@@ -40,1 +39,0 @@\n-import sun.java2d.loops.SurfaceType;\n@@ -66,10 +64,0 @@\n-\n-    public synchronized SurfaceType getSurfaceType() {\n-        if (surfaceType != null) {\n-            return surfaceType;\n-        }\n-\n-        surfaceType = XRSurfaceData.getSurfaceType(this, Transparency.OPAQUE);\n-        return surfaceType;\n-    }\n-\n","filename":"src\/java.desktop\/unix\/classes\/sun\/java2d\/xr\/XRGraphicsConfig.java","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+\n@@ -43,0 +44,1 @@\n+import sun.font.FontManagerNativeLibrary;\n@@ -58,1 +60,0 @@\n-import sun.font.FontManagerNativeLibrary;\n@@ -280,1 +281,1 @@\n-            (gc, width, height, image, getSurfaceType(gc, transparency),\n+            (gc, width, height, image, getPixmapSurfaceType(transparency),\n@@ -399,2 +400,1 @@\n-    public static SurfaceType getSurfaceType(XRGraphicsConfig gc,\n-                                             int transparency) {\n+    public static SurfaceType getPixmapSurfaceType(int transparency) {\n","filename":"src\/java.desktop\/unix\/classes\/sun\/java2d\/xr\/XRSurfaceData.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @bug 8204931 8227392 8224825 8233910\n+ * @bug 8204931 8227392 8224825 8233910 8275843\n","filename":"test\/jdk\/java\/awt\/ColorClass\/AlphaColorTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,1 @@\n+\n@@ -27,1 +28,1 @@\n- * @bug      8176795\n+ * @bug      8176795 8275843\n@@ -30,2 +31,2 @@\n- * @requires (os.family == \"linux\")\n- * @run      main XRenderTranslucentColorDrawTest -Dsun.java2d.xrender=true\n+ * @run      main\/othervm XRenderTranslucentColorDrawTest\n+ * @run      main\/othervm -Dsun.java2d.xrender=true XRenderTranslucentColorDrawTest\n@@ -39,0 +40,1 @@\n+import java.awt.Transparency;\n@@ -44,5 +46,3 @@\n-    public static void main(String[] args) throws Exception {\n-        GraphicsEnvironment env = GraphicsEnvironment.\n-                getLocalGraphicsEnvironment();\n-        GraphicsConfiguration translucentGC = null;\n-        SCREENS: for (GraphicsDevice screen : env.getScreenDevices()) {\n+    public static void main(String[] args) {\n+        var env = GraphicsEnvironment.getLocalGraphicsEnvironment();\n+        for (GraphicsDevice screen : env.getScreenDevices()) {\n@@ -50,4 +50,3 @@\n-                if (gc.isTranslucencyCapable()) {\n-                    translucentGC = gc;\n-                    break SCREENS;\n-                }\n+                test(gc, Transparency.OPAQUE);\n+                test(gc, Transparency.BITMASK);\n+                test(gc, Transparency.TRANSLUCENT);\n@@ -56,3 +55,3 @@\n-        if (translucentGC == null) {\n-            throw new RuntimeException(\"No suitable gc found.\");\n-        }\n+    }\n+\n+    private static void test(GraphicsConfiguration gc, int transparency) {\n@@ -61,2 +60,2 @@\n-        VolatileImage image = translucentGC.\n-                createCompatibleVolatileImage(width, height);\n+        VolatileImage image = gc.createCompatibleVolatileImage(width, height,\n+                                                               transparency);\n@@ -75,3 +74,4 @@\n-        if (!(Integer.toHexString(argb).equals(\"ff808080\"))) {\n-            throw new RuntimeException(\"Using X Render extension for drawing\"\n-                    + \" translucent color is not giving expected results.\");\n+        String actual = Integer.toHexString(argb);\n+        if (!(actual.equals(\"ff808080\"))) {\n+            throw new RuntimeException(\"Drawing translucent color is not \" +\n+                                       \"giving expected results: \" + actual);\n@@ -80,2 +80,1 @@\n-}\n-\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/ColorClass\/XRenderTranslucentColorDrawTest.java","additions":22,"deletions":23,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AlphaComposite;\n+import java.awt.Frame;\n+import java.awt.Graphics2D;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Image;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.ColorModel;\n+import java.awt.image.DataBufferInt;\n+import java.awt.image.DirectColorModel;\n+import java.awt.image.WritableRaster;\n+import java.util.Arrays;\n+\n+\/**\n+ * @test\n+ * @bug 8275843\n+ * @key headful\n+ * @summary No exception or errors should occur.\n+ *\/\n+public final class DrawCustomColorModel {\n+\n+    public static void main(String[] args) {\n+        var ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n+        for (GraphicsDevice gd : ge.getScreenDevices()) {\n+            GraphicsConfiguration[] gcs = gd.getConfigurations();\n+            for (GraphicsConfiguration gc : gcs) {\n+                test(gc);\n+            }\n+        }\n+    }\n+\n+    private static void test(GraphicsConfiguration gc) {\n+        Frame frame = new Frame(gc);\n+        frame.setUndecorated(true);\n+        frame.pack();\n+        frame.setSize(15, 15);\n+        ColorModel cm = new DirectColorModel(32,\n+                                             0xff000000, \/\/ Red\n+                                             0x00ff0000, \/\/ Green\n+                                             0x0000ff00, \/\/ Blue\n+                                             0x000000FF  \/\/ Alpha\n+        );\n+        WritableRaster wr = cm.createCompatibleWritableRaster(16, 16);\n+        DataBufferInt buff = (DataBufferInt) wr.getDataBuffer();\n+        int[] data = buff.getData();\n+        Arrays.fill(data, -1); \/\/ more chance to reproduce\n+        Image image =  new BufferedImage(cm, wr, false, null);\n+\n+        Graphics2D graphics = (Graphics2D) frame.getGraphics();\n+        graphics.setComposite(AlphaComposite.Src);\n+        graphics.drawImage(image, 0, 0, null);\n+        graphics.dispose();\n+        frame.dispose();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/image\/ColorModel\/DrawCustomColorModel.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}