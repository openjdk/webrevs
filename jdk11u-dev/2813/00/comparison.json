{"files":[{"patch":"@@ -72,0 +72,9 @@\n+        \/\/ Common concatenation patterns\n+        String const_I = \"string\" + args.length;\n+        String const_S = \"string\" + String.valueOf(args.length);\n+        String S_const = String.valueOf(args.length) + \"string\";\n+        String S_S     = String.valueOf(args.length) + String.valueOf(args.length);\n+        String const_J = \"string\" + System.currentTimeMillis();\n+        String I_const = args.length + \"string\";\n+        String J_const = System.currentTimeMillis() + \"string\";\n+\n","filename":"make\/jdk\/src\/classes\/build\/tools\/classlist\/HelloClasslist.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -141,55 +141,0 @@\n-    \/**\n-     * Mix coder into current coder\n-     * @param current current coder\n-     * @param value   value to mix in\n-     * @return new coder\n-     *\/\n-    static byte mixCoder(byte current, boolean value) {\n-        \/\/ Booleans are represented with Latin1\n-        return current;\n-    }\n-\n-    \/**\n-     * Mix coder into current coder\n-     * @param current current coder\n-     * @param value   value to mix in\n-     * @return new coder\n-     *\/\n-    static byte mixCoder(byte current, byte value) {\n-        \/\/ Bytes are represented with Latin1\n-        return current;\n-    }\n-\n-    \/**\n-     * Mix coder into current coder\n-     * @param current current coder\n-     * @param value   value to mix in\n-     * @return new coder\n-     *\/\n-    static byte mixCoder(byte current, short value) {\n-        \/\/ Shorts are represented with Latin1\n-        return current;\n-    }\n-\n-    \/**\n-     * Mix coder into current coder\n-     * @param current current coder\n-     * @param value   value to mix in\n-     * @return new coder\n-     *\/\n-    static byte mixCoder(byte current, int value) {\n-        \/\/ Ints are represented with Latin1\n-        return current;\n-    }\n-\n-    \/**\n-     * Mix coder into current coder\n-     * @param current current coder\n-     * @param value   value to mix in\n-     * @return new coder\n-     *\/\n-    static byte mixCoder(byte current, long value) {\n-        \/\/ Longs are represented with Latin1\n-        return current;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -1591,1 +1591,0 @@\n-                        MethodHandle cm = coderMixer(argClass);\n@@ -1593,1 +1592,1 @@\n-                        \/\/ Read this bottom up:\n+                        \/\/ Read these bottom up:\n@@ -1595,2 +1594,1 @@\n-                        \/\/ 4. Drop old index and coder, producing (\"new-index\", \"new-coder\", <args>)\n-                        mh = MethodHandles.dropArguments(mh, 2, int.class, byte.class);\n+                        if (argClass.isPrimitive() && argClass != char.class) {\n@@ -1598,6 +1596,2 @@\n-                        \/\/ 3. Compute \"new-index\", producing (\"new-index\", \"new-coder\", \"old-index\", \"old-coder\", <args>)\n-                        \/\/    Length mixer needs old index, plus the appropriate argument\n-                        mh = MethodHandles.foldArguments(mh, 0, lm,\n-                                2, \/\/ old-index\n-                                4 + ac \/\/ selected argument\n-                        );\n+                            \/\/ 3. Drop old index, producing (\"new-index\", \"coder\", <args>)\n+                            mh = MethodHandles.dropArguments(mh, 1, int.class);\n@@ -1605,6 +1599,32 @@\n-                        \/\/ 2. Compute \"new-coder\", producing (\"new-coder\", \"old-index\", \"old-coder\", <args>)\n-                        \/\/    Coder mixer needs old coder, plus the appropriate argument.\n-                        mh = MethodHandles.foldArguments(mh, 0, cm,\n-                                2, \/\/ old-coder\n-                                3 + ac \/\/ selected argument\n-                        );\n+                            \/\/ 2. Compute \"new-index\", producing (\"new-index\", \"old-index\", \"coder\", <args>)\n+                            \/\/    Length mixer needs old index, plus the appropriate argument\n+                            mh = MethodHandles.foldArguments(mh, 0, lm,\n+                                    1, \/\/ old-index\n+                                    3 + ac \/\/ selected argument\n+                            );\n+\n+                            \/\/ 1. The mh shape here is (\"old-index\", \"coder\", <args>); we don't need to recalculate\n+                            \/\/    the coder for non-char primitive arguments\n+\n+                        } else {\n+                            MethodHandle cm = coderMixer(argClass);\n+\n+                            \/\/ 4. Drop old index and coder, producing (\"new-index\", \"new-coder\", <args>)\n+                            mh = MethodHandles.dropArguments(mh, 2, int.class, byte.class);\n+\n+                            \/\/ 3. Compute \"new-index\", producing (\"new-index\", \"new-coder\", \"old-index\", \"old-coder\", <args>)\n+                            \/\/    Length mixer needs old index, plus the appropriate argument\n+                            mh = MethodHandles.foldArguments(mh, 0, lm,\n+                                    2, \/\/ old-index\n+                                    4 + ac \/\/ selected argument\n+                            );\n+\n+                            \/\/ 2. Compute \"new-coder\", producing (\"new-coder\", \"old-index\", \"old-coder\", <args>)\n+                            \/\/    Coder mixer needs old coder, plus the appropriate argument.\n+                            mh = MethodHandles.foldArguments(mh, 0, cm,\n+                                    2, \/\/ old-coder\n+                                    3 + ac \/\/ selected argument\n+                            );\n+\n+                            \/\/ 1. The mh shape here is (\"old-index\", \"old-coder\", <args>)\n+                        }\n@@ -1612,1 +1632,0 @@\n-                        \/\/ 1. The mh shape here is (\"old-index\", \"old-coder\", <args>)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/StringConcatFactory.java","additions":36,"deletions":17,"binary":false,"changes":53,"status":"modified"}]}