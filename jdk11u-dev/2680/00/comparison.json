{"files":[{"patch":"@@ -43,0 +43,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -48,1 +49,4 @@\n-import static jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl.Kind.*;\n+import static jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl.Kind.EXECUTABLE_MEMBER_PARAM;\n+import static jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl.Kind.MEMBER;\n+import static jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl.Kind.MEMBER_TYPE_PARAMS;\n+import static jdk.javadoc.internal.doclets.formats.html.LinkInfoImpl.Kind.RECEIVER_TYPE;\n@@ -82,1 +86,1 @@\n-            htmltree.add(Contents.SPACE);\n+            htmltree.add(Entity.NO_BREAK_SPACE);\n@@ -110,1 +114,1 @@\n-            deprecatedLinkContent.add(Contents.ZERO_WIDTH_SPACE);\n+            deprecatedLinkContent.add(Entity.ZERO_WIDTH_SPACE);\n@@ -163,1 +167,1 @@\n-            tree.add(Contents.SPACE);\n+            tree.add(Entity.NO_BREAK_SPACE);\n@@ -179,1 +183,1 @@\n-        tree.add(Contents.SPACE);\n+        tree.add(Entity.NO_BREAK_SPACE);\n@@ -183,1 +187,1 @@\n-        tree.add(Contents.SPACE);\n+        tree.add(Entity.NO_BREAK_SPACE);\n@@ -257,1 +261,1 @@\n-            htmltree.add(Contents.ZERO_WIDTH_SPACE);\n+            htmltree.add(Entity.ZERO_WIDTH_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractExecutableMemberWriter.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,3 +28,7 @@\n-import java.io.*;\n-import java.util.*;\n-import java.util.zip.*;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.Writer;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n@@ -41,0 +45,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -343,1 +348,1 @@\n-            dd.add(Contents.SPACE);\n+            dd.add(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractIndexWriter.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,4 +28,4 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.Table;\n-import jdk.javadoc.internal.doclets.formats.html.markup.TableHeader;\n-\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.TreeSet;\n@@ -42,0 +42,1 @@\n+\n@@ -43,0 +44,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -49,0 +51,2 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Table;\n+import jdk.javadoc.internal.doclets.formats.html.markup.TableHeader;\n@@ -55,1 +59,5 @@\n-import static javax.lang.model.element.Modifier.*;\n+import static javax.lang.model.element.Modifier.ABSTRACT;\n+import static javax.lang.model.element.Modifier.NATIVE;\n+import static javax.lang.model.element.Modifier.PUBLIC;\n+import static javax.lang.model.element.Modifier.STRICTFP;\n+import static javax.lang.model.element.Modifier.SYNCHRONIZED;\n@@ -261,1 +269,1 @@\n-            htmltree.add(Contents.SPACE);\n+            htmltree.add(Entity.NO_BREAK_SPACE);\n@@ -289,1 +297,1 @@\n-            code.add(Contents.SPACE);\n+            code.add(Entity.NO_BREAK_SPACE);\n@@ -302,1 +310,1 @@\n-                    code.add(Contents.SPACE);\n+                    code.add(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractMemberWriter.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -141,1 +142,1 @@\n-        pre.add(Contents.SPACE);\n+        pre.add(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AnnotationTypeFieldWriterImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -146,1 +147,1 @@\n-        pre.add(Contents.SPACE);\n+        pre.add(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AnnotationTypeRequiredMemberWriterImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -109,1 +110,1 @@\n-            moduleNameDiv.add(Contents.SPACE);\n+            moduleNameDiv.add(Entity.NO_BREAK_SPACE);\n@@ -117,1 +118,1 @@\n-            pkgNameDiv.add(Contents.SPACE);\n+            pkgNameDiv.add(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AnnotationTypeWriterImpl.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,5 @@\n-import java.util.*;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n@@ -39,0 +43,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -120,1 +125,1 @@\n-            moduleNameDiv.add(Contents.SPACE);\n+            moduleNameDiv.add(Entity.NO_BREAK_SPACE);\n@@ -129,1 +134,1 @@\n-            pkgNameDiv.add(Contents.SPACE);\n+            pkgNameDiv.add(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ClassWriterImpl.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,4 +28,2 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.Table;\n-import jdk.javadoc.internal.doclets.formats.html.markup.TableHeader;\n-\n-import java.util.*;\n+import java.util.Collection;\n+import java.util.Set;\n@@ -39,0 +37,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -46,0 +45,2 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Table;\n+import jdk.javadoc.internal.doclets.formats.html.markup.TableHeader;\n@@ -292,1 +293,1 @@\n-            code.add(Contents.SPACE);\n+            code.add(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ConstantsSummaryWriterImpl.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -309,1 +310,1 @@\n-                code.add(Contents.SPACE);\n+                code.add(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ConstructorWriterImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -36,1 +37,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.RawHtml;\n@@ -55,2 +55,0 @@\n-    public static final Content SPACE = RawHtml.nbsp;\n-    public static final Content ZERO_WIDTH_SPACE = RawHtml.zws;\n@@ -403,1 +401,1 @@\n-            c.add(RawHtml.nbsp);\n+            c.add(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/Contents.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -262,1 +263,1 @@\n-        labelHeading.add(Contents.SPACE);\n+        labelHeading.add(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/FieldWriterImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,4 +28,7 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.Head;\n-import jdk.javadoc.internal.doclets.formats.html.markup.TableHeader;\n-\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.ListIterator;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Set;\n@@ -73,0 +76,3 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n+import jdk.javadoc.internal.doclets.formats.html.markup.Head;\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlAttr;\n@@ -81,0 +87,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.TableHeader;\n@@ -99,1 +106,6 @@\n-import static com.sun.source.doctree.DocTree.Kind.*;\n+import static com.sun.source.doctree.DocTree.Kind.CODE;\n+import static com.sun.source.doctree.DocTree.Kind.COMMENT;\n+import static com.sun.source.doctree.DocTree.Kind.LINK;\n+import static com.sun.source.doctree.DocTree.Kind.LINK_PLAIN;\n+import static com.sun.source.doctree.DocTree.Kind.SEE;\n+import static com.sun.source.doctree.DocTree.Kind.TEXT;\n@@ -511,1 +523,1 @@\n-        Content space = Contents.SPACE;\n+        Content space = Entity.NO_BREAK_SPACE;\n@@ -1234,1 +1246,1 @@\n-            htmltree.add(Contents.SPACE);\n+            htmltree.add(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -165,1 +166,1 @@\n-                    links.add(Contents.ZERO_WIDTH_SPACE);\n+                    links.add(Entity.ZERO_WIDTH_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/LinkFactoryImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -194,1 +195,1 @@\n-                descfrmLabel.add(Contents.SPACE);\n+                descfrmLabel.add(Entity.NO_BREAK_SPACE);\n@@ -311,1 +312,1 @@\n-        labelHeading.add(Contents.SPACE);\n+        labelHeading.add(Entity.NO_BREAK_SPACE);\n@@ -367,1 +368,1 @@\n-            dd.add(Contents.SPACE);\n+            dd.add(Entity.NO_BREAK_SPACE);\n@@ -369,1 +370,1 @@\n-            dd.add(Contents.SPACE);\n+            dd.add(Entity.NO_BREAK_SPACE);\n@@ -403,1 +404,1 @@\n-            dd.add(Contents.SPACE);\n+            dd.add(Entity.NO_BREAK_SPACE);\n@@ -405,1 +406,1 @@\n-            dd.add(Contents.SPACE);\n+            dd.add(Entity.NO_BREAK_SPACE);\n@@ -423,1 +424,1 @@\n-            htmltree.add(Contents.SPACE);\n+            htmltree.add(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/MethodWriterImpl.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -175,1 +176,1 @@\n-        Content p = HtmlTree.P(Contents.SPACE);\n+        Content p = HtmlTree.P(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ModuleIndexFrameWriter.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -91,1 +92,1 @@\n-        heading.add(Contents.SPACE);\n+        heading.add(Entity.NO_BREAK_SPACE);\n@@ -114,1 +115,1 @@\n-        heading.add(Contents.SPACE);\n+        heading.add(Entity.NO_BREAK_SPACE);\n@@ -234,1 +235,1 @@\n-        Content p = HtmlTree.P(Contents.SPACE);\n+        Content p = HtmlTree.P(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ModulePackageIndexFrameWriter.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,3 +28,0 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.Table;\n-import jdk.javadoc.internal.doclets.formats.html.markup.TableHeader;\n-\n@@ -49,0 +46,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -57,0 +55,2 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Table;\n+import jdk.javadoc.internal.doclets.formats.html.markup.TableHeader;\n@@ -222,1 +222,1 @@\n-        tHeading.add(Contents.SPACE);\n+        tHeading.add(Entity.NO_BREAK_SPACE);\n@@ -557,1 +557,1 @@\n-     * @param tbody the content tree to which the list will be added\n+     * @param table the table to which the list will be added\n@@ -822,1 +822,1 @@\n-                summary.add(Contents.SPACE);\n+                summary.add(Entity.NO_BREAK_SPACE);\n@@ -848,1 +848,1 @@\n-                        : Contents.SPACE);\n+                        : Entity.NO_BREAK_SPACE);\n@@ -850,1 +850,1 @@\n-                desc.add(Contents.SPACE);\n+                desc.add(Entity.NO_BREAK_SPACE);\n@@ -858,1 +858,1 @@\n-                desc.add(Contents.SPACE);\n+                desc.add(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/ModuleWriterImpl.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -166,1 +167,1 @@\n-        labelHeading.add(Contents.SPACE);\n+        labelHeading.add(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/NestedClassWriterImpl.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -177,1 +178,1 @@\n-        Content p = HtmlTree.P(Contents.SPACE);\n+        Content p = HtmlTree.P(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PackageIndexFrameWriter.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,4 +28,4 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.Table;\n-import jdk.javadoc.internal.doclets.formats.html.markup.TableHeader;\n-\n-import java.util.*;\n+import java.util.Set;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+import java.util.TreeSet;\n@@ -37,0 +37,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -44,0 +45,2 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Table;\n+import jdk.javadoc.internal.doclets.formats.html.markup.TableHeader;\n@@ -192,1 +195,1 @@\n-                summary.add(Contents.SPACE);\n+                summary.add(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PackageUseWriter.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,4 +28,2 @@\n-import jdk.javadoc.internal.doclets.formats.html.markup.Table;\n-import jdk.javadoc.internal.doclets.formats.html.markup.TableHeader;\n-\n-import java.util.*;\n+import java.util.List;\n+import java.util.SortedSet;\n@@ -39,0 +37,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -46,0 +45,2 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Table;\n+import jdk.javadoc.internal.doclets.formats.html.markup.TableHeader;\n@@ -128,1 +129,1 @@\n-            moduleNameDiv.add(Contents.SPACE);\n+            moduleNameDiv.add(Entity.NO_BREAK_SPACE);\n@@ -138,1 +139,1 @@\n-        tHeading.add(Contents.SPACE);\n+        tHeading.add(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PackageWriterImpl.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-\n@@ -36,0 +35,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -45,1 +45,0 @@\n-\n@@ -165,1 +164,1 @@\n-                descfrmLabel.add(Contents.SPACE);\n+                descfrmLabel.add(Entity.NO_BREAK_SPACE);\n@@ -276,1 +275,1 @@\n-        labelHeading.add(Contents.SPACE);\n+        labelHeading.add(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/PropertyWriterImpl.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.util.*;\n+import java.util.Set;\n@@ -32,0 +32,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -140,1 +141,1 @@\n-        heading.add(Contents.SPACE);\n+        heading.add(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SerializedFormWriterImpl.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n-import java.util.*;\n+import java.util.Set;\n+import java.util.TreeSet;\n@@ -30,0 +31,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -148,1 +150,1 @@\n-            contentTree.add(Contents.SPACE);\n+            contentTree.add(Entity.NO_BREAK_SPACE);\n@@ -154,1 +156,1 @@\n-            contentTree.add(Contents.SPACE);\n+            contentTree.add(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SingleIndexWriter.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.javadoc.internal.doclets.formats.html.markup.Entity;\n@@ -168,1 +169,1 @@\n-            contentTree.add(Contents.SPACE);\n+            contentTree.add(Entity.NO_BREAK_SPACE);\n@@ -174,1 +175,1 @@\n-            contentTree.add(Contents.SPACE);\n+            contentTree.add(Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/SplitIndexWriter.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.javadoc.internal.doclets.formats.html.markup;\n+\n+import jdk.javadoc.internal.doclets.toolkit.Content;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+\n+\/**\n+ * A representation of HTML entities.\n+ *\/\n+public class Entity extends Content {\n+    public static final Entity LESS_THAN = new Entity(\"&lt;\");\n+    public static final Entity GREATER_THAN = new Entity(\"&gt;\");\n+    public static final Entity AMPERSAND = new Entity(\"&amp;\");\n+    public static final Entity NO_BREAK_SPACE = new Entity(\"&nbsp;\");\n+    public static final Entity ZERO_WIDTH_SPACE = new Entity(\"&#8203;\") {\n+        @Override\n+        public int charCount() {\n+            return 0;\n+        }\n+    };\n+\n+    public final String text;\n+\n+    private Entity(String text) {\n+        this.text = text;\n+    }\n+\n+    @Override\n+    public void add(Content content) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void add(CharSequence stringContent) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public boolean write(Writer writer, boolean atNewline) throws IOException {\n+        writer.write(text);\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isEmpty() {\n+        return false;\n+    }\n+\n+    @Override\n+    public int charCount() {\n+        return 1;\n+    }\n+\n+\n+    \/**\n+     * Escapes the special HTML characters in a given string using the appropriate\n+     * entities.\n+     *\n+     * @param s the string to escape\n+     * @return the string with all of the HTML characters escaped\n+     *\/\n+    static String escapeHtmlChars(CharSequence s) {\n+        for (int i = 0; i < s.length(); i++) {\n+            char ch = s.charAt(i);\n+            switch (ch) {\n+                \/\/ only start building a new string if we need to\n+                case '<': case '>': case '&':\n+                    StringBuilder sb = new StringBuilder(s.subSequence(0, i));\n+                    escapeHtmlChars(s, i, sb);\n+                    return sb.toString();\n+            }\n+        }\n+        return s.toString();\n+    }\n+\n+    \/**\n+     * Escapes the special HTML characters in a given string using the appropriate\n+     * entities, appending the results into a string builder.\n+     *\n+     * @param s the string\n+     * @param sb the string builder\n+     *\/\n+    static void escapeHtmlChars(CharSequence s, StringBuilder sb) {\n+        escapeHtmlChars(s, 0, sb);\n+    }\n+\n+    private static void escapeHtmlChars(CharSequence s, int start, StringBuilder sb) {\n+        for (int i = start ; i < s.length(); i++) {\n+            char ch = s.charAt(i);\n+            switch (ch) {\n+                case '<': sb.append(Entity.LESS_THAN.text);     break;\n+                case '>': sb.append(Entity.GREATER_THAN.text);  break;\n+                case '&': sb.append(Entity.AMPERSAND.text);     break;\n+                default:  sb.append(ch);                        break;\n+            }\n+        }\n+    }\n+\n+}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/Entity.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -50,3 +50,1 @@\n-        string = needEscape(content)\n-                ? escape(content)\n-                : content.toString();\n+        string = Entity.escapeHtmlChars(content);\n@@ -108,25 +106,0 @@\n-    private boolean needEscape(CharSequence cs) {\n-        for (int i = 0; i < cs.length(); i++) {\n-            switch (cs.charAt(i)) {\n-                case '<':\n-                case '>':\n-                case '&':\n-                    return true;\n-            }\n-        }\n-        return false;\n-    }\n-    private String escape(CharSequence s) {\n-        StringBuilder sb = new StringBuilder();\n-        for (int i = 0; i < s.length(); i++) {\n-            char ch = s.charAt(i);\n-            switch (ch) {\n-                case '<': sb.append(\"&lt;\");  break;\n-                case '>': sb.append(\"&gt;\");  break;\n-                case '&': sb.append(\"&amp;\"); break;\n-                default:  sb.append(ch);      break;\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/FixedStringContent.java","additions":1,"deletions":28,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-        attrs.put(nullCheck(attrName), escapeHtmlChars(attrValue));\n+        attrs.put(nullCheck(attrName), Entity.escapeHtmlChars(attrValue));\n@@ -191,29 +191,0 @@\n-    \/**\n-     * Given a string, escape all special HTML characters and\n-     * return the result.\n-     *\n-     * @param s The string to check.\n-     * @return the original string with all of the HTML characters escaped.\n-     *\/\n-    private static String escapeHtmlChars(String s) {\n-        for (int i = 0; i < s.length(); i++) {\n-            char ch = s.charAt(i);\n-            switch (ch) {\n-                \/\/ only start building a new string if we need to\n-                case '<': case '>': case '&':\n-                    StringBuilder sb = new StringBuilder(s.substring(0, i));\n-                    for ( ; i < s.length(); i++) {\n-                        ch = s.charAt(i);\n-                        switch (ch) {\n-                            case '<': sb.append(\"&lt;\");  break;\n-                            case '>': sb.append(\"&gt;\");  break;\n-                            case '&': sb.append(\"&amp;\"); break;\n-                            default:  sb.append(ch);      break;\n-                        }\n-                    }\n-                    return sb.toString();\n-            }\n-        }\n-        return s;\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/HtmlTree.java","additions":1,"deletions":30,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -451,1 +451,1 @@\n-                    li.add(Contents.SPACE);\n+                    li.add(Entity.NO_BREAK_SPACE);\n@@ -483,1 +483,1 @@\n-                    li.add(Contents.SPACE);\n+                    li.add(Entity.NO_BREAK_SPACE);\n@@ -687,1 +687,1 @@\n-                    li.add(Contents.SPACE);\n+                    li.add(Entity.NO_BREAK_SPACE);\n@@ -823,1 +823,1 @@\n-                liContent.add(Contents.SPACE);\n+                liContent.add(Entity.NO_BREAK_SPACE);\n@@ -825,1 +825,1 @@\n-                liContent.add(Contents.SPACE);\n+                liContent.add(Entity.NO_BREAK_SPACE);\n@@ -1085,1 +1085,1 @@\n-                HtmlTree paddingDiv = HtmlTree.DIV(HtmlStyle.navPadding, Contents.SPACE);\n+                HtmlTree paddingDiv = HtmlTree.DIV(HtmlStyle.navPadding, Entity.NO_BREAK_SPACE);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/Navigation.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -48,4 +48,0 @@\n-    public static final Content nbsp = new RawHtml(\"&nbsp;\");\n-\n-    public static final Content zws = new RawHtml(\"&#8203;\");\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/RawHtml.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-        appendChars(initialContent);\n+        Entity.escapeHtmlChars(initialContent, stringContent);\n@@ -84,1 +84,1 @@\n-        appendChars(strContent);\n+        Entity.escapeHtmlChars(strContent, stringContent);\n@@ -117,12 +117,0 @@\n-\n-    private void appendChars(CharSequence s) {\n-        for (int i = 0; i < s.length(); i++) {\n-            char ch = s.charAt(i);\n-            switch (ch) {\n-                case '<': stringContent.append(\"&lt;\");  break;\n-                case '>': stringContent.append(\"&gt;\");  break;\n-                case '&': stringContent.append(\"&amp;\"); break;\n-                default:  stringContent.append(ch);      break;\n-            }\n-        }\n-    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/StringContent.java","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -473,1 +473,1 @@\n-                            HtmlTree.SPAN(tabEnd, Contents.SPACE))\n+                            HtmlTree.SPAN(tabEnd, Entity.NO_BREAK_SPACE))\n@@ -483,1 +483,1 @@\n-                                    HtmlTree.SPAN(link), HtmlTree.SPAN(tabEnd, Contents.SPACE))\n+                                    HtmlTree.SPAN(link), HtmlTree.SPAN(tabEnd, Entity.NO_BREAK_SPACE))\n@@ -578,1 +578,1 @@\n-                HtmlTree.SPAN(tabEnd, Contents.SPACE));\n+                HtmlTree.SPAN(tabEnd, Entity.NO_BREAK_SPACE));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/Table.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}