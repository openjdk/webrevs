{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -4529,4 +4529,3 @@\n-            if (width != -1 && f.contains(Flags.ZERO_PAD)) {\n-                for (int k = sb.length(); k < width; k++) {\n-                    sb.insert(begin, zero);\n-                }\n+            if (width > sb.length() && f.contains(Flags.ZERO_PAD)) {\n+                String zeros = String.valueOf(zero).repeat(width - sb.length());\n+                sb.insert(begin, zeros);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Formatter.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,313 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4906370\n+ * @summary Tests to excercise padding on int and double values,\n+ *      with various flag combinations.\n+ * @run junit Padding\n+ *\/\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n+\n+public class Padding {\n+\n+    static Arguments[] padding() {\n+        return new Arguments[] {\n+                \/* blank padding, right adjusted, optional plus sign *\/\n+                arguments(\"12\", \"%1d\", 12),\n+                arguments(\"12\", \"%2d\", 12),\n+                arguments(\" 12\", \"%3d\", 12),\n+                arguments(\"  12\", \"%4d\", 12),\n+                arguments(\"   12\", \"%5d\", 12),\n+                arguments(\"        12\", \"%10d\", 12),\n+\n+                arguments(\"-12\", \"%1d\", -12),\n+                arguments(\"-12\", \"%2d\", -12),\n+                arguments(\"-12\", \"%3d\", -12),\n+                arguments(\" -12\", \"%4d\", -12),\n+                arguments(\"  -12\", \"%5d\", -12),\n+                arguments(\"       -12\", \"%10d\", -12),\n+\n+                arguments(\"1.2\", \"%1.1f\", 1.2),\n+                arguments(\"1.2\", \"%2.1f\", 1.2),\n+                arguments(\"1.2\", \"%3.1f\", 1.2),\n+                arguments(\" 1.2\", \"%4.1f\", 1.2),\n+                arguments(\"  1.2\", \"%5.1f\", 1.2),\n+                arguments(\"       1.2\", \"%10.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%1.1f\", -1.2),\n+                arguments(\"-1.2\", \"%2.1f\", -1.2),\n+                arguments(\"-1.2\", \"%3.1f\", -1.2),\n+                arguments(\"-1.2\", \"%4.1f\", -1.2),\n+                arguments(\" -1.2\", \"%5.1f\", -1.2),\n+                arguments(\"      -1.2\", \"%10.1f\", -1.2),\n+\n+                \/* blank padding, right adjusted, mandatory plus sign *\/\n+                arguments(\"+12\", \"%+1d\", 12),\n+                arguments(\"+12\", \"%+2d\", 12),\n+                arguments(\"+12\", \"%+3d\", 12),\n+                arguments(\" +12\", \"%+4d\", 12),\n+                arguments(\"  +12\", \"%+5d\", 12),\n+                arguments(\"       +12\", \"%+10d\", 12),\n+\n+                arguments(\"-12\", \"%+1d\", -12),\n+                arguments(\"-12\", \"%+2d\", -12),\n+                arguments(\"-12\", \"%+3d\", -12),\n+                arguments(\" -12\", \"%+4d\", -12),\n+                arguments(\"  -12\", \"%+5d\", -12),\n+                arguments(\"       -12\", \"%+10d\", -12),\n+\n+                arguments(\"+1.2\", \"%+1.1f\", 1.2),\n+                arguments(\"+1.2\", \"%+2.1f\", 1.2),\n+                arguments(\"+1.2\", \"%+3.1f\", 1.2),\n+                arguments(\"+1.2\", \"%+4.1f\", 1.2),\n+                arguments(\" +1.2\", \"%+5.1f\", 1.2),\n+                arguments(\"      +1.2\", \"%+10.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%+1.1f\", -1.2),\n+                arguments(\"-1.2\", \"%+2.1f\", -1.2),\n+                arguments(\"-1.2\", \"%+3.1f\", -1.2),\n+                arguments(\"-1.2\", \"%+4.1f\", -1.2),\n+                arguments(\" -1.2\", \"%+5.1f\", -1.2),\n+                arguments(\"      -1.2\", \"%+10.1f\", -1.2),\n+\n+                \/* blank padding, right adjusted, mandatory blank sign *\/\n+                arguments(\" 12\", \"% 1d\", 12),\n+                arguments(\" 12\", \"% 2d\", 12),\n+                arguments(\" 12\", \"% 3d\", 12),\n+                arguments(\"  12\", \"% 4d\", 12),\n+                arguments(\"   12\", \"% 5d\", 12),\n+                arguments(\"        12\", \"% 10d\", 12),\n+\n+                arguments(\"-12\", \"% 1d\", -12),\n+                arguments(\"-12\", \"% 2d\", -12),\n+                arguments(\"-12\", \"% 3d\", -12),\n+                arguments(\" -12\", \"% 4d\", -12),\n+                arguments(\"  -12\", \"% 5d\", -12),\n+                arguments(\"       -12\", \"% 10d\", -12),\n+\n+                arguments(\" 1.2\", \"% 1.1f\", 1.2),\n+                arguments(\" 1.2\", \"% 2.1f\", 1.2),\n+                arguments(\" 1.2\", \"% 3.1f\", 1.2),\n+                arguments(\" 1.2\", \"% 4.1f\", 1.2),\n+                arguments(\"  1.2\", \"% 5.1f\", 1.2),\n+                arguments(\"       1.2\", \"% 10.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"% 1.1f\", -1.2),\n+                arguments(\"-1.2\", \"% 2.1f\", -1.2),\n+                arguments(\"-1.2\", \"% 3.1f\", -1.2),\n+                arguments(\"-1.2\", \"% 4.1f\", -1.2),\n+                arguments(\" -1.2\", \"% 5.1f\", -1.2),\n+                arguments(\"      -1.2\", \"% 10.1f\", -1.2),\n+\n+                \/* blank padding, left adjusted, optional sign *\/\n+                arguments(\"12\", \"%-1d\", 12),\n+                arguments(\"12\", \"%-2d\", 12),\n+                arguments(\"12 \", \"%-3d\", 12),\n+                arguments(\"12  \", \"%-4d\", 12),\n+                arguments(\"12   \", \"%-5d\", 12),\n+                arguments(\"12        \", \"%-10d\", 12),\n+\n+                arguments(\"-12\", \"%-1d\", -12),\n+                arguments(\"-12\", \"%-2d\", -12),\n+                arguments(\"-12\", \"%-3d\", -12),\n+                arguments(\"-12 \", \"%-4d\", -12),\n+                arguments(\"-12  \", \"%-5d\", -12),\n+                arguments(\"-12       \", \"%-10d\", -12),\n+\n+                arguments(\"1.2\", \"%-1.1f\", 1.2),\n+                arguments(\"1.2\", \"%-2.1f\", 1.2),\n+                arguments(\"1.2\", \"%-3.1f\", 1.2),\n+                arguments(\"1.2 \", \"%-4.1f\", 1.2),\n+                arguments(\"1.2  \", \"%-5.1f\", 1.2),\n+                arguments(\"1.2       \", \"%-10.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%-1.1f\", -1.2),\n+                arguments(\"-1.2\", \"%-2.1f\", -1.2),\n+                arguments(\"-1.2\", \"%-3.1f\", -1.2),\n+                arguments(\"-1.2\", \"%-4.1f\", -1.2),\n+                arguments(\"-1.2 \", \"%-5.1f\", -1.2),\n+                arguments(\"-1.2      \", \"%-10.1f\", -1.2),\n+\n+                \/* blank padding, left adjusted, mandatory plus sign *\/\n+                arguments(\"+12\", \"%-+1d\", 12),\n+                arguments(\"+12\", \"%-+2d\", 12),\n+                arguments(\"+12\", \"%-+3d\", 12),\n+                arguments(\"+12 \", \"%-+4d\", 12),\n+                arguments(\"+12  \", \"%-+5d\", 12),\n+                arguments(\"+12       \", \"%-+10d\", 12),\n+\n+                arguments(\"-12\", \"%-+1d\", -12),\n+                arguments(\"-12\", \"%-+2d\", -12),\n+                arguments(\"-12\", \"%-+3d\", -12),\n+                arguments(\"-12 \", \"%-+4d\", -12),\n+                arguments(\"-12  \", \"%-+5d\", -12),\n+                arguments(\"-12       \", \"%-+10d\", -12),\n+\n+                arguments(\"+1.2\", \"%-+1.1f\", 1.2),\n+                arguments(\"+1.2\", \"%-+2.1f\", 1.2),\n+                arguments(\"+1.2\", \"%-+3.1f\", 1.2),\n+                arguments(\"+1.2\", \"%-+4.1f\", 1.2),\n+                arguments(\"+1.2 \", \"%-+5.1f\", 1.2),\n+                arguments(\"+1.2      \", \"%-+10.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%-+1.1f\", -1.2),\n+                arguments(\"-1.2\", \"%-+2.1f\", -1.2),\n+                arguments(\"-1.2\", \"%-+3.1f\", -1.2),\n+                arguments(\"-1.2\", \"%-+4.1f\", -1.2),\n+                arguments(\"-1.2 \", \"%-+5.1f\", -1.2),\n+                arguments(\"-1.2      \", \"%-+10.1f\", -1.2),\n+\n+                \/* blank padding, left adjusted, mandatory blank sign *\/\n+                arguments(\" 12\", \"%- 1d\", 12),\n+                arguments(\" 12\", \"%- 2d\", 12),\n+                arguments(\" 12\", \"%- 3d\", 12),\n+                arguments(\" 12 \", \"%- 4d\", 12),\n+                arguments(\" 12  \", \"%- 5d\", 12),\n+                arguments(\" 12       \", \"%- 10d\", 12),\n+\n+                arguments(\"-12\", \"%- 1d\", -12),\n+                arguments(\"-12\", \"%- 2d\", -12),\n+                arguments(\"-12\", \"%- 3d\", -12),\n+                arguments(\"-12 \", \"%- 4d\", -12),\n+                arguments(\"-12  \", \"%- 5d\", -12),\n+                arguments(\"-12       \", \"%- 10d\", -12),\n+\n+                arguments(\" 1.2\", \"%- 1.1f\", 1.2),\n+                arguments(\" 1.2\", \"%- 2.1f\", 1.2),\n+                arguments(\" 1.2\", \"%- 3.1f\", 1.2),\n+                arguments(\" 1.2\", \"%- 4.1f\", 1.2),\n+                arguments(\" 1.2 \", \"%- 5.1f\", 1.2),\n+                arguments(\" 1.2      \", \"%- 10.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%- 1.1f\", -1.2),\n+                arguments(\"-1.2\", \"%- 2.1f\", -1.2),\n+                arguments(\"-1.2\", \"%- 3.1f\", -1.2),\n+                arguments(\"-1.2\", \"%- 4.1f\", -1.2),\n+                arguments(\"-1.2 \", \"%- 5.1f\", -1.2),\n+                arguments(\"-1.2      \", \"%- 10.1f\", -1.2),\n+\n+                \/* zero padding, right adjusted, optional sign *\/\n+                arguments(\"12\", \"%01d\", 12),\n+                arguments(\"12\", \"%02d\", 12),\n+                arguments(\"012\", \"%03d\", 12),\n+                arguments(\"0012\", \"%04d\", 12),\n+                arguments(\"00012\", \"%05d\", 12),\n+                arguments(\"0000000012\", \"%010d\", 12),\n+\n+                arguments(\"-12\", \"%01d\", -12),\n+                arguments(\"-12\", \"%02d\", -12),\n+                arguments(\"-12\", \"%03d\", -12),\n+                arguments(\"-012\", \"%04d\", -12),\n+                arguments(\"-0012\", \"%05d\", -12),\n+                arguments(\"-000000012\", \"%010d\", -12),\n+\n+                arguments(\"1.2\", \"%01.1f\", 1.2),\n+                arguments(\"1.2\", \"%02.1f\", 1.2),\n+                arguments(\"1.2\", \"%03.1f\", 1.2),\n+                arguments(\"01.2\", \"%04.1f\", 1.2),\n+                arguments(\"001.2\", \"%05.1f\", 1.2),\n+                arguments(\"00000001.2\", \"%010.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%01.1f\", -1.2),\n+                arguments(\"-1.2\", \"%02.1f\", -1.2),\n+                arguments(\"-1.2\", \"%03.1f\", -1.2),\n+                arguments(\"-1.2\", \"%04.1f\", -1.2),\n+                arguments(\"-01.2\", \"%05.1f\", -1.2),\n+                arguments(\"-0000001.2\", \"%010.1f\", -1.2),\n+\n+                \/* zero padding, right adjusted, mandatory plus sign *\/\n+                arguments(\"+12\", \"%+01d\", 12),\n+                arguments(\"+12\", \"%+02d\", 12),\n+                arguments(\"+12\", \"%+03d\", 12),\n+                arguments(\"+012\", \"%+04d\", 12),\n+                arguments(\"+0012\", \"%+05d\", 12),\n+                arguments(\"+000000012\", \"%+010d\", 12),\n+\n+                arguments(\"-12\", \"%+01d\", -12),\n+                arguments(\"-12\", \"%+02d\", -12),\n+                arguments(\"-12\", \"%+03d\", -12),\n+                arguments(\"-012\", \"%+04d\", -12),\n+                arguments(\"-0012\", \"%+05d\", -12),\n+                arguments(\"-000000012\", \"%+010d\", -12),\n+\n+                arguments(\"+1.2\", \"%+01.1f\", 1.2),\n+                arguments(\"+1.2\", \"%+02.1f\", 1.2),\n+                arguments(\"+1.2\", \"%+03.1f\", 1.2),\n+                arguments(\"+1.2\", \"%+04.1f\", 1.2),\n+                arguments(\"+01.2\", \"%+05.1f\", 1.2),\n+                arguments(\"+0000001.2\", \"%+010.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%+01.1f\", -1.2),\n+                arguments(\"-1.2\", \"%+02.1f\", -1.2),\n+                arguments(\"-1.2\", \"%+03.1f\", -1.2),\n+                arguments(\"-1.2\", \"%+04.1f\", -1.2),\n+                arguments(\"-01.2\", \"%+05.1f\", -1.2),\n+                arguments(\"-0000001.2\", \"%+010.1f\", -1.2),\n+\n+                \/* zero padding, right adjusted, mandatory blank sign *\/\n+                arguments(\" 12\", \"% 01d\", 12),\n+                arguments(\" 12\", \"% 02d\", 12),\n+                arguments(\" 12\", \"% 03d\", 12),\n+                arguments(\" 012\", \"% 04d\", 12),\n+                arguments(\" 0012\", \"% 05d\", 12),\n+                arguments(\" 000000012\", \"% 010d\", 12),\n+\n+                arguments(\"-12\", \"% 01d\", -12),\n+                arguments(\"-12\", \"% 02d\", -12),\n+                arguments(\"-12\", \"% 03d\", -12),\n+                arguments(\"-012\", \"% 04d\", -12),\n+                arguments(\"-0012\", \"% 05d\", -12),\n+                arguments(\"-000000012\", \"% 010d\", -12),\n+\n+                arguments(\" 1.2\", \"% 01.1f\", 1.2),\n+                arguments(\" 1.2\", \"% 02.1f\", 1.2),\n+                arguments(\" 1.2\", \"% 03.1f\", 1.2),\n+                arguments(\" 1.2\", \"% 04.1f\", 1.2),\n+                arguments(\" 01.2\", \"% 05.1f\", 1.2),\n+                arguments(\" 0000001.2\", \"% 010.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"% 01.1f\", -1.2),\n+                arguments(\"-1.2\", \"% 02.1f\", -1.2),\n+                arguments(\"-1.2\", \"% 03.1f\", -1.2),\n+                arguments(\"-1.2\", \"% 04.1f\", -1.2),\n+                arguments(\"-01.2\", \"% 05.1f\", -1.2),\n+                arguments(\"-0000001.2\", \"% 010.1f\", -1.2),\n+\n+        };\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    void padding(String expected, String format, Object value) {\n+        assertEquals(expected, String.format(format, value));\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/Formatter\/Padding.java","additions":313,"deletions":0,"binary":false,"changes":313,"status":"added"}]}