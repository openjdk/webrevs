{"files":[{"patch":"@@ -0,0 +1,195 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4957639\n+  @summary REGRESSION: blocked mouse input in a special case on win32\n+  @key headful\n+  @run main BlockedMouseInputTest\n+*\/\n+\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+\n+import java.awt.event.InputEvent;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+\n+import javax.swing.JComboBox;\n+import javax.swing.JDialog;\n+\/*\n+ * Threads:\n+ * 0) Main - running others, checking\n+ * 1) First - opening first dialog\n+ * 2) Second - opening second dialog, generating item state changed events\n+ * We need 1 and 2 thread in order to don't block main thread\n+ *\/\n+\n+public class BlockedMouseInputTest implements ItemListener {\n+    Frame frame = null;\n+\n+    ThreadDialog thread1 = null;\n+    ThreadDialog thread2 = null;\n+\n+    \/\/ If we recreate dialogs in the Threads classes then the test works fine\n+    JComboBox<String> cb = null;\n+    JDialog dialog1 = null;\n+    JDialog dialog2 = null;\n+\n+    Robot r = null;\n+    volatile Point loc = null;\n+    volatile int cbWidth;\n+    volatile int cbHeight;\n+\n+    volatile int selected;\n+\n+    volatile boolean passed = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        BlockedMouseInputTest test = new BlockedMouseInputTest();\n+        test.start();\n+    }\n+\n+    public void start() throws Exception {\n+        try {\n+            r = new Robot();\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new Frame(\"Parent frame\");\n+                frame.setSize(200, 200);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+                if (dialog1 != null) {\n+                    dialog1.dispose();\n+                }\n+                if (dialog2 != null) {\n+                    dialog2.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private void test() throws Exception {\n+\n+        \/\/ The state of the combobox should stay the same to new iteration of the cycle\n+        \/\/ We couldn't run the thread twice\n+        EventQueue.invokeAndWait(() -> {\n+            cb = new JComboBox<String>(new String[]{\"entry a\", \"entry b\",\n+                    \"entry c\", \"entry d\", \"entry e\"});\n+            dialog1 = new JDialog(frame, \"dialog1\", true);\n+            dialog2 = new JDialog(frame, \"dialog2\", true);\n+            dialog2.getContentPane().add(cb);\n+            cb.addItemListener(this);\n+\n+            dialog1.setLocation(20, 20);\n+            dialog1.setSize(new Dimension(150, 50));\n+            dialog2.setLocation(120, 120);\n+            dialog2.setSize(new Dimension(150, 50));\n+        });\n+\n+        for (int i = 0; i < 2; i++) {\n+            passed = false;\n+            tryGenerateEvent();\n+            if (!passed && i != 0) {\n+                throw new RuntimeException(\"Test failed: triggering not occurred, iteration - \" + i);\n+            }\n+        }\n+    }\n+\n+    private void tryGenerateEvent() throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            thread1 = new ThreadDialog(dialog1);\n+            thread2 = new ThreadDialog(dialog2);\n+        });\n+\n+        thread1.start();\n+        r.delay(500);\n+        r.waitForIdle();\n+        thread2.start();\n+        r.delay(500);\n+        r.waitForIdle();\n+\n+        doRobotAction();\n+\n+        EventQueue.invokeAndWait(() -> {\n+            dialog2.setVisible(false);\n+            dialog1.setVisible(false);\n+        });\n+    }\n+\n+    public void itemStateChanged(ItemEvent ie) {\n+        passed = true;\n+        System.out.println(\"event: \"+ie);\n+    }\n+\n+    public void doRobotAction() throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            loc = cb.getLocationOnScreen();\n+            cbWidth = cb.getWidth();\n+            cbHeight = cb.getHeight();\n+        });\n+\n+        r.mouseMove(loc.x + cbWidth \/ 2, loc.y + cbHeight \/ 2);\n+        r.delay(500);\n+        r.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        r.delay(500);\n+        r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        r.delay(500);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            selected = cb.getSelectedIndex();\n+        });\n+\n+        r.mouseMove(loc.x + cbWidth \/ 2, loc.y + cbHeight * ((selected == 0) ? 2 : 1) + 10);\n+        r.delay(500);\n+        r.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        r.delay(500);\n+        r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        r.delay(500);\n+\n+        r.waitForIdle();\n+    }\n+}\n+\n+class ThreadDialog extends Thread {\n+\n+    JDialog dialog = null;\n+\n+    public ThreadDialog(JDialog dialog){\n+        this.dialog = dialog;\n+    }\n+\n+    public void run() {\n+        dialog.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Modal\/BlockedMouseInputTest.java","additions":195,"deletions":0,"binary":false,"changes":195,"status":"added"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 6271546\n+  @summary REG. Mouse input blocked on a window which is a child of a modal dialog\n+  @key headful\n+  @run main BlockedMouseInputTest2\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Dialog;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+\n+public class BlockedMouseInputTest2 {\n+    Frame frame;\n+    Dialog dlg1;\n+    Dialog dlg2;\n+    Button b;\n+    Robot r = null;\n+    volatile boolean passed = false;\n+    volatile Point p;\n+    volatile int btnWidth;\n+    volatile int btnHeight;\n+\n+    public static void main(String args[]) throws Exception {\n+        BlockedMouseInputTest2 test = new BlockedMouseInputTest2();\n+        test.start();\n+    }\n+\n+    public void start() throws Exception {\n+        try {\n+            r = new Robot();\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new Frame(\"Parent frame\");\n+                frame.setBounds(100, 100, 200, 100);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+\n+                dlg1 = new Dialog(frame, \"Dialog 1\", true);\n+                dlg1.setBounds(200, 200, 200, 100);\n+\n+            new Thread(new Runnable() {\n+                public void run() {\n+                    dlg1.setVisible(true);\n+                }\n+            }).start();\n+            });\n+\n+            r.delay(1000);\n+            r.waitForIdle();\n+\n+            EventQueue.invokeAndWait(() -> {\n+                dlg2 = new Dialog(frame, \"Dialog 2\", true);\n+                dlg2.setBounds(300, 300, 200, 100);\n+            });\n+            new Thread(new Runnable() {\n+                public void run() {\n+                    dlg2.setVisible(true);\n+                }\n+            }).start();\n+\n+            r.delay(1000);\n+            r.waitForIdle();\n+\n+            EventQueue.invokeAndWait(() -> {\n+                Dialog d = new Dialog(dlg2, \"D\", false);\n+                d.setBounds(400, 400, 200, 100);\n+                d.setLayout(new BorderLayout());\n+                b = new Button(\"Test me\");\n+                b.addActionListener(new ActionListener() {\n+                    public void actionPerformed(ActionEvent e) {\n+                        passed = true;\n+                    }\n+                });\n+                d.add(b, BorderLayout.CENTER);\n+                d.setVisible(true);\n+            });\n+\n+            r.delay(1000);\n+            r.waitForIdle();\n+\n+            EventQueue.invokeAndWait(() -> {\n+                p = b.getLocationOnScreen();\n+                btnWidth = b.getSize().width;\n+                btnHeight = b.getSize().height;\n+            });\n+            r.mouseMove(p.x + btnWidth \/ 2, p.y + btnHeight \/ 2);\n+            r.delay(500);\n+            r.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            r.delay(500);\n+            r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            r.delay(500);\n+\n+            if (!passed) {\n+                throw new RuntimeException(\"Test is FAILED: button is not pressed\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+                if (dlg1 != null) {\n+                    dlg1.dispose();\n+                }\n+                if (dlg2 != null) {\n+                    dlg2.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Modal\/BlockedMouseInputTest2.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -0,0 +1,216 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 6274378\n+  @summary Test for 6274378: Blocked mouse and keyboard input after hiding modal dialog\n+  @key headful\n+  @run main BlockedMouseInputTest3\n+*\/\n+\n+import java.awt.Button;\n+import java.awt.Dialog;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.Point;\n+import java.awt.Robot;\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+\n+\n+public class BlockedMouseInputTest3 {\n+    Frame frame;\n+\n+    Dialog dlg1; \/\/ application-modal\n+    Dialog dlg2; \/\/ application-modal\n+    Dialog d; \/\/ toolkit-modal\n+\n+    Button b1; \/\/ in dlg1\n+    Button b2; \/\/ in dlg2\n+\n+    Robot r = null;\n+\n+    volatile boolean b1pressed, b2pressed;\n+    volatile boolean dlg1activated, dlg2activated;\n+    volatile int b1Width, b1Height;\n+    volatile int b2Width, b2Height;\n+    volatile Point p1, p2;\n+\n+    public static void main(String args[]) throws Exception {\n+        BlockedMouseInputTest3 test = new BlockedMouseInputTest3();\n+        test.start();\n+    }\n+\n+    public void start() throws Exception {\n+        try {\n+            r = new Robot();\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new Frame(\"Parent frame\");\n+                frame.setBounds(0, 0, 200, 100);\n+                frame.setVisible(true);\n+\n+                \/\/ create d and set it visible\n+                d = new Dialog(frame, \"Toolkit-modal\", Dialog.ModalityType.TOOLKIT_MODAL);\n+                d.setBounds(250, 0, 200, 100);\n+            });\n+            EventQueue.invokeLater(new Runnable() {\n+                public void run() {\n+                    d.setVisible(true);\n+                }\n+            });\n+\n+            r.delay(1000);\n+            r.waitForIdle();\n+\n+            \/\/ create dlg1 and set it visible\n+            \/\/ dlg1 is blocked by d\n+\n+            EventQueue.invokeAndWait(() -> {\n+                dlg1 = new Dialog(frame, \"Application-modal 1\", Dialog.ModalityType.APPLICATION_MODAL);\n+                dlg1.setBounds(0, 150, 200, 100);\n+                dlg1.addWindowListener(new WindowAdapter() {\n+                    public void windowActivated(WindowEvent e) {\n+                        dlg1activated = true;\n+                    }\n+                });\n+                b1 = new Button(\"B1\");\n+                b1.addActionListener(new ActionListener() {\n+                    public void actionPerformed(ActionEvent e) {\n+                        b1pressed = true;\n+                    }\n+                });\n+                dlg1.add(b1);\n+            });\n+            EventQueue.invokeLater(new Runnable() {\n+                public void run() {\n+                    dlg1.setVisible(true);\n+                }\n+            });\n+\n+            r.delay(1000);\n+            r.waitForIdle();\n+\n+            \/\/ create dlg2 and set it visible\n+            \/\/ dlg2 is blocked by d\n+            EventQueue.invokeAndWait(() -> {\n+                dlg2 = new Dialog(frame, \"Application-modal 2\", Dialog.ModalityType.APPLICATION_MODAL);\n+                dlg2.setBounds(0, 300, 200, 100);\n+                dlg2.addWindowListener(new WindowAdapter() {\n+                    public void windowActivated(WindowEvent e) {\n+                        dlg2activated = true;\n+                    }\n+                });\n+                b2 = new Button(\"B2\");\n+                b2.addActionListener(new ActionListener() {\n+                    public void actionPerformed(ActionEvent e) {\n+                        b2pressed = true;\n+                    }\n+                });\n+                dlg2.add(b2);\n+            });\n+            EventQueue.invokeLater(new Runnable() {\n+                public void run() {\n+                    dlg2.setVisible(true);\n+                }\n+            });\n+\n+            r.delay(1000);\n+            r.waitForIdle();\n+\n+\n+            \/\/ hide d\n+            \/\/ dlg2 is unblocked and dlg1 is blocked by dlg2\n+            EventQueue.invokeAndWait(() -> {\n+                d.setVisible(false);\n+            });\n+\n+            r.delay(1000);\n+            r.waitForIdle();\n+\n+            \/\/ values to check\n+            b1pressed = false;\n+            b2pressed = false;\n+            dlg1activated = false;\n+            dlg2activated = false;\n+            System.err.println(KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow());\n+\n+            \/\/ check mouse events and activation\n+            EventQueue.invokeAndWait(() -> {\n+                p1 = b1.getLocationOnScreen();\n+                b1Width = b1.getWidth();\n+                b1Height = b1.getHeight();\n+            });\n+            clickPoint(r, p1.x + b1Width \/ 2, p1.y + b1Height \/ 2);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                dlg1activated = (KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow() == dlg1);\n+            });\n+\n+            EventQueue.invokeAndWait(() -> {\n+                p2 = b2.getLocationOnScreen();\n+                b2Width = b2.getWidth();\n+                b2Height = b2.getHeight();\n+            });\n+\n+            clickPoint(r, p2.x + b2Width \/ 2, p2.y + b2Height \/ 2);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                dlg2activated = (KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow() == dlg2);\n+            });\n+\n+            if (dlg1activated || b1pressed || !dlg2activated || !b2pressed) {\n+                throw new RuntimeException(\"Test is FAILED\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+                if (dlg1 != null) {\n+                    dlg1.dispose();\n+                }\n+                if (dlg2 != null) {\n+                    dlg2.dispose();\n+                }\n+                if (d != null) {\n+                    d.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void clickPoint(Robot r, int x, int y) {\n+        r.mouseMove(x, y);\n+        r.delay(500);\n+        r.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        r.delay(500);\n+        r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        r.delay(500);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Modal\/BlockedMouseInputTest3.java","additions":216,"deletions":0,"binary":false,"changes":216,"status":"added"},{"patch":"@@ -0,0 +1,163 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4272629\n+  @summary Modal dialog cannot be made non-modal\n+  @key headful\n+  @run main ModalDialogCannotBeMadeNonModalTest\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Dialog;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+\n+public class ModalDialogCannotBeMadeNonModalTest {\n+    Frame frame = null;\n+    Button button = null;\n+    Dialog dialog = null;\n+    Robot r = null;\n+    volatile Point loc = null;\n+\n+    volatile private boolean buttonPressed = false;\n+\n+    public static void main(String args[]) throws Exception {\n+        ModalDialogCannotBeMadeNonModalTest test = new ModalDialogCannotBeMadeNonModalTest();\n+        test.start();\n+    }\n+\n+    public void start() throws Exception {\n+        try {\n+            r = new Robot();\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new Frame(\"Parent frame\");\n+                frame.setLayout(new BorderLayout());\n+                frame.setBounds(200, 200, 200, 200);\n+                frame.setVisible(true);\n+\n+                button = new Button(\"Trigger\");\n+                button.addActionListener(new ActionListener() {\n+                    public void actionPerformed(ActionEvent e) {\n+                        buttonPressed = true;\n+                    }\n+                });\n+                frame.add(button);\n+                frame.setVisible(true);\n+\n+                dialog = new Dialog(frame, \"Dialog\");\n+                dialog.setBounds(0, 0, 100, 100);\n+                dialog.addWindowListener(new WindowAdapter() {\n+                    public void windowClosing(WindowEvent we) {\n+                        we.getWindow().setVisible(false);\n+                    }\n+                });\n+            });\n+\n+            r.delay(500);\n+            r.waitForIdle();\n+            EventQueue.invokeAndWait(() -> {\n+                loc = button.getLocationOnScreen();\n+            });\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+                if (dialog != null) {\n+                    dialog.dispose();\n+                }\n+            });\n+        }\n+\n+    }\n+    public void test() throws Exception {\n+\n+        \/\/ 1-visibility, 2-modality\n+        System.out.println(\"1 create visible, modal ... \");\n+        EventQueue.invokeAndWait(() -> {\n+            dialog.setModal(true);\n+            setDialogVisible(true);\n+        });\n+        r.delay(1000);\n+        r.waitForIdle();\n+\n+        System.out.println(\"2 set non visible, modal ... \");\n+        EventQueue.invokeAndWait(() -> {\n+            dialog.setVisible(false);\n+            dialog.setModal(false);\n+        });\n+        r.delay(1000);\n+        r.waitForIdle();\n+\n+        System.out.println(\"3 set visible, non modal ... \");\n+        EventQueue.invokeAndWait(() -> {\n+            setDialogVisible(true);\n+        });\n+        r.delay(1000);\n+        r.waitForIdle();\n+\n+        System.out.println(\"4 checking ... \");\n+        check();\n+        r.delay(1000);\n+        r.waitForIdle();\n+        System.out.println(\"5 exit \");\n+    }\n+\n+    public void check() throws Exception {\n+        r.delay(500);\n+        r.mouseMove(loc.x + button.getWidth()\/2, loc.y + button.getHeight()\/2);\n+        r.delay(500);\n+        r.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        r.delay(500);\n+        r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        r.delay(500);\n+\n+        if (!buttonPressed) {\n+            throw new RuntimeException(\"Test failed\");\n+        }\n+    }\n+\n+    public void setDialogVisible(boolean visibility) {\n+        if (visibility) {\n+            new Thread(new Runnable() {\n+                public void run() {\n+                    dialog.setVisible(true);\n+                }\n+            }).start();\n+        } else {\n+            dialog.setVisible(false);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Modal\/ModalDialogCannotBeMadeNonModalTest.java","additions":163,"deletions":0,"binary":false,"changes":163,"status":"added"},{"patch":"@@ -0,0 +1,188 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4256692\n+  @summary Showing a non modal dialog after a modal dialog allows both to receive events\n+  @key headful\n+  @run main NonModalDialogReceiveEventsAfterModalTest\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Dialog;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseMotionAdapter;\n+\n+public class NonModalDialogReceiveEventsAfterModalTest implements Runnable\n+{\n+    Frame modalParentFrame, nonModalParentFrame;\n+    Dialog modalDialog, nonModalDialog;\n+\n+    volatile public static boolean passed = true;\n+    volatile public static String errorMessage = null;\n+\n+    Robot r = null;\n+    volatile Point loc = null;\n+\n+    public static void main(String args[]) throws Exception {\n+        NonModalDialogReceiveEventsAfterModalTest test = new NonModalDialogReceiveEventsAfterModalTest();\n+        test.start();\n+    }\n+\n+    public void start() throws Exception {\n+\n+        \/\/ create an independent top level frame to be the\n+        \/\/ parent of the modal dialog and show it\n+        try {\n+            r = new Robot();\n+            EventQueue.invokeAndWait(() -> {\n+                modalParentFrame = new Frame(\"Parent of modal dialog\");\n+                modalParentFrame.setBounds(100, 100, 200, 200);\n+                modalParentFrame.setLayout(new BorderLayout());\n+                modalParentFrame.setVisible(true);\n+\n+                \/\/ create an independent top level frame to be the\n+                \/\/ parent of the non-modal dialog and show it\n+                nonModalParentFrame = new Frame(\"Parent of non-modal dialog\");\n+                nonModalParentFrame.setBounds(400, 100, 200, 200);\n+                nonModalParentFrame.setLayout(new BorderLayout());\n+                nonModalParentFrame.setVisible(true);\n+\n+                \/\/ create the non-modal dialog and kick off a\n+                \/\/ thread to show it in 1 second\n+                nonModalDialog = new Dialog(nonModalParentFrame, \"Non modal\", false);\n+                nonModalDialog.setBounds(400, 150, 100, 100);\n+                nonModalDialog.addMouseMotionListener(new TestMouseMotionAdapter());\n+                nonModalDialog.addFocusListener(new TestFocusAdapter());\n+                new Thread(this).start();\n+\n+                \/\/ create the modal dialog and show it from this thread\n+                modalDialog = new Dialog(modalParentFrame, \"Modal\", true);\n+                modalDialog.setBounds(100, 400, 100, 100);\n+                modalDialog.setVisible(true);\n+            });\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (modalParentFrame != null) {\n+                    modalParentFrame.dispose();\n+                }\n+                if (nonModalParentFrame != null) {\n+                    nonModalParentFrame.dispose();\n+                }\n+                if (modalDialog != null) {\n+                    modalDialog.dispose();\n+                }\n+                if (nonModalDialog != null) {\n+                    nonModalDialog.dispose();\n+                }\n+            });\n+        }\n+\n+    }\n+\n+    \/\/ This is the implementation of Runnable and is\n+    \/\/ used to show the non-modal dialog in 1 second\n+    public void run() {\n+        r.delay(1000);\n+        r.waitForIdle();\n+        \/\/show the non modal dialog\n+        nonModalDialog.setVisible(true);\n+\n+        r.delay(1000);\n+        r.waitForIdle();\n+        test();\n+    }\n+\n+    private void test() {\n+\n+        \/\/ mouse, focus, activate events triggering\n+        r.delay(500);\n+        loc = nonModalDialog.getLocationOnScreen();\n+        r.delay(500);\n+\n+        r.mouseMove(loc.x + (int) (nonModalDialog.getWidth() \/ 2), loc.y + (int) (nonModalDialog.getHeight() \/ 2));\n+        r.delay(100);\n+        r.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        r.delay(100);\n+        r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        r.delay(100);\n+        r.mouseMove(loc.x - 100, loc.y - 100);\n+\n+        r.waitForIdle();\n+\n+        \/\/ dispose modal window in order to finish test\n+        modalDialog.dispose();\n+\n+        \/\/ check test result\n+        if (!passed) {\n+            throw new RuntimeException(\"test failed: \" + errorMessage);\n+        }\n+    }\n+\n+    public static void testFailed(String message) {\n+        passed = false;\n+        errorMessage = message;\n+    }\n+}\n+\n+class TestMouseMotionAdapter extends MouseMotionAdapter {\n+\n+    public void mouseClicked(MouseEvent e){\n+        NonModalDialogReceiveEventsAfterModalTest.testFailed(\"mouseClicked\");\n+    }\n+\n+    public void mouseEntered(MouseEvent e){\n+        NonModalDialogReceiveEventsAfterModalTest.testFailed(\"mouseEntered\");\n+    }\n+\n+    public void mouseExited(MouseEvent e){\n+        NonModalDialogReceiveEventsAfterModalTest.testFailed(\"mouseExited\");\n+    }\n+\n+    public void mousePressed(MouseEvent e){\n+        NonModalDialogReceiveEventsAfterModalTest.testFailed(\"mousePressed\");\n+    }\n+\n+    public void mouseReleased(MouseEvent e){\n+        NonModalDialogReceiveEventsAfterModalTest.testFailed(\"mouseReleased\");\n+    }\n+}\n+\n+class TestFocusAdapter extends FocusAdapter {\n+    public void focusGained(FocusEvent e){\n+        NonModalDialogReceiveEventsAfterModalTest.testFailed(\"focusGained\");\n+    }\n+\n+    public void focusLost(FocusEvent e){\n+        NonModalDialogReceiveEventsAfterModalTest.testFailed(\"focusLost\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Modal\/NonModalDialogReceiveEventsAfterModalTest.java","additions":188,"deletions":0,"binary":false,"changes":188,"status":"added"},{"patch":"@@ -0,0 +1,151 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 5083555\n+  @summary Parent Windows of mouse events catchup while dragging child dialog window\n+  @key headful\n+  @run main ParentCatchupDraggingChildDialogTest\n+*\/\n+\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+import javax.swing.JButton;\n+import javax.swing.JDialog;\n+import javax.swing.JFrame;\n+\n+\n+public class ParentCatchupDraggingChildDialogTest {\n+    JFrame frame = null;\n+    JDialog dialog = null;\n+    DialogThread thread = null;\n+    JButton trigger = new JButton(\"trigger\");\n+    JButton show = new JButton(\"show\");\n+    Robot r = null;\n+    volatile Point locTrigger, locDialog;\n+\n+    volatile boolean passed = true;\n+\n+    public static void main(String args[]) throws Exception {\n+        ParentCatchupDraggingChildDialogTest test = new ParentCatchupDraggingChildDialogTest();\n+        test.start();\n+    }\n+\n+    public void start () throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new JFrame(\"Parent frame\");\n+                frame.setBounds(20, 20, 300, 300);\n+                frame.setLayout(new FlowLayout());\n+                frame.add(trigger);\n+                frame.add(show);\n+                frame.setVisible(true);\n+\n+                dialog = new JDialog(frame, \"Dialog\", true);\n+                dialog.setBounds(100, 100, 300, 300);\n+\n+                trigger.addMouseListener(new MouseAdapter() {\n+                    public void mouseEntered(MouseEvent e) {\n+                        System.out.println(\"Trigger button event: \" + e);\n+                        passed = false;\n+                    }\n+                });\n+            });\n+\n+            thread = new DialogThread(dialog);\n+            thread.start();\n+\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+                if (dialog != null) {\n+                    dialog.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    \/* Test scenario:\n+     * 1) dragging mouse over the 'Trigger' button in order to be sure that the events don't occured for non modal window\n+     * 2) checking\n+     * 3) close dialog in order to finish test\n+     *\/\n+    private void test() throws Exception {\n+        try {\n+            r = new Robot();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+\n+        r.delay(500);\n+        EventQueue.invokeAndWait(() -> {\n+            locTrigger = trigger.getLocationOnScreen();\n+        });\n+\n+        r.delay(500);\n+        EventQueue.invokeAndWait(() -> {\n+            locDialog = dialog.getLocationOnScreen();\n+        });\n+        r.delay(500);\n+\n+        r.mouseMove(locDialog.x + dialog.getWidth() \/ 2, locDialog.y + dialog.getHeight() \/ 2);\n+        r.delay(500);\n+        r.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        r.delay(500);\n+        r.mouseMove(locTrigger.x + trigger.getWidth() \/ 2, locTrigger.y + trigger.getHeight() \/ 2);\n+        r.delay(500);\n+        r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        r.delay(500);\n+\n+        if (!passed) {\n+            throw new RuntimeException(\"Test failed. Triggering occured.\");\n+        }\n+\n+        EventQueue.invokeAndWait(() -> {\n+            dialog.dispose();\n+        });\n+    }\n+}\n+\n+class DialogThread extends Thread {\n+    JDialog dialog = null;\n+\n+    public DialogThread(JDialog dialog){\n+        this.dialog = dialog;\n+    }\n+\n+    public void run(){\n+        dialog.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Modal\/ParentCatchupDraggingChildDialogTest.java","additions":151,"deletions":0,"binary":false,"changes":151,"status":"added"}]}