{"files":[{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4388802\n+  @summary tests that getting clipboard data doesn't crash when there are no\n+           formats on the clipboard\n+  @key headful\n+  @run main ZeroFormatTransferableTest\n+*\/\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+\n+public class ZeroFormatTransferableTest {\n+    public static void main(String[] args) throws InterruptedException, IOException {\n+        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();\n+        clipboard.setContents(new ZeroFormatTransferable(), null);\n+\n+        String javaPath = System.getProperty(\"java.home\", \"\");\n+\n+        Process process = new ProcessBuilder(\n+                javaPath + File.separator + \"bin\" + File.separator + \"java\",\n+                \"-cp\",\n+                System.getProperty(\"test.classes\", \".\"),\n+                \"ZeroFormatTransferableTest\").start();\n+        process.waitFor();\n+\n+        InputStream errorStream = process.getErrorStream();\n+        int count = errorStream.available();\n+        if (count > 0) {\n+            byte[] b = new byte[count];\n+            errorStream.read(b);\n+            System.err.println(\"========= Child VM System.err ========\");\n+            System.err.print(new String(b));\n+            System.err.println(\"======================================\");\n+        }\n+    }\n+}\n+\n+class ZeroFormatTransferable implements Transferable {\n+    public DataFlavor[] getTransferDataFlavors() {\n+        return new DataFlavor[] {};\n+    }\n+\n+    public boolean isDataFlavorSupported(DataFlavor df) {\n+        return false;\n+    }\n+\n+    public Object getTransferData(DataFlavor df)\n+      throws UnsupportedFlavorException {\n+        throw new UnsupportedFlavorException(df);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/ZeroFormatTransferableTest.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4267393\n+  @summary Ensures minimal amount of paints\n+  @key headful\n+  @run main ComponentResizedTest\n+*\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.event.ComponentEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class ComponentResizedTest extends Frame {\n+    volatile int paintCount = 0;\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        ComponentResizedTest componentResizedTest = new ComponentResizedTest();\n+        EventQueue.invokeAndWait(componentResizedTest::init);\n+        componentResizedTest.start();\n+        if (componentResizedTest != null) EventQueue.invokeAndWait(()\n+                -> componentResizedTest.dispose());\n+    }\n+\n+    public void paint(Graphics g) {\n+        System.out.println(\"Paint called\");\n+        ++paintCount;\n+    }\n+\n+    public void init() {\n+        setTitle(\"ComponentResizedTest\");\n+        setSize(100, 100);\n+        setLocationRelativeTo(null);\n+        setVisible(true);\n+    }\n+\n+    public void start () throws InterruptedException {\n+        Thread.sleep(1000);\n+\n+        paintCount = 0;\n+        dispatchEvent(new ComponentEvent(this, ComponentEvent.COMPONENT_RESIZED));\n+\n+        Thread.sleep(1000);\n+\n+        if (paintCount > 0) {\n+            throw new RuntimeException(\"ComponentResizedTest failed. \" +\n+                    \"Paint called.\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/ComponentEvent\/ComponentResizedTest.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4420658\n+  @summary No ClassCastException should be thrown when getComponent()\n+           is called on an event with a non-Component source.\n+           The result should be null.\n+  @key headful\n+  @run main ObjectSourceTest\n+*\/\n+\n+import java.awt.Component;\n+import java.awt.Frame;\n+import java.awt.event.ComponentEvent;\n+\n+\n+public class ObjectSourceTest {\n+    static Frame frame;\n+\n+    public static void main(String[] args) {\n+        frame = new Frame(\"ObjectSourceTest\");\n+\n+        ComponentEvent ce = new ComponentEvent(frame, ComponentEvent.COMPONENT_SHOWN);\n+        Object obj = new Object();\n+        ce.setSource(obj);\n+\n+        Component comp = ce.getComponent();\n+        if (comp != null) {\n+            throw new RuntimeException(\"ObjectSourceTest failed. comp != null\");\n+        }\n+\n+        if (frame != null) {\n+            frame.dispose();\n+        }\n+    }\n+ }\n","filename":"test\/jdk\/java\/awt\/event\/ComponentEvent\/ObjectSourceTest.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4523758\n+  @requires (os.family == \"windows\")\n+  @summary Checks denied setBounds doesn't generate ComponentEvent\n+  @key headful\n+  @run main ResizeDeniedTest\n+*\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.event.ComponentEvent;\n+import java.awt.event.ComponentListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class ResizeDeniedTest implements ComponentListener {\n+    static int runs = 0;\n+    static Frame frame;\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+\n+        ResizeDeniedTest resizeDeniedTest = new ResizeDeniedTest();\n+        EventQueue.invokeAndWait(() -> {\n+            frame = new Frame(\"ResizeDeniedTest\");\n+            frame.addComponentListener(resizeDeniedTest);\n+            frame.setSize(1, 1);\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n+        });\n+\n+        synchronized(resizeDeniedTest) {\n+            resizeDeniedTest.wait(2000);\n+        }\n+\n+        if (frame != null) {\n+            EventQueue.invokeAndWait(() -> frame.dispose());\n+        }\n+\n+        if (runs > 10) {\n+            System.out.println(\"Infinite loop\");\n+            throw new RuntimeException(\"Infinite loop\");\n+        }\n+    }\n+\n+    public void componentHidden(ComponentEvent e) {}\n+\n+    public void componentMoved(ComponentEvent e) {}\n+\n+    public void componentResized(ComponentEvent e) {\n+        frame.setSize(1, 1);\n+        System.out.println(\"Size \" + frame.getSize());\n+        ++runs;\n+        if (runs > 10) {\n+            System.out.println(\"Infinite loop\");\n+            synchronized(this) {\n+                this.notify();\n+            }\n+            throw new RuntimeException(\"Infinite loop\");\n+        }\n+    }\n+\n+    public void componentShown(ComponentEvent e) {}\n+}\n","filename":"test\/jdk\/java\/awt\/event\/ComponentEvent\/ResizeDeniedTest.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4715486\n+  @summary Tests that FocusEvent.opposite is not serialized\n+  @key headful\n+  @run main OppositeSerialization\n+*\/\n+\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.event.FocusEvent;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import static java.lang.Integer.valueOf;\n+\n+\/**\n+ * \"This is an AUTOMATIC test\",\n+ * \"however, that's what it does:\",\n+ * \"1. It tests that FocusEvent.opposite field is written\",\n+ * \"to serialized stream as null regardless of whether it\",\n+ * \"is actually null or not. For this purpose, we serialize\",\n+ * \"a FocusEvent with really huge opposite, and then check\",\n+ * \"if serialized object is huge or not.\",\n+ * \"2. It tests that FocusEvent.opposite deserializes as\",\n+ * \"null, even if it was serialized in the previous version\",\n+ * \"of JDK. For this purpose, file old.ser is included into\",\n+ * \"test. It is FocusEvent serialized with 1.4, with non-null\",\n+ * \"opposite. We check that after deserialization opposite\",\n+ * \"field is null\"\n+ *\/\n+public class OppositeSerialization {\n+    static Button b1;\n+    static Frame b2;\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+        EventQueue.invokeAndWait(() -> {\n+            b1 = new Button(\"OppositeSerialization - Source\");\n+            b2 = new Frame(\"OppositeSerialization - Opposite\");\n+            b2.setLayout(new FlowLayout());\n+\n+            for (int i = 0; i < 10000; i++) {\n+                String s = (valueOf(i)).toString();\n+                b2.add(new Button(\"Button\" + s));\n+            }\n+        });\n+\n+        FocusEvent evt1 = new FocusEvent(b1, FocusEvent.FOCUS_GAINED, false, b2);\n+\n+        \/*\n+         * Here we test that opposite component isn't serialized.\n+         * We created a really huge opposite component for a focus\n+         * event evt1 and now we'll see if the size of serialized data\n+         * is big.\n+         *\/\n+        try {\n+            FileOutputStream fos = new FileOutputStream(\"new.ser\");\n+            ObjectOutputStream oos = new ObjectOutputStream(fos);\n+            oos.writeObject(evt1);\n+            oos.flush();\n+        } catch (Exception e1) {\n+            System.out.println(\"Sorry! Couldn't write the stream\");\n+            System.out.println(\"The test failed, but the reason is \" +\n+                    \"unrelated to the subject\");\n+            throw new RuntimeException(\"The test couldn't write serialized data\");\n+        }\n+\n+        File file = new File(\"new.ser\");\n+        if (file.length() > 50000) {\n+            System.out.println(\"The test failed: serialized \" +\n+                    \"FocusEvent too huge\");\n+            System.err.println(\"Serialized FocusEvent is too huge.\");\n+            System.err.println(\"Probably opposite field is \" +\n+                    \"serialized incorrectly.\");\n+            throw new RuntimeException(\"Serialized FocusEvent is too huge\");\n+        }\n+\n+        \/*\n+         * Here we test that opposite is not deserialized even if it is present\n+         * in the stream. old.ser is created with JDK1.4 using the following\n+         * source code:\n+         *\n+         * import java.awt.event.*;\n+         * import java.io.*;\n+         * import java.awt.*;\n+         *\n+         * public class OldFocusSerializer {\n+         *\n+         *     public static void main(String[] args) {\n+         *\n+         *         Button b1 = new Button(\"Source\");\n+         *         Button b2 = new Button(\"Opposite\");\n+         *\n+         *         FocusEvent evt1 = new FocusEvent(b1,\n+         *                                          FocusEvent.FOCUS_GAINED,\n+         *                                          false,\n+         *                                          b2);\n+         *\n+         *         try {\n+         *             FileOutputStream fos = new FileOutputStream(\"old.ser\");\n+         *             ObjectOutputStream oos = new ObjectOutputStream(fos);\n+         *             oos.writeObject(evt1);\n+         *             oos.flush();\n+         *         } catch (IOException e) {\n+         *             System.out.println(\"Sorry! Couldn't write the stream\");\n+         *         }\n+         *     }\n+         * }\n+         *\/\n+        FocusEvent evt2;\n+        String testPath = System.getProperty(\"test.src\", \".\");\n+        try {\n+            FileInputStream fis = new FileInputStream(testPath +\n+                    File.separator + \"old.ser\");\n+            ObjectInputStream ois = new ObjectInputStream(fis);\n+            evt2 = (FocusEvent)ois.readObject();\n+        } catch (Exception e2) {\n+            System.out.println(\"The test failed as it couldn't read the stream\");\n+            throw new RuntimeException(\"The test couldn't read serialized data\");\n+        }\n+\n+        if (evt2.getOppositeComponent() != null) {\n+            System.out.println(\"The test failed: opposite component \" +\n+                    \"deserialized to non-null value\");\n+            System.err.println(\"FocusEvent stored in old.ser should have \" +\n+                    \"null opposite field.\");\n+            throw new RuntimeException(\"Non-null opposite component \" +\n+                    \"after deserialization\");\n+        }\n+\n+        if (b2 != null) {\n+            EventQueue.invokeAndWait(() -> b2.dispose());\n+        }\n+\n+        System.out.println(\"The test passed\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/FocusEvent\/OppositeSerialization\/OppositeSerialization.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"},{"filename":"test\/jdk\/java\/awt\/event\/FocusEvent\/OppositeSerialization\/old.ser","binary":true,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4460376\n+  @summary HierarchyEvents on Frame should be dispatched correctly\n+           when on its child Window this event type enabled\n+  @key headful\n+  @run main HierarchyEventOnWindowTest\n+*\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.Button;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Window;\n+import java.awt.event.HierarchyBoundsAdapter;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class HierarchyEventOnWindowTest {\n+    static Frame frame;\n+\n+    public static void main(String args[]) throws InterruptedException,\n+            InvocationTargetException {\n+        EventQueue.invokeAndWait(() -> {\n+            frame = new Frame(\"HierarchyEventOnWindowTest\");\n+            CustomWindow window = new CustomWindow(frame);\n+            window.enableEvents();\n+            frame.add(new Button(\"\"));\n+            window.disableEvents();\n+            window.addHierarchyListener(e -> {});\n+            window.addHierarchyBoundsListener(new HierarchyBoundsAdapter(){});\n+            frame.add(new Button(\"\"));\n+        });\n+\n+        if (frame != null) {\n+            EventQueue.invokeAndWait(() -> frame.dispose());\n+        }\n+    }\n+}\n+\n+class CustomWindow extends Window {\n+    public CustomWindow(Frame frame) {\n+        super(frame);\n+    }\n+    public void enableEvents() {\n+        enableEvents(AWTEvent.HIERARCHY_EVENT_MASK |\n+                     AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+    }\n+    public void disableEvents() {\n+        disableEvents(AWTEvent.HIERARCHY_EVENT_MASK |\n+                      AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/HierarchyEvent\/HierarchyEventOnWindowTest.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}