{"files":[{"patch":"@@ -69,1 +69,1 @@\n-      uses: actions\/upload-artifact@v3\n+      uses: actions\/upload-artifact@v4\n@@ -77,1 +77,1 @@\n-      uses: actions\/github-script@v6\n+      uses: actions\/github-script@v7\n","filename":".github\/actions\/do-build\/action.yml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-      uses: actions\/cache@v3\n+      uses: actions\/cache@v4\n","filename":".github\/actions\/get-bootjdk\/action.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-      uses: actions\/download-artifact@v3\n+      uses: actions\/download-artifact@v4\n@@ -58,1 +58,1 @@\n-      uses: actions\/download-artifact@v3\n+      uses: actions\/download-artifact@v4\n","filename":".github\/actions\/get-bundles\/action.yml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-      uses: actions\/cache@v3\n+      uses: actions\/cache@v4\n","filename":".github\/actions\/get-jtreg\/action.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-      uses: msys2\/setup-msys2@v2\n+      uses: msys2\/setup-msys2@v2.22.0\n","filename":".github\/actions\/get-msys2\/action.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-      uses: actions\/upload-artifact@v3\n+      uses: actions\/upload-artifact@v4\n","filename":".github\/actions\/upload-bundles\/action.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-        uses: actions\/cache@v3\n+        uses: actions\/cache@v4\n","filename":".github\/workflows\/build-cross-compile.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -341,1 +341,1 @@\n-        uses: actions\/github-script@v6\n+        uses: actions\/github-script@v7\n","filename":".github\/workflows\/main.yml","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-        uses: actions\/upload-artifact@v3\n+        uses: actions\/upload-artifact@v4\n@@ -202,1 +202,1 @@\n-        uses: actions\/github-script@v6\n+        uses: actions\/github-script@v7\n","filename":".github\/workflows\/test.yml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-version=11.0.23\n+version=11.0.24\n","filename":".jcheck\/conf","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-DEFAULT_VERSION_UPDATE=23\n+DEFAULT_VERSION_UPDATE=24\n@@ -36,1 +36,1 @@\n-DEFAULT_VERSION_DATE=2024-04-16\n+DEFAULT_VERSION_DATE=2024-07-16\n","filename":"make\/autoconf\/version-numbers","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -153,0 +153,4 @@\n+  oop thread_oop = jt->threadObj();\n+  if (thread_oop == NULL) {\n+    return 0;\n+  }\n@@ -154,1 +158,1 @@\n-  Handle thread_group_handle(current, java_lang_Thread::threadGroup(jt->threadObj()));\n+  Handle thread_group_handle(current, java_lang_Thread::threadGroup(thread_oop));\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrThreadGroup.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -145,7 +145,1 @@\n-#ifdef PTRACE_GETREGS_REQ\n- if (ptrace_getregs(PTRACE_GETREGS_REQ, pid, user, NULL) < 0) {\n-   print_debug(\"ptrace(PTRACE_GETREGS, ...) failed for lwp %d\\n\", pid);\n-   return false;\n- }\n- return true;\n-#elif defined(PTRACE_GETREGSET)\n+#if defined(PTRACE_GETREGSET)\n@@ -160,0 +154,6 @@\n+#elif defined(PTRACE_GETREGS_REQ)\n+ if (ptrace_getregs(PTRACE_GETREGS_REQ, pid, user, NULL) < 0) {\n+   print_debug(\"ptrace(PTRACE_GETREGS, ...) failed for lwp %d\\n\", pid);\n+   return false;\n+ }\n+ return true;\n","filename":"src\/jdk.hotspot.agent\/linux\/native\/libsaproc\/ps_proc.c","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,1 +32,2 @@\n-keys=cte_test jcmd nmt regression gc stress metaspace headful intermittent randomness cgroups\n+# external-dep:         test requires external dependencies to work\n+keys=cte_test jcmd nmt regression gc stress metaspace headful intermittent randomness cgroups external-dep\n","filename":"test\/hotspot\/jtreg\/TEST.ROOT","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,2 +29,1 @@\n- * @modules java.base\/jdk.internal.access\n- *          java.base\/jdk.internal.jimage\n+ * @modules java.base\/jdk.internal.jimage\n","filename":"test\/hotspot\/jtreg\/applications\/ctw\/modules\/jdk_jfr.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,2 +29,1 @@\n- * @modules java.base\/jdk.internal.access\n- *          java.base\/jdk.internal.jimage\n+ * @modules java.base\/jdk.internal.jimage\n","filename":"test\/hotspot\/jtreg\/applications\/ctw\/modules\/jdk_management_jfr.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-        revision = \"0.3\", extension = \"jar\", unpack = false)\n+        revision = \"0.16\", extension = \"jar\", unpack = false)\n@@ -50,0 +50,4 @@\n+    \/\/ Allow to configure jcstress mode parameter.\n+    \/\/ Test mode preset: sanity, quick, default, tough, stress.\n+    public static final String MODE_PROPERTY = \"jcstress.mode\";\n+\n@@ -58,1 +62,1 @@\n-        return artifacts.get(\"org.openjdk.jcstress.jcstress-tests-all-0.3\")\n+        return artifacts.get(\"org.openjdk.jcstress.jcstress-tests-all-0.16\")\n@@ -107,0 +111,4 @@\n+\n+        \/\/ The \"default\" preset might take days for some tests\n+        \/\/ so use quick testing by default.\n+        String mode = \"quick\";\n@@ -108,0 +116,5 @@\n+            if(jvmArg.startsWith(\"-D\" + MODE_PROPERTY)) {\n+                String[] pair = jvmArg.split(\"=\", 2);\n+                mode = pair[1];\n+                continue;\n+            }\n@@ -112,0 +125,9 @@\n+        extraFlags.add(\"-m\");\n+        extraFlags.add(mode);\n+\n+        extraFlags.add(\"-sc\");\n+        extraFlags.add(\"false\");\n+\n+        extraFlags.add(\"-af\");\n+        extraFlags.add(\"GLOBAL\");\n+\n@@ -118,1 +140,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/JcstressRunner.java","additions":25,"deletions":4,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,0 +99,1 @@\n+            + \" * @key external-dep\\n\"\n@@ -125,1 +126,1 @@\n-                .skip(4) \/\/ skip first 4 lines: name, -{80}, revision and empty line\n+                .filter(s -> s.startsWith(\"org.openjdk.jcstress.tests\"))\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/TestGenerator.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/accessAtomic.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/acqrel.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/atomicity.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/atomics.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/causality.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/coherence.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* DO NOT MODIFY THIS FILE. GENERATED BY applications.jcstress.TestGenerator *\/\n+\n+\/**\n+ * @test collections\n+ * @key external-dep\n+ * @library \/test\/lib \/\n+ * @run driver\/timeout=21600 applications.jcstress.JcstressRunner -v -t org.openjdk.jcstress.tests.collections\\.\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/collections.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/copy.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/countdownlatch.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/defaultValues.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/executors.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/fences.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/future.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/init.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/initClass.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/initLen.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/interrupt.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/locks.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/memeffects.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* DO NOT MODIFY THIS FILE. GENERATED BY applications.jcstress.TestGenerator *\/\n+\n+\/**\n+ * @test mxbeans\n+ * @key external-dep\n+ * @library \/test\/lib \/\n+ * @run driver\/timeout=21600 applications.jcstress.JcstressRunner -v -t org.openjdk.jcstress.tests.mxbeans\\.\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/mxbeans.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* DO NOT MODIFY THIS FILE. GENERATED BY applications.jcstress.TestGenerator *\/\n+\n+\/**\n+ * @test oota\n+ * @key external-dep\n+ * @library \/test\/lib \/\n+ * @run driver\/timeout=21600 applications.jcstress.JcstressRunner -v -t org.openjdk.jcstress.tests.oota\\.\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/oota.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/seqcst.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/singletons.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/strings.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/tearing.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* DO NOT MODIFY THIS FILE. GENERATED BY applications.jcstress.TestGenerator *\/\n+\n+\/**\n+ * @test threadlocal\n+ * @key external-dep\n+ * @library \/test\/lib \/\n+ * @run driver\/timeout=21600 applications.jcstress.JcstressRunner -v -t org.openjdk.jcstress.tests.threadlocal\\.\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/threadlocal.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/unsafe.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/varhandles.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/jcstress\/volatiles.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @key external-dep\n","filename":"test\/hotspot\/jtreg\/applications\/scimark\/Scimark.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023 Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/BadNativeStackInErrorHandlingTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ErrorFileRedirectTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/NestedThreadsListHandleInErrorHandlingTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ProblematicFrameTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/SafeFetchInErrorHandlingTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/SecondaryErrorTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ShowRegistersOnAssertTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestCrashOnOutOfMemoryError.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestExitOnOutOfMemoryError.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestHeapDumpOnOutOfMemoryError.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestHeapDumpPath.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestOnError.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestOnOutOfMemoryError.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ThreadsListHandleInErrorHandlingTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+ * @requires vm.flagless\n@@ -54,0 +55,1 @@\n+ * @requires vm.flagless\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TimeoutInErrorHandlingTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+ * @requires vm.flagless\n@@ -51,2 +52,1 @@\n-    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-            \"-version\");\n+    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\"-version\");\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/VeryEarlyAssertTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,174 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Choice;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Panel;\n+\n+\/*\n+ *  @test\n+ *  @bug 4115139 4128213\n+ *  @summary Tests that the (rather bizarre) rules for handling selection\n+ *  in Choice components are implemented as documented in\n+ *  \"The Java Class Libraries 2nd Edition\"\n+ *  @key headful\n+ *\/\n+\n+public class ChoiceSelectTest extends Panel {\n+    final Choice c;\n+\n+    public ChoiceSelectTest() {\n+        setLayout(new FlowLayout());\n+        c = new Choice();\n+        add(c);\n+    }\n+\n+    private void test() {\n+        testAddition();\n+        testInsertion();\n+        testRemoval();\n+        testIndices();\n+    }\n+\n+    public void testAddition() {\n+        c.removeAll();\n+\n+        \/\/ check that after first item added selection is zero\n+        c.addItem(\"zero\");\n+        if (c.getSelectedIndex() != 0) {\n+            throw new SelectionException(\"selection wrong after first add\");\n+        }\n+\n+        \/\/ check that selection doesn't change for subsequent adds\n+        c.addItem(\"one\");\n+        c.select(1);\n+        c.addItem(\"two\");\n+        if (c.getSelectedIndex() != 1) {\n+            throw new SelectionException(\"selection wrong after subsequent add\");\n+        }\n+    }\n+\n+    public void testInsertion() {\n+        c.removeAll();\n+\n+        \/\/ check that after first item inserted selection is zero\n+        c.insert(\"zero\", 0);\n+        if (c.getSelectedIndex() != 0) {\n+            throw new SelectionException(\"selection wrong after first insert\");\n+        }\n+\n+        \/\/ check that if selected item shifted, selection goes to zero\n+        c.insert(\"three\", 1);\n+        c.select(1);\n+        c.insert(\"one\", 1);\n+        if (c.getSelectedIndex() != 0) {\n+            throw new SelectionException(\"selection wrong after selected item shifted\");\n+        }\n+\n+        \/\/ check that if selected item not shifted, selection stays the same\n+        c.select(1);\n+        c.insert(\"two\", 2);\n+        if (c.getSelectedIndex() != 1) {\n+            throw new SelectionException(\"selection wrong after item inserted after selection\");\n+        }\n+    }\n+\n+    public void testRemoval() {\n+        c.removeAll();\n+\n+        \/\/ check that if removing selected item, selection goes to 0\n+        c.add(\"zero\");\n+        c.add(\"one\");\n+        c.add(\"two\");\n+        c.select(2);\n+        c.remove(2);\n+        if (c.getSelectedIndex() != 0) {\n+            throw new SelectionException(\"selection wrong after removing selected item\");\n+        }\n+\n+        \/\/ check that if removing item before the selection\n+        \/\/ the selected index is updated\n+        c.add(\"two\");\n+        c.add(\"three\");\n+        c.select(3);\n+        c.remove(1);\n+        if (c.getSelectedIndex() != 2) {\n+            throw new SelectionException(\"selection wrong after removing item before it\");\n+        }\n+    }\n+\n+    public void testIndices() {\n+        c.removeAll();\n+\n+        c.addItem(\"zero\");\n+        c.addItem(\"one\");\n+        c.addItem(\"two\");\n+        c.addItem(\"three\");\n+        c.addItem(\"four\");\n+        c.addItem(\"five\");\n+\n+        \/\/ Test selection of negative index\n+        try {\n+            c.select(-1);\n+            throw new SelectionException(\"Negative Index Test FAILED\");\n+        } catch (IllegalArgumentException expected) {}\n+\n+        \/\/ Test selection of zero index\n+        try {\n+            c.select(0);\n+        } catch (IllegalArgumentException iae) {\n+            throw new SelectionException(\"Zero Index Test FAILED\", iae);\n+        }\n+\n+        \/\/ Test selection of maximum index\n+        try {\n+            c.select(5);\n+        } catch (IllegalArgumentException iae) {\n+            throw new SelectionException(\"Maximum Index Test FAILED\", iae);\n+        }\n+\n+        \/\/ Test selection of index that is too large\n+        try {\n+            c.select(6);\n+            throw new SelectionException(\"Greater than Maximum Index Test FAILED\");\n+        } catch (IllegalArgumentException expected) {}\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> new ChoiceSelectTest().test());\n+    }\n+\n+    class SelectionException extends RuntimeException {\n+        SelectionException(String msg, Throwable cause) {\n+            super(msg, cause);\n+            System.out.println(\n+                    \"Selection item is '\" + c.getSelectedItem() +\n+                            \"' at index \" + c.getSelectedIndex());\n+        }\n+\n+        SelectionException(String msg) {\n+            this(msg, null);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/ChoiceSelectTest.java","additions":174,"deletions":0,"binary":false,"changes":174,"status":"added"},{"patch":"@@ -0,0 +1,156 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Label;\n+import java.awt.Panel;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @summary automated test for \"displayable\" property on Component\n+ *\/\n+\n+public class Displayable extends Panel {\n+    Label status = new Label(\"Displayable Test started...\");\n+\n+    public void init() {\n+        setLayout(new BorderLayout());\n+        add(\"South\", status);\n+\n+        LightDisplayable light = new LightDisplayable();\n+        shouldNotBeDisplayable(light, \"before added to container \");\n+\n+        HeavyDisplayable heavy = new HeavyDisplayable();\n+        shouldNotBeDisplayable(heavy, \"before added to container \");\n+\n+        add(\"West\", light);\n+        add(\"East\", heavy);\n+\n+        statusMessage(\"Displayable test completed successfully.\");\n+    }\n+\n+    protected void addImpl(Component child, Object constraints, int index) {\n+        super.addImpl(child, constraints, index);\n+        if (isDisplayable()) {\n+            shouldBeDisplayable(child, \"after added to displayable container \");\n+        } else {\n+            shouldNotBeDisplayable(child, \"after added to undisplayable container \");\n+        }\n+    }\n+\n+    public void remove(Component child) {\n+        super.remove(child);\n+        shouldNotBeDisplayable(child, \"after removed from displayable container \");\n+    }\n+\n+    public void statusMessage(String msg) {\n+        status.setText(msg);\n+        status.invalidate();\n+        validate();\n+    }\n+\n+    public static void shouldNotBeDisplayable(Component c, String why) {\n+        if (c.isDisplayable()) {\n+            throw new RuntimeException(\"Component is displayable \"+why+c.getName());\n+        }\n+    }\n+\n+    public static void shouldBeDisplayable(Component c, String why) {\n+        if (!c.isDisplayable()) {\n+            throw new RuntimeException(\"Component is NOT displayable \"+why+c.getName());\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            Frame f = new Frame();\n+            try {\n+                Displayable test = new Displayable();\n+                test.init();\n+                f.add(\"North\", test);\n+                f.pack();\n+            } finally {\n+                f.dispose();\n+            }\n+        });\n+    }\n+}\n+\n+class LightDisplayable extends Component {\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(50,50);\n+    }\n+\n+    public void paint(Graphics g) {\n+        Dimension size = getSize();\n+        g.setColor(Color.blue);\n+        g.fillRect(0, 0, size.width, size.height);\n+        super.paint(g);\n+    }\n+\n+    public void addNotify() {\n+        Displayable.shouldNotBeDisplayable(this, \"before addNotify \");\n+        super.addNotify();\n+        Displayable.shouldBeDisplayable(this, \"after addNotify \");\n+    }\n+\n+    public void removeNotify() {\n+        Displayable.shouldBeDisplayable(this, \"before removeNotify \");\n+        super.removeNotify();\n+        Displayable.shouldNotBeDisplayable(this, \"after removeNotify \");\n+    }\n+}\n+\n+class HeavyDisplayable extends Panel {\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(50, 50);\n+    }\n+\n+    public void paint(Graphics g) {\n+        Dimension size = getSize();\n+        g.setColor(Color.black);\n+        g.fillRect(0, 0, size.width, size.height);\n+        super.paint(g);\n+    }\n+\n+    public void addNotify() {\n+        Displayable.shouldNotBeDisplayable(this, \"before addNotify \");\n+        super.addNotify();\n+        Displayable.shouldBeDisplayable(this, \"after addNotify \");\n+    }\n+\n+    public void removeNotify() {\n+        Displayable.shouldBeDisplayable(this, \"before removeNotify \");\n+        super.removeNotify();\n+        Displayable.shouldNotBeDisplayable(this, \"after removeNotify \");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Component\/Displayable.java","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.WindowConstants;\n+import java.awt.Insets;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+\n+\/*\n+ * @test\n+ * @bug 4749659\n+ * @summary Tests that popup menu doesn't steal focus from top-level\n+ * @key headful\n+ *\/\n+\n+public class TestWindowsLFFocus {\n+    static volatile boolean actionFired;\n+\n+    static JFrame frame;\n+    static JMenuBar bar;\n+    static JMenuItem item;\n+    static volatile Point frameLoc;\n+\n+    public static void main(String[] args) throws Exception {\n+        for (UIManager.LookAndFeelInfo lookAndFeel : UIManager.getInstalledLookAndFeels()) {\n+            UIManager.setLookAndFeel(lookAndFeel.getClassName());\n+            test();\n+        }\n+\n+        System.err.println(\"PASSED\");\n+    }\n+\n+    private static void test() throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                actionFired = false;\n+                frame = new JFrame();\n+                bar = new JMenuBar();\n+                frame.setJMenuBar(bar);\n+                JMenu menu = new JMenu(\"menu\");\n+                bar.add(menu);\n+                item = new JMenuItem(\"item\");\n+                menu.add(item);\n+                item.addActionListener(e -> actionFired = true);\n+\n+                frame.getContentPane().add(new JButton(\"none\"));\n+                frame.setBounds(100, 100, 100, 100);\n+                frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n+                frame.setVisible(true);\n+            });\n+\n+            Robot robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.setAutoDelay(50);\n+\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                Point location = frame.getLocationOnScreen();\n+                Insets insets = frame.getInsets();\n+\n+                location.translate(insets.left + 15, insets.top + bar.getHeight() \/ 2);\n+\n+                frameLoc = location;\n+            });\n+\n+            robot.mouseMove(frameLoc.x, frameLoc.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            robot.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                Point location = new Point(frameLoc);\n+                location.y += bar.getHeight() \/ 2 + item.getHeight() \/ 2;\n+\n+                frameLoc = location;\n+            });\n+\n+            robot.mouseMove(frameLoc.x, frameLoc.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            robot.waitForIdle();\n+            robot.delay(500);\n+\n+            if (!actionFired) {\n+                throw new RuntimeException(\"Menu closed without action\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Focus\/TestWindowsLFFocus.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -0,0 +1,391 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Canvas;\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.Polygon;\n+import java.awt.Shape;\n+import java.awt.geom.AffineTransform;\n+import java.awt.geom.Area;\n+import java.awt.geom.Ellipse2D;\n+import java.awt.geom.GeneralPath;\n+import java.awt.geom.Point2D;\n+\n+\/*\n+ * @test\n+ * @bug 4210936 4214524\n+ * @summary Tests the results of the hit test methods on 3 different\n+ *          Shape objects - Polygon, Area, and GeneralPath.  Both an\n+ *          automatic test for constraint compliance and a manual\n+ *          test for correctness are included in this one class.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main PathHitTest\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4210936 4214524\n+ * @summary Tests the results of the hit test methods on 3 different\n+ *          Shape objects - Polygon, Area, and GeneralPath.  Both an\n+ *          automatic test for constraint compliance and a manual\n+ *          test for correctness are included in this one class.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual PathHitTest manual\n+ *\/\n+\n+public class PathHitTest {\n+\n+    public static final int BOXSIZE = 5;\n+    public static final int BOXCENTER = 2;\n+    public static final int TESTSIZE = 400;\n+    public static final int NUMTESTS = (TESTSIZE + BOXSIZE - 1) \/ BOXSIZE;\n+\n+    public static Shape[] testShapes = new Shape[5];\n+    public static String[] testNames = {\n+            \"Polygon\",\n+            \"EvenOdd GeneralPath\",\n+            \"NonZero GeneralPath\",\n+            \"Area from EO GeneralPath\",\n+            \"Area from NZ GeneralPath\",\n+    };\n+\n+    static {\n+        GeneralPath gpeo = new GeneralPath(GeneralPath.WIND_EVEN_ODD);\n+        Ellipse2D ell = new Ellipse2D.Float();\n+        Point2D center = new Point2D.Float();\n+        AffineTransform at = new AffineTransform();\n+        for (int i = 0; i < 360; i += 30) {\n+            center.setLocation(100, 0);\n+            at.setToTranslation(200, 200);\n+            at.rotate(i * Math.PI \/ 180);\n+            at.transform(center, center);\n+            ell.setFrame(center.getX() - 50, center.getY() - 50, 100, 100);\n+            gpeo.append(ell, false);\n+        }\n+        GeneralPath side = new GeneralPath();\n+        side.moveTo(0, 0);\n+        side.lineTo(15, 10);\n+        side.lineTo(30, 0);\n+        side.lineTo(45, -10);\n+        side.lineTo(60, 0);\n+        append4sides(gpeo, side, 20, 20);\n+        side.reset();\n+        side.moveTo(0, 0);\n+        side.quadTo(15, 10, 30, 0);\n+        side.quadTo(45, -10, 60, 0);\n+        append4sides(gpeo, side, 320, 20);\n+        side.reset();\n+        side.moveTo(0, 0);\n+        side.curveTo(15, 10, 45, -10, 60, 0);\n+        append4sides(gpeo, side, 20, 320);\n+\n+        GeneralPath gpnz = new GeneralPath(GeneralPath.WIND_NON_ZERO);\n+        gpnz.append(gpeo, false);\n+        Polygon p = new Polygon();\n+        p.addPoint( 50,  50);\n+        p.addPoint( 60, 350);\n+        p.addPoint(250, 340);\n+        p.addPoint(260, 150);\n+        p.addPoint(140, 140);\n+        p.addPoint(150, 260);\n+        p.addPoint(340, 250);\n+        p.addPoint(350,  60);\n+        testShapes[0] = p;\n+        testShapes[1] = gpeo;\n+        testShapes[2] = gpnz;\n+        testShapes[3] = new Area(gpeo);\n+        testShapes[3].getPathIterator(null);\n+        testShapes[4] = new Area(gpnz);\n+        testShapes[4].getPathIterator(null);\n+    }\n+\n+    private static void append4sides(GeneralPath path, GeneralPath side,\n+                                     double xoff, double yoff) {\n+        AffineTransform at = new AffineTransform();\n+        at.setToTranslation(xoff, yoff);\n+        for (int i = 0; i < 4; i++) {\n+            path.append(side.getPathIterator(at), i != 0);\n+            at.rotate(Math.toRadians(90), 30, 30);\n+        }\n+    }\n+\n+    public static void main(String[] argv) throws Exception {\n+        if (argv.length > 0 && argv[0].equals(\"manual\")) {\n+            PathHitTestManual.doManual();\n+        } else {\n+            int totalerrs = 0;\n+            for (int i = 0; i < testShapes.length; i++) {\n+                totalerrs += testshape(testShapes[i], testNames[i]);\n+            }\n+            if (totalerrs != 0) {\n+                throw new RuntimeException(totalerrs +\n+                        \" constraint conditions violated!\");\n+            }\n+        }\n+    }\n+\n+    public static int testshape(Shape s, String name) {\n+        int numerrs = 0;\n+        long start = System.currentTimeMillis();\n+        for (int y = 0; y < TESTSIZE; y += BOXSIZE) {\n+            for (int x = 0; x < TESTSIZE; x += BOXSIZE) {\n+                boolean rectintersects = s.intersects(x, y, BOXSIZE, BOXSIZE);\n+                boolean rectcontains = s.contains(x, y, BOXSIZE, BOXSIZE);\n+                boolean pointcontains = s.contains(x + BOXCENTER, y + BOXCENTER);\n+                if (rectcontains && !rectintersects) {\n+                    System.err.println(\"rect is contained \" +\n+                            \"but does not intersect!\");\n+                    numerrs++;\n+                }\n+                if (rectcontains && !pointcontains) {\n+                    System.err.println(\"rect is contained \" +\n+                            \"but center is not contained!\");\n+                    numerrs++;\n+                }\n+                if (pointcontains && !rectintersects) {\n+                    System.err.println(\"center is contained \" +\n+                            \"but rect does not intersect!\");\n+                    numerrs++;\n+                }\n+            }\n+        }\n+        long end = System.currentTimeMillis();\n+        System.out.println(name + \" completed in \" +\n+                (end - start) + \"ms with \" +\n+                numerrs + \" errors\");\n+        return numerrs;\n+    }\n+\n+    static class PathHitTestManual extends Panel {\n+        private static final String INSTRUCTIONS =\n+            \"This test displays the results of hit testing 5 different Shape\\n\" +\n+            \"objects one at a time.\\n\" +\n+            \"                                                                \\n\" +\n+            \"You can switch between shapes using the Choice component located\\n\" +\n+            \"at the bottom of the window.\\n\" +\n+            \"                                                                \\n\" +\n+            \"Each square in the test represents the\\n\" +\n+            \"return values of the hit testing operators for that square region:\\n\" +\n+            \"                                                                \\n\" +\n+                \"yellow - not yet tested\\n\" +\n+                \"translucent blue overlay - the shape being tested\\n\" +\n+            \"                                                                \\n\" +\n+                \"black - all outside\\n\" +\n+                \"dark gray - rectangle intersects shape\\n\" +\n+                \"light gray - rectangle intersects and center point is inside shape\\n\" +\n+                \"white - rectangle is entirely contained in shape\\n\" +\n+                \"red - some constraint was violated, including:\\n\" +\n+                    \"rectangle is contained, but center point is not\\n\" +\n+                    \"rectangle is contained, but rectangle.intersects is false\\n\" +\n+                    \"centerpoint is contained, but rectangle.intersects is false\\n\" +\n+            \"                                                                  \\n\" +\n+            \"Visually inspect the results to see if they match the above table.\\n\" +\n+            \"Note that it is not a violation for rectangles that are entirely\\n\" +\n+            \"inside the path to be light gray instead of white since sometimes\\n\" +\n+            \"the path is complex enough to make an exact determination expensive.\\n\" +\n+            \"You might see this on the GeneralPath NonZero example where the\\n\" +\n+            \"circles that make up the path cross over the interior of the shape\\n\" +\n+            \"and cause the hit testing methods to guess that the rectangle is\\n\" +\n+            \"not guaranteed to be contained within the shape.\\n\";\n+\n+        PathHitTestCanvas phtc;\n+\n+        public void init() {\n+            setLayout(new BorderLayout());\n+            phtc = new PathHitTestCanvas();\n+            add(\"Center\", phtc);\n+            final Choice ch = new Choice();\n+            for (int i = 0; i < PathHitTest.testNames.length; i++) {\n+                ch.add(PathHitTest.testNames[i]);\n+            }\n+            ch.addItemListener(e -> phtc.setShape(ch.getSelectedIndex()));\n+            ch.select(0);\n+            phtc.setShape(0);\n+            add(\"South\", ch);\n+        }\n+\n+        public void start() {\n+            phtc.start();\n+        }\n+\n+        public void stop() {\n+            phtc.stop();\n+        }\n+\n+        public static class PathHitTestCanvas extends Canvas implements Runnable {\n+            public static final Color[] colors = {\n+                                        \/* contains?  point in?  intersects? *\/\n+                    Color.black,        \/*    NO         NO          NO      *\/\n+                    Color.darkGray,     \/*    NO         NO          YES     *\/\n+                    Color.red,          \/*    NO         YES         NO      *\/\n+                    Color.lightGray,    \/*    NO         YES         YES     *\/\n+                    Color.red,          \/*    YES        NO          NO      *\/\n+                    Color.red,          \/*    YES        NO          YES     *\/\n+                    Color.red,          \/*    YES        YES         NO      *\/\n+                    Color.white,        \/*    YES        YES         YES     *\/\n+                    Color.yellow,       \/*     used for untested points      *\/\n+            };\n+\n+            public Dimension getPreferredSize() {\n+                return new Dimension(TESTSIZE, TESTSIZE);\n+            }\n+\n+            public synchronized void start() {\n+                if (!testdone) {\n+                    renderer = new Thread(this);\n+                    renderer.setPriority(Thread.MIN_PRIORITY);\n+                    renderer.start();\n+                }\n+            }\n+\n+            public synchronized void stop() {\n+                renderer = null;\n+            }\n+\n+            private Thread renderer;\n+            private int shapeIndex = 0;\n+            private byte[] indices = new byte[NUMTESTS * NUMTESTS];\n+            boolean testdone = false;\n+\n+            private synchronized void setShape(int index) {\n+                shapeIndex = index;\n+                testdone = false;\n+                start();\n+            }\n+\n+            public void run() {\n+                Thread me = Thread.currentThread();\n+                Graphics2D g2d = (Graphics2D) getGraphics();\n+                byte[] indices;\n+                Shape s = testShapes[shapeIndex];\n+                synchronized (this) {\n+                    if (renderer != me) {\n+                        return;\n+                    }\n+                    this.indices = new byte[NUMTESTS * NUMTESTS];\n+                    java.util.Arrays.fill(this.indices, (byte) 8);\n+                    indices = this.indices;\n+                }\n+\n+                System.err.printf(\"%s %s\\n\", g2d, Color.yellow);\n+                g2d.setColor(Color.yellow);\n+                g2d.fillRect(0, 0, TESTSIZE, TESTSIZE);\n+                int numtests = 0;\n+                long start = System.currentTimeMillis();\n+                for (int y = 0; renderer == me && y < TESTSIZE; y += BOXSIZE) {\n+                    for (int x = 0; renderer == me && x < TESTSIZE; x += BOXSIZE) {\n+                        byte index = 0;\n+                        if (s.intersects(x, y, BOXSIZE, BOXSIZE)) {\n+                            index += 1;\n+                        }\n+                        if (s.contains(x + BOXCENTER, y + BOXCENTER)) {\n+                            index += 2;\n+                        }\n+                        if (s.contains(x, y, BOXSIZE, BOXSIZE)) {\n+                            index += 4;\n+                        }\n+                        numtests++;\n+                        int i = (y \/ BOXSIZE) * NUMTESTS + (x \/ BOXSIZE);\n+                        indices[i] = index;\n+                        g2d.setColor(colors[index]);\n+                        g2d.fillRect(x, y, BOXSIZE, BOXSIZE);\n+                    }\n+                }\n+                synchronized (this) {\n+                    if (renderer != me) {\n+                        return;\n+                    }\n+                    g2d.setColor(new Color(0, 0, 1, .2f));\n+                    g2d.fill(s);\n+                    testdone = true;\n+                    long end = System.currentTimeMillis();\n+                    System.out.println(numtests + \" tests took \" + (end - start) + \"ms\");\n+                }\n+            }\n+\n+            public void paint(Graphics g) {\n+                g.setColor(Color.yellow);\n+                g.fillRect(0, 0, TESTSIZE, TESTSIZE);\n+                byte[] indices = this.indices;\n+                if (indices != null) {\n+                    for (int y = 0; y < TESTSIZE; y += BOXSIZE) {\n+                        for (int x = 0; x < TESTSIZE; x += BOXSIZE) {\n+                            int i = (y \/ BOXSIZE) * NUMTESTS + (x \/ BOXSIZE);\n+                            g.setColor(colors[indices[i]]);\n+                            g.fillRect(x, y, BOXSIZE, BOXSIZE);\n+                        }\n+                    }\n+                }\n+                Graphics2D g2d = (Graphics2D) g;\n+                g2d.setColor(new Color(0, 0, 1, .2f));\n+                g2d.fill(testShapes[shapeIndex]);\n+            }\n+        }\n+\n+        static volatile PathHitTestManual pathHitTestManual;\n+\n+        private static void createAndShowGUI() {\n+            pathHitTestManual = new PathHitTestManual();\n+            Frame frame = new Frame(\"PathHitTestManual test window\");\n+\n+            frame.add(pathHitTestManual);\n+            frame.setSize(400, 450);\n+\n+            PassFailJFrame.addTestWindow(frame);\n+            PassFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n+\n+            frame.setVisible(true);\n+\n+            pathHitTestManual.init();\n+            pathHitTestManual.start();\n+        }\n+\n+        public static void doManual() throws Exception {\n+            PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                    .title(\"PathHitTestManual Instructions\")\n+                    .instructions(INSTRUCTIONS)\n+                    .testTimeOut(5)\n+                    .rows(30)\n+                    .columns(70)\n+                    .screenCapture()\n+                    .build();\n+\n+            EventQueue.invokeAndWait(PathHitTestManual::createAndShowGUI);\n+            try {\n+                passFailJFrame.awaitAndCheck();\n+            } finally {\n+                pathHitTestManual.stop();\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/geom\/HitTest\/PathHitTest.java","additions":391,"deletions":0,"binary":false,"changes":391,"status":"added"},{"patch":"@@ -32,0 +32,1 @@\n+import java.awt.Point;\n@@ -38,0 +39,1 @@\n+import java.awt.event.WindowListener;\n@@ -44,0 +46,1 @@\n+import java.util.Collection;\n@@ -45,0 +48,1 @@\n+import java.util.Objects;\n@@ -66,0 +70,1 @@\n+import static java.util.Collections.unmodifiableList;\n@@ -69,0 +74,73 @@\n+\/**\n+ * Provides a framework for manual tests to display test instructions and\n+ * Pass\/Fail buttons.\n+ * <p>\n+ * Instructions for the user can be either plain text or HTML as supported\n+ * by Swing. If the instructions start with {@code <html>}, the\n+ * instructions are displayed as HTML.\n+ * <p>\n+ * A simple test would look like this:\n+ * <pre>{@code\n+ * public class SampleManualTest {\n+ *     private static final String INSTRUCTIONS =\n+ *             \"Click Pass, or click Fail if the test failed.\";\n+ *\n+ *     public static void main(String[] args) throws Exception {\n+ *         PassFailJFrame.builder()\n+ *                       .instructions(INSTRUCTIONS)\n+ *                       .testUI(() -> createTestUI())\n+ *                       .build()\n+ *                       .awaitAndCheck();\n+ *     }\n+ *\n+ *     private static List<Window> createTestUI() {\n+ *         JFrame testUI = new JFrame(\"Test UI\");\n+ *         testUI.setSize(250, 150);\n+ *         return List.of(testUI);\n+ *     }\n+ * }\n+ * }<\/pre>\n+ * <p>\n+ * The above example uses the {@link Builder Builder} to set the parameters of\n+ * the instruction frame. It is the recommended way.\n+ * <p>\n+ * The framework will create instruction UI, it will call\n+ * the provided {@code createTestUI} on the Event Dispatch Thread (EDT),\n+ * and it will automatically position the test UI and make it visible.\n+ * <p>\n+ * Alternatively, use one of the {@code PassFailJFrame} constructors to\n+ * create an object, then create secondary test UI, register it\n+ * with {@code PassFailJFrame}, position it and make it visible.\n+ * The following sample demonstrates it:\n+ * <pre>{@code\n+ * public class SampleOldManualTest {\n+ *     private static final String INSTRUCTIONS =\n+ *             \"Click Pass, or click Fail if the test failed.\";\n+ *\n+ *     public static void main(String[] args) throws Exception {\n+ *         PassFailJFrame passFail = new PassFailJFrame(INSTRUCTIONS);\n+ *\n+ *         SwingUtilities.invokeAndWait(() -> createTestUI());\n+ *\n+ *         passFail.awaitAndCheck();\n+ *     }\n+ *\n+ *     private static void createTestUI() {\n+ *         JFrame testUI = new JFrame(\"Test UI\");\n+ *         testUI.setSize(250, 150);\n+ *         PassFailJFrame.addTestWindow(testUI);\n+ *         PassFailJFrame.positionTestWindow(testUI, PassFailJFrame.Position.HORIZONTAL);\n+ *         testUI.setVisible(true);\n+ *     }\n+ * }\n+ * }<\/pre>\n+ * <p>\n+ * Use methods of the {@code Builder} class or constructors of the\n+ * {@code PassFailJFrame} class to control other parameters:\n+ * <ul>\n+ *     <li>the title of the instruction UI,<\/li>\n+ *     <li>the timeout of the test,<\/li>\n+ *     <li>the size of the instruction UI via rows and columns, and<\/li>\n+ *     <li>to enable screenshots.<\/li>\n+ * <\/ul>\n+ *\/\n@@ -175,9 +253,6 @@\n-                          boolean enableScreenCapture) throws InterruptedException,\n-            InvocationTargetException {\n-        if (isEventDispatchThread()) {\n-            createUI(title, instructions, testTimeOut, rows, columns,\n-                     enableScreenCapture);\n-        } else {\n-            invokeAndWait(() -> createUI(title, instructions, testTimeOut,\n-                    rows, columns, enableScreenCapture));\n-        }\n+                          boolean enableScreenCapture)\n+            throws InterruptedException, InvocationTargetException {\n+        invokeOnEDT(() -> createUI(title, instructions,\n+                                   testTimeOut,\n+                                   rows, columns,\n+                                   enableScreenCapture));\n@@ -189,1 +264,50 @@\n-                builder.rows, builder.columns, builder.screenCapture);\n+             builder.rows, builder.columns, builder.screenCapture);\n+\n+        if (builder.windowCreator != null) {\n+            invokeOnEDT(() ->\n+                    builder.testWindows = builder.windowCreator.createTestUI());\n+        }\n+\n+        if (builder.testWindows != null) {\n+            addTestWindow(builder.testWindows);\n+            builder.testWindows\n+                   .forEach(w -> w.addWindowListener(windowClosingHandler));\n+\n+            if (builder.positionWindows != null) {\n+                positionInstructionFrame(builder.position);\n+                invokeOnEDT(() -> {\n+                    builder.positionWindows\n+                           .positionTestWindows(unmodifiableList(builder.testWindows),\n+                                                builder.instructionUIHandler);\n+\n+                    windowList.forEach(w -> w.setVisible(true));\n+                });\n+            } else if (builder.testWindows.size() == 1) {\n+                Window window = builder.testWindows.get(0);\n+                positionTestWindow(window, builder.position);\n+                window.setVisible(true);\n+            } else {\n+                positionTestWindow(null, builder.position);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Performs an operation on EDT. If called on EDT, invokes {@code run}\n+     * directly, otherwise wraps into {@code invokeAndWait}.\n+     *\n+     * @param doRun an operation to run on EDT\n+     * @throws InterruptedException if we're interrupted while waiting for\n+     *              the event dispatching thread to finish executing\n+     *              {@code doRun.run()}\n+     * @throws InvocationTargetException if an exception is thrown while\n+     *              running {@code doRun}\n+     * @see javax.swing.SwingUtilities#invokeAndWait(Runnable)\n+     *\/\n+    private static void invokeOnEDT(Runnable doRun)\n+            throws InterruptedException, InvocationTargetException {\n+        if (isEventDispatchThread()) {\n+            doRun.run();\n+        } else {\n+            invokeAndWait(doRun);\n+        }\n@@ -244,10 +368,1 @@\n-        frame.addWindowListener(new WindowAdapter() {\n-            @Override\n-            public void windowClosing(WindowEvent e) {\n-                super.windowClosing(e);\n-                testFailedReason = FAILURE_REASON\n-                                   + \"User closed the instruction Frame\";\n-                failed = true;\n-                latch.countDown();\n-            }\n-        });\n+        frame.addWindowListener(windowClosingHandler);\n@@ -287,0 +402,95 @@\n+\n+    \/**\n+     * Creates one or more windows for test UI.\n+     *\/\n+    @FunctionalInterface\n+    public interface WindowCreator {\n+        \/**\n+         * Creates one or more windows for test UI.\n+         * This method is called by the framework on the EDT.\n+         * @return a list of windows.\n+         *\/\n+        List<? extends Window> createTestUI();\n+    }\n+\n+    \/**\n+     * Positions test UI windows.\n+     *\/\n+    @FunctionalInterface\n+    public interface PositionWindows {\n+        \/**\n+         * Positions test UI windows.\n+         * This method is called by the framework on the EDT after\n+         * the instruction UI frame was positioned on the screen.\n+         * <p>\n+         * The list of the test windows contains the windows\n+         * that were passed to the framework via\n+         * {@link Builder#testUI(WindowCreator) testUI} method.\n+         *\n+         * @param testWindows the list of test windows\n+         * @param instructionUI information about the instruction frame\n+         *\/\n+        void positionTestWindows(List<? extends Window> testWindows,\n+                                 InstructionUI instructionUI);\n+    }\n+\n+    \/**\n+     * Provides information about the instruction frame.\n+     *\/\n+    public interface InstructionUI {\n+        \/**\n+         * {@return the location of the instruction frame}\n+         *\/\n+        Point getLocation();\n+\n+        \/**\n+         * {@return the size of the instruction frame}\n+         *\/\n+        Dimension getSize();\n+\n+        \/**\n+         * {@return the bounds of the instruction frame}\n+         *\/\n+        Rectangle getBounds();\n+\n+        \/**\n+         * Allows to change the location of the instruction frame.\n+         *\n+         * @param location the new location of the instruction frame\n+         *\/\n+        void setLocation(Point location);\n+\n+        \/**\n+         * Allows to change the location of the instruction frame.\n+         *\n+         * @param x the <i>x<\/i> coordinate of the new location\n+         * @param y the <i>y<\/i> coordinate of the new location\n+         *\/\n+        void setLocation(int x, int y);\n+\n+        \/**\n+         * Returns the specified position that was used to set\n+         * the initial location of the instruction frame.\n+         *\n+         * @return the specified position\n+         *\n+         * @see Position\n+         *\/\n+        Position getPosition();\n+    }\n+\n+\n+    private static final class WindowClosingHandler extends WindowAdapter {\n+        @Override\n+        public void windowClosing(WindowEvent e) {\n+            testFailedReason = FAILURE_REASON\n+                               + \"User closed a window\";\n+            failed = true;\n+            latch.countDown();\n+        }\n+    }\n+\n+    private static final WindowListener windowClosingHandler =\n+            new WindowClosingHandler();\n+\n+\n@@ -412,2 +622,2 @@\n-     * Dispose all the window(s) i,e both the test instruction frame and\n-     * the window(s) that is added via addTestWindow(Window testWindow)\n+     * Disposes of all the windows. It disposes of the test instruction frame\n+     * and all other windows added via {@link #addTestWindow(Window)}.\n@@ -416,3 +626,1 @@\n-        for (Window win : windowList) {\n-            win.dispose();\n-        }\n+        windowList.forEach(Window::dispose);\n@@ -453,0 +661,30 @@\n+    private static void positionInstructionFrame(final Position position) {\n+        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n+\n+        \/\/ Get the screen insets to position the frame by taking into\n+        \/\/ account the location of taskbar or menu bar on screen.\n+        GraphicsConfiguration gc = GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                                                      .getDefaultScreenDevice()\n+                                                      .getDefaultConfiguration();\n+        Insets screenInsets = Toolkit.getDefaultToolkit().getScreenInsets(gc);\n+\n+        switch (position) {\n+            case HORIZONTAL:\n+                int newX = ((screenSize.width \/ 2) - frame.getWidth());\n+                frame.setLocation((newX + screenInsets.left),\n+                                  (frame.getY() + screenInsets.top));\n+                break;\n+\n+            case VERTICAL:\n+                int newY = ((screenSize.height \/ 2) - frame.getHeight());\n+                frame.setLocation((frame.getX() + screenInsets.left),\n+                                  (newY + screenInsets.top));\n+                break;\n+\n+            case TOP_LEFT_CORNER:\n+                frame.setLocation(screenInsets.left, screenInsets.top);\n+                break;\n+        }\n+        syncLocationToWindowManager();\n+    }\n+\n@@ -483,32 +721,14 @@\n-        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();\n-\n-        \/\/ Get the screen insets to position the frame by taking into\n-        \/\/ account the location of taskbar\/menubars on screen.\n-        GraphicsConfiguration gc = GraphicsEnvironment.getLocalGraphicsEnvironment()\n-                .getDefaultScreenDevice().getDefaultConfiguration();\n-        Insets screenInsets = Toolkit.getDefaultToolkit().getScreenInsets(gc);\n-\n-        if (position.equals(Position.HORIZONTAL)) {\n-            int newX = ((screenSize.width \/ 2) - frame.getWidth());\n-            frame.setLocation((newX + screenInsets.left),\n-                    (frame.getY() + screenInsets.top));\n-            syncLocationToWindowManager();\n-            if (testWindow != null) {\n-                testWindow.setLocation((frame.getX() + frame.getWidth() + 5),\n-                        frame.getY());\n-            }\n-        } else if (position.equals(Position.VERTICAL)) {\n-            int newY = ((screenSize.height \/ 2) - frame.getHeight());\n-            frame.setLocation((frame.getX() + screenInsets.left),\n-                    (newY + screenInsets.top));\n-            syncLocationToWindowManager();\n-            if (testWindow != null) {\n-                testWindow.setLocation(frame.getX(),\n-                        (frame.getY() + frame.getHeight() + 5));\n-            }\n-        } else if (position.equals(Position.TOP_LEFT_CORNER)) {\n-            frame.setLocation(screenInsets.left, screenInsets.top);\n-            syncLocationToWindowManager();\n-            if (testWindow != null) {\n-                testWindow.setLocation((frame.getX() + frame.getWidth() + 5),\n-                        frame.getY());\n+        positionInstructionFrame(position);\n+\n+        if (testWindow != null) {\n+            switch (position) {\n+                case HORIZONTAL:\n+                case TOP_LEFT_CORNER:\n+                    testWindow.setLocation((frame.getX() + frame.getWidth() + 5),\n+                                           frame.getY());\n+                    break;\n+\n+                case VERTICAL:\n+                    testWindow.setLocation(frame.getX(),\n+                                           (frame.getY() + frame.getHeight() + 5));\n+                    break;\n@@ -517,0 +737,1 @@\n+\n@@ -556,7 +777,1 @@\n-        if (isEventDispatchThread()) {\n-            bounds[0] = frame != null ? frame.getBounds() : null;\n-        } else {\n-            invokeAndWait(() -> {\n-                bounds[0] = frame != null ? frame.getBounds() : null;\n-            });\n-        }\n+        invokeOnEDT(() -> bounds[0] = frame != null ? frame.getBounds() : null);\n@@ -577,0 +792,10 @@\n+    \/**\n+     * Adds a collection of test windows to the windowList to be disposed of\n+     * when the test completes.\n+     *\n+     * @param testWindows the collection of test windows to be disposed of\n+     *\/\n+    public static synchronized void addTestWindow(Collection<? extends Window> testWindows) {\n+        windowList.addAll(testWindows);\n+    }\n+\n@@ -610,1 +835,1 @@\n-    public static class Builder {\n+    public static final class Builder {\n@@ -616,1 +841,8 @@\n-        private boolean screenCapture = false;\n+        private boolean screenCapture;\n+\n+        private List<? extends Window> testWindows;\n+        private WindowCreator windowCreator;\n+        private PositionWindows positionWindows;\n+        private InstructionUI instructionUIHandler;\n+\n+        private Position position;\n@@ -648,0 +880,45 @@\n+        public Builder testUI(Window window) {\n+            return testUI(List.of(window));\n+        }\n+\n+        public Builder testUI(Window... windows) {\n+            return testUI(List.of(windows));\n+        }\n+\n+        public Builder testUI(List<Window> windows) {\n+            if (windows == null) {\n+                throw new IllegalArgumentException(\"The list of windows can't be null\");\n+            }\n+            if (windows.stream()\n+                       .anyMatch(Objects::isNull)) {\n+                throw new IllegalArgumentException(\"The windows list can't contain null\");\n+            }\n+\n+            if (windowCreator != null) {\n+                throw new IllegalStateException(\"windowCreator is already set\");\n+            }\n+            this.testWindows = windows;\n+            return this;\n+        }\n+\n+        public Builder testUI(WindowCreator windowCreator) {\n+            if (windowCreator == null) {\n+                throw new IllegalArgumentException(\"The window creator can't be null\");\n+            }\n+            if (testWindows != null) {\n+                throw new IllegalStateException(\"testWindows are already set\");\n+            }\n+            this.windowCreator = windowCreator;\n+            return this;\n+        }\n+\n+        public Builder positionTestUI(PositionWindows positionWindows) {\n+            this.positionWindows = positionWindows;\n+            return this;\n+        }\n+\n+        public Builder position(Position position) {\n+            this.position = position;\n+            return this;\n+        }\n+\n@@ -655,2 +932,2 @@\n-            if (this.title == null) {\n-                this.title = TITLE;\n+            if (title == null) {\n+                title = TITLE;\n@@ -659,3 +936,3 @@\n-            if (this.instructions == null || this.instructions.length() == 0) {\n-                throw new RuntimeException(\"Please provide the test \" +\n-                        \"instruction for this manual test\");\n+            if (instructions == null || instructions.isEmpty()) {\n+                throw new IllegalStateException(\"Please provide the test \" +\n+                        \"instructions for this manual test\");\n@@ -664,2 +941,2 @@\n-            if (this.testTimeOut == 0L) {\n-                this.testTimeOut = TEST_TIMEOUT;\n+            if (testTimeOut == 0L) {\n+                testTimeOut = TEST_TIMEOUT;\n@@ -668,2 +945,2 @@\n-            if (this.rows == 0) {\n-                this.rows = ROWS;\n+            if (rows == 0) {\n+                rows = ROWS;\n@@ -672,2 +949,16 @@\n-            if (this.columns == 0) {\n-                this.columns = COLUMNS;\n+            if (columns == 0) {\n+                columns = COLUMNS;\n+            }\n+\n+            if (position == null\n+                && (testWindows != null || windowCreator != null)) {\n+\n+                position = Position.HORIZONTAL;\n+            }\n+\n+            if (positionWindows != null) {\n+                if (testWindows == null && windowCreator == null) {\n+                    throw new IllegalStateException(\"To position windows, \"\n+                            + \"provide an a list of windows to the builder\");\n+                }\n+                instructionUIHandler = new InstructionUIHandler();\n@@ -676,0 +967,36 @@\n+\n+        private final class InstructionUIHandler implements InstructionUI {\n+            @Override\n+            public Point getLocation() {\n+                return frame.getLocation();\n+            }\n+\n+            @Override\n+            public Dimension getSize() {\n+                return frame.getSize();\n+            }\n+\n+            @Override\n+            public Rectangle getBounds() {\n+                return frame.getBounds();\n+            }\n+\n+            @Override\n+            public void setLocation(Point location) {\n+                setLocation(location.x, location.y);\n+            }\n+\n+            @Override\n+            public void setLocation(int x, int y) {\n+                frame.setLocation(x, y);\n+            }\n+\n+            @Override\n+            public Position getPosition() {\n+                return position;\n+            }\n+        }\n+    }\n+\n+    public static Builder builder() {\n+        return new Builder();\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":404,"deletions":77,"binary":false,"changes":481,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4859570\n+ * @summary SwingUtilities.sharedOwnerFrame is never disposed\n+ * @key headful\n+ *\/\n+\n+import java.awt.Robot;\n+import java.awt.Window;\n+import javax.swing.JDialog;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4859570 {\n+    static Window owner;\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            JDialog dialog = new JDialog();\n+            dialog.setTitle(\"bug4859570\");\n+            dialog.setBounds(100, 100, 100, 100);\n+            dialog.setVisible(true);\n+\n+            owner = dialog.getOwner();\n+            dialog.dispose();\n+        });\n+\n+        Robot r = new Robot();\n+        r.waitForIdle();\n+        r.delay(1000);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            if (owner.isDisplayable()) {\n+                throw new RuntimeException(\"The shared owner frame should be disposed.\");\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JDialog\/bug4859570.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4936652\n+ * @key headful\n+ * @summary JDialog.setVisible, JDialog.dispose works incorrectly\n+ *\/\n+\n+import javax.swing.JDialog;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4936652 {\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            for (int i = 0 ; i < 100; i++) {\n+                System.out.println(\"i: \" + i);\n+                JDialog o = new JDialog();\n+                o.setTitle(\"bug4936652\");\n+                o.setVisible(true);\n+                o.setVisible(false);\n+                o.dispose();\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JDialog\/bug4936652.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4768127\n+ * @summary ToolTipManager not removed from components\n+ * @key headful\n+ *\/\n+\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseMotionListener;\n+import javax.swing.JDesktopPane;\n+import javax.swing.JFrame;\n+import javax.swing.JInternalFrame;\n+import javax.swing.JLabel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.ToolTipManager;\n+\n+public class bug4768127 {\n+    static JFrame fr;\n+    static volatile Point p;\n+    static volatile JLabel[] label = new JLabel[2];\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                fr = new JFrame(\"bug4768127\");\n+\n+                JDesktopPane jdp = new JDesktopPane();\n+                JInternalFrame jif1 = new JInternalFrame(\"jif 1\");\n+                JInternalFrame jif2 = new JInternalFrame(\"jif 2\");\n+                label[0] = new JLabel(\"Label 1\");\n+                label[1] = new JLabel(\"Label 2\");\n+\n+                label[0].setToolTipText(\"tooltip 1\");\n+                jif1.getContentPane().add(label[0]);\n+                jif1.setBounds(0, 0, 130, 160);\n+                jif1.setVisible(true);\n+                jdp.add(jif1);\n+\n+                label[1].setToolTipText(\"tooltip 2\");\n+                jif2.getContentPane().add(label[1]);\n+                jif2.setBounds(210, 0, 130, 220);\n+                jif2.setVisible(true);\n+                jdp.add(jif2);\n+\n+                fr.getContentPane().add(jdp);\n+                fr.setLocationRelativeTo(null);\n+\n+                fr.setSize(400, 300);\n+                fr.setVisible(true);\n+            });\n+\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(10);\n+            robot.waitForIdle();\n+            robot.delay(3000);\n+\n+            clickLabel(0, robot);\n+            robot.waitForIdle();\n+            robot.delay(3000);\n+\n+            clickLabel(1, robot);\n+            robot.waitForIdle();\n+            robot.delay(3000);\n+\n+            clickLabel(0, robot);\n+            robot.waitForIdle();\n+            robot.delay(3000);\n+\n+            clickLabel(1, robot);\n+            robot.waitForIdle();\n+            robot.delay(3000);\n+\n+            MouseMotionListener[] mml = label[0].getMouseMotionListeners();\n+            if (mml.length > 0 && mml[0] instanceof ToolTipManager) {\n+                throw new RuntimeException(\"Extra MouseMotionListeners were added to the label \\\"Label 1\\\" by ToolTipManager\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (fr != null) {\n+                    fr.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    static void clickLabel(int i, Robot robot) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            p = label[i].getLocationOnScreen();\n+        });\n+        final Rectangle rect = label[i].getBounds();\n+        robot.mouseMove(p.x + rect.width \/ 2, p.y + rect.height \/ 2);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        \/\/Generate mouseMotionEvent\n+        robot.mouseMove(p.x + rect.width \/ 2 + 3, p.y + rect.height \/ 2 + 3);\n+        robot.mouseMove(p.x + rect.width \/ 2, p.y + rect.height \/ 2);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JLabel\/bug4768127.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"},{"patch":"@@ -0,0 +1,183 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4371134\n+ * @key headful\n+ * @summary displays an animating fps (frames per second)\n+ *  counter.  When the window is dragged from monitor to monitor,\n+ *  the speed of the animation should not change too greatly.\n+ * @library \/open\/test\/jdk\/java\/awt\/regtesthelpers\n+ * @run main\/manual MultimonVImage\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import javax.swing.JViewport;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+public class MultimonVImage {\n+    private static final String instructionsText =\n+            \"This test should be run on any Windows platform that\\n\" +\n+            \"supports multiple monitors.\\n\" +\n+            \"You will see an animating fps (frames per second) counter at\\n\" +\n+            \"the bottom of the window.  Drag the window into the other monitor\\n\" +\n+            \"and that counter should not change drastically.  If the counter\\n\" +\n+            \"is much lower on one monitor than the other (barring situations\\n\" +\n+            \"described below) then the back buffer may not be accelerated\\n\" +\n+            \"on the second monitor and the test fails.\\n\" +\n+            \"Situations in which performance will differ even though there\\n\" +\n+            \"is acceleration on both monitors include:\\n\" +\n+            \"  - different bit depths on each monitor.  The higher the bits\\n\" +\n+            \"    per pixel, the more data to push and the lower the fps number.\\n\" +\n+            \"    Set the bit depths to be the same on both monitors to work\\n\" +\n+            \"    around this issue.\\n\" +\n+            \"  - the amount of acceleration available on each video card differs,\\n\" +\n+            \"    so if your system uses different video cards then you should\\n\" +\n+            \"    expect some difference between the cards.  To work around this\\n\" +\n+            \"    issue, try to use the same or similar video cards for each monitor.\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"MultimonVImage Instructions\")\n+                .instructions(instructionsText)\n+                .testTimeOut(5)\n+                .rows(25)\n+                .columns(50)\n+                .build();\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            AnimatingFrame af = new AnimatingFrame();\n+            af.test();\n+            af.run();\n+\n+            PassFailJFrame.addTestWindow(af);\n+            PassFailJFrame.positionTestWindow(af,\n+                    PassFailJFrame.Position.HORIZONTAL);\n+        });\n+\n+        passFailJFrame.awaitAndCheck();\n+    }\n+}\n+\n+class FrameCounter {\n+\n+    String fpsString = \"Calculating...\";\n+    long startTime, endTime;\n+    int numFrames;\n+\n+    public FrameCounter() {\n+        startTime = System.currentTimeMillis();\n+    }\n+\n+    public String addFrame() {\n+        ++numFrames;\n+        return calculateFPS();\n+    }\n+\n+    String calculateFPS() {\n+        endTime = System.currentTimeMillis();\n+        double seconds = ((double) endTime - (double) startTime) \/ 1000;\n+        if (seconds > 1) {\n+            int fps = (int) (numFrames \/ seconds);\n+            fpsString = fps + \" fps\";\n+            startTime = endTime;\n+            numFrames = 0;\n+        }\n+        return fpsString;\n+    }\n+}\n+\n+class AnimatingComponent extends JViewport {\n+\n+    FrameCounter frameCounter;\n+    int boxX, boxY;\n+    int boxW, boxH;\n+    int xStep = 1;\n+\n+    public AnimatingComponent() {\n+        frameCounter = new FrameCounter();\n+        boxX = 0;\n+        boxY = 0;\n+        boxW = 100;\n+        boxH = 100;\n+    }\n+\n+    public void paintComponent(Graphics g) {\n+        boxX += xStep;\n+        if (boxX <= 0 || (boxX + boxW) > getWidth()) {\n+            xStep = -xStep;\n+            boxX += (2 * xStep);\n+        }\n+        g.setColor(Color.white);\n+        g.fillRect(0, 0, getWidth(), getHeight());\n+        g.setColor(Color.green);\n+        for (int i = 0; i < 100; ++i) {\n+            g.fillRect(boxX, boxY, 100, 100);\n+        }\n+        g.setColor(Color.black);\n+        g.drawString(frameCounter.addFrame(), 200, getHeight() - 30);\n+    }\n+}\n+\n+class AnimatingFrame extends JFrame implements Runnable {\n+    JViewport component;\n+    Thread thread;\n+\n+    public AnimatingFrame() {\n+        setSize(500, 500);\n+        setTitle(\"MultimonVImage Demo\");\n+        addWindowListener(new WindowAdapter() {\n+            public void windowClosing(WindowEvent e) {\n+                System.exit(0);\n+            }\n+        });\n+\n+        component = new AnimatingComponent();\n+        component.setPreferredSize(new Dimension(500, 500));\n+        setContentPane(component);\n+        component.setVisible(true);\n+\n+        setLocationRelativeTo(null);\n+        pack();\n+        setVisible(true);\n+    }\n+\n+    public void test() {\n+        thread = new Thread(this);\n+        thread.setPriority(Thread.MIN_PRIORITY);\n+        thread.start();\n+    }\n+\n+    public void run() {\n+        Thread me = Thread.currentThread();\n+        while (thread == me) {\n+            component.repaint();\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/swing\/MultiMonitor\/MultimonVImage.java","additions":183,"deletions":0,"binary":false,"changes":183,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,2 @@\n-        javadoc(\"-d\", \"out\",\n+        javadoc(\"-encoding\", \"UTF-8\",\n+                \"-d\", \"out\",\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSerialVersionUID\/TestSerialVersionUID.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,2 @@\n-        javadoc(\"-Xdoclint:none\",\n+        javadoc(\"-encoding\", \"UTF-8\",\n+                \"-Xdoclint:none\",\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testTagMisuse\/TestTagMisuse.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,2 @@\n-        javadoc(\"-d\", \"out\",\n+        javadoc(\"-encoding\", \"UTF-8\",\n+                \"-d\", \"out\",\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testThrowsHead\/TestThrowsHead.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,2 @@\n-        javadoc(\"-d\", \"out\",\n+        javadoc(\"-encoding\", \"UTF-8\",\n+                \"-d\", \"out\",\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testUnnamedPackage\/TestUnnamedPackage.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+            \"-encoding\", \"UTF-8\",\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/nonConstExprs\/Test.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @clean TestSyntheticNullChecks*\n+ * @clean *\n@@ -33,1 +33,1 @@\n- * @clean TestSyntheticNullChecks*\n+ * @clean *\n","filename":"test\/langtools\/tools\/javac\/8074306\/TestSyntheticNullChecks.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @clean TestIndyStringConcat*\n+ * @clean *\n@@ -41,1 +41,1 @@\n- * @clean TestIndyStringConcat*\n+ * @clean *\n@@ -45,1 +45,1 @@\n- * @clean TestIndyStringConcat*\n+ * @clean *\n@@ -49,1 +49,1 @@\n- * @clean TestIndyStringConcat*\n+ * @clean *\n@@ -53,1 +53,1 @@\n- * @clean TestIndyStringConcat*\n+ * @clean *\n@@ -57,1 +57,1 @@\n- * @clean TestIndyStringConcat*\n+ * @clean *\n","filename":"test\/langtools\/tools\/javac\/StringConcat\/TestIndyStringConcat.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}