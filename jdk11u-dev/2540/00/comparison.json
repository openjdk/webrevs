{"files":[{"patch":"@@ -0,0 +1,304 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import java.awt.AWTEvent;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceAdapter;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetAdapter;\n+import java.awt.dnd.DropTargetContext;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseEvent;\n+\n+\/*\n+  @test\n+  @bug 4426794 4435403\n+  @summary tests that drag notifications are targeted to the drop target\n+           whose operable part is currently intersected by cursor's hotspot\n+  @key headful\n+  @run main DropTargetingTest\n+*\/\n+\n+public class DropTargetingTest implements AWTEventListener {\n+\n+    volatile JFrame sourceFrame;\n+    volatile JFrame targetFrame1;\n+    volatile JFrame targetFrame2;\n+    volatile JButton obscurer;\n+\n+    volatile DragSource dragSource;\n+    volatile Transferable transferable;\n+    volatile DragSourceListener dragSourceListener;\n+    volatile DragGestureListener dragGestureListener;\n+    volatile Point srcPoint;\n+    volatile Point dstPoint;\n+    volatile Dimension d;\n+\n+    static class TestDropTargetListener extends DropTargetAdapter {\n+        private boolean dropRecognized = false;\n+        public void drop(DropTargetDropEvent dtde) {\n+            dropRecognized = true;\n+            dtde.rejectDrop();\n+            synchronized (SYNC_LOCK) {\n+                SYNC_LOCK.notifyAll();\n+            }\n+        }\n+        public void reset() {\n+            dropRecognized = false;\n+        }\n+        public boolean dropRecognized() {\n+            return dropRecognized;\n+        }\n+    }\n+    volatile TestDropTargetListener dropTargetListener;\n+\n+    static final Object SYNC_LOCK = new Object();\n+    static final int FRAME_ACTIVATION_TIMEOUT = 2000;\n+    static final int DROP_COMPLETION_TIMEOUT = 5000;\n+    static final int MOUSE_RELEASE_TIMEOUT = 1000;\n+\n+    Component clickedComponent = null;\n+\n+    public static void main(String[] args) throws Exception {\n+        DropTargetingTest test = new DropTargetingTest();\n+        EventQueue.invokeAndWait(test::init);\n+        try {\n+            test.start();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (test.sourceFrame != null) {\n+                    test.sourceFrame.dispose();\n+                }\n+                if (test.targetFrame1 != null) {\n+                    test.targetFrame1.dispose();\n+                }\n+                if (test.targetFrame2 != null) {\n+                    test.targetFrame2.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void init() {\n+        sourceFrame = new JFrame();\n+        targetFrame1 = new JFrame();\n+        targetFrame2 = new JFrame();\n+        obscurer = new JButton(\"Obscurer\");\n+\n+        dragSource = DragSource.getDefaultDragSource();\n+        transferable = new StringSelection(\"TEXT\");\n+        dragSourceListener = new DragSourceAdapter() {};\n+        dragGestureListener = new DragGestureListener() {\n+            public void dragGestureRecognized(DragGestureEvent dge) {\n+                dge.startDrag(null, transferable, dragSourceListener);\n+            }\n+        };\n+        dropTargetListener = new TestDropTargetListener();\n+\n+        sourceFrame.setTitle(\"DropTargetingTest Source frame\");\n+        sourceFrame.setBounds(100, 100, 100, 100);\n+        sourceFrame.getToolkit().addAWTEventListener(this, AWTEvent.MOUSE_EVENT_MASK);\n+        dragSource.createDefaultDragGestureRecognizer(sourceFrame, DnDConstants.ACTION_COPY,\n+                                                      dragGestureListener);\n+        targetFrame1.setTitle(\"Target frame 1\");\n+        targetFrame1.setBounds(200, 100, 100, 100);\n+        targetFrame1.getGlassPane().setVisible(true);\n+        targetFrame1.getGlassPane().setDropTarget(\n+            new DropTarget(targetFrame1.getGlassPane(), dropTargetListener));\n+        targetFrame2.setTitle(\"Target frame 2\");\n+        targetFrame2.setBounds(300, 100, 100, 100);\n+        targetFrame2.setDropTarget(new DropTarget(targetFrame1, dropTargetListener));\n+        targetFrame2.getContentPane().add(obscurer);\n+\n+        sourceFrame.setVisible(true);\n+        targetFrame1.setVisible(true);\n+        targetFrame2.setVisible(true);\n+    }\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+\n+    public void start() throws Exception {\n+        Robot robot = new Robot();\n+        robot.delay(FRAME_ACTIVATION_TIMEOUT);\n+\n+        if (!test(robot, targetFrame1)) {\n+            throw new RuntimeException(\"Failed to recognize drop on a glass pane\");\n+        }\n+\n+        if (!test(robot, targetFrame2)) {\n+            throw new RuntimeException(\"Failed to recognize drop on a composite component\");\n+        }\n+    }\n+\n+    public void reset() {\n+        clickedComponent = null;\n+    }\n+\n+    public void eventDispatched(AWTEvent e) {\n+        if (e.getID() == MouseEvent.MOUSE_RELEASED) {\n+            clickedComponent = (Component)e.getSource();\n+            synchronized (SYNC_LOCK) {\n+                SYNC_LOCK.notifyAll();\n+            }\n+        }\n+    }\n+\n+    boolean pointInComponent(Robot robot, Point p, Component comp)\n+      throws InterruptedException {\n+        robot.waitForIdle();\n+        reset();\n+        robot.mouseMove(p.x, p.y);\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        synchronized (SYNC_LOCK) {\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+            SYNC_LOCK.wait(MOUSE_RELEASE_TIMEOUT);\n+        }\n+\n+        Component c = clickedComponent;\n+\n+        while (c != null && c != comp) {\n+            c = c.getParent();\n+        }\n+\n+        return c == comp;\n+    }\n+\n+    boolean test(Robot robot, JFrame targetFrame) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            srcPoint = sourceFrame.getLocationOnScreen();\n+            d = sourceFrame.getSize();\n+        });\n+        srcPoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+        if (!pointInComponent(robot, srcPoint, sourceFrame)) {\n+            System.err.println(\"WARNING: Couldn't locate source frame.\");\n+            return true;\n+        }\n+        EventQueue.invokeAndWait(() -> {\n+            dstPoint = targetFrame.getLocationOnScreen();\n+            d = targetFrame.getSize();\n+        });\n+        dstPoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+        if (!pointInComponent(robot, dstPoint, targetFrame)) {\n+            System.err.println(\"WARNING: Couldn't locate target frame: \" + targetFrame);\n+            return true;\n+        }\n+\n+        dropTargetListener.reset();\n+        robot.mouseMove(srcPoint.x, srcPoint.y);\n+        robot.keyPress(KeyEvent.VK_CONTROL);\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        for (;!srcPoint.equals(dstPoint);\n+             srcPoint.translate(sign(dstPoint.x - srcPoint.x),\n+                                sign(dstPoint.y - srcPoint.y))) {\n+            robot.mouseMove(srcPoint.x, srcPoint.y);\n+            robot.delay(10);\n+        }\n+        synchronized (SYNC_LOCK) {\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+            SYNC_LOCK.wait(DROP_COMPLETION_TIMEOUT);\n+        }\n+\n+        return dropTargetListener.dropRecognized();\n+    }\n+}\n+\n+class DropTargetPanel extends Panel implements DropTargetListener {\n+\n+    final Dimension preferredDimension = new Dimension(200, 100);\n+    boolean testPassed = true;\n+\n+    public DropTargetPanel() {\n+        setDropTarget(new DropTarget(this, this));\n+    }\n+\n+    public boolean getStatus() {\n+        return testPassed;\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+\n+    public void dragEnter(DropTargetDragEvent dtde) {}\n+\n+    public void dragExit(DropTargetEvent dte) {\n+        testPassed = false;\n+    }\n+\n+    public void dragOver(DropTargetDragEvent dtde) {}\n+\n+    public void dropActionChanged(DropTargetDragEvent dtde) {}\n+\n+    public void drop(DropTargetDropEvent dtde) {\n+        DropTargetContext dtc = dtde.getDropTargetContext();\n+\n+        if ((dtde.getSourceActions() & DnDConstants.ACTION_COPY) != 0) {\n+            dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+        } else {\n+            dtde.rejectDrop();\n+        }\n+\n+        DataFlavor[] dfs = dtde.getCurrentDataFlavors();\n+        Component comp = null;\n+\n+        if (dfs != null && dfs.length >= 1) {\n+            Transferable transfer = dtde.getTransferable();\n+\n+            try {\n+                comp = (Component)transfer.getTransferData(dfs[0]);\n+            } catch (Throwable e) {\n+                e.printStackTrace();\n+                dtc.dropComplete(false);\n+            }\n+        }\n+        dtc.dropComplete(true);\n+\n+        add(comp);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DropTargetingTest.java","additions":304,"deletions":0,"binary":false,"changes":304,"status":"added"},{"patch":"@@ -0,0 +1,367 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetContext;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+\/*\n+  @test\n+  @bug 4338893\n+  @summary tests that dnd between two different VMs doesn't cause hang\n+           on the dropping side.\n+  @key headful\n+  @run main\/timeout=120 DroppingVMHangTest\n+*\/\n+\n+public class DroppingVMHangTest {\n+\n+    public static final int CODE_NOT_RETURNED = -1;\n+    public static final int CODE_OK = 0;\n+    public static final int CODE_FAILURE = 1;\n+    public static final int CODE_HANG_FAILURE = 2;\n+    public static final int CODE_OTHER_FAILURE = 3;\n+    public static final int CODE_TIMEOUT = 4;\n+\n+    public static final int FRAME_ACTIVATION_TIMEOUT = 2000;\n+\n+    private int returnCode = CODE_NOT_RETURNED;\n+\n+    volatile Frame frame;\n+    volatile Point p;\n+    volatile Dimension d;\n+    Robot robot = null;\n+\n+    public static void main(String[] args) throws Exception {\n+        DroppingVMHangTest test = new DroppingVMHangTest();\n+        if (args.length > 0) {\n+            test.run(args);\n+        } else {\n+            EventQueue.invokeAndWait(test::init);\n+            try {\n+                test.start();\n+            } finally {\n+                EventQueue.invokeAndWait(() -> {\n+                    if (test.frame != null) {\n+                        test.frame.dispose();\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    public void run(String[] args) {\n+        try {\n+            frame = new Frame();\n+            frame.setTitle(\"DroppingVMHangTest DropTarget frame\");\n+            frame.setLocation(300, 400);\n+            frame.add(new DropTargetPanel());\n+            frame.pack();\n+            frame.setVisible(true);\n+\n+            Thread.sleep(FRAME_ACTIVATION_TIMEOUT);\n+\n+            if (args.length != 2) {\n+                throw new RuntimeException(\"Incorrect number of arguments for child:\" +\n+                                           args.length);\n+            }\n+\n+            int x = Integer.parseInt(args[0], 10);\n+            int y = Integer.parseInt(args[1], 10);\n+\n+            Point sourcePoint = new Point(x, y);\n+            Point targetPoint = frame.getLocationOnScreen();\n+            Dimension d = frame.getSize();\n+            targetPoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+            robot = new Robot();\n+            robot.mouseMove(x, y);\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.mousePress(InputEvent.BUTTON1_MASK);\n+            while (!sourcePoint.equals(targetPoint)) {\n+                robot.mouseMove(sourcePoint.x, sourcePoint.y);\n+                Thread.sleep(10);\n+                int dx = sign(targetPoint.x - sourcePoint.x);\n+                int dy = sign(targetPoint.y - sourcePoint.y);\n+                sourcePoint.translate(dx, dy);\n+            }\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+\n+            Thread.sleep(5000);\n+            System.exit(DroppingVMHangTest.CODE_TIMEOUT);\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            System.exit(DroppingVMHangTest.CODE_OTHER_FAILURE);\n+        }\n+    }\n+\n+    static int sign(int n) {\n+        return n > 0 ? 1 : n < 0 ? -1 : 0;\n+    }\n+\n+    public void init() {\n+        frame = new Frame();\n+        frame.setTitle(\"DragSource frame\");\n+        frame.setLocation(10, 200);\n+        frame.add(new DragSourcePanel());\n+\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    public void start() throws Exception {\n+        Thread.sleep(FRAME_ACTIVATION_TIMEOUT);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            p = frame.getLocationOnScreen();\n+            d = frame.getSize();\n+        });\n+\n+        p.translate(d.width \/ 2, d.height \/ 2);\n+\n+        String javaPath = System.getProperty(\"java.home\", \"\");\n+        String command = javaPath + File.separator + \"bin\" +\n+        File.separator + \"java -cp \" + System.getProperty(\"test.classes\", \".\") +\n+        \" DroppingVMHangTest\" + \" \" + p.x + \" \" + p.y;\n+        Process process = Runtime.getRuntime().exec(command);\n+        returnCode = process.waitFor();\n+\n+        InputStream errorStream = process.getErrorStream();\n+        int count = errorStream.available();\n+        if (count > 0) {\n+            byte[] b = new byte[count];\n+            errorStream.read(b);\n+            System.err.println(\"========= Child VM System.err ========\");\n+            System.err.print(new String(b));\n+            System.err.println(\"======================================\");\n+        }\n+\n+        switch (returnCode) {\n+        case CODE_NOT_RETURNED:\n+            System.err.println(\"Child VM: failed to start\");\n+            break;\n+        case CODE_OK:\n+            System.err.println(\"Child VM: normal termination\");\n+            break;\n+        case CODE_FAILURE:\n+            System.err.println(\"Child VM: abnormal termination\");\n+            break;\n+        case CODE_HANG_FAILURE:\n+            System.err.println(\"Child VM: hang on drop\");\n+            break;\n+        case CODE_OTHER_FAILURE:\n+            System.err.println(\"Child VM: other failure\");\n+            break;\n+        case CODE_TIMEOUT:\n+            System.err.println(\"Child VM: failed to simulate drag-and-drop operation with Robot\");\n+            break;\n+        }\n+        if (returnCode != CODE_OK && returnCode != CODE_TIMEOUT) {\n+            throw new RuntimeException(\"The test failed.\");\n+        }\n+    }\n+}\n+\n+class DragSourceButton extends Button implements Serializable,\n+                                                 Transferable,\n+                                                 DragGestureListener,\n+                                                 DragSourceListener {\n+    private transient final DataFlavor dataflavor =\n+        new DataFlavor(DragSourceButton.class, \"DragSourceButton\");\n+\n+    public DragSourceButton() {\n+        this(\"DragSourceButton\");\n+    }\n+\n+    public DragSourceButton(String str) {\n+        super(str);\n+\n+        DragSource ds = DragSource.getDefaultDragSource();\n+        ds.createDefaultDragGestureRecognizer(this, DnDConstants.ACTION_COPY,\n+                                              this);\n+    }\n+\n+    public void dragGestureRecognized(DragGestureEvent dge) {\n+        dge.startDrag(null, this, this);\n+    }\n+\n+    public void dragEnter(DragSourceDragEvent dsde) {}\n+\n+    public void dragExit(DragSourceEvent dse) {}\n+\n+    public void dragOver(DragSourceDragEvent dsde) {}\n+\n+    public void dragDropEnd(DragSourceDropEvent dsde) {}\n+\n+    public void dropActionChanged(DragSourceDragEvent dsde) {}\n+\n+    public Object getTransferData(DataFlavor flavor)\n+      throws UnsupportedFlavorException, IOException {\n+\n+        if (!isDataFlavorSupported(flavor)) {\n+            throw new UnsupportedFlavorException(flavor);\n+        }\n+\n+        Object retObj = null;\n+\n+        ByteArrayOutputStream baoStream = new ByteArrayOutputStream();\n+        ObjectOutputStream ooStream = new ObjectOutputStream(baoStream);\n+        ooStream.writeObject(this);\n+\n+        ByteArrayInputStream baiStream = new ByteArrayInputStream(baoStream.toByteArray());\n+        ObjectInputStream ois = new ObjectInputStream(baiStream);\n+        try {\n+            retObj = ois.readObject();\n+        } catch (ClassNotFoundException e) {\n+            e.printStackTrace();\n+            throw new RuntimeException(e.toString());\n+        }\n+\n+        return retObj;\n+    }\n+\n+    public DataFlavor[] getTransferDataFlavors() {\n+        return new DataFlavor[] { dataflavor };\n+    }\n+\n+    public boolean isDataFlavorSupported(DataFlavor dflavor) {\n+        return dataflavor.equals(dflavor);\n+    }\n+}\n+\n+class DragSourcePanel extends Panel {\n+\n+    final Dimension preferredDimension = new Dimension(200, 200);\n+\n+    public DragSourcePanel() {\n+        setLayout(new GridLayout(1, 1));\n+        add(new DragSourceButton());\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+}\n+\n+class DropTargetPanel extends Panel implements DropTargetListener,\n+                                               Runnable {\n+\n+    final Dimension preferredDimension = new Dimension(200, 200);\n+\n+    public DropTargetPanel() {\n+        setDropTarget(new DropTarget(this, this));\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+\n+    public void dragEnter(DropTargetDragEvent dtde) {\n+        dtde.acceptDrag(DnDConstants.ACTION_COPY);\n+    }\n+\n+    public void dragExit(DropTargetEvent dte) {}\n+\n+    public void dragOver(DropTargetDragEvent dtde) {\n+        dtde.acceptDrag(DnDConstants.ACTION_COPY);\n+    }\n+\n+    public void drop(DropTargetDropEvent dtde) {\n+        DropTargetContext dtc = dtde.getDropTargetContext();\n+\n+        if ((dtde.getSourceActions() & DnDConstants.ACTION_COPY) != 0) {\n+            dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+        } else {\n+            dtde.rejectDrop();\n+            System.exit(DroppingVMHangTest.CODE_OTHER_FAILURE);\n+        }\n+\n+        DataFlavor[] dfs = dtde.getCurrentDataFlavors();\n+        Component comp = null;\n+\n+        if (dfs != null && dfs.length >= 1) {\n+            Transferable transfer = dtde.getTransferable();\n+\n+            try {\n+                comp = (Component)transfer.getTransferData(dfs[0]);\n+                comp.getClass();\n+            } catch (Throwable e) {\n+                e.printStackTrace();\n+                dtc.dropComplete(false);\n+                System.exit(DroppingVMHangTest.CODE_OTHER_FAILURE);\n+            }\n+        }\n+        dtc.dropComplete(true);\n+\n+        Thread thread = new Thread(this);\n+        thread.start();\n+\n+        add(comp);\n+\n+        System.exit(DroppingVMHangTest.CODE_OK);\n+    }\n+\n+    public void dropActionChanged(DropTargetDragEvent dtde) {}\n+\n+    public void run() {\n+        try {\n+            Thread.sleep(60000);\n+        } catch (InterruptedException e) {\n+        }\n+        Runtime.getRuntime().halt(DroppingVMHangTest.CODE_HANG_FAILURE);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/DroppingVMHangTest.java","additions":367,"deletions":0,"binary":false,"changes":367,"status":"added"},{"patch":"@@ -0,0 +1,171 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceAdapter;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetAdapter;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.event.InputEvent;\n+\n+\/*\n+  @test\n+  @bug 4869264\n+  @summary tests that DragSourceDragEvent.getDropAction() accords to its new spec\n+           (does not depend on the user drop action)\n+  @key headful\n+  @run main\/othervm HonorTargetActionTest\n+*\/\n+\n+public class HonorTargetActionTest extends Frame {\n+\n+    private static final int FRAME_ACTIVATION_TIMEOUT = 3000;\n+\n+    private boolean dragOverCalled;\n+    private int dropAction;\n+\n+    volatile Frame frame;\n+    volatile Point startPoint;\n+    volatile Point endPoint;\n+\n+    public static void main(String[] args) throws Exception {\n+        HonorTargetActionTest test = new HonorTargetActionTest();\n+        EventQueue.invokeAndWait(test::init);\n+        try {\n+            test.start();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (test.frame != null) {\n+                    test.frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void init() {\n+        DragSourceListener dragSourceListener = new DragSourceAdapter() {\n+            public void dragOver(DragSourceDragEvent dsde) {\n+                dragOverCalled = true;\n+                dropAction = dsde.getDropAction();\n+            }\n+        };\n+\n+        DragGestureListener dragGestureListener = new DragGestureListener() {\n+            public void dragGestureRecognized(DragGestureEvent dge) {\n+                dge.startDrag(null, new StringSelection(\"OOKK\"), dragSourceListener);\n+            }\n+        };\n+\n+        new DragSource().createDefaultDragGestureRecognizer(frame,\n+                DnDConstants.ACTION_COPY_OR_MOVE, dragGestureListener);\n+\n+\n+        DropTargetAdapter dropTargetListener = new DropTargetAdapter() {\n+            public void dragEnter(DropTargetDragEvent dtde) {\n+                dtde.acceptDrag(DnDConstants.ACTION_COPY);\n+            }\n+\n+            public void dragOver(DropTargetDragEvent dtde) {\n+                dtde.acceptDrag(DnDConstants.ACTION_COPY);\n+            }\n+\n+            public void drop(DropTargetDropEvent dtde) {\n+                dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+            }\n+        };\n+\n+        new DropTarget(frame, dropTargetListener);\n+\n+        dragOverCalled = false;\n+        dropAction = 0;\n+        frame = new Frame(\"Drag Test Frame\");\n+\n+        setTitle(\"HonorTargetActionTest\");\n+        setSize (200,200);\n+        setLayout (new BorderLayout());\n+        setVisible(true);\n+        validate();\n+\n+        frame.setBounds(100, 100, 200, 200);\n+        frame.setVisible(true);\n+    }\n+\n+\n+    public void start() throws Exception {\n+        Robot robot = new Robot();\n+        robot.waitForIdle();\n+\n+        Thread.sleep(FRAME_ACTIVATION_TIMEOUT);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            startPoint = frame.getLocationOnScreen();\n+        });\n+        endPoint = new Point(startPoint);\n+        robot.waitForIdle();\n+\n+        startPoint.translate(50, 50);\n+        endPoint.translate(150, 150);\n+\n+        robot.mouseMove(startPoint.x, startPoint.y);\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        for (Point p = new Point(startPoint); !p.equals(endPoint);\n+             p.translate(sign(endPoint.x - p.x),\n+                         sign(endPoint.y - p.y))) {\n+            robot.mouseMove(p.x, p.y);\n+            try {\n+                Thread.sleep(50);\n+            } catch (InterruptedException e) {\n+              e.printStackTrace();\n+            }\n+        }\n+\n+        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+\n+        boolean failed = dragOverCalled && dropAction != DnDConstants.ACTION_COPY;\n+\n+        if (failed) {\n+            throw new RuntimeException(\"test failed: dropAction=\" + dropAction);\n+        } else {\n+            System.err.println(\"test passed\");\n+        }\n+\n+    }\n+\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/HonorTargetActionTest.java","additions":171,"deletions":0,"binary":false,"changes":171,"status":"added"},{"patch":"@@ -0,0 +1,273 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceAdapter;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.InputEvent;\n+import java.io.File;\n+import java.io.InputStream;\n+import java.io.Serializable;\n+\n+\/*\n+  @test\n+  @bug 4492640\n+  @summary tests that inter-JVM dnd works properly for ACTION_LINK\n+  @key headful\n+  @run main InterJVMLinkTest\n+*\/\n+\n+public class InterJVMLinkTest {\n+\n+    public static final int CODE_NOT_RETURNED = -1;\n+    public static final int CODE_OK = 0;\n+    public static final int CODE_FAILURE = 1;\n+    public static final int FRAME_ACTIVATION_TIMEOUT = 2000;\n+    public static final int DROP_TIMEOUT = 60000;\n+\n+    private int returnCode = CODE_NOT_RETURNED;\n+\n+    volatile Frame frame;\n+    volatile DropTargetPanel panel;\n+    volatile Robot robot = null;\n+    volatile Point p;\n+    volatile Dimension d;\n+\n+    public static void main(String[] args) throws Exception {\n+        InterJVMLinkTest test = new InterJVMLinkTest();\n+        if (args.length > 0) {\n+            test.run(args);\n+        } else {\n+            EventQueue.invokeAndWait(test::init);\n+            try {\n+                test.start();\n+            } finally {\n+                EventQueue.invokeAndWait(() -> {\n+                    if (test.frame != null) {\n+                        test.frame.dispose();\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    public void run(String[] args) {\n+        try {\n+            if (args.length != 4) {\n+                throw new RuntimeException(\"Incorrect command line arguments.\");\n+            }\n+\n+            int x = Integer.parseInt(args[0]);\n+            int y = Integer.parseInt(args[1]);\n+            int w = Integer.parseInt(args[2]);\n+            int h = Integer.parseInt(args[3]);\n+\n+            DragSourcePanel panel = new DragSourcePanel();\n+            frame = new Frame();\n+\n+            frame.setTitle(\"DragSource frame\");\n+            frame.setLocation(300, 200);\n+            frame.add(panel);\n+            frame.pack();\n+            frame.setVisible(true);\n+\n+            Thread.sleep(FRAME_ACTIVATION_TIMEOUT);\n+\n+            Point sourcePoint = panel.getLocationOnScreen();\n+            Dimension d = panel.getSize();\n+            sourcePoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+            Point targetPoint = new Point(x + w \/ 2, y + h \/ 2);\n+\n+            robot = new Robot();\n+            robot.mouseMove(sourcePoint.x, sourcePoint.y);\n+            robot.mousePress(InputEvent.BUTTON1_MASK);\n+            for (; !sourcePoint.equals(targetPoint);\n+                 sourcePoint.translate(sign(targetPoint.x - sourcePoint.x),\n+                                       sign(targetPoint.y - sourcePoint.y))) {\n+                robot.mouseMove(sourcePoint.x, sourcePoint.y);\n+                Thread.sleep(50);\n+            }\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+\n+            Thread.sleep(DROP_TIMEOUT);\n+\n+            System.exit(InterJVMLinkTest.CODE_OK);\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            System.exit(InterJVMLinkTest.CODE_FAILURE);\n+        }\n+    }\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+\n+    public void init() {\n+        panel = new DropTargetPanel();\n+\n+        frame = new Frame();\n+        frame.setTitle(\"InterJVMLinkTest DropTarget frame\");\n+        frame.setLocation(10, 200);\n+        frame.add(panel);\n+\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    public void start() throws Exception {\n+        Thread.sleep(FRAME_ACTIVATION_TIMEOUT);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            p = panel.getLocationOnScreen();\n+            d = panel.getSize();\n+        });\n+\n+        String javaPath = System.getProperty(\"java.home\", \"\");\n+        String command = javaPath + File.separator + \"bin\" +\n+            File.separator + \"java -cp \" + System.getProperty(\"test.classes\", \".\") +\n+            \" InterJVMLinkTest \" +\n+            p.x + \" \" + p.y + \" \" + d.width + \" \" + d.height;\n+\n+        Process process = Runtime.getRuntime().exec(command);\n+        returnCode = process.waitFor();\n+\n+        InputStream errorStream = process.getErrorStream();\n+        int count = errorStream.available();\n+        if (count > 0) {\n+            byte[] b = new byte[count];\n+            errorStream.read(b);\n+            System.err.println(\"========= Child VM System.err ========\");\n+            System.err.print(new String(b));\n+            System.err.println(\"======================================\");\n+        }\n+\n+        switch (returnCode) {\n+        case CODE_NOT_RETURNED:\n+            System.err.println(\"Child VM: failed to start\");\n+            break;\n+        case CODE_OK:\n+            System.err.println(\"Child VM: normal termination\");\n+            break;\n+        case CODE_FAILURE:\n+            System.err.println(\"Child VM: abnormal termination\");\n+            break;\n+        }\n+        if (panel == null || (panel.isEntered() && !panel.isDropped())) {\n+            throw new RuntimeException(\"The test failed.\");\n+        }\n+    }\n+}\n+\n+class DragSourceButton extends Button implements Serializable,\n+                                                 DragGestureListener {\n+    final Transferable transferable = new StringSelection(\"TEXT\");\n+    final DragSourceListener dragSourceListener = new DragSourceAdapter() {\n+            public void dragDropEnd(DragSourceDropEvent dsde) {\n+                System.exit(InterJVMLinkTest.CODE_OK);\n+            }\n+        };\n+\n+    public DragSourceButton() {\n+        super(\"DragSourceButton\");\n+\n+        DragSource ds = DragSource.getDefaultDragSource();\n+        ds.createDefaultDragGestureRecognizer(this, DnDConstants.ACTION_LINK,\n+                                              this);\n+    }\n+\n+    public void dragGestureRecognized(DragGestureEvent dge) {\n+        dge.startDrag(null, transferable, dragSourceListener);\n+    }\n+}\n+\n+class DragSourcePanel extends Panel {\n+\n+    final Dimension preferredDimension = new Dimension(200, 200);\n+\n+    public DragSourcePanel() {\n+        setLayout(new GridLayout(1, 1));\n+        add(new DragSourceButton());\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+}\n+\n+class DropTargetPanel extends Panel implements DropTargetListener {\n+\n+    final Dimension preferredDimension = new Dimension(200, 200);\n+    boolean entered = false;\n+    boolean dropped = false;\n+\n+    public DropTargetPanel() {\n+        setDropTarget(new DropTarget(this, DnDConstants.ACTION_LINK, this));\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+\n+    public void dragEnter(DropTargetDragEvent dtde) {\n+        entered = true;\n+    }\n+\n+    public void dragExit(DropTargetEvent dte) {}\n+\n+    public void dragOver(DropTargetDragEvent dtde) {}\n+\n+    public void drop(DropTargetDropEvent dtde) {\n+        dtde.rejectDrop();\n+        dropped = true;\n+    }\n+\n+    public void dropActionChanged(DropTargetDragEvent dtde) {}\n+\n+    public boolean isEntered() {\n+        return entered;\n+    }\n+\n+    public boolean isDropped() {\n+        return dropped;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/InterJVMLinkTest.java","additions":273,"deletions":0,"binary":false,"changes":273,"status":"added"},{"patch":"@@ -0,0 +1,283 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragGestureRecognizer;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceAdapter;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetAdapter;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseEvent;\n+\n+\/*\n+  @test\n+  @bug 4658741\n+  @summary verifies that getDropSuccess() returns correct value for intra-JVM DnD\n+  @key headful\n+  @run main IntraJVMGetDropSuccessTest\n+*\/\n+\n+public class IntraJVMGetDropSuccessTest implements AWTEventListener {\n+\n+    static final Object SYNC_LOCK = new Object();\n+    static final int FRAME_ACTIVATION_TIMEOUT = 3000;\n+    static final int MOUSE_RELEASE_TIMEOUT = 1000;\n+\n+    static class DragSourceDropListener extends DragSourceAdapter {\n+        private boolean finished = false;\n+        private boolean dropSuccess = false;\n+\n+        public void reset() {\n+            finished = false;\n+            dropSuccess = false;\n+        }\n+\n+        public boolean isDropFinished() {\n+            return finished;\n+        }\n+\n+        public boolean getDropSuccess() {\n+            return dropSuccess;\n+        }\n+\n+        public void dragDropEnd(DragSourceDropEvent dsde) {\n+            finished = true;\n+            dropSuccess = dsde.getDropSuccess();\n+            synchronized (SYNC_LOCK) {\n+                SYNC_LOCK.notifyAll();\n+            }\n+        }\n+    }\n+\n+    static class ChildCanvas extends Canvas {\n+        private final Dimension preferredDimension = new Dimension(100, 200);\n+\n+        public Dimension getPreferredSize() {\n+            return preferredDimension;\n+        }\n+    }\n+\n+    volatile Frame frame;\n+    volatile Canvas canvas1;\n+    volatile Canvas canvas2;\n+    volatile Canvas canvas3;\n+    volatile Point p;\n+    volatile Dimension d;\n+    volatile Component c;\n+\n+    volatile DragSourceDropListener dragSourceListener;\n+    volatile DragSource dragSource;\n+    volatile Transferable transferable;\n+    volatile DragGestureListener dragGestureListener;\n+    volatile DragGestureRecognizer dragGestureRecognizer;\n+    volatile DropTargetListener dropTargetListener;\n+    volatile DropTarget dropTarget;\n+\n+    Component clickedComponent = null;\n+\n+    public static void main(String[] args) throws Exception {\n+        IntraJVMGetDropSuccessTest test = new IntraJVMGetDropSuccessTest();\n+        EventQueue.invokeAndWait(test::init);\n+        try {\n+            test.start();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (test.frame != null) {\n+                    test.frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void init() {\n+        frame = new Frame();\n+        canvas1 = new ChildCanvas();\n+        canvas2 = new ChildCanvas();\n+        canvas3 = new ChildCanvas();\n+\n+        dragSourceListener = new DragSourceDropListener();\n+        dragSource = DragSource.getDefaultDragSource();\n+        transferable = new StringSelection(\"TEXT\");\n+        dragGestureListener = new DragGestureListener() {\n+            public void dragGestureRecognized(DragGestureEvent dge) {\n+                dge.startDrag(null, transferable, dragSourceListener);\n+            }\n+        };\n+        dragGestureRecognizer =\n+                dragSource.createDefaultDragGestureRecognizer(canvas2, DnDConstants.ACTION_COPY,\n+                        dragGestureListener);\n+        dropTargetListener = new DropTargetAdapter() {\n+            public void drop(DropTargetDropEvent dtde) {\n+                dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+                dtde.dropComplete(true);\n+            }\n+        };\n+        dropTarget = new DropTarget(canvas3, dropTargetListener);\n+\n+\n+        canvas1.setBackground(Color.red);\n+        canvas2.setBackground(Color.yellow);\n+        canvas3.setBackground(Color.green);\n+\n+        frame.setTitle(\"IntraJVMGetDropSuccessTest\");\n+        frame.setLocation(100, 100);\n+        frame.setLayout(new GridLayout(1, 3));\n+        frame.getToolkit().addAWTEventListener(this, AWTEvent.MOUSE_EVENT_MASK);\n+        frame.add(canvas1);\n+        frame.add(canvas2);\n+        frame.add(canvas3);\n+        frame.pack();\n+\n+        frame.setVisible(true);\n+    }\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+\n+    public void start() throws Exception {\n+        Robot robot = new Robot();\n+\n+        robot.delay(FRAME_ACTIVATION_TIMEOUT);\n+\n+        final Point srcPoint = getCenterLocationOnScreen(canvas2);\n+\n+        if (!pointInComponent(robot, srcPoint, canvas2)) {\n+            System.err.println(\"WARNING: Couldn't locate \" + canvas2);\n+            return;\n+        }\n+\n+        final Point dstPoint1 = getCenterLocationOnScreen(canvas1);\n+\n+        if (!pointInComponent(robot, dstPoint1, canvas1)) {\n+            System.err.println(\"WARNING: Couldn't locate \" + canvas1);\n+            return;\n+        }\n+\n+        final Point dstPoint2 = getCenterLocationOnScreen(canvas3);\n+        if (!pointInComponent(robot, dstPoint2, canvas3)) {\n+            System.err.println(\"WARNING: Couldn't locate \" + canvas3);\n+            return;\n+        }\n+\n+        robot.waitForIdle();\n+        test(robot, srcPoint, dstPoint1, false);\n+        test(robot, srcPoint, dstPoint2, true);\n+        test(robot, srcPoint, dstPoint1, false);\n+    }\n+\n+    public Point getCenterLocationOnScreen(Component c) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            p = c.getLocationOnScreen();\n+            d = c.getSize();\n+        });\n+        p.translate(d.width \/ 2, d.height \/ 2);\n+        return p;\n+    }\n+\n+    public void test(Robot robot, Point src, Point dst, boolean success)\n+      throws InterruptedException {\n+\n+        dragSourceListener.reset();\n+        robot.mouseMove(src.x, src.y);\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+\n+        for (Point p = new Point(src); !p.equals(dst);\n+             p.translate(sign(dst.x - p.x),\n+                         sign(dst.y - p.y))) {\n+            robot.mouseMove(p.x, p.y);\n+            robot.delay(50);\n+        }\n+\n+        synchronized (SYNC_LOCK) {\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+            SYNC_LOCK.wait();\n+        }\n+\n+        if (!dragSourceListener.isDropFinished()) {\n+            throw new RuntimeException(\"Drop not finished\");\n+        }\n+\n+        if (dragSourceListener.getDropSuccess() != success) {\n+            throw new RuntimeException(\"getDropSuccess() returned wrong value:\"\n+                                       + dragSourceListener.getDropSuccess());\n+        }\n+    }\n+\n+    public void reset() throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            clickedComponent = null;\n+        });\n+\n+    }\n+\n+    public void eventDispatched(AWTEvent e) {\n+        if (e.getID() == MouseEvent.MOUSE_RELEASED) {\n+            clickedComponent = (Component)e.getSource();\n+            synchronized (SYNC_LOCK) {\n+                SYNC_LOCK.notifyAll();\n+            }\n+        }\n+    }\n+\n+    boolean pointInComponent(Robot robot, Point p, Component comp)\n+      throws Exception {\n+        robot.waitForIdle();\n+        reset();\n+        robot.mouseMove(p.x, p.y);\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        synchronized (SYNC_LOCK) {\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+            SYNC_LOCK.wait(MOUSE_RELEASE_TIMEOUT);\n+        }\n+\n+        EventQueue.invokeAndWait(() -> {\n+            c = clickedComponent;\n+\n+            while (c != null && c != comp) {\n+                c = c.getParent();\n+            }\n+        });\n+\n+        return c == comp;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/IntraJVMGetDropSuccessTest.java","additions":283,"deletions":0,"binary":false,"changes":283,"status":"added"},{"patch":"@@ -0,0 +1,382 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.List;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetContext;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.io.File;\n+import java.io.InputStream;\n+import java.io.Serializable;\n+import java.net.URL;\n+\n+\/*\n+  @test\n+  @bug 4416788\n+  @summary Tests that URL can be recognized by a java drop target\n+  @requires (os.family == \"windows\")\n+  @key headful\n+  @run main LinkAcceptanceTest\n+*\/\n+\n+public class LinkAcceptanceTest {\n+\n+    public static final int CODE_NOT_RETURNED = -1;\n+    public static final int CODE_OK = 0;\n+    public static final int CODE_FAILURE = 1;\n+    public static final int FRAME_ACTIVATION_TIMEOUT = 2000;\n+    public static final int DROP_TIMEOUT = 12000;\n+    public static final int DROP_COMPLETION_TIMEOUT = 4000;\n+\n+    private int returnCode = CODE_NOT_RETURNED;\n+\n+    volatile Frame frame;\n+    volatile Robot robot;\n+    volatile Panel panel;\n+    volatile Point p;\n+    volatile Dimension d;\n+\n+    public static void main(String[] args) throws Exception {\n+        LinkAcceptanceTest test = new LinkAcceptanceTest();\n+        if (args.length > 0) {\n+            test.run(args);\n+        } else {\n+            EventQueue.invokeAndWait(test::init);\n+            try {\n+                test.start();\n+            } finally {\n+                EventQueue.invokeAndWait(() -> {\n+                    if (test.frame != null) {\n+                        test.frame.dispose();\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    public void run(String[] args) {\n+        try {\n+            if (args.length != 4) {\n+                throw new RuntimeException(\"Incorrect command line arguments.\");\n+            }\n+\n+            int x = Integer.parseInt(args[0]);\n+            int y = Integer.parseInt(args[1]);\n+            int w = Integer.parseInt(args[2]);\n+            int h = Integer.parseInt(args[3]);\n+\n+            TransferableURL t = new TransferableURL();\n+            panel = new DragSourcePanel(t);\n+\n+            frame = new Frame();\n+            frame.setTitle(\"LinkAcceptanceTest DragSource frame\");\n+            frame.setLocation(300, 200);\n+            frame.add(panel);\n+            frame.pack();\n+            frame.setVisible(true);\n+\n+            Thread.sleep(FRAME_ACTIVATION_TIMEOUT);\n+\n+            Point sourcePoint = panel.getLocationOnScreen();\n+            Dimension d = panel.getSize();\n+            sourcePoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+            Point targetPoint = new Point(x + w \/ 2, y + h \/ 2);\n+\n+            robot = new Robot();\n+            robot.mouseMove(sourcePoint.x, sourcePoint.y);\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.mousePress(InputEvent.BUTTON1_MASK);\n+            for (; !sourcePoint.equals(targetPoint);\n+                 sourcePoint.translate(sign(targetPoint.x - sourcePoint.x),\n+                                       sign(targetPoint.y - sourcePoint.y))) {\n+                robot.mouseMove(sourcePoint.x, sourcePoint.y);\n+                Thread.sleep(10);\n+            }\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+\n+            synchronized (t) {\n+                t.wait(DROP_TIMEOUT);\n+            }\n+\n+            Thread.sleep(DROP_COMPLETION_TIMEOUT);\n+\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            System.exit(LinkAcceptanceTest.CODE_FAILURE);\n+        }\n+\n+        System.exit(LinkAcceptanceTest.CODE_OK);\n+    }\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+\n+    public void init() {\n+        panel = new DropTargetPanel();\n+\n+        frame = new Frame();\n+        frame.setTitle(\"DropTarget frame\");\n+        frame.setLocation(10, 200);\n+        frame.add(panel);\n+\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    public void start() {\n+        try {\n+            Thread.sleep(FRAME_ACTIVATION_TIMEOUT);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                p = panel.getLocationOnScreen();\n+                d = panel.getSize();\n+            });\n+\n+            String javaPath = System.getProperty(\"java.home\", \"\");\n+            String command = javaPath + File.separator + \"bin\" +\n+                File.separator + \"java -cp \" + System.getProperty(\"test.classes\", \".\") +\n+                \" LinkAcceptanceTest \" +\n+                p.x + \" \" + p.y + \" \" + d.width + \" \" + d.height;\n+            Process process = Runtime.getRuntime().exec(command);\n+            returnCode = process.waitFor();\n+            InputStream errorStream = process.getErrorStream();\n+            int count = errorStream.available();\n+            if (count > 0) {\n+                byte[] b = new byte[count];\n+                errorStream.read(b);\n+                System.err.println(\"========= Child VM System.err ========\");\n+                System.err.print(new String(b));\n+                System.err.println(\"======================================\");\n+            }\n+\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+        }\n+        switch (returnCode) {\n+        case CODE_NOT_RETURNED:\n+            System.err.println(\"Child VM: failed to start\");\n+            break;\n+        case CODE_OK:\n+            System.err.println(\"Child VM: normal termination\");\n+            break;\n+        case CODE_FAILURE:\n+            System.err.println(\"Child VM: abnormal termination\");\n+            break;\n+        }\n+        if (returnCode != CODE_OK) {\n+            throw new RuntimeException(\"The test failed.\");\n+        }\n+    }\n+}\n+\n+class TransferableURL implements Transferable {\n+\n+    public static String URL_STRING = \"http:\/\/java.sun.com\";\n+    public static final int NUM_DATA_FLAVORS = 3;\n+    static DataFlavor[] supportedFlavors = new DataFlavor[NUM_DATA_FLAVORS];\n+\n+    static String[] flavorList = { \"application\/x-java-url;class=java.net.URL\",\n+                                   \"text\/uri-list;class=java.lang.String\",\n+                                   \"text\/plain;class=java.lang.String\" };\n+    static {\n+        try {\n+            for (int i = 0; i < NUM_DATA_FLAVORS; i++) {\n+                supportedFlavors[i] = new DataFlavor(flavorList[i]);\n+            }\n+        } catch (ClassNotFoundException e) {\n+            throw new RuntimeException(\"Failed to construct the flavor\");\n+        }\n+    }\n+\n+    public DataFlavor[] getTransferDataFlavors() {\n+        return supportedFlavors;\n+    }\n+\n+    public boolean isDataFlavorSupported(DataFlavor flavor) {\n+\n+        for (int i = 0; i < NUM_DATA_FLAVORS; i++) {\n+            if (flavor.equals(supportedFlavors[i])) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException {\n+\n+        if (!isDataFlavorSupported(flavor)) {\n+            throw new UnsupportedFlavorException(flavor);\n+        }\n+\n+        return new String(URL_STRING);\n+    }\n+}\n+\n+class DragSourceLabel extends Label implements Serializable,\n+                                               DragGestureListener,\n+                                               DragSourceListener {\n+\n+    final Transferable transferable;\n+\n+    public DragSourceLabel(Transferable t) {\n+        super(TransferableURL.URL_STRING);\n+\n+        this.transferable = t;\n+        DragSource ds = DragSource.getDefaultDragSource();\n+        ds.createDefaultDragGestureRecognizer(this, DnDConstants.ACTION_LINK,\n+                                              this);\n+    }\n+\n+    public void dragGestureRecognized(DragGestureEvent dge) {\n+        dge.startDrag(null, transferable, this);\n+    }\n+\n+    public void dragEnter(DragSourceDragEvent dsde) {}\n+\n+    public void dragExit(DragSourceEvent dse) {}\n+\n+    public void dragOver(DragSourceDragEvent dsde) {}\n+\n+    public void dragDropEnd(DragSourceDropEvent dsde) {}\n+\n+    public void dropActionChanged(DragSourceDragEvent dsde) {}\n+}\n+\n+\n+class DragSourcePanel extends Panel {\n+\n+    final Dimension preferredDimension = new Dimension(200, 200);\n+\n+    public DragSourcePanel(Transferable t) {\n+        setLayout(new GridLayout(1, 1));\n+        add(new DragSourceLabel(t));\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+}\n+\n+class DropTargetPanel extends Panel implements DropTargetListener {\n+\n+    final Dimension preferredDimension = new Dimension(200, 200);\n+\n+    public DropTargetPanel() {\n+        setBackground(Color.green);\n+        setDropTarget(new DropTarget(this, this));\n+        setLayout(new GridLayout(1, 1));\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+\n+    public void dragEnter(DropTargetDragEvent dtde) {\n+        dtde.acceptDrag(DnDConstants.ACTION_LINK);\n+    }\n+\n+    public void dragExit(DropTargetEvent dte) {}\n+\n+    public void dragOver(DropTargetDragEvent dtde) {\n+        dtde.acceptDrag(DnDConstants.ACTION_LINK);\n+    }\n+\n+    public void drop(DropTargetDropEvent dtde) {\n+        DropTargetContext dtc = dtde.getDropTargetContext();\n+\n+        if ((dtde.getSourceActions() & DnDConstants.ACTION_LINK) != 0) {\n+            dtde.acceptDrop(DnDConstants.ACTION_LINK);\n+        } else {\n+            dtde.rejectDrop();\n+            return;\n+        }\n+\n+        removeAll();\n+        final List list = new List();\n+        add(list);\n+\n+        Transferable t = dtde.getTransferable();\n+        DataFlavor[] dfs = t.getTransferDataFlavors();\n+\n+        for (int i = 0; i < dfs.length; i++) {\n+\n+            DataFlavor flavor = dfs[i];\n+            String transferText = null;\n+            URL transferURL = null;\n+\n+            if (flavor.getRepresentationClass().equals(URL.class)) {\n+                try {\n+                    transferURL = (URL)t.getTransferData(flavor);\n+                } catch (Exception e) {\n+                    throw new RuntimeException(\"The test failed: unable to recognize \" +\n+                                               flavor.getMimeType());\n+                }\n+                list.add(transferURL + \":\" + flavor.getMimeType());\n+            }\n+\n+            if (flavor.getRepresentationClass().equals(String.class)) {\n+                try {\n+                    transferText = (String)t.getTransferData(flavor);\n+                } catch (Exception e) {\n+                    throw new RuntimeException(\"The test failed: unable to recognize \" +\n+                                               flavor.getMimeType());\n+                }\n+                list.add(transferText + \":\" + flavor.getMimeType());\n+            }\n+        }\n+\n+        dtc.dropComplete(true);\n+        validate();\n+    }\n+\n+    public void dropActionChanged(DropTargetDragEvent dtde) {}\n+\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/LinkAcceptanceTest.java","additions":382,"deletions":0,"binary":false,"changes":382,"status":"added"}]}