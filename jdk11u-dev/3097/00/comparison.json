{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,3 +50,5 @@\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        try (DeflaterOutputStream defos = new DeflaterOutputStream(baos, def)) {\n-            defos.write(in, 0, len);\n+        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n+            try (DeflaterOutputStream defos = new DeflaterOutputStream(baos, def)) {\n+                defos.write(in, 0, len);\n+            }\n+            out1 = baos.toByteArray();\n@@ -54,1 +56,0 @@\n-        out1 = baos.toByteArray();\n@@ -121,2 +122,16 @@\n-    static void check(Deflater def, byte[] in, int len,\n-                      byte[] out1, byte[] out2, boolean nowrap)\n+    \/**\n+     * Uses the {@code def} deflater to deflate the input data {@code in} of length {@code len}.\n+     * A new {@link Inflater} is then created within this method to inflate the deflated data. The\n+     * inflated data is then compared with the {@code in} to assert that it matches the original\n+     * input data.\n+     * This method repeats these checks for the different overloaded methods of\n+     * {@code Deflater.deflate(...)} and {@code Inflater.inflate(...)}\n+     *\n+     * @param def    the deflater to use for deflating the contents in {@code in}\n+     * @param in     the input content\n+     * @param len    the length of the input content to use\n+     * @param nowrap will be passed to the constructor of the {@code Inflater} used in this\n+     *               method\n+     * @throws Throwable if any error occurs during the check\n+     *\/\n+    static void check(Deflater def, byte[] in, int len, boolean nowrap)\n@@ -125,3 +140,4 @@\n-        Arrays.fill(out1, (byte)0);\n-        Arrays.fill(out2, (byte)0);\n-\n+        byte[] tempBuffer = new byte[len];\n+        byte[] out1, out2;\n+        int m = 0, n = 0;\n+        Inflater inf = new Inflater(nowrap);\n@@ -130,1 +146,0 @@\n-        int m = def.deflate(out1);\n@@ -132,3 +147,8 @@\n-        Inflater inf = new Inflater(nowrap);\n-        inf.setInput(out1, 0, m);\n-        int n = inf.inflate(out2);\n+        try (ByteArrayOutputStream baos = new ByteArrayOutputStream(len)) {\n+            while (!def.finished()) {\n+                int temp_counter = def.deflate(tempBuffer);\n+                m += temp_counter;\n+                baos.write(tempBuffer, 0, temp_counter);\n+            }\n+            out1 = baos.toByteArray();\n+            baos.reset();\n@@ -136,6 +156,15 @@\n-        if (n != len ||\n-            !Arrays.equals(Arrays.copyOf(in, len), Arrays.copyOf(out2, len)) ||\n-            inf.inflate(out2) != 0) {\n-            System.out.printf(\"m=%d, n=%d, len=%d, eq=%b%n\",\n-                              m, n, len, Arrays.equals(in, out2));\n-            throw new RuntimeException(\"De\/inflater failed:\" + def);\n+            inf.setInput(out1, 0, m);\n+\n+            while (!inf.finished()) {\n+                int temp_counter = inf.inflate(tempBuffer);\n+                n += temp_counter;\n+                baos.write(tempBuffer, 0, temp_counter);\n+            }\n+            out2 = baos.toByteArray();\n+            if (n != len ||\n+                !Arrays.equals(in, 0, len, out2, 0, len) ||\n+                inf.inflate(out2) != 0) {\n+                System.out.printf(\"m=%d, n=%d, len=%d, eq=%b%n\",\n+                                  m, n, len, Arrays.equals(in, out2));\n+                throw new RuntimeException(\"De\/inflater failed:\" + def);\n+            }\n@@ -290,1 +319,1 @@\n-                        check(def, dataIn, len, dataOut1, dataOut2, dowrap);\n+                        check(def, dataIn, len, dowrap);\n","filename":"test\/jdk\/java\/util\/zip\/DeInflate.java","additions":50,"deletions":21,"binary":false,"changes":71,"status":"modified"}]}