{"files":[{"patch":"@@ -39,2 +39,2 @@\n-    static int count = 0;\n-    static String authstring;\n+    static volatile int count = 0;\n+    static volatile String authstring;\n@@ -57,0 +57,1 @@\n+            System.out.println(\"Server handling case: \"+ count);\n@@ -96,0 +97,1 @@\n+            System.err.println(\"Unexpected exception for case \" + count + \": \" + e);\n@@ -135,0 +137,2 @@\n+            System.out.println(\"Client got exception: \" + e);\n+            System.out.println(\"Terminating server\");\n@@ -148,0 +152,1 @@\n+        System.out.println(\"Terminating server\");\n@@ -152,0 +157,2 @@\n+        System.out.println(\"Check failed: \" + s);\n+        System.out.println(\"Terminating server\");\n@@ -161,1 +168,1 @@\n-        int count = 0;\n+        volatile int count = 0;\n","filename":"test\/jdk\/java\/net\/Authenticator\/B4678055.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @key intermittent\n@@ -32,2 +33,0 @@\n-import java.net.InetAddress;\n-import java.net.DatagramSocket;\n@@ -35,0 +34,3 @@\n+import java.net.DatagramSocket;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n@@ -45,1 +47,1 @@\n-            Thread.currentThread().sleep(1000);\n+            Thread.sleep(1000);\n@@ -66,0 +68,1 @@\n+        long sleeptime = 0;\n@@ -68,0 +71,3 @@\n+        \/\/ it's possible that this method intermittently fails, if some other\n+        \/\/ process running on the machine grabs the port we want before us,\n+        \/\/ and doesn't release it before the 5 * 500 ms are elapsed...\n@@ -70,1 +76,1 @@\n-                serverSocket = new DatagramSocket(serverPort);\n+                serverSocket = new DatagramSocket(serverPort, InetAddress.getLocalHost());\n@@ -73,1 +79,1 @@\n-                    Thread.sleep(500);\n+                   sleeptime += sleepAtLeast(500);\n@@ -75,1 +81,2 @@\n-                    System.out.println(\"Give up after 5 retries\");\n+                    System.out.println(\"Give up after 5 retries and \" + sleeptime(sleeptime));\n+                    System.out.println(\"Has some other process grabbed port \" + serverPort + \"?\");\n@@ -82,1 +89,2 @@\n-                + serverSocket.getLocalAddress() + \":\" + serverSocket.getLocalPort());\n+                + serverSocket.getLocalAddress() + \":\" + serverSocket.getLocalPort()\n+                + \" obtained at \" + attempt(retryCount) + \" attempt with \" + sleeptime(sleeptime));\n@@ -86,1 +94,37 @@\n-    PortUnreachable() throws Exception {\n+    long sleepAtLeast(long millis) throws Exception {\n+        long start = System.nanoTime();\n+        long ms = millis;\n+        while (ms > 0) {\n+            assert ms < Long.MAX_VALUE\/1000_000L;\n+            Thread.sleep(ms);\n+            long elapsedms = (System.nanoTime() - start)\/1000_000L;\n+            ms = millis - elapsedms;\n+        }\n+        return millis - ms;\n+    }\n+\n+    String attempt(int retry) {\n+        switch (retry) {\n+            case 0: return \"first\";\n+            case 1: return \"second\";\n+            case 2: return \"third\";\n+            default: return retry + \"th\";\n+        }\n+    }\n+\n+    String sleeptime(long millis) {\n+        if (millis == 0) return \"no sleep\";\n+        long sec = millis \/ 1000L;\n+        long ms =  millis % 1000L;\n+        String sleeptime = \"\";\n+        if (millis > 0) {\n+           if (sec > 0) {\n+               sleeptime = \"\" + sec + \" s\" +\n+                   (ms > 0 ? \" \" : \"\");\n+            }\n+            if (ms > 0 ) {\n+                sleeptime += ms + \" ms\";\n+            }\n+        } else sleeptime = millis + \" ms\"; \/\/ should not happen\n+        return sleeptime + \" of sleep time\";\n+    }\n@@ -88,1 +132,2 @@\n-        clientSock = new DatagramSocket();\n+    PortUnreachable() throws Exception {\n+        clientSock = new DatagramSocket(new InetSocketAddress(InetAddress.getLocalHost(), 0));\n@@ -96,1 +141,1 @@\n-        DatagramSocket sock2 = new DatagramSocket();\n+        DatagramSocket sock2 = new DatagramSocket(new InetSocketAddress(InetAddress.getLocalHost(), 0));\n@@ -129,1 +174,0 @@\n-\n","filename":"test\/jdk\/java\/net\/DatagramSocket\/PortUnreachable.java","additions":56,"deletions":12,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+        StringBuilder sb = new StringBuilder();\n@@ -77,0 +78,1 @@\n+            sb.append((char)r);\n@@ -86,0 +88,1 @@\n+        System.out.println(\"Server got request: \" + sb.toString());\n@@ -93,0 +96,1 @@\n+                    System.out.println(\"Server accepted socket: \" + s);\n@@ -95,0 +99,1 @@\n+                    System.out.println(\"Redirecting to: \/redirect\" + i);\n@@ -100,0 +105,1 @@\n+                System.out.println(\"Server accepted socket: \" + s);\n@@ -102,0 +108,1 @@\n+                System.out.println(\"Replying...\");\n","filename":"test\/jdk\/java\/net\/URLConnection\/RedirectLimit.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -59,1 +59,2 @@\n-        ServerSocket ss;\n+        final ServerSocket ss;\n+        volatile boolean shutdown;\n@@ -86,0 +87,1 @@\n+            shutdown = true;\n@@ -93,1 +95,1 @@\n-                for (;;) {\n+                while(!shutdown) {\n@@ -104,0 +106,1 @@\n+                    System.out.println(\"Server replying to >\" + tests[i][0] + \"<\");\n@@ -120,0 +123,3 @@\n+                if (!shutdown) {\n+                    e.printStackTrace();\n+                }\n@@ -173,0 +179,1 @@\n+                System.err.println(\"Test failed for >\" + tests[i][0] + \"<: \" + e);\n","filename":"test\/jdk\/java\/net\/URLConnection\/Responses.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+import java.net.InetAddress;\n@@ -224,0 +225,5 @@\n+    \/*\n+     * What's the server address?  null means binding to the wildcard.\n+     *\/\n+    protected volatile InetAddress serverAddress = null;\n+\n@@ -231,2 +237,7 @@\n-        SSLServerSocket sslServerSocket =\n-                (SSLServerSocket)sslssf.createServerSocket(serverPort);\n+        InetAddress serverAddress = this.serverAddress;\n+        SSLServerSocket sslServerSocket = serverAddress == null ?\n+                (SSLServerSocket)sslssf.createServerSocket(serverPort)\n+                : (SSLServerSocket)sslssf.createServerSocket();\n+        if (serverAddress != null) {\n+            sslServerSocket.bind(new InetSocketAddress(serverAddress, serverPort));\n+        }\n@@ -320,2 +331,5 @@\n-                sslSocket.connect(\n-                        new InetSocketAddress(\"localhost\", serverPort), 15000);\n+                InetAddress serverAddress = this.serverAddress;\n+                InetSocketAddress connectAddress = serverAddress == null\n+                        ? new InetSocketAddress(\"localhost\", serverPort)\n+                        : new InetSocketAddress(serverAddress, serverPort);\n+                sslSocket.connect(connectAddress, 15000);\n","filename":"test\/jdk\/javax\/net\/ssl\/templates\/SSLSocketTemplate.java","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -104,2 +104,16 @@\n-            Thread.sleep(seconds * 1000);\n-        } catch (InterruptedException e) {}\n+            sleepms(seconds * 1000);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    static long sleepms(long millis) throws InterruptedException {\n+        long start = System.nanoTime();\n+        long ms = millis;\n+        while (ms > 0) {\n+            assert ms < Long.MAX_VALUE\/1000_000L;\n+            Thread.sleep(ms);\n+            long elapsedms = (System.nanoTime() - start)\/1000_000L;\n+            ms = millis - elapsedms;\n+        }\n+        return millis - ms;\n@@ -117,1 +131,1 @@\n-                throw new RuntimeException(host+\":\"+address+\": compare failed (found \"\n+                throw new RuntimeException(host+\"\/\"+address+\": compare failed (found \"\n","filename":"test\/jdk\/sun\/net\/InetAddress\/nameservice\/simple\/DefaultCaching.java","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-        URLConnection urlc = url.openConnection ();\n+        URLConnection urlc = url.openConnection (Proxy.NO_PROXY);\n","filename":"test\/jdk\/sun\/net\/www\/AuthHeaderTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,0 +87,1 @@\n+            System.out.println(\"Got expected exception: \" + se);\n@@ -88,1 +89,2 @@\n-            if (shouldRetry && httpHandler.getCallCount() != 2)\n+            if (shouldRetry && httpHandler.getCallCount() != 2) {\n+                se.printStackTrace(System.out);\n@@ -91,1 +93,2 @@\n-            else if (!shouldRetry && httpHandler.getCallCount() != 1)\n+            } else if (!shouldRetry && httpHandler.getCallCount() != 1) {\n+                se.printStackTrace(System.out);\n@@ -94,0 +97,1 @@\n+            }\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/RetryPost.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,0 +62,1 @@\n+import java.net.InetAddress;\n@@ -83,0 +84,4 @@\n+    ProxyAuthTest() {\n+        serverAddress = InetAddress.getLoopbackAddress();\n+    }\n+\n@@ -146,2 +151,3 @@\n-        InetSocketAddress paddr =\n-                new InetSocketAddress(\"localhost\", ps.getPort());\n+        InetSocketAddress paddr = InetSocketAddress\n+            .createUnresolved(ps.getInetAddress().getHostAddress(),\n+                              ps.getPort());\n@@ -150,0 +156,5 @@\n+        InetAddress serverAddress = this.serverAddress;\n+        String host = serverAddress == null\n+                ? \"localhost\"\n+                : serverAddress.getHostAddress();\n+        if (host.indexOf(':') > -1) host = \"[\" + host + \"]\";\n@@ -151,1 +162,2 @@\n-                \"https:\/\/\" + \"localhost:\" + serverPort + \"\/index.html\");\n+                \"https:\/\/\" + host + \":\" + serverPort + \"\/index.html\");\n+        System.out.println(\"URL: \" + url);\n@@ -157,1 +169,1 @@\n-            System.out.print(\"Client recieved from the server: \");\n+            System.out.print(\"Client received from the server: \");\n@@ -229,1 +241,2 @@\n-        ProxyTunnelServer pserver = new ProxyTunnelServer();\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        ProxyTunnelServer pserver = new ProxyTunnelServer(loopback);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsClient\/ProxyAuthTest.java","additions":19,"deletions":6,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,0 +64,4 @@\n+        this(null); \/\/ use wildcard\n+    }\n+\n+    public ProxyTunnelServer(InetAddress proxyAddress) throws IOException {\n@@ -65,2 +69,3 @@\n-          ss = (ServerSocket) ServerSocketFactory.getDefault().\n-          createServerSocket(0);\n+            ss = (ServerSocket) ServerSocketFactory.getDefault().\n+                createServerSocket();\n+            ss.bind(new InetSocketAddress(proxyAddress, 0));\n@@ -277,3 +282,3 @@\n-            throw new IOException(\"Proxy recieved a request: \"\n-                                        + connectStr);\n-          }\n+            throw new IOException(\"Proxy received a request: \"\n+                                  + connectStr, e);\n+        }\n@@ -287,0 +292,4 @@\n+    public InetAddress getInetAddress() {\n+        return ss.getInetAddress();\n+    }\n+\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsClient\/ProxyTunnelServer.java","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,3 @@\n-        String hostname = InetAddress.getLocalHost().getHostName();\n+        InetAddress localHost = InetAddress.getLocalHost();\n+        String hostname = localHost.getHostName();\n+        String hostAddress = localHost.getHostAddress();\n@@ -55,1 +57,1 @@\n-           InetSocketAddress proxyAddr = new InetSocketAddress(hostname, proxy.getLocalPort());\n+           InetSocketAddress proxyAddr = InetSocketAddress.createUnresolved(hostAddress, proxy.getLocalPort());\n@@ -99,1 +101,2 @@\n-          ss = new ServerSocket(0);\n+           ss = new ServerSocket();\n+           ss.bind(new InetSocketAddress(InetAddress.getLocalHost(), 0));\n@@ -146,2 +149,2 @@\n-             System.out.println(\"Proxy should not receive user defined headers for tunneled requests\");\n-             failed = true;\n+               System.out.println(\"Proxy should not receive user defined headers for tunneled requests\");\n+               failed = true;\n@@ -154,2 +157,2 @@\n-             System.out.println(\"Proxy-Connection:keep-alive not being sent\");\n-             failed = true;\n+               System.out.println(\"Proxy-Connection:keep-alive not being sent\");\n+               failed = true;\n@@ -209,2 +212,2 @@\n-                                        + connectStr);\n-          }\n+                                  + connectStr, e);\n+        }\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/B6226610.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.net.InetAddress;\n@@ -54,0 +55,2 @@\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        String loopbackAddress = loopback.getHostAddress();\n@@ -56,1 +59,1 @@\n-                      new InetSocketAddress(\"localhost\", server.getPort())));\n+                      InetSocketAddress.createUnresolved(loopbackAddress, server.getPort())));\n@@ -73,2 +76,5 @@\n-\n-        BadAuthProxyServer server = new BadAuthProxyServer(new ServerSocket(0));\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        InetSocketAddress address = new InetSocketAddress(loopback, 0);\n+        ServerSocket ss = new ServerSocket();\n+        ss.bind(address);\n+        BadAuthProxyServer server = new BadAuthProxyServer(ss);\n@@ -116,1 +122,0 @@\n-\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/HttpsProxyStackOverflow.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -98,0 +98,21 @@\n+        throws IOException {\n+        this(threads, cperthread, null, 0);\n+    }\n+\n+    \/**\n+     * Create a <code>TunnelProxy<code> instance with the specified number\n+     * of threads and maximum number of connections per thread and running on\n+     * the specified port. The specified number of threads are created to\n+     * handle incoming requests, and each thread is allowed\n+     * to handle a number of simultaneous TCP connections.\n+     * @param cb the callback object which is invoked to handle\n+     *  each incoming request\n+     * @param threads the number of threads to create to handle\n+     *  requests in parallel\n+     * @param cperthread the number of simultaneous TCP connections\n+     *  to handle per thread\n+     * @param address the address to bind to. null means all addresses.\n+     * @param port the port number to bind the server to. <code>Zero<\/code>\n+     *  means choose any free port.\n+     *\/\n+    public TunnelProxy (int threads, int cperthread, InetAddress address, int port)\n@@ -100,1 +121,1 @@\n-        InetSocketAddress addr = new InetSocketAddress (port);\n+        InetSocketAddress addr = new InetSocketAddress (address, port);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/https\/HttpsURLConnection\/TunnelProxy.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"}]}