{"files":[{"patch":"@@ -0,0 +1,376 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4240721\n+  @summary Test Component.getListeners API added in 1.3\n+  @key headful\n+  @run main GetListenersTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Canvas;\n+import java.awt.Checkbox;\n+import java.awt.CheckboxMenuItem;\n+import java.awt.Choice;\n+import java.awt.Component;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.Panel;\n+import java.awt.Scrollbar;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.AdjustmentEvent;\n+import java.awt.event.AdjustmentListener;\n+import java.awt.event.ComponentAdapter;\n+import java.awt.event.ComponentListener;\n+import java.awt.event.ContainerAdapter;\n+import java.awt.event.ContainerListener;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusListener;\n+import java.awt.event.HierarchyBoundsAdapter;\n+import java.awt.event.HierarchyBoundsListener;\n+import java.awt.event.HierarchyEvent;\n+import java.awt.event.HierarchyListener;\n+import java.awt.event.InputMethodEvent;\n+import java.awt.event.InputMethodListener;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+import java.awt.event.KeyAdapter;\n+import java.awt.event.KeyListener;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseListener;\n+import java.awt.event.MouseMotionAdapter;\n+import java.awt.event.MouseMotionListener;\n+import java.awt.event.MouseWheelEvent;\n+import java.awt.event.MouseWheelListener;\n+import java.awt.event.TextEvent;\n+import java.awt.event.TextListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowFocusListener;\n+import java.awt.event.WindowListener;\n+import java.awt.event.WindowStateListener;\n+import java.beans.BeanInfo;\n+import java.beans.EventSetDescriptor;\n+import java.beans.Introspector;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+import java.lang.reflect.Method;\n+import java.util.EventListener;\n+\n+public class GetListenersTest {\n+\n+    public static void main(String args[]) throws Exception {\n+        EventQueue.invokeAndWait(()-> {\n+            \/\/ Create frame with a bunch of components\n+            \/\/ and test that each component returns\n+            \/\/ the right type of listeners from Component.getListeners\n+            GLTFrame gltFrame = new GLTFrame();\n+            try {\n+                gltFrame.initAndShowGui();\n+                gltFrame.test();\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Test failed\", e);\n+            } finally {\n+                gltFrame.dispose();\n+            }\n+        });\n+    }\n+\n+    \/*\n+     * Checks an object has a listener for every support listener type\n+     *\/\n+    static void checkForListenersOfEveryType(Object object) throws Exception {\n+        Class type = object.getClass();\n+\n+        BeanInfo info = Introspector.getBeanInfo(type);\n+        EventSetDescriptor esets[] = info.getEventSetDescriptors();\n+\n+        \/\/ ensure there are listeners for every type\n+        for (int nset = 0; nset < esets.length; nset++) {\n+            Class listenerType = esets[nset].getListenerType();\n+            EventListener listener[] = getListeners(object, listenerType);\n+            \/\/ Skip PropertyChangeListener for now\n+            if (listener.length == 0 && validListenerToTest(listenerType)) {\n+                throw new RuntimeException(\"getListeners didn't return type \"\n+                        + listenerType);\n+            }\n+        }\n+\n+        System.out.println(\"************\");\n+        System.out.println(\"PASSED: getListeners on \"\n+                + object + \" has all the right listeners.\");\n+        System.out.println(\"************\");\n+    }\n+\n+    \/*\n+     * Calls getListeners on the object\n+     *\/\n+    static EventListener[] getListeners(Object object, Class type)\n+            throws Exception {\n+        Method methods[] = object.getClass().getMethods();\n+        Method method = null;\n+\n+        for (int nmethod = 0; nmethod < methods.length; nmethod++) {\n+            if (methods[nmethod].getName().equals(\"getListeners\")) {\n+                method = methods[nmethod];\n+                break;\n+            }\n+        }\n+        if (method == null) {\n+            throw new RuntimeException(\"Object \"\n+                    + object + \" has no getListeners method\");\n+        }\n+        Class params[] = {type};\n+        EventListener listeners[] = null;\n+        listeners = (EventListener[]) method.invoke(object, params);\n+        System.out.println(\"Listeners of type: \" + type + \" on \" + object);\n+        GetListenersTest.printArray(listeners);\n+        return listeners;\n+    }\n+\n+    \/*\n+     * Adds a listener of every type to the object\n+     *\/\n+    static void addDummyListenersOfEveryType(Object object) throws Exception {\n+        Class type = object.getClass();\n+\n+        BeanInfo info = Introspector.getBeanInfo(type);\n+        EventSetDescriptor esets[] = info.getEventSetDescriptors();\n+\n+        \/\/ add every kind of listener\n+        for (int nset = 0; nset < esets.length; nset++) {\n+            Class listenerType = esets[nset].getListenerType();\n+            EventListener listener = makeListener(listenerType);\n+            Method addListenerMethod = esets[nset].getAddListenerMethod();\n+            Object params[] = {listener};\n+            addListenerMethod.invoke(object, params);\n+        }\n+    }\n+\n+    \/*\n+     * Determines what listeners to exclude from the test for now\n+     *\/\n+    static boolean validListenerToTest(Class listenerType) {\n+        \/* Don't have any provision for PropertyChangeListeners... *\/\n+        if ( listenerType == PropertyChangeListener.class ) {\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    static void testGetListeners(Object object) throws Exception {\n+        GetListenersTest.addDummyListenersOfEveryType(object);\n+        GetListenersTest.checkForListenersOfEveryType(object);\n+    }\n+\n+    static void printArray(Object objects[]) {\n+        System.out.println(\"{\");\n+        for(int n = 0; n < objects.length; n++) {\n+            System.out.println(\"\\t\"+objects[n]+\",\");\n+        }\n+        System.out.println(\"}\");\n+    }\n+\n+    \/*\n+     * Makes a dummy listener implementation for the given listener type\n+     *\/\n+    static EventListener makeListener(Class listenerType) throws Exception {\n+        Object map[][] = {\n+                {ActionListener.class, MyActionAdapter.class},\n+                {AdjustmentListener.class, MyAdjustmentAdapter.class},\n+                {ComponentListener.class, MyComponentAdapter.class},\n+                {ContainerListener.class, MyContainerAdapter.class},\n+                {FocusListener.class, MyFocusAdapter.class},\n+                {HierarchyBoundsListener.class, MyHierarchyBoundsAdapter.class},\n+                {HierarchyListener.class, MyHierarchyAdapter.class},\n+                {InputMethodListener.class, MyInputMethodAdapter.class},\n+                {ItemListener.class, MyItemAdapter.class},\n+                {KeyListener.class, MyKeyAdapter.class},\n+                {MouseListener.class, MyMouseAdapter.class},\n+                {MouseMotionListener.class, MyMouseMotionAdapter.class},\n+                {MouseWheelListener.class, MyMouseWheelAdapter.class},\n+                {TextListener.class, MyTextAdapter.class},\n+                {WindowListener.class, MyWindowAdapter.class},\n+                {WindowFocusListener.class, MyWindowFocusAdapter.class},\n+                {WindowStateListener.class, MyWindowStateAdapter.class},\n+                {PropertyChangeListener.class, MyPropertyChangeAdapter.class},\n+        };\n+\n+        for (int n = 0; n < map.length; n++) {\n+            if (map[n][0] == listenerType) {\n+                Class adapterClass = (Class) map[n][1];\n+                EventListener listener =\n+                        (EventListener) adapterClass.newInstance();\n+                return listener;\n+            }\n+        }\n+\n+        throw new RuntimeException(\"No adapter found for listener type \"\n+                + listenerType);\n+    }\n+}\n+\n+class GLTFrame extends Frame {\n+    MenuItem mitem;\n+    CheckboxMenuItem cmitem;\n+\n+    GLTFrame() {\n+        super(\"Component.getListeners API Test\");\n+    }\n+\n+    public void initAndShowGui() {\n+        setLayout(new FlowLayout());\n+\n+        add(new Label(\"Label\"));\n+        add(new Button(\"Button\"));\n+        add(new Checkbox(\"Checkbox\"));\n+        Choice c = new Choice();\n+        c.add(\"choice\");\n+        java.awt.List l = new java.awt.List();\n+        l.add(\"list\");\n+        add(new Scrollbar());\n+        add(new TextField(\"TextField\"));\n+        add(new TextArea(\"TextArea\"));\n+        add(new Panel());\n+        add(new Canvas());\n+\n+        MenuBar menuBar = new MenuBar();\n+        Menu menu = new Menu(\"Menu\");\n+        mitem = new MenuItem(\"Item 1\");\n+        cmitem = new CheckboxMenuItem(\"Item 2\");\n+        menu.add(mitem);\n+        menu.add(cmitem);\n+        menuBar.add(menu);\n+        setMenuBar(menuBar);\n+\n+        pack();\n+        setVisible(true);\n+    }\n+\n+    public void test() throws Exception {\n+        \/\/ test Frame.getListeners\n+        GetListenersTest.testGetListeners(this);\n+\n+        \/\/\n+        \/\/ test getListeners on menu items\n+        \/\/\n+        GetListenersTest.testGetListeners(mitem);\n+        GetListenersTest.testGetListeners(cmitem);\n+\n+        \/\/\n+        \/\/ test getListeners on all AWT Components\n+        \/\/\n+        Component components[] = getComponents();\n+        for (int nc = 0; nc < components.length; nc++) {\n+            GetListenersTest.testGetListeners(components[nc]);\n+        }\n+    }\n+}\n+\n+\/************************************************\n+ * Dummy listener implementations we add to our components\/models\/objects\n+ *\/\n+\n+class MyPropertyChangeAdapter implements PropertyChangeListener {\n+    public void propertyChange(PropertyChangeEvent evt) {}\n+}\n+\n+class MyActionAdapter implements ActionListener {\n+    public void actionPerformed(ActionEvent ev) {\n+    }\n+}\n+\n+class MyAdjustmentAdapter implements AdjustmentListener {\n+    public void adjustmentValueChanged(AdjustmentEvent e) {\n+    }\n+}\n+\n+class MyHierarchyAdapter implements HierarchyListener {\n+    public void hierarchyChanged(HierarchyEvent e) {\n+    }\n+}\n+\n+class MyInputMethodAdapter implements InputMethodListener {\n+    public void inputMethodTextChanged(InputMethodEvent event) {\n+    }\n+\n+    public void caretPositionChanged(InputMethodEvent event) {\n+    }\n+}\n+\n+class MyItemAdapter implements ItemListener {\n+    public void itemStateChanged(ItemEvent e) {\n+    }\n+}\n+\n+class MyTextAdapter implements TextListener {\n+    public void textValueChanged(TextEvent e) {\n+    }\n+}\n+\n+class MyComponentAdapter extends ComponentAdapter {\n+}\n+\n+class MyContainerAdapter extends ContainerAdapter {\n+}\n+\n+class MyFocusAdapter extends FocusAdapter {\n+}\n+\n+class MyHierarchyBoundsAdapter extends HierarchyBoundsAdapter {\n+}\n+\n+class MyKeyAdapter extends KeyAdapter {\n+}\n+\n+class MyMouseAdapter extends MouseAdapter {\n+}\n+\n+class MyMouseMotionAdapter extends MouseMotionAdapter {\n+}\n+\n+class MyMouseWheelAdapter implements MouseWheelListener {\n+    public void mouseWheelMoved(MouseWheelEvent e) {}\n+}\n+\n+class MyWindowAdapter extends WindowAdapter {\n+}\n+\n+class MyWindowFocusAdapter implements WindowFocusListener {\n+    public void windowGainedFocus(WindowEvent t) {}\n+    public void windowLostFocus(WindowEvent t) {}\n+}\n+\n+class MyWindowStateAdapter extends WindowAdapter {\n+}\n","filename":"test\/jdk\/java\/awt\/Component\/GetListenersTest.java","additions":376,"deletions":0,"binary":false,"changes":376,"status":"added"},{"patch":"@@ -0,0 +1,127 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4852790\n+  @summary Frame disposal must remove opened popup without exception\n+  @key headful\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JMenuBar;\n+import javax.swing.JPanel;\n+\n+\n+public class OpenedPopupFrameDisposal {\n+    public static final int SIZE = 300;\n+\n+    volatile JFrame jf = null;\n+    volatile JComboBox<String> jcb = null;\n+\n+    public void start() {\n+        jf = new JFrame(\"OpenedPopupFrameDisposal - Frame to dispose\");\n+        \/\/ Note that original bug cannot be reproduced without JMenuBar present.\n+        jf.setJMenuBar(new JMenuBar());\n+        jf.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\n+        jf.setLocationRelativeTo(null);\n+        jf.addWindowListener(new WindowAdapter() {\n+            public void windowClosing(WindowEvent evt) {\n+                jf.setVisible(false);\n+                jf.dispose();\n+            }\n+        });\n+\n+\n+        JPanel panel = new JPanel(new FlowLayout());\n+        jcb = new JComboBox<>();\n+        jcb.addItem(\"one\");\n+        jcb.addItem(\"two\");\n+        jcb.addItem(\"Three\");\n+        panel.add(jcb);\n+\n+        jf.getContentPane().add(panel, BorderLayout.CENTER);\n+        jf.pack();\n+        jf.setSize(new Dimension(SIZE, SIZE));\n+\n+        jf.setVisible(true);\n+\n+    }\n+\n+    public void test() throws Exception {\n+        Robot robot  = new Robot();\n+        robot.delay(1000); \/\/ wait for jf visible\n+        Point pt = jf.getLocationOnScreen();\n+\n+        int x, y;\n+\n+        x = pt.x + SIZE \/ 2;\n+        y = pt.y + SIZE \/ 2;\n+\n+        robot.mouseMove(x, y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(1000);\n+\n+        pt = jcb.getLocationOnScreen();\n+        x = pt.x + jcb.getWidth() \/ 2;\n+        y = pt.y + jcb.getHeight() \/ 2;\n+\n+        robot.mouseMove(x, y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.delay(1000);\n+\n+        \/\/ Here on disposal we had a NullPointerException\n+        EventQueue.invokeAndWait(() -> {\n+            if (jf != null) {\n+                jf.setVisible(false);\n+                jf.dispose();\n+            }\n+        });\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        OpenedPopupFrameDisposal imt = new OpenedPopupFrameDisposal();\n+        try {\n+            EventQueue.invokeAndWait(imt::start);\n+            imt.test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (imt.jf != null) {\n+                    imt.jf.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Container\/OpenedPopupFrameDisposal.java","additions":127,"deletions":0,"binary":false,"changes":127,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4546535\n+  @summary java.awt.Container.remove(int) throws unexpected NPE\n+*\/\n+\n+import java.awt.Canvas;\n+import java.awt.Panel;\n+\n+public class RemoveByIndexExceptionTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        Panel p = new Panel();\n+        p.add(new Canvas());\n+        p.remove(0);\n+\n+        int[] bad = {-1, 0, 1};\n+        for (int i = 0; i < bad.length; i++) {\n+            try {\n+                System.out.println(\"Removing \" + bad[i]);\n+                p.remove(bad[i]);\n+                System.out.println(\"No exception\");\n+            } catch (ArrayIndexOutOfBoundsException e) {\n+                e.printStackTrace();\n+                System.out.println(\"This is correct exception - \" + e);\n+            } catch (NullPointerException e) {\n+                e.printStackTrace();\n+                throw new RuntimeException(\"Test Failed: NPE was thrown.\");\n+            }\n+        }\n+        System.out.println(\"Test Passed.\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Container\/RemoveByIndexExceptionTest.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4924516\n+  @summary Verifies that SHOWING_CHANGED event is propagated to \\\n+           HierarchyListeners then toolkit enabled\n+  @key headful\n+*\/\n+\n+\n+import java.awt.AWTEvent;\n+import java.awt.EventQueue;\n+import java.awt.Toolkit;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.HierarchyEvent;\n+import java.awt.event.HierarchyListener;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+\n+public class ShowingChangedEventTest\n+        implements AWTEventListener, HierarchyListener{\n+    private boolean eventRegisteredOnButton = false;\n+\n+    private final JFrame frame = new JFrame(\"ShowingChangedEventTest\");\n+    private final JPanel panel = new JPanel();\n+    private final JButton button = new JButton();\n+\n+\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            ShowingChangedEventTest showingChangedEventTest\n+                    = new ShowingChangedEventTest();\n+\n+            try {\n+                showingChangedEventTest.start();\n+            } finally {\n+                showingChangedEventTest.frame.dispose();\n+            }\n+        });\n+    }\n+\n+    public void start ()  {\n+        frame.getContentPane().add(panel);\n+        panel.add(button);\n+\n+        frame.pack();\n+        frame.setVisible(true);\n+\n+        Toolkit.getDefaultToolkit()\n+                .addAWTEventListener(this, AWTEvent.HIERARCHY_EVENT_MASK);\n+\n+        button.addHierarchyListener(this);\n+        panel.setVisible(false);\n+\n+        if (!eventRegisteredOnButton){\n+            throw new RuntimeException(\"Event wasn't registered on Button.\");\n+        }\n+    }\n+\n+    @Override\n+    public void eventDispatched(AWTEvent awtevt) {\n+        if (awtevt instanceof HierarchyEvent) {\n+            HierarchyEvent hevt = (HierarchyEvent) awtevt;\n+            if (hevt != null && (hevt.getChangeFlags()\n+                    & HierarchyEvent.SHOWING_CHANGED) != 0) {\n+                System.out.println(\"Hierarchy event was received on Toolkit. \"\n+                        + \"SHOWING_CHANGED for \"\n+                        + hevt.getChanged().getClass().getName());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void hierarchyChanged(HierarchyEvent e) {\n+        if ((HierarchyEvent.SHOWING_CHANGED & e.getChangeFlags()) != 0) {\n+            System.out.println(\"Hierarchy event was received on Button. \"\n+                    + \"SHOWING_CHANGED for \"\n+                    + e.getChanged().getClass().getName());\n+        }\n+        eventRegisteredOnButton = true;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Container\/ShowingChangedEventTest.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"}]}