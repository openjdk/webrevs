{"files":[{"patch":"@@ -285,1 +285,14 @@\n-    private boolean hashModules() {\n+    private boolean hashModules() throws IOException {\n+        String moduleName = null;\n+        if (options.jmodFile != null) {\n+            try (JmodFile jf = new JmodFile(options.jmodFile)) {\n+                try (InputStream in = jf.getInputStream(Section.CLASSES, MODULE_INFO)) {\n+                    ModuleInfo.Attributes attrs = ModuleInfo.read(in, null);\n+                    moduleName = attrs.descriptor().name();\n+                } catch (IOException e) {\n+                    throw new CommandException(\"err.module.descriptor.not.found\");\n+                }\n+            }\n+        }\n+        Hasher hasher = new Hasher(moduleName, options.moduleFinder);\n+\n@@ -290,2 +303,5 @@\n-        Hasher hasher = new Hasher(options.moduleFinder);\n-        hasher.computeHashes().forEach((mn, hashes) -> {\n+        Map<String, ModuleHashes> moduleHashes = hasher.computeHashes();\n+        if (moduleHashes.isEmpty()) {\n+            throw new CommandException(\"err.no.moduleToHash\", \"\\\"\" + options.modulesToHash + \"\\\"\");\n+        }\n+        moduleHashes.forEach((mn, hashes) -> {\n@@ -295,3 +311,3 @@\n-                    .sorted()\n-                    .forEach(name -> out.format(\"  hashes %s %s %s%n\",\n-                        name, hashes.algorithm(), toHex(hashes.hashFor(name))));\n+                      .sorted()\n+                      .forEach(name -> out.format(\"  hashes %s %s %s%n\",\n+                            name, hashes.algorithm(), toHex(hashes.hashFor(name))));\n@@ -848,13 +864,0 @@\n-        \/**\n-         * This constructor is for jmod hash command.\n-         *\n-         * This Hasher will determine which modules to record hashes, i.e.\n-         * the module in a subgraph of modules to be hashed and that\n-         * has no outgoing edges.  It will record in each of these modules,\n-         * say `M`, with the the hashes of modules that depend upon M\n-         * directly or indirectly matching the specified --hash-modules pattern.\n-         *\/\n-        Hasher(ModuleFinder finder) {\n-            this(null, finder);\n-        }\n-\n@@ -869,0 +872,7 @@\n+         * If name is null, this Hasher will determine which modules to\n+         * record hashes, i.e. the module in a subgraph of modules to be\n+         * hashed and that has no outgoing edges.  It will record in each\n+         * of these modules, say `M`, with the hashes of modules that\n+         * depend upon M directly or indirectly matching the specified\n+         * --hash-modules pattern.\n+         *\n@@ -1449,0 +1459,12 @@\n+                \/\/ It's optional to specify jmod-file.  If not specified, then\n+                \/\/ it will find all the modules that have no outgoing read edges\n+                if (words.size() >= 2) {\n+                    Path path = Paths.get(words.get(1));\n+                    if (Files.notExists(path))\n+                        throw new CommandException(\"err.jmod.not.found\", path);\n+\n+                    options.jmodFile = path;\n+                }\n+                if (words.size() > 2)\n+                    throw new CommandException(\"err.unknown.option\",\n+                            words.subList(2, words.size())).showUsage(true);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/JmodTask.java","additions":41,"deletions":19,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,0 +108,1 @@\n+err.no.moduleToHash=No hashes recorded: no module matching {0} found to record hashes\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/resources\/jmod.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -509,0 +509,28 @@\n+    @Test\n+    public void testNoMatchingHashModule() throws IOException {\n+        Path lib = Paths.get(\"hashes\");\n+        Files.createDirectories(lib);\n+        \/\/ create jmod file with no module depending on it\n+        Path jmod = lib.resolve(\"foo.jmod\");\n+        jmod(\"create\",\n+             \"--class-path\", EXPLODED_DIR.resolve(\"foo\").resolve(\"classes\").toString(),\n+             jmod.toString());\n+\n+        \/\/ jmod hash command should report no module found to record hashes\n+        jmod(\"hash\",\n+             \"--module-path\", lib.toString(),\n+             \"--hash-modules\", \".*\",\n+             jmod.toString())\n+             .resultChecker(r ->\n+                     assertContains(r.output, \"No hashes recorded: \" +\n+                             \"no module matching \\\".*\\\" found to record hashes\")\n+             );\n+        jmod(\"hash\",\n+             \"--module-path\", lib.toString(),\n+             \"--hash-modules\", \"foo\")\n+             .resultChecker(r ->\n+                     assertContains(r.output, \"No hashes recorded: \" +\n+                             \"no module matching \\\"foo\\\" found to record hashes\")\n+             );\n+    }\n+\n","filename":"test\/jdk\/tools\/jmod\/JmodNegativeTest.java","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8160286 8243666\n+ * @bug 8160286 8243666 8217527\n@@ -279,1 +279,1 @@\n-    private void testReproducibibleHash() throws Exception {\n+    public void testReproducibibleHash() throws Exception {\n@@ -300,0 +300,42 @@\n+    @Test\n+    public void testHashModulesPattern() throws IOException {\n+        \/\/ create modules for test cases\n+        makeModule(\"m1\");\n+        makeModule(\"m2\", \"m1\");\n+        makeModule(\"m3\");\n+        makeModule(\"m4\", \"m1\", \"m3\");\n+        List.of(\"m1\", \"m2\", \"m3\", \"m4\").forEach(this::makeJmod);\n+\n+        \/\/ compute hash for the target jmod (m1.jmod) with different regex\n+        \/\/ 1) --hash-module \"m2\"\n+        Path jmod = lib.resolve(\"m1.jmod\");\n+        runJmod(\"hash\",\n+                \"--module-path\", lib.toString(),\n+                \"--hash-modules\", \"m2\", jmod.toString());\n+        assertEquals(moduleHashes().keySet(), Set.of(\"m1\"));\n+        checkHashes(\"m1\", Set.of(\"m2\"));\n+\n+        \/\/ 2) --hash-module \"m2|m4\"\n+        runJmod(\"hash\",\n+                \"--module-path\", lib.toString(),\n+                \"--hash-modules\", \"m2|m4\", jmod.toString());\n+        assertEquals(moduleHashes().keySet(), Set.of(\"m1\"));\n+        checkHashes(\"m1\", Set.of(\"m2\", \"m4\"));\n+\n+        \/\/ 3) --hash-module \".*\"\n+        runJmod(\"hash\",\n+                \"--module-path\", lib.toString(),\n+                \"--hash-modules\", \".*\", jmod.toString());\n+        assertEquals(moduleHashes().keySet(), Set.of(\"m1\"));\n+        checkHashes(\"m1\", Set.of(\"m2\", \"m4\"));\n+\n+        \/\/ target jmod is not specified\n+        \/\/ compute hash for all modules in the library\n+        runJmod(\"hash\",\n+                \"--module-path\", lib.toString(),\n+                \"--hash-modules\", \".*\");\n+        assertEquals(moduleHashes().keySet(), Set.of(\"m1\", \"m3\"));\n+        checkHashes(\"m1\", Set.of(\"m2\", \"m4\"));\n+        checkHashes(\"m3\", Set.of(\"m4\"));\n+    }\n+\n@@ -453,1 +495,1 @@\n-        runJmod(List.of(\"hash\",\n+        runJmod(\"hash\",\n@@ -455,2 +497,5 @@\n-                \"--hash-modules\", \".*\"));\n-        HashesTest ht = this;\n+                \"--hash-modules\", \".*\");\n+        return moduleHashes();\n+    }\n+\n+    private Map<String, ModuleHashes> moduleHashes() {\n@@ -462,2 +507,2 @@\n-                .filter(mn -> ht.hashes(mn) != null)\n-                .collect(Collectors.toMap(mn -> mn, ht::hashes));\n+                .filter(mn -> hashes(mn) != null)\n+                .collect(Collectors.toMap(mn -> mn, this::hashes));\n@@ -467,2 +512,6 @@\n-        int rc = JMOD_TOOL.run(System.out, System.out, args.toArray(new String[args.size()]));\n-        System.out.println(\"jmod \" + args.stream().collect(Collectors.joining(\" \")));\n+        runJmod(args.toArray(new String[args.size()]));\n+    }\n+\n+    private static void runJmod(String... args) {\n+        int rc = JMOD_TOOL.run(System.out, System.out, args);\n+        System.out.println(\"jmod \" + Arrays.stream(args).collect(Collectors.joining(\" \")));\n","filename":"test\/jdk\/tools\/jmod\/hashes\/HashesTest.java","additions":58,"deletions":9,"binary":false,"changes":67,"status":"modified"}]}