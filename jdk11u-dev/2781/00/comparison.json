{"files":[{"patch":"@@ -0,0 +1,291 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Image;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.ClipboardOwner;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.FlavorEvent;\n+import java.awt.datatransfer.FlavorListener;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+\n+public class Common {}\n+\n+class FlavorListenerImpl implements FlavorListener {\n+    public boolean notified1, notified2;\n+    private int count;\n+    public void flavorsChanged(FlavorEvent evt) {\n+        switch (count) {\n+            case 0:\n+                notified1 = true;\n+                break;\n+            case 1:\n+                notified2 = true;\n+                break;\n+        }\n+        count++;\n+        System.err.println(\"listener's \" + this +\n+                \" flavorChanged() called \" + count + \" time\");\n+    }\n+    public String toString() {\n+        return \"notified1=\" + notified1 + \" notified2=\" + notified2 +\n+                \" count=\" + count;\n+    }\n+};\n+\n+ class Util {\n+    public static void setClipboardContents(Clipboard cb,\n+                                            Transferable contents,\n+                                            ClipboardOwner owner) {\n+        while (true) {\n+            try {\n+                cb.setContents(contents, owner);\n+                return;\n+            } catch (IllegalStateException ise) {\n+                ise.printStackTrace();\n+                try {\n+                    Thread.sleep(100);\n+                } catch (InterruptedException ie) {\n+                    ie.printStackTrace();\n+                }\n+            }\n+        }\n+    }\n+\n+    public static void sleep(long millis) {\n+        try {\n+            Thread.sleep(millis);\n+        } catch (InterruptedException ie) {\n+            ie.printStackTrace();\n+        }\n+    }\n+\n+    public static Image createImage() {\n+        int w = 100;\n+        int h = 100;\n+        int[] pix = new int[w * h];\n+\n+        int index = 0;\n+        for (int y = 0; y < h; y++) {\n+            for (int x = 0; x < w; x++) {\n+                int red = 127;\n+                int green = 127;\n+                int blue = y > h \/ 2 ? 127 : 0;\n+                int alpha = 255;\n+                if (x < w \/ 4 && y < h \/ 4) {\n+                    alpha = 0;\n+                    red = 0;\n+                }\n+                pix[index++] = (alpha << 24) | (red << 16) | (green << 8) | blue;\n+            }\n+        }\n+\n+        return Toolkit\n+                .getDefaultToolkit().\n+                        createImage(new java.awt.image.MemoryImageSource(\n+                                w, h, pix, 0, w\n+                        ));\n+    }\n+\n+}\n+\n+\n+class TransferableUnion implements Transferable {\n+\n+    private static final DataFlavor[] ZERO_LENGTH_ARRAY = new DataFlavor[0];\n+\n+    private final Transferable TRANSF1, TRANSF2;\n+\n+    private final DataFlavor[] FLAVORS;\n+\n+\n+    public TransferableUnion(Transferable t1, Transferable t2) {\n+        if (t1 == null) {\n+            throw new NullPointerException(\"t1\");\n+        }\n+        if (t2 == null) {\n+            throw new NullPointerException(\"t2\");\n+        }\n+\n+        this.TRANSF1 = t1;\n+        this.TRANSF2 = t2;\n+\n+        java.util.Set<DataFlavor> flavorSet = new java.util.HashSet<>();\n+        flavorSet.addAll(java.util.Arrays.asList(t1.getTransferDataFlavors()));\n+        flavorSet.addAll(java.util.Arrays.asList(t2.getTransferDataFlavors()));\n+\n+        FLAVORS = flavorSet.toArray(ZERO_LENGTH_ARRAY);\n+    }\n+\n+    \/**\n+     * Returns an array of flavors in which this <code>Transferable<\/code>\n+     * can provide the data.\n+     *\/\n+    public DataFlavor[] getTransferDataFlavors() {\n+        return FLAVORS.clone();\n+    }\n+\n+    \/**\n+     * Returns whether the requested flavor is supported by this\n+     * <code>Transferable<\/code>.\n+     *\n+     * @param flavor the requested flavor for the data\n+     * @throws NullPointerException if flavor is <code>null<\/code>\n+     *\/\n+    public boolean isDataFlavorSupported(DataFlavor flavor) {\n+        if (flavor == null) {\n+            throw new NullPointerException(\"flavor\");\n+        }\n+\n+        return TRANSF1.isDataFlavorSupported(flavor)\n+                || TRANSF2.isDataFlavorSupported(flavor);\n+    }\n+\n+    \/**\n+     * Returns the <code>Transferable<\/code>'s data in the requested\n+     * <code>DataFlavor<\/code> if possible.\n+     *\n+     * @param flavor the requested flavor for the data\n+     * @return the data in the requested flavor\n+     * @throws UnsupportedFlavorException if the requested data flavor is\n+     *         not supported by this Transferable\n+     * @throws IOException if an <code>IOException<\/code> occurs while\n+     *         retrieving the data.\n+     * @throws NullPointerException if flavor is <code>null<\/code>\n+     *\/\n+    public Object getTransferData(DataFlavor flavor)\n+            throws UnsupportedFlavorException, java.io.IOException {\n+\n+        if (!isDataFlavorSupported(flavor)) {\n+            throw new UnsupportedFlavorException(flavor);\n+        }\n+\n+        java.io.IOException ioexc = null;\n+\n+        if (TRANSF1.isDataFlavorSupported(flavor)) {\n+            try {\n+                return TRANSF1.getTransferData(flavor);\n+            } catch (java.io.IOException exc) {\n+                ioexc = exc;\n+            }\n+        }\n+\n+        if (TRANSF2.isDataFlavorSupported(flavor)) {\n+            return TRANSF2.getTransferData(flavor);\n+        }\n+\n+        if (ioexc != null) {\n+            throw ioexc;\n+        }\n+\n+        \/\/ unreachable\n+        return null;\n+    }\n+\n+}\n+\n+\/**\n+ * A <code>Transferable<\/code> that implements the capability required\n+ * to transfer an <code>Image<\/code>.\n+ *\n+ * This <code>Transferable<\/code> properly supports\n+ * <code>DataFlavor.imageFlavor<\/code>\n+ * and all equivalent flavors.\n+ * No other <code>DataFlavor<\/code>s are supported.\n+ *\n+ * @see java.awt.datatransfer.DataFlavor.imageFlavor\n+ *\/\n+class ImageSelection implements Transferable {\n+\n+    private static final DataFlavor[] flavors = { DataFlavor.imageFlavor };\n+\n+    private Image data;\n+\n+    \/**\n+     * Creates a <code>Transferable<\/code> capable of transferring\n+     * the specified <code>Image<\/code>.\n+     *\/\n+    public ImageSelection(Image data) {\n+        this.data = data;\n+    }\n+\n+    \/**\n+     * Returns an array of flavors in which this <code>Transferable<\/code>\n+     * can provide the data. <code>DataFlavor.stringFlavor<\/code>\n+     * is supported.\n+     *\n+     * @return an array of length one, whose element is <code>DataFlavor.\n+     *         imageFlavor<\/code>\n+     *\/\n+    public DataFlavor[] getTransferDataFlavors() {\n+        return flavors.clone();\n+    }\n+\n+    \/**\n+     * Returns whether the requested flavor is supported by this\n+     * <code>Transferable<\/code>.\n+     *\n+     * @param flavor the requested flavor for the data\n+     * @return true if <code>flavor<\/code> is equal to\n+     *   <code>DataFlavor.imageFlavor<\/code>;\n+     *   false otherwise\n+     * @throws NullPointerException if flavor is <code>null<\/code>\n+     *\/\n+    public boolean isDataFlavorSupported(DataFlavor flavor) {\n+        for (int i = 0; i < flavors.length; i++) {\n+            if (flavor.equals(flavors[i])) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    \/**\n+     * Returns the <code>Transferable<\/code>'s data in the requested\n+     * <code>DataFlavor<\/code> if possible. If the desired flavor is\n+     * <code>DataFlavor.imageFlavor<\/code>, or an equivalent flavor,\n+     * the <code>Image<\/code> representing the selection is\n+     * returned.\n+     *\n+     * @param flavor the requested flavor for the data\n+     * @return the data in the requested flavor, as outlined above\n+     * @throws UnsupportedFlavorException if the requested data flavor is\n+     *         not equivalent to <code>DataFlavor.imageFlavor<\/code>\n+     * @throws IOException if an <code>IOException<\/code> occurs while\n+     *         retrieving the data. By default, <code>ImageSelection<\/code>\n+     *         never throws this exception, but a subclass may.\n+     * @throws NullPointerException if flavor is <code>null<\/code>\n+     *\/\n+    public Object getTransferData(DataFlavor flavor)\n+            throws UnsupportedFlavorException, java.io.IOException {\n+        if (flavor.equals(DataFlavor.imageFlavor)) {\n+            return data;\n+        } else {\n+            throw new UnsupportedFlavorException(flavor);\n+        }\n+    }\n+\n+} \/\/ class ImageSelection\n+\n","filename":"test\/jdk\/java\/awt\/Clipboard\/FlavorChangeNotificationTest\/Common.java","additions":291,"deletions":0,"binary":false,"changes":291,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4259272\n+  @summary tests that notifications on changes to the set of DataFlavors\n+           available on a private clipboard are delivered properly\n+  @build Common\n+  @run main PrivateClipboardTest\n+*\/\n+\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.StringSelection;\n+\n+public class PrivateClipboardTest {\n+\n+    public static void main(String[] args) {\n+        new PrivateClipboardTest().start();\n+    }\n+\n+    public void start() {\n+        final Clipboard clipboard = new Clipboard(\"local\");\n+\n+        final FlavorListenerImpl listener1 = new FlavorListenerImpl();\n+        clipboard.addFlavorListener(listener1);\n+\n+        final FlavorListenerImpl listener2 = new FlavorListenerImpl();\n+        clipboard.addFlavorListener(listener2);\n+\n+        Util.setClipboardContents(clipboard,\n+                new StringSelection(\"text1\"), null);\n+        Util.sleep(3000);\n+\n+        clipboard.removeFlavorListener(listener1);\n+\n+        Util.setClipboardContents(clipboard,\n+                new TransferableUnion(new StringSelection(\"text2\"),\n+                        new ImageSelection(Util.createImage())), null);\n+        Util.sleep(3000);\n+\n+        System.err.println(\"listener1: \" + listener1 + \"\\nlistener2: \" + listener2);\n+\n+        if (!(listener1.notified1 && listener2.notified1 && !listener1.notified2\n+                && listener2.notified2)) {\n+            throw new RuntimeException(\"notifications about flavor \" +\n+                                       \"changes delivered incorrectly!\");\n+        }\n+     }\n+}\n","filename":"test\/jdk\/java\/awt\/Clipboard\/FlavorChangeNotificationTest\/PrivateClipboardTest.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4259272\n+  @summary tests that notifications on changes to the set of DataFlavors\n+           available on the system clipboard are delivered properly\n+  @key headful\n+  @modules java.desktop\/sun.awt\n+  @build Common\n+  @run main SystemClipboardTest\n+*\/\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.StringSelection;\n+\n+import sun.awt.SunToolkit;\n+\n+public class SystemClipboardTest {\n+\n+    private final Clipboard clipboard =\n+            Toolkit.getDefaultToolkit().getSystemClipboard();\n+\n+    private final FlavorListenerImpl listener1 = new FlavorListenerImpl();\n+\n+    private final FlavorListenerImpl listener2 = new FlavorListenerImpl();\n+\n+    private boolean isListener2Added;\n+\n+\n+    public static void main(String[] args) {\n+        new SystemClipboardTest().start();\n+    }\n+\n+    public void start() {\n+        Util.setClipboardContents(clipboard,\n+                new StringSelection(\"text3\"), null);\n+\n+        clipboard.addFlavorListener(listener1);\n+\n+        final ThreadGroup threadGroup = new ThreadGroup(\"Test thread group\");\n+        final Object lock = new Object();\n+        final Runnable runnable = new Runnable() {\n+                public void run() {\n+                    SunToolkit.createNewAppContext();\n+                    clipboard.addFlavorListener(listener2);\n+                    synchronized (lock) {\n+                        isListener2Added = true;\n+                        lock.notifyAll();\n+                    }\n+                }\n+        };\n+        final Thread thread = new Thread(threadGroup, runnable, \"Test thread\");\n+        synchronized (lock) {\n+            thread.start();\n+            while (!isListener2Added) {\n+                try {\n+                    lock.wait();\n+                } catch (InterruptedException ie) {\n+                    ie.printStackTrace();\n+                }\n+            }\n+        }\n+\n+        Util.setClipboardContents(clipboard,\n+                new TransferableUnion(new StringSelection(\"text2\"),\n+                        new ImageSelection(Util.createImage())),\n+                null);\n+        Util.sleep(3000);\n+\n+        clipboard.removeFlavorListener(listener1);\n+        \/\/ must not remove listener2 from this AppContext\n+\n+        Util.setClipboardContents(clipboard,\n+                new StringSelection(\"text3\"), null);\n+        Util.sleep(3000);\n+\n+        System.err.println(\"listener1: \" + listener1\n+                + \"\\nlistener2: \" + listener2);\n+\n+        if (!(listener1.notified1\n+                && listener2.notified1\n+                && !listener1.notified2\n+                && listener2.notified2)) {\n+            throw new RuntimeException(\"notifications about flavor \" +\n+                                       \"changes delivered incorrectly!\");\n+        }\n+     }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/Clipboard\/FlavorChangeNotificationTest\/SystemClipboardTest.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4287795 4790833\n+  @summary tests new Clipboard methods: getAvailableDataFlavors,\n+           isDataFlavorAvailable, getData\n+  @run main PrivateClipboardTest\n+*\/\n+\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class PrivateClipboardTest {\n+\n+    public static void main(String[] args) {\n+        boolean failed = false;\n+        final Clipboard clipboard = new Clipboard(\"local\");\n+\n+        if (clipboard.isDataFlavorAvailable(DataFlavor.stringFlavor)) {\n+            failed = true;\n+            System.err.println(\"FAILURE: isDataFlavorAvailable() returns \" +\n+                               \"true for empty clipboard\");\n+        }\n+\n+        try {\n+            clipboard.getData(DataFlavor.stringFlavor);\n+            failed = true;\n+            System.err.println(\"FAILURE: getData() does not throw \" +\n+                    \"UnsupportedFlavorException for empty clipboard\");\n+        } catch (UnsupportedFlavorException exc) {\n+            System.err.println(\"getData() for empty clipboard throw \" +\n+                               \"UnsupportedFlavorException correctly: \" + exc);\n+        } catch (IOException exc) {\n+            failed = true;\n+            exc.printStackTrace();\n+        }\n+\n+        if (clipboard.getAvailableDataFlavors() == null ||\n+                clipboard.getAvailableDataFlavors().length != 0) {\n+            failed = true;\n+            System.err.println(\"FAILURE: getAvailableDataFlavors() does not \" +\n+                    \"return zero-length array for empty clipboard: \" +\n+                    Arrays.toString(clipboard.getAvailableDataFlavors()));\n+        }\n+\n+        final String contentsText = \"contents text\";\n+\n+        clipboard.setContents(new StringSelection(contentsText), null);\n+\n+        Transferable contents = clipboard.getContents(null);\n+        Set<DataFlavor> flavorsT = new HashSet<>(\n+                Arrays.asList(contents.getTransferDataFlavors()));\n+        Set<DataFlavor> flavorsA = new HashSet<>(\n+                Arrays.asList(clipboard.getAvailableDataFlavors()));\n+        System.err.println(\"getAvailableDataFlavors(): \" + flavorsA);\n+        if (!flavorsA.equals(flavorsT)) {\n+            failed = true;\n+            System.err.println(\n+                    \"FAILURE: getAvailableDataFlavors() returns incorrect \" +\n+                    \"DataFlavors: \" + flavorsA + \"\\nwhile getContents().\" +\n+                    \"getTransferDataFlavors() return: \" + flavorsT);\n+        }\n+\n+        if (!clipboard.isDataFlavorAvailable(DataFlavor.stringFlavor)) {\n+            failed = true;\n+            System.err.println(\n+                    \"FAILURE: isDataFlavorAvailable(DataFlavor.stringFlavor) \" +\n+                               \"returns false\");\n+        }\n+\n+        Object data = null;\n+        try {\n+            data = clipboard.getData(DataFlavor.stringFlavor);\n+        } catch (UnsupportedFlavorException exc) {\n+            failed = true;\n+            exc.printStackTrace();\n+        } catch (IOException exc) {\n+            failed = true;\n+            exc.printStackTrace();\n+        }\n+        System.err.println(\"getData(): \" + data);\n+        if (!contentsText.equals(data)) {\n+            failed = true;\n+            System.err.println(\"FAILURE: getData() returns: \" + data +\n+                               \", that is not equal to: \\\"\" + contentsText + \"\\\"\");\n+        }\n+\n+        if (failed) {\n+            throw new RuntimeException(\"test failed, for details see output above\");\n+        }\n+     }\n+}\n","filename":"test\/jdk\/java\/awt\/Clipboard\/GetAltContentsTest\/PrivateClipboardTest.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4683804\n+  @summary Tests that in ClipboardOwner.lostOwnership() Clipboard.getContents()\n+           returns actual contents of the clipboard and Clipboard.setContents()\n+           can set contents of the clipboard and its owner. The clipboard is\n+           a private clipboard.\n+*\/\n+\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.ClipboardOwner;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+\n+public class PrivateClipboardTest  {\n+\n+    public static void main(String[] args) {\n+        PrivateClipboardOwner.run();\n+\n+        if (PrivateClipboardOwner.failed) {\n+            throw new RuntimeException(\"test failed: can not get actual \" +\n+            \"contents of the clipboard or set owner of the clipboard\");\n+        } else {\n+            System.err.println(\"test passed\");\n+        }\n+    }\n+}\n+\n+class PrivateClipboardOwner implements ClipboardOwner {\n+    static boolean failed;\n+\n+    private static final Object LOCK = new Object();\n+\n+    private static final int CHAIN_LENGTH = 5;\n+    private final static Clipboard clipboard =\n+            new Clipboard(\"PrivateClipboard\");\n+\n+    private int m, id;\n+\n+    public PrivateClipboardOwner(int m) { this.m = m; id = m; }\n+\n+    public void lostOwnership(Clipboard cb, Transferable contents) {\n+        System.err.println(id + \" lost clipboard ownership\");\n+\n+        Transferable t = cb.getContents(null);\n+        String msg = null;\n+        try {\n+            msg = (String)t.getTransferData(DataFlavor.stringFlavor);\n+        } catch (Exception e) {\n+             System.err.println(id + \" can't getTransferData: \" + e);\n+        }\n+        System.err.println(id + \" Clipboard.getContents(): \" + msg);\n+        if ( ! msg.equals( \"\" + (m+1) ) ) {\n+            failed = true;\n+            System.err.println(\n+                    \"Clipboard.getContents() returned incorrect contents!\");\n+        }\n+\n+        m += 2;\n+        if (m <= CHAIN_LENGTH) {\n+            System.err.println(id + \" Clipboard.setContents(): \" + m);\n+            cb.setContents(new StringSelection(m + \"\"), this);\n+        }\n+\n+        synchronized (LOCK) {\n+            if (m > CHAIN_LENGTH) {\n+                LOCK.notifyAll();\n+            }\n+        }\n+    }\n+\n+    public static void run() {\n+        PrivateClipboardOwner cbo1 = new PrivateClipboardOwner(0);\n+        System.err.println(cbo1.m + \" Clipboard.setContents(): \" + cbo1.m);\n+        clipboard.setContents(new StringSelection(cbo1.m + \"\"), cbo1);\n+\n+        PrivateClipboardOwner cbo2 = new PrivateClipboardOwner(1);\n+\n+        synchronized (LOCK) {\n+            System.err.println(cbo2.m + \" Clipboard.setContents(): \" + cbo2.m);\n+            clipboard.setContents(new StringSelection(cbo2.m + \"\"), cbo2);\n+            try {\n+                LOCK.wait();\n+            } catch (InterruptedException exc) {\n+                exc.printStackTrace();\n+            }\n+        }\n+\n+        if (cbo1.m < CHAIN_LENGTH) {\n+            failed = true;\n+            System.err.println(\"chain of calls of lostOwnership() broken!\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Clipboard\/LostOwnershipChainTest\/PrivateClipboardTest.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4683804\n+  @summary Tests that in ClipboardOwner.lostOwnership() Clipboard.getContents()\n+           returns actual contents of the clipboard and Clipboard.setContents()\n+           can set contents of the clipboard and its owner. The clipboard is\n+           the system clipboard.\n+  @key headful\n+*\/\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.ClipboardOwner;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+\n+public class SystemClipboardTest {\n+\n+    public static void main(String[] args) {\n+        SystemClipboardOwner.run();\n+\n+        if (SystemClipboardOwner.failed) {\n+            throw new RuntimeException(\"test failed: can not get actual \" +\n+            \"contents of the clipboard or set owner of the clipboard\");\n+        } else {\n+            System.err.println(\"test passed\");\n+        }\n+    }\n+}\n+\n+\n+class SystemClipboardOwner implements ClipboardOwner {\n+    static boolean failed;\n+\n+    private static final Object LOCK = new Object();\n+\n+    private static final int CHAIN_LENGTH = 5;\n+    private final static Clipboard clipboard =\n+        Toolkit.getDefaultToolkit().getSystemClipboard();\n+\n+    private int m, id;\n+\n+    public SystemClipboardOwner(int m) { this.m = m; id = m; }\n+\n+    public void lostOwnership(Clipboard cb, Transferable contents) {\n+        System.err.println(id + \" lost clipboard ownership\");\n+\n+        Transferable t = getClipboardContents(cb, null);\n+        String msg = null;\n+        try {\n+            msg = (String)t.getTransferData(DataFlavor.stringFlavor);\n+        } catch (Exception e) {\n+             System.err.println(id + \" can't getTransferData: \" + e);\n+        }\n+        System.err.println(id + \" Clipboard.getContents(): \" + msg);\n+        if ( ! msg.equals( \"\" + (m+1) ) ) {\n+            failed = true;\n+            System.err.println(\n+                    \"Clipboard.getContents() returned incorrect contents!\");\n+        }\n+\n+        m += 2;\n+        if (m <= CHAIN_LENGTH) {\n+            System.err.println(id + \" Clipboard.setContents(): \" + m);\n+            setClipboardContents(cb, new StringSelection(m + \"\"), this);\n+        }\n+\n+        synchronized (LOCK) {\n+            if (m > CHAIN_LENGTH) {\n+                LOCK.notifyAll();\n+            }\n+        }\n+    }\n+\n+    public static void run() {\n+        SystemClipboardOwner cbo1 = new SystemClipboardOwner(0);\n+        System.err.println(cbo1.m + \" Clipboard.setContents(): \" + cbo1.m);\n+        setClipboardContents(clipboard,\n+                new StringSelection(cbo1.m + \"\"), cbo1);\n+\n+        SystemClipboardOwner cbo2 = new SystemClipboardOwner(1);\n+        synchronized (LOCK) {\n+            System.err.println(cbo2.m + \" Clipboard.setContents(): \" + cbo2.m);\n+            setClipboardContents(clipboard,\n+                    new StringSelection(cbo2.m + \"\"), cbo2);\n+            try {\n+                LOCK.wait();\n+            } catch (InterruptedException exc) {\n+                exc.printStackTrace();\n+            }\n+        }\n+\n+        if (cbo1.m < CHAIN_LENGTH) {\n+            failed = true;\n+            System.err.println(\"chain of calls of lostOwnership() broken!\");\n+        }\n+    }\n+\n+    private static void setClipboardContents(Clipboard cb,\n+                                             Transferable contents,\n+                                             ClipboardOwner owner) {\n+        synchronized (cb) {\n+            while (true) {\n+                try {\n+                    cb.setContents(contents, owner);\n+                    return;\n+                } catch (IllegalStateException ise) {\n+                    try { Thread.sleep(100); }\n+                    catch (InterruptedException e) { e.printStackTrace(); }\n+                }\n+            }\n+        }\n+    }\n+\n+    private static Transferable getClipboardContents(Clipboard cb,\n+                                                     Object requestor) {\n+        synchronized (cb) {\n+            while (true) {\n+                try {\n+                    return cb.getContents(requestor);\n+                } catch (IllegalStateException ise) {\n+                    try { Thread.sleep(100); }\n+                    catch (InterruptedException e) { e.printStackTrace(); }\n+                }\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/Clipboard\/LostOwnershipChainTest\/SystemClipboardTest.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"}]}