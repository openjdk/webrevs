{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import static java.util.concurrent.TimeUnit.SECONDS;\n@@ -31,0 +32,3 @@\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n@@ -197,0 +201,68 @@\n+    private static volatile Boolean shouldDisableSystemTray = null;\n+\n+    \/**\n+     * There is an issue displaying the xembed icons in appIndicators\n+     * area with certain Gnome Shell versions.\n+     * To avoid any loss of quality of service, we are disabling\n+     * SystemTray support in such cases.\n+     *\n+     * @return true if system tray should be disabled\n+     *\/\n+    public boolean shouldDisableSystemTray() {\n+        Boolean result = shouldDisableSystemTray;\n+        if (result == null) {\n+            synchronized (GTK_LOCK) {\n+                result = shouldDisableSystemTray;\n+                if (result == null) {\n+                    String desktop = AccessController.doPrivileged(\n+                            new GetPropertyAction(\"sun.desktop\"));\n+                    if (\"gnome\".equals(desktop)) {\n+                        @SuppressWarnings(\"removal\")\n+                        Integer gnomeShellMajorVersion =\n+                                AccessController\n+                                        .doPrivileged((PrivilegedAction<Integer>)\n+                                                this::getGnomeShellMajorVersion);\n+\n+                        if (gnomeShellMajorVersion == null\n+                                || gnomeShellMajorVersion < 45) {\n+\n+                            return shouldDisableSystemTray = true;\n+                        }\n+                    }\n+                    shouldDisableSystemTray = result = false;\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    private Integer getGnomeShellMajorVersion() {\n+        try {\n+            Process process =\n+                new ProcessBuilder(\"\/usr\/bin\/gnome-shell\", \"--version\")\n+                        .start();\n+            try (InputStreamReader isr = new InputStreamReader(process.getInputStream());\n+                 BufferedReader reader = new BufferedReader(isr)) {\n+\n+                if (process.waitFor(2, SECONDS) &&  process.exitValue() == 0) {\n+                    String line = reader.readLine();\n+                    if (line != null) {\n+                        String[] versionComponents = line\n+                                .replaceAll(\"[^\\\\d.]\", \"\")\n+                                .split(\"\\\\.\");\n+\n+                        if (versionComponents.length >= 1) {\n+                            return Integer.parseInt(versionComponents[0]);\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (IOException\n+                 | InterruptedException\n+                 | IllegalThreadStateException\n+                 | NumberFormatException ignored) {\n+        }\n+\n+        return null;\n+    }\n+\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/UNIXToolkit.java","additions":73,"deletions":1,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import sun.awt.UNIXToolkit;\n@@ -51,0 +52,1 @@\n+    private final boolean shouldDisableSystemTray;\n@@ -56,1 +58,2 @@\n-        selection.addSelectionListener(this);\n+        UNIXToolkit tk = (UNIXToolkit)Toolkit.getDefaultToolkit();\n+        shouldDisableSystemTray = tk.shouldDisableSystemTray();\n@@ -58,2 +61,2 @@\n-        long selection_owner = selection.getOwner(SCREEN);\n-        available = (selection_owner != XConstants.None);\n+        if (!shouldDisableSystemTray) {\n+            selection.addSelectionListener(this);\n@@ -61,2 +64,6 @@\n-        if (log.isLoggable(PlatformLogger.Level.FINE)) {\n-            log.fine(\" check if system tray is available. selection owner: \" + selection_owner);\n+            long selection_owner = selection.getOwner(SCREEN);\n+            available = (selection_owner != XConstants.None);\n+\n+            if (log.isLoggable(PlatformLogger.Level.FINE)) {\n+                log.fine(\" check if system tray is available. selection owner: \" + selection_owner);\n+            }\n@@ -67,0 +74,4 @@\n+        if (shouldDisableSystemTray) {\n+            return;\n+        }\n+\n@@ -80,0 +91,4 @@\n+        if (shouldDisableSystemTray) {\n+            return;\n+        }\n+\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XSystemTrayPeer.java","additions":21,"deletions":6,"binary":false,"changes":27,"status":"modified"}]}