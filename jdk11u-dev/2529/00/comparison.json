{"files":[{"patch":"@@ -0,0 +1,143 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 4143867 4237390 4383709\n+   @summary Tests set\/getAction(.) and some constructors with Action argument\n+   @key headful\n+   @run main bug4143867\n+*\/\n+\n+import javax.swing.AbstractAction;\n+import javax.swing.AbstractButton;\n+import javax.swing.Action;\n+import javax.swing.DefaultButtonModel;\n+import javax.swing.JButton;\n+import javax.swing.JCheckBox;\n+import javax.swing.JCheckBoxMenuItem;\n+import javax.swing.JFrame;\n+import javax.swing.JToggleButton;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JRadioButton;\n+import javax.swing.JRadioButtonMenuItem;\n+import javax.swing.SwingUtilities;\n+import java.awt.FlowLayout;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.beans.PropertyChangeListener;\n+\n+public class bug4143867 {\n+    static final int TEST_MNEMONIC = KeyEvent.VK_1;\n+    static JFrame fr;\n+\n+    public static void main(String[] argv) throws Exception {\n+        bug4143867 b = new bug4143867();\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                b.doInitAndTest();\n+            } finally {\n+                if (fr != null) {\n+                    fr.dispose();\n+                }\n+            }\n+        });\n+    }\n+\n+    public void doInitAndTest() {\n+        fr = new JFrame(\"bug4143867\");\n+        JMenuBar mb = new JMenuBar();\n+        JMenu m = mb.add(new JMenu(\"Menu1\"));\n+        fr.setJMenuBar(mb);\n+        JMenuItem it1 = m.add(new JMenuItem(\"Item1\"));\n+        fr.getContentPane().setLayout(new FlowLayout());\n+        JButton bt1 = new JButton(\"Button1\");\n+        fr.getContentPane().add(bt1);\n+\n+        final AbstractAction al = new AbstractAction() {\n+            public void actionPerformed(ActionEvent e) {\n+              System.out.println(\"Pressed...\");\n+            }\n+        };\n+        al.putValue(Action.NAME, \"Action\");\n+        al.putValue(Action.MNEMONIC_KEY, new Integer(TEST_MNEMONIC));\n+        m.add(al);\n+        m.getItem(0).setAction(al);\n+        bt1.setAction(al);\n+        JButton bt2 = new JButton(al);\n+        fr.getContentPane().add(bt2);\n+        if (it1.getAction() != al || m.getItem(1).getAction() != al ||\n+            bt1.getAction() != al || bt2.getAction() != al) {\n+            throw new RuntimeException(\"Action was not set correctly.\");\n+        }\n+\n+        if (bt1.getMnemonic() != TEST_MNEMONIC) {\n+            throw new RuntimeException(\"Failed 4383709: JButton doesn't get mnemonic from Action\");\n+        }\n+\n+        class TestProtectedOfAbstractButton extends AbstractButton {\n+            public void test() {\n+                PropertyChangeListener pcl = createActionPropertyChangeListener(null);\n+                setModel(new DefaultButtonModel());\n+                configurePropertiesFromAction(al);\n+            }\n+        }\n+        TestProtectedOfAbstractButton tpAB = new TestProtectedOfAbstractButton();\n+        tpAB.test();\n+\n+        \/\/  Constructors presence test\n+        JRadioButton ct1         = new JRadioButton(al);\n+        JCheckBox ct2            = new JCheckBox(al);\n+        JRadioButton ct3         = new JRadioButton(al);\n+        JToggleButton ct4        = new JToggleButton(al);\n+        JMenuItem ct5            = new JMenuItem(al);\n+        JMenu ct6                = new JMenu(al);\n+        JCheckBoxMenuItem ct7    = new JCheckBoxMenuItem(al);\n+        JRadioButtonMenuItem ct8 = new JRadioButtonMenuItem(al);\n+        if (ct1.getAction() != al) {\n+            throw new RuntimeException(\"Constructor error in JRadioButton...\");\n+        }\n+        if (ct2.getAction() != al) {\n+            throw new RuntimeException(\"Constructor error in JCheckBox...\");\n+        }\n+        if (ct3.getAction() != al) {\n+            throw new RuntimeException(\"Constructor error in JRadioButton...\");\n+        }\n+        if (ct4.getAction() != al) {\n+            throw new RuntimeException(\"Constructor error in JToggleButton...\");\n+        }\n+        if (ct5.getAction() != al) {\n+            throw new RuntimeException(\"Constructor error in JMenuItem...\");\n+        }\n+        if (ct6.getAction() != al) {\n+            throw new RuntimeException(\"Constructor error in JMenu...\");\n+        }\n+        if (ct7.getAction() != al) {\n+            throw new RuntimeException(\"Constructor error in JCheckBoxMenuItem...\");\n+        }\n+        if (ct8.getAction() != al) {\n+            throw new RuntimeException(\"Constructor error in JRadioButtonMenuItem...\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/AbstractButton\/bug4143867.java","additions":143,"deletions":0,"binary":false,"changes":143,"status":"added"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 4147740\n+   @summary Tests that AbstractButton does not update images it doesn't use\n+   @key headful\n+   @run main bug4147740\n+*\/\n+\n+import java.awt.Image;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.ImageIcon;\n+import java.awt.Robot;\n+import javax.swing.SwingUtilities;\n+import java.awt.event.HierarchyEvent;\n+import java.awt.event.HierarchyListener;\n+\n+public class bug4147740 {\n+\n+    static JButton b;\n+    static JFrame frame;\n+    static volatile boolean imageUpdated = false;\n+    static volatile boolean shouldUpdate = true;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame(\"bug4147740\");\n+                b = new AnimatedButton();\n+                frame.getContentPane().add(b);\n+                b.addHierarchyListener(new Listener());\n+                frame.setSize(200, 200);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    static class Listener implements HierarchyListener {\n+        public void hierarchyChanged(HierarchyEvent ev) {\n+            if ((ev.getChangeFlags() | HierarchyEvent.SHOWING_CHANGED) != 0 &&\n+                frame.isShowing()) {\n+\n+                frame.repaint();\n+                SwingUtilities.invokeLater(new Runnable() {\n+                    public void run() {\n+                        synchronized(b) {\n+                            b.setEnabled(false);\n+                            shouldUpdate = false;\n+                        }\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    static class AnimatedButton extends JButton {\n+        boolean shouldNotUpdate = false;\n+\n+        AnimatedButton() {\n+            super();\n+            setIcon(new ImageIcon(\"animated.gif\"));\n+            setDisabledIcon(new ImageIcon(\"static.gif\"));\n+        }\n+\n+        public boolean imageUpdate(Image img, int infoflags,\n+                                   int x, int y, int w, int h) {\n+            boolean updated;\n+            synchronized(b) {\n+                updated = super.imageUpdate(img, infoflags, x, y, w, h);\n+                if (!shouldUpdate && updated) {\n+                    throw new RuntimeException(\"Failed: unused image is being updated\");\n+                }\n+            }\n+            return updated;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/AbstractButton\/bug4147740.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 4246045\n+   @summary AbstractButton fires accessible PropertyChangeEvent incorrectly\n+   @key headful\n+   @run main bug4246045\n+*\/\n+\n+import java.awt.Container;\n+import java.awt.Robot;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+import javax.swing.BoxLayout;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JTextField;\n+import javax.swing.JToggleButton;\n+import javax.swing.SwingUtilities;\n+import javax.accessibility.AccessibleContext;\n+import javax.accessibility.AccessibleState;\n+\n+public class bug4246045 {\n+\n+    class Listener implements PropertyChangeListener {\n+        boolean state = false; \/\/ focused or not\n+\n+        public void propertyChange(PropertyChangeEvent e) {\n+            if (e.getPropertyName().equals(\n+                  AccessibleContext.ACCESSIBLE_STATE_PROPERTY)) {\n+\n+                boolean reported = false;\n+                if (e.getNewValue() == null) {\n+                    reported = false;\n+                } else if (e.getNewValue().equals(AccessibleState.FOCUSED)) {\n+                    reported = true;\n+                } else {\n+                    throw new RuntimeException(\"Unknown value of ACCESSIBLE_STATE_PROPERTY\");\n+                }\n+\n+                if (!state == reported) {\n+                    state = reported;\n+                } else {\n+                    throw new RuntimeException(\"Bad value of ACCESSIBLE_STATE_PROPERTY\");\n+                }\n+            }\n+        }\n+    }\n+\n+    static JFrame frame;\n+    static JButton btn;\n+    static JToggleButton tb;\n+    static JTextField dummy;\n+\n+    public void init() {\n+        btn = new JButton(\"JButton\");\n+        tb = new JToggleButton(\"JToggleButton\");\n+        dummy = new JTextField();\n+        Container pane = frame.getContentPane();\n+        pane.setLayout(new BoxLayout(pane, BoxLayout.Y_AXIS));\n+        pane.add(btn);\n+        pane.add(tb);\n+        pane.add(dummy);\n+\n+        Listener bl = new Listener();\n+        btn.getAccessibleContext().addPropertyChangeListener(bl);\n+        Listener tbl = new Listener();\n+        tb.getAccessibleContext().addPropertyChangeListener(tbl);\n+    }\n+\n+    public void start() {\n+        btn.requestFocus();\n+        btn.transferFocus();\n+        tb.transferFocus();\n+    }\n+\n+    public static void main(String[] argv) throws Exception {\n+        Robot robot = new Robot();\n+        bug4246045 bug = new bug4246045();\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame(\"4246045 Test\");\n+                bug.init();\n+                frame.setSize(200, 200);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+                bug.start();\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/AbstractButton\/bug4246045.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 4419219\n+   @summary Tests that registerKeyboardAction(null, ...) doen't throw NPE.\n+   @key headful\n+   @run main bug4419219\n+*\/\n+\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import javax.swing.KeyStroke;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JTable;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4419219 {\n+    static volatile boolean passed = true;\n+    static JFrame frame;\n+    static Robot robo;\n+\n+    public static void main(String[] args) throws Exception {\n+        robo = new Robot();\n+        robo.setAutoWaitForIdle(true);\n+        robo.setAutoDelay(100);\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                frame = new JFrame(\"bug4419219 Table\");\n+\n+                final String[] names = {\"col\"};\n+                final Object[][] data = {{\"A\"}, {\"B\"}, {\"C\"}, {\"D\"}, {\"E\"}};\n+\n+                JTable tableView = (JTable)new TestTable(data, names);\n+                \/\/ unregister ctrl-A\n+                tableView.registerKeyboardAction(null,\n+                     KeyStroke.getKeyStroke(KeyEvent.VK_A, ActionEvent.CTRL_MASK),\n+                     JComponent.WHEN_FOCUSED);\n+\n+                frame.getContentPane().add(tableView);\n+                frame.setSize(250,250);\n+                frame.setLocationRelativeTo(null);\n+                frame.addWindowListener(new TestStateListener());\n+                frame.setVisible(true);\n+            } finally {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+           }\n+        });\n+        if (!passed) {\n+            throw new RuntimeException(\"Test failed.\");\n+        }\n+    }\n+\n+    static class TestStateListener extends WindowAdapter {\n+        public void windowOpened(WindowEvent ev) {\n+            robo.delay(1000);\n+            robo.mouseMove(100,100);\n+            robo.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robo.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robo.keyPress(KeyEvent.VK_CONTROL);\n+            robo.keyPress(KeyEvent.VK_A);\n+            robo.keyRelease(KeyEvent.VK_A);\n+            robo.keyRelease(KeyEvent.VK_CONTROL);\n+        }\n+    }\n+\n+    static class TestTable extends JTable {\n+\n+        public TestTable(Object[][] data, String[] names) {\n+            super(data, names);\n+        }\n+\n+        protected  boolean processKeyBinding(KeyStroke ks,\n+                                             KeyEvent e,\n+                                             int condition,\n+                                             boolean pressed) {\n+            try {\n+                return super.processKeyBinding(ks, e, condition, pressed);\n+            } catch (NullPointerException ex) {\n+                passed = false;\n+            }\n+            return false;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JComponent\/bug4419219.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4962718\n+ * @summary Propertychange Listener not fired by inheritPopupMenu and Popupmenu properties\n+ * @key headful\n+ * @run main bug4962718\n+*\/\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPopupMenu;\n+import javax.swing.SwingUtilities;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+\n+public class bug4962718 {\n+    static volatile boolean popupWasSet = false;\n+    static volatile boolean inheritWasSet = false;\n+    static JFrame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame(\"bug4962718\");\n+                JButton button = new JButton(\"For test\");\n+                JPopupMenu popup = new JPopupMenu();\n+\n+                button.addPropertyChangeListener(new PropertyChangeListener() {\n+                    public void propertyChange(PropertyChangeEvent evt) {\n+                        if (evt.getPropertyName().equals(\"inheritsPopupMenu\")) {\n+                            inheritWasSet = true;\n+                        } else if( evt.getPropertyName().\n+                                  equals(\"componentPopupMenu\")) {\n+                            popupWasSet = true;\n+                        }\n+                    }\n+                });\n+\n+                frame.add(button);\n+                button.setInheritsPopupMenu(true);\n+                button.setInheritsPopupMenu(false);\n+                button.setComponentPopupMenu(popup);\n+                button.setComponentPopupMenu(null);\n+                frame.pack();\n+                frame.setVisible(true);\n+            });\n+\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {}\n+\n+            if (!inheritWasSet) {\n+                throw new RuntimeException(\"Test failed, inheritsPopupMenu \" +\n+                                   \" property change listener was not called\");\n+            }\n+            if (!popupWasSet) {\n+                throw new RuntimeException(\"Test failed, componentPopupMenu \" +\n+                                    \" property change listener was not called\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/javax\/swing\/JComponent\/bug4962718.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"}]}