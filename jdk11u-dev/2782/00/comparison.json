{"files":[{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 5100200\n+  @summary IAE in X11 text field peer code\n+  @key headful\n+*\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+\n+public class CorrectSetCaretPositionDuringInitPeerTest\n+{\n+    static TextField tf;\n+    static Frame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        try{\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new Frame(\"Caret Position test\");\n+                tf = new TextField(\"Very very very long string\");\n+                tf.setSelectionStart(10);\n+                tf.setText(\"Short\"); \/\/ now TextField.length() less than 10\n+                frame.add(tf);\n+\n+                frame.pack();\n+                frame.setVisible(true);\n+            });\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/CorrectSetCaretPositionDuringInitPeerTest.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 5100950 8199723\n+  @summary textarea.getSelectedText() returns the de-selected text, on XToolkit\n+  @key headful\n+  @requires (os.family == \"mac\") | (os.family == \"windows\")\n+*\/\n+\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.TextField;\n+\n+public class DeselectionDuringDoSelectionNonVisibleTest {\n+    static TextField tf1;\n+    static TextField tf2;\n+    static Frame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new Frame(\"Deselection test\");\n+                tf1 = new TextField(\"Text Field 1\");\n+                tf2 = new TextField(\"Text Field 2\");\n+                frame.add(tf1);\n+                frame.add(tf2);\n+                frame.setLayout(new FlowLayout());\n+                frame.setSize(200, 200);\n+                frame.setLocationRelativeTo(null);\n+                frame.pack();\n+                frame.setVisible(true);\n+            });\n+\n+            boolean isWin = System.getProperty(\"os.name\").startsWith(\"Win\");\n+            System.out.println(\"is Windows OS? \" + isWin);\n+\n+            Thread.sleep(500);\n+            tf1.requestFocus();\n+\n+            Thread.sleep(500);\n+            if (KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() != tf1) {\n+                throw new RuntimeException(\"Test failed (TextField1 isn't focus owner).\");\n+            }\n+            tf1.selectAll();\n+            Thread.sleep(500);\n+\n+            tf2.requestFocus();\n+            Thread.sleep(500);\n+\n+            if (KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner() != tf2) {\n+                throw new RuntimeException(\"Test failed (TextField2 isn't focus owner).\");\n+            }\n+            tf2.selectAll();\n+            Thread.sleep(500);\n+\n+            String selectedText = tf1.getSelectedText();\n+            String text = tf1.getText();\n+\n+            System.out.println(\"tf1.getText()=\" + text);\n+            System.out.println(\"tf1.getSelectedText()=\" + selectedText);\n+\n+            \/\/ Motif behaviour: After the selection of the second text, the first selected\n+            \/\/ text is unselected\n+            if (!selectedText.equals(\"\") && !isWin) {\n+                throw new RuntimeException(\"Test failed (TextField1 isn't deselected).\");\n+            }\n+\n+            \/\/ Windows behaviour: After the selection of the second text, the first selected\n+            \/\/ text is only not highlighted\n+            if (!selectedText.equals(text) && isWin) {\n+                throw new RuntimeException(\"Test failed (TextField1 is deselected).\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/DeselectionDuringDoSelectionNonVisibleTest.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+  @test\n+  @bug 4995931\n+  @summary java.awt.TextComponent caret position should be within the text bounds\n+  @key headful\n+*\/\n+\n+import java.awt.EventQueue;\n+import java.awt.TextField;\n+\n+public class GetCaretPosOutOfBoundsTest {\n+    static TextField tf;\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            tf = new TextField(\"1234567890\");\n+            tf.setCaretPosition(100);\n+            int pos = tf.getCaretPosition();\n+            if (pos > 10) {\n+                throw new RuntimeException(\"Wrong caret position:\" + pos + \" instead of 10\");\n+            }\n+            tf.setText(\"12345\");\n+            if (tf.getCaretPosition() > 5) {\n+                throw new RuntimeException(\"Wrong caret position:\" + pos + \" instead of 5\");\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/GetCaretPosOutOfBoundsTest.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4185654\n+  @summary tests that the text insertion caret is positioned before the first character\n+  @key headful\n+*\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.TextArea;\n+\n+public class InitialInsertionCaretPositionTest {\n+    static TextField textField;\n+    static TextArea textArea;\n+    static String failureMessage = \"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        EventQueue.invokeAndWait(() -> {\n+            textArea = new TextArea(\"abcdefghij\\nabcdefghij\");\n+            textField = new TextField(\"abcdefghij\");\n+\n+            boolean textFieldPassed = (textField.getCaretPosition() == 0);\n+            boolean textAreaPassed = (textArea.getCaretPosition() == 0);\n+\n+            if (!textFieldPassed) {\n+                failureMessage += \"   The text insertion caret for the text field is not\\n\";\n+                failureMessage += \"   initially set before the first character.\\n\";\n+            }\n+            if (!textAreaPassed) {\n+                failureMessage += \"   The text insertion caret for the text area is not\\n\";\n+                failureMessage += \"   initially set before the first character.\\n\";\n+            }\n+            if (textAreaPassed && textFieldPassed) {\n+                System.out.println(\"The test passed.\");\n+            } else {\n+                System.out.println(\"The test failed:\");\n+                System.out.println(failureMessage);\n+            }\n+            if (!textAreaPassed || !textFieldPassed) {\n+                throw new RuntimeException(failureMessage);\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/InitialInsertionCaretPositionTest.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+  @test\n+  @bug 4426750\n+  @requires (os.family == \"linux\")\n+  @key headful\n+  @summary tests that middle mouse button click pastes primary selection\n+*\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.TextArea;\n+import java.awt.TextComponent;\n+import java.awt.TextField;\n+\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.event.InputEvent;\n+import java.awt.Toolkit;\n+\n+public class MiddleMouseClickPasteTest {\n+    static final int FRAME_ACTIVATION_TIMEOUT  = 1000;\n+    static final int SELECTION_PASTE_TIMEOUT   = 1000;\n+    static final int CLICK_INTERVAL            = 50;\n+    static final String TEST_TEXT              = \"TEST TEXT\";\n+    static Frame frame;\n+    static TextField tf;\n+    static TextArea ta;\n+    static final Clipboard systemSelection = Toolkit.getDefaultToolkit().getSystemSelection();\n+\n+\n+    public static void main(String[] args) throws Exception {\n+        if (systemSelection != null) {\n+            try {\n+                EventQueue.invokeAndWait(MiddleMouseClickPasteTest::createAndShowGui);\n+                Thread.sleep(FRAME_ACTIVATION_TIMEOUT);\n+\n+                checkPaste(tf);\n+                checkPaste(ta);\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            } finally {\n+                EventQueue.invokeAndWait(()-> {\n+                    if (frame != null) {\n+                        frame.dispose();\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    public static void createAndShowGui() {\n+        frame = new Frame();\n+        tf = new TextField();\n+        ta = new TextArea();\n+\n+        frame.setLayout(new BorderLayout());\n+        frame.add(tf, BorderLayout.NORTH);\n+        frame.add(ta, BorderLayout.CENTER);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    public static void checkPaste(TextComponent textComponent) throws Exception {\n+\n+        final Point sourcePoint = textComponent.getLocationOnScreen();\n+        final Dimension d = textComponent.getSize();\n+        sourcePoint.translate(d.width \/ 2, d.height \/ 2);\n+        final Robot robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(CLICK_INTERVAL);\n+\n+        textComponent.setText(\"\");\n+        systemSelection.setContents(new StringSelection(TEST_TEXT), null);\n+\n+        robot.mouseMove(sourcePoint.x, sourcePoint.y);\n+        robot.mousePress(InputEvent.BUTTON2_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON2_DOWN_MASK);\n+        robot.delay(SELECTION_PASTE_TIMEOUT);\n+\n+        if (!TEST_TEXT.equals(textComponent.getText())) {\n+            throw new RuntimeException(\"Primary selection not pasted\" +\n+                    \" into: \" + textComponent);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/MiddleMouseClickPasteTest.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"}]}