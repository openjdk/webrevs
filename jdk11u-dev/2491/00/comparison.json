{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -227,1 +227,1 @@\n-        testMismatched(c, setDefaultAction, false);\n+        testMismatched(c, setDefaultAction, false, true);\n@@ -230,3 +230,3 @@\n-    static void testMismatched(Callable<?> c, Runnable setDefaultAction, boolean objectArray) throws Exception {\n-        if (Compiler.isGraalEnabled() && !objectArray) {\n-            \/\/ Graal will constant fold mismatched reads from primitive stable arrays\n+    static void testMismatched(Callable<?> c, Runnable setDefaultAction, boolean objectArray, boolean aligned) throws Exception {\n+        if (Compiler.isGraalEnabled() && !objectArray && aligned) {\n+            \/\/ Graal will constant fold mismatched reads from primitive stable arrays, except unaligned ones\n@@ -322,2 +322,2 @@\n-        testMismatched(Test::testL_J, Test::changeL, true); \/\/ long & double are always as large as an OOP\n-        testMismatched(Test::testL_D, Test::changeL, true);\n+        testMismatched(Test::testL_J, Test::changeL, true, true); \/\/ long & double are always as large as an OOP\n+        testMismatched(Test::testL_D, Test::changeL, true, true);\n@@ -327,4 +327,4 @@\n-        testMismatched(Test::testS_U, Test::changeS);\n-        testMismatched(Test::testC_U, Test::changeC);\n-        testMismatched(Test::testI_U, Test::changeI);\n-        testMismatched(Test::testJ_U, Test::changeJ);\n+        testMismatched(Test::testS_U, Test::changeS, false, false);\n+        testMismatched(Test::testC_U, Test::changeC, false, false);\n+        testMismatched(Test::testI_U, Test::changeI, false, false);\n+        testMismatched(Test::testJ_U, Test::changeJ, true, false);\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/UnsafeGetStableArrayElement.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"}]}