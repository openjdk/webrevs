{"files":[{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 4028130\n+ * @summary Test dynamically adding and removing a menu bar\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual AddRemoveMenuBarTest_1\n+ *\/\n+\n+public class AddRemoveMenuBarTest_1 {\n+\n+    private static final String INSTRUCTIONS = \"An initially empty frame should appear.\\n\\n\" +\n+        \"Click anywhere in the frame to add a menu bar at the top of the frame.\\n\\n\" +\n+        \"Click again to replace the menu bar with another menu bar.\\n\\n\" +\n+        \"Each menu bar has one (empty) menu, labelled with the\\n\" +\n+        \"number of the menu bar appearing.\\n\\n\" +\n+        \"After a menubar is added, the frame should not be resized nor repositioned\\n\" +\n+        \"on the screen;\\n\\n\" +\n+        \"it should have the same size and position.\\n\\n\" +\n+        \"Upon test completion, click Pass or Fail appropriately.\\n\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"AddRemoveMenuBarTest_1 Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(5)\n+                .rows(18)\n+                .columns(45)\n+                .build();\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            AddRemoveMenuBar_1 frame = new AddRemoveMenuBar_1();\n+\n+            PassFailJFrame.addTestWindow(frame);\n+            PassFailJFrame.positionTestWindow(frame,\n+                    PassFailJFrame.Position.HORIZONTAL);\n+\n+            frame.setVisible(true);\n+        });\n+\n+        passFailJFrame.awaitAndCheck();\n+    }\n+}\n+\n+class AddRemoveMenuBar_1 extends Frame {\n+    int menuCount;\n+\n+    AddRemoveMenuBar_1() {\n+        super(\"AddRemoveMenuBar_1\");\n+        setSize(200, 200);\n+        menuCount = 0;\n+\n+        addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mouseClicked(MouseEvent e) {\n+                setMenuBar();\n+            }\n+        });\n+    }\n+\n+    void setMenuBar() {\n+        MenuBar bar = new MenuBar();\n+        bar.add(new Menu(Integer.toString(menuCount++)));\n+        setMenuBar(bar);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/MenuBar\/AddRemoveMenuBarTests\/AddRemoveMenuBarTest_1.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 4028130\n+ * @key headful\n+ * @summary Test dynamically adding and removing a menu bar\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual AddRemoveMenuBarTest_2\n+ *\/\n+\n+public class AddRemoveMenuBarTest_2 {\n+    private static final String INSTRUCTIONS = \"A frame with a menu bar appears.\\n\\n\" +\n+            \"Click anywhere in the frame to replace the menu bar with\\n\" +\n+            \"another one.\\n\\n\" +\n+            \"Each menu bar has one (empty) menu, 'foo'.\\n\\n\" +\n+            \"After the menu bar replacement, the containing frame\\n\" +\n+            \"should not be resized nor repositioned on the screen.\\n\\n\" +\n+            \"Upon test completion, click Pass or Fail appropriately.\\n\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"AddRemoveMenuBarTest_2 Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(5)\n+                .rows(15)\n+                .columns(45)\n+                .build();\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            AddRemoveMenuBar_2 frame = new AddRemoveMenuBar_2();\n+\n+            PassFailJFrame.addTestWindow(frame);\n+            PassFailJFrame.positionTestWindow(frame,\n+                    PassFailJFrame.Position.HORIZONTAL);\n+\n+            frame.setVisible(true);\n+        });\n+\n+        passFailJFrame.awaitAndCheck();\n+    }\n+}\n+\n+class AddRemoveMenuBar_2 extends Frame {\n+    AddRemoveMenuBar_2() {\n+        super(\"AddRemoveMenuBar_2\");\n+        setSize(200, 200);\n+        setMenuBar();\n+        addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mouseClicked(MouseEvent e) {\n+                setMenuBar();\n+            }\n+        });\n+    }\n+\n+    int count = 0;\n+\n+    void setMenuBar() {\n+        MenuBar bar = new MenuBar();\n+        bar.add(new Menu(\"foo \" + count++));\n+        super.setMenuBar(bar);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/MenuBar\/AddRemoveMenuBarTests\/AddRemoveMenuBarTest_2.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"},{"patch":"@@ -0,0 +1,186 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Checkbox;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.Panel;\n+import java.awt.Rectangle;\n+import java.awt.TextField;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ComponentAdapter;\n+import java.awt.event.ComponentEvent;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 4017504\n+ * @summary Test dynamically adding and removing a menu bar\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual AddRemoveMenuBarTest_3\n+ *\/\n+\n+public class AddRemoveMenuBarTest_3  {\n+    private static final String INSTRUCTIONS = \"A frame at (100,100) contains two (2) rows of three (3) text\\n\" +\n+            \"fields each, and under this, a checkbox labelled 'Use menubar'.\\n\\n\" +\n+            \"The first row's text fields pertain to the x coordinates and\\n\" +\n+            \"the second row's text fields pertain to the y coordinates.\\n\\n\" +\n+            \"The first column, 'request', is an input only field for frame\\n\" +\n+            \"location. (press enter to apply).\\n\\n\" +\n+            \"The second column, 'reported', is an output only\\n\" +\n+            \"field reporting frame location.\\n\\n\" +\n+            \"The third column, 'inset', is an output only field reporting\\n\" +\n+            \"the frame's inset values.\\n\\n\" +\n+            \"You can click the 'Use menubar' checkbox to alternately add\\n\" +\n+            \"and remove a menu bar containing an (empty) 'Help' menu.\\n\\n\" +\n+            \"After a menubar is added or removed, the frame should not\\n\" +\n+            \"have been resized nor repositioned on the screen and the\\n\" +\n+            \"y inset should accurately reflect the presence or absence\\n\" +\n+            \"of the menubar within the inset.\\n\\n\" +\n+            \"The insets always include the window manager's title and border\\n\" +\n+            \"decorations, if any.\\n\\n\" +\n+            \"Upon test completion, click Pass or Fail appropriately.\\n\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"AddRemoveMenuBarTest_3 Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(5)\n+                .rows(30)\n+                .columns(38)\n+                .build();\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            AddRemoveMenuBar_3 frame = new AddRemoveMenuBar_3();\n+\n+            PassFailJFrame.addTestWindow(frame);\n+            PassFailJFrame.positionTestWindow(null,\n+                    PassFailJFrame.Position.HORIZONTAL);\n+\n+            frame.setVisible(true);\n+        });\n+\n+        passFailJFrame.awaitAndCheck();\n+    }\n+}\n+\n+class AddRemoveMenuBar_3 extends Frame {\n+    TextField xfield;\n+    TextField yfield;\n+\n+    TextField xfield_out;\n+    TextField yfield_out;\n+    TextField xinset_out;\n+    TextField yinset_out;\n+\n+    Checkbox menu_checkbox;\n+    MenuBar menubar;\n+\n+    public AddRemoveMenuBar_3() {\n+        super(\"AddRemoveMenuBar_3\");\n+\n+        menubar = new MenuBar();\n+        menubar.setHelpMenu(new Menu(\"Help\"));\n+\n+        setLayout(new BorderLayout());\n+        Panel p = new Panel();\n+        add(\"Center\", p);\n+        p.setLayout(new GridLayout(3, 3));\n+\n+        menu_checkbox = new Checkbox(\"Use menubar\");\n+        add(\"South\", menu_checkbox);\n+\n+        xfield = new TextField();\n+        yfield = new TextField();\n+        xfield_out = new TextField();\n+        xfield_out.setEditable(false);\n+        xfield_out.setFocusable(false);\n+        yfield_out = new TextField();\n+        yfield_out.setEditable(false);\n+        yfield_out.setFocusable(false);\n+\n+        xinset_out = new TextField();\n+        xinset_out.setEditable(false);\n+        xinset_out.setFocusable(false);\n+        yinset_out = new TextField();\n+        yinset_out.setEditable(false);\n+        yinset_out.setFocusable(false);\n+\n+        p.add(new Label(\"request\"));\n+        p.add(new Label(\"reported\"));\n+        p.add(new Label(\"inset\"));\n+\n+        p.add(xfield);\n+        p.add(xfield_out);\n+        p.add(xinset_out);\n+\n+        p.add(yfield);\n+        p.add(yfield_out);\n+        p.add(yinset_out);\n+\n+        setSize(200, 200);\n+        setLocation(100, 100);\n+\n+        addComponentListener(new ComponentAdapter() {\n+            @Override\n+            public void componentMoved(ComponentEvent e) {\n+                xfield_out.setText(Integer.toString(getLocation().x));\n+                yfield_out.setText(Integer.toString(getLocation().y));\n+\n+                xinset_out.setText(Integer.toString(getInsets().left));\n+                yinset_out.setText(Integer.toString(getInsets().top));\n+            }\n+        });\n+\n+        ActionListener setLocationListener = e -> {\n+            Rectangle r = getBounds();\n+            try {\n+                r.x = Integer.parseInt(xfield.getText());\n+                r.y = Integer.parseInt(yfield.getText());\n+            } catch (java.lang.NumberFormatException ignored) {\n+            }\n+\n+            setLocation(r.x, r.y);\n+        };\n+\n+        xfield.addActionListener(setLocationListener);\n+        yfield.addActionListener(setLocationListener);\n+\n+        menu_checkbox.addItemListener(e -> {\n+            if (menu_checkbox.getState()) {\n+                setMenuBar(menubar);\n+            } else {\n+                setMenuBar(null);\n+            }\n+\n+            validate();\n+            xinset_out.setText(Integer.toString(getInsets().left));\n+            yinset_out.setText(Integer.toString(getInsets().top));\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/MenuBar\/AddRemoveMenuBarTests\/AddRemoveMenuBarTest_3.java","additions":186,"deletions":0,"binary":false,"changes":186,"status":"added"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 4071086\n+ * @key headful\n+ * @summary Test dynamically adding and removing a menu bar\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual AddRemoveMenuBarTest_4\n+ *\/\n+\n+public class AddRemoveMenuBarTest_4 {\n+\n+    private static final String INSTRUCTIONS = \"There is a frame with a menubar and a single button.\\n\\n\" +\n+            \"The button is labelled 'Add new MenuBar'.\\n\\n\" +\n+            \"If you click the button, the menubar is replaced with another menubar.\\n\" +\n+            \"This can be done repeatedly.\\n\\n\" +\n+            \"The <n>-th menubar contains one menu, 'TestMenu<n>',\\n\" +\n+            \"with two items, 'one <n>' and 'two <n>'.\\n\\n\" +\n+            \"Click again to replace the menu bar with another menu bar.\\n\\n\" +\n+            \"After a menubar has been replaced with another menubar,\\n\" +\n+            \"the frame should not be resized nor repositioned on the screen.\\n\\n\" +\n+            \"Upon test completion, click Pass or Fail appropriately.\\n\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame.Builder()\n+                .title(\"AddRemoveMenuBarTest_4 Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(5)\n+                .rows(18)\n+                .columns(45)\n+                .build();\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            AddRemoveMenuBar_4 frame = new AddRemoveMenuBar_4();\n+\n+            PassFailJFrame.addTestWindow(frame);\n+            PassFailJFrame.positionTestWindow(frame,\n+                    PassFailJFrame.Position.HORIZONTAL);\n+\n+            frame.setVisible(true);\n+        });\n+\n+        passFailJFrame.awaitAndCheck();\n+    }\n+}\n+\n+class AddRemoveMenuBar_4 extends Frame {\n+    int count = 1;\n+    MenuBar mb = null;\n+\n+    AddRemoveMenuBar_4() {\n+        super(\"AddRemoveMenuBar_4\");\n+        setLayout(new FlowLayout());\n+\n+        Button b = new Button(\"Add new MenuBar\");\n+        b.addActionListener((e) -> createMenuBar());\n+        add(b);\n+\n+        createMenuBar();\n+\n+        setSize(300, 300);\n+    }\n+\n+    void createMenuBar() {\n+        if (mb != null) {\n+            remove(mb);\n+        }\n+\n+        mb = new MenuBar();\n+        Menu m = new Menu(\"TestMenu\" + count);\n+        m.add(new MenuItem(\"one \" + count));\n+        m.add(new MenuItem(\"two \" + count));\n+        count++;\n+        mb.add(m);\n+        setMenuBar(mb);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/MenuBar\/AddRemoveMenuBarTests\/AddRemoveMenuBarTest_4.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,0 +66,1 @@\n+import javax.swing.JSplitPane;\n@@ -117,0 +118,7 @@\n+ * For simple test UI, use {@code Builder.splitUI}, or explicitly\n+ * {@code Builder.splitUIRight} or {@code Builder.splitUIBottom} with\n+ * a {@code PanelCreator}. The framework will call the provided\n+ * {@code createUIPanel} to create the component with test UI and\n+ * will place it as the right or bottom component in a split pane\n+ * along with instruction UI.\n+ * <p>\n@@ -169,0 +177,8 @@\n+    \/**\n+     * List of windows or frames managed by the {@code PassFailJFrame}\n+     * framework. These windows are automatically disposed of when the\n+     * test is finished.\n+     * <p>\n+     * <b>Note:<\/b> access to this field has to be synchronized by\n+     * {@code PassFailJFrame.class}.\n+     *\/\n@@ -279,4 +295,27 @@\n-    private PassFailJFrame(Builder builder) throws InterruptedException,\n-            InvocationTargetException {\n-        this(builder.title, builder.instructions, builder.testTimeOut,\n-             builder.rows, builder.columns, builder.screenCapture);\n+    \/**\n+     * Configures {@code PassFailJFrame} using the builder.\n+     * It creates test UI specified using {@code testUI} or {@code splitUI}\n+     * methods on EDT.\n+     * @param builder the builder with the parameters\n+     * @throws InterruptedException if the current thread is interrupted while\n+     *              waiting for EDT to complete a task\n+     * @throws InvocationTargetException if an exception is thrown while\n+     *              running a task on EDT\n+     *\/\n+    private PassFailJFrame(final Builder builder)\n+            throws InterruptedException, InvocationTargetException {\n+        invokeOnEDT(() -> createUI(builder));\n+\n+        if (!builder.splitUI && builder.panelCreator != null) {\n+            JComponent content = builder.panelCreator.createUIPanel();\n+            String title = content.getName();\n+            if (title == null) {\n+                title = \"Test UI\";\n+            }\n+            JDialog dialog = new JDialog(frame, title, false);\n+            dialog.addWindowListener(windowClosingHandler);\n+            dialog.add(content, BorderLayout.CENTER);\n+            dialog.pack();\n+            addTestWindow(dialog);\n+            positionTestWindow(dialog, builder.position);\n+        }\n@@ -302,5 +341,4 @@\n-                invokeOnEDT(() -> {\n-                    builder.positionWindows\n-                           .positionTestWindows(unmodifiableList(builder.testWindows),\n-                                                builder.instructionUIHandler);\n-                });\n+                invokeOnEDT(() ->\n+                        builder.positionWindows\n+                               .positionTestWindows(unmodifiableList(builder.testWindows),\n+                                                    builder.instructionUIHandler));\n@@ -344,0 +382,45 @@\n+        frame.addWindowListener(windowClosingHandler);\n+\n+        frame.add(createInstructionUIPanel(instructions,\n+                                           testTimeOut,\n+                                           rows, columns,\n+                                           enableScreenCapture),\n+                  BorderLayout.CENTER);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        addTestWindow(frame);\n+    }\n+\n+    private static void createUI(Builder builder) {\n+        frame = new JFrame(builder.title);\n+        frame.setLayout(new BorderLayout());\n+\n+        frame.addWindowListener(windowClosingHandler);\n+\n+        JComponent instructionUI =\n+                createInstructionUIPanel(builder.instructions,\n+                                         builder.testTimeOut,\n+                                         builder.rows, builder.columns,\n+                                         builder.screenCapture);\n+\n+        if (builder.splitUI) {\n+            JSplitPane splitPane = new JSplitPane(\n+                    builder.splitUIOrientation,\n+                    instructionUI,\n+                    builder.panelCreator.createUIPanel());\n+            frame.add(splitPane, BorderLayout.CENTER);\n+        } else {\n+            frame.add(instructionUI, BorderLayout.CENTER);\n+        }\n+\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        addTestWindow(frame);\n+    }\n+\n+    private static JComponent createInstructionUIPanel(String instructions,\n+                                                       long testTimeOut,\n+                                                       int rows, int columns,\n+                                                       boolean enableScreenCapture) {\n+        JPanel main = new JPanel(new BorderLayout());\n+\n@@ -346,1 +429,1 @@\n-        frame.add(testTimeoutLabel, BorderLayout.NORTH);\n+        main.add(testTimeoutLabel, BorderLayout.NORTH);\n@@ -353,1 +436,1 @@\n-        frame.add(new JScrollPane(text), BorderLayout.CENTER);\n+        main.add(new JScrollPane(text), BorderLayout.CENTER);\n@@ -375,1 +458,2 @@\n-        frame.addWindowListener(windowClosingHandler);\n+        main.add(buttonsPanel, BorderLayout.SOUTH);\n+        main.setMinimumSize(main.getPreferredSize());\n@@ -377,4 +461,1 @@\n-        frame.add(buttonsPanel, BorderLayout.SOUTH);\n-        frame.pack();\n-        frame.setLocationRelativeTo(null);\n-        addTestWindow(frame);\n+        return main;\n@@ -436,0 +517,16 @@\n+    \/**\n+     * Creates a component (panel) with test UI\n+     * to be hosted in a split pane or a frame.\n+     *\/\n+    @FunctionalInterface\n+    public interface PanelCreator {\n+        \/**\n+         * Creates a component which hosts test UI. This component\n+         * is placed into a split pane or into a frame to display the UI.\n+         * <p>\n+         * This method is called by the framework on the EDT.\n+         * @return a component (panel) with test UI\n+         *\/\n+        JComponent createUIPanel();\n+    }\n+\n@@ -637,4 +734,6 @@\n-                windowList.stream()\n-                          .filter(Window::isShowing)\n-                          .map(Window::getBounds)\n-                          .forEach(PassFailJFrame::captureScreen);\n+                synchronized (PassFailJFrame.class) {\n+                    windowList.stream()\n+                              .filter(Window::isShowing)\n+                              .map(Window::getBounds)\n+                              .forEach(PassFailJFrame::captureScreen);\n+                }\n@@ -953,0 +1052,3 @@\n+        private PanelCreator panelCreator;\n+        private boolean splitUI;\n+        private int splitUIOrientation;\n@@ -1093,2 +1195,96 @@\n-        public Builder positionTestUI(PositionWindows positionWindows) {\n-            this.positionWindows = positionWindows;\n+        \/**\n+         * Adds a {@code PanelCreator} which the framework will use\n+         * to create a component and place it into a dialog.\n+         *\n+         * @param panelCreator a {@code PanelCreator} to create a component\n+         *                     with test UI\n+         * @return this builder\n+         * @throws IllegalStateException if split UI was enabled using\n+         *              a {@code splitUI} method\n+         *\/\n+        public Builder testUI(PanelCreator panelCreator) {\n+            if (splitUI) {\n+                throw new IllegalStateException(\"Can't combine splitUI and \"\n+                                                + \"testUI with panelCreator\");\n+            }\n+            this.panelCreator = panelCreator;\n+            return this;\n+        }\n+\n+        \/**\n+         * Adds a {@code PanelCreator} which the framework will use\n+         * to create a component with test UI and display it in a split pane.\n+         * <p>\n+         * By default, horizontal orientation is used,\n+         * and test UI is displayed to the right of the instruction UI.\n+         *\n+         * @param panelCreator a {@code PanelCreator} to create a component\n+         *                     with test UI\n+         * @return this builder\n+         *\n+         * @throws IllegalStateException if a {@code PanelCreator} is\n+         *              already set\n+         * @throws IllegalArgumentException if {panelCreator} is {@code null}\n+         *\/\n+        public Builder splitUI(PanelCreator panelCreator) {\n+            return splitUIRight(panelCreator);\n+        }\n+\n+        \/**\n+         * Adds a {@code PanelCreator} which the framework will use\n+         * to create a component with test UI and display it\n+         * to the right of instruction UI.\n+         *\n+         * @param panelCreator a {@code PanelCreator} to create a component\n+         *                     with test UI\n+         * @return this builder\n+         *\n+         * @throws IllegalStateException if a {@code PanelCreator} is\n+         *              already set\n+         * @throws IllegalArgumentException if {panelCreator} is {@code null}\n+         *\/\n+        public Builder splitUIRight(PanelCreator panelCreator) {\n+            return splitUI(panelCreator, JSplitPane.HORIZONTAL_SPLIT);\n+        }\n+\n+        \/**\n+         * Adds a {@code PanelCreator} which the framework will use\n+         * to create a component with test UI and display it\n+         * in the bottom of instruction UI.\n+         *\n+         * @param panelCreator a {@code PanelCreator} to create a component\n+         *                     with test UI\n+         * @return this builder\n+         *\n+         * @throws IllegalStateException if a {@code PanelCreator} is\n+         *              already set\n+         * @throws IllegalArgumentException if {panelCreator} is {@code null}\n+         *\/\n+        public Builder splitUIBottom(PanelCreator panelCreator) {\n+            return splitUI(panelCreator, JSplitPane.VERTICAL_SPLIT);\n+        }\n+\n+        \/**\n+         * Enables split UI and stores the orientation of the split pane.\n+         *\n+         * @param panelCreator a {@code PanelCreator} to create a component\n+         *                     with test UI\n+         * @param splitUIOrientation orientation of the split pane\n+         * @return this builder\n+         *\n+         * @throws IllegalStateException if a {@code PanelCreator} is\n+         *              already set\n+         * @throws IllegalArgumentException if {panelCreator} is {@code null}\n+         *\/\n+        private Builder splitUI(PanelCreator panelCreator,\n+                                int splitUIOrientation) {\n+            if (panelCreator == null) {\n+                throw new IllegalArgumentException(\"A PanelCreator cannot be null\");\n+            }\n+            if (this.panelCreator != null) {\n+                throw new IllegalStateException(\"A PanelCreator is already set\");\n+            }\n+\n+            splitUI = true;\n+            this.splitUIOrientation = splitUIOrientation;\n+            this.panelCreator = panelCreator;\n@@ -1132,1 +1328,2 @@\n-                && (testWindows != null || windowListCreator != null)) {\n+                && (testWindows != null || windowListCreator != null\n+                    || (!splitUI && panelCreator != null))) {\n@@ -1137,0 +1334,8 @@\n+            if (panelCreator != null) {\n+                if (splitUI && (testWindows != null || windowListCreator != null)) {\n+                    \/\/ TODO Is it required? We can support both\n+                    throw new IllegalStateException(\"Split UI is not allowed \"\n+                                                    + \"with additional windows\");\n+                }\n+            }\n+\n@@ -1140,1 +1345,1 @@\n-                            + \"provide an a list of windows to the builder\");\n+                            + \"provide a list of windows to the builder\");\n@@ -1179,0 +1384,5 @@\n+    \/**\n+     * Creates a builder for configuring {@code PassFailJFrame}.\n+     *\n+     * @return the builder for configuring {@code PassFailJFrame}\n+     *\/\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":235,"deletions":25,"binary":false,"changes":260,"status":"modified"}]}