{"files":[{"patch":"@@ -0,0 +1,253 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceDragEvent;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetContext;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+\n+\/*\n+  @test\n+  @bug 4388802\n+  @summary tests that dragEnter() is called on a DropTargetListener if its drop\n+           target is associated with a component which initiated the drag\n+  @key headful\n+  @run main MissedDragEnterTest\n+*\/\n+\n+public class MissedDragEnterTest {\n+\n+    static final int FRAME_ACTIVATION_TIMEOUT = 1000;\n+    volatile JFrame frame;\n+    volatile DragSourceDropTargetPanel panel;\n+    volatile Point p;\n+    volatile Dimension d;\n+\n+    public static void main(String[] args) throws Exception {\n+        MissedDragEnterTest test = new MissedDragEnterTest();\n+        EventQueue.invokeAndWait(test::init);\n+        try {\n+            test.start();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (test.frame != null) {\n+                    test.frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void init() {\n+        panel = new DragSourceDropTargetPanel();\n+        frame = new JFrame();\n+        frame.setTitle(\"MissedDragEnterTest\");\n+        frame.setLocation(200, 200);\n+        frame.getContentPane().add(panel);\n+\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    public void start() throws Exception {\n+        Robot robot = new Robot();\n+\n+        robot.delay(FRAME_ACTIVATION_TIMEOUT);\n+        EventQueue.invokeAndWait(() -> {\n+            p = panel.getLocationOnScreen();\n+            d = panel.getSize();\n+        });\n+\n+        p.translate(d.width \/ 2, d.height \/ 2);\n+        robot.mouseMove(p.x, p.y);\n+        robot.keyPress(KeyEvent.VK_CONTROL);\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        for (int i = 0; i < d.width; i++) {\n+            p.translate(1, 1);\n+            robot.mouseMove(p.x, p.y);\n+            robot.delay(10);\n+        }\n+        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+        robot.keyRelease(KeyEvent.VK_CONTROL);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            if (!panel.getResult()) {\n+                throw new RuntimeException(\"The test failed.\");\n+            }\n+        });\n+    }\n+}\n+\n+class DragSourceDropTargetPanel extends JPanel implements DropTargetListener,\n+                                                          Serializable,\n+                                                          Transferable,\n+                                                          DragGestureListener,\n+                                                          DragSourceListener {\n+    private final DataFlavor dataflavor =\n+        new DataFlavor(JPanel.class, \"panel\");\n+    private final Dimension preferredDimension = new Dimension(200, 100);\n+    private boolean inside = false;\n+    private boolean passed = true;\n+\n+    public DragSourceDropTargetPanel() {\n+        setLayout(new FlowLayout());\n+        DragSource ds = DragSource.getDefaultDragSource();\n+        ds.createDefaultDragGestureRecognizer(this, DnDConstants.ACTION_COPY,\n+                                              this);\n+        setDropTarget(new DropTarget(this, this));\n+    }\n+\n+    public void dragGestureRecognized(DragGestureEvent dge) {\n+        dge.startDrag(null, this, this);\n+    }\n+\n+    public void dragEnter(DragSourceDragEvent dsde) {}\n+\n+    public void dragExit(DragSourceEvent dse) {}\n+\n+    public void dragOver(DragSourceDragEvent dsde) {}\n+\n+    public void dragDropEnd(DragSourceDropEvent dsde) {}\n+\n+    public void dropActionChanged(DragSourceDragEvent dsde) {}\n+\n+    public Object getTransferData(DataFlavor flavor)\n+      throws UnsupportedFlavorException, IOException {\n+\n+        if (!isDataFlavorSupported(flavor)) {\n+            throw new UnsupportedFlavorException(flavor);\n+        }\n+\n+        Object retObj = null;\n+\n+        ByteArrayOutputStream baoStream = new ByteArrayOutputStream();\n+        ObjectOutputStream ooStream = new ObjectOutputStream(baoStream);\n+        ooStream.writeObject(this);\n+\n+        ByteArrayInputStream baiStream = new ByteArrayInputStream(baoStream.toByteArray());\n+        ObjectInputStream ois = new ObjectInputStream(baiStream);\n+        try {\n+            retObj = ois.readObject();\n+        } catch (ClassNotFoundException e) {\n+            e.printStackTrace();\n+            throw new RuntimeException(e.toString());\n+        }\n+\n+        return retObj;\n+    }\n+\n+    public DataFlavor[] getTransferDataFlavors() {\n+        return new DataFlavor[] { dataflavor };\n+    }\n+\n+    public boolean isDataFlavorSupported(DataFlavor dflavor) {\n+        return dataflavor.equals(dflavor);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+\n+    public void dragEnter(DropTargetDragEvent dtde) {\n+        inside = true;\n+    }\n+\n+    public void dragExit(DropTargetEvent dte) {\n+        if (!inside) {\n+            passed = false;\n+            inside = false;\n+            throw new RuntimeException(\"dragEnter() is not called before dragExit()\");\n+\n+        }\n+        inside = false;\n+    }\n+\n+    public void dragOver(DropTargetDragEvent dtde) {\n+        if (!inside) {\n+            passed = false;\n+            throw new RuntimeException(\"dragEnter() is not called before dragOver()\");\n+        }\n+    }\n+\n+    public void dropActionChanged(DropTargetDragEvent dtde) {\n+    }\n+\n+    public void drop(DropTargetDropEvent dtde) {\n+        DropTargetContext dtc = dtde.getDropTargetContext();\n+\n+        if ((dtde.getSourceActions() & DnDConstants.ACTION_COPY) != 0) {\n+            dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+        } else {\n+            dtde.rejectDrop();\n+        }\n+\n+        DataFlavor[] dfs = dtde.getCurrentDataFlavors();\n+        Component comp = null;\n+\n+        if (dfs != null && dfs.length >= 1) {\n+            Transferable transfer = dtde.getTransferable();\n+\n+            try {\n+                comp = (Component)transfer.getTransferData(dfs[0]);\n+            } catch (Throwable e) {\n+                e.printStackTrace();\n+                dtc.dropComplete(false);\n+            }\n+        }\n+        dtc.dropComplete(true);\n+\n+        add(comp);\n+    }\n+\n+    public boolean getResult() {\n+        return passed;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/MissedDragEnterTest.java","additions":253,"deletions":0,"binary":false,"changes":253,"status":"added"},{"patch":"@@ -0,0 +1,212 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.Component;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragGestureRecognizer;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceAdapter;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetAdapter;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseEvent;\n+\n+\/*\n+  @test\n+  @bug 4633417\n+  @summary tests that drag operation doesn't cause hang when a modal dialog is\n+           shown\n+  @key headful\n+  @run main ModalDialogDeadlockTest\n+*\/\n+\n+public class ModalDialogDeadlockTest implements AWTEventListener {\n+\n+    volatile Frame frame;\n+    volatile Dialog dialog;\n+    volatile Point dstPoint;\n+    volatile Point srcPoint;\n+    volatile Dimension d;\n+\n+    volatile DragSource dragSource;\n+    volatile Transferable transferable;\n+    volatile DragSourceListener dsl;\n+    volatile DragGestureListener dgl;\n+    volatile DragGestureRecognizer dgr;\n+    volatile DropTarget dt;\n+\n+    static final Object SYNC_LOCK = new Object();\n+    static final int FRAME_ACTIVATION_TIMEOUT = 2000;\n+    static final int MOUSE_RELEASE_TIMEOUT = 1000;\n+\n+    Component clickedComponent = null;\n+\n+    public static void main(String[] args) throws Exception {\n+        ModalDialogDeadlockTest test = new ModalDialogDeadlockTest();\n+        EventQueue.invokeAndWait(test::init);\n+        try {\n+            test.start();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (test.frame != null) {\n+                    test.frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void init() {\n+        frame = new Frame(\"ModalDialogDeadlockTest\");\n+        frame.setBounds(100, 100, 200, 200);\n+        dialog = new Dialog(frame, \"Dialog\", true);\n+        dialog.setBounds(350, 100, 200, 200);\n+\n+        dragSource = DragSource.getDefaultDragSource();\n+        transferable = new StringSelection(\"TEXT\");\n+        dsl = new DragSourceAdapter() {\n+            public void dragDropEnd(DragSourceDropEvent dsde) {\n+                synchronized (SYNC_LOCK) {\n+                    SYNC_LOCK.notifyAll();\n+                }\n+            }\n+        };\n+        dgl = new DragGestureListener() {\n+            public void dragGestureRecognized(DragGestureEvent dge) {\n+                dge.startDrag(null, transferable, dsl);\n+            }\n+        };\n+        dgr = dragSource.createDefaultDragGestureRecognizer(dialog,\n+                        DnDConstants.ACTION_COPY,\n+                        dgl);\n+        final DropTargetListener dtl = new DropTargetAdapter() {\n+            public void drop(DropTargetDropEvent dtde) {\n+                dtde.rejectDrop();\n+                dialog.dispose();\n+            }\n+        };\n+        dt = new DropTarget(frame, dtl);\n+\n+        frame.getToolkit().addAWTEventListener(this, AWTEvent.MOUSE_EVENT_MASK);\n+        frame.setVisible(true);\n+    }\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+\n+    public void start() throws Exception {\n+        final Robot robot = new Robot();\n+\n+        robot.delay(FRAME_ACTIVATION_TIMEOUT);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            dstPoint = frame.getLocationOnScreen();\n+            d = frame.getSize();\n+        });\n+        dstPoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+        if (!pointInComponent(robot, dstPoint, frame)) {\n+            System.err.println(\"WARNING: Couldn't locate frame.\");\n+            return;\n+        }\n+\n+        EventQueue.invokeLater(() -> {\n+            dialog.setVisible(true);\n+        });\n+\n+        robot.delay(FRAME_ACTIVATION_TIMEOUT);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            srcPoint = dialog.getLocationOnScreen();\n+            d = dialog.getSize();\n+        });\n+        srcPoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+        if (!pointInComponent(robot, srcPoint, dialog)) {\n+            System.err.println(\"WARNING: Couldn't locate dialog.\");\n+            return;\n+        }\n+\n+        robot.mouseMove(srcPoint.x, srcPoint.y);\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        for (;!srcPoint.equals(dstPoint);\n+             srcPoint.translate(sign(dstPoint.x - srcPoint.x),\n+                                sign(dstPoint.y - srcPoint.y))) {\n+            robot.mouseMove(srcPoint.x, srcPoint.y);\n+            robot.delay(50);\n+        }\n+        synchronized (SYNC_LOCK) {\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+            SYNC_LOCK.wait();\n+        }\n+    }\n+\n+    public void reset() {\n+        clickedComponent = null;\n+    }\n+\n+    public void eventDispatched(AWTEvent e) {\n+        if (e.getID() == MouseEvent.MOUSE_RELEASED) {\n+            clickedComponent = (Component)e.getSource();\n+            synchronized (SYNC_LOCK) {\n+                SYNC_LOCK.notifyAll();\n+            }\n+        }\n+    }\n+\n+    boolean pointInComponent(Robot robot, Point p, Component comp)\n+      throws InterruptedException {\n+        robot.waitForIdle();\n+        reset();\n+        robot.mouseMove(p.x, p.y);\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        synchronized (SYNC_LOCK) {\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+            SYNC_LOCK.wait(MOUSE_RELEASE_TIMEOUT);\n+        }\n+\n+        Component c = clickedComponent;\n+\n+        while (c != null && c != comp) {\n+            c = c.getParent();\n+        }\n+\n+        return c == comp;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/ModalDialogDeadlockTest.java","additions":212,"deletions":0,"binary":false,"changes":212,"status":"added"},{"patch":"@@ -0,0 +1,194 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.Component;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragGestureRecognizer;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetAdapter;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseEvent;\n+\n+\/*\n+  @test\n+  @bug 4352221\n+  @summary verifies that showing a modal dialog on drag doesn't hang\n+  @key headful\n+  @run main ModalDialogOnDragDeadlockTest\n+*\/\n+\n+public class ModalDialogOnDragDeadlockTest implements AWTEventListener {\n+\n+    volatile Frame frame;\n+    volatile Dialog dialog;\n+    volatile Point srcPoint;\n+    volatile Dimension d;\n+    volatile boolean finished;\n+\n+    static final Object SYNC_LOCK = new Object();\n+    static final int FRAME_ACTIVATION_TIMEOUT = 3000;\n+    static final int DROP_COMPLETION_TIMEOUT = 5000;\n+    static final int MOUSE_RELEASE_TIMEOUT = 1000;\n+\n+    volatile DragSource dragSource;\n+    volatile Transferable transferable;\n+    volatile DragGestureListener dragGestureListener;\n+    volatile DragGestureRecognizer dragGestureRecognizer;\n+    volatile DropTargetListener dropTargetListener;\n+    volatile DropTarget dropTarget;\n+\n+    Component clickedComponent = null;\n+\n+    public static void main(String[] args) throws Exception {\n+        ModalDialogOnDragDeadlockTest test = new ModalDialogOnDragDeadlockTest();\n+        EventQueue.invokeAndWait(test::init);\n+        try {\n+            test.start();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (test.frame != null) {\n+                    test.frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void init() {\n+        frame = new Frame(\"ModalDialogOnDragDeadlockTest\");\n+        dialog = new Dialog(frame, \"Modal dialog\", true);\n+        frame.setTitle(\"Test frame\");\n+        frame.setBounds(100, 100, 200, 200);\n+\n+        dragSource = DragSource.getDefaultDragSource();\n+        transferable = new StringSelection(\"TEXT\");\n+        dragGestureListener = new DragGestureListener() {\n+            public void dragGestureRecognized(DragGestureEvent dge) {\n+                dge.startDrag(null, transferable);\n+            }\n+        };\n+        dragGestureRecognizer =\n+                dragSource.createDefaultDragGestureRecognizer(frame, DnDConstants.ACTION_COPY,\n+                        dragGestureListener);\n+        dropTargetListener = new DropTargetAdapter() {\n+            public void dragOver(DropTargetDragEvent dtde) {\n+                dialog.setBounds(200, 200, 200, 200);\n+                dialog.setVisible(true);\n+            }\n+            public void drop(DropTargetDropEvent dtde) {\n+                dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+                dtde.dropComplete(true);\n+            }\n+        };\n+        dropTarget = new DropTarget(frame, dropTargetListener);\n+\n+        frame.getToolkit().addAWTEventListener(this, AWTEvent.MOUSE_EVENT_MASK);\n+        frame.setVisible(true);\n+    }\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+\n+    public void start() throws Exception {\n+        finished = false;\n+        Robot robot = new Robot();\n+        robot.waitForIdle();\n+\n+        Thread.sleep(FRAME_ACTIVATION_TIMEOUT);\n+        EventQueue.invokeAndWait(() -> {\n+            srcPoint = frame.getLocationOnScreen();\n+            d = frame.getSize();\n+        });\n+        srcPoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+        if (!pointInComponent(robot, srcPoint, frame)) {\n+            System.err.println(\"WARNING: Couldn't locate source frame.\");\n+            return;\n+        }\n+\n+        final Point dstPoint = new Point(srcPoint);\n+        dstPoint.translate(d.width \/ 4, d.height \/ 4);\n+\n+        robot.mouseMove(srcPoint.x, srcPoint.y);\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        for (;!srcPoint.equals(dstPoint);\n+             srcPoint.translate(sign(dstPoint.x - srcPoint.x),\n+                                sign(dstPoint.y - srcPoint.y))) {\n+            robot.mouseMove(srcPoint.x, srcPoint.y);\n+            Thread.sleep(50);\n+        }\n+\n+        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+\n+        Thread.sleep(DROP_COMPLETION_TIMEOUT);\n+    }\n+\n+    public void reset() {\n+        clickedComponent = null;\n+    }\n+\n+    public void eventDispatched(AWTEvent e) {\n+        if (e.getID() == MouseEvent.MOUSE_RELEASED) {\n+            clickedComponent = (Component)e.getSource();\n+            synchronized (SYNC_LOCK) {\n+                SYNC_LOCK.notifyAll();\n+            }\n+        }\n+    }\n+\n+    boolean pointInComponent(Robot robot, Point p, Component comp)\n+      throws InterruptedException {\n+        robot.waitForIdle();\n+        reset();\n+        robot.mouseMove(p.x, p.y);\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        synchronized (SYNC_LOCK) {\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+            SYNC_LOCK.wait(MOUSE_RELEASE_TIMEOUT);\n+        }\n+\n+        Component c = clickedComponent;\n+\n+        while (c != null && c != comp) {\n+            c = c.getParent();\n+        }\n+\n+        return c == comp;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/dnd\/ModalDialogOnDragDeadlockTest.java","additions":194,"deletions":0,"binary":false,"changes":194,"status":"added"},{"patch":"@@ -0,0 +1,236 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.Component;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragGestureRecognizer;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceAdapter;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetAdapter;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseListener;\n+\n+\/*\n+  @test\n+  @bug 4623377\n+  @summary verifies that showing a modal dialog on drop doesn't hang\n+  @key headful\n+  @run main ModalDialogOnDropDeadlockTest\n+*\/\n+\n+public class ModalDialogOnDropDeadlockTest implements AWTEventListener {\n+\n+    volatile Frame frame;\n+    volatile Dialog dialog;\n+    volatile Point srcPoint;\n+    volatile Dimension d;\n+    volatile boolean finished = false;\n+\n+    static final Object SYNC_LOCK = new Object();\n+    static final int FRAME_ACTIVATION_TIMEOUT = 3000;\n+    static final int DROP_COMPLETION_TIMEOUT = 5000;\n+    static final int MOUSE_RELEASE_TIMEOUT = 1000;\n+\n+    volatile MouseListener mouseListener;\n+\n+    volatile Runnable dialogLocator;\n+    volatile DragSourceListener dragSourceListener;\n+    volatile DragSource dragSource;\n+    volatile Transferable transferable;\n+    volatile DragGestureListener dragGestureListener;\n+    volatile DragGestureRecognizer dragGestureRecognizer;\n+    volatile DropTargetListener dropTargetListener;\n+    volatile DropTarget dropTarget;\n+\n+    Component clickedComponent = null;\n+\n+    public static void main(String[] args) throws Exception {\n+        ModalDialogOnDropDeadlockTest test = new ModalDialogOnDropDeadlockTest();\n+        EventQueue.invokeAndWait(test::init);\n+        try {\n+            test.start();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (test.frame != null) {\n+                    test.frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void init() {\n+        frame = new Frame();\n+        dialog = new Dialog(frame, \"Modal dialog\", true);\n+        frame.setTitle(\"ModalDialogOnDropDeadlockTest\");\n+        frame.setBounds(100, 100, 200, 200);\n+\n+        mouseListener = new MouseAdapter() {\n+            public void mouseClicked(MouseEvent e) {\n+                dialog.dispose();\n+            }\n+        };\n+        dialogLocator = new Runnable() {\n+            public void run() {\n+                try {\n+                    final Robot robot = new Robot();\n+\n+                    Thread.sleep(FRAME_ACTIVATION_TIMEOUT);\n+\n+                    final Point srcPoint = dialog.getLocationOnScreen();\n+                    Dimension d = dialog.getSize();\n+                    srcPoint.translate(d.width \/ 2, d.height \/ 2);\n+                    robot.mouseMove(srcPoint.x, srcPoint.y);\n+                    robot.mousePress(InputEvent.BUTTON1_MASK);\n+                    robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                    dialog.dispose();\n+                }\n+            }\n+        };\n+        dragSourceListener = new DragSourceAdapter() {\n+            public void dragDropEnd(DragSourceDropEvent dsde) {\n+                finished = true;\n+            }\n+        };\n+        dragSource = DragSource.getDefaultDragSource();\n+        transferable = new StringSelection(\"TEXT\");\n+        dragGestureListener = new DragGestureListener() {\n+            public void dragGestureRecognized(DragGestureEvent dge) {\n+                dge.startDrag(null, transferable, dragSourceListener);\n+            }\n+        };\n+        dragGestureRecognizer =\n+                dragSource.createDefaultDragGestureRecognizer(frame, DnDConstants.ACTION_COPY,\n+                        dragGestureListener);\n+        dropTargetListener = new DropTargetAdapter() {\n+            public void drop(DropTargetDropEvent dtde) {\n+                dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+                dialog.addMouseListener(mouseListener);\n+                dialog.setBounds(200, 200, 200, 200);\n+                new Thread(dialogLocator).start();\n+                dialog.setVisible(true);\n+                dtde.dropComplete(true);\n+            }\n+        };\n+        dropTarget = new DropTarget(frame, dropTargetListener);\n+\n+        frame.getToolkit().addAWTEventListener(this, AWTEvent.MOUSE_EVENT_MASK);\n+        frame.setVisible(true);\n+    }\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+\n+    public void start() throws Exception {\n+        Robot robot = new Robot();\n+        robot.waitForIdle();\n+\n+        Thread.sleep(FRAME_ACTIVATION_TIMEOUT);\n+\n+        EventQueue.invokeAndWait(() -> {\n+            srcPoint = frame.getLocationOnScreen();\n+            d = frame.getSize();\n+        });\n+        srcPoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+        if (!pointInComponent(robot, srcPoint, frame)) {\n+            System.err.println(\"WARNING: Couldn't locate source frame.\");\n+            return;\n+        }\n+\n+        final Point dstPoint = new Point(srcPoint);\n+        dstPoint.translate(d.width \/ 4, d.height \/ 4);\n+\n+        robot.mouseMove(srcPoint.x, srcPoint.y);\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        for (;!srcPoint.equals(dstPoint);\n+             srcPoint.translate(sign(dstPoint.x - srcPoint.x),\n+                                sign(dstPoint.y - srcPoint.y))) {\n+            robot.mouseMove(srcPoint.x, srcPoint.y);\n+            Thread.sleep(50);\n+        }\n+\n+        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+\n+        Thread.sleep(DROP_COMPLETION_TIMEOUT);\n+\n+        if (!finished) {\n+            throw new RuntimeException(\"DnD not finished\");\n+        }\n+    }\n+\n+    public void reset() {\n+        clickedComponent = null;\n+    }\n+\n+    public void eventDispatched(AWTEvent e) {\n+        if (e.getID() == MouseEvent.MOUSE_RELEASED) {\n+            clickedComponent = (Component)e.getSource();\n+            synchronized (SYNC_LOCK) {\n+                SYNC_LOCK.notifyAll();\n+            }\n+        }\n+    }\n+\n+    boolean pointInComponent(Robot robot, Point p, Component comp)\n+      throws InterruptedException {\n+        robot.waitForIdle();\n+        reset();\n+        robot.mouseMove(p.x, p.y);\n+        robot.mousePress(InputEvent.BUTTON1_MASK);\n+        synchronized (SYNC_LOCK) {\n+            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+            SYNC_LOCK.wait(MOUSE_RELEASE_TIMEOUT);\n+        }\n+\n+        Component c = clickedComponent;\n+\n+        while (c != null && c != comp) {\n+            c = c.getParent();\n+        }\n+\n+        return c == comp;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/ModalDialogOnDropDeadlockTest.java","additions":236,"deletions":0,"binary":false,"changes":236,"status":"added"}]}