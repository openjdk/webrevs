{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,9 @@\n-\/**\n+import java.awt.Frame;\n+import java.awt.List;\n+import java.lang.ref.PhantomReference;\n+import java.lang.ref.Reference;\n+import java.lang.ref.ReferenceQueue;\n+\n+import jdk.test.lib.util.ForceGC;\n+\n+\/*\n@@ -29,1 +37,3 @@\n- * @run main\/othervm -Xmx100m AwtListGarbageCollectionTest\n+ * @library \/test\/lib\/\n+ * @build jdk.test.lib.util.ForceGC\n+ * @run main\/othervm -Xmx100m -Xlog:gc=debug AwtListGarbageCollectionTest\n@@ -31,0 +41,1 @@\n+public class AwtListGarbageCollectionTest {\n@@ -32,4 +43,1 @@\n-import java.awt.*;\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n-import java.lang.ref.WeakReference;\n+    private static final long ENQUEUE_TIMEOUT = 50;\n@@ -37,2 +45,1 @@\n-public class AwtListGarbageCollectionTest {\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws InterruptedException {\n@@ -48,4 +55,2 @@\n-        WeakReference<List> weakListRef = null;\n-        try {\n-            frame.setSize(300, 200);\n-            frame.setVisible(true);\n+        frame.setSize(300, 200);\n+        frame.setVisible(true);\n@@ -53,6 +58,4 @@\n-            List strongListRef = new List();\n-            frame.add(strongListRef);\n-            strongListRef.setMultipleMode(true);\n-            frame.remove(strongListRef);\n-            weakListRef = new WeakReference<List>(strongListRef);\n-            strongListRef = null;\n+        List strongListRef = new List();\n+        frame.add(strongListRef);\n+        strongListRef.setMultipleMode(true);\n+        frame.remove(strongListRef);\n@@ -60,11 +63,18 @@\n-            \/\/make out of memory to force gc\n-            String veryLongString = new String(new char[100]);\n-            while (true) {\n-                veryLongString += veryLongString;\n-            }\n-        } catch (OutOfMemoryError e) {\n-            if (weakListRef == null) {\n-                throw new RuntimeException(\"Weak list ref wasn't created\");\n-            } else if (weakListRef.get() != null) {\n-                throw new RuntimeException(\"List wasn't garbage collected\");\n-            }\n+        final ReferenceQueue<List> referenceQueue = new ReferenceQueue<>();\n+        final PhantomReference<List> phantomListRef =\n+                new PhantomReference<>(strongListRef, referenceQueue);\n+        System.out.println(\"phantomListRef: \" + phantomListRef);\n+\n+        strongListRef = null; \/\/ Clear the strong reference\n+\n+        System.out.println(\"Waiting for the reference to be cleared\");\n+        if (!ForceGC.wait(() -> phantomListRef == remove(referenceQueue))) {\n+            throw new RuntimeException(\"List wasn't garbage collected\");\n+        }\n+    }\n+\n+    private static Reference<?> remove(ReferenceQueue<?> queue) {\n+        try {\n+            return queue.remove(ENQUEUE_TIMEOUT);\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(e);\n","filename":"test\/jdk\/java\/awt\/List\/ListGarbageCollectionTest\/AwtListGarbageCollectionTest.java","additions":40,"deletions":30,"binary":false,"changes":70,"status":"modified"}]}