{"files":[{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4403749\n+ * @summary Tests that keyboard accelerator implementation in JMenuBar is\n+            MenuElement aware\n+ * @key headful\n+ * @run main bug4403749\n+ *\/\n+\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseEvent;\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JPanel;\n+import javax.swing.KeyStroke;\n+import javax.swing.MenuElement;\n+import javax.swing.MenuSelectionManager;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4403749 {\n+    static JFrame frame;\n+    static volatile Point pt;\n+    static volatile Dimension dim;\n+    static volatile boolean passed;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(100);\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame(\"bug4403749\");\n+                JMenuBar mbar = new JMenuBar();\n+                JMenu menu = new JMenu(\"Menu\");\n+                JPanel panel = new TestMenuElement();\n+                menu.add(panel);\n+                mbar.add(menu);\n+                frame.setJMenuBar(mbar);\n+\n+                frame.getContentPane().add(new JButton(\"\"));\n+                frame.setSize(200, 200);\n+                frame.setLocationRelativeTo(null);\n+                frame.setAlwaysOnTop(true);\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                pt = frame.getLocationOnScreen();\n+                dim = frame.getSize();\n+            });\n+            robot.mouseMove(pt.x + dim.width \/ 2, pt.y + dim.height \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(200);\n+            robot.keyPress(KeyEvent.VK_ALT);\n+            robot.keyPress(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_A);\n+            robot.keyRelease(KeyEvent.VK_ALT);\n+            if (!passed) {\n+                throw new RuntimeException(\"Failed: processKeyBinding wasn't called\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                 }\n+            });\n+        }\n+    }\n+\n+    static class TestMenuElement extends JPanel implements MenuElement {\n+        public void processMouseEvent(MouseEvent event,\n+                                      MenuElement[] path,\n+                                      MenuSelectionManager manager) {}\n+\n+        public void processKeyEvent(KeyEvent event,\n+                                    MenuElement[] path,\n+                                    MenuSelectionManager manager) {}\n+\n+        public void menuSelectionChanged(boolean isIncluded) {}\n+\n+        public MenuElement[] getSubElements() {\n+            return new MenuElement[0];\n+        }\n+\n+        public Component getComponent() {\n+            return this;\n+        }\n+\n+        protected boolean processKeyBinding(KeyStroke ks, KeyEvent e,\n+                                            int condition, boolean pressed) {\n+            passed = true;\n+            return super.processKeyBinding(ks, e, condition, pressed);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JMenuBar\/bug4403749.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"}]}