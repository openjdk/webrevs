{"files":[{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4420658\n+  @summary No ClassCastException should be thrown when getComponent()\n+           is called on an event with a non-Component source.\n+           The result should be null.\n+  @run main ObjectSourceTest\n+*\/\n+\n+import java.awt.Component;\n+import java.awt.Panel;\n+import java.awt.event.HierarchyEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\n+public class ObjectSourceTest {\n+    static Panel panel;\n+\n+    public static void main(String args[]) throws InterruptedException,\n+            InvocationTargetException {\n+        panel = new Panel();\n+\n+        HierarchyEvent he = new HierarchyEvent(panel, HierarchyEvent.ANCESTOR_MOVED,\n+                panel, panel);\n+        Object obj = new Object();\n+        he.setSource(obj);\n+\n+        Component comp = he.getComponent();\n+        if (comp != null) {\n+            throw new RuntimeException(\"ObjectSourceTest failed.  comp != null\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/HierarchyEvent\/ObjectSourceTest.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -0,0 +1,1248 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4222172\n+  @summary Verifies initial implementation of HierarchyEvent (programmatic)\n+  @key headful\n+  @run main SpecTest\n+*\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.BorderLayout;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.Window;\n+import java.awt.event.HierarchyBoundsListener;\n+import java.awt.event.HierarchyEvent;\n+import java.awt.event.HierarchyListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+\n+public class SpecTest extends Frame implements HierarchyListener, HierarchyBoundsListener {\n+    static SpecTest f;\n+\n+    public static void main(String args[]) throws InterruptedException,\n+            InvocationTargetException {\n+        EventQueue.invokeAndWait(() -> init());\n+        f.start();\n+    }\n+\n+    class EELabel extends Label {\n+        private long mask = 0;\n+        public EELabel(String s) {\n+            super(s);\n+        }\n+\n+        protected void processHierarchyEvent(HierarchyEvent e) {\n+            super.processHierarchyEvent(e);\n+            if ((mask & AWTEvent.HIERARCHY_EVENT_MASK) != 0) {\n+                switch (e.getID()) {\n+                    case HierarchyEvent.HIERARCHY_CHANGED:\n+                        hierarchyChanged(e);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            }\n+        }\n+\n+        protected void processHierarchyBoundsEvent(HierarchyEvent e) {\n+            super.processHierarchyBoundsEvent(e);\n+            if ((mask & AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK) != 0) {\n+                switch (e.getID()) {\n+                    case HierarchyEvent.ANCESTOR_MOVED:\n+                        ancestorMoved(e);\n+                        break;\n+                    case HierarchyEvent.ANCESTOR_RESIZED:\n+                        ancestorResized(e);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            }\n+        }\n+\n+        public void pubEnableEvents(long eventsToEnable) {\n+            mask |= eventsToEnable;\n+            enableEvents(eventsToEnable);\n+        }\n+\n+        public void pubDisableEvents(long eventsToDisable) {\n+            mask &= ~eventsToDisable;\n+            disableEvents(eventsToDisable);\n+        }\n+    }\n+\n+    class EEJLabel extends JLabel {\n+        private long mask = 0;\n+        public EEJLabel(String s) {\n+            super(s);\n+        }\n+        protected void processHierarchyEvent(HierarchyEvent e) {\n+            super.processHierarchyEvent(e);\n+            if ((mask & AWTEvent.HIERARCHY_EVENT_MASK) != 0) {\n+                switch (e.getID()) {\n+                    case HierarchyEvent.HIERARCHY_CHANGED:\n+                        hierarchyChanged(e);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            }\n+        }\n+\n+        protected void processHierarchyBoundsEvent(HierarchyEvent e) {\n+            super.processHierarchyBoundsEvent(e);\n+            if ((mask & AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK) != 0) {\n+                switch (e.getID()) {\n+                    case HierarchyEvent.ANCESTOR_MOVED:\n+                        ancestorMoved(e);\n+                        break;\n+                    case HierarchyEvent.ANCESTOR_RESIZED:\n+                        ancestorResized(e);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            }\n+        }\n+\n+        public void pubEnableEvents(long eventsToEnable) {\n+            mask |= eventsToEnable;\n+            enableEvents(eventsToEnable);\n+        }\n+\n+        public void pubDisableEvents(long eventsToDisable) {\n+            mask &= ~eventsToDisable;\n+            disableEvents(eventsToDisable);\n+        }\n+    }\n+\n+    class EEPanel extends Panel {\n+        private long mask = 0;\n+        protected void processHierarchyEvent(HierarchyEvent e) {\n+            super.processHierarchyEvent(e);\n+            if ((mask & AWTEvent.HIERARCHY_EVENT_MASK) != 0) {\n+                switch (e.getID()) {\n+                    case HierarchyEvent.HIERARCHY_CHANGED:\n+                        hierarchyChanged(e);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            }\n+        }\n+\n+        protected void processHierarchyBoundsEvent(HierarchyEvent e) {\n+            super.processHierarchyBoundsEvent(e);\n+            if ((mask & AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK) != 0) {\n+                switch (e.getID()) {\n+                    case HierarchyEvent.ANCESTOR_MOVED:\n+                        ancestorMoved(e);\n+                        break;\n+                    case HierarchyEvent.ANCESTOR_RESIZED:\n+                        ancestorResized(e);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            }\n+        }\n+\n+        public void pubEnableEvents(long eventsToEnable) {\n+            mask |= eventsToEnable;\n+            enableEvents(eventsToEnable);\n+        }\n+\n+        public void pubDisableEvents(long eventsToDisable) {\n+            mask &= ~eventsToDisable;\n+            disableEvents(eventsToDisable);\n+        }\n+    }\n+\n+    class EEJPanel extends JPanel {\n+        private long mask = 0;\n+        protected void processHierarchyEvent(HierarchyEvent e) {\n+            super.processHierarchyEvent(e);\n+            if ((mask & AWTEvent.HIERARCHY_EVENT_MASK) != 0) {\n+                switch (e.getID()) {\n+                    case HierarchyEvent.HIERARCHY_CHANGED:\n+                        hierarchyChanged(e);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            }\n+        }\n+\n+        protected void processHierarchyBoundsEvent(HierarchyEvent e) {\n+            super.processHierarchyBoundsEvent(e);\n+            if ((mask & AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK) != 0) {\n+                switch (e.getID()) {\n+                    case HierarchyEvent.ANCESTOR_MOVED:\n+                        ancestorMoved(e);\n+                        break;\n+                    case HierarchyEvent.ANCESTOR_RESIZED:\n+                        ancestorResized(e);\n+                        break;\n+                    default:\n+                        break;\n+                }\n+            }\n+        }\n+\n+        public void pubEnableEvents(long eventsToEnable) {\n+            mask |= eventsToEnable;\n+            enableEvents(eventsToEnable);\n+        }\n+\n+        public void pubDisableEvents(long eventsToDisable) {\n+            mask &= ~eventsToDisable;\n+            disableEvents(eventsToDisable);\n+        }\n+    }\n+\n+    int parentChanged, displayabilityChanged, showingChanged, ancestorMoved,\n+            ancestorResized;\n+    private static final int OBJ_ARRAY_SIZE = 2;\n+    Component[] source = new Component[OBJ_ARRAY_SIZE],\n+            changed = new Component[OBJ_ARRAY_SIZE];\n+    Container[] changedParent = new Container[OBJ_ARRAY_SIZE];\n+\n+    boolean assertParent = false, assertDisplayability = false,\n+            assertShowing = false, assertMoved = false, assertResized = false;\n+\n+    private void flushEventQueue() throws InterruptedException, InvocationTargetException {\n+        EventQueue.invokeAndWait(() -> {});\n+    }\n+\n+    private void testAdd(Component child, Container parent, int count)\n+            throws InterruptedException, InvocationTargetException {\n+        assertParent = true;\n+        parentChanged = count;\n+        parent.add(child);\n+        flushEventQueue();\n+        if (parentChanged != 0) {\n+            throw new RuntimeException(\"hierarchyChanged(PARENT_CHANGED) invoked \"+\n+                    parentChanged+\" too few times\");\n+        }\n+        assertParent = false;\n+    }\n+\n+    private void testRemove(Component child, Container parent, int count)\n+            throws InterruptedException, InvocationTargetException {\n+        assertParent = true;\n+        parentChanged = count;\n+        parent.remove(child);\n+        flushEventQueue();\n+        if (parentChanged != 0) {\n+            throw new RuntimeException(\"hierarchyChanged(PARENT_CHANGED) invoked \"+\n+                    parentChanged+\" too few times\");\n+        }\n+        assertParent = false;\n+    }\n+\n+    private void testSetLocation(Component changed, int x, int y, int count)\n+            throws InterruptedException, InvocationTargetException {\n+        assertMoved = true;\n+        ancestorMoved = count;\n+        changed.setLocation(x, y);\n+        flushEventQueue();\n+        if (ancestorMoved != 0) {\n+            throw new RuntimeException(\"ancestorMoved invoked \"+ancestorMoved+\n+                    \" too few times\");\n+        }\n+        assertMoved = false;\n+    }\n+\n+    private void testSetSize(Component changed, int w, int h, int count)\n+            throws InterruptedException, InvocationTargetException {\n+        assertResized = true;\n+        ancestorResized = count;\n+        changed.setSize(w, h);\n+        flushEventQueue();\n+        if (ancestorResized != 0) {\n+            throw new RuntimeException(\"ancestorResized invoked \"+ancestorResized+\n+                    \" too few times\");\n+        }\n+        assertResized = false;\n+    }\n+\n+    private void testPack(Window topLevel, int displayabilityCount)\n+            throws InterruptedException, InvocationTargetException {\n+        assertDisplayability = true;\n+        assertShowing = true;\n+        displayabilityChanged = displayabilityCount;\n+        showingChanged = 0;\n+        topLevel.pack();\n+        flushEventQueue();\n+        if (displayabilityChanged != 0) {\n+            throw new RuntimeException(\"hierarchyChanged(DISPLAYABILITY_CHANGED) \"+\n+                    \"invoked \"+displayabilityChanged+\n+                    \" too few times\");\n+        }\n+        if (showingChanged != 0) {\n+            throw new RuntimeException(\"hierarchyChanged(SHOWING_CHANGED) \"+\n+                    \"invoked, but should not have been\");\n+        }\n+        assertDisplayability = false;\n+        assertShowing = false;\n+    }\n+\n+    private void testShow(Window topLevel, int displayabilityCount,\n+                          int showingCount)\n+            throws InterruptedException, InvocationTargetException {\n+        assertDisplayability = true;\n+        assertShowing = true;\n+        displayabilityChanged = displayabilityCount;\n+        showingChanged = showingCount;\n+        topLevel.show();\n+        flushEventQueue();\n+        if (displayabilityChanged != 0) {\n+            throw new RuntimeException(\"hierarchyChanged(DISPLAYABILITY_CHANGED) \"+\n+                    \"invoked \"+displayabilityChanged+\n+                    \" too few times\");\n+        }\n+        if (showingChanged != 0) {\n+            throw new RuntimeException(\"hierarchyChanged(SHOWING_CHANGED) \"+\n+                    \"invoked \"+showingChanged+\" too few times\");\n+        }\n+        assertDisplayability = false;\n+        assertShowing = false;\n+    }\n+\n+    private void testHide(Window topLevel, int showingCount)\n+            throws InterruptedException, InvocationTargetException {\n+        assertDisplayability = true;\n+        assertShowing = true;\n+        displayabilityChanged = 0;\n+        showingChanged = showingCount;\n+        topLevel.hide();\n+        flushEventQueue();\n+        if (displayabilityChanged != 0) {\n+            throw new RuntimeException(\"hierarchyChanged(DISPLAYABILITY_CHANGED) \"+\n+                    \"invoked, but should not have been\");\n+        }\n+        if (showingChanged != 0) {\n+            throw new RuntimeException(\"hierarchyChanged(SHOWING_CHANGED) \"+\n+                    \"invoked \"+showingChanged+\" too few times\");\n+        }\n+        assertDisplayability = false;\n+        assertShowing = false;\n+    }\n+\n+    private void testDispose(Window topLevel, int displayabilityCount,\n+                             int showingCount)\n+            throws InterruptedException, InvocationTargetException {\n+        assertDisplayability = true;\n+        assertShowing = true;\n+        displayabilityChanged = displayabilityCount;\n+        showingChanged = showingCount;\n+        topLevel.dispose();\n+        flushEventQueue();\n+        if (displayabilityChanged != 0) {\n+            throw new RuntimeException(\"hierarchyChanged(DISPLAYABILITY_CHANGED) \"+\n+                    \"invoked \"+displayabilityChanged+\n+                    \" too few times\");\n+        }\n+        if (showingChanged != 0) {\n+            throw new RuntimeException(\"hierarchyChanged(SHOWING_CHANGED) \"+\n+                    \"invoked \"+showingChanged+\" too few times\");\n+        }\n+        assertDisplayability = false;\n+        assertShowing = false;\n+    }\n+\n+    private void assertObjectsImpl(HierarchyEvent e) {\n+        int match = -1;\n+\n+        for (int i = 0; i < OBJ_ARRAY_SIZE; i++) {\n+            if (e.getComponent() == source[i]) {\n+                match = i;\n+                break;\n+            }\n+        }\n+\n+        if (match == -1) {\n+            String str = \"\\n\\nsource incorrect, was \"+e.getComponent()+\"\\n\\n\";\n+            for (int i = 0; i < OBJ_ARRAY_SIZE; i++) {\n+                str += \"available source: \"+source[i]+\"\\n\\n\";\n+            }\n+            str += \"event: \"+e+\"\\n\";\n+            throw new RuntimeException(str);\n+        }\n+\n+        if (e.getChanged() != changed[match]) {\n+            if (e.getID() == HierarchyEvent.HIERARCHY_CHANGED &&\n+                    (e.getChangeFlags() & HierarchyEvent.DISPLAYABILITY_CHANGED) != 0) {\n+                System.err.println(\"warning (known bug): changed for \"+\n+                        \"DISPLAYABILITY_CHANGED event incorrect\");\n+            } else {\n+                throw new RuntimeException(\"\\n\\nchanged incorrect, was \"+\n+                        e.getChanged()+\n+                        \", should be \"+changed[match]+\"\\n\\n\"+\n+                        \"event: \"+e+\"\\n\");\n+            }\n+        }\n+\n+        if (e.getChangedParent() != changedParent[match]) {\n+            if (e.getID() == HierarchyEvent.HIERARCHY_CHANGED &&\n+                    (e.getChangeFlags() & HierarchyEvent.DISPLAYABILITY_CHANGED) != 0) {\n+                System.err.println(\"warning (known bug): changedParent for \"+\n+                        \"DISPLAYABILITY_CHANGED event incorrect\");\n+            } else {\n+                throw new RuntimeException(\"changedParent incorrect, was \"+\n+                        e.getChangedParent()+\n+                        \", should be \"+changedParent[match]+\"\\n\\n\"+\n+                        \"event: \"+e+\"\\n\");\n+            }\n+        }\n+    }\n+\n+    private void setObjects(int index, Component source, Component changed,\n+                            Container changedParent) {\n+        this.source[index] = source;\n+        this.changed[index] = changed;\n+        this.changedParent[index] = changedParent;\n+    }\n+\n+    private void resetObjects() {\n+        for (int i = 0; i < OBJ_ARRAY_SIZE; i++) {\n+            setObjects(i, null, null, null);\n+        }\n+    }\n+\n+    public void hierarchyChanged(HierarchyEvent e) {\n+        if (assertParent &&\n+                (e.getChangeFlags() & HierarchyEvent.PARENT_CHANGED) != 0) {\n+            assertObjectsImpl(e);\n+            parentChanged--;\n+        }\n+        if (assertDisplayability &&\n+                (e.getChangeFlags() & HierarchyEvent.DISPLAYABILITY_CHANGED) != 0){\n+            assertObjectsImpl(e);\n+            displayabilityChanged--;\n+        }\n+        if (assertShowing &&\n+                (e.getChangeFlags() & HierarchyEvent.SHOWING_CHANGED) != 0) {\n+            assertObjectsImpl(e);\n+            showingChanged--;\n+        }\n+    }\n+\n+    public void ancestorMoved(HierarchyEvent e) {\n+        if (!assertMoved)\n+            return;\n+\n+        assertObjectsImpl(e);\n+        ancestorMoved--;\n+    }\n+\n+    public void ancestorResized(HierarchyEvent e) {\n+        if (!assertResized)\n+            return;\n+\n+        assertObjectsImpl(e);\n+        ancestorResized--;\n+    }\n+\n+    public static void init() {\n+        f = new SpecTest();\n+        f.setTitle(\"SpecTest\");\n+        f.setLayout(new BorderLayout());\n+    }\n+\n+    private void test1(Component source, Component changed,\n+                       Container changedParent, Window topLevel,\n+                       int hierarchyCount, int hierarchyBoundsCount)\n+            throws InterruptedException, InvocationTargetException {\n+        changed.setBounds(0, 0, 100, 100);\n+        topLevel.dispose();\n+        resetObjects();\n+\n+        setObjects(0, source, changed, changedParent);\n+\n+        testRemove(changed, changedParent, hierarchyCount);\n+        testAdd(changed, changedParent, hierarchyCount);\n+        testSetLocation(changed, 200, 250, hierarchyBoundsCount);\n+        testSetSize(changed, 50, 50, hierarchyBoundsCount);\n+\n+        setObjects(0, source, topLevel, null);\n+\n+        testPack(topLevel, hierarchyCount);\n+        testDispose(topLevel, hierarchyCount, 0);\n+        testPack(topLevel, hierarchyCount);\n+        testShow(topLevel, 0, hierarchyCount);\n+        testDispose(topLevel, hierarchyCount, hierarchyCount);\n+        testShow(topLevel, hierarchyCount, hierarchyCount);\n+        testHide(topLevel, hierarchyCount);\n+        testDispose(topLevel, hierarchyCount, 0);\n+\n+        resetObjects();\n+    }\n+\n+    private void test2(Component source1, Container parent1,\n+                       Component source2, Container parent2,\n+                       Window topLevel)\n+            throws InterruptedException, InvocationTargetException {\n+        topLevel.setBounds(0, 0, 100, 100);\n+        topLevel.dispose();\n+        resetObjects();\n+\n+        setObjects(0, source1, source1, parent1);\n+        testRemove(source1, parent1, 1);\n+        testAdd(source1, parent1, 1);\n+\n+        setObjects(0, source2, source2, parent2);\n+        testRemove(source2, parent2, 1);\n+        testAdd(source2, parent2, 1);\n+\n+        setObjects(0, source1, topLevel, null);\n+        setObjects(1, source2, topLevel, null);\n+\n+        testSetLocation(topLevel, 200, 250, 2);\n+        testSetSize(topLevel, 50, 50, 2);\n+\n+        testPack(topLevel, 2);\n+        testDispose(topLevel, 2, 0);\n+        testPack(topLevel, 2);\n+        testShow(topLevel, 0, 2);\n+        testDispose(topLevel, 2, 2);\n+        testShow(topLevel, 2, 2);\n+        testHide(topLevel, 2);\n+        testDispose(topLevel, 2, 0);\n+\n+        resetObjects();\n+    }\n+\n+    public void start() throws InterruptedException, InvocationTargetException {\n+    \/*\n+                                    f\n+                                    |\n+                -----------------------------------------\n+                |       |       |       |       |       |\n+                l1      l2      p1      p2      p5      p6\n+                                |       |       |       |\n+                              -----   -----     |       |\n+                              |   |   |   |     |       |\n+                              l3  l4  l5  l6    p3      p4\n+                                                |       |\n+                                              -----   -----\n+                                              |   |   |   |\n+                                              l7  l8  l9  l10\n+    *\/\n+\n+        \/\/ listener-only tests\n+\n+        {\n+            Label l1 = new Label(\"Label 1\");\n+            JLabel l2 = new JLabel(\"Label 2\");\n+            Panel p1 = new Panel();\n+            JPanel p2 = new JPanel();\n+            Panel p5 = new Panel();\n+            JPanel p6 = new JPanel();\n+\n+            Label l3 = new Label(\"Label 3\");\n+            JLabel l4 = new JLabel(\"Label 4\");\n+            Label l5 = new Label(\"Label 5\");\n+            JLabel l6 = new JLabel(\"Label 6\");\n+            JPanel p3 = new JPanel();\n+            Panel p4 = new Panel();\n+\n+            Label l7 = new Label(\"Label 7\");\n+            JLabel l8 = new JLabel(\"Label 8\");\n+            JLabel l9 = new JLabel(\"Label 9\");\n+            Label l10 = new Label(\"Label 10\");\n+\n+            f.add(l1);\n+            f.add(l2);\n+            f.add(p1);\n+            f.add(p2);\n+            f.add(p5);\n+            f.add(p6);\n+\n+            p1.add(l3);\n+            p1.add(l4);\n+\n+            p2.add(l5);\n+            p2.add(l6);\n+\n+            p5.add(p3);\n+\n+            p6.add(p4);\n+\n+            p3.add(l7);\n+            p3.add(l8);\n+\n+            p4.add(l9);\n+            p4.add(l10);\n+\n+\n+\n+            \/\/ test1\n+\n+            l1.addHierarchyListener(this);\n+            l1.addHierarchyBoundsListener(this);\n+            test1(l1, l1, f, f, 1, 0);\n+            l1.addHierarchyListener(this);\n+            l1.addHierarchyBoundsListener(this);\n+            test1(l1, l1, f, f, 2, 0);\n+            l1.removeHierarchyListener(this);\n+            l1.removeHierarchyBoundsListener(this);\n+            l1.removeHierarchyListener(this);\n+            l1.removeHierarchyBoundsListener(this);\n+\n+            l2.addHierarchyListener(this);\n+            l2.addHierarchyBoundsListener(this);\n+            test1(l2, l2, f, f, 1, 0);\n+            l2.addHierarchyListener(this);\n+            l2.addHierarchyBoundsListener(this);\n+            test1(l2, l2, f, f, 2, 0);\n+            l2.removeHierarchyListener(this);\n+            l2.removeHierarchyBoundsListener(this);\n+            l2.removeHierarchyListener(this);\n+            l2.removeHierarchyBoundsListener(this);\n+\n+            p1.addHierarchyListener(this);\n+            p1.addHierarchyBoundsListener(this);\n+            test1(p1, p1, f, f, 1, 0);\n+            p1.addHierarchyListener(this);\n+            p1.addHierarchyBoundsListener(this);\n+            test1(p1, p1, f, f, 2, 0);\n+            p1.removeHierarchyListener(this);\n+            p1.removeHierarchyBoundsListener(this);\n+            p1.removeHierarchyListener(this);\n+            p1.removeHierarchyBoundsListener(this);\n+\n+            p2.addHierarchyListener(this);\n+            p2.addHierarchyBoundsListener(this);\n+            test1(p2, p2, f, f, 1, 0);\n+            p2.addHierarchyListener(this);\n+            p2.addHierarchyBoundsListener(this);\n+            test1(p2, p2, f, f, 2, 0);\n+            p2.removeHierarchyListener(this);\n+            p2.removeHierarchyBoundsListener(this);\n+            p2.removeHierarchyListener(this);\n+            p2.removeHierarchyBoundsListener(this);\n+\n+            p5.addHierarchyListener(this);\n+            p5.addHierarchyBoundsListener(this);\n+            test1(p5, p5, f, f, 1, 0);\n+            p5.addHierarchyListener(this);\n+            p5.addHierarchyBoundsListener(this);\n+            test1(p5, p5, f, f, 2, 0);\n+            p5.removeHierarchyListener(this);\n+            p5.removeHierarchyBoundsListener(this);\n+            p5.removeHierarchyListener(this);\n+            p5.removeHierarchyBoundsListener(this);\n+\n+            p6.addHierarchyListener(this);\n+            p6.addHierarchyBoundsListener(this);\n+            test1(p6, p6, f, f, 1, 0);\n+            p6.addHierarchyListener(this);\n+            p6.addHierarchyBoundsListener(this);\n+            test1(p6, p6, f, f, 2, 0);\n+            p6.removeHierarchyListener(this);\n+            p6.removeHierarchyBoundsListener(this);\n+            p6.removeHierarchyListener(this);\n+            p6.removeHierarchyBoundsListener(this);\n+\n+            l3.addHierarchyListener(this);\n+            l3.addHierarchyBoundsListener(this);\n+            test1(l3, l3, p1, f, 1, 0);\n+            test1(l3, p1, f, f, 1, 1);\n+            l3.addHierarchyListener(this);\n+            l3.addHierarchyBoundsListener(this);\n+            test1(l3, l3, p1, f, 2, 0);\n+            test1(l3, p1, f, f, 2, 2);\n+            l3.removeHierarchyListener(this);\n+            l3.removeHierarchyBoundsListener(this);\n+            l3.removeHierarchyListener(this);\n+            l3.removeHierarchyBoundsListener(this);\n+\n+            l4.addHierarchyListener(this);\n+            l4.addHierarchyBoundsListener(this);\n+            test1(l4, l4, p1, f, 1, 0);\n+            test1(l4, p1, f, f, 1, 1);\n+            l4.addHierarchyListener(this);\n+            l4.addHierarchyBoundsListener(this);\n+            test1(l4, l4, p1, f, 2, 0);\n+            test1(l4, p1, f, f, 2, 2);\n+            l4.removeHierarchyListener(this);\n+            l4.removeHierarchyBoundsListener(this);\n+            l4.removeHierarchyListener(this);\n+            l4.removeHierarchyBoundsListener(this);\n+\n+            l5.addHierarchyListener(this);\n+            l5.addHierarchyBoundsListener(this);\n+            test1(l5, l5, p2, f, 1, 0);\n+            test1(l5, p2, f, f, 1, 1);\n+            l5.addHierarchyListener(this);\n+            l5.addHierarchyBoundsListener(this);\n+            test1(l5, l5, p2, f, 2, 0);\n+            test1(l5, p2, f, f, 2, 2);\n+            l5.removeHierarchyListener(this);\n+            l5.removeHierarchyBoundsListener(this);\n+            l5.removeHierarchyListener(this);\n+            l5.removeHierarchyBoundsListener(this);\n+\n+            l6.addHierarchyListener(this);\n+            l6.addHierarchyBoundsListener(this);\n+            test1(l6, l6, p2, f, 1, 0);\n+            test1(l6, p2, f, f, 1, 1);\n+            l6.addHierarchyListener(this);\n+            l6.addHierarchyBoundsListener(this);\n+            test1(l6, l6, p2, f, 2, 0);\n+            test1(l6, p2, f, f, 2, 2);\n+            l6.removeHierarchyListener(this);\n+            l6.removeHierarchyBoundsListener(this);\n+            l6.removeHierarchyListener(this);\n+            l6.removeHierarchyBoundsListener(this);\n+\n+            p3.addHierarchyListener(this);\n+            p3.addHierarchyBoundsListener(this);\n+            test1(p3, p3, p5, f, 1, 0);\n+            test1(p3, p5, f, f, 1, 1);\n+            p3.addHierarchyListener(this);\n+            p3.addHierarchyBoundsListener(this);\n+            test1(p3, p3, p5, f, 2, 0);\n+            test1(p3, p5, f, f, 2, 2);\n+            p3.removeHierarchyListener(this);\n+            p3.removeHierarchyBoundsListener(this);\n+            p3.removeHierarchyListener(this);\n+            p3.removeHierarchyBoundsListener(this);\n+\n+            p4.addHierarchyListener(this);\n+            p4.addHierarchyBoundsListener(this);\n+            test1(p4, p4, p6, f, 1, 0);\n+            test1(p4, p6, f, f, 1, 1);\n+            p4.addHierarchyListener(this);\n+            p4.addHierarchyBoundsListener(this);\n+            test1(p4, p4, p6, f, 2, 0);\n+            test1(p4, p6, f, f, 2, 2);\n+            p4.removeHierarchyListener(this);\n+            p4.removeHierarchyBoundsListener(this);\n+            p4.removeHierarchyListener(this);\n+            p4.removeHierarchyBoundsListener(this);\n+\n+            l7.addHierarchyListener(this);\n+            l7.addHierarchyBoundsListener(this);\n+            test1(l7, l7, p3, f, 1, 0);\n+            test1(l7, p3, p5, f, 1, 1);\n+            test1(l7, p5, f, f, 1, 1);\n+            l7.addHierarchyListener(this);\n+            l7.addHierarchyBoundsListener(this);\n+            test1(l7, l7, p3, f, 2, 0);\n+            test1(l7, p3, p5, f, 2, 2);\n+            test1(l7, p5, f, f, 2, 2);\n+            l7.removeHierarchyListener(this);\n+            l7.removeHierarchyBoundsListener(this);\n+            l7.removeHierarchyListener(this);\n+            l7.removeHierarchyBoundsListener(this);\n+\n+            l8.addHierarchyListener(this);\n+            l8.addHierarchyBoundsListener(this);\n+            test1(l8, l8, p3, f, 1, 0);\n+            test1(l8, p3, p5, f, 1, 1);\n+            test1(l8, p5, f, f, 1, 1);\n+            l8.addHierarchyListener(this);\n+            l8.addHierarchyBoundsListener(this);\n+            test1(l8, l8, p3, f, 2, 0);\n+            test1(l8, p3, p5, f, 2, 2);\n+            test1(l8, p5, f, f, 2, 2);\n+            l8.removeHierarchyListener(this);\n+            l8.removeHierarchyBoundsListener(this);\n+            l8.removeHierarchyListener(this);\n+            l8.removeHierarchyBoundsListener(this);\n+\n+            l9.addHierarchyListener(this);\n+            l9.addHierarchyBoundsListener(this);\n+            test1(l9, l9, p4, f, 1, 0);\n+            test1(l9, p4, p6, f, 1, 1);\n+            test1(l9, p6, f, f, 1, 1);\n+            l9.addHierarchyListener(this);\n+            l9.addHierarchyBoundsListener(this);\n+            test1(l9, l9, p4, f, 2, 0);\n+            test1(l9, p4, p6, f, 2, 2);\n+            test1(l9, p6, f, f, 2, 2);\n+            l9.removeHierarchyListener(this);\n+            l9.removeHierarchyBoundsListener(this);\n+            l9.removeHierarchyListener(this);\n+            l9.removeHierarchyBoundsListener(this);\n+\n+            l10.addHierarchyListener(this);\n+            l10.addHierarchyBoundsListener(this);\n+            test1(l10, l10, p4, f, 1, 0);\n+            test1(l10, p4, p6, f, 1, 1);\n+            test1(l10, p6, f, f, 1, 1);\n+            l10.addHierarchyListener(this);\n+            l10.addHierarchyBoundsListener(this);\n+            test1(l10, l10, p4, f, 2, 0);\n+            test1(l10, p4, p6, f, 2, 2);\n+            test1(l10, p6, f, f, 2, 2);\n+            l10.removeHierarchyListener(this);\n+            l10.removeHierarchyBoundsListener(this);\n+            l10.removeHierarchyListener(this);\n+            l10.removeHierarchyBoundsListener(this);\n+\n+\n+\n+            \/\/ test2\n+\n+            l1.addHierarchyListener(this);\n+            l10.addHierarchyListener(this);\n+            l1.addHierarchyBoundsListener(this);\n+            l10.addHierarchyBoundsListener(this);\n+            test2(l1, f, l10, p4, f);\n+            l1.removeHierarchyListener(this);\n+            l10.removeHierarchyListener(this);\n+            l1.removeHierarchyBoundsListener(this);\n+            l10.removeHierarchyBoundsListener(this);\n+\n+            l2.addHierarchyListener(this);\n+            l9.addHierarchyListener(this);\n+            l2.addHierarchyBoundsListener(this);\n+            l9.addHierarchyBoundsListener(this);\n+            test2(l2, f, l9, p4, f);\n+            l2.removeHierarchyListener(this);\n+            l9.removeHierarchyListener(this);\n+            l2.removeHierarchyBoundsListener(this);\n+            l9.removeHierarchyBoundsListener(this);\n+\n+            l3.addHierarchyListener(this);\n+            l8.addHierarchyListener(this);\n+            l3.addHierarchyBoundsListener(this);\n+            l8.addHierarchyBoundsListener(this);\n+            test2(l3, p1, l8, p3, f);\n+            l3.removeHierarchyListener(this);\n+            l8.removeHierarchyListener(this);\n+            l3.removeHierarchyBoundsListener(this);\n+            l8.removeHierarchyBoundsListener(this);\n+\n+            l4.addHierarchyListener(this);\n+            l7.addHierarchyListener(this);\n+            l4.addHierarchyBoundsListener(this);\n+            l7.addHierarchyBoundsListener(this);\n+            test2(l4, p1, l7, p3, f);\n+            l4.removeHierarchyListener(this);\n+            l7.removeHierarchyListener(this);\n+            l4.removeHierarchyBoundsListener(this);\n+            l7.removeHierarchyBoundsListener(this);\n+\n+            l5.addHierarchyListener(this);\n+            l6.addHierarchyListener(this);\n+            l5.addHierarchyBoundsListener(this);\n+            l6.addHierarchyBoundsListener(this);\n+            test2(l5, p2, l6, p2, f);\n+            l5.removeHierarchyListener(this);\n+            l6.removeHierarchyListener(this);\n+            l5.removeHierarchyBoundsListener(this);\n+            l6.removeHierarchyBoundsListener(this);\n+\n+            p1.addHierarchyListener(this);\n+            p4.addHierarchyListener(this);\n+            p1.addHierarchyBoundsListener(this);\n+            p4.addHierarchyBoundsListener(this);\n+            test2(p1, f, p4, p6, f);\n+            p1.removeHierarchyListener(this);\n+            p4.removeHierarchyListener(this);\n+            p1.removeHierarchyBoundsListener(this);\n+            p4.removeHierarchyBoundsListener(this);\n+\n+            p2.addHierarchyListener(this);\n+            p3.addHierarchyListener(this);\n+            p2.addHierarchyBoundsListener(this);\n+            p3.addHierarchyBoundsListener(this);\n+            test2(p2, f, p3, p5, f);\n+            p2.removeHierarchyListener(this);\n+            p3.removeHierarchyListener(this);\n+            p2.removeHierarchyBoundsListener(this);\n+            p3.removeHierarchyBoundsListener(this);\n+\n+            p5.addHierarchyListener(this);\n+            p6.addHierarchyListener(this);\n+            p5.addHierarchyBoundsListener(this);\n+            p6.addHierarchyBoundsListener(this);\n+            test2(p5, f, p6, f, f);\n+            p5.removeHierarchyListener(this);\n+            p6.removeHierarchyListener(this);\n+            p5.removeHierarchyBoundsListener(this);\n+            p6.removeHierarchyBoundsListener(this);\n+        }\n+\n+        EventQueue.invokeAndWait(() -> {\n+            if (f != null) {\n+                f.dispose();\n+                f.removeAll();\n+            }\n+        });\n+\n+        \/\/ mixed listener\/eventEnabled and eventEnabled-only tests\n+\n+        {\n+            EELabel l1 = new EELabel(\"Label 1\");\n+            EEJLabel l2 = new EEJLabel(\"Label 2\");\n+            EEPanel p1 = new EEPanel();\n+            EEJPanel p2 = new EEJPanel();\n+            EEPanel p5 = new EEPanel();\n+            EEJPanel p6 = new EEJPanel();\n+\n+            EELabel l3 = new EELabel(\"Label 3\");\n+            EEJLabel l4 = new EEJLabel(\"Label 4\");\n+            EELabel l5 = new EELabel(\"Label 5\");\n+            EEJLabel l6 = new EEJLabel(\"Label 6\");\n+            EEJPanel p3 = new EEJPanel();\n+            EEPanel p4 = new EEPanel();\n+\n+            EELabel l7 = new EELabel(\"Label 7\");\n+            EEJLabel l8 = new EEJLabel(\"Label 8\");\n+            EEJLabel l9 = new EEJLabel(\"Label 9\");\n+            EELabel l10 = new EELabel(\"Label 10\");\n+\n+            f.add(l1);\n+            f.add(l2);\n+            f.add(p1);\n+            f.add(p2);\n+            f.add(p5);\n+            f.add(p6);\n+\n+            p1.add(l3);\n+            p1.add(l4);\n+\n+            p2.add(l5);\n+            p2.add(l6);\n+\n+            p5.add(p3);\n+\n+            p6.add(p4);\n+\n+            p3.add(l7);\n+            p3.add(l8);\n+\n+            p4.add(l9);\n+            p4.add(l10);\n+\n+\n+\n+            \/\/ test3\n+\n+            l1.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l1.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test1(l1, l1, f, f, 1, 0);\n+            l1.addHierarchyListener(this);\n+            l1.addHierarchyBoundsListener(this);\n+            test1(l1, l1, f, f, 2, 0);\n+            l1.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l1.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            l1.removeHierarchyListener(this);\n+            l1.removeHierarchyBoundsListener(this);\n+\n+            l2.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l2.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test1(l2, l2, f, f, 1, 0);\n+            l2.addHierarchyListener(this);\n+            l2.addHierarchyBoundsListener(this);\n+            test1(l2, l2, f, f, 2, 0);\n+            l2.removeHierarchyListener(this);\n+            l2.removeHierarchyBoundsListener(this);\n+            l2.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l2.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+\n+            p1.addHierarchyListener(this);\n+            p1.addHierarchyBoundsListener(this);\n+            test1(p1, p1, f, f, 1, 0);\n+            p1.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p1.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test1(p1, p1, f, f, 2, 0);\n+            p1.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p1.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            p1.removeHierarchyListener(this);\n+            p1.removeHierarchyBoundsListener(this);\n+\n+            p2.addHierarchyListener(this);\n+            p2.addHierarchyBoundsListener(this);\n+            test1(p2, p2, f, f, 1, 0);\n+            p2.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p2.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test1(p2, p2, f, f, 2, 0);\n+            p2.removeHierarchyListener(this);\n+            p2.removeHierarchyBoundsListener(this);\n+            p2.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p2.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+\n+            p5.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p5.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test1(p5, p5, f, f, 1, 0);\n+            p5.addHierarchyListener(this);\n+            p5.addHierarchyBoundsListener(this);\n+            test1(p5, p5, f, f, 2, 0);\n+            p5.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p5.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            p5.removeHierarchyListener(this);\n+            p5.removeHierarchyBoundsListener(this);\n+\n+            p6.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p6.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test1(p6, p6, f, f, 1, 0);\n+            p6.addHierarchyListener(this);\n+            p6.addHierarchyBoundsListener(this);\n+            test1(p6, p6, f, f, 2, 0);\n+            p6.removeHierarchyListener(this);\n+            p6.removeHierarchyBoundsListener(this);\n+            p6.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p6.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+\n+            l3.addHierarchyListener(this);\n+            l3.addHierarchyBoundsListener(this);\n+            test1(l3, l3, p1, f, 1, 0);\n+            test1(l3, p1, f, f, 1, 1);\n+            l3.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l3.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test1(l3, l3, p1, f, 2, 0);\n+            test1(l3, p1, f, f, 2, 2);\n+            l3.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l3.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            l3.removeHierarchyListener(this);\n+            l3.removeHierarchyBoundsListener(this);\n+\n+            l4.addHierarchyListener(this);\n+            l4.addHierarchyBoundsListener(this);\n+            test1(l4, l4, p1, f, 1, 0);\n+            test1(l4, p1, f, f, 1, 1);\n+            l4.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l4.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test1(l4, l4, p1, f, 2, 0);\n+            test1(l4, p1, f, f, 2, 2);\n+            l4.removeHierarchyListener(this);\n+            l4.removeHierarchyBoundsListener(this);\n+            l4.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l4.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+\n+            l5.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l5.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test1(l5, l5, p2, f, 1, 0);\n+            test1(l5, p2, f, f, 1, 1);\n+            l5.addHierarchyListener(this);\n+            l5.addHierarchyBoundsListener(this);\n+            test1(l5, l5, p2, f, 2, 0);\n+            test1(l5, p2, f, f, 2, 2);\n+            l5.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l5.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            l5.removeHierarchyListener(this);\n+            l5.removeHierarchyBoundsListener(this);\n+\n+            l6.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l6.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test1(l6, l6, p2, f, 1, 0);\n+            test1(l6, p2, f, f, 1, 1);\n+            l6.addHierarchyListener(this);\n+            l6.addHierarchyBoundsListener(this);\n+            test1(l6, l6, p2, f, 2, 0);\n+            test1(l6, p2, f, f, 2, 2);\n+            l6.removeHierarchyListener(this);\n+            l6.removeHierarchyBoundsListener(this);\n+            l6.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l6.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+\n+            p3.addHierarchyListener(this);\n+            p3.addHierarchyBoundsListener(this);\n+            test1(p3, p3, p5, f, 1, 0);\n+            test1(p3, p5, f, f, 1, 1);\n+            p3.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p3.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test1(p3, p3, p5, f, 2, 0);\n+            test1(p3, p5, f, f, 2, 2);\n+            p3.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p3.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            p3.removeHierarchyListener(this);\n+            p3.removeHierarchyBoundsListener(this);\n+\n+            p4.addHierarchyListener(this);\n+            p4.addHierarchyBoundsListener(this);\n+            test1(p4, p4, p6, f, 1, 0);\n+            test1(p4, p6, f, f, 1, 1);\n+            p4.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p4.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test1(p4, p4, p6, f, 2, 0);\n+            test1(p4, p6, f, f, 2, 2);\n+            p4.removeHierarchyListener(this);\n+            p4.removeHierarchyBoundsListener(this);\n+            p4.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p4.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+\n+            l7.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l7.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test1(l7, l7, p3, f, 1, 0);\n+            test1(l7, p3, p5, f, 1, 1);\n+            test1(l7, p5, f, f, 1, 1);\n+            l7.addHierarchyListener(this);\n+            l7.addHierarchyBoundsListener(this);\n+            test1(l7, l7, p3, f, 2, 0);\n+            test1(l7, p3, p5, f, 2, 2);\n+            test1(l7, p5, f, f, 2, 2);\n+            l7.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l7.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            l7.removeHierarchyListener(this);\n+            l7.removeHierarchyBoundsListener(this);\n+\n+            l8.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l8.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test1(l8, l8, p3, f, 1, 0);\n+            test1(l8, p3, p5, f, 1, 1);\n+            test1(l8, p5, f, f, 1, 1);\n+            l8.addHierarchyListener(this);\n+            l8.addHierarchyBoundsListener(this);\n+            test1(l8, l8, p3, f, 2, 0);\n+            test1(l8, p3, p5, f, 2, 2);\n+            test1(l8, p5, f, f, 2, 2);\n+            l8.removeHierarchyListener(this);\n+            l8.removeHierarchyBoundsListener(this);\n+            l8.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l8.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+\n+            l9.addHierarchyListener(this);\n+            l9.addHierarchyBoundsListener(this);\n+            test1(l9, l9, p4, f, 1, 0);\n+            test1(l9, p4, p6, f, 1, 1);\n+            test1(l9, p6, f, f, 1, 1);\n+            l9.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l9.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test1(l9, l9, p4, f, 2, 0);\n+            test1(l9, p4, p6, f, 2, 2);\n+            test1(l9, p6, f, f, 2, 2);\n+            l9.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l9.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            l9.removeHierarchyListener(this);\n+            l9.removeHierarchyBoundsListener(this);\n+\n+            l10.addHierarchyListener(this);\n+            l10.addHierarchyBoundsListener(this);\n+            test1(l10, l10, p4, f, 1, 0);\n+            test1(l10, p4, p6, f, 1, 1);\n+            test1(l10, p6, f, f, 1, 1);\n+            l10.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l10.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test1(l10, l10, p4, f, 2, 0);\n+            test1(l10, p4, p6, f, 2, 2);\n+            test1(l10, p6, f, f, 2, 2);\n+            l10.removeHierarchyListener(this);\n+            l10.removeHierarchyBoundsListener(this);\n+            l10.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l10.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+\n+\n+\n+            \/\/ test4\n+\n+            l1.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l10.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l1.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            l10.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test2(l1, f, l10, p4, f);\n+            l1.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l10.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l1.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            l10.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+\n+            l2.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l9.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l2.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            l9.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test2(l2, f, l9, p4, f);\n+            l2.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l9.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l2.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            l9.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+\n+            l3.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l8.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l3.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            l8.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test2(l3, p1, l8, p3, f);\n+            l3.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l8.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l3.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            l8.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+\n+            l4.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l7.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l4.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            l7.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test2(l4, p1, l7, p3, f);\n+            l4.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l7.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l4.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            l7.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+\n+            l5.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l6.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l5.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            l6.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test2(l5, p2, l6, p2, f);\n+            l5.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l6.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            l5.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            l6.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+\n+            p1.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p4.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p1.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            p4.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test2(p1, f, p4, p6, f);\n+            p1.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p4.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p1.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            p4.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+\n+            p2.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p3.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p2.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            p3.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test2(p2, f, p3, p5, f);\n+            p2.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p3.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p2.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            p3.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+\n+            p5.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p6.pubEnableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p5.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            p6.pubEnableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            test2(p5, f, p6, f, f);\n+            p5.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p6.pubDisableEvents(AWTEvent.HIERARCHY_EVENT_MASK);\n+            p5.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+            p6.pubDisableEvents(AWTEvent.HIERARCHY_BOUNDS_EVENT_MASK);\n+        }\n+\n+        System.out.println(\"passed\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/HierarchyEvent\/SpecTest.java","additions":1248,"deletions":0,"binary":false,"changes":1248,"status":"added"},{"patch":"@@ -0,0 +1,286 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4353201\n+  @summary Wrong modifiers on InputEvent\n+  @key headful\n+  @run main MouseModsTest\n+*\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.AWTException;\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.MouseInfo;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class MouseModsTest {\n+    static volatile int testCtrl = 0;\n+    static volatile int testBtn = 0;\n+    static volatile boolean passed = true;\n+\n+    static final int BUTTONS = Math.min(3, MouseInfo.getNumberOfButtons());\n+    static final int KEYS = 2;\n+\n+    static Frame frame;\n+    static Panel panel;\n+    static Canvas button1;\n+    static Canvas button2;\n+\n+    static volatile Point pt1;\n+    static volatile Point pt2;\n+\n+    public static void main(String args[]) throws AWTException,\n+            InterruptedException, InvocationTargetException {\n+\n+        EventQueue.invokeAndWait(() -> {\n+            frame = new Frame(\"MouseModsTest\");\n+            panel = new Panel();\n+            button1 = new TestCanvas();\n+            button2 = new TestCanvas();\n+            frame.setSize(300, 200);\n+            panel.add(button1);\n+            panel.add(button2);\n+            frame.add(panel);\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n+        });\n+\n+        try {\n+            Robot robot;\n+            robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.setAutoDelay(50);\n+            robot.delay(1000);\n+\n+            EventQueue.invokeAndWait(() -> {\n+                pt1 = button1.getLocationOnScreen();\n+                pt2 = button2.getLocationOnScreen();\n+\n+                pt1.x += button1.getSize().width \/ 2;\n+                pt1.y += button1.getSize().height \/ 2;\n+\n+                pt2.x += button2.getSize().width \/ 2;\n+                pt2.y += button2.getSize().height \/ 2;\n+            });\n+\n+            robot.mouseMove(pt2.x, pt2.y);\n+\n+            \/\/Keyboard to Mouse Test\n+            for (int ctrl = 1; ctrl <= KEYS; ++ctrl) {\n+                testCtrl = ctrl;\n+                robot.keyPress(getKeycode(ctrl));\n+                robot.keyPress(KeyEvent.VK_A);\n+                robot.keyRelease(KeyEvent.VK_A);\n+                for (int btn = 2; btn <= BUTTONS; ++btn) {\n+                    testBtn = btn;\n+                    robot.mousePress(getMouseModifier(btn));\n+                    robot.mouseMove(pt1.x, pt1.y);\n+                    robot.mouseMove(pt2.x, pt2.y);\n+                    robot.mouseRelease(getMouseModifier(btn));\n+                }\n+                robot.keyRelease(getKeycode(ctrl));\n+            }\n+\n+            \/\/Mouse to Mouse Test\n+            for (int btn1 = 1; btn1 <= BUTTONS; ++btn1) {\n+                testBtn = btn1;\n+                robot.mousePress(getMouseModifier(btn1));\n+                for (int btn = 1; btn <= BUTTONS; ++btn) {\n+                    if (btn == btn1) continue;\n+                    testBtn = btn;\n+                    robot.mousePress(getMouseModifier(btn));\n+                    robot.mouseMove(pt1.x, pt1.y);\n+                    robot.mouseMove(pt2.x, pt2.y);\n+                    robot.mouseRelease(getMouseModifier(btn));\n+                }\n+                testBtn = btn1;\n+                robot.mouseRelease(getMouseModifier(btn1));\n+            }\n+            testBtn = 0;\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+\n+        if (!passed) {\n+            throw new RuntimeException(\"Test Failed\");\n+        }\n+    }\n+\n+    static int getKeycode(int ctrl) {\n+        switch (ctrl) {\n+        case 1: return KeyEvent.VK_SHIFT;\n+        case 2: return KeyEvent.VK_CONTROL;\n+        case 3: return KeyEvent.VK_ALT;\n+        default: return 0;\n+        }\n+    }\n+\n+    static int getKeyModifier(int ctrl) {\n+        switch (ctrl) {\n+        case 1: return InputEvent.SHIFT_MASK;\n+        case 2: return InputEvent.CTRL_MASK;\n+        case 3: return InputEvent.ALT_MASK;\n+        default: return 0;\n+        }\n+    }\n+\n+    static int getMouseModifier(int btn) {\n+        switch (btn) {\n+        case 1: return InputEvent.BUTTON1_MASK;\n+        case 2: return InputEvent.BUTTON2_MASK;\n+        case 3: return InputEvent.BUTTON3_MASK;\n+        default: return 0;\n+        }\n+    }\n+\n+    static final int allKeyMods =\n+    InputEvent.SHIFT_MASK\n+    | InputEvent.CTRL_MASK\n+    | InputEvent.ALT_MASK;\n+\n+    static final int allMouseMods =\n+    InputEvent.BUTTON1_MASK\n+    | InputEvent.BUTTON2_MASK\n+    | InputEvent.BUTTON3_MASK;\n+\n+    static void printInputEvent(InputEvent e) {\n+        System.out.println(e);\n+        if (e.isAltDown()) {\n+            System.out.println(\"Alt is Down\");\n+        }\n+        if (e.isControlDown()) {\n+            System.out.println(\"Ctrl is Down\");\n+        }\n+        if (e.isShiftDown()) {\n+            System.out.println(\"Shift is Down\");\n+        }\n+        if (e.isMetaDown()) {\n+            System.out.println(\"Meta is Down\");\n+        }\n+    }\n+\n+    static class TestCanvas extends Canvas {\n+        public TestCanvas() {\n+            setSize(100, 100);\n+            setBackground(Color.blue);\n+            enableEvents(AWTEvent.MOUSE_EVENT_MASK\n+                         | AWTEvent.MOUSE_MOTION_EVENT_MASK\n+                         | AWTEvent.KEY_EVENT_MASK);\n+        }\n+\n+        protected void processMouseEvent(MouseEvent e) {\n+            try {\n+                if (testBtn == 0) {\n+                    return;\n+                }\n+                if (e.getID() == MouseEvent.MOUSE_ENTERED\n+                    || e.getID() == MouseEvent.MOUSE_EXITED)\n+                {\n+                    if ((e.getModifiers() & getMouseModifier(testBtn)) != 0) {\n+                        System.out.println(\"Mouse modifiers on MOUSE_ENTERED, MOUSE_EXITED are set\");\n+                    } else {\n+                        printInputEvent(e);\n+                        System.out.println(\"Cur mods = \" + (e.getModifiers() & allMouseMods) + \" Wanted = \" +\n+                                          getMouseModifier(testBtn));\n+                        passed = false;\n+                        throw new RuntimeException(\"Mouse modifiers on MOUSE_ENTERED, MOUSE_EXITED aren't set\");\n+                    }\n+                }\n+                if (e.getID() == MouseEvent.MOUSE_PRESSED\n+                    || e.getID() == MouseEvent.MOUSE_RELEASED)\n+                {\n+                    if ((e.getModifiers() & getMouseModifier(testBtn)) != 0) {\n+                        System.out.println(\"Right Mouse modifiers on MOUSE_PRESSED, MOUSE_RELEASED\");\n+                    } else {\n+                        printInputEvent(e);\n+                        System.out.println(\"Cur mods = \" + (e.getModifiers() & allMouseMods) + \" Wanted = \" +\n+                                          getMouseModifier(testBtn));\n+                        passed = false;\n+                        throw new RuntimeException(\"Wrong Mouse modifiers on MOUSE_PRESSED, MOUSE_RELEASED\");\n+                    }\n+                }\n+            } finally {\n+                synchronized (frame) {\n+                    frame.notify();\n+                }\n+            }\n+        }\n+\n+        protected void processMouseMotionEvent(MouseEvent e) {\n+            try {\n+                if (testBtn == 0) {\n+                    return;\n+                }\n+                if (e.getID() == MouseEvent.MOUSE_DRAGGED) {\n+                    if ((e.getModifiers() & getMouseModifier(testBtn)) != 0) {\n+                        System.out.println(\"Mouse modifiers on MOUSE_DRAGGED are set\");\n+                    } else {\n+                        printInputEvent(e);\n+                        System.out.println(\"Cur mods = \" + (e.getModifiers() & allMouseMods) + \" Wanted = \" +\n+                                          getMouseModifier(testBtn));\n+                        passed = false;\n+                        throw new RuntimeException(\"Mouse modifiers on MOUSE_DRAGGED aren't set\");\n+                    }\n+                }\n+            } finally {\n+                synchronized (frame) {\n+                    frame.notify();\n+                }\n+            }\n+        }\n+\n+        protected void processKeyEvent(KeyEvent e) {\n+            try {\n+                if (e.getKeyCode() != KeyEvent.VK_A) {\n+                    return;\n+                }\n+                if ((e.getModifiers() & getKeyModifier(testCtrl)) != 0) {\n+                    System.out.println(\"Right Key modifiers on KeyEvent\");\n+                } else {\n+                    printInputEvent(e);\n+                    passed = false;\n+                    throw new RuntimeException(\"Wrong Key modifiers on KeyEvent\");\n+                }\n+            } finally {\n+                synchronized (frame) {\n+                    frame.notify();\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/InputEvent\/MouseModsTest.java","additions":286,"deletions":0,"binary":false,"changes":286,"status":"added"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4403712\n+  @summary Error thrown in InvokeAndWait runnable causes hang\n+  @run main CatchingThrowableTest\n+*\/\n+\n+import java.awt.EventQueue;\n+\n+public class CatchingThrowableTest {\n+    public static void main(String args[]) {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                throw new RuntimeException(\"My Error\");\n+            });\n+        } catch (InterruptedException ex) {\n+            ex.printStackTrace();\n+        } catch (java.lang.reflect.InvocationTargetException ex) {\n+            ex.printStackTrace();\n+        }\n+\n+        System.err.println(\"Test passed.\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/InvocationEvent\/CatchingThrowableTest.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4343344\n+  @summary Tests key modifiers when ALT_GRAPH key is pressed by Robot.\n+  @key headful\n+  @requires (os.family != \"mac\")\n+  @run main AltGraphModifier\n+*\/\n+\n+import java.awt.AWTException;\n+import java.awt.Color;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\n+public class AltGraphModifier {\n+    static Frame frame;\n+\n+    static final int[] modifierKeys = {\n+        KeyEvent.VK_ALT_GRAPH\n+    };\n+\n+    static final int[] inputMasks = {\n+        InputEvent.ALT_GRAPH_DOWN_MASK\n+    };\n+\n+    static boolean[] modifierPress = new boolean[modifierKeys.length];\n+\n+    static volatile boolean modKeys;\n+    static int modKeyCount;\n+    static volatile boolean failed = false;\n+\n+\n+    public static void main (String args[]) throws\n+            InterruptedException, InvocationTargetException, AWTException {\n+\n+        EventQueue.invokeAndWait(() -> {\n+            frame = new Frame(\"Modifier Robot Key BUG\");\n+            frame.setLayout(new FlowLayout());\n+            frame.setSize(200, 200);\n+            frame.addKeyListener(new KeyListener() {\n+                @Override\n+                public void keyTyped(KeyEvent e) {\n+                }\n+\n+                @Override\n+                public void keyPressed(KeyEvent kp){\n+                    System.out.println(kp);\n+                    if (modKeys == true) {\n+                        for (int i=0; i < modifierKeys.length; i++) {\n+                            if (modifierPress[i] == true) {\n+                                if ((kp.getModifiersEx() & inputMasks[i]) == inputMasks[i]) {\n+                                } else {\n+                                    failed = true;\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+\n+                @Override\n+                public void keyReleased(KeyEvent kr){\n+                }\n+            });\n+            frame.setBackground(Color.blue);\n+            frame.setVisible(true);\n+        });\n+\n+        try {\n+            Robot robot = new Robot();\n+\n+            robot.delay(1000);\n+            robot.mouseMove((int) (frame.getLocationOnScreen().getX()\n+                + frame.getWidth() \/ 2),\n+                (int) (frame.getLocationOnScreen().getY()\n+                + frame.getHeight() \/ 2));\n+            robot.delay(1000);\n+            robot.setAutoDelay(1000);\n+\n+            \/\/Imbed operations here\n+            modKeys = true;\n+\n+            for (modKeyCount = 0; modKeyCount < modifierKeys.length; modKeyCount++) {\n+                \/\/Press the Modifier Key\n+                modifierPress[modKeyCount] = true;\n+                robot.keyPress(modifierKeys[modKeyCount]);\n+\n+                frame.requestFocus();\n+                robot.delay(1000);\n+\n+                \/\/Press the Modifier Key\n+                modifierPress[modKeyCount] = false;\n+                robot.keyRelease(modifierKeys[modKeyCount]);\n+                robot.delay(1000);\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+\n+        if (failed) {\n+            throw new RuntimeException(\"FAIL MESSAGE ---- Modifier \"\n+                    +\" Mask is not set when the Key : \"\n+                    +\"AltGraph\"\n+                    + \" Key is pressed by Robot.\\n\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/AltGraphModifier.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4754155\n+ * @summary Tests that KeyTyped events are fired for the Cancel key\n+ *          and that no extraneous characters are entered as a result\n+ * @key headful\n+ * @run main CancelKeyTyped\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.TextField;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\n+public class CancelKeyTyped {\n+    static volatile boolean cancelKeyTypedReceived = false;\n+    static Frame frame;\n+    static TextField tf;\n+    static final String ORIGINAL = \"0123456789\";\n+\n+    public static void main(String[] args) throws AWTException,\n+            InterruptedException, InvocationTargetException {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.setAutoDelay(100);\n+\n+            EventQueue.invokeAndWait(CancelKeyTyped::init);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            \/\/ Press and release Cancel\n+            robot.keyPress(KeyEvent.VK_CANCEL);\n+            robot.keyRelease(KeyEvent.VK_CANCEL);\n+\n+            if (cancelKeyTypedReceived) {\n+                if (tf.getText().equals(ORIGINAL)) {\n+                    System.out.println(\"Test PASSED\");\n+                } else {\n+                    System.out.println(\"Test FAILED: wrong string\");\n+                    throw new RuntimeException(\"The test failed: wrong string: \"\n+                            + tf.getText());\n+                }\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public static void init() {\n+        frame = new Frame(\"CancelKeyTyped\");\n+        tf = new TextField(ORIGINAL, 20);\n+        frame.add(tf);\n+        frame.setSize(300, 100);\n+        frame.setVisible(true);\n+        frame.validate();\n+\n+        tf.requestFocusInWindow();\n+\n+        tf.addKeyListener(new KeyListener() {\n+            @Override\n+            public void keyTyped(KeyEvent evt) {\n+                printKey(evt);\n+\n+                int keychar = evt.getKeyChar();\n+                if (keychar == 24) { \/\/ Cancel character is 24 or \\u0018\n+                    cancelKeyTypedReceived = true;\n+                }\n+            }\n+\n+            @Override\n+            public void keyPressed(KeyEvent evt) {\n+                printKey(evt);\n+            }\n+\n+            @Override\n+            public void keyReleased(KeyEvent evt) {\n+                printKey(evt);\n+            }\n+\n+            protected void printKey(KeyEvent evt) {\n+                switch (evt.getID()) {\n+                    case KeyEvent.KEY_TYPED:\n+                    case KeyEvent.KEY_PRESSED:\n+                    case KeyEvent.KEY_RELEASED:\n+                        break;\n+                    default:\n+                        return;\n+                }\n+\n+                System.out.println(\"params= \" + evt.paramString() + \"  \\n\" +\n+                        \"KeyChar: \" + evt.getKeyChar() + \" = \" +\n+                        (int) evt.getKeyChar() +\n+                        \"   KeyCode: \" + evt.getKeyCode() +\n+                        \"   Modifiers: \" + evt.getModifiersEx());\n+\n+                if (evt.isActionKey()) {\n+                    System.out.println(\"Action Key\");\n+                }\n+\n+                System.out.println(\"keyText= \" +\n+                        evt.getKeyText(evt.getKeyCode()) + \"\\n\");\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/KeyTyped\/CancelKeyTyped.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"}]}