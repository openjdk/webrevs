{"files":[{"patch":"@@ -278,1 +278,1 @@\n-            Content link = writer.getLink(new LinkInfoImpl(configuration, MEMBER, exceptions.get(0)));\n+            Content link = writer.getLink(new LinkInfoImpl(configuration, THROWS_TYPE, exceptions.get(0)));\n@@ -284,1 +284,1 @@\n-                Content exceptionLink = writer.getLink(new LinkInfoImpl(configuration, MEMBER,\n+                Content exceptionLink = writer.getLink(new LinkInfoImpl(configuration, THROWS_TYPE,\n@@ -325,1 +325,1 @@\n-            SimpleTypeVisitor9<Boolean, Void> stv = new SimpleTypeVisitor9<Boolean, Void>() {\n+            SimpleTypeVisitor9<Boolean, Void> stv = new SimpleTypeVisitor9<>() {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/AbstractExecutableMemberWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -216,1 +216,1 @@\n-         * A receiver type\n+         * A receiver type.\n@@ -218,1 +218,11 @@\n-        RECEIVER_TYPE\n+        RECEIVER_TYPE,\n+\n+        \/**\n+         * A record component within a class signature.\n+         *\/\n+        RECORD_COMPONENT,\n+\n+        \/**\n+         * A type thrown from a method.\n+         *\/\n+        THROWS_TYPE\n@@ -401,2 +411,0 @@\n-                excludeTypeBounds = true;\n-                break;\n@@ -404,0 +412,1 @@\n+            case THROWS_TYPE:\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/LinkInfoImpl.java","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ \/*\n+  * @test\n+  * @bug 8253700\n+  * @summary spurious \"extends Throwable\" at end of method declaration\n+  * throws section.  Make sure that the link is below a Throws heading.\n+  * @library \/tools\/lib ..\/lib\n+  * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+  * @build JavadocTester toolbox.ToolBox\n+  * @run main TestThrows\n+  *\/\n+\n+ import java.io.IOException;\n+ import java.nio.file.Path;\n+\n+ import toolbox.ToolBox;\n+\n+ public class TestThrows extends JavadocTester {\n+\n+     public static void main(String... args) throws Exception {\n+         TestThrows tester = new TestThrows();\n+         tester.runTests(m -> new Object[] { Path.of(m.getName()) });\n+     }\n+\n+     private final ToolBox tb = new ToolBox();\n+\n+     @Test\n+     public void testThrowsWithBound(Path base) throws IOException {\n+         Path src = base.resolve(\"src\");\n+         tb.writeJavaFiles(src,\n+                String.join(System.lineSeparator(),\n+                     \"\/**\",\n+                     \" * This is interface C.\",\n+                     \" *\/\",\n+                     \"public interface C {\",\n+                     \"    \/**\",\n+                     \"     * Method m.\",\n+                     \"     * @param <T> the throwable\",\n+                     \"     * @throws T if a specific error occurs\",\n+                     \"     * @throws Exception if an exception occurs\",\n+                     \"     *\/\",\n+                     \"    <T extends Throwable> void m() throws T, Exception;\",\n+                     \"}\"\n+                     ));\n+\n+         javadoc(\"-encoding\", \"utf-8\", \"-d\", base.resolve(\"out\").toString(),\n+                 src.resolve(\"C.java\").toString());\n+         checkExit(Exit.OK);\n+\n+         checkOutput(\"C.html\", true,\n+                     \"<pre class=\\\"methodSignature\\\">&lt;T extends java.lang.Throwable&gt;&nbsp;void&nbsp;m()\",\n+                     \"                                throws T,\",\n+                     \"                                       java.lang.Exception<\/pre>\",\n+                     \"<dl>\",\n+                     \"<dt><span class=\\\"paramLabel\\\">Type Parameters:<\/span><\/dt>\",\n+                     \"<dd><code>T<\/code> - the throwable<\/dd>\",\n+                     \"<dt><span class=\\\"throwsLabel\\\">Throws:<\/span><\/dt>\",\n+                     \"<dd><code>T<\/code> - if a specific error occurs<\/dd>\",\n+                     \"<dd><code>java.lang.Exception<\/code> - if an exception occurs<\/dd>\",\n+                     \"<dd><code>T extends java.lang.Throwable<\/code><\/dd>\",\n+                     \"<\/dl>\"\n+                     );\n+     }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testThrows\/TestThrows.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}