{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,26 @@\n-\/**\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.FontMetrics;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Panel;\n+import java.awt.geom.AffineTransform;\n+import java.awt.image.BufferedImage;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Pageable;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Objects;\n+import javax.print.attribute.HashPrintRequestAttributeSet;\n+import javax.print.attribute.PrintRequestAttributeSet;\n+\n+import static java.awt.EventQueue.invokeAndWait;\n+\n+\/*\n@@ -27,0 +52,3 @@\n+ * @key printer\n+ * @library ..\/..\/..\/regtesthelpers\n+ * @build PassFailJFrame\n@@ -28,1 +56,1 @@\n- * @run main\/manual=yesno\/timeout=900 ClippedImages\n+ * @run main\/manual ClippedImages\n@@ -31,14 +59,35 @@\n-import java.io.*;\n-import java.awt.*;\n-import java.awt.geom.*;\n-import java.awt.event.*;\n-import java.awt.print.*;\n-import java.awt.image.BufferedImage;\n-import javax.print.*;\n-import javax.print.attribute.*;\n-\n-public class ClippedImages extends Frame implements ActionListener {\n-\n-    private ClippedImageCanvas c;\n-\n-    public static void main(String args[]) {\n+public class ClippedImages {\n+\n+    private static ClippedImageCanvas c;\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException {\n+\n+        if (PrinterJob.lookupPrintServices().length > 0) {\n+\n+            String instruction =\n+                \"This is a manual test as it requires that you compare the\\n\" +\n+                \"on-screen rendering with the printed output.\\n\" +\n+                \"\\n\" +\n+                \"Select the 'Print All' button to print out the test. It will\\n\" +\n+                \"generate 4 sides of content: as it will print each of 2 sets\\n\" +\n+                \"of transformed images in portrait, and landscape orientations.\\n\" +\n+                \"\\n\" +\n+                \"The sets of images are in turn made up of two similar sets of\\n\" +\n+               \" pages: one is 'random' images, the other is 16 squares. Use the\\n\" +\n+                \"'Toggle Contents' button to view the screen rendering. For each\\n\" +\n+                \"page compare the printed content to the same on-screen one\\n\" +\n+                \"taking careful note of\\n\" +\n+                \"a) the positions of the red\/blue circles on the corners\\n\" +\n+                \"b) that numerical text on the image is displayed similarly\\n\" +\n+                \"e) that the green quadrilaterals match on-screen\\n\" +\n+                \"f) that the rendering is clipped at the default (typically 1 inch)\\n\" +\n+                \"margins of the page.\\n\" +\n+                \"\\n\" +\n+                \"The test PASSES if the onscreen and printed rendering match\"\n+                ;\n+\n+            PassFailJFrame passFailJFrame = new PassFailJFrame(\"Test \" +\n+                    \"Instruction\", instruction, 15);\n+            invokeAndWait(ClippedImages::createTestUI);\n+            passFailJFrame.awaitAndCheck();\n@@ -46,2 +95,5 @@\n-        ClippedImages f = new ClippedImages();\n-        f.setVisible(true);\n+        } else {\n+            System.out.println(\"Printer not configured or available.\"\n+                    + \" Test cannot continue.\");\n+            PassFailJFrame.forcePass();\n+        }\n@@ -50,2 +102,2 @@\n-    public ClippedImages() {\n-        super(\"Clipped Src Area Image Printing Test\");\n+    public static void createTestUI() {\n+        Frame frame = new Frame(\"Clipped Src Area Image Printing Test\");\n@@ -53,1 +105,1 @@\n-        add(\"Center\", c);\n+        frame.add(c, BorderLayout.CENTER);\n@@ -56,1 +108,4 @@\n-        paintButton.addActionListener(this);\n+        paintButton.addActionListener((ae) -> {\n+            c.toggleContents();\n+            c.repaint();\n+        });\n@@ -59,1 +114,1 @@\n-        printThisButton.addActionListener(this);\n+        printThisButton.addActionListener((ae) -> printOne());\n@@ -62,1 +117,1 @@\n-        printAllButton.addActionListener(this);\n+        printAllButton.addActionListener((ae) -> printAll());\n@@ -68,10 +123,4 @@\n-        add(\"South\", p);\n-        add(\"North\", getInstructions());\n-        addWindowListener(new WindowAdapter() {\n-                public void windowClosing(WindowEvent e) {\n-                    System.exit(0);\n-                }\n-            });\n-\n-        pack();\n-    }\n+        frame.add(p, BorderLayout.SOUTH);\n+        frame.setLocationRelativeTo(null);\n+        frame.pack();\n+        frame.setVisible(true);\n@@ -79,23 +128,2 @@\n-    private TextArea getInstructions() {\n-        TextArea ta = new TextArea(18, 60);\n-        ta.setFont(new Font(\"Dialog\", Font.PLAIN, 11));\n-        ta.setText\n-            (\"This is a manual test as it requires that you compare \"+\n-             \"the on-screen rendering with the printed output.\\n\"+\n-             \"Select the 'Print All' button to print out the test\\n\"+\n-             \"It will generate 4 sides of content: as it will print \"+\n-             \"each of 2 sets of transformed images in portrait, \\n\"+\n-             \"and landscape orientations. \\n\"+\n-             \"The sets of images are in turn made up\\n\"+\n-             \"of two similar sets of pages: one is 'random' images,\\n \"+\n-             \" the other is 16 squares.\\n\"+\n-             \"Use the 'Toggle Contents' button to view the screen rendering\\n\"+\n-             \"For each page compare the printed content to the same\\n\"+\n-             \"on-screen one taking careful note of\\n\"+\n-             \"a) the positions of the red\/blue circles on the corners\\n\"+\n-             \"b) that numerical text on the image is displayed similarly\\n\"+\n-             \"e) that the green quadrilaterals match on-screen\\n\"+\n-             \"f) that the rendering is clipped at the default (typically 1 inch) \"+\n-             \"margins of the page.\\n\"+\n-             \"The test PASSES if the onscreen and printed rendering match\");\n-        return ta;\n+        PassFailJFrame.addTestWindow(frame);\n+        PassFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n@@ -104,13 +132,1 @@\n-    public void actionPerformed(ActionEvent e) {\n-\n-        if (e.getActionCommand().equals(\"Print This\")) {\n-            printOne();\n-        } else if (e.getActionCommand().equals(\"Print All\")) {\n-            printAll();\n-        } else if (e.getActionCommand().equals(\"Toggle Contents\")) {\n-            c.toggleContents();\n-            c.repaint();\n-        }\n-    }\n-\n-    private void printOne() {\n+    private static void printOne() {\n@@ -118,1 +134,0 @@\n-\n@@ -120,3 +135,3 @@\n-        if (pj != null && (false||pj.printDialog(attrs))) {\n-            c.setPrinterJob(pj, false);\n-            pj.setPrintable(c);\n+        c.setPrinterJob(pj, false);\n+        pj.setPrintable(c);\n+        if (pj.printDialog(attrs)) {\n@@ -131,0 +146,3 @@\n+        } else {\n+            throw new RuntimeException(\"Test failed : \"\n+                    + \"User selected 'Cancel' button on the print dialog\");\n@@ -134,1 +152,1 @@\n-    private void printAll() {\n+    private static void printAll() {\n@@ -137,3 +155,3 @@\n-        if (pj != null && (false||pj.printDialog(attrs))) {\n-            c.setPrinterJob(pj, true);\n-            pj.setPageable(c);\n+        c.setPrinterJob(pj, true);\n+        pj.setPageable(c);\n+        if (pj.printDialog(attrs)) {\n@@ -148,0 +166,3 @@\n+        } else {\n+            throw new RuntimeException(\"Test failed : \"\n+                    + \"User selected 'Cancel' button on the print dialog\");\n@@ -170,1 +191,1 @@\n-                String s = (new Integer(++cnt)).toString();\n+                String s = String.valueOf(++cnt);\n@@ -198,5 +219,2 @@\n-        throws IndexOutOfBoundsException {\n-\n-        if (pageIndex < 0 || pageIndex >= getNumberOfPages()) {\n-            throw new IndexOutOfBoundsException();\n-        }\n+            throws IndexOutOfBoundsException {\n+        Objects.checkIndex(pageIndex, getNumberOfPages());\n@@ -206,0 +224,3 @@\n+            case 0 :\n+                pf.setOrientation(PageFormat.PORTRAIT);\n+                break;\n@@ -207,7 +228,3 @@\n-        case 0 :\n-            pf.setOrientation(PageFormat.PORTRAIT);\n-            break;\n-\n-        case 1:\n-            pf.setOrientation(PageFormat.LANDSCAPE);\n-             break;\n+            case 1:\n+                pf.setOrientation(PageFormat.LANDSCAPE);\n+                break;\n@@ -227,1 +244,2 @@\n-        throws IndexOutOfBoundsException {\n+            throws IndexOutOfBoundsException {\n+        Objects.checkIndex(pageIndex, getNumberOfPages());\n@@ -229,3 +247,0 @@\n-        if (pageIndex < 0 || pageIndex >= getNumberOfPages()) {\n-            throw new IndexOutOfBoundsException();\n-        }\n@@ -289,1 +304,1 @@\n-       for (int p=0;p<size.height;p+=20) {\n+        for (int p=0;p<size.height;p+=20) {\n@@ -375,1 +390,1 @@\n-         \/* sA + sD -> dA + dD - the normal untransformed case *\/\n+        \/* sA + sD -> dA + dD - the normal untransformed case *\/\n@@ -391,1 +406,0 @@\n-        \/******\/\n@@ -409,1 +423,0 @@\n-        \/******\/\n@@ -427,1 +440,0 @@\n-        \/******\/\n@@ -448,5 +460,5 @@\n-     \/* Size is chosen to match default imageable width of a NA letter\n-      * page. This means there will be clipping, what is clipped will\n-      * depend on PageFormat orientation.\n-      *\/\n-     public Dimension getPreferredSize() {\n+    \/* Size is chosen to match default imageable width of a NA letter\n+     * page. This means there will be clipping, what is clipped will\n+     * depend on PageFormat orientation.\n+     *\/\n+    public Dimension getPreferredSize() {\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/ImagePrinting\/ClippedImages.java","additions":118,"deletions":106,"binary":false,"changes":224,"status":"modified"},{"patch":"@@ -154,1 +154,1 @@\n-        PassFailJFrame.addTestFrame(f);\n+        PassFailJFrame.addTestWindow(f);\n@@ -157,1 +157,1 @@\n-        PassFailJFrame.positionTestFrame(f, PassFailJFrame.Position.HORIZONTAL);\n+        PassFailJFrame.positionTestWindow(f, PassFailJFrame.Position.HORIZONTAL);\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintGlyphVectorTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-            PassFailJFrame.addTestFrame(frame);\n+            PassFailJFrame.addTestWindow(frame);\n@@ -83,1 +83,1 @@\n-            PassFailJFrame.positionTestFrame(frame,\n+            PassFailJFrame.positionTestWindow(frame,\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/PrintLatinCJKTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import java.awt.Frame;\n@@ -28,0 +27,1 @@\n+import java.awt.Window;\n@@ -54,1 +54,1 @@\n-    private static final List<Frame> frameList = new ArrayList<>();\n+    private static final List<Window> windowList = new ArrayList<>();\n@@ -175,1 +175,1 @@\n-        frameList.add(frame);\n+        windowList.add(frame);\n@@ -204,1 +204,1 @@\n-        invokeAndWait(PassFailJFrame::disposeFrames);\n+        invokeAndWait(PassFailJFrame::disposeWindows);\n@@ -218,2 +218,2 @@\n-     * Dispose all the frame(s) i,e both the test instruction frame as\n-     * well as the frame that is added via addTestFrame(Frame frame)\n+     * Dispose all the window(s) i,e both the test instruction frame and\n+     * the window(s) that is added via addTestWindow(Window testWindow)\n@@ -221,3 +221,3 @@\n-    private static synchronized void disposeFrames() {\n-        for (Frame f : frameList) {\n-            f.dispose();\n+    private static synchronized void disposeWindows() {\n+        for (Window win : windowList) {\n+            win.dispose();\n@@ -260,2 +260,2 @@\n-     * Position the instruction frame with testFrame ( testcase created\n-     * frame) by the specified position\n+     * Position the instruction frame with testWindow (testcase created\n+     * window) by the specified position.\n@@ -263,1 +263,1 @@\n-     * testFrame\n+     * testWindow.\n@@ -265,1 +265,1 @@\n-     * @param testFrame test frame that the test is created\n+     * @param testWindow test window that the test is created\n@@ -267,3 +267,3 @@\n-     *                  instruction frame and test frame as arranged side by\n-     *                  side or VERTICAL ( both test instruction frame and\n-     *                  test frame as arranged up and down)\n+     *                  instruction frame and test window as arranged\n+     *                  side by side) or VERTICAL (both test instruction\n+     *                  frame and test window as arranged up and down)\n@@ -271,1 +271,1 @@\n-    public static void positionTestFrame(Frame testFrame, Position position) {\n+    public static void positionTestWindow(Window testWindow, Position position) {\n@@ -277,1 +277,1 @@\n-            testFrame.setLocation((frame.getLocation().x + frame.getWidth() + 5), frame.getY());\n+            testWindow.setLocation((frame.getLocation().x + frame.getWidth() + 5), frame.getY());\n@@ -282,1 +282,1 @@\n-            testFrame.setLocation(frame.getX(),\n+            testWindow.setLocation(frame.getX(),\n@@ -288,3 +288,3 @@\n-     * Add the testFrame to the frameList so that test instruction frame\n-     * and testFrame and any other frame used in this test is disposed\n-     * via disposeFrames()\n+     * Add the testWindow to the windowList so that test instruction frame\n+     * and testWindow and any other windows used in this test is disposed\n+     * via disposeWindows().\n@@ -292,1 +292,1 @@\n-     * @param testFrame testFrame that needs to be disposed\n+     * @param testWindow testWindow that needs to be disposed\n@@ -294,2 +294,2 @@\n-    public static synchronized void addTestFrame(Frame testFrame) {\n-        frameList.add(testFrame);\n+    public static synchronized void addTestWindow(Window testWindow) {\n+        windowList.add(testWindow);\n@@ -318,0 +318,2 @@\n+        testFailedReason = \"Failure Reason:\\n\" +\n+                           \"forceFail called\";\n@@ -321,1 +323,0 @@\n-\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":27,"deletions":26,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -71,2 +71,2 @@\n-                    PassFailJFrame.addTestFrame(testObj);\n-                    PassFailJFrame.positionTestFrame(testObj, PassFailJFrame.Position.HORIZONTAL);\n+                    PassFailJFrame.addTestWindow(testObj);\n+                    PassFailJFrame.positionTestWindow(testObj, PassFailJFrame.Position.HORIZONTAL);\n","filename":"test\/jdk\/javax\/swing\/JRadioButton\/bug4380543.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -70,2 +70,2 @@\n-            PassFailJFrame.addTestFrame(frame);\n-            PassFailJFrame.positionTestFrame(frame,\n+            PassFailJFrame.addTestWindow(frame);\n+            PassFailJFrame.positionTestWindow(frame,\n","filename":"test\/jdk\/javax\/swing\/JTabbedPane\/4209065\/bug4209065.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}