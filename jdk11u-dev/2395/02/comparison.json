{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import javax.tools.ForwardingJavaFileManager;\n@@ -37,0 +36,1 @@\n+import javax.tools.ForwardingJavaFileManager;\n@@ -39,0 +39,1 @@\n+import javax.tools.JavaFileManager;\n@@ -109,1 +110,1 @@\n-    private static class FileManagerWrapper extends ForwardingJavaFileManager {\n+    private static class FileManagerWrapper extends ForwardingJavaFileManager<JavaFileManager> {\n@@ -170,1 +171,2 @@\n-     * @throws RuntimeException if the compilation did not succeed\n+     * @throws RuntimeException if the compilation did not succeed or if closing\n+     *         the {@code JavaFileManager} used for the compilation did not succeed\n@@ -175,14 +177,0 @@\n-        CompilationTask task = getCompilationTask(file, options);\n-\n-        if(!task.call()) {\n-            throw new RuntimeException(\"Could not compile \" + className + \" with source code \" + sourceCode);\n-        }\n-\n-        return file.getByteCode();\n-    }\n-\n-    private static JavaCompiler getCompiler() {\n-        return ToolProvider.getSystemJavaCompiler();\n-    }\n-\n-    private static CompilationTask getCompilationTask(MemoryJavaFileObject file, String... options) {\n@@ -198,1 +186,14 @@\n-        return getCompiler().getTask(null, new FileManagerWrapper(file, moduleOverride), null, opts, null, Arrays.asList(file));\n+        try (JavaFileManager fileManager = new FileManagerWrapper(file, moduleOverride)) {\n+            CompilationTask task = getCompiler().getTask(null, fileManager, null, opts, null, Arrays.asList(file));\n+            if (!task.call()) {\n+                throw new RuntimeException(\"Could not compile \" + className + \" with source code \" + sourceCode);\n+            }\n+\n+            return file.getByteCode();\n+        } catch (IOException ioe) {\n+            throw new RuntimeException(ioe);\n+        }\n+    }\n+\n+    private static JavaCompiler getCompiler() {\n+        return ToolProvider.getSystemJavaCompiler();\n","filename":"test\/lib\/jdk\/test\/lib\/compiler\/InMemoryJavaCompiler.java","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"}]}