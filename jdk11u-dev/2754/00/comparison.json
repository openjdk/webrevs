{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,12 +24,0 @@\n-\/*\n-  @test\n-  @key headful\n-  @bug       6182359\n-  @summary   Tests that Window having non-focusable owner can't be a focus owner.\n-  @library   ..\/..\/regtesthelpers\n-  @build     Util\n-  @run       main NonfocusableOwnerTest\n-*\/\n-\n-import java.awt.*;\n-import java.awt.event.*;\n@@ -38,0 +26,21 @@\n+import java.awt.AWTEvent;\n+import java.awt.Button;\n+import java.awt.Dialog;\n+import java.awt.Frame;\n+import java.awt.KeyboardFocusManager;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.Window;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.WindowEvent;\n+\n+\/*\n+ ( @test\n+ * @key headful\n+ * @bug 6182359\n+ * @summary Tests that Window having non-focusable owner can't be a focus owner.\n+ * @library ..\/..\/regtesthelpers\n+ * @build Util\n+ * @run main NonfocusableOwnerTest\n+ *\/\n@@ -58,1 +67,1 @@\n-        frame = new Frame(\"Frame\");\n+        frame = new Frame(\"NonfocusableOwnerTest\");\n@@ -95,0 +104,1 @@\n+        robot.waitForIdle();\n@@ -98,0 +108,1 @@\n+        robot.waitForIdle();\n@@ -114,0 +125,1 @@\n+        robot.waitForIdle();\n@@ -117,0 +129,1 @@\n+        robot.waitForIdle();\n@@ -120,0 +133,1 @@\n+        robot.waitForIdle();\n@@ -137,0 +151,1 @@\n+        robot.waitForIdle();\n@@ -140,0 +155,1 @@\n+        robot.waitForIdle();\n@@ -144,0 +160,1 @@\n+        robot.waitForIdle();\n","filename":"test\/jdk\/java\/awt\/Focus\/NonFocusableWindowTest\/NonfocusableOwnerTest.java","additions":31,"deletions":14,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,0 +66,1 @@\n+import javax.swing.JSplitPane;\n@@ -117,0 +118,7 @@\n+ * For simple test UI, use {@code Builder.splitUI}, or explicitly\n+ * {@code Builder.splitUIRight} or {@code Builder.splitUIBottom} with\n+ * a {@code PanelCreator}. The framework will call the provided\n+ * {@code createUIPanel} to create the component with test UI and\n+ * will place it as the right or bottom component in a split pane\n+ * along with instruction UI.\n+ * <p>\n@@ -169,0 +177,8 @@\n+    \/**\n+     * List of windows or frames managed by the {@code PassFailJFrame}\n+     * framework. These windows are automatically disposed of when the\n+     * test is finished.\n+     * <p>\n+     * <b>Note:<\/b> access to this field has to be synchronized by\n+     * {@code PassFailJFrame.class}.\n+     *\/\n@@ -279,4 +295,27 @@\n-    private PassFailJFrame(Builder builder) throws InterruptedException,\n-            InvocationTargetException {\n-        this(builder.title, builder.instructions, builder.testTimeOut,\n-             builder.rows, builder.columns, builder.screenCapture);\n+    \/**\n+     * Configures {@code PassFailJFrame} using the builder.\n+     * It creates test UI specified using {@code testUI} or {@code splitUI}\n+     * methods on EDT.\n+     * @param builder the builder with the parameters\n+     * @throws InterruptedException if the current thread is interrupted while\n+     *              waiting for EDT to complete a task\n+     * @throws InvocationTargetException if an exception is thrown while\n+     *              running a task on EDT\n+     *\/\n+    private PassFailJFrame(final Builder builder)\n+            throws InterruptedException, InvocationTargetException {\n+        invokeOnEDT(() -> createUI(builder));\n+\n+        if (!builder.splitUI && builder.panelCreator != null) {\n+            JComponent content = builder.panelCreator.createUIPanel();\n+            String title = content.getName();\n+            if (title == null) {\n+                title = \"Test UI\";\n+            }\n+            JDialog dialog = new JDialog(frame, title, false);\n+            dialog.addWindowListener(windowClosingHandler);\n+            dialog.add(content, BorderLayout.CENTER);\n+            dialog.pack();\n+            addTestWindow(dialog);\n+            positionTestWindow(dialog, builder.position);\n+        }\n@@ -302,5 +341,4 @@\n-                invokeOnEDT(() -> {\n-                    builder.positionWindows\n-                           .positionTestWindows(unmodifiableList(builder.testWindows),\n-                                                builder.instructionUIHandler);\n-                });\n+                invokeOnEDT(() ->\n+                        builder.positionWindows\n+                               .positionTestWindows(unmodifiableList(builder.testWindows),\n+                                                    builder.instructionUIHandler));\n@@ -344,0 +382,45 @@\n+        frame.addWindowListener(windowClosingHandler);\n+\n+        frame.add(createInstructionUIPanel(instructions,\n+                                           testTimeOut,\n+                                           rows, columns,\n+                                           enableScreenCapture),\n+                  BorderLayout.CENTER);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        addTestWindow(frame);\n+    }\n+\n+    private static void createUI(Builder builder) {\n+        frame = new JFrame(builder.title);\n+        frame.setLayout(new BorderLayout());\n+\n+        frame.addWindowListener(windowClosingHandler);\n+\n+        JComponent instructionUI =\n+                createInstructionUIPanel(builder.instructions,\n+                                         builder.testTimeOut,\n+                                         builder.rows, builder.columns,\n+                                         builder.screenCapture);\n+\n+        if (builder.splitUI) {\n+            JSplitPane splitPane = new JSplitPane(\n+                    builder.splitUIOrientation,\n+                    instructionUI,\n+                    builder.panelCreator.createUIPanel());\n+            frame.add(splitPane, BorderLayout.CENTER);\n+        } else {\n+            frame.add(instructionUI, BorderLayout.CENTER);\n+        }\n+\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        addTestWindow(frame);\n+    }\n+\n+    private static JComponent createInstructionUIPanel(String instructions,\n+                                                       long testTimeOut,\n+                                                       int rows, int columns,\n+                                                       boolean enableScreenCapture) {\n+        JPanel main = new JPanel(new BorderLayout());\n+\n@@ -346,1 +429,1 @@\n-        frame.add(testTimeoutLabel, BorderLayout.NORTH);\n+        main.add(testTimeoutLabel, BorderLayout.NORTH);\n@@ -353,1 +436,1 @@\n-        frame.add(new JScrollPane(text), BorderLayout.CENTER);\n+        main.add(new JScrollPane(text), BorderLayout.CENTER);\n@@ -375,1 +458,2 @@\n-        frame.addWindowListener(windowClosingHandler);\n+        main.add(buttonsPanel, BorderLayout.SOUTH);\n+        main.setMinimumSize(main.getPreferredSize());\n@@ -377,4 +461,1 @@\n-        frame.add(buttonsPanel, BorderLayout.SOUTH);\n-        frame.pack();\n-        frame.setLocationRelativeTo(null);\n-        addTestWindow(frame);\n+        return main;\n@@ -436,0 +517,16 @@\n+    \/**\n+     * Creates a component (panel) with test UI\n+     * to be hosted in a split pane or a frame.\n+     *\/\n+    @FunctionalInterface\n+    public interface PanelCreator {\n+        \/**\n+         * Creates a component which hosts test UI. This component\n+         * is placed into a split pane or into a frame to display the UI.\n+         * <p>\n+         * This method is called by the framework on the EDT.\n+         * @return a component (panel) with test UI\n+         *\/\n+        JComponent createUIPanel();\n+    }\n+\n@@ -637,4 +734,6 @@\n-                windowList.stream()\n-                          .filter(Window::isShowing)\n-                          .map(Window::getBounds)\n-                          .forEach(PassFailJFrame::captureScreen);\n+                synchronized (PassFailJFrame.class) {\n+                    windowList.stream()\n+                              .filter(Window::isShowing)\n+                              .map(Window::getBounds)\n+                              .forEach(PassFailJFrame::captureScreen);\n+                }\n@@ -953,0 +1052,3 @@\n+        private PanelCreator panelCreator;\n+        private boolean splitUI;\n+        private int splitUIOrientation;\n@@ -1093,2 +1195,96 @@\n-        public Builder positionTestUI(PositionWindows positionWindows) {\n-            this.positionWindows = positionWindows;\n+        \/**\n+         * Adds a {@code PanelCreator} which the framework will use\n+         * to create a component and place it into a dialog.\n+         *\n+         * @param panelCreator a {@code PanelCreator} to create a component\n+         *                     with test UI\n+         * @return this builder\n+         * @throws IllegalStateException if split UI was enabled using\n+         *              a {@code splitUI} method\n+         *\/\n+        public Builder testUI(PanelCreator panelCreator) {\n+            if (splitUI) {\n+                throw new IllegalStateException(\"Can't combine splitUI and \"\n+                                                + \"testUI with panelCreator\");\n+            }\n+            this.panelCreator = panelCreator;\n+            return this;\n+        }\n+\n+        \/**\n+         * Adds a {@code PanelCreator} which the framework will use\n+         * to create a component with test UI and display it in a split pane.\n+         * <p>\n+         * By default, horizontal orientation is used,\n+         * and test UI is displayed to the right of the instruction UI.\n+         *\n+         * @param panelCreator a {@code PanelCreator} to create a component\n+         *                     with test UI\n+         * @return this builder\n+         *\n+         * @throws IllegalStateException if a {@code PanelCreator} is\n+         *              already set\n+         * @throws IllegalArgumentException if {panelCreator} is {@code null}\n+         *\/\n+        public Builder splitUI(PanelCreator panelCreator) {\n+            return splitUIRight(panelCreator);\n+        }\n+\n+        \/**\n+         * Adds a {@code PanelCreator} which the framework will use\n+         * to create a component with test UI and display it\n+         * to the right of instruction UI.\n+         *\n+         * @param panelCreator a {@code PanelCreator} to create a component\n+         *                     with test UI\n+         * @return this builder\n+         *\n+         * @throws IllegalStateException if a {@code PanelCreator} is\n+         *              already set\n+         * @throws IllegalArgumentException if {panelCreator} is {@code null}\n+         *\/\n+        public Builder splitUIRight(PanelCreator panelCreator) {\n+            return splitUI(panelCreator, JSplitPane.HORIZONTAL_SPLIT);\n+        }\n+\n+        \/**\n+         * Adds a {@code PanelCreator} which the framework will use\n+         * to create a component with test UI and display it\n+         * in the bottom of instruction UI.\n+         *\n+         * @param panelCreator a {@code PanelCreator} to create a component\n+         *                     with test UI\n+         * @return this builder\n+         *\n+         * @throws IllegalStateException if a {@code PanelCreator} is\n+         *              already set\n+         * @throws IllegalArgumentException if {panelCreator} is {@code null}\n+         *\/\n+        public Builder splitUIBottom(PanelCreator panelCreator) {\n+            return splitUI(panelCreator, JSplitPane.VERTICAL_SPLIT);\n+        }\n+\n+        \/**\n+         * Enables split UI and stores the orientation of the split pane.\n+         *\n+         * @param panelCreator a {@code PanelCreator} to create a component\n+         *                     with test UI\n+         * @param splitUIOrientation orientation of the split pane\n+         * @return this builder\n+         *\n+         * @throws IllegalStateException if a {@code PanelCreator} is\n+         *              already set\n+         * @throws IllegalArgumentException if {panelCreator} is {@code null}\n+         *\/\n+        private Builder splitUI(PanelCreator panelCreator,\n+                                int splitUIOrientation) {\n+            if (panelCreator == null) {\n+                throw new IllegalArgumentException(\"A PanelCreator cannot be null\");\n+            }\n+            if (this.panelCreator != null) {\n+                throw new IllegalStateException(\"A PanelCreator is already set\");\n+            }\n+\n+            splitUI = true;\n+            this.splitUIOrientation = splitUIOrientation;\n+            this.panelCreator = panelCreator;\n@@ -1132,1 +1328,2 @@\n-                && (testWindows != null || windowListCreator != null)) {\n+                && (testWindows != null || windowListCreator != null\n+                    || (!splitUI && panelCreator != null))) {\n@@ -1137,0 +1334,8 @@\n+            if (panelCreator != null) {\n+                if (splitUI && (testWindows != null || windowListCreator != null)) {\n+                    \/\/ TODO Is it required? We can support both\n+                    throw new IllegalStateException(\"Split UI is not allowed \"\n+                                                    + \"with additional windows\");\n+                }\n+            }\n+\n@@ -1140,1 +1345,1 @@\n-                            + \"provide an a list of windows to the builder\");\n+                            + \"provide a list of windows to the builder\");\n@@ -1179,0 +1384,5 @@\n+    \/**\n+     * Creates a builder for configuring {@code PassFailJFrame}.\n+     *\n+     * @return the builder for configuring {@code PassFailJFrame}\n+     *\/\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":235,"deletions":25,"binary":false,"changes":260,"status":"modified"}]}