{"files":[{"patch":"@@ -163,4 +163,4 @@\n-    sprintf(bp, \"#%d\/%d\", bn, le_kind); bp += strlen(bp);\n-    if (le_bci != 0)  { sprintf(bp, \"\/bci%d\",  le_bci);  bp += strlen(bp); }\n-    if (le_back != 0) { sprintf(bp, \"\/back%d\", le_back); bp += strlen(bp); }\n-    if (le_len != 0)  { sprintf(bp, \"\/len%d\",  le_len);  bp += strlen(bp); }\n+    int nbytes = snprintf(bp, sizeof(b_name_buf), \"#%d\/%d\", bn, le_kind); bp += nbytes;\n+    if (le_bci != 0)  { nbytes += snprintf(bp, sizeof(b_name_buf) - nbytes, \"\/bci%d\",  le_bci);  bp += nbytes; }\n+    if (le_back != 0) { nbytes += snprintf(bp, sizeof(b_name_buf) - nbytes, \"\/back%d\", le_back); bp += nbytes; }\n+    if (le_len != 0)  { nbytes += snprintf(bp, sizeof(b_name_buf) - nbytes, \"\/len%d\",  le_len);  bp += nbytes; }\n","filename":"src\/jdk.pack\/share\/native\/common-unpack\/bands.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -979,1 +979,2 @@\n-  buf.malloc(100);\n+  int buf_len = 100;\n+  buf.malloc(buf_len);\n@@ -981,5 +982,5 @@\n-  sprintf(maxS, \"%d\", max);\n-  sprintf(minS, \"%d\", min);\n-  if (max == INT_MAX_VALUE)  strcpy(maxS, \"max\");\n-  if (min == INT_MIN_VALUE)  strcpy(minS, \"min\");\n-  sprintf((char*)buf.ptr, \"(%d,%d,%d,%d) L=%d r=[%s,%s]\",\n+  int nmax = snprintf(maxS, sizeof(maxS), \"%d\", max);\n+  int nmin = snprintf(minS, sizeof(minS), \"%d\", min);\n+  if (max == INT_MAX_VALUE)  snprintf(maxS + nmax, sizeof(maxS) - nmax, \"max\");\n+  if (min == INT_MIN_VALUE)  snprintf(minS + nmin, sizeof(minS) - nmin, \"min\");\n+  snprintf((char*)buf.ptr, buf_len, \"(%d,%d,%d,%d) L=%d r=[%s,%s]\",\n","filename":"src\/jdk.pack\/share\/native\/common-unpack\/coding.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -674,1 +674,1 @@\n-    sprintf(message, \"@\" ERROR_FORMAT \": magic\/ver = \"\n+    snprintf(message, sizeof(message), \"@\" ERROR_FORMAT \": magic\/ver = \"\n@@ -3723,1 +3723,1 @@\n-    sprintf((char*)buf.ptr, \"0x%08x\", value.i);\n+    snprintf((char*)buf.ptr, 12, \"0x%08x\", value.i);\n@@ -3728,1 +3728,1 @@\n-    sprintf((char*)buf.ptr, \"0x\" LONG_LONG_HEX_FORMAT, value.l);\n+    snprintf((char*)buf.ptr, 24, \"0x\" LONG_LONG_HEX_FORMAT, value.l);\n","filename":"src\/jdk.pack\/share\/native\/common-unpack\/unpack.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -421,1 +421,1 @@\n-  const char*  saveIntStr(int num) { char buf[30]; sprintf(buf, \"%d\", num); return saveStr(buf); }\n+  const char*  saveIntStr(int num) { char buf[30]; snprintf(buf, 30, \"%d\", num); return saveStr(buf); }\n","filename":"src\/jdk.pack\/share\/native\/common-unpack\/unpack.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-  sprintf(message, \"@assert failed: %s\\n\", p);\n+  snprintf(message, sizeof(message), \"@assert failed: %s\\n\", p);\n@@ -129,1 +129,1 @@\n-    sprintf(fname, \"mtr%d.txt\", getpid());\n+    snprintf(fname, sizeof(fname), \"mtr%d.txt\", getpid());\n","filename":"src\/jdk.pack\/share\/native\/common-unpack\/utils.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}