{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,2 +64,1 @@\n-        ForceGC gc = new ForceGC();\n-        assertTrue(gc.await(() -> myOwnClassLoaderWeakReference.get() == null));\n+        assertTrue(ForceGC.wait(() -> myOwnClassLoaderWeakReference.get() == null));\n","filename":"test\/jdk\/java\/io\/ObjectStreamClass\/TestOSCClassLoaderLeak.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import java.lang.ref.Cleaner;\n@@ -46,3 +45,0 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-import java.util.function.BooleanSupplier;\n@@ -51,0 +47,1 @@\n+import jdk.test.lib.util.ForceGC;\n@@ -113,3 +110,1 @@\n-        new ForceGC().await(() -> weakLoader.get() == null);\n-\n-        if (weakLoader.get() != null) {\n+        if (!ForceGC.wait(() -> weakLoader.get() == null)) {\n@@ -144,33 +139,0 @@\n-\n-    \/**\n-     * Utility class to invoke System.gc()\n-     *\/\n-    static class ForceGC {\n-        private  final CountDownLatch cleanerInvoked = new CountDownLatch(1);\n-        private  final Cleaner cleaner = Cleaner.create();\n-\n-        ForceGC() {\n-            cleaner.register(new Object(), () -> cleanerInvoked.countDown());\n-        }\n-\n-        void doit() {\n-            try {\n-                for (int i = 0; i < 10; i++) {\n-                    System.gc();\n-                    if (cleanerInvoked.await(1L, TimeUnit.SECONDS)) {\n-                        return;\n-                    }\n-                }\n-            } catch (InterruptedException unexpected) {\n-                throw new AssertionError(\"unexpected InterruptedException\");\n-            }\n-        }\n-\n-        void await(BooleanSupplier s) {\n-            for (int i = 0; i < 10; i++) {\n-                if (s.getAsBoolean()) return;\n-                doit();\n-            }\n-            throw new AssertionError(\"failed to satisfy condition\");\n-        }\n-    }\n","filename":"test\/jdk\/java\/lang\/reflect\/callerCache\/ReflectionCallerCacheTest.java","additions":3,"deletions":41,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -93,1 +93,0 @@\n-            ForceGC gc = new ForceGC();\n@@ -95,2 +94,1 @@\n-            gc.await(() -> weakRef[finalI].get() == null);\n-            if (weakRef[i].get() != null) {\n+            if (!ForceGC.wait(() -> weakRef[finalI].get() == null)) {\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Provider\/MultipleLogins.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,3 +26,3 @@\n-import java.lang.ref.Cleaner;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import java.lang.ref.PhantomReference;\n+import java.lang.ref.Reference;\n+import java.lang.ref.ReferenceQueue;\n@@ -35,22 +35,3 @@\n-    private final CountDownLatch cleanerInvoked = new CountDownLatch(1);\n-    private final Cleaner cleaner = Cleaner.create();\n-    private Object o;\n-\n-    public ForceGC() {\n-        this.o = new Object();\n-        cleaner.register(o, () -> cleanerInvoked.countDown());\n-    }\n-\n-    private void doit(int iter) {\n-        try {\n-            for (int i = 0; i < 10; i++) {\n-                System.gc();\n-                System.out.println(\"doit() iter: \" + iter + \", gc \" + i);\n-                if (cleanerInvoked.await(1L, TimeUnit.SECONDS)) {\n-                    return;\n-                }\n-            }\n-        } catch (InterruptedException unexpected) {\n-            throw new AssertionError(\"unexpected InterruptedException\");\n-        }\n-    }\n+    \/\/ The jtreg testing timeout factor.\n+    private static final double TIMEOUT_FACTOR = Double.valueOf(\n+            System.getProperty(\"test.timeout.factor\", \"1.0\"));\n@@ -59,2 +40,3 @@\n-     * Causes the current thread to wait until the {@code BooleanSupplier} returns true,\n-     * unless the thread is interrupted or a predefined waiting time elapses.\n+     * Causes the current thread to wait until the {@code booleanSupplier}\n+     * returns true, or a specific waiting time elapses.  The waiting time\n+     * is 1 second scaled with the jtreg testing timeout factor.\n@@ -62,4 +44,3 @@\n-     * @param s boolean supplier\n-     * @return true if the {@code BooleanSupplier} returns true and false if\n-     *         the predefined waiting time elapsed before the count reaches zero.\n-     * @throws InterruptedException if the current thread is interrupted while waiting\n+     * @param booleanSupplier boolean supplier\n+     * @return true if the {@code booleanSupplier} returns true, or false\n+     *     if did not complete after the specific waiting time.\n@@ -67,8 +48,24 @@\n-    public boolean await(BooleanSupplier s) {\n-        o = null; \/\/ Keep reference to Object until now, to ensure the Cleaner\n-                  \/\/ doesn't count down the latch before await() is called.\n-        for (int i = 0; i < 10; i++) {\n-            if (s.getAsBoolean()) return true;\n-            doit(i);\n-            try { Thread.sleep(1000); } catch (InterruptedException e) {\n-                throw new AssertionError(\"unexpected interrupted sleep\", e);\n+    public static boolean wait(BooleanSupplier booleanSupplier) {\n+        ReferenceQueue<Object> queue = new ReferenceQueue<>();\n+        Object obj = new Object();\n+        PhantomReference<Object> ref = new PhantomReference<>(obj, queue);\n+        obj = null;\n+        Reference.reachabilityFence(obj);\n+        Reference.reachabilityFence(ref);\n+\n+        int retries = (int)(Math.round(1000L * TIMEOUT_FACTOR) \/ 200);\n+        for (; retries >= 0; retries--) {\n+            if (booleanSupplier.getAsBoolean()) {\n+                return true;\n+            }\n+\n+            System.gc();\n+\n+            try {\n+                \/\/ The remove() will always block for the specified milliseconds\n+                \/\/ if the reference has already been removed from the queue.\n+                \/\/ But it is fine.  For most cases, the 1st GC is sufficient\n+                \/\/ to trigger and complete the cleanup.\n+                queue.remove(200L);\n+            } catch (InterruptedException ie) {\n+                \/\/ ignore, the loop will try again\n@@ -77,1 +74,1 @@\n-        return false;\n+        return booleanSupplier.getAsBoolean();\n","filename":"test\/lib\/jdk\/test\/lib\/util\/ForceGC.java","additions":37,"deletions":40,"binary":false,"changes":77,"status":"modified"}]}