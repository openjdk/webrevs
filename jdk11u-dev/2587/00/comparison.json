{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -321,1 +321,0 @@\n-static BOOL altGRPressed = NO;\n@@ -569,12 +568,3 @@\n-\n-            if (cur->nsMask == NSAlternateKeyMask) {\n-                if (leftAltKeyPressed == YES) {\n-                    javaModifiers |= isExtMods? cur->javaExtMask : cur->javaMask;\n-                    if (altGRPressed == NO)\n-                        break;\n-                    } else {\n-                        leftAltKeyPressed = YES;\n-                        altGRPressed = YES;\n-                        continue;\n-                    }\n-                }\n+            \/\/This code will consider the mask value for left alt as well as\n+            \/\/right alt, but that should be ok, since right alt contains left alt\n+            \/\/mask value.\n@@ -582,0 +572,3 @@\n+            if (cur->nsMask == NSAlternateKeyMask && leftAltKeyPressed) {\n+                    break; \/\/since right alt key struct is defined last, break out of the loop                }\n+            }\n","filename":"src\/java.desktop\/macosx\/native\/libawt_lwawt\/awt\/AWTEvent.m","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n- @requires (os.family != \"windows\" & os.family != \"mac\")\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/AltGraphModifierTest\/AltGraphModifierTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8218917\n+ * @summary Tests whether sending an ALT_GRAPH key once, will result in the\n+ * system reporting only ALT_GRAPH even if an ALT was sent and vice versa.\n+ * @run main AltKeyBug\n+ *\/\n+import javax.swing.JTextField;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+import java.awt.Robot;\n+import java.awt.event.KeyListener;\n+import java.awt.event.KeyEvent;\n+\n+public class AltKeyBug {\n+    private static JFrame f;\n+    private static boolean rightAltPressed = false;\n+    private static boolean throwException = false;\n+    private static String errorString;\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(50);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                JTextField comp = new JTextField();\n+                comp.addKeyListener(new KeyListener() {\n+                    @Override public void keyTyped(KeyEvent e) {}\n+                    @Override public void keyPressed(KeyEvent e) {\n+                        System.out.println(\"ModEx : \" +e.getModifiersEx());\n+                        System.out.println(\"Mod : \" +e.getModifiers());\n+                        System.out.println(\"ALT_DOWN : \" + e.isAltDown());\n+                        System.out.println(\"ALT_GR_DOWN: \" + e.isAltGraphDown());\n+                        System.out.println(\"-----------\");\n+                        if (rightAltPressed && !e.isAltGraphDown()) {\n+                            throwException = true;\n+                            errorString = \"Right Alt press was sent but not received back.\";\n+                        } else if (!rightAltPressed && e.isAltGraphDown()) {\n+                            throwException = true;\n+                            errorString = \"Left Alt press was sent, but received Right Alt\";\n+                        }\n+                    }\n+                    @Override public void keyReleased(KeyEvent e) {}\n+                });\n+                f = new JFrame();\n+                f.add(comp);\n+                f.setSize(100,100);\n+                f.setVisible(true);\n+            });\n+\n+            for(int i = 0; i < 20; i++) {\n+                rightAltPressed = true;\n+                robot.keyPress(KeyEvent.VK_ALT_GRAPH);\n+                robot.keyRelease(KeyEvent.VK_ALT_GRAPH);\n+\n+                robot.waitForIdle();\n+\n+                if (throwException) {\n+                    throw new RuntimeException(errorString);\n+                }\n+                rightAltPressed = false;\n+                robot.keyPress(KeyEvent.VK_ALT);\n+                robot.keyRelease(KeyEvent.VK_ALT);\n+\n+                robot.waitForIdle();\n+\n+                if (throwException) {\n+                    throw new RuntimeException(errorString);\n+                }\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(()-> {\n+                if (f != null)\n+                    f.dispose();\n+            });\n+        }\n+\n+        System.out.println(\"Test passed.\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/keyboard\/8218917\/AltKeyBug.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"}]}