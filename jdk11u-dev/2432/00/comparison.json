{"files":[{"patch":"@@ -0,0 +1,159 @@\n+\/*\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Choice;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.Window;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.imageio.ImageIO;\n+\n+\/**\n+ * @test\n+ * @bug 4478780\n+ * @key headful\n+ * @summary Tests that Choice can be accessed and controlled by keyboard.\n+ *\/\n+public class AccessibleChoiceTest {\n+    \/\/Declare things used in the test, like buttons and labels here\n+    Frame frame = new Frame(\"window owner\");\n+    Window win = new Window(frame);\n+    Choice choice = new Choice();\n+    Button def = new Button(\"default owner\");\n+    CountDownLatch go = new CountDownLatch(1);\n+\n+    public static void main(final String[] args) throws IOException {\n+        AccessibleChoiceTest app = new AccessibleChoiceTest();\n+        app.test();\n+    }\n+\n+    private void test() throws IOException {\n+        try {\n+            init();\n+            start();\n+        } finally {\n+            if (frame != null) frame.dispose();\n+            if (win != null) win.dispose();\n+        }\n+    }\n+\n+    public void init() {\n+        win.setLayout (new FlowLayout ());\n+        win.add(def);\n+        def.addFocusListener(new FocusAdapter() {\n+                public void focusGained(FocusEvent e) {\n+                    go.countDown();\n+                }\n+            });\n+        choice.add(\"One\");\n+        choice.add(\"Two\");\n+        win.add(choice);\n+    }\n+\n+    public void start () throws IOException {\n+        frame.setVisible(true);\n+        win.pack();\n+        win.setLocation(100, 200);\n+        win.setVisible(true);\n+\n+        Robot robot = null;\n+        try {\n+            robot = new Robot();\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Can't create robot\");\n+        }\n+        robot.waitForIdle();\n+        robot.delay(1000);\n+        robot.setAutoDelay(150);\n+        robot.setAutoWaitForIdle(true);\n+\n+        \/\/ Focus default button and wait till it gets focus\n+        Point loc = def.getLocationOnScreen();\n+        robot.mouseMove(loc.x+2, loc.y+2);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        try {\n+            go.await(1, TimeUnit.SECONDS);\n+        } catch (InterruptedException ie) {\n+            throw new RuntimeException(\"Interrupted !!!\");\n+        }\n+\n+        if (!def.isFocusOwner()) {\n+            throw new RuntimeException(\"Button doesn't have focus\");\n+        }\n+\n+        \/\/ Press Tab key to move focus to Choice\n+        robot.keyPress(KeyEvent.VK_TAB);\n+        robot.keyRelease(KeyEvent.VK_TAB);\n+\n+        robot.delay(500);\n+\n+        \/\/ Press Down key to select next item in the choice(Motif 2.1)\n+        \/\/ If bug exists we won't be able to do so\n+        robot.keyPress(KeyEvent.VK_DOWN);\n+        robot.keyRelease(KeyEvent.VK_DOWN);\n+\n+        robot.delay(500);\n+\n+        String osName = System.getProperty(\"os.name\").toLowerCase();\n+        if (osName.startsWith(\"mac\")) {\n+            robot.keyPress(KeyEvent.VK_DOWN);\n+            robot.keyRelease(KeyEvent.VK_DOWN);\n+            robot.delay(500);\n+            robot.keyPress(KeyEvent.VK_ENTER);\n+            robot.keyRelease(KeyEvent.VK_ENTER);\n+        }\n+\n+        robot.delay(1000);\n+\n+        \/\/ On success second item should be selected\n+        if (choice.getSelectedItem() != choice.getItem(1)) {\n+            \/\/ Print out os name to check if mac conditional is relevant\n+            System.err.println(\"Failed on os: \" + osName);\n+\n+            \/\/ Save image to better debug the status of test when failing\n+            GraphicsConfiguration ge = GraphicsEnvironment\n+                    .getLocalGraphicsEnvironment().getDefaultScreenDevice()\n+                    .getDefaultConfiguration();\n+            BufferedImage failImage = robot.createScreenCapture(ge.getBounds());\n+            ImageIO.write(failImage, \"png\", new File(\"failImage.png\"));\n+\n+            throw new RuntimeException(\"Choice can't be controlled by keyboard\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Focus\/UnaccessibleChoice\/AccessibleChoiceTest.java","additions":159,"deletions":0,"binary":false,"changes":159,"status":"added"}]}