{"files":[{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Dialog;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.image.BufferedImage;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @bug 6435804\n+ * @summary REGRESSION: NetBeans 5.0 icon no longer shows up when you alt-tab on XP\n+ * @key headful\n+ * @requires (os.family != \"mac\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ALTTABIconBeingErased\n+ *\/\n+\n+public class ALTTABIconBeingErased {\n+\n+    private static final String INSTRUCTIONS =\n+            \"This test verifies that the Frame's icon is not corrupted after showing\\n\"\n+                    + \"and disposing owned dialog\\n\"\n+                    + \"You would see a button in a Frame.\\n\"\n+                    + \"1) The frame should have icon with 2 black and 2 white squares.\\n\"\n+                    + \"2) Verify that icon appearing on ALT-TAB is also a\\n\"\n+                    + \"light icon.\\n\"\n+                    + \"3) Now open a child by pressing on \\\"Open Child\\\" button.\\n\"\n+                    + \"Child Dialog should appear. It should have the same icon as frame.\\n\"\n+                    + \"4) Now close the dialog by pressing Space or clicking on a button in it.\\n\"\n+                    + \"Dialog should be disposed now.\\n\"\n+                    + \"5) Verify that icon on ALT-TAB is the same as before\";\n+\n+    private static Frame frame;\n+    private static final int SIZE = 300;\n+\n+    private static void updateIconImage() {\n+        BufferedImage image = new BufferedImage(SIZE, SIZE, BufferedImage.TYPE_INT_ARGB);\n+\n+        Graphics gr = image.createGraphics();\n+        gr.setColor(Color.WHITE);\n+        gr.fillRect(0, 0, SIZE, SIZE);\n+\n+        gr.setColor(Color.BLACK);\n+        gr.fillRect(0, 0, SIZE \/ 2, SIZE \/ 2);\n+        gr.fillRect(SIZE \/ 2, SIZE \/ 2, SIZE, SIZE);\n+\n+        frame.setIconImage(image);\n+    }\n+\n+    private static void createAndShowGUI(){\n+        frame = new Frame();\n+        Button setImageButton5 = new Button(\"Open Child\");\n+        updateIconImage();\n+\n+        setImageButton5.addActionListener(event -> {\n+            try {\n+                final Dialog d1 = new Dialog(frame, true);\n+                d1.setSize(100, 100);\n+                Button ok = new Button(\"OK\");\n+                ok.addActionListener(e -> {\n+                        d1.setVisible(false);\n+                        d1.dispose();\n+                });\n+                d1.add(ok);\n+                d1.setLocation(frame.getX(), frame.getY() + 70);\n+                d1.setVisible(true);\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Test failed because of\" +\n+                        \" exception\" + e + \". Press Fail.\");\n+            }\n+        });\n+\n+        frame.add(setImageButton5, BorderLayout.CENTER);\n+        frame.setSize(200,65);\n+\n+        PassFailJFrame.addTestWindow(frame);\n+        PassFailJFrame.positionTestWindow(frame,\n+                PassFailJFrame.Position.HORIZONTAL);\n+        frame.setVisible(true);\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+                                                  InvocationTargetException {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame(\"Large Icon \" +\n+                \"Test Instructions\", INSTRUCTIONS, 5, 12, 50);\n+        SwingUtilities.invokeAndWait(ALTTABIconBeingErased::createAndShowGUI);\n+        passFailJFrame.awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/ALTTABIconBeingErased\/ALTTABIconBeingErased.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -0,0 +1,209 @@\n+\/*\n+ * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dialog;\n+import java.awt.Frame;\n+import java.awt.Graphics2D;\n+import java.awt.Image;\n+import java.awt.Rectangle;\n+import java.awt.Window;\n+import java.awt.image.BufferedImage;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.ImageIcon;\n+import javax.swing.JLabel;\n+import javax.swing.SwingUtilities;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB;\n+import static jdk.test.lib.Platform.isWindows;\n+\n+\/*\n+ * @test\n+ * @bug 6415057\n+ * @summary Tests if toplevel's icons are updated in runtime\n+ * @key headful\n+ * @requires (os.family == \"windows\")\n+ * @modules java.desktop\/sun.awt\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame jdk.test.lib.Platform\n+ * @run main\/manual IconChangingTest\n+ *\/\n+\n+public class IconChangingTest {\n+    private static final int ICON_SIZE = 16;\n+    private static final int MARGIN = 2;\n+    private static final int STACK_SIZE = 4;\n+    \/\/ Number of windows per stack\n+    private static final int WIN_PER_STACK = 4;\n+    private static int windowPosX = 0;\n+\n+    private static final int EXTRA_OFFSET = 50;\n+\n+    private static ImageIcon ii1;\n+    private static ImageIcon ii2;\n+    private static ImageIcon ji;\n+\n+    private static final Window[][] windowStack = new Window[STACK_SIZE][WIN_PER_STACK];\n+    private static final JLabel[][] labels = new JLabel[STACK_SIZE][WIN_PER_STACK];\n+    private static final boolean[][] isResizable = new boolean[][]{\n+            {true, true, false, true},   \/\/stack 1\n+            {true, false, true, false},  \/\/stack 2\n+            {true, false, true, true},   \/\/stack 3\n+            {false, true, false, false}  \/\/stack 4\n+    };\n+\n+    private static final String INSTRUCTIONS =\n+            \"The test is supposed to work on Windows.\\n\"+\n+            \"It may not work on other platforms.\\n\"+\n+            \"                                                     \\n\"+\n+            \"Icons and window decorations should change in windows\\n\"+\n+            \"(frames & dialogs) every 3 seconds.\\n\"+\n+            \"                                                     \\n\"+\n+            \"Notes:\\n\"+\n+            \"                                                     \\n\"+\n+            \"  * Icons might appear in grayscale.\\n\"+\n+            \"  * Default icon might be either Duke or Java Cup.\\n\"+\n+            \"                                                     \\n\"+\n+            \"Press PASS if the icons match the labels\\n\"+\n+            \"and are shown correctly, FAIL otherwise.\\n\"\n+            ;\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame(\"Icon Changing \" +\n+                \"Test Instructions\", INSTRUCTIONS, 5, 18, 40);\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                createAndShowGUI();\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Error while running the test\", e);\n+            }\n+        });\n+        passFailJFrame.awaitAndCheck();\n+    }\n+\n+    private static void createAndShowGUI() throws InterruptedException,\n+                                                  InvocationTargetException {\n+        PassFailJFrame.positionTestWindow(null,\n+                PassFailJFrame.Position.TOP_LEFT_CORNER);\n+        Rectangle bounds = PassFailJFrame.getInstructionFrameBounds();\n+        windowPosX = bounds.x + bounds.width;\n+\n+        ii1 = new ImageIcon(generateIcon(Color.RED));\n+        ii2 = new ImageIcon(generateIcon(Color.BLUE));\n+        ji = new ImageIcon(IconChangingTest.class.getResource(\"java-icon16.png\"));\n+\n+        \/\/ Creates STACK_SIZE different combinations of window stacks,\n+        \/\/ each stack contains WIN_PER_STACK windows (frame\/dialog).\n+        for (int i = 0; i < STACK_SIZE; i++) {\n+            for (int j = 0; j < WIN_PER_STACK; j++) {\n+                createWindow(i, j);\n+            }\n+        }\n+\n+        Thread thread = new Thread(new Runnable() {\n+            private final ImageIcon[][] icons = {\n+                    {null, ii1},\n+                    {ii2, null},\n+                    {ii1, ii2}\n+            };\n+\n+            @Override\n+            public void run() {\n+                int index = 0;\n+                while (true) {\n+                    try {\n+                        setIcons(icons[index][0], icons[index][1]);\n+                        Thread.sleep(4000);\n+                        if (++index >= icons.length) {\n+                            index = 0;\n+                        }\n+                    } catch (InterruptedException e) {\n+                        break;\n+                    }\n+                }\n+            }\n+\n+            private void setIcons(final ImageIcon icon1, final ImageIcon icon2) {\n+                Image i1 = (icon1 == null) ? null : icon1.getImage();\n+                Image i2 = (icon2 == null) ? null : icon2.getImage();\n+                ImageIcon li1 = (icon1 == null) ? ji : icon1;\n+                ImageIcon li2 = (icon2 == null) ? li1 : icon2;\n+\n+                ImageIcon[][] iconList = new ImageIcon[][]{\n+                    {li1, li1, ((i2 == null && isWindows()) ? null : li2), li2},\n+                    {li1, (isWindows()) ? null : li1, li2, (isWindows()) ? null : li2},\n+                    {li1, (isWindows()) ? null : li1, li2, li2},\n+                    {li1, li1, (i2 == null && isWindows()) ? null : li2, (isWindows()) ? null : li2},\n+                };\n+\n+                for (int i = 0; i < STACK_SIZE; i++) {\n+                    windowStack[i][0].setIconImage(i1);\n+                    windowStack[i][2].setIconImage(i2);\n+                    for (int j = 0; j < WIN_PER_STACK; j++) {\n+                        labels[i][j].setIcon(iconList[i][j]);\n+                    }\n+                }\n+            }\n+        });\n+        thread.start();\n+    }\n+\n+    private static void createWindow(int i, int j) {\n+        boolean isFrame = (i == 0 && j == 0) || (i == 1 && j == 0);\n+        String title = (isFrame ? \"Frame \": \"Dialog \") + (i+1) + \".\" + (j+1);\n+\n+        windowStack[i][j] = isFrame\n+                            ? createFrame(title, i, j)\n+                            : createDialog(title, i, j);\n+\n+        labels[i][j]= new JLabel(title);\n+        windowStack[i][j].add(labels[i][j]);\n+        windowStack[i][j].setBounds(windowPosX + (i * 200), (j * 100) + EXTRA_OFFSET,\n+                             200, 100);\n+        windowStack[i][j].toFront();\n+        windowStack[i][j].setVisible(true);\n+\n+        PassFailJFrame.addTestWindow(windowStack[i][j]);\n+    }\n+\n+    private static Frame createFrame(String title, int i, int j) {\n+        Frame frame = new Frame(title);\n+        frame.setResizable(isResizable[i][j]);\n+        return frame;\n+    }\n+\n+    private static Dialog createDialog(String title, int i, int j) {\n+        Dialog dialog = new Dialog((j == 0 ? null : windowStack[i][j-1]), title);\n+        dialog.setResizable(isResizable[i][j]);\n+        return dialog;\n+    }\n+\n+    private static Image generateIcon(Color color) {\n+        BufferedImage bImg = new BufferedImage(ICON_SIZE, ICON_SIZE, TYPE_INT_ARGB);\n+        Graphics2D g2d = bImg.createGraphics();\n+        g2d.setColor(color);\n+        g2d.fillRect(MARGIN, MARGIN, ICON_SIZE - 2 * MARGIN, ICON_SIZE - 2 * MARGIN);\n+        g2d.dispose();\n+        return bImg;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Icon\/IconChangingTest\/IconChangingTest.java","additions":209,"deletions":0,"binary":false,"changes":209,"status":"added"},{"patch":"","filename":"test\/jdk\/java\/awt\/Icon\/IconChangingTest\/java-icon16.png","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/java-icon16.png","status":"copied"},{"patch":"@@ -0,0 +1,279 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AlphaComposite;\n+import java.awt.Color;\n+import java.awt.Dialog;\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.GradientPaint;\n+import java.awt.Graphics2D;\n+import java.awt.GridLayout;\n+import java.awt.Image;\n+import java.awt.Rectangle;\n+import java.awt.RenderingHints;\n+import java.awt.Window;\n+import java.awt.image.BaseMultiResolutionImage;\n+import java.awt.image.BufferedImage;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.Arrays;\n+import java.util.List;\n+import javax.swing.ImageIcon;\n+import javax.swing.JLabel;\n+import javax.swing.SwingUtilities;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB;\n+import static jdk.test.lib.Platform.isWindows;\n+\n+\/*\n+ * @test\n+ * @bug 6233560 6280303 6292933\n+ * @summary Tests if toplevel's icons are shown correctly\n+ * @key headful\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame jdk.test.lib.Platform\n+ * @run main\/manual IconShowingTest\n+ *\/\n+\n+public class IconShowingTest {\n+    private static final int EXTRA_OFFSET = 50;\n+\n+    private static final String INSTRUCTIONS =\n+            \"Look at the icons shown on frames and dialogs, icons of minimized frames\\n\"\n+            + (isWindows() ? \"are displayed in ALT+TAB window\\n\" : \"\") + \"\\n\"+\n+            \"Alpha-channel (transparency) should be supported\\n\"+\n+            \"by Windows and may not be supported by other platforms.\\n\"+\n+            \"                                                               \\n\"+\n+            \"Notes:\\n\"+\n+            \"  * Icons might appear in grayscale.\\n\"+\n+            \"  * Default icon might be either Duke or Java Cup.\\n\"+\n+            \"                                                               \\n\"+\n+            \"Press PASS if the icons match label description in windows\\n\"+\n+            \"and are shown correctly, FAIL otherwise.\\n\"\n+            ;\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame(\"Icon Showing \" +\n+                \"Test Instructions\", INSTRUCTIONS, 5, 18, 48);\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                createAndShowGUI();\n+            } catch (Exception e) {\n+               throw new RuntimeException(\"Error while running the test\", e);\n+            }\n+        });\n+        passFailJFrame.awaitAndCheck();\n+    }\n+\n+    public static void createAndShowGUI()\n+            throws InterruptedException, InvocationTargetException {\n+        Image i_16 = createIcon(16, 8, \"16\");\n+        Image i_32 = createIcon(32, 14, \"32\");\n+        Image i_48 = createIcon(48, 24, \"48\");\n+        Image i_64 = createIcon(64, 30, \"64\");\n+\n+        ImageIcon ji_16 = new ImageIcon(IconShowingTest.class.getResource(\n+                \"java-icon16.png\"));\n+\n+        Image[] images = new Image[] {i_16, i_32, i_48, i_64};\n+        List<Image> imageList = Arrays.asList(images);\n+        ImageIcon icon = new ImageIcon(new MRImage(images));\n+\n+        Frame f1 = new Frame(\"Frame 1\");\n+        f1.setIconImages(imageList);\n+        f1.setLayout(new GridLayout(0, 1));\n+\n+        f1.add(new JLabel(\"Icon 16x16\", new ImageIcon(i_16), JLabel.CENTER));\n+        f1.add(new JLabel(\"Icon 32x32\", new ImageIcon(i_32), JLabel.CENTER));\n+        f1.add(new JLabel(\"Icon 48x48\", new ImageIcon(i_48), JLabel.CENTER));\n+        f1.add(new JLabel(\"Icon 64x64\", new ImageIcon(i_64), JLabel.CENTER));\n+\n+        PassFailJFrame.positionTestWindow(null,\n+                PassFailJFrame.Position.TOP_LEFT_CORNER);\n+        Rectangle bounds = PassFailJFrame.getInstructionFrameBounds();\n+\n+        int windowPosX = bounds.x + bounds.width + 5;\n+        f1.setBounds(windowPosX, EXTRA_OFFSET, 200, 300);\n+        f1.setVisible(true);\n+        f1.toFront();\n+        PassFailJFrame.addTestWindow(f1);\n+        int windowPosY = f1.getY() + f1.getHeight();\n+\n+\n+        Dialog d11 = new Dialog(f1, \"Dialog 1.1\");\n+        d11.setResizable(false);\n+        addIconAndLabelToWindow(d11, windowPosX, windowPosY - EXTRA_OFFSET,\n+                (isWindows() ? \"No icon, non-resizable dialog\"\n+                             : \"Inherited icon, non-resizable dialog\"),\n+                (isWindows() ? null : icon));\n+\n+        Dialog d12 = new Dialog(d11, \"Dialog 1.2\");\n+        addIconAndLabelToWindow(d12, windowPosX, windowPosY + EXTRA_OFFSET,\n+                \"Inherited icon, resizable dialog\", icon);\n+\n+        Frame f2 = new Frame(\"Frame 2\");\n+        addIconAndLabelToWindow(f2, windowPosX + 200, 0,\n+                \"Default Icon\", ji_16);\n+\n+        Dialog d21 = new Dialog(f2, \"Dialog 2.1\");\n+        d21.setResizable(false);\n+        addIconAndLabelToWindow(d21, windowPosX + 200, 100,\n+                (isWindows() ? \"No icon, non-resizable dialog\"\n+                             : \"Inherited default Icon, non-resizable dialog\"),\n+                (isWindows() ? null : ji_16));\n+\n+        Dialog d22 = new Dialog(f2, \"Dialog 2.2\");\n+        addIconAndLabelToWindow(d22, windowPosX + 200, 200,\n+                \"Inherited default Icon, resizable dialog\", ji_16);\n+\n+        Dialog d23 = new Dialog(f2, \"Dialog 2.3\");\n+        d23.setIconImages(imageList);\n+        d23.setResizable(false);\n+        addIconAndLabelToWindow(d23, windowPosX + 200, 300,\n+                \"Modified Icon, non-resizable dialog\", icon);\n+\n+        Dialog d24 = new Dialog(f2, \"Dialog 2.4\");\n+        d24.setIconImages(imageList);\n+        addIconAndLabelToWindow(d24, windowPosX + 200, 400,\n+                \"Modified Icon, resizable dialog\", icon);\n+\n+        Dialog d31 = new Dialog((Frame)null, \"Dialog 3.1\");\n+        addIconAndLabelToWindow(d31, windowPosX + 400, 100,\n+                \"Default icon, resizable dialog\", ji_16);\n+\n+        Dialog d32 = new Dialog(d31, \"Dialog 3.2\");\n+        d32.setResizable(false);\n+        addIconAndLabelToWindow(d32, windowPosX + 400, 200,\n+                (isWindows() ? \"No icon, non-resizable dialog\"\n+                             : \"Default Icon, non-resizable dialog\"),\n+                (isWindows() ? null : ji_16));\n+\n+        Dialog d33 = new Dialog(d31, \"Dialog 3.3\");\n+        d33.setIconImages(imageList);\n+        d33.setResizable(false);\n+        addIconAndLabelToWindow(d33, windowPosX + 400, 300,\n+                \"Modified icon, non-resizable dialog\", icon);\n+\n+\n+        Dialog d34 = new Dialog(d33, \"Dialog 3.4\");\n+        d34.setResizable(false);\n+        addIconAndLabelToWindow(d34, windowPosX + 400, 400,\n+                (isWindows() ? \"No icon, non-resizable dialog\"\n+                             : \"Inherited modified icon, non-resizable dialog\"),\n+                (isWindows() ? null : icon));\n+\n+\n+        Dialog d41 = new Dialog((Frame) null, \"Dialog 4.1\");\n+        d41.setResizable(false);\n+        addIconAndLabelToWindow(d41, windowPosX + 600, 100,\n+                \"Default icon, non-resizable dialog\", ji_16);\n+\n+\n+        Dialog d42 = new Dialog(d41, \"Dialog 4.2\");\n+        addIconAndLabelToWindow(d42, windowPosX + 600, 200,\n+                \"Inherited default icon, resizable dialog\", ji_16);\n+\n+        Dialog d43 = new Dialog(d41, \"Dialog 4.3\");\n+        d43.setIconImages(imageList);\n+        addIconAndLabelToWindow(d43, windowPosX + 600, 300,\n+                \"Modified icon, resizable dialog\", icon);\n+\n+        Dialog d44 = new Dialog(d43, \"Dialog 4.4\");\n+        addIconAndLabelToWindow(d44, windowPosX + 600, 400,\n+                \"Inherited modified icon, resizable dialog\", icon);\n+    }\n+\n+    private static void addIconAndLabelToWindow(Window win, int x, int y,\n+                                                String title, ImageIcon icon) {\n+        win.setBounds(x, (y + EXTRA_OFFSET), 200, 100);\n+        win.add(new JLabel(title, icon, JLabel.CENTER));\n+        win.setVisible(true);\n+        win.toFront();\n+        PassFailJFrame.addTestWindow(win);\n+    }\n+\n+    public static Image createIcon(int size, int fontSize, String value) {\n+        BufferedImage bImg = new BufferedImage(size, size, TYPE_INT_ARGB);\n+        Graphics2D g2d = bImg.createGraphics();\n+\n+        int half = size \/ 2;\n+        for (int i = 0; i < half - 1; i += 2) {\n+            g2d.setComposite(AlphaComposite.Src);\n+            g2d.setColor(Color.RED);\n+            g2d.fillRect(0, i, half, 1);\n+            g2d.setComposite(AlphaComposite.Clear);\n+            g2d.fillRect(0, i + 1, half, 1);\n+        }\n+        g2d.setComposite(AlphaComposite.Clear);\n+        g2d.fillRect(half, 0, half, half);\n+        g2d.setComposite(AlphaComposite.Src);\n+        g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,\n+                RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n+        g2d.setFont(new Font(\"Dialog\", Font.PLAIN, fontSize));\n+        g2d.setColor(Color.BLUE);\n+        g2d.drawString(value, half - 1, half - 2);\n+\n+        int height = (half + 1) \/ 3;\n+        \/\/ Green\n+        GradientPaint greenGradient = new GradientPaint(0, half - 1, Color.GREEN,\n+                size, half - 1, new Color(0, 255, 0, 0));\n+        g2d.setPaint(greenGradient);\n+        g2d.fillRect(0, half - 1, size, height);\n+\n+        \/\/ Blue\n+        GradientPaint blueGradient = new GradientPaint(0, (half - 1) + height, Color.BLUE,\n+                size, (half - 1) + height, new Color(0, 0, 255, 0));\n+        g2d.setPaint(blueGradient);\n+        g2d.fillRect(0, (half - 1) + height, size, height);\n+\n+        \/\/ Red\n+        GradientPaint redGradient = new GradientPaint(0, (half - 1) + height * 2, Color.RED,\n+                size, (half - 1) + height * 2, new Color(255, 0, 0, 0));\n+        g2d.setPaint(redGradient);\n+        g2d.fillRect(0, (half - 1) + height * 2, size, height);\n+        g2d.dispose();\n+\n+        return bImg;\n+    }\n+\n+    private static class MRImage extends BaseMultiResolutionImage {\n+        public MRImage(Image... resolutionVariants) {\n+            super(resolutionVariants);\n+        }\n+\n+        @Override\n+        public Image getResolutionVariant(double expectedSize, double unused) {\n+            final int size = (int) Math.round(expectedSize \/ 16.0) * 16;\n+            List<Image> imageList = getResolutionVariants();\n+            for (int i = 0; i < imageList.size(); i++) {\n+                if (size == imageList.get(i).getWidth(null)) {\n+                    return imageList.get(i);\n+                } else if (imageList.get(i).getWidth(null) > size) {\n+                    return imageList.get(i > 0 ? i - 1 : i);\n+                }\n+            }\n+            return imageList.get(0); \/\/default\/base image\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Icon\/IconShowingTest\/IconShowingTest.java","additions":279,"deletions":0,"binary":false,"changes":279,"status":"added"},{"patch":"","filename":"test\/jdk\/java\/awt\/Icon\/IconShowingTest\/java-icon16.png","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/java-icon16.png","status":"copied"},{"patch":"@@ -0,0 +1,250 @@\n+\/*\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AlphaComposite;\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.RenderingHints;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.IndexColorModel;\n+import java.awt.image.WritableRaster;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.Icon;\n+import javax.swing.ImageIcon;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.SwingUtilities;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_ARGB;\n+\n+\/*\n+ * @test\n+ * @bug 4987171\n+ * @key headful\n+ * @summary GIF transparency in frame icons not work with Metacity\/GNOME\n+ * @requires (os.family != \"mac\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual IconTransparencyTest\n+ *\/\n+\n+public class IconTransparencyTest {\n+    private static final String INSTRUCTIONS =\n+            \"The icon of the frame and the resized icon in the label should be transparent.\\n\"+\n+            \"Transparency can be verified by checking if the background color (pink)\\n\"+\n+            \"is visible in and around icon within the JLabel.\\n\"+\n+            \"                                                                       \\n\"+\n+            \"Press continue to view next icon (6 total).\\n\"+\n+            \"Icon might be presented as grayscale image.\\n\"+\n+            \"                                                                       \\n\"+\n+            \"For the 3rd icon in JLabel, the 2nd vertical slot is transparent, hence\\n\"+\n+            \"the background color (pink) should be visible at the 2nd vertical slot.\\n\"+\n+            \"                                                                       \\n\"+\n+            \"For the 4th icon in JLabel, the 5th vertical slot is transparent, hence\\n\"+\n+            \"the background color (pink) should be visible at the 5th vertical slot.\\n\"+\n+            \"                                                                       \\n\"+\n+            \"Press Pass or Fail at the end of test.\\n\";\n+\n+    static class TestLabel extends JLabel {\n+        public void paint(Graphics g) {\n+            Dimension d = getSize();\n+            g.setColor(Color.PINK);\n+            g.fillRect(0, 0, d.width, d.height);\n+            Icon icon = getIcon();\n+            if (icon != null) {\n+                icon.paintIcon(this, g, 0, 0);\n+            }\n+            int iw = (icon != null) ? icon.getIconWidth() + 3 : 3;\n+            if (d.width - iw > 0) {\n+                g.setColor(Color.BLACK);\n+                g.drawString(getText(), iw, 16);\n+            }\n+        }\n+    }\n+\n+    static class TestFrame implements ActionListener {\n+        static final int TEST_CNT = 6;\n+        int currTest = 0;\n+        static ImageIcon[] testIcon;\n+\n+        TestLabel label;\n+        JButton button;\n+        static JFrame frame;\n+\n+        final String[] testText = {\n+                \"1st Icon: Size 16x16, GIF\",\n+                \"2nd Icon: Size 48x48, GIF\",\n+                \"3rd Icon: Size 64x64, GIF\",\n+                \"4th Icon: Size 64x64, GIF\",\n+                \"5th Icon: Size 64x64, PNG\",\n+                \"No Icon (system default)\"\n+        };\n+\n+        TestFrame() throws IOException {\n+\n+            generateIcon(16, \"img_16.gif\", 13, 15, 1, \"gif\");\n+            generateIcon(48, \"img_48.gif\", 36, 40, 4, \"gif\");\n+            generateIcon(64, \"img_64.png\", 50, 58, 4, \"png\");\n+\n+            \/\/ gif created with GREEN selected as transparent color index in IndexColorModel\n+            generateGIFWithIndexColorModel(64, \"greenTransparent.gif\", 1);\n+            \/\/ gif created with BLACK selected as transparent color index in IndexColorModel\n+            generateGIFWithIndexColorModel(64, \"blackTransparent.gif\", 4);\n+\n+            testIcon = new ImageIcon[] {\n+                    new ImageIcon(\"img_16.gif\"),\n+                    new ImageIcon(\"img_48.gif\"),\n+                    new ImageIcon(\"greenTransparent.gif\"),\n+                    new ImageIcon(\"blackTransparent.gif\"),\n+                    new ImageIcon(\"img_64.png\"),\n+                    null\n+            };\n+        }\n+\n+        public void createAndShowGUI() {\n+            frame = new JFrame();\n+            \/\/create hint label\n+            label = new TestLabel();\n+            label.setVisible(true);\n+            frame.add(label, BorderLayout.WEST);\n+\n+            \/\/create button\n+            button = new JButton(\"Continue\");\n+            button.setVisible(true);\n+            button.addActionListener(this);\n+            frame.add(button, BorderLayout.EAST);\n+\n+            \/\/show first sample\n+            frame.setIconImage(testIcon[0].getImage());\n+            label.setIcon(testIcon[0]);\n+            label.setText(testText[0]);\n+            frame.pack();\n+\n+            PassFailJFrame.addTestWindow(frame);\n+            PassFailJFrame.positionTestWindow(frame,\n+                    PassFailJFrame.Position.HORIZONTAL);\n+            frame.setVisible(true);\n+        }\n+\n+        public void actionPerformed(ActionEvent event) {\n+            currTest++;\n+            if (currTest < TEST_CNT) {\n+                if (testIcon[currTest] != null) {\n+                    frame.setIconImage(testIcon[currTest].getImage());\n+                } else {\n+                    frame.setIconImage(null);\n+                }\n+\n+                label.setIcon(testIcon[currTest]);\n+                label.setText(testText[currTest]);\n+            } else {\n+                button.setEnabled(false);\n+                button.setText(\"No more icons left.\");\n+            }\n+            frame.revalidate();\n+            frame.pack();\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        TestFrame testFrame = new TestFrame();\n+        PassFailJFrame passFailJFrame = new PassFailJFrame(\"Icon Transparency \" +\n+                \"Test Instructions\", INSTRUCTIONS, 5, 16, 46);\n+        SwingUtilities.invokeAndWait(testFrame::createAndShowGUI);\n+        passFailJFrame.awaitAndCheck();\n+    }\n+\n+    public static void generateIcon(int size, String filename, int fontSize,\n+                                    int yText, int lnHeight, String type) throws IOException {\n+        BufferedImage bImg = new BufferedImage(size, size, TYPE_INT_ARGB);\n+        Graphics2D g2d = bImg.createGraphics();\n+        g2d.setComposite(AlphaComposite.Clear);\n+        g2d.fillRect(0, 0, size, size);\n+\n+        g2d.setComposite(AlphaComposite.Src);\n+        g2d.setColor(Color.BLUE);\n+        g2d.fillRect(0, 0, size, lnHeight);\n+        g2d.setColor(Color.GREEN);\n+        g2d.fillRect(0, lnHeight * 2, size, lnHeight);\n+\n+        g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,\n+                RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);\n+        g2d.setFont(new Font(\"Dialog\", Font.PLAIN, fontSize));\n+        g2d.setColor(Color.RED);\n+        g2d.drawString(\"TR\", 0, yText);\n+        g2d.dispose();\n+\n+        ImageIO.write(bImg, type, new File(filename));\n+    }\n+\n+    protected static void generateGIFWithIndexColorModel(int size, String filename,\n+                                        int transparentColorIndex) throws IOException {\n+        IndexColorModel icm = createIndexedBitmaskColorModel(transparentColorIndex);\n+        BufferedImage img = new BufferedImage(size, size,\n+                BufferedImage.TYPE_BYTE_INDEXED, icm);\n+        int mapSize = icm.getMapSize();\n+        int width = 64 \/ mapSize;\n+\n+        WritableRaster wr = img.getRaster();\n+        for (int i = 0; i < mapSize; i++) {\n+            for (int y = 0; y < 64; y++) {\n+                for (int x = 0; x < width; x++) {\n+                    wr.setSample(i * width + x, y, 0, i);\n+                }\n+            }\n+        }\n+        ImageIO.write(img, \"gif\", new File(filename));\n+    }\n+\n+    protected static IndexColorModel createIndexedBitmaskColorModel(int transparentColorIndex) {\n+        int paletteSize = 8;\n+        byte[] red = new byte[paletteSize];\n+        byte[] green = new byte[paletteSize];\n+        byte[] blue = new byte[paletteSize];\n+\n+        red[0] = (byte)0xff; green[0] = (byte)0x00; blue[0] = (byte)0x00; \/\/red\n+        red[1] = (byte)0x00; green[1] = (byte)0xff; blue[1] = (byte)0x00; \/\/green\n+        red[2] = (byte)0x00; green[2] = (byte)0x00; blue[2] = (byte)0xff; \/\/blue\n+        red[3] = (byte)0xff; green[3] = (byte)0xff; blue[3] = (byte)0xff; \/\/white\n+        red[4] = (byte)0x00; green[4] = (byte)0x00; blue[4] = (byte)0x00; \/\/black\n+        red[5] = (byte)0x80; green[5] = (byte)0x80; blue[5] = (byte)0x80; \/\/grey\n+        red[6] = (byte)0xff; green[6] = (byte)0xff; blue[6] = (byte)0x00; \/\/yellow\n+        red[7] = (byte)0x00; green[7] = (byte)0xff; blue[7] = (byte)0xff; \/\/cyan\n+\n+        int numBits = 3;\n+\n+        return new IndexColorModel(numBits, paletteSize,\n+                red, green, blue, transparentColorIndex);\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Icon\/IconTransparencyTest\/IconTransparencyTest.java","additions":250,"deletions":0,"binary":false,"changes":250,"status":"added"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.image.BufferedImage;\n+import java.util.ArrayList;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.SwingUtilities;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 6425089\n+ * @summary PIT. Frame does not show a big size jpg image as icon\n+ * @requires (os.family != \"mac\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual SetLargeIconTest\n+ *\/\n+\n+public class SetLargeIconTest {\n+    private static final String INSTRUCTIONS =\n+            \"Case 1: Press \\\"Pass\\\" button if this frame does not have icon with green color.\\n\"+\n+            \"                                                                              \\n\"+\n+            \"Case 2: Press \\\"Change to red\\\" if the frame icon is in green color.\\n\"+\n+            \"For case 2, press \\\"Pass\\\" button if green icon changes to a larger red icon,\\n\"+\n+            \"press \\\"Fail\\\" otherwise.\\n\";\n+    private static JFrame frame;\n+\n+    private static void createAndShowGUI() {\n+        frame = new JFrame();\n+\n+        setColoredIcon(Color.green, 128, 128);\n+        JButton btnChangeIcon = new JButton(\"Change to red\");\n+        btnChangeIcon.addActionListener(e -> setColoredIcon(Color.red, 400, 400));\n+\n+        frame.add(btnChangeIcon, BorderLayout.CENTER);\n+        frame.setSize(200,65);\n+\n+        PassFailJFrame.addTestWindow(frame);\n+        PassFailJFrame.positionTestWindow(frame,\n+                PassFailJFrame.Position.HORIZONTAL);\n+        frame.setVisible(true);\n+    }\n+\n+    private static void setColoredIcon(Color color, int width, int height) {\n+        BufferedImage image = new BufferedImage(400, 400, BufferedImage.TYPE_INT_ARGB);\n+        Graphics gr = image.createGraphics();\n+        gr.setColor(color);\n+        gr.fillRect(0, 0, width, height);\n+\n+        ArrayList<Image> imageList = new java.util.ArrayList<>();\n+        imageList.add(image);\n+\n+        frame.setIconImages(imageList);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame(\"Large Icon \" +\n+                \"Test Instructions\", INSTRUCTIONS, 5, 8, 50);\n+        SwingUtilities.invokeAndWait(SetLargeIconTest::createAndShowGUI);\n+        passFailJFrame.awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Icon\/SetLargeIconTest\/SetLargeIconTest.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"}]}