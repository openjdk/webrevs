{"files":[{"patch":"@@ -36,1 +36,1 @@\n-import java.net.URISyntaxException;\n+\n@@ -40,1 +40,7 @@\n-import jdk.testlibrary.SimpleSSLContext;\n+import jdk.test.lib.net.SimpleSSLContext;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -43,9 +49,3 @@\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.junit.Assume;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -57,2 +57,2 @@\n- * @library \/test\/lib \/lib\/testlibrary server\/ ..\/\n- * @build jdk.testlibrary.SimpleSSLContext HttpServerAdapters\n+ * @library \/test\/lib server\/ ..\/\n+ * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters\n@@ -71,2 +71,0 @@\n-\n-@RunWith(value = Parameterized.class)\n@@ -79,1 +77,1 @@\n-    @BeforeClass\n+    @BeforeAll\n@@ -85,1 +83,1 @@\n-            Assume.assumeTrue(\"Skipping tests - IPv6 is not supported\", IPSupport.hasIPv6());\n+            Assumptions.assumeTrue(IPSupport.hasIPv6(), \"Skipping tests - IPv6 is not supported\");\n@@ -88,1 +86,1 @@\n-        assertNotNull(sslContext.toString(), \"Unexpected null sslContext\");\n+        assertNotNull(sslContext, \"Unexpected null sslContext\");\n@@ -103,1 +101,1 @@\n-    @AfterClass\n+    @AfterAll\n@@ -115,7 +113,2 @@\n-    @Parameters\n-    public static Iterable<Object[]> requestURIs() throws Exception  {\n-        final List<Object[]> arguments = new ArrayList<>();\n-        if (IPSupport.preferIPv6Addresses()) {\n-            IPSupport.printPlatformSupport(System.err);\n-            Assume.assumeTrue(\"Skipping tests - IPv6 is not supported\", IPSupport.hasIPv6());\n-        }\n+    private static Stream<Arguments> requestURIs() throws Exception {\n+        final List<Arguments> arguments = new ArrayList<>();\n@@ -123,5 +116,1 @@\n-        sslContext = new SimpleSSLContext().get();\n-        https2_Server = HttpTestServer.of(new Http2TestServer(\"localhost\", true, sslContext));\n-        https2_Server.addHandler(new Handler(), \"\/\");\n-        https2_Server.start();\n-        arguments.add(new Object[]{new URI(\"https:\/\/\" + https2_Server.serverAuthority() + \"\/\")});\n+        arguments.add(Arguments.of(new URI(\"https:\/\/\" + https2_Server.serverAuthority() + \"\/\")));\n@@ -129,4 +118,1 @@\n-        http2_Server = HttpTestServer.of(new Http2TestServer(\"localhost\", false, 0));\n-        http2_Server.addHandler(new Handler(), \"\/\");\n-        http2_Server.start();\n-        arguments.add(new Object[]{new URI(\"http:\/\/\" + http2_Server.serverAuthority() + \"\/\")});\n+        arguments.add(Arguments.of(new URI(\"http:\/\/\" + http2_Server.serverAuthority() + \"\/\")));\n@@ -136,2 +122,3 @@\n-                arguments.add(new Object[]{new URI(\"http:\/\/[::1]:\" + http2_Server.getAddress().getPort() + \"\/\")});\n-             }\n+                arguments.add(Arguments.of(new URI(\"http:\/\/[::1]:\" +\n+                        http2_Server.getAddress().getPort() + \"\/\")));\n+            }\n@@ -139,7 +126,1 @@\n-        return arguments;\n-    }\n-\n-    private final URI requestURI;\n-\n-    public ConnectionReuseTest(final URI requestURI) {\n-        this.requestURI = requestURI;\n+        return arguments.stream();\n@@ -152,3 +133,3 @@\n-\n-    @Test\n-    public void testConnReuse() throws Throwable {\n+    @ParameterizedTest\n+    @MethodSource(\"requestURIs\")\n+    public void testConnReuse(final URI requestURI) throws Throwable {\n@@ -167,1 +148,1 @@\n-                assertEquals(\"unexpected response code\", 200, resp.statusCode());\n+                assertEquals(200, resp.statusCode(), \"unexpected response code\");\n@@ -170,3 +151,2 @@\n-                if (respBody == Handler.UNKNOWN_CLIENT_ADDR){\n-                    System.out.println(\"server handler couldn't determine client address in request\");\n-                }\n+                assertNotEquals(Handler.UNKNOWN_CLIENT_ADDR, respBody,\n+                        \"server handler couldn't determine client address in request\");\n@@ -180,1 +160,2 @@\n-                    assertEquals(\"HttpClient unexpectedly used a\" + \" different connection for request(\" + i + \")\", clientConnAddr, respBody);\n+                    assertEquals(clientConnAddr, respBody, \"HttpClient unexpectedly used a\" +\n+                            \" different connection for request(\" + i + \")\");\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/ConnectionReuseTest.java","additions":33,"deletions":52,"binary":false,"changes":85,"status":"modified"}]}