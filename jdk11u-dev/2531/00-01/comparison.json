{"files":[{"patch":"@@ -36,1 +36,1 @@\n-\n+import java.net.URISyntaxException;\n@@ -41,6 +41,0 @@\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.Assumptions;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.Arguments;\n-import org.junit.jupiter.params.provider.MethodSource;\n@@ -49,3 +43,9 @@\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.Assume;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n@@ -71,0 +71,2 @@\n+\n+@RunWith(value = Parameterized.class)\n@@ -77,1 +79,1 @@\n-    @BeforeAll\n+    @BeforeClass\n@@ -83,1 +85,1 @@\n-            Assumptions.assumeTrue(IPSupport.hasIPv6(), \"Skipping tests - IPv6 is not supported\");\n+            Assume.assumeTrue(\"Skipping tests - IPv6 is not supported\", IPSupport.hasIPv6());\n@@ -86,1 +88,1 @@\n-        assertNotNull(sslContext, \"Unexpected null sslContext\");\n+        assertNotNull(sslContext.toString(), \"Unexpected null sslContext\");\n@@ -101,1 +103,1 @@\n-    @AfterAll\n+    @AfterClass\n@@ -113,2 +115,7 @@\n-    private static Stream<Arguments> requestURIs() throws Exception {\n-        final List<Arguments> arguments = new ArrayList<>();\n+    @Parameters\n+    public static Iterable<Object[]> requestURIs() throws Exception  {\n+        final List<Object[]> arguments = new ArrayList<>();\n+        if (IPSupport.preferIPv6Addresses()) {\n+            IPSupport.printPlatformSupport(System.err);\n+            Assume.assumeTrue(\"Skipping tests - IPv6 is not supported\", IPSupport.hasIPv6());\n+        }\n@@ -116,1 +123,5 @@\n-        arguments.add(Arguments.of(new URI(\"https:\/\/\" + https2_Server.serverAuthority() + \"\/\")));\n+        sslContext = new SimpleSSLContext().get();\n+        https2_Server = HttpTestServer.of(new Http2TestServer(\"localhost\", true, sslContext));\n+        https2_Server.addHandler(new Handler(), \"\/\");\n+        https2_Server.start();\n+        arguments.add(new Object[]{new URI(\"https:\/\/\" + https2_Server.serverAuthority() + \"\/\")});\n@@ -118,1 +129,4 @@\n-        arguments.add(Arguments.of(new URI(\"http:\/\/\" + http2_Server.serverAuthority() + \"\/\")));\n+        http2_Server = HttpTestServer.of(new Http2TestServer(\"localhost\", false, 0));\n+        http2_Server.addHandler(new Handler(), \"\/\");\n+        http2_Server.start();\n+        arguments.add(new Object[]{new URI(\"http:\/\/\" + http2_Server.serverAuthority() + \"\/\")});\n@@ -122,3 +136,2 @@\n-                arguments.add(Arguments.of(new URI(\"http:\/\/[::1]:\" +\n-                        http2_Server.getAddress().getPort() + \"\/\")));\n-            }\n+                arguments.add(new Object[]{new URI(\"http:\/\/[::1]:\" + http2_Server.getAddress().getPort() + \"\/\")});\n+             }\n@@ -126,1 +139,7 @@\n-        return arguments.stream();\n+        return arguments;\n+    }\n+\n+    private final URI requestURI;\n+\n+    public ConnectionReuseTest(final URI requestURI) {\n+        this.requestURI = requestURI;\n@@ -133,3 +152,3 @@\n-    @ParameterizedTest\n-    @MethodSource(\"requestURIs\")\n-    public void testConnReuse(final URI requestURI) throws Throwable {\n+\n+    @Test\n+    public void testConnReuse() throws Throwable {\n@@ -148,1 +167,1 @@\n-                assertEquals(200, resp.statusCode(), \"unexpected response code\");\n+                assertEquals(\"unexpected response code\", 200, resp.statusCode());\n@@ -151,2 +170,3 @@\n-                assertNotEquals(Handler.UNKNOWN_CLIENT_ADDR, respBody,\n-                        \"server handler couldn't determine client address in request\");\n+                if (respBody == Handler.UNKNOWN_CLIENT_ADDR){\n+                    System.out.println(\"server handler couldn't determine client address in request\");\n+                }\n@@ -160,2 +180,1 @@\n-                    assertEquals(clientConnAddr, respBody, \"HttpClient unexpectedly used a\" +\n-                            \" different connection for request(\" + i + \")\");\n+                    assertEquals(\"HttpClient unexpectedly used a\" + \" different connection for request(\" + i + \")\", clientConnAddr, respBody);\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/ConnectionReuseTest.java","additions":49,"deletions":30,"binary":false,"changes":79,"status":"modified"}]}