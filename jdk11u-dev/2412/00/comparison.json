{"files":[{"patch":"@@ -262,1 +262,1 @@\n-vmTestbase\/gc\/lock\/jni\/jnilock002\/TestDescription.java 8208243,8192647 generic-all\n+vmTestbase\/gc\/lock\/jni\/jnilock002\/TestDescription.java 8192647 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-        ExceptionCheckingJniEnvPtr env(jni_env);\n+  ExceptionCheckingJniEnvPtr ec_jni(jni_env);\n@@ -42,5 +42,5 @@\n-        jsize size, i;\n-        jbooleanArray arr;\n-        jboolean *pa;\n-        jboolean hash = JNI_TRUE;\n-        time_t start_time, current_time;\n+  jsize size, i;\n+  jbooleanArray arr;\n+  jboolean *pa;\n+  jboolean hash = JNI_TRUE;\n+  time_t start_time, current_time;\n@@ -48,6 +48,6 @@\n-        if (objFieldId == NULL) {\n-                jclass klass = env->GetObjectClass(o);\n-                objFieldId = env->GetFieldID(klass, \"obj\", \"Ljava\/lang\/Object;\");\n-        }\n-        arr = (jbooleanArray) env->GetObjectField(o, objFieldId);\n-        env->SetObjectField(o, objFieldId, NULL);\n+  if (objFieldId == NULL) {\n+    jclass klass = ec_jni->GetObjectClass(o);\n+    objFieldId = ec_jni->GetFieldID(klass, \"obj\", \"Ljava\/lang\/Object;\");\n+  }\n+  arr = (jbooleanArray) ec_jni->GetObjectField(o, objFieldId);\n+  ec_jni->SetObjectField(o, objFieldId, NULL);\n@@ -55,19 +55,21 @@\n-        size = env->GetArrayLength(arr);\n-        start_time = time(NULL);\n-        enterTime \/= 1000;\n-        current_time = 0;\n-        while (current_time - start_time < enterTime) {\n-                pa = (jboolean*) env->GetPrimitiveArrayCritical(arr, NULL);\n-                if (pa != NULL) {\n-                        for (i = 0; i < size; ++i)\n-                                hash ^= pa[i];\n-                } else {\n-                        hash = JNI_FALSE;\n-                }\n-                mssleep((long) sleepTime);\n-                env->ReleasePrimitiveArrayCritical(arr, pa, 0);\n-                mssleep((long) sleepTime);\n-                current_time = time(NULL);\n-        }\n-        env->SetObjectField(o, objFieldId, arr);\n-        return hash;\n+  size = ec_jni->GetArrayLength(arr);\n+  start_time = time(NULL);\n+  enterTime \/= 1000;\n+  current_time = 0;\n+  while (difftime(current_time, start_time) < enterTime) {\n+    hash = JNI_TRUE;\n+    pa = (jboolean*) ec_jni->GetPrimitiveArrayCritical(arr, NULL);\n+    if (pa != NULL) {\n+      for (i = 0; i < size; ++i) {\n+        hash ^= pa[i];\n+      }\n+    } else {\n+      jni_env->FatalError(\"GetPrimitiveArrayCritical returned NULL\");\n+    }\n+    mssleep((long) sleepTime);\n+    ec_jni->ReleasePrimitiveArrayCritical(arr, pa, 0);\n+    mssleep((long) sleepTime);\n+    current_time = time(NULL);\n+  }\n+  ec_jni->SetObjectField(o, objFieldId, arr);\n+  return hash;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/BooleanArrayCriticalLocker.cpp","additions":34,"deletions":32,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-        ExceptionCheckingJniEnvPtr env(jni_env);\n+  ExceptionCheckingJniEnvPtr ec_jni(jni_env);\n@@ -41,5 +41,5 @@\n-        jsize size, i;\n-        jbyteArray arr;\n-        jbyte *pa;\n-        jbyte hash = 0;\n-        time_t start_time, current_time;\n+  jsize size, i;\n+  jbyteArray arr;\n+  jbyte *pa;\n+  jbyte hash = 0;\n+  time_t start_time, current_time;\n@@ -47,6 +47,6 @@\n-        if (objFieldId == NULL) {\n-                jclass klass = env->GetObjectClass(o);\n-                objFieldId = env->GetFieldID(klass, \"obj\", \"Ljava\/lang\/Object;\");\n-        }\n-        arr = (jbyteArray) env->GetObjectField(o, objFieldId);\n-        env->SetObjectField(o, objFieldId, NULL);\n+  if (objFieldId == NULL) {\n+    jclass klass = ec_jni->GetObjectClass(o);\n+    objFieldId = ec_jni->GetFieldID(klass, \"obj\", \"Ljava\/lang\/Object;\");\n+  }\n+  arr = (jbyteArray) ec_jni->GetObjectField(o, objFieldId);\n+  ec_jni->SetObjectField(o, objFieldId, NULL);\n@@ -54,19 +54,21 @@\n-        size = env->GetArrayLength(arr);\n-        start_time = time(NULL);\n-        enterTime \/= 1000;\n-        current_time = 0;\n-        while (current_time - start_time < enterTime) {\n-                pa = (jbyte*) env->GetPrimitiveArrayCritical(arr, NULL);\n-                if (pa != NULL) {\n-                        for (i = 0; i < size; ++i)\n-                                hash ^= pa[i];\n-                } else {\n-                        hash = 0;\n-                }\n-                mssleep((long) sleepTime);\n-                env->ReleasePrimitiveArrayCritical(arr, pa, 0);\n-                mssleep((long) sleepTime);\n-                current_time = time(NULL);\n-        }\n-        env->SetObjectField(o, objFieldId, arr);\n-        return hash;\n+  size = ec_jni->GetArrayLength(arr);\n+  start_time = time(NULL);\n+  enterTime \/= 1000;\n+  current_time = 0;\n+  while (difftime(current_time, start_time) < enterTime) {\n+    hash = 0;\n+    pa = (jbyte*) ec_jni->GetPrimitiveArrayCritical(arr, NULL);\n+    if (pa != NULL) {\n+      for (i = 0; i < size; ++i) {\n+        hash ^= pa[i];\n+      }\n+    } else {\n+      jni_env->FatalError(\"GetPrimitiveArrayCritical returned NULL\");\n+    }\n+    mssleep((long) sleepTime);\n+    ec_jni->ReleasePrimitiveArrayCritical(arr, pa, 0);\n+    mssleep((long) sleepTime);\n+    current_time = time(NULL);\n+  }\n+  ec_jni->SetObjectField(o, objFieldId, arr);\n+  return hash;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/ByteArrayCriticalLocker.cpp","additions":34,"deletions":32,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-        ExceptionCheckingJniEnvPtr env(jni_env);\n+  ExceptionCheckingJniEnvPtr ec_jni(jni_env);\n@@ -42,5 +42,5 @@\n-        jsize size, i;\n-        jcharArray arr;\n-        jchar *pa;\n-        jchar hash = 0;\n-        time_t start_time, current_time;\n+  jsize size, i;\n+  jcharArray arr;\n+  jchar *pa;\n+  jchar hash = 0;\n+  time_t start_time, current_time;\n@@ -48,6 +48,6 @@\n-        if (objFieldId == NULL) {\n-                jclass klass = env->GetObjectClass(o);\n-                objFieldId = env->GetFieldID(klass, \"obj\", \"Ljava\/lang\/Object;\");\n-        }\n-        arr = (jcharArray) env->GetObjectField(o, objFieldId);\n-        env->SetObjectField(o, objFieldId, NULL);\n+  if (objFieldId == NULL) {\n+    jclass klass = ec_jni->GetObjectClass(o);\n+    objFieldId = ec_jni->GetFieldID(klass, \"obj\", \"Ljava\/lang\/Object;\");\n+  }\n+  arr = (jcharArray) ec_jni->GetObjectField(o, objFieldId);\n+  ec_jni->SetObjectField(o, objFieldId, NULL);\n@@ -55,19 +55,21 @@\n-        size = env->GetArrayLength(arr);\n-        start_time = time(NULL);\n-        current_time = 0;\n-        enterTime \/= 1000;\n-        while (current_time - start_time < enterTime) {\n-                pa = (jchar*) env->GetPrimitiveArrayCritical(arr, NULL);\n-                if (pa != NULL) {\n-                        for (i = 0; i < size; ++i)\n-                                hash ^= pa[i];\n-                } else {\n-                        hash = 0;\n-                }\n-                mssleep((long) sleepTime);\n-                env->ReleasePrimitiveArrayCritical(arr, pa, 0);\n-                mssleep((long) sleepTime);\n-                current_time = time(NULL);\n-        }\n-        env->SetObjectField(o, objFieldId, arr);\n-        return hash;\n+  size = ec_jni->GetArrayLength(arr);\n+  start_time = time(NULL);\n+  current_time = 0;\n+  enterTime \/= 1000;\n+  while (difftime(current_time, start_time) < enterTime) {\n+    hash = 0;\n+    pa = (jchar*) ec_jni->GetPrimitiveArrayCritical(arr, NULL);\n+    if (pa != NULL) {\n+      for (i = 0; i < size; ++i) {\n+        hash ^= pa[i];\n+      }\n+    } else {\n+      jni_env->FatalError(\"GetPrimitiveArrayCritical returned NULL\");\n+    }\n+    mssleep((long) sleepTime);\n+    ec_jni->ReleasePrimitiveArrayCritical(arr, pa, 0);\n+    mssleep((long) sleepTime);\n+    current_time = time(NULL);\n+  }\n+  ec_jni->SetObjectField(o, objFieldId, arr);\n+  return hash;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/CharArrayCriticalLocker.cpp","additions":34,"deletions":32,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-        ExceptionCheckingJniEnvPtr env(jni_env);\n+  ExceptionCheckingJniEnvPtr ec_jni(jni_env);\n@@ -42,5 +42,5 @@\n-        jsize size, i;\n-        jdoubleArray arr;\n-        jdouble *pa;\n-        jdouble hash = 0;\n-        time_t start_time, current_time;\n+  jsize size, i;\n+  jdoubleArray arr;\n+  jdouble *pa;\n+  jdouble hash = 0;\n+  time_t start_time, current_time;\n@@ -48,6 +48,6 @@\n-        if (objFieldId == NULL) {\n-                jclass klass = env->GetObjectClass(o);\n-                objFieldId = env->GetFieldID(klass, \"obj\", \"Ljava\/lang\/Object;\");\n-        }\n-        arr = (jdoubleArray) env->GetObjectField(o, objFieldId);\n-        env->SetObjectField(o, objFieldId, NULL);\n+  if (objFieldId == NULL) {\n+    jclass klass = ec_jni->GetObjectClass(o);\n+    objFieldId = ec_jni->GetFieldID(klass, \"obj\", \"Ljava\/lang\/Object;\");\n+  }\n+  arr = (jdoubleArray) ec_jni->GetObjectField(o, objFieldId);\n+  ec_jni->SetObjectField(o, objFieldId, NULL);\n@@ -55,19 +55,21 @@\n-        size = env->GetArrayLength(arr);\n-        start_time = time(NULL);\n-        enterTime \/= 1000;\n-        current_time = 0;\n-        while (current_time - start_time < enterTime) {\n-                pa = (jdouble*) env->GetPrimitiveArrayCritical(arr, NULL);\n-                if (pa != NULL) {\n-                        for (i = 0; i < size; ++i)\n-                                hash += pa[i];\n-                } else {\n-                        hash = 0;\n-                }\n-                mssleep((long) sleepTime);\n-                env->ReleasePrimitiveArrayCritical(arr, pa, 0);\n-                mssleep((long) sleepTime);\n-                current_time = time(NULL);\n-        }\n-        env->SetObjectField(o, objFieldId, arr);\n-        return hash;\n+  size = ec_jni->GetArrayLength(arr);\n+  start_time = time(NULL);\n+  enterTime \/= 1000;\n+  current_time = 0;\n+  while (difftime(current_time, start_time) < enterTime) {\n+    hash = 0;\n+    pa = (jdouble*) ec_jni->GetPrimitiveArrayCritical(arr, NULL);\n+    if (pa != NULL) {\n+      for (i = 0; i < size; ++i) {\n+        hash += pa[i];\n+      }\n+    } else {\n+      jni_env->FatalError(\"GetPrimitiveArrayCritical returned NULL\");\n+    }\n+    mssleep((long) sleepTime);\n+    ec_jni->ReleasePrimitiveArrayCritical(arr, pa, 0);\n+    mssleep((long) sleepTime);\n+    current_time = time(NULL);\n+  }\n+  ec_jni->SetObjectField(o, objFieldId, arr);\n+  return hash;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/DoubleArrayCriticalLocker.cpp","additions":34,"deletions":32,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-        ExceptionCheckingJniEnvPtr env(jni_env);\n+  ExceptionCheckingJniEnvPtr ec_jni(jni_env);\n@@ -42,5 +42,5 @@\n-        jsize size, i;\n-        jfloatArray arr;\n-        jfloat *pa;\n-        jfloat hash = 0;\n-        time_t start_time, current_time;\n+  jsize size, i;\n+  jfloatArray arr;\n+  jfloat *pa;\n+  jfloat hash = 0;\n+  time_t start_time, current_time;\n@@ -48,6 +48,6 @@\n-        if (objFieldId == NULL) {\n-                jclass klass = env->GetObjectClass(o);\n-                objFieldId = env->GetFieldID(klass, \"obj\", \"Ljava\/lang\/Object;\");\n-        }\n-        arr = (jfloatArray) env->GetObjectField(o, objFieldId);\n-        env->SetObjectField(o, objFieldId, NULL);\n+  if (objFieldId == NULL) {\n+    jclass klass = ec_jni->GetObjectClass(o);\n+    objFieldId = ec_jni->GetFieldID(klass, \"obj\", \"Ljava\/lang\/Object;\");\n+  }\n+  arr = (jfloatArray) ec_jni->GetObjectField(o, objFieldId);\n+  ec_jni->SetObjectField(o, objFieldId, NULL);\n@@ -55,19 +55,21 @@\n-        size = env->GetArrayLength(arr);\n-        start_time = time(NULL);\n-        enterTime \/= 1000;\n-        current_time = 0;\n-        while (current_time - start_time < enterTime) {\n-                pa = (jfloat*) env->GetPrimitiveArrayCritical(arr, NULL);\n-                if (pa != NULL) {\n-                        for (i = 0; i < size; ++i)\n-                                hash += pa[i];\n-                } else {\n-                        hash = 0;\n-                }\n-                mssleep((long) sleepTime);\n-                env->ReleasePrimitiveArrayCritical(arr, pa, 0);\n-                mssleep((long) sleepTime);\n-                current_time = time(NULL);\n-        }\n-        env->SetObjectField(o, objFieldId, arr);\n-        return hash;\n+  size = ec_jni->GetArrayLength(arr);\n+  start_time = time(NULL);\n+  enterTime \/= 1000;\n+  current_time = 0;\n+  while (difftime(current_time, start_time) < enterTime) {\n+    hash = 0;\n+    pa = (jfloat*) ec_jni->GetPrimitiveArrayCritical(arr, NULL);\n+    if (pa != NULL) {\n+      for (i = 0; i < size; ++i) {\n+        hash += pa[i];\n+      }\n+    } else {\n+      jni_env->FatalError(\"GetPrimitiveArrayCritical returned NULL\");\n+    }\n+    mssleep((long) sleepTime);\n+    ec_jni->ReleasePrimitiveArrayCritical(arr, pa, 0);\n+    mssleep((long) sleepTime);\n+    current_time = time(NULL);\n+  }\n+  ec_jni->SetObjectField(o, objFieldId, arr);\n+  return hash;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/FloatArrayCriticalLocker.cpp","additions":34,"deletions":32,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-        ExceptionCheckingJniEnvPtr env(jni_env);\n+  ExceptionCheckingJniEnvPtr ec_jni(jni_env);\n@@ -42,5 +42,5 @@\n-        jsize size, i;\n-        jintArray arr;\n-        jint *pa;\n-        jint hash = 0;\n-        time_t start_time, current_time;\n+  jsize size, i;\n+  jintArray arr;\n+  jint *pa;\n+  jint hash = 0;\n+  time_t start_time, current_time;\n@@ -48,6 +48,6 @@\n-        if (objFieldId == NULL) {\n-                jclass klass = env->GetObjectClass(o);\n-                objFieldId = env->GetFieldID(klass, \"obj\", \"Ljava\/lang\/Object;\");\n-        }\n-        arr = (jintArray) env->GetObjectField(o, objFieldId);\n-        env->SetObjectField(o, objFieldId, NULL);\n+  if (objFieldId == NULL) {\n+    jclass klass = ec_jni->GetObjectClass(o);\n+    objFieldId = ec_jni->GetFieldID(klass, \"obj\", \"Ljava\/lang\/Object;\");\n+  }\n+  arr = (jintArray) ec_jni->GetObjectField(o, objFieldId);\n+  ec_jni->SetObjectField(o, objFieldId, NULL);\n@@ -55,19 +55,21 @@\n-        size = env->GetArrayLength(arr);\n-        start_time = time(NULL);\n-        enterTime \/= 1000;\n-        current_time = 0;\n-        while (current_time - start_time < enterTime) {\n-                pa = (jint*) env->GetPrimitiveArrayCritical(arr, NULL);\n-                if (pa != NULL) {\n-                        for (i = 0; i < size; ++i)\n-                                hash ^= pa[i];\n-                } else {\n-                        hash = 0;\n-                }\n-                mssleep((long) sleepTime);\n-                env->ReleasePrimitiveArrayCritical(arr, pa, 0);\n-                mssleep((long) sleepTime);\n-                current_time = time(NULL);\n-        }\n-        env->SetObjectField(o, objFieldId, arr);\n-        return hash;\n+  size = ec_jni->GetArrayLength(arr);\n+  start_time = time(NULL);\n+  enterTime \/= 1000;\n+  current_time = 0;\n+  while (difftime(current_time, start_time) < enterTime) {\n+    hash = 0;\n+    pa = (jint*) ec_jni->GetPrimitiveArrayCritical(arr, NULL);\n+    if (pa != NULL) {\n+      for (i = 0; i < size; ++i) {\n+        hash ^= pa[i];\n+      }\n+    } else {\n+      jni_env->FatalError(\"GetPrimitiveArrayCritical returned NULL\");\n+    }\n+    mssleep((long) sleepTime);\n+    ec_jni->ReleasePrimitiveArrayCritical(arr, pa, 0);\n+    mssleep((long) sleepTime);\n+    current_time = time(NULL);\n+  }\n+  ec_jni->SetObjectField(o, objFieldId, arr);\n+  return hash;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/IntArrayCriticalLocker.cpp","additions":34,"deletions":32,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-        ExceptionCheckingJniEnvPtr env(jni_env);\n+  ExceptionCheckingJniEnvPtr ec_jni(jni_env);\n@@ -42,5 +42,5 @@\n-        jsize size, i;\n-        jlongArray arr;\n-        jlong *pa;\n-        jlong hash = 0;\n-        time_t start_time, current_time;\n+  jsize size, i;\n+  jlongArray arr;\n+  jlong *pa;\n+  jlong hash = 0;\n+  time_t start_time, current_time;\n@@ -48,6 +48,6 @@\n-        if (objFieldId == NULL) {\n-                jclass klass = env->GetObjectClass(o);\n-                objFieldId = env->GetFieldID(klass, \"obj\", \"Ljava\/lang\/Object;\");\n-        }\n-        arr = (jlongArray) env->GetObjectField(o, objFieldId);\n-        env->SetObjectField(o, objFieldId, NULL);\n+  if (objFieldId == NULL) {\n+    jclass klass = ec_jni->GetObjectClass(o);\n+    objFieldId = ec_jni->GetFieldID(klass, \"obj\", \"Ljava\/lang\/Object;\");\n+  }\n+  arr = (jlongArray) ec_jni->GetObjectField(o, objFieldId);\n+  ec_jni->SetObjectField(o, objFieldId, NULL);\n@@ -55,19 +55,21 @@\n-        size = env->GetArrayLength(arr);\n-        start_time = time(NULL);\n-        enterTime \/= 1000;\n-        current_time = 0;\n-        while (current_time - start_time < enterTime) {\n-                pa = (jlong*) env->GetPrimitiveArrayCritical(arr, NULL);\n-                if (pa != NULL) {\n-                        for (i = 0; i < size; ++i)\n-                                hash ^= pa[i];\n-                } else {\n-                        hash = 0;\n-                }\n-                mssleep((long) sleepTime);\n-                env->ReleasePrimitiveArrayCritical(arr, pa, 0);\n-                mssleep((long) sleepTime);\n-                current_time = time(NULL);\n-        }\n-        env->SetObjectField(o, objFieldId, arr);\n-        return hash;\n+  size = ec_jni->GetArrayLength(arr);\n+  start_time = time(NULL);\n+  enterTime \/= 1000;\n+  current_time = 0;\n+  while (difftime(current_time, start_time) < enterTime) {\n+    hash = 0;\n+    pa = (jlong*) ec_jni->GetPrimitiveArrayCritical(arr, NULL);\n+    if (pa != NULL) {\n+      for (i = 0; i < size; ++i) {\n+        hash ^= pa[i];\n+      }\n+    } else {\n+      jni_env->FatalError(\"GetPrimitiveArrayCritical returned NULL\");\n+    }\n+    mssleep((long) sleepTime);\n+    ec_jni->ReleasePrimitiveArrayCritical(arr, pa, 0);\n+    mssleep((long) sleepTime);\n+    current_time = time(NULL);\n+  }\n+  ec_jni->SetObjectField(o, objFieldId, arr);\n+  return hash;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/LongArrayCriticalLocker.cpp","additions":34,"deletions":32,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-        ExceptionCheckingJniEnvPtr env(jni_env);\n+  ExceptionCheckingJniEnvPtr ec_jni(jni_env);\n@@ -42,5 +42,5 @@\n-        jsize size, i;\n-        jshortArray arr;\n-        jshort *pa;\n-        jshort hash = 0;\n-        time_t start_time, current_time;\n+  jsize size, i;\n+  jshortArray arr;\n+  jshort *pa;\n+  jshort hash = 0;\n+  time_t start_time, current_time;\n@@ -48,6 +48,6 @@\n-        if (objFieldId == NULL) {\n-                jclass klass = env->GetObjectClass(o);\n-                objFieldId = env->GetFieldID(klass, \"obj\", \"Ljava\/lang\/Object;\");\n-        }\n-        arr = (jshortArray) env->GetObjectField(o, objFieldId);\n-        env->SetObjectField(o, objFieldId, NULL);\n+  if (objFieldId == NULL) {\n+  jclass klass = ec_jni->GetObjectClass(o);\n+  objFieldId = ec_jni->GetFieldID(klass, \"obj\", \"Ljava\/lang\/Object;\");\n+  }\n+  arr = (jshortArray) ec_jni->GetObjectField(o, objFieldId);\n+  ec_jni->SetObjectField(o, objFieldId, NULL);\n@@ -55,19 +55,21 @@\n-        size = env->GetArrayLength(arr);\n-        start_time = time(NULL);\n-        enterTime \/= 1000;\n-        current_time = 0;\n-        while (current_time - start_time < enterTime) {\n-                pa = (jshort*) env->GetPrimitiveArrayCritical(arr, NULL);\n-                if (pa != NULL) {\n-                        for (i = 0; i < size; ++i)\n-                                hash ^= pa[i];\n-                } else {\n-                        hash = 0;\n-                }\n-                mssleep((long) sleepTime);\n-                env->ReleasePrimitiveArrayCritical(arr, pa, 0);\n-                mssleep((long) sleepTime);\n-                current_time = time(NULL);\n-        }\n-        env->SetObjectField(o, objFieldId, arr);\n-        return hash;\n+  size = ec_jni->GetArrayLength(arr);\n+  start_time = time(NULL);\n+  enterTime \/= 1000;\n+  current_time = 0;\n+  while (current_time - start_time < enterTime) {\n+    hash = 0;\n+    pa = (jshort*) ec_jni->GetPrimitiveArrayCritical(arr, NULL);\n+    if (pa != NULL) {\n+      for (i = 0; i < size; ++i) {\n+        hash ^= pa[i];\n+      }\n+    } else {\n+      jni_env->FatalError(\"GetPrimitiveArrayCritical returned NULL\");\n+    }\n+    mssleep((long) sleepTime);\n+    ec_jni->ReleasePrimitiveArrayCritical(arr, pa, 0);\n+    mssleep((long) sleepTime);\n+    current_time = time(NULL);\n+  }\n+  ec_jni->SetObjectField(o, objFieldId, arr);\n+  return hash;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/ShortArrayCriticalLocker.cpp","additions":34,"deletions":32,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-        ExceptionCheckingJniEnvPtr env(jni_env);\n+  ExceptionCheckingJniEnvPtr ec_jni(jni_env);\n@@ -42,5 +42,5 @@\n-        jsize size, i;\n-        jstring str;\n-        const jchar *pa;\n-        jchar hash = 0;\n-        time_t start_time, current_time;\n+  jsize size, i;\n+  jstring str;\n+  const jchar *pa;\n+  jchar hash = 0;\n+  time_t start_time, current_time;\n@@ -48,6 +48,6 @@\n-        if (objFieldId == NULL) {\n-                jclass klass = env->GetObjectClass(o);\n-                objFieldId = env->GetFieldID(klass, \"obj\", \"Ljava\/lang\/Object;\");\n-        }\n-        str = (jstring) env->GetObjectField(o, objFieldId);\n-        env->SetObjectField(o, objFieldId, NULL);\n+  if (objFieldId == NULL) {\n+    jclass klass = ec_jni->GetObjectClass(o);\n+    objFieldId = ec_jni->GetFieldID(klass, \"obj\", \"Ljava\/lang\/Object;\");\n+  }\n+  str = (jstring) ec_jni->GetObjectField(o, objFieldId);\n+  ec_jni->SetObjectField(o, objFieldId, NULL);\n@@ -55,19 +55,21 @@\n-        size = env->GetStringLength(str);\n-        start_time = time(NULL);\n-        enterTime \/= 1000;\n-        current_time = 0;\n-        while (current_time - start_time < enterTime) {\n-                pa = env->GetStringCritical(str, NULL);\n-                if (pa != NULL) {\n-                        for (i = 0; i < size; ++i)\n-                                hash ^= pa[i];\n-                } else {\n-                        hash = JNI_FALSE;\n-                }\n-                mssleep((long) sleepTime);\n-                env->ReleaseStringCritical(str, pa);\n-                mssleep((long) sleepTime);\n-                current_time = time(NULL);\n-        }\n-        env->SetObjectField(o, objFieldId, str);\n-        return hash;\n+  size = ec_jni->GetStringLength(str);\n+  start_time = time(NULL);\n+  enterTime \/= 1000;\n+  current_time = 0;\n+  while (current_time - start_time < enterTime) {\n+    hash = 0;\n+    pa = ec_jni->GetStringCritical(str, NULL);\n+    if (pa != NULL) {\n+      for (i = 0; i < size; ++i) {\n+        hash ^= pa[i];\n+      }\n+    } else {\n+      jni_env->FatalError(\"GetStringCritical returned NULL\");\n+    }\n+    mssleep((long) sleepTime);\n+    ec_jni->ReleaseStringCritical(str, pa);\n+    mssleep((long) sleepTime);\n+    current_time = time(NULL);\n+  }\n+  ec_jni->SetObjectField(o, objFieldId, str);\n+  return hash;\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/lock\/jni\/StringCriticalLocker.cpp","additions":34,"deletions":32,"binary":false,"changes":66,"status":"modified"}]}