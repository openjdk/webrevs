{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @requires (sun.arch.data.model == \"64\"  & os.maxMemory > 4g)\n@@ -28,2 +29,1 @@\n- * @library \/test\/lib\n- * @run main\/othervm LargeCopyWithMark\n+ * @run main\/othervm -Xmx4G LargeCopyWithMark\n@@ -36,2 +36,0 @@\n-import static jdk.test.lib.process.ProcessTools.*;\n-\n@@ -41,13 +39,3 @@\n-    public static void main(String[] args) throws Exception {\n-        if (! System.getProperty(\"os.arch\").contains(\"64\")) {\n-            System.out.println(\"Test runs on 64 bit platforms\");\n-            return;\n-        }\n-        ProcessBuilder pb = createJavaProcessBuilder(\"-Xmx4G\",\n-                \"-ea:LargeCopyWithMark$Child\",\n-                \"LargeCopyWithMark$Child\");\n-        int res = pb.inheritIO().start().waitFor();\n-        if (res != 0) {\n-            throw new AssertionError(\"Test failed: exit code = \" + res);\n-        }\n-    }\n+    static final int BUFF_SIZE = 8192;\n+    static final int BIS_BUFF_SIZE = Integer.MAX_VALUE \/ 2 + 100;\n+    static final long BYTES_TO_COPY = 2L * Integer.MAX_VALUE;\n@@ -55,8 +43,3 @@\n-    public static class Child {\n-        static final int BUFF_SIZE = 8192;\n-        static final int BIS_BUFF_SIZE = Integer.MAX_VALUE \/ 2 + 100;\n-        static final long BYTES_TO_COPY = 2L * Integer.MAX_VALUE;\n-\n-        static {\n-            assert BIS_BUFF_SIZE * 2 < 0 : \"doubling must overflow\";\n-        }\n+    static {\n+        assert BIS_BUFF_SIZE * 2 < 0 : \"doubling must overflow\";\n+    }\n@@ -64,2 +47,2 @@\n-        public static void main(String[] args) throws Exception {\n-            byte[] buff = new byte[BUFF_SIZE];\n+    public static void main(String[] args) throws Exception {\n+        byte[] buff = new byte[BUFF_SIZE];\n@@ -67,3 +50,3 @@\n-            try (InputStream myis = new MyInputStream(BYTES_TO_COPY);\n-                 InputStream bis = new BufferedInputStream(myis, BIS_BUFF_SIZE);\n-                 OutputStream myos = new MyOutputStream()) {\n+        try (InputStream myis = new MyInputStream(BYTES_TO_COPY);\n+             InputStream bis = new BufferedInputStream(myis, BIS_BUFF_SIZE);\n+             OutputStream myos = new MyOutputStream()) {\n@@ -71,2 +54,2 @@\n-                \/\/ will require a buffer bigger than BIS_BUFF_SIZE\n-                bis.mark(BIS_BUFF_SIZE + 100);\n+            \/\/ will require a buffer bigger than BIS_BUFF_SIZE\n+            bis.mark(BIS_BUFF_SIZE + 100);\n@@ -74,11 +57,5 @@\n-                for (;;) {\n-                    int count = bis.read(buff, 0, BUFF_SIZE);\n-                    if (count == -1)\n-                        break;\n-                    myos.write(buff, 0, count);\n-                }\n-            } catch (java.lang.NegativeArraySizeException e) {\n-                e.printStackTrace();\n-                System.exit(11);\n-            } catch (Exception e) {\n-                e.printStackTrace();\n+            for (;;) {\n+                int count = bis.read(buff, 0, BUFF_SIZE);\n+                if (count == -1)\n+                    break;\n+                myos.write(buff, 0, count);\n","filename":"test\/jdk\/java\/io\/BufferedInputStream\/LargeCopyWithMark.java","additions":21,"deletions":44,"binary":false,"changes":65,"status":"modified"}]}