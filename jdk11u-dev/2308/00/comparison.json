{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n- * @bug 8049021\n- * @summary Construct ResponseAPDU from byte array and check NR< SW, SW1 and SW2\n+ * @bug 8049021 8255546\n+ * @summary Construct ResponseAPDU from byte array and check NR< SW, SW1, SW2 and toString\n@@ -45,0 +45,1 @@\n+    static String expectedToString;\n@@ -60,0 +61,3 @@\n+\n+        expectedToString = \"ResponseAPDU: \" + R1.length +\n+                \" bytes, SW=\" + Integer.toHexString(expectedSw);\n@@ -70,0 +74,1 @@\n+        assertEquals(RAPDU.toString(), expectedToString);\n","filename":"test\/jdk\/javax\/smartcardio\/ResponseAPDUTest.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 6293767 6469513\n+ * @bug 6293767 6469513 8255546\n@@ -29,0 +29,1 @@\n+ * @run testng TestCardPermission\n@@ -31,0 +32,3 @@\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n@@ -32,0 +36,3 @@\n+import java.security.Permission;\n+\n+import static org.testng.Assert.*;\n@@ -35,23 +42,12 @@\n-    public static void main(String[] args) throws Exception {\n-        CardPermission perm;\n-\n-        test(\"*\");\n-        test(\"connect\");\n-        test(\"reset\");\n-        test(\"exclusive\");\n-        test(\"transmitControl\");\n-        test(\"getBasicChannel\");\n-        test(\"openLogicalChannel\");\n-\n-        test(\"connect,reset\");\n-        test(\"Reset,coNnect\", \"connect,reset\");\n-        test(\"exclusive,*,connect\", \"*\");\n-        test(\"connect,reset,exclusive,transmitControl,getBasicChannel,openLogicalChannel\", \"*\");\n-        test(null, null);\n-\n-        invalid(\"\");\n-        invalid(\"foo\");\n-        invalid(\"connect, reset\");\n-        invalid(\"connect,,reset\");\n-        invalid(\"connect,\");\n-        invalid(\",connect\");\n+    @DataProvider(name = \"actions\")\n+    Object[][] getActions() {\n+        return new Object[][]{\n+                {\"*\"},\n+                {\"connect\"},\n+                {\"reset\"},\n+                {\"exclusive\"},\n+                {\"transmitControl\"},\n+                {\"getBasicChannel\"},\n+                {\"openLogicalChannel\"},\n+                {\"connect,reset\"}\n+        };\n@@ -60,7 +56,57 @@\n-    private static void invalid(String s) throws Exception {\n-        try {\n-            CardPermission c = new CardPermission(\"*\", s);\n-            throw new Exception(\"Created invalid action: \" + c);\n-        } catch (IllegalArgumentException e) {\n-            System.out.println(\"OK: \" + e);\n-        }\n+    @DataProvider(name = \"actionsCanon\")\n+    Object[][] getActionsCanon() {\n+        return new Object[][]{\n+                {\"Reset,coNnect\", \"connect,reset\"},\n+                {\"exclusive,*,connect\", \"*\"},\n+                {\"connect,reset,exclusive,transmitControl,getBasicChannel,openLogicalChannel\", \"*\"},\n+                {null, null}\n+        };\n+    }\n+\n+    @DataProvider(name = \"invalidActions\")\n+    Object[][] getInvalidActions() {\n+        return new Object[][]{\n+                {\"\"},\n+                {\"foo\"},\n+                {\"connect, reset\"},\n+                {\"connect,,reset\"},\n+                {\"connect,\"},\n+                {\",connect\"}\n+        };\n+    }\n+\n+    @Test(dataProvider = \"actions\")\n+    public void testActions(String actions) throws Exception {\n+        testActions(actions, actions);\n+    }\n+\n+    @Test(dataProvider = \"actionsCanon\")\n+    public void testActionsCanon(String actions, String canon) throws Exception {\n+        testActions(actions, canon);\n+    }\n+\n+    @Test(dataProvider = \"invalidActions\")\n+    public void testInvalidActions(String actions) {\n+        assertThrows(IllegalArgumentException.class, () -> new CardPermission(\"*\", actions));\n+    }\n+\n+    \/\/ Should return false since p2 is not a CardPermission instance\n+    @Test\n+    public void testImpliesNotCardPermissionInstance() {\n+        String actions = \"connect\";\n+        CardPermission p1 = new CardPermission(\"*\", actions);\n+        Permission p2 = new Permission(actions) {\n+            @Override public boolean implies(Permission permission) { return false; }\n+            @Override public boolean equals(Object obj) { return false; }\n+            @Override public int hashCode() { return 0; }\n+            @Override public String getActions() { return null; }\n+        };\n+        assertFalse(p1.implies(p2));\n+    }\n+\n+    \/\/ Should return false since p2 actions are not a subset of p1\n+    @Test\n+    public void testImpliesNotSubsetCardPermission() {\n+        CardPermission p1 = new CardPermission(\"*\", \"connect,reset\");\n+        CardPermission p2 = new CardPermission(\"*\", \"transmitControl\");\n+        assertFalse(p1.implies(p2));\n@@ -69,2 +115,6 @@\n-    private static void test(String actions) throws Exception {\n-        test(actions, actions);\n+    \/\/ Should return true since p1 name is * and p2 actions are a subset of p1\n+    @Test\n+    public void testImpliesNameEqualsAll() {\n+        CardPermission p1 = new CardPermission(\"*\", \"connect,reset\");\n+        CardPermission p2 = new CardPermission(\"None\", \"reset\");\n+        assertTrue(p1.implies(p2));\n@@ -73,1 +123,17 @@\n-    private static void test(String actions, String canon) throws Exception {\n+    \/\/ Should return true since p1 and p2 names are equal\n+    @Test\n+    public void testImpliesBothSameNameNotAll() {\n+        CardPermission p1 = new CardPermission(\"None\", \"connect,reset\");\n+        CardPermission p2 = new CardPermission(\"None\", \"reset\");\n+        assertTrue(p1.implies(p2));\n+    }\n+\n+    \/\/ Should return false since p1 and p2 names are not equal\n+    @Test\n+    public void testImpliesNameNotSameNotAll() {\n+        CardPermission p1 = new CardPermission(\"None\", \"connect,reset\");\n+        CardPermission p2 = new CardPermission(\"Other\", \"reset\");\n+        assertFalse(p1.implies(p2));\n+    }\n+\n+    private void testActions(String actions, String canon) throws Exception {\n@@ -77,1 +143,1 @@\n-        if (canon != null && canon.equals(a) == false) {\n+        if (canon != null && !canon.equals(a)) {\n@@ -81,1 +147,0 @@\n-\n","filename":"test\/jdk\/javax\/smartcardio\/TestCardPermission.java","additions":102,"deletions":37,"binary":false,"changes":139,"status":"modified"}]}