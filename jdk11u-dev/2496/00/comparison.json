{"files":[{"patch":"@@ -610,2 +610,0 @@\n-sun\/security\/tools\/keytool\/ListKeychainStore.sh                 8156889 macosx-all\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,57 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.security.*;\n-\n-\/*\n- * Export a private key from the named keychain entry without supplying a\n- * password. See JDK-8062264.\n- *\n- * NOTE: Keychain access controls must already have been lowered to permit\n- *       the target entry to be accessed.\n- *\/\n-public class ExportPrivateKeyNoPwd {\n-\n-    public static final void main(String[] args) throws Exception {\n-\n-        if (args.length != 1) {\n-            throw new Exception(\n-                \"ExportPrivateKeyNoPwd: must supply name of a keystore entry\");\n-        }\n-        String alias = args[0];\n-\n-        KeyStore ks = KeyStore.getInstance(\"KeychainStore\");\n-        System.out.println(\"ExportPrivateKeyNoPwd: loading keychains...\");\n-        ks.load(null, null);\n-\n-        System.out.println(\"ExportPrivateKeyNoPwd: exporting key...\");\n-        Key key = ks.getKey(alias, null);\n-        if (key instanceof PrivateKey) {\n-            System.out.println(\"ExportPrivateKeyNoPwd: exported \" +\n-                key.getAlgorithm() + \" private key from '\" + alias + \"'\");\n-        } else {\n-            throw new Exception(\"Error exporting private key from keychain\");\n-        }\n-    }\n-}\n-\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/ExportPrivateKeyNoPwd.java","additions":0,"deletions":57,"binary":false,"changes":57,"status":"deleted"},{"patch":"@@ -0,0 +1,202 @@\n+\/*\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 7133495 8062264 8046777 8153005\n+ * @summary KeyChain KeyStore implementation retrieves only one private key entry\n+ * @requires (os.family == \"mac\")\n+ * @library \/test\/lib\n+ * @run main\/othervm\/manual ListKeyChainStore\n+ *\/\n+\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.Key;\n+import java.security.KeyStore;\n+import java.security.PrivateKey;\n+\n+public class ListKeyChainStore {\n+    private static final String PWD = \"xxxxxx\";\n+    private static final String DEFAULT_KEYTOOL = \"-list -storetype KeychainStore \" +\n+            \"-keystore NONE -storepass \" + PWD;\n+    private static final String USER_DIR = System.getProperty(\"user.dir\", \".\");\n+    private static final String FS = System.getProperty(\"file.separator\");\n+    private static final String PKCS12_KEYSTORE = USER_DIR + FS + \"7133495.p12\";\n+    private static final String KEYCHAIN_FILE = USER_DIR + FS + \"7133495.keychain\";\n+    private static final String TEMPORARY_FILE = USER_DIR + FS + \"7133495.tmp\";\n+    private static final String USER_KEYCHAIN_LIST = USER_DIR + FS + \"user.keychain.list\";\n+    private static final String PRIVATE_KEY_ENTRY = \"PrivateKeyEntry\";\n+\n+    public static void main(String[] args) throws Throwable {\n+        LOG_MSG(\"WARNING: This test doesn't work on macOS virtualized environment. \" +\n+                \"`security list-keychains -s` doesn't update the search order.\");\n+\n+        deleteTestTempFilesIfExists();\n+\n+        \/\/ Get the old security keychain list to restore later\n+        try (PrintStream printStream = new PrintStream(USER_KEYCHAIN_LIST)) {\n+            ProcessTools.executeCommand(\"sh\", \"-c\", \"security list-keychains\")\n+                    .shouldHaveExitValue(0).outputTo(printStream);\n+        }\n+\n+        try {\n+            try (PrintStream printStream = new PrintStream(TEMPORARY_FILE)) {\n+                SecurityTools.keytool(DEFAULT_KEYTOOL).shouldHaveExitValue(0)\n+                        .outputTo(printStream);\n+            }\n+            int oldPrivateKeyCount = countOccurrences(TEMPORARY_FILE, PRIVATE_KEY_ENTRY);\n+            LOG_MSG(\"Found \" + oldPrivateKeyCount + \" private key entries in the \" +\n+                    \"Keychain keystore\");\n+\n+            \/\/ Create the PKCS12 keystore containing 3 public\/private key pairs\n+            LOG_MSG(\"Creating PKCS12 keystore: \" + PKCS12_KEYSTORE);\n+            for (int i = 0; i < 3; i++) {\n+                \/\/ Use legacy encryption and MAC algorithms, refer macOS open radar FB8988319\n+                \/\/ macOS security framework doesn't work with the latest algorithms\n+                SecurityTools.keytool(String.format(\"-J-Dkeystore.pkcs12.legacy -genkeypair\" +\n+                                \" -storetype PKCS12 -keystore %s -storepass %s -keyalg rsa  -dname \" +\n+                                \"CN=CN%d,OU=OU%d,O=O%d,ST=ST%d,C=US -alias 7133495-%d\",\n+                        PKCS12_KEYSTORE, PWD, i, i, i, i, i)).shouldHaveExitValue(0);\n+            }\n+\n+            \/\/ Create the keychain\n+            LOG_MSG(\"Creating keychain: \" + KEYCHAIN_FILE);\n+            ProcessTools.executeCommand(\"sh\", \"-c\", String.format(\"security create-keychain\" +\n+                    \" -p %s %s\", PWD, KEYCHAIN_FILE)).shouldHaveExitValue(0);\n+\n+            \/\/ Unlock the keychain\n+            LOG_MSG(\"Unlock keychain: \" + KEYCHAIN_FILE);\n+            ProcessTools.executeCommand(\"sh\", \"-c\", String.format(\"security unlock-keychain\" +\n+                    \" -p %s %s\", PWD, KEYCHAIN_FILE)).shouldHaveExitValue(0);\n+\n+            \/\/ Import the key pairs from the PKCS12 keystore into the keychain\n+            \/\/ The '-A' option is used to lower the keychain's access controls\n+            LOG_MSG(\"Importing the key pairs from \" + PKCS12_KEYSTORE\n+                    + \" to \" + KEYCHAIN_FILE);\n+            ProcessTools.executeCommand(\"sh\", \"-c\", String.format(\"security import %s -k %s\" +\n+                    \" -f pkcs12 -P %s -A\", PKCS12_KEYSTORE, KEYCHAIN_FILE, PWD)).shouldHaveExitValue(0);\n+\n+            \/\/ Generate a 2048-bit RSA keypair and import into the keychain\n+            \/\/ Its private key is configured with non-default key usage settings\n+            ProcessTools.executeCommand(\"sh\", \"-c\", String.format(\"certtool ca k=%s \" +\n+                    \"<<EOF\\n\" +\n+                    \"test\\n\" +\n+                    \"r\\n\" +\n+                    \"2048\\n\" +\n+                    \"y\\n\" +\n+                    \"b\\n\" +\n+                    \"s\\n\" +\n+                    \"y\\n\" +\n+                    \"A\\n\" +\n+                    \"US\\n\" +\n+                    \"A\\n\" +\n+                    \"A\\n\" +\n+                    \"\\n\" +\n+                    \"\\n\" +\n+                    \"y\\n\" +\n+                    \"EOF\", KEYCHAIN_FILE)).shouldHaveExitValue(0);\n+\n+            \/\/ Adjust the keychain search order to add KEYCHAIN_FILE to top\n+            try (PrintStream printStream = new PrintStream(TEMPORARY_FILE)) {\n+                printStream.println(\"\\\"\" + KEYCHAIN_FILE + \"\\\"\");\n+                printStream.println(ProcessTools.executeCommand(\"sh\", \"-c\", \"security list-keychains\")\n+                        .shouldHaveExitValue(0).getOutput());\n+            }\n+            ProcessTools.executeCommand(\"sh\", \"-c\", String.format(\"security list-keychains -s %s\",\n+                    ProcessTools.executeCommand(\"sh\", \"-c\", String.format(\"xargs < %s\",\n+                            TEMPORARY_FILE)).getOutput()));\n+            LOG_MSG(\"Keychain search order:\");\n+            ProcessTools.executeCommand(\"sh\", \"-c\", \"security list-keychains\");\n+\n+            \/\/ Recount the number of private key entries in the Keychain keystore\n+            \/\/ 3 private keys imported from PKCS12, 1 private key generated by 'certtool'\n+            Files.deleteIfExists(Paths.get(TEMPORARY_FILE));\n+            try (PrintStream printStream = new PrintStream(TEMPORARY_FILE)) {\n+                SecurityTools.keytool(DEFAULT_KEYTOOL).shouldHaveExitValue(0)\n+                        .outputTo(printStream);\n+            }\n+            int newPrivateKeyCount = countOccurrences(TEMPORARY_FILE, PRIVATE_KEY_ENTRY);\n+            LOG_MSG(\"Found \" + newPrivateKeyCount + \" private key entries in \" +\n+                    \"the Keychain keystore\");\n+            if (newPrivateKeyCount < (oldPrivateKeyCount + 4)) {\n+                throw new RuntimeException(\"Error: expected more private key entries in the \" +\n+                        \"Keychain keystore\");\n+            }\n+\n+            \/\/ Export a private key from the keychain (without supplying a password)\n+            \/\/ Access controls have already been lowered (see 'security import ... -A' above)\n+            LOG_MSG(\"Exporting a private key from the keychain\");\n+            KeyStore ks = KeyStore.getInstance(\"KeychainStore\");\n+            ks.load(null, null);\n+            Key key = ks.getKey(\"CN0\", null);\n+            if (key instanceof PrivateKey) {\n+                LOG_MSG(\"Exported \" + key.getAlgorithm() + \" private key from CN0\");\n+            } else {\n+                throw new RuntimeException(\"Error exporting private key from keychain\");\n+            }\n+        } finally {\n+            \/\/ Reset earlier keychain list\n+            ProcessTools.executeCommand(\"sh\", \"-c\", String.format(\"security list-keychains -s %s\",\n+                    ProcessTools.executeCommand(\"sh\", \"-c\", String.format(\"xargs < %s\",\n+                            USER_KEYCHAIN_LIST)).getOutput()));\n+\n+            deleteTestTempFilesIfExists();\n+        }\n+    }\n+\n+    private static void deleteTestTempFilesIfExists() throws Throwable {\n+        Files.deleteIfExists(Paths.get(USER_KEYCHAIN_LIST));\n+        Files.deleteIfExists(Paths.get(PKCS12_KEYSTORE));\n+        if (Files.exists(Paths.get(KEYCHAIN_FILE))) {\n+            ProcessTools.executeCommand(\"sh\", \"-c\", String.format(\"security delete-keychain\" +\n+                    \" %s\", KEYCHAIN_FILE)).shouldHaveExitValue(0);\n+        }\n+        Files.deleteIfExists(Paths.get(TEMPORARY_FILE));\n+    }\n+\n+    private static int countOccurrences(String filePath, String word) throws IOException {\n+        int count = 0;\n+        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                if (line.contains(word)) {\n+                    count++;\n+                }\n+            }\n+        }\n+\n+        return count;\n+    }\n+\n+    private static void LOG_MSG(String msg) {\n+        \/\/ ProcessTools and SecurityTools log a lot of messages so pretty format\n+        \/\/ messages logged from this test\n+        System.out.println();\n+        System.out.println(\"==> \" + msg);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/ListKeyChainStore.java","additions":202,"deletions":0,"binary":false,"changes":202,"status":"added"},{"patch":"@@ -1,188 +0,0 @@\n-#\n-# Copyright (c) 2012, 2014, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-# @test\n-# @bug 7133495 8041740 8062264 8046777\n-# @summary [macosx] KeyChain KeyStore implementation retrieves only one private key entry\n-\n-if [ \"${TESTJAVA}\" = \"\" ] ; then\n-    JAVAC_CMD=`which javac`\n-    TESTJAVA=`dirname $JAVAC_CMD`\/..\n-fi\n-\n-if [ \"${TESTSRC}\" = \"\" ] ; then\n-    TESTSRC=\".\"\n-fi\n-if [ \"${TESTCLASSES}\" = \"\" ] ; then\n-    TESTCLASSES=`pwd`\n-fi\n-\n-# Only run on MacOS\n-OS=`uname -s`\n-case \"$OS\" in\n-    Darwin )\n-        ;;\n-    * )\n-        echo \"Will not run test on: ${OS}\"\n-        exit 0;\n-        ;;\n-esac\n-\n-PWD=\"xxxxxx\"\n-KEYTOOL=\"${TESTJAVA}\/bin\/keytool ${TESTTOOLVMOPTS} -storetype KeychainStore -keystore NONE -storepass $PWD\"\n-TEMPORARY_P12=\"$TESTCLASSES\/7133495.p12\"\n-TEMPORARY_KC=\"$TESTCLASSES\/7133495.keychain\"\n-TEMPORARY_LIST=\"$TESTCLASSES\/7133495.tmp\"\n-CLEANUP_P12=\"rm -f $TEMPORARY_P12\"\n-CLEANUP_KC=\"security delete-keychain $TEMPORARY_KC\"\n-CLEANUP_LIST=\"rm -f $TEMPORARY_LIST\"\n-\n-# Count the number of private key entries in the Keychain keystores\n-\n-COUNT=`$KEYTOOL -list | grep PrivateKeyEntry | wc -l`\n-echo \"Found $COUNT private key entries in the Keychain keystores\"\n-\n-# Create a temporary PKCS12 keystore containing 3 public\/private keypairs\n-\n-RESULT=`$CLEANUP_P12`\n-\n-for i in X Y Z\n-do\n-    ${TESTJAVA}\/bin\/keytool ${TESTTOOLVMOPTS} -genkeypair \\\n-        -storetype PKCS12 \\\n-        -keystore $TEMPORARY_P12 \\\n-        -storepass $PWD \\\n-        -keyalg rsa \\\n-        -dname \"CN=$i,OU=$i,O=$i,ST=$i,C=US\" \\\n-        -alias 7133495-$i\n-\n-    if [ $? -ne 0 ]; then\n-        echo \"Error: cannot create keypair $i in the temporary PKCS12 keystore\"\n-        RESULT=`$CLEANUP_P12`\n-        exit 1\n-    fi\n-done\n-echo \"Created a temporary PKCS12 keystore: $TEMPORARY_P12\"\n-\n-# Create a temporary keychain\n-\n-security create-keychain -p $PWD $TEMPORARY_KC\n-if [ $? -ne 0 ]; then\n-    echo \"Error: cannot create the temporary keychain\"\n-    RESULT=`$CLEANUP_P12`\n-    exit 2\n-fi\n-echo \"Created a temporary keychain: $TEMPORARY_KC\"\n-\n-# Unlock the temporary keychain\n-\n-security unlock-keychain -p $PWD $TEMPORARY_KC\n-if [ $? -ne 0 ]; then\n-    echo \"Error: cannot unlock the temporary keychain\"\n-    RESULT=`$CLEANUP_P12`\n-    RESULT=`$CLEANUP_KC`\n-    exit 3\n-fi\n-echo \"Unlocked the temporary keychain\"\n-\n-# Import the keypairs from the PKCS12 keystore into the keychain\n-# (The '-A' option is used to lower the temporary keychain's access controls)\n-\n-security import $TEMPORARY_P12 -k $TEMPORARY_KC -f pkcs12 -P $PWD -A\n-if [ $? -ne 0 ]; then\n-    echo \"Error: cannot import keypairs from PKCS12 keystore into the keychain\"\n-    RESULT=`$CLEANUP_P12`\n-    RESULT=`$CLEANUP_KC`\n-    exit 4\n-fi\n-echo \"Imported keypairs from PKCS12 keystore into the keychain\"\n-\n-# Generate a 2048-bit RSA keypair and import into the temporary keychain\n-# (its private key is configured with non-default key usage settings)\n-\n-certtool c k=$TEMPORARY_KC <<EOF\n-test\n-r\n-2048\n-y\n-b\n-s\n-y\n-A\n-US\n-A\n-A\n-\n-\n-y\n-EOF\n-\n-# Adjust the keychain search order\n-\n-echo \"\\\"$TEMPORARY_KC\\\"\" > $TEMPORARY_LIST\n-security list-keychains >> $TEMPORARY_LIST\n-security list-keychains -s `xargs < ${TEMPORARY_LIST}`\n-`$CLEANUP_LIST`\n-echo \"Temporary keychain search order:\"\n-security list-keychains\n-\n-# Recount the number of private key entries in the Keychain keystores\n-# (3 private keys imported from PKCS12, 1 private key generated by 'certtool')\n-\n-RECOUNT=`$KEYTOOL -list | grep PrivateKeyEntry | wc -l`\n-echo \"Found $RECOUNT private key entries in the Keychain keystore\"\n-if [ $RECOUNT -lt `expr $COUNT + 4` ]; then\n-    echo \"Error: expected >$COUNT private key entries in the Keychain keystores\"\n-    RESULT=`$CLEANUP_P12`\n-    RESULT=`$CLEANUP_KC`\n-    exit 5\n-fi\n-\n-# Export a private key from the keychain (without supplying a password)\n-# Access controls have already been lowered (see 'security import ... -A' above)\n-\n-${TESTJAVA}\/bin\/javac ${TESTJAVACOPTS} ${TESTTOOLVMOPTS} -d . ${TESTSRC}\/ExportPrivateKeyNoPwd.java || exit 6\n-${TESTJAVA}\/bin\/java ${TESTVMOPTS} ExportPrivateKeyNoPwd x\n-if [ $? -ne 0 ]; then\n-    echo \"Error exporting private key from the temporary keychain\"\n-    RESULT=`$CLEANUP_P12`\n-    RESULT=`$CLEANUP_KC`\n-    exit 6\n-fi\n-echo \"Exported a private key from the temporary keychain\"\n-\n-RESULT=`$CLEANUP_P12`\n-if [ $? -ne 0 ]; then\n-    echo \"Error: cannot remove the temporary PKCS12 keystore\"\n-    exit 7\n-fi\n-echo \"Removed the temporary PKCS12 keystore\"\n-\n-RESULT=`$CLEANUP_KC`\n-if [ $? -ne 0 ]; then\n-    echo \"Error: cannot remove the temporary keychain\"\n-    exit 8\n-fi\n-echo \"Removed the temporary keychain\"\n-\n-exit 0\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/ListKeychainStore.sh","additions":0,"deletions":188,"binary":false,"changes":188,"status":"deleted"}]}