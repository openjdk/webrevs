{"files":[{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4994151\n+  @summary REGRESSION: Bug when setting the foreground of a JWindow\n+  @key headful\n+*\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Color;\n+\n+import javax.swing.JWindow;\n+\n+public class SetForegroundTest {\n+    static JWindow jwindow;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                jwindow = new JWindow();\n+                jwindow.pack();\n+                jwindow.setForeground(Color.BLACK);\n+                System.out.println(\"TEST PASSED\");\n+            });\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (jwindow != null) {\n+                    jwindow.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Panel\/SetForegroundTest.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4791953\n+  @requires (os.family == \"linux\" | os.family == \"mac\")\n+  @summary Checks that popup menu stay open after a triggering click.\n+  @key headful\n+  @run main\/othervm -Dsun.java2d.uiScale=1 PopupMenuStayOpen\n+*\/\n+\n+import java.awt.Component;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.PopupMenu;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.InputEvent;\n+\n+public class PopupMenuStayOpen {\n+    public static final int MAX_COUNT = 100;\n+    public volatile static boolean wasActionFired = false;\n+    static Frame frame;\n+    static PopupMenu pom;\n+    volatile static Point point;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        String nm = Toolkit.getDefaultToolkit().getClass().getName();\n+\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new Frame(\"Click-to-see-Popup\");\n+                pom = new PopupMenu();\n+                frame.setTitle(nm);\n+                frame.setSize(300, 300);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+                pom.add(\"A long enough line\");\n+\n+                pom.getItem(0).addActionListener(new ActionListener() {\n+                    public void actionPerformed(ActionEvent ae) {\n+                        wasActionFired = true;\n+                    }\n+                });\n+\n+                frame.add(pom);\n+                frame.addMouseListener(new MouseAdapter() {\n+                    public void mousePressed(MouseEvent me) {\n+                        pom.show(frame, me.getX(), me.getY());\n+                    }\n+                });\n+            });\n+\n+            Robot robot = new Robot();\n+            robot.delay(1000);\n+            robot.waitForIdle();\n+\n+            EventQueue.invokeAndWait(() -> {\n+                point = frame.getLocationOnScreen();\n+            });\n+\n+            robot.mouseMove(point.x + 50, point.y + 100);\n+            robot.mousePress(InputEvent.BUTTON2_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON2_DOWN_MASK);\n+\n+            robot.delay(1000);\n+            robot.waitForIdle();\n+\n+            robot.mouseMove(point.x + 50 + 30, point.y + 100 + 15);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(500);\n+\n+\n+            if (!wasActionFired) {\n+                throw new RuntimeException(\"Popup not visible or has no focus\");\n+            }\n+            System.out.println(\"Test Pass!!\");\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/PopupMenu\/PopupMenuStayOpen.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4288230\n+  @summary Tests that Robot can move mouse to another screen\n+  @key headful\n+*\/\n+\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseMotionAdapter;\n+\n+public class RobotMoveMultiscreen {\n+    static volatile int x_dest = 20;\n+    static volatile int y_dest = 20;\n+    static Frame frame;\n+    static volatile Boolean testCondition = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        GraphicsDevice[] devs =\n+                GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices();\n+\n+        if (devs.length <= 1) {\n+            System.out.println(\"Minimum 2 display screens are required\" +\n+                    \" for the test, Found \" + devs.length);\n+            return;\n+        }\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                GraphicsDevice workDev = devs[devs.length - 1];\n+                GraphicsConfiguration config = workDev.getDefaultConfiguration();\n+                Rectangle bounds = config.getBounds();\n+                x_dest = bounds.x + bounds.width \/ 2;\n+                y_dest = bounds.y + bounds.height \/ 2;\n+                frame = new Frame(\"Listening frame\");\n+                frame.addMouseMotionListener(new MouseMotionAdapter() {\n+                    public void mouseMoved(MouseEvent e) {\n+                        testCondition = true;\n+                    }\n+                });\n+                frame.setLocation(x_dest,y_dest);\n+                frame.setSize(100,100);\n+                frame.setVisible(true);\n+            });\n+\n+            Robot robot = new Robot();\n+            robot.delay(1000);\n+            robot.waitForIdle();\n+            robot.mouseMove(x_dest+50, y_dest+50);\n+            robot.waitForIdle();\n+            EventQueue.invokeAndWait(() -> {\n+                if (testCondition == false) {\n+                    throw new RuntimeException(\"Can't move to another display\");\n+                }\n+            });\n+\n+            System.out.println(\"Test Pass!!\");\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Robot\/RobotMoveMultiscreen.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4677084\n+  @summary Tests that the PageIncrement (BlockIncrement) and\n+           LineIncrement (UnitIncrement) cannot be < 1\n+  @key headful\n+*\/\n+\n+import java.awt.Scrollbar;\n+\n+public class PageIncrementTest {\n+    static Scrollbar sb;\n+\n+    public static void main(String[] args) {\n+        sb = new Scrollbar();\n+        sb.setBlockIncrement(0);\n+        sb.setUnitIncrement(0);\n+\n+        if (sb.getBlockIncrement() < 1) {\n+            String msg = \"Failed: getBlockIncrement() == \" + sb.getBlockIncrement();\n+            System.out.println(msg);\n+            throw new RuntimeException(msg);\n+        }\n+        if (sb.getUnitIncrement() < 1) {\n+            String msg = \"Failed: getLineIncrement() == \" + sb.getUnitIncrement();\n+            System.out.println(msg);\n+            throw new RuntimeException(msg);\n+        }\n+\n+        sb.setBlockIncrement(-1);\n+        sb.setUnitIncrement(-1);\n+\n+        if (sb.getBlockIncrement() < 1) {\n+            String msg = \"Failed: getBlockIncrement() == \" + sb.getBlockIncrement();\n+            System.out.println(msg);\n+            throw new RuntimeException(msg);\n+        }\n+        if (sb.getUnitIncrement() < 1) {\n+            String msg = \"Failed: getLineIncrement() == \" + sb.getUnitIncrement();\n+            System.out.println(msg);\n+            throw new RuntimeException(msg);\n+        }\n+\n+        sb.setBlockIncrement(2);\n+        sb.setUnitIncrement(2);\n+\n+        if (sb.getBlockIncrement() != 2) {\n+            String msg = \"Failed: getBlockIncrement() == \" + sb.getBlockIncrement();\n+            System.out.println(msg);\n+            throw new RuntimeException(msg);\n+        }\n+        if (sb.getUnitIncrement() != 2) {\n+            String msg = \"Failed: getLineIncrement() == \" + sb.getUnitIncrement();\n+            System.out.println(msg);\n+            throw new RuntimeException(msg);\n+        }\n+        System.out.println(\"Test Pass!!\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Scrollbar\/PageIncrementTest.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,168 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4943277\n+  @requires (os.family == \"linux\")\n+  @summary XAWT: Scrollbar can't be controlled by keyboard\n+  @key headful\n+*\/\n+\n+import java.awt.AWTException;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Robot;\n+import java.awt.Scrollbar;\n+import java.awt.Toolkit;\n+\n+import java.awt.event.AdjustmentListener;\n+import java.awt.event.AdjustmentEvent;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.KeyListener;\n+\n+public class ScrollbarKeyControlTest implements AdjustmentListener, KeyListener {\n+    Scrollbar scrollbarV;\n+    Scrollbar scrollbarH;\n+    volatile int changesTotal = 0;\n+    Robot robot;\n+    Object LOCK = new Object();\n+    Frame frame;\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!System.getProperty(\"os.name\").startsWith(\"Linux\")) {\n+            System.out.println(\"This test is for XAWT only.\");\n+            return;\n+        }\n+        ScrollbarKeyControlTest scrollbarKeyControlTest = new ScrollbarKeyControlTest();\n+        scrollbarKeyControlTest.init();\n+    }\n+\n+    public void init() throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                frame = new Frame(\"Scrollbar Test\");\n+\n+                scrollbarV = new Scrollbar(Scrollbar.VERTICAL, 0, 1, 0, 255);\n+                scrollbarH = new Scrollbar(Scrollbar.HORIZONTAL, 0, 60, 0, 300);\n+\n+                scrollbarH.addAdjustmentListener(this);\n+                scrollbarH.addKeyListener(this);\n+                scrollbarV.addAdjustmentListener(this);\n+                scrollbarV.addKeyListener(this);\n+\n+                frame.add(\"South\", scrollbarH);\n+                frame.add(\"East\", scrollbarV);\n+\n+                frame.setSize(200, 200);\n+                frame.setVisible(true);\n+                frame.validate();\n+                frame.toFront();\n+            });\n+            robot = new Robot();\n+            robot.delay(1000);\n+            robot.waitForIdle();\n+\n+            testOneScrollbar(scrollbarV);\n+            if (changesTotal != 9) { \/\/one by mouse click and six by keys\n+                throw new RuntimeException(\"Test failed.  Not all adjustment \" +\n+                        \"events received by vertical scrollbar (\" + changesTotal + \" of 9)\");\n+            }\n+            changesTotal = 0;\n+            testOneScrollbar(scrollbarH);\n+            if (changesTotal != 9) { \/\/one by mouse click and six by keys\n+                throw new RuntimeException(\"Test failed.  Not all adjustment \" +\n+                        \"events received by horizontal scrollbar (\" + changesTotal + \" of 9)\");\n+            }\n+            System.out.println(\"Test passed. Adjustment Event called  \"\n+                    + changesTotal + \" times for each scrollbar\");\n+\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    public void testOneScrollbar(Scrollbar sb) {\n+        robot.waitForIdle();\n+        robot.mouseMove(sb.getLocationOnScreen().x + sb.getWidth() \/ 2,\n+                sb.getLocationOnScreen().y + sb.getHeight() \/ 2);\n+        try {\n+            synchronized (LOCK) {\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+                LOCK.wait(2000);\n+                robot.keyPress(KeyEvent.VK_DOWN);\n+                robot.keyRelease(KeyEvent.VK_DOWN);\n+                LOCK.wait(2000);\n+                robot.keyPress(KeyEvent.VK_PAGE_DOWN);\n+                robot.keyRelease(KeyEvent.VK_PAGE_DOWN);\n+                LOCK.wait(2000);\n+                robot.keyPress(KeyEvent.VK_UP);\n+                robot.keyRelease(KeyEvent.VK_UP);\n+                LOCK.wait(2000);\n+                robot.keyPress(KeyEvent.VK_PAGE_UP);\n+                robot.keyRelease(KeyEvent.VK_PAGE_UP);\n+                LOCK.wait(2000);\n+                robot.keyPress(KeyEvent.VK_RIGHT);\n+                robot.keyRelease(KeyEvent.VK_RIGHT);\n+                LOCK.wait(2000);\n+                robot.keyPress(KeyEvent.VK_LEFT);\n+                robot.keyRelease(KeyEvent.VK_LEFT);\n+                LOCK.wait(2000);\n+                robot.keyPress(KeyEvent.VK_HOME);\n+                robot.keyRelease(KeyEvent.VK_HOME);\n+                LOCK.wait(2000);\n+                robot.keyPress(KeyEvent.VK_END);\n+                robot.keyRelease(KeyEvent.VK_END);\n+                LOCK.wait(2000);\n+            }\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(\"Test interrupted while keys being pressed.\", e);\n+        }\n+    }\n+\n+    public void adjustmentValueChanged(AdjustmentEvent e) {\n+        changesTotal++;\n+        synchronized (LOCK) {\n+            LOCK.notify();\n+        }\n+        System.out.println(\"Adjustment Event called \");\n+    }\n+\n+    public void keyPressed(KeyEvent e) {\n+        System.out.println(\"KeyPressed called\");\n+    }\n+\n+    public void keyReleased(KeyEvent e) {\n+        System.out.println(\"in keyReleased\");\n+    }\n+\n+    public void keyTyped(KeyEvent e) {\n+        System.out.println(\"in keyTyped\");\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Scrollbar\/ScrollbarKeyControlTest.java","additions":168,"deletions":0,"binary":false,"changes":168,"status":"added"}]}