{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_memset_with_concurrent_readers.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/gtest\/jfr\/test_networkUtilization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,12 +36,0 @@\n-\/\/ gtest\/gtest.h includes assert.h which will define the assert macro, but hotspot has its\n-\/\/ own standards incompatible assert macro that takes two parameters.\n-\/\/ The workaround is to undef assert and then re-define it. The re-definition\n-\/\/ must unfortunately be copied since debug.hpp might already have been\n-\/\/ included and a second include wouldn't work due to the header guards in debug.hpp.\n-#ifdef assert\n-  #undef assert\n-  #ifdef vmassert\n-    #define assert(p, ...) vmassert(p, __VA_ARGS__)\n-  #endif\n-#endif\n-\n","filename":"test\/hotspot\/gtest\/unittest.hpp","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"}]}