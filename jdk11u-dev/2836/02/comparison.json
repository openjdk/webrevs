{"files":[{"patch":"@@ -174,8 +174,8 @@\n-  sprintf(buf, \"0x%02x:0x%x:0x%03x:%d\", _cpu, _variant, _model, _revision);\n-  if (_model2) sprintf(buf+strlen(buf), \"(0x%03x)\", _model2);\n-  if (_features & CPU_ASIMD) strcat(buf, \", simd\");\n-  if (_features & CPU_CRC32) strcat(buf, \", crc\");\n-  if (_features & CPU_AES)   strcat(buf, \", aes\");\n-  if (_features & CPU_SHA1)  strcat(buf, \", sha1\");\n-  if (_features & CPU_SHA2)  strcat(buf, \", sha256\");\n-  if (_features & CPU_LSE)   strcat(buf, \", lse\");\n+  int buf_used_len = os::snprintf_checked(buf, sizeof(buf), \"0x%02x:0x%x:0x%03x:%d\", _cpu, _variant, _model, _revision);\n+  if (_model2) buf_used_len += os::snprintf_checked(buf + buf_used_len, sizeof(buf) - buf_used_len, \"(0x%03x)\", _model2);\n+  if (_features & CPU_ASIMD) buf_used_len += os::snprintf_checked(buf + buf_used_len, sizeof(buf) - buf_used_len, \", simd\");\n+  if (_features & CPU_CRC32) buf_used_len += os::snprintf_checked(buf + buf_used_len, sizeof(buf) - buf_used_len, \", crc\");\n+  if (_features & CPU_AES) buf_used_len += os::snprintf_checked(buf + buf_used_len, sizeof(buf) - buf_used_len, \", aes\");\n+  if (_features & CPU_SHA1) buf_used_len += os::snprintf_checked(buf + buf_used_len, sizeof(buf) - buf_used_len, \", sha1\");\n+  if (_features & CPU_SHA2) buf_used_len += os::snprintf_checked(buf + buf_used_len, sizeof(buf) - buf_used_len, \", sha256\");\n+  if (_features & CPU_LSE) buf_used_len += os::snprintf_checked(buf + buf_used_len, sizeof(buf) - buf_used_len, \", lse\");\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -251,1 +251,1 @@\n-  sprintf(ver_str, \"%d\", ATTACH_PROTOCOL_VER);\n+  size_t ver_str_len = os::snprintf_checked(ver_str, sizeof(ver_str), \"%d\", ATTACH_PROTOCOL_VER);\n@@ -291,1 +291,1 @@\n-          if ((strlen(buf) != strlen(ver_str)) ||\n+          if ((strlen(buf) != ver_str_len) ||\n@@ -294,2 +294,2 @@\n-            sprintf(msg, \"%d\\n\", ATTACH_ERROR_BADVERSION);\n-            write_fully(s, msg, strlen(msg));\n+            int msg_len = os::snprintf_checked(msg, sizeof(msg), \"%d\\n\", ATTACH_ERROR_BADVERSION);\n+            write_fully(s, msg, msg_len);\n@@ -418,2 +418,2 @@\n-  sprintf(msg, \"%d\\n\", result);\n-  int rc = BsdAttachListener::write_fully(this->socket(), msg, strlen(msg));\n+  int msg_len = os::snprintf_checked(msg, sizeof(msg), \"%d\\n\", result);\n+  int rc = BsdAttachListener::write_fully(this->socket(), msg, msg_len);\n","filename":"src\/hotspot\/os\/bsd\/attachListener_bsd.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -371,1 +371,1 @@\n-  \/\/ Buffer that fits several sprintfs.\n+  \/\/ Buffer that fits several snprintfs.\n@@ -425,5 +425,4 @@\n-    char *ld_library_path = (char *)NEW_C_HEAP_ARRAY(char,\n-                                                     strlen(v) + 1 +\n-                                                     sizeof(SYS_EXT_DIR) + sizeof(\"\/lib\/\") + strlen(cpu_arch) + sizeof(DEFAULT_LIBPATH) + 1,\n-                                                     mtInternal);\n-    sprintf(ld_library_path, \"%s%s\" SYS_EXT_DIR \"\/lib\/%s:\" DEFAULT_LIBPATH, v, v_colon, cpu_arch);\n+    const size_t ld_library_path_size = strlen(v) + 1 + sizeof(SYS_EXT_DIR) +\n+            sizeof(\"\/lib\/\") + strlen(cpu_arch) + sizeof(DEFAULT_LIBPATH) + 1;\n+    char *ld_library_path = NEW_C_HEAP_ARRAY(char, ld_library_path_size, mtInternal);\n+    os::snprintf_checked(ld_library_path, ld_library_path_size, \"%s%s\" SYS_EXT_DIR \"\/lib\/%s:\" DEFAULT_LIBPATH, v, v_colon, cpu_arch);\n@@ -435,1 +434,1 @@\n-  sprintf(buf, \"%s\" EXTENSIONS_DIR \":\" SYS_EXT_DIR EXTENSIONS_DIR, Arguments::get_java_home());\n+  os::snprintf_checked(buf, bufsize, \"%s\" EXTENSIONS_DIR \":\" SYS_EXT_DIR EXTENSIONS_DIR, Arguments::get_java_home());\n@@ -450,1 +449,1 @@\n-  \/\/ Buffer that fits several sprintfs.\n+  \/\/ Buffer that fits several snprintfs.\n@@ -520,5 +519,3 @@\n-    char *ld_library_path = (char *)NEW_C_HEAP_ARRAY(char,\n-                                                     strlen(v) + 1 + strlen(l) + 1 +\n-                                                     system_ext_size + 3,\n-                                                     mtInternal);\n-    sprintf(ld_library_path, \"%s%s%s%s%s\" SYS_EXTENSIONS_DIR \":\" SYS_EXTENSIONS_DIRS \":.\",\n+    const size_t ld_library_path_size = strlen(v) + 1 + strlen(l) + 1 + system_ext_size + 3;\n+    char *ld_library_path = NEW_C_HEAP_ARRAY(char, ld_library_path_size, mtInternal);\n+    os::snprintf_checked(ld_library_path, ld_library_path_size, \"%s%s%s%s%s\" SYS_EXTENSIONS_DIR \":\" SYS_EXTENSIONS_DIRS \":.\",\n@@ -535,1 +532,1 @@\n-  sprintf(buf, \"%s\" SYS_EXTENSIONS_DIR \":%s\" EXTENSIONS_DIR \":\" SYS_EXTENSIONS_DIRS,\n+  os::snprintf_checked(buf, bufsize, \"%s\" SYS_EXTENSIONS_DIR \":%s\" EXTENSIONS_DIR \":\" SYS_EXTENSIONS_DIRS,\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -111,1 +111,5 @@\n-#endif \/\/ SHARE_VM_ADLC_ADLC_HPP\n+\/\/ Performs snprintf and asserts the result is non-negative (so there was not\n+\/\/ an encoding error) and that the output was not truncated.\n+extern int snprintf_checked(char* buf, size_t len, const char* fmt, ...);\n+\n+#endif \/\/ SHARE_ADLC_ADLC_HPP\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/adlc\/adlc.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -213,2 +213,3 @@\n-          char* buf = (char*) malloc(strlen(instr->_ident) + 4);\n-          sprintf(buf, \"%s_%d\", instr->_ident, match_rules_cnt++);\n+          const size_t buf_size = strlen(instr->_ident) + 4;\n+          char* buf = (char*) malloc(buf_size);\n+          snprintf_checked(buf, buf_size, \"%s_%d\", instr->_ident, match_rules_cnt++);\n@@ -2861,2 +2862,3 @@\n-  char* ec_name = (char*) malloc(strlen(inst._ident) + strlen(prefix) + 1);\n-  sprintf(ec_name, \"%s%s\", prefix, inst._ident);\n+  const size_t ec_name_size = strlen(inst._ident) + strlen(prefix) + 1;\n+  char* ec_name = (char*) malloc(ec_name_size);\n+  snprintf_checked(ec_name, ec_name_size, \"%s%s\", prefix, inst._ident);\n@@ -3332,2 +3334,3 @@\n-  char* ec_name = (char*) malloc(strlen(inst._ident) + strlen(prefix) + 1);\n-  sprintf(ec_name, \"%s%s\", prefix, inst._ident);\n+  const size_t ec_name_size = strlen(inst._ident) + strlen(prefix) + 1;\n+  char* ec_name = (char*) malloc(ec_name_size);\n+  snprintf_checked(ec_name, ec_name_size, \"%s%s\", prefix, inst._ident);\n@@ -4652,2 +4655,3 @@\n-      char* buf = (char*) malloc(strlen(param) + 3);\n-      sprintf(buf, \"(%s)\", param);\n+      const size_t buf_size = strlen(param) + 3;\n+      char* buf = (char*) malloc(buf_size);\n+      snprintf_checked(buf, buf_size, \"(%s)\", param);\n@@ -5260,2 +5264,3 @@\n-  char* location = (char *)malloc(strlen(file) + 100);\n-  sprintf(location, \"\\n#line %d \\\"%s\\\"\\n\", line, file);\n+  const size_t location_size = strlen(file) + 100;\n+  char* location = (char *) malloc(location_size);\n+  snprintf_checked(location, location_size, \"\\n#line %d \\\"%s\\\"\\n\", line, file);\n","filename":"src\/hotspot\/share\/adlc\/adlparse.cpp","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -813,1 +813,1 @@\n-    sprintf(regMask,\"%s%s()\", rc_name, mask);\n+    snprintf_checked(regMask, length, \"%s%s()\", rc_name, mask);\n@@ -906,1 +906,1 @@\n-  sprintf(result,\"%s%s\", stack_or, reg_mask_name);\n+  snprintf_checked(result, length, \"%s%s\", stack_or, reg_mask_name);\n","filename":"src\/hotspot\/share\/adlc\/archDesc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n-    sprintf(Expr::buffer(), \"_kids[0]->_cost[%s]\", lchild_to_upper);\n+    snprintf_checked(Expr::buffer(), STRING_BUFFER_LENGTH, \"_kids[0]->_cost[%s]\", lchild_to_upper);\n@@ -224,1 +224,1 @@\n-    sprintf(Expr::buffer(), \"_kids[1]->_cost[%s]\", rchild_to_upper);\n+    snprintf_checked(Expr::buffer(), STRING_BUFFER_LENGTH, \"_kids[1]->_cost[%s]\", rchild_to_upper);\n@@ -754,1 +754,1 @@\n-    sprintf( string_buffer, \"0\");\n+    snprintf_checked(string_buffer, STRING_BUFFER_LENGTH, \"0\");\n","filename":"src\/hotspot\/share\/adlc\/dfa.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+#define remaining_buflen(buffer, position) (sizeof(buffer) - ((position) - (buffer)))\n+\n@@ -1540,1 +1542,1 @@\n-      sprintf(s,\"\/*%s*\/(\",(char*)i._key);\n+      snprintf_checked(s, remaining_buflen(buf, s), \"\/*%s*\/(\",(char*)i._key);\n@@ -3480,1 +3482,1 @@\n-  sprintf(subtree,\"_%s_%s_%s\", _opType, lstr, rstr);\n+  snprintf_checked(subtree, len, \"_%s_%s_%s\", _opType, lstr, rstr);\n@@ -3897,2 +3899,3 @@\n-  char* buf = (char*) malloc(strlen(instr_ident) + 4);\n-  sprintf(buf, \"%s_%d\", instr_ident, match_rules_cnt++);\n+  const size_t buf_size = strlen(instr_ident) + 4;\n+  char* buf = (char*) malloc(buf_size);\n+  snprintf_checked(buf, buf_size, \"%s_%d\", instr_ident, match_rules_cnt++);\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -460,1 +460,1 @@\n-  sprintf(fname,\"%s%s\",base,suffix);\n+  snprintf_checked(fname,len,\"%s%s\",base,suffix);\n","filename":"src\/hotspot\/share\/adlc\/main.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+#define remaining_buflen(buffer, position) (sizeof(buffer) - (position - buffer))\n+\n@@ -38,0 +40,10 @@\n+int snprintf_checked(char* buf, size_t len, const char* fmt, ...) {\n+  va_list args;\n+  va_start(args, fmt);\n+  int result = vsnprintf(buf, len, fmt, args);\n+  va_end(args);\n+  assert(result >= 0, \"snprintf error\");\n+  assert(static_cast<size_t>(result) < len, \"snprintf truncated\");\n+  return result;\n+}\n+\n@@ -200,1 +212,2 @@\n-  char *operand_stages = new char [templen];\n+  const size_t operand_stages_size = templen;\n+  char *operand_stages = new char [operand_stages_size];\n@@ -214,1 +227,1 @@\n-    templen += sprintf(&operand_stages[templen], \"  stage_%s%c\\n\",\n+    templen += snprintf_checked(&operand_stages[templen], operand_stages_size - templen, \"  stage_%s%c\\n\",\n@@ -281,0 +294,1 @@\n+  const size_t resource_stages_size = templen;\n@@ -288,1 +302,1 @@\n-    templen += sprintf(&resource_stages[templen], \"  stage_%s%-*s \/\/ %s\\n\",\n+    templen += snprintf_checked(&resource_stages[templen], resource_stages_size - templen, \"  stage_%s%-*s \/\/ %s\\n\",\n@@ -347,1 +361,1 @@\n-    templen = sprintf(temp, \"%d\", res_cycles[i]);\n+    templen = snprintf_checked(temp, sizeof(temp), \"%d\", res_cycles[i]);\n@@ -356,1 +370,2 @@\n-  char * resource_cycles = new char [templen];\n+  const size_t resource_cycles_size = templen;\n+  char * resource_cycles = new char [resource_cycles_size];\n@@ -361,1 +376,1 @@\n-    templen += sprintf(&resource_cycles[templen], \"  %*d%c \/\/ %s\\n\",\n+    templen += snprintf_checked(&resource_cycles[templen], resource_cycles_size - templen, \"  %*d%c \/\/ %s\\n\",\n@@ -434,1 +449,2 @@\n-  char * resource_mask = new char [templen];\n+  const size_t resource_mask_size = templen;\n+  char * resource_mask = new char [resource_mask_size];\n@@ -459,1 +475,1 @@\n-      sprintf(&resource_mask[templen], \"  %s(0x%0*x, %*d, %*d, %s %s(\",\n+      snprintf_checked(&resource_mask[templen], resource_mask_size - templen, \"  %s(0x%0*x, %*d, %*d, %s %s(\",\n@@ -499,1 +515,1 @@\n-        sprintf(&resource_mask[templen], \"0x%08x%s\", res_mask[j], j > 0 ? \", \" : \"\");\n+        snprintf_checked(&resource_mask[templen], resource_mask_size - templen, \"0x%08x%s\", res_mask[j], j > 0 ? \", \" : \"\");\n@@ -527,1 +543,2 @@\n-    char* args = new char [9 + 2*masklen + maskdigit];\n+    int args_len = 9 + 2*masklen + maskdigit;\n+    char* args = new char [args_len];\n@@ -529,1 +546,1 @@\n-    sprintf(args, \"0x%0*x, 0x%0*x, %*d\",\n+    snprintf_checked(args, args_len, \"0x%0*x, 0x%0*x, %*d\",\n@@ -1075,1 +1092,1 @@\n-        sprintf(inst_prefix, \"inst%d_\",   inst_position);\n+        snprintf_checked(inst_prefix, sizeof(inst_prefix), \"inst%d_\",   inst_position);\n@@ -1077,1 +1094,1 @@\n-        sprintf(receiver,    \"inst%d->\", inst_position);\n+        snprintf_checked(receiver, sizeof(receiver), \"inst%d->\", inst_position);\n@@ -1173,1 +1190,1 @@\n-          sprintf(left_reg_index,\",inst%d_idx%d\", (int)left_index, left_op_index);\n+          snprintf_checked(left_reg_index, sizeof(left_reg_index), \",inst%u_idx%u\", (unsigned)left_index, (unsigned)left_op_index);\n@@ -1186,1 +1203,1 @@\n-            sprintf(right_reg_index,\",inst%d_idx%d\", (int)right_index, right_op_index);\n+            snprintf_checked(right_reg_index, sizeof(right_reg_index), \",inst%u_idx%u\", (unsigned)right_index, (unsigned)right_op_index);\n@@ -2527,1 +2544,1 @@\n-      ib += sprintf(ib, \"  unsigned idx_%-5s = mach_constant_base_node_input(); \\t\/\/ %s, \\t%s\\n\",\n+      ib += snprintf_checked(ib, remaining_buflen(idxbuf, ib), \"  unsigned idx_%-5s = mach_constant_base_node_input(); \\t\/\/ %s, \\t%s\\n\",\n@@ -2529,1 +2546,1 @@\n-      nb += sprintf(nb, \"  Node    *n_%-7s = lookup(idx_%s);\\n\", name, name);\n+      nb += snprintf_checked(nb, remaining_buflen(nbuf, nb), \"  Node    *n_%-7s = lookup(idx_%s);\\n\", name, name);\n@@ -2536,1 +2553,1 @@\n-      ib += sprintf(ib, \"  unsigned idx_%-5s = idx%d; \\t\/\/ %s, \\t%s\\n\",\n+      ib += snprintf_checked(ib, remaining_buflen(idxbuf, ib), \"  unsigned idx_%-5s = idx%d; \\t\/\/ %s, \\t%s\\n\",\n@@ -2538,2 +2555,2 @@\n-      nb += sprintf(nb, \"  Node    *n_%-7s = lookup(idx_%s);\\n\", name, name);\n-      ob += sprintf(ob, \"  %sOper *op_%s = (%sOper *)opnd_array(%d);\\n\", type, name, type, idx);\n+      nb += snprintf_checked(nb, remaining_buflen(nbuf, nb), \"  Node    *n_%-7s = lookup(idx_%s);\\n\", name, name);\n+      ob += snprintf_checked(ob, remaining_buflen(opbuf, ob), \"  %sOper *op_%s = (%sOper *)opnd_array(%d);\\n\", type, name, type, idx);\n","filename":"src\/hotspot\/share\/adlc\/output_c.cpp","additions":37,"deletions":20,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -651,1 +651,1 @@\n-  sprintf(message, \"Index %d out of bounds for length %d\", index, a->length());\n+  os::snprintf_checked(message, sizeof(message), \"Index %d out of bounds for length %d\", index, a->length());\n@@ -659,1 +659,1 @@\n-  sprintf(message, \"%d\", index);\n+  os::snprintf_checked(message, sizeof(message), \"%d\", index);\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2197,1 +2197,2 @@\n-  char* buf = NEW_RESOURCE_ARRAY(char, buf_len + 64);\n+  const size_t buf_size = buf_len + 64;\n+  char* buf = NEW_RESOURCE_ARRAY(char, buf_size);\n@@ -2200,1 +2201,1 @@\n-  sprintf(buf, \"\\tat %s.%s(\", klass_name, method_name);\n+  size_t buf_off = os::snprintf_checked(buf, buf_size, \"\\tat %s.%s(\", klass_name, method_name);\n@@ -2205,1 +2206,1 @@\n-      sprintf(buf + (int)strlen(buf), \"%s@%s\/\", module_name, module_version);\n+      buf_off += os::snprintf_checked(buf + buf_off, buf_size - buf_off, \"%s@%s\/\", module_name, module_version);\n@@ -2207,1 +2208,1 @@\n-      sprintf(buf + (int)strlen(buf), \"%s\/\", module_name);\n+      buf_off += os::snprintf_checked(buf + buf_off, buf_size - buf_off, \"%s\/\", module_name);\n@@ -2222,1 +2223,1 @@\n-        sprintf(buf + (int)strlen(buf), \"%s:%d)\", source_file_name, line_number);\n+        buf_off += os::snprintf_checked(buf + buf_off, buf_size - buf_off, \"%s:%d)\", source_file_name, line_number);\n@@ -2225,1 +2226,1 @@\n-        sprintf(buf + (int)strlen(buf), \"%s)\", source_file_name);\n+        buf_off += os::snprintf_checked(buf + buf_off, buf_size - buf_off, \"%s)\", source_file_name);\n@@ -2228,1 +2229,1 @@\n-        sprintf(buf + (int)strlen(buf), \"Unknown Source)\");\n+        buf_off += os::snprintf_checked(buf + buf_off, buf_size - buf_off, \"Unknown Source)\");\n@@ -2232,1 +2233,1 @@\n-        sprintf(buf + (int)strlen(buf), \"(nmethod \" INTPTR_FORMAT \")\", (intptr_t)nm);\n+        os::snprintf_checked(buf + buf_off, buf_size - buf_off, \"(nmethod \" INTPTR_FORMAT \")\", (intptr_t)nm);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -795,1 +795,2 @@\n-      char xn[12]; sprintf(xn, \"x%d\", j);\n+      char xn[12];\n+      os::snprintf_checked(xn, sizeof(xn), \"x%d\", j);\n","filename":"src\/hotspot\/share\/code\/dependencies.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -879,1 +879,1 @@\n-    sprintf(name_buffer, \"%s CompilerThread%d\", _compilers[1]->name(), i);\n+    os::snprintf_checked(name_buffer, sizeof(name_buffer), \"%s CompilerThread%d\", _compilers[1]->name(), i);\n@@ -900,1 +900,1 @@\n-    sprintf(name_buffer, \"C1 CompilerThread%d\", i);\n+    os::snprintf_checked(name_buffer, sizeof(name_buffer), \"C1 CompilerThread%d\", i);\n@@ -959,1 +959,1 @@\n-        sprintf(name_buffer, \"%s CompilerThread%d\", _compilers[1]->name(), i);\n+        os::snprintf_checked(name_buffer, sizeof(name_buffer), \"%s CompilerThread%d\", _compilers[1]->name(), i);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -317,0 +317,1 @@\n+    const size_t name_buf_size = strlen(vmField.typeName) + strlen(vmField.fieldName) + 2 + 1 \/* \"::\" *\/;\n@@ -318,2 +319,2 @@\n-    char* name_buf = NEW_RESOURCE_ARRAY_IN_THREAD(THREAD, char, name_buf_len + 1);\n-    sprintf(name_buf, \"%s::%s\", vmField.typeName, vmField.fieldName);\n+    char* name_buf = NEW_RESOURCE_ARRAY_IN_THREAD(THREAD, char, name_buf_size);\n+    os::snprintf_checked(name_buf, name_buf_size, \"%s::%s\", vmField.typeName, vmField.fieldName);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -177,1 +177,1 @@\n-      sprintf(buf, \"<null>\");\n+      os::snprintf_checked(buf, sizeof(buf), \"<null>\");\n","filename":"src\/hotspot\/share\/prims\/wbtestmethods\/parserTests.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2256,1 +2256,1 @@\n-  sprintf(buf, \"reason%d\", reason);\n+  os::snprintf_checked(buf, sizeof(buf), \"reason%d\", reason);\n@@ -2266,1 +2266,1 @@\n-  sprintf(buf, \"action%d\", action);\n+  os::snprintf_checked(buf, sizeof(buf), \"action%d\", action);\n@@ -2370,1 +2370,1 @@\n-            sprintf(name, \"%s\/%s\/%s\",\n+            os::snprintf_checked(name, sizeof(name), \"%s\/%s\/%s\",\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -105,0 +105,10 @@\n+int os::snprintf_checked(char* buf, size_t len, const char* fmt, ...) {\n+  va_list args;\n+  va_start(args, fmt);\n+  int result = os::vsnprintf(buf, len, fmt, args);\n+  va_end(args);\n+  assert(result >= 0, \"os::snprintf error\");\n+  assert(static_cast<size_t>(result) < len, \"os::snprintf truncated\");\n+  return result;\n+}\n+\n@@ -1314,1 +1324,1 @@\n-  sprintf(modified_mode, \"%s\" LINUX_ONLY(\"e\") BSD_ONLY(\"e\") WINDOWS_ONLY(\"N\"), mode);\n+  os::snprintf_checked(modified_mode, sizeof(modified_mode), \"%s\" LINUX_ONLY(\"e\") BSD_ONLY(\"e\") WINDOWS_ONLY(\"N\"), mode);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -691,0 +691,4 @@\n+  \/\/ Performs snprintf and asserts the result is non-negative (so there was not\n+  \/\/ an encoding error) and that the output was not truncated.\n+  static int snprintf_checked(char* buf, size_t len, const char* fmt, ...) ATTRIBUTE_PRINTF(3, 4);\n+\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,2 +88,3 @@\n-  _name = NEW_C_HEAP_ARRAY(char, strlen(name) + strlen(prefix) + 2, mtInternal);\n-  assert(_name != NULL && strlen(name) != 0, \"invalid name\");\n+  const size_t _name_size = strlen(name) + strlen(prefix) + 2;\n+  _name = NEW_C_HEAP_ARRAY(char, _name_size, mtInternal);\n+  assert(strlen(name) != 0, \"invalid name\");\n@@ -104,1 +105,1 @@\n-    sprintf(_name, \"%s.%s\", prefix, name);\n+    os::snprintf_checked(_name, _name_size, \"%s.%s\", prefix, name);\n@@ -369,1 +370,1 @@\n-   sprintf(result, \"%s.%s\", ns, name);\n+   os::snprintf_checked(result, len, \"%s.%s\", ns, name);\n","filename":"src\/hotspot\/share\/runtime\/perfData.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -422,1 +422,1 @@\n-  sprintf(buffer, \"printnm: \" INTPTR_FORMAT, p);\n+  os::snprintf_checked(buffer, sizeof(buffer), \"printnm: \" INTPTR_FORMAT, p);\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -223,1 +224,1 @@\n-      sprintf(p, \"\\\\u%04x\", c);\n+      os::snprintf_checked(p, 7, \"\\\\u%04x\", c);  \/\/ counting terminating zero in\n@@ -524,1 +525,1 @@\n-      sprintf(p, \"\\\\u%04x\", c);\n+      os::snprintf_checked(p, 7, \"\\\\u%04x\", c);\n","filename":"src\/hotspot\/share\/utilities\/utf8.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -638,1 +638,1 @@\n-                    sprintf(channelName, \"Ch %d\", ch);\n+                    snprintf(channelName, 16, \"Ch %d\", ch);\n","filename":"src\/java.desktop\/macosx\/native\/libjsound\/PLATFORM_API_MacOSX_Ports.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}