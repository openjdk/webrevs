{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,8 +26,0 @@\n-\/*\n- *\/\n-\n-#include \"jni.h\"\n-#include \"jni_util.h\"\n-#include \"jvm.h\"\n-#include \"jlong.h\"\n-#include \"sun_nio_ch_DatagramDispatcher.h\"\n@@ -38,0 +30,1 @@\n+#include <limits.h>\n@@ -39,0 +32,5 @@\n+#include \"jni.h\"\n+#include \"jni_util.h\"\n+#include \"jvm.h\"\n+#include \"jlong.h\"\n+#include \"nio.h\"\n@@ -40,1 +38,1 @@\n-#include <limits.h>\n+#include \"sun_nio_ch_DatagramDispatcher.h\"\n@@ -44,1 +42,1 @@\n-                         jobject fdo, jlong address, jint len)\n+                                         jobject fdo, jlong address, jint len)\n@@ -51,1 +49,1 @@\n-        return -2;\n+        return IOS_THROWN;\n@@ -59,1 +57,1 @@\n-                              jobject fdo, jlong address, jint len)\n+                                          jobject fdo, jlong address, jint len)\n@@ -77,1 +75,1 @@\n-        return -2;\n+        return IOS_THROWN;\n@@ -84,1 +82,1 @@\n-                              jobject fdo, jlong address, jint len)\n+                                          jobject fdo, jlong address, jint len)\n@@ -91,1 +89,1 @@\n-        return -2;\n+        return IOS_THROWN;\n@@ -98,1 +96,1 @@\n-                                       jobject fdo, jlong address, jint len)\n+                                           jobject fdo, jlong address, jint len)\n@@ -116,1 +114,1 @@\n-        return -2;\n+        return IOS_THROWN;\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/DatagramDispatcher.c","additions":16,"deletions":18,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,0 @@\n-\/*\n- *\/\n-\n@@ -32,0 +29,1 @@\n+\n@@ -36,2 +34,0 @@\n-#include \"sun_nio_ch_DatagramDispatcher.h\"\n-\n@@ -41,0 +37,2 @@\n+#include \"sun_nio_ch_DatagramDispatcher.h\"\n+\n@@ -48,1 +46,1 @@\n-                                      jlong address, jint len)\n+                                         jlong address, jint len)\n@@ -72,6 +70,10 @@\n-        if (theErr == WSAEWOULDBLOCK) {\n-            return IOS_UNAVAILABLE;\n-        }\n-        if (theErr == WSAECONNRESET) {\n-            purgeOutstandingICMP(env, clazz, fd);\n-            JNU_ThrowByName(env, JNU_JAVANETPKG \"PortUnreachableException\", 0);\n+        if (theErr != WSAEMSGSIZE) {\n+            if (theErr == WSAEWOULDBLOCK) {\n+                return IOS_UNAVAILABLE;\n+            }\n+            if (theErr == WSAECONNRESET) {\n+                purgeOutstandingICMP(env, clazz, fd);\n+                JNU_ThrowByName(env, JNU_JAVANETPKG \"PortUnreachableException\", 0);\n+                return IOS_THROWN;\n+            }\n+            JNU_ThrowIOExceptionWithLastError(env, \"WSARecv failed\");\n@@ -80,2 +82,0 @@\n-        JNU_ThrowIOExceptionWithLastError(env, \"Write failed\");\n-        return IOS_THROWN;\n@@ -107,1 +107,1 @@\n-    }\n+     }\n@@ -123,6 +123,10 @@\n-        if (theErr == WSAEWOULDBLOCK) {\n-            return IOS_UNAVAILABLE;\n-        }\n-        if (theErr == WSAECONNRESET) {\n-            purgeOutstandingICMP(env, clazz, fd);\n-            JNU_ThrowByName(env, JNU_JAVANETPKG \"PortUnreachableException\", 0);\n+        if (theErr != WSAEMSGSIZE) {\n+            if (theErr == WSAEWOULDBLOCK) {\n+                return IOS_UNAVAILABLE;\n+            }\n+            if (theErr == WSAECONNRESET) {\n+                purgeOutstandingICMP(env, clazz, fd);\n+                JNU_ThrowByName(env, JNU_JAVANETPKG \"PortUnreachableException\", 0);\n+                return IOS_THROWN;\n+            }\n+            JNU_ThrowIOExceptionWithLastError(env, \"WSARecv failed\");\n@@ -131,2 +135,0 @@\n-        JNU_ThrowIOExceptionWithLastError(env, \"Write failed\");\n-        return IOS_THROWN;\n@@ -172,1 +174,1 @@\n-        JNU_ThrowIOExceptionWithLastError(env, \"Write failed\");\n+        JNU_ThrowIOExceptionWithLastError(env, \"WSASend failed\");\n@@ -181,1 +183,1 @@\n-                                         jobject fdo, jlong address, jint len)\n+                                           jobject fdo, jlong address, jint len)\n@@ -222,1 +224,1 @@\n-        JNU_ThrowIOExceptionWithLastError(env, \"Write failed\");\n+        JNU_ThrowIOExceptionWithLastError(env, \"WSASend failed\");\n","filename":"src\/java.base\/windows\/native\/libnio\/ch\/DatagramDispatcher.c","additions":29,"deletions":27,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8053479\n+ * @run main Truncate\n+ * @summary Test DatagramChannel receive\/read where there are fewer bytes remaining\n+ *     in the buffer than are required to hold the datagram. The remainder of the\n+ *     datagram should be silently discarded.\n+ *\/\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.DatagramChannel;\n+import java.util.Arrays;\n+import java.util.stream.IntStream;\n+\n+public class Truncate {\n+    static final int LARGE_SIZE = 1000;\n+    static final int SMALL_SIZE = 100;\n+\n+    public static void main(String[] args) throws Exception {\n+        try (DatagramChannel dc = DatagramChannel.open()) {\n+            dc.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));\n+\n+            \/\/ not connected\n+            testReceiveDiscards(dc);\n+\n+            \/\/ connected\n+            dc.connect(dc.getLocalAddress());\n+            testReceiveDiscards(dc);\n+            testReadDiscards(dc);\n+            testScatteringReadDiscards(dc);\n+        }\n+    }\n+\n+    \/**\n+     * Receive a datagram with a buffer that has fewer bytes remaining than are\n+     * required to hold the datagram.\n+     *\/\n+    static void testReceiveDiscards(DatagramChannel dc) throws IOException {\n+        ByteBuffer largeBuffer = send(dc, LARGE_SIZE, dc.getLocalAddress());\n+\n+        ByteBuffer smallBuffer = ByteBuffer.allocate(SMALL_SIZE);\n+        SocketAddress sender = dc.receive(smallBuffer);\n+        assertTrue(sender.equals(dc.getLocalAddress()));\n+\n+        \/\/ check buffer\/contents\n+        smallBuffer.flip();\n+        assertTrue(smallBuffer.remaining() == SMALL_SIZE);\n+        assertTrue(Arrays.equals(smallBuffer.array(), 0, SMALL_SIZE,\n+                largeBuffer.array(), 0, SMALL_SIZE));\n+    }\n+\n+    \/**\n+     * Read a datagram with a buffer that has fewer bytes remaining than are\n+     * required to hold the datagram.\n+     *\/\n+    static void testReadDiscards(DatagramChannel dc) throws IOException {\n+        ByteBuffer largeBuffer = send(dc, LARGE_SIZE, dc.getRemoteAddress());\n+\n+        ByteBuffer smallBuffer = ByteBuffer.allocate(SMALL_SIZE);\n+        int n = dc.read(smallBuffer);\n+        assertTrue(n == SMALL_SIZE);\n+\n+        \/\/ check buffer\/contents\n+        smallBuffer.flip();\n+        assertTrue(smallBuffer.remaining() == SMALL_SIZE);\n+        assertTrue(Arrays.equals(smallBuffer.array(), 0, SMALL_SIZE,\n+                largeBuffer.array(), 0, SMALL_SIZE));\n+    }\n+\n+    \/**\n+     * Read a datagram with an array of buffers that have fewer bytes remaining\n+     * than are required to hold the datagram.\n+     *\/\n+    static void testScatteringReadDiscards(DatagramChannel dc) throws IOException {\n+        ByteBuffer largeBuffer = send(dc, LARGE_SIZE, dc.getRemoteAddress());\n+\n+        ByteBuffer smallBuffer1 = ByteBuffer.allocate(SMALL_SIZE);\n+        ByteBuffer smallBuffer2 = ByteBuffer.allocate(SMALL_SIZE);\n+        ByteBuffer[] bufs = new ByteBuffer[] { smallBuffer1, smallBuffer2 };\n+        long n = dc.read(bufs);\n+        assertTrue(n == (SMALL_SIZE * bufs.length));\n+\n+        \/\/ check buffer\/contents\n+        smallBuffer1.flip();\n+        assertTrue(smallBuffer1.remaining() == SMALL_SIZE);\n+        assertTrue(Arrays.equals(smallBuffer1.array(), 0, SMALL_SIZE,\n+                largeBuffer.array(), 0, SMALL_SIZE));\n+        smallBuffer2.flip();\n+        assertTrue(smallBuffer2.remaining() == SMALL_SIZE);\n+        assertTrue(Arrays.equals(smallBuffer2.array(), 0, SMALL_SIZE,\n+                largeBuffer.array(), SMALL_SIZE, SMALL_SIZE << 1));\n+    }\n+\n+    \/**\n+     * Send a datagram of the given size to the given target address.\n+     * @return the buffer with the datagram sent to the target address\n+     *\/\n+    static ByteBuffer send(DatagramChannel dc, int size, SocketAddress target)\n+        throws IOException\n+    {\n+        ByteBuffer buffer = ByteBuffer.allocate(size);\n+        IntStream.range(0, size).forEach(i -> buffer.put((byte)i));\n+        buffer.flip();\n+\n+        int n = dc.send(buffer, target);\n+        assertTrue(n == size);\n+        buffer.flip();\n+        return buffer;\n+    }\n+\n+    static void assertTrue(boolean e) {\n+        if (!e) throw new RuntimeException();\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/Truncate.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"}]}