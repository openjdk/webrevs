{"files":[{"patch":"@@ -286,0 +286,3 @@\n+                if (!ok) {\n+                    return false;\n+                }\n@@ -360,0 +363,3 @@\n+                if (!ok) {\n+                    return false;\n+                }\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Main.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8165944\n+ * @bug 8165944 8318971\n@@ -156,0 +156,78 @@\n+    \/**\n+     * Containing non-existent file in the file list\n+     * The final jar should not be created and correct error message should be caught.\n+     * IOException is triggered as expected.\n+     *\/\n+    @Test\n+    public void testNonExistentFileInput() throws IOException {\n+        touch(\"existingTestFile.txt\");\n+        onCompletion = () -> rm(\"existingTestFile.txt\");\n+        try {\n+            jar(\"cf test.jar existingTestFile.txt nonExistentTestFile.txt\");\n+            Assert.fail(\"jar tool unexpectedly completed successfully\");\n+        } catch (IOException e) {\n+            Assert.assertEquals(e.getMessage().trim(), \"nonExistentTestFile.txt : no such file or directory\");\n+            Assert.assertTrue(Files.notExists(Path.of(\"test.jar\")), \"Jar file should not be created.\");\n+        }\n+    }\n+\n+    \/**\n+     * With @File as a part of jar command line, where the File is containing one or more\n+     * non-existent files or directories\n+     * The final jar should not be created and correct error message should be caught.\n+     * IOException is triggered as expected.\n+     *\/\n+    @Test\n+    public void testNonExistentFileInputClassList() throws IOException {\n+        touch(\"existingTestFile.txt\");\n+        touch(\"classes.list\");\n+        Files.writeString(Path.of(\"classes.list\"),\n+                \"existingTestFile.txt\\n\" +\n+                \"nonExistentTestFile.txt\\n\" +\n+                \"nonExistentDirectory\\n\"\n+                );\n+        onCompletion = () -> rm(\"existingTestFile.txt classes.list\");\n+        try {\n+            jar(\"cf test.jar @classes.list\");\n+            Assert.fail(\"jar tool unexpectedly completed successfully\");\n+        } catch (IOException e) {\n+            String msg = e.getMessage().trim();\n+            Assert.assertTrue(msg.contains(\"nonExistentTestFile.txt : no such file or directory\"));\n+            Assert.assertTrue(msg.trim().contains(\"nonExistentDirectory : no such file or directory\"));\n+            Assert.assertTrue(Files.notExists(Path.of(\"test.jar\")), \"Jar file should not be created.\");\n+        }\n+\n+    }\n+\n+    \/**\n+     * Create a jar file; then with @File as a part of jar command line, where the File is containing one or more\n+     * non-existent files or directories\n+     * The final jar should not be created and correct error message should be caught.\n+     * IOException is triggered as expected.\n+     *\/\n+    @Test\n+    public void testUpdateNonExistentFileInputClassList() throws IOException {\n+        touch(\"existingTestFileUpdate.txt\");\n+        touch(\"existingTestFileUpdate2.txt\");\n+        touch(\"classesUpdate.list\");\n+        Files.writeString(Path.of(\"classesUpdate.list\"),\n+                \"existingTestFileUpdate2.txt\\n\" +\n+                \"nonExistentTestFileUpdate.txt\\n\" +\n+                \"nonExistentDirectoryUpdate\\n\"\n+                 );\n+        onCompletion = () -> rm(\"existingTestFileUpdate.txt existingTestFileUpdate2.txt \" +\n+                \"classesUpdate.list testUpdate.jar\");\n+        try {\n+            jar(\"cf testUpdate.jar existingTestFileUpdate.txt\");\n+            Assert.assertTrue(Files.exists(Path.of(\"testUpdate.jar\")));\n+            jar(\"uf testUpdate.jar @classesUpdate.list\");\n+            Assert.fail(\"jar tool unexpectedly completed successfully\");\n+        } catch (IOException e) {\n+            String msg = e.getMessage().trim();\n+            Assert.assertFalse(msg.contains(\"existingTestFileUpdate.txt : no such file or directory\"));\n+            Assert.assertTrue(msg.contains(\"nonExistentTestFileUpdate.txt : no such file or directory\"));\n+            Assert.assertTrue(msg.trim().contains(\"nonExistentDirectoryUpdate : no such file or directory\"));\n+        }\n+\n+    }\n+\n","filename":"test\/jdk\/tools\/jar\/InputFilesTest.java","additions":80,"deletions":2,"binary":false,"changes":82,"status":"modified"}]}