{"files":[{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import jdk.jfr.Event;\n+import jdk.jfr.Description;\n+import jdk.jfr.Label;\n+\n+\n+\/\/ This class generates simple event in a loop\n+\/\/ for a specified time.\n+\/\/ Pass the time in seconds as a parameter.\n+public class EventGeneratorLoop {\n+\n+    @Label(\"SimpleEvent\")\n+    @Description(\"Simple custom event\")\n+    static class SimpleEvent extends Event {\n+        @Label(\"Message\")\n+        String msg;\n+\n+        @Label(\"Count\")\n+        int count;\n+    }\n+\n+\n+    public static void main(String[] args) throws Exception {\n+        if ((args.length < 1) || (args[0] == null)) {\n+            throw new IllegalArgumentException(\"Expecting one argument: time to run (seconds)\");\n+        }\n+        int howLong = Integer.parseInt(args[0]);\n+\n+        for (int i=0; i < howLong; i++) {\n+            SimpleEvent ev = new SimpleEvent();\n+            ev.msg = \"Hello\";\n+            ev.count = i;\n+            ev.commit();\n+\n+            try { Thread.sleep(1000); } catch (InterruptedException e) {}\n+            System.out.print(\".\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/EventGeneratorLoop.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,231 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @summary Test JCMD with side car pattern.\n+ *          Sidecar is a common pattern used in the cloud environments for monitoring\n+ *          and other uses. In side car pattern the main application\/service container\n+ *          is paired with a sidecar container by sharing certain aspects of container\n+ *          namespace such as PID namespace, specific sub-directories, IPC and more.\n+ * @requires docker.support\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *          jdk.jartool\/sun.tools.jar\n+ * @build EventGeneratorLoop\n+ * @run driver TestJcmdWithSideCar\n+ *\/\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import jdk.test.lib.Container;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerRunOptions;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+\n+public class TestJcmdWithSideCar {\n+    private static final String IMAGE_NAME = Common.imageName(\"jfr-jcmd\");\n+    private static final int TIME_TO_RUN_MAIN_PROCESS = (int) (30 * Utils.TIMEOUT_FACTOR); \/\/ seconds\n+    private static final String MAIN_CONTAINER_NAME = \"test-container-main\";\n+\n+    public static void main(String[] args) throws Exception {\n+        if (!DockerTestUtils.canTestDocker()) {\n+            return;\n+        }\n+\n+        DockerTestUtils.buildJdkContainerImage(IMAGE_NAME);\n+\n+        try {\n+            \/\/ Start the loop process in the \"main\" container, then run test cases\n+            \/\/ using a sidecar container.\n+            DockerThread t = startMainContainer();\n+\n+            waitForMainContainerToStart(500, 10);\n+            t.checkForErrors();\n+\n+            OutputAnalyzer jcmdOut = testCase01();\n+            long mainProcPid = findProcess(jcmdOut, \"EventGeneratorLoop\");\n+\n+            t.assertIsAlive();\n+            testCase02(mainProcPid);\n+\n+            \/\/ JCMD does not work in sidecar configuration, except for \"jcmd -l\".\n+            \/\/ Including this test case to assist in reproduction of the problem.\n+            \/\/ t.assertIsAlive();\n+            \/\/ testCase03(mainProcPid);\n+\n+            t.join(TIME_TO_RUN_MAIN_PROCESS * 1000);\n+            t.checkForErrors();\n+        } finally {\n+            DockerTestUtils.removeDockerImage(IMAGE_NAME);\n+        }\n+    }\n+\n+\n+    \/\/ Run \"jcmd -l\" in a sidecar container and find a process that runs EventGeneratorLoop\n+    private static OutputAnalyzer testCase01() throws Exception {\n+        return runSideCar(MAIN_CONTAINER_NAME, \"\/jdk\/bin\/jcmd\", \"-l\")\n+            .shouldHaveExitValue(0)\n+            .shouldContain(\"sun.tools.jcmd.JCmd\")\n+            .shouldContain(\"EventGeneratorLoop\");\n+    }\n+\n+    \/\/ run jhsdb jinfo <PID> (jhsdb uses PTRACE)\n+    private static void testCase02(long pid) throws Exception {\n+        runSideCar(MAIN_CONTAINER_NAME, \"\/jdk\/bin\/jhsdb\", \"jinfo\", \"--pid\", \"\" + pid)\n+            .shouldHaveExitValue(0)\n+            .shouldContain(\"Java System Properties\")\n+            .shouldContain(\"VM Flags\");\n+    }\n+\n+    \/\/ test jcmd with some commands (help, start JFR recording)\n+    \/\/ JCMD will use signal mechanism and Unix Socket\n+    private static void testCase03(long pid) throws Exception {\n+        runSideCar(MAIN_CONTAINER_NAME, \"\/jdk\/bin\/jcmd\", \"\" + pid, \"help\")\n+            .shouldHaveExitValue(0)\n+            .shouldContain(\"VM.version\");\n+        runSideCar(MAIN_CONTAINER_NAME, \"\/jdk\/bin\/jcmd\", \"\" + pid, \"JFR.start\")\n+            .shouldHaveExitValue(0)\n+            .shouldContain(\"Started recording\");\n+    }\n+\n+    private static DockerThread startMainContainer() throws Exception {\n+        \/\/ start \"main\" container (the observee)\n+        DockerRunOptions opts = commonDockerOpts(\"EventGeneratorLoop\");\n+        opts.addDockerOpts(\"--cap-add=SYS_PTRACE\")\n+            .addDockerOpts(\"--name\", MAIN_CONTAINER_NAME)\n+            .addDockerOpts(\"-v\", \"\/tmp\")\n+            .addJavaOpts(\"-XX:+UsePerfData\")\n+            .addClassOptions(\"\" + TIME_TO_RUN_MAIN_PROCESS);\n+        DockerThread t = new DockerThread(opts);\n+        t.start();\n+\n+        return t;\n+    }\n+\n+    private static void waitForMainContainerToStart(int delayMillis, int count) throws Exception {\n+        boolean started = false;\n+        for(int i=0; i < count; i++) {\n+            try {\n+                Thread.sleep(delayMillis);\n+            } catch (InterruptedException e) {}\n+            if (isMainContainerRunning()) {\n+                started = true;\n+                break;\n+            }\n+        }\n+        if (!started) {\n+            throw new RuntimeException(\"Main container did not start\");\n+        }\n+    }\n+\n+    private static boolean isMainContainerRunning() throws Exception {\n+        OutputAnalyzer out =\n+            DockerTestUtils.execute(Container.ENGINE_COMMAND,\n+                                    \"ps\", \"--no-trunc\",\n+                                    \"--filter\", \"name=\" + MAIN_CONTAINER_NAME);\n+        return out.getStdout().contains(MAIN_CONTAINER_NAME);\n+    }\n+\n+    \/\/ JCMD relies on the attach mechanism (com.sun.tools.attach),\n+    \/\/ which in turn relies on JVMSTAT mechanism, which puts its mapped\n+    \/\/ buffers in \/tmp directory (hsperfdata_<user>). Thus, in sidecar\n+    \/\/ we mount \/tmp via --volumes-from from the main container.\n+    private static OutputAnalyzer runSideCar(String MAIN_CONTAINER_NAME, String whatToRun,\n+                                             String... args) throws Exception {\n+        List<String> cmd = new ArrayList<>();\n+        String[] command = new String[] {\n+            Container.ENGINE_COMMAND, \"run\",\n+            \"--tty=true\", \"--rm\",\n+            \"--cap-add=SYS_PTRACE\", \"--sig-proxy=true\",\n+            \"--pid=container:\" + MAIN_CONTAINER_NAME,\n+            \"--volumes-from\", MAIN_CONTAINER_NAME,\n+            IMAGE_NAME, whatToRun\n+        };\n+\n+        cmd.addAll(Arrays.asList(command));\n+        cmd.addAll(Arrays.asList(args));\n+        return DockerTestUtils.execute(cmd);\n+    }\n+\n+    private static long findProcess(OutputAnalyzer out, String name) throws Exception {\n+        List<String> l = out.asLines()\n+            .stream()\n+            .filter(s -> s.contains(name))\n+            .collect(Collectors.toList());\n+        if (l.isEmpty()) {\n+            throw new RuntimeException(\"Could not find matching process\");\n+        }\n+        String psInfo = l.get(0);\n+        System.out.println(\"findProcess(): psInfo: \" + psInfo);\n+        String pid = psInfo.substring(0, psInfo.indexOf(' '));\n+        System.out.println(\"findProcess(): pid: \" + pid);\n+        return Long.parseLong(pid);\n+    }\n+\n+    private static DockerRunOptions commonDockerOpts(String className) {\n+        return new DockerRunOptions(IMAGE_NAME, \"\/jdk\/bin\/java\", className)\n+            .addDockerOpts(\"--volume\", Utils.TEST_CLASSES + \":\/test-classes\/\")\n+            .addJavaOpts(\"-cp\", \"\/test-classes\/\");\n+    }\n+\n+\n+    static class DockerThread extends Thread {\n+        DockerRunOptions runOpts;\n+        Exception exception;\n+\n+        DockerThread(DockerRunOptions opts) {\n+            runOpts = opts;\n+        }\n+\n+        public void run() {\n+            try {\n+                DockerTestUtils.dockerRunJava(runOpts);\n+            } catch (Exception e) {\n+                exception = e;\n+            }\n+        }\n+\n+        public void assertIsAlive() throws Exception {\n+            if (!isAlive()) {\n+                throw new RuntimeException(\"DockerThread stopped unexpectedly\");\n+            }\n+        }\n+\n+        public void checkForErrors() throws Exception {\n+            if (exception != null) {\n+                throw new RuntimeException(\"DockerThread threw exception\"\n+                                           + exception.getMessage());\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestJcmdWithSideCar.java","additions":231,"deletions":0,"binary":false,"changes":231,"status":"added"},{"patch":"@@ -199,1 +199,1 @@\n-     * @param DockerRunOptions optins for running docker\n+     * @param DockerRunOptions options for running docker\n@@ -233,1 +233,1 @@\n-     * @param DockerRunOptions optins for running docker\n+     * @param DockerRunOptions options for running docker\n@@ -246,1 +246,1 @@\n-     * @param DockerRunOptions optins for running docker\n+     * @param DockerRunOptions options for running docker\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/docker\/DockerTestUtils.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}