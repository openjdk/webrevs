{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import java.net.InetAddress;\n@@ -32,0 +33,1 @@\n+import java.time.Duration;\n@@ -68,0 +70,2 @@\n+    static final String HOST_NAME = InetAddress.getLoopbackAddress().getHostName();\n+\n@@ -88,0 +92,2 @@\n+        System.out.println(\"Hostname: [\" + HOST_NAME + \"]\");\n+\n@@ -101,0 +107,1 @@\n+        long start = System.nanoTime();\n@@ -104,0 +111,2 @@\n+        Duration duration = Duration.ofNanos(System.nanoTime() - start);\n+        System.out.println(\"completed: duration - \" + duration );\n@@ -114,1 +123,1 @@\n-                \"ldap:\/\/localhost\/dc=ie,dc=oracle,dc=com\");\n+                \"ldap:\/\/\" + HOST_NAME + \"\/dc=ie,dc=oracle,dc=com\");\n","filename":"test\/jdk\/javax\/naming\/module\/RunBasic.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.io.PrintStream;\n@@ -43,0 +44,8 @@\n+    static {\n+        final PrintStream out = new PrintStream(System.out, true);\n+        final PrintStream err = new PrintStream(System.err, true);\n+\n+        System.setOut(out);\n+        System.setErr(err);\n+    }\n+\n@@ -47,2 +56,0 @@\n-    \/\/ LDAPServer socket\n-    private static ServerSocket serverSocket;\n@@ -71,10 +78,34 @@\n-        serverSocket = new ServerSocket(0);\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                try {\n-                    new LDAPServer(serverSocket, LDAP_CAPTURE_FILE);\n-               } catch (Exception e) {\n-                   System.out.println(\"ERROR: unable to launch LDAP server\");\n-                   e.printStackTrace();\n-               }\n+        try (ServerSocket serverSocket = new ServerSocket()) {\n+            serverSocket.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));\n+            new Thread(new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        new LDAPServer(serverSocket, LDAP_CAPTURE_FILE);\n+                    } catch (Exception e) {\n+                        System.out.println(\"ERROR: unable to launch LDAP server\");\n+                        e.printStackTrace();\n+                    }\n+                }\n+            }).start();\n+\n+            \/*\n+             * Connect to the LDAP directory\n+             *\/\n+\n+            Hashtable<String,Object> env = new Hashtable<>();\n+            env.put(Context.INITIAL_CONTEXT_FACTORY,\n+                    \"com.sun.jndi.ldap.LdapCtxFactory\");\n+            URI ldapUri = new URI(args[0]);\n+            if (ldapUri.getPort() == -1) {\n+                ldapUri = new URI(ldapUri.getScheme(), null, ldapUri.getHost(),\n+                        serverSocket.getLocalPort(), ldapUri.getPath(), null, null);\n+            }\n+            env.put(Context.PROVIDER_URL, ldapUri.toString());\n+            env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n+            env.put(Context.SECURITY_PRINCIPAL, \"cn=admin,dc=ie,dc=oracle,dc=com\");\n+            env.put(Context.SECURITY_CREDENTIALS, \"changeit\");\n+            env.put(LdapContext.CONTROL_FACTORIES,\n+                    \"org.example.authz.AuthzIdResponseControlFactory\");\n+            if (args[args.length - 1].equalsIgnoreCase(\"-trace\")) {\n+                env.put(\"com.sun.jndi.ldap.trace.ber\", System.out);\n@@ -82,23 +113,0 @@\n-        }).start();\n-\n-        \/*\n-         * Connect to the LDAP directory\n-         *\/\n-\n-        Hashtable<String,Object> env = new Hashtable<>();\n-        env.put(Context.INITIAL_CONTEXT_FACTORY,\n-            \"com.sun.jndi.ldap.LdapCtxFactory\");\n-        URI ldapUri = new URI(args[0]);\n-        if (ldapUri.getPort() == -1) {\n-            ldapUri = new URI(ldapUri.getScheme(), null, ldapUri.getHost(),\n-                serverSocket.getLocalPort(), ldapUri.getPath(), null, null);\n-        }\n-        env.put(Context.PROVIDER_URL, ldapUri.toString());\n-        env.put(Context.SECURITY_AUTHENTICATION, \"simple\");\n-        env.put(Context.SECURITY_PRINCIPAL, \"cn=admin,dc=ie,dc=oracle,dc=com\");\n-        env.put(Context.SECURITY_CREDENTIALS, \"changeit\");\n-        env.put(LdapContext.CONTROL_FACTORIES,\n-            \"org.example.authz.AuthzIdResponseControlFactory\");\n-        if (args[args.length - 1].equalsIgnoreCase(\"-trace\")) {\n-            env.put(\"com.sun.jndi.ldap.trace.ber\", System.out);\n-        }\n@@ -106,18 +114,19 @@\n-        System.out.println(\"ConnectWithAuthzId: connecting to \" + ldapUri);\n-        LdapContext ctx = null;\n-        Control[] connectionControls = { new AuthzIdRequestControl(false) };\n-\n-        try {\n-            ctx = new InitialLdapContext(env, connectionControls);\n-            System.out.println(\"ConnectWithAuthzId: connected\");\n-            \/\/ Retrieve the response controls\n-            Control[] responseControls = ctx.getResponseControls();\n-            if (responseControls != null) {\n-                for (Control responseControl : responseControls) {\n-                    System.out.println(\"ConnectWithAuthzId: received response\" +\n-                        \" control: \" + responseControl.getID());\n-                    if (responseControl instanceof AuthzIdResponseControl) {\n-                        AuthzIdResponseControl authzId =\n-                            (AuthzIdResponseControl)responseControl;\n-                        System.out.println(\"ConnectWithAuthzId: identity is  \" +\n-                            authzId.getIdentity());\n+            System.out.println(\"ConnectWithAuthzId: connecting to \" + ldapUri);\n+            LdapContext ctx = null;\n+            Control[] connectionControls = { new AuthzIdRequestControl(false) };\n+\n+            try {\n+                ctx = new InitialLdapContext(env, connectionControls);\n+                System.out.println(\"ConnectWithAuthzId: connected\");\n+                \/\/ Retrieve the response controls\n+                Control[] responseControls = ctx.getResponseControls();\n+                if (responseControls != null) {\n+                    for (Control responseControl : responseControls) {\n+                        System.out.println(\"ConnectWithAuthzId: received response\" +\n+                                \" control: \" + responseControl.getID());\n+                        if (responseControl instanceof AuthzIdResponseControl) {\n+                            AuthzIdResponseControl authzId =\n+                                    (AuthzIdResponseControl)responseControl;\n+                            System.out.println(\"ConnectWithAuthzId: identity is  \" +\n+                                    authzId.getIdentity());\n+                        }\n@@ -126,6 +135,6 @@\n-            }\n-        } catch (NamingException e) {\n-            System.err.println(\"ConnectWithAuthzId: error connecting \" + e);\n-        } finally {\n-            if (ctx != null) {\n-                ctx.close();\n+            } catch (NamingException e) {\n+                System.err.println(\"ConnectWithAuthzId: error connecting \" + e);\n+            } finally {\n+                if (ctx != null) {\n+                    ctx.close();\n+                }\n","filename":"test\/jdk\/javax\/naming\/module\/src\/test\/test\/ConnectWithAuthzId.java","additions":69,"deletions":60,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.io.PrintStream;\n@@ -41,0 +42,8 @@\n+    static {\n+        final PrintStream out = new PrintStream(System.out, true);\n+        final PrintStream err = new PrintStream(System.err, true);\n+\n+        System.setOut(out);\n+        System.setErr(err);\n+    }\n+\n@@ -44,2 +53,0 @@\n-    \/\/ LDAPServer socket\n-    private static ServerSocket serverSocket;\n@@ -68,10 +75,29 @@\n-        serverSocket = new ServerSocket(0);\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                try {\n-                    new LDAPServer(serverSocket, LDAP_CAPTURE_FILE);\n-               } catch (Exception e) {\n-                   System.out.println(\"ERROR: unable to launch LDAP server\");\n-                   e.printStackTrace();\n-               }\n+        try (ServerSocket serverSocket = new ServerSocket()) {\n+            serverSocket.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));\n+            new Thread(new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        new LDAPServer(serverSocket, LDAP_CAPTURE_FILE);\n+                    } catch (Exception e) {\n+                        System.out.println(\"ERROR: unable to launch LDAP server\");\n+                        e.printStackTrace();\n+                    }\n+                }\n+            }).start();\n+\n+            \/*\n+             * Connect to the LDAP directory\n+             *\/\n+\n+            Hashtable<String,Object> env = new Hashtable<>();\n+            env.put(Context.INITIAL_CONTEXT_FACTORY,\n+                    \"com.sun.jndi.ldap.LdapCtxFactory\");\n+            URI ldapUri = new URI(args[0]);\n+            if (ldapUri.getPort() == -1) {\n+                ldapUri = new URI(ldapUri.getScheme(), null, ldapUri.getHost(),\n+                        serverSocket.getLocalPort(), ldapUri.getPath(), null, null);\n+            }\n+            env.put(Context.PROVIDER_URL, ldapUri.toString());\n+            if (args[args.length - 1].equalsIgnoreCase(\"-trace\")) {\n+                env.put(\"com.sun.jndi.ldap.trace.ber\", System.out);\n@@ -79,18 +105,0 @@\n-        }).start();\n-\n-        \/*\n-         * Connect to the LDAP directory\n-         *\/\n-\n-        Hashtable<String,Object> env = new Hashtable<>();\n-        env.put(Context.INITIAL_CONTEXT_FACTORY,\n-            \"com.sun.jndi.ldap.LdapCtxFactory\");\n-        URI ldapUri = new URI(args[0]);\n-        if (ldapUri.getPort() == -1) {\n-            ldapUri = new URI(ldapUri.getScheme(), null, ldapUri.getHost(),\n-                serverSocket.getLocalPort(), ldapUri.getPath(), null, null);\n-        }\n-        env.put(Context.PROVIDER_URL, ldapUri.toString());\n-        if (args[args.length - 1].equalsIgnoreCase(\"-trace\")) {\n-            env.put(\"com.sun.jndi.ldap.trace.ber\", System.out);\n-        }\n@@ -98,12 +106,13 @@\n-        System.out.println(\"ConnectWithFoo: connecting to \" + ldapUri);\n-        LdapContext ctx = null;\n-        Control[] connectionControls = { new FooControl(false) };\n-\n-        try {\n-            ctx = new InitialLdapContext(env, connectionControls);\n-            System.out.println(\"ConnectWithFoo: connected\");\n-        } catch (NamingException e) {\n-            System.err.println(\"ConnectWithFoo: error connecting \" + e);\n-        } finally {\n-            if (ctx != null) {\n-                ctx.close();\n+            System.out.println(\"ConnectWithFoo: connecting to \" + ldapUri);\n+            LdapContext ctx = null;\n+            Control[] connectionControls = { new FooControl(false) };\n+\n+            try {\n+                ctx = new InitialLdapContext(env, connectionControls);\n+                System.out.println(\"ConnectWithFoo: connected\");\n+            } catch (NamingException e) {\n+                System.err.println(\"ConnectWithFoo: error connecting \" + e);\n+            } finally {\n+                if (ctx != null) {\n+                    ctx.close();\n+                }\n","filename":"test\/jdk\/javax\/naming\/module\/src\/test\/test\/ConnectWithFoo.java","additions":52,"deletions":43,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.io.PrintStream;\n@@ -39,0 +40,8 @@\n+    static {\n+        final PrintStream out = new PrintStream(System.out, true);\n+        final PrintStream err = new PrintStream(System.err, true);\n+\n+        System.setOut(out);\n+        System.setErr(err);\n+    }\n+\n@@ -42,2 +51,0 @@\n-    \/\/ LDAPServer socket\n-    private static ServerSocket serverSocket;\n@@ -66,10 +73,27 @@\n-        serverSocket = new ServerSocket(0);\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                try {\n-                    new LDAPServer(serverSocket, LDAP_CAPTURE_FILE);\n-               } catch (Exception e) {\n-                   System.out.println(\"ERROR: unable to launch LDAP server\");\n-                   e.printStackTrace();\n-               }\n+        try (ServerSocket serverSocket = new ServerSocket()) {\n+            serverSocket.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));\n+            new Thread(new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        new LDAPServer(serverSocket, LDAP_CAPTURE_FILE);\n+                    } catch (Exception e) {\n+                        System.out.println(\"ERROR: unable to launch LDAP server\");\n+                        e.printStackTrace();\n+                    }\n+                }\n+            }).start();\n+\n+            \/*\n+             * Connect to the LDAP directory\n+             *\/\n+\n+            Hashtable<String,Object> env = new Hashtable<>();\n+            URI ldapUri = new URI(args[0]);\n+            if (ldapUri.getPort() == -1) {\n+                ldapUri = new URI(\"ldapv4\", null, ldapUri.getHost(),\n+                        serverSocket.getLocalPort(), ldapUri.getPath(), null, null);\n+            }\n+            env.put(Context.PROVIDER_URL, ldapUri.toString());\n+            if (args[args.length - 1].equalsIgnoreCase(\"-trace\")) {\n+                env.put(\"com.sun.jndi.ldap.trace.ber\", System.out);\n@@ -77,16 +101,0 @@\n-        }).start();\n-\n-        \/*\n-         * Connect to the LDAP directory\n-         *\/\n-\n-        Hashtable<String,Object> env = new Hashtable<>();\n-        URI ldapUri = new URI(args[0]);\n-        if (ldapUri.getPort() == -1) {\n-            ldapUri = new URI(\"ldapv4\", null, ldapUri.getHost(),\n-                serverSocket.getLocalPort(), ldapUri.getPath(), null, null);\n-        }\n-        env.put(Context.PROVIDER_URL, ldapUri.toString());\n-        if (args[args.length - 1].equalsIgnoreCase(\"-trace\")) {\n-            env.put(\"com.sun.jndi.ldap.trace.ber\", System.out);\n-        }\n@@ -94,16 +102,17 @@\n-        \/\/ URL context factory location for 'ldapv4:\/\/'\n-        env.put(Context.URL_PKG_PREFIXES, \"org.example\");\n-\n-        System.out.println(\"ReadByUrl: connecting to \" + ldapUri);\n-        DirContext ctx = null;\n-\n-        try {\n-            ctx = new InitialDirContext(env);\n-            System.out.println(\"ReadByUrl: connected\");\n-            DirContext entry = (DirContext) ctx.lookup(ldapUri.toString());\n-            entry.close();\n-        } catch (NamingException e) {\n-            System.err.println(\"ReadByUrl: error connecting \" + e);\n-        } finally {\n-            if (ctx != null) {\n-                ctx.close();\n+            \/\/ URL context factory location for 'ldapv4:\/\/'\n+            env.put(Context.URL_PKG_PREFIXES, \"org.example\");\n+\n+            System.out.println(\"ReadByUrl: connecting to \" + ldapUri);\n+            DirContext ctx = null;\n+\n+            try {\n+                ctx = new InitialDirContext(env);\n+                System.out.println(\"ReadByUrl: connected\");\n+                DirContext entry = (DirContext) ctx.lookup(ldapUri.toString());\n+                entry.close();\n+            } catch (NamingException e) {\n+                System.err.println(\"ReadByUrl: error connecting \" + e);\n+            } finally {\n+                if (ctx != null) {\n+                    ctx.close();\n+                }\n","filename":"test\/jdk\/javax\/naming\/module\/src\/test\/test\/ReadByUrl.java","additions":54,"deletions":45,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.io.PrintStream;\n@@ -41,0 +42,9 @@\n+    static {\n+        final PrintStream out = new PrintStream(System.out, true);\n+        final PrintStream err = new PrintStream(System.err, true);\n+\n+        System.setOut(out);\n+        System.setErr(err);\n+    }\n+\n+\n@@ -44,2 +54,0 @@\n-    \/\/ LDAPServer socket\n-    private static ServerSocket serverSocket;\n@@ -52,1 +60,0 @@\n-\n@@ -61,1 +68,1 @@\n-    return;\n+            return;\n@@ -67,11 +74,29 @@\n-\n-        serverSocket = new ServerSocket(0);\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                try {\n-                    new LDAPServer(serverSocket, LDAP_CAPTURE_FILE);\n-               } catch (Exception e) {\n-                   System.out.println(\"ERROR: unable to launch LDAP server\");\n-                   e.printStackTrace();\n-               }\n+        try (ServerSocket serverSocket = new ServerSocket()) {\n+            serverSocket.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));\n+            new Thread(new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        new LDAPServer(serverSocket, LDAP_CAPTURE_FILE);\n+                    } catch (Exception e) {\n+                        System.out.println(\"ERROR: unable to launch LDAP server\");\n+                        e.printStackTrace();\n+                    }\n+                }\n+            }).start();\n+\n+            \/*\n+             * Store fruit objects in the LDAP directory\n+             *\/\n+\n+            Hashtable<String,Object> env = new Hashtable<>();\n+            env.put(Context.INITIAL_CONTEXT_FACTORY,\n+                    \"com.sun.jndi.ldap.LdapCtxFactory\");\n+            URI ldapUri = new URI(args[0]);\n+            if (ldapUri.getPort() == -1) {\n+                ldapUri = new URI(ldapUri.getScheme(), null, ldapUri.getHost(),\n+                        serverSocket.getLocalPort(), ldapUri.getPath(), null, null);\n+            }\n+            env.put(Context.PROVIDER_URL, ldapUri.toString());\n+            if (args[args.length - 1].equalsIgnoreCase(\"-trace\")) {\n+                env.put(\"com.sun.jndi.ldap.trace.ber\", System.out);\n@@ -79,1 +104,0 @@\n-        }).start();\n@@ -81,3 +105,5 @@\n-        \/*\n-         * Store fruit objects in the LDAP directory\n-         *\/\n+            System.out.println(\"StoreFruit: connecting to \" + ldapUri);\n+            DirContext ctx = new InitialDirContext(env);\n+            Fruit fruit = null;\n+            String dn = \"cn=myfruit\";\n+            String dn2 = \"cn=myapple\";\n@@ -85,12 +111,10 @@\n-        Hashtable<String,Object> env = new Hashtable<>();\n-        env.put(Context.INITIAL_CONTEXT_FACTORY,\n-    \"com.sun.jndi.ldap.LdapCtxFactory\");\n-        URI ldapUri = new URI(args[0]);\n-        if (ldapUri.getPort() == -1) {\n-            ldapUri = new URI(ldapUri.getScheme(), null, ldapUri.getHost(),\n-                serverSocket.getLocalPort(), ldapUri.getPath(), null, null);\n-        }\n-        env.put(Context.PROVIDER_URL, ldapUri.toString());\n-        if (args[args.length - 1].equalsIgnoreCase(\"-trace\")) {\n-            env.put(\"com.sun.jndi.ldap.trace.ber\", System.out);\n-        }\n+            try {\n+                fruit = new Fruit(\"orange\");\n+                ctx.bind(dn, fruit);\n+                System.out.println(\"StoreFruit: created entry '\" + dn + \"'\");\n+            } catch (NameAlreadyBoundException e) {\n+                System.err.println(\"StoreFruit: entry '\" + dn +\n+                        \"' already exists\");\n+                cleanup(ctx, (String)null);\n+                return;\n+            }\n@@ -98,16 +122,9 @@\n-        System.out.println(\"StoreFruit: connecting to \" + ldapUri);\n-        DirContext ctx = new InitialDirContext(env);\n-        Fruit fruit = null;\n-        String dn = \"cn=myfruit\";\n-        String dn2 = \"cn=myapple\";\n-\n-        try {\n-            fruit = new Fruit(\"orange\");\n-            ctx.bind(dn, fruit);\n-            System.out.println(\"StoreFruit: created entry '\" + dn + \"'\");\n-        } catch (NameAlreadyBoundException e) {\n-            System.err.println(\"StoreFruit: entry '\" + dn +\n-                \"' already exists\");\n-            cleanup(ctx, (String)null);\n-            return;\n-        }\n+            try {\n+                ctx.bind(dn2, new Fruit(\"apple\"));\n+                System.out.println(\"StoreFruit: created entry '\" + dn2 + \"'\");\n+            } catch (NameAlreadyBoundException e) {\n+                System.err.println(\"StoreFruit: entry '\" + dn2 +\n+                        \"' already exists\");\n+                cleanup(ctx, dn);\n+                return;\n+            }\n@@ -115,9 +132,3 @@\n-        try {\n-            ctx.bind(dn2, new Fruit(\"apple\"));\n-            System.out.println(\"StoreFruit: created entry '\" + dn2 + \"'\");\n-        } catch (NameAlreadyBoundException e) {\n-            System.err.println(\"StoreFruit: entry '\" + dn2 +\n-                \"' already exists\");\n-            cleanup(ctx, dn);\n-            return;\n-        }\n+            \/*\n+             * Retrieve fruit objects from the LDAP directory\n+             *\/\n@@ -125,3 +136,10 @@\n-        \/*\n-         * Retrieve fruit objects from the LDAP directory\n-         *\/\n+            try {\n+                Fruit fruit2 = (Fruit) ctx.lookup(dn);\n+                System.out.println(\"StoreFruit: retrieved object: \" + fruit2);\n+            } catch (NamingException e) {\n+                System.err.println(\"StoreFruit: error retrieving entry '\" +\n+                        dn + \"' \" + e);\n+                e.printStackTrace();\n+                cleanup(ctx, dn, dn2);\n+                return;\n+            }\n@@ -129,10 +147,10 @@\n-        try {\n-            Fruit fruit2 = (Fruit) ctx.lookup(dn);\n-            System.out.println(\"StoreFruit: retrieved object: \" + fruit2);\n-        } catch (NamingException e) {\n-            System.err.println(\"StoreFruit: error retrieving entry '\" +\n-                dn + \"' \" + e);\n-            e.printStackTrace();\n-            cleanup(ctx, dn, dn2);\n-            return;\n-        }\n+            try {\n+                Fruit fruit3 = (Fruit) ctx.lookup(dn2);\n+                System.out.println(\"StoreFruit: retrieved object: \" + fruit3);\n+            } catch (NamingException e) {\n+                System.err.println(\"StoreFruit: error retrieving entry '\" +\n+                        dn2 + \"' \" + e);\n+                e.printStackTrace();\n+                cleanup(ctx, dn, dn2);\n+                return;\n+            }\n@@ -140,7 +158,0 @@\n-        try {\n-            Fruit fruit3 = (Fruit) ctx.lookup(dn2);\n-            System.out.println(\"StoreFruit: retrieved object: \" + fruit3);\n-        } catch (NamingException e) {\n-            System.err.println(\"StoreFruit: error retrieving entry '\" +\n-                dn2 + \"' \" + e);\n-            e.printStackTrace();\n@@ -148,1 +159,0 @@\n-            return;\n@@ -150,2 +160,0 @@\n-\n-        cleanup(ctx, dn, dn2);\n","filename":"test\/jdk\/javax\/naming\/module\/src\/test\/test\/StoreFruit.java","additions":88,"deletions":80,"binary":false,"changes":168,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.io.PrintStream;\n@@ -40,0 +41,8 @@\n+    static {\n+        final PrintStream out = new PrintStream(System.out, true);\n+        final PrintStream err = new PrintStream(System.err, true);\n+\n+        System.setOut(out);\n+        System.setErr(err);\n+    }\n+\n@@ -43,2 +52,0 @@\n-    \/\/ LDAPServer socket\n-    private static ServerSocket serverSocket;\n@@ -67,10 +74,29 @@\n-        serverSocket = new ServerSocket(0);\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                try {\n-                    new LDAPServer(serverSocket, LDAP_CAPTURE_FILE);\n-               } catch (Exception e) {\n-                   System.out.println(\"ERROR: unable to launch LDAP server\");\n-                   e.printStackTrace();\n-               }\n+        try (ServerSocket serverSocket = new ServerSocket()) {\n+            serverSocket.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));\n+            new Thread(new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        new LDAPServer(serverSocket, LDAP_CAPTURE_FILE);\n+                    } catch (Exception e) {\n+                        System.out.println(\"ERROR: unable to launch LDAP server\");\n+                        e.printStackTrace();\n+                    }\n+                }\n+            }).start();\n+\n+            \/*\n+             * Store objects in the LDAP directory\n+             *\/\n+\n+            Hashtable<String,Object> env = new Hashtable<>();\n+            env.put(Context.INITIAL_CONTEXT_FACTORY,\n+                    \"com.sun.jndi.ldap.LdapCtxFactory\");\n+            URI ldapUri = new URI(args[0]);\n+            if (ldapUri.getPort() == -1) {\n+                ldapUri = new URI(ldapUri.getScheme(), null, ldapUri.getHost(),\n+                        serverSocket.getLocalPort(), ldapUri.getPath(), null, null);\n+            }\n+            env.put(Context.PROVIDER_URL, ldapUri.toString());\n+            if (args[args.length - 1].equalsIgnoreCase(\"-trace\")) {\n+                env.put(\"com.sun.jndi.ldap.trace.ber\", System.out);\n@@ -78,1 +104,0 @@\n-        }).start();\n@@ -80,3 +105,4 @@\n-        \/*\n-         * Store objects in the LDAP directory\n-         *\/\n+            System.out.println(\"StoreObject: connecting to \" + ldapUri);\n+            DirContext ctx = new InitialDirContext(env);\n+            String dn = \"cn=myevent\";\n+            String dn2 = \"cn=myevent2\";\n@@ -84,12 +110,9 @@\n-        Hashtable<String,Object> env = new Hashtable<>();\n-        env.put(Context.INITIAL_CONTEXT_FACTORY,\n-            \"com.sun.jndi.ldap.LdapCtxFactory\");\n-        URI ldapUri = new URI(args[0]);\n-        if (ldapUri.getPort() == -1) {\n-            ldapUri = new URI(ldapUri.getScheme(), null, ldapUri.getHost(),\n-                serverSocket.getLocalPort(), ldapUri.getPath(), null, null);\n-        }\n-        env.put(Context.PROVIDER_URL, ldapUri.toString());\n-        if (args[args.length - 1].equalsIgnoreCase(\"-trace\")) {\n-            env.put(\"com.sun.jndi.ldap.trace.ber\", System.out);\n-        }\n+            try {\n+                ctx.bind(dn, new ActionEvent(\"\", 1, \"Hello1\"));\n+                System.out.println(\"StoreObject: created entry '\" + dn + \"'\");\n+            } catch (NameAlreadyBoundException e) {\n+                System.err.println(\"StoreObject: entry '\" + dn +\n+                        \"' already exists\");\n+                cleanup(ctx, (String)null);\n+                return;\n+            }\n@@ -97,14 +120,9 @@\n-        System.out.println(\"StoreObject: connecting to \" + ldapUri);\n-        DirContext ctx = new InitialDirContext(env);\n-        String dn = \"cn=myevent\";\n-        String dn2 = \"cn=myevent2\";\n-\n-        try {\n-            ctx.bind(dn, new ActionEvent(\"\", 1, \"Hello1\"));\n-            System.out.println(\"StoreObject: created entry '\" + dn + \"'\");\n-        } catch (NameAlreadyBoundException e) {\n-            System.err.println(\"StoreObject: entry '\" + dn +\n-                \"' already exists\");\n-            cleanup(ctx, (String)null);\n-            return;\n-        }\n+            try {\n+                ctx.bind(dn2, new ActionEvent(\"\", 2, \"Hello2\"));\n+                System.out.println(\"StoreObject: created entry '\" + dn2 + \"'\");\n+            } catch (NameAlreadyBoundException e) {\n+                System.err.println(\"StoreObject: entry '\" + dn2 +\n+                        \"' already exists\");\n+                cleanup(ctx, dn);\n+                return;\n+            }\n@@ -112,9 +130,3 @@\n-        try {\n-            ctx.bind(dn2, new ActionEvent(\"\", 2, \"Hello2\"));\n-            System.out.println(\"StoreObject: created entry '\" + dn2 + \"'\");\n-        } catch (NameAlreadyBoundException e) {\n-            System.err.println(\"StoreObject: entry '\" + dn2 +\n-                \"' already exists\");\n-            cleanup(ctx, dn);\n-            return;\n-        }\n+            \/*\n+             * Retrieve objects from the LDAP directory\n+             *\/\n@@ -122,3 +134,10 @@\n-        \/*\n-         * Retrieve objects from the LDAP directory\n-         *\/\n+            try {\n+                ActionEvent b = (ActionEvent) ctx.lookup(dn);\n+                System.out.println(\"StoreObject: retrieved object: \" + b);\n+            } catch (NamingException e) {\n+                System.err.println(\"StoreObject: error retrieving entry '\" +\n+                        dn + \"' \" + e);\n+                e.printStackTrace();\n+                cleanup(ctx, dn, dn2);\n+                return;\n+            }\n@@ -126,10 +145,10 @@\n-        try {\n-            ActionEvent b = (ActionEvent) ctx.lookup(dn);\n-            System.out.println(\"StoreObject: retrieved object: \" + b);\n-        } catch (NamingException e) {\n-            System.err.println(\"StoreObject: error retrieving entry '\" +\n-                dn + \"' \" + e);\n-            e.printStackTrace();\n-            cleanup(ctx, dn, dn2);\n-            return;\n-        }\n+            try {\n+                ActionEvent t = (ActionEvent) ctx.lookup(dn2);\n+                System.out.println(\"StoreObject: retrieved object: \" + t);\n+            } catch (NamingException e) {\n+                System.err.println(\"StoreObject: error retrieving entry '\" +\n+                        dn2 + \"' \" + e);\n+                e.printStackTrace();\n+                cleanup(ctx, dn, dn2);\n+                return;\n+            }\n@@ -137,7 +156,0 @@\n-        try {\n-            ActionEvent t = (ActionEvent) ctx.lookup(dn2);\n-            System.out.println(\"StoreObject: retrieved object: \" + t);\n-        } catch (NamingException e) {\n-            System.err.println(\"StoreObject: error retrieving entry '\" +\n-                dn2 + \"' \" + e);\n-            e.printStackTrace();\n@@ -145,1 +157,1 @@\n-            return;\n+            ctx.close();\n@@ -147,3 +159,0 @@\n-\n-        cleanup(ctx, dn, dn2);\n-        ctx.close();\n","filename":"test\/jdk\/javax\/naming\/module\/src\/test\/test\/StoreObject.java","additions":85,"deletions":76,"binary":false,"changes":161,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import java.io.PrintStream;\n@@ -43,0 +44,8 @@\n+    static {\n+        final PrintStream out = new PrintStream(System.out, true);\n+        final PrintStream err = new PrintStream(System.err, true);\n+\n+        System.setOut(out);\n+        System.setErr(err);\n+    }\n+\n@@ -46,2 +55,0 @@\n-    \/\/ LDAPServer socket\n-    private static ServerSocket serverSocket;\n@@ -70,10 +77,29 @@\n-        serverSocket = new ServerSocket(0);\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                try {\n-                    new LDAPServer(serverSocket, LDAP_CAPTURE_FILE);\n-               } catch (Exception e) {\n-                   System.out.println(\"ERROR: unable to launch LDAP server\");\n-                   e.printStackTrace();\n-               }\n+        try (ServerSocket serverSocket = new ServerSocket()) {\n+            serverSocket.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));\n+            new Thread(new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        new LDAPServer(serverSocket, LDAP_CAPTURE_FILE);\n+                    } catch (Exception e) {\n+                        System.out.println(\"ERROR: unable to launch LDAP server\");\n+                        e.printStackTrace();\n+                    }\n+                }\n+            }).start();\n+\n+            \/*\n+             * Store Person objects in the LDAP directory\n+             *\/\n+\n+            Hashtable<String,Object> env = new Hashtable<>();\n+            env.put(Context.INITIAL_CONTEXT_FACTORY,\n+                    \"com.sun.jndi.ldap.LdapCtxFactory\");\n+            URI ldapUri = new URI(args[0]);\n+            if (ldapUri.getPort() == -1) {\n+                ldapUri = new URI(ldapUri.getScheme(), null, ldapUri.getHost(),\n+                        serverSocket.getLocalPort(), ldapUri.getPath(), null, null);\n+            }\n+            env.put(Context.PROVIDER_URL, ldapUri.toString());\n+            if (args[args.length - 1].equalsIgnoreCase(\"-trace\")) {\n+                env.put(\"com.sun.jndi.ldap.trace.ber\", System.out);\n@@ -81,1 +107,0 @@\n-        }).start();\n@@ -83,3 +108,3 @@\n-        \/*\n-         * Store Person objects in the LDAP directory\n-         *\/\n+            \/\/ Specify the factory classname explicitly\n+            env.put(Context.STATE_FACTORIES, \"org.example.person.PersonFactory\");\n+            env.put(Context.OBJECT_FACTORIES, \"org.example.person.PersonFactory\");\n@@ -87,12 +112,5 @@\n-        Hashtable<String,Object> env = new Hashtable<>();\n-        env.put(Context.INITIAL_CONTEXT_FACTORY,\n-    \"com.sun.jndi.ldap.LdapCtxFactory\");\n-        URI ldapUri = new URI(args[0]);\n-        if (ldapUri.getPort() == -1) {\n-            ldapUri = new URI(ldapUri.getScheme(), null, ldapUri.getHost(),\n-                serverSocket.getLocalPort(), ldapUri.getPath(), null, null);\n-        }\n-        env.put(Context.PROVIDER_URL, ldapUri.toString());\n-        if (args[args.length - 1].equalsIgnoreCase(\"-trace\")) {\n-            env.put(\"com.sun.jndi.ldap.trace.ber\", System.out);\n-        }\n+            System.out.println(\"StorePerson: connecting to \" + ldapUri);\n+            DirContext ctx = new InitialDirContext(env);\n+            Person person = null;\n+            String name = \"John Smith\";\n+            String dn = \"cn=\" + name;\n@@ -100,21 +118,11 @@\n-        \/\/ Specify the factory classname explicitly\n-        env.put(Context.STATE_FACTORIES, \"org.example.person.PersonFactory\");\n-        env.put(Context.OBJECT_FACTORIES, \"org.example.person.PersonFactory\");\n-\n-        System.out.println(\"StorePerson: connecting to \" + ldapUri);\n-        DirContext ctx = new InitialDirContext(env);\n-        Person person = null;\n-        String name = \"John Smith\";\n-        String dn = \"cn=\" + name;\n-\n-        try {\n-            person = new Person(name, \"Smith\");\n-            person.setMailAddress(\"jsmith@smith.com\");\n-            ctx.bind(dn, person);\n-            System.out.println(\"StorePerson: created entry '\" + dn + \"'\");\n-        } catch (NameAlreadyBoundException e) {\n-            System.err.println(\"StorePerson: entry '\" + dn +\n-                \"' already exists\");\n-            cleanup(ctx, (String)null);\n-            return;\n-        }\n+            try {\n+                person = new Person(name, \"Smith\");\n+                person.setMailAddress(\"jsmith@smith.com\");\n+                ctx.bind(dn, person);\n+                System.out.println(\"StorePerson: created entry '\" + dn + \"'\");\n+            } catch (NameAlreadyBoundException e) {\n+                System.err.println(\"StorePerson: entry '\" + dn +\n+                        \"' already exists\");\n+                cleanup(ctx, (String)null);\n+                return;\n+            }\n@@ -122,14 +130,4 @@\n-        name = \"Jill Smyth\";\n-        String dn2 = \"cn=\" + name;\n-        Person person2 = new Person(name, \"Smyth\");\n-        person2.setMailAddress(\"jsmyth@smith.com\");\n-\n-        try {\n-            ctx.bind(dn2, person2);\n-            System.out.println(\"StorePerson: created entry '\" + dn2 + \"'\");\n-        } catch (NameAlreadyBoundException e) {\n-            System.err.println(\"StorePerson: entry '\" + dn2 +\n-                \"' already exists\");\n-            cleanup(ctx, dn);\n-            return;\n-        }\n+            name = \"Jill Smyth\";\n+            String dn2 = \"cn=\" + name;\n+            Person person2 = new Person(name, \"Smyth\");\n+            person2.setMailAddress(\"jsmyth@smith.com\");\n@@ -137,3 +135,13 @@\n-        \/*\n-         * Retrieve Person objects from the LDAP directory\n-         *\/\n+            try {\n+                ctx.bind(dn2, person2);\n+                System.out.println(\"StorePerson: created entry '\" + dn2 + \"'\");\n+            } catch (NameAlreadyBoundException e) {\n+                System.err.println(\"StorePerson: entry '\" + dn2 +\n+                        \"' already exists\");\n+                cleanup(ctx, dn);\n+                return;\n+            }\n+\n+            \/*\n+             * Retrieve Person objects from the LDAP directory\n+             *\/\n@@ -141,9 +149,16 @@\n-        try {\n-            Person person3 = (Person) ctx.lookup(dn);\n-            System.out.println(\"StorePerson: retrieved object: \" + person3);\n-            if (person.getAttributes().equals(person3.getAttributes())) {\n-                System.out.println(\n-                    \"StorePerson: retrieved person matches original\");\n-            } else {\n-                System.out.println(\n-                    \"StorePerson: retrieved person does NOT match original\");\n+            try {\n+                Person person3 = (Person) ctx.lookup(dn);\n+                System.out.println(\"StorePerson: retrieved object: \" + person3);\n+                if (person.getAttributes().equals(person3.getAttributes())) {\n+                    System.out.println(\n+                            \"StorePerson: retrieved person matches original\");\n+                } else {\n+                    System.out.println(\n+                            \"StorePerson: retrieved person does NOT match original\");\n+                }\n+            } catch (NamingException e) {\n+                System.err.println(\"StorePerson: error retrieving entry '\" +\n+                        dn + \"' \" + e);\n+                e.printStackTrace();\n+                cleanup(ctx, dn, dn2);\n+                return;\n@@ -151,7 +166,0 @@\n-        } catch (NamingException e) {\n-            System.err.println(\"StorePerson: error retrieving entry '\" +\n-                dn + \"' \" + e);\n-            e.printStackTrace();\n-            cleanup(ctx, dn, dn2);\n-            return;\n-        }\n@@ -159,9 +167,16 @@\n-        try {\n-            Person person4 = (Person) ctx.lookup(dn2);\n-            System.out.println(\"StorePerson: retrieved object: \" + person4);\n-            if (person2.getAttributes().equals(person4.getAttributes())) {\n-                System.out.println(\n-                    \"StorePerson: retrieved person matches original\");\n-            } else {\n-                System.out.println(\n-                    \"StorePerson: retrieved person does NOT match original\");\n+            try {\n+                Person person4 = (Person) ctx.lookup(dn2);\n+                System.out.println(\"StorePerson: retrieved object: \" + person4);\n+                if (person2.getAttributes().equals(person4.getAttributes())) {\n+                    System.out.println(\n+                            \"StorePerson: retrieved person matches original\");\n+                } else {\n+                    System.out.println(\n+                            \"StorePerson: retrieved person does NOT match original\");\n+                }\n+            } catch (NamingException e) {\n+                System.err.println(\"StorePerson: error retrieving entry '\" +\n+                        dn2 + \"' \" + e);\n+                e.printStackTrace();\n+                cleanup(ctx, dn, dn2);\n+                return;\n@@ -169,4 +184,1 @@\n-        } catch (NamingException e) {\n-            System.err.println(\"StorePerson: error retrieving entry '\" +\n-                dn2 + \"' \" + e);\n-            e.printStackTrace();\n+\n@@ -174,1 +186,0 @@\n-            return;\n@@ -176,3 +187,0 @@\n-\n-        cleanup(ctx, dn, dn2);\n-        return;\n","filename":"test\/jdk\/javax\/naming\/module\/src\/test\/test\/StorePerson.java","additions":108,"deletions":100,"binary":false,"changes":208,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,8 @@\n+    static {\n+        final PrintStream out = new PrintStream(System.out, true);\n+        final PrintStream err = new PrintStream(System.err, true);\n+\n+        System.setOut(out);\n+        System.setErr(err);\n+    }\n+\n@@ -46,2 +54,0 @@\n-    \/\/ LDAPServer socket\n-    private static ServerSocket serverSocket;\n@@ -70,10 +76,29 @@\n-        serverSocket = new ServerSocket(0);\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                try {\n-                    new LDAPServer(serverSocket, LDAP_CAPTURE_FILE);\n-               } catch (Exception e) {\n-                   System.out.println(\"ERROR: unable to launch LDAP server\");\n-                   e.printStackTrace();\n-               }\n+        try (ServerSocket serverSocket = new ServerSocket()){\n+            serverSocket.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));\n+            new Thread(new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        new LDAPServer(serverSocket, LDAP_CAPTURE_FILE);\n+                    } catch (Exception e) {\n+                        System.out.println(\"ERROR: unable to launch LDAP server\");\n+                        e.printStackTrace();\n+                    }\n+                }\n+            }).start();\n+\n+            \/*\n+             * Store a Remote object in the LDAP directory\n+             *\/\n+\n+            Hashtable<String,Object> env = new Hashtable<>();\n+            env.put(Context.INITIAL_CONTEXT_FACTORY,\n+                    \"com.sun.jndi.ldap.LdapCtxFactory\");\n+            URI ldapUri = new URI(args[0]);\n+            if (ldapUri.getPort() == -1) {\n+                ldapUri = new URI(ldapUri.getScheme(), null, ldapUri.getHost(),\n+                        serverSocket.getLocalPort(), ldapUri.getPath(), null, null);\n+            }\n+            env.put(Context.PROVIDER_URL, ldapUri.toString());\n+            if (args[args.length - 1].equalsIgnoreCase(\"-trace\")) {\n+                env.put(\"com.sun.jndi.ldap.trace.ber\", System.out);\n@@ -81,22 +106,0 @@\n-        }).start();\n-\n-        \/*\n-         * Store a Remote object in the LDAP directory\n-         *\/\n-\n-        Hashtable<String,Object> env = new Hashtable<>();\n-        env.put(Context.INITIAL_CONTEXT_FACTORY,\n-            \"com.sun.jndi.ldap.LdapCtxFactory\");\n-        URI ldapUri = new URI(args[0]);\n-        if (ldapUri.getPort() == -1) {\n-            ldapUri = new URI(ldapUri.getScheme(), null, ldapUri.getHost(),\n-                serverSocket.getLocalPort(), ldapUri.getPath(), null, null);\n-        }\n-        env.put(Context.PROVIDER_URL, ldapUri.toString());\n-        if (args[args.length - 1].equalsIgnoreCase(\"-trace\")) {\n-            env.put(\"com.sun.jndi.ldap.trace.ber\", System.out);\n-        }\n-\n-        System.out.println(\"StoreRemote: connecting to \" + ldapUri);\n-        DirContext ctx = new InitialDirContext(env);\n-        String dn = \"cn=myremote\";\n@@ -104,4 +107,3 @@\n-        try {\n-            Hello hello = new HelloImpl();\n-            ctx.bind(dn, hello);\n-            System.out.println(\"StoreRemote: created entry '\" + dn + \"'\");\n+            System.out.println(\"StoreRemote: connecting to \" + ldapUri);\n+            DirContext ctx = new InitialDirContext(env);\n+            String dn = \"cn=myremote\";\n@@ -109,2 +111,14 @@\n-            \/\/ Explicitly release the RMI object\n-            UnicastRemoteObject.unexportObject(hello, true);\n+            try {\n+                Hello hello = new HelloImpl();\n+                ctx.bind(dn, hello);\n+                System.out.println(\"StoreRemote: created entry '\" + dn + \"'\");\n+\n+                \/\/ Explicitly release the RMI object\n+                UnicastRemoteObject.unexportObject(hello, true);\n+\n+            } catch (NameAlreadyBoundException e) {\n+                System.err.println(\"StoreRemote: entry '\" + dn +\n+                        \"' already exists\");\n+                cleanup(ctx, (String)null);\n+                return;\n+            }\n@@ -112,6 +126,3 @@\n-        } catch (NameAlreadyBoundException e) {\n-            System.err.println(\"StoreRemote: entry '\" + dn +\n-                \"' already exists\");\n-            cleanup(ctx, (String)null);\n-            return;\n-        }\n+            \/*\n+             * Retrieve the Remote object from the LDAP directory\n+             *\/\n@@ -119,3 +130,5 @@\n-        \/*\n-         * Retrieve the Remote object from the LDAP directory\n-         *\/\n+            try {\n+                Hello obj = (Hello) ctx.lookup(dn);\n+                System.out.println(\"StoreRemote: retrieved object: \" + obj);\n+                System.out.println(\"StoreRemote: calling Hello.sayHello()...\\n\" +\n+                        obj.sayHello());\n@@ -123,5 +136,2 @@\n-        try {\n-            Hello obj = (Hello) ctx.lookup(dn);\n-            System.out.println(\"StoreRemote: retrieved object: \" + obj);\n-            System.out.println(\"StoreRemote: calling Hello.sayHello()...\\n\" +\n-                obj.sayHello());\n+                \/\/ Explicitly release the RMI object\n+                UnicastRemoteObject.unexportObject(obj, true);\n@@ -129,2 +139,7 @@\n-            \/\/ Explicitly release the RMI object\n-            UnicastRemoteObject.unexportObject(obj, true);\n+            } catch (NamingException e) {\n+                System.err.println(\"StoreRemote: error retrieving entry '\" +\n+                        dn + \"' \" + e);\n+                e.printStackTrace();\n+                cleanup(ctx, dn);\n+                return;\n+            }\n@@ -132,4 +147,0 @@\n-        } catch (NamingException e) {\n-            System.err.println(\"StoreRemote: error retrieving entry '\" +\n-                dn + \"' \" + e);\n-            e.printStackTrace();\n@@ -137,1 +148,0 @@\n-            return;\n@@ -139,2 +149,0 @@\n-\n-        cleanup(ctx, dn);\n","filename":"test\/jdk\/javax\/naming\/module\/src\/test\/test\/StoreRemote.java","additions":72,"deletions":64,"binary":false,"changes":136,"status":"modified"}]}