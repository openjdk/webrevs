{"files":[{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8159927\n+ * @modules java.base\/jdk.internal.util\n+ * @run main JmodExcludedFiles\n+ * @summary Test that JDK JMOD files do not include native debug symbols\n+ *\/\n+\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+\n+public class JmodExcludedFiles {\n+    private static String javaHome = System.getProperty(\"java.home\");\n+\n+    public static void main(String[] args) throws Exception {\n+        Path jmods = Path.of(javaHome, \"jmods\");\n+        try (DirectoryStream<Path> stream = Files.newDirectoryStream(jmods, \"*.jmod\")) {\n+            for (Path jmodFile : stream) {\n+                try (ZipFile zip = new ZipFile(jmodFile.toFile())) {\n+                    JModSymbolFileMatcher jsfm = new JModSymbolFileMatcher(jmodFile.toString());\n+                    if (zip.stream().map(ZipEntry::getName)\n+                                    .anyMatch(jsfm::isNativeDebugSymbol)) {\n+                        throw new RuntimeException(jmodFile + \" is expected not to include native debug symbols\");\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    static class JModSymbolFileMatcher {\n+        private String jmod;\n+\n+        JModSymbolFileMatcher(String jmod) {\n+            this.jmod = jmod;\n+        }\n+\n+        boolean isNativeDebugSymbol(String name) {\n+            int index = name.indexOf(\"\/\");\n+            if (index < 0) {\n+                throw new RuntimeException(\"unexpected entry name: \" + name);\n+            }\n+            String section = name.substring(0, index);\n+            if (section.equals(\"lib\") || section.equals(\"bin\")) {\n+                if (System.getProperty(\"os.name\").toLowerCase().contains(\"os x\")) {\n+                    String n = name.substring(index + 1);\n+                    int i = n.indexOf(\"\/\");\n+                    if (i != -1) {\n+                        if (n.substring(0, i).endsWith(\".dSYM\")) {\n+                            System.err.println(\"Found symbols in \" + jmod + \": \" + name);\n+                            return true;\n+                        }\n+                    }\n+                }\n+                if (System.getProperty(\"os.name\").toLowerCase().contains(\"win\") && name.endsWith(\".pdb\")) {\n+                    \/\/ on Windows we check if we should have public symbols through --with-external-symbols-in-bundles=public (JDK-8237192)\n+                    String strippedpdb = javaHome + \"\/bin\/\" + name.substring(index + 1, name.length() - 4) + \".stripped.pdb\";\n+                    if (!Files.exists(Paths.get(strippedpdb))) {\n+                        System.err.println(\"Found symbols in \" + jmod + \": \" + name +\n+                                \". No stripped pdb file \" + strippedpdb + \" exists.\");\n+                        return true;\n+                    }\n+                }\n+                if (name.endsWith(\".diz\")\n+                        || name.endsWith(\".debuginfo\")\n+                        || name.endsWith(\".map\")) {\n+                    System.err.println(\"Found symbols in \" + jmod + \": \" + name);\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/modules\/etc\/JmodExcludedFiles.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"}]}