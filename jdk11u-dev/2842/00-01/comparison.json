{"files":[{"patch":"@@ -27,1 +27,0 @@\n-#include \"unittest.hpp\"\n@@ -34,0 +33,2 @@\n+#include \"unittest.hpp\"\n+\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_memset_with_concurrent_readers.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -45,2 +45,0 @@\n-#include \"unittest.hpp\"\n-\n@@ -53,0 +51,2 @@\n+#include \"unittest.hpp\"\n+\n","filename":"test\/hotspot\/gtest\/jfr\/test_networkUtilization.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/vmassert_uninstall.hpp\"\n@@ -34,12 +35,0 @@\n-\/\/ gtest\/gtest.h includes assert.h which will define the assert macro, but hotspot has its\n-\/\/ own standards incompatible assert macro that takes two parameters.\n-\/\/ The workaround is to undef assert and then re-define it. The re-definition\n-\/\/ must unfortunately be copied since debug.hpp might already have been\n-\/\/ included and a second include wouldn't work due to the header guards in debug.hpp.\n-#ifdef assert\n-  #undef assert\n-  #ifdef vmassert\n-    #define assert(p, ...) vmassert(p, __VA_ARGS__)\n-  #endif\n-#endif\n-\n","filename":"test\/hotspot\/gtest\/unittest.hpp","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"}]}