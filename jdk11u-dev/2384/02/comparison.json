{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAPadding.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -222,0 +222,1 @@\n+\n@@ -224,0 +225,8 @@\n+            if (MessageDigest.isEqual(padded, decrypted)) {\n+                return true;\n+            }\n+\n+            \/\/ Some vendors might omit the NULL params in digest algorithm\n+            \/\/ identifier. Try again.\n+            encoded = encodeSignatureWithoutNULL(digestOID, digest);\n+            padded = padding.pad(encoded);\n@@ -249,2 +258,2 @@\n-     * Decode the signature data. Verify that the object identifier matches\n-     * and return the message digest.\n+     * Encode the digest without the NULL params, return the to-be-signed data.\n+     * This is only used by SunRsaSign.\n@@ -252,1 +261,1 @@\n-    public static byte[] decodeSignature(ObjectIdentifier oid, byte[] sig)\n+    static byte[] encodeSignatureWithoutNULL(ObjectIdentifier oid, byte[] digest)\n@@ -254,16 +263,8 @@\n-        \/\/ Enforce strict DER checking for signatures\n-        DerInputStream in = new DerInputStream(sig, 0, sig.length, false);\n-        DerValue[] values = in.getSequence(2);\n-        if ((values.length != 2) || (in.available() != 0)) {\n-            throw new IOException(\"SEQUENCE length error\");\n-        }\n-        AlgorithmId algId = AlgorithmId.parse(values[0]);\n-        if (algId.getOID().equals(oid) == false) {\n-            throw new IOException(\"ObjectIdentifier mismatch: \"\n-                + algId.getOID());\n-        }\n-        if (algId.getEncodedParams() != null) {\n-            throw new IOException(\"Unexpected AlgorithmId parameters\");\n-        }\n-        byte[] digest = values[1].getOctetString();\n-        return digest;\n+        DerOutputStream out = new DerOutputStream();\n+        DerOutputStream oidout = new DerOutputStream();\n+        oidout.putOID(oid);\n+        out.write(DerValue.tag_Sequence, oidout);\n+        out.putOctetString(digest);\n+        DerValue result =\n+                new DerValue(DerValue.tag_Sequence, out.toByteArray());\n+        return result.toByteArray();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSASignature.java","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8320597\n+ * @summary Verify RSA signature with omitted digest params (should be encoded as NULL)\n+ * for backward compatibility\n+ *\/\n+import java.security.KeyFactory;\n+import java.security.Signature;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Base64;\n+\n+public class WithoutNULL {\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ A 1024-bit RSA public key\n+        byte[] key = Base64.getMimeDecoder().decode(\n+                \"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCrfTrEm4KvdFSpGAM7InrFEzALTKdphT9fK6Gu\" +\n+                \"eVjHtKsuCSEaULCdjhJvPpFK40ONr1JEC1Ywp1UYrfBBdKunnbDZqNZL1cFv+IzF4Yj6JO6pOeHi\" +\n+                \"1Zpur1GaQRRlYTvzmyWY\/AATQDh8JfKObNnDVwXeezFODUG8h5+XL1ZXZQIDAQAB\");\n+\n+        \/\/ A SHA1withRSA signature on an empty input where the digestAlgorithm\n+        \/\/ inside DigestInfo does not have a parameters field.\n+        byte[] sig = Base64.getMimeDecoder().decode(\n+                \"D1FpiT44WEXlDfYK880bdorLO+e9qJVXZWiBgqs9dfK7lYQwyEt9dL23mbUAKm5TVEj2ZxtHkEvk\" +\n+                \"b8oaWkxk069jDTM1RhllPJZkAjeQRbw4gkg4N6wKZz9B\/jdSRMNJg\/b9QdRYZOHOBxsEHMbUREPV\" +\n+                \"DoCOLaxB8eIXX0EWkiE=\");\n+\n+        Signature s = Signature.getInstance(\"SHA1withRSA\", \"SunRsaSign\");\n+        s.initVerify(KeyFactory.getInstance(\"RSA\").generatePublic(new X509EncodedKeySpec(key)));\n+        if (!s.verify(sig)) {\n+            throw new RuntimeException(\"Does not verify\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/rsa\/WithoutNULL.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}