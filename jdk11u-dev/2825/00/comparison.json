{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import java.lang.reflect.*;\n@@ -55,1 +54,1 @@\n-        protected Class resolveProxyClass(String[] interfaces)\n+        protected Class<?> resolveProxyClass(String[] interfaces)\n@@ -85,1 +84,1 @@\n-            Class proxyClass = in.resolveProxyClass(\n+            Class<?> proxyClass = in.resolveProxyClass(\n","filename":"test\/jdk\/java\/io\/ObjectInputStream\/ResolveProxyClass.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,0 +61,2 @@\n+        private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/ObjectInputStream\/TestObjectStreamClass.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,3 @@\n-class Gub extends Foo {}\n+class Gub extends Foo {\n+    private static final long serialVersionUID = 1L;\n+}\n","filename":"test\/jdk\/java\/io\/Serializable\/ClassCastExceptionDetail\/Read.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-    private Integer bar = new Integer(0);\n+    private Integer bar = 0;\n@@ -47,1 +47,3 @@\n-class Gub extends Foo {}\n+class Gub extends Foo {\n+    private static final long serialVersionUID = 1L;\n+}\n","filename":"test\/jdk\/java\/io\/Serializable\/ClassCastExceptionDetail\/Write.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n","filename":"test\/jdk\/java\/io\/Serializable\/GetField\/Read2.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,0 +59,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -65,0 +67,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -71,0 +75,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -74,0 +80,1 @@\n+@SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -77,0 +84,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -85,0 +94,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -95,0 +106,1 @@\n+@SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -96,0 +108,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -106,0 +120,1 @@\n+@SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -107,0 +122,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -117,0 +134,1 @@\n+@SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -118,0 +136,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/InvalidClassException\/noargctor\/DefaultPackage.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -43,0 +45,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -49,0 +53,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -58,0 +64,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -63,0 +71,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -70,0 +80,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -76,0 +88,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -85,0 +99,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -93,0 +109,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -101,0 +119,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -111,0 +131,1 @@\n+@SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -112,0 +133,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -122,0 +145,1 @@\n+@SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -123,0 +147,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -133,0 +159,1 @@\n+@SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -134,0 +161,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/InvalidClassException\/noargctor\/Serialize\/SubclassAcrossPackage.java","additions":30,"deletions":1,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/NPEProvoker\/NPEProvoker.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,3 @@\n-    public static class Foo implements Bar, java.io.Serializable {}\n+    public static class Foo implements Bar, java.io.Serializable {\n+        private static final long serialVersionUID = 1L;\n+    }\n@@ -58,1 +60,1 @@\n-        protected Class resolveClass(ObjectStreamClass desc)\n+        protected Class<?> resolveClass(ObjectStreamClass desc)\n","filename":"test\/jdk\/java\/io\/Serializable\/NoClassDefFoundErrorTrap\/NoClassDefFoundErrorTrap.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+    @SuppressWarnings(\"deprecation\")\n","filename":"test\/jdk\/java\/io\/Serializable\/PutField\/Write2.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -40,0 +42,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -47,0 +51,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/badSerialPersistentField\/BadSerialPersistentField.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -39,0 +40,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -43,0 +45,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -47,0 +50,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -51,0 +55,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -55,0 +60,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -59,0 +65,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -63,0 +70,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -69,2 +77,2 @@\n-        Class[] ignore = { Z.class, F.class, D.class, L.class };\n-        Class[] convert = { B.class, C.class, S.class, I.class };\n+        Class<?>[] ignore = { Z.class, F.class, D.class, L.class };\n+        Class<?>[] convert = { B.class, C.class, S.class, I.class };\n","filename":"test\/jdk\/java\/io\/Serializable\/badSerialVersionUID\/BadSerialVersionUID.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,3 @@\n-class A implements Serializable {}\n+class A implements Serializable {\n+    private static final long serialVersionUID = 1L;\n+}\n@@ -34,1 +36,3 @@\n-class B implements Serializable {}\n+class B implements Serializable {\n+    private static final long serialVersionUID = 1L;\n+}\n@@ -37,0 +41,1 @@\n+    private static final long serialVersionUID = 1L;\n","filename":"test\/jdk\/java\/io\/Serializable\/badSubstByReplace\/BadSubstByReplace.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -40,0 +42,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -61,1 +64,1 @@\n-        field1 = (Integer) pfields.get(\"field1\", new Integer(100));\n+        field1 = (Integer) pfields.get(\"field1\", Integer.valueOf(100));\n@@ -82,0 +85,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -83,0 +88,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -104,1 +110,1 @@\n-        field1 = (Integer) pfields.get(\"field1\", new Integer(100));\n+        field1 = (Integer) pfields.get(\"field1\", Integer.valueOf(100));\n@@ -124,0 +130,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -125,0 +133,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -142,1 +151,1 @@\n-        field1 = (Integer) pfields.get(\"field1\", new Integer(100));\n+        field1 = (Integer) pfields.get(\"field1\", Integer.valueOf(100));\n@@ -159,0 +168,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -181,1 +192,1 @@\n-        field1 = (Integer) pfields.get(\"field1\", new Integer(100));\n+        field1 = (Integer) pfields.get(\"field1\", Integer.valueOf(100));\n@@ -202,1 +213,1 @@\n-        TestClass1 tc1 = new TestClass1(new Integer(100), 25.56, 2000,\n+        TestClass1 tc1 = new TestClass1(100, 25.56, 2000,\n@@ -205,1 +216,1 @@\n-        TestClass2 tc2 = new TestClass2(new Integer(100), 25.56, 2000,\n+        TestClass2 tc2 = new TestClass2(100, 25.56, 2000,\n@@ -208,1 +219,1 @@\n-        TestClass3 tc3 = new TestClass3(new Integer(100), 25.56, 2000,\n+        TestClass3 tc3 = new TestClass3(100, 25.56, 2000,\n@@ -211,1 +222,1 @@\n-        TestClass4 tc4 = new TestClass4(new Integer(100), 25.56, 2000,\n+        TestClass4 tc4 = new TestClass4(100, 25.56, 2000,\n","filename":"test\/jdk\/java\/io\/Serializable\/checkModifiers\/CheckModifiers.java","additions":20,"deletions":9,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-    static final long serialVersionUID = 746945609796141988L;\n+    private static final long serialVersionUID = 746945609796141988L;\n","filename":"test\/jdk\/java\/io\/Serializable\/class\/SerialA_2\/A.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/classDescFlagConflict\/Foo.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/classDescGetField\/GetField.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-        oout.writeObject(new Integer(5));\n+        oout.writeObject(5);\n","filename":"test\/jdk\/java\/io\/Serializable\/classDescHooks\/CNFException.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,3 +35,3 @@\n-    Short s = new Short((short) 1);\n-    Integer i = new Integer(2);\n-    Long l = new Long(3);\n+    Short s = (short) 1;\n+    Integer i = 2;\n+    Long l = 3L;\n@@ -46,0 +46,4 @@\n+\n+    public int hashCode() {\n+        return i;\n+    }\n","filename":"test\/jdk\/java\/io\/Serializable\/classDescHooks\/ClassDescHooks.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-    LinkedList descs;\n+    LinkedList<ObjectStreamClass> descs;\n@@ -37,1 +37,1 @@\n-    LoopbackOutputStream(OutputStream out, LinkedList descs)\n+    LoopbackOutputStream(OutputStream out, LinkedList<ObjectStreamClass> descs)\n@@ -52,1 +52,1 @@\n-    LinkedList descs;\n+    LinkedList<ObjectStreamClass> descs;\n@@ -54,1 +54,1 @@\n-    LoopbackInputStream(InputStream in, LinkedList descs) throws IOException {\n+    LoopbackInputStream(InputStream in, LinkedList<ObjectStreamClass> descs) throws IOException {\n@@ -62,1 +62,1 @@\n-        return (ObjectStreamClass) descs.removeFirst();\n+        return descs.removeFirst();\n@@ -67,0 +67,1 @@\n+    private static final long serialVersionUID = 1L;\n@@ -103,0 +104,4 @@\n+    public int hashCode() {\n+        return a.hashCode();\n+    }\n+\n@@ -109,1 +114,1 @@\n-        LinkedList descs = new LinkedList();\n+        LinkedList<ObjectStreamClass> descs = new LinkedList<>();\n","filename":"test\/jdk\/java\/io\/Serializable\/classDescHooks\/ExternLoopback.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-    LinkedList descs;\n+    LinkedList<ObjectStreamClass> descs;\n@@ -38,1 +38,1 @@\n-    LoopbackOutputStream(OutputStream out, LinkedList descs)\n+    LoopbackOutputStream(OutputStream out, LinkedList<ObjectStreamClass> descs)\n@@ -53,1 +53,1 @@\n-    LinkedList descs;\n+    LinkedList<ObjectStreamClass> descs;\n@@ -55,1 +55,1 @@\n-    LoopbackInputStream(InputStream in, LinkedList descs) throws IOException {\n+    LoopbackInputStream(InputStream in, LinkedList<ObjectStreamClass> descs) throws IOException {\n@@ -61,1 +61,0 @@\n-        throws IOException, ClassNotFoundException\n@@ -63,1 +62,1 @@\n-        return (ObjectStreamClass) descs.removeFirst();\n+        return descs.removeFirst();\n@@ -68,0 +67,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -76,1 +77,1 @@\n-        LinkedList descs = new LinkedList();\n+        LinkedList<ObjectStreamClass> descs = new LinkedList<>();\n","filename":"test\/jdk\/java\/io\/Serializable\/classDescHooks\/Loopback.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,2 @@\n+        private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/cloneArray\/CloneArray.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+    private static final long serialVersionUID = 6319710844400051132L;\n+\n@@ -50,1 +52,1 @@\n-    Class cl;\n+    Class<?> cl;\n@@ -55,1 +57,1 @@\n-    SuccessfulLookup(Class cl, long suid, Object barrier) {\n+    SuccessfulLookup(Class<?> cl, long suid, Object barrier) {\n@@ -75,2 +77,2 @@\n-    Class cl;\n-    Object barrier;\n+    Class<?> cl;\n+    final Object barrier;\n@@ -79,1 +81,1 @@\n-    FailingLookup(Class cl, Object barrier) {\n+    FailingLookup(Class<?> cl, Object barrier) {\n@@ -102,1 +104,1 @@\n-        Class cl = Class.forName(\"Good\", false, loader);\n+        Class<?> cl = Class.forName(\"Good\", false, loader);\n","filename":"test\/jdk\/java\/io\/Serializable\/concurrentClassDescLookup\/ConcurrentClassDescLookup.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -69,0 +71,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -104,0 +108,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/defaultDataEnd\/DefaultDataEnd.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,3 @@\n+    private static final long serialVersionUID = 1L;\n+\n+    @SuppressWarnings(\"serial\") \/* Incorrect use is being tested *\/\n@@ -47,1 +50,3 @@\n-class Bar implements Serializable {}\n+class Bar implements Serializable {\n+    private static final long serialVersionUID = 1L;\n+}\n@@ -52,1 +57,1 @@\n-    protected Class resolveClass(ObjectStreamClass desc)\n+    protected Class<?> resolveClass(ObjectStreamClass desc)\n","filename":"test\/jdk\/java\/io\/Serializable\/defaultReadObjectCNFException\/DefaultReadObjectCNFException.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-    public static final Integer DEFAULT_OBJECT_I = new Integer(99);\n+    public static final Integer DEFAULT_OBJECT_I = 99;\n@@ -35,1 +35,1 @@\n-    private static final long serialVersionUID=5748652654655279289L;\n+    private static final long serialVersionUID = 5748652654655279289L;\n","filename":"test\/jdk\/java\/io\/Serializable\/defaulted\/GetFieldRead.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,2 +65,1 @@\n-        out.writeObject(new TestClass(new Foo(100, 200), new Integer(100),\n-            200));\n+        out.writeObject(new TestClass(new Foo(100, 200), 100, 200));\n@@ -75,0 +74,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/defaulted\/GetFieldWrite.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-        Class[] classes = { Enum.class, Foo.foo.getClass(),\n+        Class<?>[] classes = { Enum.class, Foo.foo.getClass(),\n","filename":"test\/jdk\/java\/io\/Serializable\/enum\/classObject\/Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+        @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -45,0 +46,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -46,0 +48,2 @@\n+\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -53,1 +57,1 @@\n-        Class[] classes =\n+        Class<?>[] classes =\n","filename":"test\/jdk\/java\/io\/Serializable\/enum\/ignoreSerializationFields\/Test.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+        @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -39,0 +40,1 @@\n+        @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -44,0 +46,1 @@\n+        @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -53,0 +56,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect use is being tested *\/\n@@ -56,0 +60,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect use is being tested *\/\n@@ -61,0 +66,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect use is being tested *\/\n","filename":"test\/jdk\/java\/io\/Serializable\/enum\/ignoreSerializationMethods\/Test.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-        oout.writeObject(new Integer(5));\n+        oout.writeObject(5);\n","filename":"test\/jdk\/java\/io\/Serializable\/enum\/mismatchedTypecode\/Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/evolution\/AddedExternField\/ReadAddedField.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -63,0 +65,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/evolution\/AddedExternField\/WriteAddedField.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 1999, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-    private static long serialVersionUID = 4L;\n+    private static final long serialVersionUID = 3L;\n","filename":"test\/jdk\/java\/io\/Serializable\/evolution\/AddedField\/ReadAddedField.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 1999, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -48,1 +50,1 @@\n-    private static long serialVersionUID = 3L;\n+    private static final long serialVersionUID = 3L;\n@@ -52,0 +54,1 @@\n+@SuppressWarnings(\"serial\") \/* Incorrect use is being tested *\/\n@@ -53,0 +56,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/evolution\/AddedField\/WriteAddedField.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/evolution\/AddedSuperClass\/ReadAddedSuperClass2.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/evolution\/AddedSuperClass\/WriteAddedSuperClass.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+@SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -48,0 +49,1 @@\n+    private static final long serialVersionUID = 1L;\n@@ -70,1 +72,1 @@\n-            (SerializableObject) osc.forClass().newInstance();\n+            (SerializableObject) osc.forClass().getConstructor().newInstance();\n","filename":"test\/jdk\/java\/io\/Serializable\/expectedStackTrace\/ExpectedStackTrace.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -42,0 +44,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/explicitCNFException\/ExplicitCNFException.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-    static final long serialVersionUID = -0L;\n+    private static final long serialVersionUID = -0L;\n","filename":"test\/jdk\/java\/io\/Serializable\/failureAtomicity\/Bar.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-    static final long serialVersionUID = -0L;\n+    private static final long serialVersionUID = -0L;\n","filename":"test\/jdk\/java\/io\/Serializable\/failureAtomicity\/Foo.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-    static final long serialVersionUID = -0L;\n+    private static final long serialVersionUID = -0L;\n@@ -36,0 +36,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n","filename":"test\/jdk\/java\/io\/Serializable\/failureAtomicity\/SerialRef.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -62,1 +63,1 @@\n-        oout.writeObject(new Foo(new Integer(0)));\n+        oout.writeObject(new Foo(0));\n","filename":"test\/jdk\/java\/io\/Serializable\/fieldTypeString\/Write.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -44,0 +46,4 @@\n+\n+    public int hashCode() {\n+        return i;\n+    }\n@@ -71,0 +77,1 @@\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/finalFields\/FinalFields.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+@SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested. *\/\n@@ -44,0 +45,1 @@\n+@SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested. *\/\n@@ -47,0 +49,1 @@\n+@SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested. *\/\n@@ -51,0 +54,1 @@\n+@SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested. *\/\n@@ -54,0 +58,1 @@\n+@SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested. *\/\n@@ -58,0 +63,1 @@\n+@SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested. *\/\n@@ -61,0 +67,1 @@\n+@SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested. *\/\n@@ -67,1 +74,1 @@\n-        Class cl = Class.forName(\n+        Class<?> cl = Class.forName(\n@@ -86,1 +93,1 @@\n-        Class[] cls = new Class[] {\n+        Class<?>[] cls = {\n","filename":"test\/jdk\/java\/io\/Serializable\/getSuidClinitError\/GetSuidClinitError.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -37,0 +38,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n","filename":"test\/jdk\/java\/io\/Serializable\/lookupInterfaceDesc\/LookupInterfaceDesc.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/misplacedArrayClassDesc\/MisplacedArrayClassDesc.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/modifyStaticFields\/ModifyStaticFields.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -44,0 +46,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -50,0 +54,1 @@\n+    private static final long serialVersionUID = 1L;\n@@ -64,0 +69,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/nestedReplace\/NestedReplace.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+     private static final long serialVersionUID = 1L;\n@@ -37,1 +38,1 @@\n-         private double radius;\n+     private double radius;\n","filename":"test\/jdk\/java\/io\/Serializable\/noSuchFieldClarification\/NoSuchFieldClarification.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,0 +79,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/notAvailable\/NotAvailable.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,1 +105,1 @@\n-    protected void annotateClass(Class cl) throws IOException {\n+    protected void annotateClass(Class<?> cl) throws IOException {\n@@ -115,1 +115,0 @@\n-        throws IOException\n@@ -172,0 +171,1 @@\n+    private static final long serialVersionUID = 1L;\n","filename":"test\/jdk\/java\/io\/Serializable\/oldTests\/AnnotateClass.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/oldTests\/ArrayTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,2 @@\n-            byte b[][] = {{ 0, 1}, {2,3}};\n-            p.writeObject((Object)b);\n+            byte[][] b = {{ 0, 1}, {2,3}};\n+            p.writeObject(b);\n@@ -48,2 +48,2 @@\n-            short s[][] = {{ 0, 1, 2}, {3,4,5}};\n-            p.writeObject((Object)s);\n+            short[][] s = {{ 0, 1, 2}, {3,4,5}};\n+            p.writeObject(s);\n@@ -51,2 +51,2 @@\n-            char c[][] = {{ 0, 1, 2, 3}, {4, 5, 6, 7}};\n-            p.writeObject((Object)c);\n+            char[][] c = {{ 0, 1, 2, 3}, {4, 5, 6, 7}};\n+            p.writeObject(c);\n@@ -54,2 +54,2 @@\n-            int i[][] = {{ 0, 1, 2, 3, 4}, {5, 6, 7, 8, 9}};\n-            p.writeObject((Object)i);\n+            int[][] i = {{ 0, 1, 2, 3, 4}, {5, 6, 7, 8, 9}};\n+            p.writeObject(i);\n@@ -57,1 +57,1 @@\n-            long l[][] = {{ 0, 1, 2, 3, 4, 5}, {6,7,8,9,10,11}};\n+            long[][] l = {{ 0, 1, 2, 3, 4, 5}, {6,7,8,9,10,11}};\n@@ -60,1 +60,1 @@\n-            boolean z[][] = new boolean[2][2];\n+            boolean[][] z = new boolean[2][2];\n@@ -66,1 +66,1 @@\n-            p.writeObject((Object)z);\n+            p.writeObject(z);\n@@ -68,1 +68,1 @@\n-            float f[][] = {{ 1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f},\n+            float[][] f = {{ 1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f},\n@@ -70,1 +70,1 @@\n-            p.writeObject((Object)f);\n+            p.writeObject(f);\n@@ -72,1 +72,1 @@\n-            double d[][] = {{ 1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0d},\n+            double[][] d = {{ 1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f, 7.0d},\n@@ -74,1 +74,1 @@\n-            p.writeObject((Object)d);\n+            p.writeObject(d);\n@@ -76,3 +76,3 @@\n-            Integer Int[][] = {{ new Integer(3), new Integer(2)},\n-                { new Integer(1), new Integer(0)}};\n-            p.writeObject((Object)Int);\n+            Integer Int[][] = {{ 3, 2},\n+                               { 1, 0}};\n+            p.writeObject(Int);\n@@ -87,1 +87,1 @@\n-            byte b_u[][] = (byte [][]) (q.readObject());\n+            byte[][] b_u = (byte [][]) (q.readObject());\n@@ -92,1 +92,1 @@\n-                            ix + \"][\" + iy + \" expected \" + b[ix][iy] +\n+                            ix + \"][\" + iy + \"] expected \" + b[ix][iy] +\n@@ -100,4 +100,4 @@\n-            short s_u[][] = (short [][])(q.readObject());\n-            for (int ix = 0; ix < b_u.length; ix++) {\n-                for(int iy = 0; iy < b_u[ix].length; iy++) {\n-                    if (b[ix][iy] != b_u[ix][iy]) {\n+            short[][] s_u = (short [][])(q.readObject());\n+            for (int ix = 0; ix < s_u.length; ix++) {\n+                for(int iy = 0; iy < s_u[ix].length; iy++) {\n+                    if (s[ix][iy] != s_u[ix][iy]) {\n@@ -105,2 +105,2 @@\n-                            ix + \"][\" + iy + \" expected \" + b[ix][iy] +\n-                            \" actual = \" + b_u[ix][iy]);\n+                            ix + \"][\" + iy + \"] expected \" + s[ix][iy] +\n+                            \" actual = \" + s_u[ix][iy]);\n@@ -112,4 +112,4 @@\n-            char c_u[][] = (char [][])(q.readObject());\n-            for (int ix = 0; ix < b_u.length; ix++) {\n-                for(int iy = 0; iy < b_u[ix].length; iy++) {\n-                    if (b[ix][iy] != b_u[ix][iy]) {\n+            char[][] c_u = (char [][])(q.readObject());\n+            for (int ix = 0; ix < c_u.length; ix++) {\n+                for(int iy = 0; iy < c_u[ix].length; iy++) {\n+                    if (c[ix][iy] != c_u[ix][iy]) {\n@@ -117,2 +117,2 @@\n-                            ix + \"][\" + iy + \" expected \" + b[ix][iy] +\n-                            \" actual = \" + b_u[ix][iy]);\n+                            ix + \"][\" + iy + \"] expected \" + c[ix][iy] +\n+                            \" actual = \" + c_u[ix][iy]);\n@@ -124,4 +124,4 @@\n-            int i_u[][] = (int [][])(q.readObject());\n-            for (int ix = 0; ix < b_u.length; ix++) {\n-                for(int iy = 0; iy < b_u[ix].length; iy++) {\n-                    if (b[ix][iy] != b_u[ix][iy]) {\n+            int[][] i_u = (int [][])(q.readObject());\n+            for (int ix = 0; ix < i_u.length; ix++) {\n+                for(int iy = 0; iy < i_u[ix].length; iy++) {\n+                    if (i[ix][iy] != i_u[ix][iy]) {\n@@ -129,2 +129,2 @@\n-                            ix + \"][\" + iy + \" expected \" + b[ix][iy] +\n-                            \" actual = \" + b_u[ix][iy]);\n+                            ix + \"][\" + iy + \"] expected \" + i[ix][iy] +\n+                            \" actual = \" + i_u[ix][iy]);\n@@ -136,4 +136,4 @@\n-            long l_u[][] = (long [][])(q.readObject());\n-            for (int ix = 0; ix < b_u.length; ix++) {\n-                for(int iy = 0; iy < b_u[ix].length; iy++) {\n-                    if (b[ix][iy] != b_u[ix][iy]) {\n+            long[][] l_u = (long [][])(q.readObject());\n+            for (int ix = 0; ix < l_u.length; ix++) {\n+                for(int iy = 0; iy < l_u[ix].length; iy++) {\n+                    if (l[ix][iy] != l_u[ix][iy]) {\n@@ -141,2 +141,2 @@\n-                            ix + \"][\" + iy + \" expected \" + b[ix][iy] +\n-                            \" actual = \" + b_u[ix][iy]);\n+                            ix + \"][\" + iy + \"] expected \" + l[ix][iy] +\n+                            \" actual = \" + l_u[ix][iy]);\n@@ -148,4 +148,4 @@\n-            boolean z_u[][] = (boolean [][])(q.readObject());\n-            for (int ix = 0; ix < b_u.length; ix++) {\n-                for(int iy = 0; iy < b_u[ix].length; iy++) {\n-                    if (b[ix][iy] != b_u[ix][iy]) {\n+            boolean[][] z_u = (boolean [][])(q.readObject());\n+            for (int ix = 0; ix < z_u.length; ix++) {\n+                for(int iy = 0; iy < z_u[ix].length; iy++) {\n+                    if (z[ix][iy] != z_u[ix][iy]) {\n@@ -153,2 +153,2 @@\n-                            ix + \"][\" + iy + \" expected \" + b[ix][iy] +\n-                            \" actual = \" + b_u[ix][iy]);\n+                            ix + \"][\" + iy + \"] expected \" + z[ix][iy] +\n+                            \" actual = \" + z_u[ix][iy]);\n@@ -160,4 +160,4 @@\n-            float f_u[][] = (float [][])(q.readObject());\n-            for (int ix = 0; ix < b_u.length; ix++) {\n-                for(int iy = 0; iy < b_u[ix].length; iy++) {\n-                    if (b[ix][iy] != b_u[ix][iy]) {\n+            float[][] f_u = (float [][])(q.readObject());\n+            for (int ix = 0; ix < f_u.length; ix++) {\n+                for(int iy = 0; iy < f_u[ix].length; iy++) {\n+                    if (f[ix][iy] != f_u[ix][iy]) {\n@@ -165,2 +165,2 @@\n-                            ix + \"][\" + iy + \" expected \" + b[ix][iy] +\n-                            \" actual = \" + b_u[ix][iy]);\n+                            ix + \"][\" + iy + \"] expected \" + f[ix][iy] +\n+                            \" actual = \" + f_u[ix][iy]);\n@@ -172,4 +172,4 @@\n-            double d_u[][] = (double [][])(q.readObject());\n-            for (int ix = 0; ix < b_u.length; ix++) {\n-                for(int iy = 0; iy < b_u[ix].length; iy++) {\n-                    if (b[ix][iy] != b_u[ix][iy]) {\n+            double[][] d_u = (double [][])(q.readObject());\n+            for (int ix = 0; ix < d_u.length; ix++) {\n+                for(int iy = 0; iy < d_u[ix].length; iy++) {\n+                    if (d[ix][iy] != d_u[ix][iy]) {\n@@ -177,2 +177,2 @@\n-                            ix + \"][\" + iy + \" expected \" + b[ix][iy] +\n-                            \" actual = \" + b_u[ix][iy]);\n+                            ix + \"][\" + iy + \"] expected \" + d[ix][iy] +\n+                            \" actual = \" + d_u[ix][iy]);\n@@ -184,4 +184,4 @@\n-            Integer Int_u[][] = (Integer [][])(q.readObject());\n-            for (int ix = 0; ix < b_u.length; ix++) {\n-                for(int iy = 0; iy < b_u[ix].length; iy++) {\n-                    if (b[ix][iy] != b_u[ix][iy]) {\n+            Integer[][] Int_u = (Integer [][])(q.readObject());\n+            for (int ix = 0; ix < Int_u.length; ix++) {\n+                for(int iy = 0; iy < Int_u[ix].length; iy++) {\n+                    if (!Int[ix][iy].equals(Int_u[ix][iy])) {\n@@ -189,2 +189,2 @@\n-                            ix + \"][\" + iy + \" expected \" + b[ix][iy] +\n-                            \" actual = \" + b_u[ix][iy]);\n+                            ix + \"][\" + iy + \"] expected \" + Int[ix][iy] +\n+                            \" actual = \" + Int_u[ix][iy]);\n","filename":"test\/jdk\/java\/io\/Serializable\/oldTests\/ArraysOfArrays.java","additions":69,"deletions":69,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,0 +78,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/oldTests\/BinaryTree.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -108,0 +108,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -132,0 +134,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -146,0 +150,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/oldTests\/CheckForException.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -86,0 +86,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -128,0 +130,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -176,0 +180,1 @@\n+    private static final long serialVersionUID = 1L;\n@@ -187,1 +192,2 @@\n-    java.util.Enumeration zero;\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n+    java.util.Enumeration<?> zero;\n@@ -230,1 +236,1 @@\n-        java.util.Enumeration em = null; \/* default *\/\n+        java.util.Enumeration<?> em = null; \/* default *\/\n","filename":"test\/jdk\/java\/io\/Serializable\/oldTests\/CheckingEquality.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,0 +71,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/oldTests\/CircularList.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/oldTests\/PrimitivesTest.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-            if (vc_u.validated != Integer.MIN_VALUE) {\n+            if (Validator.validated != Integer.MIN_VALUE) {\n@@ -83,0 +83,1 @@\n+    private static final long serialVersionUID = 1L;\n@@ -91,0 +92,1 @@\n+    private static final long serialVersionUID = 1L;\n@@ -100,0 +102,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/oldTests\/ValidateClass.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -43,1 +45,1 @@\n-            out.writeObject(new Integer(i));\n+            out.writeObject(i);\n","filename":"test\/jdk\/java\/io\/Serializable\/optionalDataEnd\/OptionalDataEnd.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/packageAccess\/B.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/packageAccess\/C.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+    private static final long serialVersionUID = 1L;\n","filename":"test\/jdk\/java\/io\/Serializable\/packageAccess\/D.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,2 +53,2 @@\n-    static Class bcl;\n-    static Class dcl;\n+    static Class<?> bcl;\n+    static Class<?> dcl;\n@@ -65,1 +65,1 @@\n-            Object b = bcl.newInstance();\n+            Object b = bcl.getConstructor().newInstance();\n@@ -77,1 +77,1 @@\n-            Object d = dcl.newInstance();\n+            Object d = dcl.getConstructor().newInstance();\n@@ -106,1 +106,1 @@\n-    protected Class resolveClass(ObjectStreamClass desc)\n+    protected Class<?> resolveClass(ObjectStreamClass desc)\n","filename":"test\/jdk\/java\/io\/Serializable\/packageAccess\/PackageAccessTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/parents\/EvolvedClass.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,0 +62,2 @@\n+    private static final long serialVersionUID = 6341246181948372513L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/parents\/OriginalClass.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-        Class cl = Class.forName(\n+        Class<?> cl = Class.forName(\n","filename":"test\/jdk\/java\/io\/Serializable\/partialClassDesc\/PartialClassDesc.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-        Class[] primClasses = new Class[] {\n+        Class<?>[] primClasses = {\n","filename":"test\/jdk\/java\/io\/Serializable\/primitiveClasses\/PrimitiveClasses.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+    private static final long serialVersionUID = 1L;\n@@ -43,2 +44,2 @@\n-            fooMethod = Foo.class.getDeclaredMethod(\"foo\", new Class[0]);\n-            barMethod = Bar.class.getDeclaredMethod(\"bar\", new Class[0]);\n+            fooMethod = Foo.class.getDeclaredMethod(\"foo\", new Class<?>[0]);\n+            barMethod = Bar.class.getDeclaredMethod(\"bar\", new Class<?>[0]);\n@@ -62,1 +63,1 @@\n-            return new Integer(foo);\n+            return foo;\n@@ -64,1 +65,1 @@\n-            return new Float(bar);\n+            return bar;\n@@ -76,1 +77,1 @@\n-    protected Class resolveProxyClass(String[] interfaces)\n+    protected Class<?> resolveProxyClass(String[] interfaces)\n@@ -86,1 +87,1 @@\n-        Class[] interfaces = new Class[] { Foo.class, Bar.class };\n+        Class<?>[] interfaces = { Foo.class, Bar.class };\n","filename":"test\/jdk\/java\/io\/Serializable\/proxy\/Basic.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+    private static final long serialVersionUID = 1L;\n@@ -42,1 +43,1 @@\n-                loader, new Class[] { ReadResolve.class }, this);\n+                loader, new Class<?>[] { ReadResolve.class }, this);\n@@ -45,1 +46,1 @@\n-                loader, new Class[] { Resolved.class }, this);\n+                loader, new Class<?>[] { Resolved.class }, this);\n@@ -57,1 +58,1 @@\n-            loader, new Class[] { WriteReplace.class }, new Test()));\n+            loader, new Class<?>[] { WriteReplace.class }, new Test()));\n","filename":"test\/jdk\/java\/io\/Serializable\/proxy\/replace\/Test.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/proxy\/skipMissing\/Handler.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -68,1 +69,1 @@\n-            new Class[] { I.class }, new Handler());\n+            new Class<?>[] { I.class }, new Handler());\n","filename":"test\/jdk\/java\/io\/Serializable\/proxy\/skipMissing\/Write.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -85,0 +86,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n","filename":"test\/jdk\/java\/io\/Serializable\/readObjectNoData\/Read.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-        Class fooCl = Class.forName(\"Foo\", false, Test.class.getClassLoader());\n+        Class<?> fooCl = Class.forName(\"Foo\", false, Test.class.getClassLoader());\n","filename":"test\/jdk\/java\/io\/Serializable\/recursiveClassDescLookup\/Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -77,1 +79,1 @@\n-            Class arrayComponentType = array.getClass().getComponentType();\n+            Class<?> arrayComponentType = array.getClass().getComponentType();\n@@ -111,1 +113,1 @@\n-            Class arrayComponentType = array.getClass().getComponentType();\n+            Class<?> arrayComponentType = array.getClass().getComponentType();\n","filename":"test\/jdk\/java\/io\/Serializable\/replaceStringArray\/ReplaceStringArray.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -36,1 +38,1 @@\n-            \"readObject\", new Class[0]);\n+            \"readObject\", new Class<?>[0]);\n","filename":"test\/jdk\/java\/io\/Serializable\/resolveClass\/MethodTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -46,2 +48,1 @@\n-        Constructor cons = Boot.class.getConstructor(\n-            new Class[] { ObjectInputStream.class });\n+        Constructor<?> cons = Boot.class.getConstructor(ObjectInputStream.class);\n@@ -56,1 +57,1 @@\n-            cons.newInstance(new Object[]{ oin });\n+            cons.newInstance(oin);\n","filename":"test\/jdk\/java\/io\/Serializable\/resolveClass\/consTest\/ConsTest.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,2 @@\n-            Runnable r = (Runnable) Class.forName(\"Foo\", true, ldr).newInstance();\n+            Runnable r = (Runnable) Class.forName(\"Foo\", true, ldr)\n+                    .getConstructor().newInstance();\n","filename":"test\/jdk\/java\/io\/Serializable\/resolveClass\/deserializeButton\/DeserializeButtonTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,3 @@\n-    static class TestElement extends Object implements Serializable {}\n+    static class TestElement extends Object implements Serializable {\n+        private static final long serialVersionUID = 1L;\n+    }\n","filename":"test\/jdk\/java\/io\/Serializable\/resolveClass\/deserializeButton\/Foo.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,2 +40,2 @@\n-    protected Class resolveClass(ObjectStreamClass desc)\n-        throws IOException, ClassNotFoundException\n+    protected Class<?> resolveClass(ObjectStreamClass desc)\n+        throws ClassNotFoundException\n@@ -56,1 +56,1 @@\n-        obj = new Integer(5);\n+        obj = 5;\n@@ -70,1 +70,1 @@\n-        obj = new Integer[] { new Integer(5) };\n+        obj = new Integer[] { 5 };\n","filename":"test\/jdk\/java\/io\/Serializable\/resolveClassException\/ResolveClassException.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,2 @@\n+        private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/resolveProxyClass\/NonPublicInterface.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+    private static final long serialVersionUID = 1L;\n@@ -58,0 +59,1 @@\n+    @SuppressWarnings(\"serial\")  \/* Incorrect declarations are being tested *\/\n@@ -89,1 +91,1 @@\n-            oary[i] = new Integer(rand.nextInt());\n+            oary[i] = rand.nextInt();\n@@ -129,0 +131,5 @@\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(i, j);\n+    }\n","filename":"test\/jdk\/java\/io\/Serializable\/sanityCheck\/SanityCheck.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -778,0 +778,1 @@\n+        @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n","filename":"test\/jdk\/java\/io\/Serializable\/serialFilter\/SerialFilterTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+    private static final long serialVersionUID = 1L;\n","filename":"test\/jdk\/java\/io\/Serializable\/serialver\/classpath\/ClasspathTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -49,0 +51,2 @@\n+        private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/serialver\/nested\/NestedTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -62,0 +64,4 @@\n+\n+    public int hashCode() {\n+        return i;\n+    }\n@@ -65,0 +71,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -94,0 +102,4 @@\n+\n+    public int hashCode() {\n+        return i;\n+    }\n@@ -97,0 +109,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -111,0 +125,4 @@\n+\n+    public int hashCode() {\n+        return s.hashCode();\n+    }\n","filename":"test\/jdk\/java\/io\/Serializable\/skipToEndOfBlockData\/SkipToEndOfBlockData.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/skipWriteObject\/Write.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n","filename":"test\/jdk\/java\/io\/Serializable\/skippedObjCNFException\/Read.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n@@ -51,0 +52,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n","filename":"test\/jdk\/java\/io\/Serializable\/skippedObjCNFException\/Write.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n","filename":"test\/jdk\/java\/io\/Serializable\/stopCustomDeserialization\/Read.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect declarations are being tested *\/\n","filename":"test\/jdk\/java\/io\/Serializable\/stopCustomDeserialization\/Write.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -256,1 +256,1 @@\n-        allocateNewObject(Class ofClass, Class ctorClass)\n+        allocateNewObject(Class<?> ofClass, Class<?> ctorClass)\n@@ -274,1 +274,1 @@\n-        allocateNewArray(Class componentClass, int length)\n+        allocateNewArray(Class<?> componentClass, int length)\n@@ -320,0 +320,1 @@\n+    @SuppressWarnings(\"deprecation\")\n","filename":"test\/jdk\/java\/io\/Serializable\/subclass\/AbstractObjectInputStream.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,0 +60,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -83,0 +85,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -85,1 +89,1 @@\n-    static final ObjectStreamField[] serialPersistentFields = {\n+    private static final ObjectStreamField[] serialPersistentFields = {\n@@ -109,0 +113,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/subclass\/SubclassTest.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-        Class  prevDesc   = currentClassDescriptor;\n+        Class<?>  prevDesc   = currentClassDescriptor;\n@@ -246,1 +246,1 @@\n-    private Class currentClassDescriptor;\n+    private Class<?> currentClassDescriptor;\n@@ -259,1 +259,1 @@\n-    public static Method getReadObjectMethod(final Class cl) {\n+    public static Method getReadObjectMethod(final Class<?> cl) {\n@@ -261,1 +261,1 @@\n-        Method readObjectMethod = (Method)\n+        Method readObjectMethod =\n@@ -263,2 +263,2 @@\n-            (new java.security.PrivilegedAction() {\n-                public Object run() {\n+            (new java.security.PrivilegedAction<Method>() {\n+                public Method run() {\n@@ -267,1 +267,1 @@\n-                        Class[] args = {ObjectInputStream.class};\n+                        Class<?>[] args = {ObjectInputStream.class};\n@@ -295,2 +295,2 @@\n-                (new java.security.PrivilegedExceptionAction() {\n-                    public Object run() throws InvocationTargetException,\n+                (new java.security.PrivilegedExceptionAction<Void>() {\n+                    public Void run() throws InvocationTargetException,\n","filename":"test\/jdk\/java\/io\/Serializable\/subclass\/XObjectInputStream.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,1 +119,1 @@\n-            Class FieldType = fields[i].getType();\n+            Class<?> FieldType = fields[i].getType();\n@@ -130,1 +130,1 @@\n-                        Class componentType = FieldType.getComponentType();\n+                        Class<?> componentType = FieldType.getComponentType();\n@@ -230,0 +230,1 @@\n+        @SuppressWarnings(\"deprecation\")\n@@ -303,1 +304,1 @@\n-    public static Method getWriteObjectMethod(final Class cl) {\n+    public static Method getWriteObjectMethod(final Class<?> cl) {\n@@ -305,1 +306,1 @@\n-        Method writeObjectMethod = (Method)\n+        Method writeObjectMethod =\n@@ -307,2 +308,2 @@\n-            (new java.security.PrivilegedAction() {\n-                public Object run() {\n+            (new java.security.PrivilegedAction<Method>() {\n+                public Method run() {\n@@ -311,1 +312,1 @@\n-                        Class[] args = {ObjectOutputStream.class};\n+                        Class<?>[] args = {ObjectOutputStream.class};\n@@ -339,2 +340,2 @@\n-                (new java.security.PrivilegedExceptionAction() {\n-                    public Object run() throws InvocationTargetException,\n+                (new java.security.PrivilegedExceptionAction<Void>() {\n+                    public Void run() throws InvocationTargetException,\n","filename":"test\/jdk\/java\/io\/Serializable\/subclass\/XObjectOutputStream.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/superclassDataLoss\/A.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/superclassDataLoss\/B.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-    protected Class resolveClass(ObjectStreamClass desc)\n+    protected Class<?> resolveClass(ObjectStreamClass desc)\n@@ -94,1 +94,2 @@\n-            Runnable a = (Runnable) Class.forName(\"B\", true, ldr1).newInstance();\n+            Runnable a = (Runnable) Class.forName(\"B\", true, ldr1)\n+                    .getConstructor().newInstance();\n","filename":"test\/jdk\/java\/io\/Serializable\/superclassDataLoss\/SuperclassDataLossTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+    private static final long serialVersionUID = 1L;\n@@ -52,0 +53,1 @@\n+    private static final long serialVersionUID = 1L;\n","filename":"test\/jdk\/java\/io\/Serializable\/survivePrematureClose\/SurvivePrematureClose.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -50,1 +52,1 @@\n-    private Object writeReplace() throws IOException {\n+    private Object writeReplace() {\n@@ -59,1 +61,1 @@\n-    private Object readResolve() throws IOException {\n+    private Object readResolve() {\n","filename":"test\/jdk\/java\/io\/Serializable\/typeSafeEnum\/TypeSafeEnum.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+    private static final long serialVersionUID = 1L;\n","filename":"test\/jdk\/java\/io\/Serializable\/typeStringBackRef\/TypeStringBackRef.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+    private static final long serialVersionUID = 1L;\n","filename":"test\/jdk\/java\/io\/Serializable\/underlyingOutputStreamException\/UnderlyingOutputStreamException.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-    protected Class resolveClass(ObjectStreamClass desc)\n+    protected Class<?> resolveClass(ObjectStreamClass desc)\n","filename":"test\/jdk\/java\/io\/Serializable\/unnamedPackageSwitch\/UnnamedPackageSwitchTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,0 +68,1 @@\n+    private static final long serialVersionUID = 1L;\n","filename":"test\/jdk\/java\/io\/Serializable\/unresolvableObjectStreamClass\/UnresolvableObjectStreamClass.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+    private static final long serialVersionUID = 1L;\n","filename":"test\/jdk\/java\/io\/Serializable\/unresolvedClassDesc\/Foo.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n@@ -57,0 +59,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect use is being tested *\/\n","filename":"test\/jdk\/java\/io\/Serializable\/unshared\/Write.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+    private static final long serialVersionUID = 1L;\n","filename":"test\/jdk\/java\/io\/Serializable\/userRWObjError\/UserRWObjError.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,0 +76,2 @@\n+    private static final long serialVersionUID = 1L;\n+\n","filename":"test\/jdk\/java\/io\/Serializable\/validate\/Validate.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,3 @@\n-    static HashSet writeObjectExtent = new HashSet();\n+    private static final long serialVersionUID = 1L;\n+\n+    static HashSet<A> writeObjectExtent = new HashSet<>();\n@@ -66,1 +68,1 @@\n-        Iterator iter = A.writeObjectExtent.iterator();\n+        Iterator<A> iter = A.writeObjectExtent.iterator();\n","filename":"test\/jdk\/java\/io\/Serializable\/verifyDynamicObjHandleTable\/VerifyDynamicObjHandleTable.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,3 @@\n-    static HashSet writeObjectExtent = new HashSet();\n+    private static final long serialVersionUID = 1L;\n+\n+    static HashSet<A>writeObjectExtent = new HashSet<>();\n@@ -56,1 +58,1 @@\n-        throws IOException, ClassNotFoundException\n+        throws IOException\n@@ -68,1 +70,1 @@\n-        Iterator iter = A.writeObjectExtent.iterator();\n+        Iterator<A> iter = A.writeObjectExtent.iterator();\n","filename":"test\/jdk\/java\/io\/Serializable\/writeObjectMemory\/WriteObjectMemory.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,3 @@\n+        private static final long serialVersionUID = 1L;\n+\n+        @SuppressWarnings(\"serial\") \/* Incorrect use is being tested *\/\n","filename":"test\/jdk\/java\/io\/Serializable\/writeReplace\/WriteReplace.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect use is being tested *\/\n@@ -49,0 +50,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect use is being tested *\/\n@@ -57,0 +59,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect use is being tested *\/\n","filename":"test\/jdk\/java\/io\/Serializable\/wrongReturnTypes\/Read.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect use is being tested *\/\n@@ -52,0 +53,1 @@\n+    @SuppressWarnings(\"serial\") \/* Incorrect use is being tested *\/\n","filename":"test\/jdk\/java\/io\/Serializable\/wrongReturnTypes\/Write.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}