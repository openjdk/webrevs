{"files":[{"patch":"@@ -85,0 +85,3 @@\n+        if (format == null || encoded == null || encoded.length == 0) {\n+            throw new InvalidKeyException(\"Missing key encoding\");\n+        }\n@@ -157,4 +160,0 @@\n-        if (encoded == null || encoded.length == 0) {\n-            throw new InvalidKeyException(\"Missing key encoding\");\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAPrivateCrtKeyImpl.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8335803\n+ * @summary Test the Cipher.init methods to handle un-extractable RSA key\n+ * @run main\/othervm InvalidKeyExceptionTest ENCRYPT_MODE\n+ * @run main\/othervm InvalidKeyExceptionTest DECRYPT_MODE\n+ * @author Alexey Bakhtin\n+ *\/\n+\n+import java.security.InvalidKeyException;\n+import java.security.PrivateKey;\n+import javax.crypto.Cipher;\n+\n+public class InvalidKeyExceptionTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length != 1) {\n+            throw new Exception(\"Encryption mode required\");\n+        }\n+\n+        int mode = 0;\n+        switch(args[0]) {\n+            case \"ENCRYPT_MODE\":\n+                mode = Cipher.ENCRYPT_MODE;\n+                break;\n+            case \"DECRYPT_MODE\":\n+                mode = Cipher.DECRYPT_MODE;\n+                break;\n+        }\n+\n+        Cipher c = Cipher.getInstance(\"RSA\/ECB\/PKCS1Padding\", \"SunJCE\");\n+        try {\n+            c.init(mode, new PrivateKey() {\n+                @Override\n+                public String getAlgorithm() {\n+                return \"RSA\";\n+                }\n+                @Override\n+                public String getFormat() {\n+                    return null;\n+                }\n+                @Override\n+                public byte[] getEncoded() {\n+                    return null;\n+                }\n+            });\n+        } catch (InvalidKeyException ike) {\n+            \/\/ expected exception\n+            return;\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Unexpected exception: \" + e);\n+        }\n+        new RuntimeException(\"InvalidKeyException should be thown\");\n+    }\n+}\n","filename":"test\/jdk\/javax\/crypto\/Cipher\/InvalidKeyExceptionTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"}]}