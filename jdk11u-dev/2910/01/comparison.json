{"files":[{"patch":"@@ -26,0 +26,1 @@\n+ * @library \/test\/lib\n@@ -55,0 +56,2 @@\n+import jdk.test.lib.net.IPSupport;\n+\n@@ -112,0 +115,1 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n","filename":"test\/jdk\/java\/net\/DatagramSocket\/UnreferencedDatagramSockets.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8220673\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.net.IPSupport\n+ * @summary Ensure IPSupport works under a security manager.\n+ * @run main\/othervm\/policy=MinimumPermissions.policy MinimumPermissions\n+ *\/\n+\n+import jdk.test.lib.net.IPSupport;\n+\n+public class MinimumPermissions {\n+    public static void main(String[] args) {\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/net\/IPSupport\/MinimumPermissions.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -0,0 +1,28 @@\n+\/\/\n+\/\/ Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\/\/\n+\/\/ This code is free software; you can redistribute it and\/or modify it\n+\/\/ under the terms of the GNU General Public License version 2 only, as\n+\/\/ published by the Free Software Foundation.\n+\/\/\n+\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n+\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+\/\/ version 2 for more details (a copy is included in the LICENSE file that\n+\/\/ accompanied this code).\n+\/\/\n+\/\/ You should have received a copy of the GNU General Public License version\n+\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n+\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\/\/\n+\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+\/\/ or visit www.oracle.com if you need additional information or have any\n+\/\/ questions.\n+\/\/\n+\n+grant codeBase \"file:${test.classes}\/..\/..\/..\/..\/test\/lib\/-\" {\n+    permission java.net.SocketPermission \"localhost:0\", \"listen,resolve\";\n+    permission java.util.PropertyPermission \"java.net.preferIPv4Stack\", \"read\";\n+};\n+\n","filename":"test\/jdk\/java\/net\/IPSupport\/MinimumPermissions.policy","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -30,0 +30,1 @@\n+ * @library \/test\/lib\n@@ -43,0 +44,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -45,14 +47,0 @@\n-    private static boolean hasIPv6() throws Exception {\n-        List<NetworkInterface> nics = Collections.list(NetworkInterface\n-                .getNetworkInterfaces());\n-        for (NetworkInterface nic : nics) {\n-            List<InetAddress> addrs = Collections.list(nic.getInetAddresses());\n-            for (InetAddress addr : addrs) {\n-                if (addr instanceof Inet6Address)\n-                    return true;\n-            }\n-        }\n-\n-        return false;\n-    }\n-\n@@ -63,0 +51,1 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n@@ -64,2 +53,0 @@\n-        boolean preferIPv4Stack = \"true\".equals(System\n-                .getProperty(\"java.net.preferIPv4Stack\"));\n@@ -67,1 +54,0 @@\n-        InetAddress inetAddress = null;\n@@ -69,5 +55,5 @@\n-        addrs.add(\"0.0.0.0\");\n-        if (!preferIPv4Stack) {\n-            if (hasIPv6()) {\n-                addrs.add(\"::0\");\n-            }\n+        if (IPSupport.hasIPv4()) {\n+            addrs.add(\"0.0.0.0\");\n+        }\n+        if (IPSupport.hasIPv6()) {\n+            addrs.add(\"::0\");\n@@ -77,1 +63,1 @@\n-            inetAddress = InetAddress.getByName(addr);\n+            InetAddress inetAddress = InetAddress.getByName(addr);\n","filename":"test\/jdk\/java\/net\/Inet4Address\/PingThis.java","additions":9,"deletions":23,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -41,0 +42,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -53,1 +55,0 @@\n-\n@@ -69,1 +70,1 @@\n-        out.println(\"IPv6 supported: \" + IPv6Supported());\n+        out.println(\"IPv6 supported: \" + IPSupport.hasIPv6());\n@@ -84,1 +85,1 @@\n-        } else if (preferIPV6Address.equalsIgnoreCase(\"system\") && IPv6Supported()) {\n+        } else if (preferIPV6Address.equalsIgnoreCase(\"system\") && IPSupport.hasIPv6()) {\n@@ -87,1 +88,1 @@\n-        } else if (preferIPV6Address.equalsIgnoreCase(\"system\") && !IPv6Supported()) {\n+        } else if (preferIPV6Address.equalsIgnoreCase(\"system\") && !IPSupport.hasIPv6()) {\n@@ -123,9 +124,0 @@\n-\n-    static boolean IPv6Supported() throws IOException {\n-        try {\n-            DatagramChannel.open(StandardProtocolFamily.INET6);\n-            return true;\n-        } catch (UnsupportedOperationException x) {\n-            return false;\n-        }\n-    }\n","filename":"test\/jdk\/java\/net\/Inet6Address\/PreferIPv6AddressesTest.java","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -41,0 +42,2 @@\n+import jdk.test.lib.net.IPSupport;\n+\n@@ -44,0 +47,1 @@\n+            IPSupport.throwSkippedExceptionIfNonOperational();\n","filename":"test\/jdk\/java\/net\/InetAddress\/GetLocalHostWithSM.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -45,0 +46,1 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n","filename":"test\/jdk\/java\/net\/MulticastSocket\/JoinLeave.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -31,0 +32,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -41,17 +43,0 @@\n-    private static boolean hasIPv6() throws Exception {\n-        List<NetworkInterface> nics = Collections.list(\n-                                        NetworkInterface.getNetworkInterfaces());\n-        for (NetworkInterface nic : nics) {\n-            if (!nic.isLoopback()) {\n-                List<InetAddress> addrs = Collections.list(nic.getInetAddresses());\n-                for (InetAddress addr : addrs) {\n-                    if (addr instanceof Inet6Address) {\n-                        return true;\n-                    }\n-                }\n-            }\n-        }\n-\n-        return false;\n-    }\n-\n@@ -64,5 +49,0 @@\n-        if (!hasIPv6()) {\n-            System.out.println(\"No IPv6 available. Bye.\");\n-            return;\n-        }\n-\n@@ -80,3 +60,10 @@\n-            groups.add(new InetSocketAddress(InetAddress.getByName(\"224.1.1.1\"), port));\n-            groups.add(new InetSocketAddress(InetAddress.getByName(\"::ffff:224.1.1.2\"), port));\n-            groups.add(new InetSocketAddress(InetAddress.getByName(\"ff02::1:1\"), port));\n+            if (IPSupport.hasIPv4()) {\n+                groups.add(new InetSocketAddress(InetAddress.getByName(\"224.1.1.1\"), port));\n+            }\n+            if (IPSupport.hasIPv6()) {\n+                groups.add(new InetSocketAddress(InetAddress.getByName(\"::ffff:224.1.1.2\"), port));\n+                groups.add(new InetSocketAddress(InetAddress.getByName(\"ff02::1:1\"), port));\n+            }\n+            if (groups.isEmpty()) {\n+                System.err.println(\"Nothing to test: there are no network interfaces\");\n+            }\n","filename":"test\/jdk\/java\/net\/MulticastSocket\/NoLoopbackPackets.java","additions":12,"deletions":25,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -173,0 +174,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/MulticastSocket\/Promiscuous.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -44,0 +45,1 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n","filename":"test\/jdk\/java\/net\/MulticastSocket\/SetGetNetworkInterfaceTest.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -161,0 +162,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/MulticastSocket\/Test.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @library \/test\/lib\n@@ -53,0 +54,2 @@\n+import jdk.test.lib.net.IPSupport;\n+\n@@ -107,0 +110,1 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n","filename":"test\/jdk\/java\/net\/MulticastSocket\/UnreferencedMulticastSockets.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @library \/lib\/testlibrary\/bootlib\n+ * @library \/lib\/testlibrary\/bootlib \/test\/lib\n@@ -33,0 +33,1 @@\n+import org.testng.annotations.BeforeTest;\n@@ -46,0 +47,2 @@\n+import jdk.test.lib.net.IPSupport;\n+\n@@ -50,0 +53,5 @@\n+    @BeforeTest\n+    void setup() {\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+    }\n+\n","filename":"test\/jdk\/java\/net\/NetworkInterface\/NetworkInterfaceStreamTest.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @library \/test\/lib\n@@ -33,0 +34,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -38,0 +40,1 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n","filename":"test\/jdk\/java\/net\/NetworkInterface\/Test.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -39,0 +40,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -84,1 +86,3 @@\n-        test(ServerSocketProducer.JAVA_NET, \"-Djava.net.preferIPv4Stack=true\");\n+        if (IPSupport.hasIPv4()) {\n+            test(ServerSocketProducer.JAVA_NET, \"-Djava.net.preferIPv4Stack=true\");\n+        }\n","filename":"test\/jdk\/java\/net\/ServerSocket\/AcceptInheritHandle.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @library \/test\/lib\n@@ -55,0 +56,2 @@\n+import jdk.test.lib.net.IPSupport;\n+\n@@ -110,0 +113,1 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n","filename":"test\/jdk\/java\/net\/ServerSocket\/UnreferencedSockets.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -34,0 +35,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -156,0 +158,1 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n","filename":"test\/jdk\/java\/net\/Socket\/AddressTest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -34,0 +35,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -38,0 +40,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/B6210227.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -34,1 +35,1 @@\n-\n+import jdk.test.lib.net.IPSupport;\n@@ -42,0 +43,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/CloseAvailable.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -35,0 +36,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -38,0 +40,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/DeadlockTest.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -35,0 +36,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -42,0 +44,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/GetLocalAddress.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -43,0 +44,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -51,0 +53,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/HttpProxy.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @library \/test\/lib\n@@ -36,0 +37,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -48,0 +50,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/InheritHandle.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -35,0 +36,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -95,0 +97,1 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n","filename":"test\/jdk\/java\/net\/Socket\/InheritTimeout.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -34,0 +35,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -108,0 +110,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/LingerTest.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -36,2 +37,0 @@\n-import jdk.test.lib.NetworkConfiguration;\n-\n@@ -42,0 +41,3 @@\n+import jdk.test.lib.NetworkConfiguration;\n+import jdk.test.lib.net.IPSupport;\n+\n@@ -123,0 +125,1 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n","filename":"test\/jdk\/java\/net\/Socket\/LinkLocal.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -33,0 +34,2 @@\n+import jdk.test.lib.net.IPSupport;\n+\n@@ -82,0 +85,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/ProxyCons.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+ * @test\n@@ -26,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -32,0 +34,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -82,0 +85,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/RST.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -34,0 +35,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -37,0 +39,2 @@\n+    IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/ReadTimeout.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -36,0 +37,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -40,0 +42,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/RejectIPv6.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -34,0 +35,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -39,0 +41,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/SetSoLinger.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -41,0 +42,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -46,0 +48,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/ShutdownInput.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -42,0 +43,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -51,0 +53,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/SocksConnectTimeout.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -35,0 +36,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -41,0 +43,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/TestAfterClose.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @library \/test\/lib\n@@ -34,0 +35,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -38,0 +40,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/TestClose.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -34,0 +35,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -38,0 +40,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/TestTcpNoDelay.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -33,0 +34,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -36,0 +38,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/Timeout.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -35,0 +36,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -64,0 +66,1 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n","filename":"test\/jdk\/java\/net\/Socket\/TrafficClass.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -34,0 +35,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -54,0 +56,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/UrgentDataTest.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -32,0 +33,1 @@\n+ * @library \/test\/lib\n@@ -41,0 +43,1 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n","filename":"test\/jdk\/java\/net\/Socket\/asyncClose\/AsyncClose.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -34,0 +35,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -56,0 +58,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/asyncClose\/BrokenPipe.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -39,0 +40,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -229,0 +231,1 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n","filename":"test\/jdk\/java\/net\/Socket\/setReuseAddress\/Basic.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -39,0 +40,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -50,0 +52,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/Socket\/setReuseAddress\/Restart.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -35,0 +36,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -64,0 +66,1 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n","filename":"test\/jdk\/java\/net\/SocketInputStream\/SocketClosedException.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -34,0 +35,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -39,0 +41,1 @@\n+    IPSupport.throwSkippedExceptionIfNonOperational();\n","filename":"test\/jdk\/java\/net\/SocketInputStream\/SocketTimeout.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -37,0 +38,2 @@\n+import jdk.test.lib.net.IPSupport;\n+\n@@ -44,0 +47,1 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n","filename":"test\/jdk\/java\/net\/SocketOption\/ImmutableOptions.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @library \/test\/lib\n@@ -33,0 +34,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -37,0 +39,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/SocketOption\/MinimumRcvBufferSize.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @library \/test\/lib\n@@ -36,0 +37,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -281,0 +283,1 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n","filename":"test\/jdk\/java\/net\/SocketOption\/OptionsTest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -32,0 +33,1 @@\n+ * @library \/test\/lib\n@@ -45,0 +47,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/SocketOption\/SupportedOptionsSet.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import jdk.test.lib.net.IPSupport;\n+\n@@ -33,0 +35,1 @@\n+ * @library \/test\/lib\n@@ -72,0 +75,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/net\/SocketOption\/UnsupportedOptionsTest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @library \/test\/lib\n@@ -35,0 +36,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -41,2 +43,4 @@\n-        try (DatagramChannel dc = DatagramChannel.open(StandardProtocolFamily.INET)) {\n-            dc.bind(null);\n+        if (IPSupport.hasIPv4()) {\n+            try (DatagramChannel dc = DatagramChannel.open(StandardProtocolFamily.INET)) {\n+                dc.bind(null);\n+            }\n@@ -44,4 +48,4 @@\n-        try (DatagramChannel dc = DatagramChannel.open(StandardProtocolFamily.INET6)) {\n-            dc.bind(null);\n-        } catch (UnsupportedOperationException uoe) {\n-            \/\/ IPv6 not available\n+        if (IPSupport.hasIPv6()) {\n+            try (DatagramChannel dc = DatagramChannel.open(StandardProtocolFamily.INET6)) {\n+                dc.bind(null);\n+            }\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/BindNull.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @library \/test\/lib\n@@ -36,0 +37,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -39,0 +41,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n@@ -45,4 +49,14 @@\n-        \/\/ test with IPv4 only\n-        try (DatagramChannel dc = DatagramChannel.open(StandardProtocolFamily.INET)) {\n-            test(dc);\n-            test(dc);\n+        if (IPSupport.hasIPv4()) {\n+            \/\/ test with IPv4 only\n+            try (DatagramChannel dc = DatagramChannel.open(StandardProtocolFamily.INET)) {\n+                test(dc);\n+                test(dc);\n+            }\n+        }\n+\n+        if (IPSupport.hasIPv6()) {\n+            \/\/ test with IPv6 only\n+            try (DatagramChannel dc = DatagramChannel.open(StandardProtocolFamily.INET6)) {\n+                test(dc);\n+                test(dc);\n+            }\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/Disconnect.java","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -242,0 +243,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/MulticastSendReceiveTests.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import jdk.test.lib.net.IPSupport;\n@@ -195,0 +196,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/Promiscuous.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+ * @library \/test\/lib\n@@ -38,0 +39,2 @@\n+import jdk.test.lib.net.IPSupport;\n+\n@@ -48,0 +51,2 @@\n+        IPSupport.throwSkippedExceptionIfNonOperational();\n+\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/UseDGWithIPv6.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01});\n+                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01});\n@@ -66,1 +66,1 @@\n-            System.getProperty(\"java.net.preferIPv4Stack\")));\n+                System.getProperty(\"java.net.preferIPv4Stack\")));\n@@ -68,1 +68,1 @@\n-            System.getProperty(\"java.net.preferIPv6Addresses\")));\n+                System.getProperty(\"java.net.preferIPv6Addresses\")));\n@@ -167,1 +167,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"test\/lib\/jdk\/test\/lib\/net\/IPSupport.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}