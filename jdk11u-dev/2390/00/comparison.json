{"files":[{"patch":"@@ -30,0 +30,2 @@\n+import java.io.File;\n+import java.nio.charset.Charset;\n@@ -34,0 +36,1 @@\n+import java.time.Instant;\n@@ -90,0 +93,1 @@\n+        log(\"Entering call()\");\n@@ -126,0 +130,1 @@\n+        log(\"Leaving call()\");\n@@ -455,0 +460,2 @@\n+        log(\"Entering dockerSupport()\");\n+\n@@ -473,0 +480,2 @@\n+        log(\"dockerSupport(): platform check: isSupported = \" + isSupported);\n+\n@@ -481,0 +490,1 @@\n+        log(\"dockerSupport(): returning isSupported = \" + isSupported);\n@@ -484,0 +494,34 @@\n+    \/\/ Configures process builder to redirect process stdout and stderr to a file.\n+    \/\/ Returns file names for stdout and stderr.\n+    private Map<String, String> redirectOutputToLogFile(String msg, ProcessBuilder pb, String fileNameBase) {\n+        Map<String, String> result = new HashMap<>();\n+        String timeStamp = Instant.now().toString().replace(\":\", \"-\").replace(\".\", \"-\");\n+\n+        String stdoutFileName = String.format(\".\/%s-stdout--%s.log\", fileNameBase, timeStamp);\n+        pb.redirectOutput(new File(stdoutFileName));\n+        log(msg + \": child process stdout redirected to \" + stdoutFileName);\n+        result.put(\"stdout\", stdoutFileName);\n+\n+        String stderrFileName = String.format(\".\/%s-stderr--%s.log\", fileNameBase, timeStamp);\n+        pb.redirectError(new File(stderrFileName));\n+        log(msg + \": child process stderr redirected to \" + stderrFileName);\n+        result.put(\"stderr\", stderrFileName);\n+\n+        return result;\n+    }\n+\n+    private void printLogfileContent(Map<String, String> logFileNames) {\n+        logFileNames.entrySet().stream()\n+            .forEach(entry ->\n+                {\n+                    log(\"------------- \" + entry.getKey());\n+                    try {\n+                        Files.lines(Path.of(entry.getValue()))\n+                            .forEach(line -> log(line));\n+                    } catch (IOException ie) {\n+                        log(\"Exception while reading file: \" + ie);\n+                    }\n+                    log(\"-------------\");\n+                });\n+    }\n+\n@@ -485,0 +529,1 @@\n+        log(\"checkDockerSupport(): entering\");\n@@ -486,0 +531,2 @@\n+        Map<String, String> logFileNames = redirectOutputToLogFile(\"checkDockerSupport(): <container> ps\",\n+                                                      pb, \"container-ps\");\n@@ -488,0 +535,6 @@\n+        int exitValue = p.exitValue();\n+\n+        log(String.format(\"checkDockerSupport(): exitValue = %s, pid = %s\", exitValue, p.pid()));\n+        if (exitValue != 0) {\n+            printLogfileContent(logFileNames);\n+        }\n@@ -489,1 +542,1 @@\n-        return (p.exitValue() == 0);\n+        return (exitValue == 0);\n@@ -599,0 +652,34 @@\n+    \/**\n+     * Log diagnostic message.\n+     *\n+     * @param msg\n+     *\/\n+    protected static void log(String msg) {\n+        \/\/ Always log to a file.\n+        logToFile(msg);\n+\n+        \/\/ Also log to stderr; guarded by property to avoid excessive verbosity.\n+        \/\/ By jtreg design stderr produced here will be visible\n+        \/\/ in the output of a parent process. Note: stdout should not be used\n+        \/\/ for logging as jtreg parses that output directly and only echoes it\n+        \/\/ in the event of a failure.\n+        if (Boolean.getBoolean(\"jtreg.log.vmprops\")) {\n+            System.err.println(\"VMProps: \" + msg);\n+        }\n+    }\n+\n+    \/**\n+     * Log diagnostic message to a file.\n+     *\n+     * @param msg\n+     *\/\n+    protected static void logToFile(String msg) {\n+        String fileName = \".\/vmprops.log\";\n+        try {\n+            Files.writeString(Paths.get(fileName), msg + \"\\n\", Charset.forName(\"ISO-8859-1\"),\n+                    StandardOpenOption.APPEND, StandardOpenOption.CREATE);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to log into '\" + fileName + \"'\", e);\n+        }\n+    }\n+\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":88,"deletions":1,"binary":false,"changes":89,"status":"modified"}]}