{"files":[{"patch":"@@ -236,1 +236,2 @@\n-void MutableSpace::object_iterate(ObjectClosure* cl) {\n+template<bool COMPACT_HEADERS>\n+void MutableSpace::object_iterate_impl(ObjectClosure* cl) {\n@@ -239,2 +240,26 @@\n-    cl->do_object(cast_to_oop(p));\n-    p += cast_to_oop(p)->size();\n+    oop obj = cast_to_oop(p);\n+    \/\/ When promotion-failure occurs during Young GC, eden\/from space is not cleared,\n+    \/\/ so we can encounter objects with \"forwarded\" markword.\n+    \/\/ They are essentially dead, so skipping them\n+    if (!obj->is_forwarded()) {\n+      cl->do_object(obj);\n+      p += obj->size();\n+    } else {\n+      assert(obj->forwardee() != obj, \"must not be self-forwarded\");\n+      if (COMPACT_HEADERS) {\n+        \/\/ It is safe to use the forwardee here. Parallel GC only uses\n+        \/\/ header-based forwarding during promotion. Full GC doesn't\n+        \/\/ use the object header for forwarding at all.\n+        p += obj->forwardee()->size();\n+      } else {\n+        p += obj->size();\n+      }\n+    }\n+  }\n+}\n+\n+void MutableSpace::object_iterate(ObjectClosure* cl) {\n+  if (UseCompactObjectHeaders) {\n+    object_iterate_impl<true>(cl);\n+  } else {\n+    object_iterate_impl<false>(cl);\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.cpp","additions":28,"deletions":3,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -70,0 +70,3 @@\n+  template<bool COMPACT_HEADERS>\n+  void object_iterate_impl(ObjectClosure* cl);\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}