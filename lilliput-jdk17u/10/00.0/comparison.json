{"files":[{"patch":"@@ -1024,0 +1024,53 @@\n+ResourceHashtable<const InstanceKlass*, OopHandle,\n+                  primitive_hash<const InstanceKlass*>,\n+                  primitive_equals<const InstanceKlass*>,\n+                  107,\n+                  ResourceObj::C_HEAP,\n+                  mtClass>\n+      _initialization_error_table;\n+\n+void InstanceKlass::add_initialization_error(JavaThread* current, Handle exception) {\n+  \/\/ Create the same exception with a message indicating the thread name,\n+  \/\/ and the StackTraceElements.\n+  \/\/ If the initialization error is OOM, this might not work, but if GC kicks in\n+  \/\/ this would be still be helpful.\n+  JavaThread* THREAD = current;\n+  Handle cause = java_lang_Throwable::get_cause_with_stack_trace(exception, THREAD);\n+  if (HAS_PENDING_EXCEPTION || cause.is_null()) {\n+    CLEAR_PENDING_EXCEPTION;\n+    return;\n+  }\n+\n+  MutexLocker ml(THREAD, ClassInitError_lock);\n+  OopHandle elem = OopHandle(Universe::vm_global(), cause());\n+  bool created = false;\n+  _initialization_error_table.put_if_absent(this, elem, &created);\n+  assert(created, \"Initialization is single threaded\");\n+  ResourceMark rm(THREAD);\n+  log_trace(class, init)(\"Initialization error added for class %s\", external_name());\n+}\n+\n+oop InstanceKlass::get_initialization_error(JavaThread* current) {\n+  MutexLocker ml(current, ClassInitError_lock);\n+  OopHandle* h = _initialization_error_table.get(this);\n+  return (h != nullptr) ? h->resolve() : nullptr;\n+}\n+\n+\/\/ Need to remove entries for unloaded classes.\n+void InstanceKlass::clean_initialization_error_table() {\n+  struct InitErrorTableCleaner {\n+    bool do_entry(const InstanceKlass* ik, OopHandle h) {\n+      if (!ik->is_loader_alive()) {\n+        h.release(Universe::vm_global());\n+        return true;\n+      } else {\n+        return false;\n+      }\n+    }\n+  };\n+\n+  MutexLocker ml(ClassInitError_lock);\n+  InitErrorTableCleaner cleaner;\n+  _initialization_error_table.unlink(&cleaner);\n+}\n+\n@@ -1070,7 +1123,6 @@\n-      const char* desc = \"Could not initialize class \";\n-      const char* className = external_name();\n-      size_t msglen = strlen(desc) + strlen(className) + 1;\n-      char* message = NEW_RESOURCE_ARRAY(char, msglen);\n-      if (NULL == message) {\n-        \/\/ Out of memory: can't create detailed error message\n-          THROW_MSG(vmSymbols::java_lang_NoClassDefFoundError(), className);\n+      Handle cause(THREAD, get_initialization_error(THREAD));\n+\n+      stringStream ss;\n+      ss.print(\"Could not initialize class %s\", external_name());\n+      if (cause.is_null()) {\n+        THROW_MSG(vmSymbols::java_lang_NoClassDefFoundError(), ss.as_string());\n@@ -1078,2 +1130,2 @@\n-        jio_snprintf(message, msglen, \"%s%s\", desc, className);\n-          THROW_MSG(vmSymbols::java_lang_NoClassDefFoundError(), message);\n+        THROW_MSG_CAUSE(vmSymbols::java_lang_NoClassDefFoundError(),\n+                        ss.as_string(), cause);\n@@ -1110,0 +1162,1 @@\n+        add_initialization_error(THREAD, e);\n@@ -1145,3 +1198,1 @@\n-    {\n-      debug_only(vtable().verify(tty, true);)\n-    }\n+    debug_only(vtable().verify(tty, true);)\n@@ -1158,0 +1209,1 @@\n+      add_initialization_error(THREAD, e);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":64,"deletions":12,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -118,7 +118,7 @@\n-serviceability\/sa\/ClhsdbCDSCore.java 8269982,8267433 macosx-aarch64,macosx-x64\n-serviceability\/sa\/ClhsdbFindPC.java#id1 8269982,8267433 macosx-aarch64,macosx-x64\n-serviceability\/sa\/ClhsdbFindPC.java#id3 8269982,8267433 macosx-aarch64,macosx-x64\n-serviceability\/sa\/ClhsdbPmap.java#id1 8267433 macosx-x64\n-serviceability\/sa\/ClhsdbPstack.java#id1 8269982,8267433 macosx-aarch64,macosx-x64\n-serviceability\/sa\/TestJmapCore.java 8267433 macosx-x64\n-serviceability\/sa\/TestJmapCoreMetaspace.java 8267433 macosx-x64\n+serviceability\/sa\/ClhsdbCDSCore.java  8294316,8269982,8267433 macosx-aarch64,macosx-x64\n+serviceability\/sa\/ClhsdbFindPC.java#id1  8294316,8269982,8267433 macosx-aarch64,macosx-x64\n+serviceability\/sa\/ClhsdbFindPC.java#id3  8294316,8269982,8267433 macosx-aarch64,macosx-x64\n+serviceability\/sa\/ClhsdbPmap.java#id1  8294316,8267433 macosx-x64\n+serviceability\/sa\/ClhsdbPstack.java#id1  8294316,8269982,8267433 macosx-aarch64,macosx-x64\n+serviceability\/sa\/TestJmapCore.java  8294316,8267433 macosx-x64\n+serviceability\/sa\/TestJmapCoreMetaspace.java  8294316,8267433 macosx-x64\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}