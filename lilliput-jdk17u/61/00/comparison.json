{"files":[{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"oops\/objArrayOop.hpp\"\n+#include \"unittest.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+TEST_VM(objArrayOop, osize) {\n+  static const struct {\n+    int objal; bool ccp; bool coops; bool coh; int result;\n+  } x[] = {\n+\/\/    ObjAligInB, UseCCP, UseCoops, UseCOH, object size in heap words\n+#ifdef _LP64\n+    { 8,          false,  false,    false,  4 },  \/\/ 20 byte header, 8 byte oops\n+    { 8,          false,  true,     false,  3 },  \/\/ 20 byte header, 4 byte oops\n+    { 8,          true,   false,    false,  3 },  \/\/ 16 byte header, 8 byte oops\n+    { 8,          true,   true,     false,  3 },  \/\/ 16 byte header, 4 byte oops\n+    { 16,         false,  false,    false,  4 },  \/\/ 20 byte header, 8 byte oops, 16-byte align\n+    { 16,         false,  true,     false,  4 },  \/\/ 20 byte header, 4 byte oops, 16-byte align\n+    { 16,         true,   false,    false,  4 },  \/\/ 16 byte header, 8 byte oops, 16-byte align\n+    { 16,         true,   true,     false,  4 },  \/\/ 16 byte header, 4 byte oops, 16-byte align\n+    { 256,        false,  false,    false,  32 }, \/\/ 20 byte header, 8 byte oops, 256-byte align\n+    { 256,        false,  true,     false,  32 }, \/\/ 20 byte header, 4 byte oops, 256-byte align\n+    { 256,        true,   false,    false,  32 }, \/\/ 16 byte header, 8 byte oops, 256-byte align\n+    { 256,        true,   true,     false,  32 }, \/\/ 16 byte header, 4 byte oops, 256-byte align\n+    { 8,          false,  false,    true,   3 },  \/\/ 16 byte header, 8 byte oops\n+    { 8,          false,  true,     true,   2 },  \/\/ 12 byte header, 4 byte oops\n+    { 8,          true,   false,    true,   3 },  \/\/ 16 byte header, 8 byte oops\n+    { 8,          true,   true,     true,   2 },  \/\/ 12 byte header, 4 byte oops\n+    { 16,         false,  false,    true,   4 },  \/\/ 16 byte header, 8 byte oops, 16-byte align\n+    { 16,         false,  true,     true,   2 },  \/\/ 12 byte header, 4 byte oops, 16-byte align\n+    { 16,         true,   false,    true,   4 },  \/\/ 16 byte header, 8 byte oops, 16-byte align\n+    { 16,         true,   true,     true,   2 },  \/\/ 12 byte header, 4 byte oops, 16-byte align\n+    { 256,        false,  false,    true,   32 }, \/\/ 16 byte header, 8 byte oops, 256-byte align\n+    { 256,        false,  true,     true,   32 }, \/\/ 12 byte header, 4 byte oops, 256-byte align\n+    { 256,        true,   false,    true,   32 }, \/\/ 16 byte header, 8 byte oops, 256-byte align\n+    { 256,        true,   true,     true,   32 }, \/\/ 12 byte header, 4 byte oops, 256-byte align\n+#else\n+    { 8,          false,  false,    false,  4 }, \/\/ 12 byte header, 4 byte oops, wordsize 4\n+#endif\n+    { -1,         false,  false,    false, -1 }\n+  };\n+  for (int i = 0; x[i].result != -1; i++) {\n+    if (x[i].objal == (int)ObjectAlignmentInBytes && x[i].ccp == UseCompressedClassPointers && x[i].coops == UseCompressedOops && x[i].coh == UseCompactObjectHeaders) {\n+      EXPECT_EQ(objArrayOopDesc::object_size(1), (size_t)x[i].result);\n+    }\n+  }\n+}\n","filename":"test\/hotspot\/gtest\/oops\/test_objArrayOop.cpp","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}