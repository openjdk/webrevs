{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Red Hat, Inc.\n+ * Copyright (c) 2024, 2025, Red Hat, Inc.\n@@ -127,19 +127,8 @@\n-        int bytesRead1, bytesRead2 = 0;\n-        try {\n-            try (is1; is2) {\n-                while ((bytesRead1 = is1.read(buf1)) != -1 &&\n-                       (bytesRead2 = is2.read(buf2)) != -1) {\n-                    if (bytesRead1 != bytesRead2) {\n-                        return false;\n-                    }\n-                    if (bytesRead1 == buf1.length) {\n-                        if (!Arrays.equals(buf1, buf2)) {\n-                            return false;\n-                        }\n-                    } else {\n-                        for (int i = 0; i < bytesRead1; i++) {\n-                            if (buf1[i] != buf2[i]) {\n-                                return false;\n-                            }\n-                        }\n-                    }\n+        int bytesRead1, bytesRead2;\n+        try (is1; is2) {\n+            while (true) {\n+                bytesRead1 = is1.readNBytes(buf1, 0, buf1.length);\n+                bytesRead2 = is2.readNBytes(buf2, 0, buf2.length);\n+                if (!Arrays.equals(buf1, 0, bytesRead1,\n+                                   buf2, 0, bytesRead2)) {\n+                    return false;\n@@ -147,6 +136,4 @@\n-                \/\/ ensure we read both to the end\n-                if (bytesRead1 == -1) {\n-                    bytesRead2 = is2.read(buf2);\n-                    if (bytesRead2 != -1) {\n-                        return false;\n-                    }\n+                if (bytesRead1 == 0) {\n+                    \/\/ If we reach here, bytesRead2 must be 0 as well, otherwise\n+                    \/\/ we return false on the !Arrays.equals() check above.\n+                    assert bytesRead2 == 0 : \"Arrays must have been read to the end\";\n@@ -159,1 +146,0 @@\n-        return false;\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/runtimelink\/JimageDiffGenerator.java","additions":13,"deletions":27,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,327 @@\n+\/*\n+ * Copyright (c) 2025, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.util.List;\n+\n+import org.testng.annotations.Test;\n+\n+import jdk.tools.jlink.internal.runtimelink.JimageDiffGenerator;\n+import jdk.tools.jlink.internal.runtimelink.JimageDiffGenerator.ImageResource;\n+import jdk.tools.jlink.internal.runtimelink.ResourceDiff;\n+\n+\/*\n+ * @test\n+ * @summary Unit test the diff generator logic for JEP 493\n+ * @modules java.base\/jdk.internal.jimage\n+ *          jdk.jlink\/jdk.tools.jlink.internal.runtimelink\n+ * @run testng JimageDiffGeneratorTest\n+ *\/\n+public class JimageDiffGeneratorTest {\n+\n+    \/*\n+     * Expect a resource diff since the \"b\" item is removed in\n+     * the optimized image.\n+     *\/\n+    @Test\n+    public void testItemsRemovedInOpt() throws Exception {\n+        List<String> entriesOpt = List.of(\"a\", \"c\", \"d\");\n+        byte[][] bytesOpt = new byte[][] {\n+                    { 0x01, 0x03, 0x03 }, \/* a *\/\n+                    { 0x09, 0x11, 0x11 }, \/* c *\/\n+                    { 0x22, 0x22, 0x30 }, \/* d *\/\n+        };\n+        ImageResource opt = new BasicImageResource(entriesOpt, bytesOpt);\n+        List<String> entriesBase = List.of(\"a\", \"b\", \"c\", \"d\");\n+        byte[][] bytesBase = new byte[][] {\n+            { 0x01, 0x03, 0x03 }, \/* a *\/\n+            { 0x08, 0x04, 0x04 }, \/* b *\/\n+            { 0x09, 0x11, 0x11 }, \/* c *\/\n+            { 0x22, 0x22, 0x30 }, \/* d *\/\n+        };\n+        ImageResource base = new BasicImageResource(entriesBase, bytesBase);\n+        JimageDiffGenerator gen = new JimageDiffGenerator();\n+        List<ResourceDiff> result = gen.generateDiff(base, opt);\n+        assertEquals(result.size(), 1);\n+        assertEquals(result.get(0).getKind(), ResourceDiff.Kind.REMOVED);\n+        assertEquals(result.get(0).getName(), \"b\");\n+        assertEquals(result.get(0).getResourceBytes(), bytesBase[1]);\n+    }\n+\n+    \/*\n+     * Expect no difference as streams are the same\n+     *\/\n+    @Test\n+    public void testNoDiff() throws Exception {\n+        List<String> entriesBase = List.of(\"a\", \"b\", \"c\", \"d\");\n+        byte[][] bytesBase = new byte[][] {\n+            { 0x01, 0x03, 0x03 }, \/* a *\/\n+            { 0x08, 0x04, 0x04 }, \/* b *\/\n+            { 0x09, 0x11, 0x11 }, \/* c *\/\n+            { 0x22, 0x22, 0x30 }, \/* d *\/\n+        };\n+        ImageResource base = new BasicImageResource(entriesBase, bytesBase);\n+        ImageResource opt = new BasicImageResource(entriesBase, bytesBase);\n+        JimageDiffGenerator gen = new JimageDiffGenerator();\n+        List<ResourceDiff> result = gen.generateDiff(base, opt);\n+        assertTrue(result.isEmpty());\n+    }\n+\n+    \/*\n+     * Expect a resource diff since the \"b\" item has been added in\n+     * the optimized image.\n+     *\/\n+    @Test\n+    public void testItemsAddedInOpt() throws Exception {\n+        List<String> entriesBase = List.of(\"a\", \"c\", \"d\");\n+        byte[][] bytesBase = new byte[][] {\n+                    { 0x01, 0x03, 0x03 }, \/* a *\/\n+                    { 0x09, 0x11, 0x11 }, \/* c *\/\n+                    { 0x22, 0x22, 0x30 }, \/* d *\/\n+        };\n+        ImageResource base = new BasicImageResource(entriesBase, bytesBase);\n+        List<String> entriesOpt = List.of(\"a\", \"b\", \"c\", \"d\");\n+        byte[][] bytesOpt = new byte[][] {\n+            { 0x01, 0x03, 0x03 }, \/* a *\/\n+            { 0x08, 0x04, 0x04 }, \/* b *\/\n+            { 0x09, 0x11, 0x11 }, \/* c *\/\n+            { 0x22, 0x22, 0x30 }, \/* d *\/\n+        };\n+        ImageResource opt = new BasicImageResource(entriesOpt, bytesOpt);\n+        JimageDiffGenerator gen = new JimageDiffGenerator();\n+        List<ResourceDiff> result = gen.generateDiff(base, opt);\n+        assertEquals(result.size(), 1);\n+        assertEquals(result.get(0).getKind(), ResourceDiff.Kind.ADDED);\n+        assertEquals(result.get(0).getName(), \"b\");\n+        assertEquals(result.get(0).getResourceBytes(), null, \"Added entries in opt don't have resource bytes\");\n+    }\n+\n+    \/*\n+     * Expect a resource diff since the \"d\" item has modified bytes in the\n+     * optimized image resource.\n+     *\/\n+    @Test\n+    public void testBytesDiffer() throws Exception {\n+        List<String> entriesBase = List.of(\"a\", \"b\", \"c\", \"d\");\n+        byte[][] bytesBase = new byte[][] {\n+                    { 0x01, 0x03, 0x03 }, \/* a *\/\n+                    { 0x08, 0x04, 0x04 }, \/* b *\/\n+                    { 0x09, 0x11, 0x11 }, \/* c *\/\n+                    { 0x11, 0x12, 0x31 }, \/* d *\/\n+        };\n+        ImageResource base = new BasicImageResource(entriesBase, bytesBase);\n+        List<String> entriesOpt = List.of(\"a\", \"b\", \"c\", \"d\");\n+        byte[][] bytesOpt = new byte[][] {\n+            { 0x01, 0x03, 0x03 }, \/* a *\/\n+            { 0x08, 0x04, 0x04 }, \/* b *\/\n+            { 0x09, 0x11, 0x11 }, \/* c *\/\n+            { 0x22, 0x22, 0x30 }, \/* d - differs to base! *\/\n+        };\n+        ImageResource opt = new BasicImageResource(entriesOpt, bytesOpt);\n+        JimageDiffGenerator gen = new JimageDiffGenerator();\n+        List<ResourceDiff> result = gen.generateDiff(base, opt);\n+        assertEquals(result.size(), 1);\n+        assertEquals(result.get(0).getKind(), ResourceDiff.Kind.MODIFIED);\n+        assertEquals(result.get(0).getName(), \"d\");\n+        assertEquals(result.get(0).getResourceBytes(), bytesBase[3]);\n+    }\n+\n+    \/*\n+     * Expect a resource diff since an item has modified bytes. Test\n+     * for a resource that has more than 1K bytes (the buffer size used\n+     * internally).\n+     *\/\n+    @Test\n+    public void testBytesDifferLarge() throws Exception {\n+        List<String> entriesBase = List.of(\"a\", \"b\", \"c\", \"d\");\n+        byte[][] bytesBase = new byte[][] {\n+                    { 0x01, 0x03, 0x03 }, \/* a *\/\n+                    { 0x08, 0x04, 0x04 }, \/* b *\/\n+                    { },                  \/* c *\/\n+                    { 0x11, 0x12, 0x31 }, \/* d *\/\n+        };\n+        bytesBase[2] = generateBytes();\n+        ImageResource base = new BasicImageResource(entriesBase, bytesBase);\n+        List<String> entriesOpt = List.of(\"a\", \"b\", \"c\", \"d\");\n+        byte[][] bytesOpt = new byte[][] {\n+            { 0x01, 0x03, 0x03 }, \/* a *\/\n+            { 0x08, 0x04, 0x04 }, \/* b *\/\n+            { },                  \/* c *\/\n+            { 0x22, 0x22, 0x30 }, \/* d *\/\n+        };\n+        bytesOpt[2] = generateBytes();\n+        \/\/ Change the first byte of 'c' in the opt bytes\n+        bytesOpt[2][0] = -1;\n+        \/\/ assert pre-condition\n+        assertTrue(bytesOpt[2][0] != bytesBase[2][0]);\n+\n+        ImageResource opt = new BasicImageResource(entriesOpt, bytesOpt);\n+        JimageDiffGenerator gen = new JimageDiffGenerator();\n+        List<ResourceDiff> result = gen.generateDiff(base, opt);\n+        assertEquals(result.size(), 2);\n+        \/\/ assertions for 'c' differences\n+        assertEquals(result.get(0).getKind(), ResourceDiff.Kind.MODIFIED);\n+        assertEquals(result.get(0).getName(), \"c\");\n+        assertEquals(result.get(0).getResourceBytes(), bytesBase[2]);\n+\n+        \/\/ assertion for 'd' differences\n+        assertEquals(result.get(1).getKind(), ResourceDiff.Kind.MODIFIED);\n+        assertEquals(result.get(1).getName(), \"d\");\n+        assertEquals(result.get(1).getResourceBytes(), bytesBase[3]);\n+    }\n+\n+    \/*\n+     * Expect a no resource difference since the steams are both empty\n+     *\/\n+    @Test\n+    public void testEmptyStreams() throws Exception {\n+        List<String> entriesBase = List.of(\"a\", \"b\", \"c\", \"d\");\n+        byte[][] bytesBase = new byte[][] {\n+            { }, \/* a *\/\n+            { }, \/* b *\/\n+            { }, \/* c *\/\n+            { }, \/* d *\/\n+        };\n+        ImageResource base = new BasicImageResource(entriesBase, bytesBase);\n+        ImageResource opt = new BasicImageResource(entriesBase, bytesBase);\n+        JimageDiffGenerator gen = new JimageDiffGenerator();\n+        List<ResourceDiff> result = gen.generateDiff(base, opt);\n+        assertTrue(result.isEmpty());\n+    }\n+\n+    \/*\n+     * Expect a difference since entry 'a' has zero bytes in opt.\n+     *\/\n+    @Test\n+    public void testNotEqualLength() throws Exception {\n+        List<String> entriesBase = List.of(\"a\", \"b\", \"c\", \"d\");\n+        byte[][] bytesBase = new byte[][] {\n+            { 0x01, 0x03, 0x03 }, \/* a *\/\n+            { 0x08, 0x04, 0x04 }, \/* b *\/\n+            { 0x09, 0x11, 0x11 }, \/* c *\/\n+            { 0x11, 0x12, 0x31 }, \/* d *\/\n+        };\n+        byte[][] bytesOpt = new byte[][] {\n+            { }, \/* a *\/\n+            { 0x08, 0x04, 0x04 }, \/* b *\/\n+            { 0x09, 0x11, 0x11 }, \/* c *\/\n+            { 0x11, 0x12, 0x31 }, \/* d *\/\n+        };\n+        ImageResource base = new BasicImageResource(entriesBase, bytesBase);\n+        ImageResource opt = new BasicImageResource(entriesBase, bytesOpt);\n+        JimageDiffGenerator gen = new JimageDiffGenerator();\n+        List<ResourceDiff> result = gen.generateDiff(base, opt);\n+        assertEquals(result.size(), 1);\n+        assertEquals(result.get(0).getKind(), ResourceDiff.Kind.MODIFIED);\n+        assertEquals(result.get(0).getName(), \"a\");\n+        assertEquals(result.get(0).getResourceBytes(), bytesBase[0]);\n+    }\n+\n+    \/*\n+     * Expect a difference since entry 'a' on the optimized version is\n+     * one byte longer.\n+     *\/\n+    @Test\n+    public void testBytesDifferExactBufferSize() throws Exception {\n+        List<String> entriesBase = List.of(\"a\", \"b\", \"c\", \"d\");\n+        byte[][] bytesBase = new byte[][] {\n+            { }, \/* a *\/\n+            { 0x08, 0x04, 0x04 }, \/* b *\/\n+            { 0x09, 0x11, 0x11 }, \/* c *\/\n+            { 0x11, 0x12, 0x31 }, \/* d *\/\n+        };\n+        byte[][] bytesOpt = new byte[][] {\n+            { }, \/* a *\/\n+            { 0x08, 0x04, 0x04 }, \/* b *\/\n+            { 0x09, 0x11, 0x11 }, \/* c *\/\n+            { 0x11, 0x12, 0x31 }, \/* d *\/\n+        };\n+        bytesBase[0] = genBytesOfSize(1024);    \/\/ exact buffer size\n+        bytesOpt[0] = genBytesOfSize(1024 + 1); \/\/ buffer size + 1\n+\n+        ImageResource base = new BasicImageResource(entriesBase, bytesBase);\n+        ImageResource opt = new BasicImageResource(entriesBase, bytesOpt);\n+        JimageDiffGenerator gen = new JimageDiffGenerator();\n+        List<ResourceDiff> result = gen.generateDiff(base, opt);\n+        assertEquals(result.size(), 1);\n+        assertEquals(result.get(0).getKind(), ResourceDiff.Kind.MODIFIED);\n+        assertEquals(result.get(0).getName(), \"a\");\n+        assertEquals(result.get(0).getResourceBytes(), bytesBase[0]);\n+    }\n+\n+    private byte[] generateBytes() {\n+        int size = 1024 + 254;\n+        return genBytesOfSize(size);\n+    }\n+\n+    private byte[] genBytesOfSize(int size) {\n+        byte[] result = new byte[size];\n+        for (int i = 0; i < size; i++) {\n+            result[i] = (byte)(i % Byte.MAX_VALUE);\n+        }\n+        return result;\n+    }\n+\n+    \/\/ Simple stub ImageResource for test purposes\n+    static class BasicImageResource implements ImageResource {\n+\n+        private final List<String> entries;\n+        private final byte[][] entryBytes;\n+\n+        public BasicImageResource(List<String> entries, byte[][] entryBytes) {\n+            this.entries = entries;\n+            this.entryBytes = entryBytes;\n+        }\n+\n+        @Override\n+        public void close() throws Exception {\n+            \/\/ nothing\n+        }\n+\n+        @Override\n+        public List<String> getEntries() {\n+            return entries;\n+        }\n+\n+        @Override\n+        public byte[] getResourceBytes(String name) {\n+            for (int i = 0; i < entries.size(); i++) {\n+                if (entries.get(i).equals(name)) {\n+                    return entryBytes[i];\n+                }\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public InputStream getResource(String name) {\n+            byte[] bytes = getResourceBytes(name);\n+            return new ByteArrayInputStream(bytes);\n+        }\n+\n+    }\n+}\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/JimageDiffGeneratorTest.java","additions":327,"deletions":0,"binary":false,"changes":327,"status":"added"}]}