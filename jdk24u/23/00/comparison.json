{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n- * @library \/test\/lib\n- * @modules java.base\/sun.security.x509\n+ * @run main LeadingPeriod\n@@ -41,16 +40,4 @@\n-    private static CertPath makeCertPath(String targetCertStr,\n-        PKIXParameters params) throws CertificateException {\n-        \/\/ generate certificate from cert strings\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is;\n-\n-        is = new ByteArrayInputStream(targetCertStr.getBytes());\n-        Certificate targetCert = cf.generateCertificate(is);\n-        \/\/ set validity date so that validation won't fail when cert expires\n-        params.setDate(((X509Certificate)targetCert).getNotBefore());\n-\n-        \/\/ generate certification path\n-        List<Certificate> list = List.of(targetCert);\n-\n-        return cf.generateCertPath(list);\n+    public static void main(String[] args) throws Exception {\n+        String certs = System.getProperty(\"test.src\", \".\/\") + \"\/certs\/\";\n+        validate(certs + \"withoutLeadingPeriod\");\n+        validate(certs + \"withLeadingPeriod\");\n@@ -59,6 +46,3 @@\n-    private static PKIXParameters genParams(String caStr) throws Exception {\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        ByteArrayInputStream is = new ByteArrayInputStream(caStr.getBytes());\n-        Certificate selfSignedCert = cf.generateCertificate(is);\n+    public static void validate(String certPath) throws Exception {\n+        byte[] targetCertBytes = Files.readAllBytes(Paths.get(certPath + \"\/leaf.pem\"));\n+        byte[] caCertBytes = Files.readAllBytes(Paths.get(certPath + \"\/ca.pem\"));\n@@ -66,2 +50,3 @@\n-        \/\/ generate a trust anchor\n-        TrustAnchor anchor = new TrustAnchor((X509Certificate) selfSignedCert, null);\n+        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+        Certificate caCert = cf.generateCertificate(new ByteArrayInputStream(caCertBytes));\n+        Certificate targetCert = cf.generateCertificate(new ByteArrayInputStream(targetCertBytes));\n@@ -69,1 +54,1 @@\n-        Set<TrustAnchor> anchors = Collections.singleton(anchor);\n+        TrustAnchor anchor = new TrustAnchor((X509Certificate) caCert, null);\n@@ -71,1 +56,1 @@\n-        PKIXParameters params = new PKIXParameters(anchors);\n+        PKIXParameters params = new PKIXParameters(Collections.singleton(anchor));\n@@ -73,1 +58,1 @@\n-        \/\/ disable certificate revocation checking\n+        \/\/ Disable certificate revocation checking\n@@ -76,2 +61,2 @@\n-        return params;\n-    }\n+        \/\/ Set validity date, so that validation won't fail when cert expires\n+        params.setDate(((X509Certificate)targetCert).getNotBefore());\n@@ -79,1 +64,1 @@\n-    public static void main(String[] args) throws Exception {\n+        CertPath path = cf.generateCertPath(List.of(targetCert, caCert));\n@@ -82,29 +67,1 @@\n-\n-        \/\/ Load certs with a NameConstraint where DNS value does not begin with a period\n-        Path targetFromCAWithoutPeriodPath = Paths.get(System.getProperty(\n-            \"test.src\", \".\/\") + \"\/certs\/withoutLeadingPeriod\/leaf.pem\");\n-        String targetFromCAWithoutPeriod = Files.readString(targetFromCAWithoutPeriodPath);\n-\n-        Path caWithoutLeadingPeriodPath = Paths.get(System.getProperty(\n-            \"test.src\", \".\/\") + \"\/certs\/withoutLeadingPeriod\/ca.pem\");\n-        String caWithoutLeadingPeriod = Files.readString(caWithoutLeadingPeriodPath);\n-\n-        PKIXParameters paramsForCAWithoutLeadingPeriod = genParams(caWithoutLeadingPeriod);\n-        CertPath pathWithoutLeadingPeriod = makeCertPath(\n-            targetFromCAWithoutPeriod, paramsForCAWithoutLeadingPeriod);\n-\n-        validator.validate(pathWithoutLeadingPeriod, paramsForCAWithoutLeadingPeriod);\n-\n-        \/\/ Load certificates with a NameConstraint where the DNS value does begin with a period\n-        Path targetFromCAWithPeriodPath = Paths.get(System.getProperty(\n-            \"test.src\", \".\/\") + \"\/certs\/withLeadingPeriod\/leaf.pem\");\n-        String targetFromCAWithPeriod = Files.readString(targetFromCAWithPeriodPath);\n-\n-        Path caWithLeadingPeriodPath = Paths.get(System.getProperty(\n-            \"test.src\", \".\/\") + \"\/certs\/withLeadingPeriod\/ca.pem\");\n-        String caWithLeadingPeriod = Files.readString(caWithLeadingPeriodPath);\n-\n-        PKIXParameters paramsForCAWithLeadingPeriod = genParams(caWithLeadingPeriod);\n-        CertPath pathWithLeadingPeriod = makeCertPath(targetFromCAWithPeriod, paramsForCAWithLeadingPeriod);\n-\n-        validator.validate(pathWithLeadingPeriod, paramsForCAWithLeadingPeriod);\n+        validator.validate(path, params);\n","filename":"test\/jdk\/sun\/security\/x509\/DNSName\/LeadingPeriod.java","additions":19,"deletions":62,"binary":false,"changes":81,"status":"modified"}]}