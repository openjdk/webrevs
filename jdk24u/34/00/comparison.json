{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,3 @@\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.Platform\n+ * @run main ItemEventTest\n@@ -32,0 +35,2 @@\n+\/\/ Pass -save to the test to enable screenshots at each select\/deselect\n+\n@@ -40,1 +45,0 @@\n-import java.awt.event.KeyEvent;\n@@ -42,18 +46,23 @@\n-import java.awt.event.ItemEvent;\n-import java.awt.event.ItemListener;\n-\n-public class ItemEventTest extends Frame\n-{\n-    List list;\n-    final String expectedSelectionOrder;\n-    StringBuilder actualSelectionOrder;\n-    Robot robot;\n-\n-    public ItemEventTest()\n-    {\n-        try {\n-            robot = new Robot();\n-        } catch(AWTException e) {\n-            throw new RuntimeException(e.getMessage());\n-        }\n-        expectedSelectionOrder = \"01230123\";\n+import java.awt.event.KeyEvent;\n+import java.awt.image.RenderedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import javax.imageio.ImageIO;\n+\n+import jdk.test.lib.Platform;\n+\n+public final class ItemEventTest extends Frame {\n+    private static final String expectedSelectionOrder = \"01230123\";\n+\n+    private static boolean saveScreenshots;\n+\n+    private final StringBuffer actualSelectionOrder\n+            = new StringBuffer(expectedSelectionOrder.length());\n+\n+    private final List list;\n+    private final Robot robot;\n+\n+    private ItemEventTest() throws AWTException {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n@@ -68,0 +77,1 @@\n+\n@@ -71,0 +81,1 @@\n+        setLocationRelativeTo(null);\n@@ -76,0 +87,1 @@\n+    @SuppressWarnings(\"deprecation\")\n@@ -77,4 +89,4 @@\n-        if (e.target instanceof List) {\n-            if (e.id == Event.LIST_DESELECT || e.id == Event.LIST_SELECT) {\n-                actualSelectionOrder.append(e.arg);\n-            }\n+        if ((e.target instanceof List)\n+            && (e.id == Event.LIST_DESELECT\n+                || e.id == Event.LIST_SELECT)) {\n+            logEvent(\"handleEvent: \", e.arg);\n@@ -85,1 +97,6 @@\n-    void testHandleEvent() {\n+    private void logEvent(String method, Object listItem) {\n+        actualSelectionOrder.append(listItem);\n+        System.out.println(method + listItem);\n+    }\n+\n+    private void testHandleEvent() {\n@@ -91,7 +108,3 @@\n-    void testItemListener() {\n-        list.addItemListener(new ItemListener() {\n-            @Override\n-            public void itemStateChanged(ItemEvent ie) {\n-                actualSelectionOrder.append(ie.getItem());\n-            }\n-        });\n+    private void testItemListener() {\n+        list.addItemListener(ie\n+                -> logEvent(\"testItemListener: \", ie.getItem()));\n@@ -101,6 +114,7 @@\n-    void performTest() {\n-        actualSelectionOrder = new StringBuilder();\n-        Point loc = list.getLocationOnScreen();\n-        Rectangle rect = list.getBounds();\n-        int dY = rect.height \/ list.getItemCount();\n-        loc = new Point(loc.x + 10, loc.y + 5);\n+    private void performTest() {\n+        actualSelectionOrder.setLength(0);\n+\n+        final Rectangle rect = getListBoundsOnScreen();\n+        final int dY = rect.height \/ list.getItemCount();\n+        final Point loc = new Point(rect.x + rect.width \/ 2,\n+                                    rect.y + dY \/ 2);\n@@ -108,3 +122,1 @@\n-        String osName = System.getProperty(\"os.name\");\n-        boolean isMac = osName.contains(\"Mac\") || osName.contains(\"mac\");\n-        if(isMac) {\n+        if (Platform.isOSX()) {\n@@ -112,1 +124,0 @@\n-            robot.waitForIdle();\n@@ -119,0 +130,2 @@\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n@@ -120,4 +133,4 @@\n-                robot.mousePress(InputEvent.BUTTON1_MASK);\n-                robot.waitForIdle();\n-                robot.mouseRelease(InputEvent.BUTTON1_MASK);\n-                robot.waitForIdle();\n+\n+                if (saveScreenshots) {\n+                    saveImage(robot.createScreenCapture(rect));\n+                }\n@@ -127,1 +140,1 @@\n-        if(isMac) {\n+        if (Platform.isOSX()) {\n@@ -131,2 +144,3 @@\n-        if (!expectedSelectionOrder.equals(actualSelectionOrder.toString())) {\n-            dispose();\n+        if (!expectedSelectionOrder.contentEquals(actualSelectionOrder)) {\n+            saveImage(robot.createScreenCapture(rect));\n+\n@@ -140,5 +154,27 @@\n-    public static void main(String args[]) {\n-       ItemEventTest test = new ItemEventTest();\n-       test.testHandleEvent();\n-       test.testItemListener();\n-       test.dispose();\n+    private Rectangle getListBoundsOnScreen() {\n+        return new Rectangle(list.getLocationOnScreen(),\n+                             list.getSize());\n+    }\n+\n+    private static int imageNo = 0;\n+\n+    private static void saveImage(RenderedImage image) {\n+        try {\n+            ImageIO.write(image,\n+                          \"png\",\n+                          new File(String.format(\"image-%02d.png\",\n+                                                 ++imageNo)));\n+        } catch (IOException ignored) {\n+        }\n+    }\n+\n+    public static void main(String[] args) throws AWTException {\n+        saveScreenshots = args.length > 0 && \"-save\".equals(args[0]);\n+\n+        ItemEventTest test = new ItemEventTest();\n+        try {\n+            test.testHandleEvent();\n+            test.testItemListener();\n+        } finally {\n+            test.dispose();\n+        }\n","filename":"test\/jdk\/java\/awt\/List\/ItemEventTest\/ItemEventTest.java","additions":90,"deletions":54,"binary":false,"changes":144,"status":"modified"}]}