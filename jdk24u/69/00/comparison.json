{"files":[{"patch":"@@ -244,1 +244,1 @@\n-        if (c.name == names.module_info) {\n+        if (jrtIndex == null || !jrtIndex.isInJRT(c.classfile) || c.name == names.module_info) {\n@@ -260,10 +260,8 @@\n-                    if (jrtIndex != null && jrtIndex.isInJRT(c.classfile)) {\n-                        JRTIndex.CtSym ctSym = jrtIndex.getCtSym(packge.flatName());\n-                        Profile minProfile = Profile.DEFAULT;\n-                        if (ctSym.proprietary)\n-                            newFlags |= PROPRIETARY;\n-                        if (ctSym.minProfile != null)\n-                            minProfile = Profile.lookup(ctSym.minProfile);\n-                        if (profile != Profile.DEFAULT && minProfile.value > profile.value) {\n-                            newFlags |= NOT_IN_PROFILE;\n-                        }\n+                    JRTIndex.CtSym ctSym = jrtIndex.getCtSym(packge.flatName());\n+                    Profile minProfile = Profile.DEFAULT;\n+                    if (ctSym.proprietary)\n+                        newFlags |= PROPRIETARY;\n+                    if (ctSym.minProfile != null)\n+                        minProfile = Profile.lookup(ctSym.minProfile);\n+                    if (profile != Profile.DEFAULT && minProfile.value > profile.value) {\n+                        newFlags |= NOT_IN_PROFILE;\n@@ -273,3 +271,0 @@\n-                } else {\n-                    \/\/ don't accumulate user modules in supplementaryFlags\n-                    return 0;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/ClassFinder.java","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8331081\n+ * @bug 8331081 8349058\n@@ -29,2 +29,3 @@\n- * @modules jdk.compiler\/com.sun.tools.javac.api jdk.compiler\/com.sun.tools.javac.main\n- *     jdk.compiler\/com.sun.tools.javac.jvm jdk.jdeps\/com.sun.tools.javap\n+ * @modules jdk.compiler\/com.sun.tools.javac.api jdk.compiler\/com.sun.tools.javac.file\n+ *     jdk.compiler\/com.sun.tools.javac.jvm jdk.compiler\/com.sun.tools.javac.main\n+ *     jdk.compiler\/com.sun.tools.javac.util jdk.jdeps\/com.sun.tools.javap\n@@ -34,0 +35,3 @@\n+import com.sun.tools.javac.file.JavacFileManager;\n+import com.sun.tools.javac.util.Context;\n+\n@@ -44,1 +48,2 @@\n-import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.Collections;\n@@ -51,0 +56,3 @@\n+    private Path src;\n+    private Path classes;\n+\n@@ -61,1 +69,1 @@\n-        Path src = base.resolve(\"src\");\n+        src = base.resolve(\"src\");\n@@ -66,8 +74,0 @@\n-        Path classes = base.resolve(\"classes\");\n-        tb.createDirectories(classes);\n-\n-        List<String> log;\n-        List<String> expected =\n-                Arrays.asList(\n-                        \"Test.java:1:43: compiler.warn.sun.proprietary: sun.misc.Unsafe\",\n-                        \"1 warning\");\n@@ -75,25 +75,2 @@\n-        log =\n-                new JavacTask(tb)\n-                        .options(\"-XDrawDiagnostics\")\n-                        .outdir(classes)\n-                        .files(tb.findJavaFiles(src))\n-                        .run(Expect.SUCCESS)\n-                        .writeAll()\n-                        .getOutputLines(Task.OutputKind.DIRECT);\n-\n-        if (!expected.equals(log)) {\n-            throw new AssertionError(\"Unexpected output: \" + log);\n-        }\n-\n-        log =\n-                new JavacTask(tb)\n-                        .options(\"-XDrawDiagnostics\", \"--system\", System.getProperty(\"java.home\"))\n-                        .outdir(classes)\n-                        .files(tb.findJavaFiles(src))\n-                        .run(Expect.SUCCESS)\n-                        .writeAll()\n-                        .getOutputLines(Task.OutputKind.DIRECT);\n-\n-        if (!expected.equals(log)) {\n-            throw new AssertionError(\"Unexpected output: \" + log);\n-        }\n+        classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n@@ -110,1 +87,38 @@\n-        log =\n+        expectSunapi(false);\n+        expectSunapi(false, \"--system\", System.getProperty(\"java.home\"));\n+        expectSunapi(false, \"--release\", String.valueOf(Runtime.version().feature()));\n+        expectSunapi(false, \"--release\", String.valueOf(Runtime.version().feature() - 1));\n+        expectSunapi(true, \"--release\", String.valueOf(Runtime.version().feature()));\n+        expectSunapi(true, \"--release\", String.valueOf(Runtime.version().feature() - 1));\n+\n+        \/\/ non-default --system arguments disable sunapi, see JDK-8349058\n+        expectNoSunapi(false, \"--system\", system.toString());\n+\n+        \/\/ -XDignore.symbol.file disables sunapi diagnostics, see JDK-8349058\n+        expectNoSunapi(true);\n+        expectNoSunapi(true, \"--system\", System.getProperty(\"java.home\"));\n+        expectNoSunapi(true, \"--system\", system.toString());\n+    }\n+\n+    private void expectSunapi(boolean ignoreSymbolFile, String... options) throws IOException {\n+        expectSunapi(true, ignoreSymbolFile, options);\n+    }\n+\n+    private void expectNoSunapi(boolean ignoreSymbolFile, String... options) throws IOException {\n+        expectSunapi(false, ignoreSymbolFile, options);\n+    }\n+\n+    private void expectSunapi(boolean expectDiagnostic, boolean ignoreSymbolFile, String... options)\n+            throws IOException {\n+        List<String> expected =\n+                expectDiagnostic\n+                        ? List.of(\n+                                \"Test.java:1:43: compiler.warn.sun.proprietary: sun.misc.Unsafe\",\n+                                \"1 warning\")\n+                        : List.of(\"\");\n+        List<String> allOptions = new ArrayList<>();\n+        allOptions.add(\"-XDrawDiagnostics\");\n+        Collections.addAll(allOptions, options);\n+        JavacFileManager fm = new JavacFileManager(new Context(), false, null);\n+        fm.setSymbolFileEnabled(!ignoreSymbolFile);\n+        List<String> log =\n@@ -112,1 +126,2 @@\n-                        .options(\"-XDrawDiagnostics\", \"--system\", system.toString())\n+                        .fileManager(fm)\n+                        .options(allOptions)\n@@ -118,3 +133,2 @@\n-\n-        if (!expected.equals(log)) {\n-            throw new AssertionError(\"Unexpected output: \" + log);\n+        if (!log.equals(expected)) {\n+            throw new AssertionError(\"expected: \" + expected + \"\\nactual: \" + log + \"\\n\");\n","filename":"test\/langtools\/tools\/javac\/options\/system\/SystemSunProprietary.java","additions":57,"deletions":43,"binary":false,"changes":100,"status":"modified"}]}