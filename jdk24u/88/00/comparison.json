{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,1 +123,1 @@\n-        this.info = info;\n+        this.info = Objects.requireNonNull(info);\n@@ -556,1 +556,1 @@\n-        if (info == null || algId == null || signature == null)\n+        if (algId == null || signature == null)\n@@ -573,2 +573,0 @@\n-        if (info == null)\n-            return null;\n@@ -584,2 +582,0 @@\n-        if (info == null)\n-            return -1;\n@@ -612,2 +608,0 @@\n-        if (info == null)\n-            return null;\n@@ -625,2 +619,0 @@\n-        if (info == null)\n-            return null;\n@@ -636,3 +628,0 @@\n-        if (info == null) {\n-            return null;\n-        }\n@@ -653,2 +642,0 @@\n-        if (info == null)\n-            return null;\n@@ -664,3 +651,0 @@\n-        if (info == null) {\n-            return null;\n-        }\n@@ -680,2 +664,0 @@\n-        if (info == null)\n-            return null;\n@@ -691,2 +673,0 @@\n-        if (info == null)\n-            return null;\n@@ -705,4 +685,1 @@\n-        if (info != null) {\n-            return info.getEncodedInfo();\n-        } else\n-            throw new CertificateEncodingException(\"Uninitialized certificate\");\n+        return info.getEncodedInfo();\n@@ -769,2 +746,0 @@\n-        if (info == null)\n-            return null;\n@@ -784,2 +759,0 @@\n-        if (info == null)\n-            return null;\n@@ -938,2 +911,0 @@\n-        if (info == null)\n-            return false;\n@@ -955,3 +926,0 @@\n-        if (info == null) {\n-            return null;\n-        }\n@@ -984,3 +952,0 @@\n-        if (info == null) {\n-            return null;\n-        }\n@@ -1013,3 +978,0 @@\n-        if (info == null) {\n-            return null;\n-        }\n@@ -1034,3 +996,0 @@\n-        if (info == null) {\n-            return null;\n-        }\n@@ -1048,1 +1007,2 @@\n-     *\n+     * @return the DER-encoded extension value, or {@code null} if\n+     *         the extensions are not present or the value is not found\n@@ -1057,1 +1017,3 @@\n-\n+            if (exts == null) {\n+                return null;\n+            }\n@@ -1060,4 +1022,0 @@\n-                if (exts == null) {\n-                    return null;\n-                }\n-\n@@ -1072,1 +1030,1 @@\n-                certExt = getInfo().getExtensions().getExtension(extAlias);\n+                certExt = exts.getExtension(extAlias);\n@@ -1075,3 +1033,1 @@\n-                if (exts != null) {\n-                    certExt = exts.getUnparseableExtensions().get(oid);\n-                }\n+                certExt = exts.getUnparseableExtensions().get(oid);\n@@ -1101,0 +1057,4 @@\n+            CertificateExtensions extensions = info.getExtensions();\n+            if (extensions == null) {\n+                return null;\n+            }\n@@ -1102,1 +1062,1 @@\n-                    getInfo().getExtensions().getExtension(KeyUsageExtension.NAME);\n+                    extensions.getExtension(KeyUsageExtension.NAME);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/X509CertImpl.java","additions":16,"deletions":56,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import sun.security.x509.X509CertInfo;\n@@ -228,1 +229,1 @@\n-        return new X509CertImpl(null, null, null, new byte[0]) {\n+        return new X509CertImpl(new X509CertInfo(), null, null, new byte[0]) {\n","filename":"test\/jdk\/sun\/security\/util\/HostnameChecker\/TestHostnameChecker.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,201 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8346094\n+ * @summary validating getExtensionValue and getKeyUsage with specified and\n+ *          unspecified extensions on the X509Certificate.\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.x509\n+ *          java.base\/sun.security.util\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import sun.security.util.ObjectIdentifier;\n+import sun.security.x509.*;\n+\n+import java.io.IOException;\n+import java.math.BigInteger;\n+import java.security.*;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+\n+public class CertExtensions {\n+\n+    public static void main(String[] args) throws Exception {\n+        X509CertImpl x509Certimpl = createCertificate();\n+        \/**\n+         * Certificate is created without extensions. Invoking getExtensionValue\n+         * with oid must return NULL else it is incorrect\n+         *\/\n+        Asserts.assertNull(x509Certimpl.getExtensionValue(\"2.5.29.17\"));\n+        \/**\n+         * Certificate is created with extensions. Invoking getExtensionValue\n+         * with oid must not return NULL else it is incorrect\n+         *\/\n+        x509Certimpl.getInfo().setExtensions(createCertificateExtensions(\n+                x509Certimpl.getInfo().getKey().getKey()));\n+        Asserts.assertNotNull(x509Certimpl.getExtensionValue(\"2.5.29.17\"));\n+        \/**\n+         * Certificate is created with extensions. Invoking getExtensionValue\n+         * with invalid oid must return NULL else it is incorrect\n+         *\/\n+        Asserts.assertNull(x509Certimpl.getExtensionValue(\"1.2.3.4\"));\n+        \/**\n+         * Certificate is created with extensions. Invoking getKeyUsage\n+         * must not return NULL else it is incorrect\n+         *\/\n+        Asserts.assertNotNull(x509Certimpl.getKeyUsage());\n+        \/**\n+         * Certificate is created without extensions. Invoking getKeyUsage\n+         * must return NULL else it is incorrect\n+         *\/\n+        x509Certimpl.getInfo().setExtensions(null);\n+        Asserts.assertNull(x509Certimpl.getKeyUsage());\n+    }\n+\n+    private static X509CertImpl createCertificate() throws Exception {\n+        X509CertImpl x509Certimpl = null;\n+        try {\n+            X509CertInfo x509CertInfo = new X509CertInfo();\n+            x509CertInfo.setVersion(new CertificateVersion(CertificateVersion.V3));\n+\n+            \/\/ Generate Key Pair (RSA)\n+            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n+            keyPairGenerator.initialize(2048);\n+            KeyPair keyPair = keyPairGenerator.generateKeyPair();\n+            PrivateKey privateKey = keyPair.getPrivate();\n+            PublicKey publicKey = keyPair.getPublic();\n+            x509CertInfo.setKey(new CertificateX509Key(publicKey));\n+\n+            \/\/ Create and set the DN name for Subject and Issuer.\n+            X500Name subject = new X500Name(\"CN=www.Subject.com, O=MyOrg, OU=LocalBiz, L=XYZ, S=YY, C=XX\");\n+            X500Name issuer = new X500Name(\"CN=www.Issuer.com, O=Oracle,OU=Java,L=XYZ,S=YY, C=XX\");\n+            x509CertInfo.setIssuer(issuer);\n+            x509CertInfo.setSubject(subject);\n+\n+            \/\/ create and set the subject and issuer unique identity\n+            byte[] issuerId = {1, 2, 3, 4, 5};\n+            byte[] subjectId = {6, 7, 8, 9, 10};\n+            x509CertInfo.setSubjectUniqueId(new UniqueIdentity(subjectId));\n+            x509CertInfo.setIssuerUniqueId(new UniqueIdentity(issuerId));\n+\n+            \/\/ create and set the serial number\n+            BigInteger serialNumber = BigInteger.valueOf(new SecureRandom().nextInt(Integer.MAX_VALUE));\n+            x509CertInfo.setSerialNumber(new CertificateSerialNumber(serialNumber));\n+\n+            \/\/ create and set the validity interval\n+            Date notBefore = new Date(); \/\/ Valid from now\n+            Date notAfter = new Date(System.currentTimeMillis() + 365L * 24 * 60 * 60 * 1000); \/\/ Valid for 1 year\n+            x509CertInfo.setValidity(new CertificateValidity(notBefore, notAfter));\n+\n+            \/\/ Create Certificate Info which is the representation of X509 Certificate.\n+            x509CertInfo.setAlgorithmId(new CertificateAlgorithmId(AlgorithmId.get(\"SHA256withRSA\")));\n+\n+            \/\/ Sign the certificate\n+            Signature signature = Signature.getInstance(\"SHA256withRSA\");\n+            signature.initSign(privateKey);\n+            signature.update(x509CertInfo.getEncodedInfo());\n+            byte[] signedData = signature.sign();\n+            byte[] signedCert = {};\n+\n+            x509Certimpl = new X509CertImpl(x509CertInfo,\n+                    AlgorithmId.get(\"SHA256withRSA\"), signedData, signedCert);\n+        } catch (Exception e) {\n+            System.out.println(\"caught exception while creating the certificate : \" + e.getMessage());\n+            throw e;\n+        }\n+        return x509Certimpl;\n+    }\n+\n+    public static sun.security.x509.CertificateExtensions createCertificateExtensions\n+            (PublicKey publicKey) throws IOException, NoSuchAlgorithmException {\n+        \/\/ Create Extensions\n+        sun.security.x509.CertificateExtensions certificateExtensions =\n+                new sun.security.x509.CertificateExtensions();\n+\n+        GeneralNameInterface mailInf = new RFC822Name(\"test@Oracle.com\");\n+        GeneralName mail = new GeneralName(mailInf);\n+        GeneralNameInterface dnsInf = new DNSName(\"Oracle.com\");\n+        GeneralName dns = new GeneralName(dnsInf);\n+        GeneralNameInterface uriInf = new URIName(\"http:\/\/www.Oracle.com\");\n+        GeneralName uri = new GeneralName(uriInf);\n+\n+        \/\/ localhost\n+        byte[] address = new byte[]{127, 0, 0, 1};\n+\n+        GeneralNameInterface ipInf = new IPAddressName(address);\n+        GeneralName ip = new GeneralName(ipInf);\n+\n+        GeneralNameInterface oidInf = new OIDName(ObjectIdentifier.of(\"1.2.3.4\"));\n+        GeneralName oid = new GeneralName(oidInf);\n+\n+\n+        GeneralNames subjectNames = new GeneralNames();\n+        subjectNames.add(mail);\n+        subjectNames.add(dns);\n+        subjectNames.add(uri);\n+        SubjectAlternativeNameExtension subjectName = new SubjectAlternativeNameExtension(subjectNames);\n+\n+        GeneralNames issuerNames = new GeneralNames();\n+        issuerNames.add(ip);\n+        issuerNames.add(oid);\n+        IssuerAlternativeNameExtension issuerName = new IssuerAlternativeNameExtension(issuerNames);\n+        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(\"America\/Los_Angeles\"));\n+        cal.set(2014, 03, 10, 12, 30, 30);\n+        cal.set(2000, 11, 15, 12, 30, 30);\n+        Date lastDate = cal.getTime();\n+        Date firstDate = new Date();\n+        PrivateKeyUsageExtension pkusage = new PrivateKeyUsageExtension(firstDate, lastDate);\n+\n+        KeyUsageExtension usage = new KeyUsageExtension();\n+        usage.set(KeyUsageExtension.CRL_SIGN, true);\n+        usage.set(KeyUsageExtension.DIGITAL_SIGNATURE, true);\n+        usage.set(KeyUsageExtension.NON_REPUDIATION, true);\n+        MessageDigest md = MessageDigest.getInstance(\"SHA\");\n+\n+        byte[] keyId = md.digest(publicKey.getEncoded());\n+        KeyIdentifier kid = new KeyIdentifier(keyId);\n+        SerialNumber sn = new SerialNumber(42);\n+        AuthorityKeyIdentifierExtension aki = new AuthorityKeyIdentifierExtension(kid, subjectNames, sn);\n+\n+        SubjectKeyIdentifierExtension ski = new SubjectKeyIdentifierExtension(keyId);\n+\n+        BasicConstraintsExtension cons = new BasicConstraintsExtension(true, 10);\n+\n+        PolicyConstraintsExtension pce = new PolicyConstraintsExtension(2, 4);\n+\n+        certificateExtensions.setExtension(SubjectAlternativeNameExtension.NAME, subjectName);\n+        certificateExtensions.setExtension(IssuerAlternativeNameExtension.NAME, issuerName);\n+        certificateExtensions.setExtension(PrivateKeyUsageExtension.NAME, pkusage);\n+        certificateExtensions.setExtension(KeyUsageExtension.NAME, usage);\n+        certificateExtensions.setExtension(AuthorityKeyIdentifierExtension.NAME, aki);\n+        certificateExtensions.setExtension(SubjectKeyIdentifierExtension.NAME, ski);\n+        certificateExtensions.setExtension(BasicConstraintsExtension.NAME, cons);\n+        certificateExtensions.setExtension(PolicyConstraintsExtension.NAME, pce);\n+        return certificateExtensions;\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/x509\/X509CertImpl\/CertExtensions.java","additions":201,"deletions":0,"binary":false,"changes":201,"status":"added"}]}