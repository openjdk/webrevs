{"files":[{"patch":"@@ -829,5 +829,0 @@\n-  } else if (mode == LoopOptsShenandoahPostExpand) {\n-    assert(UseShenandoahGC, \"only for shenandoah\");\n-    visited.clear();\n-    ShenandoahBarrierC2Support::optimize_after_expansion(visited, nstack, worklist, phase);\n-    return true;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -125,2 +125,2 @@\n-  virtual bool strip_mined_loops_expanded(LoopOptsMode mode) const { return mode == LoopOptsShenandoahExpand || mode == LoopOptsShenandoahPostExpand; }\n-  virtual bool is_gc_specific_loop_opts_pass(LoopOptsMode mode) const { return mode == LoopOptsShenandoahExpand || mode == LoopOptsShenandoahPostExpand; }\n+  virtual bool strip_mined_loops_expanded(LoopOptsMode mode) const { return mode == LoopOptsShenandoahExpand; }\n+  virtual bool is_gc_specific_loop_opts_pass(LoopOptsMode mode) const { return mode == LoopOptsShenandoahExpand; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,6 +55,0 @@\n-\n-    C->set_major_progress();\n-    if (!C->optimize_loops(igvn, LoopOptsShenandoahPostExpand)) {\n-      return false;\n-    }\n-    C->clear_major_progress();\n@@ -1508,230 +1502,0 @@\n-void ShenandoahBarrierC2Support::move_gc_state_test_out_of_loop(IfNode* iff, PhaseIdealLoop* phase) {\n-  IdealLoopTree *loop = phase->get_loop(iff);\n-  Node* loop_head = loop->_head;\n-  Node* entry_c = loop_head->in(LoopNode::EntryControl);\n-\n-  Node* bol = iff->in(1);\n-  Node* cmp = bol->in(1);\n-  Node* andi = cmp->in(1);\n-  Node* load = andi->in(1);\n-\n-  assert(is_gc_state_load(load), \"broken\");\n-  if (!phase->is_dominator(load->in(0), entry_c)) {\n-    Node* mem_ctrl = nullptr;\n-    Node* mem = dom_mem(load->in(MemNode::Memory), loop_head, Compile::AliasIdxRaw, mem_ctrl, phase);\n-    load = load->clone();\n-    load->set_req(MemNode::Memory, mem);\n-    load->set_req(0, entry_c);\n-    phase->register_new_node(load, entry_c);\n-    andi = andi->clone();\n-    andi->set_req(1, load);\n-    phase->register_new_node(andi, entry_c);\n-    cmp = cmp->clone();\n-    cmp->set_req(1, andi);\n-    phase->register_new_node(cmp, entry_c);\n-    bol = bol->clone();\n-    bol->set_req(1, cmp);\n-    phase->register_new_node(bol, entry_c);\n-\n-    phase->igvn().replace_input_of(iff, 1, bol);\n-  }\n-}\n-\n-bool ShenandoahBarrierC2Support::identical_backtoback_ifs(Node* n, PhaseIdealLoop* phase) {\n-  if (!n->is_If() || n->is_CountedLoopEnd()) {\n-    return false;\n-  }\n-  Node* region = n->in(0);\n-\n-  if (!region->is_Region()) {\n-    return false;\n-  }\n-  Node* dom = phase->idom(region);\n-  if (!dom->is_If()) {\n-    return false;\n-  }\n-\n-  if (!is_heap_stable_test(n) || !is_heap_stable_test(dom)) {\n-    return false;\n-  }\n-\n-  IfNode* dom_if = dom->as_If();\n-  Node* proj_true = dom_if->proj_out(1);\n-  Node* proj_false = dom_if->proj_out(0);\n-\n-  for (uint i = 1; i < region->req(); i++) {\n-    if (phase->is_dominator(proj_true, region->in(i))) {\n-      continue;\n-    }\n-    if (phase->is_dominator(proj_false, region->in(i))) {\n-      continue;\n-    }\n-    return false;\n-  }\n-\n-  return true;\n-}\n-\n-bool ShenandoahBarrierC2Support::merge_point_safe(Node* region) {\n-  for (DUIterator_Fast imax, i = region->fast_outs(imax); i < imax; i++) {\n-    Node* n = region->fast_out(i);\n-    if (n->is_LoadStore()) {\n-      \/\/ Splitting a LoadStore node through phi, causes it to lose its SCMemProj: the split if code doesn't have support\n-      \/\/ for a LoadStore at the region the if is split through because that's not expected to happen (LoadStore nodes\n-      \/\/ should be between barrier nodes). It does however happen with Shenandoah though because barriers can get\n-      \/\/ expanded around a LoadStore node.\n-      return false;\n-    }\n-  }\n-  return true;\n-}\n-\n-\n-void ShenandoahBarrierC2Support::merge_back_to_back_tests(Node* n, PhaseIdealLoop* phase) {\n-  assert(is_heap_stable_test(n), \"no other tests\");\n-  if (identical_backtoback_ifs(n, phase)) {\n-    Node* n_ctrl = n->in(0);\n-    if (phase->can_split_if(n_ctrl) && merge_point_safe(n_ctrl)) {\n-      IfNode* dom_if = phase->idom(n_ctrl)->as_If();\n-      if (is_heap_stable_test(n)) {\n-        Node* gc_state_load = n->in(1)->in(1)->in(1)->in(1);\n-        assert(is_gc_state_load(gc_state_load), \"broken\");\n-        Node* dom_gc_state_load = dom_if->in(1)->in(1)->in(1)->in(1);\n-        assert(is_gc_state_load(dom_gc_state_load), \"broken\");\n-        if (gc_state_load != dom_gc_state_load) {\n-          phase->igvn().replace_node(gc_state_load, dom_gc_state_load);\n-        }\n-      }\n-      PhiNode* bolphi = PhiNode::make_blank(n_ctrl, n->in(1));\n-      Node* proj_true = dom_if->proj_out(1);\n-      Node* proj_false = dom_if->proj_out(0);\n-      Node* con_true = phase->igvn().makecon(TypeInt::ONE);\n-      Node* con_false = phase->igvn().makecon(TypeInt::ZERO);\n-\n-      for (uint i = 1; i < n_ctrl->req(); i++) {\n-        if (phase->is_dominator(proj_true, n_ctrl->in(i))) {\n-          bolphi->init_req(i, con_true);\n-        } else {\n-          assert(phase->is_dominator(proj_false, n_ctrl->in(i)), \"bad if\");\n-          bolphi->init_req(i, con_false);\n-        }\n-      }\n-      phase->register_new_node(bolphi, n_ctrl);\n-      phase->igvn().replace_input_of(n, 1, bolphi);\n-      phase->do_split_if(n);\n-    }\n-  }\n-}\n-\n-IfNode* ShenandoahBarrierC2Support::find_unswitching_candidate(const IdealLoopTree* loop, PhaseIdealLoop* phase) {\n-  \/\/ Find first invariant test that doesn't exit the loop\n-  LoopNode *head = loop->_head->as_Loop();\n-  IfNode* unswitch_iff = nullptr;\n-  Node* n = head->in(LoopNode::LoopBackControl);\n-  int loop_has_sfpts = -1;\n-  while (n != head) {\n-    Node* n_dom = phase->idom(n);\n-    if (n->is_Region()) {\n-      if (n_dom->is_If()) {\n-        IfNode* iff = n_dom->as_If();\n-        if (iff->in(1)->is_Bool()) {\n-          BoolNode* bol = iff->in(1)->as_Bool();\n-          if (bol->in(1)->is_Cmp()) {\n-            \/\/ If condition is invariant and not a loop exit,\n-            \/\/ then found reason to unswitch.\n-            if (is_heap_stable_test(iff) &&\n-                (loop_has_sfpts == -1 || loop_has_sfpts == 0)) {\n-              assert(!loop->is_loop_exit(iff), \"both branches should be in the loop\");\n-              if (loop_has_sfpts == -1) {\n-                for(uint i = 0; i < loop->_body.size(); i++) {\n-                  Node *m = loop->_body[i];\n-                  if (m->is_SafePoint() && !m->is_CallLeaf()) {\n-                    loop_has_sfpts = 1;\n-                    break;\n-                  }\n-                }\n-                if (loop_has_sfpts == -1) {\n-                  loop_has_sfpts = 0;\n-                }\n-              }\n-              if (!loop_has_sfpts) {\n-                unswitch_iff = iff;\n-              }\n-            }\n-          }\n-        }\n-      }\n-    }\n-    n = n_dom;\n-  }\n-  return unswitch_iff;\n-}\n-\n-\n-void ShenandoahBarrierC2Support::optimize_after_expansion(VectorSet &visited, Node_Stack &stack, Node_List &old_new, PhaseIdealLoop* phase) {\n-  Node_List heap_stable_tests;\n-  stack.push(phase->C->start(), 0);\n-  do {\n-    Node* n = stack.node();\n-    uint i = stack.index();\n-\n-    if (i < n->outcnt()) {\n-      Node* u = n->raw_out(i);\n-      stack.set_index(i+1);\n-      if (!visited.test_set(u->_idx)) {\n-        stack.push(u, 0);\n-      }\n-    } else {\n-      stack.pop();\n-      if (n->is_If() && is_heap_stable_test(n)) {\n-        heap_stable_tests.push(n);\n-      }\n-    }\n-  } while (stack.size() > 0);\n-\n-  for (uint i = 0; i < heap_stable_tests.size(); i++) {\n-    Node* n = heap_stable_tests.at(i);\n-    assert(is_heap_stable_test(n), \"only evacuation test\");\n-    merge_back_to_back_tests(n, phase);\n-  }\n-\n-  if (!phase->C->major_progress()) {\n-    VectorSet seen;\n-    for (uint i = 0; i < heap_stable_tests.size(); i++) {\n-      Node* n = heap_stable_tests.at(i);\n-      IdealLoopTree* loop = phase->get_loop(n);\n-      if (loop != phase->ltree_root() &&\n-          loop->_child == nullptr &&\n-          !loop->_irreducible) {\n-        Node* head = loop->_head;\n-        if (head->is_Loop() &&\n-            (!head->is_CountedLoop() || head->as_CountedLoop()->is_main_loop() || head->as_CountedLoop()->is_normal_loop()) &&\n-            !seen.test_set(head->_idx)) {\n-          IfNode* iff = find_unswitching_candidate(loop, phase);\n-          if (iff != nullptr) {\n-            Node* bol = iff->in(1);\n-            if (head->as_Loop()->is_strip_mined()) {\n-              head->as_Loop()->verify_strip_mined(0);\n-            }\n-            move_gc_state_test_out_of_loop(iff, phase);\n-\n-            AutoNodeBudget node_budget(phase);\n-\n-            if (loop->policy_unswitching(phase)) {\n-              if (head->as_Loop()->is_strip_mined()) {\n-                OuterStripMinedLoopNode* outer = head->as_CountedLoop()->outer_loop();\n-                hide_strip_mined_loop(outer, head->as_CountedLoop(), phase);\n-              }\n-              phase->do_unswitching(loop, old_new);\n-            } else {\n-              \/\/ Not proceeding with unswitching. Move load back in\n-              \/\/ the loop.\n-              phase->igvn().replace_input_of(iff, 1, bol);\n-            }\n-          }\n-        }\n-      }\n-    }\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":0,"deletions":236,"binary":false,"changes":236,"status":"modified"},{"patch":"@@ -66,4 +66,0 @@\n-  static void move_gc_state_test_out_of_loop(IfNode* iff, PhaseIdealLoop* phase);\n-  static void merge_back_to_back_tests(Node* n, PhaseIdealLoop* phase);\n-  static bool merge_point_safe(Node* region);\n-  static bool identical_backtoback_ifs(Node *n, PhaseIdealLoop* phase);\n@@ -71,1 +67,0 @@\n-  static IfNode* find_unswitching_candidate(const IdealLoopTree *loop, PhaseIdealLoop* phase);\n@@ -83,1 +78,0 @@\n-  static void optimize_after_expansion(VectorSet& visited, Node_Stack& nstack, Node_List& old_new, PhaseIdealLoop* phase);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -107,1 +107,0 @@\n-  LoopOptsShenandoahPostExpand,\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-    @IR(counts = { IRNode.IF, \"3\" }, phase = CompilePhase.BARRIER_EXPANSION)\n+    @IR(counts = { IRNode.IF, \"4\" }, phase = CompilePhase.BARRIER_EXPANSION)\n","filename":"test\/hotspot\/jtreg\/compiler\/gcbarriers\/TestShenandoahBarrierExpansion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}