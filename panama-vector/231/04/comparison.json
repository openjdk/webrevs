{"files":[{"patch":"@@ -1911,0 +1911,4 @@\n+      if (!VM_Version::supports_f16c() && !VM_Version::supports_evex()) {\n+        return false;\n+      }\n+      break;\n@@ -10915,0 +10919,1 @@\n+    __ movswl($dst$$Register, $dst$$Register);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1007,1 +1007,0 @@\n-                                      \"Ljava\/lang\/Class;\"                                                                                      \\\n@@ -1021,1 +1020,0 @@\n-                                       \"Ljava\/lang\/Class;\"                                                                                     \\\n@@ -1059,1 +1057,0 @@\n-                                        \"Ljava\/lang\/Class;\"                                                                                    \\\n@@ -1072,1 +1069,0 @@\n-                                            \"Ljava\/lang\/Class;\"                                                                                \\\n@@ -1085,1 +1081,0 @@\n-                                               \"Ljava\/lang\/Class;\"                                                                             \\\n@@ -1098,1 +1093,0 @@\n-                                     \"Ljava\/lang\/Class;\"                                                                                       \\\n@@ -1114,1 +1108,0 @@\n-                                            \"Ljava\/lang\/Class;\"                                                                                \\\n@@ -1133,1 +1126,0 @@\n-                                      \"Ljava\/lang\/Class;\"                                                                                      \\\n@@ -1149,1 +1141,0 @@\n-                                             \"Ljava\/lang\/Class;\"                                                                               \\\n@@ -1170,1 +1161,0 @@\n-                                               \"Ljava\/lang\/Class;\"                                                                             \\\n@@ -1181,1 +1171,0 @@\n-                                  \"Ljava\/lang\/Class;\"                                                                                          \\\n@@ -1194,1 +1183,0 @@\n-                                   \"Ljava\/lang\/Class;\"                                                                                         \\\n@@ -1211,1 +1199,0 @@\n-                                     \"Ljava\/lang\/Class;\"                                                                                       \\\n@@ -1226,1 +1213,0 @@\n-                                       \"Ljava\/lang\/Class;\"                                                                                     \\\n@@ -1238,1 +1224,0 @@\n-                                        \"Ljava\/lang\/Class;\"                                                                                     \\\n@@ -1252,1 +1237,0 @@\n-                                     \"Ljava\/lang\/Class;\"                                                                                       \\\n@@ -1264,1 +1248,0 @@\n-                                    \"Ljava\/lang\/Class;\"                                                                                        \\\n@@ -1279,1 +1262,0 @@\n-                                           \"Ljava\/lang\/Class;\"                                                                                 \\\n@@ -1305,1 +1287,0 @@\n-                                     \"Ljava\/lang\/Class;\"                                                                                       \\\n@@ -1328,1 +1309,0 @@\n-                                      \"Ljava\/lang\/Class;\"                                                                                      \\\n@@ -1352,1 +1332,0 @@\n-                                        \"Ljava\/lang\/Class;\"                                                                                    \\\n@@ -1367,1 +1346,0 @@\n-                                      \"Ljava\/lang\/Class;\"                                                                                      \\\n@@ -1378,1 +1356,0 @@\n-                                       \"Ljava\/lang\/Class;\"                                                                                     \\\n@@ -1391,1 +1368,0 @@\n-                                                     \"Ljava\/lang\/Class;\"                                                                                       \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -38,0 +38,12 @@\n+static const char* get_opertype_string(int operType) {\n+  switch(operType) {\n+    case VectorSupport::VECTOR_TYPE_PRIM:\n+      return \"VECTOR_TYPE_PRIM\";\n+    case VectorSupport::VECTOR_TYPE_FP16:\n+      return \"VECTOR_TYPE_FP16\";\n+    default:\n+      ShouldNotReachHere();\n+      return nullptr;\n+  }\n+}\n+\n@@ -296,1 +308,1 @@\n-\/\/            Class<? extends V> vClass, Class<? extends M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/            Class<? extends V> vClass, Class<? extends M> mClass, Class<?> cClass, int operType,\n@@ -306,1 +318,1 @@\n-\/\/              Class<? extends VM> vmClass, Class<? extends M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/              Class<? extends VM> vmClass, Class<? extends M> mClass, Class<?> cClass, int operType,\n@@ -317,1 +329,1 @@\n-\/\/              Class<? extends V> vClass, Class<? extends M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/              Class<? extends V> vClass, Class<? extends M> mClass, Class<?> cClass, int operType,\n@@ -328,2 +340,2 @@\n-  const TypeInt*     opr_type     = gvn().type(argument(5))->isa_int();\n-  const TypeInt*     vlen         = gvn().type(argument(6))->isa_int();\n+  const TypeInt*     operType     = gvn().type(argument(4))->isa_int();\n+  const TypeInt*     vlen         = gvn().type(argument(5))->isa_int();\n@@ -331,1 +343,2 @@\n-  if (opr          == nullptr || !opr->is_con() || !opr_type->is_con() ||\n+  if (opr          == nullptr || !opr->is_con() ||\n+      operType     == nullptr || !operType->is_con() ||\n@@ -335,1 +348,1 @@\n-    log_if_needed(\"  ** missing constant: opr=%s opr_type = %s vclass=%s etype=%s vlen=%s\",\n+    log_if_needed(\"  ** missing constant: opr=%s vclass=%s etype=%s operType=%s vlen=%s\",\n@@ -337,1 +350,0 @@\n-                    NodeClassNames[argument(5)->Opcode()],\n@@ -340,1 +352,2 @@\n-                    NodeClassNames[argument(4)->Opcode()]);\n+                    NodeClassNames[argument(4)->Opcode()],\n+                    NodeClassNames[argument(5)->Opcode()]);\n@@ -345,2 +358,1 @@\n-  if (!elem_type->is_primitive_type() ||\n-      opr_type->get_con() != VectorSupport::VECTOR_TYPE_PRIM) {\n+  if (!elem_type->is_primitive_type()) {\n@@ -357,1 +369,1 @@\n-  const Type* vmask_type = gvn().type(argument(n + 7));\n+  const Type* vmask_type = gvn().type(argument(n + 6));\n@@ -381,1 +393,1 @@\n-  int opc = VectorSupport::vop2ideal(opr->get_con(), elem_bt);\n+  int opc = VectorSupport::vop2ideal(opr->get_con(), elem_bt, operType->get_con());\n@@ -416,1 +428,1 @@\n-      opd3 = unbox_vector(argument(9), vbox_type, elem_bt, num_elem);\n+      opd3 = unbox_vector(argument(8), vbox_type, elem_bt, num_elem);\n@@ -419,1 +431,1 @@\n-                        NodeClassNames[argument(7)->Opcode()]);\n+                        NodeClassNames[argument(8)->Opcode()]);\n@@ -425,1 +437,1 @@\n-      opd2 = unbox_vector(argument(8), vbox_type, elem_bt, num_elem);\n+      opd2 = unbox_vector(argument(7), vbox_type, elem_bt, num_elem);\n@@ -428,1 +440,1 @@\n-                        NodeClassNames[argument(6)->Opcode()]);\n+                        NodeClassNames[argument(7)->Opcode()]);\n@@ -434,1 +446,1 @@\n-      opd1 = unbox_vector(argument(7), vbox_type, elem_bt, num_elem);\n+      opd1 = unbox_vector(argument(6), vbox_type, elem_bt, num_elem);\n@@ -437,1 +449,1 @@\n-                        NodeClassNames[argument(5)->Opcode()]);\n+                        NodeClassNames[argument(6)->Opcode()]);\n@@ -450,1 +462,1 @@\n-    mask = unbox_vector(argument(n + 7), mbox_type, elem_bt, num_elem);\n+    mask = unbox_vector(argument(n + 6), mbox_type, elem_bt, num_elem);\n@@ -453,1 +465,1 @@\n-                      NodeClassNames[argument(n + 7)->Opcode()]);\n+                      NodeClassNames[argument(n + 6)->Opcode()]);\n@@ -495,1 +507,1 @@\n-\/\/  V libraryUnaryOp(long addr, Class<? extends V> vClass, Class<?> cClass, Class<E> eClass, int operType, int length, String debugName,\n+\/\/  V libraryUnaryOp(long addr, Class<? extends V> vClass, Class<?> cClass, int operType, int length, String debugName,\n@@ -501,1 +513,1 @@\n-\/\/  V libraryBinaryOp(long addr, Class<? extends V> vClass, Class<?> cClass, Class<E> eClass, int operType, int length, String debugName,\n+\/\/  V libraryBinaryOp(long addr, Class<? extends V> vClass, Class<?> cClass, int operType, int length, String debugName,\n@@ -511,2 +523,3 @@\n-  const TypeInt*     vlen           = gvn().type(argument(6))->isa_int();\n-  const TypeInstPtr* debug_name_oop = gvn().type(argument(7))->isa_instptr();\n+  const TypeInt*     operType       = gvn().type(argument(4))->isa_int();\n+  const TypeInt*     vlen           = gvn().type(argument(5))->isa_int();\n+  const TypeInstPtr* debug_name_oop = gvn().type(argument(6))->isa_instptr();\n@@ -517,1 +530,2 @@\n-      vlen         == nullptr   || !vlen->is_con() ||\n+      operType     == nullptr   || !operType->is_con() ||\n+      vlen  == nullptr   || !vlen->is_con() ||\n@@ -519,1 +533,1 @@\n-    log_if_needed(\"  ** missing constant: opr=%s vclass=%s etype=%s vlen=%s debug_name=%s\",\n+    log_if_needed(\"  ** missing constant: opr=%s vclass=%s etype=%s operType=%s vlen=%s debug_name=%s\",\n@@ -523,2 +537,3 @@\n-                  NodeClassNames[argument(6)->Opcode()],\n-                  NodeClassNames[argument(7)->Opcode()]);\n+                  NodeClassNames[argument(4)->Opcode()],\n+                  NodeClassNames[argument(5)->Opcode()],\n+                  NodeClassNames[argument(6)->Opcode()]);\n@@ -533,0 +548,5 @@\n+  if (operType->get_con() != VectorSupport::VECTOR_TYPE_PRIM) {\n+    log_if_needed(\"  ** unhandled operType=%s\", get_opertype_string(operType->get_con()));\n+    return false;\n+  }\n+\n@@ -554,1 +574,1 @@\n-  Node* opd1 = unbox_vector(argument(8), vbox_type, elem_bt, num_elem);\n+  Node* opd1 = unbox_vector(argument(7), vbox_type, elem_bt, num_elem);\n@@ -556,1 +576,1 @@\n-    log_if_needed(\"  ** unbox failed v1=%s\", NodeClassNames[argument(8)->Opcode()]);\n+    log_if_needed(\"  ** unbox failed v1=%s\", NodeClassNames[argument(7)->Opcode()]);\n@@ -562,1 +582,1 @@\n-    opd2 = unbox_vector(argument(9), vbox_type, elem_bt, num_elem);\n+    opd2 = unbox_vector(argument(8), vbox_type, elem_bt, num_elem);\n@@ -564,1 +584,1 @@\n-      log_if_needed(\"  ** unbox failed v2=%s\", NodeClassNames[argument(9)->Opcode()]);\n+      log_if_needed(\"  ** unbox failed v2=%s\", NodeClassNames[argument(8)->Opcode()]);\n@@ -601,1 +621,1 @@\n-\/\/                            Class<? extends M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/                            Class<? extends M> mClass, Class<?> cClass, int operType,\n@@ -610,2 +630,3 @@\n-  const TypeInt*     vlen       = gvn().type(argument(5))->isa_int();\n-  Node*              mask       = argument(6);\n+  const TypeInt*     operType   = gvn().type(argument(3))->isa_int();\n+  const TypeInt*     vlen       = gvn().type(argument(4))->isa_int();\n+  Node*              mask       = argument(5);\n@@ -615,0 +636,1 @@\n+      operType   == nullptr || !operType->is_con() ||\n@@ -621,0 +643,5 @@\n+  if (operType->get_con() != VectorSupport::VECTOR_TYPE_PRIM) {\n+    log_if_needed(\"  ** unhandled operType=%s\", get_opertype_string(operType->get_con()));\n+    return false;\n+  }\n+\n@@ -648,1 +675,1 @@\n-                      NodeClassNames[argument(6)->Opcode()]);\n+                      NodeClassNames[argument(5)->Opcode()]);\n@@ -671,1 +698,1 @@\n-\/\/  VM fromBitsCoerced(Class<? extends VM> vmClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/  VM fromBitsCoerced(Class<? extends VM> vmClass, Class<?> cClass, int operType,\n@@ -679,2 +706,3 @@\n-  const TypeInt*     vlen         = gvn().type(argument(4))->isa_int();\n-  const TypeLong*    bits_type    = gvn().type(argument(5))->isa_long();\n+  const TypeInt*     operType     = gvn().type(argument(2))->isa_int();\n+  const TypeInt*     vlen         = gvn().type(argument(3))->isa_int();\n+  const TypeLong*    bits_type    = gvn().type(argument(4))->isa_long();\n@@ -684,1 +712,1 @@\n-  const TypeInt*     mode         = gvn().type(argument(7))->isa_int();\n+  const TypeInt*     mode         = gvn().type(argument(6))->isa_int();\n@@ -688,0 +716,1 @@\n+      operType     == nullptr || !operType->is_con() ||\n@@ -691,1 +720,1 @@\n-    log_if_needed(\"  ** missing constant: vclass=%s etype=%s vlen=%s bitwise=%s\",\n+    log_if_needed(\"  ** missing constant: vclass=%s etype=%s operType=%s vlen=%s bitwise=%s\",\n@@ -694,2 +723,3 @@\n-                    NodeClassNames[argument(4)->Opcode()],\n-                    NodeClassNames[argument(7)->Opcode()]);\n+                    NodeClassNames[argument(2)->Opcode()],\n+                    NodeClassNames[argument(3)->Opcode()],\n+                    NodeClassNames[argument(6)->Opcode()]);\n@@ -699,0 +729,6 @@\n+\n+  if (operType->get_con() != VectorSupport::VECTOR_TYPE_PRIM) {\n+    log_if_needed(\"  ** unhandled operType=%s\", get_opertype_string(operType->get_con()));\n+    return false;\n+  }\n+\n@@ -736,1 +772,1 @@\n-  Node* bits = argument(5);\n+  Node* bits = argument(4);\n@@ -805,1 +841,1 @@\n-\/\/  VM load(Class<? extends VM> vmClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/  VM load(Class<? extends VM> vmClass, Class<?> cClass, int operType,\n@@ -815,1 +851,1 @@\n-\/\/  void store(Class<?> vClass, Class<?> cClass, Class<?> eClass, int operType,\n+\/\/  void store(Class<?> vClass, Class<?> cClass, int operType,\n@@ -824,2 +860,3 @@\n-  const TypeInt*     vlen         = gvn().type(argument(4))->isa_int();\n-  const TypeInt*     from_ms      = gvn().type(argument(8))->isa_int();\n+  const TypeInt*     operType     = gvn().type(argument(2))->isa_int();\n+  const TypeInt*     vlen         = gvn().type(argument(3))->isa_int();\n+  const TypeInt*     from_ms      = gvn().type(argument(7))->isa_int();\n@@ -829,0 +866,1 @@\n+      operType     == nullptr || !operType->is_con() ||\n@@ -831,1 +869,1 @@\n-    log_if_needed(\"  ** missing constant: vclass=%s etype=%s vlen=%s from_ms=%s\",\n+    log_if_needed(\"  ** missing constant: vclass=%s etype=%s operType=%s vlen=%s from_ms=%s\",\n@@ -834,2 +872,3 @@\n-                    NodeClassNames[argument(4)->Opcode()],\n-                    NodeClassNames[argument(8)->Opcode()]);\n+                    NodeClassNames[argument(2)->Opcode()],\n+                    NodeClassNames[argument(3)->Opcode()],\n+                    NodeClassNames[argument(7)->Opcode()]);\n@@ -862,2 +901,2 @@\n-  Node* base = argument(5);\n-  Node* offset = ConvL2X(argument(6));\n+  Node* base = argument(4);\n+  Node* offset = ConvL2X(argument(5));\n@@ -945,1 +984,1 @@\n-    Node* val = unbox_vector(argument(9), vbox_type, elem_bt, num_elem);\n+    Node* val = unbox_vector(argument(8), vbox_type, elem_bt, num_elem);\n@@ -1000,1 +1039,1 @@\n-\/\/  V loadMasked(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/  V loadMasked(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, int operType,\n@@ -1011,1 +1050,1 @@\n-\/\/  void storeMasked(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/  void storeMasked(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, int operType,\n@@ -1022,2 +1061,3 @@\n-  const TypeInt*     vlen         = gvn().type(argument(5))->isa_int();\n-  const TypeInt*     from_ms      = gvn().type(argument(9))->isa_int();\n+  const TypeInt*     operType     = gvn().type(argument(3))->isa_int();\n+  const TypeInt*     vlen         = gvn().type(argument(4))->isa_int();\n+  const TypeInt*     from_ms      = gvn().type(argument(8))->isa_int();\n@@ -1028,0 +1068,1 @@\n+      operType     == nullptr || !operType->is_con() ||\n@@ -1030,1 +1071,1 @@\n-    log_if_needed(\"  ** missing constant: vclass=%s mclass=%s etype=%s vlen=%s from_ms=%s\",\n+    log_if_needed(\"  ** missing constant: vclass=%s mclass=%s etype=%s operType=%s vlen=%s from_ms=%s\",\n@@ -1034,2 +1075,3 @@\n-                    NodeClassNames[argument(5)->Opcode()],\n-                    NodeClassNames[argument(9)->Opcode()]);\n+                    NodeClassNames[argument(3)->Opcode()],\n+                    NodeClassNames[argument(4)->Opcode()],\n+                    NodeClassNames[argument(8)->Opcode()]);\n@@ -1038,0 +1080,1 @@\n+\n@@ -1057,2 +1100,2 @@\n-  Node* base = argument(6);\n-  Node* offset = ConvL2X(argument(7));\n+  Node* base = argument(5);\n+  Node* offset = ConvL2X(argument(6));\n@@ -1091,1 +1134,1 @@\n-      const TypeInt* offset_in_range = gvn().type(argument(11))->isa_int();\n+      const TypeInt* offset_in_range = gvn().type(argument(10))->isa_int();\n@@ -1149,1 +1192,1 @@\n-  Node* mask = unbox_vector(is_store ? argument(11) : argument(10), mbox_type, elem_bt, num_elem);\n+  Node* mask = unbox_vector(is_store ? argument(10) : argument(9), mbox_type, elem_bt, num_elem);\n@@ -1152,2 +1195,2 @@\n-                    is_store ? NodeClassNames[argument(11)->Opcode()]\n-                             : NodeClassNames[argument(10)->Opcode()]);\n+                    is_store ? NodeClassNames[argument(10)->Opcode()]\n+                             : NodeClassNames[argument(9)->Opcode()]);\n@@ -1158,1 +1201,1 @@\n-    Node* val = unbox_vector(argument(10), vbox_type, elem_bt, num_elem);\n+    Node* val = unbox_vector(argument(9), vbox_type, elem_bt, num_elem);\n@@ -1161,1 +1204,1 @@\n-                      NodeClassNames[argument(10)->Opcode()]);\n+                      NodeClassNames[argument(9)->Opcode()]);\n@@ -1226,1 +1269,1 @@\n-\/\/  V loadWithMap(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/  V loadWithMap(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, int operType,\n@@ -1239,1 +1282,1 @@\n-\/\/  void storeWithMap(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/  void storeWithMap(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, int operType,\n@@ -1252,3 +1295,4 @@\n-  const TypeInt*     vlen             = gvn().type(argument(5))->isa_int();\n-  const TypeInstPtr* vector_idx_klass = gvn().type(argument(6))->isa_instptr();\n-  const TypeInt*     idx_vlen         = gvn().type(argument(7))->isa_int();\n+  const TypeInt*     operType         = gvn().type(argument(3))->isa_int();\n+  const TypeInt*     vlen             = gvn().type(argument(4))->isa_int();\n+  const TypeInstPtr* vector_idx_klass = gvn().type(argument(5))->isa_instptr();\n+  const TypeInt*     idx_vlen         = gvn().type(argument(6))->isa_int();\n@@ -1258,0 +1302,1 @@\n+      operType         == nullptr || !operType->is_con() ||\n@@ -1261,1 +1306,1 @@\n-    log_if_needed(\"  ** missing constant: vclass=%s etype=%s vlen=%s viclass=%s idx_vlen=%s\",\n+    log_if_needed(\"  ** missing constant: vclass=%s etype=%s operType=%s vlen=%s viclass=%s idx_vlen=%s\",\n@@ -1264,0 +1309,2 @@\n+                    NodeClassNames[argument(3)->Opcode()],\n+                    NodeClassNames[argument(4)->Opcode()],\n@@ -1265,2 +1312,1 @@\n-                    NodeClassNames[argument(6)->Opcode()],\n-                    NodeClassNames[argument(7)->Opcode()]);\n+                    NodeClassNames[argument(6)->Opcode()]);\n@@ -1285,1 +1331,1 @@\n-  Node* m = is_scatter ? argument(13) : argument(15);\n+  Node* m = is_scatter ? argument(12) : argument(14);\n@@ -1331,2 +1377,2 @@\n-  Node* base = argument(8);\n-  Node* offset = ConvL2X(argument(9));\n+  Node* base = argument(7);\n+  Node* offset = ConvL2X(argument(8));\n@@ -1345,1 +1391,1 @@\n-    Node* index = argument(17);\n+    Node* index = argument(16);\n@@ -1371,2 +1417,2 @@\n-    Node* indexMap = argument(18);\n-    Node* indexM   = argument(19);\n+    Node* indexMap = argument(17);\n+    Node* indexM   = argument(18);\n@@ -1376,1 +1422,1 @@\n-    indexes = unbox_vector(argument(11), vbox_idx_type, T_INT, idx_num_elem);\n+    indexes = unbox_vector(argument(10), vbox_idx_type, T_INT, idx_num_elem);\n@@ -1396,1 +1442,1 @@\n-    Node* val = unbox_vector(argument(12), vbox_type, elem_bt, num_elem);\n+    Node* val = unbox_vector(argument(11), vbox_type, elem_bt, num_elem);\n@@ -1431,1 +1477,1 @@\n-\/\/                        Class<? extends V> vClass, Class<? extends M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/                        Class<? extends V> vClass, Class<? extends M> mClass, Class<?> cClass, int operType,\n@@ -1441,1 +1487,2 @@\n-  const TypeInt*     vlen         = gvn().type(argument(6))->isa_int();\n+  const TypeInt*     operType     = gvn().type(argument(4))->isa_int();\n+  const TypeInt*     vlen         = gvn().type(argument(5))->isa_int();\n@@ -1443,1 +1490,1 @@\n-  if (opr          == nullptr || !opr->is_con() ||\n+  if (opr          == nullptr || !opr->is_con() || !operType->is_con() ||\n@@ -1447,1 +1494,1 @@\n-    log_if_needed(\"  ** missing constant: opr=%s vclass=%s etype=%s vlen=%s\",\n+    log_if_needed(\"  ** missing constant: opr=%s vclass=%s etype=%s operType=%s vlen=%s\",\n@@ -1451,1 +1498,2 @@\n-                    NodeClassNames[argument(4)->Opcode()]);\n+                    NodeClassNames[argument(4)->Opcode()],\n+                    NodeClassNames[argument(5)->Opcode()]);\n@@ -1463,0 +1511,4 @@\n+  if (operType->get_con() != VectorSupport::VECTOR_TYPE_PRIM) {\n+    log_if_needed(\"  ** unhandled operType=%s\", get_opertype_string(operType->get_con()));\n+    return false;\n+  }\n@@ -1464,1 +1516,1 @@\n-  const Type* vmask_type = gvn().type(argument(8));\n+  const Type* vmask_type = gvn().type(argument(7));\n@@ -1468,1 +1520,1 @@\n-      log_if_needed(\"  ** missing constant: maskclass=%s\", NodeClassNames[argument(4)->Opcode()]);\n+      log_if_needed(\"  ** missing constant: maskclass=%s\", NodeClassNames[argument(2)->Opcode()]);\n@@ -1507,1 +1559,1 @@\n-  Node* opd = unbox_vector(argument(7), vbox_type, elem_bt, num_elem);\n+  Node* opd = unbox_vector(argument(6), vbox_type, elem_bt, num_elem);\n@@ -1517,1 +1569,1 @@\n-    mask = unbox_vector(argument(8), mbox_type, elem_bt, num_elem);\n+    mask = unbox_vector(argument(7), mbox_type, elem_bt, num_elem);\n@@ -1520,1 +1572,1 @@\n-                      NodeClassNames[argument(8)->Opcode()]);\n+                      NodeClassNames[argument(7)->Opcode()]);\n@@ -1580,1 +1632,1 @@\n-\/\/               Class<?> mClass, Class<?> cClass, Class<E> eClass, int opType,\n+\/\/               Class<?> mClass, Class<?> cClass, int operType,\n@@ -1590,1 +1642,2 @@\n-  const TypeInt*     vlen         = gvn().type(argument(5))->isa_int();\n+  const TypeInt*     operType     = gvn().type(argument(3))->isa_int();\n+  const TypeInt*     vlen         = gvn().type(argument(4))->isa_int();\n@@ -1595,0 +1648,1 @@\n+      operType     == nullptr || !operType->is_con() ||\n@@ -1596,1 +1650,1 @@\n-    log_if_needed(\"  ** missing constant: cond=%s vclass=%s etype=%s vlen=%s\",\n+    log_if_needed(\"  ** missing constant: cond=%s vclass=%s etype=%s operType=%s vlen=%s\",\n@@ -1600,1 +1654,2 @@\n-                    NodeClassNames[argument(5)->Opcode()]);\n+                    NodeClassNames[argument(3)->Opcode()],\n+                    NodeClassNames[argument(4)->Opcode()]);\n@@ -1603,0 +1658,6 @@\n+\n+  if (operType->get_con() != VectorSupport::VECTOR_TYPE_PRIM) {\n+    log_if_needed(\"  ** unhandled operType=%s\", get_opertype_string(operType->get_con()));\n+    return false;\n+  }\n+\n@@ -1625,1 +1686,1 @@\n-  Node* opd1 = unbox_vector(argument(6), vbox_type, elem_bt, num_elem);\n+  Node* opd1 = unbox_vector(argument(5), vbox_type, elem_bt, num_elem);\n@@ -1629,1 +1690,1 @@\n-    opd2 = unbox_vector(argument(7), vbox_type, elem_bt, num_elem);\n+    opd2 = unbox_vector(argument(6), vbox_type, elem_bt, num_elem);\n@@ -1653,1 +1714,1 @@\n-\/\/  V blend(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/  V blend(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, int operType,\n@@ -1662,1 +1723,2 @@\n-  const TypeInt*     vlen         = gvn().type(argument(5))->isa_int();\n+  const TypeInt*     operType     = gvn().type(argument(3))->isa_int();\n+  const TypeInt*     vlen         = gvn().type(argument(4))->isa_int();\n@@ -1664,1 +1726,1 @@\n-  if (mask_klass == nullptr || vector_klass == nullptr || elem_klass == nullptr || vlen == nullptr) {\n+  if (mask_klass == nullptr || vector_klass == nullptr || elem_klass == nullptr || vlen == nullptr || operType == nullptr) {\n@@ -1668,2 +1730,2 @@\n-      elem_klass->const_oop() == nullptr || !vlen->is_con()) {\n-    log_if_needed(\"  ** missing constant: vclass=%s mclass=%s etype=%s vlen=%s\",\n+      elem_klass->const_oop() == nullptr || !vlen->is_con() || !operType->is_con()) {\n+    log_if_needed(\"  ** missing constant: vclass=%s mclass=%s etype=%s operType=%s vlen=%s\",\n@@ -1673,1 +1735,2 @@\n-                    NodeClassNames[argument(5)->Opcode()]);\n+                    NodeClassNames[argument(3)->Opcode()],\n+                    NodeClassNames[argument(4)->Opcode()]);\n@@ -1676,0 +1739,1 @@\n+\n@@ -1700,3 +1764,3 @@\n-  Node* v1   = unbox_vector(argument(6), vbox_type, elem_bt, num_elem);\n-  Node* v2   = unbox_vector(argument(7), vbox_type, elem_bt, num_elem);\n-  Node* mask = unbox_vector(argument(8), mbox_type, mask_bt, num_elem);\n+  Node* v1   = unbox_vector(argument(5), vbox_type, elem_bt, num_elem);\n+  Node* v2   = unbox_vector(argument(6), vbox_type, elem_bt, num_elem);\n+  Node* mask = unbox_vector(argument(7), mbox_type, mask_bt, num_elem);\n@@ -1723,1 +1787,1 @@\n-\/\/            Class<? extends V> vectorClass, Class<M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/            Class<? extends V> vectorClass, Class<M> mClass, Class<?> cClass, int operType,\n@@ -1733,1 +1797,2 @@\n-  const TypeInt*     vlen         = gvn().type(argument(6))->isa_int();\n+  const TypeInt*     operType     = gvn().type(argument(4))->isa_int();\n+  const TypeInt*     vlen         = gvn().type(argument(5))->isa_int();\n@@ -1735,1 +1800,1 @@\n-  if (cond == nullptr || vector_klass == nullptr || mask_klass == nullptr || elem_klass == nullptr || vlen == nullptr) {\n+  if (cond == nullptr || vector_klass == nullptr || mask_klass == nullptr || elem_klass == nullptr || operType == nullptr || vlen == nullptr) {\n@@ -1739,2 +1804,2 @@\n-      elem_klass->const_oop() == nullptr || !vlen->is_con()) {\n-    log_if_needed(\"  ** missing constant: cond=%s vclass=%s mclass=%s etype=%s vlen=%s\",\n+      elem_klass->const_oop() == nullptr || !operType->is_con() || !vlen->is_con()) {\n+    log_if_needed(\"  ** missing constant: cond=%s vclass=%s mclass=%s etype=%s operType=%s vlen=%s\",\n@@ -1745,1 +1810,2 @@\n-                    NodeClassNames[argument(6)->Opcode()]);\n+                    NodeClassNames[argument(4)->Opcode()],\n+                    NodeClassNames[argument(5)->Opcode()]);\n@@ -1748,0 +1814,6 @@\n+\n+  if (operType->get_con() != VectorSupport::VECTOR_TYPE_PRIM) {\n+    log_if_needed(\"  ** unhandled operType=%s\", get_opertype_string(operType->get_con()));\n+    return false;\n+  }\n+\n@@ -1782,2 +1854,2 @@\n-  Node* v1 = unbox_vector(argument(7), vbox_type, elem_bt, num_elem);\n-  Node* v2 = unbox_vector(argument(8), vbox_type, elem_bt, num_elem);\n+  Node* v1 = unbox_vector(argument(6), vbox_type, elem_bt, num_elem);\n+  Node* v2 = unbox_vector(argument(7), vbox_type, elem_bt, num_elem);\n@@ -1785,2 +1857,2 @@\n-  bool is_masked_op = argument(9)->bottom_type() != TypePtr::NULL_PTR;\n-  Node* mask = is_masked_op ? unbox_vector(argument(9), mbox_type, elem_bt, num_elem) : nullptr;\n+  bool is_masked_op = argument(8)->bottom_type() != TypePtr::NULL_PTR;\n+  Node* mask = is_masked_op ? unbox_vector(argument(8), mbox_type, elem_bt, num_elem) : nullptr;\n@@ -1833,1 +1905,1 @@\n-\/\/  V rearrangeOp(Class<? extends V> vClass, Class<SH> shClass, Class<M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/  V rearrangeOp(Class<? extends V> vClass, Class<SH> shClass, Class<M> mClass, Class<?> cClass, int operType,\n@@ -1843,1 +1915,2 @@\n-  const TypeInt*     vlen          = gvn().type(argument(6))->isa_int();\n+  const TypeInt*     operType      = gvn().type(argument(4))->isa_int();\n+  const TypeInt*     vlen          = gvn().type(argument(5))->isa_int();\n@@ -1845,1 +1918,1 @@\n-  if (vector_klass == nullptr  || shuffle_klass == nullptr ||  elem_klass == nullptr || vlen == nullptr) {\n+  if (vector_klass == nullptr  || shuffle_klass == nullptr ||  elem_klass == nullptr || operType == nullptr || vlen == nullptr) {\n@@ -1851,0 +1924,1 @@\n+      !operType->is_con() ||\n@@ -1852,1 +1926,1 @@\n-    log_if_needed(\"  ** missing constant: vclass=%s sclass=%s etype=%s vlen=%s\",\n+    log_if_needed(\"  ** missing constant: vclass=%s sclass=%s etype=%s operType=%s vlen=%s\",\n@@ -1856,1 +1930,2 @@\n-                    NodeClassNames[argument(6)->Opcode()]);\n+                    NodeClassNames[argument(4)->Opcode()],\n+                    NodeClassNames[argument(5)->Opcode()]);\n@@ -1889,1 +1964,1 @@\n-  bool is_masked_op = argument(9)->bottom_type() != TypePtr::NULL_PTR;\n+  bool is_masked_op = argument(8)->bottom_type() != TypePtr::NULL_PTR;\n@@ -1920,2 +1995,2 @@\n-  Node* v1 = unbox_vector(argument(7), vbox_type, elem_bt, num_elem);\n-  Node* shuffle = unbox_vector(argument(8), shbox_type, shuffle_bt, num_elem);\n+  Node* v1 = unbox_vector(argument(6), vbox_type, elem_bt, num_elem);\n+  Node* shuffle = unbox_vector(argument(7), shbox_type, shuffle_bt, num_elem);\n@@ -1937,1 +2012,1 @@\n-    mask = unbox_vector(argument(9), mbox_type, elem_bt, num_elem);\n+    mask = unbox_vector(argument(8), mbox_type, elem_bt, num_elem);\n@@ -1974,1 +2049,1 @@\n-\/\/  V selectFromOp(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/  V selectFromOp(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, int operType,\n@@ -1982,1 +2057,2 @@\n-  const TypeInt*     vlen          = gvn().type(argument(5))->isa_int();\n+  const TypeInt*     operType      = gvn().type(argument(3))->isa_int();\n+  const TypeInt*     vlen          = gvn().type(argument(4))->isa_int();\n@@ -1984,1 +2060,1 @@\n-  if (vector_klass == nullptr  || elem_klass == nullptr || vlen == nullptr ||\n+  if (vector_klass == nullptr  || elem_klass == nullptr || operType == nullptr || vlen == nullptr ||\n@@ -1987,0 +2063,1 @@\n+      !operType->is_con() ||\n@@ -1988,1 +2065,1 @@\n-    log_if_needed(\"  ** missing constant: vclass=%s etype=%s vlen=%s\",\n+    log_if_needed(\"  ** missing constant: vclass=%s etype=%s operType=%s vlen=%s\",\n@@ -1991,1 +2068,2 @@\n-                    NodeClassNames[argument(5)->Opcode()]);\n+                    NodeClassNames[argument(3)->Opcode()],\n+                    NodeClassNames[argument(4)->Opcode()]);\n@@ -1998,0 +2076,4 @@\n+  if (operType->get_con() != VectorSupport::VECTOR_TYPE_PRIM) {\n+    log_if_needed(\"  ** unhandled operType=%s\", get_opertype_string(operType->get_con()));\n+    return false;\n+  }\n@@ -2028,1 +2110,1 @@\n-  bool is_masked_op = argument(8)->bottom_type() != TypePtr::NULL_PTR;\n+  bool is_masked_op = argument(7)->bottom_type() != TypePtr::NULL_PTR;\n@@ -2053,1 +2135,1 @@\n-  Node* v1 = unbox_vector(argument(6), vbox_type, elem_bt, num_elem);\n+  Node* v1 = unbox_vector(argument(5), vbox_type, elem_bt, num_elem);\n@@ -2055,1 +2137,1 @@\n-  Node* v2 = unbox_vector(argument(7), vbox_type, elem_bt, num_elem);\n+  Node* v2 = unbox_vector(argument(6), vbox_type, elem_bt, num_elem);\n@@ -2071,1 +2153,1 @@\n-    mask = unbox_vector(argument(8), mbox_type, elem_bt, num_elem);\n+    mask = unbox_vector(argument(7), mbox_type, elem_bt, num_elem);\n@@ -2133,1 +2215,1 @@\n-\/\/                   Class<? extends V> vClass, Class<? extends M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/                   Class<? extends V> vClass, Class<? extends M> mClass, Class<?> cClass, int operType,\n@@ -2143,1 +2225,1 @@\n-  const TypeInt*     vlen         = gvn().type(argument(6))->isa_int();\n+  const TypeInt*     vlen         = gvn().type(argument(5))->isa_int();\n@@ -2153,1 +2235,1 @@\n-                    NodeClassNames[argument(6)->Opcode()]);\n+                    NodeClassNames[argument(5)->Opcode()]);\n@@ -2161,1 +2243,1 @@\n-  const Type* vmask_type = gvn().type(argument(8));\n+  const Type* vmask_type = gvn().type(argument(7));\n@@ -2204,1 +2286,1 @@\n-  Node* cnt  = argument(8);\n+  Node* cnt  = argument(7);\n@@ -2230,1 +2312,1 @@\n-  Node* opd1 = unbox_vector(argument(7), vbox_type, elem_bt, num_elem);\n+  Node* opd1 = unbox_vector(argument(6), vbox_type, elem_bt, num_elem);\n@@ -2253,1 +2335,1 @@\n-    mask = unbox_vector(argument(9), mbox_type, elem_bt, num_elem);\n+    mask = unbox_vector(argument(8), mbox_type, elem_bt, num_elem);\n@@ -2255,1 +2337,1 @@\n-      log_if_needed(\"  ** unbox failed mask=%s\", NodeClassNames[argument(9)->Opcode()]);\n+      log_if_needed(\"  ** unbox failed mask=%s\", NodeClassNames[argument(8)->Opcode()]);\n@@ -2476,1 +2558,1 @@\n-\/\/  V insert(Class<? extends V> vClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/  V insert(Class<? extends V> vClass, Class<?> cClass, int operType,\n@@ -2484,2 +2566,3 @@\n-  const TypeInt*     vlen         = gvn().type(argument(4))->isa_int();\n-  const TypeInt*     idx          = gvn().type(argument(6))->isa_int();\n+  const TypeInt*     operType     = gvn().type(argument(2))->isa_int();\n+  const TypeInt*     vlen         = gvn().type(argument(3))->isa_int();\n+  const TypeInt*     idx          = gvn().type(argument(5))->isa_int();\n@@ -2487,1 +2570,1 @@\n-  if (vector_klass == nullptr || elem_klass == nullptr || vlen == nullptr || idx == nullptr) {\n+  if (vector_klass == nullptr || elem_klass == nullptr || operType == nullptr || vlen == nullptr || idx == nullptr) {\n@@ -2490,2 +2573,3 @@\n-  if (vector_klass->const_oop() == nullptr || elem_klass->const_oop() == nullptr || !vlen->is_con() || !idx->is_con()) {\n-    log_if_needed(\"  ** missing constant: vclass=%s etype=%s vlen=%s idx=%s\",\n+  if (vector_klass->const_oop() == nullptr || elem_klass->const_oop() == nullptr || !operType->is_con() ||\n+      !vlen->is_con() || !idx->is_con()) {\n+    log_if_needed(\"  ** missing constant: vclass=%s etype=%s operType=%s vlen=%s idx=%s\",\n@@ -2494,2 +2578,3 @@\n-                    NodeClassNames[argument(4)->Opcode()],\n-                    NodeClassNames[argument(6)->Opcode()]);\n+                    NodeClassNames[argument(2)->Opcode()],\n+                    NodeClassNames[argument(3)->Opcode()],\n+                    NodeClassNames[argument(5)->Opcode()]);\n@@ -2498,0 +2583,6 @@\n+\n+  if (operType->get_con() != VectorSupport::VECTOR_TYPE_PRIM) {\n+    log_if_needed(\"  ** unhandled operType=%s\", get_opertype_string(operType->get_con()));\n+    return false;\n+  }\n+\n@@ -2518,1 +2609,1 @@\n-  Node* opd = unbox_vector(argument(5), vbox_type, elem_bt, num_elem);\n+  Node* opd = unbox_vector(argument(4), vbox_type, elem_bt, num_elem);\n@@ -2523,1 +2614,1 @@\n-  Node* insert_val = argument(7);\n+  Node* insert_val = argument(6);\n@@ -2562,1 +2653,1 @@\n-\/\/  long extract(Class<? extends VM> vClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/  long extract(Class<? extends VM> vClass, Class<?> cClass, int operType,\n@@ -2570,2 +2661,3 @@\n-  const TypeInt*     vlen         = gvn().type(argument(4))->isa_int();\n-  const TypeInt*     idx          = gvn().type(argument(6))->isa_int();\n+  const TypeInt*     operType     = gvn().type(argument(2))->isa_int();\n+  const TypeInt*     vlen         = gvn().type(argument(3))->isa_int();\n+  const TypeInt*     idx          = gvn().type(argument(5))->isa_int();\n@@ -2575,0 +2667,1 @@\n+      operType     == nullptr || !operType->is_con() ||\n@@ -2577,1 +2670,1 @@\n-    log_if_needed(\"  ** missing constant: vclass=%s etype=%s vlen=%s\",\n+    log_if_needed(\"  ** missing constant: vclass=%s etype=%s operType=%s vlen=%s\",\n@@ -2580,1 +2673,2 @@\n-                    NodeClassNames[argument(2)->Opcode()]);\n+                    NodeClassNames[argument(2)->Opcode()],\n+                    NodeClassNames[argument(3)->Opcode()]);\n@@ -2583,0 +2677,6 @@\n+\n+  if (operType->get_con() != VectorSupport::VECTOR_TYPE_PRIM) {\n+    log_if_needed(\"  ** unhandled operType=%s\", get_opertype_string(operType->get_con()));\n+    return false;\n+  }\n+\n@@ -2603,1 +2703,1 @@\n-    Node* pos = argument(6); \/\/ can be variable\n+    Node* pos = argument(5); \/\/ can be variable\n@@ -2606,1 +2706,1 @@\n-      opd = unbox_vector(argument(5), vbox_type, elem_bt, num_elem);\n+      opd = unbox_vector(argument(4), vbox_type, elem_bt, num_elem);\n@@ -2614,1 +2714,1 @@\n-      opd = unbox_vector(argument(5), vbox_type, elem_bt, num_elem);\n+      opd = unbox_vector(argument(4), vbox_type, elem_bt, num_elem);\n@@ -2633,1 +2733,1 @@\n-      log_if_needed(\"  ** missing constant: idx=%s\", NodeClassNames[argument(6)->Opcode()]);\n+      log_if_needed(\"  ** missing constant: idx=%s\", NodeClassNames[argument(5)->Opcode()]);\n@@ -2644,1 +2744,1 @@\n-    opd = unbox_vector(argument(5), vbox_type, elem_bt, num_elem);\n+    opd = unbox_vector(argument(4), vbox_type, elem_bt, num_elem);\n@@ -2748,1 +2848,1 @@\n-\/\/  V selectFromTwoVectorOp(Class<? extends V> vClass, Class<?> cClass, Class<E> eClass, int operType, int length,\n+\/\/  V selectFromTwoVectorOp(Class<? extends V> vClass, Class<?> cClass, int operType, int length,\n@@ -2755,1 +2855,2 @@\n-  const TypeInt* vlen = gvn().type(argument(4))->isa_int();\n+  const TypeInt* operType = gvn().type(argument(2))->isa_int();\n+  const TypeInt* vlen = gvn().type(argument(3))->isa_int();\n@@ -2757,3 +2858,4 @@\n-  if (vector_klass == nullptr || elem_klass == nullptr || vlen == nullptr || vector_klass->const_oop() == nullptr ||\n-      elem_klass->const_oop() == nullptr ||!vlen->is_con()) {\n-    log_if_needed(\"  ** missing constant: vclass=%s etype=%s vlen=%s\",\n+  if (vector_klass == nullptr || elem_klass == nullptr || operType == nullptr || vlen == nullptr ||\n+      vector_klass->const_oop() == nullptr ||\n+      elem_klass->const_oop() == nullptr || !operType->is_con() || !vlen->is_con()) {\n+    log_if_needed(\"  ** missing constant: vclass=%s etype=%s operType=%s vlen=%s\",\n@@ -2762,1 +2864,2 @@\n-                    NodeClassNames[argument(4)->Opcode()]);\n+                    NodeClassNames[argument(2)->Opcode()],\n+                    NodeClassNames[argument(3)->Opcode()]);\n@@ -2766,0 +2869,5 @@\n+  if (operType->get_con() != VectorSupport::VECTOR_TYPE_PRIM) {\n+    log_if_needed(\"  ** unhandled operType=%s\", get_opertype_string(operType->get_con()));\n+    return false;\n+  }\n+\n@@ -2827,1 +2935,1 @@\n-  Node* opd1 = unbox_vector(argument(5), vbox_type, elem_bt, num_elem);\n+  Node* opd1 = unbox_vector(argument(4), vbox_type, elem_bt, num_elem);\n@@ -2830,1 +2938,1 @@\n-                  NodeClassNames[argument(5)->Opcode()]);\n+                  NodeClassNames[argument(4)->Opcode()]);\n@@ -2833,1 +2941,1 @@\n-  Node* opd2 = unbox_vector(argument(6), vbox_type, elem_bt, num_elem);\n+  Node* opd2 = unbox_vector(argument(5), vbox_type, elem_bt, num_elem);\n@@ -2836,1 +2944,1 @@\n-                  NodeClassNames[argument(6)->Opcode()]);\n+                  NodeClassNames[argument(5)->Opcode()]);\n@@ -2839,1 +2947,1 @@\n-  Node* opd3 = unbox_vector(argument(7), vbox_type, elem_bt, num_elem);\n+  Node* opd3 = unbox_vector(argument(6), vbox_type, elem_bt, num_elem);\n@@ -2842,1 +2950,1 @@\n-                  NodeClassNames[argument(7)->Opcode()]);\n+                  NodeClassNames[argument(6)->Opcode()]);\n@@ -2875,1 +2983,1 @@\n-\/\/                                 Class<? extends V> vClass, Class<? extends M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/                                 Class<? extends V> vClass, Class<? extends M> mClass, Class<?> cClass, int operType,\n@@ -2884,1 +2992,1 @@\n-  const TypeInt*     vlen         = gvn().type(argument(6))->isa_int();\n+  const TypeInt*     vlen         = gvn().type(argument(5))->isa_int();\n@@ -2896,1 +3004,1 @@\n-                    NodeClassNames[argument(6)->Opcode()]);\n+                    NodeClassNames[argument(5)->Opcode()]);\n@@ -2926,1 +3034,1 @@\n-    opd1 = unbox_vector(argument(7), vbox_type, elem_bt, num_elem);\n+    opd1 = unbox_vector(argument(6), vbox_type, elem_bt, num_elem);\n@@ -2929,1 +3037,1 @@\n-                      NodeClassNames[argument(7)->Opcode()]);\n+                      NodeClassNames[argument(6)->Opcode()]);\n@@ -2935,1 +3043,1 @@\n-  assert(is_vector_mask(mbox_klass), \"argument(8) should be a mask class\");\n+  assert(is_vector_mask(mbox_klass), \"argument(7) should be a mask class\");\n@@ -2938,1 +3046,1 @@\n-  Node* mask = unbox_vector(argument(8), mbox_type, elem_bt, num_elem);\n+  Node* mask = unbox_vector(argument(7), mbox_type, elem_bt, num_elem);\n@@ -2941,1 +3049,1 @@\n-                    NodeClassNames[argument(8)->Opcode()]);\n+                    NodeClassNames[argument(7)->Opcode()]);\n@@ -2961,1 +3069,1 @@\n-\/\/  V indexVector(Class<? extends V> vClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/  V indexVector(Class<? extends V> vClass, Class<?> cClass, int operType,\n@@ -2969,1 +3077,2 @@\n-  const TypeInt*     vlen         = gvn().type(argument(4))->isa_int();\n+  const TypeInt*     operType     = gvn().type(argument(2))->isa_int();\n+  const TypeInt*     vlen         = gvn().type(argument(3))->isa_int();\n@@ -2973,0 +3082,1 @@\n+      operType     == nullptr || !operType->is_con() ||\n@@ -2974,1 +3084,1 @@\n-    log_if_needed(\"  ** missing constant: vclass=%s etype=%s vlen=%s\",\n+    log_if_needed(\"  ** missing constant: vclass=%s etype=%s operType=%s vlen=%s\",\n@@ -2977,1 +3087,2 @@\n-                    NodeClassNames[argument(4)->Opcode()]);\n+                    NodeClassNames[argument(2)->Opcode()],\n+                    NodeClassNames[argument(3)->Opcode()]);\n@@ -2981,0 +3092,5 @@\n+  if (operType->get_con() != VectorSupport::VECTOR_TYPE_PRIM) {\n+    log_if_needed(\"  ** unhandled operType=%s\", get_opertype_string(operType->get_con()));\n+    return false;\n+  }\n+\n@@ -3004,1 +3120,1 @@\n-  Node* scale = argument(6);\n+  Node* scale = argument(5);\n@@ -3030,1 +3146,1 @@\n-  Node* opd = unbox_vector(argument(5), vbox_type, elem_bt, num_elem);\n+  Node* opd = unbox_vector(argument(4), vbox_type, elem_bt, num_elem);\n@@ -3033,1 +3149,1 @@\n-                    NodeClassNames[argument(5)->Opcode()]);\n+                    NodeClassNames[argument(4)->Opcode()]);\n@@ -3098,1 +3214,1 @@\n-\/\/  M indexPartiallyInUpperRange(Class<? extends M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+\/\/  M indexPartiallyInUpperRange(Class<? extends M> mClass, Class<?> cClass, int operType,\n@@ -3105,1 +3221,2 @@\n-  const TypeInt*     vlen         = gvn().type(argument(4))->isa_int();\n+  const TypeInt*     operType     = gvn().type(argument(2))->isa_int();\n+  const TypeInt*     vlen         = gvn().type(argument(3))->isa_int();\n@@ -3109,0 +3226,1 @@\n+      operType   == nullptr || !operType->is_con() ||\n@@ -3110,1 +3228,1 @@\n-    log_if_needed(\"  ** missing constant: mclass=%s etype=%s vlen=%s\",\n+    log_if_needed(\"  ** missing constant: mclass=%s etype=%s operType=%s vlen=%s\",\n@@ -3113,1 +3231,2 @@\n-                    NodeClassNames[argument(4)->Opcode()]);\n+                    NodeClassNames[argument(2)->Opcode()],\n+                    NodeClassNames[argument(3)->Opcode()]);\n@@ -3117,0 +3236,5 @@\n+  if (operType->get_con() != VectorSupport::VECTOR_TYPE_PRIM) {\n+    log_if_needed(\"  ** unhandled operType=%s\", get_opertype_string(operType->get_con()));\n+    return false;\n+  }\n+\n@@ -3153,2 +3277,2 @@\n-  Node* offset = argument(5);\n-  Node* limit = argument(7);\n+  Node* offset = argument(4);\n+  Node* limit = argument(6);\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":324,"deletions":200,"binary":false,"changes":524,"status":"modified"},{"patch":"@@ -202,1 +202,1 @@\n-int VectorSupport::vop2ideal(jint id, BasicType bt) {\n+int VectorSupport::vop2ideal(jint id, BasicType bt, int operType) {\n@@ -208,1 +208,5 @@\n-        case T_SHORT:  \/\/ fall-through\n+        case T_SHORT:\n+          if (operType == VECTOR_TYPE_FP16) {\n+            return Op_AddHF;\n+          }\n+          \/\/ fall-through\n@@ -220,1 +224,5 @@\n-        case T_SHORT:  \/\/ fall-through\n+        case T_SHORT:\n+          if (operType == VECTOR_TYPE_FP16) {\n+            return Op_SubHF;\n+          }\n+          \/\/ fall-through\n@@ -232,1 +240,5 @@\n-        case T_SHORT:  \/\/ fall-through\n+        case T_SHORT:\n+          if (operType == VECTOR_TYPE_FP16) {\n+            return Op_MulHF;\n+          }\n+          \/\/ fall-through\n@@ -244,1 +256,5 @@\n-        case T_SHORT:  \/\/ fall-through\n+        case T_SHORT:\n+          if (operType == VECTOR_TYPE_FP16) {\n+            return Op_DivHF;\n+          }\n+          \/\/ fall-through\n@@ -257,0 +273,4 @@\n+          if (operType == VECTOR_TYPE_FP16) {\n+            return Op_MinHF;\n+          }\n+          \/\/ fall-through\n@@ -269,0 +289,4 @@\n+          if (operType == VECTOR_TYPE_FP16) {\n+            return Op_MaxHF;\n+          }\n+          \/\/ fall-through\n@@ -353,0 +377,1 @@\n+        case T_SHORT:  return Op_SqrtHF;\n@@ -361,0 +386,1 @@\n+        case T_SHORT:  return Op_FmaHF;\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":31,"deletions":5,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-  static int vop2ideal(jint vop, BasicType bt);\n+  static int vop2ideal(jint vop, BasicType bt, int operType = VECTOR_TYPE_PRIM);\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -329,1 +329,1 @@\n-    V loadFromMemorySegment(Class<? extends V> vmClass, Class<?> c, Class<E> e, int operType, int length,\n+    V loadFromMemorySegment(Class<? extends V> vmClass, Class<?> c, int operType, int length,\n@@ -337,1 +337,1 @@\n-                    vmClass, c, e, operType, length,\n+                    vmClass, c, operType, length,\n@@ -351,1 +351,1 @@\n-                                          Class<? extends V> vmClass, Class<?> c, Class<E> e, int operType, int length,\n+                                          Class<? extends V> vmClass, Class<?> c, int operType, int length,\n@@ -358,1 +358,1 @@\n-            return VectorSupport.load(vmClass, c, e, operType, length,\n+            return VectorSupport.load(vmClass, c, operType, length,\n@@ -371,1 +371,1 @@\n-    V loadFromMemorySegmentMasked(Class<? extends V> vmClass, Class<M> maskClass, Class<?> c, Class<E> e, int operType,\n+    V loadFromMemorySegmentMasked(Class<? extends V> vmClass, Class<M> maskClass, Class<?> c, int operType,\n@@ -378,1 +378,1 @@\n-                    vmClass, maskClass, c, e, operType, length,\n+                    vmClass, maskClass, c, operType, length,\n@@ -393,1 +393,1 @@\n-                                                Class<M> maskClass, Class<?> c, Class<E> e, int operType, int length,\n+                                                Class<M> maskClass, Class<?> c, int operType, int length,\n@@ -400,1 +400,1 @@\n-            return VectorSupport.loadMasked(vmClass, maskClass, c, e, operType, length,\n+            return VectorSupport.loadMasked(vmClass, maskClass, c, operType, length,\n@@ -412,1 +412,1 @@\n-    void storeIntoMemorySegment(Class<? extends V> vmClass, Class<?> c, Class<E> e, int operType, int length,\n+    void storeIntoMemorySegment(Class<? extends V> vmClass, Class<?> c, int operType, int length,\n@@ -420,1 +420,1 @@\n-                    vmClass, c, e, operType, length,\n+                    vmClass, c, operType, length,\n@@ -434,1 +434,1 @@\n-                                              Class<? extends V> vmClass, Class<?> c, Class<E> e, int operType, int length,\n+                                              Class<? extends V> vmClass, Class<?> c, int operType, int length,\n@@ -441,1 +441,1 @@\n-            VectorSupport.store(vmClass, c, e, operType, length,\n+            VectorSupport.store(vmClass, c, operType, length,\n@@ -454,1 +454,1 @@\n-    void storeIntoMemorySegmentMasked(Class<? extends V> vmClass, Class<M> maskClass, Class<?> c, Class<E> e,\n+    void storeIntoMemorySegmentMasked(Class<? extends V> vmClass, Class<M> maskClass, Class<?> c,\n@@ -462,1 +462,1 @@\n-                    vmClass, maskClass, c, e, operType, length,\n+                    vmClass, maskClass, c, operType, length,\n@@ -477,1 +477,1 @@\n-                                                    Class<?> c, Class<E> e, int operType, int length, V v, M m,\n+                                                    Class<?> c, int operType, int length, V v, M m,\n@@ -483,1 +483,1 @@\n-            VectorSupport.storeMasked(vmClass, maskClass, c, e, operType, length,\n+            VectorSupport.storeMasked(vmClass, maskClass, c, operType, length,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/X-ScopedMemoryAccess.java.template","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -213,1 +213,1 @@\n-    VM fromBitsCoerced(Class<? extends VM> vmClass, Class<?> cClass, Class<E> eClass, int operType,\n+    VM fromBitsCoerced(Class<? extends VM> vmClass, Class<?> cClass, int operType,\n@@ -231,1 +231,1 @@\n-    M indexPartiallyInUpperRange(Class<? extends M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+    M indexPartiallyInUpperRange(Class<? extends M> mClass, Class<?> cClass, int operType,\n@@ -249,1 +249,1 @@\n-    V indexVector(Class<? extends V> vClass, Class<?> cClass, Class<E> eClass, int operType,\n+    V indexVector(Class<? extends V> vClass, Class<?> cClass, int operType,\n@@ -270,1 +270,1 @@\n-                          Class<? extends V> vClass, Class<? extends M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+                          Class<? extends V> vClass, Class<? extends M> mClass, Class<?> cClass, int operType,\n@@ -289,1 +289,1 @@\n-    long extract(Class<? extends VM> vClass, Class<?> cClass, Class<E> eClass, int operType,\n+    long extract(Class<? extends VM> vClass, Class<?> cClass, int operType,\n@@ -307,1 +307,1 @@\n-    V insert(Class<? extends V> vClass, Class<?> cClass, Class<E> eClass, int operType,\n+    V insert(Class<? extends V> vClass, Class<?> cClass, int operType,\n@@ -328,1 +328,1 @@\n-              Class<? extends V> vClass, Class<? extends M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+              Class<? extends V> vClass, Class<? extends M> mClass, Class<?> cClass, int operType,\n@@ -366,1 +366,1 @@\n-                Class<? extends VM> vmClass, Class<? extends M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+                Class<? extends VM> vmClass, Class<? extends M> mClass, Class<?> cClass, int operType,\n@@ -401,1 +401,1 @@\n-    V selectFromTwoVectorOp(Class<? extends V> vClass, Class<?> cClass, Class<E> eClass, int operType, int length,\n+    V selectFromTwoVectorOp(Class<? extends V> vClass, Class<?> cClass, int operType, int length,\n@@ -423,1 +423,1 @@\n-                Class<? extends V> vClass, Class<? extends M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+                Class<? extends V> vClass, Class<? extends M> mClass, Class<?> cClass, int operType,\n@@ -447,1 +447,1 @@\n-    VM load(Class<? extends VM> vmClass, Class<?> cClass, Class<E> eClass, int operType,\n+    VM load(Class<? extends VM> vmClass, Class<?> cClass, int operType,\n@@ -472,1 +472,1 @@\n-    V loadMasked(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+    V loadMasked(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, int operType,\n@@ -498,1 +498,1 @@\n-    V loadWithMap(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+    V loadWithMap(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, int operType,\n@@ -520,1 +520,1 @@\n-    void store(Class<?> vClass, Class<?> cClass, Class<?> eClass, int operType,\n+    void store(Class<?> vClass, Class<?> cClass, int operType,\n@@ -541,1 +541,1 @@\n-    void storeMasked(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+    void storeMasked(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, int operType,\n@@ -565,1 +565,1 @@\n-    void storeWithMap(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+    void storeWithMap(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, int operType,\n@@ -583,1 +583,1 @@\n-                 Class<?> mClass, Class<?> cClass, Class<E> eClass, int opType,\n+                 Class<?> mClass, Class<?> cClass, int operType,\n@@ -604,1 +604,1 @@\n-              Class<? extends V> vectorClass, Class<M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+              Class<? extends V> vectorClass, Class<M> mClass, Class<?> cClass, int operType,\n@@ -625,1 +625,1 @@\n-    V rearrangeOp(Class<? extends V> vClass, Class<SH> shClass, Class<M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+    V rearrangeOp(Class<? extends V> vClass, Class<SH> shClass, Class<M> mClass, Class<?> cClass, int operType,\n@@ -643,1 +643,1 @@\n-    V selectFromOp(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+    V selectFromOp(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, int operType,\n@@ -662,1 +662,1 @@\n-    V blend(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+    V blend(Class<? extends V> vClass, Class<M> mClass, Class<?> cClass, int operType,\n@@ -683,1 +683,1 @@\n-                   Class<? extends V> vClass, Class<? extends M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+                   Class<? extends V> vClass, Class<? extends M> mClass, Class<?> cClass, int operType,\n@@ -729,1 +729,1 @@\n-                                   Class<? extends V> vClass, Class<? extends M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+                                   Class<? extends V> vClass, Class<? extends M> mClass, Class<?> cClass, int operType,\n@@ -758,1 +758,1 @@\n-                              Class<? extends M> mClass, Class<?> cClass, Class<E> eClass, int operType,\n+                              Class<? extends M> mClass, Class<?> cClass, int operType,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-            vsp.maskType(), vsp.carrierType(), vsp.elementType(), vsp.operType(), laneCount,\n+            vsp.maskType(), vsp.carrierType(), vsp.operType(), laneCount,\n@@ -79,1 +79,1 @@\n-            (c, idx, s) -> System.arraycopy(s.getBits(), 0, c, (int) idx, s.length()));\n+            (c, idx, s) -> System.arraycopy(s.getBits(), 0, c, (int)idx, s.length()));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractMask.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractSpecies.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -551,1 +551,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -586,1 +586,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -701,1 +701,1 @@\n-                Byte128Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Byte128Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -717,1 +717,1 @@\n-                Byte128Vector.class, Byte128Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Byte128Vector.class, Byte128Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -730,1 +730,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Byte128Mask.class, null, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Byte128Mask.class, null, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -740,1 +740,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Byte128Mask.class, null, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Byte128Mask.class, null, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -750,1 +750,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Byte128Mask.class, null, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Byte128Mask.class, null, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -760,1 +760,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Byte128Mask.class, byte.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Byte128Mask.class, byte.class,\n@@ -768,1 +768,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Byte128Mask.class, byte.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Byte128Mask.class, byte.class,\n@@ -776,1 +776,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Byte128Mask.class, byte.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Byte128Mask.class, byte.class,\n@@ -787,1 +787,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Byte128Mask.class, byte.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Byte128Mask.class, byte.class,\n@@ -798,1 +798,1 @@\n-            return VectorSupport.extract(Byte128Mask.class, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Byte128Mask.class, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -807,1 +807,1 @@\n-            return VectorSupport.test(BT_ne, Byte128Mask.class, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Byte128Mask.class, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -815,1 +815,1 @@\n-            return VectorSupport.test(BT_overflow, Byte128Mask.class, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Byte128Mask.class, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -823,1 +823,1 @@\n-            return VectorSupport.fromBitsCoerced(Byte128Mask.class, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Byte128Mask.class, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -567,1 +567,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -618,1 +618,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -733,1 +733,1 @@\n-                Byte256Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Byte256Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -749,1 +749,1 @@\n-                Byte256Vector.class, Byte256Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Byte256Vector.class, Byte256Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -762,1 +762,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Byte256Mask.class, null, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Byte256Mask.class, null, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -772,1 +772,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Byte256Mask.class, null, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Byte256Mask.class, null, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -782,1 +782,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Byte256Mask.class, null, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Byte256Mask.class, null, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -792,1 +792,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Byte256Mask.class, byte.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Byte256Mask.class, byte.class,\n@@ -800,1 +800,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Byte256Mask.class, byte.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Byte256Mask.class, byte.class,\n@@ -808,1 +808,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Byte256Mask.class, byte.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Byte256Mask.class, byte.class,\n@@ -819,1 +819,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Byte256Mask.class, byte.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Byte256Mask.class, byte.class,\n@@ -830,1 +830,1 @@\n-            return VectorSupport.extract(Byte256Mask.class, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Byte256Mask.class, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -839,1 +839,1 @@\n-            return VectorSupport.test(BT_ne, Byte256Mask.class, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Byte256Mask.class, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -847,1 +847,1 @@\n-            return VectorSupport.test(BT_overflow, Byte256Mask.class, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Byte256Mask.class, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -855,1 +855,1 @@\n-            return VectorSupport.fromBitsCoerced(Byte256Mask.class, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Byte256Mask.class, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -599,1 +599,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -682,1 +682,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -797,1 +797,1 @@\n-                Byte512Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Byte512Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -813,1 +813,1 @@\n-                Byte512Vector.class, Byte512Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Byte512Vector.class, Byte512Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -826,1 +826,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Byte512Mask.class, null, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Byte512Mask.class, null, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -836,1 +836,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Byte512Mask.class, null, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Byte512Mask.class, null, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -846,1 +846,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Byte512Mask.class, null, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Byte512Mask.class, null, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -856,1 +856,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Byte512Mask.class, byte.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Byte512Mask.class, byte.class,\n@@ -864,1 +864,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Byte512Mask.class, byte.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Byte512Mask.class, byte.class,\n@@ -872,1 +872,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Byte512Mask.class, byte.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Byte512Mask.class, byte.class,\n@@ -883,1 +883,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Byte512Mask.class, byte.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Byte512Mask.class, byte.class,\n@@ -894,1 +894,1 @@\n-            return VectorSupport.extract(Byte512Mask.class, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Byte512Mask.class, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -903,1 +903,1 @@\n-            return VectorSupport.test(BT_ne, Byte512Mask.class, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Byte512Mask.class, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -911,1 +911,1 @@\n-            return VectorSupport.test(BT_overflow, Byte512Mask.class, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Byte512Mask.class, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -919,1 +919,1 @@\n-            return VectorSupport.fromBitsCoerced(Byte512Mask.class, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Byte512Mask.class, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -543,1 +543,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -570,1 +570,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -685,1 +685,1 @@\n-                Byte64Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Byte64Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -701,1 +701,1 @@\n-                Byte64Vector.class, Byte64Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Byte64Vector.class, Byte64Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -714,1 +714,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Byte64Mask.class, null, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Byte64Mask.class, null, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -724,1 +724,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Byte64Mask.class, null, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Byte64Mask.class, null, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -734,1 +734,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Byte64Mask.class, null, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Byte64Mask.class, null, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -744,1 +744,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Byte64Mask.class, byte.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Byte64Mask.class, byte.class,\n@@ -752,1 +752,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Byte64Mask.class, byte.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Byte64Mask.class, byte.class,\n@@ -760,1 +760,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Byte64Mask.class, byte.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Byte64Mask.class, byte.class,\n@@ -771,1 +771,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Byte64Mask.class, byte.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Byte64Mask.class, byte.class,\n@@ -782,1 +782,1 @@\n-            return VectorSupport.extract(Byte64Mask.class, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Byte64Mask.class, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -791,1 +791,1 @@\n-            return VectorSupport.test(BT_ne, Byte64Mask.class, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Byte64Mask.class, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -799,1 +799,1 @@\n-            return VectorSupport.test(BT_overflow, Byte64Mask.class, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Byte64Mask.class, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -807,1 +807,1 @@\n-            return VectorSupport.fromBitsCoerced(Byte64Mask.class, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Byte64Mask.class, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -536,1 +536,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -556,1 +556,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -671,1 +671,1 @@\n-                ByteMaxMask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                ByteMaxMask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -687,1 +687,1 @@\n-                ByteMaxVector.class, ByteMaxMask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                ByteMaxVector.class, ByteMaxMask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -700,1 +700,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, ByteMaxMask.class, null, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, ByteMaxMask.class, null, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -710,1 +710,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, ByteMaxMask.class, null, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, ByteMaxMask.class, null, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -720,1 +720,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, ByteMaxMask.class, null, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, ByteMaxMask.class, null, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -730,1 +730,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, ByteMaxMask.class, byte.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, ByteMaxMask.class, byte.class,\n@@ -738,1 +738,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, ByteMaxMask.class, byte.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, ByteMaxMask.class, byte.class,\n@@ -746,1 +746,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, ByteMaxMask.class, byte.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, ByteMaxMask.class, byte.class,\n@@ -757,1 +757,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, ByteMaxMask.class, byte.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, ByteMaxMask.class, byte.class,\n@@ -768,1 +768,1 @@\n-            return VectorSupport.extract(ByteMaxMask.class, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(ByteMaxMask.class, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -777,1 +777,1 @@\n-            return VectorSupport.test(BT_ne, ByteMaxMask.class, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, ByteMaxMask.class, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -785,1 +785,1 @@\n-            return VectorSupport.test(BT_overflow, ByteMaxMask.class, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, ByteMaxMask.class, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -793,1 +793,1 @@\n-            return VectorSupport.fromBitsCoerced(ByteMaxMask.class, byte.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(ByteMaxMask.class, byte.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -578,1 +578,1 @@\n-        return VectorSupport.fromBitsCoerced(vsp.vectorType(), byte.class, byte.class, VECTOR_OPER_TYPE, species.length(),\n+        return VectorSupport.fromBitsCoerced(vsp.vectorType(), byte.class, VECTOR_OPER_TYPE, species.length(),\n@@ -700,1 +700,1 @@\n-            opc, getClass(), null, byte.class, byte.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, byte.class, VECTOR_OPER_TYPE, length(),\n@@ -728,1 +728,1 @@\n-            opc, getClass(), maskClass, byte.class, byte.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, byte.class, VECTOR_OPER_TYPE, length(),\n@@ -801,1 +801,1 @@\n-            opc, getClass(), null, byte.class, byte.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, byte.class, VECTOR_OPER_TYPE, length(),\n@@ -852,1 +852,1 @@\n-            opc, getClass(), maskClass, byte.class, byte.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, byte.class, VECTOR_OPER_TYPE, length(),\n@@ -1039,1 +1039,1 @@\n-            opc, getClass(), null, byte.class, byte.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, byte.class, VECTOR_OPER_TYPE, length(),\n@@ -1060,1 +1060,1 @@\n-            opc, getClass(), maskClass, byte.class, byte.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, byte.class, VECTOR_OPER_TYPE, length(),\n@@ -1137,1 +1137,1 @@\n-            opc, getClass(), null, byte.class, byte.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, byte.class, VECTOR_OPER_TYPE, length(),\n@@ -1177,1 +1177,1 @@\n-            opc, getClass(), maskClass, byte.class, byte.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, byte.class, VECTOR_OPER_TYPE, length(),\n@@ -2075,1 +2075,1 @@\n-            opc, getClass(), maskType, byte.class, byte.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskType, byte.class, VECTOR_OPER_TYPE, length(),\n@@ -2097,1 +2097,1 @@\n-            opc, getClass(), maskType, byte.class, byte.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskType, byte.class, VECTOR_OPER_TYPE, length(),\n@@ -2228,1 +2228,1 @@\n-            getClass(), maskType, byte.class, byte.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), maskType, byte.class, VECTOR_OPER_TYPE, length(),\n@@ -2245,1 +2245,1 @@\n-            getClass(), byte.class, byte.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), byte.class, VECTOR_OPER_TYPE, length(),\n@@ -2437,1 +2437,1 @@\n-            getClass(), shuffletype, null, byte.class, byte.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), shuffletype, null, byte.class, VECTOR_OPER_TYPE, length(),\n@@ -2464,1 +2464,1 @@\n-                   getClass(), shuffletype, masktype, byte.class, byte.class, VECTOR_OPER_TYPE, length(),\n+                   getClass(), shuffletype, masktype, byte.class, VECTOR_OPER_TYPE, length(),\n@@ -2490,1 +2490,1 @@\n-                getClass(), shuffletype, null, byte.class, byte.class, VECTOR_OPER_TYPE, length(),\n+                getClass(), shuffletype, null, byte.class, VECTOR_OPER_TYPE, length(),\n@@ -2498,1 +2498,1 @@\n-                getClass(), shuffletype, null, byte.class, byte.class, VECTOR_OPER_TYPE, length(),\n+                getClass(), shuffletype, null, byte.class, VECTOR_OPER_TYPE, length(),\n@@ -2548,1 +2548,1 @@\n-                                                        byte.class, byte.class, VECTOR_OPER_TYPE, length(), this, m,\n+                                                        byte.class, VECTOR_OPER_TYPE, length(), this, m,\n@@ -2567,1 +2567,1 @@\n-                                                        byte.class, byte.class, VECTOR_OPER_TYPE, length(), this, m,\n+                                                        byte.class, VECTOR_OPER_TYPE, length(), this, m,\n@@ -2582,1 +2582,1 @@\n-        return (ByteVector)VectorSupport.selectFromOp(getClass(), null, byte.class, byte.class, VECTOR_OPER_TYPE,\n+        return (ByteVector)VectorSupport.selectFromOp(getClass(), null, byte.class, VECTOR_OPER_TYPE,\n@@ -2602,1 +2602,1 @@\n-        return (ByteVector)VectorSupport.selectFromOp(getClass(), masktype, byte.class, byte.class, VECTOR_OPER_TYPE,\n+        return (ByteVector)VectorSupport.selectFromOp(getClass(), masktype, byte.class, VECTOR_OPER_TYPE,\n@@ -2620,1 +2620,1 @@\n-        return VectorSupport.selectFromTwoVectorOp(getClass(), byte.class, byte.class, VECTOR_OPER_TYPE, length(), this, v1, v2,\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), byte.class, VECTOR_OPER_TYPE, length(), this, v1, v2,\n@@ -2840,1 +2840,1 @@\n-            opc, getClass(), maskClass, byte.class, byte.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, byte.class, VECTOR_OPER_TYPE, length(),\n@@ -2858,1 +2858,1 @@\n-            opc, getClass(), null, byte.class, byte.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, byte.class, VECTOR_OPER_TYPE, length(),\n@@ -3148,1 +3148,1 @@\n-            vectorType, null, byte.class, byte.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vectorType, null, byte.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3483,1 +3483,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3637,1 +3637,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3850,1 +3850,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3867,1 +3867,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3923,1 +3923,1 @@\n-            vectorType, maskClass, byte.class, byte.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vectorType, maskClass, byte.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3940,1 +3940,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3957,1 +3957,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3971,1 +3971,1 @@\n-                vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3987,1 +3987,1 @@\n-                vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -4005,1 +4005,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -4022,1 +4022,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -4041,1 +4041,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -4054,1 +4054,1 @@\n-                vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -4071,1 +4071,1 @@\n-                vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -4297,1 +4297,1 @@\n-                    vectorType, byte.class, byte.class, VECTOR_OPER_TYPE, laneCount,\n+                    vectorType, byte.class, VECTOR_OPER_TYPE, laneCount,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":40,"deletions":40,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -526,1 +526,1 @@\n-                     VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                     VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -547,1 +547,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -662,1 +662,1 @@\n-                Double128Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Double128Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -678,1 +678,1 @@\n-                Double128Vector.class, Double128Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Double128Vector.class, Double128Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -691,1 +691,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Double128Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Double128Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -701,1 +701,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Double128Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Double128Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -711,1 +711,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Double128Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Double128Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -721,1 +721,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Double128Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Double128Mask.class, long.class,\n@@ -729,1 +729,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Double128Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Double128Mask.class, long.class,\n@@ -737,1 +737,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Double128Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Double128Mask.class, long.class,\n@@ -748,1 +748,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Double128Mask.class, long.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Double128Mask.class, long.class,\n@@ -759,1 +759,1 @@\n-            return VectorSupport.extract(Double128Mask.class, double.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Double128Mask.class, double.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -768,1 +768,1 @@\n-            return VectorSupport.test(BT_ne, Double128Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Double128Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -776,1 +776,1 @@\n-            return VectorSupport.test(BT_overflow, Double128Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Double128Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -784,1 +784,1 @@\n-            return VectorSupport.fromBitsCoerced(Double128Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Double128Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -528,1 +528,1 @@\n-                     VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                     VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -551,1 +551,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -666,1 +666,1 @@\n-                Double256Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Double256Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -682,1 +682,1 @@\n-                Double256Vector.class, Double256Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Double256Vector.class, Double256Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -695,1 +695,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Double256Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Double256Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -705,1 +705,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Double256Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Double256Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -715,1 +715,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Double256Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Double256Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -725,1 +725,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Double256Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Double256Mask.class, long.class,\n@@ -733,1 +733,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Double256Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Double256Mask.class, long.class,\n@@ -741,1 +741,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Double256Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Double256Mask.class, long.class,\n@@ -752,1 +752,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Double256Mask.class, long.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Double256Mask.class, long.class,\n@@ -763,1 +763,1 @@\n-            return VectorSupport.extract(Double256Mask.class, double.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Double256Mask.class, double.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -772,1 +772,1 @@\n-            return VectorSupport.test(BT_ne, Double256Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Double256Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -780,1 +780,1 @@\n-            return VectorSupport.test(BT_overflow, Double256Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Double256Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -788,1 +788,1 @@\n-            return VectorSupport.fromBitsCoerced(Double256Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Double256Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -532,1 +532,1 @@\n-                     VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                     VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -559,1 +559,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -674,1 +674,1 @@\n-                Double512Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Double512Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -690,1 +690,1 @@\n-                Double512Vector.class, Double512Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Double512Vector.class, Double512Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -703,1 +703,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Double512Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Double512Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -713,1 +713,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Double512Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Double512Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -723,1 +723,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Double512Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Double512Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -733,1 +733,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Double512Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Double512Mask.class, long.class,\n@@ -741,1 +741,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Double512Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Double512Mask.class, long.class,\n@@ -749,1 +749,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Double512Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Double512Mask.class, long.class,\n@@ -760,1 +760,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Double512Mask.class, long.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Double512Mask.class, long.class,\n@@ -771,1 +771,1 @@\n-            return VectorSupport.extract(Double512Mask.class, double.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Double512Mask.class, double.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -780,1 +780,1 @@\n-            return VectorSupport.test(BT_ne, Double512Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Double512Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -788,1 +788,1 @@\n-            return VectorSupport.test(BT_overflow, Double512Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Double512Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -796,1 +796,1 @@\n-            return VectorSupport.fromBitsCoerced(Double512Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Double512Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -525,1 +525,1 @@\n-                     VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                     VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -545,1 +545,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -660,1 +660,1 @@\n-                Double64Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Double64Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -676,1 +676,1 @@\n-                Double64Vector.class, Double64Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Double64Vector.class, Double64Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -689,1 +689,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Double64Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Double64Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -699,1 +699,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Double64Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Double64Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -709,1 +709,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Double64Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Double64Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -719,1 +719,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Double64Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Double64Mask.class, long.class,\n@@ -727,1 +727,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Double64Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Double64Mask.class, long.class,\n@@ -735,1 +735,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Double64Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Double64Mask.class, long.class,\n@@ -746,1 +746,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Double64Mask.class, long.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Double64Mask.class, long.class,\n@@ -757,1 +757,1 @@\n-            return VectorSupport.extract(Double64Mask.class, double.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Double64Mask.class, double.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -766,1 +766,1 @@\n-            return VectorSupport.test(BT_ne, Double64Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Double64Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -774,1 +774,1 @@\n-            return VectorSupport.test(BT_overflow, Double64Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Double64Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -782,1 +782,1 @@\n-            return VectorSupport.fromBitsCoerced(Double64Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Double64Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -524,1 +524,1 @@\n-                     VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                     VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -544,1 +544,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -659,1 +659,1 @@\n-                DoubleMaxMask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                DoubleMaxMask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -675,1 +675,1 @@\n-                DoubleMaxVector.class, DoubleMaxMask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                DoubleMaxVector.class, DoubleMaxMask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -688,1 +688,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, DoubleMaxMask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, DoubleMaxMask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -698,1 +698,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, DoubleMaxMask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, DoubleMaxMask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -708,1 +708,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, DoubleMaxMask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, DoubleMaxMask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -718,1 +718,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, DoubleMaxMask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, DoubleMaxMask.class, long.class,\n@@ -726,1 +726,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, DoubleMaxMask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, DoubleMaxMask.class, long.class,\n@@ -734,1 +734,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, DoubleMaxMask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, DoubleMaxMask.class, long.class,\n@@ -745,1 +745,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, DoubleMaxMask.class, long.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, DoubleMaxMask.class, long.class,\n@@ -756,1 +756,1 @@\n-            return VectorSupport.extract(DoubleMaxMask.class, double.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(DoubleMaxMask.class, double.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -765,1 +765,1 @@\n-            return VectorSupport.test(BT_ne, DoubleMaxMask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, DoubleMaxMask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -773,1 +773,1 @@\n-            return VectorSupport.test(BT_overflow, DoubleMaxMask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, DoubleMaxMask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -781,1 +781,1 @@\n-            return VectorSupport.fromBitsCoerced(DoubleMaxMask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(DoubleMaxMask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -567,1 +567,1 @@\n-        return VectorSupport.fromBitsCoerced(vsp.vectorType(), double.class, double.class, VECTOR_OPER_TYPE, species.length(),\n+        return VectorSupport.fromBitsCoerced(vsp.vectorType(), double.class, VECTOR_OPER_TYPE, species.length(),\n@@ -689,1 +689,1 @@\n-            opc, getClass(), null, double.class, double.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, double.class, VECTOR_OPER_TYPE, length(),\n@@ -717,1 +717,1 @@\n-            opc, getClass(), maskClass, double.class, double.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, double.class, VECTOR_OPER_TYPE, length(),\n@@ -806,1 +806,1 @@\n-            opc, getClass(), null, double.class, double.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, double.class, VECTOR_OPER_TYPE, length(),\n@@ -844,1 +844,1 @@\n-            opc, getClass(), maskClass, double.class, double.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, double.class, VECTOR_OPER_TYPE, length(),\n@@ -1026,1 +1026,1 @@\n-            opc, getClass(), null, double.class, double.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, double.class, VECTOR_OPER_TYPE, length(),\n@@ -1061,1 +1061,1 @@\n-            opc, getClass(), maskClass, double.class, double.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, double.class, VECTOR_OPER_TYPE, length(),\n@@ -1933,1 +1933,1 @@\n-            opc, getClass(), maskType, double.class, double.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskType, double.class, VECTOR_OPER_TYPE, length(),\n@@ -1955,1 +1955,1 @@\n-            opc, getClass(), maskType, double.class, double.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskType, double.class, VECTOR_OPER_TYPE, length(),\n@@ -2082,1 +2082,1 @@\n-            getClass(), maskType, double.class, double.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), maskType, double.class, VECTOR_OPER_TYPE, length(),\n@@ -2099,1 +2099,1 @@\n-            getClass(), double.class, double.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), double.class, VECTOR_OPER_TYPE, length(),\n@@ -2291,1 +2291,1 @@\n-            getClass(), shuffletype, null, double.class, double.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), shuffletype, null, double.class, VECTOR_OPER_TYPE, length(),\n@@ -2318,1 +2318,1 @@\n-                   getClass(), shuffletype, masktype, double.class, double.class, VECTOR_OPER_TYPE, length(),\n+                   getClass(), shuffletype, masktype, double.class, VECTOR_OPER_TYPE, length(),\n@@ -2344,1 +2344,1 @@\n-                getClass(), shuffletype, null, double.class, double.class, VECTOR_OPER_TYPE, length(),\n+                getClass(), shuffletype, null, double.class, VECTOR_OPER_TYPE, length(),\n@@ -2352,1 +2352,1 @@\n-                getClass(), shuffletype, null, double.class, double.class, VECTOR_OPER_TYPE, length(),\n+                getClass(), shuffletype, null, double.class, VECTOR_OPER_TYPE, length(),\n@@ -2396,1 +2396,1 @@\n-                                                        double.class, double.class, VECTOR_OPER_TYPE, length(), this, m,\n+                                                        double.class, VECTOR_OPER_TYPE, length(), this, m,\n@@ -2415,1 +2415,1 @@\n-                                                        double.class, double.class, VECTOR_OPER_TYPE, length(), this, m,\n+                                                        double.class, VECTOR_OPER_TYPE, length(), this, m,\n@@ -2430,1 +2430,1 @@\n-        return (DoubleVector)VectorSupport.selectFromOp(getClass(), null, double.class, double.class, VECTOR_OPER_TYPE,\n+        return (DoubleVector)VectorSupport.selectFromOp(getClass(), null, double.class, VECTOR_OPER_TYPE,\n@@ -2450,1 +2450,1 @@\n-        return (DoubleVector)VectorSupport.selectFromOp(getClass(), masktype, double.class, double.class, VECTOR_OPER_TYPE,\n+        return (DoubleVector)VectorSupport.selectFromOp(getClass(), masktype, double.class, VECTOR_OPER_TYPE,\n@@ -2468,1 +2468,1 @@\n-        return VectorSupport.selectFromTwoVectorOp(getClass(), double.class, double.class, VECTOR_OPER_TYPE, length(), this, v1, v2,\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), double.class, VECTOR_OPER_TYPE, length(), this, v1, v2,\n@@ -2666,1 +2666,1 @@\n-            opc, getClass(), maskClass, double.class, double.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, double.class, VECTOR_OPER_TYPE, length(),\n@@ -2684,1 +2684,1 @@\n-            opc, getClass(), null, double.class, double.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, double.class, VECTOR_OPER_TYPE, length(),\n@@ -2941,1 +2941,1 @@\n-            vectorType, null, double.class, double.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vectorType, null, double.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3124,1 +3124,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3232,1 +3232,1 @@\n-            vsp.vectorType(), null, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), null, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3359,1 +3359,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3376,1 +3376,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3427,1 +3427,1 @@\n-            vectorType, maskClass, double.class, double.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vectorType, maskClass, double.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3444,1 +3444,1 @@\n-                vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3460,1 +3460,1 @@\n-                vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3478,1 +3478,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3495,1 +3495,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3543,1 +3543,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3562,1 +3562,1 @@\n-                vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3579,1 +3579,1 @@\n-                vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3796,1 +3796,1 @@\n-                    vectorType, double.class, double.class, VECTOR_OPER_TYPE, laneCount,\n+                    vectorType, double.class, VECTOR_OPER_TYPE, laneCount,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":36,"deletions":36,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -528,1 +528,1 @@\n-                     VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                     VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -551,1 +551,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -666,1 +666,1 @@\n-                Float128Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Float128Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -682,1 +682,1 @@\n-                Float128Vector.class, Float128Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Float128Vector.class, Float128Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -695,1 +695,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Float128Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Float128Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -705,1 +705,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Float128Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Float128Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -715,1 +715,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Float128Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Float128Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -725,1 +725,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Float128Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Float128Mask.class, int.class,\n@@ -733,1 +733,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Float128Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Float128Mask.class, int.class,\n@@ -741,1 +741,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Float128Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Float128Mask.class, int.class,\n@@ -752,1 +752,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Float128Mask.class, int.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Float128Mask.class, int.class,\n@@ -763,1 +763,1 @@\n-            return VectorSupport.extract(Float128Mask.class, float.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Float128Mask.class, float.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -772,1 +772,1 @@\n-            return VectorSupport.test(BT_ne, Float128Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Float128Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -780,1 +780,1 @@\n-            return VectorSupport.test(BT_overflow, Float128Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Float128Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -788,1 +788,1 @@\n-            return VectorSupport.fromBitsCoerced(Float128Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Float128Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -532,1 +532,1 @@\n-                     VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                     VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -559,1 +559,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -674,1 +674,1 @@\n-                Float256Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Float256Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -690,1 +690,1 @@\n-                Float256Vector.class, Float256Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Float256Vector.class, Float256Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -703,1 +703,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Float256Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Float256Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -713,1 +713,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Float256Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Float256Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -723,1 +723,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Float256Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Float256Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -733,1 +733,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Float256Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Float256Mask.class, int.class,\n@@ -741,1 +741,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Float256Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Float256Mask.class, int.class,\n@@ -749,1 +749,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Float256Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Float256Mask.class, int.class,\n@@ -760,1 +760,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Float256Mask.class, int.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Float256Mask.class, int.class,\n@@ -771,1 +771,1 @@\n-            return VectorSupport.extract(Float256Mask.class, float.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Float256Mask.class, float.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -780,1 +780,1 @@\n-            return VectorSupport.test(BT_ne, Float256Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Float256Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -788,1 +788,1 @@\n-            return VectorSupport.test(BT_overflow, Float256Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Float256Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -796,1 +796,1 @@\n-            return VectorSupport.fromBitsCoerced(Float256Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Float256Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -540,1 +540,1 @@\n-                     VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                     VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -575,1 +575,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -690,1 +690,1 @@\n-                Float512Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Float512Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -706,1 +706,1 @@\n-                Float512Vector.class, Float512Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Float512Vector.class, Float512Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -719,1 +719,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Float512Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Float512Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -729,1 +729,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Float512Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Float512Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -739,1 +739,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Float512Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Float512Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -749,1 +749,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Float512Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Float512Mask.class, int.class,\n@@ -757,1 +757,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Float512Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Float512Mask.class, int.class,\n@@ -765,1 +765,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Float512Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Float512Mask.class, int.class,\n@@ -776,1 +776,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Float512Mask.class, int.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Float512Mask.class, int.class,\n@@ -787,1 +787,1 @@\n-            return VectorSupport.extract(Float512Mask.class, float.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Float512Mask.class, float.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -796,1 +796,1 @@\n-            return VectorSupport.test(BT_ne, Float512Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Float512Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -804,1 +804,1 @@\n-            return VectorSupport.test(BT_overflow, Float512Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Float512Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -812,1 +812,1 @@\n-            return VectorSupport.fromBitsCoerced(Float512Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Float512Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -526,1 +526,1 @@\n-                     VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                     VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -547,1 +547,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -662,1 +662,1 @@\n-                Float64Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Float64Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -678,1 +678,1 @@\n-                Float64Vector.class, Float64Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Float64Vector.class, Float64Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -691,1 +691,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Float64Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Float64Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -701,1 +701,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Float64Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Float64Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -711,1 +711,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Float64Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Float64Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -721,1 +721,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Float64Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Float64Mask.class, int.class,\n@@ -729,1 +729,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Float64Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Float64Mask.class, int.class,\n@@ -737,1 +737,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Float64Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Float64Mask.class, int.class,\n@@ -748,1 +748,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Float64Mask.class, int.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Float64Mask.class, int.class,\n@@ -759,1 +759,1 @@\n-            return VectorSupport.extract(Float64Mask.class, float.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Float64Mask.class, float.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -768,1 +768,1 @@\n-            return VectorSupport.test(BT_ne, Float64Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Float64Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -776,1 +776,1 @@\n-            return VectorSupport.test(BT_overflow, Float64Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Float64Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -784,1 +784,1 @@\n-            return VectorSupport.fromBitsCoerced(Float64Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Float64Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -524,1 +524,1 @@\n-                     VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                     VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -544,1 +544,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -659,1 +659,1 @@\n-                FloatMaxMask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                FloatMaxMask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -675,1 +675,1 @@\n-                FloatMaxVector.class, FloatMaxMask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                FloatMaxVector.class, FloatMaxMask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -688,1 +688,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, FloatMaxMask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, FloatMaxMask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -698,1 +698,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, FloatMaxMask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, FloatMaxMask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -708,1 +708,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, FloatMaxMask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, FloatMaxMask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -718,1 +718,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, FloatMaxMask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, FloatMaxMask.class, int.class,\n@@ -726,1 +726,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, FloatMaxMask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, FloatMaxMask.class, int.class,\n@@ -734,1 +734,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, FloatMaxMask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, FloatMaxMask.class, int.class,\n@@ -745,1 +745,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, FloatMaxMask.class, int.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, FloatMaxMask.class, int.class,\n@@ -756,1 +756,1 @@\n-            return VectorSupport.extract(FloatMaxMask.class, float.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(FloatMaxMask.class, float.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -765,1 +765,1 @@\n-            return VectorSupport.test(BT_ne, FloatMaxMask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, FloatMaxMask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -773,1 +773,1 @@\n-            return VectorSupport.test(BT_overflow, FloatMaxMask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, FloatMaxMask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -781,1 +781,1 @@\n-            return VectorSupport.fromBitsCoerced(FloatMaxMask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(FloatMaxMask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -567,1 +567,1 @@\n-        return VectorSupport.fromBitsCoerced(vsp.vectorType(), float.class, float.class, VECTOR_OPER_TYPE, species.length(),\n+        return VectorSupport.fromBitsCoerced(vsp.vectorType(), float.class, VECTOR_OPER_TYPE, species.length(),\n@@ -689,1 +689,1 @@\n-            opc, getClass(), null, float.class, float.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, float.class, VECTOR_OPER_TYPE, length(),\n@@ -717,1 +717,1 @@\n-            opc, getClass(), maskClass, float.class, float.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, float.class, VECTOR_OPER_TYPE, length(),\n@@ -806,1 +806,1 @@\n-            opc, getClass(), null, float.class, float.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, float.class, VECTOR_OPER_TYPE, length(),\n@@ -844,1 +844,1 @@\n-            opc, getClass(), maskClass, float.class, float.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, float.class, VECTOR_OPER_TYPE, length(),\n@@ -1026,1 +1026,1 @@\n-            opc, getClass(), null, float.class, float.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, float.class, VECTOR_OPER_TYPE, length(),\n@@ -1061,1 +1061,1 @@\n-            opc, getClass(), maskClass, float.class, float.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, float.class, VECTOR_OPER_TYPE, length(),\n@@ -1945,1 +1945,1 @@\n-            opc, getClass(), maskType, float.class, float.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskType, float.class, VECTOR_OPER_TYPE, length(),\n@@ -1967,1 +1967,1 @@\n-            opc, getClass(), maskType, float.class, float.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskType, float.class, VECTOR_OPER_TYPE, length(),\n@@ -2094,1 +2094,1 @@\n-            getClass(), maskType, float.class, float.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), maskType, float.class, VECTOR_OPER_TYPE, length(),\n@@ -2111,1 +2111,1 @@\n-            getClass(), float.class, float.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), float.class, VECTOR_OPER_TYPE, length(),\n@@ -2303,1 +2303,1 @@\n-            getClass(), shuffletype, null, float.class, float.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), shuffletype, null, float.class, VECTOR_OPER_TYPE, length(),\n@@ -2330,1 +2330,1 @@\n-                   getClass(), shuffletype, masktype, float.class, float.class, VECTOR_OPER_TYPE, length(),\n+                   getClass(), shuffletype, masktype, float.class, VECTOR_OPER_TYPE, length(),\n@@ -2356,1 +2356,1 @@\n-                getClass(), shuffletype, null, float.class, float.class, VECTOR_OPER_TYPE, length(),\n+                getClass(), shuffletype, null, float.class, VECTOR_OPER_TYPE, length(),\n@@ -2364,1 +2364,1 @@\n-                getClass(), shuffletype, null, float.class, float.class, VECTOR_OPER_TYPE, length(),\n+                getClass(), shuffletype, null, float.class, VECTOR_OPER_TYPE, length(),\n@@ -2408,1 +2408,1 @@\n-                                                        float.class, float.class, VECTOR_OPER_TYPE, length(), this, m,\n+                                                        float.class, VECTOR_OPER_TYPE, length(), this, m,\n@@ -2427,1 +2427,1 @@\n-                                                        float.class, float.class, VECTOR_OPER_TYPE, length(), this, m,\n+                                                        float.class, VECTOR_OPER_TYPE, length(), this, m,\n@@ -2442,1 +2442,1 @@\n-        return (FloatVector)VectorSupport.selectFromOp(getClass(), null, float.class, float.class, VECTOR_OPER_TYPE,\n+        return (FloatVector)VectorSupport.selectFromOp(getClass(), null, float.class, VECTOR_OPER_TYPE,\n@@ -2462,1 +2462,1 @@\n-        return (FloatVector)VectorSupport.selectFromOp(getClass(), masktype, float.class, float.class, VECTOR_OPER_TYPE,\n+        return (FloatVector)VectorSupport.selectFromOp(getClass(), masktype, float.class, VECTOR_OPER_TYPE,\n@@ -2480,1 +2480,1 @@\n-        return VectorSupport.selectFromTwoVectorOp(getClass(), float.class, float.class, VECTOR_OPER_TYPE, length(), this, v1, v2,\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), float.class, VECTOR_OPER_TYPE, length(), this, v1, v2,\n@@ -2686,1 +2686,1 @@\n-            opc, getClass(), maskClass, float.class, float.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, float.class, VECTOR_OPER_TYPE, length(),\n@@ -2704,1 +2704,1 @@\n-            opc, getClass(), null, float.class, float.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, float.class, VECTOR_OPER_TYPE, length(),\n@@ -2947,1 +2947,1 @@\n-            vectorType, null, float.class, float.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vectorType, null, float.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3130,1 +3130,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3219,1 +3219,1 @@\n-            vsp.vectorType(), null, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), null, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3346,1 +3346,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3363,1 +3363,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3396,1 +3396,1 @@\n-            vectorType, maskClass, float.class, float.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vectorType, maskClass, float.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3413,1 +3413,1 @@\n-                vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3429,1 +3429,1 @@\n-                vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3447,1 +3447,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3464,1 +3464,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3493,1 +3493,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3512,1 +3512,1 @@\n-                vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3529,1 +3529,1 @@\n-                vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3746,1 +3746,1 @@\n-                    vectorType, float.class, float.class, VECTOR_OPER_TYPE, laneCount,\n+                    vectorType, float.class, VECTOR_OPER_TYPE, laneCount,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":36,"deletions":36,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -532,1 +532,1 @@\n-                     VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                     VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -559,1 +559,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -674,1 +674,1 @@\n-                Halffloat128Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Halffloat128Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -690,1 +690,1 @@\n-                Halffloat128Vector.class, Halffloat128Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Halffloat128Vector.class, Halffloat128Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -703,1 +703,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Halffloat128Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Halffloat128Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -713,1 +713,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Halffloat128Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Halffloat128Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -723,1 +723,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Halffloat128Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Halffloat128Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -733,1 +733,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Halffloat128Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Halffloat128Mask.class, short.class,\n@@ -741,1 +741,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Halffloat128Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Halffloat128Mask.class, short.class,\n@@ -749,1 +749,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Halffloat128Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Halffloat128Mask.class, short.class,\n@@ -760,1 +760,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Halffloat128Mask.class, short.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Halffloat128Mask.class, short.class,\n@@ -771,1 +771,1 @@\n-            return VectorSupport.extract(Halffloat128Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Halffloat128Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -780,1 +780,1 @@\n-            return VectorSupport.test(BT_ne, Halffloat128Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Halffloat128Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -788,1 +788,1 @@\n-            return VectorSupport.test(BT_overflow, Halffloat128Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Halffloat128Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -796,1 +796,1 @@\n-            return VectorSupport.fromBitsCoerced(Halffloat128Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Halffloat128Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Halffloat128Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -540,1 +540,1 @@\n-                     VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                     VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -575,1 +575,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -690,1 +690,1 @@\n-                Halffloat256Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Halffloat256Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -706,1 +706,1 @@\n-                Halffloat256Vector.class, Halffloat256Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Halffloat256Vector.class, Halffloat256Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -719,1 +719,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Halffloat256Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Halffloat256Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -729,1 +729,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Halffloat256Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Halffloat256Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -739,1 +739,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Halffloat256Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Halffloat256Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -749,1 +749,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Halffloat256Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Halffloat256Mask.class, short.class,\n@@ -757,1 +757,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Halffloat256Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Halffloat256Mask.class, short.class,\n@@ -765,1 +765,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Halffloat256Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Halffloat256Mask.class, short.class,\n@@ -776,1 +776,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Halffloat256Mask.class, short.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Halffloat256Mask.class, short.class,\n@@ -787,1 +787,1 @@\n-            return VectorSupport.extract(Halffloat256Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Halffloat256Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -796,1 +796,1 @@\n-            return VectorSupport.test(BT_ne, Halffloat256Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Halffloat256Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -804,1 +804,1 @@\n-            return VectorSupport.test(BT_overflow, Halffloat256Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Halffloat256Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -812,1 +812,1 @@\n-            return VectorSupport.fromBitsCoerced(Halffloat256Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Halffloat256Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Halffloat256Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -556,1 +556,1 @@\n-                     VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                     VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -607,1 +607,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -722,1 +722,1 @@\n-                Halffloat512Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Halffloat512Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -738,1 +738,1 @@\n-                Halffloat512Vector.class, Halffloat512Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Halffloat512Vector.class, Halffloat512Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -751,1 +751,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Halffloat512Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Halffloat512Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -761,1 +761,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Halffloat512Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Halffloat512Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -771,1 +771,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Halffloat512Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Halffloat512Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -781,1 +781,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Halffloat512Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Halffloat512Mask.class, short.class,\n@@ -789,1 +789,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Halffloat512Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Halffloat512Mask.class, short.class,\n@@ -797,1 +797,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Halffloat512Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Halffloat512Mask.class, short.class,\n@@ -808,1 +808,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Halffloat512Mask.class, short.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Halffloat512Mask.class, short.class,\n@@ -819,1 +819,1 @@\n-            return VectorSupport.extract(Halffloat512Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Halffloat512Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -828,1 +828,1 @@\n-            return VectorSupport.test(BT_ne, Halffloat512Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Halffloat512Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -836,1 +836,1 @@\n-            return VectorSupport.test(BT_overflow, Halffloat512Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Halffloat512Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -844,1 +844,1 @@\n-            return VectorSupport.fromBitsCoerced(Halffloat512Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Halffloat512Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Halffloat512Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -528,1 +528,1 @@\n-                     VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                     VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -551,1 +551,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -666,1 +666,1 @@\n-                Halffloat64Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Halffloat64Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -682,1 +682,1 @@\n-                Halffloat64Vector.class, Halffloat64Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Halffloat64Vector.class, Halffloat64Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -695,1 +695,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Halffloat64Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Halffloat64Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -705,1 +705,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Halffloat64Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Halffloat64Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -715,1 +715,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Halffloat64Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Halffloat64Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -725,1 +725,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Halffloat64Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Halffloat64Mask.class, short.class,\n@@ -733,1 +733,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Halffloat64Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Halffloat64Mask.class, short.class,\n@@ -741,1 +741,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Halffloat64Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Halffloat64Mask.class, short.class,\n@@ -752,1 +752,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Halffloat64Mask.class, short.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Halffloat64Mask.class, short.class,\n@@ -763,1 +763,1 @@\n-            return VectorSupport.extract(Halffloat64Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Halffloat64Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -772,1 +772,1 @@\n-            return VectorSupport.test(BT_ne, Halffloat64Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Halffloat64Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -780,1 +780,1 @@\n-            return VectorSupport.test(BT_overflow, Halffloat64Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Halffloat64Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -788,1 +788,1 @@\n-            return VectorSupport.fromBitsCoerced(Halffloat64Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Halffloat64Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Halffloat64Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -524,1 +524,1 @@\n-                     VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                     VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -544,1 +544,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -659,1 +659,1 @@\n-                HalffloatMaxMask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                HalffloatMaxMask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -675,1 +675,1 @@\n-                HalffloatMaxVector.class, HalffloatMaxMask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                HalffloatMaxVector.class, HalffloatMaxMask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -688,1 +688,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, HalffloatMaxMask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, HalffloatMaxMask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -698,1 +698,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, HalffloatMaxMask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, HalffloatMaxMask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -708,1 +708,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, HalffloatMaxMask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, HalffloatMaxMask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -718,1 +718,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, HalffloatMaxMask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, HalffloatMaxMask.class, short.class,\n@@ -726,1 +726,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, HalffloatMaxMask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, HalffloatMaxMask.class, short.class,\n@@ -734,1 +734,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, HalffloatMaxMask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, HalffloatMaxMask.class, short.class,\n@@ -745,1 +745,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, HalffloatMaxMask.class, short.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, HalffloatMaxMask.class, short.class,\n@@ -756,1 +756,1 @@\n-            return VectorSupport.extract(HalffloatMaxMask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(HalffloatMaxMask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -765,1 +765,1 @@\n-            return VectorSupport.test(BT_ne, HalffloatMaxMask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, HalffloatMaxMask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -773,1 +773,1 @@\n-            return VectorSupport.test(BT_overflow, HalffloatMaxMask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, HalffloatMaxMask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -781,1 +781,1 @@\n-            return VectorSupport.fromBitsCoerced(HalffloatMaxMask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(HalffloatMaxMask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/HalffloatMaxVector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -538,1 +538,2 @@\n-            int wrapped_index = VectorIntrinsics.wrapToRange((int)vecPayload1[i], 2 * vlen);\n+            int index = Float16.shortBitsToFloat16(vecPayload1[i]).intValue();\n+            int wrapped_index = VectorIntrinsics.wrapToRange(index, 2 * vlen);\n@@ -568,1 +569,1 @@\n-        return VectorSupport.fromBitsCoerced(vsp.vectorType(), short.class, Float16.class, VECTOR_OPER_TYPE, species.length(),\n+        return VectorSupport.fromBitsCoerced(vsp.vectorType(), short.class, VECTOR_OPER_TYPE, species.length(),\n@@ -690,1 +691,1 @@\n-            opc, getClass(), null, short.class, Float16.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, short.class, VECTOR_OPER_TYPE, length(),\n@@ -718,1 +719,1 @@\n-            opc, getClass(), maskClass, short.class, Float16.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, short.class, VECTOR_OPER_TYPE, length(),\n@@ -807,1 +808,1 @@\n-            opc, getClass(), null, short.class, Float16.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, short.class, VECTOR_OPER_TYPE, length(),\n@@ -845,1 +846,1 @@\n-            opc, getClass(), maskClass, short.class, Float16.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, short.class, VECTOR_OPER_TYPE, length(),\n@@ -1025,1 +1026,1 @@\n-            opc, getClass(), null, short.class, Float16.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, short.class, VECTOR_OPER_TYPE, length(),\n@@ -1060,1 +1061,1 @@\n-            opc, getClass(), maskClass, short.class, Float16.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, short.class, VECTOR_OPER_TYPE, length(),\n@@ -1932,1 +1933,1 @@\n-            opc, getClass(), maskType, short.class, Float16.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskType, short.class, VECTOR_OPER_TYPE, length(),\n@@ -1954,1 +1955,1 @@\n-            opc, getClass(), maskType, short.class, Float16.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskType, short.class, VECTOR_OPER_TYPE, length(),\n@@ -2081,1 +2082,1 @@\n-            getClass(), maskType, short.class, Float16.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), maskType, short.class, VECTOR_OPER_TYPE, length(),\n@@ -2098,1 +2099,1 @@\n-            getClass(), short.class, Float16.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), short.class, VECTOR_OPER_TYPE, length(),\n@@ -2290,1 +2291,1 @@\n-            getClass(), shuffletype, null, short.class, Float16.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), shuffletype, null, short.class, VECTOR_OPER_TYPE, length(),\n@@ -2317,1 +2318,1 @@\n-                   getClass(), shuffletype, masktype, short.class, Float16.class, VECTOR_OPER_TYPE, length(),\n+                   getClass(), shuffletype, masktype, short.class, VECTOR_OPER_TYPE, length(),\n@@ -2343,1 +2344,1 @@\n-                getClass(), shuffletype, null, short.class, Float16.class, VECTOR_OPER_TYPE, length(),\n+                getClass(), shuffletype, null, short.class, VECTOR_OPER_TYPE, length(),\n@@ -2351,1 +2352,1 @@\n-                getClass(), shuffletype, null, short.class, Float16.class, VECTOR_OPER_TYPE, length(),\n+                getClass(), shuffletype, null, short.class, VECTOR_OPER_TYPE, length(),\n@@ -2395,1 +2396,1 @@\n-                                                        short.class, Float16.class, VECTOR_OPER_TYPE, length(), this, m,\n+                                                        short.class, VECTOR_OPER_TYPE, length(), this, m,\n@@ -2414,1 +2415,1 @@\n-                                                        short.class, Float16.class, VECTOR_OPER_TYPE, length(), this, m,\n+                                                        short.class, VECTOR_OPER_TYPE, length(), this, m,\n@@ -2429,1 +2430,1 @@\n-        return (HalffloatVector)VectorSupport.selectFromOp(getClass(), null, short.class, Float16.class, VECTOR_OPER_TYPE,\n+        return (HalffloatVector)VectorSupport.selectFromOp(getClass(), null, short.class, VECTOR_OPER_TYPE,\n@@ -2449,1 +2450,1 @@\n-        return (HalffloatVector)VectorSupport.selectFromOp(getClass(), masktype, short.class, Float16.class, VECTOR_OPER_TYPE,\n+        return (HalffloatVector)VectorSupport.selectFromOp(getClass(), masktype, short.class, VECTOR_OPER_TYPE,\n@@ -2467,1 +2468,1 @@\n-        return VectorSupport.selectFromTwoVectorOp(getClass(), short.class, Float16.class, VECTOR_OPER_TYPE, length(), this, v1, v2,\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), short.class, VECTOR_OPER_TYPE, length(), this, v1, v2,\n@@ -2665,1 +2666,1 @@\n-            opc, getClass(), maskClass, short.class, Float16.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, short.class, VECTOR_OPER_TYPE, length(),\n@@ -2683,1 +2684,1 @@\n-            opc, getClass(), null, short.class, Float16.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, short.class, VECTOR_OPER_TYPE, length(),\n@@ -2940,1 +2941,1 @@\n-            vectorType, null, short.class, Float16.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vectorType, null, short.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3273,1 +3274,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3422,1 +3423,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3627,1 +3628,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3644,1 +3645,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3691,1 +3692,1 @@\n-            vectorType, maskClass, short.class, Float16.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vectorType, maskClass, short.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3707,1 +3708,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3724,1 +3725,1 @@\n-                vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3739,1 +3740,1 @@\n-                vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3755,1 +3756,1 @@\n-                vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3773,1 +3774,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3790,1 +3791,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3805,1 +3806,1 @@\n-                vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3822,1 +3823,1 @@\n-                vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3840,1 +3841,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -4072,1 +4073,1 @@\n-                    vectorType, short.class, Float16.class, VECTOR_OPER_TYPE, laneCount,\n+                    vectorType, short.class, VECTOR_OPER_TYPE, laneCount,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/HalffloatVector.java","additions":40,"deletions":39,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -539,1 +539,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -562,1 +562,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -677,1 +677,1 @@\n-                Int128Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Int128Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -693,1 +693,1 @@\n-                Int128Vector.class, Int128Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Int128Vector.class, Int128Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -706,1 +706,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Int128Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Int128Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -716,1 +716,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Int128Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Int128Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -726,1 +726,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Int128Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Int128Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -736,1 +736,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Int128Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Int128Mask.class, int.class,\n@@ -744,1 +744,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Int128Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Int128Mask.class, int.class,\n@@ -752,1 +752,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Int128Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Int128Mask.class, int.class,\n@@ -763,1 +763,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Int128Mask.class, int.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Int128Mask.class, int.class,\n@@ -774,1 +774,1 @@\n-            return VectorSupport.extract(Int128Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Int128Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -783,1 +783,1 @@\n-            return VectorSupport.test(BT_ne, Int128Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Int128Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -791,1 +791,1 @@\n-            return VectorSupport.test(BT_overflow, Int128Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Int128Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -799,1 +799,1 @@\n-            return VectorSupport.fromBitsCoerced(Int128Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Int128Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -543,1 +543,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -570,1 +570,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -685,1 +685,1 @@\n-                Int256Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Int256Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -701,1 +701,1 @@\n-                Int256Vector.class, Int256Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Int256Vector.class, Int256Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -714,1 +714,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Int256Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Int256Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -724,1 +724,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Int256Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Int256Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -734,1 +734,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Int256Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Int256Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -744,1 +744,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Int256Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Int256Mask.class, int.class,\n@@ -752,1 +752,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Int256Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Int256Mask.class, int.class,\n@@ -760,1 +760,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Int256Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Int256Mask.class, int.class,\n@@ -771,1 +771,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Int256Mask.class, int.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Int256Mask.class, int.class,\n@@ -782,1 +782,1 @@\n-            return VectorSupport.extract(Int256Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Int256Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -791,1 +791,1 @@\n-            return VectorSupport.test(BT_ne, Int256Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Int256Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -799,1 +799,1 @@\n-            return VectorSupport.test(BT_overflow, Int256Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Int256Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -807,1 +807,1 @@\n-            return VectorSupport.fromBitsCoerced(Int256Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Int256Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -551,1 +551,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -586,1 +586,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -701,1 +701,1 @@\n-                Int512Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Int512Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -717,1 +717,1 @@\n-                Int512Vector.class, Int512Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Int512Vector.class, Int512Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -730,1 +730,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Int512Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Int512Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -740,1 +740,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Int512Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Int512Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -750,1 +750,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Int512Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Int512Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -760,1 +760,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Int512Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Int512Mask.class, int.class,\n@@ -768,1 +768,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Int512Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Int512Mask.class, int.class,\n@@ -776,1 +776,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Int512Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Int512Mask.class, int.class,\n@@ -787,1 +787,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Int512Mask.class, int.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Int512Mask.class, int.class,\n@@ -798,1 +798,1 @@\n-            return VectorSupport.extract(Int512Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Int512Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -807,1 +807,1 @@\n-            return VectorSupport.test(BT_ne, Int512Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Int512Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -815,1 +815,1 @@\n-            return VectorSupport.test(BT_overflow, Int512Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Int512Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -823,1 +823,1 @@\n-            return VectorSupport.fromBitsCoerced(Int512Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Int512Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -537,1 +537,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -558,1 +558,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -673,1 +673,1 @@\n-                Int64Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Int64Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -689,1 +689,1 @@\n-                Int64Vector.class, Int64Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Int64Vector.class, Int64Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -702,1 +702,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Int64Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Int64Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -712,1 +712,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Int64Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Int64Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -722,1 +722,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Int64Mask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Int64Mask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -732,1 +732,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Int64Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Int64Mask.class, int.class,\n@@ -740,1 +740,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Int64Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Int64Mask.class, int.class,\n@@ -748,1 +748,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Int64Mask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Int64Mask.class, int.class,\n@@ -759,1 +759,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Int64Mask.class, int.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Int64Mask.class, int.class,\n@@ -770,1 +770,1 @@\n-            return VectorSupport.extract(Int64Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Int64Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -779,1 +779,1 @@\n-            return VectorSupport.test(BT_ne, Int64Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Int64Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -787,1 +787,1 @@\n-            return VectorSupport.test(BT_overflow, Int64Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Int64Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -795,1 +795,1 @@\n-            return VectorSupport.fromBitsCoerced(Int64Mask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Int64Mask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -536,1 +536,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -556,1 +556,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -671,1 +671,1 @@\n-                IntMaxMask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                IntMaxMask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -687,1 +687,1 @@\n-                IntMaxVector.class, IntMaxMask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                IntMaxVector.class, IntMaxMask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -700,1 +700,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, IntMaxMask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, IntMaxMask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -710,1 +710,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, IntMaxMask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, IntMaxMask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -720,1 +720,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, IntMaxMask.class, null, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, IntMaxMask.class, null, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -730,1 +730,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, IntMaxMask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, IntMaxMask.class, int.class,\n@@ -738,1 +738,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, IntMaxMask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, IntMaxMask.class, int.class,\n@@ -746,1 +746,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, IntMaxMask.class, int.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, IntMaxMask.class, int.class,\n@@ -757,1 +757,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, IntMaxMask.class, int.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, IntMaxMask.class, int.class,\n@@ -768,1 +768,1 @@\n-            return VectorSupport.extract(IntMaxMask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(IntMaxMask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -777,1 +777,1 @@\n-            return VectorSupport.test(BT_ne, IntMaxMask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, IntMaxMask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -785,1 +785,1 @@\n-            return VectorSupport.test(BT_overflow, IntMaxMask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, IntMaxMask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -793,1 +793,1 @@\n-            return VectorSupport.fromBitsCoerced(IntMaxMask.class, int.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(IntMaxMask.class, int.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -578,1 +578,1 @@\n-        return VectorSupport.fromBitsCoerced(vsp.vectorType(), int.class, int.class, VECTOR_OPER_TYPE, species.length(),\n+        return VectorSupport.fromBitsCoerced(vsp.vectorType(), int.class, VECTOR_OPER_TYPE, species.length(),\n@@ -700,1 +700,1 @@\n-            opc, getClass(), null, int.class, int.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, int.class, VECTOR_OPER_TYPE, length(),\n@@ -728,1 +728,1 @@\n-            opc, getClass(), maskClass, int.class, int.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, int.class, VECTOR_OPER_TYPE, length(),\n@@ -801,1 +801,1 @@\n-            opc, getClass(), null, int.class, int.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, int.class, VECTOR_OPER_TYPE, length(),\n@@ -852,1 +852,1 @@\n-            opc, getClass(), maskClass, int.class, int.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, int.class, VECTOR_OPER_TYPE, length(),\n@@ -1043,1 +1043,1 @@\n-            opc, getClass(), null, int.class, int.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, int.class, VECTOR_OPER_TYPE, length(),\n@@ -1064,1 +1064,1 @@\n-            opc, getClass(), maskClass, int.class, int.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, int.class, VECTOR_OPER_TYPE, length(),\n@@ -1140,1 +1140,1 @@\n-            opc, getClass(), null, int.class, int.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, int.class, VECTOR_OPER_TYPE, length(),\n@@ -1180,1 +1180,1 @@\n-            opc, getClass(), maskClass, int.class, int.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, int.class, VECTOR_OPER_TYPE, length(),\n@@ -2060,1 +2060,1 @@\n-            opc, getClass(), maskType, int.class, int.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskType, int.class, VECTOR_OPER_TYPE, length(),\n@@ -2082,1 +2082,1 @@\n-            opc, getClass(), maskType, int.class, int.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskType, int.class, VECTOR_OPER_TYPE, length(),\n@@ -2213,1 +2213,1 @@\n-            getClass(), maskType, int.class, int.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), maskType, int.class, VECTOR_OPER_TYPE, length(),\n@@ -2230,1 +2230,1 @@\n-            getClass(), int.class, int.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), int.class, VECTOR_OPER_TYPE, length(),\n@@ -2422,1 +2422,1 @@\n-            getClass(), shuffletype, null, int.class, int.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), shuffletype, null, int.class, VECTOR_OPER_TYPE, length(),\n@@ -2449,1 +2449,1 @@\n-                   getClass(), shuffletype, masktype, int.class, int.class, VECTOR_OPER_TYPE, length(),\n+                   getClass(), shuffletype, masktype, int.class, VECTOR_OPER_TYPE, length(),\n@@ -2475,1 +2475,1 @@\n-                getClass(), shuffletype, null, int.class, int.class, VECTOR_OPER_TYPE, length(),\n+                getClass(), shuffletype, null, int.class, VECTOR_OPER_TYPE, length(),\n@@ -2483,1 +2483,1 @@\n-                getClass(), shuffletype, null, int.class, int.class, VECTOR_OPER_TYPE, length(),\n+                getClass(), shuffletype, null, int.class, VECTOR_OPER_TYPE, length(),\n@@ -2533,1 +2533,1 @@\n-                                                        int.class, int.class, VECTOR_OPER_TYPE, length(), this, m,\n+                                                        int.class, VECTOR_OPER_TYPE, length(), this, m,\n@@ -2552,1 +2552,1 @@\n-                                                        int.class, int.class, VECTOR_OPER_TYPE, length(), this, m,\n+                                                        int.class, VECTOR_OPER_TYPE, length(), this, m,\n@@ -2567,1 +2567,1 @@\n-        return (IntVector)VectorSupport.selectFromOp(getClass(), null, int.class, int.class, VECTOR_OPER_TYPE,\n+        return (IntVector)VectorSupport.selectFromOp(getClass(), null, int.class, VECTOR_OPER_TYPE,\n@@ -2587,1 +2587,1 @@\n-        return (IntVector)VectorSupport.selectFromOp(getClass(), masktype, int.class, int.class, VECTOR_OPER_TYPE,\n+        return (IntVector)VectorSupport.selectFromOp(getClass(), masktype, int.class, VECTOR_OPER_TYPE,\n@@ -2605,1 +2605,1 @@\n-        return VectorSupport.selectFromTwoVectorOp(getClass(), int.class, int.class, VECTOR_OPER_TYPE, length(), this, v1, v2,\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), int.class, VECTOR_OPER_TYPE, length(), this, v1, v2,\n@@ -2825,1 +2825,1 @@\n-            opc, getClass(), maskClass, int.class, int.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, int.class, VECTOR_OPER_TYPE, length(),\n@@ -2843,1 +2843,1 @@\n-            opc, getClass(), null, int.class, int.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, int.class, VECTOR_OPER_TYPE, length(),\n@@ -3103,1 +3103,1 @@\n-            vectorType, null, int.class, int.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vectorType, null, int.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3286,1 +3286,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3375,1 +3375,1 @@\n-            vsp.vectorType(), null, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), null, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3502,1 +3502,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3519,1 +3519,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3552,1 +3552,1 @@\n-            vectorType, maskClass, int.class, int.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vectorType, maskClass, int.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3569,1 +3569,1 @@\n-                vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3585,1 +3585,1 @@\n-                vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3603,1 +3603,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3620,1 +3620,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3649,1 +3649,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3668,1 +3668,1 @@\n-                vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3685,1 +3685,1 @@\n-                vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3902,1 +3902,1 @@\n-                    vectorType, int.class, int.class, VECTOR_OPER_TYPE, laneCount,\n+                    vectorType, int.class, VECTOR_OPER_TYPE, laneCount,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":38,"deletions":38,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -527,1 +527,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -548,1 +548,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -663,1 +663,1 @@\n-                Long128Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Long128Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -679,1 +679,1 @@\n-                Long128Vector.class, Long128Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Long128Vector.class, Long128Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -692,1 +692,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Long128Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Long128Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -702,1 +702,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Long128Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Long128Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -712,1 +712,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Long128Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Long128Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -722,1 +722,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Long128Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Long128Mask.class, long.class,\n@@ -730,1 +730,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Long128Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Long128Mask.class, long.class,\n@@ -738,1 +738,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Long128Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Long128Mask.class, long.class,\n@@ -749,1 +749,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Long128Mask.class, long.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Long128Mask.class, long.class,\n@@ -760,1 +760,1 @@\n-            return VectorSupport.extract(Long128Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Long128Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -769,1 +769,1 @@\n-            return VectorSupport.test(BT_ne, Long128Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Long128Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -777,1 +777,1 @@\n-            return VectorSupport.test(BT_overflow, Long128Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Long128Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -785,1 +785,1 @@\n-            return VectorSupport.fromBitsCoerced(Long128Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Long128Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -529,1 +529,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -552,1 +552,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -667,1 +667,1 @@\n-                Long256Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Long256Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -683,1 +683,1 @@\n-                Long256Vector.class, Long256Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Long256Vector.class, Long256Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -696,1 +696,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Long256Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Long256Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -706,1 +706,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Long256Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Long256Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -716,1 +716,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Long256Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Long256Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -726,1 +726,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Long256Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Long256Mask.class, long.class,\n@@ -734,1 +734,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Long256Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Long256Mask.class, long.class,\n@@ -742,1 +742,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Long256Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Long256Mask.class, long.class,\n@@ -753,1 +753,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Long256Mask.class, long.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Long256Mask.class, long.class,\n@@ -764,1 +764,1 @@\n-            return VectorSupport.extract(Long256Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Long256Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -773,1 +773,1 @@\n-            return VectorSupport.test(BT_ne, Long256Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Long256Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -781,1 +781,1 @@\n-            return VectorSupport.test(BT_overflow, Long256Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Long256Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -789,1 +789,1 @@\n-            return VectorSupport.fromBitsCoerced(Long256Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Long256Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -533,1 +533,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -560,1 +560,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -675,1 +675,1 @@\n-                Long512Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Long512Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -691,1 +691,1 @@\n-                Long512Vector.class, Long512Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Long512Vector.class, Long512Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -704,1 +704,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Long512Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Long512Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -714,1 +714,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Long512Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Long512Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -724,1 +724,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Long512Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Long512Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -734,1 +734,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Long512Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Long512Mask.class, long.class,\n@@ -742,1 +742,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Long512Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Long512Mask.class, long.class,\n@@ -750,1 +750,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Long512Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Long512Mask.class, long.class,\n@@ -761,1 +761,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Long512Mask.class, long.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Long512Mask.class, long.class,\n@@ -772,1 +772,1 @@\n-            return VectorSupport.extract(Long512Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Long512Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -781,1 +781,1 @@\n-            return VectorSupport.test(BT_ne, Long512Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Long512Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -789,1 +789,1 @@\n-            return VectorSupport.test(BT_overflow, Long512Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Long512Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -797,1 +797,1 @@\n-            return VectorSupport.fromBitsCoerced(Long512Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Long512Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -526,1 +526,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -546,1 +546,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -661,1 +661,1 @@\n-                Long64Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Long64Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -677,1 +677,1 @@\n-                Long64Vector.class, Long64Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Long64Vector.class, Long64Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -690,1 +690,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Long64Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Long64Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -700,1 +700,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Long64Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Long64Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -710,1 +710,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Long64Mask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Long64Mask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -720,1 +720,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Long64Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Long64Mask.class, long.class,\n@@ -728,1 +728,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Long64Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Long64Mask.class, long.class,\n@@ -736,1 +736,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Long64Mask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Long64Mask.class, long.class,\n@@ -747,1 +747,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Long64Mask.class, long.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Long64Mask.class, long.class,\n@@ -758,1 +758,1 @@\n-            return VectorSupport.extract(Long64Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Long64Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -767,1 +767,1 @@\n-            return VectorSupport.test(BT_ne, Long64Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Long64Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -775,1 +775,1 @@\n-            return VectorSupport.test(BT_overflow, Long64Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Long64Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -783,1 +783,1 @@\n-            return VectorSupport.fromBitsCoerced(Long64Mask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Long64Mask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -526,1 +526,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -546,1 +546,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -661,1 +661,1 @@\n-                LongMaxMask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                LongMaxMask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -677,1 +677,1 @@\n-                LongMaxVector.class, LongMaxMask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                LongMaxVector.class, LongMaxMask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -690,1 +690,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, LongMaxMask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, LongMaxMask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -700,1 +700,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, LongMaxMask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, LongMaxMask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -710,1 +710,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, LongMaxMask.class, null, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, LongMaxMask.class, null, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -720,1 +720,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, LongMaxMask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, LongMaxMask.class, long.class,\n@@ -728,1 +728,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, LongMaxMask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, LongMaxMask.class, long.class,\n@@ -736,1 +736,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, LongMaxMask.class, long.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, LongMaxMask.class, long.class,\n@@ -747,1 +747,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, LongMaxMask.class, long.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, LongMaxMask.class, long.class,\n@@ -758,1 +758,1 @@\n-            return VectorSupport.extract(LongMaxMask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(LongMaxMask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -767,1 +767,1 @@\n-            return VectorSupport.test(BT_ne, LongMaxMask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, LongMaxMask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -775,1 +775,1 @@\n-            return VectorSupport.test(BT_overflow, LongMaxMask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, LongMaxMask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -783,1 +783,1 @@\n-            return VectorSupport.fromBitsCoerced(LongMaxMask.class, long.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(LongMaxMask.class, long.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -578,1 +578,1 @@\n-        return VectorSupport.fromBitsCoerced(vsp.vectorType(), long.class, long.class, VECTOR_OPER_TYPE, species.length(),\n+        return VectorSupport.fromBitsCoerced(vsp.vectorType(), long.class, VECTOR_OPER_TYPE, species.length(),\n@@ -658,1 +658,1 @@\n-            opc, getClass(), null, long.class, long.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, long.class, VECTOR_OPER_TYPE, length(),\n@@ -686,1 +686,1 @@\n-            opc, getClass(), maskClass, long.class, long.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, long.class, VECTOR_OPER_TYPE, length(),\n@@ -759,1 +759,1 @@\n-            opc, getClass(), null, long.class, long.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, long.class, VECTOR_OPER_TYPE, length(),\n@@ -810,1 +810,1 @@\n-            opc, getClass(), maskClass, long.class, long.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, long.class, VECTOR_OPER_TYPE, length(),\n@@ -956,1 +956,1 @@\n-            opc, getClass(), null, long.class, long.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, long.class, VECTOR_OPER_TYPE, length(),\n@@ -977,1 +977,1 @@\n-            opc, getClass(), maskClass, long.class, long.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, long.class, VECTOR_OPER_TYPE, length(),\n@@ -1053,1 +1053,1 @@\n-            opc, getClass(), null, long.class, long.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, long.class, VECTOR_OPER_TYPE, length(),\n@@ -1093,1 +1093,1 @@\n-            opc, getClass(), maskClass, long.class, long.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, long.class, VECTOR_OPER_TYPE, length(),\n@@ -1973,1 +1973,1 @@\n-            opc, getClass(), maskType, long.class, long.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskType, long.class, VECTOR_OPER_TYPE, length(),\n@@ -1995,1 +1995,1 @@\n-            opc, getClass(), maskType, long.class, long.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskType, long.class, VECTOR_OPER_TYPE, length(),\n@@ -2100,1 +2100,1 @@\n-            getClass(), maskType, long.class, long.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), maskType, long.class, VECTOR_OPER_TYPE, length(),\n@@ -2117,1 +2117,1 @@\n-            getClass(), long.class, long.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), long.class, VECTOR_OPER_TYPE, length(),\n@@ -2288,1 +2288,1 @@\n-            getClass(), shuffletype, null, long.class, long.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), shuffletype, null, long.class, VECTOR_OPER_TYPE, length(),\n@@ -2315,1 +2315,1 @@\n-                   getClass(), shuffletype, masktype, long.class, long.class, VECTOR_OPER_TYPE, length(),\n+                   getClass(), shuffletype, masktype, long.class, VECTOR_OPER_TYPE, length(),\n@@ -2341,1 +2341,1 @@\n-                getClass(), shuffletype, null, long.class, long.class, VECTOR_OPER_TYPE, length(),\n+                getClass(), shuffletype, null, long.class, VECTOR_OPER_TYPE, length(),\n@@ -2349,1 +2349,1 @@\n-                getClass(), shuffletype, null, long.class, long.class, VECTOR_OPER_TYPE, length(),\n+                getClass(), shuffletype, null, long.class, VECTOR_OPER_TYPE, length(),\n@@ -2399,1 +2399,1 @@\n-                                                        long.class, long.class, VECTOR_OPER_TYPE, length(), this, m,\n+                                                        long.class, VECTOR_OPER_TYPE, length(), this, m,\n@@ -2418,1 +2418,1 @@\n-                                                        long.class, long.class, VECTOR_OPER_TYPE, length(), this, m,\n+                                                        long.class, VECTOR_OPER_TYPE, length(), this, m,\n@@ -2433,1 +2433,1 @@\n-        return (LongVector)VectorSupport.selectFromOp(getClass(), null, long.class, long.class, VECTOR_OPER_TYPE,\n+        return (LongVector)VectorSupport.selectFromOp(getClass(), null, long.class, VECTOR_OPER_TYPE,\n@@ -2453,1 +2453,1 @@\n-        return (LongVector)VectorSupport.selectFromOp(getClass(), masktype, long.class, long.class, VECTOR_OPER_TYPE,\n+        return (LongVector)VectorSupport.selectFromOp(getClass(), masktype, long.class, VECTOR_OPER_TYPE,\n@@ -2471,1 +2471,1 @@\n-        return VectorSupport.selectFromTwoVectorOp(getClass(), long.class, long.class, VECTOR_OPER_TYPE, length(), this, v1, v2,\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), long.class, VECTOR_OPER_TYPE, length(), this, v1, v2,\n@@ -2691,1 +2691,1 @@\n-            opc, getClass(), maskClass, long.class, long.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, long.class, VECTOR_OPER_TYPE, length(),\n@@ -2709,1 +2709,1 @@\n-            opc, getClass(), null, long.class, long.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, long.class, VECTOR_OPER_TYPE, length(),\n@@ -2982,1 +2982,1 @@\n-            vectorType, null, long.class, long.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vectorType, null, long.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3165,1 +3165,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3273,1 +3273,1 @@\n-            vsp.vectorType(), null, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), null, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3400,1 +3400,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3417,1 +3417,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3468,1 +3468,1 @@\n-            vectorType, maskClass, long.class, long.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vectorType, maskClass, long.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3485,1 +3485,1 @@\n-                vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3501,1 +3501,1 @@\n-                vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3519,1 +3519,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3536,1 +3536,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3584,1 +3584,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3603,1 +3603,1 @@\n-                vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3620,1 +3620,1 @@\n-                vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3837,1 +3837,1 @@\n-                    vectorType, long.class, long.class, VECTOR_OPER_TYPE, laneCount,\n+                    vectorType, long.class, VECTOR_OPER_TYPE, laneCount,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":38,"deletions":38,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -543,1 +543,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -570,1 +570,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -685,1 +685,1 @@\n-                Short128Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Short128Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -701,1 +701,1 @@\n-                Short128Vector.class, Short128Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Short128Vector.class, Short128Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -714,1 +714,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Short128Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Short128Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -724,1 +724,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Short128Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Short128Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -734,1 +734,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Short128Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Short128Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -744,1 +744,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Short128Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Short128Mask.class, short.class,\n@@ -752,1 +752,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Short128Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Short128Mask.class, short.class,\n@@ -760,1 +760,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Short128Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Short128Mask.class, short.class,\n@@ -771,1 +771,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Short128Mask.class, short.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Short128Mask.class, short.class,\n@@ -782,1 +782,1 @@\n-            return VectorSupport.extract(Short128Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Short128Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -791,1 +791,1 @@\n-            return VectorSupport.test(BT_ne, Short128Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Short128Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -799,1 +799,1 @@\n-            return VectorSupport.test(BT_overflow, Short128Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Short128Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -807,1 +807,1 @@\n-            return VectorSupport.fromBitsCoerced(Short128Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Short128Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -551,1 +551,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -586,1 +586,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -701,1 +701,1 @@\n-                Short256Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Short256Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -717,1 +717,1 @@\n-                Short256Vector.class, Short256Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Short256Vector.class, Short256Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -730,1 +730,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Short256Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Short256Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -740,1 +740,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Short256Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Short256Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -750,1 +750,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Short256Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Short256Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -760,1 +760,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Short256Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Short256Mask.class, short.class,\n@@ -768,1 +768,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Short256Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Short256Mask.class, short.class,\n@@ -776,1 +776,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Short256Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Short256Mask.class, short.class,\n@@ -787,1 +787,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Short256Mask.class, short.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Short256Mask.class, short.class,\n@@ -798,1 +798,1 @@\n-            return VectorSupport.extract(Short256Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Short256Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -807,1 +807,1 @@\n-            return VectorSupport.test(BT_ne, Short256Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Short256Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -815,1 +815,1 @@\n-            return VectorSupport.test(BT_overflow, Short256Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Short256Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -823,1 +823,1 @@\n-            return VectorSupport.fromBitsCoerced(Short256Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Short256Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -567,1 +567,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -618,1 +618,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -733,1 +733,1 @@\n-                Short512Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Short512Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -749,1 +749,1 @@\n-                Short512Vector.class, Short512Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Short512Vector.class, Short512Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -762,1 +762,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Short512Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Short512Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -772,1 +772,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Short512Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Short512Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -782,1 +782,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Short512Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Short512Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -792,1 +792,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Short512Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Short512Mask.class, short.class,\n@@ -800,1 +800,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Short512Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Short512Mask.class, short.class,\n@@ -808,1 +808,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Short512Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Short512Mask.class, short.class,\n@@ -819,1 +819,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Short512Mask.class, short.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Short512Mask.class, short.class,\n@@ -830,1 +830,1 @@\n-            return VectorSupport.extract(Short512Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Short512Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -839,1 +839,1 @@\n-            return VectorSupport.test(BT_ne, Short512Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Short512Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -847,1 +847,1 @@\n-            return VectorSupport.test(BT_overflow, Short512Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Short512Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -855,1 +855,1 @@\n-            return VectorSupport.fromBitsCoerced(Short512Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Short512Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -539,1 +539,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -562,1 +562,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -677,1 +677,1 @@\n-                Short64Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                Short64Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -693,1 +693,1 @@\n-                Short64Vector.class, Short64Mask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                Short64Vector.class, Short64Mask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -706,1 +706,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, Short64Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, Short64Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -716,1 +716,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, Short64Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, Short64Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -726,1 +726,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, Short64Mask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, Short64Mask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -736,1 +736,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Short64Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, Short64Mask.class, short.class,\n@@ -744,1 +744,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Short64Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, Short64Mask.class, short.class,\n@@ -752,1 +752,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Short64Mask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, Short64Mask.class, short.class,\n@@ -763,1 +763,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Short64Mask.class, short.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, Short64Mask.class, short.class,\n@@ -774,1 +774,1 @@\n-            return VectorSupport.extract(Short64Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(Short64Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -783,1 +783,1 @@\n-            return VectorSupport.test(BT_ne, Short64Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, Short64Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -791,1 +791,1 @@\n-            return VectorSupport.test(BT_overflow, Short64Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, Short64Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -799,1 +799,1 @@\n-            return VectorSupport.fromBitsCoerced(Short64Mask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(Short64Mask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -536,1 +536,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -556,1 +556,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -671,1 +671,1 @@\n-                ShortMaxMask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                ShortMaxMask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -687,1 +687,1 @@\n-                ShortMaxVector.class, ShortMaxMask.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                ShortMaxVector.class, ShortMaxMask.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -700,1 +700,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, ShortMaxMask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, ShortMaxMask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -710,1 +710,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, ShortMaxMask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, ShortMaxMask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -720,1 +720,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, ShortMaxMask.class, null, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, ShortMaxMask.class, null, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -730,1 +730,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, ShortMaxMask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, ShortMaxMask.class, short.class,\n@@ -738,1 +738,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, ShortMaxMask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, ShortMaxMask.class, short.class,\n@@ -746,1 +746,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, ShortMaxMask.class, short.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, ShortMaxMask.class, short.class,\n@@ -757,1 +757,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, ShortMaxMask.class, short.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, ShortMaxMask.class, short.class,\n@@ -768,1 +768,1 @@\n-            return VectorSupport.extract(ShortMaxMask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract(ShortMaxMask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -777,1 +777,1 @@\n-            return VectorSupport.test(BT_ne, ShortMaxMask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, ShortMaxMask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -785,1 +785,1 @@\n-            return VectorSupport.test(BT_overflow, ShortMaxMask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, ShortMaxMask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -793,1 +793,1 @@\n-            return VectorSupport.fromBitsCoerced(ShortMaxMask.class, short.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced(ShortMaxMask.class, short.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -578,1 +578,1 @@\n-        return VectorSupport.fromBitsCoerced(vsp.vectorType(), short.class, short.class, VECTOR_OPER_TYPE, species.length(),\n+        return VectorSupport.fromBitsCoerced(vsp.vectorType(), short.class, VECTOR_OPER_TYPE, species.length(),\n@@ -700,1 +700,1 @@\n-            opc, getClass(), null, short.class, short.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, short.class, VECTOR_OPER_TYPE, length(),\n@@ -728,1 +728,1 @@\n-            opc, getClass(), maskClass, short.class, short.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, short.class, VECTOR_OPER_TYPE, length(),\n@@ -801,1 +801,1 @@\n-            opc, getClass(), null, short.class, short.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, short.class, VECTOR_OPER_TYPE, length(),\n@@ -852,1 +852,1 @@\n-            opc, getClass(), maskClass, short.class, short.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, short.class, VECTOR_OPER_TYPE, length(),\n@@ -1039,1 +1039,1 @@\n-            opc, getClass(), null, short.class, short.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, short.class, VECTOR_OPER_TYPE, length(),\n@@ -1060,1 +1060,1 @@\n-            opc, getClass(), maskClass, short.class, short.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, short.class, VECTOR_OPER_TYPE, length(),\n@@ -1137,1 +1137,1 @@\n-            opc, getClass(), null, short.class, short.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, short.class, VECTOR_OPER_TYPE, length(),\n@@ -1177,1 +1177,1 @@\n-            opc, getClass(), maskClass, short.class, short.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, short.class, VECTOR_OPER_TYPE, length(),\n@@ -2076,1 +2076,1 @@\n-            opc, getClass(), maskType, short.class, short.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskType, short.class, VECTOR_OPER_TYPE, length(),\n@@ -2098,1 +2098,1 @@\n-            opc, getClass(), maskType, short.class, short.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskType, short.class, VECTOR_OPER_TYPE, length(),\n@@ -2229,1 +2229,1 @@\n-            getClass(), maskType, short.class, short.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), maskType, short.class, VECTOR_OPER_TYPE, length(),\n@@ -2246,1 +2246,1 @@\n-            getClass(), short.class, short.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), short.class, VECTOR_OPER_TYPE, length(),\n@@ -2438,1 +2438,1 @@\n-            getClass(), shuffletype, null, short.class, short.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), shuffletype, null, short.class, VECTOR_OPER_TYPE, length(),\n@@ -2465,1 +2465,1 @@\n-                   getClass(), shuffletype, masktype, short.class, short.class, VECTOR_OPER_TYPE, length(),\n+                   getClass(), shuffletype, masktype, short.class, VECTOR_OPER_TYPE, length(),\n@@ -2491,1 +2491,1 @@\n-                getClass(), shuffletype, null, short.class, short.class, VECTOR_OPER_TYPE, length(),\n+                getClass(), shuffletype, null, short.class, VECTOR_OPER_TYPE, length(),\n@@ -2499,1 +2499,1 @@\n-                getClass(), shuffletype, null, short.class, short.class, VECTOR_OPER_TYPE, length(),\n+                getClass(), shuffletype, null, short.class, VECTOR_OPER_TYPE, length(),\n@@ -2549,1 +2549,1 @@\n-                                                        short.class, short.class, VECTOR_OPER_TYPE, length(), this, m,\n+                                                        short.class, VECTOR_OPER_TYPE, length(), this, m,\n@@ -2568,1 +2568,1 @@\n-                                                        short.class, short.class, VECTOR_OPER_TYPE, length(), this, m,\n+                                                        short.class, VECTOR_OPER_TYPE, length(), this, m,\n@@ -2583,1 +2583,1 @@\n-        return (ShortVector)VectorSupport.selectFromOp(getClass(), null, short.class, short.class, VECTOR_OPER_TYPE,\n+        return (ShortVector)VectorSupport.selectFromOp(getClass(), null, short.class, VECTOR_OPER_TYPE,\n@@ -2603,1 +2603,1 @@\n-        return (ShortVector)VectorSupport.selectFromOp(getClass(), masktype, short.class, short.class, VECTOR_OPER_TYPE,\n+        return (ShortVector)VectorSupport.selectFromOp(getClass(), masktype, short.class, VECTOR_OPER_TYPE,\n@@ -2621,1 +2621,1 @@\n-        return VectorSupport.selectFromTwoVectorOp(getClass(), short.class, short.class, VECTOR_OPER_TYPE, length(), this, v1, v2,\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), short.class, VECTOR_OPER_TYPE, length(), this, v1, v2,\n@@ -2841,1 +2841,1 @@\n-            opc, getClass(), maskClass, short.class, short.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, short.class, VECTOR_OPER_TYPE, length(),\n@@ -2859,1 +2859,1 @@\n-            opc, getClass(), null, short.class, short.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, short.class, VECTOR_OPER_TYPE, length(),\n@@ -3140,1 +3140,1 @@\n-            vectorType, null, short.class, short.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vectorType, null, short.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3473,1 +3473,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3622,1 +3622,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3827,1 +3827,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3844,1 +3844,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3891,1 +3891,1 @@\n-            vectorType, maskClass, short.class, short.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vectorType, maskClass, short.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3907,1 +3907,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3924,1 +3924,1 @@\n-                vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3939,1 +3939,1 @@\n-                vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3955,1 +3955,1 @@\n-                vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3973,1 +3973,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3990,1 +3990,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -4005,1 +4005,1 @@\n-                vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -4022,1 +4022,1 @@\n-                vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -4040,1 +4040,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -4272,1 +4272,1 @@\n-                    vectorType, short.class, short.class, VECTOR_OPER_TYPE, laneCount,\n+                    vectorType, short.class, VECTOR_OPER_TYPE, laneCount,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":40,"deletions":40,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -212,2 +212,2 @@\n-                vsp.maskType(), vsp.carrierType(), vsp.elementType(),\n-                vsp.operType(), laneCount, bits, (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET, false,\n+                vsp.maskType(), vsp.carrierType(), vsp.operType(), laneCount, bits,\n+                (long) offset + Unsafe.ARRAY_BOOLEAN_BASE_OFFSET, false,\n@@ -216,1 +216,1 @@\n-                  -> s.opm(n -> c[((int )idx) + n]));\n+                  -> s.opm(n -> c[((int)idx) + n]));\n@@ -245,1 +245,1 @@\n-        return VectorSupport.fromBitsCoerced(vsp.maskType(), vsp.carrierType(), vsp.elementType(),\n+        return VectorSupport.fromBitsCoerced(vsp.maskType(), vsp.carrierType(),\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorMask.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorOperators.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -573,0 +573,4 @@\n+#if[FP16]\n+            int index = Float16.shortBitsToFloat16(vecPayload1[i]).intValue();\n+            int wrapped_index = VectorIntrinsics.wrapToRange(index, 2 * vlen);\n+#else[FP16]\n@@ -574,0 +578,1 @@\n+#end[FP16]\n@@ -604,1 +609,1 @@\n-        return VectorSupport.fromBitsCoerced(vsp.vectorType(), $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, species.length(),\n+        return VectorSupport.fromBitsCoerced(vsp.vectorType(), $carriertype$.class, VECTOR_OPER_TYPE, species.length(),\n@@ -608,1 +613,1 @@\n-        return VectorSupport.fromBitsCoerced(vsp.vectorType(), $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, species.length(),\n+        return VectorSupport.fromBitsCoerced(vsp.vectorType(), $carriertype$.class, VECTOR_OPER_TYPE, species.length(),\n@@ -740,1 +745,1 @@\n-            opc, getClass(), null, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, $carriertype$.class, VECTOR_OPER_TYPE, length(),\n@@ -775,1 +780,1 @@\n-            opc, getClass(), maskClass, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, $carriertype$.class, VECTOR_OPER_TYPE, length(),\n@@ -954,1 +959,1 @@\n-            opc, getClass(), null, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, $carriertype$.class, VECTOR_OPER_TYPE, length(),\n@@ -1021,1 +1026,1 @@\n-            opc, getClass(), maskClass, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, $carriertype$.class, VECTOR_OPER_TYPE, length(),\n@@ -1273,1 +1278,1 @@\n-            opc, getClass(), null, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, $carriertype$.class, VECTOR_OPER_TYPE, length(),\n@@ -1294,1 +1299,1 @@\n-            opc, getClass(), maskClass, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, $carriertype$.class, VECTOR_OPER_TYPE, length(),\n@@ -1378,1 +1383,1 @@\n-            opc, getClass(), null, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, $carriertype$.class, VECTOR_OPER_TYPE, length(),\n@@ -1420,1 +1425,1 @@\n-            opc, getClass(), maskClass, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, $carriertype$.class, VECTOR_OPER_TYPE, length(),\n@@ -2557,1 +2562,1 @@\n-            opc, getClass(), maskType, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskType, $carriertype$.class, VECTOR_OPER_TYPE, length(),\n@@ -2579,1 +2584,1 @@\n-            opc, getClass(), maskType, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskType, $carriertype$.class, VECTOR_OPER_TYPE, length(),\n@@ -2723,1 +2728,1 @@\n-            getClass(), maskType, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), maskType, $carriertype$.class, VECTOR_OPER_TYPE, length(),\n@@ -2740,1 +2745,1 @@\n-            getClass(), $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), $carriertype$.class, VECTOR_OPER_TYPE, length(),\n@@ -2954,1 +2959,1 @@\n-            getClass(), shuffletype, null, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(),\n+            getClass(), shuffletype, null, $carriertype$.class, VECTOR_OPER_TYPE, length(),\n@@ -2981,1 +2986,1 @@\n-                   getClass(), shuffletype, masktype, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(),\n+                   getClass(), shuffletype, masktype, $carriertype$.class, VECTOR_OPER_TYPE, length(),\n@@ -3007,1 +3012,1 @@\n-                getClass(), shuffletype, null, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(),\n+                getClass(), shuffletype, null, $carriertype$.class, VECTOR_OPER_TYPE, length(),\n@@ -3015,1 +3020,1 @@\n-                getClass(), shuffletype, null, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(),\n+                getClass(), shuffletype, null, $carriertype$.class, VECTOR_OPER_TYPE, length(),\n@@ -3080,1 +3085,1 @@\n-                                                        $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(), this, m,\n+                                                        $carriertype$.class, VECTOR_OPER_TYPE, length(), this, m,\n@@ -3099,1 +3104,1 @@\n-                                                        $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(), this, m,\n+                                                        $carriertype$.class, VECTOR_OPER_TYPE, length(), this, m,\n@@ -3114,1 +3119,1 @@\n-        return ($Type$Vector)VectorSupport.selectFromOp(getClass(), null, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE,\n+        return ($Type$Vector)VectorSupport.selectFromOp(getClass(), null, $carriertype$.class, VECTOR_OPER_TYPE,\n@@ -3134,1 +3139,1 @@\n-        return ($Type$Vector)VectorSupport.selectFromOp(getClass(), masktype, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE,\n+        return ($Type$Vector)VectorSupport.selectFromOp(getClass(), masktype, $carriertype$.class, VECTOR_OPER_TYPE,\n@@ -3152,1 +3157,1 @@\n-        return VectorSupport.selectFromTwoVectorOp(getClass(), $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(), this, v1, v2,\n+        return VectorSupport.selectFromTwoVectorOp(getClass(), $carriertype$.class, VECTOR_OPER_TYPE, length(), this, v1, v2,\n@@ -3501,1 +3506,1 @@\n-            opc, getClass(), maskClass, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), maskClass, $carriertype$.class, VECTOR_OPER_TYPE, length(),\n@@ -3519,1 +3524,1 @@\n-            opc, getClass(), null, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, length(),\n+            opc, getClass(), null, $carriertype$.class, VECTOR_OPER_TYPE, length(),\n@@ -3890,1 +3895,1 @@\n-            vectorType, null, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vectorType, null, $carriertype$.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3898,1 +3903,1 @@\n-            vectorType, null, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vectorType, null, $carriertype$.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -3951,1 +3956,1 @@\n-            vectorType, null, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vectorType, null, $carriertype$.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -4450,1 +4455,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -4577,1 +4582,1 @@\n-            vsp.vectorType(), null, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), null, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -4670,1 +4675,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -4832,1 +4837,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -5046,1 +5051,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -5063,1 +5068,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -5121,1 +5126,1 @@\n-            vectorType, maskClass, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vectorType, maskClass, $carriertype$.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -5129,1 +5134,1 @@\n-            vectorType, maskClass, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vectorType, maskClass, $carriertype$.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -5184,1 +5189,1 @@\n-            vectorType, maskClass, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vectorType, maskClass, $carriertype$.class, VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -5202,1 +5207,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -5219,1 +5224,1 @@\n-                vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -5236,1 +5241,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -5253,1 +5258,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -5268,1 +5273,1 @@\n-                vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -5284,1 +5289,1 @@\n-                vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -5302,1 +5307,1 @@\n-            vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -5319,1 +5324,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -5375,1 +5380,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -5400,1 +5405,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -5414,1 +5419,1 @@\n-                vsp.vectorType(), vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -5431,1 +5436,1 @@\n-                vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+                vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -5450,1 +5455,1 @@\n-            vsp.vectorType(), maskClass, vsp.carrierType(), vsp.elementType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n+            vsp.vectorType(), maskClass, vsp.carrierType(), VECTOR_OPER_TYPE, vsp.laneCount(),\n@@ -5722,1 +5727,1 @@\n-                    vectorType, $carriertype$.class, $elemtype$.class, VECTOR_OPER_TYPE, laneCount,\n+                    vectorType, $carriertype$.class, VECTOR_OPER_TYPE, laneCount,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":56,"deletions":51,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -605,1 +605,1 @@\n-                     VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                     VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -673,1 +673,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -776,1 +776,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -878,1 +878,1 @@\n-                                VCLASS, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+                                VCLASS, CTYPE, VECTOR_OPER_TYPE, VLENGTH,\n@@ -994,1 +994,1 @@\n-                $masktype$.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n+                $masktype$.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, offset, limit,\n@@ -1010,1 +1010,1 @@\n-                $vectortype$.class, $masktype$.class, CTYPE, ETYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n+                $vectortype$.class, $masktype$.class, CTYPE, VECTOR_OPER_TYPE, VLENGTH, null, this,\n@@ -1023,1 +1023,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_AND, $masktype$.class, null, $bitstype$.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_AND, $masktype$.class, null, $bitstype$.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -1033,1 +1033,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_OR, $masktype$.class, null, $bitstype$.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_OR, $masktype$.class, null, $bitstype$.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -1043,1 +1043,1 @@\n-            return VectorSupport.binaryOp(VECTOR_OP_XOR, $masktype$.class, null, $bitstype$.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.binaryOp(VECTOR_OP_XOR, $masktype$.class, null, $bitstype$.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -1053,1 +1053,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, $masktype$.class, $bitstype$.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TRUECOUNT, $masktype$.class, $bitstype$.class,\n@@ -1061,1 +1061,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, $masktype$.class, $bitstype$.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_FIRSTTRUE, $masktype$.class, $bitstype$.class,\n@@ -1069,1 +1069,1 @@\n-            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, $masktype$.class, $bitstype$.class, ETYPE,\n+            return (int) VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_LASTTRUE, $masktype$.class, $bitstype$.class,\n@@ -1080,1 +1080,1 @@\n-            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, $masktype$.class, $bitstype$.class, ETYPE,\n+            return VectorSupport.maskReductionCoerced(VECTOR_OP_MASK_TOLONG, $masktype$.class, $bitstype$.class,\n@@ -1091,1 +1091,1 @@\n-            return VectorSupport.extract($masktype$.class, $type$.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.extract($masktype$.class, $type$.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -1100,1 +1100,1 @@\n-            return VectorSupport.test(BT_ne, $masktype$.class, $bitstype$.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_ne, $masktype$.class, $bitstype$.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -1108,1 +1108,1 @@\n-            return VectorSupport.test(BT_overflow, $masktype$.class, $bitstype$.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.test(BT_overflow, $masktype$.class, $bitstype$.class, VECTOR_OPER_TYPE, VLENGTH,\n@@ -1116,1 +1116,1 @@\n-            return VectorSupport.fromBitsCoerced($masktype$.class, $bitstype$.class, ETYPE, VECTOR_OPER_TYPE, VLENGTH,\n+            return VectorSupport.fromBitsCoerced($masktype$.class, $bitstype$.class, VECTOR_OPER_TYPE, VLENGTH,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -6525,1 +6525,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -6566,1 +6566,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6525,1 +6525,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -6566,1 +6566,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6525,1 +6525,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -6566,1 +6566,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6525,1 +6525,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -6566,1 +6566,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6530,1 +6530,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -6571,1 +6571,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4924,1 +4924,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -4965,1 +4965,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4924,1 +4924,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -4965,1 +4965,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4924,1 +4924,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -4965,1 +4965,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4924,1 +4924,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -4965,1 +4965,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4929,1 +4929,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -4970,1 +4970,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4903,1 +4903,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -4944,1 +4944,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4903,1 +4903,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -4944,1 +4944,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4903,1 +4903,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -4944,1 +4944,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4903,1 +4903,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -4944,1 +4944,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4908,1 +4908,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -4949,1 +4949,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -335,1 +335,1 @@\n-                    wrapped_index = Math.floorMod((int)order[idx], 2 * vector_len);\n+                    wrapped_index = Math.floorMod(Float16.shortBitsToFloat16(order[idx]).intValue(), 2 * vector_len);\n@@ -2710,1 +2710,1 @@\n-            res += ADDReduceLong(a, i);\n+            res = Float.floatToFloat16(Float.float16ToFloat((short)res) + Float.float16ToFloat((short)ADDReduceLong(a, i)));\n@@ -2728,2 +2728,2 @@\n-        for (int i = 0; i < a.length; i ++) {\n-            ra += r[i];\n+        for (int i = 0; i < a.length; i++) {\n+            ra = (long)(Float16.float16ToRawShortBits(Float16.add(Float16.shortBitsToFloat16((short)ra), Float16.shortBitsToFloat16((short)r[i]))));\n@@ -2749,1 +2749,1 @@\n-            res += ADDReduceLongMasked(a, i, mask);\n+            res = Float.floatToFloat16(Float.float16ToFloat((short)res) + Float.float16ToFloat((short)ADDReduceLongMasked(a, i, mask)));\n@@ -2769,2 +2769,2 @@\n-        for (int i = 0; i < a.length; i ++) {\n-            ra += r[i];\n+        for (int i = 0; i < a.length; i++) {\n+            ra = (long)(Float16.float16ToRawShortBits(Float16.add(Float16.shortBitsToFloat16((short)ra), Float16.shortBitsToFloat16((short)r[i]))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Halffloat128VectorTests.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -335,1 +335,1 @@\n-                    wrapped_index = Math.floorMod((int)order[idx], 2 * vector_len);\n+                    wrapped_index = Math.floorMod(Float16.shortBitsToFloat16(order[idx]).intValue(), 2 * vector_len);\n@@ -2710,1 +2710,1 @@\n-            res += ADDReduceLong(a, i);\n+            res = Float.floatToFloat16(Float.float16ToFloat((short)res) + Float.float16ToFloat((short)ADDReduceLong(a, i)));\n@@ -2728,2 +2728,2 @@\n-        for (int i = 0; i < a.length; i ++) {\n-            ra += r[i];\n+        for (int i = 0; i < a.length; i++) {\n+            ra = (long)(Float16.float16ToRawShortBits(Float16.add(Float16.shortBitsToFloat16((short)ra), Float16.shortBitsToFloat16((short)r[i]))));\n@@ -2749,1 +2749,1 @@\n-            res += ADDReduceLongMasked(a, i, mask);\n+            res = Float.floatToFloat16(Float.float16ToFloat((short)res) + Float.float16ToFloat((short)ADDReduceLongMasked(a, i, mask)));\n@@ -2769,2 +2769,2 @@\n-        for (int i = 0; i < a.length; i ++) {\n-            ra += r[i];\n+        for (int i = 0; i < a.length; i++) {\n+            ra = (long)(Float16.float16ToRawShortBits(Float16.add(Float16.shortBitsToFloat16((short)ra), Float16.shortBitsToFloat16((short)r[i]))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Halffloat256VectorTests.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -335,1 +335,1 @@\n-                    wrapped_index = Math.floorMod((int)order[idx], 2 * vector_len);\n+                    wrapped_index = Math.floorMod(Float16.shortBitsToFloat16(order[idx]).intValue(), 2 * vector_len);\n@@ -2710,1 +2710,1 @@\n-            res += ADDReduceLong(a, i);\n+            res = Float.floatToFloat16(Float.float16ToFloat((short)res) + Float.float16ToFloat((short)ADDReduceLong(a, i)));\n@@ -2728,2 +2728,2 @@\n-        for (int i = 0; i < a.length; i ++) {\n-            ra += r[i];\n+        for (int i = 0; i < a.length; i++) {\n+            ra = (long)(Float16.float16ToRawShortBits(Float16.add(Float16.shortBitsToFloat16((short)ra), Float16.shortBitsToFloat16((short)r[i]))));\n@@ -2749,1 +2749,1 @@\n-            res += ADDReduceLongMasked(a, i, mask);\n+            res = Float.floatToFloat16(Float.float16ToFloat((short)res) + Float.float16ToFloat((short)ADDReduceLongMasked(a, i, mask)));\n@@ -2769,2 +2769,2 @@\n-        for (int i = 0; i < a.length; i ++) {\n-            ra += r[i];\n+        for (int i = 0; i < a.length; i++) {\n+            ra = (long)(Float16.float16ToRawShortBits(Float16.add(Float16.shortBitsToFloat16((short)ra), Float16.shortBitsToFloat16((short)r[i]))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Halffloat512VectorTests.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -335,1 +335,1 @@\n-                    wrapped_index = Math.floorMod((int)order[idx], 2 * vector_len);\n+                    wrapped_index = Math.floorMod(Float16.shortBitsToFloat16(order[idx]).intValue(), 2 * vector_len);\n@@ -2710,1 +2710,1 @@\n-            res += ADDReduceLong(a, i);\n+            res = Float.floatToFloat16(Float.float16ToFloat((short)res) + Float.float16ToFloat((short)ADDReduceLong(a, i)));\n@@ -2728,2 +2728,2 @@\n-        for (int i = 0; i < a.length; i ++) {\n-            ra += r[i];\n+        for (int i = 0; i < a.length; i++) {\n+            ra = (long)(Float16.float16ToRawShortBits(Float16.add(Float16.shortBitsToFloat16((short)ra), Float16.shortBitsToFloat16((short)r[i]))));\n@@ -2749,1 +2749,1 @@\n-            res += ADDReduceLongMasked(a, i, mask);\n+            res = Float.floatToFloat16(Float.float16ToFloat((short)res) + Float.float16ToFloat((short)ADDReduceLongMasked(a, i, mask)));\n@@ -2769,2 +2769,2 @@\n-        for (int i = 0; i < a.length; i ++) {\n-            ra += r[i];\n+        for (int i = 0; i < a.length; i++) {\n+            ra = (long)(Float16.float16ToRawShortBits(Float16.add(Float16.shortBitsToFloat16((short)ra), Float16.shortBitsToFloat16((short)r[i]))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Halffloat64VectorTests.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -340,1 +340,1 @@\n-                    wrapped_index = Math.floorMod((int)order[idx], 2 * vector_len);\n+                    wrapped_index = Math.floorMod(Float16.shortBitsToFloat16(order[idx]).intValue(), 2 * vector_len);\n@@ -2715,1 +2715,1 @@\n-            res += ADDReduceLong(a, i);\n+            res = Float.floatToFloat16(Float.float16ToFloat((short)res) + Float.float16ToFloat((short)ADDReduceLong(a, i)));\n@@ -2733,2 +2733,2 @@\n-        for (int i = 0; i < a.length; i ++) {\n-            ra += r[i];\n+        for (int i = 0; i < a.length; i++) {\n+            ra = (long)(Float16.float16ToRawShortBits(Float16.add(Float16.shortBitsToFloat16((short)ra), Float16.shortBitsToFloat16((short)r[i]))));\n@@ -2754,1 +2754,1 @@\n-            res += ADDReduceLongMasked(a, i, mask);\n+            res = Float.floatToFloat16(Float.float16ToFloat((short)res) + Float.float16ToFloat((short)ADDReduceLongMasked(a, i, mask)));\n@@ -2774,2 +2774,2 @@\n-        for (int i = 0; i < a.length; i ++) {\n-            ra += r[i];\n+        for (int i = 0; i < a.length; i++) {\n+            ra = (long)(Float16.float16ToRawShortBits(Float16.add(Float16.shortBitsToFloat16((short)ra), Float16.shortBitsToFloat16((short)r[i]))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/HalffloatMaxVectorTests.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -6558,1 +6558,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -6599,1 +6599,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6558,1 +6558,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -6599,1 +6599,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6558,1 +6558,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -6599,1 +6599,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6558,1 +6558,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -6599,1 +6599,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6563,1 +6563,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -6604,1 +6604,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6510,1 +6510,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -6551,1 +6551,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6510,1 +6510,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -6551,1 +6551,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6510,1 +6510,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -6551,1 +6551,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6510,1 +6510,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -6551,1 +6551,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6515,1 +6515,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n@@ -6556,1 +6556,1 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -147,0 +147,3 @@\n+#if[Halffloat]\n+            res = Float.floatToFloat16(Float.float16ToFloat((short)res) + Float.float16ToFloat((short)ADDReduceLong(a, i)));\n+#else[Halffloat]\n@@ -148,0 +151,1 @@\n+#end[Halffloat]\n@@ -165,1 +169,4 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n+#if[Halffloat]\n+            ra = (long)(Float16.float16ToRawShortBits(Float16.add(Float16.shortBitsToFloat16((short)ra), Float16.shortBitsToFloat16((short)r[i]))));\n+#else[Halffloat]\n@@ -167,0 +174,1 @@\n+#end[Halffloat]\n@@ -190,0 +198,3 @@\n+#if[Halffloat]\n+            res = Float.floatToFloat16(Float.float16ToFloat((short)res) + Float.float16ToFloat((short)ADDReduceLongMasked(a, i, mask)));\n+#else[Halffloat]\n@@ -191,0 +202,1 @@\n+#end[Halffloat]\n@@ -210,1 +222,4 @@\n-        for (int i = 0; i < a.length; i ++) {\n+        for (int i = 0; i < a.length; i++) {\n+#if[Halffloat]\n+            ra = (long)(Float16.float16ToRawShortBits(Float16.add(Float16.shortBitsToFloat16((short)ra), Float16.shortBitsToFloat16((short)r[i]))));\n+#else[Halffloat]\n@@ -212,0 +227,1 @@\n+#end[Halffloat]\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Miscellaneous.template","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -417,1 +417,1 @@\n-                    wrapped_index = Math.floorMod((int)order[idx], 2 * vector_len);\n+                    wrapped_index = Math.floorMod({#if[FP16]?Float16.shortBitsToFloat16(order[idx]).intValue():(int)order[idx]}, 2 * vector_len);\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}